// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3401 0 0
// PrepareAmerican ;
  37: CALL 1011 0 0
// PrepareRussian ;
  41: CALL 8706 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 88964 0 9
// Action ;
  97: CALL 25319 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter , ruActiveAttacks ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// ruActiveAttacks := false ;
 286: LD_ADDR_EXP 22
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// ruTransportDestroyed := false ;
 294: LD_ADDR_EXP 78
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// end ;
 302: LD_VAR 0 1
 306: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) do
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 25
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PPUSH
 331: CALL_OW 69
 335: IFFALSE 348
 337: GO 339
 339: DISABLE
// hasSniper := true ;
 340: LD_ADDR_EXP 20
 344: PUSH
 345: LD_INT 1
 347: ST_TO_ADDR
 348: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 349: LD_INT 1
 351: PPUSH
 352: LD_INT 2
 354: PPUSH
 355: CALL_OW 81
 359: PUSH
 360: LD_INT 1
 362: EQUAL
 363: PUSH
 364: LD_EXP 4
 368: NOT
 369: AND
 370: PUSH
 371: LD_EXP 19
 375: AND
 376: PUSH
 377: LD_INT 22
 379: PUSH
 380: LD_INT 3
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PPUSH
 387: CALL_OW 69
 391: PUSH
 392: LD_INT 0
 394: EQUAL
 395: AND
 396: IFFALSE 408
 398: GO 400
 400: DISABLE
// SetAchievement ( ACH_POWER ) ;
 401: LD_STRING ACH_POWER
 403: PPUSH
 404: CALL_OW 543
 408: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 409: LD_EXP 19
 413: PUSH
 414: LD_EXP 68
 418: NOT
 419: AND
 420: PUSH
 421: LD_EXP 69
 425: NOT
 426: AND
 427: PUSH
 428: LD_INT 22
 430: PUSH
 431: LD_INT 3
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PPUSH
 438: CALL_OW 69
 442: PUSH
 443: LD_INT 0
 445: EQUAL
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_TACT ) ;
 452: LD_STRING ACH_TACT
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: LD_INT 22
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 30
 501: PUSH
 502: LD_INT 32
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PPUSH
 513: CALL_OW 69
 517: AND
 518: PUSH
 519: LD_INT 22
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 30
 531: PUSH
 532: LD_INT 33
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PPUSH
 543: CALL_OW 69
 547: AND
 548: PUSH
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 30
 561: PUSH
 562: LD_INT 5
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: AND
 578: PUSH
 579: LD_INT 22
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 30
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PPUSH
 603: CALL_OW 69
 607: AND
 608: PUSH
 609: LD_INT 22
 611: PUSH
 612: LD_INT 1
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 30
 621: PUSH
 622: LD_INT 36
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PPUSH
 633: CALL_OW 69
 637: AND
 638: PUSH
 639: LD_INT 22
 641: PUSH
 642: LD_INT 1
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 30
 651: PUSH
 652: LD_INT 31
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PPUSH
 663: CALL_OW 69
 667: AND
 668: PUSH
 669: LD_INT 22
 671: PUSH
 672: LD_INT 1
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 30
 681: PUSH
 682: LD_INT 22
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: PPUSH
 693: CALL_OW 69
 697: AND
 698: PUSH
 699: LD_INT 22
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: LD_INT 30
 711: PUSH
 712: LD_INT 20
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PPUSH
 723: CALL_OW 69
 727: AND
 728: PUSH
 729: LD_INT 22
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: LD_INT 30
 741: PUSH
 742: LD_INT 19
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PPUSH
 753: CALL_OW 69
 757: AND
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 30
 771: PUSH
 772: LD_INT 16
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: AND
 788: PUSH
 789: LD_INT 22
 791: PUSH
 792: LD_INT 1
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 30
 801: PUSH
 802: LD_INT 17
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PPUSH
 813: CALL_OW 69
 817: AND
 818: PUSH
 819: LD_INT 22
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 30
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PPUSH
 843: CALL_OW 69
 847: AND
 848: PUSH
 849: LD_INT 22
 851: PUSH
 852: LD_INT 1
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 30
 861: PUSH
 862: LD_INT 29
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PPUSH
 873: CALL_OW 69
 877: AND
 878: PUSH
 879: LD_INT 22
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PUSH
 889: LD_INT 30
 891: PUSH
 892: LD_INT 30
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PPUSH
 903: CALL_OW 69
 907: AND
 908: PUSH
 909: LD_INT 22
 911: PUSH
 912: LD_INT 1
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 30
 921: PUSH
 922: LD_INT 27
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PPUSH
 933: CALL_OW 69
 937: AND
 938: PUSH
 939: LD_INT 22
 941: PUSH
 942: LD_INT 1
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 30
 951: PUSH
 952: LD_INT 26
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PPUSH
 963: CALL_OW 69
 967: AND
 968: PUSH
 969: LD_INT 22
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 30
 981: PUSH
 982: LD_INT 28
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: PPUSH
 993: CALL_OW 69
 997: AND
 998: IFFALSE 1010
1000: GO 1002
1002: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1003: LD_STRING ACH_ARCH
1005: PPUSH
1006: CALL_OW 543
1010: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
1011: LD_INT 0
1013: PPUSH
1014: PPUSH
1015: PPUSH
1016: PPUSH
1017: PPUSH
1018: PPUSH
1019: PPUSH
1020: PPUSH
// uc_nation := nation_american ;
1021: LD_ADDR_OWVAR 21
1025: PUSH
1026: LD_INT 1
1028: ST_TO_ADDR
// uc_side := 4 ;
1029: LD_ADDR_OWVAR 20
1033: PUSH
1034: LD_INT 4
1036: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1037: LD_ADDR_EXP 44
1041: PUSH
1042: LD_STRING Powell
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: LD_STRING 
1050: PPUSH
1051: CALL 54596 0 3
1055: ST_TO_ADDR
// uc_side := 1 ;
1056: LD_ADDR_OWVAR 20
1060: PUSH
1061: LD_INT 1
1063: ST_TO_ADDR
// JMMSquad := [ ] ;
1064: LD_ADDR_EXP 45
1068: PUSH
1069: EMPTY
1070: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1071: LD_ADDR_EXP 23
1075: PUSH
1076: LD_STRING JMM
1078: PPUSH
1079: LD_EXP 1
1083: NOT
1084: PPUSH
1085: LD_STRING 10_
1087: PPUSH
1088: CALL 54596 0 3
1092: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1093: LD_ADDR_EXP 32
1097: PUSH
1098: LD_STRING Gary
1100: PPUSH
1101: LD_EXP 1
1105: NOT
1106: PPUSH
1107: LD_STRING 10_
1109: PPUSH
1110: CALL 54596 0 3
1114: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1115: LD_ADDR_EXP 27
1119: PUSH
1120: LD_STRING Cyrus
1122: PPUSH
1123: LD_EXP 1
1127: NOT
1128: PPUSH
1129: LD_STRING 10_
1131: PPUSH
1132: CALL 54596 0 3
1136: ST_TO_ADDR
// if Cyrus then
1137: LD_EXP 27
1141: IFFALSE 1159
// JMMSquad := JMMSquad ^ Cyrus ;
1143: LD_ADDR_EXP 45
1147: PUSH
1148: LD_EXP 45
1152: PUSH
1153: LD_EXP 27
1157: ADD
1158: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1159: LD_ADDR_EXP 26
1163: PUSH
1164: LD_STRING Bobby
1166: PPUSH
1167: LD_EXP 1
1171: NOT
1172: PPUSH
1173: LD_STRING 10_
1175: PPUSH
1176: CALL 54596 0 3
1180: ST_TO_ADDR
// if Bobby then
1181: LD_EXP 26
1185: IFFALSE 1203
// JMMSquad := JMMSquad ^ Bobby ;
1187: LD_ADDR_EXP 45
1191: PUSH
1192: LD_EXP 45
1196: PUSH
1197: LD_EXP 26
1201: ADD
1202: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1203: LD_ADDR_EXP 28
1207: PUSH
1208: LD_STRING Lisa
1210: PPUSH
1211: LD_EXP 1
1215: NOT
1216: PPUSH
1217: LD_STRING 10_
1219: PPUSH
1220: CALL 54596 0 3
1224: ST_TO_ADDR
// if Lisa then
1225: LD_EXP 28
1229: IFFALSE 1247
// JMMSquad := JMMSquad ^ Lisa ;
1231: LD_ADDR_EXP 45
1235: PUSH
1236: LD_EXP 45
1240: PUSH
1241: LD_EXP 28
1245: ADD
1246: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1247: LD_ADDR_EXP 24
1251: PUSH
1252: LD_STRING Brown
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 10_
1263: PPUSH
1264: CALL 54596 0 3
1268: ST_TO_ADDR
// if Brown then
1269: LD_EXP 24
1273: IFFALSE 1291
// JMMSquad := JMMSquad ^ Brown ;
1275: LD_ADDR_EXP 45
1279: PUSH
1280: LD_EXP 45
1284: PUSH
1285: LD_EXP 24
1289: ADD
1290: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1291: LD_ADDR_EXP 25
1295: PUSH
1296: LD_STRING Donaldson
1298: PPUSH
1299: LD_EXP 1
1303: NOT
1304: PPUSH
1305: LD_STRING 10_
1307: PPUSH
1308: CALL 54596 0 3
1312: ST_TO_ADDR
// if Donaldson then
1313: LD_EXP 25
1317: IFFALSE 1335
// JMMSquad := JMMSquad ^ Donaldson ;
1319: LD_ADDR_EXP 45
1323: PUSH
1324: LD_EXP 45
1328: PUSH
1329: LD_EXP 25
1333: ADD
1334: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_STRING Frank
1342: PPUSH
1343: LD_EXP 1
1347: NOT
1348: PPUSH
1349: LD_STRING 10_
1351: PPUSH
1352: CALL 54596 0 3
1356: ST_TO_ADDR
// if Frank then
1357: LD_EXP 29
1361: IFFALSE 1379
// JMMSquad := JMMSquad ^ Frank ;
1363: LD_ADDR_EXP 45
1367: PUSH
1368: LD_EXP 45
1372: PUSH
1373: LD_EXP 29
1377: ADD
1378: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1379: LD_ADDR_EXP 31
1383: PUSH
1384: LD_STRING Houten
1386: PPUSH
1387: LD_EXP 1
1391: NOT
1392: PPUSH
1393: LD_STRING 10_
1395: PPUSH
1396: CALL 54596 0 3
1400: ST_TO_ADDR
// if Houten then
1401: LD_EXP 31
1405: IFFALSE 1423
// JMMSquad := JMMSquad ^ Houten ;
1407: LD_ADDR_EXP 45
1411: PUSH
1412: LD_EXP 45
1416: PUSH
1417: LD_EXP 31
1421: ADD
1422: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1423: LD_ADDR_EXP 46
1427: PUSH
1428: LD_STRING OthersIn10
1430: PPUSH
1431: CALL_OW 31
1435: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1436: LD_EXP 45
1440: PPUSH
1441: CALL 56698 0 1
1445: PUSH
1446: LD_EXP 46
1450: PPUSH
1451: CALL 56698 0 1
1455: PLUS
1456: PUSH
1457: LD_INT 9
1459: LESS
1460: IFFALSE 1547
// begin InitHC_All ( ) ;
1462: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1466: LD_ADDR_VAR 0 2
1470: PUSH
1471: DOUBLE
1472: LD_INT 9
1474: INC
1475: ST_TO_ADDR
1476: LD_EXP 45
1480: PPUSH
1481: CALL 56698 0 1
1485: PUSH
1486: LD_EXP 46
1490: PPUSH
1491: CALL 56698 0 1
1495: PLUS
1496: PUSH
1497: FOR_DOWNTO
1498: IFFALSE 1545
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1500: LD_INT 0
1502: PPUSH
1503: LD_VAR 0 2
1507: PUSH
1508: LD_INT 4
1510: MOD
1511: PUSH
1512: LD_INT 1
1514: PLUS
1515: PPUSH
1516: LD_INT 5
1518: PPUSH
1519: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1523: LD_ADDR_EXP 46
1527: PUSH
1528: LD_EXP 46
1532: PPUSH
1533: CALL_OW 44
1537: PPUSH
1538: CALL 92287 0 2
1542: ST_TO_ADDR
// end ;
1543: GO 1497
1545: POP
1546: POP
// end ; if debug then
1547: LD_EXP 1
1551: IFFALSE 1592
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1553: LD_ADDR_VAR 0 1
1557: PUSH
1558: LD_EXP 27
1562: PUSH
1563: LD_EXP 26
1567: PUSH
1568: LD_EXP 28
1572: PUSH
1573: LD_EXP 25
1577: PUSH
1578: LD_EXP 24
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: ST_TO_ADDR
1590: GO 1755
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1592: LD_ADDR_VAR 0 1
1596: PUSH
1597: LD_STRING 1
1599: PPUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 4
1608: PUSH
1609: LD_INT 4
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: PUSH
1618: LD_OWVAR 67
1622: ARRAY
1623: PPUSH
1624: LD_INT 6
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 4
1632: PUSH
1633: LD_INT 4
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_OWVAR 67
1646: ARRAY
1647: PPUSH
1648: LD_INT -4
1650: PUSH
1651: LD_INT -1
1653: PUSH
1654: LD_INT -5
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: PUSH
1662: LD_EXP 23
1666: ADD
1667: PUSH
1668: LD_EXP 32
1672: ADD
1673: PUSH
1674: LD_INT -2
1676: PUSH
1677: LD_INT -3
1679: PUSH
1680: LD_INT -5
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: ADD
1688: PUSH
1689: LD_EXP 45
1693: ADD
1694: PUSH
1695: LD_EXP 46
1699: ADD
1700: PUSH
1701: LD_INT -4
1703: PUSH
1704: LD_INT -2
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: ADD
1711: PUSH
1712: LD_EXP 44
1716: ADD
1717: PPUSH
1718: LD_INT 1
1720: PUSH
1721: LD_INT 3
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 2
1733: PUSH
1734: LD_INT 1
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 4
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: PPUSH
1750: CALL_OW 42
1754: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1755: LD_ADDR_VAR 0 1
1759: PUSH
1760: LD_VAR 0 1
1764: PPUSH
1765: LD_EXP 23
1769: PPUSH
1770: CALL 92324 0 2
1774: ST_TO_ADDR
// if Gary then
1775: LD_EXP 32
1779: IFFALSE 1801
// result := JoinUnion ( result , Gary ) ;
1781: LD_ADDR_VAR 0 1
1785: PUSH
1786: LD_VAR 0 1
1790: PPUSH
1791: LD_EXP 32
1795: PPUSH
1796: CALL 92324 0 2
1800: ST_TO_ADDR
// if Count ( others ) then
1801: LD_EXP 46
1805: PPUSH
1806: CALL 56698 0 1
1810: IFFALSE 1828
// others := others diff result ;
1812: LD_ADDR_EXP 46
1816: PUSH
1817: LD_EXP 46
1821: PUSH
1822: LD_VAR 0 1
1826: DIFF
1827: ST_TO_ADDR
// vehs := [ ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: EMPTY
1834: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1835: LD_INT 2
1837: PPUSH
1838: LD_INT 1
1840: PPUSH
1841: LD_INT 1
1843: PPUSH
1844: LD_INT 12
1846: PPUSH
1847: LD_INT 50
1849: PPUSH
1850: CALL 59436 0 5
// veh := CreateVehicle ;
1854: LD_ADDR_VAR 0 4
1858: PUSH
1859: CALL_OW 45
1863: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1864: LD_ADDR_VAR 0 5
1868: PUSH
1869: LD_VAR 0 5
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL 92287 0 2
1883: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1884: LD_VAR 0 4
1888: PPUSH
1889: LD_INT 1
1891: PPUSH
1892: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1896: LD_ADDR_VAR 0 6
1900: PUSH
1901: LD_STRING 09_sibRes
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 30
1911: PUSH
1912: LD_INT 20
1914: MINUS
1915: ST_TO_ADDR
// if sibRes >= 100 then
1916: LD_VAR 0 6
1920: PUSH
1921: LD_INT 100
1923: GREATEREQUAL
1924: IFFALSE 1943
// SetCargo ( veh , mat_siberit , 100 ) else
1926: LD_VAR 0 4
1930: PPUSH
1931: LD_INT 3
1933: PPUSH
1934: LD_INT 100
1936: PPUSH
1937: CALL_OW 290
1941: GO 1960
// SetCargo ( veh , mat_siberit , sibRes ) ;
1943: LD_VAR 0 4
1947: PPUSH
1948: LD_INT 3
1950: PPUSH
1951: LD_VAR 0 6
1955: PPUSH
1956: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1960: LD_INT 2
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: LD_INT 1
1968: PPUSH
1969: LD_INT 12
1971: PPUSH
1972: LD_INT 50
1974: PPUSH
1975: CALL 59436 0 5
// veh := CreateVehicle ;
1979: LD_ADDR_VAR 0 4
1983: PUSH
1984: CALL_OW 45
1988: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1989: LD_ADDR_VAR 0 5
1993: PUSH
1994: LD_VAR 0 5
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 92287 0 2
2008: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2009: LD_VAR 0 4
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
2021: LD_VAR 0 4
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: LD_INT 100
2031: PPUSH
2032: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: DOUBLE
2042: LD_INT 1
2044: DEC
2045: ST_TO_ADDR
2046: LD_VAR 0 1
2050: PPUSH
2051: CALL 56698 0 1
2055: PUSH
2056: LD_INT 2
2058: MINUS
2059: PUSH
2060: FOR_TO
2061: IFFALSE 2167
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2063: LD_INT 2
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 3
2074: PUSH
2075: LD_INT 4
2077: PUSH
2078: LD_INT 5
2080: PUSH
2081: LD_INT 11
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 5
2101: MOD
2102: PUSH
2103: LD_INT 1
2105: PLUS
2106: ARRAY
2107: PPUSH
2108: LD_INT 45
2110: PPUSH
2111: LD_INT 55
2113: PPUSH
2114: CALL_OW 12
2118: PPUSH
2119: CALL 59436 0 5
// veh := CreateVehicle ;
2123: LD_ADDR_VAR 0 4
2127: PUSH
2128: CALL_OW 45
2132: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: LD_VAR 0 5
2142: PPUSH
2143: LD_VAR 0 4
2147: PPUSH
2148: CALL 92287 0 2
2152: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: CALL_OW 233
// end ;
2165: GO 2060
2167: POP
2168: POP
// for i in vehs do
2169: LD_ADDR_VAR 0 2
2173: PUSH
2174: LD_VAR 0 5
2178: PUSH
2179: FOR_IN
2180: IFFALSE 2235
// begin PlaceUnitArea ( i , startArea , false ) ;
2182: LD_VAR 0 2
2186: PPUSH
2187: LD_INT 3
2189: PPUSH
2190: LD_INT 0
2192: PPUSH
2193: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2197: LD_VAR 0 1
2201: PUSH
2202: LD_INT 1
2204: ARRAY
2205: PPUSH
2206: LD_VAR 0 2
2210: PPUSH
2211: CALL_OW 52
// result := Delete ( result , 1 ) ;
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: LD_VAR 0 1
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL_OW 3
2232: ST_TO_ADDR
// end ;
2233: GO 2179
2235: POP
2236: POP
// uc_side := 4 ;
2237: LD_ADDR_OWVAR 20
2241: PUSH
2242: LD_INT 4
2244: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2245: LD_STRING 08_SikorskiStatus
2247: PPUSH
2248: LD_EXP 1
2252: PPUSH
2253: CALL_OW 30
2257: IFFALSE 2278
// Truman := PrepareUnit ( Truman , false ,  ) ;
2259: LD_ADDR_EXP 43
2263: PUSH
2264: LD_STRING Truman
2266: PPUSH
2267: LD_INT 0
2269: PPUSH
2270: LD_STRING 
2272: PPUSH
2273: CALL 54596 0 3
2277: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2278: LD_ADDR_EXP 33
2282: PUSH
2283: LD_STRING Simms
2285: PPUSH
2286: LD_INT 0
2288: PPUSH
2289: LD_STRING 
2291: PPUSH
2292: CALL 54596 0 3
2296: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2297: LD_ADDR_EXP 34
2301: PUSH
2302: LD_STRING Denis
2304: PPUSH
2305: LD_EXP 1
2309: NOT
2310: PPUSH
2311: LD_STRING 08_
2313: PPUSH
2314: CALL 54596 0 3
2318: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2319: LD_ADDR_EXP 35
2323: PUSH
2324: LD_STRING Joan
2326: PPUSH
2327: LD_EXP 1
2331: NOT
2332: PPUSH
2333: LD_STRING 08_
2335: PPUSH
2336: CALL 54596 0 3
2340: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2341: LD_ADDR_EXP 41
2345: PUSH
2346: LD_STRING Mike
2348: PPUSH
2349: LD_EXP 1
2353: NOT
2354: PPUSH
2355: LD_STRING 08_
2357: PPUSH
2358: CALL 54596 0 3
2362: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2363: LD_STRING 08_Khatam
2365: PPUSH
2366: CALL_OW 28
2370: IFFALSE 2393
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2372: LD_ADDR_EXP 36
2376: PUSH
2377: LD_STRING Khatam
2379: PPUSH
2380: LD_INT 1
2382: PPUSH
2383: LD_STRING 08_
2385: PPUSH
2386: CALL 54596 0 3
2390: ST_TO_ADDR
2391: GO 2421
// if TestCharacters ( 03_Khatam ) then
2393: LD_STRING 03_Khatam
2395: PPUSH
2396: CALL_OW 28
2400: IFFALSE 2421
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2402: LD_ADDR_EXP 36
2406: PUSH
2407: LD_STRING Khatam
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: LD_STRING 03_
2415: PPUSH
2416: CALL 54596 0 3
2420: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2421: LD_ADDR_EXP 37
2425: PUSH
2426: LD_STRING Gladstone
2428: PPUSH
2429: LD_EXP 1
2433: NOT
2434: PPUSH
2435: LD_STRING 08_
2437: PPUSH
2438: CALL 54596 0 3
2442: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2443: LD_ADDR_EXP 39
2447: PUSH
2448: LD_STRING DeltaDoctor
2450: PPUSH
2451: LD_EXP 1
2455: NOT
2456: PPUSH
2457: LD_STRING 
2459: PPUSH
2460: CALL 54596 0 3
2464: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 08_ ) ;
2465: LD_ADDR_EXP 29
2469: PUSH
2470: LD_STRING Frank
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_STRING 08_
2481: PPUSH
2482: CALL 54596 0 3
2486: ST_TO_ADDR
// if Frank then
2487: LD_EXP 29
2491: IFFALSE 2514
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2493: LD_ADDR_EXP 30
2497: PUSH
2498: LD_STRING Yamoko
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: LD_STRING 
2506: PPUSH
2507: CALL 54596 0 3
2511: ST_TO_ADDR
2512: GO 2536
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2514: LD_ADDR_EXP 30
2518: PUSH
2519: LD_STRING Kikuchi
2521: PPUSH
2522: LD_EXP 1
2526: NOT
2527: PPUSH
2528: LD_STRING 08_
2530: PPUSH
2531: CALL 54596 0 3
2535: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2536: LD_ADDR_EXP 47
2540: PUSH
2541: LD_STRING 09_others
2543: PPUSH
2544: CALL_OW 31
2548: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2549: LD_ADDR_EXP 48
2553: PUSH
2554: LD_STRING 09_apes
2556: PPUSH
2557: CALL_OW 31
2561: ST_TO_ADDR
// if Truman then
2562: LD_EXP 43
2566: IFFALSE 2583
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2568: LD_EXP 43
2572: PPUSH
2573: LD_INT 4
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// if Mike then
2583: LD_EXP 41
2587: IFFALSE 2604
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2589: LD_EXP 41
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// if Simms then
2604: LD_EXP 33
2608: IFFALSE 2625
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2610: LD_EXP 33
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 0
2620: PPUSH
2621: CALL_OW 49
// if Denis then
2625: LD_EXP 34
2629: IFFALSE 2646
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2631: LD_EXP 34
2635: PPUSH
2636: LD_INT 4
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL_OW 49
// if Joan then
2646: LD_EXP 35
2650: IFFALSE 2667
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2652: LD_EXP 35
2656: PPUSH
2657: LD_INT 4
2659: PPUSH
2660: LD_INT 0
2662: PPUSH
2663: CALL_OW 49
// if Khatam then
2667: LD_EXP 36
2671: IFFALSE 2688
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2673: LD_EXP 36
2677: PPUSH
2678: LD_INT 4
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// if Gladstone then
2688: LD_EXP 37
2692: IFFALSE 2709
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2694: LD_EXP 37
2698: PPUSH
2699: LD_INT 4
2701: PPUSH
2702: LD_INT 0
2704: PPUSH
2705: CALL_OW 49
// if DeltaDoctor then
2709: LD_EXP 39
2713: IFFALSE 2730
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2715: LD_EXP 39
2719: PPUSH
2720: LD_INT 4
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// if Kikuchi then
2730: LD_EXP 30
2734: IFFALSE 2751
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2736: LD_EXP 30
2740: PPUSH
2741: LD_INT 4
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2751: LD_EXP 33
2755: PUSH
2756: LD_EXP 36
2760: PUSH
2761: LD_EXP 34
2765: PUSH
2766: LD_EXP 37
2770: PUSH
2771: LD_EXP 39
2775: PUSH
2776: LD_EXP 35
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: CALL_OW 336
// amount := Count ( others09 ) ;
2796: LD_ADDR_VAR 0 8
2800: PUSH
2801: LD_EXP 47
2805: PPUSH
2806: CALL 56698 0 1
2810: ST_TO_ADDR
// if amount then
2811: LD_VAR 0 8
2815: IFFALSE 2963
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2817: LD_VAR 0 8
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: LD_INT 4
2830: PUSH
2831: LD_INT 4
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_OWVAR 67
2844: ARRAY
2845: GREATER
2846: IFFALSE 2877
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2848: LD_ADDR_VAR 0 8
2852: PUSH
2853: LD_INT 6
2855: PUSH
2856: LD_INT 5
2858: PUSH
2859: LD_INT 4
2861: PUSH
2862: LD_INT 4
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: PUSH
2871: LD_OWVAR 67
2875: ARRAY
2876: ST_TO_ADDR
// for i := 1 to amount do
2877: LD_ADDR_VAR 0 2
2881: PUSH
2882: DOUBLE
2883: LD_INT 1
2885: DEC
2886: ST_TO_ADDR
2887: LD_VAR 0 8
2891: PUSH
2892: FOR_TO
2893: IFFALSE 2934
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2895: LD_EXP 47
2899: PUSH
2900: LD_INT 1
2902: ARRAY
2903: PPUSH
2904: LD_INT 4
2906: PPUSH
2907: LD_INT 0
2909: PPUSH
2910: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2914: LD_ADDR_EXP 47
2918: PUSH
2919: LD_EXP 47
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: CALL_OW 3
2931: ST_TO_ADDR
// end ;
2932: GO 2892
2934: POP
2935: POP
// if Count ( others09 ) then
2936: LD_EXP 47
2940: PPUSH
2941: CALL 56698 0 1
2945: IFFALSE 2963
// others := others union others09 ;
2947: LD_ADDR_EXP 46
2951: PUSH
2952: LD_EXP 46
2956: PUSH
2957: LD_EXP 47
2961: UNION
2962: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2963: LD_INT 22
2965: PUSH
2966: LD_INT 4
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 50
2975: PUSH
2976: EMPTY
2977: LIST
2978: PUSH
2979: LD_INT 25
2981: PUSH
2982: LD_INT 2
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: LIST
2993: PPUSH
2994: CALL_OW 69
2998: PUSH
2999: LD_INT 0
3001: EQUAL
3002: IFFALSE 3141
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3004: LD_ADDR_VAR 0 7
3008: PUSH
3009: LD_INT 22
3011: PUSH
3012: LD_INT 4
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 50
3021: PUSH
3022: EMPTY
3023: LIST
3024: PUSH
3025: LD_INT 25
3027: PUSH
3028: LD_INT 2
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: PPUSH
3040: CALL_OW 69
3044: PUSH
3045: LD_EXP 33
3049: PUSH
3050: LD_EXP 36
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_EXP 37
3064: PUSH
3065: LD_EXP 39
3069: PUSH
3070: LD_EXP 35
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: DIFF
3083: ST_TO_ADDR
// if not tmp then
3084: LD_VAR 0 7
3088: NOT
3089: IFFALSE 3125
// begin if Denis then
3091: LD_EXP 34
3095: IFFALSE 3111
// SetClass ( Denis , class_engineer ) else
3097: LD_EXP 34
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 336
3109: GO 3123
// SetClass ( DeltaDoctor , class_engineer ) ;
3111: LD_EXP 39
3115: PPUSH
3116: LD_INT 2
3118: PPUSH
3119: CALL_OW 336
// end else
3123: GO 3141
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3125: LD_VAR 0 7
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_INT 2
3136: PPUSH
3137: CALL_OW 336
// end ; for i in ape09 do
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: LD_EXP 48
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3171
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3154: LD_VAR 0 2
3158: PPUSH
3159: LD_INT 4
3161: PPUSH
3162: LD_INT 0
3164: PPUSH
3165: CALL_OW 49
3169: GO 3151
3171: POP
3172: POP
// PrepareSoldier ( sex_female , 6 ) ;
3173: LD_INT 2
3175: PPUSH
3176: LD_INT 6
3178: PPUSH
3179: CALL_OW 381
// AmScout := CreateHuman ;
3183: LD_ADDR_EXP 40
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// end ;
3193: LD_VAR 0 1
3197: RET
// export function PrepareCornell ; begin
3198: LD_INT 0
3200: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3201: LD_INT 4
3203: PPUSH
3204: LD_INT 4
3206: PPUSH
3207: CALL_OW 343
// uc_side := 4 ;
3211: LD_ADDR_OWVAR 20
3215: PUSH
3216: LD_INT 4
3218: ST_TO_ADDR
// uc_nation := nation_american ;
3219: LD_ADDR_OWVAR 21
3223: PUSH
3224: LD_INT 1
3226: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3227: LD_ADDR_EXP 42
3231: PUSH
3232: LD_STRING Cornel
3234: PPUSH
3235: LD_EXP 1
3239: NOT
3240: PPUSH
3241: LD_STRING 03_
3243: PPUSH
3244: CALL 54596 0 3
3248: ST_TO_ADDR
// if not Cornell then
3249: LD_EXP 42
3253: NOT
3254: IFFALSE 3258
// exit ;
3256: GO 3396
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3258: LD_EXP 42
3262: PPUSH
3263: LD_INT 12
3265: PPUSH
3266: LD_INT 0
3268: PPUSH
3269: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3273: LD_EXP 42
3277: PPUSH
3278: LD_INT 350
3280: PPUSH
3281: CALL_OW 234
// ComMoveXY ( Cornell , 125 , 17 ) ;
3285: LD_EXP 42
3289: PPUSH
3290: LD_INT 125
3292: PPUSH
3293: LD_INT 17
3295: PPUSH
3296: CALL_OW 111
// AddComMoveXY ( Cornell , 112 , 19 ) ;
3300: LD_EXP 42
3304: PPUSH
3305: LD_INT 112
3307: PPUSH
3308: LD_INT 19
3310: PPUSH
3311: CALL_OW 171
// if IsInUnit ( JMM ) then
3315: LD_EXP 23
3319: PPUSH
3320: CALL_OW 310
3324: IFFALSE 3367
// AddComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3326: LD_EXP 42
3330: PPUSH
3331: LD_EXP 23
3335: PPUSH
3336: CALL_OW 310
3340: PPUSH
3341: CALL_OW 250
3345: PPUSH
3346: LD_EXP 23
3350: PPUSH
3351: CALL_OW 310
3355: PPUSH
3356: CALL_OW 251
3360: PPUSH
3361: CALL_OW 171
3365: GO 3396
// AddComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3367: LD_EXP 42
3371: PPUSH
3372: LD_EXP 23
3376: PPUSH
3377: CALL_OW 250
3381: PPUSH
3382: LD_EXP 23
3386: PPUSH
3387: CALL_OW 251
3391: PPUSH
3392: CALL_OW 171
// end ; end_of_file
3396: LD_VAR 0 1
3400: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3401: LD_INT 0
3403: PPUSH
3404: PPUSH
3405: PPUSH
3406: PPUSH
3407: PPUSH
3408: PPUSH
// uc_side := 2 ;
3409: LD_ADDR_OWVAR 20
3413: PUSH
3414: LD_INT 2
3416: ST_TO_ADDR
// uc_nation := nation_arabian ;
3417: LD_ADDR_OWVAR 21
3421: PUSH
3422: LD_INT 2
3424: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3425: LD_ADDR_VAR 0 6
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: LD_INT 5
3435: PUSH
3436: LD_INT 6
3438: PUSH
3439: LD_INT 7
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: PUSH
3448: LD_OWVAR 67
3452: ARRAY
3453: ST_TO_ADDR
// arForces := [ ] ;
3454: LD_ADDR_EXP 49
3458: PUSH
3459: EMPTY
3460: ST_TO_ADDR
// arTech := [ ] ;
3461: LD_ADDR_EXP 52
3465: PUSH
3466: EMPTY
3467: ST_TO_ADDR
// arBuildings := [ ] ;
3468: LD_ADDR_EXP 53
3472: PUSH
3473: EMPTY
3474: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3475: LD_ADDR_EXP 55
3479: PUSH
3480: LD_INT 94
3482: PUSH
3483: LD_INT 19
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 92
3492: PUSH
3493: LD_INT 34
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 109
3502: PUSH
3503: LD_INT 67
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 120
3512: PUSH
3513: LD_INT 38
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: LD_INT 116
3522: PUSH
3523: LD_INT 30
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 102
3532: PUSH
3533: LD_INT 20
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3548: LD_ADDR_EXP 54
3552: PUSH
3553: LD_INT 73
3555: PUSH
3556: LD_INT 36
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 76
3565: PUSH
3566: LD_INT 38
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 79
3575: PUSH
3576: LD_INT 39
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: LIST
3587: ST_TO_ADDR
// arEscapist := [ ] ;
3588: LD_ADDR_EXP 56
3592: PUSH
3593: EMPTY
3594: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3595: LD_INT 35
3597: PPUSH
3598: CALL_OW 274
3602: PPUSH
3603: LD_INT 1
3605: PPUSH
3606: LD_INT 150
3608: PPUSH
3609: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3613: LD_INT 35
3615: PPUSH
3616: CALL_OW 274
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: LD_INT 60
3626: PPUSH
3627: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3631: LD_INT 35
3633: PPUSH
3634: CALL_OW 274
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: LD_INT 10
3644: PPUSH
3645: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3649: LD_INT 36
3651: PPUSH
3652: LD_INT 22
3654: PPUSH
3655: LD_INT 2
3657: PPUSH
3658: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3662: LD_ADDR_VAR 0 2
3666: PUSH
3667: LD_INT 22
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 21
3679: PUSH
3680: LD_INT 3
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PPUSH
3691: CALL_OW 69
3695: PUSH
3696: FOR_IN
3697: IFFALSE 3713
// SetBLevel ( i , 6 ) ;
3699: LD_VAR 0 2
3703: PPUSH
3704: LD_INT 6
3706: PPUSH
3707: CALL_OW 241
3711: GO 3696
3713: POP
3714: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3715: LD_ADDR_EXP 50
3719: PUSH
3720: LD_STRING Dietrich
3722: PPUSH
3723: CALL_OW 25
3727: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3728: LD_EXP 50
3732: PPUSH
3733: LD_INT 35
3735: PPUSH
3736: CALL_OW 52
// InitHC_All ( ) ;
3740: CALL_OW 584
// for i := 1 to 3 do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_INT 3
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3864
// begin PrepareEngineer ( sex_male , skill ) ;
3760: LD_INT 1
3762: PPUSH
3763: LD_VAR 0 6
3767: PPUSH
3768: CALL_OW 382
// if i = 1 then
3772: LD_VAR 0 2
3776: PUSH
3777: LD_INT 1
3779: EQUAL
3780: IFFALSE 3792
// hc_name := Ahmed Abbasid else
3782: LD_ADDR_OWVAR 26
3786: PUSH
3787: LD_STRING Ahmed Abbasid
3789: ST_TO_ADDR
3790: GO 3800
// hc_name :=  ;
3792: LD_ADDR_OWVAR 26
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// un := CreateHuman ;
3800: LD_ADDR_VAR 0 4
3804: PUSH
3805: CALL_OW 44
3809: ST_TO_ADDR
// if i = 1 then
3810: LD_VAR 0 2
3814: PUSH
3815: LD_INT 1
3817: EQUAL
3818: IFFALSE 3830
// Ahmed := un ;
3820: LD_ADDR_EXP 51
3824: PUSH
3825: LD_VAR 0 4
3829: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3830: LD_ADDR_EXP 49
3834: PUSH
3835: LD_EXP 49
3839: PPUSH
3840: LD_VAR 0 4
3844: PPUSH
3845: CALL 92287 0 2
3849: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: LD_INT 35
3857: PPUSH
3858: CALL_OW 52
// end ;
3862: GO 3757
3864: POP
3865: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3866: LD_ADDR_VAR 0 2
3870: PUSH
3871: DOUBLE
3872: LD_INT 1
3874: DEC
3875: ST_TO_ADDR
3876: LD_INT 2
3878: PUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 4
3884: PUSH
3885: LD_INT 5
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: LD_OWVAR 67
3898: ARRAY
3899: PUSH
3900: FOR_TO
3901: IFFALSE 3976
// begin PrepareScientist ( false , skill ) ;
3903: LD_INT 0
3905: PPUSH
3906: LD_VAR 0 6
3910: PPUSH
3911: CALL_OW 384
// un := CreateHuman ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 44
3924: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3925: LD_VAR 0 4
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_VAR 0 6
3937: PPUSH
3938: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3942: LD_ADDR_EXP 49
3946: PUSH
3947: LD_EXP 49
3951: PPUSH
3952: LD_VAR 0 4
3956: PPUSH
3957: CALL 92287 0 2
3961: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 36
3969: PPUSH
3970: CALL_OW 52
// end ;
3974: GO 3900
3976: POP
3977: POP
// for j in [ arBar1 , arBar2 ] do
3978: LD_ADDR_VAR 0 3
3982: PUSH
3983: LD_INT 37
3985: PUSH
3986: LD_INT 38
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4074
// for i := 1 to 4 do
3996: LD_ADDR_VAR 0 2
4000: PUSH
4001: DOUBLE
4002: LD_INT 1
4004: DEC
4005: ST_TO_ADDR
4006: LD_INT 4
4008: PUSH
4009: FOR_TO
4010: IFFALSE 4070
// begin PrepareSoldier ( false , skill ) ;
4012: LD_INT 0
4014: PPUSH
4015: LD_VAR 0 6
4019: PPUSH
4020: CALL_OW 381
// un := CreateHuman ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: CALL_OW 44
4033: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
4034: LD_ADDR_EXP 49
4038: PUSH
4039: LD_EXP 49
4043: PPUSH
4044: LD_VAR 0 4
4048: PPUSH
4049: CALL 92287 0 2
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4054: LD_VAR 0 4
4058: PPUSH
4059: LD_VAR 0 3
4063: PPUSH
4064: CALL_OW 52
// end ;
4068: GO 4009
4070: POP
4071: POP
4072: GO 3993
4074: POP
4075: POP
// for i := 1 to 3 do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 3
4088: PUSH
4089: FOR_TO
4090: IFFALSE 4169
// begin un := arForces [ arForces - i ] ;
4092: LD_ADDR_VAR 0 4
4096: PUSH
4097: LD_EXP 49
4101: PUSH
4102: LD_EXP 49
4106: PUSH
4107: LD_VAR 0 2
4111: MINUS
4112: ARRAY
4113: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4114: LD_VAR 0 4
4118: PPUSH
4119: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4123: LD_VAR 0 4
4127: PPUSH
4128: LD_INT 22
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 30
4140: PUSH
4141: LD_INT 31
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 69
4156: PUSH
4157: LD_VAR 0 2
4161: ARRAY
4162: PPUSH
4163: CALL_OW 180
// end ;
4167: GO 4089
4169: POP
4170: POP
// for i := 1 to 3 do
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: LD_INT 3
4183: PUSH
4184: FOR_TO
4185: IFFALSE 4270
// begin tmp := UnitFilter ( arForces , [ [ f_class , class_soldier ] , [ f_not , [ f_tag , tMine ] ] ] ) ;
4187: LD_ADDR_VAR 0 5
4191: PUSH
4192: LD_EXP 49
4196: PPUSH
4197: LD_INT 25
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 3
4209: PUSH
4210: LD_INT 120
4212: PUSH
4213: LD_INT 6
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 72
4232: ST_TO_ADDR
// if not tmp then
4233: LD_VAR 0 5
4237: NOT
4238: IFFALSE 4242
// continue ;
4240: GO 4184
// un := tmp [ 1 ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_VAR 0 5
4251: PUSH
4252: LD_INT 1
4254: ARRAY
4255: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4256: LD_VAR 0 4
4260: PPUSH
4261: LD_INT 6
4263: PPUSH
4264: CALL_OW 109
// end ;
4268: GO 4184
4270: POP
4271: POP
// for i in UnitsInside ( arBar2 ) do
4272: LD_ADDR_VAR 0 2
4276: PUSH
4277: LD_INT 38
4279: PPUSH
4280: CALL_OW 313
4284: PUSH
4285: FOR_IN
4286: IFFALSE 4302
// SetClass ( i , class_mortar ) ;
4288: LD_VAR 0 2
4292: PPUSH
4293: LD_INT 8
4295: PPUSH
4296: CALL_OW 336
4300: GO 4285
4302: POP
4303: POP
// end ;
4304: LD_VAR 0 1
4308: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4309: LD_EXP 7
4313: IFFALSE 4726
4315: GO 4317
4317: DISABLE
4318: LD_INT 0
4320: PPUSH
4321: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4322: LD_INT 36
4324: PPUSH
4325: LD_INT 11
4327: PPUSH
4328: CALL_OW 147
// wait ( 0 0$10 ) ;
4332: LD_INT 350
4334: PPUSH
4335: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4339: LD_ADDR_EXP 53
4343: PUSH
4344: LD_INT 27
4346: PUSH
4347: LD_INT 69
4349: PUSH
4350: LD_INT 4
4352: PUSH
4353: LD_INT 2
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 27
4364: PUSH
4365: LD_INT 67
4367: PUSH
4368: LD_INT 6
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4384: LD_INT 35
4386: PPUSH
4387: CALL_OW 67
// until not arBuildings ;
4391: LD_EXP 53
4395: NOT
4396: IFFALSE 4384
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4398: LD_ADDR_VAR 0 2
4402: PUSH
4403: LD_EXP 49
4407: PPUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 72
4422: ST_TO_ADDR
// if eng then
4423: LD_VAR 0 2
4427: IFFALSE 4564
// begin eng := eng [ 1 ] ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_VAR 0 2
4438: PUSH
4439: LD_INT 1
4441: ARRAY
4442: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4443: LD_VAR 0 2
4447: PPUSH
4448: LD_INT 4
4450: PPUSH
4451: CALL_OW 109
// for i in arCameras do
4455: LD_ADDR_VAR 0 1
4459: PUSH
4460: LD_EXP 55
4464: PUSH
4465: FOR_IN
4466: IFFALSE 4497
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4468: LD_VAR 0 2
4472: PPUSH
4473: LD_VAR 0 1
4477: PUSH
4478: LD_INT 1
4480: ARRAY
4481: PPUSH
4482: LD_VAR 0 1
4486: PUSH
4487: LD_INT 2
4489: ARRAY
4490: PPUSH
4491: CALL_OW 217
4495: GO 4465
4497: POP
4498: POP
// repeat wait ( 0 0$1 ) ;
4499: LD_INT 35
4501: PPUSH
4502: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4506: LD_VAR 0 2
4510: PPUSH
4511: CALL_OW 314
4515: NOT
4516: PUSH
4517: LD_VAR 0 2
4521: PPUSH
4522: CALL_OW 301
4526: OR
4527: IFFALSE 4499
// if IsOk ( eng ) then
4529: LD_VAR 0 2
4533: PPUSH
4534: CALL_OW 302
4538: IFFALSE 4564
// begin SetTag ( eng , 0 ) ;
4540: LD_VAR 0 2
4544: PPUSH
4545: LD_INT 0
4547: PPUSH
4548: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4552: LD_VAR 0 2
4556: PPUSH
4557: LD_INT 35
4559: PPUSH
4560: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4564: LD_INT 35
4566: PPUSH
4567: CALL_OW 67
// if tick mod 4200 = 0 and GetListOfCratesInArea ( arCratesArea ) < 3 then
4571: LD_OWVAR 1
4575: PUSH
4576: LD_INT 4200
4578: MOD
4579: PUSH
4580: LD_INT 0
4582: EQUAL
4583: PUSH
4584: LD_INT 9
4586: PPUSH
4587: CALL_OW 435
4591: PUSH
4592: LD_INT 3
4594: LESS
4595: AND
4596: IFFALSE 4619
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4598: LD_INT 1
4600: PPUSH
4601: LD_INT 5
4603: PPUSH
4604: CALL_OW 12
4608: PPUSH
4609: LD_INT 9
4611: PPUSH
4612: LD_INT 1
4614: PPUSH
4615: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) ;
4619: LD_INT 22
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 57
4634: PUSH
4635: EMPTY
4636: LIST
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 63
4644: PUSH
4645: LD_INT 11
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: IFFALSE 4564
// wait ( 0 0$10 ) ;
4663: LD_INT 350
4665: PPUSH
4666: CALL_OW 67
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4670: LD_ADDR_EXP 52
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 22
4680: PUSH
4681: LD_INT 54
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4689: LD_INT 35
4691: PPUSH
4692: CALL_OW 67
// until not arTech ;
4696: LD_EXP 52
4700: NOT
4701: IFFALSE 4689
// wait ( 0 0$30 ) ;
4703: LD_INT 1050
4705: PPUSH
4706: CALL_OW 67
// arabianAttack := true ;
4710: LD_ADDR_EXP 4
4714: PUSH
4715: LD_INT 1
4717: ST_TO_ADDR
// arBaseActive := false ;
4718: LD_ADDR_EXP 3
4722: PUSH
4723: LD_INT 0
4725: ST_TO_ADDR
// end ;
4726: PPOPN 2
4728: END
// every 3 trigger arBaseActive and arMines and FilterUnitsInArea ( arMinesArea , [ f_enemy , 2 ] ) do var i , e ;
4729: LD_EXP 3
4733: PUSH
4734: LD_EXP 54
4738: AND
4739: PUSH
4740: LD_INT 8
4742: PPUSH
4743: LD_INT 81
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 70
4757: AND
4758: IFFALSE 4869
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
4766: PPUSH
// begin enable ;
4767: ENABLE
// for i in arMines do
4768: LD_ADDR_VAR 0 1
4772: PUSH
4773: LD_EXP 54
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4867
// begin e := HexInfo ( i [ 1 ] , i [ 2 ] ) ;
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: LD_VAR 0 1
4790: PUSH
4791: LD_INT 1
4793: ARRAY
4794: PPUSH
4795: LD_VAR 0 1
4799: PUSH
4800: LD_INT 2
4802: ARRAY
4803: PPUSH
4804: CALL_OW 428
4808: ST_TO_ADDR
// if not e then
4809: LD_VAR 0 2
4813: NOT
4814: IFFALSE 4818
// continue ;
4816: GO 4778
// if GetSide ( e ) in [ 3 , 6 ] then
4818: LD_VAR 0 2
4822: PPUSH
4823: CALL_OW 255
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: LD_INT 6
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: IN
4838: IFFALSE 4865
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 2 ) ;
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 1
4847: ARRAY
4848: PPUSH
4849: LD_VAR 0 1
4853: PUSH
4854: LD_INT 2
4856: ARRAY
4857: PPUSH
4858: LD_INT 2
4860: PPUSH
4861: CALL_OW 456
// end ;
4865: GO 4778
4867: POP
4868: POP
// end ;
4869: PPOPN 2
4871: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4872: LD_EXP 3
4876: IFFALSE 7064
4878: GO 4880
4880: DISABLE
4881: LD_INT 0
4883: PPUSH
4884: PPUSH
4885: PPUSH
4886: PPUSH
4887: PPUSH
4888: PPUSH
4889: PPUSH
4890: PPUSH
4891: PPUSH
4892: PPUSH
4893: PPUSH
4894: PPUSH
4895: PPUSH
4896: PPUSH
4897: PPUSH
4898: PPUSH
// begin enable ;
4899: ENABLE
// side := 2 ;
4900: LD_ADDR_VAR 0 4
4904: PUSH
4905: LD_INT 2
4907: ST_TO_ADDR
// if arTech then
4908: LD_EXP 52
4912: IFFALSE 5068
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_INT 22
4921: PUSH
4922: LD_VAR 0 4
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 50
4933: PUSH
4934: EMPTY
4935: LIST
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: LD_INT 30
4942: PUSH
4943: LD_INT 6
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 30
4952: PUSH
4953: LD_INT 7
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: LD_INT 30
4962: PUSH
4963: LD_INT 8
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 69
4985: ST_TO_ADDR
// if lab then
4986: LD_VAR 0 6
4990: IFFALSE 5068
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
4992: LD_VAR 0 6
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: CALL_OW 461
5005: PUSH
5006: LD_INT 2
5008: EQUAL
5009: IFFALSE 5068
// begin for i in arTech do
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_EXP 52
5020: PUSH
5021: FOR_IN
5022: IFFALSE 5066
// if CanBeResearched ( lab [ 1 ] , i ) then
5024: LD_VAR 0 6
5028: PUSH
5029: LD_INT 1
5031: ARRAY
5032: PPUSH
5033: LD_VAR 0 1
5037: PPUSH
5038: CALL_OW 430
5042: IFFALSE 5064
// begin ComResearch ( lab [ 1 ] , i ) ;
5044: LD_VAR 0 6
5048: PUSH
5049: LD_INT 1
5051: ARRAY
5052: PPUSH
5053: LD_VAR 0 1
5057: PPUSH
5058: CALL_OW 124
// break ;
5062: GO 5066
// end ;
5064: GO 5021
5066: POP
5067: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5068: LD_ADDR_VAR 0 5
5072: PUSH
5073: LD_INT 5
5075: PPUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 24
5091: PUSH
5092: LD_INT 1000
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: CALL_OW 70
5111: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
5112: LD_ADDR_VAR 0 9
5116: PUSH
5117: LD_INT 9
5119: PPUSH
5120: CALL_OW 435
5124: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5125: LD_ADDR_VAR 0 11
5129: PUSH
5130: LD_EXP 49
5134: PPUSH
5135: LD_INT 25
5137: PUSH
5138: LD_INT 4
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PUSH
5145: LD_INT 50
5147: PUSH
5148: EMPTY
5149: LIST
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PPUSH
5155: CALL_OW 72
5159: ST_TO_ADDR
// if sci then
5160: LD_VAR 0 11
5164: IFFALSE 5528
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_not , [ f_inside ] ] , [ f_tag , tHeal ] ] ) ;
5166: LD_ADDR_VAR 0 13
5170: PUSH
5171: LD_EXP 49
5175: PPUSH
5176: LD_INT 95
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 3
5188: PUSH
5189: LD_INT 54
5191: PUSH
5192: EMPTY
5193: LIST
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 120
5201: PUSH
5202: LD_INT 1
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_INT 22
5226: PUSH
5227: LD_VAR 0 4
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 50
5238: PUSH
5239: EMPTY
5240: LIST
5241: PUSH
5242: LD_INT 2
5244: PUSH
5245: LD_INT 30
5247: PUSH
5248: LD_INT 6
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 30
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 30
5267: PUSH
5268: LD_INT 8
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: LIST
5285: PPUSH
5286: CALL_OW 69
5290: ST_TO_ADDR
// tag := GetTag ( i ) ;
5291: LD_ADDR_VAR 0 8
5295: PUSH
5296: LD_VAR 0 1
5300: PPUSH
5301: CALL_OW 110
5305: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
5306: LD_VAR 0 1
5310: PPUSH
5311: CALL_OW 256
5315: PUSH
5316: LD_INT 800
5318: LESS
5319: PUSH
5320: LD_VAR 0 8
5324: PUSH
5325: LD_INT 1
5327: NONEQUAL
5328: AND
5329: IFFALSE 5358
// begin ComMoveXY ( i , 72 , 15 ) ;
5331: LD_VAR 0 1
5335: PPUSH
5336: LD_INT 72
5338: PPUSH
5339: LD_INT 15
5341: PPUSH
5342: CALL_OW 111
// SetTag ( i , tHeal ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: CALL_OW 109
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5358: LD_VAR 0 1
5362: PPUSH
5363: CALL_OW 256
5367: PUSH
5368: LD_INT 1000
5370: EQUAL
5371: PUSH
5372: LD_VAR 0 8
5376: PUSH
5377: LD_INT 1
5379: EQUAL
5380: AND
5381: IFFALSE 5395
// begin SetTag ( i , 0 ) ;
5383: LD_VAR 0 1
5387: PPUSH
5388: LD_INT 0
5390: PPUSH
5391: CALL_OW 109
// end ; if hurtUnits then
5395: LD_VAR 0 13
5399: IFFALSE 5460
// begin for i in sci do
5401: LD_ADDR_VAR 0 1
5405: PUSH
5406: LD_VAR 0 11
5410: PUSH
5411: FOR_IN
5412: IFFALSE 5456
// if IsInUnit ( i ) then
5414: LD_VAR 0 1
5418: PPUSH
5419: CALL_OW 310
5423: IFFALSE 5436
// ComExitBuilding ( i ) else
5425: LD_VAR 0 1
5429: PPUSH
5430: CALL_OW 122
5434: GO 5454
// ComHeal ( i , hurtUnits [ 1 ] ) ;
5436: LD_VAR 0 1
5440: PPUSH
5441: LD_VAR 0 13
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: CALL_OW 128
5454: GO 5411
5456: POP
5457: POP
// end else
5458: GO 5528
// if lab then
5460: LD_VAR 0 6
5464: IFFALSE 5528
// begin for i in sci do
5466: LD_ADDR_VAR 0 1
5470: PUSH
5471: LD_VAR 0 11
5475: PUSH
5476: FOR_IN
5477: IFFALSE 5526
// if not IsInUnit ( i ) and GetTag ( i ) <> tHeal then
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 310
5488: NOT
5489: PUSH
5490: LD_VAR 0 1
5494: PPUSH
5495: CALL_OW 110
5499: PUSH
5500: LD_INT 1
5502: NONEQUAL
5503: AND
5504: IFFALSE 5524
// ComEnterUnit ( i , lab [ 1 ] ) ;
5506: LD_VAR 0 1
5510: PPUSH
5511: LD_VAR 0 6
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PPUSH
5520: CALL_OW 120
5524: GO 5476
5526: POP
5527: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5528: LD_ADDR_VAR 0 7
5532: PUSH
5533: LD_EXP 49
5537: PPUSH
5538: LD_INT 25
5540: PUSH
5541: LD_INT 2
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 72
5552: ST_TO_ADDR
// if eng then
5553: LD_VAR 0 7
5557: IFFALSE 6226
// begin for i in eng do
5559: LD_ADDR_VAR 0 1
5563: PUSH
5564: LD_VAR 0 7
5568: PUSH
5569: FOR_IN
5570: IFFALSE 6224
// begin tag := GetTag ( i ) ;
5572: LD_ADDR_VAR 0 8
5576: PUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 110
5586: ST_TO_ADDR
// if tag = tCamera then
5587: LD_VAR 0 8
5591: PUSH
5592: LD_INT 4
5594: EQUAL
5595: IFFALSE 5599
// continue ;
5597: GO 5569
// if GetLives ( i ) < 600 and tag <> tHeal then
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 256
5608: PUSH
5609: LD_INT 600
5611: LESS
5612: PUSH
5613: LD_VAR 0 8
5617: PUSH
5618: LD_INT 1
5620: NONEQUAL
5621: AND
5622: IFFALSE 5660
// begin SetTag ( i , tHeal ) ;
5624: LD_VAR 0 1
5628: PPUSH
5629: LD_INT 1
5631: PPUSH
5632: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5636: LD_VAR 0 1
5640: PPUSH
5641: LD_INT 72
5643: PPUSH
5644: LD_INT 15
5646: PPUSH
5647: CALL_OW 111
// AddComHold ( i ) ;
5651: LD_VAR 0 1
5655: PPUSH
5656: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5660: LD_VAR 0 8
5664: PUSH
5665: LD_INT 1
5667: EQUAL
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 256
5678: PUSH
5679: LD_INT 1000
5681: EQUAL
5682: AND
5683: IFFALSE 5697
// SetTag ( i , 0 ) ;
5685: LD_VAR 0 1
5689: PPUSH
5690: LD_INT 0
5692: PPUSH
5693: CALL_OW 109
// if not tag then
5697: LD_VAR 0 8
5701: NOT
5702: IFFALSE 5848
// begin if cr or tmp or Count ( arBuildings ) then
5704: LD_VAR 0 9
5708: PUSH
5709: LD_VAR 0 5
5713: OR
5714: PUSH
5715: LD_EXP 53
5719: PPUSH
5720: CALL 56698 0 1
5724: OR
5725: IFFALSE 5812
// begin if IsInUnit ( i ) then
5727: LD_VAR 0 1
5731: PPUSH
5732: CALL_OW 310
5736: IFFALSE 5747
// ComExitBuilding ( i ) ;
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 122
// if tmp then
5747: LD_VAR 0 5
5751: IFFALSE 5767
// SetTag ( i , tRepair ) else
5753: LD_VAR 0 1
5757: PPUSH
5758: LD_INT 3
5760: PPUSH
5761: CALL_OW 109
5765: GO 5810
// if cr then
5767: LD_VAR 0 9
5771: IFFALSE 5787
// SetTag ( i , tCrates ) else
5773: LD_VAR 0 1
5777: PPUSH
5778: LD_INT 2
5780: PPUSH
5781: CALL_OW 109
5785: GO 5810
// if Count ( arBuildings ) then
5787: LD_EXP 53
5791: PPUSH
5792: CALL 56698 0 1
5796: IFFALSE 5810
// SetTag ( i , tBuild ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_INT 5
5805: PPUSH
5806: CALL_OW 109
// end else
5810: GO 5848
// if not IsInUnit ( i ) then
5812: LD_VAR 0 1
5816: PPUSH
5817: CALL_OW 310
5821: NOT
5822: IFFALSE 5848
// begin SetTag ( i , 0 ) ;
5824: LD_VAR 0 1
5828: PPUSH
5829: LD_INT 0
5831: PPUSH
5832: CALL_OW 109
// ComEnterUnit ( i , arDep ) ;
5836: LD_VAR 0 1
5840: PPUSH
5841: LD_INT 35
5843: PPUSH
5844: CALL_OW 120
// end ; end ; if tag = tRepair then
5848: LD_VAR 0 8
5852: PUSH
5853: LD_INT 3
5855: EQUAL
5856: IFFALSE 5958
// begin if IsInUnit ( i ) then
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 310
5867: IFFALSE 5880
// begin ComExitBuilding ( i ) ;
5869: LD_VAR 0 1
5873: PPUSH
5874: CALL_OW 122
// continue ;
5878: GO 5569
// end ; if not tmp then
5880: LD_VAR 0 5
5884: NOT
5885: IFFALSE 5901
// begin SetTag ( i , 0 ) ;
5887: LD_VAR 0 1
5891: PPUSH
5892: LD_INT 0
5894: PPUSH
5895: CALL_OW 109
// continue ;
5899: GO 5569
// end ; if not HasTask ( i ) then
5901: LD_VAR 0 1
5905: PPUSH
5906: CALL_OW 314
5910: NOT
5911: IFFALSE 5931
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5913: LD_VAR 0 1
5917: PPUSH
5918: LD_VAR 0 5
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 5
5938: PPUSH
5939: CALL_OW 308
5943: NOT
5944: IFFALSE 5958
// ComMoveToArea ( i , arBaseArea ) ;
5946: LD_VAR 0 1
5950: PPUSH
5951: LD_INT 5
5953: PPUSH
5954: CALL_OW 113
// end ; if tag = tBuild then
5958: LD_VAR 0 8
5962: PUSH
5963: LD_INT 5
5965: EQUAL
5966: IFFALSE 6077
// begin if IsInUnit ( i ) then
5968: LD_VAR 0 1
5972: PPUSH
5973: CALL_OW 310
5977: IFFALSE 5990
// begin ComExitBuilding ( i ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: CALL_OW 122
// continue ;
5988: GO 5569
// end ; if not Count ( arBuildings ) then
5990: LD_EXP 53
5994: PPUSH
5995: CALL 56698 0 1
5999: NOT
6000: IFFALSE 6016
// begin SetTag ( i , 0 ) ;
6002: LD_VAR 0 1
6006: PPUSH
6007: LD_INT 0
6009: PPUSH
6010: CALL_OW 109
// continue ;
6014: GO 5569
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_EXP 53
6025: PUSH
6026: LD_INT 1
6028: ARRAY
6029: PUSH
6030: LD_INT 1
6032: ARRAY
6033: PPUSH
6034: LD_EXP 53
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PUSH
6043: LD_INT 2
6045: ARRAY
6046: PPUSH
6047: LD_EXP 53
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PUSH
6056: LD_INT 3
6058: ARRAY
6059: PPUSH
6060: LD_EXP 53
6064: PUSH
6065: LD_INT 1
6067: ARRAY
6068: PUSH
6069: LD_INT 4
6071: ARRAY
6072: PPUSH
6073: CALL_OW 145
// end ; if tag = tCrates then
6077: LD_VAR 0 8
6081: PUSH
6082: LD_INT 2
6084: EQUAL
6085: IFFALSE 6222
// begin if IsInUnit ( i ) then
6087: LD_VAR 0 1
6091: PPUSH
6092: CALL_OW 310
6096: IFFALSE 6109
// begin ComExitBuilding ( i ) ;
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 122
// continue ;
6107: GO 5569
// end ; if not cr then
6109: LD_VAR 0 9
6113: NOT
6114: IFFALSE 6130
// begin SetTag ( i , 0 ) ;
6116: LD_VAR 0 1
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 109
// continue ;
6128: GO 5569
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 314
6139: NOT
6140: PUSH
6141: LD_INT 81
6143: PUSH
6144: LD_VAR 0 4
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 92
6155: PUSH
6156: LD_VAR 0 9
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PUSH
6165: LD_VAR 0 9
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PUSH
6174: LD_INT 12
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PPUSH
6187: CALL_OW 69
6191: NOT
6192: AND
6193: IFFALSE 6222
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6195: LD_VAR 0 1
6199: PPUSH
6200: LD_VAR 0 9
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: PPUSH
6209: LD_VAR 0 9
6213: PUSH
6214: LD_INT 2
6216: ARRAY
6217: PPUSH
6218: CALL_OW 117
// end ; end ;
6222: GO 5569
6224: POP
6225: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6226: LD_ADDR_VAR 0 12
6230: PUSH
6231: LD_EXP 49
6235: PPUSH
6236: LD_INT 25
6238: PUSH
6239: LD_INT 1
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 50
6248: PUSH
6249: EMPTY
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 72
6260: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
6261: LD_ADDR_VAR 0 14
6265: PUSH
6266: LD_INT 5
6268: PPUSH
6269: LD_INT 81
6271: PUSH
6272: LD_VAR 0 4
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PPUSH
6281: CALL_OW 70
6285: ST_TO_ADDR
// if sol then
6286: LD_VAR 0 12
6290: IFFALSE 7064
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
6292: LD_ADDR_VAR 0 5
6296: PUSH
6297: LD_VAR 0 12
6301: PPUSH
6302: LD_INT 50
6304: PUSH
6305: EMPTY
6306: LIST
6307: PUSH
6308: LD_INT 120
6310: PUSH
6311: LD_INT 6
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PPUSH
6322: CALL_OW 72
6326: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
6327: LD_VAR 0 5
6331: PUSH
6332: LD_INT 81
6334: PUSH
6335: LD_VAR 0 4
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 92
6346: PUSH
6347: LD_INT 76
6349: PUSH
6350: LD_INT 38
6352: PUSH
6353: LD_INT 12
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PPUSH
6366: CALL_OW 69
6370: NOT
6371: AND
6372: IFFALSE 6542
// for i := 1 to Count ( tmp ) do
6374: LD_ADDR_VAR 0 1
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_VAR 0 5
6388: PPUSH
6389: CALL 56698 0 1
6393: PUSH
6394: FOR_TO
6395: IFFALSE 6540
// begin un := tmp [ i ] ;
6397: LD_ADDR_VAR 0 2
6401: PUSH
6402: LD_VAR 0 5
6406: PUSH
6407: LD_VAR 0 1
6411: ARRAY
6412: ST_TO_ADDR
// b := IsInUnit ( un ) ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: LD_VAR 0 2
6422: PPUSH
6423: CALL_OW 310
6427: ST_TO_ADDR
// if not MineOfUnit ( un ) then
6428: LD_VAR 0 2
6432: PPUSH
6433: CALL_OW 459
6437: NOT
6438: IFFALSE 6507
// begin ComExitBuilding ( un ) ;
6440: LD_VAR 0 2
6444: PPUSH
6445: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
6449: LD_VAR 0 2
6453: PPUSH
6454: LD_EXP 54
6458: PUSH
6459: LD_VAR 0 1
6463: ARRAY
6464: PUSH
6465: LD_INT 1
6467: ARRAY
6468: PPUSH
6469: LD_EXP 54
6473: PUSH
6474: LD_VAR 0 1
6478: ARRAY
6479: PUSH
6480: LD_INT 2
6482: ARRAY
6483: PPUSH
6484: LD_INT 0
6486: PPUSH
6487: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
6491: LD_VAR 0 2
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: CALL_OW 180
// end else
6505: GO 6538
// if not b and not HasTask ( un ) then
6507: LD_VAR 0 3
6511: NOT
6512: PUSH
6513: LD_VAR 0 2
6517: PPUSH
6518: CALL_OW 314
6522: NOT
6523: AND
6524: IFFALSE 6538
// ComEnterUnit ( un , arBar1 ) ;
6526: LD_VAR 0 2
6530: PPUSH
6531: LD_INT 37
6533: PPUSH
6534: CALL_OW 120
// end ;
6538: GO 6394
6540: POP
6541: POP
// if enemyInBase then
6542: LD_VAR 0 14
6546: IFFALSE 6691
// begin for i in sol do
6548: LD_ADDR_VAR 0 1
6552: PUSH
6553: LD_VAR 0 12
6557: PUSH
6558: FOR_IN
6559: IFFALSE 6687
// begin tw := IsInUnit ( i ) ;
6561: LD_ADDR_VAR 0 10
6565: PUSH
6566: LD_VAR 0 1
6570: PPUSH
6571: CALL_OW 310
6575: ST_TO_ADDR
// if tw then
6576: LD_VAR 0 10
6580: IFFALSE 6661
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6582: LD_VAR 0 10
6586: PUSH
6587: LD_INT 22
6589: PUSH
6590: LD_VAR 0 4
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 101
6601: PUSH
6602: LD_INT 2
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 2
6611: PUSH
6612: LD_INT 30
6614: PUSH
6615: LD_INT 32
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 30
6624: PUSH
6625: LD_INT 31
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: IN
6647: NOT
6648: IFFALSE 6659
// ComExitBuilding ( i ) ;
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 122
// end else
6659: GO 6685
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6661: LD_VAR 0 1
6665: PPUSH
6666: LD_VAR 0 14
6670: PPUSH
6671: LD_VAR 0 1
6675: PPUSH
6676: CALL_OW 74
6680: PPUSH
6681: CALL_OW 115
// end ;
6685: GO 6558
6687: POP
6688: POP
// end else
6689: GO 7064
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
6691: LD_ADDR_VAR 0 15
6695: PUSH
6696: LD_INT 5
6698: PPUSH
6699: LD_INT 3
6701: PUSH
6702: LD_INT 62
6704: PUSH
6705: EMPTY
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 2
6714: PUSH
6715: LD_INT 30
6717: PUSH
6718: LD_INT 32
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 30
6727: PUSH
6728: LD_INT 4
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 30
6737: PUSH
6738: LD_INT 5
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 30
6747: PUSH
6748: LD_INT 31
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 70
6770: ST_TO_ADDR
// if empty then
6771: LD_VAR 0 15
6775: IFFALSE 6792
// empty := ReverseArray ( empty ) ;
6777: LD_ADDR_VAR 0 15
6781: PUSH
6782: LD_VAR 0 15
6786: PPUSH
6787: CALL 87574 0 1
6791: ST_TO_ADDR
// for i in sol do
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_VAR 0 12
6801: PUSH
6802: FOR_IN
6803: IFFALSE 7062
// begin tag := GetTag ( i ) ;
6805: LD_ADDR_VAR 0 8
6809: PUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 110
6819: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6820: LD_VAR 0 1
6824: PPUSH
6825: CALL_OW 256
6829: PUSH
6830: LD_INT 1000
6832: LESS
6833: PUSH
6834: LD_VAR 0 8
6838: PUSH
6839: LD_INT 1
6841: NONEQUAL
6842: AND
6843: IFFALSE 6883
// begin SetTag ( i , tHeal ) ;
6845: LD_VAR 0 1
6849: PPUSH
6850: LD_INT 1
6852: PPUSH
6853: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_INT 72
6864: PPUSH
6865: LD_INT 15
6867: PPUSH
6868: CALL_OW 111
// AddComHold ( i ) ;
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 200
// continue ;
6881: GO 6802
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6883: LD_VAR 0 1
6887: PPUSH
6888: CALL_OW 256
6892: PUSH
6893: LD_INT 1000
6895: EQUAL
6896: PUSH
6897: LD_VAR 0 8
6901: PUSH
6902: LD_INT 1
6904: EQUAL
6905: AND
6906: IFFALSE 6987
// begin if MineOfUnit ( i ) or Count ( UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ) < 3 then
6908: LD_VAR 0 1
6912: PPUSH
6913: CALL_OW 459
6917: PUSH
6918: LD_VAR 0 12
6922: PPUSH
6923: LD_INT 50
6925: PUSH
6926: EMPTY
6927: LIST
6928: PUSH
6929: LD_INT 120
6931: PUSH
6932: LD_INT 6
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 72
6947: PPUSH
6948: CALL 56698 0 1
6952: PUSH
6953: LD_INT 3
6955: LESS
6956: OR
6957: IFFALSE 6973
// SetTag ( i , tMine ) else
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 6
6966: PPUSH
6967: CALL_OW 109
6971: GO 6985
// SetTag ( i , 0 ) ;
6973: LD_VAR 0 1
6977: PPUSH
6978: LD_INT 0
6980: PPUSH
6981: CALL_OW 109
// continue ;
6985: GO 6802
// end ; if tag = tMine then
6987: LD_VAR 0 8
6991: PUSH
6992: LD_INT 6
6994: EQUAL
6995: IFFALSE 6999
// continue ;
6997: GO 6802
// if not IsInUnit ( i ) and not tag and empty then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 310
7008: NOT
7009: PUSH
7010: LD_VAR 0 8
7014: NOT
7015: AND
7016: PUSH
7017: LD_VAR 0 15
7021: AND
7022: IFFALSE 7060
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
7024: LD_VAR 0 1
7028: PPUSH
7029: LD_VAR 0 15
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
7042: LD_ADDR_VAR 0 15
7046: PUSH
7047: LD_VAR 0 15
7051: PPUSH
7052: LD_INT 1
7054: PPUSH
7055: CALL_OW 3
7059: ST_TO_ADDR
// end ; end ;
7060: GO 6802
7062: POP
7063: POP
// end ; end ; end ;
7064: PPOPN 16
7066: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
7067: LD_EXP 56
7071: PPUSH
7072: CALL 56698 0 1
7076: IFFALSE 7221
7078: GO 7080
7080: DISABLE
7081: LD_INT 0
7083: PPUSH
// begin enable ;
7084: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_EXP 56
7094: PPUSH
7095: LD_INT 50
7097: PUSH
7098: EMPTY
7099: LIST
7100: PPUSH
7101: CALL_OW 72
7105: PUSH
7106: FOR_IN
7107: IFFALSE 7219
// begin if not HasTask ( i ) then
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 314
7118: NOT
7119: IFFALSE 7133
// AddComMoveToArea ( i , khatamArea ) ;
7121: LD_VAR 0 1
7125: PPUSH
7126: LD_INT 11
7128: PPUSH
7129: CALL_OW 173
// if IsInArea ( i , khatamArea ) then
7133: LD_VAR 0 1
7137: PPUSH
7138: LD_INT 11
7140: PPUSH
7141: CALL_OW 308
7145: IFFALSE 7217
// begin RemoveUnit ( i ) ;
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 64
// arEscapist := arEscapist diff i ;
7156: LD_ADDR_EXP 56
7160: PUSH
7161: LD_EXP 56
7165: PUSH
7166: LD_VAR 0 1
7170: DIFF
7171: ST_TO_ADDR
// arabianEscapedCounter := Inc ( arabianEscapedCounter ) ;
7172: LD_ADDR_EXP 21
7176: PUSH
7177: LD_EXP 21
7181: PPUSH
7182: CALL 93648 0 1
7186: ST_TO_ADDR
// if i = Dietrich then
7187: LD_VAR 0 1
7191: PUSH
7192: LD_EXP 50
7196: EQUAL
7197: IFFALSE 7217
// begin gensherEscaped := true ;
7199: LD_ADDR_EXP 13
7203: PUSH
7204: LD_INT 1
7206: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7207: LD_INT 1
7209: PPUSH
7210: LD_STRING 10_GensherEscape_1
7212: PPUSH
7213: CALL_OW 39
// end ; end ; end ;
7217: GO 7106
7219: POP
7220: POP
// end ;
7221: PPOPN 1
7223: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
7224: LD_INT 0
7226: PPUSH
7227: PPUSH
7228: PPUSH
7229: PPUSH
7230: PPUSH
// uc_side := 5 ;
7231: LD_ADDR_OWVAR 20
7235: PUSH
7236: LD_INT 5
7238: ST_TO_ADDR
// uc_nation := nation_arabian ;
7239: LD_ADDR_OWVAR 21
7243: PUSH
7244: LD_INT 2
7246: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_INT 5
7254: PUSH
7255: LD_INT 6
7257: PUSH
7258: LD_INT 7
7260: PUSH
7261: LD_INT 8
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: PUSH
7270: LD_OWVAR 67
7274: ARRAY
7275: ST_TO_ADDR
// arAttackersInf := [ ] ;
7276: LD_ADDR_EXP 57
7280: PUSH
7281: EMPTY
7282: ST_TO_ADDR
// arAttackersVeh := [ ] ;
7283: LD_ADDR_EXP 58
7287: PUSH
7288: EMPTY
7289: ST_TO_ADDR
// InitHC_All ( ) ;
7290: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7294: LD_ADDR_VAR 0 2
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_INT 3
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 5
7312: PUSH
7313: LD_INT 6
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: LD_OWVAR 67
7326: ARRAY
7327: PUSH
7328: FOR_TO
7329: IFFALSE 7431
// begin PrepareSoldier ( false , skill ) ;
7331: LD_INT 0
7333: PPUSH
7334: LD_VAR 0 3
7338: PPUSH
7339: CALL_OW 381
// un := CreateHuman ;
7343: LD_ADDR_VAR 0 4
7347: PUSH
7348: CALL_OW 44
7352: ST_TO_ADDR
// if i mod 2 = 0 then
7353: LD_VAR 0 2
7357: PUSH
7358: LD_INT 2
7360: MOD
7361: PUSH
7362: LD_INT 0
7364: EQUAL
7365: IFFALSE 7379
// SetClass ( un , class_mortar ) ;
7367: LD_VAR 0 4
7371: PPUSH
7372: LD_INT 8
7374: PPUSH
7375: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
7379: LD_VAR 0 4
7383: PPUSH
7384: LD_INT 19
7386: PPUSH
7387: LD_INT 0
7389: PPUSH
7390: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
7394: LD_ADDR_EXP 57
7398: PUSH
7399: LD_EXP 57
7403: PPUSH
7404: LD_VAR 0 4
7408: PPUSH
7409: CALL 92287 0 2
7413: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
7414: LD_VAR 0 4
7418: PPUSH
7419: LD_INT 104
7421: PPUSH
7422: LD_INT 60
7424: PPUSH
7425: CALL_OW 114
// end ;
7429: GO 7328
7431: POP
7432: POP
// for i := 1 to 3 do
7433: LD_ADDR_VAR 0 2
7437: PUSH
7438: DOUBLE
7439: LD_INT 1
7441: DEC
7442: ST_TO_ADDR
7443: LD_INT 3
7445: PUSH
7446: FOR_TO
7447: IFFALSE 7599
// begin PrepareMechanic ( false , skill ) ;
7449: LD_INT 0
7451: PPUSH
7452: LD_VAR 0 3
7456: PPUSH
7457: CALL_OW 383
// un := CreateHuman ;
7461: LD_ADDR_VAR 0 4
7465: PUSH
7466: CALL_OW 44
7470: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
7471: LD_INT 14
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: LD_INT 27
7482: PUSH
7483: LD_INT 25
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_VAR 0 2
7494: PUSH
7495: LD_INT 2
7497: MOD
7498: PUSH
7499: LD_INT 1
7501: PLUS
7502: ARRAY
7503: PPUSH
7504: LD_INT 80
7506: PPUSH
7507: CALL 59436 0 5
// veh := CreateVehicle ;
7511: LD_ADDR_VAR 0 5
7515: PUSH
7516: CALL_OW 45
7520: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7521: LD_VAR 0 5
7525: PPUSH
7526: LD_INT 4
7528: PPUSH
7529: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7533: LD_VAR 0 5
7537: PPUSH
7538: LD_INT 18
7540: PPUSH
7541: LD_INT 0
7543: PPUSH
7544: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7548: LD_VAR 0 4
7552: PPUSH
7553: LD_VAR 0 5
7557: PPUSH
7558: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
7562: LD_VAR 0 4
7566: PPUSH
7567: LD_INT 129
7569: PPUSH
7570: LD_INT 20
7572: PPUSH
7573: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7577: LD_ADDR_EXP 58
7581: PUSH
7582: LD_EXP 58
7586: PPUSH
7587: LD_VAR 0 5
7591: PPUSH
7592: CALL 92287 0 2
7596: ST_TO_ADDR
// end ;
7597: GO 7446
7599: POP
7600: POP
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: DOUBLE
7614: LD_INT 1
7616: DEC
7617: ST_TO_ADDR
7618: LD_INT 1
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: LD_INT 3
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_OWVAR 67
7640: ARRAY
7641: PUSH
7642: FOR_TO
7643: IFFALSE 7774
// begin PrepareMechanic ( false , skill ) ;
7645: LD_INT 0
7647: PPUSH
7648: LD_VAR 0 3
7652: PPUSH
7653: CALL_OW 383
// un := CreateHuman ;
7657: LD_ADDR_VAR 0 4
7661: PUSH
7662: CALL_OW 44
7666: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7667: LD_INT 14
7669: PPUSH
7670: LD_INT 1
7672: PPUSH
7673: LD_INT 1
7675: PPUSH
7676: LD_INT 26
7678: PPUSH
7679: LD_INT 80
7681: PPUSH
7682: CALL 59436 0 5
// veh := CreateVehicle ;
7686: LD_ADDR_VAR 0 5
7690: PUSH
7691: CALL_OW 45
7695: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7696: LD_VAR 0 5
7700: PPUSH
7701: LD_INT 4
7703: PPUSH
7704: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_INT 18
7715: PPUSH
7716: LD_INT 0
7718: PPUSH
7719: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7723: LD_VAR 0 4
7727: PPUSH
7728: LD_VAR 0 5
7732: PPUSH
7733: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7737: LD_VAR 0 4
7741: PPUSH
7742: LD_INT 133
7744: PPUSH
7745: LD_INT 40
7747: PPUSH
7748: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7752: LD_ADDR_EXP 58
7756: PUSH
7757: LD_EXP 58
7761: PPUSH
7762: LD_VAR 0 5
7766: PPUSH
7767: CALL 92287 0 2
7771: ST_TO_ADDR
// end ;
7772: GO 7642
7774: POP
7775: POP
// wait ( 0 0$2 ) ;
7776: LD_INT 70
7778: PPUSH
7779: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7783: LD_ADDR_VAR 0 2
7787: PUSH
7788: DOUBLE
7789: LD_INT 1
7791: DEC
7792: ST_TO_ADDR
7793: LD_INT 1
7795: PUSH
7796: LD_INT 2
7798: PUSH
7799: LD_INT 3
7801: PUSH
7802: LD_INT 4
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: PUSH
7811: LD_OWVAR 67
7815: ARRAY
7816: PUSH
7817: FOR_TO
7818: IFFALSE 7980
// begin PrepareMechanic ( false , skill ) ;
7820: LD_INT 0
7822: PPUSH
7823: LD_VAR 0 3
7827: PPUSH
7828: CALL_OW 383
// un := CreateHuman ;
7832: LD_ADDR_VAR 0 4
7836: PUSH
7837: CALL_OW 44
7841: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7842: LD_INT 14
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: LD_INT 28
7853: PPUSH
7854: LD_INT 80
7856: PPUSH
7857: CALL 59436 0 5
// veh := CreateVehicle ;
7861: LD_ADDR_VAR 0 5
7865: PUSH
7866: CALL_OW 45
7870: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7871: LD_VAR 0 5
7875: PPUSH
7876: LD_INT 4
7878: PPUSH
7879: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7883: LD_VAR 0 5
7887: PPUSH
7888: LD_INT 18
7890: PPUSH
7891: LD_INT 0
7893: PPUSH
7894: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7898: LD_VAR 0 4
7902: PPUSH
7903: LD_VAR 0 5
7907: PPUSH
7908: CALL_OW 52
// if i mod 2 = 0 then
7912: LD_VAR 0 2
7916: PUSH
7917: LD_INT 2
7919: MOD
7920: PUSH
7921: LD_INT 0
7923: EQUAL
7924: IFFALSE 7943
// ComMoveXY ( un , 136 , 61 ) else
7926: LD_VAR 0 4
7930: PPUSH
7931: LD_INT 136
7933: PPUSH
7934: LD_INT 61
7936: PPUSH
7937: CALL_OW 111
7941: GO 7958
// ComMoveXY ( un , 137 , 41 ) ;
7943: LD_VAR 0 4
7947: PPUSH
7948: LD_INT 137
7950: PPUSH
7951: LD_INT 41
7953: PPUSH
7954: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7958: LD_ADDR_EXP 58
7962: PUSH
7963: LD_EXP 58
7967: PPUSH
7968: LD_VAR 0 5
7972: PPUSH
7973: CALL 92287 0 2
7977: ST_TO_ADDR
// end ;
7978: GO 7817
7980: POP
7981: POP
// arabianAttackSpawned := true ;
7982: LD_ADDR_EXP 12
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// end ;
7990: LD_VAR 0 1
7994: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
7995: LD_EXP 57
7999: IFFALSE 8412
8001: GO 8003
8003: DISABLE
8004: LD_INT 0
8006: PPUSH
8007: PPUSH
8008: PPUSH
// begin wait ( 0 0$10 ) ;
8009: LD_INT 350
8011: PPUSH
8012: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
8016: LD_ADDR_VAR 0 2
8020: PUSH
8021: LD_EXP 57
8025: PPUSH
8026: LD_INT 25
8028: PUSH
8029: LD_INT 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 50
8038: PUSH
8039: EMPTY
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 72
8050: ST_TO_ADDR
// for i in tmp do
8051: LD_ADDR_VAR 0 1
8055: PUSH
8056: LD_VAR 0 2
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8187
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
8064: LD_ADDR_VAR 0 3
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: LD_INT 3
8081: PUSH
8082: LD_INT 120
8084: PUSH
8085: LD_INT 11
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: LD_INT 21
8101: PUSH
8102: LD_INT 2
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 21
8111: PUSH
8112: LD_INT 3
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: PPUSH
8129: CALL_OW 69
8133: PPUSH
8134: LD_VAR 0 1
8138: PPUSH
8139: CALL_OW 74
8143: ST_TO_ADDR
// if not nearest then
8144: LD_VAR 0 3
8148: NOT
8149: IFFALSE 8153
// break ;
8151: GO 8187
// SetTag ( nearest , tMined ) ;
8153: LD_VAR 0 3
8157: PPUSH
8158: LD_INT 11
8160: PPUSH
8161: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
8165: LD_VAR 0 1
8169: PPUSH
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 0
8175: PPUSH
8176: LD_VAR 0 3
8180: PPUSH
8181: CALL_OW 132
// end ;
8185: GO 8061
8187: POP
8188: POP
// if hasBase and epsilon then
8189: LD_EXP 9
8193: PUSH
8194: LD_EXP 10
8198: AND
8199: IFFALSE 8223
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
8201: LD_VAR 0 2
8205: PPUSH
8206: LD_INT 0
8208: PPUSH
8209: LD_INT 0
8211: PPUSH
8212: LD_EXP 10
8216: PPUSH
8217: CALL_OW 192
8221: GO 8238
// AddComMoveXY ( tmp , 107 , 59 ) ;
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_INT 107
8230: PPUSH
8231: LD_INT 59
8233: PPUSH
8234: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8238: LD_INT 35
8240: PPUSH
8241: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
8245: LD_EXP 50
8249: PPUSH
8250: CALL_OW 301
8254: PUSH
8255: LD_EXP 13
8259: OR
8260: IFFALSE 8238
// if not gensherEscaped then
8262: LD_EXP 13
8266: NOT
8267: IFFALSE 8276
// wait ( 1 1$20 ) ;
8269: LD_INT 2800
8271: PPUSH
8272: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
8276: LD_ADDR_VAR 0 2
8280: PUSH
8281: LD_EXP 57
8285: PPUSH
8286: LD_INT 50
8288: PUSH
8289: EMPTY
8290: LIST
8291: PPUSH
8292: CALL_OW 72
8296: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
8297: LD_VAR 0 2
8301: PPUSH
8302: LD_INT 143
8304: PPUSH
8305: LD_INT 117
8307: PPUSH
8308: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// for i in tmp do
8319: LD_ADDR_VAR 0 1
8323: PUSH
8324: LD_VAR 0 2
8328: PUSH
8329: FOR_IN
8330: IFFALSE 8403
// if IsInArea ( i , arAttackSpawn2Area ) then
8332: LD_VAR 0 1
8336: PPUSH
8337: LD_INT 19
8339: PPUSH
8340: CALL_OW 308
8344: IFFALSE 8389
// begin tmp := tmp diff i ;
8346: LD_ADDR_VAR 0 2
8350: PUSH
8351: LD_VAR 0 2
8355: PUSH
8356: LD_VAR 0 1
8360: DIFF
8361: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
8362: LD_ADDR_EXP 57
8366: PUSH
8367: LD_EXP 57
8371: PUSH
8372: LD_VAR 0 1
8376: DIFF
8377: ST_TO_ADDR
// RemoveUnit ( i ) ;
8378: LD_VAR 0 1
8382: PPUSH
8383: CALL_OW 64
// end else
8387: GO 8401
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
8389: LD_VAR 0 1
8393: PPUSH
8394: LD_INT 19
8396: PPUSH
8397: CALL_OW 113
8401: GO 8329
8403: POP
8404: POP
// until not tmp ;
8405: LD_VAR 0 2
8409: NOT
8410: IFFALSE 8312
// end ;
8412: PPOPN 3
8414: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , p ;
8415: LD_EXP 58
8419: IFFALSE 8703
8421: GO 8423
8423: DISABLE
8424: LD_INT 0
8426: PPUSH
8427: PPUSH
8428: PPUSH
// begin p := 0 ;
8429: LD_ADDR_VAR 0 3
8433: PUSH
8434: LD_INT 0
8436: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8437: LD_INT 35
8439: PPUSH
8440: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8444: LD_ADDR_VAR 0 2
8448: PUSH
8449: LD_EXP 58
8453: PPUSH
8454: LD_INT 50
8456: PUSH
8457: EMPTY
8458: LIST
8459: PPUSH
8460: CALL_OW 72
8464: ST_TO_ADDR
// for i in tmp do
8465: LD_ADDR_VAR 0 1
8469: PUSH
8470: LD_VAR 0 2
8474: PUSH
8475: FOR_IN
8476: IFFALSE 8513
// AgressiveMove ( i , [ [ 143 , 38 ] , [ 111 , 31 ] ] ) ;
8478: LD_VAR 0 1
8482: PPUSH
8483: LD_INT 143
8485: PUSH
8486: LD_INT 38
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 111
8495: PUSH
8496: LD_INT 31
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL 94891 0 2
8511: GO 8475
8513: POP
8514: POP
// if IsDead ( Dietrich ) then
8515: LD_EXP 50
8519: PPUSH
8520: CALL_OW 301
8524: IFFALSE 8541
// p := Inc ( p ) ;
8526: LD_ADDR_VAR 0 3
8530: PUSH
8531: LD_VAR 0 3
8535: PPUSH
8536: CALL 93648 0 1
8540: ST_TO_ADDR
// until not tmp or gensherEscaped or p > 40 ;
8541: LD_VAR 0 2
8545: NOT
8546: PUSH
8547: LD_EXP 13
8551: OR
8552: PUSH
8553: LD_VAR 0 3
8557: PUSH
8558: LD_INT 40
8560: GREATER
8561: OR
8562: IFFALSE 8437
// if not arAttackersVeh then
8564: LD_EXP 58
8568: NOT
8569: IFFALSE 8573
// exit ;
8571: GO 8703
// repeat wait ( 0 0$1 ) ;
8573: LD_INT 35
8575: PPUSH
8576: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8580: LD_ADDR_VAR 0 2
8584: PUSH
8585: LD_EXP 58
8589: PPUSH
8590: LD_INT 50
8592: PUSH
8593: EMPTY
8594: LIST
8595: PPUSH
8596: CALL_OW 72
8600: ST_TO_ADDR
// for i in tmp do
8601: LD_ADDR_VAR 0 1
8605: PUSH
8606: LD_VAR 0 2
8610: PUSH
8611: FOR_IN
8612: IFFALSE 8694
// if IsInArea ( i , arAttackSpawnArea ) then
8614: LD_VAR 0 1
8618: PPUSH
8619: LD_INT 18
8621: PPUSH
8622: CALL_OW 308
8626: IFFALSE 8680
// begin if IsInUnit ( i ) then
8628: LD_VAR 0 1
8632: PPUSH
8633: CALL_OW 310
8637: IFFALSE 8653
// RemoveUnit ( IsInUnit ( i ) ) ;
8639: LD_VAR 0 1
8643: PPUSH
8644: CALL_OW 310
8648: PPUSH
8649: CALL_OW 64
// RemoveUnit ( i ) ;
8653: LD_VAR 0 1
8657: PPUSH
8658: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
8662: LD_ADDR_EXP 58
8666: PUSH
8667: LD_EXP 58
8671: PUSH
8672: LD_VAR 0 1
8676: DIFF
8677: ST_TO_ADDR
// end else
8678: GO 8692
// ComMoveToArea ( i , arAttackSpawnArea ) ;
8680: LD_VAR 0 1
8684: PPUSH
8685: LD_INT 18
8687: PPUSH
8688: CALL_OW 113
8692: GO 8611
8694: POP
8695: POP
// until not tmp ;
8696: LD_VAR 0 2
8700: NOT
8701: IFFALSE 8573
// end ; end_of_file
8703: PPOPN 3
8705: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , skill , sources ; begin
8706: LD_INT 0
8708: PPUSH
8709: PPUSH
8710: PPUSH
8711: PPUSH
8712: PPUSH
8713: PPUSH
// uc_side := 3 ;
8714: LD_ADDR_OWVAR 20
8718: PUSH
8719: LD_INT 3
8721: ST_TO_ADDR
// uc_nation := nation_russian ;
8722: LD_ADDR_OWVAR 21
8726: PUSH
8727: LD_INT 3
8729: ST_TO_ADDR
// ruForces := [ ] ;
8730: LD_ADDR_EXP 59
8734: PUSH
8735: EMPTY
8736: ST_TO_ADDR
// ruForces2 := [ ] ;
8737: LD_ADDR_EXP 60
8741: PUSH
8742: EMPTY
8743: ST_TO_ADDR
// ruMech := [ ] ;
8744: LD_ADDR_EXP 63
8748: PUSH
8749: EMPTY
8750: ST_TO_ADDR
// ruMech2 := [ ] ;
8751: LD_ADDR_EXP 64
8755: PUSH
8756: EMPTY
8757: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8758: LD_ADDR_EXP 65
8762: PUSH
8763: LD_INT 37
8765: PUSH
8766: LD_INT 63
8768: PUSH
8769: LD_INT 52
8771: PUSH
8772: LD_INT 54
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: ST_TO_ADDR
// ruBaseArea := 0 ;
8781: LD_ADDR_EXP 66
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8789: LD_ADDR_EXP 67
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// ruBase := 0 ;
8797: LD_ADDR_EXP 68
8801: PUSH
8802: LD_INT 0
8804: ST_TO_ADDR
// ruBase2 := 0 ;
8805: LD_ADDR_EXP 69
8809: PUSH
8810: LD_INT 0
8812: ST_TO_ADDR
// ruConstructList := [ ] ;
8813: LD_ADDR_EXP 70
8817: PUSH
8818: EMPTY
8819: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8820: LD_ADDR_EXP 71
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: LD_INT 1
8833: PUSH
8834: LD_INT 43
8836: PUSH
8837: LD_INT 44
8839: PUSH
8840: LD_INT 45
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 1
8850: PPUSH
8851: LD_INT 3
8853: PPUSH
8854: CALL_OW 12
8858: ARRAY
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 22
8868: PUSH
8869: LD_INT 3
8871: PUSH
8872: LD_INT 1
8874: PUSH
8875: LD_INT 43
8877: PUSH
8878: LD_INT 44
8880: PUSH
8881: LD_INT 45
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 1
8891: PPUSH
8892: LD_INT 3
8894: PPUSH
8895: CALL_OW 12
8899: ARRAY
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_INT 3
8912: PUSH
8913: LD_INT 1
8915: PUSH
8916: LD_INT 43
8918: PUSH
8919: LD_INT 44
8921: PUSH
8922: LD_INT 45
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 1
8932: PPUSH
8933: LD_INT 3
8935: PPUSH
8936: CALL_OW 12
8940: ARRAY
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: ST_TO_ADDR
// ruCratesArea := 0 ;
8953: LD_ADDR_EXP 72
8957: PUSH
8958: LD_INT 0
8960: ST_TO_ADDR
// ruCratesArea2 := 0 ;
8961: LD_ADDR_EXP 73
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// ruHealPoint := [ ] ;
8969: LD_ADDR_EXP 74
8973: PUSH
8974: EMPTY
8975: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
8976: LD_ADDR_EXP 75
8980: PUSH
8981: EMPTY
8982: ST_TO_ADDR
// ruBuildings := [ ] ;
8983: LD_ADDR_EXP 76
8987: PUSH
8988: EMPTY
8989: ST_TO_ADDR
// ruBuildings2 := [ ] ;
8990: LD_ADDR_EXP 77
8994: PUSH
8995: EMPTY
8996: ST_TO_ADDR
// ruTanks := [ ] ;
8997: LD_ADDR_EXP 79
9001: PUSH
9002: EMPTY
9003: ST_TO_ADDR
// ruTanks2 := [ ] ;
9004: LD_ADDR_EXP 80
9008: PUSH
9009: EMPTY
9010: ST_TO_ADDR
// ruParkingArea := 0 ;
9011: LD_ADDR_EXP 82
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// ruParkingArea2 := 0 ;
9019: LD_ADDR_EXP 83
9023: PUSH
9024: LD_INT 0
9026: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
9027: LD_ADDR_VAR 0 2
9031: PUSH
9032: DOUBLE
9033: LD_INT 1
9035: DEC
9036: ST_TO_ADDR
9037: LD_INT 2
9039: PUSH
9040: LD_INT 3
9042: PUSH
9043: LD_INT 4
9045: PUSH
9046: LD_INT 4
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: PUSH
9055: LD_OWVAR 67
9059: ARRAY
9060: PUSH
9061: FOR_TO
9062: IFFALSE 9122
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
9064: LD_ADDR_EXP 70
9068: PUSH
9069: LD_EXP 70
9073: PPUSH
9074: LD_INT 22
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: LD_INT 1
9082: PUSH
9083: LD_INT 43
9085: PUSH
9086: LD_INT 44
9088: PUSH
9089: LD_INT 45
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: LD_INT 1
9099: PPUSH
9100: LD_INT 3
9102: PPUSH
9103: CALL_OW 12
9107: ARRAY
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL 92287 0 2
9119: ST_TO_ADDR
9120: GO 9061
9122: POP
9123: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
9124: LD_ADDR_VAR 0 6
9128: PUSH
9129: LD_INT 43
9131: PUSH
9132: LD_INT 68
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 43
9141: PUSH
9142: LD_INT 79
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 99
9151: PUSH
9152: LD_INT 114
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 103
9161: PUSH
9162: LD_INT 114
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: LD_INT 156
9171: PUSH
9172: LD_INT 92
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PUSH
9179: LD_INT 152
9181: PUSH
9182: LD_INT 85
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: ST_TO_ADDR
// for i in sources do
9197: LD_ADDR_VAR 0 2
9201: PUSH
9202: LD_VAR 0 6
9206: PUSH
9207: FOR_IN
9208: IFFALSE 9237
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
9210: LD_VAR 0 2
9214: PUSH
9215: LD_INT 1
9217: ARRAY
9218: PPUSH
9219: LD_VAR 0 2
9223: PUSH
9224: LD_INT 2
9226: ARRAY
9227: PPUSH
9228: LD_INT 3
9230: PPUSH
9231: CALL_OW 441
9235: GO 9207
9237: POP
9238: POP
// if Difficulty > 2 then
9239: LD_OWVAR 67
9243: PUSH
9244: LD_INT 2
9246: GREATER
9247: IFFALSE 9275
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
9249: LD_INT 52
9251: PPUSH
9252: LD_INT 6
9254: PPUSH
9255: LD_INT 2
9257: PPUSH
9258: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
9262: LD_INT 58
9264: PPUSH
9265: LD_INT 6
9267: PPUSH
9268: LD_INT 2
9270: PPUSH
9271: CALL_OW 322
// end ; skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
9275: LD_ADDR_VAR 0 5
9279: PUSH
9280: LD_INT 5
9282: PUSH
9283: LD_INT 6
9285: PUSH
9286: LD_INT 7
9288: PUSH
9289: LD_INT 8
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: PUSH
9298: LD_OWVAR 67
9302: ARRAY
9303: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
9304: LD_ADDR_EXP 61
9308: PUSH
9309: LD_STRING Tsaritsyn
9311: PPUSH
9312: LD_INT 0
9314: PPUSH
9315: LD_STRING 
9317: PPUSH
9318: CALL 54596 0 3
9322: ST_TO_ADDR
// for i := 1 to 4 do
9323: LD_ADDR_VAR 0 2
9327: PUSH
9328: DOUBLE
9329: LD_INT 1
9331: DEC
9332: ST_TO_ADDR
9333: LD_INT 4
9335: PUSH
9336: FOR_TO
9337: IFFALSE 9555
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9339: LD_ADDR_VAR 0 3
9343: PUSH
9344: DOUBLE
9345: LD_INT 1
9347: DEC
9348: ST_TO_ADDR
9349: LD_INT 5
9351: PUSH
9352: LD_INT 6
9354: PUSH
9355: LD_INT 8
9357: PUSH
9358: LD_INT 9
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PUSH
9367: LD_OWVAR 67
9371: ARRAY
9372: PUSH
9373: LD_INT 3
9375: PUSH
9376: LD_INT 4
9378: PUSH
9379: LD_INT 5
9381: PUSH
9382: LD_INT 6
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_OWVAR 67
9395: ARRAY
9396: PUSH
9397: LD_INT 3
9399: PUSH
9400: LD_INT 4
9402: PUSH
9403: LD_INT 5
9405: PUSH
9406: LD_INT 6
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: PUSH
9415: LD_OWVAR 67
9419: ARRAY
9420: PUSH
9421: LD_INT 2
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: LD_INT 3
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: LD_OWVAR 67
9443: ARRAY
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: PUSH
9451: LD_VAR 0 2
9455: ARRAY
9456: PUSH
9457: FOR_TO
9458: IFFALSE 9551
// begin PrepareHuman ( false , i , skill ) ;
9460: LD_INT 0
9462: PPUSH
9463: LD_VAR 0 2
9467: PPUSH
9468: LD_VAR 0 5
9472: PPUSH
9473: CALL_OW 380
// un := CreateHuman ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: CALL_OW 44
9486: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
9487: LD_ADDR_EXP 59
9491: PUSH
9492: LD_EXP 59
9496: PPUSH
9497: LD_VAR 0 4
9501: PPUSH
9502: CALL 92287 0 2
9506: ST_TO_ADDR
// if i = 3 then
9507: LD_VAR 0 2
9511: PUSH
9512: LD_INT 3
9514: EQUAL
9515: IFFALSE 9549
// begin ruMech := Join ( ruMech , un ) ;
9517: LD_ADDR_EXP 63
9521: PUSH
9522: LD_EXP 63
9526: PPUSH
9527: LD_VAR 0 4
9531: PPUSH
9532: CALL 92287 0 2
9536: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9537: LD_VAR 0 4
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 336
// end ; end ;
9549: GO 9457
9551: POP
9552: POP
9553: GO 9336
9555: POP
9556: POP
// if Difficulty < 4 then
9557: LD_OWVAR 67
9561: PUSH
9562: LD_INT 4
9564: LESS
9565: IFFALSE 9569
// exit ;
9567: GO 9841
// PrepareSoldier ( sex_male , skill + 1 ) ;
9569: LD_INT 1
9571: PPUSH
9572: LD_VAR 0 5
9576: PUSH
9577: LD_INT 1
9579: PLUS
9580: PPUSH
9581: CALL_OW 381
// hc_importance := 100 ;
9585: LD_ADDR_OWVAR 32
9589: PUSH
9590: LD_INT 100
9592: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
9593: LD_ADDR_EXP 62
9597: PUSH
9598: CALL_OW 44
9602: ST_TO_ADDR
// InitHc_All ( ) ;
9603: CALL_OW 584
// for i := 1 to 4 do
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_INT 4
9619: PUSH
9620: FOR_TO
9621: IFFALSE 9839
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9623: LD_ADDR_VAR 0 3
9627: PUSH
9628: DOUBLE
9629: LD_INT 1
9631: DEC
9632: ST_TO_ADDR
9633: LD_INT 5
9635: PUSH
9636: LD_INT 6
9638: PUSH
9639: LD_INT 8
9641: PUSH
9642: LD_INT 9
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: PUSH
9651: LD_OWVAR 67
9655: ARRAY
9656: PUSH
9657: LD_INT 3
9659: PUSH
9660: LD_INT 4
9662: PUSH
9663: LD_INT 5
9665: PUSH
9666: LD_INT 6
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: PUSH
9675: LD_OWVAR 67
9679: ARRAY
9680: PUSH
9681: LD_INT 3
9683: PUSH
9684: LD_INT 4
9686: PUSH
9687: LD_INT 5
9689: PUSH
9690: LD_INT 6
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PUSH
9699: LD_OWVAR 67
9703: ARRAY
9704: PUSH
9705: LD_INT 2
9707: PUSH
9708: LD_INT 3
9710: PUSH
9711: LD_INT 3
9713: PUSH
9714: LD_INT 3
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: LD_OWVAR 67
9727: ARRAY
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PUSH
9735: LD_VAR 0 2
9739: ARRAY
9740: PUSH
9741: FOR_TO
9742: IFFALSE 9835
// begin PrepareHuman ( false , i , skill ) ;
9744: LD_INT 0
9746: PPUSH
9747: LD_VAR 0 2
9751: PPUSH
9752: LD_VAR 0 5
9756: PPUSH
9757: CALL_OW 380
// un := CreateHuman ;
9761: LD_ADDR_VAR 0 4
9765: PUSH
9766: CALL_OW 44
9770: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
9771: LD_ADDR_EXP 60
9775: PUSH
9776: LD_EXP 60
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL 92287 0 2
9790: ST_TO_ADDR
// if i = 3 then
9791: LD_VAR 0 2
9795: PUSH
9796: LD_INT 3
9798: EQUAL
9799: IFFALSE 9833
// begin ruMech2 := Join ( ruMech2 , un ) ;
9801: LD_ADDR_EXP 64
9805: PUSH
9806: LD_EXP 64
9810: PPUSH
9811: LD_VAR 0 4
9815: PPUSH
9816: CALL 92287 0 2
9820: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9821: LD_VAR 0 4
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: CALL_OW 336
// end ; end ;
9833: GO 9741
9835: POP
9836: POP
9837: GO 9620
9839: POP
9840: POP
// end ;
9841: LD_VAR 0 1
9845: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings ) < 3 do var i ;
9846: LD_EXP 66
9850: PPUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 50
9863: PUSH
9864: EMPTY
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PPUSH
9871: CALL_OW 70
9875: PUSH
9876: LD_EXP 76
9880: PPUSH
9881: CALL 56698 0 1
9885: PUSH
9886: LD_INT 3
9888: LESS
9889: AND
9890: IFFALSE 10154
9892: GO 9894
9894: DISABLE
9895: LD_INT 0
9897: PPUSH
// begin enable ;
9898: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
9899: LD_ADDR_EXP 70
9903: PUSH
9904: LD_EXP 70
9908: PUSH
9909: LD_INT 22
9911: PUSH
9912: LD_INT 22
9914: PUSH
9915: LD_INT 24
9917: PUSH
9918: LD_INT 24
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_OWVAR 67
9931: ARRAY
9932: PUSH
9933: LD_INT 1
9935: PUSH
9936: LD_INT 3
9938: PUSH
9939: LD_INT 44
9941: PUSH
9942: LD_INT 45
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 1
9951: PPUSH
9952: LD_INT 2
9954: PPUSH
9955: CALL_OW 12
9959: ARRAY
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_INT 22
9972: PUSH
9973: LD_INT 24
9975: PUSH
9976: LD_INT 24
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: PUSH
9985: LD_OWVAR 67
9989: ARRAY
9990: PUSH
9991: LD_INT 1
9993: PUSH
9994: LD_INT 3
9996: PUSH
9997: LD_INT 45
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 22
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: LD_INT 24
10014: PUSH
10015: LD_INT 24
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: LD_OWVAR 67
10028: ARRAY
10029: PUSH
10030: LD_INT 1
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: LD_INT 45
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: ADD
10050: ST_TO_ADDR
// for i := Difficulty downto 1 do
10051: LD_ADDR_VAR 0 1
10055: PUSH
10056: DOUBLE
10057: LD_OWVAR 67
10061: INC
10062: ST_TO_ADDR
10063: LD_INT 1
10065: PUSH
10066: FOR_DOWNTO
10067: IFFALSE 10152
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
10069: LD_ADDR_EXP 70
10073: PUSH
10074: LD_EXP 70
10078: PPUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 22
10084: PUSH
10085: LD_INT 24
10087: PUSH
10088: LD_INT 24
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: PUSH
10097: LD_OWVAR 67
10101: ARRAY
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: LD_INT 3
10108: PUSH
10109: LD_INT 44
10111: PUSH
10112: LD_INT 45
10114: PUSH
10115: LD_INT 45
10117: PUSH
10118: LD_INT 43
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 1
10129: PPUSH
10130: LD_INT 4
10132: PPUSH
10133: CALL_OW 12
10137: ARRAY
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL 92287 0 2
10149: ST_TO_ADDR
10150: GO 10066
10152: POP
10153: POP
// end ;
10154: PPOPN 1
10156: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings2 ) < 3 do
10157: LD_EXP 67
10161: PPUSH
10162: LD_INT 30
10164: PUSH
10165: LD_INT 3
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 50
10174: PUSH
10175: EMPTY
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 70
10186: PUSH
10187: LD_EXP 77
10191: PPUSH
10192: CALL 56698 0 1
10196: PUSH
10197: LD_INT 3
10199: LESS
10200: AND
10201: IFFALSE 10396
10203: GO 10205
10205: DISABLE
// begin enable ;
10206: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
10207: LD_ADDR_EXP 71
10211: PUSH
10212: LD_EXP 71
10216: PUSH
10217: LD_INT 22
10219: PUSH
10220: LD_INT 22
10222: PUSH
10223: LD_INT 24
10225: PUSH
10226: LD_INT 24
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 1
10237: PPUSH
10238: LD_INT 4
10240: PPUSH
10241: CALL_OW 12
10245: ARRAY
10246: PUSH
10247: LD_INT 1
10249: PUSH
10250: LD_INT 3
10252: PUSH
10253: LD_INT 44
10255: PUSH
10256: LD_INT 45
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 1
10265: PPUSH
10266: LD_INT 2
10268: PPUSH
10269: CALL_OW 12
10273: ARRAY
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 22
10283: PUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 24
10289: PUSH
10290: LD_INT 24
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_INT 4
10304: PPUSH
10305: CALL_OW 12
10309: ARRAY
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: LD_INT 45
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 22
10328: PUSH
10329: LD_INT 22
10331: PUSH
10332: LD_INT 24
10334: PUSH
10335: LD_INT 24
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 1
10346: PPUSH
10347: LD_INT 4
10349: PPUSH
10350: CALL_OW 12
10354: ARRAY
10355: PUSH
10356: LD_INT 1
10358: PUSH
10359: LD_INT 3
10361: PUSH
10362: LD_INT 45
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 22
10373: PUSH
10374: LD_INT 1
10376: PUSH
10377: LD_INT 3
10379: PUSH
10380: LD_INT 43
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: ADD
10395: ST_TO_ADDR
// end ;
10396: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
10397: LD_INT 0
10399: PPUSH
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
10406: PPUSH
// case Difficulty of 1 :
10407: LD_OWVAR 67
10411: PUSH
10412: LD_INT 1
10414: DOUBLE
10415: EQUAL
10416: IFTRUE 10420
10418: GO 10439
10420: POP
// spawn := rand ( 1 , 2 ) ; 2 :
10421: LD_ADDR_VAR 0 4
10425: PUSH
10426: LD_INT 1
10428: PPUSH
10429: LD_INT 2
10431: PPUSH
10432: CALL_OW 12
10436: ST_TO_ADDR
10437: GO 10513
10439: LD_INT 2
10441: DOUBLE
10442: EQUAL
10443: IFTRUE 10447
10445: GO 10466
10447: POP
// spawn := rand ( 1 , 3 ) ; 3 :
10448: LD_ADDR_VAR 0 4
10452: PUSH
10453: LD_INT 1
10455: PPUSH
10456: LD_INT 3
10458: PPUSH
10459: CALL_OW 12
10463: ST_TO_ADDR
10464: GO 10513
10466: LD_INT 3
10468: DOUBLE
10469: EQUAL
10470: IFTRUE 10474
10472: GO 10493
10474: POP
// spawn := rand ( 2 , 3 ) ; 4 :
10475: LD_ADDR_VAR 0 4
10479: PUSH
10480: LD_INT 2
10482: PPUSH
10483: LD_INT 3
10485: PPUSH
10486: CALL_OW 12
10490: ST_TO_ADDR
10491: GO 10513
10493: LD_INT 4
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10512
10501: POP
// spawn := 3 ; end ;
10502: LD_ADDR_VAR 0 4
10506: PUSH
10507: LD_INT 3
10509: ST_TO_ADDR
10510: GO 10513
10512: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
10513: LD_ADDR_VAR 0 6
10517: PUSH
10518: LD_INT 24
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 23
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: LD_VAR 0 4
10536: ARRAY
10537: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
10538: LD_ADDR_VAR 0 5
10542: PUSH
10543: LD_INT 21
10545: PUSH
10546: LD_INT 22
10548: PUSH
10549: LD_INT 20
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_VAR 0 4
10561: ARRAY
10562: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
10563: LD_ADDR_VAR 0 8
10567: PUSH
10568: LD_INT 96
10570: PUSH
10571: LD_INT 102
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 54
10580: PUSH
10581: LD_INT 85
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: LD_INT 146
10590: PUSH
10591: LD_INT 67
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: LIST
10602: PUSH
10603: LD_VAR 0 4
10607: ARRAY
10608: ST_TO_ADDR
// for i in ruForces union ruCommander do
10609: LD_ADDR_VAR 0 2
10613: PUSH
10614: LD_EXP 59
10618: PUSH
10619: LD_EXP 61
10623: UNION
10624: PUSH
10625: FOR_IN
10626: IFFALSE 10681
// begin PlaceUnitArea ( i , area , false ) ;
10628: LD_VAR 0 2
10632: PPUSH
10633: LD_VAR 0 5
10637: PPUSH
10638: LD_INT 0
10640: PPUSH
10641: CALL_OW 49
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
10645: LD_VAR 0 2
10649: PPUSH
10650: LD_VAR 0 8
10654: PUSH
10655: LD_INT 1
10657: ARRAY
10658: PPUSH
10659: LD_VAR 0 8
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: CALL_OW 111
// wait ( 0 0$0.4 ) ;
10672: LD_INT 14
10674: PPUSH
10675: CALL_OW 67
// end ;
10679: GO 10625
10681: POP
10682: POP
// DRussianConvoy ;
10683: CALL 28498 0 0
// spawnedRussians := true ;
10687: LD_ADDR_EXP 19
10691: PUSH
10692: LD_INT 1
10694: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
10695: LD_INT 1
10697: PPUSH
10698: LD_VAR 0 6
10702: PPUSH
10703: CALL_OW 332
// case spawn of 1 :
10707: LD_VAR 0 4
10711: PUSH
10712: LD_INT 1
10714: DOUBLE
10715: EQUAL
10716: IFTRUE 10720
10718: GO 10730
10720: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
10721: LD_INT 102
10723: PPUSH
10724: CALL_OW 427
10728: GO 10767
10730: LD_INT 2
10732: DOUBLE
10733: EQUAL
10734: IFTRUE 10738
10736: GO 10748
10738: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
10739: LD_INT 103
10741: PPUSH
10742: CALL_OW 427
10746: GO 10767
10748: LD_INT 3
10750: DOUBLE
10751: EQUAL
10752: IFTRUE 10756
10754: GO 10766
10756: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
10757: LD_INT 104
10759: PPUSH
10760: CALL_OW 427
10764: GO 10767
10766: POP
// if Difficulty < 4 then
10767: LD_OWVAR 67
10771: PUSH
10772: LD_INT 4
10774: LESS
10775: IFFALSE 10779
// exit ;
10777: GO 10856
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
10779: LD_INT 1
10781: PPUSH
10782: LD_INT 22
10784: PPUSH
10785: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
10789: LD_ADDR_VAR 0 2
10793: PUSH
10794: LD_EXP 60
10798: PUSH
10799: LD_EXP 62
10803: UNION
10804: PUSH
10805: FOR_IN
10806: IFFALSE 10847
// begin PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
10808: LD_VAR 0 2
10812: PPUSH
10813: LD_INT 22
10815: PPUSH
10816: LD_INT 0
10818: PPUSH
10819: CALL_OW 49
// ComAgressiveMove ( i , 54 , 85 ) ;
10823: LD_VAR 0 2
10827: PPUSH
10828: LD_INT 54
10830: PPUSH
10831: LD_INT 85
10833: PPUSH
10834: CALL_OW 114
// wait ( 0 0$0.8 ) ;
10838: LD_INT 28
10840: PPUSH
10841: CALL_OW 67
// end ;
10845: GO 10805
10847: POP
10848: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
10849: LD_INT 105
10851: PPUSH
10852: CALL_OW 427
// end ;
10856: LD_VAR 0 1
10860: RET
// export function RussianBase ( group , option ) ; begin
10861: LD_INT 0
10863: PPUSH
// case option of 1 :
10864: LD_VAR 0 2
10868: PUSH
10869: LD_INT 1
10871: DOUBLE
10872: EQUAL
10873: IFTRUE 10877
10875: GO 11333
10877: POP
// begin ruBaseArea := ruBaseCenterArea ;
10878: LD_ADDR_EXP 66
10882: PUSH
10883: LD_INT 26
10885: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
10886: LD_ADDR_EXP 72
10890: PUSH
10891: LD_INT 26
10893: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
10894: LD_ADDR_EXP 76
10898: PUSH
10899: LD_INT 0
10901: PUSH
10902: LD_INT 104
10904: PUSH
10905: LD_INT 110
10907: PUSH
10908: LD_INT 5
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 4
10919: PUSH
10920: LD_INT 98
10922: PUSH
10923: LD_INT 90
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 29
10937: PUSH
10938: LD_INT 103
10940: PUSH
10941: LD_INT 114
10943: PUSH
10944: LD_INT 2
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 30
10955: PUSH
10956: LD_INT 99
10958: PUSH
10959: LD_INT 114
10961: PUSH
10962: LD_INT 3
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 28
10973: PUSH
10974: LD_INT 100
10976: PUSH
10977: LD_INT 112
10979: PUSH
10980: LD_INT 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 2
10991: PUSH
10992: LD_INT 92
10994: PUSH
10995: LD_INT 101
10997: PUSH
10998: LD_INT 0
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 26
11009: PUSH
11010: LD_INT 97
11012: PUSH
11013: LD_INT 116
11015: PUSH
11016: LD_INT 5
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 17
11027: PUSH
11028: LD_INT 96
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 18
11045: PUSH
11046: LD_INT 88
11048: PUSH
11049: LD_INT 97
11051: PUSH
11052: LD_INT 2
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 26
11063: PUSH
11064: LD_INT 106
11066: PUSH
11067: LD_INT 92
11069: PUSH
11070: LD_INT 2
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 6
11081: PUSH
11082: LD_INT 93
11084: PUSH
11085: LD_INT 110
11087: PUSH
11088: LD_INT 0
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 21
11099: PUSH
11100: LD_INT 89
11102: PUSH
11103: LD_INT 101
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 16
11117: PUSH
11118: LD_INT 95
11120: PUSH
11121: LD_INT 104
11123: PUSH
11124: LD_INT 4
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 24
11135: PUSH
11136: LD_INT 92
11138: PUSH
11139: LD_INT 105
11141: PUSH
11142: LD_INT 0
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 33
11153: PUSH
11154: LD_INT 88
11156: PUSH
11157: LD_INT 89
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 33
11171: PUSH
11172: LD_INT 86
11174: PUSH
11175: LD_INT 90
11177: PUSH
11178: LD_INT 2
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 33
11189: PUSH
11190: LD_INT 85
11192: PUSH
11193: LD_INT 99
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: PUSH
11205: LD_INT 33
11207: PUSH
11208: LD_INT 85
11210: PUSH
11211: LD_INT 107
11213: PUSH
11214: LD_INT 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 33
11225: PUSH
11226: LD_INT 105
11228: PUSH
11229: LD_INT 99
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 33
11243: PUSH
11244: LD_INT 102
11246: PUSH
11247: LD_INT 92
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 33
11261: PUSH
11262: LD_INT 105
11264: PUSH
11265: LD_INT 92
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
11300: LD_ADDR_EXP 74
11304: PUSH
11305: LD_INT 98
11307: PUSH
11308: LD_INT 107
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
11315: LD_ADDR_EXP 82
11319: PUSH
11320: LD_INT 30
11322: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnCenterArea ;
11323: LD_ADDR_EXP 84
11327: PUSH
11328: LD_INT 36
11330: ST_TO_ADDR
// end ; 2 :
11331: GO 12357
11333: LD_INT 2
11335: DOUBLE
11336: EQUAL
11337: IFTRUE 11341
11339: GO 11835
11341: POP
// begin ruBaseArea := ruBaseWestArea ;
11342: LD_ADDR_EXP 66
11346: PUSH
11347: LD_INT 28
11349: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
11350: LD_ADDR_EXP 72
11354: PUSH
11355: LD_INT 28
11357: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11358: LD_ADDR_EXP 76
11362: PUSH
11363: LD_INT 0
11365: PUSH
11366: LD_INT 49
11368: PUSH
11369: LD_INT 74
11371: PUSH
11372: LD_INT 3
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 4
11383: PUSH
11384: LD_INT 73
11386: PUSH
11387: LD_INT 88
11389: PUSH
11390: LD_INT 5
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 4
11401: PUSH
11402: LD_INT 56
11404: PUSH
11405: LD_INT 62
11407: PUSH
11408: LD_INT 3
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 29
11419: PUSH
11420: LD_INT 43
11422: PUSH
11423: LD_INT 68
11425: PUSH
11426: LD_INT 2
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 30
11437: PUSH
11438: LD_INT 43
11440: PUSH
11441: LD_INT 79
11443: PUSH
11444: LD_INT 5
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 28
11455: PUSH
11456: LD_INT 60
11458: PUSH
11459: LD_INT 75
11461: PUSH
11462: LD_INT 1
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 2
11473: PUSH
11474: LD_INT 50
11476: PUSH
11477: LD_INT 87
11479: PUSH
11480: LD_INT 1
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 26
11491: PUSH
11492: LD_INT 45
11494: PUSH
11495: LD_INT 67
11497: PUSH
11498: LD_INT 2
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 17
11509: PUSH
11510: LD_INT 47
11512: PUSH
11513: LD_INT 84
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 18
11527: PUSH
11528: LD_INT 46
11530: PUSH
11531: LD_INT 87
11533: PUSH
11534: LD_INT 1
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 26
11545: PUSH
11546: LD_INT 41
11548: PUSH
11549: LD_INT 64
11551: PUSH
11552: LD_INT 5
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 6
11563: PUSH
11564: LD_INT 42
11566: PUSH
11567: LD_INT 74
11569: PUSH
11570: LD_INT 1
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 21
11581: PUSH
11582: LD_INT 54
11584: PUSH
11585: LD_INT 91
11587: PUSH
11588: LD_INT 5
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 16
11599: PUSH
11600: LD_INT 50
11602: PUSH
11603: LD_INT 83
11605: PUSH
11606: LD_INT 3
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 24
11617: PUSH
11618: LD_INT 50
11620: PUSH
11621: LD_INT 90
11623: PUSH
11624: LD_INT 0
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 33
11635: PUSH
11636: LD_INT 51
11638: PUSH
11639: LD_INT 61
11641: PUSH
11642: LD_INT 3
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 33
11653: PUSH
11654: LD_INT 42
11656: PUSH
11657: LD_INT 60
11659: PUSH
11660: LD_INT 3
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 33
11671: PUSH
11672: LD_INT 36
11674: PUSH
11675: LD_INT 58
11677: PUSH
11678: LD_INT 3
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 33
11689: PUSH
11690: LD_INT 39
11692: PUSH
11693: LD_INT 59
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 33
11707: PUSH
11708: LD_INT 61
11710: PUSH
11711: LD_INT 64
11713: PUSH
11714: LD_INT 3
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 33
11725: PUSH
11726: LD_INT 63
11728: PUSH
11729: LD_INT 90
11731: PUSH
11732: LD_INT 5
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 33
11743: PUSH
11744: LD_INT 64
11746: PUSH
11747: LD_INT 88
11749: PUSH
11750: LD_INT 5
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 33
11761: PUSH
11762: LD_INT 72
11764: PUSH
11765: LD_INT 82
11767: PUSH
11768: LD_INT 5
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
11802: LD_ADDR_EXP 74
11806: PUSH
11807: LD_INT 45
11809: PUSH
11810: LD_INT 75
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
11817: LD_ADDR_EXP 82
11821: PUSH
11822: LD_INT 31
11824: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnWestArea ;
11825: LD_ADDR_EXP 84
11829: PUSH
11830: LD_INT 37
11832: ST_TO_ADDR
// end ; 3 :
11833: GO 12357
11835: LD_INT 3
11837: DOUBLE
11838: EQUAL
11839: IFTRUE 11843
11841: GO 12356
11843: POP
// begin ruBaseArea := ruBaseEastArea ;
11844: LD_ADDR_EXP 66
11848: PUSH
11849: LD_INT 27
11851: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
11852: LD_ADDR_EXP 72
11856: PUSH
11857: LD_INT 27
11859: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] , [ b_turret , 158 , 65 , 3 ] , [ b_turret , 144 , 53 , 2 ] , [ b_turret , 150 , 81 , 1 ] ] ;
11860: LD_ADDR_EXP 76
11864: PUSH
11865: LD_INT 0
11867: PUSH
11868: LD_INT 152
11870: PUSH
11871: LD_INT 72
11873: PUSH
11874: LD_INT 4
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 4
11885: PUSH
11886: LD_INT 139
11888: PUSH
11889: LD_INT 69
11891: PUSH
11892: LD_INT 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 4
11903: PUSH
11904: LD_INT 142
11906: PUSH
11907: LD_INT 56
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 29
11921: PUSH
11922: LD_INT 152
11924: PUSH
11925: LD_INT 85
11927: PUSH
11928: LD_INT 3
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 30
11939: PUSH
11940: LD_INT 156
11942: PUSH
11943: LD_INT 92
11945: PUSH
11946: LD_INT 3
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 28
11957: PUSH
11958: LD_INT 157
11960: PUSH
11961: LD_INT 96
11963: PUSH
11964: LD_INT 4
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 2
11975: PUSH
11976: LD_INT 161
11978: PUSH
11979: LD_INT 74
11981: PUSH
11982: LD_INT 5
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 21
11993: PUSH
11994: LD_INT 157
11996: PUSH
11997: LD_INT 74
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 16
12011: PUSH
12012: LD_INT 161
12014: PUSH
12015: LD_INT 77
12017: PUSH
12018: LD_INT 0
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 24
12029: PUSH
12030: LD_INT 165
12032: PUSH
12033: LD_INT 78
12035: PUSH
12036: LD_INT 5
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 17
12047: PUSH
12048: LD_INT 164
12050: PUSH
12051: LD_INT 74
12053: PUSH
12054: LD_INT 4
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 6
12065: PUSH
12066: LD_INT 164
12068: PUSH
12069: LD_INT 95
12071: PUSH
12072: LD_INT 5
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 18
12083: PUSH
12084: LD_INT 161
12086: PUSH
12087: LD_INT 70
12089: PUSH
12090: LD_INT 3
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 26
12101: PUSH
12102: LD_INT 155
12104: PUSH
12105: LD_INT 87
12107: PUSH
12108: LD_INT 0
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 26
12119: PUSH
12120: LD_INT 159
12122: PUSH
12123: LD_INT 95
12125: PUSH
12126: LD_INT 3
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 26
12137: PUSH
12138: LD_INT 167
12140: PUSH
12141: LD_INT 98
12143: PUSH
12144: LD_INT 1
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 33
12155: PUSH
12156: LD_INT 152
12158: PUSH
12159: LD_INT 89
12161: PUSH
12162: LD_INT 1
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 33
12173: PUSH
12174: LD_INT 134
12176: PUSH
12177: LD_INT 61
12179: PUSH
12180: LD_INT 2
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 33
12191: PUSH
12192: LD_INT 156
12194: PUSH
12195: LD_INT 62
12197: PUSH
12198: LD_INT 3
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 33
12209: PUSH
12210: LD_INT 171
12212: PUSH
12213: LD_INT 97
12215: PUSH
12216: LD_INT 5
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 33
12227: PUSH
12228: LD_INT 169
12230: PUSH
12231: LD_INT 103
12233: PUSH
12234: LD_INT 5
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 33
12245: PUSH
12246: LD_INT 158
12248: PUSH
12249: LD_INT 65
12251: PUSH
12252: LD_INT 3
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 33
12263: PUSH
12264: LD_INT 144
12266: PUSH
12267: LD_INT 53
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 33
12281: PUSH
12282: LD_INT 150
12284: PUSH
12285: LD_INT 81
12287: PUSH
12288: LD_INT 1
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
12323: LD_ADDR_EXP 74
12327: PUSH
12328: LD_INT 145
12330: PUSH
12331: LD_INT 71
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
12338: LD_ADDR_EXP 82
12342: PUSH
12343: LD_INT 29
12345: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnEastArea ;
12346: LD_ADDR_EXP 84
12350: PUSH
12351: LD_INT 35
12353: ST_TO_ADDR
// end ; end ;
12354: GO 12357
12356: POP
// ruScriptActive := true ;
12357: LD_ADDR_EXP 14
12361: PUSH
12362: LD_INT 1
12364: ST_TO_ADDR
// end ;
12365: LD_VAR 0 3
12369: RET
// export function RussianBase2 ( group , option ) ; begin
12370: LD_INT 0
12372: PPUSH
// case option of 1 :
12373: LD_VAR 0 2
12377: PUSH
12378: LD_INT 1
12380: DOUBLE
12381: EQUAL
12382: IFTRUE 12386
12384: GO 12842
12386: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
12387: LD_ADDR_EXP 67
12391: PUSH
12392: LD_INT 26
12394: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
12395: LD_ADDR_EXP 73
12399: PUSH
12400: LD_INT 26
12402: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
12403: LD_ADDR_EXP 77
12407: PUSH
12408: LD_INT 0
12410: PUSH
12411: LD_INT 104
12413: PUSH
12414: LD_INT 110
12416: PUSH
12417: LD_INT 5
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 4
12428: PUSH
12429: LD_INT 98
12431: PUSH
12432: LD_INT 90
12434: PUSH
12435: LD_INT 3
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 29
12446: PUSH
12447: LD_INT 103
12449: PUSH
12450: LD_INT 114
12452: PUSH
12453: LD_INT 2
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 99
12467: PUSH
12468: LD_INT 114
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 28
12482: PUSH
12483: LD_INT 100
12485: PUSH
12486: LD_INT 112
12488: PUSH
12489: LD_INT 1
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 92
12503: PUSH
12504: LD_INT 101
12506: PUSH
12507: LD_INT 0
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 26
12518: PUSH
12519: LD_INT 97
12521: PUSH
12522: LD_INT 116
12524: PUSH
12525: LD_INT 5
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 17
12536: PUSH
12537: LD_INT 96
12539: PUSH
12540: LD_INT 101
12542: PUSH
12543: LD_INT 4
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 18
12554: PUSH
12555: LD_INT 88
12557: PUSH
12558: LD_INT 97
12560: PUSH
12561: LD_INT 2
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 26
12572: PUSH
12573: LD_INT 106
12575: PUSH
12576: LD_INT 92
12578: PUSH
12579: LD_INT 2
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 6
12590: PUSH
12591: LD_INT 93
12593: PUSH
12594: LD_INT 110
12596: PUSH
12597: LD_INT 0
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 21
12608: PUSH
12609: LD_INT 89
12611: PUSH
12612: LD_INT 101
12614: PUSH
12615: LD_INT 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 16
12626: PUSH
12627: LD_INT 95
12629: PUSH
12630: LD_INT 104
12632: PUSH
12633: LD_INT 4
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 24
12644: PUSH
12645: LD_INT 92
12647: PUSH
12648: LD_INT 105
12650: PUSH
12651: LD_INT 0
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 33
12662: PUSH
12663: LD_INT 88
12665: PUSH
12666: LD_INT 89
12668: PUSH
12669: LD_INT 2
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 33
12680: PUSH
12681: LD_INT 86
12683: PUSH
12684: LD_INT 90
12686: PUSH
12687: LD_INT 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 33
12698: PUSH
12699: LD_INT 85
12701: PUSH
12702: LD_INT 99
12704: PUSH
12705: LD_INT 2
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 33
12716: PUSH
12717: LD_INT 85
12719: PUSH
12720: LD_INT 107
12722: PUSH
12723: LD_INT 1
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 33
12734: PUSH
12735: LD_INT 105
12737: PUSH
12738: LD_INT 99
12740: PUSH
12741: LD_INT 1
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 33
12752: PUSH
12753: LD_INT 102
12755: PUSH
12756: LD_INT 92
12758: PUSH
12759: LD_INT 3
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 33
12770: PUSH
12771: LD_INT 105
12773: PUSH
12774: LD_INT 92
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
12809: LD_ADDR_EXP 75
12813: PUSH
12814: LD_INT 98
12816: PUSH
12817: LD_INT 107
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
12824: LD_ADDR_EXP 83
12828: PUSH
12829: LD_INT 30
12831: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnCenterArea ;
12832: LD_ADDR_EXP 85
12836: PUSH
12837: LD_INT 36
12839: ST_TO_ADDR
// end ; 2 :
12840: GO 13809
12842: LD_INT 2
12844: DOUBLE
12845: EQUAL
12846: IFTRUE 12850
12848: GO 13344
12850: POP
// begin ruBaseArea2 := ruBaseWestArea ;
12851: LD_ADDR_EXP 67
12855: PUSH
12856: LD_INT 28
12858: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
12859: LD_ADDR_EXP 73
12863: PUSH
12864: LD_INT 28
12866: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
12867: LD_ADDR_EXP 77
12871: PUSH
12872: LD_INT 0
12874: PUSH
12875: LD_INT 49
12877: PUSH
12878: LD_INT 74
12880: PUSH
12881: LD_INT 3
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 4
12892: PUSH
12893: LD_INT 73
12895: PUSH
12896: LD_INT 88
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 4
12910: PUSH
12911: LD_INT 56
12913: PUSH
12914: LD_INT 62
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 29
12928: PUSH
12929: LD_INT 43
12931: PUSH
12932: LD_INT 68
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 30
12946: PUSH
12947: LD_INT 43
12949: PUSH
12950: LD_INT 79
12952: PUSH
12953: LD_INT 5
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 28
12964: PUSH
12965: LD_INT 60
12967: PUSH
12968: LD_INT 75
12970: PUSH
12971: LD_INT 1
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 2
12982: PUSH
12983: LD_INT 50
12985: PUSH
12986: LD_INT 87
12988: PUSH
12989: LD_INT 1
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 26
13000: PUSH
13001: LD_INT 45
13003: PUSH
13004: LD_INT 67
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 17
13018: PUSH
13019: LD_INT 47
13021: PUSH
13022: LD_INT 84
13024: PUSH
13025: LD_INT 2
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 18
13036: PUSH
13037: LD_INT 46
13039: PUSH
13040: LD_INT 87
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 26
13054: PUSH
13055: LD_INT 41
13057: PUSH
13058: LD_INT 64
13060: PUSH
13061: LD_INT 5
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 6
13072: PUSH
13073: LD_INT 42
13075: PUSH
13076: LD_INT 74
13078: PUSH
13079: LD_INT 1
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 21
13090: PUSH
13091: LD_INT 54
13093: PUSH
13094: LD_INT 91
13096: PUSH
13097: LD_INT 5
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 16
13108: PUSH
13109: LD_INT 50
13111: PUSH
13112: LD_INT 83
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 24
13126: PUSH
13127: LD_INT 50
13129: PUSH
13130: LD_INT 90
13132: PUSH
13133: LD_INT 0
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 33
13144: PUSH
13145: LD_INT 51
13147: PUSH
13148: LD_INT 61
13150: PUSH
13151: LD_INT 3
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 33
13162: PUSH
13163: LD_INT 42
13165: PUSH
13166: LD_INT 60
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 33
13180: PUSH
13181: LD_INT 36
13183: PUSH
13184: LD_INT 58
13186: PUSH
13187: LD_INT 3
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 33
13198: PUSH
13199: LD_INT 39
13201: PUSH
13202: LD_INT 59
13204: PUSH
13205: LD_INT 3
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 33
13216: PUSH
13217: LD_INT 61
13219: PUSH
13220: LD_INT 64
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 33
13234: PUSH
13235: LD_INT 63
13237: PUSH
13238: LD_INT 90
13240: PUSH
13241: LD_INT 5
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 33
13252: PUSH
13253: LD_INT 64
13255: PUSH
13256: LD_INT 88
13258: PUSH
13259: LD_INT 5
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 33
13270: PUSH
13271: LD_INT 72
13273: PUSH
13274: LD_INT 82
13276: PUSH
13277: LD_INT 5
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
13311: LD_ADDR_EXP 74
13315: PUSH
13316: LD_INT 45
13318: PUSH
13319: LD_INT 75
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
13326: LD_ADDR_EXP 83
13330: PUSH
13331: LD_INT 31
13333: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnWestArea ;
13334: LD_ADDR_EXP 85
13338: PUSH
13339: LD_INT 37
13341: ST_TO_ADDR
// end ; 3 :
13342: GO 13809
13344: LD_INT 3
13346: DOUBLE
13347: EQUAL
13348: IFTRUE 13352
13350: GO 13808
13352: POP
// begin ruBaseArea2 := ruBaseEastArea ;
13353: LD_ADDR_EXP 67
13357: PUSH
13358: LD_INT 27
13360: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
13361: LD_ADDR_EXP 73
13365: PUSH
13366: LD_INT 27
13368: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
13369: LD_ADDR_EXP 77
13373: PUSH
13374: LD_INT 0
13376: PUSH
13377: LD_INT 152
13379: PUSH
13380: LD_INT 72
13382: PUSH
13383: LD_INT 4
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 4
13394: PUSH
13395: LD_INT 139
13397: PUSH
13398: LD_INT 69
13400: PUSH
13401: LD_INT 1
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 4
13412: PUSH
13413: LD_INT 142
13415: PUSH
13416: LD_INT 56
13418: PUSH
13419: LD_INT 2
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 29
13430: PUSH
13431: LD_INT 152
13433: PUSH
13434: LD_INT 85
13436: PUSH
13437: LD_INT 3
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 30
13448: PUSH
13449: LD_INT 156
13451: PUSH
13452: LD_INT 92
13454: PUSH
13455: LD_INT 3
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 28
13466: PUSH
13467: LD_INT 157
13469: PUSH
13470: LD_INT 96
13472: PUSH
13473: LD_INT 4
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 2
13484: PUSH
13485: LD_INT 161
13487: PUSH
13488: LD_INT 74
13490: PUSH
13491: LD_INT 5
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 21
13502: PUSH
13503: LD_INT 157
13505: PUSH
13506: LD_INT 74
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 16
13520: PUSH
13521: LD_INT 161
13523: PUSH
13524: LD_INT 77
13526: PUSH
13527: LD_INT 0
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 24
13538: PUSH
13539: LD_INT 165
13541: PUSH
13542: LD_INT 78
13544: PUSH
13545: LD_INT 5
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 17
13556: PUSH
13557: LD_INT 164
13559: PUSH
13560: LD_INT 74
13562: PUSH
13563: LD_INT 4
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 6
13574: PUSH
13575: LD_INT 164
13577: PUSH
13578: LD_INT 95
13580: PUSH
13581: LD_INT 5
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 18
13592: PUSH
13593: LD_INT 161
13595: PUSH
13596: LD_INT 70
13598: PUSH
13599: LD_INT 3
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 26
13610: PUSH
13611: LD_INT 155
13613: PUSH
13614: LD_INT 87
13616: PUSH
13617: LD_INT 0
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 26
13628: PUSH
13629: LD_INT 159
13631: PUSH
13632: LD_INT 95
13634: PUSH
13635: LD_INT 3
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 26
13646: PUSH
13647: LD_INT 167
13649: PUSH
13650: LD_INT 98
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 33
13664: PUSH
13665: LD_INT 152
13667: PUSH
13668: LD_INT 89
13670: PUSH
13671: LD_INT 1
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 33
13682: PUSH
13683: LD_INT 134
13685: PUSH
13686: LD_INT 61
13688: PUSH
13689: LD_INT 2
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 33
13700: PUSH
13701: LD_INT 156
13703: PUSH
13704: LD_INT 62
13706: PUSH
13707: LD_INT 3
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 33
13718: PUSH
13719: LD_INT 171
13721: PUSH
13722: LD_INT 97
13724: PUSH
13725: LD_INT 5
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 33
13736: PUSH
13737: LD_INT 169
13739: PUSH
13740: LD_INT 103
13742: PUSH
13743: LD_INT 5
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
13775: LD_ADDR_EXP 75
13779: PUSH
13780: LD_INT 145
13782: PUSH
13783: LD_INT 71
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
13790: LD_ADDR_EXP 83
13794: PUSH
13795: LD_INT 29
13797: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnEastArea ;
13798: LD_ADDR_EXP 85
13802: PUSH
13803: LD_INT 35
13805: ST_TO_ADDR
// end ; end ;
13806: GO 13809
13808: POP
// ruScriptActive2 := true ;
13809: LD_ADDR_EXP 15
13813: PUSH
13814: LD_INT 1
13816: ST_TO_ADDR
// end ;
13817: LD_VAR 0 3
13821: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
13822: LD_EXP 14
13826: PUSH
13827: LD_EXP 59
13831: PPUSH
13832: CALL 56698 0 1
13836: AND
13837: IFFALSE 16419
13839: GO 13841
13841: DISABLE
13842: LD_INT 0
13844: PPUSH
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
13857: PPUSH
13858: PPUSH
13859: PPUSH
// begin enable ;
13860: ENABLE
// if ruTech then
13861: LD_EXP 65
13865: IFFALSE 14019
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13867: LD_ADDR_VAR 0 4
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_INT 3
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 50
13884: PUSH
13885: EMPTY
13886: LIST
13887: PUSH
13888: LD_INT 2
13890: PUSH
13891: LD_INT 30
13893: PUSH
13894: LD_INT 6
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 30
13903: PUSH
13904: LD_INT 7
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 30
13913: PUSH
13914: LD_INT 8
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 69
13936: ST_TO_ADDR
// if lab then
13937: LD_VAR 0 4
13941: IFFALSE 14019
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
13943: LD_VAR 0 4
13947: PUSH
13948: LD_INT 1
13950: ARRAY
13951: PPUSH
13952: CALL_OW 461
13956: PUSH
13957: LD_INT 2
13959: EQUAL
13960: IFFALSE 14019
// begin for i in ruTech do
13962: LD_ADDR_VAR 0 1
13966: PUSH
13967: LD_EXP 65
13971: PUSH
13972: FOR_IN
13973: IFFALSE 14017
// if CanBeResearched ( lab [ 1 ] , i ) then
13975: LD_VAR 0 4
13979: PUSH
13980: LD_INT 1
13982: ARRAY
13983: PPUSH
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 430
13993: IFFALSE 14015
// begin ComResearch ( lab [ 1 ] , i ) ;
13995: LD_VAR 0 4
13999: PUSH
14000: LD_INT 1
14002: ARRAY
14003: PPUSH
14004: LD_VAR 0 1
14008: PPUSH
14009: CALL_OW 124
// break ;
14013: GO 14017
// end ;
14015: GO 13972
14017: POP
14018: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
14019: LD_ADDR_VAR 0 14
14023: PUSH
14024: LD_EXP 66
14028: PPUSH
14029: LD_INT 22
14031: PUSH
14032: LD_INT 3
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: LD_INT 3
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 50
14051: PUSH
14052: EMPTY
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 70
14064: ST_TO_ADDR
// if fac then
14065: LD_VAR 0 14
14069: IFFALSE 14664
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
14071: LD_EXP 63
14075: PPUSH
14076: LD_INT 3
14078: PUSH
14079: LD_INT 60
14081: PUSH
14082: EMPTY
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 3
14091: PUSH
14092: LD_INT 25
14094: PUSH
14095: LD_INT 3
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PPUSH
14110: CALL_OW 72
14114: IFFALSE 14255
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
14116: LD_ADDR_VAR 0 1
14120: PUSH
14121: LD_EXP 63
14125: PPUSH
14126: LD_INT 3
14128: PUSH
14129: LD_INT 60
14131: PUSH
14132: EMPTY
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 3
14141: PUSH
14142: LD_INT 25
14144: PUSH
14145: LD_INT 3
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PPUSH
14160: CALL_OW 72
14164: PUSH
14165: FOR_IN
14166: IFFALSE 14253
// begin SetTag ( i , tMech ) ;
14168: LD_VAR 0 1
14172: PPUSH
14173: LD_INT 7
14175: PPUSH
14176: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 310
14189: PUSH
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 310
14199: PUSH
14200: LD_VAR 0 14
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: NONEQUAL
14209: AND
14210: IFFALSE 14221
// ComExitBuilding ( i ) ;
14212: LD_VAR 0 1
14216: PPUSH
14217: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
14221: LD_VAR 0 1
14225: PPUSH
14226: LD_VAR 0 14
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: PPUSH
14235: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
14239: LD_VAR 0 1
14243: PPUSH
14244: LD_INT 3
14246: PPUSH
14247: CALL_OW 183
// end ;
14251: GO 14165
14253: POP
14254: POP
// end ; if UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
14255: LD_EXP 63
14259: PPUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 3
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 54
14275: PUSH
14276: EMPTY
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 120
14285: PUSH
14286: LD_INT 7
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 50
14295: PUSH
14296: EMPTY
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PPUSH
14305: CALL_OW 72
14309: IFFALSE 14396
// begin for i in UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
14311: LD_ADDR_VAR 0 1
14315: PUSH
14316: LD_EXP 63
14320: PPUSH
14321: LD_INT 25
14323: PUSH
14324: LD_INT 3
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 3
14333: PUSH
14334: LD_INT 54
14336: PUSH
14337: EMPTY
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 120
14346: PUSH
14347: LD_INT 7
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 50
14356: PUSH
14357: EMPTY
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 72
14370: PUSH
14371: FOR_IN
14372: IFFALSE 14394
// ComEnterUnit ( i , fac [ 1 ] ) ;
14374: LD_VAR 0 1
14378: PPUSH
14379: LD_VAR 0 14
14383: PUSH
14384: LD_INT 1
14386: ARRAY
14387: PPUSH
14388: CALL_OW 120
14392: GO 14371
14394: POP
14395: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14396: LD_VAR 0 14
14400: PUSH
14401: LD_INT 1
14403: ARRAY
14404: PPUSH
14405: CALL_OW 461
14409: PUSH
14410: LD_INT 2
14412: EQUAL
14413: IFFALSE 14664
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14415: LD_ADDR_VAR 0 15
14419: PUSH
14420: LD_EXP 66
14424: PPUSH
14425: LD_INT 2
14427: PUSH
14428: LD_INT 30
14430: PUSH
14431: LD_INT 32
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 30
14440: PUSH
14441: LD_INT 33
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: LD_INT 35
14455: PUSH
14456: LD_INT 0
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 70
14471: ST_TO_ADDR
// if emptyTowers then
14472: LD_VAR 0 15
14476: IFFALSE 14526
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
14478: LD_ADDR_VAR 0 16
14482: PUSH
14483: LD_VAR 0 15
14487: PUSH
14488: LD_INT 1
14490: ARRAY
14491: PPUSH
14492: LD_EXP 66
14496: PPUSH
14497: CALL 64943 0 2
14501: ST_TO_ADDR
// if weapon then
14502: LD_VAR 0 16
14506: IFFALSE 14526
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14508: LD_VAR 0 15
14512: PUSH
14513: LD_INT 1
14515: ARRAY
14516: PPUSH
14517: LD_VAR 0 16
14521: PPUSH
14522: CALL_OW 148
// end ; if ruConstructList then
14526: LD_EXP 70
14530: IFFALSE 14664
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
14532: LD_VAR 0 14
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: LD_EXP 70
14545: PUSH
14546: LD_INT 1
14548: ARRAY
14549: PUSH
14550: LD_INT 1
14552: ARRAY
14553: PPUSH
14554: LD_EXP 70
14558: PUSH
14559: LD_INT 1
14561: ARRAY
14562: PUSH
14563: LD_INT 2
14565: ARRAY
14566: PPUSH
14567: LD_EXP 70
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: PUSH
14576: LD_INT 3
14578: ARRAY
14579: PPUSH
14580: LD_EXP 70
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PUSH
14589: LD_INT 4
14591: ARRAY
14592: PPUSH
14593: CALL_OW 448
14597: IFFALSE 14664
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
14599: LD_VAR 0 14
14603: PUSH
14604: LD_INT 1
14606: ARRAY
14607: PPUSH
14608: LD_EXP 70
14612: PUSH
14613: LD_INT 1
14615: ARRAY
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PPUSH
14621: LD_EXP 70
14625: PUSH
14626: LD_INT 1
14628: ARRAY
14629: PUSH
14630: LD_INT 2
14632: ARRAY
14633: PPUSH
14634: LD_EXP 70
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PUSH
14643: LD_INT 3
14645: ARRAY
14646: PPUSH
14647: LD_EXP 70
14651: PUSH
14652: LD_INT 1
14654: ARRAY
14655: PUSH
14656: LD_INT 4
14658: ARRAY
14659: PPUSH
14660: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14664: LD_ADDR_VAR 0 2
14668: PUSH
14669: LD_EXP 66
14673: PPUSH
14674: LD_INT 21
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 3
14686: PUSH
14687: LD_INT 57
14689: PUSH
14690: EMPTY
14691: LIST
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 3
14699: PUSH
14700: LD_INT 24
14702: PUSH
14703: LD_INT 1000
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 70
14723: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
14724: LD_ADDR_VAR 0 8
14728: PUSH
14729: LD_EXP 72
14733: PPUSH
14734: CALL_OW 435
14738: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
14739: LD_ADDR_VAR 0 9
14743: PUSH
14744: LD_EXP 59
14748: PPUSH
14749: LD_INT 25
14751: PUSH
14752: LD_INT 4
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 50
14761: PUSH
14762: EMPTY
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 72
14773: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14774: LD_ADDR_VAR 0 4
14778: PUSH
14779: LD_EXP 66
14783: PPUSH
14784: LD_INT 2
14786: PUSH
14787: LD_INT 30
14789: PUSH
14790: LD_INT 6
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 30
14799: PUSH
14800: LD_INT 7
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 30
14809: PUSH
14810: LD_INT 8
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PPUSH
14823: CALL_OW 70
14827: ST_TO_ADDR
// if sci then
14828: LD_VAR 0 9
14832: IFFALSE 14993
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
14834: LD_ADDR_VAR 0 11
14838: PUSH
14839: LD_EXP 59
14843: PPUSH
14844: LD_INT 95
14846: PUSH
14847: LD_EXP 66
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 120
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 72
14874: ST_TO_ADDR
// if hurtUnits then
14875: LD_VAR 0 11
14879: IFFALSE 14940
// begin for i in sci do
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_VAR 0 9
14890: PUSH
14891: FOR_IN
14892: IFFALSE 14936
// if IsInUnit ( i ) then
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 310
14903: IFFALSE 14916
// ComExitBuilding ( i ) else
14905: LD_VAR 0 1
14909: PPUSH
14910: CALL_OW 122
14914: GO 14934
// ComHeal ( i , hurtUnits [ 1 ] ) ;
14916: LD_VAR 0 1
14920: PPUSH
14921: LD_VAR 0 11
14925: PUSH
14926: LD_INT 1
14928: ARRAY
14929: PPUSH
14930: CALL_OW 128
14934: GO 14891
14936: POP
14937: POP
// end else
14938: GO 14993
// if lab then
14940: LD_VAR 0 4
14944: IFFALSE 14993
// begin for i in sci do
14946: LD_ADDR_VAR 0 1
14950: PUSH
14951: LD_VAR 0 9
14955: PUSH
14956: FOR_IN
14957: IFFALSE 14991
// if not IsInUnit ( i ) then
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 310
14968: NOT
14969: IFFALSE 14989
// ComEnterUnit ( i , lab [ 1 ] ) ;
14971: LD_VAR 0 1
14975: PPUSH
14976: LD_VAR 0 4
14980: PUSH
14981: LD_INT 1
14983: ARRAY
14984: PPUSH
14985: CALL_OW 120
14989: GO 14956
14991: POP
14992: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
14993: LD_ADDR_VAR 0 5
14997: PUSH
14998: LD_EXP 59
15002: PPUSH
15003: LD_INT 25
15005: PUSH
15006: LD_INT 2
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 72
15017: ST_TO_ADDR
// if eng then
15018: LD_VAR 0 5
15022: IFFALSE 15807
// begin for i in eng do
15024: LD_ADDR_VAR 0 1
15028: PUSH
15029: LD_VAR 0 5
15033: PUSH
15034: FOR_IN
15035: IFFALSE 15805
// begin tag := GetTag ( i ) ;
15037: LD_ADDR_VAR 0 6
15041: PUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: CALL_OW 110
15051: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
15052: LD_VAR 0 1
15056: PPUSH
15057: CALL_OW 256
15061: PUSH
15062: LD_INT 800
15064: LESS
15065: PUSH
15066: LD_VAR 0 6
15070: PUSH
15071: LD_INT 1
15073: NONEQUAL
15074: AND
15075: IFFALSE 15125
// begin SetTag ( i , tHeal ) ;
15077: LD_VAR 0 1
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
15089: LD_VAR 0 1
15093: PPUSH
15094: LD_EXP 74
15098: PUSH
15099: LD_INT 1
15101: ARRAY
15102: PPUSH
15103: LD_EXP 74
15107: PUSH
15108: LD_INT 2
15110: ARRAY
15111: PPUSH
15112: CALL_OW 111
// AddComHold ( i ) ;
15116: LD_VAR 0 1
15120: PPUSH
15121: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15125: LD_VAR 0 6
15129: PUSH
15130: LD_INT 1
15132: EQUAL
15133: PUSH
15134: LD_VAR 0 1
15138: PPUSH
15139: CALL_OW 256
15143: PUSH
15144: LD_INT 1000
15146: EQUAL
15147: AND
15148: IFFALSE 15162
// SetTag ( i , 0 ) ;
15150: LD_VAR 0 1
15154: PPUSH
15155: LD_INT 0
15157: PPUSH
15158: CALL_OW 109
// if not tag then
15162: LD_VAR 0 6
15166: NOT
15167: IFFALSE 15339
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15169: LD_ADDR_VAR 0 3
15173: PUSH
15174: LD_EXP 66
15178: PPUSH
15179: LD_INT 57
15181: PUSH
15182: EMPTY
15183: LIST
15184: PPUSH
15185: CALL_OW 70
15189: ST_TO_ADDR
// if undone then
15190: LD_VAR 0 3
15194: IFFALSE 15216
// begin ComComplete ( i , undone [ 1 ] ) ;
15196: LD_VAR 0 1
15200: PPUSH
15201: LD_VAR 0 3
15205: PUSH
15206: LD_INT 1
15208: ARRAY
15209: PPUSH
15210: CALL 62796 0 2
// continue ;
15214: GO 15034
// end ; if cr or tmp or Count ( ruBuildings ) then
15216: LD_VAR 0 8
15220: PUSH
15221: LD_VAR 0 2
15225: OR
15226: PUSH
15227: LD_EXP 76
15231: PPUSH
15232: CALL 56698 0 1
15236: OR
15237: IFFALSE 15313
// begin if IsInUnit ( i ) then
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 310
15248: IFFALSE 15259
// ComExitBuilding ( i ) ;
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 122
// if tmp then
15259: LD_VAR 0 2
15263: IFFALSE 15279
// SetTag ( i , tRepair ) else
15265: LD_VAR 0 1
15269: PPUSH
15270: LD_INT 3
15272: PPUSH
15273: CALL_OW 109
15277: GO 15311
// if cr then
15279: LD_VAR 0 8
15283: IFFALSE 15299
// SetTag ( i , tCrates ) else
15285: LD_VAR 0 1
15289: PPUSH
15290: LD_INT 2
15292: PPUSH
15293: CALL_OW 109
15297: GO 15311
// SetTag ( i , tBuild ) ;
15299: LD_VAR 0 1
15303: PPUSH
15304: LD_INT 5
15306: PPUSH
15307: CALL_OW 109
// end else
15311: GO 15339
// if not IsInUnit ( i ) then
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL_OW 310
15322: NOT
15323: IFFALSE 15339
// ComEnterUnit ( i , ruBase ) ;
15325: LD_VAR 0 1
15329: PPUSH
15330: LD_EXP 68
15334: PPUSH
15335: CALL_OW 120
// end ; if tag = tRepair then
15339: LD_VAR 0 6
15343: PUSH
15344: LD_INT 3
15346: EQUAL
15347: IFFALSE 15453
// begin if IsInUnit ( i ) then
15349: LD_VAR 0 1
15353: PPUSH
15354: CALL_OW 310
15358: IFFALSE 15371
// begin ComExitBuilding ( i ) ;
15360: LD_VAR 0 1
15364: PPUSH
15365: CALL_OW 122
// continue ;
15369: GO 15034
// end ; if not tmp then
15371: LD_VAR 0 2
15375: NOT
15376: IFFALSE 15392
// begin SetTag ( i , 0 ) ;
15378: LD_VAR 0 1
15382: PPUSH
15383: LD_INT 0
15385: PPUSH
15386: CALL_OW 109
// continue ;
15390: GO 15034
// end ; if not HasTask ( i ) then
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 314
15401: NOT
15402: IFFALSE 15422
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15404: LD_VAR 0 1
15408: PPUSH
15409: LD_VAR 0 2
15413: PUSH
15414: LD_INT 1
15416: ARRAY
15417: PPUSH
15418: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_EXP 66
15431: PPUSH
15432: CALL_OW 308
15436: NOT
15437: IFFALSE 15453
// ComMoveToArea ( i , ruBaseArea ) ;
15439: LD_VAR 0 1
15443: PPUSH
15444: LD_EXP 66
15448: PPUSH
15449: CALL_OW 113
// end ; if tag = tBuild then
15453: LD_VAR 0 6
15457: PUSH
15458: LD_INT 5
15460: EQUAL
15461: IFFALSE 15660
// begin if IsInUnit ( i ) then
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 310
15472: IFFALSE 15485
// begin ComExitBuilding ( i ) ;
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 122
// continue ;
15483: GO 15034
// end ; if not Count ( ruBuildings ) then
15485: LD_EXP 76
15489: PPUSH
15490: CALL 56698 0 1
15494: NOT
15495: IFFALSE 15513
// begin SetTag ( i , 0 ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 0
15504: PPUSH
15505: CALL_OW 109
// continue ;
15509: GO 15034
// end else
15511: GO 15552
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
15513: LD_EXP 68
15517: PPUSH
15518: LD_EXP 76
15522: PUSH
15523: LD_INT 1
15525: ARRAY
15526: PUSH
15527: LD_INT 1
15529: ARRAY
15530: PPUSH
15531: CALL 96954 0 2
15535: NOT
15536: IFFALSE 15552
// begin SetTag ( i , 0 ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_INT 0
15545: PPUSH
15546: CALL_OW 109
// continue ;
15550: GO 15034
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15552: LD_ADDR_VAR 0 3
15556: PUSH
15557: LD_EXP 66
15561: PPUSH
15562: LD_INT 57
15564: PUSH
15565: EMPTY
15566: LIST
15567: PPUSH
15568: CALL_OW 70
15572: ST_TO_ADDR
// if undone then
15573: LD_VAR 0 3
15577: IFFALSE 15599
// begin ComComplete ( i , undone [ 1 ] ) ;
15579: LD_VAR 0 1
15583: PPUSH
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: PPUSH
15593: CALL 62796 0 2
// continue ;
15597: GO 15034
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
15599: LD_VAR 0 1
15603: PPUSH
15604: LD_EXP 76
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PUSH
15613: LD_INT 1
15615: ARRAY
15616: PPUSH
15617: LD_EXP 76
15621: PUSH
15622: LD_INT 1
15624: ARRAY
15625: PUSH
15626: LD_INT 2
15628: ARRAY
15629: PPUSH
15630: LD_EXP 76
15634: PUSH
15635: LD_INT 1
15637: ARRAY
15638: PUSH
15639: LD_INT 3
15641: ARRAY
15642: PPUSH
15643: LD_EXP 76
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: PUSH
15652: LD_INT 4
15654: ARRAY
15655: PPUSH
15656: CALL_OW 145
// end ; if tag = tCrates then
15660: LD_VAR 0 6
15664: PUSH
15665: LD_INT 2
15667: EQUAL
15668: IFFALSE 15803
// begin if IsInUnit ( i ) then
15670: LD_VAR 0 1
15674: PPUSH
15675: CALL_OW 310
15679: IFFALSE 15692
// begin ComExitBuilding ( i ) ;
15681: LD_VAR 0 1
15685: PPUSH
15686: CALL_OW 122
// continue ;
15690: GO 15034
// end ; if not cr then
15692: LD_VAR 0 8
15696: NOT
15697: IFFALSE 15713
// begin SetTag ( i , 0 ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: CALL_OW 109
// continue ;
15711: GO 15034
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
15713: LD_VAR 0 1
15717: PPUSH
15718: CALL_OW 314
15722: NOT
15723: PUSH
15724: LD_INT 81
15726: PUSH
15727: LD_INT 3
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 92
15736: PUSH
15737: LD_VAR 0 8
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PUSH
15746: LD_VAR 0 8
15750: PUSH
15751: LD_INT 2
15753: ARRAY
15754: PUSH
15755: LD_INT 12
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PPUSH
15768: CALL_OW 69
15772: NOT
15773: AND
15774: IFFALSE 15803
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
15776: LD_VAR 0 1
15780: PPUSH
15781: LD_VAR 0 8
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PPUSH
15790: LD_VAR 0 8
15794: PUSH
15795: LD_INT 2
15797: ARRAY
15798: PPUSH
15799: CALL_OW 117
// end ; end ;
15803: GO 15034
15805: POP
15806: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
15807: LD_ADDR_VAR 0 10
15811: PUSH
15812: LD_EXP 59
15816: PPUSH
15817: LD_INT 2
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 1
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 9
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 50
15847: PUSH
15848: EMPTY
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 72
15859: PUSH
15860: LD_EXP 61
15864: UNION
15865: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
15866: LD_ADDR_VAR 0 12
15870: PUSH
15871: LD_EXP 66
15875: PPUSH
15876: LD_INT 81
15878: PUSH
15879: LD_INT 3
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 70
15890: ST_TO_ADDR
// if sol then
15891: LD_VAR 0 10
15895: IFFALSE 16419
// begin if enemyInBase then
15897: LD_VAR 0 12
15901: IFFALSE 16044
// begin for i in sol do
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_VAR 0 10
15912: PUSH
15913: FOR_IN
15914: IFFALSE 16040
// begin tw := IsInUnit ( i ) ;
15916: LD_ADDR_VAR 0 7
15920: PUSH
15921: LD_VAR 0 1
15925: PPUSH
15926: CALL_OW 310
15930: ST_TO_ADDR
// if tw then
15931: LD_VAR 0 7
15935: IFFALSE 16014
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
15937: LD_VAR 0 7
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_INT 3
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 101
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: LD_INT 30
15967: PUSH
15968: LD_INT 32
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 30
15977: PUSH
15978: LD_INT 31
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: IN
16000: NOT
16001: IFFALSE 16012
// ComExitBuilding ( i ) ;
16003: LD_VAR 0 1
16007: PPUSH
16008: CALL_OW 122
// end else
16012: GO 16038
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
16014: LD_VAR 0 1
16018: PPUSH
16019: LD_VAR 0 12
16023: PPUSH
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 74
16033: PPUSH
16034: CALL_OW 115
// end ;
16038: GO 15913
16040: POP
16041: POP
// end else
16042: GO 16419
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
16044: LD_ADDR_VAR 0 13
16048: PUSH
16049: LD_EXP 66
16053: PPUSH
16054: LD_INT 3
16056: PUSH
16057: LD_INT 62
16059: PUSH
16060: EMPTY
16061: LIST
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: LD_INT 30
16072: PUSH
16073: LD_INT 32
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: LD_INT 4
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 30
16092: PUSH
16093: LD_INT 5
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 30
16102: PUSH
16103: LD_INT 31
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 70
16125: ST_TO_ADDR
// if empty then
16126: LD_VAR 0 13
16130: IFFALSE 16147
// empty := ReverseArray ( empty ) ;
16132: LD_ADDR_VAR 0 13
16136: PUSH
16137: LD_VAR 0 13
16141: PPUSH
16142: CALL 87574 0 1
16146: ST_TO_ADDR
// for i in sol do
16147: LD_ADDR_VAR 0 1
16151: PUSH
16152: LD_VAR 0 10
16156: PUSH
16157: FOR_IN
16158: IFFALSE 16417
// begin tag := GetTag ( i ) ;
16160: LD_ADDR_VAR 0 6
16164: PUSH
16165: LD_VAR 0 1
16169: PPUSH
16170: CALL_OW 110
16174: ST_TO_ADDR
// if tag = tMech then
16175: LD_VAR 0 6
16179: PUSH
16180: LD_INT 7
16182: EQUAL
16183: IFFALSE 16187
// continue ;
16185: GO 16157
// if GetLives ( i ) < 1000 and tag <> tHeal then
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 256
16196: PUSH
16197: LD_INT 1000
16199: LESS
16200: PUSH
16201: LD_VAR 0 6
16205: PUSH
16206: LD_INT 1
16208: NONEQUAL
16209: AND
16210: IFFALSE 16262
// begin SetTag ( i , tHeal ) ;
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
16224: LD_VAR 0 1
16228: PPUSH
16229: LD_EXP 74
16233: PUSH
16234: LD_INT 1
16236: ARRAY
16237: PPUSH
16238: LD_EXP 74
16242: PUSH
16243: LD_INT 2
16245: ARRAY
16246: PPUSH
16247: CALL_OW 111
// AddComHold ( i ) ;
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 200
// continue ;
16260: GO 16157
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 256
16271: PUSH
16272: LD_INT 1000
16274: EQUAL
16275: PUSH
16276: LD_VAR 0 6
16280: PUSH
16281: LD_INT 1
16283: EQUAL
16284: AND
16285: IFFALSE 16301
// begin SetTag ( i , 0 ) ;
16287: LD_VAR 0 1
16291: PPUSH
16292: LD_INT 0
16294: PPUSH
16295: CALL_OW 109
// continue ;
16299: GO 16157
// end ; if HasTask ( i ) then
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 314
16310: IFFALSE 16314
// continue ;
16312: GO 16157
// if not IsInUnit ( i ) and not tag and empty then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 310
16323: NOT
16324: PUSH
16325: LD_VAR 0 6
16329: NOT
16330: AND
16331: PUSH
16332: LD_VAR 0 13
16336: AND
16337: IFFALSE 16415
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16339: LD_VAR 0 1
16343: PPUSH
16344: LD_VAR 0 13
16348: PUSH
16349: LD_INT 1
16351: ARRAY
16352: PPUSH
16353: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
16357: LD_VAR 0 13
16361: PUSH
16362: LD_INT 1
16364: ARRAY
16365: PPUSH
16366: CALL_OW 266
16370: PUSH
16371: LD_INT 5
16373: EQUAL
16374: PUSH
16375: LD_INT 50
16377: PPUSH
16378: CALL_OW 13
16382: AND
16383: IFFALSE 16397
// AddComChangeProfession ( i , class_bazooker ) ;
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_INT 9
16392: PPUSH
16393: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
16397: LD_ADDR_VAR 0 13
16401: PUSH
16402: LD_VAR 0 13
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 3
16414: ST_TO_ADDR
// end ; end ;
16415: GO 16157
16417: POP
16418: POP
// end ; end ; end ;
16419: PPOPN 16
16421: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
16422: LD_EXP 15
16426: PUSH
16427: LD_EXP 60
16431: PPUSH
16432: CALL 56698 0 1
16436: AND
16437: IFFALSE 19019
16439: GO 16441
16441: DISABLE
16442: LD_INT 0
16444: PPUSH
16445: PPUSH
16446: PPUSH
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
// begin enable ;
16460: ENABLE
// if ruTech then
16461: LD_EXP 65
16465: IFFALSE 16619
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
16467: LD_ADDR_VAR 0 4
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 3
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 50
16484: PUSH
16485: EMPTY
16486: LIST
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: LD_INT 30
16493: PUSH
16494: LD_INT 6
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 30
16503: PUSH
16504: LD_INT 7
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 30
16513: PUSH
16514: LD_INT 8
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PPUSH
16532: CALL_OW 69
16536: ST_TO_ADDR
// if lab then
16537: LD_VAR 0 4
16541: IFFALSE 16619
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
16543: LD_VAR 0 4
16547: PUSH
16548: LD_INT 1
16550: ARRAY
16551: PPUSH
16552: CALL_OW 461
16556: PUSH
16557: LD_INT 2
16559: EQUAL
16560: IFFALSE 16619
// begin for i in ruTech do
16562: LD_ADDR_VAR 0 1
16566: PUSH
16567: LD_EXP 65
16571: PUSH
16572: FOR_IN
16573: IFFALSE 16617
// if CanBeResearched ( lab [ 1 ] , i ) then
16575: LD_VAR 0 4
16579: PUSH
16580: LD_INT 1
16582: ARRAY
16583: PPUSH
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 430
16593: IFFALSE 16615
// begin ComResearch ( lab [ 1 ] , i ) ;
16595: LD_VAR 0 4
16599: PUSH
16600: LD_INT 1
16602: ARRAY
16603: PPUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 124
// break ;
16613: GO 16617
// end ;
16615: GO 16572
16617: POP
16618: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
16619: LD_ADDR_VAR 0 14
16623: PUSH
16624: LD_EXP 67
16628: PPUSH
16629: LD_INT 22
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 30
16641: PUSH
16642: LD_INT 3
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 50
16651: PUSH
16652: EMPTY
16653: LIST
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: PPUSH
16660: CALL_OW 70
16664: ST_TO_ADDR
// if fac then
16665: LD_VAR 0 14
16669: IFFALSE 17264
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
16671: LD_EXP 64
16675: PPUSH
16676: LD_INT 3
16678: PUSH
16679: LD_INT 60
16681: PUSH
16682: EMPTY
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: LD_INT 25
16694: PUSH
16695: LD_INT 3
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PPUSH
16710: CALL_OW 72
16714: IFFALSE 16855
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
16716: LD_ADDR_VAR 0 1
16720: PUSH
16721: LD_EXP 64
16725: PPUSH
16726: LD_INT 3
16728: PUSH
16729: LD_INT 60
16731: PUSH
16732: EMPTY
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 3
16741: PUSH
16742: LD_INT 25
16744: PUSH
16745: LD_INT 3
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PPUSH
16760: CALL_OW 72
16764: PUSH
16765: FOR_IN
16766: IFFALSE 16853
// begin SetTag ( i , tMech ) ;
16768: LD_VAR 0 1
16772: PPUSH
16773: LD_INT 7
16775: PPUSH
16776: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 310
16789: PUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 310
16799: PUSH
16800: LD_VAR 0 14
16804: PUSH
16805: LD_INT 1
16807: ARRAY
16808: NONEQUAL
16809: AND
16810: IFFALSE 16821
// ComExitBuilding ( i ) ;
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
16821: LD_VAR 0 1
16825: PPUSH
16826: LD_VAR 0 14
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: PPUSH
16835: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
16839: LD_VAR 0 1
16843: PPUSH
16844: LD_INT 3
16846: PPUSH
16847: CALL_OW 183
// end ;
16851: GO 16765
16853: POP
16854: POP
// end ; if UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
16855: LD_EXP 64
16859: PPUSH
16860: LD_INT 25
16862: PUSH
16863: LD_INT 3
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 3
16872: PUSH
16873: LD_INT 54
16875: PUSH
16876: EMPTY
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 120
16885: PUSH
16886: LD_INT 7
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 50
16895: PUSH
16896: EMPTY
16897: LIST
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PPUSH
16905: CALL_OW 72
16909: IFFALSE 16996
// begin for i in UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
16911: LD_ADDR_VAR 0 1
16915: PUSH
16916: LD_EXP 64
16920: PPUSH
16921: LD_INT 25
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 3
16933: PUSH
16934: LD_INT 54
16936: PUSH
16937: EMPTY
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 120
16946: PUSH
16947: LD_INT 7
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 50
16956: PUSH
16957: EMPTY
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: PPUSH
16966: CALL_OW 72
16970: PUSH
16971: FOR_IN
16972: IFFALSE 16994
// ComEnterUnit ( i , fac [ 1 ] ) ;
16974: LD_VAR 0 1
16978: PPUSH
16979: LD_VAR 0 14
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: CALL_OW 120
16992: GO 16971
16994: POP
16995: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
16996: LD_VAR 0 14
17000: PUSH
17001: LD_INT 1
17003: ARRAY
17004: PPUSH
17005: CALL_OW 461
17009: PUSH
17010: LD_INT 2
17012: EQUAL
17013: IFFALSE 17264
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
17015: LD_ADDR_VAR 0 15
17019: PUSH
17020: LD_EXP 67
17024: PPUSH
17025: LD_INT 2
17027: PUSH
17028: LD_INT 30
17030: PUSH
17031: LD_INT 32
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 30
17040: PUSH
17041: LD_INT 33
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 35
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 70
17071: ST_TO_ADDR
// if emptyTowers then
17072: LD_VAR 0 15
17076: IFFALSE 17126
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
17078: LD_ADDR_VAR 0 16
17082: PUSH
17083: LD_VAR 0 15
17087: PUSH
17088: LD_INT 1
17090: ARRAY
17091: PPUSH
17092: LD_EXP 67
17096: PPUSH
17097: CALL 64943 0 2
17101: ST_TO_ADDR
// if weapon then
17102: LD_VAR 0 16
17106: IFFALSE 17126
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
17108: LD_VAR 0 15
17112: PUSH
17113: LD_INT 1
17115: ARRAY
17116: PPUSH
17117: LD_VAR 0 16
17121: PPUSH
17122: CALL_OW 148
// end ; if ruConstructList2 then
17126: LD_EXP 71
17130: IFFALSE 17264
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
17132: LD_VAR 0 14
17136: PUSH
17137: LD_INT 1
17139: ARRAY
17140: PPUSH
17141: LD_EXP 71
17145: PUSH
17146: LD_INT 1
17148: ARRAY
17149: PUSH
17150: LD_INT 1
17152: ARRAY
17153: PPUSH
17154: LD_EXP 71
17158: PUSH
17159: LD_INT 1
17161: ARRAY
17162: PUSH
17163: LD_INT 2
17165: ARRAY
17166: PPUSH
17167: LD_EXP 71
17171: PUSH
17172: LD_INT 1
17174: ARRAY
17175: PUSH
17176: LD_INT 3
17178: ARRAY
17179: PPUSH
17180: LD_EXP 71
17184: PUSH
17185: LD_INT 1
17187: ARRAY
17188: PUSH
17189: LD_INT 4
17191: ARRAY
17192: PPUSH
17193: CALL_OW 448
17197: IFFALSE 17264
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
17199: LD_VAR 0 14
17203: PUSH
17204: LD_INT 1
17206: ARRAY
17207: PPUSH
17208: LD_EXP 71
17212: PUSH
17213: LD_INT 1
17215: ARRAY
17216: PUSH
17217: LD_INT 1
17219: ARRAY
17220: PPUSH
17221: LD_EXP 71
17225: PUSH
17226: LD_INT 1
17228: ARRAY
17229: PUSH
17230: LD_INT 2
17232: ARRAY
17233: PPUSH
17234: LD_EXP 71
17238: PUSH
17239: LD_INT 1
17241: ARRAY
17242: PUSH
17243: LD_INT 3
17245: ARRAY
17246: PPUSH
17247: LD_EXP 71
17251: PUSH
17252: LD_INT 1
17254: ARRAY
17255: PUSH
17256: LD_INT 4
17258: ARRAY
17259: PPUSH
17260: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17264: LD_ADDR_VAR 0 2
17268: PUSH
17269: LD_EXP 67
17273: PPUSH
17274: LD_INT 21
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 3
17286: PUSH
17287: LD_INT 57
17289: PUSH
17290: EMPTY
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 3
17299: PUSH
17300: LD_INT 24
17302: PUSH
17303: LD_INT 1000
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 70
17323: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
17324: LD_ADDR_VAR 0 8
17328: PUSH
17329: LD_EXP 73
17333: PPUSH
17334: CALL_OW 435
17338: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
17339: LD_ADDR_VAR 0 9
17343: PUSH
17344: LD_EXP 60
17348: PPUSH
17349: LD_INT 25
17351: PUSH
17352: LD_INT 4
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 50
17361: PUSH
17362: EMPTY
17363: LIST
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 72
17373: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: LD_EXP 67
17383: PPUSH
17384: LD_INT 2
17386: PUSH
17387: LD_INT 30
17389: PUSH
17390: LD_INT 6
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 30
17399: PUSH
17400: LD_INT 7
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 30
17409: PUSH
17410: LD_INT 8
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: PPUSH
17423: CALL_OW 70
17427: ST_TO_ADDR
// if sci then
17428: LD_VAR 0 9
17432: IFFALSE 17593
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
17434: LD_ADDR_VAR 0 11
17438: PUSH
17439: LD_EXP 60
17443: PPUSH
17444: LD_INT 95
17446: PUSH
17447: LD_EXP 67
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 120
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PPUSH
17470: CALL_OW 72
17474: ST_TO_ADDR
// if hurtUnits then
17475: LD_VAR 0 11
17479: IFFALSE 17540
// begin for i in sci do
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: LD_VAR 0 9
17490: PUSH
17491: FOR_IN
17492: IFFALSE 17536
// if IsInUnit ( i ) then
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 310
17503: IFFALSE 17516
// ComExitBuilding ( i ) else
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 122
17514: GO 17534
// ComHeal ( i , hurtUnits [ 1 ] ) ;
17516: LD_VAR 0 1
17520: PPUSH
17521: LD_VAR 0 11
17525: PUSH
17526: LD_INT 1
17528: ARRAY
17529: PPUSH
17530: CALL_OW 128
17534: GO 17491
17536: POP
17537: POP
// end else
17538: GO 17593
// if lab then
17540: LD_VAR 0 4
17544: IFFALSE 17593
// begin for i in sci do
17546: LD_ADDR_VAR 0 1
17550: PUSH
17551: LD_VAR 0 9
17555: PUSH
17556: FOR_IN
17557: IFFALSE 17591
// if not IsInUnit ( i ) then
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 310
17568: NOT
17569: IFFALSE 17589
// ComEnterUnit ( i , lab [ 1 ] ) ;
17571: LD_VAR 0 1
17575: PPUSH
17576: LD_VAR 0 4
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: CALL_OW 120
17589: GO 17556
17591: POP
17592: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
17593: LD_ADDR_VAR 0 5
17597: PUSH
17598: LD_EXP 60
17602: PPUSH
17603: LD_INT 25
17605: PUSH
17606: LD_INT 2
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: CALL_OW 72
17617: ST_TO_ADDR
// if eng then
17618: LD_VAR 0 5
17622: IFFALSE 18407
// begin for i in eng do
17624: LD_ADDR_VAR 0 1
17628: PUSH
17629: LD_VAR 0 5
17633: PUSH
17634: FOR_IN
17635: IFFALSE 18405
// begin tag := GetTag ( i ) ;
17637: LD_ADDR_VAR 0 6
17641: PUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: CALL_OW 110
17651: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 256
17661: PUSH
17662: LD_INT 800
17664: LESS
17665: PUSH
17666: LD_VAR 0 6
17670: PUSH
17671: LD_INT 1
17673: NONEQUAL
17674: AND
17675: IFFALSE 17725
// begin SetTag ( i , tHeal ) ;
17677: LD_VAR 0 1
17681: PPUSH
17682: LD_INT 1
17684: PPUSH
17685: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17689: LD_VAR 0 1
17693: PPUSH
17694: LD_EXP 75
17698: PUSH
17699: LD_INT 1
17701: ARRAY
17702: PPUSH
17703: LD_EXP 75
17707: PUSH
17708: LD_INT 2
17710: ARRAY
17711: PPUSH
17712: CALL_OW 111
// AddComHold ( i ) ;
17716: LD_VAR 0 1
17720: PPUSH
17721: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
17725: LD_VAR 0 6
17729: PUSH
17730: LD_INT 1
17732: EQUAL
17733: PUSH
17734: LD_VAR 0 1
17738: PPUSH
17739: CALL_OW 256
17743: PUSH
17744: LD_INT 1000
17746: EQUAL
17747: AND
17748: IFFALSE 17762
// SetTag ( i , 0 ) ;
17750: LD_VAR 0 1
17754: PPUSH
17755: LD_INT 0
17757: PPUSH
17758: CALL_OW 109
// if not tag then
17762: LD_VAR 0 6
17766: NOT
17767: IFFALSE 17939
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
17769: LD_ADDR_VAR 0 3
17773: PUSH
17774: LD_EXP 67
17778: PPUSH
17779: LD_INT 57
17781: PUSH
17782: EMPTY
17783: LIST
17784: PPUSH
17785: CALL_OW 70
17789: ST_TO_ADDR
// if undone then
17790: LD_VAR 0 3
17794: IFFALSE 17816
// begin ComComplete ( i , undone [ 1 ] ) ;
17796: LD_VAR 0 1
17800: PPUSH
17801: LD_VAR 0 3
17805: PUSH
17806: LD_INT 1
17808: ARRAY
17809: PPUSH
17810: CALL 62796 0 2
// continue ;
17814: GO 17634
// end ; if cr or tmp or Count ( ruBuildings2 ) then
17816: LD_VAR 0 8
17820: PUSH
17821: LD_VAR 0 2
17825: OR
17826: PUSH
17827: LD_EXP 77
17831: PPUSH
17832: CALL 56698 0 1
17836: OR
17837: IFFALSE 17913
// begin if IsInUnit ( i ) then
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 310
17848: IFFALSE 17859
// ComExitBuilding ( i ) ;
17850: LD_VAR 0 1
17854: PPUSH
17855: CALL_OW 122
// if tmp then
17859: LD_VAR 0 2
17863: IFFALSE 17879
// SetTag ( i , tRepair ) else
17865: LD_VAR 0 1
17869: PPUSH
17870: LD_INT 3
17872: PPUSH
17873: CALL_OW 109
17877: GO 17911
// if cr then
17879: LD_VAR 0 8
17883: IFFALSE 17899
// SetTag ( i , tCrates ) else
17885: LD_VAR 0 1
17889: PPUSH
17890: LD_INT 2
17892: PPUSH
17893: CALL_OW 109
17897: GO 17911
// SetTag ( i , tBuild ) ;
17899: LD_VAR 0 1
17903: PPUSH
17904: LD_INT 5
17906: PPUSH
17907: CALL_OW 109
// end else
17911: GO 17939
// if not IsInUnit ( i ) then
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 310
17922: NOT
17923: IFFALSE 17939
// ComEnterUnit ( i , ruBase2 ) ;
17925: LD_VAR 0 1
17929: PPUSH
17930: LD_EXP 69
17934: PPUSH
17935: CALL_OW 120
// end ; if tag = tRepair then
17939: LD_VAR 0 6
17943: PUSH
17944: LD_INT 3
17946: EQUAL
17947: IFFALSE 18053
// begin if IsInUnit ( i ) then
17949: LD_VAR 0 1
17953: PPUSH
17954: CALL_OW 310
17958: IFFALSE 17971
// begin ComExitBuilding ( i ) ;
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 122
// continue ;
17969: GO 17634
// end ; if not tmp then
17971: LD_VAR 0 2
17975: NOT
17976: IFFALSE 17992
// begin SetTag ( i , 0 ) ;
17978: LD_VAR 0 1
17982: PPUSH
17983: LD_INT 0
17985: PPUSH
17986: CALL_OW 109
// continue ;
17990: GO 17634
// end ; if not HasTask ( i ) then
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 314
18001: NOT
18002: IFFALSE 18022
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
18004: LD_VAR 0 1
18008: PPUSH
18009: LD_VAR 0 2
18013: PUSH
18014: LD_INT 1
18016: ARRAY
18017: PPUSH
18018: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_EXP 67
18031: PPUSH
18032: CALL_OW 308
18036: NOT
18037: IFFALSE 18053
// ComMoveToArea ( i , ruBaseArea2 ) ;
18039: LD_VAR 0 1
18043: PPUSH
18044: LD_EXP 67
18048: PPUSH
18049: CALL_OW 113
// end ; if tag = tBuild then
18053: LD_VAR 0 6
18057: PUSH
18058: LD_INT 5
18060: EQUAL
18061: IFFALSE 18260
// begin if IsInUnit ( i ) then
18063: LD_VAR 0 1
18067: PPUSH
18068: CALL_OW 310
18072: IFFALSE 18085
// begin ComExitBuilding ( i ) ;
18074: LD_VAR 0 1
18078: PPUSH
18079: CALL_OW 122
// continue ;
18083: GO 17634
// end ; if not Count ( ruBuildings2 ) then
18085: LD_EXP 77
18089: PPUSH
18090: CALL 56698 0 1
18094: NOT
18095: IFFALSE 18113
// begin SetTag ( i , 0 ) ;
18097: LD_VAR 0 1
18101: PPUSH
18102: LD_INT 0
18104: PPUSH
18105: CALL_OW 109
// continue ;
18109: GO 17634
// end else
18111: GO 18152
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
18113: LD_EXP 69
18117: PPUSH
18118: LD_EXP 77
18122: PUSH
18123: LD_INT 1
18125: ARRAY
18126: PUSH
18127: LD_INT 1
18129: ARRAY
18130: PPUSH
18131: CALL 96954 0 2
18135: NOT
18136: IFFALSE 18152
// begin SetTag ( i , 0 ) ;
18138: LD_VAR 0 1
18142: PPUSH
18143: LD_INT 0
18145: PPUSH
18146: CALL_OW 109
// continue ;
18150: GO 17634
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
18152: LD_ADDR_VAR 0 3
18156: PUSH
18157: LD_EXP 67
18161: PPUSH
18162: LD_INT 57
18164: PUSH
18165: EMPTY
18166: LIST
18167: PPUSH
18168: CALL_OW 70
18172: ST_TO_ADDR
// if undone then
18173: LD_VAR 0 3
18177: IFFALSE 18199
// begin ComComplete ( i , undone [ 1 ] ) ;
18179: LD_VAR 0 1
18183: PPUSH
18184: LD_VAR 0 3
18188: PUSH
18189: LD_INT 1
18191: ARRAY
18192: PPUSH
18193: CALL 62796 0 2
// continue ;
18197: GO 17634
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
18199: LD_VAR 0 1
18203: PPUSH
18204: LD_EXP 77
18208: PUSH
18209: LD_INT 1
18211: ARRAY
18212: PUSH
18213: LD_INT 1
18215: ARRAY
18216: PPUSH
18217: LD_EXP 77
18221: PUSH
18222: LD_INT 1
18224: ARRAY
18225: PUSH
18226: LD_INT 2
18228: ARRAY
18229: PPUSH
18230: LD_EXP 77
18234: PUSH
18235: LD_INT 1
18237: ARRAY
18238: PUSH
18239: LD_INT 3
18241: ARRAY
18242: PPUSH
18243: LD_EXP 77
18247: PUSH
18248: LD_INT 1
18250: ARRAY
18251: PUSH
18252: LD_INT 4
18254: ARRAY
18255: PPUSH
18256: CALL_OW 145
// end ; if tag = tCrates then
18260: LD_VAR 0 6
18264: PUSH
18265: LD_INT 2
18267: EQUAL
18268: IFFALSE 18403
// begin if IsInUnit ( i ) then
18270: LD_VAR 0 1
18274: PPUSH
18275: CALL_OW 310
18279: IFFALSE 18292
// begin ComExitBuilding ( i ) ;
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 122
// continue ;
18290: GO 17634
// end ; if not cr then
18292: LD_VAR 0 8
18296: NOT
18297: IFFALSE 18313
// begin SetTag ( i , 0 ) ;
18299: LD_VAR 0 1
18303: PPUSH
18304: LD_INT 0
18306: PPUSH
18307: CALL_OW 109
// continue ;
18311: GO 17634
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
18313: LD_VAR 0 1
18317: PPUSH
18318: CALL_OW 314
18322: NOT
18323: PUSH
18324: LD_INT 81
18326: PUSH
18327: LD_INT 3
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 92
18336: PUSH
18337: LD_VAR 0 8
18341: PUSH
18342: LD_INT 1
18344: ARRAY
18345: PUSH
18346: LD_VAR 0 8
18350: PUSH
18351: LD_INT 2
18353: ARRAY
18354: PUSH
18355: LD_INT 12
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: NOT
18373: AND
18374: IFFALSE 18403
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
18376: LD_VAR 0 1
18380: PPUSH
18381: LD_VAR 0 8
18385: PUSH
18386: LD_INT 1
18388: ARRAY
18389: PPUSH
18390: LD_VAR 0 8
18394: PUSH
18395: LD_INT 2
18397: ARRAY
18398: PPUSH
18399: CALL_OW 117
// end ; end ;
18403: GO 17634
18405: POP
18406: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
18407: LD_ADDR_VAR 0 10
18411: PUSH
18412: LD_EXP 60
18416: PPUSH
18417: LD_INT 2
18419: PUSH
18420: LD_INT 25
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 25
18432: PUSH
18433: LD_INT 9
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 50
18447: PUSH
18448: EMPTY
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 72
18459: PUSH
18460: LD_EXP 62
18464: UNION
18465: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18466: LD_ADDR_VAR 0 12
18470: PUSH
18471: LD_EXP 67
18475: PPUSH
18476: LD_INT 81
18478: PUSH
18479: LD_INT 3
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PPUSH
18486: CALL_OW 70
18490: ST_TO_ADDR
// if sol then
18491: LD_VAR 0 10
18495: IFFALSE 19019
// begin if enemyInBase then
18497: LD_VAR 0 12
18501: IFFALSE 18644
// begin for i in sol do
18503: LD_ADDR_VAR 0 1
18507: PUSH
18508: LD_VAR 0 10
18512: PUSH
18513: FOR_IN
18514: IFFALSE 18640
// begin tw := IsInUnit ( i ) ;
18516: LD_ADDR_VAR 0 7
18520: PUSH
18521: LD_VAR 0 1
18525: PPUSH
18526: CALL_OW 310
18530: ST_TO_ADDR
// if tw then
18531: LD_VAR 0 7
18535: IFFALSE 18614
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
18537: LD_VAR 0 7
18541: PUSH
18542: LD_INT 22
18544: PUSH
18545: LD_INT 3
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 101
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 2
18564: PUSH
18565: LD_INT 30
18567: PUSH
18568: LD_INT 32
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 30
18577: PUSH
18578: LD_INT 31
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: PPUSH
18595: CALL_OW 69
18599: IN
18600: NOT
18601: IFFALSE 18612
// ComExitBuilding ( i ) ;
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 122
// end else
18612: GO 18638
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
18614: LD_VAR 0 1
18618: PPUSH
18619: LD_VAR 0 12
18623: PPUSH
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 74
18633: PPUSH
18634: CALL_OW 115
// end ;
18638: GO 18513
18640: POP
18641: POP
// end else
18642: GO 19019
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
18644: LD_ADDR_VAR 0 13
18648: PUSH
18649: LD_EXP 67
18653: PPUSH
18654: LD_INT 3
18656: PUSH
18657: LD_INT 62
18659: PUSH
18660: EMPTY
18661: LIST
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 30
18672: PUSH
18673: LD_INT 32
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 30
18682: PUSH
18683: LD_INT 4
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 30
18692: PUSH
18693: LD_INT 5
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 30
18702: PUSH
18703: LD_INT 31
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PPUSH
18721: CALL_OW 70
18725: ST_TO_ADDR
// if empty then
18726: LD_VAR 0 13
18730: IFFALSE 18747
// empty := ReverseArray ( empty ) ;
18732: LD_ADDR_VAR 0 13
18736: PUSH
18737: LD_VAR 0 13
18741: PPUSH
18742: CALL 87574 0 1
18746: ST_TO_ADDR
// for i in sol do
18747: LD_ADDR_VAR 0 1
18751: PUSH
18752: LD_VAR 0 10
18756: PUSH
18757: FOR_IN
18758: IFFALSE 19017
// begin tag := GetTag ( i ) ;
18760: LD_ADDR_VAR 0 6
18764: PUSH
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL_OW 110
18774: ST_TO_ADDR
// if tag = tMech then
18775: LD_VAR 0 6
18779: PUSH
18780: LD_INT 7
18782: EQUAL
18783: IFFALSE 18787
// continue ;
18785: GO 18757
// if GetLives ( i ) < 1000 and tag <> tHeal then
18787: LD_VAR 0 1
18791: PPUSH
18792: CALL_OW 256
18796: PUSH
18797: LD_INT 1000
18799: LESS
18800: PUSH
18801: LD_VAR 0 6
18805: PUSH
18806: LD_INT 1
18808: NONEQUAL
18809: AND
18810: IFFALSE 18862
// begin SetTag ( i , tHeal ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_INT 1
18819: PPUSH
18820: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
18824: LD_VAR 0 1
18828: PPUSH
18829: LD_EXP 75
18833: PUSH
18834: LD_INT 1
18836: ARRAY
18837: PPUSH
18838: LD_EXP 75
18842: PUSH
18843: LD_INT 2
18845: ARRAY
18846: PPUSH
18847: CALL_OW 111
// AddComHold ( i ) ;
18851: LD_VAR 0 1
18855: PPUSH
18856: CALL_OW 200
// continue ;
18860: GO 18757
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
18862: LD_VAR 0 1
18866: PPUSH
18867: CALL_OW 256
18871: PUSH
18872: LD_INT 1000
18874: EQUAL
18875: PUSH
18876: LD_VAR 0 6
18880: PUSH
18881: LD_INT 1
18883: EQUAL
18884: AND
18885: IFFALSE 18901
// begin SetTag ( i , 0 ) ;
18887: LD_VAR 0 1
18891: PPUSH
18892: LD_INT 0
18894: PPUSH
18895: CALL_OW 109
// continue ;
18899: GO 18757
// end ; if HasTask ( i ) then
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL_OW 314
18910: IFFALSE 18914
// continue ;
18912: GO 18757
// if not IsInUnit ( i ) and not tag and empty then
18914: LD_VAR 0 1
18918: PPUSH
18919: CALL_OW 310
18923: NOT
18924: PUSH
18925: LD_VAR 0 6
18929: NOT
18930: AND
18931: PUSH
18932: LD_VAR 0 13
18936: AND
18937: IFFALSE 19015
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: LD_VAR 0 13
18948: PUSH
18949: LD_INT 1
18951: ARRAY
18952: PPUSH
18953: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
18957: LD_VAR 0 13
18961: PUSH
18962: LD_INT 1
18964: ARRAY
18965: PPUSH
18966: CALL_OW 266
18970: PUSH
18971: LD_INT 5
18973: EQUAL
18974: PUSH
18975: LD_INT 50
18977: PPUSH
18978: CALL_OW 13
18982: AND
18983: IFFALSE 18997
// AddComChangeProfession ( i , class_bazooker ) ;
18985: LD_VAR 0 1
18989: PPUSH
18990: LD_INT 9
18992: PPUSH
18993: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
18997: LD_ADDR_VAR 0 13
19001: PUSH
19002: LD_VAR 0 13
19006: PPUSH
19007: LD_INT 1
19009: PPUSH
19010: CALL_OW 3
19014: ST_TO_ADDR
// end ; end ;
19015: GO 18757
19017: POP
19018: POP
// end ; end ; end ;
19019: PPOPN 16
19021: END
// every 0 0$1 trigger ruTanks and ruActiveAttacks do var i , mech , enemy ;
19022: LD_EXP 79
19026: PUSH
19027: LD_EXP 22
19031: AND
19032: IFFALSE 19599
19034: GO 19036
19036: DISABLE
19037: LD_INT 0
19039: PPUSH
19040: PPUSH
19041: PPUSH
// begin enable ;
19042: ENABLE
// if not ruTanks then
19043: LD_EXP 79
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19599
// for i in ruTanks do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_EXP 79
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19597
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 302
19074: NOT
19075: PUSH
19076: LD_VAR 0 1
19080: PPUSH
19081: CALL_OW 255
19085: PUSH
19086: LD_INT 3
19088: NONEQUAL
19089: OR
19090: IFFALSE 19110
// begin ruTanks := ruTanks diff i ;
19092: LD_ADDR_EXP 79
19096: PUSH
19097: LD_EXP 79
19101: PUSH
19102: LD_VAR 0 1
19106: DIFF
19107: ST_TO_ADDR
// continue ;
19108: GO 19062
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19110: LD_VAR 0 1
19114: PPUSH
19115: CALL_OW 110
19119: NOT
19120: PUSH
19121: LD_VAR 0 1
19125: PPUSH
19126: CALL_OW 110
19130: PUSH
19131: LD_INT 0
19133: EQUAL
19134: OR
19135: IFFALSE 19308
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 262
19146: PUSH
19147: LD_INT 1
19149: EQUAL
19150: PUSH
19151: LD_VAR 0 1
19155: PPUSH
19156: CALL_OW 261
19160: PUSH
19161: LD_INT 50
19163: LESS
19164: AND
19165: PUSH
19166: LD_EXP 68
19170: PPUSH
19171: CALL_OW 302
19175: AND
19176: IFFALSE 19263
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
19178: LD_VAR 0 1
19182: PPUSH
19183: LD_EXP 68
19187: PPUSH
19188: CALL_OW 250
19192: PPUSH
19193: LD_EXP 68
19197: PPUSH
19198: CALL_OW 251
19202: PPUSH
19203: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19207: LD_INT 35
19209: PPUSH
19210: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
19214: LD_VAR 0 1
19218: PPUSH
19219: LD_EXP 68
19223: PPUSH
19224: CALL_OW 250
19228: PPUSH
19229: LD_EXP 68
19233: PPUSH
19234: CALL_OW 251
19238: PPUSH
19239: CALL_OW 297
19243: PUSH
19244: LD_INT 6
19246: LESS
19247: IFFALSE 19207
// SetFuel ( i , 100 ) ;
19249: LD_VAR 0 1
19253: PPUSH
19254: LD_INT 100
19256: PPUSH
19257: CALL_OW 240
// end else
19261: GO 19308
// if not IsInArea ( i , ruParkingArea ) then
19263: LD_VAR 0 1
19267: PPUSH
19268: LD_EXP 82
19272: PPUSH
19273: CALL_OW 308
19277: NOT
19278: IFFALSE 19296
// ComMoveToArea ( i , ruParkingArea ) else
19280: LD_VAR 0 1
19284: PPUSH
19285: LD_EXP 82
19289: PPUSH
19290: CALL_OW 113
19294: GO 19308
// SetTag ( i , tParking ) ;
19296: LD_VAR 0 1
19300: PPUSH
19301: LD_INT 12
19303: PPUSH
19304: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19308: LD_VAR 0 1
19312: PPUSH
19313: CALL_OW 110
19317: PUSH
19318: LD_INT 12
19320: EQUAL
19321: IFFALSE 19451
// begin if GetLives ( i ) < 650 then
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL_OW 256
19332: PUSH
19333: LD_INT 650
19335: LESS
19336: IFFALSE 19428
// begin if not IsDrivenBy ( i ) then
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 311
19347: NOT
19348: IFFALSE 19352
// continue ;
19350: GO 19062
// mech := IsDrivenBy ( i ) ;
19352: LD_ADDR_VAR 0 2
19356: PUSH
19357: LD_VAR 0 1
19361: PPUSH
19362: CALL_OW 311
19366: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19367: LD_VAR 0 2
19371: PPUSH
19372: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19376: LD_VAR 0 2
19380: PPUSH
19381: LD_VAR 0 1
19385: PPUSH
19386: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19390: LD_INT 35
19392: PPUSH
19393: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19397: LD_VAR 0 1
19401: PPUSH
19402: CALL_OW 256
19406: PUSH
19407: LD_INT 1000
19409: EQUAL
19410: IFFALSE 19390
// ComEnterUnit ( mech , i ) ;
19412: LD_VAR 0 2
19416: PPUSH
19417: LD_VAR 0 1
19421: PPUSH
19422: CALL_OW 120
// end else
19426: GO 19451
// if IsDrivenBy ( i ) then
19428: LD_VAR 0 1
19432: PPUSH
19433: CALL_OW 311
19437: IFFALSE 19451
// SetTag ( i , tAttack ) ;
19439: LD_VAR 0 1
19443: PPUSH
19444: LD_INT 13
19446: PPUSH
19447: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
19451: LD_VAR 0 1
19455: PPUSH
19456: CALL_OW 110
19460: PUSH
19461: LD_INT 13
19463: EQUAL
19464: IFFALSE 19595
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
19466: LD_ADDR_VAR 0 3
19470: PUSH
19471: LD_EXP 66
19475: PPUSH
19476: LD_INT 81
19478: PUSH
19479: LD_INT 3
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PPUSH
19486: CALL_OW 70
19490: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19491: LD_VAR 0 1
19495: PPUSH
19496: CALL_OW 256
19500: PUSH
19501: LD_INT 650
19503: LESS
19504: IFFALSE 19529
// begin ComStop ( i ) ;
19506: LD_VAR 0 1
19510: PPUSH
19511: CALL_OW 141
// SetTag ( i , 0 ) ;
19515: LD_VAR 0 1
19519: PPUSH
19520: LD_INT 0
19522: PPUSH
19523: CALL_OW 109
// continue ;
19527: GO 19062
// end ; if enemy then
19529: LD_VAR 0 3
19533: IFFALSE 19573
// begin if not HasTask ( i ) then
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL_OW 314
19544: NOT
19545: IFFALSE 19571
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19547: LD_VAR 0 1
19551: PPUSH
19552: LD_VAR 0 3
19556: PPUSH
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 74
19566: PPUSH
19567: CALL_OW 115
// end else
19571: GO 19595
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
19573: LD_VAR 0 1
19577: PPUSH
19578: LD_INT 105
19580: PUSH
19581: LD_INT 35
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: EMPTY
19589: LIST
19590: PPUSH
19591: CALL 94891 0 2
// end ; end ;
19595: GO 19062
19597: POP
19598: POP
// end ;
19599: PPOPN 3
19601: END
// every 0 0$1 trigger ruTanks2 and ruActiveAttacks do var i , mech , enemy ;
19602: LD_EXP 80
19606: PUSH
19607: LD_EXP 22
19611: AND
19612: IFFALSE 20179
19614: GO 19616
19616: DISABLE
19617: LD_INT 0
19619: PPUSH
19620: PPUSH
19621: PPUSH
// begin enable ;
19622: ENABLE
// if not ruTanks2 then
19623: LD_EXP 80
19627: NOT
19628: IFFALSE 19632
// exit ;
19630: GO 20179
// for i in ruTanks2 do
19632: LD_ADDR_VAR 0 1
19636: PUSH
19637: LD_EXP 80
19641: PUSH
19642: FOR_IN
19643: IFFALSE 20177
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19645: LD_VAR 0 1
19649: PPUSH
19650: CALL_OW 302
19654: NOT
19655: PUSH
19656: LD_VAR 0 1
19660: PPUSH
19661: CALL_OW 255
19665: PUSH
19666: LD_INT 3
19668: NONEQUAL
19669: OR
19670: IFFALSE 19690
// begin ruTanks := ruTanks diff i ;
19672: LD_ADDR_EXP 79
19676: PUSH
19677: LD_EXP 79
19681: PUSH
19682: LD_VAR 0 1
19686: DIFF
19687: ST_TO_ADDR
// continue ;
19688: GO 19642
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19690: LD_VAR 0 1
19694: PPUSH
19695: CALL_OW 110
19699: NOT
19700: PUSH
19701: LD_VAR 0 1
19705: PPUSH
19706: CALL_OW 110
19710: PUSH
19711: LD_INT 0
19713: EQUAL
19714: OR
19715: IFFALSE 19888
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
19717: LD_VAR 0 1
19721: PPUSH
19722: CALL_OW 262
19726: PUSH
19727: LD_INT 1
19729: EQUAL
19730: PUSH
19731: LD_VAR 0 1
19735: PPUSH
19736: CALL_OW 261
19740: PUSH
19741: LD_INT 50
19743: LESS
19744: AND
19745: PUSH
19746: LD_EXP 69
19750: PPUSH
19751: CALL_OW 302
19755: AND
19756: IFFALSE 19843
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
19758: LD_VAR 0 1
19762: PPUSH
19763: LD_EXP 69
19767: PPUSH
19768: CALL_OW 250
19772: PPUSH
19773: LD_EXP 69
19777: PPUSH
19778: CALL_OW 251
19782: PPUSH
19783: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19787: LD_INT 35
19789: PPUSH
19790: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
19794: LD_VAR 0 1
19798: PPUSH
19799: LD_EXP 69
19803: PPUSH
19804: CALL_OW 250
19808: PPUSH
19809: LD_EXP 69
19813: PPUSH
19814: CALL_OW 251
19818: PPUSH
19819: CALL_OW 297
19823: PUSH
19824: LD_INT 6
19826: LESS
19827: IFFALSE 19787
// SetFuel ( i , 100 ) ;
19829: LD_VAR 0 1
19833: PPUSH
19834: LD_INT 100
19836: PPUSH
19837: CALL_OW 240
// end else
19841: GO 19888
// if not IsInArea ( i , ruParkingArea2 ) then
19843: LD_VAR 0 1
19847: PPUSH
19848: LD_EXP 83
19852: PPUSH
19853: CALL_OW 308
19857: NOT
19858: IFFALSE 19876
// ComMoveToArea ( i , ruParkingArea2 ) else
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_EXP 83
19869: PPUSH
19870: CALL_OW 113
19874: GO 19888
// SetTag ( i , tParking ) ;
19876: LD_VAR 0 1
19880: PPUSH
19881: LD_INT 12
19883: PPUSH
19884: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 110
19897: PUSH
19898: LD_INT 12
19900: EQUAL
19901: IFFALSE 20031
// begin if GetLives ( i ) < 650 then
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 256
19912: PUSH
19913: LD_INT 650
19915: LESS
19916: IFFALSE 20008
// begin if not IsDrivenBy ( i ) then
19918: LD_VAR 0 1
19922: PPUSH
19923: CALL_OW 311
19927: NOT
19928: IFFALSE 19932
// continue ;
19930: GO 19642
// mech := IsDrivenBy ( i ) ;
19932: LD_ADDR_VAR 0 2
19936: PUSH
19937: LD_VAR 0 1
19941: PPUSH
19942: CALL_OW 311
19946: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19947: LD_VAR 0 2
19951: PPUSH
19952: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19956: LD_VAR 0 2
19960: PPUSH
19961: LD_VAR 0 1
19965: PPUSH
19966: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19970: LD_INT 35
19972: PPUSH
19973: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 256
19986: PUSH
19987: LD_INT 1000
19989: EQUAL
19990: IFFALSE 19970
// ComEnterUnit ( mech , i ) ;
19992: LD_VAR 0 2
19996: PPUSH
19997: LD_VAR 0 1
20001: PPUSH
20002: CALL_OW 120
// end else
20006: GO 20031
// if IsDrivenBy ( i ) then
20008: LD_VAR 0 1
20012: PPUSH
20013: CALL_OW 311
20017: IFFALSE 20031
// SetTag ( i , tAttack ) ;
20019: LD_VAR 0 1
20023: PPUSH
20024: LD_INT 13
20026: PPUSH
20027: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
20031: LD_VAR 0 1
20035: PPUSH
20036: CALL_OW 110
20040: PUSH
20041: LD_INT 13
20043: EQUAL
20044: IFFALSE 20175
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_EXP 67
20055: PPUSH
20056: LD_INT 81
20058: PUSH
20059: LD_INT 3
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PPUSH
20066: CALL_OW 70
20070: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20071: LD_VAR 0 1
20075: PPUSH
20076: CALL_OW 256
20080: PUSH
20081: LD_INT 650
20083: LESS
20084: IFFALSE 20109
// begin ComStop ( i ) ;
20086: LD_VAR 0 1
20090: PPUSH
20091: CALL_OW 141
// SetTag ( i , 0 ) ;
20095: LD_VAR 0 1
20099: PPUSH
20100: LD_INT 0
20102: PPUSH
20103: CALL_OW 109
// continue ;
20107: GO 19642
// end ; if enemy then
20109: LD_VAR 0 3
20113: IFFALSE 20153
// begin if not HasTask ( i ) then
20115: LD_VAR 0 1
20119: PPUSH
20120: CALL_OW 314
20124: NOT
20125: IFFALSE 20151
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20127: LD_VAR 0 1
20131: PPUSH
20132: LD_VAR 0 3
20136: PPUSH
20137: LD_VAR 0 1
20141: PPUSH
20142: CALL_OW 74
20146: PPUSH
20147: CALL_OW 115
// end else
20151: GO 20175
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20153: LD_VAR 0 1
20157: PPUSH
20158: LD_INT 105
20160: PUSH
20161: LD_INT 35
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: PPUSH
20171: CALL 94891 0 2
// end ; end ;
20175: GO 19642
20177: POP
20178: POP
// end ;
20179: PPOPN 3
20181: END
// every 5 5$00 trigger Count ( ruExtraTanks ) do
20182: LD_EXP 81
20186: PPUSH
20187: CALL 56698 0 1
20191: IFFALSE 20204
20193: GO 20195
20195: DISABLE
// begin enable ;
20196: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
20197: LD_INT 106
20199: PPUSH
20200: CALL_OW 427
// end ;
20204: END
// export function RussianExtraAttack ; var i , tmp ; begin
20205: LD_INT 0
20207: PPUSH
20208: PPUSH
20209: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
20210: LD_ADDR_VAR 0 3
20214: PUSH
20215: LD_EXP 81
20219: PPUSH
20220: LD_INT 50
20222: PUSH
20223: EMPTY
20224: LIST
20225: PPUSH
20226: CALL_OW 72
20230: ST_TO_ADDR
// ruExtraTanks := ruExtraTanks diff tmp ;
20231: LD_ADDR_EXP 81
20235: PUSH
20236: LD_EXP 81
20240: PUSH
20241: LD_VAR 0 3
20245: DIFF
20246: ST_TO_ADDR
// ComAgressiveMove ( tmp , 105 , 35 ) ;
20247: LD_VAR 0 3
20251: PPUSH
20252: LD_INT 105
20254: PPUSH
20255: LD_INT 35
20257: PPUSH
20258: CALL_OW 114
// wait ( 0 0$5 ) ;
20262: LD_INT 175
20264: PPUSH
20265: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20269: LD_INT 35
20271: PPUSH
20272: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20276: LD_ADDR_VAR 0 3
20280: PUSH
20281: LD_VAR 0 3
20285: PPUSH
20286: LD_INT 50
20288: PUSH
20289: EMPTY
20290: LIST
20291: PPUSH
20292: CALL_OW 72
20296: ST_TO_ADDR
// for i in tmp do
20297: LD_ADDR_VAR 0 2
20301: PUSH
20302: LD_VAR 0 3
20306: PUSH
20307: FOR_IN
20308: IFFALSE 20334
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20310: LD_VAR 0 2
20314: PPUSH
20315: LD_INT 105
20317: PUSH
20318: LD_INT 35
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: EMPTY
20326: LIST
20327: PPUSH
20328: CALL 94891 0 2
20332: GO 20307
20334: POP
20335: POP
// until not tmp ;
20336: LD_VAR 0 3
20340: NOT
20341: IFFALSE 20269
// end ;
20343: LD_VAR 0 1
20347: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
20358: PPUSH
20359: PPUSH
// result := [ ] ;
20360: LD_ADDR_VAR 0 2
20364: PUSH
20365: EMPTY
20366: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
20367: LD_ADDR_VAR 0 7
20371: PUSH
20372: LD_INT 4
20374: PUSH
20375: LD_INT 5
20377: PUSH
20378: LD_INT 6
20380: PUSH
20381: LD_INT 7
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: PUSH
20390: LD_OWVAR 67
20394: ARRAY
20395: ST_TO_ADDR
// area := arAttackSpawn2Area ;
20396: LD_ADDR_VAR 0 8
20400: PUSH
20401: LD_INT 19
20403: ST_TO_ADDR
// parking := ruGatPointArea ;
20404: LD_ADDR_VAR 0 9
20408: PUSH
20409: LD_INT 32
20411: ST_TO_ADDR
// dir := 5 ;
20412: LD_ADDR_VAR 0 10
20416: PUSH
20417: LD_INT 5
20419: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
20420: LD_VAR 0 8
20424: PPUSH
20425: LD_INT 2
20427: PUSH
20428: LD_INT 22
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 22
20440: PUSH
20441: LD_INT 6
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: PPUSH
20453: CALL_OW 70
20457: IFFALSE 20518
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
20459: LD_ADDR_VAR 0 3
20463: PUSH
20464: LD_VAR 0 8
20468: PPUSH
20469: LD_INT 2
20471: PUSH
20472: LD_INT 22
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 22
20484: PUSH
20485: LD_INT 6
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: LIST
20496: PPUSH
20497: CALL_OW 70
20501: PUSH
20502: FOR_IN
20503: IFFALSE 20516
// RemoveUnit ( i ) ;
20505: LD_VAR 0 3
20509: PPUSH
20510: CALL_OW 64
20514: GO 20502
20516: POP
20517: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
20518: LD_VAR 0 8
20522: PPUSH
20523: LD_INT 3
20525: PUSH
20526: LD_INT 21
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 22
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PPUSH
20554: CALL_OW 70
20558: IFFALSE 20622
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
20560: LD_ADDR_VAR 0 3
20564: PUSH
20565: LD_VAR 0 8
20569: PPUSH
20570: LD_INT 3
20572: PUSH
20573: LD_INT 21
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 22
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PPUSH
20601: CALL_OW 70
20605: PUSH
20606: FOR_IN
20607: IFFALSE 20620
// KillUnit ( i ) ;
20609: LD_VAR 0 3
20613: PPUSH
20614: CALL_OW 66
20618: GO 20606
20620: POP
20621: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
20622: LD_VAR 0 8
20626: PPUSH
20627: LD_INT 21
20629: PUSH
20630: LD_INT 1
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 22
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PPUSH
20651: CALL_OW 70
20655: IFFALSE 20718
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: LD_VAR 0 8
20666: PPUSH
20667: LD_INT 21
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 22
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PPUSH
20691: CALL_OW 70
20695: PUSH
20696: FOR_IN
20697: IFFALSE 20716
// ComMoveXY ( i , 92 , 92 ) ;
20699: LD_VAR 0 3
20703: PPUSH
20704: LD_INT 92
20706: PPUSH
20707: LD_INT 92
20709: PPUSH
20710: CALL_OW 111
20714: GO 20696
20716: POP
20717: POP
// repeat wait ( 0 0$1 ) ;
20718: LD_INT 35
20720: PPUSH
20721: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
20725: LD_VAR 0 8
20729: PPUSH
20730: LD_INT 50
20732: PUSH
20733: EMPTY
20734: LIST
20735: PPUSH
20736: CALL_OW 70
20740: NOT
20741: IFFALSE 20718
// InitHC_All ( ) ;
20743: CALL_OW 584
// InitVc ;
20747: CALL_OW 20
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + strength do
20751: LD_ADDR_VAR 0 3
20755: PUSH
20756: DOUBLE
20757: LD_INT 1
20759: DEC
20760: ST_TO_ADDR
20761: LD_INT 3
20763: PUSH
20764: LD_INT 4
20766: PUSH
20767: LD_INT 4
20769: PUSH
20770: LD_INT 5
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: PUSH
20779: LD_OWVAR 67
20783: ARRAY
20784: PUSH
20785: LD_VAR 0 1
20789: PLUS
20790: PUSH
20791: FOR_TO
20792: IFFALSE 21099
// begin uc_side := 6 ;
20794: LD_ADDR_OWVAR 20
20798: PUSH
20799: LD_INT 6
20801: ST_TO_ADDR
// uc_nation := nation_russian ;
20802: LD_ADDR_OWVAR 21
20806: PUSH
20807: LD_INT 3
20809: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
20810: LD_ADDR_VAR 0 11
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: LD_INT 3
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: LD_INT 3
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_INT 4
20838: PPUSH
20839: CALL_OW 12
20843: ARRAY
20844: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
20845: LD_INT 22
20847: PUSH
20848: LD_INT 24
20850: PUSH
20851: LD_INT 23
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: LD_VAR 0 3
20863: PUSH
20864: LD_INT 3
20866: MOD
20867: PUSH
20868: LD_INT 1
20870: PLUS
20871: ARRAY
20872: PPUSH
20873: LD_INT 3
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PPUSH
20886: LD_INT 2
20888: PPUSH
20889: CALL_OW 12
20893: ARRAY
20894: PPUSH
20895: LD_VAR 0 11
20899: PPUSH
20900: LD_INT 45
20902: PUSH
20903: LD_INT 46
20905: PUSH
20906: LD_INT 43
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: LD_VAR 0 3
20918: PUSH
20919: LD_INT 3
20921: MOD
20922: PUSH
20923: LD_INT 1
20925: PLUS
20926: ARRAY
20927: PPUSH
20928: LD_INT 100
20930: PPUSH
20931: CALL 59436 0 5
// veh := CreateVehicle ;
20935: LD_ADDR_VAR 0 6
20939: PUSH
20940: CALL_OW 45
20944: ST_TO_ADDR
// SetDir ( veh , dir ) ;
20945: LD_VAR 0 6
20949: PPUSH
20950: LD_VAR 0 10
20954: PPUSH
20955: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
20959: LD_VAR 0 6
20963: PPUSH
20964: LD_VAR 0 8
20968: PPUSH
20969: LD_INT 0
20971: PPUSH
20972: CALL_OW 49
// if control = control_manual then
20976: LD_VAR 0 11
20980: PUSH
20981: LD_INT 1
20983: EQUAL
20984: IFFALSE 21038
// begin uc_side := 6 ;
20986: LD_ADDR_OWVAR 20
20990: PUSH
20991: LD_INT 6
20993: ST_TO_ADDR
// uc_nation := nation_russian ;
20994: LD_ADDR_OWVAR 21
20998: PUSH
20999: LD_INT 3
21001: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
21002: LD_INT 0
21004: PPUSH
21005: LD_VAR 0 7
21009: PPUSH
21010: CALL_OW 383
// un := CreateHuman ;
21014: LD_ADDR_VAR 0 5
21018: PUSH
21019: CALL_OW 44
21023: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
21024: LD_VAR 0 5
21028: PPUSH
21029: LD_VAR 0 6
21033: PPUSH
21034: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
21038: LD_VAR 0 6
21042: PPUSH
21043: LD_VAR 0 9
21047: PPUSH
21048: CALL_OW 113
// wait ( 0 0$3 ) ;
21052: LD_INT 105
21054: PPUSH
21055: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
21059: LD_VAR 0 8
21063: PPUSH
21064: LD_INT 50
21066: PUSH
21067: EMPTY
21068: LIST
21069: PPUSH
21070: CALL_OW 70
21074: NOT
21075: IFFALSE 21038
// result := Join ( result , veh ) ;
21077: LD_ADDR_VAR 0 2
21081: PUSH
21082: LD_VAR 0 2
21086: PPUSH
21087: LD_VAR 0 6
21091: PPUSH
21092: CALL 92287 0 2
21096: ST_TO_ADDR
// end ;
21097: GO 20791
21099: POP
21100: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
21101: LD_ADDR_VAR 0 3
21105: PUSH
21106: DOUBLE
21107: LD_INT 1
21109: DEC
21110: ST_TO_ADDR
21111: LD_INT 2
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: LD_INT 3
21119: PUSH
21120: LD_INT 4
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: PUSH
21129: LD_OWVAR 67
21133: ARRAY
21134: PUSH
21135: FOR_TO
21136: IFFALSE 21292
// begin uc_side := 6 ;
21138: LD_ADDR_OWVAR 20
21142: PUSH
21143: LD_INT 6
21145: ST_TO_ADDR
// uc_nation := nation_russian ;
21146: LD_ADDR_OWVAR 21
21150: PUSH
21151: LD_INT 3
21153: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21154: LD_INT 0
21156: PPUSH
21157: LD_VAR 0 7
21161: PPUSH
21162: CALL_OW 381
// un := CreateHuman ;
21166: LD_ADDR_VAR 0 5
21170: PUSH
21171: CALL_OW 44
21175: ST_TO_ADDR
// if Prob ( [ 35 , 60 , 70 , 80 ] [ Difficulty ] ) then
21176: LD_INT 35
21178: PUSH
21179: LD_INT 60
21181: PUSH
21182: LD_INT 70
21184: PUSH
21185: LD_INT 80
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: PUSH
21194: LD_OWVAR 67
21198: ARRAY
21199: PPUSH
21200: CALL_OW 13
21204: IFFALSE 21218
// SetClass ( un , class_bazooker ) ;
21206: LD_VAR 0 5
21210: PPUSH
21211: LD_INT 9
21213: PPUSH
21214: CALL_OW 336
// SetDir ( un , dir ) ;
21218: LD_VAR 0 5
21222: PPUSH
21223: LD_VAR 0 10
21227: PPUSH
21228: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
21232: LD_VAR 0 5
21236: PPUSH
21237: LD_VAR 0 8
21241: PPUSH
21242: LD_INT 0
21244: PPUSH
21245: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
21249: LD_VAR 0 5
21253: PPUSH
21254: LD_VAR 0 9
21258: PPUSH
21259: CALL_OW 113
// wait ( 0 0$1 ) ;
21263: LD_INT 35
21265: PPUSH
21266: CALL_OW 67
// result := Join ( result , un ) ;
21270: LD_ADDR_VAR 0 2
21274: PUSH
21275: LD_VAR 0 2
21279: PPUSH
21280: LD_VAR 0 5
21284: PPUSH
21285: CALL 92287 0 2
21289: ST_TO_ADDR
// end ;
21290: GO 21135
21292: POP
21293: POP
// end ;
21294: LD_VAR 0 2
21298: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
21299: LD_INT 0
21301: PPUSH
21302: PPUSH
21303: PPUSH
21304: PPUSH
21305: PPUSH
21306: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
21307: LD_ADDR_EXP 18
21311: PUSH
21312: LD_EXP 18
21316: PPUSH
21317: CALL 93648 0 1
21321: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 99
21329: PUSH
21330: LD_INT 91
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 78
21339: PUSH
21340: LD_INT 50
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 91
21349: PUSH
21350: LD_INT 45
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: LIST
21361: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
21362: LD_ADDR_VAR 0 4
21366: PUSH
21367: LD_VAR 0 1
21371: PPUSH
21372: CALL 20348 0 1
21376: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
21377: LD_VAR 0 4
21381: PPUSH
21382: LD_INT 21
21384: PUSH
21385: LD_INT 1
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PPUSH
21392: CALL_OW 72
21396: PPUSH
21397: LD_INT 108
21399: PPUSH
21400: LD_INT 60
21402: PPUSH
21403: CALL_OW 114
// DRussianNextAttack ;
21407: CALL 28478 0 0
// repeat wait ( 0 0$2 ) ;
21411: LD_INT 70
21413: PPUSH
21414: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
21418: LD_ADDR_VAR 0 7
21422: PUSH
21423: LD_INT 81
21425: PUSH
21426: LD_INT 6
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PPUSH
21433: CALL_OW 69
21437: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
21438: LD_ADDR_VAR 0 4
21442: PUSH
21443: LD_VAR 0 4
21447: PPUSH
21448: LD_INT 50
21450: PUSH
21451: EMPTY
21452: LIST
21453: PPUSH
21454: CALL_OW 72
21458: ST_TO_ADDR
// for i in attackers do
21459: LD_ADDR_VAR 0 6
21463: PUSH
21464: LD_VAR 0 4
21468: PUSH
21469: FOR_IN
21470: IFFALSE 21846
// begin if not IsOk ( i ) then
21472: LD_VAR 0 6
21476: PPUSH
21477: CALL_OW 302
21481: NOT
21482: IFFALSE 21502
// begin attackers := attackers diff i ;
21484: LD_ADDR_VAR 0 4
21488: PUSH
21489: LD_VAR 0 4
21493: PUSH
21494: LD_VAR 0 6
21498: DIFF
21499: ST_TO_ADDR
// continue ;
21500: GO 21469
// end ; if GetType ( i ) = unit_vehicle then
21502: LD_VAR 0 6
21506: PPUSH
21507: CALL_OW 247
21511: PUSH
21512: LD_INT 2
21514: EQUAL
21515: IFFALSE 21533
// AgressiveMove ( i , path ) else
21517: LD_VAR 0 6
21521: PPUSH
21522: LD_VAR 0 3
21526: PPUSH
21527: CALL 94891 0 2
21531: GO 21844
// begin if GetClass ( i ) = class_bazooker then
21533: LD_VAR 0 6
21537: PPUSH
21538: CALL_OW 257
21542: PUSH
21543: LD_INT 9
21545: EQUAL
21546: IFFALSE 21820
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
21548: LD_VAR 0 6
21552: PPUSH
21553: LD_VAR 0 7
21557: PPUSH
21558: LD_VAR 0 6
21562: PPUSH
21563: CALL_OW 74
21567: PPUSH
21568: CALL_OW 296
21572: PUSH
21573: LD_INT 12
21575: GREATER
21576: IFFALSE 21604
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21578: LD_VAR 0 6
21582: PPUSH
21583: LD_VAR 0 7
21587: PPUSH
21588: LD_VAR 0 6
21592: PPUSH
21593: CALL_OW 74
21597: PPUSH
21598: CALL 96359 0 2
21602: GO 21818
// begin e := NearestUnitToUnit ( enemy , i ) ;
21604: LD_ADDR_VAR 0 5
21608: PUSH
21609: LD_VAR 0 7
21613: PPUSH
21614: LD_VAR 0 6
21618: PPUSH
21619: CALL_OW 74
21623: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
21624: LD_INT 1
21626: PPUSH
21627: LD_INT 3
21629: PPUSH
21630: CALL_OW 12
21634: PUSH
21635: LD_INT 1
21637: DOUBLE
21638: EQUAL
21639: IFTRUE 21643
21641: GO 21660
21643: POP
// ComAttackUnit ( i , e ) ; 2 :
21644: LD_VAR 0 6
21648: PPUSH
21649: LD_VAR 0 5
21653: PPUSH
21654: CALL_OW 115
21658: GO 21818
21660: LD_INT 2
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21746
21668: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
21669: LD_VAR 0 6
21673: PPUSH
21674: LD_VAR 0 5
21678: PPUSH
21679: CALL_OW 250
21683: PPUSH
21684: LD_VAR 0 5
21688: PPUSH
21689: CALL_OW 251
21693: PPUSH
21694: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
21698: LD_VAR 0 5
21702: PPUSH
21703: CALL_OW 247
21707: PUSH
21708: LD_INT 3
21710: NONEQUAL
21711: PUSH
21712: LD_EXP 17
21716: NOT
21717: AND
21718: IFFALSE 21744
// begin dialogRussianSpaceAmmo := true ;
21720: LD_ADDR_EXP 17
21724: PUSH
21725: LD_INT 1
21727: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21728: LD_INT 210
21730: PPUSH
21731: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21735: LD_VAR 0 5
21739: PPUSH
21740: CALL 28525 0 1
// end ; end ; 3 :
21744: GO 21818
21746: LD_INT 3
21748: DOUBLE
21749: EQUAL
21750: IFTRUE 21754
21752: GO 21817
21754: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
21755: LD_VAR 0 6
21759: PPUSH
21760: LD_VAR 0 5
21764: PPUSH
21765: CALL_OW 250
21769: PPUSH
21770: LD_VAR 0 5
21774: PPUSH
21775: CALL_OW 251
21779: PPUSH
21780: CALL_OW 154
// if not dialogRussianSpaceAmmo then
21784: LD_EXP 17
21788: NOT
21789: IFFALSE 21815
// begin dialogRussianSpaceAmmo := true ;
21791: LD_ADDR_EXP 17
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21799: LD_INT 210
21801: PPUSH
21802: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21806: LD_VAR 0 5
21810: PPUSH
21811: CALL 28525 0 1
// end ; end ; end ;
21815: GO 21818
21817: POP
// end ; end else
21818: GO 21844
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
21820: LD_VAR 0 6
21824: PPUSH
21825: LD_VAR 0 7
21829: PPUSH
21830: LD_VAR 0 6
21834: PPUSH
21835: CALL_OW 74
21839: PPUSH
21840: CALL 96359 0 2
// end ; end ;
21844: GO 21469
21846: POP
21847: POP
// until not attackers ;
21848: LD_VAR 0 4
21852: NOT
21853: IFFALSE 21411
// end ;
21855: LD_VAR 0 2
21859: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
21860: LD_EXP 10
21864: PUSH
21865: LD_EXP 16
21869: AND
21870: IFFALSE 21982
21872: GO 21874
21874: DISABLE
21875: LD_INT 0
21877: PPUSH
21878: PPUSH
21879: PPUSH
// begin InitHC_All ( ) ;
21880: CALL_OW 584
// for i := 1 to 3 do
21884: LD_ADDR_VAR 0 1
21888: PUSH
21889: DOUBLE
21890: LD_INT 1
21892: DEC
21893: ST_TO_ADDR
21894: LD_INT 3
21896: PUSH
21897: FOR_TO
21898: IFFALSE 21980
// begin uc_side := 6 ;
21900: LD_ADDR_OWVAR 20
21904: PUSH
21905: LD_INT 6
21907: ST_TO_ADDR
// uc_nation := nation_russian ;
21908: LD_ADDR_OWVAR 21
21912: PUSH
21913: LD_INT 3
21915: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
21916: LD_INT 0
21918: PPUSH
21919: LD_INT 3
21921: PPUSH
21922: CALL_OW 381
// un := CreateHuman ;
21926: LD_ADDR_VAR 0 2
21930: PUSH
21931: CALL_OW 44
21935: ST_TO_ADDR
// SetDir ( un , 2 ) ;
21936: LD_VAR 0 2
21940: PPUSH
21941: LD_INT 2
21943: PPUSH
21944: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
21948: LD_VAR 0 2
21952: PPUSH
21953: LD_INT 33
21955: PPUSH
21956: LD_INT 0
21958: PPUSH
21959: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
21963: LD_VAR 0 2
21967: PPUSH
21968: LD_INT 52
21970: PPUSH
21971: LD_INT 16
21973: PPUSH
21974: CALL_OW 114
// end ;
21978: GO 21897
21980: POP
21981: POP
// end ;
21982: PPOPN 3
21984: END
// every 5 5$00 trigger IsOk ( ruBase ) and not ruTransportDestroyed do var cargo ;
21985: LD_EXP 68
21989: PPUSH
21990: CALL_OW 302
21994: PUSH
21995: LD_EXP 78
21999: NOT
22000: AND
22001: IFFALSE 22238
22003: GO 22005
22005: DISABLE
22006: LD_INT 0
22008: PPUSH
// begin enable ;
22009: ENABLE
// uc_side := 3 ;
22010: LD_ADDR_OWVAR 20
22014: PUSH
22015: LD_INT 3
22017: ST_TO_ADDR
// uc_nation := nation_russian ;
22018: LD_ADDR_OWVAR 21
22022: PUSH
22023: LD_INT 3
22025: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
22026: LD_INT 22
22028: PPUSH
22029: LD_INT 3
22031: PPUSH
22032: LD_INT 3
22034: PPUSH
22035: LD_INT 51
22037: PPUSH
22038: LD_INT 100
22040: PPUSH
22041: CALL 59436 0 5
// cargo := CreateVehicle ;
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: CALL_OW 45
22054: ST_TO_ADDR
// SetDir ( cargo , 5 ) ;
22055: LD_VAR 0 1
22059: PPUSH
22060: LD_INT 5
22062: PPUSH
22063: CALL_OW 233
// PlaceUnitXY ( cargo , 187 , 117 , false ) ;
22067: LD_VAR 0 1
22071: PPUSH
22072: LD_INT 187
22074: PPUSH
22075: LD_INT 117
22077: PPUSH
22078: LD_INT 0
22080: PPUSH
22081: CALL_OW 48
// SetCargo ( cargo , mat_cans , 100 ) ;
22085: LD_VAR 0 1
22089: PPUSH
22090: LD_INT 1
22092: PPUSH
22093: LD_INT 100
22095: PPUSH
22096: CALL_OW 290
// ComMoveUnit ( cargo , ruBase ) ;
22100: LD_VAR 0 1
22104: PPUSH
22105: LD_EXP 68
22109: PPUSH
22110: CALL_OW 112
// AddComGive ( cargo , ruBase ) ;
22114: LD_VAR 0 1
22118: PPUSH
22119: LD_EXP 68
22123: PPUSH
22124: CALL_OW 221
// AddComMoveXY ( cargo , 187 , 117 ) ;
22128: LD_VAR 0 1
22132: PPUSH
22133: LD_INT 187
22135: PPUSH
22136: LD_INT 117
22138: PPUSH
22139: CALL_OW 171
// wait ( 0 0$10 ) ;
22143: LD_INT 350
22145: PPUSH
22146: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22150: LD_INT 35
22152: PPUSH
22153: CALL_OW 67
// if not HasTask ( cargo ) then
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 314
22166: NOT
22167: IFFALSE 22184
// ComMoveXY ( cargo , 187 , 117 ) ;
22169: LD_VAR 0 1
22173: PPUSH
22174: LD_INT 187
22176: PPUSH
22177: LD_INT 117
22179: PPUSH
22180: CALL_OW 111
// until IsDead ( cargo ) or IsAt ( cargo , 187 , 117 ) ;
22184: LD_VAR 0 1
22188: PPUSH
22189: CALL_OW 301
22193: PUSH
22194: LD_VAR 0 1
22198: PPUSH
22199: LD_INT 187
22201: PPUSH
22202: LD_INT 117
22204: PPUSH
22205: CALL_OW 307
22209: OR
22210: IFFALSE 22150
// if IsAt ( cargo , 187 , 117 ) then
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_INT 187
22219: PPUSH
22220: LD_INT 117
22222: PPUSH
22223: CALL_OW 307
22227: IFFALSE 22238
// RemoveUnit ( cargo ) ;
22229: LD_VAR 0 1
22233: PPUSH
22234: CALL_OW 64
// end ; end_of_file
22238: PPOPN 1
22240: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL 49702 0 1
// if unit = Dietrich and not arabianAttack then
22250: LD_VAR 0 1
22254: PUSH
22255: LD_EXP 50
22259: EQUAL
22260: PUSH
22261: LD_EXP 4
22265: NOT
22266: AND
22267: IFFALSE 22276
// YouLost ( ArabDefeated ) ;
22269: LD_STRING ArabDefeated
22271: PPUSH
22272: CALL_OW 104
// if unit in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) and not arabianAttack then
22276: LD_VAR 0 1
22280: PUSH
22281: LD_INT 22
22283: PUSH
22284: LD_INT 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 25
22293: PUSH
22294: LD_INT 4
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PPUSH
22305: CALL_OW 69
22309: IN
22310: PUSH
22311: LD_EXP 4
22315: NOT
22316: AND
22317: IFFALSE 22326
// YouLost ( ArabDefeated ) ;
22319: LD_STRING ArabDefeated
22321: PPUSH
22322: CALL_OW 104
// if unit in JMMSquad then
22326: LD_VAR 0 1
22330: PUSH
22331: LD_EXP 45
22335: IN
22336: IFFALSE 22354
// JMMSquad := JMMSquad diff unit ;
22338: LD_ADDR_EXP 45
22342: PUSH
22343: LD_EXP 45
22347: PUSH
22348: LD_VAR 0 1
22352: DIFF
22353: ST_TO_ADDR
// if unit = Truman then
22354: LD_VAR 0 1
22358: PUSH
22359: LD_EXP 43
22363: EQUAL
22364: IFFALSE 22373
// YouLost ( Powell ) ;
22366: LD_STRING Powell
22368: PPUSH
22369: CALL_OW 104
// if unit = JMM then
22373: LD_VAR 0 1
22377: PUSH
22378: LD_EXP 23
22382: EQUAL
22383: IFFALSE 22392
// YouLost ( JMM ) ;
22385: LD_STRING JMM
22387: PPUSH
22388: CALL_OW 104
// if unit in arEscapist then
22392: LD_VAR 0 1
22396: PUSH
22397: LD_EXP 56
22401: IN
22402: IFFALSE 22420
// arEscapist := arEscapist diff unit ;
22404: LD_ADDR_EXP 56
22408: PUSH
22409: LD_EXP 56
22413: PUSH
22414: LD_VAR 0 1
22418: DIFF
22419: ST_TO_ADDR
// if unit in arAttackersInf then
22420: LD_VAR 0 1
22424: PUSH
22425: LD_EXP 57
22429: IN
22430: IFFALSE 22448
// arAttackersInf := arAttackersInf diff unit ;
22432: LD_ADDR_EXP 57
22436: PUSH
22437: LD_EXP 57
22441: PUSH
22442: LD_VAR 0 1
22446: DIFF
22447: ST_TO_ADDR
// if unit in arAttackersVeh then
22448: LD_VAR 0 1
22452: PUSH
22453: LD_EXP 58
22457: IN
22458: IFFALSE 22476
// arAttackersVeh := arAttackersVeh diff unit ;
22460: LD_ADDR_EXP 58
22464: PUSH
22465: LD_EXP 58
22469: PUSH
22470: LD_VAR 0 1
22474: DIFF
22475: ST_TO_ADDR
// if unit = Khatam then
22476: LD_VAR 0 1
22480: PUSH
22481: LD_EXP 36
22485: EQUAL
22486: IFFALSE 22496
// khatamStatus := false ;
22488: LD_ADDR_EXP 5
22492: PUSH
22493: LD_INT 0
22495: ST_TO_ADDR
// if unit = epsilon then
22496: LD_VAR 0 1
22500: PUSH
22501: LD_EXP 10
22505: EQUAL
22506: IFFALSE 22537
// begin hasBase := false ;
22508: LD_ADDR_EXP 9
22512: PUSH
22513: LD_INT 0
22515: ST_TO_ADDR
// epsilon := 0 ;
22516: LD_ADDR_EXP 10
22520: PUSH
22521: LD_INT 0
22523: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
22524: LD_INT 0
22526: PPUSH
22527: LD_INT 1
22529: PPUSH
22530: LD_INT 1
22532: PPUSH
22533: CALL_OW 324
// end ; if unit = Khatam then
22537: LD_VAR 0 1
22541: PUSH
22542: LD_EXP 36
22546: EQUAL
22547: IFFALSE 22559
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
22549: LD_INT 0
22551: PPUSH
22552: LD_STRING 10_KhatamStatus_1
22554: PPUSH
22555: CALL_OW 39
// if unit in ruForces then
22559: LD_VAR 0 1
22563: PUSH
22564: LD_EXP 59
22568: IN
22569: IFFALSE 22587
// ruForces := ruForces diff unit ;
22571: LD_ADDR_EXP 59
22575: PUSH
22576: LD_EXP 59
22580: PUSH
22581: LD_VAR 0 1
22585: DIFF
22586: ST_TO_ADDR
// if unit in ruForces2 then
22587: LD_VAR 0 1
22591: PUSH
22592: LD_EXP 60
22596: IN
22597: IFFALSE 22615
// ruForces2 := ruForces2 diff unit ;
22599: LD_ADDR_EXP 60
22603: PUSH
22604: LD_EXP 60
22608: PUSH
22609: LD_VAR 0 1
22613: DIFF
22614: ST_TO_ADDR
// if unit in ruTanks then
22615: LD_VAR 0 1
22619: PUSH
22620: LD_EXP 79
22624: IN
22625: IFFALSE 22643
// ruTanks := ruTanks diff unit ;
22627: LD_ADDR_EXP 79
22631: PUSH
22632: LD_EXP 79
22636: PUSH
22637: LD_VAR 0 1
22641: DIFF
22642: ST_TO_ADDR
// if unit in ruTanks2 then
22643: LD_VAR 0 1
22647: PUSH
22648: LD_EXP 80
22652: IN
22653: IFFALSE 22671
// ruTanks2 := ruTanks2 diff unit ;
22655: LD_ADDR_EXP 80
22659: PUSH
22660: LD_EXP 80
22664: PUSH
22665: LD_VAR 0 1
22669: DIFF
22670: ST_TO_ADDR
// if unit in ruExtraTanks then
22671: LD_VAR 0 1
22675: PUSH
22676: LD_EXP 81
22680: IN
22681: IFFALSE 22699
// ruExtraTanks := ruExtraTanks diff unit ;
22683: LD_ADDR_EXP 81
22687: PUSH
22688: LD_EXP 81
22692: PUSH
22693: LD_VAR 0 1
22697: DIFF
22698: ST_TO_ADDR
// if unit in ruMech then
22699: LD_VAR 0 1
22703: PUSH
22704: LD_EXP 63
22708: IN
22709: IFFALSE 22727
// ruMech := ruMech diff unit ;
22711: LD_ADDR_EXP 63
22715: PUSH
22716: LD_EXP 63
22720: PUSH
22721: LD_VAR 0 1
22725: DIFF
22726: ST_TO_ADDR
// if unit in ruMech2 then
22727: LD_VAR 0 1
22731: PUSH
22732: LD_EXP 64
22736: IN
22737: IFFALSE 22755
// ruMech2 := ruMech2 diff unit ;
22739: LD_ADDR_EXP 64
22743: PUSH
22744: LD_EXP 64
22748: PUSH
22749: LD_VAR 0 1
22753: DIFF
22754: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 3 then
22755: LD_VAR 0 1
22759: PPUSH
22760: CALL_OW 266
22764: PUSH
22765: LD_INT 32
22767: PUSH
22768: LD_INT 33
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: IN
22775: PUSH
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 255
22785: PUSH
22786: LD_INT 3
22788: EQUAL
22789: AND
22790: IFFALSE 22946
// begin if IsInArea ( unit , ruBaseArea ) then
22792: LD_VAR 0 1
22796: PPUSH
22797: LD_EXP 66
22801: PPUSH
22802: CALL_OW 308
22806: IFFALSE 22869
// ruBuildings := Join ( ruBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22808: LD_ADDR_EXP 76
22812: PUSH
22813: LD_EXP 76
22817: PPUSH
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL_OW 266
22827: PUSH
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 250
22837: PUSH
22838: LD_VAR 0 1
22842: PPUSH
22843: CALL_OW 251
22847: PUSH
22848: LD_VAR 0 1
22852: PPUSH
22853: CALL_OW 254
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PPUSH
22864: CALL 92287 0 2
22868: ST_TO_ADDR
// if IsInArea ( unit , ruBaseArea2 ) then
22869: LD_VAR 0 1
22873: PPUSH
22874: LD_EXP 67
22878: PPUSH
22879: CALL_OW 308
22883: IFFALSE 22946
// ruBuildings2 := Join ( ruBuildings2 , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22885: LD_ADDR_EXP 77
22889: PUSH
22890: LD_EXP 77
22894: PPUSH
22895: LD_VAR 0 1
22899: PPUSH
22900: CALL_OW 266
22904: PUSH
22905: LD_VAR 0 1
22909: PPUSH
22910: CALL_OW 250
22914: PUSH
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 251
22924: PUSH
22925: LD_VAR 0 1
22929: PPUSH
22930: CALL_OW 254
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: PPUSH
22941: CALL 92287 0 2
22945: ST_TO_ADDR
// end ; if unit in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) then
22946: LD_VAR 0 1
22950: PUSH
22951: LD_INT 22
22953: PUSH
22954: LD_INT 6
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 34
22963: PUSH
22964: LD_INT 51
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PPUSH
22975: CALL_OW 69
22979: IN
22980: IFFALSE 22990
// ruTransportDestroyed := true ;
22982: LD_ADDR_EXP 78
22986: PUSH
22987: LD_INT 1
22989: ST_TO_ADDR
// end ;
22990: PPOPN 1
22992: END
// on ClassChanged ( un , oldClass , newClass ) do begin if GetTag ( un ) = tMech then
22993: LD_VAR 0 1
22997: PPUSH
22998: CALL_OW 110
23002: PUSH
23003: LD_INT 7
23005: EQUAL
23006: IFFALSE 23020
// SetTag ( un , 0 ) ;
23008: LD_VAR 0 1
23012: PPUSH
23013: LD_INT 0
23015: PPUSH
23016: CALL_OW 109
// end ;
23020: PPOPN 3
23022: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
23023: LD_VAR 0 2
23027: PUSH
23028: LD_INT 22
23030: PUSH
23031: LD_INT 3
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 25
23040: PUSH
23041: LD_INT 3
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PPUSH
23052: CALL_OW 69
23056: IN
23057: PUSH
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 266
23067: PUSH
23068: LD_INT 3
23070: EQUAL
23071: AND
23072: PUSH
23073: LD_VAR 0 2
23077: PPUSH
23078: CALL_OW 256
23082: PUSH
23083: LD_INT 1000
23085: LESS
23086: AND
23087: IFFALSE 23113
// begin SetTag ( un , 0 ) ;
23089: LD_VAR 0 2
23093: PPUSH
23094: LD_INT 0
23096: PPUSH
23097: CALL_OW 109
// SetLives ( un , 1000 ) ;
23101: LD_VAR 0 2
23105: PPUSH
23106: LD_INT 1000
23108: PPUSH
23109: CALL_OW 234
// end ; end ;
23113: PPOPN 2
23115: END
// on UnitGoesToRed ( un ) do var i ;
23116: LD_INT 0
23118: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
23119: LD_VAR 0 1
23123: PUSH
23124: LD_EXP 36
23128: EQUAL
23129: PUSH
23130: LD_EXP 36
23134: PPUSH
23135: CALL_OW 255
23139: PUSH
23140: LD_INT 8
23142: EQUAL
23143: AND
23144: IFFALSE 23155
// KillUnit ( Khatam ) ;
23146: LD_EXP 36
23150: PPUSH
23151: CALL_OW 66
// end ;
23155: PPOPN 2
23157: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
23158: LD_EXP 6
23162: NOT
23163: IFFALSE 23197
// begin seenRussianTeleport := true ;
23165: LD_ADDR_EXP 6
23169: PUSH
23170: LD_INT 1
23172: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 250
23182: PPUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL_OW 251
23192: PPUSH
23193: CALL 26535 0 2
// end ; end ;
23197: PPOPN 1
23199: END
// on BuildingCaptured ( captured , oldSide , unit ) do var i , x , y ;
23200: LD_INT 0
23202: PPUSH
23203: PPUSH
23204: PPUSH
// begin if oldSide = 2 and GetBType ( captured ) in [ b_lab_half , b_lab , b_depot , b_barracks ] then
23205: LD_VAR 0 2
23209: PUSH
23210: LD_INT 2
23212: EQUAL
23213: PUSH
23214: LD_VAR 0 1
23218: PPUSH
23219: CALL_OW 266
23223: PUSH
23224: LD_INT 7
23226: PUSH
23227: LD_INT 6
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 5
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: IN
23242: AND
23243: IFFALSE 23362
// begin for i := 1 to rand ( 2 , 4 ) do
23245: LD_ADDR_VAR 0 4
23249: PUSH
23250: DOUBLE
23251: LD_INT 1
23253: DEC
23254: ST_TO_ADDR
23255: LD_INT 2
23257: PPUSH
23258: LD_INT 4
23260: PPUSH
23261: CALL_OW 12
23265: PUSH
23266: FOR_TO
23267: IFFALSE 23360
// begin x := GetX ( captured ) - rand ( - 2 , 2 ) ;
23269: LD_ADDR_VAR 0 5
23273: PUSH
23274: LD_VAR 0 1
23278: PPUSH
23279: CALL_OW 250
23283: PUSH
23284: LD_INT 2
23286: NEG
23287: PPUSH
23288: LD_INT 2
23290: PPUSH
23291: CALL_OW 12
23295: MINUS
23296: ST_TO_ADDR
// y := GetY ( captured ) + rand ( - 2 , 2 ) ;
23297: LD_ADDR_VAR 0 6
23301: PUSH
23302: LD_VAR 0 1
23306: PPUSH
23307: CALL_OW 251
23311: PUSH
23312: LD_INT 2
23314: NEG
23315: PPUSH
23316: LD_INT 2
23318: PPUSH
23319: CALL_OW 12
23323: PLUS
23324: ST_TO_ADDR
// if ValidHex ( x , y ) then
23325: LD_VAR 0 5
23329: PPUSH
23330: LD_VAR 0 6
23334: PPUSH
23335: CALL_OW 488
23339: IFFALSE 23358
// MineExplosion ( x , y , 10 ) ;
23341: LD_VAR 0 5
23345: PPUSH
23346: LD_VAR 0 6
23350: PPUSH
23351: LD_INT 10
23353: PPUSH
23354: CALL_OW 453
// end ;
23358: GO 23266
23360: POP
23361: POP
// end ; end ;
23362: PPOPN 6
23364: END
// on VehicleConstructed ( veh , fac ) do var side ;
23365: LD_INT 0
23367: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
23368: LD_VAR 0 1
23372: PPUSH
23373: LD_VAR 0 2
23377: PPUSH
23378: CALL 49822 0 2
// side := GetSide ( fac ) ;
23382: LD_ADDR_VAR 0 3
23386: PUSH
23387: LD_VAR 0 2
23391: PPUSH
23392: CALL_OW 255
23396: ST_TO_ADDR
// if side = 3 then
23397: LD_VAR 0 3
23401: PUSH
23402: LD_INT 3
23404: EQUAL
23405: IFFALSE 23589
// begin if IsInArea ( fac , ruBaseArea ) then
23407: LD_VAR 0 2
23411: PPUSH
23412: LD_EXP 66
23416: PPUSH
23417: CALL_OW 308
23421: IFFALSE 23498
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
23423: LD_ADDR_EXP 70
23427: PUSH
23428: LD_EXP 70
23432: PPUSH
23433: LD_INT 1
23435: PPUSH
23436: CALL_OW 3
23440: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23441: LD_VAR 0 1
23445: PPUSH
23446: CALL_OW 263
23450: PUSH
23451: LD_INT 1
23453: EQUAL
23454: IFFALSE 23478
// ruTanks := Join ( ruTanks , veh ) else
23456: LD_ADDR_EXP 79
23460: PUSH
23461: LD_EXP 79
23465: PPUSH
23466: LD_VAR 0 1
23470: PPUSH
23471: CALL 92287 0 2
23475: ST_TO_ADDR
23476: GO 23498
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23478: LD_ADDR_EXP 81
23482: PUSH
23483: LD_EXP 81
23487: PPUSH
23488: LD_VAR 0 1
23492: PPUSH
23493: CALL 92287 0 2
23497: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
23498: LD_VAR 0 2
23502: PPUSH
23503: LD_EXP 67
23507: PPUSH
23508: CALL_OW 308
23512: IFFALSE 23589
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
23514: LD_ADDR_EXP 71
23518: PUSH
23519: LD_EXP 71
23523: PPUSH
23524: LD_INT 1
23526: PPUSH
23527: CALL_OW 3
23531: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23532: LD_VAR 0 1
23536: PPUSH
23537: CALL_OW 263
23541: PUSH
23542: LD_INT 1
23544: EQUAL
23545: IFFALSE 23569
// ruTanks2 := Join ( ruTanks2 , veh ) else
23547: LD_ADDR_EXP 80
23551: PUSH
23552: LD_EXP 80
23556: PPUSH
23557: LD_VAR 0 1
23561: PPUSH
23562: CALL 92287 0 2
23566: ST_TO_ADDR
23567: GO 23589
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23569: LD_ADDR_EXP 81
23573: PUSH
23574: LD_EXP 81
23578: PPUSH
23579: LD_VAR 0 1
23583: PPUSH
23584: CALL 92287 0 2
23588: ST_TO_ADDR
// end ; end ; end ;
23589: PPOPN 3
23591: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
23592: LD_INT 0
23594: PPUSH
23595: PPUSH
23596: PPUSH
// begin side := GetSide ( driver ) ;
23597: LD_ADDR_VAR 0 7
23601: PUSH
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL_OW 255
23611: ST_TO_ADDR
// if side = 5 then
23612: LD_VAR 0 7
23616: PUSH
23617: LD_INT 5
23619: EQUAL
23620: IFFALSE 23700
// begin arAttackersVeh := arAttackersVeh diff driver ;
23622: LD_ADDR_EXP 58
23626: PUSH
23627: LD_EXP 58
23631: PUSH
23632: LD_VAR 0 1
23636: DIFF
23637: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
23638: LD_VAR 0 1
23642: PPUSH
23643: LD_INT 189
23645: PPUSH
23646: LD_INT 80
23648: PPUSH
23649: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23653: LD_INT 35
23655: PPUSH
23656: CALL_OW 67
// if not IsOk ( driver ) then
23660: LD_VAR 0 1
23664: PPUSH
23665: CALL_OW 302
23669: NOT
23670: IFFALSE 23674
// exit ;
23672: GO 24224
// until IsAt ( driver , 189 , 80 ) ;
23674: LD_VAR 0 1
23678: PPUSH
23679: LD_INT 189
23681: PPUSH
23682: LD_INT 80
23684: PPUSH
23685: CALL_OW 307
23689: IFFALSE 23653
// RemoveUnit ( driver ) ;
23691: LD_VAR 0 1
23695: PPUSH
23696: CALL_OW 64
// end ; if side = 6 then
23700: LD_VAR 0 7
23704: PUSH
23705: LD_INT 6
23707: EQUAL
23708: IFFALSE 23766
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
23710: LD_VAR 0 1
23714: PPUSH
23715: LD_INT 19
23717: PPUSH
23718: CALL_OW 113
// wait ( 0 0$3 ) ;
23722: LD_INT 105
23724: PPUSH
23725: CALL_OW 67
// if not IsOk ( driver ) then
23729: LD_VAR 0 1
23733: PPUSH
23734: CALL_OW 302
23738: NOT
23739: IFFALSE 23743
// exit ;
23741: GO 24224
// until IsInArea ( driver , arAttackSpawn2Area ) ;
23743: LD_VAR 0 1
23747: PPUSH
23748: LD_INT 19
23750: PPUSH
23751: CALL_OW 308
23755: IFFALSE 23710
// RemoveUnit ( driver ) ;
23757: LD_VAR 0 1
23761: PPUSH
23762: CALL_OW 64
// end ; if side = 3 then
23766: LD_VAR 0 7
23770: PUSH
23771: LD_INT 3
23773: EQUAL
23774: IFFALSE 24224
// begin if driver in ruMech then
23776: LD_VAR 0 1
23780: PUSH
23781: LD_EXP 63
23785: IN
23786: IFFALSE 24000
// begin ComMoveToArea ( driver , ruBaseArea ) ;
23788: LD_VAR 0 1
23792: PPUSH
23793: LD_EXP 66
23797: PPUSH
23798: CALL_OW 113
// SetTag ( driver , tMech ) ;
23802: LD_VAR 0 1
23806: PPUSH
23807: LD_INT 7
23809: PPUSH
23810: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
23814: LD_ADDR_VAR 0 6
23818: PUSH
23819: LD_EXP 66
23823: PPUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 3
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 30
23836: PUSH
23837: LD_INT 3
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 50
23846: PUSH
23847: EMPTY
23848: LIST
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: PPUSH
23855: CALL_OW 70
23859: ST_TO_ADDR
// if fac then
23860: LD_VAR 0 6
23864: IFFALSE 23886
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
23866: LD_VAR 0 1
23870: PPUSH
23871: LD_VAR 0 6
23875: PUSH
23876: LD_INT 1
23878: ARRAY
23879: PPUSH
23880: CALL_OW 180
// exit ;
23884: GO 24224
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
23886: LD_ADDR_VAR 0 5
23890: PUSH
23891: LD_EXP 66
23895: PPUSH
23896: LD_INT 22
23898: PUSH
23899: LD_INT 3
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: LD_INT 30
23911: PUSH
23912: LD_INT 4
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 30
23921: PUSH
23922: LD_INT 5
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 3
23936: PUSH
23937: LD_INT 62
23939: PUSH
23940: EMPTY
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 50
23949: PUSH
23950: EMPTY
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: PPUSH
23959: CALL_OW 70
23963: ST_TO_ADDR
// if arm then
23964: LD_VAR 0 5
23968: IFFALSE 24000
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
23970: LD_VAR 0 1
23974: PPUSH
23975: LD_VAR 0 5
23979: PUSH
23980: LD_INT 1
23982: ARRAY
23983: PPUSH
23984: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
23988: LD_VAR 0 1
23992: PPUSH
23993: LD_INT 1
23995: PPUSH
23996: CALL_OW 183
// end ; end ; if driver in ruMech2 then
24000: LD_VAR 0 1
24004: PUSH
24005: LD_EXP 64
24009: IN
24010: IFFALSE 24224
// begin ComMoveToArea ( driver , ruBaseArea2 ) ;
24012: LD_VAR 0 1
24016: PPUSH
24017: LD_EXP 67
24021: PPUSH
24022: CALL_OW 113
// SetTag ( driver , tMech ) ;
24026: LD_VAR 0 1
24030: PPUSH
24031: LD_INT 7
24033: PPUSH
24034: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24038: LD_ADDR_VAR 0 6
24042: PUSH
24043: LD_EXP 67
24047: PPUSH
24048: LD_INT 22
24050: PUSH
24051: LD_INT 3
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 30
24060: PUSH
24061: LD_INT 3
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 50
24070: PUSH
24071: EMPTY
24072: LIST
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: PPUSH
24079: CALL_OW 70
24083: ST_TO_ADDR
// if fac then
24084: LD_VAR 0 6
24088: IFFALSE 24110
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24090: LD_VAR 0 1
24094: PPUSH
24095: LD_VAR 0 6
24099: PUSH
24100: LD_INT 1
24102: ARRAY
24103: PPUSH
24104: CALL_OW 180
// exit ;
24108: GO 24224
// end ; arm := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24110: LD_ADDR_VAR 0 5
24114: PUSH
24115: LD_EXP 67
24119: PPUSH
24120: LD_INT 22
24122: PUSH
24123: LD_INT 3
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: LD_INT 30
24135: PUSH
24136: LD_INT 4
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 30
24145: PUSH
24146: LD_INT 5
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 3
24160: PUSH
24161: LD_INT 62
24163: PUSH
24164: EMPTY
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 50
24173: PUSH
24174: EMPTY
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: PPUSH
24183: CALL_OW 70
24187: ST_TO_ADDR
// if arm then
24188: LD_VAR 0 5
24192: IFFALSE 24224
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_VAR 0 5
24203: PUSH
24204: LD_INT 1
24206: ARRAY
24207: PPUSH
24208: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24212: LD_VAR 0 1
24216: PPUSH
24217: LD_INT 1
24219: PPUSH
24220: CALL_OW 183
// end ; end ; end ; end ;
24224: PPOPN 7
24226: END
// on EndTheMissionRaised ( ev ) do begin if end_the_mission_allowed then
24227: LD_OWVAR 57
24231: IFFALSE 24245
// begin end_the_mission_allowed := false ;
24233: LD_ADDR_OWVAR 57
24237: PUSH
24238: LD_INT 0
24240: ST_TO_ADDR
// FinishMission ;
24241: CALL 31983 0 0
// end ; end ;
24245: PPOPN 1
24247: END
// on BuildingComplete ( b ) do var side , type ;
24248: LD_INT 0
24250: PPUSH
24251: PPUSH
// begin side := GetSide ( b ) ;
24252: LD_ADDR_VAR 0 2
24256: PUSH
24257: LD_VAR 0 1
24261: PPUSH
24262: CALL_OW 255
24266: ST_TO_ADDR
// type := GetBType ( b ) ;
24267: LD_ADDR_VAR 0 3
24271: PUSH
24272: LD_VAR 0 1
24276: PPUSH
24277: CALL_OW 266
24281: ST_TO_ADDR
// if side = 2 then
24282: LD_VAR 0 2
24286: PUSH
24287: LD_INT 2
24289: EQUAL
24290: IFFALSE 24310
// arBuildings := Delete ( arBuildings , 1 ) ;
24292: LD_ADDR_EXP 53
24296: PUSH
24297: LD_EXP 53
24301: PPUSH
24302: LD_INT 1
24304: PPUSH
24305: CALL_OW 3
24309: ST_TO_ADDR
// if side = 1 then
24310: LD_VAR 0 2
24314: PUSH
24315: LD_INT 1
24317: EQUAL
24318: IFFALSE 24380
// if type = b_depot and not hasBase then
24320: LD_VAR 0 3
24324: PUSH
24325: LD_INT 0
24327: EQUAL
24328: PUSH
24329: LD_EXP 9
24333: NOT
24334: AND
24335: IFFALSE 24380
// begin hasBase := true ;
24337: LD_ADDR_EXP 9
24341: PUSH
24342: LD_INT 1
24344: ST_TO_ADDR
// epsilon := b ;
24345: LD_ADDR_EXP 10
24349: PUSH
24350: LD_VAR 0 1
24354: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
24355: LD_VAR 0 1
24359: PPUSH
24360: LD_STRING epsilon
24362: PPUSH
24363: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
24367: LD_INT 0
24369: PPUSH
24370: LD_INT 1
24372: PPUSH
24373: LD_INT 0
24375: PPUSH
24376: CALL_OW 324
// end ; if side = 3 then
24380: LD_VAR 0 2
24384: PUSH
24385: LD_INT 3
24387: EQUAL
24388: IFFALSE 24674
// begin if IsInArea ( b , ruBaseArea ) then
24390: LD_VAR 0 1
24394: PPUSH
24395: LD_EXP 66
24399: PPUSH
24400: CALL_OW 308
24404: IFFALSE 24424
// ruBuildings := Delete ( ruBuildings , 1 ) ;
24406: LD_ADDR_EXP 76
24410: PUSH
24411: LD_EXP 76
24415: PPUSH
24416: LD_INT 1
24418: PPUSH
24419: CALL_OW 3
24423: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
24424: LD_VAR 0 1
24428: PPUSH
24429: LD_EXP 67
24433: PPUSH
24434: CALL_OW 308
24438: IFFALSE 24458
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
24440: LD_ADDR_EXP 77
24444: PUSH
24445: LD_EXP 77
24449: PPUSH
24450: LD_INT 1
24452: PPUSH
24453: CALL_OW 3
24457: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
24458: LD_VAR 0 3
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: IN
24477: IFFALSE 24488
// ComUpgrade ( b ) ;
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 146
// if type = b_lab then
24488: LD_VAR 0 3
24492: PUSH
24493: LD_INT 6
24495: EQUAL
24496: IFFALSE 24540
// if IsInArea ( b , ruBaseArea ) then
24498: LD_VAR 0 1
24502: PPUSH
24503: LD_EXP 66
24507: PPUSH
24508: CALL_OW 308
24512: IFFALSE 24528
// ComUpgradeLab ( b , b_lab_weapon ) else
24514: LD_VAR 0 1
24518: PPUSH
24519: LD_INT 10
24521: PPUSH
24522: CALL_OW 147
24526: GO 24540
// ComUpgradeLab ( b , b_lab_computer ) ;
24528: LD_VAR 0 1
24532: PPUSH
24533: LD_INT 12
24535: PPUSH
24536: CALL_OW 147
// if type = b_depot then
24540: LD_VAR 0 3
24544: PUSH
24545: LD_INT 0
24547: EQUAL
24548: IFFALSE 24674
// begin SetResourceType ( GetBase ( b ) , mat_cans , 2550 ) ;
24550: LD_VAR 0 1
24554: PPUSH
24555: CALL_OW 274
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: LD_INT 2550
24565: PPUSH
24566: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
24570: LD_VAR 0 1
24574: PPUSH
24575: CALL_OW 274
24579: PPUSH
24580: LD_INT 2
24582: PPUSH
24583: LD_INT 250
24585: PPUSH
24586: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 200 ) ;
24590: LD_VAR 0 1
24594: PPUSH
24595: CALL_OW 274
24599: PPUSH
24600: LD_INT 3
24602: PPUSH
24603: LD_INT 200
24605: PPUSH
24606: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
24610: LD_VAR 0 1
24614: PPUSH
24615: LD_EXP 66
24619: PPUSH
24620: CALL_OW 308
24624: IFFALSE 24648
// begin ruBase := b ;
24626: LD_ADDR_EXP 68
24630: PUSH
24631: LD_VAR 0 1
24635: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
24636: LD_VAR 0 1
24640: PPUSH
24641: LD_STRING chuikov
24643: PPUSH
24644: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
24648: LD_VAR 0 1
24652: PPUSH
24653: LD_EXP 67
24657: PPUSH
24658: CALL_OW 308
24662: IFFALSE 24674
// begin ruBase2 := b ;
24664: LD_ADDR_EXP 69
24668: PUSH
24669: LD_VAR 0 1
24673: ST_TO_ADDR
// end ; end ; end ; end ;
24674: PPOPN 3
24676: END
// on UpgradeComplete ( b ) do var side , type ;
24677: LD_INT 0
24679: PPUSH
24680: PPUSH
// begin side := GetSide ( b ) ;
24681: LD_ADDR_VAR 0 2
24685: PUSH
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 255
24695: ST_TO_ADDR
// type := GetBType ( b ) ;
24696: LD_ADDR_VAR 0 3
24700: PUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: CALL_OW 266
24710: ST_TO_ADDR
// if side = 3 then
24711: LD_VAR 0 2
24715: PUSH
24716: LD_INT 3
24718: EQUAL
24719: IFFALSE 24773
// if type = b_lab_half then
24721: LD_VAR 0 3
24725: PUSH
24726: LD_INT 7
24728: EQUAL
24729: IFFALSE 24773
// if IsInArea ( b , ruBaseArea ) then
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_EXP 66
24740: PPUSH
24741: CALL_OW 308
24745: IFFALSE 24761
// ComUpgradeLab ( b , b_lab_spacetime ) else
24747: LD_VAR 0 1
24751: PPUSH
24752: LD_INT 14
24754: PPUSH
24755: CALL_OW 147
24759: GO 24773
// ComUpgradeLab ( b , b_lab_siberium ) ;
24761: LD_VAR 0 1
24765: PPUSH
24766: LD_INT 11
24768: PPUSH
24769: CALL_OW 147
// end ;
24773: PPOPN 3
24775: END
// on ResearchComplete ( tech , lab ) do var side ;
24776: LD_INT 0
24778: PPUSH
// begin side := GetSide ( lab ) ;
24779: LD_ADDR_VAR 0 3
24783: PUSH
24784: LD_VAR 0 2
24788: PPUSH
24789: CALL_OW 255
24793: ST_TO_ADDR
// if side = 2 then
24794: LD_VAR 0 3
24798: PUSH
24799: LD_INT 2
24801: EQUAL
24802: IFFALSE 24850
// begin arTech := Delete ( arTech , 1 ) ;
24804: LD_ADDR_EXP 52
24808: PUSH
24809: LD_EXP 52
24813: PPUSH
24814: LD_INT 1
24816: PPUSH
24817: CALL_OW 3
24821: ST_TO_ADDR
// if tech = tech_sibPow then
24822: LD_VAR 0 1
24826: PUSH
24827: LD_INT 21
24829: EQUAL
24830: IFFALSE 24836
// DArabTrait1 ;
24832: CALL 28897 0 0
// if tech = tech_sibEng then
24836: LD_VAR 0 1
24840: PUSH
24841: LD_INT 22
24843: EQUAL
24844: IFFALSE 24850
// DArabTrait2 ;
24846: CALL 29228 0 0
// end ; end ;
24850: PPOPN 3
24852: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
24853: LD_VAR 0 1
24857: PPUSH
24858: CALL 49806 0 1
// end ;
24862: PPOPN 1
24864: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
24865: LD_VAR 0 1
24869: PUSH
24870: LD_INT 1
24872: EQUAL
24873: PUSH
24874: LD_VAR 0 2
24878: PUSH
24879: LD_INT 2
24881: EQUAL
24882: AND
24883: PUSH
24884: LD_INT 1
24886: PPUSH
24887: LD_INT 2
24889: PPUSH
24890: CALL_OW 81
24894: PUSH
24895: LD_INT 1
24897: EQUAL
24898: AND
24899: IFFALSE 24905
// DAttackOnAlly ;
24901: CALL 26613 0 0
// end ;
24905: PPOPN 2
24907: END
// on SailEvent ( event ) do begin case event of EArabAttack :
24908: LD_VAR 0 1
24912: PUSH
24913: LD_INT 101
24915: DOUBLE
24916: EQUAL
24917: IFTRUE 24921
24919: GO 24928
24921: POP
// ArabAttack ; ERussianBaseC :
24922: CALL 7224 0 0
24926: GO 25080
24928: LD_INT 102
24930: DOUBLE
24931: EQUAL
24932: IFTRUE 24936
24934: GO 24957
24936: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
24937: LD_EXP 59
24941: PUSH
24942: LD_EXP 61
24946: UNION
24947: PPUSH
24948: LD_INT 1
24950: PPUSH
24951: CALL 10861 0 2
24955: GO 25080
24957: LD_INT 103
24959: DOUBLE
24960: EQUAL
24961: IFTRUE 24965
24963: GO 24986
24965: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
24966: LD_EXP 59
24970: PUSH
24971: LD_EXP 61
24975: UNION
24976: PPUSH
24977: LD_INT 2
24979: PPUSH
24980: CALL 10861 0 2
24984: GO 25080
24986: LD_INT 104
24988: DOUBLE
24989: EQUAL
24990: IFTRUE 24994
24992: GO 25015
24994: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
24995: LD_EXP 59
24999: PUSH
25000: LD_EXP 61
25004: UNION
25005: PPUSH
25006: LD_INT 3
25008: PPUSH
25009: CALL 10861 0 2
25013: GO 25080
25015: LD_INT 105
25017: DOUBLE
25018: EQUAL
25019: IFTRUE 25023
25021: GO 25044
25023: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
25024: LD_EXP 60
25028: PUSH
25029: LD_EXP 62
25033: UNION
25034: PPUSH
25035: LD_INT 2
25037: PPUSH
25038: CALL 12370 0 2
25042: GO 25080
25044: LD_INT 106
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25059
25052: POP
// RussianExtraAttack ; ESendRussianAttack :
25053: CALL 20205 0 0
25057: GO 25080
25059: LD_INT 107
25061: DOUBLE
25062: EQUAL
25063: IFTRUE 25067
25065: GO 25079
25067: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
25068: LD_EXP 18
25072: PPUSH
25073: CALL 21299 0 1
25077: GO 25080
25079: POP
// end ; end_of_file
25080: PPOPN 1
25082: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
25083: LD_INT 0
25085: PPUSH
25086: PPUSH
25087: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25088: LD_ADDR_VAR 0 1
25092: PUSH
25093: LD_VAR 0 1
25097: PUSH
25098: LD_EXP 23
25102: PUSH
25103: LD_EXP 24
25107: PUSH
25108: LD_EXP 25
25112: PUSH
25113: LD_EXP 26
25117: PUSH
25118: LD_EXP 27
25122: PUSH
25123: LD_EXP 28
25127: PUSH
25128: LD_EXP 29
25132: PUSH
25133: LD_EXP 30
25137: PUSH
25138: LD_EXP 31
25142: PUSH
25143: LD_EXP 32
25147: PUSH
25148: LD_EXP 33
25152: PUSH
25153: LD_EXP 34
25157: PUSH
25158: LD_EXP 35
25162: PUSH
25163: LD_EXP 36
25167: PUSH
25168: LD_EXP 37
25172: PUSH
25173: LD_EXP 38
25177: PUSH
25178: LD_EXP 39
25182: PUSH
25183: LD_EXP 40
25187: PUSH
25188: LD_EXP 42
25192: PUSH
25193: LD_EXP 44
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: DIFF
25220: ST_TO_ADDR
// if not characters then
25221: LD_VAR 0 1
25225: NOT
25226: IFFALSE 25230
// exit ;
25228: GO 25314
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
25230: LD_ADDR_VAR 0 6
25234: PUSH
25235: LD_VAR 0 1
25239: PUSH
25240: LD_INT 1
25242: PPUSH
25243: LD_VAR 0 1
25247: PPUSH
25248: CALL 56698 0 1
25252: PPUSH
25253: CALL_OW 12
25257: ARRAY
25258: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
25259: LD_VAR 0 6
25263: PPUSH
25264: CALL_OW 258
25268: PUSH
25269: LD_INT 1
25271: EQUAL
25272: IFFALSE 25290
// Say ( speaker , dialogMID ) else
25274: LD_VAR 0 6
25278: PPUSH
25279: LD_VAR 0 2
25283: PPUSH
25284: CALL_OW 88
25288: GO 25304
// Say ( speaker , dialogFID ) ;
25290: LD_VAR 0 6
25294: PPUSH
25295: LD_VAR 0 3
25299: PPUSH
25300: CALL_OW 88
// result := speaker ;
25304: LD_ADDR_VAR 0 4
25308: PUSH
25309: LD_VAR 0 6
25313: ST_TO_ADDR
// end ; end_of_file
25314: LD_VAR 0 4
25318: RET
// export function Action ; begin
25319: LD_INT 0
25321: PPUSH
// InGameOn ;
25322: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
25326: LD_INT 25
25328: PPUSH
25329: LD_INT 35
25331: PPUSH
25332: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
25336: LD_INT 1
25338: PPUSH
25339: LD_INT 5
25341: PPUSH
25342: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
25346: LD_INT 1
25348: PPUSH
25349: LD_INT 4
25351: PPUSH
25352: CALL_OW 332
// wait ( 0 0$1.5 ) ;
25356: LD_INT 52
25358: PPUSH
25359: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
25363: LD_EXP 33
25367: PPUSH
25368: CALL_OW 87
// wait ( 0 0$3 ) ;
25372: LD_INT 105
25374: PPUSH
25375: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
25379: LD_EXP 23
25383: PPUSH
25384: CALL_OW 310
25388: PPUSH
25389: CALL_OW 85
// wait ( 0 0$1 ) ;
25393: LD_INT 35
25395: PPUSH
25396: CALL_OW 67
// if IsOk ( Gary ) then
25400: LD_EXP 32
25404: PPUSH
25405: CALL_OW 302
25409: IFFALSE 25447
// begin Say ( Gary , D2-Gary-1 ) ;
25411: LD_EXP 32
25415: PPUSH
25416: LD_STRING D2-Gary-1
25418: PPUSH
25419: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
25423: LD_EXP 23
25427: PPUSH
25428: LD_STRING D2-JMM-1
25430: PPUSH
25431: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
25435: LD_EXP 32
25439: PPUSH
25440: LD_STRING D2-Gary-2
25442: PPUSH
25443: CALL_OW 88
// end ; InGameOff ;
25447: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
25451: LD_STRING M1
25453: PPUSH
25454: CALL_OW 337
// SaveForQuickRestart ;
25458: CALL_OW 22
// end ;
25462: LD_VAR 0 1
25466: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
25467: LD_EXP 23
25471: PPUSH
25472: LD_EXP 33
25476: PPUSH
25477: CALL_OW 296
25481: PUSH
25482: LD_INT 15
25484: LESS
25485: IFFALSE 26445
25487: GO 25489
25489: DISABLE
25490: LD_INT 0
25492: PPUSH
25493: PPUSH
// begin wait ( 0 0$3 ) ;
25494: LD_INT 105
25496: PPUSH
25497: CALL_OW 67
// Video ( true ) ;
25501: LD_INT 1
25503: PPUSH
25504: CALL 92259 0 1
// ComExitVehicle ( JMM ) ;
25508: LD_EXP 23
25512: PPUSH
25513: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
25517: LD_EXP 23
25521: PPUSH
25522: LD_EXP 33
25526: PPUSH
25527: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
25531: LD_EXP 23
25535: PPUSH
25536: CALL_OW 87
// if Truman then
25540: LD_EXP 43
25544: IFFALSE 25681
// begin ComMoveUnit ( Truman , JMM ) ;
25546: LD_EXP 43
25550: PPUSH
25551: LD_EXP 23
25555: PPUSH
25556: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
25560: LD_INT 35
25562: PPUSH
25563: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
25567: LD_EXP 43
25571: PPUSH
25572: LD_EXP 23
25576: PPUSH
25577: CALL_OW 296
25581: PUSH
25582: LD_INT 6
25584: LESS
25585: IFFALSE 25560
// ComTurnUnit ( Truman , JMM ) ;
25587: LD_EXP 43
25591: PPUSH
25592: LD_EXP 23
25596: PPUSH
25597: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
25601: LD_EXP 23
25605: PPUSH
25606: LD_EXP 43
25610: PPUSH
25611: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
25615: LD_EXP 43
25619: PPUSH
25620: LD_STRING D2-Tru-1
25622: PPUSH
25623: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
25627: LD_EXP 23
25631: PPUSH
25632: LD_STRING D2-JMM-Tru-1
25634: PPUSH
25635: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
25639: LD_EXP 43
25643: PPUSH
25644: LD_STRING D2-Tru-2
25646: PPUSH
25647: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
25651: LD_EXP 43
25655: PPUSH
25656: LD_INT 79
25658: PPUSH
25659: LD_INT 41
25661: PPUSH
25662: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
25666: LD_EXP 43
25670: PPUSH
25671: LD_INT 17
25673: PPUSH
25674: LD_INT 31
25676: PPUSH
25677: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
25681: LD_EXP 23
25685: PPUSH
25686: LD_EXP 33
25690: PPUSH
25691: CALL_OW 179
// p := 15 ;
25695: LD_ADDR_VAR 0 2
25699: PUSH
25700: LD_INT 15
25702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25703: LD_INT 35
25705: PPUSH
25706: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25710: LD_EXP 33
25714: PUSH
25715: LD_EXP 35
25719: PUSH
25720: LD_EXP 34
25724: PUSH
25725: LD_EXP 36
25729: PUSH
25730: LD_EXP 30
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: PPUSH
25742: LD_EXP 23
25746: PPUSH
25747: CALL_OW 112
// p := p - 1 ;
25751: LD_ADDR_VAR 0 2
25755: PUSH
25756: LD_VAR 0 2
25760: PUSH
25761: LD_INT 1
25763: MINUS
25764: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
25765: LD_EXP 23
25769: PPUSH
25770: LD_EXP 33
25774: PPUSH
25775: CALL_OW 296
25779: PUSH
25780: LD_INT 5
25782: LESS
25783: PUSH
25784: LD_VAR 0 2
25788: PUSH
25789: LD_INT 0
25791: LESSEQUAL
25792: OR
25793: IFFALSE 25703
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25795: LD_EXP 33
25799: PUSH
25800: LD_EXP 35
25804: PUSH
25805: LD_EXP 34
25809: PUSH
25810: LD_EXP 36
25814: PUSH
25815: LD_EXP 30
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: PPUSH
25827: LD_EXP 23
25831: PPUSH
25832: CALL_OW 119
// if not IsInUnit ( JMM ) then
25836: LD_EXP 23
25840: PPUSH
25841: CALL_OW 310
25845: NOT
25846: IFFALSE 25862
// ComTurnUnit ( JMM , Simms ) ;
25848: LD_EXP 23
25852: PPUSH
25853: LD_EXP 33
25857: PPUSH
25858: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
25862: LD_EXP 33
25866: PUSH
25867: LD_EXP 35
25871: PUSH
25872: LD_EXP 34
25876: PUSH
25877: LD_EXP 36
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: PPUSH
25888: LD_EXP 23
25892: PPUSH
25893: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
25897: LD_EXP 23
25901: PUSH
25902: LD_EXP 33
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PPUSH
25911: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
25915: LD_EXP 33
25919: PPUSH
25920: LD_STRING D2a-Sim-1
25922: PPUSH
25923: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
25927: LD_EXP 23
25931: PPUSH
25932: LD_STRING D2a-JMM-1
25934: PPUSH
25935: CALL_OW 88
// if IsOk ( Joan ) then
25939: LD_EXP 35
25943: PPUSH
25944: CALL_OW 302
25948: IFFALSE 26026
// begin if not IsInUnit ( JMM ) then
25950: LD_EXP 23
25954: PPUSH
25955: CALL_OW 310
25959: NOT
25960: IFFALSE 25976
// ComTurnUnit ( JMM , Joan ) ;
25962: LD_EXP 23
25966: PPUSH
25967: LD_EXP 35
25971: PPUSH
25972: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
25976: LD_EXP 35
25980: PPUSH
25981: LD_EXP 23
25985: PPUSH
25986: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
25990: LD_EXP 35
25994: PPUSH
25995: LD_STRING D2b-Joan-1
25997: PPUSH
25998: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
26002: LD_EXP 23
26006: PPUSH
26007: LD_STRING D2b-JMM-1
26009: PPUSH
26010: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
26014: LD_EXP 35
26018: PPUSH
26019: LD_STRING D2b-Joan-2
26021: PPUSH
26022: CALL_OW 88
// end ; if IsOk ( Denis ) then
26026: LD_EXP 34
26030: PPUSH
26031: CALL_OW 302
26035: IFFALSE 26089
// begin if not IsInUnit ( JMM ) then
26037: LD_EXP 23
26041: PPUSH
26042: CALL_OW 310
26046: NOT
26047: IFFALSE 26063
// ComTurnUnit ( JMM , Denis ) ;
26049: LD_EXP 23
26053: PPUSH
26054: LD_EXP 34
26058: PPUSH
26059: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
26063: LD_EXP 34
26067: PPUSH
26068: LD_EXP 23
26072: PPUSH
26073: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
26077: LD_EXP 34
26081: PPUSH
26082: LD_STRING D2c-Den-1
26084: PPUSH
26085: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
26089: LD_EXP 30
26093: PPUSH
26094: CALL_OW 302
26098: PUSH
26099: LD_STRING 08_Kikuchi
26101: PPUSH
26102: CALL_OW 28
26106: NOT
26107: AND
26108: IFFALSE 26203
// begin repeat wait ( 0 0$1 ) ;
26110: LD_INT 35
26112: PPUSH
26113: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
26117: LD_EXP 30
26121: PPUSH
26122: LD_EXP 23
26126: PPUSH
26127: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
26131: LD_EXP 23
26135: PPUSH
26136: LD_EXP 30
26140: PPUSH
26141: CALL_OW 296
26145: PUSH
26146: LD_INT 5
26148: LESS
26149: IFFALSE 26110
// ComTurnUnit ( Kikuchi , JMM ) ;
26151: LD_EXP 30
26155: PPUSH
26156: LD_EXP 23
26160: PPUSH
26161: CALL_OW 119
// if not IsInUnit ( JMM ) then
26165: LD_EXP 23
26169: PPUSH
26170: CALL_OW 310
26174: NOT
26175: IFFALSE 26191
// ComTurnUnit ( JMM , Kikuchi ) ;
26177: LD_EXP 23
26181: PPUSH
26182: LD_EXP 30
26186: PPUSH
26187: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
26191: LD_EXP 30
26195: PPUSH
26196: LD_STRING D3b-Yam-1
26198: PPUSH
26199: CALL_OW 88
// end ; if IsOk ( Khatam ) then
26203: LD_EXP 36
26207: PPUSH
26208: CALL_OW 302
26212: IFFALSE 26278
// begin if not IsInUnit ( JMM ) then
26214: LD_EXP 23
26218: PPUSH
26219: CALL_OW 310
26223: NOT
26224: IFFALSE 26240
// ComTurnUnit ( JMM , Khatam ) ;
26226: LD_EXP 23
26230: PPUSH
26231: LD_EXP 36
26235: PPUSH
26236: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
26240: LD_EXP 36
26244: PPUSH
26245: LD_EXP 23
26249: PPUSH
26250: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
26254: LD_EXP 23
26258: PPUSH
26259: LD_STRING D2c-JMM-1
26261: PPUSH
26262: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
26266: LD_EXP 36
26270: PPUSH
26271: LD_STRING D2c-Khat-1
26273: PPUSH
26274: CALL_OW 88
// end ; Video ( false ) ;
26278: LD_INT 0
26280: PPUSH
26281: CALL 92259 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
26285: LD_INT 22
26287: PUSH
26288: LD_INT 4
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PPUSH
26295: CALL_OW 69
26299: PUSH
26300: LD_EXP 43
26304: DIFF
26305: PPUSH
26306: LD_INT 1
26308: PPUSH
26309: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
26313: LD_STRING M1a
26315: PPUSH
26316: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
26320: LD_INT 0
26322: PPUSH
26323: LD_INT 1
26325: PPUSH
26326: LD_INT 1
26328: PPUSH
26329: CALL_OW 324
// joinedToEpsilon := true ;
26333: LD_ADDR_EXP 7
26337: PUSH
26338: LD_INT 1
26340: ST_TO_ADDR
// wait ( 0 0$30 ) ;
26341: LD_INT 1050
26343: PPUSH
26344: CALL_OW 67
// SpawnConvoy ;
26348: CALL 10397 0 0
// wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26352: LD_INT 25200
26354: PUSH
26355: LD_INT 2100
26357: PUSH
26358: LD_OWVAR 67
26362: MUL
26363: MINUS
26364: PPUSH
26365: CALL_OW 67
// firstAttack := true ;
26369: LD_ADDR_EXP 16
26373: PUSH
26374: LD_INT 1
26376: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26377: LD_INT 107
26379: PPUSH
26380: CALL_OW 427
// for i := 1 to Difficulty do
26384: LD_ADDR_VAR 0 1
26388: PUSH
26389: DOUBLE
26390: LD_INT 1
26392: DEC
26393: ST_TO_ADDR
26394: LD_OWVAR 67
26398: PUSH
26399: FOR_TO
26400: IFFALSE 26443
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26402: LD_INT 25200
26404: PUSH
26405: LD_INT 2100
26407: PUSH
26408: LD_OWVAR 67
26412: MUL
26413: MINUS
26414: PPUSH
26415: CALL_OW 67
// if not ruActiveAttacks then
26419: LD_EXP 22
26423: NOT
26424: IFFALSE 26434
// ruActiveAttacks := true ;
26426: LD_ADDR_EXP 22
26430: PUSH
26431: LD_INT 1
26433: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26434: LD_INT 107
26436: PPUSH
26437: CALL_OW 427
// end ;
26441: GO 26399
26443: POP
26444: POP
// end ;
26445: PPOPN 2
26447: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
26448: LD_EXP 43
26452: PPUSH
26453: CALL_OW 302
26457: PUSH
26458: LD_EXP 7
26462: AND
26463: IFFALSE 26534
26465: GO 26467
26467: DISABLE
// begin enable ;
26468: ENABLE
// if not HasTask ( Truman ) then
26469: LD_EXP 43
26473: PPUSH
26474: CALL_OW 314
26478: NOT
26479: IFFALSE 26493
// ComMoveToArea ( Truman , removeArea ) ;
26481: LD_EXP 43
26485: PPUSH
26486: LD_INT 10
26488: PPUSH
26489: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
26493: LD_EXP 43
26497: PPUSH
26498: LD_INT 17
26500: PPUSH
26501: LD_INT 32
26503: PPUSH
26504: CALL_OW 307
26508: PUSH
26509: LD_EXP 43
26513: PPUSH
26514: LD_INT 10
26516: PPUSH
26517: CALL_OW 308
26521: OR
26522: IFFALSE 26534
// begin RemoveUnit ( Truman ) ;
26524: LD_EXP 43
26528: PPUSH
26529: CALL_OW 64
// disable ;
26533: DISABLE
// end ; end ;
26534: END
// export function DTankTeleport ( x , y ) ; begin
26535: LD_INT 0
26537: PPUSH
// DialogueOn ;
26538: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
26542: LD_VAR 0 1
26546: PPUSH
26547: LD_VAR 0 2
26551: PPUSH
26552: CALL_OW 86
// if IsOk ( Cyrus ) then
26556: LD_EXP 27
26560: PPUSH
26561: CALL_OW 302
26565: IFFALSE 26581
// Say ( Cyrus , D10-Cyrus-1 ) else
26567: LD_EXP 27
26571: PPUSH
26572: LD_STRING D10-Cyrus-1
26574: PPUSH
26575: CALL_OW 88
26579: GO 26604
// if IsOk ( JMM ) then
26581: LD_EXP 23
26585: PPUSH
26586: CALL_OW 302
26590: IFFALSE 26604
// Say ( JMM , D10-JMM-1 ) ;
26592: LD_EXP 23
26596: PPUSH
26597: LD_STRING D10-JMM-1
26599: PPUSH
26600: CALL_OW 88
// DialogueOff ;
26604: CALL_OW 7
// end ;
26608: LD_VAR 0 3
26612: RET
// export function DAttackOnAlly ; begin
26613: LD_INT 0
26615: PPUSH
// DialogueOn ;
26616: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26620: LD_INT 10
26622: PPUSH
26623: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
26627: LD_EXP 44
26631: PPUSH
26632: LD_STRING D6b-Pow-1
26634: PPUSH
26635: CALL_OW 94
// YouLost ( Powell ) ;
26639: LD_STRING Powell
26641: PPUSH
26642: CALL_OW 104
// DialogueOff ;
26646: CALL_OW 7
// end ;
26650: LD_VAR 0 1
26654: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
26655: LD_INT 5
26657: PPUSH
26658: LD_INT 22
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 21
26670: PUSH
26671: LD_INT 3
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 70
26686: PUSH
26687: LD_INT 5
26689: PPUSH
26690: LD_INT 22
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 21
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PPUSH
26714: CALL_OW 70
26718: OR
26719: PUSH
26720: LD_INT 1
26722: PPUSH
26723: LD_INT 2
26725: PPUSH
26726: CALL_OW 81
26730: PUSH
26731: LD_INT 1
26733: EQUAL
26734: AND
26735: IFFALSE 26970
26737: GO 26739
26739: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26740: LD_INT 5
26742: PPUSH
26743: LD_INT 22
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 21
26755: PUSH
26756: LD_INT 3
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PPUSH
26767: CALL_OW 70
26771: PUSH
26772: LD_INT 5
26774: PPUSH
26775: LD_INT 22
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 21
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PPUSH
26799: CALL_OW 70
26803: OR
26804: PUSH
26805: LD_INT 1
26807: PPUSH
26808: LD_INT 2
26810: PPUSH
26811: CALL_OW 81
26815: PUSH
26816: LD_INT 1
26818: EQUAL
26819: AND
26820: IFFALSE 26829
// Query ( QAttack ) ;
26822: LD_STRING QAttack
26824: PPUSH
26825: CALL_OW 97
// wait ( 0 0$20 ) ;
26829: LD_INT 700
26831: PPUSH
26832: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26836: LD_INT 350
26838: PPUSH
26839: CALL_OW 67
// if arabianAttack then
26843: LD_EXP 4
26847: IFFALSE 26851
// exit ;
26849: GO 26970
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26851: LD_INT 5
26853: PPUSH
26854: LD_INT 22
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 21
26866: PUSH
26867: LD_INT 3
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PPUSH
26878: CALL_OW 70
26882: PUSH
26883: LD_INT 5
26885: PPUSH
26886: LD_INT 22
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 21
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PPUSH
26910: CALL_OW 70
26914: OR
26915: PUSH
26916: LD_INT 1
26918: PPUSH
26919: LD_INT 2
26921: PPUSH
26922: CALL_OW 81
26926: PUSH
26927: LD_INT 1
26929: EQUAL
26930: AND
26931: IFFALSE 26836
// InGameOn ;
26933: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26937: LD_INT 73
26939: PPUSH
26940: LD_INT 18
26942: PPUSH
26943: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26947: LD_EXP 44
26951: PPUSH
26952: LD_STRING D6b-Pow-1
26954: PPUSH
26955: CALL_OW 94
// YouLost ( Powell ) ;
26959: LD_STRING Powell
26961: PPUSH
26962: CALL_OW 104
// InGameOff ;
26966: CALL_OW 9
// end ;
26970: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
26971: LD_INT 12
26973: PPUSH
26974: LD_INT 1
26976: PPUSH
26977: CALL_OW 321
26981: PUSH
26982: LD_INT 2
26984: EQUAL
26985: IFFALSE 26997
26987: GO 26989
26989: DISABLE
// ChangeMissionObjectives ( M2b ) ;
26990: LD_STRING M2b
26992: PPUSH
26993: CALL_OW 337
26997: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
26998: LD_INT 32
27000: PPUSH
27001: LD_INT 1
27003: PPUSH
27004: CALL_OW 321
27008: PUSH
27009: LD_INT 2
27011: EQUAL
27012: IFFALSE 27024
27014: GO 27016
27016: DISABLE
// ChangeMissionObjectives ( M2c ) ;
27017: LD_STRING M2c
27019: PPUSH
27020: CALL_OW 337
27024: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
27025: LD_EXP 4
27029: PUSH
27030: LD_EXP 12
27034: AND
27035: PUSH
27036: LD_INT 22
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 21
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PPUSH
27060: CALL_OW 69
27064: PUSH
27065: LD_INT 0
27067: EQUAL
27068: AND
27069: PUSH
27070: LD_EXP 58
27074: PPUSH
27075: LD_INT 50
27077: PUSH
27078: EMPTY
27079: LIST
27080: PPUSH
27081: CALL_OW 72
27085: PUSH
27086: LD_INT 0
27088: EQUAL
27089: AND
27090: PUSH
27091: LD_EXP 57
27095: PPUSH
27096: LD_INT 50
27098: PUSH
27099: EMPTY
27100: LIST
27101: PPUSH
27102: CALL_OW 72
27106: PUSH
27107: LD_INT 0
27109: EQUAL
27110: AND
27111: IFFALSE 27131
27113: GO 27115
27115: DISABLE
// begin arabianDefeated := true ;
27116: LD_ADDR_EXP 8
27120: PUSH
27121: LD_INT 1
27123: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
27124: LD_STRING M4a
27126: PPUSH
27127: CALL_OW 337
// end ;
27131: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
27132: LD_INT 54
27134: PPUSH
27135: LD_INT 1
27137: PPUSH
27138: CALL_OW 321
27142: PUSH
27143: LD_INT 2
27145: EQUAL
27146: PUSH
27147: LD_INT 55
27149: PPUSH
27150: LD_INT 1
27152: PPUSH
27153: CALL_OW 321
27157: PUSH
27158: LD_INT 2
27160: EQUAL
27161: AND
27162: PUSH
27163: LD_INT 21
27165: PPUSH
27166: LD_INT 1
27168: PPUSH
27169: CALL_OW 321
27173: PUSH
27174: LD_INT 2
27176: EQUAL
27177: AND
27178: PUSH
27179: LD_INT 22
27181: PPUSH
27182: LD_INT 1
27184: PPUSH
27185: CALL_OW 321
27189: PUSH
27190: LD_INT 2
27192: EQUAL
27193: AND
27194: IFFALSE 27206
27196: GO 27198
27198: DISABLE
// ChangeMissionObjectives ( M2a ) ;
27199: LD_STRING M2a
27201: PPUSH
27202: CALL_OW 337
27206: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
27207: LD_INT 22
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 3
27219: PUSH
27220: LD_INT 57
27222: PUSH
27223: EMPTY
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 63
27232: PUSH
27233: LD_INT 11
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: LIST
27244: PPUSH
27245: CALL_OW 69
27249: IFFALSE 28475
27251: GO 27253
27253: DISABLE
27254: LD_INT 0
27256: PPUSH
27257: PPUSH
27258: PPUSH
27259: PPUSH
27260: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_EXP 32
27270: PPUSH
27271: CALL_OW 302
27275: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
27276: LD_ADDR_VAR 0 2
27280: PUSH
27281: LD_EXP 39
27285: PPUSH
27286: CALL_OW 302
27290: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27291: LD_ADDR_VAR 0 3
27295: PUSH
27296: LD_INT 22
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 50
27308: PUSH
27309: EMPTY
27310: LIST
27311: PUSH
27312: LD_INT 25
27314: PUSH
27315: LD_INT 4
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 26
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: PPUSH
27338: CALL_OW 69
27342: PUSH
27343: LD_EXP 23
27347: PUSH
27348: LD_EXP 24
27352: PUSH
27353: LD_EXP 25
27357: PUSH
27358: LD_EXP 26
27362: PUSH
27363: LD_EXP 27
27367: PUSH
27368: LD_EXP 28
27372: PUSH
27373: LD_EXP 29
27377: PUSH
27378: LD_EXP 30
27382: PUSH
27383: LD_EXP 31
27387: PUSH
27388: LD_EXP 32
27392: PUSH
27393: LD_EXP 33
27397: PUSH
27398: LD_EXP 34
27402: PUSH
27403: LD_EXP 35
27407: PUSH
27408: LD_EXP 36
27412: PUSH
27413: LD_EXP 37
27417: PUSH
27418: LD_EXP 38
27422: PUSH
27423: LD_EXP 39
27427: PUSH
27428: LD_EXP 40
27432: PUSH
27433: LD_EXP 42
27437: PUSH
27438: LD_EXP 44
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: DIFF
27465: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27466: LD_ADDR_VAR 0 4
27470: PUSH
27471: LD_INT 22
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 50
27483: PUSH
27484: EMPTY
27485: LIST
27486: PUSH
27487: LD_INT 26
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: LD_INT 25
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 25
27512: PUSH
27513: LD_INT 2
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 25
27522: PUSH
27523: LD_INT 3
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: PPUSH
27542: CALL_OW 69
27546: PUSH
27547: LD_EXP 23
27551: PUSH
27552: LD_EXP 24
27556: PUSH
27557: LD_EXP 25
27561: PUSH
27562: LD_EXP 26
27566: PUSH
27567: LD_EXP 27
27571: PUSH
27572: LD_EXP 28
27576: PUSH
27577: LD_EXP 29
27581: PUSH
27582: LD_EXP 30
27586: PUSH
27587: LD_EXP 31
27591: PUSH
27592: LD_EXP 32
27596: PUSH
27597: LD_EXP 33
27601: PUSH
27602: LD_EXP 34
27606: PUSH
27607: LD_EXP 35
27611: PUSH
27612: LD_EXP 36
27616: PUSH
27617: LD_EXP 37
27621: PUSH
27622: LD_EXP 38
27626: PUSH
27627: LD_EXP 39
27631: PUSH
27632: LD_EXP 40
27636: PUSH
27637: LD_EXP 42
27641: PUSH
27642: LD_EXP 44
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: DIFF
27669: ST_TO_ADDR
// if tmp1 then
27670: LD_VAR 0 3
27674: IFFALSE 27690
// tmp1 := tmp1 [ 1 ] ;
27676: LD_ADDR_VAR 0 3
27680: PUSH
27681: LD_VAR 0 3
27685: PUSH
27686: LD_INT 1
27688: ARRAY
27689: ST_TO_ADDR
// if tmp2 then
27690: LD_VAR 0 4
27694: IFFALSE 27710
// tmp2 := tmp2 [ 1 ] ;
27696: LD_ADDR_VAR 0 4
27700: PUSH
27701: LD_VAR 0 4
27705: PUSH
27706: LD_INT 1
27708: ARRAY
27709: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
27710: LD_VAR 0 1
27714: PUSH
27715: LD_VAR 0 4
27719: OR
27720: PUSH
27721: LD_VAR 0 2
27725: PUSH
27726: LD_VAR 0 3
27730: OR
27731: AND
27732: IFFALSE 27926
// begin DialogueOn ;
27734: CALL_OW 6
// if deltaSpeaker then
27738: LD_VAR 0 2
27742: IFFALSE 27758
// Say ( DeltaDoctor , D3-Sci1-1 ) else
27744: LD_EXP 39
27748: PPUSH
27749: LD_STRING D3-Sci1-1
27751: PPUSH
27752: CALL_OW 88
27756: GO 27770
// Say ( tmp1 , D3-Sci1-1 ) ;
27758: LD_VAR 0 3
27762: PPUSH
27763: LD_STRING D3-Sci1-1
27765: PPUSH
27766: CALL_OW 88
// if garySpeaker then
27770: LD_VAR 0 1
27774: IFFALSE 27790
// Say ( Gary , D3-Gary-1 ) else
27776: LD_EXP 32
27780: PPUSH
27781: LD_STRING D3-Gary-1
27783: PPUSH
27784: CALL_OW 88
27788: GO 27802
// Say ( tmp2 , D3-Gary-1 ) ;
27790: LD_VAR 0 4
27794: PPUSH
27795: LD_STRING D3-Gary-1
27797: PPUSH
27798: CALL_OW 88
// if deltaSpeaker then
27802: LD_VAR 0 2
27806: IFFALSE 27822
// Say ( DeltaDoctor , D3-Sci1-2 ) else
27808: LD_EXP 39
27812: PPUSH
27813: LD_STRING D3-Sci1-2
27815: PPUSH
27816: CALL_OW 88
27820: GO 27834
// Say ( tmp1 , D3-Sci1-2 ) ;
27822: LD_VAR 0 3
27826: PPUSH
27827: LD_STRING D3-Sci1-2
27829: PPUSH
27830: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
27834: LD_EXP 23
27838: PPUSH
27839: LD_STRING D3-JMM-2
27841: PPUSH
27842: CALL_OW 88
// if deltaSpeaker then
27846: LD_VAR 0 2
27850: IFFALSE 27866
// Say ( DeltaDoctor , D3-Sci1-3 ) else
27852: LD_EXP 39
27856: PPUSH
27857: LD_STRING D3-Sci1-3
27859: PPUSH
27860: CALL_OW 88
27864: GO 27878
// Say ( tmp1 , D3-Sci1-3 ) ;
27866: LD_VAR 0 3
27870: PPUSH
27871: LD_STRING D3-Sci1-3
27873: PPUSH
27874: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
27878: LD_EXP 23
27882: PPUSH
27883: LD_STRING D3-JMM-3
27885: PPUSH
27886: CALL_OW 88
// if deltaSpeaker then
27890: LD_VAR 0 2
27894: IFFALSE 27910
// Say ( DeltaDoctor , D3-Sci1-4 ) else
27896: LD_EXP 39
27900: PPUSH
27901: LD_STRING D3-Sci1-4
27903: PPUSH
27904: CALL_OW 88
27908: GO 27922
// Say ( tmp1 , D3-Sci1-4 ) ;
27910: LD_VAR 0 3
27914: PPUSH
27915: LD_STRING D3-Sci1-4
27917: PPUSH
27918: CALL_OW 88
// DialogueOff ;
27922: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
27926: LD_INT 12
27928: PPUSH
27929: LD_INT 1
27931: PPUSH
27932: LD_INT 1
27934: PPUSH
27935: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
27939: LD_INT 40
27941: PPUSH
27942: LD_INT 1
27944: PPUSH
27945: LD_INT 1
27947: PPUSH
27948: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
27952: LD_INT 32
27954: PPUSH
27955: LD_INT 1
27957: PPUSH
27958: LD_INT 1
27960: PPUSH
27961: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
27965: LD_INT 33
27967: PPUSH
27968: LD_INT 1
27970: PPUSH
27971: LD_INT 1
27973: PPUSH
27974: CALL_OW 324
// SetRestrict ( b_lab_computer , 1 , true ) ;
27978: LD_INT 12
27980: PPUSH
27981: LD_INT 1
27983: PPUSH
27984: LD_INT 1
27986: PPUSH
27987: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
27991: LD_STRING M2
27993: PPUSH
27994: CALL_OW 337
// wait ( 3 3$0 ) ;
27998: LD_INT 6300
28000: PPUSH
28001: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
28005: LD_INT 35
28007: PPUSH
28008: CALL_OW 67
// until not InBattle ( 1 ) ;
28012: LD_INT 1
28014: PPUSH
28015: CALL_OW 463
28019: NOT
28020: IFFALSE 28005
// if IsOk ( Simms ) and deltaSpeaker then
28022: LD_EXP 33
28026: PPUSH
28027: CALL_OW 302
28031: PUSH
28032: LD_VAR 0 2
28036: AND
28037: IFFALSE 28206
// begin DialogueOn ;
28039: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28043: LD_EXP 33
28047: PPUSH
28048: LD_STRING D3a-Sim-1
28050: PPUSH
28051: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
28055: LD_EXP 39
28059: PPUSH
28060: LD_STRING D3a-Sci1-1
28062: PPUSH
28063: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28067: LD_EXP 33
28071: PPUSH
28072: LD_STRING D3a-Sim-2
28074: PPUSH
28075: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
28079: LD_EXP 39
28083: PPUSH
28084: LD_STRING D3a-Sci1-2
28086: PPUSH
28087: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28091: LD_EXP 33
28095: PPUSH
28096: LD_STRING D3a-Sim-3
28098: PPUSH
28099: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
28103: LD_EXP 39
28107: PPUSH
28108: LD_STRING D3a-Sci1-3
28110: PPUSH
28111: CALL_OW 88
// if IsOK ( Joan ) then
28115: LD_EXP 35
28119: PPUSH
28120: CALL_OW 302
28124: IFFALSE 28140
// Say ( Simms , D3a-Sim-4 ) else
28126: LD_EXP 33
28130: PPUSH
28131: LD_STRING D3a-Sim-4
28133: PPUSH
28134: CALL_OW 88
28138: GO 28152
// Say ( Simms , D3a-Sim-4a ) ;
28140: LD_EXP 33
28144: PPUSH
28145: LD_STRING D3a-Sim-4a
28147: PPUSH
28148: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
28152: LD_EXP 39
28156: PPUSH
28157: LD_STRING D3a-Sci1-4
28159: PPUSH
28160: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28164: LD_EXP 33
28168: PPUSH
28169: LD_STRING D3a-Sim-5
28171: PPUSH
28172: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
28176: LD_EXP 39
28180: PPUSH
28181: LD_STRING D3a-Sci1-5
28183: PPUSH
28184: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28188: LD_EXP 33
28192: PPUSH
28193: LD_STRING D3a-Sim-6
28195: PPUSH
28196: CALL_OW 88
// DialogueOff ;
28200: CALL_OW 7
// end else
28204: GO 28475
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
28206: LD_ADDR_VAR 0 5
28210: PUSH
28211: LD_INT 22
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 26
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 25
28233: PUSH
28234: LD_INT 4
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: LIST
28245: PPUSH
28246: CALL_OW 69
28250: PUSH
28251: LD_EXP 23
28255: PUSH
28256: LD_EXP 29
28260: PUSH
28261: LD_EXP 28
28265: PUSH
28266: LD_EXP 33
28270: PUSH
28271: LD_EXP 36
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: DIFF
28283: ST_TO_ADDR
// if tmp3 then
28284: LD_VAR 0 5
28288: IFFALSE 28475
// begin DialogueOn ;
28290: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28294: LD_EXP 33
28298: PPUSH
28299: LD_STRING D3a-Sim-1
28301: PPUSH
28302: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
28306: LD_VAR 0 5
28310: PUSH
28311: LD_INT 1
28313: ARRAY
28314: PPUSH
28315: LD_STRING D3a-Sci1-1
28317: PPUSH
28318: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28322: LD_EXP 33
28326: PPUSH
28327: LD_STRING D3a-Sim-2
28329: PPUSH
28330: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
28334: LD_VAR 0 5
28338: PUSH
28339: LD_INT 1
28341: ARRAY
28342: PPUSH
28343: LD_STRING D3a-Sci1-2
28345: PPUSH
28346: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28350: LD_EXP 33
28354: PPUSH
28355: LD_STRING D3a-Sim-3
28357: PPUSH
28358: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
28362: LD_VAR 0 5
28366: PUSH
28367: LD_INT 1
28369: ARRAY
28370: PPUSH
28371: LD_STRING D3a-Sci1-3
28373: PPUSH
28374: CALL_OW 88
// if IsOK ( Joan ) then
28378: LD_EXP 35
28382: PPUSH
28383: CALL_OW 302
28387: IFFALSE 28403
// Say ( Simms , D3a-Sim-4 ) else
28389: LD_EXP 33
28393: PPUSH
28394: LD_STRING D3a-Sim-4
28396: PPUSH
28397: CALL_OW 88
28401: GO 28415
// Say ( Simms , D3a-Sim-4a ) ;
28403: LD_EXP 33
28407: PPUSH
28408: LD_STRING D3a-Sim-4a
28410: PPUSH
28411: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
28415: LD_VAR 0 5
28419: PUSH
28420: LD_INT 1
28422: ARRAY
28423: PPUSH
28424: LD_STRING D3a-Sci1-4
28426: PPUSH
28427: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28431: LD_EXP 33
28435: PPUSH
28436: LD_STRING D3a-Sim-5
28438: PPUSH
28439: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
28443: LD_VAR 0 5
28447: PUSH
28448: LD_INT 1
28450: ARRAY
28451: PPUSH
28452: LD_STRING D3a-Sci1-5
28454: PPUSH
28455: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28459: LD_EXP 33
28463: PPUSH
28464: LD_STRING D3a-Sim-6
28466: PPUSH
28467: CALL_OW 88
// DialogueOff ;
28471: CALL_OW 7
// end ; end ; end ;
28475: PPOPN 5
28477: END
// export function DRussianNextAttack ; begin
28478: LD_INT 0
28480: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28481: LD_EXP 40
28485: PPUSH
28486: LD_STRING D4-FSol1-2
28488: PPUSH
28489: CALL_OW 94
// end ;
28493: LD_VAR 0 1
28497: RET
// export function DRussianConvoy ; begin
28498: LD_INT 0
28500: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
28501: LD_EXP 40
28505: PPUSH
28506: LD_STRING D4-FSol1-1
28508: PPUSH
28509: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
28513: LD_STRING M3
28515: PPUSH
28516: CALL_OW 337
// end ;
28520: LD_VAR 0 1
28524: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
28525: LD_INT 0
28527: PPUSH
// CenterNowOnUnits ( unit ) ;
28528: LD_VAR 0 1
28532: PPUSH
28533: CALL_OW 87
// DialogueOn ;
28537: CALL_OW 6
// if IsOK ( Cyrus ) then
28541: LD_EXP 27
28545: PPUSH
28546: CALL_OW 302
28550: IFFALSE 28566
// Say ( Cyrus , D9a-Cyrus-1 ) else
28552: LD_EXP 27
28556: PPUSH
28557: LD_STRING D9a-Cyrus-1
28559: PPUSH
28560: CALL_OW 88
28564: GO 28688
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
28566: LD_INT 22
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 26
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: LD_INT 25
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 25
28601: PUSH
28602: LD_INT 2
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 25
28611: PUSH
28612: LD_INT 3
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 25
28621: PUSH
28622: LD_INT 4
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 25
28631: PUSH
28632: LD_INT 5
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 69
28656: PUSH
28657: LD_EXP 23
28661: PUSH
28662: LD_EXP 36
28666: PUSH
28667: LD_EXP 27
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: DIFF
28677: PPUSH
28678: LD_STRING D9a-Sol1-1
28680: PPUSH
28681: LD_STRING D9a-Sol1-1
28683: PPUSH
28684: CALL 25083 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
28688: LD_INT 22
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 26
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: LD_INT 25
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 25
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 25
28733: PUSH
28734: LD_INT 3
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 25
28743: PUSH
28744: LD_INT 4
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 25
28753: PUSH
28754: LD_INT 5
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: PPUSH
28774: CALL_OW 69
28778: PUSH
28779: LD_EXP 23
28783: PUSH
28784: LD_EXP 36
28788: PUSH
28789: LD_EXP 27
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: DIFF
28799: PPUSH
28800: LD_STRING D9b-Sol1-1
28802: PPUSH
28803: LD_STRING D9b-Sol1-1
28805: PPUSH
28806: CALL 25083 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
28810: LD_STRING 09_arInfo
28812: PPUSH
28813: LD_INT 0
28815: PPUSH
28816: CALL_OW 30
28820: IFFALSE 28834
// Say ( JMM , D9a-JMM-1 ) ;
28822: LD_EXP 23
28826: PPUSH
28827: LD_STRING D9a-JMM-1
28829: PPUSH
28830: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
28834: LD_EXP 23
28838: PPUSH
28839: LD_STRING D9c-JMM-1
28841: PPUSH
28842: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
28846: LD_INT 22
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 25
28858: PUSH
28859: LD_INT 5
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PPUSH
28870: CALL_OW 69
28874: IFFALSE 28888
// Say ( JMM , D9c-JMM-1a ) ;
28876: LD_EXP 23
28880: PPUSH
28881: LD_STRING D9c-JMM-1a
28883: PPUSH
28884: CALL_OW 88
// DialogueOff ;
28888: CALL_OW 7
// end ;
28892: LD_VAR 0 2
28896: RET
// export function DArabTrait1 ; var tmp ; begin
28897: LD_INT 0
28899: PPUSH
28900: PPUSH
// if IsOk ( DeltaDoctor ) then
28901: LD_EXP 39
28905: PPUSH
28906: CALL_OW 302
28910: IFFALSE 28924
// tmp := DeltaDoctor else
28912: LD_ADDR_VAR 0 2
28916: PUSH
28917: LD_EXP 39
28921: ST_TO_ADDR
28922: GO 29122
// if IsOk ( Denis ) then
28924: LD_EXP 34
28928: PPUSH
28929: CALL_OW 302
28933: IFFALSE 28947
// tmp := Denis else
28935: LD_ADDR_VAR 0 2
28939: PUSH
28940: LD_EXP 34
28944: ST_TO_ADDR
28945: GO 29122
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
28947: LD_ADDR_VAR 0 2
28951: PUSH
28952: LD_INT 22
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 50
28964: PUSH
28965: EMPTY
28966: LIST
28967: PUSH
28968: LD_INT 25
28970: PUSH
28971: LD_INT 4
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 26
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: PPUSH
28994: CALL_OW 69
28998: PUSH
28999: LD_EXP 23
29003: PUSH
29004: LD_EXP 24
29008: PUSH
29009: LD_EXP 25
29013: PUSH
29014: LD_EXP 26
29018: PUSH
29019: LD_EXP 27
29023: PUSH
29024: LD_EXP 28
29028: PUSH
29029: LD_EXP 29
29033: PUSH
29034: LD_EXP 30
29038: PUSH
29039: LD_EXP 31
29043: PUSH
29044: LD_EXP 32
29048: PUSH
29049: LD_EXP 33
29053: PUSH
29054: LD_EXP 34
29058: PUSH
29059: LD_EXP 35
29063: PUSH
29064: LD_EXP 36
29068: PUSH
29069: LD_EXP 37
29073: PUSH
29074: LD_EXP 38
29078: PUSH
29079: LD_EXP 39
29083: PUSH
29084: LD_EXP 40
29088: PUSH
29089: LD_EXP 42
29093: PUSH
29094: LD_EXP 44
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: DIFF
29121: ST_TO_ADDR
// if not tmp then
29122: LD_VAR 0 2
29126: NOT
29127: IFFALSE 29131
// exit ;
29129: GO 29223
// DialogueOn ;
29131: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
29135: LD_EXP 23
29139: PPUSH
29140: LD_STRING D6-JMM-1
29142: PPUSH
29143: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
29147: LD_VAR 0 2
29151: PPUSH
29152: LD_STRING D6-Sci1-1
29154: PPUSH
29155: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
29159: LD_EXP 23
29163: PPUSH
29164: LD_STRING D6-JMM-2
29166: PPUSH
29167: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
29171: LD_VAR 0 2
29175: PPUSH
29176: LD_STRING D6-Sci1-2
29178: PPUSH
29179: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
29183: LD_EXP 23
29187: PPUSH
29188: LD_STRING D6-JMM-3
29190: PPUSH
29191: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
29195: LD_VAR 0 2
29199: PPUSH
29200: LD_STRING D6-Sci1-3
29202: PPUSH
29203: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
29207: LD_EXP 23
29211: PPUSH
29212: LD_STRING D6-JMM-4
29214: PPUSH
29215: CALL_OW 88
// DialogueOff ;
29219: CALL_OW 7
// end ;
29223: LD_VAR 0 1
29227: RET
// export function DArabTrait2 ; begin
29228: LD_INT 0
29230: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
29231: LD_EXP 36
29235: PPUSH
29236: CALL_OW 305
29240: NOT
29241: PUSH
29242: LD_EXP 51
29246: PPUSH
29247: CALL_OW 302
29251: NOT
29252: OR
29253: PUSH
29254: LD_EXP 50
29258: PPUSH
29259: CALL_OW 302
29263: NOT
29264: OR
29265: IFFALSE 29269
// exit ;
29267: GO 29325
// DialogueOn ;
29269: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
29273: LD_EXP 51
29277: PPUSH
29278: LD_STRING D5-Ar1-1
29280: PPUSH
29281: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
29285: LD_EXP 50
29289: PPUSH
29290: LD_STRING D5-Diet-1
29292: PPUSH
29293: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
29297: LD_EXP 51
29301: PPUSH
29302: LD_STRING D5-Ar1-2
29304: PPUSH
29305: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
29309: LD_EXP 50
29313: PPUSH
29314: LD_STRING D5-Diet-2
29316: PPUSH
29317: CALL_OW 88
// DialogueOff ;
29321: CALL_OW 7
// end ;
29325: LD_VAR 0 1
29329: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
29330: LD_EXP 4
29334: IFFALSE 31047
29336: GO 29338
29338: DISABLE
29339: LD_INT 0
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
29349: LD_INT 2
29351: PPUSH
29352: LD_INT 3
29354: PPUSH
29355: LD_INT 1
29357: PPUSH
29358: LD_INT 1
29360: PPUSH
29361: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
29365: LD_INT 2
29367: PPUSH
29368: LD_INT 6
29370: PPUSH
29371: LD_INT 1
29373: PPUSH
29374: LD_INT 1
29376: PPUSH
29377: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
29381: LD_ADDR_VAR 0 5
29385: PUSH
29386: LD_INT 22
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 2
29398: PUSH
29399: LD_INT 25
29401: PUSH
29402: LD_INT 4
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 25
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 25
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PPUSH
29439: CALL_OW 69
29443: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
29444: LD_ADDR_VAR 0 4
29448: PUSH
29449: LD_INT 22
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 21
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 25
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 25
29484: PUSH
29485: LD_INT 8
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 25
29494: PUSH
29495: LD_INT 15
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: PPUSH
29513: CALL_OW 69
29517: PUSH
29518: LD_EXP 50
29522: DIFF
29523: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
29524: LD_ADDR_VAR 0 6
29528: PUSH
29529: LD_INT 22
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 30
29541: PUSH
29542: LD_INT 5
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PPUSH
29553: CALL_OW 69
29557: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
29558: LD_VAR 0 5
29562: PPUSH
29563: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
29567: LD_VAR 0 4
29571: PPUSH
29572: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
29576: LD_INT 101
29578: PPUSH
29579: CALL_OW 427
// SayRadio ( AmScout , D4-FSol1-3 ) ;
29583: LD_EXP 40
29587: PPUSH
29588: LD_STRING D4-FSol1-3
29590: PPUSH
29591: CALL_OW 94
// for i in arCivilian do
29595: LD_ADDR_VAR 0 1
29599: PUSH
29600: LD_VAR 0 5
29604: PUSH
29605: FOR_IN
29606: IFFALSE 29685
// begin AddComEnterUnit ( i , barracks [ i mod 2 + 1 ] ) ;
29608: LD_VAR 0 1
29612: PPUSH
29613: LD_VAR 0 6
29617: PUSH
29618: LD_VAR 0 1
29622: PUSH
29623: LD_INT 2
29625: MOD
29626: PUSH
29627: LD_INT 1
29629: PLUS
29630: ARRAY
29631: PPUSH
29632: CALL_OW 180
// AddComChangeProfession ( i , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
29636: LD_VAR 0 1
29640: PPUSH
29641: LD_INT 1
29643: PUSH
29644: LD_INT 8
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PPUSH
29654: LD_INT 2
29656: PPUSH
29657: CALL_OW 12
29661: ARRAY
29662: PPUSH
29663: CALL_OW 183
// AddComExitBuilding ( i ) ;
29667: LD_VAR 0 1
29671: PPUSH
29672: CALL_OW 182
// wait ( 0 0$0.5 ) ;
29676: LD_INT 18
29678: PPUSH
29679: CALL_OW 67
// end ;
29683: GO 29605
29685: POP
29686: POP
// wait ( 0 0$5 ) ;
29687: LD_INT 175
29689: PPUSH
29690: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
29694: LD_INT 76
29696: PPUSH
29697: LD_INT 19
29699: PPUSH
29700: CALL_OW 84
// DialogueOn ;
29704: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29708: LD_INT 22
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 26
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: LD_INT 25
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 25
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 25
29753: PUSH
29754: LD_INT 3
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 25
29763: PUSH
29764: LD_INT 4
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 25
29773: PUSH
29774: LD_INT 5
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: PPUSH
29794: CALL_OW 69
29798: PPUSH
29799: LD_STRING D8-Sol1-1
29801: PPUSH
29802: LD_STRING D8-Sol1-1
29804: PPUSH
29805: CALL 25083 0 3
// if IsOk ( DeltaDoctor ) then
29809: LD_EXP 39
29813: PPUSH
29814: CALL_OW 302
29818: IFFALSE 29834
// Say ( DeltaDoctor , D8-Sci1-1 ) else
29820: LD_EXP 39
29824: PPUSH
29825: LD_STRING D8-Sci1-1
29827: PPUSH
29828: CALL_OW 88
29832: GO 29935
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29834: LD_INT 22
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 26
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: LD_INT 25
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 25
29869: PUSH
29870: LD_INT 2
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 25
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 25
29889: PUSH
29890: LD_INT 4
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 25
29899: PUSH
29900: LD_INT 5
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: PPUSH
29920: CALL_OW 69
29924: PPUSH
29925: LD_STRING D8-Sol1-1
29927: PPUSH
29928: LD_STRING D8-Sol1-1
29930: PPUSH
29931: CALL 25083 0 3
// Say ( JMM , D8-JMM-1 ) ;
29935: LD_EXP 23
29939: PPUSH
29940: LD_STRING D8-JMM-1
29942: PPUSH
29943: CALL_OW 88
// DialogueOff ;
29947: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
29951: LD_INT 2
29953: PPUSH
29954: LD_INT 2
29956: PPUSH
29957: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
29961: LD_INT 1
29963: PPUSH
29964: LD_INT 2
29966: PPUSH
29967: LD_INT 2
29969: PPUSH
29970: LD_INT 1
29972: PPUSH
29973: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
29977: LD_INT 3
29979: PPUSH
29980: LD_INT 2
29982: PPUSH
29983: LD_INT 1
29985: PPUSH
29986: LD_INT 1
29988: PPUSH
29989: CALL_OW 80
// SetAttitude ( 6 , 2 , att_friend , true ) ;
29993: LD_INT 6
29995: PPUSH
29996: LD_INT 2
29998: PPUSH
29999: LD_INT 1
30001: PPUSH
30002: LD_INT 1
30004: PPUSH
30005: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
30009: LD_STRING M4
30011: PPUSH
30012: CALL_OW 337
// wait ( 0 0$1 ) ;
30016: LD_INT 35
30018: PPUSH
30019: CALL_OW 67
// if IsLive ( Khatam ) then
30023: LD_EXP 36
30027: PPUSH
30028: CALL_OW 300
30032: IFFALSE 30046
// DoNotAttack ( 2 , Khatam ) ;
30034: LD_INT 2
30036: PPUSH
30037: LD_EXP 36
30041: PPUSH
30042: CALL_OW 471
// wait ( 0 0$1 ) ;
30046: LD_INT 35
30048: PPUSH
30049: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
30053: LD_ADDR_VAR 0 7
30057: PUSH
30058: LD_INT 22
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 21
30070: PUSH
30071: LD_INT 3
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PPUSH
30082: CALL_OW 69
30086: PPUSH
30087: LD_VAR 0 4
30091: PUSH
30092: LD_INT 1
30094: ARRAY
30095: PPUSH
30096: CALL_OW 74
30100: ST_TO_ADDR
// for i := 1 to 3 do
30101: LD_ADDR_VAR 0 1
30105: PUSH
30106: DOUBLE
30107: LD_INT 1
30109: DEC
30110: ST_TO_ADDR
30111: LD_INT 3
30113: PUSH
30114: FOR_TO
30115: IFFALSE 30174
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ i ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
30117: LD_VAR 0 4
30121: PPUSH
30122: LD_INT 25
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PPUSH
30132: CALL_OW 72
30136: PUSH
30137: LD_VAR 0 1
30141: ARRAY
30142: PPUSH
30143: LD_VAR 0 7
30147: PPUSH
30148: CALL_OW 250
30152: PPUSH
30153: LD_VAR 0 7
30157: PPUSH
30158: CALL_OW 251
30162: PPUSH
30163: LD_VAR 0 7
30167: PPUSH
30168: CALL_OW 192
30172: GO 30114
30174: POP
30175: POP
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
30176: LD_VAR 0 4
30180: PPUSH
30181: LD_INT 84
30183: PPUSH
30184: LD_INT 22
30186: PPUSH
30187: CALL_OW 174
// AddComMoveXY ( arSoldiers , 95 , 12 ) ;
30191: LD_VAR 0 4
30195: PPUSH
30196: LD_INT 95
30198: PPUSH
30199: LD_INT 12
30201: PPUSH
30202: CALL_OW 171
// AddComMoveXY ( arSoldiers , 102 , 11 ) ;
30206: LD_VAR 0 4
30210: PPUSH
30211: LD_INT 102
30213: PPUSH
30214: LD_INT 11
30216: PPUSH
30217: CALL_OW 171
// AddComMoveXY ( arSoldiers , 116 , 15 ) ;
30221: LD_VAR 0 4
30225: PPUSH
30226: LD_INT 116
30228: PPUSH
30229: LD_INT 15
30231: PPUSH
30232: CALL_OW 171
// AddComMoveXY ( arSoldiers , 140 , 25 ) ;
30236: LD_VAR 0 4
30240: PPUSH
30241: LD_INT 140
30243: PPUSH
30244: LD_INT 25
30246: PPUSH
30247: CALL_OW 171
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
30251: LD_ADDR_VAR 0 4
30255: PUSH
30256: LD_INT 22
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 21
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: LD_INT 25
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 25
30291: PUSH
30292: LD_INT 8
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 25
30301: PUSH
30302: LD_INT 15
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: PPUSH
30320: CALL_OW 69
30324: PUSH
30325: LD_EXP 50
30329: DIFF
30330: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
30331: LD_ADDR_VAR 0 5
30335: PUSH
30336: LD_INT 22
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 21
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: LD_INT 25
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 25
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 25
30381: PUSH
30382: LD_INT 4
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 25
30391: PUSH
30392: LD_INT 12
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 25
30401: PUSH
30402: LD_INT 16
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: LIST
30421: PPUSH
30422: CALL_OW 69
30426: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
30427: LD_ADDR_VAR 0 5
30431: PUSH
30432: LD_VAR 0 5
30436: PUSH
30437: LD_EXP 50
30441: ADD
30442: ST_TO_ADDR
// AddComMoveXY ( arCivilian , 81 , 12 ) ;
30443: LD_VAR 0 5
30447: PPUSH
30448: LD_INT 81
30450: PPUSH
30451: LD_INT 12
30453: PPUSH
30454: CALL_OW 171
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
30458: LD_VAR 0 5
30462: PPUSH
30463: LD_INT 88
30465: PPUSH
30466: LD_INT 8
30468: PPUSH
30469: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
30473: LD_VAR 0 5
30477: PPUSH
30478: LD_INT 102
30480: PPUSH
30481: LD_INT 10
30483: PPUSH
30484: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
30488: LD_VAR 0 5
30492: PPUSH
30493: LD_INT 116
30495: PPUSH
30496: LD_INT 15
30498: PPUSH
30499: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
30503: LD_VAR 0 5
30507: PPUSH
30508: LD_INT 140
30510: PPUSH
30511: LD_INT 25
30513: PPUSH
30514: CALL_OW 171
// wait ( 3 ) ;
30518: LD_INT 3
30520: PPUSH
30521: CALL_OW 67
// arEscapist := arCivilian union arSoldiers ;
30525: LD_ADDR_EXP 56
30529: PUSH
30530: LD_VAR 0 5
30534: PUSH
30535: LD_VAR 0 4
30539: UNION
30540: ST_TO_ADDR
// if IsOk ( Gary ) then
30541: LD_EXP 32
30545: PPUSH
30546: CALL_OW 302
30550: IFFALSE 30564
// Say ( Gary , D8a-Gary-1 ) ;
30552: LD_EXP 32
30556: PPUSH
30557: LD_STRING D8a-Gary-1
30559: PPUSH
30560: CALL_OW 88
// wait ( 0 0$5 ) ;
30564: LD_INT 175
30566: PPUSH
30567: CALL_OW 67
// if IsOK ( Khatam ) then
30571: LD_EXP 36
30575: PPUSH
30576: CALL_OW 302
30580: IFFALSE 31047
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
30582: LD_ADDR_VAR 0 2
30586: PUSH
30587: LD_INT 22
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: LD_INT 25
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 25
30612: PUSH
30613: LD_INT 2
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 25
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 25
30632: PUSH
30633: LD_INT 4
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 25
30642: PUSH
30643: LD_INT 5
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 25
30652: PUSH
30653: LD_INT 8
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PPUSH
30673: CALL_OW 69
30677: PUSH
30678: LD_EXP 23
30682: PUSH
30683: LD_EXP 24
30687: PUSH
30688: LD_EXP 25
30692: PUSH
30693: LD_EXP 26
30697: PUSH
30698: LD_EXP 27
30702: PUSH
30703: LD_EXP 28
30707: PUSH
30708: LD_EXP 29
30712: PUSH
30713: LD_EXP 30
30717: PUSH
30718: LD_EXP 31
30722: PUSH
30723: LD_EXP 32
30727: PUSH
30728: LD_EXP 33
30732: PUSH
30733: LD_EXP 34
30737: PUSH
30738: LD_EXP 35
30742: PUSH
30743: LD_EXP 36
30747: PUSH
30748: LD_EXP 37
30752: PUSH
30753: LD_EXP 38
30757: PUSH
30758: LD_EXP 39
30762: PUSH
30763: LD_EXP 42
30767: PUSH
30768: LD_EXP 44
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: DIFF
30794: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
30795: LD_EXP 36
30799: PPUSH
30800: LD_INT 8
30802: PPUSH
30803: CALL_OW 235
// ComExit ( Khatam ) ;
30807: LD_EXP 36
30811: PPUSH
30812: CALL 92685 0 1
// wait ( 0 0$1 ) ;
30816: LD_INT 35
30818: PPUSH
30819: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
30823: LD_EXP 36
30827: PPUSH
30828: LD_INT 11
30830: PPUSH
30831: CALL_OW 113
// escapeKhatam := true ;
30835: LD_ADDR_EXP 11
30839: PUSH
30840: LD_INT 1
30842: ST_TO_ADDR
// if not tmp then
30843: LD_VAR 0 2
30847: NOT
30848: IFFALSE 30852
// exit ;
30850: GO 31047
// wait ( 0 0$2 ) ;
30852: LD_INT 70
30854: PPUSH
30855: CALL_OW 67
// DialogueOn ;
30859: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
30863: LD_ADDR_VAR 0 8
30867: PUSH
30868: LD_VAR 0 2
30872: PPUSH
30873: LD_STRING D8b-Sol1-1
30875: PPUSH
30876: LD_STRING D8b-FSol1-1
30878: PPUSH
30879: CALL 25083 0 3
30883: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
30884: LD_EXP 36
30888: PPUSH
30889: LD_STRING D8b-Khat-1
30891: PPUSH
30892: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
30896: LD_VAR 0 8
30900: PPUSH
30901: CALL_OW 258
30905: PUSH
30906: LD_INT 1
30908: EQUAL
30909: IFFALSE 30925
// Say ( speaker , D8b-Sol1-2 ) else
30911: LD_VAR 0 8
30915: PPUSH
30916: LD_STRING D8b-Sol1-2
30918: PPUSH
30919: CALL_OW 88
30923: GO 30937
// Say ( speaker , D8b-FSol1-2 ) ;
30925: LD_VAR 0 8
30929: PPUSH
30930: LD_STRING D8b-FSol1-2
30932: PPUSH
30933: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
30937: LD_EXP 36
30941: PPUSH
30942: LD_STRING D8b-Khat-2
30944: PPUSH
30945: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
30949: LD_VAR 0 8
30953: PPUSH
30954: CALL_OW 258
30958: PUSH
30959: LD_INT 1
30961: EQUAL
30962: IFFALSE 30978
// Say ( speaker , D8b-Sol1-3 ) else
30964: LD_VAR 0 8
30968: PPUSH
30969: LD_STRING D8b-Sol1-3
30971: PPUSH
30972: CALL_OW 88
30976: GO 30990
// Say ( speaker , D8b-FSol1-3 ) ;
30978: LD_VAR 0 8
30982: PPUSH
30983: LD_STRING D8b-FSol1-3
30985: PPUSH
30986: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
30990: LD_EXP 36
30994: PPUSH
30995: LD_STRING D8b-Khat-3
30997: PPUSH
30998: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31002: LD_VAR 0 8
31006: PPUSH
31007: CALL_OW 258
31011: PUSH
31012: LD_INT 1
31014: EQUAL
31015: IFFALSE 31031
// Say ( speaker , D8b-Sol1-4 ) else
31017: LD_VAR 0 8
31021: PPUSH
31022: LD_STRING D8b-Sol1-4
31024: PPUSH
31025: CALL_OW 88
31029: GO 31043
// Say ( speaker , D8b-FSol1-4 ) ;
31031: LD_VAR 0 8
31035: PPUSH
31036: LD_STRING D8b-FSol1-4
31038: PPUSH
31039: CALL_OW 88
// DialogueOff ;
31043: CALL_OW 7
// end ; end ;
31047: PPOPN 8
31049: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
31050: LD_EXP 11
31054: PUSH
31055: LD_EXP 36
31059: PPUSH
31060: CALL_OW 302
31064: AND
31065: IFFALSE 31140
31067: GO 31069
31069: DISABLE
// begin enable ;
31070: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
31071: LD_EXP 36
31075: PPUSH
31076: CALL_OW 302
31080: PUSH
31081: LD_EXP 36
31085: PPUSH
31086: CALL_OW 314
31090: NOT
31091: AND
31092: IFFALSE 31106
// ComMoveToArea ( Khatam , khatamArea ) ;
31094: LD_EXP 36
31098: PPUSH
31099: LD_INT 11
31101: PPUSH
31102: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
31106: LD_EXP 36
31110: PPUSH
31111: LD_INT 11
31113: PPUSH
31114: CALL_OW 308
31118: IFFALSE 31140
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
31120: LD_INT 1
31122: PPUSH
31123: LD_STRING 10_KhatamStatus_1
31125: PPUSH
31126: CALL_OW 39
// RemoveUnit ( Khatam ) ;
31130: LD_EXP 36
31134: PPUSH
31135: CALL_OW 64
// disable ;
31139: DISABLE
// end ; end ;
31140: END
// every 0 0$30 trigger joinedToEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
31141: LD_EXP 7
31145: PUSH
31146: LD_STRING 02_mikhailStatus_1
31148: PPUSH
31149: LD_INT 0
31151: PPUSH
31152: CALL_OW 30
31156: AND
31157: PUSH
31158: LD_INT 22
31160: PUSH
31161: LD_INT 5
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 50
31170: PUSH
31171: EMPTY
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PPUSH
31178: CALL_OW 69
31182: PUSH
31183: LD_INT 0
31185: EQUAL
31186: AND
31187: PUSH
31188: LD_INT 22
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 50
31200: PUSH
31201: EMPTY
31202: LIST
31203: PUSH
31204: LD_INT 21
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: PPUSH
31219: CALL_OW 69
31223: PUSH
31224: LD_INT 0
31226: EQUAL
31227: PUSH
31228: LD_EXP 4
31232: NOT
31233: OR
31234: AND
31235: IFFALSE 31257
31237: GO 31239
31239: DISABLE
// begin wait ( 2 2$00 * Difficulty ) ;
31240: LD_INT 4200
31242: PUSH
31243: LD_OWVAR 67
31247: MUL
31248: PPUSH
31249: CALL_OW 67
// PrepareCornell ;
31253: CALL 3198 0 0
// end ;
31257: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
31258: LD_INT 22
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 69
31272: PPUSH
31273: LD_EXP 42
31277: PPUSH
31278: CALL_OW 74
31282: PPUSH
31283: LD_EXP 42
31287: PPUSH
31288: CALL_OW 296
31292: PUSH
31293: LD_INT 9
31295: LESS
31296: PUSH
31297: LD_EXP 42
31301: PPUSH
31302: CALL_OW 302
31306: AND
31307: IFFALSE 31751
31309: GO 31311
31311: DISABLE
// begin InGameOn ;
31312: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
31316: LD_EXP 42
31320: PPUSH
31321: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
31325: LD_EXP 42
31329: PPUSH
31330: LD_STRING D7-Corn-1
31332: PPUSH
31333: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
31337: LD_INT 22
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 2
31349: PUSH
31350: LD_INT 25
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 25
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 25
31372: PUSH
31373: LD_INT 3
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 25
31382: PUSH
31383: LD_INT 4
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 25
31392: PUSH
31393: LD_INT 5
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PPUSH
31412: CALL_OW 69
31416: PPUSH
31417: LD_STRING D7-Sol1-1
31419: PPUSH
31420: LD_STRING D7-FSol1-1
31422: PPUSH
31423: CALL 25083 0 3
// CenterNowOnUnits ( Cornell ) ;
31427: LD_EXP 42
31431: PPUSH
31432: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
31436: LD_EXP 42
31440: PPUSH
31441: LD_STRING D7-Corn-2
31443: PPUSH
31444: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
31448: LD_EXP 23
31452: PPUSH
31453: LD_STRING D7-JMM-2
31455: PPUSH
31456: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
31460: LD_EXP 42
31464: PPUSH
31465: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
31469: LD_EXP 42
31473: PPUSH
31474: LD_STRING D7-Corn-3
31476: PPUSH
31477: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
31481: LD_EXP 42
31485: PPUSH
31486: LD_INT 250
31488: PPUSH
31489: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
31493: LD_EXP 42
31497: PPUSH
31498: LD_INT 1
31500: PPUSH
31501: CALL_OW 235
// wait ( 0 0$1 ) ;
31505: LD_INT 35
31507: PPUSH
31508: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
31512: LD_EXP 23
31516: PPUSH
31517: LD_STRING D7-JMM-3
31519: PPUSH
31520: CALL_OW 88
// InGameOff ;
31524: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
31528: LD_INT 35
31530: PPUSH
31531: CALL_OW 67
// if IsDead ( Cornell ) then
31535: LD_EXP 42
31539: PPUSH
31540: CALL_OW 301
31544: IFFALSE 31548
// exit ;
31546: GO 31751
// until GetLives ( Cornell ) > 350 ;
31548: LD_EXP 42
31552: PPUSH
31553: CALL_OW 256
31557: PUSH
31558: LD_INT 350
31560: GREATER
31561: IFFALSE 31528
// DialogueOn ;
31563: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
31567: LD_EXP 23
31571: PPUSH
31572: LD_STRING D7a-JMM-1
31574: PPUSH
31575: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
31579: LD_EXP 42
31583: PPUSH
31584: LD_STRING D7a-Corn-1
31586: PPUSH
31587: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
31591: LD_EXP 23
31595: PPUSH
31596: LD_STRING D7a-JMM-2
31598: PPUSH
31599: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
31603: LD_EXP 42
31607: PPUSH
31608: LD_STRING D7a-Corn-2
31610: PPUSH
31611: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
31615: LD_EXP 23
31619: PPUSH
31620: LD_STRING D7a-JMM-3
31622: PPUSH
31623: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
31627: LD_EXP 42
31631: PPUSH
31632: LD_STRING D7a-Corn-3
31634: PPUSH
31635: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
31639: LD_EXP 23
31643: PPUSH
31644: LD_STRING D7a-JMM-4
31646: PPUSH
31647: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
31651: LD_EXP 42
31655: PPUSH
31656: LD_STRING D7a-Corn-4
31658: PPUSH
31659: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
31663: LD_EXP 23
31667: PPUSH
31668: LD_STRING D7a-JMM-5
31670: PPUSH
31671: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
31675: LD_EXP 42
31679: PPUSH
31680: LD_STRING D7a-Corn-5
31682: PPUSH
31683: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
31687: LD_EXP 23
31691: PPUSH
31692: LD_STRING D7a-JMM-6
31694: PPUSH
31695: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
31699: LD_EXP 42
31703: PPUSH
31704: LD_STRING D7a-Corn-6
31706: PPUSH
31707: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
31711: LD_EXP 23
31715: PPUSH
31716: LD_STRING D7a-JMM-7
31718: PPUSH
31719: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
31723: LD_EXP 42
31727: PPUSH
31728: LD_STRING D7a-Corn-7
31730: PPUSH
31731: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
31735: LD_EXP 23
31739: PPUSH
31740: LD_STRING D7a-JMM-8
31742: PPUSH
31743: CALL_OW 88
// DialogueOff ;
31747: CALL_OW 7
// end ;
31751: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
31752: LD_INT 54
31754: PPUSH
31755: LD_INT 1
31757: PPUSH
31758: CALL_OW 321
31762: PUSH
31763: LD_INT 2
31765: EQUAL
31766: PUSH
31767: LD_INT 55
31769: PPUSH
31770: LD_INT 1
31772: PPUSH
31773: CALL_OW 321
31777: PUSH
31778: LD_INT 2
31780: EQUAL
31781: AND
31782: PUSH
31783: LD_INT 21
31785: PPUSH
31786: LD_INT 1
31788: PPUSH
31789: CALL_OW 321
31793: PUSH
31794: LD_INT 2
31796: EQUAL
31797: AND
31798: PUSH
31799: LD_INT 22
31801: PPUSH
31802: LD_INT 1
31804: PPUSH
31805: CALL_OW 321
31809: PUSH
31810: LD_INT 2
31812: EQUAL
31813: AND
31814: PUSH
31815: LD_INT 12
31817: PPUSH
31818: LD_INT 1
31820: PPUSH
31821: CALL_OW 321
31825: PUSH
31826: LD_INT 1
31828: EQUAL
31829: PUSH
31830: LD_INT 32
31832: PPUSH
31833: LD_INT 1
31835: PPUSH
31836: CALL_OW 321
31840: PUSH
31841: LD_INT 1
31843: EQUAL
31844: OR
31845: PUSH
31846: EMPTY
31847: LIST
31848: AND
31849: PUSH
31850: LD_EXP 8
31854: AND
31855: PUSH
31856: LD_INT 22
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 21
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PPUSH
31880: CALL_OW 69
31884: PUSH
31885: LD_INT 0
31887: EQUAL
31888: AND
31889: IFFALSE 31937
31891: GO 31893
31893: DISABLE
// begin case Query ( QEndMission ) of 1 :
31894: LD_STRING QEndMission
31896: PPUSH
31897: CALL_OW 97
31901: PUSH
31902: LD_INT 1
31904: DOUBLE
31905: EQUAL
31906: IFTRUE 31910
31908: GO 31921
31910: POP
// end_the_mission_allowed = true ; 2 :
31911: LD_ADDR_OWVAR 57
31915: PUSH
31916: LD_INT 1
31918: ST_TO_ADDR
31919: GO 31937
31921: LD_INT 2
31923: DOUBLE
31924: EQUAL
31925: IFTRUE 31929
31927: GO 31936
31929: POP
// FinishMission ; end ;
31930: CALL 31983 0 0
31934: GO 31937
31936: POP
// end ;
31937: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
31938: LD_INT 0
31940: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 300
31950: PUSH
31951: LD_VAR 0 1
31955: PUSH
31956: LD_EXP 45
31960: IN
31961: OR
31962: IFFALSE 31978
// SaveCharacters ( unit , id ) ;
31964: LD_VAR 0 1
31968: PPUSH
31969: LD_VAR 0 2
31973: PPUSH
31974: CALL_OW 38
// end ;
31978: LD_VAR 0 3
31982: RET
// export function FinishMission ; var m1 , m2 , m3 , prefix ; begin
31983: LD_INT 0
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
31990: LD_INT 22
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 21
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 23
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 50
32022: PUSH
32023: EMPTY
32024: LIST
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: PPUSH
32032: CALL_OW 69
32036: PPUSH
32037: CALL 56698 0 1
32041: PUSH
32042: LD_INT 5
32044: LESS
32045: IFFALSE 32054
// YouLost ( Troops ) ;
32047: LD_STRING Troops
32049: PPUSH
32050: CALL_OW 104
// if not hasSniper then
32054: LD_EXP 20
32058: NOT
32059: IFFALSE 32068
// SetAchievement ( ACH_SNIPER ) ;
32061: LD_STRING ACH_SNIPER
32063: PPUSH
32064: CALL_OW 543
// m1 := false ;
32068: LD_ADDR_VAR 0 2
32072: PUSH
32073: LD_INT 0
32075: ST_TO_ADDR
// m2 := false ;
32076: LD_ADDR_VAR 0 3
32080: PUSH
32081: LD_INT 0
32083: ST_TO_ADDR
// m3 := false ;
32084: LD_ADDR_VAR 0 4
32088: PUSH
32089: LD_INT 0
32091: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
32092: LD_INT 12
32094: PPUSH
32095: LD_INT 1
32097: PPUSH
32098: CALL_OW 321
32102: PUSH
32103: LD_INT 2
32105: EQUAL
32106: IFFALSE 32128
// begin AddMedal ( sights , 1 ) ;
32108: LD_STRING sights
32110: PPUSH
32111: LD_INT 1
32113: PPUSH
32114: CALL_OW 101
// m1 := true ;
32118: LD_ADDR_VAR 0 2
32122: PUSH
32123: LD_INT 1
32125: ST_TO_ADDR
// end else
32126: GO 32139
// AddMedal ( sights , - 1 ) ;
32128: LD_STRING sights
32130: PPUSH
32131: LD_INT 1
32133: NEG
32134: PPUSH
32135: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
32139: LD_INT 32
32141: PPUSH
32142: LD_INT 1
32144: PPUSH
32145: CALL_OW 321
32149: PUSH
32150: LD_INT 2
32152: EQUAL
32153: IFFALSE 32175
// begin AddMedal ( computers , 1 ) ;
32155: LD_STRING computers
32157: PPUSH
32158: LD_INT 1
32160: PPUSH
32161: CALL_OW 101
// m2 := true ;
32165: LD_ADDR_VAR 0 3
32169: PUSH
32170: LD_INT 1
32172: ST_TO_ADDR
// end else
32173: GO 32186
// AddMedal ( computers , - 1 ) ;
32175: LD_STRING computers
32177: PPUSH
32178: LD_INT 1
32180: NEG
32181: PPUSH
32182: CALL_OW 101
// if arabianEscapedCounter = 0 then
32186: LD_EXP 21
32190: PUSH
32191: LD_INT 0
32193: EQUAL
32194: IFFALSE 32226
// begin AddMedal ( renegades , 2 ) ;
32196: LD_STRING renegades
32198: PPUSH
32199: LD_INT 2
32201: PPUSH
32202: CALL_OW 101
// m3 := true ;
32206: LD_ADDR_VAR 0 4
32210: PUSH
32211: LD_INT 1
32213: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
32214: LD_INT 0
32216: PPUSH
32217: LD_STRING 10_ScientistsEscape_1
32219: PPUSH
32220: CALL_OW 39
// end else
32224: GO 32237
// AddMedal ( renegades , - 1 ) ;
32226: LD_STRING renegades
32228: PPUSH
32229: LD_INT 1
32231: NEG
32232: PPUSH
32233: CALL_OW 101
// SaveEpsilonBase ;
32237: CALL 33079 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
32241: LD_VAR 0 2
32245: PUSH
32246: LD_VAR 0 3
32250: AND
32251: PUSH
32252: LD_VAR 0 4
32256: AND
32257: PUSH
32258: LD_OWVAR 67
32262: PUSH
32263: LD_INT 3
32265: GREATEREQUAL
32266: AND
32267: IFFALSE 32279
// SetAchievementEX ( ACH_AMER , 10 ) ;
32269: LD_STRING ACH_AMER
32271: PPUSH
32272: LD_INT 10
32274: PPUSH
32275: CALL_OW 564
// if tick <= 40 40$00 then
32279: LD_OWVAR 1
32283: PUSH
32284: LD_INT 84000
32286: LESSEQUAL
32287: IFFALSE 32303
// begin wait ( 3 ) ;
32289: LD_INT 3
32291: PPUSH
32292: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
32296: LD_STRING ACH_ASPEED_10
32298: PPUSH
32299: CALL_OW 543
// end ; GiveMedals ( Main ) ;
32303: LD_STRING Main
32305: PPUSH
32306: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
32310: LD_INT 22
32312: PUSH
32313: LD_INT 1
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 23
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 21
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 2
32342: PUSH
32343: LD_INT 25
32345: PUSH
32346: LD_INT 1
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 25
32355: PUSH
32356: LD_INT 2
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 25
32365: PUSH
32366: LD_INT 3
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 25
32375: PUSH
32376: LD_INT 4
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 25
32385: PUSH
32386: LD_INT 5
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 25
32395: PUSH
32396: LD_INT 8
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: PPUSH
32418: CALL_OW 69
32422: PPUSH
32423: CALL_OW 43
// prefix := 10c_ ;
32427: LD_ADDR_VAR 0 5
32431: PUSH
32432: LD_STRING 10c_
32434: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
32435: LD_EXP 23
32439: PPUSH
32440: LD_VAR 0 5
32444: PUSH
32445: LD_STRING JMM
32447: STR
32448: PPUSH
32449: CALL_OW 38
// EnchancedSaveCharacters ( Brown , prefix & Brown ) ;
32453: LD_EXP 24
32457: PPUSH
32458: LD_VAR 0 5
32462: PUSH
32463: LD_STRING Brown
32465: STR
32466: PPUSH
32467: CALL 31938 0 2
// EnchancedSaveCharacters ( Donaldson , prefix & Donaldson ) ;
32471: LD_EXP 25
32475: PPUSH
32476: LD_VAR 0 5
32480: PUSH
32481: LD_STRING Donaldson
32483: STR
32484: PPUSH
32485: CALL 31938 0 2
// EnchancedSaveCharacters ( Bobby , prefix & Bobby ) ;
32489: LD_EXP 26
32493: PPUSH
32494: LD_VAR 0 5
32498: PUSH
32499: LD_STRING Bobby
32501: STR
32502: PPUSH
32503: CALL 31938 0 2
// EnchancedSaveCharacters ( Cyrus , prefix & Cyrus ) ;
32507: LD_EXP 27
32511: PPUSH
32512: LD_VAR 0 5
32516: PUSH
32517: LD_STRING Cyrus
32519: STR
32520: PPUSH
32521: CALL 31938 0 2
// EnchancedSaveCharacters ( Lisa , prefix & Lisa ) ;
32525: LD_EXP 28
32529: PPUSH
32530: LD_VAR 0 5
32534: PUSH
32535: LD_STRING Lisa
32537: STR
32538: PPUSH
32539: CALL 31938 0 2
// EnchancedSaveCharacters ( Frank , prefix & Frank ) ;
32543: LD_EXP 29
32547: PPUSH
32548: LD_VAR 0 5
32552: PUSH
32553: LD_STRING Frank
32555: STR
32556: PPUSH
32557: CALL 31938 0 2
// if Kikuchi then
32561: LD_EXP 30
32565: IFFALSE 32592
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
32567: LD_STRING enableBioCharacter(BIO_YAMO)
32569: PPUSH
32570: CALL_OW 559
// EnchancedSaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
32574: LD_EXP 30
32578: PPUSH
32579: LD_VAR 0 5
32583: PUSH
32584: LD_STRING Kikuchi
32586: STR
32587: PPUSH
32588: CALL 31938 0 2
// end ; EnchancedSaveCharacters ( Houten , prefix & Houten ) ;
32592: LD_EXP 31
32596: PPUSH
32597: LD_VAR 0 5
32601: PUSH
32602: LD_STRING Houten
32604: STR
32605: PPUSH
32606: CALL 31938 0 2
// EnchancedSaveCharacters ( Gary , prefix & Gary ) ;
32610: LD_EXP 32
32614: PPUSH
32615: LD_VAR 0 5
32619: PUSH
32620: LD_STRING Gary
32622: STR
32623: PPUSH
32624: CALL 31938 0 2
// EnchancedSaveCharacters ( Cornell , prefix & Cornell ) ;
32628: LD_EXP 42
32632: PPUSH
32633: LD_VAR 0 5
32637: PUSH
32638: LD_STRING Cornell
32640: STR
32641: PPUSH
32642: CALL 31938 0 2
// EnchancedSaveCharacters ( Simms , prefix & Simms ) ;
32646: LD_EXP 33
32650: PPUSH
32651: LD_VAR 0 5
32655: PUSH
32656: LD_STRING Simms
32658: STR
32659: PPUSH
32660: CALL 31938 0 2
// EnchancedSaveCharacters ( Denis , prefix & Denis ) ;
32664: LD_EXP 34
32668: PPUSH
32669: LD_VAR 0 5
32673: PUSH
32674: LD_STRING Denis
32676: STR
32677: PPUSH
32678: CALL 31938 0 2
// EnchancedSaveCharacters ( Joan , prefix & Joan ) ;
32682: LD_EXP 35
32686: PPUSH
32687: LD_VAR 0 5
32691: PUSH
32692: LD_STRING Joan
32694: STR
32695: PPUSH
32696: CALL 31938 0 2
// EnchancedSaveCharacters ( Gladstone , prefix & Gladstone ) ;
32700: LD_EXP 37
32704: PPUSH
32705: LD_VAR 0 5
32709: PUSH
32710: LD_STRING Gladstone
32712: STR
32713: PPUSH
32714: CALL 31938 0 2
// EnchancedSaveCharacters ( DeltaDoctor , prefix & DeltaDoctor ) ;
32718: LD_EXP 39
32722: PPUSH
32723: LD_VAR 0 5
32727: PUSH
32728: LD_STRING DeltaDoctor
32730: STR
32731: PPUSH
32732: CALL 31938 0 2
// if IsLive ( Mike ) then
32736: LD_EXP 41
32740: PPUSH
32741: CALL_OW 300
32745: IFFALSE 32765
// SaveCharacters ( Mike , prefix & Mike ) ;
32747: LD_EXP 41
32751: PPUSH
32752: LD_VAR 0 5
32756: PUSH
32757: LD_STRING Mike
32759: STR
32760: PPUSH
32761: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
32765: LD_EXP 46
32769: PPUSH
32770: LD_STRING 10c_lock
32772: PPUSH
32773: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
32777: LD_INT 50
32779: PUSH
32780: EMPTY
32781: LIST
32782: PUSH
32783: LD_INT 22
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 21
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 2
32805: PUSH
32806: LD_INT 25
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 25
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 25
32828: PUSH
32829: LD_INT 3
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 25
32838: PUSH
32839: LD_INT 4
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 25
32848: PUSH
32849: LD_INT 5
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 25
32858: PUSH
32859: LD_INT 8
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: PPUSH
32881: CALL_OW 69
32885: PUSH
32886: LD_EXP 23
32890: PUSH
32891: LD_EXP 24
32895: PUSH
32896: LD_EXP 25
32900: PUSH
32901: LD_EXP 26
32905: PUSH
32906: LD_EXP 27
32910: PUSH
32911: LD_EXP 28
32915: PUSH
32916: LD_EXP 29
32920: PUSH
32921: LD_EXP 37
32925: PUSH
32926: LD_EXP 30
32930: PUSH
32931: LD_EXP 34
32935: PUSH
32936: LD_EXP 35
32940: PUSH
32941: LD_EXP 31
32945: PUSH
32946: LD_EXP 33
32950: PUSH
32951: LD_EXP 32
32955: PUSH
32956: LD_EXP 39
32960: PUSH
32961: LD_EXP 42
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: DIFF
32984: PPUSH
32985: LD_STRING 10_other_survivors
32987: PPUSH
32988: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
32992: LD_INT 50
32994: PUSH
32995: EMPTY
32996: LIST
32997: PUSH
32998: LD_INT 22
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 21
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 2
33020: PUSH
33021: LD_INT 25
33023: PUSH
33024: LD_INT 16
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 25
33033: PUSH
33034: LD_INT 12
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: PPUSH
33052: CALL_OW 69
33056: PUSH
33057: LD_EXP 41
33061: DIFF
33062: PPUSH
33063: LD_STRING 10_ape
33065: PPUSH
33066: CALL_OW 38
// YouWin ;
33070: CALL_OW 103
// end ;
33074: LD_VAR 0 1
33078: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
33079: LD_INT 0
33081: PPUSH
33082: PPUSH
33083: PPUSH
33084: PPUSH
// epsilonBase := [ ] ;
33085: LD_ADDR_VAR 0 2
33089: PUSH
33090: EMPTY
33091: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
33092: LD_ADDR_VAR 0 3
33096: PUSH
33097: LD_INT 22
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 21
33109: PUSH
33110: LD_INT 3
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 50
33119: PUSH
33120: EMPTY
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: PPUSH
33128: CALL_OW 69
33132: ST_TO_ADDR
// for i in buildings do
33133: LD_ADDR_VAR 0 4
33137: PUSH
33138: LD_VAR 0 3
33142: PUSH
33143: FOR_IN
33144: IFFALSE 33596
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
33146: LD_VAR 0 4
33150: PPUSH
33151: CALL_OW 266
33155: PUSH
33156: LD_INT 6
33158: PUSH
33159: LD_INT 7
33161: PUSH
33162: LD_INT 8
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: LIST
33169: IN
33170: IFFALSE 33284
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
33172: LD_ADDR_VAR 0 2
33176: PUSH
33177: LD_VAR 0 2
33181: PUSH
33182: LD_VAR 0 4
33186: PPUSH
33187: CALL_OW 266
33191: PUSH
33192: LD_VAR 0 4
33196: PPUSH
33197: CALL_OW 250
33201: PUSH
33202: LD_VAR 0 4
33206: PPUSH
33207: CALL_OW 251
33211: PUSH
33212: LD_VAR 0 4
33216: PPUSH
33217: CALL_OW 254
33221: PUSH
33222: LD_VAR 0 4
33226: PPUSH
33227: CALL_OW 267
33231: PUSH
33232: LD_VAR 0 4
33236: PPUSH
33237: CALL_OW 248
33241: PUSH
33242: LD_VAR 0 4
33246: PPUSH
33247: LD_INT 1
33249: PPUSH
33250: CALL_OW 268
33254: PUSH
33255: LD_VAR 0 4
33259: PPUSH
33260: LD_INT 2
33262: PPUSH
33263: CALL_OW 268
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: PUSH
33278: EMPTY
33279: LIST
33280: ADD
33281: ST_TO_ADDR
33282: GO 33594
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
33284: LD_VAR 0 4
33288: PPUSH
33289: CALL_OW 266
33293: PUSH
33294: LD_INT 32
33296: EQUAL
33297: PUSH
33298: LD_VAR 0 4
33302: PPUSH
33303: CALL_OW 266
33307: PUSH
33308: LD_INT 33
33310: EQUAL
33311: OR
33312: IFFALSE 33409
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
33314: LD_ADDR_VAR 0 2
33318: PUSH
33319: LD_VAR 0 2
33323: PUSH
33324: LD_VAR 0 4
33328: PPUSH
33329: CALL_OW 266
33333: PUSH
33334: LD_VAR 0 4
33338: PPUSH
33339: CALL_OW 250
33343: PUSH
33344: LD_VAR 0 4
33348: PPUSH
33349: CALL_OW 251
33353: PUSH
33354: LD_VAR 0 4
33358: PPUSH
33359: CALL_OW 254
33363: PUSH
33364: LD_VAR 0 4
33368: PPUSH
33369: CALL_OW 267
33373: PUSH
33374: LD_VAR 0 4
33378: PPUSH
33379: CALL_OW 248
33383: PUSH
33384: LD_VAR 0 4
33388: PPUSH
33389: CALL_OW 269
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: PUSH
33403: EMPTY
33404: LIST
33405: ADD
33406: ST_TO_ADDR
33407: GO 33594
// if GetBType ( i ) = b_factory then
33409: LD_VAR 0 4
33413: PPUSH
33414: CALL_OW 266
33418: PUSH
33419: LD_INT 3
33421: EQUAL
33422: IFFALSE 33512
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
33424: LD_ADDR_VAR 0 2
33428: PUSH
33429: LD_VAR 0 2
33433: PPUSH
33434: LD_INT 1
33436: PPUSH
33437: LD_VAR 0 4
33441: PPUSH
33442: CALL_OW 266
33446: PUSH
33447: LD_VAR 0 4
33451: PPUSH
33452: CALL_OW 250
33456: PUSH
33457: LD_VAR 0 4
33461: PPUSH
33462: CALL_OW 251
33466: PUSH
33467: LD_VAR 0 4
33471: PPUSH
33472: CALL_OW 254
33476: PUSH
33477: LD_VAR 0 4
33481: PPUSH
33482: CALL_OW 267
33486: PUSH
33487: LD_VAR 0 4
33491: PPUSH
33492: CALL_OW 248
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: PPUSH
33505: CALL_OW 2
33509: ST_TO_ADDR
33510: GO 33594
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
33512: LD_ADDR_VAR 0 2
33516: PUSH
33517: LD_VAR 0 2
33521: PUSH
33522: LD_VAR 0 4
33526: PPUSH
33527: CALL_OW 266
33531: PUSH
33532: LD_VAR 0 4
33536: PPUSH
33537: CALL_OW 250
33541: PUSH
33542: LD_VAR 0 4
33546: PPUSH
33547: CALL_OW 251
33551: PUSH
33552: LD_VAR 0 4
33556: PPUSH
33557: CALL_OW 254
33561: PUSH
33562: LD_VAR 0 4
33566: PPUSH
33567: CALL_OW 267
33571: PUSH
33572: LD_VAR 0 4
33576: PPUSH
33577: CALL_OW 248
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: PUSH
33590: EMPTY
33591: LIST
33592: ADD
33593: ST_TO_ADDR
// end ;
33594: GO 33143
33596: POP
33597: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
33598: LD_VAR 0 2
33602: PPUSH
33603: LD_STRING 10_EpsilonBase
33605: PPUSH
33606: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
33610: LD_INT 34
33612: PPUSH
33613: CALL_OW 353
33617: PPUSH
33618: LD_STRING 10_EpsilonEnv
33620: PPUSH
33621: CALL_OW 39
// end ; end_of_file
33625: LD_VAR 0 1
33629: RET
// every 1 1$05 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
33630: LD_EXP 7
33634: IFFALSE 33757
33636: GO 33638
33638: DISABLE
33639: LD_INT 0
33641: PPUSH
33642: PPUSH
// begin enable ;
33643: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
33644: LD_INT 35
33646: PPUSH
33647: LD_INT 385
33649: PPUSH
33650: CALL_OW 12
33654: PPUSH
33655: CALL_OW 67
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area , cratesSpawn6Area ] ;
33659: LD_ADDR_VAR 0 2
33663: PUSH
33664: LD_INT 13
33666: PUSH
33667: LD_INT 14
33669: PUSH
33670: LD_INT 15
33672: PUSH
33673: LD_INT 16
33675: PUSH
33676: LD_INT 17
33678: PUSH
33679: LD_INT 38
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
33690: LD_ADDR_VAR 0 1
33694: PUSH
33695: LD_VAR 0 2
33699: PUSH
33700: LD_INT 1
33702: PPUSH
33703: LD_VAR 0 2
33707: PPUSH
33708: CALL 56698 0 1
33712: PPUSH
33713: CALL_OW 12
33717: ARRAY
33718: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
33719: LD_VAR 0 1
33723: PPUSH
33724: CALL_OW 435
33728: PUSH
33729: LD_INT 8
33731: LESS
33732: IFFALSE 33757
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
33734: LD_INT 1
33736: PPUSH
33737: LD_INT 5
33739: PPUSH
33740: CALL_OW 12
33744: PPUSH
33745: LD_VAR 0 1
33749: PPUSH
33750: LD_INT 1
33752: PPUSH
33753: CALL_OW 55
// end ;
33757: PPOPN 2
33759: END
// every 0 0$20 trigger tick < 5 5$00 and hasBase do
33760: LD_OWVAR 1
33764: PUSH
33765: LD_INT 10500
33767: LESS
33768: PUSH
33769: LD_EXP 9
33773: AND
33774: IFFALSE 33801
33776: GO 33778
33778: DISABLE
// begin enable ;
33779: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
33780: LD_INT 1
33782: PPUSH
33783: LD_INT 5
33785: PPUSH
33786: CALL_OW 12
33790: PPUSH
33791: LD_INT 15
33793: PPUSH
33794: LD_INT 1
33796: PPUSH
33797: CALL_OW 55
// end ;
33801: END
// every 0 0$55 trigger ruBase do
33802: LD_EXP 68
33806: IFFALSE 33850
33808: GO 33810
33810: DISABLE
// begin enable ;
33811: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea ) < 3 then
33812: LD_EXP 84
33816: PPUSH
33817: CALL_OW 435
33821: PUSH
33822: LD_INT 3
33824: LESS
33825: IFFALSE 33850
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea , true ) ;
33827: LD_INT 1
33829: PPUSH
33830: LD_INT 5
33832: PPUSH
33833: CALL_OW 12
33837: PPUSH
33838: LD_EXP 84
33842: PPUSH
33843: LD_INT 1
33845: PPUSH
33846: CALL_OW 55
// end ;
33850: END
// every 1 1$05 trigger ruBase2 do
33851: LD_EXP 69
33855: IFFALSE 33899
33857: GO 33859
33859: DISABLE
// begin enable ;
33860: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea2 ) < 3 then
33861: LD_EXP 85
33865: PPUSH
33866: CALL_OW 435
33870: PUSH
33871: LD_INT 3
33873: LESS
33874: IFFALSE 33899
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea2 , true ) ;
33876: LD_INT 1
33878: PPUSH
33879: LD_INT 5
33881: PPUSH
33882: CALL_OW 12
33886: PPUSH
33887: LD_EXP 85
33891: PPUSH
33892: LD_INT 1
33894: PPUSH
33895: CALL_OW 55
// end ; end_of_file end_of_file
33899: END
// export globalGameSaveCounter ; every 0 0$1 do
33900: GO 33902
33902: DISABLE
// begin enable ;
33903: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
33904: LD_STRING updateTimer(
33906: PUSH
33907: LD_OWVAR 1
33911: STR
33912: PUSH
33913: LD_STRING );
33915: STR
33916: PPUSH
33917: CALL_OW 559
// end ;
33921: END
// every 0 0$1 do
33922: GO 33924
33924: DISABLE
// begin globalGameSaveCounter := 0 ;
33925: LD_ADDR_EXP 86
33929: PUSH
33930: LD_INT 0
33932: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
33933: LD_STRING setGameSaveCounter(0)
33935: PPUSH
33936: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
33940: LD_STRING initStreamRollete();
33942: PPUSH
33943: CALL_OW 559
// InitStreamMode ;
33947: CALL 35273 0 0
// DefineStreamItems ( false ) ;
33951: LD_INT 0
33953: PPUSH
33954: CALL 35737 0 1
// end ;
33958: END
// export function SOS_MapStart ( ) ; begin
33959: LD_INT 0
33961: PPUSH
// if streamModeActive then
33962: LD_EXP 87
33966: IFFALSE 33975
// DefineStreamItems ( true ) ;
33968: LD_INT 1
33970: PPUSH
33971: CALL 35737 0 1
// UpdateLuaVariables ( ) ;
33975: CALL 33992 0 0
// UpdateFactoryWaypoints ( ) ;
33979: CALL 48606 0 0
// UpdateWarehouseGatheringPoints ( ) ;
33983: CALL 48863 0 0
// end ;
33987: LD_VAR 0 1
33991: RET
// function UpdateLuaVariables ( ) ; begin
33992: LD_INT 0
33994: PPUSH
// if globalGameSaveCounter then
33995: LD_EXP 86
33999: IFFALSE 34033
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
34001: LD_ADDR_EXP 86
34005: PUSH
34006: LD_EXP 86
34010: PPUSH
34011: CALL 93648 0 1
34015: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
34016: LD_STRING setGameSaveCounter(
34018: PUSH
34019: LD_EXP 86
34023: STR
34024: PUSH
34025: LD_STRING )
34027: STR
34028: PPUSH
34029: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
34033: LD_STRING setGameDifficulty(
34035: PUSH
34036: LD_OWVAR 67
34040: STR
34041: PUSH
34042: LD_STRING )
34044: STR
34045: PPUSH
34046: CALL_OW 559
// end ;
34050: LD_VAR 0 1
34054: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34055: LD_INT 0
34057: PPUSH
// if p2 = stream_mode then
34058: LD_VAR 0 2
34062: PUSH
34063: LD_INT 100
34065: EQUAL
34066: IFFALSE 35069
// begin if not StreamModeActive then
34068: LD_EXP 87
34072: NOT
34073: IFFALSE 34083
// StreamModeActive := true ;
34075: LD_ADDR_EXP 87
34079: PUSH
34080: LD_INT 1
34082: ST_TO_ADDR
// if p3 = 0 then
34083: LD_VAR 0 3
34087: PUSH
34088: LD_INT 0
34090: EQUAL
34091: IFFALSE 34097
// InitStreamMode ;
34093: CALL 35273 0 0
// if p3 = 1 then
34097: LD_VAR 0 3
34101: PUSH
34102: LD_INT 1
34104: EQUAL
34105: IFFALSE 34115
// sRocket := true ;
34107: LD_ADDR_EXP 92
34111: PUSH
34112: LD_INT 1
34114: ST_TO_ADDR
// if p3 = 2 then
34115: LD_VAR 0 3
34119: PUSH
34120: LD_INT 2
34122: EQUAL
34123: IFFALSE 34133
// sSpeed := true ;
34125: LD_ADDR_EXP 91
34129: PUSH
34130: LD_INT 1
34132: ST_TO_ADDR
// if p3 = 3 then
34133: LD_VAR 0 3
34137: PUSH
34138: LD_INT 3
34140: EQUAL
34141: IFFALSE 34151
// sEngine := true ;
34143: LD_ADDR_EXP 93
34147: PUSH
34148: LD_INT 1
34150: ST_TO_ADDR
// if p3 = 4 then
34151: LD_VAR 0 3
34155: PUSH
34156: LD_INT 4
34158: EQUAL
34159: IFFALSE 34169
// sSpec := true ;
34161: LD_ADDR_EXP 90
34165: PUSH
34166: LD_INT 1
34168: ST_TO_ADDR
// if p3 = 5 then
34169: LD_VAR 0 3
34173: PUSH
34174: LD_INT 5
34176: EQUAL
34177: IFFALSE 34187
// sLevel := true ;
34179: LD_ADDR_EXP 94
34183: PUSH
34184: LD_INT 1
34186: ST_TO_ADDR
// if p3 = 6 then
34187: LD_VAR 0 3
34191: PUSH
34192: LD_INT 6
34194: EQUAL
34195: IFFALSE 34205
// sArmoury := true ;
34197: LD_ADDR_EXP 95
34201: PUSH
34202: LD_INT 1
34204: ST_TO_ADDR
// if p3 = 7 then
34205: LD_VAR 0 3
34209: PUSH
34210: LD_INT 7
34212: EQUAL
34213: IFFALSE 34223
// sRadar := true ;
34215: LD_ADDR_EXP 96
34219: PUSH
34220: LD_INT 1
34222: ST_TO_ADDR
// if p3 = 8 then
34223: LD_VAR 0 3
34227: PUSH
34228: LD_INT 8
34230: EQUAL
34231: IFFALSE 34241
// sBunker := true ;
34233: LD_ADDR_EXP 97
34237: PUSH
34238: LD_INT 1
34240: ST_TO_ADDR
// if p3 = 9 then
34241: LD_VAR 0 3
34245: PUSH
34246: LD_INT 9
34248: EQUAL
34249: IFFALSE 34259
// sHack := true ;
34251: LD_ADDR_EXP 98
34255: PUSH
34256: LD_INT 1
34258: ST_TO_ADDR
// if p3 = 10 then
34259: LD_VAR 0 3
34263: PUSH
34264: LD_INT 10
34266: EQUAL
34267: IFFALSE 34277
// sFire := true ;
34269: LD_ADDR_EXP 99
34273: PUSH
34274: LD_INT 1
34276: ST_TO_ADDR
// if p3 = 11 then
34277: LD_VAR 0 3
34281: PUSH
34282: LD_INT 11
34284: EQUAL
34285: IFFALSE 34295
// sRefresh := true ;
34287: LD_ADDR_EXP 100
34291: PUSH
34292: LD_INT 1
34294: ST_TO_ADDR
// if p3 = 12 then
34295: LD_VAR 0 3
34299: PUSH
34300: LD_INT 12
34302: EQUAL
34303: IFFALSE 34313
// sExp := true ;
34305: LD_ADDR_EXP 101
34309: PUSH
34310: LD_INT 1
34312: ST_TO_ADDR
// if p3 = 13 then
34313: LD_VAR 0 3
34317: PUSH
34318: LD_INT 13
34320: EQUAL
34321: IFFALSE 34331
// sDepot := true ;
34323: LD_ADDR_EXP 102
34327: PUSH
34328: LD_INT 1
34330: ST_TO_ADDR
// if p3 = 14 then
34331: LD_VAR 0 3
34335: PUSH
34336: LD_INT 14
34338: EQUAL
34339: IFFALSE 34349
// sFlag := true ;
34341: LD_ADDR_EXP 103
34345: PUSH
34346: LD_INT 1
34348: ST_TO_ADDR
// if p3 = 15 then
34349: LD_VAR 0 3
34353: PUSH
34354: LD_INT 15
34356: EQUAL
34357: IFFALSE 34367
// sKamikadze := true ;
34359: LD_ADDR_EXP 111
34363: PUSH
34364: LD_INT 1
34366: ST_TO_ADDR
// if p3 = 16 then
34367: LD_VAR 0 3
34371: PUSH
34372: LD_INT 16
34374: EQUAL
34375: IFFALSE 34385
// sTroll := true ;
34377: LD_ADDR_EXP 112
34381: PUSH
34382: LD_INT 1
34384: ST_TO_ADDR
// if p3 = 17 then
34385: LD_VAR 0 3
34389: PUSH
34390: LD_INT 17
34392: EQUAL
34393: IFFALSE 34403
// sSlow := true ;
34395: LD_ADDR_EXP 113
34399: PUSH
34400: LD_INT 1
34402: ST_TO_ADDR
// if p3 = 18 then
34403: LD_VAR 0 3
34407: PUSH
34408: LD_INT 18
34410: EQUAL
34411: IFFALSE 34421
// sLack := true ;
34413: LD_ADDR_EXP 114
34417: PUSH
34418: LD_INT 1
34420: ST_TO_ADDR
// if p3 = 19 then
34421: LD_VAR 0 3
34425: PUSH
34426: LD_INT 19
34428: EQUAL
34429: IFFALSE 34439
// sTank := true ;
34431: LD_ADDR_EXP 116
34435: PUSH
34436: LD_INT 1
34438: ST_TO_ADDR
// if p3 = 20 then
34439: LD_VAR 0 3
34443: PUSH
34444: LD_INT 20
34446: EQUAL
34447: IFFALSE 34457
// sRemote := true ;
34449: LD_ADDR_EXP 117
34453: PUSH
34454: LD_INT 1
34456: ST_TO_ADDR
// if p3 = 21 then
34457: LD_VAR 0 3
34461: PUSH
34462: LD_INT 21
34464: EQUAL
34465: IFFALSE 34475
// sPowell := true ;
34467: LD_ADDR_EXP 118
34471: PUSH
34472: LD_INT 1
34474: ST_TO_ADDR
// if p3 = 22 then
34475: LD_VAR 0 3
34479: PUSH
34480: LD_INT 22
34482: EQUAL
34483: IFFALSE 34493
// sTeleport := true ;
34485: LD_ADDR_EXP 121
34489: PUSH
34490: LD_INT 1
34492: ST_TO_ADDR
// if p3 = 23 then
34493: LD_VAR 0 3
34497: PUSH
34498: LD_INT 23
34500: EQUAL
34501: IFFALSE 34511
// sOilTower := true ;
34503: LD_ADDR_EXP 123
34507: PUSH
34508: LD_INT 1
34510: ST_TO_ADDR
// if p3 = 24 then
34511: LD_VAR 0 3
34515: PUSH
34516: LD_INT 24
34518: EQUAL
34519: IFFALSE 34529
// sShovel := true ;
34521: LD_ADDR_EXP 124
34525: PUSH
34526: LD_INT 1
34528: ST_TO_ADDR
// if p3 = 25 then
34529: LD_VAR 0 3
34533: PUSH
34534: LD_INT 25
34536: EQUAL
34537: IFFALSE 34547
// sSheik := true ;
34539: LD_ADDR_EXP 125
34543: PUSH
34544: LD_INT 1
34546: ST_TO_ADDR
// if p3 = 26 then
34547: LD_VAR 0 3
34551: PUSH
34552: LD_INT 26
34554: EQUAL
34555: IFFALSE 34565
// sEarthquake := true ;
34557: LD_ADDR_EXP 127
34561: PUSH
34562: LD_INT 1
34564: ST_TO_ADDR
// if p3 = 27 then
34565: LD_VAR 0 3
34569: PUSH
34570: LD_INT 27
34572: EQUAL
34573: IFFALSE 34583
// sAI := true ;
34575: LD_ADDR_EXP 128
34579: PUSH
34580: LD_INT 1
34582: ST_TO_ADDR
// if p3 = 28 then
34583: LD_VAR 0 3
34587: PUSH
34588: LD_INT 28
34590: EQUAL
34591: IFFALSE 34601
// sCargo := true ;
34593: LD_ADDR_EXP 131
34597: PUSH
34598: LD_INT 1
34600: ST_TO_ADDR
// if p3 = 29 then
34601: LD_VAR 0 3
34605: PUSH
34606: LD_INT 29
34608: EQUAL
34609: IFFALSE 34619
// sDLaser := true ;
34611: LD_ADDR_EXP 132
34615: PUSH
34616: LD_INT 1
34618: ST_TO_ADDR
// if p3 = 30 then
34619: LD_VAR 0 3
34623: PUSH
34624: LD_INT 30
34626: EQUAL
34627: IFFALSE 34637
// sExchange := true ;
34629: LD_ADDR_EXP 133
34633: PUSH
34634: LD_INT 1
34636: ST_TO_ADDR
// if p3 = 31 then
34637: LD_VAR 0 3
34641: PUSH
34642: LD_INT 31
34644: EQUAL
34645: IFFALSE 34655
// sFac := true ;
34647: LD_ADDR_EXP 134
34651: PUSH
34652: LD_INT 1
34654: ST_TO_ADDR
// if p3 = 32 then
34655: LD_VAR 0 3
34659: PUSH
34660: LD_INT 32
34662: EQUAL
34663: IFFALSE 34673
// sPower := true ;
34665: LD_ADDR_EXP 135
34669: PUSH
34670: LD_INT 1
34672: ST_TO_ADDR
// if p3 = 33 then
34673: LD_VAR 0 3
34677: PUSH
34678: LD_INT 33
34680: EQUAL
34681: IFFALSE 34691
// sRandom := true ;
34683: LD_ADDR_EXP 136
34687: PUSH
34688: LD_INT 1
34690: ST_TO_ADDR
// if p3 = 34 then
34691: LD_VAR 0 3
34695: PUSH
34696: LD_INT 34
34698: EQUAL
34699: IFFALSE 34709
// sShield := true ;
34701: LD_ADDR_EXP 137
34705: PUSH
34706: LD_INT 1
34708: ST_TO_ADDR
// if p3 = 35 then
34709: LD_VAR 0 3
34713: PUSH
34714: LD_INT 35
34716: EQUAL
34717: IFFALSE 34727
// sTime := true ;
34719: LD_ADDR_EXP 138
34723: PUSH
34724: LD_INT 1
34726: ST_TO_ADDR
// if p3 = 36 then
34727: LD_VAR 0 3
34731: PUSH
34732: LD_INT 36
34734: EQUAL
34735: IFFALSE 34745
// sTools := true ;
34737: LD_ADDR_EXP 139
34741: PUSH
34742: LD_INT 1
34744: ST_TO_ADDR
// if p3 = 101 then
34745: LD_VAR 0 3
34749: PUSH
34750: LD_INT 101
34752: EQUAL
34753: IFFALSE 34763
// sSold := true ;
34755: LD_ADDR_EXP 104
34759: PUSH
34760: LD_INT 1
34762: ST_TO_ADDR
// if p3 = 102 then
34763: LD_VAR 0 3
34767: PUSH
34768: LD_INT 102
34770: EQUAL
34771: IFFALSE 34781
// sDiff := true ;
34773: LD_ADDR_EXP 105
34777: PUSH
34778: LD_INT 1
34780: ST_TO_ADDR
// if p3 = 103 then
34781: LD_VAR 0 3
34785: PUSH
34786: LD_INT 103
34788: EQUAL
34789: IFFALSE 34799
// sFog := true ;
34791: LD_ADDR_EXP 108
34795: PUSH
34796: LD_INT 1
34798: ST_TO_ADDR
// if p3 = 104 then
34799: LD_VAR 0 3
34803: PUSH
34804: LD_INT 104
34806: EQUAL
34807: IFFALSE 34817
// sReset := true ;
34809: LD_ADDR_EXP 109
34813: PUSH
34814: LD_INT 1
34816: ST_TO_ADDR
// if p3 = 105 then
34817: LD_VAR 0 3
34821: PUSH
34822: LD_INT 105
34824: EQUAL
34825: IFFALSE 34835
// sSun := true ;
34827: LD_ADDR_EXP 110
34831: PUSH
34832: LD_INT 1
34834: ST_TO_ADDR
// if p3 = 106 then
34835: LD_VAR 0 3
34839: PUSH
34840: LD_INT 106
34842: EQUAL
34843: IFFALSE 34853
// sTiger := true ;
34845: LD_ADDR_EXP 106
34849: PUSH
34850: LD_INT 1
34852: ST_TO_ADDR
// if p3 = 107 then
34853: LD_VAR 0 3
34857: PUSH
34858: LD_INT 107
34860: EQUAL
34861: IFFALSE 34871
// sBomb := true ;
34863: LD_ADDR_EXP 107
34867: PUSH
34868: LD_INT 1
34870: ST_TO_ADDR
// if p3 = 108 then
34871: LD_VAR 0 3
34875: PUSH
34876: LD_INT 108
34878: EQUAL
34879: IFFALSE 34889
// sWound := true ;
34881: LD_ADDR_EXP 115
34885: PUSH
34886: LD_INT 1
34888: ST_TO_ADDR
// if p3 = 109 then
34889: LD_VAR 0 3
34893: PUSH
34894: LD_INT 109
34896: EQUAL
34897: IFFALSE 34907
// sBetray := true ;
34899: LD_ADDR_EXP 119
34903: PUSH
34904: LD_INT 1
34906: ST_TO_ADDR
// if p3 = 110 then
34907: LD_VAR 0 3
34911: PUSH
34912: LD_INT 110
34914: EQUAL
34915: IFFALSE 34925
// sContamin := true ;
34917: LD_ADDR_EXP 120
34921: PUSH
34922: LD_INT 1
34924: ST_TO_ADDR
// if p3 = 111 then
34925: LD_VAR 0 3
34929: PUSH
34930: LD_INT 111
34932: EQUAL
34933: IFFALSE 34943
// sOil := true ;
34935: LD_ADDR_EXP 122
34939: PUSH
34940: LD_INT 1
34942: ST_TO_ADDR
// if p3 = 112 then
34943: LD_VAR 0 3
34947: PUSH
34948: LD_INT 112
34950: EQUAL
34951: IFFALSE 34961
// sStu := true ;
34953: LD_ADDR_EXP 126
34957: PUSH
34958: LD_INT 1
34960: ST_TO_ADDR
// if p3 = 113 then
34961: LD_VAR 0 3
34965: PUSH
34966: LD_INT 113
34968: EQUAL
34969: IFFALSE 34979
// sBazooka := true ;
34971: LD_ADDR_EXP 129
34975: PUSH
34976: LD_INT 1
34978: ST_TO_ADDR
// if p3 = 114 then
34979: LD_VAR 0 3
34983: PUSH
34984: LD_INT 114
34986: EQUAL
34987: IFFALSE 34997
// sMortar := true ;
34989: LD_ADDR_EXP 130
34993: PUSH
34994: LD_INT 1
34996: ST_TO_ADDR
// if p3 = 115 then
34997: LD_VAR 0 3
35001: PUSH
35002: LD_INT 115
35004: EQUAL
35005: IFFALSE 35015
// sRanger := true ;
35007: LD_ADDR_EXP 140
35011: PUSH
35012: LD_INT 1
35014: ST_TO_ADDR
// if p3 = 116 then
35015: LD_VAR 0 3
35019: PUSH
35020: LD_INT 116
35022: EQUAL
35023: IFFALSE 35033
// sComputer := true ;
35025: LD_ADDR_EXP 141
35029: PUSH
35030: LD_INT 1
35032: ST_TO_ADDR
// if p3 = 117 then
35033: LD_VAR 0 3
35037: PUSH
35038: LD_INT 117
35040: EQUAL
35041: IFFALSE 35051
// s30 := true ;
35043: LD_ADDR_EXP 142
35047: PUSH
35048: LD_INT 1
35050: ST_TO_ADDR
// if p3 = 118 then
35051: LD_VAR 0 3
35055: PUSH
35056: LD_INT 118
35058: EQUAL
35059: IFFALSE 35069
// s60 := true ;
35061: LD_ADDR_EXP 143
35065: PUSH
35066: LD_INT 1
35068: ST_TO_ADDR
// end ; if p2 = hack_mode then
35069: LD_VAR 0 2
35073: PUSH
35074: LD_INT 101
35076: EQUAL
35077: IFFALSE 35205
// begin case p3 of 1 :
35079: LD_VAR 0 3
35083: PUSH
35084: LD_INT 1
35086: DOUBLE
35087: EQUAL
35088: IFTRUE 35092
35090: GO 35099
35092: POP
// hHackUnlimitedResources ; 2 :
35093: CALL 47352 0 0
35097: GO 35205
35099: LD_INT 2
35101: DOUBLE
35102: EQUAL
35103: IFTRUE 35107
35105: GO 35114
35107: POP
// hHackSetLevel10 ; 3 :
35108: CALL 47485 0 0
35112: GO 35205
35114: LD_INT 3
35116: DOUBLE
35117: EQUAL
35118: IFTRUE 35122
35120: GO 35129
35122: POP
// hHackSetLevel10YourUnits ; 4 :
35123: CALL 47570 0 0
35127: GO 35205
35129: LD_INT 4
35131: DOUBLE
35132: EQUAL
35133: IFTRUE 35137
35135: GO 35144
35137: POP
// hHackInvincible ; 5 :
35138: CALL 48018 0 0
35142: GO 35205
35144: LD_INT 5
35146: DOUBLE
35147: EQUAL
35148: IFTRUE 35152
35150: GO 35159
35152: POP
// hHackInvisible ; 6 :
35153: CALL 48129 0 0
35157: GO 35205
35159: LD_INT 6
35161: DOUBLE
35162: EQUAL
35163: IFTRUE 35167
35165: GO 35174
35167: POP
// hHackChangeYourSide ; 7 :
35168: CALL 48186 0 0
35172: GO 35205
35174: LD_INT 7
35176: DOUBLE
35177: EQUAL
35178: IFTRUE 35182
35180: GO 35189
35182: POP
// hHackChangeUnitSide ; 8 :
35183: CALL 48228 0 0
35187: GO 35205
35189: LD_INT 8
35191: DOUBLE
35192: EQUAL
35193: IFTRUE 35197
35195: GO 35204
35197: POP
// hHackFog ; end ;
35198: CALL 48329 0 0
35202: GO 35205
35204: POP
// end ; if p2 = game_save_mode then
35205: LD_VAR 0 2
35209: PUSH
35210: LD_INT 102
35212: EQUAL
35213: IFFALSE 35268
// begin if p3 = 1 then
35215: LD_VAR 0 3
35219: PUSH
35220: LD_INT 1
35222: EQUAL
35223: IFFALSE 35235
// globalGameSaveCounter := p4 ;
35225: LD_ADDR_EXP 86
35229: PUSH
35230: LD_VAR 0 4
35234: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
35235: LD_VAR 0 3
35239: PUSH
35240: LD_INT 2
35242: EQUAL
35243: PUSH
35244: LD_EXP 86
35248: AND
35249: IFFALSE 35268
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
35251: LD_STRING setGameSaveCounter(
35253: PUSH
35254: LD_EXP 86
35258: STR
35259: PUSH
35260: LD_STRING )
35262: STR
35263: PPUSH
35264: CALL_OW 559
// end ; end ;
35268: LD_VAR 0 7
35272: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
35273: LD_INT 0
35275: PPUSH
// streamModeActive := false ;
35276: LD_ADDR_EXP 87
35280: PUSH
35281: LD_INT 0
35283: ST_TO_ADDR
// normalCounter := 36 ;
35284: LD_ADDR_EXP 88
35288: PUSH
35289: LD_INT 36
35291: ST_TO_ADDR
// hardcoreCounter := 18 ;
35292: LD_ADDR_EXP 89
35296: PUSH
35297: LD_INT 18
35299: ST_TO_ADDR
// sRocket := false ;
35300: LD_ADDR_EXP 92
35304: PUSH
35305: LD_INT 0
35307: ST_TO_ADDR
// sSpeed := false ;
35308: LD_ADDR_EXP 91
35312: PUSH
35313: LD_INT 0
35315: ST_TO_ADDR
// sEngine := false ;
35316: LD_ADDR_EXP 93
35320: PUSH
35321: LD_INT 0
35323: ST_TO_ADDR
// sSpec := false ;
35324: LD_ADDR_EXP 90
35328: PUSH
35329: LD_INT 0
35331: ST_TO_ADDR
// sLevel := false ;
35332: LD_ADDR_EXP 94
35336: PUSH
35337: LD_INT 0
35339: ST_TO_ADDR
// sArmoury := false ;
35340: LD_ADDR_EXP 95
35344: PUSH
35345: LD_INT 0
35347: ST_TO_ADDR
// sRadar := false ;
35348: LD_ADDR_EXP 96
35352: PUSH
35353: LD_INT 0
35355: ST_TO_ADDR
// sBunker := false ;
35356: LD_ADDR_EXP 97
35360: PUSH
35361: LD_INT 0
35363: ST_TO_ADDR
// sHack := false ;
35364: LD_ADDR_EXP 98
35368: PUSH
35369: LD_INT 0
35371: ST_TO_ADDR
// sFire := false ;
35372: LD_ADDR_EXP 99
35376: PUSH
35377: LD_INT 0
35379: ST_TO_ADDR
// sRefresh := false ;
35380: LD_ADDR_EXP 100
35384: PUSH
35385: LD_INT 0
35387: ST_TO_ADDR
// sExp := false ;
35388: LD_ADDR_EXP 101
35392: PUSH
35393: LD_INT 0
35395: ST_TO_ADDR
// sDepot := false ;
35396: LD_ADDR_EXP 102
35400: PUSH
35401: LD_INT 0
35403: ST_TO_ADDR
// sFlag := false ;
35404: LD_ADDR_EXP 103
35408: PUSH
35409: LD_INT 0
35411: ST_TO_ADDR
// sKamikadze := false ;
35412: LD_ADDR_EXP 111
35416: PUSH
35417: LD_INT 0
35419: ST_TO_ADDR
// sTroll := false ;
35420: LD_ADDR_EXP 112
35424: PUSH
35425: LD_INT 0
35427: ST_TO_ADDR
// sSlow := false ;
35428: LD_ADDR_EXP 113
35432: PUSH
35433: LD_INT 0
35435: ST_TO_ADDR
// sLack := false ;
35436: LD_ADDR_EXP 114
35440: PUSH
35441: LD_INT 0
35443: ST_TO_ADDR
// sTank := false ;
35444: LD_ADDR_EXP 116
35448: PUSH
35449: LD_INT 0
35451: ST_TO_ADDR
// sRemote := false ;
35452: LD_ADDR_EXP 117
35456: PUSH
35457: LD_INT 0
35459: ST_TO_ADDR
// sPowell := false ;
35460: LD_ADDR_EXP 118
35464: PUSH
35465: LD_INT 0
35467: ST_TO_ADDR
// sTeleport := false ;
35468: LD_ADDR_EXP 121
35472: PUSH
35473: LD_INT 0
35475: ST_TO_ADDR
// sOilTower := false ;
35476: LD_ADDR_EXP 123
35480: PUSH
35481: LD_INT 0
35483: ST_TO_ADDR
// sShovel := false ;
35484: LD_ADDR_EXP 124
35488: PUSH
35489: LD_INT 0
35491: ST_TO_ADDR
// sSheik := false ;
35492: LD_ADDR_EXP 125
35496: PUSH
35497: LD_INT 0
35499: ST_TO_ADDR
// sEarthquake := false ;
35500: LD_ADDR_EXP 127
35504: PUSH
35505: LD_INT 0
35507: ST_TO_ADDR
// sAI := false ;
35508: LD_ADDR_EXP 128
35512: PUSH
35513: LD_INT 0
35515: ST_TO_ADDR
// sCargo := false ;
35516: LD_ADDR_EXP 131
35520: PUSH
35521: LD_INT 0
35523: ST_TO_ADDR
// sDLaser := false ;
35524: LD_ADDR_EXP 132
35528: PUSH
35529: LD_INT 0
35531: ST_TO_ADDR
// sExchange := false ;
35532: LD_ADDR_EXP 133
35536: PUSH
35537: LD_INT 0
35539: ST_TO_ADDR
// sFac := false ;
35540: LD_ADDR_EXP 134
35544: PUSH
35545: LD_INT 0
35547: ST_TO_ADDR
// sPower := false ;
35548: LD_ADDR_EXP 135
35552: PUSH
35553: LD_INT 0
35555: ST_TO_ADDR
// sRandom := false ;
35556: LD_ADDR_EXP 136
35560: PUSH
35561: LD_INT 0
35563: ST_TO_ADDR
// sShield := false ;
35564: LD_ADDR_EXP 137
35568: PUSH
35569: LD_INT 0
35571: ST_TO_ADDR
// sTime := false ;
35572: LD_ADDR_EXP 138
35576: PUSH
35577: LD_INT 0
35579: ST_TO_ADDR
// sTools := false ;
35580: LD_ADDR_EXP 139
35584: PUSH
35585: LD_INT 0
35587: ST_TO_ADDR
// sSold := false ;
35588: LD_ADDR_EXP 104
35592: PUSH
35593: LD_INT 0
35595: ST_TO_ADDR
// sDiff := false ;
35596: LD_ADDR_EXP 105
35600: PUSH
35601: LD_INT 0
35603: ST_TO_ADDR
// sFog := false ;
35604: LD_ADDR_EXP 108
35608: PUSH
35609: LD_INT 0
35611: ST_TO_ADDR
// sReset := false ;
35612: LD_ADDR_EXP 109
35616: PUSH
35617: LD_INT 0
35619: ST_TO_ADDR
// sSun := false ;
35620: LD_ADDR_EXP 110
35624: PUSH
35625: LD_INT 0
35627: ST_TO_ADDR
// sTiger := false ;
35628: LD_ADDR_EXP 106
35632: PUSH
35633: LD_INT 0
35635: ST_TO_ADDR
// sBomb := false ;
35636: LD_ADDR_EXP 107
35640: PUSH
35641: LD_INT 0
35643: ST_TO_ADDR
// sWound := false ;
35644: LD_ADDR_EXP 115
35648: PUSH
35649: LD_INT 0
35651: ST_TO_ADDR
// sBetray := false ;
35652: LD_ADDR_EXP 119
35656: PUSH
35657: LD_INT 0
35659: ST_TO_ADDR
// sContamin := false ;
35660: LD_ADDR_EXP 120
35664: PUSH
35665: LD_INT 0
35667: ST_TO_ADDR
// sOil := false ;
35668: LD_ADDR_EXP 122
35672: PUSH
35673: LD_INT 0
35675: ST_TO_ADDR
// sStu := false ;
35676: LD_ADDR_EXP 126
35680: PUSH
35681: LD_INT 0
35683: ST_TO_ADDR
// sBazooka := false ;
35684: LD_ADDR_EXP 129
35688: PUSH
35689: LD_INT 0
35691: ST_TO_ADDR
// sMortar := false ;
35692: LD_ADDR_EXP 130
35696: PUSH
35697: LD_INT 0
35699: ST_TO_ADDR
// sRanger := false ;
35700: LD_ADDR_EXP 140
35704: PUSH
35705: LD_INT 0
35707: ST_TO_ADDR
// sComputer := false ;
35708: LD_ADDR_EXP 141
35712: PUSH
35713: LD_INT 0
35715: ST_TO_ADDR
// s30 := false ;
35716: LD_ADDR_EXP 142
35720: PUSH
35721: LD_INT 0
35723: ST_TO_ADDR
// s60 := false ;
35724: LD_ADDR_EXP 143
35728: PUSH
35729: LD_INT 0
35731: ST_TO_ADDR
// end ;
35732: LD_VAR 0 1
35736: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
35737: LD_INT 0
35739: PPUSH
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
// result := [ ] ;
35746: LD_ADDR_VAR 0 2
35750: PUSH
35751: EMPTY
35752: ST_TO_ADDR
// if campaign_id = 1 then
35753: LD_OWVAR 69
35757: PUSH
35758: LD_INT 1
35760: EQUAL
35761: IFFALSE 38927
// begin case mission_number of 1 :
35763: LD_OWVAR 70
35767: PUSH
35768: LD_INT 1
35770: DOUBLE
35771: EQUAL
35772: IFTRUE 35776
35774: GO 35852
35776: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
35777: LD_ADDR_VAR 0 2
35781: PUSH
35782: LD_INT 2
35784: PUSH
35785: LD_INT 4
35787: PUSH
35788: LD_INT 11
35790: PUSH
35791: LD_INT 12
35793: PUSH
35794: LD_INT 15
35796: PUSH
35797: LD_INT 16
35799: PUSH
35800: LD_INT 22
35802: PUSH
35803: LD_INT 23
35805: PUSH
35806: LD_INT 26
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 101
35822: PUSH
35823: LD_INT 102
35825: PUSH
35826: LD_INT 106
35828: PUSH
35829: LD_INT 116
35831: PUSH
35832: LD_INT 117
35834: PUSH
35835: LD_INT 118
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: ST_TO_ADDR
35850: GO 38925
35852: LD_INT 2
35854: DOUBLE
35855: EQUAL
35856: IFTRUE 35860
35858: GO 35944
35860: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
35861: LD_ADDR_VAR 0 2
35865: PUSH
35866: LD_INT 2
35868: PUSH
35869: LD_INT 4
35871: PUSH
35872: LD_INT 11
35874: PUSH
35875: LD_INT 12
35877: PUSH
35878: LD_INT 15
35880: PUSH
35881: LD_INT 16
35883: PUSH
35884: LD_INT 22
35886: PUSH
35887: LD_INT 23
35889: PUSH
35890: LD_INT 26
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 101
35906: PUSH
35907: LD_INT 102
35909: PUSH
35910: LD_INT 105
35912: PUSH
35913: LD_INT 106
35915: PUSH
35916: LD_INT 108
35918: PUSH
35919: LD_INT 116
35921: PUSH
35922: LD_INT 117
35924: PUSH
35925: LD_INT 118
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: ST_TO_ADDR
35942: GO 38925
35944: LD_INT 3
35946: DOUBLE
35947: EQUAL
35948: IFTRUE 35952
35950: GO 36040
35952: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
35953: LD_ADDR_VAR 0 2
35957: PUSH
35958: LD_INT 2
35960: PUSH
35961: LD_INT 4
35963: PUSH
35964: LD_INT 5
35966: PUSH
35967: LD_INT 11
35969: PUSH
35970: LD_INT 12
35972: PUSH
35973: LD_INT 15
35975: PUSH
35976: LD_INT 16
35978: PUSH
35979: LD_INT 22
35981: PUSH
35982: LD_INT 26
35984: PUSH
35985: LD_INT 36
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 101
36002: PUSH
36003: LD_INT 102
36005: PUSH
36006: LD_INT 105
36008: PUSH
36009: LD_INT 106
36011: PUSH
36012: LD_INT 108
36014: PUSH
36015: LD_INT 116
36017: PUSH
36018: LD_INT 117
36020: PUSH
36021: LD_INT 118
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: ST_TO_ADDR
36038: GO 38925
36040: LD_INT 4
36042: DOUBLE
36043: EQUAL
36044: IFTRUE 36048
36046: GO 36144
36048: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
36049: LD_ADDR_VAR 0 2
36053: PUSH
36054: LD_INT 2
36056: PUSH
36057: LD_INT 4
36059: PUSH
36060: LD_INT 5
36062: PUSH
36063: LD_INT 8
36065: PUSH
36066: LD_INT 11
36068: PUSH
36069: LD_INT 12
36071: PUSH
36072: LD_INT 15
36074: PUSH
36075: LD_INT 16
36077: PUSH
36078: LD_INT 22
36080: PUSH
36081: LD_INT 23
36083: PUSH
36084: LD_INT 26
36086: PUSH
36087: LD_INT 36
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 101
36106: PUSH
36107: LD_INT 102
36109: PUSH
36110: LD_INT 105
36112: PUSH
36113: LD_INT 106
36115: PUSH
36116: LD_INT 108
36118: PUSH
36119: LD_INT 116
36121: PUSH
36122: LD_INT 117
36124: PUSH
36125: LD_INT 118
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: ST_TO_ADDR
36142: GO 38925
36144: LD_INT 5
36146: DOUBLE
36147: EQUAL
36148: IFTRUE 36152
36150: GO 36264
36152: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
36153: LD_ADDR_VAR 0 2
36157: PUSH
36158: LD_INT 2
36160: PUSH
36161: LD_INT 4
36163: PUSH
36164: LD_INT 5
36166: PUSH
36167: LD_INT 6
36169: PUSH
36170: LD_INT 8
36172: PUSH
36173: LD_INT 11
36175: PUSH
36176: LD_INT 12
36178: PUSH
36179: LD_INT 15
36181: PUSH
36182: LD_INT 16
36184: PUSH
36185: LD_INT 22
36187: PUSH
36188: LD_INT 23
36190: PUSH
36191: LD_INT 25
36193: PUSH
36194: LD_INT 26
36196: PUSH
36197: LD_INT 36
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 101
36218: PUSH
36219: LD_INT 102
36221: PUSH
36222: LD_INT 105
36224: PUSH
36225: LD_INT 106
36227: PUSH
36228: LD_INT 108
36230: PUSH
36231: LD_INT 109
36233: PUSH
36234: LD_INT 112
36236: PUSH
36237: LD_INT 116
36239: PUSH
36240: LD_INT 117
36242: PUSH
36243: LD_INT 118
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: ST_TO_ADDR
36262: GO 38925
36264: LD_INT 6
36266: DOUBLE
36267: EQUAL
36268: IFTRUE 36272
36270: GO 36404
36272: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
36273: LD_ADDR_VAR 0 2
36277: PUSH
36278: LD_INT 2
36280: PUSH
36281: LD_INT 4
36283: PUSH
36284: LD_INT 5
36286: PUSH
36287: LD_INT 6
36289: PUSH
36290: LD_INT 8
36292: PUSH
36293: LD_INT 11
36295: PUSH
36296: LD_INT 12
36298: PUSH
36299: LD_INT 15
36301: PUSH
36302: LD_INT 16
36304: PUSH
36305: LD_INT 20
36307: PUSH
36308: LD_INT 21
36310: PUSH
36311: LD_INT 22
36313: PUSH
36314: LD_INT 23
36316: PUSH
36317: LD_INT 25
36319: PUSH
36320: LD_INT 26
36322: PUSH
36323: LD_INT 30
36325: PUSH
36326: LD_INT 31
36328: PUSH
36329: LD_INT 32
36331: PUSH
36332: LD_INT 36
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 101
36358: PUSH
36359: LD_INT 102
36361: PUSH
36362: LD_INT 105
36364: PUSH
36365: LD_INT 106
36367: PUSH
36368: LD_INT 108
36370: PUSH
36371: LD_INT 109
36373: PUSH
36374: LD_INT 112
36376: PUSH
36377: LD_INT 116
36379: PUSH
36380: LD_INT 117
36382: PUSH
36383: LD_INT 118
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: ST_TO_ADDR
36402: GO 38925
36404: LD_INT 7
36406: DOUBLE
36407: EQUAL
36408: IFTRUE 36412
36410: GO 36524
36412: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
36413: LD_ADDR_VAR 0 2
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: LD_INT 4
36423: PUSH
36424: LD_INT 5
36426: PUSH
36427: LD_INT 7
36429: PUSH
36430: LD_INT 11
36432: PUSH
36433: LD_INT 12
36435: PUSH
36436: LD_INT 15
36438: PUSH
36439: LD_INT 16
36441: PUSH
36442: LD_INT 20
36444: PUSH
36445: LD_INT 21
36447: PUSH
36448: LD_INT 22
36450: PUSH
36451: LD_INT 23
36453: PUSH
36454: LD_INT 25
36456: PUSH
36457: LD_INT 26
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 101
36478: PUSH
36479: LD_INT 102
36481: PUSH
36482: LD_INT 103
36484: PUSH
36485: LD_INT 105
36487: PUSH
36488: LD_INT 106
36490: PUSH
36491: LD_INT 108
36493: PUSH
36494: LD_INT 112
36496: PUSH
36497: LD_INT 116
36499: PUSH
36500: LD_INT 117
36502: PUSH
36503: LD_INT 118
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: ST_TO_ADDR
36522: GO 38925
36524: LD_INT 8
36526: DOUBLE
36527: EQUAL
36528: IFTRUE 36532
36530: GO 36672
36532: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
36533: LD_ADDR_VAR 0 2
36537: PUSH
36538: LD_INT 2
36540: PUSH
36541: LD_INT 4
36543: PUSH
36544: LD_INT 5
36546: PUSH
36547: LD_INT 6
36549: PUSH
36550: LD_INT 7
36552: PUSH
36553: LD_INT 8
36555: PUSH
36556: LD_INT 11
36558: PUSH
36559: LD_INT 12
36561: PUSH
36562: LD_INT 15
36564: PUSH
36565: LD_INT 16
36567: PUSH
36568: LD_INT 20
36570: PUSH
36571: LD_INT 21
36573: PUSH
36574: LD_INT 22
36576: PUSH
36577: LD_INT 23
36579: PUSH
36580: LD_INT 25
36582: PUSH
36583: LD_INT 26
36585: PUSH
36586: LD_INT 30
36588: PUSH
36589: LD_INT 31
36591: PUSH
36592: LD_INT 32
36594: PUSH
36595: LD_INT 36
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 101
36622: PUSH
36623: LD_INT 102
36625: PUSH
36626: LD_INT 103
36628: PUSH
36629: LD_INT 105
36631: PUSH
36632: LD_INT 106
36634: PUSH
36635: LD_INT 108
36637: PUSH
36638: LD_INT 109
36640: PUSH
36641: LD_INT 112
36643: PUSH
36644: LD_INT 116
36646: PUSH
36647: LD_INT 117
36649: PUSH
36650: LD_INT 118
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: ST_TO_ADDR
36670: GO 38925
36672: LD_INT 9
36674: DOUBLE
36675: EQUAL
36676: IFTRUE 36680
36678: GO 36828
36680: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
36681: LD_ADDR_VAR 0 2
36685: PUSH
36686: LD_INT 2
36688: PUSH
36689: LD_INT 4
36691: PUSH
36692: LD_INT 5
36694: PUSH
36695: LD_INT 6
36697: PUSH
36698: LD_INT 7
36700: PUSH
36701: LD_INT 8
36703: PUSH
36704: LD_INT 11
36706: PUSH
36707: LD_INT 12
36709: PUSH
36710: LD_INT 15
36712: PUSH
36713: LD_INT 16
36715: PUSH
36716: LD_INT 20
36718: PUSH
36719: LD_INT 21
36721: PUSH
36722: LD_INT 22
36724: PUSH
36725: LD_INT 23
36727: PUSH
36728: LD_INT 25
36730: PUSH
36731: LD_INT 26
36733: PUSH
36734: LD_INT 28
36736: PUSH
36737: LD_INT 30
36739: PUSH
36740: LD_INT 31
36742: PUSH
36743: LD_INT 32
36745: PUSH
36746: LD_INT 36
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 101
36774: PUSH
36775: LD_INT 102
36777: PUSH
36778: LD_INT 103
36780: PUSH
36781: LD_INT 105
36783: PUSH
36784: LD_INT 106
36786: PUSH
36787: LD_INT 108
36789: PUSH
36790: LD_INT 109
36792: PUSH
36793: LD_INT 112
36795: PUSH
36796: LD_INT 114
36798: PUSH
36799: LD_INT 116
36801: PUSH
36802: LD_INT 117
36804: PUSH
36805: LD_INT 118
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: ST_TO_ADDR
36826: GO 38925
36828: LD_INT 10
36830: DOUBLE
36831: EQUAL
36832: IFTRUE 36836
36834: GO 37032
36836: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
36837: LD_ADDR_VAR 0 2
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: LD_INT 4
36847: PUSH
36848: LD_INT 5
36850: PUSH
36851: LD_INT 6
36853: PUSH
36854: LD_INT 7
36856: PUSH
36857: LD_INT 8
36859: PUSH
36860: LD_INT 9
36862: PUSH
36863: LD_INT 10
36865: PUSH
36866: LD_INT 11
36868: PUSH
36869: LD_INT 12
36871: PUSH
36872: LD_INT 13
36874: PUSH
36875: LD_INT 14
36877: PUSH
36878: LD_INT 15
36880: PUSH
36881: LD_INT 16
36883: PUSH
36884: LD_INT 17
36886: PUSH
36887: LD_INT 18
36889: PUSH
36890: LD_INT 19
36892: PUSH
36893: LD_INT 20
36895: PUSH
36896: LD_INT 21
36898: PUSH
36899: LD_INT 22
36901: PUSH
36902: LD_INT 23
36904: PUSH
36905: LD_INT 24
36907: PUSH
36908: LD_INT 25
36910: PUSH
36911: LD_INT 26
36913: PUSH
36914: LD_INT 28
36916: PUSH
36917: LD_INT 30
36919: PUSH
36920: LD_INT 31
36922: PUSH
36923: LD_INT 32
36925: PUSH
36926: LD_INT 36
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 101
36962: PUSH
36963: LD_INT 102
36965: PUSH
36966: LD_INT 103
36968: PUSH
36969: LD_INT 104
36971: PUSH
36972: LD_INT 105
36974: PUSH
36975: LD_INT 106
36977: PUSH
36978: LD_INT 107
36980: PUSH
36981: LD_INT 108
36983: PUSH
36984: LD_INT 109
36986: PUSH
36987: LD_INT 110
36989: PUSH
36990: LD_INT 111
36992: PUSH
36993: LD_INT 112
36995: PUSH
36996: LD_INT 114
36998: PUSH
36999: LD_INT 116
37001: PUSH
37002: LD_INT 117
37004: PUSH
37005: LD_INT 118
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: ST_TO_ADDR
37030: GO 38925
37032: LD_INT 11
37034: DOUBLE
37035: EQUAL
37036: IFTRUE 37040
37038: GO 37244
37040: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
37041: LD_ADDR_VAR 0 2
37045: PUSH
37046: LD_INT 2
37048: PUSH
37049: LD_INT 3
37051: PUSH
37052: LD_INT 4
37054: PUSH
37055: LD_INT 5
37057: PUSH
37058: LD_INT 6
37060: PUSH
37061: LD_INT 7
37063: PUSH
37064: LD_INT 8
37066: PUSH
37067: LD_INT 9
37069: PUSH
37070: LD_INT 10
37072: PUSH
37073: LD_INT 11
37075: PUSH
37076: LD_INT 12
37078: PUSH
37079: LD_INT 13
37081: PUSH
37082: LD_INT 14
37084: PUSH
37085: LD_INT 15
37087: PUSH
37088: LD_INT 16
37090: PUSH
37091: LD_INT 17
37093: PUSH
37094: LD_INT 18
37096: PUSH
37097: LD_INT 19
37099: PUSH
37100: LD_INT 20
37102: PUSH
37103: LD_INT 21
37105: PUSH
37106: LD_INT 22
37108: PUSH
37109: LD_INT 23
37111: PUSH
37112: LD_INT 24
37114: PUSH
37115: LD_INT 25
37117: PUSH
37118: LD_INT 26
37120: PUSH
37121: LD_INT 28
37123: PUSH
37124: LD_INT 30
37126: PUSH
37127: LD_INT 31
37129: PUSH
37130: LD_INT 32
37132: PUSH
37133: LD_INT 34
37135: PUSH
37136: LD_INT 36
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 101
37174: PUSH
37175: LD_INT 102
37177: PUSH
37178: LD_INT 103
37180: PUSH
37181: LD_INT 104
37183: PUSH
37184: LD_INT 105
37186: PUSH
37187: LD_INT 106
37189: PUSH
37190: LD_INT 107
37192: PUSH
37193: LD_INT 108
37195: PUSH
37196: LD_INT 109
37198: PUSH
37199: LD_INT 110
37201: PUSH
37202: LD_INT 111
37204: PUSH
37205: LD_INT 112
37207: PUSH
37208: LD_INT 114
37210: PUSH
37211: LD_INT 116
37213: PUSH
37214: LD_INT 117
37216: PUSH
37217: LD_INT 118
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: ST_TO_ADDR
37242: GO 38925
37244: LD_INT 12
37246: DOUBLE
37247: EQUAL
37248: IFTRUE 37252
37250: GO 37472
37252: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
37253: LD_ADDR_VAR 0 2
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: LD_INT 2
37263: PUSH
37264: LD_INT 3
37266: PUSH
37267: LD_INT 4
37269: PUSH
37270: LD_INT 5
37272: PUSH
37273: LD_INT 6
37275: PUSH
37276: LD_INT 7
37278: PUSH
37279: LD_INT 8
37281: PUSH
37282: LD_INT 9
37284: PUSH
37285: LD_INT 10
37287: PUSH
37288: LD_INT 11
37290: PUSH
37291: LD_INT 12
37293: PUSH
37294: LD_INT 13
37296: PUSH
37297: LD_INT 14
37299: PUSH
37300: LD_INT 15
37302: PUSH
37303: LD_INT 16
37305: PUSH
37306: LD_INT 17
37308: PUSH
37309: LD_INT 18
37311: PUSH
37312: LD_INT 19
37314: PUSH
37315: LD_INT 20
37317: PUSH
37318: LD_INT 21
37320: PUSH
37321: LD_INT 22
37323: PUSH
37324: LD_INT 23
37326: PUSH
37327: LD_INT 24
37329: PUSH
37330: LD_INT 25
37332: PUSH
37333: LD_INT 26
37335: PUSH
37336: LD_INT 27
37338: PUSH
37339: LD_INT 28
37341: PUSH
37342: LD_INT 30
37344: PUSH
37345: LD_INT 31
37347: PUSH
37348: LD_INT 32
37350: PUSH
37351: LD_INT 33
37353: PUSH
37354: LD_INT 34
37356: PUSH
37357: LD_INT 36
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 101
37398: PUSH
37399: LD_INT 102
37401: PUSH
37402: LD_INT 103
37404: PUSH
37405: LD_INT 104
37407: PUSH
37408: LD_INT 105
37410: PUSH
37411: LD_INT 106
37413: PUSH
37414: LD_INT 107
37416: PUSH
37417: LD_INT 108
37419: PUSH
37420: LD_INT 109
37422: PUSH
37423: LD_INT 110
37425: PUSH
37426: LD_INT 111
37428: PUSH
37429: LD_INT 112
37431: PUSH
37432: LD_INT 113
37434: PUSH
37435: LD_INT 114
37437: PUSH
37438: LD_INT 116
37440: PUSH
37441: LD_INT 117
37443: PUSH
37444: LD_INT 118
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: ST_TO_ADDR
37470: GO 38925
37472: LD_INT 13
37474: DOUBLE
37475: EQUAL
37476: IFTRUE 37480
37478: GO 37688
37480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
37481: LD_ADDR_VAR 0 2
37485: PUSH
37486: LD_INT 1
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: LD_INT 3
37494: PUSH
37495: LD_INT 4
37497: PUSH
37498: LD_INT 5
37500: PUSH
37501: LD_INT 8
37503: PUSH
37504: LD_INT 9
37506: PUSH
37507: LD_INT 10
37509: PUSH
37510: LD_INT 11
37512: PUSH
37513: LD_INT 12
37515: PUSH
37516: LD_INT 14
37518: PUSH
37519: LD_INT 15
37521: PUSH
37522: LD_INT 16
37524: PUSH
37525: LD_INT 17
37527: PUSH
37528: LD_INT 18
37530: PUSH
37531: LD_INT 19
37533: PUSH
37534: LD_INT 20
37536: PUSH
37537: LD_INT 21
37539: PUSH
37540: LD_INT 22
37542: PUSH
37543: LD_INT 23
37545: PUSH
37546: LD_INT 24
37548: PUSH
37549: LD_INT 25
37551: PUSH
37552: LD_INT 26
37554: PUSH
37555: LD_INT 27
37557: PUSH
37558: LD_INT 28
37560: PUSH
37561: LD_INT 30
37563: PUSH
37564: LD_INT 31
37566: PUSH
37567: LD_INT 32
37569: PUSH
37570: LD_INT 33
37572: PUSH
37573: LD_INT 34
37575: PUSH
37576: LD_INT 36
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 101
37614: PUSH
37615: LD_INT 102
37617: PUSH
37618: LD_INT 103
37620: PUSH
37621: LD_INT 104
37623: PUSH
37624: LD_INT 105
37626: PUSH
37627: LD_INT 106
37629: PUSH
37630: LD_INT 107
37632: PUSH
37633: LD_INT 108
37635: PUSH
37636: LD_INT 109
37638: PUSH
37639: LD_INT 110
37641: PUSH
37642: LD_INT 111
37644: PUSH
37645: LD_INT 112
37647: PUSH
37648: LD_INT 113
37650: PUSH
37651: LD_INT 114
37653: PUSH
37654: LD_INT 116
37656: PUSH
37657: LD_INT 117
37659: PUSH
37660: LD_INT 118
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: ST_TO_ADDR
37686: GO 38925
37688: LD_INT 14
37690: DOUBLE
37691: EQUAL
37692: IFTRUE 37696
37694: GO 37920
37696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
37697: LD_ADDR_VAR 0 2
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: LD_INT 2
37707: PUSH
37708: LD_INT 3
37710: PUSH
37711: LD_INT 4
37713: PUSH
37714: LD_INT 5
37716: PUSH
37717: LD_INT 6
37719: PUSH
37720: LD_INT 7
37722: PUSH
37723: LD_INT 8
37725: PUSH
37726: LD_INT 9
37728: PUSH
37729: LD_INT 10
37731: PUSH
37732: LD_INT 11
37734: PUSH
37735: LD_INT 12
37737: PUSH
37738: LD_INT 13
37740: PUSH
37741: LD_INT 14
37743: PUSH
37744: LD_INT 15
37746: PUSH
37747: LD_INT 16
37749: PUSH
37750: LD_INT 17
37752: PUSH
37753: LD_INT 18
37755: PUSH
37756: LD_INT 19
37758: PUSH
37759: LD_INT 20
37761: PUSH
37762: LD_INT 21
37764: PUSH
37765: LD_INT 22
37767: PUSH
37768: LD_INT 23
37770: PUSH
37771: LD_INT 24
37773: PUSH
37774: LD_INT 25
37776: PUSH
37777: LD_INT 26
37779: PUSH
37780: LD_INT 27
37782: PUSH
37783: LD_INT 28
37785: PUSH
37786: LD_INT 29
37788: PUSH
37789: LD_INT 30
37791: PUSH
37792: LD_INT 31
37794: PUSH
37795: LD_INT 32
37797: PUSH
37798: LD_INT 33
37800: PUSH
37801: LD_INT 34
37803: PUSH
37804: LD_INT 36
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 101
37846: PUSH
37847: LD_INT 102
37849: PUSH
37850: LD_INT 103
37852: PUSH
37853: LD_INT 104
37855: PUSH
37856: LD_INT 105
37858: PUSH
37859: LD_INT 106
37861: PUSH
37862: LD_INT 107
37864: PUSH
37865: LD_INT 108
37867: PUSH
37868: LD_INT 109
37870: PUSH
37871: LD_INT 110
37873: PUSH
37874: LD_INT 111
37876: PUSH
37877: LD_INT 112
37879: PUSH
37880: LD_INT 113
37882: PUSH
37883: LD_INT 114
37885: PUSH
37886: LD_INT 116
37888: PUSH
37889: LD_INT 117
37891: PUSH
37892: LD_INT 118
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: ST_TO_ADDR
37918: GO 38925
37920: LD_INT 15
37922: DOUBLE
37923: EQUAL
37924: IFTRUE 37928
37926: GO 38152
37928: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
37929: LD_ADDR_VAR 0 2
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: LD_INT 2
37939: PUSH
37940: LD_INT 3
37942: PUSH
37943: LD_INT 4
37945: PUSH
37946: LD_INT 5
37948: PUSH
37949: LD_INT 6
37951: PUSH
37952: LD_INT 7
37954: PUSH
37955: LD_INT 8
37957: PUSH
37958: LD_INT 9
37960: PUSH
37961: LD_INT 10
37963: PUSH
37964: LD_INT 11
37966: PUSH
37967: LD_INT 12
37969: PUSH
37970: LD_INT 13
37972: PUSH
37973: LD_INT 14
37975: PUSH
37976: LD_INT 15
37978: PUSH
37979: LD_INT 16
37981: PUSH
37982: LD_INT 17
37984: PUSH
37985: LD_INT 18
37987: PUSH
37988: LD_INT 19
37990: PUSH
37991: LD_INT 20
37993: PUSH
37994: LD_INT 21
37996: PUSH
37997: LD_INT 22
37999: PUSH
38000: LD_INT 23
38002: PUSH
38003: LD_INT 24
38005: PUSH
38006: LD_INT 25
38008: PUSH
38009: LD_INT 26
38011: PUSH
38012: LD_INT 27
38014: PUSH
38015: LD_INT 28
38017: PUSH
38018: LD_INT 29
38020: PUSH
38021: LD_INT 30
38023: PUSH
38024: LD_INT 31
38026: PUSH
38027: LD_INT 32
38029: PUSH
38030: LD_INT 33
38032: PUSH
38033: LD_INT 34
38035: PUSH
38036: LD_INT 36
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 101
38078: PUSH
38079: LD_INT 102
38081: PUSH
38082: LD_INT 103
38084: PUSH
38085: LD_INT 104
38087: PUSH
38088: LD_INT 105
38090: PUSH
38091: LD_INT 106
38093: PUSH
38094: LD_INT 107
38096: PUSH
38097: LD_INT 108
38099: PUSH
38100: LD_INT 109
38102: PUSH
38103: LD_INT 110
38105: PUSH
38106: LD_INT 111
38108: PUSH
38109: LD_INT 112
38111: PUSH
38112: LD_INT 113
38114: PUSH
38115: LD_INT 114
38117: PUSH
38118: LD_INT 116
38120: PUSH
38121: LD_INT 117
38123: PUSH
38124: LD_INT 118
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: ST_TO_ADDR
38150: GO 38925
38152: LD_INT 16
38154: DOUBLE
38155: EQUAL
38156: IFTRUE 38160
38158: GO 38296
38160: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
38161: LD_ADDR_VAR 0 2
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: LD_INT 4
38171: PUSH
38172: LD_INT 5
38174: PUSH
38175: LD_INT 7
38177: PUSH
38178: LD_INT 11
38180: PUSH
38181: LD_INT 12
38183: PUSH
38184: LD_INT 15
38186: PUSH
38187: LD_INT 16
38189: PUSH
38190: LD_INT 20
38192: PUSH
38193: LD_INT 21
38195: PUSH
38196: LD_INT 22
38198: PUSH
38199: LD_INT 23
38201: PUSH
38202: LD_INT 25
38204: PUSH
38205: LD_INT 26
38207: PUSH
38208: LD_INT 30
38210: PUSH
38211: LD_INT 31
38213: PUSH
38214: LD_INT 32
38216: PUSH
38217: LD_INT 33
38219: PUSH
38220: LD_INT 34
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 101
38246: PUSH
38247: LD_INT 102
38249: PUSH
38250: LD_INT 103
38252: PUSH
38253: LD_INT 106
38255: PUSH
38256: LD_INT 108
38258: PUSH
38259: LD_INT 112
38261: PUSH
38262: LD_INT 113
38264: PUSH
38265: LD_INT 114
38267: PUSH
38268: LD_INT 116
38270: PUSH
38271: LD_INT 117
38273: PUSH
38274: LD_INT 118
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: ST_TO_ADDR
38294: GO 38925
38296: LD_INT 17
38298: DOUBLE
38299: EQUAL
38300: IFTRUE 38304
38302: GO 38528
38304: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
38305: LD_ADDR_VAR 0 2
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: LD_INT 2
38315: PUSH
38316: LD_INT 3
38318: PUSH
38319: LD_INT 4
38321: PUSH
38322: LD_INT 5
38324: PUSH
38325: LD_INT 6
38327: PUSH
38328: LD_INT 7
38330: PUSH
38331: LD_INT 8
38333: PUSH
38334: LD_INT 9
38336: PUSH
38337: LD_INT 10
38339: PUSH
38340: LD_INT 11
38342: PUSH
38343: LD_INT 12
38345: PUSH
38346: LD_INT 13
38348: PUSH
38349: LD_INT 14
38351: PUSH
38352: LD_INT 15
38354: PUSH
38355: LD_INT 16
38357: PUSH
38358: LD_INT 17
38360: PUSH
38361: LD_INT 18
38363: PUSH
38364: LD_INT 19
38366: PUSH
38367: LD_INT 20
38369: PUSH
38370: LD_INT 21
38372: PUSH
38373: LD_INT 22
38375: PUSH
38376: LD_INT 23
38378: PUSH
38379: LD_INT 24
38381: PUSH
38382: LD_INT 25
38384: PUSH
38385: LD_INT 26
38387: PUSH
38388: LD_INT 27
38390: PUSH
38391: LD_INT 28
38393: PUSH
38394: LD_INT 29
38396: PUSH
38397: LD_INT 30
38399: PUSH
38400: LD_INT 31
38402: PUSH
38403: LD_INT 32
38405: PUSH
38406: LD_INT 33
38408: PUSH
38409: LD_INT 34
38411: PUSH
38412: LD_INT 36
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 101
38454: PUSH
38455: LD_INT 102
38457: PUSH
38458: LD_INT 103
38460: PUSH
38461: LD_INT 104
38463: PUSH
38464: LD_INT 105
38466: PUSH
38467: LD_INT 106
38469: PUSH
38470: LD_INT 107
38472: PUSH
38473: LD_INT 108
38475: PUSH
38476: LD_INT 109
38478: PUSH
38479: LD_INT 110
38481: PUSH
38482: LD_INT 111
38484: PUSH
38485: LD_INT 112
38487: PUSH
38488: LD_INT 113
38490: PUSH
38491: LD_INT 114
38493: PUSH
38494: LD_INT 116
38496: PUSH
38497: LD_INT 117
38499: PUSH
38500: LD_INT 118
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: ST_TO_ADDR
38526: GO 38925
38528: LD_INT 18
38530: DOUBLE
38531: EQUAL
38532: IFTRUE 38536
38534: GO 38684
38536: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
38537: LD_ADDR_VAR 0 2
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: LD_INT 4
38547: PUSH
38548: LD_INT 5
38550: PUSH
38551: LD_INT 7
38553: PUSH
38554: LD_INT 11
38556: PUSH
38557: LD_INT 12
38559: PUSH
38560: LD_INT 15
38562: PUSH
38563: LD_INT 16
38565: PUSH
38566: LD_INT 20
38568: PUSH
38569: LD_INT 21
38571: PUSH
38572: LD_INT 22
38574: PUSH
38575: LD_INT 23
38577: PUSH
38578: LD_INT 25
38580: PUSH
38581: LD_INT 26
38583: PUSH
38584: LD_INT 30
38586: PUSH
38587: LD_INT 31
38589: PUSH
38590: LD_INT 32
38592: PUSH
38593: LD_INT 33
38595: PUSH
38596: LD_INT 34
38598: PUSH
38599: LD_INT 35
38601: PUSH
38602: LD_INT 36
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 101
38630: PUSH
38631: LD_INT 102
38633: PUSH
38634: LD_INT 103
38636: PUSH
38637: LD_INT 106
38639: PUSH
38640: LD_INT 108
38642: PUSH
38643: LD_INT 112
38645: PUSH
38646: LD_INT 113
38648: PUSH
38649: LD_INT 114
38651: PUSH
38652: LD_INT 115
38654: PUSH
38655: LD_INT 116
38657: PUSH
38658: LD_INT 117
38660: PUSH
38661: LD_INT 118
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: ST_TO_ADDR
38682: GO 38925
38684: LD_INT 19
38686: DOUBLE
38687: EQUAL
38688: IFTRUE 38692
38690: GO 38924
38692: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
38693: LD_ADDR_VAR 0 2
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: LD_INT 2
38703: PUSH
38704: LD_INT 3
38706: PUSH
38707: LD_INT 4
38709: PUSH
38710: LD_INT 5
38712: PUSH
38713: LD_INT 6
38715: PUSH
38716: LD_INT 7
38718: PUSH
38719: LD_INT 8
38721: PUSH
38722: LD_INT 9
38724: PUSH
38725: LD_INT 10
38727: PUSH
38728: LD_INT 11
38730: PUSH
38731: LD_INT 12
38733: PUSH
38734: LD_INT 13
38736: PUSH
38737: LD_INT 14
38739: PUSH
38740: LD_INT 15
38742: PUSH
38743: LD_INT 16
38745: PUSH
38746: LD_INT 17
38748: PUSH
38749: LD_INT 18
38751: PUSH
38752: LD_INT 19
38754: PUSH
38755: LD_INT 20
38757: PUSH
38758: LD_INT 21
38760: PUSH
38761: LD_INT 22
38763: PUSH
38764: LD_INT 23
38766: PUSH
38767: LD_INT 24
38769: PUSH
38770: LD_INT 25
38772: PUSH
38773: LD_INT 26
38775: PUSH
38776: LD_INT 27
38778: PUSH
38779: LD_INT 28
38781: PUSH
38782: LD_INT 29
38784: PUSH
38785: LD_INT 30
38787: PUSH
38788: LD_INT 31
38790: PUSH
38791: LD_INT 32
38793: PUSH
38794: LD_INT 33
38796: PUSH
38797: LD_INT 34
38799: PUSH
38800: LD_INT 35
38802: PUSH
38803: LD_INT 36
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 101
38846: PUSH
38847: LD_INT 102
38849: PUSH
38850: LD_INT 103
38852: PUSH
38853: LD_INT 104
38855: PUSH
38856: LD_INT 105
38858: PUSH
38859: LD_INT 106
38861: PUSH
38862: LD_INT 107
38864: PUSH
38865: LD_INT 108
38867: PUSH
38868: LD_INT 109
38870: PUSH
38871: LD_INT 110
38873: PUSH
38874: LD_INT 111
38876: PUSH
38877: LD_INT 112
38879: PUSH
38880: LD_INT 113
38882: PUSH
38883: LD_INT 114
38885: PUSH
38886: LD_INT 115
38888: PUSH
38889: LD_INT 116
38891: PUSH
38892: LD_INT 117
38894: PUSH
38895: LD_INT 118
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: ST_TO_ADDR
38922: GO 38925
38924: POP
// end else
38925: GO 39156
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
38927: LD_ADDR_VAR 0 2
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: LD_INT 2
38937: PUSH
38938: LD_INT 3
38940: PUSH
38941: LD_INT 4
38943: PUSH
38944: LD_INT 5
38946: PUSH
38947: LD_INT 6
38949: PUSH
38950: LD_INT 7
38952: PUSH
38953: LD_INT 8
38955: PUSH
38956: LD_INT 9
38958: PUSH
38959: LD_INT 10
38961: PUSH
38962: LD_INT 11
38964: PUSH
38965: LD_INT 12
38967: PUSH
38968: LD_INT 13
38970: PUSH
38971: LD_INT 14
38973: PUSH
38974: LD_INT 15
38976: PUSH
38977: LD_INT 16
38979: PUSH
38980: LD_INT 17
38982: PUSH
38983: LD_INT 18
38985: PUSH
38986: LD_INT 19
38988: PUSH
38989: LD_INT 20
38991: PUSH
38992: LD_INT 21
38994: PUSH
38995: LD_INT 22
38997: PUSH
38998: LD_INT 23
39000: PUSH
39001: LD_INT 24
39003: PUSH
39004: LD_INT 25
39006: PUSH
39007: LD_INT 26
39009: PUSH
39010: LD_INT 27
39012: PUSH
39013: LD_INT 28
39015: PUSH
39016: LD_INT 29
39018: PUSH
39019: LD_INT 30
39021: PUSH
39022: LD_INT 31
39024: PUSH
39025: LD_INT 32
39027: PUSH
39028: LD_INT 33
39030: PUSH
39031: LD_INT 34
39033: PUSH
39034: LD_INT 35
39036: PUSH
39037: LD_INT 36
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 101
39080: PUSH
39081: LD_INT 102
39083: PUSH
39084: LD_INT 103
39086: PUSH
39087: LD_INT 104
39089: PUSH
39090: LD_INT 105
39092: PUSH
39093: LD_INT 106
39095: PUSH
39096: LD_INT 107
39098: PUSH
39099: LD_INT 108
39101: PUSH
39102: LD_INT 109
39104: PUSH
39105: LD_INT 110
39107: PUSH
39108: LD_INT 111
39110: PUSH
39111: LD_INT 112
39113: PUSH
39114: LD_INT 113
39116: PUSH
39117: LD_INT 114
39119: PUSH
39120: LD_INT 115
39122: PUSH
39123: LD_INT 116
39125: PUSH
39126: LD_INT 117
39128: PUSH
39129: LD_INT 118
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: ST_TO_ADDR
// if result then
39156: LD_VAR 0 2
39160: IFFALSE 39946
// begin normal :=  ;
39162: LD_ADDR_VAR 0 5
39166: PUSH
39167: LD_STRING 
39169: ST_TO_ADDR
// hardcore :=  ;
39170: LD_ADDR_VAR 0 6
39174: PUSH
39175: LD_STRING 
39177: ST_TO_ADDR
// active :=  ;
39178: LD_ADDR_VAR 0 7
39182: PUSH
39183: LD_STRING 
39185: ST_TO_ADDR
// for i = 1 to normalCounter do
39186: LD_ADDR_VAR 0 8
39190: PUSH
39191: DOUBLE
39192: LD_INT 1
39194: DEC
39195: ST_TO_ADDR
39196: LD_EXP 88
39200: PUSH
39201: FOR_TO
39202: IFFALSE 39303
// begin tmp := 0 ;
39204: LD_ADDR_VAR 0 3
39208: PUSH
39209: LD_STRING 0
39211: ST_TO_ADDR
// if result [ 1 ] then
39212: LD_VAR 0 2
39216: PUSH
39217: LD_INT 1
39219: ARRAY
39220: IFFALSE 39285
// if result [ 1 ] [ 1 ] = i then
39222: LD_VAR 0 2
39226: PUSH
39227: LD_INT 1
39229: ARRAY
39230: PUSH
39231: LD_INT 1
39233: ARRAY
39234: PUSH
39235: LD_VAR 0 8
39239: EQUAL
39240: IFFALSE 39285
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
39242: LD_ADDR_VAR 0 2
39246: PUSH
39247: LD_VAR 0 2
39251: PPUSH
39252: LD_INT 1
39254: PPUSH
39255: LD_VAR 0 2
39259: PUSH
39260: LD_INT 1
39262: ARRAY
39263: PPUSH
39264: LD_INT 1
39266: PPUSH
39267: CALL_OW 3
39271: PPUSH
39272: CALL_OW 1
39276: ST_TO_ADDR
// tmp := 1 ;
39277: LD_ADDR_VAR 0 3
39281: PUSH
39282: LD_STRING 1
39284: ST_TO_ADDR
// end ; normal := normal & tmp ;
39285: LD_ADDR_VAR 0 5
39289: PUSH
39290: LD_VAR 0 5
39294: PUSH
39295: LD_VAR 0 3
39299: STR
39300: ST_TO_ADDR
// end ;
39301: GO 39201
39303: POP
39304: POP
// for i = 1 to hardcoreCounter do
39305: LD_ADDR_VAR 0 8
39309: PUSH
39310: DOUBLE
39311: LD_INT 1
39313: DEC
39314: ST_TO_ADDR
39315: LD_EXP 89
39319: PUSH
39320: FOR_TO
39321: IFFALSE 39426
// begin tmp := 0 ;
39323: LD_ADDR_VAR 0 3
39327: PUSH
39328: LD_STRING 0
39330: ST_TO_ADDR
// if result [ 2 ] then
39331: LD_VAR 0 2
39335: PUSH
39336: LD_INT 2
39338: ARRAY
39339: IFFALSE 39408
// if result [ 2 ] [ 1 ] = 100 + i then
39341: LD_VAR 0 2
39345: PUSH
39346: LD_INT 2
39348: ARRAY
39349: PUSH
39350: LD_INT 1
39352: ARRAY
39353: PUSH
39354: LD_INT 100
39356: PUSH
39357: LD_VAR 0 8
39361: PLUS
39362: EQUAL
39363: IFFALSE 39408
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
39365: LD_ADDR_VAR 0 2
39369: PUSH
39370: LD_VAR 0 2
39374: PPUSH
39375: LD_INT 2
39377: PPUSH
39378: LD_VAR 0 2
39382: PUSH
39383: LD_INT 2
39385: ARRAY
39386: PPUSH
39387: LD_INT 1
39389: PPUSH
39390: CALL_OW 3
39394: PPUSH
39395: CALL_OW 1
39399: ST_TO_ADDR
// tmp := 1 ;
39400: LD_ADDR_VAR 0 3
39404: PUSH
39405: LD_STRING 1
39407: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
39408: LD_ADDR_VAR 0 6
39412: PUSH
39413: LD_VAR 0 6
39417: PUSH
39418: LD_VAR 0 3
39422: STR
39423: ST_TO_ADDR
// end ;
39424: GO 39320
39426: POP
39427: POP
// if isGameLoad then
39428: LD_VAR 0 1
39432: IFFALSE 39907
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
39434: LD_ADDR_VAR 0 4
39438: PUSH
39439: LD_EXP 92
39443: PUSH
39444: LD_EXP 91
39448: PUSH
39449: LD_EXP 93
39453: PUSH
39454: LD_EXP 90
39458: PUSH
39459: LD_EXP 94
39463: PUSH
39464: LD_EXP 95
39468: PUSH
39469: LD_EXP 96
39473: PUSH
39474: LD_EXP 97
39478: PUSH
39479: LD_EXP 98
39483: PUSH
39484: LD_EXP 99
39488: PUSH
39489: LD_EXP 100
39493: PUSH
39494: LD_EXP 101
39498: PUSH
39499: LD_EXP 102
39503: PUSH
39504: LD_EXP 103
39508: PUSH
39509: LD_EXP 111
39513: PUSH
39514: LD_EXP 112
39518: PUSH
39519: LD_EXP 113
39523: PUSH
39524: LD_EXP 114
39528: PUSH
39529: LD_EXP 116
39533: PUSH
39534: LD_EXP 117
39538: PUSH
39539: LD_EXP 118
39543: PUSH
39544: LD_EXP 121
39548: PUSH
39549: LD_EXP 123
39553: PUSH
39554: LD_EXP 124
39558: PUSH
39559: LD_EXP 125
39563: PUSH
39564: LD_EXP 127
39568: PUSH
39569: LD_EXP 128
39573: PUSH
39574: LD_EXP 131
39578: PUSH
39579: LD_EXP 132
39583: PUSH
39584: LD_EXP 133
39588: PUSH
39589: LD_EXP 134
39593: PUSH
39594: LD_EXP 135
39598: PUSH
39599: LD_EXP 136
39603: PUSH
39604: LD_EXP 137
39608: PUSH
39609: LD_EXP 138
39613: PUSH
39614: LD_EXP 139
39618: PUSH
39619: LD_EXP 104
39623: PUSH
39624: LD_EXP 105
39628: PUSH
39629: LD_EXP 108
39633: PUSH
39634: LD_EXP 109
39638: PUSH
39639: LD_EXP 110
39643: PUSH
39644: LD_EXP 106
39648: PUSH
39649: LD_EXP 107
39653: PUSH
39654: LD_EXP 115
39658: PUSH
39659: LD_EXP 119
39663: PUSH
39664: LD_EXP 120
39668: PUSH
39669: LD_EXP 122
39673: PUSH
39674: LD_EXP 126
39678: PUSH
39679: LD_EXP 129
39683: PUSH
39684: LD_EXP 130
39688: PUSH
39689: LD_EXP 140
39693: PUSH
39694: LD_EXP 141
39698: PUSH
39699: LD_EXP 142
39703: PUSH
39704: LD_EXP 143
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: ST_TO_ADDR
// tmp :=  ;
39765: LD_ADDR_VAR 0 3
39769: PUSH
39770: LD_STRING 
39772: ST_TO_ADDR
// for i = 1 to normalCounter do
39773: LD_ADDR_VAR 0 8
39777: PUSH
39778: DOUBLE
39779: LD_INT 1
39781: DEC
39782: ST_TO_ADDR
39783: LD_EXP 88
39787: PUSH
39788: FOR_TO
39789: IFFALSE 39825
// begin if flags [ i ] then
39791: LD_VAR 0 4
39795: PUSH
39796: LD_VAR 0 8
39800: ARRAY
39801: IFFALSE 39823
// tmp := tmp & i & ; ;
39803: LD_ADDR_VAR 0 3
39807: PUSH
39808: LD_VAR 0 3
39812: PUSH
39813: LD_VAR 0 8
39817: STR
39818: PUSH
39819: LD_STRING ;
39821: STR
39822: ST_TO_ADDR
// end ;
39823: GO 39788
39825: POP
39826: POP
// for i = 1 to hardcoreCounter do
39827: LD_ADDR_VAR 0 8
39831: PUSH
39832: DOUBLE
39833: LD_INT 1
39835: DEC
39836: ST_TO_ADDR
39837: LD_EXP 89
39841: PUSH
39842: FOR_TO
39843: IFFALSE 39889
// begin if flags [ normalCounter + i ] then
39845: LD_VAR 0 4
39849: PUSH
39850: LD_EXP 88
39854: PUSH
39855: LD_VAR 0 8
39859: PLUS
39860: ARRAY
39861: IFFALSE 39887
// tmp := tmp & ( 100 + i ) & ; ;
39863: LD_ADDR_VAR 0 3
39867: PUSH
39868: LD_VAR 0 3
39872: PUSH
39873: LD_INT 100
39875: PUSH
39876: LD_VAR 0 8
39880: PLUS
39881: STR
39882: PUSH
39883: LD_STRING ;
39885: STR
39886: ST_TO_ADDR
// end ;
39887: GO 39842
39889: POP
39890: POP
// if tmp then
39891: LD_VAR 0 3
39895: IFFALSE 39907
// active := tmp ;
39897: LD_ADDR_VAR 0 7
39901: PUSH
39902: LD_VAR 0 3
39906: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
39907: LD_STRING getStreamItemsFromMission("
39909: PUSH
39910: LD_VAR 0 5
39914: STR
39915: PUSH
39916: LD_STRING ","
39918: STR
39919: PUSH
39920: LD_VAR 0 6
39924: STR
39925: PUSH
39926: LD_STRING ","
39928: STR
39929: PUSH
39930: LD_VAR 0 7
39934: STR
39935: PUSH
39936: LD_STRING ")
39938: STR
39939: PPUSH
39940: CALL_OW 559
// end else
39944: GO 39953
// ToLua ( getStreamItemsFromMission("","","") ) ;
39946: LD_STRING getStreamItemsFromMission("","","")
39948: PPUSH
39949: CALL_OW 559
// end ;
39953: LD_VAR 0 2
39957: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
39958: LD_EXP 87
39962: PUSH
39963: LD_EXP 92
39967: AND
39968: IFFALSE 40092
39970: GO 39972
39972: DISABLE
39973: LD_INT 0
39975: PPUSH
39976: PPUSH
// begin enable ;
39977: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
39978: LD_ADDR_VAR 0 2
39982: PUSH
39983: LD_INT 22
39985: PUSH
39986: LD_OWVAR 2
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: LD_INT 34
40000: PUSH
40001: LD_INT 7
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 34
40010: PUSH
40011: LD_INT 45
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 34
40020: PUSH
40021: LD_INT 28
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 34
40030: PUSH
40031: LD_INT 47
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PPUSH
40049: CALL_OW 69
40053: ST_TO_ADDR
// if not tmp then
40054: LD_VAR 0 2
40058: NOT
40059: IFFALSE 40063
// exit ;
40061: GO 40092
// for i in tmp do
40063: LD_ADDR_VAR 0 1
40067: PUSH
40068: LD_VAR 0 2
40072: PUSH
40073: FOR_IN
40074: IFFALSE 40090
// begin SetLives ( i , 0 ) ;
40076: LD_VAR 0 1
40080: PPUSH
40081: LD_INT 0
40083: PPUSH
40084: CALL_OW 234
// end ;
40088: GO 40073
40090: POP
40091: POP
// end ;
40092: PPOPN 2
40094: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
40095: LD_EXP 87
40099: PUSH
40100: LD_EXP 93
40104: AND
40105: IFFALSE 40189
40107: GO 40109
40109: DISABLE
40110: LD_INT 0
40112: PPUSH
40113: PPUSH
// begin enable ;
40114: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
40115: LD_ADDR_VAR 0 2
40119: PUSH
40120: LD_INT 22
40122: PUSH
40123: LD_OWVAR 2
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 32
40134: PUSH
40135: LD_INT 3
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PPUSH
40146: CALL_OW 69
40150: ST_TO_ADDR
// if not tmp then
40151: LD_VAR 0 2
40155: NOT
40156: IFFALSE 40160
// exit ;
40158: GO 40189
// for i in tmp do
40160: LD_ADDR_VAR 0 1
40164: PUSH
40165: LD_VAR 0 2
40169: PUSH
40170: FOR_IN
40171: IFFALSE 40187
// begin SetLives ( i , 0 ) ;
40173: LD_VAR 0 1
40177: PPUSH
40178: LD_INT 0
40180: PPUSH
40181: CALL_OW 234
// end ;
40185: GO 40170
40187: POP
40188: POP
// end ;
40189: PPOPN 2
40191: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
40192: LD_EXP 87
40196: PUSH
40197: LD_EXP 90
40201: AND
40202: IFFALSE 40295
40204: GO 40206
40206: DISABLE
40207: LD_INT 0
40209: PPUSH
// begin enable ;
40210: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
40211: LD_ADDR_VAR 0 1
40215: PUSH
40216: LD_INT 22
40218: PUSH
40219: LD_OWVAR 2
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: LD_INT 25
40233: PUSH
40234: LD_INT 5
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 25
40243: PUSH
40244: LD_INT 9
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 25
40253: PUSH
40254: LD_INT 8
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PPUSH
40271: CALL_OW 69
40275: PUSH
40276: FOR_IN
40277: IFFALSE 40293
// begin SetClass ( i , 1 ) ;
40279: LD_VAR 0 1
40283: PPUSH
40284: LD_INT 1
40286: PPUSH
40287: CALL_OW 336
// end ;
40291: GO 40276
40293: POP
40294: POP
// end ;
40295: PPOPN 1
40297: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
40298: LD_EXP 87
40302: PUSH
40303: LD_EXP 91
40307: AND
40308: PUSH
40309: LD_OWVAR 65
40313: PUSH
40314: LD_INT 7
40316: LESS
40317: AND
40318: IFFALSE 40332
40320: GO 40322
40322: DISABLE
// begin enable ;
40323: ENABLE
// game_speed := 7 ;
40324: LD_ADDR_OWVAR 65
40328: PUSH
40329: LD_INT 7
40331: ST_TO_ADDR
// end ;
40332: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
40333: LD_EXP 87
40337: PUSH
40338: LD_EXP 94
40342: AND
40343: IFFALSE 40545
40345: GO 40347
40347: DISABLE
40348: LD_INT 0
40350: PPUSH
40351: PPUSH
40352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40353: LD_ADDR_VAR 0 3
40357: PUSH
40358: LD_INT 81
40360: PUSH
40361: LD_OWVAR 2
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 21
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PPUSH
40384: CALL_OW 69
40388: ST_TO_ADDR
// if not tmp then
40389: LD_VAR 0 3
40393: NOT
40394: IFFALSE 40398
// exit ;
40396: GO 40545
// if tmp > 5 then
40398: LD_VAR 0 3
40402: PUSH
40403: LD_INT 5
40405: GREATER
40406: IFFALSE 40418
// k := 5 else
40408: LD_ADDR_VAR 0 2
40412: PUSH
40413: LD_INT 5
40415: ST_TO_ADDR
40416: GO 40428
// k := tmp ;
40418: LD_ADDR_VAR 0 2
40422: PUSH
40423: LD_VAR 0 3
40427: ST_TO_ADDR
// for i := 1 to k do
40428: LD_ADDR_VAR 0 1
40432: PUSH
40433: DOUBLE
40434: LD_INT 1
40436: DEC
40437: ST_TO_ADDR
40438: LD_VAR 0 2
40442: PUSH
40443: FOR_TO
40444: IFFALSE 40543
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
40446: LD_VAR 0 3
40450: PUSH
40451: LD_VAR 0 1
40455: ARRAY
40456: PPUSH
40457: LD_VAR 0 1
40461: PUSH
40462: LD_INT 4
40464: MOD
40465: PUSH
40466: LD_INT 1
40468: PLUS
40469: PPUSH
40470: CALL_OW 259
40474: PUSH
40475: LD_INT 10
40477: LESS
40478: IFFALSE 40541
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
40480: LD_VAR 0 3
40484: PUSH
40485: LD_VAR 0 1
40489: ARRAY
40490: PPUSH
40491: LD_VAR 0 1
40495: PUSH
40496: LD_INT 4
40498: MOD
40499: PUSH
40500: LD_INT 1
40502: PLUS
40503: PPUSH
40504: LD_VAR 0 3
40508: PUSH
40509: LD_VAR 0 1
40513: ARRAY
40514: PPUSH
40515: LD_VAR 0 1
40519: PUSH
40520: LD_INT 4
40522: MOD
40523: PUSH
40524: LD_INT 1
40526: PLUS
40527: PPUSH
40528: CALL_OW 259
40532: PUSH
40533: LD_INT 1
40535: PLUS
40536: PPUSH
40537: CALL_OW 237
40541: GO 40443
40543: POP
40544: POP
// end ;
40545: PPOPN 3
40547: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
40548: LD_EXP 87
40552: PUSH
40553: LD_EXP 95
40557: AND
40558: IFFALSE 40578
40560: GO 40562
40562: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
40563: LD_INT 4
40565: PPUSH
40566: LD_OWVAR 2
40570: PPUSH
40571: LD_INT 0
40573: PPUSH
40574: CALL_OW 324
40578: END
// every 0 0$1 trigger StreamModeActive and sShovel do
40579: LD_EXP 87
40583: PUSH
40584: LD_EXP 124
40588: AND
40589: IFFALSE 40609
40591: GO 40593
40593: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
40594: LD_INT 19
40596: PPUSH
40597: LD_OWVAR 2
40601: PPUSH
40602: LD_INT 0
40604: PPUSH
40605: CALL_OW 324
40609: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
40610: LD_EXP 87
40614: PUSH
40615: LD_EXP 96
40619: AND
40620: IFFALSE 40722
40622: GO 40624
40624: DISABLE
40625: LD_INT 0
40627: PPUSH
40628: PPUSH
// begin enable ;
40629: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
40630: LD_ADDR_VAR 0 2
40634: PUSH
40635: LD_INT 22
40637: PUSH
40638: LD_OWVAR 2
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: LD_INT 34
40652: PUSH
40653: LD_INT 11
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 34
40662: PUSH
40663: LD_INT 30
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: LIST
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PPUSH
40679: CALL_OW 69
40683: ST_TO_ADDR
// if not tmp then
40684: LD_VAR 0 2
40688: NOT
40689: IFFALSE 40693
// exit ;
40691: GO 40722
// for i in tmp do
40693: LD_ADDR_VAR 0 1
40697: PUSH
40698: LD_VAR 0 2
40702: PUSH
40703: FOR_IN
40704: IFFALSE 40720
// begin SetLives ( i , 0 ) ;
40706: LD_VAR 0 1
40710: PPUSH
40711: LD_INT 0
40713: PPUSH
40714: CALL_OW 234
// end ;
40718: GO 40703
40720: POP
40721: POP
// end ;
40722: PPOPN 2
40724: END
// every 0 0$1 trigger StreamModeActive and sBunker do
40725: LD_EXP 87
40729: PUSH
40730: LD_EXP 97
40734: AND
40735: IFFALSE 40755
40737: GO 40739
40739: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
40740: LD_INT 32
40742: PPUSH
40743: LD_OWVAR 2
40747: PPUSH
40748: LD_INT 0
40750: PPUSH
40751: CALL_OW 324
40755: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
40756: LD_EXP 87
40760: PUSH
40761: LD_EXP 98
40765: AND
40766: IFFALSE 40947
40768: GO 40770
40770: DISABLE
40771: LD_INT 0
40773: PPUSH
40774: PPUSH
40775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
40776: LD_ADDR_VAR 0 2
40780: PUSH
40781: LD_INT 22
40783: PUSH
40784: LD_OWVAR 2
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 33
40795: PUSH
40796: LD_INT 3
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PPUSH
40807: CALL_OW 69
40811: ST_TO_ADDR
// if not tmp then
40812: LD_VAR 0 2
40816: NOT
40817: IFFALSE 40821
// exit ;
40819: GO 40947
// side := 0 ;
40821: LD_ADDR_VAR 0 3
40825: PUSH
40826: LD_INT 0
40828: ST_TO_ADDR
// for i := 1 to 8 do
40829: LD_ADDR_VAR 0 1
40833: PUSH
40834: DOUBLE
40835: LD_INT 1
40837: DEC
40838: ST_TO_ADDR
40839: LD_INT 8
40841: PUSH
40842: FOR_TO
40843: IFFALSE 40891
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
40845: LD_OWVAR 2
40849: PUSH
40850: LD_VAR 0 1
40854: NONEQUAL
40855: PUSH
40856: LD_OWVAR 2
40860: PPUSH
40861: LD_VAR 0 1
40865: PPUSH
40866: CALL_OW 81
40870: PUSH
40871: LD_INT 2
40873: EQUAL
40874: AND
40875: IFFALSE 40889
// begin side := i ;
40877: LD_ADDR_VAR 0 3
40881: PUSH
40882: LD_VAR 0 1
40886: ST_TO_ADDR
// break ;
40887: GO 40891
// end ;
40889: GO 40842
40891: POP
40892: POP
// if not side then
40893: LD_VAR 0 3
40897: NOT
40898: IFFALSE 40902
// exit ;
40900: GO 40947
// for i := 1 to tmp do
40902: LD_ADDR_VAR 0 1
40906: PUSH
40907: DOUBLE
40908: LD_INT 1
40910: DEC
40911: ST_TO_ADDR
40912: LD_VAR 0 2
40916: PUSH
40917: FOR_TO
40918: IFFALSE 40945
// if Prob ( 60 ) then
40920: LD_INT 60
40922: PPUSH
40923: CALL_OW 13
40927: IFFALSE 40943
// SetSide ( i , side ) ;
40929: LD_VAR 0 1
40933: PPUSH
40934: LD_VAR 0 3
40938: PPUSH
40939: CALL_OW 235
40943: GO 40917
40945: POP
40946: POP
// end ;
40947: PPOPN 3
40949: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
40950: LD_EXP 87
40954: PUSH
40955: LD_EXP 100
40959: AND
40960: IFFALSE 41079
40962: GO 40964
40964: DISABLE
40965: LD_INT 0
40967: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
40968: LD_ADDR_VAR 0 1
40972: PUSH
40973: LD_INT 22
40975: PUSH
40976: LD_OWVAR 2
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 21
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 3
40997: PUSH
40998: LD_INT 23
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: LIST
41016: PPUSH
41017: CALL_OW 69
41021: PUSH
41022: FOR_IN
41023: IFFALSE 41077
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
41025: LD_VAR 0 1
41029: PPUSH
41030: CALL_OW 257
41034: PUSH
41035: LD_INT 1
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: LD_INT 3
41043: PUSH
41044: LD_INT 4
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: IN
41053: IFFALSE 41075
// SetClass ( un , rand ( 1 , 4 ) ) ;
41055: LD_VAR 0 1
41059: PPUSH
41060: LD_INT 1
41062: PPUSH
41063: LD_INT 4
41065: PPUSH
41066: CALL_OW 12
41070: PPUSH
41071: CALL_OW 336
41075: GO 41022
41077: POP
41078: POP
// end ;
41079: PPOPN 1
41081: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
41082: LD_EXP 87
41086: PUSH
41087: LD_EXP 99
41091: AND
41092: IFFALSE 41171
41094: GO 41096
41096: DISABLE
41097: LD_INT 0
41099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41100: LD_ADDR_VAR 0 1
41104: PUSH
41105: LD_INT 22
41107: PUSH
41108: LD_OWVAR 2
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 21
41119: PUSH
41120: LD_INT 3
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PPUSH
41131: CALL_OW 69
41135: ST_TO_ADDR
// if not tmp then
41136: LD_VAR 0 1
41140: NOT
41141: IFFALSE 41145
// exit ;
41143: GO 41171
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
41145: LD_VAR 0 1
41149: PUSH
41150: LD_INT 1
41152: PPUSH
41153: LD_VAR 0 1
41157: PPUSH
41158: CALL_OW 12
41162: ARRAY
41163: PPUSH
41164: LD_INT 100
41166: PPUSH
41167: CALL_OW 234
// end ;
41171: PPOPN 1
41173: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
41174: LD_EXP 87
41178: PUSH
41179: LD_EXP 101
41183: AND
41184: IFFALSE 41282
41186: GO 41188
41188: DISABLE
41189: LD_INT 0
41191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
41192: LD_ADDR_VAR 0 1
41196: PUSH
41197: LD_INT 22
41199: PUSH
41200: LD_OWVAR 2
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 21
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PPUSH
41223: CALL_OW 69
41227: ST_TO_ADDR
// if not tmp then
41228: LD_VAR 0 1
41232: NOT
41233: IFFALSE 41237
// exit ;
41235: GO 41282
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
41237: LD_VAR 0 1
41241: PUSH
41242: LD_INT 1
41244: PPUSH
41245: LD_VAR 0 1
41249: PPUSH
41250: CALL_OW 12
41254: ARRAY
41255: PPUSH
41256: LD_INT 1
41258: PPUSH
41259: LD_INT 4
41261: PPUSH
41262: CALL_OW 12
41266: PPUSH
41267: LD_INT 3000
41269: PPUSH
41270: LD_INT 9000
41272: PPUSH
41273: CALL_OW 12
41277: PPUSH
41278: CALL_OW 492
// end ;
41282: PPOPN 1
41284: END
// every 0 0$1 trigger StreamModeActive and sDepot do
41285: LD_EXP 87
41289: PUSH
41290: LD_EXP 102
41294: AND
41295: IFFALSE 41315
41297: GO 41299
41299: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
41300: LD_INT 1
41302: PPUSH
41303: LD_OWVAR 2
41307: PPUSH
41308: LD_INT 0
41310: PPUSH
41311: CALL_OW 324
41315: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
41316: LD_EXP 87
41320: PUSH
41321: LD_EXP 103
41325: AND
41326: IFFALSE 41409
41328: GO 41330
41330: DISABLE
41331: LD_INT 0
41333: PPUSH
41334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41335: LD_ADDR_VAR 0 2
41339: PUSH
41340: LD_INT 22
41342: PUSH
41343: LD_OWVAR 2
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 21
41354: PUSH
41355: LD_INT 3
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PPUSH
41366: CALL_OW 69
41370: ST_TO_ADDR
// if not tmp then
41371: LD_VAR 0 2
41375: NOT
41376: IFFALSE 41380
// exit ;
41378: GO 41409
// for i in tmp do
41380: LD_ADDR_VAR 0 1
41384: PUSH
41385: LD_VAR 0 2
41389: PUSH
41390: FOR_IN
41391: IFFALSE 41407
// SetBLevel ( i , 10 ) ;
41393: LD_VAR 0 1
41397: PPUSH
41398: LD_INT 10
41400: PPUSH
41401: CALL_OW 241
41405: GO 41390
41407: POP
41408: POP
// end ;
41409: PPOPN 2
41411: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
41412: LD_EXP 87
41416: PUSH
41417: LD_EXP 104
41421: AND
41422: IFFALSE 41533
41424: GO 41426
41426: DISABLE
41427: LD_INT 0
41429: PPUSH
41430: PPUSH
41431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41432: LD_ADDR_VAR 0 3
41436: PUSH
41437: LD_INT 22
41439: PUSH
41440: LD_OWVAR 2
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 25
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PPUSH
41463: CALL_OW 69
41467: ST_TO_ADDR
// if not tmp then
41468: LD_VAR 0 3
41472: NOT
41473: IFFALSE 41477
// exit ;
41475: GO 41533
// un := tmp [ rand ( 1 , tmp ) ] ;
41477: LD_ADDR_VAR 0 2
41481: PUSH
41482: LD_VAR 0 3
41486: PUSH
41487: LD_INT 1
41489: PPUSH
41490: LD_VAR 0 3
41494: PPUSH
41495: CALL_OW 12
41499: ARRAY
41500: ST_TO_ADDR
// if Crawls ( un ) then
41501: LD_VAR 0 2
41505: PPUSH
41506: CALL_OW 318
41510: IFFALSE 41521
// ComWalk ( un ) ;
41512: LD_VAR 0 2
41516: PPUSH
41517: CALL_OW 138
// SetClass ( un , class_sniper ) ;
41521: LD_VAR 0 2
41525: PPUSH
41526: LD_INT 5
41528: PPUSH
41529: CALL_OW 336
// end ;
41533: PPOPN 3
41535: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
41536: LD_EXP 87
41540: PUSH
41541: LD_EXP 105
41545: AND
41546: PUSH
41547: LD_OWVAR 67
41551: PUSH
41552: LD_INT 4
41554: LESS
41555: AND
41556: IFFALSE 41575
41558: GO 41560
41560: DISABLE
// begin Difficulty := Difficulty + 1 ;
41561: LD_ADDR_OWVAR 67
41565: PUSH
41566: LD_OWVAR 67
41570: PUSH
41571: LD_INT 1
41573: PLUS
41574: ST_TO_ADDR
// end ;
41575: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
41576: LD_EXP 87
41580: PUSH
41581: LD_EXP 106
41585: AND
41586: IFFALSE 41689
41588: GO 41590
41590: DISABLE
41591: LD_INT 0
41593: PPUSH
// begin for i := 1 to 5 do
41594: LD_ADDR_VAR 0 1
41598: PUSH
41599: DOUBLE
41600: LD_INT 1
41602: DEC
41603: ST_TO_ADDR
41604: LD_INT 5
41606: PUSH
41607: FOR_TO
41608: IFFALSE 41687
// begin uc_nation := nation_nature ;
41610: LD_ADDR_OWVAR 21
41614: PUSH
41615: LD_INT 0
41617: ST_TO_ADDR
// uc_side := 0 ;
41618: LD_ADDR_OWVAR 20
41622: PUSH
41623: LD_INT 0
41625: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
41626: LD_ADDR_OWVAR 29
41630: PUSH
41631: LD_INT 12
41633: PUSH
41634: LD_INT 12
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: ST_TO_ADDR
// hc_agressivity := 20 ;
41641: LD_ADDR_OWVAR 35
41645: PUSH
41646: LD_INT 20
41648: ST_TO_ADDR
// hc_class := class_tiger ;
41649: LD_ADDR_OWVAR 28
41653: PUSH
41654: LD_INT 14
41656: ST_TO_ADDR
// hc_gallery :=  ;
41657: LD_ADDR_OWVAR 33
41661: PUSH
41662: LD_STRING 
41664: ST_TO_ADDR
// hc_name :=  ;
41665: LD_ADDR_OWVAR 26
41669: PUSH
41670: LD_STRING 
41672: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
41673: CALL_OW 44
41677: PPUSH
41678: LD_INT 0
41680: PPUSH
41681: CALL_OW 51
// end ;
41685: GO 41607
41687: POP
41688: POP
// end ;
41689: PPOPN 1
41691: END
// every 0 0$1 trigger StreamModeActive and sBomb do
41692: LD_EXP 87
41696: PUSH
41697: LD_EXP 107
41701: AND
41702: IFFALSE 41711
41704: GO 41706
41706: DISABLE
// StreamSibBomb ;
41707: CALL 41712 0 0
41711: END
// export function StreamSibBomb ; var i , x , y ; begin
41712: LD_INT 0
41714: PPUSH
41715: PPUSH
41716: PPUSH
41717: PPUSH
// result := false ;
41718: LD_ADDR_VAR 0 1
41722: PUSH
41723: LD_INT 0
41725: ST_TO_ADDR
// for i := 1 to 16 do
41726: LD_ADDR_VAR 0 2
41730: PUSH
41731: DOUBLE
41732: LD_INT 1
41734: DEC
41735: ST_TO_ADDR
41736: LD_INT 16
41738: PUSH
41739: FOR_TO
41740: IFFALSE 41939
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41742: LD_ADDR_VAR 0 3
41746: PUSH
41747: LD_INT 10
41749: PUSH
41750: LD_INT 20
41752: PUSH
41753: LD_INT 30
41755: PUSH
41756: LD_INT 40
41758: PUSH
41759: LD_INT 50
41761: PUSH
41762: LD_INT 60
41764: PUSH
41765: LD_INT 70
41767: PUSH
41768: LD_INT 80
41770: PUSH
41771: LD_INT 90
41773: PUSH
41774: LD_INT 100
41776: PUSH
41777: LD_INT 110
41779: PUSH
41780: LD_INT 120
41782: PUSH
41783: LD_INT 130
41785: PUSH
41786: LD_INT 140
41788: PUSH
41789: LD_INT 150
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: PPUSH
41812: LD_INT 15
41814: PPUSH
41815: CALL_OW 12
41819: ARRAY
41820: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41821: LD_ADDR_VAR 0 4
41825: PUSH
41826: LD_INT 10
41828: PUSH
41829: LD_INT 20
41831: PUSH
41832: LD_INT 30
41834: PUSH
41835: LD_INT 40
41837: PUSH
41838: LD_INT 50
41840: PUSH
41841: LD_INT 60
41843: PUSH
41844: LD_INT 70
41846: PUSH
41847: LD_INT 80
41849: PUSH
41850: LD_INT 90
41852: PUSH
41853: LD_INT 100
41855: PUSH
41856: LD_INT 110
41858: PUSH
41859: LD_INT 120
41861: PUSH
41862: LD_INT 130
41864: PUSH
41865: LD_INT 140
41867: PUSH
41868: LD_INT 150
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: PPUSH
41891: LD_INT 15
41893: PPUSH
41894: CALL_OW 12
41898: ARRAY
41899: ST_TO_ADDR
// if ValidHex ( x , y ) then
41900: LD_VAR 0 3
41904: PPUSH
41905: LD_VAR 0 4
41909: PPUSH
41910: CALL_OW 488
41914: IFFALSE 41937
// begin result := [ x , y ] ;
41916: LD_ADDR_VAR 0 1
41920: PUSH
41921: LD_VAR 0 3
41925: PUSH
41926: LD_VAR 0 4
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: ST_TO_ADDR
// break ;
41935: GO 41939
// end ; end ;
41937: GO 41739
41939: POP
41940: POP
// if result then
41941: LD_VAR 0 1
41945: IFFALSE 42005
// begin ToLua ( playSibBomb() ) ;
41947: LD_STRING playSibBomb()
41949: PPUSH
41950: CALL_OW 559
// wait ( 0 0$14 ) ;
41954: LD_INT 490
41956: PPUSH
41957: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
41961: LD_VAR 0 1
41965: PUSH
41966: LD_INT 1
41968: ARRAY
41969: PPUSH
41970: LD_VAR 0 1
41974: PUSH
41975: LD_INT 2
41977: ARRAY
41978: PPUSH
41979: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
41983: LD_VAR 0 1
41987: PUSH
41988: LD_INT 1
41990: ARRAY
41991: PPUSH
41992: LD_VAR 0 1
41996: PUSH
41997: LD_INT 2
41999: ARRAY
42000: PPUSH
42001: CALL_OW 429
// end ; end ;
42005: LD_VAR 0 1
42009: RET
// every 0 0$1 trigger StreamModeActive and sReset do
42010: LD_EXP 87
42014: PUSH
42015: LD_EXP 109
42019: AND
42020: IFFALSE 42032
42022: GO 42024
42024: DISABLE
// YouLost (  ) ;
42025: LD_STRING 
42027: PPUSH
42028: CALL_OW 104
42032: END
// every 0 0$1 trigger StreamModeActive and sFog do
42033: LD_EXP 87
42037: PUSH
42038: LD_EXP 108
42042: AND
42043: IFFALSE 42057
42045: GO 42047
42047: DISABLE
// FogOff ( your_side ) ;
42048: LD_OWVAR 2
42052: PPUSH
42053: CALL_OW 344
42057: END
// every 0 0$1 trigger StreamModeActive and sSun do
42058: LD_EXP 87
42062: PUSH
42063: LD_EXP 110
42067: AND
42068: IFFALSE 42096
42070: GO 42072
42072: DISABLE
// begin solar_recharge_percent := 0 ;
42073: LD_ADDR_OWVAR 79
42077: PUSH
42078: LD_INT 0
42080: ST_TO_ADDR
// wait ( 5 5$00 ) ;
42081: LD_INT 10500
42083: PPUSH
42084: CALL_OW 67
// solar_recharge_percent := 100 ;
42088: LD_ADDR_OWVAR 79
42092: PUSH
42093: LD_INT 100
42095: ST_TO_ADDR
// end ;
42096: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
42097: LD_EXP 87
42101: PUSH
42102: LD_EXP 111
42106: AND
42107: IFFALSE 42346
42109: GO 42111
42111: DISABLE
42112: LD_INT 0
42114: PPUSH
42115: PPUSH
42116: PPUSH
// begin tmp := [ ] ;
42117: LD_ADDR_VAR 0 3
42121: PUSH
42122: EMPTY
42123: ST_TO_ADDR
// for i := 1 to 6 do
42124: LD_ADDR_VAR 0 1
42128: PUSH
42129: DOUBLE
42130: LD_INT 1
42132: DEC
42133: ST_TO_ADDR
42134: LD_INT 6
42136: PUSH
42137: FOR_TO
42138: IFFALSE 42243
// begin uc_nation := nation_nature ;
42140: LD_ADDR_OWVAR 21
42144: PUSH
42145: LD_INT 0
42147: ST_TO_ADDR
// uc_side := 0 ;
42148: LD_ADDR_OWVAR 20
42152: PUSH
42153: LD_INT 0
42155: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
42156: LD_ADDR_OWVAR 29
42160: PUSH
42161: LD_INT 12
42163: PUSH
42164: LD_INT 12
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: ST_TO_ADDR
// hc_agressivity := 20 ;
42171: LD_ADDR_OWVAR 35
42175: PUSH
42176: LD_INT 20
42178: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
42179: LD_ADDR_OWVAR 28
42183: PUSH
42184: LD_INT 17
42186: ST_TO_ADDR
// hc_gallery :=  ;
42187: LD_ADDR_OWVAR 33
42191: PUSH
42192: LD_STRING 
42194: ST_TO_ADDR
// hc_name :=  ;
42195: LD_ADDR_OWVAR 26
42199: PUSH
42200: LD_STRING 
42202: ST_TO_ADDR
// un := CreateHuman ;
42203: LD_ADDR_VAR 0 2
42207: PUSH
42208: CALL_OW 44
42212: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
42213: LD_VAR 0 2
42217: PPUSH
42218: LD_INT 1
42220: PPUSH
42221: CALL_OW 51
// tmp := tmp ^ un ;
42225: LD_ADDR_VAR 0 3
42229: PUSH
42230: LD_VAR 0 3
42234: PUSH
42235: LD_VAR 0 2
42239: ADD
42240: ST_TO_ADDR
// end ;
42241: GO 42137
42243: POP
42244: POP
// repeat wait ( 0 0$1 ) ;
42245: LD_INT 35
42247: PPUSH
42248: CALL_OW 67
// for un in tmp do
42252: LD_ADDR_VAR 0 2
42256: PUSH
42257: LD_VAR 0 3
42261: PUSH
42262: FOR_IN
42263: IFFALSE 42337
// begin if IsDead ( un ) then
42265: LD_VAR 0 2
42269: PPUSH
42270: CALL_OW 301
42274: IFFALSE 42294
// begin tmp := tmp diff un ;
42276: LD_ADDR_VAR 0 3
42280: PUSH
42281: LD_VAR 0 3
42285: PUSH
42286: LD_VAR 0 2
42290: DIFF
42291: ST_TO_ADDR
// continue ;
42292: GO 42262
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
42294: LD_VAR 0 2
42298: PPUSH
42299: LD_INT 3
42301: PUSH
42302: LD_INT 22
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PPUSH
42316: CALL_OW 69
42320: PPUSH
42321: LD_VAR 0 2
42325: PPUSH
42326: CALL_OW 74
42330: PPUSH
42331: CALL_OW 115
// end ;
42335: GO 42262
42337: POP
42338: POP
// until not tmp ;
42339: LD_VAR 0 3
42343: NOT
42344: IFFALSE 42245
// end ;
42346: PPOPN 3
42348: END
// every 0 0$1 trigger StreamModeActive and sTroll do
42349: LD_EXP 87
42353: PUSH
42354: LD_EXP 112
42358: AND
42359: IFFALSE 42413
42361: GO 42363
42363: DISABLE
// begin ToLua ( displayTroll(); ) ;
42364: LD_STRING displayTroll();
42366: PPUSH
42367: CALL_OW 559
// wait ( 3 3$00 ) ;
42371: LD_INT 6300
42373: PPUSH
42374: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42378: LD_STRING hideTroll();
42380: PPUSH
42381: CALL_OW 559
// wait ( 1 1$00 ) ;
42385: LD_INT 2100
42387: PPUSH
42388: CALL_OW 67
// ToLua ( displayTroll(); ) ;
42392: LD_STRING displayTroll();
42394: PPUSH
42395: CALL_OW 559
// wait ( 1 1$00 ) ;
42399: LD_INT 2100
42401: PPUSH
42402: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42406: LD_STRING hideTroll();
42408: PPUSH
42409: CALL_OW 559
// end ;
42413: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
42414: LD_EXP 87
42418: PUSH
42419: LD_EXP 113
42423: AND
42424: IFFALSE 42487
42426: GO 42428
42428: DISABLE
42429: LD_INT 0
42431: PPUSH
// begin p := 0 ;
42432: LD_ADDR_VAR 0 1
42436: PUSH
42437: LD_INT 0
42439: ST_TO_ADDR
// repeat game_speed := 1 ;
42440: LD_ADDR_OWVAR 65
42444: PUSH
42445: LD_INT 1
42447: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42448: LD_INT 35
42450: PPUSH
42451: CALL_OW 67
// p := p + 1 ;
42455: LD_ADDR_VAR 0 1
42459: PUSH
42460: LD_VAR 0 1
42464: PUSH
42465: LD_INT 1
42467: PLUS
42468: ST_TO_ADDR
// until p >= 60 ;
42469: LD_VAR 0 1
42473: PUSH
42474: LD_INT 60
42476: GREATEREQUAL
42477: IFFALSE 42440
// game_speed := 4 ;
42479: LD_ADDR_OWVAR 65
42483: PUSH
42484: LD_INT 4
42486: ST_TO_ADDR
// end ;
42487: PPOPN 1
42489: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
42490: LD_EXP 87
42494: PUSH
42495: LD_EXP 114
42499: AND
42500: IFFALSE 42646
42502: GO 42504
42504: DISABLE
42505: LD_INT 0
42507: PPUSH
42508: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42509: LD_ADDR_VAR 0 1
42513: PUSH
42514: LD_INT 22
42516: PUSH
42517: LD_OWVAR 2
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 2
42528: PUSH
42529: LD_INT 30
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 30
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PPUSH
42558: CALL_OW 69
42562: ST_TO_ADDR
// if not depot then
42563: LD_VAR 0 1
42567: NOT
42568: IFFALSE 42572
// exit ;
42570: GO 42646
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
42572: LD_ADDR_VAR 0 2
42576: PUSH
42577: LD_VAR 0 1
42581: PUSH
42582: LD_INT 1
42584: PPUSH
42585: LD_VAR 0 1
42589: PPUSH
42590: CALL_OW 12
42594: ARRAY
42595: PPUSH
42596: CALL_OW 274
42600: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
42601: LD_VAR 0 2
42605: PPUSH
42606: LD_INT 1
42608: PPUSH
42609: LD_INT 0
42611: PPUSH
42612: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
42616: LD_VAR 0 2
42620: PPUSH
42621: LD_INT 2
42623: PPUSH
42624: LD_INT 0
42626: PPUSH
42627: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
42631: LD_VAR 0 2
42635: PPUSH
42636: LD_INT 3
42638: PPUSH
42639: LD_INT 0
42641: PPUSH
42642: CALL_OW 277
// end ;
42646: PPOPN 2
42648: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
42649: LD_EXP 87
42653: PUSH
42654: LD_EXP 115
42658: AND
42659: IFFALSE 42756
42661: GO 42663
42663: DISABLE
42664: LD_INT 0
42666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
42667: LD_ADDR_VAR 0 1
42671: PUSH
42672: LD_INT 22
42674: PUSH
42675: LD_OWVAR 2
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 21
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 3
42696: PUSH
42697: LD_INT 23
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: LIST
42715: PPUSH
42716: CALL_OW 69
42720: ST_TO_ADDR
// if not tmp then
42721: LD_VAR 0 1
42725: NOT
42726: IFFALSE 42730
// exit ;
42728: GO 42756
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
42730: LD_VAR 0 1
42734: PUSH
42735: LD_INT 1
42737: PPUSH
42738: LD_VAR 0 1
42742: PPUSH
42743: CALL_OW 12
42747: ARRAY
42748: PPUSH
42749: LD_INT 200
42751: PPUSH
42752: CALL_OW 234
// end ;
42756: PPOPN 1
42758: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
42759: LD_EXP 87
42763: PUSH
42764: LD_EXP 116
42768: AND
42769: IFFALSE 42848
42771: GO 42773
42773: DISABLE
42774: LD_INT 0
42776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
42777: LD_ADDR_VAR 0 1
42781: PUSH
42782: LD_INT 22
42784: PUSH
42785: LD_OWVAR 2
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 21
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PPUSH
42808: CALL_OW 69
42812: ST_TO_ADDR
// if not tmp then
42813: LD_VAR 0 1
42817: NOT
42818: IFFALSE 42822
// exit ;
42820: GO 42848
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
42822: LD_VAR 0 1
42826: PUSH
42827: LD_INT 1
42829: PPUSH
42830: LD_VAR 0 1
42834: PPUSH
42835: CALL_OW 12
42839: ARRAY
42840: PPUSH
42841: LD_INT 60
42843: PPUSH
42844: CALL_OW 234
// end ;
42848: PPOPN 1
42850: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
42851: LD_EXP 87
42855: PUSH
42856: LD_EXP 117
42860: AND
42861: IFFALSE 42960
42863: GO 42865
42865: DISABLE
42866: LD_INT 0
42868: PPUSH
42869: PPUSH
// begin enable ;
42870: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
42871: LD_ADDR_VAR 0 1
42875: PUSH
42876: LD_INT 22
42878: PUSH
42879: LD_OWVAR 2
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 61
42890: PUSH
42891: EMPTY
42892: LIST
42893: PUSH
42894: LD_INT 33
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: PPUSH
42909: CALL_OW 69
42913: ST_TO_ADDR
// if not tmp then
42914: LD_VAR 0 1
42918: NOT
42919: IFFALSE 42923
// exit ;
42921: GO 42960
// for i in tmp do
42923: LD_ADDR_VAR 0 2
42927: PUSH
42928: LD_VAR 0 1
42932: PUSH
42933: FOR_IN
42934: IFFALSE 42958
// if IsControledBy ( i ) then
42936: LD_VAR 0 2
42940: PPUSH
42941: CALL_OW 312
42945: IFFALSE 42956
// ComUnlink ( i ) ;
42947: LD_VAR 0 2
42951: PPUSH
42952: CALL_OW 136
42956: GO 42933
42958: POP
42959: POP
// end ;
42960: PPOPN 2
42962: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
42963: LD_EXP 87
42967: PUSH
42968: LD_EXP 118
42972: AND
42973: IFFALSE 43113
42975: GO 42977
42977: DISABLE
42978: LD_INT 0
42980: PPUSH
42981: PPUSH
// begin ToLua ( displayPowell(); ) ;
42982: LD_STRING displayPowell();
42984: PPUSH
42985: CALL_OW 559
// uc_side := 0 ;
42989: LD_ADDR_OWVAR 20
42993: PUSH
42994: LD_INT 0
42996: ST_TO_ADDR
// uc_nation := 2 ;
42997: LD_ADDR_OWVAR 21
43001: PUSH
43002: LD_INT 2
43004: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
43005: LD_ADDR_OWVAR 37
43009: PUSH
43010: LD_INT 14
43012: ST_TO_ADDR
// vc_engine := engine_siberite ;
43013: LD_ADDR_OWVAR 39
43017: PUSH
43018: LD_INT 3
43020: ST_TO_ADDR
// vc_control := control_apeman ;
43021: LD_ADDR_OWVAR 38
43025: PUSH
43026: LD_INT 5
43028: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
43029: LD_ADDR_OWVAR 40
43033: PUSH
43034: LD_INT 29
43036: ST_TO_ADDR
// un := CreateVehicle ;
43037: LD_ADDR_VAR 0 2
43041: PUSH
43042: CALL_OW 45
43046: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43047: LD_VAR 0 2
43051: PPUSH
43052: LD_INT 1
43054: PPUSH
43055: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43059: LD_INT 35
43061: PPUSH
43062: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43066: LD_VAR 0 2
43070: PPUSH
43071: LD_INT 22
43073: PUSH
43074: LD_OWVAR 2
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PPUSH
43083: CALL_OW 69
43087: PPUSH
43088: LD_VAR 0 2
43092: PPUSH
43093: CALL_OW 74
43097: PPUSH
43098: CALL_OW 115
// until IsDead ( un ) ;
43102: LD_VAR 0 2
43106: PPUSH
43107: CALL_OW 301
43111: IFFALSE 43059
// end ;
43113: PPOPN 2
43115: END
// every 0 0$1 trigger StreamModeActive and sStu do
43116: LD_EXP 87
43120: PUSH
43121: LD_EXP 126
43125: AND
43126: IFFALSE 43142
43128: GO 43130
43130: DISABLE
// begin ToLua ( displayStucuk(); ) ;
43131: LD_STRING displayStucuk();
43133: PPUSH
43134: CALL_OW 559
// ResetFog ;
43138: CALL_OW 335
// end ;
43142: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
43143: LD_EXP 87
43147: PUSH
43148: LD_EXP 119
43152: AND
43153: IFFALSE 43294
43155: GO 43157
43157: DISABLE
43158: LD_INT 0
43160: PPUSH
43161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43162: LD_ADDR_VAR 0 2
43166: PUSH
43167: LD_INT 22
43169: PUSH
43170: LD_OWVAR 2
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 21
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PPUSH
43193: CALL_OW 69
43197: ST_TO_ADDR
// if not tmp then
43198: LD_VAR 0 2
43202: NOT
43203: IFFALSE 43207
// exit ;
43205: GO 43294
// un := tmp [ rand ( 1 , tmp ) ] ;
43207: LD_ADDR_VAR 0 1
43211: PUSH
43212: LD_VAR 0 2
43216: PUSH
43217: LD_INT 1
43219: PPUSH
43220: LD_VAR 0 2
43224: PPUSH
43225: CALL_OW 12
43229: ARRAY
43230: ST_TO_ADDR
// SetSide ( un , 0 ) ;
43231: LD_VAR 0 1
43235: PPUSH
43236: LD_INT 0
43238: PPUSH
43239: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
43243: LD_VAR 0 1
43247: PPUSH
43248: LD_OWVAR 3
43252: PUSH
43253: LD_VAR 0 1
43257: DIFF
43258: PPUSH
43259: LD_VAR 0 1
43263: PPUSH
43264: CALL_OW 74
43268: PPUSH
43269: CALL_OW 115
// wait ( 0 0$20 ) ;
43273: LD_INT 700
43275: PPUSH
43276: CALL_OW 67
// SetSide ( un , your_side ) ;
43280: LD_VAR 0 1
43284: PPUSH
43285: LD_OWVAR 2
43289: PPUSH
43290: CALL_OW 235
// end ;
43294: PPOPN 2
43296: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
43297: LD_EXP 87
43301: PUSH
43302: LD_EXP 120
43306: AND
43307: IFFALSE 43413
43309: GO 43311
43311: DISABLE
43312: LD_INT 0
43314: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43315: LD_ADDR_VAR 0 1
43319: PUSH
43320: LD_INT 22
43322: PUSH
43323: LD_OWVAR 2
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 2
43334: PUSH
43335: LD_INT 30
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 30
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PPUSH
43364: CALL_OW 69
43368: ST_TO_ADDR
// if not depot then
43369: LD_VAR 0 1
43373: NOT
43374: IFFALSE 43378
// exit ;
43376: GO 43413
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
43378: LD_VAR 0 1
43382: PUSH
43383: LD_INT 1
43385: ARRAY
43386: PPUSH
43387: CALL_OW 250
43391: PPUSH
43392: LD_VAR 0 1
43396: PUSH
43397: LD_INT 1
43399: ARRAY
43400: PPUSH
43401: CALL_OW 251
43405: PPUSH
43406: LD_INT 70
43408: PPUSH
43409: CALL_OW 495
// end ;
43413: PPOPN 1
43415: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
43416: LD_EXP 87
43420: PUSH
43421: LD_EXP 121
43425: AND
43426: IFFALSE 43637
43428: GO 43430
43430: DISABLE
43431: LD_INT 0
43433: PPUSH
43434: PPUSH
43435: PPUSH
43436: PPUSH
43437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43438: LD_ADDR_VAR 0 5
43442: PUSH
43443: LD_INT 22
43445: PUSH
43446: LD_OWVAR 2
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 21
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PPUSH
43469: CALL_OW 69
43473: ST_TO_ADDR
// if not tmp then
43474: LD_VAR 0 5
43478: NOT
43479: IFFALSE 43483
// exit ;
43481: GO 43637
// for i in tmp do
43483: LD_ADDR_VAR 0 1
43487: PUSH
43488: LD_VAR 0 5
43492: PUSH
43493: FOR_IN
43494: IFFALSE 43635
// begin d := rand ( 0 , 5 ) ;
43496: LD_ADDR_VAR 0 4
43500: PUSH
43501: LD_INT 0
43503: PPUSH
43504: LD_INT 5
43506: PPUSH
43507: CALL_OW 12
43511: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
43512: LD_ADDR_VAR 0 2
43516: PUSH
43517: LD_VAR 0 1
43521: PPUSH
43522: CALL_OW 250
43526: PPUSH
43527: LD_VAR 0 4
43531: PPUSH
43532: LD_INT 3
43534: PPUSH
43535: LD_INT 12
43537: PPUSH
43538: CALL_OW 12
43542: PPUSH
43543: CALL_OW 272
43547: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
43548: LD_ADDR_VAR 0 3
43552: PUSH
43553: LD_VAR 0 1
43557: PPUSH
43558: CALL_OW 251
43562: PPUSH
43563: LD_VAR 0 4
43567: PPUSH
43568: LD_INT 3
43570: PPUSH
43571: LD_INT 12
43573: PPUSH
43574: CALL_OW 12
43578: PPUSH
43579: CALL_OW 273
43583: ST_TO_ADDR
// if ValidHex ( x , y ) then
43584: LD_VAR 0 2
43588: PPUSH
43589: LD_VAR 0 3
43593: PPUSH
43594: CALL_OW 488
43598: IFFALSE 43633
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
43600: LD_VAR 0 1
43604: PPUSH
43605: LD_VAR 0 2
43609: PPUSH
43610: LD_VAR 0 3
43614: PPUSH
43615: LD_INT 3
43617: PPUSH
43618: LD_INT 6
43620: PPUSH
43621: CALL_OW 12
43625: PPUSH
43626: LD_INT 1
43628: PPUSH
43629: CALL_OW 483
// end ;
43633: GO 43493
43635: POP
43636: POP
// end ;
43637: PPOPN 5
43639: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
43640: LD_EXP 87
43644: PUSH
43645: LD_EXP 122
43649: AND
43650: IFFALSE 43744
43652: GO 43654
43654: DISABLE
43655: LD_INT 0
43657: PPUSH
43658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
43659: LD_ADDR_VAR 0 2
43663: PUSH
43664: LD_INT 22
43666: PUSH
43667: LD_OWVAR 2
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 32
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 21
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: LIST
43700: PPUSH
43701: CALL_OW 69
43705: ST_TO_ADDR
// if not tmp then
43706: LD_VAR 0 2
43710: NOT
43711: IFFALSE 43715
// exit ;
43713: GO 43744
// for i in tmp do
43715: LD_ADDR_VAR 0 1
43719: PUSH
43720: LD_VAR 0 2
43724: PUSH
43725: FOR_IN
43726: IFFALSE 43742
// SetFuel ( i , 0 ) ;
43728: LD_VAR 0 1
43732: PPUSH
43733: LD_INT 0
43735: PPUSH
43736: CALL_OW 240
43740: GO 43725
43742: POP
43743: POP
// end ;
43744: PPOPN 2
43746: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
43747: LD_EXP 87
43751: PUSH
43752: LD_EXP 123
43756: AND
43757: IFFALSE 43823
43759: GO 43761
43761: DISABLE
43762: LD_INT 0
43764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
43765: LD_ADDR_VAR 0 1
43769: PUSH
43770: LD_INT 22
43772: PUSH
43773: LD_OWVAR 2
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 30
43784: PUSH
43785: LD_INT 29
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PPUSH
43796: CALL_OW 69
43800: ST_TO_ADDR
// if not tmp then
43801: LD_VAR 0 1
43805: NOT
43806: IFFALSE 43810
// exit ;
43808: GO 43823
// DestroyUnit ( tmp [ 1 ] ) ;
43810: LD_VAR 0 1
43814: PUSH
43815: LD_INT 1
43817: ARRAY
43818: PPUSH
43819: CALL_OW 65
// end ;
43823: PPOPN 1
43825: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
43826: LD_EXP 87
43830: PUSH
43831: LD_EXP 125
43835: AND
43836: IFFALSE 43965
43838: GO 43840
43840: DISABLE
43841: LD_INT 0
43843: PPUSH
// begin uc_side := 0 ;
43844: LD_ADDR_OWVAR 20
43848: PUSH
43849: LD_INT 0
43851: ST_TO_ADDR
// uc_nation := nation_arabian ;
43852: LD_ADDR_OWVAR 21
43856: PUSH
43857: LD_INT 2
43859: ST_TO_ADDR
// hc_gallery :=  ;
43860: LD_ADDR_OWVAR 33
43864: PUSH
43865: LD_STRING 
43867: ST_TO_ADDR
// hc_name :=  ;
43868: LD_ADDR_OWVAR 26
43872: PUSH
43873: LD_STRING 
43875: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
43876: LD_INT 1
43878: PPUSH
43879: LD_INT 11
43881: PPUSH
43882: LD_INT 10
43884: PPUSH
43885: CALL_OW 380
// un := CreateHuman ;
43889: LD_ADDR_VAR 0 1
43893: PUSH
43894: CALL_OW 44
43898: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43899: LD_VAR 0 1
43903: PPUSH
43904: LD_INT 1
43906: PPUSH
43907: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43911: LD_INT 35
43913: PPUSH
43914: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43918: LD_VAR 0 1
43922: PPUSH
43923: LD_INT 22
43925: PUSH
43926: LD_OWVAR 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PPUSH
43935: CALL_OW 69
43939: PPUSH
43940: LD_VAR 0 1
43944: PPUSH
43945: CALL_OW 74
43949: PPUSH
43950: CALL_OW 115
// until IsDead ( un ) ;
43954: LD_VAR 0 1
43958: PPUSH
43959: CALL_OW 301
43963: IFFALSE 43911
// end ;
43965: PPOPN 1
43967: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
43968: LD_EXP 87
43972: PUSH
43973: LD_EXP 127
43977: AND
43978: IFFALSE 43990
43980: GO 43982
43982: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
43983: LD_STRING earthquake(getX(game), 0, 32)
43985: PPUSH
43986: CALL_OW 559
43990: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
43991: LD_EXP 87
43995: PUSH
43996: LD_EXP 128
44000: AND
44001: IFFALSE 44092
44003: GO 44005
44005: DISABLE
44006: LD_INT 0
44008: PPUSH
// begin enable ;
44009: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
44010: LD_ADDR_VAR 0 1
44014: PUSH
44015: LD_INT 22
44017: PUSH
44018: LD_OWVAR 2
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 21
44029: PUSH
44030: LD_INT 2
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 33
44039: PUSH
44040: LD_INT 3
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: LIST
44051: PPUSH
44052: CALL_OW 69
44056: ST_TO_ADDR
// if not tmp then
44057: LD_VAR 0 1
44061: NOT
44062: IFFALSE 44066
// exit ;
44064: GO 44092
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
44066: LD_VAR 0 1
44070: PUSH
44071: LD_INT 1
44073: PPUSH
44074: LD_VAR 0 1
44078: PPUSH
44079: CALL_OW 12
44083: ARRAY
44084: PPUSH
44085: LD_INT 1
44087: PPUSH
44088: CALL_OW 234
// end ;
44092: PPOPN 1
44094: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
44095: LD_EXP 87
44099: PUSH
44100: LD_EXP 129
44104: AND
44105: IFFALSE 44246
44107: GO 44109
44109: DISABLE
44110: LD_INT 0
44112: PPUSH
44113: PPUSH
44114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44115: LD_ADDR_VAR 0 3
44119: PUSH
44120: LD_INT 22
44122: PUSH
44123: LD_OWVAR 2
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 25
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PPUSH
44146: CALL_OW 69
44150: ST_TO_ADDR
// if not tmp then
44151: LD_VAR 0 3
44155: NOT
44156: IFFALSE 44160
// exit ;
44158: GO 44246
// un := tmp [ rand ( 1 , tmp ) ] ;
44160: LD_ADDR_VAR 0 2
44164: PUSH
44165: LD_VAR 0 3
44169: PUSH
44170: LD_INT 1
44172: PPUSH
44173: LD_VAR 0 3
44177: PPUSH
44178: CALL_OW 12
44182: ARRAY
44183: ST_TO_ADDR
// if Crawls ( un ) then
44184: LD_VAR 0 2
44188: PPUSH
44189: CALL_OW 318
44193: IFFALSE 44204
// ComWalk ( un ) ;
44195: LD_VAR 0 2
44199: PPUSH
44200: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
44204: LD_VAR 0 2
44208: PPUSH
44209: LD_INT 9
44211: PPUSH
44212: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
44216: LD_INT 28
44218: PPUSH
44219: LD_OWVAR 2
44223: PPUSH
44224: LD_INT 2
44226: PPUSH
44227: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
44231: LD_INT 29
44233: PPUSH
44234: LD_OWVAR 2
44238: PPUSH
44239: LD_INT 2
44241: PPUSH
44242: CALL_OW 322
// end ;
44246: PPOPN 3
44248: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
44249: LD_EXP 87
44253: PUSH
44254: LD_EXP 130
44258: AND
44259: IFFALSE 44370
44261: GO 44263
44263: DISABLE
44264: LD_INT 0
44266: PPUSH
44267: PPUSH
44268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44269: LD_ADDR_VAR 0 3
44273: PUSH
44274: LD_INT 22
44276: PUSH
44277: LD_OWVAR 2
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 25
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PPUSH
44300: CALL_OW 69
44304: ST_TO_ADDR
// if not tmp then
44305: LD_VAR 0 3
44309: NOT
44310: IFFALSE 44314
// exit ;
44312: GO 44370
// un := tmp [ rand ( 1 , tmp ) ] ;
44314: LD_ADDR_VAR 0 2
44318: PUSH
44319: LD_VAR 0 3
44323: PUSH
44324: LD_INT 1
44326: PPUSH
44327: LD_VAR 0 3
44331: PPUSH
44332: CALL_OW 12
44336: ARRAY
44337: ST_TO_ADDR
// if Crawls ( un ) then
44338: LD_VAR 0 2
44342: PPUSH
44343: CALL_OW 318
44347: IFFALSE 44358
// ComWalk ( un ) ;
44349: LD_VAR 0 2
44353: PPUSH
44354: CALL_OW 138
// SetClass ( un , class_mortar ) ;
44358: LD_VAR 0 2
44362: PPUSH
44363: LD_INT 8
44365: PPUSH
44366: CALL_OW 336
// end ;
44370: PPOPN 3
44372: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
44373: LD_EXP 87
44377: PUSH
44378: LD_EXP 131
44382: AND
44383: IFFALSE 44527
44385: GO 44387
44387: DISABLE
44388: LD_INT 0
44390: PPUSH
44391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
44392: LD_ADDR_VAR 0 2
44396: PUSH
44397: LD_INT 22
44399: PUSH
44400: LD_OWVAR 2
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 21
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: LD_INT 34
44424: PUSH
44425: LD_INT 12
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 34
44434: PUSH
44435: LD_INT 51
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 34
44444: PUSH
44445: LD_INT 32
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: LIST
44462: PPUSH
44463: CALL_OW 69
44467: ST_TO_ADDR
// if not tmp then
44468: LD_VAR 0 2
44472: NOT
44473: IFFALSE 44477
// exit ;
44475: GO 44527
// for i in tmp do
44477: LD_ADDR_VAR 0 1
44481: PUSH
44482: LD_VAR 0 2
44486: PUSH
44487: FOR_IN
44488: IFFALSE 44525
// if GetCargo ( i , mat_artifact ) = 0 then
44490: LD_VAR 0 1
44494: PPUSH
44495: LD_INT 4
44497: PPUSH
44498: CALL_OW 289
44502: PUSH
44503: LD_INT 0
44505: EQUAL
44506: IFFALSE 44523
// SetCargo ( i , mat_siberit , 100 ) ;
44508: LD_VAR 0 1
44512: PPUSH
44513: LD_INT 3
44515: PPUSH
44516: LD_INT 100
44518: PPUSH
44519: CALL_OW 290
44523: GO 44487
44525: POP
44526: POP
// end ;
44527: PPOPN 2
44529: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
44530: LD_EXP 87
44534: PUSH
44535: LD_EXP 132
44539: AND
44540: IFFALSE 44723
44542: GO 44544
44544: DISABLE
44545: LD_INT 0
44547: PPUSH
44548: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
44549: LD_ADDR_VAR 0 2
44553: PUSH
44554: LD_INT 22
44556: PUSH
44557: LD_OWVAR 2
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PPUSH
44566: CALL_OW 69
44570: ST_TO_ADDR
// if not tmp then
44571: LD_VAR 0 2
44575: NOT
44576: IFFALSE 44580
// exit ;
44578: GO 44723
// for i := 1 to 2 do
44580: LD_ADDR_VAR 0 1
44584: PUSH
44585: DOUBLE
44586: LD_INT 1
44588: DEC
44589: ST_TO_ADDR
44590: LD_INT 2
44592: PUSH
44593: FOR_TO
44594: IFFALSE 44721
// begin uc_side := your_side ;
44596: LD_ADDR_OWVAR 20
44600: PUSH
44601: LD_OWVAR 2
44605: ST_TO_ADDR
// uc_nation := nation_american ;
44606: LD_ADDR_OWVAR 21
44610: PUSH
44611: LD_INT 1
44613: ST_TO_ADDR
// vc_chassis := us_morphling ;
44614: LD_ADDR_OWVAR 37
44618: PUSH
44619: LD_INT 5
44621: ST_TO_ADDR
// vc_engine := engine_siberite ;
44622: LD_ADDR_OWVAR 39
44626: PUSH
44627: LD_INT 3
44629: ST_TO_ADDR
// vc_control := control_computer ;
44630: LD_ADDR_OWVAR 38
44634: PUSH
44635: LD_INT 3
44637: ST_TO_ADDR
// vc_weapon := us_double_laser ;
44638: LD_ADDR_OWVAR 40
44642: PUSH
44643: LD_INT 10
44645: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
44646: LD_VAR 0 2
44650: PUSH
44651: LD_INT 1
44653: ARRAY
44654: PPUSH
44655: CALL_OW 310
44659: NOT
44660: IFFALSE 44707
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
44662: CALL_OW 45
44666: PPUSH
44667: LD_VAR 0 2
44671: PUSH
44672: LD_INT 1
44674: ARRAY
44675: PPUSH
44676: CALL_OW 250
44680: PPUSH
44681: LD_VAR 0 2
44685: PUSH
44686: LD_INT 1
44688: ARRAY
44689: PPUSH
44690: CALL_OW 251
44694: PPUSH
44695: LD_INT 12
44697: PPUSH
44698: LD_INT 1
44700: PPUSH
44701: CALL_OW 50
44705: GO 44719
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
44707: CALL_OW 45
44711: PPUSH
44712: LD_INT 1
44714: PPUSH
44715: CALL_OW 51
// end ;
44719: GO 44593
44721: POP
44722: POP
// end ;
44723: PPOPN 2
44725: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
44726: LD_EXP 87
44730: PUSH
44731: LD_EXP 133
44735: AND
44736: IFFALSE 44958
44738: GO 44740
44740: DISABLE
44741: LD_INT 0
44743: PPUSH
44744: PPUSH
44745: PPUSH
44746: PPUSH
44747: PPUSH
44748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
44749: LD_ADDR_VAR 0 6
44753: PUSH
44754: LD_INT 22
44756: PUSH
44757: LD_OWVAR 2
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 21
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 3
44778: PUSH
44779: LD_INT 23
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: PPUSH
44798: CALL_OW 69
44802: ST_TO_ADDR
// if not tmp then
44803: LD_VAR 0 6
44807: NOT
44808: IFFALSE 44812
// exit ;
44810: GO 44958
// s1 := rand ( 1 , 4 ) ;
44812: LD_ADDR_VAR 0 2
44816: PUSH
44817: LD_INT 1
44819: PPUSH
44820: LD_INT 4
44822: PPUSH
44823: CALL_OW 12
44827: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
44828: LD_ADDR_VAR 0 4
44832: PUSH
44833: LD_VAR 0 6
44837: PUSH
44838: LD_INT 1
44840: ARRAY
44841: PPUSH
44842: LD_VAR 0 2
44846: PPUSH
44847: CALL_OW 259
44851: ST_TO_ADDR
// if s1 = 1 then
44852: LD_VAR 0 2
44856: PUSH
44857: LD_INT 1
44859: EQUAL
44860: IFFALSE 44880
// s2 := rand ( 2 , 4 ) else
44862: LD_ADDR_VAR 0 3
44866: PUSH
44867: LD_INT 2
44869: PPUSH
44870: LD_INT 4
44872: PPUSH
44873: CALL_OW 12
44877: ST_TO_ADDR
44878: GO 44888
// s2 := 1 ;
44880: LD_ADDR_VAR 0 3
44884: PUSH
44885: LD_INT 1
44887: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
44888: LD_ADDR_VAR 0 5
44892: PUSH
44893: LD_VAR 0 6
44897: PUSH
44898: LD_INT 1
44900: ARRAY
44901: PPUSH
44902: LD_VAR 0 3
44906: PPUSH
44907: CALL_OW 259
44911: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
44912: LD_VAR 0 6
44916: PUSH
44917: LD_INT 1
44919: ARRAY
44920: PPUSH
44921: LD_VAR 0 2
44925: PPUSH
44926: LD_VAR 0 5
44930: PPUSH
44931: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
44935: LD_VAR 0 6
44939: PUSH
44940: LD_INT 1
44942: ARRAY
44943: PPUSH
44944: LD_VAR 0 3
44948: PPUSH
44949: LD_VAR 0 4
44953: PPUSH
44954: CALL_OW 237
// end ;
44958: PPOPN 6
44960: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
44961: LD_EXP 87
44965: PUSH
44966: LD_EXP 134
44970: AND
44971: IFFALSE 45050
44973: GO 44975
44975: DISABLE
44976: LD_INT 0
44978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
44979: LD_ADDR_VAR 0 1
44983: PUSH
44984: LD_INT 22
44986: PUSH
44987: LD_OWVAR 2
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 30
44998: PUSH
44999: LD_INT 3
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PPUSH
45010: CALL_OW 69
45014: ST_TO_ADDR
// if not tmp then
45015: LD_VAR 0 1
45019: NOT
45020: IFFALSE 45024
// exit ;
45022: GO 45050
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45024: LD_VAR 0 1
45028: PUSH
45029: LD_INT 1
45031: PPUSH
45032: LD_VAR 0 1
45036: PPUSH
45037: CALL_OW 12
45041: ARRAY
45042: PPUSH
45043: LD_INT 1
45045: PPUSH
45046: CALL_OW 234
// end ;
45050: PPOPN 1
45052: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
45053: LD_EXP 87
45057: PUSH
45058: LD_EXP 135
45062: AND
45063: IFFALSE 45175
45065: GO 45067
45067: DISABLE
45068: LD_INT 0
45070: PPUSH
45071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
45072: LD_ADDR_VAR 0 2
45076: PUSH
45077: LD_INT 22
45079: PUSH
45080: LD_OWVAR 2
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: LD_INT 30
45094: PUSH
45095: LD_INT 27
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 30
45104: PUSH
45105: LD_INT 26
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 30
45114: PUSH
45115: LD_INT 28
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PPUSH
45132: CALL_OW 69
45136: ST_TO_ADDR
// if not tmp then
45137: LD_VAR 0 2
45141: NOT
45142: IFFALSE 45146
// exit ;
45144: GO 45175
// for i in tmp do
45146: LD_ADDR_VAR 0 1
45150: PUSH
45151: LD_VAR 0 2
45155: PUSH
45156: FOR_IN
45157: IFFALSE 45173
// SetLives ( i , 1 ) ;
45159: LD_VAR 0 1
45163: PPUSH
45164: LD_INT 1
45166: PPUSH
45167: CALL_OW 234
45171: GO 45156
45173: POP
45174: POP
// end ;
45175: PPOPN 2
45177: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
45178: LD_EXP 87
45182: PUSH
45183: LD_EXP 136
45187: AND
45188: IFFALSE 45475
45190: GO 45192
45192: DISABLE
45193: LD_INT 0
45195: PPUSH
45196: PPUSH
45197: PPUSH
// begin i := rand ( 1 , 7 ) ;
45198: LD_ADDR_VAR 0 1
45202: PUSH
45203: LD_INT 1
45205: PPUSH
45206: LD_INT 7
45208: PPUSH
45209: CALL_OW 12
45213: ST_TO_ADDR
// case i of 1 :
45214: LD_VAR 0 1
45218: PUSH
45219: LD_INT 1
45221: DOUBLE
45222: EQUAL
45223: IFTRUE 45227
45225: GO 45237
45227: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
45228: LD_STRING earthquake(getX(game), 0, 32)
45230: PPUSH
45231: CALL_OW 559
45235: GO 45475
45237: LD_INT 2
45239: DOUBLE
45240: EQUAL
45241: IFTRUE 45245
45243: GO 45259
45245: POP
// begin ToLua ( displayStucuk(); ) ;
45246: LD_STRING displayStucuk();
45248: PPUSH
45249: CALL_OW 559
// ResetFog ;
45253: CALL_OW 335
// end ; 3 :
45257: GO 45475
45259: LD_INT 3
45261: DOUBLE
45262: EQUAL
45263: IFTRUE 45267
45265: GO 45371
45267: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45268: LD_ADDR_VAR 0 2
45272: PUSH
45273: LD_INT 22
45275: PUSH
45276: LD_OWVAR 2
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 25
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PPUSH
45299: CALL_OW 69
45303: ST_TO_ADDR
// if not tmp then
45304: LD_VAR 0 2
45308: NOT
45309: IFFALSE 45313
// exit ;
45311: GO 45475
// un := tmp [ rand ( 1 , tmp ) ] ;
45313: LD_ADDR_VAR 0 3
45317: PUSH
45318: LD_VAR 0 2
45322: PUSH
45323: LD_INT 1
45325: PPUSH
45326: LD_VAR 0 2
45330: PPUSH
45331: CALL_OW 12
45335: ARRAY
45336: ST_TO_ADDR
// if Crawls ( un ) then
45337: LD_VAR 0 3
45341: PPUSH
45342: CALL_OW 318
45346: IFFALSE 45357
// ComWalk ( un ) ;
45348: LD_VAR 0 3
45352: PPUSH
45353: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45357: LD_VAR 0 3
45361: PPUSH
45362: LD_INT 8
45364: PPUSH
45365: CALL_OW 336
// end ; 4 :
45369: GO 45475
45371: LD_INT 4
45373: DOUBLE
45374: EQUAL
45375: IFTRUE 45379
45377: GO 45453
45379: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45380: LD_ADDR_VAR 0 2
45384: PUSH
45385: LD_INT 22
45387: PUSH
45388: LD_OWVAR 2
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 30
45399: PUSH
45400: LD_INT 29
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PPUSH
45411: CALL_OW 69
45415: ST_TO_ADDR
// if not tmp then
45416: LD_VAR 0 2
45420: NOT
45421: IFFALSE 45425
// exit ;
45423: GO 45475
// CenterNowOnUnits ( tmp [ 1 ] ) ;
45425: LD_VAR 0 2
45429: PUSH
45430: LD_INT 1
45432: ARRAY
45433: PPUSH
45434: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
45438: LD_VAR 0 2
45442: PUSH
45443: LD_INT 1
45445: ARRAY
45446: PPUSH
45447: CALL_OW 65
// end ; 5 .. 7 :
45451: GO 45475
45453: LD_INT 5
45455: DOUBLE
45456: GREATEREQUAL
45457: IFFALSE 45465
45459: LD_INT 7
45461: DOUBLE
45462: LESSEQUAL
45463: IFTRUE 45467
45465: GO 45474
45467: POP
// StreamSibBomb ; end ;
45468: CALL 41712 0 0
45472: GO 45475
45474: POP
// end ;
45475: PPOPN 3
45477: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
45478: LD_EXP 87
45482: PUSH
45483: LD_EXP 137
45487: AND
45488: IFFALSE 45644
45490: GO 45492
45492: DISABLE
45493: LD_INT 0
45495: PPUSH
45496: PPUSH
45497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
45498: LD_ADDR_VAR 0 2
45502: PUSH
45503: LD_INT 81
45505: PUSH
45506: LD_OWVAR 2
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 2
45517: PUSH
45518: LD_INT 21
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 21
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PPUSH
45547: CALL_OW 69
45551: ST_TO_ADDR
// if not tmp then
45552: LD_VAR 0 2
45556: NOT
45557: IFFALSE 45561
// exit ;
45559: GO 45644
// p := 0 ;
45561: LD_ADDR_VAR 0 3
45565: PUSH
45566: LD_INT 0
45568: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45569: LD_INT 35
45571: PPUSH
45572: CALL_OW 67
// p := p + 1 ;
45576: LD_ADDR_VAR 0 3
45580: PUSH
45581: LD_VAR 0 3
45585: PUSH
45586: LD_INT 1
45588: PLUS
45589: ST_TO_ADDR
// for i in tmp do
45590: LD_ADDR_VAR 0 1
45594: PUSH
45595: LD_VAR 0 2
45599: PUSH
45600: FOR_IN
45601: IFFALSE 45632
// if GetLives ( i ) < 1000 then
45603: LD_VAR 0 1
45607: PPUSH
45608: CALL_OW 256
45612: PUSH
45613: LD_INT 1000
45615: LESS
45616: IFFALSE 45630
// SetLives ( i , 1000 ) ;
45618: LD_VAR 0 1
45622: PPUSH
45623: LD_INT 1000
45625: PPUSH
45626: CALL_OW 234
45630: GO 45600
45632: POP
45633: POP
// until p > 20 ;
45634: LD_VAR 0 3
45638: PUSH
45639: LD_INT 20
45641: GREATER
45642: IFFALSE 45569
// end ;
45644: PPOPN 3
45646: END
// every 0 0$1 trigger StreamModeActive and sTime do
45647: LD_EXP 87
45651: PUSH
45652: LD_EXP 138
45656: AND
45657: IFFALSE 45692
45659: GO 45661
45661: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
45662: LD_INT 28
45664: PPUSH
45665: LD_OWVAR 2
45669: PPUSH
45670: LD_INT 2
45672: PPUSH
45673: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
45677: LD_INT 30
45679: PPUSH
45680: LD_OWVAR 2
45684: PPUSH
45685: LD_INT 2
45687: PPUSH
45688: CALL_OW 322
// end ;
45692: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
45693: LD_EXP 87
45697: PUSH
45698: LD_EXP 139
45702: AND
45703: IFFALSE 45824
45705: GO 45707
45707: DISABLE
45708: LD_INT 0
45710: PPUSH
45711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45712: LD_ADDR_VAR 0 2
45716: PUSH
45717: LD_INT 22
45719: PUSH
45720: LD_OWVAR 2
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 21
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 3
45741: PUSH
45742: LD_INT 23
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: LIST
45760: PPUSH
45761: CALL_OW 69
45765: ST_TO_ADDR
// if not tmp then
45766: LD_VAR 0 2
45770: NOT
45771: IFFALSE 45775
// exit ;
45773: GO 45824
// for i in tmp do
45775: LD_ADDR_VAR 0 1
45779: PUSH
45780: LD_VAR 0 2
45784: PUSH
45785: FOR_IN
45786: IFFALSE 45822
// begin if Crawls ( i ) then
45788: LD_VAR 0 1
45792: PPUSH
45793: CALL_OW 318
45797: IFFALSE 45808
// ComWalk ( i ) ;
45799: LD_VAR 0 1
45803: PPUSH
45804: CALL_OW 138
// SetClass ( i , 2 ) ;
45808: LD_VAR 0 1
45812: PPUSH
45813: LD_INT 2
45815: PPUSH
45816: CALL_OW 336
// end ;
45820: GO 45785
45822: POP
45823: POP
// end ;
45824: PPOPN 2
45826: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
45827: LD_EXP 87
45831: PUSH
45832: LD_EXP 140
45836: AND
45837: IFFALSE 46125
45839: GO 45841
45841: DISABLE
45842: LD_INT 0
45844: PPUSH
45845: PPUSH
45846: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
45847: LD_OWVAR 2
45851: PPUSH
45852: LD_INT 9
45854: PPUSH
45855: LD_INT 1
45857: PPUSH
45858: LD_INT 1
45860: PPUSH
45861: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
45865: LD_INT 9
45867: PPUSH
45868: LD_OWVAR 2
45872: PPUSH
45873: CALL_OW 343
// uc_side := 9 ;
45877: LD_ADDR_OWVAR 20
45881: PUSH
45882: LD_INT 9
45884: ST_TO_ADDR
// uc_nation := 2 ;
45885: LD_ADDR_OWVAR 21
45889: PUSH
45890: LD_INT 2
45892: ST_TO_ADDR
// hc_name := Dark Warrior ;
45893: LD_ADDR_OWVAR 26
45897: PUSH
45898: LD_STRING Dark Warrior
45900: ST_TO_ADDR
// hc_gallery :=  ;
45901: LD_ADDR_OWVAR 33
45905: PUSH
45906: LD_STRING 
45908: ST_TO_ADDR
// hc_noskilllimit := true ;
45909: LD_ADDR_OWVAR 76
45913: PUSH
45914: LD_INT 1
45916: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
45917: LD_ADDR_OWVAR 31
45921: PUSH
45922: LD_INT 30
45924: PUSH
45925: LD_INT 30
45927: PUSH
45928: LD_INT 30
45930: PUSH
45931: LD_INT 30
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: ST_TO_ADDR
// un := CreateHuman ;
45940: LD_ADDR_VAR 0 3
45944: PUSH
45945: CALL_OW 44
45949: ST_TO_ADDR
// hc_noskilllimit := false ;
45950: LD_ADDR_OWVAR 76
45954: PUSH
45955: LD_INT 0
45957: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
45958: LD_VAR 0 3
45962: PPUSH
45963: LD_INT 1
45965: PPUSH
45966: CALL_OW 51
// ToLua ( playRanger() ) ;
45970: LD_STRING playRanger()
45972: PPUSH
45973: CALL_OW 559
// p := 0 ;
45977: LD_ADDR_VAR 0 2
45981: PUSH
45982: LD_INT 0
45984: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45985: LD_INT 35
45987: PPUSH
45988: CALL_OW 67
// p := p + 1 ;
45992: LD_ADDR_VAR 0 2
45996: PUSH
45997: LD_VAR 0 2
46001: PUSH
46002: LD_INT 1
46004: PLUS
46005: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
46006: LD_VAR 0 3
46010: PPUSH
46011: CALL_OW 256
46015: PUSH
46016: LD_INT 1000
46018: LESS
46019: IFFALSE 46033
// SetLives ( un , 1000 ) ;
46021: LD_VAR 0 3
46025: PPUSH
46026: LD_INT 1000
46028: PPUSH
46029: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
46033: LD_VAR 0 3
46037: PPUSH
46038: LD_INT 81
46040: PUSH
46041: LD_OWVAR 2
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 91
46052: PUSH
46053: LD_VAR 0 3
46057: PUSH
46058: LD_INT 30
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: LIST
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PPUSH
46070: CALL_OW 69
46074: PPUSH
46075: LD_VAR 0 3
46079: PPUSH
46080: CALL_OW 74
46084: PPUSH
46085: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
46089: LD_VAR 0 2
46093: PUSH
46094: LD_INT 80
46096: GREATER
46097: PUSH
46098: LD_VAR 0 3
46102: PPUSH
46103: CALL_OW 301
46107: OR
46108: IFFALSE 45985
// if un then
46110: LD_VAR 0 3
46114: IFFALSE 46125
// RemoveUnit ( un ) ;
46116: LD_VAR 0 3
46120: PPUSH
46121: CALL_OW 64
// end ;
46125: PPOPN 3
46127: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
46128: LD_EXP 141
46132: IFFALSE 46248
46134: GO 46136
46136: DISABLE
46137: LD_INT 0
46139: PPUSH
46140: PPUSH
46141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46142: LD_ADDR_VAR 0 2
46146: PUSH
46147: LD_INT 81
46149: PUSH
46150: LD_OWVAR 2
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 21
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PPUSH
46173: CALL_OW 69
46177: ST_TO_ADDR
// ToLua ( playComputer() ) ;
46178: LD_STRING playComputer()
46180: PPUSH
46181: CALL_OW 559
// if not tmp then
46185: LD_VAR 0 2
46189: NOT
46190: IFFALSE 46194
// exit ;
46192: GO 46248
// for i in tmp do
46194: LD_ADDR_VAR 0 1
46198: PUSH
46199: LD_VAR 0 2
46203: PUSH
46204: FOR_IN
46205: IFFALSE 46246
// for j := 1 to 4 do
46207: LD_ADDR_VAR 0 3
46211: PUSH
46212: DOUBLE
46213: LD_INT 1
46215: DEC
46216: ST_TO_ADDR
46217: LD_INT 4
46219: PUSH
46220: FOR_TO
46221: IFFALSE 46242
// SetSkill ( i , j , 10 ) ;
46223: LD_VAR 0 1
46227: PPUSH
46228: LD_VAR 0 3
46232: PPUSH
46233: LD_INT 10
46235: PPUSH
46236: CALL_OW 237
46240: GO 46220
46242: POP
46243: POP
46244: GO 46204
46246: POP
46247: POP
// end ;
46248: PPOPN 3
46250: END
// every 0 0$1 trigger s30 do var i , tmp ;
46251: LD_EXP 142
46255: IFFALSE 46324
46257: GO 46259
46259: DISABLE
46260: LD_INT 0
46262: PPUSH
46263: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46264: LD_ADDR_VAR 0 2
46268: PUSH
46269: LD_INT 22
46271: PUSH
46272: LD_OWVAR 2
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PPUSH
46281: CALL_OW 69
46285: ST_TO_ADDR
// if not tmp then
46286: LD_VAR 0 2
46290: NOT
46291: IFFALSE 46295
// exit ;
46293: GO 46324
// for i in tmp do
46295: LD_ADDR_VAR 0 1
46299: PUSH
46300: LD_VAR 0 2
46304: PUSH
46305: FOR_IN
46306: IFFALSE 46322
// SetLives ( i , 300 ) ;
46308: LD_VAR 0 1
46312: PPUSH
46313: LD_INT 300
46315: PPUSH
46316: CALL_OW 234
46320: GO 46305
46322: POP
46323: POP
// end ;
46324: PPOPN 2
46326: END
// every 0 0$1 trigger s60 do var i , tmp ;
46327: LD_EXP 143
46331: IFFALSE 46400
46333: GO 46335
46335: DISABLE
46336: LD_INT 0
46338: PPUSH
46339: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46340: LD_ADDR_VAR 0 2
46344: PUSH
46345: LD_INT 22
46347: PUSH
46348: LD_OWVAR 2
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PPUSH
46357: CALL_OW 69
46361: ST_TO_ADDR
// if not tmp then
46362: LD_VAR 0 2
46366: NOT
46367: IFFALSE 46371
// exit ;
46369: GO 46400
// for i in tmp do
46371: LD_ADDR_VAR 0 1
46375: PUSH
46376: LD_VAR 0 2
46380: PUSH
46381: FOR_IN
46382: IFFALSE 46398
// SetLives ( i , 600 ) ;
46384: LD_VAR 0 1
46388: PPUSH
46389: LD_INT 600
46391: PPUSH
46392: CALL_OW 234
46396: GO 46381
46398: POP
46399: POP
// end ;
46400: PPOPN 2
46402: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46403: LD_INT 0
46405: PPUSH
// case cmd of 301 :
46406: LD_VAR 0 1
46410: PUSH
46411: LD_INT 301
46413: DOUBLE
46414: EQUAL
46415: IFTRUE 46419
46417: GO 46451
46419: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
46420: LD_VAR 0 6
46424: PPUSH
46425: LD_VAR 0 7
46429: PPUSH
46430: LD_VAR 0 8
46434: PPUSH
46435: LD_VAR 0 4
46439: PPUSH
46440: LD_VAR 0 5
46444: PPUSH
46445: CALL 47660 0 5
46449: GO 46572
46451: LD_INT 302
46453: DOUBLE
46454: EQUAL
46455: IFTRUE 46459
46457: GO 46496
46459: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
46460: LD_VAR 0 6
46464: PPUSH
46465: LD_VAR 0 7
46469: PPUSH
46470: LD_VAR 0 8
46474: PPUSH
46475: LD_VAR 0 9
46479: PPUSH
46480: LD_VAR 0 4
46484: PPUSH
46485: LD_VAR 0 5
46489: PPUSH
46490: CALL 47751 0 6
46494: GO 46572
46496: LD_INT 303
46498: DOUBLE
46499: EQUAL
46500: IFTRUE 46504
46502: GO 46541
46504: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
46505: LD_VAR 0 6
46509: PPUSH
46510: LD_VAR 0 7
46514: PPUSH
46515: LD_VAR 0 8
46519: PPUSH
46520: LD_VAR 0 9
46524: PPUSH
46525: LD_VAR 0 4
46529: PPUSH
46530: LD_VAR 0 5
46534: PPUSH
46535: CALL 46577 0 6
46539: GO 46572
46541: LD_INT 304
46543: DOUBLE
46544: EQUAL
46545: IFTRUE 46549
46547: GO 46571
46549: POP
// hHackTeleport ( unit , x , y ) ; end ;
46550: LD_VAR 0 2
46554: PPUSH
46555: LD_VAR 0 4
46559: PPUSH
46560: LD_VAR 0 5
46564: PPUSH
46565: CALL 48344 0 3
46569: GO 46572
46571: POP
// end ;
46572: LD_VAR 0 12
46576: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
46577: LD_INT 0
46579: PPUSH
46580: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
46581: LD_VAR 0 1
46585: PUSH
46586: LD_INT 1
46588: LESS
46589: PUSH
46590: LD_VAR 0 1
46594: PUSH
46595: LD_INT 3
46597: GREATER
46598: OR
46599: PUSH
46600: LD_VAR 0 5
46604: PPUSH
46605: LD_VAR 0 6
46609: PPUSH
46610: CALL_OW 428
46614: OR
46615: IFFALSE 46619
// exit ;
46617: GO 47347
// uc_side := your_side ;
46619: LD_ADDR_OWVAR 20
46623: PUSH
46624: LD_OWVAR 2
46628: ST_TO_ADDR
// uc_nation := nation ;
46629: LD_ADDR_OWVAR 21
46633: PUSH
46634: LD_VAR 0 1
46638: ST_TO_ADDR
// bc_level = 1 ;
46639: LD_ADDR_OWVAR 43
46643: PUSH
46644: LD_INT 1
46646: ST_TO_ADDR
// case btype of 1 :
46647: LD_VAR 0 2
46651: PUSH
46652: LD_INT 1
46654: DOUBLE
46655: EQUAL
46656: IFTRUE 46660
46658: GO 46671
46660: POP
// bc_type := b_depot ; 2 :
46661: LD_ADDR_OWVAR 42
46665: PUSH
46666: LD_INT 0
46668: ST_TO_ADDR
46669: GO 47291
46671: LD_INT 2
46673: DOUBLE
46674: EQUAL
46675: IFTRUE 46679
46677: GO 46690
46679: POP
// bc_type := b_warehouse ; 3 :
46680: LD_ADDR_OWVAR 42
46684: PUSH
46685: LD_INT 1
46687: ST_TO_ADDR
46688: GO 47291
46690: LD_INT 3
46692: DOUBLE
46693: EQUAL
46694: IFTRUE 46698
46696: GO 46709
46698: POP
// bc_type := b_lab ; 4 .. 9 :
46699: LD_ADDR_OWVAR 42
46703: PUSH
46704: LD_INT 6
46706: ST_TO_ADDR
46707: GO 47291
46709: LD_INT 4
46711: DOUBLE
46712: GREATEREQUAL
46713: IFFALSE 46721
46715: LD_INT 9
46717: DOUBLE
46718: LESSEQUAL
46719: IFTRUE 46723
46721: GO 46783
46723: POP
// begin bc_type := b_lab_half ;
46724: LD_ADDR_OWVAR 42
46728: PUSH
46729: LD_INT 7
46731: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
46732: LD_ADDR_OWVAR 44
46736: PUSH
46737: LD_INT 10
46739: PUSH
46740: LD_INT 11
46742: PUSH
46743: LD_INT 12
46745: PUSH
46746: LD_INT 15
46748: PUSH
46749: LD_INT 14
46751: PUSH
46752: LD_INT 13
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: PUSH
46763: LD_VAR 0 2
46767: PUSH
46768: LD_INT 3
46770: MINUS
46771: ARRAY
46772: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
46773: LD_ADDR_OWVAR 45
46777: PUSH
46778: LD_INT 9
46780: ST_TO_ADDR
// end ; 10 .. 13 :
46781: GO 47291
46783: LD_INT 10
46785: DOUBLE
46786: GREATEREQUAL
46787: IFFALSE 46795
46789: LD_INT 13
46791: DOUBLE
46792: LESSEQUAL
46793: IFTRUE 46797
46795: GO 46874
46797: POP
// begin bc_type := b_lab_full ;
46798: LD_ADDR_OWVAR 42
46802: PUSH
46803: LD_INT 8
46805: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
46806: LD_ADDR_OWVAR 44
46810: PUSH
46811: LD_INT 10
46813: PUSH
46814: LD_INT 12
46816: PUSH
46817: LD_INT 14
46819: PUSH
46820: LD_INT 13
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: PUSH
46829: LD_VAR 0 2
46833: PUSH
46834: LD_INT 9
46836: MINUS
46837: ARRAY
46838: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
46839: LD_ADDR_OWVAR 45
46843: PUSH
46844: LD_INT 11
46846: PUSH
46847: LD_INT 15
46849: PUSH
46850: LD_INT 12
46852: PUSH
46853: LD_INT 15
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: PUSH
46862: LD_VAR 0 2
46866: PUSH
46867: LD_INT 9
46869: MINUS
46870: ARRAY
46871: ST_TO_ADDR
// end ; 14 :
46872: GO 47291
46874: LD_INT 14
46876: DOUBLE
46877: EQUAL
46878: IFTRUE 46882
46880: GO 46893
46882: POP
// bc_type := b_workshop ; 15 :
46883: LD_ADDR_OWVAR 42
46887: PUSH
46888: LD_INT 2
46890: ST_TO_ADDR
46891: GO 47291
46893: LD_INT 15
46895: DOUBLE
46896: EQUAL
46897: IFTRUE 46901
46899: GO 46912
46901: POP
// bc_type := b_factory ; 16 :
46902: LD_ADDR_OWVAR 42
46906: PUSH
46907: LD_INT 3
46909: ST_TO_ADDR
46910: GO 47291
46912: LD_INT 16
46914: DOUBLE
46915: EQUAL
46916: IFTRUE 46920
46918: GO 46931
46920: POP
// bc_type := b_ext_gun ; 17 :
46921: LD_ADDR_OWVAR 42
46925: PUSH
46926: LD_INT 17
46928: ST_TO_ADDR
46929: GO 47291
46931: LD_INT 17
46933: DOUBLE
46934: EQUAL
46935: IFTRUE 46939
46937: GO 46967
46939: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
46940: LD_ADDR_OWVAR 42
46944: PUSH
46945: LD_INT 19
46947: PUSH
46948: LD_INT 23
46950: PUSH
46951: LD_INT 19
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: LIST
46958: PUSH
46959: LD_VAR 0 1
46963: ARRAY
46964: ST_TO_ADDR
46965: GO 47291
46967: LD_INT 18
46969: DOUBLE
46970: EQUAL
46971: IFTRUE 46975
46973: GO 46986
46975: POP
// bc_type := b_ext_radar ; 19 :
46976: LD_ADDR_OWVAR 42
46980: PUSH
46981: LD_INT 20
46983: ST_TO_ADDR
46984: GO 47291
46986: LD_INT 19
46988: DOUBLE
46989: EQUAL
46990: IFTRUE 46994
46992: GO 47005
46994: POP
// bc_type := b_ext_radio ; 20 :
46995: LD_ADDR_OWVAR 42
46999: PUSH
47000: LD_INT 22
47002: ST_TO_ADDR
47003: GO 47291
47005: LD_INT 20
47007: DOUBLE
47008: EQUAL
47009: IFTRUE 47013
47011: GO 47024
47013: POP
// bc_type := b_ext_siberium ; 21 :
47014: LD_ADDR_OWVAR 42
47018: PUSH
47019: LD_INT 21
47021: ST_TO_ADDR
47022: GO 47291
47024: LD_INT 21
47026: DOUBLE
47027: EQUAL
47028: IFTRUE 47032
47030: GO 47043
47032: POP
// bc_type := b_ext_computer ; 22 :
47033: LD_ADDR_OWVAR 42
47037: PUSH
47038: LD_INT 24
47040: ST_TO_ADDR
47041: GO 47291
47043: LD_INT 22
47045: DOUBLE
47046: EQUAL
47047: IFTRUE 47051
47049: GO 47062
47051: POP
// bc_type := b_ext_track ; 23 :
47052: LD_ADDR_OWVAR 42
47056: PUSH
47057: LD_INT 16
47059: ST_TO_ADDR
47060: GO 47291
47062: LD_INT 23
47064: DOUBLE
47065: EQUAL
47066: IFTRUE 47070
47068: GO 47081
47070: POP
// bc_type := b_ext_laser ; 24 :
47071: LD_ADDR_OWVAR 42
47075: PUSH
47076: LD_INT 25
47078: ST_TO_ADDR
47079: GO 47291
47081: LD_INT 24
47083: DOUBLE
47084: EQUAL
47085: IFTRUE 47089
47087: GO 47100
47089: POP
// bc_type := b_control_tower ; 25 :
47090: LD_ADDR_OWVAR 42
47094: PUSH
47095: LD_INT 36
47097: ST_TO_ADDR
47098: GO 47291
47100: LD_INT 25
47102: DOUBLE
47103: EQUAL
47104: IFTRUE 47108
47106: GO 47119
47108: POP
// bc_type := b_breastwork ; 26 :
47109: LD_ADDR_OWVAR 42
47113: PUSH
47114: LD_INT 31
47116: ST_TO_ADDR
47117: GO 47291
47119: LD_INT 26
47121: DOUBLE
47122: EQUAL
47123: IFTRUE 47127
47125: GO 47138
47127: POP
// bc_type := b_bunker ; 27 :
47128: LD_ADDR_OWVAR 42
47132: PUSH
47133: LD_INT 32
47135: ST_TO_ADDR
47136: GO 47291
47138: LD_INT 27
47140: DOUBLE
47141: EQUAL
47142: IFTRUE 47146
47144: GO 47157
47146: POP
// bc_type := b_turret ; 28 :
47147: LD_ADDR_OWVAR 42
47151: PUSH
47152: LD_INT 33
47154: ST_TO_ADDR
47155: GO 47291
47157: LD_INT 28
47159: DOUBLE
47160: EQUAL
47161: IFTRUE 47165
47163: GO 47176
47165: POP
// bc_type := b_armoury ; 29 :
47166: LD_ADDR_OWVAR 42
47170: PUSH
47171: LD_INT 4
47173: ST_TO_ADDR
47174: GO 47291
47176: LD_INT 29
47178: DOUBLE
47179: EQUAL
47180: IFTRUE 47184
47182: GO 47195
47184: POP
// bc_type := b_barracks ; 30 :
47185: LD_ADDR_OWVAR 42
47189: PUSH
47190: LD_INT 5
47192: ST_TO_ADDR
47193: GO 47291
47195: LD_INT 30
47197: DOUBLE
47198: EQUAL
47199: IFTRUE 47203
47201: GO 47214
47203: POP
// bc_type := b_solar_power ; 31 :
47204: LD_ADDR_OWVAR 42
47208: PUSH
47209: LD_INT 27
47211: ST_TO_ADDR
47212: GO 47291
47214: LD_INT 31
47216: DOUBLE
47217: EQUAL
47218: IFTRUE 47222
47220: GO 47233
47222: POP
// bc_type := b_oil_power ; 32 :
47223: LD_ADDR_OWVAR 42
47227: PUSH
47228: LD_INT 26
47230: ST_TO_ADDR
47231: GO 47291
47233: LD_INT 32
47235: DOUBLE
47236: EQUAL
47237: IFTRUE 47241
47239: GO 47252
47241: POP
// bc_type := b_siberite_power ; 33 :
47242: LD_ADDR_OWVAR 42
47246: PUSH
47247: LD_INT 28
47249: ST_TO_ADDR
47250: GO 47291
47252: LD_INT 33
47254: DOUBLE
47255: EQUAL
47256: IFTRUE 47260
47258: GO 47271
47260: POP
// bc_type := b_oil_mine ; 34 :
47261: LD_ADDR_OWVAR 42
47265: PUSH
47266: LD_INT 29
47268: ST_TO_ADDR
47269: GO 47291
47271: LD_INT 34
47273: DOUBLE
47274: EQUAL
47275: IFTRUE 47279
47277: GO 47290
47279: POP
// bc_type := b_siberite_mine ; end ;
47280: LD_ADDR_OWVAR 42
47284: PUSH
47285: LD_INT 30
47287: ST_TO_ADDR
47288: GO 47291
47290: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47291: LD_ADDR_VAR 0 8
47295: PUSH
47296: LD_VAR 0 5
47300: PPUSH
47301: LD_VAR 0 6
47305: PPUSH
47306: LD_VAR 0 3
47310: PPUSH
47311: CALL_OW 47
47315: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
47316: LD_OWVAR 42
47320: PUSH
47321: LD_INT 32
47323: PUSH
47324: LD_INT 33
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: IN
47331: IFFALSE 47347
// PlaceWeaponTurret ( b , weapon ) ;
47333: LD_VAR 0 8
47337: PPUSH
47338: LD_VAR 0 4
47342: PPUSH
47343: CALL_OW 431
// end ;
47347: LD_VAR 0 7
47351: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
47352: LD_INT 0
47354: PPUSH
47355: PPUSH
47356: PPUSH
47357: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47358: LD_ADDR_VAR 0 4
47362: PUSH
47363: LD_INT 22
47365: PUSH
47366: LD_OWVAR 2
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 2
47377: PUSH
47378: LD_INT 30
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 30
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: LIST
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PPUSH
47407: CALL_OW 69
47411: ST_TO_ADDR
// if not tmp then
47412: LD_VAR 0 4
47416: NOT
47417: IFFALSE 47421
// exit ;
47419: GO 47480
// for i in tmp do
47421: LD_ADDR_VAR 0 2
47425: PUSH
47426: LD_VAR 0 4
47430: PUSH
47431: FOR_IN
47432: IFFALSE 47478
// for j = 1 to 3 do
47434: LD_ADDR_VAR 0 3
47438: PUSH
47439: DOUBLE
47440: LD_INT 1
47442: DEC
47443: ST_TO_ADDR
47444: LD_INT 3
47446: PUSH
47447: FOR_TO
47448: IFFALSE 47474
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
47450: LD_VAR 0 2
47454: PPUSH
47455: CALL_OW 274
47459: PPUSH
47460: LD_VAR 0 3
47464: PPUSH
47465: LD_INT 99999
47467: PPUSH
47468: CALL_OW 277
47472: GO 47447
47474: POP
47475: POP
47476: GO 47431
47478: POP
47479: POP
// end ;
47480: LD_VAR 0 1
47484: RET
// export function hHackSetLevel10 ; var i , j ; begin
47485: LD_INT 0
47487: PPUSH
47488: PPUSH
47489: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
47490: LD_ADDR_VAR 0 2
47494: PUSH
47495: LD_INT 21
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PPUSH
47505: CALL_OW 69
47509: PUSH
47510: FOR_IN
47511: IFFALSE 47563
// if IsSelected ( i ) then
47513: LD_VAR 0 2
47517: PPUSH
47518: CALL_OW 306
47522: IFFALSE 47561
// begin for j := 1 to 4 do
47524: LD_ADDR_VAR 0 3
47528: PUSH
47529: DOUBLE
47530: LD_INT 1
47532: DEC
47533: ST_TO_ADDR
47534: LD_INT 4
47536: PUSH
47537: FOR_TO
47538: IFFALSE 47559
// SetSkill ( i , j , 10 ) ;
47540: LD_VAR 0 2
47544: PPUSH
47545: LD_VAR 0 3
47549: PPUSH
47550: LD_INT 10
47552: PPUSH
47553: CALL_OW 237
47557: GO 47537
47559: POP
47560: POP
// end ;
47561: GO 47510
47563: POP
47564: POP
// end ;
47565: LD_VAR 0 1
47569: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
47570: LD_INT 0
47572: PPUSH
47573: PPUSH
47574: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
47575: LD_ADDR_VAR 0 2
47579: PUSH
47580: LD_INT 22
47582: PUSH
47583: LD_OWVAR 2
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 21
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PPUSH
47606: CALL_OW 69
47610: PUSH
47611: FOR_IN
47612: IFFALSE 47653
// begin for j := 1 to 4 do
47614: LD_ADDR_VAR 0 3
47618: PUSH
47619: DOUBLE
47620: LD_INT 1
47622: DEC
47623: ST_TO_ADDR
47624: LD_INT 4
47626: PUSH
47627: FOR_TO
47628: IFFALSE 47649
// SetSkill ( i , j , 10 ) ;
47630: LD_VAR 0 2
47634: PPUSH
47635: LD_VAR 0 3
47639: PPUSH
47640: LD_INT 10
47642: PPUSH
47643: CALL_OW 237
47647: GO 47627
47649: POP
47650: POP
// end ;
47651: GO 47611
47653: POP
47654: POP
// end ;
47655: LD_VAR 0 1
47659: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
47660: LD_INT 0
47662: PPUSH
// uc_side := your_side ;
47663: LD_ADDR_OWVAR 20
47667: PUSH
47668: LD_OWVAR 2
47672: ST_TO_ADDR
// uc_nation := nation ;
47673: LD_ADDR_OWVAR 21
47677: PUSH
47678: LD_VAR 0 1
47682: ST_TO_ADDR
// InitHc ;
47683: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
47687: LD_INT 0
47689: PPUSH
47690: LD_VAR 0 2
47694: PPUSH
47695: LD_VAR 0 3
47699: PPUSH
47700: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
47704: LD_VAR 0 4
47708: PPUSH
47709: LD_VAR 0 5
47713: PPUSH
47714: CALL_OW 428
47718: PUSH
47719: LD_INT 0
47721: EQUAL
47722: IFFALSE 47746
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
47724: CALL_OW 44
47728: PPUSH
47729: LD_VAR 0 4
47733: PPUSH
47734: LD_VAR 0 5
47738: PPUSH
47739: LD_INT 1
47741: PPUSH
47742: CALL_OW 48
// end ;
47746: LD_VAR 0 6
47750: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
47751: LD_INT 0
47753: PPUSH
47754: PPUSH
// uc_side := your_side ;
47755: LD_ADDR_OWVAR 20
47759: PUSH
47760: LD_OWVAR 2
47764: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
47765: LD_VAR 0 1
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: LD_INT 3
47778: PUSH
47779: LD_INT 4
47781: PUSH
47782: LD_INT 5
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: IN
47792: IFFALSE 47804
// uc_nation := nation_american else
47794: LD_ADDR_OWVAR 21
47798: PUSH
47799: LD_INT 1
47801: ST_TO_ADDR
47802: GO 47847
// if chassis in [ 11 , 12 , 13 , 14 ] then
47804: LD_VAR 0 1
47808: PUSH
47809: LD_INT 11
47811: PUSH
47812: LD_INT 12
47814: PUSH
47815: LD_INT 13
47817: PUSH
47818: LD_INT 14
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: IN
47827: IFFALSE 47839
// uc_nation := nation_arabian else
47829: LD_ADDR_OWVAR 21
47833: PUSH
47834: LD_INT 2
47836: ST_TO_ADDR
47837: GO 47847
// uc_nation := nation_russian ;
47839: LD_ADDR_OWVAR 21
47843: PUSH
47844: LD_INT 3
47846: ST_TO_ADDR
// vc_chassis := chassis ;
47847: LD_ADDR_OWVAR 37
47851: PUSH
47852: LD_VAR 0 1
47856: ST_TO_ADDR
// vc_engine := engine ;
47857: LD_ADDR_OWVAR 39
47861: PUSH
47862: LD_VAR 0 2
47866: ST_TO_ADDR
// vc_control := control ;
47867: LD_ADDR_OWVAR 38
47871: PUSH
47872: LD_VAR 0 3
47876: ST_TO_ADDR
// vc_weapon := weapon ;
47877: LD_ADDR_OWVAR 40
47881: PUSH
47882: LD_VAR 0 4
47886: ST_TO_ADDR
// un := CreateVehicle ;
47887: LD_ADDR_VAR 0 8
47891: PUSH
47892: CALL_OW 45
47896: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
47897: LD_VAR 0 8
47901: PPUSH
47902: LD_INT 0
47904: PPUSH
47905: LD_INT 5
47907: PPUSH
47908: CALL_OW 12
47912: PPUSH
47913: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
47917: LD_VAR 0 8
47921: PPUSH
47922: LD_VAR 0 5
47926: PPUSH
47927: LD_VAR 0 6
47931: PPUSH
47932: LD_INT 1
47934: PPUSH
47935: CALL_OW 48
// end ;
47939: LD_VAR 0 7
47943: RET
// export hInvincible ; every 1 do
47944: GO 47946
47946: DISABLE
// hInvincible := [ ] ;
47947: LD_ADDR_EXP 144
47951: PUSH
47952: EMPTY
47953: ST_TO_ADDR
47954: END
// every 10 do var i ;
47955: GO 47957
47957: DISABLE
47958: LD_INT 0
47960: PPUSH
// begin enable ;
47961: ENABLE
// if not hInvincible then
47962: LD_EXP 144
47966: NOT
47967: IFFALSE 47971
// exit ;
47969: GO 48015
// for i in hInvincible do
47971: LD_ADDR_VAR 0 1
47975: PUSH
47976: LD_EXP 144
47980: PUSH
47981: FOR_IN
47982: IFFALSE 48013
// if GetLives ( i ) < 1000 then
47984: LD_VAR 0 1
47988: PPUSH
47989: CALL_OW 256
47993: PUSH
47994: LD_INT 1000
47996: LESS
47997: IFFALSE 48011
// SetLives ( i , 1000 ) ;
47999: LD_VAR 0 1
48003: PPUSH
48004: LD_INT 1000
48006: PPUSH
48007: CALL_OW 234
48011: GO 47981
48013: POP
48014: POP
// end ;
48015: PPOPN 1
48017: END
// export function hHackInvincible ; var i ; begin
48018: LD_INT 0
48020: PPUSH
48021: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
48022: LD_ADDR_VAR 0 2
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: LD_INT 21
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 21
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: LIST
48054: PPUSH
48055: CALL_OW 69
48059: PUSH
48060: FOR_IN
48061: IFFALSE 48122
// if IsSelected ( i ) then
48063: LD_VAR 0 2
48067: PPUSH
48068: CALL_OW 306
48072: IFFALSE 48120
// begin if i in hInvincible then
48074: LD_VAR 0 2
48078: PUSH
48079: LD_EXP 144
48083: IN
48084: IFFALSE 48104
// hInvincible := hInvincible diff i else
48086: LD_ADDR_EXP 144
48090: PUSH
48091: LD_EXP 144
48095: PUSH
48096: LD_VAR 0 2
48100: DIFF
48101: ST_TO_ADDR
48102: GO 48120
// hInvincible := hInvincible union i ;
48104: LD_ADDR_EXP 144
48108: PUSH
48109: LD_EXP 144
48113: PUSH
48114: LD_VAR 0 2
48118: UNION
48119: ST_TO_ADDR
// end ;
48120: GO 48060
48122: POP
48123: POP
// end ;
48124: LD_VAR 0 1
48128: RET
// export function hHackInvisible ; var i , j ; begin
48129: LD_INT 0
48131: PPUSH
48132: PPUSH
48133: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
48134: LD_ADDR_VAR 0 2
48138: PUSH
48139: LD_INT 21
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PPUSH
48149: CALL_OW 69
48153: PUSH
48154: FOR_IN
48155: IFFALSE 48179
// if IsSelected ( i ) then
48157: LD_VAR 0 2
48161: PPUSH
48162: CALL_OW 306
48166: IFFALSE 48177
// ComForceInvisible ( i ) ;
48168: LD_VAR 0 2
48172: PPUSH
48173: CALL_OW 496
48177: GO 48154
48179: POP
48180: POP
// end ;
48181: LD_VAR 0 1
48185: RET
// export function hHackChangeYourSide ; begin
48186: LD_INT 0
48188: PPUSH
// if your_side = 8 then
48189: LD_OWVAR 2
48193: PUSH
48194: LD_INT 8
48196: EQUAL
48197: IFFALSE 48209
// your_side := 0 else
48199: LD_ADDR_OWVAR 2
48203: PUSH
48204: LD_INT 0
48206: ST_TO_ADDR
48207: GO 48223
// your_side := your_side + 1 ;
48209: LD_ADDR_OWVAR 2
48213: PUSH
48214: LD_OWVAR 2
48218: PUSH
48219: LD_INT 1
48221: PLUS
48222: ST_TO_ADDR
// end ;
48223: LD_VAR 0 1
48227: RET
// export function hHackChangeUnitSide ; var i , j ; begin
48228: LD_INT 0
48230: PPUSH
48231: PPUSH
48232: PPUSH
// for i in all_units do
48233: LD_ADDR_VAR 0 2
48237: PUSH
48238: LD_OWVAR 3
48242: PUSH
48243: FOR_IN
48244: IFFALSE 48322
// if IsSelected ( i ) then
48246: LD_VAR 0 2
48250: PPUSH
48251: CALL_OW 306
48255: IFFALSE 48320
// begin j := GetSide ( i ) ;
48257: LD_ADDR_VAR 0 3
48261: PUSH
48262: LD_VAR 0 2
48266: PPUSH
48267: CALL_OW 255
48271: ST_TO_ADDR
// if j = 8 then
48272: LD_VAR 0 3
48276: PUSH
48277: LD_INT 8
48279: EQUAL
48280: IFFALSE 48292
// j := 0 else
48282: LD_ADDR_VAR 0 3
48286: PUSH
48287: LD_INT 0
48289: ST_TO_ADDR
48290: GO 48306
// j := j + 1 ;
48292: LD_ADDR_VAR 0 3
48296: PUSH
48297: LD_VAR 0 3
48301: PUSH
48302: LD_INT 1
48304: PLUS
48305: ST_TO_ADDR
// SetSide ( i , j ) ;
48306: LD_VAR 0 2
48310: PPUSH
48311: LD_VAR 0 3
48315: PPUSH
48316: CALL_OW 235
// end ;
48320: GO 48243
48322: POP
48323: POP
// end ;
48324: LD_VAR 0 1
48328: RET
// export function hHackFog ; begin
48329: LD_INT 0
48331: PPUSH
// FogOff ( true ) ;
48332: LD_INT 1
48334: PPUSH
48335: CALL_OW 344
// end ;
48339: LD_VAR 0 1
48343: RET
// export function hHackTeleport ( unit , x , y ) ; begin
48344: LD_INT 0
48346: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
48347: LD_VAR 0 1
48351: PPUSH
48352: LD_VAR 0 2
48356: PPUSH
48357: LD_VAR 0 3
48361: PPUSH
48362: LD_INT 1
48364: PPUSH
48365: LD_INT 1
48367: PPUSH
48368: CALL_OW 483
// CenterOnXY ( x , y ) ;
48372: LD_VAR 0 2
48376: PPUSH
48377: LD_VAR 0 3
48381: PPUSH
48382: CALL_OW 84
// end ;
48386: LD_VAR 0 4
48390: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
48391: LD_INT 0
48393: PPUSH
48394: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
48395: LD_VAR 0 1
48399: NOT
48400: PUSH
48401: LD_VAR 0 2
48405: PPUSH
48406: LD_VAR 0 3
48410: PPUSH
48411: CALL_OW 488
48415: NOT
48416: OR
48417: PUSH
48418: LD_VAR 0 1
48422: PPUSH
48423: CALL_OW 266
48427: PUSH
48428: LD_INT 3
48430: NONEQUAL
48431: PUSH
48432: LD_VAR 0 1
48436: PPUSH
48437: CALL_OW 247
48441: PUSH
48442: LD_INT 1
48444: EQUAL
48445: NOT
48446: AND
48447: OR
48448: IFFALSE 48452
// exit ;
48450: GO 48601
// if GetType ( factory ) = unit_human then
48452: LD_VAR 0 1
48456: PPUSH
48457: CALL_OW 247
48461: PUSH
48462: LD_INT 1
48464: EQUAL
48465: IFFALSE 48482
// factory := IsInUnit ( factory ) ;
48467: LD_ADDR_VAR 0 1
48471: PUSH
48472: LD_VAR 0 1
48476: PPUSH
48477: CALL_OW 310
48481: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
48482: LD_VAR 0 1
48486: PPUSH
48487: CALL_OW 266
48491: PUSH
48492: LD_INT 3
48494: NONEQUAL
48495: IFFALSE 48499
// exit ;
48497: GO 48601
// if HexInfo ( x , y ) = factory then
48499: LD_VAR 0 2
48503: PPUSH
48504: LD_VAR 0 3
48508: PPUSH
48509: CALL_OW 428
48513: PUSH
48514: LD_VAR 0 1
48518: EQUAL
48519: IFFALSE 48546
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
48521: LD_ADDR_EXP 145
48525: PUSH
48526: LD_EXP 145
48530: PPUSH
48531: LD_VAR 0 1
48535: PPUSH
48536: LD_INT 0
48538: PPUSH
48539: CALL_OW 1
48543: ST_TO_ADDR
48544: GO 48597
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
48546: LD_ADDR_EXP 145
48550: PUSH
48551: LD_EXP 145
48555: PPUSH
48556: LD_VAR 0 1
48560: PPUSH
48561: LD_VAR 0 1
48565: PPUSH
48566: CALL_OW 255
48570: PUSH
48571: LD_VAR 0 1
48575: PUSH
48576: LD_VAR 0 2
48580: PUSH
48581: LD_VAR 0 3
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: PPUSH
48592: CALL_OW 1
48596: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48597: CALL 48606 0 0
// end ;
48601: LD_VAR 0 4
48605: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
48606: LD_INT 0
48608: PPUSH
48609: PPUSH
48610: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
48611: LD_STRING resetFactoryWaypoint();
48613: PPUSH
48614: CALL_OW 559
// if factoryWaypoints then
48618: LD_EXP 145
48622: IFFALSE 48748
// begin list := PrepareArray ( factoryWaypoints ) ;
48624: LD_ADDR_VAR 0 3
48628: PUSH
48629: LD_EXP 145
48633: PPUSH
48634: CALL 96045 0 1
48638: ST_TO_ADDR
// for i := 1 to list do
48639: LD_ADDR_VAR 0 2
48643: PUSH
48644: DOUBLE
48645: LD_INT 1
48647: DEC
48648: ST_TO_ADDR
48649: LD_VAR 0 3
48653: PUSH
48654: FOR_TO
48655: IFFALSE 48746
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48657: LD_STRING setFactoryWaypointXY(
48659: PUSH
48660: LD_VAR 0 3
48664: PUSH
48665: LD_VAR 0 2
48669: ARRAY
48670: PUSH
48671: LD_INT 1
48673: ARRAY
48674: STR
48675: PUSH
48676: LD_STRING ,
48678: STR
48679: PUSH
48680: LD_VAR 0 3
48684: PUSH
48685: LD_VAR 0 2
48689: ARRAY
48690: PUSH
48691: LD_INT 2
48693: ARRAY
48694: STR
48695: PUSH
48696: LD_STRING ,
48698: STR
48699: PUSH
48700: LD_VAR 0 3
48704: PUSH
48705: LD_VAR 0 2
48709: ARRAY
48710: PUSH
48711: LD_INT 3
48713: ARRAY
48714: STR
48715: PUSH
48716: LD_STRING ,
48718: STR
48719: PUSH
48720: LD_VAR 0 3
48724: PUSH
48725: LD_VAR 0 2
48729: ARRAY
48730: PUSH
48731: LD_INT 4
48733: ARRAY
48734: STR
48735: PUSH
48736: LD_STRING )
48738: STR
48739: PPUSH
48740: CALL_OW 559
48744: GO 48654
48746: POP
48747: POP
// end ; end ;
48748: LD_VAR 0 1
48752: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
48753: LD_INT 0
48755: PPUSH
// if HexInfo ( x , y ) = warehouse then
48756: LD_VAR 0 2
48760: PPUSH
48761: LD_VAR 0 3
48765: PPUSH
48766: CALL_OW 428
48770: PUSH
48771: LD_VAR 0 1
48775: EQUAL
48776: IFFALSE 48803
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
48778: LD_ADDR_EXP 146
48782: PUSH
48783: LD_EXP 146
48787: PPUSH
48788: LD_VAR 0 1
48792: PPUSH
48793: LD_INT 0
48795: PPUSH
48796: CALL_OW 1
48800: ST_TO_ADDR
48801: GO 48854
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
48803: LD_ADDR_EXP 146
48807: PUSH
48808: LD_EXP 146
48812: PPUSH
48813: LD_VAR 0 1
48817: PPUSH
48818: LD_VAR 0 1
48822: PPUSH
48823: CALL_OW 255
48827: PUSH
48828: LD_VAR 0 1
48832: PUSH
48833: LD_VAR 0 2
48837: PUSH
48838: LD_VAR 0 3
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: PPUSH
48849: CALL_OW 1
48853: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
48854: CALL 48863 0 0
// end ;
48858: LD_VAR 0 4
48862: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
48863: LD_INT 0
48865: PPUSH
48866: PPUSH
48867: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
48868: LD_STRING resetWarehouseGatheringPoints();
48870: PPUSH
48871: CALL_OW 559
// if warehouseGatheringPoints then
48875: LD_EXP 146
48879: IFFALSE 49005
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
48881: LD_ADDR_VAR 0 3
48885: PUSH
48886: LD_EXP 146
48890: PPUSH
48891: CALL 96045 0 1
48895: ST_TO_ADDR
// for i := 1 to list do
48896: LD_ADDR_VAR 0 2
48900: PUSH
48901: DOUBLE
48902: LD_INT 1
48904: DEC
48905: ST_TO_ADDR
48906: LD_VAR 0 3
48910: PUSH
48911: FOR_TO
48912: IFFALSE 49003
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48914: LD_STRING setWarehouseGatheringPointXY(
48916: PUSH
48917: LD_VAR 0 3
48921: PUSH
48922: LD_VAR 0 2
48926: ARRAY
48927: PUSH
48928: LD_INT 1
48930: ARRAY
48931: STR
48932: PUSH
48933: LD_STRING ,
48935: STR
48936: PUSH
48937: LD_VAR 0 3
48941: PUSH
48942: LD_VAR 0 2
48946: ARRAY
48947: PUSH
48948: LD_INT 2
48950: ARRAY
48951: STR
48952: PUSH
48953: LD_STRING ,
48955: STR
48956: PUSH
48957: LD_VAR 0 3
48961: PUSH
48962: LD_VAR 0 2
48966: ARRAY
48967: PUSH
48968: LD_INT 3
48970: ARRAY
48971: STR
48972: PUSH
48973: LD_STRING ,
48975: STR
48976: PUSH
48977: LD_VAR 0 3
48981: PUSH
48982: LD_VAR 0 2
48986: ARRAY
48987: PUSH
48988: LD_INT 4
48990: ARRAY
48991: STR
48992: PUSH
48993: LD_STRING )
48995: STR
48996: PPUSH
48997: CALL_OW 559
49001: GO 48911
49003: POP
49004: POP
// end ; end ;
49005: LD_VAR 0 1
49009: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
49010: LD_EXP 146
49014: IFFALSE 49699
49016: GO 49018
49018: DISABLE
49019: LD_INT 0
49021: PPUSH
49022: PPUSH
49023: PPUSH
49024: PPUSH
49025: PPUSH
49026: PPUSH
49027: PPUSH
49028: PPUSH
49029: PPUSH
// begin enable ;
49030: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
49031: LD_ADDR_VAR 0 3
49035: PUSH
49036: LD_EXP 146
49040: PPUSH
49041: CALL 96045 0 1
49045: ST_TO_ADDR
// if not list then
49046: LD_VAR 0 3
49050: NOT
49051: IFFALSE 49055
// exit ;
49053: GO 49699
// for i := 1 to list do
49055: LD_ADDR_VAR 0 1
49059: PUSH
49060: DOUBLE
49061: LD_INT 1
49063: DEC
49064: ST_TO_ADDR
49065: LD_VAR 0 3
49069: PUSH
49070: FOR_TO
49071: IFFALSE 49697
// begin depot := list [ i ] [ 2 ] ;
49073: LD_ADDR_VAR 0 8
49077: PUSH
49078: LD_VAR 0 3
49082: PUSH
49083: LD_VAR 0 1
49087: ARRAY
49088: PUSH
49089: LD_INT 2
49091: ARRAY
49092: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
49093: LD_ADDR_VAR 0 5
49097: PUSH
49098: LD_VAR 0 3
49102: PUSH
49103: LD_VAR 0 1
49107: ARRAY
49108: PUSH
49109: LD_INT 1
49111: ARRAY
49112: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
49113: LD_VAR 0 8
49117: PPUSH
49118: CALL_OW 301
49122: PUSH
49123: LD_VAR 0 5
49127: PUSH
49128: LD_VAR 0 8
49132: PPUSH
49133: CALL_OW 255
49137: NONEQUAL
49138: OR
49139: IFFALSE 49168
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
49141: LD_ADDR_EXP 146
49145: PUSH
49146: LD_EXP 146
49150: PPUSH
49151: LD_VAR 0 8
49155: PPUSH
49156: LD_INT 0
49158: PPUSH
49159: CALL_OW 1
49163: ST_TO_ADDR
// exit ;
49164: POP
49165: POP
49166: GO 49699
// end ; x := list [ i ] [ 3 ] ;
49168: LD_ADDR_VAR 0 6
49172: PUSH
49173: LD_VAR 0 3
49177: PUSH
49178: LD_VAR 0 1
49182: ARRAY
49183: PUSH
49184: LD_INT 3
49186: ARRAY
49187: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
49188: LD_ADDR_VAR 0 7
49192: PUSH
49193: LD_VAR 0 3
49197: PUSH
49198: LD_VAR 0 1
49202: ARRAY
49203: PUSH
49204: LD_INT 4
49206: ARRAY
49207: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
49208: LD_ADDR_VAR 0 9
49212: PUSH
49213: LD_VAR 0 6
49217: PPUSH
49218: LD_VAR 0 7
49222: PPUSH
49223: LD_INT 16
49225: PPUSH
49226: CALL 94633 0 3
49230: ST_TO_ADDR
// if not cratesNearbyPoint then
49231: LD_VAR 0 9
49235: NOT
49236: IFFALSE 49242
// exit ;
49238: POP
49239: POP
49240: GO 49699
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
49242: LD_ADDR_VAR 0 4
49246: PUSH
49247: LD_INT 22
49249: PUSH
49250: LD_VAR 0 5
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 3
49261: PUSH
49262: LD_INT 60
49264: PUSH
49265: EMPTY
49266: LIST
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 91
49274: PUSH
49275: LD_VAR 0 8
49279: PUSH
49280: LD_INT 6
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: LD_INT 25
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 25
49303: PUSH
49304: LD_INT 16
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: LIST
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: PPUSH
49322: CALL_OW 69
49326: PUSH
49327: LD_VAR 0 8
49331: PPUSH
49332: CALL_OW 313
49336: PPUSH
49337: LD_INT 3
49339: PUSH
49340: LD_INT 60
49342: PUSH
49343: EMPTY
49344: LIST
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 25
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 25
49365: PUSH
49366: LD_INT 16
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: LIST
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PPUSH
49382: CALL_OW 72
49386: UNION
49387: ST_TO_ADDR
// if tmp then
49388: LD_VAR 0 4
49392: IFFALSE 49472
// begin tmp := ShrinkArray ( tmp , 3 ) ;
49394: LD_ADDR_VAR 0 4
49398: PUSH
49399: LD_VAR 0 4
49403: PPUSH
49404: LD_INT 3
49406: PPUSH
49407: CALL 92602 0 2
49411: ST_TO_ADDR
// for j in tmp do
49412: LD_ADDR_VAR 0 2
49416: PUSH
49417: LD_VAR 0 4
49421: PUSH
49422: FOR_IN
49423: IFFALSE 49466
// begin if IsInUnit ( j ) then
49425: LD_VAR 0 2
49429: PPUSH
49430: CALL_OW 310
49434: IFFALSE 49445
// ComExit ( j ) ;
49436: LD_VAR 0 2
49440: PPUSH
49441: CALL 92685 0 1
// AddComCollect ( j , x , y ) ;
49445: LD_VAR 0 2
49449: PPUSH
49450: LD_VAR 0 6
49454: PPUSH
49455: LD_VAR 0 7
49459: PPUSH
49460: CALL_OW 177
// end ;
49464: GO 49422
49466: POP
49467: POP
// exit ;
49468: POP
49469: POP
49470: GO 49699
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
49472: LD_ADDR_VAR 0 4
49476: PUSH
49477: LD_INT 22
49479: PUSH
49480: LD_VAR 0 5
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 91
49491: PUSH
49492: LD_VAR 0 8
49496: PUSH
49497: LD_INT 8
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: LD_INT 34
49510: PUSH
49511: LD_INT 12
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 34
49520: PUSH
49521: LD_INT 51
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 34
49530: PUSH
49531: LD_INT 32
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 34
49540: PUSH
49541: LD_INT 89
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: LIST
49559: PPUSH
49560: CALL_OW 69
49564: ST_TO_ADDR
// if tmp then
49565: LD_VAR 0 4
49569: IFFALSE 49695
// begin for j in tmp do
49571: LD_ADDR_VAR 0 2
49575: PUSH
49576: LD_VAR 0 4
49580: PUSH
49581: FOR_IN
49582: IFFALSE 49693
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
49584: LD_VAR 0 2
49588: PPUSH
49589: CALL_OW 262
49593: PUSH
49594: LD_INT 3
49596: EQUAL
49597: PUSH
49598: LD_VAR 0 2
49602: PPUSH
49603: CALL_OW 261
49607: PUSH
49608: LD_INT 20
49610: GREATER
49611: OR
49612: PUSH
49613: LD_VAR 0 2
49617: PPUSH
49618: CALL_OW 314
49622: NOT
49623: AND
49624: PUSH
49625: LD_VAR 0 2
49629: PPUSH
49630: CALL_OW 263
49634: PUSH
49635: LD_INT 1
49637: NONEQUAL
49638: PUSH
49639: LD_VAR 0 2
49643: PPUSH
49644: CALL_OW 311
49648: OR
49649: AND
49650: IFFALSE 49691
// begin ComCollect ( j , x , y ) ;
49652: LD_VAR 0 2
49656: PPUSH
49657: LD_VAR 0 6
49661: PPUSH
49662: LD_VAR 0 7
49666: PPUSH
49667: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
49671: LD_VAR 0 2
49675: PPUSH
49676: LD_VAR 0 8
49680: PPUSH
49681: CALL_OW 172
// exit ;
49685: POP
49686: POP
49687: POP
49688: POP
49689: GO 49699
// end ;
49691: GO 49581
49693: POP
49694: POP
// end ; end ;
49695: GO 49070
49697: POP
49698: POP
// end ; end_of_file
49699: PPOPN 9
49701: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
49702: LD_INT 0
49704: PPUSH
49705: PPUSH
49706: PPUSH
49707: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
49708: LD_VAR 0 1
49712: PPUSH
49713: CALL_OW 264
49717: PUSH
49718: LD_INT 91
49720: EQUAL
49721: IFFALSE 49793
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
49723: LD_INT 68
49725: PPUSH
49726: LD_VAR 0 1
49730: PPUSH
49731: CALL_OW 255
49735: PPUSH
49736: CALL_OW 321
49740: PUSH
49741: LD_INT 2
49743: EQUAL
49744: IFFALSE 49756
// eff := 70 else
49746: LD_ADDR_VAR 0 4
49750: PUSH
49751: LD_INT 70
49753: ST_TO_ADDR
49754: GO 49764
// eff := 30 ;
49756: LD_ADDR_VAR 0 4
49760: PUSH
49761: LD_INT 30
49763: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
49764: LD_VAR 0 1
49768: PPUSH
49769: CALL_OW 250
49773: PPUSH
49774: LD_VAR 0 1
49778: PPUSH
49779: CALL_OW 251
49783: PPUSH
49784: LD_VAR 0 4
49788: PPUSH
49789: CALL_OW 495
// end ; end ;
49793: LD_VAR 0 2
49797: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
49798: LD_INT 0
49800: PPUSH
// end ;
49801: LD_VAR 0 4
49805: RET
// export function SOS_Command ( cmd ) ; begin
49806: LD_INT 0
49808: PPUSH
// end ;
49809: LD_VAR 0 2
49813: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
49814: LD_INT 0
49816: PPUSH
// end ;
49817: LD_VAR 0 6
49821: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
49822: LD_INT 0
49824: PPUSH
49825: PPUSH
// if not vehicle or not factory then
49826: LD_VAR 0 1
49830: NOT
49831: PUSH
49832: LD_VAR 0 2
49836: NOT
49837: OR
49838: IFFALSE 49842
// exit ;
49840: GO 50073
// if factoryWaypoints >= factory then
49842: LD_EXP 145
49846: PUSH
49847: LD_VAR 0 2
49851: GREATEREQUAL
49852: IFFALSE 50073
// if factoryWaypoints [ factory ] then
49854: LD_EXP 145
49858: PUSH
49859: LD_VAR 0 2
49863: ARRAY
49864: IFFALSE 50073
// begin if GetControl ( vehicle ) = control_manual then
49866: LD_VAR 0 1
49870: PPUSH
49871: CALL_OW 263
49875: PUSH
49876: LD_INT 1
49878: EQUAL
49879: IFFALSE 49960
// begin driver := IsDrivenBy ( vehicle ) ;
49881: LD_ADDR_VAR 0 4
49885: PUSH
49886: LD_VAR 0 1
49890: PPUSH
49891: CALL_OW 311
49895: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
49896: LD_VAR 0 4
49900: PPUSH
49901: LD_EXP 145
49905: PUSH
49906: LD_VAR 0 2
49910: ARRAY
49911: PUSH
49912: LD_INT 3
49914: ARRAY
49915: PPUSH
49916: LD_EXP 145
49920: PUSH
49921: LD_VAR 0 2
49925: ARRAY
49926: PUSH
49927: LD_INT 4
49929: ARRAY
49930: PPUSH
49931: CALL_OW 171
// AddComExitVehicle ( driver ) ;
49935: LD_VAR 0 4
49939: PPUSH
49940: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
49944: LD_VAR 0 4
49948: PPUSH
49949: LD_VAR 0 2
49953: PPUSH
49954: CALL_OW 180
// end else
49958: GO 50073
// if GetControl ( vehicle ) = control_remote then
49960: LD_VAR 0 1
49964: PPUSH
49965: CALL_OW 263
49969: PUSH
49970: LD_INT 2
49972: EQUAL
49973: IFFALSE 50034
// begin wait ( 0 0$2 ) ;
49975: LD_INT 70
49977: PPUSH
49978: CALL_OW 67
// if Connect ( vehicle ) then
49982: LD_VAR 0 1
49986: PPUSH
49987: CALL 62904 0 1
49991: IFFALSE 50032
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
49993: LD_VAR 0 1
49997: PPUSH
49998: LD_EXP 145
50002: PUSH
50003: LD_VAR 0 2
50007: ARRAY
50008: PUSH
50009: LD_INT 3
50011: ARRAY
50012: PPUSH
50013: LD_EXP 145
50017: PUSH
50018: LD_VAR 0 2
50022: ARRAY
50023: PUSH
50024: LD_INT 4
50026: ARRAY
50027: PPUSH
50028: CALL_OW 171
// end else
50032: GO 50073
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
50034: LD_VAR 0 1
50038: PPUSH
50039: LD_EXP 145
50043: PUSH
50044: LD_VAR 0 2
50048: ARRAY
50049: PUSH
50050: LD_INT 3
50052: ARRAY
50053: PPUSH
50054: LD_EXP 145
50058: PUSH
50059: LD_VAR 0 2
50063: ARRAY
50064: PUSH
50065: LD_INT 4
50067: ARRAY
50068: PPUSH
50069: CALL_OW 171
// end ; end ;
50073: LD_VAR 0 3
50077: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
50078: LD_INT 0
50080: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
50081: LD_VAR 0 1
50085: PUSH
50086: LD_INT 250
50088: EQUAL
50089: PUSH
50090: LD_VAR 0 2
50094: PPUSH
50095: CALL_OW 264
50099: PUSH
50100: LD_INT 81
50102: EQUAL
50103: AND
50104: IFFALSE 50125
// MinerPlaceMine ( unit , x , y ) ;
50106: LD_VAR 0 2
50110: PPUSH
50111: LD_VAR 0 4
50115: PPUSH
50116: LD_VAR 0 5
50120: PPUSH
50121: CALL 53115 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
50125: LD_VAR 0 1
50129: PUSH
50130: LD_INT 251
50132: EQUAL
50133: PUSH
50134: LD_VAR 0 2
50138: PPUSH
50139: CALL_OW 264
50143: PUSH
50144: LD_INT 81
50146: EQUAL
50147: AND
50148: IFFALSE 50169
// MinerDetonateMine ( unit , x , y ) ;
50150: LD_VAR 0 2
50154: PPUSH
50155: LD_VAR 0 4
50159: PPUSH
50160: LD_VAR 0 5
50164: PPUSH
50165: CALL 53390 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
50169: LD_VAR 0 1
50173: PUSH
50174: LD_INT 252
50176: EQUAL
50177: PUSH
50178: LD_VAR 0 2
50182: PPUSH
50183: CALL_OW 264
50187: PUSH
50188: LD_INT 81
50190: EQUAL
50191: AND
50192: IFFALSE 50213
// MinerCreateMinefield ( unit , x , y ) ;
50194: LD_VAR 0 2
50198: PPUSH
50199: LD_VAR 0 4
50203: PPUSH
50204: LD_VAR 0 5
50208: PPUSH
50209: CALL 53807 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
50213: LD_VAR 0 1
50217: PUSH
50218: LD_INT 253
50220: EQUAL
50221: PUSH
50222: LD_VAR 0 2
50226: PPUSH
50227: CALL_OW 257
50231: PUSH
50232: LD_INT 5
50234: EQUAL
50235: AND
50236: IFFALSE 50257
// ComBinocular ( unit , x , y ) ;
50238: LD_VAR 0 2
50242: PPUSH
50243: LD_VAR 0 4
50247: PPUSH
50248: LD_VAR 0 5
50252: PPUSH
50253: CALL 54176 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
50257: LD_VAR 0 1
50261: PUSH
50262: LD_INT 254
50264: EQUAL
50265: PUSH
50266: LD_VAR 0 2
50270: PPUSH
50271: CALL_OW 264
50275: PUSH
50276: LD_INT 99
50278: EQUAL
50279: AND
50280: PUSH
50281: LD_VAR 0 3
50285: PPUSH
50286: CALL_OW 263
50290: PUSH
50291: LD_INT 3
50293: EQUAL
50294: AND
50295: IFFALSE 50311
// HackDestroyVehicle ( unit , selectedUnit ) ;
50297: LD_VAR 0 2
50301: PPUSH
50302: LD_VAR 0 3
50306: PPUSH
50307: CALL 52479 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
50311: LD_VAR 0 1
50315: PUSH
50316: LD_INT 255
50318: EQUAL
50319: PUSH
50320: LD_VAR 0 2
50324: PPUSH
50325: CALL_OW 264
50329: PUSH
50330: LD_INT 14
50332: PUSH
50333: LD_INT 53
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: IN
50340: AND
50341: PUSH
50342: LD_VAR 0 4
50346: PPUSH
50347: LD_VAR 0 5
50351: PPUSH
50352: CALL_OW 488
50356: AND
50357: IFFALSE 50381
// CutTreeXYR ( unit , x , y , 12 ) ;
50359: LD_VAR 0 2
50363: PPUSH
50364: LD_VAR 0 4
50368: PPUSH
50369: LD_VAR 0 5
50373: PPUSH
50374: LD_INT 12
50376: PPUSH
50377: CALL 50476 0 4
// if cmd = 256 then
50381: LD_VAR 0 1
50385: PUSH
50386: LD_INT 256
50388: EQUAL
50389: IFFALSE 50410
// SetFactoryWaypoint ( unit , x , y ) ;
50391: LD_VAR 0 2
50395: PPUSH
50396: LD_VAR 0 4
50400: PPUSH
50401: LD_VAR 0 5
50405: PPUSH
50406: CALL 48391 0 3
// if cmd = 257 then
50410: LD_VAR 0 1
50414: PUSH
50415: LD_INT 257
50417: EQUAL
50418: IFFALSE 50439
// SetWarehouseGatheringPoint ( unit , x , y ) ;
50420: LD_VAR 0 2
50424: PPUSH
50425: LD_VAR 0 4
50429: PPUSH
50430: LD_VAR 0 5
50434: PPUSH
50435: CALL 48753 0 3
// if cmd = 258 then
50439: LD_VAR 0 1
50443: PUSH
50444: LD_INT 258
50446: EQUAL
50447: IFFALSE 50471
// BurnTreeXYR ( unit , x , y , 8 ) ;
50449: LD_VAR 0 2
50453: PPUSH
50454: LD_VAR 0 4
50458: PPUSH
50459: LD_VAR 0 5
50463: PPUSH
50464: LD_INT 8
50466: PPUSH
50467: CALL 50870 0 4
// end ;
50471: LD_VAR 0 6
50475: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
50476: LD_INT 0
50478: PPUSH
50479: PPUSH
50480: PPUSH
50481: PPUSH
50482: PPUSH
50483: PPUSH
50484: PPUSH
50485: PPUSH
50486: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
50487: LD_VAR 0 1
50491: PPUSH
50492: CALL_OW 302
50496: NOT
50497: PUSH
50498: LD_VAR 0 2
50502: PPUSH
50503: LD_VAR 0 3
50507: PPUSH
50508: CALL_OW 488
50512: NOT
50513: OR
50514: PUSH
50515: LD_VAR 0 4
50519: NOT
50520: OR
50521: IFFALSE 50525
// exit ;
50523: GO 50865
// list := [ ] ;
50525: LD_ADDR_VAR 0 13
50529: PUSH
50530: EMPTY
50531: ST_TO_ADDR
// if x - r < 0 then
50532: LD_VAR 0 2
50536: PUSH
50537: LD_VAR 0 4
50541: MINUS
50542: PUSH
50543: LD_INT 0
50545: LESS
50546: IFFALSE 50558
// min_x := 0 else
50548: LD_ADDR_VAR 0 7
50552: PUSH
50553: LD_INT 0
50555: ST_TO_ADDR
50556: GO 50574
// min_x := x - r ;
50558: LD_ADDR_VAR 0 7
50562: PUSH
50563: LD_VAR 0 2
50567: PUSH
50568: LD_VAR 0 4
50572: MINUS
50573: ST_TO_ADDR
// if y - r < 0 then
50574: LD_VAR 0 3
50578: PUSH
50579: LD_VAR 0 4
50583: MINUS
50584: PUSH
50585: LD_INT 0
50587: LESS
50588: IFFALSE 50600
// min_y := 0 else
50590: LD_ADDR_VAR 0 8
50594: PUSH
50595: LD_INT 0
50597: ST_TO_ADDR
50598: GO 50616
// min_y := y - r ;
50600: LD_ADDR_VAR 0 8
50604: PUSH
50605: LD_VAR 0 3
50609: PUSH
50610: LD_VAR 0 4
50614: MINUS
50615: ST_TO_ADDR
// max_x := x + r ;
50616: LD_ADDR_VAR 0 9
50620: PUSH
50621: LD_VAR 0 2
50625: PUSH
50626: LD_VAR 0 4
50630: PLUS
50631: ST_TO_ADDR
// max_y := y + r ;
50632: LD_ADDR_VAR 0 10
50636: PUSH
50637: LD_VAR 0 3
50641: PUSH
50642: LD_VAR 0 4
50646: PLUS
50647: ST_TO_ADDR
// for _x = min_x to max_x do
50648: LD_ADDR_VAR 0 11
50652: PUSH
50653: DOUBLE
50654: LD_VAR 0 7
50658: DEC
50659: ST_TO_ADDR
50660: LD_VAR 0 9
50664: PUSH
50665: FOR_TO
50666: IFFALSE 50783
// for _y = min_y to max_y do
50668: LD_ADDR_VAR 0 12
50672: PUSH
50673: DOUBLE
50674: LD_VAR 0 8
50678: DEC
50679: ST_TO_ADDR
50680: LD_VAR 0 10
50684: PUSH
50685: FOR_TO
50686: IFFALSE 50779
// begin if not ValidHex ( _x , _y ) then
50688: LD_VAR 0 11
50692: PPUSH
50693: LD_VAR 0 12
50697: PPUSH
50698: CALL_OW 488
50702: NOT
50703: IFFALSE 50707
// continue ;
50705: GO 50685
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
50707: LD_VAR 0 11
50711: PPUSH
50712: LD_VAR 0 12
50716: PPUSH
50717: CALL_OW 351
50721: PUSH
50722: LD_VAR 0 11
50726: PPUSH
50727: LD_VAR 0 12
50731: PPUSH
50732: CALL_OW 554
50736: AND
50737: IFFALSE 50777
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
50739: LD_ADDR_VAR 0 13
50743: PUSH
50744: LD_VAR 0 13
50748: PPUSH
50749: LD_VAR 0 13
50753: PUSH
50754: LD_INT 1
50756: PLUS
50757: PPUSH
50758: LD_VAR 0 11
50762: PUSH
50763: LD_VAR 0 12
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PPUSH
50772: CALL_OW 2
50776: ST_TO_ADDR
// end ;
50777: GO 50685
50779: POP
50780: POP
50781: GO 50665
50783: POP
50784: POP
// if not list then
50785: LD_VAR 0 13
50789: NOT
50790: IFFALSE 50794
// exit ;
50792: GO 50865
// for i in list do
50794: LD_ADDR_VAR 0 6
50798: PUSH
50799: LD_VAR 0 13
50803: PUSH
50804: FOR_IN
50805: IFFALSE 50863
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
50807: LD_VAR 0 1
50811: PPUSH
50812: LD_STRING M
50814: PUSH
50815: LD_VAR 0 6
50819: PUSH
50820: LD_INT 1
50822: ARRAY
50823: PUSH
50824: LD_VAR 0 6
50828: PUSH
50829: LD_INT 2
50831: ARRAY
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: PUSH
50854: EMPTY
50855: LIST
50856: PPUSH
50857: CALL_OW 447
50861: GO 50804
50863: POP
50864: POP
// end ;
50865: LD_VAR 0 5
50869: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
50870: LD_INT 0
50872: PPUSH
50873: PPUSH
50874: PPUSH
50875: PPUSH
50876: PPUSH
50877: PPUSH
50878: PPUSH
50879: PPUSH
50880: PPUSH
50881: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
50882: LD_VAR 0 1
50886: PPUSH
50887: CALL_OW 302
50891: NOT
50892: PUSH
50893: LD_VAR 0 2
50897: PPUSH
50898: LD_VAR 0 3
50902: PPUSH
50903: CALL_OW 488
50907: NOT
50908: OR
50909: PUSH
50910: LD_VAR 0 4
50914: NOT
50915: OR
50916: IFFALSE 50920
// exit ;
50918: GO 51433
// list := [ ] ;
50920: LD_ADDR_VAR 0 13
50924: PUSH
50925: EMPTY
50926: ST_TO_ADDR
// if x - r < 0 then
50927: LD_VAR 0 2
50931: PUSH
50932: LD_VAR 0 4
50936: MINUS
50937: PUSH
50938: LD_INT 0
50940: LESS
50941: IFFALSE 50953
// min_x := 0 else
50943: LD_ADDR_VAR 0 7
50947: PUSH
50948: LD_INT 0
50950: ST_TO_ADDR
50951: GO 50969
// min_x := x - r ;
50953: LD_ADDR_VAR 0 7
50957: PUSH
50958: LD_VAR 0 2
50962: PUSH
50963: LD_VAR 0 4
50967: MINUS
50968: ST_TO_ADDR
// if y - r < 0 then
50969: LD_VAR 0 3
50973: PUSH
50974: LD_VAR 0 4
50978: MINUS
50979: PUSH
50980: LD_INT 0
50982: LESS
50983: IFFALSE 50995
// min_y := 0 else
50985: LD_ADDR_VAR 0 8
50989: PUSH
50990: LD_INT 0
50992: ST_TO_ADDR
50993: GO 51011
// min_y := y - r ;
50995: LD_ADDR_VAR 0 8
50999: PUSH
51000: LD_VAR 0 3
51004: PUSH
51005: LD_VAR 0 4
51009: MINUS
51010: ST_TO_ADDR
// max_x := x + r ;
51011: LD_ADDR_VAR 0 9
51015: PUSH
51016: LD_VAR 0 2
51020: PUSH
51021: LD_VAR 0 4
51025: PLUS
51026: ST_TO_ADDR
// max_y := y + r ;
51027: LD_ADDR_VAR 0 10
51031: PUSH
51032: LD_VAR 0 3
51036: PUSH
51037: LD_VAR 0 4
51041: PLUS
51042: ST_TO_ADDR
// for _x = min_x to max_x do
51043: LD_ADDR_VAR 0 11
51047: PUSH
51048: DOUBLE
51049: LD_VAR 0 7
51053: DEC
51054: ST_TO_ADDR
51055: LD_VAR 0 9
51059: PUSH
51060: FOR_TO
51061: IFFALSE 51178
// for _y = min_y to max_y do
51063: LD_ADDR_VAR 0 12
51067: PUSH
51068: DOUBLE
51069: LD_VAR 0 8
51073: DEC
51074: ST_TO_ADDR
51075: LD_VAR 0 10
51079: PUSH
51080: FOR_TO
51081: IFFALSE 51174
// begin if not ValidHex ( _x , _y ) then
51083: LD_VAR 0 11
51087: PPUSH
51088: LD_VAR 0 12
51092: PPUSH
51093: CALL_OW 488
51097: NOT
51098: IFFALSE 51102
// continue ;
51100: GO 51080
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51102: LD_VAR 0 11
51106: PPUSH
51107: LD_VAR 0 12
51111: PPUSH
51112: CALL_OW 351
51116: PUSH
51117: LD_VAR 0 11
51121: PPUSH
51122: LD_VAR 0 12
51126: PPUSH
51127: CALL_OW 554
51131: AND
51132: IFFALSE 51172
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51134: LD_ADDR_VAR 0 13
51138: PUSH
51139: LD_VAR 0 13
51143: PPUSH
51144: LD_VAR 0 13
51148: PUSH
51149: LD_INT 1
51151: PLUS
51152: PPUSH
51153: LD_VAR 0 11
51157: PUSH
51158: LD_VAR 0 12
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PPUSH
51167: CALL_OW 2
51171: ST_TO_ADDR
// end ;
51172: GO 51080
51174: POP
51175: POP
51176: GO 51060
51178: POP
51179: POP
// if not list then
51180: LD_VAR 0 13
51184: NOT
51185: IFFALSE 51189
// exit ;
51187: GO 51433
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
51189: LD_ADDR_VAR 0 13
51193: PUSH
51194: LD_VAR 0 1
51198: PPUSH
51199: LD_VAR 0 13
51203: PPUSH
51204: LD_INT 1
51206: PPUSH
51207: LD_INT 1
51209: PPUSH
51210: CALL 60046 0 4
51214: ST_TO_ADDR
// ComStop ( flame ) ;
51215: LD_VAR 0 1
51219: PPUSH
51220: CALL_OW 141
// for i in list do
51224: LD_ADDR_VAR 0 6
51228: PUSH
51229: LD_VAR 0 13
51233: PUSH
51234: FOR_IN
51235: IFFALSE 51266
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
51237: LD_VAR 0 1
51241: PPUSH
51242: LD_VAR 0 6
51246: PUSH
51247: LD_INT 1
51249: ARRAY
51250: PPUSH
51251: LD_VAR 0 6
51255: PUSH
51256: LD_INT 2
51258: ARRAY
51259: PPUSH
51260: CALL_OW 176
51264: GO 51234
51266: POP
51267: POP
// repeat wait ( 0 0$1 ) ;
51268: LD_INT 35
51270: PPUSH
51271: CALL_OW 67
// task := GetTaskList ( flame ) ;
51275: LD_ADDR_VAR 0 14
51279: PUSH
51280: LD_VAR 0 1
51284: PPUSH
51285: CALL_OW 437
51289: ST_TO_ADDR
// if not task then
51290: LD_VAR 0 14
51294: NOT
51295: IFFALSE 51299
// exit ;
51297: GO 51433
// if task [ 1 ] [ 1 ] <> | then
51299: LD_VAR 0 14
51303: PUSH
51304: LD_INT 1
51306: ARRAY
51307: PUSH
51308: LD_INT 1
51310: ARRAY
51311: PUSH
51312: LD_STRING |
51314: NONEQUAL
51315: IFFALSE 51319
// exit ;
51317: GO 51433
// _x := task [ 1 ] [ 2 ] ;
51319: LD_ADDR_VAR 0 11
51323: PUSH
51324: LD_VAR 0 14
51328: PUSH
51329: LD_INT 1
51331: ARRAY
51332: PUSH
51333: LD_INT 2
51335: ARRAY
51336: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
51337: LD_ADDR_VAR 0 12
51341: PUSH
51342: LD_VAR 0 14
51346: PUSH
51347: LD_INT 1
51349: ARRAY
51350: PUSH
51351: LD_INT 3
51353: ARRAY
51354: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
51355: LD_VAR 0 11
51359: PPUSH
51360: LD_VAR 0 12
51364: PPUSH
51365: CALL_OW 351
51369: NOT
51370: PUSH
51371: LD_VAR 0 11
51375: PPUSH
51376: LD_VAR 0 12
51380: PPUSH
51381: CALL_OW 554
51385: NOT
51386: OR
51387: IFFALSE 51421
// begin task := Delete ( task , 1 ) ;
51389: LD_ADDR_VAR 0 14
51393: PUSH
51394: LD_VAR 0 14
51398: PPUSH
51399: LD_INT 1
51401: PPUSH
51402: CALL_OW 3
51406: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
51407: LD_VAR 0 1
51411: PPUSH
51412: LD_VAR 0 14
51416: PPUSH
51417: CALL_OW 446
// end ; until not HasTask ( flame ) ;
51421: LD_VAR 0 1
51425: PPUSH
51426: CALL_OW 314
51430: NOT
51431: IFFALSE 51268
// end ;
51433: LD_VAR 0 5
51437: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
51438: LD_EXP 148
51442: NOT
51443: IFFALSE 51493
51445: GO 51447
51447: DISABLE
// begin initHack := true ;
51448: LD_ADDR_EXP 148
51452: PUSH
51453: LD_INT 1
51455: ST_TO_ADDR
// hackTanks := [ ] ;
51456: LD_ADDR_EXP 149
51460: PUSH
51461: EMPTY
51462: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
51463: LD_ADDR_EXP 150
51467: PUSH
51468: EMPTY
51469: ST_TO_ADDR
// hackLimit := 3 ;
51470: LD_ADDR_EXP 151
51474: PUSH
51475: LD_INT 3
51477: ST_TO_ADDR
// hackDist := 12 ;
51478: LD_ADDR_EXP 152
51482: PUSH
51483: LD_INT 12
51485: ST_TO_ADDR
// hackCounter := [ ] ;
51486: LD_ADDR_EXP 153
51490: PUSH
51491: EMPTY
51492: ST_TO_ADDR
// end ;
51493: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
51494: LD_EXP 148
51498: PUSH
51499: LD_INT 34
51501: PUSH
51502: LD_INT 99
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PPUSH
51509: CALL_OW 69
51513: AND
51514: IFFALSE 51767
51516: GO 51518
51518: DISABLE
51519: LD_INT 0
51521: PPUSH
51522: PPUSH
// begin enable ;
51523: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
51524: LD_ADDR_VAR 0 1
51528: PUSH
51529: LD_INT 34
51531: PUSH
51532: LD_INT 99
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PPUSH
51539: CALL_OW 69
51543: PUSH
51544: FOR_IN
51545: IFFALSE 51765
// begin if not i in hackTanks then
51547: LD_VAR 0 1
51551: PUSH
51552: LD_EXP 149
51556: IN
51557: NOT
51558: IFFALSE 51641
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
51560: LD_ADDR_EXP 149
51564: PUSH
51565: LD_EXP 149
51569: PPUSH
51570: LD_EXP 149
51574: PUSH
51575: LD_INT 1
51577: PLUS
51578: PPUSH
51579: LD_VAR 0 1
51583: PPUSH
51584: CALL_OW 1
51588: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
51589: LD_ADDR_EXP 150
51593: PUSH
51594: LD_EXP 150
51598: PPUSH
51599: LD_EXP 150
51603: PUSH
51604: LD_INT 1
51606: PLUS
51607: PPUSH
51608: EMPTY
51609: PPUSH
51610: CALL_OW 1
51614: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
51615: LD_ADDR_EXP 153
51619: PUSH
51620: LD_EXP 153
51624: PPUSH
51625: LD_EXP 153
51629: PUSH
51630: LD_INT 1
51632: PLUS
51633: PPUSH
51634: EMPTY
51635: PPUSH
51636: CALL_OW 1
51640: ST_TO_ADDR
// end ; if not IsOk ( i ) then
51641: LD_VAR 0 1
51645: PPUSH
51646: CALL_OW 302
51650: NOT
51651: IFFALSE 51664
// begin HackUnlinkAll ( i ) ;
51653: LD_VAR 0 1
51657: PPUSH
51658: CALL 51770 0 1
// continue ;
51662: GO 51544
// end ; HackCheckCapturedStatus ( i ) ;
51664: LD_VAR 0 1
51668: PPUSH
51669: CALL 52213 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
51673: LD_ADDR_VAR 0 2
51677: PUSH
51678: LD_INT 81
51680: PUSH
51681: LD_VAR 0 1
51685: PPUSH
51686: CALL_OW 255
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 33
51697: PUSH
51698: LD_INT 3
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 91
51707: PUSH
51708: LD_VAR 0 1
51712: PUSH
51713: LD_EXP 152
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 50
51725: PUSH
51726: EMPTY
51727: LIST
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: PPUSH
51735: CALL_OW 69
51739: ST_TO_ADDR
// if not tmp then
51740: LD_VAR 0 2
51744: NOT
51745: IFFALSE 51749
// continue ;
51747: GO 51544
// HackLink ( i , tmp ) ;
51749: LD_VAR 0 1
51753: PPUSH
51754: LD_VAR 0 2
51758: PPUSH
51759: CALL 51906 0 2
// end ;
51763: GO 51544
51765: POP
51766: POP
// end ;
51767: PPOPN 2
51769: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
51770: LD_INT 0
51772: PPUSH
51773: PPUSH
51774: PPUSH
// if not hack in hackTanks then
51775: LD_VAR 0 1
51779: PUSH
51780: LD_EXP 149
51784: IN
51785: NOT
51786: IFFALSE 51790
// exit ;
51788: GO 51901
// index := GetElementIndex ( hackTanks , hack ) ;
51790: LD_ADDR_VAR 0 4
51794: PUSH
51795: LD_EXP 149
51799: PPUSH
51800: LD_VAR 0 1
51804: PPUSH
51805: CALL 59343 0 2
51809: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
51810: LD_EXP 150
51814: PUSH
51815: LD_VAR 0 4
51819: ARRAY
51820: IFFALSE 51901
// begin for i in hackTanksCaptured [ index ] do
51822: LD_ADDR_VAR 0 3
51826: PUSH
51827: LD_EXP 150
51831: PUSH
51832: LD_VAR 0 4
51836: ARRAY
51837: PUSH
51838: FOR_IN
51839: IFFALSE 51865
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
51841: LD_VAR 0 3
51845: PUSH
51846: LD_INT 1
51848: ARRAY
51849: PPUSH
51850: LD_VAR 0 3
51854: PUSH
51855: LD_INT 2
51857: ARRAY
51858: PPUSH
51859: CALL_OW 235
51863: GO 51838
51865: POP
51866: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
51867: LD_ADDR_EXP 150
51871: PUSH
51872: LD_EXP 150
51876: PPUSH
51877: LD_VAR 0 4
51881: PPUSH
51882: EMPTY
51883: PPUSH
51884: CALL_OW 1
51888: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
51889: LD_VAR 0 1
51893: PPUSH
51894: LD_INT 0
51896: PPUSH
51897: CALL_OW 505
// end ; end ;
51901: LD_VAR 0 2
51905: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
51906: LD_INT 0
51908: PPUSH
51909: PPUSH
51910: PPUSH
// if not hack in hackTanks or not vehicles then
51911: LD_VAR 0 1
51915: PUSH
51916: LD_EXP 149
51920: IN
51921: NOT
51922: PUSH
51923: LD_VAR 0 2
51927: NOT
51928: OR
51929: IFFALSE 51933
// exit ;
51931: GO 52208
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
51933: LD_ADDR_VAR 0 2
51937: PUSH
51938: LD_VAR 0 1
51942: PPUSH
51943: LD_VAR 0 2
51947: PPUSH
51948: LD_INT 1
51950: PPUSH
51951: LD_INT 1
51953: PPUSH
51954: CALL 59993 0 4
51958: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
51959: LD_ADDR_VAR 0 5
51963: PUSH
51964: LD_EXP 149
51968: PPUSH
51969: LD_VAR 0 1
51973: PPUSH
51974: CALL 59343 0 2
51978: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
51979: LD_EXP 150
51983: PUSH
51984: LD_VAR 0 5
51988: ARRAY
51989: PUSH
51990: LD_EXP 151
51994: LESS
51995: IFFALSE 52184
// begin for i := 1 to vehicles do
51997: LD_ADDR_VAR 0 4
52001: PUSH
52002: DOUBLE
52003: LD_INT 1
52005: DEC
52006: ST_TO_ADDR
52007: LD_VAR 0 2
52011: PUSH
52012: FOR_TO
52013: IFFALSE 52182
// begin if hackTanksCaptured [ index ] = hackLimit then
52015: LD_EXP 150
52019: PUSH
52020: LD_VAR 0 5
52024: ARRAY
52025: PUSH
52026: LD_EXP 151
52030: EQUAL
52031: IFFALSE 52035
// break ;
52033: GO 52182
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
52035: LD_ADDR_EXP 153
52039: PUSH
52040: LD_EXP 153
52044: PPUSH
52045: LD_VAR 0 5
52049: PPUSH
52050: LD_EXP 153
52054: PUSH
52055: LD_VAR 0 5
52059: ARRAY
52060: PUSH
52061: LD_INT 1
52063: PLUS
52064: PPUSH
52065: CALL_OW 1
52069: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
52070: LD_ADDR_EXP 150
52074: PUSH
52075: LD_EXP 150
52079: PPUSH
52080: LD_VAR 0 5
52084: PUSH
52085: LD_EXP 150
52089: PUSH
52090: LD_VAR 0 5
52094: ARRAY
52095: PUSH
52096: LD_INT 1
52098: PLUS
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PPUSH
52104: LD_VAR 0 2
52108: PUSH
52109: LD_VAR 0 4
52113: ARRAY
52114: PUSH
52115: LD_VAR 0 2
52119: PUSH
52120: LD_VAR 0 4
52124: ARRAY
52125: PPUSH
52126: CALL_OW 255
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PPUSH
52135: CALL 59558 0 3
52139: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
52140: LD_VAR 0 2
52144: PUSH
52145: LD_VAR 0 4
52149: ARRAY
52150: PPUSH
52151: LD_VAR 0 1
52155: PPUSH
52156: CALL_OW 255
52160: PPUSH
52161: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
52165: LD_VAR 0 2
52169: PUSH
52170: LD_VAR 0 4
52174: ARRAY
52175: PPUSH
52176: CALL_OW 141
// end ;
52180: GO 52012
52182: POP
52183: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52184: LD_VAR 0 1
52188: PPUSH
52189: LD_EXP 150
52193: PUSH
52194: LD_VAR 0 5
52198: ARRAY
52199: PUSH
52200: LD_INT 0
52202: PLUS
52203: PPUSH
52204: CALL_OW 505
// end ;
52208: LD_VAR 0 3
52212: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
52213: LD_INT 0
52215: PPUSH
52216: PPUSH
52217: PPUSH
52218: PPUSH
// if not hack in hackTanks then
52219: LD_VAR 0 1
52223: PUSH
52224: LD_EXP 149
52228: IN
52229: NOT
52230: IFFALSE 52234
// exit ;
52232: GO 52474
// index := GetElementIndex ( hackTanks , hack ) ;
52234: LD_ADDR_VAR 0 4
52238: PUSH
52239: LD_EXP 149
52243: PPUSH
52244: LD_VAR 0 1
52248: PPUSH
52249: CALL 59343 0 2
52253: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
52254: LD_ADDR_VAR 0 3
52258: PUSH
52259: DOUBLE
52260: LD_EXP 150
52264: PUSH
52265: LD_VAR 0 4
52269: ARRAY
52270: INC
52271: ST_TO_ADDR
52272: LD_INT 1
52274: PUSH
52275: FOR_DOWNTO
52276: IFFALSE 52448
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
52278: LD_ADDR_VAR 0 5
52282: PUSH
52283: LD_EXP 150
52287: PUSH
52288: LD_VAR 0 4
52292: ARRAY
52293: PUSH
52294: LD_VAR 0 3
52298: ARRAY
52299: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
52300: LD_VAR 0 5
52304: PUSH
52305: LD_INT 1
52307: ARRAY
52308: PPUSH
52309: CALL_OW 302
52313: NOT
52314: PUSH
52315: LD_VAR 0 5
52319: PUSH
52320: LD_INT 1
52322: ARRAY
52323: PPUSH
52324: CALL_OW 255
52328: PUSH
52329: LD_VAR 0 1
52333: PPUSH
52334: CALL_OW 255
52338: NONEQUAL
52339: OR
52340: IFFALSE 52446
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
52342: LD_VAR 0 5
52346: PUSH
52347: LD_INT 1
52349: ARRAY
52350: PPUSH
52351: CALL_OW 305
52355: PUSH
52356: LD_VAR 0 5
52360: PUSH
52361: LD_INT 1
52363: ARRAY
52364: PPUSH
52365: CALL_OW 255
52369: PUSH
52370: LD_VAR 0 1
52374: PPUSH
52375: CALL_OW 255
52379: EQUAL
52380: AND
52381: IFFALSE 52405
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
52383: LD_VAR 0 5
52387: PUSH
52388: LD_INT 1
52390: ARRAY
52391: PPUSH
52392: LD_VAR 0 5
52396: PUSH
52397: LD_INT 2
52399: ARRAY
52400: PPUSH
52401: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
52405: LD_ADDR_EXP 150
52409: PUSH
52410: LD_EXP 150
52414: PPUSH
52415: LD_VAR 0 4
52419: PPUSH
52420: LD_EXP 150
52424: PUSH
52425: LD_VAR 0 4
52429: ARRAY
52430: PPUSH
52431: LD_VAR 0 3
52435: PPUSH
52436: CALL_OW 3
52440: PPUSH
52441: CALL_OW 1
52445: ST_TO_ADDR
// end ; end ;
52446: GO 52275
52448: POP
52449: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52450: LD_VAR 0 1
52454: PPUSH
52455: LD_EXP 150
52459: PUSH
52460: LD_VAR 0 4
52464: ARRAY
52465: PUSH
52466: LD_INT 0
52468: PLUS
52469: PPUSH
52470: CALL_OW 505
// end ;
52474: LD_VAR 0 2
52478: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
52479: LD_INT 0
52481: PPUSH
52482: PPUSH
52483: PPUSH
52484: PPUSH
// if not hack in hackTanks then
52485: LD_VAR 0 1
52489: PUSH
52490: LD_EXP 149
52494: IN
52495: NOT
52496: IFFALSE 52500
// exit ;
52498: GO 52585
// index := GetElementIndex ( hackTanks , hack ) ;
52500: LD_ADDR_VAR 0 5
52504: PUSH
52505: LD_EXP 149
52509: PPUSH
52510: LD_VAR 0 1
52514: PPUSH
52515: CALL 59343 0 2
52519: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
52520: LD_ADDR_VAR 0 4
52524: PUSH
52525: DOUBLE
52526: LD_INT 1
52528: DEC
52529: ST_TO_ADDR
52530: LD_EXP 150
52534: PUSH
52535: LD_VAR 0 5
52539: ARRAY
52540: PUSH
52541: FOR_TO
52542: IFFALSE 52583
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
52544: LD_EXP 150
52548: PUSH
52549: LD_VAR 0 5
52553: ARRAY
52554: PUSH
52555: LD_VAR 0 4
52559: ARRAY
52560: PUSH
52561: LD_INT 1
52563: ARRAY
52564: PUSH
52565: LD_VAR 0 2
52569: EQUAL
52570: IFFALSE 52581
// KillUnit ( vehicle ) ;
52572: LD_VAR 0 2
52576: PPUSH
52577: CALL_OW 66
52581: GO 52541
52583: POP
52584: POP
// end ;
52585: LD_VAR 0 3
52589: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
52590: LD_EXP 154
52594: NOT
52595: IFFALSE 52630
52597: GO 52599
52599: DISABLE
// begin initMiner := true ;
52600: LD_ADDR_EXP 154
52604: PUSH
52605: LD_INT 1
52607: ST_TO_ADDR
// minersList := [ ] ;
52608: LD_ADDR_EXP 155
52612: PUSH
52613: EMPTY
52614: ST_TO_ADDR
// minerMinesList := [ ] ;
52615: LD_ADDR_EXP 156
52619: PUSH
52620: EMPTY
52621: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
52622: LD_ADDR_EXP 157
52626: PUSH
52627: LD_INT 5
52629: ST_TO_ADDR
// end ;
52630: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
52631: LD_EXP 154
52635: PUSH
52636: LD_INT 34
52638: PUSH
52639: LD_INT 81
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PPUSH
52646: CALL_OW 69
52650: AND
52651: IFFALSE 53112
52653: GO 52655
52655: DISABLE
52656: LD_INT 0
52658: PPUSH
52659: PPUSH
52660: PPUSH
52661: PPUSH
// begin enable ;
52662: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
52663: LD_ADDR_VAR 0 1
52667: PUSH
52668: LD_INT 34
52670: PUSH
52671: LD_INT 81
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PPUSH
52678: CALL_OW 69
52682: PUSH
52683: FOR_IN
52684: IFFALSE 52756
// begin if not i in minersList then
52686: LD_VAR 0 1
52690: PUSH
52691: LD_EXP 155
52695: IN
52696: NOT
52697: IFFALSE 52754
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
52699: LD_ADDR_EXP 155
52703: PUSH
52704: LD_EXP 155
52708: PPUSH
52709: LD_EXP 155
52713: PUSH
52714: LD_INT 1
52716: PLUS
52717: PPUSH
52718: LD_VAR 0 1
52722: PPUSH
52723: CALL_OW 1
52727: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
52728: LD_ADDR_EXP 156
52732: PUSH
52733: LD_EXP 156
52737: PPUSH
52738: LD_EXP 156
52742: PUSH
52743: LD_INT 1
52745: PLUS
52746: PPUSH
52747: EMPTY
52748: PPUSH
52749: CALL_OW 1
52753: ST_TO_ADDR
// end end ;
52754: GO 52683
52756: POP
52757: POP
// for i := minerMinesList downto 1 do
52758: LD_ADDR_VAR 0 1
52762: PUSH
52763: DOUBLE
52764: LD_EXP 156
52768: INC
52769: ST_TO_ADDR
52770: LD_INT 1
52772: PUSH
52773: FOR_DOWNTO
52774: IFFALSE 53110
// begin if IsLive ( minersList [ i ] ) then
52776: LD_EXP 155
52780: PUSH
52781: LD_VAR 0 1
52785: ARRAY
52786: PPUSH
52787: CALL_OW 300
52791: IFFALSE 52819
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
52793: LD_EXP 155
52797: PUSH
52798: LD_VAR 0 1
52802: ARRAY
52803: PPUSH
52804: LD_EXP 156
52808: PUSH
52809: LD_VAR 0 1
52813: ARRAY
52814: PPUSH
52815: CALL_OW 505
// if not minerMinesList [ i ] then
52819: LD_EXP 156
52823: PUSH
52824: LD_VAR 0 1
52828: ARRAY
52829: NOT
52830: IFFALSE 52834
// continue ;
52832: GO 52773
// for j := minerMinesList [ i ] downto 1 do
52834: LD_ADDR_VAR 0 2
52838: PUSH
52839: DOUBLE
52840: LD_EXP 156
52844: PUSH
52845: LD_VAR 0 1
52849: ARRAY
52850: INC
52851: ST_TO_ADDR
52852: LD_INT 1
52854: PUSH
52855: FOR_DOWNTO
52856: IFFALSE 53106
// begin side := GetSide ( minersList [ i ] ) ;
52858: LD_ADDR_VAR 0 3
52862: PUSH
52863: LD_EXP 155
52867: PUSH
52868: LD_VAR 0 1
52872: ARRAY
52873: PPUSH
52874: CALL_OW 255
52878: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
52879: LD_ADDR_VAR 0 4
52883: PUSH
52884: LD_EXP 156
52888: PUSH
52889: LD_VAR 0 1
52893: ARRAY
52894: PUSH
52895: LD_VAR 0 2
52899: ARRAY
52900: PUSH
52901: LD_INT 1
52903: ARRAY
52904: PPUSH
52905: LD_EXP 156
52909: PUSH
52910: LD_VAR 0 1
52914: ARRAY
52915: PUSH
52916: LD_VAR 0 2
52920: ARRAY
52921: PUSH
52922: LD_INT 2
52924: ARRAY
52925: PPUSH
52926: CALL_OW 428
52930: ST_TO_ADDR
// if not tmp then
52931: LD_VAR 0 4
52935: NOT
52936: IFFALSE 52940
// continue ;
52938: GO 52855
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
52940: LD_VAR 0 4
52944: PUSH
52945: LD_INT 81
52947: PUSH
52948: LD_VAR 0 3
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PPUSH
52957: CALL_OW 69
52961: IN
52962: PUSH
52963: LD_EXP 156
52967: PUSH
52968: LD_VAR 0 1
52972: ARRAY
52973: PUSH
52974: LD_VAR 0 2
52978: ARRAY
52979: PUSH
52980: LD_INT 1
52982: ARRAY
52983: PPUSH
52984: LD_EXP 156
52988: PUSH
52989: LD_VAR 0 1
52993: ARRAY
52994: PUSH
52995: LD_VAR 0 2
52999: ARRAY
53000: PUSH
53001: LD_INT 2
53003: ARRAY
53004: PPUSH
53005: CALL_OW 458
53009: AND
53010: IFFALSE 53104
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
53012: LD_EXP 156
53016: PUSH
53017: LD_VAR 0 1
53021: ARRAY
53022: PUSH
53023: LD_VAR 0 2
53027: ARRAY
53028: PUSH
53029: LD_INT 1
53031: ARRAY
53032: PPUSH
53033: LD_EXP 156
53037: PUSH
53038: LD_VAR 0 1
53042: ARRAY
53043: PUSH
53044: LD_VAR 0 2
53048: ARRAY
53049: PUSH
53050: LD_INT 2
53052: ARRAY
53053: PPUSH
53054: LD_VAR 0 3
53058: PPUSH
53059: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
53063: LD_ADDR_EXP 156
53067: PUSH
53068: LD_EXP 156
53072: PPUSH
53073: LD_VAR 0 1
53077: PPUSH
53078: LD_EXP 156
53082: PUSH
53083: LD_VAR 0 1
53087: ARRAY
53088: PPUSH
53089: LD_VAR 0 2
53093: PPUSH
53094: CALL_OW 3
53098: PPUSH
53099: CALL_OW 1
53103: ST_TO_ADDR
// end ; end ;
53104: GO 52855
53106: POP
53107: POP
// end ;
53108: GO 52773
53110: POP
53111: POP
// end ;
53112: PPOPN 4
53114: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
53115: LD_INT 0
53117: PPUSH
53118: PPUSH
// result := false ;
53119: LD_ADDR_VAR 0 4
53123: PUSH
53124: LD_INT 0
53126: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
53127: LD_VAR 0 1
53131: PPUSH
53132: CALL_OW 264
53136: PUSH
53137: LD_INT 81
53139: EQUAL
53140: NOT
53141: IFFALSE 53145
// exit ;
53143: GO 53385
// index := GetElementIndex ( minersList , unit ) ;
53145: LD_ADDR_VAR 0 5
53149: PUSH
53150: LD_EXP 155
53154: PPUSH
53155: LD_VAR 0 1
53159: PPUSH
53160: CALL 59343 0 2
53164: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
53165: LD_EXP 156
53169: PUSH
53170: LD_VAR 0 5
53174: ARRAY
53175: PUSH
53176: LD_EXP 157
53180: GREATEREQUAL
53181: IFFALSE 53185
// exit ;
53183: GO 53385
// ComMoveXY ( unit , x , y ) ;
53185: LD_VAR 0 1
53189: PPUSH
53190: LD_VAR 0 2
53194: PPUSH
53195: LD_VAR 0 3
53199: PPUSH
53200: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
53204: LD_INT 35
53206: PPUSH
53207: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
53211: LD_VAR 0 1
53215: PPUSH
53216: LD_VAR 0 2
53220: PPUSH
53221: LD_VAR 0 3
53225: PPUSH
53226: CALL 91084 0 3
53230: NOT
53231: PUSH
53232: LD_VAR 0 1
53236: PPUSH
53237: CALL_OW 314
53241: AND
53242: IFFALSE 53246
// exit ;
53244: GO 53385
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
53246: LD_VAR 0 2
53250: PPUSH
53251: LD_VAR 0 3
53255: PPUSH
53256: CALL_OW 428
53260: PUSH
53261: LD_VAR 0 1
53265: EQUAL
53266: PUSH
53267: LD_VAR 0 1
53271: PPUSH
53272: CALL_OW 314
53276: NOT
53277: AND
53278: IFFALSE 53204
// PlaySoundXY ( x , y , PlantMine ) ;
53280: LD_VAR 0 2
53284: PPUSH
53285: LD_VAR 0 3
53289: PPUSH
53290: LD_STRING PlantMine
53292: PPUSH
53293: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
53297: LD_VAR 0 2
53301: PPUSH
53302: LD_VAR 0 3
53306: PPUSH
53307: LD_VAR 0 1
53311: PPUSH
53312: CALL_OW 255
53316: PPUSH
53317: LD_INT 0
53319: PPUSH
53320: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
53324: LD_ADDR_EXP 156
53328: PUSH
53329: LD_EXP 156
53333: PPUSH
53334: LD_VAR 0 5
53338: PUSH
53339: LD_EXP 156
53343: PUSH
53344: LD_VAR 0 5
53348: ARRAY
53349: PUSH
53350: LD_INT 1
53352: PLUS
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PPUSH
53358: LD_VAR 0 2
53362: PUSH
53363: LD_VAR 0 3
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PPUSH
53372: CALL 59558 0 3
53376: ST_TO_ADDR
// result := true ;
53377: LD_ADDR_VAR 0 4
53381: PUSH
53382: LD_INT 1
53384: ST_TO_ADDR
// end ;
53385: LD_VAR 0 4
53389: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
53390: LD_INT 0
53392: PPUSH
53393: PPUSH
53394: PPUSH
// if not unit in minersList then
53395: LD_VAR 0 1
53399: PUSH
53400: LD_EXP 155
53404: IN
53405: NOT
53406: IFFALSE 53410
// exit ;
53408: GO 53802
// index := GetElementIndex ( minersList , unit ) ;
53410: LD_ADDR_VAR 0 6
53414: PUSH
53415: LD_EXP 155
53419: PPUSH
53420: LD_VAR 0 1
53424: PPUSH
53425: CALL 59343 0 2
53429: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
53430: LD_ADDR_VAR 0 5
53434: PUSH
53435: DOUBLE
53436: LD_EXP 156
53440: PUSH
53441: LD_VAR 0 6
53445: ARRAY
53446: INC
53447: ST_TO_ADDR
53448: LD_INT 1
53450: PUSH
53451: FOR_DOWNTO
53452: IFFALSE 53613
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
53454: LD_EXP 156
53458: PUSH
53459: LD_VAR 0 6
53463: ARRAY
53464: PUSH
53465: LD_VAR 0 5
53469: ARRAY
53470: PUSH
53471: LD_INT 1
53473: ARRAY
53474: PUSH
53475: LD_VAR 0 2
53479: EQUAL
53480: PUSH
53481: LD_EXP 156
53485: PUSH
53486: LD_VAR 0 6
53490: ARRAY
53491: PUSH
53492: LD_VAR 0 5
53496: ARRAY
53497: PUSH
53498: LD_INT 2
53500: ARRAY
53501: PUSH
53502: LD_VAR 0 3
53506: EQUAL
53507: AND
53508: IFFALSE 53611
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53510: LD_EXP 156
53514: PUSH
53515: LD_VAR 0 6
53519: ARRAY
53520: PUSH
53521: LD_VAR 0 5
53525: ARRAY
53526: PUSH
53527: LD_INT 1
53529: ARRAY
53530: PPUSH
53531: LD_EXP 156
53535: PUSH
53536: LD_VAR 0 6
53540: ARRAY
53541: PUSH
53542: LD_VAR 0 5
53546: ARRAY
53547: PUSH
53548: LD_INT 2
53550: ARRAY
53551: PPUSH
53552: LD_VAR 0 1
53556: PPUSH
53557: CALL_OW 255
53561: PPUSH
53562: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
53566: LD_ADDR_EXP 156
53570: PUSH
53571: LD_EXP 156
53575: PPUSH
53576: LD_VAR 0 6
53580: PPUSH
53581: LD_EXP 156
53585: PUSH
53586: LD_VAR 0 6
53590: ARRAY
53591: PPUSH
53592: LD_VAR 0 5
53596: PPUSH
53597: CALL_OW 3
53601: PPUSH
53602: CALL_OW 1
53606: ST_TO_ADDR
// exit ;
53607: POP
53608: POP
53609: GO 53802
// end ; end ;
53611: GO 53451
53613: POP
53614: POP
// for i := minerMinesList [ index ] downto 1 do
53615: LD_ADDR_VAR 0 5
53619: PUSH
53620: DOUBLE
53621: LD_EXP 156
53625: PUSH
53626: LD_VAR 0 6
53630: ARRAY
53631: INC
53632: ST_TO_ADDR
53633: LD_INT 1
53635: PUSH
53636: FOR_DOWNTO
53637: IFFALSE 53800
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
53639: LD_EXP 156
53643: PUSH
53644: LD_VAR 0 6
53648: ARRAY
53649: PUSH
53650: LD_VAR 0 5
53654: ARRAY
53655: PUSH
53656: LD_INT 1
53658: ARRAY
53659: PPUSH
53660: LD_EXP 156
53664: PUSH
53665: LD_VAR 0 6
53669: ARRAY
53670: PUSH
53671: LD_VAR 0 5
53675: ARRAY
53676: PUSH
53677: LD_INT 2
53679: ARRAY
53680: PPUSH
53681: LD_VAR 0 2
53685: PPUSH
53686: LD_VAR 0 3
53690: PPUSH
53691: CALL_OW 298
53695: PUSH
53696: LD_INT 6
53698: LESS
53699: IFFALSE 53798
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53701: LD_EXP 156
53705: PUSH
53706: LD_VAR 0 6
53710: ARRAY
53711: PUSH
53712: LD_VAR 0 5
53716: ARRAY
53717: PUSH
53718: LD_INT 1
53720: ARRAY
53721: PPUSH
53722: LD_EXP 156
53726: PUSH
53727: LD_VAR 0 6
53731: ARRAY
53732: PUSH
53733: LD_VAR 0 5
53737: ARRAY
53738: PUSH
53739: LD_INT 2
53741: ARRAY
53742: PPUSH
53743: LD_VAR 0 1
53747: PPUSH
53748: CALL_OW 255
53752: PPUSH
53753: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
53757: LD_ADDR_EXP 156
53761: PUSH
53762: LD_EXP 156
53766: PPUSH
53767: LD_VAR 0 6
53771: PPUSH
53772: LD_EXP 156
53776: PUSH
53777: LD_VAR 0 6
53781: ARRAY
53782: PPUSH
53783: LD_VAR 0 5
53787: PPUSH
53788: CALL_OW 3
53792: PPUSH
53793: CALL_OW 1
53797: ST_TO_ADDR
// end ; end ;
53798: GO 53636
53800: POP
53801: POP
// end ;
53802: LD_VAR 0 4
53806: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
53807: LD_INT 0
53809: PPUSH
53810: PPUSH
53811: PPUSH
53812: PPUSH
53813: PPUSH
53814: PPUSH
53815: PPUSH
53816: PPUSH
53817: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
53818: LD_VAR 0 1
53822: PPUSH
53823: CALL_OW 264
53827: PUSH
53828: LD_INT 81
53830: EQUAL
53831: NOT
53832: PUSH
53833: LD_VAR 0 1
53837: PUSH
53838: LD_EXP 155
53842: IN
53843: NOT
53844: OR
53845: IFFALSE 53849
// exit ;
53847: GO 54171
// index := GetElementIndex ( minersList , unit ) ;
53849: LD_ADDR_VAR 0 6
53853: PUSH
53854: LD_EXP 155
53858: PPUSH
53859: LD_VAR 0 1
53863: PPUSH
53864: CALL 59343 0 2
53868: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
53869: LD_ADDR_VAR 0 8
53873: PUSH
53874: LD_EXP 157
53878: PUSH
53879: LD_EXP 156
53883: PUSH
53884: LD_VAR 0 6
53888: ARRAY
53889: MINUS
53890: ST_TO_ADDR
// if not minesFreeAmount then
53891: LD_VAR 0 8
53895: NOT
53896: IFFALSE 53900
// exit ;
53898: GO 54171
// tmp := [ ] ;
53900: LD_ADDR_VAR 0 7
53904: PUSH
53905: EMPTY
53906: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
53907: LD_ADDR_VAR 0 5
53911: PUSH
53912: DOUBLE
53913: LD_INT 1
53915: DEC
53916: ST_TO_ADDR
53917: LD_VAR 0 8
53921: PUSH
53922: FOR_TO
53923: IFFALSE 54118
// begin _d := rand ( 0 , 5 ) ;
53925: LD_ADDR_VAR 0 11
53929: PUSH
53930: LD_INT 0
53932: PPUSH
53933: LD_INT 5
53935: PPUSH
53936: CALL_OW 12
53940: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
53941: LD_ADDR_VAR 0 12
53945: PUSH
53946: LD_INT 2
53948: PPUSH
53949: LD_INT 6
53951: PPUSH
53952: CALL_OW 12
53956: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
53957: LD_ADDR_VAR 0 9
53961: PUSH
53962: LD_VAR 0 2
53966: PPUSH
53967: LD_VAR 0 11
53971: PPUSH
53972: LD_VAR 0 12
53976: PPUSH
53977: CALL_OW 272
53981: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
53982: LD_ADDR_VAR 0 10
53986: PUSH
53987: LD_VAR 0 3
53991: PPUSH
53992: LD_VAR 0 11
53996: PPUSH
53997: LD_VAR 0 12
54001: PPUSH
54002: CALL_OW 273
54006: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
54007: LD_VAR 0 9
54011: PPUSH
54012: LD_VAR 0 10
54016: PPUSH
54017: CALL_OW 488
54021: PUSH
54022: LD_VAR 0 9
54026: PUSH
54027: LD_VAR 0 10
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_VAR 0 7
54040: IN
54041: NOT
54042: AND
54043: PUSH
54044: LD_VAR 0 9
54048: PPUSH
54049: LD_VAR 0 10
54053: PPUSH
54054: CALL_OW 458
54058: NOT
54059: AND
54060: IFFALSE 54102
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
54062: LD_ADDR_VAR 0 7
54066: PUSH
54067: LD_VAR 0 7
54071: PPUSH
54072: LD_VAR 0 7
54076: PUSH
54077: LD_INT 1
54079: PLUS
54080: PPUSH
54081: LD_VAR 0 9
54085: PUSH
54086: LD_VAR 0 10
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PPUSH
54095: CALL_OW 1
54099: ST_TO_ADDR
54100: GO 54116
// i := i - 1 ;
54102: LD_ADDR_VAR 0 5
54106: PUSH
54107: LD_VAR 0 5
54111: PUSH
54112: LD_INT 1
54114: MINUS
54115: ST_TO_ADDR
// end ;
54116: GO 53922
54118: POP
54119: POP
// for i in tmp do
54120: LD_ADDR_VAR 0 5
54124: PUSH
54125: LD_VAR 0 7
54129: PUSH
54130: FOR_IN
54131: IFFALSE 54169
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
54133: LD_VAR 0 1
54137: PPUSH
54138: LD_VAR 0 5
54142: PUSH
54143: LD_INT 1
54145: ARRAY
54146: PPUSH
54147: LD_VAR 0 5
54151: PUSH
54152: LD_INT 2
54154: ARRAY
54155: PPUSH
54156: CALL 53115 0 3
54160: NOT
54161: IFFALSE 54167
// exit ;
54163: POP
54164: POP
54165: GO 54171
54167: GO 54130
54169: POP
54170: POP
// end ;
54171: LD_VAR 0 4
54175: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
54176: LD_INT 0
54178: PPUSH
54179: PPUSH
54180: PPUSH
54181: PPUSH
54182: PPUSH
54183: PPUSH
54184: PPUSH
// if not GetClass ( unit ) = class_sniper then
54185: LD_VAR 0 1
54189: PPUSH
54190: CALL_OW 257
54194: PUSH
54195: LD_INT 5
54197: EQUAL
54198: NOT
54199: IFFALSE 54203
// exit ;
54201: GO 54591
// dist := 8 ;
54203: LD_ADDR_VAR 0 5
54207: PUSH
54208: LD_INT 8
54210: ST_TO_ADDR
// viewRange := 12 ;
54211: LD_ADDR_VAR 0 7
54215: PUSH
54216: LD_INT 12
54218: ST_TO_ADDR
// side := GetSide ( unit ) ;
54219: LD_ADDR_VAR 0 6
54223: PUSH
54224: LD_VAR 0 1
54228: PPUSH
54229: CALL_OW 255
54233: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
54234: LD_INT 61
54236: PPUSH
54237: LD_VAR 0 6
54241: PPUSH
54242: CALL_OW 321
54246: PUSH
54247: LD_INT 2
54249: EQUAL
54250: IFFALSE 54260
// viewRange := 16 ;
54252: LD_ADDR_VAR 0 7
54256: PUSH
54257: LD_INT 16
54259: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
54260: LD_VAR 0 1
54264: PPUSH
54265: LD_VAR 0 2
54269: PPUSH
54270: LD_VAR 0 3
54274: PPUSH
54275: CALL_OW 297
54279: PUSH
54280: LD_VAR 0 5
54284: GREATER
54285: IFFALSE 54364
// begin ComMoveXY ( unit , x , y ) ;
54287: LD_VAR 0 1
54291: PPUSH
54292: LD_VAR 0 2
54296: PPUSH
54297: LD_VAR 0 3
54301: PPUSH
54302: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54306: LD_INT 35
54308: PPUSH
54309: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
54313: LD_VAR 0 1
54317: PPUSH
54318: LD_VAR 0 2
54322: PPUSH
54323: LD_VAR 0 3
54327: PPUSH
54328: CALL 91084 0 3
54332: NOT
54333: IFFALSE 54337
// exit ;
54335: GO 54591
// until GetDistUnitXY ( unit , x , y ) < dist ;
54337: LD_VAR 0 1
54341: PPUSH
54342: LD_VAR 0 2
54346: PPUSH
54347: LD_VAR 0 3
54351: PPUSH
54352: CALL_OW 297
54356: PUSH
54357: LD_VAR 0 5
54361: LESS
54362: IFFALSE 54306
// end ; ComTurnXY ( unit , x , y ) ;
54364: LD_VAR 0 1
54368: PPUSH
54369: LD_VAR 0 2
54373: PPUSH
54374: LD_VAR 0 3
54378: PPUSH
54379: CALL_OW 118
// wait ( 5 ) ;
54383: LD_INT 5
54385: PPUSH
54386: CALL_OW 67
// _d := GetDir ( unit ) ;
54390: LD_ADDR_VAR 0 10
54394: PUSH
54395: LD_VAR 0 1
54399: PPUSH
54400: CALL_OW 254
54404: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
54405: LD_ADDR_VAR 0 8
54409: PUSH
54410: LD_VAR 0 1
54414: PPUSH
54415: CALL_OW 250
54419: PPUSH
54420: LD_VAR 0 10
54424: PPUSH
54425: LD_VAR 0 5
54429: PPUSH
54430: CALL_OW 272
54434: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
54435: LD_ADDR_VAR 0 9
54439: PUSH
54440: LD_VAR 0 1
54444: PPUSH
54445: CALL_OW 251
54449: PPUSH
54450: LD_VAR 0 10
54454: PPUSH
54455: LD_VAR 0 5
54459: PPUSH
54460: CALL_OW 273
54464: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54465: LD_VAR 0 8
54469: PPUSH
54470: LD_VAR 0 9
54474: PPUSH
54475: CALL_OW 488
54479: NOT
54480: IFFALSE 54484
// exit ;
54482: GO 54591
// ComAnimCustom ( unit , 1 ) ;
54484: LD_VAR 0 1
54488: PPUSH
54489: LD_INT 1
54491: PPUSH
54492: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
54496: LD_VAR 0 8
54500: PPUSH
54501: LD_VAR 0 9
54505: PPUSH
54506: LD_VAR 0 6
54510: PPUSH
54511: LD_VAR 0 7
54515: PPUSH
54516: CALL_OW 330
// repeat wait ( 1 ) ;
54520: LD_INT 1
54522: PPUSH
54523: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
54527: LD_VAR 0 1
54531: PPUSH
54532: CALL_OW 316
54536: PUSH
54537: LD_VAR 0 1
54541: PPUSH
54542: CALL_OW 314
54546: OR
54547: PUSH
54548: LD_VAR 0 1
54552: PPUSH
54553: CALL_OW 302
54557: NOT
54558: OR
54559: PUSH
54560: LD_VAR 0 1
54564: PPUSH
54565: CALL_OW 301
54569: OR
54570: IFFALSE 54520
// RemoveSeeing ( _x , _y , side ) ;
54572: LD_VAR 0 8
54576: PPUSH
54577: LD_VAR 0 9
54581: PPUSH
54582: LD_VAR 0 6
54586: PPUSH
54587: CALL_OW 331
// end ; end_of_file
54591: LD_VAR 0 4
54595: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
54596: LD_INT 0
54598: PPUSH
54599: PPUSH
// if exist_mode then
54600: LD_VAR 0 2
54604: IFFALSE 54629
// unit := CreateCharacter ( prefix & ident ) else
54606: LD_ADDR_VAR 0 5
54610: PUSH
54611: LD_VAR 0 3
54615: PUSH
54616: LD_VAR 0 1
54620: STR
54621: PPUSH
54622: CALL_OW 34
54626: ST_TO_ADDR
54627: GO 54644
// unit := NewCharacter ( ident ) ;
54629: LD_ADDR_VAR 0 5
54633: PUSH
54634: LD_VAR 0 1
54638: PPUSH
54639: CALL_OW 25
54643: ST_TO_ADDR
// result := unit ;
54644: LD_ADDR_VAR 0 4
54648: PUSH
54649: LD_VAR 0 5
54653: ST_TO_ADDR
// end ;
54654: LD_VAR 0 4
54658: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
54659: LD_INT 0
54661: PPUSH
54662: PPUSH
// if not side or not nation then
54663: LD_VAR 0 1
54667: NOT
54668: PUSH
54669: LD_VAR 0 2
54673: NOT
54674: OR
54675: IFFALSE 54679
// exit ;
54677: GO 55447
// case nation of nation_american :
54679: LD_VAR 0 2
54683: PUSH
54684: LD_INT 1
54686: DOUBLE
54687: EQUAL
54688: IFTRUE 54692
54690: GO 54906
54692: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
54693: LD_ADDR_VAR 0 4
54697: PUSH
54698: LD_INT 35
54700: PUSH
54701: LD_INT 45
54703: PUSH
54704: LD_INT 46
54706: PUSH
54707: LD_INT 47
54709: PUSH
54710: LD_INT 82
54712: PUSH
54713: LD_INT 83
54715: PUSH
54716: LD_INT 84
54718: PUSH
54719: LD_INT 85
54721: PUSH
54722: LD_INT 86
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: LD_INT 2
54730: PUSH
54731: LD_INT 6
54733: PUSH
54734: LD_INT 15
54736: PUSH
54737: LD_INT 16
54739: PUSH
54740: LD_INT 7
54742: PUSH
54743: LD_INT 12
54745: PUSH
54746: LD_INT 13
54748: PUSH
54749: LD_INT 10
54751: PUSH
54752: LD_INT 14
54754: PUSH
54755: LD_INT 20
54757: PUSH
54758: LD_INT 21
54760: PUSH
54761: LD_INT 22
54763: PUSH
54764: LD_INT 25
54766: PUSH
54767: LD_INT 32
54769: PUSH
54770: LD_INT 27
54772: PUSH
54773: LD_INT 36
54775: PUSH
54776: LD_INT 69
54778: PUSH
54779: LD_INT 39
54781: PUSH
54782: LD_INT 34
54784: PUSH
54785: LD_INT 40
54787: PUSH
54788: LD_INT 48
54790: PUSH
54791: LD_INT 49
54793: PUSH
54794: LD_INT 50
54796: PUSH
54797: LD_INT 51
54799: PUSH
54800: LD_INT 52
54802: PUSH
54803: LD_INT 53
54805: PUSH
54806: LD_INT 54
54808: PUSH
54809: LD_INT 55
54811: PUSH
54812: LD_INT 56
54814: PUSH
54815: LD_INT 57
54817: PUSH
54818: LD_INT 58
54820: PUSH
54821: LD_INT 59
54823: PUSH
54824: LD_INT 60
54826: PUSH
54827: LD_INT 61
54829: PUSH
54830: LD_INT 62
54832: PUSH
54833: LD_INT 80
54835: PUSH
54836: LD_INT 82
54838: PUSH
54839: LD_INT 83
54841: PUSH
54842: LD_INT 84
54844: PUSH
54845: LD_INT 85
54847: PUSH
54848: LD_INT 86
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: ST_TO_ADDR
54904: GO 55371
54906: LD_INT 2
54908: DOUBLE
54909: EQUAL
54910: IFTRUE 54914
54912: GO 55140
54914: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
54915: LD_ADDR_VAR 0 4
54919: PUSH
54920: LD_INT 35
54922: PUSH
54923: LD_INT 45
54925: PUSH
54926: LD_INT 46
54928: PUSH
54929: LD_INT 47
54931: PUSH
54932: LD_INT 82
54934: PUSH
54935: LD_INT 83
54937: PUSH
54938: LD_INT 84
54940: PUSH
54941: LD_INT 85
54943: PUSH
54944: LD_INT 87
54946: PUSH
54947: LD_INT 70
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 11
54955: PUSH
54956: LD_INT 3
54958: PUSH
54959: LD_INT 4
54961: PUSH
54962: LD_INT 5
54964: PUSH
54965: LD_INT 6
54967: PUSH
54968: LD_INT 15
54970: PUSH
54971: LD_INT 18
54973: PUSH
54974: LD_INT 7
54976: PUSH
54977: LD_INT 17
54979: PUSH
54980: LD_INT 8
54982: PUSH
54983: LD_INT 20
54985: PUSH
54986: LD_INT 21
54988: PUSH
54989: LD_INT 22
54991: PUSH
54992: LD_INT 72
54994: PUSH
54995: LD_INT 26
54997: PUSH
54998: LD_INT 69
55000: PUSH
55001: LD_INT 39
55003: PUSH
55004: LD_INT 40
55006: PUSH
55007: LD_INT 41
55009: PUSH
55010: LD_INT 42
55012: PUSH
55013: LD_INT 43
55015: PUSH
55016: LD_INT 48
55018: PUSH
55019: LD_INT 49
55021: PUSH
55022: LD_INT 50
55024: PUSH
55025: LD_INT 51
55027: PUSH
55028: LD_INT 52
55030: PUSH
55031: LD_INT 53
55033: PUSH
55034: LD_INT 54
55036: PUSH
55037: LD_INT 55
55039: PUSH
55040: LD_INT 56
55042: PUSH
55043: LD_INT 60
55045: PUSH
55046: LD_INT 61
55048: PUSH
55049: LD_INT 62
55051: PUSH
55052: LD_INT 66
55054: PUSH
55055: LD_INT 67
55057: PUSH
55058: LD_INT 68
55060: PUSH
55061: LD_INT 81
55063: PUSH
55064: LD_INT 82
55066: PUSH
55067: LD_INT 83
55069: PUSH
55070: LD_INT 84
55072: PUSH
55073: LD_INT 85
55075: PUSH
55076: LD_INT 87
55078: PUSH
55079: LD_INT 88
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: ST_TO_ADDR
55138: GO 55371
55140: LD_INT 3
55142: DOUBLE
55143: EQUAL
55144: IFTRUE 55148
55146: GO 55370
55148: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
55149: LD_ADDR_VAR 0 4
55153: PUSH
55154: LD_INT 46
55156: PUSH
55157: LD_INT 47
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: LD_INT 82
55168: PUSH
55169: LD_INT 83
55171: PUSH
55172: LD_INT 84
55174: PUSH
55175: LD_INT 85
55177: PUSH
55178: LD_INT 86
55180: PUSH
55181: LD_INT 11
55183: PUSH
55184: LD_INT 9
55186: PUSH
55187: LD_INT 20
55189: PUSH
55190: LD_INT 19
55192: PUSH
55193: LD_INT 21
55195: PUSH
55196: LD_INT 24
55198: PUSH
55199: LD_INT 22
55201: PUSH
55202: LD_INT 25
55204: PUSH
55205: LD_INT 28
55207: PUSH
55208: LD_INT 29
55210: PUSH
55211: LD_INT 30
55213: PUSH
55214: LD_INT 31
55216: PUSH
55217: LD_INT 37
55219: PUSH
55220: LD_INT 38
55222: PUSH
55223: LD_INT 32
55225: PUSH
55226: LD_INT 27
55228: PUSH
55229: LD_INT 33
55231: PUSH
55232: LD_INT 69
55234: PUSH
55235: LD_INT 39
55237: PUSH
55238: LD_INT 34
55240: PUSH
55241: LD_INT 40
55243: PUSH
55244: LD_INT 71
55246: PUSH
55247: LD_INT 23
55249: PUSH
55250: LD_INT 44
55252: PUSH
55253: LD_INT 48
55255: PUSH
55256: LD_INT 49
55258: PUSH
55259: LD_INT 50
55261: PUSH
55262: LD_INT 51
55264: PUSH
55265: LD_INT 52
55267: PUSH
55268: LD_INT 53
55270: PUSH
55271: LD_INT 54
55273: PUSH
55274: LD_INT 55
55276: PUSH
55277: LD_INT 56
55279: PUSH
55280: LD_INT 57
55282: PUSH
55283: LD_INT 58
55285: PUSH
55286: LD_INT 59
55288: PUSH
55289: LD_INT 63
55291: PUSH
55292: LD_INT 64
55294: PUSH
55295: LD_INT 65
55297: PUSH
55298: LD_INT 82
55300: PUSH
55301: LD_INT 83
55303: PUSH
55304: LD_INT 84
55306: PUSH
55307: LD_INT 85
55309: PUSH
55310: LD_INT 86
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: ST_TO_ADDR
55368: GO 55371
55370: POP
// if state > - 1 and state < 3 then
55371: LD_VAR 0 3
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: GREATER
55380: PUSH
55381: LD_VAR 0 3
55385: PUSH
55386: LD_INT 3
55388: LESS
55389: AND
55390: IFFALSE 55447
// for i in result do
55392: LD_ADDR_VAR 0 5
55396: PUSH
55397: LD_VAR 0 4
55401: PUSH
55402: FOR_IN
55403: IFFALSE 55445
// if GetTech ( i , side ) <> state then
55405: LD_VAR 0 5
55409: PPUSH
55410: LD_VAR 0 1
55414: PPUSH
55415: CALL_OW 321
55419: PUSH
55420: LD_VAR 0 3
55424: NONEQUAL
55425: IFFALSE 55443
// result := result diff i ;
55427: LD_ADDR_VAR 0 4
55431: PUSH
55432: LD_VAR 0 4
55436: PUSH
55437: LD_VAR 0 5
55441: DIFF
55442: ST_TO_ADDR
55443: GO 55402
55445: POP
55446: POP
// end ;
55447: LD_VAR 0 4
55451: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
55452: LD_INT 0
55454: PPUSH
55455: PPUSH
55456: PPUSH
// result := true ;
55457: LD_ADDR_VAR 0 3
55461: PUSH
55462: LD_INT 1
55464: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
55465: LD_ADDR_VAR 0 5
55469: PUSH
55470: LD_VAR 0 2
55474: PPUSH
55475: CALL_OW 480
55479: ST_TO_ADDR
// if not tmp then
55480: LD_VAR 0 5
55484: NOT
55485: IFFALSE 55489
// exit ;
55487: GO 55538
// for i in tmp do
55489: LD_ADDR_VAR 0 4
55493: PUSH
55494: LD_VAR 0 5
55498: PUSH
55499: FOR_IN
55500: IFFALSE 55536
// if GetTech ( i , side ) <> state_researched then
55502: LD_VAR 0 4
55506: PPUSH
55507: LD_VAR 0 1
55511: PPUSH
55512: CALL_OW 321
55516: PUSH
55517: LD_INT 2
55519: NONEQUAL
55520: IFFALSE 55534
// begin result := false ;
55522: LD_ADDR_VAR 0 3
55526: PUSH
55527: LD_INT 0
55529: ST_TO_ADDR
// exit ;
55530: POP
55531: POP
55532: GO 55538
// end ;
55534: GO 55499
55536: POP
55537: POP
// end ;
55538: LD_VAR 0 3
55542: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
55543: LD_INT 0
55545: PPUSH
55546: PPUSH
55547: PPUSH
55548: PPUSH
55549: PPUSH
55550: PPUSH
55551: PPUSH
55552: PPUSH
55553: PPUSH
55554: PPUSH
55555: PPUSH
55556: PPUSH
55557: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
55558: LD_VAR 0 1
55562: NOT
55563: PUSH
55564: LD_VAR 0 1
55568: PPUSH
55569: CALL_OW 257
55573: PUSH
55574: LD_INT 9
55576: NONEQUAL
55577: OR
55578: IFFALSE 55582
// exit ;
55580: GO 56155
// side := GetSide ( unit ) ;
55582: LD_ADDR_VAR 0 9
55586: PUSH
55587: LD_VAR 0 1
55591: PPUSH
55592: CALL_OW 255
55596: ST_TO_ADDR
// tech_space := tech_spacanom ;
55597: LD_ADDR_VAR 0 12
55601: PUSH
55602: LD_INT 29
55604: ST_TO_ADDR
// tech_time := tech_taurad ;
55605: LD_ADDR_VAR 0 13
55609: PUSH
55610: LD_INT 28
55612: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
55613: LD_ADDR_VAR 0 11
55617: PUSH
55618: LD_VAR 0 1
55622: PPUSH
55623: CALL_OW 310
55627: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
55628: LD_VAR 0 11
55632: PPUSH
55633: CALL_OW 247
55637: PUSH
55638: LD_INT 2
55640: EQUAL
55641: IFFALSE 55645
// exit ;
55643: GO 56155
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
55645: LD_ADDR_VAR 0 8
55649: PUSH
55650: LD_INT 81
55652: PUSH
55653: LD_VAR 0 9
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: LD_INT 21
55667: PUSH
55668: LD_INT 3
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PPUSH
55683: CALL_OW 69
55687: ST_TO_ADDR
// if not tmp then
55688: LD_VAR 0 8
55692: NOT
55693: IFFALSE 55697
// exit ;
55695: GO 56155
// if in_unit then
55697: LD_VAR 0 11
55701: IFFALSE 55725
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
55703: LD_ADDR_VAR 0 10
55707: PUSH
55708: LD_VAR 0 8
55712: PPUSH
55713: LD_VAR 0 11
55717: PPUSH
55718: CALL_OW 74
55722: ST_TO_ADDR
55723: GO 55745
// enemy := NearestUnitToUnit ( tmp , unit ) ;
55725: LD_ADDR_VAR 0 10
55729: PUSH
55730: LD_VAR 0 8
55734: PPUSH
55735: LD_VAR 0 1
55739: PPUSH
55740: CALL_OW 74
55744: ST_TO_ADDR
// if not enemy then
55745: LD_VAR 0 10
55749: NOT
55750: IFFALSE 55754
// exit ;
55752: GO 56155
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
55754: LD_VAR 0 11
55758: PUSH
55759: LD_VAR 0 11
55763: PPUSH
55764: LD_VAR 0 10
55768: PPUSH
55769: CALL_OW 296
55773: PUSH
55774: LD_INT 13
55776: GREATER
55777: AND
55778: PUSH
55779: LD_VAR 0 1
55783: PPUSH
55784: LD_VAR 0 10
55788: PPUSH
55789: CALL_OW 296
55793: PUSH
55794: LD_INT 12
55796: GREATER
55797: OR
55798: IFFALSE 55802
// exit ;
55800: GO 56155
// missile := [ 1 ] ;
55802: LD_ADDR_VAR 0 14
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: EMPTY
55811: LIST
55812: ST_TO_ADDR
// if Researched ( side , tech_space ) then
55813: LD_VAR 0 9
55817: PPUSH
55818: LD_VAR 0 12
55822: PPUSH
55823: CALL_OW 325
55827: IFFALSE 55856
// missile := Replace ( missile , missile + 1 , 2 ) ;
55829: LD_ADDR_VAR 0 14
55833: PUSH
55834: LD_VAR 0 14
55838: PPUSH
55839: LD_VAR 0 14
55843: PUSH
55844: LD_INT 1
55846: PLUS
55847: PPUSH
55848: LD_INT 2
55850: PPUSH
55851: CALL_OW 1
55855: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
55856: LD_VAR 0 9
55860: PPUSH
55861: LD_VAR 0 13
55865: PPUSH
55866: CALL_OW 325
55870: PUSH
55871: LD_VAR 0 10
55875: PPUSH
55876: CALL_OW 255
55880: PPUSH
55881: LD_VAR 0 13
55885: PPUSH
55886: CALL_OW 325
55890: NOT
55891: AND
55892: IFFALSE 55921
// missile := Replace ( missile , missile + 1 , 3 ) ;
55894: LD_ADDR_VAR 0 14
55898: PUSH
55899: LD_VAR 0 14
55903: PPUSH
55904: LD_VAR 0 14
55908: PUSH
55909: LD_INT 1
55911: PLUS
55912: PPUSH
55913: LD_INT 3
55915: PPUSH
55916: CALL_OW 1
55920: ST_TO_ADDR
// if missile < 2 then
55921: LD_VAR 0 14
55925: PUSH
55926: LD_INT 2
55928: LESS
55929: IFFALSE 55933
// exit ;
55931: GO 56155
// x := GetX ( enemy ) ;
55933: LD_ADDR_VAR 0 4
55937: PUSH
55938: LD_VAR 0 10
55942: PPUSH
55943: CALL_OW 250
55947: ST_TO_ADDR
// y := GetY ( enemy ) ;
55948: LD_ADDR_VAR 0 5
55952: PUSH
55953: LD_VAR 0 10
55957: PPUSH
55958: CALL_OW 251
55962: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
55963: LD_ADDR_VAR 0 6
55967: PUSH
55968: LD_VAR 0 4
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PPUSH
55977: LD_INT 1
55979: PPUSH
55980: CALL_OW 12
55984: PLUS
55985: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
55986: LD_ADDR_VAR 0 7
55990: PUSH
55991: LD_VAR 0 5
55995: PUSH
55996: LD_INT 1
55998: NEG
55999: PPUSH
56000: LD_INT 1
56002: PPUSH
56003: CALL_OW 12
56007: PLUS
56008: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56009: LD_VAR 0 6
56013: PPUSH
56014: LD_VAR 0 7
56018: PPUSH
56019: CALL_OW 488
56023: NOT
56024: IFFALSE 56046
// begin _x := x ;
56026: LD_ADDR_VAR 0 6
56030: PUSH
56031: LD_VAR 0 4
56035: ST_TO_ADDR
// _y := y ;
56036: LD_ADDR_VAR 0 7
56040: PUSH
56041: LD_VAR 0 5
56045: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
56046: LD_ADDR_VAR 0 3
56050: PUSH
56051: LD_INT 1
56053: PPUSH
56054: LD_VAR 0 14
56058: PPUSH
56059: CALL_OW 12
56063: ST_TO_ADDR
// case i of 1 :
56064: LD_VAR 0 3
56068: PUSH
56069: LD_INT 1
56071: DOUBLE
56072: EQUAL
56073: IFTRUE 56077
56075: GO 56094
56077: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
56078: LD_VAR 0 1
56082: PPUSH
56083: LD_VAR 0 10
56087: PPUSH
56088: CALL_OW 115
56092: GO 56155
56094: LD_INT 2
56096: DOUBLE
56097: EQUAL
56098: IFTRUE 56102
56100: GO 56124
56102: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
56103: LD_VAR 0 1
56107: PPUSH
56108: LD_VAR 0 6
56112: PPUSH
56113: LD_VAR 0 7
56117: PPUSH
56118: CALL_OW 153
56122: GO 56155
56124: LD_INT 3
56126: DOUBLE
56127: EQUAL
56128: IFTRUE 56132
56130: GO 56154
56132: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
56133: LD_VAR 0 1
56137: PPUSH
56138: LD_VAR 0 6
56142: PPUSH
56143: LD_VAR 0 7
56147: PPUSH
56148: CALL_OW 154
56152: GO 56155
56154: POP
// end ;
56155: LD_VAR 0 2
56159: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
56160: LD_INT 0
56162: PPUSH
56163: PPUSH
56164: PPUSH
56165: PPUSH
56166: PPUSH
56167: PPUSH
// if not unit or not building then
56168: LD_VAR 0 1
56172: NOT
56173: PUSH
56174: LD_VAR 0 2
56178: NOT
56179: OR
56180: IFFALSE 56184
// exit ;
56182: GO 56342
// x := GetX ( building ) ;
56184: LD_ADDR_VAR 0 5
56188: PUSH
56189: LD_VAR 0 2
56193: PPUSH
56194: CALL_OW 250
56198: ST_TO_ADDR
// y := GetY ( building ) ;
56199: LD_ADDR_VAR 0 6
56203: PUSH
56204: LD_VAR 0 2
56208: PPUSH
56209: CALL_OW 251
56213: ST_TO_ADDR
// for i = 0 to 5 do
56214: LD_ADDR_VAR 0 4
56218: PUSH
56219: DOUBLE
56220: LD_INT 0
56222: DEC
56223: ST_TO_ADDR
56224: LD_INT 5
56226: PUSH
56227: FOR_TO
56228: IFFALSE 56340
// begin _x := ShiftX ( x , i , 3 ) ;
56230: LD_ADDR_VAR 0 7
56234: PUSH
56235: LD_VAR 0 5
56239: PPUSH
56240: LD_VAR 0 4
56244: PPUSH
56245: LD_INT 3
56247: PPUSH
56248: CALL_OW 272
56252: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
56253: LD_ADDR_VAR 0 8
56257: PUSH
56258: LD_VAR 0 6
56262: PPUSH
56263: LD_VAR 0 4
56267: PPUSH
56268: LD_INT 3
56270: PPUSH
56271: CALL_OW 273
56275: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56276: LD_VAR 0 7
56280: PPUSH
56281: LD_VAR 0 8
56285: PPUSH
56286: CALL_OW 488
56290: NOT
56291: IFFALSE 56295
// continue ;
56293: GO 56227
// if HexInfo ( _x , _y ) = 0 then
56295: LD_VAR 0 7
56299: PPUSH
56300: LD_VAR 0 8
56304: PPUSH
56305: CALL_OW 428
56309: PUSH
56310: LD_INT 0
56312: EQUAL
56313: IFFALSE 56338
// begin ComMoveXY ( unit , _x , _y ) ;
56315: LD_VAR 0 1
56319: PPUSH
56320: LD_VAR 0 7
56324: PPUSH
56325: LD_VAR 0 8
56329: PPUSH
56330: CALL_OW 111
// exit ;
56334: POP
56335: POP
56336: GO 56342
// end ; end ;
56338: GO 56227
56340: POP
56341: POP
// end ;
56342: LD_VAR 0 3
56346: RET
// export function ScanBase ( side , base_area ) ; begin
56347: LD_INT 0
56349: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
56350: LD_ADDR_VAR 0 3
56354: PUSH
56355: LD_VAR 0 2
56359: PPUSH
56360: LD_INT 81
56362: PUSH
56363: LD_VAR 0 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PPUSH
56372: CALL_OW 70
56376: ST_TO_ADDR
// end ;
56377: LD_VAR 0 3
56381: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
56382: LD_INT 0
56384: PPUSH
56385: PPUSH
56386: PPUSH
56387: PPUSH
// result := false ;
56388: LD_ADDR_VAR 0 2
56392: PUSH
56393: LD_INT 0
56395: ST_TO_ADDR
// side := GetSide ( unit ) ;
56396: LD_ADDR_VAR 0 3
56400: PUSH
56401: LD_VAR 0 1
56405: PPUSH
56406: CALL_OW 255
56410: ST_TO_ADDR
// nat := GetNation ( unit ) ;
56411: LD_ADDR_VAR 0 4
56415: PUSH
56416: LD_VAR 0 1
56420: PPUSH
56421: CALL_OW 248
56425: ST_TO_ADDR
// case nat of 1 :
56426: LD_VAR 0 4
56430: PUSH
56431: LD_INT 1
56433: DOUBLE
56434: EQUAL
56435: IFTRUE 56439
56437: GO 56450
56439: POP
// tech := tech_lassight ; 2 :
56440: LD_ADDR_VAR 0 5
56444: PUSH
56445: LD_INT 12
56447: ST_TO_ADDR
56448: GO 56489
56450: LD_INT 2
56452: DOUBLE
56453: EQUAL
56454: IFTRUE 56458
56456: GO 56469
56458: POP
// tech := tech_mortar ; 3 :
56459: LD_ADDR_VAR 0 5
56463: PUSH
56464: LD_INT 41
56466: ST_TO_ADDR
56467: GO 56489
56469: LD_INT 3
56471: DOUBLE
56472: EQUAL
56473: IFTRUE 56477
56475: GO 56488
56477: POP
// tech := tech_bazooka ; end ;
56478: LD_ADDR_VAR 0 5
56482: PUSH
56483: LD_INT 44
56485: ST_TO_ADDR
56486: GO 56489
56488: POP
// if Researched ( side , tech ) then
56489: LD_VAR 0 3
56493: PPUSH
56494: LD_VAR 0 5
56498: PPUSH
56499: CALL_OW 325
56503: IFFALSE 56530
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
56505: LD_ADDR_VAR 0 2
56509: PUSH
56510: LD_INT 5
56512: PUSH
56513: LD_INT 8
56515: PUSH
56516: LD_INT 9
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: LIST
56523: PUSH
56524: LD_VAR 0 4
56528: ARRAY
56529: ST_TO_ADDR
// end ;
56530: LD_VAR 0 2
56534: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
56535: LD_INT 0
56537: PPUSH
56538: PPUSH
56539: PPUSH
// if not mines then
56540: LD_VAR 0 2
56544: NOT
56545: IFFALSE 56549
// exit ;
56547: GO 56693
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56549: LD_ADDR_VAR 0 5
56553: PUSH
56554: LD_INT 81
56556: PUSH
56557: LD_VAR 0 1
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 3
56568: PUSH
56569: LD_INT 21
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PPUSH
56587: CALL_OW 69
56591: ST_TO_ADDR
// for i in mines do
56592: LD_ADDR_VAR 0 4
56596: PUSH
56597: LD_VAR 0 2
56601: PUSH
56602: FOR_IN
56603: IFFALSE 56691
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
56605: LD_VAR 0 4
56609: PUSH
56610: LD_INT 1
56612: ARRAY
56613: PPUSH
56614: LD_VAR 0 4
56618: PUSH
56619: LD_INT 2
56621: ARRAY
56622: PPUSH
56623: CALL_OW 458
56627: NOT
56628: IFFALSE 56632
// continue ;
56630: GO 56602
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
56632: LD_VAR 0 4
56636: PUSH
56637: LD_INT 1
56639: ARRAY
56640: PPUSH
56641: LD_VAR 0 4
56645: PUSH
56646: LD_INT 2
56648: ARRAY
56649: PPUSH
56650: CALL_OW 428
56654: PUSH
56655: LD_VAR 0 5
56659: IN
56660: IFFALSE 56689
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
56662: LD_VAR 0 4
56666: PUSH
56667: LD_INT 1
56669: ARRAY
56670: PPUSH
56671: LD_VAR 0 4
56675: PUSH
56676: LD_INT 2
56678: ARRAY
56679: PPUSH
56680: LD_VAR 0 1
56684: PPUSH
56685: CALL_OW 456
// end ;
56689: GO 56602
56691: POP
56692: POP
// end ;
56693: LD_VAR 0 3
56697: RET
// export function Count ( array ) ; begin
56698: LD_INT 0
56700: PPUSH
// result := array + 0 ;
56701: LD_ADDR_VAR 0 2
56705: PUSH
56706: LD_VAR 0 1
56710: PUSH
56711: LD_INT 0
56713: PLUS
56714: ST_TO_ADDR
// end ;
56715: LD_VAR 0 2
56719: RET
// export function IsEmpty ( building ) ; begin
56720: LD_INT 0
56722: PPUSH
// if not building then
56723: LD_VAR 0 1
56727: NOT
56728: IFFALSE 56732
// exit ;
56730: GO 56775
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
56732: LD_ADDR_VAR 0 2
56736: PUSH
56737: LD_VAR 0 1
56741: PUSH
56742: LD_INT 22
56744: PUSH
56745: LD_VAR 0 1
56749: PPUSH
56750: CALL_OW 255
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 58
56761: PUSH
56762: EMPTY
56763: LIST
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PPUSH
56769: CALL_OW 69
56773: IN
56774: ST_TO_ADDR
// end ;
56775: LD_VAR 0 2
56779: RET
// export function IsNotFull ( building ) ; var places ; begin
56780: LD_INT 0
56782: PPUSH
56783: PPUSH
// if not building then
56784: LD_VAR 0 1
56788: NOT
56789: IFFALSE 56793
// exit ;
56791: GO 56821
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
56793: LD_ADDR_VAR 0 2
56797: PUSH
56798: LD_VAR 0 1
56802: PPUSH
56803: LD_INT 3
56805: PUSH
56806: LD_INT 62
56808: PUSH
56809: EMPTY
56810: LIST
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PPUSH
56816: CALL_OW 72
56820: ST_TO_ADDR
// end ;
56821: LD_VAR 0 2
56825: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
56826: LD_INT 0
56828: PPUSH
56829: PPUSH
56830: PPUSH
56831: PPUSH
// tmp := [ ] ;
56832: LD_ADDR_VAR 0 3
56836: PUSH
56837: EMPTY
56838: ST_TO_ADDR
// list := [ ] ;
56839: LD_ADDR_VAR 0 5
56843: PUSH
56844: EMPTY
56845: ST_TO_ADDR
// for i = 16 to 25 do
56846: LD_ADDR_VAR 0 4
56850: PUSH
56851: DOUBLE
56852: LD_INT 16
56854: DEC
56855: ST_TO_ADDR
56856: LD_INT 25
56858: PUSH
56859: FOR_TO
56860: IFFALSE 56933
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
56862: LD_ADDR_VAR 0 3
56866: PUSH
56867: LD_VAR 0 3
56871: PUSH
56872: LD_INT 22
56874: PUSH
56875: LD_VAR 0 1
56879: PPUSH
56880: CALL_OW 255
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 91
56891: PUSH
56892: LD_VAR 0 1
56896: PUSH
56897: LD_INT 6
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 30
56907: PUSH
56908: LD_VAR 0 4
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: PUSH
56922: EMPTY
56923: LIST
56924: PPUSH
56925: CALL_OW 69
56929: ADD
56930: ST_TO_ADDR
56931: GO 56859
56933: POP
56934: POP
// for i = 1 to tmp do
56935: LD_ADDR_VAR 0 4
56939: PUSH
56940: DOUBLE
56941: LD_INT 1
56943: DEC
56944: ST_TO_ADDR
56945: LD_VAR 0 3
56949: PUSH
56950: FOR_TO
56951: IFFALSE 57039
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
56953: LD_ADDR_VAR 0 5
56957: PUSH
56958: LD_VAR 0 5
56962: PUSH
56963: LD_VAR 0 3
56967: PUSH
56968: LD_VAR 0 4
56972: ARRAY
56973: PPUSH
56974: CALL_OW 266
56978: PUSH
56979: LD_VAR 0 3
56983: PUSH
56984: LD_VAR 0 4
56988: ARRAY
56989: PPUSH
56990: CALL_OW 250
56994: PUSH
56995: LD_VAR 0 3
56999: PUSH
57000: LD_VAR 0 4
57004: ARRAY
57005: PPUSH
57006: CALL_OW 251
57010: PUSH
57011: LD_VAR 0 3
57015: PUSH
57016: LD_VAR 0 4
57020: ARRAY
57021: PPUSH
57022: CALL_OW 254
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: PUSH
57033: EMPTY
57034: LIST
57035: ADD
57036: ST_TO_ADDR
57037: GO 56950
57039: POP
57040: POP
// result := list ;
57041: LD_ADDR_VAR 0 2
57045: PUSH
57046: LD_VAR 0 5
57050: ST_TO_ADDR
// end ;
57051: LD_VAR 0 2
57055: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
57056: LD_INT 0
57058: PPUSH
57059: PPUSH
57060: PPUSH
57061: PPUSH
57062: PPUSH
57063: PPUSH
57064: PPUSH
// if not factory then
57065: LD_VAR 0 1
57069: NOT
57070: IFFALSE 57074
// exit ;
57072: GO 57667
// if control = control_apeman then
57074: LD_VAR 0 4
57078: PUSH
57079: LD_INT 5
57081: EQUAL
57082: IFFALSE 57191
// begin tmp := UnitsInside ( factory ) ;
57084: LD_ADDR_VAR 0 8
57088: PUSH
57089: LD_VAR 0 1
57093: PPUSH
57094: CALL_OW 313
57098: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
57099: LD_VAR 0 8
57103: PPUSH
57104: LD_INT 25
57106: PUSH
57107: LD_INT 12
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PPUSH
57114: CALL_OW 72
57118: NOT
57119: IFFALSE 57129
// control := control_manual ;
57121: LD_ADDR_VAR 0 4
57125: PUSH
57126: LD_INT 1
57128: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
57129: LD_ADDR_VAR 0 8
57133: PUSH
57134: LD_VAR 0 1
57138: PPUSH
57139: CALL 56826 0 1
57143: ST_TO_ADDR
// if tmp then
57144: LD_VAR 0 8
57148: IFFALSE 57191
// begin for i in tmp do
57150: LD_ADDR_VAR 0 7
57154: PUSH
57155: LD_VAR 0 8
57159: PUSH
57160: FOR_IN
57161: IFFALSE 57189
// if i [ 1 ] = b_ext_radio then
57163: LD_VAR 0 7
57167: PUSH
57168: LD_INT 1
57170: ARRAY
57171: PUSH
57172: LD_INT 22
57174: EQUAL
57175: IFFALSE 57187
// begin control := control_remote ;
57177: LD_ADDR_VAR 0 4
57181: PUSH
57182: LD_INT 2
57184: ST_TO_ADDR
// break ;
57185: GO 57189
// end ;
57187: GO 57160
57189: POP
57190: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57191: LD_VAR 0 1
57195: PPUSH
57196: LD_VAR 0 2
57200: PPUSH
57201: LD_VAR 0 3
57205: PPUSH
57206: LD_VAR 0 4
57210: PPUSH
57211: LD_VAR 0 5
57215: PPUSH
57216: CALL_OW 448
57220: IFFALSE 57255
// begin result := [ chassis , engine , control , weapon ] ;
57222: LD_ADDR_VAR 0 6
57226: PUSH
57227: LD_VAR 0 2
57231: PUSH
57232: LD_VAR 0 3
57236: PUSH
57237: LD_VAR 0 4
57241: PUSH
57242: LD_VAR 0 5
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: ST_TO_ADDR
// exit ;
57253: GO 57667
// end ; _chassis := AvailableChassisList ( factory ) ;
57255: LD_ADDR_VAR 0 9
57259: PUSH
57260: LD_VAR 0 1
57264: PPUSH
57265: CALL_OW 475
57269: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
57270: LD_ADDR_VAR 0 11
57274: PUSH
57275: LD_VAR 0 1
57279: PPUSH
57280: CALL_OW 476
57284: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
57285: LD_ADDR_VAR 0 12
57289: PUSH
57290: LD_VAR 0 1
57294: PPUSH
57295: CALL_OW 477
57299: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
57300: LD_ADDR_VAR 0 10
57304: PUSH
57305: LD_VAR 0 1
57309: PPUSH
57310: CALL_OW 478
57314: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
57315: LD_VAR 0 9
57319: NOT
57320: PUSH
57321: LD_VAR 0 11
57325: NOT
57326: OR
57327: PUSH
57328: LD_VAR 0 12
57332: NOT
57333: OR
57334: PUSH
57335: LD_VAR 0 10
57339: NOT
57340: OR
57341: IFFALSE 57376
// begin result := [ chassis , engine , control , weapon ] ;
57343: LD_ADDR_VAR 0 6
57347: PUSH
57348: LD_VAR 0 2
57352: PUSH
57353: LD_VAR 0 3
57357: PUSH
57358: LD_VAR 0 4
57362: PUSH
57363: LD_VAR 0 5
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: ST_TO_ADDR
// exit ;
57374: GO 57667
// end ; if not chassis in _chassis then
57376: LD_VAR 0 2
57380: PUSH
57381: LD_VAR 0 9
57385: IN
57386: NOT
57387: IFFALSE 57413
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
57389: LD_ADDR_VAR 0 2
57393: PUSH
57394: LD_VAR 0 9
57398: PUSH
57399: LD_INT 1
57401: PPUSH
57402: LD_VAR 0 9
57406: PPUSH
57407: CALL_OW 12
57411: ARRAY
57412: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
57413: LD_VAR 0 2
57417: PPUSH
57418: LD_VAR 0 3
57422: PPUSH
57423: CALL 57672 0 2
57427: NOT
57428: IFFALSE 57487
// repeat engine := _engine [ 1 ] ;
57430: LD_ADDR_VAR 0 3
57434: PUSH
57435: LD_VAR 0 11
57439: PUSH
57440: LD_INT 1
57442: ARRAY
57443: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
57444: LD_ADDR_VAR 0 11
57448: PUSH
57449: LD_VAR 0 11
57453: PPUSH
57454: LD_INT 1
57456: PPUSH
57457: CALL_OW 3
57461: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
57462: LD_VAR 0 2
57466: PPUSH
57467: LD_VAR 0 3
57471: PPUSH
57472: CALL 57672 0 2
57476: PUSH
57477: LD_VAR 0 11
57481: PUSH
57482: EMPTY
57483: EQUAL
57484: OR
57485: IFFALSE 57430
// if not control in _control then
57487: LD_VAR 0 4
57491: PUSH
57492: LD_VAR 0 12
57496: IN
57497: NOT
57498: IFFALSE 57524
// control := _control [ rand ( 1 , _control ) ] ;
57500: LD_ADDR_VAR 0 4
57504: PUSH
57505: LD_VAR 0 12
57509: PUSH
57510: LD_INT 1
57512: PPUSH
57513: LD_VAR 0 12
57517: PPUSH
57518: CALL_OW 12
57522: ARRAY
57523: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
57524: LD_VAR 0 2
57528: PPUSH
57529: LD_VAR 0 5
57533: PPUSH
57534: CALL 57892 0 2
57538: NOT
57539: IFFALSE 57598
// repeat weapon := _weapon [ 1 ] ;
57541: LD_ADDR_VAR 0 5
57545: PUSH
57546: LD_VAR 0 10
57550: PUSH
57551: LD_INT 1
57553: ARRAY
57554: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
57555: LD_ADDR_VAR 0 10
57559: PUSH
57560: LD_VAR 0 10
57564: PPUSH
57565: LD_INT 1
57567: PPUSH
57568: CALL_OW 3
57572: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
57573: LD_VAR 0 2
57577: PPUSH
57578: LD_VAR 0 5
57582: PPUSH
57583: CALL 57892 0 2
57587: PUSH
57588: LD_VAR 0 10
57592: PUSH
57593: EMPTY
57594: EQUAL
57595: OR
57596: IFFALSE 57541
// result := [ ] ;
57598: LD_ADDR_VAR 0 6
57602: PUSH
57603: EMPTY
57604: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57605: LD_VAR 0 1
57609: PPUSH
57610: LD_VAR 0 2
57614: PPUSH
57615: LD_VAR 0 3
57619: PPUSH
57620: LD_VAR 0 4
57624: PPUSH
57625: LD_VAR 0 5
57629: PPUSH
57630: CALL_OW 448
57634: IFFALSE 57667
// result := [ chassis , engine , control , weapon ] ;
57636: LD_ADDR_VAR 0 6
57640: PUSH
57641: LD_VAR 0 2
57645: PUSH
57646: LD_VAR 0 3
57650: PUSH
57651: LD_VAR 0 4
57655: PUSH
57656: LD_VAR 0 5
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: ST_TO_ADDR
// end ;
57667: LD_VAR 0 6
57671: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
57672: LD_INT 0
57674: PPUSH
// if not chassis or not engine then
57675: LD_VAR 0 1
57679: NOT
57680: PUSH
57681: LD_VAR 0 2
57685: NOT
57686: OR
57687: IFFALSE 57691
// exit ;
57689: GO 57887
// case engine of engine_solar :
57691: LD_VAR 0 2
57695: PUSH
57696: LD_INT 2
57698: DOUBLE
57699: EQUAL
57700: IFTRUE 57704
57702: GO 57742
57704: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
57705: LD_ADDR_VAR 0 3
57709: PUSH
57710: LD_INT 11
57712: PUSH
57713: LD_INT 12
57715: PUSH
57716: LD_INT 13
57718: PUSH
57719: LD_INT 14
57721: PUSH
57722: LD_INT 1
57724: PUSH
57725: LD_INT 2
57727: PUSH
57728: LD_INT 3
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: ST_TO_ADDR
57740: GO 57871
57742: LD_INT 1
57744: DOUBLE
57745: EQUAL
57746: IFTRUE 57750
57748: GO 57812
57750: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
57751: LD_ADDR_VAR 0 3
57755: PUSH
57756: LD_INT 11
57758: PUSH
57759: LD_INT 12
57761: PUSH
57762: LD_INT 13
57764: PUSH
57765: LD_INT 14
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: LD_INT 3
57776: PUSH
57777: LD_INT 4
57779: PUSH
57780: LD_INT 5
57782: PUSH
57783: LD_INT 21
57785: PUSH
57786: LD_INT 23
57788: PUSH
57789: LD_INT 22
57791: PUSH
57792: LD_INT 24
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: ST_TO_ADDR
57810: GO 57871
57812: LD_INT 3
57814: DOUBLE
57815: EQUAL
57816: IFTRUE 57820
57818: GO 57870
57820: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
57821: LD_ADDR_VAR 0 3
57825: PUSH
57826: LD_INT 13
57828: PUSH
57829: LD_INT 14
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: LD_INT 3
57837: PUSH
57838: LD_INT 4
57840: PUSH
57841: LD_INT 5
57843: PUSH
57844: LD_INT 21
57846: PUSH
57847: LD_INT 22
57849: PUSH
57850: LD_INT 23
57852: PUSH
57853: LD_INT 24
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: ST_TO_ADDR
57868: GO 57871
57870: POP
// result := ( chassis in result ) ;
57871: LD_ADDR_VAR 0 3
57875: PUSH
57876: LD_VAR 0 1
57880: PUSH
57881: LD_VAR 0 3
57885: IN
57886: ST_TO_ADDR
// end ;
57887: LD_VAR 0 3
57891: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
57892: LD_INT 0
57894: PPUSH
// if not chassis or not weapon then
57895: LD_VAR 0 1
57899: NOT
57900: PUSH
57901: LD_VAR 0 2
57905: NOT
57906: OR
57907: IFFALSE 57911
// exit ;
57909: GO 58971
// case weapon of us_machine_gun :
57911: LD_VAR 0 2
57915: PUSH
57916: LD_INT 2
57918: DOUBLE
57919: EQUAL
57920: IFTRUE 57924
57922: GO 57954
57924: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
57925: LD_ADDR_VAR 0 3
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: LD_INT 3
57938: PUSH
57939: LD_INT 4
57941: PUSH
57942: LD_INT 5
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: ST_TO_ADDR
57952: GO 58955
57954: LD_INT 3
57956: DOUBLE
57957: EQUAL
57958: IFTRUE 57962
57960: GO 57992
57962: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
57963: LD_ADDR_VAR 0 3
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: LD_INT 2
57973: PUSH
57974: LD_INT 3
57976: PUSH
57977: LD_INT 4
57979: PUSH
57980: LD_INT 5
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: ST_TO_ADDR
57990: GO 58955
57992: LD_INT 11
57994: DOUBLE
57995: EQUAL
57996: IFTRUE 58000
57998: GO 58030
58000: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
58001: LD_ADDR_VAR 0 3
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 2
58011: PUSH
58012: LD_INT 3
58014: PUSH
58015: LD_INT 4
58017: PUSH
58018: LD_INT 5
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: ST_TO_ADDR
58028: GO 58955
58030: LD_INT 4
58032: DOUBLE
58033: EQUAL
58034: IFTRUE 58038
58036: GO 58064
58038: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
58039: LD_ADDR_VAR 0 3
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: LD_INT 3
58049: PUSH
58050: LD_INT 4
58052: PUSH
58053: LD_INT 5
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: ST_TO_ADDR
58062: GO 58955
58064: LD_INT 5
58066: DOUBLE
58067: EQUAL
58068: IFTRUE 58072
58070: GO 58098
58072: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
58073: LD_ADDR_VAR 0 3
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: LD_INT 3
58083: PUSH
58084: LD_INT 4
58086: PUSH
58087: LD_INT 5
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: ST_TO_ADDR
58096: GO 58955
58098: LD_INT 9
58100: DOUBLE
58101: EQUAL
58102: IFTRUE 58106
58104: GO 58132
58106: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
58107: LD_ADDR_VAR 0 3
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: LD_INT 3
58117: PUSH
58118: LD_INT 4
58120: PUSH
58121: LD_INT 5
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: ST_TO_ADDR
58130: GO 58955
58132: LD_INT 7
58134: DOUBLE
58135: EQUAL
58136: IFTRUE 58140
58138: GO 58166
58140: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
58141: LD_ADDR_VAR 0 3
58145: PUSH
58146: LD_INT 2
58148: PUSH
58149: LD_INT 3
58151: PUSH
58152: LD_INT 4
58154: PUSH
58155: LD_INT 5
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: ST_TO_ADDR
58164: GO 58955
58166: LD_INT 12
58168: DOUBLE
58169: EQUAL
58170: IFTRUE 58174
58172: GO 58200
58174: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
58175: LD_ADDR_VAR 0 3
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: LD_INT 4
58188: PUSH
58189: LD_INT 5
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: ST_TO_ADDR
58198: GO 58955
58200: LD_INT 13
58202: DOUBLE
58203: EQUAL
58204: IFTRUE 58208
58206: GO 58234
58208: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
58209: LD_ADDR_VAR 0 3
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: LD_INT 3
58219: PUSH
58220: LD_INT 4
58222: PUSH
58223: LD_INT 5
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: ST_TO_ADDR
58232: GO 58955
58234: LD_INT 14
58236: DOUBLE
58237: EQUAL
58238: IFTRUE 58242
58240: GO 58260
58242: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
58243: LD_ADDR_VAR 0 3
58247: PUSH
58248: LD_INT 4
58250: PUSH
58251: LD_INT 5
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: ST_TO_ADDR
58258: GO 58955
58260: LD_INT 6
58262: DOUBLE
58263: EQUAL
58264: IFTRUE 58268
58266: GO 58286
58268: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
58269: LD_ADDR_VAR 0 3
58273: PUSH
58274: LD_INT 4
58276: PUSH
58277: LD_INT 5
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: ST_TO_ADDR
58284: GO 58955
58286: LD_INT 10
58288: DOUBLE
58289: EQUAL
58290: IFTRUE 58294
58292: GO 58312
58294: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
58295: LD_ADDR_VAR 0 3
58299: PUSH
58300: LD_INT 4
58302: PUSH
58303: LD_INT 5
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: ST_TO_ADDR
58310: GO 58955
58312: LD_INT 22
58314: DOUBLE
58315: EQUAL
58316: IFTRUE 58320
58318: GO 58346
58320: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
58321: LD_ADDR_VAR 0 3
58325: PUSH
58326: LD_INT 11
58328: PUSH
58329: LD_INT 12
58331: PUSH
58332: LD_INT 13
58334: PUSH
58335: LD_INT 14
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: ST_TO_ADDR
58344: GO 58955
58346: LD_INT 23
58348: DOUBLE
58349: EQUAL
58350: IFTRUE 58354
58352: GO 58380
58354: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
58355: LD_ADDR_VAR 0 3
58359: PUSH
58360: LD_INT 11
58362: PUSH
58363: LD_INT 12
58365: PUSH
58366: LD_INT 13
58368: PUSH
58369: LD_INT 14
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: ST_TO_ADDR
58378: GO 58955
58380: LD_INT 24
58382: DOUBLE
58383: EQUAL
58384: IFTRUE 58388
58386: GO 58414
58388: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
58389: LD_ADDR_VAR 0 3
58393: PUSH
58394: LD_INT 11
58396: PUSH
58397: LD_INT 12
58399: PUSH
58400: LD_INT 13
58402: PUSH
58403: LD_INT 14
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: ST_TO_ADDR
58412: GO 58955
58414: LD_INT 30
58416: DOUBLE
58417: EQUAL
58418: IFTRUE 58422
58420: GO 58448
58422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
58423: LD_ADDR_VAR 0 3
58427: PUSH
58428: LD_INT 11
58430: PUSH
58431: LD_INT 12
58433: PUSH
58434: LD_INT 13
58436: PUSH
58437: LD_INT 14
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: ST_TO_ADDR
58446: GO 58955
58448: LD_INT 25
58450: DOUBLE
58451: EQUAL
58452: IFTRUE 58456
58454: GO 58474
58456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
58457: LD_ADDR_VAR 0 3
58461: PUSH
58462: LD_INT 13
58464: PUSH
58465: LD_INT 14
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: ST_TO_ADDR
58472: GO 58955
58474: LD_INT 27
58476: DOUBLE
58477: EQUAL
58478: IFTRUE 58482
58480: GO 58500
58482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
58483: LD_ADDR_VAR 0 3
58487: PUSH
58488: LD_INT 13
58490: PUSH
58491: LD_INT 14
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: ST_TO_ADDR
58498: GO 58955
58500: LD_INT 92
58502: DOUBLE
58503: EQUAL
58504: IFTRUE 58508
58506: GO 58534
58508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
58509: LD_ADDR_VAR 0 3
58513: PUSH
58514: LD_INT 11
58516: PUSH
58517: LD_INT 12
58519: PUSH
58520: LD_INT 13
58522: PUSH
58523: LD_INT 14
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: ST_TO_ADDR
58532: GO 58955
58534: LD_INT 28
58536: DOUBLE
58537: EQUAL
58538: IFTRUE 58542
58540: GO 58560
58542: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
58543: LD_ADDR_VAR 0 3
58547: PUSH
58548: LD_INT 13
58550: PUSH
58551: LD_INT 14
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: ST_TO_ADDR
58558: GO 58955
58560: LD_INT 29
58562: DOUBLE
58563: EQUAL
58564: IFTRUE 58568
58566: GO 58586
58568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
58569: LD_ADDR_VAR 0 3
58573: PUSH
58574: LD_INT 13
58576: PUSH
58577: LD_INT 14
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: ST_TO_ADDR
58584: GO 58955
58586: LD_INT 31
58588: DOUBLE
58589: EQUAL
58590: IFTRUE 58594
58592: GO 58612
58594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
58595: LD_ADDR_VAR 0 3
58599: PUSH
58600: LD_INT 13
58602: PUSH
58603: LD_INT 14
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: ST_TO_ADDR
58610: GO 58955
58612: LD_INT 26
58614: DOUBLE
58615: EQUAL
58616: IFTRUE 58620
58618: GO 58638
58620: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
58621: LD_ADDR_VAR 0 3
58625: PUSH
58626: LD_INT 13
58628: PUSH
58629: LD_INT 14
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: ST_TO_ADDR
58636: GO 58955
58638: LD_INT 42
58640: DOUBLE
58641: EQUAL
58642: IFTRUE 58646
58644: GO 58672
58646: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
58647: LD_ADDR_VAR 0 3
58651: PUSH
58652: LD_INT 21
58654: PUSH
58655: LD_INT 22
58657: PUSH
58658: LD_INT 23
58660: PUSH
58661: LD_INT 24
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: ST_TO_ADDR
58670: GO 58955
58672: LD_INT 43
58674: DOUBLE
58675: EQUAL
58676: IFTRUE 58680
58678: GO 58706
58680: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
58681: LD_ADDR_VAR 0 3
58685: PUSH
58686: LD_INT 21
58688: PUSH
58689: LD_INT 22
58691: PUSH
58692: LD_INT 23
58694: PUSH
58695: LD_INT 24
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: ST_TO_ADDR
58704: GO 58955
58706: LD_INT 44
58708: DOUBLE
58709: EQUAL
58710: IFTRUE 58714
58712: GO 58740
58714: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
58715: LD_ADDR_VAR 0 3
58719: PUSH
58720: LD_INT 21
58722: PUSH
58723: LD_INT 22
58725: PUSH
58726: LD_INT 23
58728: PUSH
58729: LD_INT 24
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: ST_TO_ADDR
58738: GO 58955
58740: LD_INT 45
58742: DOUBLE
58743: EQUAL
58744: IFTRUE 58748
58746: GO 58774
58748: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
58749: LD_ADDR_VAR 0 3
58753: PUSH
58754: LD_INT 21
58756: PUSH
58757: LD_INT 22
58759: PUSH
58760: LD_INT 23
58762: PUSH
58763: LD_INT 24
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: ST_TO_ADDR
58772: GO 58955
58774: LD_INT 49
58776: DOUBLE
58777: EQUAL
58778: IFTRUE 58782
58780: GO 58808
58782: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
58783: LD_ADDR_VAR 0 3
58787: PUSH
58788: LD_INT 21
58790: PUSH
58791: LD_INT 22
58793: PUSH
58794: LD_INT 23
58796: PUSH
58797: LD_INT 24
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: ST_TO_ADDR
58806: GO 58955
58808: LD_INT 51
58810: DOUBLE
58811: EQUAL
58812: IFTRUE 58816
58814: GO 58842
58816: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
58817: LD_ADDR_VAR 0 3
58821: PUSH
58822: LD_INT 21
58824: PUSH
58825: LD_INT 22
58827: PUSH
58828: LD_INT 23
58830: PUSH
58831: LD_INT 24
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: ST_TO_ADDR
58840: GO 58955
58842: LD_INT 52
58844: DOUBLE
58845: EQUAL
58846: IFTRUE 58850
58848: GO 58876
58850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
58851: LD_ADDR_VAR 0 3
58855: PUSH
58856: LD_INT 21
58858: PUSH
58859: LD_INT 22
58861: PUSH
58862: LD_INT 23
58864: PUSH
58865: LD_INT 24
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: ST_TO_ADDR
58874: GO 58955
58876: LD_INT 53
58878: DOUBLE
58879: EQUAL
58880: IFTRUE 58884
58882: GO 58902
58884: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
58885: LD_ADDR_VAR 0 3
58889: PUSH
58890: LD_INT 23
58892: PUSH
58893: LD_INT 24
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: ST_TO_ADDR
58900: GO 58955
58902: LD_INT 46
58904: DOUBLE
58905: EQUAL
58906: IFTRUE 58910
58908: GO 58928
58910: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
58911: LD_ADDR_VAR 0 3
58915: PUSH
58916: LD_INT 23
58918: PUSH
58919: LD_INT 24
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: ST_TO_ADDR
58926: GO 58955
58928: LD_INT 47
58930: DOUBLE
58931: EQUAL
58932: IFTRUE 58936
58934: GO 58954
58936: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
58937: LD_ADDR_VAR 0 3
58941: PUSH
58942: LD_INT 23
58944: PUSH
58945: LD_INT 24
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: ST_TO_ADDR
58952: GO 58955
58954: POP
// result := ( chassis in result ) ;
58955: LD_ADDR_VAR 0 3
58959: PUSH
58960: LD_VAR 0 1
58964: PUSH
58965: LD_VAR 0 3
58969: IN
58970: ST_TO_ADDR
// end ;
58971: LD_VAR 0 3
58975: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
58976: LD_INT 0
58978: PPUSH
58979: PPUSH
58980: PPUSH
58981: PPUSH
58982: PPUSH
58983: PPUSH
58984: PPUSH
// result := array ;
58985: LD_ADDR_VAR 0 5
58989: PUSH
58990: LD_VAR 0 1
58994: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
58995: LD_VAR 0 1
58999: NOT
59000: PUSH
59001: LD_VAR 0 2
59005: NOT
59006: OR
59007: PUSH
59008: LD_VAR 0 3
59012: NOT
59013: OR
59014: PUSH
59015: LD_VAR 0 2
59019: PUSH
59020: LD_VAR 0 1
59024: GREATER
59025: OR
59026: PUSH
59027: LD_VAR 0 3
59031: PUSH
59032: LD_VAR 0 1
59036: GREATER
59037: OR
59038: IFFALSE 59042
// exit ;
59040: GO 59338
// if direction then
59042: LD_VAR 0 4
59046: IFFALSE 59110
// begin d := 1 ;
59048: LD_ADDR_VAR 0 9
59052: PUSH
59053: LD_INT 1
59055: ST_TO_ADDR
// if i_from > i_to then
59056: LD_VAR 0 2
59060: PUSH
59061: LD_VAR 0 3
59065: GREATER
59066: IFFALSE 59092
// length := ( array - i_from ) + i_to else
59068: LD_ADDR_VAR 0 11
59072: PUSH
59073: LD_VAR 0 1
59077: PUSH
59078: LD_VAR 0 2
59082: MINUS
59083: PUSH
59084: LD_VAR 0 3
59088: PLUS
59089: ST_TO_ADDR
59090: GO 59108
// length := i_to - i_from ;
59092: LD_ADDR_VAR 0 11
59096: PUSH
59097: LD_VAR 0 3
59101: PUSH
59102: LD_VAR 0 2
59106: MINUS
59107: ST_TO_ADDR
// end else
59108: GO 59171
// begin d := - 1 ;
59110: LD_ADDR_VAR 0 9
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: ST_TO_ADDR
// if i_from > i_to then
59119: LD_VAR 0 2
59123: PUSH
59124: LD_VAR 0 3
59128: GREATER
59129: IFFALSE 59149
// length := i_from - i_to else
59131: LD_ADDR_VAR 0 11
59135: PUSH
59136: LD_VAR 0 2
59140: PUSH
59141: LD_VAR 0 3
59145: MINUS
59146: ST_TO_ADDR
59147: GO 59171
// length := ( array - i_to ) + i_from ;
59149: LD_ADDR_VAR 0 11
59153: PUSH
59154: LD_VAR 0 1
59158: PUSH
59159: LD_VAR 0 3
59163: MINUS
59164: PUSH
59165: LD_VAR 0 2
59169: PLUS
59170: ST_TO_ADDR
// end ; if not length then
59171: LD_VAR 0 11
59175: NOT
59176: IFFALSE 59180
// exit ;
59178: GO 59338
// tmp := array ;
59180: LD_ADDR_VAR 0 10
59184: PUSH
59185: LD_VAR 0 1
59189: ST_TO_ADDR
// for i = 1 to length do
59190: LD_ADDR_VAR 0 6
59194: PUSH
59195: DOUBLE
59196: LD_INT 1
59198: DEC
59199: ST_TO_ADDR
59200: LD_VAR 0 11
59204: PUSH
59205: FOR_TO
59206: IFFALSE 59326
// begin for j = 1 to array do
59208: LD_ADDR_VAR 0 7
59212: PUSH
59213: DOUBLE
59214: LD_INT 1
59216: DEC
59217: ST_TO_ADDR
59218: LD_VAR 0 1
59222: PUSH
59223: FOR_TO
59224: IFFALSE 59312
// begin k := j + d ;
59226: LD_ADDR_VAR 0 8
59230: PUSH
59231: LD_VAR 0 7
59235: PUSH
59236: LD_VAR 0 9
59240: PLUS
59241: ST_TO_ADDR
// if k > array then
59242: LD_VAR 0 8
59246: PUSH
59247: LD_VAR 0 1
59251: GREATER
59252: IFFALSE 59262
// k := 1 ;
59254: LD_ADDR_VAR 0 8
59258: PUSH
59259: LD_INT 1
59261: ST_TO_ADDR
// if not k then
59262: LD_VAR 0 8
59266: NOT
59267: IFFALSE 59279
// k := array ;
59269: LD_ADDR_VAR 0 8
59273: PUSH
59274: LD_VAR 0 1
59278: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
59279: LD_ADDR_VAR 0 10
59283: PUSH
59284: LD_VAR 0 10
59288: PPUSH
59289: LD_VAR 0 8
59293: PPUSH
59294: LD_VAR 0 1
59298: PUSH
59299: LD_VAR 0 7
59303: ARRAY
59304: PPUSH
59305: CALL_OW 1
59309: ST_TO_ADDR
// end ;
59310: GO 59223
59312: POP
59313: POP
// array := tmp ;
59314: LD_ADDR_VAR 0 1
59318: PUSH
59319: LD_VAR 0 10
59323: ST_TO_ADDR
// end ;
59324: GO 59205
59326: POP
59327: POP
// result := array ;
59328: LD_ADDR_VAR 0 5
59332: PUSH
59333: LD_VAR 0 1
59337: ST_TO_ADDR
// end ;
59338: LD_VAR 0 5
59342: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
59343: LD_INT 0
59345: PPUSH
59346: PPUSH
// result := 0 ;
59347: LD_ADDR_VAR 0 3
59351: PUSH
59352: LD_INT 0
59354: ST_TO_ADDR
// if not array or not value in array then
59355: LD_VAR 0 1
59359: NOT
59360: PUSH
59361: LD_VAR 0 2
59365: PUSH
59366: LD_VAR 0 1
59370: IN
59371: NOT
59372: OR
59373: IFFALSE 59377
// exit ;
59375: GO 59431
// for i = 1 to array do
59377: LD_ADDR_VAR 0 4
59381: PUSH
59382: DOUBLE
59383: LD_INT 1
59385: DEC
59386: ST_TO_ADDR
59387: LD_VAR 0 1
59391: PUSH
59392: FOR_TO
59393: IFFALSE 59429
// if value = array [ i ] then
59395: LD_VAR 0 2
59399: PUSH
59400: LD_VAR 0 1
59404: PUSH
59405: LD_VAR 0 4
59409: ARRAY
59410: EQUAL
59411: IFFALSE 59427
// begin result := i ;
59413: LD_ADDR_VAR 0 3
59417: PUSH
59418: LD_VAR 0 4
59422: ST_TO_ADDR
// exit ;
59423: POP
59424: POP
59425: GO 59431
// end ;
59427: GO 59392
59429: POP
59430: POP
// end ;
59431: LD_VAR 0 3
59435: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
59436: LD_INT 0
59438: PPUSH
// vc_chassis := chassis ;
59439: LD_ADDR_OWVAR 37
59443: PUSH
59444: LD_VAR 0 1
59448: ST_TO_ADDR
// vc_engine := engine ;
59449: LD_ADDR_OWVAR 39
59453: PUSH
59454: LD_VAR 0 2
59458: ST_TO_ADDR
// vc_control := control ;
59459: LD_ADDR_OWVAR 38
59463: PUSH
59464: LD_VAR 0 3
59468: ST_TO_ADDR
// vc_weapon := weapon ;
59469: LD_ADDR_OWVAR 40
59473: PUSH
59474: LD_VAR 0 4
59478: ST_TO_ADDR
// vc_fuel_battery := fuel ;
59479: LD_ADDR_OWVAR 41
59483: PUSH
59484: LD_VAR 0 5
59488: ST_TO_ADDR
// end ;
59489: LD_VAR 0 6
59493: RET
// export function WantPlant ( unit ) ; var task ; begin
59494: LD_INT 0
59496: PPUSH
59497: PPUSH
// result := false ;
59498: LD_ADDR_VAR 0 2
59502: PUSH
59503: LD_INT 0
59505: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
59506: LD_ADDR_VAR 0 3
59510: PUSH
59511: LD_VAR 0 1
59515: PPUSH
59516: CALL_OW 437
59520: ST_TO_ADDR
// if task then
59521: LD_VAR 0 3
59525: IFFALSE 59553
// if task [ 1 ] [ 1 ] = p then
59527: LD_VAR 0 3
59531: PUSH
59532: LD_INT 1
59534: ARRAY
59535: PUSH
59536: LD_INT 1
59538: ARRAY
59539: PUSH
59540: LD_STRING p
59542: EQUAL
59543: IFFALSE 59553
// result := true ;
59545: LD_ADDR_VAR 0 2
59549: PUSH
59550: LD_INT 1
59552: ST_TO_ADDR
// end ;
59553: LD_VAR 0 2
59557: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
59558: LD_INT 0
59560: PPUSH
59561: PPUSH
59562: PPUSH
59563: PPUSH
// if pos < 1 then
59564: LD_VAR 0 2
59568: PUSH
59569: LD_INT 1
59571: LESS
59572: IFFALSE 59576
// exit ;
59574: GO 59879
// if pos = 1 then
59576: LD_VAR 0 2
59580: PUSH
59581: LD_INT 1
59583: EQUAL
59584: IFFALSE 59617
// result := Replace ( arr , pos [ 1 ] , value ) else
59586: LD_ADDR_VAR 0 4
59590: PUSH
59591: LD_VAR 0 1
59595: PPUSH
59596: LD_VAR 0 2
59600: PUSH
59601: LD_INT 1
59603: ARRAY
59604: PPUSH
59605: LD_VAR 0 3
59609: PPUSH
59610: CALL_OW 1
59614: ST_TO_ADDR
59615: GO 59879
// begin tmp := arr ;
59617: LD_ADDR_VAR 0 6
59621: PUSH
59622: LD_VAR 0 1
59626: ST_TO_ADDR
// s_arr := [ tmp ] ;
59627: LD_ADDR_VAR 0 7
59631: PUSH
59632: LD_VAR 0 6
59636: PUSH
59637: EMPTY
59638: LIST
59639: ST_TO_ADDR
// for i = 1 to pos - 1 do
59640: LD_ADDR_VAR 0 5
59644: PUSH
59645: DOUBLE
59646: LD_INT 1
59648: DEC
59649: ST_TO_ADDR
59650: LD_VAR 0 2
59654: PUSH
59655: LD_INT 1
59657: MINUS
59658: PUSH
59659: FOR_TO
59660: IFFALSE 59705
// begin tmp := tmp [ pos [ i ] ] ;
59662: LD_ADDR_VAR 0 6
59666: PUSH
59667: LD_VAR 0 6
59671: PUSH
59672: LD_VAR 0 2
59676: PUSH
59677: LD_VAR 0 5
59681: ARRAY
59682: ARRAY
59683: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
59684: LD_ADDR_VAR 0 7
59688: PUSH
59689: LD_VAR 0 7
59693: PUSH
59694: LD_VAR 0 6
59698: PUSH
59699: EMPTY
59700: LIST
59701: ADD
59702: ST_TO_ADDR
// end ;
59703: GO 59659
59705: POP
59706: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
59707: LD_ADDR_VAR 0 6
59711: PUSH
59712: LD_VAR 0 6
59716: PPUSH
59717: LD_VAR 0 2
59721: PUSH
59722: LD_VAR 0 2
59726: ARRAY
59727: PPUSH
59728: LD_VAR 0 3
59732: PPUSH
59733: CALL_OW 1
59737: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
59738: LD_ADDR_VAR 0 7
59742: PUSH
59743: LD_VAR 0 7
59747: PPUSH
59748: LD_VAR 0 7
59752: PPUSH
59753: LD_VAR 0 6
59757: PPUSH
59758: CALL_OW 1
59762: ST_TO_ADDR
// for i = s_arr downto 2 do
59763: LD_ADDR_VAR 0 5
59767: PUSH
59768: DOUBLE
59769: LD_VAR 0 7
59773: INC
59774: ST_TO_ADDR
59775: LD_INT 2
59777: PUSH
59778: FOR_DOWNTO
59779: IFFALSE 59863
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
59781: LD_ADDR_VAR 0 6
59785: PUSH
59786: LD_VAR 0 7
59790: PUSH
59791: LD_VAR 0 5
59795: PUSH
59796: LD_INT 1
59798: MINUS
59799: ARRAY
59800: PPUSH
59801: LD_VAR 0 2
59805: PUSH
59806: LD_VAR 0 5
59810: PUSH
59811: LD_INT 1
59813: MINUS
59814: ARRAY
59815: PPUSH
59816: LD_VAR 0 7
59820: PUSH
59821: LD_VAR 0 5
59825: ARRAY
59826: PPUSH
59827: CALL_OW 1
59831: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
59832: LD_ADDR_VAR 0 7
59836: PUSH
59837: LD_VAR 0 7
59841: PPUSH
59842: LD_VAR 0 5
59846: PUSH
59847: LD_INT 1
59849: MINUS
59850: PPUSH
59851: LD_VAR 0 6
59855: PPUSH
59856: CALL_OW 1
59860: ST_TO_ADDR
// end ;
59861: GO 59778
59863: POP
59864: POP
// result := s_arr [ 1 ] ;
59865: LD_ADDR_VAR 0 4
59869: PUSH
59870: LD_VAR 0 7
59874: PUSH
59875: LD_INT 1
59877: ARRAY
59878: ST_TO_ADDR
// end ; end ;
59879: LD_VAR 0 4
59883: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
59884: LD_INT 0
59886: PPUSH
59887: PPUSH
// if not list then
59888: LD_VAR 0 1
59892: NOT
59893: IFFALSE 59897
// exit ;
59895: GO 59988
// i := list [ pos1 ] ;
59897: LD_ADDR_VAR 0 5
59901: PUSH
59902: LD_VAR 0 1
59906: PUSH
59907: LD_VAR 0 2
59911: ARRAY
59912: ST_TO_ADDR
// if not i then
59913: LD_VAR 0 5
59917: NOT
59918: IFFALSE 59922
// exit ;
59920: GO 59988
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
59922: LD_ADDR_VAR 0 1
59926: PUSH
59927: LD_VAR 0 1
59931: PPUSH
59932: LD_VAR 0 2
59936: PPUSH
59937: LD_VAR 0 1
59941: PUSH
59942: LD_VAR 0 3
59946: ARRAY
59947: PPUSH
59948: CALL_OW 1
59952: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
59953: LD_ADDR_VAR 0 1
59957: PUSH
59958: LD_VAR 0 1
59962: PPUSH
59963: LD_VAR 0 3
59967: PPUSH
59968: LD_VAR 0 5
59972: PPUSH
59973: CALL_OW 1
59977: ST_TO_ADDR
// result := list ;
59978: LD_ADDR_VAR 0 4
59982: PUSH
59983: LD_VAR 0 1
59987: ST_TO_ADDR
// end ;
59988: LD_VAR 0 4
59992: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
59993: LD_INT 0
59995: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
59996: LD_ADDR_VAR 0 5
60000: PUSH
60001: LD_VAR 0 1
60005: PPUSH
60006: CALL_OW 250
60010: PPUSH
60011: LD_VAR 0 1
60015: PPUSH
60016: CALL_OW 251
60020: PPUSH
60021: LD_VAR 0 2
60025: PPUSH
60026: LD_VAR 0 3
60030: PPUSH
60031: LD_VAR 0 4
60035: PPUSH
60036: CALL 60414 0 5
60040: ST_TO_ADDR
// end ;
60041: LD_VAR 0 5
60045: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
60046: LD_INT 0
60048: PPUSH
60049: PPUSH
60050: PPUSH
60051: PPUSH
// if not list or not unit then
60052: LD_VAR 0 2
60056: NOT
60057: PUSH
60058: LD_VAR 0 1
60062: NOT
60063: OR
60064: IFFALSE 60068
// exit ;
60066: GO 60409
// result := [ ] ;
60068: LD_ADDR_VAR 0 5
60072: PUSH
60073: EMPTY
60074: ST_TO_ADDR
// for i in list do
60075: LD_ADDR_VAR 0 6
60079: PUSH
60080: LD_VAR 0 2
60084: PUSH
60085: FOR_IN
60086: IFFALSE 60304
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60088: LD_ADDR_VAR 0 8
60092: PUSH
60093: LD_VAR 0 1
60097: PPUSH
60098: LD_VAR 0 6
60102: PUSH
60103: LD_INT 1
60105: ARRAY
60106: PPUSH
60107: LD_VAR 0 6
60111: PUSH
60112: LD_INT 2
60114: ARRAY
60115: PPUSH
60116: CALL_OW 297
60120: ST_TO_ADDR
// if not Count ( result ) then
60121: LD_VAR 0 5
60125: PPUSH
60126: CALL 56698 0 1
60130: NOT
60131: IFFALSE 60164
// begin result := Join ( result , [ i , tmp ] ) ;
60133: LD_ADDR_VAR 0 5
60137: PUSH
60138: LD_VAR 0 5
60142: PPUSH
60143: LD_VAR 0 6
60147: PUSH
60148: LD_VAR 0 8
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PPUSH
60157: CALL 92287 0 2
60161: ST_TO_ADDR
// continue ;
60162: GO 60085
// end ; if result [ result ] [ 2 ] <= tmp then
60164: LD_VAR 0 5
60168: PUSH
60169: LD_VAR 0 5
60173: ARRAY
60174: PUSH
60175: LD_INT 2
60177: ARRAY
60178: PUSH
60179: LD_VAR 0 8
60183: LESSEQUAL
60184: IFFALSE 60217
// result := Join ( result , [ i , tmp ] ) else
60186: LD_ADDR_VAR 0 5
60190: PUSH
60191: LD_VAR 0 5
60195: PPUSH
60196: LD_VAR 0 6
60200: PUSH
60201: LD_VAR 0 8
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PPUSH
60210: CALL 92287 0 2
60214: ST_TO_ADDR
60215: GO 60302
// begin for j := 1 to Count ( result ) do
60217: LD_ADDR_VAR 0 7
60221: PUSH
60222: DOUBLE
60223: LD_INT 1
60225: DEC
60226: ST_TO_ADDR
60227: LD_VAR 0 5
60231: PPUSH
60232: CALL 56698 0 1
60236: PUSH
60237: FOR_TO
60238: IFFALSE 60300
// begin if tmp < result [ j ] [ 2 ] then
60240: LD_VAR 0 8
60244: PUSH
60245: LD_VAR 0 5
60249: PUSH
60250: LD_VAR 0 7
60254: ARRAY
60255: PUSH
60256: LD_INT 2
60258: ARRAY
60259: LESS
60260: IFFALSE 60298
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60262: LD_ADDR_VAR 0 5
60266: PUSH
60267: LD_VAR 0 5
60271: PPUSH
60272: LD_VAR 0 7
60276: PPUSH
60277: LD_VAR 0 6
60281: PUSH
60282: LD_VAR 0 8
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PPUSH
60291: CALL_OW 2
60295: ST_TO_ADDR
// break ;
60296: GO 60300
// end ; end ;
60298: GO 60237
60300: POP
60301: POP
// end ; end ;
60302: GO 60085
60304: POP
60305: POP
// if result and not asc then
60306: LD_VAR 0 5
60310: PUSH
60311: LD_VAR 0 3
60315: NOT
60316: AND
60317: IFFALSE 60334
// result := ReverseArray ( result ) ;
60319: LD_ADDR_VAR 0 5
60323: PUSH
60324: LD_VAR 0 5
60328: PPUSH
60329: CALL 87574 0 1
60333: ST_TO_ADDR
// tmp := [ ] ;
60334: LD_ADDR_VAR 0 8
60338: PUSH
60339: EMPTY
60340: ST_TO_ADDR
// if mode then
60341: LD_VAR 0 4
60345: IFFALSE 60409
// begin for i := 1 to result do
60347: LD_ADDR_VAR 0 6
60351: PUSH
60352: DOUBLE
60353: LD_INT 1
60355: DEC
60356: ST_TO_ADDR
60357: LD_VAR 0 5
60361: PUSH
60362: FOR_TO
60363: IFFALSE 60397
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
60365: LD_ADDR_VAR 0 8
60369: PUSH
60370: LD_VAR 0 8
60374: PPUSH
60375: LD_VAR 0 5
60379: PUSH
60380: LD_VAR 0 6
60384: ARRAY
60385: PUSH
60386: LD_INT 1
60388: ARRAY
60389: PPUSH
60390: CALL 92287 0 2
60394: ST_TO_ADDR
60395: GO 60362
60397: POP
60398: POP
// result := tmp ;
60399: LD_ADDR_VAR 0 5
60403: PUSH
60404: LD_VAR 0 8
60408: ST_TO_ADDR
// end ; end ;
60409: LD_VAR 0 5
60413: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
60414: LD_INT 0
60416: PPUSH
60417: PPUSH
60418: PPUSH
60419: PPUSH
// if not list then
60420: LD_VAR 0 3
60424: NOT
60425: IFFALSE 60429
// exit ;
60427: GO 60817
// result := [ ] ;
60429: LD_ADDR_VAR 0 6
60433: PUSH
60434: EMPTY
60435: ST_TO_ADDR
// for i in list do
60436: LD_ADDR_VAR 0 7
60440: PUSH
60441: LD_VAR 0 3
60445: PUSH
60446: FOR_IN
60447: IFFALSE 60649
// begin tmp := GetDistUnitXY ( i , x , y ) ;
60449: LD_ADDR_VAR 0 9
60453: PUSH
60454: LD_VAR 0 7
60458: PPUSH
60459: LD_VAR 0 1
60463: PPUSH
60464: LD_VAR 0 2
60468: PPUSH
60469: CALL_OW 297
60473: ST_TO_ADDR
// if not result then
60474: LD_VAR 0 6
60478: NOT
60479: IFFALSE 60505
// result := [ [ i , tmp ] ] else
60481: LD_ADDR_VAR 0 6
60485: PUSH
60486: LD_VAR 0 7
60490: PUSH
60491: LD_VAR 0 9
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: EMPTY
60501: LIST
60502: ST_TO_ADDR
60503: GO 60647
// begin if result [ result ] [ 2 ] < tmp then
60505: LD_VAR 0 6
60509: PUSH
60510: LD_VAR 0 6
60514: ARRAY
60515: PUSH
60516: LD_INT 2
60518: ARRAY
60519: PUSH
60520: LD_VAR 0 9
60524: LESS
60525: IFFALSE 60567
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
60527: LD_ADDR_VAR 0 6
60531: PUSH
60532: LD_VAR 0 6
60536: PPUSH
60537: LD_VAR 0 6
60541: PUSH
60542: LD_INT 1
60544: PLUS
60545: PPUSH
60546: LD_VAR 0 7
60550: PUSH
60551: LD_VAR 0 9
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PPUSH
60560: CALL_OW 2
60564: ST_TO_ADDR
60565: GO 60647
// for j = 1 to result do
60567: LD_ADDR_VAR 0 8
60571: PUSH
60572: DOUBLE
60573: LD_INT 1
60575: DEC
60576: ST_TO_ADDR
60577: LD_VAR 0 6
60581: PUSH
60582: FOR_TO
60583: IFFALSE 60645
// begin if tmp < result [ j ] [ 2 ] then
60585: LD_VAR 0 9
60589: PUSH
60590: LD_VAR 0 6
60594: PUSH
60595: LD_VAR 0 8
60599: ARRAY
60600: PUSH
60601: LD_INT 2
60603: ARRAY
60604: LESS
60605: IFFALSE 60643
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60607: LD_ADDR_VAR 0 6
60611: PUSH
60612: LD_VAR 0 6
60616: PPUSH
60617: LD_VAR 0 8
60621: PPUSH
60622: LD_VAR 0 7
60626: PUSH
60627: LD_VAR 0 9
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PPUSH
60636: CALL_OW 2
60640: ST_TO_ADDR
// break ;
60641: GO 60645
// end ; end ;
60643: GO 60582
60645: POP
60646: POP
// end ; end ;
60647: GO 60446
60649: POP
60650: POP
// if result and not asc then
60651: LD_VAR 0 6
60655: PUSH
60656: LD_VAR 0 4
60660: NOT
60661: AND
60662: IFFALSE 60737
// begin tmp := result ;
60664: LD_ADDR_VAR 0 9
60668: PUSH
60669: LD_VAR 0 6
60673: ST_TO_ADDR
// for i = tmp downto 1 do
60674: LD_ADDR_VAR 0 7
60678: PUSH
60679: DOUBLE
60680: LD_VAR 0 9
60684: INC
60685: ST_TO_ADDR
60686: LD_INT 1
60688: PUSH
60689: FOR_DOWNTO
60690: IFFALSE 60735
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
60692: LD_ADDR_VAR 0 6
60696: PUSH
60697: LD_VAR 0 6
60701: PPUSH
60702: LD_VAR 0 9
60706: PUSH
60707: LD_VAR 0 7
60711: MINUS
60712: PUSH
60713: LD_INT 1
60715: PLUS
60716: PPUSH
60717: LD_VAR 0 9
60721: PUSH
60722: LD_VAR 0 7
60726: ARRAY
60727: PPUSH
60728: CALL_OW 1
60732: ST_TO_ADDR
60733: GO 60689
60735: POP
60736: POP
// end ; tmp := [ ] ;
60737: LD_ADDR_VAR 0 9
60741: PUSH
60742: EMPTY
60743: ST_TO_ADDR
// if mode then
60744: LD_VAR 0 5
60748: IFFALSE 60817
// begin for i = 1 to result do
60750: LD_ADDR_VAR 0 7
60754: PUSH
60755: DOUBLE
60756: LD_INT 1
60758: DEC
60759: ST_TO_ADDR
60760: LD_VAR 0 6
60764: PUSH
60765: FOR_TO
60766: IFFALSE 60805
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
60768: LD_ADDR_VAR 0 9
60772: PUSH
60773: LD_VAR 0 9
60777: PPUSH
60778: LD_VAR 0 7
60782: PPUSH
60783: LD_VAR 0 6
60787: PUSH
60788: LD_VAR 0 7
60792: ARRAY
60793: PUSH
60794: LD_INT 1
60796: ARRAY
60797: PPUSH
60798: CALL_OW 1
60802: ST_TO_ADDR
60803: GO 60765
60805: POP
60806: POP
// result := tmp ;
60807: LD_ADDR_VAR 0 6
60811: PUSH
60812: LD_VAR 0 9
60816: ST_TO_ADDR
// end ; end ;
60817: LD_VAR 0 6
60821: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
60822: LD_INT 0
60824: PPUSH
60825: PPUSH
60826: PPUSH
60827: PPUSH
60828: PPUSH
60829: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
60830: LD_ADDR_VAR 0 5
60834: PUSH
60835: LD_INT 0
60837: PUSH
60838: LD_INT 0
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: ST_TO_ADDR
// if not x or not y then
60852: LD_VAR 0 2
60856: NOT
60857: PUSH
60858: LD_VAR 0 3
60862: NOT
60863: OR
60864: IFFALSE 60868
// exit ;
60866: GO 62518
// if not range then
60868: LD_VAR 0 4
60872: NOT
60873: IFFALSE 60883
// range := 10 ;
60875: LD_ADDR_VAR 0 4
60879: PUSH
60880: LD_INT 10
60882: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
60883: LD_ADDR_VAR 0 8
60887: PUSH
60888: LD_INT 81
60890: PUSH
60891: LD_VAR 0 1
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 92
60902: PUSH
60903: LD_VAR 0 2
60907: PUSH
60908: LD_VAR 0 3
60912: PUSH
60913: LD_VAR 0 4
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 3
60926: PUSH
60927: LD_INT 21
60929: PUSH
60930: LD_INT 3
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: LIST
60945: PPUSH
60946: CALL_OW 69
60950: ST_TO_ADDR
// if not tmp then
60951: LD_VAR 0 8
60955: NOT
60956: IFFALSE 60960
// exit ;
60958: GO 62518
// for i in tmp do
60960: LD_ADDR_VAR 0 6
60964: PUSH
60965: LD_VAR 0 8
60969: PUSH
60970: FOR_IN
60971: IFFALSE 62493
// begin points := [ 0 , 0 , 0 ] ;
60973: LD_ADDR_VAR 0 9
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: LIST
60991: ST_TO_ADDR
// bpoints := 1 ;
60992: LD_ADDR_VAR 0 10
60996: PUSH
60997: LD_INT 1
60999: ST_TO_ADDR
// case GetType ( i ) of unit_human :
61000: LD_VAR 0 6
61004: PPUSH
61005: CALL_OW 247
61009: PUSH
61010: LD_INT 1
61012: DOUBLE
61013: EQUAL
61014: IFTRUE 61018
61016: GO 61596
61018: POP
// begin if GetClass ( i ) = 1 then
61019: LD_VAR 0 6
61023: PPUSH
61024: CALL_OW 257
61028: PUSH
61029: LD_INT 1
61031: EQUAL
61032: IFFALSE 61053
// points := [ 10 , 5 , 3 ] ;
61034: LD_ADDR_VAR 0 9
61038: PUSH
61039: LD_INT 10
61041: PUSH
61042: LD_INT 5
61044: PUSH
61045: LD_INT 3
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: LIST
61052: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
61053: LD_VAR 0 6
61057: PPUSH
61058: CALL_OW 257
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: LD_INT 3
61068: PUSH
61069: LD_INT 4
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: LIST
61076: IN
61077: IFFALSE 61098
// points := [ 3 , 2 , 1 ] ;
61079: LD_ADDR_VAR 0 9
61083: PUSH
61084: LD_INT 3
61086: PUSH
61087: LD_INT 2
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: LIST
61097: ST_TO_ADDR
// if GetClass ( i ) = 5 then
61098: LD_VAR 0 6
61102: PPUSH
61103: CALL_OW 257
61107: PUSH
61108: LD_INT 5
61110: EQUAL
61111: IFFALSE 61132
// points := [ 130 , 5 , 2 ] ;
61113: LD_ADDR_VAR 0 9
61117: PUSH
61118: LD_INT 130
61120: PUSH
61121: LD_INT 5
61123: PUSH
61124: LD_INT 2
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: LIST
61131: ST_TO_ADDR
// if GetClass ( i ) = 8 then
61132: LD_VAR 0 6
61136: PPUSH
61137: CALL_OW 257
61141: PUSH
61142: LD_INT 8
61144: EQUAL
61145: IFFALSE 61166
// points := [ 35 , 35 , 30 ] ;
61147: LD_ADDR_VAR 0 9
61151: PUSH
61152: LD_INT 35
61154: PUSH
61155: LD_INT 35
61157: PUSH
61158: LD_INT 30
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: LIST
61165: ST_TO_ADDR
// if GetClass ( i ) = 9 then
61166: LD_VAR 0 6
61170: PPUSH
61171: CALL_OW 257
61175: PUSH
61176: LD_INT 9
61178: EQUAL
61179: IFFALSE 61200
// points := [ 20 , 55 , 40 ] ;
61181: LD_ADDR_VAR 0 9
61185: PUSH
61186: LD_INT 20
61188: PUSH
61189: LD_INT 55
61191: PUSH
61192: LD_INT 40
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: LIST
61199: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
61200: LD_VAR 0 6
61204: PPUSH
61205: CALL_OW 257
61209: PUSH
61210: LD_INT 12
61212: PUSH
61213: LD_INT 16
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: IN
61220: IFFALSE 61241
// points := [ 5 , 3 , 2 ] ;
61222: LD_ADDR_VAR 0 9
61226: PUSH
61227: LD_INT 5
61229: PUSH
61230: LD_INT 3
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: LIST
61240: ST_TO_ADDR
// if GetClass ( i ) = 17 then
61241: LD_VAR 0 6
61245: PPUSH
61246: CALL_OW 257
61250: PUSH
61251: LD_INT 17
61253: EQUAL
61254: IFFALSE 61275
// points := [ 100 , 50 , 75 ] ;
61256: LD_ADDR_VAR 0 9
61260: PUSH
61261: LD_INT 100
61263: PUSH
61264: LD_INT 50
61266: PUSH
61267: LD_INT 75
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: LIST
61274: ST_TO_ADDR
// if GetClass ( i ) = 15 then
61275: LD_VAR 0 6
61279: PPUSH
61280: CALL_OW 257
61284: PUSH
61285: LD_INT 15
61287: EQUAL
61288: IFFALSE 61309
// points := [ 10 , 5 , 3 ] ;
61290: LD_ADDR_VAR 0 9
61294: PUSH
61295: LD_INT 10
61297: PUSH
61298: LD_INT 5
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: LIST
61308: ST_TO_ADDR
// if GetClass ( i ) = 14 then
61309: LD_VAR 0 6
61313: PPUSH
61314: CALL_OW 257
61318: PUSH
61319: LD_INT 14
61321: EQUAL
61322: IFFALSE 61343
// points := [ 10 , 0 , 0 ] ;
61324: LD_ADDR_VAR 0 9
61328: PUSH
61329: LD_INT 10
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: LIST
61342: ST_TO_ADDR
// if GetClass ( i ) = 11 then
61343: LD_VAR 0 6
61347: PPUSH
61348: CALL_OW 257
61352: PUSH
61353: LD_INT 11
61355: EQUAL
61356: IFFALSE 61377
// points := [ 30 , 10 , 5 ] ;
61358: LD_ADDR_VAR 0 9
61362: PUSH
61363: LD_INT 30
61365: PUSH
61366: LD_INT 10
61368: PUSH
61369: LD_INT 5
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: LIST
61376: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
61377: LD_VAR 0 1
61381: PPUSH
61382: LD_INT 5
61384: PPUSH
61385: CALL_OW 321
61389: PUSH
61390: LD_INT 2
61392: EQUAL
61393: IFFALSE 61410
// bpoints := bpoints * 1.8 ;
61395: LD_ADDR_VAR 0 10
61399: PUSH
61400: LD_VAR 0 10
61404: PUSH
61405: LD_REAL  1.80000000000000E+0000
61408: MUL
61409: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
61410: LD_VAR 0 6
61414: PPUSH
61415: CALL_OW 257
61419: PUSH
61420: LD_INT 1
61422: PUSH
61423: LD_INT 2
61425: PUSH
61426: LD_INT 3
61428: PUSH
61429: LD_INT 4
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: IN
61438: PUSH
61439: LD_VAR 0 1
61443: PPUSH
61444: LD_INT 51
61446: PPUSH
61447: CALL_OW 321
61451: PUSH
61452: LD_INT 2
61454: EQUAL
61455: AND
61456: IFFALSE 61473
// bpoints := bpoints * 1.2 ;
61458: LD_ADDR_VAR 0 10
61462: PUSH
61463: LD_VAR 0 10
61467: PUSH
61468: LD_REAL  1.20000000000000E+0000
61471: MUL
61472: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
61473: LD_VAR 0 6
61477: PPUSH
61478: CALL_OW 257
61482: PUSH
61483: LD_INT 5
61485: PUSH
61486: LD_INT 7
61488: PUSH
61489: LD_INT 9
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: LIST
61496: IN
61497: PUSH
61498: LD_VAR 0 1
61502: PPUSH
61503: LD_INT 52
61505: PPUSH
61506: CALL_OW 321
61510: PUSH
61511: LD_INT 2
61513: EQUAL
61514: AND
61515: IFFALSE 61532
// bpoints := bpoints * 1.5 ;
61517: LD_ADDR_VAR 0 10
61521: PUSH
61522: LD_VAR 0 10
61526: PUSH
61527: LD_REAL  1.50000000000000E+0000
61530: MUL
61531: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
61532: LD_VAR 0 1
61536: PPUSH
61537: LD_INT 66
61539: PPUSH
61540: CALL_OW 321
61544: PUSH
61545: LD_INT 2
61547: EQUAL
61548: IFFALSE 61565
// bpoints := bpoints * 1.1 ;
61550: LD_ADDR_VAR 0 10
61554: PUSH
61555: LD_VAR 0 10
61559: PUSH
61560: LD_REAL  1.10000000000000E+0000
61563: MUL
61564: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
61565: LD_ADDR_VAR 0 10
61569: PUSH
61570: LD_VAR 0 10
61574: PUSH
61575: LD_VAR 0 6
61579: PPUSH
61580: LD_INT 1
61582: PPUSH
61583: CALL_OW 259
61587: PUSH
61588: LD_REAL  1.15000000000000E+0000
61591: MUL
61592: MUL
61593: ST_TO_ADDR
// end ; unit_vehicle :
61594: GO 62422
61596: LD_INT 2
61598: DOUBLE
61599: EQUAL
61600: IFTRUE 61604
61602: GO 62410
61604: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
61605: LD_VAR 0 6
61609: PPUSH
61610: CALL_OW 264
61614: PUSH
61615: LD_INT 2
61617: PUSH
61618: LD_INT 42
61620: PUSH
61621: LD_INT 24
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: LIST
61628: IN
61629: IFFALSE 61650
// points := [ 25 , 5 , 3 ] ;
61631: LD_ADDR_VAR 0 9
61635: PUSH
61636: LD_INT 25
61638: PUSH
61639: LD_INT 5
61641: PUSH
61642: LD_INT 3
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: LIST
61649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
61650: LD_VAR 0 6
61654: PPUSH
61655: CALL_OW 264
61659: PUSH
61660: LD_INT 4
61662: PUSH
61663: LD_INT 43
61665: PUSH
61666: LD_INT 25
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: IN
61674: IFFALSE 61695
// points := [ 40 , 15 , 5 ] ;
61676: LD_ADDR_VAR 0 9
61680: PUSH
61681: LD_INT 40
61683: PUSH
61684: LD_INT 15
61686: PUSH
61687: LD_INT 5
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: LIST
61694: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
61695: LD_VAR 0 6
61699: PPUSH
61700: CALL_OW 264
61704: PUSH
61705: LD_INT 3
61707: PUSH
61708: LD_INT 23
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: IN
61715: IFFALSE 61736
// points := [ 7 , 25 , 8 ] ;
61717: LD_ADDR_VAR 0 9
61721: PUSH
61722: LD_INT 7
61724: PUSH
61725: LD_INT 25
61727: PUSH
61728: LD_INT 8
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: LIST
61735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
61736: LD_VAR 0 6
61740: PPUSH
61741: CALL_OW 264
61745: PUSH
61746: LD_INT 5
61748: PUSH
61749: LD_INT 27
61751: PUSH
61752: LD_INT 44
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: LIST
61759: IN
61760: IFFALSE 61781
// points := [ 14 , 50 , 16 ] ;
61762: LD_ADDR_VAR 0 9
61766: PUSH
61767: LD_INT 14
61769: PUSH
61770: LD_INT 50
61772: PUSH
61773: LD_INT 16
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: LIST
61780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
61781: LD_VAR 0 6
61785: PPUSH
61786: CALL_OW 264
61790: PUSH
61791: LD_INT 6
61793: PUSH
61794: LD_INT 46
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: IN
61801: IFFALSE 61822
// points := [ 32 , 120 , 70 ] ;
61803: LD_ADDR_VAR 0 9
61807: PUSH
61808: LD_INT 32
61810: PUSH
61811: LD_INT 120
61813: PUSH
61814: LD_INT 70
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: LIST
61821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
61822: LD_VAR 0 6
61826: PPUSH
61827: CALL_OW 264
61831: PUSH
61832: LD_INT 7
61834: PUSH
61835: LD_INT 28
61837: PUSH
61838: LD_INT 45
61840: PUSH
61841: LD_INT 92
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: IN
61850: IFFALSE 61871
// points := [ 35 , 20 , 45 ] ;
61852: LD_ADDR_VAR 0 9
61856: PUSH
61857: LD_INT 35
61859: PUSH
61860: LD_INT 20
61862: PUSH
61863: LD_INT 45
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: LIST
61870: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
61871: LD_VAR 0 6
61875: PPUSH
61876: CALL_OW 264
61880: PUSH
61881: LD_INT 47
61883: PUSH
61884: EMPTY
61885: LIST
61886: IN
61887: IFFALSE 61908
// points := [ 67 , 45 , 75 ] ;
61889: LD_ADDR_VAR 0 9
61893: PUSH
61894: LD_INT 67
61896: PUSH
61897: LD_INT 45
61899: PUSH
61900: LD_INT 75
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
61908: LD_VAR 0 6
61912: PPUSH
61913: CALL_OW 264
61917: PUSH
61918: LD_INT 26
61920: PUSH
61921: EMPTY
61922: LIST
61923: IN
61924: IFFALSE 61945
// points := [ 120 , 30 , 80 ] ;
61926: LD_ADDR_VAR 0 9
61930: PUSH
61931: LD_INT 120
61933: PUSH
61934: LD_INT 30
61936: PUSH
61937: LD_INT 80
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: LIST
61944: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
61945: LD_VAR 0 6
61949: PPUSH
61950: CALL_OW 264
61954: PUSH
61955: LD_INT 22
61957: PUSH
61958: EMPTY
61959: LIST
61960: IN
61961: IFFALSE 61982
// points := [ 40 , 1 , 1 ] ;
61963: LD_ADDR_VAR 0 9
61967: PUSH
61968: LD_INT 40
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: LIST
61981: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
61982: LD_VAR 0 6
61986: PPUSH
61987: CALL_OW 264
61991: PUSH
61992: LD_INT 29
61994: PUSH
61995: EMPTY
61996: LIST
61997: IN
61998: IFFALSE 62019
// points := [ 70 , 200 , 400 ] ;
62000: LD_ADDR_VAR 0 9
62004: PUSH
62005: LD_INT 70
62007: PUSH
62008: LD_INT 200
62010: PUSH
62011: LD_INT 400
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: LIST
62018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
62019: LD_VAR 0 6
62023: PPUSH
62024: CALL_OW 264
62028: PUSH
62029: LD_INT 14
62031: PUSH
62032: LD_INT 53
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: IN
62039: IFFALSE 62060
// points := [ 40 , 10 , 20 ] ;
62041: LD_ADDR_VAR 0 9
62045: PUSH
62046: LD_INT 40
62048: PUSH
62049: LD_INT 10
62051: PUSH
62052: LD_INT 20
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: LIST
62059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
62060: LD_VAR 0 6
62064: PPUSH
62065: CALL_OW 264
62069: PUSH
62070: LD_INT 9
62072: PUSH
62073: EMPTY
62074: LIST
62075: IN
62076: IFFALSE 62097
// points := [ 5 , 70 , 20 ] ;
62078: LD_ADDR_VAR 0 9
62082: PUSH
62083: LD_INT 5
62085: PUSH
62086: LD_INT 70
62088: PUSH
62089: LD_INT 20
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: LIST
62096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
62097: LD_VAR 0 6
62101: PPUSH
62102: CALL_OW 264
62106: PUSH
62107: LD_INT 10
62109: PUSH
62110: EMPTY
62111: LIST
62112: IN
62113: IFFALSE 62134
// points := [ 35 , 110 , 70 ] ;
62115: LD_ADDR_VAR 0 9
62119: PUSH
62120: LD_INT 35
62122: PUSH
62123: LD_INT 110
62125: PUSH
62126: LD_INT 70
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: LIST
62133: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
62134: LD_VAR 0 6
62138: PPUSH
62139: CALL_OW 265
62143: PUSH
62144: LD_INT 25
62146: EQUAL
62147: IFFALSE 62168
// points := [ 80 , 65 , 100 ] ;
62149: LD_ADDR_VAR 0 9
62153: PUSH
62154: LD_INT 80
62156: PUSH
62157: LD_INT 65
62159: PUSH
62160: LD_INT 100
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: LIST
62167: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
62168: LD_VAR 0 6
62172: PPUSH
62173: CALL_OW 263
62177: PUSH
62178: LD_INT 1
62180: EQUAL
62181: IFFALSE 62216
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
62183: LD_ADDR_VAR 0 10
62187: PUSH
62188: LD_VAR 0 10
62192: PUSH
62193: LD_VAR 0 6
62197: PPUSH
62198: CALL_OW 311
62202: PPUSH
62203: LD_INT 3
62205: PPUSH
62206: CALL_OW 259
62210: PUSH
62211: LD_INT 4
62213: MUL
62214: MUL
62215: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
62216: LD_VAR 0 6
62220: PPUSH
62221: CALL_OW 263
62225: PUSH
62226: LD_INT 2
62228: EQUAL
62229: IFFALSE 62280
// begin j := IsControledBy ( i ) ;
62231: LD_ADDR_VAR 0 7
62235: PUSH
62236: LD_VAR 0 6
62240: PPUSH
62241: CALL_OW 312
62245: ST_TO_ADDR
// if j then
62246: LD_VAR 0 7
62250: IFFALSE 62280
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
62252: LD_ADDR_VAR 0 10
62256: PUSH
62257: LD_VAR 0 10
62261: PUSH
62262: LD_VAR 0 7
62266: PPUSH
62267: LD_INT 3
62269: PPUSH
62270: CALL_OW 259
62274: PUSH
62275: LD_INT 3
62277: MUL
62278: MUL
62279: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
62280: LD_VAR 0 6
62284: PPUSH
62285: CALL_OW 264
62289: PUSH
62290: LD_INT 5
62292: PUSH
62293: LD_INT 6
62295: PUSH
62296: LD_INT 46
62298: PUSH
62299: LD_INT 44
62301: PUSH
62302: LD_INT 47
62304: PUSH
62305: LD_INT 45
62307: PUSH
62308: LD_INT 28
62310: PUSH
62311: LD_INT 7
62313: PUSH
62314: LD_INT 27
62316: PUSH
62317: LD_INT 29
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: IN
62332: PUSH
62333: LD_VAR 0 1
62337: PPUSH
62338: LD_INT 52
62340: PPUSH
62341: CALL_OW 321
62345: PUSH
62346: LD_INT 2
62348: EQUAL
62349: AND
62350: IFFALSE 62367
// bpoints := bpoints * 1.2 ;
62352: LD_ADDR_VAR 0 10
62356: PUSH
62357: LD_VAR 0 10
62361: PUSH
62362: LD_REAL  1.20000000000000E+0000
62365: MUL
62366: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
62367: LD_VAR 0 6
62371: PPUSH
62372: CALL_OW 264
62376: PUSH
62377: LD_INT 6
62379: PUSH
62380: LD_INT 46
62382: PUSH
62383: LD_INT 47
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: LIST
62390: IN
62391: IFFALSE 62408
// bpoints := bpoints * 1.2 ;
62393: LD_ADDR_VAR 0 10
62397: PUSH
62398: LD_VAR 0 10
62402: PUSH
62403: LD_REAL  1.20000000000000E+0000
62406: MUL
62407: ST_TO_ADDR
// end ; unit_building :
62408: GO 62422
62410: LD_INT 3
62412: DOUBLE
62413: EQUAL
62414: IFTRUE 62418
62416: GO 62421
62418: POP
// ; end ;
62419: GO 62422
62421: POP
// for j = 1 to 3 do
62422: LD_ADDR_VAR 0 7
62426: PUSH
62427: DOUBLE
62428: LD_INT 1
62430: DEC
62431: ST_TO_ADDR
62432: LD_INT 3
62434: PUSH
62435: FOR_TO
62436: IFFALSE 62489
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
62438: LD_ADDR_VAR 0 5
62442: PUSH
62443: LD_VAR 0 5
62447: PPUSH
62448: LD_VAR 0 7
62452: PPUSH
62453: LD_VAR 0 5
62457: PUSH
62458: LD_VAR 0 7
62462: ARRAY
62463: PUSH
62464: LD_VAR 0 9
62468: PUSH
62469: LD_VAR 0 7
62473: ARRAY
62474: PUSH
62475: LD_VAR 0 10
62479: MUL
62480: PLUS
62481: PPUSH
62482: CALL_OW 1
62486: ST_TO_ADDR
62487: GO 62435
62489: POP
62490: POP
// end ;
62491: GO 60970
62493: POP
62494: POP
// result := Replace ( result , 4 , tmp ) ;
62495: LD_ADDR_VAR 0 5
62499: PUSH
62500: LD_VAR 0 5
62504: PPUSH
62505: LD_INT 4
62507: PPUSH
62508: LD_VAR 0 8
62512: PPUSH
62513: CALL_OW 1
62517: ST_TO_ADDR
// end ;
62518: LD_VAR 0 5
62522: RET
// export function DangerAtRange ( unit , range ) ; begin
62523: LD_INT 0
62525: PPUSH
// if not unit then
62526: LD_VAR 0 1
62530: NOT
62531: IFFALSE 62535
// exit ;
62533: GO 62580
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
62535: LD_ADDR_VAR 0 3
62539: PUSH
62540: LD_VAR 0 1
62544: PPUSH
62545: CALL_OW 255
62549: PPUSH
62550: LD_VAR 0 1
62554: PPUSH
62555: CALL_OW 250
62559: PPUSH
62560: LD_VAR 0 1
62564: PPUSH
62565: CALL_OW 251
62569: PPUSH
62570: LD_VAR 0 2
62574: PPUSH
62575: CALL 60822 0 4
62579: ST_TO_ADDR
// end ;
62580: LD_VAR 0 3
62584: RET
// export function DangerInArea ( side , area ) ; begin
62585: LD_INT 0
62587: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
62588: LD_ADDR_VAR 0 3
62592: PUSH
62593: LD_VAR 0 2
62597: PPUSH
62598: LD_INT 81
62600: PUSH
62601: LD_VAR 0 1
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PPUSH
62610: CALL_OW 70
62614: ST_TO_ADDR
// end ;
62615: LD_VAR 0 3
62619: RET
// export function IsExtension ( b ) ; begin
62620: LD_INT 0
62622: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
62623: LD_ADDR_VAR 0 2
62627: PUSH
62628: LD_VAR 0 1
62632: PUSH
62633: LD_INT 23
62635: PUSH
62636: LD_INT 20
62638: PUSH
62639: LD_INT 22
62641: PUSH
62642: LD_INT 17
62644: PUSH
62645: LD_INT 24
62647: PUSH
62648: LD_INT 21
62650: PUSH
62651: LD_INT 19
62653: PUSH
62654: LD_INT 16
62656: PUSH
62657: LD_INT 25
62659: PUSH
62660: LD_INT 18
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: IN
62675: ST_TO_ADDR
// end ;
62676: LD_VAR 0 2
62680: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
62681: LD_INT 0
62683: PPUSH
62684: PPUSH
62685: PPUSH
// result := [ ] ;
62686: LD_ADDR_VAR 0 4
62690: PUSH
62691: EMPTY
62692: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
62693: LD_ADDR_VAR 0 5
62697: PUSH
62698: LD_VAR 0 2
62702: PPUSH
62703: LD_INT 21
62705: PUSH
62706: LD_INT 3
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PPUSH
62713: CALL_OW 70
62717: ST_TO_ADDR
// if not tmp then
62718: LD_VAR 0 5
62722: NOT
62723: IFFALSE 62727
// exit ;
62725: GO 62791
// if checkLink then
62727: LD_VAR 0 3
62731: IFFALSE 62781
// begin for i in tmp do
62733: LD_ADDR_VAR 0 6
62737: PUSH
62738: LD_VAR 0 5
62742: PUSH
62743: FOR_IN
62744: IFFALSE 62779
// if GetBase ( i ) <> base then
62746: LD_VAR 0 6
62750: PPUSH
62751: CALL_OW 274
62755: PUSH
62756: LD_VAR 0 1
62760: NONEQUAL
62761: IFFALSE 62777
// ComLinkToBase ( base , i ) ;
62763: LD_VAR 0 1
62767: PPUSH
62768: LD_VAR 0 6
62772: PPUSH
62773: CALL_OW 169
62777: GO 62743
62779: POP
62780: POP
// end ; result := tmp ;
62781: LD_ADDR_VAR 0 4
62785: PUSH
62786: LD_VAR 0 5
62790: ST_TO_ADDR
// end ;
62791: LD_VAR 0 4
62795: RET
// export function ComComplete ( units , b ) ; var i ; begin
62796: LD_INT 0
62798: PPUSH
62799: PPUSH
// if not units then
62800: LD_VAR 0 1
62804: NOT
62805: IFFALSE 62809
// exit ;
62807: GO 62899
// for i in units do
62809: LD_ADDR_VAR 0 4
62813: PUSH
62814: LD_VAR 0 1
62818: PUSH
62819: FOR_IN
62820: IFFALSE 62897
// if BuildingStatus ( b ) = bs_build then
62822: LD_VAR 0 2
62826: PPUSH
62827: CALL_OW 461
62831: PUSH
62832: LD_INT 1
62834: EQUAL
62835: IFFALSE 62895
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
62837: LD_VAR 0 4
62841: PPUSH
62842: LD_STRING h
62844: PUSH
62845: LD_VAR 0 2
62849: PPUSH
62850: CALL_OW 250
62854: PUSH
62855: LD_VAR 0 2
62859: PPUSH
62860: CALL_OW 251
62864: PUSH
62865: LD_VAR 0 2
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: PUSH
62888: EMPTY
62889: LIST
62890: PPUSH
62891: CALL_OW 446
62895: GO 62819
62897: POP
62898: POP
// end ;
62899: LD_VAR 0 3
62903: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
62904: LD_INT 0
62906: PPUSH
62907: PPUSH
62908: PPUSH
62909: PPUSH
62910: PPUSH
62911: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
62912: LD_VAR 0 1
62916: NOT
62917: PUSH
62918: LD_VAR 0 1
62922: PPUSH
62923: CALL_OW 263
62927: PUSH
62928: LD_INT 2
62930: NONEQUAL
62931: OR
62932: IFFALSE 62936
// exit ;
62934: GO 63252
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
62936: LD_ADDR_VAR 0 6
62940: PUSH
62941: LD_INT 22
62943: PUSH
62944: LD_VAR 0 1
62948: PPUSH
62949: CALL_OW 255
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 2
62960: PUSH
62961: LD_INT 30
62963: PUSH
62964: LD_INT 36
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 34
62973: PUSH
62974: LD_INT 31
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: LIST
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PPUSH
62990: CALL_OW 69
62994: ST_TO_ADDR
// if not tmp then
62995: LD_VAR 0 6
62999: NOT
63000: IFFALSE 63004
// exit ;
63002: GO 63252
// result := [ ] ;
63004: LD_ADDR_VAR 0 2
63008: PUSH
63009: EMPTY
63010: ST_TO_ADDR
// for i in tmp do
63011: LD_ADDR_VAR 0 3
63015: PUSH
63016: LD_VAR 0 6
63020: PUSH
63021: FOR_IN
63022: IFFALSE 63093
// begin t := UnitsInside ( i ) ;
63024: LD_ADDR_VAR 0 4
63028: PUSH
63029: LD_VAR 0 3
63033: PPUSH
63034: CALL_OW 313
63038: ST_TO_ADDR
// if t then
63039: LD_VAR 0 4
63043: IFFALSE 63091
// for j in t do
63045: LD_ADDR_VAR 0 7
63049: PUSH
63050: LD_VAR 0 4
63054: PUSH
63055: FOR_IN
63056: IFFALSE 63089
// result := Replace ( result , result + 1 , j ) ;
63058: LD_ADDR_VAR 0 2
63062: PUSH
63063: LD_VAR 0 2
63067: PPUSH
63068: LD_VAR 0 2
63072: PUSH
63073: LD_INT 1
63075: PLUS
63076: PPUSH
63077: LD_VAR 0 7
63081: PPUSH
63082: CALL_OW 1
63086: ST_TO_ADDR
63087: GO 63055
63089: POP
63090: POP
// end ;
63091: GO 63021
63093: POP
63094: POP
// if not result then
63095: LD_VAR 0 2
63099: NOT
63100: IFFALSE 63104
// exit ;
63102: GO 63252
// mech := result [ 1 ] ;
63104: LD_ADDR_VAR 0 5
63108: PUSH
63109: LD_VAR 0 2
63113: PUSH
63114: LD_INT 1
63116: ARRAY
63117: ST_TO_ADDR
// if result > 1 then
63118: LD_VAR 0 2
63122: PUSH
63123: LD_INT 1
63125: GREATER
63126: IFFALSE 63238
// begin for i = 2 to result do
63128: LD_ADDR_VAR 0 3
63132: PUSH
63133: DOUBLE
63134: LD_INT 2
63136: DEC
63137: ST_TO_ADDR
63138: LD_VAR 0 2
63142: PUSH
63143: FOR_TO
63144: IFFALSE 63236
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
63146: LD_ADDR_VAR 0 4
63150: PUSH
63151: LD_VAR 0 2
63155: PUSH
63156: LD_VAR 0 3
63160: ARRAY
63161: PPUSH
63162: LD_INT 3
63164: PPUSH
63165: CALL_OW 259
63169: PUSH
63170: LD_VAR 0 2
63174: PUSH
63175: LD_VAR 0 3
63179: ARRAY
63180: PPUSH
63181: CALL_OW 432
63185: MINUS
63186: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
63187: LD_VAR 0 4
63191: PUSH
63192: LD_VAR 0 5
63196: PPUSH
63197: LD_INT 3
63199: PPUSH
63200: CALL_OW 259
63204: PUSH
63205: LD_VAR 0 5
63209: PPUSH
63210: CALL_OW 432
63214: MINUS
63215: GREATEREQUAL
63216: IFFALSE 63234
// mech := result [ i ] ;
63218: LD_ADDR_VAR 0 5
63222: PUSH
63223: LD_VAR 0 2
63227: PUSH
63228: LD_VAR 0 3
63232: ARRAY
63233: ST_TO_ADDR
// end ;
63234: GO 63143
63236: POP
63237: POP
// end ; ComLinkTo ( vehicle , mech ) ;
63238: LD_VAR 0 1
63242: PPUSH
63243: LD_VAR 0 5
63247: PPUSH
63248: CALL_OW 135
// end ;
63252: LD_VAR 0 2
63256: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
63257: LD_INT 0
63259: PPUSH
63260: PPUSH
63261: PPUSH
63262: PPUSH
63263: PPUSH
63264: PPUSH
63265: PPUSH
63266: PPUSH
63267: PPUSH
63268: PPUSH
63269: PPUSH
63270: PPUSH
63271: PPUSH
// result := [ ] ;
63272: LD_ADDR_VAR 0 7
63276: PUSH
63277: EMPTY
63278: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
63279: LD_VAR 0 1
63283: PPUSH
63284: CALL_OW 266
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: IN
63299: NOT
63300: IFFALSE 63304
// exit ;
63302: GO 64938
// if name then
63304: LD_VAR 0 3
63308: IFFALSE 63324
// SetBName ( base_dep , name ) ;
63310: LD_VAR 0 1
63314: PPUSH
63315: LD_VAR 0 3
63319: PPUSH
63320: CALL_OW 500
// base := GetBase ( base_dep ) ;
63324: LD_ADDR_VAR 0 15
63328: PUSH
63329: LD_VAR 0 1
63333: PPUSH
63334: CALL_OW 274
63338: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
63339: LD_ADDR_VAR 0 16
63343: PUSH
63344: LD_VAR 0 1
63348: PPUSH
63349: CALL_OW 255
63353: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
63354: LD_ADDR_VAR 0 17
63358: PUSH
63359: LD_VAR 0 1
63363: PPUSH
63364: CALL_OW 248
63368: ST_TO_ADDR
// if sources then
63369: LD_VAR 0 5
63373: IFFALSE 63420
// for i = 1 to 3 do
63375: LD_ADDR_VAR 0 8
63379: PUSH
63380: DOUBLE
63381: LD_INT 1
63383: DEC
63384: ST_TO_ADDR
63385: LD_INT 3
63387: PUSH
63388: FOR_TO
63389: IFFALSE 63418
// AddResourceType ( base , i , sources [ i ] ) ;
63391: LD_VAR 0 15
63395: PPUSH
63396: LD_VAR 0 8
63400: PPUSH
63401: LD_VAR 0 5
63405: PUSH
63406: LD_VAR 0 8
63410: ARRAY
63411: PPUSH
63412: CALL_OW 276
63416: GO 63388
63418: POP
63419: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
63420: LD_ADDR_VAR 0 18
63424: PUSH
63425: LD_VAR 0 15
63429: PPUSH
63430: LD_VAR 0 2
63434: PPUSH
63435: LD_INT 1
63437: PPUSH
63438: CALL 62681 0 3
63442: ST_TO_ADDR
// InitHc ;
63443: CALL_OW 19
// InitUc ;
63447: CALL_OW 18
// uc_side := side ;
63451: LD_ADDR_OWVAR 20
63455: PUSH
63456: LD_VAR 0 16
63460: ST_TO_ADDR
// uc_nation := nation ;
63461: LD_ADDR_OWVAR 21
63465: PUSH
63466: LD_VAR 0 17
63470: ST_TO_ADDR
// if buildings then
63471: LD_VAR 0 18
63475: IFFALSE 64797
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
63477: LD_ADDR_VAR 0 19
63481: PUSH
63482: LD_VAR 0 18
63486: PPUSH
63487: LD_INT 2
63489: PUSH
63490: LD_INT 30
63492: PUSH
63493: LD_INT 29
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 30
63502: PUSH
63503: LD_INT 30
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: LIST
63514: PPUSH
63515: CALL_OW 72
63519: ST_TO_ADDR
// if tmp then
63520: LD_VAR 0 19
63524: IFFALSE 63572
// for i in tmp do
63526: LD_ADDR_VAR 0 8
63530: PUSH
63531: LD_VAR 0 19
63535: PUSH
63536: FOR_IN
63537: IFFALSE 63570
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
63539: LD_VAR 0 8
63543: PPUSH
63544: CALL_OW 250
63548: PPUSH
63549: LD_VAR 0 8
63553: PPUSH
63554: CALL_OW 251
63558: PPUSH
63559: LD_VAR 0 16
63563: PPUSH
63564: CALL_OW 441
63568: GO 63536
63570: POP
63571: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
63572: LD_VAR 0 18
63576: PPUSH
63577: LD_INT 2
63579: PUSH
63580: LD_INT 30
63582: PUSH
63583: LD_INT 32
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 30
63592: PUSH
63593: LD_INT 33
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: PPUSH
63605: CALL_OW 72
63609: IFFALSE 63697
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
63611: LD_ADDR_VAR 0 8
63615: PUSH
63616: LD_VAR 0 18
63620: PPUSH
63621: LD_INT 2
63623: PUSH
63624: LD_INT 30
63626: PUSH
63627: LD_INT 32
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 30
63636: PUSH
63637: LD_INT 33
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: LIST
63648: PPUSH
63649: CALL_OW 72
63653: PUSH
63654: FOR_IN
63655: IFFALSE 63695
// begin if not GetBWeapon ( i ) then
63657: LD_VAR 0 8
63661: PPUSH
63662: CALL_OW 269
63666: NOT
63667: IFFALSE 63693
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
63669: LD_VAR 0 8
63673: PPUSH
63674: LD_VAR 0 8
63678: PPUSH
63679: LD_VAR 0 2
63683: PPUSH
63684: CALL 64943 0 2
63688: PPUSH
63689: CALL_OW 431
// end ;
63693: GO 63654
63695: POP
63696: POP
// end ; for i = 1 to personel do
63697: LD_ADDR_VAR 0 8
63701: PUSH
63702: DOUBLE
63703: LD_INT 1
63705: DEC
63706: ST_TO_ADDR
63707: LD_VAR 0 6
63711: PUSH
63712: FOR_TO
63713: IFFALSE 64777
// begin if i > 4 then
63715: LD_VAR 0 8
63719: PUSH
63720: LD_INT 4
63722: GREATER
63723: IFFALSE 63727
// break ;
63725: GO 64777
// case i of 1 :
63727: LD_VAR 0 8
63731: PUSH
63732: LD_INT 1
63734: DOUBLE
63735: EQUAL
63736: IFTRUE 63740
63738: GO 63820
63740: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
63741: LD_ADDR_VAR 0 12
63745: PUSH
63746: LD_VAR 0 18
63750: PPUSH
63751: LD_INT 22
63753: PUSH
63754: LD_VAR 0 16
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 58
63765: PUSH
63766: EMPTY
63767: LIST
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: LD_INT 30
63774: PUSH
63775: LD_INT 32
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 30
63784: PUSH
63785: LD_INT 4
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 30
63794: PUSH
63795: LD_INT 5
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: LIST
63806: LIST
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: LIST
63812: PPUSH
63813: CALL_OW 72
63817: ST_TO_ADDR
63818: GO 64042
63820: LD_INT 2
63822: DOUBLE
63823: EQUAL
63824: IFTRUE 63828
63826: GO 63890
63828: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
63829: LD_ADDR_VAR 0 12
63833: PUSH
63834: LD_VAR 0 18
63838: PPUSH
63839: LD_INT 22
63841: PUSH
63842: LD_VAR 0 16
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 2
63853: PUSH
63854: LD_INT 30
63856: PUSH
63857: LD_INT 0
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 30
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: LIST
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PPUSH
63883: CALL_OW 72
63887: ST_TO_ADDR
63888: GO 64042
63890: LD_INT 3
63892: DOUBLE
63893: EQUAL
63894: IFTRUE 63898
63896: GO 63960
63898: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
63899: LD_ADDR_VAR 0 12
63903: PUSH
63904: LD_VAR 0 18
63908: PPUSH
63909: LD_INT 22
63911: PUSH
63912: LD_VAR 0 16
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 2
63923: PUSH
63924: LD_INT 30
63926: PUSH
63927: LD_INT 2
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 30
63936: PUSH
63937: LD_INT 3
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: LIST
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PPUSH
63953: CALL_OW 72
63957: ST_TO_ADDR
63958: GO 64042
63960: LD_INT 4
63962: DOUBLE
63963: EQUAL
63964: IFTRUE 63968
63966: GO 64041
63968: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
63969: LD_ADDR_VAR 0 12
63973: PUSH
63974: LD_VAR 0 18
63978: PPUSH
63979: LD_INT 22
63981: PUSH
63982: LD_VAR 0 16
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 2
63993: PUSH
63994: LD_INT 30
63996: PUSH
63997: LD_INT 6
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 30
64006: PUSH
64007: LD_INT 7
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 30
64016: PUSH
64017: LD_INT 8
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PPUSH
64034: CALL_OW 72
64038: ST_TO_ADDR
64039: GO 64042
64041: POP
// if i = 1 then
64042: LD_VAR 0 8
64046: PUSH
64047: LD_INT 1
64049: EQUAL
64050: IFFALSE 64161
// begin tmp := [ ] ;
64052: LD_ADDR_VAR 0 19
64056: PUSH
64057: EMPTY
64058: ST_TO_ADDR
// for j in f do
64059: LD_ADDR_VAR 0 9
64063: PUSH
64064: LD_VAR 0 12
64068: PUSH
64069: FOR_IN
64070: IFFALSE 64143
// if GetBType ( j ) = b_bunker then
64072: LD_VAR 0 9
64076: PPUSH
64077: CALL_OW 266
64081: PUSH
64082: LD_INT 32
64084: EQUAL
64085: IFFALSE 64112
// tmp := Insert ( tmp , 1 , j ) else
64087: LD_ADDR_VAR 0 19
64091: PUSH
64092: LD_VAR 0 19
64096: PPUSH
64097: LD_INT 1
64099: PPUSH
64100: LD_VAR 0 9
64104: PPUSH
64105: CALL_OW 2
64109: ST_TO_ADDR
64110: GO 64141
// tmp := Insert ( tmp , tmp + 1 , j ) ;
64112: LD_ADDR_VAR 0 19
64116: PUSH
64117: LD_VAR 0 19
64121: PPUSH
64122: LD_VAR 0 19
64126: PUSH
64127: LD_INT 1
64129: PLUS
64130: PPUSH
64131: LD_VAR 0 9
64135: PPUSH
64136: CALL_OW 2
64140: ST_TO_ADDR
64141: GO 64069
64143: POP
64144: POP
// if tmp then
64145: LD_VAR 0 19
64149: IFFALSE 64161
// f := tmp ;
64151: LD_ADDR_VAR 0 12
64155: PUSH
64156: LD_VAR 0 19
64160: ST_TO_ADDR
// end ; x := personel [ i ] ;
64161: LD_ADDR_VAR 0 13
64165: PUSH
64166: LD_VAR 0 6
64170: PUSH
64171: LD_VAR 0 8
64175: ARRAY
64176: ST_TO_ADDR
// if x = - 1 then
64177: LD_VAR 0 13
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: EQUAL
64186: IFFALSE 64395
// begin for j in f do
64188: LD_ADDR_VAR 0 9
64192: PUSH
64193: LD_VAR 0 12
64197: PUSH
64198: FOR_IN
64199: IFFALSE 64391
// repeat InitHc ;
64201: CALL_OW 19
// if GetBType ( j ) = b_barracks then
64205: LD_VAR 0 9
64209: PPUSH
64210: CALL_OW 266
64214: PUSH
64215: LD_INT 5
64217: EQUAL
64218: IFFALSE 64288
// begin if UnitsInside ( j ) < 3 then
64220: LD_VAR 0 9
64224: PPUSH
64225: CALL_OW 313
64229: PUSH
64230: LD_INT 3
64232: LESS
64233: IFFALSE 64269
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64235: LD_INT 0
64237: PPUSH
64238: LD_INT 5
64240: PUSH
64241: LD_INT 8
64243: PUSH
64244: LD_INT 9
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: LIST
64251: PUSH
64252: LD_VAR 0 17
64256: ARRAY
64257: PPUSH
64258: LD_VAR 0 4
64262: PPUSH
64263: CALL_OW 380
64267: GO 64286
// PrepareHuman ( false , i , skill ) ;
64269: LD_INT 0
64271: PPUSH
64272: LD_VAR 0 8
64276: PPUSH
64277: LD_VAR 0 4
64281: PPUSH
64282: CALL_OW 380
// end else
64286: GO 64305
// PrepareHuman ( false , i , skill ) ;
64288: LD_INT 0
64290: PPUSH
64291: LD_VAR 0 8
64295: PPUSH
64296: LD_VAR 0 4
64300: PPUSH
64301: CALL_OW 380
// un := CreateHuman ;
64305: LD_ADDR_VAR 0 14
64309: PUSH
64310: CALL_OW 44
64314: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64315: LD_ADDR_VAR 0 7
64319: PUSH
64320: LD_VAR 0 7
64324: PPUSH
64325: LD_INT 1
64327: PPUSH
64328: LD_VAR 0 14
64332: PPUSH
64333: CALL_OW 2
64337: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
64338: LD_VAR 0 14
64342: PPUSH
64343: LD_VAR 0 9
64347: PPUSH
64348: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
64352: LD_VAR 0 9
64356: PPUSH
64357: CALL_OW 313
64361: PUSH
64362: LD_INT 6
64364: EQUAL
64365: PUSH
64366: LD_VAR 0 9
64370: PPUSH
64371: CALL_OW 266
64375: PUSH
64376: LD_INT 32
64378: PUSH
64379: LD_INT 31
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: IN
64386: OR
64387: IFFALSE 64201
64389: GO 64198
64391: POP
64392: POP
// end else
64393: GO 64775
// for j = 1 to x do
64395: LD_ADDR_VAR 0 9
64399: PUSH
64400: DOUBLE
64401: LD_INT 1
64403: DEC
64404: ST_TO_ADDR
64405: LD_VAR 0 13
64409: PUSH
64410: FOR_TO
64411: IFFALSE 64773
// begin InitHc ;
64413: CALL_OW 19
// if not f then
64417: LD_VAR 0 12
64421: NOT
64422: IFFALSE 64511
// begin PrepareHuman ( false , i , skill ) ;
64424: LD_INT 0
64426: PPUSH
64427: LD_VAR 0 8
64431: PPUSH
64432: LD_VAR 0 4
64436: PPUSH
64437: CALL_OW 380
// un := CreateHuman ;
64441: LD_ADDR_VAR 0 14
64445: PUSH
64446: CALL_OW 44
64450: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64451: LD_ADDR_VAR 0 7
64455: PUSH
64456: LD_VAR 0 7
64460: PPUSH
64461: LD_INT 1
64463: PPUSH
64464: LD_VAR 0 14
64468: PPUSH
64469: CALL_OW 2
64473: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
64474: LD_VAR 0 14
64478: PPUSH
64479: LD_VAR 0 1
64483: PPUSH
64484: CALL_OW 250
64488: PPUSH
64489: LD_VAR 0 1
64493: PPUSH
64494: CALL_OW 251
64498: PPUSH
64499: LD_INT 10
64501: PPUSH
64502: LD_INT 0
64504: PPUSH
64505: CALL_OW 50
// continue ;
64509: GO 64410
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
64511: LD_VAR 0 12
64515: PUSH
64516: LD_INT 1
64518: ARRAY
64519: PPUSH
64520: CALL_OW 313
64524: PUSH
64525: LD_VAR 0 12
64529: PUSH
64530: LD_INT 1
64532: ARRAY
64533: PPUSH
64534: CALL_OW 266
64538: PUSH
64539: LD_INT 32
64541: PUSH
64542: LD_INT 31
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: IN
64549: AND
64550: PUSH
64551: LD_VAR 0 12
64555: PUSH
64556: LD_INT 1
64558: ARRAY
64559: PPUSH
64560: CALL_OW 313
64564: PUSH
64565: LD_INT 6
64567: EQUAL
64568: OR
64569: IFFALSE 64589
// f := Delete ( f , 1 ) ;
64571: LD_ADDR_VAR 0 12
64575: PUSH
64576: LD_VAR 0 12
64580: PPUSH
64581: LD_INT 1
64583: PPUSH
64584: CALL_OW 3
64588: ST_TO_ADDR
// if not f then
64589: LD_VAR 0 12
64593: NOT
64594: IFFALSE 64612
// begin x := x + 2 ;
64596: LD_ADDR_VAR 0 13
64600: PUSH
64601: LD_VAR 0 13
64605: PUSH
64606: LD_INT 2
64608: PLUS
64609: ST_TO_ADDR
// continue ;
64610: GO 64410
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
64612: LD_VAR 0 12
64616: PUSH
64617: LD_INT 1
64619: ARRAY
64620: PPUSH
64621: CALL_OW 266
64625: PUSH
64626: LD_INT 5
64628: EQUAL
64629: IFFALSE 64703
// begin if UnitsInside ( f [ 1 ] ) < 3 then
64631: LD_VAR 0 12
64635: PUSH
64636: LD_INT 1
64638: ARRAY
64639: PPUSH
64640: CALL_OW 313
64644: PUSH
64645: LD_INT 3
64647: LESS
64648: IFFALSE 64684
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64650: LD_INT 0
64652: PPUSH
64653: LD_INT 5
64655: PUSH
64656: LD_INT 8
64658: PUSH
64659: LD_INT 9
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: LIST
64666: PUSH
64667: LD_VAR 0 17
64671: ARRAY
64672: PPUSH
64673: LD_VAR 0 4
64677: PPUSH
64678: CALL_OW 380
64682: GO 64701
// PrepareHuman ( false , i , skill ) ;
64684: LD_INT 0
64686: PPUSH
64687: LD_VAR 0 8
64691: PPUSH
64692: LD_VAR 0 4
64696: PPUSH
64697: CALL_OW 380
// end else
64701: GO 64720
// PrepareHuman ( false , i , skill ) ;
64703: LD_INT 0
64705: PPUSH
64706: LD_VAR 0 8
64710: PPUSH
64711: LD_VAR 0 4
64715: PPUSH
64716: CALL_OW 380
// un := CreateHuman ;
64720: LD_ADDR_VAR 0 14
64724: PUSH
64725: CALL_OW 44
64729: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64730: LD_ADDR_VAR 0 7
64734: PUSH
64735: LD_VAR 0 7
64739: PPUSH
64740: LD_INT 1
64742: PPUSH
64743: LD_VAR 0 14
64747: PPUSH
64748: CALL_OW 2
64752: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
64753: LD_VAR 0 14
64757: PPUSH
64758: LD_VAR 0 12
64762: PUSH
64763: LD_INT 1
64765: ARRAY
64766: PPUSH
64767: CALL_OW 52
// end ;
64771: GO 64410
64773: POP
64774: POP
// end ;
64775: GO 63712
64777: POP
64778: POP
// result := result ^ buildings ;
64779: LD_ADDR_VAR 0 7
64783: PUSH
64784: LD_VAR 0 7
64788: PUSH
64789: LD_VAR 0 18
64793: ADD
64794: ST_TO_ADDR
// end else
64795: GO 64938
// begin for i = 1 to personel do
64797: LD_ADDR_VAR 0 8
64801: PUSH
64802: DOUBLE
64803: LD_INT 1
64805: DEC
64806: ST_TO_ADDR
64807: LD_VAR 0 6
64811: PUSH
64812: FOR_TO
64813: IFFALSE 64936
// begin if i > 4 then
64815: LD_VAR 0 8
64819: PUSH
64820: LD_INT 4
64822: GREATER
64823: IFFALSE 64827
// break ;
64825: GO 64936
// x := personel [ i ] ;
64827: LD_ADDR_VAR 0 13
64831: PUSH
64832: LD_VAR 0 6
64836: PUSH
64837: LD_VAR 0 8
64841: ARRAY
64842: ST_TO_ADDR
// if x = - 1 then
64843: LD_VAR 0 13
64847: PUSH
64848: LD_INT 1
64850: NEG
64851: EQUAL
64852: IFFALSE 64856
// continue ;
64854: GO 64812
// PrepareHuman ( false , i , skill ) ;
64856: LD_INT 0
64858: PPUSH
64859: LD_VAR 0 8
64863: PPUSH
64864: LD_VAR 0 4
64868: PPUSH
64869: CALL_OW 380
// un := CreateHuman ;
64873: LD_ADDR_VAR 0 14
64877: PUSH
64878: CALL_OW 44
64882: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
64883: LD_VAR 0 14
64887: PPUSH
64888: LD_VAR 0 1
64892: PPUSH
64893: CALL_OW 250
64897: PPUSH
64898: LD_VAR 0 1
64902: PPUSH
64903: CALL_OW 251
64907: PPUSH
64908: LD_INT 10
64910: PPUSH
64911: LD_INT 0
64913: PPUSH
64914: CALL_OW 50
// result := result ^ un ;
64918: LD_ADDR_VAR 0 7
64922: PUSH
64923: LD_VAR 0 7
64927: PUSH
64928: LD_VAR 0 14
64932: ADD
64933: ST_TO_ADDR
// end ;
64934: GO 64812
64936: POP
64937: POP
// end ; end ;
64938: LD_VAR 0 7
64942: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
64943: LD_INT 0
64945: PPUSH
64946: PPUSH
64947: PPUSH
64948: PPUSH
64949: PPUSH
64950: PPUSH
64951: PPUSH
64952: PPUSH
64953: PPUSH
64954: PPUSH
64955: PPUSH
64956: PPUSH
64957: PPUSH
64958: PPUSH
64959: PPUSH
64960: PPUSH
// result := false ;
64961: LD_ADDR_VAR 0 3
64965: PUSH
64966: LD_INT 0
64968: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
64969: LD_VAR 0 1
64973: NOT
64974: PUSH
64975: LD_VAR 0 1
64979: PPUSH
64980: CALL_OW 266
64984: PUSH
64985: LD_INT 32
64987: PUSH
64988: LD_INT 33
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: IN
64995: NOT
64996: OR
64997: IFFALSE 65001
// exit ;
64999: GO 66110
// nat := GetNation ( tower ) ;
65001: LD_ADDR_VAR 0 12
65005: PUSH
65006: LD_VAR 0 1
65010: PPUSH
65011: CALL_OW 248
65015: ST_TO_ADDR
// side := GetSide ( tower ) ;
65016: LD_ADDR_VAR 0 16
65020: PUSH
65021: LD_VAR 0 1
65025: PPUSH
65026: CALL_OW 255
65030: ST_TO_ADDR
// x := GetX ( tower ) ;
65031: LD_ADDR_VAR 0 10
65035: PUSH
65036: LD_VAR 0 1
65040: PPUSH
65041: CALL_OW 250
65045: ST_TO_ADDR
// y := GetY ( tower ) ;
65046: LD_ADDR_VAR 0 11
65050: PUSH
65051: LD_VAR 0 1
65055: PPUSH
65056: CALL_OW 251
65060: ST_TO_ADDR
// if not x or not y then
65061: LD_VAR 0 10
65065: NOT
65066: PUSH
65067: LD_VAR 0 11
65071: NOT
65072: OR
65073: IFFALSE 65077
// exit ;
65075: GO 66110
// weapon := 0 ;
65077: LD_ADDR_VAR 0 18
65081: PUSH
65082: LD_INT 0
65084: ST_TO_ADDR
// fac_list := [ ] ;
65085: LD_ADDR_VAR 0 17
65089: PUSH
65090: EMPTY
65091: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
65092: LD_ADDR_VAR 0 6
65096: PUSH
65097: LD_VAR 0 1
65101: PPUSH
65102: CALL_OW 274
65106: PPUSH
65107: LD_VAR 0 2
65111: PPUSH
65112: LD_INT 0
65114: PPUSH
65115: CALL 62681 0 3
65119: PPUSH
65120: LD_INT 30
65122: PUSH
65123: LD_INT 3
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PPUSH
65130: CALL_OW 72
65134: ST_TO_ADDR
// if not factories then
65135: LD_VAR 0 6
65139: NOT
65140: IFFALSE 65144
// exit ;
65142: GO 66110
// for i in factories do
65144: LD_ADDR_VAR 0 8
65148: PUSH
65149: LD_VAR 0 6
65153: PUSH
65154: FOR_IN
65155: IFFALSE 65180
// fac_list := fac_list union AvailableWeaponList ( i ) ;
65157: LD_ADDR_VAR 0 17
65161: PUSH
65162: LD_VAR 0 17
65166: PUSH
65167: LD_VAR 0 8
65171: PPUSH
65172: CALL_OW 478
65176: UNION
65177: ST_TO_ADDR
65178: GO 65154
65180: POP
65181: POP
// if not fac_list then
65182: LD_VAR 0 17
65186: NOT
65187: IFFALSE 65191
// exit ;
65189: GO 66110
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
65191: LD_ADDR_VAR 0 5
65195: PUSH
65196: LD_INT 4
65198: PUSH
65199: LD_INT 5
65201: PUSH
65202: LD_INT 9
65204: PUSH
65205: LD_INT 10
65207: PUSH
65208: LD_INT 6
65210: PUSH
65211: LD_INT 7
65213: PUSH
65214: LD_INT 11
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 27
65228: PUSH
65229: LD_INT 28
65231: PUSH
65232: LD_INT 26
65234: PUSH
65235: LD_INT 30
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 43
65246: PUSH
65247: LD_INT 44
65249: PUSH
65250: LD_INT 46
65252: PUSH
65253: LD_INT 45
65255: PUSH
65256: LD_INT 47
65258: PUSH
65259: LD_INT 49
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: LIST
65274: PUSH
65275: LD_VAR 0 12
65279: ARRAY
65280: ST_TO_ADDR
// list := list isect fac_list ;
65281: LD_ADDR_VAR 0 5
65285: PUSH
65286: LD_VAR 0 5
65290: PUSH
65291: LD_VAR 0 17
65295: ISECT
65296: ST_TO_ADDR
// if not list then
65297: LD_VAR 0 5
65301: NOT
65302: IFFALSE 65306
// exit ;
65304: GO 66110
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
65306: LD_VAR 0 12
65310: PUSH
65311: LD_INT 3
65313: EQUAL
65314: PUSH
65315: LD_INT 49
65317: PUSH
65318: LD_VAR 0 5
65322: IN
65323: AND
65324: PUSH
65325: LD_INT 31
65327: PPUSH
65328: LD_VAR 0 16
65332: PPUSH
65333: CALL_OW 321
65337: PUSH
65338: LD_INT 2
65340: EQUAL
65341: AND
65342: IFFALSE 65402
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
65344: LD_INT 22
65346: PUSH
65347: LD_VAR 0 16
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 35
65358: PUSH
65359: LD_INT 49
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 91
65368: PUSH
65369: LD_VAR 0 1
65373: PUSH
65374: LD_INT 10
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: LIST
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: LIST
65386: PPUSH
65387: CALL_OW 69
65391: NOT
65392: IFFALSE 65402
// weapon := ru_time_lapser ;
65394: LD_ADDR_VAR 0 18
65398: PUSH
65399: LD_INT 49
65401: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
65402: LD_VAR 0 12
65406: PUSH
65407: LD_INT 1
65409: PUSH
65410: LD_INT 2
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: IN
65417: PUSH
65418: LD_INT 11
65420: PUSH
65421: LD_VAR 0 5
65425: IN
65426: PUSH
65427: LD_INT 30
65429: PUSH
65430: LD_VAR 0 5
65434: IN
65435: OR
65436: AND
65437: PUSH
65438: LD_INT 6
65440: PPUSH
65441: LD_VAR 0 16
65445: PPUSH
65446: CALL_OW 321
65450: PUSH
65451: LD_INT 2
65453: EQUAL
65454: AND
65455: IFFALSE 65620
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
65457: LD_INT 22
65459: PUSH
65460: LD_VAR 0 16
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 2
65471: PUSH
65472: LD_INT 35
65474: PUSH
65475: LD_INT 11
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 35
65484: PUSH
65485: LD_INT 30
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 91
65499: PUSH
65500: LD_VAR 0 1
65504: PUSH
65505: LD_INT 18
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: LIST
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: LIST
65517: PPUSH
65518: CALL_OW 69
65522: NOT
65523: PUSH
65524: LD_INT 22
65526: PUSH
65527: LD_VAR 0 16
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 2
65538: PUSH
65539: LD_INT 30
65541: PUSH
65542: LD_INT 32
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 30
65551: PUSH
65552: LD_INT 33
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 91
65566: PUSH
65567: LD_VAR 0 1
65571: PUSH
65572: LD_INT 12
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: LIST
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: LIST
65584: PUSH
65585: EMPTY
65586: LIST
65587: PPUSH
65588: CALL_OW 69
65592: PUSH
65593: LD_INT 2
65595: GREATER
65596: AND
65597: IFFALSE 65620
// weapon := [ us_radar , ar_radar ] [ nat ] ;
65599: LD_ADDR_VAR 0 18
65603: PUSH
65604: LD_INT 11
65606: PUSH
65607: LD_INT 30
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_VAR 0 12
65618: ARRAY
65619: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
65620: LD_VAR 0 18
65624: NOT
65625: PUSH
65626: LD_INT 40
65628: PPUSH
65629: LD_VAR 0 16
65633: PPUSH
65634: CALL_OW 321
65638: PUSH
65639: LD_INT 2
65641: EQUAL
65642: AND
65643: PUSH
65644: LD_INT 7
65646: PUSH
65647: LD_VAR 0 5
65651: IN
65652: PUSH
65653: LD_INT 28
65655: PUSH
65656: LD_VAR 0 5
65660: IN
65661: OR
65662: PUSH
65663: LD_INT 45
65665: PUSH
65666: LD_VAR 0 5
65670: IN
65671: OR
65672: AND
65673: IFFALSE 65927
// begin hex := GetHexInfo ( x , y ) ;
65675: LD_ADDR_VAR 0 4
65679: PUSH
65680: LD_VAR 0 10
65684: PPUSH
65685: LD_VAR 0 11
65689: PPUSH
65690: CALL_OW 546
65694: ST_TO_ADDR
// if hex [ 1 ] then
65695: LD_VAR 0 4
65699: PUSH
65700: LD_INT 1
65702: ARRAY
65703: IFFALSE 65707
// exit ;
65705: GO 66110
// height := hex [ 2 ] ;
65707: LD_ADDR_VAR 0 15
65711: PUSH
65712: LD_VAR 0 4
65716: PUSH
65717: LD_INT 2
65719: ARRAY
65720: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
65721: LD_ADDR_VAR 0 14
65725: PUSH
65726: LD_INT 0
65728: PUSH
65729: LD_INT 2
65731: PUSH
65732: LD_INT 3
65734: PUSH
65735: LD_INT 5
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: ST_TO_ADDR
// for i in tmp do
65744: LD_ADDR_VAR 0 8
65748: PUSH
65749: LD_VAR 0 14
65753: PUSH
65754: FOR_IN
65755: IFFALSE 65925
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
65757: LD_ADDR_VAR 0 9
65761: PUSH
65762: LD_VAR 0 10
65766: PPUSH
65767: LD_VAR 0 8
65771: PPUSH
65772: LD_INT 5
65774: PPUSH
65775: CALL_OW 272
65779: PUSH
65780: LD_VAR 0 11
65784: PPUSH
65785: LD_VAR 0 8
65789: PPUSH
65790: LD_INT 5
65792: PPUSH
65793: CALL_OW 273
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
65802: LD_VAR 0 9
65806: PUSH
65807: LD_INT 1
65809: ARRAY
65810: PPUSH
65811: LD_VAR 0 9
65815: PUSH
65816: LD_INT 2
65818: ARRAY
65819: PPUSH
65820: CALL_OW 488
65824: IFFALSE 65923
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
65826: LD_ADDR_VAR 0 4
65830: PUSH
65831: LD_VAR 0 9
65835: PUSH
65836: LD_INT 1
65838: ARRAY
65839: PPUSH
65840: LD_VAR 0 9
65844: PUSH
65845: LD_INT 2
65847: ARRAY
65848: PPUSH
65849: CALL_OW 546
65853: ST_TO_ADDR
// if hex [ 1 ] then
65854: LD_VAR 0 4
65858: PUSH
65859: LD_INT 1
65861: ARRAY
65862: IFFALSE 65866
// continue ;
65864: GO 65754
// h := hex [ 2 ] ;
65866: LD_ADDR_VAR 0 13
65870: PUSH
65871: LD_VAR 0 4
65875: PUSH
65876: LD_INT 2
65878: ARRAY
65879: ST_TO_ADDR
// if h + 7 < height then
65880: LD_VAR 0 13
65884: PUSH
65885: LD_INT 7
65887: PLUS
65888: PUSH
65889: LD_VAR 0 15
65893: LESS
65894: IFFALSE 65923
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
65896: LD_ADDR_VAR 0 18
65900: PUSH
65901: LD_INT 7
65903: PUSH
65904: LD_INT 28
65906: PUSH
65907: LD_INT 45
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: LIST
65914: PUSH
65915: LD_VAR 0 12
65919: ARRAY
65920: ST_TO_ADDR
// break ;
65921: GO 65925
// end ; end ; end ;
65923: GO 65754
65925: POP
65926: POP
// end ; if not weapon then
65927: LD_VAR 0 18
65931: NOT
65932: IFFALSE 65992
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
65934: LD_ADDR_VAR 0 5
65938: PUSH
65939: LD_VAR 0 5
65943: PUSH
65944: LD_INT 11
65946: PUSH
65947: LD_INT 30
65949: PUSH
65950: LD_INT 49
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: LIST
65957: DIFF
65958: ST_TO_ADDR
// if not list then
65959: LD_VAR 0 5
65963: NOT
65964: IFFALSE 65968
// exit ;
65966: GO 66110
// weapon := list [ rand ( 1 , list ) ] ;
65968: LD_ADDR_VAR 0 18
65972: PUSH
65973: LD_VAR 0 5
65977: PUSH
65978: LD_INT 1
65980: PPUSH
65981: LD_VAR 0 5
65985: PPUSH
65986: CALL_OW 12
65990: ARRAY
65991: ST_TO_ADDR
// end ; if weapon then
65992: LD_VAR 0 18
65996: IFFALSE 66110
// begin tmp := CostOfWeapon ( weapon ) ;
65998: LD_ADDR_VAR 0 14
66002: PUSH
66003: LD_VAR 0 18
66007: PPUSH
66008: CALL_OW 451
66012: ST_TO_ADDR
// j := GetBase ( tower ) ;
66013: LD_ADDR_VAR 0 9
66017: PUSH
66018: LD_VAR 0 1
66022: PPUSH
66023: CALL_OW 274
66027: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
66028: LD_VAR 0 9
66032: PPUSH
66033: LD_INT 1
66035: PPUSH
66036: CALL_OW 275
66040: PUSH
66041: LD_VAR 0 14
66045: PUSH
66046: LD_INT 1
66048: ARRAY
66049: GREATEREQUAL
66050: PUSH
66051: LD_VAR 0 9
66055: PPUSH
66056: LD_INT 2
66058: PPUSH
66059: CALL_OW 275
66063: PUSH
66064: LD_VAR 0 14
66068: PUSH
66069: LD_INT 2
66071: ARRAY
66072: GREATEREQUAL
66073: AND
66074: PUSH
66075: LD_VAR 0 9
66079: PPUSH
66080: LD_INT 3
66082: PPUSH
66083: CALL_OW 275
66087: PUSH
66088: LD_VAR 0 14
66092: PUSH
66093: LD_INT 3
66095: ARRAY
66096: GREATEREQUAL
66097: AND
66098: IFFALSE 66110
// result := weapon ;
66100: LD_ADDR_VAR 0 3
66104: PUSH
66105: LD_VAR 0 18
66109: ST_TO_ADDR
// end ; end ;
66110: LD_VAR 0 3
66114: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
66115: LD_INT 0
66117: PPUSH
66118: PPUSH
// result := true ;
66119: LD_ADDR_VAR 0 3
66123: PUSH
66124: LD_INT 1
66126: ST_TO_ADDR
// if array1 = array2 then
66127: LD_VAR 0 1
66131: PUSH
66132: LD_VAR 0 2
66136: EQUAL
66137: IFFALSE 66197
// begin for i = 1 to array1 do
66139: LD_ADDR_VAR 0 4
66143: PUSH
66144: DOUBLE
66145: LD_INT 1
66147: DEC
66148: ST_TO_ADDR
66149: LD_VAR 0 1
66153: PUSH
66154: FOR_TO
66155: IFFALSE 66193
// if array1 [ i ] <> array2 [ i ] then
66157: LD_VAR 0 1
66161: PUSH
66162: LD_VAR 0 4
66166: ARRAY
66167: PUSH
66168: LD_VAR 0 2
66172: PUSH
66173: LD_VAR 0 4
66177: ARRAY
66178: NONEQUAL
66179: IFFALSE 66191
// begin result := false ;
66181: LD_ADDR_VAR 0 3
66185: PUSH
66186: LD_INT 0
66188: ST_TO_ADDR
// break ;
66189: GO 66193
// end ;
66191: GO 66154
66193: POP
66194: POP
// end else
66195: GO 66205
// result := false ;
66197: LD_ADDR_VAR 0 3
66201: PUSH
66202: LD_INT 0
66204: ST_TO_ADDR
// end ;
66205: LD_VAR 0 3
66209: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
66210: LD_INT 0
66212: PPUSH
66213: PPUSH
// if not array1 or not array2 then
66214: LD_VAR 0 1
66218: NOT
66219: PUSH
66220: LD_VAR 0 2
66224: NOT
66225: OR
66226: IFFALSE 66230
// exit ;
66228: GO 66294
// result := true ;
66230: LD_ADDR_VAR 0 3
66234: PUSH
66235: LD_INT 1
66237: ST_TO_ADDR
// for i = 1 to array1 do
66238: LD_ADDR_VAR 0 4
66242: PUSH
66243: DOUBLE
66244: LD_INT 1
66246: DEC
66247: ST_TO_ADDR
66248: LD_VAR 0 1
66252: PUSH
66253: FOR_TO
66254: IFFALSE 66292
// if array1 [ i ] <> array2 [ i ] then
66256: LD_VAR 0 1
66260: PUSH
66261: LD_VAR 0 4
66265: ARRAY
66266: PUSH
66267: LD_VAR 0 2
66271: PUSH
66272: LD_VAR 0 4
66276: ARRAY
66277: NONEQUAL
66278: IFFALSE 66290
// begin result := false ;
66280: LD_ADDR_VAR 0 3
66284: PUSH
66285: LD_INT 0
66287: ST_TO_ADDR
// break ;
66288: GO 66292
// end ;
66290: GO 66253
66292: POP
66293: POP
// end ;
66294: LD_VAR 0 3
66298: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
66299: LD_INT 0
66301: PPUSH
66302: PPUSH
66303: PPUSH
// pom := GetBase ( fac ) ;
66304: LD_ADDR_VAR 0 5
66308: PUSH
66309: LD_VAR 0 1
66313: PPUSH
66314: CALL_OW 274
66318: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
66319: LD_ADDR_VAR 0 4
66323: PUSH
66324: LD_VAR 0 2
66328: PUSH
66329: LD_INT 1
66331: ARRAY
66332: PPUSH
66333: LD_VAR 0 2
66337: PUSH
66338: LD_INT 2
66340: ARRAY
66341: PPUSH
66342: LD_VAR 0 2
66346: PUSH
66347: LD_INT 3
66349: ARRAY
66350: PPUSH
66351: LD_VAR 0 2
66355: PUSH
66356: LD_INT 4
66358: ARRAY
66359: PPUSH
66360: CALL_OW 449
66364: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66365: LD_ADDR_VAR 0 3
66369: PUSH
66370: LD_VAR 0 5
66374: PPUSH
66375: LD_INT 1
66377: PPUSH
66378: CALL_OW 275
66382: PUSH
66383: LD_VAR 0 4
66387: PUSH
66388: LD_INT 1
66390: ARRAY
66391: GREATEREQUAL
66392: PUSH
66393: LD_VAR 0 5
66397: PPUSH
66398: LD_INT 2
66400: PPUSH
66401: CALL_OW 275
66405: PUSH
66406: LD_VAR 0 4
66410: PUSH
66411: LD_INT 2
66413: ARRAY
66414: GREATEREQUAL
66415: AND
66416: PUSH
66417: LD_VAR 0 5
66421: PPUSH
66422: LD_INT 3
66424: PPUSH
66425: CALL_OW 275
66429: PUSH
66430: LD_VAR 0 4
66434: PUSH
66435: LD_INT 3
66437: ARRAY
66438: GREATEREQUAL
66439: AND
66440: ST_TO_ADDR
// end ;
66441: LD_VAR 0 3
66445: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
66446: LD_INT 0
66448: PPUSH
66449: PPUSH
66450: PPUSH
66451: PPUSH
// pom := GetBase ( building ) ;
66452: LD_ADDR_VAR 0 3
66456: PUSH
66457: LD_VAR 0 1
66461: PPUSH
66462: CALL_OW 274
66466: ST_TO_ADDR
// if not pom then
66467: LD_VAR 0 3
66471: NOT
66472: IFFALSE 66476
// exit ;
66474: GO 66646
// btype := GetBType ( building ) ;
66476: LD_ADDR_VAR 0 5
66480: PUSH
66481: LD_VAR 0 1
66485: PPUSH
66486: CALL_OW 266
66490: ST_TO_ADDR
// if btype = b_armoury then
66491: LD_VAR 0 5
66495: PUSH
66496: LD_INT 4
66498: EQUAL
66499: IFFALSE 66509
// btype := b_barracks ;
66501: LD_ADDR_VAR 0 5
66505: PUSH
66506: LD_INT 5
66508: ST_TO_ADDR
// if btype = b_depot then
66509: LD_VAR 0 5
66513: PUSH
66514: LD_INT 0
66516: EQUAL
66517: IFFALSE 66527
// btype := b_warehouse ;
66519: LD_ADDR_VAR 0 5
66523: PUSH
66524: LD_INT 1
66526: ST_TO_ADDR
// if btype = b_workshop then
66527: LD_VAR 0 5
66531: PUSH
66532: LD_INT 2
66534: EQUAL
66535: IFFALSE 66545
// btype := b_factory ;
66537: LD_ADDR_VAR 0 5
66541: PUSH
66542: LD_INT 3
66544: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
66545: LD_ADDR_VAR 0 4
66549: PUSH
66550: LD_VAR 0 5
66554: PPUSH
66555: LD_VAR 0 1
66559: PPUSH
66560: CALL_OW 248
66564: PPUSH
66565: CALL_OW 450
66569: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66570: LD_ADDR_VAR 0 2
66574: PUSH
66575: LD_VAR 0 3
66579: PPUSH
66580: LD_INT 1
66582: PPUSH
66583: CALL_OW 275
66587: PUSH
66588: LD_VAR 0 4
66592: PUSH
66593: LD_INT 1
66595: ARRAY
66596: GREATEREQUAL
66597: PUSH
66598: LD_VAR 0 3
66602: PPUSH
66603: LD_INT 2
66605: PPUSH
66606: CALL_OW 275
66610: PUSH
66611: LD_VAR 0 4
66615: PUSH
66616: LD_INT 2
66618: ARRAY
66619: GREATEREQUAL
66620: AND
66621: PUSH
66622: LD_VAR 0 3
66626: PPUSH
66627: LD_INT 3
66629: PPUSH
66630: CALL_OW 275
66634: PUSH
66635: LD_VAR 0 4
66639: PUSH
66640: LD_INT 3
66642: ARRAY
66643: GREATEREQUAL
66644: AND
66645: ST_TO_ADDR
// end ;
66646: LD_VAR 0 2
66650: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
66651: LD_INT 0
66653: PPUSH
66654: PPUSH
66655: PPUSH
// pom := GetBase ( building ) ;
66656: LD_ADDR_VAR 0 4
66660: PUSH
66661: LD_VAR 0 1
66665: PPUSH
66666: CALL_OW 274
66670: ST_TO_ADDR
// if not pom then
66671: LD_VAR 0 4
66675: NOT
66676: IFFALSE 66680
// exit ;
66678: GO 66781
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
66680: LD_ADDR_VAR 0 5
66684: PUSH
66685: LD_VAR 0 2
66689: PPUSH
66690: LD_VAR 0 1
66694: PPUSH
66695: CALL_OW 248
66699: PPUSH
66700: CALL_OW 450
66704: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66705: LD_ADDR_VAR 0 3
66709: PUSH
66710: LD_VAR 0 4
66714: PPUSH
66715: LD_INT 1
66717: PPUSH
66718: CALL_OW 275
66722: PUSH
66723: LD_VAR 0 5
66727: PUSH
66728: LD_INT 1
66730: ARRAY
66731: GREATEREQUAL
66732: PUSH
66733: LD_VAR 0 4
66737: PPUSH
66738: LD_INT 2
66740: PPUSH
66741: CALL_OW 275
66745: PUSH
66746: LD_VAR 0 5
66750: PUSH
66751: LD_INT 2
66753: ARRAY
66754: GREATEREQUAL
66755: AND
66756: PUSH
66757: LD_VAR 0 4
66761: PPUSH
66762: LD_INT 3
66764: PPUSH
66765: CALL_OW 275
66769: PUSH
66770: LD_VAR 0 5
66774: PUSH
66775: LD_INT 3
66777: ARRAY
66778: GREATEREQUAL
66779: AND
66780: ST_TO_ADDR
// end ;
66781: LD_VAR 0 3
66785: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
66786: LD_INT 0
66788: PPUSH
66789: PPUSH
66790: PPUSH
66791: PPUSH
66792: PPUSH
66793: PPUSH
66794: PPUSH
66795: PPUSH
66796: PPUSH
66797: PPUSH
66798: PPUSH
// result := false ;
66799: LD_ADDR_VAR 0 8
66803: PUSH
66804: LD_INT 0
66806: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
66807: LD_VAR 0 5
66811: NOT
66812: PUSH
66813: LD_VAR 0 1
66817: NOT
66818: OR
66819: PUSH
66820: LD_VAR 0 2
66824: NOT
66825: OR
66826: PUSH
66827: LD_VAR 0 3
66831: NOT
66832: OR
66833: IFFALSE 66837
// exit ;
66835: GO 67651
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
66837: LD_ADDR_VAR 0 14
66841: PUSH
66842: LD_VAR 0 1
66846: PPUSH
66847: LD_VAR 0 2
66851: PPUSH
66852: LD_VAR 0 3
66856: PPUSH
66857: LD_VAR 0 4
66861: PPUSH
66862: LD_VAR 0 5
66866: PUSH
66867: LD_INT 1
66869: ARRAY
66870: PPUSH
66871: CALL_OW 248
66875: PPUSH
66876: LD_INT 0
66878: PPUSH
66879: CALL 68904 0 6
66883: ST_TO_ADDR
// if not hexes then
66884: LD_VAR 0 14
66888: NOT
66889: IFFALSE 66893
// exit ;
66891: GO 67651
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66893: LD_ADDR_VAR 0 17
66897: PUSH
66898: LD_VAR 0 5
66902: PPUSH
66903: LD_INT 22
66905: PUSH
66906: LD_VAR 0 13
66910: PPUSH
66911: CALL_OW 255
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 2
66922: PUSH
66923: LD_INT 30
66925: PUSH
66926: LD_INT 0
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 30
66935: PUSH
66936: LD_INT 1
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: LIST
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PPUSH
66952: CALL_OW 72
66956: ST_TO_ADDR
// for i = 1 to hexes do
66957: LD_ADDR_VAR 0 9
66961: PUSH
66962: DOUBLE
66963: LD_INT 1
66965: DEC
66966: ST_TO_ADDR
66967: LD_VAR 0 14
66971: PUSH
66972: FOR_TO
66973: IFFALSE 67649
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66975: LD_ADDR_VAR 0 13
66979: PUSH
66980: LD_VAR 0 14
66984: PUSH
66985: LD_VAR 0 9
66989: ARRAY
66990: PUSH
66991: LD_INT 1
66993: ARRAY
66994: PPUSH
66995: LD_VAR 0 14
66999: PUSH
67000: LD_VAR 0 9
67004: ARRAY
67005: PUSH
67006: LD_INT 2
67008: ARRAY
67009: PPUSH
67010: CALL_OW 428
67014: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
67015: LD_VAR 0 14
67019: PUSH
67020: LD_VAR 0 9
67024: ARRAY
67025: PUSH
67026: LD_INT 1
67028: ARRAY
67029: PPUSH
67030: LD_VAR 0 14
67034: PUSH
67035: LD_VAR 0 9
67039: ARRAY
67040: PUSH
67041: LD_INT 2
67043: ARRAY
67044: PPUSH
67045: CALL_OW 351
67049: PUSH
67050: LD_VAR 0 14
67054: PUSH
67055: LD_VAR 0 9
67059: ARRAY
67060: PUSH
67061: LD_INT 1
67063: ARRAY
67064: PPUSH
67065: LD_VAR 0 14
67069: PUSH
67070: LD_VAR 0 9
67074: ARRAY
67075: PUSH
67076: LD_INT 2
67078: ARRAY
67079: PPUSH
67080: CALL_OW 488
67084: NOT
67085: OR
67086: PUSH
67087: LD_VAR 0 13
67091: PPUSH
67092: CALL_OW 247
67096: PUSH
67097: LD_INT 3
67099: EQUAL
67100: OR
67101: IFFALSE 67107
// exit ;
67103: POP
67104: POP
67105: GO 67651
// if not tmp then
67107: LD_VAR 0 13
67111: NOT
67112: IFFALSE 67116
// continue ;
67114: GO 66972
// result := true ;
67116: LD_ADDR_VAR 0 8
67120: PUSH
67121: LD_INT 1
67123: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
67124: LD_VAR 0 6
67128: PUSH
67129: LD_VAR 0 13
67133: PPUSH
67134: CALL_OW 247
67138: PUSH
67139: LD_INT 2
67141: EQUAL
67142: AND
67143: PUSH
67144: LD_VAR 0 13
67148: PPUSH
67149: CALL_OW 263
67153: PUSH
67154: LD_INT 1
67156: EQUAL
67157: AND
67158: IFFALSE 67322
// begin if IsDrivenBy ( tmp ) then
67160: LD_VAR 0 13
67164: PPUSH
67165: CALL_OW 311
67169: IFFALSE 67173
// continue ;
67171: GO 66972
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
67173: LD_VAR 0 6
67177: PPUSH
67178: LD_INT 3
67180: PUSH
67181: LD_INT 60
67183: PUSH
67184: EMPTY
67185: LIST
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 3
67193: PUSH
67194: LD_INT 55
67196: PUSH
67197: EMPTY
67198: LIST
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PPUSH
67208: CALL_OW 72
67212: IFFALSE 67320
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
67214: LD_ADDR_VAR 0 18
67218: PUSH
67219: LD_VAR 0 6
67223: PPUSH
67224: LD_INT 3
67226: PUSH
67227: LD_INT 60
67229: PUSH
67230: EMPTY
67231: LIST
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 3
67239: PUSH
67240: LD_INT 55
67242: PUSH
67243: EMPTY
67244: LIST
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PPUSH
67254: CALL_OW 72
67258: PUSH
67259: LD_INT 1
67261: ARRAY
67262: ST_TO_ADDR
// if IsInUnit ( driver ) then
67263: LD_VAR 0 18
67267: PPUSH
67268: CALL_OW 310
67272: IFFALSE 67283
// ComExit ( driver ) ;
67274: LD_VAR 0 18
67278: PPUSH
67279: CALL 92685 0 1
// AddComEnterUnit ( driver , tmp ) ;
67283: LD_VAR 0 18
67287: PPUSH
67288: LD_VAR 0 13
67292: PPUSH
67293: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
67297: LD_VAR 0 18
67301: PPUSH
67302: LD_VAR 0 7
67306: PPUSH
67307: CALL_OW 173
// AddComExitVehicle ( driver ) ;
67311: LD_VAR 0 18
67315: PPUSH
67316: CALL_OW 181
// end ; continue ;
67320: GO 66972
// end ; if not cleaners or not tmp in cleaners then
67322: LD_VAR 0 6
67326: NOT
67327: PUSH
67328: LD_VAR 0 13
67332: PUSH
67333: LD_VAR 0 6
67337: IN
67338: NOT
67339: OR
67340: IFFALSE 67647
// begin if dep then
67342: LD_VAR 0 17
67346: IFFALSE 67482
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
67348: LD_ADDR_VAR 0 16
67352: PUSH
67353: LD_VAR 0 17
67357: PUSH
67358: LD_INT 1
67360: ARRAY
67361: PPUSH
67362: CALL_OW 250
67366: PPUSH
67367: LD_VAR 0 17
67371: PUSH
67372: LD_INT 1
67374: ARRAY
67375: PPUSH
67376: CALL_OW 254
67380: PPUSH
67381: LD_INT 5
67383: PPUSH
67384: CALL_OW 272
67388: PUSH
67389: LD_VAR 0 17
67393: PUSH
67394: LD_INT 1
67396: ARRAY
67397: PPUSH
67398: CALL_OW 251
67402: PPUSH
67403: LD_VAR 0 17
67407: PUSH
67408: LD_INT 1
67410: ARRAY
67411: PPUSH
67412: CALL_OW 254
67416: PPUSH
67417: LD_INT 5
67419: PPUSH
67420: CALL_OW 273
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
67429: LD_VAR 0 16
67433: PUSH
67434: LD_INT 1
67436: ARRAY
67437: PPUSH
67438: LD_VAR 0 16
67442: PUSH
67443: LD_INT 2
67445: ARRAY
67446: PPUSH
67447: CALL_OW 488
67451: IFFALSE 67482
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
67453: LD_VAR 0 13
67457: PPUSH
67458: LD_VAR 0 16
67462: PUSH
67463: LD_INT 1
67465: ARRAY
67466: PPUSH
67467: LD_VAR 0 16
67471: PUSH
67472: LD_INT 2
67474: ARRAY
67475: PPUSH
67476: CALL_OW 111
// continue ;
67480: GO 66972
// end ; end ; r := GetDir ( tmp ) ;
67482: LD_ADDR_VAR 0 15
67486: PUSH
67487: LD_VAR 0 13
67491: PPUSH
67492: CALL_OW 254
67496: ST_TO_ADDR
// if r = 5 then
67497: LD_VAR 0 15
67501: PUSH
67502: LD_INT 5
67504: EQUAL
67505: IFFALSE 67515
// r := 0 ;
67507: LD_ADDR_VAR 0 15
67511: PUSH
67512: LD_INT 0
67514: ST_TO_ADDR
// for j = r to 5 do
67515: LD_ADDR_VAR 0 10
67519: PUSH
67520: DOUBLE
67521: LD_VAR 0 15
67525: DEC
67526: ST_TO_ADDR
67527: LD_INT 5
67529: PUSH
67530: FOR_TO
67531: IFFALSE 67645
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
67533: LD_ADDR_VAR 0 11
67537: PUSH
67538: LD_VAR 0 13
67542: PPUSH
67543: CALL_OW 250
67547: PPUSH
67548: LD_VAR 0 10
67552: PPUSH
67553: LD_INT 2
67555: PPUSH
67556: CALL_OW 272
67560: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
67561: LD_ADDR_VAR 0 12
67565: PUSH
67566: LD_VAR 0 13
67570: PPUSH
67571: CALL_OW 251
67575: PPUSH
67576: LD_VAR 0 10
67580: PPUSH
67581: LD_INT 2
67583: PPUSH
67584: CALL_OW 273
67588: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
67589: LD_VAR 0 11
67593: PPUSH
67594: LD_VAR 0 12
67598: PPUSH
67599: CALL_OW 488
67603: PUSH
67604: LD_VAR 0 11
67608: PPUSH
67609: LD_VAR 0 12
67613: PPUSH
67614: CALL_OW 428
67618: NOT
67619: AND
67620: IFFALSE 67643
// begin ComMoveXY ( tmp , _x , _y ) ;
67622: LD_VAR 0 13
67626: PPUSH
67627: LD_VAR 0 11
67631: PPUSH
67632: LD_VAR 0 12
67636: PPUSH
67637: CALL_OW 111
// break ;
67641: GO 67645
// end ; end ;
67643: GO 67530
67645: POP
67646: POP
// end ; end ;
67647: GO 66972
67649: POP
67650: POP
// end ;
67651: LD_VAR 0 8
67655: RET
// export function BuildingTechInvented ( side , btype ) ; begin
67656: LD_INT 0
67658: PPUSH
// result := true ;
67659: LD_ADDR_VAR 0 3
67663: PUSH
67664: LD_INT 1
67666: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
67667: LD_VAR 0 2
67671: PUSH
67672: LD_INT 24
67674: DOUBLE
67675: EQUAL
67676: IFTRUE 67686
67678: LD_INT 33
67680: DOUBLE
67681: EQUAL
67682: IFTRUE 67686
67684: GO 67711
67686: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
67687: LD_ADDR_VAR 0 3
67691: PUSH
67692: LD_INT 32
67694: PPUSH
67695: LD_VAR 0 1
67699: PPUSH
67700: CALL_OW 321
67704: PUSH
67705: LD_INT 2
67707: EQUAL
67708: ST_TO_ADDR
67709: GO 68027
67711: LD_INT 20
67713: DOUBLE
67714: EQUAL
67715: IFTRUE 67719
67717: GO 67744
67719: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
67720: LD_ADDR_VAR 0 3
67724: PUSH
67725: LD_INT 6
67727: PPUSH
67728: LD_VAR 0 1
67732: PPUSH
67733: CALL_OW 321
67737: PUSH
67738: LD_INT 2
67740: EQUAL
67741: ST_TO_ADDR
67742: GO 68027
67744: LD_INT 22
67746: DOUBLE
67747: EQUAL
67748: IFTRUE 67758
67750: LD_INT 36
67752: DOUBLE
67753: EQUAL
67754: IFTRUE 67758
67756: GO 67783
67758: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
67759: LD_ADDR_VAR 0 3
67763: PUSH
67764: LD_INT 15
67766: PPUSH
67767: LD_VAR 0 1
67771: PPUSH
67772: CALL_OW 321
67776: PUSH
67777: LD_INT 2
67779: EQUAL
67780: ST_TO_ADDR
67781: GO 68027
67783: LD_INT 30
67785: DOUBLE
67786: EQUAL
67787: IFTRUE 67791
67789: GO 67816
67791: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
67792: LD_ADDR_VAR 0 3
67796: PUSH
67797: LD_INT 20
67799: PPUSH
67800: LD_VAR 0 1
67804: PPUSH
67805: CALL_OW 321
67809: PUSH
67810: LD_INT 2
67812: EQUAL
67813: ST_TO_ADDR
67814: GO 68027
67816: LD_INT 28
67818: DOUBLE
67819: EQUAL
67820: IFTRUE 67830
67822: LD_INT 21
67824: DOUBLE
67825: EQUAL
67826: IFTRUE 67830
67828: GO 67855
67830: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
67831: LD_ADDR_VAR 0 3
67835: PUSH
67836: LD_INT 21
67838: PPUSH
67839: LD_VAR 0 1
67843: PPUSH
67844: CALL_OW 321
67848: PUSH
67849: LD_INT 2
67851: EQUAL
67852: ST_TO_ADDR
67853: GO 68027
67855: LD_INT 16
67857: DOUBLE
67858: EQUAL
67859: IFTRUE 67863
67861: GO 67888
67863: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
67864: LD_ADDR_VAR 0 3
67868: PUSH
67869: LD_INT 84
67871: PPUSH
67872: LD_VAR 0 1
67876: PPUSH
67877: CALL_OW 321
67881: PUSH
67882: LD_INT 2
67884: EQUAL
67885: ST_TO_ADDR
67886: GO 68027
67888: LD_INT 19
67890: DOUBLE
67891: EQUAL
67892: IFTRUE 67902
67894: LD_INT 23
67896: DOUBLE
67897: EQUAL
67898: IFTRUE 67902
67900: GO 67927
67902: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
67903: LD_ADDR_VAR 0 3
67907: PUSH
67908: LD_INT 83
67910: PPUSH
67911: LD_VAR 0 1
67915: PPUSH
67916: CALL_OW 321
67920: PUSH
67921: LD_INT 2
67923: EQUAL
67924: ST_TO_ADDR
67925: GO 68027
67927: LD_INT 17
67929: DOUBLE
67930: EQUAL
67931: IFTRUE 67935
67933: GO 67960
67935: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
67936: LD_ADDR_VAR 0 3
67940: PUSH
67941: LD_INT 39
67943: PPUSH
67944: LD_VAR 0 1
67948: PPUSH
67949: CALL_OW 321
67953: PUSH
67954: LD_INT 2
67956: EQUAL
67957: ST_TO_ADDR
67958: GO 68027
67960: LD_INT 18
67962: DOUBLE
67963: EQUAL
67964: IFTRUE 67968
67966: GO 67993
67968: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
67969: LD_ADDR_VAR 0 3
67973: PUSH
67974: LD_INT 40
67976: PPUSH
67977: LD_VAR 0 1
67981: PPUSH
67982: CALL_OW 321
67986: PUSH
67987: LD_INT 2
67989: EQUAL
67990: ST_TO_ADDR
67991: GO 68027
67993: LD_INT 27
67995: DOUBLE
67996: EQUAL
67997: IFTRUE 68001
67999: GO 68026
68001: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
68002: LD_ADDR_VAR 0 3
68006: PUSH
68007: LD_INT 35
68009: PPUSH
68010: LD_VAR 0 1
68014: PPUSH
68015: CALL_OW 321
68019: PUSH
68020: LD_INT 2
68022: EQUAL
68023: ST_TO_ADDR
68024: GO 68027
68026: POP
// end ;
68027: LD_VAR 0 3
68031: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
68032: LD_INT 0
68034: PPUSH
68035: PPUSH
68036: PPUSH
68037: PPUSH
68038: PPUSH
68039: PPUSH
68040: PPUSH
68041: PPUSH
68042: PPUSH
68043: PPUSH
68044: PPUSH
// result := false ;
68045: LD_ADDR_VAR 0 6
68049: PUSH
68050: LD_INT 0
68052: ST_TO_ADDR
// if btype = b_depot then
68053: LD_VAR 0 2
68057: PUSH
68058: LD_INT 0
68060: EQUAL
68061: IFFALSE 68073
// begin result := true ;
68063: LD_ADDR_VAR 0 6
68067: PUSH
68068: LD_INT 1
68070: ST_TO_ADDR
// exit ;
68071: GO 68899
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
68073: LD_VAR 0 1
68077: NOT
68078: PUSH
68079: LD_VAR 0 1
68083: PPUSH
68084: CALL_OW 266
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: LD_INT 1
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: IN
68099: NOT
68100: OR
68101: PUSH
68102: LD_VAR 0 2
68106: NOT
68107: OR
68108: PUSH
68109: LD_VAR 0 5
68113: PUSH
68114: LD_INT 0
68116: PUSH
68117: LD_INT 1
68119: PUSH
68120: LD_INT 2
68122: PUSH
68123: LD_INT 3
68125: PUSH
68126: LD_INT 4
68128: PUSH
68129: LD_INT 5
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: IN
68140: NOT
68141: OR
68142: PUSH
68143: LD_VAR 0 3
68147: PPUSH
68148: LD_VAR 0 4
68152: PPUSH
68153: CALL_OW 488
68157: NOT
68158: OR
68159: IFFALSE 68163
// exit ;
68161: GO 68899
// side := GetSide ( depot ) ;
68163: LD_ADDR_VAR 0 9
68167: PUSH
68168: LD_VAR 0 1
68172: PPUSH
68173: CALL_OW 255
68177: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
68178: LD_VAR 0 9
68182: PPUSH
68183: LD_VAR 0 2
68187: PPUSH
68188: CALL 67656 0 2
68192: NOT
68193: IFFALSE 68197
// exit ;
68195: GO 68899
// pom := GetBase ( depot ) ;
68197: LD_ADDR_VAR 0 10
68201: PUSH
68202: LD_VAR 0 1
68206: PPUSH
68207: CALL_OW 274
68211: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68212: LD_ADDR_VAR 0 11
68216: PUSH
68217: LD_VAR 0 2
68221: PPUSH
68222: LD_VAR 0 1
68226: PPUSH
68227: CALL_OW 248
68231: PPUSH
68232: CALL_OW 450
68236: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
68237: LD_VAR 0 10
68241: PPUSH
68242: LD_INT 1
68244: PPUSH
68245: CALL_OW 275
68249: PUSH
68250: LD_VAR 0 11
68254: PUSH
68255: LD_INT 1
68257: ARRAY
68258: GREATEREQUAL
68259: PUSH
68260: LD_VAR 0 10
68264: PPUSH
68265: LD_INT 2
68267: PPUSH
68268: CALL_OW 275
68272: PUSH
68273: LD_VAR 0 11
68277: PUSH
68278: LD_INT 2
68280: ARRAY
68281: GREATEREQUAL
68282: AND
68283: PUSH
68284: LD_VAR 0 10
68288: PPUSH
68289: LD_INT 3
68291: PPUSH
68292: CALL_OW 275
68296: PUSH
68297: LD_VAR 0 11
68301: PUSH
68302: LD_INT 3
68304: ARRAY
68305: GREATEREQUAL
68306: AND
68307: NOT
68308: IFFALSE 68312
// exit ;
68310: GO 68899
// if GetBType ( depot ) = b_depot then
68312: LD_VAR 0 1
68316: PPUSH
68317: CALL_OW 266
68321: PUSH
68322: LD_INT 0
68324: EQUAL
68325: IFFALSE 68337
// dist := 28 else
68327: LD_ADDR_VAR 0 14
68331: PUSH
68332: LD_INT 28
68334: ST_TO_ADDR
68335: GO 68345
// dist := 36 ;
68337: LD_ADDR_VAR 0 14
68341: PUSH
68342: LD_INT 36
68344: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
68345: LD_VAR 0 1
68349: PPUSH
68350: LD_VAR 0 3
68354: PPUSH
68355: LD_VAR 0 4
68359: PPUSH
68360: CALL_OW 297
68364: PUSH
68365: LD_VAR 0 14
68369: GREATER
68370: IFFALSE 68374
// exit ;
68372: GO 68899
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
68374: LD_ADDR_VAR 0 12
68378: PUSH
68379: LD_VAR 0 2
68383: PPUSH
68384: LD_VAR 0 3
68388: PPUSH
68389: LD_VAR 0 4
68393: PPUSH
68394: LD_VAR 0 5
68398: PPUSH
68399: LD_VAR 0 1
68403: PPUSH
68404: CALL_OW 248
68408: PPUSH
68409: LD_INT 0
68411: PPUSH
68412: CALL 68904 0 6
68416: ST_TO_ADDR
// if not hexes then
68417: LD_VAR 0 12
68421: NOT
68422: IFFALSE 68426
// exit ;
68424: GO 68899
// hex := GetHexInfo ( x , y ) ;
68426: LD_ADDR_VAR 0 15
68430: PUSH
68431: LD_VAR 0 3
68435: PPUSH
68436: LD_VAR 0 4
68440: PPUSH
68441: CALL_OW 546
68445: ST_TO_ADDR
// if hex [ 1 ] then
68446: LD_VAR 0 15
68450: PUSH
68451: LD_INT 1
68453: ARRAY
68454: IFFALSE 68458
// exit ;
68456: GO 68899
// height := hex [ 2 ] ;
68458: LD_ADDR_VAR 0 13
68462: PUSH
68463: LD_VAR 0 15
68467: PUSH
68468: LD_INT 2
68470: ARRAY
68471: ST_TO_ADDR
// for i = 1 to hexes do
68472: LD_ADDR_VAR 0 7
68476: PUSH
68477: DOUBLE
68478: LD_INT 1
68480: DEC
68481: ST_TO_ADDR
68482: LD_VAR 0 12
68486: PUSH
68487: FOR_TO
68488: IFFALSE 68818
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
68490: LD_VAR 0 12
68494: PUSH
68495: LD_VAR 0 7
68499: ARRAY
68500: PUSH
68501: LD_INT 1
68503: ARRAY
68504: PPUSH
68505: LD_VAR 0 12
68509: PUSH
68510: LD_VAR 0 7
68514: ARRAY
68515: PUSH
68516: LD_INT 2
68518: ARRAY
68519: PPUSH
68520: CALL_OW 488
68524: NOT
68525: PUSH
68526: LD_VAR 0 12
68530: PUSH
68531: LD_VAR 0 7
68535: ARRAY
68536: PUSH
68537: LD_INT 1
68539: ARRAY
68540: PPUSH
68541: LD_VAR 0 12
68545: PUSH
68546: LD_VAR 0 7
68550: ARRAY
68551: PUSH
68552: LD_INT 2
68554: ARRAY
68555: PPUSH
68556: CALL_OW 428
68560: PUSH
68561: LD_INT 0
68563: GREATER
68564: OR
68565: PUSH
68566: LD_VAR 0 12
68570: PUSH
68571: LD_VAR 0 7
68575: ARRAY
68576: PUSH
68577: LD_INT 1
68579: ARRAY
68580: PPUSH
68581: LD_VAR 0 12
68585: PUSH
68586: LD_VAR 0 7
68590: ARRAY
68591: PUSH
68592: LD_INT 2
68594: ARRAY
68595: PPUSH
68596: CALL_OW 351
68600: OR
68601: IFFALSE 68607
// exit ;
68603: POP
68604: POP
68605: GO 68899
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68607: LD_ADDR_VAR 0 8
68611: PUSH
68612: LD_VAR 0 12
68616: PUSH
68617: LD_VAR 0 7
68621: ARRAY
68622: PUSH
68623: LD_INT 1
68625: ARRAY
68626: PPUSH
68627: LD_VAR 0 12
68631: PUSH
68632: LD_VAR 0 7
68636: ARRAY
68637: PUSH
68638: LD_INT 2
68640: ARRAY
68641: PPUSH
68642: CALL_OW 546
68646: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
68647: LD_VAR 0 8
68651: PUSH
68652: LD_INT 1
68654: ARRAY
68655: PUSH
68656: LD_VAR 0 8
68660: PUSH
68661: LD_INT 2
68663: ARRAY
68664: PUSH
68665: LD_VAR 0 13
68669: PUSH
68670: LD_INT 2
68672: PLUS
68673: GREATER
68674: OR
68675: PUSH
68676: LD_VAR 0 8
68680: PUSH
68681: LD_INT 2
68683: ARRAY
68684: PUSH
68685: LD_VAR 0 13
68689: PUSH
68690: LD_INT 2
68692: MINUS
68693: LESS
68694: OR
68695: PUSH
68696: LD_VAR 0 8
68700: PUSH
68701: LD_INT 3
68703: ARRAY
68704: PUSH
68705: LD_INT 0
68707: PUSH
68708: LD_INT 8
68710: PUSH
68711: LD_INT 9
68713: PUSH
68714: LD_INT 10
68716: PUSH
68717: LD_INT 11
68719: PUSH
68720: LD_INT 12
68722: PUSH
68723: LD_INT 13
68725: PUSH
68726: LD_INT 16
68728: PUSH
68729: LD_INT 17
68731: PUSH
68732: LD_INT 18
68734: PUSH
68735: LD_INT 19
68737: PUSH
68738: LD_INT 20
68740: PUSH
68741: LD_INT 21
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: IN
68759: NOT
68760: OR
68761: PUSH
68762: LD_VAR 0 8
68766: PUSH
68767: LD_INT 5
68769: ARRAY
68770: NOT
68771: OR
68772: PUSH
68773: LD_VAR 0 8
68777: PUSH
68778: LD_INT 6
68780: ARRAY
68781: PUSH
68782: LD_INT 1
68784: PUSH
68785: LD_INT 2
68787: PUSH
68788: LD_INT 7
68790: PUSH
68791: LD_INT 9
68793: PUSH
68794: LD_INT 10
68796: PUSH
68797: LD_INT 11
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: IN
68808: NOT
68809: OR
68810: IFFALSE 68816
// exit ;
68812: POP
68813: POP
68814: GO 68899
// end ;
68816: GO 68487
68818: POP
68819: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
68820: LD_VAR 0 9
68824: PPUSH
68825: LD_VAR 0 3
68829: PPUSH
68830: LD_VAR 0 4
68834: PPUSH
68835: LD_INT 20
68837: PPUSH
68838: CALL 60822 0 4
68842: PUSH
68843: LD_INT 4
68845: ARRAY
68846: IFFALSE 68850
// exit ;
68848: GO 68899
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
68850: LD_VAR 0 2
68854: PUSH
68855: LD_INT 29
68857: PUSH
68858: LD_INT 30
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: IN
68865: PUSH
68866: LD_VAR 0 3
68870: PPUSH
68871: LD_VAR 0 4
68875: PPUSH
68876: LD_VAR 0 9
68880: PPUSH
68881: CALL_OW 440
68885: NOT
68886: AND
68887: IFFALSE 68891
// exit ;
68889: GO 68899
// result := true ;
68891: LD_ADDR_VAR 0 6
68895: PUSH
68896: LD_INT 1
68898: ST_TO_ADDR
// end ;
68899: LD_VAR 0 6
68903: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
68904: LD_INT 0
68906: PPUSH
68907: PPUSH
68908: PPUSH
68909: PPUSH
68910: PPUSH
68911: PPUSH
68912: PPUSH
68913: PPUSH
68914: PPUSH
68915: PPUSH
68916: PPUSH
68917: PPUSH
68918: PPUSH
68919: PPUSH
68920: PPUSH
68921: PPUSH
68922: PPUSH
68923: PPUSH
68924: PPUSH
68925: PPUSH
68926: PPUSH
68927: PPUSH
68928: PPUSH
68929: PPUSH
68930: PPUSH
68931: PPUSH
68932: PPUSH
68933: PPUSH
68934: PPUSH
68935: PPUSH
68936: PPUSH
68937: PPUSH
68938: PPUSH
68939: PPUSH
68940: PPUSH
68941: PPUSH
68942: PPUSH
68943: PPUSH
68944: PPUSH
68945: PPUSH
68946: PPUSH
68947: PPUSH
68948: PPUSH
68949: PPUSH
68950: PPUSH
68951: PPUSH
68952: PPUSH
68953: PPUSH
68954: PPUSH
68955: PPUSH
68956: PPUSH
68957: PPUSH
68958: PPUSH
68959: PPUSH
68960: PPUSH
68961: PPUSH
68962: PPUSH
68963: PPUSH
// result = [ ] ;
68964: LD_ADDR_VAR 0 7
68968: PUSH
68969: EMPTY
68970: ST_TO_ADDR
// temp_list = [ ] ;
68971: LD_ADDR_VAR 0 9
68975: PUSH
68976: EMPTY
68977: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
68978: LD_VAR 0 4
68982: PUSH
68983: LD_INT 0
68985: PUSH
68986: LD_INT 1
68988: PUSH
68989: LD_INT 2
68991: PUSH
68992: LD_INT 3
68994: PUSH
68995: LD_INT 4
68997: PUSH
68998: LD_INT 5
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: IN
69009: NOT
69010: PUSH
69011: LD_VAR 0 1
69015: PUSH
69016: LD_INT 0
69018: PUSH
69019: LD_INT 1
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: IN
69026: PUSH
69027: LD_VAR 0 5
69031: PUSH
69032: LD_INT 1
69034: PUSH
69035: LD_INT 2
69037: PUSH
69038: LD_INT 3
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: LIST
69045: IN
69046: NOT
69047: AND
69048: OR
69049: IFFALSE 69053
// exit ;
69051: GO 87444
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
69053: LD_VAR 0 1
69057: PUSH
69058: LD_INT 6
69060: PUSH
69061: LD_INT 7
69063: PUSH
69064: LD_INT 8
69066: PUSH
69067: LD_INT 13
69069: PUSH
69070: LD_INT 12
69072: PUSH
69073: LD_INT 15
69075: PUSH
69076: LD_INT 11
69078: PUSH
69079: LD_INT 14
69081: PUSH
69082: LD_INT 10
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: IN
69096: IFFALSE 69106
// btype = b_lab ;
69098: LD_ADDR_VAR 0 1
69102: PUSH
69103: LD_INT 6
69105: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
69106: LD_VAR 0 6
69110: PUSH
69111: LD_INT 0
69113: PUSH
69114: LD_INT 1
69116: PUSH
69117: LD_INT 2
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: LIST
69124: IN
69125: NOT
69126: PUSH
69127: LD_VAR 0 1
69131: PUSH
69132: LD_INT 0
69134: PUSH
69135: LD_INT 1
69137: PUSH
69138: LD_INT 2
69140: PUSH
69141: LD_INT 3
69143: PUSH
69144: LD_INT 6
69146: PUSH
69147: LD_INT 36
69149: PUSH
69150: LD_INT 4
69152: PUSH
69153: LD_INT 5
69155: PUSH
69156: LD_INT 31
69158: PUSH
69159: LD_INT 32
69161: PUSH
69162: LD_INT 33
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: IN
69178: NOT
69179: PUSH
69180: LD_VAR 0 6
69184: PUSH
69185: LD_INT 1
69187: EQUAL
69188: AND
69189: OR
69190: PUSH
69191: LD_VAR 0 1
69195: PUSH
69196: LD_INT 2
69198: PUSH
69199: LD_INT 3
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: IN
69206: NOT
69207: PUSH
69208: LD_VAR 0 6
69212: PUSH
69213: LD_INT 2
69215: EQUAL
69216: AND
69217: OR
69218: IFFALSE 69228
// mode = 0 ;
69220: LD_ADDR_VAR 0 6
69224: PUSH
69225: LD_INT 0
69227: ST_TO_ADDR
// case mode of 0 :
69228: LD_VAR 0 6
69232: PUSH
69233: LD_INT 0
69235: DOUBLE
69236: EQUAL
69237: IFTRUE 69241
69239: GO 80694
69241: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69242: LD_ADDR_VAR 0 11
69246: PUSH
69247: LD_INT 0
69249: PUSH
69250: LD_INT 0
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 0
69259: PUSH
69260: LD_INT 1
69262: NEG
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 1
69270: PUSH
69271: LD_INT 0
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 1
69280: PUSH
69281: LD_INT 1
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: LD_INT 1
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 1
69300: NEG
69301: PUSH
69302: LD_INT 0
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 1
69311: NEG
69312: PUSH
69313: LD_INT 1
69315: NEG
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 1
69323: NEG
69324: PUSH
69325: LD_INT 2
69327: NEG
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 0
69335: PUSH
69336: LD_INT 2
69338: NEG
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 1
69346: PUSH
69347: LD_INT 1
69349: NEG
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 1
69357: PUSH
69358: LD_INT 2
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 0
69367: PUSH
69368: LD_INT 2
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 1
69377: NEG
69378: PUSH
69379: LD_INT 1
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 1
69388: PUSH
69389: LD_INT 3
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 0
69398: PUSH
69399: LD_INT 3
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 1
69408: NEG
69409: PUSH
69410: LD_INT 2
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69435: LD_ADDR_VAR 0 12
69439: PUSH
69440: LD_INT 0
69442: PUSH
69443: LD_INT 0
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 0
69452: PUSH
69453: LD_INT 1
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 1
69463: PUSH
69464: LD_INT 0
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 1
69473: PUSH
69474: LD_INT 1
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 0
69483: PUSH
69484: LD_INT 1
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 1
69493: NEG
69494: PUSH
69495: LD_INT 0
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 1
69504: NEG
69505: PUSH
69506: LD_INT 1
69508: NEG
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: LD_INT 1
69516: PUSH
69517: LD_INT 1
69519: NEG
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 2
69527: PUSH
69528: LD_INT 0
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 2
69537: PUSH
69538: LD_INT 1
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 1
69547: NEG
69548: PUSH
69549: LD_INT 1
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 2
69558: NEG
69559: PUSH
69560: LD_INT 0
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 2
69569: NEG
69570: PUSH
69571: LD_INT 1
69573: NEG
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 2
69581: NEG
69582: PUSH
69583: LD_INT 1
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 3
69592: NEG
69593: PUSH
69594: LD_INT 0
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 3
69603: NEG
69604: PUSH
69605: LD_INT 1
69607: NEG
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: LIST
69622: LIST
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69631: LD_ADDR_VAR 0 13
69635: PUSH
69636: LD_INT 0
69638: PUSH
69639: LD_INT 0
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 0
69648: PUSH
69649: LD_INT 1
69651: NEG
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 1
69659: PUSH
69660: LD_INT 0
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 1
69669: PUSH
69670: LD_INT 1
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 0
69679: PUSH
69680: LD_INT 1
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 1
69689: NEG
69690: PUSH
69691: LD_INT 0
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 1
69700: NEG
69701: PUSH
69702: LD_INT 1
69704: NEG
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 1
69712: NEG
69713: PUSH
69714: LD_INT 2
69716: NEG
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 2
69724: PUSH
69725: LD_INT 1
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 2
69734: PUSH
69735: LD_INT 2
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 1
69744: PUSH
69745: LD_INT 2
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 2
69754: NEG
69755: PUSH
69756: LD_INT 1
69758: NEG
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 2
69766: NEG
69767: PUSH
69768: LD_INT 2
69770: NEG
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 2
69778: NEG
69779: PUSH
69780: LD_INT 3
69782: NEG
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 3
69790: NEG
69791: PUSH
69792: LD_INT 2
69794: NEG
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 3
69802: NEG
69803: PUSH
69804: LD_INT 3
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69830: LD_ADDR_VAR 0 14
69834: PUSH
69835: LD_INT 0
69837: PUSH
69838: LD_INT 0
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 0
69847: PUSH
69848: LD_INT 1
69850: NEG
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 1
69858: PUSH
69859: LD_INT 0
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 1
69868: PUSH
69869: LD_INT 1
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 0
69878: PUSH
69879: LD_INT 1
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 1
69888: NEG
69889: PUSH
69890: LD_INT 0
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 1
69899: NEG
69900: PUSH
69901: LD_INT 1
69903: NEG
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 1
69911: NEG
69912: PUSH
69913: LD_INT 2
69915: NEG
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 0
69923: PUSH
69924: LD_INT 2
69926: NEG
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 1
69934: PUSH
69935: LD_INT 1
69937: NEG
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 1
69945: PUSH
69946: LD_INT 2
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 0
69955: PUSH
69956: LD_INT 2
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 1
69965: NEG
69966: PUSH
69967: LD_INT 1
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 1
69976: NEG
69977: PUSH
69978: LD_INT 3
69980: NEG
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 0
69988: PUSH
69989: LD_INT 3
69991: NEG
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 1
69999: PUSH
70000: LD_INT 2
70002: NEG
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70026: LD_ADDR_VAR 0 15
70030: PUSH
70031: LD_INT 0
70033: PUSH
70034: LD_INT 0
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 0
70043: PUSH
70044: LD_INT 1
70046: NEG
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 1
70054: PUSH
70055: LD_INT 0
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 1
70064: PUSH
70065: LD_INT 1
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 0
70074: PUSH
70075: LD_INT 1
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 1
70084: NEG
70085: PUSH
70086: LD_INT 0
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 1
70095: NEG
70096: PUSH
70097: LD_INT 1
70099: NEG
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 1
70107: PUSH
70108: LD_INT 1
70110: NEG
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 2
70118: PUSH
70119: LD_INT 0
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 2
70128: PUSH
70129: LD_INT 1
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 1
70138: NEG
70139: PUSH
70140: LD_INT 1
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 2
70149: NEG
70150: PUSH
70151: LD_INT 0
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: LD_INT 2
70160: NEG
70161: PUSH
70162: LD_INT 1
70164: NEG
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 2
70172: PUSH
70173: LD_INT 1
70175: NEG
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 3
70183: PUSH
70184: LD_INT 0
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 3
70193: PUSH
70194: LD_INT 1
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70219: LD_ADDR_VAR 0 16
70223: PUSH
70224: LD_INT 0
70226: PUSH
70227: LD_INT 0
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 0
70236: PUSH
70237: LD_INT 1
70239: NEG
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 1
70247: PUSH
70248: LD_INT 0
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 1
70257: PUSH
70258: LD_INT 1
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 0
70267: PUSH
70268: LD_INT 1
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 1
70277: NEG
70278: PUSH
70279: LD_INT 0
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PUSH
70286: LD_INT 1
70288: NEG
70289: PUSH
70290: LD_INT 1
70292: NEG
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 1
70300: NEG
70301: PUSH
70302: LD_INT 2
70304: NEG
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 2
70312: PUSH
70313: LD_INT 1
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 2
70322: PUSH
70323: LD_INT 2
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 1
70332: PUSH
70333: LD_INT 2
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 2
70342: NEG
70343: PUSH
70344: LD_INT 1
70346: NEG
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 2
70354: NEG
70355: PUSH
70356: LD_INT 2
70358: NEG
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 3
70366: PUSH
70367: LD_INT 2
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 3
70376: PUSH
70377: LD_INT 3
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 2
70386: PUSH
70387: LD_INT 3
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70412: LD_ADDR_VAR 0 17
70416: PUSH
70417: LD_INT 0
70419: PUSH
70420: LD_INT 0
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: LD_INT 0
70429: PUSH
70430: LD_INT 1
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 1
70440: PUSH
70441: LD_INT 0
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 1
70450: PUSH
70451: LD_INT 1
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 0
70460: PUSH
70461: LD_INT 1
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 1
70470: NEG
70471: PUSH
70472: LD_INT 0
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 1
70481: NEG
70482: PUSH
70483: LD_INT 1
70485: NEG
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 1
70493: NEG
70494: PUSH
70495: LD_INT 2
70497: NEG
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 0
70505: PUSH
70506: LD_INT 2
70508: NEG
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 1
70516: PUSH
70517: LD_INT 1
70519: NEG
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 2
70527: PUSH
70528: LD_INT 0
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 2
70537: PUSH
70538: LD_INT 1
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 2
70547: PUSH
70548: LD_INT 2
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 1
70557: PUSH
70558: LD_INT 2
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 0
70567: PUSH
70568: LD_INT 2
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 1
70577: NEG
70578: PUSH
70579: LD_INT 1
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 2
70588: NEG
70589: PUSH
70590: LD_INT 0
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 2
70599: NEG
70600: PUSH
70601: LD_INT 1
70603: NEG
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 2
70611: NEG
70612: PUSH
70613: LD_INT 2
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70642: LD_ADDR_VAR 0 18
70646: PUSH
70647: LD_INT 0
70649: PUSH
70650: LD_INT 0
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 0
70659: PUSH
70660: LD_INT 1
70662: NEG
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 1
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 1
70680: PUSH
70681: LD_INT 1
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 0
70690: PUSH
70691: LD_INT 1
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 1
70700: NEG
70701: PUSH
70702: LD_INT 0
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 1
70711: NEG
70712: PUSH
70713: LD_INT 1
70715: NEG
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 1
70723: NEG
70724: PUSH
70725: LD_INT 2
70727: NEG
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: LD_INT 0
70735: PUSH
70736: LD_INT 2
70738: NEG
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 1
70746: PUSH
70747: LD_INT 1
70749: NEG
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 2
70757: PUSH
70758: LD_INT 0
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 2
70767: PUSH
70768: LD_INT 1
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 2
70777: PUSH
70778: LD_INT 2
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 1
70787: PUSH
70788: LD_INT 2
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 0
70797: PUSH
70798: LD_INT 2
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 1
70807: NEG
70808: PUSH
70809: LD_INT 1
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: PUSH
70816: LD_INT 2
70818: NEG
70819: PUSH
70820: LD_INT 0
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 2
70829: NEG
70830: PUSH
70831: LD_INT 1
70833: NEG
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 2
70841: NEG
70842: PUSH
70843: LD_INT 2
70845: NEG
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70872: LD_ADDR_VAR 0 19
70876: PUSH
70877: LD_INT 0
70879: PUSH
70880: LD_INT 0
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 0
70889: PUSH
70890: LD_INT 1
70892: NEG
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 1
70900: PUSH
70901: LD_INT 0
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 1
70910: PUSH
70911: LD_INT 1
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 0
70920: PUSH
70921: LD_INT 1
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 1
70930: NEG
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 1
70941: NEG
70942: PUSH
70943: LD_INT 1
70945: NEG
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 1
70953: NEG
70954: PUSH
70955: LD_INT 2
70957: NEG
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 0
70965: PUSH
70966: LD_INT 2
70968: NEG
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 1
70976: PUSH
70977: LD_INT 1
70979: NEG
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 2
70987: PUSH
70988: LD_INT 0
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 2
70997: PUSH
70998: LD_INT 1
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: LD_INT 2
71007: PUSH
71008: LD_INT 2
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 1
71017: PUSH
71018: LD_INT 2
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 0
71027: PUSH
71028: LD_INT 2
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 1
71037: NEG
71038: PUSH
71039: LD_INT 1
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 2
71048: NEG
71049: PUSH
71050: LD_INT 0
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 2
71059: NEG
71060: PUSH
71061: LD_INT 1
71063: NEG
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 2
71071: NEG
71072: PUSH
71073: LD_INT 2
71075: NEG
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71102: LD_ADDR_VAR 0 20
71106: PUSH
71107: LD_INT 0
71109: PUSH
71110: LD_INT 0
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 0
71119: PUSH
71120: LD_INT 1
71122: NEG
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 1
71130: PUSH
71131: LD_INT 0
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 1
71140: PUSH
71141: LD_INT 1
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 0
71150: PUSH
71151: LD_INT 1
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 1
71160: NEG
71161: PUSH
71162: LD_INT 0
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 1
71171: NEG
71172: PUSH
71173: LD_INT 1
71175: NEG
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 1
71183: NEG
71184: PUSH
71185: LD_INT 2
71187: NEG
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 0
71195: PUSH
71196: LD_INT 2
71198: NEG
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 1
71206: PUSH
71207: LD_INT 1
71209: NEG
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 2
71217: PUSH
71218: LD_INT 0
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 2
71227: PUSH
71228: LD_INT 1
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 2
71237: PUSH
71238: LD_INT 2
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 1
71247: PUSH
71248: LD_INT 2
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 0
71257: PUSH
71258: LD_INT 2
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 1
71267: NEG
71268: PUSH
71269: LD_INT 1
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 2
71278: NEG
71279: PUSH
71280: LD_INT 0
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 2
71289: NEG
71290: PUSH
71291: LD_INT 1
71293: NEG
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 2
71301: NEG
71302: PUSH
71303: LD_INT 2
71305: NEG
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71332: LD_ADDR_VAR 0 21
71336: PUSH
71337: LD_INT 0
71339: PUSH
71340: LD_INT 0
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: LD_INT 0
71349: PUSH
71350: LD_INT 1
71352: NEG
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 1
71360: PUSH
71361: LD_INT 0
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 1
71370: PUSH
71371: LD_INT 1
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 0
71380: PUSH
71381: LD_INT 1
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 1
71390: NEG
71391: PUSH
71392: LD_INT 0
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 1
71401: NEG
71402: PUSH
71403: LD_INT 1
71405: NEG
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 1
71413: NEG
71414: PUSH
71415: LD_INT 2
71417: NEG
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 0
71425: PUSH
71426: LD_INT 2
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 1
71436: PUSH
71437: LD_INT 1
71439: NEG
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 2
71447: PUSH
71448: LD_INT 0
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 2
71457: PUSH
71458: LD_INT 1
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 2
71467: PUSH
71468: LD_INT 2
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 1
71477: PUSH
71478: LD_INT 2
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 0
71487: PUSH
71488: LD_INT 2
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 1
71497: NEG
71498: PUSH
71499: LD_INT 1
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 2
71508: NEG
71509: PUSH
71510: LD_INT 0
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 2
71519: NEG
71520: PUSH
71521: LD_INT 1
71523: NEG
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 2
71531: NEG
71532: PUSH
71533: LD_INT 2
71535: NEG
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71562: LD_ADDR_VAR 0 22
71566: PUSH
71567: LD_INT 0
71569: PUSH
71570: LD_INT 0
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 0
71579: PUSH
71580: LD_INT 1
71582: NEG
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 1
71590: PUSH
71591: LD_INT 0
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 1
71600: PUSH
71601: LD_INT 1
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: LD_INT 0
71610: PUSH
71611: LD_INT 1
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: LD_INT 1
71620: NEG
71621: PUSH
71622: LD_INT 0
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 1
71631: NEG
71632: PUSH
71633: LD_INT 1
71635: NEG
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: LD_INT 1
71643: NEG
71644: PUSH
71645: LD_INT 2
71647: NEG
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 0
71655: PUSH
71656: LD_INT 2
71658: NEG
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 1
71666: PUSH
71667: LD_INT 1
71669: NEG
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 2
71677: PUSH
71678: LD_INT 0
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 2
71687: PUSH
71688: LD_INT 1
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: LD_INT 2
71697: PUSH
71698: LD_INT 2
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 1
71707: PUSH
71708: LD_INT 2
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 0
71717: PUSH
71718: LD_INT 2
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: LD_INT 1
71727: NEG
71728: PUSH
71729: LD_INT 1
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: PUSH
71736: LD_INT 2
71738: NEG
71739: PUSH
71740: LD_INT 0
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 2
71749: NEG
71750: PUSH
71751: LD_INT 1
71753: NEG
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: PUSH
71759: LD_INT 2
71761: NEG
71762: PUSH
71763: LD_INT 2
71765: NEG
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71792: LD_ADDR_VAR 0 23
71796: PUSH
71797: LD_INT 0
71799: PUSH
71800: LD_INT 0
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 0
71809: PUSH
71810: LD_INT 1
71812: NEG
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 1
71820: PUSH
71821: LD_INT 0
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: PUSH
71828: LD_INT 1
71830: PUSH
71831: LD_INT 1
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: LD_INT 0
71840: PUSH
71841: LD_INT 1
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: PUSH
71848: LD_INT 1
71850: NEG
71851: PUSH
71852: LD_INT 0
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 1
71861: NEG
71862: PUSH
71863: LD_INT 1
71865: NEG
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 1
71873: NEG
71874: PUSH
71875: LD_INT 2
71877: NEG
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 0
71885: PUSH
71886: LD_INT 2
71888: NEG
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 1
71896: PUSH
71897: LD_INT 1
71899: NEG
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 2
71907: PUSH
71908: LD_INT 0
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 2
71917: PUSH
71918: LD_INT 1
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 2
71927: PUSH
71928: LD_INT 2
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 1
71937: PUSH
71938: LD_INT 2
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: LD_INT 0
71947: PUSH
71948: LD_INT 2
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: PUSH
71955: LD_INT 1
71957: NEG
71958: PUSH
71959: LD_INT 1
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 2
71968: NEG
71969: PUSH
71970: LD_INT 0
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 2
71979: NEG
71980: PUSH
71981: LD_INT 1
71983: NEG
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: LD_INT 2
71991: NEG
71992: PUSH
71993: LD_INT 2
71995: NEG
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 2
72003: NEG
72004: PUSH
72005: LD_INT 3
72007: NEG
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 1
72015: NEG
72016: PUSH
72017: LD_INT 3
72019: NEG
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 1
72027: PUSH
72028: LD_INT 2
72030: NEG
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: PUSH
72036: LD_INT 2
72038: PUSH
72039: LD_INT 1
72041: NEG
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
72072: LD_ADDR_VAR 0 24
72076: PUSH
72077: LD_INT 0
72079: PUSH
72080: LD_INT 0
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 0
72089: PUSH
72090: LD_INT 1
72092: NEG
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 1
72100: PUSH
72101: LD_INT 0
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: PUSH
72108: LD_INT 1
72110: PUSH
72111: LD_INT 1
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: LD_INT 0
72120: PUSH
72121: LD_INT 1
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 1
72130: NEG
72131: PUSH
72132: LD_INT 0
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: PUSH
72139: LD_INT 1
72141: NEG
72142: PUSH
72143: LD_INT 1
72145: NEG
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 1
72153: NEG
72154: PUSH
72155: LD_INT 2
72157: NEG
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: LD_INT 0
72165: PUSH
72166: LD_INT 2
72168: NEG
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 1
72176: PUSH
72177: LD_INT 1
72179: NEG
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 2
72187: PUSH
72188: LD_INT 0
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: LD_INT 2
72197: PUSH
72198: LD_INT 1
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 2
72207: PUSH
72208: LD_INT 2
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 1
72217: PUSH
72218: LD_INT 2
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 0
72227: PUSH
72228: LD_INT 2
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 1
72237: NEG
72238: PUSH
72239: LD_INT 1
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: PUSH
72246: LD_INT 2
72248: NEG
72249: PUSH
72250: LD_INT 0
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 2
72259: NEG
72260: PUSH
72261: LD_INT 1
72263: NEG
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: LD_INT 2
72271: NEG
72272: PUSH
72273: LD_INT 2
72275: NEG
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: LD_INT 1
72283: PUSH
72284: LD_INT 2
72286: NEG
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: PUSH
72292: LD_INT 2
72294: PUSH
72295: LD_INT 1
72297: NEG
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 3
72305: PUSH
72306: LD_INT 1
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: PUSH
72313: LD_INT 3
72315: PUSH
72316: LD_INT 2
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
72348: LD_ADDR_VAR 0 25
72352: PUSH
72353: LD_INT 0
72355: PUSH
72356: LD_INT 0
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 0
72365: PUSH
72366: LD_INT 1
72368: NEG
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 1
72376: PUSH
72377: LD_INT 0
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: LD_INT 1
72386: PUSH
72387: LD_INT 1
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: LD_INT 0
72396: PUSH
72397: LD_INT 1
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: PUSH
72404: LD_INT 1
72406: NEG
72407: PUSH
72408: LD_INT 0
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PUSH
72415: LD_INT 1
72417: NEG
72418: PUSH
72419: LD_INT 1
72421: NEG
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 1
72429: NEG
72430: PUSH
72431: LD_INT 2
72433: NEG
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 0
72441: PUSH
72442: LD_INT 2
72444: NEG
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 1
72452: PUSH
72453: LD_INT 1
72455: NEG
72456: PUSH
72457: EMPTY
72458: LIST
72459: LIST
72460: PUSH
72461: LD_INT 2
72463: PUSH
72464: LD_INT 0
72466: PUSH
72467: EMPTY
72468: LIST
72469: LIST
72470: PUSH
72471: LD_INT 2
72473: PUSH
72474: LD_INT 1
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 2
72483: PUSH
72484: LD_INT 2
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 1
72493: PUSH
72494: LD_INT 2
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: LD_INT 0
72503: PUSH
72504: LD_INT 2
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PUSH
72511: LD_INT 1
72513: NEG
72514: PUSH
72515: LD_INT 1
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: LD_INT 2
72524: NEG
72525: PUSH
72526: LD_INT 0
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: PUSH
72533: LD_INT 2
72535: NEG
72536: PUSH
72537: LD_INT 1
72539: NEG
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: PUSH
72545: LD_INT 2
72547: NEG
72548: PUSH
72549: LD_INT 2
72551: NEG
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: LD_INT 3
72559: PUSH
72560: LD_INT 1
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: PUSH
72567: LD_INT 3
72569: PUSH
72570: LD_INT 2
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: LD_INT 2
72579: PUSH
72580: LD_INT 3
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_INT 1
72589: PUSH
72590: LD_INT 3
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72622: LD_ADDR_VAR 0 26
72626: PUSH
72627: LD_INT 0
72629: PUSH
72630: LD_INT 0
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: PUSH
72637: LD_INT 0
72639: PUSH
72640: LD_INT 1
72642: NEG
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: PUSH
72648: LD_INT 1
72650: PUSH
72651: LD_INT 0
72653: PUSH
72654: EMPTY
72655: LIST
72656: LIST
72657: PUSH
72658: LD_INT 1
72660: PUSH
72661: LD_INT 1
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: LD_INT 0
72670: PUSH
72671: LD_INT 1
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 1
72680: NEG
72681: PUSH
72682: LD_INT 0
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: PUSH
72689: LD_INT 1
72691: NEG
72692: PUSH
72693: LD_INT 1
72695: NEG
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 1
72703: NEG
72704: PUSH
72705: LD_INT 2
72707: NEG
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 0
72715: PUSH
72716: LD_INT 2
72718: NEG
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 1
72726: PUSH
72727: LD_INT 1
72729: NEG
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: LD_INT 2
72737: PUSH
72738: LD_INT 0
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 2
72747: PUSH
72748: LD_INT 1
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 2
72757: PUSH
72758: LD_INT 2
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: LD_INT 1
72767: PUSH
72768: LD_INT 2
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: PUSH
72775: LD_INT 0
72777: PUSH
72778: LD_INT 2
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: PUSH
72785: LD_INT 1
72787: NEG
72788: PUSH
72789: LD_INT 1
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 2
72798: NEG
72799: PUSH
72800: LD_INT 0
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PUSH
72807: LD_INT 2
72809: NEG
72810: PUSH
72811: LD_INT 1
72813: NEG
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_INT 2
72821: NEG
72822: PUSH
72823: LD_INT 2
72825: NEG
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PUSH
72831: LD_INT 2
72833: PUSH
72834: LD_INT 3
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: LD_INT 1
72843: PUSH
72844: LD_INT 3
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: PUSH
72851: LD_INT 1
72853: NEG
72854: PUSH
72855: LD_INT 2
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: PUSH
72862: LD_INT 2
72864: NEG
72865: PUSH
72866: LD_INT 1
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72898: LD_ADDR_VAR 0 27
72902: PUSH
72903: LD_INT 0
72905: PUSH
72906: LD_INT 0
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: LD_INT 0
72915: PUSH
72916: LD_INT 1
72918: NEG
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 1
72926: PUSH
72927: LD_INT 0
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: PUSH
72934: LD_INT 1
72936: PUSH
72937: LD_INT 1
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: PUSH
72944: LD_INT 0
72946: PUSH
72947: LD_INT 1
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: PUSH
72954: LD_INT 1
72956: NEG
72957: PUSH
72958: LD_INT 0
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: LD_INT 1
72967: NEG
72968: PUSH
72969: LD_INT 1
72971: NEG
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: LD_INT 1
72979: NEG
72980: PUSH
72981: LD_INT 2
72983: NEG
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PUSH
72989: LD_INT 0
72991: PUSH
72992: LD_INT 2
72994: NEG
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PUSH
73000: LD_INT 1
73002: PUSH
73003: LD_INT 1
73005: NEG
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: PUSH
73011: LD_INT 2
73013: PUSH
73014: LD_INT 0
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_INT 2
73023: PUSH
73024: LD_INT 1
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 2
73033: PUSH
73034: LD_INT 2
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 1
73043: PUSH
73044: LD_INT 2
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: LD_INT 0
73053: PUSH
73054: LD_INT 2
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 1
73063: NEG
73064: PUSH
73065: LD_INT 1
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: PUSH
73072: LD_INT 2
73074: NEG
73075: PUSH
73076: LD_INT 0
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: LD_INT 2
73085: NEG
73086: PUSH
73087: LD_INT 1
73089: NEG
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PUSH
73095: LD_INT 2
73097: NEG
73098: PUSH
73099: LD_INT 2
73101: NEG
73102: PUSH
73103: EMPTY
73104: LIST
73105: LIST
73106: PUSH
73107: LD_INT 1
73109: NEG
73110: PUSH
73111: LD_INT 2
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: PUSH
73118: LD_INT 2
73120: NEG
73121: PUSH
73122: LD_INT 1
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 3
73131: NEG
73132: PUSH
73133: LD_INT 1
73135: NEG
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PUSH
73141: LD_INT 3
73143: NEG
73144: PUSH
73145: LD_INT 2
73147: NEG
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73178: LD_ADDR_VAR 0 28
73182: PUSH
73183: LD_INT 0
73185: PUSH
73186: LD_INT 0
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: LD_INT 0
73195: PUSH
73196: LD_INT 1
73198: NEG
73199: PUSH
73200: EMPTY
73201: LIST
73202: LIST
73203: PUSH
73204: LD_INT 1
73206: PUSH
73207: LD_INT 0
73209: PUSH
73210: EMPTY
73211: LIST
73212: LIST
73213: PUSH
73214: LD_INT 1
73216: PUSH
73217: LD_INT 1
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PUSH
73224: LD_INT 0
73226: PUSH
73227: LD_INT 1
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: LD_INT 1
73236: NEG
73237: PUSH
73238: LD_INT 0
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: PUSH
73245: LD_INT 1
73247: NEG
73248: PUSH
73249: LD_INT 1
73251: NEG
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PUSH
73257: LD_INT 1
73259: NEG
73260: PUSH
73261: LD_INT 2
73263: NEG
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 0
73271: PUSH
73272: LD_INT 2
73274: NEG
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: PUSH
73280: LD_INT 1
73282: PUSH
73283: LD_INT 1
73285: NEG
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_INT 2
73293: PUSH
73294: LD_INT 0
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 2
73303: PUSH
73304: LD_INT 1
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: PUSH
73311: LD_INT 2
73313: PUSH
73314: LD_INT 2
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: PUSH
73321: LD_INT 1
73323: PUSH
73324: LD_INT 2
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: PUSH
73331: LD_INT 0
73333: PUSH
73334: LD_INT 2
73336: PUSH
73337: EMPTY
73338: LIST
73339: LIST
73340: PUSH
73341: LD_INT 1
73343: NEG
73344: PUSH
73345: LD_INT 1
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: PUSH
73352: LD_INT 2
73354: NEG
73355: PUSH
73356: LD_INT 0
73358: PUSH
73359: EMPTY
73360: LIST
73361: LIST
73362: PUSH
73363: LD_INT 2
73365: NEG
73366: PUSH
73367: LD_INT 1
73369: NEG
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 2
73377: NEG
73378: PUSH
73379: LD_INT 2
73381: NEG
73382: PUSH
73383: EMPTY
73384: LIST
73385: LIST
73386: PUSH
73387: LD_INT 2
73389: NEG
73390: PUSH
73391: LD_INT 3
73393: NEG
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_INT 1
73401: NEG
73402: PUSH
73403: LD_INT 3
73405: NEG
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: LD_INT 3
73413: NEG
73414: PUSH
73415: LD_INT 1
73417: NEG
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 3
73425: NEG
73426: PUSH
73427: LD_INT 2
73429: NEG
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: PUSH
73435: EMPTY
73436: LIST
73437: LIST
73438: LIST
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: LIST
73456: LIST
73457: LIST
73458: LIST
73459: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
73460: LD_ADDR_VAR 0 29
73464: PUSH
73465: LD_INT 0
73467: PUSH
73468: LD_INT 0
73470: PUSH
73471: EMPTY
73472: LIST
73473: LIST
73474: PUSH
73475: LD_INT 0
73477: PUSH
73478: LD_INT 1
73480: NEG
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PUSH
73486: LD_INT 1
73488: PUSH
73489: LD_INT 0
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: LD_INT 1
73498: PUSH
73499: LD_INT 1
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PUSH
73506: LD_INT 0
73508: PUSH
73509: LD_INT 1
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PUSH
73516: LD_INT 1
73518: NEG
73519: PUSH
73520: LD_INT 0
73522: PUSH
73523: EMPTY
73524: LIST
73525: LIST
73526: PUSH
73527: LD_INT 1
73529: NEG
73530: PUSH
73531: LD_INT 1
73533: NEG
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PUSH
73539: LD_INT 1
73541: NEG
73542: PUSH
73543: LD_INT 2
73545: NEG
73546: PUSH
73547: EMPTY
73548: LIST
73549: LIST
73550: PUSH
73551: LD_INT 0
73553: PUSH
73554: LD_INT 2
73556: NEG
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: PUSH
73562: LD_INT 1
73564: PUSH
73565: LD_INT 1
73567: NEG
73568: PUSH
73569: EMPTY
73570: LIST
73571: LIST
73572: PUSH
73573: LD_INT 2
73575: PUSH
73576: LD_INT 0
73578: PUSH
73579: EMPTY
73580: LIST
73581: LIST
73582: PUSH
73583: LD_INT 2
73585: PUSH
73586: LD_INT 1
73588: PUSH
73589: EMPTY
73590: LIST
73591: LIST
73592: PUSH
73593: LD_INT 1
73595: PUSH
73596: LD_INT 2
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: PUSH
73603: LD_INT 0
73605: PUSH
73606: LD_INT 2
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: PUSH
73613: LD_INT 1
73615: NEG
73616: PUSH
73617: LD_INT 1
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: PUSH
73624: LD_INT 2
73626: NEG
73627: PUSH
73628: LD_INT 1
73630: NEG
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: PUSH
73636: LD_INT 2
73638: NEG
73639: PUSH
73640: LD_INT 2
73642: NEG
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: PUSH
73648: LD_INT 2
73650: NEG
73651: PUSH
73652: LD_INT 3
73654: NEG
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: PUSH
73660: LD_INT 2
73662: PUSH
73663: LD_INT 1
73665: NEG
73666: PUSH
73667: EMPTY
73668: LIST
73669: LIST
73670: PUSH
73671: LD_INT 3
73673: PUSH
73674: LD_INT 1
73676: PUSH
73677: EMPTY
73678: LIST
73679: LIST
73680: PUSH
73681: LD_INT 1
73683: PUSH
73684: LD_INT 3
73686: PUSH
73687: EMPTY
73688: LIST
73689: LIST
73690: PUSH
73691: LD_INT 1
73693: NEG
73694: PUSH
73695: LD_INT 2
73697: PUSH
73698: EMPTY
73699: LIST
73700: LIST
73701: PUSH
73702: LD_INT 3
73704: NEG
73705: PUSH
73706: LD_INT 2
73708: NEG
73709: PUSH
73710: EMPTY
73711: LIST
73712: LIST
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: LIST
73718: LIST
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73739: LD_ADDR_VAR 0 30
73743: PUSH
73744: LD_INT 0
73746: PUSH
73747: LD_INT 0
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: PUSH
73754: LD_INT 0
73756: PUSH
73757: LD_INT 1
73759: NEG
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PUSH
73765: LD_INT 1
73767: PUSH
73768: LD_INT 0
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: PUSH
73775: LD_INT 1
73777: PUSH
73778: LD_INT 1
73780: PUSH
73781: EMPTY
73782: LIST
73783: LIST
73784: PUSH
73785: LD_INT 0
73787: PUSH
73788: LD_INT 1
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: LD_INT 1
73797: NEG
73798: PUSH
73799: LD_INT 0
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: PUSH
73806: LD_INT 1
73808: NEG
73809: PUSH
73810: LD_INT 1
73812: NEG
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: PUSH
73818: LD_INT 1
73820: NEG
73821: PUSH
73822: LD_INT 2
73824: NEG
73825: PUSH
73826: EMPTY
73827: LIST
73828: LIST
73829: PUSH
73830: LD_INT 0
73832: PUSH
73833: LD_INT 2
73835: NEG
73836: PUSH
73837: EMPTY
73838: LIST
73839: LIST
73840: PUSH
73841: LD_INT 1
73843: PUSH
73844: LD_INT 1
73846: NEG
73847: PUSH
73848: EMPTY
73849: LIST
73850: LIST
73851: PUSH
73852: LD_INT 2
73854: PUSH
73855: LD_INT 0
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: PUSH
73862: LD_INT 2
73864: PUSH
73865: LD_INT 1
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: LD_INT 2
73874: PUSH
73875: LD_INT 2
73877: PUSH
73878: EMPTY
73879: LIST
73880: LIST
73881: PUSH
73882: LD_INT 1
73884: PUSH
73885: LD_INT 2
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: LD_INT 1
73894: NEG
73895: PUSH
73896: LD_INT 1
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: PUSH
73903: LD_INT 2
73905: NEG
73906: PUSH
73907: LD_INT 0
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: PUSH
73914: LD_INT 2
73916: NEG
73917: PUSH
73918: LD_INT 1
73920: NEG
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: PUSH
73926: LD_INT 1
73928: NEG
73929: PUSH
73930: LD_INT 3
73932: NEG
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: PUSH
73938: LD_INT 1
73940: PUSH
73941: LD_INT 2
73943: NEG
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: LD_INT 3
73951: PUSH
73952: LD_INT 2
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PUSH
73959: LD_INT 2
73961: PUSH
73962: LD_INT 3
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: PUSH
73969: LD_INT 2
73971: NEG
73972: PUSH
73973: LD_INT 1
73975: PUSH
73976: EMPTY
73977: LIST
73978: LIST
73979: PUSH
73980: LD_INT 3
73982: NEG
73983: PUSH
73984: LD_INT 1
73986: NEG
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: LIST
73999: LIST
74000: LIST
74001: LIST
74002: LIST
74003: LIST
74004: LIST
74005: LIST
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: LIST
74016: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74017: LD_ADDR_VAR 0 31
74021: PUSH
74022: LD_INT 0
74024: PUSH
74025: LD_INT 0
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: PUSH
74032: LD_INT 0
74034: PUSH
74035: LD_INT 1
74037: NEG
74038: PUSH
74039: EMPTY
74040: LIST
74041: LIST
74042: PUSH
74043: LD_INT 1
74045: PUSH
74046: LD_INT 0
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PUSH
74053: LD_INT 1
74055: PUSH
74056: LD_INT 1
74058: PUSH
74059: EMPTY
74060: LIST
74061: LIST
74062: PUSH
74063: LD_INT 0
74065: PUSH
74066: LD_INT 1
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PUSH
74073: LD_INT 1
74075: NEG
74076: PUSH
74077: LD_INT 0
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 1
74086: NEG
74087: PUSH
74088: LD_INT 1
74090: NEG
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: PUSH
74096: LD_INT 1
74098: NEG
74099: PUSH
74100: LD_INT 2
74102: NEG
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: PUSH
74108: LD_INT 1
74110: PUSH
74111: LD_INT 1
74113: NEG
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: PUSH
74119: LD_INT 2
74121: PUSH
74122: LD_INT 0
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PUSH
74129: LD_INT 2
74131: PUSH
74132: LD_INT 1
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: PUSH
74139: LD_INT 2
74141: PUSH
74142: LD_INT 2
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: LD_INT 1
74151: PUSH
74152: LD_INT 2
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: PUSH
74159: LD_INT 0
74161: PUSH
74162: LD_INT 2
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: PUSH
74169: LD_INT 1
74171: NEG
74172: PUSH
74173: LD_INT 1
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: PUSH
74180: LD_INT 2
74182: NEG
74183: PUSH
74184: LD_INT 1
74186: NEG
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: PUSH
74192: LD_INT 2
74194: NEG
74195: PUSH
74196: LD_INT 2
74198: NEG
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: PUSH
74204: LD_INT 2
74206: NEG
74207: PUSH
74208: LD_INT 3
74210: NEG
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: LD_INT 2
74218: PUSH
74219: LD_INT 1
74221: NEG
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: PUSH
74227: LD_INT 3
74229: PUSH
74230: LD_INT 1
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: PUSH
74237: LD_INT 1
74239: PUSH
74240: LD_INT 3
74242: PUSH
74243: EMPTY
74244: LIST
74245: LIST
74246: PUSH
74247: LD_INT 1
74249: NEG
74250: PUSH
74251: LD_INT 2
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: PUSH
74258: LD_INT 3
74260: NEG
74261: PUSH
74262: LD_INT 2
74264: NEG
74265: PUSH
74266: EMPTY
74267: LIST
74268: LIST
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: LIST
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74295: LD_ADDR_VAR 0 32
74299: PUSH
74300: LD_INT 0
74302: PUSH
74303: LD_INT 0
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: PUSH
74310: LD_INT 0
74312: PUSH
74313: LD_INT 1
74315: NEG
74316: PUSH
74317: EMPTY
74318: LIST
74319: LIST
74320: PUSH
74321: LD_INT 1
74323: PUSH
74324: LD_INT 0
74326: PUSH
74327: EMPTY
74328: LIST
74329: LIST
74330: PUSH
74331: LD_INT 1
74333: PUSH
74334: LD_INT 1
74336: PUSH
74337: EMPTY
74338: LIST
74339: LIST
74340: PUSH
74341: LD_INT 0
74343: PUSH
74344: LD_INT 1
74346: PUSH
74347: EMPTY
74348: LIST
74349: LIST
74350: PUSH
74351: LD_INT 1
74353: NEG
74354: PUSH
74355: LD_INT 0
74357: PUSH
74358: EMPTY
74359: LIST
74360: LIST
74361: PUSH
74362: LD_INT 1
74364: NEG
74365: PUSH
74366: LD_INT 1
74368: NEG
74369: PUSH
74370: EMPTY
74371: LIST
74372: LIST
74373: PUSH
74374: LD_INT 1
74376: NEG
74377: PUSH
74378: LD_INT 2
74380: NEG
74381: PUSH
74382: EMPTY
74383: LIST
74384: LIST
74385: PUSH
74386: LD_INT 0
74388: PUSH
74389: LD_INT 2
74391: NEG
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: PUSH
74397: LD_INT 1
74399: PUSH
74400: LD_INT 1
74402: NEG
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: PUSH
74408: LD_INT 2
74410: PUSH
74411: LD_INT 1
74413: PUSH
74414: EMPTY
74415: LIST
74416: LIST
74417: PUSH
74418: LD_INT 2
74420: PUSH
74421: LD_INT 2
74423: PUSH
74424: EMPTY
74425: LIST
74426: LIST
74427: PUSH
74428: LD_INT 1
74430: PUSH
74431: LD_INT 2
74433: PUSH
74434: EMPTY
74435: LIST
74436: LIST
74437: PUSH
74438: LD_INT 0
74440: PUSH
74441: LD_INT 2
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: PUSH
74448: LD_INT 1
74450: NEG
74451: PUSH
74452: LD_INT 1
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: PUSH
74459: LD_INT 2
74461: NEG
74462: PUSH
74463: LD_INT 0
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: PUSH
74470: LD_INT 2
74472: NEG
74473: PUSH
74474: LD_INT 1
74476: NEG
74477: PUSH
74478: EMPTY
74479: LIST
74480: LIST
74481: PUSH
74482: LD_INT 1
74484: NEG
74485: PUSH
74486: LD_INT 3
74488: NEG
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: PUSH
74494: LD_INT 1
74496: PUSH
74497: LD_INT 2
74499: NEG
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: LD_INT 3
74507: PUSH
74508: LD_INT 2
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PUSH
74515: LD_INT 2
74517: PUSH
74518: LD_INT 3
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: LD_INT 2
74527: NEG
74528: PUSH
74529: LD_INT 1
74531: PUSH
74532: EMPTY
74533: LIST
74534: LIST
74535: PUSH
74536: LD_INT 3
74538: NEG
74539: PUSH
74540: LD_INT 1
74542: NEG
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: PUSH
74548: EMPTY
74549: LIST
74550: LIST
74551: LIST
74552: LIST
74553: LIST
74554: LIST
74555: LIST
74556: LIST
74557: LIST
74558: LIST
74559: LIST
74560: LIST
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: LIST
74566: LIST
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74573: LD_ADDR_VAR 0 33
74577: PUSH
74578: LD_INT 0
74580: PUSH
74581: LD_INT 0
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: PUSH
74588: LD_INT 0
74590: PUSH
74591: LD_INT 1
74593: NEG
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: PUSH
74599: LD_INT 1
74601: PUSH
74602: LD_INT 0
74604: PUSH
74605: EMPTY
74606: LIST
74607: LIST
74608: PUSH
74609: LD_INT 1
74611: PUSH
74612: LD_INT 1
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: PUSH
74619: LD_INT 0
74621: PUSH
74622: LD_INT 1
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 1
74631: NEG
74632: PUSH
74633: LD_INT 0
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: PUSH
74640: LD_INT 1
74642: NEG
74643: PUSH
74644: LD_INT 1
74646: NEG
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: PUSH
74652: LD_INT 1
74654: NEG
74655: PUSH
74656: LD_INT 2
74658: NEG
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: PUSH
74664: LD_INT 1
74666: PUSH
74667: LD_INT 1
74669: NEG
74670: PUSH
74671: EMPTY
74672: LIST
74673: LIST
74674: PUSH
74675: LD_INT 2
74677: PUSH
74678: LD_INT 0
74680: PUSH
74681: EMPTY
74682: LIST
74683: LIST
74684: PUSH
74685: LD_INT 2
74687: PUSH
74688: LD_INT 1
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: PUSH
74695: LD_INT 1
74697: PUSH
74698: LD_INT 2
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: PUSH
74705: LD_INT 0
74707: PUSH
74708: LD_INT 2
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: PUSH
74715: LD_INT 1
74717: NEG
74718: PUSH
74719: LD_INT 1
74721: PUSH
74722: EMPTY
74723: LIST
74724: LIST
74725: PUSH
74726: LD_INT 2
74728: NEG
74729: PUSH
74730: LD_INT 0
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: PUSH
74737: LD_INT 2
74739: NEG
74740: PUSH
74741: LD_INT 1
74743: NEG
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: PUSH
74749: LD_INT 2
74751: NEG
74752: PUSH
74753: LD_INT 2
74755: NEG
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: LD_INT 2
74763: NEG
74764: PUSH
74765: LD_INT 3
74767: NEG
74768: PUSH
74769: EMPTY
74770: LIST
74771: LIST
74772: PUSH
74773: LD_INT 2
74775: PUSH
74776: LD_INT 1
74778: NEG
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: PUSH
74784: LD_INT 3
74786: PUSH
74787: LD_INT 1
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: PUSH
74794: LD_INT 1
74796: PUSH
74797: LD_INT 3
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: LD_INT 1
74806: NEG
74807: PUSH
74808: LD_INT 2
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PUSH
74815: LD_INT 3
74817: NEG
74818: PUSH
74819: LD_INT 2
74821: NEG
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: PUSH
74827: EMPTY
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74852: LD_ADDR_VAR 0 34
74856: PUSH
74857: LD_INT 0
74859: PUSH
74860: LD_INT 0
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: PUSH
74867: LD_INT 0
74869: PUSH
74870: LD_INT 1
74872: NEG
74873: PUSH
74874: EMPTY
74875: LIST
74876: LIST
74877: PUSH
74878: LD_INT 1
74880: PUSH
74881: LD_INT 0
74883: PUSH
74884: EMPTY
74885: LIST
74886: LIST
74887: PUSH
74888: LD_INT 1
74890: PUSH
74891: LD_INT 1
74893: PUSH
74894: EMPTY
74895: LIST
74896: LIST
74897: PUSH
74898: LD_INT 0
74900: PUSH
74901: LD_INT 1
74903: PUSH
74904: EMPTY
74905: LIST
74906: LIST
74907: PUSH
74908: LD_INT 1
74910: NEG
74911: PUSH
74912: LD_INT 0
74914: PUSH
74915: EMPTY
74916: LIST
74917: LIST
74918: PUSH
74919: LD_INT 1
74921: NEG
74922: PUSH
74923: LD_INT 1
74925: NEG
74926: PUSH
74927: EMPTY
74928: LIST
74929: LIST
74930: PUSH
74931: LD_INT 1
74933: NEG
74934: PUSH
74935: LD_INT 2
74937: NEG
74938: PUSH
74939: EMPTY
74940: LIST
74941: LIST
74942: PUSH
74943: LD_INT 0
74945: PUSH
74946: LD_INT 2
74948: NEG
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: PUSH
74954: LD_INT 1
74956: PUSH
74957: LD_INT 1
74959: NEG
74960: PUSH
74961: EMPTY
74962: LIST
74963: LIST
74964: PUSH
74965: LD_INT 2
74967: PUSH
74968: LD_INT 1
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PUSH
74975: LD_INT 2
74977: PUSH
74978: LD_INT 2
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PUSH
74985: LD_INT 1
74987: PUSH
74988: LD_INT 2
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: PUSH
74995: LD_INT 1
74997: NEG
74998: PUSH
74999: LD_INT 1
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: PUSH
75006: LD_INT 2
75008: NEG
75009: PUSH
75010: LD_INT 0
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: PUSH
75017: LD_INT 2
75019: NEG
75020: PUSH
75021: LD_INT 1
75023: NEG
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: PUSH
75029: LD_INT 2
75031: NEG
75032: PUSH
75033: LD_INT 2
75035: NEG
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: PUSH
75041: LD_INT 1
75043: NEG
75044: PUSH
75045: LD_INT 3
75047: NEG
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: PUSH
75053: LD_INT 1
75055: PUSH
75056: LD_INT 2
75058: NEG
75059: PUSH
75060: EMPTY
75061: LIST
75062: LIST
75063: PUSH
75064: LD_INT 3
75066: PUSH
75067: LD_INT 2
75069: PUSH
75070: EMPTY
75071: LIST
75072: LIST
75073: PUSH
75074: LD_INT 2
75076: PUSH
75077: LD_INT 3
75079: PUSH
75080: EMPTY
75081: LIST
75082: LIST
75083: PUSH
75084: LD_INT 2
75086: NEG
75087: PUSH
75088: LD_INT 1
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: PUSH
75095: LD_INT 3
75097: NEG
75098: PUSH
75099: LD_INT 1
75101: NEG
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: LIST
75111: LIST
75112: LIST
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: LIST
75119: LIST
75120: LIST
75121: LIST
75122: LIST
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
75132: LD_ADDR_VAR 0 35
75136: PUSH
75137: LD_INT 0
75139: PUSH
75140: LD_INT 0
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: PUSH
75147: LD_INT 0
75149: PUSH
75150: LD_INT 1
75152: NEG
75153: PUSH
75154: EMPTY
75155: LIST
75156: LIST
75157: PUSH
75158: LD_INT 1
75160: PUSH
75161: LD_INT 0
75163: PUSH
75164: EMPTY
75165: LIST
75166: LIST
75167: PUSH
75168: LD_INT 1
75170: PUSH
75171: LD_INT 1
75173: PUSH
75174: EMPTY
75175: LIST
75176: LIST
75177: PUSH
75178: LD_INT 0
75180: PUSH
75181: LD_INT 1
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: PUSH
75188: LD_INT 1
75190: NEG
75191: PUSH
75192: LD_INT 0
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: PUSH
75199: LD_INT 1
75201: NEG
75202: PUSH
75203: LD_INT 1
75205: NEG
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 2
75213: PUSH
75214: LD_INT 1
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: PUSH
75221: LD_INT 2
75223: NEG
75224: PUSH
75225: LD_INT 1
75227: NEG
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: LIST
75237: LIST
75238: LIST
75239: LIST
75240: LIST
75241: LIST
75242: LIST
75243: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75244: LD_ADDR_VAR 0 36
75248: PUSH
75249: LD_INT 0
75251: PUSH
75252: LD_INT 0
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: PUSH
75259: LD_INT 0
75261: PUSH
75262: LD_INT 1
75264: NEG
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: PUSH
75270: LD_INT 1
75272: PUSH
75273: LD_INT 0
75275: PUSH
75276: EMPTY
75277: LIST
75278: LIST
75279: PUSH
75280: LD_INT 1
75282: PUSH
75283: LD_INT 1
75285: PUSH
75286: EMPTY
75287: LIST
75288: LIST
75289: PUSH
75290: LD_INT 0
75292: PUSH
75293: LD_INT 1
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: PUSH
75300: LD_INT 1
75302: NEG
75303: PUSH
75304: LD_INT 0
75306: PUSH
75307: EMPTY
75308: LIST
75309: LIST
75310: PUSH
75311: LD_INT 1
75313: NEG
75314: PUSH
75315: LD_INT 1
75317: NEG
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: PUSH
75323: LD_INT 1
75325: NEG
75326: PUSH
75327: LD_INT 2
75329: NEG
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: PUSH
75335: LD_INT 1
75337: PUSH
75338: LD_INT 2
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: PUSH
75345: EMPTY
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
75356: LD_ADDR_VAR 0 37
75360: PUSH
75361: LD_INT 0
75363: PUSH
75364: LD_INT 0
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: PUSH
75371: LD_INT 0
75373: PUSH
75374: LD_INT 1
75376: NEG
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: PUSH
75382: LD_INT 1
75384: PUSH
75385: LD_INT 0
75387: PUSH
75388: EMPTY
75389: LIST
75390: LIST
75391: PUSH
75392: LD_INT 1
75394: PUSH
75395: LD_INT 1
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: PUSH
75402: LD_INT 0
75404: PUSH
75405: LD_INT 1
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: PUSH
75412: LD_INT 1
75414: NEG
75415: PUSH
75416: LD_INT 0
75418: PUSH
75419: EMPTY
75420: LIST
75421: LIST
75422: PUSH
75423: LD_INT 1
75425: NEG
75426: PUSH
75427: LD_INT 1
75429: NEG
75430: PUSH
75431: EMPTY
75432: LIST
75433: LIST
75434: PUSH
75435: LD_INT 1
75437: PUSH
75438: LD_INT 1
75440: NEG
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: PUSH
75446: LD_INT 1
75448: NEG
75449: PUSH
75450: LD_INT 1
75452: PUSH
75453: EMPTY
75454: LIST
75455: LIST
75456: PUSH
75457: EMPTY
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: LIST
75464: LIST
75465: LIST
75466: LIST
75467: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
75468: LD_ADDR_VAR 0 38
75472: PUSH
75473: LD_INT 0
75475: PUSH
75476: LD_INT 0
75478: PUSH
75479: EMPTY
75480: LIST
75481: LIST
75482: PUSH
75483: LD_INT 0
75485: PUSH
75486: LD_INT 1
75488: NEG
75489: PUSH
75490: EMPTY
75491: LIST
75492: LIST
75493: PUSH
75494: LD_INT 1
75496: PUSH
75497: LD_INT 0
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: PUSH
75504: LD_INT 1
75506: PUSH
75507: LD_INT 1
75509: PUSH
75510: EMPTY
75511: LIST
75512: LIST
75513: PUSH
75514: LD_INT 0
75516: PUSH
75517: LD_INT 1
75519: PUSH
75520: EMPTY
75521: LIST
75522: LIST
75523: PUSH
75524: LD_INT 1
75526: NEG
75527: PUSH
75528: LD_INT 0
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: PUSH
75535: LD_INT 1
75537: NEG
75538: PUSH
75539: LD_INT 1
75541: NEG
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: PUSH
75547: LD_INT 2
75549: PUSH
75550: LD_INT 1
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: PUSH
75557: LD_INT 2
75559: NEG
75560: PUSH
75561: LD_INT 1
75563: NEG
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: PUSH
75569: EMPTY
75570: LIST
75571: LIST
75572: LIST
75573: LIST
75574: LIST
75575: LIST
75576: LIST
75577: LIST
75578: LIST
75579: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75580: LD_ADDR_VAR 0 39
75584: PUSH
75585: LD_INT 0
75587: PUSH
75588: LD_INT 0
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: PUSH
75595: LD_INT 0
75597: PUSH
75598: LD_INT 1
75600: NEG
75601: PUSH
75602: EMPTY
75603: LIST
75604: LIST
75605: PUSH
75606: LD_INT 1
75608: PUSH
75609: LD_INT 0
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: PUSH
75616: LD_INT 1
75618: PUSH
75619: LD_INT 1
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: PUSH
75626: LD_INT 0
75628: PUSH
75629: LD_INT 1
75631: PUSH
75632: EMPTY
75633: LIST
75634: LIST
75635: PUSH
75636: LD_INT 1
75638: NEG
75639: PUSH
75640: LD_INT 0
75642: PUSH
75643: EMPTY
75644: LIST
75645: LIST
75646: PUSH
75647: LD_INT 1
75649: NEG
75650: PUSH
75651: LD_INT 1
75653: NEG
75654: PUSH
75655: EMPTY
75656: LIST
75657: LIST
75658: PUSH
75659: LD_INT 1
75661: NEG
75662: PUSH
75663: LD_INT 2
75665: NEG
75666: PUSH
75667: EMPTY
75668: LIST
75669: LIST
75670: PUSH
75671: LD_INT 1
75673: PUSH
75674: LD_INT 2
75676: PUSH
75677: EMPTY
75678: LIST
75679: LIST
75680: PUSH
75681: EMPTY
75682: LIST
75683: LIST
75684: LIST
75685: LIST
75686: LIST
75687: LIST
75688: LIST
75689: LIST
75690: LIST
75691: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
75692: LD_ADDR_VAR 0 40
75696: PUSH
75697: LD_INT 0
75699: PUSH
75700: LD_INT 0
75702: PUSH
75703: EMPTY
75704: LIST
75705: LIST
75706: PUSH
75707: LD_INT 0
75709: PUSH
75710: LD_INT 1
75712: NEG
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: PUSH
75718: LD_INT 1
75720: PUSH
75721: LD_INT 0
75723: PUSH
75724: EMPTY
75725: LIST
75726: LIST
75727: PUSH
75728: LD_INT 1
75730: PUSH
75731: LD_INT 1
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: PUSH
75738: LD_INT 0
75740: PUSH
75741: LD_INT 1
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: PUSH
75748: LD_INT 1
75750: NEG
75751: PUSH
75752: LD_INT 0
75754: PUSH
75755: EMPTY
75756: LIST
75757: LIST
75758: PUSH
75759: LD_INT 1
75761: NEG
75762: PUSH
75763: LD_INT 1
75765: NEG
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: PUSH
75771: LD_INT 1
75773: PUSH
75774: LD_INT 1
75776: NEG
75777: PUSH
75778: EMPTY
75779: LIST
75780: LIST
75781: PUSH
75782: LD_INT 1
75784: NEG
75785: PUSH
75786: LD_INT 1
75788: PUSH
75789: EMPTY
75790: LIST
75791: LIST
75792: PUSH
75793: EMPTY
75794: LIST
75795: LIST
75796: LIST
75797: LIST
75798: LIST
75799: LIST
75800: LIST
75801: LIST
75802: LIST
75803: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75804: LD_ADDR_VAR 0 41
75808: PUSH
75809: LD_INT 0
75811: PUSH
75812: LD_INT 0
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: PUSH
75819: LD_INT 0
75821: PUSH
75822: LD_INT 1
75824: NEG
75825: PUSH
75826: EMPTY
75827: LIST
75828: LIST
75829: PUSH
75830: LD_INT 1
75832: PUSH
75833: LD_INT 0
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: PUSH
75840: LD_INT 1
75842: PUSH
75843: LD_INT 1
75845: PUSH
75846: EMPTY
75847: LIST
75848: LIST
75849: PUSH
75850: LD_INT 0
75852: PUSH
75853: LD_INT 1
75855: PUSH
75856: EMPTY
75857: LIST
75858: LIST
75859: PUSH
75860: LD_INT 1
75862: NEG
75863: PUSH
75864: LD_INT 0
75866: PUSH
75867: EMPTY
75868: LIST
75869: LIST
75870: PUSH
75871: LD_INT 1
75873: NEG
75874: PUSH
75875: LD_INT 1
75877: NEG
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: PUSH
75883: LD_INT 1
75885: NEG
75886: PUSH
75887: LD_INT 2
75889: NEG
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: LD_INT 1
75897: PUSH
75898: LD_INT 1
75900: NEG
75901: PUSH
75902: EMPTY
75903: LIST
75904: LIST
75905: PUSH
75906: LD_INT 2
75908: PUSH
75909: LD_INT 0
75911: PUSH
75912: EMPTY
75913: LIST
75914: LIST
75915: PUSH
75916: LD_INT 2
75918: PUSH
75919: LD_INT 1
75921: PUSH
75922: EMPTY
75923: LIST
75924: LIST
75925: PUSH
75926: LD_INT 2
75928: PUSH
75929: LD_INT 2
75931: PUSH
75932: EMPTY
75933: LIST
75934: LIST
75935: PUSH
75936: LD_INT 1
75938: PUSH
75939: LD_INT 2
75941: PUSH
75942: EMPTY
75943: LIST
75944: LIST
75945: PUSH
75946: LD_INT 1
75948: NEG
75949: PUSH
75950: LD_INT 1
75952: PUSH
75953: EMPTY
75954: LIST
75955: LIST
75956: PUSH
75957: LD_INT 2
75959: NEG
75960: PUSH
75961: LD_INT 0
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: PUSH
75968: LD_INT 2
75970: NEG
75971: PUSH
75972: LD_INT 1
75974: NEG
75975: PUSH
75976: EMPTY
75977: LIST
75978: LIST
75979: PUSH
75980: LD_INT 2
75982: NEG
75983: PUSH
75984: LD_INT 2
75986: NEG
75987: PUSH
75988: EMPTY
75989: LIST
75990: LIST
75991: PUSH
75992: LD_INT 2
75994: NEG
75995: PUSH
75996: LD_INT 3
75998: NEG
75999: PUSH
76000: EMPTY
76001: LIST
76002: LIST
76003: PUSH
76004: LD_INT 2
76006: PUSH
76007: LD_INT 1
76009: NEG
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: PUSH
76015: LD_INT 3
76017: PUSH
76018: LD_INT 0
76020: PUSH
76021: EMPTY
76022: LIST
76023: LIST
76024: PUSH
76025: LD_INT 3
76027: PUSH
76028: LD_INT 1
76030: PUSH
76031: EMPTY
76032: LIST
76033: LIST
76034: PUSH
76035: LD_INT 3
76037: PUSH
76038: LD_INT 2
76040: PUSH
76041: EMPTY
76042: LIST
76043: LIST
76044: PUSH
76045: LD_INT 3
76047: PUSH
76048: LD_INT 3
76050: PUSH
76051: EMPTY
76052: LIST
76053: LIST
76054: PUSH
76055: LD_INT 2
76057: PUSH
76058: LD_INT 3
76060: PUSH
76061: EMPTY
76062: LIST
76063: LIST
76064: PUSH
76065: LD_INT 2
76067: NEG
76068: PUSH
76069: LD_INT 1
76071: PUSH
76072: EMPTY
76073: LIST
76074: LIST
76075: PUSH
76076: LD_INT 3
76078: NEG
76079: PUSH
76080: LD_INT 0
76082: PUSH
76083: EMPTY
76084: LIST
76085: LIST
76086: PUSH
76087: LD_INT 3
76089: NEG
76090: PUSH
76091: LD_INT 1
76093: NEG
76094: PUSH
76095: EMPTY
76096: LIST
76097: LIST
76098: PUSH
76099: LD_INT 3
76101: NEG
76102: PUSH
76103: LD_INT 2
76105: NEG
76106: PUSH
76107: EMPTY
76108: LIST
76109: LIST
76110: PUSH
76111: LD_INT 3
76113: NEG
76114: PUSH
76115: LD_INT 3
76117: NEG
76118: PUSH
76119: EMPTY
76120: LIST
76121: LIST
76122: PUSH
76123: EMPTY
76124: LIST
76125: LIST
76126: LIST
76127: LIST
76128: LIST
76129: LIST
76130: LIST
76131: LIST
76132: LIST
76133: LIST
76134: LIST
76135: LIST
76136: LIST
76137: LIST
76138: LIST
76139: LIST
76140: LIST
76141: LIST
76142: LIST
76143: LIST
76144: LIST
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: LIST
76153: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76154: LD_ADDR_VAR 0 42
76158: PUSH
76159: LD_INT 0
76161: PUSH
76162: LD_INT 0
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: PUSH
76169: LD_INT 0
76171: PUSH
76172: LD_INT 1
76174: NEG
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: PUSH
76180: LD_INT 1
76182: PUSH
76183: LD_INT 0
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: PUSH
76190: LD_INT 1
76192: PUSH
76193: LD_INT 1
76195: PUSH
76196: EMPTY
76197: LIST
76198: LIST
76199: PUSH
76200: LD_INT 0
76202: PUSH
76203: LD_INT 1
76205: PUSH
76206: EMPTY
76207: LIST
76208: LIST
76209: PUSH
76210: LD_INT 1
76212: NEG
76213: PUSH
76214: LD_INT 0
76216: PUSH
76217: EMPTY
76218: LIST
76219: LIST
76220: PUSH
76221: LD_INT 1
76223: NEG
76224: PUSH
76225: LD_INT 1
76227: NEG
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: PUSH
76233: LD_INT 1
76235: NEG
76236: PUSH
76237: LD_INT 2
76239: NEG
76240: PUSH
76241: EMPTY
76242: LIST
76243: LIST
76244: PUSH
76245: LD_INT 0
76247: PUSH
76248: LD_INT 2
76250: NEG
76251: PUSH
76252: EMPTY
76253: LIST
76254: LIST
76255: PUSH
76256: LD_INT 1
76258: PUSH
76259: LD_INT 1
76261: NEG
76262: PUSH
76263: EMPTY
76264: LIST
76265: LIST
76266: PUSH
76267: LD_INT 2
76269: PUSH
76270: LD_INT 1
76272: PUSH
76273: EMPTY
76274: LIST
76275: LIST
76276: PUSH
76277: LD_INT 2
76279: PUSH
76280: LD_INT 2
76282: PUSH
76283: EMPTY
76284: LIST
76285: LIST
76286: PUSH
76287: LD_INT 1
76289: PUSH
76290: LD_INT 2
76292: PUSH
76293: EMPTY
76294: LIST
76295: LIST
76296: PUSH
76297: LD_INT 0
76299: PUSH
76300: LD_INT 2
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: PUSH
76307: LD_INT 1
76309: NEG
76310: PUSH
76311: LD_INT 1
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: PUSH
76318: LD_INT 2
76320: NEG
76321: PUSH
76322: LD_INT 1
76324: NEG
76325: PUSH
76326: EMPTY
76327: LIST
76328: LIST
76329: PUSH
76330: LD_INT 2
76332: NEG
76333: PUSH
76334: LD_INT 2
76336: NEG
76337: PUSH
76338: EMPTY
76339: LIST
76340: LIST
76341: PUSH
76342: LD_INT 2
76344: NEG
76345: PUSH
76346: LD_INT 3
76348: NEG
76349: PUSH
76350: EMPTY
76351: LIST
76352: LIST
76353: PUSH
76354: LD_INT 1
76356: NEG
76357: PUSH
76358: LD_INT 3
76360: NEG
76361: PUSH
76362: EMPTY
76363: LIST
76364: LIST
76365: PUSH
76366: LD_INT 0
76368: PUSH
76369: LD_INT 3
76371: NEG
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: PUSH
76377: LD_INT 1
76379: PUSH
76380: LD_INT 2
76382: NEG
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: PUSH
76388: LD_INT 3
76390: PUSH
76391: LD_INT 2
76393: PUSH
76394: EMPTY
76395: LIST
76396: LIST
76397: PUSH
76398: LD_INT 3
76400: PUSH
76401: LD_INT 3
76403: PUSH
76404: EMPTY
76405: LIST
76406: LIST
76407: PUSH
76408: LD_INT 2
76410: PUSH
76411: LD_INT 3
76413: PUSH
76414: EMPTY
76415: LIST
76416: LIST
76417: PUSH
76418: LD_INT 1
76420: PUSH
76421: LD_INT 3
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: PUSH
76428: LD_INT 0
76430: PUSH
76431: LD_INT 3
76433: PUSH
76434: EMPTY
76435: LIST
76436: LIST
76437: PUSH
76438: LD_INT 1
76440: NEG
76441: PUSH
76442: LD_INT 2
76444: PUSH
76445: EMPTY
76446: LIST
76447: LIST
76448: PUSH
76449: LD_INT 3
76451: NEG
76452: PUSH
76453: LD_INT 2
76455: NEG
76456: PUSH
76457: EMPTY
76458: LIST
76459: LIST
76460: PUSH
76461: LD_INT 3
76463: NEG
76464: PUSH
76465: LD_INT 3
76467: NEG
76468: PUSH
76469: EMPTY
76470: LIST
76471: LIST
76472: PUSH
76473: EMPTY
76474: LIST
76475: LIST
76476: LIST
76477: LIST
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: LIST
76483: LIST
76484: LIST
76485: LIST
76486: LIST
76487: LIST
76488: LIST
76489: LIST
76490: LIST
76491: LIST
76492: LIST
76493: LIST
76494: LIST
76495: LIST
76496: LIST
76497: LIST
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: LIST
76503: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76504: LD_ADDR_VAR 0 43
76508: PUSH
76509: LD_INT 0
76511: PUSH
76512: LD_INT 0
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: PUSH
76519: LD_INT 0
76521: PUSH
76522: LD_INT 1
76524: NEG
76525: PUSH
76526: EMPTY
76527: LIST
76528: LIST
76529: PUSH
76530: LD_INT 1
76532: PUSH
76533: LD_INT 0
76535: PUSH
76536: EMPTY
76537: LIST
76538: LIST
76539: PUSH
76540: LD_INT 1
76542: PUSH
76543: LD_INT 1
76545: PUSH
76546: EMPTY
76547: LIST
76548: LIST
76549: PUSH
76550: LD_INT 0
76552: PUSH
76553: LD_INT 1
76555: PUSH
76556: EMPTY
76557: LIST
76558: LIST
76559: PUSH
76560: LD_INT 1
76562: NEG
76563: PUSH
76564: LD_INT 0
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: PUSH
76571: LD_INT 1
76573: NEG
76574: PUSH
76575: LD_INT 1
76577: NEG
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: PUSH
76583: LD_INT 1
76585: NEG
76586: PUSH
76587: LD_INT 2
76589: NEG
76590: PUSH
76591: EMPTY
76592: LIST
76593: LIST
76594: PUSH
76595: LD_INT 0
76597: PUSH
76598: LD_INT 2
76600: NEG
76601: PUSH
76602: EMPTY
76603: LIST
76604: LIST
76605: PUSH
76606: LD_INT 1
76608: PUSH
76609: LD_INT 1
76611: NEG
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: PUSH
76617: LD_INT 2
76619: PUSH
76620: LD_INT 0
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: PUSH
76627: LD_INT 2
76629: PUSH
76630: LD_INT 1
76632: PUSH
76633: EMPTY
76634: LIST
76635: LIST
76636: PUSH
76637: LD_INT 1
76639: PUSH
76640: LD_INT 2
76642: PUSH
76643: EMPTY
76644: LIST
76645: LIST
76646: PUSH
76647: LD_INT 0
76649: PUSH
76650: LD_INT 2
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: PUSH
76657: LD_INT 1
76659: NEG
76660: PUSH
76661: LD_INT 1
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: PUSH
76668: LD_INT 2
76670: NEG
76671: PUSH
76672: LD_INT 0
76674: PUSH
76675: EMPTY
76676: LIST
76677: LIST
76678: PUSH
76679: LD_INT 2
76681: NEG
76682: PUSH
76683: LD_INT 1
76685: NEG
76686: PUSH
76687: EMPTY
76688: LIST
76689: LIST
76690: PUSH
76691: LD_INT 1
76693: NEG
76694: PUSH
76695: LD_INT 3
76697: NEG
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: PUSH
76703: LD_INT 0
76705: PUSH
76706: LD_INT 3
76708: NEG
76709: PUSH
76710: EMPTY
76711: LIST
76712: LIST
76713: PUSH
76714: LD_INT 1
76716: PUSH
76717: LD_INT 2
76719: NEG
76720: PUSH
76721: EMPTY
76722: LIST
76723: LIST
76724: PUSH
76725: LD_INT 2
76727: PUSH
76728: LD_INT 1
76730: NEG
76731: PUSH
76732: EMPTY
76733: LIST
76734: LIST
76735: PUSH
76736: LD_INT 3
76738: PUSH
76739: LD_INT 0
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: PUSH
76746: LD_INT 3
76748: PUSH
76749: LD_INT 1
76751: PUSH
76752: EMPTY
76753: LIST
76754: LIST
76755: PUSH
76756: LD_INT 1
76758: PUSH
76759: LD_INT 3
76761: PUSH
76762: EMPTY
76763: LIST
76764: LIST
76765: PUSH
76766: LD_INT 0
76768: PUSH
76769: LD_INT 3
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: LD_INT 1
76778: NEG
76779: PUSH
76780: LD_INT 2
76782: PUSH
76783: EMPTY
76784: LIST
76785: LIST
76786: PUSH
76787: LD_INT 2
76789: NEG
76790: PUSH
76791: LD_INT 1
76793: PUSH
76794: EMPTY
76795: LIST
76796: LIST
76797: PUSH
76798: LD_INT 3
76800: NEG
76801: PUSH
76802: LD_INT 0
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: PUSH
76809: LD_INT 3
76811: NEG
76812: PUSH
76813: LD_INT 1
76815: NEG
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: PUSH
76821: EMPTY
76822: LIST
76823: LIST
76824: LIST
76825: LIST
76826: LIST
76827: LIST
76828: LIST
76829: LIST
76830: LIST
76831: LIST
76832: LIST
76833: LIST
76834: LIST
76835: LIST
76836: LIST
76837: LIST
76838: LIST
76839: LIST
76840: LIST
76841: LIST
76842: LIST
76843: LIST
76844: LIST
76845: LIST
76846: LIST
76847: LIST
76848: LIST
76849: LIST
76850: LIST
76851: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76852: LD_ADDR_VAR 0 44
76856: PUSH
76857: LD_INT 0
76859: PUSH
76860: LD_INT 0
76862: PUSH
76863: EMPTY
76864: LIST
76865: LIST
76866: PUSH
76867: LD_INT 0
76869: PUSH
76870: LD_INT 1
76872: NEG
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: PUSH
76878: LD_INT 1
76880: PUSH
76881: LD_INT 0
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: PUSH
76888: LD_INT 1
76890: PUSH
76891: LD_INT 1
76893: PUSH
76894: EMPTY
76895: LIST
76896: LIST
76897: PUSH
76898: LD_INT 0
76900: PUSH
76901: LD_INT 1
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: PUSH
76908: LD_INT 1
76910: NEG
76911: PUSH
76912: LD_INT 0
76914: PUSH
76915: EMPTY
76916: LIST
76917: LIST
76918: PUSH
76919: LD_INT 1
76921: NEG
76922: PUSH
76923: LD_INT 1
76925: NEG
76926: PUSH
76927: EMPTY
76928: LIST
76929: LIST
76930: PUSH
76931: LD_INT 1
76933: NEG
76934: PUSH
76935: LD_INT 2
76937: NEG
76938: PUSH
76939: EMPTY
76940: LIST
76941: LIST
76942: PUSH
76943: LD_INT 1
76945: PUSH
76946: LD_INT 1
76948: NEG
76949: PUSH
76950: EMPTY
76951: LIST
76952: LIST
76953: PUSH
76954: LD_INT 2
76956: PUSH
76957: LD_INT 0
76959: PUSH
76960: EMPTY
76961: LIST
76962: LIST
76963: PUSH
76964: LD_INT 2
76966: PUSH
76967: LD_INT 1
76969: PUSH
76970: EMPTY
76971: LIST
76972: LIST
76973: PUSH
76974: LD_INT 2
76976: PUSH
76977: LD_INT 2
76979: PUSH
76980: EMPTY
76981: LIST
76982: LIST
76983: PUSH
76984: LD_INT 1
76986: PUSH
76987: LD_INT 2
76989: PUSH
76990: EMPTY
76991: LIST
76992: LIST
76993: PUSH
76994: LD_INT 1
76996: NEG
76997: PUSH
76998: LD_INT 1
77000: PUSH
77001: EMPTY
77002: LIST
77003: LIST
77004: PUSH
77005: LD_INT 2
77007: NEG
77008: PUSH
77009: LD_INT 0
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: PUSH
77016: LD_INT 2
77018: NEG
77019: PUSH
77020: LD_INT 1
77022: NEG
77023: PUSH
77024: EMPTY
77025: LIST
77026: LIST
77027: PUSH
77028: LD_INT 2
77030: NEG
77031: PUSH
77032: LD_INT 2
77034: NEG
77035: PUSH
77036: EMPTY
77037: LIST
77038: LIST
77039: PUSH
77040: LD_INT 2
77042: NEG
77043: PUSH
77044: LD_INT 3
77046: NEG
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: PUSH
77052: LD_INT 2
77054: PUSH
77055: LD_INT 1
77057: NEG
77058: PUSH
77059: EMPTY
77060: LIST
77061: LIST
77062: PUSH
77063: LD_INT 3
77065: PUSH
77066: LD_INT 0
77068: PUSH
77069: EMPTY
77070: LIST
77071: LIST
77072: PUSH
77073: LD_INT 3
77075: PUSH
77076: LD_INT 1
77078: PUSH
77079: EMPTY
77080: LIST
77081: LIST
77082: PUSH
77083: LD_INT 3
77085: PUSH
77086: LD_INT 2
77088: PUSH
77089: EMPTY
77090: LIST
77091: LIST
77092: PUSH
77093: LD_INT 3
77095: PUSH
77096: LD_INT 3
77098: PUSH
77099: EMPTY
77100: LIST
77101: LIST
77102: PUSH
77103: LD_INT 2
77105: PUSH
77106: LD_INT 3
77108: PUSH
77109: EMPTY
77110: LIST
77111: LIST
77112: PUSH
77113: LD_INT 2
77115: NEG
77116: PUSH
77117: LD_INT 1
77119: PUSH
77120: EMPTY
77121: LIST
77122: LIST
77123: PUSH
77124: LD_INT 3
77126: NEG
77127: PUSH
77128: LD_INT 0
77130: PUSH
77131: EMPTY
77132: LIST
77133: LIST
77134: PUSH
77135: LD_INT 3
77137: NEG
77138: PUSH
77139: LD_INT 1
77141: NEG
77142: PUSH
77143: EMPTY
77144: LIST
77145: LIST
77146: PUSH
77147: LD_INT 3
77149: NEG
77150: PUSH
77151: LD_INT 2
77153: NEG
77154: PUSH
77155: EMPTY
77156: LIST
77157: LIST
77158: PUSH
77159: LD_INT 3
77161: NEG
77162: PUSH
77163: LD_INT 3
77165: NEG
77166: PUSH
77167: EMPTY
77168: LIST
77169: LIST
77170: PUSH
77171: EMPTY
77172: LIST
77173: LIST
77174: LIST
77175: LIST
77176: LIST
77177: LIST
77178: LIST
77179: LIST
77180: LIST
77181: LIST
77182: LIST
77183: LIST
77184: LIST
77185: LIST
77186: LIST
77187: LIST
77188: LIST
77189: LIST
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: LIST
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: LIST
77200: LIST
77201: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77202: LD_ADDR_VAR 0 45
77206: PUSH
77207: LD_INT 0
77209: PUSH
77210: LD_INT 0
77212: PUSH
77213: EMPTY
77214: LIST
77215: LIST
77216: PUSH
77217: LD_INT 0
77219: PUSH
77220: LD_INT 1
77222: NEG
77223: PUSH
77224: EMPTY
77225: LIST
77226: LIST
77227: PUSH
77228: LD_INT 1
77230: PUSH
77231: LD_INT 0
77233: PUSH
77234: EMPTY
77235: LIST
77236: LIST
77237: PUSH
77238: LD_INT 1
77240: PUSH
77241: LD_INT 1
77243: PUSH
77244: EMPTY
77245: LIST
77246: LIST
77247: PUSH
77248: LD_INT 0
77250: PUSH
77251: LD_INT 1
77253: PUSH
77254: EMPTY
77255: LIST
77256: LIST
77257: PUSH
77258: LD_INT 1
77260: NEG
77261: PUSH
77262: LD_INT 0
77264: PUSH
77265: EMPTY
77266: LIST
77267: LIST
77268: PUSH
77269: LD_INT 1
77271: NEG
77272: PUSH
77273: LD_INT 1
77275: NEG
77276: PUSH
77277: EMPTY
77278: LIST
77279: LIST
77280: PUSH
77281: LD_INT 1
77283: NEG
77284: PUSH
77285: LD_INT 2
77287: NEG
77288: PUSH
77289: EMPTY
77290: LIST
77291: LIST
77292: PUSH
77293: LD_INT 0
77295: PUSH
77296: LD_INT 2
77298: NEG
77299: PUSH
77300: EMPTY
77301: LIST
77302: LIST
77303: PUSH
77304: LD_INT 1
77306: PUSH
77307: LD_INT 1
77309: NEG
77310: PUSH
77311: EMPTY
77312: LIST
77313: LIST
77314: PUSH
77315: LD_INT 2
77317: PUSH
77318: LD_INT 1
77320: PUSH
77321: EMPTY
77322: LIST
77323: LIST
77324: PUSH
77325: LD_INT 2
77327: PUSH
77328: LD_INT 2
77330: PUSH
77331: EMPTY
77332: LIST
77333: LIST
77334: PUSH
77335: LD_INT 1
77337: PUSH
77338: LD_INT 2
77340: PUSH
77341: EMPTY
77342: LIST
77343: LIST
77344: PUSH
77345: LD_INT 0
77347: PUSH
77348: LD_INT 2
77350: PUSH
77351: EMPTY
77352: LIST
77353: LIST
77354: PUSH
77355: LD_INT 1
77357: NEG
77358: PUSH
77359: LD_INT 1
77361: PUSH
77362: EMPTY
77363: LIST
77364: LIST
77365: PUSH
77366: LD_INT 2
77368: NEG
77369: PUSH
77370: LD_INT 1
77372: NEG
77373: PUSH
77374: EMPTY
77375: LIST
77376: LIST
77377: PUSH
77378: LD_INT 2
77380: NEG
77381: PUSH
77382: LD_INT 2
77384: NEG
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: PUSH
77390: LD_INT 2
77392: NEG
77393: PUSH
77394: LD_INT 3
77396: NEG
77397: PUSH
77398: EMPTY
77399: LIST
77400: LIST
77401: PUSH
77402: LD_INT 1
77404: NEG
77405: PUSH
77406: LD_INT 3
77408: NEG
77409: PUSH
77410: EMPTY
77411: LIST
77412: LIST
77413: PUSH
77414: LD_INT 0
77416: PUSH
77417: LD_INT 3
77419: NEG
77420: PUSH
77421: EMPTY
77422: LIST
77423: LIST
77424: PUSH
77425: LD_INT 1
77427: PUSH
77428: LD_INT 2
77430: NEG
77431: PUSH
77432: EMPTY
77433: LIST
77434: LIST
77435: PUSH
77436: LD_INT 3
77438: PUSH
77439: LD_INT 2
77441: PUSH
77442: EMPTY
77443: LIST
77444: LIST
77445: PUSH
77446: LD_INT 3
77448: PUSH
77449: LD_INT 3
77451: PUSH
77452: EMPTY
77453: LIST
77454: LIST
77455: PUSH
77456: LD_INT 2
77458: PUSH
77459: LD_INT 3
77461: PUSH
77462: EMPTY
77463: LIST
77464: LIST
77465: PUSH
77466: LD_INT 1
77468: PUSH
77469: LD_INT 3
77471: PUSH
77472: EMPTY
77473: LIST
77474: LIST
77475: PUSH
77476: LD_INT 0
77478: PUSH
77479: LD_INT 3
77481: PUSH
77482: EMPTY
77483: LIST
77484: LIST
77485: PUSH
77486: LD_INT 1
77488: NEG
77489: PUSH
77490: LD_INT 2
77492: PUSH
77493: EMPTY
77494: LIST
77495: LIST
77496: PUSH
77497: LD_INT 3
77499: NEG
77500: PUSH
77501: LD_INT 2
77503: NEG
77504: PUSH
77505: EMPTY
77506: LIST
77507: LIST
77508: PUSH
77509: LD_INT 3
77511: NEG
77512: PUSH
77513: LD_INT 3
77515: NEG
77516: PUSH
77517: EMPTY
77518: LIST
77519: LIST
77520: PUSH
77521: EMPTY
77522: LIST
77523: LIST
77524: LIST
77525: LIST
77526: LIST
77527: LIST
77528: LIST
77529: LIST
77530: LIST
77531: LIST
77532: LIST
77533: LIST
77534: LIST
77535: LIST
77536: LIST
77537: LIST
77538: LIST
77539: LIST
77540: LIST
77541: LIST
77542: LIST
77543: LIST
77544: LIST
77545: LIST
77546: LIST
77547: LIST
77548: LIST
77549: LIST
77550: LIST
77551: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77552: LD_ADDR_VAR 0 46
77556: PUSH
77557: LD_INT 0
77559: PUSH
77560: LD_INT 0
77562: PUSH
77563: EMPTY
77564: LIST
77565: LIST
77566: PUSH
77567: LD_INT 0
77569: PUSH
77570: LD_INT 1
77572: NEG
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: PUSH
77578: LD_INT 1
77580: PUSH
77581: LD_INT 0
77583: PUSH
77584: EMPTY
77585: LIST
77586: LIST
77587: PUSH
77588: LD_INT 1
77590: PUSH
77591: LD_INT 1
77593: PUSH
77594: EMPTY
77595: LIST
77596: LIST
77597: PUSH
77598: LD_INT 0
77600: PUSH
77601: LD_INT 1
77603: PUSH
77604: EMPTY
77605: LIST
77606: LIST
77607: PUSH
77608: LD_INT 1
77610: NEG
77611: PUSH
77612: LD_INT 0
77614: PUSH
77615: EMPTY
77616: LIST
77617: LIST
77618: PUSH
77619: LD_INT 1
77621: NEG
77622: PUSH
77623: LD_INT 1
77625: NEG
77626: PUSH
77627: EMPTY
77628: LIST
77629: LIST
77630: PUSH
77631: LD_INT 1
77633: NEG
77634: PUSH
77635: LD_INT 2
77637: NEG
77638: PUSH
77639: EMPTY
77640: LIST
77641: LIST
77642: PUSH
77643: LD_INT 0
77645: PUSH
77646: LD_INT 2
77648: NEG
77649: PUSH
77650: EMPTY
77651: LIST
77652: LIST
77653: PUSH
77654: LD_INT 1
77656: PUSH
77657: LD_INT 1
77659: NEG
77660: PUSH
77661: EMPTY
77662: LIST
77663: LIST
77664: PUSH
77665: LD_INT 2
77667: PUSH
77668: LD_INT 0
77670: PUSH
77671: EMPTY
77672: LIST
77673: LIST
77674: PUSH
77675: LD_INT 2
77677: PUSH
77678: LD_INT 1
77680: PUSH
77681: EMPTY
77682: LIST
77683: LIST
77684: PUSH
77685: LD_INT 1
77687: PUSH
77688: LD_INT 2
77690: PUSH
77691: EMPTY
77692: LIST
77693: LIST
77694: PUSH
77695: LD_INT 0
77697: PUSH
77698: LD_INT 2
77700: PUSH
77701: EMPTY
77702: LIST
77703: LIST
77704: PUSH
77705: LD_INT 1
77707: NEG
77708: PUSH
77709: LD_INT 1
77711: PUSH
77712: EMPTY
77713: LIST
77714: LIST
77715: PUSH
77716: LD_INT 2
77718: NEG
77719: PUSH
77720: LD_INT 0
77722: PUSH
77723: EMPTY
77724: LIST
77725: LIST
77726: PUSH
77727: LD_INT 2
77729: NEG
77730: PUSH
77731: LD_INT 1
77733: NEG
77734: PUSH
77735: EMPTY
77736: LIST
77737: LIST
77738: PUSH
77739: LD_INT 1
77741: NEG
77742: PUSH
77743: LD_INT 3
77745: NEG
77746: PUSH
77747: EMPTY
77748: LIST
77749: LIST
77750: PUSH
77751: LD_INT 0
77753: PUSH
77754: LD_INT 3
77756: NEG
77757: PUSH
77758: EMPTY
77759: LIST
77760: LIST
77761: PUSH
77762: LD_INT 1
77764: PUSH
77765: LD_INT 2
77767: NEG
77768: PUSH
77769: EMPTY
77770: LIST
77771: LIST
77772: PUSH
77773: LD_INT 2
77775: PUSH
77776: LD_INT 1
77778: NEG
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: PUSH
77784: LD_INT 3
77786: PUSH
77787: LD_INT 0
77789: PUSH
77790: EMPTY
77791: LIST
77792: LIST
77793: PUSH
77794: LD_INT 3
77796: PUSH
77797: LD_INT 1
77799: PUSH
77800: EMPTY
77801: LIST
77802: LIST
77803: PUSH
77804: LD_INT 1
77806: PUSH
77807: LD_INT 3
77809: PUSH
77810: EMPTY
77811: LIST
77812: LIST
77813: PUSH
77814: LD_INT 0
77816: PUSH
77817: LD_INT 3
77819: PUSH
77820: EMPTY
77821: LIST
77822: LIST
77823: PUSH
77824: LD_INT 1
77826: NEG
77827: PUSH
77828: LD_INT 2
77830: PUSH
77831: EMPTY
77832: LIST
77833: LIST
77834: PUSH
77835: LD_INT 2
77837: NEG
77838: PUSH
77839: LD_INT 1
77841: PUSH
77842: EMPTY
77843: LIST
77844: LIST
77845: PUSH
77846: LD_INT 3
77848: NEG
77849: PUSH
77850: LD_INT 0
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: PUSH
77857: LD_INT 3
77859: NEG
77860: PUSH
77861: LD_INT 1
77863: NEG
77864: PUSH
77865: EMPTY
77866: LIST
77867: LIST
77868: PUSH
77869: EMPTY
77870: LIST
77871: LIST
77872: LIST
77873: LIST
77874: LIST
77875: LIST
77876: LIST
77877: LIST
77878: LIST
77879: LIST
77880: LIST
77881: LIST
77882: LIST
77883: LIST
77884: LIST
77885: LIST
77886: LIST
77887: LIST
77888: LIST
77889: LIST
77890: LIST
77891: LIST
77892: LIST
77893: LIST
77894: LIST
77895: LIST
77896: LIST
77897: LIST
77898: LIST
77899: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77900: LD_ADDR_VAR 0 47
77904: PUSH
77905: LD_INT 0
77907: PUSH
77908: LD_INT 0
77910: PUSH
77911: EMPTY
77912: LIST
77913: LIST
77914: PUSH
77915: LD_INT 0
77917: PUSH
77918: LD_INT 1
77920: NEG
77921: PUSH
77922: EMPTY
77923: LIST
77924: LIST
77925: PUSH
77926: LD_INT 1
77928: PUSH
77929: LD_INT 0
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: PUSH
77936: LD_INT 1
77938: PUSH
77939: LD_INT 1
77941: PUSH
77942: EMPTY
77943: LIST
77944: LIST
77945: PUSH
77946: LD_INT 0
77948: PUSH
77949: LD_INT 1
77951: PUSH
77952: EMPTY
77953: LIST
77954: LIST
77955: PUSH
77956: LD_INT 1
77958: NEG
77959: PUSH
77960: LD_INT 0
77962: PUSH
77963: EMPTY
77964: LIST
77965: LIST
77966: PUSH
77967: LD_INT 1
77969: NEG
77970: PUSH
77971: LD_INT 1
77973: NEG
77974: PUSH
77975: EMPTY
77976: LIST
77977: LIST
77978: PUSH
77979: LD_INT 1
77981: NEG
77982: PUSH
77983: LD_INT 2
77985: NEG
77986: PUSH
77987: EMPTY
77988: LIST
77989: LIST
77990: PUSH
77991: LD_INT 0
77993: PUSH
77994: LD_INT 2
77996: NEG
77997: PUSH
77998: EMPTY
77999: LIST
78000: LIST
78001: PUSH
78002: LD_INT 1
78004: PUSH
78005: LD_INT 1
78007: NEG
78008: PUSH
78009: EMPTY
78010: LIST
78011: LIST
78012: PUSH
78013: LD_INT 2
78015: NEG
78016: PUSH
78017: LD_INT 1
78019: NEG
78020: PUSH
78021: EMPTY
78022: LIST
78023: LIST
78024: PUSH
78025: LD_INT 2
78027: NEG
78028: PUSH
78029: LD_INT 2
78031: NEG
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: PUSH
78037: EMPTY
78038: LIST
78039: LIST
78040: LIST
78041: LIST
78042: LIST
78043: LIST
78044: LIST
78045: LIST
78046: LIST
78047: LIST
78048: LIST
78049: LIST
78050: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78051: LD_ADDR_VAR 0 48
78055: PUSH
78056: LD_INT 0
78058: PUSH
78059: LD_INT 0
78061: PUSH
78062: EMPTY
78063: LIST
78064: LIST
78065: PUSH
78066: LD_INT 0
78068: PUSH
78069: LD_INT 1
78071: NEG
78072: PUSH
78073: EMPTY
78074: LIST
78075: LIST
78076: PUSH
78077: LD_INT 1
78079: PUSH
78080: LD_INT 0
78082: PUSH
78083: EMPTY
78084: LIST
78085: LIST
78086: PUSH
78087: LD_INT 1
78089: PUSH
78090: LD_INT 1
78092: PUSH
78093: EMPTY
78094: LIST
78095: LIST
78096: PUSH
78097: LD_INT 0
78099: PUSH
78100: LD_INT 1
78102: PUSH
78103: EMPTY
78104: LIST
78105: LIST
78106: PUSH
78107: LD_INT 1
78109: NEG
78110: PUSH
78111: LD_INT 0
78113: PUSH
78114: EMPTY
78115: LIST
78116: LIST
78117: PUSH
78118: LD_INT 1
78120: NEG
78121: PUSH
78122: LD_INT 1
78124: NEG
78125: PUSH
78126: EMPTY
78127: LIST
78128: LIST
78129: PUSH
78130: LD_INT 1
78132: NEG
78133: PUSH
78134: LD_INT 2
78136: NEG
78137: PUSH
78138: EMPTY
78139: LIST
78140: LIST
78141: PUSH
78142: LD_INT 0
78144: PUSH
78145: LD_INT 2
78147: NEG
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: PUSH
78153: LD_INT 1
78155: PUSH
78156: LD_INT 1
78158: NEG
78159: PUSH
78160: EMPTY
78161: LIST
78162: LIST
78163: PUSH
78164: LD_INT 2
78166: PUSH
78167: LD_INT 0
78169: PUSH
78170: EMPTY
78171: LIST
78172: LIST
78173: PUSH
78174: LD_INT 2
78176: PUSH
78177: LD_INT 1
78179: PUSH
78180: EMPTY
78181: LIST
78182: LIST
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: LIST
78188: LIST
78189: LIST
78190: LIST
78191: LIST
78192: LIST
78193: LIST
78194: LIST
78195: LIST
78196: LIST
78197: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78198: LD_ADDR_VAR 0 49
78202: PUSH
78203: LD_INT 0
78205: PUSH
78206: LD_INT 0
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: PUSH
78213: LD_INT 0
78215: PUSH
78216: LD_INT 1
78218: NEG
78219: PUSH
78220: EMPTY
78221: LIST
78222: LIST
78223: PUSH
78224: LD_INT 1
78226: PUSH
78227: LD_INT 0
78229: PUSH
78230: EMPTY
78231: LIST
78232: LIST
78233: PUSH
78234: LD_INT 1
78236: PUSH
78237: LD_INT 1
78239: PUSH
78240: EMPTY
78241: LIST
78242: LIST
78243: PUSH
78244: LD_INT 0
78246: PUSH
78247: LD_INT 1
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: PUSH
78254: LD_INT 1
78256: NEG
78257: PUSH
78258: LD_INT 0
78260: PUSH
78261: EMPTY
78262: LIST
78263: LIST
78264: PUSH
78265: LD_INT 1
78267: NEG
78268: PUSH
78269: LD_INT 1
78271: NEG
78272: PUSH
78273: EMPTY
78274: LIST
78275: LIST
78276: PUSH
78277: LD_INT 1
78279: PUSH
78280: LD_INT 1
78282: NEG
78283: PUSH
78284: EMPTY
78285: LIST
78286: LIST
78287: PUSH
78288: LD_INT 2
78290: PUSH
78291: LD_INT 0
78293: PUSH
78294: EMPTY
78295: LIST
78296: LIST
78297: PUSH
78298: LD_INT 2
78300: PUSH
78301: LD_INT 1
78303: PUSH
78304: EMPTY
78305: LIST
78306: LIST
78307: PUSH
78308: LD_INT 2
78310: PUSH
78311: LD_INT 2
78313: PUSH
78314: EMPTY
78315: LIST
78316: LIST
78317: PUSH
78318: LD_INT 1
78320: PUSH
78321: LD_INT 2
78323: PUSH
78324: EMPTY
78325: LIST
78326: LIST
78327: PUSH
78328: EMPTY
78329: LIST
78330: LIST
78331: LIST
78332: LIST
78333: LIST
78334: LIST
78335: LIST
78336: LIST
78337: LIST
78338: LIST
78339: LIST
78340: LIST
78341: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78342: LD_ADDR_VAR 0 50
78346: PUSH
78347: LD_INT 0
78349: PUSH
78350: LD_INT 0
78352: PUSH
78353: EMPTY
78354: LIST
78355: LIST
78356: PUSH
78357: LD_INT 0
78359: PUSH
78360: LD_INT 1
78362: NEG
78363: PUSH
78364: EMPTY
78365: LIST
78366: LIST
78367: PUSH
78368: LD_INT 1
78370: PUSH
78371: LD_INT 0
78373: PUSH
78374: EMPTY
78375: LIST
78376: LIST
78377: PUSH
78378: LD_INT 1
78380: PUSH
78381: LD_INT 1
78383: PUSH
78384: EMPTY
78385: LIST
78386: LIST
78387: PUSH
78388: LD_INT 0
78390: PUSH
78391: LD_INT 1
78393: PUSH
78394: EMPTY
78395: LIST
78396: LIST
78397: PUSH
78398: LD_INT 1
78400: NEG
78401: PUSH
78402: LD_INT 0
78404: PUSH
78405: EMPTY
78406: LIST
78407: LIST
78408: PUSH
78409: LD_INT 1
78411: NEG
78412: PUSH
78413: LD_INT 1
78415: NEG
78416: PUSH
78417: EMPTY
78418: LIST
78419: LIST
78420: PUSH
78421: LD_INT 2
78423: PUSH
78424: LD_INT 1
78426: PUSH
78427: EMPTY
78428: LIST
78429: LIST
78430: PUSH
78431: LD_INT 2
78433: PUSH
78434: LD_INT 2
78436: PUSH
78437: EMPTY
78438: LIST
78439: LIST
78440: PUSH
78441: LD_INT 1
78443: PUSH
78444: LD_INT 2
78446: PUSH
78447: EMPTY
78448: LIST
78449: LIST
78450: PUSH
78451: LD_INT 0
78453: PUSH
78454: LD_INT 2
78456: PUSH
78457: EMPTY
78458: LIST
78459: LIST
78460: PUSH
78461: LD_INT 1
78463: NEG
78464: PUSH
78465: LD_INT 1
78467: PUSH
78468: EMPTY
78469: LIST
78470: LIST
78471: PUSH
78472: EMPTY
78473: LIST
78474: LIST
78475: LIST
78476: LIST
78477: LIST
78478: LIST
78479: LIST
78480: LIST
78481: LIST
78482: LIST
78483: LIST
78484: LIST
78485: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78486: LD_ADDR_VAR 0 51
78490: PUSH
78491: LD_INT 0
78493: PUSH
78494: LD_INT 0
78496: PUSH
78497: EMPTY
78498: LIST
78499: LIST
78500: PUSH
78501: LD_INT 0
78503: PUSH
78504: LD_INT 1
78506: NEG
78507: PUSH
78508: EMPTY
78509: LIST
78510: LIST
78511: PUSH
78512: LD_INT 1
78514: PUSH
78515: LD_INT 0
78517: PUSH
78518: EMPTY
78519: LIST
78520: LIST
78521: PUSH
78522: LD_INT 1
78524: PUSH
78525: LD_INT 1
78527: PUSH
78528: EMPTY
78529: LIST
78530: LIST
78531: PUSH
78532: LD_INT 0
78534: PUSH
78535: LD_INT 1
78537: PUSH
78538: EMPTY
78539: LIST
78540: LIST
78541: PUSH
78542: LD_INT 1
78544: NEG
78545: PUSH
78546: LD_INT 0
78548: PUSH
78549: EMPTY
78550: LIST
78551: LIST
78552: PUSH
78553: LD_INT 1
78555: NEG
78556: PUSH
78557: LD_INT 1
78559: NEG
78560: PUSH
78561: EMPTY
78562: LIST
78563: LIST
78564: PUSH
78565: LD_INT 1
78567: PUSH
78568: LD_INT 2
78570: PUSH
78571: EMPTY
78572: LIST
78573: LIST
78574: PUSH
78575: LD_INT 0
78577: PUSH
78578: LD_INT 2
78580: PUSH
78581: EMPTY
78582: LIST
78583: LIST
78584: PUSH
78585: LD_INT 1
78587: NEG
78588: PUSH
78589: LD_INT 1
78591: PUSH
78592: EMPTY
78593: LIST
78594: LIST
78595: PUSH
78596: LD_INT 2
78598: NEG
78599: PUSH
78600: LD_INT 0
78602: PUSH
78603: EMPTY
78604: LIST
78605: LIST
78606: PUSH
78607: LD_INT 2
78609: NEG
78610: PUSH
78611: LD_INT 1
78613: NEG
78614: PUSH
78615: EMPTY
78616: LIST
78617: LIST
78618: PUSH
78619: EMPTY
78620: LIST
78621: LIST
78622: LIST
78623: LIST
78624: LIST
78625: LIST
78626: LIST
78627: LIST
78628: LIST
78629: LIST
78630: LIST
78631: LIST
78632: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78633: LD_ADDR_VAR 0 52
78637: PUSH
78638: LD_INT 0
78640: PUSH
78641: LD_INT 0
78643: PUSH
78644: EMPTY
78645: LIST
78646: LIST
78647: PUSH
78648: LD_INT 0
78650: PUSH
78651: LD_INT 1
78653: NEG
78654: PUSH
78655: EMPTY
78656: LIST
78657: LIST
78658: PUSH
78659: LD_INT 1
78661: PUSH
78662: LD_INT 0
78664: PUSH
78665: EMPTY
78666: LIST
78667: LIST
78668: PUSH
78669: LD_INT 1
78671: PUSH
78672: LD_INT 1
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: PUSH
78679: LD_INT 0
78681: PUSH
78682: LD_INT 1
78684: PUSH
78685: EMPTY
78686: LIST
78687: LIST
78688: PUSH
78689: LD_INT 1
78691: NEG
78692: PUSH
78693: LD_INT 0
78695: PUSH
78696: EMPTY
78697: LIST
78698: LIST
78699: PUSH
78700: LD_INT 1
78702: NEG
78703: PUSH
78704: LD_INT 1
78706: NEG
78707: PUSH
78708: EMPTY
78709: LIST
78710: LIST
78711: PUSH
78712: LD_INT 1
78714: NEG
78715: PUSH
78716: LD_INT 2
78718: NEG
78719: PUSH
78720: EMPTY
78721: LIST
78722: LIST
78723: PUSH
78724: LD_INT 1
78726: NEG
78727: PUSH
78728: LD_INT 1
78730: PUSH
78731: EMPTY
78732: LIST
78733: LIST
78734: PUSH
78735: LD_INT 2
78737: NEG
78738: PUSH
78739: LD_INT 0
78741: PUSH
78742: EMPTY
78743: LIST
78744: LIST
78745: PUSH
78746: LD_INT 2
78748: NEG
78749: PUSH
78750: LD_INT 1
78752: NEG
78753: PUSH
78754: EMPTY
78755: LIST
78756: LIST
78757: PUSH
78758: LD_INT 2
78760: NEG
78761: PUSH
78762: LD_INT 2
78764: NEG
78765: PUSH
78766: EMPTY
78767: LIST
78768: LIST
78769: PUSH
78770: EMPTY
78771: LIST
78772: LIST
78773: LIST
78774: LIST
78775: LIST
78776: LIST
78777: LIST
78778: LIST
78779: LIST
78780: LIST
78781: LIST
78782: LIST
78783: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78784: LD_ADDR_VAR 0 53
78788: PUSH
78789: LD_INT 0
78791: PUSH
78792: LD_INT 0
78794: PUSH
78795: EMPTY
78796: LIST
78797: LIST
78798: PUSH
78799: LD_INT 0
78801: PUSH
78802: LD_INT 1
78804: NEG
78805: PUSH
78806: EMPTY
78807: LIST
78808: LIST
78809: PUSH
78810: LD_INT 1
78812: PUSH
78813: LD_INT 0
78815: PUSH
78816: EMPTY
78817: LIST
78818: LIST
78819: PUSH
78820: LD_INT 1
78822: PUSH
78823: LD_INT 1
78825: PUSH
78826: EMPTY
78827: LIST
78828: LIST
78829: PUSH
78830: LD_INT 0
78832: PUSH
78833: LD_INT 1
78835: PUSH
78836: EMPTY
78837: LIST
78838: LIST
78839: PUSH
78840: LD_INT 1
78842: NEG
78843: PUSH
78844: LD_INT 0
78846: PUSH
78847: EMPTY
78848: LIST
78849: LIST
78850: PUSH
78851: LD_INT 1
78853: NEG
78854: PUSH
78855: LD_INT 1
78857: NEG
78858: PUSH
78859: EMPTY
78860: LIST
78861: LIST
78862: PUSH
78863: LD_INT 1
78865: NEG
78866: PUSH
78867: LD_INT 2
78869: NEG
78870: PUSH
78871: EMPTY
78872: LIST
78873: LIST
78874: PUSH
78875: LD_INT 0
78877: PUSH
78878: LD_INT 2
78880: NEG
78881: PUSH
78882: EMPTY
78883: LIST
78884: LIST
78885: PUSH
78886: LD_INT 1
78888: PUSH
78889: LD_INT 1
78891: NEG
78892: PUSH
78893: EMPTY
78894: LIST
78895: LIST
78896: PUSH
78897: LD_INT 2
78899: PUSH
78900: LD_INT 0
78902: PUSH
78903: EMPTY
78904: LIST
78905: LIST
78906: PUSH
78907: LD_INT 2
78909: PUSH
78910: LD_INT 1
78912: PUSH
78913: EMPTY
78914: LIST
78915: LIST
78916: PUSH
78917: LD_INT 2
78919: PUSH
78920: LD_INT 2
78922: PUSH
78923: EMPTY
78924: LIST
78925: LIST
78926: PUSH
78927: LD_INT 1
78929: PUSH
78930: LD_INT 2
78932: PUSH
78933: EMPTY
78934: LIST
78935: LIST
78936: PUSH
78937: LD_INT 0
78939: PUSH
78940: LD_INT 2
78942: PUSH
78943: EMPTY
78944: LIST
78945: LIST
78946: PUSH
78947: LD_INT 1
78949: NEG
78950: PUSH
78951: LD_INT 1
78953: PUSH
78954: EMPTY
78955: LIST
78956: LIST
78957: PUSH
78958: LD_INT 2
78960: NEG
78961: PUSH
78962: LD_INT 0
78964: PUSH
78965: EMPTY
78966: LIST
78967: LIST
78968: PUSH
78969: LD_INT 2
78971: NEG
78972: PUSH
78973: LD_INT 1
78975: NEG
78976: PUSH
78977: EMPTY
78978: LIST
78979: LIST
78980: PUSH
78981: LD_INT 2
78983: NEG
78984: PUSH
78985: LD_INT 2
78987: NEG
78988: PUSH
78989: EMPTY
78990: LIST
78991: LIST
78992: PUSH
78993: EMPTY
78994: LIST
78995: LIST
78996: LIST
78997: LIST
78998: LIST
78999: LIST
79000: LIST
79001: LIST
79002: LIST
79003: LIST
79004: LIST
79005: LIST
79006: LIST
79007: LIST
79008: LIST
79009: LIST
79010: LIST
79011: LIST
79012: LIST
79013: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79014: LD_ADDR_VAR 0 54
79018: PUSH
79019: LD_INT 0
79021: PUSH
79022: LD_INT 0
79024: PUSH
79025: EMPTY
79026: LIST
79027: LIST
79028: PUSH
79029: LD_INT 0
79031: PUSH
79032: LD_INT 1
79034: NEG
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: PUSH
79040: LD_INT 1
79042: PUSH
79043: LD_INT 0
79045: PUSH
79046: EMPTY
79047: LIST
79048: LIST
79049: PUSH
79050: LD_INT 1
79052: PUSH
79053: LD_INT 1
79055: PUSH
79056: EMPTY
79057: LIST
79058: LIST
79059: PUSH
79060: LD_INT 0
79062: PUSH
79063: LD_INT 1
79065: PUSH
79066: EMPTY
79067: LIST
79068: LIST
79069: PUSH
79070: LD_INT 1
79072: NEG
79073: PUSH
79074: LD_INT 0
79076: PUSH
79077: EMPTY
79078: LIST
79079: LIST
79080: PUSH
79081: LD_INT 1
79083: NEG
79084: PUSH
79085: LD_INT 1
79087: NEG
79088: PUSH
79089: EMPTY
79090: LIST
79091: LIST
79092: PUSH
79093: LD_INT 1
79095: NEG
79096: PUSH
79097: LD_INT 2
79099: NEG
79100: PUSH
79101: EMPTY
79102: LIST
79103: LIST
79104: PUSH
79105: LD_INT 0
79107: PUSH
79108: LD_INT 2
79110: NEG
79111: PUSH
79112: EMPTY
79113: LIST
79114: LIST
79115: PUSH
79116: LD_INT 1
79118: PUSH
79119: LD_INT 1
79121: NEG
79122: PUSH
79123: EMPTY
79124: LIST
79125: LIST
79126: PUSH
79127: LD_INT 2
79129: PUSH
79130: LD_INT 0
79132: PUSH
79133: EMPTY
79134: LIST
79135: LIST
79136: PUSH
79137: LD_INT 2
79139: PUSH
79140: LD_INT 1
79142: PUSH
79143: EMPTY
79144: LIST
79145: LIST
79146: PUSH
79147: LD_INT 2
79149: PUSH
79150: LD_INT 2
79152: PUSH
79153: EMPTY
79154: LIST
79155: LIST
79156: PUSH
79157: LD_INT 1
79159: PUSH
79160: LD_INT 2
79162: PUSH
79163: EMPTY
79164: LIST
79165: LIST
79166: PUSH
79167: LD_INT 0
79169: PUSH
79170: LD_INT 2
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: PUSH
79177: LD_INT 1
79179: NEG
79180: PUSH
79181: LD_INT 1
79183: PUSH
79184: EMPTY
79185: LIST
79186: LIST
79187: PUSH
79188: LD_INT 2
79190: NEG
79191: PUSH
79192: LD_INT 0
79194: PUSH
79195: EMPTY
79196: LIST
79197: LIST
79198: PUSH
79199: LD_INT 2
79201: NEG
79202: PUSH
79203: LD_INT 1
79205: NEG
79206: PUSH
79207: EMPTY
79208: LIST
79209: LIST
79210: PUSH
79211: LD_INT 2
79213: NEG
79214: PUSH
79215: LD_INT 2
79217: NEG
79218: PUSH
79219: EMPTY
79220: LIST
79221: LIST
79222: PUSH
79223: EMPTY
79224: LIST
79225: LIST
79226: LIST
79227: LIST
79228: LIST
79229: LIST
79230: LIST
79231: LIST
79232: LIST
79233: LIST
79234: LIST
79235: LIST
79236: LIST
79237: LIST
79238: LIST
79239: LIST
79240: LIST
79241: LIST
79242: LIST
79243: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79244: LD_ADDR_VAR 0 55
79248: PUSH
79249: LD_INT 0
79251: PUSH
79252: LD_INT 0
79254: PUSH
79255: EMPTY
79256: LIST
79257: LIST
79258: PUSH
79259: LD_INT 0
79261: PUSH
79262: LD_INT 1
79264: NEG
79265: PUSH
79266: EMPTY
79267: LIST
79268: LIST
79269: PUSH
79270: LD_INT 1
79272: PUSH
79273: LD_INT 0
79275: PUSH
79276: EMPTY
79277: LIST
79278: LIST
79279: PUSH
79280: LD_INT 1
79282: PUSH
79283: LD_INT 1
79285: PUSH
79286: EMPTY
79287: LIST
79288: LIST
79289: PUSH
79290: LD_INT 0
79292: PUSH
79293: LD_INT 1
79295: PUSH
79296: EMPTY
79297: LIST
79298: LIST
79299: PUSH
79300: LD_INT 1
79302: NEG
79303: PUSH
79304: LD_INT 0
79306: PUSH
79307: EMPTY
79308: LIST
79309: LIST
79310: PUSH
79311: LD_INT 1
79313: NEG
79314: PUSH
79315: LD_INT 1
79317: NEG
79318: PUSH
79319: EMPTY
79320: LIST
79321: LIST
79322: PUSH
79323: LD_INT 1
79325: NEG
79326: PUSH
79327: LD_INT 2
79329: NEG
79330: PUSH
79331: EMPTY
79332: LIST
79333: LIST
79334: PUSH
79335: LD_INT 0
79337: PUSH
79338: LD_INT 2
79340: NEG
79341: PUSH
79342: EMPTY
79343: LIST
79344: LIST
79345: PUSH
79346: LD_INT 1
79348: PUSH
79349: LD_INT 1
79351: NEG
79352: PUSH
79353: EMPTY
79354: LIST
79355: LIST
79356: PUSH
79357: LD_INT 2
79359: PUSH
79360: LD_INT 0
79362: PUSH
79363: EMPTY
79364: LIST
79365: LIST
79366: PUSH
79367: LD_INT 2
79369: PUSH
79370: LD_INT 1
79372: PUSH
79373: EMPTY
79374: LIST
79375: LIST
79376: PUSH
79377: LD_INT 2
79379: PUSH
79380: LD_INT 2
79382: PUSH
79383: EMPTY
79384: LIST
79385: LIST
79386: PUSH
79387: LD_INT 1
79389: PUSH
79390: LD_INT 2
79392: PUSH
79393: EMPTY
79394: LIST
79395: LIST
79396: PUSH
79397: LD_INT 0
79399: PUSH
79400: LD_INT 2
79402: PUSH
79403: EMPTY
79404: LIST
79405: LIST
79406: PUSH
79407: LD_INT 1
79409: NEG
79410: PUSH
79411: LD_INT 1
79413: PUSH
79414: EMPTY
79415: LIST
79416: LIST
79417: PUSH
79418: LD_INT 2
79420: NEG
79421: PUSH
79422: LD_INT 0
79424: PUSH
79425: EMPTY
79426: LIST
79427: LIST
79428: PUSH
79429: LD_INT 2
79431: NEG
79432: PUSH
79433: LD_INT 1
79435: NEG
79436: PUSH
79437: EMPTY
79438: LIST
79439: LIST
79440: PUSH
79441: LD_INT 2
79443: NEG
79444: PUSH
79445: LD_INT 2
79447: NEG
79448: PUSH
79449: EMPTY
79450: LIST
79451: LIST
79452: PUSH
79453: EMPTY
79454: LIST
79455: LIST
79456: LIST
79457: LIST
79458: LIST
79459: LIST
79460: LIST
79461: LIST
79462: LIST
79463: LIST
79464: LIST
79465: LIST
79466: LIST
79467: LIST
79468: LIST
79469: LIST
79470: LIST
79471: LIST
79472: LIST
79473: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79474: LD_ADDR_VAR 0 56
79478: PUSH
79479: LD_INT 0
79481: PUSH
79482: LD_INT 0
79484: PUSH
79485: EMPTY
79486: LIST
79487: LIST
79488: PUSH
79489: LD_INT 0
79491: PUSH
79492: LD_INT 1
79494: NEG
79495: PUSH
79496: EMPTY
79497: LIST
79498: LIST
79499: PUSH
79500: LD_INT 1
79502: PUSH
79503: LD_INT 0
79505: PUSH
79506: EMPTY
79507: LIST
79508: LIST
79509: PUSH
79510: LD_INT 1
79512: PUSH
79513: LD_INT 1
79515: PUSH
79516: EMPTY
79517: LIST
79518: LIST
79519: PUSH
79520: LD_INT 0
79522: PUSH
79523: LD_INT 1
79525: PUSH
79526: EMPTY
79527: LIST
79528: LIST
79529: PUSH
79530: LD_INT 1
79532: NEG
79533: PUSH
79534: LD_INT 0
79536: PUSH
79537: EMPTY
79538: LIST
79539: LIST
79540: PUSH
79541: LD_INT 1
79543: NEG
79544: PUSH
79545: LD_INT 1
79547: NEG
79548: PUSH
79549: EMPTY
79550: LIST
79551: LIST
79552: PUSH
79553: LD_INT 1
79555: NEG
79556: PUSH
79557: LD_INT 2
79559: NEG
79560: PUSH
79561: EMPTY
79562: LIST
79563: LIST
79564: PUSH
79565: LD_INT 0
79567: PUSH
79568: LD_INT 2
79570: NEG
79571: PUSH
79572: EMPTY
79573: LIST
79574: LIST
79575: PUSH
79576: LD_INT 1
79578: PUSH
79579: LD_INT 1
79581: NEG
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: PUSH
79587: LD_INT 2
79589: PUSH
79590: LD_INT 0
79592: PUSH
79593: EMPTY
79594: LIST
79595: LIST
79596: PUSH
79597: LD_INT 2
79599: PUSH
79600: LD_INT 1
79602: PUSH
79603: EMPTY
79604: LIST
79605: LIST
79606: PUSH
79607: LD_INT 2
79609: PUSH
79610: LD_INT 2
79612: PUSH
79613: EMPTY
79614: LIST
79615: LIST
79616: PUSH
79617: LD_INT 1
79619: PUSH
79620: LD_INT 2
79622: PUSH
79623: EMPTY
79624: LIST
79625: LIST
79626: PUSH
79627: LD_INT 0
79629: PUSH
79630: LD_INT 2
79632: PUSH
79633: EMPTY
79634: LIST
79635: LIST
79636: PUSH
79637: LD_INT 1
79639: NEG
79640: PUSH
79641: LD_INT 1
79643: PUSH
79644: EMPTY
79645: LIST
79646: LIST
79647: PUSH
79648: LD_INT 2
79650: NEG
79651: PUSH
79652: LD_INT 0
79654: PUSH
79655: EMPTY
79656: LIST
79657: LIST
79658: PUSH
79659: LD_INT 2
79661: NEG
79662: PUSH
79663: LD_INT 1
79665: NEG
79666: PUSH
79667: EMPTY
79668: LIST
79669: LIST
79670: PUSH
79671: LD_INT 2
79673: NEG
79674: PUSH
79675: LD_INT 2
79677: NEG
79678: PUSH
79679: EMPTY
79680: LIST
79681: LIST
79682: PUSH
79683: EMPTY
79684: LIST
79685: LIST
79686: LIST
79687: LIST
79688: LIST
79689: LIST
79690: LIST
79691: LIST
79692: LIST
79693: LIST
79694: LIST
79695: LIST
79696: LIST
79697: LIST
79698: LIST
79699: LIST
79700: LIST
79701: LIST
79702: LIST
79703: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79704: LD_ADDR_VAR 0 57
79708: PUSH
79709: LD_INT 0
79711: PUSH
79712: LD_INT 0
79714: PUSH
79715: EMPTY
79716: LIST
79717: LIST
79718: PUSH
79719: LD_INT 0
79721: PUSH
79722: LD_INT 1
79724: NEG
79725: PUSH
79726: EMPTY
79727: LIST
79728: LIST
79729: PUSH
79730: LD_INT 1
79732: PUSH
79733: LD_INT 0
79735: PUSH
79736: EMPTY
79737: LIST
79738: LIST
79739: PUSH
79740: LD_INT 1
79742: PUSH
79743: LD_INT 1
79745: PUSH
79746: EMPTY
79747: LIST
79748: LIST
79749: PUSH
79750: LD_INT 0
79752: PUSH
79753: LD_INT 1
79755: PUSH
79756: EMPTY
79757: LIST
79758: LIST
79759: PUSH
79760: LD_INT 1
79762: NEG
79763: PUSH
79764: LD_INT 0
79766: PUSH
79767: EMPTY
79768: LIST
79769: LIST
79770: PUSH
79771: LD_INT 1
79773: NEG
79774: PUSH
79775: LD_INT 1
79777: NEG
79778: PUSH
79779: EMPTY
79780: LIST
79781: LIST
79782: PUSH
79783: LD_INT 1
79785: NEG
79786: PUSH
79787: LD_INT 2
79789: NEG
79790: PUSH
79791: EMPTY
79792: LIST
79793: LIST
79794: PUSH
79795: LD_INT 0
79797: PUSH
79798: LD_INT 2
79800: NEG
79801: PUSH
79802: EMPTY
79803: LIST
79804: LIST
79805: PUSH
79806: LD_INT 1
79808: PUSH
79809: LD_INT 1
79811: NEG
79812: PUSH
79813: EMPTY
79814: LIST
79815: LIST
79816: PUSH
79817: LD_INT 2
79819: PUSH
79820: LD_INT 0
79822: PUSH
79823: EMPTY
79824: LIST
79825: LIST
79826: PUSH
79827: LD_INT 2
79829: PUSH
79830: LD_INT 1
79832: PUSH
79833: EMPTY
79834: LIST
79835: LIST
79836: PUSH
79837: LD_INT 2
79839: PUSH
79840: LD_INT 2
79842: PUSH
79843: EMPTY
79844: LIST
79845: LIST
79846: PUSH
79847: LD_INT 1
79849: PUSH
79850: LD_INT 2
79852: PUSH
79853: EMPTY
79854: LIST
79855: LIST
79856: PUSH
79857: LD_INT 0
79859: PUSH
79860: LD_INT 2
79862: PUSH
79863: EMPTY
79864: LIST
79865: LIST
79866: PUSH
79867: LD_INT 1
79869: NEG
79870: PUSH
79871: LD_INT 1
79873: PUSH
79874: EMPTY
79875: LIST
79876: LIST
79877: PUSH
79878: LD_INT 2
79880: NEG
79881: PUSH
79882: LD_INT 0
79884: PUSH
79885: EMPTY
79886: LIST
79887: LIST
79888: PUSH
79889: LD_INT 2
79891: NEG
79892: PUSH
79893: LD_INT 1
79895: NEG
79896: PUSH
79897: EMPTY
79898: LIST
79899: LIST
79900: PUSH
79901: LD_INT 2
79903: NEG
79904: PUSH
79905: LD_INT 2
79907: NEG
79908: PUSH
79909: EMPTY
79910: LIST
79911: LIST
79912: PUSH
79913: EMPTY
79914: LIST
79915: LIST
79916: LIST
79917: LIST
79918: LIST
79919: LIST
79920: LIST
79921: LIST
79922: LIST
79923: LIST
79924: LIST
79925: LIST
79926: LIST
79927: LIST
79928: LIST
79929: LIST
79930: LIST
79931: LIST
79932: LIST
79933: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79934: LD_ADDR_VAR 0 58
79938: PUSH
79939: LD_INT 0
79941: PUSH
79942: LD_INT 0
79944: PUSH
79945: EMPTY
79946: LIST
79947: LIST
79948: PUSH
79949: LD_INT 0
79951: PUSH
79952: LD_INT 1
79954: NEG
79955: PUSH
79956: EMPTY
79957: LIST
79958: LIST
79959: PUSH
79960: LD_INT 1
79962: PUSH
79963: LD_INT 0
79965: PUSH
79966: EMPTY
79967: LIST
79968: LIST
79969: PUSH
79970: LD_INT 1
79972: PUSH
79973: LD_INT 1
79975: PUSH
79976: EMPTY
79977: LIST
79978: LIST
79979: PUSH
79980: LD_INT 0
79982: PUSH
79983: LD_INT 1
79985: PUSH
79986: EMPTY
79987: LIST
79988: LIST
79989: PUSH
79990: LD_INT 1
79992: NEG
79993: PUSH
79994: LD_INT 0
79996: PUSH
79997: EMPTY
79998: LIST
79999: LIST
80000: PUSH
80001: LD_INT 1
80003: NEG
80004: PUSH
80005: LD_INT 1
80007: NEG
80008: PUSH
80009: EMPTY
80010: LIST
80011: LIST
80012: PUSH
80013: LD_INT 1
80015: NEG
80016: PUSH
80017: LD_INT 2
80019: NEG
80020: PUSH
80021: EMPTY
80022: LIST
80023: LIST
80024: PUSH
80025: LD_INT 0
80027: PUSH
80028: LD_INT 2
80030: NEG
80031: PUSH
80032: EMPTY
80033: LIST
80034: LIST
80035: PUSH
80036: LD_INT 1
80038: PUSH
80039: LD_INT 1
80041: NEG
80042: PUSH
80043: EMPTY
80044: LIST
80045: LIST
80046: PUSH
80047: LD_INT 2
80049: PUSH
80050: LD_INT 0
80052: PUSH
80053: EMPTY
80054: LIST
80055: LIST
80056: PUSH
80057: LD_INT 2
80059: PUSH
80060: LD_INT 1
80062: PUSH
80063: EMPTY
80064: LIST
80065: LIST
80066: PUSH
80067: LD_INT 2
80069: PUSH
80070: LD_INT 2
80072: PUSH
80073: EMPTY
80074: LIST
80075: LIST
80076: PUSH
80077: LD_INT 1
80079: PUSH
80080: LD_INT 2
80082: PUSH
80083: EMPTY
80084: LIST
80085: LIST
80086: PUSH
80087: LD_INT 0
80089: PUSH
80090: LD_INT 2
80092: PUSH
80093: EMPTY
80094: LIST
80095: LIST
80096: PUSH
80097: LD_INT 1
80099: NEG
80100: PUSH
80101: LD_INT 1
80103: PUSH
80104: EMPTY
80105: LIST
80106: LIST
80107: PUSH
80108: LD_INT 2
80110: NEG
80111: PUSH
80112: LD_INT 0
80114: PUSH
80115: EMPTY
80116: LIST
80117: LIST
80118: PUSH
80119: LD_INT 2
80121: NEG
80122: PUSH
80123: LD_INT 1
80125: NEG
80126: PUSH
80127: EMPTY
80128: LIST
80129: LIST
80130: PUSH
80131: LD_INT 2
80133: NEG
80134: PUSH
80135: LD_INT 2
80137: NEG
80138: PUSH
80139: EMPTY
80140: LIST
80141: LIST
80142: PUSH
80143: EMPTY
80144: LIST
80145: LIST
80146: LIST
80147: LIST
80148: LIST
80149: LIST
80150: LIST
80151: LIST
80152: LIST
80153: LIST
80154: LIST
80155: LIST
80156: LIST
80157: LIST
80158: LIST
80159: LIST
80160: LIST
80161: LIST
80162: LIST
80163: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80164: LD_ADDR_VAR 0 59
80168: PUSH
80169: LD_INT 0
80171: PUSH
80172: LD_INT 0
80174: PUSH
80175: EMPTY
80176: LIST
80177: LIST
80178: PUSH
80179: LD_INT 0
80181: PUSH
80182: LD_INT 1
80184: NEG
80185: PUSH
80186: EMPTY
80187: LIST
80188: LIST
80189: PUSH
80190: LD_INT 1
80192: PUSH
80193: LD_INT 0
80195: PUSH
80196: EMPTY
80197: LIST
80198: LIST
80199: PUSH
80200: LD_INT 1
80202: PUSH
80203: LD_INT 1
80205: PUSH
80206: EMPTY
80207: LIST
80208: LIST
80209: PUSH
80210: LD_INT 0
80212: PUSH
80213: LD_INT 1
80215: PUSH
80216: EMPTY
80217: LIST
80218: LIST
80219: PUSH
80220: LD_INT 1
80222: NEG
80223: PUSH
80224: LD_INT 0
80226: PUSH
80227: EMPTY
80228: LIST
80229: LIST
80230: PUSH
80231: LD_INT 1
80233: NEG
80234: PUSH
80235: LD_INT 1
80237: NEG
80238: PUSH
80239: EMPTY
80240: LIST
80241: LIST
80242: PUSH
80243: EMPTY
80244: LIST
80245: LIST
80246: LIST
80247: LIST
80248: LIST
80249: LIST
80250: LIST
80251: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80252: LD_ADDR_VAR 0 60
80256: PUSH
80257: LD_INT 0
80259: PUSH
80260: LD_INT 0
80262: PUSH
80263: EMPTY
80264: LIST
80265: LIST
80266: PUSH
80267: LD_INT 0
80269: PUSH
80270: LD_INT 1
80272: NEG
80273: PUSH
80274: EMPTY
80275: LIST
80276: LIST
80277: PUSH
80278: LD_INT 1
80280: PUSH
80281: LD_INT 0
80283: PUSH
80284: EMPTY
80285: LIST
80286: LIST
80287: PUSH
80288: LD_INT 1
80290: PUSH
80291: LD_INT 1
80293: PUSH
80294: EMPTY
80295: LIST
80296: LIST
80297: PUSH
80298: LD_INT 0
80300: PUSH
80301: LD_INT 1
80303: PUSH
80304: EMPTY
80305: LIST
80306: LIST
80307: PUSH
80308: LD_INT 1
80310: NEG
80311: PUSH
80312: LD_INT 0
80314: PUSH
80315: EMPTY
80316: LIST
80317: LIST
80318: PUSH
80319: LD_INT 1
80321: NEG
80322: PUSH
80323: LD_INT 1
80325: NEG
80326: PUSH
80327: EMPTY
80328: LIST
80329: LIST
80330: PUSH
80331: EMPTY
80332: LIST
80333: LIST
80334: LIST
80335: LIST
80336: LIST
80337: LIST
80338: LIST
80339: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80340: LD_ADDR_VAR 0 61
80344: PUSH
80345: LD_INT 0
80347: PUSH
80348: LD_INT 0
80350: PUSH
80351: EMPTY
80352: LIST
80353: LIST
80354: PUSH
80355: LD_INT 0
80357: PUSH
80358: LD_INT 1
80360: NEG
80361: PUSH
80362: EMPTY
80363: LIST
80364: LIST
80365: PUSH
80366: LD_INT 1
80368: PUSH
80369: LD_INT 0
80371: PUSH
80372: EMPTY
80373: LIST
80374: LIST
80375: PUSH
80376: LD_INT 1
80378: PUSH
80379: LD_INT 1
80381: PUSH
80382: EMPTY
80383: LIST
80384: LIST
80385: PUSH
80386: LD_INT 0
80388: PUSH
80389: LD_INT 1
80391: PUSH
80392: EMPTY
80393: LIST
80394: LIST
80395: PUSH
80396: LD_INT 1
80398: NEG
80399: PUSH
80400: LD_INT 0
80402: PUSH
80403: EMPTY
80404: LIST
80405: LIST
80406: PUSH
80407: LD_INT 1
80409: NEG
80410: PUSH
80411: LD_INT 1
80413: NEG
80414: PUSH
80415: EMPTY
80416: LIST
80417: LIST
80418: PUSH
80419: EMPTY
80420: LIST
80421: LIST
80422: LIST
80423: LIST
80424: LIST
80425: LIST
80426: LIST
80427: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80428: LD_ADDR_VAR 0 62
80432: PUSH
80433: LD_INT 0
80435: PUSH
80436: LD_INT 0
80438: PUSH
80439: EMPTY
80440: LIST
80441: LIST
80442: PUSH
80443: LD_INT 0
80445: PUSH
80446: LD_INT 1
80448: NEG
80449: PUSH
80450: EMPTY
80451: LIST
80452: LIST
80453: PUSH
80454: LD_INT 1
80456: PUSH
80457: LD_INT 0
80459: PUSH
80460: EMPTY
80461: LIST
80462: LIST
80463: PUSH
80464: LD_INT 1
80466: PUSH
80467: LD_INT 1
80469: PUSH
80470: EMPTY
80471: LIST
80472: LIST
80473: PUSH
80474: LD_INT 0
80476: PUSH
80477: LD_INT 1
80479: PUSH
80480: EMPTY
80481: LIST
80482: LIST
80483: PUSH
80484: LD_INT 1
80486: NEG
80487: PUSH
80488: LD_INT 0
80490: PUSH
80491: EMPTY
80492: LIST
80493: LIST
80494: PUSH
80495: LD_INT 1
80497: NEG
80498: PUSH
80499: LD_INT 1
80501: NEG
80502: PUSH
80503: EMPTY
80504: LIST
80505: LIST
80506: PUSH
80507: EMPTY
80508: LIST
80509: LIST
80510: LIST
80511: LIST
80512: LIST
80513: LIST
80514: LIST
80515: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80516: LD_ADDR_VAR 0 63
80520: PUSH
80521: LD_INT 0
80523: PUSH
80524: LD_INT 0
80526: PUSH
80527: EMPTY
80528: LIST
80529: LIST
80530: PUSH
80531: LD_INT 0
80533: PUSH
80534: LD_INT 1
80536: NEG
80537: PUSH
80538: EMPTY
80539: LIST
80540: LIST
80541: PUSH
80542: LD_INT 1
80544: PUSH
80545: LD_INT 0
80547: PUSH
80548: EMPTY
80549: LIST
80550: LIST
80551: PUSH
80552: LD_INT 1
80554: PUSH
80555: LD_INT 1
80557: PUSH
80558: EMPTY
80559: LIST
80560: LIST
80561: PUSH
80562: LD_INT 0
80564: PUSH
80565: LD_INT 1
80567: PUSH
80568: EMPTY
80569: LIST
80570: LIST
80571: PUSH
80572: LD_INT 1
80574: NEG
80575: PUSH
80576: LD_INT 0
80578: PUSH
80579: EMPTY
80580: LIST
80581: LIST
80582: PUSH
80583: LD_INT 1
80585: NEG
80586: PUSH
80587: LD_INT 1
80589: NEG
80590: PUSH
80591: EMPTY
80592: LIST
80593: LIST
80594: PUSH
80595: EMPTY
80596: LIST
80597: LIST
80598: LIST
80599: LIST
80600: LIST
80601: LIST
80602: LIST
80603: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80604: LD_ADDR_VAR 0 64
80608: PUSH
80609: LD_INT 0
80611: PUSH
80612: LD_INT 0
80614: PUSH
80615: EMPTY
80616: LIST
80617: LIST
80618: PUSH
80619: LD_INT 0
80621: PUSH
80622: LD_INT 1
80624: NEG
80625: PUSH
80626: EMPTY
80627: LIST
80628: LIST
80629: PUSH
80630: LD_INT 1
80632: PUSH
80633: LD_INT 0
80635: PUSH
80636: EMPTY
80637: LIST
80638: LIST
80639: PUSH
80640: LD_INT 1
80642: PUSH
80643: LD_INT 1
80645: PUSH
80646: EMPTY
80647: LIST
80648: LIST
80649: PUSH
80650: LD_INT 0
80652: PUSH
80653: LD_INT 1
80655: PUSH
80656: EMPTY
80657: LIST
80658: LIST
80659: PUSH
80660: LD_INT 1
80662: NEG
80663: PUSH
80664: LD_INT 0
80666: PUSH
80667: EMPTY
80668: LIST
80669: LIST
80670: PUSH
80671: LD_INT 1
80673: NEG
80674: PUSH
80675: LD_INT 1
80677: NEG
80678: PUSH
80679: EMPTY
80680: LIST
80681: LIST
80682: PUSH
80683: EMPTY
80684: LIST
80685: LIST
80686: LIST
80687: LIST
80688: LIST
80689: LIST
80690: LIST
80691: ST_TO_ADDR
// end ; 1 :
80692: GO 86589
80694: LD_INT 1
80696: DOUBLE
80697: EQUAL
80698: IFTRUE 80702
80700: GO 83325
80702: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
80703: LD_ADDR_VAR 0 11
80707: PUSH
80708: LD_INT 1
80710: NEG
80711: PUSH
80712: LD_INT 3
80714: NEG
80715: PUSH
80716: EMPTY
80717: LIST
80718: LIST
80719: PUSH
80720: LD_INT 0
80722: PUSH
80723: LD_INT 3
80725: NEG
80726: PUSH
80727: EMPTY
80728: LIST
80729: LIST
80730: PUSH
80731: LD_INT 1
80733: PUSH
80734: LD_INT 2
80736: NEG
80737: PUSH
80738: EMPTY
80739: LIST
80740: LIST
80741: PUSH
80742: EMPTY
80743: LIST
80744: LIST
80745: LIST
80746: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
80747: LD_ADDR_VAR 0 12
80751: PUSH
80752: LD_INT 2
80754: PUSH
80755: LD_INT 1
80757: NEG
80758: PUSH
80759: EMPTY
80760: LIST
80761: LIST
80762: PUSH
80763: LD_INT 3
80765: PUSH
80766: LD_INT 0
80768: PUSH
80769: EMPTY
80770: LIST
80771: LIST
80772: PUSH
80773: LD_INT 3
80775: PUSH
80776: LD_INT 1
80778: PUSH
80779: EMPTY
80780: LIST
80781: LIST
80782: PUSH
80783: EMPTY
80784: LIST
80785: LIST
80786: LIST
80787: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
80788: LD_ADDR_VAR 0 13
80792: PUSH
80793: LD_INT 3
80795: PUSH
80796: LD_INT 2
80798: PUSH
80799: EMPTY
80800: LIST
80801: LIST
80802: PUSH
80803: LD_INT 3
80805: PUSH
80806: LD_INT 3
80808: PUSH
80809: EMPTY
80810: LIST
80811: LIST
80812: PUSH
80813: LD_INT 2
80815: PUSH
80816: LD_INT 3
80818: PUSH
80819: EMPTY
80820: LIST
80821: LIST
80822: PUSH
80823: EMPTY
80824: LIST
80825: LIST
80826: LIST
80827: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
80828: LD_ADDR_VAR 0 14
80832: PUSH
80833: LD_INT 1
80835: PUSH
80836: LD_INT 3
80838: PUSH
80839: EMPTY
80840: LIST
80841: LIST
80842: PUSH
80843: LD_INT 0
80845: PUSH
80846: LD_INT 3
80848: PUSH
80849: EMPTY
80850: LIST
80851: LIST
80852: PUSH
80853: LD_INT 1
80855: NEG
80856: PUSH
80857: LD_INT 2
80859: PUSH
80860: EMPTY
80861: LIST
80862: LIST
80863: PUSH
80864: EMPTY
80865: LIST
80866: LIST
80867: LIST
80868: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
80869: LD_ADDR_VAR 0 15
80873: PUSH
80874: LD_INT 2
80876: NEG
80877: PUSH
80878: LD_INT 1
80880: PUSH
80881: EMPTY
80882: LIST
80883: LIST
80884: PUSH
80885: LD_INT 3
80887: NEG
80888: PUSH
80889: LD_INT 0
80891: PUSH
80892: EMPTY
80893: LIST
80894: LIST
80895: PUSH
80896: LD_INT 3
80898: NEG
80899: PUSH
80900: LD_INT 1
80902: NEG
80903: PUSH
80904: EMPTY
80905: LIST
80906: LIST
80907: PUSH
80908: EMPTY
80909: LIST
80910: LIST
80911: LIST
80912: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
80913: LD_ADDR_VAR 0 16
80917: PUSH
80918: LD_INT 2
80920: NEG
80921: PUSH
80922: LD_INT 3
80924: NEG
80925: PUSH
80926: EMPTY
80927: LIST
80928: LIST
80929: PUSH
80930: LD_INT 3
80932: NEG
80933: PUSH
80934: LD_INT 2
80936: NEG
80937: PUSH
80938: EMPTY
80939: LIST
80940: LIST
80941: PUSH
80942: LD_INT 3
80944: NEG
80945: PUSH
80946: LD_INT 3
80948: NEG
80949: PUSH
80950: EMPTY
80951: LIST
80952: LIST
80953: PUSH
80954: EMPTY
80955: LIST
80956: LIST
80957: LIST
80958: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
80959: LD_ADDR_VAR 0 17
80963: PUSH
80964: LD_INT 1
80966: NEG
80967: PUSH
80968: LD_INT 3
80970: NEG
80971: PUSH
80972: EMPTY
80973: LIST
80974: LIST
80975: PUSH
80976: LD_INT 0
80978: PUSH
80979: LD_INT 3
80981: NEG
80982: PUSH
80983: EMPTY
80984: LIST
80985: LIST
80986: PUSH
80987: LD_INT 1
80989: PUSH
80990: LD_INT 2
80992: NEG
80993: PUSH
80994: EMPTY
80995: LIST
80996: LIST
80997: PUSH
80998: EMPTY
80999: LIST
81000: LIST
81001: LIST
81002: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
81003: LD_ADDR_VAR 0 18
81007: PUSH
81008: LD_INT 2
81010: PUSH
81011: LD_INT 1
81013: NEG
81014: PUSH
81015: EMPTY
81016: LIST
81017: LIST
81018: PUSH
81019: LD_INT 3
81021: PUSH
81022: LD_INT 0
81024: PUSH
81025: EMPTY
81026: LIST
81027: LIST
81028: PUSH
81029: LD_INT 3
81031: PUSH
81032: LD_INT 1
81034: PUSH
81035: EMPTY
81036: LIST
81037: LIST
81038: PUSH
81039: EMPTY
81040: LIST
81041: LIST
81042: LIST
81043: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
81044: LD_ADDR_VAR 0 19
81048: PUSH
81049: LD_INT 3
81051: PUSH
81052: LD_INT 2
81054: PUSH
81055: EMPTY
81056: LIST
81057: LIST
81058: PUSH
81059: LD_INT 3
81061: PUSH
81062: LD_INT 3
81064: PUSH
81065: EMPTY
81066: LIST
81067: LIST
81068: PUSH
81069: LD_INT 2
81071: PUSH
81072: LD_INT 3
81074: PUSH
81075: EMPTY
81076: LIST
81077: LIST
81078: PUSH
81079: EMPTY
81080: LIST
81081: LIST
81082: LIST
81083: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
81084: LD_ADDR_VAR 0 20
81088: PUSH
81089: LD_INT 1
81091: PUSH
81092: LD_INT 3
81094: PUSH
81095: EMPTY
81096: LIST
81097: LIST
81098: PUSH
81099: LD_INT 0
81101: PUSH
81102: LD_INT 3
81104: PUSH
81105: EMPTY
81106: LIST
81107: LIST
81108: PUSH
81109: LD_INT 1
81111: NEG
81112: PUSH
81113: LD_INT 2
81115: PUSH
81116: EMPTY
81117: LIST
81118: LIST
81119: PUSH
81120: EMPTY
81121: LIST
81122: LIST
81123: LIST
81124: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
81125: LD_ADDR_VAR 0 21
81129: PUSH
81130: LD_INT 2
81132: NEG
81133: PUSH
81134: LD_INT 1
81136: PUSH
81137: EMPTY
81138: LIST
81139: LIST
81140: PUSH
81141: LD_INT 3
81143: NEG
81144: PUSH
81145: LD_INT 0
81147: PUSH
81148: EMPTY
81149: LIST
81150: LIST
81151: PUSH
81152: LD_INT 3
81154: NEG
81155: PUSH
81156: LD_INT 1
81158: NEG
81159: PUSH
81160: EMPTY
81161: LIST
81162: LIST
81163: PUSH
81164: EMPTY
81165: LIST
81166: LIST
81167: LIST
81168: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81169: LD_ADDR_VAR 0 22
81173: PUSH
81174: LD_INT 2
81176: NEG
81177: PUSH
81178: LD_INT 3
81180: NEG
81181: PUSH
81182: EMPTY
81183: LIST
81184: LIST
81185: PUSH
81186: LD_INT 3
81188: NEG
81189: PUSH
81190: LD_INT 2
81192: NEG
81193: PUSH
81194: EMPTY
81195: LIST
81196: LIST
81197: PUSH
81198: LD_INT 3
81200: NEG
81201: PUSH
81202: LD_INT 3
81204: NEG
81205: PUSH
81206: EMPTY
81207: LIST
81208: LIST
81209: PUSH
81210: EMPTY
81211: LIST
81212: LIST
81213: LIST
81214: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
81215: LD_ADDR_VAR 0 23
81219: PUSH
81220: LD_INT 0
81222: PUSH
81223: LD_INT 3
81225: NEG
81226: PUSH
81227: EMPTY
81228: LIST
81229: LIST
81230: PUSH
81231: LD_INT 1
81233: NEG
81234: PUSH
81235: LD_INT 4
81237: NEG
81238: PUSH
81239: EMPTY
81240: LIST
81241: LIST
81242: PUSH
81243: LD_INT 1
81245: PUSH
81246: LD_INT 3
81248: NEG
81249: PUSH
81250: EMPTY
81251: LIST
81252: LIST
81253: PUSH
81254: EMPTY
81255: LIST
81256: LIST
81257: LIST
81258: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
81259: LD_ADDR_VAR 0 24
81263: PUSH
81264: LD_INT 3
81266: PUSH
81267: LD_INT 0
81269: PUSH
81270: EMPTY
81271: LIST
81272: LIST
81273: PUSH
81274: LD_INT 3
81276: PUSH
81277: LD_INT 1
81279: NEG
81280: PUSH
81281: EMPTY
81282: LIST
81283: LIST
81284: PUSH
81285: LD_INT 4
81287: PUSH
81288: LD_INT 1
81290: PUSH
81291: EMPTY
81292: LIST
81293: LIST
81294: PUSH
81295: EMPTY
81296: LIST
81297: LIST
81298: LIST
81299: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
81300: LD_ADDR_VAR 0 25
81304: PUSH
81305: LD_INT 3
81307: PUSH
81308: LD_INT 3
81310: PUSH
81311: EMPTY
81312: LIST
81313: LIST
81314: PUSH
81315: LD_INT 4
81317: PUSH
81318: LD_INT 3
81320: PUSH
81321: EMPTY
81322: LIST
81323: LIST
81324: PUSH
81325: LD_INT 3
81327: PUSH
81328: LD_INT 4
81330: PUSH
81331: EMPTY
81332: LIST
81333: LIST
81334: PUSH
81335: EMPTY
81336: LIST
81337: LIST
81338: LIST
81339: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
81340: LD_ADDR_VAR 0 26
81344: PUSH
81345: LD_INT 0
81347: PUSH
81348: LD_INT 3
81350: PUSH
81351: EMPTY
81352: LIST
81353: LIST
81354: PUSH
81355: LD_INT 1
81357: PUSH
81358: LD_INT 4
81360: PUSH
81361: EMPTY
81362: LIST
81363: LIST
81364: PUSH
81365: LD_INT 1
81367: NEG
81368: PUSH
81369: LD_INT 3
81371: PUSH
81372: EMPTY
81373: LIST
81374: LIST
81375: PUSH
81376: EMPTY
81377: LIST
81378: LIST
81379: LIST
81380: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
81381: LD_ADDR_VAR 0 27
81385: PUSH
81386: LD_INT 3
81388: NEG
81389: PUSH
81390: LD_INT 0
81392: PUSH
81393: EMPTY
81394: LIST
81395: LIST
81396: PUSH
81397: LD_INT 3
81399: NEG
81400: PUSH
81401: LD_INT 1
81403: PUSH
81404: EMPTY
81405: LIST
81406: LIST
81407: PUSH
81408: LD_INT 4
81410: NEG
81411: PUSH
81412: LD_INT 1
81414: NEG
81415: PUSH
81416: EMPTY
81417: LIST
81418: LIST
81419: PUSH
81420: EMPTY
81421: LIST
81422: LIST
81423: LIST
81424: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
81425: LD_ADDR_VAR 0 28
81429: PUSH
81430: LD_INT 3
81432: NEG
81433: PUSH
81434: LD_INT 3
81436: NEG
81437: PUSH
81438: EMPTY
81439: LIST
81440: LIST
81441: PUSH
81442: LD_INT 3
81444: NEG
81445: PUSH
81446: LD_INT 4
81448: NEG
81449: PUSH
81450: EMPTY
81451: LIST
81452: LIST
81453: PUSH
81454: LD_INT 4
81456: NEG
81457: PUSH
81458: LD_INT 3
81460: NEG
81461: PUSH
81462: EMPTY
81463: LIST
81464: LIST
81465: PUSH
81466: EMPTY
81467: LIST
81468: LIST
81469: LIST
81470: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
81471: LD_ADDR_VAR 0 29
81475: PUSH
81476: LD_INT 1
81478: NEG
81479: PUSH
81480: LD_INT 3
81482: NEG
81483: PUSH
81484: EMPTY
81485: LIST
81486: LIST
81487: PUSH
81488: LD_INT 0
81490: PUSH
81491: LD_INT 3
81493: NEG
81494: PUSH
81495: EMPTY
81496: LIST
81497: LIST
81498: PUSH
81499: LD_INT 1
81501: PUSH
81502: LD_INT 2
81504: NEG
81505: PUSH
81506: EMPTY
81507: LIST
81508: LIST
81509: PUSH
81510: LD_INT 1
81512: NEG
81513: PUSH
81514: LD_INT 4
81516: NEG
81517: PUSH
81518: EMPTY
81519: LIST
81520: LIST
81521: PUSH
81522: LD_INT 0
81524: PUSH
81525: LD_INT 4
81527: NEG
81528: PUSH
81529: EMPTY
81530: LIST
81531: LIST
81532: PUSH
81533: LD_INT 1
81535: PUSH
81536: LD_INT 3
81538: NEG
81539: PUSH
81540: EMPTY
81541: LIST
81542: LIST
81543: PUSH
81544: LD_INT 1
81546: NEG
81547: PUSH
81548: LD_INT 5
81550: NEG
81551: PUSH
81552: EMPTY
81553: LIST
81554: LIST
81555: PUSH
81556: LD_INT 0
81558: PUSH
81559: LD_INT 5
81561: NEG
81562: PUSH
81563: EMPTY
81564: LIST
81565: LIST
81566: PUSH
81567: LD_INT 1
81569: PUSH
81570: LD_INT 4
81572: NEG
81573: PUSH
81574: EMPTY
81575: LIST
81576: LIST
81577: PUSH
81578: LD_INT 1
81580: NEG
81581: PUSH
81582: LD_INT 6
81584: NEG
81585: PUSH
81586: EMPTY
81587: LIST
81588: LIST
81589: PUSH
81590: LD_INT 0
81592: PUSH
81593: LD_INT 6
81595: NEG
81596: PUSH
81597: EMPTY
81598: LIST
81599: LIST
81600: PUSH
81601: LD_INT 1
81603: PUSH
81604: LD_INT 5
81606: NEG
81607: PUSH
81608: EMPTY
81609: LIST
81610: LIST
81611: PUSH
81612: EMPTY
81613: LIST
81614: LIST
81615: LIST
81616: LIST
81617: LIST
81618: LIST
81619: LIST
81620: LIST
81621: LIST
81622: LIST
81623: LIST
81624: LIST
81625: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
81626: LD_ADDR_VAR 0 30
81630: PUSH
81631: LD_INT 2
81633: PUSH
81634: LD_INT 1
81636: NEG
81637: PUSH
81638: EMPTY
81639: LIST
81640: LIST
81641: PUSH
81642: LD_INT 3
81644: PUSH
81645: LD_INT 0
81647: PUSH
81648: EMPTY
81649: LIST
81650: LIST
81651: PUSH
81652: LD_INT 3
81654: PUSH
81655: LD_INT 1
81657: PUSH
81658: EMPTY
81659: LIST
81660: LIST
81661: PUSH
81662: LD_INT 3
81664: PUSH
81665: LD_INT 1
81667: NEG
81668: PUSH
81669: EMPTY
81670: LIST
81671: LIST
81672: PUSH
81673: LD_INT 4
81675: PUSH
81676: LD_INT 0
81678: PUSH
81679: EMPTY
81680: LIST
81681: LIST
81682: PUSH
81683: LD_INT 4
81685: PUSH
81686: LD_INT 1
81688: PUSH
81689: EMPTY
81690: LIST
81691: LIST
81692: PUSH
81693: LD_INT 4
81695: PUSH
81696: LD_INT 1
81698: NEG
81699: PUSH
81700: EMPTY
81701: LIST
81702: LIST
81703: PUSH
81704: LD_INT 5
81706: PUSH
81707: LD_INT 0
81709: PUSH
81710: EMPTY
81711: LIST
81712: LIST
81713: PUSH
81714: LD_INT 5
81716: PUSH
81717: LD_INT 1
81719: PUSH
81720: EMPTY
81721: LIST
81722: LIST
81723: PUSH
81724: LD_INT 5
81726: PUSH
81727: LD_INT 1
81729: NEG
81730: PUSH
81731: EMPTY
81732: LIST
81733: LIST
81734: PUSH
81735: LD_INT 6
81737: PUSH
81738: LD_INT 0
81740: PUSH
81741: EMPTY
81742: LIST
81743: LIST
81744: PUSH
81745: LD_INT 6
81747: PUSH
81748: LD_INT 1
81750: PUSH
81751: EMPTY
81752: LIST
81753: LIST
81754: PUSH
81755: EMPTY
81756: LIST
81757: LIST
81758: LIST
81759: LIST
81760: LIST
81761: LIST
81762: LIST
81763: LIST
81764: LIST
81765: LIST
81766: LIST
81767: LIST
81768: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
81769: LD_ADDR_VAR 0 31
81773: PUSH
81774: LD_INT 3
81776: PUSH
81777: LD_INT 2
81779: PUSH
81780: EMPTY
81781: LIST
81782: LIST
81783: PUSH
81784: LD_INT 3
81786: PUSH
81787: LD_INT 3
81789: PUSH
81790: EMPTY
81791: LIST
81792: LIST
81793: PUSH
81794: LD_INT 2
81796: PUSH
81797: LD_INT 3
81799: PUSH
81800: EMPTY
81801: LIST
81802: LIST
81803: PUSH
81804: LD_INT 4
81806: PUSH
81807: LD_INT 3
81809: PUSH
81810: EMPTY
81811: LIST
81812: LIST
81813: PUSH
81814: LD_INT 4
81816: PUSH
81817: LD_INT 4
81819: PUSH
81820: EMPTY
81821: LIST
81822: LIST
81823: PUSH
81824: LD_INT 3
81826: PUSH
81827: LD_INT 4
81829: PUSH
81830: EMPTY
81831: LIST
81832: LIST
81833: PUSH
81834: LD_INT 5
81836: PUSH
81837: LD_INT 4
81839: PUSH
81840: EMPTY
81841: LIST
81842: LIST
81843: PUSH
81844: LD_INT 5
81846: PUSH
81847: LD_INT 5
81849: PUSH
81850: EMPTY
81851: LIST
81852: LIST
81853: PUSH
81854: LD_INT 4
81856: PUSH
81857: LD_INT 5
81859: PUSH
81860: EMPTY
81861: LIST
81862: LIST
81863: PUSH
81864: LD_INT 6
81866: PUSH
81867: LD_INT 5
81869: PUSH
81870: EMPTY
81871: LIST
81872: LIST
81873: PUSH
81874: LD_INT 6
81876: PUSH
81877: LD_INT 6
81879: PUSH
81880: EMPTY
81881: LIST
81882: LIST
81883: PUSH
81884: LD_INT 5
81886: PUSH
81887: LD_INT 6
81889: PUSH
81890: EMPTY
81891: LIST
81892: LIST
81893: PUSH
81894: EMPTY
81895: LIST
81896: LIST
81897: LIST
81898: LIST
81899: LIST
81900: LIST
81901: LIST
81902: LIST
81903: LIST
81904: LIST
81905: LIST
81906: LIST
81907: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
81908: LD_ADDR_VAR 0 32
81912: PUSH
81913: LD_INT 1
81915: PUSH
81916: LD_INT 3
81918: PUSH
81919: EMPTY
81920: LIST
81921: LIST
81922: PUSH
81923: LD_INT 0
81925: PUSH
81926: LD_INT 3
81928: PUSH
81929: EMPTY
81930: LIST
81931: LIST
81932: PUSH
81933: LD_INT 1
81935: NEG
81936: PUSH
81937: LD_INT 2
81939: PUSH
81940: EMPTY
81941: LIST
81942: LIST
81943: PUSH
81944: LD_INT 1
81946: PUSH
81947: LD_INT 4
81949: PUSH
81950: EMPTY
81951: LIST
81952: LIST
81953: PUSH
81954: LD_INT 0
81956: PUSH
81957: LD_INT 4
81959: PUSH
81960: EMPTY
81961: LIST
81962: LIST
81963: PUSH
81964: LD_INT 1
81966: NEG
81967: PUSH
81968: LD_INT 3
81970: PUSH
81971: EMPTY
81972: LIST
81973: LIST
81974: PUSH
81975: LD_INT 1
81977: PUSH
81978: LD_INT 5
81980: PUSH
81981: EMPTY
81982: LIST
81983: LIST
81984: PUSH
81985: LD_INT 0
81987: PUSH
81988: LD_INT 5
81990: PUSH
81991: EMPTY
81992: LIST
81993: LIST
81994: PUSH
81995: LD_INT 1
81997: NEG
81998: PUSH
81999: LD_INT 4
82001: PUSH
82002: EMPTY
82003: LIST
82004: LIST
82005: PUSH
82006: LD_INT 1
82008: PUSH
82009: LD_INT 6
82011: PUSH
82012: EMPTY
82013: LIST
82014: LIST
82015: PUSH
82016: LD_INT 0
82018: PUSH
82019: LD_INT 6
82021: PUSH
82022: EMPTY
82023: LIST
82024: LIST
82025: PUSH
82026: LD_INT 1
82028: NEG
82029: PUSH
82030: LD_INT 5
82032: PUSH
82033: EMPTY
82034: LIST
82035: LIST
82036: PUSH
82037: EMPTY
82038: LIST
82039: LIST
82040: LIST
82041: LIST
82042: LIST
82043: LIST
82044: LIST
82045: LIST
82046: LIST
82047: LIST
82048: LIST
82049: LIST
82050: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
82051: LD_ADDR_VAR 0 33
82055: PUSH
82056: LD_INT 2
82058: NEG
82059: PUSH
82060: LD_INT 1
82062: PUSH
82063: EMPTY
82064: LIST
82065: LIST
82066: PUSH
82067: LD_INT 3
82069: NEG
82070: PUSH
82071: LD_INT 0
82073: PUSH
82074: EMPTY
82075: LIST
82076: LIST
82077: PUSH
82078: LD_INT 3
82080: NEG
82081: PUSH
82082: LD_INT 1
82084: NEG
82085: PUSH
82086: EMPTY
82087: LIST
82088: LIST
82089: PUSH
82090: LD_INT 3
82092: NEG
82093: PUSH
82094: LD_INT 1
82096: PUSH
82097: EMPTY
82098: LIST
82099: LIST
82100: PUSH
82101: LD_INT 4
82103: NEG
82104: PUSH
82105: LD_INT 0
82107: PUSH
82108: EMPTY
82109: LIST
82110: LIST
82111: PUSH
82112: LD_INT 4
82114: NEG
82115: PUSH
82116: LD_INT 1
82118: NEG
82119: PUSH
82120: EMPTY
82121: LIST
82122: LIST
82123: PUSH
82124: LD_INT 4
82126: NEG
82127: PUSH
82128: LD_INT 1
82130: PUSH
82131: EMPTY
82132: LIST
82133: LIST
82134: PUSH
82135: LD_INT 5
82137: NEG
82138: PUSH
82139: LD_INT 0
82141: PUSH
82142: EMPTY
82143: LIST
82144: LIST
82145: PUSH
82146: LD_INT 5
82148: NEG
82149: PUSH
82150: LD_INT 1
82152: NEG
82153: PUSH
82154: EMPTY
82155: LIST
82156: LIST
82157: PUSH
82158: LD_INT 5
82160: NEG
82161: PUSH
82162: LD_INT 1
82164: PUSH
82165: EMPTY
82166: LIST
82167: LIST
82168: PUSH
82169: LD_INT 6
82171: NEG
82172: PUSH
82173: LD_INT 0
82175: PUSH
82176: EMPTY
82177: LIST
82178: LIST
82179: PUSH
82180: LD_INT 6
82182: NEG
82183: PUSH
82184: LD_INT 1
82186: NEG
82187: PUSH
82188: EMPTY
82189: LIST
82190: LIST
82191: PUSH
82192: EMPTY
82193: LIST
82194: LIST
82195: LIST
82196: LIST
82197: LIST
82198: LIST
82199: LIST
82200: LIST
82201: LIST
82202: LIST
82203: LIST
82204: LIST
82205: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
82206: LD_ADDR_VAR 0 34
82210: PUSH
82211: LD_INT 2
82213: NEG
82214: PUSH
82215: LD_INT 3
82217: NEG
82218: PUSH
82219: EMPTY
82220: LIST
82221: LIST
82222: PUSH
82223: LD_INT 3
82225: NEG
82226: PUSH
82227: LD_INT 2
82229: NEG
82230: PUSH
82231: EMPTY
82232: LIST
82233: LIST
82234: PUSH
82235: LD_INT 3
82237: NEG
82238: PUSH
82239: LD_INT 3
82241: NEG
82242: PUSH
82243: EMPTY
82244: LIST
82245: LIST
82246: PUSH
82247: LD_INT 3
82249: NEG
82250: PUSH
82251: LD_INT 4
82253: NEG
82254: PUSH
82255: EMPTY
82256: LIST
82257: LIST
82258: PUSH
82259: LD_INT 4
82261: NEG
82262: PUSH
82263: LD_INT 3
82265: NEG
82266: PUSH
82267: EMPTY
82268: LIST
82269: LIST
82270: PUSH
82271: LD_INT 4
82273: NEG
82274: PUSH
82275: LD_INT 4
82277: NEG
82278: PUSH
82279: EMPTY
82280: LIST
82281: LIST
82282: PUSH
82283: LD_INT 4
82285: NEG
82286: PUSH
82287: LD_INT 5
82289: NEG
82290: PUSH
82291: EMPTY
82292: LIST
82293: LIST
82294: PUSH
82295: LD_INT 5
82297: NEG
82298: PUSH
82299: LD_INT 4
82301: NEG
82302: PUSH
82303: EMPTY
82304: LIST
82305: LIST
82306: PUSH
82307: LD_INT 5
82309: NEG
82310: PUSH
82311: LD_INT 5
82313: NEG
82314: PUSH
82315: EMPTY
82316: LIST
82317: LIST
82318: PUSH
82319: LD_INT 5
82321: NEG
82322: PUSH
82323: LD_INT 6
82325: NEG
82326: PUSH
82327: EMPTY
82328: LIST
82329: LIST
82330: PUSH
82331: LD_INT 6
82333: NEG
82334: PUSH
82335: LD_INT 5
82337: NEG
82338: PUSH
82339: EMPTY
82340: LIST
82341: LIST
82342: PUSH
82343: LD_INT 6
82345: NEG
82346: PUSH
82347: LD_INT 6
82349: NEG
82350: PUSH
82351: EMPTY
82352: LIST
82353: LIST
82354: PUSH
82355: EMPTY
82356: LIST
82357: LIST
82358: LIST
82359: LIST
82360: LIST
82361: LIST
82362: LIST
82363: LIST
82364: LIST
82365: LIST
82366: LIST
82367: LIST
82368: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
82369: LD_ADDR_VAR 0 41
82373: PUSH
82374: LD_INT 0
82376: PUSH
82377: LD_INT 2
82379: NEG
82380: PUSH
82381: EMPTY
82382: LIST
82383: LIST
82384: PUSH
82385: LD_INT 1
82387: NEG
82388: PUSH
82389: LD_INT 3
82391: NEG
82392: PUSH
82393: EMPTY
82394: LIST
82395: LIST
82396: PUSH
82397: LD_INT 1
82399: PUSH
82400: LD_INT 2
82402: NEG
82403: PUSH
82404: EMPTY
82405: LIST
82406: LIST
82407: PUSH
82408: EMPTY
82409: LIST
82410: LIST
82411: LIST
82412: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
82413: LD_ADDR_VAR 0 42
82417: PUSH
82418: LD_INT 2
82420: PUSH
82421: LD_INT 0
82423: PUSH
82424: EMPTY
82425: LIST
82426: LIST
82427: PUSH
82428: LD_INT 2
82430: PUSH
82431: LD_INT 1
82433: NEG
82434: PUSH
82435: EMPTY
82436: LIST
82437: LIST
82438: PUSH
82439: LD_INT 3
82441: PUSH
82442: LD_INT 1
82444: PUSH
82445: EMPTY
82446: LIST
82447: LIST
82448: PUSH
82449: EMPTY
82450: LIST
82451: LIST
82452: LIST
82453: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
82454: LD_ADDR_VAR 0 43
82458: PUSH
82459: LD_INT 2
82461: PUSH
82462: LD_INT 2
82464: PUSH
82465: EMPTY
82466: LIST
82467: LIST
82468: PUSH
82469: LD_INT 3
82471: PUSH
82472: LD_INT 2
82474: PUSH
82475: EMPTY
82476: LIST
82477: LIST
82478: PUSH
82479: LD_INT 2
82481: PUSH
82482: LD_INT 3
82484: PUSH
82485: EMPTY
82486: LIST
82487: LIST
82488: PUSH
82489: EMPTY
82490: LIST
82491: LIST
82492: LIST
82493: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
82494: LD_ADDR_VAR 0 44
82498: PUSH
82499: LD_INT 0
82501: PUSH
82502: LD_INT 2
82504: PUSH
82505: EMPTY
82506: LIST
82507: LIST
82508: PUSH
82509: LD_INT 1
82511: PUSH
82512: LD_INT 3
82514: PUSH
82515: EMPTY
82516: LIST
82517: LIST
82518: PUSH
82519: LD_INT 1
82521: NEG
82522: PUSH
82523: LD_INT 2
82525: PUSH
82526: EMPTY
82527: LIST
82528: LIST
82529: PUSH
82530: EMPTY
82531: LIST
82532: LIST
82533: LIST
82534: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
82535: LD_ADDR_VAR 0 45
82539: PUSH
82540: LD_INT 2
82542: NEG
82543: PUSH
82544: LD_INT 0
82546: PUSH
82547: EMPTY
82548: LIST
82549: LIST
82550: PUSH
82551: LD_INT 2
82553: NEG
82554: PUSH
82555: LD_INT 1
82557: PUSH
82558: EMPTY
82559: LIST
82560: LIST
82561: PUSH
82562: LD_INT 3
82564: NEG
82565: PUSH
82566: LD_INT 1
82568: NEG
82569: PUSH
82570: EMPTY
82571: LIST
82572: LIST
82573: PUSH
82574: EMPTY
82575: LIST
82576: LIST
82577: LIST
82578: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
82579: LD_ADDR_VAR 0 46
82583: PUSH
82584: LD_INT 2
82586: NEG
82587: PUSH
82588: LD_INT 2
82590: NEG
82591: PUSH
82592: EMPTY
82593: LIST
82594: LIST
82595: PUSH
82596: LD_INT 2
82598: NEG
82599: PUSH
82600: LD_INT 3
82602: NEG
82603: PUSH
82604: EMPTY
82605: LIST
82606: LIST
82607: PUSH
82608: LD_INT 3
82610: NEG
82611: PUSH
82612: LD_INT 2
82614: NEG
82615: PUSH
82616: EMPTY
82617: LIST
82618: LIST
82619: PUSH
82620: EMPTY
82621: LIST
82622: LIST
82623: LIST
82624: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
82625: LD_ADDR_VAR 0 47
82629: PUSH
82630: LD_INT 2
82632: NEG
82633: PUSH
82634: LD_INT 3
82636: NEG
82637: PUSH
82638: EMPTY
82639: LIST
82640: LIST
82641: PUSH
82642: LD_INT 1
82644: NEG
82645: PUSH
82646: LD_INT 3
82648: NEG
82649: PUSH
82650: EMPTY
82651: LIST
82652: LIST
82653: PUSH
82654: EMPTY
82655: LIST
82656: LIST
82657: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
82658: LD_ADDR_VAR 0 48
82662: PUSH
82663: LD_INT 1
82665: PUSH
82666: LD_INT 2
82668: NEG
82669: PUSH
82670: EMPTY
82671: LIST
82672: LIST
82673: PUSH
82674: LD_INT 2
82676: PUSH
82677: LD_INT 1
82679: NEG
82680: PUSH
82681: EMPTY
82682: LIST
82683: LIST
82684: PUSH
82685: EMPTY
82686: LIST
82687: LIST
82688: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
82689: LD_ADDR_VAR 0 49
82693: PUSH
82694: LD_INT 3
82696: PUSH
82697: LD_INT 1
82699: PUSH
82700: EMPTY
82701: LIST
82702: LIST
82703: PUSH
82704: LD_INT 3
82706: PUSH
82707: LD_INT 2
82709: PUSH
82710: EMPTY
82711: LIST
82712: LIST
82713: PUSH
82714: EMPTY
82715: LIST
82716: LIST
82717: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
82718: LD_ADDR_VAR 0 50
82722: PUSH
82723: LD_INT 2
82725: PUSH
82726: LD_INT 3
82728: PUSH
82729: EMPTY
82730: LIST
82731: LIST
82732: PUSH
82733: LD_INT 1
82735: PUSH
82736: LD_INT 3
82738: PUSH
82739: EMPTY
82740: LIST
82741: LIST
82742: PUSH
82743: EMPTY
82744: LIST
82745: LIST
82746: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
82747: LD_ADDR_VAR 0 51
82751: PUSH
82752: LD_INT 1
82754: NEG
82755: PUSH
82756: LD_INT 2
82758: PUSH
82759: EMPTY
82760: LIST
82761: LIST
82762: PUSH
82763: LD_INT 2
82765: NEG
82766: PUSH
82767: LD_INT 1
82769: PUSH
82770: EMPTY
82771: LIST
82772: LIST
82773: PUSH
82774: EMPTY
82775: LIST
82776: LIST
82777: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
82778: LD_ADDR_VAR 0 52
82782: PUSH
82783: LD_INT 3
82785: NEG
82786: PUSH
82787: LD_INT 1
82789: NEG
82790: PUSH
82791: EMPTY
82792: LIST
82793: LIST
82794: PUSH
82795: LD_INT 3
82797: NEG
82798: PUSH
82799: LD_INT 2
82801: NEG
82802: PUSH
82803: EMPTY
82804: LIST
82805: LIST
82806: PUSH
82807: EMPTY
82808: LIST
82809: LIST
82810: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
82811: LD_ADDR_VAR 0 53
82815: PUSH
82816: LD_INT 1
82818: NEG
82819: PUSH
82820: LD_INT 3
82822: NEG
82823: PUSH
82824: EMPTY
82825: LIST
82826: LIST
82827: PUSH
82828: LD_INT 0
82830: PUSH
82831: LD_INT 3
82833: NEG
82834: PUSH
82835: EMPTY
82836: LIST
82837: LIST
82838: PUSH
82839: LD_INT 1
82841: PUSH
82842: LD_INT 2
82844: NEG
82845: PUSH
82846: EMPTY
82847: LIST
82848: LIST
82849: PUSH
82850: EMPTY
82851: LIST
82852: LIST
82853: LIST
82854: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
82855: LD_ADDR_VAR 0 54
82859: PUSH
82860: LD_INT 2
82862: PUSH
82863: LD_INT 1
82865: NEG
82866: PUSH
82867: EMPTY
82868: LIST
82869: LIST
82870: PUSH
82871: LD_INT 3
82873: PUSH
82874: LD_INT 0
82876: PUSH
82877: EMPTY
82878: LIST
82879: LIST
82880: PUSH
82881: LD_INT 3
82883: PUSH
82884: LD_INT 1
82886: PUSH
82887: EMPTY
82888: LIST
82889: LIST
82890: PUSH
82891: EMPTY
82892: LIST
82893: LIST
82894: LIST
82895: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
82896: LD_ADDR_VAR 0 55
82900: PUSH
82901: LD_INT 3
82903: PUSH
82904: LD_INT 2
82906: PUSH
82907: EMPTY
82908: LIST
82909: LIST
82910: PUSH
82911: LD_INT 3
82913: PUSH
82914: LD_INT 3
82916: PUSH
82917: EMPTY
82918: LIST
82919: LIST
82920: PUSH
82921: LD_INT 2
82923: PUSH
82924: LD_INT 3
82926: PUSH
82927: EMPTY
82928: LIST
82929: LIST
82930: PUSH
82931: EMPTY
82932: LIST
82933: LIST
82934: LIST
82935: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
82936: LD_ADDR_VAR 0 56
82940: PUSH
82941: LD_INT 1
82943: PUSH
82944: LD_INT 3
82946: PUSH
82947: EMPTY
82948: LIST
82949: LIST
82950: PUSH
82951: LD_INT 0
82953: PUSH
82954: LD_INT 3
82956: PUSH
82957: EMPTY
82958: LIST
82959: LIST
82960: PUSH
82961: LD_INT 1
82963: NEG
82964: PUSH
82965: LD_INT 2
82967: PUSH
82968: EMPTY
82969: LIST
82970: LIST
82971: PUSH
82972: EMPTY
82973: LIST
82974: LIST
82975: LIST
82976: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
82977: LD_ADDR_VAR 0 57
82981: PUSH
82982: LD_INT 2
82984: NEG
82985: PUSH
82986: LD_INT 1
82988: PUSH
82989: EMPTY
82990: LIST
82991: LIST
82992: PUSH
82993: LD_INT 3
82995: NEG
82996: PUSH
82997: LD_INT 0
82999: PUSH
83000: EMPTY
83001: LIST
83002: LIST
83003: PUSH
83004: LD_INT 3
83006: NEG
83007: PUSH
83008: LD_INT 1
83010: NEG
83011: PUSH
83012: EMPTY
83013: LIST
83014: LIST
83015: PUSH
83016: EMPTY
83017: LIST
83018: LIST
83019: LIST
83020: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
83021: LD_ADDR_VAR 0 58
83025: PUSH
83026: LD_INT 2
83028: NEG
83029: PUSH
83030: LD_INT 3
83032: NEG
83033: PUSH
83034: EMPTY
83035: LIST
83036: LIST
83037: PUSH
83038: LD_INT 3
83040: NEG
83041: PUSH
83042: LD_INT 2
83044: NEG
83045: PUSH
83046: EMPTY
83047: LIST
83048: LIST
83049: PUSH
83050: LD_INT 3
83052: NEG
83053: PUSH
83054: LD_INT 3
83056: NEG
83057: PUSH
83058: EMPTY
83059: LIST
83060: LIST
83061: PUSH
83062: EMPTY
83063: LIST
83064: LIST
83065: LIST
83066: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
83067: LD_ADDR_VAR 0 59
83071: PUSH
83072: LD_INT 1
83074: NEG
83075: PUSH
83076: LD_INT 2
83078: NEG
83079: PUSH
83080: EMPTY
83081: LIST
83082: LIST
83083: PUSH
83084: LD_INT 0
83086: PUSH
83087: LD_INT 2
83089: NEG
83090: PUSH
83091: EMPTY
83092: LIST
83093: LIST
83094: PUSH
83095: LD_INT 1
83097: PUSH
83098: LD_INT 1
83100: NEG
83101: PUSH
83102: EMPTY
83103: LIST
83104: LIST
83105: PUSH
83106: EMPTY
83107: LIST
83108: LIST
83109: LIST
83110: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
83111: LD_ADDR_VAR 0 60
83115: PUSH
83116: LD_INT 1
83118: PUSH
83119: LD_INT 1
83121: NEG
83122: PUSH
83123: EMPTY
83124: LIST
83125: LIST
83126: PUSH
83127: LD_INT 2
83129: PUSH
83130: LD_INT 0
83132: PUSH
83133: EMPTY
83134: LIST
83135: LIST
83136: PUSH
83137: LD_INT 2
83139: PUSH
83140: LD_INT 1
83142: PUSH
83143: EMPTY
83144: LIST
83145: LIST
83146: PUSH
83147: EMPTY
83148: LIST
83149: LIST
83150: LIST
83151: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
83152: LD_ADDR_VAR 0 61
83156: PUSH
83157: LD_INT 2
83159: PUSH
83160: LD_INT 1
83162: PUSH
83163: EMPTY
83164: LIST
83165: LIST
83166: PUSH
83167: LD_INT 2
83169: PUSH
83170: LD_INT 2
83172: PUSH
83173: EMPTY
83174: LIST
83175: LIST
83176: PUSH
83177: LD_INT 1
83179: PUSH
83180: LD_INT 2
83182: PUSH
83183: EMPTY
83184: LIST
83185: LIST
83186: PUSH
83187: EMPTY
83188: LIST
83189: LIST
83190: LIST
83191: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
83192: LD_ADDR_VAR 0 62
83196: PUSH
83197: LD_INT 1
83199: PUSH
83200: LD_INT 2
83202: PUSH
83203: EMPTY
83204: LIST
83205: LIST
83206: PUSH
83207: LD_INT 0
83209: PUSH
83210: LD_INT 2
83212: PUSH
83213: EMPTY
83214: LIST
83215: LIST
83216: PUSH
83217: LD_INT 1
83219: NEG
83220: PUSH
83221: LD_INT 1
83223: PUSH
83224: EMPTY
83225: LIST
83226: LIST
83227: PUSH
83228: EMPTY
83229: LIST
83230: LIST
83231: LIST
83232: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
83233: LD_ADDR_VAR 0 63
83237: PUSH
83238: LD_INT 1
83240: NEG
83241: PUSH
83242: LD_INT 1
83244: PUSH
83245: EMPTY
83246: LIST
83247: LIST
83248: PUSH
83249: LD_INT 2
83251: NEG
83252: PUSH
83253: LD_INT 0
83255: PUSH
83256: EMPTY
83257: LIST
83258: LIST
83259: PUSH
83260: LD_INT 2
83262: NEG
83263: PUSH
83264: LD_INT 1
83266: NEG
83267: PUSH
83268: EMPTY
83269: LIST
83270: LIST
83271: PUSH
83272: EMPTY
83273: LIST
83274: LIST
83275: LIST
83276: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
83277: LD_ADDR_VAR 0 64
83281: PUSH
83282: LD_INT 1
83284: NEG
83285: PUSH
83286: LD_INT 2
83288: NEG
83289: PUSH
83290: EMPTY
83291: LIST
83292: LIST
83293: PUSH
83294: LD_INT 2
83296: NEG
83297: PUSH
83298: LD_INT 1
83300: NEG
83301: PUSH
83302: EMPTY
83303: LIST
83304: LIST
83305: PUSH
83306: LD_INT 2
83308: NEG
83309: PUSH
83310: LD_INT 2
83312: NEG
83313: PUSH
83314: EMPTY
83315: LIST
83316: LIST
83317: PUSH
83318: EMPTY
83319: LIST
83320: LIST
83321: LIST
83322: ST_TO_ADDR
// end ; 2 :
83323: GO 86589
83325: LD_INT 2
83327: DOUBLE
83328: EQUAL
83329: IFTRUE 83333
83331: GO 86588
83333: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
83334: LD_ADDR_VAR 0 29
83338: PUSH
83339: LD_INT 4
83341: PUSH
83342: LD_INT 0
83344: PUSH
83345: EMPTY
83346: LIST
83347: LIST
83348: PUSH
83349: LD_INT 4
83351: PUSH
83352: LD_INT 1
83354: NEG
83355: PUSH
83356: EMPTY
83357: LIST
83358: LIST
83359: PUSH
83360: LD_INT 5
83362: PUSH
83363: LD_INT 0
83365: PUSH
83366: EMPTY
83367: LIST
83368: LIST
83369: PUSH
83370: LD_INT 5
83372: PUSH
83373: LD_INT 1
83375: PUSH
83376: EMPTY
83377: LIST
83378: LIST
83379: PUSH
83380: LD_INT 4
83382: PUSH
83383: LD_INT 1
83385: PUSH
83386: EMPTY
83387: LIST
83388: LIST
83389: PUSH
83390: LD_INT 3
83392: PUSH
83393: LD_INT 0
83395: PUSH
83396: EMPTY
83397: LIST
83398: LIST
83399: PUSH
83400: LD_INT 3
83402: PUSH
83403: LD_INT 1
83405: NEG
83406: PUSH
83407: EMPTY
83408: LIST
83409: LIST
83410: PUSH
83411: LD_INT 3
83413: PUSH
83414: LD_INT 2
83416: NEG
83417: PUSH
83418: EMPTY
83419: LIST
83420: LIST
83421: PUSH
83422: LD_INT 5
83424: PUSH
83425: LD_INT 2
83427: PUSH
83428: EMPTY
83429: LIST
83430: LIST
83431: PUSH
83432: LD_INT 3
83434: PUSH
83435: LD_INT 3
83437: PUSH
83438: EMPTY
83439: LIST
83440: LIST
83441: PUSH
83442: LD_INT 3
83444: PUSH
83445: LD_INT 2
83447: PUSH
83448: EMPTY
83449: LIST
83450: LIST
83451: PUSH
83452: LD_INT 4
83454: PUSH
83455: LD_INT 3
83457: PUSH
83458: EMPTY
83459: LIST
83460: LIST
83461: PUSH
83462: LD_INT 4
83464: PUSH
83465: LD_INT 4
83467: PUSH
83468: EMPTY
83469: LIST
83470: LIST
83471: PUSH
83472: LD_INT 3
83474: PUSH
83475: LD_INT 4
83477: PUSH
83478: EMPTY
83479: LIST
83480: LIST
83481: PUSH
83482: LD_INT 2
83484: PUSH
83485: LD_INT 3
83487: PUSH
83488: EMPTY
83489: LIST
83490: LIST
83491: PUSH
83492: LD_INT 2
83494: PUSH
83495: LD_INT 2
83497: PUSH
83498: EMPTY
83499: LIST
83500: LIST
83501: PUSH
83502: LD_INT 4
83504: PUSH
83505: LD_INT 2
83507: PUSH
83508: EMPTY
83509: LIST
83510: LIST
83511: PUSH
83512: LD_INT 2
83514: PUSH
83515: LD_INT 4
83517: PUSH
83518: EMPTY
83519: LIST
83520: LIST
83521: PUSH
83522: LD_INT 0
83524: PUSH
83525: LD_INT 4
83527: PUSH
83528: EMPTY
83529: LIST
83530: LIST
83531: PUSH
83532: LD_INT 0
83534: PUSH
83535: LD_INT 3
83537: PUSH
83538: EMPTY
83539: LIST
83540: LIST
83541: PUSH
83542: LD_INT 1
83544: PUSH
83545: LD_INT 4
83547: PUSH
83548: EMPTY
83549: LIST
83550: LIST
83551: PUSH
83552: LD_INT 1
83554: PUSH
83555: LD_INT 5
83557: PUSH
83558: EMPTY
83559: LIST
83560: LIST
83561: PUSH
83562: LD_INT 0
83564: PUSH
83565: LD_INT 5
83567: PUSH
83568: EMPTY
83569: LIST
83570: LIST
83571: PUSH
83572: LD_INT 1
83574: NEG
83575: PUSH
83576: LD_INT 4
83578: PUSH
83579: EMPTY
83580: LIST
83581: LIST
83582: PUSH
83583: LD_INT 1
83585: NEG
83586: PUSH
83587: LD_INT 3
83589: PUSH
83590: EMPTY
83591: LIST
83592: LIST
83593: PUSH
83594: LD_INT 2
83596: PUSH
83597: LD_INT 5
83599: PUSH
83600: EMPTY
83601: LIST
83602: LIST
83603: PUSH
83604: LD_INT 2
83606: NEG
83607: PUSH
83608: LD_INT 3
83610: PUSH
83611: EMPTY
83612: LIST
83613: LIST
83614: PUSH
83615: LD_INT 3
83617: NEG
83618: PUSH
83619: LD_INT 0
83621: PUSH
83622: EMPTY
83623: LIST
83624: LIST
83625: PUSH
83626: LD_INT 3
83628: NEG
83629: PUSH
83630: LD_INT 1
83632: NEG
83633: PUSH
83634: EMPTY
83635: LIST
83636: LIST
83637: PUSH
83638: LD_INT 2
83640: NEG
83641: PUSH
83642: LD_INT 0
83644: PUSH
83645: EMPTY
83646: LIST
83647: LIST
83648: PUSH
83649: LD_INT 2
83651: NEG
83652: PUSH
83653: LD_INT 1
83655: PUSH
83656: EMPTY
83657: LIST
83658: LIST
83659: PUSH
83660: LD_INT 3
83662: NEG
83663: PUSH
83664: LD_INT 1
83666: PUSH
83667: EMPTY
83668: LIST
83669: LIST
83670: PUSH
83671: LD_INT 4
83673: NEG
83674: PUSH
83675: LD_INT 0
83677: PUSH
83678: EMPTY
83679: LIST
83680: LIST
83681: PUSH
83682: LD_INT 4
83684: NEG
83685: PUSH
83686: LD_INT 1
83688: NEG
83689: PUSH
83690: EMPTY
83691: LIST
83692: LIST
83693: PUSH
83694: LD_INT 4
83696: NEG
83697: PUSH
83698: LD_INT 2
83700: NEG
83701: PUSH
83702: EMPTY
83703: LIST
83704: LIST
83705: PUSH
83706: LD_INT 2
83708: NEG
83709: PUSH
83710: LD_INT 2
83712: PUSH
83713: EMPTY
83714: LIST
83715: LIST
83716: PUSH
83717: LD_INT 4
83719: NEG
83720: PUSH
83721: LD_INT 4
83723: NEG
83724: PUSH
83725: EMPTY
83726: LIST
83727: LIST
83728: PUSH
83729: LD_INT 4
83731: NEG
83732: PUSH
83733: LD_INT 5
83735: NEG
83736: PUSH
83737: EMPTY
83738: LIST
83739: LIST
83740: PUSH
83741: LD_INT 3
83743: NEG
83744: PUSH
83745: LD_INT 4
83747: NEG
83748: PUSH
83749: EMPTY
83750: LIST
83751: LIST
83752: PUSH
83753: LD_INT 3
83755: NEG
83756: PUSH
83757: LD_INT 3
83759: NEG
83760: PUSH
83761: EMPTY
83762: LIST
83763: LIST
83764: PUSH
83765: LD_INT 4
83767: NEG
83768: PUSH
83769: LD_INT 3
83771: NEG
83772: PUSH
83773: EMPTY
83774: LIST
83775: LIST
83776: PUSH
83777: LD_INT 5
83779: NEG
83780: PUSH
83781: LD_INT 4
83783: NEG
83784: PUSH
83785: EMPTY
83786: LIST
83787: LIST
83788: PUSH
83789: LD_INT 5
83791: NEG
83792: PUSH
83793: LD_INT 5
83795: NEG
83796: PUSH
83797: EMPTY
83798: LIST
83799: LIST
83800: PUSH
83801: LD_INT 3
83803: NEG
83804: PUSH
83805: LD_INT 5
83807: NEG
83808: PUSH
83809: EMPTY
83810: LIST
83811: LIST
83812: PUSH
83813: LD_INT 5
83815: NEG
83816: PUSH
83817: LD_INT 3
83819: NEG
83820: PUSH
83821: EMPTY
83822: LIST
83823: LIST
83824: PUSH
83825: EMPTY
83826: LIST
83827: LIST
83828: LIST
83829: LIST
83830: LIST
83831: LIST
83832: LIST
83833: LIST
83834: LIST
83835: LIST
83836: LIST
83837: LIST
83838: LIST
83839: LIST
83840: LIST
83841: LIST
83842: LIST
83843: LIST
83844: LIST
83845: LIST
83846: LIST
83847: LIST
83848: LIST
83849: LIST
83850: LIST
83851: LIST
83852: LIST
83853: LIST
83854: LIST
83855: LIST
83856: LIST
83857: LIST
83858: LIST
83859: LIST
83860: LIST
83861: LIST
83862: LIST
83863: LIST
83864: LIST
83865: LIST
83866: LIST
83867: LIST
83868: LIST
83869: LIST
83870: LIST
83871: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
83872: LD_ADDR_VAR 0 30
83876: PUSH
83877: LD_INT 4
83879: PUSH
83880: LD_INT 4
83882: PUSH
83883: EMPTY
83884: LIST
83885: LIST
83886: PUSH
83887: LD_INT 4
83889: PUSH
83890: LD_INT 3
83892: PUSH
83893: EMPTY
83894: LIST
83895: LIST
83896: PUSH
83897: LD_INT 5
83899: PUSH
83900: LD_INT 4
83902: PUSH
83903: EMPTY
83904: LIST
83905: LIST
83906: PUSH
83907: LD_INT 5
83909: PUSH
83910: LD_INT 5
83912: PUSH
83913: EMPTY
83914: LIST
83915: LIST
83916: PUSH
83917: LD_INT 4
83919: PUSH
83920: LD_INT 5
83922: PUSH
83923: EMPTY
83924: LIST
83925: LIST
83926: PUSH
83927: LD_INT 3
83929: PUSH
83930: LD_INT 4
83932: PUSH
83933: EMPTY
83934: LIST
83935: LIST
83936: PUSH
83937: LD_INT 3
83939: PUSH
83940: LD_INT 3
83942: PUSH
83943: EMPTY
83944: LIST
83945: LIST
83946: PUSH
83947: LD_INT 5
83949: PUSH
83950: LD_INT 3
83952: PUSH
83953: EMPTY
83954: LIST
83955: LIST
83956: PUSH
83957: LD_INT 3
83959: PUSH
83960: LD_INT 5
83962: PUSH
83963: EMPTY
83964: LIST
83965: LIST
83966: PUSH
83967: LD_INT 0
83969: PUSH
83970: LD_INT 3
83972: PUSH
83973: EMPTY
83974: LIST
83975: LIST
83976: PUSH
83977: LD_INT 0
83979: PUSH
83980: LD_INT 2
83982: PUSH
83983: EMPTY
83984: LIST
83985: LIST
83986: PUSH
83987: LD_INT 1
83989: PUSH
83990: LD_INT 3
83992: PUSH
83993: EMPTY
83994: LIST
83995: LIST
83996: PUSH
83997: LD_INT 1
83999: PUSH
84000: LD_INT 4
84002: PUSH
84003: EMPTY
84004: LIST
84005: LIST
84006: PUSH
84007: LD_INT 0
84009: PUSH
84010: LD_INT 4
84012: PUSH
84013: EMPTY
84014: LIST
84015: LIST
84016: PUSH
84017: LD_INT 1
84019: NEG
84020: PUSH
84021: LD_INT 3
84023: PUSH
84024: EMPTY
84025: LIST
84026: LIST
84027: PUSH
84028: LD_INT 1
84030: NEG
84031: PUSH
84032: LD_INT 2
84034: PUSH
84035: EMPTY
84036: LIST
84037: LIST
84038: PUSH
84039: LD_INT 2
84041: PUSH
84042: LD_INT 4
84044: PUSH
84045: EMPTY
84046: LIST
84047: LIST
84048: PUSH
84049: LD_INT 2
84051: NEG
84052: PUSH
84053: LD_INT 2
84055: PUSH
84056: EMPTY
84057: LIST
84058: LIST
84059: PUSH
84060: LD_INT 4
84062: NEG
84063: PUSH
84064: LD_INT 0
84066: PUSH
84067: EMPTY
84068: LIST
84069: LIST
84070: PUSH
84071: LD_INT 4
84073: NEG
84074: PUSH
84075: LD_INT 1
84077: NEG
84078: PUSH
84079: EMPTY
84080: LIST
84081: LIST
84082: PUSH
84083: LD_INT 3
84085: NEG
84086: PUSH
84087: LD_INT 0
84089: PUSH
84090: EMPTY
84091: LIST
84092: LIST
84093: PUSH
84094: LD_INT 3
84096: NEG
84097: PUSH
84098: LD_INT 1
84100: PUSH
84101: EMPTY
84102: LIST
84103: LIST
84104: PUSH
84105: LD_INT 4
84107: NEG
84108: PUSH
84109: LD_INT 1
84111: PUSH
84112: EMPTY
84113: LIST
84114: LIST
84115: PUSH
84116: LD_INT 5
84118: NEG
84119: PUSH
84120: LD_INT 0
84122: PUSH
84123: EMPTY
84124: LIST
84125: LIST
84126: PUSH
84127: LD_INT 5
84129: NEG
84130: PUSH
84131: LD_INT 1
84133: NEG
84134: PUSH
84135: EMPTY
84136: LIST
84137: LIST
84138: PUSH
84139: LD_INT 5
84141: NEG
84142: PUSH
84143: LD_INT 2
84145: NEG
84146: PUSH
84147: EMPTY
84148: LIST
84149: LIST
84150: PUSH
84151: LD_INT 3
84153: NEG
84154: PUSH
84155: LD_INT 2
84157: PUSH
84158: EMPTY
84159: LIST
84160: LIST
84161: PUSH
84162: LD_INT 3
84164: NEG
84165: PUSH
84166: LD_INT 3
84168: NEG
84169: PUSH
84170: EMPTY
84171: LIST
84172: LIST
84173: PUSH
84174: LD_INT 3
84176: NEG
84177: PUSH
84178: LD_INT 4
84180: NEG
84181: PUSH
84182: EMPTY
84183: LIST
84184: LIST
84185: PUSH
84186: LD_INT 2
84188: NEG
84189: PUSH
84190: LD_INT 3
84192: NEG
84193: PUSH
84194: EMPTY
84195: LIST
84196: LIST
84197: PUSH
84198: LD_INT 2
84200: NEG
84201: PUSH
84202: LD_INT 2
84204: NEG
84205: PUSH
84206: EMPTY
84207: LIST
84208: LIST
84209: PUSH
84210: LD_INT 3
84212: NEG
84213: PUSH
84214: LD_INT 2
84216: NEG
84217: PUSH
84218: EMPTY
84219: LIST
84220: LIST
84221: PUSH
84222: LD_INT 4
84224: NEG
84225: PUSH
84226: LD_INT 3
84228: NEG
84229: PUSH
84230: EMPTY
84231: LIST
84232: LIST
84233: PUSH
84234: LD_INT 4
84236: NEG
84237: PUSH
84238: LD_INT 4
84240: NEG
84241: PUSH
84242: EMPTY
84243: LIST
84244: LIST
84245: PUSH
84246: LD_INT 2
84248: NEG
84249: PUSH
84250: LD_INT 4
84252: NEG
84253: PUSH
84254: EMPTY
84255: LIST
84256: LIST
84257: PUSH
84258: LD_INT 4
84260: NEG
84261: PUSH
84262: LD_INT 2
84264: NEG
84265: PUSH
84266: EMPTY
84267: LIST
84268: LIST
84269: PUSH
84270: LD_INT 0
84272: PUSH
84273: LD_INT 4
84275: NEG
84276: PUSH
84277: EMPTY
84278: LIST
84279: LIST
84280: PUSH
84281: LD_INT 0
84283: PUSH
84284: LD_INT 5
84286: NEG
84287: PUSH
84288: EMPTY
84289: LIST
84290: LIST
84291: PUSH
84292: LD_INT 1
84294: PUSH
84295: LD_INT 4
84297: NEG
84298: PUSH
84299: EMPTY
84300: LIST
84301: LIST
84302: PUSH
84303: LD_INT 1
84305: PUSH
84306: LD_INT 3
84308: NEG
84309: PUSH
84310: EMPTY
84311: LIST
84312: LIST
84313: PUSH
84314: LD_INT 0
84316: PUSH
84317: LD_INT 3
84319: NEG
84320: PUSH
84321: EMPTY
84322: LIST
84323: LIST
84324: PUSH
84325: LD_INT 1
84327: NEG
84328: PUSH
84329: LD_INT 4
84331: NEG
84332: PUSH
84333: EMPTY
84334: LIST
84335: LIST
84336: PUSH
84337: LD_INT 1
84339: NEG
84340: PUSH
84341: LD_INT 5
84343: NEG
84344: PUSH
84345: EMPTY
84346: LIST
84347: LIST
84348: PUSH
84349: LD_INT 2
84351: PUSH
84352: LD_INT 3
84354: NEG
84355: PUSH
84356: EMPTY
84357: LIST
84358: LIST
84359: PUSH
84360: LD_INT 2
84362: NEG
84363: PUSH
84364: LD_INT 5
84366: NEG
84367: PUSH
84368: EMPTY
84369: LIST
84370: LIST
84371: PUSH
84372: EMPTY
84373: LIST
84374: LIST
84375: LIST
84376: LIST
84377: LIST
84378: LIST
84379: LIST
84380: LIST
84381: LIST
84382: LIST
84383: LIST
84384: LIST
84385: LIST
84386: LIST
84387: LIST
84388: LIST
84389: LIST
84390: LIST
84391: LIST
84392: LIST
84393: LIST
84394: LIST
84395: LIST
84396: LIST
84397: LIST
84398: LIST
84399: LIST
84400: LIST
84401: LIST
84402: LIST
84403: LIST
84404: LIST
84405: LIST
84406: LIST
84407: LIST
84408: LIST
84409: LIST
84410: LIST
84411: LIST
84412: LIST
84413: LIST
84414: LIST
84415: LIST
84416: LIST
84417: LIST
84418: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
84419: LD_ADDR_VAR 0 31
84423: PUSH
84424: LD_INT 0
84426: PUSH
84427: LD_INT 4
84429: PUSH
84430: EMPTY
84431: LIST
84432: LIST
84433: PUSH
84434: LD_INT 0
84436: PUSH
84437: LD_INT 3
84439: PUSH
84440: EMPTY
84441: LIST
84442: LIST
84443: PUSH
84444: LD_INT 1
84446: PUSH
84447: LD_INT 4
84449: PUSH
84450: EMPTY
84451: LIST
84452: LIST
84453: PUSH
84454: LD_INT 1
84456: PUSH
84457: LD_INT 5
84459: PUSH
84460: EMPTY
84461: LIST
84462: LIST
84463: PUSH
84464: LD_INT 0
84466: PUSH
84467: LD_INT 5
84469: PUSH
84470: EMPTY
84471: LIST
84472: LIST
84473: PUSH
84474: LD_INT 1
84476: NEG
84477: PUSH
84478: LD_INT 4
84480: PUSH
84481: EMPTY
84482: LIST
84483: LIST
84484: PUSH
84485: LD_INT 1
84487: NEG
84488: PUSH
84489: LD_INT 3
84491: PUSH
84492: EMPTY
84493: LIST
84494: LIST
84495: PUSH
84496: LD_INT 2
84498: PUSH
84499: LD_INT 5
84501: PUSH
84502: EMPTY
84503: LIST
84504: LIST
84505: PUSH
84506: LD_INT 2
84508: NEG
84509: PUSH
84510: LD_INT 3
84512: PUSH
84513: EMPTY
84514: LIST
84515: LIST
84516: PUSH
84517: LD_INT 3
84519: NEG
84520: PUSH
84521: LD_INT 0
84523: PUSH
84524: EMPTY
84525: LIST
84526: LIST
84527: PUSH
84528: LD_INT 3
84530: NEG
84531: PUSH
84532: LD_INT 1
84534: NEG
84535: PUSH
84536: EMPTY
84537: LIST
84538: LIST
84539: PUSH
84540: LD_INT 2
84542: NEG
84543: PUSH
84544: LD_INT 0
84546: PUSH
84547: EMPTY
84548: LIST
84549: LIST
84550: PUSH
84551: LD_INT 2
84553: NEG
84554: PUSH
84555: LD_INT 1
84557: PUSH
84558: EMPTY
84559: LIST
84560: LIST
84561: PUSH
84562: LD_INT 3
84564: NEG
84565: PUSH
84566: LD_INT 1
84568: PUSH
84569: EMPTY
84570: LIST
84571: LIST
84572: PUSH
84573: LD_INT 4
84575: NEG
84576: PUSH
84577: LD_INT 0
84579: PUSH
84580: EMPTY
84581: LIST
84582: LIST
84583: PUSH
84584: LD_INT 4
84586: NEG
84587: PUSH
84588: LD_INT 1
84590: NEG
84591: PUSH
84592: EMPTY
84593: LIST
84594: LIST
84595: PUSH
84596: LD_INT 4
84598: NEG
84599: PUSH
84600: LD_INT 2
84602: NEG
84603: PUSH
84604: EMPTY
84605: LIST
84606: LIST
84607: PUSH
84608: LD_INT 2
84610: NEG
84611: PUSH
84612: LD_INT 2
84614: PUSH
84615: EMPTY
84616: LIST
84617: LIST
84618: PUSH
84619: LD_INT 4
84621: NEG
84622: PUSH
84623: LD_INT 4
84625: NEG
84626: PUSH
84627: EMPTY
84628: LIST
84629: LIST
84630: PUSH
84631: LD_INT 4
84633: NEG
84634: PUSH
84635: LD_INT 5
84637: NEG
84638: PUSH
84639: EMPTY
84640: LIST
84641: LIST
84642: PUSH
84643: LD_INT 3
84645: NEG
84646: PUSH
84647: LD_INT 4
84649: NEG
84650: PUSH
84651: EMPTY
84652: LIST
84653: LIST
84654: PUSH
84655: LD_INT 3
84657: NEG
84658: PUSH
84659: LD_INT 3
84661: NEG
84662: PUSH
84663: EMPTY
84664: LIST
84665: LIST
84666: PUSH
84667: LD_INT 4
84669: NEG
84670: PUSH
84671: LD_INT 3
84673: NEG
84674: PUSH
84675: EMPTY
84676: LIST
84677: LIST
84678: PUSH
84679: LD_INT 5
84681: NEG
84682: PUSH
84683: LD_INT 4
84685: NEG
84686: PUSH
84687: EMPTY
84688: LIST
84689: LIST
84690: PUSH
84691: LD_INT 5
84693: NEG
84694: PUSH
84695: LD_INT 5
84697: NEG
84698: PUSH
84699: EMPTY
84700: LIST
84701: LIST
84702: PUSH
84703: LD_INT 3
84705: NEG
84706: PUSH
84707: LD_INT 5
84709: NEG
84710: PUSH
84711: EMPTY
84712: LIST
84713: LIST
84714: PUSH
84715: LD_INT 5
84717: NEG
84718: PUSH
84719: LD_INT 3
84721: NEG
84722: PUSH
84723: EMPTY
84724: LIST
84725: LIST
84726: PUSH
84727: LD_INT 0
84729: PUSH
84730: LD_INT 3
84732: NEG
84733: PUSH
84734: EMPTY
84735: LIST
84736: LIST
84737: PUSH
84738: LD_INT 0
84740: PUSH
84741: LD_INT 4
84743: NEG
84744: PUSH
84745: EMPTY
84746: LIST
84747: LIST
84748: PUSH
84749: LD_INT 1
84751: PUSH
84752: LD_INT 3
84754: NEG
84755: PUSH
84756: EMPTY
84757: LIST
84758: LIST
84759: PUSH
84760: LD_INT 1
84762: PUSH
84763: LD_INT 2
84765: NEG
84766: PUSH
84767: EMPTY
84768: LIST
84769: LIST
84770: PUSH
84771: LD_INT 0
84773: PUSH
84774: LD_INT 2
84776: NEG
84777: PUSH
84778: EMPTY
84779: LIST
84780: LIST
84781: PUSH
84782: LD_INT 1
84784: NEG
84785: PUSH
84786: LD_INT 3
84788: NEG
84789: PUSH
84790: EMPTY
84791: LIST
84792: LIST
84793: PUSH
84794: LD_INT 1
84796: NEG
84797: PUSH
84798: LD_INT 4
84800: NEG
84801: PUSH
84802: EMPTY
84803: LIST
84804: LIST
84805: PUSH
84806: LD_INT 2
84808: PUSH
84809: LD_INT 2
84811: NEG
84812: PUSH
84813: EMPTY
84814: LIST
84815: LIST
84816: PUSH
84817: LD_INT 2
84819: NEG
84820: PUSH
84821: LD_INT 4
84823: NEG
84824: PUSH
84825: EMPTY
84826: LIST
84827: LIST
84828: PUSH
84829: LD_INT 4
84831: PUSH
84832: LD_INT 0
84834: PUSH
84835: EMPTY
84836: LIST
84837: LIST
84838: PUSH
84839: LD_INT 4
84841: PUSH
84842: LD_INT 1
84844: NEG
84845: PUSH
84846: EMPTY
84847: LIST
84848: LIST
84849: PUSH
84850: LD_INT 5
84852: PUSH
84853: LD_INT 0
84855: PUSH
84856: EMPTY
84857: LIST
84858: LIST
84859: PUSH
84860: LD_INT 5
84862: PUSH
84863: LD_INT 1
84865: PUSH
84866: EMPTY
84867: LIST
84868: LIST
84869: PUSH
84870: LD_INT 4
84872: PUSH
84873: LD_INT 1
84875: PUSH
84876: EMPTY
84877: LIST
84878: LIST
84879: PUSH
84880: LD_INT 3
84882: PUSH
84883: LD_INT 0
84885: PUSH
84886: EMPTY
84887: LIST
84888: LIST
84889: PUSH
84890: LD_INT 3
84892: PUSH
84893: LD_INT 1
84895: NEG
84896: PUSH
84897: EMPTY
84898: LIST
84899: LIST
84900: PUSH
84901: LD_INT 3
84903: PUSH
84904: LD_INT 2
84906: NEG
84907: PUSH
84908: EMPTY
84909: LIST
84910: LIST
84911: PUSH
84912: LD_INT 5
84914: PUSH
84915: LD_INT 2
84917: PUSH
84918: EMPTY
84919: LIST
84920: LIST
84921: PUSH
84922: EMPTY
84923: LIST
84924: LIST
84925: LIST
84926: LIST
84927: LIST
84928: LIST
84929: LIST
84930: LIST
84931: LIST
84932: LIST
84933: LIST
84934: LIST
84935: LIST
84936: LIST
84937: LIST
84938: LIST
84939: LIST
84940: LIST
84941: LIST
84942: LIST
84943: LIST
84944: LIST
84945: LIST
84946: LIST
84947: LIST
84948: LIST
84949: LIST
84950: LIST
84951: LIST
84952: LIST
84953: LIST
84954: LIST
84955: LIST
84956: LIST
84957: LIST
84958: LIST
84959: LIST
84960: LIST
84961: LIST
84962: LIST
84963: LIST
84964: LIST
84965: LIST
84966: LIST
84967: LIST
84968: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
84969: LD_ADDR_VAR 0 32
84973: PUSH
84974: LD_INT 4
84976: NEG
84977: PUSH
84978: LD_INT 0
84980: PUSH
84981: EMPTY
84982: LIST
84983: LIST
84984: PUSH
84985: LD_INT 4
84987: NEG
84988: PUSH
84989: LD_INT 1
84991: NEG
84992: PUSH
84993: EMPTY
84994: LIST
84995: LIST
84996: PUSH
84997: LD_INT 3
84999: NEG
85000: PUSH
85001: LD_INT 0
85003: PUSH
85004: EMPTY
85005: LIST
85006: LIST
85007: PUSH
85008: LD_INT 3
85010: NEG
85011: PUSH
85012: LD_INT 1
85014: PUSH
85015: EMPTY
85016: LIST
85017: LIST
85018: PUSH
85019: LD_INT 4
85021: NEG
85022: PUSH
85023: LD_INT 1
85025: PUSH
85026: EMPTY
85027: LIST
85028: LIST
85029: PUSH
85030: LD_INT 5
85032: NEG
85033: PUSH
85034: LD_INT 0
85036: PUSH
85037: EMPTY
85038: LIST
85039: LIST
85040: PUSH
85041: LD_INT 5
85043: NEG
85044: PUSH
85045: LD_INT 1
85047: NEG
85048: PUSH
85049: EMPTY
85050: LIST
85051: LIST
85052: PUSH
85053: LD_INT 5
85055: NEG
85056: PUSH
85057: LD_INT 2
85059: NEG
85060: PUSH
85061: EMPTY
85062: LIST
85063: LIST
85064: PUSH
85065: LD_INT 3
85067: NEG
85068: PUSH
85069: LD_INT 2
85071: PUSH
85072: EMPTY
85073: LIST
85074: LIST
85075: PUSH
85076: LD_INT 3
85078: NEG
85079: PUSH
85080: LD_INT 3
85082: NEG
85083: PUSH
85084: EMPTY
85085: LIST
85086: LIST
85087: PUSH
85088: LD_INT 3
85090: NEG
85091: PUSH
85092: LD_INT 4
85094: NEG
85095: PUSH
85096: EMPTY
85097: LIST
85098: LIST
85099: PUSH
85100: LD_INT 2
85102: NEG
85103: PUSH
85104: LD_INT 3
85106: NEG
85107: PUSH
85108: EMPTY
85109: LIST
85110: LIST
85111: PUSH
85112: LD_INT 2
85114: NEG
85115: PUSH
85116: LD_INT 2
85118: NEG
85119: PUSH
85120: EMPTY
85121: LIST
85122: LIST
85123: PUSH
85124: LD_INT 3
85126: NEG
85127: PUSH
85128: LD_INT 2
85130: NEG
85131: PUSH
85132: EMPTY
85133: LIST
85134: LIST
85135: PUSH
85136: LD_INT 4
85138: NEG
85139: PUSH
85140: LD_INT 3
85142: NEG
85143: PUSH
85144: EMPTY
85145: LIST
85146: LIST
85147: PUSH
85148: LD_INT 4
85150: NEG
85151: PUSH
85152: LD_INT 4
85154: NEG
85155: PUSH
85156: EMPTY
85157: LIST
85158: LIST
85159: PUSH
85160: LD_INT 2
85162: NEG
85163: PUSH
85164: LD_INT 4
85166: NEG
85167: PUSH
85168: EMPTY
85169: LIST
85170: LIST
85171: PUSH
85172: LD_INT 4
85174: NEG
85175: PUSH
85176: LD_INT 2
85178: NEG
85179: PUSH
85180: EMPTY
85181: LIST
85182: LIST
85183: PUSH
85184: LD_INT 0
85186: PUSH
85187: LD_INT 4
85189: NEG
85190: PUSH
85191: EMPTY
85192: LIST
85193: LIST
85194: PUSH
85195: LD_INT 0
85197: PUSH
85198: LD_INT 5
85200: NEG
85201: PUSH
85202: EMPTY
85203: LIST
85204: LIST
85205: PUSH
85206: LD_INT 1
85208: PUSH
85209: LD_INT 4
85211: NEG
85212: PUSH
85213: EMPTY
85214: LIST
85215: LIST
85216: PUSH
85217: LD_INT 1
85219: PUSH
85220: LD_INT 3
85222: NEG
85223: PUSH
85224: EMPTY
85225: LIST
85226: LIST
85227: PUSH
85228: LD_INT 0
85230: PUSH
85231: LD_INT 3
85233: NEG
85234: PUSH
85235: EMPTY
85236: LIST
85237: LIST
85238: PUSH
85239: LD_INT 1
85241: NEG
85242: PUSH
85243: LD_INT 4
85245: NEG
85246: PUSH
85247: EMPTY
85248: LIST
85249: LIST
85250: PUSH
85251: LD_INT 1
85253: NEG
85254: PUSH
85255: LD_INT 5
85257: NEG
85258: PUSH
85259: EMPTY
85260: LIST
85261: LIST
85262: PUSH
85263: LD_INT 2
85265: PUSH
85266: LD_INT 3
85268: NEG
85269: PUSH
85270: EMPTY
85271: LIST
85272: LIST
85273: PUSH
85274: LD_INT 2
85276: NEG
85277: PUSH
85278: LD_INT 5
85280: NEG
85281: PUSH
85282: EMPTY
85283: LIST
85284: LIST
85285: PUSH
85286: LD_INT 3
85288: PUSH
85289: LD_INT 0
85291: PUSH
85292: EMPTY
85293: LIST
85294: LIST
85295: PUSH
85296: LD_INT 3
85298: PUSH
85299: LD_INT 1
85301: NEG
85302: PUSH
85303: EMPTY
85304: LIST
85305: LIST
85306: PUSH
85307: LD_INT 4
85309: PUSH
85310: LD_INT 0
85312: PUSH
85313: EMPTY
85314: LIST
85315: LIST
85316: PUSH
85317: LD_INT 4
85319: PUSH
85320: LD_INT 1
85322: PUSH
85323: EMPTY
85324: LIST
85325: LIST
85326: PUSH
85327: LD_INT 3
85329: PUSH
85330: LD_INT 1
85332: PUSH
85333: EMPTY
85334: LIST
85335: LIST
85336: PUSH
85337: LD_INT 2
85339: PUSH
85340: LD_INT 0
85342: PUSH
85343: EMPTY
85344: LIST
85345: LIST
85346: PUSH
85347: LD_INT 2
85349: PUSH
85350: LD_INT 1
85352: NEG
85353: PUSH
85354: EMPTY
85355: LIST
85356: LIST
85357: PUSH
85358: LD_INT 2
85360: PUSH
85361: LD_INT 2
85363: NEG
85364: PUSH
85365: EMPTY
85366: LIST
85367: LIST
85368: PUSH
85369: LD_INT 4
85371: PUSH
85372: LD_INT 2
85374: PUSH
85375: EMPTY
85376: LIST
85377: LIST
85378: PUSH
85379: LD_INT 4
85381: PUSH
85382: LD_INT 4
85384: PUSH
85385: EMPTY
85386: LIST
85387: LIST
85388: PUSH
85389: LD_INT 4
85391: PUSH
85392: LD_INT 3
85394: PUSH
85395: EMPTY
85396: LIST
85397: LIST
85398: PUSH
85399: LD_INT 5
85401: PUSH
85402: LD_INT 4
85404: PUSH
85405: EMPTY
85406: LIST
85407: LIST
85408: PUSH
85409: LD_INT 5
85411: PUSH
85412: LD_INT 5
85414: PUSH
85415: EMPTY
85416: LIST
85417: LIST
85418: PUSH
85419: LD_INT 4
85421: PUSH
85422: LD_INT 5
85424: PUSH
85425: EMPTY
85426: LIST
85427: LIST
85428: PUSH
85429: LD_INT 3
85431: PUSH
85432: LD_INT 4
85434: PUSH
85435: EMPTY
85436: LIST
85437: LIST
85438: PUSH
85439: LD_INT 3
85441: PUSH
85442: LD_INT 3
85444: PUSH
85445: EMPTY
85446: LIST
85447: LIST
85448: PUSH
85449: LD_INT 5
85451: PUSH
85452: LD_INT 3
85454: PUSH
85455: EMPTY
85456: LIST
85457: LIST
85458: PUSH
85459: LD_INT 3
85461: PUSH
85462: LD_INT 5
85464: PUSH
85465: EMPTY
85466: LIST
85467: LIST
85468: PUSH
85469: EMPTY
85470: LIST
85471: LIST
85472: LIST
85473: LIST
85474: LIST
85475: LIST
85476: LIST
85477: LIST
85478: LIST
85479: LIST
85480: LIST
85481: LIST
85482: LIST
85483: LIST
85484: LIST
85485: LIST
85486: LIST
85487: LIST
85488: LIST
85489: LIST
85490: LIST
85491: LIST
85492: LIST
85493: LIST
85494: LIST
85495: LIST
85496: LIST
85497: LIST
85498: LIST
85499: LIST
85500: LIST
85501: LIST
85502: LIST
85503: LIST
85504: LIST
85505: LIST
85506: LIST
85507: LIST
85508: LIST
85509: LIST
85510: LIST
85511: LIST
85512: LIST
85513: LIST
85514: LIST
85515: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
85516: LD_ADDR_VAR 0 33
85520: PUSH
85521: LD_INT 4
85523: NEG
85524: PUSH
85525: LD_INT 4
85527: NEG
85528: PUSH
85529: EMPTY
85530: LIST
85531: LIST
85532: PUSH
85533: LD_INT 4
85535: NEG
85536: PUSH
85537: LD_INT 5
85539: NEG
85540: PUSH
85541: EMPTY
85542: LIST
85543: LIST
85544: PUSH
85545: LD_INT 3
85547: NEG
85548: PUSH
85549: LD_INT 4
85551: NEG
85552: PUSH
85553: EMPTY
85554: LIST
85555: LIST
85556: PUSH
85557: LD_INT 3
85559: NEG
85560: PUSH
85561: LD_INT 3
85563: NEG
85564: PUSH
85565: EMPTY
85566: LIST
85567: LIST
85568: PUSH
85569: LD_INT 4
85571: NEG
85572: PUSH
85573: LD_INT 3
85575: NEG
85576: PUSH
85577: EMPTY
85578: LIST
85579: LIST
85580: PUSH
85581: LD_INT 5
85583: NEG
85584: PUSH
85585: LD_INT 4
85587: NEG
85588: PUSH
85589: EMPTY
85590: LIST
85591: LIST
85592: PUSH
85593: LD_INT 5
85595: NEG
85596: PUSH
85597: LD_INT 5
85599: NEG
85600: PUSH
85601: EMPTY
85602: LIST
85603: LIST
85604: PUSH
85605: LD_INT 3
85607: NEG
85608: PUSH
85609: LD_INT 5
85611: NEG
85612: PUSH
85613: EMPTY
85614: LIST
85615: LIST
85616: PUSH
85617: LD_INT 5
85619: NEG
85620: PUSH
85621: LD_INT 3
85623: NEG
85624: PUSH
85625: EMPTY
85626: LIST
85627: LIST
85628: PUSH
85629: LD_INT 0
85631: PUSH
85632: LD_INT 3
85634: NEG
85635: PUSH
85636: EMPTY
85637: LIST
85638: LIST
85639: PUSH
85640: LD_INT 0
85642: PUSH
85643: LD_INT 4
85645: NEG
85646: PUSH
85647: EMPTY
85648: LIST
85649: LIST
85650: PUSH
85651: LD_INT 1
85653: PUSH
85654: LD_INT 3
85656: NEG
85657: PUSH
85658: EMPTY
85659: LIST
85660: LIST
85661: PUSH
85662: LD_INT 1
85664: PUSH
85665: LD_INT 2
85667: NEG
85668: PUSH
85669: EMPTY
85670: LIST
85671: LIST
85672: PUSH
85673: LD_INT 0
85675: PUSH
85676: LD_INT 2
85678: NEG
85679: PUSH
85680: EMPTY
85681: LIST
85682: LIST
85683: PUSH
85684: LD_INT 1
85686: NEG
85687: PUSH
85688: LD_INT 3
85690: NEG
85691: PUSH
85692: EMPTY
85693: LIST
85694: LIST
85695: PUSH
85696: LD_INT 1
85698: NEG
85699: PUSH
85700: LD_INT 4
85702: NEG
85703: PUSH
85704: EMPTY
85705: LIST
85706: LIST
85707: PUSH
85708: LD_INT 2
85710: PUSH
85711: LD_INT 2
85713: NEG
85714: PUSH
85715: EMPTY
85716: LIST
85717: LIST
85718: PUSH
85719: LD_INT 2
85721: NEG
85722: PUSH
85723: LD_INT 4
85725: NEG
85726: PUSH
85727: EMPTY
85728: LIST
85729: LIST
85730: PUSH
85731: LD_INT 4
85733: PUSH
85734: LD_INT 0
85736: PUSH
85737: EMPTY
85738: LIST
85739: LIST
85740: PUSH
85741: LD_INT 4
85743: PUSH
85744: LD_INT 1
85746: NEG
85747: PUSH
85748: EMPTY
85749: LIST
85750: LIST
85751: PUSH
85752: LD_INT 5
85754: PUSH
85755: LD_INT 0
85757: PUSH
85758: EMPTY
85759: LIST
85760: LIST
85761: PUSH
85762: LD_INT 5
85764: PUSH
85765: LD_INT 1
85767: PUSH
85768: EMPTY
85769: LIST
85770: LIST
85771: PUSH
85772: LD_INT 4
85774: PUSH
85775: LD_INT 1
85777: PUSH
85778: EMPTY
85779: LIST
85780: LIST
85781: PUSH
85782: LD_INT 3
85784: PUSH
85785: LD_INT 0
85787: PUSH
85788: EMPTY
85789: LIST
85790: LIST
85791: PUSH
85792: LD_INT 3
85794: PUSH
85795: LD_INT 1
85797: NEG
85798: PUSH
85799: EMPTY
85800: LIST
85801: LIST
85802: PUSH
85803: LD_INT 3
85805: PUSH
85806: LD_INT 2
85808: NEG
85809: PUSH
85810: EMPTY
85811: LIST
85812: LIST
85813: PUSH
85814: LD_INT 5
85816: PUSH
85817: LD_INT 2
85819: PUSH
85820: EMPTY
85821: LIST
85822: LIST
85823: PUSH
85824: LD_INT 3
85826: PUSH
85827: LD_INT 3
85829: PUSH
85830: EMPTY
85831: LIST
85832: LIST
85833: PUSH
85834: LD_INT 3
85836: PUSH
85837: LD_INT 2
85839: PUSH
85840: EMPTY
85841: LIST
85842: LIST
85843: PUSH
85844: LD_INT 4
85846: PUSH
85847: LD_INT 3
85849: PUSH
85850: EMPTY
85851: LIST
85852: LIST
85853: PUSH
85854: LD_INT 4
85856: PUSH
85857: LD_INT 4
85859: PUSH
85860: EMPTY
85861: LIST
85862: LIST
85863: PUSH
85864: LD_INT 3
85866: PUSH
85867: LD_INT 4
85869: PUSH
85870: EMPTY
85871: LIST
85872: LIST
85873: PUSH
85874: LD_INT 2
85876: PUSH
85877: LD_INT 3
85879: PUSH
85880: EMPTY
85881: LIST
85882: LIST
85883: PUSH
85884: LD_INT 2
85886: PUSH
85887: LD_INT 2
85889: PUSH
85890: EMPTY
85891: LIST
85892: LIST
85893: PUSH
85894: LD_INT 4
85896: PUSH
85897: LD_INT 2
85899: PUSH
85900: EMPTY
85901: LIST
85902: LIST
85903: PUSH
85904: LD_INT 2
85906: PUSH
85907: LD_INT 4
85909: PUSH
85910: EMPTY
85911: LIST
85912: LIST
85913: PUSH
85914: LD_INT 0
85916: PUSH
85917: LD_INT 4
85919: PUSH
85920: EMPTY
85921: LIST
85922: LIST
85923: PUSH
85924: LD_INT 0
85926: PUSH
85927: LD_INT 3
85929: PUSH
85930: EMPTY
85931: LIST
85932: LIST
85933: PUSH
85934: LD_INT 1
85936: PUSH
85937: LD_INT 4
85939: PUSH
85940: EMPTY
85941: LIST
85942: LIST
85943: PUSH
85944: LD_INT 1
85946: PUSH
85947: LD_INT 5
85949: PUSH
85950: EMPTY
85951: LIST
85952: LIST
85953: PUSH
85954: LD_INT 0
85956: PUSH
85957: LD_INT 5
85959: PUSH
85960: EMPTY
85961: LIST
85962: LIST
85963: PUSH
85964: LD_INT 1
85966: NEG
85967: PUSH
85968: LD_INT 4
85970: PUSH
85971: EMPTY
85972: LIST
85973: LIST
85974: PUSH
85975: LD_INT 1
85977: NEG
85978: PUSH
85979: LD_INT 3
85981: PUSH
85982: EMPTY
85983: LIST
85984: LIST
85985: PUSH
85986: LD_INT 2
85988: PUSH
85989: LD_INT 5
85991: PUSH
85992: EMPTY
85993: LIST
85994: LIST
85995: PUSH
85996: LD_INT 2
85998: NEG
85999: PUSH
86000: LD_INT 3
86002: PUSH
86003: EMPTY
86004: LIST
86005: LIST
86006: PUSH
86007: EMPTY
86008: LIST
86009: LIST
86010: LIST
86011: LIST
86012: LIST
86013: LIST
86014: LIST
86015: LIST
86016: LIST
86017: LIST
86018: LIST
86019: LIST
86020: LIST
86021: LIST
86022: LIST
86023: LIST
86024: LIST
86025: LIST
86026: LIST
86027: LIST
86028: LIST
86029: LIST
86030: LIST
86031: LIST
86032: LIST
86033: LIST
86034: LIST
86035: LIST
86036: LIST
86037: LIST
86038: LIST
86039: LIST
86040: LIST
86041: LIST
86042: LIST
86043: LIST
86044: LIST
86045: LIST
86046: LIST
86047: LIST
86048: LIST
86049: LIST
86050: LIST
86051: LIST
86052: LIST
86053: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
86054: LD_ADDR_VAR 0 34
86058: PUSH
86059: LD_INT 0
86061: PUSH
86062: LD_INT 4
86064: NEG
86065: PUSH
86066: EMPTY
86067: LIST
86068: LIST
86069: PUSH
86070: LD_INT 0
86072: PUSH
86073: LD_INT 5
86075: NEG
86076: PUSH
86077: EMPTY
86078: LIST
86079: LIST
86080: PUSH
86081: LD_INT 1
86083: PUSH
86084: LD_INT 4
86086: NEG
86087: PUSH
86088: EMPTY
86089: LIST
86090: LIST
86091: PUSH
86092: LD_INT 1
86094: PUSH
86095: LD_INT 3
86097: NEG
86098: PUSH
86099: EMPTY
86100: LIST
86101: LIST
86102: PUSH
86103: LD_INT 0
86105: PUSH
86106: LD_INT 3
86108: NEG
86109: PUSH
86110: EMPTY
86111: LIST
86112: LIST
86113: PUSH
86114: LD_INT 1
86116: NEG
86117: PUSH
86118: LD_INT 4
86120: NEG
86121: PUSH
86122: EMPTY
86123: LIST
86124: LIST
86125: PUSH
86126: LD_INT 1
86128: NEG
86129: PUSH
86130: LD_INT 5
86132: NEG
86133: PUSH
86134: EMPTY
86135: LIST
86136: LIST
86137: PUSH
86138: LD_INT 2
86140: PUSH
86141: LD_INT 3
86143: NEG
86144: PUSH
86145: EMPTY
86146: LIST
86147: LIST
86148: PUSH
86149: LD_INT 2
86151: NEG
86152: PUSH
86153: LD_INT 5
86155: NEG
86156: PUSH
86157: EMPTY
86158: LIST
86159: LIST
86160: PUSH
86161: LD_INT 3
86163: PUSH
86164: LD_INT 0
86166: PUSH
86167: EMPTY
86168: LIST
86169: LIST
86170: PUSH
86171: LD_INT 3
86173: PUSH
86174: LD_INT 1
86176: NEG
86177: PUSH
86178: EMPTY
86179: LIST
86180: LIST
86181: PUSH
86182: LD_INT 4
86184: PUSH
86185: LD_INT 0
86187: PUSH
86188: EMPTY
86189: LIST
86190: LIST
86191: PUSH
86192: LD_INT 4
86194: PUSH
86195: LD_INT 1
86197: PUSH
86198: EMPTY
86199: LIST
86200: LIST
86201: PUSH
86202: LD_INT 3
86204: PUSH
86205: LD_INT 1
86207: PUSH
86208: EMPTY
86209: LIST
86210: LIST
86211: PUSH
86212: LD_INT 2
86214: PUSH
86215: LD_INT 0
86217: PUSH
86218: EMPTY
86219: LIST
86220: LIST
86221: PUSH
86222: LD_INT 2
86224: PUSH
86225: LD_INT 1
86227: NEG
86228: PUSH
86229: EMPTY
86230: LIST
86231: LIST
86232: PUSH
86233: LD_INT 2
86235: PUSH
86236: LD_INT 2
86238: NEG
86239: PUSH
86240: EMPTY
86241: LIST
86242: LIST
86243: PUSH
86244: LD_INT 4
86246: PUSH
86247: LD_INT 2
86249: PUSH
86250: EMPTY
86251: LIST
86252: LIST
86253: PUSH
86254: LD_INT 4
86256: PUSH
86257: LD_INT 4
86259: PUSH
86260: EMPTY
86261: LIST
86262: LIST
86263: PUSH
86264: LD_INT 4
86266: PUSH
86267: LD_INT 3
86269: PUSH
86270: EMPTY
86271: LIST
86272: LIST
86273: PUSH
86274: LD_INT 5
86276: PUSH
86277: LD_INT 4
86279: PUSH
86280: EMPTY
86281: LIST
86282: LIST
86283: PUSH
86284: LD_INT 5
86286: PUSH
86287: LD_INT 5
86289: PUSH
86290: EMPTY
86291: LIST
86292: LIST
86293: PUSH
86294: LD_INT 4
86296: PUSH
86297: LD_INT 5
86299: PUSH
86300: EMPTY
86301: LIST
86302: LIST
86303: PUSH
86304: LD_INT 3
86306: PUSH
86307: LD_INT 4
86309: PUSH
86310: EMPTY
86311: LIST
86312: LIST
86313: PUSH
86314: LD_INT 3
86316: PUSH
86317: LD_INT 3
86319: PUSH
86320: EMPTY
86321: LIST
86322: LIST
86323: PUSH
86324: LD_INT 5
86326: PUSH
86327: LD_INT 3
86329: PUSH
86330: EMPTY
86331: LIST
86332: LIST
86333: PUSH
86334: LD_INT 3
86336: PUSH
86337: LD_INT 5
86339: PUSH
86340: EMPTY
86341: LIST
86342: LIST
86343: PUSH
86344: LD_INT 0
86346: PUSH
86347: LD_INT 3
86349: PUSH
86350: EMPTY
86351: LIST
86352: LIST
86353: PUSH
86354: LD_INT 0
86356: PUSH
86357: LD_INT 2
86359: PUSH
86360: EMPTY
86361: LIST
86362: LIST
86363: PUSH
86364: LD_INT 1
86366: PUSH
86367: LD_INT 3
86369: PUSH
86370: EMPTY
86371: LIST
86372: LIST
86373: PUSH
86374: LD_INT 1
86376: PUSH
86377: LD_INT 4
86379: PUSH
86380: EMPTY
86381: LIST
86382: LIST
86383: PUSH
86384: LD_INT 0
86386: PUSH
86387: LD_INT 4
86389: PUSH
86390: EMPTY
86391: LIST
86392: LIST
86393: PUSH
86394: LD_INT 1
86396: NEG
86397: PUSH
86398: LD_INT 3
86400: PUSH
86401: EMPTY
86402: LIST
86403: LIST
86404: PUSH
86405: LD_INT 1
86407: NEG
86408: PUSH
86409: LD_INT 2
86411: PUSH
86412: EMPTY
86413: LIST
86414: LIST
86415: PUSH
86416: LD_INT 2
86418: PUSH
86419: LD_INT 4
86421: PUSH
86422: EMPTY
86423: LIST
86424: LIST
86425: PUSH
86426: LD_INT 2
86428: NEG
86429: PUSH
86430: LD_INT 2
86432: PUSH
86433: EMPTY
86434: LIST
86435: LIST
86436: PUSH
86437: LD_INT 4
86439: NEG
86440: PUSH
86441: LD_INT 0
86443: PUSH
86444: EMPTY
86445: LIST
86446: LIST
86447: PUSH
86448: LD_INT 4
86450: NEG
86451: PUSH
86452: LD_INT 1
86454: NEG
86455: PUSH
86456: EMPTY
86457: LIST
86458: LIST
86459: PUSH
86460: LD_INT 3
86462: NEG
86463: PUSH
86464: LD_INT 0
86466: PUSH
86467: EMPTY
86468: LIST
86469: LIST
86470: PUSH
86471: LD_INT 3
86473: NEG
86474: PUSH
86475: LD_INT 1
86477: PUSH
86478: EMPTY
86479: LIST
86480: LIST
86481: PUSH
86482: LD_INT 4
86484: NEG
86485: PUSH
86486: LD_INT 1
86488: PUSH
86489: EMPTY
86490: LIST
86491: LIST
86492: PUSH
86493: LD_INT 5
86495: NEG
86496: PUSH
86497: LD_INT 0
86499: PUSH
86500: EMPTY
86501: LIST
86502: LIST
86503: PUSH
86504: LD_INT 5
86506: NEG
86507: PUSH
86508: LD_INT 1
86510: NEG
86511: PUSH
86512: EMPTY
86513: LIST
86514: LIST
86515: PUSH
86516: LD_INT 5
86518: NEG
86519: PUSH
86520: LD_INT 2
86522: NEG
86523: PUSH
86524: EMPTY
86525: LIST
86526: LIST
86527: PUSH
86528: LD_INT 3
86530: NEG
86531: PUSH
86532: LD_INT 2
86534: PUSH
86535: EMPTY
86536: LIST
86537: LIST
86538: PUSH
86539: EMPTY
86540: LIST
86541: LIST
86542: LIST
86543: LIST
86544: LIST
86545: LIST
86546: LIST
86547: LIST
86548: LIST
86549: LIST
86550: LIST
86551: LIST
86552: LIST
86553: LIST
86554: LIST
86555: LIST
86556: LIST
86557: LIST
86558: LIST
86559: LIST
86560: LIST
86561: LIST
86562: LIST
86563: LIST
86564: LIST
86565: LIST
86566: LIST
86567: LIST
86568: LIST
86569: LIST
86570: LIST
86571: LIST
86572: LIST
86573: LIST
86574: LIST
86575: LIST
86576: LIST
86577: LIST
86578: LIST
86579: LIST
86580: LIST
86581: LIST
86582: LIST
86583: LIST
86584: LIST
86585: ST_TO_ADDR
// end ; end ;
86586: GO 86589
86588: POP
// case btype of b_depot , b_warehouse :
86589: LD_VAR 0 1
86593: PUSH
86594: LD_INT 0
86596: DOUBLE
86597: EQUAL
86598: IFTRUE 86608
86600: LD_INT 1
86602: DOUBLE
86603: EQUAL
86604: IFTRUE 86608
86606: GO 86809
86608: POP
// case nation of nation_american :
86609: LD_VAR 0 5
86613: PUSH
86614: LD_INT 1
86616: DOUBLE
86617: EQUAL
86618: IFTRUE 86622
86620: GO 86678
86622: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
86623: LD_ADDR_VAR 0 9
86627: PUSH
86628: LD_VAR 0 11
86632: PUSH
86633: LD_VAR 0 12
86637: PUSH
86638: LD_VAR 0 13
86642: PUSH
86643: LD_VAR 0 14
86647: PUSH
86648: LD_VAR 0 15
86652: PUSH
86653: LD_VAR 0 16
86657: PUSH
86658: EMPTY
86659: LIST
86660: LIST
86661: LIST
86662: LIST
86663: LIST
86664: LIST
86665: PUSH
86666: LD_VAR 0 4
86670: PUSH
86671: LD_INT 1
86673: PLUS
86674: ARRAY
86675: ST_TO_ADDR
86676: GO 86807
86678: LD_INT 2
86680: DOUBLE
86681: EQUAL
86682: IFTRUE 86686
86684: GO 86742
86686: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
86687: LD_ADDR_VAR 0 9
86691: PUSH
86692: LD_VAR 0 17
86696: PUSH
86697: LD_VAR 0 18
86701: PUSH
86702: LD_VAR 0 19
86706: PUSH
86707: LD_VAR 0 20
86711: PUSH
86712: LD_VAR 0 21
86716: PUSH
86717: LD_VAR 0 22
86721: PUSH
86722: EMPTY
86723: LIST
86724: LIST
86725: LIST
86726: LIST
86727: LIST
86728: LIST
86729: PUSH
86730: LD_VAR 0 4
86734: PUSH
86735: LD_INT 1
86737: PLUS
86738: ARRAY
86739: ST_TO_ADDR
86740: GO 86807
86742: LD_INT 3
86744: DOUBLE
86745: EQUAL
86746: IFTRUE 86750
86748: GO 86806
86750: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
86751: LD_ADDR_VAR 0 9
86755: PUSH
86756: LD_VAR 0 23
86760: PUSH
86761: LD_VAR 0 24
86765: PUSH
86766: LD_VAR 0 25
86770: PUSH
86771: LD_VAR 0 26
86775: PUSH
86776: LD_VAR 0 27
86780: PUSH
86781: LD_VAR 0 28
86785: PUSH
86786: EMPTY
86787: LIST
86788: LIST
86789: LIST
86790: LIST
86791: LIST
86792: LIST
86793: PUSH
86794: LD_VAR 0 4
86798: PUSH
86799: LD_INT 1
86801: PLUS
86802: ARRAY
86803: ST_TO_ADDR
86804: GO 86807
86806: POP
86807: GO 87362
86809: LD_INT 2
86811: DOUBLE
86812: EQUAL
86813: IFTRUE 86823
86815: LD_INT 3
86817: DOUBLE
86818: EQUAL
86819: IFTRUE 86823
86821: GO 86879
86823: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
86824: LD_ADDR_VAR 0 9
86828: PUSH
86829: LD_VAR 0 29
86833: PUSH
86834: LD_VAR 0 30
86838: PUSH
86839: LD_VAR 0 31
86843: PUSH
86844: LD_VAR 0 32
86848: PUSH
86849: LD_VAR 0 33
86853: PUSH
86854: LD_VAR 0 34
86858: PUSH
86859: EMPTY
86860: LIST
86861: LIST
86862: LIST
86863: LIST
86864: LIST
86865: LIST
86866: PUSH
86867: LD_VAR 0 4
86871: PUSH
86872: LD_INT 1
86874: PLUS
86875: ARRAY
86876: ST_TO_ADDR
86877: GO 87362
86879: LD_INT 16
86881: DOUBLE
86882: EQUAL
86883: IFTRUE 86941
86885: LD_INT 17
86887: DOUBLE
86888: EQUAL
86889: IFTRUE 86941
86891: LD_INT 18
86893: DOUBLE
86894: EQUAL
86895: IFTRUE 86941
86897: LD_INT 19
86899: DOUBLE
86900: EQUAL
86901: IFTRUE 86941
86903: LD_INT 22
86905: DOUBLE
86906: EQUAL
86907: IFTRUE 86941
86909: LD_INT 20
86911: DOUBLE
86912: EQUAL
86913: IFTRUE 86941
86915: LD_INT 21
86917: DOUBLE
86918: EQUAL
86919: IFTRUE 86941
86921: LD_INT 23
86923: DOUBLE
86924: EQUAL
86925: IFTRUE 86941
86927: LD_INT 24
86929: DOUBLE
86930: EQUAL
86931: IFTRUE 86941
86933: LD_INT 25
86935: DOUBLE
86936: EQUAL
86937: IFTRUE 86941
86939: GO 86997
86941: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
86942: LD_ADDR_VAR 0 9
86946: PUSH
86947: LD_VAR 0 35
86951: PUSH
86952: LD_VAR 0 36
86956: PUSH
86957: LD_VAR 0 37
86961: PUSH
86962: LD_VAR 0 38
86966: PUSH
86967: LD_VAR 0 39
86971: PUSH
86972: LD_VAR 0 40
86976: PUSH
86977: EMPTY
86978: LIST
86979: LIST
86980: LIST
86981: LIST
86982: LIST
86983: LIST
86984: PUSH
86985: LD_VAR 0 4
86989: PUSH
86990: LD_INT 1
86992: PLUS
86993: ARRAY
86994: ST_TO_ADDR
86995: GO 87362
86997: LD_INT 6
86999: DOUBLE
87000: EQUAL
87001: IFTRUE 87053
87003: LD_INT 7
87005: DOUBLE
87006: EQUAL
87007: IFTRUE 87053
87009: LD_INT 8
87011: DOUBLE
87012: EQUAL
87013: IFTRUE 87053
87015: LD_INT 13
87017: DOUBLE
87018: EQUAL
87019: IFTRUE 87053
87021: LD_INT 12
87023: DOUBLE
87024: EQUAL
87025: IFTRUE 87053
87027: LD_INT 15
87029: DOUBLE
87030: EQUAL
87031: IFTRUE 87053
87033: LD_INT 11
87035: DOUBLE
87036: EQUAL
87037: IFTRUE 87053
87039: LD_INT 14
87041: DOUBLE
87042: EQUAL
87043: IFTRUE 87053
87045: LD_INT 10
87047: DOUBLE
87048: EQUAL
87049: IFTRUE 87053
87051: GO 87109
87053: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
87054: LD_ADDR_VAR 0 9
87058: PUSH
87059: LD_VAR 0 41
87063: PUSH
87064: LD_VAR 0 42
87068: PUSH
87069: LD_VAR 0 43
87073: PUSH
87074: LD_VAR 0 44
87078: PUSH
87079: LD_VAR 0 45
87083: PUSH
87084: LD_VAR 0 46
87088: PUSH
87089: EMPTY
87090: LIST
87091: LIST
87092: LIST
87093: LIST
87094: LIST
87095: LIST
87096: PUSH
87097: LD_VAR 0 4
87101: PUSH
87102: LD_INT 1
87104: PLUS
87105: ARRAY
87106: ST_TO_ADDR
87107: GO 87362
87109: LD_INT 36
87111: DOUBLE
87112: EQUAL
87113: IFTRUE 87117
87115: GO 87173
87117: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
87118: LD_ADDR_VAR 0 9
87122: PUSH
87123: LD_VAR 0 47
87127: PUSH
87128: LD_VAR 0 48
87132: PUSH
87133: LD_VAR 0 49
87137: PUSH
87138: LD_VAR 0 50
87142: PUSH
87143: LD_VAR 0 51
87147: PUSH
87148: LD_VAR 0 52
87152: PUSH
87153: EMPTY
87154: LIST
87155: LIST
87156: LIST
87157: LIST
87158: LIST
87159: LIST
87160: PUSH
87161: LD_VAR 0 4
87165: PUSH
87166: LD_INT 1
87168: PLUS
87169: ARRAY
87170: ST_TO_ADDR
87171: GO 87362
87173: LD_INT 4
87175: DOUBLE
87176: EQUAL
87177: IFTRUE 87199
87179: LD_INT 5
87181: DOUBLE
87182: EQUAL
87183: IFTRUE 87199
87185: LD_INT 34
87187: DOUBLE
87188: EQUAL
87189: IFTRUE 87199
87191: LD_INT 37
87193: DOUBLE
87194: EQUAL
87195: IFTRUE 87199
87197: GO 87255
87199: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
87200: LD_ADDR_VAR 0 9
87204: PUSH
87205: LD_VAR 0 53
87209: PUSH
87210: LD_VAR 0 54
87214: PUSH
87215: LD_VAR 0 55
87219: PUSH
87220: LD_VAR 0 56
87224: PUSH
87225: LD_VAR 0 57
87229: PUSH
87230: LD_VAR 0 58
87234: PUSH
87235: EMPTY
87236: LIST
87237: LIST
87238: LIST
87239: LIST
87240: LIST
87241: LIST
87242: PUSH
87243: LD_VAR 0 4
87247: PUSH
87248: LD_INT 1
87250: PLUS
87251: ARRAY
87252: ST_TO_ADDR
87253: GO 87362
87255: LD_INT 31
87257: DOUBLE
87258: EQUAL
87259: IFTRUE 87305
87261: LD_INT 32
87263: DOUBLE
87264: EQUAL
87265: IFTRUE 87305
87267: LD_INT 33
87269: DOUBLE
87270: EQUAL
87271: IFTRUE 87305
87273: LD_INT 27
87275: DOUBLE
87276: EQUAL
87277: IFTRUE 87305
87279: LD_INT 26
87281: DOUBLE
87282: EQUAL
87283: IFTRUE 87305
87285: LD_INT 28
87287: DOUBLE
87288: EQUAL
87289: IFTRUE 87305
87291: LD_INT 29
87293: DOUBLE
87294: EQUAL
87295: IFTRUE 87305
87297: LD_INT 30
87299: DOUBLE
87300: EQUAL
87301: IFTRUE 87305
87303: GO 87361
87305: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
87306: LD_ADDR_VAR 0 9
87310: PUSH
87311: LD_VAR 0 59
87315: PUSH
87316: LD_VAR 0 60
87320: PUSH
87321: LD_VAR 0 61
87325: PUSH
87326: LD_VAR 0 62
87330: PUSH
87331: LD_VAR 0 63
87335: PUSH
87336: LD_VAR 0 64
87340: PUSH
87341: EMPTY
87342: LIST
87343: LIST
87344: LIST
87345: LIST
87346: LIST
87347: LIST
87348: PUSH
87349: LD_VAR 0 4
87353: PUSH
87354: LD_INT 1
87356: PLUS
87357: ARRAY
87358: ST_TO_ADDR
87359: GO 87362
87361: POP
// temp_list2 = [ ] ;
87362: LD_ADDR_VAR 0 10
87366: PUSH
87367: EMPTY
87368: ST_TO_ADDR
// for i in temp_list do
87369: LD_ADDR_VAR 0 8
87373: PUSH
87374: LD_VAR 0 9
87378: PUSH
87379: FOR_IN
87380: IFFALSE 87432
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
87382: LD_ADDR_VAR 0 10
87386: PUSH
87387: LD_VAR 0 10
87391: PUSH
87392: LD_VAR 0 8
87396: PUSH
87397: LD_INT 1
87399: ARRAY
87400: PUSH
87401: LD_VAR 0 2
87405: PLUS
87406: PUSH
87407: LD_VAR 0 8
87411: PUSH
87412: LD_INT 2
87414: ARRAY
87415: PUSH
87416: LD_VAR 0 3
87420: PLUS
87421: PUSH
87422: EMPTY
87423: LIST
87424: LIST
87425: PUSH
87426: EMPTY
87427: LIST
87428: ADD
87429: ST_TO_ADDR
87430: GO 87379
87432: POP
87433: POP
// result = temp_list2 ;
87434: LD_ADDR_VAR 0 7
87438: PUSH
87439: LD_VAR 0 10
87443: ST_TO_ADDR
// end ;
87444: LD_VAR 0 7
87448: RET
// export function EnemyInRange ( unit , dist ) ; begin
87449: LD_INT 0
87451: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
87452: LD_ADDR_VAR 0 3
87456: PUSH
87457: LD_VAR 0 1
87461: PPUSH
87462: CALL_OW 255
87466: PPUSH
87467: LD_VAR 0 1
87471: PPUSH
87472: CALL_OW 250
87476: PPUSH
87477: LD_VAR 0 1
87481: PPUSH
87482: CALL_OW 251
87486: PPUSH
87487: LD_VAR 0 2
87491: PPUSH
87492: CALL 60822 0 4
87496: PUSH
87497: LD_INT 4
87499: ARRAY
87500: ST_TO_ADDR
// end ;
87501: LD_VAR 0 3
87505: RET
// export function PlayerSeeMe ( unit ) ; begin
87506: LD_INT 0
87508: PPUSH
// result := See ( your_side , unit ) ;
87509: LD_ADDR_VAR 0 2
87513: PUSH
87514: LD_OWVAR 2
87518: PPUSH
87519: LD_VAR 0 1
87523: PPUSH
87524: CALL_OW 292
87528: ST_TO_ADDR
// end ;
87529: LD_VAR 0 2
87533: RET
// export function ReverseDir ( unit ) ; begin
87534: LD_INT 0
87536: PPUSH
// if not unit then
87537: LD_VAR 0 1
87541: NOT
87542: IFFALSE 87546
// exit ;
87544: GO 87569
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
87546: LD_ADDR_VAR 0 2
87550: PUSH
87551: LD_VAR 0 1
87555: PPUSH
87556: CALL_OW 254
87560: PUSH
87561: LD_INT 3
87563: PLUS
87564: PUSH
87565: LD_INT 6
87567: MOD
87568: ST_TO_ADDR
// end ;
87569: LD_VAR 0 2
87573: RET
// export function ReverseArray ( array ) ; var i ; begin
87574: LD_INT 0
87576: PPUSH
87577: PPUSH
// if not array then
87578: LD_VAR 0 1
87582: NOT
87583: IFFALSE 87587
// exit ;
87585: GO 87642
// result := [ ] ;
87587: LD_ADDR_VAR 0 2
87591: PUSH
87592: EMPTY
87593: ST_TO_ADDR
// for i := array downto 1 do
87594: LD_ADDR_VAR 0 3
87598: PUSH
87599: DOUBLE
87600: LD_VAR 0 1
87604: INC
87605: ST_TO_ADDR
87606: LD_INT 1
87608: PUSH
87609: FOR_DOWNTO
87610: IFFALSE 87640
// result := Join ( result , array [ i ] ) ;
87612: LD_ADDR_VAR 0 2
87616: PUSH
87617: LD_VAR 0 2
87621: PPUSH
87622: LD_VAR 0 1
87626: PUSH
87627: LD_VAR 0 3
87631: ARRAY
87632: PPUSH
87633: CALL 92287 0 2
87637: ST_TO_ADDR
87638: GO 87609
87640: POP
87641: POP
// end ;
87642: LD_VAR 0 2
87646: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
87647: LD_INT 0
87649: PPUSH
87650: PPUSH
87651: PPUSH
87652: PPUSH
87653: PPUSH
87654: PPUSH
// if not unit or not hexes then
87655: LD_VAR 0 1
87659: NOT
87660: PUSH
87661: LD_VAR 0 2
87665: NOT
87666: OR
87667: IFFALSE 87671
// exit ;
87669: GO 87794
// dist := 9999 ;
87671: LD_ADDR_VAR 0 5
87675: PUSH
87676: LD_INT 9999
87678: ST_TO_ADDR
// for i = 1 to hexes do
87679: LD_ADDR_VAR 0 4
87683: PUSH
87684: DOUBLE
87685: LD_INT 1
87687: DEC
87688: ST_TO_ADDR
87689: LD_VAR 0 2
87693: PUSH
87694: FOR_TO
87695: IFFALSE 87782
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
87697: LD_ADDR_VAR 0 6
87701: PUSH
87702: LD_VAR 0 1
87706: PPUSH
87707: LD_VAR 0 2
87711: PUSH
87712: LD_VAR 0 4
87716: ARRAY
87717: PUSH
87718: LD_INT 1
87720: ARRAY
87721: PPUSH
87722: LD_VAR 0 2
87726: PUSH
87727: LD_VAR 0 4
87731: ARRAY
87732: PUSH
87733: LD_INT 2
87735: ARRAY
87736: PPUSH
87737: CALL_OW 297
87741: ST_TO_ADDR
// if tdist < dist then
87742: LD_VAR 0 6
87746: PUSH
87747: LD_VAR 0 5
87751: LESS
87752: IFFALSE 87780
// begin hex := hexes [ i ] ;
87754: LD_ADDR_VAR 0 8
87758: PUSH
87759: LD_VAR 0 2
87763: PUSH
87764: LD_VAR 0 4
87768: ARRAY
87769: ST_TO_ADDR
// dist := tdist ;
87770: LD_ADDR_VAR 0 5
87774: PUSH
87775: LD_VAR 0 6
87779: ST_TO_ADDR
// end ; end ;
87780: GO 87694
87782: POP
87783: POP
// result := hex ;
87784: LD_ADDR_VAR 0 3
87788: PUSH
87789: LD_VAR 0 8
87793: ST_TO_ADDR
// end ;
87794: LD_VAR 0 3
87798: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
87799: LD_INT 0
87801: PPUSH
87802: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
87803: LD_VAR 0 1
87807: NOT
87808: PUSH
87809: LD_VAR 0 1
87813: PUSH
87814: LD_INT 21
87816: PUSH
87817: LD_INT 2
87819: PUSH
87820: EMPTY
87821: LIST
87822: LIST
87823: PUSH
87824: LD_INT 23
87826: PUSH
87827: LD_INT 2
87829: PUSH
87830: EMPTY
87831: LIST
87832: LIST
87833: PUSH
87834: EMPTY
87835: LIST
87836: LIST
87837: PPUSH
87838: CALL_OW 69
87842: IN
87843: NOT
87844: OR
87845: IFFALSE 87849
// exit ;
87847: GO 87896
// for i = 1 to 3 do
87849: LD_ADDR_VAR 0 3
87853: PUSH
87854: DOUBLE
87855: LD_INT 1
87857: DEC
87858: ST_TO_ADDR
87859: LD_INT 3
87861: PUSH
87862: FOR_TO
87863: IFFALSE 87894
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
87865: LD_VAR 0 1
87869: PPUSH
87870: CALL_OW 250
87874: PPUSH
87875: LD_VAR 0 1
87879: PPUSH
87880: CALL_OW 251
87884: PPUSH
87885: LD_INT 1
87887: PPUSH
87888: CALL_OW 453
87892: GO 87862
87894: POP
87895: POP
// end ;
87896: LD_VAR 0 2
87900: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
87901: LD_INT 0
87903: PPUSH
87904: PPUSH
87905: PPUSH
87906: PPUSH
87907: PPUSH
87908: PPUSH
// if not unit or not enemy_unit then
87909: LD_VAR 0 1
87913: NOT
87914: PUSH
87915: LD_VAR 0 2
87919: NOT
87920: OR
87921: IFFALSE 87925
// exit ;
87923: GO 88392
// if GetLives ( i ) < 250 then
87925: LD_VAR 0 4
87929: PPUSH
87930: CALL_OW 256
87934: PUSH
87935: LD_INT 250
87937: LESS
87938: IFFALSE 87951
// begin ComAutodestruct ( i ) ;
87940: LD_VAR 0 4
87944: PPUSH
87945: CALL 87799 0 1
// exit ;
87949: GO 88392
// end ; x := GetX ( enemy_unit ) ;
87951: LD_ADDR_VAR 0 7
87955: PUSH
87956: LD_VAR 0 2
87960: PPUSH
87961: CALL_OW 250
87965: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
87966: LD_ADDR_VAR 0 8
87970: PUSH
87971: LD_VAR 0 2
87975: PPUSH
87976: CALL_OW 251
87980: ST_TO_ADDR
// if not x or not y then
87981: LD_VAR 0 7
87985: NOT
87986: PUSH
87987: LD_VAR 0 8
87991: NOT
87992: OR
87993: IFFALSE 87997
// exit ;
87995: GO 88392
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
87997: LD_ADDR_VAR 0 6
88001: PUSH
88002: LD_VAR 0 7
88006: PPUSH
88007: LD_INT 0
88009: PPUSH
88010: LD_INT 4
88012: PPUSH
88013: CALL_OW 272
88017: PUSH
88018: LD_VAR 0 8
88022: PPUSH
88023: LD_INT 0
88025: PPUSH
88026: LD_INT 4
88028: PPUSH
88029: CALL_OW 273
88033: PUSH
88034: EMPTY
88035: LIST
88036: LIST
88037: PUSH
88038: LD_VAR 0 7
88042: PPUSH
88043: LD_INT 1
88045: PPUSH
88046: LD_INT 4
88048: PPUSH
88049: CALL_OW 272
88053: PUSH
88054: LD_VAR 0 8
88058: PPUSH
88059: LD_INT 1
88061: PPUSH
88062: LD_INT 4
88064: PPUSH
88065: CALL_OW 273
88069: PUSH
88070: EMPTY
88071: LIST
88072: LIST
88073: PUSH
88074: LD_VAR 0 7
88078: PPUSH
88079: LD_INT 2
88081: PPUSH
88082: LD_INT 4
88084: PPUSH
88085: CALL_OW 272
88089: PUSH
88090: LD_VAR 0 8
88094: PPUSH
88095: LD_INT 2
88097: PPUSH
88098: LD_INT 4
88100: PPUSH
88101: CALL_OW 273
88105: PUSH
88106: EMPTY
88107: LIST
88108: LIST
88109: PUSH
88110: LD_VAR 0 7
88114: PPUSH
88115: LD_INT 3
88117: PPUSH
88118: LD_INT 4
88120: PPUSH
88121: CALL_OW 272
88125: PUSH
88126: LD_VAR 0 8
88130: PPUSH
88131: LD_INT 3
88133: PPUSH
88134: LD_INT 4
88136: PPUSH
88137: CALL_OW 273
88141: PUSH
88142: EMPTY
88143: LIST
88144: LIST
88145: PUSH
88146: LD_VAR 0 7
88150: PPUSH
88151: LD_INT 4
88153: PPUSH
88154: LD_INT 4
88156: PPUSH
88157: CALL_OW 272
88161: PUSH
88162: LD_VAR 0 8
88166: PPUSH
88167: LD_INT 4
88169: PPUSH
88170: LD_INT 4
88172: PPUSH
88173: CALL_OW 273
88177: PUSH
88178: EMPTY
88179: LIST
88180: LIST
88181: PUSH
88182: LD_VAR 0 7
88186: PPUSH
88187: LD_INT 5
88189: PPUSH
88190: LD_INT 4
88192: PPUSH
88193: CALL_OW 272
88197: PUSH
88198: LD_VAR 0 8
88202: PPUSH
88203: LD_INT 5
88205: PPUSH
88206: LD_INT 4
88208: PPUSH
88209: CALL_OW 273
88213: PUSH
88214: EMPTY
88215: LIST
88216: LIST
88217: PUSH
88218: EMPTY
88219: LIST
88220: LIST
88221: LIST
88222: LIST
88223: LIST
88224: LIST
88225: ST_TO_ADDR
// for i = tmp downto 1 do
88226: LD_ADDR_VAR 0 4
88230: PUSH
88231: DOUBLE
88232: LD_VAR 0 6
88236: INC
88237: ST_TO_ADDR
88238: LD_INT 1
88240: PUSH
88241: FOR_DOWNTO
88242: IFFALSE 88343
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
88244: LD_VAR 0 6
88248: PUSH
88249: LD_VAR 0 4
88253: ARRAY
88254: PUSH
88255: LD_INT 1
88257: ARRAY
88258: PPUSH
88259: LD_VAR 0 6
88263: PUSH
88264: LD_VAR 0 4
88268: ARRAY
88269: PUSH
88270: LD_INT 2
88272: ARRAY
88273: PPUSH
88274: CALL_OW 488
88278: NOT
88279: PUSH
88280: LD_VAR 0 6
88284: PUSH
88285: LD_VAR 0 4
88289: ARRAY
88290: PUSH
88291: LD_INT 1
88293: ARRAY
88294: PPUSH
88295: LD_VAR 0 6
88299: PUSH
88300: LD_VAR 0 4
88304: ARRAY
88305: PUSH
88306: LD_INT 2
88308: ARRAY
88309: PPUSH
88310: CALL_OW 428
88314: PUSH
88315: LD_INT 0
88317: NONEQUAL
88318: OR
88319: IFFALSE 88341
// tmp := Delete ( tmp , i ) ;
88321: LD_ADDR_VAR 0 6
88325: PUSH
88326: LD_VAR 0 6
88330: PPUSH
88331: LD_VAR 0 4
88335: PPUSH
88336: CALL_OW 3
88340: ST_TO_ADDR
88341: GO 88241
88343: POP
88344: POP
// j := GetClosestHex ( unit , tmp ) ;
88345: LD_ADDR_VAR 0 5
88349: PUSH
88350: LD_VAR 0 1
88354: PPUSH
88355: LD_VAR 0 6
88359: PPUSH
88360: CALL 87647 0 2
88364: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
88365: LD_VAR 0 1
88369: PPUSH
88370: LD_VAR 0 5
88374: PUSH
88375: LD_INT 1
88377: ARRAY
88378: PPUSH
88379: LD_VAR 0 5
88383: PUSH
88384: LD_INT 2
88386: ARRAY
88387: PPUSH
88388: CALL_OW 111
// end ;
88392: LD_VAR 0 3
88396: RET
// export function PrepareApemanSoldier ( ) ; begin
88397: LD_INT 0
88399: PPUSH
// uc_nation := 0 ;
88400: LD_ADDR_OWVAR 21
88404: PUSH
88405: LD_INT 0
88407: ST_TO_ADDR
// hc_sex := sex_male ;
88408: LD_ADDR_OWVAR 27
88412: PUSH
88413: LD_INT 1
88415: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
88416: LD_ADDR_OWVAR 28
88420: PUSH
88421: LD_INT 15
88423: ST_TO_ADDR
// hc_gallery :=  ;
88424: LD_ADDR_OWVAR 33
88428: PUSH
88429: LD_STRING 
88431: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88432: LD_ADDR_OWVAR 31
88436: PUSH
88437: LD_INT 0
88439: PPUSH
88440: LD_INT 3
88442: PPUSH
88443: CALL_OW 12
88447: PUSH
88448: LD_INT 0
88450: PPUSH
88451: LD_INT 3
88453: PPUSH
88454: CALL_OW 12
88458: PUSH
88459: LD_INT 0
88461: PUSH
88462: LD_INT 0
88464: PUSH
88465: EMPTY
88466: LIST
88467: LIST
88468: LIST
88469: LIST
88470: ST_TO_ADDR
// end ;
88471: LD_VAR 0 1
88475: RET
// export function PrepareApemanEngineer ( ) ; begin
88476: LD_INT 0
88478: PPUSH
// uc_nation := 0 ;
88479: LD_ADDR_OWVAR 21
88483: PUSH
88484: LD_INT 0
88486: ST_TO_ADDR
// hc_sex := sex_male ;
88487: LD_ADDR_OWVAR 27
88491: PUSH
88492: LD_INT 1
88494: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
88495: LD_ADDR_OWVAR 28
88499: PUSH
88500: LD_INT 16
88502: ST_TO_ADDR
// hc_gallery :=  ;
88503: LD_ADDR_OWVAR 33
88507: PUSH
88508: LD_STRING 
88510: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88511: LD_ADDR_OWVAR 31
88515: PUSH
88516: LD_INT 0
88518: PPUSH
88519: LD_INT 3
88521: PPUSH
88522: CALL_OW 12
88526: PUSH
88527: LD_INT 0
88529: PPUSH
88530: LD_INT 3
88532: PPUSH
88533: CALL_OW 12
88537: PUSH
88538: LD_INT 0
88540: PUSH
88541: LD_INT 0
88543: PUSH
88544: EMPTY
88545: LIST
88546: LIST
88547: LIST
88548: LIST
88549: ST_TO_ADDR
// end ;
88550: LD_VAR 0 1
88554: RET
// export function PrepareApeman ( agressivity ) ; begin
88555: LD_INT 0
88557: PPUSH
// uc_side := 0 ;
88558: LD_ADDR_OWVAR 20
88562: PUSH
88563: LD_INT 0
88565: ST_TO_ADDR
// uc_nation := 0 ;
88566: LD_ADDR_OWVAR 21
88570: PUSH
88571: LD_INT 0
88573: ST_TO_ADDR
// hc_sex := sex_male ;
88574: LD_ADDR_OWVAR 27
88578: PUSH
88579: LD_INT 1
88581: ST_TO_ADDR
// hc_class := class_apeman ;
88582: LD_ADDR_OWVAR 28
88586: PUSH
88587: LD_INT 12
88589: ST_TO_ADDR
// hc_gallery :=  ;
88590: LD_ADDR_OWVAR 33
88594: PUSH
88595: LD_STRING 
88597: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
88598: LD_ADDR_OWVAR 35
88602: PUSH
88603: LD_VAR 0 1
88607: NEG
88608: PPUSH
88609: LD_VAR 0 1
88613: PPUSH
88614: CALL_OW 12
88618: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88619: LD_ADDR_OWVAR 31
88623: PUSH
88624: LD_INT 0
88626: PPUSH
88627: LD_INT 3
88629: PPUSH
88630: CALL_OW 12
88634: PUSH
88635: LD_INT 0
88637: PPUSH
88638: LD_INT 3
88640: PPUSH
88641: CALL_OW 12
88645: PUSH
88646: LD_INT 0
88648: PUSH
88649: LD_INT 0
88651: PUSH
88652: EMPTY
88653: LIST
88654: LIST
88655: LIST
88656: LIST
88657: ST_TO_ADDR
// end ;
88658: LD_VAR 0 2
88662: RET
// export function PrepareTiger ( agressivity ) ; begin
88663: LD_INT 0
88665: PPUSH
// uc_side := 0 ;
88666: LD_ADDR_OWVAR 20
88670: PUSH
88671: LD_INT 0
88673: ST_TO_ADDR
// uc_nation := 0 ;
88674: LD_ADDR_OWVAR 21
88678: PUSH
88679: LD_INT 0
88681: ST_TO_ADDR
// hc_class := class_tiger ;
88682: LD_ADDR_OWVAR 28
88686: PUSH
88687: LD_INT 14
88689: ST_TO_ADDR
// hc_gallery :=  ;
88690: LD_ADDR_OWVAR 33
88694: PUSH
88695: LD_STRING 
88697: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
88698: LD_ADDR_OWVAR 35
88702: PUSH
88703: LD_VAR 0 1
88707: NEG
88708: PPUSH
88709: LD_VAR 0 1
88713: PPUSH
88714: CALL_OW 12
88718: ST_TO_ADDR
// end ;
88719: LD_VAR 0 2
88723: RET
// export function PrepareEnchidna ( ) ; begin
88724: LD_INT 0
88726: PPUSH
// uc_side := 0 ;
88727: LD_ADDR_OWVAR 20
88731: PUSH
88732: LD_INT 0
88734: ST_TO_ADDR
// uc_nation := 0 ;
88735: LD_ADDR_OWVAR 21
88739: PUSH
88740: LD_INT 0
88742: ST_TO_ADDR
// hc_class := class_baggie ;
88743: LD_ADDR_OWVAR 28
88747: PUSH
88748: LD_INT 13
88750: ST_TO_ADDR
// hc_gallery :=  ;
88751: LD_ADDR_OWVAR 33
88755: PUSH
88756: LD_STRING 
88758: ST_TO_ADDR
// end ;
88759: LD_VAR 0 1
88763: RET
// export function PrepareFrog ( ) ; begin
88764: LD_INT 0
88766: PPUSH
// uc_side := 0 ;
88767: LD_ADDR_OWVAR 20
88771: PUSH
88772: LD_INT 0
88774: ST_TO_ADDR
// uc_nation := 0 ;
88775: LD_ADDR_OWVAR 21
88779: PUSH
88780: LD_INT 0
88782: ST_TO_ADDR
// hc_class := class_frog ;
88783: LD_ADDR_OWVAR 28
88787: PUSH
88788: LD_INT 19
88790: ST_TO_ADDR
// hc_gallery :=  ;
88791: LD_ADDR_OWVAR 33
88795: PUSH
88796: LD_STRING 
88798: ST_TO_ADDR
// end ;
88799: LD_VAR 0 1
88803: RET
// export function PrepareFish ( ) ; begin
88804: LD_INT 0
88806: PPUSH
// uc_side := 0 ;
88807: LD_ADDR_OWVAR 20
88811: PUSH
88812: LD_INT 0
88814: ST_TO_ADDR
// uc_nation := 0 ;
88815: LD_ADDR_OWVAR 21
88819: PUSH
88820: LD_INT 0
88822: ST_TO_ADDR
// hc_class := class_fish ;
88823: LD_ADDR_OWVAR 28
88827: PUSH
88828: LD_INT 20
88830: ST_TO_ADDR
// hc_gallery :=  ;
88831: LD_ADDR_OWVAR 33
88835: PUSH
88836: LD_STRING 
88838: ST_TO_ADDR
// end ;
88839: LD_VAR 0 1
88843: RET
// export function PrepareBird ( ) ; begin
88844: LD_INT 0
88846: PPUSH
// uc_side := 0 ;
88847: LD_ADDR_OWVAR 20
88851: PUSH
88852: LD_INT 0
88854: ST_TO_ADDR
// uc_nation := 0 ;
88855: LD_ADDR_OWVAR 21
88859: PUSH
88860: LD_INT 0
88862: ST_TO_ADDR
// hc_class := class_phororhacos ;
88863: LD_ADDR_OWVAR 28
88867: PUSH
88868: LD_INT 18
88870: ST_TO_ADDR
// hc_gallery :=  ;
88871: LD_ADDR_OWVAR 33
88875: PUSH
88876: LD_STRING 
88878: ST_TO_ADDR
// end ;
88879: LD_VAR 0 1
88883: RET
// export function PrepareHorse ( ) ; begin
88884: LD_INT 0
88886: PPUSH
// uc_side := 0 ;
88887: LD_ADDR_OWVAR 20
88891: PUSH
88892: LD_INT 0
88894: ST_TO_ADDR
// uc_nation := 0 ;
88895: LD_ADDR_OWVAR 21
88899: PUSH
88900: LD_INT 0
88902: ST_TO_ADDR
// hc_class := class_horse ;
88903: LD_ADDR_OWVAR 28
88907: PUSH
88908: LD_INT 21
88910: ST_TO_ADDR
// hc_gallery :=  ;
88911: LD_ADDR_OWVAR 33
88915: PUSH
88916: LD_STRING 
88918: ST_TO_ADDR
// end ;
88919: LD_VAR 0 1
88923: RET
// export function PrepareMastodont ( ) ; begin
88924: LD_INT 0
88926: PPUSH
// uc_side := 0 ;
88927: LD_ADDR_OWVAR 20
88931: PUSH
88932: LD_INT 0
88934: ST_TO_ADDR
// uc_nation := 0 ;
88935: LD_ADDR_OWVAR 21
88939: PUSH
88940: LD_INT 0
88942: ST_TO_ADDR
// vc_chassis := class_mastodont ;
88943: LD_ADDR_OWVAR 37
88947: PUSH
88948: LD_INT 31
88950: ST_TO_ADDR
// vc_control := control_rider ;
88951: LD_ADDR_OWVAR 38
88955: PUSH
88956: LD_INT 4
88958: ST_TO_ADDR
// end ;
88959: LD_VAR 0 1
88963: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
88964: LD_INT 0
88966: PPUSH
88967: PPUSH
88968: PPUSH
// uc_side = 0 ;
88969: LD_ADDR_OWVAR 20
88973: PUSH
88974: LD_INT 0
88976: ST_TO_ADDR
// uc_nation = 0 ;
88977: LD_ADDR_OWVAR 21
88981: PUSH
88982: LD_INT 0
88984: ST_TO_ADDR
// InitHc_All ( ) ;
88985: CALL_OW 584
// InitVc ;
88989: CALL_OW 20
// if mastodonts then
88993: LD_VAR 0 6
88997: IFFALSE 89064
// for i = 1 to mastodonts do
88999: LD_ADDR_VAR 0 11
89003: PUSH
89004: DOUBLE
89005: LD_INT 1
89007: DEC
89008: ST_TO_ADDR
89009: LD_VAR 0 6
89013: PUSH
89014: FOR_TO
89015: IFFALSE 89062
// begin vc_chassis := 31 ;
89017: LD_ADDR_OWVAR 37
89021: PUSH
89022: LD_INT 31
89024: ST_TO_ADDR
// vc_control := control_rider ;
89025: LD_ADDR_OWVAR 38
89029: PUSH
89030: LD_INT 4
89032: ST_TO_ADDR
// animal := CreateVehicle ;
89033: LD_ADDR_VAR 0 12
89037: PUSH
89038: CALL_OW 45
89042: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89043: LD_VAR 0 12
89047: PPUSH
89048: LD_VAR 0 8
89052: PPUSH
89053: LD_INT 0
89055: PPUSH
89056: CALL 91192 0 3
// end ;
89060: GO 89014
89062: POP
89063: POP
// if horses then
89064: LD_VAR 0 5
89068: IFFALSE 89135
// for i = 1 to horses do
89070: LD_ADDR_VAR 0 11
89074: PUSH
89075: DOUBLE
89076: LD_INT 1
89078: DEC
89079: ST_TO_ADDR
89080: LD_VAR 0 5
89084: PUSH
89085: FOR_TO
89086: IFFALSE 89133
// begin hc_class := 21 ;
89088: LD_ADDR_OWVAR 28
89092: PUSH
89093: LD_INT 21
89095: ST_TO_ADDR
// hc_gallery :=  ;
89096: LD_ADDR_OWVAR 33
89100: PUSH
89101: LD_STRING 
89103: ST_TO_ADDR
// animal := CreateHuman ;
89104: LD_ADDR_VAR 0 12
89108: PUSH
89109: CALL_OW 44
89113: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89114: LD_VAR 0 12
89118: PPUSH
89119: LD_VAR 0 8
89123: PPUSH
89124: LD_INT 0
89126: PPUSH
89127: CALL 91192 0 3
// end ;
89131: GO 89085
89133: POP
89134: POP
// if birds then
89135: LD_VAR 0 1
89139: IFFALSE 89206
// for i = 1 to birds do
89141: LD_ADDR_VAR 0 11
89145: PUSH
89146: DOUBLE
89147: LD_INT 1
89149: DEC
89150: ST_TO_ADDR
89151: LD_VAR 0 1
89155: PUSH
89156: FOR_TO
89157: IFFALSE 89204
// begin hc_class := 18 ;
89159: LD_ADDR_OWVAR 28
89163: PUSH
89164: LD_INT 18
89166: ST_TO_ADDR
// hc_gallery =  ;
89167: LD_ADDR_OWVAR 33
89171: PUSH
89172: LD_STRING 
89174: ST_TO_ADDR
// animal := CreateHuman ;
89175: LD_ADDR_VAR 0 12
89179: PUSH
89180: CALL_OW 44
89184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89185: LD_VAR 0 12
89189: PPUSH
89190: LD_VAR 0 8
89194: PPUSH
89195: LD_INT 0
89197: PPUSH
89198: CALL 91192 0 3
// end ;
89202: GO 89156
89204: POP
89205: POP
// if tigers then
89206: LD_VAR 0 2
89210: IFFALSE 89294
// for i = 1 to tigers do
89212: LD_ADDR_VAR 0 11
89216: PUSH
89217: DOUBLE
89218: LD_INT 1
89220: DEC
89221: ST_TO_ADDR
89222: LD_VAR 0 2
89226: PUSH
89227: FOR_TO
89228: IFFALSE 89292
// begin hc_class = class_tiger ;
89230: LD_ADDR_OWVAR 28
89234: PUSH
89235: LD_INT 14
89237: ST_TO_ADDR
// hc_gallery =  ;
89238: LD_ADDR_OWVAR 33
89242: PUSH
89243: LD_STRING 
89245: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
89246: LD_ADDR_OWVAR 35
89250: PUSH
89251: LD_INT 7
89253: NEG
89254: PPUSH
89255: LD_INT 7
89257: PPUSH
89258: CALL_OW 12
89262: ST_TO_ADDR
// animal := CreateHuman ;
89263: LD_ADDR_VAR 0 12
89267: PUSH
89268: CALL_OW 44
89272: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89273: LD_VAR 0 12
89277: PPUSH
89278: LD_VAR 0 8
89282: PPUSH
89283: LD_INT 0
89285: PPUSH
89286: CALL 91192 0 3
// end ;
89290: GO 89227
89292: POP
89293: POP
// if apemans then
89294: LD_VAR 0 3
89298: IFFALSE 89421
// for i = 1 to apemans do
89300: LD_ADDR_VAR 0 11
89304: PUSH
89305: DOUBLE
89306: LD_INT 1
89308: DEC
89309: ST_TO_ADDR
89310: LD_VAR 0 3
89314: PUSH
89315: FOR_TO
89316: IFFALSE 89419
// begin hc_class = class_apeman ;
89318: LD_ADDR_OWVAR 28
89322: PUSH
89323: LD_INT 12
89325: ST_TO_ADDR
// hc_gallery =  ;
89326: LD_ADDR_OWVAR 33
89330: PUSH
89331: LD_STRING 
89333: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
89334: LD_ADDR_OWVAR 35
89338: PUSH
89339: LD_INT 2
89341: NEG
89342: PPUSH
89343: LD_INT 2
89345: PPUSH
89346: CALL_OW 12
89350: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
89351: LD_ADDR_OWVAR 31
89355: PUSH
89356: LD_INT 1
89358: PPUSH
89359: LD_INT 3
89361: PPUSH
89362: CALL_OW 12
89366: PUSH
89367: LD_INT 1
89369: PPUSH
89370: LD_INT 3
89372: PPUSH
89373: CALL_OW 12
89377: PUSH
89378: LD_INT 0
89380: PUSH
89381: LD_INT 0
89383: PUSH
89384: EMPTY
89385: LIST
89386: LIST
89387: LIST
89388: LIST
89389: ST_TO_ADDR
// animal := CreateHuman ;
89390: LD_ADDR_VAR 0 12
89394: PUSH
89395: CALL_OW 44
89399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89400: LD_VAR 0 12
89404: PPUSH
89405: LD_VAR 0 8
89409: PPUSH
89410: LD_INT 0
89412: PPUSH
89413: CALL 91192 0 3
// end ;
89417: GO 89315
89419: POP
89420: POP
// if enchidnas then
89421: LD_VAR 0 4
89425: IFFALSE 89492
// for i = 1 to enchidnas do
89427: LD_ADDR_VAR 0 11
89431: PUSH
89432: DOUBLE
89433: LD_INT 1
89435: DEC
89436: ST_TO_ADDR
89437: LD_VAR 0 4
89441: PUSH
89442: FOR_TO
89443: IFFALSE 89490
// begin hc_class = 13 ;
89445: LD_ADDR_OWVAR 28
89449: PUSH
89450: LD_INT 13
89452: ST_TO_ADDR
// hc_gallery =  ;
89453: LD_ADDR_OWVAR 33
89457: PUSH
89458: LD_STRING 
89460: ST_TO_ADDR
// animal := CreateHuman ;
89461: LD_ADDR_VAR 0 12
89465: PUSH
89466: CALL_OW 44
89470: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89471: LD_VAR 0 12
89475: PPUSH
89476: LD_VAR 0 8
89480: PPUSH
89481: LD_INT 0
89483: PPUSH
89484: CALL 91192 0 3
// end ;
89488: GO 89442
89490: POP
89491: POP
// if fishes then
89492: LD_VAR 0 7
89496: IFFALSE 89563
// for i = 1 to fishes do
89498: LD_ADDR_VAR 0 11
89502: PUSH
89503: DOUBLE
89504: LD_INT 1
89506: DEC
89507: ST_TO_ADDR
89508: LD_VAR 0 7
89512: PUSH
89513: FOR_TO
89514: IFFALSE 89561
// begin hc_class = 20 ;
89516: LD_ADDR_OWVAR 28
89520: PUSH
89521: LD_INT 20
89523: ST_TO_ADDR
// hc_gallery =  ;
89524: LD_ADDR_OWVAR 33
89528: PUSH
89529: LD_STRING 
89531: ST_TO_ADDR
// animal := CreateHuman ;
89532: LD_ADDR_VAR 0 12
89536: PUSH
89537: CALL_OW 44
89541: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
89542: LD_VAR 0 12
89546: PPUSH
89547: LD_VAR 0 9
89551: PPUSH
89552: LD_INT 0
89554: PPUSH
89555: CALL 91192 0 3
// end ;
89559: GO 89513
89561: POP
89562: POP
// end ;
89563: LD_VAR 0 10
89567: RET
// export function WantHeal ( sci , unit ) ; begin
89568: LD_INT 0
89570: PPUSH
// if GetTaskList ( sci ) > 0 then
89571: LD_VAR 0 1
89575: PPUSH
89576: CALL_OW 437
89580: PUSH
89581: LD_INT 0
89583: GREATER
89584: IFFALSE 89654
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
89586: LD_VAR 0 1
89590: PPUSH
89591: CALL_OW 437
89595: PUSH
89596: LD_INT 1
89598: ARRAY
89599: PUSH
89600: LD_INT 1
89602: ARRAY
89603: PUSH
89604: LD_STRING l
89606: EQUAL
89607: PUSH
89608: LD_VAR 0 1
89612: PPUSH
89613: CALL_OW 437
89617: PUSH
89618: LD_INT 1
89620: ARRAY
89621: PUSH
89622: LD_INT 4
89624: ARRAY
89625: PUSH
89626: LD_VAR 0 2
89630: EQUAL
89631: AND
89632: IFFALSE 89644
// result := true else
89634: LD_ADDR_VAR 0 3
89638: PUSH
89639: LD_INT 1
89641: ST_TO_ADDR
89642: GO 89652
// result := false ;
89644: LD_ADDR_VAR 0 3
89648: PUSH
89649: LD_INT 0
89651: ST_TO_ADDR
// end else
89652: GO 89662
// result := false ;
89654: LD_ADDR_VAR 0 3
89658: PUSH
89659: LD_INT 0
89661: ST_TO_ADDR
// end ;
89662: LD_VAR 0 3
89666: RET
// export function HealTarget ( sci ) ; begin
89667: LD_INT 0
89669: PPUSH
// if not sci then
89670: LD_VAR 0 1
89674: NOT
89675: IFFALSE 89679
// exit ;
89677: GO 89744
// result := 0 ;
89679: LD_ADDR_VAR 0 2
89683: PUSH
89684: LD_INT 0
89686: ST_TO_ADDR
// if GetTaskList ( sci ) then
89687: LD_VAR 0 1
89691: PPUSH
89692: CALL_OW 437
89696: IFFALSE 89744
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
89698: LD_VAR 0 1
89702: PPUSH
89703: CALL_OW 437
89707: PUSH
89708: LD_INT 1
89710: ARRAY
89711: PUSH
89712: LD_INT 1
89714: ARRAY
89715: PUSH
89716: LD_STRING l
89718: EQUAL
89719: IFFALSE 89744
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
89721: LD_ADDR_VAR 0 2
89725: PUSH
89726: LD_VAR 0 1
89730: PPUSH
89731: CALL_OW 437
89735: PUSH
89736: LD_INT 1
89738: ARRAY
89739: PUSH
89740: LD_INT 4
89742: ARRAY
89743: ST_TO_ADDR
// end ;
89744: LD_VAR 0 2
89748: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
89749: LD_INT 0
89751: PPUSH
89752: PPUSH
89753: PPUSH
89754: PPUSH
// if not base_units then
89755: LD_VAR 0 1
89759: NOT
89760: IFFALSE 89764
// exit ;
89762: GO 89851
// result := false ;
89764: LD_ADDR_VAR 0 2
89768: PUSH
89769: LD_INT 0
89771: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
89772: LD_ADDR_VAR 0 5
89776: PUSH
89777: LD_VAR 0 1
89781: PPUSH
89782: LD_INT 21
89784: PUSH
89785: LD_INT 3
89787: PUSH
89788: EMPTY
89789: LIST
89790: LIST
89791: PPUSH
89792: CALL_OW 72
89796: ST_TO_ADDR
// if not tmp then
89797: LD_VAR 0 5
89801: NOT
89802: IFFALSE 89806
// exit ;
89804: GO 89851
// for i in tmp do
89806: LD_ADDR_VAR 0 3
89810: PUSH
89811: LD_VAR 0 5
89815: PUSH
89816: FOR_IN
89817: IFFALSE 89849
// begin result := EnemyInRange ( i , 22 ) ;
89819: LD_ADDR_VAR 0 2
89823: PUSH
89824: LD_VAR 0 3
89828: PPUSH
89829: LD_INT 22
89831: PPUSH
89832: CALL 87449 0 2
89836: ST_TO_ADDR
// if result then
89837: LD_VAR 0 2
89841: IFFALSE 89847
// exit ;
89843: POP
89844: POP
89845: GO 89851
// end ;
89847: GO 89816
89849: POP
89850: POP
// end ;
89851: LD_VAR 0 2
89855: RET
// export function FilterByTag ( units , tag ) ; begin
89856: LD_INT 0
89858: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
89859: LD_ADDR_VAR 0 3
89863: PUSH
89864: LD_VAR 0 1
89868: PPUSH
89869: LD_INT 120
89871: PUSH
89872: LD_VAR 0 2
89876: PUSH
89877: EMPTY
89878: LIST
89879: LIST
89880: PPUSH
89881: CALL_OW 72
89885: ST_TO_ADDR
// end ;
89886: LD_VAR 0 3
89890: RET
// export function IsDriver ( un ) ; begin
89891: LD_INT 0
89893: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
89894: LD_ADDR_VAR 0 2
89898: PUSH
89899: LD_VAR 0 1
89903: PUSH
89904: LD_INT 55
89906: PUSH
89907: EMPTY
89908: LIST
89909: PPUSH
89910: CALL_OW 69
89914: IN
89915: ST_TO_ADDR
// end ;
89916: LD_VAR 0 2
89920: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
89921: LD_INT 0
89923: PPUSH
89924: PPUSH
// list := [ ] ;
89925: LD_ADDR_VAR 0 5
89929: PUSH
89930: EMPTY
89931: ST_TO_ADDR
// case d of 0 :
89932: LD_VAR 0 3
89936: PUSH
89937: LD_INT 0
89939: DOUBLE
89940: EQUAL
89941: IFTRUE 89945
89943: GO 90078
89945: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
89946: LD_ADDR_VAR 0 5
89950: PUSH
89951: LD_VAR 0 1
89955: PUSH
89956: LD_INT 4
89958: MINUS
89959: PUSH
89960: LD_VAR 0 2
89964: PUSH
89965: LD_INT 4
89967: MINUS
89968: PUSH
89969: LD_INT 2
89971: PUSH
89972: EMPTY
89973: LIST
89974: LIST
89975: LIST
89976: PUSH
89977: LD_VAR 0 1
89981: PUSH
89982: LD_INT 3
89984: MINUS
89985: PUSH
89986: LD_VAR 0 2
89990: PUSH
89991: LD_INT 1
89993: PUSH
89994: EMPTY
89995: LIST
89996: LIST
89997: LIST
89998: PUSH
89999: LD_VAR 0 1
90003: PUSH
90004: LD_INT 4
90006: PLUS
90007: PUSH
90008: LD_VAR 0 2
90012: PUSH
90013: LD_INT 4
90015: PUSH
90016: EMPTY
90017: LIST
90018: LIST
90019: LIST
90020: PUSH
90021: LD_VAR 0 1
90025: PUSH
90026: LD_INT 3
90028: PLUS
90029: PUSH
90030: LD_VAR 0 2
90034: PUSH
90035: LD_INT 3
90037: PLUS
90038: PUSH
90039: LD_INT 5
90041: PUSH
90042: EMPTY
90043: LIST
90044: LIST
90045: LIST
90046: PUSH
90047: LD_VAR 0 1
90051: PUSH
90052: LD_VAR 0 2
90056: PUSH
90057: LD_INT 4
90059: PLUS
90060: PUSH
90061: LD_INT 0
90063: PUSH
90064: EMPTY
90065: LIST
90066: LIST
90067: LIST
90068: PUSH
90069: EMPTY
90070: LIST
90071: LIST
90072: LIST
90073: LIST
90074: LIST
90075: ST_TO_ADDR
// end ; 1 :
90076: GO 90776
90078: LD_INT 1
90080: DOUBLE
90081: EQUAL
90082: IFTRUE 90086
90084: GO 90219
90086: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
90087: LD_ADDR_VAR 0 5
90091: PUSH
90092: LD_VAR 0 1
90096: PUSH
90097: LD_VAR 0 2
90101: PUSH
90102: LD_INT 4
90104: MINUS
90105: PUSH
90106: LD_INT 3
90108: PUSH
90109: EMPTY
90110: LIST
90111: LIST
90112: LIST
90113: PUSH
90114: LD_VAR 0 1
90118: PUSH
90119: LD_INT 3
90121: MINUS
90122: PUSH
90123: LD_VAR 0 2
90127: PUSH
90128: LD_INT 3
90130: MINUS
90131: PUSH
90132: LD_INT 2
90134: PUSH
90135: EMPTY
90136: LIST
90137: LIST
90138: LIST
90139: PUSH
90140: LD_VAR 0 1
90144: PUSH
90145: LD_INT 4
90147: MINUS
90148: PUSH
90149: LD_VAR 0 2
90153: PUSH
90154: LD_INT 1
90156: PUSH
90157: EMPTY
90158: LIST
90159: LIST
90160: LIST
90161: PUSH
90162: LD_VAR 0 1
90166: PUSH
90167: LD_VAR 0 2
90171: PUSH
90172: LD_INT 3
90174: PLUS
90175: PUSH
90176: LD_INT 0
90178: PUSH
90179: EMPTY
90180: LIST
90181: LIST
90182: LIST
90183: PUSH
90184: LD_VAR 0 1
90188: PUSH
90189: LD_INT 4
90191: PLUS
90192: PUSH
90193: LD_VAR 0 2
90197: PUSH
90198: LD_INT 4
90200: PLUS
90201: PUSH
90202: LD_INT 5
90204: PUSH
90205: EMPTY
90206: LIST
90207: LIST
90208: LIST
90209: PUSH
90210: EMPTY
90211: LIST
90212: LIST
90213: LIST
90214: LIST
90215: LIST
90216: ST_TO_ADDR
// end ; 2 :
90217: GO 90776
90219: LD_INT 2
90221: DOUBLE
90222: EQUAL
90223: IFTRUE 90227
90225: GO 90356
90227: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
90228: LD_ADDR_VAR 0 5
90232: PUSH
90233: LD_VAR 0 1
90237: PUSH
90238: LD_VAR 0 2
90242: PUSH
90243: LD_INT 3
90245: MINUS
90246: PUSH
90247: LD_INT 3
90249: PUSH
90250: EMPTY
90251: LIST
90252: LIST
90253: LIST
90254: PUSH
90255: LD_VAR 0 1
90259: PUSH
90260: LD_INT 4
90262: PLUS
90263: PUSH
90264: LD_VAR 0 2
90268: PUSH
90269: LD_INT 4
90271: PUSH
90272: EMPTY
90273: LIST
90274: LIST
90275: LIST
90276: PUSH
90277: LD_VAR 0 1
90281: PUSH
90282: LD_VAR 0 2
90286: PUSH
90287: LD_INT 4
90289: PLUS
90290: PUSH
90291: LD_INT 0
90293: PUSH
90294: EMPTY
90295: LIST
90296: LIST
90297: LIST
90298: PUSH
90299: LD_VAR 0 1
90303: PUSH
90304: LD_INT 3
90306: MINUS
90307: PUSH
90308: LD_VAR 0 2
90312: PUSH
90313: LD_INT 1
90315: PUSH
90316: EMPTY
90317: LIST
90318: LIST
90319: LIST
90320: PUSH
90321: LD_VAR 0 1
90325: PUSH
90326: LD_INT 4
90328: MINUS
90329: PUSH
90330: LD_VAR 0 2
90334: PUSH
90335: LD_INT 4
90337: MINUS
90338: PUSH
90339: LD_INT 2
90341: PUSH
90342: EMPTY
90343: LIST
90344: LIST
90345: LIST
90346: PUSH
90347: EMPTY
90348: LIST
90349: LIST
90350: LIST
90351: LIST
90352: LIST
90353: ST_TO_ADDR
// end ; 3 :
90354: GO 90776
90356: LD_INT 3
90358: DOUBLE
90359: EQUAL
90360: IFTRUE 90364
90362: GO 90497
90364: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
90365: LD_ADDR_VAR 0 5
90369: PUSH
90370: LD_VAR 0 1
90374: PUSH
90375: LD_INT 3
90377: PLUS
90378: PUSH
90379: LD_VAR 0 2
90383: PUSH
90384: LD_INT 4
90386: PUSH
90387: EMPTY
90388: LIST
90389: LIST
90390: LIST
90391: PUSH
90392: LD_VAR 0 1
90396: PUSH
90397: LD_INT 4
90399: PLUS
90400: PUSH
90401: LD_VAR 0 2
90405: PUSH
90406: LD_INT 4
90408: PLUS
90409: PUSH
90410: LD_INT 5
90412: PUSH
90413: EMPTY
90414: LIST
90415: LIST
90416: LIST
90417: PUSH
90418: LD_VAR 0 1
90422: PUSH
90423: LD_INT 4
90425: MINUS
90426: PUSH
90427: LD_VAR 0 2
90431: PUSH
90432: LD_INT 1
90434: PUSH
90435: EMPTY
90436: LIST
90437: LIST
90438: LIST
90439: PUSH
90440: LD_VAR 0 1
90444: PUSH
90445: LD_VAR 0 2
90449: PUSH
90450: LD_INT 4
90452: MINUS
90453: PUSH
90454: LD_INT 3
90456: PUSH
90457: EMPTY
90458: LIST
90459: LIST
90460: LIST
90461: PUSH
90462: LD_VAR 0 1
90466: PUSH
90467: LD_INT 3
90469: MINUS
90470: PUSH
90471: LD_VAR 0 2
90475: PUSH
90476: LD_INT 3
90478: MINUS
90479: PUSH
90480: LD_INT 2
90482: PUSH
90483: EMPTY
90484: LIST
90485: LIST
90486: LIST
90487: PUSH
90488: EMPTY
90489: LIST
90490: LIST
90491: LIST
90492: LIST
90493: LIST
90494: ST_TO_ADDR
// end ; 4 :
90495: GO 90776
90497: LD_INT 4
90499: DOUBLE
90500: EQUAL
90501: IFTRUE 90505
90503: GO 90638
90505: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
90506: LD_ADDR_VAR 0 5
90510: PUSH
90511: LD_VAR 0 1
90515: PUSH
90516: LD_VAR 0 2
90520: PUSH
90521: LD_INT 4
90523: PLUS
90524: PUSH
90525: LD_INT 0
90527: PUSH
90528: EMPTY
90529: LIST
90530: LIST
90531: LIST
90532: PUSH
90533: LD_VAR 0 1
90537: PUSH
90538: LD_INT 3
90540: PLUS
90541: PUSH
90542: LD_VAR 0 2
90546: PUSH
90547: LD_INT 3
90549: PLUS
90550: PUSH
90551: LD_INT 5
90553: PUSH
90554: EMPTY
90555: LIST
90556: LIST
90557: LIST
90558: PUSH
90559: LD_VAR 0 1
90563: PUSH
90564: LD_INT 4
90566: PLUS
90567: PUSH
90568: LD_VAR 0 2
90572: PUSH
90573: LD_INT 4
90575: PUSH
90576: EMPTY
90577: LIST
90578: LIST
90579: LIST
90580: PUSH
90581: LD_VAR 0 1
90585: PUSH
90586: LD_VAR 0 2
90590: PUSH
90591: LD_INT 3
90593: MINUS
90594: PUSH
90595: LD_INT 3
90597: PUSH
90598: EMPTY
90599: LIST
90600: LIST
90601: LIST
90602: PUSH
90603: LD_VAR 0 1
90607: PUSH
90608: LD_INT 4
90610: MINUS
90611: PUSH
90612: LD_VAR 0 2
90616: PUSH
90617: LD_INT 4
90619: MINUS
90620: PUSH
90621: LD_INT 2
90623: PUSH
90624: EMPTY
90625: LIST
90626: LIST
90627: LIST
90628: PUSH
90629: EMPTY
90630: LIST
90631: LIST
90632: LIST
90633: LIST
90634: LIST
90635: ST_TO_ADDR
// end ; 5 :
90636: GO 90776
90638: LD_INT 5
90640: DOUBLE
90641: EQUAL
90642: IFTRUE 90646
90644: GO 90775
90646: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
90647: LD_ADDR_VAR 0 5
90651: PUSH
90652: LD_VAR 0 1
90656: PUSH
90657: LD_INT 4
90659: MINUS
90660: PUSH
90661: LD_VAR 0 2
90665: PUSH
90666: LD_INT 1
90668: PUSH
90669: EMPTY
90670: LIST
90671: LIST
90672: LIST
90673: PUSH
90674: LD_VAR 0 1
90678: PUSH
90679: LD_VAR 0 2
90683: PUSH
90684: LD_INT 4
90686: MINUS
90687: PUSH
90688: LD_INT 3
90690: PUSH
90691: EMPTY
90692: LIST
90693: LIST
90694: LIST
90695: PUSH
90696: LD_VAR 0 1
90700: PUSH
90701: LD_INT 4
90703: PLUS
90704: PUSH
90705: LD_VAR 0 2
90709: PUSH
90710: LD_INT 4
90712: PLUS
90713: PUSH
90714: LD_INT 5
90716: PUSH
90717: EMPTY
90718: LIST
90719: LIST
90720: LIST
90721: PUSH
90722: LD_VAR 0 1
90726: PUSH
90727: LD_INT 3
90729: PLUS
90730: PUSH
90731: LD_VAR 0 2
90735: PUSH
90736: LD_INT 4
90738: PUSH
90739: EMPTY
90740: LIST
90741: LIST
90742: LIST
90743: PUSH
90744: LD_VAR 0 1
90748: PUSH
90749: LD_VAR 0 2
90753: PUSH
90754: LD_INT 3
90756: PLUS
90757: PUSH
90758: LD_INT 0
90760: PUSH
90761: EMPTY
90762: LIST
90763: LIST
90764: LIST
90765: PUSH
90766: EMPTY
90767: LIST
90768: LIST
90769: LIST
90770: LIST
90771: LIST
90772: ST_TO_ADDR
// end ; end ;
90773: GO 90776
90775: POP
// result := list ;
90776: LD_ADDR_VAR 0 4
90780: PUSH
90781: LD_VAR 0 5
90785: ST_TO_ADDR
// end ;
90786: LD_VAR 0 4
90790: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
90791: LD_INT 0
90793: PPUSH
90794: PPUSH
90795: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
90796: LD_VAR 0 1
90800: NOT
90801: PUSH
90802: LD_VAR 0 2
90806: PUSH
90807: LD_INT 1
90809: PUSH
90810: LD_INT 2
90812: PUSH
90813: LD_INT 3
90815: PUSH
90816: LD_INT 4
90818: PUSH
90819: EMPTY
90820: LIST
90821: LIST
90822: LIST
90823: LIST
90824: IN
90825: NOT
90826: OR
90827: IFFALSE 90831
// exit ;
90829: GO 90914
// tmp := [ ] ;
90831: LD_ADDR_VAR 0 5
90835: PUSH
90836: EMPTY
90837: ST_TO_ADDR
// for i in units do
90838: LD_ADDR_VAR 0 4
90842: PUSH
90843: LD_VAR 0 1
90847: PUSH
90848: FOR_IN
90849: IFFALSE 90883
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
90851: LD_ADDR_VAR 0 5
90855: PUSH
90856: LD_VAR 0 5
90860: PPUSH
90861: LD_VAR 0 4
90865: PPUSH
90866: LD_VAR 0 2
90870: PPUSH
90871: CALL_OW 259
90875: PPUSH
90876: CALL 92287 0 2
90880: ST_TO_ADDR
90881: GO 90848
90883: POP
90884: POP
// if not tmp then
90885: LD_VAR 0 5
90889: NOT
90890: IFFALSE 90894
// exit ;
90892: GO 90914
// result := SortListByListDesc ( units , tmp ) ;
90894: LD_ADDR_VAR 0 3
90898: PUSH
90899: LD_VAR 0 1
90903: PPUSH
90904: LD_VAR 0 5
90908: PPUSH
90909: CALL_OW 77
90913: ST_TO_ADDR
// end ;
90914: LD_VAR 0 3
90918: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
90919: LD_INT 0
90921: PPUSH
90922: PPUSH
90923: PPUSH
// result := false ;
90924: LD_ADDR_VAR 0 3
90928: PUSH
90929: LD_INT 0
90931: ST_TO_ADDR
// if not building then
90932: LD_VAR 0 2
90936: NOT
90937: IFFALSE 90941
// exit ;
90939: GO 91079
// x := GetX ( building ) ;
90941: LD_ADDR_VAR 0 4
90945: PUSH
90946: LD_VAR 0 2
90950: PPUSH
90951: CALL_OW 250
90955: ST_TO_ADDR
// y := GetY ( building ) ;
90956: LD_ADDR_VAR 0 5
90960: PUSH
90961: LD_VAR 0 2
90965: PPUSH
90966: CALL_OW 251
90970: ST_TO_ADDR
// if not x or not y then
90971: LD_VAR 0 4
90975: NOT
90976: PUSH
90977: LD_VAR 0 5
90981: NOT
90982: OR
90983: IFFALSE 90987
// exit ;
90985: GO 91079
// if GetTaskList ( unit ) then
90987: LD_VAR 0 1
90991: PPUSH
90992: CALL_OW 437
90996: IFFALSE 91079
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
90998: LD_STRING e
91000: PUSH
91001: LD_VAR 0 1
91005: PPUSH
91006: CALL_OW 437
91010: PUSH
91011: LD_INT 1
91013: ARRAY
91014: PUSH
91015: LD_INT 1
91017: ARRAY
91018: EQUAL
91019: PUSH
91020: LD_VAR 0 4
91024: PUSH
91025: LD_VAR 0 1
91029: PPUSH
91030: CALL_OW 437
91034: PUSH
91035: LD_INT 1
91037: ARRAY
91038: PUSH
91039: LD_INT 2
91041: ARRAY
91042: EQUAL
91043: AND
91044: PUSH
91045: LD_VAR 0 5
91049: PUSH
91050: LD_VAR 0 1
91054: PPUSH
91055: CALL_OW 437
91059: PUSH
91060: LD_INT 1
91062: ARRAY
91063: PUSH
91064: LD_INT 3
91066: ARRAY
91067: EQUAL
91068: AND
91069: IFFALSE 91079
// result := true end ;
91071: LD_ADDR_VAR 0 3
91075: PUSH
91076: LD_INT 1
91078: ST_TO_ADDR
// end ;
91079: LD_VAR 0 3
91083: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
91084: LD_INT 0
91086: PPUSH
// result := false ;
91087: LD_ADDR_VAR 0 4
91091: PUSH
91092: LD_INT 0
91094: ST_TO_ADDR
// if GetTaskList ( unit ) then
91095: LD_VAR 0 1
91099: PPUSH
91100: CALL_OW 437
91104: IFFALSE 91187
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
91106: LD_STRING M
91108: PUSH
91109: LD_VAR 0 1
91113: PPUSH
91114: CALL_OW 437
91118: PUSH
91119: LD_INT 1
91121: ARRAY
91122: PUSH
91123: LD_INT 1
91125: ARRAY
91126: EQUAL
91127: PUSH
91128: LD_VAR 0 2
91132: PUSH
91133: LD_VAR 0 1
91137: PPUSH
91138: CALL_OW 437
91142: PUSH
91143: LD_INT 1
91145: ARRAY
91146: PUSH
91147: LD_INT 2
91149: ARRAY
91150: EQUAL
91151: AND
91152: PUSH
91153: LD_VAR 0 3
91157: PUSH
91158: LD_VAR 0 1
91162: PPUSH
91163: CALL_OW 437
91167: PUSH
91168: LD_INT 1
91170: ARRAY
91171: PUSH
91172: LD_INT 3
91174: ARRAY
91175: EQUAL
91176: AND
91177: IFFALSE 91187
// result := true ;
91179: LD_ADDR_VAR 0 4
91183: PUSH
91184: LD_INT 1
91186: ST_TO_ADDR
// end ; end ;
91187: LD_VAR 0 4
91191: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
91192: LD_INT 0
91194: PPUSH
91195: PPUSH
91196: PPUSH
91197: PPUSH
// if not unit or not area then
91198: LD_VAR 0 1
91202: NOT
91203: PUSH
91204: LD_VAR 0 2
91208: NOT
91209: OR
91210: IFFALSE 91214
// exit ;
91212: GO 91390
// tmp := AreaToList ( area , i ) ;
91214: LD_ADDR_VAR 0 6
91218: PUSH
91219: LD_VAR 0 2
91223: PPUSH
91224: LD_VAR 0 5
91228: PPUSH
91229: CALL_OW 517
91233: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
91234: LD_ADDR_VAR 0 5
91238: PUSH
91239: DOUBLE
91240: LD_INT 1
91242: DEC
91243: ST_TO_ADDR
91244: LD_VAR 0 6
91248: PUSH
91249: LD_INT 1
91251: ARRAY
91252: PUSH
91253: FOR_TO
91254: IFFALSE 91388
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
91256: LD_ADDR_VAR 0 7
91260: PUSH
91261: LD_VAR 0 6
91265: PUSH
91266: LD_INT 1
91268: ARRAY
91269: PUSH
91270: LD_VAR 0 5
91274: ARRAY
91275: PUSH
91276: LD_VAR 0 6
91280: PUSH
91281: LD_INT 2
91283: ARRAY
91284: PUSH
91285: LD_VAR 0 5
91289: ARRAY
91290: PUSH
91291: EMPTY
91292: LIST
91293: LIST
91294: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
91295: LD_INT 92
91297: PUSH
91298: LD_VAR 0 7
91302: PUSH
91303: LD_INT 1
91305: ARRAY
91306: PUSH
91307: LD_VAR 0 7
91311: PUSH
91312: LD_INT 2
91314: ARRAY
91315: PUSH
91316: LD_INT 2
91318: PUSH
91319: EMPTY
91320: LIST
91321: LIST
91322: LIST
91323: LIST
91324: PPUSH
91325: CALL_OW 69
91329: PUSH
91330: LD_INT 0
91332: EQUAL
91333: IFFALSE 91386
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
91335: LD_VAR 0 1
91339: PPUSH
91340: LD_VAR 0 7
91344: PUSH
91345: LD_INT 1
91347: ARRAY
91348: PPUSH
91349: LD_VAR 0 7
91353: PUSH
91354: LD_INT 2
91356: ARRAY
91357: PPUSH
91358: LD_VAR 0 3
91362: PPUSH
91363: CALL_OW 48
// result := IsPlaced ( unit ) ;
91367: LD_ADDR_VAR 0 4
91371: PUSH
91372: LD_VAR 0 1
91376: PPUSH
91377: CALL_OW 305
91381: ST_TO_ADDR
// exit ;
91382: POP
91383: POP
91384: GO 91390
// end ; end ;
91386: GO 91253
91388: POP
91389: POP
// end ;
91390: LD_VAR 0 4
91394: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
91395: LD_INT 0
91397: PPUSH
91398: PPUSH
91399: PPUSH
// if not side or side > 8 then
91400: LD_VAR 0 1
91404: NOT
91405: PUSH
91406: LD_VAR 0 1
91410: PUSH
91411: LD_INT 8
91413: GREATER
91414: OR
91415: IFFALSE 91419
// exit ;
91417: GO 91606
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
91419: LD_ADDR_VAR 0 4
91423: PUSH
91424: LD_INT 22
91426: PUSH
91427: LD_VAR 0 1
91431: PUSH
91432: EMPTY
91433: LIST
91434: LIST
91435: PUSH
91436: LD_INT 21
91438: PUSH
91439: LD_INT 3
91441: PUSH
91442: EMPTY
91443: LIST
91444: LIST
91445: PUSH
91446: EMPTY
91447: LIST
91448: LIST
91449: PPUSH
91450: CALL_OW 69
91454: ST_TO_ADDR
// if not tmp then
91455: LD_VAR 0 4
91459: NOT
91460: IFFALSE 91464
// exit ;
91462: GO 91606
// enable_addtolog := true ;
91464: LD_ADDR_OWVAR 81
91468: PUSH
91469: LD_INT 1
91471: ST_TO_ADDR
// AddToLog ( [ ) ;
91472: LD_STRING [
91474: PPUSH
91475: CALL_OW 561
// for i in tmp do
91479: LD_ADDR_VAR 0 3
91483: PUSH
91484: LD_VAR 0 4
91488: PUSH
91489: FOR_IN
91490: IFFALSE 91597
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
91492: LD_STRING [
91494: PUSH
91495: LD_VAR 0 3
91499: PPUSH
91500: CALL_OW 266
91504: STR
91505: PUSH
91506: LD_STRING , 
91508: STR
91509: PUSH
91510: LD_VAR 0 3
91514: PPUSH
91515: CALL_OW 250
91519: STR
91520: PUSH
91521: LD_STRING , 
91523: STR
91524: PUSH
91525: LD_VAR 0 3
91529: PPUSH
91530: CALL_OW 251
91534: STR
91535: PUSH
91536: LD_STRING , 
91538: STR
91539: PUSH
91540: LD_VAR 0 3
91544: PPUSH
91545: CALL_OW 254
91549: STR
91550: PUSH
91551: LD_STRING , 
91553: STR
91554: PUSH
91555: LD_VAR 0 3
91559: PPUSH
91560: LD_INT 1
91562: PPUSH
91563: CALL_OW 268
91567: STR
91568: PUSH
91569: LD_STRING , 
91571: STR
91572: PUSH
91573: LD_VAR 0 3
91577: PPUSH
91578: LD_INT 2
91580: PPUSH
91581: CALL_OW 268
91585: STR
91586: PUSH
91587: LD_STRING ],
91589: STR
91590: PPUSH
91591: CALL_OW 561
// end ;
91595: GO 91489
91597: POP
91598: POP
// AddToLog ( ]; ) ;
91599: LD_STRING ];
91601: PPUSH
91602: CALL_OW 561
// end ;
91606: LD_VAR 0 2
91610: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
91611: LD_INT 0
91613: PPUSH
91614: PPUSH
91615: PPUSH
91616: PPUSH
91617: PPUSH
// if not area or not rate or not max then
91618: LD_VAR 0 1
91622: NOT
91623: PUSH
91624: LD_VAR 0 2
91628: NOT
91629: OR
91630: PUSH
91631: LD_VAR 0 4
91635: NOT
91636: OR
91637: IFFALSE 91641
// exit ;
91639: GO 91830
// while 1 do
91641: LD_INT 1
91643: IFFALSE 91830
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
91645: LD_ADDR_VAR 0 9
91649: PUSH
91650: LD_VAR 0 1
91654: PPUSH
91655: LD_INT 1
91657: PPUSH
91658: CALL_OW 287
91662: PUSH
91663: LD_INT 10
91665: MUL
91666: ST_TO_ADDR
// r := rate / 10 ;
91667: LD_ADDR_VAR 0 7
91671: PUSH
91672: LD_VAR 0 2
91676: PUSH
91677: LD_INT 10
91679: DIVREAL
91680: ST_TO_ADDR
// time := 1 1$00 ;
91681: LD_ADDR_VAR 0 8
91685: PUSH
91686: LD_INT 2100
91688: ST_TO_ADDR
// if amount < min then
91689: LD_VAR 0 9
91693: PUSH
91694: LD_VAR 0 3
91698: LESS
91699: IFFALSE 91717
// r := r * 2 else
91701: LD_ADDR_VAR 0 7
91705: PUSH
91706: LD_VAR 0 7
91710: PUSH
91711: LD_INT 2
91713: MUL
91714: ST_TO_ADDR
91715: GO 91743
// if amount > max then
91717: LD_VAR 0 9
91721: PUSH
91722: LD_VAR 0 4
91726: GREATER
91727: IFFALSE 91743
// r := r / 2 ;
91729: LD_ADDR_VAR 0 7
91733: PUSH
91734: LD_VAR 0 7
91738: PUSH
91739: LD_INT 2
91741: DIVREAL
91742: ST_TO_ADDR
// time := time / r ;
91743: LD_ADDR_VAR 0 8
91747: PUSH
91748: LD_VAR 0 8
91752: PUSH
91753: LD_VAR 0 7
91757: DIVREAL
91758: ST_TO_ADDR
// if time < 0 then
91759: LD_VAR 0 8
91763: PUSH
91764: LD_INT 0
91766: LESS
91767: IFFALSE 91784
// time := time * - 1 ;
91769: LD_ADDR_VAR 0 8
91773: PUSH
91774: LD_VAR 0 8
91778: PUSH
91779: LD_INT 1
91781: NEG
91782: MUL
91783: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
91784: LD_VAR 0 8
91788: PUSH
91789: LD_INT 35
91791: PPUSH
91792: LD_INT 875
91794: PPUSH
91795: CALL_OW 12
91799: PLUS
91800: PPUSH
91801: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
91805: LD_INT 1
91807: PPUSH
91808: LD_INT 5
91810: PPUSH
91811: CALL_OW 12
91815: PPUSH
91816: LD_VAR 0 1
91820: PPUSH
91821: LD_INT 1
91823: PPUSH
91824: CALL_OW 55
// end ;
91828: GO 91641
// end ;
91830: LD_VAR 0 5
91834: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
91835: LD_INT 0
91837: PPUSH
91838: PPUSH
91839: PPUSH
91840: PPUSH
91841: PPUSH
91842: PPUSH
91843: PPUSH
91844: PPUSH
// if not turrets or not factories then
91845: LD_VAR 0 1
91849: NOT
91850: PUSH
91851: LD_VAR 0 2
91855: NOT
91856: OR
91857: IFFALSE 91861
// exit ;
91859: GO 92168
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
91861: LD_ADDR_VAR 0 10
91865: PUSH
91866: LD_INT 5
91868: PUSH
91869: LD_INT 6
91871: PUSH
91872: EMPTY
91873: LIST
91874: LIST
91875: PUSH
91876: LD_INT 2
91878: PUSH
91879: LD_INT 4
91881: PUSH
91882: EMPTY
91883: LIST
91884: LIST
91885: PUSH
91886: LD_INT 3
91888: PUSH
91889: LD_INT 5
91891: PUSH
91892: EMPTY
91893: LIST
91894: LIST
91895: PUSH
91896: EMPTY
91897: LIST
91898: LIST
91899: LIST
91900: PUSH
91901: LD_INT 24
91903: PUSH
91904: LD_INT 25
91906: PUSH
91907: EMPTY
91908: LIST
91909: LIST
91910: PUSH
91911: LD_INT 23
91913: PUSH
91914: LD_INT 27
91916: PUSH
91917: EMPTY
91918: LIST
91919: LIST
91920: PUSH
91921: EMPTY
91922: LIST
91923: LIST
91924: PUSH
91925: LD_INT 42
91927: PUSH
91928: LD_INT 43
91930: PUSH
91931: EMPTY
91932: LIST
91933: LIST
91934: PUSH
91935: LD_INT 44
91937: PUSH
91938: LD_INT 46
91940: PUSH
91941: EMPTY
91942: LIST
91943: LIST
91944: PUSH
91945: LD_INT 45
91947: PUSH
91948: LD_INT 47
91950: PUSH
91951: EMPTY
91952: LIST
91953: LIST
91954: PUSH
91955: EMPTY
91956: LIST
91957: LIST
91958: LIST
91959: PUSH
91960: EMPTY
91961: LIST
91962: LIST
91963: LIST
91964: ST_TO_ADDR
// result := [ ] ;
91965: LD_ADDR_VAR 0 3
91969: PUSH
91970: EMPTY
91971: ST_TO_ADDR
// for i in turrets do
91972: LD_ADDR_VAR 0 4
91976: PUSH
91977: LD_VAR 0 1
91981: PUSH
91982: FOR_IN
91983: IFFALSE 92166
// begin nat := GetNation ( i ) ;
91985: LD_ADDR_VAR 0 7
91989: PUSH
91990: LD_VAR 0 4
91994: PPUSH
91995: CALL_OW 248
91999: ST_TO_ADDR
// weapon := 0 ;
92000: LD_ADDR_VAR 0 8
92004: PUSH
92005: LD_INT 0
92007: ST_TO_ADDR
// if not nat then
92008: LD_VAR 0 7
92012: NOT
92013: IFFALSE 92017
// continue ;
92015: GO 91982
// for j in list [ nat ] do
92017: LD_ADDR_VAR 0 5
92021: PUSH
92022: LD_VAR 0 10
92026: PUSH
92027: LD_VAR 0 7
92031: ARRAY
92032: PUSH
92033: FOR_IN
92034: IFFALSE 92075
// if GetBWeapon ( i ) = j [ 1 ] then
92036: LD_VAR 0 4
92040: PPUSH
92041: CALL_OW 269
92045: PUSH
92046: LD_VAR 0 5
92050: PUSH
92051: LD_INT 1
92053: ARRAY
92054: EQUAL
92055: IFFALSE 92073
// begin weapon := j [ 2 ] ;
92057: LD_ADDR_VAR 0 8
92061: PUSH
92062: LD_VAR 0 5
92066: PUSH
92067: LD_INT 2
92069: ARRAY
92070: ST_TO_ADDR
// break ;
92071: GO 92075
// end ;
92073: GO 92033
92075: POP
92076: POP
// if not weapon then
92077: LD_VAR 0 8
92081: NOT
92082: IFFALSE 92086
// continue ;
92084: GO 91982
// for k in factories do
92086: LD_ADDR_VAR 0 6
92090: PUSH
92091: LD_VAR 0 2
92095: PUSH
92096: FOR_IN
92097: IFFALSE 92162
// begin weapons := AvailableWeaponList ( k ) ;
92099: LD_ADDR_VAR 0 9
92103: PUSH
92104: LD_VAR 0 6
92108: PPUSH
92109: CALL_OW 478
92113: ST_TO_ADDR
// if not weapons then
92114: LD_VAR 0 9
92118: NOT
92119: IFFALSE 92123
// continue ;
92121: GO 92096
// if weapon in weapons then
92123: LD_VAR 0 8
92127: PUSH
92128: LD_VAR 0 9
92132: IN
92133: IFFALSE 92160
// begin result := [ i , weapon ] ;
92135: LD_ADDR_VAR 0 3
92139: PUSH
92140: LD_VAR 0 4
92144: PUSH
92145: LD_VAR 0 8
92149: PUSH
92150: EMPTY
92151: LIST
92152: LIST
92153: ST_TO_ADDR
// exit ;
92154: POP
92155: POP
92156: POP
92157: POP
92158: GO 92168
// end ; end ;
92160: GO 92096
92162: POP
92163: POP
// end ;
92164: GO 91982
92166: POP
92167: POP
// end ;
92168: LD_VAR 0 3
92172: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
92173: LD_INT 0
92175: PPUSH
// if not side or side > 8 then
92176: LD_VAR 0 3
92180: NOT
92181: PUSH
92182: LD_VAR 0 3
92186: PUSH
92187: LD_INT 8
92189: GREATER
92190: OR
92191: IFFALSE 92195
// exit ;
92193: GO 92254
// if not range then
92195: LD_VAR 0 4
92199: NOT
92200: IFFALSE 92211
// range := - 12 ;
92202: LD_ADDR_VAR 0 4
92206: PUSH
92207: LD_INT 12
92209: NEG
92210: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
92211: LD_VAR 0 1
92215: PPUSH
92216: LD_VAR 0 2
92220: PPUSH
92221: LD_VAR 0 3
92225: PPUSH
92226: LD_VAR 0 4
92230: PPUSH
92231: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
92235: LD_VAR 0 1
92239: PPUSH
92240: LD_VAR 0 2
92244: PPUSH
92245: LD_VAR 0 3
92249: PPUSH
92250: CALL_OW 331
// end ;
92254: LD_VAR 0 5
92258: RET
// export function Video ( mode ) ; begin
92259: LD_INT 0
92261: PPUSH
// ingame_video = mode ;
92262: LD_ADDR_OWVAR 52
92266: PUSH
92267: LD_VAR 0 1
92271: ST_TO_ADDR
// interface_hidden = mode ;
92272: LD_ADDR_OWVAR 54
92276: PUSH
92277: LD_VAR 0 1
92281: ST_TO_ADDR
// end ;
92282: LD_VAR 0 2
92286: RET
// export function Join ( array , element ) ; begin
92287: LD_INT 0
92289: PPUSH
// result := Replace ( array , array + 1 , element ) ;
92290: LD_ADDR_VAR 0 3
92294: PUSH
92295: LD_VAR 0 1
92299: PPUSH
92300: LD_VAR 0 1
92304: PUSH
92305: LD_INT 1
92307: PLUS
92308: PPUSH
92309: LD_VAR 0 2
92313: PPUSH
92314: CALL_OW 1
92318: ST_TO_ADDR
// end ;
92319: LD_VAR 0 3
92323: RET
// export function JoinUnion ( array , element ) ; begin
92324: LD_INT 0
92326: PPUSH
// result := array union element ;
92327: LD_ADDR_VAR 0 3
92331: PUSH
92332: LD_VAR 0 1
92336: PUSH
92337: LD_VAR 0 2
92341: UNION
92342: ST_TO_ADDR
// end ;
92343: LD_VAR 0 3
92347: RET
// export function GetBehemoths ( side ) ; begin
92348: LD_INT 0
92350: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
92351: LD_ADDR_VAR 0 2
92355: PUSH
92356: LD_INT 22
92358: PUSH
92359: LD_VAR 0 1
92363: PUSH
92364: EMPTY
92365: LIST
92366: LIST
92367: PUSH
92368: LD_INT 31
92370: PUSH
92371: LD_INT 25
92373: PUSH
92374: EMPTY
92375: LIST
92376: LIST
92377: PUSH
92378: EMPTY
92379: LIST
92380: LIST
92381: PPUSH
92382: CALL_OW 69
92386: ST_TO_ADDR
// end ;
92387: LD_VAR 0 2
92391: RET
// export function Shuffle ( array ) ; var i , index ; begin
92392: LD_INT 0
92394: PPUSH
92395: PPUSH
92396: PPUSH
// result := [ ] ;
92397: LD_ADDR_VAR 0 2
92401: PUSH
92402: EMPTY
92403: ST_TO_ADDR
// if not array then
92404: LD_VAR 0 1
92408: NOT
92409: IFFALSE 92413
// exit ;
92411: GO 92512
// Randomize ;
92413: CALL_OW 10
// for i = array downto 1 do
92417: LD_ADDR_VAR 0 3
92421: PUSH
92422: DOUBLE
92423: LD_VAR 0 1
92427: INC
92428: ST_TO_ADDR
92429: LD_INT 1
92431: PUSH
92432: FOR_DOWNTO
92433: IFFALSE 92510
// begin index := rand ( 1 , array ) ;
92435: LD_ADDR_VAR 0 4
92439: PUSH
92440: LD_INT 1
92442: PPUSH
92443: LD_VAR 0 1
92447: PPUSH
92448: CALL_OW 12
92452: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
92453: LD_ADDR_VAR 0 2
92457: PUSH
92458: LD_VAR 0 2
92462: PPUSH
92463: LD_VAR 0 2
92467: PUSH
92468: LD_INT 1
92470: PLUS
92471: PPUSH
92472: LD_VAR 0 1
92476: PUSH
92477: LD_VAR 0 4
92481: ARRAY
92482: PPUSH
92483: CALL_OW 2
92487: ST_TO_ADDR
// array := Delete ( array , index ) ;
92488: LD_ADDR_VAR 0 1
92492: PUSH
92493: LD_VAR 0 1
92497: PPUSH
92498: LD_VAR 0 4
92502: PPUSH
92503: CALL_OW 3
92507: ST_TO_ADDR
// end ;
92508: GO 92432
92510: POP
92511: POP
// end ;
92512: LD_VAR 0 2
92516: RET
// export function GetBaseMaterials ( base ) ; begin
92517: LD_INT 0
92519: PPUSH
// result := [ 0 , 0 , 0 ] ;
92520: LD_ADDR_VAR 0 2
92524: PUSH
92525: LD_INT 0
92527: PUSH
92528: LD_INT 0
92530: PUSH
92531: LD_INT 0
92533: PUSH
92534: EMPTY
92535: LIST
92536: LIST
92537: LIST
92538: ST_TO_ADDR
// if not base then
92539: LD_VAR 0 1
92543: NOT
92544: IFFALSE 92548
// exit ;
92546: GO 92597
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
92548: LD_ADDR_VAR 0 2
92552: PUSH
92553: LD_VAR 0 1
92557: PPUSH
92558: LD_INT 1
92560: PPUSH
92561: CALL_OW 275
92565: PUSH
92566: LD_VAR 0 1
92570: PPUSH
92571: LD_INT 2
92573: PPUSH
92574: CALL_OW 275
92578: PUSH
92579: LD_VAR 0 1
92583: PPUSH
92584: LD_INT 3
92586: PPUSH
92587: CALL_OW 275
92591: PUSH
92592: EMPTY
92593: LIST
92594: LIST
92595: LIST
92596: ST_TO_ADDR
// end ;
92597: LD_VAR 0 2
92601: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
92602: LD_INT 0
92604: PPUSH
92605: PPUSH
// result := array ;
92606: LD_ADDR_VAR 0 3
92610: PUSH
92611: LD_VAR 0 1
92615: ST_TO_ADDR
// if size >= result then
92616: LD_VAR 0 2
92620: PUSH
92621: LD_VAR 0 3
92625: GREATEREQUAL
92626: IFFALSE 92630
// exit ;
92628: GO 92680
// if size then
92630: LD_VAR 0 2
92634: IFFALSE 92680
// for i := array downto size do
92636: LD_ADDR_VAR 0 4
92640: PUSH
92641: DOUBLE
92642: LD_VAR 0 1
92646: INC
92647: ST_TO_ADDR
92648: LD_VAR 0 2
92652: PUSH
92653: FOR_DOWNTO
92654: IFFALSE 92678
// result := Delete ( result , result ) ;
92656: LD_ADDR_VAR 0 3
92660: PUSH
92661: LD_VAR 0 3
92665: PPUSH
92666: LD_VAR 0 3
92670: PPUSH
92671: CALL_OW 3
92675: ST_TO_ADDR
92676: GO 92653
92678: POP
92679: POP
// end ;
92680: LD_VAR 0 3
92684: RET
// export function ComExit ( unit ) ; var tmp ; begin
92685: LD_INT 0
92687: PPUSH
92688: PPUSH
// if not IsInUnit ( unit ) then
92689: LD_VAR 0 1
92693: PPUSH
92694: CALL_OW 310
92698: NOT
92699: IFFALSE 92703
// exit ;
92701: GO 92763
// tmp := IsInUnit ( unit ) ;
92703: LD_ADDR_VAR 0 3
92707: PUSH
92708: LD_VAR 0 1
92712: PPUSH
92713: CALL_OW 310
92717: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
92718: LD_VAR 0 3
92722: PPUSH
92723: CALL_OW 247
92727: PUSH
92728: LD_INT 2
92730: EQUAL
92731: IFFALSE 92744
// ComExitVehicle ( unit ) else
92733: LD_VAR 0 1
92737: PPUSH
92738: CALL_OW 121
92742: GO 92753
// ComExitBuilding ( unit ) ;
92744: LD_VAR 0 1
92748: PPUSH
92749: CALL_OW 122
// result := tmp ;
92753: LD_ADDR_VAR 0 2
92757: PUSH
92758: LD_VAR 0 3
92762: ST_TO_ADDR
// end ;
92763: LD_VAR 0 2
92767: RET
// export function ComExitAll ( units ) ; var i ; begin
92768: LD_INT 0
92770: PPUSH
92771: PPUSH
// if not units then
92772: LD_VAR 0 1
92776: NOT
92777: IFFALSE 92781
// exit ;
92779: GO 92807
// for i in units do
92781: LD_ADDR_VAR 0 3
92785: PUSH
92786: LD_VAR 0 1
92790: PUSH
92791: FOR_IN
92792: IFFALSE 92805
// ComExit ( i ) ;
92794: LD_VAR 0 3
92798: PPUSH
92799: CALL 92685 0 1
92803: GO 92791
92805: POP
92806: POP
// end ;
92807: LD_VAR 0 2
92811: RET
// export function ResetHc ; begin
92812: LD_INT 0
92814: PPUSH
// InitHc ;
92815: CALL_OW 19
// hc_importance := 0 ;
92819: LD_ADDR_OWVAR 32
92823: PUSH
92824: LD_INT 0
92826: ST_TO_ADDR
// end ;
92827: LD_VAR 0 1
92831: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
92832: LD_INT 0
92834: PPUSH
92835: PPUSH
92836: PPUSH
// _x := ( x1 + x2 ) div 2 ;
92837: LD_ADDR_VAR 0 6
92841: PUSH
92842: LD_VAR 0 1
92846: PUSH
92847: LD_VAR 0 3
92851: PLUS
92852: PUSH
92853: LD_INT 2
92855: DIV
92856: ST_TO_ADDR
// if _x < 0 then
92857: LD_VAR 0 6
92861: PUSH
92862: LD_INT 0
92864: LESS
92865: IFFALSE 92882
// _x := _x * - 1 ;
92867: LD_ADDR_VAR 0 6
92871: PUSH
92872: LD_VAR 0 6
92876: PUSH
92877: LD_INT 1
92879: NEG
92880: MUL
92881: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
92882: LD_ADDR_VAR 0 7
92886: PUSH
92887: LD_VAR 0 2
92891: PUSH
92892: LD_VAR 0 4
92896: PLUS
92897: PUSH
92898: LD_INT 2
92900: DIV
92901: ST_TO_ADDR
// if _y < 0 then
92902: LD_VAR 0 7
92906: PUSH
92907: LD_INT 0
92909: LESS
92910: IFFALSE 92927
// _y := _y * - 1 ;
92912: LD_ADDR_VAR 0 7
92916: PUSH
92917: LD_VAR 0 7
92921: PUSH
92922: LD_INT 1
92924: NEG
92925: MUL
92926: ST_TO_ADDR
// result := [ _x , _y ] ;
92927: LD_ADDR_VAR 0 5
92931: PUSH
92932: LD_VAR 0 6
92936: PUSH
92937: LD_VAR 0 7
92941: PUSH
92942: EMPTY
92943: LIST
92944: LIST
92945: ST_TO_ADDR
// end ;
92946: LD_VAR 0 5
92950: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
92951: LD_INT 0
92953: PPUSH
92954: PPUSH
92955: PPUSH
92956: PPUSH
// task := GetTaskList ( unit ) ;
92957: LD_ADDR_VAR 0 7
92961: PUSH
92962: LD_VAR 0 1
92966: PPUSH
92967: CALL_OW 437
92971: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
92972: LD_VAR 0 7
92976: NOT
92977: PUSH
92978: LD_VAR 0 1
92982: PPUSH
92983: LD_VAR 0 2
92987: PPUSH
92988: CALL_OW 308
92992: NOT
92993: AND
92994: IFFALSE 92998
// exit ;
92996: GO 93116
// if IsInArea ( unit , area ) then
92998: LD_VAR 0 1
93002: PPUSH
93003: LD_VAR 0 2
93007: PPUSH
93008: CALL_OW 308
93012: IFFALSE 93030
// begin ComMoveToArea ( unit , goAway ) ;
93014: LD_VAR 0 1
93018: PPUSH
93019: LD_VAR 0 3
93023: PPUSH
93024: CALL_OW 113
// exit ;
93028: GO 93116
// end ; if task [ 1 ] [ 1 ] <> M then
93030: LD_VAR 0 7
93034: PUSH
93035: LD_INT 1
93037: ARRAY
93038: PUSH
93039: LD_INT 1
93041: ARRAY
93042: PUSH
93043: LD_STRING M
93045: NONEQUAL
93046: IFFALSE 93050
// exit ;
93048: GO 93116
// x := task [ 1 ] [ 2 ] ;
93050: LD_ADDR_VAR 0 5
93054: PUSH
93055: LD_VAR 0 7
93059: PUSH
93060: LD_INT 1
93062: ARRAY
93063: PUSH
93064: LD_INT 2
93066: ARRAY
93067: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
93068: LD_ADDR_VAR 0 6
93072: PUSH
93073: LD_VAR 0 7
93077: PUSH
93078: LD_INT 1
93080: ARRAY
93081: PUSH
93082: LD_INT 3
93084: ARRAY
93085: ST_TO_ADDR
// if InArea ( x , y , area ) then
93086: LD_VAR 0 5
93090: PPUSH
93091: LD_VAR 0 6
93095: PPUSH
93096: LD_VAR 0 2
93100: PPUSH
93101: CALL_OW 309
93105: IFFALSE 93116
// ComStop ( unit ) ;
93107: LD_VAR 0 1
93111: PPUSH
93112: CALL_OW 141
// end ;
93116: LD_VAR 0 4
93120: RET
// export function Abs ( value ) ; begin
93121: LD_INT 0
93123: PPUSH
// result := value ;
93124: LD_ADDR_VAR 0 2
93128: PUSH
93129: LD_VAR 0 1
93133: ST_TO_ADDR
// if value < 0 then
93134: LD_VAR 0 1
93138: PUSH
93139: LD_INT 0
93141: LESS
93142: IFFALSE 93159
// result := value * - 1 ;
93144: LD_ADDR_VAR 0 2
93148: PUSH
93149: LD_VAR 0 1
93153: PUSH
93154: LD_INT 1
93156: NEG
93157: MUL
93158: ST_TO_ADDR
// end ;
93159: LD_VAR 0 2
93163: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
93164: LD_INT 0
93166: PPUSH
93167: PPUSH
93168: PPUSH
93169: PPUSH
93170: PPUSH
93171: PPUSH
93172: PPUSH
93173: PPUSH
// if not unit or not building then
93174: LD_VAR 0 1
93178: NOT
93179: PUSH
93180: LD_VAR 0 2
93184: NOT
93185: OR
93186: IFFALSE 93190
// exit ;
93188: GO 93416
// x := GetX ( building ) ;
93190: LD_ADDR_VAR 0 4
93194: PUSH
93195: LD_VAR 0 2
93199: PPUSH
93200: CALL_OW 250
93204: ST_TO_ADDR
// y := GetY ( building ) ;
93205: LD_ADDR_VAR 0 6
93209: PUSH
93210: LD_VAR 0 2
93214: PPUSH
93215: CALL_OW 251
93219: ST_TO_ADDR
// d := GetDir ( building ) ;
93220: LD_ADDR_VAR 0 8
93224: PUSH
93225: LD_VAR 0 2
93229: PPUSH
93230: CALL_OW 254
93234: ST_TO_ADDR
// r := 4 ;
93235: LD_ADDR_VAR 0 9
93239: PUSH
93240: LD_INT 4
93242: ST_TO_ADDR
// for i := 1 to 5 do
93243: LD_ADDR_VAR 0 10
93247: PUSH
93248: DOUBLE
93249: LD_INT 1
93251: DEC
93252: ST_TO_ADDR
93253: LD_INT 5
93255: PUSH
93256: FOR_TO
93257: IFFALSE 93414
// begin _x := ShiftX ( x , d , r + i ) ;
93259: LD_ADDR_VAR 0 5
93263: PUSH
93264: LD_VAR 0 4
93268: PPUSH
93269: LD_VAR 0 8
93273: PPUSH
93274: LD_VAR 0 9
93278: PUSH
93279: LD_VAR 0 10
93283: PLUS
93284: PPUSH
93285: CALL_OW 272
93289: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
93290: LD_ADDR_VAR 0 7
93294: PUSH
93295: LD_VAR 0 6
93299: PPUSH
93300: LD_VAR 0 8
93304: PPUSH
93305: LD_VAR 0 9
93309: PUSH
93310: LD_VAR 0 10
93314: PLUS
93315: PPUSH
93316: CALL_OW 273
93320: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
93321: LD_VAR 0 5
93325: PPUSH
93326: LD_VAR 0 7
93330: PPUSH
93331: CALL_OW 488
93335: PUSH
93336: LD_VAR 0 5
93340: PPUSH
93341: LD_VAR 0 7
93345: PPUSH
93346: CALL_OW 428
93350: PPUSH
93351: CALL_OW 247
93355: PUSH
93356: LD_INT 3
93358: PUSH
93359: LD_INT 2
93361: PUSH
93362: EMPTY
93363: LIST
93364: LIST
93365: IN
93366: NOT
93367: AND
93368: IFFALSE 93412
// begin ComMoveXY ( unit , _x , _y ) ;
93370: LD_VAR 0 1
93374: PPUSH
93375: LD_VAR 0 5
93379: PPUSH
93380: LD_VAR 0 7
93384: PPUSH
93385: CALL_OW 111
// result := [ _x , _y ] ;
93389: LD_ADDR_VAR 0 3
93393: PUSH
93394: LD_VAR 0 5
93398: PUSH
93399: LD_VAR 0 7
93403: PUSH
93404: EMPTY
93405: LIST
93406: LIST
93407: ST_TO_ADDR
// exit ;
93408: POP
93409: POP
93410: GO 93416
// end ; end ;
93412: GO 93256
93414: POP
93415: POP
// end ;
93416: LD_VAR 0 3
93420: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
93421: LD_INT 0
93423: PPUSH
93424: PPUSH
93425: PPUSH
// result := 0 ;
93426: LD_ADDR_VAR 0 3
93430: PUSH
93431: LD_INT 0
93433: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
93434: LD_VAR 0 1
93438: PUSH
93439: LD_INT 0
93441: LESS
93442: PUSH
93443: LD_VAR 0 1
93447: PUSH
93448: LD_INT 8
93450: GREATER
93451: OR
93452: PUSH
93453: LD_VAR 0 2
93457: PUSH
93458: LD_INT 0
93460: LESS
93461: OR
93462: PUSH
93463: LD_VAR 0 2
93467: PUSH
93468: LD_INT 8
93470: GREATER
93471: OR
93472: IFFALSE 93476
// exit ;
93474: GO 93551
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
93476: LD_ADDR_VAR 0 4
93480: PUSH
93481: LD_INT 22
93483: PUSH
93484: LD_VAR 0 2
93488: PUSH
93489: EMPTY
93490: LIST
93491: LIST
93492: PPUSH
93493: CALL_OW 69
93497: PUSH
93498: FOR_IN
93499: IFFALSE 93549
// begin un := UnitShoot ( i ) ;
93501: LD_ADDR_VAR 0 5
93505: PUSH
93506: LD_VAR 0 4
93510: PPUSH
93511: CALL_OW 504
93515: ST_TO_ADDR
// if GetSide ( un ) = side1 then
93516: LD_VAR 0 5
93520: PPUSH
93521: CALL_OW 255
93525: PUSH
93526: LD_VAR 0 1
93530: EQUAL
93531: IFFALSE 93547
// begin result := un ;
93533: LD_ADDR_VAR 0 3
93537: PUSH
93538: LD_VAR 0 5
93542: ST_TO_ADDR
// exit ;
93543: POP
93544: POP
93545: GO 93551
// end ; end ;
93547: GO 93498
93549: POP
93550: POP
// end ;
93551: LD_VAR 0 3
93555: RET
// export function GetCargoBay ( units ) ; begin
93556: LD_INT 0
93558: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
93559: LD_ADDR_VAR 0 2
93563: PUSH
93564: LD_VAR 0 1
93568: PPUSH
93569: LD_INT 2
93571: PUSH
93572: LD_INT 34
93574: PUSH
93575: LD_INT 12
93577: PUSH
93578: EMPTY
93579: LIST
93580: LIST
93581: PUSH
93582: LD_INT 34
93584: PUSH
93585: LD_INT 51
93587: PUSH
93588: EMPTY
93589: LIST
93590: LIST
93591: PUSH
93592: LD_INT 34
93594: PUSH
93595: LD_INT 32
93597: PUSH
93598: EMPTY
93599: LIST
93600: LIST
93601: PUSH
93602: LD_INT 34
93604: PUSH
93605: LD_INT 89
93607: PUSH
93608: EMPTY
93609: LIST
93610: LIST
93611: PUSH
93612: EMPTY
93613: LIST
93614: LIST
93615: LIST
93616: LIST
93617: LIST
93618: PPUSH
93619: CALL_OW 72
93623: ST_TO_ADDR
// end ;
93624: LD_VAR 0 2
93628: RET
// export function Negate ( value ) ; begin
93629: LD_INT 0
93631: PPUSH
// result := not value ;
93632: LD_ADDR_VAR 0 2
93636: PUSH
93637: LD_VAR 0 1
93641: NOT
93642: ST_TO_ADDR
// end ;
93643: LD_VAR 0 2
93647: RET
// export function Inc ( value ) ; begin
93648: LD_INT 0
93650: PPUSH
// result := value + 1 ;
93651: LD_ADDR_VAR 0 2
93655: PUSH
93656: LD_VAR 0 1
93660: PUSH
93661: LD_INT 1
93663: PLUS
93664: ST_TO_ADDR
// end ;
93665: LD_VAR 0 2
93669: RET
// export function Dec ( value ) ; begin
93670: LD_INT 0
93672: PPUSH
// result := value - 1 ;
93673: LD_ADDR_VAR 0 2
93677: PUSH
93678: LD_VAR 0 1
93682: PUSH
93683: LD_INT 1
93685: MINUS
93686: ST_TO_ADDR
// end ;
93687: LD_VAR 0 2
93691: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
93692: LD_INT 0
93694: PPUSH
93695: PPUSH
93696: PPUSH
93697: PPUSH
93698: PPUSH
93699: PPUSH
93700: PPUSH
93701: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
93702: LD_VAR 0 1
93706: PPUSH
93707: LD_VAR 0 2
93711: PPUSH
93712: CALL_OW 488
93716: NOT
93717: PUSH
93718: LD_VAR 0 3
93722: PPUSH
93723: LD_VAR 0 4
93727: PPUSH
93728: CALL_OW 488
93732: NOT
93733: OR
93734: IFFALSE 93747
// begin result := - 1 ;
93736: LD_ADDR_VAR 0 5
93740: PUSH
93741: LD_INT 1
93743: NEG
93744: ST_TO_ADDR
// exit ;
93745: GO 93982
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
93747: LD_ADDR_VAR 0 12
93751: PUSH
93752: LD_VAR 0 1
93756: PPUSH
93757: LD_VAR 0 2
93761: PPUSH
93762: LD_VAR 0 3
93766: PPUSH
93767: LD_VAR 0 4
93771: PPUSH
93772: CALL 92832 0 4
93776: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
93777: LD_ADDR_VAR 0 11
93781: PUSH
93782: LD_VAR 0 1
93786: PPUSH
93787: LD_VAR 0 2
93791: PPUSH
93792: LD_VAR 0 12
93796: PUSH
93797: LD_INT 1
93799: ARRAY
93800: PPUSH
93801: LD_VAR 0 12
93805: PUSH
93806: LD_INT 2
93808: ARRAY
93809: PPUSH
93810: CALL_OW 298
93814: ST_TO_ADDR
// distance := 9999 ;
93815: LD_ADDR_VAR 0 10
93819: PUSH
93820: LD_INT 9999
93822: ST_TO_ADDR
// for i := 0 to 5 do
93823: LD_ADDR_VAR 0 6
93827: PUSH
93828: DOUBLE
93829: LD_INT 0
93831: DEC
93832: ST_TO_ADDR
93833: LD_INT 5
93835: PUSH
93836: FOR_TO
93837: IFFALSE 93980
// begin _x := ShiftX ( x1 , i , centerDist ) ;
93839: LD_ADDR_VAR 0 7
93843: PUSH
93844: LD_VAR 0 1
93848: PPUSH
93849: LD_VAR 0 6
93853: PPUSH
93854: LD_VAR 0 11
93858: PPUSH
93859: CALL_OW 272
93863: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
93864: LD_ADDR_VAR 0 8
93868: PUSH
93869: LD_VAR 0 2
93873: PPUSH
93874: LD_VAR 0 6
93878: PPUSH
93879: LD_VAR 0 11
93883: PPUSH
93884: CALL_OW 273
93888: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
93889: LD_VAR 0 7
93893: PPUSH
93894: LD_VAR 0 8
93898: PPUSH
93899: CALL_OW 488
93903: NOT
93904: IFFALSE 93908
// continue ;
93906: GO 93836
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
93908: LD_ADDR_VAR 0 9
93912: PUSH
93913: LD_VAR 0 12
93917: PUSH
93918: LD_INT 1
93920: ARRAY
93921: PPUSH
93922: LD_VAR 0 12
93926: PUSH
93927: LD_INT 2
93929: ARRAY
93930: PPUSH
93931: LD_VAR 0 7
93935: PPUSH
93936: LD_VAR 0 8
93940: PPUSH
93941: CALL_OW 298
93945: ST_TO_ADDR
// if tmp < distance then
93946: LD_VAR 0 9
93950: PUSH
93951: LD_VAR 0 10
93955: LESS
93956: IFFALSE 93978
// begin result := i ;
93958: LD_ADDR_VAR 0 5
93962: PUSH
93963: LD_VAR 0 6
93967: ST_TO_ADDR
// distance := tmp ;
93968: LD_ADDR_VAR 0 10
93972: PUSH
93973: LD_VAR 0 9
93977: ST_TO_ADDR
// end ; end ;
93978: GO 93836
93980: POP
93981: POP
// end ;
93982: LD_VAR 0 5
93986: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
93987: LD_INT 0
93989: PPUSH
93990: PPUSH
// if not driver or not IsInUnit ( driver ) then
93991: LD_VAR 0 1
93995: NOT
93996: PUSH
93997: LD_VAR 0 1
94001: PPUSH
94002: CALL_OW 310
94006: NOT
94007: OR
94008: IFFALSE 94012
// exit ;
94010: GO 94102
// vehicle := IsInUnit ( driver ) ;
94012: LD_ADDR_VAR 0 3
94016: PUSH
94017: LD_VAR 0 1
94021: PPUSH
94022: CALL_OW 310
94026: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94027: LD_VAR 0 1
94031: PPUSH
94032: LD_STRING \
94034: PUSH
94035: LD_INT 0
94037: PUSH
94038: LD_INT 0
94040: PUSH
94041: LD_INT 0
94043: PUSH
94044: LD_INT 0
94046: PUSH
94047: LD_INT 0
94049: PUSH
94050: LD_INT 0
94052: PUSH
94053: EMPTY
94054: LIST
94055: LIST
94056: LIST
94057: LIST
94058: LIST
94059: LIST
94060: LIST
94061: PUSH
94062: LD_STRING E
94064: PUSH
94065: LD_INT 0
94067: PUSH
94068: LD_INT 0
94070: PUSH
94071: LD_VAR 0 3
94075: PUSH
94076: LD_INT 0
94078: PUSH
94079: LD_INT 0
94081: PUSH
94082: LD_INT 0
94084: PUSH
94085: EMPTY
94086: LIST
94087: LIST
94088: LIST
94089: LIST
94090: LIST
94091: LIST
94092: LIST
94093: PUSH
94094: EMPTY
94095: LIST
94096: LIST
94097: PPUSH
94098: CALL_OW 446
// end ;
94102: LD_VAR 0 2
94106: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
94107: LD_INT 0
94109: PPUSH
94110: PPUSH
// if not driver or not IsInUnit ( driver ) then
94111: LD_VAR 0 1
94115: NOT
94116: PUSH
94117: LD_VAR 0 1
94121: PPUSH
94122: CALL_OW 310
94126: NOT
94127: OR
94128: IFFALSE 94132
// exit ;
94130: GO 94222
// vehicle := IsInUnit ( driver ) ;
94132: LD_ADDR_VAR 0 3
94136: PUSH
94137: LD_VAR 0 1
94141: PPUSH
94142: CALL_OW 310
94146: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94147: LD_VAR 0 1
94151: PPUSH
94152: LD_STRING \
94154: PUSH
94155: LD_INT 0
94157: PUSH
94158: LD_INT 0
94160: PUSH
94161: LD_INT 0
94163: PUSH
94164: LD_INT 0
94166: PUSH
94167: LD_INT 0
94169: PUSH
94170: LD_INT 0
94172: PUSH
94173: EMPTY
94174: LIST
94175: LIST
94176: LIST
94177: LIST
94178: LIST
94179: LIST
94180: LIST
94181: PUSH
94182: LD_STRING E
94184: PUSH
94185: LD_INT 0
94187: PUSH
94188: LD_INT 0
94190: PUSH
94191: LD_VAR 0 3
94195: PUSH
94196: LD_INT 0
94198: PUSH
94199: LD_INT 0
94201: PUSH
94202: LD_INT 0
94204: PUSH
94205: EMPTY
94206: LIST
94207: LIST
94208: LIST
94209: LIST
94210: LIST
94211: LIST
94212: LIST
94213: PUSH
94214: EMPTY
94215: LIST
94216: LIST
94217: PPUSH
94218: CALL_OW 447
// end ;
94222: LD_VAR 0 2
94226: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
94227: LD_INT 0
94229: PPUSH
94230: PPUSH
94231: PPUSH
// tmp := [ ] ;
94232: LD_ADDR_VAR 0 5
94236: PUSH
94237: EMPTY
94238: ST_TO_ADDR
// for i in units do
94239: LD_ADDR_VAR 0 4
94243: PUSH
94244: LD_VAR 0 1
94248: PUSH
94249: FOR_IN
94250: IFFALSE 94288
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
94252: LD_ADDR_VAR 0 5
94256: PUSH
94257: LD_VAR 0 5
94261: PPUSH
94262: LD_VAR 0 5
94266: PUSH
94267: LD_INT 1
94269: PLUS
94270: PPUSH
94271: LD_VAR 0 4
94275: PPUSH
94276: CALL_OW 256
94280: PPUSH
94281: CALL_OW 2
94285: ST_TO_ADDR
94286: GO 94249
94288: POP
94289: POP
// if not tmp then
94290: LD_VAR 0 5
94294: NOT
94295: IFFALSE 94299
// exit ;
94297: GO 94347
// if asc then
94299: LD_VAR 0 2
94303: IFFALSE 94327
// result := SortListByListAsc ( units , tmp ) else
94305: LD_ADDR_VAR 0 3
94309: PUSH
94310: LD_VAR 0 1
94314: PPUSH
94315: LD_VAR 0 5
94319: PPUSH
94320: CALL_OW 76
94324: ST_TO_ADDR
94325: GO 94347
// result := SortListByListDesc ( units , tmp ) ;
94327: LD_ADDR_VAR 0 3
94331: PUSH
94332: LD_VAR 0 1
94336: PPUSH
94337: LD_VAR 0 5
94341: PPUSH
94342: CALL_OW 77
94346: ST_TO_ADDR
// end ;
94347: LD_VAR 0 3
94351: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
94352: LD_INT 0
94354: PPUSH
94355: PPUSH
// task := GetTaskList ( mech ) ;
94356: LD_ADDR_VAR 0 4
94360: PUSH
94361: LD_VAR 0 1
94365: PPUSH
94366: CALL_OW 437
94370: ST_TO_ADDR
// if not task then
94371: LD_VAR 0 4
94375: NOT
94376: IFFALSE 94380
// exit ;
94378: GO 94422
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
94380: LD_ADDR_VAR 0 3
94384: PUSH
94385: LD_VAR 0 4
94389: PUSH
94390: LD_INT 1
94392: ARRAY
94393: PUSH
94394: LD_INT 1
94396: ARRAY
94397: PUSH
94398: LD_STRING r
94400: EQUAL
94401: PUSH
94402: LD_VAR 0 4
94406: PUSH
94407: LD_INT 1
94409: ARRAY
94410: PUSH
94411: LD_INT 4
94413: ARRAY
94414: PUSH
94415: LD_VAR 0 2
94419: EQUAL
94420: AND
94421: ST_TO_ADDR
// end ;
94422: LD_VAR 0 3
94426: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
94427: LD_INT 0
94429: PPUSH
// SetDir ( unit , d ) ;
94430: LD_VAR 0 1
94434: PPUSH
94435: LD_VAR 0 4
94439: PPUSH
94440: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
94444: LD_VAR 0 1
94448: PPUSH
94449: LD_VAR 0 2
94453: PPUSH
94454: LD_VAR 0 3
94458: PPUSH
94459: LD_VAR 0 5
94463: PPUSH
94464: CALL_OW 48
// end ;
94468: LD_VAR 0 6
94472: RET
// export function ToNaturalNumber ( number ) ; begin
94473: LD_INT 0
94475: PPUSH
// result := number div 1 ;
94476: LD_ADDR_VAR 0 2
94480: PUSH
94481: LD_VAR 0 1
94485: PUSH
94486: LD_INT 1
94488: DIV
94489: ST_TO_ADDR
// if number < 0 then
94490: LD_VAR 0 1
94494: PUSH
94495: LD_INT 0
94497: LESS
94498: IFFALSE 94508
// result := 0 ;
94500: LD_ADDR_VAR 0 2
94504: PUSH
94505: LD_INT 0
94507: ST_TO_ADDR
// end ;
94508: LD_VAR 0 2
94512: RET
// export function SortByClass ( units , class ) ; var un ; begin
94513: LD_INT 0
94515: PPUSH
94516: PPUSH
// if not units or not class then
94517: LD_VAR 0 1
94521: NOT
94522: PUSH
94523: LD_VAR 0 2
94527: NOT
94528: OR
94529: IFFALSE 94533
// exit ;
94531: GO 94628
// result := [ ] ;
94533: LD_ADDR_VAR 0 3
94537: PUSH
94538: EMPTY
94539: ST_TO_ADDR
// for un in units do
94540: LD_ADDR_VAR 0 4
94544: PUSH
94545: LD_VAR 0 1
94549: PUSH
94550: FOR_IN
94551: IFFALSE 94626
// if GetClass ( un ) = class then
94553: LD_VAR 0 4
94557: PPUSH
94558: CALL_OW 257
94562: PUSH
94563: LD_VAR 0 2
94567: EQUAL
94568: IFFALSE 94595
// result := Insert ( result , 1 , un ) else
94570: LD_ADDR_VAR 0 3
94574: PUSH
94575: LD_VAR 0 3
94579: PPUSH
94580: LD_INT 1
94582: PPUSH
94583: LD_VAR 0 4
94587: PPUSH
94588: CALL_OW 2
94592: ST_TO_ADDR
94593: GO 94624
// result := Replace ( result , result + 1 , un ) ;
94595: LD_ADDR_VAR 0 3
94599: PUSH
94600: LD_VAR 0 3
94604: PPUSH
94605: LD_VAR 0 3
94609: PUSH
94610: LD_INT 1
94612: PLUS
94613: PPUSH
94614: LD_VAR 0 4
94618: PPUSH
94619: CALL_OW 1
94623: ST_TO_ADDR
94624: GO 94550
94626: POP
94627: POP
// end ;
94628: LD_VAR 0 3
94632: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
94633: LD_INT 0
94635: PPUSH
94636: PPUSH
94637: PPUSH
94638: PPUSH
94639: PPUSH
94640: PPUSH
94641: PPUSH
// result := [ ] ;
94642: LD_ADDR_VAR 0 4
94646: PUSH
94647: EMPTY
94648: ST_TO_ADDR
// if x - r < 0 then
94649: LD_VAR 0 1
94653: PUSH
94654: LD_VAR 0 3
94658: MINUS
94659: PUSH
94660: LD_INT 0
94662: LESS
94663: IFFALSE 94675
// min_x := 0 else
94665: LD_ADDR_VAR 0 8
94669: PUSH
94670: LD_INT 0
94672: ST_TO_ADDR
94673: GO 94691
// min_x := x - r ;
94675: LD_ADDR_VAR 0 8
94679: PUSH
94680: LD_VAR 0 1
94684: PUSH
94685: LD_VAR 0 3
94689: MINUS
94690: ST_TO_ADDR
// if y - r < 0 then
94691: LD_VAR 0 2
94695: PUSH
94696: LD_VAR 0 3
94700: MINUS
94701: PUSH
94702: LD_INT 0
94704: LESS
94705: IFFALSE 94717
// min_y := 0 else
94707: LD_ADDR_VAR 0 7
94711: PUSH
94712: LD_INT 0
94714: ST_TO_ADDR
94715: GO 94733
// min_y := y - r ;
94717: LD_ADDR_VAR 0 7
94721: PUSH
94722: LD_VAR 0 2
94726: PUSH
94727: LD_VAR 0 3
94731: MINUS
94732: ST_TO_ADDR
// max_x := x + r ;
94733: LD_ADDR_VAR 0 9
94737: PUSH
94738: LD_VAR 0 1
94742: PUSH
94743: LD_VAR 0 3
94747: PLUS
94748: ST_TO_ADDR
// max_y := y + r ;
94749: LD_ADDR_VAR 0 10
94753: PUSH
94754: LD_VAR 0 2
94758: PUSH
94759: LD_VAR 0 3
94763: PLUS
94764: ST_TO_ADDR
// for _x = min_x to max_x do
94765: LD_ADDR_VAR 0 5
94769: PUSH
94770: DOUBLE
94771: LD_VAR 0 8
94775: DEC
94776: ST_TO_ADDR
94777: LD_VAR 0 9
94781: PUSH
94782: FOR_TO
94783: IFFALSE 94884
// for _y = min_y to max_y do
94785: LD_ADDR_VAR 0 6
94789: PUSH
94790: DOUBLE
94791: LD_VAR 0 7
94795: DEC
94796: ST_TO_ADDR
94797: LD_VAR 0 10
94801: PUSH
94802: FOR_TO
94803: IFFALSE 94880
// begin if not ValidHex ( _x , _y ) then
94805: LD_VAR 0 5
94809: PPUSH
94810: LD_VAR 0 6
94814: PPUSH
94815: CALL_OW 488
94819: NOT
94820: IFFALSE 94824
// continue ;
94822: GO 94802
// if GetResourceTypeXY ( _x , _y ) then
94824: LD_VAR 0 5
94828: PPUSH
94829: LD_VAR 0 6
94833: PPUSH
94834: CALL_OW 283
94838: IFFALSE 94878
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
94840: LD_ADDR_VAR 0 4
94844: PUSH
94845: LD_VAR 0 4
94849: PPUSH
94850: LD_VAR 0 4
94854: PUSH
94855: LD_INT 1
94857: PLUS
94858: PPUSH
94859: LD_VAR 0 5
94863: PUSH
94864: LD_VAR 0 6
94868: PUSH
94869: EMPTY
94870: LIST
94871: LIST
94872: PPUSH
94873: CALL_OW 1
94877: ST_TO_ADDR
// end ;
94878: GO 94802
94880: POP
94881: POP
94882: GO 94782
94884: POP
94885: POP
// end ;
94886: LD_VAR 0 4
94890: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
94891: LD_INT 0
94893: PPUSH
94894: PPUSH
94895: PPUSH
94896: PPUSH
94897: PPUSH
94898: PPUSH
94899: PPUSH
94900: PPUSH
// if not units then
94901: LD_VAR 0 1
94905: NOT
94906: IFFALSE 94910
// exit ;
94908: GO 95434
// result := UnitFilter ( units , [ f_ok ] ) ;
94910: LD_ADDR_VAR 0 3
94914: PUSH
94915: LD_VAR 0 1
94919: PPUSH
94920: LD_INT 50
94922: PUSH
94923: EMPTY
94924: LIST
94925: PPUSH
94926: CALL_OW 72
94930: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
94931: LD_ADDR_VAR 0 8
94935: PUSH
94936: LD_VAR 0 1
94940: PUSH
94941: LD_INT 1
94943: ARRAY
94944: PPUSH
94945: CALL_OW 255
94949: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
94950: LD_ADDR_VAR 0 10
94954: PUSH
94955: LD_INT 29
94957: PUSH
94958: LD_INT 91
94960: PUSH
94961: LD_INT 49
94963: PUSH
94964: EMPTY
94965: LIST
94966: LIST
94967: LIST
94968: ST_TO_ADDR
// if not result then
94969: LD_VAR 0 3
94973: NOT
94974: IFFALSE 94978
// exit ;
94976: GO 95434
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
94978: LD_ADDR_VAR 0 5
94982: PUSH
94983: LD_INT 81
94985: PUSH
94986: LD_VAR 0 8
94990: PUSH
94991: EMPTY
94992: LIST
94993: LIST
94994: PPUSH
94995: CALL_OW 69
94999: ST_TO_ADDR
// for i in result do
95000: LD_ADDR_VAR 0 4
95004: PUSH
95005: LD_VAR 0 3
95009: PUSH
95010: FOR_IN
95011: IFFALSE 95432
// begin tag := GetTag ( i ) + 1 ;
95013: LD_ADDR_VAR 0 9
95017: PUSH
95018: LD_VAR 0 4
95022: PPUSH
95023: CALL_OW 110
95027: PUSH
95028: LD_INT 1
95030: PLUS
95031: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
95032: LD_ADDR_VAR 0 7
95036: PUSH
95037: LD_VAR 0 4
95041: PPUSH
95042: CALL_OW 250
95046: PPUSH
95047: LD_VAR 0 4
95051: PPUSH
95052: CALL_OW 251
95056: PPUSH
95057: LD_INT 6
95059: PPUSH
95060: CALL 94633 0 3
95064: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
95065: LD_VAR 0 4
95069: PPUSH
95070: CALL_OW 247
95074: PUSH
95075: LD_INT 2
95077: EQUAL
95078: PUSH
95079: LD_VAR 0 7
95083: AND
95084: PUSH
95085: LD_VAR 0 4
95089: PPUSH
95090: CALL_OW 264
95094: PUSH
95095: LD_VAR 0 10
95099: IN
95100: NOT
95101: AND
95102: IFFALSE 95141
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
95104: LD_VAR 0 4
95108: PPUSH
95109: LD_VAR 0 7
95113: PUSH
95114: LD_INT 1
95116: ARRAY
95117: PUSH
95118: LD_INT 1
95120: ARRAY
95121: PPUSH
95122: LD_VAR 0 7
95126: PUSH
95127: LD_INT 1
95129: ARRAY
95130: PUSH
95131: LD_INT 2
95133: ARRAY
95134: PPUSH
95135: CALL_OW 116
95139: GO 95430
// if path > tag then
95141: LD_VAR 0 2
95145: PUSH
95146: LD_VAR 0 9
95150: GREATER
95151: IFFALSE 95359
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
95153: LD_ADDR_VAR 0 6
95157: PUSH
95158: LD_VAR 0 5
95162: PPUSH
95163: LD_INT 91
95165: PUSH
95166: LD_VAR 0 4
95170: PUSH
95171: LD_INT 8
95173: PUSH
95174: EMPTY
95175: LIST
95176: LIST
95177: LIST
95178: PPUSH
95179: CALL_OW 72
95183: ST_TO_ADDR
// if nearEnemy then
95184: LD_VAR 0 6
95188: IFFALSE 95257
// begin if GetWeapon ( i ) = ru_time_lapser then
95190: LD_VAR 0 4
95194: PPUSH
95195: CALL_OW 264
95199: PUSH
95200: LD_INT 49
95202: EQUAL
95203: IFFALSE 95231
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
95205: LD_VAR 0 4
95209: PPUSH
95210: LD_VAR 0 6
95214: PPUSH
95215: LD_VAR 0 4
95219: PPUSH
95220: CALL_OW 74
95224: PPUSH
95225: CALL_OW 112
95229: GO 95255
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
95231: LD_VAR 0 4
95235: PPUSH
95236: LD_VAR 0 6
95240: PPUSH
95241: LD_VAR 0 4
95245: PPUSH
95246: CALL_OW 74
95250: PPUSH
95251: CALL 96359 0 2
// end else
95255: GO 95357
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
95257: LD_VAR 0 4
95261: PPUSH
95262: LD_VAR 0 2
95266: PUSH
95267: LD_VAR 0 9
95271: ARRAY
95272: PUSH
95273: LD_INT 1
95275: ARRAY
95276: PPUSH
95277: LD_VAR 0 2
95281: PUSH
95282: LD_VAR 0 9
95286: ARRAY
95287: PUSH
95288: LD_INT 2
95290: ARRAY
95291: PPUSH
95292: CALL_OW 297
95296: PUSH
95297: LD_INT 6
95299: GREATER
95300: IFFALSE 95343
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
95302: LD_VAR 0 4
95306: PPUSH
95307: LD_VAR 0 2
95311: PUSH
95312: LD_VAR 0 9
95316: ARRAY
95317: PUSH
95318: LD_INT 1
95320: ARRAY
95321: PPUSH
95322: LD_VAR 0 2
95326: PUSH
95327: LD_VAR 0 9
95331: ARRAY
95332: PUSH
95333: LD_INT 2
95335: ARRAY
95336: PPUSH
95337: CALL_OW 114
95341: GO 95357
// SetTag ( i , tag ) ;
95343: LD_VAR 0 4
95347: PPUSH
95348: LD_VAR 0 9
95352: PPUSH
95353: CALL_OW 109
// end else
95357: GO 95430
// if enemy then
95359: LD_VAR 0 5
95363: IFFALSE 95430
// begin if GetWeapon ( i ) = ru_time_lapser then
95365: LD_VAR 0 4
95369: PPUSH
95370: CALL_OW 264
95374: PUSH
95375: LD_INT 49
95377: EQUAL
95378: IFFALSE 95406
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
95380: LD_VAR 0 4
95384: PPUSH
95385: LD_VAR 0 5
95389: PPUSH
95390: LD_VAR 0 4
95394: PPUSH
95395: CALL_OW 74
95399: PPUSH
95400: CALL_OW 112
95404: GO 95430
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
95406: LD_VAR 0 4
95410: PPUSH
95411: LD_VAR 0 5
95415: PPUSH
95416: LD_VAR 0 4
95420: PPUSH
95421: CALL_OW 74
95425: PPUSH
95426: CALL 96359 0 2
// end ; end ;
95430: GO 95010
95432: POP
95433: POP
// end ;
95434: LD_VAR 0 3
95438: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
95439: LD_INT 0
95441: PPUSH
95442: PPUSH
95443: PPUSH
// if not unit or IsInUnit ( unit ) then
95444: LD_VAR 0 1
95448: NOT
95449: PUSH
95450: LD_VAR 0 1
95454: PPUSH
95455: CALL_OW 310
95459: OR
95460: IFFALSE 95464
// exit ;
95462: GO 95555
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
95464: LD_ADDR_VAR 0 4
95468: PUSH
95469: LD_VAR 0 1
95473: PPUSH
95474: CALL_OW 250
95478: PPUSH
95479: LD_VAR 0 2
95483: PPUSH
95484: LD_INT 1
95486: PPUSH
95487: CALL_OW 272
95491: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
95492: LD_ADDR_VAR 0 5
95496: PUSH
95497: LD_VAR 0 1
95501: PPUSH
95502: CALL_OW 251
95506: PPUSH
95507: LD_VAR 0 2
95511: PPUSH
95512: LD_INT 1
95514: PPUSH
95515: CALL_OW 273
95519: ST_TO_ADDR
// if ValidHex ( x , y ) then
95520: LD_VAR 0 4
95524: PPUSH
95525: LD_VAR 0 5
95529: PPUSH
95530: CALL_OW 488
95534: IFFALSE 95555
// ComTurnXY ( unit , x , y ) ;
95536: LD_VAR 0 1
95540: PPUSH
95541: LD_VAR 0 4
95545: PPUSH
95546: LD_VAR 0 5
95550: PPUSH
95551: CALL_OW 118
// end ;
95555: LD_VAR 0 3
95559: RET
// export function SeeUnits ( side , units ) ; var i ; begin
95560: LD_INT 0
95562: PPUSH
95563: PPUSH
// result := false ;
95564: LD_ADDR_VAR 0 3
95568: PUSH
95569: LD_INT 0
95571: ST_TO_ADDR
// if not units then
95572: LD_VAR 0 2
95576: NOT
95577: IFFALSE 95581
// exit ;
95579: GO 95626
// for i in units do
95581: LD_ADDR_VAR 0 4
95585: PUSH
95586: LD_VAR 0 2
95590: PUSH
95591: FOR_IN
95592: IFFALSE 95624
// if See ( side , i ) then
95594: LD_VAR 0 1
95598: PPUSH
95599: LD_VAR 0 4
95603: PPUSH
95604: CALL_OW 292
95608: IFFALSE 95622
// begin result := true ;
95610: LD_ADDR_VAR 0 3
95614: PUSH
95615: LD_INT 1
95617: ST_TO_ADDR
// exit ;
95618: POP
95619: POP
95620: GO 95626
// end ;
95622: GO 95591
95624: POP
95625: POP
// end ;
95626: LD_VAR 0 3
95630: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
95631: LD_INT 0
95633: PPUSH
95634: PPUSH
95635: PPUSH
95636: PPUSH
// if not unit or not points then
95637: LD_VAR 0 1
95641: NOT
95642: PUSH
95643: LD_VAR 0 2
95647: NOT
95648: OR
95649: IFFALSE 95653
// exit ;
95651: GO 95743
// dist := 99999 ;
95653: LD_ADDR_VAR 0 5
95657: PUSH
95658: LD_INT 99999
95660: ST_TO_ADDR
// for i in points do
95661: LD_ADDR_VAR 0 4
95665: PUSH
95666: LD_VAR 0 2
95670: PUSH
95671: FOR_IN
95672: IFFALSE 95741
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
95674: LD_ADDR_VAR 0 6
95678: PUSH
95679: LD_VAR 0 1
95683: PPUSH
95684: LD_VAR 0 4
95688: PUSH
95689: LD_INT 1
95691: ARRAY
95692: PPUSH
95693: LD_VAR 0 4
95697: PUSH
95698: LD_INT 2
95700: ARRAY
95701: PPUSH
95702: CALL_OW 297
95706: ST_TO_ADDR
// if tmpDist < dist then
95707: LD_VAR 0 6
95711: PUSH
95712: LD_VAR 0 5
95716: LESS
95717: IFFALSE 95739
// begin result := i ;
95719: LD_ADDR_VAR 0 3
95723: PUSH
95724: LD_VAR 0 4
95728: ST_TO_ADDR
// dist := tmpDist ;
95729: LD_ADDR_VAR 0 5
95733: PUSH
95734: LD_VAR 0 6
95738: ST_TO_ADDR
// end ; end ;
95739: GO 95671
95741: POP
95742: POP
// end ;
95743: LD_VAR 0 3
95747: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
95748: LD_INT 0
95750: PPUSH
// uc_side := side ;
95751: LD_ADDR_OWVAR 20
95755: PUSH
95756: LD_VAR 0 1
95760: ST_TO_ADDR
// uc_nation := 3 ;
95761: LD_ADDR_OWVAR 21
95765: PUSH
95766: LD_INT 3
95768: ST_TO_ADDR
// vc_chassis := 25 ;
95769: LD_ADDR_OWVAR 37
95773: PUSH
95774: LD_INT 25
95776: ST_TO_ADDR
// vc_engine := engine_siberite ;
95777: LD_ADDR_OWVAR 39
95781: PUSH
95782: LD_INT 3
95784: ST_TO_ADDR
// vc_control := control_computer ;
95785: LD_ADDR_OWVAR 38
95789: PUSH
95790: LD_INT 3
95792: ST_TO_ADDR
// vc_weapon := 59 ;
95793: LD_ADDR_OWVAR 40
95797: PUSH
95798: LD_INT 59
95800: ST_TO_ADDR
// result := CreateVehicle ;
95801: LD_ADDR_VAR 0 5
95805: PUSH
95806: CALL_OW 45
95810: ST_TO_ADDR
// SetDir ( result , d ) ;
95811: LD_VAR 0 5
95815: PPUSH
95816: LD_VAR 0 4
95820: PPUSH
95821: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
95825: LD_VAR 0 5
95829: PPUSH
95830: LD_VAR 0 2
95834: PPUSH
95835: LD_VAR 0 3
95839: PPUSH
95840: LD_INT 0
95842: PPUSH
95843: CALL_OW 48
// end ;
95847: LD_VAR 0 5
95851: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
95852: LD_INT 0
95854: PPUSH
95855: PPUSH
95856: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
95857: LD_ADDR_VAR 0 2
95861: PUSH
95862: LD_INT 0
95864: PUSH
95865: LD_INT 0
95867: PUSH
95868: LD_INT 0
95870: PUSH
95871: LD_INT 0
95873: PUSH
95874: EMPTY
95875: LIST
95876: LIST
95877: LIST
95878: LIST
95879: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
95880: LD_VAR 0 1
95884: NOT
95885: PUSH
95886: LD_VAR 0 1
95890: PPUSH
95891: CALL_OW 264
95895: PUSH
95896: LD_INT 12
95898: PUSH
95899: LD_INT 51
95901: PUSH
95902: LD_INT 32
95904: PUSH
95905: LD_INT 89
95907: PUSH
95908: EMPTY
95909: LIST
95910: LIST
95911: LIST
95912: LIST
95913: IN
95914: NOT
95915: OR
95916: IFFALSE 95920
// exit ;
95918: GO 96018
// for i := 1 to 3 do
95920: LD_ADDR_VAR 0 3
95924: PUSH
95925: DOUBLE
95926: LD_INT 1
95928: DEC
95929: ST_TO_ADDR
95930: LD_INT 3
95932: PUSH
95933: FOR_TO
95934: IFFALSE 96016
// begin tmp := GetCargo ( cargo , i ) ;
95936: LD_ADDR_VAR 0 4
95940: PUSH
95941: LD_VAR 0 1
95945: PPUSH
95946: LD_VAR 0 3
95950: PPUSH
95951: CALL_OW 289
95955: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
95956: LD_ADDR_VAR 0 2
95960: PUSH
95961: LD_VAR 0 2
95965: PPUSH
95966: LD_VAR 0 3
95970: PPUSH
95971: LD_VAR 0 4
95975: PPUSH
95976: CALL_OW 1
95980: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
95981: LD_ADDR_VAR 0 2
95985: PUSH
95986: LD_VAR 0 2
95990: PPUSH
95991: LD_INT 4
95993: PPUSH
95994: LD_VAR 0 2
95998: PUSH
95999: LD_INT 4
96001: ARRAY
96002: PUSH
96003: LD_VAR 0 4
96007: PLUS
96008: PPUSH
96009: CALL_OW 1
96013: ST_TO_ADDR
// end ;
96014: GO 95933
96016: POP
96017: POP
// end ;
96018: LD_VAR 0 2
96022: RET
// export function Length ( array ) ; begin
96023: LD_INT 0
96025: PPUSH
// result := array + 0 ;
96026: LD_ADDR_VAR 0 2
96030: PUSH
96031: LD_VAR 0 1
96035: PUSH
96036: LD_INT 0
96038: PLUS
96039: ST_TO_ADDR
// end ;
96040: LD_VAR 0 2
96044: RET
// export function PrepareArray ( array ) ; begin
96045: LD_INT 0
96047: PPUSH
// result := array diff 0 ;
96048: LD_ADDR_VAR 0 2
96052: PUSH
96053: LD_VAR 0 1
96057: PUSH
96058: LD_INT 0
96060: DIFF
96061: ST_TO_ADDR
// if not result [ 1 ] then
96062: LD_VAR 0 2
96066: PUSH
96067: LD_INT 1
96069: ARRAY
96070: NOT
96071: IFFALSE 96091
// result := Delete ( result , 1 ) ;
96073: LD_ADDR_VAR 0 2
96077: PUSH
96078: LD_VAR 0 2
96082: PPUSH
96083: LD_INT 1
96085: PPUSH
96086: CALL_OW 3
96090: ST_TO_ADDR
// end ;
96091: LD_VAR 0 2
96095: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
96096: LD_INT 0
96098: PPUSH
96099: PPUSH
96100: PPUSH
96101: PPUSH
// sibRocketRange := 25 ;
96102: LD_ADDR_VAR 0 6
96106: PUSH
96107: LD_INT 25
96109: ST_TO_ADDR
// result := false ;
96110: LD_ADDR_VAR 0 4
96114: PUSH
96115: LD_INT 0
96117: ST_TO_ADDR
// for i := 0 to 5 do
96118: LD_ADDR_VAR 0 5
96122: PUSH
96123: DOUBLE
96124: LD_INT 0
96126: DEC
96127: ST_TO_ADDR
96128: LD_INT 5
96130: PUSH
96131: FOR_TO
96132: IFFALSE 96199
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
96134: LD_VAR 0 1
96138: PPUSH
96139: LD_VAR 0 5
96143: PPUSH
96144: LD_VAR 0 6
96148: PPUSH
96149: CALL_OW 272
96153: PPUSH
96154: LD_VAR 0 2
96158: PPUSH
96159: LD_VAR 0 5
96163: PPUSH
96164: LD_VAR 0 6
96168: PPUSH
96169: CALL_OW 273
96173: PPUSH
96174: LD_VAR 0 3
96178: PPUSH
96179: CALL_OW 309
96183: IFFALSE 96197
// begin result := true ;
96185: LD_ADDR_VAR 0 4
96189: PUSH
96190: LD_INT 1
96192: ST_TO_ADDR
// exit ;
96193: POP
96194: POP
96195: GO 96201
// end ;
96197: GO 96131
96199: POP
96200: POP
// end ;
96201: LD_VAR 0 4
96205: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
96206: LD_INT 0
96208: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
96209: LD_VAR 0 1
96213: PPUSH
96214: LD_VAR 0 2
96218: PPUSH
96219: LD_INT 0
96221: PPUSH
96222: LD_INT 0
96224: PPUSH
96225: LD_INT 1
96227: PPUSH
96228: LD_INT 0
96230: PPUSH
96231: CALL_OW 587
// end ;
96235: LD_VAR 0 3
96239: RET
// export function CenterOnNow ( unit ) ; begin
96240: LD_INT 0
96242: PPUSH
// result := IsInUnit ( unit ) ;
96243: LD_ADDR_VAR 0 2
96247: PUSH
96248: LD_VAR 0 1
96252: PPUSH
96253: CALL_OW 310
96257: ST_TO_ADDR
// if not result then
96258: LD_VAR 0 2
96262: NOT
96263: IFFALSE 96275
// result := unit ;
96265: LD_ADDR_VAR 0 2
96269: PUSH
96270: LD_VAR 0 1
96274: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
96275: LD_VAR 0 1
96279: PPUSH
96280: CALL_OW 87
// end ;
96284: LD_VAR 0 2
96288: RET
// export function ComMoveHex ( unit , hex ) ; begin
96289: LD_INT 0
96291: PPUSH
// if not hex then
96292: LD_VAR 0 2
96296: NOT
96297: IFFALSE 96301
// exit ;
96299: GO 96354
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
96301: LD_VAR 0 2
96305: PUSH
96306: LD_INT 1
96308: ARRAY
96309: PPUSH
96310: LD_VAR 0 2
96314: PUSH
96315: LD_INT 2
96317: ARRAY
96318: PPUSH
96319: CALL_OW 428
96323: IFFALSE 96327
// exit ;
96325: GO 96354
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
96327: LD_VAR 0 1
96331: PPUSH
96332: LD_VAR 0 2
96336: PUSH
96337: LD_INT 1
96339: ARRAY
96340: PPUSH
96341: LD_VAR 0 2
96345: PUSH
96346: LD_INT 2
96348: ARRAY
96349: PPUSH
96350: CALL_OW 111
// end ;
96354: LD_VAR 0 3
96358: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
96359: LD_INT 0
96361: PPUSH
96362: PPUSH
96363: PPUSH
// if not unit or not enemy then
96364: LD_VAR 0 1
96368: NOT
96369: PUSH
96370: LD_VAR 0 2
96374: NOT
96375: OR
96376: IFFALSE 96380
// exit ;
96378: GO 96504
// x := GetX ( enemy ) ;
96380: LD_ADDR_VAR 0 4
96384: PUSH
96385: LD_VAR 0 2
96389: PPUSH
96390: CALL_OW 250
96394: ST_TO_ADDR
// y := GetY ( enemy ) ;
96395: LD_ADDR_VAR 0 5
96399: PUSH
96400: LD_VAR 0 2
96404: PPUSH
96405: CALL_OW 251
96409: ST_TO_ADDR
// if ValidHex ( x , y ) then
96410: LD_VAR 0 4
96414: PPUSH
96415: LD_VAR 0 5
96419: PPUSH
96420: CALL_OW 488
96424: IFFALSE 96504
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
96426: LD_VAR 0 2
96430: PPUSH
96431: CALL_OW 247
96435: PUSH
96436: LD_INT 3
96438: PUSH
96439: LD_INT 2
96441: PUSH
96442: EMPTY
96443: LIST
96444: LIST
96445: IN
96446: PUSH
96447: LD_VAR 0 1
96451: PPUSH
96452: CALL_OW 255
96456: PPUSH
96457: LD_VAR 0 2
96461: PPUSH
96462: CALL_OW 292
96466: AND
96467: IFFALSE 96485
// ComAttackUnit ( unit , enemy ) else
96469: LD_VAR 0 1
96473: PPUSH
96474: LD_VAR 0 2
96478: PPUSH
96479: CALL_OW 115
96483: GO 96504
// ComAgressiveMove ( unit , x , y ) ;
96485: LD_VAR 0 1
96489: PPUSH
96490: LD_VAR 0 4
96494: PPUSH
96495: LD_VAR 0 5
96499: PPUSH
96500: CALL_OW 114
// end ;
96504: LD_VAR 0 3
96508: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
96509: LD_INT 0
96511: PPUSH
96512: PPUSH
96513: PPUSH
// list := AreaToList ( area , 0 ) ;
96514: LD_ADDR_VAR 0 5
96518: PUSH
96519: LD_VAR 0 1
96523: PPUSH
96524: LD_INT 0
96526: PPUSH
96527: CALL_OW 517
96531: ST_TO_ADDR
// if not list then
96532: LD_VAR 0 5
96536: NOT
96537: IFFALSE 96541
// exit ;
96539: GO 96671
// if all then
96541: LD_VAR 0 2
96545: IFFALSE 96633
// begin for i := 1 to list [ 1 ] do
96547: LD_ADDR_VAR 0 4
96551: PUSH
96552: DOUBLE
96553: LD_INT 1
96555: DEC
96556: ST_TO_ADDR
96557: LD_VAR 0 5
96561: PUSH
96562: LD_INT 1
96564: ARRAY
96565: PUSH
96566: FOR_TO
96567: IFFALSE 96629
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
96569: LD_ADDR_VAR 0 3
96573: PUSH
96574: LD_VAR 0 3
96578: PPUSH
96579: LD_VAR 0 3
96583: PUSH
96584: LD_INT 1
96586: PLUS
96587: PPUSH
96588: LD_VAR 0 5
96592: PUSH
96593: LD_INT 1
96595: ARRAY
96596: PUSH
96597: LD_VAR 0 4
96601: ARRAY
96602: PUSH
96603: LD_VAR 0 5
96607: PUSH
96608: LD_INT 2
96610: ARRAY
96611: PUSH
96612: LD_VAR 0 4
96616: ARRAY
96617: PUSH
96618: EMPTY
96619: LIST
96620: LIST
96621: PPUSH
96622: CALL_OW 1
96626: ST_TO_ADDR
96627: GO 96566
96629: POP
96630: POP
// exit ;
96631: GO 96671
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
96633: LD_ADDR_VAR 0 3
96637: PUSH
96638: LD_VAR 0 5
96642: PUSH
96643: LD_INT 1
96645: ARRAY
96646: PUSH
96647: LD_INT 1
96649: ARRAY
96650: PUSH
96651: LD_VAR 0 5
96655: PUSH
96656: LD_INT 2
96658: ARRAY
96659: PUSH
96660: LD_INT 1
96662: ARRAY
96663: PUSH
96664: EMPTY
96665: LIST
96666: LIST
96667: PUSH
96668: EMPTY
96669: LIST
96670: ST_TO_ADDR
// end ;
96671: LD_VAR 0 3
96675: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
96676: LD_INT 0
96678: PPUSH
96679: PPUSH
// list := AreaToList ( area , 0 ) ;
96680: LD_ADDR_VAR 0 4
96684: PUSH
96685: LD_VAR 0 1
96689: PPUSH
96690: LD_INT 0
96692: PPUSH
96693: CALL_OW 517
96697: ST_TO_ADDR
// if not list then
96698: LD_VAR 0 4
96702: NOT
96703: IFFALSE 96707
// exit ;
96705: GO 96748
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
96707: LD_ADDR_VAR 0 3
96711: PUSH
96712: LD_VAR 0 4
96716: PUSH
96717: LD_INT 1
96719: ARRAY
96720: PUSH
96721: LD_INT 1
96723: ARRAY
96724: PUSH
96725: LD_VAR 0 4
96729: PUSH
96730: LD_INT 2
96732: ARRAY
96733: PUSH
96734: LD_INT 1
96736: ARRAY
96737: PUSH
96738: LD_VAR 0 2
96742: PUSH
96743: EMPTY
96744: LIST
96745: LIST
96746: LIST
96747: ST_TO_ADDR
// end ;
96748: LD_VAR 0 3
96752: RET
// export function First ( array ) ; begin
96753: LD_INT 0
96755: PPUSH
// if not array then
96756: LD_VAR 0 1
96760: NOT
96761: IFFALSE 96765
// exit ;
96763: GO 96779
// result := array [ 1 ] ;
96765: LD_ADDR_VAR 0 2
96769: PUSH
96770: LD_VAR 0 1
96774: PUSH
96775: LD_INT 1
96777: ARRAY
96778: ST_TO_ADDR
// end ;
96779: LD_VAR 0 2
96783: RET
// export function Last ( array ) ; begin
96784: LD_INT 0
96786: PPUSH
// if not array then
96787: LD_VAR 0 1
96791: NOT
96792: IFFALSE 96796
// exit ;
96794: GO 96812
// result := array [ array ] ;
96796: LD_ADDR_VAR 0 2
96800: PUSH
96801: LD_VAR 0 1
96805: PUSH
96806: LD_VAR 0 1
96810: ARRAY
96811: ST_TO_ADDR
// end ;
96812: LD_VAR 0 2
96816: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
96817: LD_INT 0
96819: PPUSH
96820: PPUSH
// result := [ ] ;
96821: LD_ADDR_VAR 0 5
96825: PUSH
96826: EMPTY
96827: ST_TO_ADDR
// if not array then
96828: LD_VAR 0 1
96832: NOT
96833: IFFALSE 96837
// exit ;
96835: GO 96949
// for i := 1 to array do
96837: LD_ADDR_VAR 0 6
96841: PUSH
96842: DOUBLE
96843: LD_INT 1
96845: DEC
96846: ST_TO_ADDR
96847: LD_VAR 0 1
96851: PUSH
96852: FOR_TO
96853: IFFALSE 96947
// if array [ i ] [ index ] = value then
96855: LD_VAR 0 1
96859: PUSH
96860: LD_VAR 0 6
96864: ARRAY
96865: PUSH
96866: LD_VAR 0 2
96870: ARRAY
96871: PUSH
96872: LD_VAR 0 3
96876: EQUAL
96877: IFFALSE 96945
// begin if indexColumn then
96879: LD_VAR 0 4
96883: IFFALSE 96919
// result := Join ( result , array [ i ] [ indexColumn ] ) else
96885: LD_ADDR_VAR 0 5
96889: PUSH
96890: LD_VAR 0 5
96894: PPUSH
96895: LD_VAR 0 1
96899: PUSH
96900: LD_VAR 0 6
96904: ARRAY
96905: PUSH
96906: LD_VAR 0 4
96910: ARRAY
96911: PPUSH
96912: CALL 92287 0 2
96916: ST_TO_ADDR
96917: GO 96945
// result := Join ( result , array [ i ] ) ;
96919: LD_ADDR_VAR 0 5
96923: PUSH
96924: LD_VAR 0 5
96928: PPUSH
96929: LD_VAR 0 1
96933: PUSH
96934: LD_VAR 0 6
96938: ARRAY
96939: PPUSH
96940: CALL 92287 0 2
96944: ST_TO_ADDR
// end ;
96945: GO 96852
96947: POP
96948: POP
// end ;
96949: LD_VAR 0 5
96953: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
96954: LD_INT 0
96956: PPUSH
96957: PPUSH
96958: PPUSH
// if btype = b_depot then
96959: LD_VAR 0 2
96963: PUSH
96964: LD_INT 0
96966: EQUAL
96967: IFFALSE 96979
// begin result := true ;
96969: LD_ADDR_VAR 0 3
96973: PUSH
96974: LD_INT 1
96976: ST_TO_ADDR
// exit ;
96977: GO 97095
// end ; pom := GetBase ( depot ) ;
96979: LD_ADDR_VAR 0 4
96983: PUSH
96984: LD_VAR 0 1
96988: PPUSH
96989: CALL_OW 274
96993: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
96994: LD_ADDR_VAR 0 5
96998: PUSH
96999: LD_VAR 0 2
97003: PPUSH
97004: LD_VAR 0 1
97008: PPUSH
97009: CALL_OW 248
97013: PPUSH
97014: CALL_OW 450
97018: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
97019: LD_ADDR_VAR 0 3
97023: PUSH
97024: LD_VAR 0 4
97028: PPUSH
97029: LD_INT 1
97031: PPUSH
97032: CALL_OW 275
97036: PUSH
97037: LD_VAR 0 5
97041: PUSH
97042: LD_INT 1
97044: ARRAY
97045: GREATEREQUAL
97046: PUSH
97047: LD_VAR 0 4
97051: PPUSH
97052: LD_INT 2
97054: PPUSH
97055: CALL_OW 275
97059: PUSH
97060: LD_VAR 0 5
97064: PUSH
97065: LD_INT 2
97067: ARRAY
97068: GREATEREQUAL
97069: AND
97070: PUSH
97071: LD_VAR 0 4
97075: PPUSH
97076: LD_INT 3
97078: PPUSH
97079: CALL_OW 275
97083: PUSH
97084: LD_VAR 0 5
97088: PUSH
97089: LD_INT 3
97091: ARRAY
97092: GREATEREQUAL
97093: AND
97094: ST_TO_ADDR
// end ;
97095: LD_VAR 0 3
97099: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
97100: LD_INT 0
97102: PPUSH
// if not vehicles or not parkingPoint then
97103: LD_VAR 0 1
97107: NOT
97108: PUSH
97109: LD_VAR 0 2
97113: NOT
97114: OR
97115: IFFALSE 97119
// exit ;
97117: GO 97217
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
97119: LD_ADDR_VAR 0 1
97123: PUSH
97124: LD_VAR 0 1
97128: PPUSH
97129: LD_INT 50
97131: PUSH
97132: EMPTY
97133: LIST
97134: PUSH
97135: LD_INT 3
97137: PUSH
97138: LD_INT 92
97140: PUSH
97141: LD_VAR 0 2
97145: PUSH
97146: LD_INT 1
97148: ARRAY
97149: PUSH
97150: LD_VAR 0 2
97154: PUSH
97155: LD_INT 2
97157: ARRAY
97158: PUSH
97159: LD_INT 8
97161: PUSH
97162: EMPTY
97163: LIST
97164: LIST
97165: LIST
97166: LIST
97167: PUSH
97168: EMPTY
97169: LIST
97170: LIST
97171: PUSH
97172: EMPTY
97173: LIST
97174: LIST
97175: PPUSH
97176: CALL_OW 72
97180: ST_TO_ADDR
// if not vehicles then
97181: LD_VAR 0 1
97185: NOT
97186: IFFALSE 97190
// exit ;
97188: GO 97217
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
97190: LD_VAR 0 1
97194: PPUSH
97195: LD_VAR 0 2
97199: PUSH
97200: LD_INT 1
97202: ARRAY
97203: PPUSH
97204: LD_VAR 0 2
97208: PUSH
97209: LD_INT 2
97211: ARRAY
97212: PPUSH
97213: CALL_OW 111
// end ; end_of_file
97217: LD_VAR 0 3
97221: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
97222: LD_VAR 0 1
97226: PUSH
97227: LD_INT 200
97229: DOUBLE
97230: GREATEREQUAL
97231: IFFALSE 97239
97233: LD_INT 299
97235: DOUBLE
97236: LESSEQUAL
97237: IFTRUE 97241
97239: GO 97273
97241: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
97242: LD_VAR 0 1
97246: PPUSH
97247: LD_VAR 0 2
97251: PPUSH
97252: LD_VAR 0 3
97256: PPUSH
97257: LD_VAR 0 4
97261: PPUSH
97262: LD_VAR 0 5
97266: PPUSH
97267: CALL 50078 0 5
97271: GO 97350
97273: LD_INT 300
97275: DOUBLE
97276: GREATEREQUAL
97277: IFFALSE 97285
97279: LD_INT 399
97281: DOUBLE
97282: LESSEQUAL
97283: IFTRUE 97287
97285: GO 97349
97287: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
97288: LD_VAR 0 1
97292: PPUSH
97293: LD_VAR 0 2
97297: PPUSH
97298: LD_VAR 0 3
97302: PPUSH
97303: LD_VAR 0 4
97307: PPUSH
97308: LD_VAR 0 5
97312: PPUSH
97313: LD_VAR 0 6
97317: PPUSH
97318: LD_VAR 0 7
97322: PPUSH
97323: LD_VAR 0 8
97327: PPUSH
97328: LD_VAR 0 9
97332: PPUSH
97333: LD_VAR 0 10
97337: PPUSH
97338: LD_VAR 0 11
97342: PPUSH
97343: CALL 46403 0 11
97347: GO 97350
97349: POP
// end ;
97350: PPOPN 11
97352: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
97353: LD_VAR 0 1
97357: PPUSH
97358: LD_VAR 0 2
97362: PPUSH
97363: LD_VAR 0 3
97367: PPUSH
97368: LD_VAR 0 4
97372: PPUSH
97373: LD_VAR 0 5
97377: PPUSH
97378: CALL 49814 0 5
// end ; end_of_file
97382: PPOPN 5
97384: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
97385: LD_VAR 0 1
97389: PPUSH
97390: LD_VAR 0 2
97394: PPUSH
97395: LD_VAR 0 3
97399: PPUSH
97400: LD_VAR 0 4
97404: PPUSH
97405: LD_VAR 0 5
97409: PPUSH
97410: LD_VAR 0 6
97414: PPUSH
97415: CALL 34055 0 6
// end ;
97419: PPOPN 6
97421: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
97422: LD_INT 0
97424: PPUSH
// begin if not units then
97425: LD_VAR 0 1
97429: NOT
97430: IFFALSE 97434
// exit ;
97432: GO 97434
// end ;
97434: PPOPN 7
97436: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
97437: CALL 33959 0 0
// end ;
97441: PPOPN 1
97443: END
