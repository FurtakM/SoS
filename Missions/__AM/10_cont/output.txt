// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export Truman ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 29
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 21
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 30
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 39
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 40
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 41
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 42
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 43
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 51
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 48
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 47
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 49
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 50
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 62
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 52
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 66
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 67
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 64
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 54
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 53
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 57
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 60
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 61
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 63
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 58
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 59
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 65
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 55
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 56
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 68
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// Video ( true ) ;
 314: LD_INT 1
 316: PPUSH
 317: CALL 87352 0 1
// CreateNature ;
 321: CALL 27121 0 0
// PrepareDifficulty ;
 325: CALL 11745 0 0
// PrepareJMMTeam ;
 329: CALL 1363 0 0
// PrepareCathyTeam ;
 333: CALL 2599 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 337: LD_INT 24
 339: PPUSH
 340: LD_INT 1
 342: PUSH
 343: LD_OWVAR 67
 347: PLUS
 348: PPUSH
 349: CALL 21605 0 2
// if Difficulty > 1 then
 353: LD_OWVAR 67
 357: PUSH
 358: LD_INT 1
 360: GREATER
 361: IFFALSE 375
// PlaceMines ( MineField2 , Difficulty ) ;
 363: LD_INT 25
 365: PPUSH
 366: LD_OWVAR 67
 370: PPUSH
 371: CALL 21605 0 2
// if Difficulty > 2 then
 375: LD_OWVAR 67
 379: PUSH
 380: LD_INT 2
 382: GREATER
 383: IFFALSE 397
// PlaceMines ( MineField3 , Difficulty ) ;
 385: LD_INT 26
 387: PPUSH
 388: LD_OWVAR 67
 392: PPUSH
 393: CALL 21605 0 2
// PrepareArabianCommander ;
 397: CALL 4216 0 0
// PrepareArabian ;
 401: CALL 4268 0 0
// BuildArabianBase ;
 405: CALL 14560 0 0
// TameApemans ;
 409: CALL 20410 0 0
// end ;
 413: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 414: LD_EXP 68
 418: PUSH
 419: LD_INT 1
 421: EQUAL
 422: IFFALSE 728
 424: GO 426
 426: DISABLE
 427: LD_INT 0
 429: PPUSH
// begin enable ;
 430: ENABLE
// fogoff ( true ) ;
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 438: LD_ADDR_VAR 0 1
 442: PUSH
 443: LD_INT 22
 445: PUSH
 446: LD_INT 1
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 21
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PPUSH
 467: CALL_OW 69
 471: PUSH
 472: FOR_IN
 473: IFFALSE 489
// SetLives ( i , 1000 ) ;
 475: LD_VAR 0 1
 479: PPUSH
 480: LD_INT 1000
 482: PPUSH
 483: CALL_OW 234
 487: GO 472
 489: POP
 490: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 491: LD_ADDR_VAR 0 1
 495: PUSH
 496: LD_INT 22
 498: PUSH
 499: LD_INT 1
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 2
 508: PUSH
 509: LD_INT 30
 511: PUSH
 512: LD_INT 0
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 30
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PPUSH
 538: CALL_OW 69
 542: PUSH
 543: FOR_IN
 544: IFFALSE 568
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 546: LD_VAR 0 1
 550: PPUSH
 551: CALL_OW 274
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 9999
 561: PPUSH
 562: CALL_OW 277
 566: GO 543
 568: POP
 569: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 570: LD_ADDR_VAR 0 1
 574: PUSH
 575: LD_INT 22
 577: PUSH
 578: LD_INT 1
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 2
 587: PUSH
 588: LD_INT 30
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PUSH
 598: LD_INT 30
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: EMPTY
 609: LIST
 610: LIST
 611: LIST
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PPUSH
 617: CALL_OW 69
 621: PUSH
 622: FOR_IN
 623: IFFALSE 647
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 625: LD_VAR 0 1
 629: PPUSH
 630: CALL_OW 274
 634: PPUSH
 635: LD_INT 2
 637: PPUSH
 638: LD_INT 9999
 640: PPUSH
 641: CALL_OW 277
 645: GO 622
 647: POP
 648: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 649: LD_ADDR_VAR 0 1
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 30
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PUSH
 677: LD_INT 30
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PPUSH
 696: CALL_OW 69
 700: PUSH
 701: FOR_IN
 702: IFFALSE 726
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 704: LD_VAR 0 1
 708: PPUSH
 709: CALL_OW 274
 713: PPUSH
 714: LD_INT 3
 716: PPUSH
 717: LD_INT 9999
 719: PPUSH
 720: CALL_OW 277
 724: GO 701
 726: POP
 727: POP
// end ;
 728: PPOPN 1
 730: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 731: LD_INT 25
 733: PUSH
 734: LD_INT 5
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 69
 745: IFFALSE 758
 747: GO 749
 749: DISABLE
// snipersTrained := true ;
 750: LD_ADDR_EXP 63
 754: PUSH
 755: LD_INT 1
 757: ST_TO_ADDR
 758: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and spawnRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 759: LD_INT 1
 761: PPUSH
 762: LD_INT 2
 764: PPUSH
 765: CALL_OW 81
 769: PUSH
 770: LD_INT 1
 772: EQUAL
 773: PUSH
 774: LD_EXP 59
 778: AND
 779: PUSH
 780: LD_INT 22
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PPUSH
 790: CALL_OW 69
 794: PUSH
 795: LD_INT 0
 797: EQUAL
 798: AND
 799: IFFALSE 811
 801: GO 803
 803: DISABLE
// SetAchievement ( ACH_POWER ) ;
 804: LD_STRING ACH_POWER
 806: PPUSH
 807: CALL_OW 543
 811: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 812: LD_INT 22
 814: PUSH
 815: LD_INT 1
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: LD_INT 1
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PPUSH
 836: CALL_OW 69
 840: PUSH
 841: LD_INT 22
 843: PUSH
 844: LD_INT 1
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 30
 853: PUSH
 854: LD_INT 32
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PPUSH
 865: CALL_OW 69
 869: AND
 870: PUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 33
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: PPUSH
 895: CALL_OW 69
 899: AND
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 30
 913: PUSH
 914: LD_INT 5
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PPUSH
 925: CALL_OW 69
 929: AND
 930: PUSH
 931: LD_INT 22
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 30
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: AND
 960: PUSH
 961: LD_INT 22
 963: PUSH
 964: LD_INT 1
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 30
 973: PUSH
 974: LD_INT 36
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 69
 989: AND
 990: PUSH
 991: LD_INT 22
 993: PUSH
 994: LD_INT 1
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 30
1003: PUSH
1004: LD_INT 31
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PPUSH
1015: CALL_OW 69
1019: AND
1020: PUSH
1021: LD_INT 22
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 30
1033: PUSH
1034: LD_INT 22
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 69
1049: AND
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 20
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: AND
1080: PUSH
1081: LD_INT 22
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 30
1093: PUSH
1094: LD_INT 19
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: PPUSH
1105: CALL_OW 69
1109: AND
1110: PUSH
1111: LD_INT 22
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 30
1123: PUSH
1124: LD_INT 16
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PPUSH
1135: CALL_OW 69
1139: AND
1140: PUSH
1141: LD_INT 22
1143: PUSH
1144: LD_INT 1
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 30
1153: PUSH
1154: LD_INT 17
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PPUSH
1165: CALL_OW 69
1169: AND
1170: PUSH
1171: LD_INT 22
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 30
1183: PUSH
1184: LD_INT 21
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PPUSH
1195: CALL_OW 69
1199: AND
1200: PUSH
1201: LD_INT 22
1203: PUSH
1204: LD_INT 1
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 30
1213: PUSH
1214: LD_INT 29
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 69
1229: AND
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 30
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PPUSH
1255: CALL_OW 69
1259: AND
1260: PUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 30
1273: PUSH
1274: LD_INT 27
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PPUSH
1285: CALL_OW 69
1289: AND
1290: PUSH
1291: LD_INT 22
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 30
1303: PUSH
1304: LD_INT 26
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PPUSH
1315: CALL_OW 69
1319: AND
1320: PUSH
1321: LD_INT 22
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 30
1333: PUSH
1334: LD_INT 28
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: PPUSH
1345: CALL_OW 69
1349: AND
1350: IFFALSE 1362
1352: GO 1354
1354: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1355: LD_STRING ACH_ARCH
1357: PPUSH
1358: CALL_OW 543
1362: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side = 1 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// uc_nation = 1 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// count = 0 ;
1387: LD_ADDR_VAR 0 6
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_STRING JMM
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: LD_STRING 10_
1408: PPUSH
1409: CALL 49931 0 3
1413: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1414: LD_ADDR_EXP 21
1418: PUSH
1419: LD_EXP 21
1423: PUSH
1424: LD_EXP 1
1428: ADD
1429: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1430: LD_ADDR_EXP 10
1434: PUSH
1435: LD_STRING Gary
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_STRING 10_
1443: PPUSH
1444: CALL 49931 0 3
1448: ST_TO_ADDR
// if Gary then
1449: LD_EXP 10
1453: IFFALSE 1471
// JMMSquad = JMMSquad ^ Gary ;
1455: LD_ADDR_EXP 21
1459: PUSH
1460: LD_EXP 21
1464: PUSH
1465: LD_EXP 10
1469: ADD
1470: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1471: LD_ADDR_EXP 5
1475: PUSH
1476: LD_STRING Cyrus
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_STRING 10_
1484: PPUSH
1485: CALL 49931 0 3
1489: ST_TO_ADDR
// if Cyrus then
1490: LD_EXP 5
1494: IFFALSE 1512
// JMMSquad = JMMSquad ^ Cyrus ;
1496: LD_ADDR_EXP 21
1500: PUSH
1501: LD_EXP 21
1505: PUSH
1506: LD_EXP 5
1510: ADD
1511: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1512: LD_ADDR_EXP 4
1516: PUSH
1517: LD_STRING Bobby
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_STRING 10_
1525: PPUSH
1526: CALL 49931 0 3
1530: ST_TO_ADDR
// if Bobby then
1531: LD_EXP 4
1535: IFFALSE 1553
// JMMSquad = JMMSquad ^ Bobby ;
1537: LD_ADDR_EXP 21
1541: PUSH
1542: LD_EXP 21
1546: PUSH
1547: LD_EXP 4
1551: ADD
1552: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1553: LD_ADDR_EXP 6
1557: PUSH
1558: LD_STRING Lisa
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_STRING 10_
1566: PPUSH
1567: CALL 49931 0 3
1571: ST_TO_ADDR
// if Lisa then
1572: LD_EXP 6
1576: IFFALSE 1594
// JMMSquad = JMMSquad ^ Lisa ;
1578: LD_ADDR_EXP 21
1582: PUSH
1583: LD_EXP 21
1587: PUSH
1588: LD_EXP 6
1592: ADD
1593: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1594: LD_ADDR_EXP 2
1598: PUSH
1599: LD_STRING Brown
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_STRING 10_
1607: PPUSH
1608: CALL 49931 0 3
1612: ST_TO_ADDR
// if Brown then
1613: LD_EXP 2
1617: IFFALSE 1635
// JMMSquad = JMMSquad ^ Brown ;
1619: LD_ADDR_EXP 21
1623: PUSH
1624: LD_EXP 21
1628: PUSH
1629: LD_EXP 2
1633: ADD
1634: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1635: LD_ADDR_EXP 3
1639: PUSH
1640: LD_STRING Donaldson
1642: PPUSH
1643: LD_INT 1
1645: PPUSH
1646: LD_STRING 10_
1648: PPUSH
1649: CALL 49931 0 3
1653: ST_TO_ADDR
// if Donaldson then
1654: LD_EXP 3
1658: IFFALSE 1676
// JMMSquad = JMMSquad ^ Donaldson ;
1660: LD_ADDR_EXP 21
1664: PUSH
1665: LD_EXP 21
1669: PUSH
1670: LD_EXP 3
1674: ADD
1675: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1676: LD_ADDR_EXP 7
1680: PUSH
1681: LD_STRING Frank
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_STRING 10_
1689: PPUSH
1690: CALL 49931 0 3
1694: ST_TO_ADDR
// if Frank then
1695: LD_EXP 7
1699: IFFALSE 1717
// JMMSquad = JMMSquad ^ Frank ;
1701: LD_ADDR_EXP 21
1705: PUSH
1706: LD_EXP 21
1710: PUSH
1711: LD_EXP 7
1715: ADD
1716: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1717: LD_ADDR_EXP 9
1721: PUSH
1722: LD_STRING Houten
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_STRING 10_
1730: PPUSH
1731: CALL 49931 0 3
1735: ST_TO_ADDR
// if Houten then
1736: LD_EXP 9
1740: IFFALSE 1758
// JMMSquad = JMMSquad ^ Houten ;
1742: LD_ADDR_EXP 21
1746: PUSH
1747: LD_EXP 21
1751: PUSH
1752: LD_EXP 9
1756: ADD
1757: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1758: LD_ADDR_EXP 22
1762: PUSH
1763: LD_STRING OthersIn10
1765: PPUSH
1766: CALL_OW 31
1770: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1771: LD_ADDR_EXP 25
1775: PUSH
1776: LD_STRING Powell
1778: PPUSH
1779: LD_INT 0
1781: PPUSH
1782: LD_STRING 
1784: PPUSH
1785: CALL 49931 0 3
1789: ST_TO_ADDR
// for i in JMMSquad do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_EXP 21
1799: PUSH
1800: FOR_IN
1801: IFFALSE 2081
// begin if count < 3 then
1803: LD_VAR 0 6
1807: PUSH
1808: LD_INT 3
1810: LESS
1811: IFFALSE 1928
// begin vc_engine = 1 ;
1813: LD_ADDR_OWVAR 39
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// vc_control = 1 ;
1821: LD_ADDR_OWVAR 38
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// vc_weapon = 12 ;
1829: LD_ADDR_OWVAR 40
1833: PUSH
1834: LD_INT 12
1836: ST_TO_ADDR
// vc_chassis = 3 ;
1837: LD_ADDR_OWVAR 37
1841: PUSH
1842: LD_INT 3
1844: ST_TO_ADDR
// veh = CreateVehicle ;
1845: LD_ADDR_VAR 0 4
1849: PUSH
1850: CALL_OW 45
1854: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1855: LD_VAR 0 4
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1867: LD_VAR 0 4
1871: PPUSH
1872: LD_INT 2
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 49
// if count mod 2 = 0 then
1882: LD_VAR 0 6
1886: PUSH
1887: LD_INT 2
1889: MOD
1890: PUSH
1891: LD_INT 0
1893: EQUAL
1894: IFFALSE 1913
// AddCargo ( veh , 1 , 100 ) else
1896: LD_VAR 0 4
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 291
1911: GO 1928
// AddCargo ( veh , 3 , 100 ) end ;
1913: LD_VAR 0 4
1917: PPUSH
1918: LD_INT 3
1920: PPUSH
1921: LD_INT 100
1923: PPUSH
1924: CALL_OW 291
// if count >= 3 then
1928: LD_VAR 0 6
1932: PUSH
1933: LD_INT 3
1935: GREATEREQUAL
1936: IFFALSE 2051
// begin vc_engine = 1 ;
1938: LD_ADDR_OWVAR 39
1942: PUSH
1943: LD_INT 1
1945: ST_TO_ADDR
// vc_control = 1 ;
1946: LD_ADDR_OWVAR 38
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1954: LD_ADDR_OWVAR 40
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 4
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 1
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 12
1983: ARRAY
1984: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_VAR 0 2
2004: PUSH
2005: LD_INT 2
2007: MOD
2008: PUSH
2009: LD_INT 1
2011: PLUS
2012: ARRAY
2013: ST_TO_ADDR
// veh = CreateVehicle ;
2014: LD_ADDR_VAR 0 4
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2024: LD_VAR 0 4
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2036: LD_VAR 0 4
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL_OW 49
// end ; count = count + 1 ;
2051: LD_ADDR_VAR 0 6
2055: PUSH
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: PLUS
2064: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_VAR 0 4
2074: PPUSH
2075: CALL_OW 52
// end ;
2079: GO 1800
2081: POP
2082: POP
// for i := 1 to others10 do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 1
2091: DEC
2092: ST_TO_ADDR
2093: LD_EXP 22
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2330
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2101: LD_VAR 0 2
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: LD_INT 4
2111: PUSH
2112: LD_INT 3
2114: PUSH
2115: LD_INT 3
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: LD_OWVAR 67
2128: ARRAY
2129: LESS
2130: IFFALSE 2283
// begin vc_engine = 1 ;
2132: LD_ADDR_OWVAR 39
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// vc_control = 1 ;
2140: LD_ADDR_OWVAR 38
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2148: LD_ADDR_OWVAR 40
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: LD_INT 4
2158: PUSH
2159: LD_INT 5
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_INT 3
2172: PPUSH
2173: CALL_OW 12
2177: ARRAY
2178: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2179: LD_ADDR_OWVAR 37
2183: PUSH
2184: LD_INT 2
2186: PUSH
2187: LD_INT 3
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_VAR 0 2
2198: PUSH
2199: LD_INT 2
2201: MOD
2202: PUSH
2203: LD_INT 1
2205: PLUS
2206: ARRAY
2207: ST_TO_ADDR
// veh = CreateVehicle ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2218: LD_VAR 0 4
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2230: LD_VAR 0 4
2234: PPUSH
2235: LD_INT 2
2237: PPUSH
2238: LD_INT 0
2240: PPUSH
2241: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2245: LD_ADDR_EXP 29
2249: PUSH
2250: LD_EXP 29
2254: PUSH
2255: LD_VAR 0 4
2259: ADD
2260: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2261: LD_EXP 22
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PPUSH
2272: LD_VAR 0 4
2276: PPUSH
2277: CALL_OW 52
// end else
2281: GO 2328
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2283: LD_EXP 22
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PPUSH
2294: LD_INT 106
2296: PPUSH
2297: LD_INT 33
2299: PPUSH
2300: LD_INT 6
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2310: LD_EXP 22
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PPUSH
2321: LD_INT 4
2323: PPUSH
2324: CALL_OW 235
// end ; end ;
2328: GO 2098
2330: POP
2331: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2332: LD_INT 22
2334: PUSH
2335: LD_INT 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: LD_INT 21
2344: PUSH
2345: LD_INT 1
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PPUSH
2361: LD_INT 1
2363: PPUSH
2364: CALL_OW 336
// end ;
2368: LD_VAR 0 1
2372: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2373: LD_INT 0
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
// uc_side = 1 ;
2380: LD_ADDR_OWVAR 20
2384: PUSH
2385: LD_INT 1
2387: ST_TO_ADDR
// uc_nation = 1 ;
2388: LD_ADDR_OWVAR 21
2392: PUSH
2393: LD_INT 1
2395: ST_TO_ADDR
// for i := 1 to 10 do
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: DOUBLE
2402: LD_INT 1
2404: DEC
2405: ST_TO_ADDR
2406: LD_INT 10
2408: PUSH
2409: FOR_TO
2410: IFFALSE 2592
// begin vc_engine = 1 ;
2412: LD_ADDR_OWVAR 39
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// vc_control = 1 ;
2420: LD_ADDR_OWVAR 38
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2428: LD_ADDR_OWVAR 40
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 12
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 4
2456: PPUSH
2457: CALL_OW 12
2461: ARRAY
2462: ST_TO_ADDR
// vc_chassis = 3 ;
2463: LD_ADDR_OWVAR 37
2467: PUSH
2468: LD_INT 3
2470: ST_TO_ADDR
// veh = CreateVehicle ;
2471: LD_ADDR_VAR 0 3
2475: PUSH
2476: CALL_OW 45
2480: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2481: LD_VAR 0 3
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2493: LD_VAR 0 3
2497: PPUSH
2498: LD_INT 2
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2508: LD_ADDR_EXP 29
2512: PUSH
2513: LD_EXP 29
2517: PUSH
2518: LD_VAR 0 3
2522: ADD
2523: ST_TO_ADDR
// if vc_weapon = 12 then
2524: LD_OWVAR 40
2528: PUSH
2529: LD_INT 12
2531: EQUAL
2532: IFFALSE 2590
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2534: LD_ADDR_VAR 0 4
2538: PUSH
2539: LD_INT 5
2541: PPUSH
2542: LD_INT 10
2544: PPUSH
2545: CALL_OW 12
2549: PUSH
2550: LD_INT 10
2552: MUL
2553: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 1
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 291
// end ; end ;
2590: GO 2409
2592: POP
2593: POP
// end ;
2594: LD_VAR 0 1
2598: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2599: LD_INT 0
2601: PPUSH
2602: PPUSH
2603: PPUSH
// uc_side = 4 ;
2604: LD_ADDR_OWVAR 20
2608: PUSH
2609: LD_INT 4
2611: ST_TO_ADDR
// uc_nation = 1 ;
2612: LD_ADDR_OWVAR 21
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , false ) then
2620: LD_STRING 08_SikorskiStatus
2622: PPUSH
2623: LD_INT 0
2625: PPUSH
2626: CALL_OW 30
2630: IFFALSE 2651
// Truman := PrepareUnit ( Truman , false ,  ) ;
2632: LD_ADDR_EXP 20
2636: PUSH
2637: LD_STRING Truman
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: LD_STRING 
2645: PPUSH
2646: CALL 49931 0 3
2650: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2651: LD_ADDR_EXP 11
2655: PUSH
2656: LD_STRING Simms
2658: PPUSH
2659: LD_INT 0
2661: PPUSH
2662: LD_STRING 
2664: PPUSH
2665: CALL 49931 0 3
2669: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2670: LD_ADDR_EXP 12
2674: PUSH
2675: LD_STRING Denis
2677: PPUSH
2678: LD_INT 1
2680: PPUSH
2681: LD_STRING 08_
2683: PPUSH
2684: CALL 49931 0 3
2688: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2689: LD_ADDR_EXP 13
2693: PUSH
2694: LD_STRING Joan
2696: PPUSH
2697: LD_INT 1
2699: PPUSH
2700: LD_STRING 08_
2702: PPUSH
2703: CALL 49931 0 3
2707: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2708: LD_STRING 08_Khatam
2710: PPUSH
2711: CALL_OW 28
2715: IFFALSE 2738
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2717: LD_ADDR_EXP 14
2721: PUSH
2722: LD_STRING Khatam
2724: PPUSH
2725: LD_INT 1
2727: PPUSH
2728: LD_STRING 08_
2730: PPUSH
2731: CALL 49931 0 3
2735: ST_TO_ADDR
2736: GO 2766
// if TestCharacters ( 03_Khatam ) then
2738: LD_STRING 03_Khatam
2740: PPUSH
2741: CALL_OW 28
2745: IFFALSE 2766
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2747: LD_ADDR_EXP 14
2751: PUSH
2752: LD_STRING Khatam
2754: PPUSH
2755: LD_INT 1
2757: PPUSH
2758: LD_STRING 03_
2760: PPUSH
2761: CALL 49931 0 3
2765: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2766: LD_ADDR_EXP 15
2770: PUSH
2771: LD_STRING Gladstone
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: LD_STRING 08_
2779: PPUSH
2780: CALL 49931 0 3
2784: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2785: LD_ADDR_EXP 17
2789: PUSH
2790: LD_STRING DeltaDoctor
2792: PPUSH
2793: LD_INT 1
2795: PPUSH
2796: LD_STRING 
2798: PPUSH
2799: CALL 49931 0 3
2803: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2804: LD_ADDR_EXP 7
2808: PUSH
2809: LD_STRING Frank
2811: PPUSH
2812: LD_INT 1
2814: PPUSH
2815: LD_STRING 08_
2817: PPUSH
2818: CALL 49931 0 3
2822: ST_TO_ADDR
// if Frank then
2823: LD_EXP 7
2827: IFFALSE 2850
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2829: LD_ADDR_EXP 8
2833: PUSH
2834: LD_STRING Yamoko
2836: PPUSH
2837: LD_INT 0
2839: PPUSH
2840: LD_STRING 
2842: PPUSH
2843: CALL 49931 0 3
2847: ST_TO_ADDR
2848: GO 2869
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2850: LD_ADDR_EXP 8
2854: PUSH
2855: LD_STRING Kikuchi
2857: PPUSH
2858: LD_INT 1
2860: PPUSH
2861: LD_STRING 08_
2863: PPUSH
2864: CALL 49931 0 3
2868: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2869: LD_ADDR_EXP 23
2873: PUSH
2874: LD_STRING 09_others
2876: PPUSH
2877: CALL_OW 31
2881: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2882: LD_ADDR_EXP 24
2886: PUSH
2887: LD_STRING 09_apes
2889: PPUSH
2890: CALL_OW 31
2894: ST_TO_ADDR
// if Truman then
2895: LD_EXP 20
2899: IFFALSE 2916
// PlaceUnitArea ( Truman , CathyTeamSpawn , false ) ;
2901: LD_EXP 20
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 0
2911: PPUSH
2912: CALL_OW 49
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2916: LD_EXP 11
2920: PPUSH
2921: LD_INT 1
2923: PPUSH
2924: LD_INT 0
2926: PPUSH
2927: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2931: LD_EXP 12
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2946: LD_EXP 13
2950: PPUSH
2951: LD_INT 1
2953: PPUSH
2954: LD_INT 0
2956: PPUSH
2957: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2961: LD_EXP 14
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: LD_INT 0
2971: PPUSH
2972: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2976: LD_EXP 15
2980: PPUSH
2981: LD_INT 1
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2991: LD_EXP 17
2995: PPUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 49
// if Kikuchi then
3006: LD_EXP 8
3010: IFFALSE 3027
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
3012: LD_EXP 8
3016: PPUSH
3017: LD_INT 1
3019: PPUSH
3020: LD_INT 0
3022: PPUSH
3023: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
3027: LD_EXP 11
3031: PUSH
3032: LD_EXP 14
3036: PUSH
3037: LD_EXP 12
3041: PUSH
3042: LD_EXP 15
3046: PUSH
3047: LD_EXP 17
3051: PUSH
3052: LD_EXP 13
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: PPUSH
3065: LD_INT 4
3067: PPUSH
3068: CALL_OW 336
// if others09 > 2 then
3072: LD_EXP 23
3076: PUSH
3077: LD_INT 2
3079: GREATER
3080: IFFALSE 3161
// begin for i := 1 to 3 do
3082: LD_ADDR_VAR 0 2
3086: PUSH
3087: DOUBLE
3088: LD_INT 1
3090: DEC
3091: ST_TO_ADDR
3092: LD_INT 3
3094: PUSH
3095: FOR_TO
3096: IFFALSE 3157
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3098: LD_EXP 23
3102: PUSH
3103: LD_VAR 0 2
3107: ARRAY
3108: PPUSH
3109: LD_INT 1
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3119: LD_ADDR_EXP 23
3123: PUSH
3124: LD_EXP 23
3128: PPUSH
3129: LD_INT 1
3131: PPUSH
3132: CALL_OW 3
3136: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3137: LD_EXP 23
3141: PUSH
3142: LD_VAR 0 2
3146: ARRAY
3147: PPUSH
3148: LD_INT 2
3150: PPUSH
3151: CALL_OW 336
// end ;
3155: GO 3095
3157: POP
3158: POP
// end else
3159: GO 3221
// begin for i in others09 do
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: LD_EXP 23
3170: PUSH
3171: FOR_IN
3172: IFFALSE 3219
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3174: LD_VAR 0 2
3178: PPUSH
3179: LD_INT 1
3181: PPUSH
3182: LD_INT 0
3184: PPUSH
3185: CALL_OW 49
// others09 = others09 diff i ;
3189: LD_ADDR_EXP 23
3193: PUSH
3194: LD_EXP 23
3198: PUSH
3199: LD_VAR 0 2
3203: DIFF
3204: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3205: LD_VAR 0 2
3209: PPUSH
3210: LD_INT 2
3212: PPUSH
3213: CALL_OW 336
// end ;
3217: GO 3171
3219: POP
3220: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3221: LD_INT 22
3223: PUSH
3224: LD_INT 4
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: PUSH
3231: LD_INT 25
3233: PUSH
3234: LD_INT 2
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PPUSH
3245: CALL_OW 69
3249: PUSH
3250: LD_INT 0
3252: EQUAL
3253: IFFALSE 3385
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: LD_INT 22
3262: PUSH
3263: LD_INT 4
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 25
3272: PUSH
3273: LD_INT 2
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: EMPTY
3281: LIST
3282: LIST
3283: PPUSH
3284: CALL_OW 69
3288: PUSH
3289: LD_EXP 11
3293: PUSH
3294: LD_EXP 14
3298: PUSH
3299: LD_EXP 12
3303: PUSH
3304: LD_EXP 15
3308: PUSH
3309: LD_EXP 17
3313: PUSH
3314: LD_EXP 13
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: DIFF
3327: ST_TO_ADDR
// if not tmp then
3328: LD_VAR 0 3
3332: NOT
3333: IFFALSE 3369
// begin if Denis then
3335: LD_EXP 12
3339: IFFALSE 3355
// SetClass ( Denis , 2 ) else
3341: LD_EXP 12
3345: PPUSH
3346: LD_INT 2
3348: PPUSH
3349: CALL_OW 336
3353: GO 3367
// SetClass ( DeltaDoctor , 2 ) ;
3355: LD_EXP 17
3359: PPUSH
3360: LD_INT 2
3362: PPUSH
3363: CALL_OW 336
// end else
3367: GO 3385
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: ARRAY
3377: PPUSH
3378: LD_INT 2
3380: PPUSH
3381: CALL_OW 336
// end ; end ; for i in ape09 do
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: LD_EXP 24
3394: PUSH
3395: FOR_IN
3396: IFFALSE 3415
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3398: LD_VAR 0 2
3402: PPUSH
3403: LD_INT 1
3405: PPUSH
3406: LD_INT 0
3408: PPUSH
3409: CALL_OW 49
3413: GO 3395
3415: POP
3416: POP
// uc_side = 4 ;
3417: LD_ADDR_OWVAR 20
3421: PUSH
3422: LD_INT 4
3424: ST_TO_ADDR
// hc_class := 1 ;
3425: LD_ADDR_OWVAR 28
3429: PUSH
3430: LD_INT 1
3432: ST_TO_ADDR
// hc_sex := sex_female ;
3433: LD_ADDR_OWVAR 27
3437: PUSH
3438: LD_INT 2
3440: ST_TO_ADDR
// hc_gallery :=  ;
3441: LD_ADDR_OWVAR 33
3445: PUSH
3446: LD_STRING 
3448: ST_TO_ADDR
// hc_name :=  ;
3449: LD_ADDR_OWVAR 26
3453: PUSH
3454: LD_STRING 
3456: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3457: LD_ADDR_OWVAR 31
3461: PUSH
3462: LD_INT 1
3464: PUSH
3465: LD_INT 7
3467: PUSH
3468: LD_INT 1
3470: PUSH
3471: LD_INT 0
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: ST_TO_ADDR
// AmScout = CreateHuman ;
3480: LD_ADDR_EXP 18
3484: PUSH
3485: CALL_OW 44
3489: ST_TO_ADDR
// end ;
3490: LD_VAR 0 1
3494: RET
// export function PrepareCornell ; begin
3495: LD_INT 0
3497: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3498: LD_INT 4
3500: PPUSH
3501: LD_INT 4
3503: PPUSH
3504: CALL_OW 343
// uc_side = 4 ;
3508: LD_ADDR_OWVAR 20
3512: PUSH
3513: LD_INT 4
3515: ST_TO_ADDR
// uc_nation = 1 ;
3516: LD_ADDR_OWVAR 21
3520: PUSH
3521: LD_INT 1
3523: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3524: LD_ADDR_EXP 19
3528: PUSH
3529: LD_STRING Cornel
3531: PPUSH
3532: LD_INT 1
3534: PPUSH
3535: LD_STRING 03_
3537: PPUSH
3538: CALL 49931 0 3
3542: ST_TO_ADDR
// if not Cornell then
3543: LD_EXP 19
3547: NOT
3548: IFFALSE 3552
// exit ;
3550: GO 3660
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3552: LD_EXP 19
3556: PPUSH
3557: LD_INT 8
3559: PPUSH
3560: LD_INT 0
3562: PPUSH
3563: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3567: LD_EXP 19
3571: PPUSH
3572: LD_INT 350
3574: PPUSH
3575: CALL_OW 234
// if IsInUnit ( JMM ) then
3579: LD_EXP 1
3583: PPUSH
3584: CALL_OW 310
3588: IFFALSE 3631
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3590: LD_EXP 19
3594: PPUSH
3595: LD_EXP 1
3599: PPUSH
3600: CALL_OW 310
3604: PPUSH
3605: CALL_OW 250
3609: PPUSH
3610: LD_EXP 1
3614: PPUSH
3615: CALL_OW 310
3619: PPUSH
3620: CALL_OW 251
3624: PPUSH
3625: CALL_OW 111
3629: GO 3660
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3631: LD_EXP 19
3635: PPUSH
3636: LD_EXP 1
3640: PPUSH
3641: CALL_OW 250
3645: PPUSH
3646: LD_EXP 1
3650: PPUSH
3651: CALL_OW 251
3655: PPUSH
3656: CALL_OW 111
// end ;
3660: LD_VAR 0 1
3664: RET
// every 0 0$1 trigger IsAt ( Truman , 17 , 31 ) do
3665: LD_EXP 20
3669: PPUSH
3670: LD_INT 17
3672: PPUSH
3673: LD_INT 31
3675: PPUSH
3676: CALL_OW 307
3680: IFFALSE 3694
3682: GO 3684
3684: DISABLE
// RemoveUnit ( Truman ) ;
3685: LD_EXP 20
3689: PPUSH
3690: CALL_OW 64
3694: END
// every 0 0$2 trigger joinEpsilon = 1 and IsOk ( Truman ) and not HasTask ( Truman ) do
3695: LD_EXP 30
3699: PUSH
3700: LD_INT 1
3702: EQUAL
3703: PUSH
3704: LD_EXP 20
3708: PPUSH
3709: CALL_OW 302
3713: AND
3714: PUSH
3715: LD_EXP 20
3719: PPUSH
3720: CALL_OW 314
3724: NOT
3725: AND
3726: IFFALSE 3747
3728: GO 3730
3730: DISABLE
// begin enable ;
3731: ENABLE
// ComMoveXY ( Truman , 17 , 31 ) ;
3732: LD_EXP 20
3736: PPUSH
3737: LD_INT 17
3739: PPUSH
3740: LD_INT 31
3742: PPUSH
3743: CALL_OW 111
// end ; end_of_file
3747: END
// export function PrepareRussians ; var i , un ; begin
3748: LD_INT 0
3750: PPUSH
3751: PPUSH
3752: PPUSH
// uc_side = 3 ;
3753: LD_ADDR_OWVAR 20
3757: PUSH
3758: LD_INT 3
3760: ST_TO_ADDR
// uc_nation = 3 ;
3761: LD_ADDR_OWVAR 21
3765: PUSH
3766: LD_INT 3
3768: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3769: LD_ADDR_EXP 26
3773: PUSH
3774: LD_STRING Tsaritsyn
3776: PPUSH
3777: LD_INT 0
3779: PPUSH
3780: LD_STRING 
3782: PPUSH
3783: CALL 49931 0 3
3787: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3788: LD_EXP 26
3792: PPUSH
3793: LD_INT 3
3795: PPUSH
3796: LD_INT 0
3798: PPUSH
3799: CALL_OW 49
// for i = 1 to 14 do
3803: LD_ADDR_VAR 0 2
3807: PUSH
3808: DOUBLE
3809: LD_INT 1
3811: DEC
3812: ST_TO_ADDR
3813: LD_INT 14
3815: PUSH
3816: FOR_TO
3817: IFFALSE 3903
// begin uc_side = 3 ;
3819: LD_ADDR_OWVAR 20
3823: PUSH
3824: LD_INT 3
3826: ST_TO_ADDR
// uc_nation = 3 ;
3827: LD_ADDR_OWVAR 21
3831: PUSH
3832: LD_INT 3
3834: ST_TO_ADDR
// hc_gallery =  ;
3835: LD_ADDR_OWVAR 33
3839: PUSH
3840: LD_STRING 
3842: ST_TO_ADDR
// hc_name =  ;
3843: LD_ADDR_OWVAR 26
3847: PUSH
3848: LD_STRING 
3850: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3851: LD_INT 0
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: LD_EXP 37
3861: PPUSH
3862: LD_EXP 38
3866: PPUSH
3867: CALL_OW 12
3871: PPUSH
3872: CALL_OW 380
// un = CreateHuman ;
3876: LD_ADDR_VAR 0 3
3880: PUSH
3881: CALL_OW 44
3885: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3886: LD_VAR 0 3
3890: PPUSH
3891: LD_INT 3
3893: PPUSH
3894: LD_INT 0
3896: PPUSH
3897: CALL_OW 49
// end ;
3901: GO 3816
3903: POP
3904: POP
// for i = 1 to 6 do
3905: LD_ADDR_VAR 0 2
3909: PUSH
3910: DOUBLE
3911: LD_INT 1
3913: DEC
3914: ST_TO_ADDR
3915: LD_INT 6
3917: PUSH
3918: FOR_TO
3919: IFFALSE 4005
// begin uc_side = 3 ;
3921: LD_ADDR_OWVAR 20
3925: PUSH
3926: LD_INT 3
3928: ST_TO_ADDR
// uc_nation = 3 ;
3929: LD_ADDR_OWVAR 21
3933: PUSH
3934: LD_INT 3
3936: ST_TO_ADDR
// hc_gallery =  ;
3937: LD_ADDR_OWVAR 33
3941: PUSH
3942: LD_STRING 
3944: ST_TO_ADDR
// hc_name =  ;
3945: LD_ADDR_OWVAR 26
3949: PUSH
3950: LD_STRING 
3952: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 2
3958: PPUSH
3959: LD_EXP 37
3963: PPUSH
3964: LD_EXP 38
3968: PPUSH
3969: CALL_OW 12
3973: PPUSH
3974: CALL_OW 380
// un = CreateHuman ;
3978: LD_ADDR_VAR 0 3
3982: PUSH
3983: CALL_OW 44
3987: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3988: LD_VAR 0 3
3992: PPUSH
3993: LD_INT 3
3995: PPUSH
3996: LD_INT 0
3998: PPUSH
3999: CALL_OW 49
// end ;
4003: GO 3918
4005: POP
4006: POP
// for i = 1 to 6 do
4007: LD_ADDR_VAR 0 2
4011: PUSH
4012: DOUBLE
4013: LD_INT 1
4015: DEC
4016: ST_TO_ADDR
4017: LD_INT 6
4019: PUSH
4020: FOR_TO
4021: IFFALSE 4107
// begin uc_side = 3 ;
4023: LD_ADDR_OWVAR 20
4027: PUSH
4028: LD_INT 3
4030: ST_TO_ADDR
// uc_nation = 3 ;
4031: LD_ADDR_OWVAR 21
4035: PUSH
4036: LD_INT 3
4038: ST_TO_ADDR
// hc_gallery =  ;
4039: LD_ADDR_OWVAR 33
4043: PUSH
4044: LD_STRING 
4046: ST_TO_ADDR
// hc_name =  ;
4047: LD_ADDR_OWVAR 26
4051: PUSH
4052: LD_STRING 
4054: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4055: LD_INT 0
4057: PPUSH
4058: LD_INT 3
4060: PPUSH
4061: LD_EXP 37
4065: PPUSH
4066: LD_EXP 38
4070: PPUSH
4071: CALL_OW 12
4075: PPUSH
4076: CALL_OW 380
// un = CreateHuman ;
4080: LD_ADDR_VAR 0 3
4084: PUSH
4085: CALL_OW 44
4089: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4090: LD_VAR 0 3
4094: PPUSH
4095: LD_INT 3
4097: PPUSH
4098: LD_INT 0
4100: PPUSH
4101: CALL_OW 49
// end ;
4105: GO 4020
4107: POP
4108: POP
// for i = 1 to 4 do
4109: LD_ADDR_VAR 0 2
4113: PUSH
4114: DOUBLE
4115: LD_INT 1
4117: DEC
4118: ST_TO_ADDR
4119: LD_INT 4
4121: PUSH
4122: FOR_TO
4123: IFFALSE 4209
// begin uc_side = 3 ;
4125: LD_ADDR_OWVAR 20
4129: PUSH
4130: LD_INT 3
4132: ST_TO_ADDR
// uc_nation = 3 ;
4133: LD_ADDR_OWVAR 21
4137: PUSH
4138: LD_INT 3
4140: ST_TO_ADDR
// hc_gallery =  ;
4141: LD_ADDR_OWVAR 33
4145: PUSH
4146: LD_STRING 
4148: ST_TO_ADDR
// hc_name =  ;
4149: LD_ADDR_OWVAR 26
4153: PUSH
4154: LD_STRING 
4156: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4157: LD_INT 0
4159: PPUSH
4160: LD_INT 4
4162: PPUSH
4163: LD_EXP 37
4167: PPUSH
4168: LD_EXP 38
4172: PPUSH
4173: CALL_OW 12
4177: PPUSH
4178: CALL_OW 380
// un = CreateHuman ;
4182: LD_ADDR_VAR 0 3
4186: PUSH
4187: CALL_OW 44
4191: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 0
4202: PPUSH
4203: CALL_OW 49
// end ;
4207: GO 4122
4209: POP
4210: POP
// end ; end_of_file
4211: LD_VAR 0 1
4215: RET
// export function PrepareArabianCommander ; begin
4216: LD_INT 0
4218: PPUSH
// uc_side = 2 ;
4219: LD_ADDR_OWVAR 20
4223: PUSH
4224: LD_INT 2
4226: ST_TO_ADDR
// uc_nation = 2 ;
4227: LD_ADDR_OWVAR 21
4231: PUSH
4232: LD_INT 2
4234: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4235: LD_ADDR_EXP 27
4239: PUSH
4240: LD_STRING Dietrich
4242: PPUSH
4243: CALL_OW 25
4247: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4248: LD_EXP 27
4252: PPUSH
4253: LD_INT 4
4255: PPUSH
4256: LD_INT 0
4258: PPUSH
4259: CALL_OW 49
// end ;
4263: LD_VAR 0 1
4267: RET
// export function PrepareArabian ; var i , un , veh ; begin
4268: LD_INT 0
4270: PPUSH
4271: PPUSH
4272: PPUSH
4273: PPUSH
// uc_side := 2 ;
4274: LD_ADDR_OWVAR 20
4278: PUSH
4279: LD_INT 2
4281: ST_TO_ADDR
// uc_nation := 2 ;
4282: LD_ADDR_OWVAR 21
4286: PUSH
4287: LD_INT 2
4289: ST_TO_ADDR
// if not Ahmed then
4290: LD_EXP 28
4294: NOT
4295: IFFALSE 4363
// begin InitHc ;
4297: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4301: LD_INT 1
4303: PPUSH
4304: LD_INT 1
4306: PPUSH
4307: LD_EXP 37
4311: PPUSH
4312: LD_EXP 38
4316: PUSH
4317: LD_INT 1
4319: PLUS
4320: PPUSH
4321: CALL_OW 12
4325: PPUSH
4326: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4330: LD_ADDR_OWVAR 26
4334: PUSH
4335: LD_STRING Ahmed Abbasid
4337: ST_TO_ADDR
// Ahmed := CreateHuman ;
4338: LD_ADDR_EXP 28
4342: PUSH
4343: CALL_OW 44
4347: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4348: LD_EXP 28
4352: PPUSH
4353: LD_INT 4
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 49
// end ; for i = 1 to 4 do
4363: LD_ADDR_VAR 0 2
4367: PUSH
4368: DOUBLE
4369: LD_INT 1
4371: DEC
4372: ST_TO_ADDR
4373: LD_INT 4
4375: PUSH
4376: FOR_TO
4377: IFFALSE 4463
// begin uc_side = 2 ;
4379: LD_ADDR_OWVAR 20
4383: PUSH
4384: LD_INT 2
4386: ST_TO_ADDR
// uc_nation = 2 ;
4387: LD_ADDR_OWVAR 21
4391: PUSH
4392: LD_INT 2
4394: ST_TO_ADDR
// hc_gallery =  ;
4395: LD_ADDR_OWVAR 33
4399: PUSH
4400: LD_STRING 
4402: ST_TO_ADDR
// hc_name =  ;
4403: LD_ADDR_OWVAR 26
4407: PUSH
4408: LD_STRING 
4410: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4411: LD_INT 0
4413: PPUSH
4414: LD_INT 2
4416: PPUSH
4417: LD_EXP 37
4421: PPUSH
4422: LD_EXP 38
4426: PPUSH
4427: CALL_OW 12
4431: PPUSH
4432: CALL_OW 380
// un = CreateHuman ;
4436: LD_ADDR_VAR 0 3
4440: PUSH
4441: CALL_OW 44
4445: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4446: LD_VAR 0 3
4450: PPUSH
4451: LD_INT 4
4453: PPUSH
4454: LD_INT 0
4456: PPUSH
4457: CALL_OW 49
// end ;
4461: GO 4376
4463: POP
4464: POP
// for i = 1 to 5 do
4465: LD_ADDR_VAR 0 2
4469: PUSH
4470: DOUBLE
4471: LD_INT 1
4473: DEC
4474: ST_TO_ADDR
4475: LD_INT 5
4477: PUSH
4478: FOR_TO
4479: IFFALSE 4565
// begin uc_side = 2 ;
4481: LD_ADDR_OWVAR 20
4485: PUSH
4486: LD_INT 2
4488: ST_TO_ADDR
// uc_nation = 2 ;
4489: LD_ADDR_OWVAR 21
4493: PUSH
4494: LD_INT 2
4496: ST_TO_ADDR
// hc_gallery =  ;
4497: LD_ADDR_OWVAR 33
4501: PUSH
4502: LD_STRING 
4504: ST_TO_ADDR
// hc_name =  ;
4505: LD_ADDR_OWVAR 26
4509: PUSH
4510: LD_STRING 
4512: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4513: LD_INT 0
4515: PPUSH
4516: LD_INT 1
4518: PPUSH
4519: LD_EXP 37
4523: PPUSH
4524: LD_EXP 38
4528: PPUSH
4529: CALL_OW 12
4533: PPUSH
4534: CALL_OW 380
// un = CreateHuman ;
4538: LD_ADDR_VAR 0 3
4542: PUSH
4543: CALL_OW 44
4547: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4548: LD_VAR 0 3
4552: PPUSH
4553: LD_INT 4
4555: PPUSH
4556: LD_INT 0
4558: PPUSH
4559: CALL_OW 49
// end ;
4563: GO 4478
4565: POP
4566: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4567: LD_ADDR_VAR 0 2
4571: PUSH
4572: DOUBLE
4573: LD_INT 1
4575: DEC
4576: ST_TO_ADDR
4577: LD_INT 3
4579: PUSH
4580: LD_INT 4
4582: PUSH
4583: LD_INT 4
4585: PUSH
4586: LD_INT 4
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: LD_OWVAR 67
4599: ARRAY
4600: PUSH
4601: FOR_TO
4602: IFFALSE 4688
// begin uc_side = 2 ;
4604: LD_ADDR_OWVAR 20
4608: PUSH
4609: LD_INT 2
4611: ST_TO_ADDR
// uc_nation = 2 ;
4612: LD_ADDR_OWVAR 21
4616: PUSH
4617: LD_INT 2
4619: ST_TO_ADDR
// hc_gallery =  ;
4620: LD_ADDR_OWVAR 33
4624: PUSH
4625: LD_STRING 
4627: ST_TO_ADDR
// hc_name =  ;
4628: LD_ADDR_OWVAR 26
4632: PUSH
4633: LD_STRING 
4635: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4636: LD_INT 0
4638: PPUSH
4639: LD_INT 4
4641: PPUSH
4642: LD_EXP 37
4646: PPUSH
4647: LD_EXP 38
4651: PPUSH
4652: CALL_OW 12
4656: PPUSH
4657: CALL_OW 380
// un = CreateHuman ;
4661: LD_ADDR_VAR 0 3
4665: PUSH
4666: CALL_OW 44
4670: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4671: LD_VAR 0 3
4675: PPUSH
4676: LD_INT 4
4678: PPUSH
4679: LD_INT 0
4681: PPUSH
4682: CALL_OW 49
// end ;
4686: GO 4601
4688: POP
4689: POP
// for i = 1 to 2 do
4690: LD_ADDR_VAR 0 2
4694: PUSH
4695: DOUBLE
4696: LD_INT 1
4698: DEC
4699: ST_TO_ADDR
4700: LD_INT 2
4702: PUSH
4703: FOR_TO
4704: IFFALSE 4834
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4706: LD_ADDR_VAR 0 4
4710: PUSH
4711: LD_INT 22
4713: PUSH
4714: LD_INT 2
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PUSH
4721: LD_INT 21
4723: PUSH
4724: LD_INT 2
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 58
4733: PUSH
4734: EMPTY
4735: LIST
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: LIST
4741: PPUSH
4742: CALL_OW 69
4746: ST_TO_ADDR
// uc_side = 2 ;
4747: LD_ADDR_OWVAR 20
4751: PUSH
4752: LD_INT 2
4754: ST_TO_ADDR
// uc_nation = 2 ;
4755: LD_ADDR_OWVAR 21
4759: PUSH
4760: LD_INT 2
4762: ST_TO_ADDR
// hc_gallery =  ;
4763: LD_ADDR_OWVAR 33
4767: PUSH
4768: LD_STRING 
4770: ST_TO_ADDR
// hc_name =  ;
4771: LD_ADDR_OWVAR 26
4775: PUSH
4776: LD_STRING 
4778: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4779: LD_INT 0
4781: PPUSH
4782: LD_INT 3
4784: PPUSH
4785: LD_EXP 37
4789: PPUSH
4790: LD_EXP 38
4794: PPUSH
4795: CALL_OW 12
4799: PPUSH
4800: CALL_OW 380
// un = CreateHuman ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: CALL_OW 44
4813: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4814: LD_VAR 0 3
4818: PPUSH
4819: LD_VAR 0 4
4823: PUSH
4824: LD_INT 1
4826: ARRAY
4827: PPUSH
4828: CALL_OW 52
// end ;
4832: GO 4703
4834: POP
4835: POP
// end ;
4836: LD_VAR 0 1
4840: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4841: LD_INT 0
4843: PPUSH
4844: PPUSH
4845: PPUSH
4846: PPUSH
4847: PPUSH
4848: PPUSH
// for i := 1 to 2 do
4849: LD_ADDR_VAR 0 2
4853: PUSH
4854: DOUBLE
4855: LD_INT 1
4857: DEC
4858: ST_TO_ADDR
4859: LD_INT 2
4861: PUSH
4862: FOR_TO
4863: IFFALSE 4989
// begin uc_side = 5 ;
4865: LD_ADDR_OWVAR 20
4869: PUSH
4870: LD_INT 5
4872: ST_TO_ADDR
// uc_nation = 2 ;
4873: LD_ADDR_OWVAR 21
4877: PUSH
4878: LD_INT 2
4880: ST_TO_ADDR
// vc_chassis := 31 ;
4881: LD_ADDR_OWVAR 37
4885: PUSH
4886: LD_INT 31
4888: ST_TO_ADDR
// vc_control := control_rider ;
4889: LD_ADDR_OWVAR 38
4893: PUSH
4894: LD_INT 4
4896: ST_TO_ADDR
// animal := CreateVehicle ;
4897: LD_ADDR_VAR 0 3
4901: PUSH
4902: CALL_OW 45
4906: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4907: LD_VAR 0 3
4911: PPUSH
4912: LD_INT 7
4914: PPUSH
4915: LD_INT 0
4917: PPUSH
4918: CALL_OW 49
// hc_gallery =  ;
4922: LD_ADDR_OWVAR 33
4926: PUSH
4927: LD_STRING 
4929: ST_TO_ADDR
// hc_name =  ;
4930: LD_ADDR_OWVAR 26
4934: PUSH
4935: LD_STRING 
4937: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4938: LD_INT 0
4940: PPUSH
4941: LD_INT 11
4943: PPUSH
4944: LD_EXP 37
4948: PPUSH
4949: LD_EXP 38
4953: PPUSH
4954: CALL_OW 12
4958: PPUSH
4959: CALL_OW 380
// un = CreateHuman ;
4963: LD_ADDR_VAR 0 4
4967: PUSH
4968: CALL_OW 44
4972: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4973: LD_VAR 0 4
4977: PPUSH
4978: LD_VAR 0 3
4982: PPUSH
4983: CALL_OW 52
// end ;
4987: GO 4862
4989: POP
4990: POP
// repeat wait ( 0 0$1 ) ;
4991: LD_INT 35
4993: PPUSH
4994: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4998: LD_ADDR_VAR 0 5
5002: PUSH
5003: LD_INT 22
5005: PUSH
5006: LD_INT 1
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PPUSH
5013: CALL_OW 69
5017: PPUSH
5018: LD_VAR 0 2
5022: PPUSH
5023: CALL_OW 74
5027: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5028: LD_ADDR_VAR 0 6
5032: PUSH
5033: LD_INT 22
5035: PUSH
5036: LD_INT 1
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: PUSH
5043: LD_INT 2
5045: PUSH
5046: LD_INT 59
5048: PUSH
5049: EMPTY
5050: LIST
5051: PUSH
5052: LD_INT 21
5054: PUSH
5055: LD_INT 1
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PUSH
5062: LD_INT 21
5064: PUSH
5065: LD_INT 2
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: PPUSH
5085: CALL_OW 69
5089: PPUSH
5090: LD_VAR 0 2
5094: PPUSH
5095: CALL_OW 74
5099: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
5100: LD_ADDR_VAR 0 2
5104: PUSH
5105: LD_INT 22
5107: PUSH
5108: LD_INT 5
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: PUSH
5115: LD_INT 25
5117: PUSH
5118: LD_INT 11
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PPUSH
5129: CALL_OW 69
5133: PUSH
5134: FOR_IN
5135: IFFALSE 5205
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5137: LD_VAR 0 2
5141: PPUSH
5142: LD_VAR 0 5
5146: PPUSH
5147: CALL_OW 296
5151: PUSH
5152: LD_INT 8
5154: PLUS
5155: PUSH
5156: LD_VAR 0 2
5160: PPUSH
5161: LD_VAR 0 6
5165: PPUSH
5166: CALL_OW 296
5170: LESS
5171: IFFALSE 5189
// ComAttackUnit ( i , target1 ) else
5173: LD_VAR 0 2
5177: PPUSH
5178: LD_VAR 0 5
5182: PPUSH
5183: CALL_OW 115
5187: GO 5203
// ComAttackUnit ( i , target2 ) ;
5189: LD_VAR 0 2
5193: PPUSH
5194: LD_VAR 0 6
5198: PPUSH
5199: CALL_OW 115
// end ;
5203: GO 5134
5205: POP
5206: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
5207: LD_INT 22
5209: PUSH
5210: LD_INT 5
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PUSH
5217: LD_INT 25
5219: PUSH
5220: LD_INT 11
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PPUSH
5231: CALL_OW 69
5235: PUSH
5236: LD_INT 0
5238: EQUAL
5239: PUSH
5240: LD_INT 22
5242: PUSH
5243: LD_INT 1
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PPUSH
5250: CALL_OW 69
5254: PUSH
5255: LD_INT 0
5257: EQUAL
5258: OR
5259: IFFALSE 4991
// end ; end_of_file
5261: LD_VAR 0 1
5265: RET
// every 0 0$1 do
5266: GO 5268
5268: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
5269: LD_INT 1
5271: PPUSH
5272: LD_INT 19
5274: PPUSH
5275: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5279: LD_EXP 11
5283: PPUSH
5284: CALL_OW 87
// wait ( 0 0$3 ) ;
5288: LD_INT 105
5290: PPUSH
5291: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5295: LD_EXP 1
5299: PPUSH
5300: CALL_OW 310
5304: PPUSH
5305: CALL_OW 85
// Wait ( 0 0$1 ) ;
5309: LD_INT 35
5311: PPUSH
5312: CALL_OW 67
// if IsOk ( Gary ) then
5316: LD_EXP 10
5320: PPUSH
5321: CALL_OW 302
5325: IFFALSE 5363
// begin Say ( Gary , D2-Gary-1 ) ;
5327: LD_EXP 10
5331: PPUSH
5332: LD_STRING D2-Gary-1
5334: PPUSH
5335: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5339: LD_EXP 1
5343: PPUSH
5344: LD_STRING D2-JMM-1
5346: PPUSH
5347: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5351: LD_EXP 10
5355: PPUSH
5356: LD_STRING D2-Gary-2
5358: PPUSH
5359: CALL_OW 88
// end ; Video ( false ) ;
5363: LD_INT 0
5365: PPUSH
5366: CALL 87352 0 1
// ChangeMissionObjectives ( M1 ) ;
5370: LD_STRING M1
5372: PPUSH
5373: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5377: LD_INT 38
5379: PPUSH
5380: LD_INT 1
5382: PPUSH
5383: LD_INT 100
5385: PPUSH
5386: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5390: LD_INT 47
5392: PPUSH
5393: LD_INT 1
5395: PPUSH
5396: LD_INT 50
5398: PPUSH
5399: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5403: LD_INT 47
5405: PPUSH
5406: LD_INT 3
5408: PPUSH
5409: LD_INT 50
5411: PPUSH
5412: CALL_OW 291
// SaveForQuickRestart ;
5416: CALL_OW 22
// end ;
5420: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5421: LD_EXP 1
5425: PPUSH
5426: LD_EXP 11
5430: PPUSH
5431: CALL_OW 296
5435: PUSH
5436: LD_INT 15
5438: LESS
5439: IFFALSE 6267
5441: GO 5443
5443: DISABLE
5444: LD_INT 0
5446: PPUSH
// begin wait ( 0 0$3 ) ;
5447: LD_INT 105
5449: PPUSH
5450: CALL_OW 67
// Video ( true ) ;
5454: LD_INT 1
5456: PPUSH
5457: CALL 87352 0 1
// ComExitVehicle ( JMM ) ;
5461: LD_EXP 1
5465: PPUSH
5466: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5470: LD_EXP 1
5474: PPUSH
5475: CALL_OW 87
// if Truman then
5479: LD_EXP 20
5483: IFFALSE 5620
// begin ComMoveUnit ( Truman , JMM ) ;
5485: LD_EXP 20
5489: PPUSH
5490: LD_EXP 1
5494: PPUSH
5495: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5499: LD_INT 35
5501: PPUSH
5502: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
5506: LD_EXP 20
5510: PPUSH
5511: LD_EXP 1
5515: PPUSH
5516: CALL_OW 296
5520: PUSH
5521: LD_INT 6
5523: LESS
5524: IFFALSE 5499
// ComTurnUnit ( Truman , JMM ) ;
5526: LD_EXP 20
5530: PPUSH
5531: LD_EXP 1
5535: PPUSH
5536: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
5540: LD_EXP 1
5544: PPUSH
5545: LD_EXP 20
5549: PPUSH
5550: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
5554: LD_EXP 20
5558: PPUSH
5559: LD_STRING D2-Tru-1
5561: PPUSH
5562: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
5566: LD_EXP 1
5570: PPUSH
5571: LD_STRING D2-JMM-Tru-1
5573: PPUSH
5574: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
5578: LD_EXP 20
5582: PPUSH
5583: LD_STRING D2-Tru-2
5585: PPUSH
5586: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
5590: LD_EXP 20
5594: PPUSH
5595: LD_INT 79
5597: PPUSH
5598: LD_INT 41
5600: PPUSH
5601: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
5605: LD_EXP 20
5609: PPUSH
5610: LD_INT 17
5612: PPUSH
5613: LD_INT 31
5615: PPUSH
5616: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
5620: LD_EXP 1
5624: PPUSH
5625: LD_EXP 11
5629: PPUSH
5630: CALL_OW 179
// p := 15 ;
5634: LD_ADDR_VAR 0 1
5638: PUSH
5639: LD_INT 15
5641: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5642: LD_INT 35
5644: PPUSH
5645: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5649: LD_EXP 11
5653: PUSH
5654: LD_EXP 13
5658: PUSH
5659: LD_EXP 12
5663: PUSH
5664: LD_EXP 14
5668: PUSH
5669: LD_EXP 8
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: PPUSH
5681: LD_EXP 1
5685: PPUSH
5686: CALL_OW 112
// p := p - 1 ;
5690: LD_ADDR_VAR 0 1
5694: PUSH
5695: LD_VAR 0 1
5699: PUSH
5700: LD_INT 1
5702: MINUS
5703: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5704: LD_EXP 1
5708: PPUSH
5709: LD_EXP 11
5713: PPUSH
5714: CALL_OW 296
5718: PUSH
5719: LD_INT 5
5721: LESS
5722: PUSH
5723: LD_VAR 0 1
5727: PUSH
5728: LD_INT 0
5730: LESSEQUAL
5731: OR
5732: IFFALSE 5642
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5734: LD_EXP 11
5738: PUSH
5739: LD_EXP 13
5743: PUSH
5744: LD_EXP 12
5748: PUSH
5749: LD_EXP 14
5753: PUSH
5754: LD_EXP 8
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: LIST
5765: PPUSH
5766: LD_EXP 1
5770: PPUSH
5771: CALL_OW 119
// if not IsInUnit ( JMM ) then
5775: LD_EXP 1
5779: PPUSH
5780: CALL_OW 310
5784: NOT
5785: IFFALSE 5801
// ComTurnUnit ( JMM , Simms ) ;
5787: LD_EXP 1
5791: PPUSH
5792: LD_EXP 11
5796: PPUSH
5797: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5801: LD_EXP 11
5805: PUSH
5806: LD_EXP 13
5810: PUSH
5811: LD_EXP 12
5815: PUSH
5816: LD_EXP 14
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: PPUSH
5827: LD_EXP 1
5831: PPUSH
5832: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5836: LD_EXP 1
5840: PUSH
5841: LD_EXP 11
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PPUSH
5850: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5854: LD_EXP 11
5858: PPUSH
5859: LD_STRING D2a-Sim-1
5861: PPUSH
5862: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5866: LD_EXP 1
5870: PPUSH
5871: LD_STRING D2a-JMM-1
5873: PPUSH
5874: CALL_OW 88
// if IsOk ( Joan ) then
5878: LD_EXP 13
5882: PPUSH
5883: CALL_OW 302
5887: IFFALSE 5965
// begin if not IsInUnit ( JMM ) then
5889: LD_EXP 1
5893: PPUSH
5894: CALL_OW 310
5898: NOT
5899: IFFALSE 5915
// ComTurnUnit ( JMM , Joan ) ;
5901: LD_EXP 1
5905: PPUSH
5906: LD_EXP 13
5910: PPUSH
5911: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5915: LD_EXP 13
5919: PPUSH
5920: LD_EXP 1
5924: PPUSH
5925: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5929: LD_EXP 13
5933: PPUSH
5934: LD_STRING D2b-Joan-1
5936: PPUSH
5937: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5941: LD_EXP 1
5945: PPUSH
5946: LD_STRING D2b-JMM-1
5948: PPUSH
5949: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5953: LD_EXP 13
5957: PPUSH
5958: LD_STRING D2b-Joan-2
5960: PPUSH
5961: CALL_OW 88
// end ; if IsOk ( Denis ) then
5965: LD_EXP 12
5969: PPUSH
5970: CALL_OW 302
5974: IFFALSE 6028
// begin if not IsInUnit ( JMM ) then
5976: LD_EXP 1
5980: PPUSH
5981: CALL_OW 310
5985: NOT
5986: IFFALSE 6002
// ComTurnUnit ( JMM , Denis ) ;
5988: LD_EXP 1
5992: PPUSH
5993: LD_EXP 12
5997: PPUSH
5998: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
6002: LD_EXP 12
6006: PPUSH
6007: LD_EXP 1
6011: PPUSH
6012: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
6016: LD_EXP 12
6020: PPUSH
6021: LD_STRING D2c-Den-1
6023: PPUSH
6024: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
6028: LD_EXP 8
6032: PPUSH
6033: CALL_OW 302
6037: PUSH
6038: LD_STRING 08_Kikuchi
6040: PPUSH
6041: CALL_OW 28
6045: NOT
6046: AND
6047: IFFALSE 6142
// begin repeat wait ( 0 0$1 ) ;
6049: LD_INT 35
6051: PPUSH
6052: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
6056: LD_EXP 8
6060: PPUSH
6061: LD_EXP 1
6065: PPUSH
6066: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
6070: LD_EXP 1
6074: PPUSH
6075: LD_EXP 8
6079: PPUSH
6080: CALL_OW 296
6084: PUSH
6085: LD_INT 5
6087: LESS
6088: IFFALSE 6049
// ComTurnUnit ( Kikuchi , JMM ) ;
6090: LD_EXP 8
6094: PPUSH
6095: LD_EXP 1
6099: PPUSH
6100: CALL_OW 119
// if not IsInUnit ( JMM ) then
6104: LD_EXP 1
6108: PPUSH
6109: CALL_OW 310
6113: NOT
6114: IFFALSE 6130
// ComTurnUnit ( JMM , Kikuchi ) ;
6116: LD_EXP 1
6120: PPUSH
6121: LD_EXP 8
6125: PPUSH
6126: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
6130: LD_EXP 8
6134: PPUSH
6135: LD_STRING D3b-Yam-1
6137: PPUSH
6138: CALL_OW 88
// end ; if IsOk ( Khatam ) then
6142: LD_EXP 14
6146: PPUSH
6147: CALL_OW 302
6151: IFFALSE 6217
// begin if not IsInUnit ( JMM ) then
6153: LD_EXP 1
6157: PPUSH
6158: CALL_OW 310
6162: NOT
6163: IFFALSE 6179
// ComTurnUnit ( JMM , Khatam ) ;
6165: LD_EXP 1
6169: PPUSH
6170: LD_EXP 14
6174: PPUSH
6175: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
6179: LD_EXP 14
6183: PPUSH
6184: LD_EXP 1
6188: PPUSH
6189: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
6193: LD_EXP 1
6197: PPUSH
6198: LD_STRING D2c-JMM-1
6200: PPUSH
6201: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
6205: LD_EXP 14
6209: PPUSH
6210: LD_STRING D2c-Khat-1
6212: PPUSH
6213: CALL_OW 88
// end ; Video ( false ) ;
6217: LD_INT 0
6219: PPUSH
6220: CALL 87352 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
6224: LD_INT 22
6226: PUSH
6227: LD_INT 4
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PPUSH
6234: CALL_OW 69
6238: PUSH
6239: LD_EXP 20
6243: DIFF
6244: PPUSH
6245: LD_INT 1
6247: PPUSH
6248: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
6252: LD_STRING M1a
6254: PPUSH
6255: CALL_OW 337
// joinEpsilon := 1 ;
6259: LD_ADDR_EXP 30
6263: PUSH
6264: LD_INT 1
6266: ST_TO_ADDR
// end ;
6267: PPOPN 1
6269: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
6270: LD_INT 38
6272: PPUSH
6273: LD_INT 1
6275: PPUSH
6276: CALL_OW 289
6280: PUSH
6281: LD_INT 0
6283: EQUAL
6284: PUSH
6285: LD_INT 47
6287: PPUSH
6288: LD_INT 1
6290: PPUSH
6291: CALL_OW 289
6295: PUSH
6296: LD_INT 0
6298: EQUAL
6299: AND
6300: PUSH
6301: LD_INT 47
6303: PPUSH
6304: LD_INT 2
6306: PPUSH
6307: CALL_OW 289
6311: PUSH
6312: LD_INT 0
6314: EQUAL
6315: AND
6316: IFFALSE 6441
6318: GO 6320
6320: DISABLE
6321: LD_INT 0
6323: PPUSH
// begin p := 0 ;
6324: LD_ADDR_VAR 0 1
6328: PUSH
6329: LD_INT 0
6331: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6332: LD_INT 38
6334: PUSH
6335: LD_INT 47
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PPUSH
6342: LD_INT 56
6344: PPUSH
6345: LD_INT 0
6347: PPUSH
6348: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6352: LD_INT 35
6354: PPUSH
6355: CALL_OW 67
// p := p + 1 ;
6359: LD_ADDR_VAR 0 1
6363: PUSH
6364: LD_VAR 0 1
6368: PUSH
6369: LD_INT 1
6371: PLUS
6372: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6373: LD_INT 38
6375: PUSH
6376: LD_INT 47
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: PPUSH
6383: LD_INT 56
6385: PPUSH
6386: LD_INT 0
6388: PPUSH
6389: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6393: LD_INT 38
6395: PPUSH
6396: LD_INT 27
6398: PPUSH
6399: CALL_OW 308
6403: IFFALSE 6412
// RemoveUnit ( cargo1 ) ;
6405: LD_INT 38
6407: PPUSH
6408: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6412: LD_INT 47
6414: PPUSH
6415: LD_INT 27
6417: PPUSH
6418: CALL_OW 308
6422: IFFALSE 6431
// RemoveUnit ( cargo2 ) ;
6424: LD_INT 47
6426: PPUSH
6427: CALL_OW 64
// until p > 30 ;
6431: LD_VAR 0 1
6435: PUSH
6436: LD_INT 30
6438: GREATER
6439: IFFALSE 6352
// end ;
6441: PPOPN 1
6443: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6444: LD_EXP 66
6448: PUSH
6449: LD_INT 1
6451: EQUAL
6452: IFFALSE 7613
6454: GO 6456
6456: DISABLE
6457: LD_INT 0
6459: PPUSH
6460: PPUSH
6461: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6462: LD_ADDR_VAR 0 1
6466: PUSH
6467: LD_INT 22
6469: PUSH
6470: LD_INT 1
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PUSH
6477: LD_INT 25
6479: PUSH
6480: LD_INT 4
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 26
6489: PUSH
6490: LD_INT 1
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: LIST
6501: PPUSH
6502: CALL_OW 69
6506: PUSH
6507: LD_EXP 1
6511: PUSH
6512: LD_EXP 2
6516: PUSH
6517: LD_EXP 3
6521: PUSH
6522: LD_EXP 4
6526: PUSH
6527: LD_EXP 5
6531: PUSH
6532: LD_EXP 6
6536: PUSH
6537: LD_EXP 7
6541: PUSH
6542: LD_EXP 8
6546: PUSH
6547: LD_EXP 9
6551: PUSH
6552: LD_EXP 10
6556: PUSH
6557: LD_EXP 11
6561: PUSH
6562: LD_EXP 12
6566: PUSH
6567: LD_EXP 13
6571: PUSH
6572: LD_EXP 14
6576: PUSH
6577: LD_EXP 15
6581: PUSH
6582: LD_EXP 16
6586: PUSH
6587: LD_EXP 17
6591: PUSH
6592: LD_EXP 18
6596: PUSH
6597: LD_EXP 19
6601: PUSH
6602: LD_EXP 25
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: DIFF
6629: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6630: LD_ADDR_VAR 0 2
6634: PUSH
6635: LD_INT 22
6637: PUSH
6638: LD_INT 1
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 26
6647: PUSH
6648: LD_INT 1
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: LD_INT 2
6657: PUSH
6658: LD_INT 25
6660: PUSH
6661: LD_INT 1
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 25
6670: PUSH
6671: LD_INT 2
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 25
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: LIST
6698: PPUSH
6699: CALL_OW 69
6703: PUSH
6704: LD_EXP 1
6708: PUSH
6709: LD_EXP 2
6713: PUSH
6714: LD_EXP 3
6718: PUSH
6719: LD_EXP 4
6723: PUSH
6724: LD_EXP 5
6728: PUSH
6729: LD_EXP 6
6733: PUSH
6734: LD_EXP 7
6738: PUSH
6739: LD_EXP 8
6743: PUSH
6744: LD_EXP 9
6748: PUSH
6749: LD_EXP 10
6753: PUSH
6754: LD_EXP 11
6758: PUSH
6759: LD_EXP 12
6763: PUSH
6764: LD_EXP 13
6768: PUSH
6769: LD_EXP 14
6773: PUSH
6774: LD_EXP 15
6778: PUSH
6779: LD_EXP 16
6783: PUSH
6784: LD_EXP 17
6788: PUSH
6789: LD_EXP 18
6793: PUSH
6794: LD_EXP 19
6798: PUSH
6799: LD_EXP 25
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: DIFF
6826: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6827: LD_EXP 10
6831: PUSH
6832: LD_VAR 0 2
6836: OR
6837: PUSH
6838: LD_EXP 17
6842: PUSH
6843: LD_VAR 0 1
6847: OR
6848: AND
6849: IFFALSE 7068
// begin DialogueOn ;
6851: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6855: LD_EXP 17
6859: PPUSH
6860: CALL_OW 302
6864: IFFALSE 6880
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6866: LD_EXP 17
6870: PPUSH
6871: LD_STRING D3-Sci1-1
6873: PPUSH
6874: CALL_OW 88
6878: GO 6892
// Say ( tmp1 , D3-Sci1-1 ) ;
6880: LD_VAR 0 1
6884: PPUSH
6885: LD_STRING D3-Sci1-1
6887: PPUSH
6888: CALL_OW 88
// if IsOk ( Gary ) then
6892: LD_EXP 10
6896: PPUSH
6897: CALL_OW 302
6901: IFFALSE 6917
// Say ( Gary , D3-Gary-1 ) else
6903: LD_EXP 10
6907: PPUSH
6908: LD_STRING D3-Gary-1
6910: PPUSH
6911: CALL_OW 88
6915: GO 6929
// Say ( tmp2 , D3-Gary-1 ) ;
6917: LD_VAR 0 2
6921: PPUSH
6922: LD_STRING D3-Gary-1
6924: PPUSH
6925: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6929: LD_EXP 17
6933: PPUSH
6934: CALL_OW 302
6938: IFFALSE 6954
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6940: LD_EXP 17
6944: PPUSH
6945: LD_STRING D3-Sci1-2
6947: PPUSH
6948: CALL_OW 88
6952: GO 6966
// Say ( tmp1 , D3-Sci1-2 ) ;
6954: LD_VAR 0 1
6958: PPUSH
6959: LD_STRING D3-Sci1-2
6961: PPUSH
6962: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6966: LD_EXP 1
6970: PPUSH
6971: LD_STRING D3-JMM-2
6973: PPUSH
6974: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6978: LD_EXP 17
6982: PPUSH
6983: CALL_OW 302
6987: IFFALSE 7003
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6989: LD_EXP 17
6993: PPUSH
6994: LD_STRING D3-Sci1-3
6996: PPUSH
6997: CALL_OW 88
7001: GO 7015
// Say ( tmp1 , D3-Sci1-3 ) ;
7003: LD_VAR 0 1
7007: PPUSH
7008: LD_STRING D3-Sci1-3
7010: PPUSH
7011: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7015: LD_EXP 1
7019: PPUSH
7020: LD_STRING D3-JMM-3
7022: PPUSH
7023: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
7027: LD_EXP 17
7031: PPUSH
7032: CALL_OW 302
7036: IFFALSE 7052
// Say ( DeltaDoctor , D3-Sci1-4 ) else
7038: LD_EXP 17
7042: PPUSH
7043: LD_STRING D3-Sci1-4
7045: PPUSH
7046: CALL_OW 88
7050: GO 7064
// Say ( tmp1 , D3-Sci1-4 ) ;
7052: LD_VAR 0 1
7056: PPUSH
7057: LD_STRING D3-Sci1-4
7059: PPUSH
7060: CALL_OW 88
// DialogueOff ;
7064: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
7068: LD_INT 12
7070: PPUSH
7071: LD_INT 1
7073: PPUSH
7074: LD_INT 1
7076: PPUSH
7077: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
7081: LD_INT 32
7083: PPUSH
7084: LD_INT 1
7086: PPUSH
7087: LD_INT 1
7089: PPUSH
7090: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
7094: LD_INT 12
7096: PPUSH
7097: LD_INT 1
7099: PPUSH
7100: LD_INT 1
7102: PPUSH
7103: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
7107: LD_INT 33
7109: PPUSH
7110: LD_INT 1
7112: PPUSH
7113: LD_INT 1
7115: PPUSH
7116: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
7120: LD_STRING M2
7122: PPUSH
7123: CALL_OW 337
// wait ( 3 3$0 ) ;
7127: LD_INT 6300
7129: PPUSH
7130: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7134: LD_INT 35
7136: PPUSH
7137: CALL_OW 67
// until not InBattle ( 1 ) ;
7141: LD_INT 1
7143: PPUSH
7144: CALL_OW 463
7148: NOT
7149: IFFALSE 7134
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
7151: LD_EXP 11
7155: PPUSH
7156: CALL_OW 302
7160: PUSH
7161: LD_EXP 17
7165: PPUSH
7166: CALL_OW 302
7170: AND
7171: IFFALSE 7340
// begin DialogueOn ;
7173: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7177: LD_EXP 11
7181: PPUSH
7182: LD_STRING D3a-Sim-1
7184: PPUSH
7185: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
7189: LD_EXP 17
7193: PPUSH
7194: LD_STRING D3a-Sci1-1
7196: PPUSH
7197: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7201: LD_EXP 11
7205: PPUSH
7206: LD_STRING D3a-Sim-2
7208: PPUSH
7209: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
7213: LD_EXP 17
7217: PPUSH
7218: LD_STRING D3a-Sci1-2
7220: PPUSH
7221: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7225: LD_EXP 11
7229: PPUSH
7230: LD_STRING D3a-Sim-3
7232: PPUSH
7233: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
7237: LD_EXP 17
7241: PPUSH
7242: LD_STRING D3a-Sci1-3
7244: PPUSH
7245: CALL_OW 88
// if IsOK ( Joan ) then
7249: LD_EXP 13
7253: PPUSH
7254: CALL_OW 302
7258: IFFALSE 7274
// Say ( Simms , D3a-Sim-4 ) else
7260: LD_EXP 11
7264: PPUSH
7265: LD_STRING D3a-Sim-4
7267: PPUSH
7268: CALL_OW 88
7272: GO 7286
// Say ( Simms , D3a-Sim-4a ) ;
7274: LD_EXP 11
7278: PPUSH
7279: LD_STRING D3a-Sim-4a
7281: PPUSH
7282: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7286: LD_EXP 17
7290: PPUSH
7291: LD_STRING D3a-Sci1-4
7293: PPUSH
7294: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7298: LD_EXP 11
7302: PPUSH
7303: LD_STRING D3a-Sim-5
7305: PPUSH
7306: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7310: LD_EXP 17
7314: PPUSH
7315: LD_STRING D3a-Sci1-5
7317: PPUSH
7318: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7322: LD_EXP 11
7326: PPUSH
7327: LD_STRING D3a-Sim-6
7329: PPUSH
7330: CALL_OW 88
// DialogueOff ;
7334: CALL_OW 7
// end else
7338: GO 7613
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
7340: LD_ADDR_VAR 0 3
7344: PUSH
7345: LD_INT 22
7347: PUSH
7348: LD_INT 1
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 26
7357: PUSH
7358: LD_INT 1
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 25
7367: PUSH
7368: LD_INT 4
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: PPUSH
7380: CALL_OW 69
7384: PUSH
7385: LD_EXP 1
7389: PUSH
7390: LD_EXP 7
7394: PUSH
7395: LD_EXP 6
7399: PUSH
7400: LD_EXP 11
7404: PUSH
7405: LD_EXP 14
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: DIFF
7417: ST_TO_ADDR
// if tmp3 > 0 then
7418: LD_VAR 0 3
7422: PUSH
7423: LD_INT 0
7425: GREATER
7426: IFFALSE 7613
// begin DialogueOn ;
7428: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7432: LD_EXP 11
7436: PPUSH
7437: LD_STRING D3a-Sim-1
7439: PPUSH
7440: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7444: LD_VAR 0 3
7448: PUSH
7449: LD_INT 1
7451: ARRAY
7452: PPUSH
7453: LD_STRING D3a-Sci1-1
7455: PPUSH
7456: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7460: LD_EXP 11
7464: PPUSH
7465: LD_STRING D3a-Sim-2
7467: PPUSH
7468: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7472: LD_VAR 0 3
7476: PUSH
7477: LD_INT 1
7479: ARRAY
7480: PPUSH
7481: LD_STRING D3a-Sci1-2
7483: PPUSH
7484: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7488: LD_EXP 11
7492: PPUSH
7493: LD_STRING D3a-Sim-3
7495: PPUSH
7496: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7500: LD_VAR 0 3
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PPUSH
7509: LD_STRING D3a-Sci1-3
7511: PPUSH
7512: CALL_OW 88
// if IsOK ( Joan ) then
7516: LD_EXP 13
7520: PPUSH
7521: CALL_OW 302
7525: IFFALSE 7541
// Say ( Simms , D3a-Sim-4 ) else
7527: LD_EXP 11
7531: PPUSH
7532: LD_STRING D3a-Sim-4
7534: PPUSH
7535: CALL_OW 88
7539: GO 7553
// Say ( Simms , D3a-Sim-4a ) ;
7541: LD_EXP 11
7545: PPUSH
7546: LD_STRING D3a-Sim-4a
7548: PPUSH
7549: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7553: LD_VAR 0 3
7557: PUSH
7558: LD_INT 1
7560: ARRAY
7561: PPUSH
7562: LD_STRING D3a-Sci1-4
7564: PPUSH
7565: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7569: LD_EXP 11
7573: PPUSH
7574: LD_STRING D3a-Sim-5
7576: PPUSH
7577: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7581: LD_VAR 0 3
7585: PUSH
7586: LD_INT 1
7588: ARRAY
7589: PPUSH
7590: LD_STRING D3a-Sci1-5
7592: PPUSH
7593: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7597: LD_EXP 11
7601: PPUSH
7602: LD_STRING D3a-Sim-6
7604: PPUSH
7605: CALL_OW 88
// DialogueOff ;
7609: CALL_OW 7
// end ; end ; end ;
7613: PPOPN 3
7615: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7616: LD_EXP 30
7620: PUSH
7621: LD_INT 1
7623: EQUAL
7624: IFFALSE 7959
7626: GO 7628
7628: DISABLE
7629: LD_INT 0
7631: PPUSH
// begin wait ( 2 2$00 ) ;
7632: LD_INT 4200
7634: PPUSH
7635: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7639: LD_EXP 18
7643: PPUSH
7644: LD_STRING D4-FSol1-1
7646: PPUSH
7647: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7651: LD_STRING M3
7653: PPUSH
7654: CALL_OW 337
// PrepareRussians ;
7658: CALL 3748 0 0
// spawnRussians := true ;
7662: LD_ADDR_EXP 59
7666: PUSH
7667: LD_INT 1
7669: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7670: LD_ADDR_VAR 0 1
7674: PUSH
7675: LD_INT 1
7677: PPUSH
7678: LD_INT 100
7680: PPUSH
7681: CALL_OW 12
7685: ST_TO_ADDR
// if difficulty = 1 then
7686: LD_OWVAR 67
7690: PUSH
7691: LD_INT 1
7693: EQUAL
7694: IFFALSE 7777
// begin if rnd > 0 and rnd < 51 then
7696: LD_VAR 0 1
7700: PUSH
7701: LD_INT 0
7703: GREATER
7704: PUSH
7705: LD_VAR 0 1
7709: PUSH
7710: LD_INT 51
7712: LESS
7713: AND
7714: IFFALSE 7723
// BuildRussianBase ( 2 ) ;
7716: LD_INT 2
7718: PPUSH
7719: CALL 12065 0 1
// if rnd > 50 and rnd < 81 then
7723: LD_VAR 0 1
7727: PUSH
7728: LD_INT 50
7730: GREATER
7731: PUSH
7732: LD_VAR 0 1
7736: PUSH
7737: LD_INT 81
7739: LESS
7740: AND
7741: IFFALSE 7750
// BuildRussianBase ( 1 ) ;
7743: LD_INT 1
7745: PPUSH
7746: CALL 12065 0 1
// if rnd > 80 and rnd < 101 then
7750: LD_VAR 0 1
7754: PUSH
7755: LD_INT 80
7757: GREATER
7758: PUSH
7759: LD_VAR 0 1
7763: PUSH
7764: LD_INT 101
7766: LESS
7767: AND
7768: IFFALSE 7777
// BuildRussianBase ( 3 ) ;
7770: LD_INT 3
7772: PPUSH
7773: CALL 12065 0 1
// end ; if difficulty = 2 then
7777: LD_OWVAR 67
7781: PUSH
7782: LD_INT 2
7784: EQUAL
7785: IFFALSE 7868
// begin if rnd > 0 and rnd < 61 then
7787: LD_VAR 0 1
7791: PUSH
7792: LD_INT 0
7794: GREATER
7795: PUSH
7796: LD_VAR 0 1
7800: PUSH
7801: LD_INT 61
7803: LESS
7804: AND
7805: IFFALSE 7814
// BuildRussianBase ( 2 ) ;
7807: LD_INT 2
7809: PPUSH
7810: CALL 12065 0 1
// if rnd > 60 and rnd < 81 then
7814: LD_VAR 0 1
7818: PUSH
7819: LD_INT 60
7821: GREATER
7822: PUSH
7823: LD_VAR 0 1
7827: PUSH
7828: LD_INT 81
7830: LESS
7831: AND
7832: IFFALSE 7841
// BuildRussianBase ( 1 ) ;
7834: LD_INT 1
7836: PPUSH
7837: CALL 12065 0 1
// if rnd > 80 and rnd < 101 then
7841: LD_VAR 0 1
7845: PUSH
7846: LD_INT 80
7848: GREATER
7849: PUSH
7850: LD_VAR 0 1
7854: PUSH
7855: LD_INT 101
7857: LESS
7858: AND
7859: IFFALSE 7868
// BuildRussianBase ( 3 ) ;
7861: LD_INT 3
7863: PPUSH
7864: CALL 12065 0 1
// end ; if difficulty >= 3 then
7868: LD_OWVAR 67
7872: PUSH
7873: LD_INT 3
7875: GREATEREQUAL
7876: IFFALSE 7959
// begin if rnd > 0 and rnd < 71 then
7878: LD_VAR 0 1
7882: PUSH
7883: LD_INT 0
7885: GREATER
7886: PUSH
7887: LD_VAR 0 1
7891: PUSH
7892: LD_INT 71
7894: LESS
7895: AND
7896: IFFALSE 7905
// BuildRussianBase ( 3 ) ;
7898: LD_INT 3
7900: PPUSH
7901: CALL 12065 0 1
// if rnd > 70 and rnd < 81 then
7905: LD_VAR 0 1
7909: PUSH
7910: LD_INT 70
7912: GREATER
7913: PUSH
7914: LD_VAR 0 1
7918: PUSH
7919: LD_INT 81
7921: LESS
7922: AND
7923: IFFALSE 7932
// BuildRussianBase ( 2 ) ;
7925: LD_INT 2
7927: PPUSH
7928: CALL 12065 0 1
// if rnd > 80 and rnd < 101 then
7932: LD_VAR 0 1
7936: PUSH
7937: LD_INT 80
7939: GREATER
7940: PUSH
7941: LD_VAR 0 1
7945: PUSH
7946: LD_INT 101
7948: LESS
7949: AND
7950: IFFALSE 7959
// BuildRussianBase ( 1 ) ;
7952: LD_INT 1
7954: PPUSH
7955: CALL 12065 0 1
// end ; end ;
7959: PPOPN 1
7961: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7962: LD_INT 54
7964: PPUSH
7965: LD_INT 1
7967: PPUSH
7968: CALL_OW 321
7972: PUSH
7973: LD_INT 2
7975: EQUAL
7976: PUSH
7977: LD_INT 21
7979: PPUSH
7980: LD_INT 1
7982: PPUSH
7983: CALL_OW 321
7987: PUSH
7988: LD_INT 2
7990: EQUAL
7991: OR
7992: PUSH
7993: LD_INT 22
7995: PPUSH
7996: LD_INT 1
7998: PPUSH
7999: CALL_OW 321
8003: PUSH
8004: LD_INT 2
8006: EQUAL
8007: OR
8008: IFFALSE 8310
8010: GO 8012
8012: DISABLE
8013: LD_INT 0
8015: PPUSH
8016: PPUSH
// begin if IsOk ( DeltaDoctor ) then
8017: LD_EXP 17
8021: PPUSH
8022: CALL_OW 302
8026: IFFALSE 8040
// tmp := DeltaDoctor else
8028: LD_ADDR_VAR 0 2
8032: PUSH
8033: LD_EXP 17
8037: ST_TO_ADDR
8038: GO 8050
// tmp := Denis ;
8040: LD_ADDR_VAR 0 2
8044: PUSH
8045: LD_EXP 12
8049: ST_TO_ADDR
// if tmp then
8050: LD_VAR 0 2
8054: IFFALSE 8148
// begin DialogueOn ;
8056: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
8060: LD_EXP 1
8064: PPUSH
8065: LD_STRING D6-JMM-1
8067: PPUSH
8068: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
8072: LD_VAR 0 2
8076: PPUSH
8077: LD_STRING D6-Sci1-1
8079: PPUSH
8080: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
8084: LD_EXP 1
8088: PPUSH
8089: LD_STRING D6-JMM-2
8091: PPUSH
8092: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
8096: LD_VAR 0 2
8100: PPUSH
8101: LD_STRING D6-Sci1-2
8103: PPUSH
8104: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
8108: LD_EXP 1
8112: PPUSH
8113: LD_STRING D6-JMM-3
8115: PPUSH
8116: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
8120: LD_VAR 0 2
8124: PPUSH
8125: LD_STRING D6-Sci1-3
8127: PPUSH
8128: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
8132: LD_EXP 1
8136: PPUSH
8137: LD_STRING D6-JMM-4
8139: PPUSH
8140: CALL_OW 88
// DialogueOff ;
8144: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
8148: LD_INT 1050
8150: PPUSH
8151: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
8155: LD_EXP 50
8159: PUSH
8160: LD_INT 0
8162: EQUAL
8163: PUSH
8164: LD_EXP 14
8168: PPUSH
8169: CALL_OW 302
8173: AND
8174: IFFALSE 8232
// begin DialogueOn ;
8176: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
8180: LD_EXP 28
8184: PPUSH
8185: LD_STRING D5-Ar1-1
8187: PPUSH
8188: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
8192: LD_EXP 27
8196: PPUSH
8197: LD_STRING D5-Diet-1
8199: PPUSH
8200: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
8204: LD_EXP 28
8208: PPUSH
8209: LD_STRING D5-Ar1-2
8211: PPUSH
8212: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
8216: LD_EXP 27
8220: PPUSH
8221: LD_STRING D5-Diet-2
8223: PPUSH
8224: CALL_OW 88
// DialogueOff ;
8228: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
8232: LD_INT 35
8234: PPUSH
8235: CALL_OW 67
// until tick > 10 10$00 ;
8239: LD_OWVAR 1
8243: PUSH
8244: LD_INT 21000
8246: GREATER
8247: IFFALSE 8232
// wait ( 1 1$30 ) ;
8249: LD_INT 3150
8251: PPUSH
8252: CALL_OW 67
// if arabianTrait = 0 then
8256: LD_EXP 50
8260: PUSH
8261: LD_INT 0
8263: EQUAL
8264: IFFALSE 8310
// begin arabianTrait = 1 ;
8266: LD_ADDR_EXP 50
8270: PUSH
8271: LD_INT 1
8273: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
8274: LD_INT 2
8276: PPUSH
8277: LD_INT 3
8279: PPUSH
8280: LD_INT 1
8282: PPUSH
8283: LD_INT 1
8285: PPUSH
8286: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
8290: LD_INT 2
8292: PPUSH
8293: LD_INT 6
8295: PPUSH
8296: LD_INT 1
8298: PPUSH
8299: LD_INT 1
8301: PPUSH
8302: CALL_OW 80
// PrepareArabianTrait ;
8306: CALL 8313 0 0
// end ; end ;
8310: PPOPN 2
8312: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8313: LD_INT 0
8315: PPUSH
8316: PPUSH
8317: PPUSH
8318: PPUSH
8319: PPUSH
8320: PPUSH
8321: PPUSH
8322: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8323: LD_ADDR_VAR 0 6
8327: PUSH
8328: LD_INT 22
8330: PUSH
8331: LD_INT 2
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 2
8340: PUSH
8341: LD_INT 25
8343: PUSH
8344: LD_INT 4
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: PUSH
8351: LD_INT 25
8353: PUSH
8354: LD_INT 2
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PUSH
8361: LD_INT 25
8363: PUSH
8364: LD_INT 3
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: PPUSH
8381: CALL_OW 69
8385: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8386: LD_ADDR_VAR 0 5
8390: PUSH
8391: LD_INT 22
8393: PUSH
8394: LD_INT 2
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PUSH
8401: LD_INT 21
8403: PUSH
8404: LD_INT 1
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PUSH
8411: LD_INT 2
8413: PUSH
8414: LD_INT 25
8416: PUSH
8417: LD_INT 1
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 25
8426: PUSH
8427: LD_INT 8
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: PUSH
8434: LD_INT 25
8436: PUSH
8437: LD_INT 15
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: LIST
8454: PPUSH
8455: CALL_OW 69
8459: PUSH
8460: LD_EXP 27
8464: PUSH
8465: EMPTY
8466: LIST
8467: DIFF
8468: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8469: LD_ADDR_VAR 0 7
8473: PUSH
8474: LD_INT 22
8476: PUSH
8477: LD_INT 2
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: LD_INT 30
8486: PUSH
8487: LD_INT 5
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PPUSH
8498: CALL_OW 69
8502: PUSH
8503: LD_INT 1
8505: ARRAY
8506: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8507: LD_VAR 0 6
8511: PPUSH
8512: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8516: LD_VAR 0 5
8520: PPUSH
8521: CALL_OW 122
// wait ( 0 0$3 ) ;
8525: LD_INT 105
8527: PPUSH
8528: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8532: LD_VAR 0 6
8536: PPUSH
8537: LD_VAR 0 7
8541: PPUSH
8542: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8546: LD_VAR 0 6
8550: PPUSH
8551: LD_INT 1
8553: PUSH
8554: LD_INT 8
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 1
8563: PPUSH
8564: LD_INT 2
8566: PPUSH
8567: CALL_OW 12
8571: ARRAY
8572: PPUSH
8573: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8577: LD_VAR 0 6
8581: PPUSH
8582: CALL_OW 182
// wait ( 0 0$1 ) ;
8586: LD_INT 35
8588: PPUSH
8589: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8593: LD_INT 76
8595: PPUSH
8596: LD_INT 19
8598: PPUSH
8599: CALL_OW 84
// DialogueOn ;
8603: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8607: LD_INT 22
8609: PUSH
8610: LD_INT 1
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PUSH
8617: LD_INT 26
8619: PUSH
8620: LD_INT 1
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: PUSH
8627: LD_INT 2
8629: PUSH
8630: LD_INT 25
8632: PUSH
8633: LD_INT 1
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 25
8642: PUSH
8643: LD_INT 2
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 25
8652: PUSH
8653: LD_INT 3
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PUSH
8660: LD_INT 25
8662: PUSH
8663: LD_INT 4
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PUSH
8670: LD_INT 25
8672: PUSH
8673: LD_INT 5
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: LIST
8692: PPUSH
8693: CALL_OW 69
8697: PPUSH
8698: LD_STRING D8-Sol1-1
8700: PPUSH
8701: LD_STRING D8-Sol1-1
8703: PPUSH
8704: CALL 11407 0 3
// if IsOK ( DeltaDoctor ) then
8708: LD_EXP 17
8712: PPUSH
8713: CALL_OW 302
8717: IFFALSE 8733
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8719: LD_EXP 17
8723: PPUSH
8724: LD_STRING D8-Sci1-1
8726: PPUSH
8727: CALL_OW 88
8731: GO 8834
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8733: LD_INT 22
8735: PUSH
8736: LD_INT 1
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PUSH
8743: LD_INT 26
8745: PUSH
8746: LD_INT 1
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 2
8755: PUSH
8756: LD_INT 25
8758: PUSH
8759: LD_INT 1
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 25
8768: PUSH
8769: LD_INT 2
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 25
8778: PUSH
8779: LD_INT 3
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 25
8788: PUSH
8789: LD_INT 4
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: LD_INT 25
8798: PUSH
8799: LD_INT 5
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: LIST
8818: PPUSH
8819: CALL_OW 69
8823: PPUSH
8824: LD_STRING D8-Sol1-1
8826: PPUSH
8827: LD_STRING D8-Sol1-1
8829: PPUSH
8830: CALL 11407 0 3
// Say ( JMM , D8-JMM-1 ) ;
8834: LD_EXP 1
8838: PPUSH
8839: LD_STRING D8-JMM-1
8841: PPUSH
8842: CALL_OW 88
// DialogueOff ;
8846: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8850: LD_INT 2
8852: PPUSH
8853: LD_INT 2
8855: PPUSH
8856: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8860: LD_INT 1
8862: PPUSH
8863: LD_INT 2
8865: PPUSH
8866: LD_INT 2
8868: PPUSH
8869: LD_INT 1
8871: PPUSH
8872: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8876: LD_INT 3
8878: PPUSH
8879: LD_INT 2
8881: PPUSH
8882: LD_INT 1
8884: PPUSH
8885: LD_INT 1
8887: PPUSH
8888: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8892: LD_STRING M4
8894: PPUSH
8895: CALL_OW 337
// wait ( 0 0$1 ) ;
8899: LD_INT 35
8901: PPUSH
8902: CALL_OW 67
// if IsLive ( Khatam ) then
8906: LD_EXP 14
8910: PPUSH
8911: CALL_OW 300
8915: IFFALSE 8929
// DoNotAttack ( 2 , Khatam ) ;
8917: LD_INT 2
8919: PPUSH
8920: LD_EXP 14
8924: PPUSH
8925: CALL_OW 471
// wait ( 0 0$1 ) ;
8929: LD_INT 35
8931: PPUSH
8932: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8936: LD_ADDR_VAR 0 8
8940: PUSH
8941: LD_INT 22
8943: PUSH
8944: LD_INT 1
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: LD_INT 21
8953: PUSH
8954: LD_INT 3
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PPUSH
8965: CALL_OW 69
8969: PPUSH
8970: LD_VAR 0 5
8974: PUSH
8975: LD_INT 1
8977: ARRAY
8978: PPUSH
8979: CALL_OW 74
8983: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8984: LD_VAR 0 5
8988: PPUSH
8989: LD_INT 25
8991: PUSH
8992: LD_INT 1
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PPUSH
8999: CALL_OW 72
9003: PUSH
9004: LD_INT 1
9006: ARRAY
9007: PPUSH
9008: LD_VAR 0 8
9012: PPUSH
9013: CALL_OW 250
9017: PPUSH
9018: LD_VAR 0 8
9022: PPUSH
9023: CALL_OW 251
9027: PPUSH
9028: LD_VAR 0 8
9032: PPUSH
9033: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
9037: LD_VAR 0 5
9041: PPUSH
9042: LD_INT 84
9044: PPUSH
9045: LD_INT 22
9047: PPUSH
9048: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
9052: LD_VAR 0 5
9056: PPUSH
9057: LD_INT 82
9059: PPUSH
9060: LD_INT 5
9062: PPUSH
9063: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
9067: LD_VAR 0 5
9071: PPUSH
9072: LD_INT 95
9074: PPUSH
9075: LD_INT 12
9077: PPUSH
9078: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
9082: LD_VAR 0 5
9086: PPUSH
9087: LD_INT 102
9089: PPUSH
9090: LD_INT 11
9092: PPUSH
9093: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
9097: LD_VAR 0 5
9101: PPUSH
9102: LD_INT 116
9104: PPUSH
9105: LD_INT 15
9107: PPUSH
9108: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
9112: LD_VAR 0 5
9116: PPUSH
9117: LD_INT 140
9119: PPUSH
9120: LD_INT 25
9122: PPUSH
9123: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
9127: LD_VAR 0 5
9131: PPUSH
9132: LD_INT 160
9134: PPUSH
9135: LD_INT 56
9137: PPUSH
9138: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
9142: LD_ADDR_VAR 0 5
9146: PUSH
9147: LD_INT 22
9149: PUSH
9150: LD_INT 2
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PUSH
9157: LD_INT 21
9159: PUSH
9160: LD_INT 1
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: PUSH
9167: LD_INT 2
9169: PUSH
9170: LD_INT 25
9172: PUSH
9173: LD_INT 1
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PUSH
9180: LD_INT 25
9182: PUSH
9183: LD_INT 8
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PUSH
9190: LD_INT 25
9192: PUSH
9193: LD_INT 15
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: LIST
9210: PPUSH
9211: CALL_OW 69
9215: PUSH
9216: LD_EXP 27
9220: PUSH
9221: EMPTY
9222: LIST
9223: DIFF
9224: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
9225: LD_ADDR_VAR 0 6
9229: PUSH
9230: LD_INT 22
9232: PUSH
9233: LD_INT 2
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 21
9242: PUSH
9243: LD_INT 1
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 2
9252: PUSH
9253: LD_INT 25
9255: PUSH
9256: LD_INT 2
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PUSH
9263: LD_INT 25
9265: PUSH
9266: LD_INT 3
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 25
9275: PUSH
9276: LD_INT 4
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: LD_INT 25
9285: PUSH
9286: LD_INT 12
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: PUSH
9293: LD_INT 25
9295: PUSH
9296: LD_INT 16
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: PPUSH
9316: CALL_OW 69
9320: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9321: LD_ADDR_VAR 0 6
9325: PUSH
9326: LD_VAR 0 6
9330: PUSH
9331: LD_EXP 27
9335: ADD
9336: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9337: LD_VAR 0 5
9341: PPUSH
9342: LD_INT 189
9344: PPUSH
9345: LD_INT 79
9347: PPUSH
9348: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9352: LD_VAR 0 5
9356: PPUSH
9357: LD_INT 25
9359: PUSH
9360: LD_INT 15
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PPUSH
9367: CALL_OW 72
9371: IFFALSE 9412
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9373: LD_VAR 0 5
9377: PPUSH
9378: LD_INT 25
9380: PUSH
9381: LD_INT 15
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PPUSH
9388: CALL_OW 72
9392: PUSH
9393: LD_INT 1
9395: ARRAY
9396: PPUSH
9397: LD_INT 84
9399: PPUSH
9400: LD_INT 21
9402: PPUSH
9403: CALL_OW 428
9407: PPUSH
9408: CALL_OW 120
// wait ( 0 0$4 ) ;
9412: LD_INT 140
9414: PPUSH
9415: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9419: LD_VAR 0 6
9423: PPUSH
9424: LD_INT 88
9426: PPUSH
9427: LD_INT 8
9429: PPUSH
9430: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9434: LD_VAR 0 6
9438: PPUSH
9439: LD_INT 102
9441: PPUSH
9442: LD_INT 10
9444: PPUSH
9445: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9449: LD_VAR 0 6
9453: PPUSH
9454: LD_INT 116
9456: PPUSH
9457: LD_INT 15
9459: PPUSH
9460: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9464: LD_VAR 0 6
9468: PPUSH
9469: LD_INT 140
9471: PPUSH
9472: LD_INT 25
9474: PPUSH
9475: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9479: LD_VAR 0 6
9483: PPUSH
9484: LD_INT 160
9486: PPUSH
9487: LD_INT 56
9489: PPUSH
9490: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9494: LD_VAR 0 6
9498: PPUSH
9499: LD_INT 189
9501: PPUSH
9502: LD_INT 79
9504: PPUSH
9505: CALL_OW 171
// arabianAttackersAI = 1 ;
9509: LD_ADDR_EXP 47
9513: PUSH
9514: LD_INT 1
9516: ST_TO_ADDR
// if IsOk ( Gary ) then
9517: LD_EXP 10
9521: PPUSH
9522: CALL_OW 302
9526: IFFALSE 9540
// Say ( Gary , D8a-Gary-1 ) ;
9528: LD_EXP 10
9532: PPUSH
9533: LD_STRING D8a-Gary-1
9535: PPUSH
9536: CALL_OW 88
// wait ( 0 0$5 ) ;
9540: LD_INT 175
9542: PPUSH
9543: CALL_OW 67
// if IsOK ( Khatam ) then
9547: LD_EXP 14
9551: PPUSH
9552: CALL_OW 302
9556: IFFALSE 10092
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9558: LD_ADDR_VAR 0 3
9562: PUSH
9563: LD_INT 22
9565: PUSH
9566: LD_INT 1
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PUSH
9573: LD_INT 2
9575: PUSH
9576: LD_INT 25
9578: PUSH
9579: LD_INT 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 25
9588: PUSH
9589: LD_INT 2
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 25
9598: PUSH
9599: LD_INT 3
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 25
9608: PUSH
9609: LD_INT 4
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 25
9618: PUSH
9619: LD_INT 5
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 25
9628: PUSH
9629: LD_INT 8
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PPUSH
9649: CALL_OW 69
9653: PUSH
9654: LD_EXP 1
9658: PUSH
9659: LD_EXP 2
9663: PUSH
9664: LD_EXP 3
9668: PUSH
9669: LD_EXP 4
9673: PUSH
9674: LD_EXP 5
9678: PUSH
9679: LD_EXP 6
9683: PUSH
9684: LD_EXP 7
9688: PUSH
9689: LD_EXP 8
9693: PUSH
9694: LD_EXP 9
9698: PUSH
9699: LD_EXP 10
9703: PUSH
9704: LD_EXP 11
9708: PUSH
9709: LD_EXP 12
9713: PUSH
9714: LD_EXP 13
9718: PUSH
9719: LD_EXP 14
9723: PUSH
9724: LD_EXP 15
9728: PUSH
9729: LD_EXP 16
9733: PUSH
9734: LD_EXP 17
9738: PUSH
9739: LD_EXP 19
9743: PUSH
9744: LD_EXP 25
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: DIFF
9770: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9771: LD_EXP 14
9775: PPUSH
9776: LD_INT 8
9778: PPUSH
9779: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9783: LD_EXP 14
9787: PPUSH
9788: CALL_OW 122
// wait ( 0 0$1 ) ;
9792: LD_INT 35
9794: PPUSH
9795: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9799: LD_EXP 14
9803: PPUSH
9804: CALL_OW 121
// wait ( 0 0$1 ) ;
9808: LD_INT 35
9810: PPUSH
9811: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9815: LD_EXP 14
9819: PPUSH
9820: LD_INT 7
9822: PPUSH
9823: CALL_OW 113
// if not tmp then
9827: LD_VAR 0 3
9831: NOT
9832: IFFALSE 9836
// exit ;
9834: GO 10092
// DialogueOn ;
9836: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9840: LD_VAR 0 3
9844: PUSH
9845: LD_INT 1
9847: ARRAY
9848: PPUSH
9849: CALL_OW 258
9853: PUSH
9854: LD_INT 1
9856: EQUAL
9857: IFFALSE 9877
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9859: LD_VAR 0 3
9863: PUSH
9864: LD_INT 1
9866: ARRAY
9867: PPUSH
9868: LD_STRING D8b-Sol1-1
9870: PPUSH
9871: CALL_OW 88
9875: GO 9893
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9877: LD_VAR 0 3
9881: PUSH
9882: LD_INT 1
9884: ARRAY
9885: PPUSH
9886: LD_STRING D8b-FSol1-1
9888: PPUSH
9889: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9893: LD_EXP 14
9897: PPUSH
9898: LD_STRING D8b-Khat-1
9900: PPUSH
9901: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9905: LD_VAR 0 3
9909: PUSH
9910: LD_INT 1
9912: ARRAY
9913: PPUSH
9914: CALL_OW 258
9918: PUSH
9919: LD_INT 1
9921: EQUAL
9922: IFFALSE 9942
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9924: LD_VAR 0 3
9928: PUSH
9929: LD_INT 1
9931: ARRAY
9932: PPUSH
9933: LD_STRING D8b-Sol1-2
9935: PPUSH
9936: CALL_OW 88
9940: GO 9958
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9942: LD_VAR 0 3
9946: PUSH
9947: LD_INT 1
9949: ARRAY
9950: PPUSH
9951: LD_STRING D8b-FSol1-2
9953: PPUSH
9954: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9958: LD_EXP 14
9962: PPUSH
9963: LD_STRING D8b-Khat-2
9965: PPUSH
9966: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9970: LD_VAR 0 3
9974: PUSH
9975: LD_INT 1
9977: ARRAY
9978: PPUSH
9979: CALL_OW 258
9983: PUSH
9984: LD_INT 1
9986: EQUAL
9987: IFFALSE 10007
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9989: LD_VAR 0 3
9993: PUSH
9994: LD_INT 1
9996: ARRAY
9997: PPUSH
9998: LD_STRING D8b-Sol1-3
10000: PPUSH
10001: CALL_OW 88
10005: GO 10023
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
10007: LD_VAR 0 3
10011: PUSH
10012: LD_INT 1
10014: ARRAY
10015: PPUSH
10016: LD_STRING D8b-FSol1-3
10018: PPUSH
10019: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
10023: LD_EXP 14
10027: PPUSH
10028: LD_STRING D8b-Khat-3
10030: PPUSH
10031: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
10035: LD_VAR 0 3
10039: PUSH
10040: LD_INT 1
10042: ARRAY
10043: PPUSH
10044: CALL_OW 258
10048: PUSH
10049: LD_INT 1
10051: EQUAL
10052: IFFALSE 10072
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
10054: LD_VAR 0 3
10058: PUSH
10059: LD_INT 1
10061: ARRAY
10062: PPUSH
10063: LD_STRING D8b-Sol1-4
10065: PPUSH
10066: CALL_OW 88
10070: GO 10088
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
10072: LD_VAR 0 3
10076: PUSH
10077: LD_INT 1
10079: ARRAY
10080: PPUSH
10081: LD_STRING D8b-FSol1-4
10083: PPUSH
10084: CALL_OW 88
// DialogueOff ;
10088: CALL_OW 7
// end ; end ;
10092: LD_VAR 0 1
10096: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
10097: LD_INT 7
10099: PPUSH
10100: LD_INT 22
10102: PUSH
10103: LD_INT 2
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PPUSH
10110: CALL_OW 70
10114: PUSH
10115: LD_INT 0
10117: GREATER
10118: PUSH
10119: LD_EXP 14
10123: PPUSH
10124: LD_INT 7
10126: PPUSH
10127: CALL_OW 308
10131: OR
10132: IFFALSE 10339
10134: GO 10136
10136: DISABLE
10137: LD_INT 0
10139: PPUSH
// begin enable ;
10140: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
10141: LD_ADDR_VAR 0 1
10145: PUSH
10146: LD_INT 7
10148: PPUSH
10149: LD_INT 22
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PPUSH
10159: CALL_OW 70
10163: PUSH
10164: FOR_IN
10165: IFFALSE 10306
// begin if GetClass ( i ) = 4 then
10167: LD_VAR 0 1
10171: PPUSH
10172: CALL_OW 257
10176: PUSH
10177: LD_INT 4
10179: EQUAL
10180: IFFALSE 10192
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
10182: LD_INT 1
10184: PPUSH
10185: LD_STRING 10_ScientistsEscape_1
10187: PPUSH
10188: CALL_OW 39
// if i = Dietrich then
10192: LD_VAR 0 1
10196: PUSH
10197: LD_EXP 27
10201: EQUAL
10202: IFFALSE 10212
// GensherStatus = 1 ;
10204: LD_ADDR_EXP 53
10208: PUSH
10209: LD_INT 1
10211: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
10212: LD_VAR 0 1
10216: PPUSH
10217: CALL_OW 257
10221: PUSH
10222: LD_INT 1
10224: EQUAL
10225: PUSH
10226: LD_VAR 0 1
10230: PPUSH
10231: CALL_OW 257
10235: PUSH
10236: LD_INT 2
10238: EQUAL
10239: OR
10240: PUSH
10241: LD_VAR 0 1
10245: PPUSH
10246: CALL_OW 257
10250: PUSH
10251: LD_INT 3
10253: EQUAL
10254: OR
10255: PUSH
10256: LD_VAR 0 1
10260: PPUSH
10261: CALL_OW 257
10265: PUSH
10266: LD_INT 4
10268: EQUAL
10269: OR
10270: PUSH
10271: LD_VAR 0 1
10275: PPUSH
10276: CALL_OW 257
10280: PUSH
10281: LD_INT 8
10283: EQUAL
10284: OR
10285: IFFALSE 10295
// arabianEscape = 1 ;
10287: LD_ADDR_EXP 48
10291: PUSH
10292: LD_INT 1
10294: ST_TO_ADDR
// RemoveUnit ( i ) ;
10295: LD_VAR 0 1
10299: PPUSH
10300: CALL_OW 64
// end ;
10304: GO 10164
10306: POP
10307: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
10308: LD_EXP 14
10312: PPUSH
10313: LD_INT 7
10315: PPUSH
10316: CALL_OW 308
10320: IFFALSE 10339
// begin KhatamStatus = 1 ;
10322: LD_ADDR_EXP 54
10326: PUSH
10327: LD_INT 1
10329: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10330: LD_EXP 14
10334: PPUSH
10335: CALL_OW 64
// end ; end ;
10339: PPOPN 1
10341: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10342: LD_INT 22
10344: PUSH
10345: LD_INT 2
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: LD_INT 21
10354: PUSH
10355: LD_INT 1
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PPUSH
10366: CALL_OW 69
10370: PUSH
10371: LD_INT 0
10373: EQUAL
10374: PUSH
10375: LD_INT 22
10377: PUSH
10378: LD_INT 4
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 21
10387: PUSH
10388: LD_INT 1
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PPUSH
10399: CALL_OW 69
10403: PUSH
10404: LD_INT 0
10406: EQUAL
10407: AND
10408: IFFALSE 10421
10410: GO 10412
10412: DISABLE
// arabianDefeated = 1 ;
10413: LD_ADDR_EXP 49
10417: PUSH
10418: LD_INT 1
10420: ST_TO_ADDR
10421: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10422: LD_INT 54
10424: PPUSH
10425: LD_INT 1
10427: PPUSH
10428: CALL_OW 321
10432: PUSH
10433: LD_INT 2
10435: EQUAL
10436: PUSH
10437: LD_INT 55
10439: PPUSH
10440: LD_INT 1
10442: PPUSH
10443: CALL_OW 321
10447: PUSH
10448: LD_INT 2
10450: EQUAL
10451: AND
10452: PUSH
10453: LD_INT 21
10455: PPUSH
10456: LD_INT 1
10458: PPUSH
10459: CALL_OW 321
10463: PUSH
10464: LD_INT 2
10466: EQUAL
10467: AND
10468: PUSH
10469: LD_INT 22
10471: PPUSH
10472: LD_INT 1
10474: PPUSH
10475: CALL_OW 321
10479: PUSH
10480: LD_INT 2
10482: EQUAL
10483: AND
10484: PUSH
10485: LD_INT 12
10487: PPUSH
10488: LD_INT 1
10490: PPUSH
10491: CALL_OW 321
10495: PUSH
10496: LD_INT 2
10498: EQUAL
10499: AND
10500: PUSH
10501: LD_INT 32
10503: PPUSH
10504: LD_INT 1
10506: PPUSH
10507: CALL_OW 321
10511: PUSH
10512: LD_INT 2
10514: EQUAL
10515: AND
10516: PUSH
10517: LD_EXP 64
10521: PUSH
10522: LD_INT 0
10524: EQUAL
10525: AND
10526: PUSH
10527: LD_EXP 50
10531: PUSH
10532: LD_INT 0
10534: EQUAL
10535: AND
10536: PUSH
10537: LD_OWVAR 1
10541: PUSH
10542: LD_INT 31500
10544: GREATEREQUAL
10545: AND
10546: IFFALSE 10563
10548: GO 10550
10550: DISABLE
// begin arabianTrait = 1 ;
10551: LD_ADDR_EXP 50
10555: PUSH
10556: LD_INT 1
10558: ST_TO_ADDR
// PrepareArabianTrait ;
10559: CALL 8313 0 0
// end ;
10563: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10564: LD_EXP 30
10568: PUSH
10569: LD_STRING 02_mikhailStatus_1
10571: PPUSH
10572: LD_INT 0
10574: PPUSH
10575: CALL_OW 30
10579: PUSH
10580: LD_INT 1
10582: EQUAL
10583: AND
10584: PUSH
10585: LD_INT 22
10587: PUSH
10588: LD_INT 5
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PPUSH
10595: CALL_OW 69
10599: PUSH
10600: LD_INT 0
10602: EQUAL
10603: AND
10604: PUSH
10605: LD_INT 22
10607: PUSH
10608: LD_INT 2
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 21
10617: PUSH
10618: LD_INT 1
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PPUSH
10629: CALL_OW 69
10633: PUSH
10634: LD_INT 0
10636: EQUAL
10637: PUSH
10638: LD_EXP 50
10642: PUSH
10643: LD_INT 0
10645: EQUAL
10646: OR
10647: AND
10648: IFFALSE 10657
10650: GO 10652
10652: DISABLE
// PrepareCornell ;
10653: CALL 3495 0 0
10657: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10658: LD_INT 22
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PPUSH
10668: CALL_OW 69
10672: PPUSH
10673: LD_EXP 19
10677: PPUSH
10678: CALL_OW 74
10682: PPUSH
10683: LD_EXP 19
10687: PPUSH
10688: CALL_OW 296
10692: PUSH
10693: LD_INT 9
10695: LESS
10696: IFFALSE 10917
10698: GO 10700
10700: DISABLE
// begin InGameOn ;
10701: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10705: LD_EXP 19
10709: PPUSH
10710: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10714: LD_EXP 19
10718: PPUSH
10719: LD_STRING D7-Corn-1
10721: PPUSH
10722: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10726: LD_INT 22
10728: PUSH
10729: LD_INT 1
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: LD_INT 25
10741: PUSH
10742: LD_INT 1
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 25
10751: PUSH
10752: LD_INT 2
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 25
10761: PUSH
10762: LD_INT 3
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 25
10771: PUSH
10772: LD_INT 4
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 25
10781: PUSH
10782: LD_INT 5
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PPUSH
10801: CALL_OW 69
10805: PPUSH
10806: LD_STRING D7-Sol1-1
10808: PPUSH
10809: LD_STRING D7-FSol1-1
10811: PPUSH
10812: CALL 11407 0 3
// CenterNowOnUnits ( Cornell ) ;
10816: LD_EXP 19
10820: PPUSH
10821: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10825: LD_EXP 19
10829: PPUSH
10830: LD_STRING D7-Corn-2
10832: PPUSH
10833: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10837: LD_EXP 1
10841: PPUSH
10842: LD_STRING D7-JMM-2
10844: PPUSH
10845: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10849: LD_EXP 19
10853: PPUSH
10854: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10858: LD_EXP 19
10862: PPUSH
10863: LD_STRING D7-Corn-3
10865: PPUSH
10866: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10870: LD_EXP 19
10874: PPUSH
10875: LD_INT 250
10877: PPUSH
10878: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10882: LD_EXP 19
10886: PPUSH
10887: LD_INT 1
10889: PPUSH
10890: CALL_OW 235
// wait ( 0 0$1 ) ;
10894: LD_INT 35
10896: PPUSH
10897: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10901: LD_EXP 1
10905: PPUSH
10906: LD_STRING D7-JMM-3
10908: PPUSH
10909: CALL_OW 88
// InGameOff ;
10913: CALL_OW 9
// end ;
10917: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10918: LD_EXP 19
10922: PPUSH
10923: CALL_OW 255
10927: PUSH
10928: LD_INT 1
10930: EQUAL
10931: PUSH
10932: LD_EXP 19
10936: PPUSH
10937: CALL_OW 256
10941: PUSH
10942: LD_INT 350
10944: GREATER
10945: AND
10946: IFFALSE 11139
10948: GO 10950
10950: DISABLE
// begin DialogueOn ;
10951: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10955: LD_EXP 1
10959: PPUSH
10960: LD_STRING D7a-JMM-1
10962: PPUSH
10963: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10967: LD_EXP 19
10971: PPUSH
10972: LD_STRING D7a-Corn-1
10974: PPUSH
10975: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10979: LD_EXP 1
10983: PPUSH
10984: LD_STRING D7a-JMM-2
10986: PPUSH
10987: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10991: LD_EXP 19
10995: PPUSH
10996: LD_STRING D7a-Corn-2
10998: PPUSH
10999: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
11003: LD_EXP 1
11007: PPUSH
11008: LD_STRING D7a-JMM-3
11010: PPUSH
11011: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
11015: LD_EXP 19
11019: PPUSH
11020: LD_STRING D7a-Corn-3
11022: PPUSH
11023: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
11027: LD_EXP 1
11031: PPUSH
11032: LD_STRING D7a-JMM-4
11034: PPUSH
11035: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
11039: LD_EXP 19
11043: PPUSH
11044: LD_STRING D7a-Corn-4
11046: PPUSH
11047: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
11051: LD_EXP 1
11055: PPUSH
11056: LD_STRING D7a-JMM-5
11058: PPUSH
11059: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
11063: LD_EXP 19
11067: PPUSH
11068: LD_STRING D7a-Corn-5
11070: PPUSH
11071: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
11075: LD_EXP 1
11079: PPUSH
11080: LD_STRING D7a-JMM-6
11082: PPUSH
11083: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
11087: LD_EXP 19
11091: PPUSH
11092: LD_STRING D7a-Corn-6
11094: PPUSH
11095: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
11099: LD_EXP 1
11103: PPUSH
11104: LD_STRING D7a-JMM-7
11106: PPUSH
11107: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
11111: LD_EXP 19
11115: PPUSH
11116: LD_STRING D7a-Corn-7
11118: PPUSH
11119: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
11123: LD_EXP 1
11127: PPUSH
11128: LD_STRING D7a-JMM-8
11130: PPUSH
11131: CALL_OW 88
// DialogueOff ;
11135: CALL_OW 7
// end ;
11139: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
11140: LD_EXP 62
11144: PUSH
11145: LD_EXP 1
11149: PPUSH
11150: CALL_OW 302
11154: PUSH
11155: LD_EXP 5
11159: PPUSH
11160: CALL_OW 302
11164: OR
11165: AND
11166: IFFALSE 11256
11168: GO 11170
11170: DISABLE
// begin Wait ( 0 0$2 ) ;
11171: LD_INT 70
11173: PPUSH
11174: CALL_OW 67
// DialogueOn ;
11178: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
11182: LD_EXP 62
11186: PUSH
11187: LD_INT 1
11189: ARRAY
11190: PPUSH
11191: LD_EXP 62
11195: PUSH
11196: LD_INT 2
11198: ARRAY
11199: PPUSH
11200: CALL_OW 86
// if IsOk ( Cyrus ) then
11204: LD_EXP 5
11208: PPUSH
11209: CALL_OW 302
11213: IFFALSE 11229
// Say ( Cyrus , D10-Cyrus-1 ) else
11215: LD_EXP 5
11219: PPUSH
11220: LD_STRING D10-Cyrus-1
11222: PPUSH
11223: CALL_OW 88
11227: GO 11252
// if IsOk ( JMM ) then
11229: LD_EXP 1
11233: PPUSH
11234: CALL_OW 302
11238: IFFALSE 11252
// Say ( JMM , D10-JMM-1 ) ;
11240: LD_EXP 1
11244: PPUSH
11245: LD_STRING D10-JMM-1
11247: PPUSH
11248: CALL_OW 88
// DialogueOff ;
11252: CALL_OW 7
// end ;
11256: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
11257: LD_INT 12
11259: PPUSH
11260: LD_INT 1
11262: PPUSH
11263: CALL_OW 321
11267: PUSH
11268: LD_INT 2
11270: EQUAL
11271: IFFALSE 11283
11273: GO 11275
11275: DISABLE
// ChangeMissionObjectives ( M2b ) ;
11276: LD_STRING M2b
11278: PPUSH
11279: CALL_OW 337
11283: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
11284: LD_INT 32
11286: PPUSH
11287: LD_INT 1
11289: PPUSH
11290: CALL_OW 321
11294: PUSH
11295: LD_INT 2
11297: EQUAL
11298: IFFALSE 11310
11300: GO 11302
11302: DISABLE
// ChangeMissionObjectives ( M2c ) ;
11303: LD_STRING M2c
11305: PPUSH
11306: CALL_OW 337
11310: END
// every 0 0$1 trigger arabianDefeated = 1 do
11311: LD_EXP 49
11315: PUSH
11316: LD_INT 1
11318: EQUAL
11319: IFFALSE 11331
11321: GO 11323
11323: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11324: LD_STRING M4a
11326: PPUSH
11327: CALL_OW 337
11331: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11332: LD_INT 54
11334: PPUSH
11335: LD_INT 1
11337: PPUSH
11338: CALL_OW 321
11342: PUSH
11343: LD_INT 2
11345: EQUAL
11346: PUSH
11347: LD_INT 55
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 321
11357: PUSH
11358: LD_INT 2
11360: EQUAL
11361: AND
11362: PUSH
11363: LD_INT 21
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 321
11373: PUSH
11374: LD_INT 2
11376: EQUAL
11377: AND
11378: PUSH
11379: LD_INT 22
11381: PPUSH
11382: LD_INT 1
11384: PPUSH
11385: CALL_OW 321
11389: PUSH
11390: LD_INT 2
11392: EQUAL
11393: AND
11394: IFFALSE 11406
11396: GO 11398
11398: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11399: LD_STRING M2a
11401: PPUSH
11402: CALL_OW 337
11406: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11407: LD_INT 0
11409: PPUSH
11410: PPUSH
11411: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11412: LD_ADDR_VAR 0 1
11416: PUSH
11417: LD_VAR 0 1
11421: PUSH
11422: LD_EXP 1
11426: PUSH
11427: LD_EXP 2
11431: PUSH
11432: LD_EXP 3
11436: PUSH
11437: LD_EXP 4
11441: PUSH
11442: LD_EXP 5
11446: PUSH
11447: LD_EXP 6
11451: PUSH
11452: LD_EXP 7
11456: PUSH
11457: LD_EXP 8
11461: PUSH
11462: LD_EXP 9
11466: PUSH
11467: LD_EXP 10
11471: PUSH
11472: LD_EXP 11
11476: PUSH
11477: LD_EXP 12
11481: PUSH
11482: LD_EXP 13
11486: PUSH
11487: LD_EXP 14
11491: PUSH
11492: LD_EXP 15
11496: PUSH
11497: LD_EXP 16
11501: PUSH
11502: LD_EXP 17
11506: PUSH
11507: LD_EXP 18
11511: PUSH
11512: LD_EXP 19
11516: PUSH
11517: LD_EXP 25
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: DIFF
11544: ST_TO_ADDR
// if not characters then
11545: LD_VAR 0 1
11549: NOT
11550: IFFALSE 11554
// exit ;
11552: GO 11700
// rnd = rand ( 1 , characters ) ;
11554: LD_ADDR_VAR 0 6
11558: PUSH
11559: LD_INT 1
11561: PPUSH
11562: LD_VAR 0 1
11566: PPUSH
11567: CALL_OW 12
11571: ST_TO_ADDR
// for i = 1 to characters do
11572: LD_ADDR_VAR 0 5
11576: PUSH
11577: DOUBLE
11578: LD_INT 1
11580: DEC
11581: ST_TO_ADDR
11582: LD_VAR 0 1
11586: PUSH
11587: FOR_TO
11588: IFFALSE 11698
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11590: LD_VAR 0 5
11594: PUSH
11595: LD_VAR 0 6
11599: EQUAL
11600: PUSH
11601: LD_VAR 0 1
11605: PUSH
11606: LD_VAR 0 5
11610: ARRAY
11611: PPUSH
11612: CALL_OW 258
11616: PUSH
11617: LD_INT 1
11619: EQUAL
11620: AND
11621: IFFALSE 11643
// Say ( characters [ i ] , dialogMID ) ;
11623: LD_VAR 0 1
11627: PUSH
11628: LD_VAR 0 5
11632: ARRAY
11633: PPUSH
11634: LD_VAR 0 2
11638: PPUSH
11639: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11643: LD_VAR 0 5
11647: PUSH
11648: LD_VAR 0 6
11652: EQUAL
11653: PUSH
11654: LD_VAR 0 1
11658: PUSH
11659: LD_VAR 0 5
11663: ARRAY
11664: PPUSH
11665: CALL_OW 258
11669: PUSH
11670: LD_INT 2
11672: EQUAL
11673: AND
11674: IFFALSE 11696
// Say ( characters [ i ] , dialogFID ) ;
11676: LD_VAR 0 1
11680: PUSH
11681: LD_VAR 0 5
11685: ARRAY
11686: PPUSH
11687: LD_VAR 0 3
11691: PPUSH
11692: CALL_OW 88
// end ;
11696: GO 11587
11698: POP
11699: POP
// end ;
11700: LD_VAR 0 4
11704: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11705: LD_INT 0
11707: PPUSH
11708: PPUSH
// for i in charactersList do
11709: LD_ADDR_VAR 0 4
11713: PUSH
11714: LD_VAR 0 1
11718: PUSH
11719: FOR_IN
11720: IFFALSE 11738
// SaveCharacters ( i , ident ) ;
11722: LD_VAR 0 4
11726: PPUSH
11727: LD_VAR 0 2
11731: PPUSH
11732: CALL_OW 38
11736: GO 11719
11738: POP
11739: POP
// end ;
11740: LD_VAR 0 3
11744: RET
// export function PrepareDifficulty ; begin
11745: LD_INT 0
11747: PPUSH
// if difficulty = 1 then
11748: LD_OWVAR 67
11752: PUSH
11753: LD_INT 1
11755: EQUAL
11756: IFFALSE 11800
// begin RuSolMinLevel = 3 ;
11758: LD_ADDR_EXP 37
11762: PUSH
11763: LD_INT 3
11765: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11766: LD_ADDR_EXP 38
11770: PUSH
11771: LD_INT 5
11773: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11774: LD_INT 51
11776: PPUSH
11777: LD_INT 6
11779: PPUSH
11780: LD_INT 2
11782: PPUSH
11783: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11787: LD_INT 51
11789: PPUSH
11790: LD_INT 5
11792: PPUSH
11793: LD_INT 2
11795: PPUSH
11796: CALL_OW 322
// end ; if difficulty = 2 then
11800: LD_OWVAR 67
11804: PUSH
11805: LD_INT 2
11807: EQUAL
11808: IFFALSE 11904
// begin RuSolMinLevel = 5 ;
11810: LD_ADDR_EXP 37
11814: PUSH
11815: LD_INT 5
11817: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11818: LD_ADDR_EXP 38
11822: PUSH
11823: LD_INT 7
11825: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11826: LD_INT 51
11828: PPUSH
11829: LD_INT 6
11831: PPUSH
11832: LD_INT 2
11834: PPUSH
11835: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11839: LD_INT 57
11841: PPUSH
11842: LD_INT 6
11844: PPUSH
11845: LD_INT 2
11847: PPUSH
11848: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11852: LD_INT 63
11854: PPUSH
11855: LD_INT 6
11857: PPUSH
11858: LD_INT 2
11860: PPUSH
11861: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11865: LD_INT 51
11867: PPUSH
11868: LD_INT 5
11870: PPUSH
11871: LD_INT 2
11873: PPUSH
11874: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11878: LD_INT 5
11880: PPUSH
11881: LD_INT 2
11883: PPUSH
11884: LD_INT 2
11886: PPUSH
11887: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11891: LD_INT 5
11893: PPUSH
11894: LD_INT 5
11896: PPUSH
11897: LD_INT 2
11899: PPUSH
11900: CALL_OW 322
// end ; if difficulty >= 3 then
11904: LD_OWVAR 67
11908: PUSH
11909: LD_INT 3
11911: GREATEREQUAL
11912: IFFALSE 12060
// begin RuSolMinLevel = 6 ;
11914: LD_ADDR_EXP 37
11918: PUSH
11919: LD_INT 6
11921: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11922: LD_ADDR_EXP 38
11926: PUSH
11927: LD_INT 8
11929: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11930: LD_INT 51
11932: PPUSH
11933: LD_INT 6
11935: PPUSH
11936: LD_INT 2
11938: PPUSH
11939: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11943: LD_INT 57
11945: PPUSH
11946: LD_INT 6
11948: PPUSH
11949: LD_INT 2
11951: PPUSH
11952: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11956: LD_INT 52
11958: PPUSH
11959: LD_INT 6
11961: PPUSH
11962: LD_INT 2
11964: PPUSH
11965: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11969: LD_INT 58
11971: PPUSH
11972: LD_INT 6
11974: PPUSH
11975: LD_INT 2
11977: PPUSH
11978: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11982: LD_INT 63
11984: PPUSH
11985: LD_INT 6
11987: PPUSH
11988: LD_INT 2
11990: PPUSH
11991: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11995: LD_INT 64
11997: PPUSH
11998: LD_INT 6
12000: PPUSH
12001: LD_INT 2
12003: PPUSH
12004: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
12008: LD_INT 51
12010: PPUSH
12011: LD_INT 5
12013: PPUSH
12014: LD_INT 2
12016: PPUSH
12017: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
12021: LD_INT 52
12023: PPUSH
12024: LD_INT 5
12026: PPUSH
12027: LD_INT 2
12029: PPUSH
12030: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
12034: LD_INT 66
12036: PPUSH
12037: LD_INT 2
12039: PPUSH
12040: LD_INT 2
12042: PPUSH
12043: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
12047: LD_INT 66
12049: PPUSH
12050: LD_INT 5
12052: PPUSH
12053: LD_INT 2
12055: PPUSH
12056: CALL_OW 322
// end ; end ;
12060: LD_VAR 0 1
12064: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
12065: LD_INT 0
12067: PPUSH
12068: PPUSH
12069: PPUSH
12070: PPUSH
12071: PPUSH
12072: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
12073: LD_ADDR_VAR 0 7
12077: PUSH
12078: LD_INT 43
12080: PUSH
12081: LD_INT 68
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 43
12090: PUSH
12091: LD_INT 79
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 99
12100: PUSH
12101: LD_INT 114
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 103
12110: PUSH
12111: LD_INT 114
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 156
12120: PUSH
12121: LD_INT 92
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 152
12130: PUSH
12131: LD_INT 85
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: ST_TO_ADDR
// for i in sources do
12146: LD_ADDR_VAR 0 3
12150: PUSH
12151: LD_VAR 0 7
12155: PUSH
12156: FOR_IN
12157: IFFALSE 12186
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
12159: LD_VAR 0 3
12163: PUSH
12164: LD_INT 1
12166: ARRAY
12167: PPUSH
12168: LD_VAR 0 3
12172: PUSH
12173: LD_INT 2
12175: ARRAY
12176: PPUSH
12177: LD_INT 3
12179: PPUSH
12180: CALL_OW 441
12184: GO 12156
12186: POP
12187: POP
// case position of 1 :
12188: LD_VAR 0 1
12192: PUSH
12193: LD_INT 1
12195: DOUBLE
12196: EQUAL
12197: IFTRUE 12201
12199: GO 12212
12201: POP
// area := westConv ; 2 :
12202: LD_ADDR_VAR 0 6
12206: PUSH
12207: LD_INT 20
12209: ST_TO_ADDR
12210: GO 12251
12212: LD_INT 2
12214: DOUBLE
12215: EQUAL
12216: IFTRUE 12220
12218: GO 12231
12220: POP
// area := midConv ; 3 :
12221: LD_ADDR_VAR 0 6
12225: PUSH
12226: LD_INT 21
12228: ST_TO_ADDR
12229: GO 12251
12231: LD_INT 3
12233: DOUBLE
12234: EQUAL
12235: IFTRUE 12239
12237: GO 12250
12239: POP
// area := eastConv ; end ;
12240: LD_ADDR_VAR 0 6
12244: PUSH
12245: LD_INT 22
12247: ST_TO_ADDR
12248: GO 12251
12250: POP
// area := AreaToList ( area , 0 ) ;
12251: LD_ADDR_VAR 0 6
12255: PUSH
12256: LD_VAR 0 6
12260: PPUSH
12261: LD_INT 0
12263: PPUSH
12264: CALL_OW 517
12268: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
12269: LD_ADDR_VAR 0 3
12273: PUSH
12274: DOUBLE
12275: LD_INT 1
12277: DEC
12278: ST_TO_ADDR
12279: LD_VAR 0 6
12283: PUSH
12284: LD_INT 1
12286: ARRAY
12287: PUSH
12288: FOR_TO
12289: IFFALSE 12370
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
12291: LD_VAR 0 6
12295: PUSH
12296: LD_INT 1
12298: ARRAY
12299: PUSH
12300: LD_VAR 0 3
12304: ARRAY
12305: PPUSH
12306: LD_VAR 0 6
12310: PUSH
12311: LD_INT 2
12313: ARRAY
12314: PUSH
12315: LD_VAR 0 3
12319: ARRAY
12320: PPUSH
12321: LD_INT 1
12323: PPUSH
12324: LD_INT 1
12326: PPUSH
12327: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12331: LD_VAR 0 6
12335: PUSH
12336: LD_INT 1
12338: ARRAY
12339: PUSH
12340: LD_VAR 0 3
12344: ARRAY
12345: PPUSH
12346: LD_VAR 0 6
12350: PUSH
12351: LD_INT 2
12353: ARRAY
12354: PUSH
12355: LD_VAR 0 3
12359: ARRAY
12360: PPUSH
12361: LD_INT 1
12363: PPUSH
12364: CALL_OW 331
// end ;
12368: GO 12288
12370: POP
12371: POP
// ruPossition = position ;
12372: LD_ADDR_EXP 42
12376: PUSH
12377: LD_VAR 0 1
12381: ST_TO_ADDR
// if position = 1 then
12382: LD_VAR 0 1
12386: PUSH
12387: LD_INT 1
12389: EQUAL
12390: IFFALSE 13138
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12392: LD_ADDR_VAR 0 4
12396: PUSH
12397: LD_INT 22
12399: PUSH
12400: LD_INT 3
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: LD_INT 25
12409: PUSH
12410: LD_INT 2
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PPUSH
12421: CALL_OW 69
12425: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12426: LD_ADDR_VAR 0 5
12430: PUSH
12431: LD_INT 0
12433: PUSH
12434: LD_INT 49
12436: PUSH
12437: LD_INT 74
12439: PUSH
12440: LD_INT 3
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 4
12451: PUSH
12452: LD_INT 73
12454: PUSH
12455: LD_INT 88
12457: PUSH
12458: LD_INT 5
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 4
12469: PUSH
12470: LD_INT 56
12472: PUSH
12473: LD_INT 62
12475: PUSH
12476: LD_INT 3
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 29
12487: PUSH
12488: LD_INT 43
12490: PUSH
12491: LD_INT 68
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: PUSH
12503: LD_INT 30
12505: PUSH
12506: LD_INT 43
12508: PUSH
12509: LD_INT 79
12511: PUSH
12512: LD_INT 5
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 28
12523: PUSH
12524: LD_INT 60
12526: PUSH
12527: LD_INT 75
12529: PUSH
12530: LD_INT 1
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: PUSH
12539: LD_INT 2
12541: PUSH
12542: LD_INT 50
12544: PUSH
12545: LD_INT 87
12547: PUSH
12548: LD_INT 1
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: PUSH
12557: LD_INT 28
12559: PUSH
12560: LD_INT 45
12562: PUSH
12563: LD_INT 67
12565: PUSH
12566: LD_INT 2
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 17
12577: PUSH
12578: LD_INT 47
12580: PUSH
12581: LD_INT 84
12583: PUSH
12584: LD_INT 2
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: PUSH
12593: LD_INT 18
12595: PUSH
12596: LD_INT 46
12598: PUSH
12599: LD_INT 87
12601: PUSH
12602: LD_INT 1
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 28
12613: PUSH
12614: LD_INT 41
12616: PUSH
12617: LD_INT 64
12619: PUSH
12620: LD_INT 5
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 32
12631: PUSH
12632: LD_INT 75
12634: PUSH
12635: LD_INT 76
12637: PUSH
12638: LD_INT 5
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: PUSH
12647: LD_INT 32
12649: PUSH
12650: LD_INT 77
12652: PUSH
12653: LD_INT 75
12655: PUSH
12656: LD_INT 5
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 32
12667: PUSH
12668: LD_INT 69
12670: PUSH
12671: LD_INT 68
12673: PUSH
12674: LD_INT 3
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 32
12685: PUSH
12686: LD_INT 59
12688: PUSH
12689: LD_INT 96
12691: PUSH
12692: LD_INT 5
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: PUSH
12701: LD_INT 32
12703: PUSH
12704: LD_INT 56
12706: PUSH
12707: LD_INT 96
12709: PUSH
12710: LD_INT 0
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 32
12721: PUSH
12722: LD_INT 51
12724: PUSH
12725: LD_INT 61
12727: PUSH
12728: LD_INT 3
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 32
12739: PUSH
12740: LD_INT 42
12742: PUSH
12743: LD_INT 60
12745: PUSH
12746: LD_INT 3
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 32
12757: PUSH
12758: LD_INT 36
12760: PUSH
12761: LD_INT 58
12763: PUSH
12764: LD_INT 3
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 32
12775: PUSH
12776: LD_INT 39
12778: PUSH
12779: LD_INT 59
12781: PUSH
12782: LD_INT 3
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 32
12793: PUSH
12794: LD_INT 61
12796: PUSH
12797: LD_INT 64
12799: PUSH
12800: LD_INT 3
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 33
12811: PUSH
12812: LD_INT 63
12814: PUSH
12815: LD_INT 90
12817: PUSH
12818: LD_INT 5
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 33
12829: PUSH
12830: LD_INT 64
12832: PUSH
12833: LD_INT 88
12835: PUSH
12836: LD_INT 5
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 33
12847: PUSH
12848: LD_INT 72
12850: PUSH
12851: LD_INT 82
12853: PUSH
12854: LD_INT 5
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: PUSH
12863: LD_INT 6
12865: PUSH
12866: LD_INT 42
12868: PUSH
12869: LD_INT 74
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 6
12883: PUSH
12884: LD_INT 56
12886: PUSH
12887: LD_INT 77
12889: PUSH
12890: LD_INT 2
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: PUSH
12899: LD_INT 21
12901: PUSH
12902: LD_INT 54
12904: PUSH
12905: LD_INT 91
12907: PUSH
12908: LD_INT 5
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 16
12919: PUSH
12920: LD_INT 50
12922: PUSH
12923: LD_INT 83
12925: PUSH
12926: LD_INT 3
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 24
12937: PUSH
12938: LD_INT 50
12940: PUSH
12941: LD_INT 90
12943: PUSH
12944: LD_INT 0
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12984: LD_ADDR_VAR 0 3
12988: PUSH
12989: LD_INT 22
12991: PUSH
12992: LD_INT 3
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 3
13001: PUSH
13002: LD_INT 25
13004: PUSH
13005: LD_INT 2
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PPUSH
13020: CALL_OW 69
13024: PUSH
13025: FOR_IN
13026: IFFALSE 13045
// AddComAgressiveMove ( i , 53 , 82 ) ;
13028: LD_VAR 0 3
13032: PPUSH
13033: LD_INT 53
13035: PPUSH
13036: LD_INT 82
13038: PPUSH
13039: CALL_OW 174
13043: GO 13025
13045: POP
13046: POP
// for i := 1 to buildingsTab do
13047: LD_ADDR_VAR 0 3
13051: PUSH
13052: DOUBLE
13053: LD_INT 1
13055: DEC
13056: ST_TO_ADDR
13057: LD_VAR 0 5
13061: PUSH
13062: FOR_TO
13063: IFFALSE 13136
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13065: LD_VAR 0 4
13069: PPUSH
13070: LD_VAR 0 5
13074: PUSH
13075: LD_VAR 0 3
13079: ARRAY
13080: PUSH
13081: LD_INT 1
13083: ARRAY
13084: PPUSH
13085: LD_VAR 0 5
13089: PUSH
13090: LD_VAR 0 3
13094: ARRAY
13095: PUSH
13096: LD_INT 2
13098: ARRAY
13099: PPUSH
13100: LD_VAR 0 5
13104: PUSH
13105: LD_VAR 0 3
13109: ARRAY
13110: PUSH
13111: LD_INT 3
13113: ARRAY
13114: PPUSH
13115: LD_VAR 0 5
13119: PUSH
13120: LD_VAR 0 3
13124: ARRAY
13125: PUSH
13126: LD_INT 4
13128: ARRAY
13129: PPUSH
13130: CALL_OW 205
13134: GO 13062
13136: POP
13137: POP
// end ; if position = 2 then
13138: LD_VAR 0 1
13142: PUSH
13143: LD_INT 2
13145: EQUAL
13146: IFFALSE 13761
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13148: LD_ADDR_VAR 0 4
13152: PUSH
13153: LD_INT 22
13155: PUSH
13156: LD_INT 3
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 25
13165: PUSH
13166: LD_INT 2
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PPUSH
13177: CALL_OW 69
13181: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
13182: LD_ADDR_VAR 0 5
13186: PUSH
13187: LD_INT 0
13189: PUSH
13190: LD_INT 104
13192: PUSH
13193: LD_INT 110
13195: PUSH
13196: LD_INT 5
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 4
13207: PUSH
13208: LD_INT 98
13210: PUSH
13211: LD_INT 90
13213: PUSH
13214: LD_INT 3
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 29
13225: PUSH
13226: LD_INT 103
13228: PUSH
13229: LD_INT 114
13231: PUSH
13232: LD_INT 2
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 30
13243: PUSH
13244: LD_INT 99
13246: PUSH
13247: LD_INT 114
13249: PUSH
13250: LD_INT 3
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 28
13261: PUSH
13262: LD_INT 100
13264: PUSH
13265: LD_INT 112
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 2
13279: PUSH
13280: LD_INT 92
13282: PUSH
13283: LD_INT 101
13285: PUSH
13286: LD_INT 0
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 28
13297: PUSH
13298: LD_INT 97
13300: PUSH
13301: LD_INT 116
13303: PUSH
13304: LD_INT 5
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: PUSH
13313: LD_INT 17
13315: PUSH
13316: LD_INT 96
13318: PUSH
13319: LD_INT 101
13321: PUSH
13322: LD_INT 4
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 18
13333: PUSH
13334: LD_INT 88
13336: PUSH
13337: LD_INT 97
13339: PUSH
13340: LD_INT 2
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: PUSH
13349: LD_INT 28
13351: PUSH
13352: LD_INT 106
13354: PUSH
13355: LD_INT 92
13357: PUSH
13358: LD_INT 2
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 32
13369: PUSH
13370: LD_INT 88
13372: PUSH
13373: LD_INT 89
13375: PUSH
13376: LD_INT 2
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 32
13387: PUSH
13388: LD_INT 86
13390: PUSH
13391: LD_INT 90
13393: PUSH
13394: LD_INT 2
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 32
13405: PUSH
13406: LD_INT 85
13408: PUSH
13409: LD_INT 99
13411: PUSH
13412: LD_INT 2
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 32
13423: PUSH
13424: LD_INT 85
13426: PUSH
13427: LD_INT 107
13429: PUSH
13430: LD_INT 1
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 33
13441: PUSH
13442: LD_INT 105
13444: PUSH
13445: LD_INT 99
13447: PUSH
13448: LD_INT 1
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 33
13459: PUSH
13460: LD_INT 102
13462: PUSH
13463: LD_INT 92
13465: PUSH
13466: LD_INT 3
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: PUSH
13475: LD_INT 33
13477: PUSH
13478: LD_INT 105
13480: PUSH
13481: LD_INT 92
13483: PUSH
13484: LD_INT 2
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 6
13495: PUSH
13496: LD_INT 92
13498: PUSH
13499: LD_INT 110
13501: PUSH
13502: LD_INT 0
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 6
13513: PUSH
13514: LD_INT 103
13516: PUSH
13517: LD_INT 103
13519: PUSH
13520: LD_INT 5
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 21
13531: PUSH
13532: LD_INT 89
13534: PUSH
13535: LD_INT 101
13537: PUSH
13538: LD_INT 1
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 16
13549: PUSH
13550: LD_INT 95
13552: PUSH
13553: LD_INT 104
13555: PUSH
13556: LD_INT 4
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 24
13567: PUSH
13568: LD_INT 92
13570: PUSH
13571: LD_INT 105
13573: PUSH
13574: LD_INT 0
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13607: LD_ADDR_VAR 0 3
13611: PUSH
13612: LD_INT 22
13614: PUSH
13615: LD_INT 3
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 3
13624: PUSH
13625: LD_INT 25
13627: PUSH
13628: LD_INT 2
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 69
13647: PUSH
13648: FOR_IN
13649: IFFALSE 13668
// AddComAgressiveMove ( i , 96 , 99 ) ;
13651: LD_VAR 0 3
13655: PPUSH
13656: LD_INT 96
13658: PPUSH
13659: LD_INT 99
13661: PPUSH
13662: CALL_OW 174
13666: GO 13648
13668: POP
13669: POP
// for i := 1 to buildingsTab do
13670: LD_ADDR_VAR 0 3
13674: PUSH
13675: DOUBLE
13676: LD_INT 1
13678: DEC
13679: ST_TO_ADDR
13680: LD_VAR 0 5
13684: PUSH
13685: FOR_TO
13686: IFFALSE 13759
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13688: LD_VAR 0 4
13692: PPUSH
13693: LD_VAR 0 5
13697: PUSH
13698: LD_VAR 0 3
13702: ARRAY
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: LD_VAR 0 5
13712: PUSH
13713: LD_VAR 0 3
13717: ARRAY
13718: PUSH
13719: LD_INT 2
13721: ARRAY
13722: PPUSH
13723: LD_VAR 0 5
13727: PUSH
13728: LD_VAR 0 3
13732: ARRAY
13733: PUSH
13734: LD_INT 3
13736: ARRAY
13737: PPUSH
13738: LD_VAR 0 5
13742: PUSH
13743: LD_VAR 0 3
13747: ARRAY
13748: PUSH
13749: LD_INT 4
13751: ARRAY
13752: PPUSH
13753: CALL_OW 205
13757: GO 13685
13759: POP
13760: POP
// end ; if position = 3 then
13761: LD_VAR 0 1
13765: PUSH
13766: LD_INT 3
13768: EQUAL
13769: IFFALSE 14555
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13771: LD_ADDR_VAR 0 4
13775: PUSH
13776: LD_INT 22
13778: PUSH
13779: LD_INT 3
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 25
13788: PUSH
13789: LD_INT 2
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PPUSH
13800: CALL_OW 69
13804: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13805: LD_ADDR_VAR 0 5
13809: PUSH
13810: LD_INT 0
13812: PUSH
13813: LD_INT 151
13815: PUSH
13816: LD_INT 71
13818: PUSH
13819: LD_INT 4
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: PUSH
13828: LD_INT 4
13830: PUSH
13831: LD_INT 145
13833: PUSH
13834: LD_INT 53
13836: PUSH
13837: LD_INT 3
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 4
13848: PUSH
13849: LD_INT 172
13851: PUSH
13852: LD_INT 102
13854: PUSH
13855: LD_INT 5
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 29
13866: PUSH
13867: LD_INT 152
13869: PUSH
13870: LD_INT 85
13872: PUSH
13873: LD_INT 3
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 30
13884: PUSH
13885: LD_INT 156
13887: PUSH
13888: LD_INT 92
13890: PUSH
13891: LD_INT 3
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 28
13902: PUSH
13903: LD_INT 151
13905: PUSH
13906: LD_INT 66
13908: PUSH
13909: LD_INT 4
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: PUSH
13918: LD_INT 2
13920: PUSH
13921: LD_INT 163
13923: PUSH
13924: LD_INT 95
13926: PUSH
13927: LD_INT 5
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 28
13938: PUSH
13939: LD_INT 149
13941: PUSH
13942: LD_INT 63
13944: PUSH
13945: LD_INT 4
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 17
13956: PUSH
13957: LD_INT 167
13959: PUSH
13960: LD_INT 99
13962: PUSH
13963: LD_INT 5
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 18
13974: PUSH
13975: LD_INT 163
13977: PUSH
13978: LD_INT 98
13980: PUSH
13981: LD_INT 0
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: PUSH
13990: LD_INT 28
13992: PUSH
13993: LD_INT 154
13995: PUSH
13996: LD_INT 70
13998: PUSH
13999: LD_INT 4
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: PUSH
14008: LD_INT 32
14010: PUSH
14011: LD_INT 155
14013: PUSH
14014: LD_INT 62
14016: PUSH
14017: LD_INT 4
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 32
14028: PUSH
14029: LD_INT 161
14031: PUSH
14032: LD_INT 69
14034: PUSH
14035: LD_INT 4
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 32
14046: PUSH
14047: LD_INT 168
14049: PUSH
14050: LD_INT 78
14052: PUSH
14053: LD_INT 4
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 32
14064: PUSH
14065: LD_INT 163
14067: PUSH
14068: LD_INT 80
14070: PUSH
14071: LD_INT 5
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 32
14082: PUSH
14083: LD_INT 136
14085: PUSH
14086: LD_INT 73
14088: PUSH
14089: LD_INT 0
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 32
14100: PUSH
14101: LD_INT 157
14103: PUSH
14104: LD_INT 98
14106: PUSH
14107: LD_INT 0
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 32
14118: PUSH
14119: LD_INT 150
14121: PUSH
14122: LD_INT 87
14124: PUSH
14125: LD_INT 1
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 33
14136: PUSH
14137: LD_INT 171
14139: PUSH
14140: LD_INT 97
14142: PUSH
14143: LD_INT 4
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: PUSH
14152: LD_INT 33
14154: PUSH
14155: LD_INT 168
14157: PUSH
14158: LD_INT 92
14160: PUSH
14161: LD_INT 4
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: PUSH
14170: LD_INT 33
14172: PUSH
14173: LD_INT 166
14175: PUSH
14176: LD_INT 80
14178: PUSH
14179: LD_INT 5
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 33
14190: PUSH
14191: LD_INT 141
14193: PUSH
14194: LD_INT 54
14196: PUSH
14197: LD_INT 2
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: PUSH
14206: LD_INT 33
14208: PUSH
14209: LD_INT 133
14211: PUSH
14212: LD_INT 57
14214: PUSH
14215: LD_INT 2
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: PUSH
14224: LD_INT 33
14226: PUSH
14227: LD_INT 132
14229: PUSH
14230: LD_INT 61
14232: PUSH
14233: LD_INT 2
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 33
14244: PUSH
14245: LD_INT 150
14247: PUSH
14248: LD_INT 82
14250: PUSH
14251: LD_INT 0
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 33
14262: PUSH
14263: LD_INT 132
14265: PUSH
14266: LD_INT 72
14268: PUSH
14269: LD_INT 0
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: PUSH
14278: LD_INT 6
14280: PUSH
14281: LD_INT 146
14283: PUSH
14284: LD_INT 64
14286: PUSH
14287: LD_INT 4
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 6
14298: PUSH
14299: LD_INT 159
14301: PUSH
14302: LD_INT 85
14304: PUSH
14305: LD_INT 4
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 21
14316: PUSH
14317: LD_INT 163
14319: PUSH
14320: LD_INT 91
14322: PUSH
14323: LD_INT 3
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: PUSH
14332: LD_INT 16
14334: PUSH
14335: LD_INT 166
14337: PUSH
14338: LD_INT 95
14340: PUSH
14341: LD_INT 4
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 24
14352: PUSH
14353: LD_INT 159
14355: PUSH
14356: LD_INT 95
14358: PUSH
14359: LD_INT 1
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14401: LD_ADDR_VAR 0 3
14405: PUSH
14406: LD_INT 22
14408: PUSH
14409: LD_INT 3
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 3
14418: PUSH
14419: LD_INT 25
14421: PUSH
14422: LD_INT 2
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PPUSH
14437: CALL_OW 69
14441: PUSH
14442: FOR_IN
14443: IFFALSE 14462
// AddComAgressiveMove ( i , 141 , 65 ) ;
14445: LD_VAR 0 3
14449: PPUSH
14450: LD_INT 141
14452: PPUSH
14453: LD_INT 65
14455: PPUSH
14456: CALL_OW 174
14460: GO 14442
14462: POP
14463: POP
// for i := 1 to buildingsTab do
14464: LD_ADDR_VAR 0 3
14468: PUSH
14469: DOUBLE
14470: LD_INT 1
14472: DEC
14473: ST_TO_ADDR
14474: LD_VAR 0 5
14478: PUSH
14479: FOR_TO
14480: IFFALSE 14553
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14482: LD_VAR 0 4
14486: PPUSH
14487: LD_VAR 0 5
14491: PUSH
14492: LD_VAR 0 3
14496: ARRAY
14497: PUSH
14498: LD_INT 1
14500: ARRAY
14501: PPUSH
14502: LD_VAR 0 5
14506: PUSH
14507: LD_VAR 0 3
14511: ARRAY
14512: PUSH
14513: LD_INT 2
14515: ARRAY
14516: PPUSH
14517: LD_VAR 0 5
14521: PUSH
14522: LD_VAR 0 3
14526: ARRAY
14527: PUSH
14528: LD_INT 3
14530: ARRAY
14531: PPUSH
14532: LD_VAR 0 5
14536: PUSH
14537: LD_VAR 0 3
14541: ARRAY
14542: PUSH
14543: LD_INT 4
14545: ARRAY
14546: PPUSH
14547: CALL_OW 205
14551: GO 14479
14553: POP
14554: POP
// end ; end ;
14555: LD_VAR 0 2
14559: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14560: LD_INT 0
14562: PPUSH
14563: PPUSH
14564: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14565: LD_ADDR_EXP 69
14569: PUSH
14570: LD_INT 0
14572: PUSH
14573: LD_INT 71
14575: PUSH
14576: LD_INT 15
14578: PUSH
14579: LD_INT 3
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: PUSH
14588: LD_INT 6
14590: PUSH
14591: LD_INT 77
14593: PUSH
14594: LD_INT 18
14596: PUSH
14597: LD_INT 3
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 4
14608: PUSH
14609: LD_INT 77
14611: PUSH
14612: LD_INT 26
14614: PUSH
14615: LD_INT 0
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 31
14626: PUSH
14627: LD_INT 72
14629: PUSH
14630: LD_INT 24
14632: PUSH
14633: LD_INT 0
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 31
14644: PUSH
14645: LD_INT 82
14647: PUSH
14648: LD_INT 28
14650: PUSH
14651: LD_INT 0
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 31
14662: PUSH
14663: LD_INT 84
14665: PUSH
14666: LD_INT 21
14668: PUSH
14669: LD_INT 3
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: PUSH
14678: LD_INT 31
14680: PUSH
14681: LD_INT 66
14683: PUSH
14684: LD_INT 14
14686: PUSH
14687: LD_INT 2
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 27
14698: PUSH
14699: LD_INT 67
14701: PUSH
14702: LD_INT 18
14704: PUSH
14705: LD_INT 5
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 27
14716: PUSH
14717: LD_INT 69
14719: PUSH
14720: LD_INT 23
14722: PUSH
14723: LD_INT 2
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14743: LD_ADDR_VAR 0 3
14747: PUSH
14748: LD_INT 22
14750: PUSH
14751: LD_INT 2
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 25
14760: PUSH
14761: LD_INT 2
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PPUSH
14772: CALL_OW 69
14776: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14777: LD_VAR 0 3
14781: PPUSH
14782: LD_EXP 69
14786: PUSH
14787: LD_INT 1
14789: ARRAY
14790: PUSH
14791: LD_INT 1
14793: ARRAY
14794: PPUSH
14795: LD_EXP 69
14799: PUSH
14800: LD_INT 1
14802: ARRAY
14803: PUSH
14804: LD_INT 2
14806: ARRAY
14807: PPUSH
14808: LD_EXP 69
14812: PUSH
14813: LD_INT 1
14815: ARRAY
14816: PUSH
14817: LD_INT 3
14819: ARRAY
14820: PPUSH
14821: LD_EXP 69
14825: PUSH
14826: LD_INT 1
14828: ARRAY
14829: PUSH
14830: LD_INT 4
14832: ARRAY
14833: PPUSH
14834: CALL_OW 205
// end ;
14838: LD_VAR 0 1
14842: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14843: LD_INT 0
14845: PPUSH
14846: PPUSH
14847: PPUSH
14848: PPUSH
14849: PPUSH
14850: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14851: LD_ADDR_VAR 0 7
14855: PUSH
14856: LD_INT 22
14858: PUSH
14859: LD_VAR 0 1
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 25
14870: PUSH
14871: LD_INT 9
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PPUSH
14882: CALL_OW 69
14886: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14887: LD_ADDR_VAR 0 8
14891: PUSH
14892: LD_INT 22
14894: PUSH
14895: LD_VAR 0 2
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: LD_INT 3
14906: PUSH
14907: LD_INT 21
14909: PUSH
14910: LD_INT 3
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PPUSH
14925: CALL_OW 69
14929: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14930: LD_ADDR_VAR 0 5
14934: PUSH
14935: LD_INT 1
14937: PPUSH
14938: LD_INT 3
14940: PPUSH
14941: CALL_OW 12
14945: ST_TO_ADDR
// for i = 1 to list do
14946: LD_ADDR_VAR 0 6
14950: PUSH
14951: DOUBLE
14952: LD_INT 1
14954: DEC
14955: ST_TO_ADDR
14956: LD_VAR 0 7
14960: PUSH
14961: FOR_TO
14962: IFFALSE 15952
// for ta in filter do
14964: LD_ADDR_VAR 0 4
14968: PUSH
14969: LD_VAR 0 8
14973: PUSH
14974: FOR_IN
14975: IFFALSE 15948
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14977: LD_VAR 0 7
14981: PUSH
14982: LD_VAR 0 6
14986: ARRAY
14987: PPUSH
14988: LD_VAR 0 4
14992: PPUSH
14993: CALL_OW 296
14997: PUSH
14998: LD_INT 15
15000: LESSEQUAL
15001: IFFALSE 15946
// begin case c of 1 :
15003: LD_VAR 0 5
15007: PUSH
15008: LD_INT 1
15010: DOUBLE
15011: EQUAL
15012: IFTRUE 15016
15014: GO 15448
15016: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
15017: LD_VAR 0 7
15021: PUSH
15022: LD_VAR 0 6
15026: ARRAY
15027: PPUSH
15028: LD_VAR 0 4
15032: PPUSH
15033: CALL_OW 250
15037: PPUSH
15038: LD_VAR 0 4
15042: PPUSH
15043: CALL_OW 251
15047: PPUSH
15048: CALL_OW 154
// if eventVar2 = 0 then
15052: LD_EXP 67
15056: PUSH
15057: LD_INT 0
15059: EQUAL
15060: IFFALSE 15446
// begin eventVar2 = 1 ;
15062: LD_ADDR_EXP 67
15066: PUSH
15067: LD_INT 1
15069: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15070: LD_INT 245
15072: PPUSH
15073: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15077: LD_VAR 0 4
15081: PPUSH
15082: CALL_OW 250
15086: PPUSH
15087: LD_VAR 0 4
15091: PPUSH
15092: CALL_OW 251
15096: PPUSH
15097: CALL_OW 84
// DialogueOn ;
15101: CALL_OW 6
// if IsOK ( Cyrus ) then
15105: LD_EXP 5
15109: PPUSH
15110: CALL_OW 302
15114: IFFALSE 15130
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15116: LD_EXP 5
15120: PPUSH
15121: LD_STRING D9a-Cyrus-1
15123: PPUSH
15124: CALL_OW 88
// end else
15128: GO 15252
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15130: LD_INT 22
15132: PUSH
15133: LD_INT 1
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: LD_INT 26
15142: PUSH
15143: LD_INT 1
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 2
15152: PUSH
15153: LD_INT 25
15155: PUSH
15156: LD_INT 1
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 25
15165: PUSH
15166: LD_INT 2
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 25
15175: PUSH
15176: LD_INT 3
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 25
15185: PUSH
15186: LD_INT 4
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: LD_INT 25
15195: PUSH
15196: LD_INT 5
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: LIST
15215: PPUSH
15216: CALL_OW 69
15220: PUSH
15221: LD_EXP 1
15225: PUSH
15226: LD_EXP 14
15230: PUSH
15231: LD_EXP 5
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: LIST
15240: DIFF
15241: PPUSH
15242: LD_STRING D9a-Sol1-1
15244: PPUSH
15245: LD_STRING D9a-Sol1-1
15247: PPUSH
15248: CALL 11407 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15252: LD_INT 22
15254: PUSH
15255: LD_INT 1
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 26
15264: PUSH
15265: LD_INT 1
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 2
15274: PUSH
15275: LD_INT 25
15277: PUSH
15278: LD_INT 1
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: LD_INT 25
15287: PUSH
15288: LD_INT 2
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: LD_INT 25
15297: PUSH
15298: LD_INT 3
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 25
15307: PUSH
15308: LD_INT 4
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 25
15317: PUSH
15318: LD_INT 5
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: LIST
15337: PPUSH
15338: CALL_OW 69
15342: PUSH
15343: LD_EXP 1
15347: PUSH
15348: LD_EXP 14
15352: PUSH
15353: LD_EXP 5
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: DIFF
15363: PPUSH
15364: LD_STRING D9b-Sol1-1
15366: PPUSH
15367: LD_STRING D9b-Sol1-1
15369: PPUSH
15370: CALL 11407 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15374: LD_STRING 09_arInfo
15376: PPUSH
15377: LD_INT 0
15379: PPUSH
15380: CALL_OW 30
15384: PUSH
15385: LD_INT 1
15387: EQUAL
15388: IFFALSE 15402
// Say ( JMM , D9a-JMM-1 ) ;
15390: LD_EXP 1
15394: PPUSH
15395: LD_STRING D9a-JMM-1
15397: PPUSH
15398: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15402: LD_EXP 1
15406: PPUSH
15407: LD_STRING D9c-JMM-1
15409: PPUSH
15410: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15414: LD_INT 12
15416: PPUSH
15417: LD_INT 1
15419: PPUSH
15420: CALL_OW 321
15424: PUSH
15425: LD_INT 2
15427: EQUAL
15428: IFFALSE 15442
// Say ( JMM , D9c-JMM-1a ) ;
15430: LD_EXP 1
15434: PPUSH
15435: LD_STRING D9c-JMM-1a
15437: PPUSH
15438: CALL_OW 88
// DialogueOff ;
15442: CALL_OW 7
// end ; end ; 2 :
15446: GO 15946
15448: LD_INT 2
15450: DOUBLE
15451: EQUAL
15452: IFTRUE 15456
15454: GO 15914
15456: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15457: LD_VAR 0 7
15461: PUSH
15462: LD_VAR 0 6
15466: ARRAY
15467: PPUSH
15468: LD_VAR 0 4
15472: PPUSH
15473: CALL_OW 250
15477: PUSH
15478: LD_INT 1
15480: NEG
15481: PPUSH
15482: LD_INT 1
15484: PPUSH
15485: CALL_OW 12
15489: PLUS
15490: PPUSH
15491: LD_VAR 0 4
15495: PPUSH
15496: CALL_OW 251
15500: PUSH
15501: LD_INT 1
15503: NEG
15504: PPUSH
15505: LD_INT 1
15507: PPUSH
15508: CALL_OW 12
15512: PLUS
15513: PPUSH
15514: CALL_OW 153
// if eventVar2 = 0 then
15518: LD_EXP 67
15522: PUSH
15523: LD_INT 0
15525: EQUAL
15526: IFFALSE 15912
// begin eventVar2 = 1 ;
15528: LD_ADDR_EXP 67
15532: PUSH
15533: LD_INT 1
15535: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15536: LD_INT 245
15538: PPUSH
15539: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15543: LD_VAR 0 4
15547: PPUSH
15548: CALL_OW 250
15552: PPUSH
15553: LD_VAR 0 4
15557: PPUSH
15558: CALL_OW 251
15562: PPUSH
15563: CALL_OW 84
// DialogueOn ;
15567: CALL_OW 6
// if IsOK ( Cyrus ) then
15571: LD_EXP 5
15575: PPUSH
15576: CALL_OW 302
15580: IFFALSE 15596
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15582: LD_EXP 5
15586: PPUSH
15587: LD_STRING D9a-Cyrus-1
15589: PPUSH
15590: CALL_OW 88
// end else
15594: GO 15718
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15596: LD_INT 22
15598: PUSH
15599: LD_INT 1
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 26
15608: PUSH
15609: LD_INT 1
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 2
15618: PUSH
15619: LD_INT 25
15621: PUSH
15622: LD_INT 1
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 25
15631: PUSH
15632: LD_INT 2
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 25
15641: PUSH
15642: LD_INT 3
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 25
15651: PUSH
15652: LD_INT 4
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 25
15661: PUSH
15662: LD_INT 5
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: LIST
15681: PPUSH
15682: CALL_OW 69
15686: PUSH
15687: LD_EXP 1
15691: PUSH
15692: LD_EXP 14
15696: PUSH
15697: LD_EXP 5
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: DIFF
15707: PPUSH
15708: LD_STRING D9a-Sol1-1
15710: PPUSH
15711: LD_STRING D9a-Sol1-1
15713: PPUSH
15714: CALL 11407 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15718: LD_INT 22
15720: PUSH
15721: LD_INT 1
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 26
15730: PUSH
15731: LD_INT 1
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 2
15740: PUSH
15741: LD_INT 25
15743: PUSH
15744: LD_INT 1
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 25
15753: PUSH
15754: LD_INT 2
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 25
15763: PUSH
15764: LD_INT 3
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 25
15773: PUSH
15774: LD_INT 4
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 25
15783: PUSH
15784: LD_INT 5
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: LIST
15803: PPUSH
15804: CALL_OW 69
15808: PUSH
15809: LD_EXP 1
15813: PUSH
15814: LD_EXP 14
15818: PUSH
15819: LD_EXP 5
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: LIST
15828: DIFF
15829: PPUSH
15830: LD_STRING D9b-Sol1-1
15832: PPUSH
15833: LD_STRING D9b-Sol1-1
15835: PPUSH
15836: CALL 11407 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15840: LD_STRING 09_arInfo
15842: PPUSH
15843: LD_INT 0
15845: PPUSH
15846: CALL_OW 30
15850: PUSH
15851: LD_INT 1
15853: EQUAL
15854: IFFALSE 15868
// Say ( JMM , D9a-JMM-1 ) ;
15856: LD_EXP 1
15860: PPUSH
15861: LD_STRING D9a-JMM-1
15863: PPUSH
15864: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15868: LD_EXP 1
15872: PPUSH
15873: LD_STRING D9c-JMM-1
15875: PPUSH
15876: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15880: LD_INT 12
15882: PPUSH
15883: LD_INT 1
15885: PPUSH
15886: CALL_OW 321
15890: PUSH
15891: LD_INT 2
15893: EQUAL
15894: IFFALSE 15908
// Say ( JMM , D9c-JMM-1a ) ;
15896: LD_EXP 1
15900: PPUSH
15901: LD_STRING D9c-JMM-1a
15903: PPUSH
15904: CALL_OW 88
// DialogueOff ;
15908: CALL_OW 7
// end ; end ; 3 :
15912: GO 15946
15914: LD_INT 3
15916: DOUBLE
15917: EQUAL
15918: IFTRUE 15922
15920: GO 15945
15922: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15923: LD_VAR 0 7
15927: PUSH
15928: LD_VAR 0 6
15932: ARRAY
15933: PPUSH
15934: LD_VAR 0 4
15938: PPUSH
15939: CALL_OW 115
15943: GO 15946
15945: POP
// end ; end ;
15946: GO 14974
15948: POP
15949: POP
15950: GO 14961
15952: POP
15953: POP
// end ;
15954: LD_VAR 0 3
15958: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15959: LD_INT 0
15961: PPUSH
15962: PPUSH
15963: PPUSH
15964: PPUSH
// for i = 1 to 72 do
15965: LD_ADDR_VAR 0 5
15969: PUSH
15970: DOUBLE
15971: LD_INT 1
15973: DEC
15974: ST_TO_ADDR
15975: LD_INT 72
15977: PUSH
15978: FOR_TO
15979: IFFALSE 16037
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15981: LD_VAR 0 5
15985: PPUSH
15986: LD_VAR 0 1
15990: PPUSH
15991: CALL_OW 321
15995: PUSH
15996: LD_INT 1
15998: EQUAL
15999: PUSH
16000: LD_VAR 0 5
16004: PPUSH
16005: LD_VAR 0 3
16009: PPUSH
16010: CALL_OW 482
16014: PUSH
16015: LD_INT 1
16017: EQUAL
16018: AND
16019: IFFALSE 16035
// AddComResearch ( lab , i ) ;
16021: LD_VAR 0 2
16025: PPUSH
16026: LD_VAR 0 5
16030: PPUSH
16031: CALL_OW 184
16035: GO 15978
16037: POP
16038: POP
// end ;
16039: LD_VAR 0 4
16043: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
16044: LD_INT 0
16046: PPUSH
16047: PPUSH
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
16053: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
16054: LD_ADDR_VAR 0 6
16058: PUSH
16059: LD_INT 22
16061: PUSH
16062: LD_VAR 0 1
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: LD_INT 56
16073: PUSH
16074: EMPTY
16075: LIST
16076: PUSH
16077: LD_INT 24
16079: PUSH
16080: LD_INT 700
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 3
16089: PUSH
16090: LD_INT 60
16092: PUSH
16093: EMPTY
16094: LIST
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 2
16102: PUSH
16103: LD_INT 25
16105: PUSH
16106: LD_INT 1
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 25
16115: PUSH
16116: LD_INT 9
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: LIST
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: PPUSH
16135: CALL_OW 69
16139: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
16140: LD_ADDR_VAR 0 7
16144: PUSH
16145: LD_INT 22
16147: PUSH
16148: LD_VAR 0 1
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 30
16159: PUSH
16160: LD_INT 32
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 58
16169: PUSH
16170: EMPTY
16171: LIST
16172: PUSH
16173: LD_INT 24
16175: PUSH
16176: LD_INT 251
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: PPUSH
16189: CALL_OW 69
16193: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
16194: LD_ADDR_VAR 0 9
16198: PUSH
16199: LD_INT 22
16201: PUSH
16202: LD_VAR 0 1
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 2
16213: PUSH
16214: LD_INT 30
16216: PUSH
16217: LD_INT 4
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: LD_INT 30
16226: PUSH
16227: LD_INT 5
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 24
16241: PUSH
16242: LD_INT 251
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: PPUSH
16254: CALL_OW 69
16258: ST_TO_ADDR
// if barrackList > 0 then
16259: LD_VAR 0 9
16263: PUSH
16264: LD_INT 0
16266: GREATER
16267: IFFALSE 16402
// begin if turretList = 0 then
16269: LD_VAR 0 7
16273: PUSH
16274: LD_INT 0
16276: EQUAL
16277: IFFALSE 16326
// begin for i in soldiers_list do
16279: LD_ADDR_VAR 0 4
16283: PUSH
16284: LD_VAR 0 6
16288: PUSH
16289: FOR_IN
16290: IFFALSE 16322
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
16292: LD_VAR 0 4
16296: PPUSH
16297: LD_VAR 0 9
16301: PUSH
16302: LD_INT 1
16304: PPUSH
16305: LD_VAR 0 9
16309: PPUSH
16310: CALL_OW 12
16314: ARRAY
16315: PPUSH
16316: CALL_OW 120
16320: GO 16289
16322: POP
16323: POP
// end else
16324: GO 16402
// begin for i in barrackList do
16326: LD_ADDR_VAR 0 4
16330: PUSH
16331: LD_VAR 0 9
16335: PUSH
16336: FOR_IN
16337: IFFALSE 16400
// begin insideUnits = UnitsInside ( i ) ;
16339: LD_ADDR_VAR 0 10
16343: PUSH
16344: LD_VAR 0 4
16348: PPUSH
16349: CALL_OW 313
16353: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16354: LD_VAR 0 10
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_VAR 0 7
16367: PUSH
16368: LD_INT 1
16370: ARRAY
16371: PPUSH
16372: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16376: LD_VAR 0 6
16380: PUSH
16381: LD_INT 1
16383: ARRAY
16384: PPUSH
16385: LD_VAR 0 7
16389: PUSH
16390: LD_INT 1
16392: ARRAY
16393: PPUSH
16394: CALL_OW 120
// end ;
16398: GO 16336
16400: POP
16401: POP
// end ; end ; end ;
16402: LD_VAR 0 3
16406: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16407: LD_INT 0
16409: PPUSH
16410: PPUSH
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16415: LD_ADDR_VAR 0 6
16419: PUSH
16420: LD_VAR 0 2
16424: PPUSH
16425: CALL_OW 313
16429: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16430: LD_ADDR_VAR 0 7
16434: PUSH
16435: LD_INT 22
16437: PUSH
16438: LD_VAR 0 1
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 25
16449: PUSH
16450: LD_INT 2
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 24
16459: PUSH
16460: LD_INT 1000
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 3
16469: PUSH
16470: LD_INT 54
16472: PUSH
16473: EMPTY
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL_OW 69
16490: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16491: LD_ADDR_VAR 0 4
16495: PUSH
16496: LD_INT 22
16498: PUSH
16499: LD_VAR 0 1
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 21
16510: PUSH
16511: LD_INT 3
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 3
16520: PUSH
16521: LD_INT 24
16523: PUSH
16524: LD_INT 1000
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: PUSH
16540: EMPTY
16541: LIST
16542: PPUSH
16543: CALL_OW 69
16547: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16548: LD_VAR 0 4
16552: NOT
16553: PUSH
16554: LD_VAR 0 7
16558: NOT
16559: AND
16560: PUSH
16561: LD_EXP 43
16565: NOT
16566: AND
16567: IFFALSE 16571
// exit ;
16569: GO 16762
// if buildings_list > 0 and engineerOkInside then
16571: LD_VAR 0 4
16575: PUSH
16576: LD_INT 0
16578: GREATER
16579: PUSH
16580: LD_VAR 0 6
16584: AND
16585: IFFALSE 16639
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16587: LD_ADDR_VAR 0 5
16591: PUSH
16592: LD_INT 22
16594: PUSH
16595: LD_VAR 0 1
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 25
16606: PUSH
16607: LD_INT 2
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 69
16622: PUSH
16623: FOR_IN
16624: IFFALSE 16637
// ComExitBuilding ( i ) ;
16626: LD_VAR 0 5
16630: PPUSH
16631: CALL_OW 122
16635: GO 16623
16637: POP
16638: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16639: LD_VAR 0 4
16643: PUSH
16644: LD_INT 0
16646: GREATER
16647: PUSH
16648: LD_VAR 0 7
16652: PUSH
16653: LD_INT 0
16655: GREATER
16656: AND
16657: IFFALSE 16711
// begin for i in engineerOkOutside do
16659: LD_ADDR_VAR 0 5
16663: PUSH
16664: LD_VAR 0 7
16668: PUSH
16669: FOR_IN
16670: IFFALSE 16709
// for j in buildings_list do
16672: LD_ADDR_VAR 0 8
16676: PUSH
16677: LD_VAR 0 4
16681: PUSH
16682: FOR_IN
16683: IFFALSE 16705
// ComRepairBuilding ( i , j [ 1 ] ) ;
16685: LD_VAR 0 5
16689: PPUSH
16690: LD_VAR 0 8
16694: PUSH
16695: LD_INT 1
16697: ARRAY
16698: PPUSH
16699: CALL_OW 130
16703: GO 16682
16705: POP
16706: POP
16707: GO 16669
16709: POP
16710: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16711: LD_VAR 0 4
16715: PUSH
16716: LD_INT 0
16718: EQUAL
16719: PUSH
16720: LD_VAR 0 7
16724: PUSH
16725: LD_INT 0
16727: GREATER
16728: AND
16729: IFFALSE 16762
// for i in engineerOkOutside do
16731: LD_ADDR_VAR 0 5
16735: PUSH
16736: LD_VAR 0 7
16740: PUSH
16741: FOR_IN
16742: IFFALSE 16760
// ComEnterUnit ( i , building ) ;
16744: LD_VAR 0 5
16748: PPUSH
16749: LD_VAR 0 2
16753: PPUSH
16754: CALL_OW 120
16758: GO 16741
16760: POP
16761: POP
// end ;
16762: LD_VAR 0 3
16766: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16767: LD_INT 0
16769: PPUSH
16770: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16771: LD_INT 22
16773: PUSH
16774: LD_VAR 0 1
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 25
16785: PUSH
16786: LD_INT 2
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PPUSH
16797: CALL_OW 69
16801: PUSH
16802: LD_INT 0
16804: GREATER
16805: PUSH
16806: LD_INT 22
16808: PUSH
16809: LD_VAR 0 1
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 21
16820: PUSH
16821: LD_INT 3
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 3
16830: PUSH
16831: LD_INT 24
16833: PUSH
16834: LD_INT 1000
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: LIST
16849: PPUSH
16850: CALL_OW 69
16854: PUSH
16855: LD_INT 0
16857: EQUAL
16858: AND
16859: PUSH
16860: LD_VAR 0 2
16864: PUSH
16865: LD_INT 0
16867: GREATER
16868: AND
16869: IFFALSE 16968
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16871: LD_ADDR_VAR 0 4
16875: PUSH
16876: LD_INT 22
16878: PUSH
16879: LD_VAR 0 1
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 25
16890: PUSH
16891: LD_INT 2
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PPUSH
16902: CALL_OW 69
16906: PUSH
16907: FOR_IN
16908: IFFALSE 16966
// begin AddComExitBuilding ( i ) ;
16910: LD_VAR 0 4
16914: PPUSH
16915: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16919: LD_VAR 0 4
16923: PPUSH
16924: LD_VAR 0 2
16928: PUSH
16929: LD_INT 1
16931: ARRAY
16932: PPUSH
16933: LD_VAR 0 2
16937: PUSH
16938: LD_INT 2
16940: ARRAY
16941: PPUSH
16942: LD_VAR 0 2
16946: PUSH
16947: LD_INT 3
16949: ARRAY
16950: PPUSH
16951: LD_VAR 0 2
16955: PUSH
16956: LD_INT 4
16958: ARRAY
16959: PPUSH
16960: CALL_OW 205
// end ;
16964: GO 16907
16966: POP
16967: POP
// end ; end ;
16968: LD_VAR 0 3
16972: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16973: LD_INT 0
16975: PPUSH
16976: PPUSH
16977: PPUSH
16978: PPUSH
16979: PPUSH
16980: PPUSH
16981: PPUSH
16982: PPUSH
16983: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16984: LD_ADDR_VAR 0 6
16988: PUSH
16989: LD_INT 22
16991: PUSH
16992: LD_VAR 0 1
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 25
17003: PUSH
17004: LD_INT 4
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 24
17013: PUSH
17014: LD_INT 251
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: LIST
17025: PPUSH
17026: CALL_OW 69
17030: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
17031: LD_ADDR_VAR 0 7
17035: PUSH
17036: LD_VAR 0 3
17040: PPUSH
17041: LD_INT 22
17043: PUSH
17044: LD_VAR 0 1
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 25
17055: PUSH
17056: LD_INT 4
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 50
17065: PUSH
17066: EMPTY
17067: LIST
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: LIST
17073: PPUSH
17074: CALL_OW 70
17078: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
17079: LD_ADDR_VAR 0 10
17083: PUSH
17084: LD_VAR 0 3
17088: PPUSH
17089: LD_INT 22
17091: PUSH
17092: LD_VAR 0 1
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 21
17103: PUSH
17104: LD_INT 1
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 3
17113: PUSH
17114: LD_INT 25
17116: PUSH
17117: LD_INT 3
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 3
17130: PUSH
17131: LD_INT 24
17133: PUSH
17134: LD_INT 750
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: PPUSH
17151: CALL_OW 70
17155: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17156: LD_ADDR_VAR 0 11
17160: PUSH
17161: LD_VAR 0 2
17165: PPUSH
17166: LD_INT 22
17168: PUSH
17169: LD_VAR 0 1
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 21
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 3
17190: PUSH
17191: LD_INT 25
17193: PUSH
17194: LD_INT 3
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 3
17207: PUSH
17208: LD_INT 24
17210: PUSH
17211: LD_INT 1000
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 70
17232: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
17233: LD_VAR 0 10
17237: NOT
17238: PUSH
17239: LD_VAR 0 7
17243: NOT
17244: AND
17245: PUSH
17246: LD_VAR 0 11
17250: NOT
17251: AND
17252: IFFALSE 17256
// exit ;
17254: GO 17516
// if damageUnits > 0 and sci_list > 0 then
17256: LD_VAR 0 10
17260: PUSH
17261: LD_INT 0
17263: GREATER
17264: PUSH
17265: LD_VAR 0 6
17269: PUSH
17270: LD_INT 0
17272: GREATER
17273: AND
17274: IFFALSE 17307
// for i in damageUnits do
17276: LD_ADDR_VAR 0 8
17280: PUSH
17281: LD_VAR 0 10
17285: PUSH
17286: FOR_IN
17287: IFFALSE 17305
// ComMoveToArea ( i , healArea ) ;
17289: LD_VAR 0 8
17293: PPUSH
17294: LD_VAR 0 2
17298: PPUSH
17299: CALL_OW 113
17303: GO 17286
17305: POP
17306: POP
// if unitsToHeal > 0 and sci_list > 0 then
17307: LD_VAR 0 11
17311: PUSH
17312: LD_INT 0
17314: GREATER
17315: PUSH
17316: LD_VAR 0 6
17320: PUSH
17321: LD_INT 0
17323: GREATER
17324: AND
17325: IFFALSE 17384
// begin for i in sci_list do
17327: LD_ADDR_VAR 0 8
17331: PUSH
17332: LD_VAR 0 6
17336: PUSH
17337: FOR_IN
17338: IFFALSE 17382
// begin ComExitBuilding ( i ) ;
17340: LD_VAR 0 8
17344: PPUSH
17345: CALL_OW 122
// for j in unitsToHeal do
17349: LD_ADDR_VAR 0 9
17353: PUSH
17354: LD_VAR 0 11
17358: PUSH
17359: FOR_IN
17360: IFFALSE 17378
// AddComHeal ( i , j ) ;
17362: LD_VAR 0 8
17366: PPUSH
17367: LD_VAR 0 9
17371: PPUSH
17372: CALL_OW 188
17376: GO 17359
17378: POP
17379: POP
// end ;
17380: GO 17337
17382: POP
17383: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17384: LD_VAR 0 10
17388: PUSH
17389: LD_INT 0
17391: EQUAL
17392: PUSH
17393: LD_VAR 0 11
17397: PUSH
17398: LD_INT 0
17400: EQUAL
17401: AND
17402: PUSH
17403: LD_VAR 0 7
17407: PUSH
17408: LD_INT 0
17410: GREATER
17411: AND
17412: IFFALSE 17516
// for i in sci_listOutside do
17414: LD_ADDR_VAR 0 8
17418: PUSH
17419: LD_VAR 0 7
17423: PUSH
17424: FOR_IN
17425: IFFALSE 17514
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17427: LD_ADDR_VAR 0 12
17431: PUSH
17432: LD_INT 22
17434: PUSH
17435: LD_VAR 0 1
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 21
17446: PUSH
17447: LD_INT 3
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 30
17456: PUSH
17457: LD_INT 8
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: PPUSH
17469: CALL_OW 69
17473: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17474: LD_ADDR_VAR 0 13
17478: PUSH
17479: LD_INT 1
17481: PPUSH
17482: LD_VAR 0 12
17486: PPUSH
17487: CALL_OW 12
17491: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17492: LD_VAR 0 8
17496: PPUSH
17497: LD_VAR 0 12
17501: PUSH
17502: LD_VAR 0 13
17506: ARRAY
17507: PPUSH
17508: CALL_OW 120
// end ;
17512: GO 17424
17514: POP
17515: POP
// end ;
17516: LD_VAR 0 5
17520: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17521: LD_INT 0
17523: PPUSH
17524: PPUSH
17525: PPUSH
17526: PPUSH
17527: PPUSH
17528: PPUSH
17529: PPUSH
17530: PPUSH
17531: PPUSH
17532: PPUSH
17533: PPUSH
// amChassisTab = [ ] ;
17534: LD_ADDR_VAR 0 19
17538: PUSH
17539: EMPTY
17540: ST_TO_ADDR
// arChassisTab = [ ] ;
17541: LD_ADDR_VAR 0 18
17545: PUSH
17546: EMPTY
17547: ST_TO_ADDR
// ruChassisTab = [ ] ;
17548: LD_ADDR_VAR 0 17
17552: PUSH
17553: EMPTY
17554: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17555: LD_INT 35
17557: PPUSH
17558: CALL_OW 67
// if nation = 1 then
17562: LD_VAR 0 5
17566: PUSH
17567: LD_INT 1
17569: EQUAL
17570: IFFALSE 18075
// begin uc_side = side ;
17572: LD_ADDR_OWVAR 20
17576: PUSH
17577: LD_VAR 0 2
17581: ST_TO_ADDR
// uc_nation = nation ;
17582: LD_ADDR_OWVAR 21
17586: PUSH
17587: LD_VAR 0 5
17591: ST_TO_ADDR
// vc_engine = vehengine ;
17592: LD_ADDR_OWVAR 39
17596: PUSH
17597: LD_VAR 0 6
17601: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17602: LD_ADDR_OWVAR 38
17606: PUSH
17607: LD_VAR 0 7
17611: PUSH
17612: LD_INT 1
17614: PPUSH
17615: LD_VAR 0 7
17619: PPUSH
17620: CALL_OW 12
17624: ARRAY
17625: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17626: LD_ADDR_OWVAR 40
17630: PUSH
17631: LD_VAR 0 10
17635: PUSH
17636: LD_INT 1
17638: PPUSH
17639: LD_VAR 0 10
17643: PPUSH
17644: CALL_OW 12
17648: ARRAY
17649: ST_TO_ADDR
// for j = 1 to AMWeapon do
17650: LD_ADDR_VAR 0 14
17654: PUSH
17655: DOUBLE
17656: LD_INT 1
17658: DEC
17659: ST_TO_ADDR
17660: LD_VAR 0 10
17664: PUSH
17665: FOR_TO
17666: IFFALSE 17967
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17668: LD_VAR 0 10
17672: PUSH
17673: LD_VAR 0 14
17677: ARRAY
17678: PUSH
17679: LD_INT 2
17681: EQUAL
17682: PUSH
17683: LD_VAR 0 10
17687: PUSH
17688: LD_VAR 0 14
17692: ARRAY
17693: PUSH
17694: LD_INT 3
17696: EQUAL
17697: OR
17698: IFFALSE 17751
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17700: LD_ADDR_VAR 0 19
17704: PUSH
17705: LD_INT 1
17707: PUSH
17708: LD_INT 2
17710: PUSH
17711: LD_INT 3
17713: PUSH
17714: LD_INT 4
17716: PUSH
17717: LD_INT 5
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17727: LD_ADDR_OWVAR 37
17731: PUSH
17732: LD_VAR 0 19
17736: PUSH
17737: LD_INT 1
17739: PPUSH
17740: LD_VAR 0 19
17744: PPUSH
17745: CALL_OW 12
17749: ARRAY
17750: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17751: LD_VAR 0 10
17755: PUSH
17756: LD_VAR 0 14
17760: ARRAY
17761: PUSH
17762: LD_INT 4
17764: EQUAL
17765: PUSH
17766: LD_VAR 0 10
17770: PUSH
17771: LD_VAR 0 14
17775: ARRAY
17776: PUSH
17777: LD_INT 5
17779: EQUAL
17780: OR
17781: PUSH
17782: LD_VAR 0 10
17786: PUSH
17787: LD_VAR 0 14
17791: ARRAY
17792: PUSH
17793: LD_INT 9
17795: EQUAL
17796: OR
17797: PUSH
17798: LD_VAR 0 10
17802: PUSH
17803: LD_VAR 0 14
17807: ARRAY
17808: PUSH
17809: LD_INT 11
17811: EQUAL
17812: OR
17813: PUSH
17814: LD_VAR 0 10
17818: PUSH
17819: LD_VAR 0 14
17823: ARRAY
17824: PUSH
17825: LD_INT 7
17827: EQUAL
17828: OR
17829: IFFALSE 17878
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17831: LD_ADDR_VAR 0 19
17835: PUSH
17836: LD_INT 2
17838: PUSH
17839: LD_INT 3
17841: PUSH
17842: LD_INT 4
17844: PUSH
17845: LD_INT 5
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17854: LD_ADDR_OWVAR 37
17858: PUSH
17859: LD_VAR 0 19
17863: PUSH
17864: LD_INT 1
17866: PPUSH
17867: LD_VAR 0 19
17871: PPUSH
17872: CALL_OW 12
17876: ARRAY
17877: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17878: LD_VAR 0 10
17882: PUSH
17883: LD_VAR 0 14
17887: ARRAY
17888: PUSH
17889: LD_INT 8
17891: EQUAL
17892: PUSH
17893: LD_VAR 0 10
17897: PUSH
17898: LD_VAR 0 14
17902: ARRAY
17903: PUSH
17904: LD_INT 6
17906: EQUAL
17907: OR
17908: PUSH
17909: LD_VAR 0 10
17913: PUSH
17914: LD_VAR 0 14
17918: ARRAY
17919: PUSH
17920: LD_INT 10
17922: EQUAL
17923: OR
17924: IFFALSE 17965
// begin amChassisTab = [ 4 , 5 ] ;
17926: LD_ADDR_VAR 0 19
17930: PUSH
17931: LD_INT 4
17933: PUSH
17934: LD_INT 5
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17941: LD_ADDR_OWVAR 37
17945: PUSH
17946: LD_VAR 0 19
17950: PUSH
17951: LD_INT 1
17953: PPUSH
17954: LD_VAR 0 19
17958: PPUSH
17959: CALL_OW 12
17963: ARRAY
17964: ST_TO_ADDR
// end ; end ;
17965: GO 17665
17967: POP
17968: POP
// veh = CreateVehicle ;
17969: LD_ADDR_VAR 0 16
17973: PUSH
17974: CALL_OW 45
17978: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17979: LD_VAR 0 16
17983: PPUSH
17984: LD_VAR 0 1
17988: PPUSH
17989: LD_INT 0
17991: PPUSH
17992: CALL_OW 49
// if vc_control = 1 then
17996: LD_OWVAR 38
18000: PUSH
18001: LD_INT 1
18003: EQUAL
18004: IFFALSE 18061
// begin hc_gallery =  ;
18006: LD_ADDR_OWVAR 33
18010: PUSH
18011: LD_STRING 
18013: ST_TO_ADDR
// hc_name =  ;
18014: LD_ADDR_OWVAR 26
18018: PUSH
18019: LD_STRING 
18021: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18022: LD_INT 0
18024: PPUSH
18025: LD_INT 3
18027: PPUSH
18028: LD_VAR 0 4
18032: PPUSH
18033: CALL_OW 380
// un = CreateHuman ;
18037: LD_ADDR_VAR 0 15
18041: PUSH
18042: CALL_OW 44
18046: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18047: LD_VAR 0 15
18051: PPUSH
18052: LD_VAR 0 16
18056: PPUSH
18057: CALL_OW 52
// end ; i = i + 1 ;
18061: LD_ADDR_VAR 0 13
18065: PUSH
18066: LD_VAR 0 13
18070: PUSH
18071: LD_INT 1
18073: PLUS
18074: ST_TO_ADDR
// end ; if nation = 2 then
18075: LD_VAR 0 5
18079: PUSH
18080: LD_INT 2
18082: EQUAL
18083: IFFALSE 18505
// begin uc_side = side ;
18085: LD_ADDR_OWVAR 20
18089: PUSH
18090: LD_VAR 0 2
18094: ST_TO_ADDR
// uc_nation = nation ;
18095: LD_ADDR_OWVAR 21
18099: PUSH
18100: LD_VAR 0 5
18104: ST_TO_ADDR
// vc_engine = vehengine ;
18105: LD_ADDR_OWVAR 39
18109: PUSH
18110: LD_VAR 0 6
18114: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18115: LD_ADDR_OWVAR 38
18119: PUSH
18120: LD_VAR 0 7
18124: PUSH
18125: LD_INT 1
18127: PPUSH
18128: LD_VAR 0 7
18132: PPUSH
18133: CALL_OW 12
18137: ARRAY
18138: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
18139: LD_ADDR_OWVAR 40
18143: PUSH
18144: LD_VAR 0 9
18148: PUSH
18149: LD_INT 1
18151: PPUSH
18152: LD_VAR 0 9
18156: PPUSH
18157: CALL_OW 12
18161: ARRAY
18162: ST_TO_ADDR
// for j = 1 to ARWeapons do
18163: LD_ADDR_VAR 0 14
18167: PUSH
18168: DOUBLE
18169: LD_INT 1
18171: DEC
18172: ST_TO_ADDR
18173: LD_VAR 0 9
18177: PUSH
18178: FOR_TO
18179: IFFALSE 18397
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
18181: LD_VAR 0 9
18185: PUSH
18186: LD_VAR 0 14
18190: ARRAY
18191: PUSH
18192: LD_INT 24
18194: EQUAL
18195: PUSH
18196: LD_VAR 0 9
18200: PUSH
18201: LD_VAR 0 14
18205: ARRAY
18206: PUSH
18207: LD_INT 22
18209: EQUAL
18210: OR
18211: PUSH
18212: LD_VAR 0 9
18216: PUSH
18217: LD_VAR 0 14
18221: ARRAY
18222: PUSH
18223: LD_INT 23
18225: EQUAL
18226: OR
18227: PUSH
18228: LD_VAR 0 9
18232: PUSH
18233: LD_VAR 0 14
18237: ARRAY
18238: PUSH
18239: LD_INT 30
18241: EQUAL
18242: OR
18243: IFFALSE 18280
// begin arChassisTab = [ 14 ] ;
18245: LD_ADDR_VAR 0 18
18249: PUSH
18250: LD_INT 14
18252: PUSH
18253: EMPTY
18254: LIST
18255: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18256: LD_ADDR_OWVAR 37
18260: PUSH
18261: LD_VAR 0 18
18265: PUSH
18266: LD_INT 1
18268: PPUSH
18269: LD_VAR 0 18
18273: PPUSH
18274: CALL_OW 12
18278: ARRAY
18279: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
18280: LD_VAR 0 9
18284: PUSH
18285: LD_VAR 0 14
18289: ARRAY
18290: PUSH
18291: LD_INT 29
18293: EQUAL
18294: PUSH
18295: LD_VAR 0 9
18299: PUSH
18300: LD_VAR 0 14
18304: ARRAY
18305: PUSH
18306: LD_INT 28
18308: EQUAL
18309: OR
18310: PUSH
18311: LD_VAR 0 9
18315: PUSH
18316: LD_VAR 0 14
18320: ARRAY
18321: PUSH
18322: LD_INT 27
18324: EQUAL
18325: OR
18326: PUSH
18327: LD_VAR 0 9
18331: PUSH
18332: LD_VAR 0 14
18336: ARRAY
18337: PUSH
18338: LD_INT 26
18340: EQUAL
18341: OR
18342: PUSH
18343: LD_VAR 0 9
18347: PUSH
18348: LD_VAR 0 14
18352: ARRAY
18353: PUSH
18354: LD_INT 25
18356: EQUAL
18357: OR
18358: IFFALSE 18395
// begin arChassisTab = [ 14 ] ;
18360: LD_ADDR_VAR 0 18
18364: PUSH
18365: LD_INT 14
18367: PUSH
18368: EMPTY
18369: LIST
18370: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18371: LD_ADDR_OWVAR 37
18375: PUSH
18376: LD_VAR 0 18
18380: PUSH
18381: LD_INT 1
18383: PPUSH
18384: LD_VAR 0 18
18388: PPUSH
18389: CALL_OW 12
18393: ARRAY
18394: ST_TO_ADDR
// end ; end ;
18395: GO 18178
18397: POP
18398: POP
// veh = CreateVehicle ;
18399: LD_ADDR_VAR 0 16
18403: PUSH
18404: CALL_OW 45
18408: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18409: LD_VAR 0 16
18413: PPUSH
18414: LD_VAR 0 1
18418: PPUSH
18419: LD_INT 0
18421: PPUSH
18422: CALL_OW 49
// if vc_control = 1 then
18426: LD_OWVAR 38
18430: PUSH
18431: LD_INT 1
18433: EQUAL
18434: IFFALSE 18491
// begin hc_gallery =  ;
18436: LD_ADDR_OWVAR 33
18440: PUSH
18441: LD_STRING 
18443: ST_TO_ADDR
// hc_name =  ;
18444: LD_ADDR_OWVAR 26
18448: PUSH
18449: LD_STRING 
18451: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18452: LD_INT 0
18454: PPUSH
18455: LD_INT 3
18457: PPUSH
18458: LD_VAR 0 4
18462: PPUSH
18463: CALL_OW 380
// un = CreateHuman ;
18467: LD_ADDR_VAR 0 15
18471: PUSH
18472: CALL_OW 44
18476: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18477: LD_VAR 0 15
18481: PPUSH
18482: LD_VAR 0 16
18486: PPUSH
18487: CALL_OW 52
// end ; i = i + 1 ;
18491: LD_ADDR_VAR 0 13
18495: PUSH
18496: LD_VAR 0 13
18500: PUSH
18501: LD_INT 1
18503: PLUS
18504: ST_TO_ADDR
// end ; if nation = 3 then
18505: LD_VAR 0 5
18509: PUSH
18510: LD_INT 3
18512: EQUAL
18513: IFFALSE 18919
// begin uc_side = side ;
18515: LD_ADDR_OWVAR 20
18519: PUSH
18520: LD_VAR 0 2
18524: ST_TO_ADDR
// uc_nation = nation ;
18525: LD_ADDR_OWVAR 21
18529: PUSH
18530: LD_VAR 0 5
18534: ST_TO_ADDR
// vc_engine = vehengine ;
18535: LD_ADDR_OWVAR 39
18539: PUSH
18540: LD_VAR 0 6
18544: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18545: LD_ADDR_OWVAR 38
18549: PUSH
18550: LD_VAR 0 7
18554: PUSH
18555: LD_INT 1
18557: PPUSH
18558: LD_VAR 0 7
18562: PPUSH
18563: CALL_OW 12
18567: ARRAY
18568: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18569: LD_ADDR_OWVAR 40
18573: PUSH
18574: LD_VAR 0 8
18578: PUSH
18579: LD_INT 1
18581: PPUSH
18582: LD_VAR 0 8
18586: PPUSH
18587: CALL_OW 12
18591: ARRAY
18592: ST_TO_ADDR
// for j = 1 to RuWeapons do
18593: LD_ADDR_VAR 0 14
18597: PUSH
18598: DOUBLE
18599: LD_INT 1
18601: DEC
18602: ST_TO_ADDR
18603: LD_VAR 0 8
18607: PUSH
18608: FOR_TO
18609: IFFALSE 18811
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18611: LD_VAR 0 8
18615: PUSH
18616: LD_VAR 0 14
18620: ARRAY
18621: PUSH
18622: LD_INT 42
18624: EQUAL
18625: PUSH
18626: LD_VAR 0 8
18630: PUSH
18631: LD_VAR 0 14
18635: ARRAY
18636: PUSH
18637: LD_INT 43
18639: EQUAL
18640: OR
18641: PUSH
18642: LD_VAR 0 8
18646: PUSH
18647: LD_VAR 0 14
18651: ARRAY
18652: PUSH
18653: LD_INT 44
18655: EQUAL
18656: OR
18657: PUSH
18658: LD_VAR 0 8
18662: PUSH
18663: LD_VAR 0 14
18667: ARRAY
18668: PUSH
18669: LD_INT 45
18671: EQUAL
18672: OR
18673: PUSH
18674: LD_VAR 0 8
18678: PUSH
18679: LD_VAR 0 14
18683: ARRAY
18684: PUSH
18685: LD_INT 49
18687: EQUAL
18688: OR
18689: IFFALSE 18738
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18691: LD_ADDR_VAR 0 17
18695: PUSH
18696: LD_INT 21
18698: PUSH
18699: LD_INT 22
18701: PUSH
18702: LD_INT 23
18704: PUSH
18705: LD_INT 24
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18714: LD_ADDR_OWVAR 37
18718: PUSH
18719: LD_VAR 0 17
18723: PUSH
18724: LD_INT 1
18726: PPUSH
18727: LD_VAR 0 17
18731: PPUSH
18732: CALL_OW 12
18736: ARRAY
18737: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18738: LD_VAR 0 8
18742: PUSH
18743: LD_VAR 0 14
18747: ARRAY
18748: PUSH
18749: LD_INT 46
18751: EQUAL
18752: PUSH
18753: LD_VAR 0 8
18757: PUSH
18758: LD_VAR 0 14
18762: ARRAY
18763: PUSH
18764: LD_INT 47
18766: EQUAL
18767: OR
18768: IFFALSE 18809
// begin ruChassisTab = [ 23 , 24 ] ;
18770: LD_ADDR_VAR 0 17
18774: PUSH
18775: LD_INT 23
18777: PUSH
18778: LD_INT 24
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18785: LD_ADDR_OWVAR 37
18789: PUSH
18790: LD_VAR 0 17
18794: PUSH
18795: LD_INT 1
18797: PPUSH
18798: LD_VAR 0 17
18802: PPUSH
18803: CALL_OW 12
18807: ARRAY
18808: ST_TO_ADDR
// end ; end ;
18809: GO 18608
18811: POP
18812: POP
// veh = CreateVehicle ;
18813: LD_ADDR_VAR 0 16
18817: PUSH
18818: CALL_OW 45
18822: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18823: LD_VAR 0 16
18827: PPUSH
18828: LD_VAR 0 1
18832: PPUSH
18833: LD_INT 0
18835: PPUSH
18836: CALL_OW 49
// if vc_control = 1 then
18840: LD_OWVAR 38
18844: PUSH
18845: LD_INT 1
18847: EQUAL
18848: IFFALSE 18905
// begin hc_gallery =  ;
18850: LD_ADDR_OWVAR 33
18854: PUSH
18855: LD_STRING 
18857: ST_TO_ADDR
// hc_name =  ;
18858: LD_ADDR_OWVAR 26
18862: PUSH
18863: LD_STRING 
18865: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18866: LD_INT 0
18868: PPUSH
18869: LD_INT 3
18871: PPUSH
18872: LD_VAR 0 4
18876: PPUSH
18877: CALL_OW 380
// un = CreateHuman ;
18881: LD_ADDR_VAR 0 15
18885: PUSH
18886: CALL_OW 44
18890: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18891: LD_VAR 0 15
18895: PPUSH
18896: LD_VAR 0 16
18900: PPUSH
18901: CALL_OW 52
// end ; i = i + 1 ;
18905: LD_ADDR_VAR 0 13
18909: PUSH
18910: LD_VAR 0 13
18914: PUSH
18915: LD_INT 1
18917: PLUS
18918: ST_TO_ADDR
// end ; until i = vehCount ;
18919: LD_VAR 0 13
18923: PUSH
18924: LD_VAR 0 3
18928: EQUAL
18929: IFFALSE 17555
// repeat wait ( 0 0$1 ) ;
18931: LD_INT 35
18933: PPUSH
18934: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18938: LD_ADDR_VAR 0 20
18942: PUSH
18943: LD_INT 22
18945: PUSH
18946: LD_VAR 0 2
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 21
18957: PUSH
18958: LD_INT 2
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 24
18967: PUSH
18968: LD_INT 650
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: PPUSH
18980: CALL_OW 69
18984: ST_TO_ADDR
// if vehicleOK_list > 0 then
18985: LD_VAR 0 20
18989: PUSH
18990: LD_INT 0
18992: GREATER
18993: IFFALSE 19184
// begin for i in vehicleOK_list do
18995: LD_ADDR_VAR 0 13
18999: PUSH
19000: LD_VAR 0 20
19004: PUSH
19005: FOR_IN
19006: IFFALSE 19182
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19008: LD_ADDR_VAR 0 21
19012: PUSH
19013: LD_INT 22
19015: PUSH
19016: LD_VAR 0 11
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PPUSH
19025: CALL_OW 69
19029: PPUSH
19030: LD_VAR 0 13
19034: PPUSH
19035: CALL_OW 74
19039: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19040: LD_ADDR_VAR 0 22
19044: PUSH
19045: LD_INT 22
19047: PUSH
19048: LD_VAR 0 11
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: LD_INT 2
19059: PUSH
19060: LD_INT 59
19062: PUSH
19063: EMPTY
19064: LIST
19065: PUSH
19066: LD_INT 21
19068: PUSH
19069: LD_INT 1
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 21
19078: PUSH
19079: LD_INT 2
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: EMPTY
19097: LIST
19098: PPUSH
19099: CALL_OW 69
19103: PPUSH
19104: LD_VAR 0 13
19108: PPUSH
19109: CALL_OW 74
19113: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19114: LD_VAR 0 13
19118: PPUSH
19119: LD_VAR 0 21
19123: PPUSH
19124: CALL_OW 296
19128: PUSH
19129: LD_INT 8
19131: PLUS
19132: PUSH
19133: LD_VAR 0 13
19137: PPUSH
19138: LD_VAR 0 22
19142: PPUSH
19143: CALL_OW 296
19147: LESS
19148: IFFALSE 19166
// begin ComAttackUnit ( i , target1 ) ;
19150: LD_VAR 0 13
19154: PPUSH
19155: LD_VAR 0 21
19159: PPUSH
19160: CALL_OW 115
// end else
19164: GO 19180
// begin ComAttackUnit ( i , target2 ) ;
19166: LD_VAR 0 13
19170: PPUSH
19171: LD_VAR 0 22
19175: PPUSH
19176: CALL_OW 115
// end ; end ;
19180: GO 19005
19182: POP
19183: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
19184: LD_INT 22
19186: PUSH
19187: LD_VAR 0 2
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 21
19198: PUSH
19199: LD_INT 2
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PPUSH
19210: CALL_OW 69
19214: PUSH
19215: LD_INT 0
19217: EQUAL
19218: IFFALSE 18931
// end ;
19220: LD_VAR 0 12
19224: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
19225: LD_INT 0
19227: PPUSH
19228: PPUSH
19229: PPUSH
19230: PPUSH
19231: PPUSH
19232: PPUSH
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
19237: PPUSH
// for i = 1 to soldierCount do
19238: LD_ADDR_VAR 0 13
19242: PUSH
19243: DOUBLE
19244: LD_INT 1
19246: DEC
19247: ST_TO_ADDR
19248: LD_VAR 0 3
19252: PUSH
19253: FOR_TO
19254: IFFALSE 19336
// begin uc_side = side ;
19256: LD_ADDR_OWVAR 20
19260: PUSH
19261: LD_VAR 0 1
19265: ST_TO_ADDR
// uc_nation = nation ;
19266: LD_ADDR_OWVAR 21
19270: PUSH
19271: LD_VAR 0 2
19275: ST_TO_ADDR
// hc_name =  ;
19276: LD_ADDR_OWVAR 26
19280: PUSH
19281: LD_STRING 
19283: ST_TO_ADDR
// hc_gallery =  ;
19284: LD_ADDR_OWVAR 33
19288: PUSH
19289: LD_STRING 
19291: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
19292: LD_INT 0
19294: PPUSH
19295: LD_INT 1
19297: PPUSH
19298: LD_VAR 0 8
19302: PPUSH
19303: CALL_OW 380
// un = CreateHuman ;
19307: LD_ADDR_VAR 0 15
19311: PUSH
19312: CALL_OW 44
19316: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19317: LD_VAR 0 15
19321: PPUSH
19322: LD_VAR 0 9
19326: PPUSH
19327: LD_INT 0
19329: PPUSH
19330: CALL_OW 49
// end ;
19334: GO 19253
19336: POP
19337: POP
// for i = 1 to sniperCount do
19338: LD_ADDR_VAR 0 13
19342: PUSH
19343: DOUBLE
19344: LD_INT 1
19346: DEC
19347: ST_TO_ADDR
19348: LD_VAR 0 4
19352: PUSH
19353: FOR_TO
19354: IFFALSE 19436
// begin uc_side = side ;
19356: LD_ADDR_OWVAR 20
19360: PUSH
19361: LD_VAR 0 1
19365: ST_TO_ADDR
// uc_nation = nation ;
19366: LD_ADDR_OWVAR 21
19370: PUSH
19371: LD_VAR 0 2
19375: ST_TO_ADDR
// hc_name =  ;
19376: LD_ADDR_OWVAR 26
19380: PUSH
19381: LD_STRING 
19383: ST_TO_ADDR
// hc_gallery =  ;
19384: LD_ADDR_OWVAR 33
19388: PUSH
19389: LD_STRING 
19391: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19392: LD_INT 0
19394: PPUSH
19395: LD_INT 5
19397: PPUSH
19398: LD_VAR 0 8
19402: PPUSH
19403: CALL_OW 380
// un = CreateHuman ;
19407: LD_ADDR_VAR 0 15
19411: PUSH
19412: CALL_OW 44
19416: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19417: LD_VAR 0 15
19421: PPUSH
19422: LD_VAR 0 9
19426: PPUSH
19427: LD_INT 0
19429: PPUSH
19430: CALL_OW 49
// end ;
19434: GO 19353
19436: POP
19437: POP
// for i = 1 to bazookCount do
19438: LD_ADDR_VAR 0 13
19442: PUSH
19443: DOUBLE
19444: LD_INT 1
19446: DEC
19447: ST_TO_ADDR
19448: LD_VAR 0 5
19452: PUSH
19453: FOR_TO
19454: IFFALSE 19536
// begin uc_side = side ;
19456: LD_ADDR_OWVAR 20
19460: PUSH
19461: LD_VAR 0 1
19465: ST_TO_ADDR
// uc_nation = nation ;
19466: LD_ADDR_OWVAR 21
19470: PUSH
19471: LD_VAR 0 2
19475: ST_TO_ADDR
// hc_name =  ;
19476: LD_ADDR_OWVAR 26
19480: PUSH
19481: LD_STRING 
19483: ST_TO_ADDR
// hc_gallery =  ;
19484: LD_ADDR_OWVAR 33
19488: PUSH
19489: LD_STRING 
19491: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19492: LD_INT 0
19494: PPUSH
19495: LD_INT 9
19497: PPUSH
19498: LD_VAR 0 8
19502: PPUSH
19503: CALL_OW 380
// un = CreateHuman ;
19507: LD_ADDR_VAR 0 15
19511: PUSH
19512: CALL_OW 44
19516: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19517: LD_VAR 0 15
19521: PPUSH
19522: LD_VAR 0 9
19526: PPUSH
19527: LD_INT 0
19529: PPUSH
19530: CALL_OW 49
// end ;
19534: GO 19453
19536: POP
19537: POP
// for i = 1 to mortalCount do
19538: LD_ADDR_VAR 0 13
19542: PUSH
19543: DOUBLE
19544: LD_INT 1
19546: DEC
19547: ST_TO_ADDR
19548: LD_VAR 0 6
19552: PUSH
19553: FOR_TO
19554: IFFALSE 19636
// begin uc_side = side ;
19556: LD_ADDR_OWVAR 20
19560: PUSH
19561: LD_VAR 0 1
19565: ST_TO_ADDR
// uc_nation = nation ;
19566: LD_ADDR_OWVAR 21
19570: PUSH
19571: LD_VAR 0 2
19575: ST_TO_ADDR
// hc_name =  ;
19576: LD_ADDR_OWVAR 26
19580: PUSH
19581: LD_STRING 
19583: ST_TO_ADDR
// hc_gallery =  ;
19584: LD_ADDR_OWVAR 33
19588: PUSH
19589: LD_STRING 
19591: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19592: LD_INT 0
19594: PPUSH
19595: LD_INT 8
19597: PPUSH
19598: LD_VAR 0 8
19602: PPUSH
19603: CALL_OW 380
// un = CreateHuman ;
19607: LD_ADDR_VAR 0 15
19611: PUSH
19612: CALL_OW 44
19616: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19617: LD_VAR 0 15
19621: PPUSH
19622: LD_VAR 0 9
19626: PPUSH
19627: LD_INT 0
19629: PPUSH
19630: CALL_OW 49
// end ;
19634: GO 19553
19636: POP
19637: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19638: LD_ADDR_VAR 0 18
19642: PUSH
19643: LD_INT 22
19645: PUSH
19646: LD_VAR 0 1
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 2
19657: PUSH
19658: LD_INT 25
19660: PUSH
19661: LD_INT 1
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 25
19670: PUSH
19671: LD_INT 5
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 25
19680: PUSH
19681: LD_INT 8
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 25
19690: PUSH
19691: LD_INT 9
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PPUSH
19709: CALL_OW 69
19713: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19714: LD_ADDR_VAR 0 17
19718: PUSH
19719: LD_INT 22
19721: PUSH
19722: LD_VAR 0 1
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 25
19733: PUSH
19734: LD_INT 4
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PPUSH
19745: CALL_OW 69
19749: ST_TO_ADDR
// for i in medic_list do
19750: LD_ADDR_VAR 0 13
19754: PUSH
19755: LD_VAR 0 17
19759: PUSH
19760: FOR_IN
19761: IFFALSE 19779
// ComMoveToArea ( i , healArea ) ;
19763: LD_VAR 0 13
19767: PPUSH
19768: LD_VAR 0 10
19772: PPUSH
19773: CALL_OW 113
19777: GO 19760
19779: POP
19780: POP
// repeat wait ( 0 0$1 ) ;
19781: LD_INT 35
19783: PPUSH
19784: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19788: LD_ADDR_VAR 0 16
19792: PUSH
19793: LD_INT 22
19795: PUSH
19796: LD_VAR 0 1
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 1
19807: PUSH
19808: LD_INT 3
19810: PUSH
19811: LD_INT 24
19813: PUSH
19814: LD_INT 550
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 24
19827: PUSH
19828: LD_INT 250
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: LIST
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PPUSH
19844: CALL_OW 69
19848: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19849: LD_ADDR_VAR 0 18
19853: PUSH
19854: LD_INT 22
19856: PUSH
19857: LD_VAR 0 1
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 2
19868: PUSH
19869: LD_INT 25
19871: PUSH
19872: LD_INT 1
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 25
19881: PUSH
19882: LD_INT 5
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 25
19891: PUSH
19892: LD_INT 8
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 25
19901: PUSH
19902: LD_INT 9
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 24
19918: PUSH
19919: LD_INT 1000
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: PPUSH
19931: CALL_OW 69
19935: ST_TO_ADDR
// if medicCount > 0 then
19936: LD_VAR 0 7
19940: PUSH
19941: LD_INT 0
19943: GREATER
19944: IFFALSE 20018
// begin if damageUnit_list > 0 then
19946: LD_VAR 0 16
19950: PUSH
19951: LD_INT 0
19953: GREATER
19954: IFFALSE 20018
// begin for i in damageUnit_list do
19956: LD_ADDR_VAR 0 13
19960: PUSH
19961: LD_VAR 0 16
19965: PUSH
19966: FOR_IN
19967: IFFALSE 20016
// begin ComMoveToArea ( i , healArea ) ;
19969: LD_VAR 0 13
19973: PPUSH
19974: LD_VAR 0 10
19978: PPUSH
19979: CALL_OW 113
// for j in medic_list do
19983: LD_ADDR_VAR 0 14
19987: PUSH
19988: LD_VAR 0 17
19992: PUSH
19993: FOR_IN
19994: IFFALSE 20012
// AddComHeal ( j , i ) ;
19996: LD_VAR 0 14
20000: PPUSH
20001: LD_VAR 0 13
20005: PPUSH
20006: CALL_OW 188
20010: GO 19993
20012: POP
20013: POP
// end ;
20014: GO 19966
20016: POP
20017: POP
// end ; end ; for i in soldiersOK_list do
20018: LD_ADDR_VAR 0 13
20022: PUSH
20023: LD_VAR 0 18
20027: PUSH
20028: FOR_IN
20029: IFFALSE 20205
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20031: LD_ADDR_VAR 0 21
20035: PUSH
20036: LD_INT 22
20038: PUSH
20039: LD_VAR 0 11
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PPUSH
20048: CALL_OW 69
20052: PPUSH
20053: LD_VAR 0 13
20057: PPUSH
20058: CALL_OW 74
20062: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20063: LD_ADDR_VAR 0 22
20067: PUSH
20068: LD_INT 22
20070: PUSH
20071: LD_VAR 0 11
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 59
20085: PUSH
20086: EMPTY
20087: LIST
20088: PUSH
20089: LD_INT 21
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 21
20101: PUSH
20102: LD_INT 2
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: EMPTY
20120: LIST
20121: PPUSH
20122: CALL_OW 69
20126: PPUSH
20127: LD_VAR 0 13
20131: PPUSH
20132: CALL_OW 74
20136: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20137: LD_VAR 0 13
20141: PPUSH
20142: LD_VAR 0 21
20146: PPUSH
20147: CALL_OW 296
20151: PUSH
20152: LD_INT 8
20154: PLUS
20155: PUSH
20156: LD_VAR 0 13
20160: PPUSH
20161: LD_VAR 0 22
20165: PPUSH
20166: CALL_OW 296
20170: LESS
20171: IFFALSE 20189
// begin ComAttackUnit ( i , target1 ) ;
20173: LD_VAR 0 13
20177: PPUSH
20178: LD_VAR 0 21
20182: PPUSH
20183: CALL_OW 115
// end else
20187: GO 20203
// begin ComAttackUnit ( i , target2 ) ;
20189: LD_VAR 0 13
20193: PPUSH
20194: LD_VAR 0 22
20198: PPUSH
20199: CALL_OW 115
// end ; end ;
20203: GO 20028
20205: POP
20206: POP
// for i in soldiersOK_list do
20207: LD_ADDR_VAR 0 13
20211: PUSH
20212: LD_VAR 0 18
20216: PUSH
20217: FOR_IN
20218: IFFALSE 20394
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20220: LD_ADDR_VAR 0 21
20224: PUSH
20225: LD_INT 22
20227: PUSH
20228: LD_VAR 0 11
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PPUSH
20237: CALL_OW 69
20241: PPUSH
20242: LD_VAR 0 13
20246: PPUSH
20247: CALL_OW 74
20251: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20252: LD_ADDR_VAR 0 22
20256: PUSH
20257: LD_INT 22
20259: PUSH
20260: LD_VAR 0 11
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: LD_INT 59
20274: PUSH
20275: EMPTY
20276: LIST
20277: PUSH
20278: LD_INT 21
20280: PUSH
20281: LD_INT 1
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 21
20290: PUSH
20291: LD_INT 2
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: EMPTY
20309: LIST
20310: PPUSH
20311: CALL_OW 69
20315: PPUSH
20316: LD_VAR 0 13
20320: PPUSH
20321: CALL_OW 74
20325: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20326: LD_VAR 0 13
20330: PPUSH
20331: LD_VAR 0 21
20335: PPUSH
20336: CALL_OW 296
20340: PUSH
20341: LD_INT 8
20343: PLUS
20344: PUSH
20345: LD_VAR 0 13
20349: PPUSH
20350: LD_VAR 0 22
20354: PPUSH
20355: CALL_OW 296
20359: LESS
20360: IFFALSE 20378
// begin ComAttackUnit ( i , target1 ) ;
20362: LD_VAR 0 13
20366: PPUSH
20367: LD_VAR 0 21
20371: PPUSH
20372: CALL_OW 115
// end else
20376: GO 20392
// begin ComAttackUnit ( i , target2 ) ;
20378: LD_VAR 0 13
20382: PPUSH
20383: LD_VAR 0 22
20387: PPUSH
20388: CALL_OW 115
// end ; end ;
20392: GO 20217
20394: POP
20395: POP
// until soldiersOK_list = [ ] ;
20396: LD_VAR 0 18
20400: PUSH
20401: EMPTY
20402: EQUAL
20403: IFFALSE 19781
// end ;
20405: LD_VAR 0 12
20409: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20410: LD_INT 0
20412: PPUSH
20413: PPUSH
20414: PPUSH
20415: PPUSH
20416: PPUSH
20417: PPUSH
20418: PPUSH
// repeat wait ( 0 0$1 ) ;
20419: LD_INT 35
20421: PPUSH
20422: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20426: LD_ADDR_VAR 0 7
20430: PUSH
20431: LD_INT 22
20433: PUSH
20434: LD_INT 2
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 25
20443: PUSH
20444: LD_INT 4
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 3
20453: PUSH
20454: LD_INT 60
20456: PUSH
20457: EMPTY
20458: LIST
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: LIST
20468: PPUSH
20469: CALL_OW 69
20473: ST_TO_ADDR
// if not tmp then
20474: LD_VAR 0 7
20478: NOT
20479: IFFALSE 20483
// continue ;
20481: GO 20419
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20483: LD_ADDR_VAR 0 3
20487: PUSH
20488: LD_INT 5
20490: PPUSH
20491: LD_INT 22
20493: PUSH
20494: LD_INT 0
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 25
20503: PUSH
20504: LD_INT 12
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PPUSH
20515: CALL_OW 70
20519: PUSH
20520: FOR_IN
20521: IFFALSE 20554
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20523: LD_VAR 0 7
20527: PPUSH
20528: LD_VAR 0 3
20532: PPUSH
20533: CALL_OW 250
20537: PPUSH
20538: LD_VAR 0 3
20542: PPUSH
20543: CALL_OW 251
20547: PPUSH
20548: CALL_OW 131
20552: GO 20520
20554: POP
20555: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20556: LD_INT 22
20558: PUSH
20559: LD_INT 2
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 25
20568: PUSH
20569: LD_INT 4
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PPUSH
20580: CALL_OW 69
20584: PUSH
20585: LD_INT 0
20587: EQUAL
20588: PUSH
20589: LD_INT 5
20591: PPUSH
20592: LD_INT 22
20594: PUSH
20595: LD_INT 0
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 25
20604: PUSH
20605: LD_INT 12
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PPUSH
20616: CALL_OW 70
20620: PUSH
20621: LD_INT 2
20623: LESS
20624: OR
20625: PUSH
20626: LD_OWVAR 1
20630: PUSH
20631: LD_INT 7000
20633: GREATEREQUAL
20634: OR
20635: IFFALSE 20419
// repeat wait ( 0 0$1 ) ;
20637: LD_INT 35
20639: PPUSH
20640: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20644: LD_ADDR_VAR 0 5
20648: PUSH
20649: LD_INT 22
20651: PUSH
20652: LD_INT 2
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 30
20661: PUSH
20662: LD_INT 5
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PPUSH
20673: CALL_OW 69
20677: ST_TO_ADDR
// until arm ;
20678: LD_VAR 0 5
20682: IFFALSE 20637
// wait ( 0 0$25 ) ;
20684: LD_INT 875
20686: PPUSH
20687: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20691: LD_ADDR_VAR 0 6
20695: PUSH
20696: LD_INT 22
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: LD_INT 30
20711: PUSH
20712: LD_INT 0
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 30
20721: PUSH
20722: LD_INT 1
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PPUSH
20738: CALL_OW 69
20742: ST_TO_ADDR
// j := 0 ;
20743: LD_ADDR_VAR 0 3
20747: PUSH
20748: LD_INT 0
20750: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20751: LD_ADDR_VAR 0 2
20755: PUSH
20756: LD_INT 22
20758: PUSH
20759: LD_INT 2
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 25
20768: PUSH
20769: LD_INT 12
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PPUSH
20780: CALL_OW 69
20784: PUSH
20785: FOR_IN
20786: IFFALSE 20873
// begin ComMoveXY ( i , 63 , 16 ) ;
20788: LD_VAR 0 2
20792: PPUSH
20793: LD_INT 63
20795: PPUSH
20796: LD_INT 16
20798: PPUSH
20799: CALL_OW 111
// j := j + 1 ;
20803: LD_ADDR_VAR 0 3
20807: PUSH
20808: LD_VAR 0 3
20812: PUSH
20813: LD_INT 1
20815: PLUS
20816: ST_TO_ADDR
// if j < 5 then
20817: LD_VAR 0 3
20821: PUSH
20822: LD_INT 5
20824: LESS
20825: IFFALSE 20843
// b := arm [ 1 ] else
20827: LD_ADDR_VAR 0 4
20831: PUSH
20832: LD_VAR 0 5
20836: PUSH
20837: LD_INT 1
20839: ARRAY
20840: ST_TO_ADDR
20841: GO 20857
// b := dep [ 1 ] ;
20843: LD_ADDR_VAR 0 4
20847: PUSH
20848: LD_VAR 0 6
20852: PUSH
20853: LD_INT 1
20855: ARRAY
20856: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20857: LD_VAR 0 2
20861: PPUSH
20862: LD_VAR 0 4
20866: PPUSH
20867: CALL_OW 180
// end ;
20871: GO 20785
20873: POP
20874: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20875: LD_ADDR_VAR 0 2
20879: PUSH
20880: LD_INT 22
20882: PUSH
20883: LD_INT 2
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 25
20892: PUSH
20893: LD_INT 4
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PPUSH
20904: CALL_OW 69
20908: PUSH
20909: FOR_IN
20910: IFFALSE 20956
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20912: LD_VAR 0 2
20916: PPUSH
20917: LD_INT 22
20919: PUSH
20920: LD_INT 2
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 30
20929: PUSH
20930: LD_INT 8
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PPUSH
20941: CALL_OW 69
20945: PUSH
20946: LD_INT 1
20948: ARRAY
20949: PPUSH
20950: CALL_OW 120
20954: GO 20909
20956: POP
20957: POP
// end ;
20958: LD_VAR 0 1
20962: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20963: LD_INT 0
20965: PPUSH
20966: PPUSH
20967: PPUSH
20968: PPUSH
20969: PPUSH
20970: PPUSH
20971: PPUSH
20972: PPUSH
20973: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20974: LD_INT 22
20976: PUSH
20977: LD_VAR 0 1
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 21
20988: PUSH
20989: LD_INT 2
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PPUSH
21000: CALL_OW 69
21004: PUSH
21005: LD_VAR 0 3
21009: LESSEQUAL
21010: IFFALSE 21154
// for i = 1 to vehCount do
21012: LD_ADDR_VAR 0 10
21016: PUSH
21017: DOUBLE
21018: LD_INT 1
21020: DEC
21021: ST_TO_ADDR
21022: LD_VAR 0 3
21026: PUSH
21027: FOR_TO
21028: IFFALSE 21152
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
21030: LD_ADDR_VAR 0 12
21034: PUSH
21035: LD_VAR 0 5
21039: PUSH
21040: LD_INT 1
21042: PPUSH
21043: LD_VAR 0 5
21047: PPUSH
21048: CALL_OW 12
21052: ARRAY
21053: ST_TO_ADDR
// if randWeapon = 46 then
21054: LD_VAR 0 12
21058: PUSH
21059: LD_INT 46
21061: EQUAL
21062: IFFALSE 21107
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
21064: LD_VAR 0 2
21068: PPUSH
21069: LD_INT 24
21071: PPUSH
21072: LD_VAR 0 6
21076: PPUSH
21077: LD_VAR 0 7
21081: PUSH
21082: LD_INT 1
21084: PPUSH
21085: LD_VAR 0 7
21089: PPUSH
21090: CALL_OW 12
21094: ARRAY
21095: PPUSH
21096: LD_VAR 0 12
21100: PPUSH
21101: CALL_OW 185
21105: GO 21150
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
21107: LD_VAR 0 2
21111: PPUSH
21112: LD_VAR 0 8
21116: PPUSH
21117: LD_VAR 0 6
21121: PPUSH
21122: LD_VAR 0 7
21126: PUSH
21127: LD_INT 1
21129: PPUSH
21130: LD_VAR 0 7
21134: PPUSH
21135: CALL_OW 12
21139: ARRAY
21140: PPUSH
21141: LD_VAR 0 12
21145: PPUSH
21146: CALL_OW 185
// end ;
21150: GO 21027
21152: POP
21153: POP
// repeat wait ( 0 0$1 ) ;
21154: LD_INT 35
21156: PPUSH
21157: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
21161: LD_INT 22
21163: PUSH
21164: LD_VAR 0 1
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 21
21175: PUSH
21176: LD_INT 2
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 24
21185: PUSH
21186: LD_INT 250
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: PPUSH
21198: CALL_OW 69
21202: PUSH
21203: LD_VAR 0 3
21207: GREATEREQUAL
21208: IFFALSE 21154
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
21210: LD_INT 22
21212: PUSH
21213: LD_VAR 0 1
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 21
21224: PUSH
21225: LD_INT 2
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 24
21234: PUSH
21235: LD_INT 250
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: LIST
21246: PPUSH
21247: CALL_OW 69
21251: PUSH
21252: LD_VAR 0 3
21256: GREATEREQUAL
21257: IFFALSE 21600
// begin repeat begin wait ( 0 0$1 ) ;
21259: LD_INT 35
21261: PPUSH
21262: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
21266: LD_INT 22
21268: PUSH
21269: LD_VAR 0 1
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 21
21280: PUSH
21281: LD_INT 2
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 24
21290: PUSH
21291: LD_INT 651
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: LIST
21302: PPUSH
21303: CALL_OW 69
21307: PUSH
21308: LD_INT 0
21310: GREATER
21311: IFFALSE 21539
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21313: LD_ADDR_VAR 0 10
21317: PUSH
21318: LD_INT 22
21320: PUSH
21321: LD_VAR 0 1
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 21
21332: PUSH
21333: LD_INT 2
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 24
21342: PUSH
21343: LD_INT 651
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: PPUSH
21355: CALL_OW 69
21359: PUSH
21360: FOR_IN
21361: IFFALSE 21537
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21363: LD_ADDR_VAR 0 16
21367: PUSH
21368: LD_INT 22
21370: PUSH
21371: LD_VAR 0 4
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PPUSH
21380: CALL_OW 69
21384: PPUSH
21385: LD_VAR 0 10
21389: PPUSH
21390: CALL_OW 74
21394: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21395: LD_ADDR_VAR 0 17
21399: PUSH
21400: LD_INT 22
21402: PUSH
21403: LD_VAR 0 4
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: LD_INT 59
21417: PUSH
21418: EMPTY
21419: LIST
21420: PUSH
21421: LD_INT 21
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 21
21433: PUSH
21434: LD_INT 2
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: EMPTY
21452: LIST
21453: PPUSH
21454: CALL_OW 69
21458: PPUSH
21459: LD_VAR 0 10
21463: PPUSH
21464: CALL_OW 74
21468: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21469: LD_VAR 0 10
21473: PPUSH
21474: LD_VAR 0 16
21478: PPUSH
21479: CALL_OW 296
21483: PUSH
21484: LD_INT 8
21486: PLUS
21487: PUSH
21488: LD_VAR 0 10
21492: PPUSH
21493: LD_VAR 0 17
21497: PPUSH
21498: CALL_OW 296
21502: LESS
21503: IFFALSE 21521
// begin ComAttackUnit ( i , target1 ) ;
21505: LD_VAR 0 10
21509: PPUSH
21510: LD_VAR 0 16
21514: PPUSH
21515: CALL_OW 115
// end else
21519: GO 21535
// begin ComAttackUnit ( i , target2 ) ;
21521: LD_VAR 0 10
21525: PPUSH
21526: LD_VAR 0 17
21530: PPUSH
21531: CALL_OW 115
// end ; end ;
21535: GO 21360
21537: POP
21538: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21539: LD_INT 22
21541: PUSH
21542: LD_VAR 0 1
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 21
21553: PUSH
21554: LD_INT 2
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PPUSH
21565: CALL_OW 69
21569: PUSH
21570: LD_INT 0
21572: EQUAL
21573: PUSH
21574: LD_INT 22
21576: PUSH
21577: LD_VAR 0 4
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: EMPTY
21587: LIST
21588: PPUSH
21589: CALL_OW 69
21593: PUSH
21594: LD_INT 0
21596: EQUAL
21597: OR
21598: IFFALSE 21259
// end ; end ;
21600: LD_VAR 0 9
21604: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21605: LD_INT 0
21607: PPUSH
21608: PPUSH
21609: PPUSH
21610: PPUSH
// r := 100 ;
21611: LD_ADDR_VAR 0 5
21615: PUSH
21616: LD_INT 100
21618: ST_TO_ADDR
// x := 0 ;
21619: LD_ADDR_VAR 0 6
21623: PUSH
21624: LD_INT 0
21626: ST_TO_ADDR
// while ( x < n ) do
21627: LD_VAR 0 6
21631: PUSH
21632: LD_VAR 0 2
21636: LESS
21637: IFFALSE 21924
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21639: LD_ADDR_VAR 0 4
21643: PUSH
21644: DOUBLE
21645: LD_INT 1
21647: DEC
21648: ST_TO_ADDR
21649: LD_VAR 0 1
21653: PPUSH
21654: LD_INT 0
21656: PPUSH
21657: CALL_OW 517
21661: PUSH
21662: LD_INT 1
21664: ARRAY
21665: PUSH
21666: FOR_TO
21667: IFFALSE 21920
// begin if r > 50 then
21669: LD_VAR 0 5
21673: PUSH
21674: LD_INT 50
21676: GREATER
21677: IFFALSE 21896
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21679: LD_VAR 0 1
21683: PPUSH
21684: LD_INT 0
21686: PPUSH
21687: CALL_OW 517
21691: PUSH
21692: LD_INT 1
21694: ARRAY
21695: PUSH
21696: LD_VAR 0 4
21700: ARRAY
21701: PPUSH
21702: LD_VAR 0 1
21706: PPUSH
21707: LD_INT 0
21709: PPUSH
21710: CALL_OW 517
21714: PUSH
21715: LD_INT 2
21717: ARRAY
21718: PUSH
21719: LD_VAR 0 4
21723: ARRAY
21724: PPUSH
21725: CALL_OW 458
21729: NOT
21730: IFFALSE 21880
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21732: LD_VAR 0 1
21736: PPUSH
21737: LD_INT 0
21739: PPUSH
21740: CALL_OW 517
21744: PUSH
21745: LD_INT 1
21747: ARRAY
21748: PUSH
21749: LD_VAR 0 4
21753: ARRAY
21754: PPUSH
21755: LD_VAR 0 1
21759: PPUSH
21760: LD_INT 0
21762: PPUSH
21763: CALL_OW 517
21767: PUSH
21768: LD_INT 2
21770: ARRAY
21771: PUSH
21772: LD_VAR 0 4
21776: ARRAY
21777: PPUSH
21778: LD_INT 5
21780: PPUSH
21781: LD_INT 0
21783: PPUSH
21784: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21788: LD_ADDR_EXP 51
21792: PUSH
21793: LD_EXP 51
21797: PPUSH
21798: LD_INT 1
21800: PPUSH
21801: LD_VAR 0 1
21805: PPUSH
21806: LD_INT 0
21808: PPUSH
21809: CALL_OW 517
21813: PUSH
21814: LD_INT 1
21816: ARRAY
21817: PUSH
21818: LD_VAR 0 4
21822: ARRAY
21823: PUSH
21824: LD_VAR 0 1
21828: PPUSH
21829: LD_INT 0
21831: PPUSH
21832: CALL_OW 517
21836: PUSH
21837: LD_INT 2
21839: ARRAY
21840: PUSH
21841: LD_VAR 0 4
21845: ARRAY
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PPUSH
21851: CALL_OW 2
21855: ST_TO_ADDR
// r := 0 ;
21856: LD_ADDR_VAR 0 5
21860: PUSH
21861: LD_INT 0
21863: ST_TO_ADDR
// x := x + 1 ;
21864: LD_ADDR_VAR 0 6
21868: PUSH
21869: LD_VAR 0 6
21873: PUSH
21874: LD_INT 1
21876: PLUS
21877: ST_TO_ADDR
// end else
21878: GO 21894
// r := r + 35 ;
21880: LD_ADDR_VAR 0 5
21884: PUSH
21885: LD_VAR 0 5
21889: PUSH
21890: LD_INT 35
21892: PLUS
21893: ST_TO_ADDR
// end else
21894: GO 21918
// r := r + rand ( 10 , 25 ) ;
21896: LD_ADDR_VAR 0 5
21900: PUSH
21901: LD_VAR 0 5
21905: PUSH
21906: LD_INT 10
21908: PPUSH
21909: LD_INT 25
21911: PPUSH
21912: CALL_OW 12
21916: PLUS
21917: ST_TO_ADDR
// end ;
21918: GO 21666
21920: POP
21921: POP
21922: GO 21627
// end ; end_of_file
21924: LD_VAR 0 3
21928: RET
// every 0 0$1 trigger russianAI = 1 do
21929: LD_EXP 40
21933: PUSH
21934: LD_INT 1
21936: EQUAL
21937: IFFALSE 22156
21939: GO 21941
21941: DISABLE
// begin enable ;
21942: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21943: LD_INT 3
21945: PPUSH
21946: LD_EXP 31
21950: PPUSH
21951: CALL 16407 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21955: LD_INT 3
21957: PPUSH
21958: LD_EXP 43
21962: PPUSH
21963: CALL 16767 0 2
// if ruPossition = 1 then
21967: LD_EXP 42
21971: PUSH
21972: LD_INT 1
21974: EQUAL
21975: IFFALSE 22030
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21977: LD_INT 3
21979: PPUSH
21980: LD_INT 13
21982: PPUSH
21983: LD_INT 10
21985: PPUSH
21986: LD_INT 22
21988: PUSH
21989: LD_INT 3
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 21
21998: PUSH
21999: LD_INT 3
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 30
22008: PUSH
22009: LD_INT 8
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: LIST
22020: PPUSH
22021: CALL_OW 69
22025: PPUSH
22026: CALL 16973 0 4
// if ruPossition = 2 then
22030: LD_EXP 42
22034: PUSH
22035: LD_INT 2
22037: EQUAL
22038: IFFALSE 22093
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22040: LD_INT 3
22042: PPUSH
22043: LD_INT 14
22045: PPUSH
22046: LD_INT 11
22048: PPUSH
22049: LD_INT 22
22051: PUSH
22052: LD_INT 3
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 21
22061: PUSH
22062: LD_INT 3
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 30
22071: PUSH
22072: LD_INT 8
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: LIST
22083: PPUSH
22084: CALL_OW 69
22088: PPUSH
22089: CALL 16973 0 4
// if ruPossition = 3 then
22093: LD_EXP 42
22097: PUSH
22098: LD_INT 3
22100: EQUAL
22101: IFFALSE 22156
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22103: LD_INT 3
22105: PPUSH
22106: LD_INT 15
22108: PPUSH
22109: LD_INT 12
22111: PPUSH
22112: LD_INT 22
22114: PUSH
22115: LD_INT 3
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 21
22124: PUSH
22125: LD_INT 3
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 30
22134: PUSH
22135: LD_INT 8
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: LIST
22146: PPUSH
22147: CALL_OW 69
22151: PPUSH
22152: CALL 16973 0 4
// end ;
22156: END
// every 0 0$1 do
22157: GO 22159
22159: DISABLE
// begin enable ;
22160: ENABLE
// if ruPossition = 1 then
22161: LD_EXP 42
22165: PUSH
22166: LD_INT 1
22168: EQUAL
22169: IFFALSE 22181
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
22171: LD_INT 3
22173: PPUSH
22174: LD_INT 10
22176: PPUSH
22177: CALL 16044 0 2
// if ruPossition = 2 then
22181: LD_EXP 42
22185: PUSH
22186: LD_INT 2
22188: EQUAL
22189: IFFALSE 22201
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
22191: LD_INT 3
22193: PPUSH
22194: LD_INT 11
22196: PPUSH
22197: CALL 16044 0 2
// if ruPossition = 3 then
22201: LD_EXP 42
22205: PUSH
22206: LD_INT 3
22208: EQUAL
22209: IFFALSE 22221
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
22211: LD_INT 3
22213: PPUSH
22214: LD_INT 12
22216: PPUSH
22217: CALL 16044 0 2
// IntBazooka ( 3 , 1 ) ;
22221: LD_INT 3
22223: PPUSH
22224: LD_INT 1
22226: PPUSH
22227: CALL 14843 0 2
// IntBazooka ( 6 , 1 ) ;
22231: LD_INT 6
22233: PPUSH
22234: LD_INT 1
22236: PPUSH
22237: CALL 14843 0 2
// end ;
22241: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22242: LD_EXP 40
22246: PUSH
22247: LD_INT 1
22249: EQUAL
22250: PUSH
22251: LD_EXP 36
22255: PPUSH
22256: CALL_OW 302
22260: AND
22261: PUSH
22262: LD_EXP 36
22266: PPUSH
22267: CALL_OW 255
22271: PUSH
22272: LD_INT 3
22274: EQUAL
22275: AND
22276: PUSH
22277: LD_INT 22
22279: PUSH
22280: LD_INT 3
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 21
22289: PUSH
22290: LD_INT 2
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 33
22299: PUSH
22300: LD_INT 3
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: PPUSH
22312: CALL_OW 69
22316: PUSH
22317: LD_INT 0
22319: EQUAL
22320: AND
22321: IFFALSE 22529
22323: GO 22325
22325: DISABLE
// begin enable ;
22326: ENABLE
// if Difficulty = 1 then
22327: LD_OWVAR 67
22331: PUSH
22332: LD_INT 1
22334: EQUAL
22335: IFFALSE 22397
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22337: LD_INT 3
22339: PPUSH
22340: LD_EXP 36
22344: PPUSH
22345: LD_INT 5
22347: PPUSH
22348: LD_INT 8
22350: PPUSH
22351: CALL_OW 12
22355: PPUSH
22356: LD_INT 1
22358: PPUSH
22359: LD_INT 43
22361: PUSH
22362: LD_INT 44
22364: PUSH
22365: LD_INT 45
22367: PUSH
22368: LD_INT 46
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: PPUSH
22377: LD_INT 1
22379: PPUSH
22380: LD_INT 3
22382: PUSH
22383: LD_INT 3
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PPUSH
22390: LD_INT 22
22392: PPUSH
22393: CALL 20963 0 8
// if Difficulty = 2 then
22397: LD_OWVAR 67
22401: PUSH
22402: LD_INT 2
22404: EQUAL
22405: IFFALSE 22463
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22407: LD_INT 3
22409: PPUSH
22410: LD_EXP 36
22414: PPUSH
22415: LD_INT 6
22417: PPUSH
22418: LD_INT 8
22420: PPUSH
22421: CALL_OW 12
22425: PPUSH
22426: LD_INT 1
22428: PPUSH
22429: LD_INT 44
22431: PUSH
22432: LD_INT 45
22434: PUSH
22435: LD_INT 46
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: LIST
22442: PPUSH
22443: LD_INT 1
22445: PPUSH
22446: LD_INT 3
22448: PUSH
22449: LD_INT 3
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PPUSH
22456: LD_INT 22
22458: PPUSH
22459: CALL 20963 0 8
// if Difficulty >= 3 then
22463: LD_OWVAR 67
22467: PUSH
22468: LD_INT 3
22470: GREATEREQUAL
22471: IFFALSE 22529
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22473: LD_INT 3
22475: PPUSH
22476: LD_EXP 36
22480: PPUSH
22481: LD_INT 7
22483: PPUSH
22484: LD_INT 8
22486: PPUSH
22487: CALL_OW 12
22491: PPUSH
22492: LD_INT 1
22494: PPUSH
22495: LD_INT 44
22497: PUSH
22498: LD_INT 45
22500: PUSH
22501: LD_INT 46
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: PPUSH
22509: LD_INT 1
22511: PPUSH
22512: LD_INT 3
22514: PUSH
22515: LD_INT 3
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PPUSH
22522: LD_INT 22
22524: PPUSH
22525: CALL 20963 0 8
// end ;
22529: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22530: LD_EXP 51
22534: PUSH
22535: LD_EXP 50
22539: AND
22540: IFFALSE 22661
22542: GO 22544
22544: DISABLE
22545: LD_INT 0
22547: PPUSH
// begin enable ;
22548: ENABLE
// for i in arabianMines do
22549: LD_ADDR_VAR 0 1
22553: PUSH
22554: LD_EXP 51
22558: PUSH
22559: FOR_IN
22560: IFFALSE 22659
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22562: LD_INT 22
22564: PUSH
22565: LD_INT 1
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 92
22574: PUSH
22575: LD_VAR 0 1
22579: PUSH
22580: LD_INT 1
22582: ARRAY
22583: PUSH
22584: LD_VAR 0 1
22588: PUSH
22589: LD_INT 2
22591: ARRAY
22592: PUSH
22593: LD_INT 3
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PPUSH
22606: CALL_OW 69
22610: IFFALSE 22657
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22612: LD_VAR 0 1
22616: PUSH
22617: LD_INT 1
22619: ARRAY
22620: PPUSH
22621: LD_VAR 0 1
22625: PUSH
22626: LD_INT 2
22628: ARRAY
22629: PPUSH
22630: LD_INT 5
22632: PPUSH
22633: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22637: LD_ADDR_EXP 51
22641: PUSH
22642: LD_EXP 51
22646: PPUSH
22647: LD_VAR 0 1
22651: PPUSH
22652: CALL_OW 3
22656: ST_TO_ADDR
// end ; end ;
22657: GO 22559
22659: POP
22660: POP
// end ; end_of_file
22661: PPOPN 1
22663: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22664: LD_VAR 0 1
22668: PPUSH
22669: CALL_OW 255
22673: PUSH
22674: LD_INT 4
22676: EQUAL
22677: IFFALSE 22691
// SetBName ( building , epsilon ) ;
22679: LD_VAR 0 1
22683: PPUSH
22684: LD_STRING epsilon
22686: PPUSH
22687: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22691: LD_VAR 0 1
22695: PPUSH
22696: CALL_OW 255
22700: PUSH
22701: LD_INT 1
22703: EQUAL
22704: PUSH
22705: LD_VAR 0 1
22709: PPUSH
22710: CALL_OW 266
22714: PUSH
22715: LD_INT 0
22717: EQUAL
22718: AND
22719: IFFALSE 22733
// SetBName ( building , epsilon ) ;
22721: LD_VAR 0 1
22725: PPUSH
22726: LD_STRING epsilon
22728: PPUSH
22729: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22733: LD_VAR 0 1
22737: PPUSH
22738: CALL_OW 255
22742: PUSH
22743: LD_INT 3
22745: EQUAL
22746: PUSH
22747: LD_VAR 0 1
22751: PPUSH
22752: CALL_OW 266
22756: PUSH
22757: LD_INT 0
22759: EQUAL
22760: AND
22761: IFFALSE 22775
// SetBName ( building , chuikov ) ;
22763: LD_VAR 0 1
22767: PPUSH
22768: LD_STRING chuikov
22770: PPUSH
22771: CALL_OW 500
// if GetSide ( building ) = 2 then
22775: LD_VAR 0 1
22779: PPUSH
22780: CALL_OW 255
22784: PUSH
22785: LD_INT 2
22787: EQUAL
22788: IFFALSE 22844
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22790: LD_VAR 0 1
22794: PPUSH
22795: CALL_OW 266
22799: PUSH
22800: LD_INT 6
22802: EQUAL
22803: PUSH
22804: LD_VAR 0 1
22808: PPUSH
22809: CALL_OW 266
22813: PUSH
22814: LD_INT 9
22816: EQUAL
22817: OR
22818: IFFALSE 22844
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22820: LD_VAR 0 1
22824: PPUSH
22825: LD_INT 10
22827: PPUSH
22828: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22832: LD_VAR 0 1
22836: PPUSH
22837: LD_INT 11
22839: PPUSH
22840: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22844: LD_VAR 0 1
22848: PPUSH
22849: CALL_OW 255
22853: PUSH
22854: LD_INT 3
22856: EQUAL
22857: IFFALSE 22891
// begin ruDepotConstructed := true ;
22859: LD_ADDR_EXP 58
22863: PUSH
22864: LD_INT 1
22866: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22867: LD_VAR 0 1
22871: PPUSH
22872: CALL_OW 266
22876: PUSH
22877: LD_INT 2
22879: EQUAL
22880: IFFALSE 22891
// AddComUpgrade ( building ) ;
22882: LD_VAR 0 1
22886: PPUSH
22887: CALL_OW 206
// end ; end ;
22891: PPOPN 2
22893: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22894: LD_INT 0
22896: PPUSH
22897: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22898: LD_VAR 0 1
22902: PUSH
22903: LD_INT 22
22905: PUSH
22906: LD_INT 3
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 23
22915: PUSH
22916: LD_INT 3
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 21
22925: PUSH
22926: LD_INT 2
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: LIST
22937: PPUSH
22938: CALL_OW 69
22942: IN
22943: PUSH
22944: LD_EXP 62
22948: NOT
22949: AND
22950: IFFALSE 22981
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22952: LD_ADDR_EXP 62
22956: PUSH
22957: LD_VAR 0 1
22961: PPUSH
22962: CALL_OW 250
22966: PUSH
22967: LD_VAR 0 1
22971: PPUSH
22972: CALL_OW 251
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: ST_TO_ADDR
// end ;
22981: PPOPN 3
22983: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22984: LD_VAR 0 2
22988: PPUSH
22989: CALL_OW 255
22993: PUSH
22994: LD_INT 3
22996: EQUAL
22997: PUSH
22998: LD_EXP 36
23002: PPUSH
23003: CALL_OW 255
23007: PUSH
23008: LD_INT 3
23010: EQUAL
23011: AND
23012: PUSH
23013: LD_EXP 36
23017: PPUSH
23018: CALL_OW 302
23022: AND
23023: IFFALSE 23039
// ComEnterUnit ( human , ruFab ) ;
23025: LD_VAR 0 2
23029: PPUSH
23030: LD_EXP 36
23034: PPUSH
23035: CALL_OW 120
// end ;
23039: PPOPN 2
23041: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
23042: LD_INT 0
23044: PPUSH
23045: PPUSH
23046: PPUSH
23047: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
23048: LD_VAR 0 1
23052: PPUSH
23053: CALL_OW 255
23057: PUSH
23058: LD_INT 1
23060: EQUAL
23061: PUSH
23062: LD_EXP 66
23066: PUSH
23067: LD_INT 0
23069: EQUAL
23070: AND
23071: IFFALSE 23273
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
23073: LD_VAR 0 1
23077: PPUSH
23078: CALL_OW 266
23082: PUSH
23083: LD_INT 26
23085: EQUAL
23086: PUSH
23087: LD_VAR 0 1
23091: PPUSH
23092: CALL_OW 266
23096: PUSH
23097: LD_INT 27
23099: EQUAL
23100: OR
23101: PUSH
23102: LD_VAR 0 1
23106: PPUSH
23107: CALL_OW 266
23111: PUSH
23112: LD_INT 28
23114: EQUAL
23115: OR
23116: IFFALSE 23273
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
23118: LD_INT 22
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 2
23130: PUSH
23131: LD_INT 30
23133: PUSH
23134: LD_INT 7
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 30
23143: PUSH
23144: LD_INT 8
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: LIST
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PPUSH
23160: CALL_OW 69
23164: PUSH
23165: LD_INT 0
23167: GREATER
23168: IFFALSE 23273
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
23170: LD_ADDR_VAR 0 2
23174: PUSH
23175: LD_INT 22
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: LD_INT 30
23190: PUSH
23191: LD_INT 7
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 30
23200: PUSH
23201: LD_INT 8
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: LIST
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PPUSH
23217: CALL_OW 69
23221: PUSH
23222: FOR_IN
23223: IFFALSE 23271
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
23225: LD_VAR 0 2
23229: PPUSH
23230: LD_INT 1
23232: PPUSH
23233: CALL_OW 268
23237: PUSH
23238: LD_INT 11
23240: EQUAL
23241: PUSH
23242: LD_VAR 0 2
23246: PPUSH
23247: LD_INT 2
23249: PPUSH
23250: CALL_OW 268
23254: PUSH
23255: LD_INT 11
23257: EQUAL
23258: OR
23259: IFFALSE 23269
// eventVar1 = 1 ;
23261: LD_ADDR_EXP 66
23265: PUSH
23266: LD_INT 1
23268: ST_TO_ADDR
23269: GO 23222
23271: POP
23272: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
23273: LD_VAR 0 1
23277: PPUSH
23278: CALL_OW 255
23282: PUSH
23283: LD_INT 3
23285: EQUAL
23286: IFFALSE 23766
// begin if GetBType ( building ) = b_depot then
23288: LD_VAR 0 1
23292: PPUSH
23293: CALL_OW 266
23297: PUSH
23298: LD_INT 0
23300: EQUAL
23301: IFFALSE 23373
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
23303: LD_VAR 0 1
23307: PPUSH
23308: CALL_OW 274
23312: PPUSH
23313: LD_INT 1
23315: PPUSH
23316: LD_INT 5000
23318: PPUSH
23319: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23323: LD_VAR 0 1
23327: PPUSH
23328: CALL_OW 274
23332: PPUSH
23333: LD_INT 2
23335: PPUSH
23336: LD_INT 300
23338: PPUSH
23339: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23343: LD_VAR 0 1
23347: PPUSH
23348: CALL_OW 274
23352: PPUSH
23353: LD_INT 3
23355: PPUSH
23356: LD_INT 100
23358: PPUSH
23359: CALL_OW 277
// ruDepot = building ;
23363: LD_ADDR_EXP 31
23367: PUSH
23368: LD_VAR 0 1
23372: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23373: LD_VAR 0 1
23377: PPUSH
23378: CALL_OW 266
23382: PUSH
23383: LD_INT 0
23385: EQUAL
23386: PUSH
23387: LD_VAR 0 1
23391: PPUSH
23392: CALL_OW 266
23396: PUSH
23397: LD_INT 2
23399: EQUAL
23400: OR
23401: PUSH
23402: LD_VAR 0 1
23406: PPUSH
23407: CALL_OW 266
23411: PUSH
23412: LD_INT 4
23414: EQUAL
23415: OR
23416: IFFALSE 23427
// ComUpgrade ( building ) ;
23418: LD_VAR 0 1
23422: PPUSH
23423: CALL_OW 146
// if GetBType ( building ) = b_lab then
23427: LD_VAR 0 1
23431: PPUSH
23432: CALL_OW 266
23436: PUSH
23437: LD_INT 6
23439: EQUAL
23440: IFFALSE 23643
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23442: LD_INT 22
23444: PUSH
23445: LD_INT 3
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 30
23454: PUSH
23455: LD_INT 8
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PPUSH
23466: CALL_OW 69
23470: PUSH
23471: LD_INT 0
23473: EQUAL
23474: IFFALSE 23512
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23476: LD_VAR 0 1
23480: PPUSH
23481: LD_INT 10
23483: PPUSH
23484: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23488: LD_VAR 0 1
23492: PPUSH
23493: LD_INT 12
23495: PPUSH
23496: CALL_OW 207
// ruLab1 = building ;
23500: LD_ADDR_EXP 32
23504: PUSH
23505: LD_VAR 0 1
23509: ST_TO_ADDR
// end else
23510: GO 23546
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23512: LD_VAR 0 1
23516: PPUSH
23517: LD_INT 11
23519: PPUSH
23520: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23524: LD_VAR 0 1
23528: PPUSH
23529: LD_INT 14
23531: PPUSH
23532: CALL_OW 207
// ruLab2 = building ;
23536: LD_ADDR_EXP 33
23540: PUSH
23541: LD_VAR 0 1
23545: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23546: LD_INT 3
23548: PPUSH
23549: LD_VAR 0 1
23553: PPUSH
23554: LD_INT 3
23556: PPUSH
23557: CALL 15959 0 3
// if ruDestroyedBuildings > 0 then
23561: LD_EXP 43
23565: PUSH
23566: LD_INT 0
23568: GREATER
23569: IFFALSE 23643
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23571: LD_ADDR_EXP 43
23575: PUSH
23576: LD_EXP 43
23580: PPUSH
23581: LD_INT 1
23583: PPUSH
23584: CALL_OW 3
23588: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23589: LD_ADDR_EXP 43
23593: PUSH
23594: LD_EXP 43
23598: PPUSH
23599: LD_INT 1
23601: PPUSH
23602: CALL_OW 3
23606: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23607: LD_ADDR_EXP 43
23611: PUSH
23612: LD_EXP 43
23616: PPUSH
23617: LD_INT 1
23619: PPUSH
23620: CALL_OW 3
23624: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23625: LD_ADDR_EXP 43
23629: PUSH
23630: LD_EXP 43
23634: PPUSH
23635: LD_INT 1
23637: PPUSH
23638: CALL_OW 3
23642: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23643: LD_VAR 0 1
23647: PPUSH
23648: CALL_OW 266
23652: PUSH
23653: LD_INT 32
23655: EQUAL
23656: IFFALSE 23693
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23658: LD_VAR 0 1
23662: PPUSH
23663: LD_INT 44
23665: PUSH
23666: LD_INT 45
23668: PUSH
23669: LD_INT 46
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: PPUSH
23680: LD_INT 3
23682: PPUSH
23683: CALL_OW 12
23687: ARRAY
23688: PPUSH
23689: CALL_OW 208
// if GetBType ( building ) = b_turret then
23693: LD_VAR 0 1
23697: PPUSH
23698: CALL_OW 266
23702: PUSH
23703: LD_INT 33
23705: EQUAL
23706: IFFALSE 23743
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23708: LD_VAR 0 1
23712: PPUSH
23713: LD_INT 44
23715: PUSH
23716: LD_INT 45
23718: PUSH
23719: LD_INT 46
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 1
23729: PPUSH
23730: LD_INT 3
23732: PPUSH
23733: CALL_OW 12
23737: ARRAY
23738: PPUSH
23739: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23743: LD_VAR 0 1
23747: PPUSH
23748: CALL_OW 266
23752: PUSH
23753: LD_INT 24
23755: EQUAL
23756: IFFALSE 23766
// russianAI = 1 ;
23758: LD_ADDR_EXP 40
23762: PUSH
23763: LD_INT 1
23765: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23766: LD_VAR 0 1
23770: PPUSH
23771: CALL_OW 255
23775: PUSH
23776: LD_INT 2
23778: EQUAL
23779: IFFALSE 24658
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23781: LD_VAR 0 1
23785: PPUSH
23786: CALL_OW 266
23790: PUSH
23791: LD_EXP 69
23795: PUSH
23796: LD_INT 1
23798: ARRAY
23799: PUSH
23800: LD_INT 1
23802: ARRAY
23803: EQUAL
23804: IFFALSE 23931
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23806: LD_ADDR_EXP 69
23810: PUSH
23811: LD_EXP 69
23815: PPUSH
23816: LD_INT 1
23818: PPUSH
23819: CALL_OW 3
23823: ST_TO_ADDR
// if arBuildingsTab then
23824: LD_EXP 69
23828: IFFALSE 23931
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23830: LD_ADDR_VAR 0 3
23834: PUSH
23835: LD_INT 22
23837: PUSH
23838: LD_INT 2
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 25
23847: PUSH
23848: LD_INT 2
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PPUSH
23859: CALL_OW 69
23863: ST_TO_ADDR
// if engineers then
23864: LD_VAR 0 3
23868: IFFALSE 23931
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23870: LD_VAR 0 3
23874: PPUSH
23875: LD_EXP 69
23879: PUSH
23880: LD_INT 1
23882: ARRAY
23883: PUSH
23884: LD_INT 1
23886: ARRAY
23887: PPUSH
23888: LD_EXP 69
23892: PUSH
23893: LD_INT 1
23895: ARRAY
23896: PUSH
23897: LD_INT 2
23899: ARRAY
23900: PPUSH
23901: LD_EXP 69
23905: PUSH
23906: LD_INT 1
23908: ARRAY
23909: PUSH
23910: LD_INT 3
23912: ARRAY
23913: PPUSH
23914: LD_EXP 69
23918: PUSH
23919: LD_INT 1
23921: ARRAY
23922: PUSH
23923: LD_INT 4
23925: ARRAY
23926: PPUSH
23927: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23931: LD_VAR 0 1
23935: PPUSH
23936: CALL_OW 266
23940: PUSH
23941: LD_INT 31
23943: EQUAL
23944: IFFALSE 24090
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23946: LD_ADDR_VAR 0 4
23950: PUSH
23951: LD_INT 22
23953: PUSH
23954: LD_INT 2
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 2
23963: PUSH
23964: LD_INT 25
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 25
23976: PUSH
23977: LD_INT 8
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PPUSH
23993: CALL_OW 69
23997: PUSH
23998: LD_EXP 27
24002: DIFF
24003: ST_TO_ADDR
// if not sol then
24004: LD_VAR 0 4
24008: NOT
24009: IFFALSE 24013
// exit ;
24011: GO 24658
// for i in sol do
24013: LD_ADDR_VAR 0 2
24017: PUSH
24018: LD_VAR 0 4
24022: PUSH
24023: FOR_IN
24024: IFFALSE 24088
// if not GetTag ( i ) then
24026: LD_VAR 0 2
24030: PPUSH
24031: CALL_OW 110
24035: NOT
24036: IFFALSE 24086
// begin if IsInUnit ( i ) then
24038: LD_VAR 0 2
24042: PPUSH
24043: CALL_OW 310
24047: IFFALSE 24058
// ComExitBuilding ( i ) ;
24049: LD_VAR 0 2
24053: PPUSH
24054: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
24058: LD_VAR 0 2
24062: PPUSH
24063: LD_VAR 0 1
24067: PPUSH
24068: CALL_OW 180
// SetTag ( i , 11 ) ;
24072: LD_VAR 0 2
24076: PPUSH
24077: LD_INT 11
24079: PPUSH
24080: CALL_OW 109
// break ;
24084: GO 24088
// end ;
24086: GO 24023
24088: POP
24089: POP
// end ; if GetBType ( building ) = b_depot then
24090: LD_VAR 0 1
24094: PPUSH
24095: CALL_OW 266
24099: PUSH
24100: LD_INT 0
24102: EQUAL
24103: IFFALSE 24189
// begin arDepot = building ;
24105: LD_ADDR_EXP 44
24109: PUSH
24110: LD_VAR 0 1
24114: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
24115: LD_INT 38
24117: PUSH
24118: LD_INT 47
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PPUSH
24125: LD_INT 71
24127: PPUSH
24128: LD_INT 19
24130: PPUSH
24131: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
24135: LD_VAR 0 1
24139: PPUSH
24140: CALL_OW 274
24144: PPUSH
24145: LD_INT 1
24147: PPUSH
24148: LD_INT 500
24150: PPUSH
24151: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
24155: LD_VAR 0 1
24159: PPUSH
24160: CALL_OW 274
24164: PPUSH
24165: LD_INT 3
24167: PPUSH
24168: LD_INT 30
24170: PPUSH
24171: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
24175: LD_EXP 27
24179: PPUSH
24180: LD_VAR 0 1
24184: PPUSH
24185: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
24189: LD_VAR 0 1
24193: PPUSH
24194: CALL_OW 266
24198: PUSH
24199: LD_INT 6
24201: EQUAL
24202: PUSH
24203: LD_VAR 0 1
24207: PPUSH
24208: CALL_OW 266
24212: PUSH
24213: LD_INT 9
24215: EQUAL
24216: OR
24217: IFFALSE 24268
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
24219: LD_VAR 0 1
24223: PPUSH
24224: LD_INT 10
24226: PPUSH
24227: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
24231: LD_VAR 0 1
24235: PPUSH
24236: LD_INT 11
24238: PPUSH
24239: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
24243: LD_INT 2
24245: PPUSH
24246: LD_VAR 0 1
24250: PPUSH
24251: LD_INT 2
24253: PPUSH
24254: CALL 15959 0 3
// arLab = building ;
24258: LD_ADDR_EXP 45
24262: PUSH
24263: LD_VAR 0 1
24267: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
24268: LD_VAR 0 1
24272: PPUSH
24273: CALL_OW 266
24277: PUSH
24278: LD_INT 2
24280: EQUAL
24281: PUSH
24282: LD_VAR 0 1
24286: PPUSH
24287: CALL_OW 266
24291: PUSH
24292: LD_INT 4
24294: EQUAL
24295: OR
24296: IFFALSE 24367
// begin ComUpgrade ( building ) ;
24298: LD_VAR 0 1
24302: PPUSH
24303: CALL_OW 146
// if GetBType ( building ) = b_armoury then
24307: LD_VAR 0 1
24311: PPUSH
24312: CALL_OW 266
24316: PUSH
24317: LD_INT 4
24319: EQUAL
24320: IFFALSE 24367
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24322: LD_INT 22
24324: PUSH
24325: LD_INT 2
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 25
24334: PUSH
24335: LD_INT 1
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PPUSH
24346: CALL_OW 69
24350: PUSH
24351: LD_EXP 27
24355: DIFF
24356: PPUSH
24357: LD_INT 75
24359: PPUSH
24360: LD_INT 21
24362: PPUSH
24363: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24367: LD_VAR 0 1
24371: PPUSH
24372: CALL_OW 266
24376: PUSH
24377: LD_INT 27
24379: EQUAL
24380: IFFALSE 24658
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24382: LD_INT 22
24384: PUSH
24385: LD_INT 2
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 30
24394: PUSH
24395: LD_INT 27
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PPUSH
24406: CALL_OW 69
24410: PUSH
24411: LD_INT 2
24413: EQUAL
24414: IFFALSE 24658
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24416: LD_ADDR_VAR 0 2
24420: PUSH
24421: LD_INT 22
24423: PUSH
24424: LD_INT 2
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 21
24433: PUSH
24434: LD_INT 1
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 25
24443: PUSH
24444: LD_INT 2
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: LIST
24455: PPUSH
24456: CALL_OW 69
24460: PUSH
24461: LD_INT 1
24463: ARRAY
24464: ST_TO_ADDR
// if not i then
24465: LD_VAR 0 2
24469: NOT
24470: IFFALSE 24474
// exit ;
24472: GO 24658
// AddComMoveXY ( i , 92 , 34 ) ;
24474: LD_VAR 0 2
24478: PPUSH
24479: LD_INT 92
24481: PPUSH
24482: LD_INT 34
24484: PPUSH
24485: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24489: LD_VAR 0 2
24493: PPUSH
24494: LD_INT 35
24496: PPUSH
24497: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24501: LD_VAR 0 2
24505: PPUSH
24506: LD_INT 101
24508: PPUSH
24509: LD_INT 20
24511: PPUSH
24512: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24516: LD_VAR 0 2
24520: PPUSH
24521: LD_INT 35
24523: PPUSH
24524: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24528: LD_VAR 0 2
24532: PPUSH
24533: LD_INT 115
24535: PPUSH
24536: LD_INT 30
24538: PPUSH
24539: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24543: LD_VAR 0 2
24547: PPUSH
24548: LD_INT 35
24550: PPUSH
24551: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24555: LD_VAR 0 2
24559: PPUSH
24560: LD_INT 82
24562: PPUSH
24563: LD_INT 57
24565: PPUSH
24566: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24570: LD_VAR 0 2
24574: PPUSH
24575: LD_INT 35
24577: PPUSH
24578: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24582: LD_VAR 0 2
24586: PPUSH
24587: LD_INT 36
24589: PPUSH
24590: LD_INT 28
24592: PPUSH
24593: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24597: LD_VAR 0 2
24601: PPUSH
24602: LD_INT 70
24604: PPUSH
24605: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24609: LD_INT 22
24611: PUSH
24612: LD_INT 2
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 21
24621: PUSH
24622: LD_INT 1
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 25
24631: PUSH
24632: LD_INT 2
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: LIST
24643: PPUSH
24644: CALL_OW 69
24648: PPUSH
24649: LD_EXP 44
24653: PPUSH
24654: CALL_OW 180
// end ; end ; end ;
24658: PPOPN 5
24660: END
// on UpgradeComplete ( building ) do var i ;
24661: LD_INT 0
24663: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24664: LD_VAR 0 1
24668: PPUSH
24669: CALL_OW 255
24673: PUSH
24674: LD_INT 1
24676: EQUAL
24677: PUSH
24678: LD_EXP 66
24682: PUSH
24683: LD_INT 0
24685: EQUAL
24686: AND
24687: IFFALSE 24885
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24689: LD_VAR 0 1
24693: PPUSH
24694: CALL_OW 266
24698: PUSH
24699: LD_INT 7
24701: EQUAL
24702: PUSH
24703: LD_VAR 0 1
24707: PPUSH
24708: CALL_OW 266
24712: PUSH
24713: LD_INT 8
24715: EQUAL
24716: OR
24717: IFFALSE 24885
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24719: LD_INT 22
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 2
24731: PUSH
24732: LD_INT 30
24734: PUSH
24735: LD_INT 26
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 30
24744: PUSH
24745: LD_INT 27
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 30
24754: PUSH
24755: LD_INT 28
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PPUSH
24772: CALL_OW 69
24776: PUSH
24777: LD_INT 0
24779: GREATER
24780: IFFALSE 24885
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24782: LD_ADDR_VAR 0 2
24786: PUSH
24787: LD_INT 22
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 2
24799: PUSH
24800: LD_INT 30
24802: PUSH
24803: LD_INT 7
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 30
24812: PUSH
24813: LD_INT 8
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: LIST
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PPUSH
24829: CALL_OW 69
24833: PUSH
24834: FOR_IN
24835: IFFALSE 24883
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24837: LD_VAR 0 2
24841: PPUSH
24842: LD_INT 1
24844: PPUSH
24845: CALL_OW 268
24849: PUSH
24850: LD_INT 11
24852: EQUAL
24853: PUSH
24854: LD_VAR 0 2
24858: PPUSH
24859: LD_INT 2
24861: PPUSH
24862: CALL_OW 268
24866: PUSH
24867: LD_INT 11
24869: EQUAL
24870: OR
24871: IFFALSE 24881
// eventVar1 = 1 ;
24873: LD_ADDR_EXP 66
24877: PUSH
24878: LD_INT 1
24880: ST_TO_ADDR
24881: GO 24834
24883: POP
24884: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24885: LD_VAR 0 1
24889: PPUSH
24890: CALL_OW 255
24894: PUSH
24895: LD_INT 2
24897: EQUAL
24898: IFFALSE 25003
// begin if GetBType ( building ) = b_barracks then
24900: LD_VAR 0 1
24904: PPUSH
24905: CALL_OW 266
24909: PUSH
24910: LD_INT 5
24912: EQUAL
24913: IFFALSE 25003
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24915: LD_ADDR_VAR 0 2
24919: PUSH
24920: LD_INT 22
24922: PUSH
24923: LD_INT 2
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 25
24932: PUSH
24933: LD_INT 1
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 3
24942: PUSH
24943: LD_INT 54
24945: PUSH
24946: EMPTY
24947: LIST
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: LIST
24957: PPUSH
24958: CALL_OW 69
24962: PUSH
24963: LD_EXP 27
24967: PUSH
24968: EMPTY
24969: LIST
24970: DIFF
24971: PUSH
24972: FOR_IN
24973: IFFALSE 24991
// ComEnterUnit ( i , building ) ;
24975: LD_VAR 0 2
24979: PPUSH
24980: LD_VAR 0 1
24984: PPUSH
24985: CALL_OW 120
24989: GO 24972
24991: POP
24992: POP
// arArm = building ;
24993: LD_ADDR_EXP 46
24997: PUSH
24998: LD_VAR 0 1
25002: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
25003: LD_VAR 0 1
25007: PPUSH
25008: CALL_OW 255
25012: PUSH
25013: LD_INT 3
25015: EQUAL
25016: IFFALSE 25489
// begin if GetBType ( building ) = b_factory then
25018: LD_VAR 0 1
25022: PPUSH
25023: CALL_OW 266
25027: PUSH
25028: LD_INT 3
25030: EQUAL
25031: IFFALSE 25098
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
25033: LD_ADDR_VAR 0 2
25037: PUSH
25038: LD_INT 22
25040: PUSH
25041: LD_INT 3
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 25
25050: PUSH
25051: LD_INT 3
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PPUSH
25062: CALL_OW 69
25066: PUSH
25067: FOR_IN
25068: IFFALSE 25086
// ComEnterUnit ( i , building ) ;
25070: LD_VAR 0 2
25074: PPUSH
25075: LD_VAR 0 1
25079: PPUSH
25080: CALL_OW 120
25084: GO 25067
25086: POP
25087: POP
// ruFab = building ;
25088: LD_ADDR_EXP 36
25092: PUSH
25093: LD_VAR 0 1
25097: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
25098: LD_INT 22
25100: PUSH
25101: LD_INT 3
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 21
25110: PUSH
25111: LD_INT 3
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 30
25120: PUSH
25121: LD_INT 8
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: LIST
25132: PPUSH
25133: CALL_OW 69
25137: PUSH
25138: LD_INT 2
25140: EQUAL
25141: IFFALSE 25349
// begin for i = 1 to 2 do
25143: LD_ADDR_VAR 0 2
25147: PUSH
25148: DOUBLE
25149: LD_INT 1
25151: DEC
25152: ST_TO_ADDR
25153: LD_INT 2
25155: PUSH
25156: FOR_TO
25157: IFFALSE 25244
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
25159: LD_INT 22
25161: PUSH
25162: LD_INT 3
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 25
25171: PUSH
25172: LD_INT 4
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PPUSH
25183: CALL_OW 69
25187: PUSH
25188: LD_VAR 0 2
25192: ARRAY
25193: PPUSH
25194: LD_INT 22
25196: PUSH
25197: LD_INT 3
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 21
25206: PUSH
25207: LD_INT 3
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 30
25216: PUSH
25217: LD_INT 8
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: LIST
25228: PPUSH
25229: CALL_OW 69
25233: PUSH
25234: LD_INT 1
25236: ARRAY
25237: PPUSH
25238: CALL_OW 120
25242: GO 25156
25244: POP
25245: POP
// for i = 3 to 4 do
25246: LD_ADDR_VAR 0 2
25250: PUSH
25251: DOUBLE
25252: LD_INT 3
25254: DEC
25255: ST_TO_ADDR
25256: LD_INT 4
25258: PUSH
25259: FOR_TO
25260: IFFALSE 25347
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
25262: LD_INT 22
25264: PUSH
25265: LD_INT 3
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 25
25274: PUSH
25275: LD_INT 4
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PPUSH
25286: CALL_OW 69
25290: PUSH
25291: LD_VAR 0 2
25295: ARRAY
25296: PPUSH
25297: LD_INT 22
25299: PUSH
25300: LD_INT 3
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 21
25309: PUSH
25310: LD_INT 3
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 30
25319: PUSH
25320: LD_INT 8
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: LIST
25331: PPUSH
25332: CALL_OW 69
25336: PUSH
25337: LD_INT 2
25339: ARRAY
25340: PPUSH
25341: CALL_OW 120
25345: GO 25259
25347: POP
25348: POP
// end ; if GetBType ( building ) = b_barracks then
25349: LD_VAR 0 1
25353: PPUSH
25354: CALL_OW 266
25358: PUSH
25359: LD_INT 5
25361: EQUAL
25362: IFFALSE 25489
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25364: LD_ADDR_VAR 0 2
25368: PUSH
25369: LD_INT 22
25371: PUSH
25372: LD_INT 3
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 25
25381: PUSH
25382: LD_INT 1
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 3
25391: PUSH
25392: LD_INT 54
25394: PUSH
25395: EMPTY
25396: LIST
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: LIST
25406: PPUSH
25407: CALL_OW 69
25411: PUSH
25412: FOR_IN
25413: IFFALSE 25431
// ComEnterUnit ( i , building ) ;
25415: LD_VAR 0 2
25419: PPUSH
25420: LD_VAR 0 1
25424: PPUSH
25425: CALL_OW 120
25429: GO 25412
25431: POP
25432: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25433: LD_INT 22
25435: PUSH
25436: LD_INT 3
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 30
25445: PUSH
25446: LD_INT 5
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PPUSH
25457: CALL_OW 69
25461: PUSH
25462: LD_INT 0
25464: EQUAL
25465: IFFALSE 25479
// ruArm1 = building else
25467: LD_ADDR_EXP 34
25471: PUSH
25472: LD_VAR 0 1
25476: ST_TO_ADDR
25477: GO 25489
// ruArm2 = building ;
25479: LD_ADDR_EXP 35
25483: PUSH
25484: LD_VAR 0 1
25488: ST_TO_ADDR
// end ; end ; end ;
25489: PPOPN 2
25491: END
// on EnterBuilding ( building , human ) do var rnd ;
25492: LD_INT 0
25494: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25495: LD_VAR 0 2
25499: PPUSH
25500: CALL_OW 255
25504: PUSH
25505: LD_INT 2
25507: EQUAL
25508: PUSH
25509: LD_VAR 0 2
25513: PPUSH
25514: CALL_OW 257
25518: PUSH
25519: LD_INT 1
25521: EQUAL
25522: AND
25523: PUSH
25524: LD_VAR 0 1
25528: PUSH
25529: LD_EXP 46
25533: EQUAL
25534: AND
25535: IFFALSE 25582
// begin wait ( 0 0$1 ) ;
25537: LD_INT 35
25539: PPUSH
25540: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25544: LD_ADDR_VAR 0 3
25548: PUSH
25549: LD_INT 1
25551: PPUSH
25552: LD_INT 100
25554: PPUSH
25555: CALL_OW 12
25559: ST_TO_ADDR
// if rnd > 50 then
25560: LD_VAR 0 3
25564: PUSH
25565: LD_INT 50
25567: GREATER
25568: IFFALSE 25582
// SetClass ( human , class_mortar ) ;
25570: LD_VAR 0 2
25574: PPUSH
25575: LD_INT 8
25577: PPUSH
25578: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25582: LD_VAR 0 2
25586: PUSH
25587: LD_INT 22
25589: PUSH
25590: LD_INT 2
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 25
25599: PUSH
25600: LD_INT 12
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PPUSH
25611: CALL_OW 69
25615: IN
25616: IFFALSE 25666
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25618: LD_VAR 0 1
25622: PPUSH
25623: CALL_OW 266
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: IN
25638: IFFALSE 25654
// SetClass ( human , class_apeman_engineer ) else
25640: LD_VAR 0 2
25644: PPUSH
25645: LD_INT 16
25647: PPUSH
25648: CALL_OW 336
25652: GO 25666
// SetClass ( human , class_apeman_soldier ) ;
25654: LD_VAR 0 2
25658: PPUSH
25659: LD_INT 15
25661: PPUSH
25662: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25666: LD_VAR 0 2
25670: PPUSH
25671: CALL_OW 255
25675: PUSH
25676: LD_INT 3
25678: EQUAL
25679: PUSH
25680: LD_VAR 0 2
25684: PPUSH
25685: CALL_OW 257
25689: PUSH
25690: LD_INT 1
25692: EQUAL
25693: AND
25694: PUSH
25695: LD_VAR 0 1
25699: PUSH
25700: LD_EXP 34
25704: EQUAL
25705: PUSH
25706: LD_VAR 0 1
25710: PUSH
25711: LD_EXP 35
25715: EQUAL
25716: OR
25717: PUSH
25718: EMPTY
25719: LIST
25720: AND
25721: IFFALSE 25742
// begin wait ( 0 0$1 ) ;
25723: LD_INT 35
25725: PPUSH
25726: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25730: LD_VAR 0 2
25734: PPUSH
25735: LD_INT 9
25737: PPUSH
25738: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25742: LD_VAR 0 2
25746: PPUSH
25747: CALL_OW 255
25751: PUSH
25752: LD_INT 3
25754: EQUAL
25755: PUSH
25756: LD_VAR 0 2
25760: PPUSH
25761: CALL_OW 257
25765: PUSH
25766: LD_INT 9
25768: EQUAL
25769: AND
25770: PUSH
25771: LD_VAR 0 1
25775: PPUSH
25776: CALL_OW 266
25780: PUSH
25781: LD_INT 32
25783: EQUAL
25784: AND
25785: IFFALSE 25806
// begin wait ( 0 0$1 ) ;
25787: LD_INT 35
25789: PPUSH
25790: CALL_OW 67
// SetClass ( human , 1 ) ;
25794: LD_VAR 0 2
25798: PPUSH
25799: LD_INT 1
25801: PPUSH
25802: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25806: LD_VAR 0 2
25810: PPUSH
25811: CALL_OW 255
25815: PUSH
25816: LD_INT 3
25818: EQUAL
25819: PUSH
25820: LD_VAR 0 2
25824: PPUSH
25825: CALL_OW 257
25829: PUSH
25830: LD_INT 3
25832: EQUAL
25833: AND
25834: PUSH
25835: LD_VAR 0 1
25839: PUSH
25840: LD_EXP 36
25844: EQUAL
25845: AND
25846: IFFALSE 25860
// SetLives ( human , 1000 ) ;
25848: LD_VAR 0 2
25852: PPUSH
25853: LD_INT 1000
25855: PPUSH
25856: CALL_OW 234
// end ;
25860: PPOPN 3
25862: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25863: LD_VAR 0 1
25867: PUSH
25868: LD_INT 1
25870: EQUAL
25871: PUSH
25872: LD_VAR 0 2
25876: PUSH
25877: LD_INT 2
25879: EQUAL
25880: AND
25881: PUSH
25882: LD_INT 1
25884: PPUSH
25885: LD_INT 2
25887: PPUSH
25888: CALL_OW 81
25892: PUSH
25893: LD_INT 1
25895: EQUAL
25896: AND
25897: IFFALSE 25918
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25899: LD_EXP 25
25903: PPUSH
25904: LD_STRING D6b-Pow-1
25906: PPUSH
25907: CALL_OW 94
// YouLost ( Powell ) ;
25911: LD_STRING Powell
25913: PPUSH
25914: CALL_OW 104
// end ; end ;
25918: PPOPN 2
25920: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25921: LD_INT 23
25923: PPUSH
25924: LD_INT 22
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 21
25936: PUSH
25937: LD_INT 3
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PPUSH
25948: CALL_OW 70
25952: PUSH
25953: LD_INT 23
25955: PPUSH
25956: LD_INT 22
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 21
25968: PUSH
25969: LD_INT 2
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PPUSH
25980: CALL_OW 70
25984: OR
25985: PUSH
25986: LD_INT 1
25988: PPUSH
25989: LD_INT 2
25991: PPUSH
25992: CALL_OW 81
25996: PUSH
25997: LD_INT 1
25999: EQUAL
26000: AND
26001: IFFALSE 26134
26003: GO 26005
26005: DISABLE
// begin enable ;
26006: ENABLE
// wait ( 0 0$10 ) ;
26007: LD_INT 350
26009: PPUSH
26010: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26014: LD_INT 23
26016: PPUSH
26017: LD_INT 22
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 21
26029: PUSH
26030: LD_INT 3
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PPUSH
26041: CALL_OW 70
26045: PUSH
26046: LD_INT 23
26048: PPUSH
26049: LD_INT 22
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 21
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PPUSH
26073: CALL_OW 70
26077: OR
26078: PUSH
26079: LD_INT 1
26081: PPUSH
26082: LD_INT 2
26084: PPUSH
26085: CALL_OW 81
26089: PUSH
26090: LD_INT 1
26092: EQUAL
26093: AND
26094: IFFALSE 26134
// begin disable ;
26096: DISABLE
// InGameOn ;
26097: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26101: LD_INT 73
26103: PPUSH
26104: LD_INT 18
26106: PPUSH
26107: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26111: LD_EXP 25
26115: PPUSH
26116: LD_STRING D6b-Pow-1
26118: PPUSH
26119: CALL_OW 94
// YouLost ( Powell ) ;
26123: LD_STRING Powell
26125: PPUSH
26126: CALL_OW 104
// InGameOff ;
26130: CALL_OW 9
// end ; end ;
26134: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
26135: LD_VAR 0 1
26139: PPUSH
26140: CALL 45642 0 1
// if unit = Truman then
26144: LD_VAR 0 1
26148: PUSH
26149: LD_EXP 20
26153: EQUAL
26154: IFFALSE 26163
// YouLost ( Powell ) ;
26156: LD_STRING Powell
26158: PPUSH
26159: CALL_OW 104
// if unit = JMM then
26163: LD_VAR 0 1
26167: PUSH
26168: LD_EXP 1
26172: EQUAL
26173: IFFALSE 26182
// YouLost ( JMM ) ;
26175: LD_STRING JMM
26177: PPUSH
26178: CALL_OW 104
// if unit = Khatam then
26182: LD_VAR 0 1
26186: PUSH
26187: LD_EXP 14
26191: EQUAL
26192: IFFALSE 26202
// KhatamStatus = 0 ;
26194: LD_ADDR_EXP 54
26198: PUSH
26199: LD_INT 0
26201: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
26202: LD_VAR 0 1
26206: PPUSH
26207: CALL_OW 255
26211: PUSH
26212: LD_INT 3
26214: EQUAL
26215: PUSH
26216: LD_VAR 0 1
26220: PPUSH
26221: CALL_OW 247
26225: PUSH
26226: LD_INT 3
26228: EQUAL
26229: AND
26230: IFFALSE 26922
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
26232: LD_VAR 0 1
26236: PPUSH
26237: CALL_OW 266
26241: PUSH
26242: LD_INT 31
26244: EQUAL
26245: PUSH
26246: LD_VAR 0 1
26250: PPUSH
26251: CALL_OW 266
26255: PUSH
26256: LD_INT 32
26258: EQUAL
26259: OR
26260: PUSH
26261: LD_VAR 0 1
26265: PPUSH
26266: CALL_OW 266
26270: PUSH
26271: LD_INT 36
26273: EQUAL
26274: OR
26275: PUSH
26276: LD_VAR 0 1
26280: PPUSH
26281: CALL_OW 266
26285: PUSH
26286: LD_INT 0
26288: EQUAL
26289: OR
26290: PUSH
26291: LD_VAR 0 1
26295: PPUSH
26296: CALL_OW 266
26300: PUSH
26301: LD_INT 24
26303: EQUAL
26304: OR
26305: PUSH
26306: LD_VAR 0 1
26310: PPUSH
26311: CALL_OW 266
26315: PUSH
26316: LD_INT 17
26318: EQUAL
26319: OR
26320: PUSH
26321: LD_VAR 0 1
26325: PPUSH
26326: CALL_OW 266
26330: PUSH
26331: LD_INT 25
26333: EQUAL
26334: OR
26335: PUSH
26336: LD_VAR 0 1
26340: PPUSH
26341: CALL_OW 266
26345: PUSH
26346: LD_INT 19
26348: EQUAL
26349: OR
26350: PUSH
26351: LD_VAR 0 1
26355: PPUSH
26356: CALL_OW 266
26360: PUSH
26361: LD_INT 20
26363: EQUAL
26364: OR
26365: PUSH
26366: LD_VAR 0 1
26370: PPUSH
26371: CALL_OW 266
26375: PUSH
26376: LD_INT 18
26378: EQUAL
26379: OR
26380: PUSH
26381: LD_VAR 0 1
26385: PPUSH
26386: CALL_OW 266
26390: PUSH
26391: LD_INT 21
26393: EQUAL
26394: OR
26395: PUSH
26396: LD_VAR 0 1
26400: PPUSH
26401: CALL_OW 266
26405: PUSH
26406: LD_INT 23
26408: EQUAL
26409: OR
26410: PUSH
26411: LD_VAR 0 1
26415: PPUSH
26416: CALL_OW 266
26420: PUSH
26421: LD_INT 16
26423: EQUAL
26424: OR
26425: PUSH
26426: LD_VAR 0 1
26430: PPUSH
26431: CALL_OW 266
26435: PUSH
26436: LD_INT 6
26438: EQUAL
26439: OR
26440: PUSH
26441: LD_VAR 0 1
26445: PPUSH
26446: CALL_OW 266
26450: PUSH
26451: LD_INT 29
26453: EQUAL
26454: OR
26455: PUSH
26456: LD_VAR 0 1
26460: PPUSH
26461: CALL_OW 266
26465: PUSH
26466: LD_INT 26
26468: EQUAL
26469: OR
26470: PUSH
26471: LD_VAR 0 1
26475: PPUSH
26476: CALL_OW 266
26480: PUSH
26481: LD_INT 30
26483: EQUAL
26484: OR
26485: PUSH
26486: LD_VAR 0 1
26490: PPUSH
26491: CALL_OW 266
26495: PUSH
26496: LD_INT 28
26498: EQUAL
26499: OR
26500: PUSH
26501: LD_VAR 0 1
26505: PPUSH
26506: CALL_OW 266
26510: PUSH
26511: LD_INT 27
26513: EQUAL
26514: OR
26515: PUSH
26516: LD_VAR 0 1
26520: PPUSH
26521: CALL_OW 266
26525: PUSH
26526: LD_INT 33
26528: EQUAL
26529: OR
26530: PUSH
26531: LD_VAR 0 1
26535: PPUSH
26536: CALL_OW 266
26540: PUSH
26541: LD_INT 2
26543: EQUAL
26544: OR
26545: PUSH
26546: LD_VAR 0 1
26550: PPUSH
26551: CALL_OW 266
26555: PUSH
26556: LD_INT 4
26558: EQUAL
26559: OR
26560: IFFALSE 26646
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26562: LD_ADDR_EXP 43
26566: PUSH
26567: LD_EXP 43
26571: PUSH
26572: LD_VAR 0 1
26576: PPUSH
26577: CALL_OW 266
26581: ADD
26582: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26583: LD_ADDR_EXP 43
26587: PUSH
26588: LD_EXP 43
26592: PUSH
26593: LD_VAR 0 1
26597: PPUSH
26598: CALL_OW 250
26602: ADD
26603: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26604: LD_ADDR_EXP 43
26608: PUSH
26609: LD_EXP 43
26613: PUSH
26614: LD_VAR 0 1
26618: PPUSH
26619: CALL_OW 251
26623: ADD
26624: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26625: LD_ADDR_EXP 43
26629: PUSH
26630: LD_EXP 43
26634: PUSH
26635: LD_VAR 0 1
26639: PPUSH
26640: CALL_OW 254
26644: ADD
26645: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26646: LD_VAR 0 1
26650: PPUSH
26651: CALL_OW 266
26655: PUSH
26656: LD_INT 1
26658: EQUAL
26659: IFFALSE 26738
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26661: LD_ADDR_EXP 43
26665: PUSH
26666: LD_EXP 43
26670: PUSH
26671: LD_INT 0
26673: ADD
26674: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26675: LD_ADDR_EXP 43
26679: PUSH
26680: LD_EXP 43
26684: PUSH
26685: LD_VAR 0 1
26689: PPUSH
26690: CALL_OW 250
26694: ADD
26695: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26696: LD_ADDR_EXP 43
26700: PUSH
26701: LD_EXP 43
26705: PUSH
26706: LD_VAR 0 1
26710: PPUSH
26711: CALL_OW 251
26715: ADD
26716: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26717: LD_ADDR_EXP 43
26721: PUSH
26722: LD_EXP 43
26726: PUSH
26727: LD_VAR 0 1
26731: PPUSH
26732: CALL_OW 254
26736: ADD
26737: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26738: LD_VAR 0 1
26742: PPUSH
26743: CALL_OW 266
26747: PUSH
26748: LD_INT 3
26750: EQUAL
26751: IFFALSE 26830
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26753: LD_ADDR_EXP 43
26757: PUSH
26758: LD_EXP 43
26762: PUSH
26763: LD_INT 2
26765: ADD
26766: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26767: LD_ADDR_EXP 43
26771: PUSH
26772: LD_EXP 43
26776: PUSH
26777: LD_VAR 0 1
26781: PPUSH
26782: CALL_OW 250
26786: ADD
26787: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26788: LD_ADDR_EXP 43
26792: PUSH
26793: LD_EXP 43
26797: PUSH
26798: LD_VAR 0 1
26802: PPUSH
26803: CALL_OW 251
26807: ADD
26808: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26809: LD_ADDR_EXP 43
26813: PUSH
26814: LD_EXP 43
26818: PUSH
26819: LD_VAR 0 1
26823: PPUSH
26824: CALL_OW 254
26828: ADD
26829: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26830: LD_VAR 0 1
26834: PPUSH
26835: CALL_OW 266
26839: PUSH
26840: LD_INT 5
26842: EQUAL
26843: IFFALSE 26922
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26845: LD_ADDR_EXP 43
26849: PUSH
26850: LD_EXP 43
26854: PUSH
26855: LD_INT 4
26857: ADD
26858: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26859: LD_ADDR_EXP 43
26863: PUSH
26864: LD_EXP 43
26868: PUSH
26869: LD_VAR 0 1
26873: PPUSH
26874: CALL_OW 250
26878: ADD
26879: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26880: LD_ADDR_EXP 43
26884: PUSH
26885: LD_EXP 43
26889: PUSH
26890: LD_VAR 0 1
26894: PPUSH
26895: CALL_OW 251
26899: ADD
26900: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26901: LD_ADDR_EXP 43
26905: PUSH
26906: LD_EXP 43
26910: PUSH
26911: LD_VAR 0 1
26915: PPUSH
26916: CALL_OW 254
26920: ADD
26921: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26922: LD_EXP 52
26926: PUSH
26927: LD_VAR 0 1
26931: PPUSH
26932: CALL_OW 257
26936: PUSH
26937: LD_INT 3
26939: EQUAL
26940: AND
26941: PUSH
26942: LD_VAR 0 1
26946: PPUSH
26947: CALL_OW 255
26951: PUSH
26952: LD_INT 3
26954: EQUAL
26955: AND
26956: PUSH
26957: LD_EXP 36
26961: PPUSH
26962: CALL_OW 302
26966: AND
26967: PUSH
26968: LD_EXP 36
26972: PPUSH
26973: CALL_OW 255
26977: PUSH
26978: LD_INT 3
26980: EQUAL
26981: AND
26982: IFFALSE 27066
// begin ruMech := ruMech - 1 ;
26984: LD_ADDR_EXP 52
26988: PUSH
26989: LD_EXP 52
26993: PUSH
26994: LD_INT 1
26996: MINUS
26997: ST_TO_ADDR
// uc_side = 3 ;
26998: LD_ADDR_OWVAR 20
27002: PUSH
27003: LD_INT 3
27005: ST_TO_ADDR
// uc_nation = 3 ;
27006: LD_ADDR_OWVAR 21
27010: PUSH
27011: LD_INT 3
27013: ST_TO_ADDR
// hc_gallery :=  ;
27014: LD_ADDR_OWVAR 33
27018: PUSH
27019: LD_STRING 
27021: ST_TO_ADDR
// hc_name :=  ;
27022: LD_ADDR_OWVAR 26
27026: PUSH
27027: LD_STRING 
27029: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
27030: LD_INT 0
27032: PPUSH
27033: LD_EXP 37
27037: PPUSH
27038: LD_EXP 38
27042: PPUSH
27043: CALL_OW 12
27047: PPUSH
27048: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
27052: CALL_OW 44
27056: PPUSH
27057: LD_EXP 36
27061: PPUSH
27062: CALL_OW 52
// end ; end ;
27066: PPOPN 1
27068: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
27069: LD_VAR 0 1
27073: PPUSH
27074: LD_VAR 0 2
27078: PPUSH
27079: CALL 45762 0 2
// end ;
27083: PPOPN 2
27085: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
27086: LD_ADDR_OWVAR 57
27090: PUSH
27091: LD_INT 0
27093: ST_TO_ADDR
// fastEnd = 1 ;
27094: LD_ADDR_EXP 64
27098: PUSH
27099: LD_INT 1
27101: ST_TO_ADDR
// FinishMission ;
27102: CALL 28270 0 0
// end ;
27106: PPOPN 1
27108: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
27109: LD_VAR 0 1
27113: PPUSH
27114: CALL 45746 0 1
// end ; end_of_file
27118: PPOPN 1
27120: END
// export function CreateNature ; var i , un ; begin
27121: LD_INT 0
27123: PPUSH
27124: PPUSH
27125: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
27126: LD_ADDR_VAR 0 2
27130: PUSH
27131: DOUBLE
27132: LD_INT 1
27134: DEC
27135: ST_TO_ADDR
27136: LD_OWVAR 67
27140: PUSH
27141: LD_INT 1
27143: PPUSH
27144: LD_INT 5
27146: PPUSH
27147: CALL_OW 12
27151: PLUS
27152: PUSH
27153: FOR_TO
27154: IFFALSE 27299
// begin hc_sex = sex_male ;
27156: LD_ADDR_OWVAR 27
27160: PUSH
27161: LD_INT 1
27163: ST_TO_ADDR
// uc_side = 0 ;
27164: LD_ADDR_OWVAR 20
27168: PUSH
27169: LD_INT 0
27171: ST_TO_ADDR
// uc_nation = nation_nature ;
27172: LD_ADDR_OWVAR 21
27176: PUSH
27177: LD_INT 0
27179: ST_TO_ADDR
// hc_class = class_apeman ;
27180: LD_ADDR_OWVAR 28
27184: PUSH
27185: LD_INT 12
27187: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
27188: LD_ADDR_OWVAR 31
27192: PUSH
27193: LD_INT 2
27195: PPUSH
27196: LD_INT 7
27198: PPUSH
27199: CALL_OW 12
27203: PUSH
27204: LD_OWVAR 67
27208: PLUS
27209: PUSH
27210: LD_INT 2
27212: PPUSH
27213: LD_INT 10
27215: PPUSH
27216: CALL_OW 12
27220: PUSH
27221: LD_INT 2
27223: PPUSH
27224: LD_INT 10
27226: PPUSH
27227: CALL_OW 12
27231: PUSH
27232: LD_INT 2
27234: PPUSH
27235: LD_INT 10
27237: PPUSH
27238: CALL_OW 12
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27249: LD_ADDR_OWVAR 35
27253: PUSH
27254: LD_INT 5
27256: NEG
27257: PPUSH
27258: LD_INT 5
27260: PPUSH
27261: CALL_OW 12
27265: PUSH
27266: LD_OWVAR 67
27270: MUL
27271: ST_TO_ADDR
// un = CreateHuman ;
27272: LD_ADDR_VAR 0 3
27276: PUSH
27277: CALL_OW 44
27281: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
27282: LD_VAR 0 3
27286: PPUSH
27287: LD_INT 5
27289: PPUSH
27290: LD_INT 0
27292: PPUSH
27293: CALL_OW 49
// end ;
27297: GO 27153
27299: POP
27300: POP
// for i = 1 to Difficulty + 2 do
27301: LD_ADDR_VAR 0 2
27305: PUSH
27306: DOUBLE
27307: LD_INT 1
27309: DEC
27310: ST_TO_ADDR
27311: LD_OWVAR 67
27315: PUSH
27316: LD_INT 2
27318: PLUS
27319: PUSH
27320: FOR_TO
27321: IFFALSE 27430
// begin hc_sex = sex_male ;
27323: LD_ADDR_OWVAR 27
27327: PUSH
27328: LD_INT 1
27330: ST_TO_ADDR
// uc_side = 0 ;
27331: LD_ADDR_OWVAR 20
27335: PUSH
27336: LD_INT 0
27338: ST_TO_ADDR
// uc_nation = nation_nature ;
27339: LD_ADDR_OWVAR 21
27343: PUSH
27344: LD_INT 0
27346: ST_TO_ADDR
// hc_class = class_tiger ;
27347: LD_ADDR_OWVAR 28
27351: PUSH
27352: LD_INT 14
27354: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27355: LD_ADDR_OWVAR 31
27359: PUSH
27360: LD_EXP 38
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: LD_INT 0
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27380: LD_ADDR_OWVAR 35
27384: PUSH
27385: LD_INT 5
27387: NEG
27388: PPUSH
27389: LD_INT 5
27391: PPUSH
27392: CALL_OW 12
27396: PUSH
27397: LD_OWVAR 67
27401: MUL
27402: ST_TO_ADDR
// un = CreateHuman ;
27403: LD_ADDR_VAR 0 3
27407: PUSH
27408: CALL_OW 44
27412: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27413: LD_VAR 0 3
27417: PPUSH
27418: LD_INT 6
27420: PPUSH
27421: LD_INT 0
27423: PPUSH
27424: CALL_OW 49
// end ;
27428: GO 27320
27430: POP
27431: POP
// for i = 1 to rand ( 3 , 4 ) do
27432: LD_ADDR_VAR 0 2
27436: PUSH
27437: DOUBLE
27438: LD_INT 1
27440: DEC
27441: ST_TO_ADDR
27442: LD_INT 3
27444: PPUSH
27445: LD_INT 4
27447: PPUSH
27448: CALL_OW 12
27452: PUSH
27453: FOR_TO
27454: IFFALSE 27548
// begin hc_sex = sex_male ;
27456: LD_ADDR_OWVAR 27
27460: PUSH
27461: LD_INT 1
27463: ST_TO_ADDR
// uc_side = 0 ;
27464: LD_ADDR_OWVAR 20
27468: PUSH
27469: LD_INT 0
27471: ST_TO_ADDR
// uc_nation = nation_nature ;
27472: LD_ADDR_OWVAR 21
27476: PUSH
27477: LD_INT 0
27479: ST_TO_ADDR
// hc_class = 18 ;
27480: LD_ADDR_OWVAR 28
27484: PUSH
27485: LD_INT 18
27487: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27488: LD_ADDR_OWVAR 31
27492: PUSH
27493: LD_EXP 38
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: ST_TO_ADDR
// hc_agressivity = 0 ;
27513: LD_ADDR_OWVAR 35
27517: PUSH
27518: LD_INT 0
27520: ST_TO_ADDR
// un = CreateHuman ;
27521: LD_ADDR_VAR 0 3
27525: PUSH
27526: CALL_OW 44
27530: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27531: LD_VAR 0 3
27535: PPUSH
27536: LD_INT 6
27538: PPUSH
27539: LD_INT 0
27541: PPUSH
27542: CALL_OW 49
// end ;
27546: GO 27453
27548: POP
27549: POP
// end ; end_of_file
27550: LD_VAR 0 1
27554: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27555: LD_EXP 47
27559: PUSH
27560: LD_INT 1
27562: EQUAL
27563: IFFALSE 27651
27565: GO 27567
27567: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27568: LD_INT 7
27570: PPUSH
27571: LD_INT 5
27573: PPUSH
27574: LD_INT 4
27576: PUSH
27577: LD_INT 5
27579: PUSH
27580: LD_INT 6
27582: PUSH
27583: LD_INT 6
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: PUSH
27592: LD_OWVAR 67
27596: ARRAY
27597: PPUSH
27598: LD_EXP 37
27602: PPUSH
27603: LD_EXP 38
27607: PPUSH
27608: CALL_OW 12
27612: PPUSH
27613: LD_INT 2
27615: PPUSH
27616: LD_INT 1
27618: PPUSH
27619: LD_INT 1
27621: PPUSH
27622: EMPTY
27623: PPUSH
27624: LD_INT 25
27626: PUSH
27627: LD_INT 26
27629: PUSH
27630: LD_INT 27
27632: PUSH
27633: LD_INT 28
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: PPUSH
27642: EMPTY
27643: PPUSH
27644: LD_INT 1
27646: PPUSH
27647: CALL 17521 0 11
27651: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27652: LD_EXP 47
27656: PUSH
27657: LD_INT 1
27659: EQUAL
27660: IFFALSE 27752
27662: GO 27664
27664: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27665: LD_INT 5
27667: PPUSH
27668: LD_INT 2
27670: PPUSH
27671: LD_INT 5
27673: PUSH
27674: LD_INT 6
27676: PUSH
27677: LD_INT 8
27679: PUSH
27680: LD_INT 9
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: PUSH
27689: LD_OWVAR 67
27693: ARRAY
27694: PPUSH
27695: LD_INT 0
27697: PPUSH
27698: LD_INT 0
27700: PPUSH
27701: LD_INT 2
27703: PUSH
27704: LD_INT 4
27706: PUSH
27707: LD_INT 5
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: LIST
27714: PUSH
27715: LD_OWVAR 67
27719: ARRAY
27720: PPUSH
27721: LD_INT 0
27723: PPUSH
27724: LD_EXP 37
27728: PPUSH
27729: LD_EXP 38
27733: PPUSH
27734: CALL_OW 12
27738: PPUSH
27739: LD_INT 7
27741: PPUSH
27742: LD_INT 9
27744: PPUSH
27745: LD_INT 1
27747: PPUSH
27748: CALL 19225 0 11
27752: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27753: LD_EXP 47
27757: PUSH
27758: LD_INT 1
27760: EQUAL
27761: IFFALSE 27770
27763: GO 27765
27765: DISABLE
// PrepareArabianSheik ;
27766: CALL 4841 0 0
27770: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27771: LD_EXP 30
27775: PUSH
27776: LD_EXP 65
27780: PUSH
27781: LD_INT 1
27783: EQUAL
27784: AND
27785: IFFALSE 27854
27787: GO 27789
27789: DISABLE
// begin enable ;
27790: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27791: LD_INT 6
27793: PPUSH
27794: LD_INT 3
27796: PPUSH
27797: LD_EXP 61
27801: PPUSH
27802: LD_INT 0
27804: PPUSH
27805: LD_OWVAR 67
27809: PPUSH
27810: LD_INT 0
27812: PPUSH
27813: LD_EXP 61
27817: PUSH
27818: LD_INT 3
27820: DIV
27821: PUSH
27822: LD_INT 1
27824: PLUS
27825: PPUSH
27826: LD_EXP 37
27830: PPUSH
27831: LD_EXP 38
27835: PPUSH
27836: CALL_OW 12
27840: PPUSH
27841: LD_INT 17
27843: PPUSH
27844: LD_INT 18
27846: PPUSH
27847: LD_INT 1
27849: PPUSH
27850: CALL 19225 0 11
// end ;
27854: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27855: LD_EXP 30
27859: PUSH
27860: LD_EXP 65
27864: PUSH
27865: LD_INT 1
27867: EQUAL
27868: AND
27869: IFFALSE 27946
27871: GO 27873
27873: DISABLE
// begin enable ;
27874: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27875: LD_INT 17
27877: PPUSH
27878: LD_INT 6
27880: PPUSH
27881: LD_EXP 60
27885: PPUSH
27886: LD_EXP 37
27890: PPUSH
27891: LD_EXP 38
27895: PPUSH
27896: CALL_OW 12
27900: PPUSH
27901: LD_INT 3
27903: PPUSH
27904: LD_INT 1
27906: PPUSH
27907: LD_INT 3
27909: PUSH
27910: LD_INT 3
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PPUSH
27917: LD_INT 43
27919: PUSH
27920: LD_INT 44
27922: PUSH
27923: LD_INT 45
27925: PUSH
27926: LD_INT 46
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: PPUSH
27935: EMPTY
27936: PPUSH
27937: EMPTY
27938: PPUSH
27939: LD_INT 1
27941: PPUSH
27942: CALL 17521 0 11
// end ;
27946: END
// every 10 10$00 trigger joinEpsilon do
27947: LD_EXP 30
27951: IFFALSE 28005
27953: GO 27955
27955: DISABLE
// begin enable ;
27956: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27957: LD_ADDR_EXP 60
27961: PUSH
27962: LD_EXP 60
27966: PUSH
27967: LD_INT 1
27969: PPUSH
27970: LD_OWVAR 67
27974: PPUSH
27975: CALL_OW 12
27979: PLUS
27980: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27981: LD_ADDR_EXP 61
27985: PUSH
27986: LD_EXP 61
27990: PUSH
27991: LD_INT 1
27993: PPUSH
27994: LD_OWVAR 67
27998: PPUSH
27999: CALL_OW 12
28003: PLUS
28004: ST_TO_ADDR
// end ;
28005: END
// every 21 21$0 trigger attackAvalaible = 1 do
28006: LD_EXP 65
28010: PUSH
28011: LD_INT 1
28013: EQUAL
28014: IFFALSE 28027
28016: GO 28018
28018: DISABLE
// attackAvalaible = 0 ; end_of_file
28019: LD_ADDR_EXP 65
28023: PUSH
28024: LD_INT 0
28026: ST_TO_ADDR
28027: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
28028: LD_INT 54
28030: PPUSH
28031: LD_INT 1
28033: PPUSH
28034: CALL_OW 321
28038: PUSH
28039: LD_INT 2
28041: EQUAL
28042: PUSH
28043: LD_INT 55
28045: PPUSH
28046: LD_INT 1
28048: PPUSH
28049: CALL_OW 321
28053: PUSH
28054: LD_INT 2
28056: EQUAL
28057: AND
28058: PUSH
28059: LD_INT 21
28061: PPUSH
28062: LD_INT 1
28064: PPUSH
28065: CALL_OW 321
28069: PUSH
28070: LD_INT 2
28072: EQUAL
28073: AND
28074: PUSH
28075: LD_INT 22
28077: PPUSH
28078: LD_INT 1
28080: PPUSH
28081: CALL_OW 321
28085: PUSH
28086: LD_INT 2
28088: EQUAL
28089: AND
28090: PUSH
28091: LD_INT 12
28093: PPUSH
28094: LD_INT 1
28096: PPUSH
28097: CALL_OW 321
28101: PUSH
28102: LD_INT 1
28104: EQUAL
28105: PUSH
28106: LD_INT 32
28108: PPUSH
28109: LD_INT 1
28111: PPUSH
28112: CALL_OW 321
28116: PUSH
28117: LD_INT 1
28119: EQUAL
28120: OR
28121: PUSH
28122: EMPTY
28123: LIST
28124: AND
28125: PUSH
28126: LD_EXP 49
28130: PUSH
28131: LD_INT 1
28133: EQUAL
28134: AND
28135: PUSH
28136: LD_INT 22
28138: PUSH
28139: LD_INT 3
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 21
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PPUSH
28160: CALL_OW 69
28164: PUSH
28165: LD_INT 0
28167: EQUAL
28168: AND
28169: IFFALSE 28225
28171: GO 28173
28173: DISABLE
// begin case query ( QEndMission ) of 1 :
28174: LD_STRING QEndMission
28176: PPUSH
28177: CALL_OW 97
28181: PUSH
28182: LD_INT 1
28184: DOUBLE
28185: EQUAL
28186: IFTRUE 28190
28188: GO 28201
28190: POP
// begin end_the_mission_allowed = true ;
28191: LD_ADDR_OWVAR 57
28195: PUSH
28196: LD_INT 1
28198: ST_TO_ADDR
// end ; 2 :
28199: GO 28225
28201: LD_INT 2
28203: DOUBLE
28204: EQUAL
28205: IFTRUE 28209
28207: GO 28224
28209: POP
// begin fastEnd = 1 ;
28210: LD_ADDR_EXP 64
28214: PUSH
28215: LD_INT 1
28217: ST_TO_ADDR
// FinishMission ;
28218: CALL 28270 0 0
// end ; end ;
28222: GO 28225
28224: POP
// end ;
28225: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
28226: LD_EXP 59
28230: PUSH
28231: LD_EXP 58
28235: NOT
28236: AND
28237: PUSH
28238: LD_INT 22
28240: PUSH
28241: LD_INT 3
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PPUSH
28248: CALL_OW 69
28252: PUSH
28253: LD_INT 0
28255: EQUAL
28256: AND
28257: IFFALSE 28269
28259: GO 28261
28261: DISABLE
// SetAchievement ( ACH_TACT ) ;
28262: LD_STRING ACH_TACT
28264: PPUSH
28265: CALL_OW 543
28269: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
28270: LD_INT 0
28272: PPUSH
28273: PPUSH
28274: PPUSH
28275: PPUSH
// if not snipersTrained then
28276: LD_EXP 63
28280: NOT
28281: IFFALSE 28290
// SetAchievement ( ACH_SNIPER ) ;
28283: LD_STRING ACH_SNIPER
28285: PPUSH
28286: CALL_OW 543
// m1 := false ;
28290: LD_ADDR_VAR 0 2
28294: PUSH
28295: LD_INT 0
28297: ST_TO_ADDR
// m2 := false ;
28298: LD_ADDR_VAR 0 3
28302: PUSH
28303: LD_INT 0
28305: ST_TO_ADDR
// m3 := false ;
28306: LD_ADDR_VAR 0 4
28310: PUSH
28311: LD_INT 0
28313: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
28314: LD_EXP 54
28318: PPUSH
28319: LD_STRING 10_KhatamStatus_1
28321: PPUSH
28322: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
28326: LD_EXP 53
28330: PPUSH
28331: LD_STRING 10_GensherEscape_1
28333: PPUSH
28334: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
28338: LD_INT 12
28340: PPUSH
28341: LD_INT 1
28343: PPUSH
28344: CALL_OW 321
28348: PUSH
28349: LD_INT 2
28351: EQUAL
28352: IFFALSE 28374
// begin AddMedal ( sights , 1 ) ;
28354: LD_STRING sights
28356: PPUSH
28357: LD_INT 1
28359: PPUSH
28360: CALL_OW 101
// m1 := true ;
28364: LD_ADDR_VAR 0 2
28368: PUSH
28369: LD_INT 1
28371: ST_TO_ADDR
// end else
28372: GO 28385
// begin AddMedal ( sights , - 1 ) ;
28374: LD_STRING sights
28376: PPUSH
28377: LD_INT 1
28379: NEG
28380: PPUSH
28381: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28385: LD_INT 32
28387: PPUSH
28388: LD_INT 1
28390: PPUSH
28391: CALL_OW 321
28395: PUSH
28396: LD_INT 2
28398: EQUAL
28399: IFFALSE 28421
// begin AddMedal ( computers , 1 ) ;
28401: LD_STRING computers
28403: PPUSH
28404: LD_INT 1
28406: PPUSH
28407: CALL_OW 101
// m2 := true ;
28411: LD_ADDR_VAR 0 3
28415: PUSH
28416: LD_INT 1
28418: ST_TO_ADDR
// end else
28419: GO 28432
// begin AddMedal ( computers , - 1 ) ;
28421: LD_STRING computers
28423: PPUSH
28424: LD_INT 1
28426: NEG
28427: PPUSH
28428: CALL_OW 101
// end ; if arabianEscape = 0 then
28432: LD_EXP 48
28436: PUSH
28437: LD_INT 0
28439: EQUAL
28440: IFFALSE 28472
// begin AddMedal ( renegades , 2 ) ;
28442: LD_STRING renegades
28444: PPUSH
28445: LD_INT 2
28447: PPUSH
28448: CALL_OW 101
// m3 := true ;
28452: LD_ADDR_VAR 0 4
28456: PUSH
28457: LD_INT 1
28459: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28460: LD_INT 0
28462: PPUSH
28463: LD_STRING 10_ScientistsEscape_1
28465: PPUSH
28466: CALL_OW 39
// end else
28470: GO 28483
// begin AddMedal ( renegades , - 1 ) ;
28472: LD_STRING renegades
28474: PPUSH
28475: LD_INT 1
28477: NEG
28478: PPUSH
28479: CALL_OW 101
// end ; SaveEpsilonBase ;
28483: CALL 29269 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28487: LD_VAR 0 2
28491: PUSH
28492: LD_VAR 0 3
28496: AND
28497: PUSH
28498: LD_VAR 0 4
28502: AND
28503: PUSH
28504: LD_OWVAR 67
28508: PUSH
28509: LD_INT 3
28511: GREATEREQUAL
28512: AND
28513: IFFALSE 28525
// SetAchievementEX ( ACH_AMER , 10 ) ;
28515: LD_STRING ACH_AMER
28517: PPUSH
28518: LD_INT 10
28520: PPUSH
28521: CALL_OW 564
// if tick <= 40 40$00 then
28525: LD_OWVAR 1
28529: PUSH
28530: LD_INT 84000
28532: LESSEQUAL
28533: IFFALSE 28549
// begin wait ( 3 ) ;
28535: LD_INT 3
28537: PPUSH
28538: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28542: LD_STRING ACH_ASPEED_10
28544: PPUSH
28545: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28549: LD_STRING Main
28551: PPUSH
28552: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28556: LD_INT 22
28558: PUSH
28559: LD_INT 1
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 23
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 21
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: LD_INT 25
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 25
28601: PUSH
28602: LD_INT 2
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 25
28611: PUSH
28612: LD_INT 3
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 25
28621: PUSH
28622: LD_INT 4
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 25
28631: PUSH
28632: LD_INT 5
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 25
28641: PUSH
28642: LD_INT 8
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: PPUSH
28664: CALL_OW 69
28668: PPUSH
28669: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28673: LD_EXP 1
28677: PPUSH
28678: LD_EXP 55
28682: PUSH
28683: LD_STRING JMM
28685: STR
28686: PPUSH
28687: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28691: LD_EXP 2
28695: PPUSH
28696: LD_EXP 55
28700: PUSH
28701: LD_STRING Brown
28703: STR
28704: PPUSH
28705: CALL 11705 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28709: LD_EXP 3
28713: PPUSH
28714: LD_EXP 55
28718: PUSH
28719: LD_STRING Donaldson
28721: STR
28722: PPUSH
28723: CALL 11705 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28727: LD_EXP 4
28731: PPUSH
28732: LD_EXP 55
28736: PUSH
28737: LD_STRING Bobby
28739: STR
28740: PPUSH
28741: CALL 11705 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28745: LD_EXP 5
28749: PPUSH
28750: LD_EXP 55
28754: PUSH
28755: LD_STRING Cyrus
28757: STR
28758: PPUSH
28759: CALL 11705 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28763: LD_EXP 6
28767: PPUSH
28768: LD_EXP 55
28772: PUSH
28773: LD_STRING Lisa
28775: STR
28776: PPUSH
28777: CALL 11705 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28781: LD_EXP 7
28785: PPUSH
28786: LD_EXP 55
28790: PUSH
28791: LD_STRING Frank
28793: STR
28794: PPUSH
28795: CALL 11705 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28799: LD_EXP 8
28803: PPUSH
28804: LD_EXP 55
28808: PUSH
28809: LD_STRING Kikuchi
28811: STR
28812: PPUSH
28813: CALL 11705 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28817: LD_EXP 9
28821: PPUSH
28822: LD_EXP 55
28826: PUSH
28827: LD_STRING Houten
28829: STR
28830: PPUSH
28831: CALL 11705 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28835: LD_EXP 10
28839: PPUSH
28840: LD_EXP 55
28844: PUSH
28845: LD_STRING Gary
28847: STR
28848: PPUSH
28849: CALL 11705 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28853: LD_EXP 19
28857: PPUSH
28858: LD_EXP 55
28862: PUSH
28863: LD_STRING Cornell
28865: STR
28866: PPUSH
28867: CALL 11705 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28871: LD_EXP 11
28875: PPUSH
28876: LD_EXP 55
28880: PUSH
28881: LD_STRING Simms
28883: STR
28884: PPUSH
28885: CALL 11705 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28889: LD_EXP 12
28893: PPUSH
28894: LD_EXP 55
28898: PUSH
28899: LD_STRING Denis
28901: STR
28902: PPUSH
28903: CALL 11705 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28907: LD_EXP 13
28911: PPUSH
28912: LD_EXP 55
28916: PUSH
28917: LD_STRING Joan
28919: STR
28920: PPUSH
28921: CALL 11705 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28925: LD_EXP 15
28929: PPUSH
28930: LD_EXP 55
28934: PUSH
28935: LD_STRING Gladstone
28937: STR
28938: PPUSH
28939: CALL 11705 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28943: LD_EXP 17
28947: PPUSH
28948: LD_EXP 55
28952: PUSH
28953: LD_STRING DeltaDoctor
28955: STR
28956: PPUSH
28957: CALL 11705 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28961: LD_EXP 23
28965: PPUSH
28966: LD_STRING 10c_lock
28968: PPUSH
28969: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28973: LD_INT 50
28975: PUSH
28976: EMPTY
28977: LIST
28978: PUSH
28979: LD_INT 22
28981: PUSH
28982: LD_INT 1
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 21
28991: PUSH
28992: LD_INT 1
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: LD_INT 25
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 25
29014: PUSH
29015: LD_INT 2
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 25
29024: PUSH
29025: LD_INT 3
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 25
29034: PUSH
29035: LD_INT 4
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 25
29044: PUSH
29045: LD_INT 5
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 25
29054: PUSH
29055: LD_INT 8
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: PPUSH
29077: CALL_OW 69
29081: PUSH
29082: LD_EXP 1
29086: PUSH
29087: LD_EXP 2
29091: PUSH
29092: LD_EXP 3
29096: PUSH
29097: LD_EXP 4
29101: PUSH
29102: LD_EXP 5
29106: PUSH
29107: LD_EXP 6
29111: PUSH
29112: LD_EXP 7
29116: PUSH
29117: LD_EXP 15
29121: PUSH
29122: LD_EXP 8
29126: PUSH
29127: LD_EXP 12
29131: PUSH
29132: LD_EXP 13
29136: PUSH
29137: LD_EXP 9
29141: PUSH
29142: LD_EXP 11
29146: PUSH
29147: LD_EXP 10
29151: PUSH
29152: LD_EXP 17
29156: PUSH
29157: LD_EXP 19
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: DIFF
29180: PPUSH
29181: LD_STRING 10_other_survivors
29183: PPUSH
29184: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
29188: LD_INT 50
29190: PUSH
29191: EMPTY
29192: LIST
29193: PUSH
29194: LD_INT 22
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 21
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 2
29216: PUSH
29217: LD_INT 25
29219: PUSH
29220: LD_INT 16
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 25
29229: PUSH
29230: LD_INT 12
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: LIST
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: PPUSH
29248: CALL_OW 69
29252: PPUSH
29253: LD_STRING 10_ape
29255: PPUSH
29256: CALL_OW 38
// YouWin ;
29260: CALL_OW 103
// end ;
29264: LD_VAR 0 1
29268: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
29269: LD_INT 0
29271: PPUSH
29272: PPUSH
29273: PPUSH
29274: PPUSH
// epsilonBase = [ ] ;
29275: LD_ADDR_VAR 0 2
29279: PUSH
29280: EMPTY
29281: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
29282: LD_ADDR_VAR 0 3
29286: PUSH
29287: LD_INT 22
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 21
29299: PUSH
29300: LD_INT 3
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 50
29309: PUSH
29310: EMPTY
29311: LIST
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: LIST
29317: PPUSH
29318: CALL_OW 69
29322: ST_TO_ADDR
// for i in buildings do
29323: LD_ADDR_VAR 0 4
29327: PUSH
29328: LD_VAR 0 3
29332: PUSH
29333: FOR_IN
29334: IFFALSE 29786
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
29336: LD_VAR 0 4
29340: PPUSH
29341: CALL_OW 266
29345: PUSH
29346: LD_INT 6
29348: PUSH
29349: LD_INT 7
29351: PUSH
29352: LD_INT 8
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: IN
29360: IFFALSE 29474
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29362: LD_ADDR_VAR 0 2
29366: PUSH
29367: LD_VAR 0 2
29371: PUSH
29372: LD_VAR 0 4
29376: PPUSH
29377: CALL_OW 266
29381: PUSH
29382: LD_VAR 0 4
29386: PPUSH
29387: CALL_OW 250
29391: PUSH
29392: LD_VAR 0 4
29396: PPUSH
29397: CALL_OW 251
29401: PUSH
29402: LD_VAR 0 4
29406: PPUSH
29407: CALL_OW 254
29411: PUSH
29412: LD_VAR 0 4
29416: PPUSH
29417: CALL_OW 267
29421: PUSH
29422: LD_VAR 0 4
29426: PPUSH
29427: CALL_OW 248
29431: PUSH
29432: LD_VAR 0 4
29436: PPUSH
29437: LD_INT 1
29439: PPUSH
29440: CALL_OW 268
29444: PUSH
29445: LD_VAR 0 4
29449: PPUSH
29450: LD_INT 2
29452: PPUSH
29453: CALL_OW 268
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: PUSH
29468: EMPTY
29469: LIST
29470: ADD
29471: ST_TO_ADDR
29472: GO 29784
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29474: LD_VAR 0 4
29478: PPUSH
29479: CALL_OW 266
29483: PUSH
29484: LD_INT 32
29486: EQUAL
29487: PUSH
29488: LD_VAR 0 4
29492: PPUSH
29493: CALL_OW 266
29497: PUSH
29498: LD_INT 33
29500: EQUAL
29501: OR
29502: IFFALSE 29599
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29504: LD_ADDR_VAR 0 2
29508: PUSH
29509: LD_VAR 0 2
29513: PUSH
29514: LD_VAR 0 4
29518: PPUSH
29519: CALL_OW 266
29523: PUSH
29524: LD_VAR 0 4
29528: PPUSH
29529: CALL_OW 250
29533: PUSH
29534: LD_VAR 0 4
29538: PPUSH
29539: CALL_OW 251
29543: PUSH
29544: LD_VAR 0 4
29548: PPUSH
29549: CALL_OW 254
29553: PUSH
29554: LD_VAR 0 4
29558: PPUSH
29559: CALL_OW 267
29563: PUSH
29564: LD_VAR 0 4
29568: PPUSH
29569: CALL_OW 248
29573: PUSH
29574: LD_VAR 0 4
29578: PPUSH
29579: CALL_OW 269
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: PUSH
29593: EMPTY
29594: LIST
29595: ADD
29596: ST_TO_ADDR
29597: GO 29784
// if GetBType ( i ) = b_factory then
29599: LD_VAR 0 4
29603: PPUSH
29604: CALL_OW 266
29608: PUSH
29609: LD_INT 3
29611: EQUAL
29612: IFFALSE 29702
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29614: LD_ADDR_VAR 0 2
29618: PUSH
29619: LD_VAR 0 2
29623: PPUSH
29624: LD_INT 1
29626: PPUSH
29627: LD_VAR 0 4
29631: PPUSH
29632: CALL_OW 266
29636: PUSH
29637: LD_VAR 0 4
29641: PPUSH
29642: CALL_OW 250
29646: PUSH
29647: LD_VAR 0 4
29651: PPUSH
29652: CALL_OW 251
29656: PUSH
29657: LD_VAR 0 4
29661: PPUSH
29662: CALL_OW 254
29666: PUSH
29667: LD_VAR 0 4
29671: PPUSH
29672: CALL_OW 267
29676: PUSH
29677: LD_VAR 0 4
29681: PPUSH
29682: CALL_OW 248
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: PPUSH
29695: CALL_OW 2
29699: ST_TO_ADDR
29700: GO 29784
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29702: LD_ADDR_VAR 0 2
29706: PUSH
29707: LD_VAR 0 2
29711: PUSH
29712: LD_VAR 0 4
29716: PPUSH
29717: CALL_OW 266
29721: PUSH
29722: LD_VAR 0 4
29726: PPUSH
29727: CALL_OW 250
29731: PUSH
29732: LD_VAR 0 4
29736: PPUSH
29737: CALL_OW 251
29741: PUSH
29742: LD_VAR 0 4
29746: PPUSH
29747: CALL_OW 254
29751: PUSH
29752: LD_VAR 0 4
29756: PPUSH
29757: CALL_OW 267
29761: PUSH
29762: LD_VAR 0 4
29766: PPUSH
29767: CALL_OW 248
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: PUSH
29780: EMPTY
29781: LIST
29782: ADD
29783: ST_TO_ADDR
// end ;
29784: GO 29333
29786: POP
29787: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29788: LD_VAR 0 2
29792: PPUSH
29793: LD_STRING 10_EpsilonBase
29795: PPUSH
29796: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29800: LD_INT 19
29802: PPUSH
29803: LD_STRING 10_EpsilonEnv
29805: PPUSH
29806: CALL 29815 0 2
// end ;
29810: LD_VAR 0 1
29814: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29815: LD_INT 0
29817: PPUSH
// result := ListEnvironmentArea ( area ) ;
29818: LD_ADDR_VAR 0 3
29822: PUSH
29823: LD_VAR 0 1
29827: PPUSH
29828: CALL_OW 353
29832: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29833: LD_VAR 0 3
29837: PPUSH
29838: LD_VAR 0 2
29842: PPUSH
29843: CALL_OW 39
// end ; end_of_file
29847: LD_VAR 0 3
29851: RET
// every 0 0$01 do var timer ;
29852: GO 29854
29854: DISABLE
29855: LD_INT 0
29857: PPUSH
// begin timer := 0 0$20 ;
29858: LD_ADDR_VAR 0 1
29862: PUSH
29863: LD_INT 700
29865: ST_TO_ADDR
// repeat wait ( timer ) ;
29866: LD_VAR 0 1
29870: PPUSH
29871: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
29875: LD_EXP 57
29879: PUSH
29880: LD_INT 6
29882: GREATEREQUAL
29883: PUSH
29884: LD_EXP 57
29888: PUSH
29889: LD_INT 14
29891: LESS
29892: AND
29893: IFFALSE 29909
// timer := timer + 0 0$3 ;
29895: LD_ADDR_VAR 0 1
29899: PUSH
29900: LD_VAR 0 1
29904: PUSH
29905: LD_INT 105
29907: PLUS
29908: ST_TO_ADDR
// if cratesSpawned >= 14 then
29909: LD_EXP 57
29913: PUSH
29914: LD_INT 14
29916: GREATEREQUAL
29917: IFFALSE 29933
// timer := timer + 0 0$6 ;
29919: LD_ADDR_VAR 0 1
29923: PUSH
29924: LD_VAR 0 1
29928: PUSH
29929: LD_INT 210
29931: PLUS
29932: ST_TO_ADDR
// if timer > 2 2$00 then
29933: LD_VAR 0 1
29937: PUSH
29938: LD_INT 4200
29940: GREATER
29941: IFFALSE 29951
// timer := 0 0$45 ;
29943: LD_ADDR_VAR 0 1
29947: PUSH
29948: LD_INT 1575
29950: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29951: LD_INT 1
29953: PPUSH
29954: LD_INT 5
29956: PPUSH
29957: CALL_OW 12
29961: PPUSH
29962: LD_INT 16
29964: PPUSH
29965: LD_INT 1
29967: PPUSH
29968: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29972: LD_ADDR_EXP 57
29976: PUSH
29977: LD_EXP 57
29981: PUSH
29982: LD_INT 1
29984: PLUS
29985: ST_TO_ADDR
// until false ;
29986: LD_INT 0
29988: IFFALSE 29866
// end ; end_of_file end_of_file
29990: PPOPN 1
29992: END
// every 0 0$1 do
29993: GO 29995
29995: DISABLE
// begin enable ;
29996: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
29997: LD_STRING updateTimer(
29999: PUSH
30000: LD_OWVAR 1
30004: STR
30005: PUSH
30006: LD_STRING );
30008: STR
30009: PPUSH
30010: CALL_OW 559
// end ;
30014: END
// export function SOS_MapStart ( ) ; begin
30015: LD_INT 0
30017: PPUSH
// if streamModeActive then
30018: LD_EXP 70
30022: IFFALSE 30031
// DefineStreamItems ( true ) ;
30024: LD_INT 1
30026: PPUSH
30027: CALL 31685 0 1
// UpdateFactoryWaypoints ( ) ;
30031: CALL 44546 0 0
// UpdateWarehouseGatheringPoints ( ) ;
30035: CALL 44803 0 0
// end ;
30039: LD_VAR 0 1
30043: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30044: LD_INT 0
30046: PPUSH
// if p2 = hack_mode then
30047: LD_VAR 0 2
30051: PUSH
30052: LD_INT 100
30054: EQUAL
30055: IFFALSE 31058
// begin if not StreamModeActive then
30057: LD_EXP 70
30061: NOT
30062: IFFALSE 30072
// StreamModeActive := true ;
30064: LD_ADDR_EXP 70
30068: PUSH
30069: LD_INT 1
30071: ST_TO_ADDR
// if p3 = 0 then
30072: LD_VAR 0 3
30076: PUSH
30077: LD_INT 0
30079: EQUAL
30080: IFFALSE 30086
// InitStreamMode ;
30082: CALL 31221 0 0
// if p3 = 1 then
30086: LD_VAR 0 3
30090: PUSH
30091: LD_INT 1
30093: EQUAL
30094: IFFALSE 30104
// sRocket := true ;
30096: LD_ADDR_EXP 75
30100: PUSH
30101: LD_INT 1
30103: ST_TO_ADDR
// if p3 = 2 then
30104: LD_VAR 0 3
30108: PUSH
30109: LD_INT 2
30111: EQUAL
30112: IFFALSE 30122
// sSpeed := true ;
30114: LD_ADDR_EXP 74
30118: PUSH
30119: LD_INT 1
30121: ST_TO_ADDR
// if p3 = 3 then
30122: LD_VAR 0 3
30126: PUSH
30127: LD_INT 3
30129: EQUAL
30130: IFFALSE 30140
// sEngine := true ;
30132: LD_ADDR_EXP 76
30136: PUSH
30137: LD_INT 1
30139: ST_TO_ADDR
// if p3 = 4 then
30140: LD_VAR 0 3
30144: PUSH
30145: LD_INT 4
30147: EQUAL
30148: IFFALSE 30158
// sSpec := true ;
30150: LD_ADDR_EXP 73
30154: PUSH
30155: LD_INT 1
30157: ST_TO_ADDR
// if p3 = 5 then
30158: LD_VAR 0 3
30162: PUSH
30163: LD_INT 5
30165: EQUAL
30166: IFFALSE 30176
// sLevel := true ;
30168: LD_ADDR_EXP 77
30172: PUSH
30173: LD_INT 1
30175: ST_TO_ADDR
// if p3 = 6 then
30176: LD_VAR 0 3
30180: PUSH
30181: LD_INT 6
30183: EQUAL
30184: IFFALSE 30194
// sArmoury := true ;
30186: LD_ADDR_EXP 78
30190: PUSH
30191: LD_INT 1
30193: ST_TO_ADDR
// if p3 = 7 then
30194: LD_VAR 0 3
30198: PUSH
30199: LD_INT 7
30201: EQUAL
30202: IFFALSE 30212
// sRadar := true ;
30204: LD_ADDR_EXP 79
30208: PUSH
30209: LD_INT 1
30211: ST_TO_ADDR
// if p3 = 8 then
30212: LD_VAR 0 3
30216: PUSH
30217: LD_INT 8
30219: EQUAL
30220: IFFALSE 30230
// sBunker := true ;
30222: LD_ADDR_EXP 80
30226: PUSH
30227: LD_INT 1
30229: ST_TO_ADDR
// if p3 = 9 then
30230: LD_VAR 0 3
30234: PUSH
30235: LD_INT 9
30237: EQUAL
30238: IFFALSE 30248
// sHack := true ;
30240: LD_ADDR_EXP 81
30244: PUSH
30245: LD_INT 1
30247: ST_TO_ADDR
// if p3 = 10 then
30248: LD_VAR 0 3
30252: PUSH
30253: LD_INT 10
30255: EQUAL
30256: IFFALSE 30266
// sFire := true ;
30258: LD_ADDR_EXP 82
30262: PUSH
30263: LD_INT 1
30265: ST_TO_ADDR
// if p3 = 11 then
30266: LD_VAR 0 3
30270: PUSH
30271: LD_INT 11
30273: EQUAL
30274: IFFALSE 30284
// sRefresh := true ;
30276: LD_ADDR_EXP 83
30280: PUSH
30281: LD_INT 1
30283: ST_TO_ADDR
// if p3 = 12 then
30284: LD_VAR 0 3
30288: PUSH
30289: LD_INT 12
30291: EQUAL
30292: IFFALSE 30302
// sExp := true ;
30294: LD_ADDR_EXP 84
30298: PUSH
30299: LD_INT 1
30301: ST_TO_ADDR
// if p3 = 13 then
30302: LD_VAR 0 3
30306: PUSH
30307: LD_INT 13
30309: EQUAL
30310: IFFALSE 30320
// sDepot := true ;
30312: LD_ADDR_EXP 85
30316: PUSH
30317: LD_INT 1
30319: ST_TO_ADDR
// if p3 = 14 then
30320: LD_VAR 0 3
30324: PUSH
30325: LD_INT 14
30327: EQUAL
30328: IFFALSE 30338
// sFlag := true ;
30330: LD_ADDR_EXP 86
30334: PUSH
30335: LD_INT 1
30337: ST_TO_ADDR
// if p3 = 15 then
30338: LD_VAR 0 3
30342: PUSH
30343: LD_INT 15
30345: EQUAL
30346: IFFALSE 30356
// sKamikadze := true ;
30348: LD_ADDR_EXP 94
30352: PUSH
30353: LD_INT 1
30355: ST_TO_ADDR
// if p3 = 16 then
30356: LD_VAR 0 3
30360: PUSH
30361: LD_INT 16
30363: EQUAL
30364: IFFALSE 30374
// sTroll := true ;
30366: LD_ADDR_EXP 95
30370: PUSH
30371: LD_INT 1
30373: ST_TO_ADDR
// if p3 = 17 then
30374: LD_VAR 0 3
30378: PUSH
30379: LD_INT 17
30381: EQUAL
30382: IFFALSE 30392
// sSlow := true ;
30384: LD_ADDR_EXP 96
30388: PUSH
30389: LD_INT 1
30391: ST_TO_ADDR
// if p3 = 18 then
30392: LD_VAR 0 3
30396: PUSH
30397: LD_INT 18
30399: EQUAL
30400: IFFALSE 30410
// sLack := true ;
30402: LD_ADDR_EXP 97
30406: PUSH
30407: LD_INT 1
30409: ST_TO_ADDR
// if p3 = 19 then
30410: LD_VAR 0 3
30414: PUSH
30415: LD_INT 19
30417: EQUAL
30418: IFFALSE 30428
// sTank := true ;
30420: LD_ADDR_EXP 99
30424: PUSH
30425: LD_INT 1
30427: ST_TO_ADDR
// if p3 = 20 then
30428: LD_VAR 0 3
30432: PUSH
30433: LD_INT 20
30435: EQUAL
30436: IFFALSE 30446
// sRemote := true ;
30438: LD_ADDR_EXP 100
30442: PUSH
30443: LD_INT 1
30445: ST_TO_ADDR
// if p3 = 21 then
30446: LD_VAR 0 3
30450: PUSH
30451: LD_INT 21
30453: EQUAL
30454: IFFALSE 30464
// sPowell := true ;
30456: LD_ADDR_EXP 101
30460: PUSH
30461: LD_INT 1
30463: ST_TO_ADDR
// if p3 = 22 then
30464: LD_VAR 0 3
30468: PUSH
30469: LD_INT 22
30471: EQUAL
30472: IFFALSE 30482
// sTeleport := true ;
30474: LD_ADDR_EXP 104
30478: PUSH
30479: LD_INT 1
30481: ST_TO_ADDR
// if p3 = 23 then
30482: LD_VAR 0 3
30486: PUSH
30487: LD_INT 23
30489: EQUAL
30490: IFFALSE 30500
// sOilTower := true ;
30492: LD_ADDR_EXP 106
30496: PUSH
30497: LD_INT 1
30499: ST_TO_ADDR
// if p3 = 24 then
30500: LD_VAR 0 3
30504: PUSH
30505: LD_INT 24
30507: EQUAL
30508: IFFALSE 30518
// sShovel := true ;
30510: LD_ADDR_EXP 107
30514: PUSH
30515: LD_INT 1
30517: ST_TO_ADDR
// if p3 = 25 then
30518: LD_VAR 0 3
30522: PUSH
30523: LD_INT 25
30525: EQUAL
30526: IFFALSE 30536
// sSheik := true ;
30528: LD_ADDR_EXP 108
30532: PUSH
30533: LD_INT 1
30535: ST_TO_ADDR
// if p3 = 26 then
30536: LD_VAR 0 3
30540: PUSH
30541: LD_INT 26
30543: EQUAL
30544: IFFALSE 30554
// sEarthquake := true ;
30546: LD_ADDR_EXP 110
30550: PUSH
30551: LD_INT 1
30553: ST_TO_ADDR
// if p3 = 27 then
30554: LD_VAR 0 3
30558: PUSH
30559: LD_INT 27
30561: EQUAL
30562: IFFALSE 30572
// sAI := true ;
30564: LD_ADDR_EXP 111
30568: PUSH
30569: LD_INT 1
30571: ST_TO_ADDR
// if p3 = 28 then
30572: LD_VAR 0 3
30576: PUSH
30577: LD_INT 28
30579: EQUAL
30580: IFFALSE 30590
// sCargo := true ;
30582: LD_ADDR_EXP 114
30586: PUSH
30587: LD_INT 1
30589: ST_TO_ADDR
// if p3 = 29 then
30590: LD_VAR 0 3
30594: PUSH
30595: LD_INT 29
30597: EQUAL
30598: IFFALSE 30608
// sDLaser := true ;
30600: LD_ADDR_EXP 115
30604: PUSH
30605: LD_INT 1
30607: ST_TO_ADDR
// if p3 = 30 then
30608: LD_VAR 0 3
30612: PUSH
30613: LD_INT 30
30615: EQUAL
30616: IFFALSE 30626
// sExchange := true ;
30618: LD_ADDR_EXP 116
30622: PUSH
30623: LD_INT 1
30625: ST_TO_ADDR
// if p3 = 31 then
30626: LD_VAR 0 3
30630: PUSH
30631: LD_INT 31
30633: EQUAL
30634: IFFALSE 30644
// sFac := true ;
30636: LD_ADDR_EXP 117
30640: PUSH
30641: LD_INT 1
30643: ST_TO_ADDR
// if p3 = 32 then
30644: LD_VAR 0 3
30648: PUSH
30649: LD_INT 32
30651: EQUAL
30652: IFFALSE 30662
// sPower := true ;
30654: LD_ADDR_EXP 118
30658: PUSH
30659: LD_INT 1
30661: ST_TO_ADDR
// if p3 = 33 then
30662: LD_VAR 0 3
30666: PUSH
30667: LD_INT 33
30669: EQUAL
30670: IFFALSE 30680
// sRandom := true ;
30672: LD_ADDR_EXP 119
30676: PUSH
30677: LD_INT 1
30679: ST_TO_ADDR
// if p3 = 34 then
30680: LD_VAR 0 3
30684: PUSH
30685: LD_INT 34
30687: EQUAL
30688: IFFALSE 30698
// sShield := true ;
30690: LD_ADDR_EXP 120
30694: PUSH
30695: LD_INT 1
30697: ST_TO_ADDR
// if p3 = 35 then
30698: LD_VAR 0 3
30702: PUSH
30703: LD_INT 35
30705: EQUAL
30706: IFFALSE 30716
// sTime := true ;
30708: LD_ADDR_EXP 121
30712: PUSH
30713: LD_INT 1
30715: ST_TO_ADDR
// if p3 = 36 then
30716: LD_VAR 0 3
30720: PUSH
30721: LD_INT 36
30723: EQUAL
30724: IFFALSE 30734
// sTools := true ;
30726: LD_ADDR_EXP 122
30730: PUSH
30731: LD_INT 1
30733: ST_TO_ADDR
// if p3 = 101 then
30734: LD_VAR 0 3
30738: PUSH
30739: LD_INT 101
30741: EQUAL
30742: IFFALSE 30752
// sSold := true ;
30744: LD_ADDR_EXP 87
30748: PUSH
30749: LD_INT 1
30751: ST_TO_ADDR
// if p3 = 102 then
30752: LD_VAR 0 3
30756: PUSH
30757: LD_INT 102
30759: EQUAL
30760: IFFALSE 30770
// sDiff := true ;
30762: LD_ADDR_EXP 88
30766: PUSH
30767: LD_INT 1
30769: ST_TO_ADDR
// if p3 = 103 then
30770: LD_VAR 0 3
30774: PUSH
30775: LD_INT 103
30777: EQUAL
30778: IFFALSE 30788
// sFog := true ;
30780: LD_ADDR_EXP 91
30784: PUSH
30785: LD_INT 1
30787: ST_TO_ADDR
// if p3 = 104 then
30788: LD_VAR 0 3
30792: PUSH
30793: LD_INT 104
30795: EQUAL
30796: IFFALSE 30806
// sReset := true ;
30798: LD_ADDR_EXP 92
30802: PUSH
30803: LD_INT 1
30805: ST_TO_ADDR
// if p3 = 105 then
30806: LD_VAR 0 3
30810: PUSH
30811: LD_INT 105
30813: EQUAL
30814: IFFALSE 30824
// sSun := true ;
30816: LD_ADDR_EXP 93
30820: PUSH
30821: LD_INT 1
30823: ST_TO_ADDR
// if p3 = 106 then
30824: LD_VAR 0 3
30828: PUSH
30829: LD_INT 106
30831: EQUAL
30832: IFFALSE 30842
// sTiger := true ;
30834: LD_ADDR_EXP 89
30838: PUSH
30839: LD_INT 1
30841: ST_TO_ADDR
// if p3 = 107 then
30842: LD_VAR 0 3
30846: PUSH
30847: LD_INT 107
30849: EQUAL
30850: IFFALSE 30860
// sBomb := true ;
30852: LD_ADDR_EXP 90
30856: PUSH
30857: LD_INT 1
30859: ST_TO_ADDR
// if p3 = 108 then
30860: LD_VAR 0 3
30864: PUSH
30865: LD_INT 108
30867: EQUAL
30868: IFFALSE 30878
// sWound := true ;
30870: LD_ADDR_EXP 98
30874: PUSH
30875: LD_INT 1
30877: ST_TO_ADDR
// if p3 = 109 then
30878: LD_VAR 0 3
30882: PUSH
30883: LD_INT 109
30885: EQUAL
30886: IFFALSE 30896
// sBetray := true ;
30888: LD_ADDR_EXP 102
30892: PUSH
30893: LD_INT 1
30895: ST_TO_ADDR
// if p3 = 110 then
30896: LD_VAR 0 3
30900: PUSH
30901: LD_INT 110
30903: EQUAL
30904: IFFALSE 30914
// sContamin := true ;
30906: LD_ADDR_EXP 103
30910: PUSH
30911: LD_INT 1
30913: ST_TO_ADDR
// if p3 = 111 then
30914: LD_VAR 0 3
30918: PUSH
30919: LD_INT 111
30921: EQUAL
30922: IFFALSE 30932
// sOil := true ;
30924: LD_ADDR_EXP 105
30928: PUSH
30929: LD_INT 1
30931: ST_TO_ADDR
// if p3 = 112 then
30932: LD_VAR 0 3
30936: PUSH
30937: LD_INT 112
30939: EQUAL
30940: IFFALSE 30950
// sStu := true ;
30942: LD_ADDR_EXP 109
30946: PUSH
30947: LD_INT 1
30949: ST_TO_ADDR
// if p3 = 113 then
30950: LD_VAR 0 3
30954: PUSH
30955: LD_INT 113
30957: EQUAL
30958: IFFALSE 30968
// sBazooka := true ;
30960: LD_ADDR_EXP 112
30964: PUSH
30965: LD_INT 1
30967: ST_TO_ADDR
// if p3 = 114 then
30968: LD_VAR 0 3
30972: PUSH
30973: LD_INT 114
30975: EQUAL
30976: IFFALSE 30986
// sMortar := true ;
30978: LD_ADDR_EXP 113
30982: PUSH
30983: LD_INT 1
30985: ST_TO_ADDR
// if p3 = 115 then
30986: LD_VAR 0 3
30990: PUSH
30991: LD_INT 115
30993: EQUAL
30994: IFFALSE 31004
// sRanger := true ;
30996: LD_ADDR_EXP 123
31000: PUSH
31001: LD_INT 1
31003: ST_TO_ADDR
// if p3 = 116 then
31004: LD_VAR 0 3
31008: PUSH
31009: LD_INT 116
31011: EQUAL
31012: IFFALSE 31022
// sComputer := true ;
31014: LD_ADDR_EXP 124
31018: PUSH
31019: LD_INT 1
31021: ST_TO_ADDR
// if p3 = 117 then
31022: LD_VAR 0 3
31026: PUSH
31027: LD_INT 117
31029: EQUAL
31030: IFFALSE 31040
// s30 := true ;
31032: LD_ADDR_EXP 125
31036: PUSH
31037: LD_INT 1
31039: ST_TO_ADDR
// if p3 = 118 then
31040: LD_VAR 0 3
31044: PUSH
31045: LD_INT 118
31047: EQUAL
31048: IFFALSE 31058
// s60 := true ;
31050: LD_ADDR_EXP 126
31054: PUSH
31055: LD_INT 1
31057: ST_TO_ADDR
// end ; if p2 = stream_mode then
31058: LD_VAR 0 2
31062: PUSH
31063: LD_INT 101
31065: EQUAL
31066: IFFALSE 31194
// begin case p3 of 1 :
31068: LD_VAR 0 3
31072: PUSH
31073: LD_INT 1
31075: DOUBLE
31076: EQUAL
31077: IFTRUE 31081
31079: GO 31088
31081: POP
// hHackUnlimitedResources ; 2 :
31082: CALL 43292 0 0
31086: GO 31194
31088: LD_INT 2
31090: DOUBLE
31091: EQUAL
31092: IFTRUE 31096
31094: GO 31103
31096: POP
// hHackSetLevel10 ; 3 :
31097: CALL 43425 0 0
31101: GO 31194
31103: LD_INT 3
31105: DOUBLE
31106: EQUAL
31107: IFTRUE 31111
31109: GO 31118
31111: POP
// hHackSetLevel10YourUnits ; 4 :
31112: CALL 43510 0 0
31116: GO 31194
31118: LD_INT 4
31120: DOUBLE
31121: EQUAL
31122: IFTRUE 31126
31124: GO 31133
31126: POP
// hHackInvincible ; 5 :
31127: CALL 43958 0 0
31131: GO 31194
31133: LD_INT 5
31135: DOUBLE
31136: EQUAL
31137: IFTRUE 31141
31139: GO 31148
31141: POP
// hHackInvisible ; 6 :
31142: CALL 44069 0 0
31146: GO 31194
31148: LD_INT 6
31150: DOUBLE
31151: EQUAL
31152: IFTRUE 31156
31154: GO 31163
31156: POP
// hHackChangeYourSide ; 7 :
31157: CALL 44126 0 0
31161: GO 31194
31163: LD_INT 7
31165: DOUBLE
31166: EQUAL
31167: IFTRUE 31171
31169: GO 31178
31171: POP
// hHackChangeUnitSide ; 8 :
31172: CALL 44168 0 0
31176: GO 31194
31178: LD_INT 8
31180: DOUBLE
31181: EQUAL
31182: IFTRUE 31186
31184: GO 31193
31186: POP
// hHackFog ; end ;
31187: CALL 44269 0 0
31191: GO 31194
31193: POP
// end ; end ;
31194: LD_VAR 0 7
31198: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
31199: GO 31201
31201: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
31202: LD_STRING initStreamRollete();
31204: PPUSH
31205: CALL_OW 559
// InitStreamMode ;
31209: CALL 31221 0 0
// DefineStreamItems ( false ) ;
31213: LD_INT 0
31215: PPUSH
31216: CALL 31685 0 1
// end ;
31220: END
// function InitStreamMode ; begin
31221: LD_INT 0
31223: PPUSH
// streamModeActive := false ;
31224: LD_ADDR_EXP 70
31228: PUSH
31229: LD_INT 0
31231: ST_TO_ADDR
// normalCounter := 36 ;
31232: LD_ADDR_EXP 71
31236: PUSH
31237: LD_INT 36
31239: ST_TO_ADDR
// hardcoreCounter := 18 ;
31240: LD_ADDR_EXP 72
31244: PUSH
31245: LD_INT 18
31247: ST_TO_ADDR
// sRocket := false ;
31248: LD_ADDR_EXP 75
31252: PUSH
31253: LD_INT 0
31255: ST_TO_ADDR
// sSpeed := false ;
31256: LD_ADDR_EXP 74
31260: PUSH
31261: LD_INT 0
31263: ST_TO_ADDR
// sEngine := false ;
31264: LD_ADDR_EXP 76
31268: PUSH
31269: LD_INT 0
31271: ST_TO_ADDR
// sSpec := false ;
31272: LD_ADDR_EXP 73
31276: PUSH
31277: LD_INT 0
31279: ST_TO_ADDR
// sLevel := false ;
31280: LD_ADDR_EXP 77
31284: PUSH
31285: LD_INT 0
31287: ST_TO_ADDR
// sArmoury := false ;
31288: LD_ADDR_EXP 78
31292: PUSH
31293: LD_INT 0
31295: ST_TO_ADDR
// sRadar := false ;
31296: LD_ADDR_EXP 79
31300: PUSH
31301: LD_INT 0
31303: ST_TO_ADDR
// sBunker := false ;
31304: LD_ADDR_EXP 80
31308: PUSH
31309: LD_INT 0
31311: ST_TO_ADDR
// sHack := false ;
31312: LD_ADDR_EXP 81
31316: PUSH
31317: LD_INT 0
31319: ST_TO_ADDR
// sFire := false ;
31320: LD_ADDR_EXP 82
31324: PUSH
31325: LD_INT 0
31327: ST_TO_ADDR
// sRefresh := false ;
31328: LD_ADDR_EXP 83
31332: PUSH
31333: LD_INT 0
31335: ST_TO_ADDR
// sExp := false ;
31336: LD_ADDR_EXP 84
31340: PUSH
31341: LD_INT 0
31343: ST_TO_ADDR
// sDepot := false ;
31344: LD_ADDR_EXP 85
31348: PUSH
31349: LD_INT 0
31351: ST_TO_ADDR
// sFlag := false ;
31352: LD_ADDR_EXP 86
31356: PUSH
31357: LD_INT 0
31359: ST_TO_ADDR
// sKamikadze := false ;
31360: LD_ADDR_EXP 94
31364: PUSH
31365: LD_INT 0
31367: ST_TO_ADDR
// sTroll := false ;
31368: LD_ADDR_EXP 95
31372: PUSH
31373: LD_INT 0
31375: ST_TO_ADDR
// sSlow := false ;
31376: LD_ADDR_EXP 96
31380: PUSH
31381: LD_INT 0
31383: ST_TO_ADDR
// sLack := false ;
31384: LD_ADDR_EXP 97
31388: PUSH
31389: LD_INT 0
31391: ST_TO_ADDR
// sTank := false ;
31392: LD_ADDR_EXP 99
31396: PUSH
31397: LD_INT 0
31399: ST_TO_ADDR
// sRemote := false ;
31400: LD_ADDR_EXP 100
31404: PUSH
31405: LD_INT 0
31407: ST_TO_ADDR
// sPowell := false ;
31408: LD_ADDR_EXP 101
31412: PUSH
31413: LD_INT 0
31415: ST_TO_ADDR
// sTeleport := false ;
31416: LD_ADDR_EXP 104
31420: PUSH
31421: LD_INT 0
31423: ST_TO_ADDR
// sOilTower := false ;
31424: LD_ADDR_EXP 106
31428: PUSH
31429: LD_INT 0
31431: ST_TO_ADDR
// sShovel := false ;
31432: LD_ADDR_EXP 107
31436: PUSH
31437: LD_INT 0
31439: ST_TO_ADDR
// sSheik := false ;
31440: LD_ADDR_EXP 108
31444: PUSH
31445: LD_INT 0
31447: ST_TO_ADDR
// sEarthquake := false ;
31448: LD_ADDR_EXP 110
31452: PUSH
31453: LD_INT 0
31455: ST_TO_ADDR
// sAI := false ;
31456: LD_ADDR_EXP 111
31460: PUSH
31461: LD_INT 0
31463: ST_TO_ADDR
// sCargo := false ;
31464: LD_ADDR_EXP 114
31468: PUSH
31469: LD_INT 0
31471: ST_TO_ADDR
// sDLaser := false ;
31472: LD_ADDR_EXP 115
31476: PUSH
31477: LD_INT 0
31479: ST_TO_ADDR
// sExchange := false ;
31480: LD_ADDR_EXP 116
31484: PUSH
31485: LD_INT 0
31487: ST_TO_ADDR
// sFac := false ;
31488: LD_ADDR_EXP 117
31492: PUSH
31493: LD_INT 0
31495: ST_TO_ADDR
// sPower := false ;
31496: LD_ADDR_EXP 118
31500: PUSH
31501: LD_INT 0
31503: ST_TO_ADDR
// sRandom := false ;
31504: LD_ADDR_EXP 119
31508: PUSH
31509: LD_INT 0
31511: ST_TO_ADDR
// sShield := false ;
31512: LD_ADDR_EXP 120
31516: PUSH
31517: LD_INT 0
31519: ST_TO_ADDR
// sTime := false ;
31520: LD_ADDR_EXP 121
31524: PUSH
31525: LD_INT 0
31527: ST_TO_ADDR
// sTools := false ;
31528: LD_ADDR_EXP 122
31532: PUSH
31533: LD_INT 0
31535: ST_TO_ADDR
// sSold := false ;
31536: LD_ADDR_EXP 87
31540: PUSH
31541: LD_INT 0
31543: ST_TO_ADDR
// sDiff := false ;
31544: LD_ADDR_EXP 88
31548: PUSH
31549: LD_INT 0
31551: ST_TO_ADDR
// sFog := false ;
31552: LD_ADDR_EXP 91
31556: PUSH
31557: LD_INT 0
31559: ST_TO_ADDR
// sReset := false ;
31560: LD_ADDR_EXP 92
31564: PUSH
31565: LD_INT 0
31567: ST_TO_ADDR
// sSun := false ;
31568: LD_ADDR_EXP 93
31572: PUSH
31573: LD_INT 0
31575: ST_TO_ADDR
// sTiger := false ;
31576: LD_ADDR_EXP 89
31580: PUSH
31581: LD_INT 0
31583: ST_TO_ADDR
// sBomb := false ;
31584: LD_ADDR_EXP 90
31588: PUSH
31589: LD_INT 0
31591: ST_TO_ADDR
// sWound := false ;
31592: LD_ADDR_EXP 98
31596: PUSH
31597: LD_INT 0
31599: ST_TO_ADDR
// sBetray := false ;
31600: LD_ADDR_EXP 102
31604: PUSH
31605: LD_INT 0
31607: ST_TO_ADDR
// sContamin := false ;
31608: LD_ADDR_EXP 103
31612: PUSH
31613: LD_INT 0
31615: ST_TO_ADDR
// sOil := false ;
31616: LD_ADDR_EXP 105
31620: PUSH
31621: LD_INT 0
31623: ST_TO_ADDR
// sStu := false ;
31624: LD_ADDR_EXP 109
31628: PUSH
31629: LD_INT 0
31631: ST_TO_ADDR
// sBazooka := false ;
31632: LD_ADDR_EXP 112
31636: PUSH
31637: LD_INT 0
31639: ST_TO_ADDR
// sMortar := false ;
31640: LD_ADDR_EXP 113
31644: PUSH
31645: LD_INT 0
31647: ST_TO_ADDR
// sRanger := false ;
31648: LD_ADDR_EXP 123
31652: PUSH
31653: LD_INT 0
31655: ST_TO_ADDR
// sComputer := false ;
31656: LD_ADDR_EXP 124
31660: PUSH
31661: LD_INT 0
31663: ST_TO_ADDR
// s30 := false ;
31664: LD_ADDR_EXP 125
31668: PUSH
31669: LD_INT 0
31671: ST_TO_ADDR
// s60 := false ;
31672: LD_ADDR_EXP 126
31676: PUSH
31677: LD_INT 0
31679: ST_TO_ADDR
// end ;
31680: LD_VAR 0 1
31684: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
31685: LD_INT 0
31687: PPUSH
31688: PPUSH
31689: PPUSH
31690: PPUSH
31691: PPUSH
31692: PPUSH
31693: PPUSH
// result := [ ] ;
31694: LD_ADDR_VAR 0 2
31698: PUSH
31699: EMPTY
31700: ST_TO_ADDR
// if campaign_id = 1 then
31701: LD_OWVAR 69
31705: PUSH
31706: LD_INT 1
31708: EQUAL
31709: IFFALSE 34875
// begin case mission_number of 1 :
31711: LD_OWVAR 70
31715: PUSH
31716: LD_INT 1
31718: DOUBLE
31719: EQUAL
31720: IFTRUE 31724
31722: GO 31800
31724: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
31725: LD_ADDR_VAR 0 2
31729: PUSH
31730: LD_INT 2
31732: PUSH
31733: LD_INT 4
31735: PUSH
31736: LD_INT 11
31738: PUSH
31739: LD_INT 12
31741: PUSH
31742: LD_INT 15
31744: PUSH
31745: LD_INT 16
31747: PUSH
31748: LD_INT 22
31750: PUSH
31751: LD_INT 23
31753: PUSH
31754: LD_INT 26
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 101
31770: PUSH
31771: LD_INT 102
31773: PUSH
31774: LD_INT 106
31776: PUSH
31777: LD_INT 116
31779: PUSH
31780: LD_INT 117
31782: PUSH
31783: LD_INT 118
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: ST_TO_ADDR
31798: GO 34873
31800: LD_INT 2
31802: DOUBLE
31803: EQUAL
31804: IFTRUE 31808
31806: GO 31892
31808: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
31809: LD_ADDR_VAR 0 2
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: LD_INT 4
31819: PUSH
31820: LD_INT 11
31822: PUSH
31823: LD_INT 12
31825: PUSH
31826: LD_INT 15
31828: PUSH
31829: LD_INT 16
31831: PUSH
31832: LD_INT 22
31834: PUSH
31835: LD_INT 23
31837: PUSH
31838: LD_INT 26
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 101
31854: PUSH
31855: LD_INT 102
31857: PUSH
31858: LD_INT 105
31860: PUSH
31861: LD_INT 106
31863: PUSH
31864: LD_INT 108
31866: PUSH
31867: LD_INT 116
31869: PUSH
31870: LD_INT 117
31872: PUSH
31873: LD_INT 118
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: ST_TO_ADDR
31890: GO 34873
31892: LD_INT 3
31894: DOUBLE
31895: EQUAL
31896: IFTRUE 31900
31898: GO 31988
31900: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
31901: LD_ADDR_VAR 0 2
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: LD_INT 4
31911: PUSH
31912: LD_INT 5
31914: PUSH
31915: LD_INT 11
31917: PUSH
31918: LD_INT 12
31920: PUSH
31921: LD_INT 15
31923: PUSH
31924: LD_INT 16
31926: PUSH
31927: LD_INT 22
31929: PUSH
31930: LD_INT 26
31932: PUSH
31933: LD_INT 36
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 101
31950: PUSH
31951: LD_INT 102
31953: PUSH
31954: LD_INT 105
31956: PUSH
31957: LD_INT 106
31959: PUSH
31960: LD_INT 108
31962: PUSH
31963: LD_INT 116
31965: PUSH
31966: LD_INT 117
31968: PUSH
31969: LD_INT 118
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: ST_TO_ADDR
31986: GO 34873
31988: LD_INT 4
31990: DOUBLE
31991: EQUAL
31992: IFTRUE 31996
31994: GO 32092
31996: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
31997: LD_ADDR_VAR 0 2
32001: PUSH
32002: LD_INT 2
32004: PUSH
32005: LD_INT 4
32007: PUSH
32008: LD_INT 5
32010: PUSH
32011: LD_INT 8
32013: PUSH
32014: LD_INT 11
32016: PUSH
32017: LD_INT 12
32019: PUSH
32020: LD_INT 15
32022: PUSH
32023: LD_INT 16
32025: PUSH
32026: LD_INT 22
32028: PUSH
32029: LD_INT 23
32031: PUSH
32032: LD_INT 26
32034: PUSH
32035: LD_INT 36
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 101
32054: PUSH
32055: LD_INT 102
32057: PUSH
32058: LD_INT 105
32060: PUSH
32061: LD_INT 106
32063: PUSH
32064: LD_INT 108
32066: PUSH
32067: LD_INT 116
32069: PUSH
32070: LD_INT 117
32072: PUSH
32073: LD_INT 118
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: ST_TO_ADDR
32090: GO 34873
32092: LD_INT 5
32094: DOUBLE
32095: EQUAL
32096: IFTRUE 32100
32098: GO 32212
32100: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
32101: LD_ADDR_VAR 0 2
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: LD_INT 4
32111: PUSH
32112: LD_INT 5
32114: PUSH
32115: LD_INT 6
32117: PUSH
32118: LD_INT 8
32120: PUSH
32121: LD_INT 11
32123: PUSH
32124: LD_INT 12
32126: PUSH
32127: LD_INT 15
32129: PUSH
32130: LD_INT 16
32132: PUSH
32133: LD_INT 22
32135: PUSH
32136: LD_INT 23
32138: PUSH
32139: LD_INT 25
32141: PUSH
32142: LD_INT 26
32144: PUSH
32145: LD_INT 36
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 101
32166: PUSH
32167: LD_INT 102
32169: PUSH
32170: LD_INT 105
32172: PUSH
32173: LD_INT 106
32175: PUSH
32176: LD_INT 108
32178: PUSH
32179: LD_INT 109
32181: PUSH
32182: LD_INT 112
32184: PUSH
32185: LD_INT 116
32187: PUSH
32188: LD_INT 117
32190: PUSH
32191: LD_INT 118
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: ST_TO_ADDR
32210: GO 34873
32212: LD_INT 6
32214: DOUBLE
32215: EQUAL
32216: IFTRUE 32220
32218: GO 32352
32220: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
32221: LD_ADDR_VAR 0 2
32225: PUSH
32226: LD_INT 2
32228: PUSH
32229: LD_INT 4
32231: PUSH
32232: LD_INT 5
32234: PUSH
32235: LD_INT 6
32237: PUSH
32238: LD_INT 8
32240: PUSH
32241: LD_INT 11
32243: PUSH
32244: LD_INT 12
32246: PUSH
32247: LD_INT 15
32249: PUSH
32250: LD_INT 16
32252: PUSH
32253: LD_INT 20
32255: PUSH
32256: LD_INT 21
32258: PUSH
32259: LD_INT 22
32261: PUSH
32262: LD_INT 23
32264: PUSH
32265: LD_INT 25
32267: PUSH
32268: LD_INT 26
32270: PUSH
32271: LD_INT 30
32273: PUSH
32274: LD_INT 31
32276: PUSH
32277: LD_INT 32
32279: PUSH
32280: LD_INT 36
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 101
32306: PUSH
32307: LD_INT 102
32309: PUSH
32310: LD_INT 105
32312: PUSH
32313: LD_INT 106
32315: PUSH
32316: LD_INT 108
32318: PUSH
32319: LD_INT 109
32321: PUSH
32322: LD_INT 112
32324: PUSH
32325: LD_INT 116
32327: PUSH
32328: LD_INT 117
32330: PUSH
32331: LD_INT 118
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: ST_TO_ADDR
32350: GO 34873
32352: LD_INT 7
32354: DOUBLE
32355: EQUAL
32356: IFTRUE 32360
32358: GO 32472
32360: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
32361: LD_ADDR_VAR 0 2
32365: PUSH
32366: LD_INT 2
32368: PUSH
32369: LD_INT 4
32371: PUSH
32372: LD_INT 5
32374: PUSH
32375: LD_INT 7
32377: PUSH
32378: LD_INT 11
32380: PUSH
32381: LD_INT 12
32383: PUSH
32384: LD_INT 15
32386: PUSH
32387: LD_INT 16
32389: PUSH
32390: LD_INT 20
32392: PUSH
32393: LD_INT 21
32395: PUSH
32396: LD_INT 22
32398: PUSH
32399: LD_INT 23
32401: PUSH
32402: LD_INT 25
32404: PUSH
32405: LD_INT 26
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 101
32426: PUSH
32427: LD_INT 102
32429: PUSH
32430: LD_INT 103
32432: PUSH
32433: LD_INT 105
32435: PUSH
32436: LD_INT 106
32438: PUSH
32439: LD_INT 108
32441: PUSH
32442: LD_INT 112
32444: PUSH
32445: LD_INT 116
32447: PUSH
32448: LD_INT 117
32450: PUSH
32451: LD_INT 118
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: ST_TO_ADDR
32470: GO 34873
32472: LD_INT 8
32474: DOUBLE
32475: EQUAL
32476: IFTRUE 32480
32478: GO 32620
32480: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
32481: LD_ADDR_VAR 0 2
32485: PUSH
32486: LD_INT 2
32488: PUSH
32489: LD_INT 4
32491: PUSH
32492: LD_INT 5
32494: PUSH
32495: LD_INT 6
32497: PUSH
32498: LD_INT 7
32500: PUSH
32501: LD_INT 8
32503: PUSH
32504: LD_INT 11
32506: PUSH
32507: LD_INT 12
32509: PUSH
32510: LD_INT 15
32512: PUSH
32513: LD_INT 16
32515: PUSH
32516: LD_INT 20
32518: PUSH
32519: LD_INT 21
32521: PUSH
32522: LD_INT 22
32524: PUSH
32525: LD_INT 23
32527: PUSH
32528: LD_INT 25
32530: PUSH
32531: LD_INT 26
32533: PUSH
32534: LD_INT 30
32536: PUSH
32537: LD_INT 31
32539: PUSH
32540: LD_INT 32
32542: PUSH
32543: LD_INT 36
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 101
32570: PUSH
32571: LD_INT 102
32573: PUSH
32574: LD_INT 103
32576: PUSH
32577: LD_INT 105
32579: PUSH
32580: LD_INT 106
32582: PUSH
32583: LD_INT 108
32585: PUSH
32586: LD_INT 109
32588: PUSH
32589: LD_INT 112
32591: PUSH
32592: LD_INT 116
32594: PUSH
32595: LD_INT 117
32597: PUSH
32598: LD_INT 118
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: ST_TO_ADDR
32618: GO 34873
32620: LD_INT 9
32622: DOUBLE
32623: EQUAL
32624: IFTRUE 32628
32626: GO 32776
32628: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
32629: LD_ADDR_VAR 0 2
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: LD_INT 4
32639: PUSH
32640: LD_INT 5
32642: PUSH
32643: LD_INT 6
32645: PUSH
32646: LD_INT 7
32648: PUSH
32649: LD_INT 8
32651: PUSH
32652: LD_INT 11
32654: PUSH
32655: LD_INT 12
32657: PUSH
32658: LD_INT 15
32660: PUSH
32661: LD_INT 16
32663: PUSH
32664: LD_INT 20
32666: PUSH
32667: LD_INT 21
32669: PUSH
32670: LD_INT 22
32672: PUSH
32673: LD_INT 23
32675: PUSH
32676: LD_INT 25
32678: PUSH
32679: LD_INT 26
32681: PUSH
32682: LD_INT 28
32684: PUSH
32685: LD_INT 30
32687: PUSH
32688: LD_INT 31
32690: PUSH
32691: LD_INT 32
32693: PUSH
32694: LD_INT 36
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 101
32722: PUSH
32723: LD_INT 102
32725: PUSH
32726: LD_INT 103
32728: PUSH
32729: LD_INT 105
32731: PUSH
32732: LD_INT 106
32734: PUSH
32735: LD_INT 108
32737: PUSH
32738: LD_INT 109
32740: PUSH
32741: LD_INT 112
32743: PUSH
32744: LD_INT 114
32746: PUSH
32747: LD_INT 116
32749: PUSH
32750: LD_INT 117
32752: PUSH
32753: LD_INT 118
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: ST_TO_ADDR
32774: GO 34873
32776: LD_INT 10
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32980
32784: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
32785: LD_ADDR_VAR 0 2
32789: PUSH
32790: LD_INT 2
32792: PUSH
32793: LD_INT 4
32795: PUSH
32796: LD_INT 5
32798: PUSH
32799: LD_INT 6
32801: PUSH
32802: LD_INT 7
32804: PUSH
32805: LD_INT 8
32807: PUSH
32808: LD_INT 9
32810: PUSH
32811: LD_INT 10
32813: PUSH
32814: LD_INT 11
32816: PUSH
32817: LD_INT 12
32819: PUSH
32820: LD_INT 13
32822: PUSH
32823: LD_INT 14
32825: PUSH
32826: LD_INT 15
32828: PUSH
32829: LD_INT 16
32831: PUSH
32832: LD_INT 17
32834: PUSH
32835: LD_INT 18
32837: PUSH
32838: LD_INT 19
32840: PUSH
32841: LD_INT 20
32843: PUSH
32844: LD_INT 21
32846: PUSH
32847: LD_INT 22
32849: PUSH
32850: LD_INT 23
32852: PUSH
32853: LD_INT 24
32855: PUSH
32856: LD_INT 25
32858: PUSH
32859: LD_INT 26
32861: PUSH
32862: LD_INT 28
32864: PUSH
32865: LD_INT 30
32867: PUSH
32868: LD_INT 31
32870: PUSH
32871: LD_INT 32
32873: PUSH
32874: LD_INT 36
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 101
32910: PUSH
32911: LD_INT 102
32913: PUSH
32914: LD_INT 103
32916: PUSH
32917: LD_INT 104
32919: PUSH
32920: LD_INT 105
32922: PUSH
32923: LD_INT 106
32925: PUSH
32926: LD_INT 107
32928: PUSH
32929: LD_INT 108
32931: PUSH
32932: LD_INT 109
32934: PUSH
32935: LD_INT 110
32937: PUSH
32938: LD_INT 111
32940: PUSH
32941: LD_INT 112
32943: PUSH
32944: LD_INT 114
32946: PUSH
32947: LD_INT 116
32949: PUSH
32950: LD_INT 117
32952: PUSH
32953: LD_INT 118
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: ST_TO_ADDR
32978: GO 34873
32980: LD_INT 11
32982: DOUBLE
32983: EQUAL
32984: IFTRUE 32988
32986: GO 33192
32988: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
32989: LD_ADDR_VAR 0 2
32993: PUSH
32994: LD_INT 2
32996: PUSH
32997: LD_INT 3
32999: PUSH
33000: LD_INT 4
33002: PUSH
33003: LD_INT 5
33005: PUSH
33006: LD_INT 6
33008: PUSH
33009: LD_INT 7
33011: PUSH
33012: LD_INT 8
33014: PUSH
33015: LD_INT 9
33017: PUSH
33018: LD_INT 10
33020: PUSH
33021: LD_INT 11
33023: PUSH
33024: LD_INT 12
33026: PUSH
33027: LD_INT 13
33029: PUSH
33030: LD_INT 14
33032: PUSH
33033: LD_INT 15
33035: PUSH
33036: LD_INT 16
33038: PUSH
33039: LD_INT 17
33041: PUSH
33042: LD_INT 18
33044: PUSH
33045: LD_INT 19
33047: PUSH
33048: LD_INT 20
33050: PUSH
33051: LD_INT 21
33053: PUSH
33054: LD_INT 22
33056: PUSH
33057: LD_INT 23
33059: PUSH
33060: LD_INT 24
33062: PUSH
33063: LD_INT 25
33065: PUSH
33066: LD_INT 26
33068: PUSH
33069: LD_INT 28
33071: PUSH
33072: LD_INT 30
33074: PUSH
33075: LD_INT 31
33077: PUSH
33078: LD_INT 32
33080: PUSH
33081: LD_INT 34
33083: PUSH
33084: LD_INT 36
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 101
33122: PUSH
33123: LD_INT 102
33125: PUSH
33126: LD_INT 103
33128: PUSH
33129: LD_INT 104
33131: PUSH
33132: LD_INT 105
33134: PUSH
33135: LD_INT 106
33137: PUSH
33138: LD_INT 107
33140: PUSH
33141: LD_INT 108
33143: PUSH
33144: LD_INT 109
33146: PUSH
33147: LD_INT 110
33149: PUSH
33150: LD_INT 111
33152: PUSH
33153: LD_INT 112
33155: PUSH
33156: LD_INT 114
33158: PUSH
33159: LD_INT 116
33161: PUSH
33162: LD_INT 117
33164: PUSH
33165: LD_INT 118
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: ST_TO_ADDR
33190: GO 34873
33192: LD_INT 12
33194: DOUBLE
33195: EQUAL
33196: IFTRUE 33200
33198: GO 33420
33200: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
33201: LD_ADDR_VAR 0 2
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: LD_INT 2
33211: PUSH
33212: LD_INT 3
33214: PUSH
33215: LD_INT 4
33217: PUSH
33218: LD_INT 5
33220: PUSH
33221: LD_INT 6
33223: PUSH
33224: LD_INT 7
33226: PUSH
33227: LD_INT 8
33229: PUSH
33230: LD_INT 9
33232: PUSH
33233: LD_INT 10
33235: PUSH
33236: LD_INT 11
33238: PUSH
33239: LD_INT 12
33241: PUSH
33242: LD_INT 13
33244: PUSH
33245: LD_INT 14
33247: PUSH
33248: LD_INT 15
33250: PUSH
33251: LD_INT 16
33253: PUSH
33254: LD_INT 17
33256: PUSH
33257: LD_INT 18
33259: PUSH
33260: LD_INT 19
33262: PUSH
33263: LD_INT 20
33265: PUSH
33266: LD_INT 21
33268: PUSH
33269: LD_INT 22
33271: PUSH
33272: LD_INT 23
33274: PUSH
33275: LD_INT 24
33277: PUSH
33278: LD_INT 25
33280: PUSH
33281: LD_INT 26
33283: PUSH
33284: LD_INT 27
33286: PUSH
33287: LD_INT 28
33289: PUSH
33290: LD_INT 30
33292: PUSH
33293: LD_INT 31
33295: PUSH
33296: LD_INT 32
33298: PUSH
33299: LD_INT 33
33301: PUSH
33302: LD_INT 34
33304: PUSH
33305: LD_INT 36
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 101
33346: PUSH
33347: LD_INT 102
33349: PUSH
33350: LD_INT 103
33352: PUSH
33353: LD_INT 104
33355: PUSH
33356: LD_INT 105
33358: PUSH
33359: LD_INT 106
33361: PUSH
33362: LD_INT 107
33364: PUSH
33365: LD_INT 108
33367: PUSH
33368: LD_INT 109
33370: PUSH
33371: LD_INT 110
33373: PUSH
33374: LD_INT 111
33376: PUSH
33377: LD_INT 112
33379: PUSH
33380: LD_INT 113
33382: PUSH
33383: LD_INT 114
33385: PUSH
33386: LD_INT 116
33388: PUSH
33389: LD_INT 117
33391: PUSH
33392: LD_INT 118
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: ST_TO_ADDR
33418: GO 34873
33420: LD_INT 13
33422: DOUBLE
33423: EQUAL
33424: IFTRUE 33428
33426: GO 33636
33428: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
33429: LD_ADDR_VAR 0 2
33433: PUSH
33434: LD_INT 1
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: LD_INT 3
33442: PUSH
33443: LD_INT 4
33445: PUSH
33446: LD_INT 5
33448: PUSH
33449: LD_INT 8
33451: PUSH
33452: LD_INT 9
33454: PUSH
33455: LD_INT 10
33457: PUSH
33458: LD_INT 11
33460: PUSH
33461: LD_INT 12
33463: PUSH
33464: LD_INT 14
33466: PUSH
33467: LD_INT 15
33469: PUSH
33470: LD_INT 16
33472: PUSH
33473: LD_INT 17
33475: PUSH
33476: LD_INT 18
33478: PUSH
33479: LD_INT 19
33481: PUSH
33482: LD_INT 20
33484: PUSH
33485: LD_INT 21
33487: PUSH
33488: LD_INT 22
33490: PUSH
33491: LD_INT 23
33493: PUSH
33494: LD_INT 24
33496: PUSH
33497: LD_INT 25
33499: PUSH
33500: LD_INT 26
33502: PUSH
33503: LD_INT 27
33505: PUSH
33506: LD_INT 28
33508: PUSH
33509: LD_INT 30
33511: PUSH
33512: LD_INT 31
33514: PUSH
33515: LD_INT 32
33517: PUSH
33518: LD_INT 33
33520: PUSH
33521: LD_INT 34
33523: PUSH
33524: LD_INT 36
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 101
33562: PUSH
33563: LD_INT 102
33565: PUSH
33566: LD_INT 103
33568: PUSH
33569: LD_INT 104
33571: PUSH
33572: LD_INT 105
33574: PUSH
33575: LD_INT 106
33577: PUSH
33578: LD_INT 107
33580: PUSH
33581: LD_INT 108
33583: PUSH
33584: LD_INT 109
33586: PUSH
33587: LD_INT 110
33589: PUSH
33590: LD_INT 111
33592: PUSH
33593: LD_INT 112
33595: PUSH
33596: LD_INT 113
33598: PUSH
33599: LD_INT 114
33601: PUSH
33602: LD_INT 116
33604: PUSH
33605: LD_INT 117
33607: PUSH
33608: LD_INT 118
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: ST_TO_ADDR
33634: GO 34873
33636: LD_INT 14
33638: DOUBLE
33639: EQUAL
33640: IFTRUE 33644
33642: GO 33868
33644: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
33645: LD_ADDR_VAR 0 2
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: LD_INT 2
33655: PUSH
33656: LD_INT 3
33658: PUSH
33659: LD_INT 4
33661: PUSH
33662: LD_INT 5
33664: PUSH
33665: LD_INT 6
33667: PUSH
33668: LD_INT 7
33670: PUSH
33671: LD_INT 8
33673: PUSH
33674: LD_INT 9
33676: PUSH
33677: LD_INT 10
33679: PUSH
33680: LD_INT 11
33682: PUSH
33683: LD_INT 12
33685: PUSH
33686: LD_INT 13
33688: PUSH
33689: LD_INT 14
33691: PUSH
33692: LD_INT 15
33694: PUSH
33695: LD_INT 16
33697: PUSH
33698: LD_INT 17
33700: PUSH
33701: LD_INT 18
33703: PUSH
33704: LD_INT 19
33706: PUSH
33707: LD_INT 20
33709: PUSH
33710: LD_INT 21
33712: PUSH
33713: LD_INT 22
33715: PUSH
33716: LD_INT 23
33718: PUSH
33719: LD_INT 24
33721: PUSH
33722: LD_INT 25
33724: PUSH
33725: LD_INT 26
33727: PUSH
33728: LD_INT 27
33730: PUSH
33731: LD_INT 28
33733: PUSH
33734: LD_INT 29
33736: PUSH
33737: LD_INT 30
33739: PUSH
33740: LD_INT 31
33742: PUSH
33743: LD_INT 32
33745: PUSH
33746: LD_INT 33
33748: PUSH
33749: LD_INT 34
33751: PUSH
33752: LD_INT 36
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 101
33794: PUSH
33795: LD_INT 102
33797: PUSH
33798: LD_INT 103
33800: PUSH
33801: LD_INT 104
33803: PUSH
33804: LD_INT 105
33806: PUSH
33807: LD_INT 106
33809: PUSH
33810: LD_INT 107
33812: PUSH
33813: LD_INT 108
33815: PUSH
33816: LD_INT 109
33818: PUSH
33819: LD_INT 110
33821: PUSH
33822: LD_INT 111
33824: PUSH
33825: LD_INT 112
33827: PUSH
33828: LD_INT 113
33830: PUSH
33831: LD_INT 114
33833: PUSH
33834: LD_INT 116
33836: PUSH
33837: LD_INT 117
33839: PUSH
33840: LD_INT 118
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: ST_TO_ADDR
33866: GO 34873
33868: LD_INT 15
33870: DOUBLE
33871: EQUAL
33872: IFTRUE 33876
33874: GO 34100
33876: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
33877: LD_ADDR_VAR 0 2
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: LD_INT 2
33887: PUSH
33888: LD_INT 3
33890: PUSH
33891: LD_INT 4
33893: PUSH
33894: LD_INT 5
33896: PUSH
33897: LD_INT 6
33899: PUSH
33900: LD_INT 7
33902: PUSH
33903: LD_INT 8
33905: PUSH
33906: LD_INT 9
33908: PUSH
33909: LD_INT 10
33911: PUSH
33912: LD_INT 11
33914: PUSH
33915: LD_INT 12
33917: PUSH
33918: LD_INT 13
33920: PUSH
33921: LD_INT 14
33923: PUSH
33924: LD_INT 15
33926: PUSH
33927: LD_INT 16
33929: PUSH
33930: LD_INT 17
33932: PUSH
33933: LD_INT 18
33935: PUSH
33936: LD_INT 19
33938: PUSH
33939: LD_INT 20
33941: PUSH
33942: LD_INT 21
33944: PUSH
33945: LD_INT 22
33947: PUSH
33948: LD_INT 23
33950: PUSH
33951: LD_INT 24
33953: PUSH
33954: LD_INT 25
33956: PUSH
33957: LD_INT 26
33959: PUSH
33960: LD_INT 27
33962: PUSH
33963: LD_INT 28
33965: PUSH
33966: LD_INT 29
33968: PUSH
33969: LD_INT 30
33971: PUSH
33972: LD_INT 31
33974: PUSH
33975: LD_INT 32
33977: PUSH
33978: LD_INT 33
33980: PUSH
33981: LD_INT 34
33983: PUSH
33984: LD_INT 36
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 101
34026: PUSH
34027: LD_INT 102
34029: PUSH
34030: LD_INT 103
34032: PUSH
34033: LD_INT 104
34035: PUSH
34036: LD_INT 105
34038: PUSH
34039: LD_INT 106
34041: PUSH
34042: LD_INT 107
34044: PUSH
34045: LD_INT 108
34047: PUSH
34048: LD_INT 109
34050: PUSH
34051: LD_INT 110
34053: PUSH
34054: LD_INT 111
34056: PUSH
34057: LD_INT 112
34059: PUSH
34060: LD_INT 113
34062: PUSH
34063: LD_INT 114
34065: PUSH
34066: LD_INT 116
34068: PUSH
34069: LD_INT 117
34071: PUSH
34072: LD_INT 118
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: ST_TO_ADDR
34098: GO 34873
34100: LD_INT 16
34102: DOUBLE
34103: EQUAL
34104: IFTRUE 34108
34106: GO 34244
34108: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
34109: LD_ADDR_VAR 0 2
34113: PUSH
34114: LD_INT 2
34116: PUSH
34117: LD_INT 4
34119: PUSH
34120: LD_INT 5
34122: PUSH
34123: LD_INT 7
34125: PUSH
34126: LD_INT 11
34128: PUSH
34129: LD_INT 12
34131: PUSH
34132: LD_INT 15
34134: PUSH
34135: LD_INT 16
34137: PUSH
34138: LD_INT 20
34140: PUSH
34141: LD_INT 21
34143: PUSH
34144: LD_INT 22
34146: PUSH
34147: LD_INT 23
34149: PUSH
34150: LD_INT 25
34152: PUSH
34153: LD_INT 26
34155: PUSH
34156: LD_INT 30
34158: PUSH
34159: LD_INT 31
34161: PUSH
34162: LD_INT 32
34164: PUSH
34165: LD_INT 33
34167: PUSH
34168: LD_INT 34
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 101
34194: PUSH
34195: LD_INT 102
34197: PUSH
34198: LD_INT 103
34200: PUSH
34201: LD_INT 106
34203: PUSH
34204: LD_INT 108
34206: PUSH
34207: LD_INT 112
34209: PUSH
34210: LD_INT 113
34212: PUSH
34213: LD_INT 114
34215: PUSH
34216: LD_INT 116
34218: PUSH
34219: LD_INT 117
34221: PUSH
34222: LD_INT 118
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: ST_TO_ADDR
34242: GO 34873
34244: LD_INT 17
34246: DOUBLE
34247: EQUAL
34248: IFTRUE 34252
34250: GO 34476
34252: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
34253: LD_ADDR_VAR 0 2
34257: PUSH
34258: LD_INT 1
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: LD_INT 3
34266: PUSH
34267: LD_INT 4
34269: PUSH
34270: LD_INT 5
34272: PUSH
34273: LD_INT 6
34275: PUSH
34276: LD_INT 7
34278: PUSH
34279: LD_INT 8
34281: PUSH
34282: LD_INT 9
34284: PUSH
34285: LD_INT 10
34287: PUSH
34288: LD_INT 11
34290: PUSH
34291: LD_INT 12
34293: PUSH
34294: LD_INT 13
34296: PUSH
34297: LD_INT 14
34299: PUSH
34300: LD_INT 15
34302: PUSH
34303: LD_INT 16
34305: PUSH
34306: LD_INT 17
34308: PUSH
34309: LD_INT 18
34311: PUSH
34312: LD_INT 19
34314: PUSH
34315: LD_INT 20
34317: PUSH
34318: LD_INT 21
34320: PUSH
34321: LD_INT 22
34323: PUSH
34324: LD_INT 23
34326: PUSH
34327: LD_INT 24
34329: PUSH
34330: LD_INT 25
34332: PUSH
34333: LD_INT 26
34335: PUSH
34336: LD_INT 27
34338: PUSH
34339: LD_INT 28
34341: PUSH
34342: LD_INT 29
34344: PUSH
34345: LD_INT 30
34347: PUSH
34348: LD_INT 31
34350: PUSH
34351: LD_INT 32
34353: PUSH
34354: LD_INT 33
34356: PUSH
34357: LD_INT 34
34359: PUSH
34360: LD_INT 36
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 101
34402: PUSH
34403: LD_INT 102
34405: PUSH
34406: LD_INT 103
34408: PUSH
34409: LD_INT 104
34411: PUSH
34412: LD_INT 105
34414: PUSH
34415: LD_INT 106
34417: PUSH
34418: LD_INT 107
34420: PUSH
34421: LD_INT 108
34423: PUSH
34424: LD_INT 109
34426: PUSH
34427: LD_INT 110
34429: PUSH
34430: LD_INT 111
34432: PUSH
34433: LD_INT 112
34435: PUSH
34436: LD_INT 113
34438: PUSH
34439: LD_INT 114
34441: PUSH
34442: LD_INT 116
34444: PUSH
34445: LD_INT 117
34447: PUSH
34448: LD_INT 118
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: ST_TO_ADDR
34474: GO 34873
34476: LD_INT 18
34478: DOUBLE
34479: EQUAL
34480: IFTRUE 34484
34482: GO 34632
34484: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
34485: LD_ADDR_VAR 0 2
34489: PUSH
34490: LD_INT 2
34492: PUSH
34493: LD_INT 4
34495: PUSH
34496: LD_INT 5
34498: PUSH
34499: LD_INT 7
34501: PUSH
34502: LD_INT 11
34504: PUSH
34505: LD_INT 12
34507: PUSH
34508: LD_INT 15
34510: PUSH
34511: LD_INT 16
34513: PUSH
34514: LD_INT 20
34516: PUSH
34517: LD_INT 21
34519: PUSH
34520: LD_INT 22
34522: PUSH
34523: LD_INT 23
34525: PUSH
34526: LD_INT 25
34528: PUSH
34529: LD_INT 26
34531: PUSH
34532: LD_INT 30
34534: PUSH
34535: LD_INT 31
34537: PUSH
34538: LD_INT 32
34540: PUSH
34541: LD_INT 33
34543: PUSH
34544: LD_INT 34
34546: PUSH
34547: LD_INT 35
34549: PUSH
34550: LD_INT 36
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 101
34578: PUSH
34579: LD_INT 102
34581: PUSH
34582: LD_INT 103
34584: PUSH
34585: LD_INT 106
34587: PUSH
34588: LD_INT 108
34590: PUSH
34591: LD_INT 112
34593: PUSH
34594: LD_INT 113
34596: PUSH
34597: LD_INT 114
34599: PUSH
34600: LD_INT 115
34602: PUSH
34603: LD_INT 116
34605: PUSH
34606: LD_INT 117
34608: PUSH
34609: LD_INT 118
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: ST_TO_ADDR
34630: GO 34873
34632: LD_INT 19
34634: DOUBLE
34635: EQUAL
34636: IFTRUE 34640
34638: GO 34872
34640: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
34641: LD_ADDR_VAR 0 2
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: LD_INT 2
34651: PUSH
34652: LD_INT 3
34654: PUSH
34655: LD_INT 4
34657: PUSH
34658: LD_INT 5
34660: PUSH
34661: LD_INT 6
34663: PUSH
34664: LD_INT 7
34666: PUSH
34667: LD_INT 8
34669: PUSH
34670: LD_INT 9
34672: PUSH
34673: LD_INT 10
34675: PUSH
34676: LD_INT 11
34678: PUSH
34679: LD_INT 12
34681: PUSH
34682: LD_INT 13
34684: PUSH
34685: LD_INT 14
34687: PUSH
34688: LD_INT 15
34690: PUSH
34691: LD_INT 16
34693: PUSH
34694: LD_INT 17
34696: PUSH
34697: LD_INT 18
34699: PUSH
34700: LD_INT 19
34702: PUSH
34703: LD_INT 20
34705: PUSH
34706: LD_INT 21
34708: PUSH
34709: LD_INT 22
34711: PUSH
34712: LD_INT 23
34714: PUSH
34715: LD_INT 24
34717: PUSH
34718: LD_INT 25
34720: PUSH
34721: LD_INT 26
34723: PUSH
34724: LD_INT 27
34726: PUSH
34727: LD_INT 28
34729: PUSH
34730: LD_INT 29
34732: PUSH
34733: LD_INT 30
34735: PUSH
34736: LD_INT 31
34738: PUSH
34739: LD_INT 32
34741: PUSH
34742: LD_INT 33
34744: PUSH
34745: LD_INT 34
34747: PUSH
34748: LD_INT 35
34750: PUSH
34751: LD_INT 36
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 101
34794: PUSH
34795: LD_INT 102
34797: PUSH
34798: LD_INT 103
34800: PUSH
34801: LD_INT 104
34803: PUSH
34804: LD_INT 105
34806: PUSH
34807: LD_INT 106
34809: PUSH
34810: LD_INT 107
34812: PUSH
34813: LD_INT 108
34815: PUSH
34816: LD_INT 109
34818: PUSH
34819: LD_INT 110
34821: PUSH
34822: LD_INT 111
34824: PUSH
34825: LD_INT 112
34827: PUSH
34828: LD_INT 113
34830: PUSH
34831: LD_INT 114
34833: PUSH
34834: LD_INT 115
34836: PUSH
34837: LD_INT 116
34839: PUSH
34840: LD_INT 117
34842: PUSH
34843: LD_INT 118
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: ST_TO_ADDR
34870: GO 34873
34872: POP
// end else
34873: GO 35104
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
34875: LD_ADDR_VAR 0 2
34879: PUSH
34880: LD_INT 1
34882: PUSH
34883: LD_INT 2
34885: PUSH
34886: LD_INT 3
34888: PUSH
34889: LD_INT 4
34891: PUSH
34892: LD_INT 5
34894: PUSH
34895: LD_INT 6
34897: PUSH
34898: LD_INT 7
34900: PUSH
34901: LD_INT 8
34903: PUSH
34904: LD_INT 9
34906: PUSH
34907: LD_INT 10
34909: PUSH
34910: LD_INT 11
34912: PUSH
34913: LD_INT 12
34915: PUSH
34916: LD_INT 13
34918: PUSH
34919: LD_INT 14
34921: PUSH
34922: LD_INT 15
34924: PUSH
34925: LD_INT 16
34927: PUSH
34928: LD_INT 17
34930: PUSH
34931: LD_INT 18
34933: PUSH
34934: LD_INT 19
34936: PUSH
34937: LD_INT 20
34939: PUSH
34940: LD_INT 21
34942: PUSH
34943: LD_INT 22
34945: PUSH
34946: LD_INT 23
34948: PUSH
34949: LD_INT 24
34951: PUSH
34952: LD_INT 25
34954: PUSH
34955: LD_INT 26
34957: PUSH
34958: LD_INT 27
34960: PUSH
34961: LD_INT 28
34963: PUSH
34964: LD_INT 29
34966: PUSH
34967: LD_INT 30
34969: PUSH
34970: LD_INT 31
34972: PUSH
34973: LD_INT 32
34975: PUSH
34976: LD_INT 33
34978: PUSH
34979: LD_INT 34
34981: PUSH
34982: LD_INT 35
34984: PUSH
34985: LD_INT 36
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 101
35028: PUSH
35029: LD_INT 102
35031: PUSH
35032: LD_INT 103
35034: PUSH
35035: LD_INT 104
35037: PUSH
35038: LD_INT 105
35040: PUSH
35041: LD_INT 106
35043: PUSH
35044: LD_INT 107
35046: PUSH
35047: LD_INT 108
35049: PUSH
35050: LD_INT 109
35052: PUSH
35053: LD_INT 110
35055: PUSH
35056: LD_INT 111
35058: PUSH
35059: LD_INT 112
35061: PUSH
35062: LD_INT 113
35064: PUSH
35065: LD_INT 114
35067: PUSH
35068: LD_INT 115
35070: PUSH
35071: LD_INT 116
35073: PUSH
35074: LD_INT 117
35076: PUSH
35077: LD_INT 118
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: ST_TO_ADDR
// if result then
35104: LD_VAR 0 2
35108: IFFALSE 35894
// begin normal :=  ;
35110: LD_ADDR_VAR 0 5
35114: PUSH
35115: LD_STRING 
35117: ST_TO_ADDR
// hardcore :=  ;
35118: LD_ADDR_VAR 0 6
35122: PUSH
35123: LD_STRING 
35125: ST_TO_ADDR
// active :=  ;
35126: LD_ADDR_VAR 0 7
35130: PUSH
35131: LD_STRING 
35133: ST_TO_ADDR
// for i = 1 to normalCounter do
35134: LD_ADDR_VAR 0 8
35138: PUSH
35139: DOUBLE
35140: LD_INT 1
35142: DEC
35143: ST_TO_ADDR
35144: LD_EXP 71
35148: PUSH
35149: FOR_TO
35150: IFFALSE 35251
// begin tmp := 0 ;
35152: LD_ADDR_VAR 0 3
35156: PUSH
35157: LD_STRING 0
35159: ST_TO_ADDR
// if result [ 1 ] then
35160: LD_VAR 0 2
35164: PUSH
35165: LD_INT 1
35167: ARRAY
35168: IFFALSE 35233
// if result [ 1 ] [ 1 ] = i then
35170: LD_VAR 0 2
35174: PUSH
35175: LD_INT 1
35177: ARRAY
35178: PUSH
35179: LD_INT 1
35181: ARRAY
35182: PUSH
35183: LD_VAR 0 8
35187: EQUAL
35188: IFFALSE 35233
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
35190: LD_ADDR_VAR 0 2
35194: PUSH
35195: LD_VAR 0 2
35199: PPUSH
35200: LD_INT 1
35202: PPUSH
35203: LD_VAR 0 2
35207: PUSH
35208: LD_INT 1
35210: ARRAY
35211: PPUSH
35212: LD_INT 1
35214: PPUSH
35215: CALL_OW 3
35219: PPUSH
35220: CALL_OW 1
35224: ST_TO_ADDR
// tmp := 1 ;
35225: LD_ADDR_VAR 0 3
35229: PUSH
35230: LD_STRING 1
35232: ST_TO_ADDR
// end ; normal := normal & tmp ;
35233: LD_ADDR_VAR 0 5
35237: PUSH
35238: LD_VAR 0 5
35242: PUSH
35243: LD_VAR 0 3
35247: STR
35248: ST_TO_ADDR
// end ;
35249: GO 35149
35251: POP
35252: POP
// for i = 1 to hardcoreCounter do
35253: LD_ADDR_VAR 0 8
35257: PUSH
35258: DOUBLE
35259: LD_INT 1
35261: DEC
35262: ST_TO_ADDR
35263: LD_EXP 72
35267: PUSH
35268: FOR_TO
35269: IFFALSE 35374
// begin tmp := 0 ;
35271: LD_ADDR_VAR 0 3
35275: PUSH
35276: LD_STRING 0
35278: ST_TO_ADDR
// if result [ 2 ] then
35279: LD_VAR 0 2
35283: PUSH
35284: LD_INT 2
35286: ARRAY
35287: IFFALSE 35356
// if result [ 2 ] [ 1 ] = 100 + i then
35289: LD_VAR 0 2
35293: PUSH
35294: LD_INT 2
35296: ARRAY
35297: PUSH
35298: LD_INT 1
35300: ARRAY
35301: PUSH
35302: LD_INT 100
35304: PUSH
35305: LD_VAR 0 8
35309: PLUS
35310: EQUAL
35311: IFFALSE 35356
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
35313: LD_ADDR_VAR 0 2
35317: PUSH
35318: LD_VAR 0 2
35322: PPUSH
35323: LD_INT 2
35325: PPUSH
35326: LD_VAR 0 2
35330: PUSH
35331: LD_INT 2
35333: ARRAY
35334: PPUSH
35335: LD_INT 1
35337: PPUSH
35338: CALL_OW 3
35342: PPUSH
35343: CALL_OW 1
35347: ST_TO_ADDR
// tmp := 1 ;
35348: LD_ADDR_VAR 0 3
35352: PUSH
35353: LD_STRING 1
35355: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
35356: LD_ADDR_VAR 0 6
35360: PUSH
35361: LD_VAR 0 6
35365: PUSH
35366: LD_VAR 0 3
35370: STR
35371: ST_TO_ADDR
// end ;
35372: GO 35268
35374: POP
35375: POP
// if isGameLoad then
35376: LD_VAR 0 1
35380: IFFALSE 35855
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
35382: LD_ADDR_VAR 0 4
35386: PUSH
35387: LD_EXP 75
35391: PUSH
35392: LD_EXP 74
35396: PUSH
35397: LD_EXP 76
35401: PUSH
35402: LD_EXP 73
35406: PUSH
35407: LD_EXP 77
35411: PUSH
35412: LD_EXP 78
35416: PUSH
35417: LD_EXP 79
35421: PUSH
35422: LD_EXP 80
35426: PUSH
35427: LD_EXP 81
35431: PUSH
35432: LD_EXP 82
35436: PUSH
35437: LD_EXP 83
35441: PUSH
35442: LD_EXP 84
35446: PUSH
35447: LD_EXP 85
35451: PUSH
35452: LD_EXP 86
35456: PUSH
35457: LD_EXP 94
35461: PUSH
35462: LD_EXP 95
35466: PUSH
35467: LD_EXP 96
35471: PUSH
35472: LD_EXP 97
35476: PUSH
35477: LD_EXP 99
35481: PUSH
35482: LD_EXP 100
35486: PUSH
35487: LD_EXP 101
35491: PUSH
35492: LD_EXP 104
35496: PUSH
35497: LD_EXP 106
35501: PUSH
35502: LD_EXP 107
35506: PUSH
35507: LD_EXP 108
35511: PUSH
35512: LD_EXP 110
35516: PUSH
35517: LD_EXP 111
35521: PUSH
35522: LD_EXP 114
35526: PUSH
35527: LD_EXP 115
35531: PUSH
35532: LD_EXP 116
35536: PUSH
35537: LD_EXP 117
35541: PUSH
35542: LD_EXP 118
35546: PUSH
35547: LD_EXP 119
35551: PUSH
35552: LD_EXP 120
35556: PUSH
35557: LD_EXP 121
35561: PUSH
35562: LD_EXP 122
35566: PUSH
35567: LD_EXP 87
35571: PUSH
35572: LD_EXP 88
35576: PUSH
35577: LD_EXP 91
35581: PUSH
35582: LD_EXP 92
35586: PUSH
35587: LD_EXP 93
35591: PUSH
35592: LD_EXP 89
35596: PUSH
35597: LD_EXP 90
35601: PUSH
35602: LD_EXP 98
35606: PUSH
35607: LD_EXP 102
35611: PUSH
35612: LD_EXP 103
35616: PUSH
35617: LD_EXP 105
35621: PUSH
35622: LD_EXP 109
35626: PUSH
35627: LD_EXP 112
35631: PUSH
35632: LD_EXP 113
35636: PUSH
35637: LD_EXP 123
35641: PUSH
35642: LD_EXP 124
35646: PUSH
35647: LD_EXP 125
35651: PUSH
35652: LD_EXP 126
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: ST_TO_ADDR
// tmp :=  ;
35713: LD_ADDR_VAR 0 3
35717: PUSH
35718: LD_STRING 
35720: ST_TO_ADDR
// for i = 1 to normalCounter do
35721: LD_ADDR_VAR 0 8
35725: PUSH
35726: DOUBLE
35727: LD_INT 1
35729: DEC
35730: ST_TO_ADDR
35731: LD_EXP 71
35735: PUSH
35736: FOR_TO
35737: IFFALSE 35773
// begin if flags [ i ] then
35739: LD_VAR 0 4
35743: PUSH
35744: LD_VAR 0 8
35748: ARRAY
35749: IFFALSE 35771
// tmp := tmp & i & ; ;
35751: LD_ADDR_VAR 0 3
35755: PUSH
35756: LD_VAR 0 3
35760: PUSH
35761: LD_VAR 0 8
35765: STR
35766: PUSH
35767: LD_STRING ;
35769: STR
35770: ST_TO_ADDR
// end ;
35771: GO 35736
35773: POP
35774: POP
// for i = 1 to hardcoreCounter do
35775: LD_ADDR_VAR 0 8
35779: PUSH
35780: DOUBLE
35781: LD_INT 1
35783: DEC
35784: ST_TO_ADDR
35785: LD_EXP 72
35789: PUSH
35790: FOR_TO
35791: IFFALSE 35837
// begin if flags [ normalCounter + i ] then
35793: LD_VAR 0 4
35797: PUSH
35798: LD_EXP 71
35802: PUSH
35803: LD_VAR 0 8
35807: PLUS
35808: ARRAY
35809: IFFALSE 35835
// tmp := tmp & ( 100 + i ) & ; ;
35811: LD_ADDR_VAR 0 3
35815: PUSH
35816: LD_VAR 0 3
35820: PUSH
35821: LD_INT 100
35823: PUSH
35824: LD_VAR 0 8
35828: PLUS
35829: STR
35830: PUSH
35831: LD_STRING ;
35833: STR
35834: ST_TO_ADDR
// end ;
35835: GO 35790
35837: POP
35838: POP
// if tmp then
35839: LD_VAR 0 3
35843: IFFALSE 35855
// active := tmp ;
35845: LD_ADDR_VAR 0 7
35849: PUSH
35850: LD_VAR 0 3
35854: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
35855: LD_STRING getStreamItemsFromMission("
35857: PUSH
35858: LD_VAR 0 5
35862: STR
35863: PUSH
35864: LD_STRING ","
35866: STR
35867: PUSH
35868: LD_VAR 0 6
35872: STR
35873: PUSH
35874: LD_STRING ","
35876: STR
35877: PUSH
35878: LD_VAR 0 7
35882: STR
35883: PUSH
35884: LD_STRING ")
35886: STR
35887: PPUSH
35888: CALL_OW 559
// end else
35892: GO 35901
// ToLua ( getStreamItemsFromMission("","","") ) ;
35894: LD_STRING getStreamItemsFromMission("","","")
35896: PPUSH
35897: CALL_OW 559
// end ;
35901: LD_VAR 0 2
35905: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
35906: LD_EXP 70
35910: PUSH
35911: LD_EXP 75
35915: AND
35916: IFFALSE 36040
35918: GO 35920
35920: DISABLE
35921: LD_INT 0
35923: PPUSH
35924: PPUSH
// begin enable ;
35925: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
35926: LD_ADDR_VAR 0 2
35930: PUSH
35931: LD_INT 22
35933: PUSH
35934: LD_OWVAR 2
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 2
35945: PUSH
35946: LD_INT 34
35948: PUSH
35949: LD_INT 7
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 34
35958: PUSH
35959: LD_INT 45
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 34
35968: PUSH
35969: LD_INT 28
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 34
35978: PUSH
35979: LD_INT 47
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PPUSH
35997: CALL_OW 69
36001: ST_TO_ADDR
// if not tmp then
36002: LD_VAR 0 2
36006: NOT
36007: IFFALSE 36011
// exit ;
36009: GO 36040
// for i in tmp do
36011: LD_ADDR_VAR 0 1
36015: PUSH
36016: LD_VAR 0 2
36020: PUSH
36021: FOR_IN
36022: IFFALSE 36038
// begin SetLives ( i , 0 ) ;
36024: LD_VAR 0 1
36028: PPUSH
36029: LD_INT 0
36031: PPUSH
36032: CALL_OW 234
// end ;
36036: GO 36021
36038: POP
36039: POP
// end ;
36040: PPOPN 2
36042: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
36043: LD_EXP 70
36047: PUSH
36048: LD_EXP 76
36052: AND
36053: IFFALSE 36137
36055: GO 36057
36057: DISABLE
36058: LD_INT 0
36060: PPUSH
36061: PPUSH
// begin enable ;
36062: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
36063: LD_ADDR_VAR 0 2
36067: PUSH
36068: LD_INT 22
36070: PUSH
36071: LD_OWVAR 2
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 32
36082: PUSH
36083: LD_INT 3
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PPUSH
36094: CALL_OW 69
36098: ST_TO_ADDR
// if not tmp then
36099: LD_VAR 0 2
36103: NOT
36104: IFFALSE 36108
// exit ;
36106: GO 36137
// for i in tmp do
36108: LD_ADDR_VAR 0 1
36112: PUSH
36113: LD_VAR 0 2
36117: PUSH
36118: FOR_IN
36119: IFFALSE 36135
// begin SetLives ( i , 0 ) ;
36121: LD_VAR 0 1
36125: PPUSH
36126: LD_INT 0
36128: PPUSH
36129: CALL_OW 234
// end ;
36133: GO 36118
36135: POP
36136: POP
// end ;
36137: PPOPN 2
36139: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
36140: LD_EXP 70
36144: PUSH
36145: LD_EXP 73
36149: AND
36150: IFFALSE 36243
36152: GO 36154
36154: DISABLE
36155: LD_INT 0
36157: PPUSH
// begin enable ;
36158: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
36159: LD_ADDR_VAR 0 1
36163: PUSH
36164: LD_INT 22
36166: PUSH
36167: LD_OWVAR 2
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 25
36181: PUSH
36182: LD_INT 5
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 25
36191: PUSH
36192: LD_INT 9
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 25
36201: PUSH
36202: LD_INT 8
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PPUSH
36219: CALL_OW 69
36223: PUSH
36224: FOR_IN
36225: IFFALSE 36241
// begin SetClass ( i , 1 ) ;
36227: LD_VAR 0 1
36231: PPUSH
36232: LD_INT 1
36234: PPUSH
36235: CALL_OW 336
// end ;
36239: GO 36224
36241: POP
36242: POP
// end ;
36243: PPOPN 1
36245: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
36246: LD_EXP 70
36250: PUSH
36251: LD_EXP 74
36255: AND
36256: PUSH
36257: LD_OWVAR 65
36261: PUSH
36262: LD_INT 7
36264: LESS
36265: AND
36266: IFFALSE 36280
36268: GO 36270
36270: DISABLE
// begin enable ;
36271: ENABLE
// game_speed := 7 ;
36272: LD_ADDR_OWVAR 65
36276: PUSH
36277: LD_INT 7
36279: ST_TO_ADDR
// end ;
36280: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
36281: LD_EXP 70
36285: PUSH
36286: LD_EXP 77
36290: AND
36291: IFFALSE 36493
36293: GO 36295
36295: DISABLE
36296: LD_INT 0
36298: PPUSH
36299: PPUSH
36300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36301: LD_ADDR_VAR 0 3
36305: PUSH
36306: LD_INT 81
36308: PUSH
36309: LD_OWVAR 2
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 21
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PPUSH
36332: CALL_OW 69
36336: ST_TO_ADDR
// if not tmp then
36337: LD_VAR 0 3
36341: NOT
36342: IFFALSE 36346
// exit ;
36344: GO 36493
// if tmp > 5 then
36346: LD_VAR 0 3
36350: PUSH
36351: LD_INT 5
36353: GREATER
36354: IFFALSE 36366
// k := 5 else
36356: LD_ADDR_VAR 0 2
36360: PUSH
36361: LD_INT 5
36363: ST_TO_ADDR
36364: GO 36376
// k := tmp ;
36366: LD_ADDR_VAR 0 2
36370: PUSH
36371: LD_VAR 0 3
36375: ST_TO_ADDR
// for i := 1 to k do
36376: LD_ADDR_VAR 0 1
36380: PUSH
36381: DOUBLE
36382: LD_INT 1
36384: DEC
36385: ST_TO_ADDR
36386: LD_VAR 0 2
36390: PUSH
36391: FOR_TO
36392: IFFALSE 36491
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
36394: LD_VAR 0 3
36398: PUSH
36399: LD_VAR 0 1
36403: ARRAY
36404: PPUSH
36405: LD_VAR 0 1
36409: PUSH
36410: LD_INT 4
36412: MOD
36413: PUSH
36414: LD_INT 1
36416: PLUS
36417: PPUSH
36418: CALL_OW 259
36422: PUSH
36423: LD_INT 10
36425: LESS
36426: IFFALSE 36489
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
36428: LD_VAR 0 3
36432: PUSH
36433: LD_VAR 0 1
36437: ARRAY
36438: PPUSH
36439: LD_VAR 0 1
36443: PUSH
36444: LD_INT 4
36446: MOD
36447: PUSH
36448: LD_INT 1
36450: PLUS
36451: PPUSH
36452: LD_VAR 0 3
36456: PUSH
36457: LD_VAR 0 1
36461: ARRAY
36462: PPUSH
36463: LD_VAR 0 1
36467: PUSH
36468: LD_INT 4
36470: MOD
36471: PUSH
36472: LD_INT 1
36474: PLUS
36475: PPUSH
36476: CALL_OW 259
36480: PUSH
36481: LD_INT 1
36483: PLUS
36484: PPUSH
36485: CALL_OW 237
36489: GO 36391
36491: POP
36492: POP
// end ;
36493: PPOPN 3
36495: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
36496: LD_EXP 70
36500: PUSH
36501: LD_EXP 78
36505: AND
36506: IFFALSE 36526
36508: GO 36510
36510: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
36511: LD_INT 4
36513: PPUSH
36514: LD_OWVAR 2
36518: PPUSH
36519: LD_INT 0
36521: PPUSH
36522: CALL_OW 324
36526: END
// every 0 0$1 trigger StreamModeActive and sShovel do
36527: LD_EXP 70
36531: PUSH
36532: LD_EXP 107
36536: AND
36537: IFFALSE 36557
36539: GO 36541
36541: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
36542: LD_INT 19
36544: PPUSH
36545: LD_OWVAR 2
36549: PPUSH
36550: LD_INT 0
36552: PPUSH
36553: CALL_OW 324
36557: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
36558: LD_EXP 70
36562: PUSH
36563: LD_EXP 79
36567: AND
36568: IFFALSE 36670
36570: GO 36572
36572: DISABLE
36573: LD_INT 0
36575: PPUSH
36576: PPUSH
// begin enable ;
36577: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
36578: LD_ADDR_VAR 0 2
36582: PUSH
36583: LD_INT 22
36585: PUSH
36586: LD_OWVAR 2
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 2
36597: PUSH
36598: LD_INT 34
36600: PUSH
36601: LD_INT 11
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 34
36610: PUSH
36611: LD_INT 30
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: LIST
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PPUSH
36627: CALL_OW 69
36631: ST_TO_ADDR
// if not tmp then
36632: LD_VAR 0 2
36636: NOT
36637: IFFALSE 36641
// exit ;
36639: GO 36670
// for i in tmp do
36641: LD_ADDR_VAR 0 1
36645: PUSH
36646: LD_VAR 0 2
36650: PUSH
36651: FOR_IN
36652: IFFALSE 36668
// begin SetLives ( i , 0 ) ;
36654: LD_VAR 0 1
36658: PPUSH
36659: LD_INT 0
36661: PPUSH
36662: CALL_OW 234
// end ;
36666: GO 36651
36668: POP
36669: POP
// end ;
36670: PPOPN 2
36672: END
// every 0 0$1 trigger StreamModeActive and sBunker do
36673: LD_EXP 70
36677: PUSH
36678: LD_EXP 80
36682: AND
36683: IFFALSE 36703
36685: GO 36687
36687: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
36688: LD_INT 32
36690: PPUSH
36691: LD_OWVAR 2
36695: PPUSH
36696: LD_INT 0
36698: PPUSH
36699: CALL_OW 324
36703: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
36704: LD_EXP 70
36708: PUSH
36709: LD_EXP 81
36713: AND
36714: IFFALSE 36895
36716: GO 36718
36718: DISABLE
36719: LD_INT 0
36721: PPUSH
36722: PPUSH
36723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
36724: LD_ADDR_VAR 0 2
36728: PUSH
36729: LD_INT 22
36731: PUSH
36732: LD_OWVAR 2
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 33
36743: PUSH
36744: LD_INT 3
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PPUSH
36755: CALL_OW 69
36759: ST_TO_ADDR
// if not tmp then
36760: LD_VAR 0 2
36764: NOT
36765: IFFALSE 36769
// exit ;
36767: GO 36895
// side := 0 ;
36769: LD_ADDR_VAR 0 3
36773: PUSH
36774: LD_INT 0
36776: ST_TO_ADDR
// for i := 1 to 8 do
36777: LD_ADDR_VAR 0 1
36781: PUSH
36782: DOUBLE
36783: LD_INT 1
36785: DEC
36786: ST_TO_ADDR
36787: LD_INT 8
36789: PUSH
36790: FOR_TO
36791: IFFALSE 36839
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
36793: LD_OWVAR 2
36797: PUSH
36798: LD_VAR 0 1
36802: NONEQUAL
36803: PUSH
36804: LD_OWVAR 2
36808: PPUSH
36809: LD_VAR 0 1
36813: PPUSH
36814: CALL_OW 81
36818: PUSH
36819: LD_INT 2
36821: EQUAL
36822: AND
36823: IFFALSE 36837
// begin side := i ;
36825: LD_ADDR_VAR 0 3
36829: PUSH
36830: LD_VAR 0 1
36834: ST_TO_ADDR
// break ;
36835: GO 36839
// end ;
36837: GO 36790
36839: POP
36840: POP
// if not side then
36841: LD_VAR 0 3
36845: NOT
36846: IFFALSE 36850
// exit ;
36848: GO 36895
// for i := 1 to tmp do
36850: LD_ADDR_VAR 0 1
36854: PUSH
36855: DOUBLE
36856: LD_INT 1
36858: DEC
36859: ST_TO_ADDR
36860: LD_VAR 0 2
36864: PUSH
36865: FOR_TO
36866: IFFALSE 36893
// if Prob ( 60 ) then
36868: LD_INT 60
36870: PPUSH
36871: CALL_OW 13
36875: IFFALSE 36891
// SetSide ( i , side ) ;
36877: LD_VAR 0 1
36881: PPUSH
36882: LD_VAR 0 3
36886: PPUSH
36887: CALL_OW 235
36891: GO 36865
36893: POP
36894: POP
// end ;
36895: PPOPN 3
36897: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
36898: LD_EXP 70
36902: PUSH
36903: LD_EXP 83
36907: AND
36908: IFFALSE 37027
36910: GO 36912
36912: DISABLE
36913: LD_INT 0
36915: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
36916: LD_ADDR_VAR 0 1
36920: PUSH
36921: LD_INT 22
36923: PUSH
36924: LD_OWVAR 2
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 21
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 3
36945: PUSH
36946: LD_INT 23
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: LIST
36964: PPUSH
36965: CALL_OW 69
36969: PUSH
36970: FOR_IN
36971: IFFALSE 37025
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
36973: LD_VAR 0 1
36977: PPUSH
36978: CALL_OW 257
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: LD_INT 2
36988: PUSH
36989: LD_INT 3
36991: PUSH
36992: LD_INT 4
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: IN
37001: IFFALSE 37023
// SetClass ( un , rand ( 1 , 4 ) ) ;
37003: LD_VAR 0 1
37007: PPUSH
37008: LD_INT 1
37010: PPUSH
37011: LD_INT 4
37013: PPUSH
37014: CALL_OW 12
37018: PPUSH
37019: CALL_OW 336
37023: GO 36970
37025: POP
37026: POP
// end ;
37027: PPOPN 1
37029: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
37030: LD_EXP 70
37034: PUSH
37035: LD_EXP 82
37039: AND
37040: IFFALSE 37119
37042: GO 37044
37044: DISABLE
37045: LD_INT 0
37047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37048: LD_ADDR_VAR 0 1
37052: PUSH
37053: LD_INT 22
37055: PUSH
37056: LD_OWVAR 2
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 21
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PPUSH
37079: CALL_OW 69
37083: ST_TO_ADDR
// if not tmp then
37084: LD_VAR 0 1
37088: NOT
37089: IFFALSE 37093
// exit ;
37091: GO 37119
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
37093: LD_VAR 0 1
37097: PUSH
37098: LD_INT 1
37100: PPUSH
37101: LD_VAR 0 1
37105: PPUSH
37106: CALL_OW 12
37110: ARRAY
37111: PPUSH
37112: LD_INT 100
37114: PPUSH
37115: CALL_OW 234
// end ;
37119: PPOPN 1
37121: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
37122: LD_EXP 70
37126: PUSH
37127: LD_EXP 84
37131: AND
37132: IFFALSE 37230
37134: GO 37136
37136: DISABLE
37137: LD_INT 0
37139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37140: LD_ADDR_VAR 0 1
37144: PUSH
37145: LD_INT 22
37147: PUSH
37148: LD_OWVAR 2
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 21
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PPUSH
37171: CALL_OW 69
37175: ST_TO_ADDR
// if not tmp then
37176: LD_VAR 0 1
37180: NOT
37181: IFFALSE 37185
// exit ;
37183: GO 37230
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
37185: LD_VAR 0 1
37189: PUSH
37190: LD_INT 1
37192: PPUSH
37193: LD_VAR 0 1
37197: PPUSH
37198: CALL_OW 12
37202: ARRAY
37203: PPUSH
37204: LD_INT 1
37206: PPUSH
37207: LD_INT 4
37209: PPUSH
37210: CALL_OW 12
37214: PPUSH
37215: LD_INT 3000
37217: PPUSH
37218: LD_INT 9000
37220: PPUSH
37221: CALL_OW 12
37225: PPUSH
37226: CALL_OW 492
// end ;
37230: PPOPN 1
37232: END
// every 0 0$1 trigger StreamModeActive and sDepot do
37233: LD_EXP 70
37237: PUSH
37238: LD_EXP 85
37242: AND
37243: IFFALSE 37263
37245: GO 37247
37247: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
37248: LD_INT 1
37250: PPUSH
37251: LD_OWVAR 2
37255: PPUSH
37256: LD_INT 0
37258: PPUSH
37259: CALL_OW 324
37263: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
37264: LD_EXP 70
37268: PUSH
37269: LD_EXP 86
37273: AND
37274: IFFALSE 37357
37276: GO 37278
37278: DISABLE
37279: LD_INT 0
37281: PPUSH
37282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37283: LD_ADDR_VAR 0 2
37287: PUSH
37288: LD_INT 22
37290: PUSH
37291: LD_OWVAR 2
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 21
37302: PUSH
37303: LD_INT 3
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PPUSH
37314: CALL_OW 69
37318: ST_TO_ADDR
// if not tmp then
37319: LD_VAR 0 2
37323: NOT
37324: IFFALSE 37328
// exit ;
37326: GO 37357
// for i in tmp do
37328: LD_ADDR_VAR 0 1
37332: PUSH
37333: LD_VAR 0 2
37337: PUSH
37338: FOR_IN
37339: IFFALSE 37355
// SetBLevel ( i , 10 ) ;
37341: LD_VAR 0 1
37345: PPUSH
37346: LD_INT 10
37348: PPUSH
37349: CALL_OW 241
37353: GO 37338
37355: POP
37356: POP
// end ;
37357: PPOPN 2
37359: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
37360: LD_EXP 70
37364: PUSH
37365: LD_EXP 87
37369: AND
37370: IFFALSE 37481
37372: GO 37374
37374: DISABLE
37375: LD_INT 0
37377: PPUSH
37378: PPUSH
37379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37380: LD_ADDR_VAR 0 3
37384: PUSH
37385: LD_INT 22
37387: PUSH
37388: LD_OWVAR 2
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 25
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PPUSH
37411: CALL_OW 69
37415: ST_TO_ADDR
// if not tmp then
37416: LD_VAR 0 3
37420: NOT
37421: IFFALSE 37425
// exit ;
37423: GO 37481
// un := tmp [ rand ( 1 , tmp ) ] ;
37425: LD_ADDR_VAR 0 2
37429: PUSH
37430: LD_VAR 0 3
37434: PUSH
37435: LD_INT 1
37437: PPUSH
37438: LD_VAR 0 3
37442: PPUSH
37443: CALL_OW 12
37447: ARRAY
37448: ST_TO_ADDR
// if Crawls ( un ) then
37449: LD_VAR 0 2
37453: PPUSH
37454: CALL_OW 318
37458: IFFALSE 37469
// ComWalk ( un ) ;
37460: LD_VAR 0 2
37464: PPUSH
37465: CALL_OW 138
// SetClass ( un , class_sniper ) ;
37469: LD_VAR 0 2
37473: PPUSH
37474: LD_INT 5
37476: PPUSH
37477: CALL_OW 336
// end ;
37481: PPOPN 3
37483: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
37484: LD_EXP 70
37488: PUSH
37489: LD_EXP 88
37493: AND
37494: PUSH
37495: LD_OWVAR 67
37499: PUSH
37500: LD_INT 4
37502: LESS
37503: AND
37504: IFFALSE 37523
37506: GO 37508
37508: DISABLE
// begin Difficulty := Difficulty + 1 ;
37509: LD_ADDR_OWVAR 67
37513: PUSH
37514: LD_OWVAR 67
37518: PUSH
37519: LD_INT 1
37521: PLUS
37522: ST_TO_ADDR
// end ;
37523: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
37524: LD_EXP 70
37528: PUSH
37529: LD_EXP 89
37533: AND
37534: IFFALSE 37637
37536: GO 37538
37538: DISABLE
37539: LD_INT 0
37541: PPUSH
// begin for i := 1 to 5 do
37542: LD_ADDR_VAR 0 1
37546: PUSH
37547: DOUBLE
37548: LD_INT 1
37550: DEC
37551: ST_TO_ADDR
37552: LD_INT 5
37554: PUSH
37555: FOR_TO
37556: IFFALSE 37635
// begin uc_nation := nation_nature ;
37558: LD_ADDR_OWVAR 21
37562: PUSH
37563: LD_INT 0
37565: ST_TO_ADDR
// uc_side := 0 ;
37566: LD_ADDR_OWVAR 20
37570: PUSH
37571: LD_INT 0
37573: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37574: LD_ADDR_OWVAR 29
37578: PUSH
37579: LD_INT 12
37581: PUSH
37582: LD_INT 12
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: ST_TO_ADDR
// hc_agressivity := 20 ;
37589: LD_ADDR_OWVAR 35
37593: PUSH
37594: LD_INT 20
37596: ST_TO_ADDR
// hc_class := class_tiger ;
37597: LD_ADDR_OWVAR 28
37601: PUSH
37602: LD_INT 14
37604: ST_TO_ADDR
// hc_gallery :=  ;
37605: LD_ADDR_OWVAR 33
37609: PUSH
37610: LD_STRING 
37612: ST_TO_ADDR
// hc_name :=  ;
37613: LD_ADDR_OWVAR 26
37617: PUSH
37618: LD_STRING 
37620: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
37621: CALL_OW 44
37625: PPUSH
37626: LD_INT 0
37628: PPUSH
37629: CALL_OW 51
// end ;
37633: GO 37555
37635: POP
37636: POP
// end ;
37637: PPOPN 1
37639: END
// every 0 0$1 trigger StreamModeActive and sBomb do
37640: LD_EXP 70
37644: PUSH
37645: LD_EXP 90
37649: AND
37650: IFFALSE 37659
37652: GO 37654
37654: DISABLE
// StreamSibBomb ;
37655: CALL 37660 0 0
37659: END
// export function StreamSibBomb ; var i , x , y ; begin
37660: LD_INT 0
37662: PPUSH
37663: PPUSH
37664: PPUSH
37665: PPUSH
// result := false ;
37666: LD_ADDR_VAR 0 1
37670: PUSH
37671: LD_INT 0
37673: ST_TO_ADDR
// for i := 1 to 16 do
37674: LD_ADDR_VAR 0 2
37678: PUSH
37679: DOUBLE
37680: LD_INT 1
37682: DEC
37683: ST_TO_ADDR
37684: LD_INT 16
37686: PUSH
37687: FOR_TO
37688: IFFALSE 37887
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37690: LD_ADDR_VAR 0 3
37694: PUSH
37695: LD_INT 10
37697: PUSH
37698: LD_INT 20
37700: PUSH
37701: LD_INT 30
37703: PUSH
37704: LD_INT 40
37706: PUSH
37707: LD_INT 50
37709: PUSH
37710: LD_INT 60
37712: PUSH
37713: LD_INT 70
37715: PUSH
37716: LD_INT 80
37718: PUSH
37719: LD_INT 90
37721: PUSH
37722: LD_INT 100
37724: PUSH
37725: LD_INT 110
37727: PUSH
37728: LD_INT 120
37730: PUSH
37731: LD_INT 130
37733: PUSH
37734: LD_INT 140
37736: PUSH
37737: LD_INT 150
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: PPUSH
37760: LD_INT 15
37762: PPUSH
37763: CALL_OW 12
37767: ARRAY
37768: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37769: LD_ADDR_VAR 0 4
37773: PUSH
37774: LD_INT 10
37776: PUSH
37777: LD_INT 20
37779: PUSH
37780: LD_INT 30
37782: PUSH
37783: LD_INT 40
37785: PUSH
37786: LD_INT 50
37788: PUSH
37789: LD_INT 60
37791: PUSH
37792: LD_INT 70
37794: PUSH
37795: LD_INT 80
37797: PUSH
37798: LD_INT 90
37800: PUSH
37801: LD_INT 100
37803: PUSH
37804: LD_INT 110
37806: PUSH
37807: LD_INT 120
37809: PUSH
37810: LD_INT 130
37812: PUSH
37813: LD_INT 140
37815: PUSH
37816: LD_INT 150
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: PPUSH
37839: LD_INT 15
37841: PPUSH
37842: CALL_OW 12
37846: ARRAY
37847: ST_TO_ADDR
// if ValidHex ( x , y ) then
37848: LD_VAR 0 3
37852: PPUSH
37853: LD_VAR 0 4
37857: PPUSH
37858: CALL_OW 488
37862: IFFALSE 37885
// begin result := [ x , y ] ;
37864: LD_ADDR_VAR 0 1
37868: PUSH
37869: LD_VAR 0 3
37873: PUSH
37874: LD_VAR 0 4
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: ST_TO_ADDR
// break ;
37883: GO 37887
// end ; end ;
37885: GO 37687
37887: POP
37888: POP
// if result then
37889: LD_VAR 0 1
37893: IFFALSE 37953
// begin ToLua ( playSibBomb() ) ;
37895: LD_STRING playSibBomb()
37897: PPUSH
37898: CALL_OW 559
// wait ( 0 0$14 ) ;
37902: LD_INT 490
37904: PPUSH
37905: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
37909: LD_VAR 0 1
37913: PUSH
37914: LD_INT 1
37916: ARRAY
37917: PPUSH
37918: LD_VAR 0 1
37922: PUSH
37923: LD_INT 2
37925: ARRAY
37926: PPUSH
37927: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
37931: LD_VAR 0 1
37935: PUSH
37936: LD_INT 1
37938: ARRAY
37939: PPUSH
37940: LD_VAR 0 1
37944: PUSH
37945: LD_INT 2
37947: ARRAY
37948: PPUSH
37949: CALL_OW 429
// end ; end ;
37953: LD_VAR 0 1
37957: RET
// every 0 0$1 trigger StreamModeActive and sReset do
37958: LD_EXP 70
37962: PUSH
37963: LD_EXP 92
37967: AND
37968: IFFALSE 37980
37970: GO 37972
37972: DISABLE
// YouLost (  ) ;
37973: LD_STRING 
37975: PPUSH
37976: CALL_OW 104
37980: END
// every 0 0$1 trigger StreamModeActive and sFog do
37981: LD_EXP 70
37985: PUSH
37986: LD_EXP 91
37990: AND
37991: IFFALSE 38005
37993: GO 37995
37995: DISABLE
// FogOff ( your_side ) ;
37996: LD_OWVAR 2
38000: PPUSH
38001: CALL_OW 344
38005: END
// every 0 0$1 trigger StreamModeActive and sSun do
38006: LD_EXP 70
38010: PUSH
38011: LD_EXP 93
38015: AND
38016: IFFALSE 38044
38018: GO 38020
38020: DISABLE
// begin solar_recharge_percent := 0 ;
38021: LD_ADDR_OWVAR 79
38025: PUSH
38026: LD_INT 0
38028: ST_TO_ADDR
// wait ( 5 5$00 ) ;
38029: LD_INT 10500
38031: PPUSH
38032: CALL_OW 67
// solar_recharge_percent := 100 ;
38036: LD_ADDR_OWVAR 79
38040: PUSH
38041: LD_INT 100
38043: ST_TO_ADDR
// end ;
38044: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
38045: LD_EXP 70
38049: PUSH
38050: LD_EXP 94
38054: AND
38055: IFFALSE 38294
38057: GO 38059
38059: DISABLE
38060: LD_INT 0
38062: PPUSH
38063: PPUSH
38064: PPUSH
// begin tmp := [ ] ;
38065: LD_ADDR_VAR 0 3
38069: PUSH
38070: EMPTY
38071: ST_TO_ADDR
// for i := 1 to 6 do
38072: LD_ADDR_VAR 0 1
38076: PUSH
38077: DOUBLE
38078: LD_INT 1
38080: DEC
38081: ST_TO_ADDR
38082: LD_INT 6
38084: PUSH
38085: FOR_TO
38086: IFFALSE 38191
// begin uc_nation := nation_nature ;
38088: LD_ADDR_OWVAR 21
38092: PUSH
38093: LD_INT 0
38095: ST_TO_ADDR
// uc_side := 0 ;
38096: LD_ADDR_OWVAR 20
38100: PUSH
38101: LD_INT 0
38103: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
38104: LD_ADDR_OWVAR 29
38108: PUSH
38109: LD_INT 12
38111: PUSH
38112: LD_INT 12
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: ST_TO_ADDR
// hc_agressivity := 20 ;
38119: LD_ADDR_OWVAR 35
38123: PUSH
38124: LD_INT 20
38126: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
38127: LD_ADDR_OWVAR 28
38131: PUSH
38132: LD_INT 17
38134: ST_TO_ADDR
// hc_gallery :=  ;
38135: LD_ADDR_OWVAR 33
38139: PUSH
38140: LD_STRING 
38142: ST_TO_ADDR
// hc_name :=  ;
38143: LD_ADDR_OWVAR 26
38147: PUSH
38148: LD_STRING 
38150: ST_TO_ADDR
// un := CreateHuman ;
38151: LD_ADDR_VAR 0 2
38155: PUSH
38156: CALL_OW 44
38160: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
38161: LD_VAR 0 2
38165: PPUSH
38166: LD_INT 1
38168: PPUSH
38169: CALL_OW 51
// tmp := tmp ^ un ;
38173: LD_ADDR_VAR 0 3
38177: PUSH
38178: LD_VAR 0 3
38182: PUSH
38183: LD_VAR 0 2
38187: ADD
38188: ST_TO_ADDR
// end ;
38189: GO 38085
38191: POP
38192: POP
// repeat wait ( 0 0$1 ) ;
38193: LD_INT 35
38195: PPUSH
38196: CALL_OW 67
// for un in tmp do
38200: LD_ADDR_VAR 0 2
38204: PUSH
38205: LD_VAR 0 3
38209: PUSH
38210: FOR_IN
38211: IFFALSE 38285
// begin if IsDead ( un ) then
38213: LD_VAR 0 2
38217: PPUSH
38218: CALL_OW 301
38222: IFFALSE 38242
// begin tmp := tmp diff un ;
38224: LD_ADDR_VAR 0 3
38228: PUSH
38229: LD_VAR 0 3
38233: PUSH
38234: LD_VAR 0 2
38238: DIFF
38239: ST_TO_ADDR
// continue ;
38240: GO 38210
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
38242: LD_VAR 0 2
38246: PPUSH
38247: LD_INT 3
38249: PUSH
38250: LD_INT 22
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PPUSH
38264: CALL_OW 69
38268: PPUSH
38269: LD_VAR 0 2
38273: PPUSH
38274: CALL_OW 74
38278: PPUSH
38279: CALL_OW 115
// end ;
38283: GO 38210
38285: POP
38286: POP
// until not tmp ;
38287: LD_VAR 0 3
38291: NOT
38292: IFFALSE 38193
// end ;
38294: PPOPN 3
38296: END
// every 0 0$1 trigger StreamModeActive and sTroll do
38297: LD_EXP 70
38301: PUSH
38302: LD_EXP 95
38306: AND
38307: IFFALSE 38361
38309: GO 38311
38311: DISABLE
// begin ToLua ( displayTroll(); ) ;
38312: LD_STRING displayTroll();
38314: PPUSH
38315: CALL_OW 559
// wait ( 3 3$00 ) ;
38319: LD_INT 6300
38321: PPUSH
38322: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38326: LD_STRING hideTroll();
38328: PPUSH
38329: CALL_OW 559
// wait ( 1 1$00 ) ;
38333: LD_INT 2100
38335: PPUSH
38336: CALL_OW 67
// ToLua ( displayTroll(); ) ;
38340: LD_STRING displayTroll();
38342: PPUSH
38343: CALL_OW 559
// wait ( 1 1$00 ) ;
38347: LD_INT 2100
38349: PPUSH
38350: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38354: LD_STRING hideTroll();
38356: PPUSH
38357: CALL_OW 559
// end ;
38361: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
38362: LD_EXP 70
38366: PUSH
38367: LD_EXP 96
38371: AND
38372: IFFALSE 38435
38374: GO 38376
38376: DISABLE
38377: LD_INT 0
38379: PPUSH
// begin p := 0 ;
38380: LD_ADDR_VAR 0 1
38384: PUSH
38385: LD_INT 0
38387: ST_TO_ADDR
// repeat game_speed := 1 ;
38388: LD_ADDR_OWVAR 65
38392: PUSH
38393: LD_INT 1
38395: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38396: LD_INT 35
38398: PPUSH
38399: CALL_OW 67
// p := p + 1 ;
38403: LD_ADDR_VAR 0 1
38407: PUSH
38408: LD_VAR 0 1
38412: PUSH
38413: LD_INT 1
38415: PLUS
38416: ST_TO_ADDR
// until p >= 60 ;
38417: LD_VAR 0 1
38421: PUSH
38422: LD_INT 60
38424: GREATEREQUAL
38425: IFFALSE 38388
// game_speed := 4 ;
38427: LD_ADDR_OWVAR 65
38431: PUSH
38432: LD_INT 4
38434: ST_TO_ADDR
// end ;
38435: PPOPN 1
38437: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
38438: LD_EXP 70
38442: PUSH
38443: LD_EXP 97
38447: AND
38448: IFFALSE 38594
38450: GO 38452
38452: DISABLE
38453: LD_INT 0
38455: PPUSH
38456: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38457: LD_ADDR_VAR 0 1
38461: PUSH
38462: LD_INT 22
38464: PUSH
38465: LD_OWVAR 2
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 2
38476: PUSH
38477: LD_INT 30
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 30
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PPUSH
38506: CALL_OW 69
38510: ST_TO_ADDR
// if not depot then
38511: LD_VAR 0 1
38515: NOT
38516: IFFALSE 38520
// exit ;
38518: GO 38594
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
38520: LD_ADDR_VAR 0 2
38524: PUSH
38525: LD_VAR 0 1
38529: PUSH
38530: LD_INT 1
38532: PPUSH
38533: LD_VAR 0 1
38537: PPUSH
38538: CALL_OW 12
38542: ARRAY
38543: PPUSH
38544: CALL_OW 274
38548: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
38549: LD_VAR 0 2
38553: PPUSH
38554: LD_INT 1
38556: PPUSH
38557: LD_INT 0
38559: PPUSH
38560: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
38564: LD_VAR 0 2
38568: PPUSH
38569: LD_INT 2
38571: PPUSH
38572: LD_INT 0
38574: PPUSH
38575: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
38579: LD_VAR 0 2
38583: PPUSH
38584: LD_INT 3
38586: PPUSH
38587: LD_INT 0
38589: PPUSH
38590: CALL_OW 277
// end ;
38594: PPOPN 2
38596: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
38597: LD_EXP 70
38601: PUSH
38602: LD_EXP 98
38606: AND
38607: IFFALSE 38704
38609: GO 38611
38611: DISABLE
38612: LD_INT 0
38614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38615: LD_ADDR_VAR 0 1
38619: PUSH
38620: LD_INT 22
38622: PUSH
38623: LD_OWVAR 2
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 21
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: LD_INT 23
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: LIST
38663: PPUSH
38664: CALL_OW 69
38668: ST_TO_ADDR
// if not tmp then
38669: LD_VAR 0 1
38673: NOT
38674: IFFALSE 38678
// exit ;
38676: GO 38704
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
38678: LD_VAR 0 1
38682: PUSH
38683: LD_INT 1
38685: PPUSH
38686: LD_VAR 0 1
38690: PPUSH
38691: CALL_OW 12
38695: ARRAY
38696: PPUSH
38697: LD_INT 200
38699: PPUSH
38700: CALL_OW 234
// end ;
38704: PPOPN 1
38706: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
38707: LD_EXP 70
38711: PUSH
38712: LD_EXP 99
38716: AND
38717: IFFALSE 38796
38719: GO 38721
38721: DISABLE
38722: LD_INT 0
38724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
38725: LD_ADDR_VAR 0 1
38729: PUSH
38730: LD_INT 22
38732: PUSH
38733: LD_OWVAR 2
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 21
38744: PUSH
38745: LD_INT 2
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PPUSH
38756: CALL_OW 69
38760: ST_TO_ADDR
// if not tmp then
38761: LD_VAR 0 1
38765: NOT
38766: IFFALSE 38770
// exit ;
38768: GO 38796
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
38770: LD_VAR 0 1
38774: PUSH
38775: LD_INT 1
38777: PPUSH
38778: LD_VAR 0 1
38782: PPUSH
38783: CALL_OW 12
38787: ARRAY
38788: PPUSH
38789: LD_INT 60
38791: PPUSH
38792: CALL_OW 234
// end ;
38796: PPOPN 1
38798: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
38799: LD_EXP 70
38803: PUSH
38804: LD_EXP 100
38808: AND
38809: IFFALSE 38908
38811: GO 38813
38813: DISABLE
38814: LD_INT 0
38816: PPUSH
38817: PPUSH
// begin enable ;
38818: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
38819: LD_ADDR_VAR 0 1
38823: PUSH
38824: LD_INT 22
38826: PUSH
38827: LD_OWVAR 2
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 61
38838: PUSH
38839: EMPTY
38840: LIST
38841: PUSH
38842: LD_INT 33
38844: PUSH
38845: LD_INT 2
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: LIST
38856: PPUSH
38857: CALL_OW 69
38861: ST_TO_ADDR
// if not tmp then
38862: LD_VAR 0 1
38866: NOT
38867: IFFALSE 38871
// exit ;
38869: GO 38908
// for i in tmp do
38871: LD_ADDR_VAR 0 2
38875: PUSH
38876: LD_VAR 0 1
38880: PUSH
38881: FOR_IN
38882: IFFALSE 38906
// if IsControledBy ( i ) then
38884: LD_VAR 0 2
38888: PPUSH
38889: CALL_OW 312
38893: IFFALSE 38904
// ComUnlink ( i ) ;
38895: LD_VAR 0 2
38899: PPUSH
38900: CALL_OW 136
38904: GO 38881
38906: POP
38907: POP
// end ;
38908: PPOPN 2
38910: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
38911: LD_EXP 70
38915: PUSH
38916: LD_EXP 101
38920: AND
38921: IFFALSE 39061
38923: GO 38925
38925: DISABLE
38926: LD_INT 0
38928: PPUSH
38929: PPUSH
// begin ToLua ( displayPowell(); ) ;
38930: LD_STRING displayPowell();
38932: PPUSH
38933: CALL_OW 559
// uc_side := 0 ;
38937: LD_ADDR_OWVAR 20
38941: PUSH
38942: LD_INT 0
38944: ST_TO_ADDR
// uc_nation := 2 ;
38945: LD_ADDR_OWVAR 21
38949: PUSH
38950: LD_INT 2
38952: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
38953: LD_ADDR_OWVAR 37
38957: PUSH
38958: LD_INT 14
38960: ST_TO_ADDR
// vc_engine := engine_siberite ;
38961: LD_ADDR_OWVAR 39
38965: PUSH
38966: LD_INT 3
38968: ST_TO_ADDR
// vc_control := control_apeman ;
38969: LD_ADDR_OWVAR 38
38973: PUSH
38974: LD_INT 5
38976: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
38977: LD_ADDR_OWVAR 40
38981: PUSH
38982: LD_INT 29
38984: ST_TO_ADDR
// un := CreateVehicle ;
38985: LD_ADDR_VAR 0 2
38989: PUSH
38990: CALL_OW 45
38994: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38995: LD_VAR 0 2
38999: PPUSH
39000: LD_INT 1
39002: PPUSH
39003: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39007: LD_INT 35
39009: PPUSH
39010: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39014: LD_VAR 0 2
39018: PPUSH
39019: LD_INT 22
39021: PUSH
39022: LD_OWVAR 2
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PPUSH
39031: CALL_OW 69
39035: PPUSH
39036: LD_VAR 0 2
39040: PPUSH
39041: CALL_OW 74
39045: PPUSH
39046: CALL_OW 115
// until IsDead ( un ) ;
39050: LD_VAR 0 2
39054: PPUSH
39055: CALL_OW 301
39059: IFFALSE 39007
// end ;
39061: PPOPN 2
39063: END
// every 0 0$1 trigger StreamModeActive and sStu do
39064: LD_EXP 70
39068: PUSH
39069: LD_EXP 109
39073: AND
39074: IFFALSE 39090
39076: GO 39078
39078: DISABLE
// begin ToLua ( displayStucuk(); ) ;
39079: LD_STRING displayStucuk();
39081: PPUSH
39082: CALL_OW 559
// ResetFog ;
39086: CALL_OW 335
// end ;
39090: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
39091: LD_EXP 70
39095: PUSH
39096: LD_EXP 102
39100: AND
39101: IFFALSE 39242
39103: GO 39105
39105: DISABLE
39106: LD_INT 0
39108: PPUSH
39109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39110: LD_ADDR_VAR 0 2
39114: PUSH
39115: LD_INT 22
39117: PUSH
39118: LD_OWVAR 2
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 21
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PPUSH
39141: CALL_OW 69
39145: ST_TO_ADDR
// if not tmp then
39146: LD_VAR 0 2
39150: NOT
39151: IFFALSE 39155
// exit ;
39153: GO 39242
// un := tmp [ rand ( 1 , tmp ) ] ;
39155: LD_ADDR_VAR 0 1
39159: PUSH
39160: LD_VAR 0 2
39164: PUSH
39165: LD_INT 1
39167: PPUSH
39168: LD_VAR 0 2
39172: PPUSH
39173: CALL_OW 12
39177: ARRAY
39178: ST_TO_ADDR
// SetSide ( un , 0 ) ;
39179: LD_VAR 0 1
39183: PPUSH
39184: LD_INT 0
39186: PPUSH
39187: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
39191: LD_VAR 0 1
39195: PPUSH
39196: LD_OWVAR 3
39200: PUSH
39201: LD_VAR 0 1
39205: DIFF
39206: PPUSH
39207: LD_VAR 0 1
39211: PPUSH
39212: CALL_OW 74
39216: PPUSH
39217: CALL_OW 115
// wait ( 0 0$20 ) ;
39221: LD_INT 700
39223: PPUSH
39224: CALL_OW 67
// SetSide ( un , your_side ) ;
39228: LD_VAR 0 1
39232: PPUSH
39233: LD_OWVAR 2
39237: PPUSH
39238: CALL_OW 235
// end ;
39242: PPOPN 2
39244: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
39245: LD_EXP 70
39249: PUSH
39250: LD_EXP 103
39254: AND
39255: IFFALSE 39361
39257: GO 39259
39259: DISABLE
39260: LD_INT 0
39262: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39263: LD_ADDR_VAR 0 1
39267: PUSH
39268: LD_INT 22
39270: PUSH
39271: LD_OWVAR 2
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 2
39282: PUSH
39283: LD_INT 30
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 30
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PPUSH
39312: CALL_OW 69
39316: ST_TO_ADDR
// if not depot then
39317: LD_VAR 0 1
39321: NOT
39322: IFFALSE 39326
// exit ;
39324: GO 39361
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
39326: LD_VAR 0 1
39330: PUSH
39331: LD_INT 1
39333: ARRAY
39334: PPUSH
39335: CALL_OW 250
39339: PPUSH
39340: LD_VAR 0 1
39344: PUSH
39345: LD_INT 1
39347: ARRAY
39348: PPUSH
39349: CALL_OW 251
39353: PPUSH
39354: LD_INT 70
39356: PPUSH
39357: CALL_OW 495
// end ;
39361: PPOPN 1
39363: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
39364: LD_EXP 70
39368: PUSH
39369: LD_EXP 104
39373: AND
39374: IFFALSE 39585
39376: GO 39378
39378: DISABLE
39379: LD_INT 0
39381: PPUSH
39382: PPUSH
39383: PPUSH
39384: PPUSH
39385: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39386: LD_ADDR_VAR 0 5
39390: PUSH
39391: LD_INT 22
39393: PUSH
39394: LD_OWVAR 2
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 21
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PPUSH
39417: CALL_OW 69
39421: ST_TO_ADDR
// if not tmp then
39422: LD_VAR 0 5
39426: NOT
39427: IFFALSE 39431
// exit ;
39429: GO 39585
// for i in tmp do
39431: LD_ADDR_VAR 0 1
39435: PUSH
39436: LD_VAR 0 5
39440: PUSH
39441: FOR_IN
39442: IFFALSE 39583
// begin d := rand ( 0 , 5 ) ;
39444: LD_ADDR_VAR 0 4
39448: PUSH
39449: LD_INT 0
39451: PPUSH
39452: LD_INT 5
39454: PPUSH
39455: CALL_OW 12
39459: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
39460: LD_ADDR_VAR 0 2
39464: PUSH
39465: LD_VAR 0 1
39469: PPUSH
39470: CALL_OW 250
39474: PPUSH
39475: LD_VAR 0 4
39479: PPUSH
39480: LD_INT 3
39482: PPUSH
39483: LD_INT 12
39485: PPUSH
39486: CALL_OW 12
39490: PPUSH
39491: CALL_OW 272
39495: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
39496: LD_ADDR_VAR 0 3
39500: PUSH
39501: LD_VAR 0 1
39505: PPUSH
39506: CALL_OW 251
39510: PPUSH
39511: LD_VAR 0 4
39515: PPUSH
39516: LD_INT 3
39518: PPUSH
39519: LD_INT 12
39521: PPUSH
39522: CALL_OW 12
39526: PPUSH
39527: CALL_OW 273
39531: ST_TO_ADDR
// if ValidHex ( x , y ) then
39532: LD_VAR 0 2
39536: PPUSH
39537: LD_VAR 0 3
39541: PPUSH
39542: CALL_OW 488
39546: IFFALSE 39581
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
39548: LD_VAR 0 1
39552: PPUSH
39553: LD_VAR 0 2
39557: PPUSH
39558: LD_VAR 0 3
39562: PPUSH
39563: LD_INT 3
39565: PPUSH
39566: LD_INT 6
39568: PPUSH
39569: CALL_OW 12
39573: PPUSH
39574: LD_INT 1
39576: PPUSH
39577: CALL_OW 483
// end ;
39581: GO 39441
39583: POP
39584: POP
// end ;
39585: PPOPN 5
39587: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
39588: LD_EXP 70
39592: PUSH
39593: LD_EXP 105
39597: AND
39598: IFFALSE 39692
39600: GO 39602
39602: DISABLE
39603: LD_INT 0
39605: PPUSH
39606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
39607: LD_ADDR_VAR 0 2
39611: PUSH
39612: LD_INT 22
39614: PUSH
39615: LD_OWVAR 2
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 32
39626: PUSH
39627: LD_INT 1
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 21
39636: PUSH
39637: LD_INT 2
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: PPUSH
39649: CALL_OW 69
39653: ST_TO_ADDR
// if not tmp then
39654: LD_VAR 0 2
39658: NOT
39659: IFFALSE 39663
// exit ;
39661: GO 39692
// for i in tmp do
39663: LD_ADDR_VAR 0 1
39667: PUSH
39668: LD_VAR 0 2
39672: PUSH
39673: FOR_IN
39674: IFFALSE 39690
// SetFuel ( i , 0 ) ;
39676: LD_VAR 0 1
39680: PPUSH
39681: LD_INT 0
39683: PPUSH
39684: CALL_OW 240
39688: GO 39673
39690: POP
39691: POP
// end ;
39692: PPOPN 2
39694: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
39695: LD_EXP 70
39699: PUSH
39700: LD_EXP 106
39704: AND
39705: IFFALSE 39771
39707: GO 39709
39709: DISABLE
39710: LD_INT 0
39712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39713: LD_ADDR_VAR 0 1
39717: PUSH
39718: LD_INT 22
39720: PUSH
39721: LD_OWVAR 2
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 30
39732: PUSH
39733: LD_INT 29
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PPUSH
39744: CALL_OW 69
39748: ST_TO_ADDR
// if not tmp then
39749: LD_VAR 0 1
39753: NOT
39754: IFFALSE 39758
// exit ;
39756: GO 39771
// DestroyUnit ( tmp [ 1 ] ) ;
39758: LD_VAR 0 1
39762: PUSH
39763: LD_INT 1
39765: ARRAY
39766: PPUSH
39767: CALL_OW 65
// end ;
39771: PPOPN 1
39773: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
39774: LD_EXP 70
39778: PUSH
39779: LD_EXP 108
39783: AND
39784: IFFALSE 39913
39786: GO 39788
39788: DISABLE
39789: LD_INT 0
39791: PPUSH
// begin uc_side := 0 ;
39792: LD_ADDR_OWVAR 20
39796: PUSH
39797: LD_INT 0
39799: ST_TO_ADDR
// uc_nation := nation_arabian ;
39800: LD_ADDR_OWVAR 21
39804: PUSH
39805: LD_INT 2
39807: ST_TO_ADDR
// hc_gallery :=  ;
39808: LD_ADDR_OWVAR 33
39812: PUSH
39813: LD_STRING 
39815: ST_TO_ADDR
// hc_name :=  ;
39816: LD_ADDR_OWVAR 26
39820: PUSH
39821: LD_STRING 
39823: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
39824: LD_INT 1
39826: PPUSH
39827: LD_INT 11
39829: PPUSH
39830: LD_INT 10
39832: PPUSH
39833: CALL_OW 380
// un := CreateHuman ;
39837: LD_ADDR_VAR 0 1
39841: PUSH
39842: CALL_OW 44
39846: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39847: LD_VAR 0 1
39851: PPUSH
39852: LD_INT 1
39854: PPUSH
39855: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39859: LD_INT 35
39861: PPUSH
39862: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39866: LD_VAR 0 1
39870: PPUSH
39871: LD_INT 22
39873: PUSH
39874: LD_OWVAR 2
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PPUSH
39883: CALL_OW 69
39887: PPUSH
39888: LD_VAR 0 1
39892: PPUSH
39893: CALL_OW 74
39897: PPUSH
39898: CALL_OW 115
// until IsDead ( un ) ;
39902: LD_VAR 0 1
39906: PPUSH
39907: CALL_OW 301
39911: IFFALSE 39859
// end ;
39913: PPOPN 1
39915: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
39916: LD_EXP 70
39920: PUSH
39921: LD_EXP 110
39925: AND
39926: IFFALSE 39938
39928: GO 39930
39930: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
39931: LD_STRING earthquake(getX(game), 0, 32)
39933: PPUSH
39934: CALL_OW 559
39938: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
39939: LD_EXP 70
39943: PUSH
39944: LD_EXP 111
39948: AND
39949: IFFALSE 40040
39951: GO 39953
39953: DISABLE
39954: LD_INT 0
39956: PPUSH
// begin enable ;
39957: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
39958: LD_ADDR_VAR 0 1
39962: PUSH
39963: LD_INT 22
39965: PUSH
39966: LD_OWVAR 2
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 21
39977: PUSH
39978: LD_INT 2
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 33
39987: PUSH
39988: LD_INT 3
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: LIST
39999: PPUSH
40000: CALL_OW 69
40004: ST_TO_ADDR
// if not tmp then
40005: LD_VAR 0 1
40009: NOT
40010: IFFALSE 40014
// exit ;
40012: GO 40040
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40014: LD_VAR 0 1
40018: PUSH
40019: LD_INT 1
40021: PPUSH
40022: LD_VAR 0 1
40026: PPUSH
40027: CALL_OW 12
40031: ARRAY
40032: PPUSH
40033: LD_INT 1
40035: PPUSH
40036: CALL_OW 234
// end ;
40040: PPOPN 1
40042: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
40043: LD_EXP 70
40047: PUSH
40048: LD_EXP 112
40052: AND
40053: IFFALSE 40194
40055: GO 40057
40057: DISABLE
40058: LD_INT 0
40060: PPUSH
40061: PPUSH
40062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40063: LD_ADDR_VAR 0 3
40067: PUSH
40068: LD_INT 22
40070: PUSH
40071: LD_OWVAR 2
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 25
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PPUSH
40094: CALL_OW 69
40098: ST_TO_ADDR
// if not tmp then
40099: LD_VAR 0 3
40103: NOT
40104: IFFALSE 40108
// exit ;
40106: GO 40194
// un := tmp [ rand ( 1 , tmp ) ] ;
40108: LD_ADDR_VAR 0 2
40112: PUSH
40113: LD_VAR 0 3
40117: PUSH
40118: LD_INT 1
40120: PPUSH
40121: LD_VAR 0 3
40125: PPUSH
40126: CALL_OW 12
40130: ARRAY
40131: ST_TO_ADDR
// if Crawls ( un ) then
40132: LD_VAR 0 2
40136: PPUSH
40137: CALL_OW 318
40141: IFFALSE 40152
// ComWalk ( un ) ;
40143: LD_VAR 0 2
40147: PPUSH
40148: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
40152: LD_VAR 0 2
40156: PPUSH
40157: LD_INT 9
40159: PPUSH
40160: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
40164: LD_INT 28
40166: PPUSH
40167: LD_OWVAR 2
40171: PPUSH
40172: LD_INT 2
40174: PPUSH
40175: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
40179: LD_INT 29
40181: PPUSH
40182: LD_OWVAR 2
40186: PPUSH
40187: LD_INT 2
40189: PPUSH
40190: CALL_OW 322
// end ;
40194: PPOPN 3
40196: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
40197: LD_EXP 70
40201: PUSH
40202: LD_EXP 113
40206: AND
40207: IFFALSE 40318
40209: GO 40211
40211: DISABLE
40212: LD_INT 0
40214: PPUSH
40215: PPUSH
40216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40217: LD_ADDR_VAR 0 3
40221: PUSH
40222: LD_INT 22
40224: PUSH
40225: LD_OWVAR 2
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 25
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PPUSH
40248: CALL_OW 69
40252: ST_TO_ADDR
// if not tmp then
40253: LD_VAR 0 3
40257: NOT
40258: IFFALSE 40262
// exit ;
40260: GO 40318
// un := tmp [ rand ( 1 , tmp ) ] ;
40262: LD_ADDR_VAR 0 2
40266: PUSH
40267: LD_VAR 0 3
40271: PUSH
40272: LD_INT 1
40274: PPUSH
40275: LD_VAR 0 3
40279: PPUSH
40280: CALL_OW 12
40284: ARRAY
40285: ST_TO_ADDR
// if Crawls ( un ) then
40286: LD_VAR 0 2
40290: PPUSH
40291: CALL_OW 318
40295: IFFALSE 40306
// ComWalk ( un ) ;
40297: LD_VAR 0 2
40301: PPUSH
40302: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40306: LD_VAR 0 2
40310: PPUSH
40311: LD_INT 8
40313: PPUSH
40314: CALL_OW 336
// end ;
40318: PPOPN 3
40320: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
40321: LD_EXP 70
40325: PUSH
40326: LD_EXP 114
40330: AND
40331: IFFALSE 40475
40333: GO 40335
40335: DISABLE
40336: LD_INT 0
40338: PPUSH
40339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
40340: LD_ADDR_VAR 0 2
40344: PUSH
40345: LD_INT 22
40347: PUSH
40348: LD_OWVAR 2
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 21
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: LD_INT 34
40372: PUSH
40373: LD_INT 12
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 34
40382: PUSH
40383: LD_INT 51
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 34
40392: PUSH
40393: LD_INT 32
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: LIST
40410: PPUSH
40411: CALL_OW 69
40415: ST_TO_ADDR
// if not tmp then
40416: LD_VAR 0 2
40420: NOT
40421: IFFALSE 40425
// exit ;
40423: GO 40475
// for i in tmp do
40425: LD_ADDR_VAR 0 1
40429: PUSH
40430: LD_VAR 0 2
40434: PUSH
40435: FOR_IN
40436: IFFALSE 40473
// if GetCargo ( i , mat_artifact ) = 0 then
40438: LD_VAR 0 1
40442: PPUSH
40443: LD_INT 4
40445: PPUSH
40446: CALL_OW 289
40450: PUSH
40451: LD_INT 0
40453: EQUAL
40454: IFFALSE 40471
// SetCargo ( i , mat_siberit , 100 ) ;
40456: LD_VAR 0 1
40460: PPUSH
40461: LD_INT 3
40463: PPUSH
40464: LD_INT 100
40466: PPUSH
40467: CALL_OW 290
40471: GO 40435
40473: POP
40474: POP
// end ;
40475: PPOPN 2
40477: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
40478: LD_EXP 70
40482: PUSH
40483: LD_EXP 115
40487: AND
40488: IFFALSE 40671
40490: GO 40492
40492: DISABLE
40493: LD_INT 0
40495: PPUSH
40496: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40497: LD_ADDR_VAR 0 2
40501: PUSH
40502: LD_INT 22
40504: PUSH
40505: LD_OWVAR 2
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PPUSH
40514: CALL_OW 69
40518: ST_TO_ADDR
// if not tmp then
40519: LD_VAR 0 2
40523: NOT
40524: IFFALSE 40528
// exit ;
40526: GO 40671
// for i := 1 to 2 do
40528: LD_ADDR_VAR 0 1
40532: PUSH
40533: DOUBLE
40534: LD_INT 1
40536: DEC
40537: ST_TO_ADDR
40538: LD_INT 2
40540: PUSH
40541: FOR_TO
40542: IFFALSE 40669
// begin uc_side := your_side ;
40544: LD_ADDR_OWVAR 20
40548: PUSH
40549: LD_OWVAR 2
40553: ST_TO_ADDR
// uc_nation := nation_american ;
40554: LD_ADDR_OWVAR 21
40558: PUSH
40559: LD_INT 1
40561: ST_TO_ADDR
// vc_chassis := us_morphling ;
40562: LD_ADDR_OWVAR 37
40566: PUSH
40567: LD_INT 5
40569: ST_TO_ADDR
// vc_engine := engine_siberite ;
40570: LD_ADDR_OWVAR 39
40574: PUSH
40575: LD_INT 3
40577: ST_TO_ADDR
// vc_control := control_computer ;
40578: LD_ADDR_OWVAR 38
40582: PUSH
40583: LD_INT 3
40585: ST_TO_ADDR
// vc_weapon := us_double_laser ;
40586: LD_ADDR_OWVAR 40
40590: PUSH
40591: LD_INT 10
40593: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
40594: LD_VAR 0 2
40598: PUSH
40599: LD_INT 1
40601: ARRAY
40602: PPUSH
40603: CALL_OW 310
40607: NOT
40608: IFFALSE 40655
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
40610: CALL_OW 45
40614: PPUSH
40615: LD_VAR 0 2
40619: PUSH
40620: LD_INT 1
40622: ARRAY
40623: PPUSH
40624: CALL_OW 250
40628: PPUSH
40629: LD_VAR 0 2
40633: PUSH
40634: LD_INT 1
40636: ARRAY
40637: PPUSH
40638: CALL_OW 251
40642: PPUSH
40643: LD_INT 12
40645: PPUSH
40646: LD_INT 1
40648: PPUSH
40649: CALL_OW 50
40653: GO 40667
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
40655: CALL_OW 45
40659: PPUSH
40660: LD_INT 1
40662: PPUSH
40663: CALL_OW 51
// end ;
40667: GO 40541
40669: POP
40670: POP
// end ;
40671: PPOPN 2
40673: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
40674: LD_EXP 70
40678: PUSH
40679: LD_EXP 116
40683: AND
40684: IFFALSE 40906
40686: GO 40688
40688: DISABLE
40689: LD_INT 0
40691: PPUSH
40692: PPUSH
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40697: LD_ADDR_VAR 0 6
40701: PUSH
40702: LD_INT 22
40704: PUSH
40705: LD_OWVAR 2
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 21
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 3
40726: PUSH
40727: LD_INT 23
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: LIST
40745: PPUSH
40746: CALL_OW 69
40750: ST_TO_ADDR
// if not tmp then
40751: LD_VAR 0 6
40755: NOT
40756: IFFALSE 40760
// exit ;
40758: GO 40906
// s1 := rand ( 1 , 4 ) ;
40760: LD_ADDR_VAR 0 2
40764: PUSH
40765: LD_INT 1
40767: PPUSH
40768: LD_INT 4
40770: PPUSH
40771: CALL_OW 12
40775: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
40776: LD_ADDR_VAR 0 4
40780: PUSH
40781: LD_VAR 0 6
40785: PUSH
40786: LD_INT 1
40788: ARRAY
40789: PPUSH
40790: LD_VAR 0 2
40794: PPUSH
40795: CALL_OW 259
40799: ST_TO_ADDR
// if s1 = 1 then
40800: LD_VAR 0 2
40804: PUSH
40805: LD_INT 1
40807: EQUAL
40808: IFFALSE 40828
// s2 := rand ( 2 , 4 ) else
40810: LD_ADDR_VAR 0 3
40814: PUSH
40815: LD_INT 2
40817: PPUSH
40818: LD_INT 4
40820: PPUSH
40821: CALL_OW 12
40825: ST_TO_ADDR
40826: GO 40836
// s2 := 1 ;
40828: LD_ADDR_VAR 0 3
40832: PUSH
40833: LD_INT 1
40835: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
40836: LD_ADDR_VAR 0 5
40840: PUSH
40841: LD_VAR 0 6
40845: PUSH
40846: LD_INT 1
40848: ARRAY
40849: PPUSH
40850: LD_VAR 0 3
40854: PPUSH
40855: CALL_OW 259
40859: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
40860: LD_VAR 0 6
40864: PUSH
40865: LD_INT 1
40867: ARRAY
40868: PPUSH
40869: LD_VAR 0 2
40873: PPUSH
40874: LD_VAR 0 5
40878: PPUSH
40879: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
40883: LD_VAR 0 6
40887: PUSH
40888: LD_INT 1
40890: ARRAY
40891: PPUSH
40892: LD_VAR 0 3
40896: PPUSH
40897: LD_VAR 0 4
40901: PPUSH
40902: CALL_OW 237
// end ;
40906: PPOPN 6
40908: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
40909: LD_EXP 70
40913: PUSH
40914: LD_EXP 117
40918: AND
40919: IFFALSE 40998
40921: GO 40923
40923: DISABLE
40924: LD_INT 0
40926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
40927: LD_ADDR_VAR 0 1
40931: PUSH
40932: LD_INT 22
40934: PUSH
40935: LD_OWVAR 2
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 30
40946: PUSH
40947: LD_INT 3
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PPUSH
40958: CALL_OW 69
40962: ST_TO_ADDR
// if not tmp then
40963: LD_VAR 0 1
40967: NOT
40968: IFFALSE 40972
// exit ;
40970: GO 40998
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40972: LD_VAR 0 1
40976: PUSH
40977: LD_INT 1
40979: PPUSH
40980: LD_VAR 0 1
40984: PPUSH
40985: CALL_OW 12
40989: ARRAY
40990: PPUSH
40991: LD_INT 1
40993: PPUSH
40994: CALL_OW 234
// end ;
40998: PPOPN 1
41000: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
41001: LD_EXP 70
41005: PUSH
41006: LD_EXP 118
41010: AND
41011: IFFALSE 41123
41013: GO 41015
41015: DISABLE
41016: LD_INT 0
41018: PPUSH
41019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
41020: LD_ADDR_VAR 0 2
41024: PUSH
41025: LD_INT 22
41027: PUSH
41028: LD_OWVAR 2
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: LD_INT 30
41042: PUSH
41043: LD_INT 27
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 30
41052: PUSH
41053: LD_INT 26
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 30
41062: PUSH
41063: LD_INT 28
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PPUSH
41080: CALL_OW 69
41084: ST_TO_ADDR
// if not tmp then
41085: LD_VAR 0 2
41089: NOT
41090: IFFALSE 41094
// exit ;
41092: GO 41123
// for i in tmp do
41094: LD_ADDR_VAR 0 1
41098: PUSH
41099: LD_VAR 0 2
41103: PUSH
41104: FOR_IN
41105: IFFALSE 41121
// SetLives ( i , 1 ) ;
41107: LD_VAR 0 1
41111: PPUSH
41112: LD_INT 1
41114: PPUSH
41115: CALL_OW 234
41119: GO 41104
41121: POP
41122: POP
// end ;
41123: PPOPN 2
41125: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
41126: LD_EXP 70
41130: PUSH
41131: LD_EXP 119
41135: AND
41136: IFFALSE 41423
41138: GO 41140
41140: DISABLE
41141: LD_INT 0
41143: PPUSH
41144: PPUSH
41145: PPUSH
// begin i := rand ( 1 , 7 ) ;
41146: LD_ADDR_VAR 0 1
41150: PUSH
41151: LD_INT 1
41153: PPUSH
41154: LD_INT 7
41156: PPUSH
41157: CALL_OW 12
41161: ST_TO_ADDR
// case i of 1 :
41162: LD_VAR 0 1
41166: PUSH
41167: LD_INT 1
41169: DOUBLE
41170: EQUAL
41171: IFTRUE 41175
41173: GO 41185
41175: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
41176: LD_STRING earthquake(getX(game), 0, 32)
41178: PPUSH
41179: CALL_OW 559
41183: GO 41423
41185: LD_INT 2
41187: DOUBLE
41188: EQUAL
41189: IFTRUE 41193
41191: GO 41207
41193: POP
// begin ToLua ( displayStucuk(); ) ;
41194: LD_STRING displayStucuk();
41196: PPUSH
41197: CALL_OW 559
// ResetFog ;
41201: CALL_OW 335
// end ; 3 :
41205: GO 41423
41207: LD_INT 3
41209: DOUBLE
41210: EQUAL
41211: IFTRUE 41215
41213: GO 41319
41215: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41216: LD_ADDR_VAR 0 2
41220: PUSH
41221: LD_INT 22
41223: PUSH
41224: LD_OWVAR 2
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 25
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PPUSH
41247: CALL_OW 69
41251: ST_TO_ADDR
// if not tmp then
41252: LD_VAR 0 2
41256: NOT
41257: IFFALSE 41261
// exit ;
41259: GO 41423
// un := tmp [ rand ( 1 , tmp ) ] ;
41261: LD_ADDR_VAR 0 3
41265: PUSH
41266: LD_VAR 0 2
41270: PUSH
41271: LD_INT 1
41273: PPUSH
41274: LD_VAR 0 2
41278: PPUSH
41279: CALL_OW 12
41283: ARRAY
41284: ST_TO_ADDR
// if Crawls ( un ) then
41285: LD_VAR 0 3
41289: PPUSH
41290: CALL_OW 318
41294: IFFALSE 41305
// ComWalk ( un ) ;
41296: LD_VAR 0 3
41300: PPUSH
41301: CALL_OW 138
// SetClass ( un , class_mortar ) ;
41305: LD_VAR 0 3
41309: PPUSH
41310: LD_INT 8
41312: PPUSH
41313: CALL_OW 336
// end ; 4 :
41317: GO 41423
41319: LD_INT 4
41321: DOUBLE
41322: EQUAL
41323: IFTRUE 41327
41325: GO 41401
41327: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
41328: LD_ADDR_VAR 0 2
41332: PUSH
41333: LD_INT 22
41335: PUSH
41336: LD_OWVAR 2
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 30
41347: PUSH
41348: LD_INT 29
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PPUSH
41359: CALL_OW 69
41363: ST_TO_ADDR
// if not tmp then
41364: LD_VAR 0 2
41368: NOT
41369: IFFALSE 41373
// exit ;
41371: GO 41423
// CenterNowOnUnits ( tmp [ 1 ] ) ;
41373: LD_VAR 0 2
41377: PUSH
41378: LD_INT 1
41380: ARRAY
41381: PPUSH
41382: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
41386: LD_VAR 0 2
41390: PUSH
41391: LD_INT 1
41393: ARRAY
41394: PPUSH
41395: CALL_OW 65
// end ; 5 .. 7 :
41399: GO 41423
41401: LD_INT 5
41403: DOUBLE
41404: GREATEREQUAL
41405: IFFALSE 41413
41407: LD_INT 7
41409: DOUBLE
41410: LESSEQUAL
41411: IFTRUE 41415
41413: GO 41422
41415: POP
// StreamSibBomb ; end ;
41416: CALL 37660 0 0
41420: GO 41423
41422: POP
// end ;
41423: PPOPN 3
41425: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
41426: LD_EXP 70
41430: PUSH
41431: LD_EXP 120
41435: AND
41436: IFFALSE 41592
41438: GO 41440
41440: DISABLE
41441: LD_INT 0
41443: PPUSH
41444: PPUSH
41445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
41446: LD_ADDR_VAR 0 2
41450: PUSH
41451: LD_INT 81
41453: PUSH
41454: LD_OWVAR 2
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: LD_INT 21
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 21
41478: PUSH
41479: LD_INT 2
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: LIST
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PPUSH
41495: CALL_OW 69
41499: ST_TO_ADDR
// if not tmp then
41500: LD_VAR 0 2
41504: NOT
41505: IFFALSE 41509
// exit ;
41507: GO 41592
// p := 0 ;
41509: LD_ADDR_VAR 0 3
41513: PUSH
41514: LD_INT 0
41516: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41517: LD_INT 35
41519: PPUSH
41520: CALL_OW 67
// p := p + 1 ;
41524: LD_ADDR_VAR 0 3
41528: PUSH
41529: LD_VAR 0 3
41533: PUSH
41534: LD_INT 1
41536: PLUS
41537: ST_TO_ADDR
// for i in tmp do
41538: LD_ADDR_VAR 0 1
41542: PUSH
41543: LD_VAR 0 2
41547: PUSH
41548: FOR_IN
41549: IFFALSE 41580
// if GetLives ( i ) < 1000 then
41551: LD_VAR 0 1
41555: PPUSH
41556: CALL_OW 256
41560: PUSH
41561: LD_INT 1000
41563: LESS
41564: IFFALSE 41578
// SetLives ( i , 1000 ) ;
41566: LD_VAR 0 1
41570: PPUSH
41571: LD_INT 1000
41573: PPUSH
41574: CALL_OW 234
41578: GO 41548
41580: POP
41581: POP
// until p > 20 ;
41582: LD_VAR 0 3
41586: PUSH
41587: LD_INT 20
41589: GREATER
41590: IFFALSE 41517
// end ;
41592: PPOPN 3
41594: END
// every 0 0$1 trigger StreamModeActive and sTime do
41595: LD_EXP 70
41599: PUSH
41600: LD_EXP 121
41604: AND
41605: IFFALSE 41640
41607: GO 41609
41609: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
41610: LD_INT 28
41612: PPUSH
41613: LD_OWVAR 2
41617: PPUSH
41618: LD_INT 2
41620: PPUSH
41621: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
41625: LD_INT 30
41627: PPUSH
41628: LD_OWVAR 2
41632: PPUSH
41633: LD_INT 2
41635: PPUSH
41636: CALL_OW 322
// end ;
41640: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
41641: LD_EXP 70
41645: PUSH
41646: LD_EXP 122
41650: AND
41651: IFFALSE 41772
41653: GO 41655
41655: DISABLE
41656: LD_INT 0
41658: PPUSH
41659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
41660: LD_ADDR_VAR 0 2
41664: PUSH
41665: LD_INT 22
41667: PUSH
41668: LD_OWVAR 2
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 21
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 3
41689: PUSH
41690: LD_INT 23
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: LIST
41708: PPUSH
41709: CALL_OW 69
41713: ST_TO_ADDR
// if not tmp then
41714: LD_VAR 0 2
41718: NOT
41719: IFFALSE 41723
// exit ;
41721: GO 41772
// for i in tmp do
41723: LD_ADDR_VAR 0 1
41727: PUSH
41728: LD_VAR 0 2
41732: PUSH
41733: FOR_IN
41734: IFFALSE 41770
// begin if Crawls ( i ) then
41736: LD_VAR 0 1
41740: PPUSH
41741: CALL_OW 318
41745: IFFALSE 41756
// ComWalk ( i ) ;
41747: LD_VAR 0 1
41751: PPUSH
41752: CALL_OW 138
// SetClass ( i , 2 ) ;
41756: LD_VAR 0 1
41760: PPUSH
41761: LD_INT 2
41763: PPUSH
41764: CALL_OW 336
// end ;
41768: GO 41733
41770: POP
41771: POP
// end ;
41772: PPOPN 2
41774: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
41775: LD_EXP 70
41779: PUSH
41780: LD_EXP 123
41784: AND
41785: IFFALSE 42073
41787: GO 41789
41789: DISABLE
41790: LD_INT 0
41792: PPUSH
41793: PPUSH
41794: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
41795: LD_OWVAR 2
41799: PPUSH
41800: LD_INT 9
41802: PPUSH
41803: LD_INT 1
41805: PPUSH
41806: LD_INT 1
41808: PPUSH
41809: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
41813: LD_INT 9
41815: PPUSH
41816: LD_OWVAR 2
41820: PPUSH
41821: CALL_OW 343
// uc_side := 9 ;
41825: LD_ADDR_OWVAR 20
41829: PUSH
41830: LD_INT 9
41832: ST_TO_ADDR
// uc_nation := 2 ;
41833: LD_ADDR_OWVAR 21
41837: PUSH
41838: LD_INT 2
41840: ST_TO_ADDR
// hc_name := Dark Warrior ;
41841: LD_ADDR_OWVAR 26
41845: PUSH
41846: LD_STRING Dark Warrior
41848: ST_TO_ADDR
// hc_gallery :=  ;
41849: LD_ADDR_OWVAR 33
41853: PUSH
41854: LD_STRING 
41856: ST_TO_ADDR
// hc_noskilllimit := true ;
41857: LD_ADDR_OWVAR 76
41861: PUSH
41862: LD_INT 1
41864: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
41865: LD_ADDR_OWVAR 31
41869: PUSH
41870: LD_INT 30
41872: PUSH
41873: LD_INT 30
41875: PUSH
41876: LD_INT 30
41878: PUSH
41879: LD_INT 30
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: ST_TO_ADDR
// un := CreateHuman ;
41888: LD_ADDR_VAR 0 3
41892: PUSH
41893: CALL_OW 44
41897: ST_TO_ADDR
// hc_noskilllimit := false ;
41898: LD_ADDR_OWVAR 76
41902: PUSH
41903: LD_INT 0
41905: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
41906: LD_VAR 0 3
41910: PPUSH
41911: LD_INT 1
41913: PPUSH
41914: CALL_OW 51
// ToLua ( playRanger() ) ;
41918: LD_STRING playRanger()
41920: PPUSH
41921: CALL_OW 559
// p := 0 ;
41925: LD_ADDR_VAR 0 2
41929: PUSH
41930: LD_INT 0
41932: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41933: LD_INT 35
41935: PPUSH
41936: CALL_OW 67
// p := p + 1 ;
41940: LD_ADDR_VAR 0 2
41944: PUSH
41945: LD_VAR 0 2
41949: PUSH
41950: LD_INT 1
41952: PLUS
41953: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
41954: LD_VAR 0 3
41958: PPUSH
41959: CALL_OW 256
41963: PUSH
41964: LD_INT 1000
41966: LESS
41967: IFFALSE 41981
// SetLives ( un , 1000 ) ;
41969: LD_VAR 0 3
41973: PPUSH
41974: LD_INT 1000
41976: PPUSH
41977: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
41981: LD_VAR 0 3
41985: PPUSH
41986: LD_INT 81
41988: PUSH
41989: LD_OWVAR 2
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 91
42000: PUSH
42001: LD_VAR 0 3
42005: PUSH
42006: LD_INT 30
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: LIST
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PPUSH
42018: CALL_OW 69
42022: PPUSH
42023: LD_VAR 0 3
42027: PPUSH
42028: CALL_OW 74
42032: PPUSH
42033: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
42037: LD_VAR 0 2
42041: PUSH
42042: LD_INT 80
42044: GREATER
42045: PUSH
42046: LD_VAR 0 3
42050: PPUSH
42051: CALL_OW 301
42055: OR
42056: IFFALSE 41933
// if un then
42058: LD_VAR 0 3
42062: IFFALSE 42073
// RemoveUnit ( un ) ;
42064: LD_VAR 0 3
42068: PPUSH
42069: CALL_OW 64
// end ;
42073: PPOPN 3
42075: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
42076: LD_EXP 124
42080: IFFALSE 42196
42082: GO 42084
42084: DISABLE
42085: LD_INT 0
42087: PPUSH
42088: PPUSH
42089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
42090: LD_ADDR_VAR 0 2
42094: PUSH
42095: LD_INT 81
42097: PUSH
42098: LD_OWVAR 2
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 21
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PPUSH
42121: CALL_OW 69
42125: ST_TO_ADDR
// ToLua ( playComputer() ) ;
42126: LD_STRING playComputer()
42128: PPUSH
42129: CALL_OW 559
// if not tmp then
42133: LD_VAR 0 2
42137: NOT
42138: IFFALSE 42142
// exit ;
42140: GO 42196
// for i in tmp do
42142: LD_ADDR_VAR 0 1
42146: PUSH
42147: LD_VAR 0 2
42151: PUSH
42152: FOR_IN
42153: IFFALSE 42194
// for j := 1 to 4 do
42155: LD_ADDR_VAR 0 3
42159: PUSH
42160: DOUBLE
42161: LD_INT 1
42163: DEC
42164: ST_TO_ADDR
42165: LD_INT 4
42167: PUSH
42168: FOR_TO
42169: IFFALSE 42190
// SetSkill ( i , j , 10 ) ;
42171: LD_VAR 0 1
42175: PPUSH
42176: LD_VAR 0 3
42180: PPUSH
42181: LD_INT 10
42183: PPUSH
42184: CALL_OW 237
42188: GO 42168
42190: POP
42191: POP
42192: GO 42152
42194: POP
42195: POP
// end ;
42196: PPOPN 3
42198: END
// every 0 0$1 trigger s30 do var i , tmp ;
42199: LD_EXP 125
42203: IFFALSE 42272
42205: GO 42207
42207: DISABLE
42208: LD_INT 0
42210: PPUSH
42211: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42212: LD_ADDR_VAR 0 2
42216: PUSH
42217: LD_INT 22
42219: PUSH
42220: LD_OWVAR 2
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PPUSH
42229: CALL_OW 69
42233: ST_TO_ADDR
// if not tmp then
42234: LD_VAR 0 2
42238: NOT
42239: IFFALSE 42243
// exit ;
42241: GO 42272
// for i in tmp do
42243: LD_ADDR_VAR 0 1
42247: PUSH
42248: LD_VAR 0 2
42252: PUSH
42253: FOR_IN
42254: IFFALSE 42270
// SetLives ( i , 300 ) ;
42256: LD_VAR 0 1
42260: PPUSH
42261: LD_INT 300
42263: PPUSH
42264: CALL_OW 234
42268: GO 42253
42270: POP
42271: POP
// end ;
42272: PPOPN 2
42274: END
// every 0 0$1 trigger s60 do var i , tmp ;
42275: LD_EXP 126
42279: IFFALSE 42348
42281: GO 42283
42283: DISABLE
42284: LD_INT 0
42286: PPUSH
42287: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42288: LD_ADDR_VAR 0 2
42292: PUSH
42293: LD_INT 22
42295: PUSH
42296: LD_OWVAR 2
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PPUSH
42305: CALL_OW 69
42309: ST_TO_ADDR
// if not tmp then
42310: LD_VAR 0 2
42314: NOT
42315: IFFALSE 42319
// exit ;
42317: GO 42348
// for i in tmp do
42319: LD_ADDR_VAR 0 1
42323: PUSH
42324: LD_VAR 0 2
42328: PUSH
42329: FOR_IN
42330: IFFALSE 42346
// SetLives ( i , 600 ) ;
42332: LD_VAR 0 1
42336: PPUSH
42337: LD_INT 600
42339: PPUSH
42340: CALL_OW 234
42344: GO 42329
42346: POP
42347: POP
// end ;
42348: PPOPN 2
42350: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42351: LD_INT 0
42353: PPUSH
// case cmd of 301 :
42354: LD_VAR 0 1
42358: PUSH
42359: LD_INT 301
42361: DOUBLE
42362: EQUAL
42363: IFTRUE 42367
42365: GO 42399
42367: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
42368: LD_VAR 0 6
42372: PPUSH
42373: LD_VAR 0 7
42377: PPUSH
42378: LD_VAR 0 8
42382: PPUSH
42383: LD_VAR 0 4
42387: PPUSH
42388: LD_VAR 0 5
42392: PPUSH
42393: CALL 43600 0 5
42397: GO 42520
42399: LD_INT 302
42401: DOUBLE
42402: EQUAL
42403: IFTRUE 42407
42405: GO 42444
42407: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
42408: LD_VAR 0 6
42412: PPUSH
42413: LD_VAR 0 7
42417: PPUSH
42418: LD_VAR 0 8
42422: PPUSH
42423: LD_VAR 0 9
42427: PPUSH
42428: LD_VAR 0 4
42432: PPUSH
42433: LD_VAR 0 5
42437: PPUSH
42438: CALL 43691 0 6
42442: GO 42520
42444: LD_INT 303
42446: DOUBLE
42447: EQUAL
42448: IFTRUE 42452
42450: GO 42489
42452: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
42453: LD_VAR 0 6
42457: PPUSH
42458: LD_VAR 0 7
42462: PPUSH
42463: LD_VAR 0 8
42467: PPUSH
42468: LD_VAR 0 9
42472: PPUSH
42473: LD_VAR 0 4
42477: PPUSH
42478: LD_VAR 0 5
42482: PPUSH
42483: CALL 42525 0 6
42487: GO 42520
42489: LD_INT 304
42491: DOUBLE
42492: EQUAL
42493: IFTRUE 42497
42495: GO 42519
42497: POP
// hHackTeleport ( unit , x , y ) ; end ;
42498: LD_VAR 0 2
42502: PPUSH
42503: LD_VAR 0 4
42507: PPUSH
42508: LD_VAR 0 5
42512: PPUSH
42513: CALL 44284 0 3
42517: GO 42520
42519: POP
// end ;
42520: LD_VAR 0 12
42524: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
42525: LD_INT 0
42527: PPUSH
42528: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
42529: LD_VAR 0 1
42533: PUSH
42534: LD_INT 1
42536: LESS
42537: PUSH
42538: LD_VAR 0 1
42542: PUSH
42543: LD_INT 3
42545: GREATER
42546: OR
42547: PUSH
42548: LD_VAR 0 5
42552: PPUSH
42553: LD_VAR 0 6
42557: PPUSH
42558: CALL_OW 428
42562: OR
42563: IFFALSE 42567
// exit ;
42565: GO 43287
// uc_side := your_side ;
42567: LD_ADDR_OWVAR 20
42571: PUSH
42572: LD_OWVAR 2
42576: ST_TO_ADDR
// uc_nation := nation ;
42577: LD_ADDR_OWVAR 21
42581: PUSH
42582: LD_VAR 0 1
42586: ST_TO_ADDR
// bc_level = 1 ;
42587: LD_ADDR_OWVAR 43
42591: PUSH
42592: LD_INT 1
42594: ST_TO_ADDR
// case btype of 1 :
42595: LD_VAR 0 2
42599: PUSH
42600: LD_INT 1
42602: DOUBLE
42603: EQUAL
42604: IFTRUE 42608
42606: GO 42619
42608: POP
// bc_type := b_depot ; 2 :
42609: LD_ADDR_OWVAR 42
42613: PUSH
42614: LD_INT 0
42616: ST_TO_ADDR
42617: GO 43231
42619: LD_INT 2
42621: DOUBLE
42622: EQUAL
42623: IFTRUE 42627
42625: GO 42638
42627: POP
// bc_type := b_warehouse ; 3 :
42628: LD_ADDR_OWVAR 42
42632: PUSH
42633: LD_INT 1
42635: ST_TO_ADDR
42636: GO 43231
42638: LD_INT 3
42640: DOUBLE
42641: EQUAL
42642: IFTRUE 42646
42644: GO 42657
42646: POP
// bc_type := b_lab ; 4 .. 9 :
42647: LD_ADDR_OWVAR 42
42651: PUSH
42652: LD_INT 6
42654: ST_TO_ADDR
42655: GO 43231
42657: LD_INT 4
42659: DOUBLE
42660: GREATEREQUAL
42661: IFFALSE 42669
42663: LD_INT 9
42665: DOUBLE
42666: LESSEQUAL
42667: IFTRUE 42671
42669: GO 42723
42671: POP
// begin bc_type := b_lab_half ;
42672: LD_ADDR_OWVAR 42
42676: PUSH
42677: LD_INT 7
42679: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
42680: LD_ADDR_OWVAR 44
42684: PUSH
42685: LD_INT 10
42687: PUSH
42688: LD_INT 11
42690: PUSH
42691: LD_INT 12
42693: PUSH
42694: LD_INT 15
42696: PUSH
42697: LD_INT 14
42699: PUSH
42700: LD_INT 13
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: PUSH
42711: LD_VAR 0 2
42715: PUSH
42716: LD_INT 3
42718: MINUS
42719: ARRAY
42720: ST_TO_ADDR
// end ; 10 .. 13 :
42721: GO 43231
42723: LD_INT 10
42725: DOUBLE
42726: GREATEREQUAL
42727: IFFALSE 42735
42729: LD_INT 13
42731: DOUBLE
42732: LESSEQUAL
42733: IFTRUE 42737
42735: GO 42814
42737: POP
// begin bc_type := b_lab_full ;
42738: LD_ADDR_OWVAR 42
42742: PUSH
42743: LD_INT 8
42745: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
42746: LD_ADDR_OWVAR 44
42750: PUSH
42751: LD_INT 10
42753: PUSH
42754: LD_INT 12
42756: PUSH
42757: LD_INT 14
42759: PUSH
42760: LD_INT 13
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: PUSH
42769: LD_VAR 0 2
42773: PUSH
42774: LD_INT 9
42776: MINUS
42777: ARRAY
42778: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
42779: LD_ADDR_OWVAR 45
42783: PUSH
42784: LD_INT 11
42786: PUSH
42787: LD_INT 15
42789: PUSH
42790: LD_INT 12
42792: PUSH
42793: LD_INT 15
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: PUSH
42802: LD_VAR 0 2
42806: PUSH
42807: LD_INT 9
42809: MINUS
42810: ARRAY
42811: ST_TO_ADDR
// end ; 14 :
42812: GO 43231
42814: LD_INT 14
42816: DOUBLE
42817: EQUAL
42818: IFTRUE 42822
42820: GO 42833
42822: POP
// bc_type := b_workshop ; 15 :
42823: LD_ADDR_OWVAR 42
42827: PUSH
42828: LD_INT 2
42830: ST_TO_ADDR
42831: GO 43231
42833: LD_INT 15
42835: DOUBLE
42836: EQUAL
42837: IFTRUE 42841
42839: GO 42852
42841: POP
// bc_type := b_factory ; 16 :
42842: LD_ADDR_OWVAR 42
42846: PUSH
42847: LD_INT 3
42849: ST_TO_ADDR
42850: GO 43231
42852: LD_INT 16
42854: DOUBLE
42855: EQUAL
42856: IFTRUE 42860
42858: GO 42871
42860: POP
// bc_type := b_ext_gun ; 17 :
42861: LD_ADDR_OWVAR 42
42865: PUSH
42866: LD_INT 17
42868: ST_TO_ADDR
42869: GO 43231
42871: LD_INT 17
42873: DOUBLE
42874: EQUAL
42875: IFTRUE 42879
42877: GO 42907
42879: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
42880: LD_ADDR_OWVAR 42
42884: PUSH
42885: LD_INT 19
42887: PUSH
42888: LD_INT 23
42890: PUSH
42891: LD_INT 19
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: LIST
42898: PUSH
42899: LD_VAR 0 1
42903: ARRAY
42904: ST_TO_ADDR
42905: GO 43231
42907: LD_INT 18
42909: DOUBLE
42910: EQUAL
42911: IFTRUE 42915
42913: GO 42926
42915: POP
// bc_type := b_ext_radar ; 19 :
42916: LD_ADDR_OWVAR 42
42920: PUSH
42921: LD_INT 20
42923: ST_TO_ADDR
42924: GO 43231
42926: LD_INT 19
42928: DOUBLE
42929: EQUAL
42930: IFTRUE 42934
42932: GO 42945
42934: POP
// bc_type := b_ext_radio ; 20 :
42935: LD_ADDR_OWVAR 42
42939: PUSH
42940: LD_INT 22
42942: ST_TO_ADDR
42943: GO 43231
42945: LD_INT 20
42947: DOUBLE
42948: EQUAL
42949: IFTRUE 42953
42951: GO 42964
42953: POP
// bc_type := b_ext_siberium ; 21 :
42954: LD_ADDR_OWVAR 42
42958: PUSH
42959: LD_INT 21
42961: ST_TO_ADDR
42962: GO 43231
42964: LD_INT 21
42966: DOUBLE
42967: EQUAL
42968: IFTRUE 42972
42970: GO 42983
42972: POP
// bc_type := b_ext_computer ; 22 :
42973: LD_ADDR_OWVAR 42
42977: PUSH
42978: LD_INT 24
42980: ST_TO_ADDR
42981: GO 43231
42983: LD_INT 22
42985: DOUBLE
42986: EQUAL
42987: IFTRUE 42991
42989: GO 43002
42991: POP
// bc_type := b_ext_track ; 23 :
42992: LD_ADDR_OWVAR 42
42996: PUSH
42997: LD_INT 16
42999: ST_TO_ADDR
43000: GO 43231
43002: LD_INT 23
43004: DOUBLE
43005: EQUAL
43006: IFTRUE 43010
43008: GO 43021
43010: POP
// bc_type := b_ext_laser ; 24 :
43011: LD_ADDR_OWVAR 42
43015: PUSH
43016: LD_INT 25
43018: ST_TO_ADDR
43019: GO 43231
43021: LD_INT 24
43023: DOUBLE
43024: EQUAL
43025: IFTRUE 43029
43027: GO 43040
43029: POP
// bc_type := b_control_tower ; 25 :
43030: LD_ADDR_OWVAR 42
43034: PUSH
43035: LD_INT 36
43037: ST_TO_ADDR
43038: GO 43231
43040: LD_INT 25
43042: DOUBLE
43043: EQUAL
43044: IFTRUE 43048
43046: GO 43059
43048: POP
// bc_type := b_breastwork ; 26 :
43049: LD_ADDR_OWVAR 42
43053: PUSH
43054: LD_INT 31
43056: ST_TO_ADDR
43057: GO 43231
43059: LD_INT 26
43061: DOUBLE
43062: EQUAL
43063: IFTRUE 43067
43065: GO 43078
43067: POP
// bc_type := b_bunker ; 27 :
43068: LD_ADDR_OWVAR 42
43072: PUSH
43073: LD_INT 32
43075: ST_TO_ADDR
43076: GO 43231
43078: LD_INT 27
43080: DOUBLE
43081: EQUAL
43082: IFTRUE 43086
43084: GO 43097
43086: POP
// bc_type := b_turret ; 28 :
43087: LD_ADDR_OWVAR 42
43091: PUSH
43092: LD_INT 33
43094: ST_TO_ADDR
43095: GO 43231
43097: LD_INT 28
43099: DOUBLE
43100: EQUAL
43101: IFTRUE 43105
43103: GO 43116
43105: POP
// bc_type := b_armoury ; 29 :
43106: LD_ADDR_OWVAR 42
43110: PUSH
43111: LD_INT 4
43113: ST_TO_ADDR
43114: GO 43231
43116: LD_INT 29
43118: DOUBLE
43119: EQUAL
43120: IFTRUE 43124
43122: GO 43135
43124: POP
// bc_type := b_barracks ; 30 :
43125: LD_ADDR_OWVAR 42
43129: PUSH
43130: LD_INT 5
43132: ST_TO_ADDR
43133: GO 43231
43135: LD_INT 30
43137: DOUBLE
43138: EQUAL
43139: IFTRUE 43143
43141: GO 43154
43143: POP
// bc_type := b_solar_power ; 31 :
43144: LD_ADDR_OWVAR 42
43148: PUSH
43149: LD_INT 27
43151: ST_TO_ADDR
43152: GO 43231
43154: LD_INT 31
43156: DOUBLE
43157: EQUAL
43158: IFTRUE 43162
43160: GO 43173
43162: POP
// bc_type := b_oil_power ; 32 :
43163: LD_ADDR_OWVAR 42
43167: PUSH
43168: LD_INT 26
43170: ST_TO_ADDR
43171: GO 43231
43173: LD_INT 32
43175: DOUBLE
43176: EQUAL
43177: IFTRUE 43181
43179: GO 43192
43181: POP
// bc_type := b_siberite_power ; 33 :
43182: LD_ADDR_OWVAR 42
43186: PUSH
43187: LD_INT 28
43189: ST_TO_ADDR
43190: GO 43231
43192: LD_INT 33
43194: DOUBLE
43195: EQUAL
43196: IFTRUE 43200
43198: GO 43211
43200: POP
// bc_type := b_oil_mine ; 34 :
43201: LD_ADDR_OWVAR 42
43205: PUSH
43206: LD_INT 29
43208: ST_TO_ADDR
43209: GO 43231
43211: LD_INT 34
43213: DOUBLE
43214: EQUAL
43215: IFTRUE 43219
43217: GO 43230
43219: POP
// bc_type := b_siberite_mine ; end ;
43220: LD_ADDR_OWVAR 42
43224: PUSH
43225: LD_INT 30
43227: ST_TO_ADDR
43228: GO 43231
43230: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
43231: LD_ADDR_VAR 0 8
43235: PUSH
43236: LD_VAR 0 5
43240: PPUSH
43241: LD_VAR 0 6
43245: PPUSH
43246: LD_VAR 0 3
43250: PPUSH
43251: CALL_OW 47
43255: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
43256: LD_OWVAR 42
43260: PUSH
43261: LD_INT 32
43263: PUSH
43264: LD_INT 33
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: IN
43271: IFFALSE 43287
// PlaceWeaponTurret ( b , weapon ) ;
43273: LD_VAR 0 8
43277: PPUSH
43278: LD_VAR 0 4
43282: PPUSH
43283: CALL_OW 431
// end ;
43287: LD_VAR 0 7
43291: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
43292: LD_INT 0
43294: PPUSH
43295: PPUSH
43296: PPUSH
43297: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43298: LD_ADDR_VAR 0 4
43302: PUSH
43303: LD_INT 22
43305: PUSH
43306: LD_OWVAR 2
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: PUSH
43318: LD_INT 30
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 30
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: LIST
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PPUSH
43347: CALL_OW 69
43351: ST_TO_ADDR
// if not tmp then
43352: LD_VAR 0 4
43356: NOT
43357: IFFALSE 43361
// exit ;
43359: GO 43420
// for i in tmp do
43361: LD_ADDR_VAR 0 2
43365: PUSH
43366: LD_VAR 0 4
43370: PUSH
43371: FOR_IN
43372: IFFALSE 43418
// for j = 1 to 3 do
43374: LD_ADDR_VAR 0 3
43378: PUSH
43379: DOUBLE
43380: LD_INT 1
43382: DEC
43383: ST_TO_ADDR
43384: LD_INT 3
43386: PUSH
43387: FOR_TO
43388: IFFALSE 43414
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
43390: LD_VAR 0 2
43394: PPUSH
43395: CALL_OW 274
43399: PPUSH
43400: LD_VAR 0 3
43404: PPUSH
43405: LD_INT 99999
43407: PPUSH
43408: CALL_OW 277
43412: GO 43387
43414: POP
43415: POP
43416: GO 43371
43418: POP
43419: POP
// end ;
43420: LD_VAR 0 1
43424: RET
// export function hHackSetLevel10 ; var i , j ; begin
43425: LD_INT 0
43427: PPUSH
43428: PPUSH
43429: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43430: LD_ADDR_VAR 0 2
43434: PUSH
43435: LD_INT 21
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PPUSH
43445: CALL_OW 69
43449: PUSH
43450: FOR_IN
43451: IFFALSE 43503
// if IsSelected ( i ) then
43453: LD_VAR 0 2
43457: PPUSH
43458: CALL_OW 306
43462: IFFALSE 43501
// begin for j := 1 to 4 do
43464: LD_ADDR_VAR 0 3
43468: PUSH
43469: DOUBLE
43470: LD_INT 1
43472: DEC
43473: ST_TO_ADDR
43474: LD_INT 4
43476: PUSH
43477: FOR_TO
43478: IFFALSE 43499
// SetSkill ( i , j , 10 ) ;
43480: LD_VAR 0 2
43484: PPUSH
43485: LD_VAR 0 3
43489: PPUSH
43490: LD_INT 10
43492: PPUSH
43493: CALL_OW 237
43497: GO 43477
43499: POP
43500: POP
// end ;
43501: GO 43450
43503: POP
43504: POP
// end ;
43505: LD_VAR 0 1
43509: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
43510: LD_INT 0
43512: PPUSH
43513: PPUSH
43514: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
43515: LD_ADDR_VAR 0 2
43519: PUSH
43520: LD_INT 22
43522: PUSH
43523: LD_OWVAR 2
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 21
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PPUSH
43546: CALL_OW 69
43550: PUSH
43551: FOR_IN
43552: IFFALSE 43593
// begin for j := 1 to 4 do
43554: LD_ADDR_VAR 0 3
43558: PUSH
43559: DOUBLE
43560: LD_INT 1
43562: DEC
43563: ST_TO_ADDR
43564: LD_INT 4
43566: PUSH
43567: FOR_TO
43568: IFFALSE 43589
// SetSkill ( i , j , 10 ) ;
43570: LD_VAR 0 2
43574: PPUSH
43575: LD_VAR 0 3
43579: PPUSH
43580: LD_INT 10
43582: PPUSH
43583: CALL_OW 237
43587: GO 43567
43589: POP
43590: POP
// end ;
43591: GO 43551
43593: POP
43594: POP
// end ;
43595: LD_VAR 0 1
43599: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
43600: LD_INT 0
43602: PPUSH
// uc_side := your_side ;
43603: LD_ADDR_OWVAR 20
43607: PUSH
43608: LD_OWVAR 2
43612: ST_TO_ADDR
// uc_nation := nation ;
43613: LD_ADDR_OWVAR 21
43617: PUSH
43618: LD_VAR 0 1
43622: ST_TO_ADDR
// InitHc ;
43623: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
43627: LD_INT 0
43629: PPUSH
43630: LD_VAR 0 2
43634: PPUSH
43635: LD_VAR 0 3
43639: PPUSH
43640: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
43644: LD_VAR 0 4
43648: PPUSH
43649: LD_VAR 0 5
43653: PPUSH
43654: CALL_OW 428
43658: PUSH
43659: LD_INT 0
43661: EQUAL
43662: IFFALSE 43686
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
43664: CALL_OW 44
43668: PPUSH
43669: LD_VAR 0 4
43673: PPUSH
43674: LD_VAR 0 5
43678: PPUSH
43679: LD_INT 1
43681: PPUSH
43682: CALL_OW 48
// end ;
43686: LD_VAR 0 6
43690: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
43691: LD_INT 0
43693: PPUSH
43694: PPUSH
// uc_side := your_side ;
43695: LD_ADDR_OWVAR 20
43699: PUSH
43700: LD_OWVAR 2
43704: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
43705: LD_VAR 0 1
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: LD_INT 3
43718: PUSH
43719: LD_INT 4
43721: PUSH
43722: LD_INT 5
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: IN
43732: IFFALSE 43744
// uc_nation := nation_american else
43734: LD_ADDR_OWVAR 21
43738: PUSH
43739: LD_INT 1
43741: ST_TO_ADDR
43742: GO 43787
// if chassis in [ 11 , 12 , 13 , 14 ] then
43744: LD_VAR 0 1
43748: PUSH
43749: LD_INT 11
43751: PUSH
43752: LD_INT 12
43754: PUSH
43755: LD_INT 13
43757: PUSH
43758: LD_INT 14
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: IN
43767: IFFALSE 43779
// uc_nation := nation_arabian else
43769: LD_ADDR_OWVAR 21
43773: PUSH
43774: LD_INT 2
43776: ST_TO_ADDR
43777: GO 43787
// uc_nation := nation_russian ;
43779: LD_ADDR_OWVAR 21
43783: PUSH
43784: LD_INT 3
43786: ST_TO_ADDR
// vc_chassis := chassis ;
43787: LD_ADDR_OWVAR 37
43791: PUSH
43792: LD_VAR 0 1
43796: ST_TO_ADDR
// vc_engine := engine ;
43797: LD_ADDR_OWVAR 39
43801: PUSH
43802: LD_VAR 0 2
43806: ST_TO_ADDR
// vc_control := control ;
43807: LD_ADDR_OWVAR 38
43811: PUSH
43812: LD_VAR 0 3
43816: ST_TO_ADDR
// vc_weapon := weapon ;
43817: LD_ADDR_OWVAR 40
43821: PUSH
43822: LD_VAR 0 4
43826: ST_TO_ADDR
// un := CreateVehicle ;
43827: LD_ADDR_VAR 0 8
43831: PUSH
43832: CALL_OW 45
43836: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
43837: LD_VAR 0 8
43841: PPUSH
43842: LD_INT 0
43844: PPUSH
43845: LD_INT 5
43847: PPUSH
43848: CALL_OW 12
43852: PPUSH
43853: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
43857: LD_VAR 0 8
43861: PPUSH
43862: LD_VAR 0 5
43866: PPUSH
43867: LD_VAR 0 6
43871: PPUSH
43872: LD_INT 1
43874: PPUSH
43875: CALL_OW 48
// end ;
43879: LD_VAR 0 7
43883: RET
// export hInvincible ; every 1 do
43884: GO 43886
43886: DISABLE
// hInvincible := [ ] ;
43887: LD_ADDR_EXP 127
43891: PUSH
43892: EMPTY
43893: ST_TO_ADDR
43894: END
// every 10 do var i ;
43895: GO 43897
43897: DISABLE
43898: LD_INT 0
43900: PPUSH
// begin enable ;
43901: ENABLE
// if not hInvincible then
43902: LD_EXP 127
43906: NOT
43907: IFFALSE 43911
// exit ;
43909: GO 43955
// for i in hInvincible do
43911: LD_ADDR_VAR 0 1
43915: PUSH
43916: LD_EXP 127
43920: PUSH
43921: FOR_IN
43922: IFFALSE 43953
// if GetLives ( i ) < 1000 then
43924: LD_VAR 0 1
43928: PPUSH
43929: CALL_OW 256
43933: PUSH
43934: LD_INT 1000
43936: LESS
43937: IFFALSE 43951
// SetLives ( i , 1000 ) ;
43939: LD_VAR 0 1
43943: PPUSH
43944: LD_INT 1000
43946: PPUSH
43947: CALL_OW 234
43951: GO 43921
43953: POP
43954: POP
// end ;
43955: PPOPN 1
43957: END
// export function hHackInvincible ; var i ; begin
43958: LD_INT 0
43960: PPUSH
43961: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
43962: LD_ADDR_VAR 0 2
43966: PUSH
43967: LD_INT 2
43969: PUSH
43970: LD_INT 21
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 21
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: LIST
43994: PPUSH
43995: CALL_OW 69
43999: PUSH
44000: FOR_IN
44001: IFFALSE 44062
// if IsSelected ( i ) then
44003: LD_VAR 0 2
44007: PPUSH
44008: CALL_OW 306
44012: IFFALSE 44060
// begin if i in hInvincible then
44014: LD_VAR 0 2
44018: PUSH
44019: LD_EXP 127
44023: IN
44024: IFFALSE 44044
// hInvincible := hInvincible diff i else
44026: LD_ADDR_EXP 127
44030: PUSH
44031: LD_EXP 127
44035: PUSH
44036: LD_VAR 0 2
44040: DIFF
44041: ST_TO_ADDR
44042: GO 44060
// hInvincible := hInvincible union i ;
44044: LD_ADDR_EXP 127
44048: PUSH
44049: LD_EXP 127
44053: PUSH
44054: LD_VAR 0 2
44058: UNION
44059: ST_TO_ADDR
// end ;
44060: GO 44000
44062: POP
44063: POP
// end ;
44064: LD_VAR 0 1
44068: RET
// export function hHackInvisible ; var i , j ; begin
44069: LD_INT 0
44071: PPUSH
44072: PPUSH
44073: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
44074: LD_ADDR_VAR 0 2
44078: PUSH
44079: LD_INT 21
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PPUSH
44089: CALL_OW 69
44093: PUSH
44094: FOR_IN
44095: IFFALSE 44119
// if IsSelected ( i ) then
44097: LD_VAR 0 2
44101: PPUSH
44102: CALL_OW 306
44106: IFFALSE 44117
// ComForceInvisible ( i ) ;
44108: LD_VAR 0 2
44112: PPUSH
44113: CALL_OW 496
44117: GO 44094
44119: POP
44120: POP
// end ;
44121: LD_VAR 0 1
44125: RET
// export function hHackChangeYourSide ; begin
44126: LD_INT 0
44128: PPUSH
// if your_side = 8 then
44129: LD_OWVAR 2
44133: PUSH
44134: LD_INT 8
44136: EQUAL
44137: IFFALSE 44149
// your_side := 0 else
44139: LD_ADDR_OWVAR 2
44143: PUSH
44144: LD_INT 0
44146: ST_TO_ADDR
44147: GO 44163
// your_side := your_side + 1 ;
44149: LD_ADDR_OWVAR 2
44153: PUSH
44154: LD_OWVAR 2
44158: PUSH
44159: LD_INT 1
44161: PLUS
44162: ST_TO_ADDR
// end ;
44163: LD_VAR 0 1
44167: RET
// export function hHackChangeUnitSide ; var i , j ; begin
44168: LD_INT 0
44170: PPUSH
44171: PPUSH
44172: PPUSH
// for i in all_units do
44173: LD_ADDR_VAR 0 2
44177: PUSH
44178: LD_OWVAR 3
44182: PUSH
44183: FOR_IN
44184: IFFALSE 44262
// if IsSelected ( i ) then
44186: LD_VAR 0 2
44190: PPUSH
44191: CALL_OW 306
44195: IFFALSE 44260
// begin j := GetSide ( i ) ;
44197: LD_ADDR_VAR 0 3
44201: PUSH
44202: LD_VAR 0 2
44206: PPUSH
44207: CALL_OW 255
44211: ST_TO_ADDR
// if j = 8 then
44212: LD_VAR 0 3
44216: PUSH
44217: LD_INT 8
44219: EQUAL
44220: IFFALSE 44232
// j := 0 else
44222: LD_ADDR_VAR 0 3
44226: PUSH
44227: LD_INT 0
44229: ST_TO_ADDR
44230: GO 44246
// j := j + 1 ;
44232: LD_ADDR_VAR 0 3
44236: PUSH
44237: LD_VAR 0 3
44241: PUSH
44242: LD_INT 1
44244: PLUS
44245: ST_TO_ADDR
// SetSide ( i , j ) ;
44246: LD_VAR 0 2
44250: PPUSH
44251: LD_VAR 0 3
44255: PPUSH
44256: CALL_OW 235
// end ;
44260: GO 44183
44262: POP
44263: POP
// end ;
44264: LD_VAR 0 1
44268: RET
// export function hHackFog ; begin
44269: LD_INT 0
44271: PPUSH
// FogOff ( true ) ;
44272: LD_INT 1
44274: PPUSH
44275: CALL_OW 344
// end ;
44279: LD_VAR 0 1
44283: RET
// export function hHackTeleport ( unit , x , y ) ; begin
44284: LD_INT 0
44286: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
44287: LD_VAR 0 1
44291: PPUSH
44292: LD_VAR 0 2
44296: PPUSH
44297: LD_VAR 0 3
44301: PPUSH
44302: LD_INT 1
44304: PPUSH
44305: LD_INT 1
44307: PPUSH
44308: CALL_OW 483
// CenterOnXY ( x , y ) ;
44312: LD_VAR 0 2
44316: PPUSH
44317: LD_VAR 0 3
44321: PPUSH
44322: CALL_OW 84
// end ;
44326: LD_VAR 0 4
44330: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
44331: LD_INT 0
44333: PPUSH
44334: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
44335: LD_VAR 0 1
44339: NOT
44340: PUSH
44341: LD_VAR 0 2
44345: PPUSH
44346: LD_VAR 0 3
44350: PPUSH
44351: CALL_OW 488
44355: NOT
44356: OR
44357: PUSH
44358: LD_VAR 0 1
44362: PPUSH
44363: CALL_OW 266
44367: PUSH
44368: LD_INT 3
44370: NONEQUAL
44371: PUSH
44372: LD_VAR 0 1
44376: PPUSH
44377: CALL_OW 247
44381: PUSH
44382: LD_INT 1
44384: EQUAL
44385: NOT
44386: AND
44387: OR
44388: IFFALSE 44392
// exit ;
44390: GO 44541
// if GetType ( factory ) = unit_human then
44392: LD_VAR 0 1
44396: PPUSH
44397: CALL_OW 247
44401: PUSH
44402: LD_INT 1
44404: EQUAL
44405: IFFALSE 44422
// factory := IsInUnit ( factory ) ;
44407: LD_ADDR_VAR 0 1
44411: PUSH
44412: LD_VAR 0 1
44416: PPUSH
44417: CALL_OW 310
44421: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
44422: LD_VAR 0 1
44426: PPUSH
44427: CALL_OW 266
44431: PUSH
44432: LD_INT 3
44434: NONEQUAL
44435: IFFALSE 44439
// exit ;
44437: GO 44541
// if HexInfo ( x , y ) = factory then
44439: LD_VAR 0 2
44443: PPUSH
44444: LD_VAR 0 3
44448: PPUSH
44449: CALL_OW 428
44453: PUSH
44454: LD_VAR 0 1
44458: EQUAL
44459: IFFALSE 44486
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
44461: LD_ADDR_EXP 128
44465: PUSH
44466: LD_EXP 128
44470: PPUSH
44471: LD_VAR 0 1
44475: PPUSH
44476: LD_INT 0
44478: PPUSH
44479: CALL_OW 1
44483: ST_TO_ADDR
44484: GO 44537
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
44486: LD_ADDR_EXP 128
44490: PUSH
44491: LD_EXP 128
44495: PPUSH
44496: LD_VAR 0 1
44500: PPUSH
44501: LD_VAR 0 1
44505: PPUSH
44506: CALL_OW 255
44510: PUSH
44511: LD_VAR 0 1
44515: PUSH
44516: LD_VAR 0 2
44520: PUSH
44521: LD_VAR 0 3
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: PPUSH
44532: CALL_OW 1
44536: ST_TO_ADDR
// UpdateFactoryWaypoints ;
44537: CALL 44546 0 0
// end ;
44541: LD_VAR 0 4
44545: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
44546: LD_INT 0
44548: PPUSH
44549: PPUSH
44550: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
44551: LD_STRING resetFactoryWaypoint();
44553: PPUSH
44554: CALL_OW 559
// if factoryWaypoints then
44558: LD_EXP 128
44562: IFFALSE 44688
// begin list := PrepareArray ( factoryWaypoints ) ;
44564: LD_ADDR_VAR 0 3
44568: PUSH
44569: LD_EXP 128
44573: PPUSH
44574: CALL 91138 0 1
44578: ST_TO_ADDR
// for i := 1 to list do
44579: LD_ADDR_VAR 0 2
44583: PUSH
44584: DOUBLE
44585: LD_INT 1
44587: DEC
44588: ST_TO_ADDR
44589: LD_VAR 0 3
44593: PUSH
44594: FOR_TO
44595: IFFALSE 44686
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
44597: LD_STRING setFactoryWaypointXY(
44599: PUSH
44600: LD_VAR 0 3
44604: PUSH
44605: LD_VAR 0 2
44609: ARRAY
44610: PUSH
44611: LD_INT 1
44613: ARRAY
44614: STR
44615: PUSH
44616: LD_STRING ,
44618: STR
44619: PUSH
44620: LD_VAR 0 3
44624: PUSH
44625: LD_VAR 0 2
44629: ARRAY
44630: PUSH
44631: LD_INT 2
44633: ARRAY
44634: STR
44635: PUSH
44636: LD_STRING ,
44638: STR
44639: PUSH
44640: LD_VAR 0 3
44644: PUSH
44645: LD_VAR 0 2
44649: ARRAY
44650: PUSH
44651: LD_INT 3
44653: ARRAY
44654: STR
44655: PUSH
44656: LD_STRING ,
44658: STR
44659: PUSH
44660: LD_VAR 0 3
44664: PUSH
44665: LD_VAR 0 2
44669: ARRAY
44670: PUSH
44671: LD_INT 4
44673: ARRAY
44674: STR
44675: PUSH
44676: LD_STRING )
44678: STR
44679: PPUSH
44680: CALL_OW 559
44684: GO 44594
44686: POP
44687: POP
// end ; end ;
44688: LD_VAR 0 1
44692: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
44693: LD_INT 0
44695: PPUSH
// if HexInfo ( x , y ) = warehouse then
44696: LD_VAR 0 2
44700: PPUSH
44701: LD_VAR 0 3
44705: PPUSH
44706: CALL_OW 428
44710: PUSH
44711: LD_VAR 0 1
44715: EQUAL
44716: IFFALSE 44743
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
44718: LD_ADDR_EXP 129
44722: PUSH
44723: LD_EXP 129
44727: PPUSH
44728: LD_VAR 0 1
44732: PPUSH
44733: LD_INT 0
44735: PPUSH
44736: CALL_OW 1
44740: ST_TO_ADDR
44741: GO 44794
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
44743: LD_ADDR_EXP 129
44747: PUSH
44748: LD_EXP 129
44752: PPUSH
44753: LD_VAR 0 1
44757: PPUSH
44758: LD_VAR 0 1
44762: PPUSH
44763: CALL_OW 255
44767: PUSH
44768: LD_VAR 0 1
44772: PUSH
44773: LD_VAR 0 2
44777: PUSH
44778: LD_VAR 0 3
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: PPUSH
44789: CALL_OW 1
44793: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
44794: CALL 44803 0 0
// end ;
44798: LD_VAR 0 4
44802: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
44803: LD_INT 0
44805: PPUSH
44806: PPUSH
44807: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
44808: LD_STRING resetWarehouseGatheringPoints();
44810: PPUSH
44811: CALL_OW 559
// if warehouseGatheringPoints then
44815: LD_EXP 129
44819: IFFALSE 44945
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
44821: LD_ADDR_VAR 0 3
44825: PUSH
44826: LD_EXP 129
44830: PPUSH
44831: CALL 91138 0 1
44835: ST_TO_ADDR
// for i := 1 to list do
44836: LD_ADDR_VAR 0 2
44840: PUSH
44841: DOUBLE
44842: LD_INT 1
44844: DEC
44845: ST_TO_ADDR
44846: LD_VAR 0 3
44850: PUSH
44851: FOR_TO
44852: IFFALSE 44943
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
44854: LD_STRING setWarehouseGatheringPointXY(
44856: PUSH
44857: LD_VAR 0 3
44861: PUSH
44862: LD_VAR 0 2
44866: ARRAY
44867: PUSH
44868: LD_INT 1
44870: ARRAY
44871: STR
44872: PUSH
44873: LD_STRING ,
44875: STR
44876: PUSH
44877: LD_VAR 0 3
44881: PUSH
44882: LD_VAR 0 2
44886: ARRAY
44887: PUSH
44888: LD_INT 2
44890: ARRAY
44891: STR
44892: PUSH
44893: LD_STRING ,
44895: STR
44896: PUSH
44897: LD_VAR 0 3
44901: PUSH
44902: LD_VAR 0 2
44906: ARRAY
44907: PUSH
44908: LD_INT 3
44910: ARRAY
44911: STR
44912: PUSH
44913: LD_STRING ,
44915: STR
44916: PUSH
44917: LD_VAR 0 3
44921: PUSH
44922: LD_VAR 0 2
44926: ARRAY
44927: PUSH
44928: LD_INT 4
44930: ARRAY
44931: STR
44932: PUSH
44933: LD_STRING )
44935: STR
44936: PPUSH
44937: CALL_OW 559
44941: GO 44851
44943: POP
44944: POP
// end ; end ;
44945: LD_VAR 0 1
44949: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
44950: LD_EXP 129
44954: IFFALSE 45639
44956: GO 44958
44958: DISABLE
44959: LD_INT 0
44961: PPUSH
44962: PPUSH
44963: PPUSH
44964: PPUSH
44965: PPUSH
44966: PPUSH
44967: PPUSH
44968: PPUSH
44969: PPUSH
// begin enable ;
44970: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
44971: LD_ADDR_VAR 0 3
44975: PUSH
44976: LD_EXP 129
44980: PPUSH
44981: CALL 91138 0 1
44985: ST_TO_ADDR
// if not list then
44986: LD_VAR 0 3
44990: NOT
44991: IFFALSE 44995
// exit ;
44993: GO 45639
// for i := 1 to list do
44995: LD_ADDR_VAR 0 1
44999: PUSH
45000: DOUBLE
45001: LD_INT 1
45003: DEC
45004: ST_TO_ADDR
45005: LD_VAR 0 3
45009: PUSH
45010: FOR_TO
45011: IFFALSE 45637
// begin depot := list [ i ] [ 2 ] ;
45013: LD_ADDR_VAR 0 8
45017: PUSH
45018: LD_VAR 0 3
45022: PUSH
45023: LD_VAR 0 1
45027: ARRAY
45028: PUSH
45029: LD_INT 2
45031: ARRAY
45032: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
45033: LD_ADDR_VAR 0 5
45037: PUSH
45038: LD_VAR 0 3
45042: PUSH
45043: LD_VAR 0 1
45047: ARRAY
45048: PUSH
45049: LD_INT 1
45051: ARRAY
45052: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
45053: LD_VAR 0 8
45057: PPUSH
45058: CALL_OW 301
45062: PUSH
45063: LD_VAR 0 5
45067: PUSH
45068: LD_VAR 0 8
45072: PPUSH
45073: CALL_OW 255
45077: NONEQUAL
45078: OR
45079: IFFALSE 45108
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
45081: LD_ADDR_EXP 129
45085: PUSH
45086: LD_EXP 129
45090: PPUSH
45091: LD_VAR 0 8
45095: PPUSH
45096: LD_INT 0
45098: PPUSH
45099: CALL_OW 1
45103: ST_TO_ADDR
// exit ;
45104: POP
45105: POP
45106: GO 45639
// end ; x := list [ i ] [ 3 ] ;
45108: LD_ADDR_VAR 0 6
45112: PUSH
45113: LD_VAR 0 3
45117: PUSH
45118: LD_VAR 0 1
45122: ARRAY
45123: PUSH
45124: LD_INT 3
45126: ARRAY
45127: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
45128: LD_ADDR_VAR 0 7
45132: PUSH
45133: LD_VAR 0 3
45137: PUSH
45138: LD_VAR 0 1
45142: ARRAY
45143: PUSH
45144: LD_INT 4
45146: ARRAY
45147: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
45148: LD_ADDR_VAR 0 9
45152: PUSH
45153: LD_VAR 0 6
45157: PPUSH
45158: LD_VAR 0 7
45162: PPUSH
45163: LD_INT 16
45165: PPUSH
45166: CALL 89726 0 3
45170: ST_TO_ADDR
// if not cratesNearbyPoint then
45171: LD_VAR 0 9
45175: NOT
45176: IFFALSE 45182
// exit ;
45178: POP
45179: POP
45180: GO 45639
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
45182: LD_ADDR_VAR 0 4
45186: PUSH
45187: LD_INT 22
45189: PUSH
45190: LD_VAR 0 5
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 3
45201: PUSH
45202: LD_INT 60
45204: PUSH
45205: EMPTY
45206: LIST
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 91
45214: PUSH
45215: LD_VAR 0 8
45219: PUSH
45220: LD_INT 6
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: LD_INT 25
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 25
45243: PUSH
45244: LD_INT 16
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: LIST
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: PPUSH
45262: CALL_OW 69
45266: PUSH
45267: LD_VAR 0 8
45271: PPUSH
45272: CALL_OW 313
45276: PPUSH
45277: LD_INT 3
45279: PUSH
45280: LD_INT 60
45282: PUSH
45283: EMPTY
45284: LIST
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: LD_INT 25
45295: PUSH
45296: LD_INT 2
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 25
45305: PUSH
45306: LD_INT 16
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: LIST
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PPUSH
45322: CALL_OW 72
45326: UNION
45327: ST_TO_ADDR
// if tmp then
45328: LD_VAR 0 4
45332: IFFALSE 45412
// begin tmp := ShrinkArray ( tmp , 3 ) ;
45334: LD_ADDR_VAR 0 4
45338: PUSH
45339: LD_VAR 0 4
45343: PPUSH
45344: LD_INT 3
45346: PPUSH
45347: CALL 87695 0 2
45351: ST_TO_ADDR
// for j in tmp do
45352: LD_ADDR_VAR 0 2
45356: PUSH
45357: LD_VAR 0 4
45361: PUSH
45362: FOR_IN
45363: IFFALSE 45406
// begin if IsInUnit ( j ) then
45365: LD_VAR 0 2
45369: PPUSH
45370: CALL_OW 310
45374: IFFALSE 45385
// ComExit ( j ) ;
45376: LD_VAR 0 2
45380: PPUSH
45381: CALL 87778 0 1
// AddComCollect ( j , x , y ) ;
45385: LD_VAR 0 2
45389: PPUSH
45390: LD_VAR 0 6
45394: PPUSH
45395: LD_VAR 0 7
45399: PPUSH
45400: CALL_OW 177
// end ;
45404: GO 45362
45406: POP
45407: POP
// exit ;
45408: POP
45409: POP
45410: GO 45639
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
45412: LD_ADDR_VAR 0 4
45416: PUSH
45417: LD_INT 22
45419: PUSH
45420: LD_VAR 0 5
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 91
45431: PUSH
45432: LD_VAR 0 8
45436: PUSH
45437: LD_INT 8
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: LD_INT 34
45450: PUSH
45451: LD_INT 12
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 34
45460: PUSH
45461: LD_INT 51
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 34
45470: PUSH
45471: LD_INT 32
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 34
45480: PUSH
45481: LD_INT 89
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: LIST
45499: PPUSH
45500: CALL_OW 69
45504: ST_TO_ADDR
// if tmp then
45505: LD_VAR 0 4
45509: IFFALSE 45635
// begin for j in tmp do
45511: LD_ADDR_VAR 0 2
45515: PUSH
45516: LD_VAR 0 4
45520: PUSH
45521: FOR_IN
45522: IFFALSE 45633
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
45524: LD_VAR 0 2
45528: PPUSH
45529: CALL_OW 262
45533: PUSH
45534: LD_INT 3
45536: EQUAL
45537: PUSH
45538: LD_VAR 0 2
45542: PPUSH
45543: CALL_OW 261
45547: PUSH
45548: LD_INT 20
45550: GREATER
45551: OR
45552: PUSH
45553: LD_VAR 0 2
45557: PPUSH
45558: CALL_OW 314
45562: NOT
45563: AND
45564: PUSH
45565: LD_VAR 0 2
45569: PPUSH
45570: CALL_OW 263
45574: PUSH
45575: LD_INT 1
45577: NONEQUAL
45578: PUSH
45579: LD_VAR 0 2
45583: PPUSH
45584: CALL_OW 311
45588: OR
45589: AND
45590: IFFALSE 45631
// begin ComCollect ( j , x , y ) ;
45592: LD_VAR 0 2
45596: PPUSH
45597: LD_VAR 0 6
45601: PPUSH
45602: LD_VAR 0 7
45606: PPUSH
45607: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
45611: LD_VAR 0 2
45615: PPUSH
45616: LD_VAR 0 8
45620: PPUSH
45621: CALL_OW 172
// exit ;
45625: POP
45626: POP
45627: POP
45628: POP
45629: GO 45639
// end ;
45631: GO 45521
45633: POP
45634: POP
// end ; end ;
45635: GO 45010
45637: POP
45638: POP
// end ; end_of_file
45639: PPOPN 9
45641: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
45642: LD_INT 0
45644: PPUSH
45645: PPUSH
45646: PPUSH
45647: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
45648: LD_VAR 0 1
45652: PPUSH
45653: CALL_OW 264
45657: PUSH
45658: LD_INT 91
45660: EQUAL
45661: IFFALSE 45733
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
45663: LD_INT 68
45665: PPUSH
45666: LD_VAR 0 1
45670: PPUSH
45671: CALL_OW 255
45675: PPUSH
45676: CALL_OW 321
45680: PUSH
45681: LD_INT 2
45683: EQUAL
45684: IFFALSE 45696
// eff := 70 else
45686: LD_ADDR_VAR 0 4
45690: PUSH
45691: LD_INT 70
45693: ST_TO_ADDR
45694: GO 45704
// eff := 30 ;
45696: LD_ADDR_VAR 0 4
45700: PUSH
45701: LD_INT 30
45703: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
45704: LD_VAR 0 1
45708: PPUSH
45709: CALL_OW 250
45713: PPUSH
45714: LD_VAR 0 1
45718: PPUSH
45719: CALL_OW 251
45723: PPUSH
45724: LD_VAR 0 4
45728: PPUSH
45729: CALL_OW 495
// end ; end ;
45733: LD_VAR 0 2
45737: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
45738: LD_INT 0
45740: PPUSH
// end ;
45741: LD_VAR 0 4
45745: RET
// export function SOS_Command ( cmd ) ; begin
45746: LD_INT 0
45748: PPUSH
// end ;
45749: LD_VAR 0 2
45753: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
45754: LD_INT 0
45756: PPUSH
// end ;
45757: LD_VAR 0 6
45761: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
45762: LD_INT 0
45764: PPUSH
45765: PPUSH
// if not vehicle or not factory then
45766: LD_VAR 0 1
45770: NOT
45771: PUSH
45772: LD_VAR 0 2
45776: NOT
45777: OR
45778: IFFALSE 45782
// exit ;
45780: GO 46013
// if factoryWaypoints >= factory then
45782: LD_EXP 128
45786: PUSH
45787: LD_VAR 0 2
45791: GREATEREQUAL
45792: IFFALSE 46013
// if factoryWaypoints [ factory ] then
45794: LD_EXP 128
45798: PUSH
45799: LD_VAR 0 2
45803: ARRAY
45804: IFFALSE 46013
// begin if GetControl ( vehicle ) = control_manual then
45806: LD_VAR 0 1
45810: PPUSH
45811: CALL_OW 263
45815: PUSH
45816: LD_INT 1
45818: EQUAL
45819: IFFALSE 45900
// begin driver := IsDrivenBy ( vehicle ) ;
45821: LD_ADDR_VAR 0 4
45825: PUSH
45826: LD_VAR 0 1
45830: PPUSH
45831: CALL_OW 311
45835: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
45836: LD_VAR 0 4
45840: PPUSH
45841: LD_EXP 128
45845: PUSH
45846: LD_VAR 0 2
45850: ARRAY
45851: PUSH
45852: LD_INT 3
45854: ARRAY
45855: PPUSH
45856: LD_EXP 128
45860: PUSH
45861: LD_VAR 0 2
45865: ARRAY
45866: PUSH
45867: LD_INT 4
45869: ARRAY
45870: PPUSH
45871: CALL_OW 171
// AddComExitVehicle ( driver ) ;
45875: LD_VAR 0 4
45879: PPUSH
45880: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
45884: LD_VAR 0 4
45888: PPUSH
45889: LD_VAR 0 2
45893: PPUSH
45894: CALL_OW 180
// end else
45898: GO 46013
// if GetControl ( vehicle ) = control_remote then
45900: LD_VAR 0 1
45904: PPUSH
45905: CALL_OW 263
45909: PUSH
45910: LD_INT 2
45912: EQUAL
45913: IFFALSE 45974
// begin wait ( 0 0$2 ) ;
45915: LD_INT 70
45917: PPUSH
45918: CALL_OW 67
// if Connect ( vehicle ) then
45922: LD_VAR 0 1
45926: PPUSH
45927: CALL 58037 0 1
45931: IFFALSE 45972
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
45933: LD_VAR 0 1
45937: PPUSH
45938: LD_EXP 128
45942: PUSH
45943: LD_VAR 0 2
45947: ARRAY
45948: PUSH
45949: LD_INT 3
45951: ARRAY
45952: PPUSH
45953: LD_EXP 128
45957: PUSH
45958: LD_VAR 0 2
45962: ARRAY
45963: PUSH
45964: LD_INT 4
45966: ARRAY
45967: PPUSH
45968: CALL_OW 171
// end else
45972: GO 46013
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
45974: LD_VAR 0 1
45978: PPUSH
45979: LD_EXP 128
45983: PUSH
45984: LD_VAR 0 2
45988: ARRAY
45989: PUSH
45990: LD_INT 3
45992: ARRAY
45993: PPUSH
45994: LD_EXP 128
45998: PUSH
45999: LD_VAR 0 2
46003: ARRAY
46004: PUSH
46005: LD_INT 4
46007: ARRAY
46008: PPUSH
46009: CALL_OW 171
// end ; end ;
46013: LD_VAR 0 3
46017: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
46018: LD_INT 0
46020: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
46021: LD_VAR 0 1
46025: PUSH
46026: LD_INT 250
46028: EQUAL
46029: PUSH
46030: LD_VAR 0 2
46034: PPUSH
46035: CALL_OW 264
46039: PUSH
46040: LD_INT 81
46042: EQUAL
46043: AND
46044: IFFALSE 46065
// MinerPlaceMine ( unit , x , y ) ;
46046: LD_VAR 0 2
46050: PPUSH
46051: LD_VAR 0 4
46055: PPUSH
46056: LD_VAR 0 5
46060: PPUSH
46061: CALL 48450 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
46065: LD_VAR 0 1
46069: PUSH
46070: LD_INT 251
46072: EQUAL
46073: PUSH
46074: LD_VAR 0 2
46078: PPUSH
46079: CALL_OW 264
46083: PUSH
46084: LD_INT 81
46086: EQUAL
46087: AND
46088: IFFALSE 46109
// MinerDetonateMine ( unit , x , y ) ;
46090: LD_VAR 0 2
46094: PPUSH
46095: LD_VAR 0 4
46099: PPUSH
46100: LD_VAR 0 5
46104: PPUSH
46105: CALL 48725 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
46109: LD_VAR 0 1
46113: PUSH
46114: LD_INT 252
46116: EQUAL
46117: PUSH
46118: LD_VAR 0 2
46122: PPUSH
46123: CALL_OW 264
46127: PUSH
46128: LD_INT 81
46130: EQUAL
46131: AND
46132: IFFALSE 46153
// MinerCreateMinefield ( unit , x , y ) ;
46134: LD_VAR 0 2
46138: PPUSH
46139: LD_VAR 0 4
46143: PPUSH
46144: LD_VAR 0 5
46148: PPUSH
46149: CALL 49142 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
46153: LD_VAR 0 1
46157: PUSH
46158: LD_INT 253
46160: EQUAL
46161: PUSH
46162: LD_VAR 0 2
46166: PPUSH
46167: CALL_OW 257
46171: PUSH
46172: LD_INT 5
46174: EQUAL
46175: AND
46176: IFFALSE 46197
// ComBinocular ( unit , x , y ) ;
46178: LD_VAR 0 2
46182: PPUSH
46183: LD_VAR 0 4
46187: PPUSH
46188: LD_VAR 0 5
46192: PPUSH
46193: CALL 49511 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
46197: LD_VAR 0 1
46201: PUSH
46202: LD_INT 254
46204: EQUAL
46205: PUSH
46206: LD_VAR 0 2
46210: PPUSH
46211: CALL_OW 264
46215: PUSH
46216: LD_INT 99
46218: EQUAL
46219: AND
46220: PUSH
46221: LD_VAR 0 3
46225: PPUSH
46226: CALL_OW 263
46230: PUSH
46231: LD_INT 3
46233: EQUAL
46234: AND
46235: IFFALSE 46251
// HackDestroyVehicle ( unit , selectedUnit ) ;
46237: LD_VAR 0 2
46241: PPUSH
46242: LD_VAR 0 3
46246: PPUSH
46247: CALL 47814 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
46251: LD_VAR 0 1
46255: PUSH
46256: LD_INT 255
46258: EQUAL
46259: PUSH
46260: LD_VAR 0 2
46264: PPUSH
46265: CALL_OW 264
46269: PUSH
46270: LD_INT 14
46272: PUSH
46273: LD_INT 53
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: IN
46280: AND
46281: PUSH
46282: LD_VAR 0 4
46286: PPUSH
46287: LD_VAR 0 5
46291: PPUSH
46292: CALL_OW 488
46296: AND
46297: IFFALSE 46321
// CutTreeXYR ( unit , x , y , 12 ) ;
46299: LD_VAR 0 2
46303: PPUSH
46304: LD_VAR 0 4
46308: PPUSH
46309: LD_VAR 0 5
46313: PPUSH
46314: LD_INT 12
46316: PPUSH
46317: CALL 46384 0 4
// if cmd = 256 then
46321: LD_VAR 0 1
46325: PUSH
46326: LD_INT 256
46328: EQUAL
46329: IFFALSE 46350
// SetFactoryWaypoint ( unit , x , y ) ;
46331: LD_VAR 0 2
46335: PPUSH
46336: LD_VAR 0 4
46340: PPUSH
46341: LD_VAR 0 5
46345: PPUSH
46346: CALL 44331 0 3
// if cmd = 257 then
46350: LD_VAR 0 1
46354: PUSH
46355: LD_INT 257
46357: EQUAL
46358: IFFALSE 46379
// SetWarehouseGatheringPoint ( unit , x , y ) ;
46360: LD_VAR 0 2
46364: PPUSH
46365: LD_VAR 0 4
46369: PPUSH
46370: LD_VAR 0 5
46374: PPUSH
46375: CALL 44693 0 3
// end ;
46379: LD_VAR 0 6
46383: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
46384: LD_INT 0
46386: PPUSH
46387: PPUSH
46388: PPUSH
46389: PPUSH
46390: PPUSH
46391: PPUSH
46392: PPUSH
46393: PPUSH
46394: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
46395: LD_VAR 0 1
46399: NOT
46400: PUSH
46401: LD_VAR 0 2
46405: PPUSH
46406: LD_VAR 0 3
46410: PPUSH
46411: CALL_OW 488
46415: NOT
46416: OR
46417: PUSH
46418: LD_VAR 0 4
46422: NOT
46423: OR
46424: IFFALSE 46428
// exit ;
46426: GO 46768
// list := [ ] ;
46428: LD_ADDR_VAR 0 13
46432: PUSH
46433: EMPTY
46434: ST_TO_ADDR
// if x - r < 0 then
46435: LD_VAR 0 2
46439: PUSH
46440: LD_VAR 0 4
46444: MINUS
46445: PUSH
46446: LD_INT 0
46448: LESS
46449: IFFALSE 46461
// min_x := 0 else
46451: LD_ADDR_VAR 0 7
46455: PUSH
46456: LD_INT 0
46458: ST_TO_ADDR
46459: GO 46477
// min_x := x - r ;
46461: LD_ADDR_VAR 0 7
46465: PUSH
46466: LD_VAR 0 2
46470: PUSH
46471: LD_VAR 0 4
46475: MINUS
46476: ST_TO_ADDR
// if y - r < 0 then
46477: LD_VAR 0 3
46481: PUSH
46482: LD_VAR 0 4
46486: MINUS
46487: PUSH
46488: LD_INT 0
46490: LESS
46491: IFFALSE 46503
// min_y := 0 else
46493: LD_ADDR_VAR 0 8
46497: PUSH
46498: LD_INT 0
46500: ST_TO_ADDR
46501: GO 46519
// min_y := y - r ;
46503: LD_ADDR_VAR 0 8
46507: PUSH
46508: LD_VAR 0 3
46512: PUSH
46513: LD_VAR 0 4
46517: MINUS
46518: ST_TO_ADDR
// max_x := x + r ;
46519: LD_ADDR_VAR 0 9
46523: PUSH
46524: LD_VAR 0 2
46528: PUSH
46529: LD_VAR 0 4
46533: PLUS
46534: ST_TO_ADDR
// max_y := y + r ;
46535: LD_ADDR_VAR 0 10
46539: PUSH
46540: LD_VAR 0 3
46544: PUSH
46545: LD_VAR 0 4
46549: PLUS
46550: ST_TO_ADDR
// for _x = min_x to max_x do
46551: LD_ADDR_VAR 0 11
46555: PUSH
46556: DOUBLE
46557: LD_VAR 0 7
46561: DEC
46562: ST_TO_ADDR
46563: LD_VAR 0 9
46567: PUSH
46568: FOR_TO
46569: IFFALSE 46686
// for _y = min_y to max_y do
46571: LD_ADDR_VAR 0 12
46575: PUSH
46576: DOUBLE
46577: LD_VAR 0 8
46581: DEC
46582: ST_TO_ADDR
46583: LD_VAR 0 10
46587: PUSH
46588: FOR_TO
46589: IFFALSE 46682
// begin if not ValidHex ( _x , _y ) then
46591: LD_VAR 0 11
46595: PPUSH
46596: LD_VAR 0 12
46600: PPUSH
46601: CALL_OW 488
46605: NOT
46606: IFFALSE 46610
// continue ;
46608: GO 46588
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46610: LD_VAR 0 11
46614: PPUSH
46615: LD_VAR 0 12
46619: PPUSH
46620: CALL_OW 351
46624: PUSH
46625: LD_VAR 0 11
46629: PPUSH
46630: LD_VAR 0 12
46634: PPUSH
46635: CALL_OW 554
46639: AND
46640: IFFALSE 46680
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
46642: LD_ADDR_VAR 0 13
46646: PUSH
46647: LD_VAR 0 13
46651: PPUSH
46652: LD_VAR 0 13
46656: PUSH
46657: LD_INT 1
46659: PLUS
46660: PPUSH
46661: LD_VAR 0 11
46665: PUSH
46666: LD_VAR 0 12
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PPUSH
46675: CALL_OW 2
46679: ST_TO_ADDR
// end ;
46680: GO 46588
46682: POP
46683: POP
46684: GO 46568
46686: POP
46687: POP
// if not list then
46688: LD_VAR 0 13
46692: NOT
46693: IFFALSE 46697
// exit ;
46695: GO 46768
// for i in list do
46697: LD_ADDR_VAR 0 6
46701: PUSH
46702: LD_VAR 0 13
46706: PUSH
46707: FOR_IN
46708: IFFALSE 46766
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
46710: LD_VAR 0 1
46714: PPUSH
46715: LD_STRING M
46717: PUSH
46718: LD_VAR 0 6
46722: PUSH
46723: LD_INT 1
46725: ARRAY
46726: PUSH
46727: LD_VAR 0 6
46731: PUSH
46732: LD_INT 2
46734: ARRAY
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: PUSH
46757: EMPTY
46758: LIST
46759: PPUSH
46760: CALL_OW 447
46764: GO 46707
46766: POP
46767: POP
// end ;
46768: LD_VAR 0 5
46772: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
46773: LD_EXP 131
46777: NOT
46778: IFFALSE 46828
46780: GO 46782
46782: DISABLE
// begin initHack := true ;
46783: LD_ADDR_EXP 131
46787: PUSH
46788: LD_INT 1
46790: ST_TO_ADDR
// hackTanks := [ ] ;
46791: LD_ADDR_EXP 132
46795: PUSH
46796: EMPTY
46797: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
46798: LD_ADDR_EXP 133
46802: PUSH
46803: EMPTY
46804: ST_TO_ADDR
// hackLimit := 3 ;
46805: LD_ADDR_EXP 134
46809: PUSH
46810: LD_INT 3
46812: ST_TO_ADDR
// hackDist := 12 ;
46813: LD_ADDR_EXP 135
46817: PUSH
46818: LD_INT 12
46820: ST_TO_ADDR
// hackCounter := [ ] ;
46821: LD_ADDR_EXP 136
46825: PUSH
46826: EMPTY
46827: ST_TO_ADDR
// end ;
46828: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
46829: LD_EXP 131
46833: PUSH
46834: LD_INT 34
46836: PUSH
46837: LD_INT 99
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PPUSH
46844: CALL_OW 69
46848: AND
46849: IFFALSE 47102
46851: GO 46853
46853: DISABLE
46854: LD_INT 0
46856: PPUSH
46857: PPUSH
// begin enable ;
46858: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
46859: LD_ADDR_VAR 0 1
46863: PUSH
46864: LD_INT 34
46866: PUSH
46867: LD_INT 99
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PPUSH
46874: CALL_OW 69
46878: PUSH
46879: FOR_IN
46880: IFFALSE 47100
// begin if not i in hackTanks then
46882: LD_VAR 0 1
46886: PUSH
46887: LD_EXP 132
46891: IN
46892: NOT
46893: IFFALSE 46976
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
46895: LD_ADDR_EXP 132
46899: PUSH
46900: LD_EXP 132
46904: PPUSH
46905: LD_EXP 132
46909: PUSH
46910: LD_INT 1
46912: PLUS
46913: PPUSH
46914: LD_VAR 0 1
46918: PPUSH
46919: CALL_OW 1
46923: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
46924: LD_ADDR_EXP 133
46928: PUSH
46929: LD_EXP 133
46933: PPUSH
46934: LD_EXP 133
46938: PUSH
46939: LD_INT 1
46941: PLUS
46942: PPUSH
46943: EMPTY
46944: PPUSH
46945: CALL_OW 1
46949: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
46950: LD_ADDR_EXP 136
46954: PUSH
46955: LD_EXP 136
46959: PPUSH
46960: LD_EXP 136
46964: PUSH
46965: LD_INT 1
46967: PLUS
46968: PPUSH
46969: EMPTY
46970: PPUSH
46971: CALL_OW 1
46975: ST_TO_ADDR
// end ; if not IsOk ( i ) then
46976: LD_VAR 0 1
46980: PPUSH
46981: CALL_OW 302
46985: NOT
46986: IFFALSE 46999
// begin HackUnlinkAll ( i ) ;
46988: LD_VAR 0 1
46992: PPUSH
46993: CALL 47105 0 1
// continue ;
46997: GO 46879
// end ; HackCheckCapturedStatus ( i ) ;
46999: LD_VAR 0 1
47003: PPUSH
47004: CALL 47548 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
47008: LD_ADDR_VAR 0 2
47012: PUSH
47013: LD_INT 81
47015: PUSH
47016: LD_VAR 0 1
47020: PPUSH
47021: CALL_OW 255
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 33
47032: PUSH
47033: LD_INT 3
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 91
47042: PUSH
47043: LD_VAR 0 1
47047: PUSH
47048: LD_EXP 135
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 50
47060: PUSH
47061: EMPTY
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: PPUSH
47070: CALL_OW 69
47074: ST_TO_ADDR
// if not tmp then
47075: LD_VAR 0 2
47079: NOT
47080: IFFALSE 47084
// continue ;
47082: GO 46879
// HackLink ( i , tmp ) ;
47084: LD_VAR 0 1
47088: PPUSH
47089: LD_VAR 0 2
47093: PPUSH
47094: CALL 47241 0 2
// end ;
47098: GO 46879
47100: POP
47101: POP
// end ;
47102: PPOPN 2
47104: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
47105: LD_INT 0
47107: PPUSH
47108: PPUSH
47109: PPUSH
// if not hack in hackTanks then
47110: LD_VAR 0 1
47114: PUSH
47115: LD_EXP 132
47119: IN
47120: NOT
47121: IFFALSE 47125
// exit ;
47123: GO 47236
// index := GetElementIndex ( hackTanks , hack ) ;
47125: LD_ADDR_VAR 0 4
47129: PUSH
47130: LD_EXP 132
47134: PPUSH
47135: LD_VAR 0 1
47139: PPUSH
47140: CALL 54853 0 2
47144: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
47145: LD_EXP 133
47149: PUSH
47150: LD_VAR 0 4
47154: ARRAY
47155: IFFALSE 47236
// begin for i in hackTanksCaptured [ index ] do
47157: LD_ADDR_VAR 0 3
47161: PUSH
47162: LD_EXP 133
47166: PUSH
47167: LD_VAR 0 4
47171: ARRAY
47172: PUSH
47173: FOR_IN
47174: IFFALSE 47200
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
47176: LD_VAR 0 3
47180: PUSH
47181: LD_INT 1
47183: ARRAY
47184: PPUSH
47185: LD_VAR 0 3
47189: PUSH
47190: LD_INT 2
47192: ARRAY
47193: PPUSH
47194: CALL_OW 235
47198: GO 47173
47200: POP
47201: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
47202: LD_ADDR_EXP 133
47206: PUSH
47207: LD_EXP 133
47211: PPUSH
47212: LD_VAR 0 4
47216: PPUSH
47217: EMPTY
47218: PPUSH
47219: CALL_OW 1
47223: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
47224: LD_VAR 0 1
47228: PPUSH
47229: LD_INT 0
47231: PPUSH
47232: CALL_OW 505
// end ; end ;
47236: LD_VAR 0 2
47240: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
47241: LD_INT 0
47243: PPUSH
47244: PPUSH
47245: PPUSH
// if not hack in hackTanks or not vehicles then
47246: LD_VAR 0 1
47250: PUSH
47251: LD_EXP 132
47255: IN
47256: NOT
47257: PUSH
47258: LD_VAR 0 2
47262: NOT
47263: OR
47264: IFFALSE 47268
// exit ;
47266: GO 47543
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
47268: LD_ADDR_VAR 0 2
47272: PUSH
47273: LD_VAR 0 1
47277: PPUSH
47278: LD_VAR 0 2
47282: PPUSH
47283: LD_INT 1
47285: PPUSH
47286: LD_INT 1
47288: PPUSH
47289: CALL 55503 0 4
47293: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
47294: LD_ADDR_VAR 0 5
47298: PUSH
47299: LD_EXP 132
47303: PPUSH
47304: LD_VAR 0 1
47308: PPUSH
47309: CALL 54853 0 2
47313: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
47314: LD_EXP 133
47318: PUSH
47319: LD_VAR 0 5
47323: ARRAY
47324: PUSH
47325: LD_EXP 134
47329: LESS
47330: IFFALSE 47519
// begin for i := 1 to vehicles do
47332: LD_ADDR_VAR 0 4
47336: PUSH
47337: DOUBLE
47338: LD_INT 1
47340: DEC
47341: ST_TO_ADDR
47342: LD_VAR 0 2
47346: PUSH
47347: FOR_TO
47348: IFFALSE 47517
// begin if hackTanksCaptured [ index ] = hackLimit then
47350: LD_EXP 133
47354: PUSH
47355: LD_VAR 0 5
47359: ARRAY
47360: PUSH
47361: LD_EXP 134
47365: EQUAL
47366: IFFALSE 47370
// break ;
47368: GO 47517
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
47370: LD_ADDR_EXP 136
47374: PUSH
47375: LD_EXP 136
47379: PPUSH
47380: LD_VAR 0 5
47384: PPUSH
47385: LD_EXP 136
47389: PUSH
47390: LD_VAR 0 5
47394: ARRAY
47395: PUSH
47396: LD_INT 1
47398: PLUS
47399: PPUSH
47400: CALL_OW 1
47404: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
47405: LD_ADDR_EXP 133
47409: PUSH
47410: LD_EXP 133
47414: PPUSH
47415: LD_VAR 0 5
47419: PUSH
47420: LD_EXP 133
47424: PUSH
47425: LD_VAR 0 5
47429: ARRAY
47430: PUSH
47431: LD_INT 1
47433: PLUS
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PPUSH
47439: LD_VAR 0 2
47443: PUSH
47444: LD_VAR 0 4
47448: ARRAY
47449: PUSH
47450: LD_VAR 0 2
47454: PUSH
47455: LD_VAR 0 4
47459: ARRAY
47460: PPUSH
47461: CALL_OW 255
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PPUSH
47470: CALL 55068 0 3
47474: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
47475: LD_VAR 0 2
47479: PUSH
47480: LD_VAR 0 4
47484: ARRAY
47485: PPUSH
47486: LD_VAR 0 1
47490: PPUSH
47491: CALL_OW 255
47495: PPUSH
47496: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
47500: LD_VAR 0 2
47504: PUSH
47505: LD_VAR 0 4
47509: ARRAY
47510: PPUSH
47511: CALL_OW 141
// end ;
47515: GO 47347
47517: POP
47518: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47519: LD_VAR 0 1
47523: PPUSH
47524: LD_EXP 133
47528: PUSH
47529: LD_VAR 0 5
47533: ARRAY
47534: PUSH
47535: LD_INT 0
47537: PLUS
47538: PPUSH
47539: CALL_OW 505
// end ;
47543: LD_VAR 0 3
47547: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
47548: LD_INT 0
47550: PPUSH
47551: PPUSH
47552: PPUSH
47553: PPUSH
// if not hack in hackTanks then
47554: LD_VAR 0 1
47558: PUSH
47559: LD_EXP 132
47563: IN
47564: NOT
47565: IFFALSE 47569
// exit ;
47567: GO 47809
// index := GetElementIndex ( hackTanks , hack ) ;
47569: LD_ADDR_VAR 0 4
47573: PUSH
47574: LD_EXP 132
47578: PPUSH
47579: LD_VAR 0 1
47583: PPUSH
47584: CALL 54853 0 2
47588: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
47589: LD_ADDR_VAR 0 3
47593: PUSH
47594: DOUBLE
47595: LD_EXP 133
47599: PUSH
47600: LD_VAR 0 4
47604: ARRAY
47605: INC
47606: ST_TO_ADDR
47607: LD_INT 1
47609: PUSH
47610: FOR_DOWNTO
47611: IFFALSE 47783
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
47613: LD_ADDR_VAR 0 5
47617: PUSH
47618: LD_EXP 133
47622: PUSH
47623: LD_VAR 0 4
47627: ARRAY
47628: PUSH
47629: LD_VAR 0 3
47633: ARRAY
47634: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
47635: LD_VAR 0 5
47639: PUSH
47640: LD_INT 1
47642: ARRAY
47643: PPUSH
47644: CALL_OW 302
47648: NOT
47649: PUSH
47650: LD_VAR 0 5
47654: PUSH
47655: LD_INT 1
47657: ARRAY
47658: PPUSH
47659: CALL_OW 255
47663: PUSH
47664: LD_VAR 0 1
47668: PPUSH
47669: CALL_OW 255
47673: NONEQUAL
47674: OR
47675: IFFALSE 47781
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
47677: LD_VAR 0 5
47681: PUSH
47682: LD_INT 1
47684: ARRAY
47685: PPUSH
47686: CALL_OW 305
47690: PUSH
47691: LD_VAR 0 5
47695: PUSH
47696: LD_INT 1
47698: ARRAY
47699: PPUSH
47700: CALL_OW 255
47704: PUSH
47705: LD_VAR 0 1
47709: PPUSH
47710: CALL_OW 255
47714: EQUAL
47715: AND
47716: IFFALSE 47740
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
47718: LD_VAR 0 5
47722: PUSH
47723: LD_INT 1
47725: ARRAY
47726: PPUSH
47727: LD_VAR 0 5
47731: PUSH
47732: LD_INT 2
47734: ARRAY
47735: PPUSH
47736: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
47740: LD_ADDR_EXP 133
47744: PUSH
47745: LD_EXP 133
47749: PPUSH
47750: LD_VAR 0 4
47754: PPUSH
47755: LD_EXP 133
47759: PUSH
47760: LD_VAR 0 4
47764: ARRAY
47765: PPUSH
47766: LD_VAR 0 3
47770: PPUSH
47771: CALL_OW 3
47775: PPUSH
47776: CALL_OW 1
47780: ST_TO_ADDR
// end ; end ;
47781: GO 47610
47783: POP
47784: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47785: LD_VAR 0 1
47789: PPUSH
47790: LD_EXP 133
47794: PUSH
47795: LD_VAR 0 4
47799: ARRAY
47800: PUSH
47801: LD_INT 0
47803: PLUS
47804: PPUSH
47805: CALL_OW 505
// end ;
47809: LD_VAR 0 2
47813: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
47814: LD_INT 0
47816: PPUSH
47817: PPUSH
47818: PPUSH
47819: PPUSH
// if not hack in hackTanks then
47820: LD_VAR 0 1
47824: PUSH
47825: LD_EXP 132
47829: IN
47830: NOT
47831: IFFALSE 47835
// exit ;
47833: GO 47920
// index := GetElementIndex ( hackTanks , hack ) ;
47835: LD_ADDR_VAR 0 5
47839: PUSH
47840: LD_EXP 132
47844: PPUSH
47845: LD_VAR 0 1
47849: PPUSH
47850: CALL 54853 0 2
47854: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
47855: LD_ADDR_VAR 0 4
47859: PUSH
47860: DOUBLE
47861: LD_INT 1
47863: DEC
47864: ST_TO_ADDR
47865: LD_EXP 133
47869: PUSH
47870: LD_VAR 0 5
47874: ARRAY
47875: PUSH
47876: FOR_TO
47877: IFFALSE 47918
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
47879: LD_EXP 133
47883: PUSH
47884: LD_VAR 0 5
47888: ARRAY
47889: PUSH
47890: LD_VAR 0 4
47894: ARRAY
47895: PUSH
47896: LD_INT 1
47898: ARRAY
47899: PUSH
47900: LD_VAR 0 2
47904: EQUAL
47905: IFFALSE 47916
// KillUnit ( vehicle ) ;
47907: LD_VAR 0 2
47911: PPUSH
47912: CALL_OW 66
47916: GO 47876
47918: POP
47919: POP
// end ;
47920: LD_VAR 0 3
47924: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
47925: LD_EXP 137
47929: NOT
47930: IFFALSE 47965
47932: GO 47934
47934: DISABLE
// begin initMiner := true ;
47935: LD_ADDR_EXP 137
47939: PUSH
47940: LD_INT 1
47942: ST_TO_ADDR
// minersList := [ ] ;
47943: LD_ADDR_EXP 138
47947: PUSH
47948: EMPTY
47949: ST_TO_ADDR
// minerMinesList := [ ] ;
47950: LD_ADDR_EXP 139
47954: PUSH
47955: EMPTY
47956: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
47957: LD_ADDR_EXP 140
47961: PUSH
47962: LD_INT 5
47964: ST_TO_ADDR
// end ;
47965: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
47966: LD_EXP 137
47970: PUSH
47971: LD_INT 34
47973: PUSH
47974: LD_INT 81
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PPUSH
47981: CALL_OW 69
47985: AND
47986: IFFALSE 48447
47988: GO 47990
47990: DISABLE
47991: LD_INT 0
47993: PPUSH
47994: PPUSH
47995: PPUSH
47996: PPUSH
// begin enable ;
47997: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
47998: LD_ADDR_VAR 0 1
48002: PUSH
48003: LD_INT 34
48005: PUSH
48006: LD_INT 81
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PPUSH
48013: CALL_OW 69
48017: PUSH
48018: FOR_IN
48019: IFFALSE 48091
// begin if not i in minersList then
48021: LD_VAR 0 1
48025: PUSH
48026: LD_EXP 138
48030: IN
48031: NOT
48032: IFFALSE 48089
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
48034: LD_ADDR_EXP 138
48038: PUSH
48039: LD_EXP 138
48043: PPUSH
48044: LD_EXP 138
48048: PUSH
48049: LD_INT 1
48051: PLUS
48052: PPUSH
48053: LD_VAR 0 1
48057: PPUSH
48058: CALL_OW 1
48062: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
48063: LD_ADDR_EXP 139
48067: PUSH
48068: LD_EXP 139
48072: PPUSH
48073: LD_EXP 139
48077: PUSH
48078: LD_INT 1
48080: PLUS
48081: PPUSH
48082: EMPTY
48083: PPUSH
48084: CALL_OW 1
48088: ST_TO_ADDR
// end end ;
48089: GO 48018
48091: POP
48092: POP
// for i := minerMinesList downto 1 do
48093: LD_ADDR_VAR 0 1
48097: PUSH
48098: DOUBLE
48099: LD_EXP 139
48103: INC
48104: ST_TO_ADDR
48105: LD_INT 1
48107: PUSH
48108: FOR_DOWNTO
48109: IFFALSE 48445
// begin if IsLive ( minersList [ i ] ) then
48111: LD_EXP 138
48115: PUSH
48116: LD_VAR 0 1
48120: ARRAY
48121: PPUSH
48122: CALL_OW 300
48126: IFFALSE 48154
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
48128: LD_EXP 138
48132: PUSH
48133: LD_VAR 0 1
48137: ARRAY
48138: PPUSH
48139: LD_EXP 139
48143: PUSH
48144: LD_VAR 0 1
48148: ARRAY
48149: PPUSH
48150: CALL_OW 505
// if not minerMinesList [ i ] then
48154: LD_EXP 139
48158: PUSH
48159: LD_VAR 0 1
48163: ARRAY
48164: NOT
48165: IFFALSE 48169
// continue ;
48167: GO 48108
// for j := minerMinesList [ i ] downto 1 do
48169: LD_ADDR_VAR 0 2
48173: PUSH
48174: DOUBLE
48175: LD_EXP 139
48179: PUSH
48180: LD_VAR 0 1
48184: ARRAY
48185: INC
48186: ST_TO_ADDR
48187: LD_INT 1
48189: PUSH
48190: FOR_DOWNTO
48191: IFFALSE 48441
// begin side := GetSide ( minersList [ i ] ) ;
48193: LD_ADDR_VAR 0 3
48197: PUSH
48198: LD_EXP 138
48202: PUSH
48203: LD_VAR 0 1
48207: ARRAY
48208: PPUSH
48209: CALL_OW 255
48213: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
48214: LD_ADDR_VAR 0 4
48218: PUSH
48219: LD_EXP 139
48223: PUSH
48224: LD_VAR 0 1
48228: ARRAY
48229: PUSH
48230: LD_VAR 0 2
48234: ARRAY
48235: PUSH
48236: LD_INT 1
48238: ARRAY
48239: PPUSH
48240: LD_EXP 139
48244: PUSH
48245: LD_VAR 0 1
48249: ARRAY
48250: PUSH
48251: LD_VAR 0 2
48255: ARRAY
48256: PUSH
48257: LD_INT 2
48259: ARRAY
48260: PPUSH
48261: CALL_OW 428
48265: ST_TO_ADDR
// if not tmp then
48266: LD_VAR 0 4
48270: NOT
48271: IFFALSE 48275
// continue ;
48273: GO 48190
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
48275: LD_VAR 0 4
48279: PUSH
48280: LD_INT 81
48282: PUSH
48283: LD_VAR 0 3
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PPUSH
48292: CALL_OW 69
48296: IN
48297: PUSH
48298: LD_EXP 139
48302: PUSH
48303: LD_VAR 0 1
48307: ARRAY
48308: PUSH
48309: LD_VAR 0 2
48313: ARRAY
48314: PUSH
48315: LD_INT 1
48317: ARRAY
48318: PPUSH
48319: LD_EXP 139
48323: PUSH
48324: LD_VAR 0 1
48328: ARRAY
48329: PUSH
48330: LD_VAR 0 2
48334: ARRAY
48335: PUSH
48336: LD_INT 2
48338: ARRAY
48339: PPUSH
48340: CALL_OW 458
48344: AND
48345: IFFALSE 48439
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
48347: LD_EXP 139
48351: PUSH
48352: LD_VAR 0 1
48356: ARRAY
48357: PUSH
48358: LD_VAR 0 2
48362: ARRAY
48363: PUSH
48364: LD_INT 1
48366: ARRAY
48367: PPUSH
48368: LD_EXP 139
48372: PUSH
48373: LD_VAR 0 1
48377: ARRAY
48378: PUSH
48379: LD_VAR 0 2
48383: ARRAY
48384: PUSH
48385: LD_INT 2
48387: ARRAY
48388: PPUSH
48389: LD_VAR 0 3
48393: PPUSH
48394: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
48398: LD_ADDR_EXP 139
48402: PUSH
48403: LD_EXP 139
48407: PPUSH
48408: LD_VAR 0 1
48412: PPUSH
48413: LD_EXP 139
48417: PUSH
48418: LD_VAR 0 1
48422: ARRAY
48423: PPUSH
48424: LD_VAR 0 2
48428: PPUSH
48429: CALL_OW 3
48433: PPUSH
48434: CALL_OW 1
48438: ST_TO_ADDR
// end ; end ;
48439: GO 48190
48441: POP
48442: POP
// end ;
48443: GO 48108
48445: POP
48446: POP
// end ;
48447: PPOPN 4
48449: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
48450: LD_INT 0
48452: PPUSH
48453: PPUSH
// result := false ;
48454: LD_ADDR_VAR 0 4
48458: PUSH
48459: LD_INT 0
48461: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
48462: LD_VAR 0 1
48466: PPUSH
48467: CALL_OW 264
48471: PUSH
48472: LD_INT 81
48474: EQUAL
48475: NOT
48476: IFFALSE 48480
// exit ;
48478: GO 48720
// index := GetElementIndex ( minersList , unit ) ;
48480: LD_ADDR_VAR 0 5
48484: PUSH
48485: LD_EXP 138
48489: PPUSH
48490: LD_VAR 0 1
48494: PPUSH
48495: CALL 54853 0 2
48499: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
48500: LD_EXP 139
48504: PUSH
48505: LD_VAR 0 5
48509: ARRAY
48510: PUSH
48511: LD_EXP 140
48515: GREATEREQUAL
48516: IFFALSE 48520
// exit ;
48518: GO 48720
// ComMoveXY ( unit , x , y ) ;
48520: LD_VAR 0 1
48524: PPUSH
48525: LD_VAR 0 2
48529: PPUSH
48530: LD_VAR 0 3
48534: PPUSH
48535: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48539: LD_INT 35
48541: PPUSH
48542: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
48546: LD_VAR 0 1
48550: PPUSH
48551: LD_VAR 0 2
48555: PPUSH
48556: LD_VAR 0 3
48560: PPUSH
48561: CALL 86189 0 3
48565: NOT
48566: PUSH
48567: LD_VAR 0 1
48571: PPUSH
48572: CALL_OW 314
48576: AND
48577: IFFALSE 48581
// exit ;
48579: GO 48720
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
48581: LD_VAR 0 2
48585: PPUSH
48586: LD_VAR 0 3
48590: PPUSH
48591: CALL_OW 428
48595: PUSH
48596: LD_VAR 0 1
48600: EQUAL
48601: PUSH
48602: LD_VAR 0 1
48606: PPUSH
48607: CALL_OW 314
48611: NOT
48612: AND
48613: IFFALSE 48539
// PlaySoundXY ( x , y , PlantMine ) ;
48615: LD_VAR 0 2
48619: PPUSH
48620: LD_VAR 0 3
48624: PPUSH
48625: LD_STRING PlantMine
48627: PPUSH
48628: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
48632: LD_VAR 0 2
48636: PPUSH
48637: LD_VAR 0 3
48641: PPUSH
48642: LD_VAR 0 1
48646: PPUSH
48647: CALL_OW 255
48651: PPUSH
48652: LD_INT 0
48654: PPUSH
48655: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
48659: LD_ADDR_EXP 139
48663: PUSH
48664: LD_EXP 139
48668: PPUSH
48669: LD_VAR 0 5
48673: PUSH
48674: LD_EXP 139
48678: PUSH
48679: LD_VAR 0 5
48683: ARRAY
48684: PUSH
48685: LD_INT 1
48687: PLUS
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PPUSH
48693: LD_VAR 0 2
48697: PUSH
48698: LD_VAR 0 3
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PPUSH
48707: CALL 55068 0 3
48711: ST_TO_ADDR
// result := true ;
48712: LD_ADDR_VAR 0 4
48716: PUSH
48717: LD_INT 1
48719: ST_TO_ADDR
// end ;
48720: LD_VAR 0 4
48724: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
48725: LD_INT 0
48727: PPUSH
48728: PPUSH
48729: PPUSH
// if not unit in minersList then
48730: LD_VAR 0 1
48734: PUSH
48735: LD_EXP 138
48739: IN
48740: NOT
48741: IFFALSE 48745
// exit ;
48743: GO 49137
// index := GetElementIndex ( minersList , unit ) ;
48745: LD_ADDR_VAR 0 6
48749: PUSH
48750: LD_EXP 138
48754: PPUSH
48755: LD_VAR 0 1
48759: PPUSH
48760: CALL 54853 0 2
48764: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
48765: LD_ADDR_VAR 0 5
48769: PUSH
48770: DOUBLE
48771: LD_EXP 139
48775: PUSH
48776: LD_VAR 0 6
48780: ARRAY
48781: INC
48782: ST_TO_ADDR
48783: LD_INT 1
48785: PUSH
48786: FOR_DOWNTO
48787: IFFALSE 48948
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
48789: LD_EXP 139
48793: PUSH
48794: LD_VAR 0 6
48798: ARRAY
48799: PUSH
48800: LD_VAR 0 5
48804: ARRAY
48805: PUSH
48806: LD_INT 1
48808: ARRAY
48809: PUSH
48810: LD_VAR 0 2
48814: EQUAL
48815: PUSH
48816: LD_EXP 139
48820: PUSH
48821: LD_VAR 0 6
48825: ARRAY
48826: PUSH
48827: LD_VAR 0 5
48831: ARRAY
48832: PUSH
48833: LD_INT 2
48835: ARRAY
48836: PUSH
48837: LD_VAR 0 3
48841: EQUAL
48842: AND
48843: IFFALSE 48946
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
48845: LD_EXP 139
48849: PUSH
48850: LD_VAR 0 6
48854: ARRAY
48855: PUSH
48856: LD_VAR 0 5
48860: ARRAY
48861: PUSH
48862: LD_INT 1
48864: ARRAY
48865: PPUSH
48866: LD_EXP 139
48870: PUSH
48871: LD_VAR 0 6
48875: ARRAY
48876: PUSH
48877: LD_VAR 0 5
48881: ARRAY
48882: PUSH
48883: LD_INT 2
48885: ARRAY
48886: PPUSH
48887: LD_VAR 0 1
48891: PPUSH
48892: CALL_OW 255
48896: PPUSH
48897: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
48901: LD_ADDR_EXP 139
48905: PUSH
48906: LD_EXP 139
48910: PPUSH
48911: LD_VAR 0 6
48915: PPUSH
48916: LD_EXP 139
48920: PUSH
48921: LD_VAR 0 6
48925: ARRAY
48926: PPUSH
48927: LD_VAR 0 5
48931: PPUSH
48932: CALL_OW 3
48936: PPUSH
48937: CALL_OW 1
48941: ST_TO_ADDR
// exit ;
48942: POP
48943: POP
48944: GO 49137
// end ; end ;
48946: GO 48786
48948: POP
48949: POP
// for i := minerMinesList [ index ] downto 1 do
48950: LD_ADDR_VAR 0 5
48954: PUSH
48955: DOUBLE
48956: LD_EXP 139
48960: PUSH
48961: LD_VAR 0 6
48965: ARRAY
48966: INC
48967: ST_TO_ADDR
48968: LD_INT 1
48970: PUSH
48971: FOR_DOWNTO
48972: IFFALSE 49135
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
48974: LD_EXP 139
48978: PUSH
48979: LD_VAR 0 6
48983: ARRAY
48984: PUSH
48985: LD_VAR 0 5
48989: ARRAY
48990: PUSH
48991: LD_INT 1
48993: ARRAY
48994: PPUSH
48995: LD_EXP 139
48999: PUSH
49000: LD_VAR 0 6
49004: ARRAY
49005: PUSH
49006: LD_VAR 0 5
49010: ARRAY
49011: PUSH
49012: LD_INT 2
49014: ARRAY
49015: PPUSH
49016: LD_VAR 0 2
49020: PPUSH
49021: LD_VAR 0 3
49025: PPUSH
49026: CALL_OW 298
49030: PUSH
49031: LD_INT 6
49033: LESS
49034: IFFALSE 49133
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49036: LD_EXP 139
49040: PUSH
49041: LD_VAR 0 6
49045: ARRAY
49046: PUSH
49047: LD_VAR 0 5
49051: ARRAY
49052: PUSH
49053: LD_INT 1
49055: ARRAY
49056: PPUSH
49057: LD_EXP 139
49061: PUSH
49062: LD_VAR 0 6
49066: ARRAY
49067: PUSH
49068: LD_VAR 0 5
49072: ARRAY
49073: PUSH
49074: LD_INT 2
49076: ARRAY
49077: PPUSH
49078: LD_VAR 0 1
49082: PPUSH
49083: CALL_OW 255
49087: PPUSH
49088: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49092: LD_ADDR_EXP 139
49096: PUSH
49097: LD_EXP 139
49101: PPUSH
49102: LD_VAR 0 6
49106: PPUSH
49107: LD_EXP 139
49111: PUSH
49112: LD_VAR 0 6
49116: ARRAY
49117: PPUSH
49118: LD_VAR 0 5
49122: PPUSH
49123: CALL_OW 3
49127: PPUSH
49128: CALL_OW 1
49132: ST_TO_ADDR
// end ; end ;
49133: GO 48971
49135: POP
49136: POP
// end ;
49137: LD_VAR 0 4
49141: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
49142: LD_INT 0
49144: PPUSH
49145: PPUSH
49146: PPUSH
49147: PPUSH
49148: PPUSH
49149: PPUSH
49150: PPUSH
49151: PPUSH
49152: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
49153: LD_VAR 0 1
49157: PPUSH
49158: CALL_OW 264
49162: PUSH
49163: LD_INT 81
49165: EQUAL
49166: NOT
49167: PUSH
49168: LD_VAR 0 1
49172: PUSH
49173: LD_EXP 138
49177: IN
49178: NOT
49179: OR
49180: IFFALSE 49184
// exit ;
49182: GO 49506
// index := GetElementIndex ( minersList , unit ) ;
49184: LD_ADDR_VAR 0 6
49188: PUSH
49189: LD_EXP 138
49193: PPUSH
49194: LD_VAR 0 1
49198: PPUSH
49199: CALL 54853 0 2
49203: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
49204: LD_ADDR_VAR 0 8
49208: PUSH
49209: LD_EXP 140
49213: PUSH
49214: LD_EXP 139
49218: PUSH
49219: LD_VAR 0 6
49223: ARRAY
49224: MINUS
49225: ST_TO_ADDR
// if not minesFreeAmount then
49226: LD_VAR 0 8
49230: NOT
49231: IFFALSE 49235
// exit ;
49233: GO 49506
// tmp := [ ] ;
49235: LD_ADDR_VAR 0 7
49239: PUSH
49240: EMPTY
49241: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
49242: LD_ADDR_VAR 0 5
49246: PUSH
49247: DOUBLE
49248: LD_INT 1
49250: DEC
49251: ST_TO_ADDR
49252: LD_VAR 0 8
49256: PUSH
49257: FOR_TO
49258: IFFALSE 49453
// begin _d := rand ( 0 , 5 ) ;
49260: LD_ADDR_VAR 0 11
49264: PUSH
49265: LD_INT 0
49267: PPUSH
49268: LD_INT 5
49270: PPUSH
49271: CALL_OW 12
49275: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
49276: LD_ADDR_VAR 0 12
49280: PUSH
49281: LD_INT 2
49283: PPUSH
49284: LD_INT 6
49286: PPUSH
49287: CALL_OW 12
49291: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
49292: LD_ADDR_VAR 0 9
49296: PUSH
49297: LD_VAR 0 2
49301: PPUSH
49302: LD_VAR 0 11
49306: PPUSH
49307: LD_VAR 0 12
49311: PPUSH
49312: CALL_OW 272
49316: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
49317: LD_ADDR_VAR 0 10
49321: PUSH
49322: LD_VAR 0 3
49326: PPUSH
49327: LD_VAR 0 11
49331: PPUSH
49332: LD_VAR 0 12
49336: PPUSH
49337: CALL_OW 273
49341: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
49342: LD_VAR 0 9
49346: PPUSH
49347: LD_VAR 0 10
49351: PPUSH
49352: CALL_OW 488
49356: PUSH
49357: LD_VAR 0 9
49361: PUSH
49362: LD_VAR 0 10
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_VAR 0 7
49375: IN
49376: NOT
49377: AND
49378: PUSH
49379: LD_VAR 0 9
49383: PPUSH
49384: LD_VAR 0 10
49388: PPUSH
49389: CALL_OW 458
49393: NOT
49394: AND
49395: IFFALSE 49437
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
49397: LD_ADDR_VAR 0 7
49401: PUSH
49402: LD_VAR 0 7
49406: PPUSH
49407: LD_VAR 0 7
49411: PUSH
49412: LD_INT 1
49414: PLUS
49415: PPUSH
49416: LD_VAR 0 9
49420: PUSH
49421: LD_VAR 0 10
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PPUSH
49430: CALL_OW 1
49434: ST_TO_ADDR
49435: GO 49451
// i := i - 1 ;
49437: LD_ADDR_VAR 0 5
49441: PUSH
49442: LD_VAR 0 5
49446: PUSH
49447: LD_INT 1
49449: MINUS
49450: ST_TO_ADDR
// end ;
49451: GO 49257
49453: POP
49454: POP
// for i in tmp do
49455: LD_ADDR_VAR 0 5
49459: PUSH
49460: LD_VAR 0 7
49464: PUSH
49465: FOR_IN
49466: IFFALSE 49504
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
49468: LD_VAR 0 1
49472: PPUSH
49473: LD_VAR 0 5
49477: PUSH
49478: LD_INT 1
49480: ARRAY
49481: PPUSH
49482: LD_VAR 0 5
49486: PUSH
49487: LD_INT 2
49489: ARRAY
49490: PPUSH
49491: CALL 48450 0 3
49495: NOT
49496: IFFALSE 49502
// exit ;
49498: POP
49499: POP
49500: GO 49506
49502: GO 49465
49504: POP
49505: POP
// end ;
49506: LD_VAR 0 4
49510: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
49511: LD_INT 0
49513: PPUSH
49514: PPUSH
49515: PPUSH
49516: PPUSH
49517: PPUSH
49518: PPUSH
49519: PPUSH
// if not GetClass ( unit ) = class_sniper then
49520: LD_VAR 0 1
49524: PPUSH
49525: CALL_OW 257
49529: PUSH
49530: LD_INT 5
49532: EQUAL
49533: NOT
49534: IFFALSE 49538
// exit ;
49536: GO 49926
// dist := 8 ;
49538: LD_ADDR_VAR 0 5
49542: PUSH
49543: LD_INT 8
49545: ST_TO_ADDR
// viewRange := 12 ;
49546: LD_ADDR_VAR 0 7
49550: PUSH
49551: LD_INT 12
49553: ST_TO_ADDR
// side := GetSide ( unit ) ;
49554: LD_ADDR_VAR 0 6
49558: PUSH
49559: LD_VAR 0 1
49563: PPUSH
49564: CALL_OW 255
49568: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
49569: LD_INT 61
49571: PPUSH
49572: LD_VAR 0 6
49576: PPUSH
49577: CALL_OW 321
49581: PUSH
49582: LD_INT 2
49584: EQUAL
49585: IFFALSE 49595
// viewRange := 16 ;
49587: LD_ADDR_VAR 0 7
49591: PUSH
49592: LD_INT 16
49594: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
49595: LD_VAR 0 1
49599: PPUSH
49600: LD_VAR 0 2
49604: PPUSH
49605: LD_VAR 0 3
49609: PPUSH
49610: CALL_OW 297
49614: PUSH
49615: LD_VAR 0 5
49619: GREATER
49620: IFFALSE 49699
// begin ComMoveXY ( unit , x , y ) ;
49622: LD_VAR 0 1
49626: PPUSH
49627: LD_VAR 0 2
49631: PPUSH
49632: LD_VAR 0 3
49636: PPUSH
49637: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
49641: LD_INT 35
49643: PPUSH
49644: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
49648: LD_VAR 0 1
49652: PPUSH
49653: LD_VAR 0 2
49657: PPUSH
49658: LD_VAR 0 3
49662: PPUSH
49663: CALL 86189 0 3
49667: NOT
49668: IFFALSE 49672
// exit ;
49670: GO 49926
// until GetDistUnitXY ( unit , x , y ) < dist ;
49672: LD_VAR 0 1
49676: PPUSH
49677: LD_VAR 0 2
49681: PPUSH
49682: LD_VAR 0 3
49686: PPUSH
49687: CALL_OW 297
49691: PUSH
49692: LD_VAR 0 5
49696: LESS
49697: IFFALSE 49641
// end ; ComTurnXY ( unit , x , y ) ;
49699: LD_VAR 0 1
49703: PPUSH
49704: LD_VAR 0 2
49708: PPUSH
49709: LD_VAR 0 3
49713: PPUSH
49714: CALL_OW 118
// wait ( 5 ) ;
49718: LD_INT 5
49720: PPUSH
49721: CALL_OW 67
// _d := GetDir ( unit ) ;
49725: LD_ADDR_VAR 0 10
49729: PUSH
49730: LD_VAR 0 1
49734: PPUSH
49735: CALL_OW 254
49739: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
49740: LD_ADDR_VAR 0 8
49744: PUSH
49745: LD_VAR 0 1
49749: PPUSH
49750: CALL_OW 250
49754: PPUSH
49755: LD_VAR 0 10
49759: PPUSH
49760: LD_VAR 0 5
49764: PPUSH
49765: CALL_OW 272
49769: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
49770: LD_ADDR_VAR 0 9
49774: PUSH
49775: LD_VAR 0 1
49779: PPUSH
49780: CALL_OW 251
49784: PPUSH
49785: LD_VAR 0 10
49789: PPUSH
49790: LD_VAR 0 5
49794: PPUSH
49795: CALL_OW 273
49799: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49800: LD_VAR 0 8
49804: PPUSH
49805: LD_VAR 0 9
49809: PPUSH
49810: CALL_OW 488
49814: NOT
49815: IFFALSE 49819
// exit ;
49817: GO 49926
// ComAnimCustom ( unit , 1 ) ;
49819: LD_VAR 0 1
49823: PPUSH
49824: LD_INT 1
49826: PPUSH
49827: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
49831: LD_VAR 0 8
49835: PPUSH
49836: LD_VAR 0 9
49840: PPUSH
49841: LD_VAR 0 6
49845: PPUSH
49846: LD_VAR 0 7
49850: PPUSH
49851: CALL_OW 330
// repeat wait ( 1 ) ;
49855: LD_INT 1
49857: PPUSH
49858: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
49862: LD_VAR 0 1
49866: PPUSH
49867: CALL_OW 316
49871: PUSH
49872: LD_VAR 0 1
49876: PPUSH
49877: CALL_OW 314
49881: OR
49882: PUSH
49883: LD_VAR 0 1
49887: PPUSH
49888: CALL_OW 302
49892: NOT
49893: OR
49894: PUSH
49895: LD_VAR 0 1
49899: PPUSH
49900: CALL_OW 301
49904: OR
49905: IFFALSE 49855
// RemoveSeeing ( _x , _y , side ) ;
49907: LD_VAR 0 8
49911: PPUSH
49912: LD_VAR 0 9
49916: PPUSH
49917: LD_VAR 0 6
49921: PPUSH
49922: CALL_OW 331
// end ; end_of_file
49926: LD_VAR 0 4
49930: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
49931: LD_INT 0
49933: PPUSH
49934: PPUSH
// if exist_mode then
49935: LD_VAR 0 2
49939: IFFALSE 49964
// unit := CreateCharacter ( prefix & ident ) else
49941: LD_ADDR_VAR 0 5
49945: PUSH
49946: LD_VAR 0 3
49950: PUSH
49951: LD_VAR 0 1
49955: STR
49956: PPUSH
49957: CALL_OW 34
49961: ST_TO_ADDR
49962: GO 49979
// unit := NewCharacter ( ident ) ;
49964: LD_ADDR_VAR 0 5
49968: PUSH
49969: LD_VAR 0 1
49973: PPUSH
49974: CALL_OW 25
49978: ST_TO_ADDR
// result := unit ;
49979: LD_ADDR_VAR 0 4
49983: PUSH
49984: LD_VAR 0 5
49988: ST_TO_ADDR
// end ;
49989: LD_VAR 0 4
49993: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
49994: LD_INT 0
49996: PPUSH
49997: PPUSH
// if not side or not nation then
49998: LD_VAR 0 1
50002: NOT
50003: PUSH
50004: LD_VAR 0 2
50008: NOT
50009: OR
50010: IFFALSE 50014
// exit ;
50012: GO 50782
// case nation of nation_american :
50014: LD_VAR 0 2
50018: PUSH
50019: LD_INT 1
50021: DOUBLE
50022: EQUAL
50023: IFTRUE 50027
50025: GO 50241
50027: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
50028: LD_ADDR_VAR 0 4
50032: PUSH
50033: LD_INT 35
50035: PUSH
50036: LD_INT 45
50038: PUSH
50039: LD_INT 46
50041: PUSH
50042: LD_INT 47
50044: PUSH
50045: LD_INT 82
50047: PUSH
50048: LD_INT 83
50050: PUSH
50051: LD_INT 84
50053: PUSH
50054: LD_INT 85
50056: PUSH
50057: LD_INT 86
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 2
50065: PUSH
50066: LD_INT 6
50068: PUSH
50069: LD_INT 15
50071: PUSH
50072: LD_INT 16
50074: PUSH
50075: LD_INT 7
50077: PUSH
50078: LD_INT 12
50080: PUSH
50081: LD_INT 13
50083: PUSH
50084: LD_INT 10
50086: PUSH
50087: LD_INT 14
50089: PUSH
50090: LD_INT 20
50092: PUSH
50093: LD_INT 21
50095: PUSH
50096: LD_INT 22
50098: PUSH
50099: LD_INT 25
50101: PUSH
50102: LD_INT 32
50104: PUSH
50105: LD_INT 27
50107: PUSH
50108: LD_INT 36
50110: PUSH
50111: LD_INT 69
50113: PUSH
50114: LD_INT 39
50116: PUSH
50117: LD_INT 34
50119: PUSH
50120: LD_INT 40
50122: PUSH
50123: LD_INT 48
50125: PUSH
50126: LD_INT 49
50128: PUSH
50129: LD_INT 50
50131: PUSH
50132: LD_INT 51
50134: PUSH
50135: LD_INT 52
50137: PUSH
50138: LD_INT 53
50140: PUSH
50141: LD_INT 54
50143: PUSH
50144: LD_INT 55
50146: PUSH
50147: LD_INT 56
50149: PUSH
50150: LD_INT 57
50152: PUSH
50153: LD_INT 58
50155: PUSH
50156: LD_INT 59
50158: PUSH
50159: LD_INT 60
50161: PUSH
50162: LD_INT 61
50164: PUSH
50165: LD_INT 62
50167: PUSH
50168: LD_INT 80
50170: PUSH
50171: LD_INT 82
50173: PUSH
50174: LD_INT 83
50176: PUSH
50177: LD_INT 84
50179: PUSH
50180: LD_INT 85
50182: PUSH
50183: LD_INT 86
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: ST_TO_ADDR
50239: GO 50706
50241: LD_INT 2
50243: DOUBLE
50244: EQUAL
50245: IFTRUE 50249
50247: GO 50475
50249: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
50250: LD_ADDR_VAR 0 4
50254: PUSH
50255: LD_INT 35
50257: PUSH
50258: LD_INT 45
50260: PUSH
50261: LD_INT 46
50263: PUSH
50264: LD_INT 47
50266: PUSH
50267: LD_INT 82
50269: PUSH
50270: LD_INT 83
50272: PUSH
50273: LD_INT 84
50275: PUSH
50276: LD_INT 85
50278: PUSH
50279: LD_INT 87
50281: PUSH
50282: LD_INT 70
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: LD_INT 11
50290: PUSH
50291: LD_INT 3
50293: PUSH
50294: LD_INT 4
50296: PUSH
50297: LD_INT 5
50299: PUSH
50300: LD_INT 6
50302: PUSH
50303: LD_INT 15
50305: PUSH
50306: LD_INT 18
50308: PUSH
50309: LD_INT 7
50311: PUSH
50312: LD_INT 17
50314: PUSH
50315: LD_INT 8
50317: PUSH
50318: LD_INT 20
50320: PUSH
50321: LD_INT 21
50323: PUSH
50324: LD_INT 22
50326: PUSH
50327: LD_INT 72
50329: PUSH
50330: LD_INT 26
50332: PUSH
50333: LD_INT 69
50335: PUSH
50336: LD_INT 39
50338: PUSH
50339: LD_INT 40
50341: PUSH
50342: LD_INT 41
50344: PUSH
50345: LD_INT 42
50347: PUSH
50348: LD_INT 43
50350: PUSH
50351: LD_INT 48
50353: PUSH
50354: LD_INT 49
50356: PUSH
50357: LD_INT 50
50359: PUSH
50360: LD_INT 51
50362: PUSH
50363: LD_INT 52
50365: PUSH
50366: LD_INT 53
50368: PUSH
50369: LD_INT 54
50371: PUSH
50372: LD_INT 55
50374: PUSH
50375: LD_INT 56
50377: PUSH
50378: LD_INT 60
50380: PUSH
50381: LD_INT 61
50383: PUSH
50384: LD_INT 62
50386: PUSH
50387: LD_INT 66
50389: PUSH
50390: LD_INT 67
50392: PUSH
50393: LD_INT 68
50395: PUSH
50396: LD_INT 81
50398: PUSH
50399: LD_INT 82
50401: PUSH
50402: LD_INT 83
50404: PUSH
50405: LD_INT 84
50407: PUSH
50408: LD_INT 85
50410: PUSH
50411: LD_INT 87
50413: PUSH
50414: LD_INT 88
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: ST_TO_ADDR
50473: GO 50706
50475: LD_INT 3
50477: DOUBLE
50478: EQUAL
50479: IFTRUE 50483
50481: GO 50705
50483: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
50484: LD_ADDR_VAR 0 4
50488: PUSH
50489: LD_INT 46
50491: PUSH
50492: LD_INT 47
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: LD_INT 82
50503: PUSH
50504: LD_INT 83
50506: PUSH
50507: LD_INT 84
50509: PUSH
50510: LD_INT 85
50512: PUSH
50513: LD_INT 86
50515: PUSH
50516: LD_INT 11
50518: PUSH
50519: LD_INT 9
50521: PUSH
50522: LD_INT 20
50524: PUSH
50525: LD_INT 19
50527: PUSH
50528: LD_INT 21
50530: PUSH
50531: LD_INT 24
50533: PUSH
50534: LD_INT 22
50536: PUSH
50537: LD_INT 25
50539: PUSH
50540: LD_INT 28
50542: PUSH
50543: LD_INT 29
50545: PUSH
50546: LD_INT 30
50548: PUSH
50549: LD_INT 31
50551: PUSH
50552: LD_INT 37
50554: PUSH
50555: LD_INT 38
50557: PUSH
50558: LD_INT 32
50560: PUSH
50561: LD_INT 27
50563: PUSH
50564: LD_INT 33
50566: PUSH
50567: LD_INT 69
50569: PUSH
50570: LD_INT 39
50572: PUSH
50573: LD_INT 34
50575: PUSH
50576: LD_INT 40
50578: PUSH
50579: LD_INT 71
50581: PUSH
50582: LD_INT 23
50584: PUSH
50585: LD_INT 44
50587: PUSH
50588: LD_INT 48
50590: PUSH
50591: LD_INT 49
50593: PUSH
50594: LD_INT 50
50596: PUSH
50597: LD_INT 51
50599: PUSH
50600: LD_INT 52
50602: PUSH
50603: LD_INT 53
50605: PUSH
50606: LD_INT 54
50608: PUSH
50609: LD_INT 55
50611: PUSH
50612: LD_INT 56
50614: PUSH
50615: LD_INT 57
50617: PUSH
50618: LD_INT 58
50620: PUSH
50621: LD_INT 59
50623: PUSH
50624: LD_INT 63
50626: PUSH
50627: LD_INT 64
50629: PUSH
50630: LD_INT 65
50632: PUSH
50633: LD_INT 82
50635: PUSH
50636: LD_INT 83
50638: PUSH
50639: LD_INT 84
50641: PUSH
50642: LD_INT 85
50644: PUSH
50645: LD_INT 86
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: ST_TO_ADDR
50703: GO 50706
50705: POP
// if state > - 1 and state < 3 then
50706: LD_VAR 0 3
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: GREATER
50715: PUSH
50716: LD_VAR 0 3
50720: PUSH
50721: LD_INT 3
50723: LESS
50724: AND
50725: IFFALSE 50782
// for i in result do
50727: LD_ADDR_VAR 0 5
50731: PUSH
50732: LD_VAR 0 4
50736: PUSH
50737: FOR_IN
50738: IFFALSE 50780
// if GetTech ( i , side ) <> state then
50740: LD_VAR 0 5
50744: PPUSH
50745: LD_VAR 0 1
50749: PPUSH
50750: CALL_OW 321
50754: PUSH
50755: LD_VAR 0 3
50759: NONEQUAL
50760: IFFALSE 50778
// result := result diff i ;
50762: LD_ADDR_VAR 0 4
50766: PUSH
50767: LD_VAR 0 4
50771: PUSH
50772: LD_VAR 0 5
50776: DIFF
50777: ST_TO_ADDR
50778: GO 50737
50780: POP
50781: POP
// end ;
50782: LD_VAR 0 4
50786: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
50787: LD_INT 0
50789: PPUSH
50790: PPUSH
50791: PPUSH
// result := true ;
50792: LD_ADDR_VAR 0 3
50796: PUSH
50797: LD_INT 1
50799: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
50800: LD_ADDR_VAR 0 5
50804: PUSH
50805: LD_VAR 0 2
50809: PPUSH
50810: CALL_OW 480
50814: ST_TO_ADDR
// if not tmp then
50815: LD_VAR 0 5
50819: NOT
50820: IFFALSE 50824
// exit ;
50822: GO 50873
// for i in tmp do
50824: LD_ADDR_VAR 0 4
50828: PUSH
50829: LD_VAR 0 5
50833: PUSH
50834: FOR_IN
50835: IFFALSE 50871
// if GetTech ( i , side ) <> state_researched then
50837: LD_VAR 0 4
50841: PPUSH
50842: LD_VAR 0 1
50846: PPUSH
50847: CALL_OW 321
50851: PUSH
50852: LD_INT 2
50854: NONEQUAL
50855: IFFALSE 50869
// begin result := false ;
50857: LD_ADDR_VAR 0 3
50861: PUSH
50862: LD_INT 0
50864: ST_TO_ADDR
// exit ;
50865: POP
50866: POP
50867: GO 50873
// end ;
50869: GO 50834
50871: POP
50872: POP
// end ;
50873: LD_VAR 0 3
50877: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
50878: LD_INT 0
50880: PPUSH
50881: PPUSH
50882: PPUSH
50883: PPUSH
50884: PPUSH
50885: PPUSH
50886: PPUSH
50887: PPUSH
50888: PPUSH
50889: PPUSH
50890: PPUSH
50891: PPUSH
50892: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
50893: LD_VAR 0 1
50897: NOT
50898: PUSH
50899: LD_VAR 0 1
50903: PPUSH
50904: CALL_OW 257
50908: PUSH
50909: LD_INT 9
50911: NONEQUAL
50912: OR
50913: IFFALSE 50917
// exit ;
50915: GO 51490
// side := GetSide ( unit ) ;
50917: LD_ADDR_VAR 0 9
50921: PUSH
50922: LD_VAR 0 1
50926: PPUSH
50927: CALL_OW 255
50931: ST_TO_ADDR
// tech_space := tech_spacanom ;
50932: LD_ADDR_VAR 0 12
50936: PUSH
50937: LD_INT 29
50939: ST_TO_ADDR
// tech_time := tech_taurad ;
50940: LD_ADDR_VAR 0 13
50944: PUSH
50945: LD_INT 28
50947: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
50948: LD_ADDR_VAR 0 11
50952: PUSH
50953: LD_VAR 0 1
50957: PPUSH
50958: CALL_OW 310
50962: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
50963: LD_VAR 0 11
50967: PPUSH
50968: CALL_OW 247
50972: PUSH
50973: LD_INT 2
50975: EQUAL
50976: IFFALSE 50980
// exit ;
50978: GO 51490
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50980: LD_ADDR_VAR 0 8
50984: PUSH
50985: LD_INT 81
50987: PUSH
50988: LD_VAR 0 9
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 3
50999: PUSH
51000: LD_INT 21
51002: PUSH
51003: LD_INT 3
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PPUSH
51018: CALL_OW 69
51022: ST_TO_ADDR
// if not tmp then
51023: LD_VAR 0 8
51027: NOT
51028: IFFALSE 51032
// exit ;
51030: GO 51490
// if in_unit then
51032: LD_VAR 0 11
51036: IFFALSE 51060
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
51038: LD_ADDR_VAR 0 10
51042: PUSH
51043: LD_VAR 0 8
51047: PPUSH
51048: LD_VAR 0 11
51052: PPUSH
51053: CALL_OW 74
51057: ST_TO_ADDR
51058: GO 51080
// enemy := NearestUnitToUnit ( tmp , unit ) ;
51060: LD_ADDR_VAR 0 10
51064: PUSH
51065: LD_VAR 0 8
51069: PPUSH
51070: LD_VAR 0 1
51074: PPUSH
51075: CALL_OW 74
51079: ST_TO_ADDR
// if not enemy then
51080: LD_VAR 0 10
51084: NOT
51085: IFFALSE 51089
// exit ;
51087: GO 51490
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
51089: LD_VAR 0 11
51093: PUSH
51094: LD_VAR 0 11
51098: PPUSH
51099: LD_VAR 0 10
51103: PPUSH
51104: CALL_OW 296
51108: PUSH
51109: LD_INT 13
51111: GREATER
51112: AND
51113: PUSH
51114: LD_VAR 0 1
51118: PPUSH
51119: LD_VAR 0 10
51123: PPUSH
51124: CALL_OW 296
51128: PUSH
51129: LD_INT 12
51131: GREATER
51132: OR
51133: IFFALSE 51137
// exit ;
51135: GO 51490
// missile := [ 1 ] ;
51137: LD_ADDR_VAR 0 14
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: ST_TO_ADDR
// if Researched ( side , tech_space ) then
51148: LD_VAR 0 9
51152: PPUSH
51153: LD_VAR 0 12
51157: PPUSH
51158: CALL_OW 325
51162: IFFALSE 51191
// missile := Replace ( missile , missile + 1 , 2 ) ;
51164: LD_ADDR_VAR 0 14
51168: PUSH
51169: LD_VAR 0 14
51173: PPUSH
51174: LD_VAR 0 14
51178: PUSH
51179: LD_INT 1
51181: PLUS
51182: PPUSH
51183: LD_INT 2
51185: PPUSH
51186: CALL_OW 1
51190: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
51191: LD_VAR 0 9
51195: PPUSH
51196: LD_VAR 0 13
51200: PPUSH
51201: CALL_OW 325
51205: PUSH
51206: LD_VAR 0 10
51210: PPUSH
51211: CALL_OW 255
51215: PPUSH
51216: LD_VAR 0 13
51220: PPUSH
51221: CALL_OW 325
51225: NOT
51226: AND
51227: IFFALSE 51256
// missile := Replace ( missile , missile + 1 , 3 ) ;
51229: LD_ADDR_VAR 0 14
51233: PUSH
51234: LD_VAR 0 14
51238: PPUSH
51239: LD_VAR 0 14
51243: PUSH
51244: LD_INT 1
51246: PLUS
51247: PPUSH
51248: LD_INT 3
51250: PPUSH
51251: CALL_OW 1
51255: ST_TO_ADDR
// if missile < 2 then
51256: LD_VAR 0 14
51260: PUSH
51261: LD_INT 2
51263: LESS
51264: IFFALSE 51268
// exit ;
51266: GO 51490
// x := GetX ( enemy ) ;
51268: LD_ADDR_VAR 0 4
51272: PUSH
51273: LD_VAR 0 10
51277: PPUSH
51278: CALL_OW 250
51282: ST_TO_ADDR
// y := GetY ( enemy ) ;
51283: LD_ADDR_VAR 0 5
51287: PUSH
51288: LD_VAR 0 10
51292: PPUSH
51293: CALL_OW 251
51297: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
51298: LD_ADDR_VAR 0 6
51302: PUSH
51303: LD_VAR 0 4
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PPUSH
51312: LD_INT 1
51314: PPUSH
51315: CALL_OW 12
51319: PLUS
51320: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
51321: LD_ADDR_VAR 0 7
51325: PUSH
51326: LD_VAR 0 5
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PPUSH
51335: LD_INT 1
51337: PPUSH
51338: CALL_OW 12
51342: PLUS
51343: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51344: LD_VAR 0 6
51348: PPUSH
51349: LD_VAR 0 7
51353: PPUSH
51354: CALL_OW 488
51358: NOT
51359: IFFALSE 51381
// begin _x := x ;
51361: LD_ADDR_VAR 0 6
51365: PUSH
51366: LD_VAR 0 4
51370: ST_TO_ADDR
// _y := y ;
51371: LD_ADDR_VAR 0 7
51375: PUSH
51376: LD_VAR 0 5
51380: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
51381: LD_ADDR_VAR 0 3
51385: PUSH
51386: LD_INT 1
51388: PPUSH
51389: LD_VAR 0 14
51393: PPUSH
51394: CALL_OW 12
51398: ST_TO_ADDR
// case i of 1 :
51399: LD_VAR 0 3
51403: PUSH
51404: LD_INT 1
51406: DOUBLE
51407: EQUAL
51408: IFTRUE 51412
51410: GO 51429
51412: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
51413: LD_VAR 0 1
51417: PPUSH
51418: LD_VAR 0 10
51422: PPUSH
51423: CALL_OW 115
51427: GO 51490
51429: LD_INT 2
51431: DOUBLE
51432: EQUAL
51433: IFTRUE 51437
51435: GO 51459
51437: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
51438: LD_VAR 0 1
51442: PPUSH
51443: LD_VAR 0 6
51447: PPUSH
51448: LD_VAR 0 7
51452: PPUSH
51453: CALL_OW 153
51457: GO 51490
51459: LD_INT 3
51461: DOUBLE
51462: EQUAL
51463: IFTRUE 51467
51465: GO 51489
51467: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
51468: LD_VAR 0 1
51472: PPUSH
51473: LD_VAR 0 6
51477: PPUSH
51478: LD_VAR 0 7
51482: PPUSH
51483: CALL_OW 154
51487: GO 51490
51489: POP
// end ;
51490: LD_VAR 0 2
51494: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
51495: LD_INT 0
51497: PPUSH
51498: PPUSH
51499: PPUSH
51500: PPUSH
51501: PPUSH
51502: PPUSH
// if not unit or not building then
51503: LD_VAR 0 1
51507: NOT
51508: PUSH
51509: LD_VAR 0 2
51513: NOT
51514: OR
51515: IFFALSE 51519
// exit ;
51517: GO 51677
// x := GetX ( building ) ;
51519: LD_ADDR_VAR 0 5
51523: PUSH
51524: LD_VAR 0 2
51528: PPUSH
51529: CALL_OW 250
51533: ST_TO_ADDR
// y := GetY ( building ) ;
51534: LD_ADDR_VAR 0 6
51538: PUSH
51539: LD_VAR 0 2
51543: PPUSH
51544: CALL_OW 251
51548: ST_TO_ADDR
// for i = 0 to 5 do
51549: LD_ADDR_VAR 0 4
51553: PUSH
51554: DOUBLE
51555: LD_INT 0
51557: DEC
51558: ST_TO_ADDR
51559: LD_INT 5
51561: PUSH
51562: FOR_TO
51563: IFFALSE 51675
// begin _x := ShiftX ( x , i , 3 ) ;
51565: LD_ADDR_VAR 0 7
51569: PUSH
51570: LD_VAR 0 5
51574: PPUSH
51575: LD_VAR 0 4
51579: PPUSH
51580: LD_INT 3
51582: PPUSH
51583: CALL_OW 272
51587: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
51588: LD_ADDR_VAR 0 8
51592: PUSH
51593: LD_VAR 0 6
51597: PPUSH
51598: LD_VAR 0 4
51602: PPUSH
51603: LD_INT 3
51605: PPUSH
51606: CALL_OW 273
51610: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51611: LD_VAR 0 7
51615: PPUSH
51616: LD_VAR 0 8
51620: PPUSH
51621: CALL_OW 488
51625: NOT
51626: IFFALSE 51630
// continue ;
51628: GO 51562
// if HexInfo ( _x , _y ) = 0 then
51630: LD_VAR 0 7
51634: PPUSH
51635: LD_VAR 0 8
51639: PPUSH
51640: CALL_OW 428
51644: PUSH
51645: LD_INT 0
51647: EQUAL
51648: IFFALSE 51673
// begin ComMoveXY ( unit , _x , _y ) ;
51650: LD_VAR 0 1
51654: PPUSH
51655: LD_VAR 0 7
51659: PPUSH
51660: LD_VAR 0 8
51664: PPUSH
51665: CALL_OW 111
// exit ;
51669: POP
51670: POP
51671: GO 51677
// end ; end ;
51673: GO 51562
51675: POP
51676: POP
// end ;
51677: LD_VAR 0 3
51681: RET
// export function ScanBase ( side , base_area ) ; begin
51682: LD_INT 0
51684: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
51685: LD_ADDR_VAR 0 3
51689: PUSH
51690: LD_VAR 0 2
51694: PPUSH
51695: LD_INT 81
51697: PUSH
51698: LD_VAR 0 1
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PPUSH
51707: CALL_OW 70
51711: ST_TO_ADDR
// end ;
51712: LD_VAR 0 3
51716: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
51717: LD_INT 0
51719: PPUSH
51720: PPUSH
51721: PPUSH
51722: PPUSH
// result := false ;
51723: LD_ADDR_VAR 0 2
51727: PUSH
51728: LD_INT 0
51730: ST_TO_ADDR
// side := GetSide ( unit ) ;
51731: LD_ADDR_VAR 0 3
51735: PUSH
51736: LD_VAR 0 1
51740: PPUSH
51741: CALL_OW 255
51745: ST_TO_ADDR
// nat := GetNation ( unit ) ;
51746: LD_ADDR_VAR 0 4
51750: PUSH
51751: LD_VAR 0 1
51755: PPUSH
51756: CALL_OW 248
51760: ST_TO_ADDR
// case nat of 1 :
51761: LD_VAR 0 4
51765: PUSH
51766: LD_INT 1
51768: DOUBLE
51769: EQUAL
51770: IFTRUE 51774
51772: GO 51785
51774: POP
// tech := tech_lassight ; 2 :
51775: LD_ADDR_VAR 0 5
51779: PUSH
51780: LD_INT 12
51782: ST_TO_ADDR
51783: GO 51824
51785: LD_INT 2
51787: DOUBLE
51788: EQUAL
51789: IFTRUE 51793
51791: GO 51804
51793: POP
// tech := tech_mortar ; 3 :
51794: LD_ADDR_VAR 0 5
51798: PUSH
51799: LD_INT 41
51801: ST_TO_ADDR
51802: GO 51824
51804: LD_INT 3
51806: DOUBLE
51807: EQUAL
51808: IFTRUE 51812
51810: GO 51823
51812: POP
// tech := tech_bazooka ; end ;
51813: LD_ADDR_VAR 0 5
51817: PUSH
51818: LD_INT 44
51820: ST_TO_ADDR
51821: GO 51824
51823: POP
// if Researched ( side , tech ) then
51824: LD_VAR 0 3
51828: PPUSH
51829: LD_VAR 0 5
51833: PPUSH
51834: CALL_OW 325
51838: IFFALSE 51865
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
51840: LD_ADDR_VAR 0 2
51844: PUSH
51845: LD_INT 5
51847: PUSH
51848: LD_INT 8
51850: PUSH
51851: LD_INT 9
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: LIST
51858: PUSH
51859: LD_VAR 0 4
51863: ARRAY
51864: ST_TO_ADDR
// end ;
51865: LD_VAR 0 2
51869: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
51870: LD_INT 0
51872: PPUSH
51873: PPUSH
51874: PPUSH
// if not mines then
51875: LD_VAR 0 2
51879: NOT
51880: IFFALSE 51884
// exit ;
51882: GO 52028
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51884: LD_ADDR_VAR 0 5
51888: PUSH
51889: LD_INT 81
51891: PUSH
51892: LD_VAR 0 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 3
51903: PUSH
51904: LD_INT 21
51906: PUSH
51907: LD_INT 3
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PPUSH
51922: CALL_OW 69
51926: ST_TO_ADDR
// for i in mines do
51927: LD_ADDR_VAR 0 4
51931: PUSH
51932: LD_VAR 0 2
51936: PUSH
51937: FOR_IN
51938: IFFALSE 52026
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
51940: LD_VAR 0 4
51944: PUSH
51945: LD_INT 1
51947: ARRAY
51948: PPUSH
51949: LD_VAR 0 4
51953: PUSH
51954: LD_INT 2
51956: ARRAY
51957: PPUSH
51958: CALL_OW 458
51962: NOT
51963: IFFALSE 51967
// continue ;
51965: GO 51937
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
51967: LD_VAR 0 4
51971: PUSH
51972: LD_INT 1
51974: ARRAY
51975: PPUSH
51976: LD_VAR 0 4
51980: PUSH
51981: LD_INT 2
51983: ARRAY
51984: PPUSH
51985: CALL_OW 428
51989: PUSH
51990: LD_VAR 0 5
51994: IN
51995: IFFALSE 52024
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
51997: LD_VAR 0 4
52001: PUSH
52002: LD_INT 1
52004: ARRAY
52005: PPUSH
52006: LD_VAR 0 4
52010: PUSH
52011: LD_INT 2
52013: ARRAY
52014: PPUSH
52015: LD_VAR 0 1
52019: PPUSH
52020: CALL_OW 456
// end ;
52024: GO 51937
52026: POP
52027: POP
// end ;
52028: LD_VAR 0 3
52032: RET
// export function Count ( array ) ; var i ; begin
52033: LD_INT 0
52035: PPUSH
52036: PPUSH
// result := 0 ;
52037: LD_ADDR_VAR 0 2
52041: PUSH
52042: LD_INT 0
52044: ST_TO_ADDR
// for i in array do
52045: LD_ADDR_VAR 0 3
52049: PUSH
52050: LD_VAR 0 1
52054: PUSH
52055: FOR_IN
52056: IFFALSE 52080
// if i then
52058: LD_VAR 0 3
52062: IFFALSE 52078
// result := result + 1 ;
52064: LD_ADDR_VAR 0 2
52068: PUSH
52069: LD_VAR 0 2
52073: PUSH
52074: LD_INT 1
52076: PLUS
52077: ST_TO_ADDR
52078: GO 52055
52080: POP
52081: POP
// end ;
52082: LD_VAR 0 2
52086: RET
// export function IsEmpty ( building ) ; begin
52087: LD_INT 0
52089: PPUSH
// if not building then
52090: LD_VAR 0 1
52094: NOT
52095: IFFALSE 52099
// exit ;
52097: GO 52142
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
52099: LD_ADDR_VAR 0 2
52103: PUSH
52104: LD_VAR 0 1
52108: PUSH
52109: LD_INT 22
52111: PUSH
52112: LD_VAR 0 1
52116: PPUSH
52117: CALL_OW 255
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 58
52128: PUSH
52129: EMPTY
52130: LIST
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PPUSH
52136: CALL_OW 69
52140: IN
52141: ST_TO_ADDR
// end ;
52142: LD_VAR 0 2
52146: RET
// export function IsNotFull ( building ) ; var places ; begin
52147: LD_INT 0
52149: PPUSH
52150: PPUSH
// if not building then
52151: LD_VAR 0 1
52155: NOT
52156: IFFALSE 52160
// exit ;
52158: GO 52331
// result := false ;
52160: LD_ADDR_VAR 0 2
52164: PUSH
52165: LD_INT 0
52167: ST_TO_ADDR
// places := 0 ;
52168: LD_ADDR_VAR 0 3
52172: PUSH
52173: LD_INT 0
52175: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
52176: LD_VAR 0 1
52180: PPUSH
52181: CALL_OW 266
52185: PUSH
52186: LD_INT 0
52188: DOUBLE
52189: EQUAL
52190: IFTRUE 52248
52192: LD_INT 1
52194: DOUBLE
52195: EQUAL
52196: IFTRUE 52248
52198: LD_INT 6
52200: DOUBLE
52201: EQUAL
52202: IFTRUE 52248
52204: LD_INT 7
52206: DOUBLE
52207: EQUAL
52208: IFTRUE 52248
52210: LD_INT 8
52212: DOUBLE
52213: EQUAL
52214: IFTRUE 52248
52216: LD_INT 4
52218: DOUBLE
52219: EQUAL
52220: IFTRUE 52248
52222: LD_INT 5
52224: DOUBLE
52225: EQUAL
52226: IFTRUE 52248
52228: LD_INT 2
52230: DOUBLE
52231: EQUAL
52232: IFTRUE 52248
52234: LD_INT 3
52236: DOUBLE
52237: EQUAL
52238: IFTRUE 52248
52240: LD_INT 35
52242: DOUBLE
52243: EQUAL
52244: IFTRUE 52248
52246: GO 52259
52248: POP
// places := 6 ; b_bunker , b_breastwork :
52249: LD_ADDR_VAR 0 3
52253: PUSH
52254: LD_INT 6
52256: ST_TO_ADDR
52257: GO 52304
52259: LD_INT 32
52261: DOUBLE
52262: EQUAL
52263: IFTRUE 52273
52265: LD_INT 31
52267: DOUBLE
52268: EQUAL
52269: IFTRUE 52273
52271: GO 52284
52273: POP
// places := 1 ; b_control_tower :
52274: LD_ADDR_VAR 0 3
52278: PUSH
52279: LD_INT 1
52281: ST_TO_ADDR
52282: GO 52304
52284: LD_INT 36
52286: DOUBLE
52287: EQUAL
52288: IFTRUE 52292
52290: GO 52303
52292: POP
// places := 3 ; end ;
52293: LD_ADDR_VAR 0 3
52297: PUSH
52298: LD_INT 3
52300: ST_TO_ADDR
52301: GO 52304
52303: POP
// if places then
52304: LD_VAR 0 3
52308: IFFALSE 52331
// result := UnitsInside ( building ) < places ;
52310: LD_ADDR_VAR 0 2
52314: PUSH
52315: LD_VAR 0 1
52319: PPUSH
52320: CALL_OW 313
52324: PUSH
52325: LD_VAR 0 3
52329: LESS
52330: ST_TO_ADDR
// end ;
52331: LD_VAR 0 2
52335: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
52336: LD_INT 0
52338: PPUSH
52339: PPUSH
52340: PPUSH
52341: PPUSH
// tmp := [ ] ;
52342: LD_ADDR_VAR 0 3
52346: PUSH
52347: EMPTY
52348: ST_TO_ADDR
// list := [ ] ;
52349: LD_ADDR_VAR 0 5
52353: PUSH
52354: EMPTY
52355: ST_TO_ADDR
// for i = 16 to 25 do
52356: LD_ADDR_VAR 0 4
52360: PUSH
52361: DOUBLE
52362: LD_INT 16
52364: DEC
52365: ST_TO_ADDR
52366: LD_INT 25
52368: PUSH
52369: FOR_TO
52370: IFFALSE 52443
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
52372: LD_ADDR_VAR 0 3
52376: PUSH
52377: LD_VAR 0 3
52381: PUSH
52382: LD_INT 22
52384: PUSH
52385: LD_VAR 0 1
52389: PPUSH
52390: CALL_OW 255
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 91
52401: PUSH
52402: LD_VAR 0 1
52406: PUSH
52407: LD_INT 6
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 30
52417: PUSH
52418: LD_VAR 0 4
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: LIST
52431: PUSH
52432: EMPTY
52433: LIST
52434: PPUSH
52435: CALL_OW 69
52439: ADD
52440: ST_TO_ADDR
52441: GO 52369
52443: POP
52444: POP
// for i = 1 to tmp do
52445: LD_ADDR_VAR 0 4
52449: PUSH
52450: DOUBLE
52451: LD_INT 1
52453: DEC
52454: ST_TO_ADDR
52455: LD_VAR 0 3
52459: PUSH
52460: FOR_TO
52461: IFFALSE 52549
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
52463: LD_ADDR_VAR 0 5
52467: PUSH
52468: LD_VAR 0 5
52472: PUSH
52473: LD_VAR 0 3
52477: PUSH
52478: LD_VAR 0 4
52482: ARRAY
52483: PPUSH
52484: CALL_OW 266
52488: PUSH
52489: LD_VAR 0 3
52493: PUSH
52494: LD_VAR 0 4
52498: ARRAY
52499: PPUSH
52500: CALL_OW 250
52504: PUSH
52505: LD_VAR 0 3
52509: PUSH
52510: LD_VAR 0 4
52514: ARRAY
52515: PPUSH
52516: CALL_OW 251
52520: PUSH
52521: LD_VAR 0 3
52525: PUSH
52526: LD_VAR 0 4
52530: ARRAY
52531: PPUSH
52532: CALL_OW 254
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: ADD
52546: ST_TO_ADDR
52547: GO 52460
52549: POP
52550: POP
// result := list ;
52551: LD_ADDR_VAR 0 2
52555: PUSH
52556: LD_VAR 0 5
52560: ST_TO_ADDR
// end ;
52561: LD_VAR 0 2
52565: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
52566: LD_INT 0
52568: PPUSH
52569: PPUSH
52570: PPUSH
52571: PPUSH
52572: PPUSH
52573: PPUSH
52574: PPUSH
// if not factory then
52575: LD_VAR 0 1
52579: NOT
52580: IFFALSE 52584
// exit ;
52582: GO 53177
// if control = control_apeman then
52584: LD_VAR 0 4
52588: PUSH
52589: LD_INT 5
52591: EQUAL
52592: IFFALSE 52701
// begin tmp := UnitsInside ( factory ) ;
52594: LD_ADDR_VAR 0 8
52598: PUSH
52599: LD_VAR 0 1
52603: PPUSH
52604: CALL_OW 313
52608: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
52609: LD_VAR 0 8
52613: PPUSH
52614: LD_INT 25
52616: PUSH
52617: LD_INT 12
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PPUSH
52624: CALL_OW 72
52628: NOT
52629: IFFALSE 52639
// control := control_manual ;
52631: LD_ADDR_VAR 0 4
52635: PUSH
52636: LD_INT 1
52638: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
52639: LD_ADDR_VAR 0 8
52643: PUSH
52644: LD_VAR 0 1
52648: PPUSH
52649: CALL 52336 0 1
52653: ST_TO_ADDR
// if tmp then
52654: LD_VAR 0 8
52658: IFFALSE 52701
// begin for i in tmp do
52660: LD_ADDR_VAR 0 7
52664: PUSH
52665: LD_VAR 0 8
52669: PUSH
52670: FOR_IN
52671: IFFALSE 52699
// if i [ 1 ] = b_ext_radio then
52673: LD_VAR 0 7
52677: PUSH
52678: LD_INT 1
52680: ARRAY
52681: PUSH
52682: LD_INT 22
52684: EQUAL
52685: IFFALSE 52697
// begin control := control_remote ;
52687: LD_ADDR_VAR 0 4
52691: PUSH
52692: LD_INT 2
52694: ST_TO_ADDR
// break ;
52695: GO 52699
// end ;
52697: GO 52670
52699: POP
52700: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
52701: LD_VAR 0 1
52705: PPUSH
52706: LD_VAR 0 2
52710: PPUSH
52711: LD_VAR 0 3
52715: PPUSH
52716: LD_VAR 0 4
52720: PPUSH
52721: LD_VAR 0 5
52725: PPUSH
52726: CALL_OW 448
52730: IFFALSE 52765
// begin result := [ chassis , engine , control , weapon ] ;
52732: LD_ADDR_VAR 0 6
52736: PUSH
52737: LD_VAR 0 2
52741: PUSH
52742: LD_VAR 0 3
52746: PUSH
52747: LD_VAR 0 4
52751: PUSH
52752: LD_VAR 0 5
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: ST_TO_ADDR
// exit ;
52763: GO 53177
// end ; _chassis := AvailableChassisList ( factory ) ;
52765: LD_ADDR_VAR 0 9
52769: PUSH
52770: LD_VAR 0 1
52774: PPUSH
52775: CALL_OW 475
52779: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
52780: LD_ADDR_VAR 0 11
52784: PUSH
52785: LD_VAR 0 1
52789: PPUSH
52790: CALL_OW 476
52794: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
52795: LD_ADDR_VAR 0 12
52799: PUSH
52800: LD_VAR 0 1
52804: PPUSH
52805: CALL_OW 477
52809: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
52810: LD_ADDR_VAR 0 10
52814: PUSH
52815: LD_VAR 0 1
52819: PPUSH
52820: CALL_OW 478
52824: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
52825: LD_VAR 0 9
52829: NOT
52830: PUSH
52831: LD_VAR 0 11
52835: NOT
52836: OR
52837: PUSH
52838: LD_VAR 0 12
52842: NOT
52843: OR
52844: PUSH
52845: LD_VAR 0 10
52849: NOT
52850: OR
52851: IFFALSE 52886
// begin result := [ chassis , engine , control , weapon ] ;
52853: LD_ADDR_VAR 0 6
52857: PUSH
52858: LD_VAR 0 2
52862: PUSH
52863: LD_VAR 0 3
52867: PUSH
52868: LD_VAR 0 4
52872: PUSH
52873: LD_VAR 0 5
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: ST_TO_ADDR
// exit ;
52884: GO 53177
// end ; if not chassis in _chassis then
52886: LD_VAR 0 2
52890: PUSH
52891: LD_VAR 0 9
52895: IN
52896: NOT
52897: IFFALSE 52923
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
52899: LD_ADDR_VAR 0 2
52903: PUSH
52904: LD_VAR 0 9
52908: PUSH
52909: LD_INT 1
52911: PPUSH
52912: LD_VAR 0 9
52916: PPUSH
52917: CALL_OW 12
52921: ARRAY
52922: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
52923: LD_VAR 0 2
52927: PPUSH
52928: LD_VAR 0 3
52932: PPUSH
52933: CALL 53182 0 2
52937: NOT
52938: IFFALSE 52997
// repeat engine := _engine [ 1 ] ;
52940: LD_ADDR_VAR 0 3
52944: PUSH
52945: LD_VAR 0 11
52949: PUSH
52950: LD_INT 1
52952: ARRAY
52953: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
52954: LD_ADDR_VAR 0 11
52958: PUSH
52959: LD_VAR 0 11
52963: PPUSH
52964: LD_INT 1
52966: PPUSH
52967: CALL_OW 3
52971: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
52972: LD_VAR 0 2
52976: PPUSH
52977: LD_VAR 0 3
52981: PPUSH
52982: CALL 53182 0 2
52986: PUSH
52987: LD_VAR 0 11
52991: PUSH
52992: EMPTY
52993: EQUAL
52994: OR
52995: IFFALSE 52940
// if not control in _control then
52997: LD_VAR 0 4
53001: PUSH
53002: LD_VAR 0 12
53006: IN
53007: NOT
53008: IFFALSE 53034
// control := _control [ rand ( 1 , _control ) ] ;
53010: LD_ADDR_VAR 0 4
53014: PUSH
53015: LD_VAR 0 12
53019: PUSH
53020: LD_INT 1
53022: PPUSH
53023: LD_VAR 0 12
53027: PPUSH
53028: CALL_OW 12
53032: ARRAY
53033: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
53034: LD_VAR 0 2
53038: PPUSH
53039: LD_VAR 0 5
53043: PPUSH
53044: CALL 53402 0 2
53048: NOT
53049: IFFALSE 53108
// repeat weapon := _weapon [ 1 ] ;
53051: LD_ADDR_VAR 0 5
53055: PUSH
53056: LD_VAR 0 10
53060: PUSH
53061: LD_INT 1
53063: ARRAY
53064: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
53065: LD_ADDR_VAR 0 10
53069: PUSH
53070: LD_VAR 0 10
53074: PPUSH
53075: LD_INT 1
53077: PPUSH
53078: CALL_OW 3
53082: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
53083: LD_VAR 0 2
53087: PPUSH
53088: LD_VAR 0 5
53092: PPUSH
53093: CALL 53402 0 2
53097: PUSH
53098: LD_VAR 0 10
53102: PUSH
53103: EMPTY
53104: EQUAL
53105: OR
53106: IFFALSE 53051
// result := [ ] ;
53108: LD_ADDR_VAR 0 6
53112: PUSH
53113: EMPTY
53114: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53115: LD_VAR 0 1
53119: PPUSH
53120: LD_VAR 0 2
53124: PPUSH
53125: LD_VAR 0 3
53129: PPUSH
53130: LD_VAR 0 4
53134: PPUSH
53135: LD_VAR 0 5
53139: PPUSH
53140: CALL_OW 448
53144: IFFALSE 53177
// result := [ chassis , engine , control , weapon ] ;
53146: LD_ADDR_VAR 0 6
53150: PUSH
53151: LD_VAR 0 2
53155: PUSH
53156: LD_VAR 0 3
53160: PUSH
53161: LD_VAR 0 4
53165: PUSH
53166: LD_VAR 0 5
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: ST_TO_ADDR
// end ;
53177: LD_VAR 0 6
53181: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
53182: LD_INT 0
53184: PPUSH
// if not chassis or not engine then
53185: LD_VAR 0 1
53189: NOT
53190: PUSH
53191: LD_VAR 0 2
53195: NOT
53196: OR
53197: IFFALSE 53201
// exit ;
53199: GO 53397
// case engine of engine_solar :
53201: LD_VAR 0 2
53205: PUSH
53206: LD_INT 2
53208: DOUBLE
53209: EQUAL
53210: IFTRUE 53214
53212: GO 53252
53214: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
53215: LD_ADDR_VAR 0 3
53219: PUSH
53220: LD_INT 11
53222: PUSH
53223: LD_INT 12
53225: PUSH
53226: LD_INT 13
53228: PUSH
53229: LD_INT 14
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: LD_INT 3
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: ST_TO_ADDR
53250: GO 53381
53252: LD_INT 1
53254: DOUBLE
53255: EQUAL
53256: IFTRUE 53260
53258: GO 53322
53260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
53261: LD_ADDR_VAR 0 3
53265: PUSH
53266: LD_INT 11
53268: PUSH
53269: LD_INT 12
53271: PUSH
53272: LD_INT 13
53274: PUSH
53275: LD_INT 14
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: LD_INT 2
53283: PUSH
53284: LD_INT 3
53286: PUSH
53287: LD_INT 4
53289: PUSH
53290: LD_INT 5
53292: PUSH
53293: LD_INT 21
53295: PUSH
53296: LD_INT 23
53298: PUSH
53299: LD_INT 22
53301: PUSH
53302: LD_INT 24
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: ST_TO_ADDR
53320: GO 53381
53322: LD_INT 3
53324: DOUBLE
53325: EQUAL
53326: IFTRUE 53330
53328: GO 53380
53330: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53331: LD_ADDR_VAR 0 3
53335: PUSH
53336: LD_INT 13
53338: PUSH
53339: LD_INT 14
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: LD_INT 3
53347: PUSH
53348: LD_INT 4
53350: PUSH
53351: LD_INT 5
53353: PUSH
53354: LD_INT 21
53356: PUSH
53357: LD_INT 22
53359: PUSH
53360: LD_INT 23
53362: PUSH
53363: LD_INT 24
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: ST_TO_ADDR
53378: GO 53381
53380: POP
// result := ( chassis in result ) ;
53381: LD_ADDR_VAR 0 3
53385: PUSH
53386: LD_VAR 0 1
53390: PUSH
53391: LD_VAR 0 3
53395: IN
53396: ST_TO_ADDR
// end ;
53397: LD_VAR 0 3
53401: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
53402: LD_INT 0
53404: PPUSH
// if not chassis or not weapon then
53405: LD_VAR 0 1
53409: NOT
53410: PUSH
53411: LD_VAR 0 2
53415: NOT
53416: OR
53417: IFFALSE 53421
// exit ;
53419: GO 54481
// case weapon of us_machine_gun :
53421: LD_VAR 0 2
53425: PUSH
53426: LD_INT 2
53428: DOUBLE
53429: EQUAL
53430: IFTRUE 53434
53432: GO 53464
53434: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
53435: LD_ADDR_VAR 0 3
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: LD_INT 4
53451: PUSH
53452: LD_INT 5
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: ST_TO_ADDR
53462: GO 54465
53464: LD_INT 3
53466: DOUBLE
53467: EQUAL
53468: IFTRUE 53472
53470: GO 53502
53472: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
53473: LD_ADDR_VAR 0 3
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: LD_INT 4
53489: PUSH
53490: LD_INT 5
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: ST_TO_ADDR
53500: GO 54465
53502: LD_INT 11
53504: DOUBLE
53505: EQUAL
53506: IFTRUE 53510
53508: GO 53540
53510: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
53511: LD_ADDR_VAR 0 3
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: LD_INT 3
53524: PUSH
53525: LD_INT 4
53527: PUSH
53528: LD_INT 5
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: ST_TO_ADDR
53538: GO 54465
53540: LD_INT 4
53542: DOUBLE
53543: EQUAL
53544: IFTRUE 53548
53546: GO 53574
53548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
53549: LD_ADDR_VAR 0 3
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: LD_INT 3
53559: PUSH
53560: LD_INT 4
53562: PUSH
53563: LD_INT 5
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: ST_TO_ADDR
53572: GO 54465
53574: LD_INT 5
53576: DOUBLE
53577: EQUAL
53578: IFTRUE 53582
53580: GO 53608
53582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
53583: LD_ADDR_VAR 0 3
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: LD_INT 3
53593: PUSH
53594: LD_INT 4
53596: PUSH
53597: LD_INT 5
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: ST_TO_ADDR
53606: GO 54465
53608: LD_INT 9
53610: DOUBLE
53611: EQUAL
53612: IFTRUE 53616
53614: GO 53642
53616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
53617: LD_ADDR_VAR 0 3
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 3
53627: PUSH
53628: LD_INT 4
53630: PUSH
53631: LD_INT 5
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: ST_TO_ADDR
53640: GO 54465
53642: LD_INT 7
53644: DOUBLE
53645: EQUAL
53646: IFTRUE 53650
53648: GO 53676
53650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
53651: LD_ADDR_VAR 0 3
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 3
53661: PUSH
53662: LD_INT 4
53664: PUSH
53665: LD_INT 5
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: ST_TO_ADDR
53674: GO 54465
53676: LD_INT 12
53678: DOUBLE
53679: EQUAL
53680: IFTRUE 53684
53682: GO 53710
53684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
53685: LD_ADDR_VAR 0 3
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: LD_INT 3
53695: PUSH
53696: LD_INT 4
53698: PUSH
53699: LD_INT 5
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: ST_TO_ADDR
53708: GO 54465
53710: LD_INT 13
53712: DOUBLE
53713: EQUAL
53714: IFTRUE 53718
53716: GO 53744
53718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
53719: LD_ADDR_VAR 0 3
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: LD_INT 3
53729: PUSH
53730: LD_INT 4
53732: PUSH
53733: LD_INT 5
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: ST_TO_ADDR
53742: GO 54465
53744: LD_INT 14
53746: DOUBLE
53747: EQUAL
53748: IFTRUE 53752
53750: GO 53770
53752: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
53753: LD_ADDR_VAR 0 3
53757: PUSH
53758: LD_INT 4
53760: PUSH
53761: LD_INT 5
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: ST_TO_ADDR
53768: GO 54465
53770: LD_INT 6
53772: DOUBLE
53773: EQUAL
53774: IFTRUE 53778
53776: GO 53796
53778: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
53779: LD_ADDR_VAR 0 3
53783: PUSH
53784: LD_INT 4
53786: PUSH
53787: LD_INT 5
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: ST_TO_ADDR
53794: GO 54465
53796: LD_INT 10
53798: DOUBLE
53799: EQUAL
53800: IFTRUE 53804
53802: GO 53822
53804: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
53805: LD_ADDR_VAR 0 3
53809: PUSH
53810: LD_INT 4
53812: PUSH
53813: LD_INT 5
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: ST_TO_ADDR
53820: GO 54465
53822: LD_INT 22
53824: DOUBLE
53825: EQUAL
53826: IFTRUE 53830
53828: GO 53856
53830: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
53831: LD_ADDR_VAR 0 3
53835: PUSH
53836: LD_INT 11
53838: PUSH
53839: LD_INT 12
53841: PUSH
53842: LD_INT 13
53844: PUSH
53845: LD_INT 14
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: ST_TO_ADDR
53854: GO 54465
53856: LD_INT 23
53858: DOUBLE
53859: EQUAL
53860: IFTRUE 53864
53862: GO 53890
53864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
53865: LD_ADDR_VAR 0 3
53869: PUSH
53870: LD_INT 11
53872: PUSH
53873: LD_INT 12
53875: PUSH
53876: LD_INT 13
53878: PUSH
53879: LD_INT 14
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: ST_TO_ADDR
53888: GO 54465
53890: LD_INT 24
53892: DOUBLE
53893: EQUAL
53894: IFTRUE 53898
53896: GO 53924
53898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
53899: LD_ADDR_VAR 0 3
53903: PUSH
53904: LD_INT 11
53906: PUSH
53907: LD_INT 12
53909: PUSH
53910: LD_INT 13
53912: PUSH
53913: LD_INT 14
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: ST_TO_ADDR
53922: GO 54465
53924: LD_INT 30
53926: DOUBLE
53927: EQUAL
53928: IFTRUE 53932
53930: GO 53958
53932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
53933: LD_ADDR_VAR 0 3
53937: PUSH
53938: LD_INT 11
53940: PUSH
53941: LD_INT 12
53943: PUSH
53944: LD_INT 13
53946: PUSH
53947: LD_INT 14
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: ST_TO_ADDR
53956: GO 54465
53958: LD_INT 25
53960: DOUBLE
53961: EQUAL
53962: IFTRUE 53966
53964: GO 53984
53966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
53967: LD_ADDR_VAR 0 3
53971: PUSH
53972: LD_INT 13
53974: PUSH
53975: LD_INT 14
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: ST_TO_ADDR
53982: GO 54465
53984: LD_INT 27
53986: DOUBLE
53987: EQUAL
53988: IFTRUE 53992
53990: GO 54010
53992: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
53993: LD_ADDR_VAR 0 3
53997: PUSH
53998: LD_INT 13
54000: PUSH
54001: LD_INT 14
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: ST_TO_ADDR
54008: GO 54465
54010: LD_INT 92
54012: DOUBLE
54013: EQUAL
54014: IFTRUE 54018
54016: GO 54044
54018: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
54019: LD_ADDR_VAR 0 3
54023: PUSH
54024: LD_INT 11
54026: PUSH
54027: LD_INT 12
54029: PUSH
54030: LD_INT 13
54032: PUSH
54033: LD_INT 14
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: ST_TO_ADDR
54042: GO 54465
54044: LD_INT 28
54046: DOUBLE
54047: EQUAL
54048: IFTRUE 54052
54050: GO 54070
54052: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
54053: LD_ADDR_VAR 0 3
54057: PUSH
54058: LD_INT 13
54060: PUSH
54061: LD_INT 14
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: ST_TO_ADDR
54068: GO 54465
54070: LD_INT 29
54072: DOUBLE
54073: EQUAL
54074: IFTRUE 54078
54076: GO 54096
54078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
54079: LD_ADDR_VAR 0 3
54083: PUSH
54084: LD_INT 13
54086: PUSH
54087: LD_INT 14
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: ST_TO_ADDR
54094: GO 54465
54096: LD_INT 31
54098: DOUBLE
54099: EQUAL
54100: IFTRUE 54104
54102: GO 54122
54104: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
54105: LD_ADDR_VAR 0 3
54109: PUSH
54110: LD_INT 13
54112: PUSH
54113: LD_INT 14
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: ST_TO_ADDR
54120: GO 54465
54122: LD_INT 26
54124: DOUBLE
54125: EQUAL
54126: IFTRUE 54130
54128: GO 54148
54130: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
54131: LD_ADDR_VAR 0 3
54135: PUSH
54136: LD_INT 13
54138: PUSH
54139: LD_INT 14
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: ST_TO_ADDR
54146: GO 54465
54148: LD_INT 42
54150: DOUBLE
54151: EQUAL
54152: IFTRUE 54156
54154: GO 54182
54156: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
54157: LD_ADDR_VAR 0 3
54161: PUSH
54162: LD_INT 21
54164: PUSH
54165: LD_INT 22
54167: PUSH
54168: LD_INT 23
54170: PUSH
54171: LD_INT 24
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: ST_TO_ADDR
54180: GO 54465
54182: LD_INT 43
54184: DOUBLE
54185: EQUAL
54186: IFTRUE 54190
54188: GO 54216
54190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
54191: LD_ADDR_VAR 0 3
54195: PUSH
54196: LD_INT 21
54198: PUSH
54199: LD_INT 22
54201: PUSH
54202: LD_INT 23
54204: PUSH
54205: LD_INT 24
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: ST_TO_ADDR
54214: GO 54465
54216: LD_INT 44
54218: DOUBLE
54219: EQUAL
54220: IFTRUE 54224
54222: GO 54250
54224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
54225: LD_ADDR_VAR 0 3
54229: PUSH
54230: LD_INT 21
54232: PUSH
54233: LD_INT 22
54235: PUSH
54236: LD_INT 23
54238: PUSH
54239: LD_INT 24
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: ST_TO_ADDR
54248: GO 54465
54250: LD_INT 45
54252: DOUBLE
54253: EQUAL
54254: IFTRUE 54258
54256: GO 54284
54258: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
54259: LD_ADDR_VAR 0 3
54263: PUSH
54264: LD_INT 21
54266: PUSH
54267: LD_INT 22
54269: PUSH
54270: LD_INT 23
54272: PUSH
54273: LD_INT 24
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: ST_TO_ADDR
54282: GO 54465
54284: LD_INT 49
54286: DOUBLE
54287: EQUAL
54288: IFTRUE 54292
54290: GO 54318
54292: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
54293: LD_ADDR_VAR 0 3
54297: PUSH
54298: LD_INT 21
54300: PUSH
54301: LD_INT 22
54303: PUSH
54304: LD_INT 23
54306: PUSH
54307: LD_INT 24
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: ST_TO_ADDR
54316: GO 54465
54318: LD_INT 51
54320: DOUBLE
54321: EQUAL
54322: IFTRUE 54326
54324: GO 54352
54326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
54327: LD_ADDR_VAR 0 3
54331: PUSH
54332: LD_INT 21
54334: PUSH
54335: LD_INT 22
54337: PUSH
54338: LD_INT 23
54340: PUSH
54341: LD_INT 24
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: ST_TO_ADDR
54350: GO 54465
54352: LD_INT 52
54354: DOUBLE
54355: EQUAL
54356: IFTRUE 54360
54358: GO 54386
54360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
54361: LD_ADDR_VAR 0 3
54365: PUSH
54366: LD_INT 21
54368: PUSH
54369: LD_INT 22
54371: PUSH
54372: LD_INT 23
54374: PUSH
54375: LD_INT 24
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: ST_TO_ADDR
54384: GO 54465
54386: LD_INT 53
54388: DOUBLE
54389: EQUAL
54390: IFTRUE 54394
54392: GO 54412
54394: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
54395: LD_ADDR_VAR 0 3
54399: PUSH
54400: LD_INT 23
54402: PUSH
54403: LD_INT 24
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: ST_TO_ADDR
54410: GO 54465
54412: LD_INT 46
54414: DOUBLE
54415: EQUAL
54416: IFTRUE 54420
54418: GO 54438
54420: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
54421: LD_ADDR_VAR 0 3
54425: PUSH
54426: LD_INT 23
54428: PUSH
54429: LD_INT 24
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: ST_TO_ADDR
54436: GO 54465
54438: LD_INT 47
54440: DOUBLE
54441: EQUAL
54442: IFTRUE 54446
54444: GO 54464
54446: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54447: LD_ADDR_VAR 0 3
54451: PUSH
54452: LD_INT 23
54454: PUSH
54455: LD_INT 24
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: ST_TO_ADDR
54462: GO 54465
54464: POP
// result := ( chassis in result ) ;
54465: LD_ADDR_VAR 0 3
54469: PUSH
54470: LD_VAR 0 1
54474: PUSH
54475: LD_VAR 0 3
54479: IN
54480: ST_TO_ADDR
// end ;
54481: LD_VAR 0 3
54485: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
54486: LD_INT 0
54488: PPUSH
54489: PPUSH
54490: PPUSH
54491: PPUSH
54492: PPUSH
54493: PPUSH
54494: PPUSH
// result := array ;
54495: LD_ADDR_VAR 0 5
54499: PUSH
54500: LD_VAR 0 1
54504: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
54505: LD_VAR 0 1
54509: NOT
54510: PUSH
54511: LD_VAR 0 2
54515: NOT
54516: OR
54517: PUSH
54518: LD_VAR 0 3
54522: NOT
54523: OR
54524: PUSH
54525: LD_VAR 0 2
54529: PUSH
54530: LD_VAR 0 1
54534: GREATER
54535: OR
54536: PUSH
54537: LD_VAR 0 3
54541: PUSH
54542: LD_VAR 0 1
54546: GREATER
54547: OR
54548: IFFALSE 54552
// exit ;
54550: GO 54848
// if direction then
54552: LD_VAR 0 4
54556: IFFALSE 54620
// begin d := 1 ;
54558: LD_ADDR_VAR 0 9
54562: PUSH
54563: LD_INT 1
54565: ST_TO_ADDR
// if i_from > i_to then
54566: LD_VAR 0 2
54570: PUSH
54571: LD_VAR 0 3
54575: GREATER
54576: IFFALSE 54602
// length := ( array - i_from ) + i_to else
54578: LD_ADDR_VAR 0 11
54582: PUSH
54583: LD_VAR 0 1
54587: PUSH
54588: LD_VAR 0 2
54592: MINUS
54593: PUSH
54594: LD_VAR 0 3
54598: PLUS
54599: ST_TO_ADDR
54600: GO 54618
// length := i_to - i_from ;
54602: LD_ADDR_VAR 0 11
54606: PUSH
54607: LD_VAR 0 3
54611: PUSH
54612: LD_VAR 0 2
54616: MINUS
54617: ST_TO_ADDR
// end else
54618: GO 54681
// begin d := - 1 ;
54620: LD_ADDR_VAR 0 9
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: ST_TO_ADDR
// if i_from > i_to then
54629: LD_VAR 0 2
54633: PUSH
54634: LD_VAR 0 3
54638: GREATER
54639: IFFALSE 54659
// length := i_from - i_to else
54641: LD_ADDR_VAR 0 11
54645: PUSH
54646: LD_VAR 0 2
54650: PUSH
54651: LD_VAR 0 3
54655: MINUS
54656: ST_TO_ADDR
54657: GO 54681
// length := ( array - i_to ) + i_from ;
54659: LD_ADDR_VAR 0 11
54663: PUSH
54664: LD_VAR 0 1
54668: PUSH
54669: LD_VAR 0 3
54673: MINUS
54674: PUSH
54675: LD_VAR 0 2
54679: PLUS
54680: ST_TO_ADDR
// end ; if not length then
54681: LD_VAR 0 11
54685: NOT
54686: IFFALSE 54690
// exit ;
54688: GO 54848
// tmp := array ;
54690: LD_ADDR_VAR 0 10
54694: PUSH
54695: LD_VAR 0 1
54699: ST_TO_ADDR
// for i = 1 to length do
54700: LD_ADDR_VAR 0 6
54704: PUSH
54705: DOUBLE
54706: LD_INT 1
54708: DEC
54709: ST_TO_ADDR
54710: LD_VAR 0 11
54714: PUSH
54715: FOR_TO
54716: IFFALSE 54836
// begin for j = 1 to array do
54718: LD_ADDR_VAR 0 7
54722: PUSH
54723: DOUBLE
54724: LD_INT 1
54726: DEC
54727: ST_TO_ADDR
54728: LD_VAR 0 1
54732: PUSH
54733: FOR_TO
54734: IFFALSE 54822
// begin k := j + d ;
54736: LD_ADDR_VAR 0 8
54740: PUSH
54741: LD_VAR 0 7
54745: PUSH
54746: LD_VAR 0 9
54750: PLUS
54751: ST_TO_ADDR
// if k > array then
54752: LD_VAR 0 8
54756: PUSH
54757: LD_VAR 0 1
54761: GREATER
54762: IFFALSE 54772
// k := 1 ;
54764: LD_ADDR_VAR 0 8
54768: PUSH
54769: LD_INT 1
54771: ST_TO_ADDR
// if not k then
54772: LD_VAR 0 8
54776: NOT
54777: IFFALSE 54789
// k := array ;
54779: LD_ADDR_VAR 0 8
54783: PUSH
54784: LD_VAR 0 1
54788: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
54789: LD_ADDR_VAR 0 10
54793: PUSH
54794: LD_VAR 0 10
54798: PPUSH
54799: LD_VAR 0 8
54803: PPUSH
54804: LD_VAR 0 1
54808: PUSH
54809: LD_VAR 0 7
54813: ARRAY
54814: PPUSH
54815: CALL_OW 1
54819: ST_TO_ADDR
// end ;
54820: GO 54733
54822: POP
54823: POP
// array := tmp ;
54824: LD_ADDR_VAR 0 1
54828: PUSH
54829: LD_VAR 0 10
54833: ST_TO_ADDR
// end ;
54834: GO 54715
54836: POP
54837: POP
// result := array ;
54838: LD_ADDR_VAR 0 5
54842: PUSH
54843: LD_VAR 0 1
54847: ST_TO_ADDR
// end ;
54848: LD_VAR 0 5
54852: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
54853: LD_INT 0
54855: PPUSH
54856: PPUSH
// result := 0 ;
54857: LD_ADDR_VAR 0 3
54861: PUSH
54862: LD_INT 0
54864: ST_TO_ADDR
// if not array or not value in array then
54865: LD_VAR 0 1
54869: NOT
54870: PUSH
54871: LD_VAR 0 2
54875: PUSH
54876: LD_VAR 0 1
54880: IN
54881: NOT
54882: OR
54883: IFFALSE 54887
// exit ;
54885: GO 54941
// for i = 1 to array do
54887: LD_ADDR_VAR 0 4
54891: PUSH
54892: DOUBLE
54893: LD_INT 1
54895: DEC
54896: ST_TO_ADDR
54897: LD_VAR 0 1
54901: PUSH
54902: FOR_TO
54903: IFFALSE 54939
// if value = array [ i ] then
54905: LD_VAR 0 2
54909: PUSH
54910: LD_VAR 0 1
54914: PUSH
54915: LD_VAR 0 4
54919: ARRAY
54920: EQUAL
54921: IFFALSE 54937
// begin result := i ;
54923: LD_ADDR_VAR 0 3
54927: PUSH
54928: LD_VAR 0 4
54932: ST_TO_ADDR
// exit ;
54933: POP
54934: POP
54935: GO 54941
// end ;
54937: GO 54902
54939: POP
54940: POP
// end ;
54941: LD_VAR 0 3
54945: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
54946: LD_INT 0
54948: PPUSH
// vc_chassis := chassis ;
54949: LD_ADDR_OWVAR 37
54953: PUSH
54954: LD_VAR 0 1
54958: ST_TO_ADDR
// vc_engine := engine ;
54959: LD_ADDR_OWVAR 39
54963: PUSH
54964: LD_VAR 0 2
54968: ST_TO_ADDR
// vc_control := control ;
54969: LD_ADDR_OWVAR 38
54973: PUSH
54974: LD_VAR 0 3
54978: ST_TO_ADDR
// vc_weapon := weapon ;
54979: LD_ADDR_OWVAR 40
54983: PUSH
54984: LD_VAR 0 4
54988: ST_TO_ADDR
// vc_fuel_battery := fuel ;
54989: LD_ADDR_OWVAR 41
54993: PUSH
54994: LD_VAR 0 5
54998: ST_TO_ADDR
// end ;
54999: LD_VAR 0 6
55003: RET
// export function WantPlant ( unit ) ; var task ; begin
55004: LD_INT 0
55006: PPUSH
55007: PPUSH
// result := false ;
55008: LD_ADDR_VAR 0 2
55012: PUSH
55013: LD_INT 0
55015: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
55016: LD_ADDR_VAR 0 3
55020: PUSH
55021: LD_VAR 0 1
55025: PPUSH
55026: CALL_OW 437
55030: ST_TO_ADDR
// if task then
55031: LD_VAR 0 3
55035: IFFALSE 55063
// if task [ 1 ] [ 1 ] = p then
55037: LD_VAR 0 3
55041: PUSH
55042: LD_INT 1
55044: ARRAY
55045: PUSH
55046: LD_INT 1
55048: ARRAY
55049: PUSH
55050: LD_STRING p
55052: EQUAL
55053: IFFALSE 55063
// result := true ;
55055: LD_ADDR_VAR 0 2
55059: PUSH
55060: LD_INT 1
55062: ST_TO_ADDR
// end ;
55063: LD_VAR 0 2
55067: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
55068: LD_INT 0
55070: PPUSH
55071: PPUSH
55072: PPUSH
55073: PPUSH
// if pos < 1 then
55074: LD_VAR 0 2
55078: PUSH
55079: LD_INT 1
55081: LESS
55082: IFFALSE 55086
// exit ;
55084: GO 55389
// if pos = 1 then
55086: LD_VAR 0 2
55090: PUSH
55091: LD_INT 1
55093: EQUAL
55094: IFFALSE 55127
// result := Replace ( arr , pos [ 1 ] , value ) else
55096: LD_ADDR_VAR 0 4
55100: PUSH
55101: LD_VAR 0 1
55105: PPUSH
55106: LD_VAR 0 2
55110: PUSH
55111: LD_INT 1
55113: ARRAY
55114: PPUSH
55115: LD_VAR 0 3
55119: PPUSH
55120: CALL_OW 1
55124: ST_TO_ADDR
55125: GO 55389
// begin tmp := arr ;
55127: LD_ADDR_VAR 0 6
55131: PUSH
55132: LD_VAR 0 1
55136: ST_TO_ADDR
// s_arr := [ tmp ] ;
55137: LD_ADDR_VAR 0 7
55141: PUSH
55142: LD_VAR 0 6
55146: PUSH
55147: EMPTY
55148: LIST
55149: ST_TO_ADDR
// for i = 1 to pos - 1 do
55150: LD_ADDR_VAR 0 5
55154: PUSH
55155: DOUBLE
55156: LD_INT 1
55158: DEC
55159: ST_TO_ADDR
55160: LD_VAR 0 2
55164: PUSH
55165: LD_INT 1
55167: MINUS
55168: PUSH
55169: FOR_TO
55170: IFFALSE 55215
// begin tmp := tmp [ pos [ i ] ] ;
55172: LD_ADDR_VAR 0 6
55176: PUSH
55177: LD_VAR 0 6
55181: PUSH
55182: LD_VAR 0 2
55186: PUSH
55187: LD_VAR 0 5
55191: ARRAY
55192: ARRAY
55193: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
55194: LD_ADDR_VAR 0 7
55198: PUSH
55199: LD_VAR 0 7
55203: PUSH
55204: LD_VAR 0 6
55208: PUSH
55209: EMPTY
55210: LIST
55211: ADD
55212: ST_TO_ADDR
// end ;
55213: GO 55169
55215: POP
55216: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
55217: LD_ADDR_VAR 0 6
55221: PUSH
55222: LD_VAR 0 6
55226: PPUSH
55227: LD_VAR 0 2
55231: PUSH
55232: LD_VAR 0 2
55236: ARRAY
55237: PPUSH
55238: LD_VAR 0 3
55242: PPUSH
55243: CALL_OW 1
55247: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
55248: LD_ADDR_VAR 0 7
55252: PUSH
55253: LD_VAR 0 7
55257: PPUSH
55258: LD_VAR 0 7
55262: PPUSH
55263: LD_VAR 0 6
55267: PPUSH
55268: CALL_OW 1
55272: ST_TO_ADDR
// for i = s_arr downto 2 do
55273: LD_ADDR_VAR 0 5
55277: PUSH
55278: DOUBLE
55279: LD_VAR 0 7
55283: INC
55284: ST_TO_ADDR
55285: LD_INT 2
55287: PUSH
55288: FOR_DOWNTO
55289: IFFALSE 55373
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
55291: LD_ADDR_VAR 0 6
55295: PUSH
55296: LD_VAR 0 7
55300: PUSH
55301: LD_VAR 0 5
55305: PUSH
55306: LD_INT 1
55308: MINUS
55309: ARRAY
55310: PPUSH
55311: LD_VAR 0 2
55315: PUSH
55316: LD_VAR 0 5
55320: PUSH
55321: LD_INT 1
55323: MINUS
55324: ARRAY
55325: PPUSH
55326: LD_VAR 0 7
55330: PUSH
55331: LD_VAR 0 5
55335: ARRAY
55336: PPUSH
55337: CALL_OW 1
55341: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
55342: LD_ADDR_VAR 0 7
55346: PUSH
55347: LD_VAR 0 7
55351: PPUSH
55352: LD_VAR 0 5
55356: PUSH
55357: LD_INT 1
55359: MINUS
55360: PPUSH
55361: LD_VAR 0 6
55365: PPUSH
55366: CALL_OW 1
55370: ST_TO_ADDR
// end ;
55371: GO 55288
55373: POP
55374: POP
// result := s_arr [ 1 ] ;
55375: LD_ADDR_VAR 0 4
55379: PUSH
55380: LD_VAR 0 7
55384: PUSH
55385: LD_INT 1
55387: ARRAY
55388: ST_TO_ADDR
// end ; end ;
55389: LD_VAR 0 4
55393: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
55394: LD_INT 0
55396: PPUSH
55397: PPUSH
// if not list then
55398: LD_VAR 0 1
55402: NOT
55403: IFFALSE 55407
// exit ;
55405: GO 55498
// i := list [ pos1 ] ;
55407: LD_ADDR_VAR 0 5
55411: PUSH
55412: LD_VAR 0 1
55416: PUSH
55417: LD_VAR 0 2
55421: ARRAY
55422: ST_TO_ADDR
// if not i then
55423: LD_VAR 0 5
55427: NOT
55428: IFFALSE 55432
// exit ;
55430: GO 55498
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
55432: LD_ADDR_VAR 0 1
55436: PUSH
55437: LD_VAR 0 1
55441: PPUSH
55442: LD_VAR 0 2
55446: PPUSH
55447: LD_VAR 0 1
55451: PUSH
55452: LD_VAR 0 3
55456: ARRAY
55457: PPUSH
55458: CALL_OW 1
55462: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
55463: LD_ADDR_VAR 0 1
55467: PUSH
55468: LD_VAR 0 1
55472: PPUSH
55473: LD_VAR 0 3
55477: PPUSH
55478: LD_VAR 0 5
55482: PPUSH
55483: CALL_OW 1
55487: ST_TO_ADDR
// result := list ;
55488: LD_ADDR_VAR 0 4
55492: PUSH
55493: LD_VAR 0 1
55497: ST_TO_ADDR
// end ;
55498: LD_VAR 0 4
55502: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
55503: LD_INT 0
55505: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
55506: LD_ADDR_VAR 0 5
55510: PUSH
55511: LD_VAR 0 1
55515: PPUSH
55516: CALL_OW 250
55520: PPUSH
55521: LD_VAR 0 1
55525: PPUSH
55526: CALL_OW 251
55530: PPUSH
55531: LD_VAR 0 2
55535: PPUSH
55536: LD_VAR 0 3
55540: PPUSH
55541: LD_VAR 0 4
55545: PPUSH
55546: CALL 55556 0 5
55550: ST_TO_ADDR
// end ;
55551: LD_VAR 0 5
55555: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
55556: LD_INT 0
55558: PPUSH
55559: PPUSH
55560: PPUSH
55561: PPUSH
// if not list then
55562: LD_VAR 0 3
55566: NOT
55567: IFFALSE 55571
// exit ;
55569: GO 55959
// result := [ ] ;
55571: LD_ADDR_VAR 0 6
55575: PUSH
55576: EMPTY
55577: ST_TO_ADDR
// for i in list do
55578: LD_ADDR_VAR 0 7
55582: PUSH
55583: LD_VAR 0 3
55587: PUSH
55588: FOR_IN
55589: IFFALSE 55791
// begin tmp := GetDistUnitXY ( i , x , y ) ;
55591: LD_ADDR_VAR 0 9
55595: PUSH
55596: LD_VAR 0 7
55600: PPUSH
55601: LD_VAR 0 1
55605: PPUSH
55606: LD_VAR 0 2
55610: PPUSH
55611: CALL_OW 297
55615: ST_TO_ADDR
// if not result then
55616: LD_VAR 0 6
55620: NOT
55621: IFFALSE 55647
// result := [ [ i , tmp ] ] else
55623: LD_ADDR_VAR 0 6
55627: PUSH
55628: LD_VAR 0 7
55632: PUSH
55633: LD_VAR 0 9
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: EMPTY
55643: LIST
55644: ST_TO_ADDR
55645: GO 55789
// begin if result [ result ] [ 2 ] < tmp then
55647: LD_VAR 0 6
55651: PUSH
55652: LD_VAR 0 6
55656: ARRAY
55657: PUSH
55658: LD_INT 2
55660: ARRAY
55661: PUSH
55662: LD_VAR 0 9
55666: LESS
55667: IFFALSE 55709
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
55669: LD_ADDR_VAR 0 6
55673: PUSH
55674: LD_VAR 0 6
55678: PPUSH
55679: LD_VAR 0 6
55683: PUSH
55684: LD_INT 1
55686: PLUS
55687: PPUSH
55688: LD_VAR 0 7
55692: PUSH
55693: LD_VAR 0 9
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PPUSH
55702: CALL_OW 2
55706: ST_TO_ADDR
55707: GO 55789
// for j = 1 to result do
55709: LD_ADDR_VAR 0 8
55713: PUSH
55714: DOUBLE
55715: LD_INT 1
55717: DEC
55718: ST_TO_ADDR
55719: LD_VAR 0 6
55723: PUSH
55724: FOR_TO
55725: IFFALSE 55787
// begin if tmp < result [ j ] [ 2 ] then
55727: LD_VAR 0 9
55731: PUSH
55732: LD_VAR 0 6
55736: PUSH
55737: LD_VAR 0 8
55741: ARRAY
55742: PUSH
55743: LD_INT 2
55745: ARRAY
55746: LESS
55747: IFFALSE 55785
// begin result := Insert ( result , j , [ i , tmp ] ) ;
55749: LD_ADDR_VAR 0 6
55753: PUSH
55754: LD_VAR 0 6
55758: PPUSH
55759: LD_VAR 0 8
55763: PPUSH
55764: LD_VAR 0 7
55768: PUSH
55769: LD_VAR 0 9
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PPUSH
55778: CALL_OW 2
55782: ST_TO_ADDR
// break ;
55783: GO 55787
// end ; end ;
55785: GO 55724
55787: POP
55788: POP
// end ; end ;
55789: GO 55588
55791: POP
55792: POP
// if result and not asc then
55793: LD_VAR 0 6
55797: PUSH
55798: LD_VAR 0 4
55802: NOT
55803: AND
55804: IFFALSE 55879
// begin tmp := result ;
55806: LD_ADDR_VAR 0 9
55810: PUSH
55811: LD_VAR 0 6
55815: ST_TO_ADDR
// for i = tmp downto 1 do
55816: LD_ADDR_VAR 0 7
55820: PUSH
55821: DOUBLE
55822: LD_VAR 0 9
55826: INC
55827: ST_TO_ADDR
55828: LD_INT 1
55830: PUSH
55831: FOR_DOWNTO
55832: IFFALSE 55877
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
55834: LD_ADDR_VAR 0 6
55838: PUSH
55839: LD_VAR 0 6
55843: PPUSH
55844: LD_VAR 0 9
55848: PUSH
55849: LD_VAR 0 7
55853: MINUS
55854: PUSH
55855: LD_INT 1
55857: PLUS
55858: PPUSH
55859: LD_VAR 0 9
55863: PUSH
55864: LD_VAR 0 7
55868: ARRAY
55869: PPUSH
55870: CALL_OW 1
55874: ST_TO_ADDR
55875: GO 55831
55877: POP
55878: POP
// end ; tmp := [ ] ;
55879: LD_ADDR_VAR 0 9
55883: PUSH
55884: EMPTY
55885: ST_TO_ADDR
// if mode then
55886: LD_VAR 0 5
55890: IFFALSE 55959
// begin for i = 1 to result do
55892: LD_ADDR_VAR 0 7
55896: PUSH
55897: DOUBLE
55898: LD_INT 1
55900: DEC
55901: ST_TO_ADDR
55902: LD_VAR 0 6
55906: PUSH
55907: FOR_TO
55908: IFFALSE 55947
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
55910: LD_ADDR_VAR 0 9
55914: PUSH
55915: LD_VAR 0 9
55919: PPUSH
55920: LD_VAR 0 7
55924: PPUSH
55925: LD_VAR 0 6
55929: PUSH
55930: LD_VAR 0 7
55934: ARRAY
55935: PUSH
55936: LD_INT 1
55938: ARRAY
55939: PPUSH
55940: CALL_OW 1
55944: ST_TO_ADDR
55945: GO 55907
55947: POP
55948: POP
// result := tmp ;
55949: LD_ADDR_VAR 0 6
55953: PUSH
55954: LD_VAR 0 9
55958: ST_TO_ADDR
// end ; end ;
55959: LD_VAR 0 6
55963: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
55964: LD_INT 0
55966: PPUSH
55967: PPUSH
55968: PPUSH
55969: PPUSH
55970: PPUSH
55971: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
55972: LD_ADDR_VAR 0 5
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 0
55982: PUSH
55983: LD_INT 0
55985: PUSH
55986: EMPTY
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: ST_TO_ADDR
// if not x or not y then
55994: LD_VAR 0 2
55998: NOT
55999: PUSH
56000: LD_VAR 0 3
56004: NOT
56005: OR
56006: IFFALSE 56010
// exit ;
56008: GO 57660
// if not range then
56010: LD_VAR 0 4
56014: NOT
56015: IFFALSE 56025
// range := 10 ;
56017: LD_ADDR_VAR 0 4
56021: PUSH
56022: LD_INT 10
56024: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56025: LD_ADDR_VAR 0 8
56029: PUSH
56030: LD_INT 81
56032: PUSH
56033: LD_VAR 0 1
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 92
56044: PUSH
56045: LD_VAR 0 2
56049: PUSH
56050: LD_VAR 0 3
56054: PUSH
56055: LD_VAR 0 4
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 3
56068: PUSH
56069: LD_INT 21
56071: PUSH
56072: LD_INT 3
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: PPUSH
56088: CALL_OW 69
56092: ST_TO_ADDR
// if not tmp then
56093: LD_VAR 0 8
56097: NOT
56098: IFFALSE 56102
// exit ;
56100: GO 57660
// for i in tmp do
56102: LD_ADDR_VAR 0 6
56106: PUSH
56107: LD_VAR 0 8
56111: PUSH
56112: FOR_IN
56113: IFFALSE 57635
// begin points := [ 0 , 0 , 0 ] ;
56115: LD_ADDR_VAR 0 9
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: LIST
56133: ST_TO_ADDR
// bpoints := 1 ;
56134: LD_ADDR_VAR 0 10
56138: PUSH
56139: LD_INT 1
56141: ST_TO_ADDR
// case GetType ( i ) of unit_human :
56142: LD_VAR 0 6
56146: PPUSH
56147: CALL_OW 247
56151: PUSH
56152: LD_INT 1
56154: DOUBLE
56155: EQUAL
56156: IFTRUE 56160
56158: GO 56738
56160: POP
// begin if GetClass ( i ) = 1 then
56161: LD_VAR 0 6
56165: PPUSH
56166: CALL_OW 257
56170: PUSH
56171: LD_INT 1
56173: EQUAL
56174: IFFALSE 56195
// points := [ 10 , 5 , 3 ] ;
56176: LD_ADDR_VAR 0 9
56180: PUSH
56181: LD_INT 10
56183: PUSH
56184: LD_INT 5
56186: PUSH
56187: LD_INT 3
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
56195: LD_VAR 0 6
56199: PPUSH
56200: CALL_OW 257
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: LD_INT 3
56210: PUSH
56211: LD_INT 4
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: LIST
56218: IN
56219: IFFALSE 56240
// points := [ 3 , 2 , 1 ] ;
56221: LD_ADDR_VAR 0 9
56225: PUSH
56226: LD_INT 3
56228: PUSH
56229: LD_INT 2
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: LIST
56239: ST_TO_ADDR
// if GetClass ( i ) = 5 then
56240: LD_VAR 0 6
56244: PPUSH
56245: CALL_OW 257
56249: PUSH
56250: LD_INT 5
56252: EQUAL
56253: IFFALSE 56274
// points := [ 130 , 5 , 2 ] ;
56255: LD_ADDR_VAR 0 9
56259: PUSH
56260: LD_INT 130
56262: PUSH
56263: LD_INT 5
56265: PUSH
56266: LD_INT 2
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: LIST
56273: ST_TO_ADDR
// if GetClass ( i ) = 8 then
56274: LD_VAR 0 6
56278: PPUSH
56279: CALL_OW 257
56283: PUSH
56284: LD_INT 8
56286: EQUAL
56287: IFFALSE 56308
// points := [ 35 , 35 , 30 ] ;
56289: LD_ADDR_VAR 0 9
56293: PUSH
56294: LD_INT 35
56296: PUSH
56297: LD_INT 35
56299: PUSH
56300: LD_INT 30
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: LIST
56307: ST_TO_ADDR
// if GetClass ( i ) = 9 then
56308: LD_VAR 0 6
56312: PPUSH
56313: CALL_OW 257
56317: PUSH
56318: LD_INT 9
56320: EQUAL
56321: IFFALSE 56342
// points := [ 20 , 55 , 40 ] ;
56323: LD_ADDR_VAR 0 9
56327: PUSH
56328: LD_INT 20
56330: PUSH
56331: LD_INT 55
56333: PUSH
56334: LD_INT 40
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
56342: LD_VAR 0 6
56346: PPUSH
56347: CALL_OW 257
56351: PUSH
56352: LD_INT 12
56354: PUSH
56355: LD_INT 16
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: IN
56362: IFFALSE 56383
// points := [ 5 , 3 , 2 ] ;
56364: LD_ADDR_VAR 0 9
56368: PUSH
56369: LD_INT 5
56371: PUSH
56372: LD_INT 3
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: LIST
56382: ST_TO_ADDR
// if GetClass ( i ) = 17 then
56383: LD_VAR 0 6
56387: PPUSH
56388: CALL_OW 257
56392: PUSH
56393: LD_INT 17
56395: EQUAL
56396: IFFALSE 56417
// points := [ 100 , 50 , 75 ] ;
56398: LD_ADDR_VAR 0 9
56402: PUSH
56403: LD_INT 100
56405: PUSH
56406: LD_INT 50
56408: PUSH
56409: LD_INT 75
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: LIST
56416: ST_TO_ADDR
// if GetClass ( i ) = 15 then
56417: LD_VAR 0 6
56421: PPUSH
56422: CALL_OW 257
56426: PUSH
56427: LD_INT 15
56429: EQUAL
56430: IFFALSE 56451
// points := [ 10 , 5 , 3 ] ;
56432: LD_ADDR_VAR 0 9
56436: PUSH
56437: LD_INT 10
56439: PUSH
56440: LD_INT 5
56442: PUSH
56443: LD_INT 3
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: LIST
56450: ST_TO_ADDR
// if GetClass ( i ) = 14 then
56451: LD_VAR 0 6
56455: PPUSH
56456: CALL_OW 257
56460: PUSH
56461: LD_INT 14
56463: EQUAL
56464: IFFALSE 56485
// points := [ 10 , 0 , 0 ] ;
56466: LD_ADDR_VAR 0 9
56470: PUSH
56471: LD_INT 10
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: LIST
56484: ST_TO_ADDR
// if GetClass ( i ) = 11 then
56485: LD_VAR 0 6
56489: PPUSH
56490: CALL_OW 257
56494: PUSH
56495: LD_INT 11
56497: EQUAL
56498: IFFALSE 56519
// points := [ 30 , 10 , 5 ] ;
56500: LD_ADDR_VAR 0 9
56504: PUSH
56505: LD_INT 30
56507: PUSH
56508: LD_INT 10
56510: PUSH
56511: LD_INT 5
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: LIST
56518: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
56519: LD_VAR 0 1
56523: PPUSH
56524: LD_INT 5
56526: PPUSH
56527: CALL_OW 321
56531: PUSH
56532: LD_INT 2
56534: EQUAL
56535: IFFALSE 56552
// bpoints := bpoints * 1.8 ;
56537: LD_ADDR_VAR 0 10
56541: PUSH
56542: LD_VAR 0 10
56546: PUSH
56547: LD_REAL  1.80000000000000E+0000
56550: MUL
56551: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
56552: LD_VAR 0 6
56556: PPUSH
56557: CALL_OW 257
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: LD_INT 4
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: IN
56580: PUSH
56581: LD_VAR 0 1
56585: PPUSH
56586: LD_INT 51
56588: PPUSH
56589: CALL_OW 321
56593: PUSH
56594: LD_INT 2
56596: EQUAL
56597: AND
56598: IFFALSE 56615
// bpoints := bpoints * 1.2 ;
56600: LD_ADDR_VAR 0 10
56604: PUSH
56605: LD_VAR 0 10
56609: PUSH
56610: LD_REAL  1.20000000000000E+0000
56613: MUL
56614: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
56615: LD_VAR 0 6
56619: PPUSH
56620: CALL_OW 257
56624: PUSH
56625: LD_INT 5
56627: PUSH
56628: LD_INT 7
56630: PUSH
56631: LD_INT 9
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: LIST
56638: IN
56639: PUSH
56640: LD_VAR 0 1
56644: PPUSH
56645: LD_INT 52
56647: PPUSH
56648: CALL_OW 321
56652: PUSH
56653: LD_INT 2
56655: EQUAL
56656: AND
56657: IFFALSE 56674
// bpoints := bpoints * 1.5 ;
56659: LD_ADDR_VAR 0 10
56663: PUSH
56664: LD_VAR 0 10
56668: PUSH
56669: LD_REAL  1.50000000000000E+0000
56672: MUL
56673: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
56674: LD_VAR 0 1
56678: PPUSH
56679: LD_INT 66
56681: PPUSH
56682: CALL_OW 321
56686: PUSH
56687: LD_INT 2
56689: EQUAL
56690: IFFALSE 56707
// bpoints := bpoints * 1.1 ;
56692: LD_ADDR_VAR 0 10
56696: PUSH
56697: LD_VAR 0 10
56701: PUSH
56702: LD_REAL  1.10000000000000E+0000
56705: MUL
56706: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
56707: LD_ADDR_VAR 0 10
56711: PUSH
56712: LD_VAR 0 10
56716: PUSH
56717: LD_VAR 0 6
56721: PPUSH
56722: LD_INT 1
56724: PPUSH
56725: CALL_OW 259
56729: PUSH
56730: LD_REAL  1.15000000000000E+0000
56733: MUL
56734: MUL
56735: ST_TO_ADDR
// end ; unit_vehicle :
56736: GO 57564
56738: LD_INT 2
56740: DOUBLE
56741: EQUAL
56742: IFTRUE 56746
56744: GO 57552
56746: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
56747: LD_VAR 0 6
56751: PPUSH
56752: CALL_OW 264
56756: PUSH
56757: LD_INT 2
56759: PUSH
56760: LD_INT 42
56762: PUSH
56763: LD_INT 24
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: LIST
56770: IN
56771: IFFALSE 56792
// points := [ 25 , 5 , 3 ] ;
56773: LD_ADDR_VAR 0 9
56777: PUSH
56778: LD_INT 25
56780: PUSH
56781: LD_INT 5
56783: PUSH
56784: LD_INT 3
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: LIST
56791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
56792: LD_VAR 0 6
56796: PPUSH
56797: CALL_OW 264
56801: PUSH
56802: LD_INT 4
56804: PUSH
56805: LD_INT 43
56807: PUSH
56808: LD_INT 25
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: LIST
56815: IN
56816: IFFALSE 56837
// points := [ 40 , 15 , 5 ] ;
56818: LD_ADDR_VAR 0 9
56822: PUSH
56823: LD_INT 40
56825: PUSH
56826: LD_INT 15
56828: PUSH
56829: LD_INT 5
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: LIST
56836: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
56837: LD_VAR 0 6
56841: PPUSH
56842: CALL_OW 264
56846: PUSH
56847: LD_INT 3
56849: PUSH
56850: LD_INT 23
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: IN
56857: IFFALSE 56878
// points := [ 7 , 25 , 8 ] ;
56859: LD_ADDR_VAR 0 9
56863: PUSH
56864: LD_INT 7
56866: PUSH
56867: LD_INT 25
56869: PUSH
56870: LD_INT 8
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
56878: LD_VAR 0 6
56882: PPUSH
56883: CALL_OW 264
56887: PUSH
56888: LD_INT 5
56890: PUSH
56891: LD_INT 27
56893: PUSH
56894: LD_INT 44
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: LIST
56901: IN
56902: IFFALSE 56923
// points := [ 14 , 50 , 16 ] ;
56904: LD_ADDR_VAR 0 9
56908: PUSH
56909: LD_INT 14
56911: PUSH
56912: LD_INT 50
56914: PUSH
56915: LD_INT 16
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: LIST
56922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
56923: LD_VAR 0 6
56927: PPUSH
56928: CALL_OW 264
56932: PUSH
56933: LD_INT 6
56935: PUSH
56936: LD_INT 46
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: IN
56943: IFFALSE 56964
// points := [ 32 , 120 , 70 ] ;
56945: LD_ADDR_VAR 0 9
56949: PUSH
56950: LD_INT 32
56952: PUSH
56953: LD_INT 120
56955: PUSH
56956: LD_INT 70
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: LIST
56963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
56964: LD_VAR 0 6
56968: PPUSH
56969: CALL_OW 264
56973: PUSH
56974: LD_INT 7
56976: PUSH
56977: LD_INT 28
56979: PUSH
56980: LD_INT 45
56982: PUSH
56983: LD_INT 92
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: IN
56992: IFFALSE 57013
// points := [ 35 , 20 , 45 ] ;
56994: LD_ADDR_VAR 0 9
56998: PUSH
56999: LD_INT 35
57001: PUSH
57002: LD_INT 20
57004: PUSH
57005: LD_INT 45
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: LIST
57012: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
57013: LD_VAR 0 6
57017: PPUSH
57018: CALL_OW 264
57022: PUSH
57023: LD_INT 47
57025: PUSH
57026: EMPTY
57027: LIST
57028: IN
57029: IFFALSE 57050
// points := [ 67 , 45 , 75 ] ;
57031: LD_ADDR_VAR 0 9
57035: PUSH
57036: LD_INT 67
57038: PUSH
57039: LD_INT 45
57041: PUSH
57042: LD_INT 75
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: LIST
57049: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
57050: LD_VAR 0 6
57054: PPUSH
57055: CALL_OW 264
57059: PUSH
57060: LD_INT 26
57062: PUSH
57063: EMPTY
57064: LIST
57065: IN
57066: IFFALSE 57087
// points := [ 120 , 30 , 80 ] ;
57068: LD_ADDR_VAR 0 9
57072: PUSH
57073: LD_INT 120
57075: PUSH
57076: LD_INT 30
57078: PUSH
57079: LD_INT 80
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
57087: LD_VAR 0 6
57091: PPUSH
57092: CALL_OW 264
57096: PUSH
57097: LD_INT 22
57099: PUSH
57100: EMPTY
57101: LIST
57102: IN
57103: IFFALSE 57124
// points := [ 40 , 1 , 1 ] ;
57105: LD_ADDR_VAR 0 9
57109: PUSH
57110: LD_INT 40
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: LIST
57123: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
57124: LD_VAR 0 6
57128: PPUSH
57129: CALL_OW 264
57133: PUSH
57134: LD_INT 29
57136: PUSH
57137: EMPTY
57138: LIST
57139: IN
57140: IFFALSE 57161
// points := [ 70 , 200 , 400 ] ;
57142: LD_ADDR_VAR 0 9
57146: PUSH
57147: LD_INT 70
57149: PUSH
57150: LD_INT 200
57152: PUSH
57153: LD_INT 400
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
57161: LD_VAR 0 6
57165: PPUSH
57166: CALL_OW 264
57170: PUSH
57171: LD_INT 14
57173: PUSH
57174: LD_INT 53
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: IN
57181: IFFALSE 57202
// points := [ 40 , 10 , 20 ] ;
57183: LD_ADDR_VAR 0 9
57187: PUSH
57188: LD_INT 40
57190: PUSH
57191: LD_INT 10
57193: PUSH
57194: LD_INT 20
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: LIST
57201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
57202: LD_VAR 0 6
57206: PPUSH
57207: CALL_OW 264
57211: PUSH
57212: LD_INT 9
57214: PUSH
57215: EMPTY
57216: LIST
57217: IN
57218: IFFALSE 57239
// points := [ 5 , 70 , 20 ] ;
57220: LD_ADDR_VAR 0 9
57224: PUSH
57225: LD_INT 5
57227: PUSH
57228: LD_INT 70
57230: PUSH
57231: LD_INT 20
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: LIST
57238: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
57239: LD_VAR 0 6
57243: PPUSH
57244: CALL_OW 264
57248: PUSH
57249: LD_INT 10
57251: PUSH
57252: EMPTY
57253: LIST
57254: IN
57255: IFFALSE 57276
// points := [ 35 , 110 , 70 ] ;
57257: LD_ADDR_VAR 0 9
57261: PUSH
57262: LD_INT 35
57264: PUSH
57265: LD_INT 110
57267: PUSH
57268: LD_INT 70
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: LIST
57275: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
57276: LD_VAR 0 6
57280: PPUSH
57281: CALL_OW 265
57285: PUSH
57286: LD_INT 25
57288: EQUAL
57289: IFFALSE 57310
// points := [ 80 , 65 , 100 ] ;
57291: LD_ADDR_VAR 0 9
57295: PUSH
57296: LD_INT 80
57298: PUSH
57299: LD_INT 65
57301: PUSH
57302: LD_INT 100
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: LIST
57309: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
57310: LD_VAR 0 6
57314: PPUSH
57315: CALL_OW 263
57319: PUSH
57320: LD_INT 1
57322: EQUAL
57323: IFFALSE 57358
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
57325: LD_ADDR_VAR 0 10
57329: PUSH
57330: LD_VAR 0 10
57334: PUSH
57335: LD_VAR 0 6
57339: PPUSH
57340: CALL_OW 311
57344: PPUSH
57345: LD_INT 3
57347: PPUSH
57348: CALL_OW 259
57352: PUSH
57353: LD_INT 4
57355: MUL
57356: MUL
57357: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
57358: LD_VAR 0 6
57362: PPUSH
57363: CALL_OW 263
57367: PUSH
57368: LD_INT 2
57370: EQUAL
57371: IFFALSE 57422
// begin j := IsControledBy ( i ) ;
57373: LD_ADDR_VAR 0 7
57377: PUSH
57378: LD_VAR 0 6
57382: PPUSH
57383: CALL_OW 312
57387: ST_TO_ADDR
// if j then
57388: LD_VAR 0 7
57392: IFFALSE 57422
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
57394: LD_ADDR_VAR 0 10
57398: PUSH
57399: LD_VAR 0 10
57403: PUSH
57404: LD_VAR 0 7
57408: PPUSH
57409: LD_INT 3
57411: PPUSH
57412: CALL_OW 259
57416: PUSH
57417: LD_INT 3
57419: MUL
57420: MUL
57421: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
57422: LD_VAR 0 6
57426: PPUSH
57427: CALL_OW 264
57431: PUSH
57432: LD_INT 5
57434: PUSH
57435: LD_INT 6
57437: PUSH
57438: LD_INT 46
57440: PUSH
57441: LD_INT 44
57443: PUSH
57444: LD_INT 47
57446: PUSH
57447: LD_INT 45
57449: PUSH
57450: LD_INT 28
57452: PUSH
57453: LD_INT 7
57455: PUSH
57456: LD_INT 27
57458: PUSH
57459: LD_INT 29
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: IN
57474: PUSH
57475: LD_VAR 0 1
57479: PPUSH
57480: LD_INT 52
57482: PPUSH
57483: CALL_OW 321
57487: PUSH
57488: LD_INT 2
57490: EQUAL
57491: AND
57492: IFFALSE 57509
// bpoints := bpoints * 1.2 ;
57494: LD_ADDR_VAR 0 10
57498: PUSH
57499: LD_VAR 0 10
57503: PUSH
57504: LD_REAL  1.20000000000000E+0000
57507: MUL
57508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
57509: LD_VAR 0 6
57513: PPUSH
57514: CALL_OW 264
57518: PUSH
57519: LD_INT 6
57521: PUSH
57522: LD_INT 46
57524: PUSH
57525: LD_INT 47
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: LIST
57532: IN
57533: IFFALSE 57550
// bpoints := bpoints * 1.2 ;
57535: LD_ADDR_VAR 0 10
57539: PUSH
57540: LD_VAR 0 10
57544: PUSH
57545: LD_REAL  1.20000000000000E+0000
57548: MUL
57549: ST_TO_ADDR
// end ; unit_building :
57550: GO 57564
57552: LD_INT 3
57554: DOUBLE
57555: EQUAL
57556: IFTRUE 57560
57558: GO 57563
57560: POP
// ; end ;
57561: GO 57564
57563: POP
// for j = 1 to 3 do
57564: LD_ADDR_VAR 0 7
57568: PUSH
57569: DOUBLE
57570: LD_INT 1
57572: DEC
57573: ST_TO_ADDR
57574: LD_INT 3
57576: PUSH
57577: FOR_TO
57578: IFFALSE 57631
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
57580: LD_ADDR_VAR 0 5
57584: PUSH
57585: LD_VAR 0 5
57589: PPUSH
57590: LD_VAR 0 7
57594: PPUSH
57595: LD_VAR 0 5
57599: PUSH
57600: LD_VAR 0 7
57604: ARRAY
57605: PUSH
57606: LD_VAR 0 9
57610: PUSH
57611: LD_VAR 0 7
57615: ARRAY
57616: PUSH
57617: LD_VAR 0 10
57621: MUL
57622: PLUS
57623: PPUSH
57624: CALL_OW 1
57628: ST_TO_ADDR
57629: GO 57577
57631: POP
57632: POP
// end ;
57633: GO 56112
57635: POP
57636: POP
// result := Replace ( result , 4 , tmp ) ;
57637: LD_ADDR_VAR 0 5
57641: PUSH
57642: LD_VAR 0 5
57646: PPUSH
57647: LD_INT 4
57649: PPUSH
57650: LD_VAR 0 8
57654: PPUSH
57655: CALL_OW 1
57659: ST_TO_ADDR
// end ;
57660: LD_VAR 0 5
57664: RET
// export function DangerAtRange ( unit , range ) ; begin
57665: LD_INT 0
57667: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
57668: LD_ADDR_VAR 0 3
57672: PUSH
57673: LD_VAR 0 1
57677: PPUSH
57678: CALL_OW 255
57682: PPUSH
57683: LD_VAR 0 1
57687: PPUSH
57688: CALL_OW 250
57692: PPUSH
57693: LD_VAR 0 1
57697: PPUSH
57698: CALL_OW 251
57702: PPUSH
57703: LD_VAR 0 2
57707: PPUSH
57708: CALL 55964 0 4
57712: ST_TO_ADDR
// end ;
57713: LD_VAR 0 3
57717: RET
// export function DangerInArea ( side , area ) ; begin
57718: LD_INT 0
57720: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
57721: LD_ADDR_VAR 0 3
57725: PUSH
57726: LD_VAR 0 2
57730: PPUSH
57731: LD_INT 81
57733: PUSH
57734: LD_VAR 0 1
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PPUSH
57743: CALL_OW 70
57747: ST_TO_ADDR
// end ;
57748: LD_VAR 0 3
57752: RET
// export function IsExtension ( b ) ; begin
57753: LD_INT 0
57755: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
57756: LD_ADDR_VAR 0 2
57760: PUSH
57761: LD_VAR 0 1
57765: PUSH
57766: LD_INT 23
57768: PUSH
57769: LD_INT 20
57771: PUSH
57772: LD_INT 22
57774: PUSH
57775: LD_INT 17
57777: PUSH
57778: LD_INT 24
57780: PUSH
57781: LD_INT 21
57783: PUSH
57784: LD_INT 19
57786: PUSH
57787: LD_INT 16
57789: PUSH
57790: LD_INT 25
57792: PUSH
57793: LD_INT 18
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: IN
57808: ST_TO_ADDR
// end ;
57809: LD_VAR 0 2
57813: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
57814: LD_INT 0
57816: PPUSH
57817: PPUSH
57818: PPUSH
// result := [ ] ;
57819: LD_ADDR_VAR 0 4
57823: PUSH
57824: EMPTY
57825: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
57826: LD_ADDR_VAR 0 5
57830: PUSH
57831: LD_VAR 0 2
57835: PPUSH
57836: LD_INT 21
57838: PUSH
57839: LD_INT 3
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PPUSH
57846: CALL_OW 70
57850: ST_TO_ADDR
// if not tmp then
57851: LD_VAR 0 5
57855: NOT
57856: IFFALSE 57860
// exit ;
57858: GO 57924
// if checkLink then
57860: LD_VAR 0 3
57864: IFFALSE 57914
// begin for i in tmp do
57866: LD_ADDR_VAR 0 6
57870: PUSH
57871: LD_VAR 0 5
57875: PUSH
57876: FOR_IN
57877: IFFALSE 57912
// if GetBase ( i ) <> base then
57879: LD_VAR 0 6
57883: PPUSH
57884: CALL_OW 274
57888: PUSH
57889: LD_VAR 0 1
57893: NONEQUAL
57894: IFFALSE 57910
// ComLinkToBase ( base , i ) ;
57896: LD_VAR 0 1
57900: PPUSH
57901: LD_VAR 0 6
57905: PPUSH
57906: CALL_OW 169
57910: GO 57876
57912: POP
57913: POP
// end ; result := tmp ;
57914: LD_ADDR_VAR 0 4
57918: PUSH
57919: LD_VAR 0 5
57923: ST_TO_ADDR
// end ;
57924: LD_VAR 0 4
57928: RET
// export function ComComplete ( units , b ) ; var i ; begin
57929: LD_INT 0
57931: PPUSH
57932: PPUSH
// if not units then
57933: LD_VAR 0 1
57937: NOT
57938: IFFALSE 57942
// exit ;
57940: GO 58032
// for i in units do
57942: LD_ADDR_VAR 0 4
57946: PUSH
57947: LD_VAR 0 1
57951: PUSH
57952: FOR_IN
57953: IFFALSE 58030
// if BuildingStatus ( b ) = bs_build then
57955: LD_VAR 0 2
57959: PPUSH
57960: CALL_OW 461
57964: PUSH
57965: LD_INT 1
57967: EQUAL
57968: IFFALSE 58028
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
57970: LD_VAR 0 4
57974: PPUSH
57975: LD_STRING h
57977: PUSH
57978: LD_VAR 0 2
57982: PPUSH
57983: CALL_OW 250
57987: PUSH
57988: LD_VAR 0 2
57992: PPUSH
57993: CALL_OW 251
57997: PUSH
57998: LD_VAR 0 2
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: PUSH
58021: EMPTY
58022: LIST
58023: PPUSH
58024: CALL_OW 446
58028: GO 57952
58030: POP
58031: POP
// end ;
58032: LD_VAR 0 3
58036: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
58037: LD_INT 0
58039: PPUSH
58040: PPUSH
58041: PPUSH
58042: PPUSH
58043: PPUSH
58044: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
58045: LD_VAR 0 1
58049: NOT
58050: PUSH
58051: LD_VAR 0 1
58055: PPUSH
58056: CALL_OW 263
58060: PUSH
58061: LD_INT 2
58063: NONEQUAL
58064: OR
58065: IFFALSE 58069
// exit ;
58067: GO 58385
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
58069: LD_ADDR_VAR 0 6
58073: PUSH
58074: LD_INT 22
58076: PUSH
58077: LD_VAR 0 1
58081: PPUSH
58082: CALL_OW 255
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: LD_INT 30
58096: PUSH
58097: LD_INT 36
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 34
58106: PUSH
58107: LD_INT 31
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: LIST
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PPUSH
58123: CALL_OW 69
58127: ST_TO_ADDR
// if not tmp then
58128: LD_VAR 0 6
58132: NOT
58133: IFFALSE 58137
// exit ;
58135: GO 58385
// result := [ ] ;
58137: LD_ADDR_VAR 0 2
58141: PUSH
58142: EMPTY
58143: ST_TO_ADDR
// for i in tmp do
58144: LD_ADDR_VAR 0 3
58148: PUSH
58149: LD_VAR 0 6
58153: PUSH
58154: FOR_IN
58155: IFFALSE 58226
// begin t := UnitsInside ( i ) ;
58157: LD_ADDR_VAR 0 4
58161: PUSH
58162: LD_VAR 0 3
58166: PPUSH
58167: CALL_OW 313
58171: ST_TO_ADDR
// if t then
58172: LD_VAR 0 4
58176: IFFALSE 58224
// for j in t do
58178: LD_ADDR_VAR 0 7
58182: PUSH
58183: LD_VAR 0 4
58187: PUSH
58188: FOR_IN
58189: IFFALSE 58222
// result := Replace ( result , result + 1 , j ) ;
58191: LD_ADDR_VAR 0 2
58195: PUSH
58196: LD_VAR 0 2
58200: PPUSH
58201: LD_VAR 0 2
58205: PUSH
58206: LD_INT 1
58208: PLUS
58209: PPUSH
58210: LD_VAR 0 7
58214: PPUSH
58215: CALL_OW 1
58219: ST_TO_ADDR
58220: GO 58188
58222: POP
58223: POP
// end ;
58224: GO 58154
58226: POP
58227: POP
// if not result then
58228: LD_VAR 0 2
58232: NOT
58233: IFFALSE 58237
// exit ;
58235: GO 58385
// mech := result [ 1 ] ;
58237: LD_ADDR_VAR 0 5
58241: PUSH
58242: LD_VAR 0 2
58246: PUSH
58247: LD_INT 1
58249: ARRAY
58250: ST_TO_ADDR
// if result > 1 then
58251: LD_VAR 0 2
58255: PUSH
58256: LD_INT 1
58258: GREATER
58259: IFFALSE 58371
// begin for i = 2 to result do
58261: LD_ADDR_VAR 0 3
58265: PUSH
58266: DOUBLE
58267: LD_INT 2
58269: DEC
58270: ST_TO_ADDR
58271: LD_VAR 0 2
58275: PUSH
58276: FOR_TO
58277: IFFALSE 58369
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
58279: LD_ADDR_VAR 0 4
58283: PUSH
58284: LD_VAR 0 2
58288: PUSH
58289: LD_VAR 0 3
58293: ARRAY
58294: PPUSH
58295: LD_INT 3
58297: PPUSH
58298: CALL_OW 259
58302: PUSH
58303: LD_VAR 0 2
58307: PUSH
58308: LD_VAR 0 3
58312: ARRAY
58313: PPUSH
58314: CALL_OW 432
58318: MINUS
58319: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
58320: LD_VAR 0 4
58324: PUSH
58325: LD_VAR 0 5
58329: PPUSH
58330: LD_INT 3
58332: PPUSH
58333: CALL_OW 259
58337: PUSH
58338: LD_VAR 0 5
58342: PPUSH
58343: CALL_OW 432
58347: MINUS
58348: GREATEREQUAL
58349: IFFALSE 58367
// mech := result [ i ] ;
58351: LD_ADDR_VAR 0 5
58355: PUSH
58356: LD_VAR 0 2
58360: PUSH
58361: LD_VAR 0 3
58365: ARRAY
58366: ST_TO_ADDR
// end ;
58367: GO 58276
58369: POP
58370: POP
// end ; ComLinkTo ( vehicle , mech ) ;
58371: LD_VAR 0 1
58375: PPUSH
58376: LD_VAR 0 5
58380: PPUSH
58381: CALL_OW 135
// end ;
58385: LD_VAR 0 2
58389: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
58390: LD_INT 0
58392: PPUSH
58393: PPUSH
58394: PPUSH
58395: PPUSH
58396: PPUSH
58397: PPUSH
58398: PPUSH
58399: PPUSH
58400: PPUSH
58401: PPUSH
58402: PPUSH
58403: PPUSH
58404: PPUSH
// result := [ ] ;
58405: LD_ADDR_VAR 0 7
58409: PUSH
58410: EMPTY
58411: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
58412: LD_VAR 0 1
58416: PPUSH
58417: CALL_OW 266
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: IN
58432: NOT
58433: IFFALSE 58437
// exit ;
58435: GO 60071
// if name then
58437: LD_VAR 0 3
58441: IFFALSE 58457
// SetBName ( base_dep , name ) ;
58443: LD_VAR 0 1
58447: PPUSH
58448: LD_VAR 0 3
58452: PPUSH
58453: CALL_OW 500
// base := GetBase ( base_dep ) ;
58457: LD_ADDR_VAR 0 15
58461: PUSH
58462: LD_VAR 0 1
58466: PPUSH
58467: CALL_OW 274
58471: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
58472: LD_ADDR_VAR 0 16
58476: PUSH
58477: LD_VAR 0 1
58481: PPUSH
58482: CALL_OW 255
58486: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
58487: LD_ADDR_VAR 0 17
58491: PUSH
58492: LD_VAR 0 1
58496: PPUSH
58497: CALL_OW 248
58501: ST_TO_ADDR
// if sources then
58502: LD_VAR 0 5
58506: IFFALSE 58553
// for i = 1 to 3 do
58508: LD_ADDR_VAR 0 8
58512: PUSH
58513: DOUBLE
58514: LD_INT 1
58516: DEC
58517: ST_TO_ADDR
58518: LD_INT 3
58520: PUSH
58521: FOR_TO
58522: IFFALSE 58551
// AddResourceType ( base , i , sources [ i ] ) ;
58524: LD_VAR 0 15
58528: PPUSH
58529: LD_VAR 0 8
58533: PPUSH
58534: LD_VAR 0 5
58538: PUSH
58539: LD_VAR 0 8
58543: ARRAY
58544: PPUSH
58545: CALL_OW 276
58549: GO 58521
58551: POP
58552: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
58553: LD_ADDR_VAR 0 18
58557: PUSH
58558: LD_VAR 0 15
58562: PPUSH
58563: LD_VAR 0 2
58567: PPUSH
58568: LD_INT 1
58570: PPUSH
58571: CALL 57814 0 3
58575: ST_TO_ADDR
// InitHc ;
58576: CALL_OW 19
// InitUc ;
58580: CALL_OW 18
// uc_side := side ;
58584: LD_ADDR_OWVAR 20
58588: PUSH
58589: LD_VAR 0 16
58593: ST_TO_ADDR
// uc_nation := nation ;
58594: LD_ADDR_OWVAR 21
58598: PUSH
58599: LD_VAR 0 17
58603: ST_TO_ADDR
// if buildings then
58604: LD_VAR 0 18
58608: IFFALSE 59930
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
58610: LD_ADDR_VAR 0 19
58614: PUSH
58615: LD_VAR 0 18
58619: PPUSH
58620: LD_INT 2
58622: PUSH
58623: LD_INT 30
58625: PUSH
58626: LD_INT 29
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 30
58635: PUSH
58636: LD_INT 30
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: LIST
58647: PPUSH
58648: CALL_OW 72
58652: ST_TO_ADDR
// if tmp then
58653: LD_VAR 0 19
58657: IFFALSE 58705
// for i in tmp do
58659: LD_ADDR_VAR 0 8
58663: PUSH
58664: LD_VAR 0 19
58668: PUSH
58669: FOR_IN
58670: IFFALSE 58703
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
58672: LD_VAR 0 8
58676: PPUSH
58677: CALL_OW 250
58681: PPUSH
58682: LD_VAR 0 8
58686: PPUSH
58687: CALL_OW 251
58691: PPUSH
58692: LD_VAR 0 16
58696: PPUSH
58697: CALL_OW 441
58701: GO 58669
58703: POP
58704: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
58705: LD_VAR 0 18
58709: PPUSH
58710: LD_INT 2
58712: PUSH
58713: LD_INT 30
58715: PUSH
58716: LD_INT 32
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 30
58725: PUSH
58726: LD_INT 33
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: LIST
58737: PPUSH
58738: CALL_OW 72
58742: IFFALSE 58830
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
58744: LD_ADDR_VAR 0 8
58748: PUSH
58749: LD_VAR 0 18
58753: PPUSH
58754: LD_INT 2
58756: PUSH
58757: LD_INT 30
58759: PUSH
58760: LD_INT 32
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 30
58769: PUSH
58770: LD_INT 33
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: LIST
58781: PPUSH
58782: CALL_OW 72
58786: PUSH
58787: FOR_IN
58788: IFFALSE 58828
// begin if not GetBWeapon ( i ) then
58790: LD_VAR 0 8
58794: PPUSH
58795: CALL_OW 269
58799: NOT
58800: IFFALSE 58826
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
58802: LD_VAR 0 8
58806: PPUSH
58807: LD_VAR 0 8
58811: PPUSH
58812: LD_VAR 0 2
58816: PPUSH
58817: CALL 60076 0 2
58821: PPUSH
58822: CALL_OW 431
// end ;
58826: GO 58787
58828: POP
58829: POP
// end ; for i = 1 to personel do
58830: LD_ADDR_VAR 0 8
58834: PUSH
58835: DOUBLE
58836: LD_INT 1
58838: DEC
58839: ST_TO_ADDR
58840: LD_VAR 0 6
58844: PUSH
58845: FOR_TO
58846: IFFALSE 59910
// begin if i > 4 then
58848: LD_VAR 0 8
58852: PUSH
58853: LD_INT 4
58855: GREATER
58856: IFFALSE 58860
// break ;
58858: GO 59910
// case i of 1 :
58860: LD_VAR 0 8
58864: PUSH
58865: LD_INT 1
58867: DOUBLE
58868: EQUAL
58869: IFTRUE 58873
58871: GO 58953
58873: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
58874: LD_ADDR_VAR 0 12
58878: PUSH
58879: LD_VAR 0 18
58883: PPUSH
58884: LD_INT 22
58886: PUSH
58887: LD_VAR 0 16
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 58
58898: PUSH
58899: EMPTY
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: LD_INT 30
58907: PUSH
58908: LD_INT 32
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 30
58917: PUSH
58918: LD_INT 4
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 30
58927: PUSH
58928: LD_INT 5
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: LIST
58945: PPUSH
58946: CALL_OW 72
58950: ST_TO_ADDR
58951: GO 59175
58953: LD_INT 2
58955: DOUBLE
58956: EQUAL
58957: IFTRUE 58961
58959: GO 59023
58961: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
58962: LD_ADDR_VAR 0 12
58966: PUSH
58967: LD_VAR 0 18
58971: PPUSH
58972: LD_INT 22
58974: PUSH
58975: LD_VAR 0 16
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: LD_INT 30
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 30
58999: PUSH
59000: LD_INT 1
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: LIST
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PPUSH
59016: CALL_OW 72
59020: ST_TO_ADDR
59021: GO 59175
59023: LD_INT 3
59025: DOUBLE
59026: EQUAL
59027: IFTRUE 59031
59029: GO 59093
59031: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
59032: LD_ADDR_VAR 0 12
59036: PUSH
59037: LD_VAR 0 18
59041: PPUSH
59042: LD_INT 22
59044: PUSH
59045: LD_VAR 0 16
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: LD_INT 30
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 30
59069: PUSH
59070: LD_INT 3
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: LIST
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PPUSH
59086: CALL_OW 72
59090: ST_TO_ADDR
59091: GO 59175
59093: LD_INT 4
59095: DOUBLE
59096: EQUAL
59097: IFTRUE 59101
59099: GO 59174
59101: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
59102: LD_ADDR_VAR 0 12
59106: PUSH
59107: LD_VAR 0 18
59111: PPUSH
59112: LD_INT 22
59114: PUSH
59115: LD_VAR 0 16
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: LD_INT 30
59129: PUSH
59130: LD_INT 6
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 30
59139: PUSH
59140: LD_INT 7
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 30
59149: PUSH
59150: LD_INT 8
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PPUSH
59167: CALL_OW 72
59171: ST_TO_ADDR
59172: GO 59175
59174: POP
// if i = 1 then
59175: LD_VAR 0 8
59179: PUSH
59180: LD_INT 1
59182: EQUAL
59183: IFFALSE 59294
// begin tmp := [ ] ;
59185: LD_ADDR_VAR 0 19
59189: PUSH
59190: EMPTY
59191: ST_TO_ADDR
// for j in f do
59192: LD_ADDR_VAR 0 9
59196: PUSH
59197: LD_VAR 0 12
59201: PUSH
59202: FOR_IN
59203: IFFALSE 59276
// if GetBType ( j ) = b_bunker then
59205: LD_VAR 0 9
59209: PPUSH
59210: CALL_OW 266
59214: PUSH
59215: LD_INT 32
59217: EQUAL
59218: IFFALSE 59245
// tmp := Insert ( tmp , 1 , j ) else
59220: LD_ADDR_VAR 0 19
59224: PUSH
59225: LD_VAR 0 19
59229: PPUSH
59230: LD_INT 1
59232: PPUSH
59233: LD_VAR 0 9
59237: PPUSH
59238: CALL_OW 2
59242: ST_TO_ADDR
59243: GO 59274
// tmp := Insert ( tmp , tmp + 1 , j ) ;
59245: LD_ADDR_VAR 0 19
59249: PUSH
59250: LD_VAR 0 19
59254: PPUSH
59255: LD_VAR 0 19
59259: PUSH
59260: LD_INT 1
59262: PLUS
59263: PPUSH
59264: LD_VAR 0 9
59268: PPUSH
59269: CALL_OW 2
59273: ST_TO_ADDR
59274: GO 59202
59276: POP
59277: POP
// if tmp then
59278: LD_VAR 0 19
59282: IFFALSE 59294
// f := tmp ;
59284: LD_ADDR_VAR 0 12
59288: PUSH
59289: LD_VAR 0 19
59293: ST_TO_ADDR
// end ; x := personel [ i ] ;
59294: LD_ADDR_VAR 0 13
59298: PUSH
59299: LD_VAR 0 6
59303: PUSH
59304: LD_VAR 0 8
59308: ARRAY
59309: ST_TO_ADDR
// if x = - 1 then
59310: LD_VAR 0 13
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: EQUAL
59319: IFFALSE 59528
// begin for j in f do
59321: LD_ADDR_VAR 0 9
59325: PUSH
59326: LD_VAR 0 12
59330: PUSH
59331: FOR_IN
59332: IFFALSE 59524
// repeat InitHc ;
59334: CALL_OW 19
// if GetBType ( j ) = b_barracks then
59338: LD_VAR 0 9
59342: PPUSH
59343: CALL_OW 266
59347: PUSH
59348: LD_INT 5
59350: EQUAL
59351: IFFALSE 59421
// begin if UnitsInside ( j ) < 3 then
59353: LD_VAR 0 9
59357: PPUSH
59358: CALL_OW 313
59362: PUSH
59363: LD_INT 3
59365: LESS
59366: IFFALSE 59402
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59368: LD_INT 0
59370: PPUSH
59371: LD_INT 5
59373: PUSH
59374: LD_INT 8
59376: PUSH
59377: LD_INT 9
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: LIST
59384: PUSH
59385: LD_VAR 0 17
59389: ARRAY
59390: PPUSH
59391: LD_VAR 0 4
59395: PPUSH
59396: CALL_OW 380
59400: GO 59419
// PrepareHuman ( false , i , skill ) ;
59402: LD_INT 0
59404: PPUSH
59405: LD_VAR 0 8
59409: PPUSH
59410: LD_VAR 0 4
59414: PPUSH
59415: CALL_OW 380
// end else
59419: GO 59438
// PrepareHuman ( false , i , skill ) ;
59421: LD_INT 0
59423: PPUSH
59424: LD_VAR 0 8
59428: PPUSH
59429: LD_VAR 0 4
59433: PPUSH
59434: CALL_OW 380
// un := CreateHuman ;
59438: LD_ADDR_VAR 0 14
59442: PUSH
59443: CALL_OW 44
59447: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59448: LD_ADDR_VAR 0 7
59452: PUSH
59453: LD_VAR 0 7
59457: PPUSH
59458: LD_INT 1
59460: PPUSH
59461: LD_VAR 0 14
59465: PPUSH
59466: CALL_OW 2
59470: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
59471: LD_VAR 0 14
59475: PPUSH
59476: LD_VAR 0 9
59480: PPUSH
59481: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
59485: LD_VAR 0 9
59489: PPUSH
59490: CALL_OW 313
59494: PUSH
59495: LD_INT 6
59497: EQUAL
59498: PUSH
59499: LD_VAR 0 9
59503: PPUSH
59504: CALL_OW 266
59508: PUSH
59509: LD_INT 32
59511: PUSH
59512: LD_INT 31
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: IN
59519: OR
59520: IFFALSE 59334
59522: GO 59331
59524: POP
59525: POP
// end else
59526: GO 59908
// for j = 1 to x do
59528: LD_ADDR_VAR 0 9
59532: PUSH
59533: DOUBLE
59534: LD_INT 1
59536: DEC
59537: ST_TO_ADDR
59538: LD_VAR 0 13
59542: PUSH
59543: FOR_TO
59544: IFFALSE 59906
// begin InitHc ;
59546: CALL_OW 19
// if not f then
59550: LD_VAR 0 12
59554: NOT
59555: IFFALSE 59644
// begin PrepareHuman ( false , i , skill ) ;
59557: LD_INT 0
59559: PPUSH
59560: LD_VAR 0 8
59564: PPUSH
59565: LD_VAR 0 4
59569: PPUSH
59570: CALL_OW 380
// un := CreateHuman ;
59574: LD_ADDR_VAR 0 14
59578: PUSH
59579: CALL_OW 44
59583: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59584: LD_ADDR_VAR 0 7
59588: PUSH
59589: LD_VAR 0 7
59593: PPUSH
59594: LD_INT 1
59596: PPUSH
59597: LD_VAR 0 14
59601: PPUSH
59602: CALL_OW 2
59606: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59607: LD_VAR 0 14
59611: PPUSH
59612: LD_VAR 0 1
59616: PPUSH
59617: CALL_OW 250
59621: PPUSH
59622: LD_VAR 0 1
59626: PPUSH
59627: CALL_OW 251
59631: PPUSH
59632: LD_INT 10
59634: PPUSH
59635: LD_INT 0
59637: PPUSH
59638: CALL_OW 50
// continue ;
59642: GO 59543
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
59644: LD_VAR 0 12
59648: PUSH
59649: LD_INT 1
59651: ARRAY
59652: PPUSH
59653: CALL_OW 313
59657: PUSH
59658: LD_VAR 0 12
59662: PUSH
59663: LD_INT 1
59665: ARRAY
59666: PPUSH
59667: CALL_OW 266
59671: PUSH
59672: LD_INT 32
59674: PUSH
59675: LD_INT 31
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: IN
59682: AND
59683: PUSH
59684: LD_VAR 0 12
59688: PUSH
59689: LD_INT 1
59691: ARRAY
59692: PPUSH
59693: CALL_OW 313
59697: PUSH
59698: LD_INT 6
59700: EQUAL
59701: OR
59702: IFFALSE 59722
// f := Delete ( f , 1 ) ;
59704: LD_ADDR_VAR 0 12
59708: PUSH
59709: LD_VAR 0 12
59713: PPUSH
59714: LD_INT 1
59716: PPUSH
59717: CALL_OW 3
59721: ST_TO_ADDR
// if not f then
59722: LD_VAR 0 12
59726: NOT
59727: IFFALSE 59745
// begin x := x + 2 ;
59729: LD_ADDR_VAR 0 13
59733: PUSH
59734: LD_VAR 0 13
59738: PUSH
59739: LD_INT 2
59741: PLUS
59742: ST_TO_ADDR
// continue ;
59743: GO 59543
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
59745: LD_VAR 0 12
59749: PUSH
59750: LD_INT 1
59752: ARRAY
59753: PPUSH
59754: CALL_OW 266
59758: PUSH
59759: LD_INT 5
59761: EQUAL
59762: IFFALSE 59836
// begin if UnitsInside ( f [ 1 ] ) < 3 then
59764: LD_VAR 0 12
59768: PUSH
59769: LD_INT 1
59771: ARRAY
59772: PPUSH
59773: CALL_OW 313
59777: PUSH
59778: LD_INT 3
59780: LESS
59781: IFFALSE 59817
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59783: LD_INT 0
59785: PPUSH
59786: LD_INT 5
59788: PUSH
59789: LD_INT 8
59791: PUSH
59792: LD_INT 9
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: LIST
59799: PUSH
59800: LD_VAR 0 17
59804: ARRAY
59805: PPUSH
59806: LD_VAR 0 4
59810: PPUSH
59811: CALL_OW 380
59815: GO 59834
// PrepareHuman ( false , i , skill ) ;
59817: LD_INT 0
59819: PPUSH
59820: LD_VAR 0 8
59824: PPUSH
59825: LD_VAR 0 4
59829: PPUSH
59830: CALL_OW 380
// end else
59834: GO 59853
// PrepareHuman ( false , i , skill ) ;
59836: LD_INT 0
59838: PPUSH
59839: LD_VAR 0 8
59843: PPUSH
59844: LD_VAR 0 4
59848: PPUSH
59849: CALL_OW 380
// un := CreateHuman ;
59853: LD_ADDR_VAR 0 14
59857: PUSH
59858: CALL_OW 44
59862: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59863: LD_ADDR_VAR 0 7
59867: PUSH
59868: LD_VAR 0 7
59872: PPUSH
59873: LD_INT 1
59875: PPUSH
59876: LD_VAR 0 14
59880: PPUSH
59881: CALL_OW 2
59885: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
59886: LD_VAR 0 14
59890: PPUSH
59891: LD_VAR 0 12
59895: PUSH
59896: LD_INT 1
59898: ARRAY
59899: PPUSH
59900: CALL_OW 52
// end ;
59904: GO 59543
59906: POP
59907: POP
// end ;
59908: GO 58845
59910: POP
59911: POP
// result := result ^ buildings ;
59912: LD_ADDR_VAR 0 7
59916: PUSH
59917: LD_VAR 0 7
59921: PUSH
59922: LD_VAR 0 18
59926: ADD
59927: ST_TO_ADDR
// end else
59928: GO 60071
// begin for i = 1 to personel do
59930: LD_ADDR_VAR 0 8
59934: PUSH
59935: DOUBLE
59936: LD_INT 1
59938: DEC
59939: ST_TO_ADDR
59940: LD_VAR 0 6
59944: PUSH
59945: FOR_TO
59946: IFFALSE 60069
// begin if i > 4 then
59948: LD_VAR 0 8
59952: PUSH
59953: LD_INT 4
59955: GREATER
59956: IFFALSE 59960
// break ;
59958: GO 60069
// x := personel [ i ] ;
59960: LD_ADDR_VAR 0 13
59964: PUSH
59965: LD_VAR 0 6
59969: PUSH
59970: LD_VAR 0 8
59974: ARRAY
59975: ST_TO_ADDR
// if x = - 1 then
59976: LD_VAR 0 13
59980: PUSH
59981: LD_INT 1
59983: NEG
59984: EQUAL
59985: IFFALSE 59989
// continue ;
59987: GO 59945
// PrepareHuman ( false , i , skill ) ;
59989: LD_INT 0
59991: PPUSH
59992: LD_VAR 0 8
59996: PPUSH
59997: LD_VAR 0 4
60001: PPUSH
60002: CALL_OW 380
// un := CreateHuman ;
60006: LD_ADDR_VAR 0 14
60010: PUSH
60011: CALL_OW 44
60015: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
60016: LD_VAR 0 14
60020: PPUSH
60021: LD_VAR 0 1
60025: PPUSH
60026: CALL_OW 250
60030: PPUSH
60031: LD_VAR 0 1
60035: PPUSH
60036: CALL_OW 251
60040: PPUSH
60041: LD_INT 10
60043: PPUSH
60044: LD_INT 0
60046: PPUSH
60047: CALL_OW 50
// result := result ^ un ;
60051: LD_ADDR_VAR 0 7
60055: PUSH
60056: LD_VAR 0 7
60060: PUSH
60061: LD_VAR 0 14
60065: ADD
60066: ST_TO_ADDR
// end ;
60067: GO 59945
60069: POP
60070: POP
// end ; end ;
60071: LD_VAR 0 7
60075: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
60076: LD_INT 0
60078: PPUSH
60079: PPUSH
60080: PPUSH
60081: PPUSH
60082: PPUSH
60083: PPUSH
60084: PPUSH
60085: PPUSH
60086: PPUSH
60087: PPUSH
60088: PPUSH
60089: PPUSH
60090: PPUSH
60091: PPUSH
60092: PPUSH
60093: PPUSH
// result := false ;
60094: LD_ADDR_VAR 0 3
60098: PUSH
60099: LD_INT 0
60101: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
60102: LD_VAR 0 1
60106: NOT
60107: PUSH
60108: LD_VAR 0 1
60112: PPUSH
60113: CALL_OW 266
60117: PUSH
60118: LD_INT 32
60120: PUSH
60121: LD_INT 33
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: IN
60128: NOT
60129: OR
60130: IFFALSE 60134
// exit ;
60132: GO 61243
// nat := GetNation ( tower ) ;
60134: LD_ADDR_VAR 0 12
60138: PUSH
60139: LD_VAR 0 1
60143: PPUSH
60144: CALL_OW 248
60148: ST_TO_ADDR
// side := GetSide ( tower ) ;
60149: LD_ADDR_VAR 0 16
60153: PUSH
60154: LD_VAR 0 1
60158: PPUSH
60159: CALL_OW 255
60163: ST_TO_ADDR
// x := GetX ( tower ) ;
60164: LD_ADDR_VAR 0 10
60168: PUSH
60169: LD_VAR 0 1
60173: PPUSH
60174: CALL_OW 250
60178: ST_TO_ADDR
// y := GetY ( tower ) ;
60179: LD_ADDR_VAR 0 11
60183: PUSH
60184: LD_VAR 0 1
60188: PPUSH
60189: CALL_OW 251
60193: ST_TO_ADDR
// if not x or not y then
60194: LD_VAR 0 10
60198: NOT
60199: PUSH
60200: LD_VAR 0 11
60204: NOT
60205: OR
60206: IFFALSE 60210
// exit ;
60208: GO 61243
// weapon := 0 ;
60210: LD_ADDR_VAR 0 18
60214: PUSH
60215: LD_INT 0
60217: ST_TO_ADDR
// fac_list := [ ] ;
60218: LD_ADDR_VAR 0 17
60222: PUSH
60223: EMPTY
60224: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
60225: LD_ADDR_VAR 0 6
60229: PUSH
60230: LD_VAR 0 1
60234: PPUSH
60235: CALL_OW 274
60239: PPUSH
60240: LD_VAR 0 2
60244: PPUSH
60245: LD_INT 0
60247: PPUSH
60248: CALL 57814 0 3
60252: PPUSH
60253: LD_INT 30
60255: PUSH
60256: LD_INT 3
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PPUSH
60263: CALL_OW 72
60267: ST_TO_ADDR
// if not factories then
60268: LD_VAR 0 6
60272: NOT
60273: IFFALSE 60277
// exit ;
60275: GO 61243
// for i in factories do
60277: LD_ADDR_VAR 0 8
60281: PUSH
60282: LD_VAR 0 6
60286: PUSH
60287: FOR_IN
60288: IFFALSE 60313
// fac_list := fac_list union AvailableWeaponList ( i ) ;
60290: LD_ADDR_VAR 0 17
60294: PUSH
60295: LD_VAR 0 17
60299: PUSH
60300: LD_VAR 0 8
60304: PPUSH
60305: CALL_OW 478
60309: UNION
60310: ST_TO_ADDR
60311: GO 60287
60313: POP
60314: POP
// if not fac_list then
60315: LD_VAR 0 17
60319: NOT
60320: IFFALSE 60324
// exit ;
60322: GO 61243
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
60324: LD_ADDR_VAR 0 5
60328: PUSH
60329: LD_INT 4
60331: PUSH
60332: LD_INT 5
60334: PUSH
60335: LD_INT 9
60337: PUSH
60338: LD_INT 10
60340: PUSH
60341: LD_INT 6
60343: PUSH
60344: LD_INT 7
60346: PUSH
60347: LD_INT 11
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 27
60361: PUSH
60362: LD_INT 28
60364: PUSH
60365: LD_INT 26
60367: PUSH
60368: LD_INT 30
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 43
60379: PUSH
60380: LD_INT 44
60382: PUSH
60383: LD_INT 46
60385: PUSH
60386: LD_INT 45
60388: PUSH
60389: LD_INT 47
60391: PUSH
60392: LD_INT 49
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: LIST
60407: PUSH
60408: LD_VAR 0 12
60412: ARRAY
60413: ST_TO_ADDR
// list := list isect fac_list ;
60414: LD_ADDR_VAR 0 5
60418: PUSH
60419: LD_VAR 0 5
60423: PUSH
60424: LD_VAR 0 17
60428: ISECT
60429: ST_TO_ADDR
// if not list then
60430: LD_VAR 0 5
60434: NOT
60435: IFFALSE 60439
// exit ;
60437: GO 61243
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
60439: LD_VAR 0 12
60443: PUSH
60444: LD_INT 3
60446: EQUAL
60447: PUSH
60448: LD_INT 49
60450: PUSH
60451: LD_VAR 0 5
60455: IN
60456: AND
60457: PUSH
60458: LD_INT 31
60460: PPUSH
60461: LD_VAR 0 16
60465: PPUSH
60466: CALL_OW 321
60470: PUSH
60471: LD_INT 2
60473: EQUAL
60474: AND
60475: IFFALSE 60535
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
60477: LD_INT 22
60479: PUSH
60480: LD_VAR 0 16
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 35
60491: PUSH
60492: LD_INT 49
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 91
60501: PUSH
60502: LD_VAR 0 1
60506: PUSH
60507: LD_INT 10
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: LIST
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: LIST
60519: PPUSH
60520: CALL_OW 69
60524: NOT
60525: IFFALSE 60535
// weapon := ru_time_lapser ;
60527: LD_ADDR_VAR 0 18
60531: PUSH
60532: LD_INT 49
60534: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
60535: LD_VAR 0 12
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: LD_INT 2
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: IN
60550: PUSH
60551: LD_INT 11
60553: PUSH
60554: LD_VAR 0 5
60558: IN
60559: PUSH
60560: LD_INT 30
60562: PUSH
60563: LD_VAR 0 5
60567: IN
60568: OR
60569: AND
60570: PUSH
60571: LD_INT 6
60573: PPUSH
60574: LD_VAR 0 16
60578: PPUSH
60579: CALL_OW 321
60583: PUSH
60584: LD_INT 2
60586: EQUAL
60587: AND
60588: IFFALSE 60753
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
60590: LD_INT 22
60592: PUSH
60593: LD_VAR 0 16
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 2
60604: PUSH
60605: LD_INT 35
60607: PUSH
60608: LD_INT 11
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 35
60617: PUSH
60618: LD_INT 30
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 91
60632: PUSH
60633: LD_VAR 0 1
60637: PUSH
60638: LD_INT 18
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: LIST
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: LIST
60650: PPUSH
60651: CALL_OW 69
60655: NOT
60656: PUSH
60657: LD_INT 22
60659: PUSH
60660: LD_VAR 0 16
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 2
60671: PUSH
60672: LD_INT 30
60674: PUSH
60675: LD_INT 32
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 30
60684: PUSH
60685: LD_INT 33
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 91
60699: PUSH
60700: LD_VAR 0 1
60704: PUSH
60705: LD_INT 12
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: LIST
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: LIST
60717: PUSH
60718: EMPTY
60719: LIST
60720: PPUSH
60721: CALL_OW 69
60725: PUSH
60726: LD_INT 2
60728: GREATER
60729: AND
60730: IFFALSE 60753
// weapon := [ us_radar , ar_radar ] [ nat ] ;
60732: LD_ADDR_VAR 0 18
60736: PUSH
60737: LD_INT 11
60739: PUSH
60740: LD_INT 30
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_VAR 0 12
60751: ARRAY
60752: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
60753: LD_VAR 0 18
60757: NOT
60758: PUSH
60759: LD_INT 40
60761: PPUSH
60762: LD_VAR 0 16
60766: PPUSH
60767: CALL_OW 321
60771: PUSH
60772: LD_INT 2
60774: EQUAL
60775: AND
60776: PUSH
60777: LD_INT 7
60779: PUSH
60780: LD_VAR 0 5
60784: IN
60785: PUSH
60786: LD_INT 28
60788: PUSH
60789: LD_VAR 0 5
60793: IN
60794: OR
60795: PUSH
60796: LD_INT 45
60798: PUSH
60799: LD_VAR 0 5
60803: IN
60804: OR
60805: AND
60806: IFFALSE 61060
// begin hex := GetHexInfo ( x , y ) ;
60808: LD_ADDR_VAR 0 4
60812: PUSH
60813: LD_VAR 0 10
60817: PPUSH
60818: LD_VAR 0 11
60822: PPUSH
60823: CALL_OW 546
60827: ST_TO_ADDR
// if hex [ 1 ] then
60828: LD_VAR 0 4
60832: PUSH
60833: LD_INT 1
60835: ARRAY
60836: IFFALSE 60840
// exit ;
60838: GO 61243
// height := hex [ 2 ] ;
60840: LD_ADDR_VAR 0 15
60844: PUSH
60845: LD_VAR 0 4
60849: PUSH
60850: LD_INT 2
60852: ARRAY
60853: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
60854: LD_ADDR_VAR 0 14
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: LD_INT 2
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: LD_INT 5
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: ST_TO_ADDR
// for i in tmp do
60877: LD_ADDR_VAR 0 8
60881: PUSH
60882: LD_VAR 0 14
60886: PUSH
60887: FOR_IN
60888: IFFALSE 61058
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
60890: LD_ADDR_VAR 0 9
60894: PUSH
60895: LD_VAR 0 10
60899: PPUSH
60900: LD_VAR 0 8
60904: PPUSH
60905: LD_INT 5
60907: PPUSH
60908: CALL_OW 272
60912: PUSH
60913: LD_VAR 0 11
60917: PPUSH
60918: LD_VAR 0 8
60922: PPUSH
60923: LD_INT 5
60925: PPUSH
60926: CALL_OW 273
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
60935: LD_VAR 0 9
60939: PUSH
60940: LD_INT 1
60942: ARRAY
60943: PPUSH
60944: LD_VAR 0 9
60948: PUSH
60949: LD_INT 2
60951: ARRAY
60952: PPUSH
60953: CALL_OW 488
60957: IFFALSE 61056
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
60959: LD_ADDR_VAR 0 4
60963: PUSH
60964: LD_VAR 0 9
60968: PUSH
60969: LD_INT 1
60971: ARRAY
60972: PPUSH
60973: LD_VAR 0 9
60977: PUSH
60978: LD_INT 2
60980: ARRAY
60981: PPUSH
60982: CALL_OW 546
60986: ST_TO_ADDR
// if hex [ 1 ] then
60987: LD_VAR 0 4
60991: PUSH
60992: LD_INT 1
60994: ARRAY
60995: IFFALSE 60999
// continue ;
60997: GO 60887
// h := hex [ 2 ] ;
60999: LD_ADDR_VAR 0 13
61003: PUSH
61004: LD_VAR 0 4
61008: PUSH
61009: LD_INT 2
61011: ARRAY
61012: ST_TO_ADDR
// if h + 7 < height then
61013: LD_VAR 0 13
61017: PUSH
61018: LD_INT 7
61020: PLUS
61021: PUSH
61022: LD_VAR 0 15
61026: LESS
61027: IFFALSE 61056
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
61029: LD_ADDR_VAR 0 18
61033: PUSH
61034: LD_INT 7
61036: PUSH
61037: LD_INT 28
61039: PUSH
61040: LD_INT 45
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: LIST
61047: PUSH
61048: LD_VAR 0 12
61052: ARRAY
61053: ST_TO_ADDR
// break ;
61054: GO 61058
// end ; end ; end ;
61056: GO 60887
61058: POP
61059: POP
// end ; if not weapon then
61060: LD_VAR 0 18
61064: NOT
61065: IFFALSE 61125
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
61067: LD_ADDR_VAR 0 5
61071: PUSH
61072: LD_VAR 0 5
61076: PUSH
61077: LD_INT 11
61079: PUSH
61080: LD_INT 30
61082: PUSH
61083: LD_INT 49
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: LIST
61090: DIFF
61091: ST_TO_ADDR
// if not list then
61092: LD_VAR 0 5
61096: NOT
61097: IFFALSE 61101
// exit ;
61099: GO 61243
// weapon := list [ rand ( 1 , list ) ] ;
61101: LD_ADDR_VAR 0 18
61105: PUSH
61106: LD_VAR 0 5
61110: PUSH
61111: LD_INT 1
61113: PPUSH
61114: LD_VAR 0 5
61118: PPUSH
61119: CALL_OW 12
61123: ARRAY
61124: ST_TO_ADDR
// end ; if weapon then
61125: LD_VAR 0 18
61129: IFFALSE 61243
// begin tmp := CostOfWeapon ( weapon ) ;
61131: LD_ADDR_VAR 0 14
61135: PUSH
61136: LD_VAR 0 18
61140: PPUSH
61141: CALL_OW 451
61145: ST_TO_ADDR
// j := GetBase ( tower ) ;
61146: LD_ADDR_VAR 0 9
61150: PUSH
61151: LD_VAR 0 1
61155: PPUSH
61156: CALL_OW 274
61160: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
61161: LD_VAR 0 9
61165: PPUSH
61166: LD_INT 1
61168: PPUSH
61169: CALL_OW 275
61173: PUSH
61174: LD_VAR 0 14
61178: PUSH
61179: LD_INT 1
61181: ARRAY
61182: GREATEREQUAL
61183: PUSH
61184: LD_VAR 0 9
61188: PPUSH
61189: LD_INT 2
61191: PPUSH
61192: CALL_OW 275
61196: PUSH
61197: LD_VAR 0 14
61201: PUSH
61202: LD_INT 2
61204: ARRAY
61205: GREATEREQUAL
61206: AND
61207: PUSH
61208: LD_VAR 0 9
61212: PPUSH
61213: LD_INT 3
61215: PPUSH
61216: CALL_OW 275
61220: PUSH
61221: LD_VAR 0 14
61225: PUSH
61226: LD_INT 3
61228: ARRAY
61229: GREATEREQUAL
61230: AND
61231: IFFALSE 61243
// result := weapon ;
61233: LD_ADDR_VAR 0 3
61237: PUSH
61238: LD_VAR 0 18
61242: ST_TO_ADDR
// end ; end ;
61243: LD_VAR 0 3
61247: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
61248: LD_INT 0
61250: PPUSH
61251: PPUSH
// result := true ;
61252: LD_ADDR_VAR 0 3
61256: PUSH
61257: LD_INT 1
61259: ST_TO_ADDR
// if array1 = array2 then
61260: LD_VAR 0 1
61264: PUSH
61265: LD_VAR 0 2
61269: EQUAL
61270: IFFALSE 61330
// begin for i = 1 to array1 do
61272: LD_ADDR_VAR 0 4
61276: PUSH
61277: DOUBLE
61278: LD_INT 1
61280: DEC
61281: ST_TO_ADDR
61282: LD_VAR 0 1
61286: PUSH
61287: FOR_TO
61288: IFFALSE 61326
// if array1 [ i ] <> array2 [ i ] then
61290: LD_VAR 0 1
61294: PUSH
61295: LD_VAR 0 4
61299: ARRAY
61300: PUSH
61301: LD_VAR 0 2
61305: PUSH
61306: LD_VAR 0 4
61310: ARRAY
61311: NONEQUAL
61312: IFFALSE 61324
// begin result := false ;
61314: LD_ADDR_VAR 0 3
61318: PUSH
61319: LD_INT 0
61321: ST_TO_ADDR
// break ;
61322: GO 61326
// end ;
61324: GO 61287
61326: POP
61327: POP
// end else
61328: GO 61338
// result := false ;
61330: LD_ADDR_VAR 0 3
61334: PUSH
61335: LD_INT 0
61337: ST_TO_ADDR
// end ;
61338: LD_VAR 0 3
61342: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
61343: LD_INT 0
61345: PPUSH
61346: PPUSH
// if not array1 or not array2 then
61347: LD_VAR 0 1
61351: NOT
61352: PUSH
61353: LD_VAR 0 2
61357: NOT
61358: OR
61359: IFFALSE 61363
// exit ;
61361: GO 61427
// result := true ;
61363: LD_ADDR_VAR 0 3
61367: PUSH
61368: LD_INT 1
61370: ST_TO_ADDR
// for i = 1 to array1 do
61371: LD_ADDR_VAR 0 4
61375: PUSH
61376: DOUBLE
61377: LD_INT 1
61379: DEC
61380: ST_TO_ADDR
61381: LD_VAR 0 1
61385: PUSH
61386: FOR_TO
61387: IFFALSE 61425
// if array1 [ i ] <> array2 [ i ] then
61389: LD_VAR 0 1
61393: PUSH
61394: LD_VAR 0 4
61398: ARRAY
61399: PUSH
61400: LD_VAR 0 2
61404: PUSH
61405: LD_VAR 0 4
61409: ARRAY
61410: NONEQUAL
61411: IFFALSE 61423
// begin result := false ;
61413: LD_ADDR_VAR 0 3
61417: PUSH
61418: LD_INT 0
61420: ST_TO_ADDR
// break ;
61421: GO 61425
// end ;
61423: GO 61386
61425: POP
61426: POP
// end ;
61427: LD_VAR 0 3
61431: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
61432: LD_INT 0
61434: PPUSH
61435: PPUSH
61436: PPUSH
// pom := GetBase ( fac ) ;
61437: LD_ADDR_VAR 0 5
61441: PUSH
61442: LD_VAR 0 1
61446: PPUSH
61447: CALL_OW 274
61451: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
61452: LD_ADDR_VAR 0 4
61456: PUSH
61457: LD_VAR 0 2
61461: PUSH
61462: LD_INT 1
61464: ARRAY
61465: PPUSH
61466: LD_VAR 0 2
61470: PUSH
61471: LD_INT 2
61473: ARRAY
61474: PPUSH
61475: LD_VAR 0 2
61479: PUSH
61480: LD_INT 3
61482: ARRAY
61483: PPUSH
61484: LD_VAR 0 2
61488: PUSH
61489: LD_INT 4
61491: ARRAY
61492: PPUSH
61493: CALL_OW 449
61497: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61498: LD_ADDR_VAR 0 3
61502: PUSH
61503: LD_VAR 0 5
61507: PPUSH
61508: LD_INT 1
61510: PPUSH
61511: CALL_OW 275
61515: PUSH
61516: LD_VAR 0 4
61520: PUSH
61521: LD_INT 1
61523: ARRAY
61524: GREATEREQUAL
61525: PUSH
61526: LD_VAR 0 5
61530: PPUSH
61531: LD_INT 2
61533: PPUSH
61534: CALL_OW 275
61538: PUSH
61539: LD_VAR 0 4
61543: PUSH
61544: LD_INT 2
61546: ARRAY
61547: GREATEREQUAL
61548: AND
61549: PUSH
61550: LD_VAR 0 5
61554: PPUSH
61555: LD_INT 3
61557: PPUSH
61558: CALL_OW 275
61562: PUSH
61563: LD_VAR 0 4
61567: PUSH
61568: LD_INT 3
61570: ARRAY
61571: GREATEREQUAL
61572: AND
61573: ST_TO_ADDR
// end ;
61574: LD_VAR 0 3
61578: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
61579: LD_INT 0
61581: PPUSH
61582: PPUSH
61583: PPUSH
61584: PPUSH
// pom := GetBase ( building ) ;
61585: LD_ADDR_VAR 0 3
61589: PUSH
61590: LD_VAR 0 1
61594: PPUSH
61595: CALL_OW 274
61599: ST_TO_ADDR
// if not pom then
61600: LD_VAR 0 3
61604: NOT
61605: IFFALSE 61609
// exit ;
61607: GO 61779
// btype := GetBType ( building ) ;
61609: LD_ADDR_VAR 0 5
61613: PUSH
61614: LD_VAR 0 1
61618: PPUSH
61619: CALL_OW 266
61623: ST_TO_ADDR
// if btype = b_armoury then
61624: LD_VAR 0 5
61628: PUSH
61629: LD_INT 4
61631: EQUAL
61632: IFFALSE 61642
// btype := b_barracks ;
61634: LD_ADDR_VAR 0 5
61638: PUSH
61639: LD_INT 5
61641: ST_TO_ADDR
// if btype = b_depot then
61642: LD_VAR 0 5
61646: PUSH
61647: LD_INT 0
61649: EQUAL
61650: IFFALSE 61660
// btype := b_warehouse ;
61652: LD_ADDR_VAR 0 5
61656: PUSH
61657: LD_INT 1
61659: ST_TO_ADDR
// if btype = b_workshop then
61660: LD_VAR 0 5
61664: PUSH
61665: LD_INT 2
61667: EQUAL
61668: IFFALSE 61678
// btype := b_factory ;
61670: LD_ADDR_VAR 0 5
61674: PUSH
61675: LD_INT 3
61677: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61678: LD_ADDR_VAR 0 4
61682: PUSH
61683: LD_VAR 0 5
61687: PPUSH
61688: LD_VAR 0 1
61692: PPUSH
61693: CALL_OW 248
61697: PPUSH
61698: CALL_OW 450
61702: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61703: LD_ADDR_VAR 0 2
61707: PUSH
61708: LD_VAR 0 3
61712: PPUSH
61713: LD_INT 1
61715: PPUSH
61716: CALL_OW 275
61720: PUSH
61721: LD_VAR 0 4
61725: PUSH
61726: LD_INT 1
61728: ARRAY
61729: GREATEREQUAL
61730: PUSH
61731: LD_VAR 0 3
61735: PPUSH
61736: LD_INT 2
61738: PPUSH
61739: CALL_OW 275
61743: PUSH
61744: LD_VAR 0 4
61748: PUSH
61749: LD_INT 2
61751: ARRAY
61752: GREATEREQUAL
61753: AND
61754: PUSH
61755: LD_VAR 0 3
61759: PPUSH
61760: LD_INT 3
61762: PPUSH
61763: CALL_OW 275
61767: PUSH
61768: LD_VAR 0 4
61772: PUSH
61773: LD_INT 3
61775: ARRAY
61776: GREATEREQUAL
61777: AND
61778: ST_TO_ADDR
// end ;
61779: LD_VAR 0 2
61783: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
61784: LD_INT 0
61786: PPUSH
61787: PPUSH
61788: PPUSH
// pom := GetBase ( building ) ;
61789: LD_ADDR_VAR 0 4
61793: PUSH
61794: LD_VAR 0 1
61798: PPUSH
61799: CALL_OW 274
61803: ST_TO_ADDR
// if not pom then
61804: LD_VAR 0 4
61808: NOT
61809: IFFALSE 61813
// exit ;
61811: GO 61914
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61813: LD_ADDR_VAR 0 5
61817: PUSH
61818: LD_VAR 0 2
61822: PPUSH
61823: LD_VAR 0 1
61827: PPUSH
61828: CALL_OW 248
61832: PPUSH
61833: CALL_OW 450
61837: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61838: LD_ADDR_VAR 0 3
61842: PUSH
61843: LD_VAR 0 4
61847: PPUSH
61848: LD_INT 1
61850: PPUSH
61851: CALL_OW 275
61855: PUSH
61856: LD_VAR 0 5
61860: PUSH
61861: LD_INT 1
61863: ARRAY
61864: GREATEREQUAL
61865: PUSH
61866: LD_VAR 0 4
61870: PPUSH
61871: LD_INT 2
61873: PPUSH
61874: CALL_OW 275
61878: PUSH
61879: LD_VAR 0 5
61883: PUSH
61884: LD_INT 2
61886: ARRAY
61887: GREATEREQUAL
61888: AND
61889: PUSH
61890: LD_VAR 0 4
61894: PPUSH
61895: LD_INT 3
61897: PPUSH
61898: CALL_OW 275
61902: PUSH
61903: LD_VAR 0 5
61907: PUSH
61908: LD_INT 3
61910: ARRAY
61911: GREATEREQUAL
61912: AND
61913: ST_TO_ADDR
// end ;
61914: LD_VAR 0 3
61918: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
61919: LD_INT 0
61921: PPUSH
61922: PPUSH
61923: PPUSH
61924: PPUSH
61925: PPUSH
61926: PPUSH
61927: PPUSH
61928: PPUSH
61929: PPUSH
61930: PPUSH
61931: PPUSH
// result := false ;
61932: LD_ADDR_VAR 0 8
61936: PUSH
61937: LD_INT 0
61939: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
61940: LD_VAR 0 5
61944: NOT
61945: PUSH
61946: LD_VAR 0 1
61950: NOT
61951: OR
61952: PUSH
61953: LD_VAR 0 2
61957: NOT
61958: OR
61959: PUSH
61960: LD_VAR 0 3
61964: NOT
61965: OR
61966: IFFALSE 61970
// exit ;
61968: GO 62784
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
61970: LD_ADDR_VAR 0 14
61974: PUSH
61975: LD_VAR 0 1
61979: PPUSH
61980: LD_VAR 0 2
61984: PPUSH
61985: LD_VAR 0 3
61989: PPUSH
61990: LD_VAR 0 4
61994: PPUSH
61995: LD_VAR 0 5
61999: PUSH
62000: LD_INT 1
62002: ARRAY
62003: PPUSH
62004: CALL_OW 248
62008: PPUSH
62009: LD_INT 0
62011: PPUSH
62012: CALL 64017 0 6
62016: ST_TO_ADDR
// if not hexes then
62017: LD_VAR 0 14
62021: NOT
62022: IFFALSE 62026
// exit ;
62024: GO 62784
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62026: LD_ADDR_VAR 0 17
62030: PUSH
62031: LD_VAR 0 5
62035: PPUSH
62036: LD_INT 22
62038: PUSH
62039: LD_VAR 0 13
62043: PPUSH
62044: CALL_OW 255
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 2
62055: PUSH
62056: LD_INT 30
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 30
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: LIST
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PPUSH
62085: CALL_OW 72
62089: ST_TO_ADDR
// for i = 1 to hexes do
62090: LD_ADDR_VAR 0 9
62094: PUSH
62095: DOUBLE
62096: LD_INT 1
62098: DEC
62099: ST_TO_ADDR
62100: LD_VAR 0 14
62104: PUSH
62105: FOR_TO
62106: IFFALSE 62782
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62108: LD_ADDR_VAR 0 13
62112: PUSH
62113: LD_VAR 0 14
62117: PUSH
62118: LD_VAR 0 9
62122: ARRAY
62123: PUSH
62124: LD_INT 1
62126: ARRAY
62127: PPUSH
62128: LD_VAR 0 14
62132: PUSH
62133: LD_VAR 0 9
62137: ARRAY
62138: PUSH
62139: LD_INT 2
62141: ARRAY
62142: PPUSH
62143: CALL_OW 428
62147: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
62148: LD_VAR 0 14
62152: PUSH
62153: LD_VAR 0 9
62157: ARRAY
62158: PUSH
62159: LD_INT 1
62161: ARRAY
62162: PPUSH
62163: LD_VAR 0 14
62167: PUSH
62168: LD_VAR 0 9
62172: ARRAY
62173: PUSH
62174: LD_INT 2
62176: ARRAY
62177: PPUSH
62178: CALL_OW 351
62182: PUSH
62183: LD_VAR 0 14
62187: PUSH
62188: LD_VAR 0 9
62192: ARRAY
62193: PUSH
62194: LD_INT 1
62196: ARRAY
62197: PPUSH
62198: LD_VAR 0 14
62202: PUSH
62203: LD_VAR 0 9
62207: ARRAY
62208: PUSH
62209: LD_INT 2
62211: ARRAY
62212: PPUSH
62213: CALL_OW 488
62217: NOT
62218: OR
62219: PUSH
62220: LD_VAR 0 13
62224: PPUSH
62225: CALL_OW 247
62229: PUSH
62230: LD_INT 3
62232: EQUAL
62233: OR
62234: IFFALSE 62240
// exit ;
62236: POP
62237: POP
62238: GO 62784
// if not tmp then
62240: LD_VAR 0 13
62244: NOT
62245: IFFALSE 62249
// continue ;
62247: GO 62105
// result := true ;
62249: LD_ADDR_VAR 0 8
62253: PUSH
62254: LD_INT 1
62256: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
62257: LD_VAR 0 6
62261: PUSH
62262: LD_VAR 0 13
62266: PPUSH
62267: CALL_OW 247
62271: PUSH
62272: LD_INT 2
62274: EQUAL
62275: AND
62276: PUSH
62277: LD_VAR 0 13
62281: PPUSH
62282: CALL_OW 263
62286: PUSH
62287: LD_INT 1
62289: EQUAL
62290: AND
62291: IFFALSE 62455
// begin if IsDrivenBy ( tmp ) then
62293: LD_VAR 0 13
62297: PPUSH
62298: CALL_OW 311
62302: IFFALSE 62306
// continue ;
62304: GO 62105
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
62306: LD_VAR 0 6
62310: PPUSH
62311: LD_INT 3
62313: PUSH
62314: LD_INT 60
62316: PUSH
62317: EMPTY
62318: LIST
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 3
62326: PUSH
62327: LD_INT 55
62329: PUSH
62330: EMPTY
62331: LIST
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PPUSH
62341: CALL_OW 72
62345: IFFALSE 62453
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
62347: LD_ADDR_VAR 0 18
62351: PUSH
62352: LD_VAR 0 6
62356: PPUSH
62357: LD_INT 3
62359: PUSH
62360: LD_INT 60
62362: PUSH
62363: EMPTY
62364: LIST
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 3
62372: PUSH
62373: LD_INT 55
62375: PUSH
62376: EMPTY
62377: LIST
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PPUSH
62387: CALL_OW 72
62391: PUSH
62392: LD_INT 1
62394: ARRAY
62395: ST_TO_ADDR
// if IsInUnit ( driver ) then
62396: LD_VAR 0 18
62400: PPUSH
62401: CALL_OW 310
62405: IFFALSE 62416
// ComExit ( driver ) ;
62407: LD_VAR 0 18
62411: PPUSH
62412: CALL 87778 0 1
// AddComEnterUnit ( driver , tmp ) ;
62416: LD_VAR 0 18
62420: PPUSH
62421: LD_VAR 0 13
62425: PPUSH
62426: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
62430: LD_VAR 0 18
62434: PPUSH
62435: LD_VAR 0 7
62439: PPUSH
62440: CALL_OW 173
// AddComExitVehicle ( driver ) ;
62444: LD_VAR 0 18
62448: PPUSH
62449: CALL_OW 181
// end ; continue ;
62453: GO 62105
// end ; if not cleaners or not tmp in cleaners then
62455: LD_VAR 0 6
62459: NOT
62460: PUSH
62461: LD_VAR 0 13
62465: PUSH
62466: LD_VAR 0 6
62470: IN
62471: NOT
62472: OR
62473: IFFALSE 62780
// begin if dep then
62475: LD_VAR 0 17
62479: IFFALSE 62615
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
62481: LD_ADDR_VAR 0 16
62485: PUSH
62486: LD_VAR 0 17
62490: PUSH
62491: LD_INT 1
62493: ARRAY
62494: PPUSH
62495: CALL_OW 250
62499: PPUSH
62500: LD_VAR 0 17
62504: PUSH
62505: LD_INT 1
62507: ARRAY
62508: PPUSH
62509: CALL_OW 254
62513: PPUSH
62514: LD_INT 5
62516: PPUSH
62517: CALL_OW 272
62521: PUSH
62522: LD_VAR 0 17
62526: PUSH
62527: LD_INT 1
62529: ARRAY
62530: PPUSH
62531: CALL_OW 251
62535: PPUSH
62536: LD_VAR 0 17
62540: PUSH
62541: LD_INT 1
62543: ARRAY
62544: PPUSH
62545: CALL_OW 254
62549: PPUSH
62550: LD_INT 5
62552: PPUSH
62553: CALL_OW 273
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
62562: LD_VAR 0 16
62566: PUSH
62567: LD_INT 1
62569: ARRAY
62570: PPUSH
62571: LD_VAR 0 16
62575: PUSH
62576: LD_INT 2
62578: ARRAY
62579: PPUSH
62580: CALL_OW 488
62584: IFFALSE 62615
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
62586: LD_VAR 0 13
62590: PPUSH
62591: LD_VAR 0 16
62595: PUSH
62596: LD_INT 1
62598: ARRAY
62599: PPUSH
62600: LD_VAR 0 16
62604: PUSH
62605: LD_INT 2
62607: ARRAY
62608: PPUSH
62609: CALL_OW 111
// continue ;
62613: GO 62105
// end ; end ; r := GetDir ( tmp ) ;
62615: LD_ADDR_VAR 0 15
62619: PUSH
62620: LD_VAR 0 13
62624: PPUSH
62625: CALL_OW 254
62629: ST_TO_ADDR
// if r = 5 then
62630: LD_VAR 0 15
62634: PUSH
62635: LD_INT 5
62637: EQUAL
62638: IFFALSE 62648
// r := 0 ;
62640: LD_ADDR_VAR 0 15
62644: PUSH
62645: LD_INT 0
62647: ST_TO_ADDR
// for j = r to 5 do
62648: LD_ADDR_VAR 0 10
62652: PUSH
62653: DOUBLE
62654: LD_VAR 0 15
62658: DEC
62659: ST_TO_ADDR
62660: LD_INT 5
62662: PUSH
62663: FOR_TO
62664: IFFALSE 62778
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
62666: LD_ADDR_VAR 0 11
62670: PUSH
62671: LD_VAR 0 13
62675: PPUSH
62676: CALL_OW 250
62680: PPUSH
62681: LD_VAR 0 10
62685: PPUSH
62686: LD_INT 2
62688: PPUSH
62689: CALL_OW 272
62693: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
62694: LD_ADDR_VAR 0 12
62698: PUSH
62699: LD_VAR 0 13
62703: PPUSH
62704: CALL_OW 251
62708: PPUSH
62709: LD_VAR 0 10
62713: PPUSH
62714: LD_INT 2
62716: PPUSH
62717: CALL_OW 273
62721: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
62722: LD_VAR 0 11
62726: PPUSH
62727: LD_VAR 0 12
62731: PPUSH
62732: CALL_OW 488
62736: PUSH
62737: LD_VAR 0 11
62741: PPUSH
62742: LD_VAR 0 12
62746: PPUSH
62747: CALL_OW 428
62751: NOT
62752: AND
62753: IFFALSE 62776
// begin ComMoveXY ( tmp , _x , _y ) ;
62755: LD_VAR 0 13
62759: PPUSH
62760: LD_VAR 0 11
62764: PPUSH
62765: LD_VAR 0 12
62769: PPUSH
62770: CALL_OW 111
// break ;
62774: GO 62778
// end ; end ;
62776: GO 62663
62778: POP
62779: POP
// end ; end ;
62780: GO 62105
62782: POP
62783: POP
// end ;
62784: LD_VAR 0 8
62788: RET
// export function BuildingTechInvented ( side , btype ) ; begin
62789: LD_INT 0
62791: PPUSH
// result := true ;
62792: LD_ADDR_VAR 0 3
62796: PUSH
62797: LD_INT 1
62799: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
62800: LD_VAR 0 2
62804: PUSH
62805: LD_INT 24
62807: DOUBLE
62808: EQUAL
62809: IFTRUE 62819
62811: LD_INT 33
62813: DOUBLE
62814: EQUAL
62815: IFTRUE 62819
62817: GO 62844
62819: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
62820: LD_ADDR_VAR 0 3
62824: PUSH
62825: LD_INT 32
62827: PPUSH
62828: LD_VAR 0 1
62832: PPUSH
62833: CALL_OW 321
62837: PUSH
62838: LD_INT 2
62840: EQUAL
62841: ST_TO_ADDR
62842: GO 63160
62844: LD_INT 20
62846: DOUBLE
62847: EQUAL
62848: IFTRUE 62852
62850: GO 62877
62852: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
62853: LD_ADDR_VAR 0 3
62857: PUSH
62858: LD_INT 6
62860: PPUSH
62861: LD_VAR 0 1
62865: PPUSH
62866: CALL_OW 321
62870: PUSH
62871: LD_INT 2
62873: EQUAL
62874: ST_TO_ADDR
62875: GO 63160
62877: LD_INT 22
62879: DOUBLE
62880: EQUAL
62881: IFTRUE 62891
62883: LD_INT 36
62885: DOUBLE
62886: EQUAL
62887: IFTRUE 62891
62889: GO 62916
62891: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
62892: LD_ADDR_VAR 0 3
62896: PUSH
62897: LD_INT 15
62899: PPUSH
62900: LD_VAR 0 1
62904: PPUSH
62905: CALL_OW 321
62909: PUSH
62910: LD_INT 2
62912: EQUAL
62913: ST_TO_ADDR
62914: GO 63160
62916: LD_INT 30
62918: DOUBLE
62919: EQUAL
62920: IFTRUE 62924
62922: GO 62949
62924: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
62925: LD_ADDR_VAR 0 3
62929: PUSH
62930: LD_INT 20
62932: PPUSH
62933: LD_VAR 0 1
62937: PPUSH
62938: CALL_OW 321
62942: PUSH
62943: LD_INT 2
62945: EQUAL
62946: ST_TO_ADDR
62947: GO 63160
62949: LD_INT 28
62951: DOUBLE
62952: EQUAL
62953: IFTRUE 62963
62955: LD_INT 21
62957: DOUBLE
62958: EQUAL
62959: IFTRUE 62963
62961: GO 62988
62963: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
62964: LD_ADDR_VAR 0 3
62968: PUSH
62969: LD_INT 21
62971: PPUSH
62972: LD_VAR 0 1
62976: PPUSH
62977: CALL_OW 321
62981: PUSH
62982: LD_INT 2
62984: EQUAL
62985: ST_TO_ADDR
62986: GO 63160
62988: LD_INT 16
62990: DOUBLE
62991: EQUAL
62992: IFTRUE 62996
62994: GO 63021
62996: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
62997: LD_ADDR_VAR 0 3
63001: PUSH
63002: LD_INT 84
63004: PPUSH
63005: LD_VAR 0 1
63009: PPUSH
63010: CALL_OW 321
63014: PUSH
63015: LD_INT 2
63017: EQUAL
63018: ST_TO_ADDR
63019: GO 63160
63021: LD_INT 19
63023: DOUBLE
63024: EQUAL
63025: IFTRUE 63035
63027: LD_INT 23
63029: DOUBLE
63030: EQUAL
63031: IFTRUE 63035
63033: GO 63060
63035: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
63036: LD_ADDR_VAR 0 3
63040: PUSH
63041: LD_INT 83
63043: PPUSH
63044: LD_VAR 0 1
63048: PPUSH
63049: CALL_OW 321
63053: PUSH
63054: LD_INT 2
63056: EQUAL
63057: ST_TO_ADDR
63058: GO 63160
63060: LD_INT 17
63062: DOUBLE
63063: EQUAL
63064: IFTRUE 63068
63066: GO 63093
63068: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
63069: LD_ADDR_VAR 0 3
63073: PUSH
63074: LD_INT 39
63076: PPUSH
63077: LD_VAR 0 1
63081: PPUSH
63082: CALL_OW 321
63086: PUSH
63087: LD_INT 2
63089: EQUAL
63090: ST_TO_ADDR
63091: GO 63160
63093: LD_INT 18
63095: DOUBLE
63096: EQUAL
63097: IFTRUE 63101
63099: GO 63126
63101: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
63102: LD_ADDR_VAR 0 3
63106: PUSH
63107: LD_INT 40
63109: PPUSH
63110: LD_VAR 0 1
63114: PPUSH
63115: CALL_OW 321
63119: PUSH
63120: LD_INT 2
63122: EQUAL
63123: ST_TO_ADDR
63124: GO 63160
63126: LD_INT 27
63128: DOUBLE
63129: EQUAL
63130: IFTRUE 63134
63132: GO 63159
63134: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
63135: LD_ADDR_VAR 0 3
63139: PUSH
63140: LD_INT 35
63142: PPUSH
63143: LD_VAR 0 1
63147: PPUSH
63148: CALL_OW 321
63152: PUSH
63153: LD_INT 2
63155: EQUAL
63156: ST_TO_ADDR
63157: GO 63160
63159: POP
// end ;
63160: LD_VAR 0 3
63164: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
63165: LD_INT 0
63167: PPUSH
63168: PPUSH
63169: PPUSH
63170: PPUSH
63171: PPUSH
63172: PPUSH
63173: PPUSH
63174: PPUSH
63175: PPUSH
63176: PPUSH
63177: PPUSH
// result := false ;
63178: LD_ADDR_VAR 0 6
63182: PUSH
63183: LD_INT 0
63185: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
63186: LD_VAR 0 1
63190: NOT
63191: PUSH
63192: LD_VAR 0 1
63196: PPUSH
63197: CALL_OW 266
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: IN
63212: NOT
63213: OR
63214: PUSH
63215: LD_VAR 0 2
63219: NOT
63220: OR
63221: PUSH
63222: LD_VAR 0 5
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: LD_INT 1
63232: PUSH
63233: LD_INT 2
63235: PUSH
63236: LD_INT 3
63238: PUSH
63239: LD_INT 4
63241: PUSH
63242: LD_INT 5
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: IN
63253: NOT
63254: OR
63255: PUSH
63256: LD_VAR 0 3
63260: PPUSH
63261: LD_VAR 0 4
63265: PPUSH
63266: CALL_OW 488
63270: NOT
63271: OR
63272: IFFALSE 63276
// exit ;
63274: GO 64012
// side := GetSide ( depot ) ;
63276: LD_ADDR_VAR 0 9
63280: PUSH
63281: LD_VAR 0 1
63285: PPUSH
63286: CALL_OW 255
63290: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
63291: LD_VAR 0 9
63295: PPUSH
63296: LD_VAR 0 2
63300: PPUSH
63301: CALL 62789 0 2
63305: NOT
63306: IFFALSE 63310
// exit ;
63308: GO 64012
// pom := GetBase ( depot ) ;
63310: LD_ADDR_VAR 0 10
63314: PUSH
63315: LD_VAR 0 1
63319: PPUSH
63320: CALL_OW 274
63324: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63325: LD_ADDR_VAR 0 11
63329: PUSH
63330: LD_VAR 0 2
63334: PPUSH
63335: LD_VAR 0 1
63339: PPUSH
63340: CALL_OW 248
63344: PPUSH
63345: CALL_OW 450
63349: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
63350: LD_VAR 0 10
63354: PPUSH
63355: LD_INT 1
63357: PPUSH
63358: CALL_OW 275
63362: PUSH
63363: LD_VAR 0 11
63367: PUSH
63368: LD_INT 1
63370: ARRAY
63371: GREATEREQUAL
63372: PUSH
63373: LD_VAR 0 10
63377: PPUSH
63378: LD_INT 2
63380: PPUSH
63381: CALL_OW 275
63385: PUSH
63386: LD_VAR 0 11
63390: PUSH
63391: LD_INT 2
63393: ARRAY
63394: GREATEREQUAL
63395: AND
63396: PUSH
63397: LD_VAR 0 10
63401: PPUSH
63402: LD_INT 3
63404: PPUSH
63405: CALL_OW 275
63409: PUSH
63410: LD_VAR 0 11
63414: PUSH
63415: LD_INT 3
63417: ARRAY
63418: GREATEREQUAL
63419: AND
63420: NOT
63421: IFFALSE 63425
// exit ;
63423: GO 64012
// if GetBType ( depot ) = b_depot then
63425: LD_VAR 0 1
63429: PPUSH
63430: CALL_OW 266
63434: PUSH
63435: LD_INT 0
63437: EQUAL
63438: IFFALSE 63450
// dist := 28 else
63440: LD_ADDR_VAR 0 14
63444: PUSH
63445: LD_INT 28
63447: ST_TO_ADDR
63448: GO 63458
// dist := 36 ;
63450: LD_ADDR_VAR 0 14
63454: PUSH
63455: LD_INT 36
63457: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
63458: LD_VAR 0 1
63462: PPUSH
63463: LD_VAR 0 3
63467: PPUSH
63468: LD_VAR 0 4
63472: PPUSH
63473: CALL_OW 297
63477: PUSH
63478: LD_VAR 0 14
63482: GREATER
63483: IFFALSE 63487
// exit ;
63485: GO 64012
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
63487: LD_ADDR_VAR 0 12
63491: PUSH
63492: LD_VAR 0 2
63496: PPUSH
63497: LD_VAR 0 3
63501: PPUSH
63502: LD_VAR 0 4
63506: PPUSH
63507: LD_VAR 0 5
63511: PPUSH
63512: LD_VAR 0 1
63516: PPUSH
63517: CALL_OW 248
63521: PPUSH
63522: LD_INT 0
63524: PPUSH
63525: CALL 64017 0 6
63529: ST_TO_ADDR
// if not hexes then
63530: LD_VAR 0 12
63534: NOT
63535: IFFALSE 63539
// exit ;
63537: GO 64012
// hex := GetHexInfo ( x , y ) ;
63539: LD_ADDR_VAR 0 15
63543: PUSH
63544: LD_VAR 0 3
63548: PPUSH
63549: LD_VAR 0 4
63553: PPUSH
63554: CALL_OW 546
63558: ST_TO_ADDR
// if hex [ 1 ] then
63559: LD_VAR 0 15
63563: PUSH
63564: LD_INT 1
63566: ARRAY
63567: IFFALSE 63571
// exit ;
63569: GO 64012
// height := hex [ 2 ] ;
63571: LD_ADDR_VAR 0 13
63575: PUSH
63576: LD_VAR 0 15
63580: PUSH
63581: LD_INT 2
63583: ARRAY
63584: ST_TO_ADDR
// for i = 1 to hexes do
63585: LD_ADDR_VAR 0 7
63589: PUSH
63590: DOUBLE
63591: LD_INT 1
63593: DEC
63594: ST_TO_ADDR
63595: LD_VAR 0 12
63599: PUSH
63600: FOR_TO
63601: IFFALSE 63931
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
63603: LD_VAR 0 12
63607: PUSH
63608: LD_VAR 0 7
63612: ARRAY
63613: PUSH
63614: LD_INT 1
63616: ARRAY
63617: PPUSH
63618: LD_VAR 0 12
63622: PUSH
63623: LD_VAR 0 7
63627: ARRAY
63628: PUSH
63629: LD_INT 2
63631: ARRAY
63632: PPUSH
63633: CALL_OW 488
63637: NOT
63638: PUSH
63639: LD_VAR 0 12
63643: PUSH
63644: LD_VAR 0 7
63648: ARRAY
63649: PUSH
63650: LD_INT 1
63652: ARRAY
63653: PPUSH
63654: LD_VAR 0 12
63658: PUSH
63659: LD_VAR 0 7
63663: ARRAY
63664: PUSH
63665: LD_INT 2
63667: ARRAY
63668: PPUSH
63669: CALL_OW 428
63673: PUSH
63674: LD_INT 0
63676: GREATER
63677: OR
63678: PUSH
63679: LD_VAR 0 12
63683: PUSH
63684: LD_VAR 0 7
63688: ARRAY
63689: PUSH
63690: LD_INT 1
63692: ARRAY
63693: PPUSH
63694: LD_VAR 0 12
63698: PUSH
63699: LD_VAR 0 7
63703: ARRAY
63704: PUSH
63705: LD_INT 2
63707: ARRAY
63708: PPUSH
63709: CALL_OW 351
63713: OR
63714: IFFALSE 63720
// exit ;
63716: POP
63717: POP
63718: GO 64012
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63720: LD_ADDR_VAR 0 8
63724: PUSH
63725: LD_VAR 0 12
63729: PUSH
63730: LD_VAR 0 7
63734: ARRAY
63735: PUSH
63736: LD_INT 1
63738: ARRAY
63739: PPUSH
63740: LD_VAR 0 12
63744: PUSH
63745: LD_VAR 0 7
63749: ARRAY
63750: PUSH
63751: LD_INT 2
63753: ARRAY
63754: PPUSH
63755: CALL_OW 546
63759: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
63760: LD_VAR 0 8
63764: PUSH
63765: LD_INT 1
63767: ARRAY
63768: PUSH
63769: LD_VAR 0 8
63773: PUSH
63774: LD_INT 2
63776: ARRAY
63777: PUSH
63778: LD_VAR 0 13
63782: PUSH
63783: LD_INT 2
63785: PLUS
63786: GREATER
63787: OR
63788: PUSH
63789: LD_VAR 0 8
63793: PUSH
63794: LD_INT 2
63796: ARRAY
63797: PUSH
63798: LD_VAR 0 13
63802: PUSH
63803: LD_INT 2
63805: MINUS
63806: LESS
63807: OR
63808: PUSH
63809: LD_VAR 0 8
63813: PUSH
63814: LD_INT 3
63816: ARRAY
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: LD_INT 8
63823: PUSH
63824: LD_INT 9
63826: PUSH
63827: LD_INT 10
63829: PUSH
63830: LD_INT 11
63832: PUSH
63833: LD_INT 12
63835: PUSH
63836: LD_INT 13
63838: PUSH
63839: LD_INT 16
63841: PUSH
63842: LD_INT 17
63844: PUSH
63845: LD_INT 18
63847: PUSH
63848: LD_INT 19
63850: PUSH
63851: LD_INT 20
63853: PUSH
63854: LD_INT 21
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: IN
63872: NOT
63873: OR
63874: PUSH
63875: LD_VAR 0 8
63879: PUSH
63880: LD_INT 5
63882: ARRAY
63883: NOT
63884: OR
63885: PUSH
63886: LD_VAR 0 8
63890: PUSH
63891: LD_INT 6
63893: ARRAY
63894: PUSH
63895: LD_INT 1
63897: PUSH
63898: LD_INT 2
63900: PUSH
63901: LD_INT 7
63903: PUSH
63904: LD_INT 9
63906: PUSH
63907: LD_INT 10
63909: PUSH
63910: LD_INT 11
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: IN
63921: NOT
63922: OR
63923: IFFALSE 63929
// exit ;
63925: POP
63926: POP
63927: GO 64012
// end ;
63929: GO 63600
63931: POP
63932: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
63933: LD_VAR 0 9
63937: PPUSH
63938: LD_VAR 0 3
63942: PPUSH
63943: LD_VAR 0 4
63947: PPUSH
63948: LD_INT 20
63950: PPUSH
63951: CALL 55964 0 4
63955: PUSH
63956: LD_INT 4
63958: ARRAY
63959: IFFALSE 63963
// exit ;
63961: GO 64012
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
63963: LD_VAR 0 2
63967: PUSH
63968: LD_INT 29
63970: PUSH
63971: LD_INT 30
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: IN
63978: PUSH
63979: LD_VAR 0 3
63983: PPUSH
63984: LD_VAR 0 4
63988: PPUSH
63989: LD_VAR 0 9
63993: PPUSH
63994: CALL_OW 440
63998: NOT
63999: AND
64000: IFFALSE 64004
// exit ;
64002: GO 64012
// result := true ;
64004: LD_ADDR_VAR 0 6
64008: PUSH
64009: LD_INT 1
64011: ST_TO_ADDR
// end ;
64012: LD_VAR 0 6
64016: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
64017: LD_INT 0
64019: PPUSH
64020: PPUSH
64021: PPUSH
64022: PPUSH
64023: PPUSH
64024: PPUSH
64025: PPUSH
64026: PPUSH
64027: PPUSH
64028: PPUSH
64029: PPUSH
64030: PPUSH
64031: PPUSH
64032: PPUSH
64033: PPUSH
64034: PPUSH
64035: PPUSH
64036: PPUSH
64037: PPUSH
64038: PPUSH
64039: PPUSH
64040: PPUSH
64041: PPUSH
64042: PPUSH
64043: PPUSH
64044: PPUSH
64045: PPUSH
64046: PPUSH
64047: PPUSH
64048: PPUSH
64049: PPUSH
64050: PPUSH
64051: PPUSH
64052: PPUSH
64053: PPUSH
64054: PPUSH
64055: PPUSH
64056: PPUSH
64057: PPUSH
64058: PPUSH
64059: PPUSH
64060: PPUSH
64061: PPUSH
64062: PPUSH
64063: PPUSH
64064: PPUSH
64065: PPUSH
64066: PPUSH
64067: PPUSH
64068: PPUSH
64069: PPUSH
64070: PPUSH
64071: PPUSH
64072: PPUSH
64073: PPUSH
64074: PPUSH
64075: PPUSH
64076: PPUSH
// result = [ ] ;
64077: LD_ADDR_VAR 0 7
64081: PUSH
64082: EMPTY
64083: ST_TO_ADDR
// temp_list = [ ] ;
64084: LD_ADDR_VAR 0 9
64088: PUSH
64089: EMPTY
64090: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
64091: LD_VAR 0 4
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: LD_INT 2
64104: PUSH
64105: LD_INT 3
64107: PUSH
64108: LD_INT 4
64110: PUSH
64111: LD_INT 5
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: IN
64122: NOT
64123: PUSH
64124: LD_VAR 0 1
64128: PUSH
64129: LD_INT 0
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: IN
64139: PUSH
64140: LD_VAR 0 5
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: LD_INT 2
64150: PUSH
64151: LD_INT 3
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: LIST
64158: IN
64159: NOT
64160: AND
64161: OR
64162: IFFALSE 64166
// exit ;
64164: GO 82557
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
64166: LD_VAR 0 1
64170: PUSH
64171: LD_INT 6
64173: PUSH
64174: LD_INT 7
64176: PUSH
64177: LD_INT 8
64179: PUSH
64180: LD_INT 13
64182: PUSH
64183: LD_INT 12
64185: PUSH
64186: LD_INT 15
64188: PUSH
64189: LD_INT 11
64191: PUSH
64192: LD_INT 14
64194: PUSH
64195: LD_INT 10
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: IN
64209: IFFALSE 64219
// btype = b_lab ;
64211: LD_ADDR_VAR 0 1
64215: PUSH
64216: LD_INT 6
64218: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
64219: LD_VAR 0 6
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: LD_INT 2
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: LIST
64237: IN
64238: NOT
64239: PUSH
64240: LD_VAR 0 1
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: LD_INT 2
64253: PUSH
64254: LD_INT 3
64256: PUSH
64257: LD_INT 6
64259: PUSH
64260: LD_INT 36
64262: PUSH
64263: LD_INT 4
64265: PUSH
64266: LD_INT 5
64268: PUSH
64269: LD_INT 31
64271: PUSH
64272: LD_INT 32
64274: PUSH
64275: LD_INT 33
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: IN
64291: NOT
64292: PUSH
64293: LD_VAR 0 6
64297: PUSH
64298: LD_INT 1
64300: EQUAL
64301: AND
64302: OR
64303: PUSH
64304: LD_VAR 0 1
64308: PUSH
64309: LD_INT 2
64311: PUSH
64312: LD_INT 3
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: IN
64319: NOT
64320: PUSH
64321: LD_VAR 0 6
64325: PUSH
64326: LD_INT 2
64328: EQUAL
64329: AND
64330: OR
64331: IFFALSE 64341
// mode = 0 ;
64333: LD_ADDR_VAR 0 6
64337: PUSH
64338: LD_INT 0
64340: ST_TO_ADDR
// case mode of 0 :
64341: LD_VAR 0 6
64345: PUSH
64346: LD_INT 0
64348: DOUBLE
64349: EQUAL
64350: IFTRUE 64354
64352: GO 75807
64354: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64355: LD_ADDR_VAR 0 11
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: LD_INT 1
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 1
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 0
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: PUSH
64411: LD_INT 1
64413: NEG
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: LD_INT 2
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: LD_INT 2
64451: NEG
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 1
64459: PUSH
64460: LD_INT 1
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: LD_INT 2
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: LD_INT 2
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: LD_INT 1
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: LD_INT 3
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 0
64511: PUSH
64512: LD_INT 3
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: NEG
64522: PUSH
64523: LD_INT 2
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64548: LD_ADDR_VAR 0 12
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: LD_INT 0
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: LD_INT 1
64568: NEG
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 1
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 1
64586: PUSH
64587: LD_INT 1
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 0
64596: PUSH
64597: LD_INT 1
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 1
64606: NEG
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 1
64617: NEG
64618: PUSH
64619: LD_INT 1
64621: NEG
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 1
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 2
64640: PUSH
64641: LD_INT 0
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 2
64650: PUSH
64651: LD_INT 1
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: NEG
64661: PUSH
64662: LD_INT 1
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 2
64671: NEG
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 2
64682: NEG
64683: PUSH
64684: LD_INT 1
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 2
64694: NEG
64695: PUSH
64696: LD_INT 1
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 3
64705: NEG
64706: PUSH
64707: LD_INT 0
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 3
64716: NEG
64717: PUSH
64718: LD_INT 1
64720: NEG
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64744: LD_ADDR_VAR 0 13
64748: PUSH
64749: LD_INT 0
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 1
64782: PUSH
64783: LD_INT 1
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 1
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: NEG
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 1
64813: NEG
64814: PUSH
64815: LD_INT 1
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 1
64825: NEG
64826: PUSH
64827: LD_INT 2
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 2
64837: PUSH
64838: LD_INT 1
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 2
64847: PUSH
64848: LD_INT 2
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 1
64857: PUSH
64858: LD_INT 2
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 2
64867: NEG
64868: PUSH
64869: LD_INT 1
64871: NEG
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 2
64879: NEG
64880: PUSH
64881: LD_INT 2
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 2
64891: NEG
64892: PUSH
64893: LD_INT 3
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 3
64903: NEG
64904: PUSH
64905: LD_INT 2
64907: NEG
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 3
64915: NEG
64916: PUSH
64917: LD_INT 3
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64943: LD_ADDR_VAR 0 14
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: LD_INT 1
64963: NEG
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 1
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 1
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 1
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 1
65001: NEG
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 1
65012: NEG
65013: PUSH
65014: LD_INT 1
65016: NEG
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 1
65024: NEG
65025: PUSH
65026: LD_INT 2
65028: NEG
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: LD_INT 2
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: PUSH
65048: LD_INT 1
65050: NEG
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 1
65058: PUSH
65059: LD_INT 2
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 0
65068: PUSH
65069: LD_INT 2
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 1
65078: NEG
65079: PUSH
65080: LD_INT 1
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: LD_INT 3
65093: NEG
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: LD_INT 3
65104: NEG
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 1
65112: PUSH
65113: LD_INT 2
65115: NEG
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65139: LD_ADDR_VAR 0 15
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 0
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 1
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: PUSH
65175: LD_INT 1
65177: PUSH
65178: LD_INT 1
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: LD_INT 1
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 1
65197: NEG
65198: PUSH
65199: LD_INT 0
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: NEG
65209: PUSH
65210: LD_INT 1
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 1
65220: PUSH
65221: LD_INT 1
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 2
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 2
65241: PUSH
65242: LD_INT 1
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 2
65262: NEG
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 2
65273: NEG
65274: PUSH
65275: LD_INT 1
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 2
65285: PUSH
65286: LD_INT 1
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 3
65296: PUSH
65297: LD_INT 0
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 3
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65332: LD_ADDR_VAR 0 16
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: LD_INT 1
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 1
65390: NEG
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 1
65401: NEG
65402: PUSH
65403: LD_INT 1
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 1
65413: NEG
65414: PUSH
65415: LD_INT 2
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 2
65435: PUSH
65436: LD_INT 2
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: PUSH
65446: LD_INT 2
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 2
65455: NEG
65456: PUSH
65457: LD_INT 1
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 2
65467: NEG
65468: PUSH
65469: LD_INT 2
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 3
65479: PUSH
65480: LD_INT 2
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 3
65489: PUSH
65490: LD_INT 3
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 2
65499: PUSH
65500: LD_INT 3
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65525: LD_ADDR_VAR 0 17
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: LD_INT 0
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: LD_INT 1
65545: NEG
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: LD_INT 0
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 1
65563: PUSH
65564: LD_INT 1
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: LD_INT 1
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: LD_INT 0
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 1
65594: NEG
65595: PUSH
65596: LD_INT 1
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 1
65606: NEG
65607: PUSH
65608: LD_INT 2
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: LD_INT 2
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 1
65629: PUSH
65630: LD_INT 1
65632: NEG
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 2
65640: PUSH
65641: LD_INT 0
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 2
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: LD_INT 2
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 1
65670: PUSH
65671: LD_INT 2
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: LD_INT 2
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 1
65690: NEG
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 2
65701: NEG
65702: PUSH
65703: LD_INT 0
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 2
65712: NEG
65713: PUSH
65714: LD_INT 1
65716: NEG
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 2
65724: NEG
65725: PUSH
65726: LD_INT 2
65728: NEG
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65755: LD_ADDR_VAR 0 18
65759: PUSH
65760: LD_INT 0
65762: PUSH
65763: LD_INT 0
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 0
65772: PUSH
65773: LD_INT 1
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 1
65783: PUSH
65784: LD_INT 0
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 1
65793: PUSH
65794: LD_INT 1
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: LD_INT 1
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 1
65813: NEG
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 1
65824: NEG
65825: PUSH
65826: LD_INT 1
65828: NEG
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 1
65836: NEG
65837: PUSH
65838: LD_INT 2
65840: NEG
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: LD_INT 2
65851: NEG
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 1
65859: PUSH
65860: LD_INT 1
65862: NEG
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 2
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 2
65880: PUSH
65881: LD_INT 1
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 2
65890: PUSH
65891: LD_INT 2
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 1
65900: PUSH
65901: LD_INT 2
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: LD_INT 2
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 1
65920: NEG
65921: PUSH
65922: LD_INT 1
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 2
65931: NEG
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 2
65942: NEG
65943: PUSH
65944: LD_INT 1
65946: NEG
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 2
65954: NEG
65955: PUSH
65956: LD_INT 2
65958: NEG
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65985: LD_ADDR_VAR 0 19
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: LD_INT 0
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 0
66002: PUSH
66003: LD_INT 1
66005: NEG
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 1
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 0
66033: PUSH
66034: LD_INT 1
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 1
66043: NEG
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 1
66054: NEG
66055: PUSH
66056: LD_INT 1
66058: NEG
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: LD_INT 1
66066: NEG
66067: PUSH
66068: LD_INT 2
66070: NEG
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: LD_INT 0
66078: PUSH
66079: LD_INT 2
66081: NEG
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 1
66089: PUSH
66090: LD_INT 1
66092: NEG
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 2
66100: PUSH
66101: LD_INT 0
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 2
66110: PUSH
66111: LD_INT 1
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 2
66120: PUSH
66121: LD_INT 2
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 1
66130: PUSH
66131: LD_INT 2
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: LD_INT 2
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 1
66150: NEG
66151: PUSH
66152: LD_INT 1
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 2
66161: NEG
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 2
66172: NEG
66173: PUSH
66174: LD_INT 1
66176: NEG
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 2
66184: NEG
66185: PUSH
66186: LD_INT 2
66188: NEG
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66215: LD_ADDR_VAR 0 20
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: LD_INT 0
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: LD_INT 1
66235: NEG
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 1
66243: PUSH
66244: LD_INT 0
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 1
66253: PUSH
66254: LD_INT 1
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: LD_INT 1
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 1
66273: NEG
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 1
66284: NEG
66285: PUSH
66286: LD_INT 1
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 1
66296: NEG
66297: PUSH
66298: LD_INT 2
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 0
66308: PUSH
66309: LD_INT 2
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 1
66319: PUSH
66320: LD_INT 1
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 2
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 2
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 2
66350: PUSH
66351: LD_INT 2
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 1
66360: PUSH
66361: LD_INT 2
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: LD_INT 2
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 1
66380: NEG
66381: PUSH
66382: LD_INT 1
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 2
66391: NEG
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 2
66402: NEG
66403: PUSH
66404: LD_INT 1
66406: NEG
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 2
66414: NEG
66415: PUSH
66416: LD_INT 2
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66445: LD_ADDR_VAR 0 21
66449: PUSH
66450: LD_INT 0
66452: PUSH
66453: LD_INT 0
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: LD_INT 1
66465: NEG
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 1
66473: PUSH
66474: LD_INT 0
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 1
66483: PUSH
66484: LD_INT 1
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: LD_INT 1
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 1
66503: NEG
66504: PUSH
66505: LD_INT 0
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: LD_INT 1
66518: NEG
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 1
66526: NEG
66527: PUSH
66528: LD_INT 2
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 0
66538: PUSH
66539: LD_INT 2
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 1
66549: PUSH
66550: LD_INT 1
66552: NEG
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 2
66560: PUSH
66561: LD_INT 0
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 2
66570: PUSH
66571: LD_INT 1
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 2
66580: PUSH
66581: LD_INT 2
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: LD_INT 2
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 0
66600: PUSH
66601: LD_INT 2
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 1
66610: NEG
66611: PUSH
66612: LD_INT 1
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 2
66621: NEG
66622: PUSH
66623: LD_INT 0
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 2
66632: NEG
66633: PUSH
66634: LD_INT 1
66636: NEG
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 2
66644: NEG
66645: PUSH
66646: LD_INT 2
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66675: LD_ADDR_VAR 0 22
66679: PUSH
66680: LD_INT 0
66682: PUSH
66683: LD_INT 0
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: LD_INT 1
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 1
66703: PUSH
66704: LD_INT 0
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: LD_INT 1
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 0
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 1
66733: NEG
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 1
66744: NEG
66745: PUSH
66746: LD_INT 1
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 1
66756: NEG
66757: PUSH
66758: LD_INT 2
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: LD_INT 2
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 1
66779: PUSH
66780: LD_INT 1
66782: NEG
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 2
66790: PUSH
66791: LD_INT 0
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 2
66800: PUSH
66801: LD_INT 1
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 2
66810: PUSH
66811: LD_INT 2
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 1
66820: PUSH
66821: LD_INT 2
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 0
66830: PUSH
66831: LD_INT 2
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 1
66840: NEG
66841: PUSH
66842: LD_INT 1
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 2
66851: NEG
66852: PUSH
66853: LD_INT 0
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 2
66862: NEG
66863: PUSH
66864: LD_INT 1
66866: NEG
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 2
66874: NEG
66875: PUSH
66876: LD_INT 2
66878: NEG
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66905: LD_ADDR_VAR 0 23
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: LD_INT 0
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 0
66922: PUSH
66923: LD_INT 1
66925: NEG
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 1
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 1
66943: PUSH
66944: LD_INT 1
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 0
66953: PUSH
66954: LD_INT 1
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 1
66963: NEG
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 1
66974: NEG
66975: PUSH
66976: LD_INT 1
66978: NEG
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 1
66986: NEG
66987: PUSH
66988: LD_INT 2
66990: NEG
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: LD_INT 0
66998: PUSH
66999: LD_INT 2
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 1
67009: PUSH
67010: LD_INT 1
67012: NEG
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 2
67020: PUSH
67021: LD_INT 0
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 2
67030: PUSH
67031: LD_INT 1
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 2
67040: PUSH
67041: LD_INT 2
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 1
67050: PUSH
67051: LD_INT 2
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: LD_INT 2
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 1
67070: NEG
67071: PUSH
67072: LD_INT 1
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 2
67081: NEG
67082: PUSH
67083: LD_INT 0
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 2
67092: NEG
67093: PUSH
67094: LD_INT 1
67096: NEG
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 2
67104: NEG
67105: PUSH
67106: LD_INT 2
67108: NEG
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 2
67116: NEG
67117: PUSH
67118: LD_INT 3
67120: NEG
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 1
67128: NEG
67129: PUSH
67130: LD_INT 3
67132: NEG
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: LD_INT 2
67143: NEG
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 2
67151: PUSH
67152: LD_INT 1
67154: NEG
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
67185: LD_ADDR_VAR 0 24
67189: PUSH
67190: LD_INT 0
67192: PUSH
67193: LD_INT 0
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 0
67202: PUSH
67203: LD_INT 1
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 1
67223: PUSH
67224: LD_INT 1
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 0
67233: PUSH
67234: LD_INT 1
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 1
67243: NEG
67244: PUSH
67245: LD_INT 0
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 1
67254: NEG
67255: PUSH
67256: LD_INT 1
67258: NEG
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 1
67266: NEG
67267: PUSH
67268: LD_INT 2
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 0
67278: PUSH
67279: LD_INT 2
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 1
67289: PUSH
67290: LD_INT 1
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 2
67300: PUSH
67301: LD_INT 0
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 2
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 2
67320: PUSH
67321: LD_INT 2
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 1
67330: PUSH
67331: LD_INT 2
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 0
67340: PUSH
67341: LD_INT 2
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 1
67350: NEG
67351: PUSH
67352: LD_INT 1
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 2
67361: NEG
67362: PUSH
67363: LD_INT 0
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 2
67372: NEG
67373: PUSH
67374: LD_INT 1
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 2
67384: NEG
67385: PUSH
67386: LD_INT 2
67388: NEG
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 1
67396: PUSH
67397: LD_INT 2
67399: NEG
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 2
67407: PUSH
67408: LD_INT 1
67410: NEG
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 3
67418: PUSH
67419: LD_INT 1
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 3
67428: PUSH
67429: LD_INT 2
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
67461: LD_ADDR_VAR 0 25
67465: PUSH
67466: LD_INT 0
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: LD_INT 1
67481: NEG
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 1
67489: PUSH
67490: LD_INT 0
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 1
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: LD_INT 1
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 1
67530: NEG
67531: PUSH
67532: LD_INT 1
67534: NEG
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 1
67542: NEG
67543: PUSH
67544: LD_INT 2
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: LD_INT 2
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 1
67565: PUSH
67566: LD_INT 1
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 2
67576: PUSH
67577: LD_INT 0
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 2
67586: PUSH
67587: LD_INT 1
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 2
67596: PUSH
67597: LD_INT 2
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 1
67606: PUSH
67607: LD_INT 2
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 0
67616: PUSH
67617: LD_INT 2
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 1
67626: NEG
67627: PUSH
67628: LD_INT 1
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 2
67637: NEG
67638: PUSH
67639: LD_INT 0
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 2
67648: NEG
67649: PUSH
67650: LD_INT 1
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 2
67660: NEG
67661: PUSH
67662: LD_INT 2
67664: NEG
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 3
67672: PUSH
67673: LD_INT 1
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 3
67682: PUSH
67683: LD_INT 2
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 2
67692: PUSH
67693: LD_INT 3
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 1
67702: PUSH
67703: LD_INT 3
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67735: LD_ADDR_VAR 0 26
67739: PUSH
67740: LD_INT 0
67742: PUSH
67743: LD_INT 0
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 0
67752: PUSH
67753: LD_INT 1
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 1
67763: PUSH
67764: LD_INT 0
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 1
67773: PUSH
67774: LD_INT 1
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 0
67783: PUSH
67784: LD_INT 1
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 1
67793: NEG
67794: PUSH
67795: LD_INT 0
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 1
67804: NEG
67805: PUSH
67806: LD_INT 1
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 1
67816: NEG
67817: PUSH
67818: LD_INT 2
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 0
67828: PUSH
67829: LD_INT 2
67831: NEG
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 1
67839: PUSH
67840: LD_INT 1
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 2
67850: PUSH
67851: LD_INT 0
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 2
67860: PUSH
67861: LD_INT 1
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 2
67870: PUSH
67871: LD_INT 2
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: PUSH
67881: LD_INT 2
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: LD_INT 2
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 1
67900: NEG
67901: PUSH
67902: LD_INT 1
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 2
67911: NEG
67912: PUSH
67913: LD_INT 0
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 2
67922: NEG
67923: PUSH
67924: LD_INT 1
67926: NEG
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 2
67934: NEG
67935: PUSH
67936: LD_INT 2
67938: NEG
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 2
67946: PUSH
67947: LD_INT 3
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 1
67956: PUSH
67957: LD_INT 3
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 1
67966: NEG
67967: PUSH
67968: LD_INT 2
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 2
67977: NEG
67978: PUSH
67979: LD_INT 1
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68011: LD_ADDR_VAR 0 27
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: LD_INT 0
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 0
68028: PUSH
68029: LD_INT 1
68031: NEG
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 1
68039: PUSH
68040: LD_INT 0
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 1
68049: PUSH
68050: LD_INT 1
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 0
68059: PUSH
68060: LD_INT 1
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: NEG
68070: PUSH
68071: LD_INT 0
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 1
68080: NEG
68081: PUSH
68082: LD_INT 1
68084: NEG
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 1
68092: NEG
68093: PUSH
68094: LD_INT 2
68096: NEG
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: LD_INT 2
68107: NEG
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 1
68115: PUSH
68116: LD_INT 1
68118: NEG
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 2
68126: PUSH
68127: LD_INT 0
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 2
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 2
68146: PUSH
68147: LD_INT 2
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 1
68156: PUSH
68157: LD_INT 2
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 0
68166: PUSH
68167: LD_INT 2
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 1
68176: NEG
68177: PUSH
68178: LD_INT 1
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 2
68187: NEG
68188: PUSH
68189: LD_INT 0
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 2
68198: NEG
68199: PUSH
68200: LD_INT 1
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 2
68210: NEG
68211: PUSH
68212: LD_INT 2
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 1
68222: NEG
68223: PUSH
68224: LD_INT 2
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 2
68233: NEG
68234: PUSH
68235: LD_INT 1
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 3
68244: NEG
68245: PUSH
68246: LD_INT 1
68248: NEG
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 3
68256: NEG
68257: PUSH
68258: LD_INT 2
68260: NEG
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68291: LD_ADDR_VAR 0 28
68295: PUSH
68296: LD_INT 0
68298: PUSH
68299: LD_INT 0
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 0
68308: PUSH
68309: LD_INT 1
68311: NEG
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 1
68319: PUSH
68320: LD_INT 0
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 1
68329: PUSH
68330: LD_INT 1
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 0
68339: PUSH
68340: LD_INT 1
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 1
68349: NEG
68350: PUSH
68351: LD_INT 0
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 1
68360: NEG
68361: PUSH
68362: LD_INT 1
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 1
68372: NEG
68373: PUSH
68374: LD_INT 2
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 0
68384: PUSH
68385: LD_INT 2
68387: NEG
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 1
68395: PUSH
68396: LD_INT 1
68398: NEG
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 2
68406: PUSH
68407: LD_INT 0
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 2
68416: PUSH
68417: LD_INT 1
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 2
68426: PUSH
68427: LD_INT 2
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 1
68436: PUSH
68437: LD_INT 2
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 0
68446: PUSH
68447: LD_INT 2
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 1
68456: NEG
68457: PUSH
68458: LD_INT 1
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 2
68467: NEG
68468: PUSH
68469: LD_INT 0
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 2
68478: NEG
68479: PUSH
68480: LD_INT 1
68482: NEG
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 2
68490: NEG
68491: PUSH
68492: LD_INT 2
68494: NEG
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 2
68502: NEG
68503: PUSH
68504: LD_INT 3
68506: NEG
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 1
68514: NEG
68515: PUSH
68516: LD_INT 3
68518: NEG
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 3
68526: NEG
68527: PUSH
68528: LD_INT 1
68530: NEG
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 3
68538: NEG
68539: PUSH
68540: LD_INT 2
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68573: LD_ADDR_VAR 0 29
68577: PUSH
68578: LD_INT 0
68580: PUSH
68581: LD_INT 0
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 0
68590: PUSH
68591: LD_INT 1
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 1
68601: PUSH
68602: LD_INT 0
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 1
68611: PUSH
68612: LD_INT 1
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 0
68621: PUSH
68622: LD_INT 1
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 1
68631: NEG
68632: PUSH
68633: LD_INT 0
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 1
68642: NEG
68643: PUSH
68644: LD_INT 1
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 1
68654: NEG
68655: PUSH
68656: LD_INT 2
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 0
68666: PUSH
68667: LD_INT 2
68669: NEG
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 1
68677: PUSH
68678: LD_INT 1
68680: NEG
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 2
68688: PUSH
68689: LD_INT 0
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 2
68698: PUSH
68699: LD_INT 1
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 1
68708: PUSH
68709: LD_INT 2
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 0
68718: PUSH
68719: LD_INT 2
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 1
68728: NEG
68729: PUSH
68730: LD_INT 1
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 2
68739: NEG
68740: PUSH
68741: LD_INT 1
68743: NEG
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 2
68751: NEG
68752: PUSH
68753: LD_INT 2
68755: NEG
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 2
68763: NEG
68764: PUSH
68765: LD_INT 3
68767: NEG
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 2
68775: PUSH
68776: LD_INT 1
68778: NEG
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 3
68786: PUSH
68787: LD_INT 1
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 1
68796: PUSH
68797: LD_INT 3
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 1
68806: NEG
68807: PUSH
68808: LD_INT 2
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 3
68817: NEG
68818: PUSH
68819: LD_INT 2
68821: NEG
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68852: LD_ADDR_VAR 0 30
68856: PUSH
68857: LD_INT 0
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 0
68869: PUSH
68870: LD_INT 1
68872: NEG
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 1
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 1
68890: PUSH
68891: LD_INT 1
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 0
68900: PUSH
68901: LD_INT 1
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 1
68910: NEG
68911: PUSH
68912: LD_INT 0
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 1
68921: NEG
68922: PUSH
68923: LD_INT 1
68925: NEG
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 1
68933: NEG
68934: PUSH
68935: LD_INT 2
68937: NEG
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 0
68945: PUSH
68946: LD_INT 2
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 1
68956: PUSH
68957: LD_INT 1
68959: NEG
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 2
68967: PUSH
68968: LD_INT 0
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 2
68977: PUSH
68978: LD_INT 1
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 2
68987: PUSH
68988: LD_INT 2
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 1
68997: PUSH
68998: LD_INT 2
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 1
69007: NEG
69008: PUSH
69009: LD_INT 1
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 2
69018: NEG
69019: PUSH
69020: LD_INT 0
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 2
69029: NEG
69030: PUSH
69031: LD_INT 1
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 1
69041: NEG
69042: PUSH
69043: LD_INT 3
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 1
69053: PUSH
69054: LD_INT 2
69056: NEG
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 3
69064: PUSH
69065: LD_INT 2
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 2
69074: PUSH
69075: LD_INT 3
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 2
69084: NEG
69085: PUSH
69086: LD_INT 1
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 3
69095: NEG
69096: PUSH
69097: LD_INT 1
69099: NEG
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69130: LD_ADDR_VAR 0 31
69134: PUSH
69135: LD_INT 0
69137: PUSH
69138: LD_INT 0
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 0
69147: PUSH
69148: LD_INT 1
69150: NEG
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 1
69158: PUSH
69159: LD_INT 0
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 1
69168: PUSH
69169: LD_INT 1
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 0
69178: PUSH
69179: LD_INT 1
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 1
69188: NEG
69189: PUSH
69190: LD_INT 0
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 1
69199: NEG
69200: PUSH
69201: LD_INT 1
69203: NEG
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 1
69211: NEG
69212: PUSH
69213: LD_INT 2
69215: NEG
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 1
69223: PUSH
69224: LD_INT 1
69226: NEG
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 2
69234: PUSH
69235: LD_INT 0
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 2
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 2
69254: PUSH
69255: LD_INT 2
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 1
69264: PUSH
69265: LD_INT 2
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 0
69274: PUSH
69275: LD_INT 2
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 1
69284: NEG
69285: PUSH
69286: LD_INT 1
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 2
69295: NEG
69296: PUSH
69297: LD_INT 1
69299: NEG
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 2
69307: NEG
69308: PUSH
69309: LD_INT 2
69311: NEG
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 2
69319: NEG
69320: PUSH
69321: LD_INT 3
69323: NEG
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 2
69331: PUSH
69332: LD_INT 1
69334: NEG
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 3
69342: PUSH
69343: LD_INT 1
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 1
69352: PUSH
69353: LD_INT 3
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: NEG
69363: PUSH
69364: LD_INT 2
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 3
69373: NEG
69374: PUSH
69375: LD_INT 2
69377: NEG
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69408: LD_ADDR_VAR 0 32
69412: PUSH
69413: LD_INT 0
69415: PUSH
69416: LD_INT 0
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 0
69425: PUSH
69426: LD_INT 1
69428: NEG
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 1
69436: PUSH
69437: LD_INT 0
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 1
69446: PUSH
69447: LD_INT 1
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 0
69456: PUSH
69457: LD_INT 1
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 1
69466: NEG
69467: PUSH
69468: LD_INT 0
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 1
69477: NEG
69478: PUSH
69479: LD_INT 1
69481: NEG
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 1
69489: NEG
69490: PUSH
69491: LD_INT 2
69493: NEG
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 0
69501: PUSH
69502: LD_INT 2
69504: NEG
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 1
69512: PUSH
69513: LD_INT 1
69515: NEG
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 2
69523: PUSH
69524: LD_INT 1
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 2
69533: PUSH
69534: LD_INT 2
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 1
69543: PUSH
69544: LD_INT 2
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 0
69553: PUSH
69554: LD_INT 2
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PUSH
69561: LD_INT 1
69563: NEG
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 2
69574: NEG
69575: PUSH
69576: LD_INT 0
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 2
69585: NEG
69586: PUSH
69587: LD_INT 1
69589: NEG
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 1
69597: NEG
69598: PUSH
69599: LD_INT 3
69601: NEG
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 1
69609: PUSH
69610: LD_INT 2
69612: NEG
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 3
69620: PUSH
69621: LD_INT 2
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 2
69630: PUSH
69631: LD_INT 3
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 2
69640: NEG
69641: PUSH
69642: LD_INT 1
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 3
69651: NEG
69652: PUSH
69653: LD_INT 1
69655: NEG
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69686: LD_ADDR_VAR 0 33
69690: PUSH
69691: LD_INT 0
69693: PUSH
69694: LD_INT 0
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 0
69703: PUSH
69704: LD_INT 1
69706: NEG
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 1
69714: PUSH
69715: LD_INT 0
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 1
69724: PUSH
69725: LD_INT 1
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 0
69734: PUSH
69735: LD_INT 1
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 1
69744: NEG
69745: PUSH
69746: LD_INT 0
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 1
69755: NEG
69756: PUSH
69757: LD_INT 1
69759: NEG
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 1
69767: NEG
69768: PUSH
69769: LD_INT 2
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 1
69779: PUSH
69780: LD_INT 1
69782: NEG
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 2
69790: PUSH
69791: LD_INT 0
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 2
69800: PUSH
69801: LD_INT 1
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 1
69810: PUSH
69811: LD_INT 2
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 0
69820: PUSH
69821: LD_INT 2
69823: PUSH
69824: EMPTY
69825: LIST
69826: LIST
69827: PUSH
69828: LD_INT 1
69830: NEG
69831: PUSH
69832: LD_INT 1
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 2
69841: NEG
69842: PUSH
69843: LD_INT 0
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 2
69852: NEG
69853: PUSH
69854: LD_INT 1
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 2
69864: NEG
69865: PUSH
69866: LD_INT 2
69868: NEG
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 2
69876: NEG
69877: PUSH
69878: LD_INT 3
69880: NEG
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 2
69888: PUSH
69889: LD_INT 1
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 3
69899: PUSH
69900: LD_INT 1
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 1
69909: PUSH
69910: LD_INT 3
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 1
69919: NEG
69920: PUSH
69921: LD_INT 2
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 3
69930: NEG
69931: PUSH
69932: LD_INT 2
69934: NEG
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69965: LD_ADDR_VAR 0 34
69969: PUSH
69970: LD_INT 0
69972: PUSH
69973: LD_INT 0
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 0
69982: PUSH
69983: LD_INT 1
69985: NEG
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 1
69993: PUSH
69994: LD_INT 0
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 1
70003: PUSH
70004: LD_INT 1
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 0
70013: PUSH
70014: LD_INT 1
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: LD_INT 1
70023: NEG
70024: PUSH
70025: LD_INT 0
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 1
70034: NEG
70035: PUSH
70036: LD_INT 1
70038: NEG
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 1
70046: NEG
70047: PUSH
70048: LD_INT 2
70050: NEG
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 0
70058: PUSH
70059: LD_INT 2
70061: NEG
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 1
70069: PUSH
70070: LD_INT 1
70072: NEG
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 2
70080: PUSH
70081: LD_INT 1
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 2
70090: PUSH
70091: LD_INT 2
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 1
70100: PUSH
70101: LD_INT 2
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 1
70110: NEG
70111: PUSH
70112: LD_INT 1
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 2
70121: NEG
70122: PUSH
70123: LD_INT 0
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 2
70132: NEG
70133: PUSH
70134: LD_INT 1
70136: NEG
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 2
70144: NEG
70145: PUSH
70146: LD_INT 2
70148: NEG
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 1
70156: NEG
70157: PUSH
70158: LD_INT 3
70160: NEG
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 1
70168: PUSH
70169: LD_INT 2
70171: NEG
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 3
70179: PUSH
70180: LD_INT 2
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 2
70189: PUSH
70190: LD_INT 3
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 2
70199: NEG
70200: PUSH
70201: LD_INT 1
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 3
70210: NEG
70211: PUSH
70212: LD_INT 1
70214: NEG
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70245: LD_ADDR_VAR 0 35
70249: PUSH
70250: LD_INT 0
70252: PUSH
70253: LD_INT 0
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 0
70262: PUSH
70263: LD_INT 1
70265: NEG
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 1
70273: PUSH
70274: LD_INT 0
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 1
70283: PUSH
70284: LD_INT 1
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 0
70293: PUSH
70294: LD_INT 1
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 1
70303: NEG
70304: PUSH
70305: LD_INT 0
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 1
70314: NEG
70315: PUSH
70316: LD_INT 1
70318: NEG
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 2
70326: PUSH
70327: LD_INT 1
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 2
70336: NEG
70337: PUSH
70338: LD_INT 1
70340: NEG
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70357: LD_ADDR_VAR 0 36
70361: PUSH
70362: LD_INT 0
70364: PUSH
70365: LD_INT 0
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: LD_INT 1
70377: NEG
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 1
70385: PUSH
70386: LD_INT 0
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 1
70395: PUSH
70396: LD_INT 1
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 0
70405: PUSH
70406: LD_INT 1
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 1
70415: NEG
70416: PUSH
70417: LD_INT 0
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 1
70426: NEG
70427: PUSH
70428: LD_INT 1
70430: NEG
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 1
70438: NEG
70439: PUSH
70440: LD_INT 2
70442: NEG
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 1
70450: PUSH
70451: LD_INT 2
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70469: LD_ADDR_VAR 0 37
70473: PUSH
70474: LD_INT 0
70476: PUSH
70477: LD_INT 0
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: LD_INT 0
70486: PUSH
70487: LD_INT 1
70489: NEG
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: PUSH
70495: LD_INT 1
70497: PUSH
70498: LD_INT 0
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 1
70507: PUSH
70508: LD_INT 1
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 0
70517: PUSH
70518: LD_INT 1
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 1
70527: NEG
70528: PUSH
70529: LD_INT 0
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 1
70538: NEG
70539: PUSH
70540: LD_INT 1
70542: NEG
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 1
70550: PUSH
70551: LD_INT 1
70553: NEG
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 1
70561: NEG
70562: PUSH
70563: LD_INT 1
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70581: LD_ADDR_VAR 0 38
70585: PUSH
70586: LD_INT 0
70588: PUSH
70589: LD_INT 0
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 0
70598: PUSH
70599: LD_INT 1
70601: NEG
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 1
70609: PUSH
70610: LD_INT 0
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 1
70619: PUSH
70620: LD_INT 1
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 0
70629: PUSH
70630: LD_INT 1
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 1
70639: NEG
70640: PUSH
70641: LD_INT 0
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PUSH
70648: LD_INT 1
70650: NEG
70651: PUSH
70652: LD_INT 1
70654: NEG
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PUSH
70660: LD_INT 2
70662: PUSH
70663: LD_INT 1
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 2
70672: NEG
70673: PUSH
70674: LD_INT 1
70676: NEG
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70693: LD_ADDR_VAR 0 39
70697: PUSH
70698: LD_INT 0
70700: PUSH
70701: LD_INT 0
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 0
70710: PUSH
70711: LD_INT 1
70713: NEG
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 1
70721: PUSH
70722: LD_INT 0
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 1
70731: PUSH
70732: LD_INT 1
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 0
70741: PUSH
70742: LD_INT 1
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 1
70751: NEG
70752: PUSH
70753: LD_INT 0
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 1
70762: NEG
70763: PUSH
70764: LD_INT 1
70766: NEG
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 1
70774: NEG
70775: PUSH
70776: LD_INT 2
70778: NEG
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 1
70786: PUSH
70787: LD_INT 2
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70805: LD_ADDR_VAR 0 40
70809: PUSH
70810: LD_INT 0
70812: PUSH
70813: LD_INT 0
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 0
70822: PUSH
70823: LD_INT 1
70825: NEG
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 1
70833: PUSH
70834: LD_INT 0
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 1
70843: PUSH
70844: LD_INT 1
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 0
70853: PUSH
70854: LD_INT 1
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 1
70863: NEG
70864: PUSH
70865: LD_INT 0
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 1
70874: NEG
70875: PUSH
70876: LD_INT 1
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 1
70886: PUSH
70887: LD_INT 1
70889: NEG
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 1
70897: NEG
70898: PUSH
70899: LD_INT 1
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70917: LD_ADDR_VAR 0 41
70921: PUSH
70922: LD_INT 0
70924: PUSH
70925: LD_INT 0
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: LD_INT 1
70937: NEG
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 1
70945: PUSH
70946: LD_INT 0
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 1
70955: PUSH
70956: LD_INT 1
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 0
70965: PUSH
70966: LD_INT 1
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 1
70975: NEG
70976: PUSH
70977: LD_INT 0
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 1
70986: NEG
70987: PUSH
70988: LD_INT 1
70990: NEG
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 1
70998: NEG
70999: PUSH
71000: LD_INT 2
71002: NEG
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: LD_INT 1
71010: PUSH
71011: LD_INT 1
71013: NEG
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 2
71021: PUSH
71022: LD_INT 0
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 2
71031: PUSH
71032: LD_INT 1
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PUSH
71039: LD_INT 2
71041: PUSH
71042: LD_INT 2
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: LD_INT 1
71051: PUSH
71052: LD_INT 2
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 1
71061: NEG
71062: PUSH
71063: LD_INT 1
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 2
71072: NEG
71073: PUSH
71074: LD_INT 0
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 2
71083: NEG
71084: PUSH
71085: LD_INT 1
71087: NEG
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 2
71095: NEG
71096: PUSH
71097: LD_INT 2
71099: NEG
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 2
71107: NEG
71108: PUSH
71109: LD_INT 3
71111: NEG
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 2
71119: PUSH
71120: LD_INT 1
71122: NEG
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 3
71130: PUSH
71131: LD_INT 0
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 3
71140: PUSH
71141: LD_INT 1
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 3
71150: PUSH
71151: LD_INT 2
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 3
71160: PUSH
71161: LD_INT 3
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: LD_INT 2
71170: PUSH
71171: LD_INT 3
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: LD_INT 2
71180: NEG
71181: PUSH
71182: LD_INT 1
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: PUSH
71189: LD_INT 3
71191: NEG
71192: PUSH
71193: LD_INT 0
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 3
71202: NEG
71203: PUSH
71204: LD_INT 1
71206: NEG
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PUSH
71212: LD_INT 3
71214: NEG
71215: PUSH
71216: LD_INT 2
71218: NEG
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 3
71226: NEG
71227: PUSH
71228: LD_INT 3
71230: NEG
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71267: LD_ADDR_VAR 0 42
71271: PUSH
71272: LD_INT 0
71274: PUSH
71275: LD_INT 0
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 0
71284: PUSH
71285: LD_INT 1
71287: NEG
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 1
71295: PUSH
71296: LD_INT 0
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: LD_INT 1
71305: PUSH
71306: LD_INT 1
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 0
71315: PUSH
71316: LD_INT 1
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 1
71325: NEG
71326: PUSH
71327: LD_INT 0
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 1
71336: NEG
71337: PUSH
71338: LD_INT 1
71340: NEG
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 1
71348: NEG
71349: PUSH
71350: LD_INT 2
71352: NEG
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 0
71360: PUSH
71361: LD_INT 2
71363: NEG
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 1
71371: PUSH
71372: LD_INT 1
71374: NEG
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 2
71382: PUSH
71383: LD_INT 1
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 2
71392: PUSH
71393: LD_INT 2
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 1
71402: PUSH
71403: LD_INT 2
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: LD_INT 0
71412: PUSH
71413: LD_INT 2
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: LD_INT 1
71422: NEG
71423: PUSH
71424: LD_INT 1
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: PUSH
71431: LD_INT 2
71433: NEG
71434: PUSH
71435: LD_INT 1
71437: NEG
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: LD_INT 2
71445: NEG
71446: PUSH
71447: LD_INT 2
71449: NEG
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 2
71457: NEG
71458: PUSH
71459: LD_INT 3
71461: NEG
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 1
71469: NEG
71470: PUSH
71471: LD_INT 3
71473: NEG
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 0
71481: PUSH
71482: LD_INT 3
71484: NEG
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 1
71492: PUSH
71493: LD_INT 2
71495: NEG
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PUSH
71501: LD_INT 3
71503: PUSH
71504: LD_INT 2
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 3
71513: PUSH
71514: LD_INT 3
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 2
71523: PUSH
71524: LD_INT 3
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 1
71533: PUSH
71534: LD_INT 3
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 0
71543: PUSH
71544: LD_INT 3
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 1
71553: NEG
71554: PUSH
71555: LD_INT 2
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 3
71564: NEG
71565: PUSH
71566: LD_INT 2
71568: NEG
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: PUSH
71574: LD_INT 3
71576: NEG
71577: PUSH
71578: LD_INT 3
71580: NEG
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71617: LD_ADDR_VAR 0 43
71621: PUSH
71622: LD_INT 0
71624: PUSH
71625: LD_INT 0
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PUSH
71632: LD_INT 0
71634: PUSH
71635: LD_INT 1
71637: NEG
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 1
71645: PUSH
71646: LD_INT 0
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: LD_INT 1
71655: PUSH
71656: LD_INT 1
71658: PUSH
71659: EMPTY
71660: LIST
71661: LIST
71662: PUSH
71663: LD_INT 0
71665: PUSH
71666: LD_INT 1
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 1
71675: NEG
71676: PUSH
71677: LD_INT 0
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 1
71686: NEG
71687: PUSH
71688: LD_INT 1
71690: NEG
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 1
71698: NEG
71699: PUSH
71700: LD_INT 2
71702: NEG
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: PUSH
71708: LD_INT 0
71710: PUSH
71711: LD_INT 2
71713: NEG
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 1
71721: PUSH
71722: LD_INT 1
71724: NEG
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 2
71732: PUSH
71733: LD_INT 0
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 2
71742: PUSH
71743: LD_INT 1
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 1
71752: PUSH
71753: LD_INT 2
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: LD_INT 0
71762: PUSH
71763: LD_INT 2
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 1
71772: NEG
71773: PUSH
71774: LD_INT 1
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 2
71783: NEG
71784: PUSH
71785: LD_INT 0
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: LD_INT 2
71794: NEG
71795: PUSH
71796: LD_INT 1
71798: NEG
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: PUSH
71804: LD_INT 1
71806: NEG
71807: PUSH
71808: LD_INT 3
71810: NEG
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: LD_INT 0
71818: PUSH
71819: LD_INT 3
71821: NEG
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 1
71829: PUSH
71830: LD_INT 2
71832: NEG
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: LD_INT 2
71840: PUSH
71841: LD_INT 1
71843: NEG
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 3
71851: PUSH
71852: LD_INT 0
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 3
71861: PUSH
71862: LD_INT 1
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 1
71871: PUSH
71872: LD_INT 3
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 0
71881: PUSH
71882: LD_INT 3
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: LD_INT 1
71891: NEG
71892: PUSH
71893: LD_INT 2
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 2
71902: NEG
71903: PUSH
71904: LD_INT 1
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: LD_INT 3
71913: NEG
71914: PUSH
71915: LD_INT 0
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: PUSH
71922: LD_INT 3
71924: NEG
71925: PUSH
71926: LD_INT 1
71928: NEG
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71965: LD_ADDR_VAR 0 44
71969: PUSH
71970: LD_INT 0
71972: PUSH
71973: LD_INT 0
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 0
71982: PUSH
71983: LD_INT 1
71985: NEG
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 1
71993: PUSH
71994: LD_INT 0
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 1
72003: PUSH
72004: LD_INT 1
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 0
72013: PUSH
72014: LD_INT 1
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 1
72023: NEG
72024: PUSH
72025: LD_INT 0
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 1
72034: NEG
72035: PUSH
72036: LD_INT 1
72038: NEG
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 1
72046: NEG
72047: PUSH
72048: LD_INT 2
72050: NEG
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PUSH
72056: LD_INT 1
72058: PUSH
72059: LD_INT 1
72061: NEG
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 2
72069: PUSH
72070: LD_INT 0
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 2
72079: PUSH
72080: LD_INT 1
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 2
72089: PUSH
72090: LD_INT 2
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PUSH
72097: LD_INT 1
72099: PUSH
72100: LD_INT 2
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PUSH
72107: LD_INT 1
72109: NEG
72110: PUSH
72111: LD_INT 1
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: LD_INT 2
72120: NEG
72121: PUSH
72122: LD_INT 0
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: LD_INT 2
72131: NEG
72132: PUSH
72133: LD_INT 1
72135: NEG
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 2
72143: NEG
72144: PUSH
72145: LD_INT 2
72147: NEG
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 2
72155: NEG
72156: PUSH
72157: LD_INT 3
72159: NEG
72160: PUSH
72161: EMPTY
72162: LIST
72163: LIST
72164: PUSH
72165: LD_INT 2
72167: PUSH
72168: LD_INT 1
72170: NEG
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 3
72178: PUSH
72179: LD_INT 0
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: LD_INT 3
72188: PUSH
72189: LD_INT 1
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_INT 3
72198: PUSH
72199: LD_INT 2
72201: PUSH
72202: EMPTY
72203: LIST
72204: LIST
72205: PUSH
72206: LD_INT 3
72208: PUSH
72209: LD_INT 3
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PUSH
72216: LD_INT 2
72218: PUSH
72219: LD_INT 3
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 2
72228: NEG
72229: PUSH
72230: LD_INT 1
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: LD_INT 3
72239: NEG
72240: PUSH
72241: LD_INT 0
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: LD_INT 3
72250: NEG
72251: PUSH
72252: LD_INT 1
72254: NEG
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 3
72262: NEG
72263: PUSH
72264: LD_INT 2
72266: NEG
72267: PUSH
72268: EMPTY
72269: LIST
72270: LIST
72271: PUSH
72272: LD_INT 3
72274: NEG
72275: PUSH
72276: LD_INT 3
72278: NEG
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72315: LD_ADDR_VAR 0 45
72319: PUSH
72320: LD_INT 0
72322: PUSH
72323: LD_INT 0
72325: PUSH
72326: EMPTY
72327: LIST
72328: LIST
72329: PUSH
72330: LD_INT 0
72332: PUSH
72333: LD_INT 1
72335: NEG
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: PUSH
72341: LD_INT 1
72343: PUSH
72344: LD_INT 0
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 1
72353: PUSH
72354: LD_INT 1
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 0
72363: PUSH
72364: LD_INT 1
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: PUSH
72371: LD_INT 1
72373: NEG
72374: PUSH
72375: LD_INT 0
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 1
72384: NEG
72385: PUSH
72386: LD_INT 1
72388: NEG
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: LD_INT 1
72396: NEG
72397: PUSH
72398: LD_INT 2
72400: NEG
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: LD_INT 0
72408: PUSH
72409: LD_INT 2
72411: NEG
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: LD_INT 1
72419: PUSH
72420: LD_INT 1
72422: NEG
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: PUSH
72428: LD_INT 2
72430: PUSH
72431: LD_INT 1
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: PUSH
72438: LD_INT 2
72440: PUSH
72441: LD_INT 2
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: PUSH
72448: LD_INT 1
72450: PUSH
72451: LD_INT 2
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: LD_INT 0
72460: PUSH
72461: LD_INT 2
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: LD_INT 1
72470: NEG
72471: PUSH
72472: LD_INT 1
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: PUSH
72479: LD_INT 2
72481: NEG
72482: PUSH
72483: LD_INT 1
72485: NEG
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 2
72493: NEG
72494: PUSH
72495: LD_INT 2
72497: NEG
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 2
72505: NEG
72506: PUSH
72507: LD_INT 3
72509: NEG
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_INT 1
72517: NEG
72518: PUSH
72519: LD_INT 3
72521: NEG
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 0
72529: PUSH
72530: LD_INT 3
72532: NEG
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 1
72540: PUSH
72541: LD_INT 2
72543: NEG
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 3
72551: PUSH
72552: LD_INT 2
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 3
72561: PUSH
72562: LD_INT 3
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 2
72571: PUSH
72572: LD_INT 3
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 1
72581: PUSH
72582: LD_INT 3
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PUSH
72589: LD_INT 0
72591: PUSH
72592: LD_INT 3
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PUSH
72599: LD_INT 1
72601: NEG
72602: PUSH
72603: LD_INT 2
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 3
72612: NEG
72613: PUSH
72614: LD_INT 2
72616: NEG
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 3
72624: NEG
72625: PUSH
72626: LD_INT 3
72628: NEG
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72665: LD_ADDR_VAR 0 46
72669: PUSH
72670: LD_INT 0
72672: PUSH
72673: LD_INT 0
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: LD_INT 0
72682: PUSH
72683: LD_INT 1
72685: NEG
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PUSH
72691: LD_INT 1
72693: PUSH
72694: LD_INT 0
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 1
72703: PUSH
72704: LD_INT 1
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: PUSH
72711: LD_INT 0
72713: PUSH
72714: LD_INT 1
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: LD_INT 1
72723: NEG
72724: PUSH
72725: LD_INT 0
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 1
72734: NEG
72735: PUSH
72736: LD_INT 1
72738: NEG
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 1
72746: NEG
72747: PUSH
72748: LD_INT 2
72750: NEG
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 0
72758: PUSH
72759: LD_INT 2
72761: NEG
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 1
72769: PUSH
72770: LD_INT 1
72772: NEG
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: PUSH
72778: LD_INT 2
72780: PUSH
72781: LD_INT 0
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: PUSH
72788: LD_INT 2
72790: PUSH
72791: LD_INT 1
72793: PUSH
72794: EMPTY
72795: LIST
72796: LIST
72797: PUSH
72798: LD_INT 1
72800: PUSH
72801: LD_INT 2
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 0
72810: PUSH
72811: LD_INT 2
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: LD_INT 1
72820: NEG
72821: PUSH
72822: LD_INT 1
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: PUSH
72829: LD_INT 2
72831: NEG
72832: PUSH
72833: LD_INT 0
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: LD_INT 2
72842: NEG
72843: PUSH
72844: LD_INT 1
72846: NEG
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 1
72854: NEG
72855: PUSH
72856: LD_INT 3
72858: NEG
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: LD_INT 0
72866: PUSH
72867: LD_INT 3
72869: NEG
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 1
72877: PUSH
72878: LD_INT 2
72880: NEG
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 2
72888: PUSH
72889: LD_INT 1
72891: NEG
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 3
72899: PUSH
72900: LD_INT 0
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 3
72909: PUSH
72910: LD_INT 1
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 1
72919: PUSH
72920: LD_INT 3
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PUSH
72927: LD_INT 0
72929: PUSH
72930: LD_INT 3
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 1
72939: NEG
72940: PUSH
72941: LD_INT 2
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 2
72950: NEG
72951: PUSH
72952: LD_INT 1
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 3
72961: NEG
72962: PUSH
72963: LD_INT 0
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 3
72972: NEG
72973: PUSH
72974: LD_INT 1
72976: NEG
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: EMPTY
72983: LIST
72984: LIST
72985: LIST
72986: LIST
72987: LIST
72988: LIST
72989: LIST
72990: LIST
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73013: LD_ADDR_VAR 0 47
73017: PUSH
73018: LD_INT 0
73020: PUSH
73021: LD_INT 0
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 0
73030: PUSH
73031: LD_INT 1
73033: NEG
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PUSH
73039: LD_INT 1
73041: PUSH
73042: LD_INT 0
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: PUSH
73049: LD_INT 1
73051: PUSH
73052: LD_INT 1
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: PUSH
73059: LD_INT 0
73061: PUSH
73062: LD_INT 1
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 1
73071: NEG
73072: PUSH
73073: LD_INT 0
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 1
73082: NEG
73083: PUSH
73084: LD_INT 1
73086: NEG
73087: PUSH
73088: EMPTY
73089: LIST
73090: LIST
73091: PUSH
73092: LD_INT 1
73094: NEG
73095: PUSH
73096: LD_INT 2
73098: NEG
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: PUSH
73104: LD_INT 0
73106: PUSH
73107: LD_INT 2
73109: NEG
73110: PUSH
73111: EMPTY
73112: LIST
73113: LIST
73114: PUSH
73115: LD_INT 1
73117: PUSH
73118: LD_INT 1
73120: NEG
73121: PUSH
73122: EMPTY
73123: LIST
73124: LIST
73125: PUSH
73126: LD_INT 2
73128: NEG
73129: PUSH
73130: LD_INT 1
73132: NEG
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: PUSH
73138: LD_INT 2
73140: NEG
73141: PUSH
73142: LD_INT 2
73144: NEG
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73164: LD_ADDR_VAR 0 48
73168: PUSH
73169: LD_INT 0
73171: PUSH
73172: LD_INT 0
73174: PUSH
73175: EMPTY
73176: LIST
73177: LIST
73178: PUSH
73179: LD_INT 0
73181: PUSH
73182: LD_INT 1
73184: NEG
73185: PUSH
73186: EMPTY
73187: LIST
73188: LIST
73189: PUSH
73190: LD_INT 1
73192: PUSH
73193: LD_INT 0
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: LD_INT 1
73202: PUSH
73203: LD_INT 1
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: PUSH
73210: LD_INT 0
73212: PUSH
73213: LD_INT 1
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: PUSH
73220: LD_INT 1
73222: NEG
73223: PUSH
73224: LD_INT 0
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 1
73233: NEG
73234: PUSH
73235: LD_INT 1
73237: NEG
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PUSH
73243: LD_INT 1
73245: NEG
73246: PUSH
73247: LD_INT 2
73249: NEG
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PUSH
73255: LD_INT 0
73257: PUSH
73258: LD_INT 2
73260: NEG
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: PUSH
73266: LD_INT 1
73268: PUSH
73269: LD_INT 1
73271: NEG
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: PUSH
73277: LD_INT 2
73279: PUSH
73280: LD_INT 0
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: PUSH
73287: LD_INT 2
73289: PUSH
73290: LD_INT 1
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: LIST
73301: LIST
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73311: LD_ADDR_VAR 0 49
73315: PUSH
73316: LD_INT 0
73318: PUSH
73319: LD_INT 0
73321: PUSH
73322: EMPTY
73323: LIST
73324: LIST
73325: PUSH
73326: LD_INT 0
73328: PUSH
73329: LD_INT 1
73331: NEG
73332: PUSH
73333: EMPTY
73334: LIST
73335: LIST
73336: PUSH
73337: LD_INT 1
73339: PUSH
73340: LD_INT 0
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: PUSH
73347: LD_INT 1
73349: PUSH
73350: LD_INT 1
73352: PUSH
73353: EMPTY
73354: LIST
73355: LIST
73356: PUSH
73357: LD_INT 0
73359: PUSH
73360: LD_INT 1
73362: PUSH
73363: EMPTY
73364: LIST
73365: LIST
73366: PUSH
73367: LD_INT 1
73369: NEG
73370: PUSH
73371: LD_INT 0
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: LD_INT 1
73380: NEG
73381: PUSH
73382: LD_INT 1
73384: NEG
73385: PUSH
73386: EMPTY
73387: LIST
73388: LIST
73389: PUSH
73390: LD_INT 1
73392: PUSH
73393: LD_INT 1
73395: NEG
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PUSH
73401: LD_INT 2
73403: PUSH
73404: LD_INT 0
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: LD_INT 2
73413: PUSH
73414: LD_INT 1
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: PUSH
73421: LD_INT 2
73423: PUSH
73424: LD_INT 2
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_INT 1
73433: PUSH
73434: LD_INT 2
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73455: LD_ADDR_VAR 0 50
73459: PUSH
73460: LD_INT 0
73462: PUSH
73463: LD_INT 0
73465: PUSH
73466: EMPTY
73467: LIST
73468: LIST
73469: PUSH
73470: LD_INT 0
73472: PUSH
73473: LD_INT 1
73475: NEG
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 1
73483: PUSH
73484: LD_INT 0
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PUSH
73491: LD_INT 1
73493: PUSH
73494: LD_INT 1
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: PUSH
73501: LD_INT 0
73503: PUSH
73504: LD_INT 1
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: LD_INT 1
73513: NEG
73514: PUSH
73515: LD_INT 0
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: PUSH
73522: LD_INT 1
73524: NEG
73525: PUSH
73526: LD_INT 1
73528: NEG
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: PUSH
73534: LD_INT 2
73536: PUSH
73537: LD_INT 1
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 2
73546: PUSH
73547: LD_INT 2
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 1
73556: PUSH
73557: LD_INT 2
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: LD_INT 0
73566: PUSH
73567: LD_INT 2
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PUSH
73574: LD_INT 1
73576: NEG
73577: PUSH
73578: LD_INT 1
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73599: LD_ADDR_VAR 0 51
73603: PUSH
73604: LD_INT 0
73606: PUSH
73607: LD_INT 0
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_INT 0
73616: PUSH
73617: LD_INT 1
73619: NEG
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: PUSH
73625: LD_INT 1
73627: PUSH
73628: LD_INT 0
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 1
73637: PUSH
73638: LD_INT 1
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: PUSH
73645: LD_INT 0
73647: PUSH
73648: LD_INT 1
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 1
73657: NEG
73658: PUSH
73659: LD_INT 0
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: LD_INT 1
73668: NEG
73669: PUSH
73670: LD_INT 1
73672: NEG
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: PUSH
73678: LD_INT 1
73680: PUSH
73681: LD_INT 2
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 0
73690: PUSH
73691: LD_INT 2
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: LD_INT 1
73700: NEG
73701: PUSH
73702: LD_INT 1
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: PUSH
73709: LD_INT 2
73711: NEG
73712: PUSH
73713: LD_INT 0
73715: PUSH
73716: EMPTY
73717: LIST
73718: LIST
73719: PUSH
73720: LD_INT 2
73722: NEG
73723: PUSH
73724: LD_INT 1
73726: NEG
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73746: LD_ADDR_VAR 0 52
73750: PUSH
73751: LD_INT 0
73753: PUSH
73754: LD_INT 0
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 0
73763: PUSH
73764: LD_INT 1
73766: NEG
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: PUSH
73772: LD_INT 1
73774: PUSH
73775: LD_INT 0
73777: PUSH
73778: EMPTY
73779: LIST
73780: LIST
73781: PUSH
73782: LD_INT 1
73784: PUSH
73785: LD_INT 1
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: PUSH
73792: LD_INT 0
73794: PUSH
73795: LD_INT 1
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: PUSH
73802: LD_INT 1
73804: NEG
73805: PUSH
73806: LD_INT 0
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: PUSH
73813: LD_INT 1
73815: NEG
73816: PUSH
73817: LD_INT 1
73819: NEG
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: PUSH
73825: LD_INT 1
73827: NEG
73828: PUSH
73829: LD_INT 2
73831: NEG
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PUSH
73837: LD_INT 1
73839: NEG
73840: PUSH
73841: LD_INT 1
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: PUSH
73848: LD_INT 2
73850: NEG
73851: PUSH
73852: LD_INT 0
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: PUSH
73859: LD_INT 2
73861: NEG
73862: PUSH
73863: LD_INT 1
73865: NEG
73866: PUSH
73867: EMPTY
73868: LIST
73869: LIST
73870: PUSH
73871: LD_INT 2
73873: NEG
73874: PUSH
73875: LD_INT 2
73877: NEG
73878: PUSH
73879: EMPTY
73880: LIST
73881: LIST
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: LIST
73887: LIST
73888: LIST
73889: LIST
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73897: LD_ADDR_VAR 0 53
73901: PUSH
73902: LD_INT 0
73904: PUSH
73905: LD_INT 0
73907: PUSH
73908: EMPTY
73909: LIST
73910: LIST
73911: PUSH
73912: LD_INT 0
73914: PUSH
73915: LD_INT 1
73917: NEG
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: PUSH
73923: LD_INT 1
73925: PUSH
73926: LD_INT 0
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: PUSH
73933: LD_INT 1
73935: PUSH
73936: LD_INT 1
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: PUSH
73943: LD_INT 0
73945: PUSH
73946: LD_INT 1
73948: PUSH
73949: EMPTY
73950: LIST
73951: LIST
73952: PUSH
73953: LD_INT 1
73955: NEG
73956: PUSH
73957: LD_INT 0
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: PUSH
73964: LD_INT 1
73966: NEG
73967: PUSH
73968: LD_INT 1
73970: NEG
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: PUSH
73976: LD_INT 1
73978: NEG
73979: PUSH
73980: LD_INT 2
73982: NEG
73983: PUSH
73984: EMPTY
73985: LIST
73986: LIST
73987: PUSH
73988: LD_INT 0
73990: PUSH
73991: LD_INT 2
73993: NEG
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: LD_INT 1
74001: PUSH
74002: LD_INT 1
74004: NEG
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: LD_INT 2
74012: PUSH
74013: LD_INT 0
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 2
74022: PUSH
74023: LD_INT 1
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PUSH
74030: LD_INT 2
74032: PUSH
74033: LD_INT 2
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PUSH
74040: LD_INT 1
74042: PUSH
74043: LD_INT 2
74045: PUSH
74046: EMPTY
74047: LIST
74048: LIST
74049: PUSH
74050: LD_INT 0
74052: PUSH
74053: LD_INT 2
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: PUSH
74060: LD_INT 1
74062: NEG
74063: PUSH
74064: LD_INT 1
74066: PUSH
74067: EMPTY
74068: LIST
74069: LIST
74070: PUSH
74071: LD_INT 2
74073: NEG
74074: PUSH
74075: LD_INT 0
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: PUSH
74082: LD_INT 2
74084: NEG
74085: PUSH
74086: LD_INT 1
74088: NEG
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: LD_INT 2
74096: NEG
74097: PUSH
74098: LD_INT 2
74100: NEG
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74127: LD_ADDR_VAR 0 54
74131: PUSH
74132: LD_INT 0
74134: PUSH
74135: LD_INT 0
74137: PUSH
74138: EMPTY
74139: LIST
74140: LIST
74141: PUSH
74142: LD_INT 0
74144: PUSH
74145: LD_INT 1
74147: NEG
74148: PUSH
74149: EMPTY
74150: LIST
74151: LIST
74152: PUSH
74153: LD_INT 1
74155: PUSH
74156: LD_INT 0
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: PUSH
74163: LD_INT 1
74165: PUSH
74166: LD_INT 1
74168: PUSH
74169: EMPTY
74170: LIST
74171: LIST
74172: PUSH
74173: LD_INT 0
74175: PUSH
74176: LD_INT 1
74178: PUSH
74179: EMPTY
74180: LIST
74181: LIST
74182: PUSH
74183: LD_INT 1
74185: NEG
74186: PUSH
74187: LD_INT 0
74189: PUSH
74190: EMPTY
74191: LIST
74192: LIST
74193: PUSH
74194: LD_INT 1
74196: NEG
74197: PUSH
74198: LD_INT 1
74200: NEG
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 1
74208: NEG
74209: PUSH
74210: LD_INT 2
74212: NEG
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PUSH
74218: LD_INT 0
74220: PUSH
74221: LD_INT 2
74223: NEG
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: PUSH
74229: LD_INT 1
74231: PUSH
74232: LD_INT 1
74234: NEG
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: PUSH
74240: LD_INT 2
74242: PUSH
74243: LD_INT 0
74245: PUSH
74246: EMPTY
74247: LIST
74248: LIST
74249: PUSH
74250: LD_INT 2
74252: PUSH
74253: LD_INT 1
74255: PUSH
74256: EMPTY
74257: LIST
74258: LIST
74259: PUSH
74260: LD_INT 2
74262: PUSH
74263: LD_INT 2
74265: PUSH
74266: EMPTY
74267: LIST
74268: LIST
74269: PUSH
74270: LD_INT 1
74272: PUSH
74273: LD_INT 2
74275: PUSH
74276: EMPTY
74277: LIST
74278: LIST
74279: PUSH
74280: LD_INT 0
74282: PUSH
74283: LD_INT 2
74285: PUSH
74286: EMPTY
74287: LIST
74288: LIST
74289: PUSH
74290: LD_INT 1
74292: NEG
74293: PUSH
74294: LD_INT 1
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: PUSH
74301: LD_INT 2
74303: NEG
74304: PUSH
74305: LD_INT 0
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: PUSH
74312: LD_INT 2
74314: NEG
74315: PUSH
74316: LD_INT 1
74318: NEG
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PUSH
74324: LD_INT 2
74326: NEG
74327: PUSH
74328: LD_INT 2
74330: NEG
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74357: LD_ADDR_VAR 0 55
74361: PUSH
74362: LD_INT 0
74364: PUSH
74365: LD_INT 0
74367: PUSH
74368: EMPTY
74369: LIST
74370: LIST
74371: PUSH
74372: LD_INT 0
74374: PUSH
74375: LD_INT 1
74377: NEG
74378: PUSH
74379: EMPTY
74380: LIST
74381: LIST
74382: PUSH
74383: LD_INT 1
74385: PUSH
74386: LD_INT 0
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: PUSH
74393: LD_INT 1
74395: PUSH
74396: LD_INT 1
74398: PUSH
74399: EMPTY
74400: LIST
74401: LIST
74402: PUSH
74403: LD_INT 0
74405: PUSH
74406: LD_INT 1
74408: PUSH
74409: EMPTY
74410: LIST
74411: LIST
74412: PUSH
74413: LD_INT 1
74415: NEG
74416: PUSH
74417: LD_INT 0
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: PUSH
74424: LD_INT 1
74426: NEG
74427: PUSH
74428: LD_INT 1
74430: NEG
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: PUSH
74436: LD_INT 1
74438: NEG
74439: PUSH
74440: LD_INT 2
74442: NEG
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: PUSH
74448: LD_INT 0
74450: PUSH
74451: LD_INT 2
74453: NEG
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: PUSH
74459: LD_INT 1
74461: PUSH
74462: LD_INT 1
74464: NEG
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: PUSH
74470: LD_INT 2
74472: PUSH
74473: LD_INT 0
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: PUSH
74480: LD_INT 2
74482: PUSH
74483: LD_INT 1
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: PUSH
74490: LD_INT 2
74492: PUSH
74493: LD_INT 2
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: PUSH
74500: LD_INT 1
74502: PUSH
74503: LD_INT 2
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: PUSH
74510: LD_INT 0
74512: PUSH
74513: LD_INT 2
74515: PUSH
74516: EMPTY
74517: LIST
74518: LIST
74519: PUSH
74520: LD_INT 1
74522: NEG
74523: PUSH
74524: LD_INT 1
74526: PUSH
74527: EMPTY
74528: LIST
74529: LIST
74530: PUSH
74531: LD_INT 2
74533: NEG
74534: PUSH
74535: LD_INT 0
74537: PUSH
74538: EMPTY
74539: LIST
74540: LIST
74541: PUSH
74542: LD_INT 2
74544: NEG
74545: PUSH
74546: LD_INT 1
74548: NEG
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: PUSH
74554: LD_INT 2
74556: NEG
74557: PUSH
74558: LD_INT 2
74560: NEG
74561: PUSH
74562: EMPTY
74563: LIST
74564: LIST
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: LIST
74577: LIST
74578: LIST
74579: LIST
74580: LIST
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: LIST
74586: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74587: LD_ADDR_VAR 0 56
74591: PUSH
74592: LD_INT 0
74594: PUSH
74595: LD_INT 0
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: PUSH
74602: LD_INT 0
74604: PUSH
74605: LD_INT 1
74607: NEG
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: PUSH
74613: LD_INT 1
74615: PUSH
74616: LD_INT 0
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: PUSH
74623: LD_INT 1
74625: PUSH
74626: LD_INT 1
74628: PUSH
74629: EMPTY
74630: LIST
74631: LIST
74632: PUSH
74633: LD_INT 0
74635: PUSH
74636: LD_INT 1
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: PUSH
74643: LD_INT 1
74645: NEG
74646: PUSH
74647: LD_INT 0
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: PUSH
74654: LD_INT 1
74656: NEG
74657: PUSH
74658: LD_INT 1
74660: NEG
74661: PUSH
74662: EMPTY
74663: LIST
74664: LIST
74665: PUSH
74666: LD_INT 1
74668: NEG
74669: PUSH
74670: LD_INT 2
74672: NEG
74673: PUSH
74674: EMPTY
74675: LIST
74676: LIST
74677: PUSH
74678: LD_INT 0
74680: PUSH
74681: LD_INT 2
74683: NEG
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: PUSH
74689: LD_INT 1
74691: PUSH
74692: LD_INT 1
74694: NEG
74695: PUSH
74696: EMPTY
74697: LIST
74698: LIST
74699: PUSH
74700: LD_INT 2
74702: PUSH
74703: LD_INT 0
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: PUSH
74710: LD_INT 2
74712: PUSH
74713: LD_INT 1
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: PUSH
74720: LD_INT 2
74722: PUSH
74723: LD_INT 2
74725: PUSH
74726: EMPTY
74727: LIST
74728: LIST
74729: PUSH
74730: LD_INT 1
74732: PUSH
74733: LD_INT 2
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: PUSH
74740: LD_INT 0
74742: PUSH
74743: LD_INT 2
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: PUSH
74750: LD_INT 1
74752: NEG
74753: PUSH
74754: LD_INT 1
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: LD_INT 2
74763: NEG
74764: PUSH
74765: LD_INT 0
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: PUSH
74772: LD_INT 2
74774: NEG
74775: PUSH
74776: LD_INT 1
74778: NEG
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: PUSH
74784: LD_INT 2
74786: NEG
74787: PUSH
74788: LD_INT 2
74790: NEG
74791: PUSH
74792: EMPTY
74793: LIST
74794: LIST
74795: PUSH
74796: EMPTY
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74817: LD_ADDR_VAR 0 57
74821: PUSH
74822: LD_INT 0
74824: PUSH
74825: LD_INT 0
74827: PUSH
74828: EMPTY
74829: LIST
74830: LIST
74831: PUSH
74832: LD_INT 0
74834: PUSH
74835: LD_INT 1
74837: NEG
74838: PUSH
74839: EMPTY
74840: LIST
74841: LIST
74842: PUSH
74843: LD_INT 1
74845: PUSH
74846: LD_INT 0
74848: PUSH
74849: EMPTY
74850: LIST
74851: LIST
74852: PUSH
74853: LD_INT 1
74855: PUSH
74856: LD_INT 1
74858: PUSH
74859: EMPTY
74860: LIST
74861: LIST
74862: PUSH
74863: LD_INT 0
74865: PUSH
74866: LD_INT 1
74868: PUSH
74869: EMPTY
74870: LIST
74871: LIST
74872: PUSH
74873: LD_INT 1
74875: NEG
74876: PUSH
74877: LD_INT 0
74879: PUSH
74880: EMPTY
74881: LIST
74882: LIST
74883: PUSH
74884: LD_INT 1
74886: NEG
74887: PUSH
74888: LD_INT 1
74890: NEG
74891: PUSH
74892: EMPTY
74893: LIST
74894: LIST
74895: PUSH
74896: LD_INT 1
74898: NEG
74899: PUSH
74900: LD_INT 2
74902: NEG
74903: PUSH
74904: EMPTY
74905: LIST
74906: LIST
74907: PUSH
74908: LD_INT 0
74910: PUSH
74911: LD_INT 2
74913: NEG
74914: PUSH
74915: EMPTY
74916: LIST
74917: LIST
74918: PUSH
74919: LD_INT 1
74921: PUSH
74922: LD_INT 1
74924: NEG
74925: PUSH
74926: EMPTY
74927: LIST
74928: LIST
74929: PUSH
74930: LD_INT 2
74932: PUSH
74933: LD_INT 0
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: PUSH
74940: LD_INT 2
74942: PUSH
74943: LD_INT 1
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: PUSH
74950: LD_INT 2
74952: PUSH
74953: LD_INT 2
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: PUSH
74960: LD_INT 1
74962: PUSH
74963: LD_INT 2
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: PUSH
74970: LD_INT 0
74972: PUSH
74973: LD_INT 2
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: PUSH
74980: LD_INT 1
74982: NEG
74983: PUSH
74984: LD_INT 1
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: PUSH
74991: LD_INT 2
74993: NEG
74994: PUSH
74995: LD_INT 0
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: PUSH
75002: LD_INT 2
75004: NEG
75005: PUSH
75006: LD_INT 1
75008: NEG
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PUSH
75014: LD_INT 2
75016: NEG
75017: PUSH
75018: LD_INT 2
75020: NEG
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: LIST
75046: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75047: LD_ADDR_VAR 0 58
75051: PUSH
75052: LD_INT 0
75054: PUSH
75055: LD_INT 0
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: PUSH
75062: LD_INT 0
75064: PUSH
75065: LD_INT 1
75067: NEG
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: PUSH
75073: LD_INT 1
75075: PUSH
75076: LD_INT 0
75078: PUSH
75079: EMPTY
75080: LIST
75081: LIST
75082: PUSH
75083: LD_INT 1
75085: PUSH
75086: LD_INT 1
75088: PUSH
75089: EMPTY
75090: LIST
75091: LIST
75092: PUSH
75093: LD_INT 0
75095: PUSH
75096: LD_INT 1
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: PUSH
75103: LD_INT 1
75105: NEG
75106: PUSH
75107: LD_INT 0
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: PUSH
75114: LD_INT 1
75116: NEG
75117: PUSH
75118: LD_INT 1
75120: NEG
75121: PUSH
75122: EMPTY
75123: LIST
75124: LIST
75125: PUSH
75126: LD_INT 1
75128: NEG
75129: PUSH
75130: LD_INT 2
75132: NEG
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: PUSH
75138: LD_INT 0
75140: PUSH
75141: LD_INT 2
75143: NEG
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: PUSH
75149: LD_INT 1
75151: PUSH
75152: LD_INT 1
75154: NEG
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: LD_INT 2
75162: PUSH
75163: LD_INT 0
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: LD_INT 2
75172: PUSH
75173: LD_INT 1
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: PUSH
75180: LD_INT 2
75182: PUSH
75183: LD_INT 2
75185: PUSH
75186: EMPTY
75187: LIST
75188: LIST
75189: PUSH
75190: LD_INT 1
75192: PUSH
75193: LD_INT 2
75195: PUSH
75196: EMPTY
75197: LIST
75198: LIST
75199: PUSH
75200: LD_INT 0
75202: PUSH
75203: LD_INT 2
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PUSH
75210: LD_INT 1
75212: NEG
75213: PUSH
75214: LD_INT 1
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: PUSH
75221: LD_INT 2
75223: NEG
75224: PUSH
75225: LD_INT 0
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: PUSH
75232: LD_INT 2
75234: NEG
75235: PUSH
75236: LD_INT 1
75238: NEG
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: PUSH
75244: LD_INT 2
75246: NEG
75247: PUSH
75248: LD_INT 2
75250: NEG
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: LIST
75260: LIST
75261: LIST
75262: LIST
75263: LIST
75264: LIST
75265: LIST
75266: LIST
75267: LIST
75268: LIST
75269: LIST
75270: LIST
75271: LIST
75272: LIST
75273: LIST
75274: LIST
75275: LIST
75276: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75277: LD_ADDR_VAR 0 59
75281: PUSH
75282: LD_INT 0
75284: PUSH
75285: LD_INT 0
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 0
75294: PUSH
75295: LD_INT 1
75297: NEG
75298: PUSH
75299: EMPTY
75300: LIST
75301: LIST
75302: PUSH
75303: LD_INT 1
75305: PUSH
75306: LD_INT 0
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: PUSH
75313: LD_INT 1
75315: PUSH
75316: LD_INT 1
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: PUSH
75323: LD_INT 0
75325: PUSH
75326: LD_INT 1
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: PUSH
75333: LD_INT 1
75335: NEG
75336: PUSH
75337: LD_INT 0
75339: PUSH
75340: EMPTY
75341: LIST
75342: LIST
75343: PUSH
75344: LD_INT 1
75346: NEG
75347: PUSH
75348: LD_INT 1
75350: NEG
75351: PUSH
75352: EMPTY
75353: LIST
75354: LIST
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75365: LD_ADDR_VAR 0 60
75369: PUSH
75370: LD_INT 0
75372: PUSH
75373: LD_INT 0
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: PUSH
75380: LD_INT 0
75382: PUSH
75383: LD_INT 1
75385: NEG
75386: PUSH
75387: EMPTY
75388: LIST
75389: LIST
75390: PUSH
75391: LD_INT 1
75393: PUSH
75394: LD_INT 0
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: PUSH
75401: LD_INT 1
75403: PUSH
75404: LD_INT 1
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: PUSH
75411: LD_INT 0
75413: PUSH
75414: LD_INT 1
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: PUSH
75421: LD_INT 1
75423: NEG
75424: PUSH
75425: LD_INT 0
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: PUSH
75432: LD_INT 1
75434: NEG
75435: PUSH
75436: LD_INT 1
75438: NEG
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: PUSH
75444: EMPTY
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75453: LD_ADDR_VAR 0 61
75457: PUSH
75458: LD_INT 0
75460: PUSH
75461: LD_INT 0
75463: PUSH
75464: EMPTY
75465: LIST
75466: LIST
75467: PUSH
75468: LD_INT 0
75470: PUSH
75471: LD_INT 1
75473: NEG
75474: PUSH
75475: EMPTY
75476: LIST
75477: LIST
75478: PUSH
75479: LD_INT 1
75481: PUSH
75482: LD_INT 0
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: PUSH
75489: LD_INT 1
75491: PUSH
75492: LD_INT 1
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: PUSH
75499: LD_INT 0
75501: PUSH
75502: LD_INT 1
75504: PUSH
75505: EMPTY
75506: LIST
75507: LIST
75508: PUSH
75509: LD_INT 1
75511: NEG
75512: PUSH
75513: LD_INT 0
75515: PUSH
75516: EMPTY
75517: LIST
75518: LIST
75519: PUSH
75520: LD_INT 1
75522: NEG
75523: PUSH
75524: LD_INT 1
75526: NEG
75527: PUSH
75528: EMPTY
75529: LIST
75530: LIST
75531: PUSH
75532: EMPTY
75533: LIST
75534: LIST
75535: LIST
75536: LIST
75537: LIST
75538: LIST
75539: LIST
75540: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75541: LD_ADDR_VAR 0 62
75545: PUSH
75546: LD_INT 0
75548: PUSH
75549: LD_INT 0
75551: PUSH
75552: EMPTY
75553: LIST
75554: LIST
75555: PUSH
75556: LD_INT 0
75558: PUSH
75559: LD_INT 1
75561: NEG
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: LD_INT 1
75569: PUSH
75570: LD_INT 0
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: PUSH
75577: LD_INT 1
75579: PUSH
75580: LD_INT 1
75582: PUSH
75583: EMPTY
75584: LIST
75585: LIST
75586: PUSH
75587: LD_INT 0
75589: PUSH
75590: LD_INT 1
75592: PUSH
75593: EMPTY
75594: LIST
75595: LIST
75596: PUSH
75597: LD_INT 1
75599: NEG
75600: PUSH
75601: LD_INT 0
75603: PUSH
75604: EMPTY
75605: LIST
75606: LIST
75607: PUSH
75608: LD_INT 1
75610: NEG
75611: PUSH
75612: LD_INT 1
75614: NEG
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: PUSH
75620: EMPTY
75621: LIST
75622: LIST
75623: LIST
75624: LIST
75625: LIST
75626: LIST
75627: LIST
75628: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75629: LD_ADDR_VAR 0 63
75633: PUSH
75634: LD_INT 0
75636: PUSH
75637: LD_INT 0
75639: PUSH
75640: EMPTY
75641: LIST
75642: LIST
75643: PUSH
75644: LD_INT 0
75646: PUSH
75647: LD_INT 1
75649: NEG
75650: PUSH
75651: EMPTY
75652: LIST
75653: LIST
75654: PUSH
75655: LD_INT 1
75657: PUSH
75658: LD_INT 0
75660: PUSH
75661: EMPTY
75662: LIST
75663: LIST
75664: PUSH
75665: LD_INT 1
75667: PUSH
75668: LD_INT 1
75670: PUSH
75671: EMPTY
75672: LIST
75673: LIST
75674: PUSH
75675: LD_INT 0
75677: PUSH
75678: LD_INT 1
75680: PUSH
75681: EMPTY
75682: LIST
75683: LIST
75684: PUSH
75685: LD_INT 1
75687: NEG
75688: PUSH
75689: LD_INT 0
75691: PUSH
75692: EMPTY
75693: LIST
75694: LIST
75695: PUSH
75696: LD_INT 1
75698: NEG
75699: PUSH
75700: LD_INT 1
75702: NEG
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: EMPTY
75709: LIST
75710: LIST
75711: LIST
75712: LIST
75713: LIST
75714: LIST
75715: LIST
75716: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75717: LD_ADDR_VAR 0 64
75721: PUSH
75722: LD_INT 0
75724: PUSH
75725: LD_INT 0
75727: PUSH
75728: EMPTY
75729: LIST
75730: LIST
75731: PUSH
75732: LD_INT 0
75734: PUSH
75735: LD_INT 1
75737: NEG
75738: PUSH
75739: EMPTY
75740: LIST
75741: LIST
75742: PUSH
75743: LD_INT 1
75745: PUSH
75746: LD_INT 0
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: PUSH
75753: LD_INT 1
75755: PUSH
75756: LD_INT 1
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PUSH
75763: LD_INT 0
75765: PUSH
75766: LD_INT 1
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: PUSH
75773: LD_INT 1
75775: NEG
75776: PUSH
75777: LD_INT 0
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: PUSH
75784: LD_INT 1
75786: NEG
75787: PUSH
75788: LD_INT 1
75790: NEG
75791: PUSH
75792: EMPTY
75793: LIST
75794: LIST
75795: PUSH
75796: EMPTY
75797: LIST
75798: LIST
75799: LIST
75800: LIST
75801: LIST
75802: LIST
75803: LIST
75804: ST_TO_ADDR
// end ; 1 :
75805: GO 81702
75807: LD_INT 1
75809: DOUBLE
75810: EQUAL
75811: IFTRUE 75815
75813: GO 78438
75815: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75816: LD_ADDR_VAR 0 11
75820: PUSH
75821: LD_INT 1
75823: NEG
75824: PUSH
75825: LD_INT 3
75827: NEG
75828: PUSH
75829: EMPTY
75830: LIST
75831: LIST
75832: PUSH
75833: LD_INT 0
75835: PUSH
75836: LD_INT 3
75838: NEG
75839: PUSH
75840: EMPTY
75841: LIST
75842: LIST
75843: PUSH
75844: LD_INT 1
75846: PUSH
75847: LD_INT 2
75849: NEG
75850: PUSH
75851: EMPTY
75852: LIST
75853: LIST
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: LIST
75859: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75860: LD_ADDR_VAR 0 12
75864: PUSH
75865: LD_INT 2
75867: PUSH
75868: LD_INT 1
75870: NEG
75871: PUSH
75872: EMPTY
75873: LIST
75874: LIST
75875: PUSH
75876: LD_INT 3
75878: PUSH
75879: LD_INT 0
75881: PUSH
75882: EMPTY
75883: LIST
75884: LIST
75885: PUSH
75886: LD_INT 3
75888: PUSH
75889: LD_INT 1
75891: PUSH
75892: EMPTY
75893: LIST
75894: LIST
75895: PUSH
75896: EMPTY
75897: LIST
75898: LIST
75899: LIST
75900: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75901: LD_ADDR_VAR 0 13
75905: PUSH
75906: LD_INT 3
75908: PUSH
75909: LD_INT 2
75911: PUSH
75912: EMPTY
75913: LIST
75914: LIST
75915: PUSH
75916: LD_INT 3
75918: PUSH
75919: LD_INT 3
75921: PUSH
75922: EMPTY
75923: LIST
75924: LIST
75925: PUSH
75926: LD_INT 2
75928: PUSH
75929: LD_INT 3
75931: PUSH
75932: EMPTY
75933: LIST
75934: LIST
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: LIST
75940: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75941: LD_ADDR_VAR 0 14
75945: PUSH
75946: LD_INT 1
75948: PUSH
75949: LD_INT 3
75951: PUSH
75952: EMPTY
75953: LIST
75954: LIST
75955: PUSH
75956: LD_INT 0
75958: PUSH
75959: LD_INT 3
75961: PUSH
75962: EMPTY
75963: LIST
75964: LIST
75965: PUSH
75966: LD_INT 1
75968: NEG
75969: PUSH
75970: LD_INT 2
75972: PUSH
75973: EMPTY
75974: LIST
75975: LIST
75976: PUSH
75977: EMPTY
75978: LIST
75979: LIST
75980: LIST
75981: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75982: LD_ADDR_VAR 0 15
75986: PUSH
75987: LD_INT 2
75989: NEG
75990: PUSH
75991: LD_INT 1
75993: PUSH
75994: EMPTY
75995: LIST
75996: LIST
75997: PUSH
75998: LD_INT 3
76000: NEG
76001: PUSH
76002: LD_INT 0
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: PUSH
76009: LD_INT 3
76011: NEG
76012: PUSH
76013: LD_INT 1
76015: NEG
76016: PUSH
76017: EMPTY
76018: LIST
76019: LIST
76020: PUSH
76021: EMPTY
76022: LIST
76023: LIST
76024: LIST
76025: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76026: LD_ADDR_VAR 0 16
76030: PUSH
76031: LD_INT 2
76033: NEG
76034: PUSH
76035: LD_INT 3
76037: NEG
76038: PUSH
76039: EMPTY
76040: LIST
76041: LIST
76042: PUSH
76043: LD_INT 3
76045: NEG
76046: PUSH
76047: LD_INT 2
76049: NEG
76050: PUSH
76051: EMPTY
76052: LIST
76053: LIST
76054: PUSH
76055: LD_INT 3
76057: NEG
76058: PUSH
76059: LD_INT 3
76061: NEG
76062: PUSH
76063: EMPTY
76064: LIST
76065: LIST
76066: PUSH
76067: EMPTY
76068: LIST
76069: LIST
76070: LIST
76071: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76072: LD_ADDR_VAR 0 17
76076: PUSH
76077: LD_INT 1
76079: NEG
76080: PUSH
76081: LD_INT 3
76083: NEG
76084: PUSH
76085: EMPTY
76086: LIST
76087: LIST
76088: PUSH
76089: LD_INT 0
76091: PUSH
76092: LD_INT 3
76094: NEG
76095: PUSH
76096: EMPTY
76097: LIST
76098: LIST
76099: PUSH
76100: LD_INT 1
76102: PUSH
76103: LD_INT 2
76105: NEG
76106: PUSH
76107: EMPTY
76108: LIST
76109: LIST
76110: PUSH
76111: EMPTY
76112: LIST
76113: LIST
76114: LIST
76115: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76116: LD_ADDR_VAR 0 18
76120: PUSH
76121: LD_INT 2
76123: PUSH
76124: LD_INT 1
76126: NEG
76127: PUSH
76128: EMPTY
76129: LIST
76130: LIST
76131: PUSH
76132: LD_INT 3
76134: PUSH
76135: LD_INT 0
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: PUSH
76142: LD_INT 3
76144: PUSH
76145: LD_INT 1
76147: PUSH
76148: EMPTY
76149: LIST
76150: LIST
76151: PUSH
76152: EMPTY
76153: LIST
76154: LIST
76155: LIST
76156: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76157: LD_ADDR_VAR 0 19
76161: PUSH
76162: LD_INT 3
76164: PUSH
76165: LD_INT 2
76167: PUSH
76168: EMPTY
76169: LIST
76170: LIST
76171: PUSH
76172: LD_INT 3
76174: PUSH
76175: LD_INT 3
76177: PUSH
76178: EMPTY
76179: LIST
76180: LIST
76181: PUSH
76182: LD_INT 2
76184: PUSH
76185: LD_INT 3
76187: PUSH
76188: EMPTY
76189: LIST
76190: LIST
76191: PUSH
76192: EMPTY
76193: LIST
76194: LIST
76195: LIST
76196: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76197: LD_ADDR_VAR 0 20
76201: PUSH
76202: LD_INT 1
76204: PUSH
76205: LD_INT 3
76207: PUSH
76208: EMPTY
76209: LIST
76210: LIST
76211: PUSH
76212: LD_INT 0
76214: PUSH
76215: LD_INT 3
76217: PUSH
76218: EMPTY
76219: LIST
76220: LIST
76221: PUSH
76222: LD_INT 1
76224: NEG
76225: PUSH
76226: LD_INT 2
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: PUSH
76233: EMPTY
76234: LIST
76235: LIST
76236: LIST
76237: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76238: LD_ADDR_VAR 0 21
76242: PUSH
76243: LD_INT 2
76245: NEG
76246: PUSH
76247: LD_INT 1
76249: PUSH
76250: EMPTY
76251: LIST
76252: LIST
76253: PUSH
76254: LD_INT 3
76256: NEG
76257: PUSH
76258: LD_INT 0
76260: PUSH
76261: EMPTY
76262: LIST
76263: LIST
76264: PUSH
76265: LD_INT 3
76267: NEG
76268: PUSH
76269: LD_INT 1
76271: NEG
76272: PUSH
76273: EMPTY
76274: LIST
76275: LIST
76276: PUSH
76277: EMPTY
76278: LIST
76279: LIST
76280: LIST
76281: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76282: LD_ADDR_VAR 0 22
76286: PUSH
76287: LD_INT 2
76289: NEG
76290: PUSH
76291: LD_INT 3
76293: NEG
76294: PUSH
76295: EMPTY
76296: LIST
76297: LIST
76298: PUSH
76299: LD_INT 3
76301: NEG
76302: PUSH
76303: LD_INT 2
76305: NEG
76306: PUSH
76307: EMPTY
76308: LIST
76309: LIST
76310: PUSH
76311: LD_INT 3
76313: NEG
76314: PUSH
76315: LD_INT 3
76317: NEG
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: PUSH
76323: EMPTY
76324: LIST
76325: LIST
76326: LIST
76327: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
76328: LD_ADDR_VAR 0 23
76332: PUSH
76333: LD_INT 0
76335: PUSH
76336: LD_INT 3
76338: NEG
76339: PUSH
76340: EMPTY
76341: LIST
76342: LIST
76343: PUSH
76344: LD_INT 1
76346: NEG
76347: PUSH
76348: LD_INT 4
76350: NEG
76351: PUSH
76352: EMPTY
76353: LIST
76354: LIST
76355: PUSH
76356: LD_INT 1
76358: PUSH
76359: LD_INT 3
76361: NEG
76362: PUSH
76363: EMPTY
76364: LIST
76365: LIST
76366: PUSH
76367: EMPTY
76368: LIST
76369: LIST
76370: LIST
76371: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
76372: LD_ADDR_VAR 0 24
76376: PUSH
76377: LD_INT 3
76379: PUSH
76380: LD_INT 0
76382: PUSH
76383: EMPTY
76384: LIST
76385: LIST
76386: PUSH
76387: LD_INT 3
76389: PUSH
76390: LD_INT 1
76392: NEG
76393: PUSH
76394: EMPTY
76395: LIST
76396: LIST
76397: PUSH
76398: LD_INT 4
76400: PUSH
76401: LD_INT 1
76403: PUSH
76404: EMPTY
76405: LIST
76406: LIST
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: LIST
76412: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
76413: LD_ADDR_VAR 0 25
76417: PUSH
76418: LD_INT 3
76420: PUSH
76421: LD_INT 3
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: PUSH
76428: LD_INT 4
76430: PUSH
76431: LD_INT 3
76433: PUSH
76434: EMPTY
76435: LIST
76436: LIST
76437: PUSH
76438: LD_INT 3
76440: PUSH
76441: LD_INT 4
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: PUSH
76448: EMPTY
76449: LIST
76450: LIST
76451: LIST
76452: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
76453: LD_ADDR_VAR 0 26
76457: PUSH
76458: LD_INT 0
76460: PUSH
76461: LD_INT 3
76463: PUSH
76464: EMPTY
76465: LIST
76466: LIST
76467: PUSH
76468: LD_INT 1
76470: PUSH
76471: LD_INT 4
76473: PUSH
76474: EMPTY
76475: LIST
76476: LIST
76477: PUSH
76478: LD_INT 1
76480: NEG
76481: PUSH
76482: LD_INT 3
76484: PUSH
76485: EMPTY
76486: LIST
76487: LIST
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: LIST
76493: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
76494: LD_ADDR_VAR 0 27
76498: PUSH
76499: LD_INT 3
76501: NEG
76502: PUSH
76503: LD_INT 0
76505: PUSH
76506: EMPTY
76507: LIST
76508: LIST
76509: PUSH
76510: LD_INT 3
76512: NEG
76513: PUSH
76514: LD_INT 1
76516: PUSH
76517: EMPTY
76518: LIST
76519: LIST
76520: PUSH
76521: LD_INT 4
76523: NEG
76524: PUSH
76525: LD_INT 1
76527: NEG
76528: PUSH
76529: EMPTY
76530: LIST
76531: LIST
76532: PUSH
76533: EMPTY
76534: LIST
76535: LIST
76536: LIST
76537: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
76538: LD_ADDR_VAR 0 28
76542: PUSH
76543: LD_INT 3
76545: NEG
76546: PUSH
76547: LD_INT 3
76549: NEG
76550: PUSH
76551: EMPTY
76552: LIST
76553: LIST
76554: PUSH
76555: LD_INT 3
76557: NEG
76558: PUSH
76559: LD_INT 4
76561: NEG
76562: PUSH
76563: EMPTY
76564: LIST
76565: LIST
76566: PUSH
76567: LD_INT 4
76569: NEG
76570: PUSH
76571: LD_INT 3
76573: NEG
76574: PUSH
76575: EMPTY
76576: LIST
76577: LIST
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: LIST
76583: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
76584: LD_ADDR_VAR 0 29
76588: PUSH
76589: LD_INT 1
76591: NEG
76592: PUSH
76593: LD_INT 3
76595: NEG
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: PUSH
76601: LD_INT 0
76603: PUSH
76604: LD_INT 3
76606: NEG
76607: PUSH
76608: EMPTY
76609: LIST
76610: LIST
76611: PUSH
76612: LD_INT 1
76614: PUSH
76615: LD_INT 2
76617: NEG
76618: PUSH
76619: EMPTY
76620: LIST
76621: LIST
76622: PUSH
76623: LD_INT 1
76625: NEG
76626: PUSH
76627: LD_INT 4
76629: NEG
76630: PUSH
76631: EMPTY
76632: LIST
76633: LIST
76634: PUSH
76635: LD_INT 0
76637: PUSH
76638: LD_INT 4
76640: NEG
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: PUSH
76646: LD_INT 1
76648: PUSH
76649: LD_INT 3
76651: NEG
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: PUSH
76657: LD_INT 1
76659: NEG
76660: PUSH
76661: LD_INT 5
76663: NEG
76664: PUSH
76665: EMPTY
76666: LIST
76667: LIST
76668: PUSH
76669: LD_INT 0
76671: PUSH
76672: LD_INT 5
76674: NEG
76675: PUSH
76676: EMPTY
76677: LIST
76678: LIST
76679: PUSH
76680: LD_INT 1
76682: PUSH
76683: LD_INT 4
76685: NEG
76686: PUSH
76687: EMPTY
76688: LIST
76689: LIST
76690: PUSH
76691: LD_INT 1
76693: NEG
76694: PUSH
76695: LD_INT 6
76697: NEG
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: PUSH
76703: LD_INT 0
76705: PUSH
76706: LD_INT 6
76708: NEG
76709: PUSH
76710: EMPTY
76711: LIST
76712: LIST
76713: PUSH
76714: LD_INT 1
76716: PUSH
76717: LD_INT 5
76719: NEG
76720: PUSH
76721: EMPTY
76722: LIST
76723: LIST
76724: PUSH
76725: EMPTY
76726: LIST
76727: LIST
76728: LIST
76729: LIST
76730: LIST
76731: LIST
76732: LIST
76733: LIST
76734: LIST
76735: LIST
76736: LIST
76737: LIST
76738: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
76739: LD_ADDR_VAR 0 30
76743: PUSH
76744: LD_INT 2
76746: PUSH
76747: LD_INT 1
76749: NEG
76750: PUSH
76751: EMPTY
76752: LIST
76753: LIST
76754: PUSH
76755: LD_INT 3
76757: PUSH
76758: LD_INT 0
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PUSH
76765: LD_INT 3
76767: PUSH
76768: LD_INT 1
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: PUSH
76775: LD_INT 3
76777: PUSH
76778: LD_INT 1
76780: NEG
76781: PUSH
76782: EMPTY
76783: LIST
76784: LIST
76785: PUSH
76786: LD_INT 4
76788: PUSH
76789: LD_INT 0
76791: PUSH
76792: EMPTY
76793: LIST
76794: LIST
76795: PUSH
76796: LD_INT 4
76798: PUSH
76799: LD_INT 1
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: PUSH
76806: LD_INT 4
76808: PUSH
76809: LD_INT 1
76811: NEG
76812: PUSH
76813: EMPTY
76814: LIST
76815: LIST
76816: PUSH
76817: LD_INT 5
76819: PUSH
76820: LD_INT 0
76822: PUSH
76823: EMPTY
76824: LIST
76825: LIST
76826: PUSH
76827: LD_INT 5
76829: PUSH
76830: LD_INT 1
76832: PUSH
76833: EMPTY
76834: LIST
76835: LIST
76836: PUSH
76837: LD_INT 5
76839: PUSH
76840: LD_INT 1
76842: NEG
76843: PUSH
76844: EMPTY
76845: LIST
76846: LIST
76847: PUSH
76848: LD_INT 6
76850: PUSH
76851: LD_INT 0
76853: PUSH
76854: EMPTY
76855: LIST
76856: LIST
76857: PUSH
76858: LD_INT 6
76860: PUSH
76861: LD_INT 1
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: LIST
76872: LIST
76873: LIST
76874: LIST
76875: LIST
76876: LIST
76877: LIST
76878: LIST
76879: LIST
76880: LIST
76881: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
76882: LD_ADDR_VAR 0 31
76886: PUSH
76887: LD_INT 3
76889: PUSH
76890: LD_INT 2
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: LD_INT 3
76899: PUSH
76900: LD_INT 3
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: PUSH
76907: LD_INT 2
76909: PUSH
76910: LD_INT 3
76912: PUSH
76913: EMPTY
76914: LIST
76915: LIST
76916: PUSH
76917: LD_INT 4
76919: PUSH
76920: LD_INT 3
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: PUSH
76927: LD_INT 4
76929: PUSH
76930: LD_INT 4
76932: PUSH
76933: EMPTY
76934: LIST
76935: LIST
76936: PUSH
76937: LD_INT 3
76939: PUSH
76940: LD_INT 4
76942: PUSH
76943: EMPTY
76944: LIST
76945: LIST
76946: PUSH
76947: LD_INT 5
76949: PUSH
76950: LD_INT 4
76952: PUSH
76953: EMPTY
76954: LIST
76955: LIST
76956: PUSH
76957: LD_INT 5
76959: PUSH
76960: LD_INT 5
76962: PUSH
76963: EMPTY
76964: LIST
76965: LIST
76966: PUSH
76967: LD_INT 4
76969: PUSH
76970: LD_INT 5
76972: PUSH
76973: EMPTY
76974: LIST
76975: LIST
76976: PUSH
76977: LD_INT 6
76979: PUSH
76980: LD_INT 5
76982: PUSH
76983: EMPTY
76984: LIST
76985: LIST
76986: PUSH
76987: LD_INT 6
76989: PUSH
76990: LD_INT 6
76992: PUSH
76993: EMPTY
76994: LIST
76995: LIST
76996: PUSH
76997: LD_INT 5
76999: PUSH
77000: LD_INT 6
77002: PUSH
77003: EMPTY
77004: LIST
77005: LIST
77006: PUSH
77007: EMPTY
77008: LIST
77009: LIST
77010: LIST
77011: LIST
77012: LIST
77013: LIST
77014: LIST
77015: LIST
77016: LIST
77017: LIST
77018: LIST
77019: LIST
77020: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
77021: LD_ADDR_VAR 0 32
77025: PUSH
77026: LD_INT 1
77028: PUSH
77029: LD_INT 3
77031: PUSH
77032: EMPTY
77033: LIST
77034: LIST
77035: PUSH
77036: LD_INT 0
77038: PUSH
77039: LD_INT 3
77041: PUSH
77042: EMPTY
77043: LIST
77044: LIST
77045: PUSH
77046: LD_INT 1
77048: NEG
77049: PUSH
77050: LD_INT 2
77052: PUSH
77053: EMPTY
77054: LIST
77055: LIST
77056: PUSH
77057: LD_INT 1
77059: PUSH
77060: LD_INT 4
77062: PUSH
77063: EMPTY
77064: LIST
77065: LIST
77066: PUSH
77067: LD_INT 0
77069: PUSH
77070: LD_INT 4
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: PUSH
77077: LD_INT 1
77079: NEG
77080: PUSH
77081: LD_INT 3
77083: PUSH
77084: EMPTY
77085: LIST
77086: LIST
77087: PUSH
77088: LD_INT 1
77090: PUSH
77091: LD_INT 5
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: PUSH
77098: LD_INT 0
77100: PUSH
77101: LD_INT 5
77103: PUSH
77104: EMPTY
77105: LIST
77106: LIST
77107: PUSH
77108: LD_INT 1
77110: NEG
77111: PUSH
77112: LD_INT 4
77114: PUSH
77115: EMPTY
77116: LIST
77117: LIST
77118: PUSH
77119: LD_INT 1
77121: PUSH
77122: LD_INT 6
77124: PUSH
77125: EMPTY
77126: LIST
77127: LIST
77128: PUSH
77129: LD_INT 0
77131: PUSH
77132: LD_INT 6
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: PUSH
77139: LD_INT 1
77141: NEG
77142: PUSH
77143: LD_INT 5
77145: PUSH
77146: EMPTY
77147: LIST
77148: LIST
77149: PUSH
77150: EMPTY
77151: LIST
77152: LIST
77153: LIST
77154: LIST
77155: LIST
77156: LIST
77157: LIST
77158: LIST
77159: LIST
77160: LIST
77161: LIST
77162: LIST
77163: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
77164: LD_ADDR_VAR 0 33
77168: PUSH
77169: LD_INT 2
77171: NEG
77172: PUSH
77173: LD_INT 1
77175: PUSH
77176: EMPTY
77177: LIST
77178: LIST
77179: PUSH
77180: LD_INT 3
77182: NEG
77183: PUSH
77184: LD_INT 0
77186: PUSH
77187: EMPTY
77188: LIST
77189: LIST
77190: PUSH
77191: LD_INT 3
77193: NEG
77194: PUSH
77195: LD_INT 1
77197: NEG
77198: PUSH
77199: EMPTY
77200: LIST
77201: LIST
77202: PUSH
77203: LD_INT 3
77205: NEG
77206: PUSH
77207: LD_INT 1
77209: PUSH
77210: EMPTY
77211: LIST
77212: LIST
77213: PUSH
77214: LD_INT 4
77216: NEG
77217: PUSH
77218: LD_INT 0
77220: PUSH
77221: EMPTY
77222: LIST
77223: LIST
77224: PUSH
77225: LD_INT 4
77227: NEG
77228: PUSH
77229: LD_INT 1
77231: NEG
77232: PUSH
77233: EMPTY
77234: LIST
77235: LIST
77236: PUSH
77237: LD_INT 4
77239: NEG
77240: PUSH
77241: LD_INT 1
77243: PUSH
77244: EMPTY
77245: LIST
77246: LIST
77247: PUSH
77248: LD_INT 5
77250: NEG
77251: PUSH
77252: LD_INT 0
77254: PUSH
77255: EMPTY
77256: LIST
77257: LIST
77258: PUSH
77259: LD_INT 5
77261: NEG
77262: PUSH
77263: LD_INT 1
77265: NEG
77266: PUSH
77267: EMPTY
77268: LIST
77269: LIST
77270: PUSH
77271: LD_INT 5
77273: NEG
77274: PUSH
77275: LD_INT 1
77277: PUSH
77278: EMPTY
77279: LIST
77280: LIST
77281: PUSH
77282: LD_INT 6
77284: NEG
77285: PUSH
77286: LD_INT 0
77288: PUSH
77289: EMPTY
77290: LIST
77291: LIST
77292: PUSH
77293: LD_INT 6
77295: NEG
77296: PUSH
77297: LD_INT 1
77299: NEG
77300: PUSH
77301: EMPTY
77302: LIST
77303: LIST
77304: PUSH
77305: EMPTY
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: LIST
77315: LIST
77316: LIST
77317: LIST
77318: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
77319: LD_ADDR_VAR 0 34
77323: PUSH
77324: LD_INT 2
77326: NEG
77327: PUSH
77328: LD_INT 3
77330: NEG
77331: PUSH
77332: EMPTY
77333: LIST
77334: LIST
77335: PUSH
77336: LD_INT 3
77338: NEG
77339: PUSH
77340: LD_INT 2
77342: NEG
77343: PUSH
77344: EMPTY
77345: LIST
77346: LIST
77347: PUSH
77348: LD_INT 3
77350: NEG
77351: PUSH
77352: LD_INT 3
77354: NEG
77355: PUSH
77356: EMPTY
77357: LIST
77358: LIST
77359: PUSH
77360: LD_INT 3
77362: NEG
77363: PUSH
77364: LD_INT 4
77366: NEG
77367: PUSH
77368: EMPTY
77369: LIST
77370: LIST
77371: PUSH
77372: LD_INT 4
77374: NEG
77375: PUSH
77376: LD_INT 3
77378: NEG
77379: PUSH
77380: EMPTY
77381: LIST
77382: LIST
77383: PUSH
77384: LD_INT 4
77386: NEG
77387: PUSH
77388: LD_INT 4
77390: NEG
77391: PUSH
77392: EMPTY
77393: LIST
77394: LIST
77395: PUSH
77396: LD_INT 4
77398: NEG
77399: PUSH
77400: LD_INT 5
77402: NEG
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: PUSH
77408: LD_INT 5
77410: NEG
77411: PUSH
77412: LD_INT 4
77414: NEG
77415: PUSH
77416: EMPTY
77417: LIST
77418: LIST
77419: PUSH
77420: LD_INT 5
77422: NEG
77423: PUSH
77424: LD_INT 5
77426: NEG
77427: PUSH
77428: EMPTY
77429: LIST
77430: LIST
77431: PUSH
77432: LD_INT 5
77434: NEG
77435: PUSH
77436: LD_INT 6
77438: NEG
77439: PUSH
77440: EMPTY
77441: LIST
77442: LIST
77443: PUSH
77444: LD_INT 6
77446: NEG
77447: PUSH
77448: LD_INT 5
77450: NEG
77451: PUSH
77452: EMPTY
77453: LIST
77454: LIST
77455: PUSH
77456: LD_INT 6
77458: NEG
77459: PUSH
77460: LD_INT 6
77462: NEG
77463: PUSH
77464: EMPTY
77465: LIST
77466: LIST
77467: PUSH
77468: EMPTY
77469: LIST
77470: LIST
77471: LIST
77472: LIST
77473: LIST
77474: LIST
77475: LIST
77476: LIST
77477: LIST
77478: LIST
77479: LIST
77480: LIST
77481: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
77482: LD_ADDR_VAR 0 41
77486: PUSH
77487: LD_INT 0
77489: PUSH
77490: LD_INT 2
77492: NEG
77493: PUSH
77494: EMPTY
77495: LIST
77496: LIST
77497: PUSH
77498: LD_INT 1
77500: NEG
77501: PUSH
77502: LD_INT 3
77504: NEG
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: PUSH
77510: LD_INT 1
77512: PUSH
77513: LD_INT 2
77515: NEG
77516: PUSH
77517: EMPTY
77518: LIST
77519: LIST
77520: PUSH
77521: EMPTY
77522: LIST
77523: LIST
77524: LIST
77525: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
77526: LD_ADDR_VAR 0 42
77530: PUSH
77531: LD_INT 2
77533: PUSH
77534: LD_INT 0
77536: PUSH
77537: EMPTY
77538: LIST
77539: LIST
77540: PUSH
77541: LD_INT 2
77543: PUSH
77544: LD_INT 1
77546: NEG
77547: PUSH
77548: EMPTY
77549: LIST
77550: LIST
77551: PUSH
77552: LD_INT 3
77554: PUSH
77555: LD_INT 1
77557: PUSH
77558: EMPTY
77559: LIST
77560: LIST
77561: PUSH
77562: EMPTY
77563: LIST
77564: LIST
77565: LIST
77566: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
77567: LD_ADDR_VAR 0 43
77571: PUSH
77572: LD_INT 2
77574: PUSH
77575: LD_INT 2
77577: PUSH
77578: EMPTY
77579: LIST
77580: LIST
77581: PUSH
77582: LD_INT 3
77584: PUSH
77585: LD_INT 2
77587: PUSH
77588: EMPTY
77589: LIST
77590: LIST
77591: PUSH
77592: LD_INT 2
77594: PUSH
77595: LD_INT 3
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: PUSH
77602: EMPTY
77603: LIST
77604: LIST
77605: LIST
77606: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
77607: LD_ADDR_VAR 0 44
77611: PUSH
77612: LD_INT 0
77614: PUSH
77615: LD_INT 2
77617: PUSH
77618: EMPTY
77619: LIST
77620: LIST
77621: PUSH
77622: LD_INT 1
77624: PUSH
77625: LD_INT 3
77627: PUSH
77628: EMPTY
77629: LIST
77630: LIST
77631: PUSH
77632: LD_INT 1
77634: NEG
77635: PUSH
77636: LD_INT 2
77638: PUSH
77639: EMPTY
77640: LIST
77641: LIST
77642: PUSH
77643: EMPTY
77644: LIST
77645: LIST
77646: LIST
77647: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
77648: LD_ADDR_VAR 0 45
77652: PUSH
77653: LD_INT 2
77655: NEG
77656: PUSH
77657: LD_INT 0
77659: PUSH
77660: EMPTY
77661: LIST
77662: LIST
77663: PUSH
77664: LD_INT 2
77666: NEG
77667: PUSH
77668: LD_INT 1
77670: PUSH
77671: EMPTY
77672: LIST
77673: LIST
77674: PUSH
77675: LD_INT 3
77677: NEG
77678: PUSH
77679: LD_INT 1
77681: NEG
77682: PUSH
77683: EMPTY
77684: LIST
77685: LIST
77686: PUSH
77687: EMPTY
77688: LIST
77689: LIST
77690: LIST
77691: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
77692: LD_ADDR_VAR 0 46
77696: PUSH
77697: LD_INT 2
77699: NEG
77700: PUSH
77701: LD_INT 2
77703: NEG
77704: PUSH
77705: EMPTY
77706: LIST
77707: LIST
77708: PUSH
77709: LD_INT 2
77711: NEG
77712: PUSH
77713: LD_INT 3
77715: NEG
77716: PUSH
77717: EMPTY
77718: LIST
77719: LIST
77720: PUSH
77721: LD_INT 3
77723: NEG
77724: PUSH
77725: LD_INT 2
77727: NEG
77728: PUSH
77729: EMPTY
77730: LIST
77731: LIST
77732: PUSH
77733: EMPTY
77734: LIST
77735: LIST
77736: LIST
77737: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
77738: LD_ADDR_VAR 0 47
77742: PUSH
77743: LD_INT 2
77745: NEG
77746: PUSH
77747: LD_INT 3
77749: NEG
77750: PUSH
77751: EMPTY
77752: LIST
77753: LIST
77754: PUSH
77755: LD_INT 1
77757: NEG
77758: PUSH
77759: LD_INT 3
77761: NEG
77762: PUSH
77763: EMPTY
77764: LIST
77765: LIST
77766: PUSH
77767: EMPTY
77768: LIST
77769: LIST
77770: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
77771: LD_ADDR_VAR 0 48
77775: PUSH
77776: LD_INT 1
77778: PUSH
77779: LD_INT 2
77781: NEG
77782: PUSH
77783: EMPTY
77784: LIST
77785: LIST
77786: PUSH
77787: LD_INT 2
77789: PUSH
77790: LD_INT 1
77792: NEG
77793: PUSH
77794: EMPTY
77795: LIST
77796: LIST
77797: PUSH
77798: EMPTY
77799: LIST
77800: LIST
77801: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
77802: LD_ADDR_VAR 0 49
77806: PUSH
77807: LD_INT 3
77809: PUSH
77810: LD_INT 1
77812: PUSH
77813: EMPTY
77814: LIST
77815: LIST
77816: PUSH
77817: LD_INT 3
77819: PUSH
77820: LD_INT 2
77822: PUSH
77823: EMPTY
77824: LIST
77825: LIST
77826: PUSH
77827: EMPTY
77828: LIST
77829: LIST
77830: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
77831: LD_ADDR_VAR 0 50
77835: PUSH
77836: LD_INT 2
77838: PUSH
77839: LD_INT 3
77841: PUSH
77842: EMPTY
77843: LIST
77844: LIST
77845: PUSH
77846: LD_INT 1
77848: PUSH
77849: LD_INT 3
77851: PUSH
77852: EMPTY
77853: LIST
77854: LIST
77855: PUSH
77856: EMPTY
77857: LIST
77858: LIST
77859: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
77860: LD_ADDR_VAR 0 51
77864: PUSH
77865: LD_INT 1
77867: NEG
77868: PUSH
77869: LD_INT 2
77871: PUSH
77872: EMPTY
77873: LIST
77874: LIST
77875: PUSH
77876: LD_INT 2
77878: NEG
77879: PUSH
77880: LD_INT 1
77882: PUSH
77883: EMPTY
77884: LIST
77885: LIST
77886: PUSH
77887: EMPTY
77888: LIST
77889: LIST
77890: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
77891: LD_ADDR_VAR 0 52
77895: PUSH
77896: LD_INT 3
77898: NEG
77899: PUSH
77900: LD_INT 1
77902: NEG
77903: PUSH
77904: EMPTY
77905: LIST
77906: LIST
77907: PUSH
77908: LD_INT 3
77910: NEG
77911: PUSH
77912: LD_INT 2
77914: NEG
77915: PUSH
77916: EMPTY
77917: LIST
77918: LIST
77919: PUSH
77920: EMPTY
77921: LIST
77922: LIST
77923: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
77924: LD_ADDR_VAR 0 53
77928: PUSH
77929: LD_INT 1
77931: NEG
77932: PUSH
77933: LD_INT 3
77935: NEG
77936: PUSH
77937: EMPTY
77938: LIST
77939: LIST
77940: PUSH
77941: LD_INT 0
77943: PUSH
77944: LD_INT 3
77946: NEG
77947: PUSH
77948: EMPTY
77949: LIST
77950: LIST
77951: PUSH
77952: LD_INT 1
77954: PUSH
77955: LD_INT 2
77957: NEG
77958: PUSH
77959: EMPTY
77960: LIST
77961: LIST
77962: PUSH
77963: EMPTY
77964: LIST
77965: LIST
77966: LIST
77967: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
77968: LD_ADDR_VAR 0 54
77972: PUSH
77973: LD_INT 2
77975: PUSH
77976: LD_INT 1
77978: NEG
77979: PUSH
77980: EMPTY
77981: LIST
77982: LIST
77983: PUSH
77984: LD_INT 3
77986: PUSH
77987: LD_INT 0
77989: PUSH
77990: EMPTY
77991: LIST
77992: LIST
77993: PUSH
77994: LD_INT 3
77996: PUSH
77997: LD_INT 1
77999: PUSH
78000: EMPTY
78001: LIST
78002: LIST
78003: PUSH
78004: EMPTY
78005: LIST
78006: LIST
78007: LIST
78008: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
78009: LD_ADDR_VAR 0 55
78013: PUSH
78014: LD_INT 3
78016: PUSH
78017: LD_INT 2
78019: PUSH
78020: EMPTY
78021: LIST
78022: LIST
78023: PUSH
78024: LD_INT 3
78026: PUSH
78027: LD_INT 3
78029: PUSH
78030: EMPTY
78031: LIST
78032: LIST
78033: PUSH
78034: LD_INT 2
78036: PUSH
78037: LD_INT 3
78039: PUSH
78040: EMPTY
78041: LIST
78042: LIST
78043: PUSH
78044: EMPTY
78045: LIST
78046: LIST
78047: LIST
78048: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
78049: LD_ADDR_VAR 0 56
78053: PUSH
78054: LD_INT 1
78056: PUSH
78057: LD_INT 3
78059: PUSH
78060: EMPTY
78061: LIST
78062: LIST
78063: PUSH
78064: LD_INT 0
78066: PUSH
78067: LD_INT 3
78069: PUSH
78070: EMPTY
78071: LIST
78072: LIST
78073: PUSH
78074: LD_INT 1
78076: NEG
78077: PUSH
78078: LD_INT 2
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: PUSH
78085: EMPTY
78086: LIST
78087: LIST
78088: LIST
78089: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78090: LD_ADDR_VAR 0 57
78094: PUSH
78095: LD_INT 2
78097: NEG
78098: PUSH
78099: LD_INT 1
78101: PUSH
78102: EMPTY
78103: LIST
78104: LIST
78105: PUSH
78106: LD_INT 3
78108: NEG
78109: PUSH
78110: LD_INT 0
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: PUSH
78117: LD_INT 3
78119: NEG
78120: PUSH
78121: LD_INT 1
78123: NEG
78124: PUSH
78125: EMPTY
78126: LIST
78127: LIST
78128: PUSH
78129: EMPTY
78130: LIST
78131: LIST
78132: LIST
78133: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78134: LD_ADDR_VAR 0 58
78138: PUSH
78139: LD_INT 2
78141: NEG
78142: PUSH
78143: LD_INT 3
78145: NEG
78146: PUSH
78147: EMPTY
78148: LIST
78149: LIST
78150: PUSH
78151: LD_INT 3
78153: NEG
78154: PUSH
78155: LD_INT 2
78157: NEG
78158: PUSH
78159: EMPTY
78160: LIST
78161: LIST
78162: PUSH
78163: LD_INT 3
78165: NEG
78166: PUSH
78167: LD_INT 3
78169: NEG
78170: PUSH
78171: EMPTY
78172: LIST
78173: LIST
78174: PUSH
78175: EMPTY
78176: LIST
78177: LIST
78178: LIST
78179: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
78180: LD_ADDR_VAR 0 59
78184: PUSH
78185: LD_INT 1
78187: NEG
78188: PUSH
78189: LD_INT 2
78191: NEG
78192: PUSH
78193: EMPTY
78194: LIST
78195: LIST
78196: PUSH
78197: LD_INT 0
78199: PUSH
78200: LD_INT 2
78202: NEG
78203: PUSH
78204: EMPTY
78205: LIST
78206: LIST
78207: PUSH
78208: LD_INT 1
78210: PUSH
78211: LD_INT 1
78213: NEG
78214: PUSH
78215: EMPTY
78216: LIST
78217: LIST
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: LIST
78223: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78224: LD_ADDR_VAR 0 60
78228: PUSH
78229: LD_INT 1
78231: PUSH
78232: LD_INT 1
78234: NEG
78235: PUSH
78236: EMPTY
78237: LIST
78238: LIST
78239: PUSH
78240: LD_INT 2
78242: PUSH
78243: LD_INT 0
78245: PUSH
78246: EMPTY
78247: LIST
78248: LIST
78249: PUSH
78250: LD_INT 2
78252: PUSH
78253: LD_INT 1
78255: PUSH
78256: EMPTY
78257: LIST
78258: LIST
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: LIST
78264: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78265: LD_ADDR_VAR 0 61
78269: PUSH
78270: LD_INT 2
78272: PUSH
78273: LD_INT 1
78275: PUSH
78276: EMPTY
78277: LIST
78278: LIST
78279: PUSH
78280: LD_INT 2
78282: PUSH
78283: LD_INT 2
78285: PUSH
78286: EMPTY
78287: LIST
78288: LIST
78289: PUSH
78290: LD_INT 1
78292: PUSH
78293: LD_INT 2
78295: PUSH
78296: EMPTY
78297: LIST
78298: LIST
78299: PUSH
78300: EMPTY
78301: LIST
78302: LIST
78303: LIST
78304: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78305: LD_ADDR_VAR 0 62
78309: PUSH
78310: LD_INT 1
78312: PUSH
78313: LD_INT 2
78315: PUSH
78316: EMPTY
78317: LIST
78318: LIST
78319: PUSH
78320: LD_INT 0
78322: PUSH
78323: LD_INT 2
78325: PUSH
78326: EMPTY
78327: LIST
78328: LIST
78329: PUSH
78330: LD_INT 1
78332: NEG
78333: PUSH
78334: LD_INT 1
78336: PUSH
78337: EMPTY
78338: LIST
78339: LIST
78340: PUSH
78341: EMPTY
78342: LIST
78343: LIST
78344: LIST
78345: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78346: LD_ADDR_VAR 0 63
78350: PUSH
78351: LD_INT 1
78353: NEG
78354: PUSH
78355: LD_INT 1
78357: PUSH
78358: EMPTY
78359: LIST
78360: LIST
78361: PUSH
78362: LD_INT 2
78364: NEG
78365: PUSH
78366: LD_INT 0
78368: PUSH
78369: EMPTY
78370: LIST
78371: LIST
78372: PUSH
78373: LD_INT 2
78375: NEG
78376: PUSH
78377: LD_INT 1
78379: NEG
78380: PUSH
78381: EMPTY
78382: LIST
78383: LIST
78384: PUSH
78385: EMPTY
78386: LIST
78387: LIST
78388: LIST
78389: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78390: LD_ADDR_VAR 0 64
78394: PUSH
78395: LD_INT 1
78397: NEG
78398: PUSH
78399: LD_INT 2
78401: NEG
78402: PUSH
78403: EMPTY
78404: LIST
78405: LIST
78406: PUSH
78407: LD_INT 2
78409: NEG
78410: PUSH
78411: LD_INT 1
78413: NEG
78414: PUSH
78415: EMPTY
78416: LIST
78417: LIST
78418: PUSH
78419: LD_INT 2
78421: NEG
78422: PUSH
78423: LD_INT 2
78425: NEG
78426: PUSH
78427: EMPTY
78428: LIST
78429: LIST
78430: PUSH
78431: EMPTY
78432: LIST
78433: LIST
78434: LIST
78435: ST_TO_ADDR
// end ; 2 :
78436: GO 81702
78438: LD_INT 2
78440: DOUBLE
78441: EQUAL
78442: IFTRUE 78446
78444: GO 81701
78446: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
78447: LD_ADDR_VAR 0 29
78451: PUSH
78452: LD_INT 4
78454: PUSH
78455: LD_INT 0
78457: PUSH
78458: EMPTY
78459: LIST
78460: LIST
78461: PUSH
78462: LD_INT 4
78464: PUSH
78465: LD_INT 1
78467: NEG
78468: PUSH
78469: EMPTY
78470: LIST
78471: LIST
78472: PUSH
78473: LD_INT 5
78475: PUSH
78476: LD_INT 0
78478: PUSH
78479: EMPTY
78480: LIST
78481: LIST
78482: PUSH
78483: LD_INT 5
78485: PUSH
78486: LD_INT 1
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: PUSH
78493: LD_INT 4
78495: PUSH
78496: LD_INT 1
78498: PUSH
78499: EMPTY
78500: LIST
78501: LIST
78502: PUSH
78503: LD_INT 3
78505: PUSH
78506: LD_INT 0
78508: PUSH
78509: EMPTY
78510: LIST
78511: LIST
78512: PUSH
78513: LD_INT 3
78515: PUSH
78516: LD_INT 1
78518: NEG
78519: PUSH
78520: EMPTY
78521: LIST
78522: LIST
78523: PUSH
78524: LD_INT 3
78526: PUSH
78527: LD_INT 2
78529: NEG
78530: PUSH
78531: EMPTY
78532: LIST
78533: LIST
78534: PUSH
78535: LD_INT 5
78537: PUSH
78538: LD_INT 2
78540: PUSH
78541: EMPTY
78542: LIST
78543: LIST
78544: PUSH
78545: LD_INT 3
78547: PUSH
78548: LD_INT 3
78550: PUSH
78551: EMPTY
78552: LIST
78553: LIST
78554: PUSH
78555: LD_INT 3
78557: PUSH
78558: LD_INT 2
78560: PUSH
78561: EMPTY
78562: LIST
78563: LIST
78564: PUSH
78565: LD_INT 4
78567: PUSH
78568: LD_INT 3
78570: PUSH
78571: EMPTY
78572: LIST
78573: LIST
78574: PUSH
78575: LD_INT 4
78577: PUSH
78578: LD_INT 4
78580: PUSH
78581: EMPTY
78582: LIST
78583: LIST
78584: PUSH
78585: LD_INT 3
78587: PUSH
78588: LD_INT 4
78590: PUSH
78591: EMPTY
78592: LIST
78593: LIST
78594: PUSH
78595: LD_INT 2
78597: PUSH
78598: LD_INT 3
78600: PUSH
78601: EMPTY
78602: LIST
78603: LIST
78604: PUSH
78605: LD_INT 2
78607: PUSH
78608: LD_INT 2
78610: PUSH
78611: EMPTY
78612: LIST
78613: LIST
78614: PUSH
78615: LD_INT 4
78617: PUSH
78618: LD_INT 2
78620: PUSH
78621: EMPTY
78622: LIST
78623: LIST
78624: PUSH
78625: LD_INT 2
78627: PUSH
78628: LD_INT 4
78630: PUSH
78631: EMPTY
78632: LIST
78633: LIST
78634: PUSH
78635: LD_INT 0
78637: PUSH
78638: LD_INT 4
78640: PUSH
78641: EMPTY
78642: LIST
78643: LIST
78644: PUSH
78645: LD_INT 0
78647: PUSH
78648: LD_INT 3
78650: PUSH
78651: EMPTY
78652: LIST
78653: LIST
78654: PUSH
78655: LD_INT 1
78657: PUSH
78658: LD_INT 4
78660: PUSH
78661: EMPTY
78662: LIST
78663: LIST
78664: PUSH
78665: LD_INT 1
78667: PUSH
78668: LD_INT 5
78670: PUSH
78671: EMPTY
78672: LIST
78673: LIST
78674: PUSH
78675: LD_INT 0
78677: PUSH
78678: LD_INT 5
78680: PUSH
78681: EMPTY
78682: LIST
78683: LIST
78684: PUSH
78685: LD_INT 1
78687: NEG
78688: PUSH
78689: LD_INT 4
78691: PUSH
78692: EMPTY
78693: LIST
78694: LIST
78695: PUSH
78696: LD_INT 1
78698: NEG
78699: PUSH
78700: LD_INT 3
78702: PUSH
78703: EMPTY
78704: LIST
78705: LIST
78706: PUSH
78707: LD_INT 2
78709: PUSH
78710: LD_INT 5
78712: PUSH
78713: EMPTY
78714: LIST
78715: LIST
78716: PUSH
78717: LD_INT 2
78719: NEG
78720: PUSH
78721: LD_INT 3
78723: PUSH
78724: EMPTY
78725: LIST
78726: LIST
78727: PUSH
78728: LD_INT 3
78730: NEG
78731: PUSH
78732: LD_INT 0
78734: PUSH
78735: EMPTY
78736: LIST
78737: LIST
78738: PUSH
78739: LD_INT 3
78741: NEG
78742: PUSH
78743: LD_INT 1
78745: NEG
78746: PUSH
78747: EMPTY
78748: LIST
78749: LIST
78750: PUSH
78751: LD_INT 2
78753: NEG
78754: PUSH
78755: LD_INT 0
78757: PUSH
78758: EMPTY
78759: LIST
78760: LIST
78761: PUSH
78762: LD_INT 2
78764: NEG
78765: PUSH
78766: LD_INT 1
78768: PUSH
78769: EMPTY
78770: LIST
78771: LIST
78772: PUSH
78773: LD_INT 3
78775: NEG
78776: PUSH
78777: LD_INT 1
78779: PUSH
78780: EMPTY
78781: LIST
78782: LIST
78783: PUSH
78784: LD_INT 4
78786: NEG
78787: PUSH
78788: LD_INT 0
78790: PUSH
78791: EMPTY
78792: LIST
78793: LIST
78794: PUSH
78795: LD_INT 4
78797: NEG
78798: PUSH
78799: LD_INT 1
78801: NEG
78802: PUSH
78803: EMPTY
78804: LIST
78805: LIST
78806: PUSH
78807: LD_INT 4
78809: NEG
78810: PUSH
78811: LD_INT 2
78813: NEG
78814: PUSH
78815: EMPTY
78816: LIST
78817: LIST
78818: PUSH
78819: LD_INT 2
78821: NEG
78822: PUSH
78823: LD_INT 2
78825: PUSH
78826: EMPTY
78827: LIST
78828: LIST
78829: PUSH
78830: LD_INT 4
78832: NEG
78833: PUSH
78834: LD_INT 4
78836: NEG
78837: PUSH
78838: EMPTY
78839: LIST
78840: LIST
78841: PUSH
78842: LD_INT 4
78844: NEG
78845: PUSH
78846: LD_INT 5
78848: NEG
78849: PUSH
78850: EMPTY
78851: LIST
78852: LIST
78853: PUSH
78854: LD_INT 3
78856: NEG
78857: PUSH
78858: LD_INT 4
78860: NEG
78861: PUSH
78862: EMPTY
78863: LIST
78864: LIST
78865: PUSH
78866: LD_INT 3
78868: NEG
78869: PUSH
78870: LD_INT 3
78872: NEG
78873: PUSH
78874: EMPTY
78875: LIST
78876: LIST
78877: PUSH
78878: LD_INT 4
78880: NEG
78881: PUSH
78882: LD_INT 3
78884: NEG
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: PUSH
78890: LD_INT 5
78892: NEG
78893: PUSH
78894: LD_INT 4
78896: NEG
78897: PUSH
78898: EMPTY
78899: LIST
78900: LIST
78901: PUSH
78902: LD_INT 5
78904: NEG
78905: PUSH
78906: LD_INT 5
78908: NEG
78909: PUSH
78910: EMPTY
78911: LIST
78912: LIST
78913: PUSH
78914: LD_INT 3
78916: NEG
78917: PUSH
78918: LD_INT 5
78920: NEG
78921: PUSH
78922: EMPTY
78923: LIST
78924: LIST
78925: PUSH
78926: LD_INT 5
78928: NEG
78929: PUSH
78930: LD_INT 3
78932: NEG
78933: PUSH
78934: EMPTY
78935: LIST
78936: LIST
78937: PUSH
78938: EMPTY
78939: LIST
78940: LIST
78941: LIST
78942: LIST
78943: LIST
78944: LIST
78945: LIST
78946: LIST
78947: LIST
78948: LIST
78949: LIST
78950: LIST
78951: LIST
78952: LIST
78953: LIST
78954: LIST
78955: LIST
78956: LIST
78957: LIST
78958: LIST
78959: LIST
78960: LIST
78961: LIST
78962: LIST
78963: LIST
78964: LIST
78965: LIST
78966: LIST
78967: LIST
78968: LIST
78969: LIST
78970: LIST
78971: LIST
78972: LIST
78973: LIST
78974: LIST
78975: LIST
78976: LIST
78977: LIST
78978: LIST
78979: LIST
78980: LIST
78981: LIST
78982: LIST
78983: LIST
78984: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
78985: LD_ADDR_VAR 0 30
78989: PUSH
78990: LD_INT 4
78992: PUSH
78993: LD_INT 4
78995: PUSH
78996: EMPTY
78997: LIST
78998: LIST
78999: PUSH
79000: LD_INT 4
79002: PUSH
79003: LD_INT 3
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: PUSH
79010: LD_INT 5
79012: PUSH
79013: LD_INT 4
79015: PUSH
79016: EMPTY
79017: LIST
79018: LIST
79019: PUSH
79020: LD_INT 5
79022: PUSH
79023: LD_INT 5
79025: PUSH
79026: EMPTY
79027: LIST
79028: LIST
79029: PUSH
79030: LD_INT 4
79032: PUSH
79033: LD_INT 5
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: PUSH
79040: LD_INT 3
79042: PUSH
79043: LD_INT 4
79045: PUSH
79046: EMPTY
79047: LIST
79048: LIST
79049: PUSH
79050: LD_INT 3
79052: PUSH
79053: LD_INT 3
79055: PUSH
79056: EMPTY
79057: LIST
79058: LIST
79059: PUSH
79060: LD_INT 5
79062: PUSH
79063: LD_INT 3
79065: PUSH
79066: EMPTY
79067: LIST
79068: LIST
79069: PUSH
79070: LD_INT 3
79072: PUSH
79073: LD_INT 5
79075: PUSH
79076: EMPTY
79077: LIST
79078: LIST
79079: PUSH
79080: LD_INT 0
79082: PUSH
79083: LD_INT 3
79085: PUSH
79086: EMPTY
79087: LIST
79088: LIST
79089: PUSH
79090: LD_INT 0
79092: PUSH
79093: LD_INT 2
79095: PUSH
79096: EMPTY
79097: LIST
79098: LIST
79099: PUSH
79100: LD_INT 1
79102: PUSH
79103: LD_INT 3
79105: PUSH
79106: EMPTY
79107: LIST
79108: LIST
79109: PUSH
79110: LD_INT 1
79112: PUSH
79113: LD_INT 4
79115: PUSH
79116: EMPTY
79117: LIST
79118: LIST
79119: PUSH
79120: LD_INT 0
79122: PUSH
79123: LD_INT 4
79125: PUSH
79126: EMPTY
79127: LIST
79128: LIST
79129: PUSH
79130: LD_INT 1
79132: NEG
79133: PUSH
79134: LD_INT 3
79136: PUSH
79137: EMPTY
79138: LIST
79139: LIST
79140: PUSH
79141: LD_INT 1
79143: NEG
79144: PUSH
79145: LD_INT 2
79147: PUSH
79148: EMPTY
79149: LIST
79150: LIST
79151: PUSH
79152: LD_INT 2
79154: PUSH
79155: LD_INT 4
79157: PUSH
79158: EMPTY
79159: LIST
79160: LIST
79161: PUSH
79162: LD_INT 2
79164: NEG
79165: PUSH
79166: LD_INT 2
79168: PUSH
79169: EMPTY
79170: LIST
79171: LIST
79172: PUSH
79173: LD_INT 4
79175: NEG
79176: PUSH
79177: LD_INT 0
79179: PUSH
79180: EMPTY
79181: LIST
79182: LIST
79183: PUSH
79184: LD_INT 4
79186: NEG
79187: PUSH
79188: LD_INT 1
79190: NEG
79191: PUSH
79192: EMPTY
79193: LIST
79194: LIST
79195: PUSH
79196: LD_INT 3
79198: NEG
79199: PUSH
79200: LD_INT 0
79202: PUSH
79203: EMPTY
79204: LIST
79205: LIST
79206: PUSH
79207: LD_INT 3
79209: NEG
79210: PUSH
79211: LD_INT 1
79213: PUSH
79214: EMPTY
79215: LIST
79216: LIST
79217: PUSH
79218: LD_INT 4
79220: NEG
79221: PUSH
79222: LD_INT 1
79224: PUSH
79225: EMPTY
79226: LIST
79227: LIST
79228: PUSH
79229: LD_INT 5
79231: NEG
79232: PUSH
79233: LD_INT 0
79235: PUSH
79236: EMPTY
79237: LIST
79238: LIST
79239: PUSH
79240: LD_INT 5
79242: NEG
79243: PUSH
79244: LD_INT 1
79246: NEG
79247: PUSH
79248: EMPTY
79249: LIST
79250: LIST
79251: PUSH
79252: LD_INT 5
79254: NEG
79255: PUSH
79256: LD_INT 2
79258: NEG
79259: PUSH
79260: EMPTY
79261: LIST
79262: LIST
79263: PUSH
79264: LD_INT 3
79266: NEG
79267: PUSH
79268: LD_INT 2
79270: PUSH
79271: EMPTY
79272: LIST
79273: LIST
79274: PUSH
79275: LD_INT 3
79277: NEG
79278: PUSH
79279: LD_INT 3
79281: NEG
79282: PUSH
79283: EMPTY
79284: LIST
79285: LIST
79286: PUSH
79287: LD_INT 3
79289: NEG
79290: PUSH
79291: LD_INT 4
79293: NEG
79294: PUSH
79295: EMPTY
79296: LIST
79297: LIST
79298: PUSH
79299: LD_INT 2
79301: NEG
79302: PUSH
79303: LD_INT 3
79305: NEG
79306: PUSH
79307: EMPTY
79308: LIST
79309: LIST
79310: PUSH
79311: LD_INT 2
79313: NEG
79314: PUSH
79315: LD_INT 2
79317: NEG
79318: PUSH
79319: EMPTY
79320: LIST
79321: LIST
79322: PUSH
79323: LD_INT 3
79325: NEG
79326: PUSH
79327: LD_INT 2
79329: NEG
79330: PUSH
79331: EMPTY
79332: LIST
79333: LIST
79334: PUSH
79335: LD_INT 4
79337: NEG
79338: PUSH
79339: LD_INT 3
79341: NEG
79342: PUSH
79343: EMPTY
79344: LIST
79345: LIST
79346: PUSH
79347: LD_INT 4
79349: NEG
79350: PUSH
79351: LD_INT 4
79353: NEG
79354: PUSH
79355: EMPTY
79356: LIST
79357: LIST
79358: PUSH
79359: LD_INT 2
79361: NEG
79362: PUSH
79363: LD_INT 4
79365: NEG
79366: PUSH
79367: EMPTY
79368: LIST
79369: LIST
79370: PUSH
79371: LD_INT 4
79373: NEG
79374: PUSH
79375: LD_INT 2
79377: NEG
79378: PUSH
79379: EMPTY
79380: LIST
79381: LIST
79382: PUSH
79383: LD_INT 0
79385: PUSH
79386: LD_INT 4
79388: NEG
79389: PUSH
79390: EMPTY
79391: LIST
79392: LIST
79393: PUSH
79394: LD_INT 0
79396: PUSH
79397: LD_INT 5
79399: NEG
79400: PUSH
79401: EMPTY
79402: LIST
79403: LIST
79404: PUSH
79405: LD_INT 1
79407: PUSH
79408: LD_INT 4
79410: NEG
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: PUSH
79416: LD_INT 1
79418: PUSH
79419: LD_INT 3
79421: NEG
79422: PUSH
79423: EMPTY
79424: LIST
79425: LIST
79426: PUSH
79427: LD_INT 0
79429: PUSH
79430: LD_INT 3
79432: NEG
79433: PUSH
79434: EMPTY
79435: LIST
79436: LIST
79437: PUSH
79438: LD_INT 1
79440: NEG
79441: PUSH
79442: LD_INT 4
79444: NEG
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: PUSH
79450: LD_INT 1
79452: NEG
79453: PUSH
79454: LD_INT 5
79456: NEG
79457: PUSH
79458: EMPTY
79459: LIST
79460: LIST
79461: PUSH
79462: LD_INT 2
79464: PUSH
79465: LD_INT 3
79467: NEG
79468: PUSH
79469: EMPTY
79470: LIST
79471: LIST
79472: PUSH
79473: LD_INT 2
79475: NEG
79476: PUSH
79477: LD_INT 5
79479: NEG
79480: PUSH
79481: EMPTY
79482: LIST
79483: LIST
79484: PUSH
79485: EMPTY
79486: LIST
79487: LIST
79488: LIST
79489: LIST
79490: LIST
79491: LIST
79492: LIST
79493: LIST
79494: LIST
79495: LIST
79496: LIST
79497: LIST
79498: LIST
79499: LIST
79500: LIST
79501: LIST
79502: LIST
79503: LIST
79504: LIST
79505: LIST
79506: LIST
79507: LIST
79508: LIST
79509: LIST
79510: LIST
79511: LIST
79512: LIST
79513: LIST
79514: LIST
79515: LIST
79516: LIST
79517: LIST
79518: LIST
79519: LIST
79520: LIST
79521: LIST
79522: LIST
79523: LIST
79524: LIST
79525: LIST
79526: LIST
79527: LIST
79528: LIST
79529: LIST
79530: LIST
79531: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
79532: LD_ADDR_VAR 0 31
79536: PUSH
79537: LD_INT 0
79539: PUSH
79540: LD_INT 4
79542: PUSH
79543: EMPTY
79544: LIST
79545: LIST
79546: PUSH
79547: LD_INT 0
79549: PUSH
79550: LD_INT 3
79552: PUSH
79553: EMPTY
79554: LIST
79555: LIST
79556: PUSH
79557: LD_INT 1
79559: PUSH
79560: LD_INT 4
79562: PUSH
79563: EMPTY
79564: LIST
79565: LIST
79566: PUSH
79567: LD_INT 1
79569: PUSH
79570: LD_INT 5
79572: PUSH
79573: EMPTY
79574: LIST
79575: LIST
79576: PUSH
79577: LD_INT 0
79579: PUSH
79580: LD_INT 5
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: PUSH
79587: LD_INT 1
79589: NEG
79590: PUSH
79591: LD_INT 4
79593: PUSH
79594: EMPTY
79595: LIST
79596: LIST
79597: PUSH
79598: LD_INT 1
79600: NEG
79601: PUSH
79602: LD_INT 3
79604: PUSH
79605: EMPTY
79606: LIST
79607: LIST
79608: PUSH
79609: LD_INT 2
79611: PUSH
79612: LD_INT 5
79614: PUSH
79615: EMPTY
79616: LIST
79617: LIST
79618: PUSH
79619: LD_INT 2
79621: NEG
79622: PUSH
79623: LD_INT 3
79625: PUSH
79626: EMPTY
79627: LIST
79628: LIST
79629: PUSH
79630: LD_INT 3
79632: NEG
79633: PUSH
79634: LD_INT 0
79636: PUSH
79637: EMPTY
79638: LIST
79639: LIST
79640: PUSH
79641: LD_INT 3
79643: NEG
79644: PUSH
79645: LD_INT 1
79647: NEG
79648: PUSH
79649: EMPTY
79650: LIST
79651: LIST
79652: PUSH
79653: LD_INT 2
79655: NEG
79656: PUSH
79657: LD_INT 0
79659: PUSH
79660: EMPTY
79661: LIST
79662: LIST
79663: PUSH
79664: LD_INT 2
79666: NEG
79667: PUSH
79668: LD_INT 1
79670: PUSH
79671: EMPTY
79672: LIST
79673: LIST
79674: PUSH
79675: LD_INT 3
79677: NEG
79678: PUSH
79679: LD_INT 1
79681: PUSH
79682: EMPTY
79683: LIST
79684: LIST
79685: PUSH
79686: LD_INT 4
79688: NEG
79689: PUSH
79690: LD_INT 0
79692: PUSH
79693: EMPTY
79694: LIST
79695: LIST
79696: PUSH
79697: LD_INT 4
79699: NEG
79700: PUSH
79701: LD_INT 1
79703: NEG
79704: PUSH
79705: EMPTY
79706: LIST
79707: LIST
79708: PUSH
79709: LD_INT 4
79711: NEG
79712: PUSH
79713: LD_INT 2
79715: NEG
79716: PUSH
79717: EMPTY
79718: LIST
79719: LIST
79720: PUSH
79721: LD_INT 2
79723: NEG
79724: PUSH
79725: LD_INT 2
79727: PUSH
79728: EMPTY
79729: LIST
79730: LIST
79731: PUSH
79732: LD_INT 4
79734: NEG
79735: PUSH
79736: LD_INT 4
79738: NEG
79739: PUSH
79740: EMPTY
79741: LIST
79742: LIST
79743: PUSH
79744: LD_INT 4
79746: NEG
79747: PUSH
79748: LD_INT 5
79750: NEG
79751: PUSH
79752: EMPTY
79753: LIST
79754: LIST
79755: PUSH
79756: LD_INT 3
79758: NEG
79759: PUSH
79760: LD_INT 4
79762: NEG
79763: PUSH
79764: EMPTY
79765: LIST
79766: LIST
79767: PUSH
79768: LD_INT 3
79770: NEG
79771: PUSH
79772: LD_INT 3
79774: NEG
79775: PUSH
79776: EMPTY
79777: LIST
79778: LIST
79779: PUSH
79780: LD_INT 4
79782: NEG
79783: PUSH
79784: LD_INT 3
79786: NEG
79787: PUSH
79788: EMPTY
79789: LIST
79790: LIST
79791: PUSH
79792: LD_INT 5
79794: NEG
79795: PUSH
79796: LD_INT 4
79798: NEG
79799: PUSH
79800: EMPTY
79801: LIST
79802: LIST
79803: PUSH
79804: LD_INT 5
79806: NEG
79807: PUSH
79808: LD_INT 5
79810: NEG
79811: PUSH
79812: EMPTY
79813: LIST
79814: LIST
79815: PUSH
79816: LD_INT 3
79818: NEG
79819: PUSH
79820: LD_INT 5
79822: NEG
79823: PUSH
79824: EMPTY
79825: LIST
79826: LIST
79827: PUSH
79828: LD_INT 5
79830: NEG
79831: PUSH
79832: LD_INT 3
79834: NEG
79835: PUSH
79836: EMPTY
79837: LIST
79838: LIST
79839: PUSH
79840: LD_INT 0
79842: PUSH
79843: LD_INT 3
79845: NEG
79846: PUSH
79847: EMPTY
79848: LIST
79849: LIST
79850: PUSH
79851: LD_INT 0
79853: PUSH
79854: LD_INT 4
79856: NEG
79857: PUSH
79858: EMPTY
79859: LIST
79860: LIST
79861: PUSH
79862: LD_INT 1
79864: PUSH
79865: LD_INT 3
79867: NEG
79868: PUSH
79869: EMPTY
79870: LIST
79871: LIST
79872: PUSH
79873: LD_INT 1
79875: PUSH
79876: LD_INT 2
79878: NEG
79879: PUSH
79880: EMPTY
79881: LIST
79882: LIST
79883: PUSH
79884: LD_INT 0
79886: PUSH
79887: LD_INT 2
79889: NEG
79890: PUSH
79891: EMPTY
79892: LIST
79893: LIST
79894: PUSH
79895: LD_INT 1
79897: NEG
79898: PUSH
79899: LD_INT 3
79901: NEG
79902: PUSH
79903: EMPTY
79904: LIST
79905: LIST
79906: PUSH
79907: LD_INT 1
79909: NEG
79910: PUSH
79911: LD_INT 4
79913: NEG
79914: PUSH
79915: EMPTY
79916: LIST
79917: LIST
79918: PUSH
79919: LD_INT 2
79921: PUSH
79922: LD_INT 2
79924: NEG
79925: PUSH
79926: EMPTY
79927: LIST
79928: LIST
79929: PUSH
79930: LD_INT 2
79932: NEG
79933: PUSH
79934: LD_INT 4
79936: NEG
79937: PUSH
79938: EMPTY
79939: LIST
79940: LIST
79941: PUSH
79942: LD_INT 4
79944: PUSH
79945: LD_INT 0
79947: PUSH
79948: EMPTY
79949: LIST
79950: LIST
79951: PUSH
79952: LD_INT 4
79954: PUSH
79955: LD_INT 1
79957: NEG
79958: PUSH
79959: EMPTY
79960: LIST
79961: LIST
79962: PUSH
79963: LD_INT 5
79965: PUSH
79966: LD_INT 0
79968: PUSH
79969: EMPTY
79970: LIST
79971: LIST
79972: PUSH
79973: LD_INT 5
79975: PUSH
79976: LD_INT 1
79978: PUSH
79979: EMPTY
79980: LIST
79981: LIST
79982: PUSH
79983: LD_INT 4
79985: PUSH
79986: LD_INT 1
79988: PUSH
79989: EMPTY
79990: LIST
79991: LIST
79992: PUSH
79993: LD_INT 3
79995: PUSH
79996: LD_INT 0
79998: PUSH
79999: EMPTY
80000: LIST
80001: LIST
80002: PUSH
80003: LD_INT 3
80005: PUSH
80006: LD_INT 1
80008: NEG
80009: PUSH
80010: EMPTY
80011: LIST
80012: LIST
80013: PUSH
80014: LD_INT 3
80016: PUSH
80017: LD_INT 2
80019: NEG
80020: PUSH
80021: EMPTY
80022: LIST
80023: LIST
80024: PUSH
80025: LD_INT 5
80027: PUSH
80028: LD_INT 2
80030: PUSH
80031: EMPTY
80032: LIST
80033: LIST
80034: PUSH
80035: EMPTY
80036: LIST
80037: LIST
80038: LIST
80039: LIST
80040: LIST
80041: LIST
80042: LIST
80043: LIST
80044: LIST
80045: LIST
80046: LIST
80047: LIST
80048: LIST
80049: LIST
80050: LIST
80051: LIST
80052: LIST
80053: LIST
80054: LIST
80055: LIST
80056: LIST
80057: LIST
80058: LIST
80059: LIST
80060: LIST
80061: LIST
80062: LIST
80063: LIST
80064: LIST
80065: LIST
80066: LIST
80067: LIST
80068: LIST
80069: LIST
80070: LIST
80071: LIST
80072: LIST
80073: LIST
80074: LIST
80075: LIST
80076: LIST
80077: LIST
80078: LIST
80079: LIST
80080: LIST
80081: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
80082: LD_ADDR_VAR 0 32
80086: PUSH
80087: LD_INT 4
80089: NEG
80090: PUSH
80091: LD_INT 0
80093: PUSH
80094: EMPTY
80095: LIST
80096: LIST
80097: PUSH
80098: LD_INT 4
80100: NEG
80101: PUSH
80102: LD_INT 1
80104: NEG
80105: PUSH
80106: EMPTY
80107: LIST
80108: LIST
80109: PUSH
80110: LD_INT 3
80112: NEG
80113: PUSH
80114: LD_INT 0
80116: PUSH
80117: EMPTY
80118: LIST
80119: LIST
80120: PUSH
80121: LD_INT 3
80123: NEG
80124: PUSH
80125: LD_INT 1
80127: PUSH
80128: EMPTY
80129: LIST
80130: LIST
80131: PUSH
80132: LD_INT 4
80134: NEG
80135: PUSH
80136: LD_INT 1
80138: PUSH
80139: EMPTY
80140: LIST
80141: LIST
80142: PUSH
80143: LD_INT 5
80145: NEG
80146: PUSH
80147: LD_INT 0
80149: PUSH
80150: EMPTY
80151: LIST
80152: LIST
80153: PUSH
80154: LD_INT 5
80156: NEG
80157: PUSH
80158: LD_INT 1
80160: NEG
80161: PUSH
80162: EMPTY
80163: LIST
80164: LIST
80165: PUSH
80166: LD_INT 5
80168: NEG
80169: PUSH
80170: LD_INT 2
80172: NEG
80173: PUSH
80174: EMPTY
80175: LIST
80176: LIST
80177: PUSH
80178: LD_INT 3
80180: NEG
80181: PUSH
80182: LD_INT 2
80184: PUSH
80185: EMPTY
80186: LIST
80187: LIST
80188: PUSH
80189: LD_INT 3
80191: NEG
80192: PUSH
80193: LD_INT 3
80195: NEG
80196: PUSH
80197: EMPTY
80198: LIST
80199: LIST
80200: PUSH
80201: LD_INT 3
80203: NEG
80204: PUSH
80205: LD_INT 4
80207: NEG
80208: PUSH
80209: EMPTY
80210: LIST
80211: LIST
80212: PUSH
80213: LD_INT 2
80215: NEG
80216: PUSH
80217: LD_INT 3
80219: NEG
80220: PUSH
80221: EMPTY
80222: LIST
80223: LIST
80224: PUSH
80225: LD_INT 2
80227: NEG
80228: PUSH
80229: LD_INT 2
80231: NEG
80232: PUSH
80233: EMPTY
80234: LIST
80235: LIST
80236: PUSH
80237: LD_INT 3
80239: NEG
80240: PUSH
80241: LD_INT 2
80243: NEG
80244: PUSH
80245: EMPTY
80246: LIST
80247: LIST
80248: PUSH
80249: LD_INT 4
80251: NEG
80252: PUSH
80253: LD_INT 3
80255: NEG
80256: PUSH
80257: EMPTY
80258: LIST
80259: LIST
80260: PUSH
80261: LD_INT 4
80263: NEG
80264: PUSH
80265: LD_INT 4
80267: NEG
80268: PUSH
80269: EMPTY
80270: LIST
80271: LIST
80272: PUSH
80273: LD_INT 2
80275: NEG
80276: PUSH
80277: LD_INT 4
80279: NEG
80280: PUSH
80281: EMPTY
80282: LIST
80283: LIST
80284: PUSH
80285: LD_INT 4
80287: NEG
80288: PUSH
80289: LD_INT 2
80291: NEG
80292: PUSH
80293: EMPTY
80294: LIST
80295: LIST
80296: PUSH
80297: LD_INT 0
80299: PUSH
80300: LD_INT 4
80302: NEG
80303: PUSH
80304: EMPTY
80305: LIST
80306: LIST
80307: PUSH
80308: LD_INT 0
80310: PUSH
80311: LD_INT 5
80313: NEG
80314: PUSH
80315: EMPTY
80316: LIST
80317: LIST
80318: PUSH
80319: LD_INT 1
80321: PUSH
80322: LD_INT 4
80324: NEG
80325: PUSH
80326: EMPTY
80327: LIST
80328: LIST
80329: PUSH
80330: LD_INT 1
80332: PUSH
80333: LD_INT 3
80335: NEG
80336: PUSH
80337: EMPTY
80338: LIST
80339: LIST
80340: PUSH
80341: LD_INT 0
80343: PUSH
80344: LD_INT 3
80346: NEG
80347: PUSH
80348: EMPTY
80349: LIST
80350: LIST
80351: PUSH
80352: LD_INT 1
80354: NEG
80355: PUSH
80356: LD_INT 4
80358: NEG
80359: PUSH
80360: EMPTY
80361: LIST
80362: LIST
80363: PUSH
80364: LD_INT 1
80366: NEG
80367: PUSH
80368: LD_INT 5
80370: NEG
80371: PUSH
80372: EMPTY
80373: LIST
80374: LIST
80375: PUSH
80376: LD_INT 2
80378: PUSH
80379: LD_INT 3
80381: NEG
80382: PUSH
80383: EMPTY
80384: LIST
80385: LIST
80386: PUSH
80387: LD_INT 2
80389: NEG
80390: PUSH
80391: LD_INT 5
80393: NEG
80394: PUSH
80395: EMPTY
80396: LIST
80397: LIST
80398: PUSH
80399: LD_INT 3
80401: PUSH
80402: LD_INT 0
80404: PUSH
80405: EMPTY
80406: LIST
80407: LIST
80408: PUSH
80409: LD_INT 3
80411: PUSH
80412: LD_INT 1
80414: NEG
80415: PUSH
80416: EMPTY
80417: LIST
80418: LIST
80419: PUSH
80420: LD_INT 4
80422: PUSH
80423: LD_INT 0
80425: PUSH
80426: EMPTY
80427: LIST
80428: LIST
80429: PUSH
80430: LD_INT 4
80432: PUSH
80433: LD_INT 1
80435: PUSH
80436: EMPTY
80437: LIST
80438: LIST
80439: PUSH
80440: LD_INT 3
80442: PUSH
80443: LD_INT 1
80445: PUSH
80446: EMPTY
80447: LIST
80448: LIST
80449: PUSH
80450: LD_INT 2
80452: PUSH
80453: LD_INT 0
80455: PUSH
80456: EMPTY
80457: LIST
80458: LIST
80459: PUSH
80460: LD_INT 2
80462: PUSH
80463: LD_INT 1
80465: NEG
80466: PUSH
80467: EMPTY
80468: LIST
80469: LIST
80470: PUSH
80471: LD_INT 2
80473: PUSH
80474: LD_INT 2
80476: NEG
80477: PUSH
80478: EMPTY
80479: LIST
80480: LIST
80481: PUSH
80482: LD_INT 4
80484: PUSH
80485: LD_INT 2
80487: PUSH
80488: EMPTY
80489: LIST
80490: LIST
80491: PUSH
80492: LD_INT 4
80494: PUSH
80495: LD_INT 4
80497: PUSH
80498: EMPTY
80499: LIST
80500: LIST
80501: PUSH
80502: LD_INT 4
80504: PUSH
80505: LD_INT 3
80507: PUSH
80508: EMPTY
80509: LIST
80510: LIST
80511: PUSH
80512: LD_INT 5
80514: PUSH
80515: LD_INT 4
80517: PUSH
80518: EMPTY
80519: LIST
80520: LIST
80521: PUSH
80522: LD_INT 5
80524: PUSH
80525: LD_INT 5
80527: PUSH
80528: EMPTY
80529: LIST
80530: LIST
80531: PUSH
80532: LD_INT 4
80534: PUSH
80535: LD_INT 5
80537: PUSH
80538: EMPTY
80539: LIST
80540: LIST
80541: PUSH
80542: LD_INT 3
80544: PUSH
80545: LD_INT 4
80547: PUSH
80548: EMPTY
80549: LIST
80550: LIST
80551: PUSH
80552: LD_INT 3
80554: PUSH
80555: LD_INT 3
80557: PUSH
80558: EMPTY
80559: LIST
80560: LIST
80561: PUSH
80562: LD_INT 5
80564: PUSH
80565: LD_INT 3
80567: PUSH
80568: EMPTY
80569: LIST
80570: LIST
80571: PUSH
80572: LD_INT 3
80574: PUSH
80575: LD_INT 5
80577: PUSH
80578: EMPTY
80579: LIST
80580: LIST
80581: PUSH
80582: EMPTY
80583: LIST
80584: LIST
80585: LIST
80586: LIST
80587: LIST
80588: LIST
80589: LIST
80590: LIST
80591: LIST
80592: LIST
80593: LIST
80594: LIST
80595: LIST
80596: LIST
80597: LIST
80598: LIST
80599: LIST
80600: LIST
80601: LIST
80602: LIST
80603: LIST
80604: LIST
80605: LIST
80606: LIST
80607: LIST
80608: LIST
80609: LIST
80610: LIST
80611: LIST
80612: LIST
80613: LIST
80614: LIST
80615: LIST
80616: LIST
80617: LIST
80618: LIST
80619: LIST
80620: LIST
80621: LIST
80622: LIST
80623: LIST
80624: LIST
80625: LIST
80626: LIST
80627: LIST
80628: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
80629: LD_ADDR_VAR 0 33
80633: PUSH
80634: LD_INT 4
80636: NEG
80637: PUSH
80638: LD_INT 4
80640: NEG
80641: PUSH
80642: EMPTY
80643: LIST
80644: LIST
80645: PUSH
80646: LD_INT 4
80648: NEG
80649: PUSH
80650: LD_INT 5
80652: NEG
80653: PUSH
80654: EMPTY
80655: LIST
80656: LIST
80657: PUSH
80658: LD_INT 3
80660: NEG
80661: PUSH
80662: LD_INT 4
80664: NEG
80665: PUSH
80666: EMPTY
80667: LIST
80668: LIST
80669: PUSH
80670: LD_INT 3
80672: NEG
80673: PUSH
80674: LD_INT 3
80676: NEG
80677: PUSH
80678: EMPTY
80679: LIST
80680: LIST
80681: PUSH
80682: LD_INT 4
80684: NEG
80685: PUSH
80686: LD_INT 3
80688: NEG
80689: PUSH
80690: EMPTY
80691: LIST
80692: LIST
80693: PUSH
80694: LD_INT 5
80696: NEG
80697: PUSH
80698: LD_INT 4
80700: NEG
80701: PUSH
80702: EMPTY
80703: LIST
80704: LIST
80705: PUSH
80706: LD_INT 5
80708: NEG
80709: PUSH
80710: LD_INT 5
80712: NEG
80713: PUSH
80714: EMPTY
80715: LIST
80716: LIST
80717: PUSH
80718: LD_INT 3
80720: NEG
80721: PUSH
80722: LD_INT 5
80724: NEG
80725: PUSH
80726: EMPTY
80727: LIST
80728: LIST
80729: PUSH
80730: LD_INT 5
80732: NEG
80733: PUSH
80734: LD_INT 3
80736: NEG
80737: PUSH
80738: EMPTY
80739: LIST
80740: LIST
80741: PUSH
80742: LD_INT 0
80744: PUSH
80745: LD_INT 3
80747: NEG
80748: PUSH
80749: EMPTY
80750: LIST
80751: LIST
80752: PUSH
80753: LD_INT 0
80755: PUSH
80756: LD_INT 4
80758: NEG
80759: PUSH
80760: EMPTY
80761: LIST
80762: LIST
80763: PUSH
80764: LD_INT 1
80766: PUSH
80767: LD_INT 3
80769: NEG
80770: PUSH
80771: EMPTY
80772: LIST
80773: LIST
80774: PUSH
80775: LD_INT 1
80777: PUSH
80778: LD_INT 2
80780: NEG
80781: PUSH
80782: EMPTY
80783: LIST
80784: LIST
80785: PUSH
80786: LD_INT 0
80788: PUSH
80789: LD_INT 2
80791: NEG
80792: PUSH
80793: EMPTY
80794: LIST
80795: LIST
80796: PUSH
80797: LD_INT 1
80799: NEG
80800: PUSH
80801: LD_INT 3
80803: NEG
80804: PUSH
80805: EMPTY
80806: LIST
80807: LIST
80808: PUSH
80809: LD_INT 1
80811: NEG
80812: PUSH
80813: LD_INT 4
80815: NEG
80816: PUSH
80817: EMPTY
80818: LIST
80819: LIST
80820: PUSH
80821: LD_INT 2
80823: PUSH
80824: LD_INT 2
80826: NEG
80827: PUSH
80828: EMPTY
80829: LIST
80830: LIST
80831: PUSH
80832: LD_INT 2
80834: NEG
80835: PUSH
80836: LD_INT 4
80838: NEG
80839: PUSH
80840: EMPTY
80841: LIST
80842: LIST
80843: PUSH
80844: LD_INT 4
80846: PUSH
80847: LD_INT 0
80849: PUSH
80850: EMPTY
80851: LIST
80852: LIST
80853: PUSH
80854: LD_INT 4
80856: PUSH
80857: LD_INT 1
80859: NEG
80860: PUSH
80861: EMPTY
80862: LIST
80863: LIST
80864: PUSH
80865: LD_INT 5
80867: PUSH
80868: LD_INT 0
80870: PUSH
80871: EMPTY
80872: LIST
80873: LIST
80874: PUSH
80875: LD_INT 5
80877: PUSH
80878: LD_INT 1
80880: PUSH
80881: EMPTY
80882: LIST
80883: LIST
80884: PUSH
80885: LD_INT 4
80887: PUSH
80888: LD_INT 1
80890: PUSH
80891: EMPTY
80892: LIST
80893: LIST
80894: PUSH
80895: LD_INT 3
80897: PUSH
80898: LD_INT 0
80900: PUSH
80901: EMPTY
80902: LIST
80903: LIST
80904: PUSH
80905: LD_INT 3
80907: PUSH
80908: LD_INT 1
80910: NEG
80911: PUSH
80912: EMPTY
80913: LIST
80914: LIST
80915: PUSH
80916: LD_INT 3
80918: PUSH
80919: LD_INT 2
80921: NEG
80922: PUSH
80923: EMPTY
80924: LIST
80925: LIST
80926: PUSH
80927: LD_INT 5
80929: PUSH
80930: LD_INT 2
80932: PUSH
80933: EMPTY
80934: LIST
80935: LIST
80936: PUSH
80937: LD_INT 3
80939: PUSH
80940: LD_INT 3
80942: PUSH
80943: EMPTY
80944: LIST
80945: LIST
80946: PUSH
80947: LD_INT 3
80949: PUSH
80950: LD_INT 2
80952: PUSH
80953: EMPTY
80954: LIST
80955: LIST
80956: PUSH
80957: LD_INT 4
80959: PUSH
80960: LD_INT 3
80962: PUSH
80963: EMPTY
80964: LIST
80965: LIST
80966: PUSH
80967: LD_INT 4
80969: PUSH
80970: LD_INT 4
80972: PUSH
80973: EMPTY
80974: LIST
80975: LIST
80976: PUSH
80977: LD_INT 3
80979: PUSH
80980: LD_INT 4
80982: PUSH
80983: EMPTY
80984: LIST
80985: LIST
80986: PUSH
80987: LD_INT 2
80989: PUSH
80990: LD_INT 3
80992: PUSH
80993: EMPTY
80994: LIST
80995: LIST
80996: PUSH
80997: LD_INT 2
80999: PUSH
81000: LD_INT 2
81002: PUSH
81003: EMPTY
81004: LIST
81005: LIST
81006: PUSH
81007: LD_INT 4
81009: PUSH
81010: LD_INT 2
81012: PUSH
81013: EMPTY
81014: LIST
81015: LIST
81016: PUSH
81017: LD_INT 2
81019: PUSH
81020: LD_INT 4
81022: PUSH
81023: EMPTY
81024: LIST
81025: LIST
81026: PUSH
81027: LD_INT 0
81029: PUSH
81030: LD_INT 4
81032: PUSH
81033: EMPTY
81034: LIST
81035: LIST
81036: PUSH
81037: LD_INT 0
81039: PUSH
81040: LD_INT 3
81042: PUSH
81043: EMPTY
81044: LIST
81045: LIST
81046: PUSH
81047: LD_INT 1
81049: PUSH
81050: LD_INT 4
81052: PUSH
81053: EMPTY
81054: LIST
81055: LIST
81056: PUSH
81057: LD_INT 1
81059: PUSH
81060: LD_INT 5
81062: PUSH
81063: EMPTY
81064: LIST
81065: LIST
81066: PUSH
81067: LD_INT 0
81069: PUSH
81070: LD_INT 5
81072: PUSH
81073: EMPTY
81074: LIST
81075: LIST
81076: PUSH
81077: LD_INT 1
81079: NEG
81080: PUSH
81081: LD_INT 4
81083: PUSH
81084: EMPTY
81085: LIST
81086: LIST
81087: PUSH
81088: LD_INT 1
81090: NEG
81091: PUSH
81092: LD_INT 3
81094: PUSH
81095: EMPTY
81096: LIST
81097: LIST
81098: PUSH
81099: LD_INT 2
81101: PUSH
81102: LD_INT 5
81104: PUSH
81105: EMPTY
81106: LIST
81107: LIST
81108: PUSH
81109: LD_INT 2
81111: NEG
81112: PUSH
81113: LD_INT 3
81115: PUSH
81116: EMPTY
81117: LIST
81118: LIST
81119: PUSH
81120: EMPTY
81121: LIST
81122: LIST
81123: LIST
81124: LIST
81125: LIST
81126: LIST
81127: LIST
81128: LIST
81129: LIST
81130: LIST
81131: LIST
81132: LIST
81133: LIST
81134: LIST
81135: LIST
81136: LIST
81137: LIST
81138: LIST
81139: LIST
81140: LIST
81141: LIST
81142: LIST
81143: LIST
81144: LIST
81145: LIST
81146: LIST
81147: LIST
81148: LIST
81149: LIST
81150: LIST
81151: LIST
81152: LIST
81153: LIST
81154: LIST
81155: LIST
81156: LIST
81157: LIST
81158: LIST
81159: LIST
81160: LIST
81161: LIST
81162: LIST
81163: LIST
81164: LIST
81165: LIST
81166: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
81167: LD_ADDR_VAR 0 34
81171: PUSH
81172: LD_INT 0
81174: PUSH
81175: LD_INT 4
81177: NEG
81178: PUSH
81179: EMPTY
81180: LIST
81181: LIST
81182: PUSH
81183: LD_INT 0
81185: PUSH
81186: LD_INT 5
81188: NEG
81189: PUSH
81190: EMPTY
81191: LIST
81192: LIST
81193: PUSH
81194: LD_INT 1
81196: PUSH
81197: LD_INT 4
81199: NEG
81200: PUSH
81201: EMPTY
81202: LIST
81203: LIST
81204: PUSH
81205: LD_INT 1
81207: PUSH
81208: LD_INT 3
81210: NEG
81211: PUSH
81212: EMPTY
81213: LIST
81214: LIST
81215: PUSH
81216: LD_INT 0
81218: PUSH
81219: LD_INT 3
81221: NEG
81222: PUSH
81223: EMPTY
81224: LIST
81225: LIST
81226: PUSH
81227: LD_INT 1
81229: NEG
81230: PUSH
81231: LD_INT 4
81233: NEG
81234: PUSH
81235: EMPTY
81236: LIST
81237: LIST
81238: PUSH
81239: LD_INT 1
81241: NEG
81242: PUSH
81243: LD_INT 5
81245: NEG
81246: PUSH
81247: EMPTY
81248: LIST
81249: LIST
81250: PUSH
81251: LD_INT 2
81253: PUSH
81254: LD_INT 3
81256: NEG
81257: PUSH
81258: EMPTY
81259: LIST
81260: LIST
81261: PUSH
81262: LD_INT 2
81264: NEG
81265: PUSH
81266: LD_INT 5
81268: NEG
81269: PUSH
81270: EMPTY
81271: LIST
81272: LIST
81273: PUSH
81274: LD_INT 3
81276: PUSH
81277: LD_INT 0
81279: PUSH
81280: EMPTY
81281: LIST
81282: LIST
81283: PUSH
81284: LD_INT 3
81286: PUSH
81287: LD_INT 1
81289: NEG
81290: PUSH
81291: EMPTY
81292: LIST
81293: LIST
81294: PUSH
81295: LD_INT 4
81297: PUSH
81298: LD_INT 0
81300: PUSH
81301: EMPTY
81302: LIST
81303: LIST
81304: PUSH
81305: LD_INT 4
81307: PUSH
81308: LD_INT 1
81310: PUSH
81311: EMPTY
81312: LIST
81313: LIST
81314: PUSH
81315: LD_INT 3
81317: PUSH
81318: LD_INT 1
81320: PUSH
81321: EMPTY
81322: LIST
81323: LIST
81324: PUSH
81325: LD_INT 2
81327: PUSH
81328: LD_INT 0
81330: PUSH
81331: EMPTY
81332: LIST
81333: LIST
81334: PUSH
81335: LD_INT 2
81337: PUSH
81338: LD_INT 1
81340: NEG
81341: PUSH
81342: EMPTY
81343: LIST
81344: LIST
81345: PUSH
81346: LD_INT 2
81348: PUSH
81349: LD_INT 2
81351: NEG
81352: PUSH
81353: EMPTY
81354: LIST
81355: LIST
81356: PUSH
81357: LD_INT 4
81359: PUSH
81360: LD_INT 2
81362: PUSH
81363: EMPTY
81364: LIST
81365: LIST
81366: PUSH
81367: LD_INT 4
81369: PUSH
81370: LD_INT 4
81372: PUSH
81373: EMPTY
81374: LIST
81375: LIST
81376: PUSH
81377: LD_INT 4
81379: PUSH
81380: LD_INT 3
81382: PUSH
81383: EMPTY
81384: LIST
81385: LIST
81386: PUSH
81387: LD_INT 5
81389: PUSH
81390: LD_INT 4
81392: PUSH
81393: EMPTY
81394: LIST
81395: LIST
81396: PUSH
81397: LD_INT 5
81399: PUSH
81400: LD_INT 5
81402: PUSH
81403: EMPTY
81404: LIST
81405: LIST
81406: PUSH
81407: LD_INT 4
81409: PUSH
81410: LD_INT 5
81412: PUSH
81413: EMPTY
81414: LIST
81415: LIST
81416: PUSH
81417: LD_INT 3
81419: PUSH
81420: LD_INT 4
81422: PUSH
81423: EMPTY
81424: LIST
81425: LIST
81426: PUSH
81427: LD_INT 3
81429: PUSH
81430: LD_INT 3
81432: PUSH
81433: EMPTY
81434: LIST
81435: LIST
81436: PUSH
81437: LD_INT 5
81439: PUSH
81440: LD_INT 3
81442: PUSH
81443: EMPTY
81444: LIST
81445: LIST
81446: PUSH
81447: LD_INT 3
81449: PUSH
81450: LD_INT 5
81452: PUSH
81453: EMPTY
81454: LIST
81455: LIST
81456: PUSH
81457: LD_INT 0
81459: PUSH
81460: LD_INT 3
81462: PUSH
81463: EMPTY
81464: LIST
81465: LIST
81466: PUSH
81467: LD_INT 0
81469: PUSH
81470: LD_INT 2
81472: PUSH
81473: EMPTY
81474: LIST
81475: LIST
81476: PUSH
81477: LD_INT 1
81479: PUSH
81480: LD_INT 3
81482: PUSH
81483: EMPTY
81484: LIST
81485: LIST
81486: PUSH
81487: LD_INT 1
81489: PUSH
81490: LD_INT 4
81492: PUSH
81493: EMPTY
81494: LIST
81495: LIST
81496: PUSH
81497: LD_INT 0
81499: PUSH
81500: LD_INT 4
81502: PUSH
81503: EMPTY
81504: LIST
81505: LIST
81506: PUSH
81507: LD_INT 1
81509: NEG
81510: PUSH
81511: LD_INT 3
81513: PUSH
81514: EMPTY
81515: LIST
81516: LIST
81517: PUSH
81518: LD_INT 1
81520: NEG
81521: PUSH
81522: LD_INT 2
81524: PUSH
81525: EMPTY
81526: LIST
81527: LIST
81528: PUSH
81529: LD_INT 2
81531: PUSH
81532: LD_INT 4
81534: PUSH
81535: EMPTY
81536: LIST
81537: LIST
81538: PUSH
81539: LD_INT 2
81541: NEG
81542: PUSH
81543: LD_INT 2
81545: PUSH
81546: EMPTY
81547: LIST
81548: LIST
81549: PUSH
81550: LD_INT 4
81552: NEG
81553: PUSH
81554: LD_INT 0
81556: PUSH
81557: EMPTY
81558: LIST
81559: LIST
81560: PUSH
81561: LD_INT 4
81563: NEG
81564: PUSH
81565: LD_INT 1
81567: NEG
81568: PUSH
81569: EMPTY
81570: LIST
81571: LIST
81572: PUSH
81573: LD_INT 3
81575: NEG
81576: PUSH
81577: LD_INT 0
81579: PUSH
81580: EMPTY
81581: LIST
81582: LIST
81583: PUSH
81584: LD_INT 3
81586: NEG
81587: PUSH
81588: LD_INT 1
81590: PUSH
81591: EMPTY
81592: LIST
81593: LIST
81594: PUSH
81595: LD_INT 4
81597: NEG
81598: PUSH
81599: LD_INT 1
81601: PUSH
81602: EMPTY
81603: LIST
81604: LIST
81605: PUSH
81606: LD_INT 5
81608: NEG
81609: PUSH
81610: LD_INT 0
81612: PUSH
81613: EMPTY
81614: LIST
81615: LIST
81616: PUSH
81617: LD_INT 5
81619: NEG
81620: PUSH
81621: LD_INT 1
81623: NEG
81624: PUSH
81625: EMPTY
81626: LIST
81627: LIST
81628: PUSH
81629: LD_INT 5
81631: NEG
81632: PUSH
81633: LD_INT 2
81635: NEG
81636: PUSH
81637: EMPTY
81638: LIST
81639: LIST
81640: PUSH
81641: LD_INT 3
81643: NEG
81644: PUSH
81645: LD_INT 2
81647: PUSH
81648: EMPTY
81649: LIST
81650: LIST
81651: PUSH
81652: EMPTY
81653: LIST
81654: LIST
81655: LIST
81656: LIST
81657: LIST
81658: LIST
81659: LIST
81660: LIST
81661: LIST
81662: LIST
81663: LIST
81664: LIST
81665: LIST
81666: LIST
81667: LIST
81668: LIST
81669: LIST
81670: LIST
81671: LIST
81672: LIST
81673: LIST
81674: LIST
81675: LIST
81676: LIST
81677: LIST
81678: LIST
81679: LIST
81680: LIST
81681: LIST
81682: LIST
81683: LIST
81684: LIST
81685: LIST
81686: LIST
81687: LIST
81688: LIST
81689: LIST
81690: LIST
81691: LIST
81692: LIST
81693: LIST
81694: LIST
81695: LIST
81696: LIST
81697: LIST
81698: ST_TO_ADDR
// end ; end ;
81699: GO 81702
81701: POP
// case btype of b_depot , b_warehouse :
81702: LD_VAR 0 1
81706: PUSH
81707: LD_INT 0
81709: DOUBLE
81710: EQUAL
81711: IFTRUE 81721
81713: LD_INT 1
81715: DOUBLE
81716: EQUAL
81717: IFTRUE 81721
81719: GO 81922
81721: POP
// case nation of nation_american :
81722: LD_VAR 0 5
81726: PUSH
81727: LD_INT 1
81729: DOUBLE
81730: EQUAL
81731: IFTRUE 81735
81733: GO 81791
81735: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
81736: LD_ADDR_VAR 0 9
81740: PUSH
81741: LD_VAR 0 11
81745: PUSH
81746: LD_VAR 0 12
81750: PUSH
81751: LD_VAR 0 13
81755: PUSH
81756: LD_VAR 0 14
81760: PUSH
81761: LD_VAR 0 15
81765: PUSH
81766: LD_VAR 0 16
81770: PUSH
81771: EMPTY
81772: LIST
81773: LIST
81774: LIST
81775: LIST
81776: LIST
81777: LIST
81778: PUSH
81779: LD_VAR 0 4
81783: PUSH
81784: LD_INT 1
81786: PLUS
81787: ARRAY
81788: ST_TO_ADDR
81789: GO 81920
81791: LD_INT 2
81793: DOUBLE
81794: EQUAL
81795: IFTRUE 81799
81797: GO 81855
81799: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
81800: LD_ADDR_VAR 0 9
81804: PUSH
81805: LD_VAR 0 17
81809: PUSH
81810: LD_VAR 0 18
81814: PUSH
81815: LD_VAR 0 19
81819: PUSH
81820: LD_VAR 0 20
81824: PUSH
81825: LD_VAR 0 21
81829: PUSH
81830: LD_VAR 0 22
81834: PUSH
81835: EMPTY
81836: LIST
81837: LIST
81838: LIST
81839: LIST
81840: LIST
81841: LIST
81842: PUSH
81843: LD_VAR 0 4
81847: PUSH
81848: LD_INT 1
81850: PLUS
81851: ARRAY
81852: ST_TO_ADDR
81853: GO 81920
81855: LD_INT 3
81857: DOUBLE
81858: EQUAL
81859: IFTRUE 81863
81861: GO 81919
81863: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
81864: LD_ADDR_VAR 0 9
81868: PUSH
81869: LD_VAR 0 23
81873: PUSH
81874: LD_VAR 0 24
81878: PUSH
81879: LD_VAR 0 25
81883: PUSH
81884: LD_VAR 0 26
81888: PUSH
81889: LD_VAR 0 27
81893: PUSH
81894: LD_VAR 0 28
81898: PUSH
81899: EMPTY
81900: LIST
81901: LIST
81902: LIST
81903: LIST
81904: LIST
81905: LIST
81906: PUSH
81907: LD_VAR 0 4
81911: PUSH
81912: LD_INT 1
81914: PLUS
81915: ARRAY
81916: ST_TO_ADDR
81917: GO 81920
81919: POP
81920: GO 82475
81922: LD_INT 2
81924: DOUBLE
81925: EQUAL
81926: IFTRUE 81936
81928: LD_INT 3
81930: DOUBLE
81931: EQUAL
81932: IFTRUE 81936
81934: GO 81992
81936: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
81937: LD_ADDR_VAR 0 9
81941: PUSH
81942: LD_VAR 0 29
81946: PUSH
81947: LD_VAR 0 30
81951: PUSH
81952: LD_VAR 0 31
81956: PUSH
81957: LD_VAR 0 32
81961: PUSH
81962: LD_VAR 0 33
81966: PUSH
81967: LD_VAR 0 34
81971: PUSH
81972: EMPTY
81973: LIST
81974: LIST
81975: LIST
81976: LIST
81977: LIST
81978: LIST
81979: PUSH
81980: LD_VAR 0 4
81984: PUSH
81985: LD_INT 1
81987: PLUS
81988: ARRAY
81989: ST_TO_ADDR
81990: GO 82475
81992: LD_INT 16
81994: DOUBLE
81995: EQUAL
81996: IFTRUE 82054
81998: LD_INT 17
82000: DOUBLE
82001: EQUAL
82002: IFTRUE 82054
82004: LD_INT 18
82006: DOUBLE
82007: EQUAL
82008: IFTRUE 82054
82010: LD_INT 19
82012: DOUBLE
82013: EQUAL
82014: IFTRUE 82054
82016: LD_INT 22
82018: DOUBLE
82019: EQUAL
82020: IFTRUE 82054
82022: LD_INT 20
82024: DOUBLE
82025: EQUAL
82026: IFTRUE 82054
82028: LD_INT 21
82030: DOUBLE
82031: EQUAL
82032: IFTRUE 82054
82034: LD_INT 23
82036: DOUBLE
82037: EQUAL
82038: IFTRUE 82054
82040: LD_INT 24
82042: DOUBLE
82043: EQUAL
82044: IFTRUE 82054
82046: LD_INT 25
82048: DOUBLE
82049: EQUAL
82050: IFTRUE 82054
82052: GO 82110
82054: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
82055: LD_ADDR_VAR 0 9
82059: PUSH
82060: LD_VAR 0 35
82064: PUSH
82065: LD_VAR 0 36
82069: PUSH
82070: LD_VAR 0 37
82074: PUSH
82075: LD_VAR 0 38
82079: PUSH
82080: LD_VAR 0 39
82084: PUSH
82085: LD_VAR 0 40
82089: PUSH
82090: EMPTY
82091: LIST
82092: LIST
82093: LIST
82094: LIST
82095: LIST
82096: LIST
82097: PUSH
82098: LD_VAR 0 4
82102: PUSH
82103: LD_INT 1
82105: PLUS
82106: ARRAY
82107: ST_TO_ADDR
82108: GO 82475
82110: LD_INT 6
82112: DOUBLE
82113: EQUAL
82114: IFTRUE 82166
82116: LD_INT 7
82118: DOUBLE
82119: EQUAL
82120: IFTRUE 82166
82122: LD_INT 8
82124: DOUBLE
82125: EQUAL
82126: IFTRUE 82166
82128: LD_INT 13
82130: DOUBLE
82131: EQUAL
82132: IFTRUE 82166
82134: LD_INT 12
82136: DOUBLE
82137: EQUAL
82138: IFTRUE 82166
82140: LD_INT 15
82142: DOUBLE
82143: EQUAL
82144: IFTRUE 82166
82146: LD_INT 11
82148: DOUBLE
82149: EQUAL
82150: IFTRUE 82166
82152: LD_INT 14
82154: DOUBLE
82155: EQUAL
82156: IFTRUE 82166
82158: LD_INT 10
82160: DOUBLE
82161: EQUAL
82162: IFTRUE 82166
82164: GO 82222
82166: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
82167: LD_ADDR_VAR 0 9
82171: PUSH
82172: LD_VAR 0 41
82176: PUSH
82177: LD_VAR 0 42
82181: PUSH
82182: LD_VAR 0 43
82186: PUSH
82187: LD_VAR 0 44
82191: PUSH
82192: LD_VAR 0 45
82196: PUSH
82197: LD_VAR 0 46
82201: PUSH
82202: EMPTY
82203: LIST
82204: LIST
82205: LIST
82206: LIST
82207: LIST
82208: LIST
82209: PUSH
82210: LD_VAR 0 4
82214: PUSH
82215: LD_INT 1
82217: PLUS
82218: ARRAY
82219: ST_TO_ADDR
82220: GO 82475
82222: LD_INT 36
82224: DOUBLE
82225: EQUAL
82226: IFTRUE 82230
82228: GO 82286
82230: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
82231: LD_ADDR_VAR 0 9
82235: PUSH
82236: LD_VAR 0 47
82240: PUSH
82241: LD_VAR 0 48
82245: PUSH
82246: LD_VAR 0 49
82250: PUSH
82251: LD_VAR 0 50
82255: PUSH
82256: LD_VAR 0 51
82260: PUSH
82261: LD_VAR 0 52
82265: PUSH
82266: EMPTY
82267: LIST
82268: LIST
82269: LIST
82270: LIST
82271: LIST
82272: LIST
82273: PUSH
82274: LD_VAR 0 4
82278: PUSH
82279: LD_INT 1
82281: PLUS
82282: ARRAY
82283: ST_TO_ADDR
82284: GO 82475
82286: LD_INT 4
82288: DOUBLE
82289: EQUAL
82290: IFTRUE 82312
82292: LD_INT 5
82294: DOUBLE
82295: EQUAL
82296: IFTRUE 82312
82298: LD_INT 34
82300: DOUBLE
82301: EQUAL
82302: IFTRUE 82312
82304: LD_INT 37
82306: DOUBLE
82307: EQUAL
82308: IFTRUE 82312
82310: GO 82368
82312: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
82313: LD_ADDR_VAR 0 9
82317: PUSH
82318: LD_VAR 0 53
82322: PUSH
82323: LD_VAR 0 54
82327: PUSH
82328: LD_VAR 0 55
82332: PUSH
82333: LD_VAR 0 56
82337: PUSH
82338: LD_VAR 0 57
82342: PUSH
82343: LD_VAR 0 58
82347: PUSH
82348: EMPTY
82349: LIST
82350: LIST
82351: LIST
82352: LIST
82353: LIST
82354: LIST
82355: PUSH
82356: LD_VAR 0 4
82360: PUSH
82361: LD_INT 1
82363: PLUS
82364: ARRAY
82365: ST_TO_ADDR
82366: GO 82475
82368: LD_INT 31
82370: DOUBLE
82371: EQUAL
82372: IFTRUE 82418
82374: LD_INT 32
82376: DOUBLE
82377: EQUAL
82378: IFTRUE 82418
82380: LD_INT 33
82382: DOUBLE
82383: EQUAL
82384: IFTRUE 82418
82386: LD_INT 27
82388: DOUBLE
82389: EQUAL
82390: IFTRUE 82418
82392: LD_INT 26
82394: DOUBLE
82395: EQUAL
82396: IFTRUE 82418
82398: LD_INT 28
82400: DOUBLE
82401: EQUAL
82402: IFTRUE 82418
82404: LD_INT 29
82406: DOUBLE
82407: EQUAL
82408: IFTRUE 82418
82410: LD_INT 30
82412: DOUBLE
82413: EQUAL
82414: IFTRUE 82418
82416: GO 82474
82418: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
82419: LD_ADDR_VAR 0 9
82423: PUSH
82424: LD_VAR 0 59
82428: PUSH
82429: LD_VAR 0 60
82433: PUSH
82434: LD_VAR 0 61
82438: PUSH
82439: LD_VAR 0 62
82443: PUSH
82444: LD_VAR 0 63
82448: PUSH
82449: LD_VAR 0 64
82453: PUSH
82454: EMPTY
82455: LIST
82456: LIST
82457: LIST
82458: LIST
82459: LIST
82460: LIST
82461: PUSH
82462: LD_VAR 0 4
82466: PUSH
82467: LD_INT 1
82469: PLUS
82470: ARRAY
82471: ST_TO_ADDR
82472: GO 82475
82474: POP
// temp_list2 = [ ] ;
82475: LD_ADDR_VAR 0 10
82479: PUSH
82480: EMPTY
82481: ST_TO_ADDR
// for i in temp_list do
82482: LD_ADDR_VAR 0 8
82486: PUSH
82487: LD_VAR 0 9
82491: PUSH
82492: FOR_IN
82493: IFFALSE 82545
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
82495: LD_ADDR_VAR 0 10
82499: PUSH
82500: LD_VAR 0 10
82504: PUSH
82505: LD_VAR 0 8
82509: PUSH
82510: LD_INT 1
82512: ARRAY
82513: PUSH
82514: LD_VAR 0 2
82518: PLUS
82519: PUSH
82520: LD_VAR 0 8
82524: PUSH
82525: LD_INT 2
82527: ARRAY
82528: PUSH
82529: LD_VAR 0 3
82533: PLUS
82534: PUSH
82535: EMPTY
82536: LIST
82537: LIST
82538: PUSH
82539: EMPTY
82540: LIST
82541: ADD
82542: ST_TO_ADDR
82543: GO 82492
82545: POP
82546: POP
// result = temp_list2 ;
82547: LD_ADDR_VAR 0 7
82551: PUSH
82552: LD_VAR 0 10
82556: ST_TO_ADDR
// end ;
82557: LD_VAR 0 7
82561: RET
// export function EnemyInRange ( unit , dist ) ; begin
82562: LD_INT 0
82564: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
82565: LD_ADDR_VAR 0 3
82569: PUSH
82570: LD_VAR 0 1
82574: PPUSH
82575: CALL_OW 255
82579: PPUSH
82580: LD_VAR 0 1
82584: PPUSH
82585: CALL_OW 250
82589: PPUSH
82590: LD_VAR 0 1
82594: PPUSH
82595: CALL_OW 251
82599: PPUSH
82600: LD_VAR 0 2
82604: PPUSH
82605: CALL 55964 0 4
82609: PUSH
82610: LD_INT 4
82612: ARRAY
82613: ST_TO_ADDR
// end ;
82614: LD_VAR 0 3
82618: RET
// export function PlayerSeeMe ( unit ) ; begin
82619: LD_INT 0
82621: PPUSH
// result := See ( your_side , unit ) ;
82622: LD_ADDR_VAR 0 2
82626: PUSH
82627: LD_OWVAR 2
82631: PPUSH
82632: LD_VAR 0 1
82636: PPUSH
82637: CALL_OW 292
82641: ST_TO_ADDR
// end ;
82642: LD_VAR 0 2
82646: RET
// export function ReverseDir ( unit ) ; begin
82647: LD_INT 0
82649: PPUSH
// if not unit then
82650: LD_VAR 0 1
82654: NOT
82655: IFFALSE 82659
// exit ;
82657: GO 82682
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
82659: LD_ADDR_VAR 0 2
82663: PUSH
82664: LD_VAR 0 1
82668: PPUSH
82669: CALL_OW 254
82673: PUSH
82674: LD_INT 3
82676: PLUS
82677: PUSH
82678: LD_INT 6
82680: MOD
82681: ST_TO_ADDR
// end ;
82682: LD_VAR 0 2
82686: RET
// export function ReverseArray ( array ) ; var i ; begin
82687: LD_INT 0
82689: PPUSH
82690: PPUSH
// if not array then
82691: LD_VAR 0 1
82695: NOT
82696: IFFALSE 82700
// exit ;
82698: GO 82755
// result := [ ] ;
82700: LD_ADDR_VAR 0 2
82704: PUSH
82705: EMPTY
82706: ST_TO_ADDR
// for i := array downto 1 do
82707: LD_ADDR_VAR 0 3
82711: PUSH
82712: DOUBLE
82713: LD_VAR 0 1
82717: INC
82718: ST_TO_ADDR
82719: LD_INT 1
82721: PUSH
82722: FOR_DOWNTO
82723: IFFALSE 82753
// result := Join ( result , array [ i ] ) ;
82725: LD_ADDR_VAR 0 2
82729: PUSH
82730: LD_VAR 0 2
82734: PPUSH
82735: LD_VAR 0 1
82739: PUSH
82740: LD_VAR 0 3
82744: ARRAY
82745: PPUSH
82746: CALL 87380 0 2
82750: ST_TO_ADDR
82751: GO 82722
82753: POP
82754: POP
// end ;
82755: LD_VAR 0 2
82759: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
82760: LD_INT 0
82762: PPUSH
82763: PPUSH
82764: PPUSH
82765: PPUSH
82766: PPUSH
82767: PPUSH
// if not unit or not hexes then
82768: LD_VAR 0 1
82772: NOT
82773: PUSH
82774: LD_VAR 0 2
82778: NOT
82779: OR
82780: IFFALSE 82784
// exit ;
82782: GO 82907
// dist := 9999 ;
82784: LD_ADDR_VAR 0 5
82788: PUSH
82789: LD_INT 9999
82791: ST_TO_ADDR
// for i = 1 to hexes do
82792: LD_ADDR_VAR 0 4
82796: PUSH
82797: DOUBLE
82798: LD_INT 1
82800: DEC
82801: ST_TO_ADDR
82802: LD_VAR 0 2
82806: PUSH
82807: FOR_TO
82808: IFFALSE 82895
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
82810: LD_ADDR_VAR 0 6
82814: PUSH
82815: LD_VAR 0 1
82819: PPUSH
82820: LD_VAR 0 2
82824: PUSH
82825: LD_VAR 0 4
82829: ARRAY
82830: PUSH
82831: LD_INT 1
82833: ARRAY
82834: PPUSH
82835: LD_VAR 0 2
82839: PUSH
82840: LD_VAR 0 4
82844: ARRAY
82845: PUSH
82846: LD_INT 2
82848: ARRAY
82849: PPUSH
82850: CALL_OW 297
82854: ST_TO_ADDR
// if tdist < dist then
82855: LD_VAR 0 6
82859: PUSH
82860: LD_VAR 0 5
82864: LESS
82865: IFFALSE 82893
// begin hex := hexes [ i ] ;
82867: LD_ADDR_VAR 0 8
82871: PUSH
82872: LD_VAR 0 2
82876: PUSH
82877: LD_VAR 0 4
82881: ARRAY
82882: ST_TO_ADDR
// dist := tdist ;
82883: LD_ADDR_VAR 0 5
82887: PUSH
82888: LD_VAR 0 6
82892: ST_TO_ADDR
// end ; end ;
82893: GO 82807
82895: POP
82896: POP
// result := hex ;
82897: LD_ADDR_VAR 0 3
82901: PUSH
82902: LD_VAR 0 8
82906: ST_TO_ADDR
// end ;
82907: LD_VAR 0 3
82911: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
82912: LD_INT 0
82914: PPUSH
82915: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
82916: LD_VAR 0 1
82920: NOT
82921: PUSH
82922: LD_VAR 0 1
82926: PUSH
82927: LD_INT 21
82929: PUSH
82930: LD_INT 2
82932: PUSH
82933: EMPTY
82934: LIST
82935: LIST
82936: PUSH
82937: LD_INT 23
82939: PUSH
82940: LD_INT 2
82942: PUSH
82943: EMPTY
82944: LIST
82945: LIST
82946: PUSH
82947: EMPTY
82948: LIST
82949: LIST
82950: PPUSH
82951: CALL_OW 69
82955: IN
82956: NOT
82957: OR
82958: IFFALSE 82962
// exit ;
82960: GO 83009
// for i = 1 to 3 do
82962: LD_ADDR_VAR 0 3
82966: PUSH
82967: DOUBLE
82968: LD_INT 1
82970: DEC
82971: ST_TO_ADDR
82972: LD_INT 3
82974: PUSH
82975: FOR_TO
82976: IFFALSE 83007
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
82978: LD_VAR 0 1
82982: PPUSH
82983: CALL_OW 250
82987: PPUSH
82988: LD_VAR 0 1
82992: PPUSH
82993: CALL_OW 251
82997: PPUSH
82998: LD_INT 1
83000: PPUSH
83001: CALL_OW 453
83005: GO 82975
83007: POP
83008: POP
// end ;
83009: LD_VAR 0 2
83013: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
83014: LD_INT 0
83016: PPUSH
83017: PPUSH
83018: PPUSH
83019: PPUSH
83020: PPUSH
83021: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
83022: LD_VAR 0 1
83026: NOT
83027: PUSH
83028: LD_VAR 0 2
83032: NOT
83033: OR
83034: PUSH
83035: LD_VAR 0 1
83039: PPUSH
83040: CALL_OW 314
83044: OR
83045: IFFALSE 83049
// exit ;
83047: GO 83490
// x := GetX ( enemy_unit ) ;
83049: LD_ADDR_VAR 0 7
83053: PUSH
83054: LD_VAR 0 2
83058: PPUSH
83059: CALL_OW 250
83063: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
83064: LD_ADDR_VAR 0 8
83068: PUSH
83069: LD_VAR 0 2
83073: PPUSH
83074: CALL_OW 251
83078: ST_TO_ADDR
// if not x or not y then
83079: LD_VAR 0 7
83083: NOT
83084: PUSH
83085: LD_VAR 0 8
83089: NOT
83090: OR
83091: IFFALSE 83095
// exit ;
83093: GO 83490
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
83095: LD_ADDR_VAR 0 6
83099: PUSH
83100: LD_VAR 0 7
83104: PPUSH
83105: LD_INT 0
83107: PPUSH
83108: LD_INT 4
83110: PPUSH
83111: CALL_OW 272
83115: PUSH
83116: LD_VAR 0 8
83120: PPUSH
83121: LD_INT 0
83123: PPUSH
83124: LD_INT 4
83126: PPUSH
83127: CALL_OW 273
83131: PUSH
83132: EMPTY
83133: LIST
83134: LIST
83135: PUSH
83136: LD_VAR 0 7
83140: PPUSH
83141: LD_INT 1
83143: PPUSH
83144: LD_INT 4
83146: PPUSH
83147: CALL_OW 272
83151: PUSH
83152: LD_VAR 0 8
83156: PPUSH
83157: LD_INT 1
83159: PPUSH
83160: LD_INT 4
83162: PPUSH
83163: CALL_OW 273
83167: PUSH
83168: EMPTY
83169: LIST
83170: LIST
83171: PUSH
83172: LD_VAR 0 7
83176: PPUSH
83177: LD_INT 2
83179: PPUSH
83180: LD_INT 4
83182: PPUSH
83183: CALL_OW 272
83187: PUSH
83188: LD_VAR 0 8
83192: PPUSH
83193: LD_INT 2
83195: PPUSH
83196: LD_INT 4
83198: PPUSH
83199: CALL_OW 273
83203: PUSH
83204: EMPTY
83205: LIST
83206: LIST
83207: PUSH
83208: LD_VAR 0 7
83212: PPUSH
83213: LD_INT 3
83215: PPUSH
83216: LD_INT 4
83218: PPUSH
83219: CALL_OW 272
83223: PUSH
83224: LD_VAR 0 8
83228: PPUSH
83229: LD_INT 3
83231: PPUSH
83232: LD_INT 4
83234: PPUSH
83235: CALL_OW 273
83239: PUSH
83240: EMPTY
83241: LIST
83242: LIST
83243: PUSH
83244: LD_VAR 0 7
83248: PPUSH
83249: LD_INT 4
83251: PPUSH
83252: LD_INT 4
83254: PPUSH
83255: CALL_OW 272
83259: PUSH
83260: LD_VAR 0 8
83264: PPUSH
83265: LD_INT 4
83267: PPUSH
83268: LD_INT 4
83270: PPUSH
83271: CALL_OW 273
83275: PUSH
83276: EMPTY
83277: LIST
83278: LIST
83279: PUSH
83280: LD_VAR 0 7
83284: PPUSH
83285: LD_INT 5
83287: PPUSH
83288: LD_INT 4
83290: PPUSH
83291: CALL_OW 272
83295: PUSH
83296: LD_VAR 0 8
83300: PPUSH
83301: LD_INT 5
83303: PPUSH
83304: LD_INT 4
83306: PPUSH
83307: CALL_OW 273
83311: PUSH
83312: EMPTY
83313: LIST
83314: LIST
83315: PUSH
83316: EMPTY
83317: LIST
83318: LIST
83319: LIST
83320: LIST
83321: LIST
83322: LIST
83323: ST_TO_ADDR
// for i = tmp downto 1 do
83324: LD_ADDR_VAR 0 4
83328: PUSH
83329: DOUBLE
83330: LD_VAR 0 6
83334: INC
83335: ST_TO_ADDR
83336: LD_INT 1
83338: PUSH
83339: FOR_DOWNTO
83340: IFFALSE 83441
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
83342: LD_VAR 0 6
83346: PUSH
83347: LD_VAR 0 4
83351: ARRAY
83352: PUSH
83353: LD_INT 1
83355: ARRAY
83356: PPUSH
83357: LD_VAR 0 6
83361: PUSH
83362: LD_VAR 0 4
83366: ARRAY
83367: PUSH
83368: LD_INT 2
83370: ARRAY
83371: PPUSH
83372: CALL_OW 488
83376: NOT
83377: PUSH
83378: LD_VAR 0 6
83382: PUSH
83383: LD_VAR 0 4
83387: ARRAY
83388: PUSH
83389: LD_INT 1
83391: ARRAY
83392: PPUSH
83393: LD_VAR 0 6
83397: PUSH
83398: LD_VAR 0 4
83402: ARRAY
83403: PUSH
83404: LD_INT 2
83406: ARRAY
83407: PPUSH
83408: CALL_OW 428
83412: PUSH
83413: LD_INT 0
83415: NONEQUAL
83416: OR
83417: IFFALSE 83439
// tmp := Delete ( tmp , i ) ;
83419: LD_ADDR_VAR 0 6
83423: PUSH
83424: LD_VAR 0 6
83428: PPUSH
83429: LD_VAR 0 4
83433: PPUSH
83434: CALL_OW 3
83438: ST_TO_ADDR
83439: GO 83339
83441: POP
83442: POP
// j := GetClosestHex ( unit , tmp ) ;
83443: LD_ADDR_VAR 0 5
83447: PUSH
83448: LD_VAR 0 1
83452: PPUSH
83453: LD_VAR 0 6
83457: PPUSH
83458: CALL 82760 0 2
83462: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
83463: LD_VAR 0 1
83467: PPUSH
83468: LD_VAR 0 5
83472: PUSH
83473: LD_INT 1
83475: ARRAY
83476: PPUSH
83477: LD_VAR 0 5
83481: PUSH
83482: LD_INT 2
83484: ARRAY
83485: PPUSH
83486: CALL_OW 111
// end ;
83490: LD_VAR 0 3
83494: RET
// export function PrepareApemanSoldier ( ) ; begin
83495: LD_INT 0
83497: PPUSH
// uc_nation := 0 ;
83498: LD_ADDR_OWVAR 21
83502: PUSH
83503: LD_INT 0
83505: ST_TO_ADDR
// hc_sex := sex_male ;
83506: LD_ADDR_OWVAR 27
83510: PUSH
83511: LD_INT 1
83513: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
83514: LD_ADDR_OWVAR 28
83518: PUSH
83519: LD_INT 15
83521: ST_TO_ADDR
// hc_gallery :=  ;
83522: LD_ADDR_OWVAR 33
83526: PUSH
83527: LD_STRING 
83529: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83530: LD_ADDR_OWVAR 31
83534: PUSH
83535: LD_INT 0
83537: PPUSH
83538: LD_INT 3
83540: PPUSH
83541: CALL_OW 12
83545: PUSH
83546: LD_INT 0
83548: PPUSH
83549: LD_INT 3
83551: PPUSH
83552: CALL_OW 12
83556: PUSH
83557: LD_INT 0
83559: PUSH
83560: LD_INT 0
83562: PUSH
83563: EMPTY
83564: LIST
83565: LIST
83566: LIST
83567: LIST
83568: ST_TO_ADDR
// end ;
83569: LD_VAR 0 1
83573: RET
// export function PrepareApemanEngineer ( ) ; begin
83574: LD_INT 0
83576: PPUSH
// uc_nation := 0 ;
83577: LD_ADDR_OWVAR 21
83581: PUSH
83582: LD_INT 0
83584: ST_TO_ADDR
// hc_sex := sex_male ;
83585: LD_ADDR_OWVAR 27
83589: PUSH
83590: LD_INT 1
83592: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
83593: LD_ADDR_OWVAR 28
83597: PUSH
83598: LD_INT 16
83600: ST_TO_ADDR
// hc_gallery :=  ;
83601: LD_ADDR_OWVAR 33
83605: PUSH
83606: LD_STRING 
83608: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83609: LD_ADDR_OWVAR 31
83613: PUSH
83614: LD_INT 0
83616: PPUSH
83617: LD_INT 3
83619: PPUSH
83620: CALL_OW 12
83624: PUSH
83625: LD_INT 0
83627: PPUSH
83628: LD_INT 3
83630: PPUSH
83631: CALL_OW 12
83635: PUSH
83636: LD_INT 0
83638: PUSH
83639: LD_INT 0
83641: PUSH
83642: EMPTY
83643: LIST
83644: LIST
83645: LIST
83646: LIST
83647: ST_TO_ADDR
// end ;
83648: LD_VAR 0 1
83652: RET
// export function PrepareApeman ( agressivity ) ; begin
83653: LD_INT 0
83655: PPUSH
// uc_side := 0 ;
83656: LD_ADDR_OWVAR 20
83660: PUSH
83661: LD_INT 0
83663: ST_TO_ADDR
// uc_nation := 0 ;
83664: LD_ADDR_OWVAR 21
83668: PUSH
83669: LD_INT 0
83671: ST_TO_ADDR
// hc_sex := sex_male ;
83672: LD_ADDR_OWVAR 27
83676: PUSH
83677: LD_INT 1
83679: ST_TO_ADDR
// hc_class := class_apeman ;
83680: LD_ADDR_OWVAR 28
83684: PUSH
83685: LD_INT 12
83687: ST_TO_ADDR
// hc_gallery :=  ;
83688: LD_ADDR_OWVAR 33
83692: PUSH
83693: LD_STRING 
83695: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
83696: LD_ADDR_OWVAR 35
83700: PUSH
83701: LD_VAR 0 1
83705: NEG
83706: PPUSH
83707: LD_VAR 0 1
83711: PPUSH
83712: CALL_OW 12
83716: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83717: LD_ADDR_OWVAR 31
83721: PUSH
83722: LD_INT 0
83724: PPUSH
83725: LD_INT 3
83727: PPUSH
83728: CALL_OW 12
83732: PUSH
83733: LD_INT 0
83735: PPUSH
83736: LD_INT 3
83738: PPUSH
83739: CALL_OW 12
83743: PUSH
83744: LD_INT 0
83746: PUSH
83747: LD_INT 0
83749: PUSH
83750: EMPTY
83751: LIST
83752: LIST
83753: LIST
83754: LIST
83755: ST_TO_ADDR
// end ;
83756: LD_VAR 0 2
83760: RET
// export function PrepareTiger ( agressivity ) ; begin
83761: LD_INT 0
83763: PPUSH
// uc_side := 0 ;
83764: LD_ADDR_OWVAR 20
83768: PUSH
83769: LD_INT 0
83771: ST_TO_ADDR
// uc_nation := 0 ;
83772: LD_ADDR_OWVAR 21
83776: PUSH
83777: LD_INT 0
83779: ST_TO_ADDR
// hc_class := class_tiger ;
83780: LD_ADDR_OWVAR 28
83784: PUSH
83785: LD_INT 14
83787: ST_TO_ADDR
// hc_gallery :=  ;
83788: LD_ADDR_OWVAR 33
83792: PUSH
83793: LD_STRING 
83795: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
83796: LD_ADDR_OWVAR 35
83800: PUSH
83801: LD_VAR 0 1
83805: NEG
83806: PPUSH
83807: LD_VAR 0 1
83811: PPUSH
83812: CALL_OW 12
83816: ST_TO_ADDR
// end ;
83817: LD_VAR 0 2
83821: RET
// export function PrepareEnchidna ( ) ; begin
83822: LD_INT 0
83824: PPUSH
// uc_side := 0 ;
83825: LD_ADDR_OWVAR 20
83829: PUSH
83830: LD_INT 0
83832: ST_TO_ADDR
// uc_nation := 0 ;
83833: LD_ADDR_OWVAR 21
83837: PUSH
83838: LD_INT 0
83840: ST_TO_ADDR
// hc_class := class_baggie ;
83841: LD_ADDR_OWVAR 28
83845: PUSH
83846: LD_INT 13
83848: ST_TO_ADDR
// hc_gallery :=  ;
83849: LD_ADDR_OWVAR 33
83853: PUSH
83854: LD_STRING 
83856: ST_TO_ADDR
// end ;
83857: LD_VAR 0 1
83861: RET
// export function PrepareFrog ( ) ; begin
83862: LD_INT 0
83864: PPUSH
// uc_side := 0 ;
83865: LD_ADDR_OWVAR 20
83869: PUSH
83870: LD_INT 0
83872: ST_TO_ADDR
// uc_nation := 0 ;
83873: LD_ADDR_OWVAR 21
83877: PUSH
83878: LD_INT 0
83880: ST_TO_ADDR
// hc_class := class_frog ;
83881: LD_ADDR_OWVAR 28
83885: PUSH
83886: LD_INT 19
83888: ST_TO_ADDR
// hc_gallery :=  ;
83889: LD_ADDR_OWVAR 33
83893: PUSH
83894: LD_STRING 
83896: ST_TO_ADDR
// end ;
83897: LD_VAR 0 1
83901: RET
// export function PrepareFish ( ) ; begin
83902: LD_INT 0
83904: PPUSH
// uc_side := 0 ;
83905: LD_ADDR_OWVAR 20
83909: PUSH
83910: LD_INT 0
83912: ST_TO_ADDR
// uc_nation := 0 ;
83913: LD_ADDR_OWVAR 21
83917: PUSH
83918: LD_INT 0
83920: ST_TO_ADDR
// hc_class := class_fish ;
83921: LD_ADDR_OWVAR 28
83925: PUSH
83926: LD_INT 20
83928: ST_TO_ADDR
// hc_gallery :=  ;
83929: LD_ADDR_OWVAR 33
83933: PUSH
83934: LD_STRING 
83936: ST_TO_ADDR
// end ;
83937: LD_VAR 0 1
83941: RET
// export function PrepareBird ( ) ; begin
83942: LD_INT 0
83944: PPUSH
// uc_side := 0 ;
83945: LD_ADDR_OWVAR 20
83949: PUSH
83950: LD_INT 0
83952: ST_TO_ADDR
// uc_nation := 0 ;
83953: LD_ADDR_OWVAR 21
83957: PUSH
83958: LD_INT 0
83960: ST_TO_ADDR
// hc_class := class_phororhacos ;
83961: LD_ADDR_OWVAR 28
83965: PUSH
83966: LD_INT 18
83968: ST_TO_ADDR
// hc_gallery :=  ;
83969: LD_ADDR_OWVAR 33
83973: PUSH
83974: LD_STRING 
83976: ST_TO_ADDR
// end ;
83977: LD_VAR 0 1
83981: RET
// export function PrepareHorse ( ) ; begin
83982: LD_INT 0
83984: PPUSH
// uc_side := 0 ;
83985: LD_ADDR_OWVAR 20
83989: PUSH
83990: LD_INT 0
83992: ST_TO_ADDR
// uc_nation := 0 ;
83993: LD_ADDR_OWVAR 21
83997: PUSH
83998: LD_INT 0
84000: ST_TO_ADDR
// hc_class := class_horse ;
84001: LD_ADDR_OWVAR 28
84005: PUSH
84006: LD_INT 21
84008: ST_TO_ADDR
// hc_gallery :=  ;
84009: LD_ADDR_OWVAR 33
84013: PUSH
84014: LD_STRING 
84016: ST_TO_ADDR
// end ;
84017: LD_VAR 0 1
84021: RET
// export function PrepareMastodont ( ) ; begin
84022: LD_INT 0
84024: PPUSH
// uc_side := 0 ;
84025: LD_ADDR_OWVAR 20
84029: PUSH
84030: LD_INT 0
84032: ST_TO_ADDR
// uc_nation := 0 ;
84033: LD_ADDR_OWVAR 21
84037: PUSH
84038: LD_INT 0
84040: ST_TO_ADDR
// vc_chassis := class_mastodont ;
84041: LD_ADDR_OWVAR 37
84045: PUSH
84046: LD_INT 31
84048: ST_TO_ADDR
// vc_control := control_rider ;
84049: LD_ADDR_OWVAR 38
84053: PUSH
84054: LD_INT 4
84056: ST_TO_ADDR
// end ;
84057: LD_VAR 0 1
84061: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
84062: LD_INT 0
84064: PPUSH
84065: PPUSH
84066: PPUSH
// uc_side = 0 ;
84067: LD_ADDR_OWVAR 20
84071: PUSH
84072: LD_INT 0
84074: ST_TO_ADDR
// uc_nation = 0 ;
84075: LD_ADDR_OWVAR 21
84079: PUSH
84080: LD_INT 0
84082: ST_TO_ADDR
// InitHc_All ( ) ;
84083: CALL_OW 584
// InitVc ;
84087: CALL_OW 20
// if mastodonts then
84091: LD_VAR 0 6
84095: IFFALSE 84162
// for i = 1 to mastodonts do
84097: LD_ADDR_VAR 0 11
84101: PUSH
84102: DOUBLE
84103: LD_INT 1
84105: DEC
84106: ST_TO_ADDR
84107: LD_VAR 0 6
84111: PUSH
84112: FOR_TO
84113: IFFALSE 84160
// begin vc_chassis := 31 ;
84115: LD_ADDR_OWVAR 37
84119: PUSH
84120: LD_INT 31
84122: ST_TO_ADDR
// vc_control := control_rider ;
84123: LD_ADDR_OWVAR 38
84127: PUSH
84128: LD_INT 4
84130: ST_TO_ADDR
// animal := CreateVehicle ;
84131: LD_ADDR_VAR 0 12
84135: PUSH
84136: CALL_OW 45
84140: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84141: LD_VAR 0 12
84145: PPUSH
84146: LD_VAR 0 8
84150: PPUSH
84151: LD_INT 0
84153: PPUSH
84154: CALL 86297 0 3
// end ;
84158: GO 84112
84160: POP
84161: POP
// if horses then
84162: LD_VAR 0 5
84166: IFFALSE 84233
// for i = 1 to horses do
84168: LD_ADDR_VAR 0 11
84172: PUSH
84173: DOUBLE
84174: LD_INT 1
84176: DEC
84177: ST_TO_ADDR
84178: LD_VAR 0 5
84182: PUSH
84183: FOR_TO
84184: IFFALSE 84231
// begin hc_class := 21 ;
84186: LD_ADDR_OWVAR 28
84190: PUSH
84191: LD_INT 21
84193: ST_TO_ADDR
// hc_gallery :=  ;
84194: LD_ADDR_OWVAR 33
84198: PUSH
84199: LD_STRING 
84201: ST_TO_ADDR
// animal := CreateHuman ;
84202: LD_ADDR_VAR 0 12
84206: PUSH
84207: CALL_OW 44
84211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84212: LD_VAR 0 12
84216: PPUSH
84217: LD_VAR 0 8
84221: PPUSH
84222: LD_INT 0
84224: PPUSH
84225: CALL 86297 0 3
// end ;
84229: GO 84183
84231: POP
84232: POP
// if birds then
84233: LD_VAR 0 1
84237: IFFALSE 84304
// for i = 1 to birds do
84239: LD_ADDR_VAR 0 11
84243: PUSH
84244: DOUBLE
84245: LD_INT 1
84247: DEC
84248: ST_TO_ADDR
84249: LD_VAR 0 1
84253: PUSH
84254: FOR_TO
84255: IFFALSE 84302
// begin hc_class = 18 ;
84257: LD_ADDR_OWVAR 28
84261: PUSH
84262: LD_INT 18
84264: ST_TO_ADDR
// hc_gallery =  ;
84265: LD_ADDR_OWVAR 33
84269: PUSH
84270: LD_STRING 
84272: ST_TO_ADDR
// animal := CreateHuman ;
84273: LD_ADDR_VAR 0 12
84277: PUSH
84278: CALL_OW 44
84282: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84283: LD_VAR 0 12
84287: PPUSH
84288: LD_VAR 0 8
84292: PPUSH
84293: LD_INT 0
84295: PPUSH
84296: CALL 86297 0 3
// end ;
84300: GO 84254
84302: POP
84303: POP
// if tigers then
84304: LD_VAR 0 2
84308: IFFALSE 84392
// for i = 1 to tigers do
84310: LD_ADDR_VAR 0 11
84314: PUSH
84315: DOUBLE
84316: LD_INT 1
84318: DEC
84319: ST_TO_ADDR
84320: LD_VAR 0 2
84324: PUSH
84325: FOR_TO
84326: IFFALSE 84390
// begin hc_class = class_tiger ;
84328: LD_ADDR_OWVAR 28
84332: PUSH
84333: LD_INT 14
84335: ST_TO_ADDR
// hc_gallery =  ;
84336: LD_ADDR_OWVAR 33
84340: PUSH
84341: LD_STRING 
84343: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
84344: LD_ADDR_OWVAR 35
84348: PUSH
84349: LD_INT 7
84351: NEG
84352: PPUSH
84353: LD_INT 7
84355: PPUSH
84356: CALL_OW 12
84360: ST_TO_ADDR
// animal := CreateHuman ;
84361: LD_ADDR_VAR 0 12
84365: PUSH
84366: CALL_OW 44
84370: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84371: LD_VAR 0 12
84375: PPUSH
84376: LD_VAR 0 8
84380: PPUSH
84381: LD_INT 0
84383: PPUSH
84384: CALL 86297 0 3
// end ;
84388: GO 84325
84390: POP
84391: POP
// if apemans then
84392: LD_VAR 0 3
84396: IFFALSE 84519
// for i = 1 to apemans do
84398: LD_ADDR_VAR 0 11
84402: PUSH
84403: DOUBLE
84404: LD_INT 1
84406: DEC
84407: ST_TO_ADDR
84408: LD_VAR 0 3
84412: PUSH
84413: FOR_TO
84414: IFFALSE 84517
// begin hc_class = class_apeman ;
84416: LD_ADDR_OWVAR 28
84420: PUSH
84421: LD_INT 12
84423: ST_TO_ADDR
// hc_gallery =  ;
84424: LD_ADDR_OWVAR 33
84428: PUSH
84429: LD_STRING 
84431: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
84432: LD_ADDR_OWVAR 35
84436: PUSH
84437: LD_INT 2
84439: NEG
84440: PPUSH
84441: LD_INT 2
84443: PPUSH
84444: CALL_OW 12
84448: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
84449: LD_ADDR_OWVAR 31
84453: PUSH
84454: LD_INT 1
84456: PPUSH
84457: LD_INT 3
84459: PPUSH
84460: CALL_OW 12
84464: PUSH
84465: LD_INT 1
84467: PPUSH
84468: LD_INT 3
84470: PPUSH
84471: CALL_OW 12
84475: PUSH
84476: LD_INT 0
84478: PUSH
84479: LD_INT 0
84481: PUSH
84482: EMPTY
84483: LIST
84484: LIST
84485: LIST
84486: LIST
84487: ST_TO_ADDR
// animal := CreateHuman ;
84488: LD_ADDR_VAR 0 12
84492: PUSH
84493: CALL_OW 44
84497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84498: LD_VAR 0 12
84502: PPUSH
84503: LD_VAR 0 8
84507: PPUSH
84508: LD_INT 0
84510: PPUSH
84511: CALL 86297 0 3
// end ;
84515: GO 84413
84517: POP
84518: POP
// if enchidnas then
84519: LD_VAR 0 4
84523: IFFALSE 84590
// for i = 1 to enchidnas do
84525: LD_ADDR_VAR 0 11
84529: PUSH
84530: DOUBLE
84531: LD_INT 1
84533: DEC
84534: ST_TO_ADDR
84535: LD_VAR 0 4
84539: PUSH
84540: FOR_TO
84541: IFFALSE 84588
// begin hc_class = 13 ;
84543: LD_ADDR_OWVAR 28
84547: PUSH
84548: LD_INT 13
84550: ST_TO_ADDR
// hc_gallery =  ;
84551: LD_ADDR_OWVAR 33
84555: PUSH
84556: LD_STRING 
84558: ST_TO_ADDR
// animal := CreateHuman ;
84559: LD_ADDR_VAR 0 12
84563: PUSH
84564: CALL_OW 44
84568: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84569: LD_VAR 0 12
84573: PPUSH
84574: LD_VAR 0 8
84578: PPUSH
84579: LD_INT 0
84581: PPUSH
84582: CALL 86297 0 3
// end ;
84586: GO 84540
84588: POP
84589: POP
// if fishes then
84590: LD_VAR 0 7
84594: IFFALSE 84661
// for i = 1 to fishes do
84596: LD_ADDR_VAR 0 11
84600: PUSH
84601: DOUBLE
84602: LD_INT 1
84604: DEC
84605: ST_TO_ADDR
84606: LD_VAR 0 7
84610: PUSH
84611: FOR_TO
84612: IFFALSE 84659
// begin hc_class = 20 ;
84614: LD_ADDR_OWVAR 28
84618: PUSH
84619: LD_INT 20
84621: ST_TO_ADDR
// hc_gallery =  ;
84622: LD_ADDR_OWVAR 33
84626: PUSH
84627: LD_STRING 
84629: ST_TO_ADDR
// animal := CreateHuman ;
84630: LD_ADDR_VAR 0 12
84634: PUSH
84635: CALL_OW 44
84639: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
84640: LD_VAR 0 12
84644: PPUSH
84645: LD_VAR 0 9
84649: PPUSH
84650: LD_INT 0
84652: PPUSH
84653: CALL 86297 0 3
// end ;
84657: GO 84611
84659: POP
84660: POP
// end ;
84661: LD_VAR 0 10
84665: RET
// export function WantHeal ( sci , unit ) ; begin
84666: LD_INT 0
84668: PPUSH
// if GetTaskList ( sci ) > 0 then
84669: LD_VAR 0 1
84673: PPUSH
84674: CALL_OW 437
84678: PUSH
84679: LD_INT 0
84681: GREATER
84682: IFFALSE 84752
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
84684: LD_VAR 0 1
84688: PPUSH
84689: CALL_OW 437
84693: PUSH
84694: LD_INT 1
84696: ARRAY
84697: PUSH
84698: LD_INT 1
84700: ARRAY
84701: PUSH
84702: LD_STRING l
84704: EQUAL
84705: PUSH
84706: LD_VAR 0 1
84710: PPUSH
84711: CALL_OW 437
84715: PUSH
84716: LD_INT 1
84718: ARRAY
84719: PUSH
84720: LD_INT 4
84722: ARRAY
84723: PUSH
84724: LD_VAR 0 2
84728: EQUAL
84729: AND
84730: IFFALSE 84742
// result := true else
84732: LD_ADDR_VAR 0 3
84736: PUSH
84737: LD_INT 1
84739: ST_TO_ADDR
84740: GO 84750
// result := false ;
84742: LD_ADDR_VAR 0 3
84746: PUSH
84747: LD_INT 0
84749: ST_TO_ADDR
// end else
84750: GO 84760
// result := false ;
84752: LD_ADDR_VAR 0 3
84756: PUSH
84757: LD_INT 0
84759: ST_TO_ADDR
// end ;
84760: LD_VAR 0 3
84764: RET
// export function HealTarget ( sci ) ; begin
84765: LD_INT 0
84767: PPUSH
// if not sci then
84768: LD_VAR 0 1
84772: NOT
84773: IFFALSE 84777
// exit ;
84775: GO 84842
// result := 0 ;
84777: LD_ADDR_VAR 0 2
84781: PUSH
84782: LD_INT 0
84784: ST_TO_ADDR
// if GetTaskList ( sci ) then
84785: LD_VAR 0 1
84789: PPUSH
84790: CALL_OW 437
84794: IFFALSE 84842
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
84796: LD_VAR 0 1
84800: PPUSH
84801: CALL_OW 437
84805: PUSH
84806: LD_INT 1
84808: ARRAY
84809: PUSH
84810: LD_INT 1
84812: ARRAY
84813: PUSH
84814: LD_STRING l
84816: EQUAL
84817: IFFALSE 84842
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
84819: LD_ADDR_VAR 0 2
84823: PUSH
84824: LD_VAR 0 1
84828: PPUSH
84829: CALL_OW 437
84833: PUSH
84834: LD_INT 1
84836: ARRAY
84837: PUSH
84838: LD_INT 4
84840: ARRAY
84841: ST_TO_ADDR
// end ;
84842: LD_VAR 0 2
84846: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
84847: LD_INT 0
84849: PPUSH
84850: PPUSH
84851: PPUSH
84852: PPUSH
// if not base_units then
84853: LD_VAR 0 1
84857: NOT
84858: IFFALSE 84862
// exit ;
84860: GO 84949
// result := false ;
84862: LD_ADDR_VAR 0 2
84866: PUSH
84867: LD_INT 0
84869: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
84870: LD_ADDR_VAR 0 5
84874: PUSH
84875: LD_VAR 0 1
84879: PPUSH
84880: LD_INT 21
84882: PUSH
84883: LD_INT 3
84885: PUSH
84886: EMPTY
84887: LIST
84888: LIST
84889: PPUSH
84890: CALL_OW 72
84894: ST_TO_ADDR
// if not tmp then
84895: LD_VAR 0 5
84899: NOT
84900: IFFALSE 84904
// exit ;
84902: GO 84949
// for i in tmp do
84904: LD_ADDR_VAR 0 3
84908: PUSH
84909: LD_VAR 0 5
84913: PUSH
84914: FOR_IN
84915: IFFALSE 84947
// begin result := EnemyInRange ( i , 22 ) ;
84917: LD_ADDR_VAR 0 2
84921: PUSH
84922: LD_VAR 0 3
84926: PPUSH
84927: LD_INT 22
84929: PPUSH
84930: CALL 82562 0 2
84934: ST_TO_ADDR
// if result then
84935: LD_VAR 0 2
84939: IFFALSE 84945
// exit ;
84941: POP
84942: POP
84943: GO 84949
// end ;
84945: GO 84914
84947: POP
84948: POP
// end ;
84949: LD_VAR 0 2
84953: RET
// export function FilterByTag ( units , tag ) ; begin
84954: LD_INT 0
84956: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
84957: LD_ADDR_VAR 0 3
84961: PUSH
84962: LD_VAR 0 1
84966: PPUSH
84967: LD_INT 120
84969: PUSH
84970: LD_VAR 0 2
84974: PUSH
84975: EMPTY
84976: LIST
84977: LIST
84978: PPUSH
84979: CALL_OW 72
84983: ST_TO_ADDR
// end ;
84984: LD_VAR 0 3
84988: RET
// export function IsDriver ( un ) ; begin
84989: LD_INT 0
84991: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
84992: LD_ADDR_VAR 0 2
84996: PUSH
84997: LD_VAR 0 1
85001: PUSH
85002: LD_INT 55
85004: PUSH
85005: EMPTY
85006: LIST
85007: PPUSH
85008: CALL_OW 69
85012: IN
85013: ST_TO_ADDR
// end ;
85014: LD_VAR 0 2
85018: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
85019: LD_INT 0
85021: PPUSH
85022: PPUSH
// list := [ ] ;
85023: LD_ADDR_VAR 0 5
85027: PUSH
85028: EMPTY
85029: ST_TO_ADDR
// case d of 0 :
85030: LD_VAR 0 3
85034: PUSH
85035: LD_INT 0
85037: DOUBLE
85038: EQUAL
85039: IFTRUE 85043
85041: GO 85176
85043: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
85044: LD_ADDR_VAR 0 5
85048: PUSH
85049: LD_VAR 0 1
85053: PUSH
85054: LD_INT 4
85056: MINUS
85057: PUSH
85058: LD_VAR 0 2
85062: PUSH
85063: LD_INT 4
85065: MINUS
85066: PUSH
85067: LD_INT 2
85069: PUSH
85070: EMPTY
85071: LIST
85072: LIST
85073: LIST
85074: PUSH
85075: LD_VAR 0 1
85079: PUSH
85080: LD_INT 3
85082: MINUS
85083: PUSH
85084: LD_VAR 0 2
85088: PUSH
85089: LD_INT 1
85091: PUSH
85092: EMPTY
85093: LIST
85094: LIST
85095: LIST
85096: PUSH
85097: LD_VAR 0 1
85101: PUSH
85102: LD_INT 4
85104: PLUS
85105: PUSH
85106: LD_VAR 0 2
85110: PUSH
85111: LD_INT 4
85113: PUSH
85114: EMPTY
85115: LIST
85116: LIST
85117: LIST
85118: PUSH
85119: LD_VAR 0 1
85123: PUSH
85124: LD_INT 3
85126: PLUS
85127: PUSH
85128: LD_VAR 0 2
85132: PUSH
85133: LD_INT 3
85135: PLUS
85136: PUSH
85137: LD_INT 5
85139: PUSH
85140: EMPTY
85141: LIST
85142: LIST
85143: LIST
85144: PUSH
85145: LD_VAR 0 1
85149: PUSH
85150: LD_VAR 0 2
85154: PUSH
85155: LD_INT 4
85157: PLUS
85158: PUSH
85159: LD_INT 0
85161: PUSH
85162: EMPTY
85163: LIST
85164: LIST
85165: LIST
85166: PUSH
85167: EMPTY
85168: LIST
85169: LIST
85170: LIST
85171: LIST
85172: LIST
85173: ST_TO_ADDR
// end ; 1 :
85174: GO 85874
85176: LD_INT 1
85178: DOUBLE
85179: EQUAL
85180: IFTRUE 85184
85182: GO 85317
85184: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
85185: LD_ADDR_VAR 0 5
85189: PUSH
85190: LD_VAR 0 1
85194: PUSH
85195: LD_VAR 0 2
85199: PUSH
85200: LD_INT 4
85202: MINUS
85203: PUSH
85204: LD_INT 3
85206: PUSH
85207: EMPTY
85208: LIST
85209: LIST
85210: LIST
85211: PUSH
85212: LD_VAR 0 1
85216: PUSH
85217: LD_INT 3
85219: MINUS
85220: PUSH
85221: LD_VAR 0 2
85225: PUSH
85226: LD_INT 3
85228: MINUS
85229: PUSH
85230: LD_INT 2
85232: PUSH
85233: EMPTY
85234: LIST
85235: LIST
85236: LIST
85237: PUSH
85238: LD_VAR 0 1
85242: PUSH
85243: LD_INT 4
85245: MINUS
85246: PUSH
85247: LD_VAR 0 2
85251: PUSH
85252: LD_INT 1
85254: PUSH
85255: EMPTY
85256: LIST
85257: LIST
85258: LIST
85259: PUSH
85260: LD_VAR 0 1
85264: PUSH
85265: LD_VAR 0 2
85269: PUSH
85270: LD_INT 3
85272: PLUS
85273: PUSH
85274: LD_INT 0
85276: PUSH
85277: EMPTY
85278: LIST
85279: LIST
85280: LIST
85281: PUSH
85282: LD_VAR 0 1
85286: PUSH
85287: LD_INT 4
85289: PLUS
85290: PUSH
85291: LD_VAR 0 2
85295: PUSH
85296: LD_INT 4
85298: PLUS
85299: PUSH
85300: LD_INT 5
85302: PUSH
85303: EMPTY
85304: LIST
85305: LIST
85306: LIST
85307: PUSH
85308: EMPTY
85309: LIST
85310: LIST
85311: LIST
85312: LIST
85313: LIST
85314: ST_TO_ADDR
// end ; 2 :
85315: GO 85874
85317: LD_INT 2
85319: DOUBLE
85320: EQUAL
85321: IFTRUE 85325
85323: GO 85454
85325: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
85326: LD_ADDR_VAR 0 5
85330: PUSH
85331: LD_VAR 0 1
85335: PUSH
85336: LD_VAR 0 2
85340: PUSH
85341: LD_INT 3
85343: MINUS
85344: PUSH
85345: LD_INT 3
85347: PUSH
85348: EMPTY
85349: LIST
85350: LIST
85351: LIST
85352: PUSH
85353: LD_VAR 0 1
85357: PUSH
85358: LD_INT 4
85360: PLUS
85361: PUSH
85362: LD_VAR 0 2
85366: PUSH
85367: LD_INT 4
85369: PUSH
85370: EMPTY
85371: LIST
85372: LIST
85373: LIST
85374: PUSH
85375: LD_VAR 0 1
85379: PUSH
85380: LD_VAR 0 2
85384: PUSH
85385: LD_INT 4
85387: PLUS
85388: PUSH
85389: LD_INT 0
85391: PUSH
85392: EMPTY
85393: LIST
85394: LIST
85395: LIST
85396: PUSH
85397: LD_VAR 0 1
85401: PUSH
85402: LD_INT 3
85404: MINUS
85405: PUSH
85406: LD_VAR 0 2
85410: PUSH
85411: LD_INT 1
85413: PUSH
85414: EMPTY
85415: LIST
85416: LIST
85417: LIST
85418: PUSH
85419: LD_VAR 0 1
85423: PUSH
85424: LD_INT 4
85426: MINUS
85427: PUSH
85428: LD_VAR 0 2
85432: PUSH
85433: LD_INT 4
85435: MINUS
85436: PUSH
85437: LD_INT 2
85439: PUSH
85440: EMPTY
85441: LIST
85442: LIST
85443: LIST
85444: PUSH
85445: EMPTY
85446: LIST
85447: LIST
85448: LIST
85449: LIST
85450: LIST
85451: ST_TO_ADDR
// end ; 3 :
85452: GO 85874
85454: LD_INT 3
85456: DOUBLE
85457: EQUAL
85458: IFTRUE 85462
85460: GO 85595
85462: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
85463: LD_ADDR_VAR 0 5
85467: PUSH
85468: LD_VAR 0 1
85472: PUSH
85473: LD_INT 3
85475: PLUS
85476: PUSH
85477: LD_VAR 0 2
85481: PUSH
85482: LD_INT 4
85484: PUSH
85485: EMPTY
85486: LIST
85487: LIST
85488: LIST
85489: PUSH
85490: LD_VAR 0 1
85494: PUSH
85495: LD_INT 4
85497: PLUS
85498: PUSH
85499: LD_VAR 0 2
85503: PUSH
85504: LD_INT 4
85506: PLUS
85507: PUSH
85508: LD_INT 5
85510: PUSH
85511: EMPTY
85512: LIST
85513: LIST
85514: LIST
85515: PUSH
85516: LD_VAR 0 1
85520: PUSH
85521: LD_INT 4
85523: MINUS
85524: PUSH
85525: LD_VAR 0 2
85529: PUSH
85530: LD_INT 1
85532: PUSH
85533: EMPTY
85534: LIST
85535: LIST
85536: LIST
85537: PUSH
85538: LD_VAR 0 1
85542: PUSH
85543: LD_VAR 0 2
85547: PUSH
85548: LD_INT 4
85550: MINUS
85551: PUSH
85552: LD_INT 3
85554: PUSH
85555: EMPTY
85556: LIST
85557: LIST
85558: LIST
85559: PUSH
85560: LD_VAR 0 1
85564: PUSH
85565: LD_INT 3
85567: MINUS
85568: PUSH
85569: LD_VAR 0 2
85573: PUSH
85574: LD_INT 3
85576: MINUS
85577: PUSH
85578: LD_INT 2
85580: PUSH
85581: EMPTY
85582: LIST
85583: LIST
85584: LIST
85585: PUSH
85586: EMPTY
85587: LIST
85588: LIST
85589: LIST
85590: LIST
85591: LIST
85592: ST_TO_ADDR
// end ; 4 :
85593: GO 85874
85595: LD_INT 4
85597: DOUBLE
85598: EQUAL
85599: IFTRUE 85603
85601: GO 85736
85603: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
85604: LD_ADDR_VAR 0 5
85608: PUSH
85609: LD_VAR 0 1
85613: PUSH
85614: LD_VAR 0 2
85618: PUSH
85619: LD_INT 4
85621: PLUS
85622: PUSH
85623: LD_INT 0
85625: PUSH
85626: EMPTY
85627: LIST
85628: LIST
85629: LIST
85630: PUSH
85631: LD_VAR 0 1
85635: PUSH
85636: LD_INT 3
85638: PLUS
85639: PUSH
85640: LD_VAR 0 2
85644: PUSH
85645: LD_INT 3
85647: PLUS
85648: PUSH
85649: LD_INT 5
85651: PUSH
85652: EMPTY
85653: LIST
85654: LIST
85655: LIST
85656: PUSH
85657: LD_VAR 0 1
85661: PUSH
85662: LD_INT 4
85664: PLUS
85665: PUSH
85666: LD_VAR 0 2
85670: PUSH
85671: LD_INT 4
85673: PUSH
85674: EMPTY
85675: LIST
85676: LIST
85677: LIST
85678: PUSH
85679: LD_VAR 0 1
85683: PUSH
85684: LD_VAR 0 2
85688: PUSH
85689: LD_INT 3
85691: MINUS
85692: PUSH
85693: LD_INT 3
85695: PUSH
85696: EMPTY
85697: LIST
85698: LIST
85699: LIST
85700: PUSH
85701: LD_VAR 0 1
85705: PUSH
85706: LD_INT 4
85708: MINUS
85709: PUSH
85710: LD_VAR 0 2
85714: PUSH
85715: LD_INT 4
85717: MINUS
85718: PUSH
85719: LD_INT 2
85721: PUSH
85722: EMPTY
85723: LIST
85724: LIST
85725: LIST
85726: PUSH
85727: EMPTY
85728: LIST
85729: LIST
85730: LIST
85731: LIST
85732: LIST
85733: ST_TO_ADDR
// end ; 5 :
85734: GO 85874
85736: LD_INT 5
85738: DOUBLE
85739: EQUAL
85740: IFTRUE 85744
85742: GO 85873
85744: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
85745: LD_ADDR_VAR 0 5
85749: PUSH
85750: LD_VAR 0 1
85754: PUSH
85755: LD_INT 4
85757: MINUS
85758: PUSH
85759: LD_VAR 0 2
85763: PUSH
85764: LD_INT 1
85766: PUSH
85767: EMPTY
85768: LIST
85769: LIST
85770: LIST
85771: PUSH
85772: LD_VAR 0 1
85776: PUSH
85777: LD_VAR 0 2
85781: PUSH
85782: LD_INT 4
85784: MINUS
85785: PUSH
85786: LD_INT 3
85788: PUSH
85789: EMPTY
85790: LIST
85791: LIST
85792: LIST
85793: PUSH
85794: LD_VAR 0 1
85798: PUSH
85799: LD_INT 4
85801: PLUS
85802: PUSH
85803: LD_VAR 0 2
85807: PUSH
85808: LD_INT 4
85810: PLUS
85811: PUSH
85812: LD_INT 5
85814: PUSH
85815: EMPTY
85816: LIST
85817: LIST
85818: LIST
85819: PUSH
85820: LD_VAR 0 1
85824: PUSH
85825: LD_INT 3
85827: PLUS
85828: PUSH
85829: LD_VAR 0 2
85833: PUSH
85834: LD_INT 4
85836: PUSH
85837: EMPTY
85838: LIST
85839: LIST
85840: LIST
85841: PUSH
85842: LD_VAR 0 1
85846: PUSH
85847: LD_VAR 0 2
85851: PUSH
85852: LD_INT 3
85854: PLUS
85855: PUSH
85856: LD_INT 0
85858: PUSH
85859: EMPTY
85860: LIST
85861: LIST
85862: LIST
85863: PUSH
85864: EMPTY
85865: LIST
85866: LIST
85867: LIST
85868: LIST
85869: LIST
85870: ST_TO_ADDR
// end ; end ;
85871: GO 85874
85873: POP
// result := list ;
85874: LD_ADDR_VAR 0 4
85878: PUSH
85879: LD_VAR 0 5
85883: ST_TO_ADDR
// end ;
85884: LD_VAR 0 4
85888: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
85889: LD_INT 0
85891: PPUSH
85892: PPUSH
85893: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
85894: LD_VAR 0 1
85898: NOT
85899: PUSH
85900: LD_VAR 0 2
85904: PUSH
85905: LD_INT 1
85907: PUSH
85908: LD_INT 2
85910: PUSH
85911: LD_INT 3
85913: PUSH
85914: LD_INT 4
85916: PUSH
85917: EMPTY
85918: LIST
85919: LIST
85920: LIST
85921: LIST
85922: IN
85923: NOT
85924: OR
85925: IFFALSE 85929
// exit ;
85927: GO 86021
// tmp := [ ] ;
85929: LD_ADDR_VAR 0 5
85933: PUSH
85934: EMPTY
85935: ST_TO_ADDR
// for i in units do
85936: LD_ADDR_VAR 0 4
85940: PUSH
85941: LD_VAR 0 1
85945: PUSH
85946: FOR_IN
85947: IFFALSE 85990
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
85949: LD_ADDR_VAR 0 5
85953: PUSH
85954: LD_VAR 0 5
85958: PPUSH
85959: LD_VAR 0 5
85963: PUSH
85964: LD_INT 1
85966: PLUS
85967: PPUSH
85968: LD_VAR 0 4
85972: PPUSH
85973: LD_VAR 0 2
85977: PPUSH
85978: CALL_OW 259
85982: PPUSH
85983: CALL_OW 2
85987: ST_TO_ADDR
85988: GO 85946
85990: POP
85991: POP
// if not tmp then
85992: LD_VAR 0 5
85996: NOT
85997: IFFALSE 86001
// exit ;
85999: GO 86021
// result := SortListByListDesc ( units , tmp ) ;
86001: LD_ADDR_VAR 0 3
86005: PUSH
86006: LD_VAR 0 1
86010: PPUSH
86011: LD_VAR 0 5
86015: PPUSH
86016: CALL_OW 77
86020: ST_TO_ADDR
// end ;
86021: LD_VAR 0 3
86025: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
86026: LD_INT 0
86028: PPUSH
86029: PPUSH
86030: PPUSH
// result := false ;
86031: LD_ADDR_VAR 0 3
86035: PUSH
86036: LD_INT 0
86038: ST_TO_ADDR
// x := GetX ( building ) ;
86039: LD_ADDR_VAR 0 4
86043: PUSH
86044: LD_VAR 0 2
86048: PPUSH
86049: CALL_OW 250
86053: ST_TO_ADDR
// y := GetY ( building ) ;
86054: LD_ADDR_VAR 0 5
86058: PUSH
86059: LD_VAR 0 2
86063: PPUSH
86064: CALL_OW 251
86068: ST_TO_ADDR
// if not building or not x or not y then
86069: LD_VAR 0 2
86073: NOT
86074: PUSH
86075: LD_VAR 0 4
86079: NOT
86080: OR
86081: PUSH
86082: LD_VAR 0 5
86086: NOT
86087: OR
86088: IFFALSE 86092
// exit ;
86090: GO 86184
// if GetTaskList ( unit ) then
86092: LD_VAR 0 1
86096: PPUSH
86097: CALL_OW 437
86101: IFFALSE 86184
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86103: LD_STRING e
86105: PUSH
86106: LD_VAR 0 1
86110: PPUSH
86111: CALL_OW 437
86115: PUSH
86116: LD_INT 1
86118: ARRAY
86119: PUSH
86120: LD_INT 1
86122: ARRAY
86123: EQUAL
86124: PUSH
86125: LD_VAR 0 4
86129: PUSH
86130: LD_VAR 0 1
86134: PPUSH
86135: CALL_OW 437
86139: PUSH
86140: LD_INT 1
86142: ARRAY
86143: PUSH
86144: LD_INT 2
86146: ARRAY
86147: EQUAL
86148: AND
86149: PUSH
86150: LD_VAR 0 5
86154: PUSH
86155: LD_VAR 0 1
86159: PPUSH
86160: CALL_OW 437
86164: PUSH
86165: LD_INT 1
86167: ARRAY
86168: PUSH
86169: LD_INT 3
86171: ARRAY
86172: EQUAL
86173: AND
86174: IFFALSE 86184
// result := true end ;
86176: LD_ADDR_VAR 0 3
86180: PUSH
86181: LD_INT 1
86183: ST_TO_ADDR
// end ;
86184: LD_VAR 0 3
86188: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
86189: LD_INT 0
86191: PPUSH
// result := false ;
86192: LD_ADDR_VAR 0 4
86196: PUSH
86197: LD_INT 0
86199: ST_TO_ADDR
// if GetTaskList ( unit ) then
86200: LD_VAR 0 1
86204: PPUSH
86205: CALL_OW 437
86209: IFFALSE 86292
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86211: LD_STRING M
86213: PUSH
86214: LD_VAR 0 1
86218: PPUSH
86219: CALL_OW 437
86223: PUSH
86224: LD_INT 1
86226: ARRAY
86227: PUSH
86228: LD_INT 1
86230: ARRAY
86231: EQUAL
86232: PUSH
86233: LD_VAR 0 2
86237: PUSH
86238: LD_VAR 0 1
86242: PPUSH
86243: CALL_OW 437
86247: PUSH
86248: LD_INT 1
86250: ARRAY
86251: PUSH
86252: LD_INT 2
86254: ARRAY
86255: EQUAL
86256: AND
86257: PUSH
86258: LD_VAR 0 3
86262: PUSH
86263: LD_VAR 0 1
86267: PPUSH
86268: CALL_OW 437
86272: PUSH
86273: LD_INT 1
86275: ARRAY
86276: PUSH
86277: LD_INT 3
86279: ARRAY
86280: EQUAL
86281: AND
86282: IFFALSE 86292
// result := true ;
86284: LD_ADDR_VAR 0 4
86288: PUSH
86289: LD_INT 1
86291: ST_TO_ADDR
// end ; end ;
86292: LD_VAR 0 4
86296: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
86297: LD_INT 0
86299: PPUSH
86300: PPUSH
86301: PPUSH
86302: PPUSH
// if not unit or not area then
86303: LD_VAR 0 1
86307: NOT
86308: PUSH
86309: LD_VAR 0 2
86313: NOT
86314: OR
86315: IFFALSE 86319
// exit ;
86317: GO 86483
// tmp := AreaToList ( area , i ) ;
86319: LD_ADDR_VAR 0 6
86323: PUSH
86324: LD_VAR 0 2
86328: PPUSH
86329: LD_VAR 0 5
86333: PPUSH
86334: CALL_OW 517
86338: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
86339: LD_ADDR_VAR 0 5
86343: PUSH
86344: DOUBLE
86345: LD_INT 1
86347: DEC
86348: ST_TO_ADDR
86349: LD_VAR 0 6
86353: PUSH
86354: LD_INT 1
86356: ARRAY
86357: PUSH
86358: FOR_TO
86359: IFFALSE 86481
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
86361: LD_ADDR_VAR 0 7
86365: PUSH
86366: LD_VAR 0 6
86370: PUSH
86371: LD_INT 1
86373: ARRAY
86374: PUSH
86375: LD_VAR 0 5
86379: ARRAY
86380: PUSH
86381: LD_VAR 0 6
86385: PUSH
86386: LD_INT 2
86388: ARRAY
86389: PUSH
86390: LD_VAR 0 5
86394: ARRAY
86395: PUSH
86396: EMPTY
86397: LIST
86398: LIST
86399: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
86400: LD_VAR 0 7
86404: PUSH
86405: LD_INT 1
86407: ARRAY
86408: PPUSH
86409: LD_VAR 0 7
86413: PUSH
86414: LD_INT 2
86416: ARRAY
86417: PPUSH
86418: CALL_OW 428
86422: PUSH
86423: LD_INT 0
86425: EQUAL
86426: IFFALSE 86479
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
86428: LD_VAR 0 1
86432: PPUSH
86433: LD_VAR 0 7
86437: PUSH
86438: LD_INT 1
86440: ARRAY
86441: PPUSH
86442: LD_VAR 0 7
86446: PUSH
86447: LD_INT 2
86449: ARRAY
86450: PPUSH
86451: LD_VAR 0 3
86455: PPUSH
86456: CALL_OW 48
// result := IsPlaced ( unit ) ;
86460: LD_ADDR_VAR 0 4
86464: PUSH
86465: LD_VAR 0 1
86469: PPUSH
86470: CALL_OW 305
86474: ST_TO_ADDR
// exit ;
86475: POP
86476: POP
86477: GO 86483
// end ; end ;
86479: GO 86358
86481: POP
86482: POP
// end ;
86483: LD_VAR 0 4
86487: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
86488: LD_INT 0
86490: PPUSH
86491: PPUSH
86492: PPUSH
// if not side or side > 8 then
86493: LD_VAR 0 1
86497: NOT
86498: PUSH
86499: LD_VAR 0 1
86503: PUSH
86504: LD_INT 8
86506: GREATER
86507: OR
86508: IFFALSE 86512
// exit ;
86510: GO 86699
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
86512: LD_ADDR_VAR 0 4
86516: PUSH
86517: LD_INT 22
86519: PUSH
86520: LD_VAR 0 1
86524: PUSH
86525: EMPTY
86526: LIST
86527: LIST
86528: PUSH
86529: LD_INT 21
86531: PUSH
86532: LD_INT 3
86534: PUSH
86535: EMPTY
86536: LIST
86537: LIST
86538: PUSH
86539: EMPTY
86540: LIST
86541: LIST
86542: PPUSH
86543: CALL_OW 69
86547: ST_TO_ADDR
// if not tmp then
86548: LD_VAR 0 4
86552: NOT
86553: IFFALSE 86557
// exit ;
86555: GO 86699
// enable_addtolog := true ;
86557: LD_ADDR_OWVAR 81
86561: PUSH
86562: LD_INT 1
86564: ST_TO_ADDR
// AddToLog ( [ ) ;
86565: LD_STRING [
86567: PPUSH
86568: CALL_OW 561
// for i in tmp do
86572: LD_ADDR_VAR 0 3
86576: PUSH
86577: LD_VAR 0 4
86581: PUSH
86582: FOR_IN
86583: IFFALSE 86690
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
86585: LD_STRING [
86587: PUSH
86588: LD_VAR 0 3
86592: PPUSH
86593: CALL_OW 266
86597: STR
86598: PUSH
86599: LD_STRING , 
86601: STR
86602: PUSH
86603: LD_VAR 0 3
86607: PPUSH
86608: CALL_OW 250
86612: STR
86613: PUSH
86614: LD_STRING , 
86616: STR
86617: PUSH
86618: LD_VAR 0 3
86622: PPUSH
86623: CALL_OW 251
86627: STR
86628: PUSH
86629: LD_STRING , 
86631: STR
86632: PUSH
86633: LD_VAR 0 3
86637: PPUSH
86638: CALL_OW 254
86642: STR
86643: PUSH
86644: LD_STRING , 
86646: STR
86647: PUSH
86648: LD_VAR 0 3
86652: PPUSH
86653: LD_INT 1
86655: PPUSH
86656: CALL_OW 268
86660: STR
86661: PUSH
86662: LD_STRING , 
86664: STR
86665: PUSH
86666: LD_VAR 0 3
86670: PPUSH
86671: LD_INT 2
86673: PPUSH
86674: CALL_OW 268
86678: STR
86679: PUSH
86680: LD_STRING ],
86682: STR
86683: PPUSH
86684: CALL_OW 561
// end ;
86688: GO 86582
86690: POP
86691: POP
// AddToLog ( ]; ) ;
86692: LD_STRING ];
86694: PPUSH
86695: CALL_OW 561
// end ;
86699: LD_VAR 0 2
86703: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
86704: LD_INT 0
86706: PPUSH
86707: PPUSH
86708: PPUSH
86709: PPUSH
86710: PPUSH
// if not area or not rate or not max then
86711: LD_VAR 0 1
86715: NOT
86716: PUSH
86717: LD_VAR 0 2
86721: NOT
86722: OR
86723: PUSH
86724: LD_VAR 0 4
86728: NOT
86729: OR
86730: IFFALSE 86734
// exit ;
86732: GO 86923
// while 1 do
86734: LD_INT 1
86736: IFFALSE 86923
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
86738: LD_ADDR_VAR 0 9
86742: PUSH
86743: LD_VAR 0 1
86747: PPUSH
86748: LD_INT 1
86750: PPUSH
86751: CALL_OW 287
86755: PUSH
86756: LD_INT 10
86758: MUL
86759: ST_TO_ADDR
// r := rate / 10 ;
86760: LD_ADDR_VAR 0 7
86764: PUSH
86765: LD_VAR 0 2
86769: PUSH
86770: LD_INT 10
86772: DIVREAL
86773: ST_TO_ADDR
// time := 1 1$00 ;
86774: LD_ADDR_VAR 0 8
86778: PUSH
86779: LD_INT 2100
86781: ST_TO_ADDR
// if amount < min then
86782: LD_VAR 0 9
86786: PUSH
86787: LD_VAR 0 3
86791: LESS
86792: IFFALSE 86810
// r := r * 2 else
86794: LD_ADDR_VAR 0 7
86798: PUSH
86799: LD_VAR 0 7
86803: PUSH
86804: LD_INT 2
86806: MUL
86807: ST_TO_ADDR
86808: GO 86836
// if amount > max then
86810: LD_VAR 0 9
86814: PUSH
86815: LD_VAR 0 4
86819: GREATER
86820: IFFALSE 86836
// r := r / 2 ;
86822: LD_ADDR_VAR 0 7
86826: PUSH
86827: LD_VAR 0 7
86831: PUSH
86832: LD_INT 2
86834: DIVREAL
86835: ST_TO_ADDR
// time := time / r ;
86836: LD_ADDR_VAR 0 8
86840: PUSH
86841: LD_VAR 0 8
86845: PUSH
86846: LD_VAR 0 7
86850: DIVREAL
86851: ST_TO_ADDR
// if time < 0 then
86852: LD_VAR 0 8
86856: PUSH
86857: LD_INT 0
86859: LESS
86860: IFFALSE 86877
// time := time * - 1 ;
86862: LD_ADDR_VAR 0 8
86866: PUSH
86867: LD_VAR 0 8
86871: PUSH
86872: LD_INT 1
86874: NEG
86875: MUL
86876: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
86877: LD_VAR 0 8
86881: PUSH
86882: LD_INT 35
86884: PPUSH
86885: LD_INT 875
86887: PPUSH
86888: CALL_OW 12
86892: PLUS
86893: PPUSH
86894: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
86898: LD_INT 1
86900: PPUSH
86901: LD_INT 5
86903: PPUSH
86904: CALL_OW 12
86908: PPUSH
86909: LD_VAR 0 1
86913: PPUSH
86914: LD_INT 1
86916: PPUSH
86917: CALL_OW 55
// end ;
86921: GO 86734
// end ;
86923: LD_VAR 0 5
86927: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
86928: LD_INT 0
86930: PPUSH
86931: PPUSH
86932: PPUSH
86933: PPUSH
86934: PPUSH
86935: PPUSH
86936: PPUSH
86937: PPUSH
// if not turrets or not factories then
86938: LD_VAR 0 1
86942: NOT
86943: PUSH
86944: LD_VAR 0 2
86948: NOT
86949: OR
86950: IFFALSE 86954
// exit ;
86952: GO 87261
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
86954: LD_ADDR_VAR 0 10
86958: PUSH
86959: LD_INT 5
86961: PUSH
86962: LD_INT 6
86964: PUSH
86965: EMPTY
86966: LIST
86967: LIST
86968: PUSH
86969: LD_INT 2
86971: PUSH
86972: LD_INT 4
86974: PUSH
86975: EMPTY
86976: LIST
86977: LIST
86978: PUSH
86979: LD_INT 3
86981: PUSH
86982: LD_INT 5
86984: PUSH
86985: EMPTY
86986: LIST
86987: LIST
86988: PUSH
86989: EMPTY
86990: LIST
86991: LIST
86992: LIST
86993: PUSH
86994: LD_INT 24
86996: PUSH
86997: LD_INT 25
86999: PUSH
87000: EMPTY
87001: LIST
87002: LIST
87003: PUSH
87004: LD_INT 23
87006: PUSH
87007: LD_INT 27
87009: PUSH
87010: EMPTY
87011: LIST
87012: LIST
87013: PUSH
87014: EMPTY
87015: LIST
87016: LIST
87017: PUSH
87018: LD_INT 42
87020: PUSH
87021: LD_INT 43
87023: PUSH
87024: EMPTY
87025: LIST
87026: LIST
87027: PUSH
87028: LD_INT 44
87030: PUSH
87031: LD_INT 46
87033: PUSH
87034: EMPTY
87035: LIST
87036: LIST
87037: PUSH
87038: LD_INT 45
87040: PUSH
87041: LD_INT 47
87043: PUSH
87044: EMPTY
87045: LIST
87046: LIST
87047: PUSH
87048: EMPTY
87049: LIST
87050: LIST
87051: LIST
87052: PUSH
87053: EMPTY
87054: LIST
87055: LIST
87056: LIST
87057: ST_TO_ADDR
// result := [ ] ;
87058: LD_ADDR_VAR 0 3
87062: PUSH
87063: EMPTY
87064: ST_TO_ADDR
// for i in turrets do
87065: LD_ADDR_VAR 0 4
87069: PUSH
87070: LD_VAR 0 1
87074: PUSH
87075: FOR_IN
87076: IFFALSE 87259
// begin nat := GetNation ( i ) ;
87078: LD_ADDR_VAR 0 7
87082: PUSH
87083: LD_VAR 0 4
87087: PPUSH
87088: CALL_OW 248
87092: ST_TO_ADDR
// weapon := 0 ;
87093: LD_ADDR_VAR 0 8
87097: PUSH
87098: LD_INT 0
87100: ST_TO_ADDR
// if not nat then
87101: LD_VAR 0 7
87105: NOT
87106: IFFALSE 87110
// continue ;
87108: GO 87075
// for j in list [ nat ] do
87110: LD_ADDR_VAR 0 5
87114: PUSH
87115: LD_VAR 0 10
87119: PUSH
87120: LD_VAR 0 7
87124: ARRAY
87125: PUSH
87126: FOR_IN
87127: IFFALSE 87168
// if GetBWeapon ( i ) = j [ 1 ] then
87129: LD_VAR 0 4
87133: PPUSH
87134: CALL_OW 269
87138: PUSH
87139: LD_VAR 0 5
87143: PUSH
87144: LD_INT 1
87146: ARRAY
87147: EQUAL
87148: IFFALSE 87166
// begin weapon := j [ 2 ] ;
87150: LD_ADDR_VAR 0 8
87154: PUSH
87155: LD_VAR 0 5
87159: PUSH
87160: LD_INT 2
87162: ARRAY
87163: ST_TO_ADDR
// break ;
87164: GO 87168
// end ;
87166: GO 87126
87168: POP
87169: POP
// if not weapon then
87170: LD_VAR 0 8
87174: NOT
87175: IFFALSE 87179
// continue ;
87177: GO 87075
// for k in factories do
87179: LD_ADDR_VAR 0 6
87183: PUSH
87184: LD_VAR 0 2
87188: PUSH
87189: FOR_IN
87190: IFFALSE 87255
// begin weapons := AvailableWeaponList ( k ) ;
87192: LD_ADDR_VAR 0 9
87196: PUSH
87197: LD_VAR 0 6
87201: PPUSH
87202: CALL_OW 478
87206: ST_TO_ADDR
// if not weapons then
87207: LD_VAR 0 9
87211: NOT
87212: IFFALSE 87216
// continue ;
87214: GO 87189
// if weapon in weapons then
87216: LD_VAR 0 8
87220: PUSH
87221: LD_VAR 0 9
87225: IN
87226: IFFALSE 87253
// begin result := [ i , weapon ] ;
87228: LD_ADDR_VAR 0 3
87232: PUSH
87233: LD_VAR 0 4
87237: PUSH
87238: LD_VAR 0 8
87242: PUSH
87243: EMPTY
87244: LIST
87245: LIST
87246: ST_TO_ADDR
// exit ;
87247: POP
87248: POP
87249: POP
87250: POP
87251: GO 87261
// end ; end ;
87253: GO 87189
87255: POP
87256: POP
// end ;
87257: GO 87075
87259: POP
87260: POP
// end ;
87261: LD_VAR 0 3
87265: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
87266: LD_INT 0
87268: PPUSH
// if not side or side > 8 then
87269: LD_VAR 0 3
87273: NOT
87274: PUSH
87275: LD_VAR 0 3
87279: PUSH
87280: LD_INT 8
87282: GREATER
87283: OR
87284: IFFALSE 87288
// exit ;
87286: GO 87347
// if not range then
87288: LD_VAR 0 4
87292: NOT
87293: IFFALSE 87304
// range := - 12 ;
87295: LD_ADDR_VAR 0 4
87299: PUSH
87300: LD_INT 12
87302: NEG
87303: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
87304: LD_VAR 0 1
87308: PPUSH
87309: LD_VAR 0 2
87313: PPUSH
87314: LD_VAR 0 3
87318: PPUSH
87319: LD_VAR 0 4
87323: PPUSH
87324: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
87328: LD_VAR 0 1
87332: PPUSH
87333: LD_VAR 0 2
87337: PPUSH
87338: LD_VAR 0 3
87342: PPUSH
87343: CALL_OW 331
// end ;
87347: LD_VAR 0 5
87351: RET
// export function Video ( mode ) ; begin
87352: LD_INT 0
87354: PPUSH
// ingame_video = mode ;
87355: LD_ADDR_OWVAR 52
87359: PUSH
87360: LD_VAR 0 1
87364: ST_TO_ADDR
// interface_hidden = mode ;
87365: LD_ADDR_OWVAR 54
87369: PUSH
87370: LD_VAR 0 1
87374: ST_TO_ADDR
// end ;
87375: LD_VAR 0 2
87379: RET
// export function Join ( array , element ) ; begin
87380: LD_INT 0
87382: PPUSH
// result := Replace ( array , array + 1 , element ) ;
87383: LD_ADDR_VAR 0 3
87387: PUSH
87388: LD_VAR 0 1
87392: PPUSH
87393: LD_VAR 0 1
87397: PUSH
87398: LD_INT 1
87400: PLUS
87401: PPUSH
87402: LD_VAR 0 2
87406: PPUSH
87407: CALL_OW 1
87411: ST_TO_ADDR
// end ;
87412: LD_VAR 0 3
87416: RET
// export function JoinUnion ( array , element ) ; begin
87417: LD_INT 0
87419: PPUSH
// result := array union element ;
87420: LD_ADDR_VAR 0 3
87424: PUSH
87425: LD_VAR 0 1
87429: PUSH
87430: LD_VAR 0 2
87434: UNION
87435: ST_TO_ADDR
// end ;
87436: LD_VAR 0 3
87440: RET
// export function GetBehemoths ( side ) ; begin
87441: LD_INT 0
87443: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
87444: LD_ADDR_VAR 0 2
87448: PUSH
87449: LD_INT 22
87451: PUSH
87452: LD_VAR 0 1
87456: PUSH
87457: EMPTY
87458: LIST
87459: LIST
87460: PUSH
87461: LD_INT 31
87463: PUSH
87464: LD_INT 25
87466: PUSH
87467: EMPTY
87468: LIST
87469: LIST
87470: PUSH
87471: EMPTY
87472: LIST
87473: LIST
87474: PPUSH
87475: CALL_OW 69
87479: ST_TO_ADDR
// end ;
87480: LD_VAR 0 2
87484: RET
// export function Shuffle ( array ) ; var i , index ; begin
87485: LD_INT 0
87487: PPUSH
87488: PPUSH
87489: PPUSH
// result := [ ] ;
87490: LD_ADDR_VAR 0 2
87494: PUSH
87495: EMPTY
87496: ST_TO_ADDR
// if not array then
87497: LD_VAR 0 1
87501: NOT
87502: IFFALSE 87506
// exit ;
87504: GO 87605
// Randomize ;
87506: CALL_OW 10
// for i = array downto 1 do
87510: LD_ADDR_VAR 0 3
87514: PUSH
87515: DOUBLE
87516: LD_VAR 0 1
87520: INC
87521: ST_TO_ADDR
87522: LD_INT 1
87524: PUSH
87525: FOR_DOWNTO
87526: IFFALSE 87603
// begin index := rand ( 1 , array ) ;
87528: LD_ADDR_VAR 0 4
87532: PUSH
87533: LD_INT 1
87535: PPUSH
87536: LD_VAR 0 1
87540: PPUSH
87541: CALL_OW 12
87545: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
87546: LD_ADDR_VAR 0 2
87550: PUSH
87551: LD_VAR 0 2
87555: PPUSH
87556: LD_VAR 0 2
87560: PUSH
87561: LD_INT 1
87563: PLUS
87564: PPUSH
87565: LD_VAR 0 1
87569: PUSH
87570: LD_VAR 0 4
87574: ARRAY
87575: PPUSH
87576: CALL_OW 2
87580: ST_TO_ADDR
// array := Delete ( array , index ) ;
87581: LD_ADDR_VAR 0 1
87585: PUSH
87586: LD_VAR 0 1
87590: PPUSH
87591: LD_VAR 0 4
87595: PPUSH
87596: CALL_OW 3
87600: ST_TO_ADDR
// end ;
87601: GO 87525
87603: POP
87604: POP
// end ;
87605: LD_VAR 0 2
87609: RET
// export function GetBaseMaterials ( base ) ; begin
87610: LD_INT 0
87612: PPUSH
// result := [ 0 , 0 , 0 ] ;
87613: LD_ADDR_VAR 0 2
87617: PUSH
87618: LD_INT 0
87620: PUSH
87621: LD_INT 0
87623: PUSH
87624: LD_INT 0
87626: PUSH
87627: EMPTY
87628: LIST
87629: LIST
87630: LIST
87631: ST_TO_ADDR
// if not base then
87632: LD_VAR 0 1
87636: NOT
87637: IFFALSE 87641
// exit ;
87639: GO 87690
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
87641: LD_ADDR_VAR 0 2
87645: PUSH
87646: LD_VAR 0 1
87650: PPUSH
87651: LD_INT 1
87653: PPUSH
87654: CALL_OW 275
87658: PUSH
87659: LD_VAR 0 1
87663: PPUSH
87664: LD_INT 2
87666: PPUSH
87667: CALL_OW 275
87671: PUSH
87672: LD_VAR 0 1
87676: PPUSH
87677: LD_INT 3
87679: PPUSH
87680: CALL_OW 275
87684: PUSH
87685: EMPTY
87686: LIST
87687: LIST
87688: LIST
87689: ST_TO_ADDR
// end ;
87690: LD_VAR 0 2
87694: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
87695: LD_INT 0
87697: PPUSH
87698: PPUSH
// result := array ;
87699: LD_ADDR_VAR 0 3
87703: PUSH
87704: LD_VAR 0 1
87708: ST_TO_ADDR
// if size >= result then
87709: LD_VAR 0 2
87713: PUSH
87714: LD_VAR 0 3
87718: GREATEREQUAL
87719: IFFALSE 87723
// exit ;
87721: GO 87773
// if size then
87723: LD_VAR 0 2
87727: IFFALSE 87773
// for i := array downto size do
87729: LD_ADDR_VAR 0 4
87733: PUSH
87734: DOUBLE
87735: LD_VAR 0 1
87739: INC
87740: ST_TO_ADDR
87741: LD_VAR 0 2
87745: PUSH
87746: FOR_DOWNTO
87747: IFFALSE 87771
// result := Delete ( result , result ) ;
87749: LD_ADDR_VAR 0 3
87753: PUSH
87754: LD_VAR 0 3
87758: PPUSH
87759: LD_VAR 0 3
87763: PPUSH
87764: CALL_OW 3
87768: ST_TO_ADDR
87769: GO 87746
87771: POP
87772: POP
// end ;
87773: LD_VAR 0 3
87777: RET
// export function ComExit ( unit ) ; var tmp ; begin
87778: LD_INT 0
87780: PPUSH
87781: PPUSH
// if not IsInUnit ( unit ) then
87782: LD_VAR 0 1
87786: PPUSH
87787: CALL_OW 310
87791: NOT
87792: IFFALSE 87796
// exit ;
87794: GO 87856
// tmp := IsInUnit ( unit ) ;
87796: LD_ADDR_VAR 0 3
87800: PUSH
87801: LD_VAR 0 1
87805: PPUSH
87806: CALL_OW 310
87810: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
87811: LD_VAR 0 3
87815: PPUSH
87816: CALL_OW 247
87820: PUSH
87821: LD_INT 2
87823: EQUAL
87824: IFFALSE 87837
// ComExitVehicle ( unit ) else
87826: LD_VAR 0 1
87830: PPUSH
87831: CALL_OW 121
87835: GO 87846
// ComExitBuilding ( unit ) ;
87837: LD_VAR 0 1
87841: PPUSH
87842: CALL_OW 122
// result := tmp ;
87846: LD_ADDR_VAR 0 2
87850: PUSH
87851: LD_VAR 0 3
87855: ST_TO_ADDR
// end ;
87856: LD_VAR 0 2
87860: RET
// export function ComExitAll ( units ) ; var i ; begin
87861: LD_INT 0
87863: PPUSH
87864: PPUSH
// if not units then
87865: LD_VAR 0 1
87869: NOT
87870: IFFALSE 87874
// exit ;
87872: GO 87900
// for i in units do
87874: LD_ADDR_VAR 0 3
87878: PUSH
87879: LD_VAR 0 1
87883: PUSH
87884: FOR_IN
87885: IFFALSE 87898
// ComExit ( i ) ;
87887: LD_VAR 0 3
87891: PPUSH
87892: CALL 87778 0 1
87896: GO 87884
87898: POP
87899: POP
// end ;
87900: LD_VAR 0 2
87904: RET
// export function ResetHc ; begin
87905: LD_INT 0
87907: PPUSH
// InitHc ;
87908: CALL_OW 19
// hc_importance := 0 ;
87912: LD_ADDR_OWVAR 32
87916: PUSH
87917: LD_INT 0
87919: ST_TO_ADDR
// end ;
87920: LD_VAR 0 1
87924: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
87925: LD_INT 0
87927: PPUSH
87928: PPUSH
87929: PPUSH
// _x := ( x1 + x2 ) div 2 ;
87930: LD_ADDR_VAR 0 6
87934: PUSH
87935: LD_VAR 0 1
87939: PUSH
87940: LD_VAR 0 3
87944: PLUS
87945: PUSH
87946: LD_INT 2
87948: DIV
87949: ST_TO_ADDR
// if _x < 0 then
87950: LD_VAR 0 6
87954: PUSH
87955: LD_INT 0
87957: LESS
87958: IFFALSE 87975
// _x := _x * - 1 ;
87960: LD_ADDR_VAR 0 6
87964: PUSH
87965: LD_VAR 0 6
87969: PUSH
87970: LD_INT 1
87972: NEG
87973: MUL
87974: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
87975: LD_ADDR_VAR 0 7
87979: PUSH
87980: LD_VAR 0 2
87984: PUSH
87985: LD_VAR 0 4
87989: PLUS
87990: PUSH
87991: LD_INT 2
87993: DIV
87994: ST_TO_ADDR
// if _y < 0 then
87995: LD_VAR 0 7
87999: PUSH
88000: LD_INT 0
88002: LESS
88003: IFFALSE 88020
// _y := _y * - 1 ;
88005: LD_ADDR_VAR 0 7
88009: PUSH
88010: LD_VAR 0 7
88014: PUSH
88015: LD_INT 1
88017: NEG
88018: MUL
88019: ST_TO_ADDR
// result := [ _x , _y ] ;
88020: LD_ADDR_VAR 0 5
88024: PUSH
88025: LD_VAR 0 6
88029: PUSH
88030: LD_VAR 0 7
88034: PUSH
88035: EMPTY
88036: LIST
88037: LIST
88038: ST_TO_ADDR
// end ;
88039: LD_VAR 0 5
88043: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
88044: LD_INT 0
88046: PPUSH
88047: PPUSH
88048: PPUSH
88049: PPUSH
// task := GetTaskList ( unit ) ;
88050: LD_ADDR_VAR 0 7
88054: PUSH
88055: LD_VAR 0 1
88059: PPUSH
88060: CALL_OW 437
88064: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
88065: LD_VAR 0 7
88069: NOT
88070: PUSH
88071: LD_VAR 0 1
88075: PPUSH
88076: LD_VAR 0 2
88080: PPUSH
88081: CALL_OW 308
88085: NOT
88086: AND
88087: IFFALSE 88091
// exit ;
88089: GO 88209
// if IsInArea ( unit , area ) then
88091: LD_VAR 0 1
88095: PPUSH
88096: LD_VAR 0 2
88100: PPUSH
88101: CALL_OW 308
88105: IFFALSE 88123
// begin ComMoveToArea ( unit , goAway ) ;
88107: LD_VAR 0 1
88111: PPUSH
88112: LD_VAR 0 3
88116: PPUSH
88117: CALL_OW 113
// exit ;
88121: GO 88209
// end ; if task [ 1 ] [ 1 ] <> M then
88123: LD_VAR 0 7
88127: PUSH
88128: LD_INT 1
88130: ARRAY
88131: PUSH
88132: LD_INT 1
88134: ARRAY
88135: PUSH
88136: LD_STRING M
88138: NONEQUAL
88139: IFFALSE 88143
// exit ;
88141: GO 88209
// x := task [ 1 ] [ 2 ] ;
88143: LD_ADDR_VAR 0 5
88147: PUSH
88148: LD_VAR 0 7
88152: PUSH
88153: LD_INT 1
88155: ARRAY
88156: PUSH
88157: LD_INT 2
88159: ARRAY
88160: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
88161: LD_ADDR_VAR 0 6
88165: PUSH
88166: LD_VAR 0 7
88170: PUSH
88171: LD_INT 1
88173: ARRAY
88174: PUSH
88175: LD_INT 3
88177: ARRAY
88178: ST_TO_ADDR
// if InArea ( x , y , area ) then
88179: LD_VAR 0 5
88183: PPUSH
88184: LD_VAR 0 6
88188: PPUSH
88189: LD_VAR 0 2
88193: PPUSH
88194: CALL_OW 309
88198: IFFALSE 88209
// ComStop ( unit ) ;
88200: LD_VAR 0 1
88204: PPUSH
88205: CALL_OW 141
// end ;
88209: LD_VAR 0 4
88213: RET
// export function Abs ( value ) ; begin
88214: LD_INT 0
88216: PPUSH
// result := value ;
88217: LD_ADDR_VAR 0 2
88221: PUSH
88222: LD_VAR 0 1
88226: ST_TO_ADDR
// if value < 0 then
88227: LD_VAR 0 1
88231: PUSH
88232: LD_INT 0
88234: LESS
88235: IFFALSE 88252
// result := value * - 1 ;
88237: LD_ADDR_VAR 0 2
88241: PUSH
88242: LD_VAR 0 1
88246: PUSH
88247: LD_INT 1
88249: NEG
88250: MUL
88251: ST_TO_ADDR
// end ;
88252: LD_VAR 0 2
88256: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
88257: LD_INT 0
88259: PPUSH
88260: PPUSH
88261: PPUSH
88262: PPUSH
88263: PPUSH
88264: PPUSH
88265: PPUSH
88266: PPUSH
// if not unit or not building then
88267: LD_VAR 0 1
88271: NOT
88272: PUSH
88273: LD_VAR 0 2
88277: NOT
88278: OR
88279: IFFALSE 88283
// exit ;
88281: GO 88509
// x := GetX ( building ) ;
88283: LD_ADDR_VAR 0 4
88287: PUSH
88288: LD_VAR 0 2
88292: PPUSH
88293: CALL_OW 250
88297: ST_TO_ADDR
// y := GetY ( building ) ;
88298: LD_ADDR_VAR 0 6
88302: PUSH
88303: LD_VAR 0 2
88307: PPUSH
88308: CALL_OW 251
88312: ST_TO_ADDR
// d := GetDir ( building ) ;
88313: LD_ADDR_VAR 0 8
88317: PUSH
88318: LD_VAR 0 2
88322: PPUSH
88323: CALL_OW 254
88327: ST_TO_ADDR
// r := 4 ;
88328: LD_ADDR_VAR 0 9
88332: PUSH
88333: LD_INT 4
88335: ST_TO_ADDR
// for i := 1 to 5 do
88336: LD_ADDR_VAR 0 10
88340: PUSH
88341: DOUBLE
88342: LD_INT 1
88344: DEC
88345: ST_TO_ADDR
88346: LD_INT 5
88348: PUSH
88349: FOR_TO
88350: IFFALSE 88507
// begin _x := ShiftX ( x , d , r + i ) ;
88352: LD_ADDR_VAR 0 5
88356: PUSH
88357: LD_VAR 0 4
88361: PPUSH
88362: LD_VAR 0 8
88366: PPUSH
88367: LD_VAR 0 9
88371: PUSH
88372: LD_VAR 0 10
88376: PLUS
88377: PPUSH
88378: CALL_OW 272
88382: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
88383: LD_ADDR_VAR 0 7
88387: PUSH
88388: LD_VAR 0 6
88392: PPUSH
88393: LD_VAR 0 8
88397: PPUSH
88398: LD_VAR 0 9
88402: PUSH
88403: LD_VAR 0 10
88407: PLUS
88408: PPUSH
88409: CALL_OW 273
88413: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
88414: LD_VAR 0 5
88418: PPUSH
88419: LD_VAR 0 7
88423: PPUSH
88424: CALL_OW 488
88428: PUSH
88429: LD_VAR 0 5
88433: PPUSH
88434: LD_VAR 0 7
88438: PPUSH
88439: CALL_OW 428
88443: PPUSH
88444: CALL_OW 247
88448: PUSH
88449: LD_INT 3
88451: PUSH
88452: LD_INT 2
88454: PUSH
88455: EMPTY
88456: LIST
88457: LIST
88458: IN
88459: NOT
88460: AND
88461: IFFALSE 88505
// begin ComMoveXY ( unit , _x , _y ) ;
88463: LD_VAR 0 1
88467: PPUSH
88468: LD_VAR 0 5
88472: PPUSH
88473: LD_VAR 0 7
88477: PPUSH
88478: CALL_OW 111
// result := [ _x , _y ] ;
88482: LD_ADDR_VAR 0 3
88486: PUSH
88487: LD_VAR 0 5
88491: PUSH
88492: LD_VAR 0 7
88496: PUSH
88497: EMPTY
88498: LIST
88499: LIST
88500: ST_TO_ADDR
// exit ;
88501: POP
88502: POP
88503: GO 88509
// end ; end ;
88505: GO 88349
88507: POP
88508: POP
// end ;
88509: LD_VAR 0 3
88513: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
88514: LD_INT 0
88516: PPUSH
88517: PPUSH
88518: PPUSH
// result := 0 ;
88519: LD_ADDR_VAR 0 3
88523: PUSH
88524: LD_INT 0
88526: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
88527: LD_VAR 0 1
88531: PUSH
88532: LD_INT 0
88534: LESS
88535: PUSH
88536: LD_VAR 0 1
88540: PUSH
88541: LD_INT 8
88543: GREATER
88544: OR
88545: PUSH
88546: LD_VAR 0 2
88550: PUSH
88551: LD_INT 0
88553: LESS
88554: OR
88555: PUSH
88556: LD_VAR 0 2
88560: PUSH
88561: LD_INT 8
88563: GREATER
88564: OR
88565: IFFALSE 88569
// exit ;
88567: GO 88644
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
88569: LD_ADDR_VAR 0 4
88573: PUSH
88574: LD_INT 22
88576: PUSH
88577: LD_VAR 0 2
88581: PUSH
88582: EMPTY
88583: LIST
88584: LIST
88585: PPUSH
88586: CALL_OW 69
88590: PUSH
88591: FOR_IN
88592: IFFALSE 88642
// begin un := UnitShoot ( i ) ;
88594: LD_ADDR_VAR 0 5
88598: PUSH
88599: LD_VAR 0 4
88603: PPUSH
88604: CALL_OW 504
88608: ST_TO_ADDR
// if GetSide ( un ) = side1 then
88609: LD_VAR 0 5
88613: PPUSH
88614: CALL_OW 255
88618: PUSH
88619: LD_VAR 0 1
88623: EQUAL
88624: IFFALSE 88640
// begin result := un ;
88626: LD_ADDR_VAR 0 3
88630: PUSH
88631: LD_VAR 0 5
88635: ST_TO_ADDR
// exit ;
88636: POP
88637: POP
88638: GO 88644
// end ; end ;
88640: GO 88591
88642: POP
88643: POP
// end ;
88644: LD_VAR 0 3
88648: RET
// export function GetCargoBay ( units ) ; begin
88649: LD_INT 0
88651: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
88652: LD_ADDR_VAR 0 2
88656: PUSH
88657: LD_VAR 0 1
88661: PPUSH
88662: LD_INT 2
88664: PUSH
88665: LD_INT 34
88667: PUSH
88668: LD_INT 12
88670: PUSH
88671: EMPTY
88672: LIST
88673: LIST
88674: PUSH
88675: LD_INT 34
88677: PUSH
88678: LD_INT 51
88680: PUSH
88681: EMPTY
88682: LIST
88683: LIST
88684: PUSH
88685: LD_INT 34
88687: PUSH
88688: LD_INT 32
88690: PUSH
88691: EMPTY
88692: LIST
88693: LIST
88694: PUSH
88695: LD_INT 34
88697: PUSH
88698: LD_INT 89
88700: PUSH
88701: EMPTY
88702: LIST
88703: LIST
88704: PUSH
88705: EMPTY
88706: LIST
88707: LIST
88708: LIST
88709: LIST
88710: LIST
88711: PPUSH
88712: CALL_OW 72
88716: ST_TO_ADDR
// end ;
88717: LD_VAR 0 2
88721: RET
// export function Negate ( value ) ; begin
88722: LD_INT 0
88724: PPUSH
// result := not value ;
88725: LD_ADDR_VAR 0 2
88729: PUSH
88730: LD_VAR 0 1
88734: NOT
88735: ST_TO_ADDR
// end ;
88736: LD_VAR 0 2
88740: RET
// export function Inc ( value ) ; begin
88741: LD_INT 0
88743: PPUSH
// result := value + 1 ;
88744: LD_ADDR_VAR 0 2
88748: PUSH
88749: LD_VAR 0 1
88753: PUSH
88754: LD_INT 1
88756: PLUS
88757: ST_TO_ADDR
// end ;
88758: LD_VAR 0 2
88762: RET
// export function Dec ( value ) ; begin
88763: LD_INT 0
88765: PPUSH
// result := value - 1 ;
88766: LD_ADDR_VAR 0 2
88770: PUSH
88771: LD_VAR 0 1
88775: PUSH
88776: LD_INT 1
88778: MINUS
88779: ST_TO_ADDR
// end ;
88780: LD_VAR 0 2
88784: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
88785: LD_INT 0
88787: PPUSH
88788: PPUSH
88789: PPUSH
88790: PPUSH
88791: PPUSH
88792: PPUSH
88793: PPUSH
88794: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
88795: LD_VAR 0 1
88799: PPUSH
88800: LD_VAR 0 2
88804: PPUSH
88805: CALL_OW 488
88809: NOT
88810: PUSH
88811: LD_VAR 0 3
88815: PPUSH
88816: LD_VAR 0 4
88820: PPUSH
88821: CALL_OW 488
88825: NOT
88826: OR
88827: IFFALSE 88840
// begin result := - 1 ;
88829: LD_ADDR_VAR 0 5
88833: PUSH
88834: LD_INT 1
88836: NEG
88837: ST_TO_ADDR
// exit ;
88838: GO 89075
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
88840: LD_ADDR_VAR 0 12
88844: PUSH
88845: LD_VAR 0 1
88849: PPUSH
88850: LD_VAR 0 2
88854: PPUSH
88855: LD_VAR 0 3
88859: PPUSH
88860: LD_VAR 0 4
88864: PPUSH
88865: CALL 87925 0 4
88869: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
88870: LD_ADDR_VAR 0 11
88874: PUSH
88875: LD_VAR 0 1
88879: PPUSH
88880: LD_VAR 0 2
88884: PPUSH
88885: LD_VAR 0 12
88889: PUSH
88890: LD_INT 1
88892: ARRAY
88893: PPUSH
88894: LD_VAR 0 12
88898: PUSH
88899: LD_INT 2
88901: ARRAY
88902: PPUSH
88903: CALL_OW 298
88907: ST_TO_ADDR
// distance := 9999 ;
88908: LD_ADDR_VAR 0 10
88912: PUSH
88913: LD_INT 9999
88915: ST_TO_ADDR
// for i := 0 to 5 do
88916: LD_ADDR_VAR 0 6
88920: PUSH
88921: DOUBLE
88922: LD_INT 0
88924: DEC
88925: ST_TO_ADDR
88926: LD_INT 5
88928: PUSH
88929: FOR_TO
88930: IFFALSE 89073
// begin _x := ShiftX ( x1 , i , centerDist ) ;
88932: LD_ADDR_VAR 0 7
88936: PUSH
88937: LD_VAR 0 1
88941: PPUSH
88942: LD_VAR 0 6
88946: PPUSH
88947: LD_VAR 0 11
88951: PPUSH
88952: CALL_OW 272
88956: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
88957: LD_ADDR_VAR 0 8
88961: PUSH
88962: LD_VAR 0 2
88966: PPUSH
88967: LD_VAR 0 6
88971: PPUSH
88972: LD_VAR 0 11
88976: PPUSH
88977: CALL_OW 273
88981: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
88982: LD_VAR 0 7
88986: PPUSH
88987: LD_VAR 0 8
88991: PPUSH
88992: CALL_OW 488
88996: NOT
88997: IFFALSE 89001
// continue ;
88999: GO 88929
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
89001: LD_ADDR_VAR 0 9
89005: PUSH
89006: LD_VAR 0 12
89010: PUSH
89011: LD_INT 1
89013: ARRAY
89014: PPUSH
89015: LD_VAR 0 12
89019: PUSH
89020: LD_INT 2
89022: ARRAY
89023: PPUSH
89024: LD_VAR 0 7
89028: PPUSH
89029: LD_VAR 0 8
89033: PPUSH
89034: CALL_OW 298
89038: ST_TO_ADDR
// if tmp < distance then
89039: LD_VAR 0 9
89043: PUSH
89044: LD_VAR 0 10
89048: LESS
89049: IFFALSE 89071
// begin result := i ;
89051: LD_ADDR_VAR 0 5
89055: PUSH
89056: LD_VAR 0 6
89060: ST_TO_ADDR
// distance := tmp ;
89061: LD_ADDR_VAR 0 10
89065: PUSH
89066: LD_VAR 0 9
89070: ST_TO_ADDR
// end ; end ;
89071: GO 88929
89073: POP
89074: POP
// end ;
89075: LD_VAR 0 5
89079: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89080: LD_INT 0
89082: PPUSH
89083: PPUSH
// if not driver or not IsInUnit ( driver ) then
89084: LD_VAR 0 1
89088: NOT
89089: PUSH
89090: LD_VAR 0 1
89094: PPUSH
89095: CALL_OW 310
89099: NOT
89100: OR
89101: IFFALSE 89105
// exit ;
89103: GO 89195
// vehicle := IsInUnit ( driver ) ;
89105: LD_ADDR_VAR 0 3
89109: PUSH
89110: LD_VAR 0 1
89114: PPUSH
89115: CALL_OW 310
89119: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89120: LD_VAR 0 1
89124: PPUSH
89125: LD_STRING \
89127: PUSH
89128: LD_INT 0
89130: PUSH
89131: LD_INT 0
89133: PUSH
89134: LD_INT 0
89136: PUSH
89137: LD_INT 0
89139: PUSH
89140: LD_INT 0
89142: PUSH
89143: LD_INT 0
89145: PUSH
89146: EMPTY
89147: LIST
89148: LIST
89149: LIST
89150: LIST
89151: LIST
89152: LIST
89153: LIST
89154: PUSH
89155: LD_STRING E
89157: PUSH
89158: LD_INT 0
89160: PUSH
89161: LD_INT 0
89163: PUSH
89164: LD_VAR 0 3
89168: PUSH
89169: LD_INT 0
89171: PUSH
89172: LD_INT 0
89174: PUSH
89175: LD_INT 0
89177: PUSH
89178: EMPTY
89179: LIST
89180: LIST
89181: LIST
89182: LIST
89183: LIST
89184: LIST
89185: LIST
89186: PUSH
89187: EMPTY
89188: LIST
89189: LIST
89190: PPUSH
89191: CALL_OW 446
// end ;
89195: LD_VAR 0 2
89199: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89200: LD_INT 0
89202: PPUSH
89203: PPUSH
// if not driver or not IsInUnit ( driver ) then
89204: LD_VAR 0 1
89208: NOT
89209: PUSH
89210: LD_VAR 0 1
89214: PPUSH
89215: CALL_OW 310
89219: NOT
89220: OR
89221: IFFALSE 89225
// exit ;
89223: GO 89315
// vehicle := IsInUnit ( driver ) ;
89225: LD_ADDR_VAR 0 3
89229: PUSH
89230: LD_VAR 0 1
89234: PPUSH
89235: CALL_OW 310
89239: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89240: LD_VAR 0 1
89244: PPUSH
89245: LD_STRING \
89247: PUSH
89248: LD_INT 0
89250: PUSH
89251: LD_INT 0
89253: PUSH
89254: LD_INT 0
89256: PUSH
89257: LD_INT 0
89259: PUSH
89260: LD_INT 0
89262: PUSH
89263: LD_INT 0
89265: PUSH
89266: EMPTY
89267: LIST
89268: LIST
89269: LIST
89270: LIST
89271: LIST
89272: LIST
89273: LIST
89274: PUSH
89275: LD_STRING E
89277: PUSH
89278: LD_INT 0
89280: PUSH
89281: LD_INT 0
89283: PUSH
89284: LD_VAR 0 3
89288: PUSH
89289: LD_INT 0
89291: PUSH
89292: LD_INT 0
89294: PUSH
89295: LD_INT 0
89297: PUSH
89298: EMPTY
89299: LIST
89300: LIST
89301: LIST
89302: LIST
89303: LIST
89304: LIST
89305: LIST
89306: PUSH
89307: EMPTY
89308: LIST
89309: LIST
89310: PPUSH
89311: CALL_OW 447
// end ;
89315: LD_VAR 0 2
89319: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
89320: LD_INT 0
89322: PPUSH
89323: PPUSH
89324: PPUSH
// tmp := [ ] ;
89325: LD_ADDR_VAR 0 5
89329: PUSH
89330: EMPTY
89331: ST_TO_ADDR
// for i in units do
89332: LD_ADDR_VAR 0 4
89336: PUSH
89337: LD_VAR 0 1
89341: PUSH
89342: FOR_IN
89343: IFFALSE 89381
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
89345: LD_ADDR_VAR 0 5
89349: PUSH
89350: LD_VAR 0 5
89354: PPUSH
89355: LD_VAR 0 5
89359: PUSH
89360: LD_INT 1
89362: PLUS
89363: PPUSH
89364: LD_VAR 0 4
89368: PPUSH
89369: CALL_OW 256
89373: PPUSH
89374: CALL_OW 2
89378: ST_TO_ADDR
89379: GO 89342
89381: POP
89382: POP
// if not tmp then
89383: LD_VAR 0 5
89387: NOT
89388: IFFALSE 89392
// exit ;
89390: GO 89440
// if asc then
89392: LD_VAR 0 2
89396: IFFALSE 89420
// result := SortListByListAsc ( units , tmp ) else
89398: LD_ADDR_VAR 0 3
89402: PUSH
89403: LD_VAR 0 1
89407: PPUSH
89408: LD_VAR 0 5
89412: PPUSH
89413: CALL_OW 76
89417: ST_TO_ADDR
89418: GO 89440
// result := SortListByListDesc ( units , tmp ) ;
89420: LD_ADDR_VAR 0 3
89424: PUSH
89425: LD_VAR 0 1
89429: PPUSH
89430: LD_VAR 0 5
89434: PPUSH
89435: CALL_OW 77
89439: ST_TO_ADDR
// end ;
89440: LD_VAR 0 3
89444: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
89445: LD_INT 0
89447: PPUSH
89448: PPUSH
// task := GetTaskList ( mech ) ;
89449: LD_ADDR_VAR 0 4
89453: PUSH
89454: LD_VAR 0 1
89458: PPUSH
89459: CALL_OW 437
89463: ST_TO_ADDR
// if not task then
89464: LD_VAR 0 4
89468: NOT
89469: IFFALSE 89473
// exit ;
89471: GO 89515
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
89473: LD_ADDR_VAR 0 3
89477: PUSH
89478: LD_VAR 0 4
89482: PUSH
89483: LD_INT 1
89485: ARRAY
89486: PUSH
89487: LD_INT 1
89489: ARRAY
89490: PUSH
89491: LD_STRING r
89493: EQUAL
89494: PUSH
89495: LD_VAR 0 4
89499: PUSH
89500: LD_INT 1
89502: ARRAY
89503: PUSH
89504: LD_INT 4
89506: ARRAY
89507: PUSH
89508: LD_VAR 0 2
89512: EQUAL
89513: AND
89514: ST_TO_ADDR
// end ;
89515: LD_VAR 0 3
89519: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
89520: LD_INT 0
89522: PPUSH
// SetDir ( unit , d ) ;
89523: LD_VAR 0 1
89527: PPUSH
89528: LD_VAR 0 4
89532: PPUSH
89533: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
89537: LD_VAR 0 1
89541: PPUSH
89542: LD_VAR 0 2
89546: PPUSH
89547: LD_VAR 0 3
89551: PPUSH
89552: LD_VAR 0 5
89556: PPUSH
89557: CALL_OW 48
// end ;
89561: LD_VAR 0 6
89565: RET
// export function ToNaturalNumber ( number ) ; begin
89566: LD_INT 0
89568: PPUSH
// result := number div 1 ;
89569: LD_ADDR_VAR 0 2
89573: PUSH
89574: LD_VAR 0 1
89578: PUSH
89579: LD_INT 1
89581: DIV
89582: ST_TO_ADDR
// if number < 0 then
89583: LD_VAR 0 1
89587: PUSH
89588: LD_INT 0
89590: LESS
89591: IFFALSE 89601
// result := 0 ;
89593: LD_ADDR_VAR 0 2
89597: PUSH
89598: LD_INT 0
89600: ST_TO_ADDR
// end ;
89601: LD_VAR 0 2
89605: RET
// export function SortByClass ( units , class ) ; var un ; begin
89606: LD_INT 0
89608: PPUSH
89609: PPUSH
// if not units or not class then
89610: LD_VAR 0 1
89614: NOT
89615: PUSH
89616: LD_VAR 0 2
89620: NOT
89621: OR
89622: IFFALSE 89626
// exit ;
89624: GO 89721
// result := [ ] ;
89626: LD_ADDR_VAR 0 3
89630: PUSH
89631: EMPTY
89632: ST_TO_ADDR
// for un in units do
89633: LD_ADDR_VAR 0 4
89637: PUSH
89638: LD_VAR 0 1
89642: PUSH
89643: FOR_IN
89644: IFFALSE 89719
// if GetClass ( un ) = class then
89646: LD_VAR 0 4
89650: PPUSH
89651: CALL_OW 257
89655: PUSH
89656: LD_VAR 0 2
89660: EQUAL
89661: IFFALSE 89688
// result := Insert ( result , 1 , un ) else
89663: LD_ADDR_VAR 0 3
89667: PUSH
89668: LD_VAR 0 3
89672: PPUSH
89673: LD_INT 1
89675: PPUSH
89676: LD_VAR 0 4
89680: PPUSH
89681: CALL_OW 2
89685: ST_TO_ADDR
89686: GO 89717
// result := Replace ( result , result + 1 , un ) ;
89688: LD_ADDR_VAR 0 3
89692: PUSH
89693: LD_VAR 0 3
89697: PPUSH
89698: LD_VAR 0 3
89702: PUSH
89703: LD_INT 1
89705: PLUS
89706: PPUSH
89707: LD_VAR 0 4
89711: PPUSH
89712: CALL_OW 1
89716: ST_TO_ADDR
89717: GO 89643
89719: POP
89720: POP
// end ;
89721: LD_VAR 0 3
89725: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
89726: LD_INT 0
89728: PPUSH
89729: PPUSH
89730: PPUSH
89731: PPUSH
89732: PPUSH
89733: PPUSH
89734: PPUSH
// result := [ ] ;
89735: LD_ADDR_VAR 0 4
89739: PUSH
89740: EMPTY
89741: ST_TO_ADDR
// if x - r < 0 then
89742: LD_VAR 0 1
89746: PUSH
89747: LD_VAR 0 3
89751: MINUS
89752: PUSH
89753: LD_INT 0
89755: LESS
89756: IFFALSE 89768
// min_x := 0 else
89758: LD_ADDR_VAR 0 8
89762: PUSH
89763: LD_INT 0
89765: ST_TO_ADDR
89766: GO 89784
// min_x := x - r ;
89768: LD_ADDR_VAR 0 8
89772: PUSH
89773: LD_VAR 0 1
89777: PUSH
89778: LD_VAR 0 3
89782: MINUS
89783: ST_TO_ADDR
// if y - r < 0 then
89784: LD_VAR 0 2
89788: PUSH
89789: LD_VAR 0 3
89793: MINUS
89794: PUSH
89795: LD_INT 0
89797: LESS
89798: IFFALSE 89810
// min_y := 0 else
89800: LD_ADDR_VAR 0 7
89804: PUSH
89805: LD_INT 0
89807: ST_TO_ADDR
89808: GO 89826
// min_y := y - r ;
89810: LD_ADDR_VAR 0 7
89814: PUSH
89815: LD_VAR 0 2
89819: PUSH
89820: LD_VAR 0 3
89824: MINUS
89825: ST_TO_ADDR
// max_x := x + r ;
89826: LD_ADDR_VAR 0 9
89830: PUSH
89831: LD_VAR 0 1
89835: PUSH
89836: LD_VAR 0 3
89840: PLUS
89841: ST_TO_ADDR
// max_y := y + r ;
89842: LD_ADDR_VAR 0 10
89846: PUSH
89847: LD_VAR 0 2
89851: PUSH
89852: LD_VAR 0 3
89856: PLUS
89857: ST_TO_ADDR
// for _x = min_x to max_x do
89858: LD_ADDR_VAR 0 5
89862: PUSH
89863: DOUBLE
89864: LD_VAR 0 8
89868: DEC
89869: ST_TO_ADDR
89870: LD_VAR 0 9
89874: PUSH
89875: FOR_TO
89876: IFFALSE 89977
// for _y = min_y to max_y do
89878: LD_ADDR_VAR 0 6
89882: PUSH
89883: DOUBLE
89884: LD_VAR 0 7
89888: DEC
89889: ST_TO_ADDR
89890: LD_VAR 0 10
89894: PUSH
89895: FOR_TO
89896: IFFALSE 89973
// begin if not ValidHex ( _x , _y ) then
89898: LD_VAR 0 5
89902: PPUSH
89903: LD_VAR 0 6
89907: PPUSH
89908: CALL_OW 488
89912: NOT
89913: IFFALSE 89917
// continue ;
89915: GO 89895
// if GetResourceTypeXY ( _x , _y ) then
89917: LD_VAR 0 5
89921: PPUSH
89922: LD_VAR 0 6
89926: PPUSH
89927: CALL_OW 283
89931: IFFALSE 89971
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
89933: LD_ADDR_VAR 0 4
89937: PUSH
89938: LD_VAR 0 4
89942: PPUSH
89943: LD_VAR 0 4
89947: PUSH
89948: LD_INT 1
89950: PLUS
89951: PPUSH
89952: LD_VAR 0 5
89956: PUSH
89957: LD_VAR 0 6
89961: PUSH
89962: EMPTY
89963: LIST
89964: LIST
89965: PPUSH
89966: CALL_OW 1
89970: ST_TO_ADDR
// end ;
89971: GO 89895
89973: POP
89974: POP
89975: GO 89875
89977: POP
89978: POP
// end ;
89979: LD_VAR 0 4
89983: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
89984: LD_INT 0
89986: PPUSH
89987: PPUSH
89988: PPUSH
89989: PPUSH
89990: PPUSH
89991: PPUSH
89992: PPUSH
89993: PPUSH
// if not units then
89994: LD_VAR 0 1
89998: NOT
89999: IFFALSE 90003
// exit ;
90001: GO 90527
// result := UnitFilter ( units , [ f_ok ] ) ;
90003: LD_ADDR_VAR 0 3
90007: PUSH
90008: LD_VAR 0 1
90012: PPUSH
90013: LD_INT 50
90015: PUSH
90016: EMPTY
90017: LIST
90018: PPUSH
90019: CALL_OW 72
90023: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
90024: LD_ADDR_VAR 0 8
90028: PUSH
90029: LD_VAR 0 1
90033: PUSH
90034: LD_INT 1
90036: ARRAY
90037: PPUSH
90038: CALL_OW 255
90042: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
90043: LD_ADDR_VAR 0 10
90047: PUSH
90048: LD_INT 29
90050: PUSH
90051: LD_INT 91
90053: PUSH
90054: LD_INT 49
90056: PUSH
90057: EMPTY
90058: LIST
90059: LIST
90060: LIST
90061: ST_TO_ADDR
// if not result then
90062: LD_VAR 0 3
90066: NOT
90067: IFFALSE 90071
// exit ;
90069: GO 90527
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
90071: LD_ADDR_VAR 0 5
90075: PUSH
90076: LD_INT 81
90078: PUSH
90079: LD_VAR 0 8
90083: PUSH
90084: EMPTY
90085: LIST
90086: LIST
90087: PPUSH
90088: CALL_OW 69
90092: ST_TO_ADDR
// for i in result do
90093: LD_ADDR_VAR 0 4
90097: PUSH
90098: LD_VAR 0 3
90102: PUSH
90103: FOR_IN
90104: IFFALSE 90525
// begin tag := GetTag ( i ) + 1 ;
90106: LD_ADDR_VAR 0 9
90110: PUSH
90111: LD_VAR 0 4
90115: PPUSH
90116: CALL_OW 110
90120: PUSH
90121: LD_INT 1
90123: PLUS
90124: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
90125: LD_ADDR_VAR 0 7
90129: PUSH
90130: LD_VAR 0 4
90134: PPUSH
90135: CALL_OW 250
90139: PPUSH
90140: LD_VAR 0 4
90144: PPUSH
90145: CALL_OW 251
90149: PPUSH
90150: LD_INT 6
90152: PPUSH
90153: CALL 89726 0 3
90157: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
90158: LD_VAR 0 4
90162: PPUSH
90163: CALL_OW 247
90167: PUSH
90168: LD_INT 2
90170: EQUAL
90171: PUSH
90172: LD_VAR 0 7
90176: AND
90177: PUSH
90178: LD_VAR 0 4
90182: PPUSH
90183: CALL_OW 264
90187: PUSH
90188: LD_VAR 0 10
90192: IN
90193: NOT
90194: AND
90195: IFFALSE 90234
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
90197: LD_VAR 0 4
90201: PPUSH
90202: LD_VAR 0 7
90206: PUSH
90207: LD_INT 1
90209: ARRAY
90210: PUSH
90211: LD_INT 1
90213: ARRAY
90214: PPUSH
90215: LD_VAR 0 7
90219: PUSH
90220: LD_INT 1
90222: ARRAY
90223: PUSH
90224: LD_INT 2
90226: ARRAY
90227: PPUSH
90228: CALL_OW 116
90232: GO 90523
// if path > tag then
90234: LD_VAR 0 2
90238: PUSH
90239: LD_VAR 0 9
90243: GREATER
90244: IFFALSE 90452
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
90246: LD_ADDR_VAR 0 6
90250: PUSH
90251: LD_VAR 0 5
90255: PPUSH
90256: LD_INT 91
90258: PUSH
90259: LD_VAR 0 4
90263: PUSH
90264: LD_INT 8
90266: PUSH
90267: EMPTY
90268: LIST
90269: LIST
90270: LIST
90271: PPUSH
90272: CALL_OW 72
90276: ST_TO_ADDR
// if nearEnemy then
90277: LD_VAR 0 6
90281: IFFALSE 90350
// begin if GetWeapon ( i ) = ru_time_lapser then
90283: LD_VAR 0 4
90287: PPUSH
90288: CALL_OW 264
90292: PUSH
90293: LD_INT 49
90295: EQUAL
90296: IFFALSE 90324
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
90298: LD_VAR 0 4
90302: PPUSH
90303: LD_VAR 0 6
90307: PPUSH
90308: LD_VAR 0 4
90312: PPUSH
90313: CALL_OW 74
90317: PPUSH
90318: CALL_OW 112
90322: GO 90348
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
90324: LD_VAR 0 4
90328: PPUSH
90329: LD_VAR 0 6
90333: PPUSH
90334: LD_VAR 0 4
90338: PPUSH
90339: CALL_OW 74
90343: PPUSH
90344: CALL_OW 115
// end else
90348: GO 90450
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
90350: LD_VAR 0 4
90354: PPUSH
90355: LD_VAR 0 2
90359: PUSH
90360: LD_VAR 0 9
90364: ARRAY
90365: PUSH
90366: LD_INT 1
90368: ARRAY
90369: PPUSH
90370: LD_VAR 0 2
90374: PUSH
90375: LD_VAR 0 9
90379: ARRAY
90380: PUSH
90381: LD_INT 2
90383: ARRAY
90384: PPUSH
90385: CALL_OW 297
90389: PUSH
90390: LD_INT 6
90392: GREATER
90393: IFFALSE 90436
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
90395: LD_VAR 0 4
90399: PPUSH
90400: LD_VAR 0 2
90404: PUSH
90405: LD_VAR 0 9
90409: ARRAY
90410: PUSH
90411: LD_INT 1
90413: ARRAY
90414: PPUSH
90415: LD_VAR 0 2
90419: PUSH
90420: LD_VAR 0 9
90424: ARRAY
90425: PUSH
90426: LD_INT 2
90428: ARRAY
90429: PPUSH
90430: CALL_OW 114
90434: GO 90450
// SetTag ( i , tag ) ;
90436: LD_VAR 0 4
90440: PPUSH
90441: LD_VAR 0 9
90445: PPUSH
90446: CALL_OW 109
// end else
90450: GO 90523
// if enemy then
90452: LD_VAR 0 5
90456: IFFALSE 90523
// begin if GetWeapon ( i ) = ru_time_lapser then
90458: LD_VAR 0 4
90462: PPUSH
90463: CALL_OW 264
90467: PUSH
90468: LD_INT 49
90470: EQUAL
90471: IFFALSE 90499
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
90473: LD_VAR 0 4
90477: PPUSH
90478: LD_VAR 0 5
90482: PPUSH
90483: LD_VAR 0 4
90487: PPUSH
90488: CALL_OW 74
90492: PPUSH
90493: CALL_OW 112
90497: GO 90523
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
90499: LD_VAR 0 4
90503: PPUSH
90504: LD_VAR 0 5
90508: PPUSH
90509: LD_VAR 0 4
90513: PPUSH
90514: CALL_OW 74
90518: PPUSH
90519: CALL_OW 115
// end ; end ;
90523: GO 90103
90525: POP
90526: POP
// end ;
90527: LD_VAR 0 3
90531: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
90532: LD_INT 0
90534: PPUSH
90535: PPUSH
90536: PPUSH
// if not unit or IsInUnit ( unit ) then
90537: LD_VAR 0 1
90541: NOT
90542: PUSH
90543: LD_VAR 0 1
90547: PPUSH
90548: CALL_OW 310
90552: OR
90553: IFFALSE 90557
// exit ;
90555: GO 90648
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
90557: LD_ADDR_VAR 0 4
90561: PUSH
90562: LD_VAR 0 1
90566: PPUSH
90567: CALL_OW 250
90571: PPUSH
90572: LD_VAR 0 2
90576: PPUSH
90577: LD_INT 1
90579: PPUSH
90580: CALL_OW 272
90584: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
90585: LD_ADDR_VAR 0 5
90589: PUSH
90590: LD_VAR 0 1
90594: PPUSH
90595: CALL_OW 251
90599: PPUSH
90600: LD_VAR 0 2
90604: PPUSH
90605: LD_INT 1
90607: PPUSH
90608: CALL_OW 273
90612: ST_TO_ADDR
// if ValidHex ( x , y ) then
90613: LD_VAR 0 4
90617: PPUSH
90618: LD_VAR 0 5
90622: PPUSH
90623: CALL_OW 488
90627: IFFALSE 90648
// ComTurnXY ( unit , x , y ) ;
90629: LD_VAR 0 1
90633: PPUSH
90634: LD_VAR 0 4
90638: PPUSH
90639: LD_VAR 0 5
90643: PPUSH
90644: CALL_OW 118
// end ;
90648: LD_VAR 0 3
90652: RET
// export function SeeUnits ( side , units ) ; var i ; begin
90653: LD_INT 0
90655: PPUSH
90656: PPUSH
// result := false ;
90657: LD_ADDR_VAR 0 3
90661: PUSH
90662: LD_INT 0
90664: ST_TO_ADDR
// if not units then
90665: LD_VAR 0 2
90669: NOT
90670: IFFALSE 90674
// exit ;
90672: GO 90719
// for i in units do
90674: LD_ADDR_VAR 0 4
90678: PUSH
90679: LD_VAR 0 2
90683: PUSH
90684: FOR_IN
90685: IFFALSE 90717
// if See ( side , i ) then
90687: LD_VAR 0 1
90691: PPUSH
90692: LD_VAR 0 4
90696: PPUSH
90697: CALL_OW 292
90701: IFFALSE 90715
// begin result := true ;
90703: LD_ADDR_VAR 0 3
90707: PUSH
90708: LD_INT 1
90710: ST_TO_ADDR
// exit ;
90711: POP
90712: POP
90713: GO 90719
// end ;
90715: GO 90684
90717: POP
90718: POP
// end ;
90719: LD_VAR 0 3
90723: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
90724: LD_INT 0
90726: PPUSH
90727: PPUSH
90728: PPUSH
90729: PPUSH
// if not unit or not points then
90730: LD_VAR 0 1
90734: NOT
90735: PUSH
90736: LD_VAR 0 2
90740: NOT
90741: OR
90742: IFFALSE 90746
// exit ;
90744: GO 90836
// dist := 99999 ;
90746: LD_ADDR_VAR 0 5
90750: PUSH
90751: LD_INT 99999
90753: ST_TO_ADDR
// for i in points do
90754: LD_ADDR_VAR 0 4
90758: PUSH
90759: LD_VAR 0 2
90763: PUSH
90764: FOR_IN
90765: IFFALSE 90834
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
90767: LD_ADDR_VAR 0 6
90771: PUSH
90772: LD_VAR 0 1
90776: PPUSH
90777: LD_VAR 0 4
90781: PUSH
90782: LD_INT 1
90784: ARRAY
90785: PPUSH
90786: LD_VAR 0 4
90790: PUSH
90791: LD_INT 2
90793: ARRAY
90794: PPUSH
90795: CALL_OW 297
90799: ST_TO_ADDR
// if tmpDist < dist then
90800: LD_VAR 0 6
90804: PUSH
90805: LD_VAR 0 5
90809: LESS
90810: IFFALSE 90832
// begin result := i ;
90812: LD_ADDR_VAR 0 3
90816: PUSH
90817: LD_VAR 0 4
90821: ST_TO_ADDR
// dist := tmpDist ;
90822: LD_ADDR_VAR 0 5
90826: PUSH
90827: LD_VAR 0 6
90831: ST_TO_ADDR
// end ; end ;
90832: GO 90764
90834: POP
90835: POP
// end ;
90836: LD_VAR 0 3
90840: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
90841: LD_INT 0
90843: PPUSH
// uc_side := side ;
90844: LD_ADDR_OWVAR 20
90848: PUSH
90849: LD_VAR 0 1
90853: ST_TO_ADDR
// uc_nation := 3 ;
90854: LD_ADDR_OWVAR 21
90858: PUSH
90859: LD_INT 3
90861: ST_TO_ADDR
// vc_chassis := 25 ;
90862: LD_ADDR_OWVAR 37
90866: PUSH
90867: LD_INT 25
90869: ST_TO_ADDR
// vc_engine := engine_siberite ;
90870: LD_ADDR_OWVAR 39
90874: PUSH
90875: LD_INT 3
90877: ST_TO_ADDR
// vc_control := control_computer ;
90878: LD_ADDR_OWVAR 38
90882: PUSH
90883: LD_INT 3
90885: ST_TO_ADDR
// vc_weapon := 59 ;
90886: LD_ADDR_OWVAR 40
90890: PUSH
90891: LD_INT 59
90893: ST_TO_ADDR
// result := CreateVehicle ;
90894: LD_ADDR_VAR 0 5
90898: PUSH
90899: CALL_OW 45
90903: ST_TO_ADDR
// SetDir ( result , d ) ;
90904: LD_VAR 0 5
90908: PPUSH
90909: LD_VAR 0 4
90913: PPUSH
90914: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
90918: LD_VAR 0 5
90922: PPUSH
90923: LD_VAR 0 2
90927: PPUSH
90928: LD_VAR 0 3
90932: PPUSH
90933: LD_INT 0
90935: PPUSH
90936: CALL_OW 48
// end ;
90940: LD_VAR 0 5
90944: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
90945: LD_INT 0
90947: PPUSH
90948: PPUSH
90949: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
90950: LD_ADDR_VAR 0 2
90954: PUSH
90955: LD_INT 0
90957: PUSH
90958: LD_INT 0
90960: PUSH
90961: LD_INT 0
90963: PUSH
90964: LD_INT 0
90966: PUSH
90967: EMPTY
90968: LIST
90969: LIST
90970: LIST
90971: LIST
90972: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
90973: LD_VAR 0 1
90977: NOT
90978: PUSH
90979: LD_VAR 0 1
90983: PPUSH
90984: CALL_OW 264
90988: PUSH
90989: LD_INT 12
90991: PUSH
90992: LD_INT 51
90994: PUSH
90995: LD_INT 32
90997: PUSH
90998: LD_INT 89
91000: PUSH
91001: EMPTY
91002: LIST
91003: LIST
91004: LIST
91005: LIST
91006: IN
91007: NOT
91008: OR
91009: IFFALSE 91013
// exit ;
91011: GO 91111
// for i := 1 to 3 do
91013: LD_ADDR_VAR 0 3
91017: PUSH
91018: DOUBLE
91019: LD_INT 1
91021: DEC
91022: ST_TO_ADDR
91023: LD_INT 3
91025: PUSH
91026: FOR_TO
91027: IFFALSE 91109
// begin tmp := GetCargo ( cargo , i ) ;
91029: LD_ADDR_VAR 0 4
91033: PUSH
91034: LD_VAR 0 1
91038: PPUSH
91039: LD_VAR 0 3
91043: PPUSH
91044: CALL_OW 289
91048: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
91049: LD_ADDR_VAR 0 2
91053: PUSH
91054: LD_VAR 0 2
91058: PPUSH
91059: LD_VAR 0 3
91063: PPUSH
91064: LD_VAR 0 4
91068: PPUSH
91069: CALL_OW 1
91073: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
91074: LD_ADDR_VAR 0 2
91078: PUSH
91079: LD_VAR 0 2
91083: PPUSH
91084: LD_INT 4
91086: PPUSH
91087: LD_VAR 0 2
91091: PUSH
91092: LD_INT 4
91094: ARRAY
91095: PUSH
91096: LD_VAR 0 4
91100: PLUS
91101: PPUSH
91102: CALL_OW 1
91106: ST_TO_ADDR
// end ;
91107: GO 91026
91109: POP
91110: POP
// end ;
91111: LD_VAR 0 2
91115: RET
// export function Length ( array ) ; begin
91116: LD_INT 0
91118: PPUSH
// result := array + 0 ;
91119: LD_ADDR_VAR 0 2
91123: PUSH
91124: LD_VAR 0 1
91128: PUSH
91129: LD_INT 0
91131: PLUS
91132: ST_TO_ADDR
// end ;
91133: LD_VAR 0 2
91137: RET
// export function PrepareArray ( array ) ; begin
91138: LD_INT 0
91140: PPUSH
// result := array diff 0 ;
91141: LD_ADDR_VAR 0 2
91145: PUSH
91146: LD_VAR 0 1
91150: PUSH
91151: LD_INT 0
91153: DIFF
91154: ST_TO_ADDR
// if not result [ 1 ] then
91155: LD_VAR 0 2
91159: PUSH
91160: LD_INT 1
91162: ARRAY
91163: NOT
91164: IFFALSE 91184
// result := Delete ( result , 1 ) ;
91166: LD_ADDR_VAR 0 2
91170: PUSH
91171: LD_VAR 0 2
91175: PPUSH
91176: LD_INT 1
91178: PPUSH
91179: CALL_OW 3
91183: ST_TO_ADDR
// end ;
91184: LD_VAR 0 2
91188: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
91189: LD_INT 0
91191: PPUSH
91192: PPUSH
91193: PPUSH
91194: PPUSH
// sibRocketRange := 25 ;
91195: LD_ADDR_VAR 0 6
91199: PUSH
91200: LD_INT 25
91202: ST_TO_ADDR
// result := false ;
91203: LD_ADDR_VAR 0 4
91207: PUSH
91208: LD_INT 0
91210: ST_TO_ADDR
// for i := 0 to 5 do
91211: LD_ADDR_VAR 0 5
91215: PUSH
91216: DOUBLE
91217: LD_INT 0
91219: DEC
91220: ST_TO_ADDR
91221: LD_INT 5
91223: PUSH
91224: FOR_TO
91225: IFFALSE 91292
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
91227: LD_VAR 0 1
91231: PPUSH
91232: LD_VAR 0 5
91236: PPUSH
91237: LD_VAR 0 6
91241: PPUSH
91242: CALL_OW 272
91246: PPUSH
91247: LD_VAR 0 2
91251: PPUSH
91252: LD_VAR 0 5
91256: PPUSH
91257: LD_VAR 0 6
91261: PPUSH
91262: CALL_OW 273
91266: PPUSH
91267: LD_VAR 0 3
91271: PPUSH
91272: CALL_OW 309
91276: IFFALSE 91290
// begin result := true ;
91278: LD_ADDR_VAR 0 4
91282: PUSH
91283: LD_INT 1
91285: ST_TO_ADDR
// exit ;
91286: POP
91287: POP
91288: GO 91294
// end ;
91290: GO 91224
91292: POP
91293: POP
// end ; end_of_file
91294: LD_VAR 0 4
91298: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
91299: LD_VAR 0 1
91303: PUSH
91304: LD_INT 200
91306: DOUBLE
91307: GREATEREQUAL
91308: IFFALSE 91316
91310: LD_INT 299
91312: DOUBLE
91313: LESSEQUAL
91314: IFTRUE 91318
91316: GO 91350
91318: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
91319: LD_VAR 0 1
91323: PPUSH
91324: LD_VAR 0 2
91328: PPUSH
91329: LD_VAR 0 3
91333: PPUSH
91334: LD_VAR 0 4
91338: PPUSH
91339: LD_VAR 0 5
91343: PPUSH
91344: CALL 46018 0 5
91348: GO 91427
91350: LD_INT 300
91352: DOUBLE
91353: GREATEREQUAL
91354: IFFALSE 91362
91356: LD_INT 399
91358: DOUBLE
91359: LESSEQUAL
91360: IFTRUE 91364
91362: GO 91426
91364: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
91365: LD_VAR 0 1
91369: PPUSH
91370: LD_VAR 0 2
91374: PPUSH
91375: LD_VAR 0 3
91379: PPUSH
91380: LD_VAR 0 4
91384: PPUSH
91385: LD_VAR 0 5
91389: PPUSH
91390: LD_VAR 0 6
91394: PPUSH
91395: LD_VAR 0 7
91399: PPUSH
91400: LD_VAR 0 8
91404: PPUSH
91405: LD_VAR 0 9
91409: PPUSH
91410: LD_VAR 0 10
91414: PPUSH
91415: LD_VAR 0 11
91419: PPUSH
91420: CALL 42351 0 11
91424: GO 91427
91426: POP
// end ;
91427: PPOPN 11
91429: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
91430: LD_VAR 0 1
91434: PPUSH
91435: LD_VAR 0 2
91439: PPUSH
91440: LD_VAR 0 3
91444: PPUSH
91445: LD_VAR 0 4
91449: PPUSH
91450: LD_VAR 0 5
91454: PPUSH
91455: CALL 45754 0 5
// end ; end_of_file
91459: PPOPN 5
91461: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
91462: LD_VAR 0 1
91466: PPUSH
91467: LD_VAR 0 2
91471: PPUSH
91472: LD_VAR 0 3
91476: PPUSH
91477: LD_VAR 0 4
91481: PPUSH
91482: LD_VAR 0 5
91486: PPUSH
91487: LD_VAR 0 6
91491: PPUSH
91492: CALL 30044 0 6
// end ;
91496: PPOPN 6
91498: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
91499: LD_INT 0
91501: PPUSH
// begin if not units then
91502: LD_VAR 0 1
91506: NOT
91507: IFFALSE 91511
// exit ;
91509: GO 91511
// end ;
91511: PPOPN 7
91513: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
91514: CALL 30015 0 0
// end ;
91518: PPOPN 1
91520: END
