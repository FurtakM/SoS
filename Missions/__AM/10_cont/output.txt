// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 61
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 65
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 66
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 63
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 53
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 52
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 56
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 59
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 60
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 62
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 57
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 58
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 64
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 54
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 55
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 67
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// CreateNature ;
 314: CALL 26791 0 0
// PrepareDifficulty ;
 318: CALL 11434 0 0
// PrepareJMMTeam ;
 322: CALL 1356 0 0
// PrepareCathyTeam ;
 326: CALL 2592 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 330: LD_INT 24
 332: PPUSH
 333: LD_INT 1
 335: PUSH
 336: LD_OWVAR 67
 340: PLUS
 341: PPUSH
 342: CALL 21294 0 2
// if Difficulty > 1 then
 346: LD_OWVAR 67
 350: PUSH
 351: LD_INT 1
 353: GREATER
 354: IFFALSE 368
// PlaceMines ( MineField2 , Difficulty ) ;
 356: LD_INT 25
 358: PPUSH
 359: LD_OWVAR 67
 363: PPUSH
 364: CALL 21294 0 2
// if Difficulty > 2 then
 368: LD_OWVAR 67
 372: PUSH
 373: LD_INT 2
 375: GREATER
 376: IFFALSE 390
// PlaceMines ( MineField3 , Difficulty ) ;
 378: LD_INT 26
 380: PPUSH
 381: LD_OWVAR 67
 385: PPUSH
 386: CALL 21294 0 2
// PrepareArabianCommander ;
 390: CALL 4074 0 0
// PrepareArabian ;
 394: CALL 4126 0 0
// BuildArabianBase ;
 398: CALL 14249 0 0
// TameApemans ;
 402: CALL 20099 0 0
// end ;
 406: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 407: LD_EXP 67
 411: PUSH
 412: LD_INT 1
 414: EQUAL
 415: IFFALSE 721
 417: GO 419
 419: DISABLE
 420: LD_INT 0
 422: PPUSH
// begin enable ;
 423: ENABLE
// fogoff ( true ) ;
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 431: LD_ADDR_VAR 0 1
 435: PUSH
 436: LD_INT 22
 438: PUSH
 439: LD_INT 1
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: LD_INT 21
 448: PUSH
 449: LD_INT 1
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: PPUSH
 460: CALL_OW 69
 464: PUSH
 465: FOR_IN
 466: IFFALSE 482
// SetLives ( i , 1000 ) ;
 468: LD_VAR 0 1
 472: PPUSH
 473: LD_INT 1000
 475: PPUSH
 476: CALL_OW 234
 480: GO 465
 482: POP
 483: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 484: LD_ADDR_VAR 0 1
 488: PUSH
 489: LD_INT 22
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 2
 501: PUSH
 502: LD_INT 30
 504: PUSH
 505: LD_INT 0
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: PUSH
 512: LD_INT 30
 514: PUSH
 515: LD_INT 1
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL_OW 69
 535: PUSH
 536: FOR_IN
 537: IFFALSE 561
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 539: LD_VAR 0 1
 543: PPUSH
 544: CALL_OW 274
 548: PPUSH
 549: LD_INT 1
 551: PPUSH
 552: LD_INT 9999
 554: PPUSH
 555: CALL_OW 277
 559: GO 536
 561: POP
 562: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 563: LD_ADDR_VAR 0 1
 567: PUSH
 568: LD_INT 22
 570: PUSH
 571: LD_INT 1
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 30
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 30
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PPUSH
 610: CALL_OW 69
 614: PUSH
 615: FOR_IN
 616: IFFALSE 640
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 618: LD_VAR 0 1
 622: PPUSH
 623: CALL_OW 274
 627: PPUSH
 628: LD_INT 2
 630: PPUSH
 631: LD_INT 9999
 633: PPUSH
 634: CALL_OW 277
 638: GO 615
 640: POP
 641: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 642: LD_ADDR_VAR 0 1
 646: PUSH
 647: LD_INT 22
 649: PUSH
 650: LD_INT 1
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: PUSH
 657: LD_INT 2
 659: PUSH
 660: LD_INT 30
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 30
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PPUSH
 689: CALL_OW 69
 693: PUSH
 694: FOR_IN
 695: IFFALSE 719
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 697: LD_VAR 0 1
 701: PPUSH
 702: CALL_OW 274
 706: PPUSH
 707: LD_INT 3
 709: PPUSH
 710: LD_INT 9999
 712: PPUSH
 713: CALL_OW 277
 717: GO 694
 719: POP
 720: POP
// end ;
 721: PPOPN 1
 723: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 724: LD_INT 25
 726: PUSH
 727: LD_INT 5
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PPUSH
 734: CALL_OW 69
 738: IFFALSE 751
 740: GO 742
 742: DISABLE
// snipersTrained := true ;
 743: LD_ADDR_EXP 62
 747: PUSH
 748: LD_INT 1
 750: ST_TO_ADDR
 751: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and spawnRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 2
 757: PPUSH
 758: CALL_OW 81
 762: PUSH
 763: LD_INT 1
 765: EQUAL
 766: PUSH
 767: LD_EXP 58
 771: AND
 772: PUSH
 773: LD_INT 22
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: PUSH
 788: LD_INT 0
 790: EQUAL
 791: AND
 792: IFFALSE 804
 794: GO 796
 796: DISABLE
// SetAchievement ( ACH_POWER ) ;
 797: LD_STRING ACH_POWER
 799: PPUSH
 800: CALL_OW 543
 804: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 805: LD_INT 22
 807: PUSH
 808: LD_INT 1
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PUSH
 815: LD_INT 30
 817: PUSH
 818: LD_INT 1
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PPUSH
 829: CALL_OW 69
 833: PUSH
 834: LD_INT 22
 836: PUSH
 837: LD_INT 1
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 30
 846: PUSH
 847: LD_INT 32
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: PPUSH
 858: CALL_OW 69
 862: AND
 863: PUSH
 864: LD_INT 22
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: PUSH
 874: LD_INT 30
 876: PUSH
 877: LD_INT 33
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PPUSH
 888: CALL_OW 69
 892: AND
 893: PUSH
 894: LD_INT 22
 896: PUSH
 897: LD_INT 1
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 30
 906: PUSH
 907: LD_INT 5
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: AND
 923: PUSH
 924: LD_INT 22
 926: PUSH
 927: LD_INT 1
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: LD_INT 30
 936: PUSH
 937: LD_INT 3
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PPUSH
 948: CALL_OW 69
 952: AND
 953: PUSH
 954: LD_INT 22
 956: PUSH
 957: LD_INT 1
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 30
 966: PUSH
 967: LD_INT 36
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PPUSH
 978: CALL_OW 69
 982: AND
 983: PUSH
 984: LD_INT 22
 986: PUSH
 987: LD_INT 1
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 30
 996: PUSH
 997: LD_INT 31
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PPUSH
1008: CALL_OW 69
1012: AND
1013: PUSH
1014: LD_INT 22
1016: PUSH
1017: LD_INT 1
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 30
1026: PUSH
1027: LD_INT 22
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: PPUSH
1038: CALL_OW 69
1042: AND
1043: PUSH
1044: LD_INT 22
1046: PUSH
1047: LD_INT 1
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: PUSH
1054: LD_INT 30
1056: PUSH
1057: LD_INT 20
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PPUSH
1068: CALL_OW 69
1072: AND
1073: PUSH
1074: LD_INT 22
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 30
1086: PUSH
1087: LD_INT 19
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PPUSH
1098: CALL_OW 69
1102: AND
1103: PUSH
1104: LD_INT 22
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 30
1116: PUSH
1117: LD_INT 16
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PPUSH
1128: CALL_OW 69
1132: AND
1133: PUSH
1134: LD_INT 22
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 30
1146: PUSH
1147: LD_INT 17
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: PPUSH
1158: CALL_OW 69
1162: AND
1163: PUSH
1164: LD_INT 22
1166: PUSH
1167: LD_INT 1
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 30
1176: PUSH
1177: LD_INT 21
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PPUSH
1188: CALL_OW 69
1192: AND
1193: PUSH
1194: LD_INT 22
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: PUSH
1204: LD_INT 30
1206: PUSH
1207: LD_INT 29
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: PPUSH
1218: CALL_OW 69
1222: AND
1223: PUSH
1224: LD_INT 22
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 30
1236: PUSH
1237: LD_INT 30
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PPUSH
1248: CALL_OW 69
1252: AND
1253: PUSH
1254: LD_INT 22
1256: PUSH
1257: LD_INT 1
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 30
1266: PUSH
1267: LD_INT 27
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PPUSH
1278: CALL_OW 69
1282: AND
1283: PUSH
1284: LD_INT 22
1286: PUSH
1287: LD_INT 1
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 30
1296: PUSH
1297: LD_INT 26
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PPUSH
1308: CALL_OW 69
1312: AND
1313: PUSH
1314: LD_INT 22
1316: PUSH
1317: LD_INT 1
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: PUSH
1324: LD_INT 30
1326: PUSH
1327: LD_INT 28
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PPUSH
1338: CALL_OW 69
1342: AND
1343: IFFALSE 1355
1345: GO 1347
1347: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1348: LD_STRING ACH_ARCH
1350: PPUSH
1351: CALL_OW 543
1355: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1356: LD_INT 0
1358: PPUSH
1359: PPUSH
1360: PPUSH
1361: PPUSH
1362: PPUSH
1363: PPUSH
// uc_side = 1 ;
1364: LD_ADDR_OWVAR 20
1368: PUSH
1369: LD_INT 1
1371: ST_TO_ADDR
// uc_nation = 1 ;
1372: LD_ADDR_OWVAR 21
1376: PUSH
1377: LD_INT 1
1379: ST_TO_ADDR
// count = 0 ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_INT 0
1387: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1388: LD_ADDR_EXP 1
1392: PUSH
1393: LD_STRING JMM
1395: PPUSH
1396: LD_INT 1
1398: PPUSH
1399: LD_STRING 10_
1401: PPUSH
1402: CALL 48813 0 3
1406: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1407: LD_ADDR_EXP 20
1411: PUSH
1412: LD_EXP 20
1416: PUSH
1417: LD_EXP 1
1421: ADD
1422: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1423: LD_ADDR_EXP 10
1427: PUSH
1428: LD_STRING Gary
1430: PPUSH
1431: LD_INT 1
1433: PPUSH
1434: LD_STRING 10_
1436: PPUSH
1437: CALL 48813 0 3
1441: ST_TO_ADDR
// if Gary then
1442: LD_EXP 10
1446: IFFALSE 1464
// JMMSquad = JMMSquad ^ Gary ;
1448: LD_ADDR_EXP 20
1452: PUSH
1453: LD_EXP 20
1457: PUSH
1458: LD_EXP 10
1462: ADD
1463: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1464: LD_ADDR_EXP 5
1468: PUSH
1469: LD_STRING Cyrus
1471: PPUSH
1472: LD_INT 1
1474: PPUSH
1475: LD_STRING 10_
1477: PPUSH
1478: CALL 48813 0 3
1482: ST_TO_ADDR
// if Cyrus then
1483: LD_EXP 5
1487: IFFALSE 1505
// JMMSquad = JMMSquad ^ Cyrus ;
1489: LD_ADDR_EXP 20
1493: PUSH
1494: LD_EXP 20
1498: PUSH
1499: LD_EXP 5
1503: ADD
1504: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1505: LD_ADDR_EXP 4
1509: PUSH
1510: LD_STRING Bobby
1512: PPUSH
1513: LD_INT 1
1515: PPUSH
1516: LD_STRING 10_
1518: PPUSH
1519: CALL 48813 0 3
1523: ST_TO_ADDR
// if Bobby then
1524: LD_EXP 4
1528: IFFALSE 1546
// JMMSquad = JMMSquad ^ Bobby ;
1530: LD_ADDR_EXP 20
1534: PUSH
1535: LD_EXP 20
1539: PUSH
1540: LD_EXP 4
1544: ADD
1545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1546: LD_ADDR_EXP 6
1550: PUSH
1551: LD_STRING Lisa
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: LD_STRING 10_
1559: PPUSH
1560: CALL 48813 0 3
1564: ST_TO_ADDR
// if Lisa then
1565: LD_EXP 6
1569: IFFALSE 1587
// JMMSquad = JMMSquad ^ Lisa ;
1571: LD_ADDR_EXP 20
1575: PUSH
1576: LD_EXP 20
1580: PUSH
1581: LD_EXP 6
1585: ADD
1586: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1587: LD_ADDR_EXP 2
1591: PUSH
1592: LD_STRING Brown
1594: PPUSH
1595: LD_INT 1
1597: PPUSH
1598: LD_STRING 10_
1600: PPUSH
1601: CALL 48813 0 3
1605: ST_TO_ADDR
// if Brown then
1606: LD_EXP 2
1610: IFFALSE 1628
// JMMSquad = JMMSquad ^ Brown ;
1612: LD_ADDR_EXP 20
1616: PUSH
1617: LD_EXP 20
1621: PUSH
1622: LD_EXP 2
1626: ADD
1627: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1628: LD_ADDR_EXP 3
1632: PUSH
1633: LD_STRING Donaldson
1635: PPUSH
1636: LD_INT 1
1638: PPUSH
1639: LD_STRING 10_
1641: PPUSH
1642: CALL 48813 0 3
1646: ST_TO_ADDR
// if Donaldson then
1647: LD_EXP 3
1651: IFFALSE 1669
// JMMSquad = JMMSquad ^ Donaldson ;
1653: LD_ADDR_EXP 20
1657: PUSH
1658: LD_EXP 20
1662: PUSH
1663: LD_EXP 3
1667: ADD
1668: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1669: LD_ADDR_EXP 7
1673: PUSH
1674: LD_STRING Frank
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: LD_STRING 10_
1682: PPUSH
1683: CALL 48813 0 3
1687: ST_TO_ADDR
// if Frank then
1688: LD_EXP 7
1692: IFFALSE 1710
// JMMSquad = JMMSquad ^ Frank ;
1694: LD_ADDR_EXP 20
1698: PUSH
1699: LD_EXP 20
1703: PUSH
1704: LD_EXP 7
1708: ADD
1709: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1710: LD_ADDR_EXP 9
1714: PUSH
1715: LD_STRING Houten
1717: PPUSH
1718: LD_INT 1
1720: PPUSH
1721: LD_STRING 10_
1723: PPUSH
1724: CALL 48813 0 3
1728: ST_TO_ADDR
// if Houten then
1729: LD_EXP 9
1733: IFFALSE 1751
// JMMSquad = JMMSquad ^ Houten ;
1735: LD_ADDR_EXP 20
1739: PUSH
1740: LD_EXP 20
1744: PUSH
1745: LD_EXP 9
1749: ADD
1750: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1751: LD_ADDR_EXP 21
1755: PUSH
1756: LD_STRING OthersIn10
1758: PPUSH
1759: CALL_OW 31
1763: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1764: LD_ADDR_EXP 24
1768: PUSH
1769: LD_STRING Powell
1771: PPUSH
1772: LD_INT 0
1774: PPUSH
1775: LD_STRING 
1777: PPUSH
1778: CALL 48813 0 3
1782: ST_TO_ADDR
// for i in JMMSquad do
1783: LD_ADDR_VAR 0 2
1787: PUSH
1788: LD_EXP 20
1792: PUSH
1793: FOR_IN
1794: IFFALSE 2074
// begin if count < 3 then
1796: LD_VAR 0 6
1800: PUSH
1801: LD_INT 3
1803: LESS
1804: IFFALSE 1921
// begin vc_engine = 1 ;
1806: LD_ADDR_OWVAR 39
1810: PUSH
1811: LD_INT 1
1813: ST_TO_ADDR
// vc_control = 1 ;
1814: LD_ADDR_OWVAR 38
1818: PUSH
1819: LD_INT 1
1821: ST_TO_ADDR
// vc_weapon = 12 ;
1822: LD_ADDR_OWVAR 40
1826: PUSH
1827: LD_INT 12
1829: ST_TO_ADDR
// vc_chassis = 3 ;
1830: LD_ADDR_OWVAR 37
1834: PUSH
1835: LD_INT 3
1837: ST_TO_ADDR
// veh = CreateVehicle ;
1838: LD_ADDR_VAR 0 4
1842: PUSH
1843: CALL_OW 45
1847: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1848: LD_VAR 0 4
1852: PPUSH
1853: LD_INT 1
1855: PPUSH
1856: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1860: LD_VAR 0 4
1864: PPUSH
1865: LD_INT 2
1867: PPUSH
1868: LD_INT 0
1870: PPUSH
1871: CALL_OW 49
// if count mod 2 = 0 then
1875: LD_VAR 0 6
1879: PUSH
1880: LD_INT 2
1882: MOD
1883: PUSH
1884: LD_INT 0
1886: EQUAL
1887: IFFALSE 1906
// AddCargo ( veh , 1 , 100 ) else
1889: LD_VAR 0 4
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: LD_INT 100
1899: PPUSH
1900: CALL_OW 291
1904: GO 1921
// AddCargo ( veh , 3 , 100 ) end ;
1906: LD_VAR 0 4
1910: PPUSH
1911: LD_INT 3
1913: PPUSH
1914: LD_INT 100
1916: PPUSH
1917: CALL_OW 291
// if count >= 3 then
1921: LD_VAR 0 6
1925: PUSH
1926: LD_INT 3
1928: GREATEREQUAL
1929: IFFALSE 2044
// begin vc_engine = 1 ;
1931: LD_ADDR_OWVAR 39
1935: PUSH
1936: LD_INT 1
1938: ST_TO_ADDR
// vc_control = 1 ;
1939: LD_ADDR_OWVAR 38
1943: PUSH
1944: LD_INT 1
1946: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 3
1954: PUSH
1955: LD_INT 4
1957: PUSH
1958: LD_INT 5
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 1
1968: PPUSH
1969: LD_INT 3
1971: PPUSH
1972: CALL_OW 12
1976: ARRAY
1977: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1978: LD_ADDR_OWVAR 37
1982: PUSH
1983: LD_INT 2
1985: PUSH
1986: LD_INT 3
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: LD_VAR 0 2
1997: PUSH
1998: LD_INT 2
2000: MOD
2001: PUSH
2002: LD_INT 1
2004: PLUS
2005: ARRAY
2006: ST_TO_ADDR
// veh = CreateVehicle ;
2007: LD_ADDR_VAR 0 4
2011: PUSH
2012: CALL_OW 45
2016: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2017: LD_VAR 0 4
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2029: LD_VAR 0 4
2033: PPUSH
2034: LD_INT 2
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ; count = count + 1 ;
2044: LD_ADDR_VAR 0 6
2048: PUSH
2049: LD_VAR 0 6
2053: PUSH
2054: LD_INT 1
2056: PLUS
2057: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2058: LD_VAR 0 2
2062: PPUSH
2063: LD_VAR 0 4
2067: PPUSH
2068: CALL_OW 52
// end ;
2072: GO 1793
2074: POP
2075: POP
// for i := 1 to others10 do
2076: LD_ADDR_VAR 0 2
2080: PUSH
2081: DOUBLE
2082: LD_INT 1
2084: DEC
2085: ST_TO_ADDR
2086: LD_EXP 21
2090: PUSH
2091: FOR_TO
2092: IFFALSE 2323
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 5
2101: PUSH
2102: LD_INT 4
2104: PUSH
2105: LD_INT 3
2107: PUSH
2108: LD_INT 3
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: PUSH
2117: LD_OWVAR 67
2121: ARRAY
2122: LESS
2123: IFFALSE 2276
// begin vc_engine = 1 ;
2125: LD_ADDR_OWVAR 39
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// vc_control = 1 ;
2133: LD_ADDR_OWVAR 38
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2141: LD_ADDR_OWVAR 40
2145: PUSH
2146: LD_INT 3
2148: PUSH
2149: LD_INT 4
2151: PUSH
2152: LD_INT 5
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: LIST
2159: PUSH
2160: LD_INT 1
2162: PPUSH
2163: LD_INT 3
2165: PPUSH
2166: CALL_OW 12
2170: ARRAY
2171: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2172: LD_ADDR_OWVAR 37
2176: PUSH
2177: LD_INT 2
2179: PUSH
2180: LD_INT 3
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: PUSH
2187: LD_VAR 0 2
2191: PUSH
2192: LD_INT 2
2194: MOD
2195: PUSH
2196: LD_INT 1
2198: PLUS
2199: ARRAY
2200: ST_TO_ADDR
// veh = CreateVehicle ;
2201: LD_ADDR_VAR 0 4
2205: PUSH
2206: CALL_OW 45
2210: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2211: LD_VAR 0 4
2215: PPUSH
2216: LD_INT 1
2218: PPUSH
2219: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2223: LD_VAR 0 4
2227: PPUSH
2228: LD_INT 2
2230: PPUSH
2231: LD_INT 0
2233: PPUSH
2234: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2238: LD_ADDR_EXP 28
2242: PUSH
2243: LD_EXP 28
2247: PUSH
2248: LD_VAR 0 4
2252: ADD
2253: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2254: LD_EXP 21
2258: PUSH
2259: LD_VAR 0 2
2263: ARRAY
2264: PPUSH
2265: LD_VAR 0 4
2269: PPUSH
2270: CALL_OW 52
// end else
2274: GO 2321
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2276: LD_EXP 21
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: PPUSH
2287: LD_INT 106
2289: PPUSH
2290: LD_INT 33
2292: PPUSH
2293: LD_INT 6
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2303: LD_EXP 21
2307: PUSH
2308: LD_VAR 0 2
2312: ARRAY
2313: PPUSH
2314: LD_INT 4
2316: PPUSH
2317: CALL_OW 235
// end ; end ;
2321: GO 2091
2323: POP
2324: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2325: LD_INT 22
2327: PUSH
2328: LD_INT 1
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: PUSH
2335: LD_INT 21
2337: PUSH
2338: LD_INT 1
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PPUSH
2349: CALL_OW 69
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: CALL_OW 336
// end ;
2361: LD_VAR 0 1
2365: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2366: LD_INT 0
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
// uc_side = 1 ;
2373: LD_ADDR_OWVAR 20
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// uc_nation = 1 ;
2381: LD_ADDR_OWVAR 21
2385: PUSH
2386: LD_INT 1
2388: ST_TO_ADDR
// for i := 1 to 10 do
2389: LD_ADDR_VAR 0 2
2393: PUSH
2394: DOUBLE
2395: LD_INT 1
2397: DEC
2398: ST_TO_ADDR
2399: LD_INT 10
2401: PUSH
2402: FOR_TO
2403: IFFALSE 2585
// begin vc_engine = 1 ;
2405: LD_ADDR_OWVAR 39
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// vc_control = 1 ;
2413: LD_ADDR_OWVAR 38
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2421: LD_ADDR_OWVAR 40
2425: PUSH
2426: LD_INT 3
2428: PUSH
2429: LD_INT 4
2431: PUSH
2432: LD_INT 5
2434: PUSH
2435: LD_INT 12
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: PUSH
2444: LD_INT 1
2446: PPUSH
2447: LD_INT 4
2449: PPUSH
2450: CALL_OW 12
2454: ARRAY
2455: ST_TO_ADDR
// vc_chassis = 3 ;
2456: LD_ADDR_OWVAR 37
2460: PUSH
2461: LD_INT 3
2463: ST_TO_ADDR
// veh = CreateVehicle ;
2464: LD_ADDR_VAR 0 3
2468: PUSH
2469: CALL_OW 45
2473: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2474: LD_VAR 0 3
2478: PPUSH
2479: LD_INT 1
2481: PPUSH
2482: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2486: LD_VAR 0 3
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: LD_INT 0
2496: PPUSH
2497: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2501: LD_ADDR_EXP 28
2505: PUSH
2506: LD_EXP 28
2510: PUSH
2511: LD_VAR 0 3
2515: ADD
2516: ST_TO_ADDR
// if vc_weapon = 12 then
2517: LD_OWVAR 40
2521: PUSH
2522: LD_INT 12
2524: EQUAL
2525: IFFALSE 2583
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2527: LD_ADDR_VAR 0 4
2531: PUSH
2532: LD_INT 5
2534: PPUSH
2535: LD_INT 10
2537: PPUSH
2538: CALL_OW 12
2542: PUSH
2543: LD_INT 10
2545: MUL
2546: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2547: LD_VAR 0 3
2551: PPUSH
2552: LD_INT 1
2554: PUSH
2555: LD_INT 3
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 1
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: CALL_OW 12
2572: ARRAY
2573: PPUSH
2574: LD_VAR 0 4
2578: PPUSH
2579: CALL_OW 291
// end ; end ;
2583: GO 2402
2585: POP
2586: POP
// end ;
2587: LD_VAR 0 1
2591: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2592: LD_INT 0
2594: PPUSH
2595: PPUSH
2596: PPUSH
// uc_side = 4 ;
2597: LD_ADDR_OWVAR 20
2601: PUSH
2602: LD_INT 4
2604: ST_TO_ADDR
// uc_nation = 1 ;
2605: LD_ADDR_OWVAR 21
2609: PUSH
2610: LD_INT 1
2612: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2613: LD_ADDR_EXP 11
2617: PUSH
2618: LD_STRING Simms
2620: PPUSH
2621: LD_INT 0
2623: PPUSH
2624: LD_STRING 
2626: PPUSH
2627: CALL 48813 0 3
2631: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2632: LD_ADDR_EXP 12
2636: PUSH
2637: LD_STRING Denis
2639: PPUSH
2640: LD_INT 1
2642: PPUSH
2643: LD_STRING 08_
2645: PPUSH
2646: CALL 48813 0 3
2650: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2651: LD_ADDR_EXP 13
2655: PUSH
2656: LD_STRING Joan
2658: PPUSH
2659: LD_INT 1
2661: PPUSH
2662: LD_STRING 08_
2664: PPUSH
2665: CALL 48813 0 3
2669: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2670: LD_STRING 08_Khatam
2672: PPUSH
2673: CALL_OW 28
2677: IFFALSE 2700
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2679: LD_ADDR_EXP 14
2683: PUSH
2684: LD_STRING Khatam
2686: PPUSH
2687: LD_INT 1
2689: PPUSH
2690: LD_STRING 08_
2692: PPUSH
2693: CALL 48813 0 3
2697: ST_TO_ADDR
2698: GO 2728
// if TestCharacters ( 03_Khatam ) then
2700: LD_STRING 03_Khatam
2702: PPUSH
2703: CALL_OW 28
2707: IFFALSE 2728
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2709: LD_ADDR_EXP 14
2713: PUSH
2714: LD_STRING Khatam
2716: PPUSH
2717: LD_INT 1
2719: PPUSH
2720: LD_STRING 03_
2722: PPUSH
2723: CALL 48813 0 3
2727: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2728: LD_ADDR_EXP 15
2732: PUSH
2733: LD_STRING Gladstone
2735: PPUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_STRING 08_
2741: PPUSH
2742: CALL 48813 0 3
2746: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2747: LD_ADDR_EXP 17
2751: PUSH
2752: LD_STRING DeltaDoctor
2754: PPUSH
2755: LD_INT 1
2757: PPUSH
2758: LD_STRING 
2760: PPUSH
2761: CALL 48813 0 3
2765: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2766: LD_ADDR_EXP 7
2770: PUSH
2771: LD_STRING Frank
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: LD_STRING 08_
2779: PPUSH
2780: CALL 48813 0 3
2784: ST_TO_ADDR
// if Frank then
2785: LD_EXP 7
2789: IFFALSE 2812
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2791: LD_ADDR_EXP 8
2795: PUSH
2796: LD_STRING Yamoko
2798: PPUSH
2799: LD_INT 0
2801: PPUSH
2802: LD_STRING 
2804: PPUSH
2805: CALL 48813 0 3
2809: ST_TO_ADDR
2810: GO 2831
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2812: LD_ADDR_EXP 8
2816: PUSH
2817: LD_STRING Kikuchi
2819: PPUSH
2820: LD_INT 1
2822: PPUSH
2823: LD_STRING 08_
2825: PPUSH
2826: CALL 48813 0 3
2830: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2831: LD_ADDR_EXP 22
2835: PUSH
2836: LD_STRING 09_others
2838: PPUSH
2839: CALL_OW 31
2843: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2844: LD_ADDR_EXP 23
2848: PUSH
2849: LD_STRING 09_apes
2851: PPUSH
2852: CALL_OW 31
2856: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2857: LD_EXP 11
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_INT 0
2867: PPUSH
2868: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2872: LD_EXP 12
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 0
2882: PPUSH
2883: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2887: LD_EXP 13
2891: PPUSH
2892: LD_INT 1
2894: PPUSH
2895: LD_INT 0
2897: PPUSH
2898: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2902: LD_EXP 14
2906: PPUSH
2907: LD_INT 1
2909: PPUSH
2910: LD_INT 0
2912: PPUSH
2913: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2917: LD_EXP 15
2921: PPUSH
2922: LD_INT 1
2924: PPUSH
2925: LD_INT 0
2927: PPUSH
2928: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2932: LD_EXP 17
2936: PPUSH
2937: LD_INT 1
2939: PPUSH
2940: LD_INT 0
2942: PPUSH
2943: CALL_OW 49
// if Kikuchi then
2947: LD_EXP 8
2951: IFFALSE 2968
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2953: LD_EXP 8
2957: PPUSH
2958: LD_INT 1
2960: PPUSH
2961: LD_INT 0
2963: PPUSH
2964: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2968: LD_EXP 11
2972: PUSH
2973: LD_EXP 14
2977: PUSH
2978: LD_EXP 12
2982: PUSH
2983: LD_EXP 15
2987: PUSH
2988: LD_EXP 17
2992: PUSH
2993: LD_EXP 13
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: PPUSH
3006: LD_INT 4
3008: PPUSH
3009: CALL_OW 336
// if others09 > 2 then
3013: LD_EXP 22
3017: PUSH
3018: LD_INT 2
3020: GREATER
3021: IFFALSE 3102
// begin for i := 1 to 3 do
3023: LD_ADDR_VAR 0 2
3027: PUSH
3028: DOUBLE
3029: LD_INT 1
3031: DEC
3032: ST_TO_ADDR
3033: LD_INT 3
3035: PUSH
3036: FOR_TO
3037: IFFALSE 3098
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3039: LD_EXP 22
3043: PUSH
3044: LD_VAR 0 2
3048: ARRAY
3049: PPUSH
3050: LD_INT 1
3052: PPUSH
3053: LD_INT 0
3055: PPUSH
3056: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3060: LD_ADDR_EXP 22
3064: PUSH
3065: LD_EXP 22
3069: PPUSH
3070: LD_INT 1
3072: PPUSH
3073: CALL_OW 3
3077: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3078: LD_EXP 22
3082: PUSH
3083: LD_VAR 0 2
3087: ARRAY
3088: PPUSH
3089: LD_INT 2
3091: PPUSH
3092: CALL_OW 336
// end ;
3096: GO 3036
3098: POP
3099: POP
// end else
3100: GO 3162
// begin for i in others09 do
3102: LD_ADDR_VAR 0 2
3106: PUSH
3107: LD_EXP 22
3111: PUSH
3112: FOR_IN
3113: IFFALSE 3160
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3115: LD_VAR 0 2
3119: PPUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_INT 0
3125: PPUSH
3126: CALL_OW 49
// others09 = others09 diff i ;
3130: LD_ADDR_EXP 22
3134: PUSH
3135: LD_EXP 22
3139: PUSH
3140: LD_VAR 0 2
3144: DIFF
3145: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3146: LD_VAR 0 2
3150: PPUSH
3151: LD_INT 2
3153: PPUSH
3154: CALL_OW 336
// end ;
3158: GO 3112
3160: POP
3161: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3162: LD_INT 22
3164: PUSH
3165: LD_INT 4
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 25
3174: PUSH
3175: LD_INT 2
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PPUSH
3186: CALL_OW 69
3190: PUSH
3191: LD_INT 0
3193: EQUAL
3194: IFFALSE 3326
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3196: LD_ADDR_VAR 0 3
3200: PUSH
3201: LD_INT 22
3203: PUSH
3204: LD_INT 4
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: PUSH
3211: LD_INT 25
3213: PUSH
3214: LD_INT 2
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: CALL_OW 69
3229: PUSH
3230: LD_EXP 11
3234: PUSH
3235: LD_EXP 14
3239: PUSH
3240: LD_EXP 12
3244: PUSH
3245: LD_EXP 15
3249: PUSH
3250: LD_EXP 17
3254: PUSH
3255: LD_EXP 13
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: DIFF
3268: ST_TO_ADDR
// if not tmp then
3269: LD_VAR 0 3
3273: NOT
3274: IFFALSE 3310
// begin if Denis then
3276: LD_EXP 12
3280: IFFALSE 3296
// SetClass ( Denis , 2 ) else
3282: LD_EXP 12
3286: PPUSH
3287: LD_INT 2
3289: PPUSH
3290: CALL_OW 336
3294: GO 3308
// SetClass ( DeltaDoctor , 2 ) ;
3296: LD_EXP 17
3300: PPUSH
3301: LD_INT 2
3303: PPUSH
3304: CALL_OW 336
// end else
3308: GO 3326
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3310: LD_VAR 0 3
3314: PUSH
3315: LD_INT 1
3317: ARRAY
3318: PPUSH
3319: LD_INT 2
3321: PPUSH
3322: CALL_OW 336
// end ; end ; for i in ape09 do
3326: LD_ADDR_VAR 0 2
3330: PUSH
3331: LD_EXP 23
3335: PUSH
3336: FOR_IN
3337: IFFALSE 3356
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3339: LD_VAR 0 2
3343: PPUSH
3344: LD_INT 1
3346: PPUSH
3347: LD_INT 0
3349: PPUSH
3350: CALL_OW 49
3354: GO 3336
3356: POP
3357: POP
// uc_side = 4 ;
3358: LD_ADDR_OWVAR 20
3362: PUSH
3363: LD_INT 4
3365: ST_TO_ADDR
// hc_class := 1 ;
3366: LD_ADDR_OWVAR 28
3370: PUSH
3371: LD_INT 1
3373: ST_TO_ADDR
// hc_sex := sex_female ;
3374: LD_ADDR_OWVAR 27
3378: PUSH
3379: LD_INT 2
3381: ST_TO_ADDR
// hc_gallery :=  ;
3382: LD_ADDR_OWVAR 33
3386: PUSH
3387: LD_STRING 
3389: ST_TO_ADDR
// hc_name :=  ;
3390: LD_ADDR_OWVAR 26
3394: PUSH
3395: LD_STRING 
3397: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3398: LD_ADDR_OWVAR 31
3402: PUSH
3403: LD_INT 1
3405: PUSH
3406: LD_INT 7
3408: PUSH
3409: LD_INT 1
3411: PUSH
3412: LD_INT 0
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: ST_TO_ADDR
// AmScout = CreateHuman ;
3421: LD_ADDR_EXP 18
3425: PUSH
3426: CALL_OW 44
3430: ST_TO_ADDR
// end ;
3431: LD_VAR 0 1
3435: RET
// export function PrepareCornell ; begin
3436: LD_INT 0
3438: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3439: LD_INT 4
3441: PPUSH
3442: LD_INT 4
3444: PPUSH
3445: CALL_OW 343
// uc_side = 4 ;
3449: LD_ADDR_OWVAR 20
3453: PUSH
3454: LD_INT 4
3456: ST_TO_ADDR
// uc_nation = 1 ;
3457: LD_ADDR_OWVAR 21
3461: PUSH
3462: LD_INT 1
3464: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3465: LD_ADDR_EXP 19
3469: PUSH
3470: LD_STRING Cornel
3472: PPUSH
3473: LD_INT 1
3475: PPUSH
3476: LD_STRING 03_
3478: PPUSH
3479: CALL 48813 0 3
3483: ST_TO_ADDR
// if not Cornell then
3484: LD_EXP 19
3488: NOT
3489: IFFALSE 3493
// exit ;
3491: GO 3601
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3493: LD_EXP 19
3497: PPUSH
3498: LD_INT 8
3500: PPUSH
3501: LD_INT 0
3503: PPUSH
3504: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3508: LD_EXP 19
3512: PPUSH
3513: LD_INT 350
3515: PPUSH
3516: CALL_OW 234
// if IsInUnit ( JMM ) then
3520: LD_EXP 1
3524: PPUSH
3525: CALL_OW 310
3529: IFFALSE 3572
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3531: LD_EXP 19
3535: PPUSH
3536: LD_EXP 1
3540: PPUSH
3541: CALL_OW 310
3545: PPUSH
3546: CALL_OW 250
3550: PPUSH
3551: LD_EXP 1
3555: PPUSH
3556: CALL_OW 310
3560: PPUSH
3561: CALL_OW 251
3565: PPUSH
3566: CALL_OW 111
3570: GO 3601
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3572: LD_EXP 19
3576: PPUSH
3577: LD_EXP 1
3581: PPUSH
3582: CALL_OW 250
3586: PPUSH
3587: LD_EXP 1
3591: PPUSH
3592: CALL_OW 251
3596: PPUSH
3597: CALL_OW 111
// end ; end_of_file
3601: LD_VAR 0 1
3605: RET
// export function PrepareRussians ; var i , un ; begin
3606: LD_INT 0
3608: PPUSH
3609: PPUSH
3610: PPUSH
// uc_side = 3 ;
3611: LD_ADDR_OWVAR 20
3615: PUSH
3616: LD_INT 3
3618: ST_TO_ADDR
// uc_nation = 3 ;
3619: LD_ADDR_OWVAR 21
3623: PUSH
3624: LD_INT 3
3626: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3627: LD_ADDR_EXP 25
3631: PUSH
3632: LD_STRING Tsaritsyn
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: LD_STRING 
3640: PPUSH
3641: CALL 48813 0 3
3645: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3646: LD_EXP 25
3650: PPUSH
3651: LD_INT 3
3653: PPUSH
3654: LD_INT 0
3656: PPUSH
3657: CALL_OW 49
// for i = 1 to 14 do
3661: LD_ADDR_VAR 0 2
3665: PUSH
3666: DOUBLE
3667: LD_INT 1
3669: DEC
3670: ST_TO_ADDR
3671: LD_INT 14
3673: PUSH
3674: FOR_TO
3675: IFFALSE 3761
// begin uc_side = 3 ;
3677: LD_ADDR_OWVAR 20
3681: PUSH
3682: LD_INT 3
3684: ST_TO_ADDR
// uc_nation = 3 ;
3685: LD_ADDR_OWVAR 21
3689: PUSH
3690: LD_INT 3
3692: ST_TO_ADDR
// hc_gallery =  ;
3693: LD_ADDR_OWVAR 33
3697: PUSH
3698: LD_STRING 
3700: ST_TO_ADDR
// hc_name =  ;
3701: LD_ADDR_OWVAR 26
3705: PUSH
3706: LD_STRING 
3708: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3709: LD_INT 0
3711: PPUSH
3712: LD_INT 1
3714: PPUSH
3715: LD_EXP 36
3719: PPUSH
3720: LD_EXP 37
3724: PPUSH
3725: CALL_OW 12
3729: PPUSH
3730: CALL_OW 380
// un = CreateHuman ;
3734: LD_ADDR_VAR 0 3
3738: PUSH
3739: CALL_OW 44
3743: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3744: LD_VAR 0 3
3748: PPUSH
3749: LD_INT 3
3751: PPUSH
3752: LD_INT 0
3754: PPUSH
3755: CALL_OW 49
// end ;
3759: GO 3674
3761: POP
3762: POP
// for i = 1 to 6 do
3763: LD_ADDR_VAR 0 2
3767: PUSH
3768: DOUBLE
3769: LD_INT 1
3771: DEC
3772: ST_TO_ADDR
3773: LD_INT 6
3775: PUSH
3776: FOR_TO
3777: IFFALSE 3863
// begin uc_side = 3 ;
3779: LD_ADDR_OWVAR 20
3783: PUSH
3784: LD_INT 3
3786: ST_TO_ADDR
// uc_nation = 3 ;
3787: LD_ADDR_OWVAR 21
3791: PUSH
3792: LD_INT 3
3794: ST_TO_ADDR
// hc_gallery =  ;
3795: LD_ADDR_OWVAR 33
3799: PUSH
3800: LD_STRING 
3802: ST_TO_ADDR
// hc_name =  ;
3803: LD_ADDR_OWVAR 26
3807: PUSH
3808: LD_STRING 
3810: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3811: LD_INT 0
3813: PPUSH
3814: LD_INT 2
3816: PPUSH
3817: LD_EXP 36
3821: PPUSH
3822: LD_EXP 37
3826: PPUSH
3827: CALL_OW 12
3831: PPUSH
3832: CALL_OW 380
// un = CreateHuman ;
3836: LD_ADDR_VAR 0 3
3840: PUSH
3841: CALL_OW 44
3845: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3846: LD_VAR 0 3
3850: PPUSH
3851: LD_INT 3
3853: PPUSH
3854: LD_INT 0
3856: PPUSH
3857: CALL_OW 49
// end ;
3861: GO 3776
3863: POP
3864: POP
// for i = 1 to 6 do
3865: LD_ADDR_VAR 0 2
3869: PUSH
3870: DOUBLE
3871: LD_INT 1
3873: DEC
3874: ST_TO_ADDR
3875: LD_INT 6
3877: PUSH
3878: FOR_TO
3879: IFFALSE 3965
// begin uc_side = 3 ;
3881: LD_ADDR_OWVAR 20
3885: PUSH
3886: LD_INT 3
3888: ST_TO_ADDR
// uc_nation = 3 ;
3889: LD_ADDR_OWVAR 21
3893: PUSH
3894: LD_INT 3
3896: ST_TO_ADDR
// hc_gallery =  ;
3897: LD_ADDR_OWVAR 33
3901: PUSH
3902: LD_STRING 
3904: ST_TO_ADDR
// hc_name =  ;
3905: LD_ADDR_OWVAR 26
3909: PUSH
3910: LD_STRING 
3912: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3913: LD_INT 0
3915: PPUSH
3916: LD_INT 3
3918: PPUSH
3919: LD_EXP 36
3923: PPUSH
3924: LD_EXP 37
3928: PPUSH
3929: CALL_OW 12
3933: PPUSH
3934: CALL_OW 380
// un = CreateHuman ;
3938: LD_ADDR_VAR 0 3
3942: PUSH
3943: CALL_OW 44
3947: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3948: LD_VAR 0 3
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: LD_INT 0
3958: PPUSH
3959: CALL_OW 49
// end ;
3963: GO 3878
3965: POP
3966: POP
// for i = 1 to 4 do
3967: LD_ADDR_VAR 0 2
3971: PUSH
3972: DOUBLE
3973: LD_INT 1
3975: DEC
3976: ST_TO_ADDR
3977: LD_INT 4
3979: PUSH
3980: FOR_TO
3981: IFFALSE 4067
// begin uc_side = 3 ;
3983: LD_ADDR_OWVAR 20
3987: PUSH
3988: LD_INT 3
3990: ST_TO_ADDR
// uc_nation = 3 ;
3991: LD_ADDR_OWVAR 21
3995: PUSH
3996: LD_INT 3
3998: ST_TO_ADDR
// hc_gallery =  ;
3999: LD_ADDR_OWVAR 33
4003: PUSH
4004: LD_STRING 
4006: ST_TO_ADDR
// hc_name =  ;
4007: LD_ADDR_OWVAR 26
4011: PUSH
4012: LD_STRING 
4014: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4015: LD_INT 0
4017: PPUSH
4018: LD_INT 4
4020: PPUSH
4021: LD_EXP 36
4025: PPUSH
4026: LD_EXP 37
4030: PPUSH
4031: CALL_OW 12
4035: PPUSH
4036: CALL_OW 380
// un = CreateHuman ;
4040: LD_ADDR_VAR 0 3
4044: PUSH
4045: CALL_OW 44
4049: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4050: LD_VAR 0 3
4054: PPUSH
4055: LD_INT 3
4057: PPUSH
4058: LD_INT 0
4060: PPUSH
4061: CALL_OW 49
// end ;
4065: GO 3980
4067: POP
4068: POP
// end ; end_of_file
4069: LD_VAR 0 1
4073: RET
// export function PrepareArabianCommander ; begin
4074: LD_INT 0
4076: PPUSH
// uc_side = 2 ;
4077: LD_ADDR_OWVAR 20
4081: PUSH
4082: LD_INT 2
4084: ST_TO_ADDR
// uc_nation = 2 ;
4085: LD_ADDR_OWVAR 21
4089: PUSH
4090: LD_INT 2
4092: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4093: LD_ADDR_EXP 26
4097: PUSH
4098: LD_STRING Dietrich
4100: PPUSH
4101: CALL_OW 25
4105: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4106: LD_EXP 26
4110: PPUSH
4111: LD_INT 4
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 49
// end ;
4121: LD_VAR 0 1
4125: RET
// export function PrepareArabian ; var i , un , veh ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
4130: PPUSH
4131: PPUSH
// uc_side := 2 ;
4132: LD_ADDR_OWVAR 20
4136: PUSH
4137: LD_INT 2
4139: ST_TO_ADDR
// uc_nation := 2 ;
4140: LD_ADDR_OWVAR 21
4144: PUSH
4145: LD_INT 2
4147: ST_TO_ADDR
// if not Ahmed then
4148: LD_EXP 27
4152: NOT
4153: IFFALSE 4221
// begin InitHc ;
4155: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4159: LD_INT 1
4161: PPUSH
4162: LD_INT 1
4164: PPUSH
4165: LD_EXP 36
4169: PPUSH
4170: LD_EXP 37
4174: PUSH
4175: LD_INT 1
4177: PLUS
4178: PPUSH
4179: CALL_OW 12
4183: PPUSH
4184: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4188: LD_ADDR_OWVAR 26
4192: PUSH
4193: LD_STRING Ahmed Abbasid
4195: ST_TO_ADDR
// Ahmed := CreateHuman ;
4196: LD_ADDR_EXP 27
4200: PUSH
4201: CALL_OW 44
4205: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4206: LD_EXP 27
4210: PPUSH
4211: LD_INT 4
4213: PPUSH
4214: LD_INT 0
4216: PPUSH
4217: CALL_OW 49
// end ; for i = 1 to 4 do
4221: LD_ADDR_VAR 0 2
4225: PUSH
4226: DOUBLE
4227: LD_INT 1
4229: DEC
4230: ST_TO_ADDR
4231: LD_INT 4
4233: PUSH
4234: FOR_TO
4235: IFFALSE 4321
// begin uc_side = 2 ;
4237: LD_ADDR_OWVAR 20
4241: PUSH
4242: LD_INT 2
4244: ST_TO_ADDR
// uc_nation = 2 ;
4245: LD_ADDR_OWVAR 21
4249: PUSH
4250: LD_INT 2
4252: ST_TO_ADDR
// hc_gallery =  ;
4253: LD_ADDR_OWVAR 33
4257: PUSH
4258: LD_STRING 
4260: ST_TO_ADDR
// hc_name =  ;
4261: LD_ADDR_OWVAR 26
4265: PUSH
4266: LD_STRING 
4268: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4269: LD_INT 0
4271: PPUSH
4272: LD_INT 2
4274: PPUSH
4275: LD_EXP 36
4279: PPUSH
4280: LD_EXP 37
4284: PPUSH
4285: CALL_OW 12
4289: PPUSH
4290: CALL_OW 380
// un = CreateHuman ;
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4304: LD_VAR 0 3
4308: PPUSH
4309: LD_INT 4
4311: PPUSH
4312: LD_INT 0
4314: PPUSH
4315: CALL_OW 49
// end ;
4319: GO 4234
4321: POP
4322: POP
// for i = 1 to 5 do
4323: LD_ADDR_VAR 0 2
4327: PUSH
4328: DOUBLE
4329: LD_INT 1
4331: DEC
4332: ST_TO_ADDR
4333: LD_INT 5
4335: PUSH
4336: FOR_TO
4337: IFFALSE 4423
// begin uc_side = 2 ;
4339: LD_ADDR_OWVAR 20
4343: PUSH
4344: LD_INT 2
4346: ST_TO_ADDR
// uc_nation = 2 ;
4347: LD_ADDR_OWVAR 21
4351: PUSH
4352: LD_INT 2
4354: ST_TO_ADDR
// hc_gallery =  ;
4355: LD_ADDR_OWVAR 33
4359: PUSH
4360: LD_STRING 
4362: ST_TO_ADDR
// hc_name =  ;
4363: LD_ADDR_OWVAR 26
4367: PUSH
4368: LD_STRING 
4370: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4371: LD_INT 0
4373: PPUSH
4374: LD_INT 1
4376: PPUSH
4377: LD_EXP 36
4381: PPUSH
4382: LD_EXP 37
4386: PPUSH
4387: CALL_OW 12
4391: PPUSH
4392: CALL_OW 380
// un = CreateHuman ;
4396: LD_ADDR_VAR 0 3
4400: PUSH
4401: CALL_OW 44
4405: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4406: LD_VAR 0 3
4410: PPUSH
4411: LD_INT 4
4413: PPUSH
4414: LD_INT 0
4416: PPUSH
4417: CALL_OW 49
// end ;
4421: GO 4336
4423: POP
4424: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4425: LD_ADDR_VAR 0 2
4429: PUSH
4430: DOUBLE
4431: LD_INT 1
4433: DEC
4434: ST_TO_ADDR
4435: LD_INT 3
4437: PUSH
4438: LD_INT 4
4440: PUSH
4441: LD_INT 4
4443: PUSH
4444: LD_INT 4
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: PUSH
4453: LD_OWVAR 67
4457: ARRAY
4458: PUSH
4459: FOR_TO
4460: IFFALSE 4546
// begin uc_side = 2 ;
4462: LD_ADDR_OWVAR 20
4466: PUSH
4467: LD_INT 2
4469: ST_TO_ADDR
// uc_nation = 2 ;
4470: LD_ADDR_OWVAR 21
4474: PUSH
4475: LD_INT 2
4477: ST_TO_ADDR
// hc_gallery =  ;
4478: LD_ADDR_OWVAR 33
4482: PUSH
4483: LD_STRING 
4485: ST_TO_ADDR
// hc_name =  ;
4486: LD_ADDR_OWVAR 26
4490: PUSH
4491: LD_STRING 
4493: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4494: LD_INT 0
4496: PPUSH
4497: LD_INT 4
4499: PPUSH
4500: LD_EXP 36
4504: PPUSH
4505: LD_EXP 37
4509: PPUSH
4510: CALL_OW 12
4514: PPUSH
4515: CALL_OW 380
// un = CreateHuman ;
4519: LD_ADDR_VAR 0 3
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4529: LD_VAR 0 3
4533: PPUSH
4534: LD_INT 4
4536: PPUSH
4537: LD_INT 0
4539: PPUSH
4540: CALL_OW 49
// end ;
4544: GO 4459
4546: POP
4547: POP
// for i = 1 to 2 do
4548: LD_ADDR_VAR 0 2
4552: PUSH
4553: DOUBLE
4554: LD_INT 1
4556: DEC
4557: ST_TO_ADDR
4558: LD_INT 2
4560: PUSH
4561: FOR_TO
4562: IFFALSE 4692
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4564: LD_ADDR_VAR 0 4
4568: PUSH
4569: LD_INT 22
4571: PUSH
4572: LD_INT 2
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 21
4581: PUSH
4582: LD_INT 2
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: LD_INT 58
4591: PUSH
4592: EMPTY
4593: LIST
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: LIST
4599: PPUSH
4600: CALL_OW 69
4604: ST_TO_ADDR
// uc_side = 2 ;
4605: LD_ADDR_OWVAR 20
4609: PUSH
4610: LD_INT 2
4612: ST_TO_ADDR
// uc_nation = 2 ;
4613: LD_ADDR_OWVAR 21
4617: PUSH
4618: LD_INT 2
4620: ST_TO_ADDR
// hc_gallery =  ;
4621: LD_ADDR_OWVAR 33
4625: PUSH
4626: LD_STRING 
4628: ST_TO_ADDR
// hc_name =  ;
4629: LD_ADDR_OWVAR 26
4633: PUSH
4634: LD_STRING 
4636: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4637: LD_INT 0
4639: PPUSH
4640: LD_INT 3
4642: PPUSH
4643: LD_EXP 36
4647: PPUSH
4648: LD_EXP 37
4652: PPUSH
4653: CALL_OW 12
4657: PPUSH
4658: CALL_OW 380
// un = CreateHuman ;
4662: LD_ADDR_VAR 0 3
4666: PUSH
4667: CALL_OW 44
4671: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4672: LD_VAR 0 3
4676: PPUSH
4677: LD_VAR 0 4
4681: PUSH
4682: LD_INT 1
4684: ARRAY
4685: PPUSH
4686: CALL_OW 52
// end ;
4690: GO 4561
4692: POP
4693: POP
// end ;
4694: LD_VAR 0 1
4698: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4699: LD_INT 0
4701: PPUSH
4702: PPUSH
4703: PPUSH
4704: PPUSH
4705: PPUSH
4706: PPUSH
// for i := 1 to 2 do
4707: LD_ADDR_VAR 0 2
4711: PUSH
4712: DOUBLE
4713: LD_INT 1
4715: DEC
4716: ST_TO_ADDR
4717: LD_INT 2
4719: PUSH
4720: FOR_TO
4721: IFFALSE 4847
// begin uc_side = 5 ;
4723: LD_ADDR_OWVAR 20
4727: PUSH
4728: LD_INT 5
4730: ST_TO_ADDR
// uc_nation = 2 ;
4731: LD_ADDR_OWVAR 21
4735: PUSH
4736: LD_INT 2
4738: ST_TO_ADDR
// vc_chassis := 31 ;
4739: LD_ADDR_OWVAR 37
4743: PUSH
4744: LD_INT 31
4746: ST_TO_ADDR
// vc_control := control_rider ;
4747: LD_ADDR_OWVAR 38
4751: PUSH
4752: LD_INT 4
4754: ST_TO_ADDR
// animal := CreateVehicle ;
4755: LD_ADDR_VAR 0 3
4759: PUSH
4760: CALL_OW 45
4764: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4765: LD_VAR 0 3
4769: PPUSH
4770: LD_INT 7
4772: PPUSH
4773: LD_INT 0
4775: PPUSH
4776: CALL_OW 49
// hc_gallery =  ;
4780: LD_ADDR_OWVAR 33
4784: PUSH
4785: LD_STRING 
4787: ST_TO_ADDR
// hc_name =  ;
4788: LD_ADDR_OWVAR 26
4792: PUSH
4793: LD_STRING 
4795: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4796: LD_INT 0
4798: PPUSH
4799: LD_INT 11
4801: PPUSH
4802: LD_EXP 36
4806: PPUSH
4807: LD_EXP 37
4811: PPUSH
4812: CALL_OW 12
4816: PPUSH
4817: CALL_OW 380
// un = CreateHuman ;
4821: LD_ADDR_VAR 0 4
4825: PUSH
4826: CALL_OW 44
4830: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4831: LD_VAR 0 4
4835: PPUSH
4836: LD_VAR 0 3
4840: PPUSH
4841: CALL_OW 52
// end ;
4845: GO 4720
4847: POP
4848: POP
// repeat wait ( 0 0$1 ) ;
4849: LD_INT 35
4851: PPUSH
4852: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4856: LD_ADDR_VAR 0 5
4860: PUSH
4861: LD_INT 22
4863: PUSH
4864: LD_INT 1
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PPUSH
4871: CALL_OW 69
4875: PPUSH
4876: LD_VAR 0 2
4880: PPUSH
4881: CALL_OW 74
4885: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4886: LD_ADDR_VAR 0 6
4890: PUSH
4891: LD_INT 22
4893: PUSH
4894: LD_INT 1
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 2
4903: PUSH
4904: LD_INT 59
4906: PUSH
4907: EMPTY
4908: LIST
4909: PUSH
4910: LD_INT 21
4912: PUSH
4913: LD_INT 1
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 21
4922: PUSH
4923: LD_INT 2
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: PUSH
4940: EMPTY
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: PPUSH
4948: LD_VAR 0 2
4952: PPUSH
4953: CALL_OW 74
4957: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4958: LD_ADDR_VAR 0 2
4962: PUSH
4963: LD_INT 22
4965: PUSH
4966: LD_INT 5
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PUSH
4973: LD_INT 25
4975: PUSH
4976: LD_INT 11
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PPUSH
4987: CALL_OW 69
4991: PUSH
4992: FOR_IN
4993: IFFALSE 5063
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4995: LD_VAR 0 2
4999: PPUSH
5000: LD_VAR 0 5
5004: PPUSH
5005: CALL_OW 296
5009: PUSH
5010: LD_INT 8
5012: PLUS
5013: PUSH
5014: LD_VAR 0 2
5018: PPUSH
5019: LD_VAR 0 6
5023: PPUSH
5024: CALL_OW 296
5028: LESS
5029: IFFALSE 5047
// ComAttackUnit ( i , target1 ) else
5031: LD_VAR 0 2
5035: PPUSH
5036: LD_VAR 0 5
5040: PPUSH
5041: CALL_OW 115
5045: GO 5061
// ComAttackUnit ( i , target2 ) ;
5047: LD_VAR 0 2
5051: PPUSH
5052: LD_VAR 0 6
5056: PPUSH
5057: CALL_OW 115
// end ;
5061: GO 4992
5063: POP
5064: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
5065: LD_INT 22
5067: PUSH
5068: LD_INT 5
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: PUSH
5075: LD_INT 25
5077: PUSH
5078: LD_INT 11
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PPUSH
5089: CALL_OW 69
5093: PUSH
5094: LD_INT 0
5096: EQUAL
5097: PUSH
5098: LD_INT 22
5100: PUSH
5101: LD_INT 1
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 69
5112: PUSH
5113: LD_INT 0
5115: EQUAL
5116: OR
5117: IFFALSE 4849
// end ; end_of_file
5119: LD_VAR 0 1
5123: RET
// every 1 do
5124: GO 5126
5126: DISABLE
// begin Video ( true ) ;
5127: LD_INT 1
5129: PPUSH
5130: CALL 85466 0 1
// RevealFogArea ( 1 , EpsilonTerrain ) ;
5134: LD_INT 1
5136: PPUSH
5137: LD_INT 19
5139: PPUSH
5140: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5144: LD_EXP 11
5148: PPUSH
5149: CALL_OW 87
// wait ( 0 0$3 ) ;
5153: LD_INT 105
5155: PPUSH
5156: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5160: LD_EXP 1
5164: PPUSH
5165: CALL_OW 310
5169: PPUSH
5170: CALL_OW 85
// Wait ( 0 0$1 ) ;
5174: LD_INT 35
5176: PPUSH
5177: CALL_OW 67
// if IsOk ( Gary ) then
5181: LD_EXP 10
5185: PPUSH
5186: CALL_OW 302
5190: IFFALSE 5228
// begin Say ( Gary , D2-Gary-1 ) ;
5192: LD_EXP 10
5196: PPUSH
5197: LD_STRING D2-Gary-1
5199: PPUSH
5200: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5204: LD_EXP 1
5208: PPUSH
5209: LD_STRING D2-JMM-1
5211: PPUSH
5212: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5216: LD_EXP 10
5220: PPUSH
5221: LD_STRING D2-Gary-2
5223: PPUSH
5224: CALL_OW 88
// end ; Video ( false ) ;
5228: LD_INT 0
5230: PPUSH
5231: CALL 85466 0 1
// ChangeMissionObjectives ( M1 ) ;
5235: LD_STRING M1
5237: PPUSH
5238: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5242: LD_INT 38
5244: PPUSH
5245: LD_INT 1
5247: PPUSH
5248: LD_INT 100
5250: PPUSH
5251: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5255: LD_INT 47
5257: PPUSH
5258: LD_INT 1
5260: PPUSH
5261: LD_INT 50
5263: PPUSH
5264: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5268: LD_INT 47
5270: PPUSH
5271: LD_INT 3
5273: PPUSH
5274: LD_INT 50
5276: PPUSH
5277: CALL_OW 291
// SaveForQuickRestart ;
5281: CALL_OW 22
// end ;
5285: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5286: LD_EXP 1
5290: PPUSH
5291: LD_EXP 11
5295: PPUSH
5296: CALL_OW 296
5300: PUSH
5301: LD_INT 15
5303: LESS
5304: IFFALSE 5985
5306: GO 5308
5308: DISABLE
5309: LD_INT 0
5311: PPUSH
// begin wait ( 0 0$3 ) ;
5312: LD_INT 105
5314: PPUSH
5315: CALL_OW 67
// Video ( true ) ;
5319: LD_INT 1
5321: PPUSH
5322: CALL 85466 0 1
// ComExitVehicle ( JMM ) ;
5326: LD_EXP 1
5330: PPUSH
5331: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5335: LD_EXP 1
5339: PPUSH
5340: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
5344: LD_EXP 1
5348: PPUSH
5349: LD_EXP 11
5353: PPUSH
5354: CALL_OW 179
// p := 15 ;
5358: LD_ADDR_VAR 0 1
5362: PUSH
5363: LD_INT 15
5365: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5366: LD_INT 35
5368: PPUSH
5369: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5373: LD_EXP 11
5377: PUSH
5378: LD_EXP 13
5382: PUSH
5383: LD_EXP 12
5387: PUSH
5388: LD_EXP 14
5392: PUSH
5393: LD_EXP 8
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: PPUSH
5405: LD_EXP 1
5409: PPUSH
5410: CALL_OW 112
// p := p - 1 ;
5414: LD_ADDR_VAR 0 1
5418: PUSH
5419: LD_VAR 0 1
5423: PUSH
5424: LD_INT 1
5426: MINUS
5427: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5428: LD_EXP 1
5432: PPUSH
5433: LD_EXP 11
5437: PPUSH
5438: CALL_OW 296
5442: PUSH
5443: LD_INT 5
5445: LESS
5446: PUSH
5447: LD_VAR 0 1
5451: PUSH
5452: LD_INT 0
5454: LESSEQUAL
5455: OR
5456: IFFALSE 5366
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5458: LD_EXP 11
5462: PUSH
5463: LD_EXP 13
5467: PUSH
5468: LD_EXP 12
5472: PUSH
5473: LD_EXP 14
5477: PUSH
5478: LD_EXP 8
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: PPUSH
5490: LD_EXP 1
5494: PPUSH
5495: CALL_OW 119
// if not IsInUnit ( JMM ) then
5499: LD_EXP 1
5503: PPUSH
5504: CALL_OW 310
5508: NOT
5509: IFFALSE 5525
// ComTurnUnit ( JMM , Simms ) ;
5511: LD_EXP 1
5515: PPUSH
5516: LD_EXP 11
5520: PPUSH
5521: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5525: LD_EXP 11
5529: PUSH
5530: LD_EXP 13
5534: PUSH
5535: LD_EXP 12
5539: PUSH
5540: LD_EXP 14
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: PPUSH
5551: LD_EXP 1
5555: PPUSH
5556: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5560: LD_EXP 1
5564: PUSH
5565: LD_EXP 11
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PPUSH
5574: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5578: LD_EXP 11
5582: PPUSH
5583: LD_STRING D2a-Sim-1
5585: PPUSH
5586: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5590: LD_EXP 1
5594: PPUSH
5595: LD_STRING D2a-JMM-1
5597: PPUSH
5598: CALL_OW 88
// if IsOk ( Joan ) then
5602: LD_EXP 13
5606: PPUSH
5607: CALL_OW 302
5611: IFFALSE 5689
// begin if not IsInUnit ( JMM ) then
5613: LD_EXP 1
5617: PPUSH
5618: CALL_OW 310
5622: NOT
5623: IFFALSE 5639
// ComTurnUnit ( JMM , Joan ) ;
5625: LD_EXP 1
5629: PPUSH
5630: LD_EXP 13
5634: PPUSH
5635: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5639: LD_EXP 13
5643: PPUSH
5644: LD_EXP 1
5648: PPUSH
5649: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5653: LD_EXP 13
5657: PPUSH
5658: LD_STRING D2b-Joan-1
5660: PPUSH
5661: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5665: LD_EXP 1
5669: PPUSH
5670: LD_STRING D2b-JMM-1
5672: PPUSH
5673: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5677: LD_EXP 13
5681: PPUSH
5682: LD_STRING D2b-Joan-2
5684: PPUSH
5685: CALL_OW 88
// end ; if IsOk ( Denis ) then
5689: LD_EXP 12
5693: PPUSH
5694: CALL_OW 302
5698: IFFALSE 5752
// begin if not IsInUnit ( JMM ) then
5700: LD_EXP 1
5704: PPUSH
5705: CALL_OW 310
5709: NOT
5710: IFFALSE 5726
// ComTurnUnit ( JMM , Denis ) ;
5712: LD_EXP 1
5716: PPUSH
5717: LD_EXP 12
5721: PPUSH
5722: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
5726: LD_EXP 12
5730: PPUSH
5731: LD_EXP 1
5735: PPUSH
5736: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5740: LD_EXP 12
5744: PPUSH
5745: LD_STRING D2c-Den-1
5747: PPUSH
5748: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
5752: LD_EXP 8
5756: PPUSH
5757: CALL_OW 302
5761: PUSH
5762: LD_STRING 08_Kikuchi
5764: PPUSH
5765: CALL_OW 28
5769: NOT
5770: AND
5771: IFFALSE 5866
// begin repeat wait ( 0 0$1 ) ;
5773: LD_INT 35
5775: PPUSH
5776: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
5780: LD_EXP 8
5784: PPUSH
5785: LD_EXP 1
5789: PPUSH
5790: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
5794: LD_EXP 1
5798: PPUSH
5799: LD_EXP 8
5803: PPUSH
5804: CALL_OW 296
5808: PUSH
5809: LD_INT 5
5811: LESS
5812: IFFALSE 5773
// ComTurnUnit ( Kikuchi , JMM ) ;
5814: LD_EXP 8
5818: PPUSH
5819: LD_EXP 1
5823: PPUSH
5824: CALL_OW 119
// if not IsInUnit ( JMM ) then
5828: LD_EXP 1
5832: PPUSH
5833: CALL_OW 310
5837: NOT
5838: IFFALSE 5854
// ComTurnUnit ( JMM , Kikuchi ) ;
5840: LD_EXP 1
5844: PPUSH
5845: LD_EXP 8
5849: PPUSH
5850: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
5854: LD_EXP 8
5858: PPUSH
5859: LD_STRING D3b-Yam-1
5861: PPUSH
5862: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5866: LD_EXP 14
5870: PPUSH
5871: CALL_OW 302
5875: IFFALSE 5941
// begin if not IsInUnit ( JMM ) then
5877: LD_EXP 1
5881: PPUSH
5882: CALL_OW 310
5886: NOT
5887: IFFALSE 5903
// ComTurnUnit ( JMM , Khatam ) ;
5889: LD_EXP 1
5893: PPUSH
5894: LD_EXP 14
5898: PPUSH
5899: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
5903: LD_EXP 14
5907: PPUSH
5908: LD_EXP 1
5912: PPUSH
5913: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5917: LD_EXP 1
5921: PPUSH
5922: LD_STRING D2c-JMM-1
5924: PPUSH
5925: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5929: LD_EXP 14
5933: PPUSH
5934: LD_STRING D2c-Khat-1
5936: PPUSH
5937: CALL_OW 88
// end ; Video ( false ) ;
5941: LD_INT 0
5943: PPUSH
5944: CALL 85466 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5948: LD_INT 22
5950: PUSH
5951: LD_INT 4
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PPUSH
5958: CALL_OW 69
5962: PPUSH
5963: LD_INT 1
5965: PPUSH
5966: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5970: LD_STRING M1a
5972: PPUSH
5973: CALL_OW 337
// joinEpsilon = 1 ;
5977: LD_ADDR_EXP 29
5981: PUSH
5982: LD_INT 1
5984: ST_TO_ADDR
// end ;
5985: PPOPN 1
5987: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
5988: LD_INT 38
5990: PPUSH
5991: LD_INT 1
5993: PPUSH
5994: CALL_OW 289
5998: PUSH
5999: LD_INT 0
6001: EQUAL
6002: PUSH
6003: LD_INT 47
6005: PPUSH
6006: LD_INT 1
6008: PPUSH
6009: CALL_OW 289
6013: PUSH
6014: LD_INT 0
6016: EQUAL
6017: AND
6018: PUSH
6019: LD_INT 47
6021: PPUSH
6022: LD_INT 2
6024: PPUSH
6025: CALL_OW 289
6029: PUSH
6030: LD_INT 0
6032: EQUAL
6033: AND
6034: IFFALSE 6159
6036: GO 6038
6038: DISABLE
6039: LD_INT 0
6041: PPUSH
// begin p := 0 ;
6042: LD_ADDR_VAR 0 1
6046: PUSH
6047: LD_INT 0
6049: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6050: LD_INT 38
6052: PUSH
6053: LD_INT 47
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PPUSH
6060: LD_INT 56
6062: PPUSH
6063: LD_INT 0
6065: PPUSH
6066: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6070: LD_INT 35
6072: PPUSH
6073: CALL_OW 67
// p := p + 1 ;
6077: LD_ADDR_VAR 0 1
6081: PUSH
6082: LD_VAR 0 1
6086: PUSH
6087: LD_INT 1
6089: PLUS
6090: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6091: LD_INT 38
6093: PUSH
6094: LD_INT 47
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: PPUSH
6101: LD_INT 56
6103: PPUSH
6104: LD_INT 0
6106: PPUSH
6107: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6111: LD_INT 38
6113: PPUSH
6114: LD_INT 27
6116: PPUSH
6117: CALL_OW 308
6121: IFFALSE 6130
// RemoveUnit ( cargo1 ) ;
6123: LD_INT 38
6125: PPUSH
6126: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6130: LD_INT 47
6132: PPUSH
6133: LD_INT 27
6135: PPUSH
6136: CALL_OW 308
6140: IFFALSE 6149
// RemoveUnit ( cargo2 ) ;
6142: LD_INT 47
6144: PPUSH
6145: CALL_OW 64
// until p > 30 ;
6149: LD_VAR 0 1
6153: PUSH
6154: LD_INT 30
6156: GREATER
6157: IFFALSE 6070
// end ;
6159: PPOPN 1
6161: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6162: LD_EXP 65
6166: PUSH
6167: LD_INT 1
6169: EQUAL
6170: IFFALSE 7302
6172: GO 6174
6174: DISABLE
6175: LD_INT 0
6177: PPUSH
6178: PPUSH
6179: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6180: LD_ADDR_VAR 0 1
6184: PUSH
6185: LD_INT 22
6187: PUSH
6188: LD_INT 1
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 25
6197: PUSH
6198: LD_INT 4
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: LD_INT 26
6207: PUSH
6208: LD_INT 1
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: LIST
6219: PPUSH
6220: CALL_OW 69
6224: PUSH
6225: LD_EXP 1
6229: PUSH
6230: LD_EXP 2
6234: PUSH
6235: LD_EXP 3
6239: PUSH
6240: LD_EXP 4
6244: PUSH
6245: LD_EXP 5
6249: PUSH
6250: LD_EXP 6
6254: PUSH
6255: LD_EXP 7
6259: PUSH
6260: LD_EXP 8
6264: PUSH
6265: LD_EXP 9
6269: PUSH
6270: LD_EXP 10
6274: PUSH
6275: LD_EXP 11
6279: PUSH
6280: LD_EXP 12
6284: PUSH
6285: LD_EXP 13
6289: PUSH
6290: LD_EXP 14
6294: PUSH
6295: LD_EXP 15
6299: PUSH
6300: LD_EXP 16
6304: PUSH
6305: LD_EXP 17
6309: PUSH
6310: LD_EXP 18
6314: PUSH
6315: LD_EXP 19
6319: PUSH
6320: LD_EXP 24
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: DIFF
6347: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6348: LD_ADDR_VAR 0 2
6352: PUSH
6353: LD_INT 22
6355: PUSH
6356: LD_INT 1
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PUSH
6363: LD_INT 26
6365: PUSH
6366: LD_INT 1
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: LD_INT 25
6378: PUSH
6379: LD_INT 1
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 25
6388: PUSH
6389: LD_INT 2
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 25
6398: PUSH
6399: LD_INT 3
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: LIST
6416: PPUSH
6417: CALL_OW 69
6421: PUSH
6422: LD_EXP 1
6426: PUSH
6427: LD_EXP 2
6431: PUSH
6432: LD_EXP 3
6436: PUSH
6437: LD_EXP 4
6441: PUSH
6442: LD_EXP 5
6446: PUSH
6447: LD_EXP 6
6451: PUSH
6452: LD_EXP 7
6456: PUSH
6457: LD_EXP 8
6461: PUSH
6462: LD_EXP 9
6466: PUSH
6467: LD_EXP 10
6471: PUSH
6472: LD_EXP 11
6476: PUSH
6477: LD_EXP 12
6481: PUSH
6482: LD_EXP 13
6486: PUSH
6487: LD_EXP 14
6491: PUSH
6492: LD_EXP 15
6496: PUSH
6497: LD_EXP 16
6501: PUSH
6502: LD_EXP 17
6506: PUSH
6507: LD_EXP 18
6511: PUSH
6512: LD_EXP 19
6516: PUSH
6517: LD_EXP 24
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: DIFF
6544: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6545: LD_EXP 10
6549: PUSH
6550: LD_VAR 0 2
6554: OR
6555: PUSH
6556: LD_EXP 17
6560: PUSH
6561: LD_VAR 0 1
6565: OR
6566: AND
6567: IFFALSE 6786
// begin DialogueOn ;
6569: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6573: LD_EXP 17
6577: PPUSH
6578: CALL_OW 302
6582: IFFALSE 6598
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6584: LD_EXP 17
6588: PPUSH
6589: LD_STRING D3-Sci1-1
6591: PPUSH
6592: CALL_OW 88
6596: GO 6610
// Say ( tmp1 , D3-Sci1-1 ) ;
6598: LD_VAR 0 1
6602: PPUSH
6603: LD_STRING D3-Sci1-1
6605: PPUSH
6606: CALL_OW 88
// if IsOk ( Gary ) then
6610: LD_EXP 10
6614: PPUSH
6615: CALL_OW 302
6619: IFFALSE 6635
// Say ( Gary , D3-Gary-1 ) else
6621: LD_EXP 10
6625: PPUSH
6626: LD_STRING D3-Gary-1
6628: PPUSH
6629: CALL_OW 88
6633: GO 6647
// Say ( tmp2 , D3-Gary-1 ) ;
6635: LD_VAR 0 2
6639: PPUSH
6640: LD_STRING D3-Gary-1
6642: PPUSH
6643: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6647: LD_EXP 17
6651: PPUSH
6652: CALL_OW 302
6656: IFFALSE 6672
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6658: LD_EXP 17
6662: PPUSH
6663: LD_STRING D3-Sci1-2
6665: PPUSH
6666: CALL_OW 88
6670: GO 6684
// Say ( tmp1 , D3-Sci1-2 ) ;
6672: LD_VAR 0 1
6676: PPUSH
6677: LD_STRING D3-Sci1-2
6679: PPUSH
6680: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6684: LD_EXP 1
6688: PPUSH
6689: LD_STRING D3-JMM-2
6691: PPUSH
6692: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6696: LD_EXP 17
6700: PPUSH
6701: CALL_OW 302
6705: IFFALSE 6721
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6707: LD_EXP 17
6711: PPUSH
6712: LD_STRING D3-Sci1-3
6714: PPUSH
6715: CALL_OW 88
6719: GO 6733
// Say ( tmp1 , D3-Sci1-3 ) ;
6721: LD_VAR 0 1
6725: PPUSH
6726: LD_STRING D3-Sci1-3
6728: PPUSH
6729: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
6733: LD_EXP 1
6737: PPUSH
6738: LD_STRING D3-JMM-3
6740: PPUSH
6741: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6745: LD_EXP 17
6749: PPUSH
6750: CALL_OW 302
6754: IFFALSE 6770
// Say ( DeltaDoctor , D3-Sci1-4 ) else
6756: LD_EXP 17
6760: PPUSH
6761: LD_STRING D3-Sci1-4
6763: PPUSH
6764: CALL_OW 88
6768: GO 6782
// Say ( tmp1 , D3-Sci1-4 ) ;
6770: LD_VAR 0 1
6774: PPUSH
6775: LD_STRING D3-Sci1-4
6777: PPUSH
6778: CALL_OW 88
// DialogueOff ;
6782: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
6786: LD_INT 12
6788: PPUSH
6789: LD_INT 1
6791: PPUSH
6792: LD_INT 1
6794: PPUSH
6795: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
6799: LD_INT 32
6801: PPUSH
6802: LD_INT 1
6804: PPUSH
6805: LD_INT 1
6807: PPUSH
6808: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
6812: LD_INT 12
6814: PPUSH
6815: LD_INT 1
6817: PPUSH
6818: LD_INT 1
6820: PPUSH
6821: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
6825: LD_INT 33
6827: PPUSH
6828: LD_INT 1
6830: PPUSH
6831: LD_INT 1
6833: PPUSH
6834: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
6838: LD_STRING M2
6840: PPUSH
6841: CALL_OW 337
// wait ( 3 3$0 ) ;
6845: LD_INT 6300
6847: PPUSH
6848: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6852: LD_INT 35
6854: PPUSH
6855: CALL_OW 67
// until not InBattle ( 1 ) ;
6859: LD_INT 1
6861: PPUSH
6862: CALL_OW 463
6866: NOT
6867: IFFALSE 6852
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
6869: LD_EXP 11
6873: PPUSH
6874: CALL_OW 302
6878: PUSH
6879: LD_EXP 17
6883: PPUSH
6884: CALL_OW 302
6888: AND
6889: IFFALSE 7058
// begin DialogueOn ;
6891: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6895: LD_EXP 11
6899: PPUSH
6900: LD_STRING D3a-Sim-1
6902: PPUSH
6903: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
6907: LD_EXP 17
6911: PPUSH
6912: LD_STRING D3a-Sci1-1
6914: PPUSH
6915: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6919: LD_EXP 11
6923: PPUSH
6924: LD_STRING D3a-Sim-2
6926: PPUSH
6927: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
6931: LD_EXP 17
6935: PPUSH
6936: LD_STRING D3a-Sci1-2
6938: PPUSH
6939: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6943: LD_EXP 11
6947: PPUSH
6948: LD_STRING D3a-Sim-3
6950: PPUSH
6951: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
6955: LD_EXP 17
6959: PPUSH
6960: LD_STRING D3a-Sci1-3
6962: PPUSH
6963: CALL_OW 88
// if IsOK ( Joan ) then
6967: LD_EXP 13
6971: PPUSH
6972: CALL_OW 302
6976: IFFALSE 6992
// Say ( Simms , D3a-Sim-4 ) else
6978: LD_EXP 11
6982: PPUSH
6983: LD_STRING D3a-Sim-4
6985: PPUSH
6986: CALL_OW 88
6990: GO 7004
// Say ( Simms , D3a-Sim-4a ) ;
6992: LD_EXP 11
6996: PPUSH
6997: LD_STRING D3a-Sim-4a
6999: PPUSH
7000: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7004: LD_EXP 17
7008: PPUSH
7009: LD_STRING D3a-Sci1-4
7011: PPUSH
7012: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7016: LD_EXP 11
7020: PPUSH
7021: LD_STRING D3a-Sim-5
7023: PPUSH
7024: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7028: LD_EXP 17
7032: PPUSH
7033: LD_STRING D3a-Sci1-5
7035: PPUSH
7036: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7040: LD_EXP 11
7044: PPUSH
7045: LD_STRING D3a-Sim-6
7047: PPUSH
7048: CALL_OW 88
// DialogueOff ;
7052: CALL_OW 7
// end else
7056: GO 7302
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
7058: LD_ADDR_VAR 0 3
7062: PUSH
7063: LD_INT 22
7065: PUSH
7066: LD_INT 1
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: LD_INT 25
7075: PUSH
7076: LD_INT 4
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: PUSH
7092: LD_EXP 11
7096: PUSH
7097: LD_EXP 14
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: DIFF
7106: ST_TO_ADDR
// if tmp3 > 0 then
7107: LD_VAR 0 3
7111: PUSH
7112: LD_INT 0
7114: GREATER
7115: IFFALSE 7302
// begin DialogueOn ;
7117: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7121: LD_EXP 11
7125: PPUSH
7126: LD_STRING D3a-Sim-1
7128: PPUSH
7129: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7133: LD_VAR 0 3
7137: PUSH
7138: LD_INT 1
7140: ARRAY
7141: PPUSH
7142: LD_STRING D3a-Sci1-1
7144: PPUSH
7145: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7149: LD_EXP 11
7153: PPUSH
7154: LD_STRING D3a-Sim-2
7156: PPUSH
7157: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7161: LD_VAR 0 3
7165: PUSH
7166: LD_INT 1
7168: ARRAY
7169: PPUSH
7170: LD_STRING D3a-Sci1-2
7172: PPUSH
7173: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7177: LD_EXP 11
7181: PPUSH
7182: LD_STRING D3a-Sim-3
7184: PPUSH
7185: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7189: LD_VAR 0 3
7193: PUSH
7194: LD_INT 1
7196: ARRAY
7197: PPUSH
7198: LD_STRING D3a-Sci1-3
7200: PPUSH
7201: CALL_OW 88
// if IsOK ( Joan ) then
7205: LD_EXP 13
7209: PPUSH
7210: CALL_OW 302
7214: IFFALSE 7230
// Say ( Simms , D3a-Sim-4 ) else
7216: LD_EXP 11
7220: PPUSH
7221: LD_STRING D3a-Sim-4
7223: PPUSH
7224: CALL_OW 88
7228: GO 7242
// Say ( Simms , D3a-Sim-4a ) ;
7230: LD_EXP 11
7234: PPUSH
7235: LD_STRING D3a-Sim-4a
7237: PPUSH
7238: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7242: LD_VAR 0 3
7246: PUSH
7247: LD_INT 1
7249: ARRAY
7250: PPUSH
7251: LD_STRING D3a-Sci1-4
7253: PPUSH
7254: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7258: LD_EXP 11
7262: PPUSH
7263: LD_STRING D3a-Sim-5
7265: PPUSH
7266: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7270: LD_VAR 0 3
7274: PUSH
7275: LD_INT 1
7277: ARRAY
7278: PPUSH
7279: LD_STRING D3a-Sci1-5
7281: PPUSH
7282: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7286: LD_EXP 11
7290: PPUSH
7291: LD_STRING D3a-Sim-6
7293: PPUSH
7294: CALL_OW 88
// DialogueOff ;
7298: CALL_OW 7
// end ; end ; end ;
7302: PPOPN 3
7304: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7305: LD_EXP 29
7309: PUSH
7310: LD_INT 1
7312: EQUAL
7313: IFFALSE 7648
7315: GO 7317
7317: DISABLE
7318: LD_INT 0
7320: PPUSH
// begin wait ( 2 2$00 ) ;
7321: LD_INT 4200
7323: PPUSH
7324: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7328: LD_EXP 18
7332: PPUSH
7333: LD_STRING D4-FSol1-1
7335: PPUSH
7336: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7340: LD_STRING M3
7342: PPUSH
7343: CALL_OW 337
// PrepareRussians ;
7347: CALL 3606 0 0
// spawnRussians := true ;
7351: LD_ADDR_EXP 58
7355: PUSH
7356: LD_INT 1
7358: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7359: LD_ADDR_VAR 0 1
7363: PUSH
7364: LD_INT 1
7366: PPUSH
7367: LD_INT 100
7369: PPUSH
7370: CALL_OW 12
7374: ST_TO_ADDR
// if difficulty = 1 then
7375: LD_OWVAR 67
7379: PUSH
7380: LD_INT 1
7382: EQUAL
7383: IFFALSE 7466
// begin if rnd > 0 and rnd < 51 then
7385: LD_VAR 0 1
7389: PUSH
7390: LD_INT 0
7392: GREATER
7393: PUSH
7394: LD_VAR 0 1
7398: PUSH
7399: LD_INT 51
7401: LESS
7402: AND
7403: IFFALSE 7412
// BuildRussianBase ( 2 ) ;
7405: LD_INT 2
7407: PPUSH
7408: CALL 11754 0 1
// if rnd > 50 and rnd < 81 then
7412: LD_VAR 0 1
7416: PUSH
7417: LD_INT 50
7419: GREATER
7420: PUSH
7421: LD_VAR 0 1
7425: PUSH
7426: LD_INT 81
7428: LESS
7429: AND
7430: IFFALSE 7439
// BuildRussianBase ( 1 ) ;
7432: LD_INT 1
7434: PPUSH
7435: CALL 11754 0 1
// if rnd > 80 and rnd < 101 then
7439: LD_VAR 0 1
7443: PUSH
7444: LD_INT 80
7446: GREATER
7447: PUSH
7448: LD_VAR 0 1
7452: PUSH
7453: LD_INT 101
7455: LESS
7456: AND
7457: IFFALSE 7466
// BuildRussianBase ( 3 ) ;
7459: LD_INT 3
7461: PPUSH
7462: CALL 11754 0 1
// end ; if difficulty = 2 then
7466: LD_OWVAR 67
7470: PUSH
7471: LD_INT 2
7473: EQUAL
7474: IFFALSE 7557
// begin if rnd > 0 and rnd < 61 then
7476: LD_VAR 0 1
7480: PUSH
7481: LD_INT 0
7483: GREATER
7484: PUSH
7485: LD_VAR 0 1
7489: PUSH
7490: LD_INT 61
7492: LESS
7493: AND
7494: IFFALSE 7503
// BuildRussianBase ( 2 ) ;
7496: LD_INT 2
7498: PPUSH
7499: CALL 11754 0 1
// if rnd > 60 and rnd < 81 then
7503: LD_VAR 0 1
7507: PUSH
7508: LD_INT 60
7510: GREATER
7511: PUSH
7512: LD_VAR 0 1
7516: PUSH
7517: LD_INT 81
7519: LESS
7520: AND
7521: IFFALSE 7530
// BuildRussianBase ( 1 ) ;
7523: LD_INT 1
7525: PPUSH
7526: CALL 11754 0 1
// if rnd > 80 and rnd < 101 then
7530: LD_VAR 0 1
7534: PUSH
7535: LD_INT 80
7537: GREATER
7538: PUSH
7539: LD_VAR 0 1
7543: PUSH
7544: LD_INT 101
7546: LESS
7547: AND
7548: IFFALSE 7557
// BuildRussianBase ( 3 ) ;
7550: LD_INT 3
7552: PPUSH
7553: CALL 11754 0 1
// end ; if difficulty >= 3 then
7557: LD_OWVAR 67
7561: PUSH
7562: LD_INT 3
7564: GREATEREQUAL
7565: IFFALSE 7648
// begin if rnd > 0 and rnd < 71 then
7567: LD_VAR 0 1
7571: PUSH
7572: LD_INT 0
7574: GREATER
7575: PUSH
7576: LD_VAR 0 1
7580: PUSH
7581: LD_INT 71
7583: LESS
7584: AND
7585: IFFALSE 7594
// BuildRussianBase ( 3 ) ;
7587: LD_INT 3
7589: PPUSH
7590: CALL 11754 0 1
// if rnd > 70 and rnd < 81 then
7594: LD_VAR 0 1
7598: PUSH
7599: LD_INT 70
7601: GREATER
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: LD_INT 81
7610: LESS
7611: AND
7612: IFFALSE 7621
// BuildRussianBase ( 2 ) ;
7614: LD_INT 2
7616: PPUSH
7617: CALL 11754 0 1
// if rnd > 80 and rnd < 101 then
7621: LD_VAR 0 1
7625: PUSH
7626: LD_INT 80
7628: GREATER
7629: PUSH
7630: LD_VAR 0 1
7634: PUSH
7635: LD_INT 101
7637: LESS
7638: AND
7639: IFFALSE 7648
// BuildRussianBase ( 1 ) ;
7641: LD_INT 1
7643: PPUSH
7644: CALL 11754 0 1
// end ; end ;
7648: PPOPN 1
7650: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7651: LD_INT 54
7653: PPUSH
7654: LD_INT 1
7656: PPUSH
7657: CALL_OW 321
7661: PUSH
7662: LD_INT 2
7664: EQUAL
7665: PUSH
7666: LD_INT 21
7668: PPUSH
7669: LD_INT 1
7671: PPUSH
7672: CALL_OW 321
7676: PUSH
7677: LD_INT 2
7679: EQUAL
7680: OR
7681: PUSH
7682: LD_INT 22
7684: PPUSH
7685: LD_INT 1
7687: PPUSH
7688: CALL_OW 321
7692: PUSH
7693: LD_INT 2
7695: EQUAL
7696: OR
7697: IFFALSE 7999
7699: GO 7701
7701: DISABLE
7702: LD_INT 0
7704: PPUSH
7705: PPUSH
// begin if IsOk ( DeltaDoctor ) then
7706: LD_EXP 17
7710: PPUSH
7711: CALL_OW 302
7715: IFFALSE 7729
// tmp := DeltaDoctor else
7717: LD_ADDR_VAR 0 2
7721: PUSH
7722: LD_EXP 17
7726: ST_TO_ADDR
7727: GO 7739
// tmp := Denis ;
7729: LD_ADDR_VAR 0 2
7733: PUSH
7734: LD_EXP 12
7738: ST_TO_ADDR
// if tmp then
7739: LD_VAR 0 2
7743: IFFALSE 7837
// begin DialogueOn ;
7745: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
7749: LD_EXP 1
7753: PPUSH
7754: LD_STRING D6-JMM-1
7756: PPUSH
7757: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
7761: LD_VAR 0 2
7765: PPUSH
7766: LD_STRING D6-Sci1-1
7768: PPUSH
7769: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
7773: LD_EXP 1
7777: PPUSH
7778: LD_STRING D6-JMM-2
7780: PPUSH
7781: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
7785: LD_VAR 0 2
7789: PPUSH
7790: LD_STRING D6-Sci1-2
7792: PPUSH
7793: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
7797: LD_EXP 1
7801: PPUSH
7802: LD_STRING D6-JMM-3
7804: PPUSH
7805: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
7809: LD_VAR 0 2
7813: PPUSH
7814: LD_STRING D6-Sci1-3
7816: PPUSH
7817: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
7821: LD_EXP 1
7825: PPUSH
7826: LD_STRING D6-JMM-4
7828: PPUSH
7829: CALL_OW 88
// DialogueOff ;
7833: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
7837: LD_INT 1050
7839: PPUSH
7840: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
7844: LD_EXP 49
7848: PUSH
7849: LD_INT 0
7851: EQUAL
7852: PUSH
7853: LD_EXP 14
7857: PPUSH
7858: CALL_OW 302
7862: AND
7863: IFFALSE 7921
// begin DialogueOn ;
7865: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
7869: LD_EXP 27
7873: PPUSH
7874: LD_STRING D5-Ar1-1
7876: PPUSH
7877: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
7881: LD_EXP 26
7885: PPUSH
7886: LD_STRING D5-Diet-1
7888: PPUSH
7889: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
7893: LD_EXP 27
7897: PPUSH
7898: LD_STRING D5-Ar1-2
7900: PPUSH
7901: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
7905: LD_EXP 26
7909: PPUSH
7910: LD_STRING D5-Diet-2
7912: PPUSH
7913: CALL_OW 88
// DialogueOff ;
7917: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7921: LD_INT 35
7923: PPUSH
7924: CALL_OW 67
// until tick > 10 10$00 ;
7928: LD_OWVAR 1
7932: PUSH
7933: LD_INT 21000
7935: GREATER
7936: IFFALSE 7921
// wait ( 1 1$30 ) ;
7938: LD_INT 3150
7940: PPUSH
7941: CALL_OW 67
// if arabianTrait = 0 then
7945: LD_EXP 49
7949: PUSH
7950: LD_INT 0
7952: EQUAL
7953: IFFALSE 7999
// begin arabianTrait = 1 ;
7955: LD_ADDR_EXP 49
7959: PUSH
7960: LD_INT 1
7962: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
7963: LD_INT 2
7965: PPUSH
7966: LD_INT 3
7968: PPUSH
7969: LD_INT 1
7971: PPUSH
7972: LD_INT 1
7974: PPUSH
7975: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
7979: LD_INT 2
7981: PPUSH
7982: LD_INT 6
7984: PPUSH
7985: LD_INT 1
7987: PPUSH
7988: LD_INT 1
7990: PPUSH
7991: CALL_OW 80
// PrepareArabianTrait ;
7995: CALL 8002 0 0
// end ; end ;
7999: PPOPN 2
8001: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8002: LD_INT 0
8004: PPUSH
8005: PPUSH
8006: PPUSH
8007: PPUSH
8008: PPUSH
8009: PPUSH
8010: PPUSH
8011: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8012: LD_ADDR_VAR 0 6
8016: PUSH
8017: LD_INT 22
8019: PUSH
8020: LD_INT 2
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 2
8029: PUSH
8030: LD_INT 25
8032: PUSH
8033: LD_INT 4
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: PUSH
8040: LD_INT 25
8042: PUSH
8043: LD_INT 2
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 25
8052: PUSH
8053: LD_INT 3
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 69
8074: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8075: LD_ADDR_VAR 0 5
8079: PUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: LD_INT 21
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: LD_INT 2
8102: PUSH
8103: LD_INT 25
8105: PUSH
8106: LD_INT 1
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: LD_INT 25
8115: PUSH
8116: LD_INT 8
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PUSH
8123: LD_INT 25
8125: PUSH
8126: LD_INT 15
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 69
8148: PUSH
8149: LD_EXP 26
8153: PUSH
8154: EMPTY
8155: LIST
8156: DIFF
8157: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8158: LD_ADDR_VAR 0 7
8162: PUSH
8163: LD_INT 22
8165: PUSH
8166: LD_INT 2
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 30
8175: PUSH
8176: LD_INT 5
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PPUSH
8187: CALL_OW 69
8191: PUSH
8192: LD_INT 1
8194: ARRAY
8195: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8196: LD_VAR 0 6
8200: PPUSH
8201: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8205: LD_VAR 0 5
8209: PPUSH
8210: CALL_OW 122
// wait ( 0 0$3 ) ;
8214: LD_INT 105
8216: PPUSH
8217: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8221: LD_VAR 0 6
8225: PPUSH
8226: LD_VAR 0 7
8230: PPUSH
8231: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8235: LD_VAR 0 6
8239: PPUSH
8240: LD_INT 1
8242: PUSH
8243: LD_INT 8
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PUSH
8250: LD_INT 1
8252: PPUSH
8253: LD_INT 2
8255: PPUSH
8256: CALL_OW 12
8260: ARRAY
8261: PPUSH
8262: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8266: LD_VAR 0 6
8270: PPUSH
8271: CALL_OW 182
// wait ( 0 0$1 ) ;
8275: LD_INT 35
8277: PPUSH
8278: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8282: LD_INT 76
8284: PPUSH
8285: LD_INT 19
8287: PPUSH
8288: CALL_OW 84
// DialogueOn ;
8292: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8296: LD_INT 22
8298: PUSH
8299: LD_INT 1
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PUSH
8306: LD_INT 26
8308: PUSH
8309: LD_INT 1
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: LD_INT 2
8318: PUSH
8319: LD_INT 25
8321: PUSH
8322: LD_INT 1
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 25
8331: PUSH
8332: LD_INT 2
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PUSH
8339: LD_INT 25
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 25
8351: PUSH
8352: LD_INT 4
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_INT 25
8361: PUSH
8362: LD_INT 5
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: PPUSH
8382: CALL_OW 69
8386: PPUSH
8387: LD_STRING D8-Sol1-1
8389: PPUSH
8390: LD_STRING D8-Sol1-1
8392: PPUSH
8393: CALL 11096 0 3
// if IsOK ( DeltaDoctor ) then
8397: LD_EXP 17
8401: PPUSH
8402: CALL_OW 302
8406: IFFALSE 8422
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8408: LD_EXP 17
8412: PPUSH
8413: LD_STRING D8-Sci1-1
8415: PPUSH
8416: CALL_OW 88
8420: GO 8523
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8422: LD_INT 22
8424: PUSH
8425: LD_INT 1
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: LD_INT 26
8434: PUSH
8435: LD_INT 1
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: LD_INT 2
8444: PUSH
8445: LD_INT 25
8447: PUSH
8448: LD_INT 1
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: LD_INT 25
8457: PUSH
8458: LD_INT 2
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PUSH
8465: LD_INT 25
8467: PUSH
8468: LD_INT 3
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 25
8477: PUSH
8478: LD_INT 4
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 25
8487: PUSH
8488: LD_INT 5
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: LIST
8507: PPUSH
8508: CALL_OW 69
8512: PPUSH
8513: LD_STRING D8-Sol1-1
8515: PPUSH
8516: LD_STRING D8-Sol1-1
8518: PPUSH
8519: CALL 11096 0 3
// Say ( JMM , D8-JMM-1 ) ;
8523: LD_EXP 1
8527: PPUSH
8528: LD_STRING D8-JMM-1
8530: PPUSH
8531: CALL_OW 88
// DialogueOff ;
8535: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8539: LD_INT 2
8541: PPUSH
8542: LD_INT 2
8544: PPUSH
8545: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8549: LD_INT 1
8551: PPUSH
8552: LD_INT 2
8554: PPUSH
8555: LD_INT 2
8557: PPUSH
8558: LD_INT 1
8560: PPUSH
8561: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8565: LD_INT 3
8567: PPUSH
8568: LD_INT 2
8570: PPUSH
8571: LD_INT 1
8573: PPUSH
8574: LD_INT 1
8576: PPUSH
8577: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8581: LD_STRING M4
8583: PPUSH
8584: CALL_OW 337
// wait ( 0 0$1 ) ;
8588: LD_INT 35
8590: PPUSH
8591: CALL_OW 67
// if IsLive ( Khatam ) then
8595: LD_EXP 14
8599: PPUSH
8600: CALL_OW 300
8604: IFFALSE 8618
// DoNotAttack ( 2 , Khatam ) ;
8606: LD_INT 2
8608: PPUSH
8609: LD_EXP 14
8613: PPUSH
8614: CALL_OW 471
// wait ( 0 0$1 ) ;
8618: LD_INT 35
8620: PPUSH
8621: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8625: LD_ADDR_VAR 0 8
8629: PUSH
8630: LD_INT 22
8632: PUSH
8633: LD_INT 1
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 21
8642: PUSH
8643: LD_INT 3
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PPUSH
8654: CALL_OW 69
8658: PPUSH
8659: LD_VAR 0 5
8663: PUSH
8664: LD_INT 1
8666: ARRAY
8667: PPUSH
8668: CALL_OW 74
8672: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8673: LD_VAR 0 5
8677: PPUSH
8678: LD_INT 25
8680: PUSH
8681: LD_INT 1
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PPUSH
8688: CALL_OW 72
8692: PUSH
8693: LD_INT 1
8695: ARRAY
8696: PPUSH
8697: LD_VAR 0 8
8701: PPUSH
8702: CALL_OW 250
8706: PPUSH
8707: LD_VAR 0 8
8711: PPUSH
8712: CALL_OW 251
8716: PPUSH
8717: LD_VAR 0 8
8721: PPUSH
8722: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
8726: LD_VAR 0 5
8730: PPUSH
8731: LD_INT 84
8733: PPUSH
8734: LD_INT 22
8736: PPUSH
8737: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
8741: LD_VAR 0 5
8745: PPUSH
8746: LD_INT 82
8748: PPUSH
8749: LD_INT 5
8751: PPUSH
8752: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
8756: LD_VAR 0 5
8760: PPUSH
8761: LD_INT 95
8763: PPUSH
8764: LD_INT 12
8766: PPUSH
8767: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
8771: LD_VAR 0 5
8775: PPUSH
8776: LD_INT 102
8778: PPUSH
8779: LD_INT 11
8781: PPUSH
8782: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
8786: LD_VAR 0 5
8790: PPUSH
8791: LD_INT 116
8793: PPUSH
8794: LD_INT 15
8796: PPUSH
8797: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
8801: LD_VAR 0 5
8805: PPUSH
8806: LD_INT 140
8808: PPUSH
8809: LD_INT 25
8811: PPUSH
8812: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
8816: LD_VAR 0 5
8820: PPUSH
8821: LD_INT 160
8823: PPUSH
8824: LD_INT 56
8826: PPUSH
8827: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8831: LD_ADDR_VAR 0 5
8835: PUSH
8836: LD_INT 22
8838: PUSH
8839: LD_INT 2
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: LD_INT 21
8848: PUSH
8849: LD_INT 1
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 2
8858: PUSH
8859: LD_INT 25
8861: PUSH
8862: LD_INT 1
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: LD_INT 25
8871: PUSH
8872: LD_INT 8
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 25
8881: PUSH
8882: LD_INT 15
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: LIST
8899: PPUSH
8900: CALL_OW 69
8904: PUSH
8905: LD_EXP 26
8909: PUSH
8910: EMPTY
8911: LIST
8912: DIFF
8913: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
8914: LD_ADDR_VAR 0 6
8918: PUSH
8919: LD_INT 22
8921: PUSH
8922: LD_INT 2
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 21
8931: PUSH
8932: LD_INT 1
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: LD_INT 2
8941: PUSH
8942: LD_INT 25
8944: PUSH
8945: LD_INT 2
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PUSH
8952: LD_INT 25
8954: PUSH
8955: LD_INT 3
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PUSH
8962: LD_INT 25
8964: PUSH
8965: LD_INT 4
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PUSH
8972: LD_INT 25
8974: PUSH
8975: LD_INT 12
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: LD_INT 25
8984: PUSH
8985: LD_INT 16
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: LIST
9004: PPUSH
9005: CALL_OW 69
9009: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9010: LD_ADDR_VAR 0 6
9014: PUSH
9015: LD_VAR 0 6
9019: PUSH
9020: LD_EXP 26
9024: ADD
9025: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9026: LD_VAR 0 5
9030: PPUSH
9031: LD_INT 189
9033: PPUSH
9034: LD_INT 79
9036: PPUSH
9037: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9041: LD_VAR 0 5
9045: PPUSH
9046: LD_INT 25
9048: PUSH
9049: LD_INT 15
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PPUSH
9056: CALL_OW 72
9060: IFFALSE 9101
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9062: LD_VAR 0 5
9066: PPUSH
9067: LD_INT 25
9069: PUSH
9070: LD_INT 15
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PPUSH
9077: CALL_OW 72
9081: PUSH
9082: LD_INT 1
9084: ARRAY
9085: PPUSH
9086: LD_INT 84
9088: PPUSH
9089: LD_INT 21
9091: PPUSH
9092: CALL_OW 428
9096: PPUSH
9097: CALL_OW 120
// wait ( 0 0$4 ) ;
9101: LD_INT 140
9103: PPUSH
9104: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9108: LD_VAR 0 6
9112: PPUSH
9113: LD_INT 88
9115: PPUSH
9116: LD_INT 8
9118: PPUSH
9119: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9123: LD_VAR 0 6
9127: PPUSH
9128: LD_INT 102
9130: PPUSH
9131: LD_INT 10
9133: PPUSH
9134: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9138: LD_VAR 0 6
9142: PPUSH
9143: LD_INT 116
9145: PPUSH
9146: LD_INT 15
9148: PPUSH
9149: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9153: LD_VAR 0 6
9157: PPUSH
9158: LD_INT 140
9160: PPUSH
9161: LD_INT 25
9163: PPUSH
9164: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9168: LD_VAR 0 6
9172: PPUSH
9173: LD_INT 160
9175: PPUSH
9176: LD_INT 56
9178: PPUSH
9179: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9183: LD_VAR 0 6
9187: PPUSH
9188: LD_INT 189
9190: PPUSH
9191: LD_INT 79
9193: PPUSH
9194: CALL_OW 171
// arabianAttackersAI = 1 ;
9198: LD_ADDR_EXP 46
9202: PUSH
9203: LD_INT 1
9205: ST_TO_ADDR
// if IsOk ( Gary ) then
9206: LD_EXP 10
9210: PPUSH
9211: CALL_OW 302
9215: IFFALSE 9229
// Say ( Gary , D8a-Gary-1 ) ;
9217: LD_EXP 10
9221: PPUSH
9222: LD_STRING D8a-Gary-1
9224: PPUSH
9225: CALL_OW 88
// wait ( 0 0$5 ) ;
9229: LD_INT 175
9231: PPUSH
9232: CALL_OW 67
// if IsOK ( Khatam ) then
9236: LD_EXP 14
9240: PPUSH
9241: CALL_OW 302
9245: IFFALSE 9781
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9247: LD_ADDR_VAR 0 3
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_INT 1
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 2
9264: PUSH
9265: LD_INT 25
9267: PUSH
9268: LD_INT 1
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 25
9277: PUSH
9278: LD_INT 2
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: LD_INT 25
9287: PUSH
9288: LD_INT 3
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: LD_INT 25
9297: PUSH
9298: LD_INT 4
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: PUSH
9305: LD_INT 25
9307: PUSH
9308: LD_INT 5
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: PUSH
9315: LD_INT 25
9317: PUSH
9318: LD_INT 8
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PPUSH
9338: CALL_OW 69
9342: PUSH
9343: LD_EXP 1
9347: PUSH
9348: LD_EXP 2
9352: PUSH
9353: LD_EXP 3
9357: PUSH
9358: LD_EXP 4
9362: PUSH
9363: LD_EXP 5
9367: PUSH
9368: LD_EXP 6
9372: PUSH
9373: LD_EXP 7
9377: PUSH
9378: LD_EXP 8
9382: PUSH
9383: LD_EXP 9
9387: PUSH
9388: LD_EXP 10
9392: PUSH
9393: LD_EXP 11
9397: PUSH
9398: LD_EXP 12
9402: PUSH
9403: LD_EXP 13
9407: PUSH
9408: LD_EXP 14
9412: PUSH
9413: LD_EXP 15
9417: PUSH
9418: LD_EXP 16
9422: PUSH
9423: LD_EXP 17
9427: PUSH
9428: LD_EXP 19
9432: PUSH
9433: LD_EXP 24
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: DIFF
9459: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9460: LD_EXP 14
9464: PPUSH
9465: LD_INT 8
9467: PPUSH
9468: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9472: LD_EXP 14
9476: PPUSH
9477: CALL_OW 122
// wait ( 0 0$1 ) ;
9481: LD_INT 35
9483: PPUSH
9484: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9488: LD_EXP 14
9492: PPUSH
9493: CALL_OW 121
// wait ( 0 0$1 ) ;
9497: LD_INT 35
9499: PPUSH
9500: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9504: LD_EXP 14
9508: PPUSH
9509: LD_INT 7
9511: PPUSH
9512: CALL_OW 113
// if not tmp then
9516: LD_VAR 0 3
9520: NOT
9521: IFFALSE 9525
// exit ;
9523: GO 9781
// DialogueOn ;
9525: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9529: LD_VAR 0 3
9533: PUSH
9534: LD_INT 1
9536: ARRAY
9537: PPUSH
9538: CALL_OW 258
9542: PUSH
9543: LD_INT 1
9545: EQUAL
9546: IFFALSE 9566
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9548: LD_VAR 0 3
9552: PUSH
9553: LD_INT 1
9555: ARRAY
9556: PPUSH
9557: LD_STRING D8b-Sol1-1
9559: PPUSH
9560: CALL_OW 88
9564: GO 9582
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9566: LD_VAR 0 3
9570: PUSH
9571: LD_INT 1
9573: ARRAY
9574: PPUSH
9575: LD_STRING D8b-FSol1-1
9577: PPUSH
9578: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9582: LD_EXP 14
9586: PPUSH
9587: LD_STRING D8b-Khat-1
9589: PPUSH
9590: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9594: LD_VAR 0 3
9598: PUSH
9599: LD_INT 1
9601: ARRAY
9602: PPUSH
9603: CALL_OW 258
9607: PUSH
9608: LD_INT 1
9610: EQUAL
9611: IFFALSE 9631
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9613: LD_VAR 0 3
9617: PUSH
9618: LD_INT 1
9620: ARRAY
9621: PPUSH
9622: LD_STRING D8b-Sol1-2
9624: PPUSH
9625: CALL_OW 88
9629: GO 9647
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9631: LD_VAR 0 3
9635: PUSH
9636: LD_INT 1
9638: ARRAY
9639: PPUSH
9640: LD_STRING D8b-FSol1-2
9642: PPUSH
9643: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9647: LD_EXP 14
9651: PPUSH
9652: LD_STRING D8b-Khat-2
9654: PPUSH
9655: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9659: LD_VAR 0 3
9663: PUSH
9664: LD_INT 1
9666: ARRAY
9667: PPUSH
9668: CALL_OW 258
9672: PUSH
9673: LD_INT 1
9675: EQUAL
9676: IFFALSE 9696
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9678: LD_VAR 0 3
9682: PUSH
9683: LD_INT 1
9685: ARRAY
9686: PPUSH
9687: LD_STRING D8b-Sol1-3
9689: PPUSH
9690: CALL_OW 88
9694: GO 9712
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
9696: LD_VAR 0 3
9700: PUSH
9701: LD_INT 1
9703: ARRAY
9704: PPUSH
9705: LD_STRING D8b-FSol1-3
9707: PPUSH
9708: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
9712: LD_EXP 14
9716: PPUSH
9717: LD_STRING D8b-Khat-3
9719: PPUSH
9720: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9724: LD_VAR 0 3
9728: PUSH
9729: LD_INT 1
9731: ARRAY
9732: PPUSH
9733: CALL_OW 258
9737: PUSH
9738: LD_INT 1
9740: EQUAL
9741: IFFALSE 9761
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
9743: LD_VAR 0 3
9747: PUSH
9748: LD_INT 1
9750: ARRAY
9751: PPUSH
9752: LD_STRING D8b-Sol1-4
9754: PPUSH
9755: CALL_OW 88
9759: GO 9777
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
9761: LD_VAR 0 3
9765: PUSH
9766: LD_INT 1
9768: ARRAY
9769: PPUSH
9770: LD_STRING D8b-FSol1-4
9772: PPUSH
9773: CALL_OW 88
// DialogueOff ;
9777: CALL_OW 7
// end ; end ;
9781: LD_VAR 0 1
9785: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
9786: LD_INT 7
9788: PPUSH
9789: LD_INT 22
9791: PUSH
9792: LD_INT 2
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PPUSH
9799: CALL_OW 70
9803: PUSH
9804: LD_INT 0
9806: GREATER
9807: PUSH
9808: LD_EXP 14
9812: PPUSH
9813: LD_INT 7
9815: PPUSH
9816: CALL_OW 308
9820: OR
9821: IFFALSE 10028
9823: GO 9825
9825: DISABLE
9826: LD_INT 0
9828: PPUSH
// begin enable ;
9829: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
9830: LD_ADDR_VAR 0 1
9834: PUSH
9835: LD_INT 7
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_INT 2
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PPUSH
9848: CALL_OW 70
9852: PUSH
9853: FOR_IN
9854: IFFALSE 9995
// begin if GetClass ( i ) = 4 then
9856: LD_VAR 0 1
9860: PPUSH
9861: CALL_OW 257
9865: PUSH
9866: LD_INT 4
9868: EQUAL
9869: IFFALSE 9881
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
9871: LD_INT 1
9873: PPUSH
9874: LD_STRING 10_ScientistsEscape_1
9876: PPUSH
9877: CALL_OW 39
// if i = Dietrich then
9881: LD_VAR 0 1
9885: PUSH
9886: LD_EXP 26
9890: EQUAL
9891: IFFALSE 9901
// GensherStatus = 1 ;
9893: LD_ADDR_EXP 52
9897: PUSH
9898: LD_INT 1
9900: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
9901: LD_VAR 0 1
9905: PPUSH
9906: CALL_OW 257
9910: PUSH
9911: LD_INT 1
9913: EQUAL
9914: PUSH
9915: LD_VAR 0 1
9919: PPUSH
9920: CALL_OW 257
9924: PUSH
9925: LD_INT 2
9927: EQUAL
9928: OR
9929: PUSH
9930: LD_VAR 0 1
9934: PPUSH
9935: CALL_OW 257
9939: PUSH
9940: LD_INT 3
9942: EQUAL
9943: OR
9944: PUSH
9945: LD_VAR 0 1
9949: PPUSH
9950: CALL_OW 257
9954: PUSH
9955: LD_INT 4
9957: EQUAL
9958: OR
9959: PUSH
9960: LD_VAR 0 1
9964: PPUSH
9965: CALL_OW 257
9969: PUSH
9970: LD_INT 8
9972: EQUAL
9973: OR
9974: IFFALSE 9984
// arabianEscape = 1 ;
9976: LD_ADDR_EXP 47
9980: PUSH
9981: LD_INT 1
9983: ST_TO_ADDR
// RemoveUnit ( i ) ;
9984: LD_VAR 0 1
9988: PPUSH
9989: CALL_OW 64
// end ;
9993: GO 9853
9995: POP
9996: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
9997: LD_EXP 14
10001: PPUSH
10002: LD_INT 7
10004: PPUSH
10005: CALL_OW 308
10009: IFFALSE 10028
// begin KhatamStatus = 1 ;
10011: LD_ADDR_EXP 53
10015: PUSH
10016: LD_INT 1
10018: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10019: LD_EXP 14
10023: PPUSH
10024: CALL_OW 64
// end ; end ;
10028: PPOPN 1
10030: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10031: LD_INT 22
10033: PUSH
10034: LD_INT 2
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 21
10043: PUSH
10044: LD_INT 1
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 69
10059: PUSH
10060: LD_INT 0
10062: EQUAL
10063: PUSH
10064: LD_INT 22
10066: PUSH
10067: LD_INT 4
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: LD_INT 21
10076: PUSH
10077: LD_INT 1
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PPUSH
10088: CALL_OW 69
10092: PUSH
10093: LD_INT 0
10095: EQUAL
10096: AND
10097: IFFALSE 10110
10099: GO 10101
10101: DISABLE
// arabianDefeated = 1 ;
10102: LD_ADDR_EXP 48
10106: PUSH
10107: LD_INT 1
10109: ST_TO_ADDR
10110: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10111: LD_INT 54
10113: PPUSH
10114: LD_INT 1
10116: PPUSH
10117: CALL_OW 321
10121: PUSH
10122: LD_INT 2
10124: EQUAL
10125: PUSH
10126: LD_INT 55
10128: PPUSH
10129: LD_INT 1
10131: PPUSH
10132: CALL_OW 321
10136: PUSH
10137: LD_INT 2
10139: EQUAL
10140: AND
10141: PUSH
10142: LD_INT 21
10144: PPUSH
10145: LD_INT 1
10147: PPUSH
10148: CALL_OW 321
10152: PUSH
10153: LD_INT 2
10155: EQUAL
10156: AND
10157: PUSH
10158: LD_INT 22
10160: PPUSH
10161: LD_INT 1
10163: PPUSH
10164: CALL_OW 321
10168: PUSH
10169: LD_INT 2
10171: EQUAL
10172: AND
10173: PUSH
10174: LD_INT 12
10176: PPUSH
10177: LD_INT 1
10179: PPUSH
10180: CALL_OW 321
10184: PUSH
10185: LD_INT 2
10187: EQUAL
10188: AND
10189: PUSH
10190: LD_INT 32
10192: PPUSH
10193: LD_INT 1
10195: PPUSH
10196: CALL_OW 321
10200: PUSH
10201: LD_INT 2
10203: EQUAL
10204: AND
10205: PUSH
10206: LD_EXP 63
10210: PUSH
10211: LD_INT 0
10213: EQUAL
10214: AND
10215: PUSH
10216: LD_EXP 49
10220: PUSH
10221: LD_INT 0
10223: EQUAL
10224: AND
10225: PUSH
10226: LD_OWVAR 1
10230: PUSH
10231: LD_INT 31500
10233: GREATEREQUAL
10234: AND
10235: IFFALSE 10252
10237: GO 10239
10239: DISABLE
// begin arabianTrait = 1 ;
10240: LD_ADDR_EXP 49
10244: PUSH
10245: LD_INT 1
10247: ST_TO_ADDR
// PrepareArabianTrait ;
10248: CALL 8002 0 0
// end ;
10252: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10253: LD_EXP 29
10257: PUSH
10258: LD_STRING 02_mikhailStatus_1
10260: PPUSH
10261: LD_INT 0
10263: PPUSH
10264: CALL_OW 30
10268: PUSH
10269: LD_INT 1
10271: EQUAL
10272: AND
10273: PUSH
10274: LD_INT 22
10276: PUSH
10277: LD_INT 5
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: LD_INT 0
10291: EQUAL
10292: AND
10293: PUSH
10294: LD_INT 22
10296: PUSH
10297: LD_INT 2
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: LD_INT 21
10306: PUSH
10307: LD_INT 1
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PPUSH
10318: CALL_OW 69
10322: PUSH
10323: LD_INT 0
10325: EQUAL
10326: PUSH
10327: LD_EXP 49
10331: PUSH
10332: LD_INT 0
10334: EQUAL
10335: OR
10336: AND
10337: IFFALSE 10346
10339: GO 10341
10341: DISABLE
// PrepareCornell ;
10342: CALL 3436 0 0
10346: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10347: LD_INT 22
10349: PUSH
10350: LD_INT 1
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 69
10361: PPUSH
10362: LD_EXP 19
10366: PPUSH
10367: CALL_OW 74
10371: PPUSH
10372: LD_EXP 19
10376: PPUSH
10377: CALL_OW 296
10381: PUSH
10382: LD_INT 9
10384: LESS
10385: IFFALSE 10606
10387: GO 10389
10389: DISABLE
// begin InGameOn ;
10390: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10394: LD_EXP 19
10398: PPUSH
10399: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10403: LD_EXP 19
10407: PPUSH
10408: LD_STRING D7-Corn-1
10410: PPUSH
10411: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10415: LD_INT 22
10417: PUSH
10418: LD_INT 1
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: LD_INT 2
10427: PUSH
10428: LD_INT 25
10430: PUSH
10431: LD_INT 1
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PUSH
10438: LD_INT 25
10440: PUSH
10441: LD_INT 2
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 25
10450: PUSH
10451: LD_INT 3
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: LD_INT 25
10460: PUSH
10461: LD_INT 4
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: LD_INT 25
10470: PUSH
10471: LD_INT 5
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PPUSH
10490: CALL_OW 69
10494: PPUSH
10495: LD_STRING D7-Sol1-1
10497: PPUSH
10498: LD_STRING D7-FSol1-1
10500: PPUSH
10501: CALL 11096 0 3
// CenterNowOnUnits ( Cornell ) ;
10505: LD_EXP 19
10509: PPUSH
10510: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10514: LD_EXP 19
10518: PPUSH
10519: LD_STRING D7-Corn-2
10521: PPUSH
10522: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10526: LD_EXP 1
10530: PPUSH
10531: LD_STRING D7-JMM-2
10533: PPUSH
10534: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10538: LD_EXP 19
10542: PPUSH
10543: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10547: LD_EXP 19
10551: PPUSH
10552: LD_STRING D7-Corn-3
10554: PPUSH
10555: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10559: LD_EXP 19
10563: PPUSH
10564: LD_INT 250
10566: PPUSH
10567: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10571: LD_EXP 19
10575: PPUSH
10576: LD_INT 1
10578: PPUSH
10579: CALL_OW 235
// wait ( 0 0$1 ) ;
10583: LD_INT 35
10585: PPUSH
10586: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10590: LD_EXP 1
10594: PPUSH
10595: LD_STRING D7-JMM-3
10597: PPUSH
10598: CALL_OW 88
// InGameOff ;
10602: CALL_OW 9
// end ;
10606: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10607: LD_EXP 19
10611: PPUSH
10612: CALL_OW 255
10616: PUSH
10617: LD_INT 1
10619: EQUAL
10620: PUSH
10621: LD_EXP 19
10625: PPUSH
10626: CALL_OW 256
10630: PUSH
10631: LD_INT 350
10633: GREATER
10634: AND
10635: IFFALSE 10828
10637: GO 10639
10639: DISABLE
// begin DialogueOn ;
10640: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10644: LD_EXP 1
10648: PPUSH
10649: LD_STRING D7a-JMM-1
10651: PPUSH
10652: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10656: LD_EXP 19
10660: PPUSH
10661: LD_STRING D7a-Corn-1
10663: PPUSH
10664: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10668: LD_EXP 1
10672: PPUSH
10673: LD_STRING D7a-JMM-2
10675: PPUSH
10676: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10680: LD_EXP 19
10684: PPUSH
10685: LD_STRING D7a-Corn-2
10687: PPUSH
10688: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
10692: LD_EXP 1
10696: PPUSH
10697: LD_STRING D7a-JMM-3
10699: PPUSH
10700: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
10704: LD_EXP 19
10708: PPUSH
10709: LD_STRING D7a-Corn-3
10711: PPUSH
10712: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
10716: LD_EXP 1
10720: PPUSH
10721: LD_STRING D7a-JMM-4
10723: PPUSH
10724: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
10728: LD_EXP 19
10732: PPUSH
10733: LD_STRING D7a-Corn-4
10735: PPUSH
10736: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
10740: LD_EXP 1
10744: PPUSH
10745: LD_STRING D7a-JMM-5
10747: PPUSH
10748: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
10752: LD_EXP 19
10756: PPUSH
10757: LD_STRING D7a-Corn-5
10759: PPUSH
10760: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
10764: LD_EXP 1
10768: PPUSH
10769: LD_STRING D7a-JMM-6
10771: PPUSH
10772: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
10776: LD_EXP 19
10780: PPUSH
10781: LD_STRING D7a-Corn-6
10783: PPUSH
10784: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
10788: LD_EXP 1
10792: PPUSH
10793: LD_STRING D7a-JMM-7
10795: PPUSH
10796: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
10800: LD_EXP 19
10804: PPUSH
10805: LD_STRING D7a-Corn-7
10807: PPUSH
10808: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
10812: LD_EXP 1
10816: PPUSH
10817: LD_STRING D7a-JMM-8
10819: PPUSH
10820: CALL_OW 88
// DialogueOff ;
10824: CALL_OW 7
// end ;
10828: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
10829: LD_EXP 61
10833: PUSH
10834: LD_EXP 1
10838: PPUSH
10839: CALL_OW 302
10843: PUSH
10844: LD_EXP 5
10848: PPUSH
10849: CALL_OW 302
10853: OR
10854: AND
10855: IFFALSE 10945
10857: GO 10859
10859: DISABLE
// begin Wait ( 0 0$2 ) ;
10860: LD_INT 70
10862: PPUSH
10863: CALL_OW 67
// DialogueOn ;
10867: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
10871: LD_EXP 61
10875: PUSH
10876: LD_INT 1
10878: ARRAY
10879: PPUSH
10880: LD_EXP 61
10884: PUSH
10885: LD_INT 2
10887: ARRAY
10888: PPUSH
10889: CALL_OW 86
// if IsOk ( Cyrus ) then
10893: LD_EXP 5
10897: PPUSH
10898: CALL_OW 302
10902: IFFALSE 10918
// Say ( Cyrus , D10-Cyrus-1 ) else
10904: LD_EXP 5
10908: PPUSH
10909: LD_STRING D10-Cyrus-1
10911: PPUSH
10912: CALL_OW 88
10916: GO 10941
// if IsOk ( JMM ) then
10918: LD_EXP 1
10922: PPUSH
10923: CALL_OW 302
10927: IFFALSE 10941
// Say ( JMM , D10-JMM-1 ) ;
10929: LD_EXP 1
10933: PPUSH
10934: LD_STRING D10-JMM-1
10936: PPUSH
10937: CALL_OW 88
// DialogueOff ;
10941: CALL_OW 7
// end ;
10945: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
10946: LD_INT 12
10948: PPUSH
10949: LD_INT 1
10951: PPUSH
10952: CALL_OW 321
10956: PUSH
10957: LD_INT 2
10959: EQUAL
10960: IFFALSE 10972
10962: GO 10964
10964: DISABLE
// ChangeMissionObjectives ( M2b ) ;
10965: LD_STRING M2b
10967: PPUSH
10968: CALL_OW 337
10972: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
10973: LD_INT 32
10975: PPUSH
10976: LD_INT 1
10978: PPUSH
10979: CALL_OW 321
10983: PUSH
10984: LD_INT 2
10986: EQUAL
10987: IFFALSE 10999
10989: GO 10991
10991: DISABLE
// ChangeMissionObjectives ( M2c ) ;
10992: LD_STRING M2c
10994: PPUSH
10995: CALL_OW 337
10999: END
// every 0 0$1 trigger arabianDefeated = 1 do
11000: LD_EXP 48
11004: PUSH
11005: LD_INT 1
11007: EQUAL
11008: IFFALSE 11020
11010: GO 11012
11012: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11013: LD_STRING M4a
11015: PPUSH
11016: CALL_OW 337
11020: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11021: LD_INT 54
11023: PPUSH
11024: LD_INT 1
11026: PPUSH
11027: CALL_OW 321
11031: PUSH
11032: LD_INT 2
11034: EQUAL
11035: PUSH
11036: LD_INT 55
11038: PPUSH
11039: LD_INT 1
11041: PPUSH
11042: CALL_OW 321
11046: PUSH
11047: LD_INT 2
11049: EQUAL
11050: AND
11051: PUSH
11052: LD_INT 21
11054: PPUSH
11055: LD_INT 1
11057: PPUSH
11058: CALL_OW 321
11062: PUSH
11063: LD_INT 2
11065: EQUAL
11066: AND
11067: PUSH
11068: LD_INT 22
11070: PPUSH
11071: LD_INT 1
11073: PPUSH
11074: CALL_OW 321
11078: PUSH
11079: LD_INT 2
11081: EQUAL
11082: AND
11083: IFFALSE 11095
11085: GO 11087
11087: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11088: LD_STRING M2a
11090: PPUSH
11091: CALL_OW 337
11095: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11096: LD_INT 0
11098: PPUSH
11099: PPUSH
11100: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11101: LD_ADDR_VAR 0 1
11105: PUSH
11106: LD_VAR 0 1
11110: PUSH
11111: LD_EXP 1
11115: PUSH
11116: LD_EXP 2
11120: PUSH
11121: LD_EXP 3
11125: PUSH
11126: LD_EXP 4
11130: PUSH
11131: LD_EXP 5
11135: PUSH
11136: LD_EXP 6
11140: PUSH
11141: LD_EXP 7
11145: PUSH
11146: LD_EXP 8
11150: PUSH
11151: LD_EXP 9
11155: PUSH
11156: LD_EXP 10
11160: PUSH
11161: LD_EXP 11
11165: PUSH
11166: LD_EXP 12
11170: PUSH
11171: LD_EXP 13
11175: PUSH
11176: LD_EXP 14
11180: PUSH
11181: LD_EXP 15
11185: PUSH
11186: LD_EXP 16
11190: PUSH
11191: LD_EXP 17
11195: PUSH
11196: LD_EXP 18
11200: PUSH
11201: LD_EXP 19
11205: PUSH
11206: LD_EXP 24
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: DIFF
11233: ST_TO_ADDR
// if not characters then
11234: LD_VAR 0 1
11238: NOT
11239: IFFALSE 11243
// exit ;
11241: GO 11389
// rnd = rand ( 1 , characters ) ;
11243: LD_ADDR_VAR 0 6
11247: PUSH
11248: LD_INT 1
11250: PPUSH
11251: LD_VAR 0 1
11255: PPUSH
11256: CALL_OW 12
11260: ST_TO_ADDR
// for i = 1 to characters do
11261: LD_ADDR_VAR 0 5
11265: PUSH
11266: DOUBLE
11267: LD_INT 1
11269: DEC
11270: ST_TO_ADDR
11271: LD_VAR 0 1
11275: PUSH
11276: FOR_TO
11277: IFFALSE 11387
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11279: LD_VAR 0 5
11283: PUSH
11284: LD_VAR 0 6
11288: EQUAL
11289: PUSH
11290: LD_VAR 0 1
11294: PUSH
11295: LD_VAR 0 5
11299: ARRAY
11300: PPUSH
11301: CALL_OW 258
11305: PUSH
11306: LD_INT 1
11308: EQUAL
11309: AND
11310: IFFALSE 11332
// Say ( characters [ i ] , dialogMID ) ;
11312: LD_VAR 0 1
11316: PUSH
11317: LD_VAR 0 5
11321: ARRAY
11322: PPUSH
11323: LD_VAR 0 2
11327: PPUSH
11328: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11332: LD_VAR 0 5
11336: PUSH
11337: LD_VAR 0 6
11341: EQUAL
11342: PUSH
11343: LD_VAR 0 1
11347: PUSH
11348: LD_VAR 0 5
11352: ARRAY
11353: PPUSH
11354: CALL_OW 258
11358: PUSH
11359: LD_INT 2
11361: EQUAL
11362: AND
11363: IFFALSE 11385
// Say ( characters [ i ] , dialogFID ) ;
11365: LD_VAR 0 1
11369: PUSH
11370: LD_VAR 0 5
11374: ARRAY
11375: PPUSH
11376: LD_VAR 0 3
11380: PPUSH
11381: CALL_OW 88
// end ;
11385: GO 11276
11387: POP
11388: POP
// end ;
11389: LD_VAR 0 4
11393: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11394: LD_INT 0
11396: PPUSH
11397: PPUSH
// for i in charactersList do
11398: LD_ADDR_VAR 0 4
11402: PUSH
11403: LD_VAR 0 1
11407: PUSH
11408: FOR_IN
11409: IFFALSE 11427
// SaveCharacters ( i , ident ) ;
11411: LD_VAR 0 4
11415: PPUSH
11416: LD_VAR 0 2
11420: PPUSH
11421: CALL_OW 38
11425: GO 11408
11427: POP
11428: POP
// end ;
11429: LD_VAR 0 3
11433: RET
// export function PrepareDifficulty ; begin
11434: LD_INT 0
11436: PPUSH
// if difficulty = 1 then
11437: LD_OWVAR 67
11441: PUSH
11442: LD_INT 1
11444: EQUAL
11445: IFFALSE 11489
// begin RuSolMinLevel = 3 ;
11447: LD_ADDR_EXP 36
11451: PUSH
11452: LD_INT 3
11454: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11455: LD_ADDR_EXP 37
11459: PUSH
11460: LD_INT 5
11462: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11463: LD_INT 51
11465: PPUSH
11466: LD_INT 6
11468: PPUSH
11469: LD_INT 2
11471: PPUSH
11472: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11476: LD_INT 51
11478: PPUSH
11479: LD_INT 5
11481: PPUSH
11482: LD_INT 2
11484: PPUSH
11485: CALL_OW 322
// end ; if difficulty = 2 then
11489: LD_OWVAR 67
11493: PUSH
11494: LD_INT 2
11496: EQUAL
11497: IFFALSE 11593
// begin RuSolMinLevel = 5 ;
11499: LD_ADDR_EXP 36
11503: PUSH
11504: LD_INT 5
11506: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11507: LD_ADDR_EXP 37
11511: PUSH
11512: LD_INT 7
11514: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11515: LD_INT 51
11517: PPUSH
11518: LD_INT 6
11520: PPUSH
11521: LD_INT 2
11523: PPUSH
11524: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11528: LD_INT 57
11530: PPUSH
11531: LD_INT 6
11533: PPUSH
11534: LD_INT 2
11536: PPUSH
11537: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11541: LD_INT 63
11543: PPUSH
11544: LD_INT 6
11546: PPUSH
11547: LD_INT 2
11549: PPUSH
11550: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11554: LD_INT 51
11556: PPUSH
11557: LD_INT 5
11559: PPUSH
11560: LD_INT 2
11562: PPUSH
11563: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11567: LD_INT 5
11569: PPUSH
11570: LD_INT 2
11572: PPUSH
11573: LD_INT 2
11575: PPUSH
11576: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11580: LD_INT 5
11582: PPUSH
11583: LD_INT 5
11585: PPUSH
11586: LD_INT 2
11588: PPUSH
11589: CALL_OW 322
// end ; if difficulty >= 3 then
11593: LD_OWVAR 67
11597: PUSH
11598: LD_INT 3
11600: GREATEREQUAL
11601: IFFALSE 11749
// begin RuSolMinLevel = 6 ;
11603: LD_ADDR_EXP 36
11607: PUSH
11608: LD_INT 6
11610: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11611: LD_ADDR_EXP 37
11615: PUSH
11616: LD_INT 8
11618: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11619: LD_INT 51
11621: PPUSH
11622: LD_INT 6
11624: PPUSH
11625: LD_INT 2
11627: PPUSH
11628: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11632: LD_INT 57
11634: PPUSH
11635: LD_INT 6
11637: PPUSH
11638: LD_INT 2
11640: PPUSH
11641: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11645: LD_INT 52
11647: PPUSH
11648: LD_INT 6
11650: PPUSH
11651: LD_INT 2
11653: PPUSH
11654: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11658: LD_INT 58
11660: PPUSH
11661: LD_INT 6
11663: PPUSH
11664: LD_INT 2
11666: PPUSH
11667: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11671: LD_INT 63
11673: PPUSH
11674: LD_INT 6
11676: PPUSH
11677: LD_INT 2
11679: PPUSH
11680: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11684: LD_INT 64
11686: PPUSH
11687: LD_INT 6
11689: PPUSH
11690: LD_INT 2
11692: PPUSH
11693: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11697: LD_INT 51
11699: PPUSH
11700: LD_INT 5
11702: PPUSH
11703: LD_INT 2
11705: PPUSH
11706: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
11710: LD_INT 52
11712: PPUSH
11713: LD_INT 5
11715: PPUSH
11716: LD_INT 2
11718: PPUSH
11719: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
11723: LD_INT 66
11725: PPUSH
11726: LD_INT 2
11728: PPUSH
11729: LD_INT 2
11731: PPUSH
11732: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
11736: LD_INT 66
11738: PPUSH
11739: LD_INT 5
11741: PPUSH
11742: LD_INT 2
11744: PPUSH
11745: CALL_OW 322
// end ; end ;
11749: LD_VAR 0 1
11753: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
11754: LD_INT 0
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
11760: PPUSH
11761: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
11762: LD_ADDR_VAR 0 7
11766: PUSH
11767: LD_INT 43
11769: PUSH
11770: LD_INT 68
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 43
11779: PUSH
11780: LD_INT 79
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 99
11789: PUSH
11790: LD_INT 114
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 103
11799: PUSH
11800: LD_INT 114
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 156
11809: PUSH
11810: LD_INT 92
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 152
11819: PUSH
11820: LD_INT 85
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: ST_TO_ADDR
// for i in sources do
11835: LD_ADDR_VAR 0 3
11839: PUSH
11840: LD_VAR 0 7
11844: PUSH
11845: FOR_IN
11846: IFFALSE 11875
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
11848: LD_VAR 0 3
11852: PUSH
11853: LD_INT 1
11855: ARRAY
11856: PPUSH
11857: LD_VAR 0 3
11861: PUSH
11862: LD_INT 2
11864: ARRAY
11865: PPUSH
11866: LD_INT 3
11868: PPUSH
11869: CALL_OW 441
11873: GO 11845
11875: POP
11876: POP
// case position of 1 :
11877: LD_VAR 0 1
11881: PUSH
11882: LD_INT 1
11884: DOUBLE
11885: EQUAL
11886: IFTRUE 11890
11888: GO 11901
11890: POP
// area := westConv ; 2 :
11891: LD_ADDR_VAR 0 6
11895: PUSH
11896: LD_INT 20
11898: ST_TO_ADDR
11899: GO 11940
11901: LD_INT 2
11903: DOUBLE
11904: EQUAL
11905: IFTRUE 11909
11907: GO 11920
11909: POP
// area := midConv ; 3 :
11910: LD_ADDR_VAR 0 6
11914: PUSH
11915: LD_INT 21
11917: ST_TO_ADDR
11918: GO 11940
11920: LD_INT 3
11922: DOUBLE
11923: EQUAL
11924: IFTRUE 11928
11926: GO 11939
11928: POP
// area := eastConv ; end ;
11929: LD_ADDR_VAR 0 6
11933: PUSH
11934: LD_INT 22
11936: ST_TO_ADDR
11937: GO 11940
11939: POP
// area := AreaToList ( area , 0 ) ;
11940: LD_ADDR_VAR 0 6
11944: PUSH
11945: LD_VAR 0 6
11949: PPUSH
11950: LD_INT 0
11952: PPUSH
11953: CALL_OW 517
11957: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
11958: LD_ADDR_VAR 0 3
11962: PUSH
11963: DOUBLE
11964: LD_INT 1
11966: DEC
11967: ST_TO_ADDR
11968: LD_VAR 0 6
11972: PUSH
11973: LD_INT 1
11975: ARRAY
11976: PUSH
11977: FOR_TO
11978: IFFALSE 12059
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
11980: LD_VAR 0 6
11984: PUSH
11985: LD_INT 1
11987: ARRAY
11988: PUSH
11989: LD_VAR 0 3
11993: ARRAY
11994: PPUSH
11995: LD_VAR 0 6
11999: PUSH
12000: LD_INT 2
12002: ARRAY
12003: PUSH
12004: LD_VAR 0 3
12008: ARRAY
12009: PPUSH
12010: LD_INT 1
12012: PPUSH
12013: LD_INT 1
12015: PPUSH
12016: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12020: LD_VAR 0 6
12024: PUSH
12025: LD_INT 1
12027: ARRAY
12028: PUSH
12029: LD_VAR 0 3
12033: ARRAY
12034: PPUSH
12035: LD_VAR 0 6
12039: PUSH
12040: LD_INT 2
12042: ARRAY
12043: PUSH
12044: LD_VAR 0 3
12048: ARRAY
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: CALL_OW 331
// end ;
12057: GO 11977
12059: POP
12060: POP
// ruPossition = position ;
12061: LD_ADDR_EXP 41
12065: PUSH
12066: LD_VAR 0 1
12070: ST_TO_ADDR
// if position = 1 then
12071: LD_VAR 0 1
12075: PUSH
12076: LD_INT 1
12078: EQUAL
12079: IFFALSE 12827
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12081: LD_ADDR_VAR 0 4
12085: PUSH
12086: LD_INT 22
12088: PUSH
12089: LD_INT 3
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 25
12098: PUSH
12099: LD_INT 2
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PPUSH
12110: CALL_OW 69
12114: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12115: LD_ADDR_VAR 0 5
12119: PUSH
12120: LD_INT 0
12122: PUSH
12123: LD_INT 49
12125: PUSH
12126: LD_INT 74
12128: PUSH
12129: LD_INT 3
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 4
12140: PUSH
12141: LD_INT 73
12143: PUSH
12144: LD_INT 88
12146: PUSH
12147: LD_INT 5
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: PUSH
12156: LD_INT 4
12158: PUSH
12159: LD_INT 56
12161: PUSH
12162: LD_INT 62
12164: PUSH
12165: LD_INT 3
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 29
12176: PUSH
12177: LD_INT 43
12179: PUSH
12180: LD_INT 68
12182: PUSH
12183: LD_INT 2
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 30
12194: PUSH
12195: LD_INT 43
12197: PUSH
12198: LD_INT 79
12200: PUSH
12201: LD_INT 5
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 28
12212: PUSH
12213: LD_INT 60
12215: PUSH
12216: LD_INT 75
12218: PUSH
12219: LD_INT 1
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 2
12230: PUSH
12231: LD_INT 50
12233: PUSH
12234: LD_INT 87
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 28
12248: PUSH
12249: LD_INT 45
12251: PUSH
12252: LD_INT 67
12254: PUSH
12255: LD_INT 2
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 17
12266: PUSH
12267: LD_INT 47
12269: PUSH
12270: LD_INT 84
12272: PUSH
12273: LD_INT 2
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 18
12284: PUSH
12285: LD_INT 46
12287: PUSH
12288: LD_INT 87
12290: PUSH
12291: LD_INT 1
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 28
12302: PUSH
12303: LD_INT 41
12305: PUSH
12306: LD_INT 64
12308: PUSH
12309: LD_INT 5
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: PUSH
12318: LD_INT 32
12320: PUSH
12321: LD_INT 75
12323: PUSH
12324: LD_INT 76
12326: PUSH
12327: LD_INT 5
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 32
12338: PUSH
12339: LD_INT 77
12341: PUSH
12342: LD_INT 75
12344: PUSH
12345: LD_INT 5
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 32
12356: PUSH
12357: LD_INT 69
12359: PUSH
12360: LD_INT 68
12362: PUSH
12363: LD_INT 3
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 32
12374: PUSH
12375: LD_INT 59
12377: PUSH
12378: LD_INT 96
12380: PUSH
12381: LD_INT 5
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 32
12392: PUSH
12393: LD_INT 56
12395: PUSH
12396: LD_INT 96
12398: PUSH
12399: LD_INT 0
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: PUSH
12408: LD_INT 32
12410: PUSH
12411: LD_INT 51
12413: PUSH
12414: LD_INT 61
12416: PUSH
12417: LD_INT 3
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 32
12428: PUSH
12429: LD_INT 42
12431: PUSH
12432: LD_INT 60
12434: PUSH
12435: LD_INT 3
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 32
12446: PUSH
12447: LD_INT 36
12449: PUSH
12450: LD_INT 58
12452: PUSH
12453: LD_INT 3
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 32
12464: PUSH
12465: LD_INT 39
12467: PUSH
12468: LD_INT 59
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 32
12482: PUSH
12483: LD_INT 61
12485: PUSH
12486: LD_INT 64
12488: PUSH
12489: LD_INT 3
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 33
12500: PUSH
12501: LD_INT 63
12503: PUSH
12504: LD_INT 90
12506: PUSH
12507: LD_INT 5
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 33
12518: PUSH
12519: LD_INT 64
12521: PUSH
12522: LD_INT 88
12524: PUSH
12525: LD_INT 5
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 33
12536: PUSH
12537: LD_INT 72
12539: PUSH
12540: LD_INT 82
12542: PUSH
12543: LD_INT 5
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 6
12554: PUSH
12555: LD_INT 42
12557: PUSH
12558: LD_INT 74
12560: PUSH
12561: LD_INT 1
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 6
12572: PUSH
12573: LD_INT 56
12575: PUSH
12576: LD_INT 77
12578: PUSH
12579: LD_INT 2
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 21
12590: PUSH
12591: LD_INT 54
12593: PUSH
12594: LD_INT 91
12596: PUSH
12597: LD_INT 5
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 16
12608: PUSH
12609: LD_INT 50
12611: PUSH
12612: LD_INT 83
12614: PUSH
12615: LD_INT 3
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 24
12626: PUSH
12627: LD_INT 50
12629: PUSH
12630: LD_INT 90
12632: PUSH
12633: LD_INT 0
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12673: LD_ADDR_VAR 0 3
12677: PUSH
12678: LD_INT 22
12680: PUSH
12681: LD_INT 3
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: LD_INT 3
12690: PUSH
12691: LD_INT 25
12693: PUSH
12694: LD_INT 2
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PPUSH
12709: CALL_OW 69
12713: PUSH
12714: FOR_IN
12715: IFFALSE 12734
// AddComAgressiveMove ( i , 53 , 82 ) ;
12717: LD_VAR 0 3
12721: PPUSH
12722: LD_INT 53
12724: PPUSH
12725: LD_INT 82
12727: PPUSH
12728: CALL_OW 174
12732: GO 12714
12734: POP
12735: POP
// for i := 1 to buildingsTab do
12736: LD_ADDR_VAR 0 3
12740: PUSH
12741: DOUBLE
12742: LD_INT 1
12744: DEC
12745: ST_TO_ADDR
12746: LD_VAR 0 5
12750: PUSH
12751: FOR_TO
12752: IFFALSE 12825
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12754: LD_VAR 0 4
12758: PPUSH
12759: LD_VAR 0 5
12763: PUSH
12764: LD_VAR 0 3
12768: ARRAY
12769: PUSH
12770: LD_INT 1
12772: ARRAY
12773: PPUSH
12774: LD_VAR 0 5
12778: PUSH
12779: LD_VAR 0 3
12783: ARRAY
12784: PUSH
12785: LD_INT 2
12787: ARRAY
12788: PPUSH
12789: LD_VAR 0 5
12793: PUSH
12794: LD_VAR 0 3
12798: ARRAY
12799: PUSH
12800: LD_INT 3
12802: ARRAY
12803: PPUSH
12804: LD_VAR 0 5
12808: PUSH
12809: LD_VAR 0 3
12813: ARRAY
12814: PUSH
12815: LD_INT 4
12817: ARRAY
12818: PPUSH
12819: CALL_OW 205
12823: GO 12751
12825: POP
12826: POP
// end ; if position = 2 then
12827: LD_VAR 0 1
12831: PUSH
12832: LD_INT 2
12834: EQUAL
12835: IFFALSE 13450
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12837: LD_ADDR_VAR 0 4
12841: PUSH
12842: LD_INT 22
12844: PUSH
12845: LD_INT 3
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 25
12854: PUSH
12855: LD_INT 2
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PPUSH
12866: CALL_OW 69
12870: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
12871: LD_ADDR_VAR 0 5
12875: PUSH
12876: LD_INT 0
12878: PUSH
12879: LD_INT 104
12881: PUSH
12882: LD_INT 110
12884: PUSH
12885: LD_INT 5
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 4
12896: PUSH
12897: LD_INT 98
12899: PUSH
12900: LD_INT 90
12902: PUSH
12903: LD_INT 3
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 29
12914: PUSH
12915: LD_INT 103
12917: PUSH
12918: LD_INT 114
12920: PUSH
12921: LD_INT 2
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 30
12932: PUSH
12933: LD_INT 99
12935: PUSH
12936: LD_INT 114
12938: PUSH
12939: LD_INT 3
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: PUSH
12948: LD_INT 28
12950: PUSH
12951: LD_INT 100
12953: PUSH
12954: LD_INT 112
12956: PUSH
12957: LD_INT 1
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 2
12968: PUSH
12969: LD_INT 92
12971: PUSH
12972: LD_INT 101
12974: PUSH
12975: LD_INT 0
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: PUSH
12984: LD_INT 28
12986: PUSH
12987: LD_INT 97
12989: PUSH
12990: LD_INT 116
12992: PUSH
12993: LD_INT 5
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 17
13004: PUSH
13005: LD_INT 96
13007: PUSH
13008: LD_INT 101
13010: PUSH
13011: LD_INT 4
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: PUSH
13020: LD_INT 18
13022: PUSH
13023: LD_INT 88
13025: PUSH
13026: LD_INT 97
13028: PUSH
13029: LD_INT 2
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 28
13040: PUSH
13041: LD_INT 106
13043: PUSH
13044: LD_INT 92
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 32
13058: PUSH
13059: LD_INT 88
13061: PUSH
13062: LD_INT 89
13064: PUSH
13065: LD_INT 2
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 32
13076: PUSH
13077: LD_INT 86
13079: PUSH
13080: LD_INT 90
13082: PUSH
13083: LD_INT 2
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: PUSH
13092: LD_INT 32
13094: PUSH
13095: LD_INT 85
13097: PUSH
13098: LD_INT 99
13100: PUSH
13101: LD_INT 2
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: PUSH
13110: LD_INT 32
13112: PUSH
13113: LD_INT 85
13115: PUSH
13116: LD_INT 107
13118: PUSH
13119: LD_INT 1
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: PUSH
13128: LD_INT 33
13130: PUSH
13131: LD_INT 105
13133: PUSH
13134: LD_INT 99
13136: PUSH
13137: LD_INT 1
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: PUSH
13146: LD_INT 33
13148: PUSH
13149: LD_INT 102
13151: PUSH
13152: LD_INT 92
13154: PUSH
13155: LD_INT 3
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: PUSH
13164: LD_INT 33
13166: PUSH
13167: LD_INT 105
13169: PUSH
13170: LD_INT 92
13172: PUSH
13173: LD_INT 2
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: PUSH
13182: LD_INT 6
13184: PUSH
13185: LD_INT 92
13187: PUSH
13188: LD_INT 110
13190: PUSH
13191: LD_INT 0
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: PUSH
13200: LD_INT 6
13202: PUSH
13203: LD_INT 103
13205: PUSH
13206: LD_INT 103
13208: PUSH
13209: LD_INT 5
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: PUSH
13218: LD_INT 21
13220: PUSH
13221: LD_INT 89
13223: PUSH
13224: LD_INT 101
13226: PUSH
13227: LD_INT 1
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: PUSH
13236: LD_INT 16
13238: PUSH
13239: LD_INT 95
13241: PUSH
13242: LD_INT 104
13244: PUSH
13245: LD_INT 4
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 24
13256: PUSH
13257: LD_INT 92
13259: PUSH
13260: LD_INT 105
13262: PUSH
13263: LD_INT 0
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13296: LD_ADDR_VAR 0 3
13300: PUSH
13301: LD_INT 22
13303: PUSH
13304: LD_INT 3
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 3
13313: PUSH
13314: LD_INT 25
13316: PUSH
13317: LD_INT 2
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PPUSH
13332: CALL_OW 69
13336: PUSH
13337: FOR_IN
13338: IFFALSE 13357
// AddComAgressiveMove ( i , 96 , 99 ) ;
13340: LD_VAR 0 3
13344: PPUSH
13345: LD_INT 96
13347: PPUSH
13348: LD_INT 99
13350: PPUSH
13351: CALL_OW 174
13355: GO 13337
13357: POP
13358: POP
// for i := 1 to buildingsTab do
13359: LD_ADDR_VAR 0 3
13363: PUSH
13364: DOUBLE
13365: LD_INT 1
13367: DEC
13368: ST_TO_ADDR
13369: LD_VAR 0 5
13373: PUSH
13374: FOR_TO
13375: IFFALSE 13448
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13377: LD_VAR 0 4
13381: PPUSH
13382: LD_VAR 0 5
13386: PUSH
13387: LD_VAR 0 3
13391: ARRAY
13392: PUSH
13393: LD_INT 1
13395: ARRAY
13396: PPUSH
13397: LD_VAR 0 5
13401: PUSH
13402: LD_VAR 0 3
13406: ARRAY
13407: PUSH
13408: LD_INT 2
13410: ARRAY
13411: PPUSH
13412: LD_VAR 0 5
13416: PUSH
13417: LD_VAR 0 3
13421: ARRAY
13422: PUSH
13423: LD_INT 3
13425: ARRAY
13426: PPUSH
13427: LD_VAR 0 5
13431: PUSH
13432: LD_VAR 0 3
13436: ARRAY
13437: PUSH
13438: LD_INT 4
13440: ARRAY
13441: PPUSH
13442: CALL_OW 205
13446: GO 13374
13448: POP
13449: POP
// end ; if position = 3 then
13450: LD_VAR 0 1
13454: PUSH
13455: LD_INT 3
13457: EQUAL
13458: IFFALSE 14244
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13460: LD_ADDR_VAR 0 4
13464: PUSH
13465: LD_INT 22
13467: PUSH
13468: LD_INT 3
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PUSH
13475: LD_INT 25
13477: PUSH
13478: LD_INT 2
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PPUSH
13489: CALL_OW 69
13493: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13494: LD_ADDR_VAR 0 5
13498: PUSH
13499: LD_INT 0
13501: PUSH
13502: LD_INT 151
13504: PUSH
13505: LD_INT 71
13507: PUSH
13508: LD_INT 4
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 4
13519: PUSH
13520: LD_INT 145
13522: PUSH
13523: LD_INT 53
13525: PUSH
13526: LD_INT 3
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 4
13537: PUSH
13538: LD_INT 172
13540: PUSH
13541: LD_INT 102
13543: PUSH
13544: LD_INT 5
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 29
13555: PUSH
13556: LD_INT 152
13558: PUSH
13559: LD_INT 85
13561: PUSH
13562: LD_INT 3
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: PUSH
13571: LD_INT 30
13573: PUSH
13574: LD_INT 156
13576: PUSH
13577: LD_INT 92
13579: PUSH
13580: LD_INT 3
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: PUSH
13589: LD_INT 28
13591: PUSH
13592: LD_INT 151
13594: PUSH
13595: LD_INT 66
13597: PUSH
13598: LD_INT 4
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 2
13609: PUSH
13610: LD_INT 163
13612: PUSH
13613: LD_INT 95
13615: PUSH
13616: LD_INT 5
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: PUSH
13625: LD_INT 28
13627: PUSH
13628: LD_INT 149
13630: PUSH
13631: LD_INT 63
13633: PUSH
13634: LD_INT 4
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 17
13645: PUSH
13646: LD_INT 167
13648: PUSH
13649: LD_INT 99
13651: PUSH
13652: LD_INT 5
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 18
13663: PUSH
13664: LD_INT 163
13666: PUSH
13667: LD_INT 98
13669: PUSH
13670: LD_INT 0
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: PUSH
13679: LD_INT 28
13681: PUSH
13682: LD_INT 154
13684: PUSH
13685: LD_INT 70
13687: PUSH
13688: LD_INT 4
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 32
13699: PUSH
13700: LD_INT 155
13702: PUSH
13703: LD_INT 62
13705: PUSH
13706: LD_INT 4
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 32
13717: PUSH
13718: LD_INT 161
13720: PUSH
13721: LD_INT 69
13723: PUSH
13724: LD_INT 4
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 32
13735: PUSH
13736: LD_INT 168
13738: PUSH
13739: LD_INT 78
13741: PUSH
13742: LD_INT 4
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: PUSH
13751: LD_INT 32
13753: PUSH
13754: LD_INT 163
13756: PUSH
13757: LD_INT 80
13759: PUSH
13760: LD_INT 5
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: PUSH
13769: LD_INT 32
13771: PUSH
13772: LD_INT 136
13774: PUSH
13775: LD_INT 73
13777: PUSH
13778: LD_INT 0
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 32
13789: PUSH
13790: LD_INT 157
13792: PUSH
13793: LD_INT 98
13795: PUSH
13796: LD_INT 0
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: PUSH
13805: LD_INT 32
13807: PUSH
13808: LD_INT 150
13810: PUSH
13811: LD_INT 87
13813: PUSH
13814: LD_INT 1
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 33
13825: PUSH
13826: LD_INT 171
13828: PUSH
13829: LD_INT 97
13831: PUSH
13832: LD_INT 4
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: LD_INT 33
13843: PUSH
13844: LD_INT 168
13846: PUSH
13847: LD_INT 92
13849: PUSH
13850: LD_INT 4
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: LD_INT 33
13861: PUSH
13862: LD_INT 166
13864: PUSH
13865: LD_INT 80
13867: PUSH
13868: LD_INT 5
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: PUSH
13877: LD_INT 33
13879: PUSH
13880: LD_INT 141
13882: PUSH
13883: LD_INT 54
13885: PUSH
13886: LD_INT 2
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 33
13897: PUSH
13898: LD_INT 133
13900: PUSH
13901: LD_INT 57
13903: PUSH
13904: LD_INT 2
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 33
13915: PUSH
13916: LD_INT 132
13918: PUSH
13919: LD_INT 61
13921: PUSH
13922: LD_INT 2
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: LD_INT 33
13933: PUSH
13934: LD_INT 150
13936: PUSH
13937: LD_INT 82
13939: PUSH
13940: LD_INT 0
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 33
13951: PUSH
13952: LD_INT 132
13954: PUSH
13955: LD_INT 72
13957: PUSH
13958: LD_INT 0
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: PUSH
13967: LD_INT 6
13969: PUSH
13970: LD_INT 146
13972: PUSH
13973: LD_INT 64
13975: PUSH
13976: LD_INT 4
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 6
13987: PUSH
13988: LD_INT 159
13990: PUSH
13991: LD_INT 85
13993: PUSH
13994: LD_INT 4
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 21
14005: PUSH
14006: LD_INT 163
14008: PUSH
14009: LD_INT 91
14011: PUSH
14012: LD_INT 3
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 16
14023: PUSH
14024: LD_INT 166
14026: PUSH
14027: LD_INT 95
14029: PUSH
14030: LD_INT 4
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 24
14041: PUSH
14042: LD_INT 159
14044: PUSH
14045: LD_INT 95
14047: PUSH
14048: LD_INT 1
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14090: LD_ADDR_VAR 0 3
14094: PUSH
14095: LD_INT 22
14097: PUSH
14098: LD_INT 3
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 3
14107: PUSH
14108: LD_INT 25
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PPUSH
14126: CALL_OW 69
14130: PUSH
14131: FOR_IN
14132: IFFALSE 14151
// AddComAgressiveMove ( i , 141 , 65 ) ;
14134: LD_VAR 0 3
14138: PPUSH
14139: LD_INT 141
14141: PPUSH
14142: LD_INT 65
14144: PPUSH
14145: CALL_OW 174
14149: GO 14131
14151: POP
14152: POP
// for i := 1 to buildingsTab do
14153: LD_ADDR_VAR 0 3
14157: PUSH
14158: DOUBLE
14159: LD_INT 1
14161: DEC
14162: ST_TO_ADDR
14163: LD_VAR 0 5
14167: PUSH
14168: FOR_TO
14169: IFFALSE 14242
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14171: LD_VAR 0 4
14175: PPUSH
14176: LD_VAR 0 5
14180: PUSH
14181: LD_VAR 0 3
14185: ARRAY
14186: PUSH
14187: LD_INT 1
14189: ARRAY
14190: PPUSH
14191: LD_VAR 0 5
14195: PUSH
14196: LD_VAR 0 3
14200: ARRAY
14201: PUSH
14202: LD_INT 2
14204: ARRAY
14205: PPUSH
14206: LD_VAR 0 5
14210: PUSH
14211: LD_VAR 0 3
14215: ARRAY
14216: PUSH
14217: LD_INT 3
14219: ARRAY
14220: PPUSH
14221: LD_VAR 0 5
14225: PUSH
14226: LD_VAR 0 3
14230: ARRAY
14231: PUSH
14232: LD_INT 4
14234: ARRAY
14235: PPUSH
14236: CALL_OW 205
14240: GO 14168
14242: POP
14243: POP
// end ; end ;
14244: LD_VAR 0 2
14248: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14249: LD_INT 0
14251: PPUSH
14252: PPUSH
14253: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14254: LD_ADDR_EXP 68
14258: PUSH
14259: LD_INT 0
14261: PUSH
14262: LD_INT 71
14264: PUSH
14265: LD_INT 15
14267: PUSH
14268: LD_INT 3
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 6
14279: PUSH
14280: LD_INT 77
14282: PUSH
14283: LD_INT 18
14285: PUSH
14286: LD_INT 3
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 4
14297: PUSH
14298: LD_INT 77
14300: PUSH
14301: LD_INT 26
14303: PUSH
14304: LD_INT 0
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: PUSH
14313: LD_INT 31
14315: PUSH
14316: LD_INT 72
14318: PUSH
14319: LD_INT 24
14321: PUSH
14322: LD_INT 0
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 31
14333: PUSH
14334: LD_INT 82
14336: PUSH
14337: LD_INT 28
14339: PUSH
14340: LD_INT 0
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 31
14351: PUSH
14352: LD_INT 84
14354: PUSH
14355: LD_INT 21
14357: PUSH
14358: LD_INT 3
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 31
14369: PUSH
14370: LD_INT 66
14372: PUSH
14373: LD_INT 14
14375: PUSH
14376: LD_INT 2
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 27
14387: PUSH
14388: LD_INT 67
14390: PUSH
14391: LD_INT 18
14393: PUSH
14394: LD_INT 5
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 27
14405: PUSH
14406: LD_INT 69
14408: PUSH
14409: LD_INT 23
14411: PUSH
14412: LD_INT 2
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14432: LD_ADDR_VAR 0 3
14436: PUSH
14437: LD_INT 22
14439: PUSH
14440: LD_INT 2
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: LD_INT 25
14449: PUSH
14450: LD_INT 2
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PPUSH
14461: CALL_OW 69
14465: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14466: LD_VAR 0 3
14470: PPUSH
14471: LD_EXP 68
14475: PUSH
14476: LD_INT 1
14478: ARRAY
14479: PUSH
14480: LD_INT 1
14482: ARRAY
14483: PPUSH
14484: LD_EXP 68
14488: PUSH
14489: LD_INT 1
14491: ARRAY
14492: PUSH
14493: LD_INT 2
14495: ARRAY
14496: PPUSH
14497: LD_EXP 68
14501: PUSH
14502: LD_INT 1
14504: ARRAY
14505: PUSH
14506: LD_INT 3
14508: ARRAY
14509: PPUSH
14510: LD_EXP 68
14514: PUSH
14515: LD_INT 1
14517: ARRAY
14518: PUSH
14519: LD_INT 4
14521: ARRAY
14522: PPUSH
14523: CALL_OW 205
// end ;
14527: LD_VAR 0 1
14531: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14532: LD_INT 0
14534: PPUSH
14535: PPUSH
14536: PPUSH
14537: PPUSH
14538: PPUSH
14539: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14540: LD_ADDR_VAR 0 7
14544: PUSH
14545: LD_INT 22
14547: PUSH
14548: LD_VAR 0 1
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 25
14559: PUSH
14560: LD_INT 9
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PPUSH
14571: CALL_OW 69
14575: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14576: LD_ADDR_VAR 0 8
14580: PUSH
14581: LD_INT 22
14583: PUSH
14584: LD_VAR 0 2
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: LD_INT 21
14598: PUSH
14599: LD_INT 3
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PPUSH
14614: CALL_OW 69
14618: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14619: LD_ADDR_VAR 0 5
14623: PUSH
14624: LD_INT 1
14626: PPUSH
14627: LD_INT 3
14629: PPUSH
14630: CALL_OW 12
14634: ST_TO_ADDR
// for i = 1 to list do
14635: LD_ADDR_VAR 0 6
14639: PUSH
14640: DOUBLE
14641: LD_INT 1
14643: DEC
14644: ST_TO_ADDR
14645: LD_VAR 0 7
14649: PUSH
14650: FOR_TO
14651: IFFALSE 15641
// for ta in filter do
14653: LD_ADDR_VAR 0 4
14657: PUSH
14658: LD_VAR 0 8
14662: PUSH
14663: FOR_IN
14664: IFFALSE 15637
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14666: LD_VAR 0 7
14670: PUSH
14671: LD_VAR 0 6
14675: ARRAY
14676: PPUSH
14677: LD_VAR 0 4
14681: PPUSH
14682: CALL_OW 296
14686: PUSH
14687: LD_INT 15
14689: LESSEQUAL
14690: IFFALSE 15635
// begin case c of 1 :
14692: LD_VAR 0 5
14696: PUSH
14697: LD_INT 1
14699: DOUBLE
14700: EQUAL
14701: IFTRUE 14705
14703: GO 15137
14705: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
14706: LD_VAR 0 7
14710: PUSH
14711: LD_VAR 0 6
14715: ARRAY
14716: PPUSH
14717: LD_VAR 0 4
14721: PPUSH
14722: CALL_OW 250
14726: PPUSH
14727: LD_VAR 0 4
14731: PPUSH
14732: CALL_OW 251
14736: PPUSH
14737: CALL_OW 154
// if eventVar2 = 0 then
14741: LD_EXP 66
14745: PUSH
14746: LD_INT 0
14748: EQUAL
14749: IFFALSE 15135
// begin eventVar2 = 1 ;
14751: LD_ADDR_EXP 66
14755: PUSH
14756: LD_INT 1
14758: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14759: LD_INT 245
14761: PPUSH
14762: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14766: LD_VAR 0 4
14770: PPUSH
14771: CALL_OW 250
14775: PPUSH
14776: LD_VAR 0 4
14780: PPUSH
14781: CALL_OW 251
14785: PPUSH
14786: CALL_OW 84
// DialogueOn ;
14790: CALL_OW 6
// if IsOK ( Cyrus ) then
14794: LD_EXP 5
14798: PPUSH
14799: CALL_OW 302
14803: IFFALSE 14819
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14805: LD_EXP 5
14809: PPUSH
14810: LD_STRING D9a-Cyrus-1
14812: PPUSH
14813: CALL_OW 88
// end else
14817: GO 14941
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14819: LD_INT 22
14821: PUSH
14822: LD_INT 1
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 26
14831: PUSH
14832: LD_INT 1
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 2
14841: PUSH
14842: LD_INT 25
14844: PUSH
14845: LD_INT 1
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: LD_INT 25
14854: PUSH
14855: LD_INT 2
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 25
14864: PUSH
14865: LD_INT 3
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 25
14874: PUSH
14875: LD_INT 4
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 25
14884: PUSH
14885: LD_INT 5
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: LIST
14904: PPUSH
14905: CALL_OW 69
14909: PUSH
14910: LD_EXP 1
14914: PUSH
14915: LD_EXP 14
14919: PUSH
14920: LD_EXP 5
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: LIST
14929: DIFF
14930: PPUSH
14931: LD_STRING D9a-Sol1-1
14933: PPUSH
14934: LD_STRING D9a-Sol1-1
14936: PPUSH
14937: CALL 11096 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14941: LD_INT 22
14943: PUSH
14944: LD_INT 1
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: LD_INT 26
14953: PUSH
14954: LD_INT 1
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: LD_INT 25
14966: PUSH
14967: LD_INT 1
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 25
14976: PUSH
14977: LD_INT 2
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 25
14986: PUSH
14987: LD_INT 3
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 25
14996: PUSH
14997: LD_INT 4
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 25
15006: PUSH
15007: LD_INT 5
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: PPUSH
15027: CALL_OW 69
15031: PUSH
15032: LD_EXP 1
15036: PUSH
15037: LD_EXP 14
15041: PUSH
15042: LD_EXP 5
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: LIST
15051: DIFF
15052: PPUSH
15053: LD_STRING D9b-Sol1-1
15055: PPUSH
15056: LD_STRING D9b-Sol1-1
15058: PPUSH
15059: CALL 11096 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15063: LD_STRING 09_arInfo
15065: PPUSH
15066: LD_INT 0
15068: PPUSH
15069: CALL_OW 30
15073: PUSH
15074: LD_INT 1
15076: EQUAL
15077: IFFALSE 15091
// Say ( JMM , D9a-JMM-1 ) ;
15079: LD_EXP 1
15083: PPUSH
15084: LD_STRING D9a-JMM-1
15086: PPUSH
15087: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15091: LD_EXP 1
15095: PPUSH
15096: LD_STRING D9c-JMM-1
15098: PPUSH
15099: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15103: LD_INT 12
15105: PPUSH
15106: LD_INT 1
15108: PPUSH
15109: CALL_OW 321
15113: PUSH
15114: LD_INT 2
15116: EQUAL
15117: IFFALSE 15131
// Say ( JMM , D9c-JMM-1a ) ;
15119: LD_EXP 1
15123: PPUSH
15124: LD_STRING D9c-JMM-1a
15126: PPUSH
15127: CALL_OW 88
// DialogueOff ;
15131: CALL_OW 7
// end ; end ; 2 :
15135: GO 15635
15137: LD_INT 2
15139: DOUBLE
15140: EQUAL
15141: IFTRUE 15145
15143: GO 15603
15145: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15146: LD_VAR 0 7
15150: PUSH
15151: LD_VAR 0 6
15155: ARRAY
15156: PPUSH
15157: LD_VAR 0 4
15161: PPUSH
15162: CALL_OW 250
15166: PUSH
15167: LD_INT 1
15169: NEG
15170: PPUSH
15171: LD_INT 1
15173: PPUSH
15174: CALL_OW 12
15178: PLUS
15179: PPUSH
15180: LD_VAR 0 4
15184: PPUSH
15185: CALL_OW 251
15189: PUSH
15190: LD_INT 1
15192: NEG
15193: PPUSH
15194: LD_INT 1
15196: PPUSH
15197: CALL_OW 12
15201: PLUS
15202: PPUSH
15203: CALL_OW 153
// if eventVar2 = 0 then
15207: LD_EXP 66
15211: PUSH
15212: LD_INT 0
15214: EQUAL
15215: IFFALSE 15601
// begin eventVar2 = 1 ;
15217: LD_ADDR_EXP 66
15221: PUSH
15222: LD_INT 1
15224: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15225: LD_INT 245
15227: PPUSH
15228: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15232: LD_VAR 0 4
15236: PPUSH
15237: CALL_OW 250
15241: PPUSH
15242: LD_VAR 0 4
15246: PPUSH
15247: CALL_OW 251
15251: PPUSH
15252: CALL_OW 84
// DialogueOn ;
15256: CALL_OW 6
// if IsOK ( Cyrus ) then
15260: LD_EXP 5
15264: PPUSH
15265: CALL_OW 302
15269: IFFALSE 15285
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15271: LD_EXP 5
15275: PPUSH
15276: LD_STRING D9a-Cyrus-1
15278: PPUSH
15279: CALL_OW 88
// end else
15283: GO 15407
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15285: LD_INT 22
15287: PUSH
15288: LD_INT 1
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: LD_INT 26
15297: PUSH
15298: LD_INT 1
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 25
15310: PUSH
15311: LD_INT 1
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 25
15320: PUSH
15321: LD_INT 2
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 25
15330: PUSH
15331: LD_INT 3
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 25
15340: PUSH
15341: LD_INT 4
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 25
15350: PUSH
15351: LD_INT 5
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: LIST
15370: PPUSH
15371: CALL_OW 69
15375: PUSH
15376: LD_EXP 1
15380: PUSH
15381: LD_EXP 14
15385: PUSH
15386: LD_EXP 5
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: LIST
15395: DIFF
15396: PPUSH
15397: LD_STRING D9a-Sol1-1
15399: PPUSH
15400: LD_STRING D9a-Sol1-1
15402: PPUSH
15403: CALL 11096 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15407: LD_INT 22
15409: PUSH
15410: LD_INT 1
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 26
15419: PUSH
15420: LD_INT 1
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 2
15429: PUSH
15430: LD_INT 25
15432: PUSH
15433: LD_INT 1
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PUSH
15440: LD_INT 25
15442: PUSH
15443: LD_INT 2
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PUSH
15450: LD_INT 25
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: LD_INT 25
15462: PUSH
15463: LD_INT 4
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 25
15472: PUSH
15473: LD_INT 5
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: LIST
15492: PPUSH
15493: CALL_OW 69
15497: PUSH
15498: LD_EXP 1
15502: PUSH
15503: LD_EXP 14
15507: PUSH
15508: LD_EXP 5
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: DIFF
15518: PPUSH
15519: LD_STRING D9b-Sol1-1
15521: PPUSH
15522: LD_STRING D9b-Sol1-1
15524: PPUSH
15525: CALL 11096 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15529: LD_STRING 09_arInfo
15531: PPUSH
15532: LD_INT 0
15534: PPUSH
15535: CALL_OW 30
15539: PUSH
15540: LD_INT 1
15542: EQUAL
15543: IFFALSE 15557
// Say ( JMM , D9a-JMM-1 ) ;
15545: LD_EXP 1
15549: PPUSH
15550: LD_STRING D9a-JMM-1
15552: PPUSH
15553: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15557: LD_EXP 1
15561: PPUSH
15562: LD_STRING D9c-JMM-1
15564: PPUSH
15565: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15569: LD_INT 12
15571: PPUSH
15572: LD_INT 1
15574: PPUSH
15575: CALL_OW 321
15579: PUSH
15580: LD_INT 2
15582: EQUAL
15583: IFFALSE 15597
// Say ( JMM , D9c-JMM-1a ) ;
15585: LD_EXP 1
15589: PPUSH
15590: LD_STRING D9c-JMM-1a
15592: PPUSH
15593: CALL_OW 88
// DialogueOff ;
15597: CALL_OW 7
// end ; end ; 3 :
15601: GO 15635
15603: LD_INT 3
15605: DOUBLE
15606: EQUAL
15607: IFTRUE 15611
15609: GO 15634
15611: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15612: LD_VAR 0 7
15616: PUSH
15617: LD_VAR 0 6
15621: ARRAY
15622: PPUSH
15623: LD_VAR 0 4
15627: PPUSH
15628: CALL_OW 115
15632: GO 15635
15634: POP
// end ; end ;
15635: GO 14663
15637: POP
15638: POP
15639: GO 14650
15641: POP
15642: POP
// end ;
15643: LD_VAR 0 3
15647: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15648: LD_INT 0
15650: PPUSH
15651: PPUSH
15652: PPUSH
15653: PPUSH
// for i = 1 to 72 do
15654: LD_ADDR_VAR 0 5
15658: PUSH
15659: DOUBLE
15660: LD_INT 1
15662: DEC
15663: ST_TO_ADDR
15664: LD_INT 72
15666: PUSH
15667: FOR_TO
15668: IFFALSE 15726
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15670: LD_VAR 0 5
15674: PPUSH
15675: LD_VAR 0 1
15679: PPUSH
15680: CALL_OW 321
15684: PUSH
15685: LD_INT 1
15687: EQUAL
15688: PUSH
15689: LD_VAR 0 5
15693: PPUSH
15694: LD_VAR 0 3
15698: PPUSH
15699: CALL_OW 482
15703: PUSH
15704: LD_INT 1
15706: EQUAL
15707: AND
15708: IFFALSE 15724
// AddComResearch ( lab , i ) ;
15710: LD_VAR 0 2
15714: PPUSH
15715: LD_VAR 0 5
15719: PPUSH
15720: CALL_OW 184
15724: GO 15667
15726: POP
15727: POP
// end ;
15728: LD_VAR 0 4
15732: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
15733: LD_INT 0
15735: PPUSH
15736: PPUSH
15737: PPUSH
15738: PPUSH
15739: PPUSH
15740: PPUSH
15741: PPUSH
15742: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
15743: LD_ADDR_VAR 0 6
15747: PUSH
15748: LD_INT 22
15750: PUSH
15751: LD_VAR 0 1
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 56
15762: PUSH
15763: EMPTY
15764: LIST
15765: PUSH
15766: LD_INT 24
15768: PUSH
15769: LD_INT 700
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 3
15778: PUSH
15779: LD_INT 60
15781: PUSH
15782: EMPTY
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 2
15791: PUSH
15792: LD_INT 25
15794: PUSH
15795: LD_INT 1
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: LD_INT 25
15804: PUSH
15805: LD_INT 9
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: LIST
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: PPUSH
15824: CALL_OW 69
15828: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
15829: LD_ADDR_VAR 0 7
15833: PUSH
15834: LD_INT 22
15836: PUSH
15837: LD_VAR 0 1
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 30
15848: PUSH
15849: LD_INT 32
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 58
15858: PUSH
15859: EMPTY
15860: LIST
15861: PUSH
15862: LD_INT 24
15864: PUSH
15865: LD_INT 251
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: PPUSH
15878: CALL_OW 69
15882: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
15883: LD_ADDR_VAR 0 9
15887: PUSH
15888: LD_INT 22
15890: PUSH
15891: LD_VAR 0 1
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 2
15902: PUSH
15903: LD_INT 30
15905: PUSH
15906: LD_INT 4
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: LD_INT 30
15915: PUSH
15916: LD_INT 5
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 24
15930: PUSH
15931: LD_INT 251
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: LIST
15942: PPUSH
15943: CALL_OW 69
15947: ST_TO_ADDR
// if barrackList > 0 then
15948: LD_VAR 0 9
15952: PUSH
15953: LD_INT 0
15955: GREATER
15956: IFFALSE 16091
// begin if turretList = 0 then
15958: LD_VAR 0 7
15962: PUSH
15963: LD_INT 0
15965: EQUAL
15966: IFFALSE 16015
// begin for i in soldiers_list do
15968: LD_ADDR_VAR 0 4
15972: PUSH
15973: LD_VAR 0 6
15977: PUSH
15978: FOR_IN
15979: IFFALSE 16011
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
15981: LD_VAR 0 4
15985: PPUSH
15986: LD_VAR 0 9
15990: PUSH
15991: LD_INT 1
15993: PPUSH
15994: LD_VAR 0 9
15998: PPUSH
15999: CALL_OW 12
16003: ARRAY
16004: PPUSH
16005: CALL_OW 120
16009: GO 15978
16011: POP
16012: POP
// end else
16013: GO 16091
// begin for i in barrackList do
16015: LD_ADDR_VAR 0 4
16019: PUSH
16020: LD_VAR 0 9
16024: PUSH
16025: FOR_IN
16026: IFFALSE 16089
// begin insideUnits = UnitsInside ( i ) ;
16028: LD_ADDR_VAR 0 10
16032: PUSH
16033: LD_VAR 0 4
16037: PPUSH
16038: CALL_OW 313
16042: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16043: LD_VAR 0 10
16047: PUSH
16048: LD_INT 1
16050: ARRAY
16051: PPUSH
16052: LD_VAR 0 7
16056: PUSH
16057: LD_INT 1
16059: ARRAY
16060: PPUSH
16061: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16065: LD_VAR 0 6
16069: PUSH
16070: LD_INT 1
16072: ARRAY
16073: PPUSH
16074: LD_VAR 0 7
16078: PUSH
16079: LD_INT 1
16081: ARRAY
16082: PPUSH
16083: CALL_OW 120
// end ;
16087: GO 16025
16089: POP
16090: POP
// end ; end ; end ;
16091: LD_VAR 0 3
16095: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16096: LD_INT 0
16098: PPUSH
16099: PPUSH
16100: PPUSH
16101: PPUSH
16102: PPUSH
16103: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16104: LD_ADDR_VAR 0 6
16108: PUSH
16109: LD_VAR 0 2
16113: PPUSH
16114: CALL_OW 313
16118: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16119: LD_ADDR_VAR 0 7
16123: PUSH
16124: LD_INT 22
16126: PUSH
16127: LD_VAR 0 1
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: LD_INT 25
16138: PUSH
16139: LD_INT 2
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PUSH
16146: LD_INT 24
16148: PUSH
16149: LD_INT 1000
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 3
16158: PUSH
16159: LD_INT 54
16161: PUSH
16162: EMPTY
16163: LIST
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: PPUSH
16175: CALL_OW 69
16179: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16180: LD_ADDR_VAR 0 4
16184: PUSH
16185: LD_INT 22
16187: PUSH
16188: LD_VAR 0 1
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 21
16199: PUSH
16200: LD_INT 3
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 3
16209: PUSH
16210: LD_INT 24
16212: PUSH
16213: LD_INT 1000
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: LIST
16228: PUSH
16229: EMPTY
16230: LIST
16231: PPUSH
16232: CALL_OW 69
16236: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16237: LD_VAR 0 4
16241: NOT
16242: PUSH
16243: LD_VAR 0 7
16247: NOT
16248: AND
16249: PUSH
16250: LD_EXP 42
16254: NOT
16255: AND
16256: IFFALSE 16260
// exit ;
16258: GO 16451
// if buildings_list > 0 and engineerOkInside then
16260: LD_VAR 0 4
16264: PUSH
16265: LD_INT 0
16267: GREATER
16268: PUSH
16269: LD_VAR 0 6
16273: AND
16274: IFFALSE 16328
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16276: LD_ADDR_VAR 0 5
16280: PUSH
16281: LD_INT 22
16283: PUSH
16284: LD_VAR 0 1
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: LD_INT 25
16295: PUSH
16296: LD_INT 2
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PPUSH
16307: CALL_OW 69
16311: PUSH
16312: FOR_IN
16313: IFFALSE 16326
// ComExitBuilding ( i ) ;
16315: LD_VAR 0 5
16319: PPUSH
16320: CALL_OW 122
16324: GO 16312
16326: POP
16327: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16328: LD_VAR 0 4
16332: PUSH
16333: LD_INT 0
16335: GREATER
16336: PUSH
16337: LD_VAR 0 7
16341: PUSH
16342: LD_INT 0
16344: GREATER
16345: AND
16346: IFFALSE 16400
// begin for i in engineerOkOutside do
16348: LD_ADDR_VAR 0 5
16352: PUSH
16353: LD_VAR 0 7
16357: PUSH
16358: FOR_IN
16359: IFFALSE 16398
// for j in buildings_list do
16361: LD_ADDR_VAR 0 8
16365: PUSH
16366: LD_VAR 0 4
16370: PUSH
16371: FOR_IN
16372: IFFALSE 16394
// ComRepairBuilding ( i , j [ 1 ] ) ;
16374: LD_VAR 0 5
16378: PPUSH
16379: LD_VAR 0 8
16383: PUSH
16384: LD_INT 1
16386: ARRAY
16387: PPUSH
16388: CALL_OW 130
16392: GO 16371
16394: POP
16395: POP
16396: GO 16358
16398: POP
16399: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16400: LD_VAR 0 4
16404: PUSH
16405: LD_INT 0
16407: EQUAL
16408: PUSH
16409: LD_VAR 0 7
16413: PUSH
16414: LD_INT 0
16416: GREATER
16417: AND
16418: IFFALSE 16451
// for i in engineerOkOutside do
16420: LD_ADDR_VAR 0 5
16424: PUSH
16425: LD_VAR 0 7
16429: PUSH
16430: FOR_IN
16431: IFFALSE 16449
// ComEnterUnit ( i , building ) ;
16433: LD_VAR 0 5
16437: PPUSH
16438: LD_VAR 0 2
16442: PPUSH
16443: CALL_OW 120
16447: GO 16430
16449: POP
16450: POP
// end ;
16451: LD_VAR 0 3
16455: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16456: LD_INT 0
16458: PPUSH
16459: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16460: LD_INT 22
16462: PUSH
16463: LD_VAR 0 1
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: LD_INT 25
16474: PUSH
16475: LD_INT 2
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL_OW 69
16490: PUSH
16491: LD_INT 0
16493: GREATER
16494: PUSH
16495: LD_INT 22
16497: PUSH
16498: LD_VAR 0 1
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 21
16509: PUSH
16510: LD_INT 3
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 3
16519: PUSH
16520: LD_INT 24
16522: PUSH
16523: LD_INT 1000
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: LIST
16538: PPUSH
16539: CALL_OW 69
16543: PUSH
16544: LD_INT 0
16546: EQUAL
16547: AND
16548: PUSH
16549: LD_VAR 0 2
16553: PUSH
16554: LD_INT 0
16556: GREATER
16557: AND
16558: IFFALSE 16657
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16560: LD_ADDR_VAR 0 4
16564: PUSH
16565: LD_INT 22
16567: PUSH
16568: LD_VAR 0 1
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 25
16579: PUSH
16580: LD_INT 2
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PPUSH
16591: CALL_OW 69
16595: PUSH
16596: FOR_IN
16597: IFFALSE 16655
// begin AddComExitBuilding ( i ) ;
16599: LD_VAR 0 4
16603: PPUSH
16604: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16608: LD_VAR 0 4
16612: PPUSH
16613: LD_VAR 0 2
16617: PUSH
16618: LD_INT 1
16620: ARRAY
16621: PPUSH
16622: LD_VAR 0 2
16626: PUSH
16627: LD_INT 2
16629: ARRAY
16630: PPUSH
16631: LD_VAR 0 2
16635: PUSH
16636: LD_INT 3
16638: ARRAY
16639: PPUSH
16640: LD_VAR 0 2
16644: PUSH
16645: LD_INT 4
16647: ARRAY
16648: PPUSH
16649: CALL_OW 205
// end ;
16653: GO 16596
16655: POP
16656: POP
// end ; end ;
16657: LD_VAR 0 3
16661: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16662: LD_INT 0
16664: PPUSH
16665: PPUSH
16666: PPUSH
16667: PPUSH
16668: PPUSH
16669: PPUSH
16670: PPUSH
16671: PPUSH
16672: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16673: LD_ADDR_VAR 0 6
16677: PUSH
16678: LD_INT 22
16680: PUSH
16681: LD_VAR 0 1
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 25
16692: PUSH
16693: LD_INT 4
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 24
16702: PUSH
16703: LD_INT 251
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: LIST
16714: PPUSH
16715: CALL_OW 69
16719: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
16720: LD_ADDR_VAR 0 7
16724: PUSH
16725: LD_VAR 0 3
16729: PPUSH
16730: LD_INT 22
16732: PUSH
16733: LD_VAR 0 1
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 25
16744: PUSH
16745: LD_INT 4
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 50
16754: PUSH
16755: EMPTY
16756: LIST
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: LIST
16762: PPUSH
16763: CALL_OW 70
16767: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
16768: LD_ADDR_VAR 0 10
16772: PUSH
16773: LD_VAR 0 3
16777: PPUSH
16778: LD_INT 22
16780: PUSH
16781: LD_VAR 0 1
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 21
16792: PUSH
16793: LD_INT 1
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 3
16802: PUSH
16803: LD_INT 25
16805: PUSH
16806: LD_INT 3
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 3
16819: PUSH
16820: LD_INT 24
16822: PUSH
16823: LD_INT 750
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: PPUSH
16840: CALL_OW 70
16844: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16845: LD_ADDR_VAR 0 11
16849: PUSH
16850: LD_VAR 0 2
16854: PPUSH
16855: LD_INT 22
16857: PUSH
16858: LD_VAR 0 1
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 21
16869: PUSH
16870: LD_INT 1
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 3
16879: PUSH
16880: LD_INT 25
16882: PUSH
16883: LD_INT 3
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 3
16896: PUSH
16897: LD_INT 24
16899: PUSH
16900: LD_INT 1000
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: PPUSH
16917: CALL_OW 70
16921: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
16922: LD_VAR 0 10
16926: NOT
16927: PUSH
16928: LD_VAR 0 7
16932: NOT
16933: AND
16934: PUSH
16935: LD_VAR 0 11
16939: NOT
16940: AND
16941: IFFALSE 16945
// exit ;
16943: GO 17205
// if damageUnits > 0 and sci_list > 0 then
16945: LD_VAR 0 10
16949: PUSH
16950: LD_INT 0
16952: GREATER
16953: PUSH
16954: LD_VAR 0 6
16958: PUSH
16959: LD_INT 0
16961: GREATER
16962: AND
16963: IFFALSE 16996
// for i in damageUnits do
16965: LD_ADDR_VAR 0 8
16969: PUSH
16970: LD_VAR 0 10
16974: PUSH
16975: FOR_IN
16976: IFFALSE 16994
// ComMoveToArea ( i , healArea ) ;
16978: LD_VAR 0 8
16982: PPUSH
16983: LD_VAR 0 2
16987: PPUSH
16988: CALL_OW 113
16992: GO 16975
16994: POP
16995: POP
// if unitsToHeal > 0 and sci_list > 0 then
16996: LD_VAR 0 11
17000: PUSH
17001: LD_INT 0
17003: GREATER
17004: PUSH
17005: LD_VAR 0 6
17009: PUSH
17010: LD_INT 0
17012: GREATER
17013: AND
17014: IFFALSE 17073
// begin for i in sci_list do
17016: LD_ADDR_VAR 0 8
17020: PUSH
17021: LD_VAR 0 6
17025: PUSH
17026: FOR_IN
17027: IFFALSE 17071
// begin ComExitBuilding ( i ) ;
17029: LD_VAR 0 8
17033: PPUSH
17034: CALL_OW 122
// for j in unitsToHeal do
17038: LD_ADDR_VAR 0 9
17042: PUSH
17043: LD_VAR 0 11
17047: PUSH
17048: FOR_IN
17049: IFFALSE 17067
// AddComHeal ( i , j ) ;
17051: LD_VAR 0 8
17055: PPUSH
17056: LD_VAR 0 9
17060: PPUSH
17061: CALL_OW 188
17065: GO 17048
17067: POP
17068: POP
// end ;
17069: GO 17026
17071: POP
17072: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17073: LD_VAR 0 10
17077: PUSH
17078: LD_INT 0
17080: EQUAL
17081: PUSH
17082: LD_VAR 0 11
17086: PUSH
17087: LD_INT 0
17089: EQUAL
17090: AND
17091: PUSH
17092: LD_VAR 0 7
17096: PUSH
17097: LD_INT 0
17099: GREATER
17100: AND
17101: IFFALSE 17205
// for i in sci_listOutside do
17103: LD_ADDR_VAR 0 8
17107: PUSH
17108: LD_VAR 0 7
17112: PUSH
17113: FOR_IN
17114: IFFALSE 17203
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17116: LD_ADDR_VAR 0 12
17120: PUSH
17121: LD_INT 22
17123: PUSH
17124: LD_VAR 0 1
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 21
17135: PUSH
17136: LD_INT 3
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 30
17145: PUSH
17146: LD_INT 8
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: LIST
17157: PPUSH
17158: CALL_OW 69
17162: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17163: LD_ADDR_VAR 0 13
17167: PUSH
17168: LD_INT 1
17170: PPUSH
17171: LD_VAR 0 12
17175: PPUSH
17176: CALL_OW 12
17180: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17181: LD_VAR 0 8
17185: PPUSH
17186: LD_VAR 0 12
17190: PUSH
17191: LD_VAR 0 13
17195: ARRAY
17196: PPUSH
17197: CALL_OW 120
// end ;
17201: GO 17113
17203: POP
17204: POP
// end ;
17205: LD_VAR 0 5
17209: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17210: LD_INT 0
17212: PPUSH
17213: PPUSH
17214: PPUSH
17215: PPUSH
17216: PPUSH
17217: PPUSH
17218: PPUSH
17219: PPUSH
17220: PPUSH
17221: PPUSH
17222: PPUSH
// amChassisTab = [ ] ;
17223: LD_ADDR_VAR 0 19
17227: PUSH
17228: EMPTY
17229: ST_TO_ADDR
// arChassisTab = [ ] ;
17230: LD_ADDR_VAR 0 18
17234: PUSH
17235: EMPTY
17236: ST_TO_ADDR
// ruChassisTab = [ ] ;
17237: LD_ADDR_VAR 0 17
17241: PUSH
17242: EMPTY
17243: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17244: LD_INT 35
17246: PPUSH
17247: CALL_OW 67
// if nation = 1 then
17251: LD_VAR 0 5
17255: PUSH
17256: LD_INT 1
17258: EQUAL
17259: IFFALSE 17764
// begin uc_side = side ;
17261: LD_ADDR_OWVAR 20
17265: PUSH
17266: LD_VAR 0 2
17270: ST_TO_ADDR
// uc_nation = nation ;
17271: LD_ADDR_OWVAR 21
17275: PUSH
17276: LD_VAR 0 5
17280: ST_TO_ADDR
// vc_engine = vehengine ;
17281: LD_ADDR_OWVAR 39
17285: PUSH
17286: LD_VAR 0 6
17290: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17291: LD_ADDR_OWVAR 38
17295: PUSH
17296: LD_VAR 0 7
17300: PUSH
17301: LD_INT 1
17303: PPUSH
17304: LD_VAR 0 7
17308: PPUSH
17309: CALL_OW 12
17313: ARRAY
17314: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17315: LD_ADDR_OWVAR 40
17319: PUSH
17320: LD_VAR 0 10
17324: PUSH
17325: LD_INT 1
17327: PPUSH
17328: LD_VAR 0 10
17332: PPUSH
17333: CALL_OW 12
17337: ARRAY
17338: ST_TO_ADDR
// for j = 1 to AMWeapon do
17339: LD_ADDR_VAR 0 14
17343: PUSH
17344: DOUBLE
17345: LD_INT 1
17347: DEC
17348: ST_TO_ADDR
17349: LD_VAR 0 10
17353: PUSH
17354: FOR_TO
17355: IFFALSE 17656
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17357: LD_VAR 0 10
17361: PUSH
17362: LD_VAR 0 14
17366: ARRAY
17367: PUSH
17368: LD_INT 2
17370: EQUAL
17371: PUSH
17372: LD_VAR 0 10
17376: PUSH
17377: LD_VAR 0 14
17381: ARRAY
17382: PUSH
17383: LD_INT 3
17385: EQUAL
17386: OR
17387: IFFALSE 17440
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17389: LD_ADDR_VAR 0 19
17393: PUSH
17394: LD_INT 1
17396: PUSH
17397: LD_INT 2
17399: PUSH
17400: LD_INT 3
17402: PUSH
17403: LD_INT 4
17405: PUSH
17406: LD_INT 5
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17416: LD_ADDR_OWVAR 37
17420: PUSH
17421: LD_VAR 0 19
17425: PUSH
17426: LD_INT 1
17428: PPUSH
17429: LD_VAR 0 19
17433: PPUSH
17434: CALL_OW 12
17438: ARRAY
17439: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17440: LD_VAR 0 10
17444: PUSH
17445: LD_VAR 0 14
17449: ARRAY
17450: PUSH
17451: LD_INT 4
17453: EQUAL
17454: PUSH
17455: LD_VAR 0 10
17459: PUSH
17460: LD_VAR 0 14
17464: ARRAY
17465: PUSH
17466: LD_INT 5
17468: EQUAL
17469: OR
17470: PUSH
17471: LD_VAR 0 10
17475: PUSH
17476: LD_VAR 0 14
17480: ARRAY
17481: PUSH
17482: LD_INT 9
17484: EQUAL
17485: OR
17486: PUSH
17487: LD_VAR 0 10
17491: PUSH
17492: LD_VAR 0 14
17496: ARRAY
17497: PUSH
17498: LD_INT 11
17500: EQUAL
17501: OR
17502: PUSH
17503: LD_VAR 0 10
17507: PUSH
17508: LD_VAR 0 14
17512: ARRAY
17513: PUSH
17514: LD_INT 7
17516: EQUAL
17517: OR
17518: IFFALSE 17567
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17520: LD_ADDR_VAR 0 19
17524: PUSH
17525: LD_INT 2
17527: PUSH
17528: LD_INT 3
17530: PUSH
17531: LD_INT 4
17533: PUSH
17534: LD_INT 5
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17543: LD_ADDR_OWVAR 37
17547: PUSH
17548: LD_VAR 0 19
17552: PUSH
17553: LD_INT 1
17555: PPUSH
17556: LD_VAR 0 19
17560: PPUSH
17561: CALL_OW 12
17565: ARRAY
17566: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17567: LD_VAR 0 10
17571: PUSH
17572: LD_VAR 0 14
17576: ARRAY
17577: PUSH
17578: LD_INT 8
17580: EQUAL
17581: PUSH
17582: LD_VAR 0 10
17586: PUSH
17587: LD_VAR 0 14
17591: ARRAY
17592: PUSH
17593: LD_INT 6
17595: EQUAL
17596: OR
17597: PUSH
17598: LD_VAR 0 10
17602: PUSH
17603: LD_VAR 0 14
17607: ARRAY
17608: PUSH
17609: LD_INT 10
17611: EQUAL
17612: OR
17613: IFFALSE 17654
// begin amChassisTab = [ 4 , 5 ] ;
17615: LD_ADDR_VAR 0 19
17619: PUSH
17620: LD_INT 4
17622: PUSH
17623: LD_INT 5
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17630: LD_ADDR_OWVAR 37
17634: PUSH
17635: LD_VAR 0 19
17639: PUSH
17640: LD_INT 1
17642: PPUSH
17643: LD_VAR 0 19
17647: PPUSH
17648: CALL_OW 12
17652: ARRAY
17653: ST_TO_ADDR
// end ; end ;
17654: GO 17354
17656: POP
17657: POP
// veh = CreateVehicle ;
17658: LD_ADDR_VAR 0 16
17662: PUSH
17663: CALL_OW 45
17667: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17668: LD_VAR 0 16
17672: PPUSH
17673: LD_VAR 0 1
17677: PPUSH
17678: LD_INT 0
17680: PPUSH
17681: CALL_OW 49
// if vc_control = 1 then
17685: LD_OWVAR 38
17689: PUSH
17690: LD_INT 1
17692: EQUAL
17693: IFFALSE 17750
// begin hc_gallery =  ;
17695: LD_ADDR_OWVAR 33
17699: PUSH
17700: LD_STRING 
17702: ST_TO_ADDR
// hc_name =  ;
17703: LD_ADDR_OWVAR 26
17707: PUSH
17708: LD_STRING 
17710: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17711: LD_INT 0
17713: PPUSH
17714: LD_INT 3
17716: PPUSH
17717: LD_VAR 0 4
17721: PPUSH
17722: CALL_OW 380
// un = CreateHuman ;
17726: LD_ADDR_VAR 0 15
17730: PUSH
17731: CALL_OW 44
17735: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17736: LD_VAR 0 15
17740: PPUSH
17741: LD_VAR 0 16
17745: PPUSH
17746: CALL_OW 52
// end ; i = i + 1 ;
17750: LD_ADDR_VAR 0 13
17754: PUSH
17755: LD_VAR 0 13
17759: PUSH
17760: LD_INT 1
17762: PLUS
17763: ST_TO_ADDR
// end ; if nation = 2 then
17764: LD_VAR 0 5
17768: PUSH
17769: LD_INT 2
17771: EQUAL
17772: IFFALSE 18194
// begin uc_side = side ;
17774: LD_ADDR_OWVAR 20
17778: PUSH
17779: LD_VAR 0 2
17783: ST_TO_ADDR
// uc_nation = nation ;
17784: LD_ADDR_OWVAR 21
17788: PUSH
17789: LD_VAR 0 5
17793: ST_TO_ADDR
// vc_engine = vehengine ;
17794: LD_ADDR_OWVAR 39
17798: PUSH
17799: LD_VAR 0 6
17803: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17804: LD_ADDR_OWVAR 38
17808: PUSH
17809: LD_VAR 0 7
17813: PUSH
17814: LD_INT 1
17816: PPUSH
17817: LD_VAR 0 7
17821: PPUSH
17822: CALL_OW 12
17826: ARRAY
17827: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
17828: LD_ADDR_OWVAR 40
17832: PUSH
17833: LD_VAR 0 9
17837: PUSH
17838: LD_INT 1
17840: PPUSH
17841: LD_VAR 0 9
17845: PPUSH
17846: CALL_OW 12
17850: ARRAY
17851: ST_TO_ADDR
// for j = 1 to ARWeapons do
17852: LD_ADDR_VAR 0 14
17856: PUSH
17857: DOUBLE
17858: LD_INT 1
17860: DEC
17861: ST_TO_ADDR
17862: LD_VAR 0 9
17866: PUSH
17867: FOR_TO
17868: IFFALSE 18086
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
17870: LD_VAR 0 9
17874: PUSH
17875: LD_VAR 0 14
17879: ARRAY
17880: PUSH
17881: LD_INT 24
17883: EQUAL
17884: PUSH
17885: LD_VAR 0 9
17889: PUSH
17890: LD_VAR 0 14
17894: ARRAY
17895: PUSH
17896: LD_INT 22
17898: EQUAL
17899: OR
17900: PUSH
17901: LD_VAR 0 9
17905: PUSH
17906: LD_VAR 0 14
17910: ARRAY
17911: PUSH
17912: LD_INT 23
17914: EQUAL
17915: OR
17916: PUSH
17917: LD_VAR 0 9
17921: PUSH
17922: LD_VAR 0 14
17926: ARRAY
17927: PUSH
17928: LD_INT 30
17930: EQUAL
17931: OR
17932: IFFALSE 17969
// begin arChassisTab = [ 14 ] ;
17934: LD_ADDR_VAR 0 18
17938: PUSH
17939: LD_INT 14
17941: PUSH
17942: EMPTY
17943: LIST
17944: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17945: LD_ADDR_OWVAR 37
17949: PUSH
17950: LD_VAR 0 18
17954: PUSH
17955: LD_INT 1
17957: PPUSH
17958: LD_VAR 0 18
17962: PPUSH
17963: CALL_OW 12
17967: ARRAY
17968: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
17969: LD_VAR 0 9
17973: PUSH
17974: LD_VAR 0 14
17978: ARRAY
17979: PUSH
17980: LD_INT 29
17982: EQUAL
17983: PUSH
17984: LD_VAR 0 9
17988: PUSH
17989: LD_VAR 0 14
17993: ARRAY
17994: PUSH
17995: LD_INT 28
17997: EQUAL
17998: OR
17999: PUSH
18000: LD_VAR 0 9
18004: PUSH
18005: LD_VAR 0 14
18009: ARRAY
18010: PUSH
18011: LD_INT 27
18013: EQUAL
18014: OR
18015: PUSH
18016: LD_VAR 0 9
18020: PUSH
18021: LD_VAR 0 14
18025: ARRAY
18026: PUSH
18027: LD_INT 26
18029: EQUAL
18030: OR
18031: PUSH
18032: LD_VAR 0 9
18036: PUSH
18037: LD_VAR 0 14
18041: ARRAY
18042: PUSH
18043: LD_INT 25
18045: EQUAL
18046: OR
18047: IFFALSE 18084
// begin arChassisTab = [ 14 ] ;
18049: LD_ADDR_VAR 0 18
18053: PUSH
18054: LD_INT 14
18056: PUSH
18057: EMPTY
18058: LIST
18059: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18060: LD_ADDR_OWVAR 37
18064: PUSH
18065: LD_VAR 0 18
18069: PUSH
18070: LD_INT 1
18072: PPUSH
18073: LD_VAR 0 18
18077: PPUSH
18078: CALL_OW 12
18082: ARRAY
18083: ST_TO_ADDR
// end ; end ;
18084: GO 17867
18086: POP
18087: POP
// veh = CreateVehicle ;
18088: LD_ADDR_VAR 0 16
18092: PUSH
18093: CALL_OW 45
18097: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18098: LD_VAR 0 16
18102: PPUSH
18103: LD_VAR 0 1
18107: PPUSH
18108: LD_INT 0
18110: PPUSH
18111: CALL_OW 49
// if vc_control = 1 then
18115: LD_OWVAR 38
18119: PUSH
18120: LD_INT 1
18122: EQUAL
18123: IFFALSE 18180
// begin hc_gallery =  ;
18125: LD_ADDR_OWVAR 33
18129: PUSH
18130: LD_STRING 
18132: ST_TO_ADDR
// hc_name =  ;
18133: LD_ADDR_OWVAR 26
18137: PUSH
18138: LD_STRING 
18140: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18141: LD_INT 0
18143: PPUSH
18144: LD_INT 3
18146: PPUSH
18147: LD_VAR 0 4
18151: PPUSH
18152: CALL_OW 380
// un = CreateHuman ;
18156: LD_ADDR_VAR 0 15
18160: PUSH
18161: CALL_OW 44
18165: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18166: LD_VAR 0 15
18170: PPUSH
18171: LD_VAR 0 16
18175: PPUSH
18176: CALL_OW 52
// end ; i = i + 1 ;
18180: LD_ADDR_VAR 0 13
18184: PUSH
18185: LD_VAR 0 13
18189: PUSH
18190: LD_INT 1
18192: PLUS
18193: ST_TO_ADDR
// end ; if nation = 3 then
18194: LD_VAR 0 5
18198: PUSH
18199: LD_INT 3
18201: EQUAL
18202: IFFALSE 18608
// begin uc_side = side ;
18204: LD_ADDR_OWVAR 20
18208: PUSH
18209: LD_VAR 0 2
18213: ST_TO_ADDR
// uc_nation = nation ;
18214: LD_ADDR_OWVAR 21
18218: PUSH
18219: LD_VAR 0 5
18223: ST_TO_ADDR
// vc_engine = vehengine ;
18224: LD_ADDR_OWVAR 39
18228: PUSH
18229: LD_VAR 0 6
18233: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18234: LD_ADDR_OWVAR 38
18238: PUSH
18239: LD_VAR 0 7
18243: PUSH
18244: LD_INT 1
18246: PPUSH
18247: LD_VAR 0 7
18251: PPUSH
18252: CALL_OW 12
18256: ARRAY
18257: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18258: LD_ADDR_OWVAR 40
18262: PUSH
18263: LD_VAR 0 8
18267: PUSH
18268: LD_INT 1
18270: PPUSH
18271: LD_VAR 0 8
18275: PPUSH
18276: CALL_OW 12
18280: ARRAY
18281: ST_TO_ADDR
// for j = 1 to RuWeapons do
18282: LD_ADDR_VAR 0 14
18286: PUSH
18287: DOUBLE
18288: LD_INT 1
18290: DEC
18291: ST_TO_ADDR
18292: LD_VAR 0 8
18296: PUSH
18297: FOR_TO
18298: IFFALSE 18500
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18300: LD_VAR 0 8
18304: PUSH
18305: LD_VAR 0 14
18309: ARRAY
18310: PUSH
18311: LD_INT 42
18313: EQUAL
18314: PUSH
18315: LD_VAR 0 8
18319: PUSH
18320: LD_VAR 0 14
18324: ARRAY
18325: PUSH
18326: LD_INT 43
18328: EQUAL
18329: OR
18330: PUSH
18331: LD_VAR 0 8
18335: PUSH
18336: LD_VAR 0 14
18340: ARRAY
18341: PUSH
18342: LD_INT 44
18344: EQUAL
18345: OR
18346: PUSH
18347: LD_VAR 0 8
18351: PUSH
18352: LD_VAR 0 14
18356: ARRAY
18357: PUSH
18358: LD_INT 45
18360: EQUAL
18361: OR
18362: PUSH
18363: LD_VAR 0 8
18367: PUSH
18368: LD_VAR 0 14
18372: ARRAY
18373: PUSH
18374: LD_INT 49
18376: EQUAL
18377: OR
18378: IFFALSE 18427
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18380: LD_ADDR_VAR 0 17
18384: PUSH
18385: LD_INT 21
18387: PUSH
18388: LD_INT 22
18390: PUSH
18391: LD_INT 23
18393: PUSH
18394: LD_INT 24
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18403: LD_ADDR_OWVAR 37
18407: PUSH
18408: LD_VAR 0 17
18412: PUSH
18413: LD_INT 1
18415: PPUSH
18416: LD_VAR 0 17
18420: PPUSH
18421: CALL_OW 12
18425: ARRAY
18426: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18427: LD_VAR 0 8
18431: PUSH
18432: LD_VAR 0 14
18436: ARRAY
18437: PUSH
18438: LD_INT 46
18440: EQUAL
18441: PUSH
18442: LD_VAR 0 8
18446: PUSH
18447: LD_VAR 0 14
18451: ARRAY
18452: PUSH
18453: LD_INT 47
18455: EQUAL
18456: OR
18457: IFFALSE 18498
// begin ruChassisTab = [ 23 , 24 ] ;
18459: LD_ADDR_VAR 0 17
18463: PUSH
18464: LD_INT 23
18466: PUSH
18467: LD_INT 24
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18474: LD_ADDR_OWVAR 37
18478: PUSH
18479: LD_VAR 0 17
18483: PUSH
18484: LD_INT 1
18486: PPUSH
18487: LD_VAR 0 17
18491: PPUSH
18492: CALL_OW 12
18496: ARRAY
18497: ST_TO_ADDR
// end ; end ;
18498: GO 18297
18500: POP
18501: POP
// veh = CreateVehicle ;
18502: LD_ADDR_VAR 0 16
18506: PUSH
18507: CALL_OW 45
18511: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18512: LD_VAR 0 16
18516: PPUSH
18517: LD_VAR 0 1
18521: PPUSH
18522: LD_INT 0
18524: PPUSH
18525: CALL_OW 49
// if vc_control = 1 then
18529: LD_OWVAR 38
18533: PUSH
18534: LD_INT 1
18536: EQUAL
18537: IFFALSE 18594
// begin hc_gallery =  ;
18539: LD_ADDR_OWVAR 33
18543: PUSH
18544: LD_STRING 
18546: ST_TO_ADDR
// hc_name =  ;
18547: LD_ADDR_OWVAR 26
18551: PUSH
18552: LD_STRING 
18554: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18555: LD_INT 0
18557: PPUSH
18558: LD_INT 3
18560: PPUSH
18561: LD_VAR 0 4
18565: PPUSH
18566: CALL_OW 380
// un = CreateHuman ;
18570: LD_ADDR_VAR 0 15
18574: PUSH
18575: CALL_OW 44
18579: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18580: LD_VAR 0 15
18584: PPUSH
18585: LD_VAR 0 16
18589: PPUSH
18590: CALL_OW 52
// end ; i = i + 1 ;
18594: LD_ADDR_VAR 0 13
18598: PUSH
18599: LD_VAR 0 13
18603: PUSH
18604: LD_INT 1
18606: PLUS
18607: ST_TO_ADDR
// end ; until i = vehCount ;
18608: LD_VAR 0 13
18612: PUSH
18613: LD_VAR 0 3
18617: EQUAL
18618: IFFALSE 17244
// repeat wait ( 0 0$1 ) ;
18620: LD_INT 35
18622: PPUSH
18623: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18627: LD_ADDR_VAR 0 20
18631: PUSH
18632: LD_INT 22
18634: PUSH
18635: LD_VAR 0 2
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 21
18646: PUSH
18647: LD_INT 2
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 24
18656: PUSH
18657: LD_INT 650
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: LIST
18668: PPUSH
18669: CALL_OW 69
18673: ST_TO_ADDR
// if vehicleOK_list > 0 then
18674: LD_VAR 0 20
18678: PUSH
18679: LD_INT 0
18681: GREATER
18682: IFFALSE 18873
// begin for i in vehicleOK_list do
18684: LD_ADDR_VAR 0 13
18688: PUSH
18689: LD_VAR 0 20
18693: PUSH
18694: FOR_IN
18695: IFFALSE 18871
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18697: LD_ADDR_VAR 0 21
18701: PUSH
18702: LD_INT 22
18704: PUSH
18705: LD_VAR 0 11
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PPUSH
18714: CALL_OW 69
18718: PPUSH
18719: LD_VAR 0 13
18723: PPUSH
18724: CALL_OW 74
18728: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18729: LD_ADDR_VAR 0 22
18733: PUSH
18734: LD_INT 22
18736: PUSH
18737: LD_VAR 0 11
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: LD_INT 59
18751: PUSH
18752: EMPTY
18753: LIST
18754: PUSH
18755: LD_INT 21
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 21
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: EMPTY
18786: LIST
18787: PPUSH
18788: CALL_OW 69
18792: PPUSH
18793: LD_VAR 0 13
18797: PPUSH
18798: CALL_OW 74
18802: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18803: LD_VAR 0 13
18807: PPUSH
18808: LD_VAR 0 21
18812: PPUSH
18813: CALL_OW 296
18817: PUSH
18818: LD_INT 8
18820: PLUS
18821: PUSH
18822: LD_VAR 0 13
18826: PPUSH
18827: LD_VAR 0 22
18831: PPUSH
18832: CALL_OW 296
18836: LESS
18837: IFFALSE 18855
// begin ComAttackUnit ( i , target1 ) ;
18839: LD_VAR 0 13
18843: PPUSH
18844: LD_VAR 0 21
18848: PPUSH
18849: CALL_OW 115
// end else
18853: GO 18869
// begin ComAttackUnit ( i , target2 ) ;
18855: LD_VAR 0 13
18859: PPUSH
18860: LD_VAR 0 22
18864: PPUSH
18865: CALL_OW 115
// end ; end ;
18869: GO 18694
18871: POP
18872: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
18873: LD_INT 22
18875: PUSH
18876: LD_VAR 0 2
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 21
18887: PUSH
18888: LD_INT 2
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PPUSH
18899: CALL_OW 69
18903: PUSH
18904: LD_INT 0
18906: EQUAL
18907: IFFALSE 18620
// end ;
18909: LD_VAR 0 12
18913: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
18914: LD_INT 0
18916: PPUSH
18917: PPUSH
18918: PPUSH
18919: PPUSH
18920: PPUSH
18921: PPUSH
18922: PPUSH
18923: PPUSH
18924: PPUSH
18925: PPUSH
18926: PPUSH
// for i = 1 to soldierCount do
18927: LD_ADDR_VAR 0 13
18931: PUSH
18932: DOUBLE
18933: LD_INT 1
18935: DEC
18936: ST_TO_ADDR
18937: LD_VAR 0 3
18941: PUSH
18942: FOR_TO
18943: IFFALSE 19025
// begin uc_side = side ;
18945: LD_ADDR_OWVAR 20
18949: PUSH
18950: LD_VAR 0 1
18954: ST_TO_ADDR
// uc_nation = nation ;
18955: LD_ADDR_OWVAR 21
18959: PUSH
18960: LD_VAR 0 2
18964: ST_TO_ADDR
// hc_name =  ;
18965: LD_ADDR_OWVAR 26
18969: PUSH
18970: LD_STRING 
18972: ST_TO_ADDR
// hc_gallery =  ;
18973: LD_ADDR_OWVAR 33
18977: PUSH
18978: LD_STRING 
18980: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
18981: LD_INT 0
18983: PPUSH
18984: LD_INT 1
18986: PPUSH
18987: LD_VAR 0 8
18991: PPUSH
18992: CALL_OW 380
// un = CreateHuman ;
18996: LD_ADDR_VAR 0 15
19000: PUSH
19001: CALL_OW 44
19005: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19006: LD_VAR 0 15
19010: PPUSH
19011: LD_VAR 0 9
19015: PPUSH
19016: LD_INT 0
19018: PPUSH
19019: CALL_OW 49
// end ;
19023: GO 18942
19025: POP
19026: POP
// for i = 1 to sniperCount do
19027: LD_ADDR_VAR 0 13
19031: PUSH
19032: DOUBLE
19033: LD_INT 1
19035: DEC
19036: ST_TO_ADDR
19037: LD_VAR 0 4
19041: PUSH
19042: FOR_TO
19043: IFFALSE 19125
// begin uc_side = side ;
19045: LD_ADDR_OWVAR 20
19049: PUSH
19050: LD_VAR 0 1
19054: ST_TO_ADDR
// uc_nation = nation ;
19055: LD_ADDR_OWVAR 21
19059: PUSH
19060: LD_VAR 0 2
19064: ST_TO_ADDR
// hc_name =  ;
19065: LD_ADDR_OWVAR 26
19069: PUSH
19070: LD_STRING 
19072: ST_TO_ADDR
// hc_gallery =  ;
19073: LD_ADDR_OWVAR 33
19077: PUSH
19078: LD_STRING 
19080: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19081: LD_INT 0
19083: PPUSH
19084: LD_INT 5
19086: PPUSH
19087: LD_VAR 0 8
19091: PPUSH
19092: CALL_OW 380
// un = CreateHuman ;
19096: LD_ADDR_VAR 0 15
19100: PUSH
19101: CALL_OW 44
19105: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19106: LD_VAR 0 15
19110: PPUSH
19111: LD_VAR 0 9
19115: PPUSH
19116: LD_INT 0
19118: PPUSH
19119: CALL_OW 49
// end ;
19123: GO 19042
19125: POP
19126: POP
// for i = 1 to bazookCount do
19127: LD_ADDR_VAR 0 13
19131: PUSH
19132: DOUBLE
19133: LD_INT 1
19135: DEC
19136: ST_TO_ADDR
19137: LD_VAR 0 5
19141: PUSH
19142: FOR_TO
19143: IFFALSE 19225
// begin uc_side = side ;
19145: LD_ADDR_OWVAR 20
19149: PUSH
19150: LD_VAR 0 1
19154: ST_TO_ADDR
// uc_nation = nation ;
19155: LD_ADDR_OWVAR 21
19159: PUSH
19160: LD_VAR 0 2
19164: ST_TO_ADDR
// hc_name =  ;
19165: LD_ADDR_OWVAR 26
19169: PUSH
19170: LD_STRING 
19172: ST_TO_ADDR
// hc_gallery =  ;
19173: LD_ADDR_OWVAR 33
19177: PUSH
19178: LD_STRING 
19180: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19181: LD_INT 0
19183: PPUSH
19184: LD_INT 9
19186: PPUSH
19187: LD_VAR 0 8
19191: PPUSH
19192: CALL_OW 380
// un = CreateHuman ;
19196: LD_ADDR_VAR 0 15
19200: PUSH
19201: CALL_OW 44
19205: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19206: LD_VAR 0 15
19210: PPUSH
19211: LD_VAR 0 9
19215: PPUSH
19216: LD_INT 0
19218: PPUSH
19219: CALL_OW 49
// end ;
19223: GO 19142
19225: POP
19226: POP
// for i = 1 to mortalCount do
19227: LD_ADDR_VAR 0 13
19231: PUSH
19232: DOUBLE
19233: LD_INT 1
19235: DEC
19236: ST_TO_ADDR
19237: LD_VAR 0 6
19241: PUSH
19242: FOR_TO
19243: IFFALSE 19325
// begin uc_side = side ;
19245: LD_ADDR_OWVAR 20
19249: PUSH
19250: LD_VAR 0 1
19254: ST_TO_ADDR
// uc_nation = nation ;
19255: LD_ADDR_OWVAR 21
19259: PUSH
19260: LD_VAR 0 2
19264: ST_TO_ADDR
// hc_name =  ;
19265: LD_ADDR_OWVAR 26
19269: PUSH
19270: LD_STRING 
19272: ST_TO_ADDR
// hc_gallery =  ;
19273: LD_ADDR_OWVAR 33
19277: PUSH
19278: LD_STRING 
19280: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19281: LD_INT 0
19283: PPUSH
19284: LD_INT 8
19286: PPUSH
19287: LD_VAR 0 8
19291: PPUSH
19292: CALL_OW 380
// un = CreateHuman ;
19296: LD_ADDR_VAR 0 15
19300: PUSH
19301: CALL_OW 44
19305: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19306: LD_VAR 0 15
19310: PPUSH
19311: LD_VAR 0 9
19315: PPUSH
19316: LD_INT 0
19318: PPUSH
19319: CALL_OW 49
// end ;
19323: GO 19242
19325: POP
19326: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19327: LD_ADDR_VAR 0 18
19331: PUSH
19332: LD_INT 22
19334: PUSH
19335: LD_VAR 0 1
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 2
19346: PUSH
19347: LD_INT 25
19349: PUSH
19350: LD_INT 1
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 25
19359: PUSH
19360: LD_INT 5
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 25
19369: PUSH
19370: LD_INT 8
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 25
19379: PUSH
19380: LD_INT 9
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PPUSH
19398: CALL_OW 69
19402: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19403: LD_ADDR_VAR 0 17
19407: PUSH
19408: LD_INT 22
19410: PUSH
19411: LD_VAR 0 1
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 25
19422: PUSH
19423: LD_INT 4
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PPUSH
19434: CALL_OW 69
19438: ST_TO_ADDR
// for i in medic_list do
19439: LD_ADDR_VAR 0 13
19443: PUSH
19444: LD_VAR 0 17
19448: PUSH
19449: FOR_IN
19450: IFFALSE 19468
// ComMoveToArea ( i , healArea ) ;
19452: LD_VAR 0 13
19456: PPUSH
19457: LD_VAR 0 10
19461: PPUSH
19462: CALL_OW 113
19466: GO 19449
19468: POP
19469: POP
// repeat wait ( 0 0$1 ) ;
19470: LD_INT 35
19472: PPUSH
19473: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19477: LD_ADDR_VAR 0 16
19481: PUSH
19482: LD_INT 22
19484: PUSH
19485: LD_VAR 0 1
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: LD_INT 3
19499: PUSH
19500: LD_INT 24
19502: PUSH
19503: LD_INT 550
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 24
19516: PUSH
19517: LD_INT 250
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PPUSH
19533: CALL_OW 69
19537: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19538: LD_ADDR_VAR 0 18
19542: PUSH
19543: LD_INT 22
19545: PUSH
19546: LD_VAR 0 1
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: LD_INT 25
19560: PUSH
19561: LD_INT 1
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 25
19570: PUSH
19571: LD_INT 5
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 25
19580: PUSH
19581: LD_INT 8
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 25
19590: PUSH
19591: LD_INT 9
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 24
19607: PUSH
19608: LD_INT 1000
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: LIST
19619: PPUSH
19620: CALL_OW 69
19624: ST_TO_ADDR
// if medicCount > 0 then
19625: LD_VAR 0 7
19629: PUSH
19630: LD_INT 0
19632: GREATER
19633: IFFALSE 19707
// begin if damageUnit_list > 0 then
19635: LD_VAR 0 16
19639: PUSH
19640: LD_INT 0
19642: GREATER
19643: IFFALSE 19707
// begin for i in damageUnit_list do
19645: LD_ADDR_VAR 0 13
19649: PUSH
19650: LD_VAR 0 16
19654: PUSH
19655: FOR_IN
19656: IFFALSE 19705
// begin ComMoveToArea ( i , healArea ) ;
19658: LD_VAR 0 13
19662: PPUSH
19663: LD_VAR 0 10
19667: PPUSH
19668: CALL_OW 113
// for j in medic_list do
19672: LD_ADDR_VAR 0 14
19676: PUSH
19677: LD_VAR 0 17
19681: PUSH
19682: FOR_IN
19683: IFFALSE 19701
// AddComHeal ( j , i ) ;
19685: LD_VAR 0 14
19689: PPUSH
19690: LD_VAR 0 13
19694: PPUSH
19695: CALL_OW 188
19699: GO 19682
19701: POP
19702: POP
// end ;
19703: GO 19655
19705: POP
19706: POP
// end ; end ; for i in soldiersOK_list do
19707: LD_ADDR_VAR 0 13
19711: PUSH
19712: LD_VAR 0 18
19716: PUSH
19717: FOR_IN
19718: IFFALSE 19894
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19720: LD_ADDR_VAR 0 21
19724: PUSH
19725: LD_INT 22
19727: PUSH
19728: LD_VAR 0 11
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PPUSH
19737: CALL_OW 69
19741: PPUSH
19742: LD_VAR 0 13
19746: PPUSH
19747: CALL_OW 74
19751: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19752: LD_ADDR_VAR 0 22
19756: PUSH
19757: LD_INT 22
19759: PUSH
19760: LD_VAR 0 11
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 2
19771: PUSH
19772: LD_INT 59
19774: PUSH
19775: EMPTY
19776: LIST
19777: PUSH
19778: LD_INT 21
19780: PUSH
19781: LD_INT 1
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 21
19790: PUSH
19791: LD_INT 2
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: EMPTY
19809: LIST
19810: PPUSH
19811: CALL_OW 69
19815: PPUSH
19816: LD_VAR 0 13
19820: PPUSH
19821: CALL_OW 74
19825: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19826: LD_VAR 0 13
19830: PPUSH
19831: LD_VAR 0 21
19835: PPUSH
19836: CALL_OW 296
19840: PUSH
19841: LD_INT 8
19843: PLUS
19844: PUSH
19845: LD_VAR 0 13
19849: PPUSH
19850: LD_VAR 0 22
19854: PPUSH
19855: CALL_OW 296
19859: LESS
19860: IFFALSE 19878
// begin ComAttackUnit ( i , target1 ) ;
19862: LD_VAR 0 13
19866: PPUSH
19867: LD_VAR 0 21
19871: PPUSH
19872: CALL_OW 115
// end else
19876: GO 19892
// begin ComAttackUnit ( i , target2 ) ;
19878: LD_VAR 0 13
19882: PPUSH
19883: LD_VAR 0 22
19887: PPUSH
19888: CALL_OW 115
// end ; end ;
19892: GO 19717
19894: POP
19895: POP
// for i in soldiersOK_list do
19896: LD_ADDR_VAR 0 13
19900: PUSH
19901: LD_VAR 0 18
19905: PUSH
19906: FOR_IN
19907: IFFALSE 20083
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19909: LD_ADDR_VAR 0 21
19913: PUSH
19914: LD_INT 22
19916: PUSH
19917: LD_VAR 0 11
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PPUSH
19926: CALL_OW 69
19930: PPUSH
19931: LD_VAR 0 13
19935: PPUSH
19936: CALL_OW 74
19940: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19941: LD_ADDR_VAR 0 22
19945: PUSH
19946: LD_INT 22
19948: PUSH
19949: LD_VAR 0 11
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 2
19960: PUSH
19961: LD_INT 59
19963: PUSH
19964: EMPTY
19965: LIST
19966: PUSH
19967: LD_INT 21
19969: PUSH
19970: LD_INT 1
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 21
19979: PUSH
19980: LD_INT 2
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: EMPTY
19998: LIST
19999: PPUSH
20000: CALL_OW 69
20004: PPUSH
20005: LD_VAR 0 13
20009: PPUSH
20010: CALL_OW 74
20014: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20015: LD_VAR 0 13
20019: PPUSH
20020: LD_VAR 0 21
20024: PPUSH
20025: CALL_OW 296
20029: PUSH
20030: LD_INT 8
20032: PLUS
20033: PUSH
20034: LD_VAR 0 13
20038: PPUSH
20039: LD_VAR 0 22
20043: PPUSH
20044: CALL_OW 296
20048: LESS
20049: IFFALSE 20067
// begin ComAttackUnit ( i , target1 ) ;
20051: LD_VAR 0 13
20055: PPUSH
20056: LD_VAR 0 21
20060: PPUSH
20061: CALL_OW 115
// end else
20065: GO 20081
// begin ComAttackUnit ( i , target2 ) ;
20067: LD_VAR 0 13
20071: PPUSH
20072: LD_VAR 0 22
20076: PPUSH
20077: CALL_OW 115
// end ; end ;
20081: GO 19906
20083: POP
20084: POP
// until soldiersOK_list = [ ] ;
20085: LD_VAR 0 18
20089: PUSH
20090: EMPTY
20091: EQUAL
20092: IFFALSE 19470
// end ;
20094: LD_VAR 0 12
20098: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20099: LD_INT 0
20101: PPUSH
20102: PPUSH
20103: PPUSH
20104: PPUSH
20105: PPUSH
20106: PPUSH
20107: PPUSH
// repeat wait ( 0 0$1 ) ;
20108: LD_INT 35
20110: PPUSH
20111: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20115: LD_ADDR_VAR 0 7
20119: PUSH
20120: LD_INT 22
20122: PUSH
20123: LD_INT 2
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 25
20132: PUSH
20133: LD_INT 4
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 3
20142: PUSH
20143: LD_INT 60
20145: PUSH
20146: EMPTY
20147: LIST
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: LIST
20157: PPUSH
20158: CALL_OW 69
20162: ST_TO_ADDR
// if not tmp then
20163: LD_VAR 0 7
20167: NOT
20168: IFFALSE 20172
// continue ;
20170: GO 20108
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20172: LD_ADDR_VAR 0 3
20176: PUSH
20177: LD_INT 5
20179: PPUSH
20180: LD_INT 22
20182: PUSH
20183: LD_INT 0
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 25
20192: PUSH
20193: LD_INT 12
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PPUSH
20204: CALL_OW 70
20208: PUSH
20209: FOR_IN
20210: IFFALSE 20243
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20212: LD_VAR 0 7
20216: PPUSH
20217: LD_VAR 0 3
20221: PPUSH
20222: CALL_OW 250
20226: PPUSH
20227: LD_VAR 0 3
20231: PPUSH
20232: CALL_OW 251
20236: PPUSH
20237: CALL_OW 131
20241: GO 20209
20243: POP
20244: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20245: LD_INT 22
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 25
20257: PUSH
20258: LD_INT 4
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PPUSH
20269: CALL_OW 69
20273: PUSH
20274: LD_INT 0
20276: EQUAL
20277: PUSH
20278: LD_INT 5
20280: PPUSH
20281: LD_INT 22
20283: PUSH
20284: LD_INT 0
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 25
20293: PUSH
20294: LD_INT 12
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PPUSH
20305: CALL_OW 70
20309: PUSH
20310: LD_INT 2
20312: LESS
20313: OR
20314: PUSH
20315: LD_OWVAR 1
20319: PUSH
20320: LD_INT 7000
20322: GREATEREQUAL
20323: OR
20324: IFFALSE 20108
// repeat wait ( 0 0$1 ) ;
20326: LD_INT 35
20328: PPUSH
20329: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20333: LD_ADDR_VAR 0 5
20337: PUSH
20338: LD_INT 22
20340: PUSH
20341: LD_INT 2
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 30
20350: PUSH
20351: LD_INT 5
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PPUSH
20362: CALL_OW 69
20366: ST_TO_ADDR
// until arm ;
20367: LD_VAR 0 5
20371: IFFALSE 20326
// wait ( 0 0$25 ) ;
20373: LD_INT 875
20375: PPUSH
20376: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20380: LD_ADDR_VAR 0 6
20384: PUSH
20385: LD_INT 22
20387: PUSH
20388: LD_INT 2
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 2
20397: PUSH
20398: LD_INT 30
20400: PUSH
20401: LD_INT 0
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 30
20410: PUSH
20411: LD_INT 1
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: LIST
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PPUSH
20427: CALL_OW 69
20431: ST_TO_ADDR
// j := 0 ;
20432: LD_ADDR_VAR 0 3
20436: PUSH
20437: LD_INT 0
20439: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20440: LD_ADDR_VAR 0 2
20444: PUSH
20445: LD_INT 22
20447: PUSH
20448: LD_INT 2
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 25
20457: PUSH
20458: LD_INT 12
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PPUSH
20469: CALL_OW 69
20473: PUSH
20474: FOR_IN
20475: IFFALSE 20562
// begin ComMoveXY ( i , 63 , 16 ) ;
20477: LD_VAR 0 2
20481: PPUSH
20482: LD_INT 63
20484: PPUSH
20485: LD_INT 16
20487: PPUSH
20488: CALL_OW 111
// j := j + 1 ;
20492: LD_ADDR_VAR 0 3
20496: PUSH
20497: LD_VAR 0 3
20501: PUSH
20502: LD_INT 1
20504: PLUS
20505: ST_TO_ADDR
// if j < 5 then
20506: LD_VAR 0 3
20510: PUSH
20511: LD_INT 5
20513: LESS
20514: IFFALSE 20532
// b := arm [ 1 ] else
20516: LD_ADDR_VAR 0 4
20520: PUSH
20521: LD_VAR 0 5
20525: PUSH
20526: LD_INT 1
20528: ARRAY
20529: ST_TO_ADDR
20530: GO 20546
// b := dep [ 1 ] ;
20532: LD_ADDR_VAR 0 4
20536: PUSH
20537: LD_VAR 0 6
20541: PUSH
20542: LD_INT 1
20544: ARRAY
20545: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20546: LD_VAR 0 2
20550: PPUSH
20551: LD_VAR 0 4
20555: PPUSH
20556: CALL_OW 180
// end ;
20560: GO 20474
20562: POP
20563: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20564: LD_ADDR_VAR 0 2
20568: PUSH
20569: LD_INT 22
20571: PUSH
20572: LD_INT 2
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 25
20581: PUSH
20582: LD_INT 4
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PPUSH
20593: CALL_OW 69
20597: PUSH
20598: FOR_IN
20599: IFFALSE 20645
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20601: LD_VAR 0 2
20605: PPUSH
20606: LD_INT 22
20608: PUSH
20609: LD_INT 2
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 30
20618: PUSH
20619: LD_INT 8
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PPUSH
20630: CALL_OW 69
20634: PUSH
20635: LD_INT 1
20637: ARRAY
20638: PPUSH
20639: CALL_OW 120
20643: GO 20598
20645: POP
20646: POP
// end ;
20647: LD_VAR 0 1
20651: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20652: LD_INT 0
20654: PPUSH
20655: PPUSH
20656: PPUSH
20657: PPUSH
20658: PPUSH
20659: PPUSH
20660: PPUSH
20661: PPUSH
20662: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20663: LD_INT 22
20665: PUSH
20666: LD_VAR 0 1
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 21
20677: PUSH
20678: LD_INT 2
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PPUSH
20689: CALL_OW 69
20693: PUSH
20694: LD_VAR 0 3
20698: LESSEQUAL
20699: IFFALSE 20843
// for i = 1 to vehCount do
20701: LD_ADDR_VAR 0 10
20705: PUSH
20706: DOUBLE
20707: LD_INT 1
20709: DEC
20710: ST_TO_ADDR
20711: LD_VAR 0 3
20715: PUSH
20716: FOR_TO
20717: IFFALSE 20841
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
20719: LD_ADDR_VAR 0 12
20723: PUSH
20724: LD_VAR 0 5
20728: PUSH
20729: LD_INT 1
20731: PPUSH
20732: LD_VAR 0 5
20736: PPUSH
20737: CALL_OW 12
20741: ARRAY
20742: ST_TO_ADDR
// if randWeapon = 46 then
20743: LD_VAR 0 12
20747: PUSH
20748: LD_INT 46
20750: EQUAL
20751: IFFALSE 20796
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
20753: LD_VAR 0 2
20757: PPUSH
20758: LD_INT 24
20760: PPUSH
20761: LD_VAR 0 6
20765: PPUSH
20766: LD_VAR 0 7
20770: PUSH
20771: LD_INT 1
20773: PPUSH
20774: LD_VAR 0 7
20778: PPUSH
20779: CALL_OW 12
20783: ARRAY
20784: PPUSH
20785: LD_VAR 0 12
20789: PPUSH
20790: CALL_OW 185
20794: GO 20839
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
20796: LD_VAR 0 2
20800: PPUSH
20801: LD_VAR 0 8
20805: PPUSH
20806: LD_VAR 0 6
20810: PPUSH
20811: LD_VAR 0 7
20815: PUSH
20816: LD_INT 1
20818: PPUSH
20819: LD_VAR 0 7
20823: PPUSH
20824: CALL_OW 12
20828: ARRAY
20829: PPUSH
20830: LD_VAR 0 12
20834: PPUSH
20835: CALL_OW 185
// end ;
20839: GO 20716
20841: POP
20842: POP
// repeat wait ( 0 0$1 ) ;
20843: LD_INT 35
20845: PPUSH
20846: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
20850: LD_INT 22
20852: PUSH
20853: LD_VAR 0 1
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 21
20864: PUSH
20865: LD_INT 2
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 24
20874: PUSH
20875: LD_INT 250
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: PPUSH
20887: CALL_OW 69
20891: PUSH
20892: LD_VAR 0 3
20896: GREATEREQUAL
20897: IFFALSE 20843
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
20899: LD_INT 22
20901: PUSH
20902: LD_VAR 0 1
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 21
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 24
20923: PUSH
20924: LD_INT 250
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: LIST
20935: PPUSH
20936: CALL_OW 69
20940: PUSH
20941: LD_VAR 0 3
20945: GREATEREQUAL
20946: IFFALSE 21289
// begin repeat begin wait ( 0 0$1 ) ;
20948: LD_INT 35
20950: PPUSH
20951: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
20955: LD_INT 22
20957: PUSH
20958: LD_VAR 0 1
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 21
20969: PUSH
20970: LD_INT 2
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 24
20979: PUSH
20980: LD_INT 651
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: LIST
20991: PPUSH
20992: CALL_OW 69
20996: PUSH
20997: LD_INT 0
20999: GREATER
21000: IFFALSE 21228
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21002: LD_ADDR_VAR 0 10
21006: PUSH
21007: LD_INT 22
21009: PUSH
21010: LD_VAR 0 1
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 21
21021: PUSH
21022: LD_INT 2
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 24
21031: PUSH
21032: LD_INT 651
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: LIST
21043: PPUSH
21044: CALL_OW 69
21048: PUSH
21049: FOR_IN
21050: IFFALSE 21226
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21052: LD_ADDR_VAR 0 16
21056: PUSH
21057: LD_INT 22
21059: PUSH
21060: LD_VAR 0 4
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PPUSH
21069: CALL_OW 69
21073: PPUSH
21074: LD_VAR 0 10
21078: PPUSH
21079: CALL_OW 74
21083: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21084: LD_ADDR_VAR 0 17
21088: PUSH
21089: LD_INT 22
21091: PUSH
21092: LD_VAR 0 4
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 2
21103: PUSH
21104: LD_INT 59
21106: PUSH
21107: EMPTY
21108: LIST
21109: PUSH
21110: LD_INT 21
21112: PUSH
21113: LD_INT 1
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 21
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: EMPTY
21141: LIST
21142: PPUSH
21143: CALL_OW 69
21147: PPUSH
21148: LD_VAR 0 10
21152: PPUSH
21153: CALL_OW 74
21157: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21158: LD_VAR 0 10
21162: PPUSH
21163: LD_VAR 0 16
21167: PPUSH
21168: CALL_OW 296
21172: PUSH
21173: LD_INT 8
21175: PLUS
21176: PUSH
21177: LD_VAR 0 10
21181: PPUSH
21182: LD_VAR 0 17
21186: PPUSH
21187: CALL_OW 296
21191: LESS
21192: IFFALSE 21210
// begin ComAttackUnit ( i , target1 ) ;
21194: LD_VAR 0 10
21198: PPUSH
21199: LD_VAR 0 16
21203: PPUSH
21204: CALL_OW 115
// end else
21208: GO 21224
// begin ComAttackUnit ( i , target2 ) ;
21210: LD_VAR 0 10
21214: PPUSH
21215: LD_VAR 0 17
21219: PPUSH
21220: CALL_OW 115
// end ; end ;
21224: GO 21049
21226: POP
21227: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21228: LD_INT 22
21230: PUSH
21231: LD_VAR 0 1
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: LD_INT 21
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PPUSH
21254: CALL_OW 69
21258: PUSH
21259: LD_INT 0
21261: EQUAL
21262: PUSH
21263: LD_INT 22
21265: PUSH
21266: LD_VAR 0 4
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: PPUSH
21278: CALL_OW 69
21282: PUSH
21283: LD_INT 0
21285: EQUAL
21286: OR
21287: IFFALSE 20948
// end ; end ;
21289: LD_VAR 0 9
21293: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21294: LD_INT 0
21296: PPUSH
21297: PPUSH
21298: PPUSH
21299: PPUSH
// r := 100 ;
21300: LD_ADDR_VAR 0 5
21304: PUSH
21305: LD_INT 100
21307: ST_TO_ADDR
// x := 0 ;
21308: LD_ADDR_VAR 0 6
21312: PUSH
21313: LD_INT 0
21315: ST_TO_ADDR
// while ( x < n ) do
21316: LD_VAR 0 6
21320: PUSH
21321: LD_VAR 0 2
21325: LESS
21326: IFFALSE 21613
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21328: LD_ADDR_VAR 0 4
21332: PUSH
21333: DOUBLE
21334: LD_INT 1
21336: DEC
21337: ST_TO_ADDR
21338: LD_VAR 0 1
21342: PPUSH
21343: LD_INT 0
21345: PPUSH
21346: CALL_OW 517
21350: PUSH
21351: LD_INT 1
21353: ARRAY
21354: PUSH
21355: FOR_TO
21356: IFFALSE 21609
// begin if r > 50 then
21358: LD_VAR 0 5
21362: PUSH
21363: LD_INT 50
21365: GREATER
21366: IFFALSE 21585
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21368: LD_VAR 0 1
21372: PPUSH
21373: LD_INT 0
21375: PPUSH
21376: CALL_OW 517
21380: PUSH
21381: LD_INT 1
21383: ARRAY
21384: PUSH
21385: LD_VAR 0 4
21389: ARRAY
21390: PPUSH
21391: LD_VAR 0 1
21395: PPUSH
21396: LD_INT 0
21398: PPUSH
21399: CALL_OW 517
21403: PUSH
21404: LD_INT 2
21406: ARRAY
21407: PUSH
21408: LD_VAR 0 4
21412: ARRAY
21413: PPUSH
21414: CALL_OW 458
21418: NOT
21419: IFFALSE 21569
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21421: LD_VAR 0 1
21425: PPUSH
21426: LD_INT 0
21428: PPUSH
21429: CALL_OW 517
21433: PUSH
21434: LD_INT 1
21436: ARRAY
21437: PUSH
21438: LD_VAR 0 4
21442: ARRAY
21443: PPUSH
21444: LD_VAR 0 1
21448: PPUSH
21449: LD_INT 0
21451: PPUSH
21452: CALL_OW 517
21456: PUSH
21457: LD_INT 2
21459: ARRAY
21460: PUSH
21461: LD_VAR 0 4
21465: ARRAY
21466: PPUSH
21467: LD_INT 5
21469: PPUSH
21470: LD_INT 0
21472: PPUSH
21473: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21477: LD_ADDR_EXP 50
21481: PUSH
21482: LD_EXP 50
21486: PPUSH
21487: LD_INT 1
21489: PPUSH
21490: LD_VAR 0 1
21494: PPUSH
21495: LD_INT 0
21497: PPUSH
21498: CALL_OW 517
21502: PUSH
21503: LD_INT 1
21505: ARRAY
21506: PUSH
21507: LD_VAR 0 4
21511: ARRAY
21512: PUSH
21513: LD_VAR 0 1
21517: PPUSH
21518: LD_INT 0
21520: PPUSH
21521: CALL_OW 517
21525: PUSH
21526: LD_INT 2
21528: ARRAY
21529: PUSH
21530: LD_VAR 0 4
21534: ARRAY
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PPUSH
21540: CALL_OW 2
21544: ST_TO_ADDR
// r := 0 ;
21545: LD_ADDR_VAR 0 5
21549: PUSH
21550: LD_INT 0
21552: ST_TO_ADDR
// x := x + 1 ;
21553: LD_ADDR_VAR 0 6
21557: PUSH
21558: LD_VAR 0 6
21562: PUSH
21563: LD_INT 1
21565: PLUS
21566: ST_TO_ADDR
// end else
21567: GO 21583
// r := r + 35 ;
21569: LD_ADDR_VAR 0 5
21573: PUSH
21574: LD_VAR 0 5
21578: PUSH
21579: LD_INT 35
21581: PLUS
21582: ST_TO_ADDR
// end else
21583: GO 21607
// r := r + rand ( 10 , 25 ) ;
21585: LD_ADDR_VAR 0 5
21589: PUSH
21590: LD_VAR 0 5
21594: PUSH
21595: LD_INT 10
21597: PPUSH
21598: LD_INT 25
21600: PPUSH
21601: CALL_OW 12
21605: PLUS
21606: ST_TO_ADDR
// end ;
21607: GO 21355
21609: POP
21610: POP
21611: GO 21316
// end ; end_of_file
21613: LD_VAR 0 3
21617: RET
// every 0 0$1 trigger russianAI = 1 do
21618: LD_EXP 39
21622: PUSH
21623: LD_INT 1
21625: EQUAL
21626: IFFALSE 21845
21628: GO 21630
21630: DISABLE
// begin enable ;
21631: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21632: LD_INT 3
21634: PPUSH
21635: LD_EXP 30
21639: PPUSH
21640: CALL 16096 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21644: LD_INT 3
21646: PPUSH
21647: LD_EXP 42
21651: PPUSH
21652: CALL 16456 0 2
// if ruPossition = 1 then
21656: LD_EXP 41
21660: PUSH
21661: LD_INT 1
21663: EQUAL
21664: IFFALSE 21719
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21666: LD_INT 3
21668: PPUSH
21669: LD_INT 13
21671: PPUSH
21672: LD_INT 10
21674: PPUSH
21675: LD_INT 22
21677: PUSH
21678: LD_INT 3
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 21
21687: PUSH
21688: LD_INT 3
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 30
21697: PUSH
21698: LD_INT 8
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: LIST
21709: PPUSH
21710: CALL_OW 69
21714: PPUSH
21715: CALL 16662 0 4
// if ruPossition = 2 then
21719: LD_EXP 41
21723: PUSH
21724: LD_INT 2
21726: EQUAL
21727: IFFALSE 21782
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21729: LD_INT 3
21731: PPUSH
21732: LD_INT 14
21734: PPUSH
21735: LD_INT 11
21737: PPUSH
21738: LD_INT 22
21740: PUSH
21741: LD_INT 3
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 21
21750: PUSH
21751: LD_INT 3
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 30
21760: PUSH
21761: LD_INT 8
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: LIST
21772: PPUSH
21773: CALL_OW 69
21777: PPUSH
21778: CALL 16662 0 4
// if ruPossition = 3 then
21782: LD_EXP 41
21786: PUSH
21787: LD_INT 3
21789: EQUAL
21790: IFFALSE 21845
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21792: LD_INT 3
21794: PPUSH
21795: LD_INT 15
21797: PPUSH
21798: LD_INT 12
21800: PPUSH
21801: LD_INT 22
21803: PUSH
21804: LD_INT 3
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 21
21813: PUSH
21814: LD_INT 3
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 30
21823: PUSH
21824: LD_INT 8
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: LIST
21835: PPUSH
21836: CALL_OW 69
21840: PPUSH
21841: CALL 16662 0 4
// end ;
21845: END
// every 0 0$1 do
21846: GO 21848
21848: DISABLE
// begin enable ;
21849: ENABLE
// if ruPossition = 1 then
21850: LD_EXP 41
21854: PUSH
21855: LD_INT 1
21857: EQUAL
21858: IFFALSE 21870
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
21860: LD_INT 3
21862: PPUSH
21863: LD_INT 10
21865: PPUSH
21866: CALL 15733 0 2
// if ruPossition = 2 then
21870: LD_EXP 41
21874: PUSH
21875: LD_INT 2
21877: EQUAL
21878: IFFALSE 21890
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
21880: LD_INT 3
21882: PPUSH
21883: LD_INT 11
21885: PPUSH
21886: CALL 15733 0 2
// if ruPossition = 3 then
21890: LD_EXP 41
21894: PUSH
21895: LD_INT 3
21897: EQUAL
21898: IFFALSE 21910
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
21900: LD_INT 3
21902: PPUSH
21903: LD_INT 12
21905: PPUSH
21906: CALL 15733 0 2
// IntBazooka ( 3 , 1 ) ;
21910: LD_INT 3
21912: PPUSH
21913: LD_INT 1
21915: PPUSH
21916: CALL 14532 0 2
// IntBazooka ( 6 , 1 ) ;
21920: LD_INT 6
21922: PPUSH
21923: LD_INT 1
21925: PPUSH
21926: CALL 14532 0 2
// end ;
21930: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21931: LD_EXP 39
21935: PUSH
21936: LD_INT 1
21938: EQUAL
21939: PUSH
21940: LD_EXP 35
21944: PPUSH
21945: CALL_OW 302
21949: AND
21950: PUSH
21951: LD_EXP 35
21955: PPUSH
21956: CALL_OW 255
21960: PUSH
21961: LD_INT 3
21963: EQUAL
21964: AND
21965: PUSH
21966: LD_INT 22
21968: PUSH
21969: LD_INT 3
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 21
21978: PUSH
21979: LD_INT 2
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 33
21988: PUSH
21989: LD_INT 3
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: LIST
22000: PPUSH
22001: CALL_OW 69
22005: PUSH
22006: LD_INT 0
22008: EQUAL
22009: AND
22010: IFFALSE 22218
22012: GO 22014
22014: DISABLE
// begin enable ;
22015: ENABLE
// if Difficulty = 1 then
22016: LD_OWVAR 67
22020: PUSH
22021: LD_INT 1
22023: EQUAL
22024: IFFALSE 22086
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22026: LD_INT 3
22028: PPUSH
22029: LD_EXP 35
22033: PPUSH
22034: LD_INT 5
22036: PPUSH
22037: LD_INT 8
22039: PPUSH
22040: CALL_OW 12
22044: PPUSH
22045: LD_INT 1
22047: PPUSH
22048: LD_INT 43
22050: PUSH
22051: LD_INT 44
22053: PUSH
22054: LD_INT 45
22056: PUSH
22057: LD_INT 46
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: PPUSH
22066: LD_INT 1
22068: PPUSH
22069: LD_INT 3
22071: PUSH
22072: LD_INT 3
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PPUSH
22079: LD_INT 22
22081: PPUSH
22082: CALL 20652 0 8
// if Difficulty = 2 then
22086: LD_OWVAR 67
22090: PUSH
22091: LD_INT 2
22093: EQUAL
22094: IFFALSE 22152
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22096: LD_INT 3
22098: PPUSH
22099: LD_EXP 35
22103: PPUSH
22104: LD_INT 6
22106: PPUSH
22107: LD_INT 8
22109: PPUSH
22110: CALL_OW 12
22114: PPUSH
22115: LD_INT 1
22117: PPUSH
22118: LD_INT 44
22120: PUSH
22121: LD_INT 45
22123: PUSH
22124: LD_INT 46
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: LIST
22131: PPUSH
22132: LD_INT 1
22134: PPUSH
22135: LD_INT 3
22137: PUSH
22138: LD_INT 3
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PPUSH
22145: LD_INT 22
22147: PPUSH
22148: CALL 20652 0 8
// if Difficulty >= 3 then
22152: LD_OWVAR 67
22156: PUSH
22157: LD_INT 3
22159: GREATEREQUAL
22160: IFFALSE 22218
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22162: LD_INT 3
22164: PPUSH
22165: LD_EXP 35
22169: PPUSH
22170: LD_INT 7
22172: PPUSH
22173: LD_INT 8
22175: PPUSH
22176: CALL_OW 12
22180: PPUSH
22181: LD_INT 1
22183: PPUSH
22184: LD_INT 44
22186: PUSH
22187: LD_INT 45
22189: PUSH
22190: LD_INT 46
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: LIST
22197: PPUSH
22198: LD_INT 1
22200: PPUSH
22201: LD_INT 3
22203: PUSH
22204: LD_INT 3
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PPUSH
22211: LD_INT 22
22213: PPUSH
22214: CALL 20652 0 8
// end ;
22218: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22219: LD_EXP 50
22223: PUSH
22224: LD_EXP 49
22228: AND
22229: IFFALSE 22350
22231: GO 22233
22233: DISABLE
22234: LD_INT 0
22236: PPUSH
// begin enable ;
22237: ENABLE
// for i in arabianMines do
22238: LD_ADDR_VAR 0 1
22242: PUSH
22243: LD_EXP 50
22247: PUSH
22248: FOR_IN
22249: IFFALSE 22348
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22251: LD_INT 22
22253: PUSH
22254: LD_INT 1
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 92
22263: PUSH
22264: LD_VAR 0 1
22268: PUSH
22269: LD_INT 1
22271: ARRAY
22272: PUSH
22273: LD_VAR 0 1
22277: PUSH
22278: LD_INT 2
22280: ARRAY
22281: PUSH
22282: LD_INT 3
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PPUSH
22295: CALL_OW 69
22299: IFFALSE 22346
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22301: LD_VAR 0 1
22305: PUSH
22306: LD_INT 1
22308: ARRAY
22309: PPUSH
22310: LD_VAR 0 1
22314: PUSH
22315: LD_INT 2
22317: ARRAY
22318: PPUSH
22319: LD_INT 5
22321: PPUSH
22322: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22326: LD_ADDR_EXP 50
22330: PUSH
22331: LD_EXP 50
22335: PPUSH
22336: LD_VAR 0 1
22340: PPUSH
22341: CALL_OW 3
22345: ST_TO_ADDR
// end ; end ;
22346: GO 22248
22348: POP
22349: POP
// end ; end_of_file
22350: PPOPN 1
22352: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22353: LD_VAR 0 1
22357: PPUSH
22358: CALL_OW 255
22362: PUSH
22363: LD_INT 4
22365: EQUAL
22366: IFFALSE 22380
// SetBName ( building , epsilon ) ;
22368: LD_VAR 0 1
22372: PPUSH
22373: LD_STRING epsilon
22375: PPUSH
22376: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22380: LD_VAR 0 1
22384: PPUSH
22385: CALL_OW 255
22389: PUSH
22390: LD_INT 1
22392: EQUAL
22393: PUSH
22394: LD_VAR 0 1
22398: PPUSH
22399: CALL_OW 266
22403: PUSH
22404: LD_INT 0
22406: EQUAL
22407: AND
22408: IFFALSE 22422
// SetBName ( building , epsilon ) ;
22410: LD_VAR 0 1
22414: PPUSH
22415: LD_STRING epsilon
22417: PPUSH
22418: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22422: LD_VAR 0 1
22426: PPUSH
22427: CALL_OW 255
22431: PUSH
22432: LD_INT 3
22434: EQUAL
22435: PUSH
22436: LD_VAR 0 1
22440: PPUSH
22441: CALL_OW 266
22445: PUSH
22446: LD_INT 0
22448: EQUAL
22449: AND
22450: IFFALSE 22464
// SetBName ( building , chuikov ) ;
22452: LD_VAR 0 1
22456: PPUSH
22457: LD_STRING chuikov
22459: PPUSH
22460: CALL_OW 500
// if GetSide ( building ) = 2 then
22464: LD_VAR 0 1
22468: PPUSH
22469: CALL_OW 255
22473: PUSH
22474: LD_INT 2
22476: EQUAL
22477: IFFALSE 22533
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22479: LD_VAR 0 1
22483: PPUSH
22484: CALL_OW 266
22488: PUSH
22489: LD_INT 6
22491: EQUAL
22492: PUSH
22493: LD_VAR 0 1
22497: PPUSH
22498: CALL_OW 266
22502: PUSH
22503: LD_INT 9
22505: EQUAL
22506: OR
22507: IFFALSE 22533
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22509: LD_VAR 0 1
22513: PPUSH
22514: LD_INT 10
22516: PPUSH
22517: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22521: LD_VAR 0 1
22525: PPUSH
22526: LD_INT 11
22528: PPUSH
22529: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22533: LD_VAR 0 1
22537: PPUSH
22538: CALL_OW 255
22542: PUSH
22543: LD_INT 3
22545: EQUAL
22546: IFFALSE 22580
// begin ruDepotConstructed := true ;
22548: LD_ADDR_EXP 57
22552: PUSH
22553: LD_INT 1
22555: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22556: LD_VAR 0 1
22560: PPUSH
22561: CALL_OW 266
22565: PUSH
22566: LD_INT 2
22568: EQUAL
22569: IFFALSE 22580
// AddComUpgrade ( building ) ;
22571: LD_VAR 0 1
22575: PPUSH
22576: CALL_OW 206
// end ; end ;
22580: PPOPN 2
22582: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22583: LD_INT 0
22585: PPUSH
22586: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22587: LD_VAR 0 1
22591: PUSH
22592: LD_INT 22
22594: PUSH
22595: LD_INT 3
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 23
22604: PUSH
22605: LD_INT 3
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 21
22614: PUSH
22615: LD_INT 2
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: LIST
22626: PPUSH
22627: CALL_OW 69
22631: IN
22632: PUSH
22633: LD_EXP 61
22637: NOT
22638: AND
22639: IFFALSE 22670
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22641: LD_ADDR_EXP 61
22645: PUSH
22646: LD_VAR 0 1
22650: PPUSH
22651: CALL_OW 250
22655: PUSH
22656: LD_VAR 0 1
22660: PPUSH
22661: CALL_OW 251
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: ST_TO_ADDR
// end ;
22670: PPOPN 3
22672: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22673: LD_VAR 0 2
22677: PPUSH
22678: CALL_OW 255
22682: PUSH
22683: LD_INT 3
22685: EQUAL
22686: PUSH
22687: LD_EXP 35
22691: PPUSH
22692: CALL_OW 255
22696: PUSH
22697: LD_INT 3
22699: EQUAL
22700: AND
22701: PUSH
22702: LD_EXP 35
22706: PPUSH
22707: CALL_OW 302
22711: AND
22712: IFFALSE 22728
// ComEnterUnit ( human , ruFab ) ;
22714: LD_VAR 0 2
22718: PPUSH
22719: LD_EXP 35
22723: PPUSH
22724: CALL_OW 120
// end ;
22728: PPOPN 2
22730: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
22731: LD_INT 0
22733: PPUSH
22734: PPUSH
22735: PPUSH
22736: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22737: LD_VAR 0 1
22741: PPUSH
22742: CALL_OW 255
22746: PUSH
22747: LD_INT 1
22749: EQUAL
22750: PUSH
22751: LD_EXP 65
22755: PUSH
22756: LD_INT 0
22758: EQUAL
22759: AND
22760: IFFALSE 22962
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
22762: LD_VAR 0 1
22766: PPUSH
22767: CALL_OW 266
22771: PUSH
22772: LD_INT 26
22774: EQUAL
22775: PUSH
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 266
22785: PUSH
22786: LD_INT 27
22788: EQUAL
22789: OR
22790: PUSH
22791: LD_VAR 0 1
22795: PPUSH
22796: CALL_OW 266
22800: PUSH
22801: LD_INT 28
22803: EQUAL
22804: OR
22805: IFFALSE 22962
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
22807: LD_INT 22
22809: PUSH
22810: LD_INT 1
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 2
22819: PUSH
22820: LD_INT 30
22822: PUSH
22823: LD_INT 7
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 30
22832: PUSH
22833: LD_INT 8
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: LIST
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PPUSH
22849: CALL_OW 69
22853: PUSH
22854: LD_INT 0
22856: GREATER
22857: IFFALSE 22962
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22859: LD_ADDR_VAR 0 2
22863: PUSH
22864: LD_INT 22
22866: PUSH
22867: LD_INT 1
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 2
22876: PUSH
22877: LD_INT 30
22879: PUSH
22880: LD_INT 7
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 30
22889: PUSH
22890: LD_INT 8
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: LIST
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PPUSH
22906: CALL_OW 69
22910: PUSH
22911: FOR_IN
22912: IFFALSE 22960
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22914: LD_VAR 0 2
22918: PPUSH
22919: LD_INT 1
22921: PPUSH
22922: CALL_OW 268
22926: PUSH
22927: LD_INT 11
22929: EQUAL
22930: PUSH
22931: LD_VAR 0 2
22935: PPUSH
22936: LD_INT 2
22938: PPUSH
22939: CALL_OW 268
22943: PUSH
22944: LD_INT 11
22946: EQUAL
22947: OR
22948: IFFALSE 22958
// eventVar1 = 1 ;
22950: LD_ADDR_EXP 65
22954: PUSH
22955: LD_INT 1
22957: ST_TO_ADDR
22958: GO 22911
22960: POP
22961: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
22962: LD_VAR 0 1
22966: PPUSH
22967: CALL_OW 255
22971: PUSH
22972: LD_INT 3
22974: EQUAL
22975: IFFALSE 23455
// begin if GetBType ( building ) = b_depot then
22977: LD_VAR 0 1
22981: PPUSH
22982: CALL_OW 266
22986: PUSH
22987: LD_INT 0
22989: EQUAL
22990: IFFALSE 23062
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
22992: LD_VAR 0 1
22996: PPUSH
22997: CALL_OW 274
23001: PPUSH
23002: LD_INT 1
23004: PPUSH
23005: LD_INT 5000
23007: PPUSH
23008: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23012: LD_VAR 0 1
23016: PPUSH
23017: CALL_OW 274
23021: PPUSH
23022: LD_INT 2
23024: PPUSH
23025: LD_INT 300
23027: PPUSH
23028: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23032: LD_VAR 0 1
23036: PPUSH
23037: CALL_OW 274
23041: PPUSH
23042: LD_INT 3
23044: PPUSH
23045: LD_INT 100
23047: PPUSH
23048: CALL_OW 277
// ruDepot = building ;
23052: LD_ADDR_EXP 30
23056: PUSH
23057: LD_VAR 0 1
23061: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23062: LD_VAR 0 1
23066: PPUSH
23067: CALL_OW 266
23071: PUSH
23072: LD_INT 0
23074: EQUAL
23075: PUSH
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 266
23085: PUSH
23086: LD_INT 2
23088: EQUAL
23089: OR
23090: PUSH
23091: LD_VAR 0 1
23095: PPUSH
23096: CALL_OW 266
23100: PUSH
23101: LD_INT 4
23103: EQUAL
23104: OR
23105: IFFALSE 23116
// ComUpgrade ( building ) ;
23107: LD_VAR 0 1
23111: PPUSH
23112: CALL_OW 146
// if GetBType ( building ) = b_lab then
23116: LD_VAR 0 1
23120: PPUSH
23121: CALL_OW 266
23125: PUSH
23126: LD_INT 6
23128: EQUAL
23129: IFFALSE 23332
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23131: LD_INT 22
23133: PUSH
23134: LD_INT 3
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 30
23143: PUSH
23144: LD_INT 8
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PPUSH
23155: CALL_OW 69
23159: PUSH
23160: LD_INT 0
23162: EQUAL
23163: IFFALSE 23201
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23165: LD_VAR 0 1
23169: PPUSH
23170: LD_INT 10
23172: PPUSH
23173: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23177: LD_VAR 0 1
23181: PPUSH
23182: LD_INT 12
23184: PPUSH
23185: CALL_OW 207
// ruLab1 = building ;
23189: LD_ADDR_EXP 31
23193: PUSH
23194: LD_VAR 0 1
23198: ST_TO_ADDR
// end else
23199: GO 23235
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23201: LD_VAR 0 1
23205: PPUSH
23206: LD_INT 11
23208: PPUSH
23209: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23213: LD_VAR 0 1
23217: PPUSH
23218: LD_INT 14
23220: PPUSH
23221: CALL_OW 207
// ruLab2 = building ;
23225: LD_ADDR_EXP 32
23229: PUSH
23230: LD_VAR 0 1
23234: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23235: LD_INT 3
23237: PPUSH
23238: LD_VAR 0 1
23242: PPUSH
23243: LD_INT 3
23245: PPUSH
23246: CALL 15648 0 3
// if ruDestroyedBuildings > 0 then
23250: LD_EXP 42
23254: PUSH
23255: LD_INT 0
23257: GREATER
23258: IFFALSE 23332
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23260: LD_ADDR_EXP 42
23264: PUSH
23265: LD_EXP 42
23269: PPUSH
23270: LD_INT 1
23272: PPUSH
23273: CALL_OW 3
23277: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23278: LD_ADDR_EXP 42
23282: PUSH
23283: LD_EXP 42
23287: PPUSH
23288: LD_INT 1
23290: PPUSH
23291: CALL_OW 3
23295: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23296: LD_ADDR_EXP 42
23300: PUSH
23301: LD_EXP 42
23305: PPUSH
23306: LD_INT 1
23308: PPUSH
23309: CALL_OW 3
23313: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23314: LD_ADDR_EXP 42
23318: PUSH
23319: LD_EXP 42
23323: PPUSH
23324: LD_INT 1
23326: PPUSH
23327: CALL_OW 3
23331: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23332: LD_VAR 0 1
23336: PPUSH
23337: CALL_OW 266
23341: PUSH
23342: LD_INT 32
23344: EQUAL
23345: IFFALSE 23382
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23347: LD_VAR 0 1
23351: PPUSH
23352: LD_INT 44
23354: PUSH
23355: LD_INT 45
23357: PUSH
23358: LD_INT 46
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 1
23368: PPUSH
23369: LD_INT 3
23371: PPUSH
23372: CALL_OW 12
23376: ARRAY
23377: PPUSH
23378: CALL_OW 208
// if GetBType ( building ) = b_turret then
23382: LD_VAR 0 1
23386: PPUSH
23387: CALL_OW 266
23391: PUSH
23392: LD_INT 33
23394: EQUAL
23395: IFFALSE 23432
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23397: LD_VAR 0 1
23401: PPUSH
23402: LD_INT 44
23404: PUSH
23405: LD_INT 45
23407: PUSH
23408: LD_INT 46
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 1
23418: PPUSH
23419: LD_INT 3
23421: PPUSH
23422: CALL_OW 12
23426: ARRAY
23427: PPUSH
23428: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23432: LD_VAR 0 1
23436: PPUSH
23437: CALL_OW 266
23441: PUSH
23442: LD_INT 24
23444: EQUAL
23445: IFFALSE 23455
// russianAI = 1 ;
23447: LD_ADDR_EXP 39
23451: PUSH
23452: LD_INT 1
23454: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23455: LD_VAR 0 1
23459: PPUSH
23460: CALL_OW 255
23464: PUSH
23465: LD_INT 2
23467: EQUAL
23468: IFFALSE 24347
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23470: LD_VAR 0 1
23474: PPUSH
23475: CALL_OW 266
23479: PUSH
23480: LD_EXP 68
23484: PUSH
23485: LD_INT 1
23487: ARRAY
23488: PUSH
23489: LD_INT 1
23491: ARRAY
23492: EQUAL
23493: IFFALSE 23620
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23495: LD_ADDR_EXP 68
23499: PUSH
23500: LD_EXP 68
23504: PPUSH
23505: LD_INT 1
23507: PPUSH
23508: CALL_OW 3
23512: ST_TO_ADDR
// if arBuildingsTab then
23513: LD_EXP 68
23517: IFFALSE 23620
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23519: LD_ADDR_VAR 0 3
23523: PUSH
23524: LD_INT 22
23526: PUSH
23527: LD_INT 2
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 25
23536: PUSH
23537: LD_INT 2
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PPUSH
23548: CALL_OW 69
23552: ST_TO_ADDR
// if engineers then
23553: LD_VAR 0 3
23557: IFFALSE 23620
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23559: LD_VAR 0 3
23563: PPUSH
23564: LD_EXP 68
23568: PUSH
23569: LD_INT 1
23571: ARRAY
23572: PUSH
23573: LD_INT 1
23575: ARRAY
23576: PPUSH
23577: LD_EXP 68
23581: PUSH
23582: LD_INT 1
23584: ARRAY
23585: PUSH
23586: LD_INT 2
23588: ARRAY
23589: PPUSH
23590: LD_EXP 68
23594: PUSH
23595: LD_INT 1
23597: ARRAY
23598: PUSH
23599: LD_INT 3
23601: ARRAY
23602: PPUSH
23603: LD_EXP 68
23607: PUSH
23608: LD_INT 1
23610: ARRAY
23611: PUSH
23612: LD_INT 4
23614: ARRAY
23615: PPUSH
23616: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23620: LD_VAR 0 1
23624: PPUSH
23625: CALL_OW 266
23629: PUSH
23630: LD_INT 31
23632: EQUAL
23633: IFFALSE 23779
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23635: LD_ADDR_VAR 0 4
23639: PUSH
23640: LD_INT 22
23642: PUSH
23643: LD_INT 2
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: LD_INT 25
23655: PUSH
23656: LD_INT 1
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 25
23665: PUSH
23666: LD_INT 8
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: LIST
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PPUSH
23682: CALL_OW 69
23686: PUSH
23687: LD_EXP 26
23691: DIFF
23692: ST_TO_ADDR
// if not sol then
23693: LD_VAR 0 4
23697: NOT
23698: IFFALSE 23702
// exit ;
23700: GO 24347
// for i in sol do
23702: LD_ADDR_VAR 0 2
23706: PUSH
23707: LD_VAR 0 4
23711: PUSH
23712: FOR_IN
23713: IFFALSE 23777
// if not GetTag ( i ) then
23715: LD_VAR 0 2
23719: PPUSH
23720: CALL_OW 110
23724: NOT
23725: IFFALSE 23775
// begin if IsInUnit ( i ) then
23727: LD_VAR 0 2
23731: PPUSH
23732: CALL_OW 310
23736: IFFALSE 23747
// ComExitBuilding ( i ) ;
23738: LD_VAR 0 2
23742: PPUSH
23743: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
23747: LD_VAR 0 2
23751: PPUSH
23752: LD_VAR 0 1
23756: PPUSH
23757: CALL_OW 180
// SetTag ( i , 11 ) ;
23761: LD_VAR 0 2
23765: PPUSH
23766: LD_INT 11
23768: PPUSH
23769: CALL_OW 109
// break ;
23773: GO 23777
// end ;
23775: GO 23712
23777: POP
23778: POP
// end ; if GetBType ( building ) = b_depot then
23779: LD_VAR 0 1
23783: PPUSH
23784: CALL_OW 266
23788: PUSH
23789: LD_INT 0
23791: EQUAL
23792: IFFALSE 23878
// begin arDepot = building ;
23794: LD_ADDR_EXP 43
23798: PUSH
23799: LD_VAR 0 1
23803: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
23804: LD_INT 38
23806: PUSH
23807: LD_INT 47
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PPUSH
23814: LD_INT 71
23816: PPUSH
23817: LD_INT 19
23819: PPUSH
23820: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
23824: LD_VAR 0 1
23828: PPUSH
23829: CALL_OW 274
23833: PPUSH
23834: LD_INT 1
23836: PPUSH
23837: LD_INT 500
23839: PPUSH
23840: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
23844: LD_VAR 0 1
23848: PPUSH
23849: CALL_OW 274
23853: PPUSH
23854: LD_INT 3
23856: PPUSH
23857: LD_INT 30
23859: PPUSH
23860: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
23864: LD_EXP 26
23868: PPUSH
23869: LD_VAR 0 1
23873: PPUSH
23874: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
23878: LD_VAR 0 1
23882: PPUSH
23883: CALL_OW 266
23887: PUSH
23888: LD_INT 6
23890: EQUAL
23891: PUSH
23892: LD_VAR 0 1
23896: PPUSH
23897: CALL_OW 266
23901: PUSH
23902: LD_INT 9
23904: EQUAL
23905: OR
23906: IFFALSE 23957
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23908: LD_VAR 0 1
23912: PPUSH
23913: LD_INT 10
23915: PPUSH
23916: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
23920: LD_VAR 0 1
23924: PPUSH
23925: LD_INT 11
23927: PPUSH
23928: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
23932: LD_INT 2
23934: PPUSH
23935: LD_VAR 0 1
23939: PPUSH
23940: LD_INT 2
23942: PPUSH
23943: CALL 15648 0 3
// arLab = building ;
23947: LD_ADDR_EXP 44
23951: PUSH
23952: LD_VAR 0 1
23956: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23957: LD_VAR 0 1
23961: PPUSH
23962: CALL_OW 266
23966: PUSH
23967: LD_INT 2
23969: EQUAL
23970: PUSH
23971: LD_VAR 0 1
23975: PPUSH
23976: CALL_OW 266
23980: PUSH
23981: LD_INT 4
23983: EQUAL
23984: OR
23985: IFFALSE 24056
// begin ComUpgrade ( building ) ;
23987: LD_VAR 0 1
23991: PPUSH
23992: CALL_OW 146
// if GetBType ( building ) = b_armoury then
23996: LD_VAR 0 1
24000: PPUSH
24001: CALL_OW 266
24005: PUSH
24006: LD_INT 4
24008: EQUAL
24009: IFFALSE 24056
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24011: LD_INT 22
24013: PUSH
24014: LD_INT 2
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 25
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PPUSH
24035: CALL_OW 69
24039: PUSH
24040: LD_EXP 26
24044: DIFF
24045: PPUSH
24046: LD_INT 75
24048: PPUSH
24049: LD_INT 21
24051: PPUSH
24052: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24056: LD_VAR 0 1
24060: PPUSH
24061: CALL_OW 266
24065: PUSH
24066: LD_INT 27
24068: EQUAL
24069: IFFALSE 24347
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24071: LD_INT 22
24073: PUSH
24074: LD_INT 2
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 30
24083: PUSH
24084: LD_INT 27
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PPUSH
24095: CALL_OW 69
24099: PUSH
24100: LD_INT 2
24102: EQUAL
24103: IFFALSE 24347
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24105: LD_ADDR_VAR 0 2
24109: PUSH
24110: LD_INT 22
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 21
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 25
24132: PUSH
24133: LD_INT 2
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: LIST
24144: PPUSH
24145: CALL_OW 69
24149: PUSH
24150: LD_INT 1
24152: ARRAY
24153: ST_TO_ADDR
// if not i then
24154: LD_VAR 0 2
24158: NOT
24159: IFFALSE 24163
// exit ;
24161: GO 24347
// AddComMoveXY ( i , 92 , 34 ) ;
24163: LD_VAR 0 2
24167: PPUSH
24168: LD_INT 92
24170: PPUSH
24171: LD_INT 34
24173: PPUSH
24174: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24178: LD_VAR 0 2
24182: PPUSH
24183: LD_INT 35
24185: PPUSH
24186: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24190: LD_VAR 0 2
24194: PPUSH
24195: LD_INT 101
24197: PPUSH
24198: LD_INT 20
24200: PPUSH
24201: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24205: LD_VAR 0 2
24209: PPUSH
24210: LD_INT 35
24212: PPUSH
24213: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24217: LD_VAR 0 2
24221: PPUSH
24222: LD_INT 115
24224: PPUSH
24225: LD_INT 30
24227: PPUSH
24228: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24232: LD_VAR 0 2
24236: PPUSH
24237: LD_INT 35
24239: PPUSH
24240: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24244: LD_VAR 0 2
24248: PPUSH
24249: LD_INT 82
24251: PPUSH
24252: LD_INT 57
24254: PPUSH
24255: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24259: LD_VAR 0 2
24263: PPUSH
24264: LD_INT 35
24266: PPUSH
24267: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24271: LD_VAR 0 2
24275: PPUSH
24276: LD_INT 36
24278: PPUSH
24279: LD_INT 28
24281: PPUSH
24282: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24286: LD_VAR 0 2
24290: PPUSH
24291: LD_INT 70
24293: PPUSH
24294: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24298: LD_INT 22
24300: PUSH
24301: LD_INT 2
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 21
24310: PUSH
24311: LD_INT 1
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 25
24320: PUSH
24321: LD_INT 2
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: LIST
24332: PPUSH
24333: CALL_OW 69
24337: PPUSH
24338: LD_EXP 43
24342: PPUSH
24343: CALL_OW 180
// end ; end ; end ;
24347: PPOPN 5
24349: END
// on UpgradeComplete ( building ) do var i ;
24350: LD_INT 0
24352: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24353: LD_VAR 0 1
24357: PPUSH
24358: CALL_OW 255
24362: PUSH
24363: LD_INT 1
24365: EQUAL
24366: PUSH
24367: LD_EXP 65
24371: PUSH
24372: LD_INT 0
24374: EQUAL
24375: AND
24376: IFFALSE 24574
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24378: LD_VAR 0 1
24382: PPUSH
24383: CALL_OW 266
24387: PUSH
24388: LD_INT 7
24390: EQUAL
24391: PUSH
24392: LD_VAR 0 1
24396: PPUSH
24397: CALL_OW 266
24401: PUSH
24402: LD_INT 8
24404: EQUAL
24405: OR
24406: IFFALSE 24574
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24408: LD_INT 22
24410: PUSH
24411: LD_INT 1
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 2
24420: PUSH
24421: LD_INT 30
24423: PUSH
24424: LD_INT 26
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 30
24433: PUSH
24434: LD_INT 27
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 30
24443: PUSH
24444: LD_INT 28
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PPUSH
24461: CALL_OW 69
24465: PUSH
24466: LD_INT 0
24468: GREATER
24469: IFFALSE 24574
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24471: LD_ADDR_VAR 0 2
24475: PUSH
24476: LD_INT 22
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 2
24488: PUSH
24489: LD_INT 30
24491: PUSH
24492: LD_INT 7
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 30
24501: PUSH
24502: LD_INT 8
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: LIST
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PPUSH
24518: CALL_OW 69
24522: PUSH
24523: FOR_IN
24524: IFFALSE 24572
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24526: LD_VAR 0 2
24530: PPUSH
24531: LD_INT 1
24533: PPUSH
24534: CALL_OW 268
24538: PUSH
24539: LD_INT 11
24541: EQUAL
24542: PUSH
24543: LD_VAR 0 2
24547: PPUSH
24548: LD_INT 2
24550: PPUSH
24551: CALL_OW 268
24555: PUSH
24556: LD_INT 11
24558: EQUAL
24559: OR
24560: IFFALSE 24570
// eventVar1 = 1 ;
24562: LD_ADDR_EXP 65
24566: PUSH
24567: LD_INT 1
24569: ST_TO_ADDR
24570: GO 24523
24572: POP
24573: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24574: LD_VAR 0 1
24578: PPUSH
24579: CALL_OW 255
24583: PUSH
24584: LD_INT 2
24586: EQUAL
24587: IFFALSE 24692
// begin if GetBType ( building ) = b_barracks then
24589: LD_VAR 0 1
24593: PPUSH
24594: CALL_OW 266
24598: PUSH
24599: LD_INT 5
24601: EQUAL
24602: IFFALSE 24692
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24604: LD_ADDR_VAR 0 2
24608: PUSH
24609: LD_INT 22
24611: PUSH
24612: LD_INT 2
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 25
24621: PUSH
24622: LD_INT 1
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 3
24631: PUSH
24632: LD_INT 54
24634: PUSH
24635: EMPTY
24636: LIST
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: LIST
24646: PPUSH
24647: CALL_OW 69
24651: PUSH
24652: LD_EXP 26
24656: PUSH
24657: EMPTY
24658: LIST
24659: DIFF
24660: PUSH
24661: FOR_IN
24662: IFFALSE 24680
// ComEnterUnit ( i , building ) ;
24664: LD_VAR 0 2
24668: PPUSH
24669: LD_VAR 0 1
24673: PPUSH
24674: CALL_OW 120
24678: GO 24661
24680: POP
24681: POP
// arArm = building ;
24682: LD_ADDR_EXP 45
24686: PUSH
24687: LD_VAR 0 1
24691: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
24692: LD_VAR 0 1
24696: PPUSH
24697: CALL_OW 255
24701: PUSH
24702: LD_INT 3
24704: EQUAL
24705: IFFALSE 25178
// begin if GetBType ( building ) = b_factory then
24707: LD_VAR 0 1
24711: PPUSH
24712: CALL_OW 266
24716: PUSH
24717: LD_INT 3
24719: EQUAL
24720: IFFALSE 24787
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
24722: LD_ADDR_VAR 0 2
24726: PUSH
24727: LD_INT 22
24729: PUSH
24730: LD_INT 3
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 25
24739: PUSH
24740: LD_INT 3
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PPUSH
24751: CALL_OW 69
24755: PUSH
24756: FOR_IN
24757: IFFALSE 24775
// ComEnterUnit ( i , building ) ;
24759: LD_VAR 0 2
24763: PPUSH
24764: LD_VAR 0 1
24768: PPUSH
24769: CALL_OW 120
24773: GO 24756
24775: POP
24776: POP
// ruFab = building ;
24777: LD_ADDR_EXP 35
24781: PUSH
24782: LD_VAR 0 1
24786: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
24787: LD_INT 22
24789: PUSH
24790: LD_INT 3
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 21
24799: PUSH
24800: LD_INT 3
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 30
24809: PUSH
24810: LD_INT 8
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: LIST
24821: PPUSH
24822: CALL_OW 69
24826: PUSH
24827: LD_INT 2
24829: EQUAL
24830: IFFALSE 25038
// begin for i = 1 to 2 do
24832: LD_ADDR_VAR 0 2
24836: PUSH
24837: DOUBLE
24838: LD_INT 1
24840: DEC
24841: ST_TO_ADDR
24842: LD_INT 2
24844: PUSH
24845: FOR_TO
24846: IFFALSE 24933
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
24848: LD_INT 22
24850: PUSH
24851: LD_INT 3
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 25
24860: PUSH
24861: LD_INT 4
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PPUSH
24872: CALL_OW 69
24876: PUSH
24877: LD_VAR 0 2
24881: ARRAY
24882: PPUSH
24883: LD_INT 22
24885: PUSH
24886: LD_INT 3
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 21
24895: PUSH
24896: LD_INT 3
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 30
24905: PUSH
24906: LD_INT 8
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: LIST
24917: PPUSH
24918: CALL_OW 69
24922: PUSH
24923: LD_INT 1
24925: ARRAY
24926: PPUSH
24927: CALL_OW 120
24931: GO 24845
24933: POP
24934: POP
// for i = 3 to 4 do
24935: LD_ADDR_VAR 0 2
24939: PUSH
24940: DOUBLE
24941: LD_INT 3
24943: DEC
24944: ST_TO_ADDR
24945: LD_INT 4
24947: PUSH
24948: FOR_TO
24949: IFFALSE 25036
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
24951: LD_INT 22
24953: PUSH
24954: LD_INT 3
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 25
24963: PUSH
24964: LD_INT 4
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PPUSH
24975: CALL_OW 69
24979: PUSH
24980: LD_VAR 0 2
24984: ARRAY
24985: PPUSH
24986: LD_INT 22
24988: PUSH
24989: LD_INT 3
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 21
24998: PUSH
24999: LD_INT 3
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 30
25008: PUSH
25009: LD_INT 8
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: LIST
25020: PPUSH
25021: CALL_OW 69
25025: PUSH
25026: LD_INT 2
25028: ARRAY
25029: PPUSH
25030: CALL_OW 120
25034: GO 24948
25036: POP
25037: POP
// end ; if GetBType ( building ) = b_barracks then
25038: LD_VAR 0 1
25042: PPUSH
25043: CALL_OW 266
25047: PUSH
25048: LD_INT 5
25050: EQUAL
25051: IFFALSE 25178
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25053: LD_ADDR_VAR 0 2
25057: PUSH
25058: LD_INT 22
25060: PUSH
25061: LD_INT 3
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 25
25070: PUSH
25071: LD_INT 1
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 3
25080: PUSH
25081: LD_INT 54
25083: PUSH
25084: EMPTY
25085: LIST
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: LIST
25095: PPUSH
25096: CALL_OW 69
25100: PUSH
25101: FOR_IN
25102: IFFALSE 25120
// ComEnterUnit ( i , building ) ;
25104: LD_VAR 0 2
25108: PPUSH
25109: LD_VAR 0 1
25113: PPUSH
25114: CALL_OW 120
25118: GO 25101
25120: POP
25121: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25122: LD_INT 22
25124: PUSH
25125: LD_INT 3
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 30
25134: PUSH
25135: LD_INT 5
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PPUSH
25146: CALL_OW 69
25150: PUSH
25151: LD_INT 0
25153: EQUAL
25154: IFFALSE 25168
// ruArm1 = building else
25156: LD_ADDR_EXP 33
25160: PUSH
25161: LD_VAR 0 1
25165: ST_TO_ADDR
25166: GO 25178
// ruArm2 = building ;
25168: LD_ADDR_EXP 34
25172: PUSH
25173: LD_VAR 0 1
25177: ST_TO_ADDR
// end ; end ; end ;
25178: PPOPN 2
25180: END
// on EnterBuilding ( building , human ) do var rnd ;
25181: LD_INT 0
25183: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25184: LD_VAR 0 2
25188: PPUSH
25189: CALL_OW 255
25193: PUSH
25194: LD_INT 2
25196: EQUAL
25197: PUSH
25198: LD_VAR 0 2
25202: PPUSH
25203: CALL_OW 257
25207: PUSH
25208: LD_INT 1
25210: EQUAL
25211: AND
25212: PUSH
25213: LD_VAR 0 1
25217: PUSH
25218: LD_EXP 45
25222: EQUAL
25223: AND
25224: IFFALSE 25271
// begin wait ( 0 0$1 ) ;
25226: LD_INT 35
25228: PPUSH
25229: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25233: LD_ADDR_VAR 0 3
25237: PUSH
25238: LD_INT 1
25240: PPUSH
25241: LD_INT 100
25243: PPUSH
25244: CALL_OW 12
25248: ST_TO_ADDR
// if rnd > 50 then
25249: LD_VAR 0 3
25253: PUSH
25254: LD_INT 50
25256: GREATER
25257: IFFALSE 25271
// SetClass ( human , class_mortar ) ;
25259: LD_VAR 0 2
25263: PPUSH
25264: LD_INT 8
25266: PPUSH
25267: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25271: LD_VAR 0 2
25275: PUSH
25276: LD_INT 22
25278: PUSH
25279: LD_INT 2
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 25
25288: PUSH
25289: LD_INT 12
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PPUSH
25300: CALL_OW 69
25304: IN
25305: IFFALSE 25355
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25307: LD_VAR 0 1
25311: PPUSH
25312: CALL_OW 266
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: LD_INT 1
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: IN
25327: IFFALSE 25343
// SetClass ( human , class_apeman_engineer ) else
25329: LD_VAR 0 2
25333: PPUSH
25334: LD_INT 16
25336: PPUSH
25337: CALL_OW 336
25341: GO 25355
// SetClass ( human , class_apeman_soldier ) ;
25343: LD_VAR 0 2
25347: PPUSH
25348: LD_INT 15
25350: PPUSH
25351: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25355: LD_VAR 0 2
25359: PPUSH
25360: CALL_OW 255
25364: PUSH
25365: LD_INT 3
25367: EQUAL
25368: PUSH
25369: LD_VAR 0 2
25373: PPUSH
25374: CALL_OW 257
25378: PUSH
25379: LD_INT 1
25381: EQUAL
25382: AND
25383: PUSH
25384: LD_VAR 0 1
25388: PUSH
25389: LD_EXP 33
25393: EQUAL
25394: PUSH
25395: LD_VAR 0 1
25399: PUSH
25400: LD_EXP 34
25404: EQUAL
25405: OR
25406: PUSH
25407: EMPTY
25408: LIST
25409: AND
25410: IFFALSE 25431
// begin wait ( 0 0$1 ) ;
25412: LD_INT 35
25414: PPUSH
25415: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25419: LD_VAR 0 2
25423: PPUSH
25424: LD_INT 9
25426: PPUSH
25427: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25431: LD_VAR 0 2
25435: PPUSH
25436: CALL_OW 255
25440: PUSH
25441: LD_INT 3
25443: EQUAL
25444: PUSH
25445: LD_VAR 0 2
25449: PPUSH
25450: CALL_OW 257
25454: PUSH
25455: LD_INT 9
25457: EQUAL
25458: AND
25459: PUSH
25460: LD_VAR 0 1
25464: PPUSH
25465: CALL_OW 266
25469: PUSH
25470: LD_INT 32
25472: EQUAL
25473: AND
25474: IFFALSE 25495
// begin wait ( 0 0$1 ) ;
25476: LD_INT 35
25478: PPUSH
25479: CALL_OW 67
// SetClass ( human , 1 ) ;
25483: LD_VAR 0 2
25487: PPUSH
25488: LD_INT 1
25490: PPUSH
25491: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25495: LD_VAR 0 2
25499: PPUSH
25500: CALL_OW 255
25504: PUSH
25505: LD_INT 3
25507: EQUAL
25508: PUSH
25509: LD_VAR 0 2
25513: PPUSH
25514: CALL_OW 257
25518: PUSH
25519: LD_INT 3
25521: EQUAL
25522: AND
25523: PUSH
25524: LD_VAR 0 1
25528: PUSH
25529: LD_EXP 35
25533: EQUAL
25534: AND
25535: IFFALSE 25549
// SetLives ( human , 1000 ) ;
25537: LD_VAR 0 2
25541: PPUSH
25542: LD_INT 1000
25544: PPUSH
25545: CALL_OW 234
// end ;
25549: PPOPN 3
25551: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25552: LD_VAR 0 1
25556: PUSH
25557: LD_INT 1
25559: EQUAL
25560: PUSH
25561: LD_VAR 0 2
25565: PUSH
25566: LD_INT 2
25568: EQUAL
25569: AND
25570: PUSH
25571: LD_INT 1
25573: PPUSH
25574: LD_INT 2
25576: PPUSH
25577: CALL_OW 81
25581: PUSH
25582: LD_INT 1
25584: EQUAL
25585: AND
25586: IFFALSE 25607
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25588: LD_EXP 24
25592: PPUSH
25593: LD_STRING D6b-Pow-1
25595: PPUSH
25596: CALL_OW 94
// YouLost ( Powell ) ;
25600: LD_STRING Powell
25602: PPUSH
25603: CALL_OW 104
// end ; end ;
25607: PPOPN 2
25609: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25610: LD_INT 23
25612: PPUSH
25613: LD_INT 22
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 21
25625: PUSH
25626: LD_INT 3
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PPUSH
25637: CALL_OW 70
25641: PUSH
25642: LD_INT 23
25644: PPUSH
25645: LD_INT 22
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 21
25657: PUSH
25658: LD_INT 2
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PPUSH
25669: CALL_OW 70
25673: OR
25674: PUSH
25675: LD_INT 1
25677: PPUSH
25678: LD_INT 2
25680: PPUSH
25681: CALL_OW 81
25685: PUSH
25686: LD_INT 1
25688: EQUAL
25689: AND
25690: IFFALSE 25823
25692: GO 25694
25694: DISABLE
// begin enable ;
25695: ENABLE
// wait ( 0 0$10 ) ;
25696: LD_INT 350
25698: PPUSH
25699: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
25703: LD_INT 23
25705: PPUSH
25706: LD_INT 22
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 21
25718: PUSH
25719: LD_INT 3
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PPUSH
25730: CALL_OW 70
25734: PUSH
25735: LD_INT 23
25737: PPUSH
25738: LD_INT 22
25740: PUSH
25741: LD_INT 1
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 21
25750: PUSH
25751: LD_INT 2
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PPUSH
25762: CALL_OW 70
25766: OR
25767: PUSH
25768: LD_INT 1
25770: PPUSH
25771: LD_INT 2
25773: PPUSH
25774: CALL_OW 81
25778: PUSH
25779: LD_INT 1
25781: EQUAL
25782: AND
25783: IFFALSE 25823
// begin disable ;
25785: DISABLE
// InGameOn ;
25786: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
25790: LD_INT 73
25792: PPUSH
25793: LD_INT 18
25795: PPUSH
25796: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
25800: LD_EXP 24
25804: PPUSH
25805: LD_STRING D6b-Pow-1
25807: PPUSH
25808: CALL_OW 94
// YouLost ( Powell ) ;
25812: LD_STRING Powell
25814: PPUSH
25815: CALL_OW 104
// InGameOff ;
25819: CALL_OW 9
// end ; end ;
25823: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
25824: LD_VAR 0 1
25828: PPUSH
25829: CALL 44173 0 1
// if unit = JMM then
25833: LD_VAR 0 1
25837: PUSH
25838: LD_EXP 1
25842: EQUAL
25843: IFFALSE 25852
// YouLost ( JMM ) ;
25845: LD_STRING JMM
25847: PPUSH
25848: CALL_OW 104
// if unit = Khatam then
25852: LD_VAR 0 1
25856: PUSH
25857: LD_EXP 14
25861: EQUAL
25862: IFFALSE 25872
// KhatamStatus = 0 ;
25864: LD_ADDR_EXP 53
25868: PUSH
25869: LD_INT 0
25871: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
25872: LD_VAR 0 1
25876: PPUSH
25877: CALL_OW 255
25881: PUSH
25882: LD_INT 3
25884: EQUAL
25885: PUSH
25886: LD_VAR 0 1
25890: PPUSH
25891: CALL_OW 247
25895: PUSH
25896: LD_INT 3
25898: EQUAL
25899: AND
25900: IFFALSE 26592
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
25902: LD_VAR 0 1
25906: PPUSH
25907: CALL_OW 266
25911: PUSH
25912: LD_INT 31
25914: EQUAL
25915: PUSH
25916: LD_VAR 0 1
25920: PPUSH
25921: CALL_OW 266
25925: PUSH
25926: LD_INT 32
25928: EQUAL
25929: OR
25930: PUSH
25931: LD_VAR 0 1
25935: PPUSH
25936: CALL_OW 266
25940: PUSH
25941: LD_INT 36
25943: EQUAL
25944: OR
25945: PUSH
25946: LD_VAR 0 1
25950: PPUSH
25951: CALL_OW 266
25955: PUSH
25956: LD_INT 0
25958: EQUAL
25959: OR
25960: PUSH
25961: LD_VAR 0 1
25965: PPUSH
25966: CALL_OW 266
25970: PUSH
25971: LD_INT 24
25973: EQUAL
25974: OR
25975: PUSH
25976: LD_VAR 0 1
25980: PPUSH
25981: CALL_OW 266
25985: PUSH
25986: LD_INT 17
25988: EQUAL
25989: OR
25990: PUSH
25991: LD_VAR 0 1
25995: PPUSH
25996: CALL_OW 266
26000: PUSH
26001: LD_INT 25
26003: EQUAL
26004: OR
26005: PUSH
26006: LD_VAR 0 1
26010: PPUSH
26011: CALL_OW 266
26015: PUSH
26016: LD_INT 19
26018: EQUAL
26019: OR
26020: PUSH
26021: LD_VAR 0 1
26025: PPUSH
26026: CALL_OW 266
26030: PUSH
26031: LD_INT 20
26033: EQUAL
26034: OR
26035: PUSH
26036: LD_VAR 0 1
26040: PPUSH
26041: CALL_OW 266
26045: PUSH
26046: LD_INT 18
26048: EQUAL
26049: OR
26050: PUSH
26051: LD_VAR 0 1
26055: PPUSH
26056: CALL_OW 266
26060: PUSH
26061: LD_INT 21
26063: EQUAL
26064: OR
26065: PUSH
26066: LD_VAR 0 1
26070: PPUSH
26071: CALL_OW 266
26075: PUSH
26076: LD_INT 23
26078: EQUAL
26079: OR
26080: PUSH
26081: LD_VAR 0 1
26085: PPUSH
26086: CALL_OW 266
26090: PUSH
26091: LD_INT 16
26093: EQUAL
26094: OR
26095: PUSH
26096: LD_VAR 0 1
26100: PPUSH
26101: CALL_OW 266
26105: PUSH
26106: LD_INT 6
26108: EQUAL
26109: OR
26110: PUSH
26111: LD_VAR 0 1
26115: PPUSH
26116: CALL_OW 266
26120: PUSH
26121: LD_INT 29
26123: EQUAL
26124: OR
26125: PUSH
26126: LD_VAR 0 1
26130: PPUSH
26131: CALL_OW 266
26135: PUSH
26136: LD_INT 26
26138: EQUAL
26139: OR
26140: PUSH
26141: LD_VAR 0 1
26145: PPUSH
26146: CALL_OW 266
26150: PUSH
26151: LD_INT 30
26153: EQUAL
26154: OR
26155: PUSH
26156: LD_VAR 0 1
26160: PPUSH
26161: CALL_OW 266
26165: PUSH
26166: LD_INT 28
26168: EQUAL
26169: OR
26170: PUSH
26171: LD_VAR 0 1
26175: PPUSH
26176: CALL_OW 266
26180: PUSH
26181: LD_INT 27
26183: EQUAL
26184: OR
26185: PUSH
26186: LD_VAR 0 1
26190: PPUSH
26191: CALL_OW 266
26195: PUSH
26196: LD_INT 33
26198: EQUAL
26199: OR
26200: PUSH
26201: LD_VAR 0 1
26205: PPUSH
26206: CALL_OW 266
26210: PUSH
26211: LD_INT 2
26213: EQUAL
26214: OR
26215: PUSH
26216: LD_VAR 0 1
26220: PPUSH
26221: CALL_OW 266
26225: PUSH
26226: LD_INT 4
26228: EQUAL
26229: OR
26230: IFFALSE 26316
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26232: LD_ADDR_EXP 42
26236: PUSH
26237: LD_EXP 42
26241: PUSH
26242: LD_VAR 0 1
26246: PPUSH
26247: CALL_OW 266
26251: ADD
26252: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26253: LD_ADDR_EXP 42
26257: PUSH
26258: LD_EXP 42
26262: PUSH
26263: LD_VAR 0 1
26267: PPUSH
26268: CALL_OW 250
26272: ADD
26273: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26274: LD_ADDR_EXP 42
26278: PUSH
26279: LD_EXP 42
26283: PUSH
26284: LD_VAR 0 1
26288: PPUSH
26289: CALL_OW 251
26293: ADD
26294: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26295: LD_ADDR_EXP 42
26299: PUSH
26300: LD_EXP 42
26304: PUSH
26305: LD_VAR 0 1
26309: PPUSH
26310: CALL_OW 254
26314: ADD
26315: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26316: LD_VAR 0 1
26320: PPUSH
26321: CALL_OW 266
26325: PUSH
26326: LD_INT 1
26328: EQUAL
26329: IFFALSE 26408
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26331: LD_ADDR_EXP 42
26335: PUSH
26336: LD_EXP 42
26340: PUSH
26341: LD_INT 0
26343: ADD
26344: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26345: LD_ADDR_EXP 42
26349: PUSH
26350: LD_EXP 42
26354: PUSH
26355: LD_VAR 0 1
26359: PPUSH
26360: CALL_OW 250
26364: ADD
26365: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26366: LD_ADDR_EXP 42
26370: PUSH
26371: LD_EXP 42
26375: PUSH
26376: LD_VAR 0 1
26380: PPUSH
26381: CALL_OW 251
26385: ADD
26386: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26387: LD_ADDR_EXP 42
26391: PUSH
26392: LD_EXP 42
26396: PUSH
26397: LD_VAR 0 1
26401: PPUSH
26402: CALL_OW 254
26406: ADD
26407: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26408: LD_VAR 0 1
26412: PPUSH
26413: CALL_OW 266
26417: PUSH
26418: LD_INT 3
26420: EQUAL
26421: IFFALSE 26500
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26423: LD_ADDR_EXP 42
26427: PUSH
26428: LD_EXP 42
26432: PUSH
26433: LD_INT 2
26435: ADD
26436: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26437: LD_ADDR_EXP 42
26441: PUSH
26442: LD_EXP 42
26446: PUSH
26447: LD_VAR 0 1
26451: PPUSH
26452: CALL_OW 250
26456: ADD
26457: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26458: LD_ADDR_EXP 42
26462: PUSH
26463: LD_EXP 42
26467: PUSH
26468: LD_VAR 0 1
26472: PPUSH
26473: CALL_OW 251
26477: ADD
26478: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26479: LD_ADDR_EXP 42
26483: PUSH
26484: LD_EXP 42
26488: PUSH
26489: LD_VAR 0 1
26493: PPUSH
26494: CALL_OW 254
26498: ADD
26499: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 266
26509: PUSH
26510: LD_INT 5
26512: EQUAL
26513: IFFALSE 26592
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26515: LD_ADDR_EXP 42
26519: PUSH
26520: LD_EXP 42
26524: PUSH
26525: LD_INT 4
26527: ADD
26528: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26529: LD_ADDR_EXP 42
26533: PUSH
26534: LD_EXP 42
26538: PUSH
26539: LD_VAR 0 1
26543: PPUSH
26544: CALL_OW 250
26548: ADD
26549: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26550: LD_ADDR_EXP 42
26554: PUSH
26555: LD_EXP 42
26559: PUSH
26560: LD_VAR 0 1
26564: PPUSH
26565: CALL_OW 251
26569: ADD
26570: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26571: LD_ADDR_EXP 42
26575: PUSH
26576: LD_EXP 42
26580: PUSH
26581: LD_VAR 0 1
26585: PPUSH
26586: CALL_OW 254
26590: ADD
26591: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26592: LD_EXP 51
26596: PUSH
26597: LD_VAR 0 1
26601: PPUSH
26602: CALL_OW 257
26606: PUSH
26607: LD_INT 3
26609: EQUAL
26610: AND
26611: PUSH
26612: LD_VAR 0 1
26616: PPUSH
26617: CALL_OW 255
26621: PUSH
26622: LD_INT 3
26624: EQUAL
26625: AND
26626: PUSH
26627: LD_EXP 35
26631: PPUSH
26632: CALL_OW 302
26636: AND
26637: PUSH
26638: LD_EXP 35
26642: PPUSH
26643: CALL_OW 255
26647: PUSH
26648: LD_INT 3
26650: EQUAL
26651: AND
26652: IFFALSE 26736
// begin ruMech := ruMech - 1 ;
26654: LD_ADDR_EXP 51
26658: PUSH
26659: LD_EXP 51
26663: PUSH
26664: LD_INT 1
26666: MINUS
26667: ST_TO_ADDR
// uc_side = 3 ;
26668: LD_ADDR_OWVAR 20
26672: PUSH
26673: LD_INT 3
26675: ST_TO_ADDR
// uc_nation = 3 ;
26676: LD_ADDR_OWVAR 21
26680: PUSH
26681: LD_INT 3
26683: ST_TO_ADDR
// hc_gallery :=  ;
26684: LD_ADDR_OWVAR 33
26688: PUSH
26689: LD_STRING 
26691: ST_TO_ADDR
// hc_name :=  ;
26692: LD_ADDR_OWVAR 26
26696: PUSH
26697: LD_STRING 
26699: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
26700: LD_INT 0
26702: PPUSH
26703: LD_EXP 36
26707: PPUSH
26708: LD_EXP 37
26712: PPUSH
26713: CALL_OW 12
26717: PPUSH
26718: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
26722: CALL_OW 44
26726: PPUSH
26727: LD_EXP 35
26731: PPUSH
26732: CALL_OW 52
// end ; end ;
26736: PPOPN 1
26738: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
26739: LD_VAR 0 1
26743: PPUSH
26744: LD_VAR 0 2
26748: PPUSH
26749: CALL 44295 0 2
// end ;
26753: PPOPN 2
26755: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
26756: LD_ADDR_OWVAR 57
26760: PUSH
26761: LD_INT 0
26763: ST_TO_ADDR
// fastEnd = 1 ;
26764: LD_ADDR_EXP 63
26768: PUSH
26769: LD_INT 1
26771: ST_TO_ADDR
// FinishMission ;
26772: CALL 27940 0 0
// end ;
26776: PPOPN 1
26778: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
26779: LD_VAR 0 1
26783: PPUSH
26784: CALL 44279 0 1
// end ; end_of_file
26788: PPOPN 1
26790: END
// export function CreateNature ; var i , un ; begin
26791: LD_INT 0
26793: PPUSH
26794: PPUSH
26795: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
26796: LD_ADDR_VAR 0 2
26800: PUSH
26801: DOUBLE
26802: LD_INT 1
26804: DEC
26805: ST_TO_ADDR
26806: LD_OWVAR 67
26810: PUSH
26811: LD_INT 1
26813: PPUSH
26814: LD_INT 5
26816: PPUSH
26817: CALL_OW 12
26821: PLUS
26822: PUSH
26823: FOR_TO
26824: IFFALSE 26969
// begin hc_sex = sex_male ;
26826: LD_ADDR_OWVAR 27
26830: PUSH
26831: LD_INT 1
26833: ST_TO_ADDR
// uc_side = 0 ;
26834: LD_ADDR_OWVAR 20
26838: PUSH
26839: LD_INT 0
26841: ST_TO_ADDR
// uc_nation = nation_nature ;
26842: LD_ADDR_OWVAR 21
26846: PUSH
26847: LD_INT 0
26849: ST_TO_ADDR
// hc_class = class_apeman ;
26850: LD_ADDR_OWVAR 28
26854: PUSH
26855: LD_INT 12
26857: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
26858: LD_ADDR_OWVAR 31
26862: PUSH
26863: LD_INT 2
26865: PPUSH
26866: LD_INT 7
26868: PPUSH
26869: CALL_OW 12
26873: PUSH
26874: LD_OWVAR 67
26878: PLUS
26879: PUSH
26880: LD_INT 2
26882: PPUSH
26883: LD_INT 10
26885: PPUSH
26886: CALL_OW 12
26890: PUSH
26891: LD_INT 2
26893: PPUSH
26894: LD_INT 10
26896: PPUSH
26897: CALL_OW 12
26901: PUSH
26902: LD_INT 2
26904: PPUSH
26905: LD_INT 10
26907: PPUSH
26908: CALL_OW 12
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26919: LD_ADDR_OWVAR 35
26923: PUSH
26924: LD_INT 5
26926: NEG
26927: PPUSH
26928: LD_INT 5
26930: PPUSH
26931: CALL_OW 12
26935: PUSH
26936: LD_OWVAR 67
26940: MUL
26941: ST_TO_ADDR
// un = CreateHuman ;
26942: LD_ADDR_VAR 0 3
26946: PUSH
26947: CALL_OW 44
26951: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
26952: LD_VAR 0 3
26956: PPUSH
26957: LD_INT 5
26959: PPUSH
26960: LD_INT 0
26962: PPUSH
26963: CALL_OW 49
// end ;
26967: GO 26823
26969: POP
26970: POP
// for i = 1 to Difficulty + 2 do
26971: LD_ADDR_VAR 0 2
26975: PUSH
26976: DOUBLE
26977: LD_INT 1
26979: DEC
26980: ST_TO_ADDR
26981: LD_OWVAR 67
26985: PUSH
26986: LD_INT 2
26988: PLUS
26989: PUSH
26990: FOR_TO
26991: IFFALSE 27100
// begin hc_sex = sex_male ;
26993: LD_ADDR_OWVAR 27
26997: PUSH
26998: LD_INT 1
27000: ST_TO_ADDR
// uc_side = 0 ;
27001: LD_ADDR_OWVAR 20
27005: PUSH
27006: LD_INT 0
27008: ST_TO_ADDR
// uc_nation = nation_nature ;
27009: LD_ADDR_OWVAR 21
27013: PUSH
27014: LD_INT 0
27016: ST_TO_ADDR
// hc_class = class_tiger ;
27017: LD_ADDR_OWVAR 28
27021: PUSH
27022: LD_INT 14
27024: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27025: LD_ADDR_OWVAR 31
27029: PUSH
27030: LD_EXP 37
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27050: LD_ADDR_OWVAR 35
27054: PUSH
27055: LD_INT 5
27057: NEG
27058: PPUSH
27059: LD_INT 5
27061: PPUSH
27062: CALL_OW 12
27066: PUSH
27067: LD_OWVAR 67
27071: MUL
27072: ST_TO_ADDR
// un = CreateHuman ;
27073: LD_ADDR_VAR 0 3
27077: PUSH
27078: CALL_OW 44
27082: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27083: LD_VAR 0 3
27087: PPUSH
27088: LD_INT 6
27090: PPUSH
27091: LD_INT 0
27093: PPUSH
27094: CALL_OW 49
// end ;
27098: GO 26990
27100: POP
27101: POP
// for i = 1 to rand ( 3 , 4 ) do
27102: LD_ADDR_VAR 0 2
27106: PUSH
27107: DOUBLE
27108: LD_INT 1
27110: DEC
27111: ST_TO_ADDR
27112: LD_INT 3
27114: PPUSH
27115: LD_INT 4
27117: PPUSH
27118: CALL_OW 12
27122: PUSH
27123: FOR_TO
27124: IFFALSE 27218
// begin hc_sex = sex_male ;
27126: LD_ADDR_OWVAR 27
27130: PUSH
27131: LD_INT 1
27133: ST_TO_ADDR
// uc_side = 0 ;
27134: LD_ADDR_OWVAR 20
27138: PUSH
27139: LD_INT 0
27141: ST_TO_ADDR
// uc_nation = nation_nature ;
27142: LD_ADDR_OWVAR 21
27146: PUSH
27147: LD_INT 0
27149: ST_TO_ADDR
// hc_class = 18 ;
27150: LD_ADDR_OWVAR 28
27154: PUSH
27155: LD_INT 18
27157: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27158: LD_ADDR_OWVAR 31
27162: PUSH
27163: LD_EXP 37
27167: PUSH
27168: LD_INT 0
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: ST_TO_ADDR
// hc_agressivity = 0 ;
27183: LD_ADDR_OWVAR 35
27187: PUSH
27188: LD_INT 0
27190: ST_TO_ADDR
// un = CreateHuman ;
27191: LD_ADDR_VAR 0 3
27195: PUSH
27196: CALL_OW 44
27200: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27201: LD_VAR 0 3
27205: PPUSH
27206: LD_INT 6
27208: PPUSH
27209: LD_INT 0
27211: PPUSH
27212: CALL_OW 49
// end ;
27216: GO 27123
27218: POP
27219: POP
// end ; end_of_file
27220: LD_VAR 0 1
27224: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27225: LD_EXP 46
27229: PUSH
27230: LD_INT 1
27232: EQUAL
27233: IFFALSE 27321
27235: GO 27237
27237: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27238: LD_INT 7
27240: PPUSH
27241: LD_INT 5
27243: PPUSH
27244: LD_INT 4
27246: PUSH
27247: LD_INT 5
27249: PUSH
27250: LD_INT 6
27252: PUSH
27253: LD_INT 6
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: PUSH
27262: LD_OWVAR 67
27266: ARRAY
27267: PPUSH
27268: LD_EXP 36
27272: PPUSH
27273: LD_EXP 37
27277: PPUSH
27278: CALL_OW 12
27282: PPUSH
27283: LD_INT 2
27285: PPUSH
27286: LD_INT 1
27288: PPUSH
27289: LD_INT 1
27291: PPUSH
27292: EMPTY
27293: PPUSH
27294: LD_INT 25
27296: PUSH
27297: LD_INT 26
27299: PUSH
27300: LD_INT 27
27302: PUSH
27303: LD_INT 28
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: PPUSH
27312: EMPTY
27313: PPUSH
27314: LD_INT 1
27316: PPUSH
27317: CALL 17210 0 11
27321: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27322: LD_EXP 46
27326: PUSH
27327: LD_INT 1
27329: EQUAL
27330: IFFALSE 27422
27332: GO 27334
27334: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27335: LD_INT 5
27337: PPUSH
27338: LD_INT 2
27340: PPUSH
27341: LD_INT 5
27343: PUSH
27344: LD_INT 6
27346: PUSH
27347: LD_INT 8
27349: PUSH
27350: LD_INT 9
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: PUSH
27359: LD_OWVAR 67
27363: ARRAY
27364: PPUSH
27365: LD_INT 0
27367: PPUSH
27368: LD_INT 0
27370: PPUSH
27371: LD_INT 2
27373: PUSH
27374: LD_INT 4
27376: PUSH
27377: LD_INT 5
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: LIST
27384: PUSH
27385: LD_OWVAR 67
27389: ARRAY
27390: PPUSH
27391: LD_INT 0
27393: PPUSH
27394: LD_EXP 36
27398: PPUSH
27399: LD_EXP 37
27403: PPUSH
27404: CALL_OW 12
27408: PPUSH
27409: LD_INT 7
27411: PPUSH
27412: LD_INT 9
27414: PPUSH
27415: LD_INT 1
27417: PPUSH
27418: CALL 18914 0 11
27422: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27423: LD_EXP 46
27427: PUSH
27428: LD_INT 1
27430: EQUAL
27431: IFFALSE 27440
27433: GO 27435
27435: DISABLE
// PrepareArabianSheik ;
27436: CALL 4699 0 0
27440: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27441: LD_EXP 29
27445: PUSH
27446: LD_EXP 64
27450: PUSH
27451: LD_INT 1
27453: EQUAL
27454: AND
27455: IFFALSE 27524
27457: GO 27459
27459: DISABLE
// begin enable ;
27460: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27461: LD_INT 6
27463: PPUSH
27464: LD_INT 3
27466: PPUSH
27467: LD_EXP 60
27471: PPUSH
27472: LD_INT 0
27474: PPUSH
27475: LD_OWVAR 67
27479: PPUSH
27480: LD_INT 0
27482: PPUSH
27483: LD_EXP 60
27487: PUSH
27488: LD_INT 3
27490: DIV
27491: PUSH
27492: LD_INT 1
27494: PLUS
27495: PPUSH
27496: LD_EXP 36
27500: PPUSH
27501: LD_EXP 37
27505: PPUSH
27506: CALL_OW 12
27510: PPUSH
27511: LD_INT 17
27513: PPUSH
27514: LD_INT 18
27516: PPUSH
27517: LD_INT 1
27519: PPUSH
27520: CALL 18914 0 11
// end ;
27524: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27525: LD_EXP 29
27529: PUSH
27530: LD_EXP 64
27534: PUSH
27535: LD_INT 1
27537: EQUAL
27538: AND
27539: IFFALSE 27616
27541: GO 27543
27543: DISABLE
// begin enable ;
27544: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27545: LD_INT 17
27547: PPUSH
27548: LD_INT 6
27550: PPUSH
27551: LD_EXP 59
27555: PPUSH
27556: LD_EXP 36
27560: PPUSH
27561: LD_EXP 37
27565: PPUSH
27566: CALL_OW 12
27570: PPUSH
27571: LD_INT 3
27573: PPUSH
27574: LD_INT 1
27576: PPUSH
27577: LD_INT 3
27579: PUSH
27580: LD_INT 3
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PPUSH
27587: LD_INT 43
27589: PUSH
27590: LD_INT 44
27592: PUSH
27593: LD_INT 45
27595: PUSH
27596: LD_INT 46
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: PPUSH
27605: EMPTY
27606: PPUSH
27607: EMPTY
27608: PPUSH
27609: LD_INT 1
27611: PPUSH
27612: CALL 17210 0 11
// end ;
27616: END
// every 10 10$00 trigger joinEpsilon do
27617: LD_EXP 29
27621: IFFALSE 27675
27623: GO 27625
27625: DISABLE
// begin enable ;
27626: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27627: LD_ADDR_EXP 59
27631: PUSH
27632: LD_EXP 59
27636: PUSH
27637: LD_INT 1
27639: PPUSH
27640: LD_OWVAR 67
27644: PPUSH
27645: CALL_OW 12
27649: PLUS
27650: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27651: LD_ADDR_EXP 60
27655: PUSH
27656: LD_EXP 60
27660: PUSH
27661: LD_INT 1
27663: PPUSH
27664: LD_OWVAR 67
27668: PPUSH
27669: CALL_OW 12
27673: PLUS
27674: ST_TO_ADDR
// end ;
27675: END
// every 21 21$0 trigger attackAvalaible = 1 do
27676: LD_EXP 64
27680: PUSH
27681: LD_INT 1
27683: EQUAL
27684: IFFALSE 27697
27686: GO 27688
27688: DISABLE
// attackAvalaible = 0 ; end_of_file
27689: LD_ADDR_EXP 64
27693: PUSH
27694: LD_INT 0
27696: ST_TO_ADDR
27697: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
27698: LD_INT 54
27700: PPUSH
27701: LD_INT 1
27703: PPUSH
27704: CALL_OW 321
27708: PUSH
27709: LD_INT 2
27711: EQUAL
27712: PUSH
27713: LD_INT 55
27715: PPUSH
27716: LD_INT 1
27718: PPUSH
27719: CALL_OW 321
27723: PUSH
27724: LD_INT 2
27726: EQUAL
27727: AND
27728: PUSH
27729: LD_INT 21
27731: PPUSH
27732: LD_INT 1
27734: PPUSH
27735: CALL_OW 321
27739: PUSH
27740: LD_INT 2
27742: EQUAL
27743: AND
27744: PUSH
27745: LD_INT 22
27747: PPUSH
27748: LD_INT 1
27750: PPUSH
27751: CALL_OW 321
27755: PUSH
27756: LD_INT 2
27758: EQUAL
27759: AND
27760: PUSH
27761: LD_INT 12
27763: PPUSH
27764: LD_INT 1
27766: PPUSH
27767: CALL_OW 321
27771: PUSH
27772: LD_INT 1
27774: EQUAL
27775: PUSH
27776: LD_INT 32
27778: PPUSH
27779: LD_INT 1
27781: PPUSH
27782: CALL_OW 321
27786: PUSH
27787: LD_INT 1
27789: EQUAL
27790: OR
27791: PUSH
27792: EMPTY
27793: LIST
27794: AND
27795: PUSH
27796: LD_EXP 48
27800: PUSH
27801: LD_INT 1
27803: EQUAL
27804: AND
27805: PUSH
27806: LD_INT 22
27808: PUSH
27809: LD_INT 3
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 21
27818: PUSH
27819: LD_INT 1
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PPUSH
27830: CALL_OW 69
27834: PUSH
27835: LD_INT 0
27837: EQUAL
27838: AND
27839: IFFALSE 27895
27841: GO 27843
27843: DISABLE
// begin case query ( QEndMission ) of 1 :
27844: LD_STRING QEndMission
27846: PPUSH
27847: CALL_OW 97
27851: PUSH
27852: LD_INT 1
27854: DOUBLE
27855: EQUAL
27856: IFTRUE 27860
27858: GO 27871
27860: POP
// begin end_the_mission_allowed = true ;
27861: LD_ADDR_OWVAR 57
27865: PUSH
27866: LD_INT 1
27868: ST_TO_ADDR
// end ; 2 :
27869: GO 27895
27871: LD_INT 2
27873: DOUBLE
27874: EQUAL
27875: IFTRUE 27879
27877: GO 27894
27879: POP
// begin fastEnd = 1 ;
27880: LD_ADDR_EXP 63
27884: PUSH
27885: LD_INT 1
27887: ST_TO_ADDR
// FinishMission ;
27888: CALL 27940 0 0
// end ; end ;
27892: GO 27895
27894: POP
// end ;
27895: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
27896: LD_EXP 58
27900: PUSH
27901: LD_EXP 57
27905: NOT
27906: AND
27907: PUSH
27908: LD_INT 22
27910: PUSH
27911: LD_INT 3
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PPUSH
27918: CALL_OW 69
27922: PUSH
27923: LD_INT 0
27925: EQUAL
27926: AND
27927: IFFALSE 27939
27929: GO 27931
27931: DISABLE
// SetAchievement ( ACH_TACT ) ;
27932: LD_STRING ACH_TACT
27934: PPUSH
27935: CALL_OW 543
27939: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
27940: LD_INT 0
27942: PPUSH
27943: PPUSH
27944: PPUSH
27945: PPUSH
// if not snipersTrained then
27946: LD_EXP 62
27950: NOT
27951: IFFALSE 27960
// SetAchievement ( ACH_SNIPER ) ;
27953: LD_STRING ACH_SNIPER
27955: PPUSH
27956: CALL_OW 543
// m1 := false ;
27960: LD_ADDR_VAR 0 2
27964: PUSH
27965: LD_INT 0
27967: ST_TO_ADDR
// m2 := false ;
27968: LD_ADDR_VAR 0 3
27972: PUSH
27973: LD_INT 0
27975: ST_TO_ADDR
// m3 := false ;
27976: LD_ADDR_VAR 0 4
27980: PUSH
27981: LD_INT 0
27983: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
27984: LD_EXP 53
27988: PPUSH
27989: LD_STRING 10_KhatamStatus_1
27991: PPUSH
27992: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
27996: LD_EXP 52
28000: PPUSH
28001: LD_STRING 10_GensherEscape_1
28003: PPUSH
28004: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
28008: LD_INT 12
28010: PPUSH
28011: LD_INT 1
28013: PPUSH
28014: CALL_OW 321
28018: PUSH
28019: LD_INT 2
28021: EQUAL
28022: IFFALSE 28044
// begin AddMedal ( sights , 1 ) ;
28024: LD_STRING sights
28026: PPUSH
28027: LD_INT 1
28029: PPUSH
28030: CALL_OW 101
// m1 := true ;
28034: LD_ADDR_VAR 0 2
28038: PUSH
28039: LD_INT 1
28041: ST_TO_ADDR
// end else
28042: GO 28055
// begin AddMedal ( sights , - 1 ) ;
28044: LD_STRING sights
28046: PPUSH
28047: LD_INT 1
28049: NEG
28050: PPUSH
28051: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28055: LD_INT 32
28057: PPUSH
28058: LD_INT 1
28060: PPUSH
28061: CALL_OW 321
28065: PUSH
28066: LD_INT 2
28068: EQUAL
28069: IFFALSE 28091
// begin AddMedal ( computers , 1 ) ;
28071: LD_STRING computers
28073: PPUSH
28074: LD_INT 1
28076: PPUSH
28077: CALL_OW 101
// m2 := true ;
28081: LD_ADDR_VAR 0 3
28085: PUSH
28086: LD_INT 1
28088: ST_TO_ADDR
// end else
28089: GO 28102
// begin AddMedal ( computers , - 1 ) ;
28091: LD_STRING computers
28093: PPUSH
28094: LD_INT 1
28096: NEG
28097: PPUSH
28098: CALL_OW 101
// end ; if arabianEscape = 0 then
28102: LD_EXP 47
28106: PUSH
28107: LD_INT 0
28109: EQUAL
28110: IFFALSE 28142
// begin AddMedal ( renegades , 2 ) ;
28112: LD_STRING renegades
28114: PPUSH
28115: LD_INT 2
28117: PPUSH
28118: CALL_OW 101
// m3 := true ;
28122: LD_ADDR_VAR 0 4
28126: PUSH
28127: LD_INT 1
28129: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28130: LD_INT 0
28132: PPUSH
28133: LD_STRING 10_ScientistsEscape_1
28135: PPUSH
28136: CALL_OW 39
// end else
28140: GO 28153
// begin AddMedal ( renegades , - 1 ) ;
28142: LD_STRING renegades
28144: PPUSH
28145: LD_INT 1
28147: NEG
28148: PPUSH
28149: CALL_OW 101
// end ; SaveEpsilonBase ;
28153: CALL 28939 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28157: LD_VAR 0 2
28161: PUSH
28162: LD_VAR 0 3
28166: AND
28167: PUSH
28168: LD_VAR 0 4
28172: AND
28173: PUSH
28174: LD_OWVAR 67
28178: PUSH
28179: LD_INT 3
28181: GREATEREQUAL
28182: AND
28183: IFFALSE 28195
// SetAchievementEX ( ACH_AMER , 10 ) ;
28185: LD_STRING ACH_AMER
28187: PPUSH
28188: LD_INT 10
28190: PPUSH
28191: CALL_OW 564
// if tick <= 40 40$00 then
28195: LD_OWVAR 1
28199: PUSH
28200: LD_INT 84000
28202: LESSEQUAL
28203: IFFALSE 28219
// begin wait ( 3 ) ;
28205: LD_INT 3
28207: PPUSH
28208: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28212: LD_STRING ACH_ASPEED_10
28214: PPUSH
28215: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28219: LD_STRING Main
28221: PPUSH
28222: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28226: LD_INT 22
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 23
28238: PUSH
28239: LD_INT 1
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 21
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 2
28258: PUSH
28259: LD_INT 25
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 25
28271: PUSH
28272: LD_INT 2
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 25
28281: PUSH
28282: LD_INT 3
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 25
28291: PUSH
28292: LD_INT 4
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 25
28301: PUSH
28302: LD_INT 5
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 25
28311: PUSH
28312: LD_INT 8
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: PPUSH
28334: CALL_OW 69
28338: PPUSH
28339: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28343: LD_EXP 1
28347: PPUSH
28348: LD_EXP 54
28352: PUSH
28353: LD_STRING JMM
28355: STR
28356: PPUSH
28357: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28361: LD_EXP 2
28365: PPUSH
28366: LD_EXP 54
28370: PUSH
28371: LD_STRING Brown
28373: STR
28374: PPUSH
28375: CALL 11394 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28379: LD_EXP 3
28383: PPUSH
28384: LD_EXP 54
28388: PUSH
28389: LD_STRING Donaldson
28391: STR
28392: PPUSH
28393: CALL 11394 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28397: LD_EXP 4
28401: PPUSH
28402: LD_EXP 54
28406: PUSH
28407: LD_STRING Bobby
28409: STR
28410: PPUSH
28411: CALL 11394 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28415: LD_EXP 5
28419: PPUSH
28420: LD_EXP 54
28424: PUSH
28425: LD_STRING Cyrus
28427: STR
28428: PPUSH
28429: CALL 11394 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28433: LD_EXP 6
28437: PPUSH
28438: LD_EXP 54
28442: PUSH
28443: LD_STRING Lisa
28445: STR
28446: PPUSH
28447: CALL 11394 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28451: LD_EXP 7
28455: PPUSH
28456: LD_EXP 54
28460: PUSH
28461: LD_STRING Frank
28463: STR
28464: PPUSH
28465: CALL 11394 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28469: LD_EXP 8
28473: PPUSH
28474: LD_EXP 54
28478: PUSH
28479: LD_STRING Kikuchi
28481: STR
28482: PPUSH
28483: CALL 11394 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28487: LD_EXP 9
28491: PPUSH
28492: LD_EXP 54
28496: PUSH
28497: LD_STRING Houten
28499: STR
28500: PPUSH
28501: CALL 11394 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28505: LD_EXP 10
28509: PPUSH
28510: LD_EXP 54
28514: PUSH
28515: LD_STRING Gary
28517: STR
28518: PPUSH
28519: CALL 11394 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28523: LD_EXP 19
28527: PPUSH
28528: LD_EXP 54
28532: PUSH
28533: LD_STRING Cornell
28535: STR
28536: PPUSH
28537: CALL 11394 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28541: LD_EXP 11
28545: PPUSH
28546: LD_EXP 54
28550: PUSH
28551: LD_STRING Simms
28553: STR
28554: PPUSH
28555: CALL 11394 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28559: LD_EXP 12
28563: PPUSH
28564: LD_EXP 54
28568: PUSH
28569: LD_STRING Denis
28571: STR
28572: PPUSH
28573: CALL 11394 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28577: LD_EXP 13
28581: PPUSH
28582: LD_EXP 54
28586: PUSH
28587: LD_STRING Joan
28589: STR
28590: PPUSH
28591: CALL 11394 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28595: LD_EXP 15
28599: PPUSH
28600: LD_EXP 54
28604: PUSH
28605: LD_STRING Gladstone
28607: STR
28608: PPUSH
28609: CALL 11394 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28613: LD_EXP 17
28617: PPUSH
28618: LD_EXP 54
28622: PUSH
28623: LD_STRING DeltaDoctor
28625: STR
28626: PPUSH
28627: CALL 11394 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28631: LD_EXP 22
28635: PPUSH
28636: LD_STRING 10c_lock
28638: PPUSH
28639: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28643: LD_INT 50
28645: PUSH
28646: EMPTY
28647: LIST
28648: PUSH
28649: LD_INT 22
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 21
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 2
28671: PUSH
28672: LD_INT 25
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 25
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 25
28694: PUSH
28695: LD_INT 3
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 25
28704: PUSH
28705: LD_INT 4
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 25
28714: PUSH
28715: LD_INT 5
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 25
28724: PUSH
28725: LD_INT 8
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: PPUSH
28747: CALL_OW 69
28751: PUSH
28752: LD_EXP 1
28756: PUSH
28757: LD_EXP 2
28761: PUSH
28762: LD_EXP 3
28766: PUSH
28767: LD_EXP 4
28771: PUSH
28772: LD_EXP 5
28776: PUSH
28777: LD_EXP 6
28781: PUSH
28782: LD_EXP 7
28786: PUSH
28787: LD_EXP 15
28791: PUSH
28792: LD_EXP 8
28796: PUSH
28797: LD_EXP 12
28801: PUSH
28802: LD_EXP 13
28806: PUSH
28807: LD_EXP 9
28811: PUSH
28812: LD_EXP 11
28816: PUSH
28817: LD_EXP 10
28821: PUSH
28822: LD_EXP 17
28826: PUSH
28827: LD_EXP 19
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: DIFF
28850: PPUSH
28851: LD_STRING 10_other_survivors
28853: PPUSH
28854: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
28858: LD_INT 50
28860: PUSH
28861: EMPTY
28862: LIST
28863: PUSH
28864: LD_INT 22
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 21
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 2
28886: PUSH
28887: LD_INT 25
28889: PUSH
28890: LD_INT 16
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 25
28899: PUSH
28900: LD_INT 12
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: LIST
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: PPUSH
28918: CALL_OW 69
28922: PPUSH
28923: LD_STRING 10_ape
28925: PPUSH
28926: CALL_OW 38
// YouWin ;
28930: CALL_OW 103
// end ;
28934: LD_VAR 0 1
28938: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
28939: LD_INT 0
28941: PPUSH
28942: PPUSH
28943: PPUSH
28944: PPUSH
// epsilonBase = [ ] ;
28945: LD_ADDR_VAR 0 2
28949: PUSH
28950: EMPTY
28951: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
28952: LD_ADDR_VAR 0 3
28956: PUSH
28957: LD_INT 22
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 21
28969: PUSH
28970: LD_INT 3
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 50
28979: PUSH
28980: EMPTY
28981: LIST
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: LIST
28987: PPUSH
28988: CALL_OW 69
28992: ST_TO_ADDR
// for i in buildings do
28993: LD_ADDR_VAR 0 4
28997: PUSH
28998: LD_VAR 0 3
29002: PUSH
29003: FOR_IN
29004: IFFALSE 29456
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
29006: LD_VAR 0 4
29010: PPUSH
29011: CALL_OW 266
29015: PUSH
29016: LD_INT 6
29018: PUSH
29019: LD_INT 7
29021: PUSH
29022: LD_INT 8
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: LIST
29029: IN
29030: IFFALSE 29144
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29032: LD_ADDR_VAR 0 2
29036: PUSH
29037: LD_VAR 0 2
29041: PUSH
29042: LD_VAR 0 4
29046: PPUSH
29047: CALL_OW 266
29051: PUSH
29052: LD_VAR 0 4
29056: PPUSH
29057: CALL_OW 250
29061: PUSH
29062: LD_VAR 0 4
29066: PPUSH
29067: CALL_OW 251
29071: PUSH
29072: LD_VAR 0 4
29076: PPUSH
29077: CALL_OW 254
29081: PUSH
29082: LD_VAR 0 4
29086: PPUSH
29087: CALL_OW 267
29091: PUSH
29092: LD_VAR 0 4
29096: PPUSH
29097: CALL_OW 248
29101: PUSH
29102: LD_VAR 0 4
29106: PPUSH
29107: LD_INT 1
29109: PPUSH
29110: CALL_OW 268
29114: PUSH
29115: LD_VAR 0 4
29119: PPUSH
29120: LD_INT 2
29122: PPUSH
29123: CALL_OW 268
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: PUSH
29138: EMPTY
29139: LIST
29140: ADD
29141: ST_TO_ADDR
29142: GO 29454
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29144: LD_VAR 0 4
29148: PPUSH
29149: CALL_OW 266
29153: PUSH
29154: LD_INT 32
29156: EQUAL
29157: PUSH
29158: LD_VAR 0 4
29162: PPUSH
29163: CALL_OW 266
29167: PUSH
29168: LD_INT 33
29170: EQUAL
29171: OR
29172: IFFALSE 29269
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29174: LD_ADDR_VAR 0 2
29178: PUSH
29179: LD_VAR 0 2
29183: PUSH
29184: LD_VAR 0 4
29188: PPUSH
29189: CALL_OW 266
29193: PUSH
29194: LD_VAR 0 4
29198: PPUSH
29199: CALL_OW 250
29203: PUSH
29204: LD_VAR 0 4
29208: PPUSH
29209: CALL_OW 251
29213: PUSH
29214: LD_VAR 0 4
29218: PPUSH
29219: CALL_OW 254
29223: PUSH
29224: LD_VAR 0 4
29228: PPUSH
29229: CALL_OW 267
29233: PUSH
29234: LD_VAR 0 4
29238: PPUSH
29239: CALL_OW 248
29243: PUSH
29244: LD_VAR 0 4
29248: PPUSH
29249: CALL_OW 269
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: PUSH
29263: EMPTY
29264: LIST
29265: ADD
29266: ST_TO_ADDR
29267: GO 29454
// if GetBType ( i ) = b_factory then
29269: LD_VAR 0 4
29273: PPUSH
29274: CALL_OW 266
29278: PUSH
29279: LD_INT 3
29281: EQUAL
29282: IFFALSE 29372
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29284: LD_ADDR_VAR 0 2
29288: PUSH
29289: LD_VAR 0 2
29293: PPUSH
29294: LD_INT 1
29296: PPUSH
29297: LD_VAR 0 4
29301: PPUSH
29302: CALL_OW 266
29306: PUSH
29307: LD_VAR 0 4
29311: PPUSH
29312: CALL_OW 250
29316: PUSH
29317: LD_VAR 0 4
29321: PPUSH
29322: CALL_OW 251
29326: PUSH
29327: LD_VAR 0 4
29331: PPUSH
29332: CALL_OW 254
29336: PUSH
29337: LD_VAR 0 4
29341: PPUSH
29342: CALL_OW 267
29346: PUSH
29347: LD_VAR 0 4
29351: PPUSH
29352: CALL_OW 248
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: PPUSH
29365: CALL_OW 2
29369: ST_TO_ADDR
29370: GO 29454
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29372: LD_ADDR_VAR 0 2
29376: PUSH
29377: LD_VAR 0 2
29381: PUSH
29382: LD_VAR 0 4
29386: PPUSH
29387: CALL_OW 266
29391: PUSH
29392: LD_VAR 0 4
29396: PPUSH
29397: CALL_OW 250
29401: PUSH
29402: LD_VAR 0 4
29406: PPUSH
29407: CALL_OW 251
29411: PUSH
29412: LD_VAR 0 4
29416: PPUSH
29417: CALL_OW 254
29421: PUSH
29422: LD_VAR 0 4
29426: PPUSH
29427: CALL_OW 267
29431: PUSH
29432: LD_VAR 0 4
29436: PPUSH
29437: CALL_OW 248
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: PUSH
29450: EMPTY
29451: LIST
29452: ADD
29453: ST_TO_ADDR
// end ;
29454: GO 29003
29456: POP
29457: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29458: LD_VAR 0 2
29462: PPUSH
29463: LD_STRING 10_EpsilonBase
29465: PPUSH
29466: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29470: LD_INT 19
29472: PPUSH
29473: LD_STRING 10_EpsilonEnv
29475: PPUSH
29476: CALL 29485 0 2
// end ;
29480: LD_VAR 0 1
29484: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29485: LD_INT 0
29487: PPUSH
// result := ListEnvironmentArea ( area ) ;
29488: LD_ADDR_VAR 0 3
29492: PUSH
29493: LD_VAR 0 1
29497: PPUSH
29498: CALL_OW 353
29502: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29503: LD_VAR 0 3
29507: PPUSH
29508: LD_VAR 0 2
29512: PPUSH
29513: CALL_OW 39
// end ; end_of_file
29517: LD_VAR 0 3
29521: RET
// every 0 0$01 do var timer ;
29522: GO 29524
29524: DISABLE
29525: LD_INT 0
29527: PPUSH
// begin timer := 0 0$20 ;
29528: LD_ADDR_VAR 0 1
29532: PUSH
29533: LD_INT 700
29535: ST_TO_ADDR
// repeat wait ( timer ) ;
29536: LD_VAR 0 1
29540: PPUSH
29541: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
29545: LD_EXP 56
29549: PUSH
29550: LD_INT 6
29552: GREATEREQUAL
29553: PUSH
29554: LD_EXP 56
29558: PUSH
29559: LD_INT 14
29561: LESS
29562: AND
29563: IFFALSE 29579
// timer := timer + 0 0$3 ;
29565: LD_ADDR_VAR 0 1
29569: PUSH
29570: LD_VAR 0 1
29574: PUSH
29575: LD_INT 105
29577: PLUS
29578: ST_TO_ADDR
// if cratesSpawned >= 14 then
29579: LD_EXP 56
29583: PUSH
29584: LD_INT 14
29586: GREATEREQUAL
29587: IFFALSE 29603
// timer := timer + 0 0$6 ;
29589: LD_ADDR_VAR 0 1
29593: PUSH
29594: LD_VAR 0 1
29598: PUSH
29599: LD_INT 210
29601: PLUS
29602: ST_TO_ADDR
// if timer > 2 2$00 then
29603: LD_VAR 0 1
29607: PUSH
29608: LD_INT 4200
29610: GREATER
29611: IFFALSE 29621
// timer := 0 0$45 ;
29613: LD_ADDR_VAR 0 1
29617: PUSH
29618: LD_INT 1575
29620: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29621: LD_INT 1
29623: PPUSH
29624: LD_INT 5
29626: PPUSH
29627: CALL_OW 12
29631: PPUSH
29632: LD_INT 16
29634: PPUSH
29635: LD_INT 1
29637: PPUSH
29638: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29642: LD_ADDR_EXP 56
29646: PUSH
29647: LD_EXP 56
29651: PUSH
29652: LD_INT 1
29654: PLUS
29655: ST_TO_ADDR
// until false ;
29656: LD_INT 0
29658: IFFALSE 29536
// end ; end_of_file
29660: PPOPN 1
29662: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
29663: LD_INT 0
29665: PPUSH
// ar_miner := 81 ;
29666: LD_ADDR_EXP 76
29670: PUSH
29671: LD_INT 81
29673: ST_TO_ADDR
// ar_crane := 88 ;
29674: LD_ADDR_EXP 75
29678: PUSH
29679: LD_INT 88
29681: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29682: LD_ADDR_EXP 70
29686: PUSH
29687: LD_INT 89
29689: ST_TO_ADDR
// us_hack := 99 ;
29690: LD_ADDR_EXP 71
29694: PUSH
29695: LD_INT 99
29697: ST_TO_ADDR
// us_artillery := 97 ;
29698: LD_ADDR_EXP 72
29702: PUSH
29703: LD_INT 97
29705: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29706: LD_ADDR_EXP 73
29710: PUSH
29711: LD_INT 91
29713: ST_TO_ADDR
// ar_mortar := 92 ;
29714: LD_ADDR_EXP 74
29718: PUSH
29719: LD_INT 92
29721: ST_TO_ADDR
// ru_flamethrower := 93 ;
29722: LD_ADDR_EXP 77
29726: PUSH
29727: LD_INT 93
29729: ST_TO_ADDR
// ru_radar := 98 ;
29730: LD_ADDR_EXP 69
29734: PUSH
29735: LD_INT 98
29737: ST_TO_ADDR
// tech_Artillery := 80 ;
29738: LD_ADDR_EXP 78
29742: PUSH
29743: LD_INT 80
29745: ST_TO_ADDR
// tech_RadMat := 81 ;
29746: LD_ADDR_EXP 79
29750: PUSH
29751: LD_INT 81
29753: ST_TO_ADDR
// tech_BasicTools := 82 ;
29754: LD_ADDR_EXP 80
29758: PUSH
29759: LD_INT 82
29761: ST_TO_ADDR
// tech_Cargo := 83 ;
29762: LD_ADDR_EXP 81
29766: PUSH
29767: LD_INT 83
29769: ST_TO_ADDR
// tech_Track := 84 ;
29770: LD_ADDR_EXP 82
29774: PUSH
29775: LD_INT 84
29777: ST_TO_ADDR
// tech_Crane := 85 ;
29778: LD_ADDR_EXP 83
29782: PUSH
29783: LD_INT 85
29785: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29786: LD_ADDR_EXP 84
29790: PUSH
29791: LD_INT 86
29793: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29794: LD_ADDR_EXP 85
29798: PUSH
29799: LD_INT 87
29801: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
29802: LD_ADDR_EXP 86
29806: PUSH
29807: LD_INT 88
29809: ST_TO_ADDR
// class_mastodont := 31 ;
29810: LD_ADDR_EXP 87
29814: PUSH
29815: LD_INT 31
29817: ST_TO_ADDR
// class_horse := 21 ;
29818: LD_ADDR_EXP 88
29822: PUSH
29823: LD_INT 21
29825: ST_TO_ADDR
// end ;
29826: LD_VAR 0 1
29830: RET
// every 1 do
29831: GO 29833
29833: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
29834: CALL 29663 0 0
29838: END
// every 0 0$1 do
29839: GO 29841
29841: DISABLE
// begin enable ;
29842: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
29843: LD_STRING updateTimer(
29845: PUSH
29846: LD_OWVAR 1
29850: STR
29851: PUSH
29852: LD_STRING );
29854: STR
29855: PPUSH
29856: CALL_OW 559
// end ;
29860: END
// export function SOS_MapStart ( ) ; begin
29861: LD_INT 0
29863: PPUSH
// if streamModeActive then
29864: LD_EXP 89
29868: IFFALSE 29877
// DefineStreamItems ( true ) ;
29870: LD_INT 1
29872: PPUSH
29873: CALL 31527 0 1
// UpdateFactoryWaypoints ( ) ;
29877: CALL 45111 0 0
// end ;
29881: LD_VAR 0 1
29885: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29886: LD_INT 0
29888: PPUSH
// if p2 = 100 then
29889: LD_VAR 0 2
29893: PUSH
29894: LD_INT 100
29896: EQUAL
29897: IFFALSE 30900
// begin if not StreamModeActive then
29899: LD_EXP 89
29903: NOT
29904: IFFALSE 29914
// StreamModeActive := true ;
29906: LD_ADDR_EXP 89
29910: PUSH
29911: LD_INT 1
29913: ST_TO_ADDR
// if p3 = 0 then
29914: LD_VAR 0 3
29918: PUSH
29919: LD_INT 0
29921: EQUAL
29922: IFFALSE 29928
// InitStreamMode ;
29924: CALL 31063 0 0
// if p3 = 1 then
29928: LD_VAR 0 3
29932: PUSH
29933: LD_INT 1
29935: EQUAL
29936: IFFALSE 29946
// sRocket := true ;
29938: LD_ADDR_EXP 94
29942: PUSH
29943: LD_INT 1
29945: ST_TO_ADDR
// if p3 = 2 then
29946: LD_VAR 0 3
29950: PUSH
29951: LD_INT 2
29953: EQUAL
29954: IFFALSE 29964
// sSpeed := true ;
29956: LD_ADDR_EXP 93
29960: PUSH
29961: LD_INT 1
29963: ST_TO_ADDR
// if p3 = 3 then
29964: LD_VAR 0 3
29968: PUSH
29969: LD_INT 3
29971: EQUAL
29972: IFFALSE 29982
// sEngine := true ;
29974: LD_ADDR_EXP 95
29978: PUSH
29979: LD_INT 1
29981: ST_TO_ADDR
// if p3 = 4 then
29982: LD_VAR 0 3
29986: PUSH
29987: LD_INT 4
29989: EQUAL
29990: IFFALSE 30000
// sSpec := true ;
29992: LD_ADDR_EXP 92
29996: PUSH
29997: LD_INT 1
29999: ST_TO_ADDR
// if p3 = 5 then
30000: LD_VAR 0 3
30004: PUSH
30005: LD_INT 5
30007: EQUAL
30008: IFFALSE 30018
// sLevel := true ;
30010: LD_ADDR_EXP 96
30014: PUSH
30015: LD_INT 1
30017: ST_TO_ADDR
// if p3 = 6 then
30018: LD_VAR 0 3
30022: PUSH
30023: LD_INT 6
30025: EQUAL
30026: IFFALSE 30036
// sArmoury := true ;
30028: LD_ADDR_EXP 97
30032: PUSH
30033: LD_INT 1
30035: ST_TO_ADDR
// if p3 = 7 then
30036: LD_VAR 0 3
30040: PUSH
30041: LD_INT 7
30043: EQUAL
30044: IFFALSE 30054
// sRadar := true ;
30046: LD_ADDR_EXP 98
30050: PUSH
30051: LD_INT 1
30053: ST_TO_ADDR
// if p3 = 8 then
30054: LD_VAR 0 3
30058: PUSH
30059: LD_INT 8
30061: EQUAL
30062: IFFALSE 30072
// sBunker := true ;
30064: LD_ADDR_EXP 99
30068: PUSH
30069: LD_INT 1
30071: ST_TO_ADDR
// if p3 = 9 then
30072: LD_VAR 0 3
30076: PUSH
30077: LD_INT 9
30079: EQUAL
30080: IFFALSE 30090
// sHack := true ;
30082: LD_ADDR_EXP 100
30086: PUSH
30087: LD_INT 1
30089: ST_TO_ADDR
// if p3 = 10 then
30090: LD_VAR 0 3
30094: PUSH
30095: LD_INT 10
30097: EQUAL
30098: IFFALSE 30108
// sFire := true ;
30100: LD_ADDR_EXP 101
30104: PUSH
30105: LD_INT 1
30107: ST_TO_ADDR
// if p3 = 11 then
30108: LD_VAR 0 3
30112: PUSH
30113: LD_INT 11
30115: EQUAL
30116: IFFALSE 30126
// sRefresh := true ;
30118: LD_ADDR_EXP 102
30122: PUSH
30123: LD_INT 1
30125: ST_TO_ADDR
// if p3 = 12 then
30126: LD_VAR 0 3
30130: PUSH
30131: LD_INT 12
30133: EQUAL
30134: IFFALSE 30144
// sExp := true ;
30136: LD_ADDR_EXP 103
30140: PUSH
30141: LD_INT 1
30143: ST_TO_ADDR
// if p3 = 13 then
30144: LD_VAR 0 3
30148: PUSH
30149: LD_INT 13
30151: EQUAL
30152: IFFALSE 30162
// sDepot := true ;
30154: LD_ADDR_EXP 104
30158: PUSH
30159: LD_INT 1
30161: ST_TO_ADDR
// if p3 = 14 then
30162: LD_VAR 0 3
30166: PUSH
30167: LD_INT 14
30169: EQUAL
30170: IFFALSE 30180
// sFlag := true ;
30172: LD_ADDR_EXP 105
30176: PUSH
30177: LD_INT 1
30179: ST_TO_ADDR
// if p3 = 15 then
30180: LD_VAR 0 3
30184: PUSH
30185: LD_INT 15
30187: EQUAL
30188: IFFALSE 30198
// sKamikadze := true ;
30190: LD_ADDR_EXP 113
30194: PUSH
30195: LD_INT 1
30197: ST_TO_ADDR
// if p3 = 16 then
30198: LD_VAR 0 3
30202: PUSH
30203: LD_INT 16
30205: EQUAL
30206: IFFALSE 30216
// sTroll := true ;
30208: LD_ADDR_EXP 114
30212: PUSH
30213: LD_INT 1
30215: ST_TO_ADDR
// if p3 = 17 then
30216: LD_VAR 0 3
30220: PUSH
30221: LD_INT 17
30223: EQUAL
30224: IFFALSE 30234
// sSlow := true ;
30226: LD_ADDR_EXP 115
30230: PUSH
30231: LD_INT 1
30233: ST_TO_ADDR
// if p3 = 18 then
30234: LD_VAR 0 3
30238: PUSH
30239: LD_INT 18
30241: EQUAL
30242: IFFALSE 30252
// sLack := true ;
30244: LD_ADDR_EXP 116
30248: PUSH
30249: LD_INT 1
30251: ST_TO_ADDR
// if p3 = 19 then
30252: LD_VAR 0 3
30256: PUSH
30257: LD_INT 19
30259: EQUAL
30260: IFFALSE 30270
// sTank := true ;
30262: LD_ADDR_EXP 118
30266: PUSH
30267: LD_INT 1
30269: ST_TO_ADDR
// if p3 = 20 then
30270: LD_VAR 0 3
30274: PUSH
30275: LD_INT 20
30277: EQUAL
30278: IFFALSE 30288
// sRemote := true ;
30280: LD_ADDR_EXP 119
30284: PUSH
30285: LD_INT 1
30287: ST_TO_ADDR
// if p3 = 21 then
30288: LD_VAR 0 3
30292: PUSH
30293: LD_INT 21
30295: EQUAL
30296: IFFALSE 30306
// sPowell := true ;
30298: LD_ADDR_EXP 120
30302: PUSH
30303: LD_INT 1
30305: ST_TO_ADDR
// if p3 = 22 then
30306: LD_VAR 0 3
30310: PUSH
30311: LD_INT 22
30313: EQUAL
30314: IFFALSE 30324
// sTeleport := true ;
30316: LD_ADDR_EXP 123
30320: PUSH
30321: LD_INT 1
30323: ST_TO_ADDR
// if p3 = 23 then
30324: LD_VAR 0 3
30328: PUSH
30329: LD_INT 23
30331: EQUAL
30332: IFFALSE 30342
// sOilTower := true ;
30334: LD_ADDR_EXP 125
30338: PUSH
30339: LD_INT 1
30341: ST_TO_ADDR
// if p3 = 24 then
30342: LD_VAR 0 3
30346: PUSH
30347: LD_INT 24
30349: EQUAL
30350: IFFALSE 30360
// sShovel := true ;
30352: LD_ADDR_EXP 126
30356: PUSH
30357: LD_INT 1
30359: ST_TO_ADDR
// if p3 = 25 then
30360: LD_VAR 0 3
30364: PUSH
30365: LD_INT 25
30367: EQUAL
30368: IFFALSE 30378
// sSheik := true ;
30370: LD_ADDR_EXP 127
30374: PUSH
30375: LD_INT 1
30377: ST_TO_ADDR
// if p3 = 26 then
30378: LD_VAR 0 3
30382: PUSH
30383: LD_INT 26
30385: EQUAL
30386: IFFALSE 30396
// sEarthquake := true ;
30388: LD_ADDR_EXP 129
30392: PUSH
30393: LD_INT 1
30395: ST_TO_ADDR
// if p3 = 27 then
30396: LD_VAR 0 3
30400: PUSH
30401: LD_INT 27
30403: EQUAL
30404: IFFALSE 30414
// sAI := true ;
30406: LD_ADDR_EXP 130
30410: PUSH
30411: LD_INT 1
30413: ST_TO_ADDR
// if p3 = 28 then
30414: LD_VAR 0 3
30418: PUSH
30419: LD_INT 28
30421: EQUAL
30422: IFFALSE 30432
// sCargo := true ;
30424: LD_ADDR_EXP 133
30428: PUSH
30429: LD_INT 1
30431: ST_TO_ADDR
// if p3 = 29 then
30432: LD_VAR 0 3
30436: PUSH
30437: LD_INT 29
30439: EQUAL
30440: IFFALSE 30450
// sDLaser := true ;
30442: LD_ADDR_EXP 134
30446: PUSH
30447: LD_INT 1
30449: ST_TO_ADDR
// if p3 = 30 then
30450: LD_VAR 0 3
30454: PUSH
30455: LD_INT 30
30457: EQUAL
30458: IFFALSE 30468
// sExchange := true ;
30460: LD_ADDR_EXP 135
30464: PUSH
30465: LD_INT 1
30467: ST_TO_ADDR
// if p3 = 31 then
30468: LD_VAR 0 3
30472: PUSH
30473: LD_INT 31
30475: EQUAL
30476: IFFALSE 30486
// sFac := true ;
30478: LD_ADDR_EXP 136
30482: PUSH
30483: LD_INT 1
30485: ST_TO_ADDR
// if p3 = 32 then
30486: LD_VAR 0 3
30490: PUSH
30491: LD_INT 32
30493: EQUAL
30494: IFFALSE 30504
// sPower := true ;
30496: LD_ADDR_EXP 137
30500: PUSH
30501: LD_INT 1
30503: ST_TO_ADDR
// if p3 = 33 then
30504: LD_VAR 0 3
30508: PUSH
30509: LD_INT 33
30511: EQUAL
30512: IFFALSE 30522
// sRandom := true ;
30514: LD_ADDR_EXP 138
30518: PUSH
30519: LD_INT 1
30521: ST_TO_ADDR
// if p3 = 34 then
30522: LD_VAR 0 3
30526: PUSH
30527: LD_INT 34
30529: EQUAL
30530: IFFALSE 30540
// sShield := true ;
30532: LD_ADDR_EXP 139
30536: PUSH
30537: LD_INT 1
30539: ST_TO_ADDR
// if p3 = 35 then
30540: LD_VAR 0 3
30544: PUSH
30545: LD_INT 35
30547: EQUAL
30548: IFFALSE 30558
// sTime := true ;
30550: LD_ADDR_EXP 140
30554: PUSH
30555: LD_INT 1
30557: ST_TO_ADDR
// if p3 = 36 then
30558: LD_VAR 0 3
30562: PUSH
30563: LD_INT 36
30565: EQUAL
30566: IFFALSE 30576
// sTools := true ;
30568: LD_ADDR_EXP 141
30572: PUSH
30573: LD_INT 1
30575: ST_TO_ADDR
// if p3 = 101 then
30576: LD_VAR 0 3
30580: PUSH
30581: LD_INT 101
30583: EQUAL
30584: IFFALSE 30594
// sSold := true ;
30586: LD_ADDR_EXP 106
30590: PUSH
30591: LD_INT 1
30593: ST_TO_ADDR
// if p3 = 102 then
30594: LD_VAR 0 3
30598: PUSH
30599: LD_INT 102
30601: EQUAL
30602: IFFALSE 30612
// sDiff := true ;
30604: LD_ADDR_EXP 107
30608: PUSH
30609: LD_INT 1
30611: ST_TO_ADDR
// if p3 = 103 then
30612: LD_VAR 0 3
30616: PUSH
30617: LD_INT 103
30619: EQUAL
30620: IFFALSE 30630
// sFog := true ;
30622: LD_ADDR_EXP 110
30626: PUSH
30627: LD_INT 1
30629: ST_TO_ADDR
// if p3 = 104 then
30630: LD_VAR 0 3
30634: PUSH
30635: LD_INT 104
30637: EQUAL
30638: IFFALSE 30648
// sReset := true ;
30640: LD_ADDR_EXP 111
30644: PUSH
30645: LD_INT 1
30647: ST_TO_ADDR
// if p3 = 105 then
30648: LD_VAR 0 3
30652: PUSH
30653: LD_INT 105
30655: EQUAL
30656: IFFALSE 30666
// sSun := true ;
30658: LD_ADDR_EXP 112
30662: PUSH
30663: LD_INT 1
30665: ST_TO_ADDR
// if p3 = 106 then
30666: LD_VAR 0 3
30670: PUSH
30671: LD_INT 106
30673: EQUAL
30674: IFFALSE 30684
// sTiger := true ;
30676: LD_ADDR_EXP 108
30680: PUSH
30681: LD_INT 1
30683: ST_TO_ADDR
// if p3 = 107 then
30684: LD_VAR 0 3
30688: PUSH
30689: LD_INT 107
30691: EQUAL
30692: IFFALSE 30702
// sBomb := true ;
30694: LD_ADDR_EXP 109
30698: PUSH
30699: LD_INT 1
30701: ST_TO_ADDR
// if p3 = 108 then
30702: LD_VAR 0 3
30706: PUSH
30707: LD_INT 108
30709: EQUAL
30710: IFFALSE 30720
// sWound := true ;
30712: LD_ADDR_EXP 117
30716: PUSH
30717: LD_INT 1
30719: ST_TO_ADDR
// if p3 = 109 then
30720: LD_VAR 0 3
30724: PUSH
30725: LD_INT 109
30727: EQUAL
30728: IFFALSE 30738
// sBetray := true ;
30730: LD_ADDR_EXP 121
30734: PUSH
30735: LD_INT 1
30737: ST_TO_ADDR
// if p3 = 110 then
30738: LD_VAR 0 3
30742: PUSH
30743: LD_INT 110
30745: EQUAL
30746: IFFALSE 30756
// sContamin := true ;
30748: LD_ADDR_EXP 122
30752: PUSH
30753: LD_INT 1
30755: ST_TO_ADDR
// if p3 = 111 then
30756: LD_VAR 0 3
30760: PUSH
30761: LD_INT 111
30763: EQUAL
30764: IFFALSE 30774
// sOil := true ;
30766: LD_ADDR_EXP 124
30770: PUSH
30771: LD_INT 1
30773: ST_TO_ADDR
// if p3 = 112 then
30774: LD_VAR 0 3
30778: PUSH
30779: LD_INT 112
30781: EQUAL
30782: IFFALSE 30792
// sStu := true ;
30784: LD_ADDR_EXP 128
30788: PUSH
30789: LD_INT 1
30791: ST_TO_ADDR
// if p3 = 113 then
30792: LD_VAR 0 3
30796: PUSH
30797: LD_INT 113
30799: EQUAL
30800: IFFALSE 30810
// sBazooka := true ;
30802: LD_ADDR_EXP 131
30806: PUSH
30807: LD_INT 1
30809: ST_TO_ADDR
// if p3 = 114 then
30810: LD_VAR 0 3
30814: PUSH
30815: LD_INT 114
30817: EQUAL
30818: IFFALSE 30828
// sMortar := true ;
30820: LD_ADDR_EXP 132
30824: PUSH
30825: LD_INT 1
30827: ST_TO_ADDR
// if p3 = 115 then
30828: LD_VAR 0 3
30832: PUSH
30833: LD_INT 115
30835: EQUAL
30836: IFFALSE 30846
// sRanger := true ;
30838: LD_ADDR_EXP 142
30842: PUSH
30843: LD_INT 1
30845: ST_TO_ADDR
// if p3 = 116 then
30846: LD_VAR 0 3
30850: PUSH
30851: LD_INT 116
30853: EQUAL
30854: IFFALSE 30864
// sComputer := true ;
30856: LD_ADDR_EXP 143
30860: PUSH
30861: LD_INT 1
30863: ST_TO_ADDR
// if p3 = 117 then
30864: LD_VAR 0 3
30868: PUSH
30869: LD_INT 117
30871: EQUAL
30872: IFFALSE 30882
// s30 := true ;
30874: LD_ADDR_EXP 144
30878: PUSH
30879: LD_INT 1
30881: ST_TO_ADDR
// if p3 = 118 then
30882: LD_VAR 0 3
30886: PUSH
30887: LD_INT 118
30889: EQUAL
30890: IFFALSE 30900
// s60 := true ;
30892: LD_ADDR_EXP 145
30896: PUSH
30897: LD_INT 1
30899: ST_TO_ADDR
// end ; if p2 = 101 then
30900: LD_VAR 0 2
30904: PUSH
30905: LD_INT 101
30907: EQUAL
30908: IFFALSE 31036
// begin case p3 of 1 :
30910: LD_VAR 0 3
30914: PUSH
30915: LD_INT 1
30917: DOUBLE
30918: EQUAL
30919: IFTRUE 30923
30921: GO 30930
30923: POP
// hHackUnlimitedResources ; 2 :
30924: CALL 43134 0 0
30928: GO 31036
30930: LD_INT 2
30932: DOUBLE
30933: EQUAL
30934: IFTRUE 30938
30936: GO 30945
30938: POP
// hHackSetLevel10 ; 3 :
30939: CALL 43267 0 0
30943: GO 31036
30945: LD_INT 3
30947: DOUBLE
30948: EQUAL
30949: IFTRUE 30953
30951: GO 30960
30953: POP
// hHackSetLevel10YourUnits ; 4 :
30954: CALL 43352 0 0
30958: GO 31036
30960: LD_INT 4
30962: DOUBLE
30963: EQUAL
30964: IFTRUE 30968
30966: GO 30975
30968: POP
// hHackInvincible ; 5 :
30969: CALL 43800 0 0
30973: GO 31036
30975: LD_INT 5
30977: DOUBLE
30978: EQUAL
30979: IFTRUE 30983
30981: GO 30990
30983: POP
// hHackInvisible ; 6 :
30984: CALL 43911 0 0
30988: GO 31036
30990: LD_INT 6
30992: DOUBLE
30993: EQUAL
30994: IFTRUE 30998
30996: GO 31005
30998: POP
// hHackChangeYourSide ; 7 :
30999: CALL 43968 0 0
31003: GO 31036
31005: LD_INT 7
31007: DOUBLE
31008: EQUAL
31009: IFTRUE 31013
31011: GO 31020
31013: POP
// hHackChangeUnitSide ; 8 :
31014: CALL 44010 0 0
31018: GO 31036
31020: LD_INT 8
31022: DOUBLE
31023: EQUAL
31024: IFTRUE 31028
31026: GO 31035
31028: POP
// hHackFog ; end ;
31029: CALL 44111 0 0
31033: GO 31036
31035: POP
// end ; end ;
31036: LD_VAR 0 7
31040: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
31041: GO 31043
31043: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
31044: LD_STRING initStreamRollete();
31046: PPUSH
31047: CALL_OW 559
// InitStreamMode ;
31051: CALL 31063 0 0
// DefineStreamItems ( false ) ;
31055: LD_INT 0
31057: PPUSH
31058: CALL 31527 0 1
// end ;
31062: END
// function InitStreamMode ; begin
31063: LD_INT 0
31065: PPUSH
// streamModeActive := false ;
31066: LD_ADDR_EXP 89
31070: PUSH
31071: LD_INT 0
31073: ST_TO_ADDR
// normalCounter := 36 ;
31074: LD_ADDR_EXP 90
31078: PUSH
31079: LD_INT 36
31081: ST_TO_ADDR
// hardcoreCounter := 18 ;
31082: LD_ADDR_EXP 91
31086: PUSH
31087: LD_INT 18
31089: ST_TO_ADDR
// sRocket := false ;
31090: LD_ADDR_EXP 94
31094: PUSH
31095: LD_INT 0
31097: ST_TO_ADDR
// sSpeed := false ;
31098: LD_ADDR_EXP 93
31102: PUSH
31103: LD_INT 0
31105: ST_TO_ADDR
// sEngine := false ;
31106: LD_ADDR_EXP 95
31110: PUSH
31111: LD_INT 0
31113: ST_TO_ADDR
// sSpec := false ;
31114: LD_ADDR_EXP 92
31118: PUSH
31119: LD_INT 0
31121: ST_TO_ADDR
// sLevel := false ;
31122: LD_ADDR_EXP 96
31126: PUSH
31127: LD_INT 0
31129: ST_TO_ADDR
// sArmoury := false ;
31130: LD_ADDR_EXP 97
31134: PUSH
31135: LD_INT 0
31137: ST_TO_ADDR
// sRadar := false ;
31138: LD_ADDR_EXP 98
31142: PUSH
31143: LD_INT 0
31145: ST_TO_ADDR
// sBunker := false ;
31146: LD_ADDR_EXP 99
31150: PUSH
31151: LD_INT 0
31153: ST_TO_ADDR
// sHack := false ;
31154: LD_ADDR_EXP 100
31158: PUSH
31159: LD_INT 0
31161: ST_TO_ADDR
// sFire := false ;
31162: LD_ADDR_EXP 101
31166: PUSH
31167: LD_INT 0
31169: ST_TO_ADDR
// sRefresh := false ;
31170: LD_ADDR_EXP 102
31174: PUSH
31175: LD_INT 0
31177: ST_TO_ADDR
// sExp := false ;
31178: LD_ADDR_EXP 103
31182: PUSH
31183: LD_INT 0
31185: ST_TO_ADDR
// sDepot := false ;
31186: LD_ADDR_EXP 104
31190: PUSH
31191: LD_INT 0
31193: ST_TO_ADDR
// sFlag := false ;
31194: LD_ADDR_EXP 105
31198: PUSH
31199: LD_INT 0
31201: ST_TO_ADDR
// sKamikadze := false ;
31202: LD_ADDR_EXP 113
31206: PUSH
31207: LD_INT 0
31209: ST_TO_ADDR
// sTroll := false ;
31210: LD_ADDR_EXP 114
31214: PUSH
31215: LD_INT 0
31217: ST_TO_ADDR
// sSlow := false ;
31218: LD_ADDR_EXP 115
31222: PUSH
31223: LD_INT 0
31225: ST_TO_ADDR
// sLack := false ;
31226: LD_ADDR_EXP 116
31230: PUSH
31231: LD_INT 0
31233: ST_TO_ADDR
// sTank := false ;
31234: LD_ADDR_EXP 118
31238: PUSH
31239: LD_INT 0
31241: ST_TO_ADDR
// sRemote := false ;
31242: LD_ADDR_EXP 119
31246: PUSH
31247: LD_INT 0
31249: ST_TO_ADDR
// sPowell := false ;
31250: LD_ADDR_EXP 120
31254: PUSH
31255: LD_INT 0
31257: ST_TO_ADDR
// sTeleport := false ;
31258: LD_ADDR_EXP 123
31262: PUSH
31263: LD_INT 0
31265: ST_TO_ADDR
// sOilTower := false ;
31266: LD_ADDR_EXP 125
31270: PUSH
31271: LD_INT 0
31273: ST_TO_ADDR
// sShovel := false ;
31274: LD_ADDR_EXP 126
31278: PUSH
31279: LD_INT 0
31281: ST_TO_ADDR
// sSheik := false ;
31282: LD_ADDR_EXP 127
31286: PUSH
31287: LD_INT 0
31289: ST_TO_ADDR
// sEarthquake := false ;
31290: LD_ADDR_EXP 129
31294: PUSH
31295: LD_INT 0
31297: ST_TO_ADDR
// sAI := false ;
31298: LD_ADDR_EXP 130
31302: PUSH
31303: LD_INT 0
31305: ST_TO_ADDR
// sCargo := false ;
31306: LD_ADDR_EXP 133
31310: PUSH
31311: LD_INT 0
31313: ST_TO_ADDR
// sDLaser := false ;
31314: LD_ADDR_EXP 134
31318: PUSH
31319: LD_INT 0
31321: ST_TO_ADDR
// sExchange := false ;
31322: LD_ADDR_EXP 135
31326: PUSH
31327: LD_INT 0
31329: ST_TO_ADDR
// sFac := false ;
31330: LD_ADDR_EXP 136
31334: PUSH
31335: LD_INT 0
31337: ST_TO_ADDR
// sPower := false ;
31338: LD_ADDR_EXP 137
31342: PUSH
31343: LD_INT 0
31345: ST_TO_ADDR
// sRandom := false ;
31346: LD_ADDR_EXP 138
31350: PUSH
31351: LD_INT 0
31353: ST_TO_ADDR
// sShield := false ;
31354: LD_ADDR_EXP 139
31358: PUSH
31359: LD_INT 0
31361: ST_TO_ADDR
// sTime := false ;
31362: LD_ADDR_EXP 140
31366: PUSH
31367: LD_INT 0
31369: ST_TO_ADDR
// sTools := false ;
31370: LD_ADDR_EXP 141
31374: PUSH
31375: LD_INT 0
31377: ST_TO_ADDR
// sSold := false ;
31378: LD_ADDR_EXP 106
31382: PUSH
31383: LD_INT 0
31385: ST_TO_ADDR
// sDiff := false ;
31386: LD_ADDR_EXP 107
31390: PUSH
31391: LD_INT 0
31393: ST_TO_ADDR
// sFog := false ;
31394: LD_ADDR_EXP 110
31398: PUSH
31399: LD_INT 0
31401: ST_TO_ADDR
// sReset := false ;
31402: LD_ADDR_EXP 111
31406: PUSH
31407: LD_INT 0
31409: ST_TO_ADDR
// sSun := false ;
31410: LD_ADDR_EXP 112
31414: PUSH
31415: LD_INT 0
31417: ST_TO_ADDR
// sTiger := false ;
31418: LD_ADDR_EXP 108
31422: PUSH
31423: LD_INT 0
31425: ST_TO_ADDR
// sBomb := false ;
31426: LD_ADDR_EXP 109
31430: PUSH
31431: LD_INT 0
31433: ST_TO_ADDR
// sWound := false ;
31434: LD_ADDR_EXP 117
31438: PUSH
31439: LD_INT 0
31441: ST_TO_ADDR
// sBetray := false ;
31442: LD_ADDR_EXP 121
31446: PUSH
31447: LD_INT 0
31449: ST_TO_ADDR
// sContamin := false ;
31450: LD_ADDR_EXP 122
31454: PUSH
31455: LD_INT 0
31457: ST_TO_ADDR
// sOil := false ;
31458: LD_ADDR_EXP 124
31462: PUSH
31463: LD_INT 0
31465: ST_TO_ADDR
// sStu := false ;
31466: LD_ADDR_EXP 128
31470: PUSH
31471: LD_INT 0
31473: ST_TO_ADDR
// sBazooka := false ;
31474: LD_ADDR_EXP 131
31478: PUSH
31479: LD_INT 0
31481: ST_TO_ADDR
// sMortar := false ;
31482: LD_ADDR_EXP 132
31486: PUSH
31487: LD_INT 0
31489: ST_TO_ADDR
// sRanger := false ;
31490: LD_ADDR_EXP 142
31494: PUSH
31495: LD_INT 0
31497: ST_TO_ADDR
// sComputer := false ;
31498: LD_ADDR_EXP 143
31502: PUSH
31503: LD_INT 0
31505: ST_TO_ADDR
// s30 := false ;
31506: LD_ADDR_EXP 144
31510: PUSH
31511: LD_INT 0
31513: ST_TO_ADDR
// s60 := false ;
31514: LD_ADDR_EXP 145
31518: PUSH
31519: LD_INT 0
31521: ST_TO_ADDR
// end ;
31522: LD_VAR 0 1
31526: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
31527: LD_INT 0
31529: PPUSH
31530: PPUSH
31531: PPUSH
31532: PPUSH
31533: PPUSH
31534: PPUSH
31535: PPUSH
// result := [ ] ;
31536: LD_ADDR_VAR 0 2
31540: PUSH
31541: EMPTY
31542: ST_TO_ADDR
// if campaign_id = 1 then
31543: LD_OWVAR 69
31547: PUSH
31548: LD_INT 1
31550: EQUAL
31551: IFFALSE 34717
// begin case mission_number of 1 :
31553: LD_OWVAR 70
31557: PUSH
31558: LD_INT 1
31560: DOUBLE
31561: EQUAL
31562: IFTRUE 31566
31564: GO 31642
31566: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
31567: LD_ADDR_VAR 0 2
31571: PUSH
31572: LD_INT 2
31574: PUSH
31575: LD_INT 4
31577: PUSH
31578: LD_INT 11
31580: PUSH
31581: LD_INT 12
31583: PUSH
31584: LD_INT 15
31586: PUSH
31587: LD_INT 16
31589: PUSH
31590: LD_INT 22
31592: PUSH
31593: LD_INT 23
31595: PUSH
31596: LD_INT 26
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 101
31612: PUSH
31613: LD_INT 102
31615: PUSH
31616: LD_INT 106
31618: PUSH
31619: LD_INT 116
31621: PUSH
31622: LD_INT 117
31624: PUSH
31625: LD_INT 118
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: ST_TO_ADDR
31640: GO 34715
31642: LD_INT 2
31644: DOUBLE
31645: EQUAL
31646: IFTRUE 31650
31648: GO 31734
31650: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
31651: LD_ADDR_VAR 0 2
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: LD_INT 4
31661: PUSH
31662: LD_INT 11
31664: PUSH
31665: LD_INT 12
31667: PUSH
31668: LD_INT 15
31670: PUSH
31671: LD_INT 16
31673: PUSH
31674: LD_INT 22
31676: PUSH
31677: LD_INT 23
31679: PUSH
31680: LD_INT 26
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 101
31696: PUSH
31697: LD_INT 102
31699: PUSH
31700: LD_INT 105
31702: PUSH
31703: LD_INT 106
31705: PUSH
31706: LD_INT 108
31708: PUSH
31709: LD_INT 116
31711: PUSH
31712: LD_INT 117
31714: PUSH
31715: LD_INT 118
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: ST_TO_ADDR
31732: GO 34715
31734: LD_INT 3
31736: DOUBLE
31737: EQUAL
31738: IFTRUE 31742
31740: GO 31830
31742: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
31743: LD_ADDR_VAR 0 2
31747: PUSH
31748: LD_INT 2
31750: PUSH
31751: LD_INT 4
31753: PUSH
31754: LD_INT 5
31756: PUSH
31757: LD_INT 11
31759: PUSH
31760: LD_INT 12
31762: PUSH
31763: LD_INT 15
31765: PUSH
31766: LD_INT 16
31768: PUSH
31769: LD_INT 22
31771: PUSH
31772: LD_INT 26
31774: PUSH
31775: LD_INT 36
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 101
31792: PUSH
31793: LD_INT 102
31795: PUSH
31796: LD_INT 105
31798: PUSH
31799: LD_INT 106
31801: PUSH
31802: LD_INT 108
31804: PUSH
31805: LD_INT 116
31807: PUSH
31808: LD_INT 117
31810: PUSH
31811: LD_INT 118
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: ST_TO_ADDR
31828: GO 34715
31830: LD_INT 4
31832: DOUBLE
31833: EQUAL
31834: IFTRUE 31838
31836: GO 31934
31838: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
31839: LD_ADDR_VAR 0 2
31843: PUSH
31844: LD_INT 2
31846: PUSH
31847: LD_INT 4
31849: PUSH
31850: LD_INT 5
31852: PUSH
31853: LD_INT 8
31855: PUSH
31856: LD_INT 11
31858: PUSH
31859: LD_INT 12
31861: PUSH
31862: LD_INT 15
31864: PUSH
31865: LD_INT 16
31867: PUSH
31868: LD_INT 22
31870: PUSH
31871: LD_INT 23
31873: PUSH
31874: LD_INT 26
31876: PUSH
31877: LD_INT 36
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 101
31896: PUSH
31897: LD_INT 102
31899: PUSH
31900: LD_INT 105
31902: PUSH
31903: LD_INT 106
31905: PUSH
31906: LD_INT 108
31908: PUSH
31909: LD_INT 116
31911: PUSH
31912: LD_INT 117
31914: PUSH
31915: LD_INT 118
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: ST_TO_ADDR
31932: GO 34715
31934: LD_INT 5
31936: DOUBLE
31937: EQUAL
31938: IFTRUE 31942
31940: GO 32054
31942: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
31943: LD_ADDR_VAR 0 2
31947: PUSH
31948: LD_INT 2
31950: PUSH
31951: LD_INT 4
31953: PUSH
31954: LD_INT 5
31956: PUSH
31957: LD_INT 6
31959: PUSH
31960: LD_INT 8
31962: PUSH
31963: LD_INT 11
31965: PUSH
31966: LD_INT 12
31968: PUSH
31969: LD_INT 15
31971: PUSH
31972: LD_INT 16
31974: PUSH
31975: LD_INT 22
31977: PUSH
31978: LD_INT 23
31980: PUSH
31981: LD_INT 25
31983: PUSH
31984: LD_INT 26
31986: PUSH
31987: LD_INT 36
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 101
32008: PUSH
32009: LD_INT 102
32011: PUSH
32012: LD_INT 105
32014: PUSH
32015: LD_INT 106
32017: PUSH
32018: LD_INT 108
32020: PUSH
32021: LD_INT 109
32023: PUSH
32024: LD_INT 112
32026: PUSH
32027: LD_INT 116
32029: PUSH
32030: LD_INT 117
32032: PUSH
32033: LD_INT 118
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: ST_TO_ADDR
32052: GO 34715
32054: LD_INT 6
32056: DOUBLE
32057: EQUAL
32058: IFTRUE 32062
32060: GO 32194
32062: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
32063: LD_ADDR_VAR 0 2
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: LD_INT 4
32073: PUSH
32074: LD_INT 5
32076: PUSH
32077: LD_INT 6
32079: PUSH
32080: LD_INT 8
32082: PUSH
32083: LD_INT 11
32085: PUSH
32086: LD_INT 12
32088: PUSH
32089: LD_INT 15
32091: PUSH
32092: LD_INT 16
32094: PUSH
32095: LD_INT 20
32097: PUSH
32098: LD_INT 21
32100: PUSH
32101: LD_INT 22
32103: PUSH
32104: LD_INT 23
32106: PUSH
32107: LD_INT 25
32109: PUSH
32110: LD_INT 26
32112: PUSH
32113: LD_INT 30
32115: PUSH
32116: LD_INT 31
32118: PUSH
32119: LD_INT 32
32121: PUSH
32122: LD_INT 36
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 101
32148: PUSH
32149: LD_INT 102
32151: PUSH
32152: LD_INT 105
32154: PUSH
32155: LD_INT 106
32157: PUSH
32158: LD_INT 108
32160: PUSH
32161: LD_INT 109
32163: PUSH
32164: LD_INT 112
32166: PUSH
32167: LD_INT 116
32169: PUSH
32170: LD_INT 117
32172: PUSH
32173: LD_INT 118
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: ST_TO_ADDR
32192: GO 34715
32194: LD_INT 7
32196: DOUBLE
32197: EQUAL
32198: IFTRUE 32202
32200: GO 32314
32202: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
32203: LD_ADDR_VAR 0 2
32207: PUSH
32208: LD_INT 2
32210: PUSH
32211: LD_INT 4
32213: PUSH
32214: LD_INT 5
32216: PUSH
32217: LD_INT 7
32219: PUSH
32220: LD_INT 11
32222: PUSH
32223: LD_INT 12
32225: PUSH
32226: LD_INT 15
32228: PUSH
32229: LD_INT 16
32231: PUSH
32232: LD_INT 20
32234: PUSH
32235: LD_INT 21
32237: PUSH
32238: LD_INT 22
32240: PUSH
32241: LD_INT 23
32243: PUSH
32244: LD_INT 25
32246: PUSH
32247: LD_INT 26
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 101
32268: PUSH
32269: LD_INT 102
32271: PUSH
32272: LD_INT 103
32274: PUSH
32275: LD_INT 105
32277: PUSH
32278: LD_INT 106
32280: PUSH
32281: LD_INT 108
32283: PUSH
32284: LD_INT 112
32286: PUSH
32287: LD_INT 116
32289: PUSH
32290: LD_INT 117
32292: PUSH
32293: LD_INT 118
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: ST_TO_ADDR
32312: GO 34715
32314: LD_INT 8
32316: DOUBLE
32317: EQUAL
32318: IFTRUE 32322
32320: GO 32462
32322: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
32323: LD_ADDR_VAR 0 2
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: LD_INT 4
32333: PUSH
32334: LD_INT 5
32336: PUSH
32337: LD_INT 6
32339: PUSH
32340: LD_INT 7
32342: PUSH
32343: LD_INT 8
32345: PUSH
32346: LD_INT 11
32348: PUSH
32349: LD_INT 12
32351: PUSH
32352: LD_INT 15
32354: PUSH
32355: LD_INT 16
32357: PUSH
32358: LD_INT 20
32360: PUSH
32361: LD_INT 21
32363: PUSH
32364: LD_INT 22
32366: PUSH
32367: LD_INT 23
32369: PUSH
32370: LD_INT 25
32372: PUSH
32373: LD_INT 26
32375: PUSH
32376: LD_INT 30
32378: PUSH
32379: LD_INT 31
32381: PUSH
32382: LD_INT 32
32384: PUSH
32385: LD_INT 36
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 101
32412: PUSH
32413: LD_INT 102
32415: PUSH
32416: LD_INT 103
32418: PUSH
32419: LD_INT 105
32421: PUSH
32422: LD_INT 106
32424: PUSH
32425: LD_INT 108
32427: PUSH
32428: LD_INT 109
32430: PUSH
32431: LD_INT 112
32433: PUSH
32434: LD_INT 116
32436: PUSH
32437: LD_INT 117
32439: PUSH
32440: LD_INT 118
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: ST_TO_ADDR
32460: GO 34715
32462: LD_INT 9
32464: DOUBLE
32465: EQUAL
32466: IFTRUE 32470
32468: GO 32618
32470: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
32471: LD_ADDR_VAR 0 2
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: LD_INT 4
32481: PUSH
32482: LD_INT 5
32484: PUSH
32485: LD_INT 6
32487: PUSH
32488: LD_INT 7
32490: PUSH
32491: LD_INT 8
32493: PUSH
32494: LD_INT 11
32496: PUSH
32497: LD_INT 12
32499: PUSH
32500: LD_INT 15
32502: PUSH
32503: LD_INT 16
32505: PUSH
32506: LD_INT 20
32508: PUSH
32509: LD_INT 21
32511: PUSH
32512: LD_INT 22
32514: PUSH
32515: LD_INT 23
32517: PUSH
32518: LD_INT 25
32520: PUSH
32521: LD_INT 26
32523: PUSH
32524: LD_INT 28
32526: PUSH
32527: LD_INT 30
32529: PUSH
32530: LD_INT 31
32532: PUSH
32533: LD_INT 32
32535: PUSH
32536: LD_INT 36
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 101
32564: PUSH
32565: LD_INT 102
32567: PUSH
32568: LD_INT 103
32570: PUSH
32571: LD_INT 105
32573: PUSH
32574: LD_INT 106
32576: PUSH
32577: LD_INT 108
32579: PUSH
32580: LD_INT 109
32582: PUSH
32583: LD_INT 112
32585: PUSH
32586: LD_INT 114
32588: PUSH
32589: LD_INT 116
32591: PUSH
32592: LD_INT 117
32594: PUSH
32595: LD_INT 118
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: ST_TO_ADDR
32616: GO 34715
32618: LD_INT 10
32620: DOUBLE
32621: EQUAL
32622: IFTRUE 32626
32624: GO 32822
32626: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
32627: LD_ADDR_VAR 0 2
32631: PUSH
32632: LD_INT 2
32634: PUSH
32635: LD_INT 4
32637: PUSH
32638: LD_INT 5
32640: PUSH
32641: LD_INT 6
32643: PUSH
32644: LD_INT 7
32646: PUSH
32647: LD_INT 8
32649: PUSH
32650: LD_INT 9
32652: PUSH
32653: LD_INT 10
32655: PUSH
32656: LD_INT 11
32658: PUSH
32659: LD_INT 12
32661: PUSH
32662: LD_INT 13
32664: PUSH
32665: LD_INT 14
32667: PUSH
32668: LD_INT 15
32670: PUSH
32671: LD_INT 16
32673: PUSH
32674: LD_INT 17
32676: PUSH
32677: LD_INT 18
32679: PUSH
32680: LD_INT 19
32682: PUSH
32683: LD_INT 20
32685: PUSH
32686: LD_INT 21
32688: PUSH
32689: LD_INT 22
32691: PUSH
32692: LD_INT 23
32694: PUSH
32695: LD_INT 24
32697: PUSH
32698: LD_INT 25
32700: PUSH
32701: LD_INT 26
32703: PUSH
32704: LD_INT 28
32706: PUSH
32707: LD_INT 30
32709: PUSH
32710: LD_INT 31
32712: PUSH
32713: LD_INT 32
32715: PUSH
32716: LD_INT 36
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 101
32752: PUSH
32753: LD_INT 102
32755: PUSH
32756: LD_INT 103
32758: PUSH
32759: LD_INT 104
32761: PUSH
32762: LD_INT 105
32764: PUSH
32765: LD_INT 106
32767: PUSH
32768: LD_INT 107
32770: PUSH
32771: LD_INT 108
32773: PUSH
32774: LD_INT 109
32776: PUSH
32777: LD_INT 110
32779: PUSH
32780: LD_INT 111
32782: PUSH
32783: LD_INT 112
32785: PUSH
32786: LD_INT 114
32788: PUSH
32789: LD_INT 116
32791: PUSH
32792: LD_INT 117
32794: PUSH
32795: LD_INT 118
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: ST_TO_ADDR
32820: GO 34715
32822: LD_INT 11
32824: DOUBLE
32825: EQUAL
32826: IFTRUE 32830
32828: GO 33034
32830: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
32831: LD_ADDR_VAR 0 2
32835: PUSH
32836: LD_INT 2
32838: PUSH
32839: LD_INT 3
32841: PUSH
32842: LD_INT 4
32844: PUSH
32845: LD_INT 5
32847: PUSH
32848: LD_INT 6
32850: PUSH
32851: LD_INT 7
32853: PUSH
32854: LD_INT 8
32856: PUSH
32857: LD_INT 9
32859: PUSH
32860: LD_INT 10
32862: PUSH
32863: LD_INT 11
32865: PUSH
32866: LD_INT 12
32868: PUSH
32869: LD_INT 13
32871: PUSH
32872: LD_INT 14
32874: PUSH
32875: LD_INT 15
32877: PUSH
32878: LD_INT 16
32880: PUSH
32881: LD_INT 17
32883: PUSH
32884: LD_INT 18
32886: PUSH
32887: LD_INT 19
32889: PUSH
32890: LD_INT 20
32892: PUSH
32893: LD_INT 21
32895: PUSH
32896: LD_INT 22
32898: PUSH
32899: LD_INT 23
32901: PUSH
32902: LD_INT 24
32904: PUSH
32905: LD_INT 25
32907: PUSH
32908: LD_INT 26
32910: PUSH
32911: LD_INT 28
32913: PUSH
32914: LD_INT 30
32916: PUSH
32917: LD_INT 31
32919: PUSH
32920: LD_INT 32
32922: PUSH
32923: LD_INT 34
32925: PUSH
32926: LD_INT 36
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 101
32964: PUSH
32965: LD_INT 102
32967: PUSH
32968: LD_INT 103
32970: PUSH
32971: LD_INT 104
32973: PUSH
32974: LD_INT 105
32976: PUSH
32977: LD_INT 106
32979: PUSH
32980: LD_INT 107
32982: PUSH
32983: LD_INT 108
32985: PUSH
32986: LD_INT 109
32988: PUSH
32989: LD_INT 110
32991: PUSH
32992: LD_INT 111
32994: PUSH
32995: LD_INT 112
32997: PUSH
32998: LD_INT 114
33000: PUSH
33001: LD_INT 116
33003: PUSH
33004: LD_INT 117
33006: PUSH
33007: LD_INT 118
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: ST_TO_ADDR
33032: GO 34715
33034: LD_INT 12
33036: DOUBLE
33037: EQUAL
33038: IFTRUE 33042
33040: GO 33262
33042: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
33043: LD_ADDR_VAR 0 2
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: LD_INT 2
33053: PUSH
33054: LD_INT 3
33056: PUSH
33057: LD_INT 4
33059: PUSH
33060: LD_INT 5
33062: PUSH
33063: LD_INT 6
33065: PUSH
33066: LD_INT 7
33068: PUSH
33069: LD_INT 8
33071: PUSH
33072: LD_INT 9
33074: PUSH
33075: LD_INT 10
33077: PUSH
33078: LD_INT 11
33080: PUSH
33081: LD_INT 12
33083: PUSH
33084: LD_INT 13
33086: PUSH
33087: LD_INT 14
33089: PUSH
33090: LD_INT 15
33092: PUSH
33093: LD_INT 16
33095: PUSH
33096: LD_INT 17
33098: PUSH
33099: LD_INT 18
33101: PUSH
33102: LD_INT 19
33104: PUSH
33105: LD_INT 20
33107: PUSH
33108: LD_INT 21
33110: PUSH
33111: LD_INT 22
33113: PUSH
33114: LD_INT 23
33116: PUSH
33117: LD_INT 24
33119: PUSH
33120: LD_INT 25
33122: PUSH
33123: LD_INT 26
33125: PUSH
33126: LD_INT 27
33128: PUSH
33129: LD_INT 28
33131: PUSH
33132: LD_INT 30
33134: PUSH
33135: LD_INT 31
33137: PUSH
33138: LD_INT 32
33140: PUSH
33141: LD_INT 33
33143: PUSH
33144: LD_INT 34
33146: PUSH
33147: LD_INT 36
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 101
33188: PUSH
33189: LD_INT 102
33191: PUSH
33192: LD_INT 103
33194: PUSH
33195: LD_INT 104
33197: PUSH
33198: LD_INT 105
33200: PUSH
33201: LD_INT 106
33203: PUSH
33204: LD_INT 107
33206: PUSH
33207: LD_INT 108
33209: PUSH
33210: LD_INT 109
33212: PUSH
33213: LD_INT 110
33215: PUSH
33216: LD_INT 111
33218: PUSH
33219: LD_INT 112
33221: PUSH
33222: LD_INT 113
33224: PUSH
33225: LD_INT 114
33227: PUSH
33228: LD_INT 116
33230: PUSH
33231: LD_INT 117
33233: PUSH
33234: LD_INT 118
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: ST_TO_ADDR
33260: GO 34715
33262: LD_INT 13
33264: DOUBLE
33265: EQUAL
33266: IFTRUE 33270
33268: GO 33478
33270: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
33271: LD_ADDR_VAR 0 2
33275: PUSH
33276: LD_INT 1
33278: PUSH
33279: LD_INT 2
33281: PUSH
33282: LD_INT 3
33284: PUSH
33285: LD_INT 4
33287: PUSH
33288: LD_INT 5
33290: PUSH
33291: LD_INT 8
33293: PUSH
33294: LD_INT 9
33296: PUSH
33297: LD_INT 10
33299: PUSH
33300: LD_INT 11
33302: PUSH
33303: LD_INT 12
33305: PUSH
33306: LD_INT 14
33308: PUSH
33309: LD_INT 15
33311: PUSH
33312: LD_INT 16
33314: PUSH
33315: LD_INT 17
33317: PUSH
33318: LD_INT 18
33320: PUSH
33321: LD_INT 19
33323: PUSH
33324: LD_INT 20
33326: PUSH
33327: LD_INT 21
33329: PUSH
33330: LD_INT 22
33332: PUSH
33333: LD_INT 23
33335: PUSH
33336: LD_INT 24
33338: PUSH
33339: LD_INT 25
33341: PUSH
33342: LD_INT 26
33344: PUSH
33345: LD_INT 27
33347: PUSH
33348: LD_INT 28
33350: PUSH
33351: LD_INT 30
33353: PUSH
33354: LD_INT 31
33356: PUSH
33357: LD_INT 32
33359: PUSH
33360: LD_INT 33
33362: PUSH
33363: LD_INT 34
33365: PUSH
33366: LD_INT 36
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 101
33404: PUSH
33405: LD_INT 102
33407: PUSH
33408: LD_INT 103
33410: PUSH
33411: LD_INT 104
33413: PUSH
33414: LD_INT 105
33416: PUSH
33417: LD_INT 106
33419: PUSH
33420: LD_INT 107
33422: PUSH
33423: LD_INT 108
33425: PUSH
33426: LD_INT 109
33428: PUSH
33429: LD_INT 110
33431: PUSH
33432: LD_INT 111
33434: PUSH
33435: LD_INT 112
33437: PUSH
33438: LD_INT 113
33440: PUSH
33441: LD_INT 114
33443: PUSH
33444: LD_INT 116
33446: PUSH
33447: LD_INT 117
33449: PUSH
33450: LD_INT 118
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: ST_TO_ADDR
33476: GO 34715
33478: LD_INT 14
33480: DOUBLE
33481: EQUAL
33482: IFTRUE 33486
33484: GO 33710
33486: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
33487: LD_ADDR_VAR 0 2
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: LD_INT 2
33497: PUSH
33498: LD_INT 3
33500: PUSH
33501: LD_INT 4
33503: PUSH
33504: LD_INT 5
33506: PUSH
33507: LD_INT 6
33509: PUSH
33510: LD_INT 7
33512: PUSH
33513: LD_INT 8
33515: PUSH
33516: LD_INT 9
33518: PUSH
33519: LD_INT 10
33521: PUSH
33522: LD_INT 11
33524: PUSH
33525: LD_INT 12
33527: PUSH
33528: LD_INT 13
33530: PUSH
33531: LD_INT 14
33533: PUSH
33534: LD_INT 15
33536: PUSH
33537: LD_INT 16
33539: PUSH
33540: LD_INT 17
33542: PUSH
33543: LD_INT 18
33545: PUSH
33546: LD_INT 19
33548: PUSH
33549: LD_INT 20
33551: PUSH
33552: LD_INT 21
33554: PUSH
33555: LD_INT 22
33557: PUSH
33558: LD_INT 23
33560: PUSH
33561: LD_INT 24
33563: PUSH
33564: LD_INT 25
33566: PUSH
33567: LD_INT 26
33569: PUSH
33570: LD_INT 27
33572: PUSH
33573: LD_INT 28
33575: PUSH
33576: LD_INT 29
33578: PUSH
33579: LD_INT 30
33581: PUSH
33582: LD_INT 31
33584: PUSH
33585: LD_INT 32
33587: PUSH
33588: LD_INT 33
33590: PUSH
33591: LD_INT 34
33593: PUSH
33594: LD_INT 36
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 101
33636: PUSH
33637: LD_INT 102
33639: PUSH
33640: LD_INT 103
33642: PUSH
33643: LD_INT 104
33645: PUSH
33646: LD_INT 105
33648: PUSH
33649: LD_INT 106
33651: PUSH
33652: LD_INT 107
33654: PUSH
33655: LD_INT 108
33657: PUSH
33658: LD_INT 109
33660: PUSH
33661: LD_INT 110
33663: PUSH
33664: LD_INT 111
33666: PUSH
33667: LD_INT 112
33669: PUSH
33670: LD_INT 113
33672: PUSH
33673: LD_INT 114
33675: PUSH
33676: LD_INT 116
33678: PUSH
33679: LD_INT 117
33681: PUSH
33682: LD_INT 118
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: ST_TO_ADDR
33708: GO 34715
33710: LD_INT 15
33712: DOUBLE
33713: EQUAL
33714: IFTRUE 33718
33716: GO 33942
33718: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
33719: LD_ADDR_VAR 0 2
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: LD_INT 2
33729: PUSH
33730: LD_INT 3
33732: PUSH
33733: LD_INT 4
33735: PUSH
33736: LD_INT 5
33738: PUSH
33739: LD_INT 6
33741: PUSH
33742: LD_INT 7
33744: PUSH
33745: LD_INT 8
33747: PUSH
33748: LD_INT 9
33750: PUSH
33751: LD_INT 10
33753: PUSH
33754: LD_INT 11
33756: PUSH
33757: LD_INT 12
33759: PUSH
33760: LD_INT 13
33762: PUSH
33763: LD_INT 14
33765: PUSH
33766: LD_INT 15
33768: PUSH
33769: LD_INT 16
33771: PUSH
33772: LD_INT 17
33774: PUSH
33775: LD_INT 18
33777: PUSH
33778: LD_INT 19
33780: PUSH
33781: LD_INT 20
33783: PUSH
33784: LD_INT 21
33786: PUSH
33787: LD_INT 22
33789: PUSH
33790: LD_INT 23
33792: PUSH
33793: LD_INT 24
33795: PUSH
33796: LD_INT 25
33798: PUSH
33799: LD_INT 26
33801: PUSH
33802: LD_INT 27
33804: PUSH
33805: LD_INT 28
33807: PUSH
33808: LD_INT 29
33810: PUSH
33811: LD_INT 30
33813: PUSH
33814: LD_INT 31
33816: PUSH
33817: LD_INT 32
33819: PUSH
33820: LD_INT 33
33822: PUSH
33823: LD_INT 34
33825: PUSH
33826: LD_INT 36
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 101
33868: PUSH
33869: LD_INT 102
33871: PUSH
33872: LD_INT 103
33874: PUSH
33875: LD_INT 104
33877: PUSH
33878: LD_INT 105
33880: PUSH
33881: LD_INT 106
33883: PUSH
33884: LD_INT 107
33886: PUSH
33887: LD_INT 108
33889: PUSH
33890: LD_INT 109
33892: PUSH
33893: LD_INT 110
33895: PUSH
33896: LD_INT 111
33898: PUSH
33899: LD_INT 112
33901: PUSH
33902: LD_INT 113
33904: PUSH
33905: LD_INT 114
33907: PUSH
33908: LD_INT 116
33910: PUSH
33911: LD_INT 117
33913: PUSH
33914: LD_INT 118
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: ST_TO_ADDR
33940: GO 34715
33942: LD_INT 16
33944: DOUBLE
33945: EQUAL
33946: IFTRUE 33950
33948: GO 34086
33950: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
33951: LD_ADDR_VAR 0 2
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: LD_INT 4
33961: PUSH
33962: LD_INT 5
33964: PUSH
33965: LD_INT 7
33967: PUSH
33968: LD_INT 11
33970: PUSH
33971: LD_INT 12
33973: PUSH
33974: LD_INT 15
33976: PUSH
33977: LD_INT 16
33979: PUSH
33980: LD_INT 20
33982: PUSH
33983: LD_INT 21
33985: PUSH
33986: LD_INT 22
33988: PUSH
33989: LD_INT 23
33991: PUSH
33992: LD_INT 25
33994: PUSH
33995: LD_INT 26
33997: PUSH
33998: LD_INT 30
34000: PUSH
34001: LD_INT 31
34003: PUSH
34004: LD_INT 32
34006: PUSH
34007: LD_INT 33
34009: PUSH
34010: LD_INT 34
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 101
34036: PUSH
34037: LD_INT 102
34039: PUSH
34040: LD_INT 103
34042: PUSH
34043: LD_INT 106
34045: PUSH
34046: LD_INT 108
34048: PUSH
34049: LD_INT 112
34051: PUSH
34052: LD_INT 113
34054: PUSH
34055: LD_INT 114
34057: PUSH
34058: LD_INT 116
34060: PUSH
34061: LD_INT 117
34063: PUSH
34064: LD_INT 118
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: ST_TO_ADDR
34084: GO 34715
34086: LD_INT 17
34088: DOUBLE
34089: EQUAL
34090: IFTRUE 34094
34092: GO 34318
34094: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
34095: LD_ADDR_VAR 0 2
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: LD_INT 2
34105: PUSH
34106: LD_INT 3
34108: PUSH
34109: LD_INT 4
34111: PUSH
34112: LD_INT 5
34114: PUSH
34115: LD_INT 6
34117: PUSH
34118: LD_INT 7
34120: PUSH
34121: LD_INT 8
34123: PUSH
34124: LD_INT 9
34126: PUSH
34127: LD_INT 10
34129: PUSH
34130: LD_INT 11
34132: PUSH
34133: LD_INT 12
34135: PUSH
34136: LD_INT 13
34138: PUSH
34139: LD_INT 14
34141: PUSH
34142: LD_INT 15
34144: PUSH
34145: LD_INT 16
34147: PUSH
34148: LD_INT 17
34150: PUSH
34151: LD_INT 18
34153: PUSH
34154: LD_INT 19
34156: PUSH
34157: LD_INT 20
34159: PUSH
34160: LD_INT 21
34162: PUSH
34163: LD_INT 22
34165: PUSH
34166: LD_INT 23
34168: PUSH
34169: LD_INT 24
34171: PUSH
34172: LD_INT 25
34174: PUSH
34175: LD_INT 26
34177: PUSH
34178: LD_INT 27
34180: PUSH
34181: LD_INT 28
34183: PUSH
34184: LD_INT 29
34186: PUSH
34187: LD_INT 30
34189: PUSH
34190: LD_INT 31
34192: PUSH
34193: LD_INT 32
34195: PUSH
34196: LD_INT 33
34198: PUSH
34199: LD_INT 34
34201: PUSH
34202: LD_INT 36
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 101
34244: PUSH
34245: LD_INT 102
34247: PUSH
34248: LD_INT 103
34250: PUSH
34251: LD_INT 104
34253: PUSH
34254: LD_INT 105
34256: PUSH
34257: LD_INT 106
34259: PUSH
34260: LD_INT 107
34262: PUSH
34263: LD_INT 108
34265: PUSH
34266: LD_INT 109
34268: PUSH
34269: LD_INT 110
34271: PUSH
34272: LD_INT 111
34274: PUSH
34275: LD_INT 112
34277: PUSH
34278: LD_INT 113
34280: PUSH
34281: LD_INT 114
34283: PUSH
34284: LD_INT 116
34286: PUSH
34287: LD_INT 117
34289: PUSH
34290: LD_INT 118
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: ST_TO_ADDR
34316: GO 34715
34318: LD_INT 18
34320: DOUBLE
34321: EQUAL
34322: IFTRUE 34326
34324: GO 34474
34326: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
34327: LD_ADDR_VAR 0 2
34331: PUSH
34332: LD_INT 2
34334: PUSH
34335: LD_INT 4
34337: PUSH
34338: LD_INT 5
34340: PUSH
34341: LD_INT 7
34343: PUSH
34344: LD_INT 11
34346: PUSH
34347: LD_INT 12
34349: PUSH
34350: LD_INT 15
34352: PUSH
34353: LD_INT 16
34355: PUSH
34356: LD_INT 20
34358: PUSH
34359: LD_INT 21
34361: PUSH
34362: LD_INT 22
34364: PUSH
34365: LD_INT 23
34367: PUSH
34368: LD_INT 25
34370: PUSH
34371: LD_INT 26
34373: PUSH
34374: LD_INT 30
34376: PUSH
34377: LD_INT 31
34379: PUSH
34380: LD_INT 32
34382: PUSH
34383: LD_INT 33
34385: PUSH
34386: LD_INT 34
34388: PUSH
34389: LD_INT 35
34391: PUSH
34392: LD_INT 36
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 101
34420: PUSH
34421: LD_INT 102
34423: PUSH
34424: LD_INT 103
34426: PUSH
34427: LD_INT 106
34429: PUSH
34430: LD_INT 108
34432: PUSH
34433: LD_INT 112
34435: PUSH
34436: LD_INT 113
34438: PUSH
34439: LD_INT 114
34441: PUSH
34442: LD_INT 115
34444: PUSH
34445: LD_INT 116
34447: PUSH
34448: LD_INT 117
34450: PUSH
34451: LD_INT 118
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: ST_TO_ADDR
34472: GO 34715
34474: LD_INT 19
34476: DOUBLE
34477: EQUAL
34478: IFTRUE 34482
34480: GO 34714
34482: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
34483: LD_ADDR_VAR 0 2
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: LD_INT 2
34493: PUSH
34494: LD_INT 3
34496: PUSH
34497: LD_INT 4
34499: PUSH
34500: LD_INT 5
34502: PUSH
34503: LD_INT 6
34505: PUSH
34506: LD_INT 7
34508: PUSH
34509: LD_INT 8
34511: PUSH
34512: LD_INT 9
34514: PUSH
34515: LD_INT 10
34517: PUSH
34518: LD_INT 11
34520: PUSH
34521: LD_INT 12
34523: PUSH
34524: LD_INT 13
34526: PUSH
34527: LD_INT 14
34529: PUSH
34530: LD_INT 15
34532: PUSH
34533: LD_INT 16
34535: PUSH
34536: LD_INT 17
34538: PUSH
34539: LD_INT 18
34541: PUSH
34542: LD_INT 19
34544: PUSH
34545: LD_INT 20
34547: PUSH
34548: LD_INT 21
34550: PUSH
34551: LD_INT 22
34553: PUSH
34554: LD_INT 23
34556: PUSH
34557: LD_INT 24
34559: PUSH
34560: LD_INT 25
34562: PUSH
34563: LD_INT 26
34565: PUSH
34566: LD_INT 27
34568: PUSH
34569: LD_INT 28
34571: PUSH
34572: LD_INT 29
34574: PUSH
34575: LD_INT 30
34577: PUSH
34578: LD_INT 31
34580: PUSH
34581: LD_INT 32
34583: PUSH
34584: LD_INT 33
34586: PUSH
34587: LD_INT 34
34589: PUSH
34590: LD_INT 35
34592: PUSH
34593: LD_INT 36
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 101
34636: PUSH
34637: LD_INT 102
34639: PUSH
34640: LD_INT 103
34642: PUSH
34643: LD_INT 104
34645: PUSH
34646: LD_INT 105
34648: PUSH
34649: LD_INT 106
34651: PUSH
34652: LD_INT 107
34654: PUSH
34655: LD_INT 108
34657: PUSH
34658: LD_INT 109
34660: PUSH
34661: LD_INT 110
34663: PUSH
34664: LD_INT 111
34666: PUSH
34667: LD_INT 112
34669: PUSH
34670: LD_INT 113
34672: PUSH
34673: LD_INT 114
34675: PUSH
34676: LD_INT 115
34678: PUSH
34679: LD_INT 116
34681: PUSH
34682: LD_INT 117
34684: PUSH
34685: LD_INT 118
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: ST_TO_ADDR
34712: GO 34715
34714: POP
// end else
34715: GO 34946
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
34717: LD_ADDR_VAR 0 2
34721: PUSH
34722: LD_INT 1
34724: PUSH
34725: LD_INT 2
34727: PUSH
34728: LD_INT 3
34730: PUSH
34731: LD_INT 4
34733: PUSH
34734: LD_INT 5
34736: PUSH
34737: LD_INT 6
34739: PUSH
34740: LD_INT 7
34742: PUSH
34743: LD_INT 8
34745: PUSH
34746: LD_INT 9
34748: PUSH
34749: LD_INT 10
34751: PUSH
34752: LD_INT 11
34754: PUSH
34755: LD_INT 12
34757: PUSH
34758: LD_INT 13
34760: PUSH
34761: LD_INT 14
34763: PUSH
34764: LD_INT 15
34766: PUSH
34767: LD_INT 16
34769: PUSH
34770: LD_INT 17
34772: PUSH
34773: LD_INT 18
34775: PUSH
34776: LD_INT 19
34778: PUSH
34779: LD_INT 20
34781: PUSH
34782: LD_INT 21
34784: PUSH
34785: LD_INT 22
34787: PUSH
34788: LD_INT 23
34790: PUSH
34791: LD_INT 24
34793: PUSH
34794: LD_INT 25
34796: PUSH
34797: LD_INT 26
34799: PUSH
34800: LD_INT 27
34802: PUSH
34803: LD_INT 28
34805: PUSH
34806: LD_INT 29
34808: PUSH
34809: LD_INT 30
34811: PUSH
34812: LD_INT 31
34814: PUSH
34815: LD_INT 32
34817: PUSH
34818: LD_INT 33
34820: PUSH
34821: LD_INT 34
34823: PUSH
34824: LD_INT 35
34826: PUSH
34827: LD_INT 36
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 101
34870: PUSH
34871: LD_INT 102
34873: PUSH
34874: LD_INT 103
34876: PUSH
34877: LD_INT 104
34879: PUSH
34880: LD_INT 105
34882: PUSH
34883: LD_INT 106
34885: PUSH
34886: LD_INT 107
34888: PUSH
34889: LD_INT 108
34891: PUSH
34892: LD_INT 109
34894: PUSH
34895: LD_INT 110
34897: PUSH
34898: LD_INT 111
34900: PUSH
34901: LD_INT 112
34903: PUSH
34904: LD_INT 113
34906: PUSH
34907: LD_INT 114
34909: PUSH
34910: LD_INT 115
34912: PUSH
34913: LD_INT 116
34915: PUSH
34916: LD_INT 117
34918: PUSH
34919: LD_INT 118
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: ST_TO_ADDR
// if result then
34946: LD_VAR 0 2
34950: IFFALSE 35736
// begin normal :=  ;
34952: LD_ADDR_VAR 0 5
34956: PUSH
34957: LD_STRING 
34959: ST_TO_ADDR
// hardcore :=  ;
34960: LD_ADDR_VAR 0 6
34964: PUSH
34965: LD_STRING 
34967: ST_TO_ADDR
// active :=  ;
34968: LD_ADDR_VAR 0 7
34972: PUSH
34973: LD_STRING 
34975: ST_TO_ADDR
// for i = 1 to normalCounter do
34976: LD_ADDR_VAR 0 8
34980: PUSH
34981: DOUBLE
34982: LD_INT 1
34984: DEC
34985: ST_TO_ADDR
34986: LD_EXP 90
34990: PUSH
34991: FOR_TO
34992: IFFALSE 35093
// begin tmp := 0 ;
34994: LD_ADDR_VAR 0 3
34998: PUSH
34999: LD_STRING 0
35001: ST_TO_ADDR
// if result [ 1 ] then
35002: LD_VAR 0 2
35006: PUSH
35007: LD_INT 1
35009: ARRAY
35010: IFFALSE 35075
// if result [ 1 ] [ 1 ] = i then
35012: LD_VAR 0 2
35016: PUSH
35017: LD_INT 1
35019: ARRAY
35020: PUSH
35021: LD_INT 1
35023: ARRAY
35024: PUSH
35025: LD_VAR 0 8
35029: EQUAL
35030: IFFALSE 35075
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
35032: LD_ADDR_VAR 0 2
35036: PUSH
35037: LD_VAR 0 2
35041: PPUSH
35042: LD_INT 1
35044: PPUSH
35045: LD_VAR 0 2
35049: PUSH
35050: LD_INT 1
35052: ARRAY
35053: PPUSH
35054: LD_INT 1
35056: PPUSH
35057: CALL_OW 3
35061: PPUSH
35062: CALL_OW 1
35066: ST_TO_ADDR
// tmp := 1 ;
35067: LD_ADDR_VAR 0 3
35071: PUSH
35072: LD_STRING 1
35074: ST_TO_ADDR
// end ; normal := normal & tmp ;
35075: LD_ADDR_VAR 0 5
35079: PUSH
35080: LD_VAR 0 5
35084: PUSH
35085: LD_VAR 0 3
35089: STR
35090: ST_TO_ADDR
// end ;
35091: GO 34991
35093: POP
35094: POP
// for i = 1 to hardcoreCounter do
35095: LD_ADDR_VAR 0 8
35099: PUSH
35100: DOUBLE
35101: LD_INT 1
35103: DEC
35104: ST_TO_ADDR
35105: LD_EXP 91
35109: PUSH
35110: FOR_TO
35111: IFFALSE 35216
// begin tmp := 0 ;
35113: LD_ADDR_VAR 0 3
35117: PUSH
35118: LD_STRING 0
35120: ST_TO_ADDR
// if result [ 2 ] then
35121: LD_VAR 0 2
35125: PUSH
35126: LD_INT 2
35128: ARRAY
35129: IFFALSE 35198
// if result [ 2 ] [ 1 ] = 100 + i then
35131: LD_VAR 0 2
35135: PUSH
35136: LD_INT 2
35138: ARRAY
35139: PUSH
35140: LD_INT 1
35142: ARRAY
35143: PUSH
35144: LD_INT 100
35146: PUSH
35147: LD_VAR 0 8
35151: PLUS
35152: EQUAL
35153: IFFALSE 35198
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
35155: LD_ADDR_VAR 0 2
35159: PUSH
35160: LD_VAR 0 2
35164: PPUSH
35165: LD_INT 2
35167: PPUSH
35168: LD_VAR 0 2
35172: PUSH
35173: LD_INT 2
35175: ARRAY
35176: PPUSH
35177: LD_INT 1
35179: PPUSH
35180: CALL_OW 3
35184: PPUSH
35185: CALL_OW 1
35189: ST_TO_ADDR
// tmp := 1 ;
35190: LD_ADDR_VAR 0 3
35194: PUSH
35195: LD_STRING 1
35197: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
35198: LD_ADDR_VAR 0 6
35202: PUSH
35203: LD_VAR 0 6
35207: PUSH
35208: LD_VAR 0 3
35212: STR
35213: ST_TO_ADDR
// end ;
35214: GO 35110
35216: POP
35217: POP
// if isGameLoad then
35218: LD_VAR 0 1
35222: IFFALSE 35697
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
35224: LD_ADDR_VAR 0 4
35228: PUSH
35229: LD_EXP 94
35233: PUSH
35234: LD_EXP 93
35238: PUSH
35239: LD_EXP 95
35243: PUSH
35244: LD_EXP 92
35248: PUSH
35249: LD_EXP 96
35253: PUSH
35254: LD_EXP 97
35258: PUSH
35259: LD_EXP 98
35263: PUSH
35264: LD_EXP 99
35268: PUSH
35269: LD_EXP 100
35273: PUSH
35274: LD_EXP 101
35278: PUSH
35279: LD_EXP 102
35283: PUSH
35284: LD_EXP 103
35288: PUSH
35289: LD_EXP 104
35293: PUSH
35294: LD_EXP 105
35298: PUSH
35299: LD_EXP 113
35303: PUSH
35304: LD_EXP 114
35308: PUSH
35309: LD_EXP 115
35313: PUSH
35314: LD_EXP 116
35318: PUSH
35319: LD_EXP 118
35323: PUSH
35324: LD_EXP 119
35328: PUSH
35329: LD_EXP 120
35333: PUSH
35334: LD_EXP 123
35338: PUSH
35339: LD_EXP 125
35343: PUSH
35344: LD_EXP 126
35348: PUSH
35349: LD_EXP 127
35353: PUSH
35354: LD_EXP 129
35358: PUSH
35359: LD_EXP 130
35363: PUSH
35364: LD_EXP 133
35368: PUSH
35369: LD_EXP 134
35373: PUSH
35374: LD_EXP 135
35378: PUSH
35379: LD_EXP 136
35383: PUSH
35384: LD_EXP 137
35388: PUSH
35389: LD_EXP 138
35393: PUSH
35394: LD_EXP 139
35398: PUSH
35399: LD_EXP 140
35403: PUSH
35404: LD_EXP 141
35408: PUSH
35409: LD_EXP 106
35413: PUSH
35414: LD_EXP 107
35418: PUSH
35419: LD_EXP 110
35423: PUSH
35424: LD_EXP 111
35428: PUSH
35429: LD_EXP 112
35433: PUSH
35434: LD_EXP 108
35438: PUSH
35439: LD_EXP 109
35443: PUSH
35444: LD_EXP 117
35448: PUSH
35449: LD_EXP 121
35453: PUSH
35454: LD_EXP 122
35458: PUSH
35459: LD_EXP 124
35463: PUSH
35464: LD_EXP 128
35468: PUSH
35469: LD_EXP 131
35473: PUSH
35474: LD_EXP 132
35478: PUSH
35479: LD_EXP 142
35483: PUSH
35484: LD_EXP 143
35488: PUSH
35489: LD_EXP 144
35493: PUSH
35494: LD_EXP 145
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: ST_TO_ADDR
// tmp :=  ;
35555: LD_ADDR_VAR 0 3
35559: PUSH
35560: LD_STRING 
35562: ST_TO_ADDR
// for i = 1 to normalCounter do
35563: LD_ADDR_VAR 0 8
35567: PUSH
35568: DOUBLE
35569: LD_INT 1
35571: DEC
35572: ST_TO_ADDR
35573: LD_EXP 90
35577: PUSH
35578: FOR_TO
35579: IFFALSE 35615
// begin if flags [ i ] then
35581: LD_VAR 0 4
35585: PUSH
35586: LD_VAR 0 8
35590: ARRAY
35591: IFFALSE 35613
// tmp := tmp & i & ; ;
35593: LD_ADDR_VAR 0 3
35597: PUSH
35598: LD_VAR 0 3
35602: PUSH
35603: LD_VAR 0 8
35607: STR
35608: PUSH
35609: LD_STRING ;
35611: STR
35612: ST_TO_ADDR
// end ;
35613: GO 35578
35615: POP
35616: POP
// for i = 1 to hardcoreCounter do
35617: LD_ADDR_VAR 0 8
35621: PUSH
35622: DOUBLE
35623: LD_INT 1
35625: DEC
35626: ST_TO_ADDR
35627: LD_EXP 91
35631: PUSH
35632: FOR_TO
35633: IFFALSE 35679
// begin if flags [ normalCounter + i ] then
35635: LD_VAR 0 4
35639: PUSH
35640: LD_EXP 90
35644: PUSH
35645: LD_VAR 0 8
35649: PLUS
35650: ARRAY
35651: IFFALSE 35677
// tmp := tmp & ( 100 + i ) & ; ;
35653: LD_ADDR_VAR 0 3
35657: PUSH
35658: LD_VAR 0 3
35662: PUSH
35663: LD_INT 100
35665: PUSH
35666: LD_VAR 0 8
35670: PLUS
35671: STR
35672: PUSH
35673: LD_STRING ;
35675: STR
35676: ST_TO_ADDR
// end ;
35677: GO 35632
35679: POP
35680: POP
// if tmp then
35681: LD_VAR 0 3
35685: IFFALSE 35697
// active := tmp ;
35687: LD_ADDR_VAR 0 7
35691: PUSH
35692: LD_VAR 0 3
35696: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
35697: LD_STRING getStreamItemsFromMission("
35699: PUSH
35700: LD_VAR 0 5
35704: STR
35705: PUSH
35706: LD_STRING ","
35708: STR
35709: PUSH
35710: LD_VAR 0 6
35714: STR
35715: PUSH
35716: LD_STRING ","
35718: STR
35719: PUSH
35720: LD_VAR 0 7
35724: STR
35725: PUSH
35726: LD_STRING ")
35728: STR
35729: PPUSH
35730: CALL_OW 559
// end else
35734: GO 35743
// ToLua ( getStreamItemsFromMission("","","") ) ;
35736: LD_STRING getStreamItemsFromMission("","","")
35738: PPUSH
35739: CALL_OW 559
// end ;
35743: LD_VAR 0 2
35747: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
35748: LD_EXP 89
35752: PUSH
35753: LD_EXP 94
35757: AND
35758: IFFALSE 35882
35760: GO 35762
35762: DISABLE
35763: LD_INT 0
35765: PPUSH
35766: PPUSH
// begin enable ;
35767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
35768: LD_ADDR_VAR 0 2
35772: PUSH
35773: LD_INT 22
35775: PUSH
35776: LD_OWVAR 2
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 2
35787: PUSH
35788: LD_INT 34
35790: PUSH
35791: LD_INT 7
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 34
35800: PUSH
35801: LD_INT 45
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 34
35810: PUSH
35811: LD_INT 28
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 34
35820: PUSH
35821: LD_INT 47
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PPUSH
35839: CALL_OW 69
35843: ST_TO_ADDR
// if not tmp then
35844: LD_VAR 0 2
35848: NOT
35849: IFFALSE 35853
// exit ;
35851: GO 35882
// for i in tmp do
35853: LD_ADDR_VAR 0 1
35857: PUSH
35858: LD_VAR 0 2
35862: PUSH
35863: FOR_IN
35864: IFFALSE 35880
// begin SetLives ( i , 0 ) ;
35866: LD_VAR 0 1
35870: PPUSH
35871: LD_INT 0
35873: PPUSH
35874: CALL_OW 234
// end ;
35878: GO 35863
35880: POP
35881: POP
// end ;
35882: PPOPN 2
35884: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
35885: LD_EXP 89
35889: PUSH
35890: LD_EXP 95
35894: AND
35895: IFFALSE 35979
35897: GO 35899
35899: DISABLE
35900: LD_INT 0
35902: PPUSH
35903: PPUSH
// begin enable ;
35904: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
35905: LD_ADDR_VAR 0 2
35909: PUSH
35910: LD_INT 22
35912: PUSH
35913: LD_OWVAR 2
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 32
35924: PUSH
35925: LD_INT 3
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PPUSH
35936: CALL_OW 69
35940: ST_TO_ADDR
// if not tmp then
35941: LD_VAR 0 2
35945: NOT
35946: IFFALSE 35950
// exit ;
35948: GO 35979
// for i in tmp do
35950: LD_ADDR_VAR 0 1
35954: PUSH
35955: LD_VAR 0 2
35959: PUSH
35960: FOR_IN
35961: IFFALSE 35977
// begin SetLives ( i , 0 ) ;
35963: LD_VAR 0 1
35967: PPUSH
35968: LD_INT 0
35970: PPUSH
35971: CALL_OW 234
// end ;
35975: GO 35960
35977: POP
35978: POP
// end ;
35979: PPOPN 2
35981: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
35982: LD_EXP 89
35986: PUSH
35987: LD_EXP 92
35991: AND
35992: IFFALSE 36085
35994: GO 35996
35996: DISABLE
35997: LD_INT 0
35999: PPUSH
// begin enable ;
36000: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
36001: LD_ADDR_VAR 0 1
36005: PUSH
36006: LD_INT 22
36008: PUSH
36009: LD_OWVAR 2
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: LD_INT 25
36023: PUSH
36024: LD_INT 5
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 25
36033: PUSH
36034: LD_INT 9
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 25
36043: PUSH
36044: LD_INT 8
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PPUSH
36061: CALL_OW 69
36065: PUSH
36066: FOR_IN
36067: IFFALSE 36083
// begin SetClass ( i , 1 ) ;
36069: LD_VAR 0 1
36073: PPUSH
36074: LD_INT 1
36076: PPUSH
36077: CALL_OW 336
// end ;
36081: GO 36066
36083: POP
36084: POP
// end ;
36085: PPOPN 1
36087: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
36088: LD_EXP 89
36092: PUSH
36093: LD_EXP 93
36097: AND
36098: PUSH
36099: LD_OWVAR 65
36103: PUSH
36104: LD_INT 7
36106: LESS
36107: AND
36108: IFFALSE 36122
36110: GO 36112
36112: DISABLE
// begin enable ;
36113: ENABLE
// game_speed := 7 ;
36114: LD_ADDR_OWVAR 65
36118: PUSH
36119: LD_INT 7
36121: ST_TO_ADDR
// end ;
36122: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
36123: LD_EXP 89
36127: PUSH
36128: LD_EXP 96
36132: AND
36133: IFFALSE 36335
36135: GO 36137
36137: DISABLE
36138: LD_INT 0
36140: PPUSH
36141: PPUSH
36142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36143: LD_ADDR_VAR 0 3
36147: PUSH
36148: LD_INT 81
36150: PUSH
36151: LD_OWVAR 2
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 21
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PPUSH
36174: CALL_OW 69
36178: ST_TO_ADDR
// if not tmp then
36179: LD_VAR 0 3
36183: NOT
36184: IFFALSE 36188
// exit ;
36186: GO 36335
// if tmp > 5 then
36188: LD_VAR 0 3
36192: PUSH
36193: LD_INT 5
36195: GREATER
36196: IFFALSE 36208
// k := 5 else
36198: LD_ADDR_VAR 0 2
36202: PUSH
36203: LD_INT 5
36205: ST_TO_ADDR
36206: GO 36218
// k := tmp ;
36208: LD_ADDR_VAR 0 2
36212: PUSH
36213: LD_VAR 0 3
36217: ST_TO_ADDR
// for i := 1 to k do
36218: LD_ADDR_VAR 0 1
36222: PUSH
36223: DOUBLE
36224: LD_INT 1
36226: DEC
36227: ST_TO_ADDR
36228: LD_VAR 0 2
36232: PUSH
36233: FOR_TO
36234: IFFALSE 36333
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
36236: LD_VAR 0 3
36240: PUSH
36241: LD_VAR 0 1
36245: ARRAY
36246: PPUSH
36247: LD_VAR 0 1
36251: PUSH
36252: LD_INT 4
36254: MOD
36255: PUSH
36256: LD_INT 1
36258: PLUS
36259: PPUSH
36260: CALL_OW 259
36264: PUSH
36265: LD_INT 10
36267: LESS
36268: IFFALSE 36331
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
36270: LD_VAR 0 3
36274: PUSH
36275: LD_VAR 0 1
36279: ARRAY
36280: PPUSH
36281: LD_VAR 0 1
36285: PUSH
36286: LD_INT 4
36288: MOD
36289: PUSH
36290: LD_INT 1
36292: PLUS
36293: PPUSH
36294: LD_VAR 0 3
36298: PUSH
36299: LD_VAR 0 1
36303: ARRAY
36304: PPUSH
36305: LD_VAR 0 1
36309: PUSH
36310: LD_INT 4
36312: MOD
36313: PUSH
36314: LD_INT 1
36316: PLUS
36317: PPUSH
36318: CALL_OW 259
36322: PUSH
36323: LD_INT 1
36325: PLUS
36326: PPUSH
36327: CALL_OW 237
36331: GO 36233
36333: POP
36334: POP
// end ;
36335: PPOPN 3
36337: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
36338: LD_EXP 89
36342: PUSH
36343: LD_EXP 97
36347: AND
36348: IFFALSE 36368
36350: GO 36352
36352: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
36353: LD_INT 4
36355: PPUSH
36356: LD_OWVAR 2
36360: PPUSH
36361: LD_INT 0
36363: PPUSH
36364: CALL_OW 324
36368: END
// every 0 0$1 trigger StreamModeActive and sShovel do
36369: LD_EXP 89
36373: PUSH
36374: LD_EXP 126
36378: AND
36379: IFFALSE 36399
36381: GO 36383
36383: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
36384: LD_INT 19
36386: PPUSH
36387: LD_OWVAR 2
36391: PPUSH
36392: LD_INT 0
36394: PPUSH
36395: CALL_OW 324
36399: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
36400: LD_EXP 89
36404: PUSH
36405: LD_EXP 98
36409: AND
36410: IFFALSE 36512
36412: GO 36414
36414: DISABLE
36415: LD_INT 0
36417: PPUSH
36418: PPUSH
// begin enable ;
36419: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
36420: LD_ADDR_VAR 0 2
36424: PUSH
36425: LD_INT 22
36427: PUSH
36428: LD_OWVAR 2
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 2
36439: PUSH
36440: LD_INT 34
36442: PUSH
36443: LD_INT 11
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 34
36452: PUSH
36453: LD_INT 30
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: LIST
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PPUSH
36469: CALL_OW 69
36473: ST_TO_ADDR
// if not tmp then
36474: LD_VAR 0 2
36478: NOT
36479: IFFALSE 36483
// exit ;
36481: GO 36512
// for i in tmp do
36483: LD_ADDR_VAR 0 1
36487: PUSH
36488: LD_VAR 0 2
36492: PUSH
36493: FOR_IN
36494: IFFALSE 36510
// begin SetLives ( i , 0 ) ;
36496: LD_VAR 0 1
36500: PPUSH
36501: LD_INT 0
36503: PPUSH
36504: CALL_OW 234
// end ;
36508: GO 36493
36510: POP
36511: POP
// end ;
36512: PPOPN 2
36514: END
// every 0 0$1 trigger StreamModeActive and sBunker do
36515: LD_EXP 89
36519: PUSH
36520: LD_EXP 99
36524: AND
36525: IFFALSE 36545
36527: GO 36529
36529: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
36530: LD_INT 32
36532: PPUSH
36533: LD_OWVAR 2
36537: PPUSH
36538: LD_INT 0
36540: PPUSH
36541: CALL_OW 324
36545: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
36546: LD_EXP 89
36550: PUSH
36551: LD_EXP 100
36555: AND
36556: IFFALSE 36737
36558: GO 36560
36560: DISABLE
36561: LD_INT 0
36563: PPUSH
36564: PPUSH
36565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
36566: LD_ADDR_VAR 0 2
36570: PUSH
36571: LD_INT 22
36573: PUSH
36574: LD_OWVAR 2
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 33
36585: PUSH
36586: LD_INT 3
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PPUSH
36597: CALL_OW 69
36601: ST_TO_ADDR
// if not tmp then
36602: LD_VAR 0 2
36606: NOT
36607: IFFALSE 36611
// exit ;
36609: GO 36737
// side := 0 ;
36611: LD_ADDR_VAR 0 3
36615: PUSH
36616: LD_INT 0
36618: ST_TO_ADDR
// for i := 1 to 8 do
36619: LD_ADDR_VAR 0 1
36623: PUSH
36624: DOUBLE
36625: LD_INT 1
36627: DEC
36628: ST_TO_ADDR
36629: LD_INT 8
36631: PUSH
36632: FOR_TO
36633: IFFALSE 36681
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
36635: LD_OWVAR 2
36639: PUSH
36640: LD_VAR 0 1
36644: NONEQUAL
36645: PUSH
36646: LD_OWVAR 2
36650: PPUSH
36651: LD_VAR 0 1
36655: PPUSH
36656: CALL_OW 81
36660: PUSH
36661: LD_INT 2
36663: EQUAL
36664: AND
36665: IFFALSE 36679
// begin side := i ;
36667: LD_ADDR_VAR 0 3
36671: PUSH
36672: LD_VAR 0 1
36676: ST_TO_ADDR
// break ;
36677: GO 36681
// end ;
36679: GO 36632
36681: POP
36682: POP
// if not side then
36683: LD_VAR 0 3
36687: NOT
36688: IFFALSE 36692
// exit ;
36690: GO 36737
// for i := 1 to tmp do
36692: LD_ADDR_VAR 0 1
36696: PUSH
36697: DOUBLE
36698: LD_INT 1
36700: DEC
36701: ST_TO_ADDR
36702: LD_VAR 0 2
36706: PUSH
36707: FOR_TO
36708: IFFALSE 36735
// if Prob ( 60 ) then
36710: LD_INT 60
36712: PPUSH
36713: CALL_OW 13
36717: IFFALSE 36733
// SetSide ( i , side ) ;
36719: LD_VAR 0 1
36723: PPUSH
36724: LD_VAR 0 3
36728: PPUSH
36729: CALL_OW 235
36733: GO 36707
36735: POP
36736: POP
// end ;
36737: PPOPN 3
36739: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
36740: LD_EXP 89
36744: PUSH
36745: LD_EXP 102
36749: AND
36750: IFFALSE 36869
36752: GO 36754
36754: DISABLE
36755: LD_INT 0
36757: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
36758: LD_ADDR_VAR 0 1
36762: PUSH
36763: LD_INT 22
36765: PUSH
36766: LD_OWVAR 2
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 21
36777: PUSH
36778: LD_INT 1
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 3
36787: PUSH
36788: LD_INT 23
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: LIST
36806: PPUSH
36807: CALL_OW 69
36811: PUSH
36812: FOR_IN
36813: IFFALSE 36867
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
36815: LD_VAR 0 1
36819: PPUSH
36820: CALL_OW 257
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: LD_INT 3
36833: PUSH
36834: LD_INT 4
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: IN
36843: IFFALSE 36865
// SetClass ( un , rand ( 1 , 4 ) ) ;
36845: LD_VAR 0 1
36849: PPUSH
36850: LD_INT 1
36852: PPUSH
36853: LD_INT 4
36855: PPUSH
36856: CALL_OW 12
36860: PPUSH
36861: CALL_OW 336
36865: GO 36812
36867: POP
36868: POP
// end ;
36869: PPOPN 1
36871: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
36872: LD_EXP 89
36876: PUSH
36877: LD_EXP 101
36881: AND
36882: IFFALSE 36961
36884: GO 36886
36886: DISABLE
36887: LD_INT 0
36889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
36890: LD_ADDR_VAR 0 1
36894: PUSH
36895: LD_INT 22
36897: PUSH
36898: LD_OWVAR 2
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 21
36909: PUSH
36910: LD_INT 3
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PPUSH
36921: CALL_OW 69
36925: ST_TO_ADDR
// if not tmp then
36926: LD_VAR 0 1
36930: NOT
36931: IFFALSE 36935
// exit ;
36933: GO 36961
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
36935: LD_VAR 0 1
36939: PUSH
36940: LD_INT 1
36942: PPUSH
36943: LD_VAR 0 1
36947: PPUSH
36948: CALL_OW 12
36952: ARRAY
36953: PPUSH
36954: LD_INT 100
36956: PPUSH
36957: CALL_OW 234
// end ;
36961: PPOPN 1
36963: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
36964: LD_EXP 89
36968: PUSH
36969: LD_EXP 103
36973: AND
36974: IFFALSE 37072
36976: GO 36978
36978: DISABLE
36979: LD_INT 0
36981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36982: LD_ADDR_VAR 0 1
36986: PUSH
36987: LD_INT 22
36989: PUSH
36990: LD_OWVAR 2
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 21
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PPUSH
37013: CALL_OW 69
37017: ST_TO_ADDR
// if not tmp then
37018: LD_VAR 0 1
37022: NOT
37023: IFFALSE 37027
// exit ;
37025: GO 37072
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
37027: LD_VAR 0 1
37031: PUSH
37032: LD_INT 1
37034: PPUSH
37035: LD_VAR 0 1
37039: PPUSH
37040: CALL_OW 12
37044: ARRAY
37045: PPUSH
37046: LD_INT 1
37048: PPUSH
37049: LD_INT 4
37051: PPUSH
37052: CALL_OW 12
37056: PPUSH
37057: LD_INT 3000
37059: PPUSH
37060: LD_INT 9000
37062: PPUSH
37063: CALL_OW 12
37067: PPUSH
37068: CALL_OW 492
// end ;
37072: PPOPN 1
37074: END
// every 0 0$1 trigger StreamModeActive and sDepot do
37075: LD_EXP 89
37079: PUSH
37080: LD_EXP 104
37084: AND
37085: IFFALSE 37105
37087: GO 37089
37089: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
37090: LD_INT 1
37092: PPUSH
37093: LD_OWVAR 2
37097: PPUSH
37098: LD_INT 0
37100: PPUSH
37101: CALL_OW 324
37105: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
37106: LD_EXP 89
37110: PUSH
37111: LD_EXP 105
37115: AND
37116: IFFALSE 37199
37118: GO 37120
37120: DISABLE
37121: LD_INT 0
37123: PPUSH
37124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37125: LD_ADDR_VAR 0 2
37129: PUSH
37130: LD_INT 22
37132: PUSH
37133: LD_OWVAR 2
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 21
37144: PUSH
37145: LD_INT 3
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PPUSH
37156: CALL_OW 69
37160: ST_TO_ADDR
// if not tmp then
37161: LD_VAR 0 2
37165: NOT
37166: IFFALSE 37170
// exit ;
37168: GO 37199
// for i in tmp do
37170: LD_ADDR_VAR 0 1
37174: PUSH
37175: LD_VAR 0 2
37179: PUSH
37180: FOR_IN
37181: IFFALSE 37197
// SetBLevel ( i , 10 ) ;
37183: LD_VAR 0 1
37187: PPUSH
37188: LD_INT 10
37190: PPUSH
37191: CALL_OW 241
37195: GO 37180
37197: POP
37198: POP
// end ;
37199: PPOPN 2
37201: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
37202: LD_EXP 89
37206: PUSH
37207: LD_EXP 106
37211: AND
37212: IFFALSE 37323
37214: GO 37216
37216: DISABLE
37217: LD_INT 0
37219: PPUSH
37220: PPUSH
37221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37222: LD_ADDR_VAR 0 3
37226: PUSH
37227: LD_INT 22
37229: PUSH
37230: LD_OWVAR 2
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 25
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PPUSH
37253: CALL_OW 69
37257: ST_TO_ADDR
// if not tmp then
37258: LD_VAR 0 3
37262: NOT
37263: IFFALSE 37267
// exit ;
37265: GO 37323
// un := tmp [ rand ( 1 , tmp ) ] ;
37267: LD_ADDR_VAR 0 2
37271: PUSH
37272: LD_VAR 0 3
37276: PUSH
37277: LD_INT 1
37279: PPUSH
37280: LD_VAR 0 3
37284: PPUSH
37285: CALL_OW 12
37289: ARRAY
37290: ST_TO_ADDR
// if Crawls ( un ) then
37291: LD_VAR 0 2
37295: PPUSH
37296: CALL_OW 318
37300: IFFALSE 37311
// ComWalk ( un ) ;
37302: LD_VAR 0 2
37306: PPUSH
37307: CALL_OW 138
// SetClass ( un , class_sniper ) ;
37311: LD_VAR 0 2
37315: PPUSH
37316: LD_INT 5
37318: PPUSH
37319: CALL_OW 336
// end ;
37323: PPOPN 3
37325: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
37326: LD_EXP 89
37330: PUSH
37331: LD_EXP 107
37335: AND
37336: PUSH
37337: LD_OWVAR 67
37341: PUSH
37342: LD_INT 4
37344: LESS
37345: AND
37346: IFFALSE 37365
37348: GO 37350
37350: DISABLE
// begin Difficulty := Difficulty + 1 ;
37351: LD_ADDR_OWVAR 67
37355: PUSH
37356: LD_OWVAR 67
37360: PUSH
37361: LD_INT 1
37363: PLUS
37364: ST_TO_ADDR
// end ;
37365: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
37366: LD_EXP 89
37370: PUSH
37371: LD_EXP 108
37375: AND
37376: IFFALSE 37479
37378: GO 37380
37380: DISABLE
37381: LD_INT 0
37383: PPUSH
// begin for i := 1 to 5 do
37384: LD_ADDR_VAR 0 1
37388: PUSH
37389: DOUBLE
37390: LD_INT 1
37392: DEC
37393: ST_TO_ADDR
37394: LD_INT 5
37396: PUSH
37397: FOR_TO
37398: IFFALSE 37477
// begin uc_nation := nation_nature ;
37400: LD_ADDR_OWVAR 21
37404: PUSH
37405: LD_INT 0
37407: ST_TO_ADDR
// uc_side := 0 ;
37408: LD_ADDR_OWVAR 20
37412: PUSH
37413: LD_INT 0
37415: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37416: LD_ADDR_OWVAR 29
37420: PUSH
37421: LD_INT 12
37423: PUSH
37424: LD_INT 12
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: ST_TO_ADDR
// hc_agressivity := 20 ;
37431: LD_ADDR_OWVAR 35
37435: PUSH
37436: LD_INT 20
37438: ST_TO_ADDR
// hc_class := class_tiger ;
37439: LD_ADDR_OWVAR 28
37443: PUSH
37444: LD_INT 14
37446: ST_TO_ADDR
// hc_gallery :=  ;
37447: LD_ADDR_OWVAR 33
37451: PUSH
37452: LD_STRING 
37454: ST_TO_ADDR
// hc_name :=  ;
37455: LD_ADDR_OWVAR 26
37459: PUSH
37460: LD_STRING 
37462: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
37463: CALL_OW 44
37467: PPUSH
37468: LD_INT 0
37470: PPUSH
37471: CALL_OW 51
// end ;
37475: GO 37397
37477: POP
37478: POP
// end ;
37479: PPOPN 1
37481: END
// every 0 0$1 trigger StreamModeActive and sBomb do
37482: LD_EXP 89
37486: PUSH
37487: LD_EXP 109
37491: AND
37492: IFFALSE 37501
37494: GO 37496
37496: DISABLE
// StreamSibBomb ;
37497: CALL 37502 0 0
37501: END
// export function StreamSibBomb ; var i , x , y ; begin
37502: LD_INT 0
37504: PPUSH
37505: PPUSH
37506: PPUSH
37507: PPUSH
// result := false ;
37508: LD_ADDR_VAR 0 1
37512: PUSH
37513: LD_INT 0
37515: ST_TO_ADDR
// for i := 1 to 16 do
37516: LD_ADDR_VAR 0 2
37520: PUSH
37521: DOUBLE
37522: LD_INT 1
37524: DEC
37525: ST_TO_ADDR
37526: LD_INT 16
37528: PUSH
37529: FOR_TO
37530: IFFALSE 37729
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37532: LD_ADDR_VAR 0 3
37536: PUSH
37537: LD_INT 10
37539: PUSH
37540: LD_INT 20
37542: PUSH
37543: LD_INT 30
37545: PUSH
37546: LD_INT 40
37548: PUSH
37549: LD_INT 50
37551: PUSH
37552: LD_INT 60
37554: PUSH
37555: LD_INT 70
37557: PUSH
37558: LD_INT 80
37560: PUSH
37561: LD_INT 90
37563: PUSH
37564: LD_INT 100
37566: PUSH
37567: LD_INT 110
37569: PUSH
37570: LD_INT 120
37572: PUSH
37573: LD_INT 130
37575: PUSH
37576: LD_INT 140
37578: PUSH
37579: LD_INT 150
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 1
37601: PPUSH
37602: LD_INT 15
37604: PPUSH
37605: CALL_OW 12
37609: ARRAY
37610: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37611: LD_ADDR_VAR 0 4
37615: PUSH
37616: LD_INT 10
37618: PUSH
37619: LD_INT 20
37621: PUSH
37622: LD_INT 30
37624: PUSH
37625: LD_INT 40
37627: PUSH
37628: LD_INT 50
37630: PUSH
37631: LD_INT 60
37633: PUSH
37634: LD_INT 70
37636: PUSH
37637: LD_INT 80
37639: PUSH
37640: LD_INT 90
37642: PUSH
37643: LD_INT 100
37645: PUSH
37646: LD_INT 110
37648: PUSH
37649: LD_INT 120
37651: PUSH
37652: LD_INT 130
37654: PUSH
37655: LD_INT 140
37657: PUSH
37658: LD_INT 150
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: PPUSH
37681: LD_INT 15
37683: PPUSH
37684: CALL_OW 12
37688: ARRAY
37689: ST_TO_ADDR
// if ValidHex ( x , y ) then
37690: LD_VAR 0 3
37694: PPUSH
37695: LD_VAR 0 4
37699: PPUSH
37700: CALL_OW 488
37704: IFFALSE 37727
// begin result := [ x , y ] ;
37706: LD_ADDR_VAR 0 1
37710: PUSH
37711: LD_VAR 0 3
37715: PUSH
37716: LD_VAR 0 4
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: ST_TO_ADDR
// break ;
37725: GO 37729
// end ; end ;
37727: GO 37529
37729: POP
37730: POP
// if result then
37731: LD_VAR 0 1
37735: IFFALSE 37795
// begin ToLua ( playSibBomb() ) ;
37737: LD_STRING playSibBomb()
37739: PPUSH
37740: CALL_OW 559
// wait ( 0 0$14 ) ;
37744: LD_INT 490
37746: PPUSH
37747: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
37751: LD_VAR 0 1
37755: PUSH
37756: LD_INT 1
37758: ARRAY
37759: PPUSH
37760: LD_VAR 0 1
37764: PUSH
37765: LD_INT 2
37767: ARRAY
37768: PPUSH
37769: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
37773: LD_VAR 0 1
37777: PUSH
37778: LD_INT 1
37780: ARRAY
37781: PPUSH
37782: LD_VAR 0 1
37786: PUSH
37787: LD_INT 2
37789: ARRAY
37790: PPUSH
37791: CALL_OW 429
// end ; end ;
37795: LD_VAR 0 1
37799: RET
// every 0 0$1 trigger StreamModeActive and sReset do
37800: LD_EXP 89
37804: PUSH
37805: LD_EXP 111
37809: AND
37810: IFFALSE 37822
37812: GO 37814
37814: DISABLE
// YouLost (  ) ;
37815: LD_STRING 
37817: PPUSH
37818: CALL_OW 104
37822: END
// every 0 0$1 trigger StreamModeActive and sFog do
37823: LD_EXP 89
37827: PUSH
37828: LD_EXP 110
37832: AND
37833: IFFALSE 37847
37835: GO 37837
37837: DISABLE
// FogOff ( your_side ) ;
37838: LD_OWVAR 2
37842: PPUSH
37843: CALL_OW 344
37847: END
// every 0 0$1 trigger StreamModeActive and sSun do
37848: LD_EXP 89
37852: PUSH
37853: LD_EXP 112
37857: AND
37858: IFFALSE 37886
37860: GO 37862
37862: DISABLE
// begin solar_recharge_percent := 0 ;
37863: LD_ADDR_OWVAR 79
37867: PUSH
37868: LD_INT 0
37870: ST_TO_ADDR
// wait ( 5 5$00 ) ;
37871: LD_INT 10500
37873: PPUSH
37874: CALL_OW 67
// solar_recharge_percent := 100 ;
37878: LD_ADDR_OWVAR 79
37882: PUSH
37883: LD_INT 100
37885: ST_TO_ADDR
// end ;
37886: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
37887: LD_EXP 89
37891: PUSH
37892: LD_EXP 113
37896: AND
37897: IFFALSE 38136
37899: GO 37901
37901: DISABLE
37902: LD_INT 0
37904: PPUSH
37905: PPUSH
37906: PPUSH
// begin tmp := [ ] ;
37907: LD_ADDR_VAR 0 3
37911: PUSH
37912: EMPTY
37913: ST_TO_ADDR
// for i := 1 to 6 do
37914: LD_ADDR_VAR 0 1
37918: PUSH
37919: DOUBLE
37920: LD_INT 1
37922: DEC
37923: ST_TO_ADDR
37924: LD_INT 6
37926: PUSH
37927: FOR_TO
37928: IFFALSE 38033
// begin uc_nation := nation_nature ;
37930: LD_ADDR_OWVAR 21
37934: PUSH
37935: LD_INT 0
37937: ST_TO_ADDR
// uc_side := 0 ;
37938: LD_ADDR_OWVAR 20
37942: PUSH
37943: LD_INT 0
37945: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37946: LD_ADDR_OWVAR 29
37950: PUSH
37951: LD_INT 12
37953: PUSH
37954: LD_INT 12
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: ST_TO_ADDR
// hc_agressivity := 20 ;
37961: LD_ADDR_OWVAR 35
37965: PUSH
37966: LD_INT 20
37968: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
37969: LD_ADDR_OWVAR 28
37973: PUSH
37974: LD_INT 17
37976: ST_TO_ADDR
// hc_gallery :=  ;
37977: LD_ADDR_OWVAR 33
37981: PUSH
37982: LD_STRING 
37984: ST_TO_ADDR
// hc_name :=  ;
37985: LD_ADDR_OWVAR 26
37989: PUSH
37990: LD_STRING 
37992: ST_TO_ADDR
// un := CreateHuman ;
37993: LD_ADDR_VAR 0 2
37997: PUSH
37998: CALL_OW 44
38002: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
38003: LD_VAR 0 2
38007: PPUSH
38008: LD_INT 1
38010: PPUSH
38011: CALL_OW 51
// tmp := tmp ^ un ;
38015: LD_ADDR_VAR 0 3
38019: PUSH
38020: LD_VAR 0 3
38024: PUSH
38025: LD_VAR 0 2
38029: ADD
38030: ST_TO_ADDR
// end ;
38031: GO 37927
38033: POP
38034: POP
// repeat wait ( 0 0$1 ) ;
38035: LD_INT 35
38037: PPUSH
38038: CALL_OW 67
// for un in tmp do
38042: LD_ADDR_VAR 0 2
38046: PUSH
38047: LD_VAR 0 3
38051: PUSH
38052: FOR_IN
38053: IFFALSE 38127
// begin if IsDead ( un ) then
38055: LD_VAR 0 2
38059: PPUSH
38060: CALL_OW 301
38064: IFFALSE 38084
// begin tmp := tmp diff un ;
38066: LD_ADDR_VAR 0 3
38070: PUSH
38071: LD_VAR 0 3
38075: PUSH
38076: LD_VAR 0 2
38080: DIFF
38081: ST_TO_ADDR
// continue ;
38082: GO 38052
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
38084: LD_VAR 0 2
38088: PPUSH
38089: LD_INT 3
38091: PUSH
38092: LD_INT 22
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PPUSH
38106: CALL_OW 69
38110: PPUSH
38111: LD_VAR 0 2
38115: PPUSH
38116: CALL_OW 74
38120: PPUSH
38121: CALL_OW 115
// end ;
38125: GO 38052
38127: POP
38128: POP
// until not tmp ;
38129: LD_VAR 0 3
38133: NOT
38134: IFFALSE 38035
// end ;
38136: PPOPN 3
38138: END
// every 0 0$1 trigger StreamModeActive and sTroll do
38139: LD_EXP 89
38143: PUSH
38144: LD_EXP 114
38148: AND
38149: IFFALSE 38203
38151: GO 38153
38153: DISABLE
// begin ToLua ( displayTroll(); ) ;
38154: LD_STRING displayTroll();
38156: PPUSH
38157: CALL_OW 559
// wait ( 3 3$00 ) ;
38161: LD_INT 6300
38163: PPUSH
38164: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38168: LD_STRING hideTroll();
38170: PPUSH
38171: CALL_OW 559
// wait ( 1 1$00 ) ;
38175: LD_INT 2100
38177: PPUSH
38178: CALL_OW 67
// ToLua ( displayTroll(); ) ;
38182: LD_STRING displayTroll();
38184: PPUSH
38185: CALL_OW 559
// wait ( 1 1$00 ) ;
38189: LD_INT 2100
38191: PPUSH
38192: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38196: LD_STRING hideTroll();
38198: PPUSH
38199: CALL_OW 559
// end ;
38203: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
38204: LD_EXP 89
38208: PUSH
38209: LD_EXP 115
38213: AND
38214: IFFALSE 38277
38216: GO 38218
38218: DISABLE
38219: LD_INT 0
38221: PPUSH
// begin p := 0 ;
38222: LD_ADDR_VAR 0 1
38226: PUSH
38227: LD_INT 0
38229: ST_TO_ADDR
// repeat game_speed := 1 ;
38230: LD_ADDR_OWVAR 65
38234: PUSH
38235: LD_INT 1
38237: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38238: LD_INT 35
38240: PPUSH
38241: CALL_OW 67
// p := p + 1 ;
38245: LD_ADDR_VAR 0 1
38249: PUSH
38250: LD_VAR 0 1
38254: PUSH
38255: LD_INT 1
38257: PLUS
38258: ST_TO_ADDR
// until p >= 60 ;
38259: LD_VAR 0 1
38263: PUSH
38264: LD_INT 60
38266: GREATEREQUAL
38267: IFFALSE 38230
// game_speed := 4 ;
38269: LD_ADDR_OWVAR 65
38273: PUSH
38274: LD_INT 4
38276: ST_TO_ADDR
// end ;
38277: PPOPN 1
38279: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
38280: LD_EXP 89
38284: PUSH
38285: LD_EXP 116
38289: AND
38290: IFFALSE 38436
38292: GO 38294
38294: DISABLE
38295: LD_INT 0
38297: PPUSH
38298: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38299: LD_ADDR_VAR 0 1
38303: PUSH
38304: LD_INT 22
38306: PUSH
38307: LD_OWVAR 2
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 2
38318: PUSH
38319: LD_INT 30
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 30
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: LIST
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PPUSH
38348: CALL_OW 69
38352: ST_TO_ADDR
// if not depot then
38353: LD_VAR 0 1
38357: NOT
38358: IFFALSE 38362
// exit ;
38360: GO 38436
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
38362: LD_ADDR_VAR 0 2
38366: PUSH
38367: LD_VAR 0 1
38371: PUSH
38372: LD_INT 1
38374: PPUSH
38375: LD_VAR 0 1
38379: PPUSH
38380: CALL_OW 12
38384: ARRAY
38385: PPUSH
38386: CALL_OW 274
38390: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
38391: LD_VAR 0 2
38395: PPUSH
38396: LD_INT 1
38398: PPUSH
38399: LD_INT 0
38401: PPUSH
38402: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
38406: LD_VAR 0 2
38410: PPUSH
38411: LD_INT 2
38413: PPUSH
38414: LD_INT 0
38416: PPUSH
38417: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
38421: LD_VAR 0 2
38425: PPUSH
38426: LD_INT 3
38428: PPUSH
38429: LD_INT 0
38431: PPUSH
38432: CALL_OW 277
// end ;
38436: PPOPN 2
38438: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
38439: LD_EXP 89
38443: PUSH
38444: LD_EXP 117
38448: AND
38449: IFFALSE 38546
38451: GO 38453
38453: DISABLE
38454: LD_INT 0
38456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38457: LD_ADDR_VAR 0 1
38461: PUSH
38462: LD_INT 22
38464: PUSH
38465: LD_OWVAR 2
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 21
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 3
38486: PUSH
38487: LD_INT 23
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: LIST
38505: PPUSH
38506: CALL_OW 69
38510: ST_TO_ADDR
// if not tmp then
38511: LD_VAR 0 1
38515: NOT
38516: IFFALSE 38520
// exit ;
38518: GO 38546
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
38520: LD_VAR 0 1
38524: PUSH
38525: LD_INT 1
38527: PPUSH
38528: LD_VAR 0 1
38532: PPUSH
38533: CALL_OW 12
38537: ARRAY
38538: PPUSH
38539: LD_INT 200
38541: PPUSH
38542: CALL_OW 234
// end ;
38546: PPOPN 1
38548: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
38549: LD_EXP 89
38553: PUSH
38554: LD_EXP 118
38558: AND
38559: IFFALSE 38638
38561: GO 38563
38563: DISABLE
38564: LD_INT 0
38566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
38567: LD_ADDR_VAR 0 1
38571: PUSH
38572: LD_INT 22
38574: PUSH
38575: LD_OWVAR 2
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 21
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PPUSH
38598: CALL_OW 69
38602: ST_TO_ADDR
// if not tmp then
38603: LD_VAR 0 1
38607: NOT
38608: IFFALSE 38612
// exit ;
38610: GO 38638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
38612: LD_VAR 0 1
38616: PUSH
38617: LD_INT 1
38619: PPUSH
38620: LD_VAR 0 1
38624: PPUSH
38625: CALL_OW 12
38629: ARRAY
38630: PPUSH
38631: LD_INT 60
38633: PPUSH
38634: CALL_OW 234
// end ;
38638: PPOPN 1
38640: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
38641: LD_EXP 89
38645: PUSH
38646: LD_EXP 119
38650: AND
38651: IFFALSE 38750
38653: GO 38655
38655: DISABLE
38656: LD_INT 0
38658: PPUSH
38659: PPUSH
// begin enable ;
38660: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
38661: LD_ADDR_VAR 0 1
38665: PUSH
38666: LD_INT 22
38668: PUSH
38669: LD_OWVAR 2
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 61
38680: PUSH
38681: EMPTY
38682: LIST
38683: PUSH
38684: LD_INT 33
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: LIST
38698: PPUSH
38699: CALL_OW 69
38703: ST_TO_ADDR
// if not tmp then
38704: LD_VAR 0 1
38708: NOT
38709: IFFALSE 38713
// exit ;
38711: GO 38750
// for i in tmp do
38713: LD_ADDR_VAR 0 2
38717: PUSH
38718: LD_VAR 0 1
38722: PUSH
38723: FOR_IN
38724: IFFALSE 38748
// if IsControledBy ( i ) then
38726: LD_VAR 0 2
38730: PPUSH
38731: CALL_OW 312
38735: IFFALSE 38746
// ComUnlink ( i ) ;
38737: LD_VAR 0 2
38741: PPUSH
38742: CALL_OW 136
38746: GO 38723
38748: POP
38749: POP
// end ;
38750: PPOPN 2
38752: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
38753: LD_EXP 89
38757: PUSH
38758: LD_EXP 120
38762: AND
38763: IFFALSE 38903
38765: GO 38767
38767: DISABLE
38768: LD_INT 0
38770: PPUSH
38771: PPUSH
// begin ToLua ( displayPowell(); ) ;
38772: LD_STRING displayPowell();
38774: PPUSH
38775: CALL_OW 559
// uc_side := 0 ;
38779: LD_ADDR_OWVAR 20
38783: PUSH
38784: LD_INT 0
38786: ST_TO_ADDR
// uc_nation := 2 ;
38787: LD_ADDR_OWVAR 21
38791: PUSH
38792: LD_INT 2
38794: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
38795: LD_ADDR_OWVAR 37
38799: PUSH
38800: LD_INT 14
38802: ST_TO_ADDR
// vc_engine := engine_siberite ;
38803: LD_ADDR_OWVAR 39
38807: PUSH
38808: LD_INT 3
38810: ST_TO_ADDR
// vc_control := control_apeman ;
38811: LD_ADDR_OWVAR 38
38815: PUSH
38816: LD_INT 5
38818: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
38819: LD_ADDR_OWVAR 40
38823: PUSH
38824: LD_INT 29
38826: ST_TO_ADDR
// un := CreateVehicle ;
38827: LD_ADDR_VAR 0 2
38831: PUSH
38832: CALL_OW 45
38836: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38837: LD_VAR 0 2
38841: PPUSH
38842: LD_INT 1
38844: PPUSH
38845: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
38849: LD_INT 35
38851: PPUSH
38852: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
38856: LD_VAR 0 2
38860: PPUSH
38861: LD_INT 22
38863: PUSH
38864: LD_OWVAR 2
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PPUSH
38873: CALL_OW 69
38877: PPUSH
38878: LD_VAR 0 2
38882: PPUSH
38883: CALL_OW 74
38887: PPUSH
38888: CALL_OW 115
// until IsDead ( un ) ;
38892: LD_VAR 0 2
38896: PPUSH
38897: CALL_OW 301
38901: IFFALSE 38849
// end ;
38903: PPOPN 2
38905: END
// every 0 0$1 trigger StreamModeActive and sStu do
38906: LD_EXP 89
38910: PUSH
38911: LD_EXP 128
38915: AND
38916: IFFALSE 38932
38918: GO 38920
38920: DISABLE
// begin ToLua ( displayStucuk(); ) ;
38921: LD_STRING displayStucuk();
38923: PPUSH
38924: CALL_OW 559
// ResetFog ;
38928: CALL_OW 335
// end ;
38932: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
38933: LD_EXP 89
38937: PUSH
38938: LD_EXP 121
38942: AND
38943: IFFALSE 39084
38945: GO 38947
38947: DISABLE
38948: LD_INT 0
38950: PPUSH
38951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38952: LD_ADDR_VAR 0 2
38956: PUSH
38957: LD_INT 22
38959: PUSH
38960: LD_OWVAR 2
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 21
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PPUSH
38983: CALL_OW 69
38987: ST_TO_ADDR
// if not tmp then
38988: LD_VAR 0 2
38992: NOT
38993: IFFALSE 38997
// exit ;
38995: GO 39084
// un := tmp [ rand ( 1 , tmp ) ] ;
38997: LD_ADDR_VAR 0 1
39001: PUSH
39002: LD_VAR 0 2
39006: PUSH
39007: LD_INT 1
39009: PPUSH
39010: LD_VAR 0 2
39014: PPUSH
39015: CALL_OW 12
39019: ARRAY
39020: ST_TO_ADDR
// SetSide ( un , 0 ) ;
39021: LD_VAR 0 1
39025: PPUSH
39026: LD_INT 0
39028: PPUSH
39029: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
39033: LD_VAR 0 1
39037: PPUSH
39038: LD_OWVAR 3
39042: PUSH
39043: LD_VAR 0 1
39047: DIFF
39048: PPUSH
39049: LD_VAR 0 1
39053: PPUSH
39054: CALL_OW 74
39058: PPUSH
39059: CALL_OW 115
// wait ( 0 0$20 ) ;
39063: LD_INT 700
39065: PPUSH
39066: CALL_OW 67
// SetSide ( un , your_side ) ;
39070: LD_VAR 0 1
39074: PPUSH
39075: LD_OWVAR 2
39079: PPUSH
39080: CALL_OW 235
// end ;
39084: PPOPN 2
39086: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
39087: LD_EXP 89
39091: PUSH
39092: LD_EXP 122
39096: AND
39097: IFFALSE 39203
39099: GO 39101
39101: DISABLE
39102: LD_INT 0
39104: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39105: LD_ADDR_VAR 0 1
39109: PUSH
39110: LD_INT 22
39112: PUSH
39113: LD_OWVAR 2
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: LD_INT 30
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 30
39137: PUSH
39138: LD_INT 1
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: LIST
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PPUSH
39154: CALL_OW 69
39158: ST_TO_ADDR
// if not depot then
39159: LD_VAR 0 1
39163: NOT
39164: IFFALSE 39168
// exit ;
39166: GO 39203
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
39168: LD_VAR 0 1
39172: PUSH
39173: LD_INT 1
39175: ARRAY
39176: PPUSH
39177: CALL_OW 250
39181: PPUSH
39182: LD_VAR 0 1
39186: PUSH
39187: LD_INT 1
39189: ARRAY
39190: PPUSH
39191: CALL_OW 251
39195: PPUSH
39196: LD_INT 70
39198: PPUSH
39199: CALL_OW 495
// end ;
39203: PPOPN 1
39205: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
39206: LD_EXP 89
39210: PUSH
39211: LD_EXP 123
39215: AND
39216: IFFALSE 39427
39218: GO 39220
39220: DISABLE
39221: LD_INT 0
39223: PPUSH
39224: PPUSH
39225: PPUSH
39226: PPUSH
39227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39228: LD_ADDR_VAR 0 5
39232: PUSH
39233: LD_INT 22
39235: PUSH
39236: LD_OWVAR 2
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 21
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PPUSH
39259: CALL_OW 69
39263: ST_TO_ADDR
// if not tmp then
39264: LD_VAR 0 5
39268: NOT
39269: IFFALSE 39273
// exit ;
39271: GO 39427
// for i in tmp do
39273: LD_ADDR_VAR 0 1
39277: PUSH
39278: LD_VAR 0 5
39282: PUSH
39283: FOR_IN
39284: IFFALSE 39425
// begin d := rand ( 0 , 5 ) ;
39286: LD_ADDR_VAR 0 4
39290: PUSH
39291: LD_INT 0
39293: PPUSH
39294: LD_INT 5
39296: PPUSH
39297: CALL_OW 12
39301: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
39302: LD_ADDR_VAR 0 2
39306: PUSH
39307: LD_VAR 0 1
39311: PPUSH
39312: CALL_OW 250
39316: PPUSH
39317: LD_VAR 0 4
39321: PPUSH
39322: LD_INT 3
39324: PPUSH
39325: LD_INT 12
39327: PPUSH
39328: CALL_OW 12
39332: PPUSH
39333: CALL_OW 272
39337: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
39338: LD_ADDR_VAR 0 3
39342: PUSH
39343: LD_VAR 0 1
39347: PPUSH
39348: CALL_OW 251
39352: PPUSH
39353: LD_VAR 0 4
39357: PPUSH
39358: LD_INT 3
39360: PPUSH
39361: LD_INT 12
39363: PPUSH
39364: CALL_OW 12
39368: PPUSH
39369: CALL_OW 273
39373: ST_TO_ADDR
// if ValidHex ( x , y ) then
39374: LD_VAR 0 2
39378: PPUSH
39379: LD_VAR 0 3
39383: PPUSH
39384: CALL_OW 488
39388: IFFALSE 39423
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
39390: LD_VAR 0 1
39394: PPUSH
39395: LD_VAR 0 2
39399: PPUSH
39400: LD_VAR 0 3
39404: PPUSH
39405: LD_INT 3
39407: PPUSH
39408: LD_INT 6
39410: PPUSH
39411: CALL_OW 12
39415: PPUSH
39416: LD_INT 1
39418: PPUSH
39419: CALL_OW 483
// end ;
39423: GO 39283
39425: POP
39426: POP
// end ;
39427: PPOPN 5
39429: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
39430: LD_EXP 89
39434: PUSH
39435: LD_EXP 124
39439: AND
39440: IFFALSE 39534
39442: GO 39444
39444: DISABLE
39445: LD_INT 0
39447: PPUSH
39448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
39449: LD_ADDR_VAR 0 2
39453: PUSH
39454: LD_INT 22
39456: PUSH
39457: LD_OWVAR 2
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 32
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 21
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: LIST
39490: PPUSH
39491: CALL_OW 69
39495: ST_TO_ADDR
// if not tmp then
39496: LD_VAR 0 2
39500: NOT
39501: IFFALSE 39505
// exit ;
39503: GO 39534
// for i in tmp do
39505: LD_ADDR_VAR 0 1
39509: PUSH
39510: LD_VAR 0 2
39514: PUSH
39515: FOR_IN
39516: IFFALSE 39532
// SetFuel ( i , 0 ) ;
39518: LD_VAR 0 1
39522: PPUSH
39523: LD_INT 0
39525: PPUSH
39526: CALL_OW 240
39530: GO 39515
39532: POP
39533: POP
// end ;
39534: PPOPN 2
39536: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
39537: LD_EXP 89
39541: PUSH
39542: LD_EXP 125
39546: AND
39547: IFFALSE 39613
39549: GO 39551
39551: DISABLE
39552: LD_INT 0
39554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39555: LD_ADDR_VAR 0 1
39559: PUSH
39560: LD_INT 22
39562: PUSH
39563: LD_OWVAR 2
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 30
39574: PUSH
39575: LD_INT 29
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PPUSH
39586: CALL_OW 69
39590: ST_TO_ADDR
// if not tmp then
39591: LD_VAR 0 1
39595: NOT
39596: IFFALSE 39600
// exit ;
39598: GO 39613
// DestroyUnit ( tmp [ 1 ] ) ;
39600: LD_VAR 0 1
39604: PUSH
39605: LD_INT 1
39607: ARRAY
39608: PPUSH
39609: CALL_OW 65
// end ;
39613: PPOPN 1
39615: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
39616: LD_EXP 89
39620: PUSH
39621: LD_EXP 127
39625: AND
39626: IFFALSE 39755
39628: GO 39630
39630: DISABLE
39631: LD_INT 0
39633: PPUSH
// begin uc_side := 0 ;
39634: LD_ADDR_OWVAR 20
39638: PUSH
39639: LD_INT 0
39641: ST_TO_ADDR
// uc_nation := nation_arabian ;
39642: LD_ADDR_OWVAR 21
39646: PUSH
39647: LD_INT 2
39649: ST_TO_ADDR
// hc_gallery :=  ;
39650: LD_ADDR_OWVAR 33
39654: PUSH
39655: LD_STRING 
39657: ST_TO_ADDR
// hc_name :=  ;
39658: LD_ADDR_OWVAR 26
39662: PUSH
39663: LD_STRING 
39665: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
39666: LD_INT 1
39668: PPUSH
39669: LD_INT 11
39671: PPUSH
39672: LD_INT 10
39674: PPUSH
39675: CALL_OW 380
// un := CreateHuman ;
39679: LD_ADDR_VAR 0 1
39683: PUSH
39684: CALL_OW 44
39688: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39689: LD_VAR 0 1
39693: PPUSH
39694: LD_INT 1
39696: PPUSH
39697: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39701: LD_INT 35
39703: PPUSH
39704: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39708: LD_VAR 0 1
39712: PPUSH
39713: LD_INT 22
39715: PUSH
39716: LD_OWVAR 2
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PPUSH
39725: CALL_OW 69
39729: PPUSH
39730: LD_VAR 0 1
39734: PPUSH
39735: CALL_OW 74
39739: PPUSH
39740: CALL_OW 115
// until IsDead ( un ) ;
39744: LD_VAR 0 1
39748: PPUSH
39749: CALL_OW 301
39753: IFFALSE 39701
// end ;
39755: PPOPN 1
39757: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
39758: LD_EXP 89
39762: PUSH
39763: LD_EXP 129
39767: AND
39768: IFFALSE 39780
39770: GO 39772
39772: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
39773: LD_STRING earthquake(getX(game), 0, 32)
39775: PPUSH
39776: CALL_OW 559
39780: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
39781: LD_EXP 89
39785: PUSH
39786: LD_EXP 130
39790: AND
39791: IFFALSE 39882
39793: GO 39795
39795: DISABLE
39796: LD_INT 0
39798: PPUSH
// begin enable ;
39799: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
39800: LD_ADDR_VAR 0 1
39804: PUSH
39805: LD_INT 22
39807: PUSH
39808: LD_OWVAR 2
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 21
39819: PUSH
39820: LD_INT 2
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 33
39829: PUSH
39830: LD_INT 3
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: LIST
39841: PPUSH
39842: CALL_OW 69
39846: ST_TO_ADDR
// if not tmp then
39847: LD_VAR 0 1
39851: NOT
39852: IFFALSE 39856
// exit ;
39854: GO 39882
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
39856: LD_VAR 0 1
39860: PUSH
39861: LD_INT 1
39863: PPUSH
39864: LD_VAR 0 1
39868: PPUSH
39869: CALL_OW 12
39873: ARRAY
39874: PPUSH
39875: LD_INT 1
39877: PPUSH
39878: CALL_OW 234
// end ;
39882: PPOPN 1
39884: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
39885: LD_EXP 89
39889: PUSH
39890: LD_EXP 131
39894: AND
39895: IFFALSE 40036
39897: GO 39899
39899: DISABLE
39900: LD_INT 0
39902: PPUSH
39903: PPUSH
39904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39905: LD_ADDR_VAR 0 3
39909: PUSH
39910: LD_INT 22
39912: PUSH
39913: LD_OWVAR 2
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 25
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PPUSH
39936: CALL_OW 69
39940: ST_TO_ADDR
// if not tmp then
39941: LD_VAR 0 3
39945: NOT
39946: IFFALSE 39950
// exit ;
39948: GO 40036
// un := tmp [ rand ( 1 , tmp ) ] ;
39950: LD_ADDR_VAR 0 2
39954: PUSH
39955: LD_VAR 0 3
39959: PUSH
39960: LD_INT 1
39962: PPUSH
39963: LD_VAR 0 3
39967: PPUSH
39968: CALL_OW 12
39972: ARRAY
39973: ST_TO_ADDR
// if Crawls ( un ) then
39974: LD_VAR 0 2
39978: PPUSH
39979: CALL_OW 318
39983: IFFALSE 39994
// ComWalk ( un ) ;
39985: LD_VAR 0 2
39989: PPUSH
39990: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
39994: LD_VAR 0 2
39998: PPUSH
39999: LD_INT 9
40001: PPUSH
40002: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
40006: LD_INT 28
40008: PPUSH
40009: LD_OWVAR 2
40013: PPUSH
40014: LD_INT 2
40016: PPUSH
40017: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
40021: LD_INT 29
40023: PPUSH
40024: LD_OWVAR 2
40028: PPUSH
40029: LD_INT 2
40031: PPUSH
40032: CALL_OW 322
// end ;
40036: PPOPN 3
40038: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
40039: LD_EXP 89
40043: PUSH
40044: LD_EXP 132
40048: AND
40049: IFFALSE 40160
40051: GO 40053
40053: DISABLE
40054: LD_INT 0
40056: PPUSH
40057: PPUSH
40058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40059: LD_ADDR_VAR 0 3
40063: PUSH
40064: LD_INT 22
40066: PUSH
40067: LD_OWVAR 2
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 25
40078: PUSH
40079: LD_INT 1
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PPUSH
40090: CALL_OW 69
40094: ST_TO_ADDR
// if not tmp then
40095: LD_VAR 0 3
40099: NOT
40100: IFFALSE 40104
// exit ;
40102: GO 40160
// un := tmp [ rand ( 1 , tmp ) ] ;
40104: LD_ADDR_VAR 0 2
40108: PUSH
40109: LD_VAR 0 3
40113: PUSH
40114: LD_INT 1
40116: PPUSH
40117: LD_VAR 0 3
40121: PPUSH
40122: CALL_OW 12
40126: ARRAY
40127: ST_TO_ADDR
// if Crawls ( un ) then
40128: LD_VAR 0 2
40132: PPUSH
40133: CALL_OW 318
40137: IFFALSE 40148
// ComWalk ( un ) ;
40139: LD_VAR 0 2
40143: PPUSH
40144: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40148: LD_VAR 0 2
40152: PPUSH
40153: LD_INT 8
40155: PPUSH
40156: CALL_OW 336
// end ;
40160: PPOPN 3
40162: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
40163: LD_EXP 89
40167: PUSH
40168: LD_EXP 133
40172: AND
40173: IFFALSE 40317
40175: GO 40177
40177: DISABLE
40178: LD_INT 0
40180: PPUSH
40181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
40182: LD_ADDR_VAR 0 2
40186: PUSH
40187: LD_INT 22
40189: PUSH
40190: LD_OWVAR 2
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 21
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: LD_INT 34
40214: PUSH
40215: LD_INT 12
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 34
40224: PUSH
40225: LD_INT 51
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 34
40234: PUSH
40235: LD_INT 32
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: PPUSH
40253: CALL_OW 69
40257: ST_TO_ADDR
// if not tmp then
40258: LD_VAR 0 2
40262: NOT
40263: IFFALSE 40267
// exit ;
40265: GO 40317
// for i in tmp do
40267: LD_ADDR_VAR 0 1
40271: PUSH
40272: LD_VAR 0 2
40276: PUSH
40277: FOR_IN
40278: IFFALSE 40315
// if GetCargo ( i , mat_artifact ) = 0 then
40280: LD_VAR 0 1
40284: PPUSH
40285: LD_INT 4
40287: PPUSH
40288: CALL_OW 289
40292: PUSH
40293: LD_INT 0
40295: EQUAL
40296: IFFALSE 40313
// SetCargo ( i , mat_siberit , 100 ) ;
40298: LD_VAR 0 1
40302: PPUSH
40303: LD_INT 3
40305: PPUSH
40306: LD_INT 100
40308: PPUSH
40309: CALL_OW 290
40313: GO 40277
40315: POP
40316: POP
// end ;
40317: PPOPN 2
40319: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
40320: LD_EXP 89
40324: PUSH
40325: LD_EXP 134
40329: AND
40330: IFFALSE 40513
40332: GO 40334
40334: DISABLE
40335: LD_INT 0
40337: PPUSH
40338: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40339: LD_ADDR_VAR 0 2
40343: PUSH
40344: LD_INT 22
40346: PUSH
40347: LD_OWVAR 2
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PPUSH
40356: CALL_OW 69
40360: ST_TO_ADDR
// if not tmp then
40361: LD_VAR 0 2
40365: NOT
40366: IFFALSE 40370
// exit ;
40368: GO 40513
// for i := 1 to 2 do
40370: LD_ADDR_VAR 0 1
40374: PUSH
40375: DOUBLE
40376: LD_INT 1
40378: DEC
40379: ST_TO_ADDR
40380: LD_INT 2
40382: PUSH
40383: FOR_TO
40384: IFFALSE 40511
// begin uc_side := your_side ;
40386: LD_ADDR_OWVAR 20
40390: PUSH
40391: LD_OWVAR 2
40395: ST_TO_ADDR
// uc_nation := nation_american ;
40396: LD_ADDR_OWVAR 21
40400: PUSH
40401: LD_INT 1
40403: ST_TO_ADDR
// vc_chassis := us_morphling ;
40404: LD_ADDR_OWVAR 37
40408: PUSH
40409: LD_INT 5
40411: ST_TO_ADDR
// vc_engine := engine_siberite ;
40412: LD_ADDR_OWVAR 39
40416: PUSH
40417: LD_INT 3
40419: ST_TO_ADDR
// vc_control := control_computer ;
40420: LD_ADDR_OWVAR 38
40424: PUSH
40425: LD_INT 3
40427: ST_TO_ADDR
// vc_weapon := us_double_laser ;
40428: LD_ADDR_OWVAR 40
40432: PUSH
40433: LD_INT 10
40435: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
40436: LD_VAR 0 2
40440: PUSH
40441: LD_INT 1
40443: ARRAY
40444: PPUSH
40445: CALL_OW 310
40449: NOT
40450: IFFALSE 40497
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
40452: CALL_OW 45
40456: PPUSH
40457: LD_VAR 0 2
40461: PUSH
40462: LD_INT 1
40464: ARRAY
40465: PPUSH
40466: CALL_OW 250
40470: PPUSH
40471: LD_VAR 0 2
40475: PUSH
40476: LD_INT 1
40478: ARRAY
40479: PPUSH
40480: CALL_OW 251
40484: PPUSH
40485: LD_INT 12
40487: PPUSH
40488: LD_INT 1
40490: PPUSH
40491: CALL_OW 50
40495: GO 40509
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
40497: CALL_OW 45
40501: PPUSH
40502: LD_INT 1
40504: PPUSH
40505: CALL_OW 51
// end ;
40509: GO 40383
40511: POP
40512: POP
// end ;
40513: PPOPN 2
40515: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
40516: LD_EXP 89
40520: PUSH
40521: LD_EXP 135
40525: AND
40526: IFFALSE 40748
40528: GO 40530
40530: DISABLE
40531: LD_INT 0
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40539: LD_ADDR_VAR 0 6
40543: PUSH
40544: LD_INT 22
40546: PUSH
40547: LD_OWVAR 2
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 21
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 3
40568: PUSH
40569: LD_INT 23
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: LIST
40587: PPUSH
40588: CALL_OW 69
40592: ST_TO_ADDR
// if not tmp then
40593: LD_VAR 0 6
40597: NOT
40598: IFFALSE 40602
// exit ;
40600: GO 40748
// s1 := rand ( 1 , 4 ) ;
40602: LD_ADDR_VAR 0 2
40606: PUSH
40607: LD_INT 1
40609: PPUSH
40610: LD_INT 4
40612: PPUSH
40613: CALL_OW 12
40617: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
40618: LD_ADDR_VAR 0 4
40622: PUSH
40623: LD_VAR 0 6
40627: PUSH
40628: LD_INT 1
40630: ARRAY
40631: PPUSH
40632: LD_VAR 0 2
40636: PPUSH
40637: CALL_OW 259
40641: ST_TO_ADDR
// if s1 = 1 then
40642: LD_VAR 0 2
40646: PUSH
40647: LD_INT 1
40649: EQUAL
40650: IFFALSE 40670
// s2 := rand ( 2 , 4 ) else
40652: LD_ADDR_VAR 0 3
40656: PUSH
40657: LD_INT 2
40659: PPUSH
40660: LD_INT 4
40662: PPUSH
40663: CALL_OW 12
40667: ST_TO_ADDR
40668: GO 40678
// s2 := 1 ;
40670: LD_ADDR_VAR 0 3
40674: PUSH
40675: LD_INT 1
40677: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
40678: LD_ADDR_VAR 0 5
40682: PUSH
40683: LD_VAR 0 6
40687: PUSH
40688: LD_INT 1
40690: ARRAY
40691: PPUSH
40692: LD_VAR 0 3
40696: PPUSH
40697: CALL_OW 259
40701: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
40702: LD_VAR 0 6
40706: PUSH
40707: LD_INT 1
40709: ARRAY
40710: PPUSH
40711: LD_VAR 0 2
40715: PPUSH
40716: LD_VAR 0 5
40720: PPUSH
40721: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
40725: LD_VAR 0 6
40729: PUSH
40730: LD_INT 1
40732: ARRAY
40733: PPUSH
40734: LD_VAR 0 3
40738: PPUSH
40739: LD_VAR 0 4
40743: PPUSH
40744: CALL_OW 237
// end ;
40748: PPOPN 6
40750: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
40751: LD_EXP 89
40755: PUSH
40756: LD_EXP 136
40760: AND
40761: IFFALSE 40840
40763: GO 40765
40765: DISABLE
40766: LD_INT 0
40768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
40769: LD_ADDR_VAR 0 1
40773: PUSH
40774: LD_INT 22
40776: PUSH
40777: LD_OWVAR 2
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 30
40788: PUSH
40789: LD_INT 3
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PPUSH
40800: CALL_OW 69
40804: ST_TO_ADDR
// if not tmp then
40805: LD_VAR 0 1
40809: NOT
40810: IFFALSE 40814
// exit ;
40812: GO 40840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40814: LD_VAR 0 1
40818: PUSH
40819: LD_INT 1
40821: PPUSH
40822: LD_VAR 0 1
40826: PPUSH
40827: CALL_OW 12
40831: ARRAY
40832: PPUSH
40833: LD_INT 1
40835: PPUSH
40836: CALL_OW 234
// end ;
40840: PPOPN 1
40842: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
40843: LD_EXP 89
40847: PUSH
40848: LD_EXP 137
40852: AND
40853: IFFALSE 40965
40855: GO 40857
40857: DISABLE
40858: LD_INT 0
40860: PPUSH
40861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
40862: LD_ADDR_VAR 0 2
40866: PUSH
40867: LD_INT 22
40869: PUSH
40870: LD_OWVAR 2
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: LD_INT 30
40884: PUSH
40885: LD_INT 27
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 30
40894: PUSH
40895: LD_INT 26
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 30
40904: PUSH
40905: LD_INT 28
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PPUSH
40922: CALL_OW 69
40926: ST_TO_ADDR
// if not tmp then
40927: LD_VAR 0 2
40931: NOT
40932: IFFALSE 40936
// exit ;
40934: GO 40965
// for i in tmp do
40936: LD_ADDR_VAR 0 1
40940: PUSH
40941: LD_VAR 0 2
40945: PUSH
40946: FOR_IN
40947: IFFALSE 40963
// SetLives ( i , 1 ) ;
40949: LD_VAR 0 1
40953: PPUSH
40954: LD_INT 1
40956: PPUSH
40957: CALL_OW 234
40961: GO 40946
40963: POP
40964: POP
// end ;
40965: PPOPN 2
40967: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
40968: LD_EXP 89
40972: PUSH
40973: LD_EXP 138
40977: AND
40978: IFFALSE 41265
40980: GO 40982
40982: DISABLE
40983: LD_INT 0
40985: PPUSH
40986: PPUSH
40987: PPUSH
// begin i := rand ( 1 , 7 ) ;
40988: LD_ADDR_VAR 0 1
40992: PUSH
40993: LD_INT 1
40995: PPUSH
40996: LD_INT 7
40998: PPUSH
40999: CALL_OW 12
41003: ST_TO_ADDR
// case i of 1 :
41004: LD_VAR 0 1
41008: PUSH
41009: LD_INT 1
41011: DOUBLE
41012: EQUAL
41013: IFTRUE 41017
41015: GO 41027
41017: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
41018: LD_STRING earthquake(getX(game), 0, 32)
41020: PPUSH
41021: CALL_OW 559
41025: GO 41265
41027: LD_INT 2
41029: DOUBLE
41030: EQUAL
41031: IFTRUE 41035
41033: GO 41049
41035: POP
// begin ToLua ( displayStucuk(); ) ;
41036: LD_STRING displayStucuk();
41038: PPUSH
41039: CALL_OW 559
// ResetFog ;
41043: CALL_OW 335
// end ; 3 :
41047: GO 41265
41049: LD_INT 3
41051: DOUBLE
41052: EQUAL
41053: IFTRUE 41057
41055: GO 41161
41057: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41058: LD_ADDR_VAR 0 2
41062: PUSH
41063: LD_INT 22
41065: PUSH
41066: LD_OWVAR 2
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 25
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PPUSH
41089: CALL_OW 69
41093: ST_TO_ADDR
// if not tmp then
41094: LD_VAR 0 2
41098: NOT
41099: IFFALSE 41103
// exit ;
41101: GO 41265
// un := tmp [ rand ( 1 , tmp ) ] ;
41103: LD_ADDR_VAR 0 3
41107: PUSH
41108: LD_VAR 0 2
41112: PUSH
41113: LD_INT 1
41115: PPUSH
41116: LD_VAR 0 2
41120: PPUSH
41121: CALL_OW 12
41125: ARRAY
41126: ST_TO_ADDR
// if Crawls ( un ) then
41127: LD_VAR 0 3
41131: PPUSH
41132: CALL_OW 318
41136: IFFALSE 41147
// ComWalk ( un ) ;
41138: LD_VAR 0 3
41142: PPUSH
41143: CALL_OW 138
// SetClass ( un , class_mortar ) ;
41147: LD_VAR 0 3
41151: PPUSH
41152: LD_INT 8
41154: PPUSH
41155: CALL_OW 336
// end ; 4 :
41159: GO 41265
41161: LD_INT 4
41163: DOUBLE
41164: EQUAL
41165: IFTRUE 41169
41167: GO 41243
41169: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
41170: LD_ADDR_VAR 0 2
41174: PUSH
41175: LD_INT 22
41177: PUSH
41178: LD_OWVAR 2
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 30
41189: PUSH
41190: LD_INT 29
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PPUSH
41201: CALL_OW 69
41205: ST_TO_ADDR
// if not tmp then
41206: LD_VAR 0 2
41210: NOT
41211: IFFALSE 41215
// exit ;
41213: GO 41265
// CenterNowOnUnits ( tmp [ 1 ] ) ;
41215: LD_VAR 0 2
41219: PUSH
41220: LD_INT 1
41222: ARRAY
41223: PPUSH
41224: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
41228: LD_VAR 0 2
41232: PUSH
41233: LD_INT 1
41235: ARRAY
41236: PPUSH
41237: CALL_OW 65
// end ; 5 .. 7 :
41241: GO 41265
41243: LD_INT 5
41245: DOUBLE
41246: GREATEREQUAL
41247: IFFALSE 41255
41249: LD_INT 7
41251: DOUBLE
41252: LESSEQUAL
41253: IFTRUE 41257
41255: GO 41264
41257: POP
// StreamSibBomb ; end ;
41258: CALL 37502 0 0
41262: GO 41265
41264: POP
// end ;
41265: PPOPN 3
41267: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
41268: LD_EXP 89
41272: PUSH
41273: LD_EXP 139
41277: AND
41278: IFFALSE 41434
41280: GO 41282
41282: DISABLE
41283: LD_INT 0
41285: PPUSH
41286: PPUSH
41287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
41288: LD_ADDR_VAR 0 2
41292: PUSH
41293: LD_INT 81
41295: PUSH
41296: LD_OWVAR 2
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 2
41307: PUSH
41308: LD_INT 21
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 21
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: LIST
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PPUSH
41337: CALL_OW 69
41341: ST_TO_ADDR
// if not tmp then
41342: LD_VAR 0 2
41346: NOT
41347: IFFALSE 41351
// exit ;
41349: GO 41434
// p := 0 ;
41351: LD_ADDR_VAR 0 3
41355: PUSH
41356: LD_INT 0
41358: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41359: LD_INT 35
41361: PPUSH
41362: CALL_OW 67
// p := p + 1 ;
41366: LD_ADDR_VAR 0 3
41370: PUSH
41371: LD_VAR 0 3
41375: PUSH
41376: LD_INT 1
41378: PLUS
41379: ST_TO_ADDR
// for i in tmp do
41380: LD_ADDR_VAR 0 1
41384: PUSH
41385: LD_VAR 0 2
41389: PUSH
41390: FOR_IN
41391: IFFALSE 41422
// if GetLives ( i ) < 1000 then
41393: LD_VAR 0 1
41397: PPUSH
41398: CALL_OW 256
41402: PUSH
41403: LD_INT 1000
41405: LESS
41406: IFFALSE 41420
// SetLives ( i , 1000 ) ;
41408: LD_VAR 0 1
41412: PPUSH
41413: LD_INT 1000
41415: PPUSH
41416: CALL_OW 234
41420: GO 41390
41422: POP
41423: POP
// until p > 20 ;
41424: LD_VAR 0 3
41428: PUSH
41429: LD_INT 20
41431: GREATER
41432: IFFALSE 41359
// end ;
41434: PPOPN 3
41436: END
// every 0 0$1 trigger StreamModeActive and sTime do
41437: LD_EXP 89
41441: PUSH
41442: LD_EXP 140
41446: AND
41447: IFFALSE 41482
41449: GO 41451
41451: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
41452: LD_INT 28
41454: PPUSH
41455: LD_OWVAR 2
41459: PPUSH
41460: LD_INT 2
41462: PPUSH
41463: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
41467: LD_INT 30
41469: PPUSH
41470: LD_OWVAR 2
41474: PPUSH
41475: LD_INT 2
41477: PPUSH
41478: CALL_OW 322
// end ;
41482: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
41483: LD_EXP 89
41487: PUSH
41488: LD_EXP 141
41492: AND
41493: IFFALSE 41614
41495: GO 41497
41497: DISABLE
41498: LD_INT 0
41500: PPUSH
41501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
41502: LD_ADDR_VAR 0 2
41506: PUSH
41507: LD_INT 22
41509: PUSH
41510: LD_OWVAR 2
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 21
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 3
41531: PUSH
41532: LD_INT 23
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: LIST
41550: PPUSH
41551: CALL_OW 69
41555: ST_TO_ADDR
// if not tmp then
41556: LD_VAR 0 2
41560: NOT
41561: IFFALSE 41565
// exit ;
41563: GO 41614
// for i in tmp do
41565: LD_ADDR_VAR 0 1
41569: PUSH
41570: LD_VAR 0 2
41574: PUSH
41575: FOR_IN
41576: IFFALSE 41612
// begin if Crawls ( i ) then
41578: LD_VAR 0 1
41582: PPUSH
41583: CALL_OW 318
41587: IFFALSE 41598
// ComWalk ( i ) ;
41589: LD_VAR 0 1
41593: PPUSH
41594: CALL_OW 138
// SetClass ( i , 2 ) ;
41598: LD_VAR 0 1
41602: PPUSH
41603: LD_INT 2
41605: PPUSH
41606: CALL_OW 336
// end ;
41610: GO 41575
41612: POP
41613: POP
// end ;
41614: PPOPN 2
41616: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
41617: LD_EXP 89
41621: PUSH
41622: LD_EXP 142
41626: AND
41627: IFFALSE 41915
41629: GO 41631
41631: DISABLE
41632: LD_INT 0
41634: PPUSH
41635: PPUSH
41636: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
41637: LD_OWVAR 2
41641: PPUSH
41642: LD_INT 9
41644: PPUSH
41645: LD_INT 1
41647: PPUSH
41648: LD_INT 1
41650: PPUSH
41651: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
41655: LD_INT 9
41657: PPUSH
41658: LD_OWVAR 2
41662: PPUSH
41663: CALL_OW 343
// uc_side := 9 ;
41667: LD_ADDR_OWVAR 20
41671: PUSH
41672: LD_INT 9
41674: ST_TO_ADDR
// uc_nation := 2 ;
41675: LD_ADDR_OWVAR 21
41679: PUSH
41680: LD_INT 2
41682: ST_TO_ADDR
// hc_name := Dark Warrior ;
41683: LD_ADDR_OWVAR 26
41687: PUSH
41688: LD_STRING Dark Warrior
41690: ST_TO_ADDR
// hc_gallery :=  ;
41691: LD_ADDR_OWVAR 33
41695: PUSH
41696: LD_STRING 
41698: ST_TO_ADDR
// hc_noskilllimit := true ;
41699: LD_ADDR_OWVAR 76
41703: PUSH
41704: LD_INT 1
41706: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
41707: LD_ADDR_OWVAR 31
41711: PUSH
41712: LD_INT 30
41714: PUSH
41715: LD_INT 30
41717: PUSH
41718: LD_INT 30
41720: PUSH
41721: LD_INT 30
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: ST_TO_ADDR
// un := CreateHuman ;
41730: LD_ADDR_VAR 0 3
41734: PUSH
41735: CALL_OW 44
41739: ST_TO_ADDR
// hc_noskilllimit := false ;
41740: LD_ADDR_OWVAR 76
41744: PUSH
41745: LD_INT 0
41747: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
41748: LD_VAR 0 3
41752: PPUSH
41753: LD_INT 1
41755: PPUSH
41756: CALL_OW 51
// ToLua ( playRanger() ) ;
41760: LD_STRING playRanger()
41762: PPUSH
41763: CALL_OW 559
// p := 0 ;
41767: LD_ADDR_VAR 0 2
41771: PUSH
41772: LD_INT 0
41774: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41775: LD_INT 35
41777: PPUSH
41778: CALL_OW 67
// p := p + 1 ;
41782: LD_ADDR_VAR 0 2
41786: PUSH
41787: LD_VAR 0 2
41791: PUSH
41792: LD_INT 1
41794: PLUS
41795: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
41796: LD_VAR 0 3
41800: PPUSH
41801: CALL_OW 256
41805: PUSH
41806: LD_INT 1000
41808: LESS
41809: IFFALSE 41823
// SetLives ( un , 1000 ) ;
41811: LD_VAR 0 3
41815: PPUSH
41816: LD_INT 1000
41818: PPUSH
41819: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
41823: LD_VAR 0 3
41827: PPUSH
41828: LD_INT 81
41830: PUSH
41831: LD_OWVAR 2
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 91
41842: PUSH
41843: LD_VAR 0 3
41847: PUSH
41848: LD_INT 30
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: LIST
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PPUSH
41860: CALL_OW 69
41864: PPUSH
41865: LD_VAR 0 3
41869: PPUSH
41870: CALL_OW 74
41874: PPUSH
41875: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
41879: LD_VAR 0 2
41883: PUSH
41884: LD_INT 80
41886: GREATER
41887: PUSH
41888: LD_VAR 0 3
41892: PPUSH
41893: CALL_OW 301
41897: OR
41898: IFFALSE 41775
// if un then
41900: LD_VAR 0 3
41904: IFFALSE 41915
// RemoveUnit ( un ) ;
41906: LD_VAR 0 3
41910: PPUSH
41911: CALL_OW 64
// end ;
41915: PPOPN 3
41917: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
41918: LD_EXP 143
41922: IFFALSE 42038
41924: GO 41926
41926: DISABLE
41927: LD_INT 0
41929: PPUSH
41930: PPUSH
41931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
41932: LD_ADDR_VAR 0 2
41936: PUSH
41937: LD_INT 81
41939: PUSH
41940: LD_OWVAR 2
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 21
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PPUSH
41963: CALL_OW 69
41967: ST_TO_ADDR
// ToLua ( playComputer() ) ;
41968: LD_STRING playComputer()
41970: PPUSH
41971: CALL_OW 559
// if not tmp then
41975: LD_VAR 0 2
41979: NOT
41980: IFFALSE 41984
// exit ;
41982: GO 42038
// for i in tmp do
41984: LD_ADDR_VAR 0 1
41988: PUSH
41989: LD_VAR 0 2
41993: PUSH
41994: FOR_IN
41995: IFFALSE 42036
// for j := 1 to 4 do
41997: LD_ADDR_VAR 0 3
42001: PUSH
42002: DOUBLE
42003: LD_INT 1
42005: DEC
42006: ST_TO_ADDR
42007: LD_INT 4
42009: PUSH
42010: FOR_TO
42011: IFFALSE 42032
// SetSkill ( i , j , 10 ) ;
42013: LD_VAR 0 1
42017: PPUSH
42018: LD_VAR 0 3
42022: PPUSH
42023: LD_INT 10
42025: PPUSH
42026: CALL_OW 237
42030: GO 42010
42032: POP
42033: POP
42034: GO 41994
42036: POP
42037: POP
// end ;
42038: PPOPN 3
42040: END
// every 0 0$1 trigger s30 do var i , tmp ;
42041: LD_EXP 144
42045: IFFALSE 42114
42047: GO 42049
42049: DISABLE
42050: LD_INT 0
42052: PPUSH
42053: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42054: LD_ADDR_VAR 0 2
42058: PUSH
42059: LD_INT 22
42061: PUSH
42062: LD_OWVAR 2
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PPUSH
42071: CALL_OW 69
42075: ST_TO_ADDR
// if not tmp then
42076: LD_VAR 0 2
42080: NOT
42081: IFFALSE 42085
// exit ;
42083: GO 42114
// for i in tmp do
42085: LD_ADDR_VAR 0 1
42089: PUSH
42090: LD_VAR 0 2
42094: PUSH
42095: FOR_IN
42096: IFFALSE 42112
// SetLives ( i , 300 ) ;
42098: LD_VAR 0 1
42102: PPUSH
42103: LD_INT 300
42105: PPUSH
42106: CALL_OW 234
42110: GO 42095
42112: POP
42113: POP
// end ;
42114: PPOPN 2
42116: END
// every 0 0$1 trigger s60 do var i , tmp ;
42117: LD_EXP 145
42121: IFFALSE 42190
42123: GO 42125
42125: DISABLE
42126: LD_INT 0
42128: PPUSH
42129: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42130: LD_ADDR_VAR 0 2
42134: PUSH
42135: LD_INT 22
42137: PUSH
42138: LD_OWVAR 2
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PPUSH
42147: CALL_OW 69
42151: ST_TO_ADDR
// if not tmp then
42152: LD_VAR 0 2
42156: NOT
42157: IFFALSE 42161
// exit ;
42159: GO 42190
// for i in tmp do
42161: LD_ADDR_VAR 0 1
42165: PUSH
42166: LD_VAR 0 2
42170: PUSH
42171: FOR_IN
42172: IFFALSE 42188
// SetLives ( i , 600 ) ;
42174: LD_VAR 0 1
42178: PPUSH
42179: LD_INT 600
42181: PPUSH
42182: CALL_OW 234
42186: GO 42171
42188: POP
42189: POP
// end ;
42190: PPOPN 2
42192: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42193: LD_INT 0
42195: PPUSH
// case cmd of 301 :
42196: LD_VAR 0 1
42200: PUSH
42201: LD_INT 301
42203: DOUBLE
42204: EQUAL
42205: IFTRUE 42209
42207: GO 42241
42209: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
42210: LD_VAR 0 6
42214: PPUSH
42215: LD_VAR 0 7
42219: PPUSH
42220: LD_VAR 0 8
42224: PPUSH
42225: LD_VAR 0 4
42229: PPUSH
42230: LD_VAR 0 5
42234: PPUSH
42235: CALL 43442 0 5
42239: GO 42362
42241: LD_INT 302
42243: DOUBLE
42244: EQUAL
42245: IFTRUE 42249
42247: GO 42286
42249: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
42250: LD_VAR 0 6
42254: PPUSH
42255: LD_VAR 0 7
42259: PPUSH
42260: LD_VAR 0 8
42264: PPUSH
42265: LD_VAR 0 9
42269: PPUSH
42270: LD_VAR 0 4
42274: PPUSH
42275: LD_VAR 0 5
42279: PPUSH
42280: CALL 43533 0 6
42284: GO 42362
42286: LD_INT 303
42288: DOUBLE
42289: EQUAL
42290: IFTRUE 42294
42292: GO 42331
42294: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
42295: LD_VAR 0 6
42299: PPUSH
42300: LD_VAR 0 7
42304: PPUSH
42305: LD_VAR 0 8
42309: PPUSH
42310: LD_VAR 0 9
42314: PPUSH
42315: LD_VAR 0 4
42319: PPUSH
42320: LD_VAR 0 5
42324: PPUSH
42325: CALL 42367 0 6
42329: GO 42362
42331: LD_INT 304
42333: DOUBLE
42334: EQUAL
42335: IFTRUE 42339
42337: GO 42361
42339: POP
// hHackTeleport ( unit , x , y ) ; end ;
42340: LD_VAR 0 2
42344: PPUSH
42345: LD_VAR 0 4
42349: PPUSH
42350: LD_VAR 0 5
42354: PPUSH
42355: CALL 44126 0 3
42359: GO 42362
42361: POP
// end ;
42362: LD_VAR 0 12
42366: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
42367: LD_INT 0
42369: PPUSH
42370: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
42371: LD_VAR 0 1
42375: PUSH
42376: LD_INT 1
42378: LESS
42379: PUSH
42380: LD_VAR 0 1
42384: PUSH
42385: LD_INT 3
42387: GREATER
42388: OR
42389: PUSH
42390: LD_VAR 0 5
42394: PPUSH
42395: LD_VAR 0 6
42399: PPUSH
42400: CALL_OW 428
42404: OR
42405: IFFALSE 42409
// exit ;
42407: GO 43129
// uc_side := your_side ;
42409: LD_ADDR_OWVAR 20
42413: PUSH
42414: LD_OWVAR 2
42418: ST_TO_ADDR
// uc_nation := nation ;
42419: LD_ADDR_OWVAR 21
42423: PUSH
42424: LD_VAR 0 1
42428: ST_TO_ADDR
// bc_level = 1 ;
42429: LD_ADDR_OWVAR 43
42433: PUSH
42434: LD_INT 1
42436: ST_TO_ADDR
// case btype of 1 :
42437: LD_VAR 0 2
42441: PUSH
42442: LD_INT 1
42444: DOUBLE
42445: EQUAL
42446: IFTRUE 42450
42448: GO 42461
42450: POP
// bc_type := b_depot ; 2 :
42451: LD_ADDR_OWVAR 42
42455: PUSH
42456: LD_INT 0
42458: ST_TO_ADDR
42459: GO 43073
42461: LD_INT 2
42463: DOUBLE
42464: EQUAL
42465: IFTRUE 42469
42467: GO 42480
42469: POP
// bc_type := b_warehouse ; 3 :
42470: LD_ADDR_OWVAR 42
42474: PUSH
42475: LD_INT 1
42477: ST_TO_ADDR
42478: GO 43073
42480: LD_INT 3
42482: DOUBLE
42483: EQUAL
42484: IFTRUE 42488
42486: GO 42499
42488: POP
// bc_type := b_lab ; 4 .. 9 :
42489: LD_ADDR_OWVAR 42
42493: PUSH
42494: LD_INT 6
42496: ST_TO_ADDR
42497: GO 43073
42499: LD_INT 4
42501: DOUBLE
42502: GREATEREQUAL
42503: IFFALSE 42511
42505: LD_INT 9
42507: DOUBLE
42508: LESSEQUAL
42509: IFTRUE 42513
42511: GO 42565
42513: POP
// begin bc_type := b_lab_half ;
42514: LD_ADDR_OWVAR 42
42518: PUSH
42519: LD_INT 7
42521: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
42522: LD_ADDR_OWVAR 44
42526: PUSH
42527: LD_INT 10
42529: PUSH
42530: LD_INT 11
42532: PUSH
42533: LD_INT 12
42535: PUSH
42536: LD_INT 15
42538: PUSH
42539: LD_INT 14
42541: PUSH
42542: LD_INT 13
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: PUSH
42553: LD_VAR 0 2
42557: PUSH
42558: LD_INT 3
42560: MINUS
42561: ARRAY
42562: ST_TO_ADDR
// end ; 10 .. 13 :
42563: GO 43073
42565: LD_INT 10
42567: DOUBLE
42568: GREATEREQUAL
42569: IFFALSE 42577
42571: LD_INT 13
42573: DOUBLE
42574: LESSEQUAL
42575: IFTRUE 42579
42577: GO 42656
42579: POP
// begin bc_type := b_lab_full ;
42580: LD_ADDR_OWVAR 42
42584: PUSH
42585: LD_INT 8
42587: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
42588: LD_ADDR_OWVAR 44
42592: PUSH
42593: LD_INT 10
42595: PUSH
42596: LD_INT 12
42598: PUSH
42599: LD_INT 14
42601: PUSH
42602: LD_INT 13
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: PUSH
42611: LD_VAR 0 2
42615: PUSH
42616: LD_INT 9
42618: MINUS
42619: ARRAY
42620: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
42621: LD_ADDR_OWVAR 45
42625: PUSH
42626: LD_INT 11
42628: PUSH
42629: LD_INT 15
42631: PUSH
42632: LD_INT 12
42634: PUSH
42635: LD_INT 15
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: PUSH
42644: LD_VAR 0 2
42648: PUSH
42649: LD_INT 9
42651: MINUS
42652: ARRAY
42653: ST_TO_ADDR
// end ; 14 :
42654: GO 43073
42656: LD_INT 14
42658: DOUBLE
42659: EQUAL
42660: IFTRUE 42664
42662: GO 42675
42664: POP
// bc_type := b_workshop ; 15 :
42665: LD_ADDR_OWVAR 42
42669: PUSH
42670: LD_INT 2
42672: ST_TO_ADDR
42673: GO 43073
42675: LD_INT 15
42677: DOUBLE
42678: EQUAL
42679: IFTRUE 42683
42681: GO 42694
42683: POP
// bc_type := b_factory ; 16 :
42684: LD_ADDR_OWVAR 42
42688: PUSH
42689: LD_INT 3
42691: ST_TO_ADDR
42692: GO 43073
42694: LD_INT 16
42696: DOUBLE
42697: EQUAL
42698: IFTRUE 42702
42700: GO 42713
42702: POP
// bc_type := b_ext_gun ; 17 :
42703: LD_ADDR_OWVAR 42
42707: PUSH
42708: LD_INT 17
42710: ST_TO_ADDR
42711: GO 43073
42713: LD_INT 17
42715: DOUBLE
42716: EQUAL
42717: IFTRUE 42721
42719: GO 42749
42721: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
42722: LD_ADDR_OWVAR 42
42726: PUSH
42727: LD_INT 19
42729: PUSH
42730: LD_INT 23
42732: PUSH
42733: LD_INT 19
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: PUSH
42741: LD_VAR 0 1
42745: ARRAY
42746: ST_TO_ADDR
42747: GO 43073
42749: LD_INT 18
42751: DOUBLE
42752: EQUAL
42753: IFTRUE 42757
42755: GO 42768
42757: POP
// bc_type := b_ext_radar ; 19 :
42758: LD_ADDR_OWVAR 42
42762: PUSH
42763: LD_INT 20
42765: ST_TO_ADDR
42766: GO 43073
42768: LD_INT 19
42770: DOUBLE
42771: EQUAL
42772: IFTRUE 42776
42774: GO 42787
42776: POP
// bc_type := b_ext_radio ; 20 :
42777: LD_ADDR_OWVAR 42
42781: PUSH
42782: LD_INT 22
42784: ST_TO_ADDR
42785: GO 43073
42787: LD_INT 20
42789: DOUBLE
42790: EQUAL
42791: IFTRUE 42795
42793: GO 42806
42795: POP
// bc_type := b_ext_siberium ; 21 :
42796: LD_ADDR_OWVAR 42
42800: PUSH
42801: LD_INT 21
42803: ST_TO_ADDR
42804: GO 43073
42806: LD_INT 21
42808: DOUBLE
42809: EQUAL
42810: IFTRUE 42814
42812: GO 42825
42814: POP
// bc_type := b_ext_computer ; 22 :
42815: LD_ADDR_OWVAR 42
42819: PUSH
42820: LD_INT 24
42822: ST_TO_ADDR
42823: GO 43073
42825: LD_INT 22
42827: DOUBLE
42828: EQUAL
42829: IFTRUE 42833
42831: GO 42844
42833: POP
// bc_type := b_ext_track ; 23 :
42834: LD_ADDR_OWVAR 42
42838: PUSH
42839: LD_INT 16
42841: ST_TO_ADDR
42842: GO 43073
42844: LD_INT 23
42846: DOUBLE
42847: EQUAL
42848: IFTRUE 42852
42850: GO 42863
42852: POP
// bc_type := b_ext_laser ; 24 :
42853: LD_ADDR_OWVAR 42
42857: PUSH
42858: LD_INT 25
42860: ST_TO_ADDR
42861: GO 43073
42863: LD_INT 24
42865: DOUBLE
42866: EQUAL
42867: IFTRUE 42871
42869: GO 42882
42871: POP
// bc_type := b_control_tower ; 25 :
42872: LD_ADDR_OWVAR 42
42876: PUSH
42877: LD_INT 36
42879: ST_TO_ADDR
42880: GO 43073
42882: LD_INT 25
42884: DOUBLE
42885: EQUAL
42886: IFTRUE 42890
42888: GO 42901
42890: POP
// bc_type := b_breastwork ; 26 :
42891: LD_ADDR_OWVAR 42
42895: PUSH
42896: LD_INT 31
42898: ST_TO_ADDR
42899: GO 43073
42901: LD_INT 26
42903: DOUBLE
42904: EQUAL
42905: IFTRUE 42909
42907: GO 42920
42909: POP
// bc_type := b_bunker ; 27 :
42910: LD_ADDR_OWVAR 42
42914: PUSH
42915: LD_INT 32
42917: ST_TO_ADDR
42918: GO 43073
42920: LD_INT 27
42922: DOUBLE
42923: EQUAL
42924: IFTRUE 42928
42926: GO 42939
42928: POP
// bc_type := b_turret ; 28 :
42929: LD_ADDR_OWVAR 42
42933: PUSH
42934: LD_INT 33
42936: ST_TO_ADDR
42937: GO 43073
42939: LD_INT 28
42941: DOUBLE
42942: EQUAL
42943: IFTRUE 42947
42945: GO 42958
42947: POP
// bc_type := b_armoury ; 29 :
42948: LD_ADDR_OWVAR 42
42952: PUSH
42953: LD_INT 4
42955: ST_TO_ADDR
42956: GO 43073
42958: LD_INT 29
42960: DOUBLE
42961: EQUAL
42962: IFTRUE 42966
42964: GO 42977
42966: POP
// bc_type := b_barracks ; 30 :
42967: LD_ADDR_OWVAR 42
42971: PUSH
42972: LD_INT 5
42974: ST_TO_ADDR
42975: GO 43073
42977: LD_INT 30
42979: DOUBLE
42980: EQUAL
42981: IFTRUE 42985
42983: GO 42996
42985: POP
// bc_type := b_solar_power ; 31 :
42986: LD_ADDR_OWVAR 42
42990: PUSH
42991: LD_INT 27
42993: ST_TO_ADDR
42994: GO 43073
42996: LD_INT 31
42998: DOUBLE
42999: EQUAL
43000: IFTRUE 43004
43002: GO 43015
43004: POP
// bc_type := b_oil_power ; 32 :
43005: LD_ADDR_OWVAR 42
43009: PUSH
43010: LD_INT 26
43012: ST_TO_ADDR
43013: GO 43073
43015: LD_INT 32
43017: DOUBLE
43018: EQUAL
43019: IFTRUE 43023
43021: GO 43034
43023: POP
// bc_type := b_siberite_power ; 33 :
43024: LD_ADDR_OWVAR 42
43028: PUSH
43029: LD_INT 28
43031: ST_TO_ADDR
43032: GO 43073
43034: LD_INT 33
43036: DOUBLE
43037: EQUAL
43038: IFTRUE 43042
43040: GO 43053
43042: POP
// bc_type := b_oil_mine ; 34 :
43043: LD_ADDR_OWVAR 42
43047: PUSH
43048: LD_INT 29
43050: ST_TO_ADDR
43051: GO 43073
43053: LD_INT 34
43055: DOUBLE
43056: EQUAL
43057: IFTRUE 43061
43059: GO 43072
43061: POP
// bc_type := b_siberite_mine ; end ;
43062: LD_ADDR_OWVAR 42
43066: PUSH
43067: LD_INT 30
43069: ST_TO_ADDR
43070: GO 43073
43072: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
43073: LD_ADDR_VAR 0 8
43077: PUSH
43078: LD_VAR 0 5
43082: PPUSH
43083: LD_VAR 0 6
43087: PPUSH
43088: LD_VAR 0 3
43092: PPUSH
43093: CALL_OW 47
43097: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
43098: LD_OWVAR 42
43102: PUSH
43103: LD_INT 32
43105: PUSH
43106: LD_INT 33
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: IN
43113: IFFALSE 43129
// PlaceWeaponTurret ( b , weapon ) ;
43115: LD_VAR 0 8
43119: PPUSH
43120: LD_VAR 0 4
43124: PPUSH
43125: CALL_OW 431
// end ;
43129: LD_VAR 0 7
43133: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
43134: LD_INT 0
43136: PPUSH
43137: PPUSH
43138: PPUSH
43139: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43140: LD_ADDR_VAR 0 4
43144: PUSH
43145: LD_INT 22
43147: PUSH
43148: LD_OWVAR 2
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: LD_INT 30
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 30
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PPUSH
43189: CALL_OW 69
43193: ST_TO_ADDR
// if not tmp then
43194: LD_VAR 0 4
43198: NOT
43199: IFFALSE 43203
// exit ;
43201: GO 43262
// for i in tmp do
43203: LD_ADDR_VAR 0 2
43207: PUSH
43208: LD_VAR 0 4
43212: PUSH
43213: FOR_IN
43214: IFFALSE 43260
// for j = 1 to 3 do
43216: LD_ADDR_VAR 0 3
43220: PUSH
43221: DOUBLE
43222: LD_INT 1
43224: DEC
43225: ST_TO_ADDR
43226: LD_INT 3
43228: PUSH
43229: FOR_TO
43230: IFFALSE 43256
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
43232: LD_VAR 0 2
43236: PPUSH
43237: CALL_OW 274
43241: PPUSH
43242: LD_VAR 0 3
43246: PPUSH
43247: LD_INT 99999
43249: PPUSH
43250: CALL_OW 277
43254: GO 43229
43256: POP
43257: POP
43258: GO 43213
43260: POP
43261: POP
// end ;
43262: LD_VAR 0 1
43266: RET
// export function hHackSetLevel10 ; var i , j ; begin
43267: LD_INT 0
43269: PPUSH
43270: PPUSH
43271: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43272: LD_ADDR_VAR 0 2
43276: PUSH
43277: LD_INT 21
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PPUSH
43287: CALL_OW 69
43291: PUSH
43292: FOR_IN
43293: IFFALSE 43345
// if IsSelected ( i ) then
43295: LD_VAR 0 2
43299: PPUSH
43300: CALL_OW 306
43304: IFFALSE 43343
// begin for j := 1 to 4 do
43306: LD_ADDR_VAR 0 3
43310: PUSH
43311: DOUBLE
43312: LD_INT 1
43314: DEC
43315: ST_TO_ADDR
43316: LD_INT 4
43318: PUSH
43319: FOR_TO
43320: IFFALSE 43341
// SetSkill ( i , j , 10 ) ;
43322: LD_VAR 0 2
43326: PPUSH
43327: LD_VAR 0 3
43331: PPUSH
43332: LD_INT 10
43334: PPUSH
43335: CALL_OW 237
43339: GO 43319
43341: POP
43342: POP
// end ;
43343: GO 43292
43345: POP
43346: POP
// end ;
43347: LD_VAR 0 1
43351: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
43352: LD_INT 0
43354: PPUSH
43355: PPUSH
43356: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
43357: LD_ADDR_VAR 0 2
43361: PUSH
43362: LD_INT 22
43364: PUSH
43365: LD_OWVAR 2
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 21
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PPUSH
43388: CALL_OW 69
43392: PUSH
43393: FOR_IN
43394: IFFALSE 43435
// begin for j := 1 to 4 do
43396: LD_ADDR_VAR 0 3
43400: PUSH
43401: DOUBLE
43402: LD_INT 1
43404: DEC
43405: ST_TO_ADDR
43406: LD_INT 4
43408: PUSH
43409: FOR_TO
43410: IFFALSE 43431
// SetSkill ( i , j , 10 ) ;
43412: LD_VAR 0 2
43416: PPUSH
43417: LD_VAR 0 3
43421: PPUSH
43422: LD_INT 10
43424: PPUSH
43425: CALL_OW 237
43429: GO 43409
43431: POP
43432: POP
// end ;
43433: GO 43393
43435: POP
43436: POP
// end ;
43437: LD_VAR 0 1
43441: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
43442: LD_INT 0
43444: PPUSH
// uc_side := your_side ;
43445: LD_ADDR_OWVAR 20
43449: PUSH
43450: LD_OWVAR 2
43454: ST_TO_ADDR
// uc_nation := nation ;
43455: LD_ADDR_OWVAR 21
43459: PUSH
43460: LD_VAR 0 1
43464: ST_TO_ADDR
// InitHc ;
43465: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
43469: LD_INT 0
43471: PPUSH
43472: LD_VAR 0 2
43476: PPUSH
43477: LD_VAR 0 3
43481: PPUSH
43482: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
43486: LD_VAR 0 4
43490: PPUSH
43491: LD_VAR 0 5
43495: PPUSH
43496: CALL_OW 428
43500: PUSH
43501: LD_INT 0
43503: EQUAL
43504: IFFALSE 43528
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
43506: CALL_OW 44
43510: PPUSH
43511: LD_VAR 0 4
43515: PPUSH
43516: LD_VAR 0 5
43520: PPUSH
43521: LD_INT 1
43523: PPUSH
43524: CALL_OW 48
// end ;
43528: LD_VAR 0 6
43532: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
43533: LD_INT 0
43535: PPUSH
43536: PPUSH
// uc_side := your_side ;
43537: LD_ADDR_OWVAR 20
43541: PUSH
43542: LD_OWVAR 2
43546: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
43547: LD_VAR 0 1
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: LD_INT 3
43560: PUSH
43561: LD_INT 4
43563: PUSH
43564: LD_INT 5
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: IN
43574: IFFALSE 43586
// uc_nation := nation_american else
43576: LD_ADDR_OWVAR 21
43580: PUSH
43581: LD_INT 1
43583: ST_TO_ADDR
43584: GO 43629
// if chassis in [ 11 , 12 , 13 , 14 ] then
43586: LD_VAR 0 1
43590: PUSH
43591: LD_INT 11
43593: PUSH
43594: LD_INT 12
43596: PUSH
43597: LD_INT 13
43599: PUSH
43600: LD_INT 14
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: IN
43609: IFFALSE 43621
// uc_nation := nation_arabian else
43611: LD_ADDR_OWVAR 21
43615: PUSH
43616: LD_INT 2
43618: ST_TO_ADDR
43619: GO 43629
// uc_nation := nation_russian ;
43621: LD_ADDR_OWVAR 21
43625: PUSH
43626: LD_INT 3
43628: ST_TO_ADDR
// vc_chassis := chassis ;
43629: LD_ADDR_OWVAR 37
43633: PUSH
43634: LD_VAR 0 1
43638: ST_TO_ADDR
// vc_engine := engine ;
43639: LD_ADDR_OWVAR 39
43643: PUSH
43644: LD_VAR 0 2
43648: ST_TO_ADDR
// vc_control := control ;
43649: LD_ADDR_OWVAR 38
43653: PUSH
43654: LD_VAR 0 3
43658: ST_TO_ADDR
// vc_weapon := weapon ;
43659: LD_ADDR_OWVAR 40
43663: PUSH
43664: LD_VAR 0 4
43668: ST_TO_ADDR
// un := CreateVehicle ;
43669: LD_ADDR_VAR 0 8
43673: PUSH
43674: CALL_OW 45
43678: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
43679: LD_VAR 0 8
43683: PPUSH
43684: LD_INT 0
43686: PPUSH
43687: LD_INT 5
43689: PPUSH
43690: CALL_OW 12
43694: PPUSH
43695: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
43699: LD_VAR 0 8
43703: PPUSH
43704: LD_VAR 0 5
43708: PPUSH
43709: LD_VAR 0 6
43713: PPUSH
43714: LD_INT 1
43716: PPUSH
43717: CALL_OW 48
// end ;
43721: LD_VAR 0 7
43725: RET
// export hInvincible ; every 1 do
43726: GO 43728
43728: DISABLE
// hInvincible := [ ] ;
43729: LD_ADDR_EXP 146
43733: PUSH
43734: EMPTY
43735: ST_TO_ADDR
43736: END
// every 10 do var i ;
43737: GO 43739
43739: DISABLE
43740: LD_INT 0
43742: PPUSH
// begin enable ;
43743: ENABLE
// if not hInvincible then
43744: LD_EXP 146
43748: NOT
43749: IFFALSE 43753
// exit ;
43751: GO 43797
// for i in hInvincible do
43753: LD_ADDR_VAR 0 1
43757: PUSH
43758: LD_EXP 146
43762: PUSH
43763: FOR_IN
43764: IFFALSE 43795
// if GetLives ( i ) < 1000 then
43766: LD_VAR 0 1
43770: PPUSH
43771: CALL_OW 256
43775: PUSH
43776: LD_INT 1000
43778: LESS
43779: IFFALSE 43793
// SetLives ( i , 1000 ) ;
43781: LD_VAR 0 1
43785: PPUSH
43786: LD_INT 1000
43788: PPUSH
43789: CALL_OW 234
43793: GO 43763
43795: POP
43796: POP
// end ;
43797: PPOPN 1
43799: END
// export function hHackInvincible ; var i ; begin
43800: LD_INT 0
43802: PPUSH
43803: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
43804: LD_ADDR_VAR 0 2
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: LD_INT 21
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 21
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: LIST
43836: PPUSH
43837: CALL_OW 69
43841: PUSH
43842: FOR_IN
43843: IFFALSE 43904
// if IsSelected ( i ) then
43845: LD_VAR 0 2
43849: PPUSH
43850: CALL_OW 306
43854: IFFALSE 43902
// begin if i in hInvincible then
43856: LD_VAR 0 2
43860: PUSH
43861: LD_EXP 146
43865: IN
43866: IFFALSE 43886
// hInvincible := hInvincible diff i else
43868: LD_ADDR_EXP 146
43872: PUSH
43873: LD_EXP 146
43877: PUSH
43878: LD_VAR 0 2
43882: DIFF
43883: ST_TO_ADDR
43884: GO 43902
// hInvincible := hInvincible union i ;
43886: LD_ADDR_EXP 146
43890: PUSH
43891: LD_EXP 146
43895: PUSH
43896: LD_VAR 0 2
43900: UNION
43901: ST_TO_ADDR
// end ;
43902: GO 43842
43904: POP
43905: POP
// end ;
43906: LD_VAR 0 1
43910: RET
// export function hHackInvisible ; var i , j ; begin
43911: LD_INT 0
43913: PPUSH
43914: PPUSH
43915: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43916: LD_ADDR_VAR 0 2
43920: PUSH
43921: LD_INT 21
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PPUSH
43931: CALL_OW 69
43935: PUSH
43936: FOR_IN
43937: IFFALSE 43961
// if IsSelected ( i ) then
43939: LD_VAR 0 2
43943: PPUSH
43944: CALL_OW 306
43948: IFFALSE 43959
// ComForceInvisible ( i ) ;
43950: LD_VAR 0 2
43954: PPUSH
43955: CALL_OW 496
43959: GO 43936
43961: POP
43962: POP
// end ;
43963: LD_VAR 0 1
43967: RET
// export function hHackChangeYourSide ; begin
43968: LD_INT 0
43970: PPUSH
// if your_side = 8 then
43971: LD_OWVAR 2
43975: PUSH
43976: LD_INT 8
43978: EQUAL
43979: IFFALSE 43991
// your_side := 0 else
43981: LD_ADDR_OWVAR 2
43985: PUSH
43986: LD_INT 0
43988: ST_TO_ADDR
43989: GO 44005
// your_side := your_side + 1 ;
43991: LD_ADDR_OWVAR 2
43995: PUSH
43996: LD_OWVAR 2
44000: PUSH
44001: LD_INT 1
44003: PLUS
44004: ST_TO_ADDR
// end ;
44005: LD_VAR 0 1
44009: RET
// export function hHackChangeUnitSide ; var i , j ; begin
44010: LD_INT 0
44012: PPUSH
44013: PPUSH
44014: PPUSH
// for i in all_units do
44015: LD_ADDR_VAR 0 2
44019: PUSH
44020: LD_OWVAR 3
44024: PUSH
44025: FOR_IN
44026: IFFALSE 44104
// if IsSelected ( i ) then
44028: LD_VAR 0 2
44032: PPUSH
44033: CALL_OW 306
44037: IFFALSE 44102
// begin j := GetSide ( i ) ;
44039: LD_ADDR_VAR 0 3
44043: PUSH
44044: LD_VAR 0 2
44048: PPUSH
44049: CALL_OW 255
44053: ST_TO_ADDR
// if j = 8 then
44054: LD_VAR 0 3
44058: PUSH
44059: LD_INT 8
44061: EQUAL
44062: IFFALSE 44074
// j := 0 else
44064: LD_ADDR_VAR 0 3
44068: PUSH
44069: LD_INT 0
44071: ST_TO_ADDR
44072: GO 44088
// j := j + 1 ;
44074: LD_ADDR_VAR 0 3
44078: PUSH
44079: LD_VAR 0 3
44083: PUSH
44084: LD_INT 1
44086: PLUS
44087: ST_TO_ADDR
// SetSide ( i , j ) ;
44088: LD_VAR 0 2
44092: PPUSH
44093: LD_VAR 0 3
44097: PPUSH
44098: CALL_OW 235
// end ;
44102: GO 44025
44104: POP
44105: POP
// end ;
44106: LD_VAR 0 1
44110: RET
// export function hHackFog ; begin
44111: LD_INT 0
44113: PPUSH
// FogOff ( true ) ;
44114: LD_INT 1
44116: PPUSH
44117: CALL_OW 344
// end ;
44121: LD_VAR 0 1
44125: RET
// export function hHackTeleport ( unit , x , y ) ; begin
44126: LD_INT 0
44128: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
44129: LD_VAR 0 1
44133: PPUSH
44134: LD_VAR 0 2
44138: PPUSH
44139: LD_VAR 0 3
44143: PPUSH
44144: LD_INT 1
44146: PPUSH
44147: LD_INT 1
44149: PPUSH
44150: CALL_OW 483
// CenterOnXY ( x , y ) ;
44154: LD_VAR 0 2
44158: PPUSH
44159: LD_VAR 0 3
44163: PPUSH
44164: CALL_OW 84
// end ; end_of_file
44168: LD_VAR 0 4
44172: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
44173: LD_INT 0
44175: PPUSH
44176: PPUSH
44177: PPUSH
44178: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
44179: LD_VAR 0 1
44183: PPUSH
44184: CALL_OW 264
44188: PUSH
44189: LD_EXP 73
44193: EQUAL
44194: IFFALSE 44266
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
44196: LD_INT 68
44198: PPUSH
44199: LD_VAR 0 1
44203: PPUSH
44204: CALL_OW 255
44208: PPUSH
44209: CALL_OW 321
44213: PUSH
44214: LD_INT 2
44216: EQUAL
44217: IFFALSE 44229
// eff := 70 else
44219: LD_ADDR_VAR 0 4
44223: PUSH
44224: LD_INT 70
44226: ST_TO_ADDR
44227: GO 44237
// eff := 30 ;
44229: LD_ADDR_VAR 0 4
44233: PUSH
44234: LD_INT 30
44236: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
44237: LD_VAR 0 1
44241: PPUSH
44242: CALL_OW 250
44246: PPUSH
44247: LD_VAR 0 1
44251: PPUSH
44252: CALL_OW 251
44256: PPUSH
44257: LD_VAR 0 4
44261: PPUSH
44262: CALL_OW 495
// end ; end ;
44266: LD_VAR 0 2
44270: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
44271: LD_INT 0
44273: PPUSH
// end ;
44274: LD_VAR 0 4
44278: RET
// export function SOS_Command ( cmd ) ; begin
44279: LD_INT 0
44281: PPUSH
// end ;
44282: LD_VAR 0 2
44286: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
44287: LD_INT 0
44289: PPUSH
// end ;
44290: LD_VAR 0 6
44294: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
44295: LD_INT 0
44297: PPUSH
44298: PPUSH
// if not vehicle or not factory then
44299: LD_VAR 0 1
44303: NOT
44304: PUSH
44305: LD_VAR 0 2
44309: NOT
44310: OR
44311: IFFALSE 44315
// exit ;
44313: GO 44546
// if factoryWaypoints >= factory then
44315: LD_EXP 147
44319: PUSH
44320: LD_VAR 0 2
44324: GREATEREQUAL
44325: IFFALSE 44546
// if factoryWaypoints [ factory ] then
44327: LD_EXP 147
44331: PUSH
44332: LD_VAR 0 2
44336: ARRAY
44337: IFFALSE 44546
// begin if GetControl ( vehicle ) = control_manual then
44339: LD_VAR 0 1
44343: PPUSH
44344: CALL_OW 263
44348: PUSH
44349: LD_INT 1
44351: EQUAL
44352: IFFALSE 44433
// begin driver := IsDrivenBy ( vehicle ) ;
44354: LD_ADDR_VAR 0 4
44358: PUSH
44359: LD_VAR 0 1
44363: PPUSH
44364: CALL_OW 311
44368: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44369: LD_VAR 0 4
44373: PPUSH
44374: LD_EXP 147
44378: PUSH
44379: LD_VAR 0 2
44383: ARRAY
44384: PUSH
44385: LD_INT 3
44387: ARRAY
44388: PPUSH
44389: LD_EXP 147
44393: PUSH
44394: LD_VAR 0 2
44398: ARRAY
44399: PUSH
44400: LD_INT 4
44402: ARRAY
44403: PPUSH
44404: CALL_OW 171
// AddComExitVehicle ( driver ) ;
44408: LD_VAR 0 4
44412: PPUSH
44413: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
44417: LD_VAR 0 4
44421: PPUSH
44422: LD_VAR 0 2
44426: PPUSH
44427: CALL_OW 180
// end else
44431: GO 44546
// if GetControl ( vehicle ) = control_remote then
44433: LD_VAR 0 1
44437: PPUSH
44438: CALL_OW 263
44442: PUSH
44443: LD_INT 2
44445: EQUAL
44446: IFFALSE 44507
// begin wait ( 0 0$2 ) ;
44448: LD_INT 70
44450: PPUSH
44451: CALL_OW 67
// if Connect ( vehicle ) then
44455: LD_VAR 0 1
44459: PPUSH
44460: CALL 56770 0 1
44464: IFFALSE 44505
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44466: LD_VAR 0 1
44470: PPUSH
44471: LD_EXP 147
44475: PUSH
44476: LD_VAR 0 2
44480: ARRAY
44481: PUSH
44482: LD_INT 3
44484: ARRAY
44485: PPUSH
44486: LD_EXP 147
44490: PUSH
44491: LD_VAR 0 2
44495: ARRAY
44496: PUSH
44497: LD_INT 4
44499: ARRAY
44500: PPUSH
44501: CALL_OW 171
// end else
44505: GO 44546
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44507: LD_VAR 0 1
44511: PPUSH
44512: LD_EXP 147
44516: PUSH
44517: LD_VAR 0 2
44521: ARRAY
44522: PUSH
44523: LD_INT 3
44525: ARRAY
44526: PPUSH
44527: LD_EXP 147
44531: PUSH
44532: LD_VAR 0 2
44536: ARRAY
44537: PUSH
44538: LD_INT 4
44540: ARRAY
44541: PPUSH
44542: CALL_OW 171
// end ; end ;
44546: LD_VAR 0 3
44550: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
44551: LD_INT 0
44553: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
44554: LD_VAR 0 1
44558: PUSH
44559: LD_INT 250
44561: EQUAL
44562: PUSH
44563: LD_VAR 0 2
44567: PPUSH
44568: CALL_OW 264
44572: PUSH
44573: LD_EXP 76
44577: EQUAL
44578: AND
44579: IFFALSE 44600
// MinerPlaceMine ( unit , x , y ) ;
44581: LD_VAR 0 2
44585: PPUSH
44586: LD_VAR 0 4
44590: PPUSH
44591: LD_VAR 0 5
44595: PPUSH
44596: CALL 47328 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
44600: LD_VAR 0 1
44604: PUSH
44605: LD_INT 251
44607: EQUAL
44608: PUSH
44609: LD_VAR 0 2
44613: PPUSH
44614: CALL_OW 264
44618: PUSH
44619: LD_EXP 76
44623: EQUAL
44624: AND
44625: IFFALSE 44646
// MinerDetonateMine ( unit , x , y ) ;
44627: LD_VAR 0 2
44631: PPUSH
44632: LD_VAR 0 4
44636: PPUSH
44637: LD_VAR 0 5
44641: PPUSH
44642: CALL 47605 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
44646: LD_VAR 0 1
44650: PUSH
44651: LD_INT 252
44653: EQUAL
44654: PUSH
44655: LD_VAR 0 2
44659: PPUSH
44660: CALL_OW 264
44664: PUSH
44665: LD_EXP 76
44669: EQUAL
44670: AND
44671: IFFALSE 44692
// MinerCreateMinefield ( unit , x , y ) ;
44673: LD_VAR 0 2
44677: PPUSH
44678: LD_VAR 0 4
44682: PPUSH
44683: LD_VAR 0 5
44687: PPUSH
44688: CALL 48022 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
44692: LD_VAR 0 1
44696: PUSH
44697: LD_INT 253
44699: EQUAL
44700: PUSH
44701: LD_VAR 0 2
44705: PPUSH
44706: CALL_OW 257
44710: PUSH
44711: LD_INT 5
44713: EQUAL
44714: AND
44715: IFFALSE 44736
// ComBinocular ( unit , x , y ) ;
44717: LD_VAR 0 2
44721: PPUSH
44722: LD_VAR 0 4
44726: PPUSH
44727: LD_VAR 0 5
44731: PPUSH
44732: CALL 48393 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
44736: LD_VAR 0 1
44740: PUSH
44741: LD_INT 254
44743: EQUAL
44744: PUSH
44745: LD_VAR 0 2
44749: PPUSH
44750: CALL_OW 264
44754: PUSH
44755: LD_EXP 71
44759: EQUAL
44760: AND
44761: PUSH
44762: LD_VAR 0 3
44766: PPUSH
44767: CALL_OW 263
44771: PUSH
44772: LD_INT 3
44774: EQUAL
44775: AND
44776: IFFALSE 44792
// HackDestroyVehicle ( unit , selectedUnit ) ;
44778: LD_VAR 0 2
44782: PPUSH
44783: LD_VAR 0 3
44787: PPUSH
44788: CALL 46688 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
44792: LD_VAR 0 1
44796: PUSH
44797: LD_INT 255
44799: EQUAL
44800: PUSH
44801: LD_VAR 0 2
44805: PPUSH
44806: CALL_OW 264
44810: PUSH
44811: LD_INT 14
44813: PUSH
44814: LD_INT 53
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: IN
44821: AND
44822: PUSH
44823: LD_VAR 0 4
44827: PPUSH
44828: LD_VAR 0 5
44832: PPUSH
44833: CALL_OW 488
44837: AND
44838: IFFALSE 44862
// CutTreeXYR ( unit , x , y , 12 ) ;
44840: LD_VAR 0 2
44844: PPUSH
44845: LD_VAR 0 4
44849: PPUSH
44850: LD_VAR 0 5
44854: PPUSH
44855: LD_INT 12
44857: PPUSH
44858: CALL 45254 0 4
// if cmd = 256 then
44862: LD_VAR 0 1
44866: PUSH
44867: LD_INT 256
44869: EQUAL
44870: IFFALSE 44891
// SetFactoryWaypoint ( unit , x , y ) ;
44872: LD_VAR 0 2
44876: PPUSH
44877: LD_VAR 0 4
44881: PPUSH
44882: LD_VAR 0 5
44886: PPUSH
44887: CALL 44896 0 3
// end ;
44891: LD_VAR 0 6
44895: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
44896: LD_INT 0
44898: PPUSH
44899: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
44900: LD_VAR 0 1
44904: NOT
44905: PUSH
44906: LD_VAR 0 2
44910: PPUSH
44911: LD_VAR 0 3
44915: PPUSH
44916: CALL_OW 488
44920: NOT
44921: OR
44922: PUSH
44923: LD_VAR 0 1
44927: PPUSH
44928: CALL_OW 266
44932: PUSH
44933: LD_INT 3
44935: NONEQUAL
44936: PUSH
44937: LD_VAR 0 1
44941: PPUSH
44942: CALL_OW 247
44946: PUSH
44947: LD_INT 1
44949: EQUAL
44950: NOT
44951: AND
44952: OR
44953: IFFALSE 44957
// exit ;
44955: GO 45106
// if GetType ( factory ) = unit_human then
44957: LD_VAR 0 1
44961: PPUSH
44962: CALL_OW 247
44966: PUSH
44967: LD_INT 1
44969: EQUAL
44970: IFFALSE 44987
// factory := IsInUnit ( factory ) ;
44972: LD_ADDR_VAR 0 1
44976: PUSH
44977: LD_VAR 0 1
44981: PPUSH
44982: CALL_OW 310
44986: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
44987: LD_VAR 0 1
44991: PPUSH
44992: CALL_OW 266
44996: PUSH
44997: LD_INT 3
44999: NONEQUAL
45000: IFFALSE 45004
// exit ;
45002: GO 45106
// if HexInfo ( x , y ) = factory then
45004: LD_VAR 0 2
45008: PPUSH
45009: LD_VAR 0 3
45013: PPUSH
45014: CALL_OW 428
45018: PUSH
45019: LD_VAR 0 1
45023: EQUAL
45024: IFFALSE 45051
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
45026: LD_ADDR_EXP 147
45030: PUSH
45031: LD_EXP 147
45035: PPUSH
45036: LD_VAR 0 1
45040: PPUSH
45041: LD_INT 0
45043: PPUSH
45044: CALL_OW 1
45048: ST_TO_ADDR
45049: GO 45102
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
45051: LD_ADDR_EXP 147
45055: PUSH
45056: LD_EXP 147
45060: PPUSH
45061: LD_VAR 0 1
45065: PPUSH
45066: LD_VAR 0 1
45070: PPUSH
45071: CALL_OW 255
45075: PUSH
45076: LD_VAR 0 1
45080: PUSH
45081: LD_VAR 0 2
45085: PUSH
45086: LD_VAR 0 3
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: PPUSH
45097: CALL_OW 1
45101: ST_TO_ADDR
// UpdateFactoryWaypoints ;
45102: CALL 45111 0 0
// end ;
45106: LD_VAR 0 4
45110: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
45111: LD_INT 0
45113: PPUSH
45114: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
45115: LD_STRING resetFactoryWaypoint();
45117: PPUSH
45118: CALL_OW 559
// if factoryWaypoints then
45122: LD_EXP 147
45126: IFFALSE 45249
// begin for i := 1 to factoryWaypoints do
45128: LD_ADDR_VAR 0 2
45132: PUSH
45133: DOUBLE
45134: LD_INT 1
45136: DEC
45137: ST_TO_ADDR
45138: LD_EXP 147
45142: PUSH
45143: FOR_TO
45144: IFFALSE 45247
// if factoryWaypoints [ i ] then
45146: LD_EXP 147
45150: PUSH
45151: LD_VAR 0 2
45155: ARRAY
45156: IFFALSE 45245
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
45158: LD_STRING setFactoryWaypointXY(
45160: PUSH
45161: LD_EXP 147
45165: PUSH
45166: LD_VAR 0 2
45170: ARRAY
45171: PUSH
45172: LD_INT 1
45174: ARRAY
45175: STR
45176: PUSH
45177: LD_STRING ,
45179: STR
45180: PUSH
45181: LD_EXP 147
45185: PUSH
45186: LD_VAR 0 2
45190: ARRAY
45191: PUSH
45192: LD_INT 2
45194: ARRAY
45195: STR
45196: PUSH
45197: LD_STRING ,
45199: STR
45200: PUSH
45201: LD_EXP 147
45205: PUSH
45206: LD_VAR 0 2
45210: ARRAY
45211: PUSH
45212: LD_INT 3
45214: ARRAY
45215: STR
45216: PUSH
45217: LD_STRING ,
45219: STR
45220: PUSH
45221: LD_EXP 147
45225: PUSH
45226: LD_VAR 0 2
45230: ARRAY
45231: PUSH
45232: LD_INT 4
45234: ARRAY
45235: STR
45236: PUSH
45237: LD_STRING )
45239: STR
45240: PPUSH
45241: CALL_OW 559
45245: GO 45143
45247: POP
45248: POP
// end ; end ;
45249: LD_VAR 0 1
45253: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
45254: LD_INT 0
45256: PPUSH
45257: PPUSH
45258: PPUSH
45259: PPUSH
45260: PPUSH
45261: PPUSH
45262: PPUSH
45263: PPUSH
45264: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
45265: LD_VAR 0 1
45269: NOT
45270: PUSH
45271: LD_VAR 0 2
45275: PPUSH
45276: LD_VAR 0 3
45280: PPUSH
45281: CALL_OW 488
45285: NOT
45286: OR
45287: PUSH
45288: LD_VAR 0 4
45292: NOT
45293: OR
45294: IFFALSE 45298
// exit ;
45296: GO 45638
// list := [ ] ;
45298: LD_ADDR_VAR 0 13
45302: PUSH
45303: EMPTY
45304: ST_TO_ADDR
// if x - r < 0 then
45305: LD_VAR 0 2
45309: PUSH
45310: LD_VAR 0 4
45314: MINUS
45315: PUSH
45316: LD_INT 0
45318: LESS
45319: IFFALSE 45331
// min_x := 0 else
45321: LD_ADDR_VAR 0 7
45325: PUSH
45326: LD_INT 0
45328: ST_TO_ADDR
45329: GO 45347
// min_x := x - r ;
45331: LD_ADDR_VAR 0 7
45335: PUSH
45336: LD_VAR 0 2
45340: PUSH
45341: LD_VAR 0 4
45345: MINUS
45346: ST_TO_ADDR
// if y - r < 0 then
45347: LD_VAR 0 3
45351: PUSH
45352: LD_VAR 0 4
45356: MINUS
45357: PUSH
45358: LD_INT 0
45360: LESS
45361: IFFALSE 45373
// min_y := 0 else
45363: LD_ADDR_VAR 0 8
45367: PUSH
45368: LD_INT 0
45370: ST_TO_ADDR
45371: GO 45389
// min_y := y - r ;
45373: LD_ADDR_VAR 0 8
45377: PUSH
45378: LD_VAR 0 3
45382: PUSH
45383: LD_VAR 0 4
45387: MINUS
45388: ST_TO_ADDR
// max_x := x + r ;
45389: LD_ADDR_VAR 0 9
45393: PUSH
45394: LD_VAR 0 2
45398: PUSH
45399: LD_VAR 0 4
45403: PLUS
45404: ST_TO_ADDR
// max_y := y + r ;
45405: LD_ADDR_VAR 0 10
45409: PUSH
45410: LD_VAR 0 3
45414: PUSH
45415: LD_VAR 0 4
45419: PLUS
45420: ST_TO_ADDR
// for _x = min_x to max_x do
45421: LD_ADDR_VAR 0 11
45425: PUSH
45426: DOUBLE
45427: LD_VAR 0 7
45431: DEC
45432: ST_TO_ADDR
45433: LD_VAR 0 9
45437: PUSH
45438: FOR_TO
45439: IFFALSE 45556
// for _y = min_y to max_y do
45441: LD_ADDR_VAR 0 12
45445: PUSH
45446: DOUBLE
45447: LD_VAR 0 8
45451: DEC
45452: ST_TO_ADDR
45453: LD_VAR 0 10
45457: PUSH
45458: FOR_TO
45459: IFFALSE 45552
// begin if not ValidHex ( _x , _y ) then
45461: LD_VAR 0 11
45465: PPUSH
45466: LD_VAR 0 12
45470: PPUSH
45471: CALL_OW 488
45475: NOT
45476: IFFALSE 45480
// continue ;
45478: GO 45458
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
45480: LD_VAR 0 11
45484: PPUSH
45485: LD_VAR 0 12
45489: PPUSH
45490: CALL_OW 351
45494: PUSH
45495: LD_VAR 0 11
45499: PPUSH
45500: LD_VAR 0 12
45504: PPUSH
45505: CALL_OW 554
45509: AND
45510: IFFALSE 45550
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
45512: LD_ADDR_VAR 0 13
45516: PUSH
45517: LD_VAR 0 13
45521: PPUSH
45522: LD_VAR 0 13
45526: PUSH
45527: LD_INT 1
45529: PLUS
45530: PPUSH
45531: LD_VAR 0 11
45535: PUSH
45536: LD_VAR 0 12
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PPUSH
45545: CALL_OW 2
45549: ST_TO_ADDR
// end ;
45550: GO 45458
45552: POP
45553: POP
45554: GO 45438
45556: POP
45557: POP
// if not list then
45558: LD_VAR 0 13
45562: NOT
45563: IFFALSE 45567
// exit ;
45565: GO 45638
// for i in list do
45567: LD_ADDR_VAR 0 6
45571: PUSH
45572: LD_VAR 0 13
45576: PUSH
45577: FOR_IN
45578: IFFALSE 45636
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
45580: LD_VAR 0 1
45584: PPUSH
45585: LD_STRING M
45587: PUSH
45588: LD_VAR 0 6
45592: PUSH
45593: LD_INT 1
45595: ARRAY
45596: PUSH
45597: LD_VAR 0 6
45601: PUSH
45602: LD_INT 2
45604: ARRAY
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: PUSH
45627: EMPTY
45628: LIST
45629: PPUSH
45630: CALL_OW 447
45634: GO 45577
45636: POP
45637: POP
// end ;
45638: LD_VAR 0 5
45642: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
45643: LD_EXP 148
45647: NOT
45648: IFFALSE 45698
45650: GO 45652
45652: DISABLE
// begin initHack := true ;
45653: LD_ADDR_EXP 148
45657: PUSH
45658: LD_INT 1
45660: ST_TO_ADDR
// hackTanks := [ ] ;
45661: LD_ADDR_EXP 149
45665: PUSH
45666: EMPTY
45667: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
45668: LD_ADDR_EXP 150
45672: PUSH
45673: EMPTY
45674: ST_TO_ADDR
// hackLimit := 3 ;
45675: LD_ADDR_EXP 151
45679: PUSH
45680: LD_INT 3
45682: ST_TO_ADDR
// hackDist := 12 ;
45683: LD_ADDR_EXP 152
45687: PUSH
45688: LD_INT 12
45690: ST_TO_ADDR
// hackCounter := [ ] ;
45691: LD_ADDR_EXP 153
45695: PUSH
45696: EMPTY
45697: ST_TO_ADDR
// end ;
45698: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
45699: LD_EXP 148
45703: PUSH
45704: LD_INT 34
45706: PUSH
45707: LD_EXP 71
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PPUSH
45716: CALL_OW 69
45720: AND
45721: IFFALSE 45976
45723: GO 45725
45725: DISABLE
45726: LD_INT 0
45728: PPUSH
45729: PPUSH
// begin enable ;
45730: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
45731: LD_ADDR_VAR 0 1
45735: PUSH
45736: LD_INT 34
45738: PUSH
45739: LD_EXP 71
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PPUSH
45748: CALL_OW 69
45752: PUSH
45753: FOR_IN
45754: IFFALSE 45974
// begin if not i in hackTanks then
45756: LD_VAR 0 1
45760: PUSH
45761: LD_EXP 149
45765: IN
45766: NOT
45767: IFFALSE 45850
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
45769: LD_ADDR_EXP 149
45773: PUSH
45774: LD_EXP 149
45778: PPUSH
45779: LD_EXP 149
45783: PUSH
45784: LD_INT 1
45786: PLUS
45787: PPUSH
45788: LD_VAR 0 1
45792: PPUSH
45793: CALL_OW 1
45797: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
45798: LD_ADDR_EXP 150
45802: PUSH
45803: LD_EXP 150
45807: PPUSH
45808: LD_EXP 150
45812: PUSH
45813: LD_INT 1
45815: PLUS
45816: PPUSH
45817: EMPTY
45818: PPUSH
45819: CALL_OW 1
45823: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
45824: LD_ADDR_EXP 153
45828: PUSH
45829: LD_EXP 153
45833: PPUSH
45834: LD_EXP 153
45838: PUSH
45839: LD_INT 1
45841: PLUS
45842: PPUSH
45843: EMPTY
45844: PPUSH
45845: CALL_OW 1
45849: ST_TO_ADDR
// end ; if not IsOk ( i ) then
45850: LD_VAR 0 1
45854: PPUSH
45855: CALL_OW 302
45859: NOT
45860: IFFALSE 45873
// begin HackUnlinkAll ( i ) ;
45862: LD_VAR 0 1
45866: PPUSH
45867: CALL 45979 0 1
// continue ;
45871: GO 45753
// end ; HackCheckCapturedStatus ( i ) ;
45873: LD_VAR 0 1
45877: PPUSH
45878: CALL 46422 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
45882: LD_ADDR_VAR 0 2
45886: PUSH
45887: LD_INT 81
45889: PUSH
45890: LD_VAR 0 1
45894: PPUSH
45895: CALL_OW 255
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 33
45906: PUSH
45907: LD_INT 3
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 91
45916: PUSH
45917: LD_VAR 0 1
45921: PUSH
45922: LD_EXP 152
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 50
45934: PUSH
45935: EMPTY
45936: LIST
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: PPUSH
45944: CALL_OW 69
45948: ST_TO_ADDR
// if not tmp then
45949: LD_VAR 0 2
45953: NOT
45954: IFFALSE 45958
// continue ;
45956: GO 45753
// HackLink ( i , tmp ) ;
45958: LD_VAR 0 1
45962: PPUSH
45963: LD_VAR 0 2
45967: PPUSH
45968: CALL 46115 0 2
// end ;
45972: GO 45753
45974: POP
45975: POP
// end ;
45976: PPOPN 2
45978: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
45979: LD_INT 0
45981: PPUSH
45982: PPUSH
45983: PPUSH
// if not hack in hackTanks then
45984: LD_VAR 0 1
45988: PUSH
45989: LD_EXP 149
45993: IN
45994: NOT
45995: IFFALSE 45999
// exit ;
45997: GO 46110
// index := GetElementIndex ( hackTanks , hack ) ;
45999: LD_ADDR_VAR 0 4
46003: PUSH
46004: LD_EXP 149
46008: PPUSH
46009: LD_VAR 0 1
46013: PPUSH
46014: CALL 53584 0 2
46018: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
46019: LD_EXP 150
46023: PUSH
46024: LD_VAR 0 4
46028: ARRAY
46029: IFFALSE 46110
// begin for i in hackTanksCaptured [ index ] do
46031: LD_ADDR_VAR 0 3
46035: PUSH
46036: LD_EXP 150
46040: PUSH
46041: LD_VAR 0 4
46045: ARRAY
46046: PUSH
46047: FOR_IN
46048: IFFALSE 46074
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
46050: LD_VAR 0 3
46054: PUSH
46055: LD_INT 1
46057: ARRAY
46058: PPUSH
46059: LD_VAR 0 3
46063: PUSH
46064: LD_INT 2
46066: ARRAY
46067: PPUSH
46068: CALL_OW 235
46072: GO 46047
46074: POP
46075: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
46076: LD_ADDR_EXP 150
46080: PUSH
46081: LD_EXP 150
46085: PPUSH
46086: LD_VAR 0 4
46090: PPUSH
46091: EMPTY
46092: PPUSH
46093: CALL_OW 1
46097: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
46098: LD_VAR 0 1
46102: PPUSH
46103: LD_INT 0
46105: PPUSH
46106: CALL_OW 505
// end ; end ;
46110: LD_VAR 0 2
46114: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
46115: LD_INT 0
46117: PPUSH
46118: PPUSH
46119: PPUSH
// if not hack in hackTanks or not vehicles then
46120: LD_VAR 0 1
46124: PUSH
46125: LD_EXP 149
46129: IN
46130: NOT
46131: PUSH
46132: LD_VAR 0 2
46136: NOT
46137: OR
46138: IFFALSE 46142
// exit ;
46140: GO 46417
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
46142: LD_ADDR_VAR 0 2
46146: PUSH
46147: LD_VAR 0 1
46151: PPUSH
46152: LD_VAR 0 2
46156: PPUSH
46157: LD_INT 1
46159: PPUSH
46160: LD_INT 1
46162: PPUSH
46163: CALL 54234 0 4
46167: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
46168: LD_ADDR_VAR 0 5
46172: PUSH
46173: LD_EXP 149
46177: PPUSH
46178: LD_VAR 0 1
46182: PPUSH
46183: CALL 53584 0 2
46187: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
46188: LD_EXP 150
46192: PUSH
46193: LD_VAR 0 5
46197: ARRAY
46198: PUSH
46199: LD_EXP 151
46203: LESS
46204: IFFALSE 46393
// begin for i := 1 to vehicles do
46206: LD_ADDR_VAR 0 4
46210: PUSH
46211: DOUBLE
46212: LD_INT 1
46214: DEC
46215: ST_TO_ADDR
46216: LD_VAR 0 2
46220: PUSH
46221: FOR_TO
46222: IFFALSE 46391
// begin if hackTanksCaptured [ index ] = hackLimit then
46224: LD_EXP 150
46228: PUSH
46229: LD_VAR 0 5
46233: ARRAY
46234: PUSH
46235: LD_EXP 151
46239: EQUAL
46240: IFFALSE 46244
// break ;
46242: GO 46391
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
46244: LD_ADDR_EXP 153
46248: PUSH
46249: LD_EXP 153
46253: PPUSH
46254: LD_VAR 0 5
46258: PPUSH
46259: LD_EXP 153
46263: PUSH
46264: LD_VAR 0 5
46268: ARRAY
46269: PUSH
46270: LD_INT 1
46272: PLUS
46273: PPUSH
46274: CALL_OW 1
46278: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
46279: LD_ADDR_EXP 150
46283: PUSH
46284: LD_EXP 150
46288: PPUSH
46289: LD_VAR 0 5
46293: PUSH
46294: LD_EXP 150
46298: PUSH
46299: LD_VAR 0 5
46303: ARRAY
46304: PUSH
46305: LD_INT 1
46307: PLUS
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PPUSH
46313: LD_VAR 0 2
46317: PUSH
46318: LD_VAR 0 4
46322: ARRAY
46323: PUSH
46324: LD_VAR 0 2
46328: PUSH
46329: LD_VAR 0 4
46333: ARRAY
46334: PPUSH
46335: CALL_OW 255
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PPUSH
46344: CALL 53799 0 3
46348: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
46349: LD_VAR 0 2
46353: PUSH
46354: LD_VAR 0 4
46358: ARRAY
46359: PPUSH
46360: LD_VAR 0 1
46364: PPUSH
46365: CALL_OW 255
46369: PPUSH
46370: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
46374: LD_VAR 0 2
46378: PUSH
46379: LD_VAR 0 4
46383: ARRAY
46384: PPUSH
46385: CALL_OW 141
// end ;
46389: GO 46221
46391: POP
46392: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46393: LD_VAR 0 1
46397: PPUSH
46398: LD_EXP 150
46402: PUSH
46403: LD_VAR 0 5
46407: ARRAY
46408: PUSH
46409: LD_INT 0
46411: PLUS
46412: PPUSH
46413: CALL_OW 505
// end ;
46417: LD_VAR 0 3
46421: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
46422: LD_INT 0
46424: PPUSH
46425: PPUSH
46426: PPUSH
46427: PPUSH
// if not hack in hackTanks then
46428: LD_VAR 0 1
46432: PUSH
46433: LD_EXP 149
46437: IN
46438: NOT
46439: IFFALSE 46443
// exit ;
46441: GO 46683
// index := GetElementIndex ( hackTanks , hack ) ;
46443: LD_ADDR_VAR 0 4
46447: PUSH
46448: LD_EXP 149
46452: PPUSH
46453: LD_VAR 0 1
46457: PPUSH
46458: CALL 53584 0 2
46462: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
46463: LD_ADDR_VAR 0 3
46467: PUSH
46468: DOUBLE
46469: LD_EXP 150
46473: PUSH
46474: LD_VAR 0 4
46478: ARRAY
46479: INC
46480: ST_TO_ADDR
46481: LD_INT 1
46483: PUSH
46484: FOR_DOWNTO
46485: IFFALSE 46657
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
46487: LD_ADDR_VAR 0 5
46491: PUSH
46492: LD_EXP 150
46496: PUSH
46497: LD_VAR 0 4
46501: ARRAY
46502: PUSH
46503: LD_VAR 0 3
46507: ARRAY
46508: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
46509: LD_VAR 0 5
46513: PUSH
46514: LD_INT 1
46516: ARRAY
46517: PPUSH
46518: CALL_OW 302
46522: NOT
46523: PUSH
46524: LD_VAR 0 5
46528: PUSH
46529: LD_INT 1
46531: ARRAY
46532: PPUSH
46533: CALL_OW 255
46537: PUSH
46538: LD_VAR 0 1
46542: PPUSH
46543: CALL_OW 255
46547: NONEQUAL
46548: OR
46549: IFFALSE 46655
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
46551: LD_VAR 0 5
46555: PUSH
46556: LD_INT 1
46558: ARRAY
46559: PPUSH
46560: CALL_OW 305
46564: PUSH
46565: LD_VAR 0 5
46569: PUSH
46570: LD_INT 1
46572: ARRAY
46573: PPUSH
46574: CALL_OW 255
46578: PUSH
46579: LD_VAR 0 1
46583: PPUSH
46584: CALL_OW 255
46588: EQUAL
46589: AND
46590: IFFALSE 46614
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
46592: LD_VAR 0 5
46596: PUSH
46597: LD_INT 1
46599: ARRAY
46600: PPUSH
46601: LD_VAR 0 5
46605: PUSH
46606: LD_INT 2
46608: ARRAY
46609: PPUSH
46610: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
46614: LD_ADDR_EXP 150
46618: PUSH
46619: LD_EXP 150
46623: PPUSH
46624: LD_VAR 0 4
46628: PPUSH
46629: LD_EXP 150
46633: PUSH
46634: LD_VAR 0 4
46638: ARRAY
46639: PPUSH
46640: LD_VAR 0 3
46644: PPUSH
46645: CALL_OW 3
46649: PPUSH
46650: CALL_OW 1
46654: ST_TO_ADDR
// end ; end ;
46655: GO 46484
46657: POP
46658: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46659: LD_VAR 0 1
46663: PPUSH
46664: LD_EXP 150
46668: PUSH
46669: LD_VAR 0 4
46673: ARRAY
46674: PUSH
46675: LD_INT 0
46677: PLUS
46678: PPUSH
46679: CALL_OW 505
// end ;
46683: LD_VAR 0 2
46687: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
46688: LD_INT 0
46690: PPUSH
46691: PPUSH
46692: PPUSH
46693: PPUSH
// if not hack in hackTanks then
46694: LD_VAR 0 1
46698: PUSH
46699: LD_EXP 149
46703: IN
46704: NOT
46705: IFFALSE 46709
// exit ;
46707: GO 46794
// index := GetElementIndex ( hackTanks , hack ) ;
46709: LD_ADDR_VAR 0 5
46713: PUSH
46714: LD_EXP 149
46718: PPUSH
46719: LD_VAR 0 1
46723: PPUSH
46724: CALL 53584 0 2
46728: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
46729: LD_ADDR_VAR 0 4
46733: PUSH
46734: DOUBLE
46735: LD_INT 1
46737: DEC
46738: ST_TO_ADDR
46739: LD_EXP 150
46743: PUSH
46744: LD_VAR 0 5
46748: ARRAY
46749: PUSH
46750: FOR_TO
46751: IFFALSE 46792
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
46753: LD_EXP 150
46757: PUSH
46758: LD_VAR 0 5
46762: ARRAY
46763: PUSH
46764: LD_VAR 0 4
46768: ARRAY
46769: PUSH
46770: LD_INT 1
46772: ARRAY
46773: PUSH
46774: LD_VAR 0 2
46778: EQUAL
46779: IFFALSE 46790
// KillUnit ( vehicle ) ;
46781: LD_VAR 0 2
46785: PPUSH
46786: CALL_OW 66
46790: GO 46750
46792: POP
46793: POP
// end ;
46794: LD_VAR 0 3
46798: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
46799: LD_EXP 154
46803: NOT
46804: IFFALSE 46839
46806: GO 46808
46808: DISABLE
// begin initMiner := true ;
46809: LD_ADDR_EXP 154
46813: PUSH
46814: LD_INT 1
46816: ST_TO_ADDR
// minersList := [ ] ;
46817: LD_ADDR_EXP 155
46821: PUSH
46822: EMPTY
46823: ST_TO_ADDR
// minerMinesList := [ ] ;
46824: LD_ADDR_EXP 156
46828: PUSH
46829: EMPTY
46830: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
46831: LD_ADDR_EXP 157
46835: PUSH
46836: LD_INT 5
46838: ST_TO_ADDR
// end ;
46839: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
46840: LD_EXP 154
46844: PUSH
46845: LD_INT 34
46847: PUSH
46848: LD_EXP 76
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PPUSH
46857: CALL_OW 69
46861: AND
46862: IFFALSE 47325
46864: GO 46866
46866: DISABLE
46867: LD_INT 0
46869: PPUSH
46870: PPUSH
46871: PPUSH
46872: PPUSH
// begin enable ;
46873: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
46874: LD_ADDR_VAR 0 1
46878: PUSH
46879: LD_INT 34
46881: PUSH
46882: LD_EXP 76
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PPUSH
46891: CALL_OW 69
46895: PUSH
46896: FOR_IN
46897: IFFALSE 46969
// begin if not i in minersList then
46899: LD_VAR 0 1
46903: PUSH
46904: LD_EXP 155
46908: IN
46909: NOT
46910: IFFALSE 46967
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
46912: LD_ADDR_EXP 155
46916: PUSH
46917: LD_EXP 155
46921: PPUSH
46922: LD_EXP 155
46926: PUSH
46927: LD_INT 1
46929: PLUS
46930: PPUSH
46931: LD_VAR 0 1
46935: PPUSH
46936: CALL_OW 1
46940: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
46941: LD_ADDR_EXP 156
46945: PUSH
46946: LD_EXP 156
46950: PPUSH
46951: LD_EXP 156
46955: PUSH
46956: LD_INT 1
46958: PLUS
46959: PPUSH
46960: EMPTY
46961: PPUSH
46962: CALL_OW 1
46966: ST_TO_ADDR
// end end ;
46967: GO 46896
46969: POP
46970: POP
// for i := minerMinesList downto 1 do
46971: LD_ADDR_VAR 0 1
46975: PUSH
46976: DOUBLE
46977: LD_EXP 156
46981: INC
46982: ST_TO_ADDR
46983: LD_INT 1
46985: PUSH
46986: FOR_DOWNTO
46987: IFFALSE 47323
// begin if IsLive ( minersList [ i ] ) then
46989: LD_EXP 155
46993: PUSH
46994: LD_VAR 0 1
46998: ARRAY
46999: PPUSH
47000: CALL_OW 300
47004: IFFALSE 47032
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
47006: LD_EXP 155
47010: PUSH
47011: LD_VAR 0 1
47015: ARRAY
47016: PPUSH
47017: LD_EXP 156
47021: PUSH
47022: LD_VAR 0 1
47026: ARRAY
47027: PPUSH
47028: CALL_OW 505
// if not minerMinesList [ i ] then
47032: LD_EXP 156
47036: PUSH
47037: LD_VAR 0 1
47041: ARRAY
47042: NOT
47043: IFFALSE 47047
// continue ;
47045: GO 46986
// for j := minerMinesList [ i ] downto 1 do
47047: LD_ADDR_VAR 0 2
47051: PUSH
47052: DOUBLE
47053: LD_EXP 156
47057: PUSH
47058: LD_VAR 0 1
47062: ARRAY
47063: INC
47064: ST_TO_ADDR
47065: LD_INT 1
47067: PUSH
47068: FOR_DOWNTO
47069: IFFALSE 47319
// begin side := GetSide ( minersList [ i ] ) ;
47071: LD_ADDR_VAR 0 3
47075: PUSH
47076: LD_EXP 155
47080: PUSH
47081: LD_VAR 0 1
47085: ARRAY
47086: PPUSH
47087: CALL_OW 255
47091: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
47092: LD_ADDR_VAR 0 4
47096: PUSH
47097: LD_EXP 156
47101: PUSH
47102: LD_VAR 0 1
47106: ARRAY
47107: PUSH
47108: LD_VAR 0 2
47112: ARRAY
47113: PUSH
47114: LD_INT 1
47116: ARRAY
47117: PPUSH
47118: LD_EXP 156
47122: PUSH
47123: LD_VAR 0 1
47127: ARRAY
47128: PUSH
47129: LD_VAR 0 2
47133: ARRAY
47134: PUSH
47135: LD_INT 2
47137: ARRAY
47138: PPUSH
47139: CALL_OW 428
47143: ST_TO_ADDR
// if not tmp then
47144: LD_VAR 0 4
47148: NOT
47149: IFFALSE 47153
// continue ;
47151: GO 47068
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
47153: LD_VAR 0 4
47157: PUSH
47158: LD_INT 81
47160: PUSH
47161: LD_VAR 0 3
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PPUSH
47170: CALL_OW 69
47174: IN
47175: PUSH
47176: LD_EXP 156
47180: PUSH
47181: LD_VAR 0 1
47185: ARRAY
47186: PUSH
47187: LD_VAR 0 2
47191: ARRAY
47192: PUSH
47193: LD_INT 1
47195: ARRAY
47196: PPUSH
47197: LD_EXP 156
47201: PUSH
47202: LD_VAR 0 1
47206: ARRAY
47207: PUSH
47208: LD_VAR 0 2
47212: ARRAY
47213: PUSH
47214: LD_INT 2
47216: ARRAY
47217: PPUSH
47218: CALL_OW 458
47222: AND
47223: IFFALSE 47317
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
47225: LD_EXP 156
47229: PUSH
47230: LD_VAR 0 1
47234: ARRAY
47235: PUSH
47236: LD_VAR 0 2
47240: ARRAY
47241: PUSH
47242: LD_INT 1
47244: ARRAY
47245: PPUSH
47246: LD_EXP 156
47250: PUSH
47251: LD_VAR 0 1
47255: ARRAY
47256: PUSH
47257: LD_VAR 0 2
47261: ARRAY
47262: PUSH
47263: LD_INT 2
47265: ARRAY
47266: PPUSH
47267: LD_VAR 0 3
47271: PPUSH
47272: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
47276: LD_ADDR_EXP 156
47280: PUSH
47281: LD_EXP 156
47285: PPUSH
47286: LD_VAR 0 1
47290: PPUSH
47291: LD_EXP 156
47295: PUSH
47296: LD_VAR 0 1
47300: ARRAY
47301: PPUSH
47302: LD_VAR 0 2
47306: PPUSH
47307: CALL_OW 3
47311: PPUSH
47312: CALL_OW 1
47316: ST_TO_ADDR
// end ; end ;
47317: GO 47068
47319: POP
47320: POP
// end ;
47321: GO 46986
47323: POP
47324: POP
// end ;
47325: PPOPN 4
47327: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
47328: LD_INT 0
47330: PPUSH
47331: PPUSH
// result := false ;
47332: LD_ADDR_VAR 0 4
47336: PUSH
47337: LD_INT 0
47339: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
47340: LD_VAR 0 1
47344: PPUSH
47345: CALL_OW 264
47349: PUSH
47350: LD_EXP 76
47354: EQUAL
47355: NOT
47356: IFFALSE 47360
// exit ;
47358: GO 47600
// index := GetElementIndex ( minersList , unit ) ;
47360: LD_ADDR_VAR 0 5
47364: PUSH
47365: LD_EXP 155
47369: PPUSH
47370: LD_VAR 0 1
47374: PPUSH
47375: CALL 53584 0 2
47379: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
47380: LD_EXP 156
47384: PUSH
47385: LD_VAR 0 5
47389: ARRAY
47390: PUSH
47391: LD_EXP 157
47395: GREATEREQUAL
47396: IFFALSE 47400
// exit ;
47398: GO 47600
// ComMoveXY ( unit , x , y ) ;
47400: LD_VAR 0 1
47404: PPUSH
47405: LD_VAR 0 2
47409: PPUSH
47410: LD_VAR 0 3
47414: PPUSH
47415: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
47419: LD_INT 35
47421: PPUSH
47422: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
47426: LD_VAR 0 1
47430: PPUSH
47431: LD_VAR 0 2
47435: PPUSH
47436: LD_VAR 0 3
47440: PPUSH
47441: CALL 84303 0 3
47445: NOT
47446: PUSH
47447: LD_VAR 0 1
47451: PPUSH
47452: CALL_OW 314
47456: AND
47457: IFFALSE 47461
// exit ;
47459: GO 47600
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
47461: LD_VAR 0 2
47465: PPUSH
47466: LD_VAR 0 3
47470: PPUSH
47471: CALL_OW 428
47475: PUSH
47476: LD_VAR 0 1
47480: EQUAL
47481: PUSH
47482: LD_VAR 0 1
47486: PPUSH
47487: CALL_OW 314
47491: NOT
47492: AND
47493: IFFALSE 47419
// PlaySoundXY ( x , y , PlantMine ) ;
47495: LD_VAR 0 2
47499: PPUSH
47500: LD_VAR 0 3
47504: PPUSH
47505: LD_STRING PlantMine
47507: PPUSH
47508: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
47512: LD_VAR 0 2
47516: PPUSH
47517: LD_VAR 0 3
47521: PPUSH
47522: LD_VAR 0 1
47526: PPUSH
47527: CALL_OW 255
47531: PPUSH
47532: LD_INT 0
47534: PPUSH
47535: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
47539: LD_ADDR_EXP 156
47543: PUSH
47544: LD_EXP 156
47548: PPUSH
47549: LD_VAR 0 5
47553: PUSH
47554: LD_EXP 156
47558: PUSH
47559: LD_VAR 0 5
47563: ARRAY
47564: PUSH
47565: LD_INT 1
47567: PLUS
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PPUSH
47573: LD_VAR 0 2
47577: PUSH
47578: LD_VAR 0 3
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PPUSH
47587: CALL 53799 0 3
47591: ST_TO_ADDR
// result := true ;
47592: LD_ADDR_VAR 0 4
47596: PUSH
47597: LD_INT 1
47599: ST_TO_ADDR
// end ;
47600: LD_VAR 0 4
47604: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
47605: LD_INT 0
47607: PPUSH
47608: PPUSH
47609: PPUSH
// if not unit in minersList then
47610: LD_VAR 0 1
47614: PUSH
47615: LD_EXP 155
47619: IN
47620: NOT
47621: IFFALSE 47625
// exit ;
47623: GO 48017
// index := GetElementIndex ( minersList , unit ) ;
47625: LD_ADDR_VAR 0 6
47629: PUSH
47630: LD_EXP 155
47634: PPUSH
47635: LD_VAR 0 1
47639: PPUSH
47640: CALL 53584 0 2
47644: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
47645: LD_ADDR_VAR 0 5
47649: PUSH
47650: DOUBLE
47651: LD_EXP 156
47655: PUSH
47656: LD_VAR 0 6
47660: ARRAY
47661: INC
47662: ST_TO_ADDR
47663: LD_INT 1
47665: PUSH
47666: FOR_DOWNTO
47667: IFFALSE 47828
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
47669: LD_EXP 156
47673: PUSH
47674: LD_VAR 0 6
47678: ARRAY
47679: PUSH
47680: LD_VAR 0 5
47684: ARRAY
47685: PUSH
47686: LD_INT 1
47688: ARRAY
47689: PUSH
47690: LD_VAR 0 2
47694: EQUAL
47695: PUSH
47696: LD_EXP 156
47700: PUSH
47701: LD_VAR 0 6
47705: ARRAY
47706: PUSH
47707: LD_VAR 0 5
47711: ARRAY
47712: PUSH
47713: LD_INT 2
47715: ARRAY
47716: PUSH
47717: LD_VAR 0 3
47721: EQUAL
47722: AND
47723: IFFALSE 47826
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47725: LD_EXP 156
47729: PUSH
47730: LD_VAR 0 6
47734: ARRAY
47735: PUSH
47736: LD_VAR 0 5
47740: ARRAY
47741: PUSH
47742: LD_INT 1
47744: ARRAY
47745: PPUSH
47746: LD_EXP 156
47750: PUSH
47751: LD_VAR 0 6
47755: ARRAY
47756: PUSH
47757: LD_VAR 0 5
47761: ARRAY
47762: PUSH
47763: LD_INT 2
47765: ARRAY
47766: PPUSH
47767: LD_VAR 0 1
47771: PPUSH
47772: CALL_OW 255
47776: PPUSH
47777: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47781: LD_ADDR_EXP 156
47785: PUSH
47786: LD_EXP 156
47790: PPUSH
47791: LD_VAR 0 6
47795: PPUSH
47796: LD_EXP 156
47800: PUSH
47801: LD_VAR 0 6
47805: ARRAY
47806: PPUSH
47807: LD_VAR 0 5
47811: PPUSH
47812: CALL_OW 3
47816: PPUSH
47817: CALL_OW 1
47821: ST_TO_ADDR
// exit ;
47822: POP
47823: POP
47824: GO 48017
// end ; end ;
47826: GO 47666
47828: POP
47829: POP
// for i := minerMinesList [ index ] downto 1 do
47830: LD_ADDR_VAR 0 5
47834: PUSH
47835: DOUBLE
47836: LD_EXP 156
47840: PUSH
47841: LD_VAR 0 6
47845: ARRAY
47846: INC
47847: ST_TO_ADDR
47848: LD_INT 1
47850: PUSH
47851: FOR_DOWNTO
47852: IFFALSE 48015
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
47854: LD_EXP 156
47858: PUSH
47859: LD_VAR 0 6
47863: ARRAY
47864: PUSH
47865: LD_VAR 0 5
47869: ARRAY
47870: PUSH
47871: LD_INT 1
47873: ARRAY
47874: PPUSH
47875: LD_EXP 156
47879: PUSH
47880: LD_VAR 0 6
47884: ARRAY
47885: PUSH
47886: LD_VAR 0 5
47890: ARRAY
47891: PUSH
47892: LD_INT 2
47894: ARRAY
47895: PPUSH
47896: LD_VAR 0 2
47900: PPUSH
47901: LD_VAR 0 3
47905: PPUSH
47906: CALL_OW 298
47910: PUSH
47911: LD_INT 6
47913: LESS
47914: IFFALSE 48013
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47916: LD_EXP 156
47920: PUSH
47921: LD_VAR 0 6
47925: ARRAY
47926: PUSH
47927: LD_VAR 0 5
47931: ARRAY
47932: PUSH
47933: LD_INT 1
47935: ARRAY
47936: PPUSH
47937: LD_EXP 156
47941: PUSH
47942: LD_VAR 0 6
47946: ARRAY
47947: PUSH
47948: LD_VAR 0 5
47952: ARRAY
47953: PUSH
47954: LD_INT 2
47956: ARRAY
47957: PPUSH
47958: LD_VAR 0 1
47962: PPUSH
47963: CALL_OW 255
47967: PPUSH
47968: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47972: LD_ADDR_EXP 156
47976: PUSH
47977: LD_EXP 156
47981: PPUSH
47982: LD_VAR 0 6
47986: PPUSH
47987: LD_EXP 156
47991: PUSH
47992: LD_VAR 0 6
47996: ARRAY
47997: PPUSH
47998: LD_VAR 0 5
48002: PPUSH
48003: CALL_OW 3
48007: PPUSH
48008: CALL_OW 1
48012: ST_TO_ADDR
// end ; end ;
48013: GO 47851
48015: POP
48016: POP
// end ;
48017: LD_VAR 0 4
48021: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
48022: LD_INT 0
48024: PPUSH
48025: PPUSH
48026: PPUSH
48027: PPUSH
48028: PPUSH
48029: PPUSH
48030: PPUSH
48031: PPUSH
48032: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
48033: LD_VAR 0 1
48037: PPUSH
48038: CALL_OW 264
48042: PUSH
48043: LD_EXP 76
48047: EQUAL
48048: NOT
48049: PUSH
48050: LD_VAR 0 1
48054: PUSH
48055: LD_EXP 155
48059: IN
48060: NOT
48061: OR
48062: IFFALSE 48066
// exit ;
48064: GO 48388
// index := GetElementIndex ( minersList , unit ) ;
48066: LD_ADDR_VAR 0 6
48070: PUSH
48071: LD_EXP 155
48075: PPUSH
48076: LD_VAR 0 1
48080: PPUSH
48081: CALL 53584 0 2
48085: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
48086: LD_ADDR_VAR 0 8
48090: PUSH
48091: LD_EXP 157
48095: PUSH
48096: LD_EXP 156
48100: PUSH
48101: LD_VAR 0 6
48105: ARRAY
48106: MINUS
48107: ST_TO_ADDR
// if not minesFreeAmount then
48108: LD_VAR 0 8
48112: NOT
48113: IFFALSE 48117
// exit ;
48115: GO 48388
// tmp := [ ] ;
48117: LD_ADDR_VAR 0 7
48121: PUSH
48122: EMPTY
48123: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
48124: LD_ADDR_VAR 0 5
48128: PUSH
48129: DOUBLE
48130: LD_INT 1
48132: DEC
48133: ST_TO_ADDR
48134: LD_VAR 0 8
48138: PUSH
48139: FOR_TO
48140: IFFALSE 48335
// begin _d := rand ( 0 , 5 ) ;
48142: LD_ADDR_VAR 0 11
48146: PUSH
48147: LD_INT 0
48149: PPUSH
48150: LD_INT 5
48152: PPUSH
48153: CALL_OW 12
48157: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
48158: LD_ADDR_VAR 0 12
48162: PUSH
48163: LD_INT 2
48165: PPUSH
48166: LD_INT 6
48168: PPUSH
48169: CALL_OW 12
48173: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
48174: LD_ADDR_VAR 0 9
48178: PUSH
48179: LD_VAR 0 2
48183: PPUSH
48184: LD_VAR 0 11
48188: PPUSH
48189: LD_VAR 0 12
48193: PPUSH
48194: CALL_OW 272
48198: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
48199: LD_ADDR_VAR 0 10
48203: PUSH
48204: LD_VAR 0 3
48208: PPUSH
48209: LD_VAR 0 11
48213: PPUSH
48214: LD_VAR 0 12
48218: PPUSH
48219: CALL_OW 273
48223: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
48224: LD_VAR 0 9
48228: PPUSH
48229: LD_VAR 0 10
48233: PPUSH
48234: CALL_OW 488
48238: PUSH
48239: LD_VAR 0 9
48243: PUSH
48244: LD_VAR 0 10
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_VAR 0 7
48257: IN
48258: NOT
48259: AND
48260: PUSH
48261: LD_VAR 0 9
48265: PPUSH
48266: LD_VAR 0 10
48270: PPUSH
48271: CALL_OW 458
48275: NOT
48276: AND
48277: IFFALSE 48319
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
48279: LD_ADDR_VAR 0 7
48283: PUSH
48284: LD_VAR 0 7
48288: PPUSH
48289: LD_VAR 0 7
48293: PUSH
48294: LD_INT 1
48296: PLUS
48297: PPUSH
48298: LD_VAR 0 9
48302: PUSH
48303: LD_VAR 0 10
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PPUSH
48312: CALL_OW 1
48316: ST_TO_ADDR
48317: GO 48333
// i := i - 1 ;
48319: LD_ADDR_VAR 0 5
48323: PUSH
48324: LD_VAR 0 5
48328: PUSH
48329: LD_INT 1
48331: MINUS
48332: ST_TO_ADDR
// end ;
48333: GO 48139
48335: POP
48336: POP
// for i in tmp do
48337: LD_ADDR_VAR 0 5
48341: PUSH
48342: LD_VAR 0 7
48346: PUSH
48347: FOR_IN
48348: IFFALSE 48386
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
48350: LD_VAR 0 1
48354: PPUSH
48355: LD_VAR 0 5
48359: PUSH
48360: LD_INT 1
48362: ARRAY
48363: PPUSH
48364: LD_VAR 0 5
48368: PUSH
48369: LD_INT 2
48371: ARRAY
48372: PPUSH
48373: CALL 47328 0 3
48377: NOT
48378: IFFALSE 48384
// exit ;
48380: POP
48381: POP
48382: GO 48388
48384: GO 48347
48386: POP
48387: POP
// end ;
48388: LD_VAR 0 4
48392: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
48393: LD_INT 0
48395: PPUSH
48396: PPUSH
48397: PPUSH
48398: PPUSH
48399: PPUSH
48400: PPUSH
48401: PPUSH
// if not GetClass ( unit ) = class_sniper then
48402: LD_VAR 0 1
48406: PPUSH
48407: CALL_OW 257
48411: PUSH
48412: LD_INT 5
48414: EQUAL
48415: NOT
48416: IFFALSE 48420
// exit ;
48418: GO 48808
// dist := 8 ;
48420: LD_ADDR_VAR 0 5
48424: PUSH
48425: LD_INT 8
48427: ST_TO_ADDR
// viewRange := 12 ;
48428: LD_ADDR_VAR 0 7
48432: PUSH
48433: LD_INT 12
48435: ST_TO_ADDR
// side := GetSide ( unit ) ;
48436: LD_ADDR_VAR 0 6
48440: PUSH
48441: LD_VAR 0 1
48445: PPUSH
48446: CALL_OW 255
48450: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
48451: LD_INT 61
48453: PPUSH
48454: LD_VAR 0 6
48458: PPUSH
48459: CALL_OW 321
48463: PUSH
48464: LD_INT 2
48466: EQUAL
48467: IFFALSE 48477
// viewRange := 16 ;
48469: LD_ADDR_VAR 0 7
48473: PUSH
48474: LD_INT 16
48476: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
48477: LD_VAR 0 1
48481: PPUSH
48482: LD_VAR 0 2
48486: PPUSH
48487: LD_VAR 0 3
48491: PPUSH
48492: CALL_OW 297
48496: PUSH
48497: LD_VAR 0 5
48501: GREATER
48502: IFFALSE 48581
// begin ComMoveXY ( unit , x , y ) ;
48504: LD_VAR 0 1
48508: PPUSH
48509: LD_VAR 0 2
48513: PPUSH
48514: LD_VAR 0 3
48518: PPUSH
48519: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48523: LD_INT 35
48525: PPUSH
48526: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
48530: LD_VAR 0 1
48534: PPUSH
48535: LD_VAR 0 2
48539: PPUSH
48540: LD_VAR 0 3
48544: PPUSH
48545: CALL 84303 0 3
48549: NOT
48550: IFFALSE 48554
// exit ;
48552: GO 48808
// until GetDistUnitXY ( unit , x , y ) < dist ;
48554: LD_VAR 0 1
48558: PPUSH
48559: LD_VAR 0 2
48563: PPUSH
48564: LD_VAR 0 3
48568: PPUSH
48569: CALL_OW 297
48573: PUSH
48574: LD_VAR 0 5
48578: LESS
48579: IFFALSE 48523
// end ; ComTurnXY ( unit , x , y ) ;
48581: LD_VAR 0 1
48585: PPUSH
48586: LD_VAR 0 2
48590: PPUSH
48591: LD_VAR 0 3
48595: PPUSH
48596: CALL_OW 118
// wait ( 5 ) ;
48600: LD_INT 5
48602: PPUSH
48603: CALL_OW 67
// _d := GetDir ( unit ) ;
48607: LD_ADDR_VAR 0 10
48611: PUSH
48612: LD_VAR 0 1
48616: PPUSH
48617: CALL_OW 254
48621: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
48622: LD_ADDR_VAR 0 8
48626: PUSH
48627: LD_VAR 0 1
48631: PPUSH
48632: CALL_OW 250
48636: PPUSH
48637: LD_VAR 0 10
48641: PPUSH
48642: LD_VAR 0 5
48646: PPUSH
48647: CALL_OW 272
48651: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
48652: LD_ADDR_VAR 0 9
48656: PUSH
48657: LD_VAR 0 1
48661: PPUSH
48662: CALL_OW 251
48666: PPUSH
48667: LD_VAR 0 10
48671: PPUSH
48672: LD_VAR 0 5
48676: PPUSH
48677: CALL_OW 273
48681: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48682: LD_VAR 0 8
48686: PPUSH
48687: LD_VAR 0 9
48691: PPUSH
48692: CALL_OW 488
48696: NOT
48697: IFFALSE 48701
// exit ;
48699: GO 48808
// ComAnimCustom ( unit , 1 ) ;
48701: LD_VAR 0 1
48705: PPUSH
48706: LD_INT 1
48708: PPUSH
48709: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
48713: LD_VAR 0 8
48717: PPUSH
48718: LD_VAR 0 9
48722: PPUSH
48723: LD_VAR 0 6
48727: PPUSH
48728: LD_VAR 0 7
48732: PPUSH
48733: CALL_OW 330
// repeat wait ( 1 ) ;
48737: LD_INT 1
48739: PPUSH
48740: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
48744: LD_VAR 0 1
48748: PPUSH
48749: CALL_OW 316
48753: PUSH
48754: LD_VAR 0 1
48758: PPUSH
48759: CALL_OW 314
48763: OR
48764: PUSH
48765: LD_VAR 0 1
48769: PPUSH
48770: CALL_OW 302
48774: NOT
48775: OR
48776: PUSH
48777: LD_VAR 0 1
48781: PPUSH
48782: CALL_OW 301
48786: OR
48787: IFFALSE 48737
// RemoveSeeing ( _x , _y , side ) ;
48789: LD_VAR 0 8
48793: PPUSH
48794: LD_VAR 0 9
48798: PPUSH
48799: LD_VAR 0 6
48803: PPUSH
48804: CALL_OW 331
// end ; end_of_file
48808: LD_VAR 0 4
48812: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
48813: LD_INT 0
48815: PPUSH
48816: PPUSH
// if exist_mode then
48817: LD_VAR 0 2
48821: IFFALSE 48846
// unit := CreateCharacter ( prefix & ident ) else
48823: LD_ADDR_VAR 0 5
48827: PUSH
48828: LD_VAR 0 3
48832: PUSH
48833: LD_VAR 0 1
48837: STR
48838: PPUSH
48839: CALL_OW 34
48843: ST_TO_ADDR
48844: GO 48861
// unit := NewCharacter ( ident ) ;
48846: LD_ADDR_VAR 0 5
48850: PUSH
48851: LD_VAR 0 1
48855: PPUSH
48856: CALL_OW 25
48860: ST_TO_ADDR
// result := unit ;
48861: LD_ADDR_VAR 0 4
48865: PUSH
48866: LD_VAR 0 5
48870: ST_TO_ADDR
// end ;
48871: LD_VAR 0 4
48875: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
48876: LD_INT 0
48878: PPUSH
48879: PPUSH
// if not side or not nation then
48880: LD_VAR 0 1
48884: NOT
48885: PUSH
48886: LD_VAR 0 2
48890: NOT
48891: OR
48892: IFFALSE 48896
// exit ;
48894: GO 49664
// case nation of nation_american :
48896: LD_VAR 0 2
48900: PUSH
48901: LD_INT 1
48903: DOUBLE
48904: EQUAL
48905: IFTRUE 48909
48907: GO 49123
48909: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
48910: LD_ADDR_VAR 0 4
48914: PUSH
48915: LD_INT 35
48917: PUSH
48918: LD_INT 45
48920: PUSH
48921: LD_INT 46
48923: PUSH
48924: LD_INT 47
48926: PUSH
48927: LD_INT 82
48929: PUSH
48930: LD_INT 83
48932: PUSH
48933: LD_INT 84
48935: PUSH
48936: LD_INT 85
48938: PUSH
48939: LD_INT 86
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 2
48947: PUSH
48948: LD_INT 6
48950: PUSH
48951: LD_INT 15
48953: PUSH
48954: LD_INT 16
48956: PUSH
48957: LD_INT 7
48959: PUSH
48960: LD_INT 12
48962: PUSH
48963: LD_INT 13
48965: PUSH
48966: LD_INT 10
48968: PUSH
48969: LD_INT 14
48971: PUSH
48972: LD_INT 20
48974: PUSH
48975: LD_INT 21
48977: PUSH
48978: LD_INT 22
48980: PUSH
48981: LD_INT 25
48983: PUSH
48984: LD_INT 32
48986: PUSH
48987: LD_INT 27
48989: PUSH
48990: LD_INT 36
48992: PUSH
48993: LD_INT 69
48995: PUSH
48996: LD_INT 39
48998: PUSH
48999: LD_INT 34
49001: PUSH
49002: LD_INT 40
49004: PUSH
49005: LD_INT 48
49007: PUSH
49008: LD_INT 49
49010: PUSH
49011: LD_INT 50
49013: PUSH
49014: LD_INT 51
49016: PUSH
49017: LD_INT 52
49019: PUSH
49020: LD_INT 53
49022: PUSH
49023: LD_INT 54
49025: PUSH
49026: LD_INT 55
49028: PUSH
49029: LD_INT 56
49031: PUSH
49032: LD_INT 57
49034: PUSH
49035: LD_INT 58
49037: PUSH
49038: LD_INT 59
49040: PUSH
49041: LD_INT 60
49043: PUSH
49044: LD_INT 61
49046: PUSH
49047: LD_INT 62
49049: PUSH
49050: LD_INT 80
49052: PUSH
49053: LD_INT 82
49055: PUSH
49056: LD_INT 83
49058: PUSH
49059: LD_INT 84
49061: PUSH
49062: LD_INT 85
49064: PUSH
49065: LD_INT 86
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: ST_TO_ADDR
49121: GO 49588
49123: LD_INT 2
49125: DOUBLE
49126: EQUAL
49127: IFTRUE 49131
49129: GO 49357
49131: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
49132: LD_ADDR_VAR 0 4
49136: PUSH
49137: LD_INT 35
49139: PUSH
49140: LD_INT 45
49142: PUSH
49143: LD_INT 46
49145: PUSH
49146: LD_INT 47
49148: PUSH
49149: LD_INT 82
49151: PUSH
49152: LD_INT 83
49154: PUSH
49155: LD_INT 84
49157: PUSH
49158: LD_INT 85
49160: PUSH
49161: LD_INT 87
49163: PUSH
49164: LD_INT 70
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: LD_INT 11
49172: PUSH
49173: LD_INT 3
49175: PUSH
49176: LD_INT 4
49178: PUSH
49179: LD_INT 5
49181: PUSH
49182: LD_INT 6
49184: PUSH
49185: LD_INT 15
49187: PUSH
49188: LD_INT 18
49190: PUSH
49191: LD_INT 7
49193: PUSH
49194: LD_INT 17
49196: PUSH
49197: LD_INT 8
49199: PUSH
49200: LD_INT 20
49202: PUSH
49203: LD_INT 21
49205: PUSH
49206: LD_INT 22
49208: PUSH
49209: LD_INT 72
49211: PUSH
49212: LD_INT 26
49214: PUSH
49215: LD_INT 69
49217: PUSH
49218: LD_INT 39
49220: PUSH
49221: LD_INT 40
49223: PUSH
49224: LD_INT 41
49226: PUSH
49227: LD_INT 42
49229: PUSH
49230: LD_INT 43
49232: PUSH
49233: LD_INT 48
49235: PUSH
49236: LD_INT 49
49238: PUSH
49239: LD_INT 50
49241: PUSH
49242: LD_INT 51
49244: PUSH
49245: LD_INT 52
49247: PUSH
49248: LD_INT 53
49250: PUSH
49251: LD_INT 54
49253: PUSH
49254: LD_INT 55
49256: PUSH
49257: LD_INT 56
49259: PUSH
49260: LD_INT 60
49262: PUSH
49263: LD_INT 61
49265: PUSH
49266: LD_INT 62
49268: PUSH
49269: LD_INT 66
49271: PUSH
49272: LD_INT 67
49274: PUSH
49275: LD_INT 68
49277: PUSH
49278: LD_INT 81
49280: PUSH
49281: LD_INT 82
49283: PUSH
49284: LD_INT 83
49286: PUSH
49287: LD_INT 84
49289: PUSH
49290: LD_INT 85
49292: PUSH
49293: LD_INT 87
49295: PUSH
49296: LD_INT 88
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: ST_TO_ADDR
49355: GO 49588
49357: LD_INT 3
49359: DOUBLE
49360: EQUAL
49361: IFTRUE 49365
49363: GO 49587
49365: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
49366: LD_ADDR_VAR 0 4
49370: PUSH
49371: LD_INT 46
49373: PUSH
49374: LD_INT 47
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 82
49385: PUSH
49386: LD_INT 83
49388: PUSH
49389: LD_INT 84
49391: PUSH
49392: LD_INT 85
49394: PUSH
49395: LD_INT 86
49397: PUSH
49398: LD_INT 11
49400: PUSH
49401: LD_INT 9
49403: PUSH
49404: LD_INT 20
49406: PUSH
49407: LD_INT 19
49409: PUSH
49410: LD_INT 21
49412: PUSH
49413: LD_INT 24
49415: PUSH
49416: LD_INT 22
49418: PUSH
49419: LD_INT 25
49421: PUSH
49422: LD_INT 28
49424: PUSH
49425: LD_INT 29
49427: PUSH
49428: LD_INT 30
49430: PUSH
49431: LD_INT 31
49433: PUSH
49434: LD_INT 37
49436: PUSH
49437: LD_INT 38
49439: PUSH
49440: LD_INT 32
49442: PUSH
49443: LD_INT 27
49445: PUSH
49446: LD_INT 33
49448: PUSH
49449: LD_INT 69
49451: PUSH
49452: LD_INT 39
49454: PUSH
49455: LD_INT 34
49457: PUSH
49458: LD_INT 40
49460: PUSH
49461: LD_INT 71
49463: PUSH
49464: LD_INT 23
49466: PUSH
49467: LD_INT 44
49469: PUSH
49470: LD_INT 48
49472: PUSH
49473: LD_INT 49
49475: PUSH
49476: LD_INT 50
49478: PUSH
49479: LD_INT 51
49481: PUSH
49482: LD_INT 52
49484: PUSH
49485: LD_INT 53
49487: PUSH
49488: LD_INT 54
49490: PUSH
49491: LD_INT 55
49493: PUSH
49494: LD_INT 56
49496: PUSH
49497: LD_INT 57
49499: PUSH
49500: LD_INT 58
49502: PUSH
49503: LD_INT 59
49505: PUSH
49506: LD_INT 63
49508: PUSH
49509: LD_INT 64
49511: PUSH
49512: LD_INT 65
49514: PUSH
49515: LD_INT 82
49517: PUSH
49518: LD_INT 83
49520: PUSH
49521: LD_INT 84
49523: PUSH
49524: LD_INT 85
49526: PUSH
49527: LD_INT 86
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: ST_TO_ADDR
49585: GO 49588
49587: POP
// if state > - 1 and state < 3 then
49588: LD_VAR 0 3
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: GREATER
49597: PUSH
49598: LD_VAR 0 3
49602: PUSH
49603: LD_INT 3
49605: LESS
49606: AND
49607: IFFALSE 49664
// for i in result do
49609: LD_ADDR_VAR 0 5
49613: PUSH
49614: LD_VAR 0 4
49618: PUSH
49619: FOR_IN
49620: IFFALSE 49662
// if GetTech ( i , side ) <> state then
49622: LD_VAR 0 5
49626: PPUSH
49627: LD_VAR 0 1
49631: PPUSH
49632: CALL_OW 321
49636: PUSH
49637: LD_VAR 0 3
49641: NONEQUAL
49642: IFFALSE 49660
// result := result diff i ;
49644: LD_ADDR_VAR 0 4
49648: PUSH
49649: LD_VAR 0 4
49653: PUSH
49654: LD_VAR 0 5
49658: DIFF
49659: ST_TO_ADDR
49660: GO 49619
49662: POP
49663: POP
// end ;
49664: LD_VAR 0 4
49668: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
49669: LD_INT 0
49671: PPUSH
49672: PPUSH
49673: PPUSH
// result := true ;
49674: LD_ADDR_VAR 0 3
49678: PUSH
49679: LD_INT 1
49681: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
49682: LD_ADDR_VAR 0 5
49686: PUSH
49687: LD_VAR 0 2
49691: PPUSH
49692: CALL_OW 480
49696: ST_TO_ADDR
// if not tmp then
49697: LD_VAR 0 5
49701: NOT
49702: IFFALSE 49706
// exit ;
49704: GO 49755
// for i in tmp do
49706: LD_ADDR_VAR 0 4
49710: PUSH
49711: LD_VAR 0 5
49715: PUSH
49716: FOR_IN
49717: IFFALSE 49753
// if GetTech ( i , side ) <> state_researched then
49719: LD_VAR 0 4
49723: PPUSH
49724: LD_VAR 0 1
49728: PPUSH
49729: CALL_OW 321
49733: PUSH
49734: LD_INT 2
49736: NONEQUAL
49737: IFFALSE 49751
// begin result := false ;
49739: LD_ADDR_VAR 0 3
49743: PUSH
49744: LD_INT 0
49746: ST_TO_ADDR
// exit ;
49747: POP
49748: POP
49749: GO 49755
// end ;
49751: GO 49716
49753: POP
49754: POP
// end ;
49755: LD_VAR 0 3
49759: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
49760: LD_INT 0
49762: PPUSH
49763: PPUSH
49764: PPUSH
49765: PPUSH
49766: PPUSH
49767: PPUSH
49768: PPUSH
49769: PPUSH
49770: PPUSH
49771: PPUSH
49772: PPUSH
49773: PPUSH
49774: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
49775: LD_VAR 0 1
49779: NOT
49780: PUSH
49781: LD_VAR 0 1
49785: PPUSH
49786: CALL_OW 257
49790: PUSH
49791: LD_INT 9
49793: NONEQUAL
49794: OR
49795: IFFALSE 49799
// exit ;
49797: GO 50372
// side := GetSide ( unit ) ;
49799: LD_ADDR_VAR 0 9
49803: PUSH
49804: LD_VAR 0 1
49808: PPUSH
49809: CALL_OW 255
49813: ST_TO_ADDR
// tech_space := tech_spacanom ;
49814: LD_ADDR_VAR 0 12
49818: PUSH
49819: LD_INT 29
49821: ST_TO_ADDR
// tech_time := tech_taurad ;
49822: LD_ADDR_VAR 0 13
49826: PUSH
49827: LD_INT 28
49829: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
49830: LD_ADDR_VAR 0 11
49834: PUSH
49835: LD_VAR 0 1
49839: PPUSH
49840: CALL_OW 310
49844: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
49845: LD_VAR 0 11
49849: PPUSH
49850: CALL_OW 247
49854: PUSH
49855: LD_INT 2
49857: EQUAL
49858: IFFALSE 49862
// exit ;
49860: GO 50372
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49862: LD_ADDR_VAR 0 8
49866: PUSH
49867: LD_INT 81
49869: PUSH
49870: LD_VAR 0 9
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: LD_INT 21
49884: PUSH
49885: LD_INT 3
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PPUSH
49900: CALL_OW 69
49904: ST_TO_ADDR
// if not tmp then
49905: LD_VAR 0 8
49909: NOT
49910: IFFALSE 49914
// exit ;
49912: GO 50372
// if in_unit then
49914: LD_VAR 0 11
49918: IFFALSE 49942
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
49920: LD_ADDR_VAR 0 10
49924: PUSH
49925: LD_VAR 0 8
49929: PPUSH
49930: LD_VAR 0 11
49934: PPUSH
49935: CALL_OW 74
49939: ST_TO_ADDR
49940: GO 49962
// enemy := NearestUnitToUnit ( tmp , unit ) ;
49942: LD_ADDR_VAR 0 10
49946: PUSH
49947: LD_VAR 0 8
49951: PPUSH
49952: LD_VAR 0 1
49956: PPUSH
49957: CALL_OW 74
49961: ST_TO_ADDR
// if not enemy then
49962: LD_VAR 0 10
49966: NOT
49967: IFFALSE 49971
// exit ;
49969: GO 50372
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
49971: LD_VAR 0 11
49975: PUSH
49976: LD_VAR 0 11
49980: PPUSH
49981: LD_VAR 0 10
49985: PPUSH
49986: CALL_OW 296
49990: PUSH
49991: LD_INT 13
49993: GREATER
49994: AND
49995: PUSH
49996: LD_VAR 0 1
50000: PPUSH
50001: LD_VAR 0 10
50005: PPUSH
50006: CALL_OW 296
50010: PUSH
50011: LD_INT 12
50013: GREATER
50014: OR
50015: IFFALSE 50019
// exit ;
50017: GO 50372
// missile := [ 1 ] ;
50019: LD_ADDR_VAR 0 14
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: ST_TO_ADDR
// if Researched ( side , tech_space ) then
50030: LD_VAR 0 9
50034: PPUSH
50035: LD_VAR 0 12
50039: PPUSH
50040: CALL_OW 325
50044: IFFALSE 50073
// missile := Replace ( missile , missile + 1 , 2 ) ;
50046: LD_ADDR_VAR 0 14
50050: PUSH
50051: LD_VAR 0 14
50055: PPUSH
50056: LD_VAR 0 14
50060: PUSH
50061: LD_INT 1
50063: PLUS
50064: PPUSH
50065: LD_INT 2
50067: PPUSH
50068: CALL_OW 1
50072: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
50073: LD_VAR 0 9
50077: PPUSH
50078: LD_VAR 0 13
50082: PPUSH
50083: CALL_OW 325
50087: PUSH
50088: LD_VAR 0 10
50092: PPUSH
50093: CALL_OW 255
50097: PPUSH
50098: LD_VAR 0 13
50102: PPUSH
50103: CALL_OW 325
50107: NOT
50108: AND
50109: IFFALSE 50138
// missile := Replace ( missile , missile + 1 , 3 ) ;
50111: LD_ADDR_VAR 0 14
50115: PUSH
50116: LD_VAR 0 14
50120: PPUSH
50121: LD_VAR 0 14
50125: PUSH
50126: LD_INT 1
50128: PLUS
50129: PPUSH
50130: LD_INT 3
50132: PPUSH
50133: CALL_OW 1
50137: ST_TO_ADDR
// if missile < 2 then
50138: LD_VAR 0 14
50142: PUSH
50143: LD_INT 2
50145: LESS
50146: IFFALSE 50150
// exit ;
50148: GO 50372
// x := GetX ( enemy ) ;
50150: LD_ADDR_VAR 0 4
50154: PUSH
50155: LD_VAR 0 10
50159: PPUSH
50160: CALL_OW 250
50164: ST_TO_ADDR
// y := GetY ( enemy ) ;
50165: LD_ADDR_VAR 0 5
50169: PUSH
50170: LD_VAR 0 10
50174: PPUSH
50175: CALL_OW 251
50179: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
50180: LD_ADDR_VAR 0 6
50184: PUSH
50185: LD_VAR 0 4
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PPUSH
50194: LD_INT 1
50196: PPUSH
50197: CALL_OW 12
50201: PLUS
50202: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
50203: LD_ADDR_VAR 0 7
50207: PUSH
50208: LD_VAR 0 5
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PPUSH
50217: LD_INT 1
50219: PPUSH
50220: CALL_OW 12
50224: PLUS
50225: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50226: LD_VAR 0 6
50230: PPUSH
50231: LD_VAR 0 7
50235: PPUSH
50236: CALL_OW 488
50240: NOT
50241: IFFALSE 50263
// begin _x := x ;
50243: LD_ADDR_VAR 0 6
50247: PUSH
50248: LD_VAR 0 4
50252: ST_TO_ADDR
// _y := y ;
50253: LD_ADDR_VAR 0 7
50257: PUSH
50258: LD_VAR 0 5
50262: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
50263: LD_ADDR_VAR 0 3
50267: PUSH
50268: LD_INT 1
50270: PPUSH
50271: LD_VAR 0 14
50275: PPUSH
50276: CALL_OW 12
50280: ST_TO_ADDR
// case i of 1 :
50281: LD_VAR 0 3
50285: PUSH
50286: LD_INT 1
50288: DOUBLE
50289: EQUAL
50290: IFTRUE 50294
50292: GO 50311
50294: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
50295: LD_VAR 0 1
50299: PPUSH
50300: LD_VAR 0 10
50304: PPUSH
50305: CALL_OW 115
50309: GO 50372
50311: LD_INT 2
50313: DOUBLE
50314: EQUAL
50315: IFTRUE 50319
50317: GO 50341
50319: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
50320: LD_VAR 0 1
50324: PPUSH
50325: LD_VAR 0 6
50329: PPUSH
50330: LD_VAR 0 7
50334: PPUSH
50335: CALL_OW 153
50339: GO 50372
50341: LD_INT 3
50343: DOUBLE
50344: EQUAL
50345: IFTRUE 50349
50347: GO 50371
50349: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
50350: LD_VAR 0 1
50354: PPUSH
50355: LD_VAR 0 6
50359: PPUSH
50360: LD_VAR 0 7
50364: PPUSH
50365: CALL_OW 154
50369: GO 50372
50371: POP
// end ;
50372: LD_VAR 0 2
50376: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
50377: LD_INT 0
50379: PPUSH
50380: PPUSH
50381: PPUSH
50382: PPUSH
50383: PPUSH
50384: PPUSH
// if not unit or not building then
50385: LD_VAR 0 1
50389: NOT
50390: PUSH
50391: LD_VAR 0 2
50395: NOT
50396: OR
50397: IFFALSE 50401
// exit ;
50399: GO 50559
// x := GetX ( building ) ;
50401: LD_ADDR_VAR 0 5
50405: PUSH
50406: LD_VAR 0 2
50410: PPUSH
50411: CALL_OW 250
50415: ST_TO_ADDR
// y := GetY ( building ) ;
50416: LD_ADDR_VAR 0 6
50420: PUSH
50421: LD_VAR 0 2
50425: PPUSH
50426: CALL_OW 251
50430: ST_TO_ADDR
// for i = 0 to 5 do
50431: LD_ADDR_VAR 0 4
50435: PUSH
50436: DOUBLE
50437: LD_INT 0
50439: DEC
50440: ST_TO_ADDR
50441: LD_INT 5
50443: PUSH
50444: FOR_TO
50445: IFFALSE 50557
// begin _x := ShiftX ( x , i , 3 ) ;
50447: LD_ADDR_VAR 0 7
50451: PUSH
50452: LD_VAR 0 5
50456: PPUSH
50457: LD_VAR 0 4
50461: PPUSH
50462: LD_INT 3
50464: PPUSH
50465: CALL_OW 272
50469: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
50470: LD_ADDR_VAR 0 8
50474: PUSH
50475: LD_VAR 0 6
50479: PPUSH
50480: LD_VAR 0 4
50484: PPUSH
50485: LD_INT 3
50487: PPUSH
50488: CALL_OW 273
50492: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50493: LD_VAR 0 7
50497: PPUSH
50498: LD_VAR 0 8
50502: PPUSH
50503: CALL_OW 488
50507: NOT
50508: IFFALSE 50512
// continue ;
50510: GO 50444
// if HexInfo ( _x , _y ) = 0 then
50512: LD_VAR 0 7
50516: PPUSH
50517: LD_VAR 0 8
50521: PPUSH
50522: CALL_OW 428
50526: PUSH
50527: LD_INT 0
50529: EQUAL
50530: IFFALSE 50555
// begin ComMoveXY ( unit , _x , _y ) ;
50532: LD_VAR 0 1
50536: PPUSH
50537: LD_VAR 0 7
50541: PPUSH
50542: LD_VAR 0 8
50546: PPUSH
50547: CALL_OW 111
// exit ;
50551: POP
50552: POP
50553: GO 50559
// end ; end ;
50555: GO 50444
50557: POP
50558: POP
// end ;
50559: LD_VAR 0 3
50563: RET
// export function ScanBase ( side , base_area ) ; begin
50564: LD_INT 0
50566: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
50567: LD_ADDR_VAR 0 3
50571: PUSH
50572: LD_VAR 0 2
50576: PPUSH
50577: LD_INT 81
50579: PUSH
50580: LD_VAR 0 1
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PPUSH
50589: CALL_OW 70
50593: ST_TO_ADDR
// end ;
50594: LD_VAR 0 3
50598: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
50599: LD_INT 0
50601: PPUSH
50602: PPUSH
50603: PPUSH
50604: PPUSH
// result := false ;
50605: LD_ADDR_VAR 0 2
50609: PUSH
50610: LD_INT 0
50612: ST_TO_ADDR
// side := GetSide ( unit ) ;
50613: LD_ADDR_VAR 0 3
50617: PUSH
50618: LD_VAR 0 1
50622: PPUSH
50623: CALL_OW 255
50627: ST_TO_ADDR
// nat := GetNation ( unit ) ;
50628: LD_ADDR_VAR 0 4
50632: PUSH
50633: LD_VAR 0 1
50637: PPUSH
50638: CALL_OW 248
50642: ST_TO_ADDR
// case nat of 1 :
50643: LD_VAR 0 4
50647: PUSH
50648: LD_INT 1
50650: DOUBLE
50651: EQUAL
50652: IFTRUE 50656
50654: GO 50667
50656: POP
// tech := tech_lassight ; 2 :
50657: LD_ADDR_VAR 0 5
50661: PUSH
50662: LD_INT 12
50664: ST_TO_ADDR
50665: GO 50706
50667: LD_INT 2
50669: DOUBLE
50670: EQUAL
50671: IFTRUE 50675
50673: GO 50686
50675: POP
// tech := tech_mortar ; 3 :
50676: LD_ADDR_VAR 0 5
50680: PUSH
50681: LD_INT 41
50683: ST_TO_ADDR
50684: GO 50706
50686: LD_INT 3
50688: DOUBLE
50689: EQUAL
50690: IFTRUE 50694
50692: GO 50705
50694: POP
// tech := tech_bazooka ; end ;
50695: LD_ADDR_VAR 0 5
50699: PUSH
50700: LD_INT 44
50702: ST_TO_ADDR
50703: GO 50706
50705: POP
// if Researched ( side , tech ) then
50706: LD_VAR 0 3
50710: PPUSH
50711: LD_VAR 0 5
50715: PPUSH
50716: CALL_OW 325
50720: IFFALSE 50747
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
50722: LD_ADDR_VAR 0 2
50726: PUSH
50727: LD_INT 5
50729: PUSH
50730: LD_INT 8
50732: PUSH
50733: LD_INT 9
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: LIST
50740: PUSH
50741: LD_VAR 0 4
50745: ARRAY
50746: ST_TO_ADDR
// end ;
50747: LD_VAR 0 2
50751: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
50752: LD_INT 0
50754: PPUSH
50755: PPUSH
50756: PPUSH
// if not mines then
50757: LD_VAR 0 2
50761: NOT
50762: IFFALSE 50766
// exit ;
50764: GO 50910
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50766: LD_ADDR_VAR 0 5
50770: PUSH
50771: LD_INT 81
50773: PUSH
50774: LD_VAR 0 1
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 3
50785: PUSH
50786: LD_INT 21
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PPUSH
50804: CALL_OW 69
50808: ST_TO_ADDR
// for i in mines do
50809: LD_ADDR_VAR 0 4
50813: PUSH
50814: LD_VAR 0 2
50818: PUSH
50819: FOR_IN
50820: IFFALSE 50908
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
50822: LD_VAR 0 4
50826: PUSH
50827: LD_INT 1
50829: ARRAY
50830: PPUSH
50831: LD_VAR 0 4
50835: PUSH
50836: LD_INT 2
50838: ARRAY
50839: PPUSH
50840: CALL_OW 458
50844: NOT
50845: IFFALSE 50849
// continue ;
50847: GO 50819
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
50849: LD_VAR 0 4
50853: PUSH
50854: LD_INT 1
50856: ARRAY
50857: PPUSH
50858: LD_VAR 0 4
50862: PUSH
50863: LD_INT 2
50865: ARRAY
50866: PPUSH
50867: CALL_OW 428
50871: PUSH
50872: LD_VAR 0 5
50876: IN
50877: IFFALSE 50906
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
50879: LD_VAR 0 4
50883: PUSH
50884: LD_INT 1
50886: ARRAY
50887: PPUSH
50888: LD_VAR 0 4
50892: PUSH
50893: LD_INT 2
50895: ARRAY
50896: PPUSH
50897: LD_VAR 0 1
50901: PPUSH
50902: CALL_OW 456
// end ;
50906: GO 50819
50908: POP
50909: POP
// end ;
50910: LD_VAR 0 3
50914: RET
// export function Count ( array ) ; var i ; begin
50915: LD_INT 0
50917: PPUSH
50918: PPUSH
// result := 0 ;
50919: LD_ADDR_VAR 0 2
50923: PUSH
50924: LD_INT 0
50926: ST_TO_ADDR
// for i in array do
50927: LD_ADDR_VAR 0 3
50931: PUSH
50932: LD_VAR 0 1
50936: PUSH
50937: FOR_IN
50938: IFFALSE 50962
// if i then
50940: LD_VAR 0 3
50944: IFFALSE 50960
// result := result + 1 ;
50946: LD_ADDR_VAR 0 2
50950: PUSH
50951: LD_VAR 0 2
50955: PUSH
50956: LD_INT 1
50958: PLUS
50959: ST_TO_ADDR
50960: GO 50937
50962: POP
50963: POP
// end ;
50964: LD_VAR 0 2
50968: RET
// export function IsEmpty ( building ) ; begin
50969: LD_INT 0
50971: PPUSH
// if not building then
50972: LD_VAR 0 1
50976: NOT
50977: IFFALSE 50981
// exit ;
50979: GO 51024
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
50981: LD_ADDR_VAR 0 2
50985: PUSH
50986: LD_VAR 0 1
50990: PUSH
50991: LD_INT 22
50993: PUSH
50994: LD_VAR 0 1
50998: PPUSH
50999: CALL_OW 255
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 58
51010: PUSH
51011: EMPTY
51012: LIST
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PPUSH
51018: CALL_OW 69
51022: IN
51023: ST_TO_ADDR
// end ;
51024: LD_VAR 0 2
51028: RET
// export function IsNotFull ( building ) ; begin
51029: LD_INT 0
51031: PPUSH
// if not building then
51032: LD_VAR 0 1
51036: NOT
51037: IFFALSE 51041
// exit ;
51039: GO 51060
// result := UnitsInside ( building ) < 6 ;
51041: LD_ADDR_VAR 0 2
51045: PUSH
51046: LD_VAR 0 1
51050: PPUSH
51051: CALL_OW 313
51055: PUSH
51056: LD_INT 6
51058: LESS
51059: ST_TO_ADDR
// end ;
51060: LD_VAR 0 2
51064: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
51065: LD_INT 0
51067: PPUSH
51068: PPUSH
51069: PPUSH
51070: PPUSH
// tmp := [ ] ;
51071: LD_ADDR_VAR 0 3
51075: PUSH
51076: EMPTY
51077: ST_TO_ADDR
// list := [ ] ;
51078: LD_ADDR_VAR 0 5
51082: PUSH
51083: EMPTY
51084: ST_TO_ADDR
// for i = 16 to 25 do
51085: LD_ADDR_VAR 0 4
51089: PUSH
51090: DOUBLE
51091: LD_INT 16
51093: DEC
51094: ST_TO_ADDR
51095: LD_INT 25
51097: PUSH
51098: FOR_TO
51099: IFFALSE 51172
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
51101: LD_ADDR_VAR 0 3
51105: PUSH
51106: LD_VAR 0 3
51110: PUSH
51111: LD_INT 22
51113: PUSH
51114: LD_VAR 0 1
51118: PPUSH
51119: CALL_OW 255
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 91
51130: PUSH
51131: LD_VAR 0 1
51135: PUSH
51136: LD_INT 6
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 30
51146: PUSH
51147: LD_VAR 0 4
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: LIST
51160: PUSH
51161: EMPTY
51162: LIST
51163: PPUSH
51164: CALL_OW 69
51168: ADD
51169: ST_TO_ADDR
51170: GO 51098
51172: POP
51173: POP
// for i = 1 to tmp do
51174: LD_ADDR_VAR 0 4
51178: PUSH
51179: DOUBLE
51180: LD_INT 1
51182: DEC
51183: ST_TO_ADDR
51184: LD_VAR 0 3
51188: PUSH
51189: FOR_TO
51190: IFFALSE 51278
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
51192: LD_ADDR_VAR 0 5
51196: PUSH
51197: LD_VAR 0 5
51201: PUSH
51202: LD_VAR 0 3
51206: PUSH
51207: LD_VAR 0 4
51211: ARRAY
51212: PPUSH
51213: CALL_OW 266
51217: PUSH
51218: LD_VAR 0 3
51222: PUSH
51223: LD_VAR 0 4
51227: ARRAY
51228: PPUSH
51229: CALL_OW 250
51233: PUSH
51234: LD_VAR 0 3
51238: PUSH
51239: LD_VAR 0 4
51243: ARRAY
51244: PPUSH
51245: CALL_OW 251
51249: PUSH
51250: LD_VAR 0 3
51254: PUSH
51255: LD_VAR 0 4
51259: ARRAY
51260: PPUSH
51261: CALL_OW 254
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: PUSH
51272: EMPTY
51273: LIST
51274: ADD
51275: ST_TO_ADDR
51276: GO 51189
51278: POP
51279: POP
// result := list ;
51280: LD_ADDR_VAR 0 2
51284: PUSH
51285: LD_VAR 0 5
51289: ST_TO_ADDR
// end ;
51290: LD_VAR 0 2
51294: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
51295: LD_INT 0
51297: PPUSH
51298: PPUSH
51299: PPUSH
51300: PPUSH
51301: PPUSH
51302: PPUSH
51303: PPUSH
// if not factory then
51304: LD_VAR 0 1
51308: NOT
51309: IFFALSE 51313
// exit ;
51311: GO 51906
// if control = control_apeman then
51313: LD_VAR 0 4
51317: PUSH
51318: LD_INT 5
51320: EQUAL
51321: IFFALSE 51430
// begin tmp := UnitsInside ( factory ) ;
51323: LD_ADDR_VAR 0 8
51327: PUSH
51328: LD_VAR 0 1
51332: PPUSH
51333: CALL_OW 313
51337: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
51338: LD_VAR 0 8
51342: PPUSH
51343: LD_INT 25
51345: PUSH
51346: LD_INT 12
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PPUSH
51353: CALL_OW 72
51357: NOT
51358: IFFALSE 51368
// control := control_manual ;
51360: LD_ADDR_VAR 0 4
51364: PUSH
51365: LD_INT 1
51367: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
51368: LD_ADDR_VAR 0 8
51372: PUSH
51373: LD_VAR 0 1
51377: PPUSH
51378: CALL 51065 0 1
51382: ST_TO_ADDR
// if tmp then
51383: LD_VAR 0 8
51387: IFFALSE 51430
// begin for i in tmp do
51389: LD_ADDR_VAR 0 7
51393: PUSH
51394: LD_VAR 0 8
51398: PUSH
51399: FOR_IN
51400: IFFALSE 51428
// if i [ 1 ] = b_ext_radio then
51402: LD_VAR 0 7
51406: PUSH
51407: LD_INT 1
51409: ARRAY
51410: PUSH
51411: LD_INT 22
51413: EQUAL
51414: IFFALSE 51426
// begin control := control_remote ;
51416: LD_ADDR_VAR 0 4
51420: PUSH
51421: LD_INT 2
51423: ST_TO_ADDR
// break ;
51424: GO 51428
// end ;
51426: GO 51399
51428: POP
51429: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
51430: LD_VAR 0 1
51434: PPUSH
51435: LD_VAR 0 2
51439: PPUSH
51440: LD_VAR 0 3
51444: PPUSH
51445: LD_VAR 0 4
51449: PPUSH
51450: LD_VAR 0 5
51454: PPUSH
51455: CALL_OW 448
51459: IFFALSE 51494
// begin result := [ chassis , engine , control , weapon ] ;
51461: LD_ADDR_VAR 0 6
51465: PUSH
51466: LD_VAR 0 2
51470: PUSH
51471: LD_VAR 0 3
51475: PUSH
51476: LD_VAR 0 4
51480: PUSH
51481: LD_VAR 0 5
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: ST_TO_ADDR
// exit ;
51492: GO 51906
// end ; _chassis := AvailableChassisList ( factory ) ;
51494: LD_ADDR_VAR 0 9
51498: PUSH
51499: LD_VAR 0 1
51503: PPUSH
51504: CALL_OW 475
51508: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
51509: LD_ADDR_VAR 0 11
51513: PUSH
51514: LD_VAR 0 1
51518: PPUSH
51519: CALL_OW 476
51523: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
51524: LD_ADDR_VAR 0 12
51528: PUSH
51529: LD_VAR 0 1
51533: PPUSH
51534: CALL_OW 477
51538: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
51539: LD_ADDR_VAR 0 10
51543: PUSH
51544: LD_VAR 0 1
51548: PPUSH
51549: CALL_OW 478
51553: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
51554: LD_VAR 0 9
51558: NOT
51559: PUSH
51560: LD_VAR 0 11
51564: NOT
51565: OR
51566: PUSH
51567: LD_VAR 0 12
51571: NOT
51572: OR
51573: PUSH
51574: LD_VAR 0 10
51578: NOT
51579: OR
51580: IFFALSE 51615
// begin result := [ chassis , engine , control , weapon ] ;
51582: LD_ADDR_VAR 0 6
51586: PUSH
51587: LD_VAR 0 2
51591: PUSH
51592: LD_VAR 0 3
51596: PUSH
51597: LD_VAR 0 4
51601: PUSH
51602: LD_VAR 0 5
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: ST_TO_ADDR
// exit ;
51613: GO 51906
// end ; if not chassis in _chassis then
51615: LD_VAR 0 2
51619: PUSH
51620: LD_VAR 0 9
51624: IN
51625: NOT
51626: IFFALSE 51652
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
51628: LD_ADDR_VAR 0 2
51632: PUSH
51633: LD_VAR 0 9
51637: PUSH
51638: LD_INT 1
51640: PPUSH
51641: LD_VAR 0 9
51645: PPUSH
51646: CALL_OW 12
51650: ARRAY
51651: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
51652: LD_VAR 0 2
51656: PPUSH
51657: LD_VAR 0 3
51661: PPUSH
51662: CALL 51911 0 2
51666: NOT
51667: IFFALSE 51726
// repeat engine := _engine [ 1 ] ;
51669: LD_ADDR_VAR 0 3
51673: PUSH
51674: LD_VAR 0 11
51678: PUSH
51679: LD_INT 1
51681: ARRAY
51682: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
51683: LD_ADDR_VAR 0 11
51687: PUSH
51688: LD_VAR 0 11
51692: PPUSH
51693: LD_INT 1
51695: PPUSH
51696: CALL_OW 3
51700: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
51701: LD_VAR 0 2
51705: PPUSH
51706: LD_VAR 0 3
51710: PPUSH
51711: CALL 51911 0 2
51715: PUSH
51716: LD_VAR 0 11
51720: PUSH
51721: EMPTY
51722: EQUAL
51723: OR
51724: IFFALSE 51669
// if not control in _control then
51726: LD_VAR 0 4
51730: PUSH
51731: LD_VAR 0 12
51735: IN
51736: NOT
51737: IFFALSE 51763
// control := _control [ rand ( 1 , _control ) ] ;
51739: LD_ADDR_VAR 0 4
51743: PUSH
51744: LD_VAR 0 12
51748: PUSH
51749: LD_INT 1
51751: PPUSH
51752: LD_VAR 0 12
51756: PPUSH
51757: CALL_OW 12
51761: ARRAY
51762: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
51763: LD_VAR 0 2
51767: PPUSH
51768: LD_VAR 0 5
51772: PPUSH
51773: CALL 52131 0 2
51777: NOT
51778: IFFALSE 51837
// repeat weapon := _weapon [ 1 ] ;
51780: LD_ADDR_VAR 0 5
51784: PUSH
51785: LD_VAR 0 10
51789: PUSH
51790: LD_INT 1
51792: ARRAY
51793: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
51794: LD_ADDR_VAR 0 10
51798: PUSH
51799: LD_VAR 0 10
51803: PPUSH
51804: LD_INT 1
51806: PPUSH
51807: CALL_OW 3
51811: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
51812: LD_VAR 0 2
51816: PPUSH
51817: LD_VAR 0 5
51821: PPUSH
51822: CALL 52131 0 2
51826: PUSH
51827: LD_VAR 0 10
51831: PUSH
51832: EMPTY
51833: EQUAL
51834: OR
51835: IFFALSE 51780
// result := [ ] ;
51837: LD_ADDR_VAR 0 6
51841: PUSH
51842: EMPTY
51843: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
51844: LD_VAR 0 1
51848: PPUSH
51849: LD_VAR 0 2
51853: PPUSH
51854: LD_VAR 0 3
51858: PPUSH
51859: LD_VAR 0 4
51863: PPUSH
51864: LD_VAR 0 5
51868: PPUSH
51869: CALL_OW 448
51873: IFFALSE 51906
// result := [ chassis , engine , control , weapon ] ;
51875: LD_ADDR_VAR 0 6
51879: PUSH
51880: LD_VAR 0 2
51884: PUSH
51885: LD_VAR 0 3
51889: PUSH
51890: LD_VAR 0 4
51894: PUSH
51895: LD_VAR 0 5
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: ST_TO_ADDR
// end ;
51906: LD_VAR 0 6
51910: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
51911: LD_INT 0
51913: PPUSH
// if not chassis or not engine then
51914: LD_VAR 0 1
51918: NOT
51919: PUSH
51920: LD_VAR 0 2
51924: NOT
51925: OR
51926: IFFALSE 51930
// exit ;
51928: GO 52126
// case engine of engine_solar :
51930: LD_VAR 0 2
51934: PUSH
51935: LD_INT 2
51937: DOUBLE
51938: EQUAL
51939: IFTRUE 51943
51941: GO 51981
51943: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
51944: LD_ADDR_VAR 0 3
51948: PUSH
51949: LD_INT 11
51951: PUSH
51952: LD_INT 12
51954: PUSH
51955: LD_INT 13
51957: PUSH
51958: LD_INT 14
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 2
51966: PUSH
51967: LD_INT 3
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: ST_TO_ADDR
51979: GO 52110
51981: LD_INT 1
51983: DOUBLE
51984: EQUAL
51985: IFTRUE 51989
51987: GO 52051
51989: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
51990: LD_ADDR_VAR 0 3
51994: PUSH
51995: LD_INT 11
51997: PUSH
51998: LD_INT 12
52000: PUSH
52001: LD_INT 13
52003: PUSH
52004: LD_INT 14
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 2
52012: PUSH
52013: LD_INT 3
52015: PUSH
52016: LD_INT 4
52018: PUSH
52019: LD_INT 5
52021: PUSH
52022: LD_INT 21
52024: PUSH
52025: LD_INT 23
52027: PUSH
52028: LD_INT 22
52030: PUSH
52031: LD_INT 24
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: ST_TO_ADDR
52049: GO 52110
52051: LD_INT 3
52053: DOUBLE
52054: EQUAL
52055: IFTRUE 52059
52057: GO 52109
52059: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
52060: LD_ADDR_VAR 0 3
52064: PUSH
52065: LD_INT 13
52067: PUSH
52068: LD_INT 14
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: LD_INT 3
52076: PUSH
52077: LD_INT 4
52079: PUSH
52080: LD_INT 5
52082: PUSH
52083: LD_INT 21
52085: PUSH
52086: LD_INT 22
52088: PUSH
52089: LD_INT 23
52091: PUSH
52092: LD_INT 24
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: ST_TO_ADDR
52107: GO 52110
52109: POP
// result := ( chassis in result ) ;
52110: LD_ADDR_VAR 0 3
52114: PUSH
52115: LD_VAR 0 1
52119: PUSH
52120: LD_VAR 0 3
52124: IN
52125: ST_TO_ADDR
// end ;
52126: LD_VAR 0 3
52130: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
52131: LD_INT 0
52133: PPUSH
// if not chassis or not weapon then
52134: LD_VAR 0 1
52138: NOT
52139: PUSH
52140: LD_VAR 0 2
52144: NOT
52145: OR
52146: IFFALSE 52150
// exit ;
52148: GO 53212
// case weapon of us_machine_gun :
52150: LD_VAR 0 2
52154: PUSH
52155: LD_INT 2
52157: DOUBLE
52158: EQUAL
52159: IFTRUE 52163
52161: GO 52193
52163: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
52164: LD_ADDR_VAR 0 3
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: LD_INT 4
52180: PUSH
52181: LD_INT 5
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: ST_TO_ADDR
52191: GO 53196
52193: LD_INT 3
52195: DOUBLE
52196: EQUAL
52197: IFTRUE 52201
52199: GO 52231
52201: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
52202: LD_ADDR_VAR 0 3
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: LD_INT 2
52212: PUSH
52213: LD_INT 3
52215: PUSH
52216: LD_INT 4
52218: PUSH
52219: LD_INT 5
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: ST_TO_ADDR
52229: GO 53196
52231: LD_INT 11
52233: DOUBLE
52234: EQUAL
52235: IFTRUE 52239
52237: GO 52269
52239: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
52240: LD_ADDR_VAR 0 3
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 3
52253: PUSH
52254: LD_INT 4
52256: PUSH
52257: LD_INT 5
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: ST_TO_ADDR
52267: GO 53196
52269: LD_INT 4
52271: DOUBLE
52272: EQUAL
52273: IFTRUE 52277
52275: GO 52303
52277: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
52278: LD_ADDR_VAR 0 3
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: LD_INT 3
52288: PUSH
52289: LD_INT 4
52291: PUSH
52292: LD_INT 5
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: ST_TO_ADDR
52301: GO 53196
52303: LD_INT 5
52305: DOUBLE
52306: EQUAL
52307: IFTRUE 52311
52309: GO 52337
52311: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
52312: LD_ADDR_VAR 0 3
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: LD_INT 3
52322: PUSH
52323: LD_INT 4
52325: PUSH
52326: LD_INT 5
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: ST_TO_ADDR
52335: GO 53196
52337: LD_INT 9
52339: DOUBLE
52340: EQUAL
52341: IFTRUE 52345
52343: GO 52371
52345: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
52346: LD_ADDR_VAR 0 3
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: LD_INT 3
52356: PUSH
52357: LD_INT 4
52359: PUSH
52360: LD_INT 5
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: ST_TO_ADDR
52369: GO 53196
52371: LD_INT 7
52373: DOUBLE
52374: EQUAL
52375: IFTRUE 52379
52377: GO 52405
52379: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
52380: LD_ADDR_VAR 0 3
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: LD_INT 3
52390: PUSH
52391: LD_INT 4
52393: PUSH
52394: LD_INT 5
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: ST_TO_ADDR
52403: GO 53196
52405: LD_INT 12
52407: DOUBLE
52408: EQUAL
52409: IFTRUE 52413
52411: GO 52439
52413: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
52414: LD_ADDR_VAR 0 3
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: LD_INT 4
52427: PUSH
52428: LD_INT 5
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: ST_TO_ADDR
52437: GO 53196
52439: LD_INT 13
52441: DOUBLE
52442: EQUAL
52443: IFTRUE 52447
52445: GO 52473
52447: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
52448: LD_ADDR_VAR 0 3
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: LD_INT 3
52458: PUSH
52459: LD_INT 4
52461: PUSH
52462: LD_INT 5
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: ST_TO_ADDR
52471: GO 53196
52473: LD_INT 14
52475: DOUBLE
52476: EQUAL
52477: IFTRUE 52481
52479: GO 52499
52481: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
52482: LD_ADDR_VAR 0 3
52486: PUSH
52487: LD_INT 4
52489: PUSH
52490: LD_INT 5
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: ST_TO_ADDR
52497: GO 53196
52499: LD_INT 6
52501: DOUBLE
52502: EQUAL
52503: IFTRUE 52507
52505: GO 52525
52507: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
52508: LD_ADDR_VAR 0 3
52512: PUSH
52513: LD_INT 4
52515: PUSH
52516: LD_INT 5
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: ST_TO_ADDR
52523: GO 53196
52525: LD_INT 10
52527: DOUBLE
52528: EQUAL
52529: IFTRUE 52533
52531: GO 52551
52533: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
52534: LD_ADDR_VAR 0 3
52538: PUSH
52539: LD_INT 4
52541: PUSH
52542: LD_INT 5
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: ST_TO_ADDR
52549: GO 53196
52551: LD_INT 22
52553: DOUBLE
52554: EQUAL
52555: IFTRUE 52559
52557: GO 52585
52559: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
52560: LD_ADDR_VAR 0 3
52564: PUSH
52565: LD_INT 11
52567: PUSH
52568: LD_INT 12
52570: PUSH
52571: LD_INT 13
52573: PUSH
52574: LD_INT 14
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: ST_TO_ADDR
52583: GO 53196
52585: LD_INT 23
52587: DOUBLE
52588: EQUAL
52589: IFTRUE 52593
52591: GO 52619
52593: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
52594: LD_ADDR_VAR 0 3
52598: PUSH
52599: LD_INT 11
52601: PUSH
52602: LD_INT 12
52604: PUSH
52605: LD_INT 13
52607: PUSH
52608: LD_INT 14
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: ST_TO_ADDR
52617: GO 53196
52619: LD_INT 24
52621: DOUBLE
52622: EQUAL
52623: IFTRUE 52627
52625: GO 52653
52627: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
52628: LD_ADDR_VAR 0 3
52632: PUSH
52633: LD_INT 11
52635: PUSH
52636: LD_INT 12
52638: PUSH
52639: LD_INT 13
52641: PUSH
52642: LD_INT 14
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: ST_TO_ADDR
52651: GO 53196
52653: LD_INT 30
52655: DOUBLE
52656: EQUAL
52657: IFTRUE 52661
52659: GO 52687
52661: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
52662: LD_ADDR_VAR 0 3
52666: PUSH
52667: LD_INT 11
52669: PUSH
52670: LD_INT 12
52672: PUSH
52673: LD_INT 13
52675: PUSH
52676: LD_INT 14
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: ST_TO_ADDR
52685: GO 53196
52687: LD_INT 25
52689: DOUBLE
52690: EQUAL
52691: IFTRUE 52695
52693: GO 52713
52695: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
52696: LD_ADDR_VAR 0 3
52700: PUSH
52701: LD_INT 13
52703: PUSH
52704: LD_INT 14
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: ST_TO_ADDR
52711: GO 53196
52713: LD_INT 27
52715: DOUBLE
52716: EQUAL
52717: IFTRUE 52721
52719: GO 52739
52721: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
52722: LD_ADDR_VAR 0 3
52726: PUSH
52727: LD_INT 13
52729: PUSH
52730: LD_INT 14
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: ST_TO_ADDR
52737: GO 53196
52739: LD_EXP 74
52743: DOUBLE
52744: EQUAL
52745: IFTRUE 52749
52747: GO 52775
52749: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
52750: LD_ADDR_VAR 0 3
52754: PUSH
52755: LD_INT 11
52757: PUSH
52758: LD_INT 12
52760: PUSH
52761: LD_INT 13
52763: PUSH
52764: LD_INT 14
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: ST_TO_ADDR
52773: GO 53196
52775: LD_INT 28
52777: DOUBLE
52778: EQUAL
52779: IFTRUE 52783
52781: GO 52801
52783: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
52784: LD_ADDR_VAR 0 3
52788: PUSH
52789: LD_INT 13
52791: PUSH
52792: LD_INT 14
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: ST_TO_ADDR
52799: GO 53196
52801: LD_INT 29
52803: DOUBLE
52804: EQUAL
52805: IFTRUE 52809
52807: GO 52827
52809: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
52810: LD_ADDR_VAR 0 3
52814: PUSH
52815: LD_INT 13
52817: PUSH
52818: LD_INT 14
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: ST_TO_ADDR
52825: GO 53196
52827: LD_INT 31
52829: DOUBLE
52830: EQUAL
52831: IFTRUE 52835
52833: GO 52853
52835: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
52836: LD_ADDR_VAR 0 3
52840: PUSH
52841: LD_INT 13
52843: PUSH
52844: LD_INT 14
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: ST_TO_ADDR
52851: GO 53196
52853: LD_INT 26
52855: DOUBLE
52856: EQUAL
52857: IFTRUE 52861
52859: GO 52879
52861: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
52862: LD_ADDR_VAR 0 3
52866: PUSH
52867: LD_INT 13
52869: PUSH
52870: LD_INT 14
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: ST_TO_ADDR
52877: GO 53196
52879: LD_INT 42
52881: DOUBLE
52882: EQUAL
52883: IFTRUE 52887
52885: GO 52913
52887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
52888: LD_ADDR_VAR 0 3
52892: PUSH
52893: LD_INT 21
52895: PUSH
52896: LD_INT 22
52898: PUSH
52899: LD_INT 23
52901: PUSH
52902: LD_INT 24
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: ST_TO_ADDR
52911: GO 53196
52913: LD_INT 43
52915: DOUBLE
52916: EQUAL
52917: IFTRUE 52921
52919: GO 52947
52921: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
52922: LD_ADDR_VAR 0 3
52926: PUSH
52927: LD_INT 21
52929: PUSH
52930: LD_INT 22
52932: PUSH
52933: LD_INT 23
52935: PUSH
52936: LD_INT 24
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: ST_TO_ADDR
52945: GO 53196
52947: LD_INT 44
52949: DOUBLE
52950: EQUAL
52951: IFTRUE 52955
52953: GO 52981
52955: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
52956: LD_ADDR_VAR 0 3
52960: PUSH
52961: LD_INT 21
52963: PUSH
52964: LD_INT 22
52966: PUSH
52967: LD_INT 23
52969: PUSH
52970: LD_INT 24
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: ST_TO_ADDR
52979: GO 53196
52981: LD_INT 45
52983: DOUBLE
52984: EQUAL
52985: IFTRUE 52989
52987: GO 53015
52989: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
52990: LD_ADDR_VAR 0 3
52994: PUSH
52995: LD_INT 21
52997: PUSH
52998: LD_INT 22
53000: PUSH
53001: LD_INT 23
53003: PUSH
53004: LD_INT 24
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: ST_TO_ADDR
53013: GO 53196
53015: LD_INT 49
53017: DOUBLE
53018: EQUAL
53019: IFTRUE 53023
53021: GO 53049
53023: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
53024: LD_ADDR_VAR 0 3
53028: PUSH
53029: LD_INT 21
53031: PUSH
53032: LD_INT 22
53034: PUSH
53035: LD_INT 23
53037: PUSH
53038: LD_INT 24
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: ST_TO_ADDR
53047: GO 53196
53049: LD_INT 51
53051: DOUBLE
53052: EQUAL
53053: IFTRUE 53057
53055: GO 53083
53057: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
53058: LD_ADDR_VAR 0 3
53062: PUSH
53063: LD_INT 21
53065: PUSH
53066: LD_INT 22
53068: PUSH
53069: LD_INT 23
53071: PUSH
53072: LD_INT 24
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: ST_TO_ADDR
53081: GO 53196
53083: LD_INT 52
53085: DOUBLE
53086: EQUAL
53087: IFTRUE 53091
53089: GO 53117
53091: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
53092: LD_ADDR_VAR 0 3
53096: PUSH
53097: LD_INT 21
53099: PUSH
53100: LD_INT 22
53102: PUSH
53103: LD_INT 23
53105: PUSH
53106: LD_INT 24
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: ST_TO_ADDR
53115: GO 53196
53117: LD_INT 53
53119: DOUBLE
53120: EQUAL
53121: IFTRUE 53125
53123: GO 53143
53125: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
53126: LD_ADDR_VAR 0 3
53130: PUSH
53131: LD_INT 23
53133: PUSH
53134: LD_INT 24
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: ST_TO_ADDR
53141: GO 53196
53143: LD_INT 46
53145: DOUBLE
53146: EQUAL
53147: IFTRUE 53151
53149: GO 53169
53151: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
53152: LD_ADDR_VAR 0 3
53156: PUSH
53157: LD_INT 23
53159: PUSH
53160: LD_INT 24
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: ST_TO_ADDR
53167: GO 53196
53169: LD_INT 47
53171: DOUBLE
53172: EQUAL
53173: IFTRUE 53177
53175: GO 53195
53177: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53178: LD_ADDR_VAR 0 3
53182: PUSH
53183: LD_INT 23
53185: PUSH
53186: LD_INT 24
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: ST_TO_ADDR
53193: GO 53196
53195: POP
// result := ( chassis in result ) ;
53196: LD_ADDR_VAR 0 3
53200: PUSH
53201: LD_VAR 0 1
53205: PUSH
53206: LD_VAR 0 3
53210: IN
53211: ST_TO_ADDR
// end ;
53212: LD_VAR 0 3
53216: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
53217: LD_INT 0
53219: PPUSH
53220: PPUSH
53221: PPUSH
53222: PPUSH
53223: PPUSH
53224: PPUSH
53225: PPUSH
// result := array ;
53226: LD_ADDR_VAR 0 5
53230: PUSH
53231: LD_VAR 0 1
53235: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
53236: LD_VAR 0 1
53240: NOT
53241: PUSH
53242: LD_VAR 0 2
53246: NOT
53247: OR
53248: PUSH
53249: LD_VAR 0 3
53253: NOT
53254: OR
53255: PUSH
53256: LD_VAR 0 2
53260: PUSH
53261: LD_VAR 0 1
53265: GREATER
53266: OR
53267: PUSH
53268: LD_VAR 0 3
53272: PUSH
53273: LD_VAR 0 1
53277: GREATER
53278: OR
53279: IFFALSE 53283
// exit ;
53281: GO 53579
// if direction then
53283: LD_VAR 0 4
53287: IFFALSE 53351
// begin d := 1 ;
53289: LD_ADDR_VAR 0 9
53293: PUSH
53294: LD_INT 1
53296: ST_TO_ADDR
// if i_from > i_to then
53297: LD_VAR 0 2
53301: PUSH
53302: LD_VAR 0 3
53306: GREATER
53307: IFFALSE 53333
// length := ( array - i_from ) + i_to else
53309: LD_ADDR_VAR 0 11
53313: PUSH
53314: LD_VAR 0 1
53318: PUSH
53319: LD_VAR 0 2
53323: MINUS
53324: PUSH
53325: LD_VAR 0 3
53329: PLUS
53330: ST_TO_ADDR
53331: GO 53349
// length := i_to - i_from ;
53333: LD_ADDR_VAR 0 11
53337: PUSH
53338: LD_VAR 0 3
53342: PUSH
53343: LD_VAR 0 2
53347: MINUS
53348: ST_TO_ADDR
// end else
53349: GO 53412
// begin d := - 1 ;
53351: LD_ADDR_VAR 0 9
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: ST_TO_ADDR
// if i_from > i_to then
53360: LD_VAR 0 2
53364: PUSH
53365: LD_VAR 0 3
53369: GREATER
53370: IFFALSE 53390
// length := i_from - i_to else
53372: LD_ADDR_VAR 0 11
53376: PUSH
53377: LD_VAR 0 2
53381: PUSH
53382: LD_VAR 0 3
53386: MINUS
53387: ST_TO_ADDR
53388: GO 53412
// length := ( array - i_to ) + i_from ;
53390: LD_ADDR_VAR 0 11
53394: PUSH
53395: LD_VAR 0 1
53399: PUSH
53400: LD_VAR 0 3
53404: MINUS
53405: PUSH
53406: LD_VAR 0 2
53410: PLUS
53411: ST_TO_ADDR
// end ; if not length then
53412: LD_VAR 0 11
53416: NOT
53417: IFFALSE 53421
// exit ;
53419: GO 53579
// tmp := array ;
53421: LD_ADDR_VAR 0 10
53425: PUSH
53426: LD_VAR 0 1
53430: ST_TO_ADDR
// for i = 1 to length do
53431: LD_ADDR_VAR 0 6
53435: PUSH
53436: DOUBLE
53437: LD_INT 1
53439: DEC
53440: ST_TO_ADDR
53441: LD_VAR 0 11
53445: PUSH
53446: FOR_TO
53447: IFFALSE 53567
// begin for j = 1 to array do
53449: LD_ADDR_VAR 0 7
53453: PUSH
53454: DOUBLE
53455: LD_INT 1
53457: DEC
53458: ST_TO_ADDR
53459: LD_VAR 0 1
53463: PUSH
53464: FOR_TO
53465: IFFALSE 53553
// begin k := j + d ;
53467: LD_ADDR_VAR 0 8
53471: PUSH
53472: LD_VAR 0 7
53476: PUSH
53477: LD_VAR 0 9
53481: PLUS
53482: ST_TO_ADDR
// if k > array then
53483: LD_VAR 0 8
53487: PUSH
53488: LD_VAR 0 1
53492: GREATER
53493: IFFALSE 53503
// k := 1 ;
53495: LD_ADDR_VAR 0 8
53499: PUSH
53500: LD_INT 1
53502: ST_TO_ADDR
// if not k then
53503: LD_VAR 0 8
53507: NOT
53508: IFFALSE 53520
// k := array ;
53510: LD_ADDR_VAR 0 8
53514: PUSH
53515: LD_VAR 0 1
53519: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
53520: LD_ADDR_VAR 0 10
53524: PUSH
53525: LD_VAR 0 10
53529: PPUSH
53530: LD_VAR 0 8
53534: PPUSH
53535: LD_VAR 0 1
53539: PUSH
53540: LD_VAR 0 7
53544: ARRAY
53545: PPUSH
53546: CALL_OW 1
53550: ST_TO_ADDR
// end ;
53551: GO 53464
53553: POP
53554: POP
// array := tmp ;
53555: LD_ADDR_VAR 0 1
53559: PUSH
53560: LD_VAR 0 10
53564: ST_TO_ADDR
// end ;
53565: GO 53446
53567: POP
53568: POP
// result := array ;
53569: LD_ADDR_VAR 0 5
53573: PUSH
53574: LD_VAR 0 1
53578: ST_TO_ADDR
// end ;
53579: LD_VAR 0 5
53583: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
53584: LD_INT 0
53586: PPUSH
53587: PPUSH
// result := 0 ;
53588: LD_ADDR_VAR 0 3
53592: PUSH
53593: LD_INT 0
53595: ST_TO_ADDR
// if not array or not value in array then
53596: LD_VAR 0 1
53600: NOT
53601: PUSH
53602: LD_VAR 0 2
53606: PUSH
53607: LD_VAR 0 1
53611: IN
53612: NOT
53613: OR
53614: IFFALSE 53618
// exit ;
53616: GO 53672
// for i = 1 to array do
53618: LD_ADDR_VAR 0 4
53622: PUSH
53623: DOUBLE
53624: LD_INT 1
53626: DEC
53627: ST_TO_ADDR
53628: LD_VAR 0 1
53632: PUSH
53633: FOR_TO
53634: IFFALSE 53670
// if value = array [ i ] then
53636: LD_VAR 0 2
53640: PUSH
53641: LD_VAR 0 1
53645: PUSH
53646: LD_VAR 0 4
53650: ARRAY
53651: EQUAL
53652: IFFALSE 53668
// begin result := i ;
53654: LD_ADDR_VAR 0 3
53658: PUSH
53659: LD_VAR 0 4
53663: ST_TO_ADDR
// exit ;
53664: POP
53665: POP
53666: GO 53672
// end ;
53668: GO 53633
53670: POP
53671: POP
// end ;
53672: LD_VAR 0 3
53676: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
53677: LD_INT 0
53679: PPUSH
// vc_chassis := chassis ;
53680: LD_ADDR_OWVAR 37
53684: PUSH
53685: LD_VAR 0 1
53689: ST_TO_ADDR
// vc_engine := engine ;
53690: LD_ADDR_OWVAR 39
53694: PUSH
53695: LD_VAR 0 2
53699: ST_TO_ADDR
// vc_control := control ;
53700: LD_ADDR_OWVAR 38
53704: PUSH
53705: LD_VAR 0 3
53709: ST_TO_ADDR
// vc_weapon := weapon ;
53710: LD_ADDR_OWVAR 40
53714: PUSH
53715: LD_VAR 0 4
53719: ST_TO_ADDR
// vc_fuel_battery := fuel ;
53720: LD_ADDR_OWVAR 41
53724: PUSH
53725: LD_VAR 0 5
53729: ST_TO_ADDR
// end ;
53730: LD_VAR 0 6
53734: RET
// export function WantPlant ( unit ) ; var task ; begin
53735: LD_INT 0
53737: PPUSH
53738: PPUSH
// result := false ;
53739: LD_ADDR_VAR 0 2
53743: PUSH
53744: LD_INT 0
53746: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
53747: LD_ADDR_VAR 0 3
53751: PUSH
53752: LD_VAR 0 1
53756: PPUSH
53757: CALL_OW 437
53761: ST_TO_ADDR
// if task then
53762: LD_VAR 0 3
53766: IFFALSE 53794
// if task [ 1 ] [ 1 ] = p then
53768: LD_VAR 0 3
53772: PUSH
53773: LD_INT 1
53775: ARRAY
53776: PUSH
53777: LD_INT 1
53779: ARRAY
53780: PUSH
53781: LD_STRING p
53783: EQUAL
53784: IFFALSE 53794
// result := true ;
53786: LD_ADDR_VAR 0 2
53790: PUSH
53791: LD_INT 1
53793: ST_TO_ADDR
// end ;
53794: LD_VAR 0 2
53798: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
53799: LD_INT 0
53801: PPUSH
53802: PPUSH
53803: PPUSH
53804: PPUSH
// if pos < 1 then
53805: LD_VAR 0 2
53809: PUSH
53810: LD_INT 1
53812: LESS
53813: IFFALSE 53817
// exit ;
53815: GO 54120
// if pos = 1 then
53817: LD_VAR 0 2
53821: PUSH
53822: LD_INT 1
53824: EQUAL
53825: IFFALSE 53858
// result := Replace ( arr , pos [ 1 ] , value ) else
53827: LD_ADDR_VAR 0 4
53831: PUSH
53832: LD_VAR 0 1
53836: PPUSH
53837: LD_VAR 0 2
53841: PUSH
53842: LD_INT 1
53844: ARRAY
53845: PPUSH
53846: LD_VAR 0 3
53850: PPUSH
53851: CALL_OW 1
53855: ST_TO_ADDR
53856: GO 54120
// begin tmp := arr ;
53858: LD_ADDR_VAR 0 6
53862: PUSH
53863: LD_VAR 0 1
53867: ST_TO_ADDR
// s_arr := [ tmp ] ;
53868: LD_ADDR_VAR 0 7
53872: PUSH
53873: LD_VAR 0 6
53877: PUSH
53878: EMPTY
53879: LIST
53880: ST_TO_ADDR
// for i = 1 to pos - 1 do
53881: LD_ADDR_VAR 0 5
53885: PUSH
53886: DOUBLE
53887: LD_INT 1
53889: DEC
53890: ST_TO_ADDR
53891: LD_VAR 0 2
53895: PUSH
53896: LD_INT 1
53898: MINUS
53899: PUSH
53900: FOR_TO
53901: IFFALSE 53946
// begin tmp := tmp [ pos [ i ] ] ;
53903: LD_ADDR_VAR 0 6
53907: PUSH
53908: LD_VAR 0 6
53912: PUSH
53913: LD_VAR 0 2
53917: PUSH
53918: LD_VAR 0 5
53922: ARRAY
53923: ARRAY
53924: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
53925: LD_ADDR_VAR 0 7
53929: PUSH
53930: LD_VAR 0 7
53934: PUSH
53935: LD_VAR 0 6
53939: PUSH
53940: EMPTY
53941: LIST
53942: ADD
53943: ST_TO_ADDR
// end ;
53944: GO 53900
53946: POP
53947: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
53948: LD_ADDR_VAR 0 6
53952: PUSH
53953: LD_VAR 0 6
53957: PPUSH
53958: LD_VAR 0 2
53962: PUSH
53963: LD_VAR 0 2
53967: ARRAY
53968: PPUSH
53969: LD_VAR 0 3
53973: PPUSH
53974: CALL_OW 1
53978: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
53979: LD_ADDR_VAR 0 7
53983: PUSH
53984: LD_VAR 0 7
53988: PPUSH
53989: LD_VAR 0 7
53993: PPUSH
53994: LD_VAR 0 6
53998: PPUSH
53999: CALL_OW 1
54003: ST_TO_ADDR
// for i = s_arr downto 2 do
54004: LD_ADDR_VAR 0 5
54008: PUSH
54009: DOUBLE
54010: LD_VAR 0 7
54014: INC
54015: ST_TO_ADDR
54016: LD_INT 2
54018: PUSH
54019: FOR_DOWNTO
54020: IFFALSE 54104
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
54022: LD_ADDR_VAR 0 6
54026: PUSH
54027: LD_VAR 0 7
54031: PUSH
54032: LD_VAR 0 5
54036: PUSH
54037: LD_INT 1
54039: MINUS
54040: ARRAY
54041: PPUSH
54042: LD_VAR 0 2
54046: PUSH
54047: LD_VAR 0 5
54051: PUSH
54052: LD_INT 1
54054: MINUS
54055: ARRAY
54056: PPUSH
54057: LD_VAR 0 7
54061: PUSH
54062: LD_VAR 0 5
54066: ARRAY
54067: PPUSH
54068: CALL_OW 1
54072: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
54073: LD_ADDR_VAR 0 7
54077: PUSH
54078: LD_VAR 0 7
54082: PPUSH
54083: LD_VAR 0 5
54087: PUSH
54088: LD_INT 1
54090: MINUS
54091: PPUSH
54092: LD_VAR 0 6
54096: PPUSH
54097: CALL_OW 1
54101: ST_TO_ADDR
// end ;
54102: GO 54019
54104: POP
54105: POP
// result := s_arr [ 1 ] ;
54106: LD_ADDR_VAR 0 4
54110: PUSH
54111: LD_VAR 0 7
54115: PUSH
54116: LD_INT 1
54118: ARRAY
54119: ST_TO_ADDR
// end ; end ;
54120: LD_VAR 0 4
54124: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
54125: LD_INT 0
54127: PPUSH
54128: PPUSH
// if not list then
54129: LD_VAR 0 1
54133: NOT
54134: IFFALSE 54138
// exit ;
54136: GO 54229
// i := list [ pos1 ] ;
54138: LD_ADDR_VAR 0 5
54142: PUSH
54143: LD_VAR 0 1
54147: PUSH
54148: LD_VAR 0 2
54152: ARRAY
54153: ST_TO_ADDR
// if not i then
54154: LD_VAR 0 5
54158: NOT
54159: IFFALSE 54163
// exit ;
54161: GO 54229
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
54163: LD_ADDR_VAR 0 1
54167: PUSH
54168: LD_VAR 0 1
54172: PPUSH
54173: LD_VAR 0 2
54177: PPUSH
54178: LD_VAR 0 1
54182: PUSH
54183: LD_VAR 0 3
54187: ARRAY
54188: PPUSH
54189: CALL_OW 1
54193: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
54194: LD_ADDR_VAR 0 1
54198: PUSH
54199: LD_VAR 0 1
54203: PPUSH
54204: LD_VAR 0 3
54208: PPUSH
54209: LD_VAR 0 5
54213: PPUSH
54214: CALL_OW 1
54218: ST_TO_ADDR
// result := list ;
54219: LD_ADDR_VAR 0 4
54223: PUSH
54224: LD_VAR 0 1
54228: ST_TO_ADDR
// end ;
54229: LD_VAR 0 4
54233: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
54234: LD_INT 0
54236: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
54237: LD_ADDR_VAR 0 5
54241: PUSH
54242: LD_VAR 0 1
54246: PPUSH
54247: CALL_OW 250
54251: PPUSH
54252: LD_VAR 0 1
54256: PPUSH
54257: CALL_OW 251
54261: PPUSH
54262: LD_VAR 0 2
54266: PPUSH
54267: LD_VAR 0 3
54271: PPUSH
54272: LD_VAR 0 4
54276: PPUSH
54277: CALL 54287 0 5
54281: ST_TO_ADDR
// end ;
54282: LD_VAR 0 5
54286: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
54287: LD_INT 0
54289: PPUSH
54290: PPUSH
54291: PPUSH
54292: PPUSH
// if not list then
54293: LD_VAR 0 3
54297: NOT
54298: IFFALSE 54302
// exit ;
54300: GO 54690
// result := [ ] ;
54302: LD_ADDR_VAR 0 6
54306: PUSH
54307: EMPTY
54308: ST_TO_ADDR
// for i in list do
54309: LD_ADDR_VAR 0 7
54313: PUSH
54314: LD_VAR 0 3
54318: PUSH
54319: FOR_IN
54320: IFFALSE 54522
// begin tmp := GetDistUnitXY ( i , x , y ) ;
54322: LD_ADDR_VAR 0 9
54326: PUSH
54327: LD_VAR 0 7
54331: PPUSH
54332: LD_VAR 0 1
54336: PPUSH
54337: LD_VAR 0 2
54341: PPUSH
54342: CALL_OW 297
54346: ST_TO_ADDR
// if not result then
54347: LD_VAR 0 6
54351: NOT
54352: IFFALSE 54378
// result := [ [ i , tmp ] ] else
54354: LD_ADDR_VAR 0 6
54358: PUSH
54359: LD_VAR 0 7
54363: PUSH
54364: LD_VAR 0 9
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: EMPTY
54374: LIST
54375: ST_TO_ADDR
54376: GO 54520
// begin if result [ result ] [ 2 ] < tmp then
54378: LD_VAR 0 6
54382: PUSH
54383: LD_VAR 0 6
54387: ARRAY
54388: PUSH
54389: LD_INT 2
54391: ARRAY
54392: PUSH
54393: LD_VAR 0 9
54397: LESS
54398: IFFALSE 54440
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
54400: LD_ADDR_VAR 0 6
54404: PUSH
54405: LD_VAR 0 6
54409: PPUSH
54410: LD_VAR 0 6
54414: PUSH
54415: LD_INT 1
54417: PLUS
54418: PPUSH
54419: LD_VAR 0 7
54423: PUSH
54424: LD_VAR 0 9
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PPUSH
54433: CALL_OW 2
54437: ST_TO_ADDR
54438: GO 54520
// for j = 1 to result do
54440: LD_ADDR_VAR 0 8
54444: PUSH
54445: DOUBLE
54446: LD_INT 1
54448: DEC
54449: ST_TO_ADDR
54450: LD_VAR 0 6
54454: PUSH
54455: FOR_TO
54456: IFFALSE 54518
// begin if tmp < result [ j ] [ 2 ] then
54458: LD_VAR 0 9
54462: PUSH
54463: LD_VAR 0 6
54467: PUSH
54468: LD_VAR 0 8
54472: ARRAY
54473: PUSH
54474: LD_INT 2
54476: ARRAY
54477: LESS
54478: IFFALSE 54516
// begin result := Insert ( result , j , [ i , tmp ] ) ;
54480: LD_ADDR_VAR 0 6
54484: PUSH
54485: LD_VAR 0 6
54489: PPUSH
54490: LD_VAR 0 8
54494: PPUSH
54495: LD_VAR 0 7
54499: PUSH
54500: LD_VAR 0 9
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PPUSH
54509: CALL_OW 2
54513: ST_TO_ADDR
// break ;
54514: GO 54518
// end ; end ;
54516: GO 54455
54518: POP
54519: POP
// end ; end ;
54520: GO 54319
54522: POP
54523: POP
// if result and not asc then
54524: LD_VAR 0 6
54528: PUSH
54529: LD_VAR 0 4
54533: NOT
54534: AND
54535: IFFALSE 54610
// begin tmp := result ;
54537: LD_ADDR_VAR 0 9
54541: PUSH
54542: LD_VAR 0 6
54546: ST_TO_ADDR
// for i = tmp downto 1 do
54547: LD_ADDR_VAR 0 7
54551: PUSH
54552: DOUBLE
54553: LD_VAR 0 9
54557: INC
54558: ST_TO_ADDR
54559: LD_INT 1
54561: PUSH
54562: FOR_DOWNTO
54563: IFFALSE 54608
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
54565: LD_ADDR_VAR 0 6
54569: PUSH
54570: LD_VAR 0 6
54574: PPUSH
54575: LD_VAR 0 9
54579: PUSH
54580: LD_VAR 0 7
54584: MINUS
54585: PUSH
54586: LD_INT 1
54588: PLUS
54589: PPUSH
54590: LD_VAR 0 9
54594: PUSH
54595: LD_VAR 0 7
54599: ARRAY
54600: PPUSH
54601: CALL_OW 1
54605: ST_TO_ADDR
54606: GO 54562
54608: POP
54609: POP
// end ; tmp := [ ] ;
54610: LD_ADDR_VAR 0 9
54614: PUSH
54615: EMPTY
54616: ST_TO_ADDR
// if mode then
54617: LD_VAR 0 5
54621: IFFALSE 54690
// begin for i = 1 to result do
54623: LD_ADDR_VAR 0 7
54627: PUSH
54628: DOUBLE
54629: LD_INT 1
54631: DEC
54632: ST_TO_ADDR
54633: LD_VAR 0 6
54637: PUSH
54638: FOR_TO
54639: IFFALSE 54678
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
54641: LD_ADDR_VAR 0 9
54645: PUSH
54646: LD_VAR 0 9
54650: PPUSH
54651: LD_VAR 0 7
54655: PPUSH
54656: LD_VAR 0 6
54660: PUSH
54661: LD_VAR 0 7
54665: ARRAY
54666: PUSH
54667: LD_INT 1
54669: ARRAY
54670: PPUSH
54671: CALL_OW 1
54675: ST_TO_ADDR
54676: GO 54638
54678: POP
54679: POP
// result := tmp ;
54680: LD_ADDR_VAR 0 6
54684: PUSH
54685: LD_VAR 0 9
54689: ST_TO_ADDR
// end ; end ;
54690: LD_VAR 0 6
54694: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
54695: LD_INT 0
54697: PPUSH
54698: PPUSH
54699: PPUSH
54700: PPUSH
54701: PPUSH
54702: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
54703: LD_ADDR_VAR 0 5
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: EMPTY
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: ST_TO_ADDR
// if not x or not y then
54725: LD_VAR 0 2
54729: NOT
54730: PUSH
54731: LD_VAR 0 3
54735: NOT
54736: OR
54737: IFFALSE 54741
// exit ;
54739: GO 56393
// if not range then
54741: LD_VAR 0 4
54745: NOT
54746: IFFALSE 54756
// range := 10 ;
54748: LD_ADDR_VAR 0 4
54752: PUSH
54753: LD_INT 10
54755: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
54756: LD_ADDR_VAR 0 8
54760: PUSH
54761: LD_INT 81
54763: PUSH
54764: LD_VAR 0 1
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 92
54775: PUSH
54776: LD_VAR 0 2
54780: PUSH
54781: LD_VAR 0 3
54785: PUSH
54786: LD_VAR 0 4
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 3
54799: PUSH
54800: LD_INT 21
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: LIST
54818: PPUSH
54819: CALL_OW 69
54823: ST_TO_ADDR
// if not tmp then
54824: LD_VAR 0 8
54828: NOT
54829: IFFALSE 54833
// exit ;
54831: GO 56393
// for i in tmp do
54833: LD_ADDR_VAR 0 6
54837: PUSH
54838: LD_VAR 0 8
54842: PUSH
54843: FOR_IN
54844: IFFALSE 56368
// begin points := [ 0 , 0 , 0 ] ;
54846: LD_ADDR_VAR 0 9
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: LIST
54864: ST_TO_ADDR
// bpoints := 1 ;
54865: LD_ADDR_VAR 0 10
54869: PUSH
54870: LD_INT 1
54872: ST_TO_ADDR
// case GetType ( i ) of unit_human :
54873: LD_VAR 0 6
54877: PPUSH
54878: CALL_OW 247
54882: PUSH
54883: LD_INT 1
54885: DOUBLE
54886: EQUAL
54887: IFTRUE 54891
54889: GO 55469
54891: POP
// begin if GetClass ( i ) = 1 then
54892: LD_VAR 0 6
54896: PPUSH
54897: CALL_OW 257
54901: PUSH
54902: LD_INT 1
54904: EQUAL
54905: IFFALSE 54926
// points := [ 10 , 5 , 3 ] ;
54907: LD_ADDR_VAR 0 9
54911: PUSH
54912: LD_INT 10
54914: PUSH
54915: LD_INT 5
54917: PUSH
54918: LD_INT 3
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: LIST
54925: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
54926: LD_VAR 0 6
54930: PPUSH
54931: CALL_OW 257
54935: PUSH
54936: LD_INT 2
54938: PUSH
54939: LD_INT 3
54941: PUSH
54942: LD_INT 4
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: LIST
54949: IN
54950: IFFALSE 54971
// points := [ 3 , 2 , 1 ] ;
54952: LD_ADDR_VAR 0 9
54956: PUSH
54957: LD_INT 3
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: LIST
54970: ST_TO_ADDR
// if GetClass ( i ) = 5 then
54971: LD_VAR 0 6
54975: PPUSH
54976: CALL_OW 257
54980: PUSH
54981: LD_INT 5
54983: EQUAL
54984: IFFALSE 55005
// points := [ 130 , 5 , 2 ] ;
54986: LD_ADDR_VAR 0 9
54990: PUSH
54991: LD_INT 130
54993: PUSH
54994: LD_INT 5
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: LIST
55004: ST_TO_ADDR
// if GetClass ( i ) = 8 then
55005: LD_VAR 0 6
55009: PPUSH
55010: CALL_OW 257
55014: PUSH
55015: LD_INT 8
55017: EQUAL
55018: IFFALSE 55039
// points := [ 35 , 35 , 30 ] ;
55020: LD_ADDR_VAR 0 9
55024: PUSH
55025: LD_INT 35
55027: PUSH
55028: LD_INT 35
55030: PUSH
55031: LD_INT 30
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: LIST
55038: ST_TO_ADDR
// if GetClass ( i ) = 9 then
55039: LD_VAR 0 6
55043: PPUSH
55044: CALL_OW 257
55048: PUSH
55049: LD_INT 9
55051: EQUAL
55052: IFFALSE 55073
// points := [ 20 , 55 , 40 ] ;
55054: LD_ADDR_VAR 0 9
55058: PUSH
55059: LD_INT 20
55061: PUSH
55062: LD_INT 55
55064: PUSH
55065: LD_INT 40
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: LIST
55072: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
55073: LD_VAR 0 6
55077: PPUSH
55078: CALL_OW 257
55082: PUSH
55083: LD_INT 12
55085: PUSH
55086: LD_INT 16
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: IN
55093: IFFALSE 55114
// points := [ 5 , 3 , 2 ] ;
55095: LD_ADDR_VAR 0 9
55099: PUSH
55100: LD_INT 5
55102: PUSH
55103: LD_INT 3
55105: PUSH
55106: LD_INT 2
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: LIST
55113: ST_TO_ADDR
// if GetClass ( i ) = 17 then
55114: LD_VAR 0 6
55118: PPUSH
55119: CALL_OW 257
55123: PUSH
55124: LD_INT 17
55126: EQUAL
55127: IFFALSE 55148
// points := [ 100 , 50 , 75 ] ;
55129: LD_ADDR_VAR 0 9
55133: PUSH
55134: LD_INT 100
55136: PUSH
55137: LD_INT 50
55139: PUSH
55140: LD_INT 75
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: LIST
55147: ST_TO_ADDR
// if GetClass ( i ) = 15 then
55148: LD_VAR 0 6
55152: PPUSH
55153: CALL_OW 257
55157: PUSH
55158: LD_INT 15
55160: EQUAL
55161: IFFALSE 55182
// points := [ 10 , 5 , 3 ] ;
55163: LD_ADDR_VAR 0 9
55167: PUSH
55168: LD_INT 10
55170: PUSH
55171: LD_INT 5
55173: PUSH
55174: LD_INT 3
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: LIST
55181: ST_TO_ADDR
// if GetClass ( i ) = 14 then
55182: LD_VAR 0 6
55186: PPUSH
55187: CALL_OW 257
55191: PUSH
55192: LD_INT 14
55194: EQUAL
55195: IFFALSE 55216
// points := [ 10 , 0 , 0 ] ;
55197: LD_ADDR_VAR 0 9
55201: PUSH
55202: LD_INT 10
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: LIST
55215: ST_TO_ADDR
// if GetClass ( i ) = 11 then
55216: LD_VAR 0 6
55220: PPUSH
55221: CALL_OW 257
55225: PUSH
55226: LD_INT 11
55228: EQUAL
55229: IFFALSE 55250
// points := [ 30 , 10 , 5 ] ;
55231: LD_ADDR_VAR 0 9
55235: PUSH
55236: LD_INT 30
55238: PUSH
55239: LD_INT 10
55241: PUSH
55242: LD_INT 5
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: LIST
55249: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
55250: LD_VAR 0 1
55254: PPUSH
55255: LD_INT 5
55257: PPUSH
55258: CALL_OW 321
55262: PUSH
55263: LD_INT 2
55265: EQUAL
55266: IFFALSE 55283
// bpoints := bpoints * 1.8 ;
55268: LD_ADDR_VAR 0 10
55272: PUSH
55273: LD_VAR 0 10
55277: PUSH
55278: LD_REAL  1.80000000000000E+0000
55281: MUL
55282: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
55283: LD_VAR 0 6
55287: PPUSH
55288: CALL_OW 257
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: LD_INT 3
55301: PUSH
55302: LD_INT 4
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: IN
55311: PUSH
55312: LD_VAR 0 1
55316: PPUSH
55317: LD_INT 51
55319: PPUSH
55320: CALL_OW 321
55324: PUSH
55325: LD_INT 2
55327: EQUAL
55328: AND
55329: IFFALSE 55346
// bpoints := bpoints * 1.2 ;
55331: LD_ADDR_VAR 0 10
55335: PUSH
55336: LD_VAR 0 10
55340: PUSH
55341: LD_REAL  1.20000000000000E+0000
55344: MUL
55345: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
55346: LD_VAR 0 6
55350: PPUSH
55351: CALL_OW 257
55355: PUSH
55356: LD_INT 5
55358: PUSH
55359: LD_INT 7
55361: PUSH
55362: LD_INT 9
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: LIST
55369: IN
55370: PUSH
55371: LD_VAR 0 1
55375: PPUSH
55376: LD_INT 52
55378: PPUSH
55379: CALL_OW 321
55383: PUSH
55384: LD_INT 2
55386: EQUAL
55387: AND
55388: IFFALSE 55405
// bpoints := bpoints * 1.5 ;
55390: LD_ADDR_VAR 0 10
55394: PUSH
55395: LD_VAR 0 10
55399: PUSH
55400: LD_REAL  1.50000000000000E+0000
55403: MUL
55404: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
55405: LD_VAR 0 1
55409: PPUSH
55410: LD_INT 66
55412: PPUSH
55413: CALL_OW 321
55417: PUSH
55418: LD_INT 2
55420: EQUAL
55421: IFFALSE 55438
// bpoints := bpoints * 1.1 ;
55423: LD_ADDR_VAR 0 10
55427: PUSH
55428: LD_VAR 0 10
55432: PUSH
55433: LD_REAL  1.10000000000000E+0000
55436: MUL
55437: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
55438: LD_ADDR_VAR 0 10
55442: PUSH
55443: LD_VAR 0 10
55447: PUSH
55448: LD_VAR 0 6
55452: PPUSH
55453: LD_INT 1
55455: PPUSH
55456: CALL_OW 259
55460: PUSH
55461: LD_REAL  1.15000000000000E+0000
55464: MUL
55465: MUL
55466: ST_TO_ADDR
// end ; unit_vehicle :
55467: GO 56297
55469: LD_INT 2
55471: DOUBLE
55472: EQUAL
55473: IFTRUE 55477
55475: GO 56285
55477: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
55478: LD_VAR 0 6
55482: PPUSH
55483: CALL_OW 264
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: LD_INT 42
55493: PUSH
55494: LD_INT 24
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: IN
55502: IFFALSE 55523
// points := [ 25 , 5 , 3 ] ;
55504: LD_ADDR_VAR 0 9
55508: PUSH
55509: LD_INT 25
55511: PUSH
55512: LD_INT 5
55514: PUSH
55515: LD_INT 3
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: LIST
55522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
55523: LD_VAR 0 6
55527: PPUSH
55528: CALL_OW 264
55532: PUSH
55533: LD_INT 4
55535: PUSH
55536: LD_INT 43
55538: PUSH
55539: LD_INT 25
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: LIST
55546: IN
55547: IFFALSE 55568
// points := [ 40 , 15 , 5 ] ;
55549: LD_ADDR_VAR 0 9
55553: PUSH
55554: LD_INT 40
55556: PUSH
55557: LD_INT 15
55559: PUSH
55560: LD_INT 5
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: LIST
55567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
55568: LD_VAR 0 6
55572: PPUSH
55573: CALL_OW 264
55577: PUSH
55578: LD_INT 3
55580: PUSH
55581: LD_INT 23
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: IN
55588: IFFALSE 55609
// points := [ 7 , 25 , 8 ] ;
55590: LD_ADDR_VAR 0 9
55594: PUSH
55595: LD_INT 7
55597: PUSH
55598: LD_INT 25
55600: PUSH
55601: LD_INT 8
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: LIST
55608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
55609: LD_VAR 0 6
55613: PPUSH
55614: CALL_OW 264
55618: PUSH
55619: LD_INT 5
55621: PUSH
55622: LD_INT 27
55624: PUSH
55625: LD_INT 44
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: LIST
55632: IN
55633: IFFALSE 55654
// points := [ 14 , 50 , 16 ] ;
55635: LD_ADDR_VAR 0 9
55639: PUSH
55640: LD_INT 14
55642: PUSH
55643: LD_INT 50
55645: PUSH
55646: LD_INT 16
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: LIST
55653: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
55654: LD_VAR 0 6
55658: PPUSH
55659: CALL_OW 264
55663: PUSH
55664: LD_INT 6
55666: PUSH
55667: LD_INT 46
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: IN
55674: IFFALSE 55695
// points := [ 32 , 120 , 70 ] ;
55676: LD_ADDR_VAR 0 9
55680: PUSH
55681: LD_INT 32
55683: PUSH
55684: LD_INT 120
55686: PUSH
55687: LD_INT 70
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: LIST
55694: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
55695: LD_VAR 0 6
55699: PPUSH
55700: CALL_OW 264
55704: PUSH
55705: LD_INT 7
55707: PUSH
55708: LD_INT 28
55710: PUSH
55711: LD_INT 45
55713: PUSH
55714: LD_EXP 74
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: IN
55725: IFFALSE 55746
// points := [ 35 , 20 , 45 ] ;
55727: LD_ADDR_VAR 0 9
55731: PUSH
55732: LD_INT 35
55734: PUSH
55735: LD_INT 20
55737: PUSH
55738: LD_INT 45
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: LIST
55745: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
55746: LD_VAR 0 6
55750: PPUSH
55751: CALL_OW 264
55755: PUSH
55756: LD_INT 47
55758: PUSH
55759: EMPTY
55760: LIST
55761: IN
55762: IFFALSE 55783
// points := [ 67 , 45 , 75 ] ;
55764: LD_ADDR_VAR 0 9
55768: PUSH
55769: LD_INT 67
55771: PUSH
55772: LD_INT 45
55774: PUSH
55775: LD_INT 75
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
55783: LD_VAR 0 6
55787: PPUSH
55788: CALL_OW 264
55792: PUSH
55793: LD_INT 26
55795: PUSH
55796: EMPTY
55797: LIST
55798: IN
55799: IFFALSE 55820
// points := [ 120 , 30 , 80 ] ;
55801: LD_ADDR_VAR 0 9
55805: PUSH
55806: LD_INT 120
55808: PUSH
55809: LD_INT 30
55811: PUSH
55812: LD_INT 80
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: LIST
55819: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
55820: LD_VAR 0 6
55824: PPUSH
55825: CALL_OW 264
55829: PUSH
55830: LD_INT 22
55832: PUSH
55833: EMPTY
55834: LIST
55835: IN
55836: IFFALSE 55857
// points := [ 40 , 1 , 1 ] ;
55838: LD_ADDR_VAR 0 9
55842: PUSH
55843: LD_INT 40
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 1
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: LIST
55856: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
55857: LD_VAR 0 6
55861: PPUSH
55862: CALL_OW 264
55866: PUSH
55867: LD_INT 29
55869: PUSH
55870: EMPTY
55871: LIST
55872: IN
55873: IFFALSE 55894
// points := [ 70 , 200 , 400 ] ;
55875: LD_ADDR_VAR 0 9
55879: PUSH
55880: LD_INT 70
55882: PUSH
55883: LD_INT 200
55885: PUSH
55886: LD_INT 400
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: LIST
55893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
55894: LD_VAR 0 6
55898: PPUSH
55899: CALL_OW 264
55903: PUSH
55904: LD_INT 14
55906: PUSH
55907: LD_INT 53
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: IN
55914: IFFALSE 55935
// points := [ 40 , 10 , 20 ] ;
55916: LD_ADDR_VAR 0 9
55920: PUSH
55921: LD_INT 40
55923: PUSH
55924: LD_INT 10
55926: PUSH
55927: LD_INT 20
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: LIST
55934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
55935: LD_VAR 0 6
55939: PPUSH
55940: CALL_OW 264
55944: PUSH
55945: LD_INT 9
55947: PUSH
55948: EMPTY
55949: LIST
55950: IN
55951: IFFALSE 55972
// points := [ 5 , 70 , 20 ] ;
55953: LD_ADDR_VAR 0 9
55957: PUSH
55958: LD_INT 5
55960: PUSH
55961: LD_INT 70
55963: PUSH
55964: LD_INT 20
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: LIST
55971: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
55972: LD_VAR 0 6
55976: PPUSH
55977: CALL_OW 264
55981: PUSH
55982: LD_INT 10
55984: PUSH
55985: EMPTY
55986: LIST
55987: IN
55988: IFFALSE 56009
// points := [ 35 , 110 , 70 ] ;
55990: LD_ADDR_VAR 0 9
55994: PUSH
55995: LD_INT 35
55997: PUSH
55998: LD_INT 110
56000: PUSH
56001: LD_INT 70
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: LIST
56008: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
56009: LD_VAR 0 6
56013: PPUSH
56014: CALL_OW 265
56018: PUSH
56019: LD_INT 25
56021: EQUAL
56022: IFFALSE 56043
// points := [ 80 , 65 , 100 ] ;
56024: LD_ADDR_VAR 0 9
56028: PUSH
56029: LD_INT 80
56031: PUSH
56032: LD_INT 65
56034: PUSH
56035: LD_INT 100
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: LIST
56042: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
56043: LD_VAR 0 6
56047: PPUSH
56048: CALL_OW 263
56052: PUSH
56053: LD_INT 1
56055: EQUAL
56056: IFFALSE 56091
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
56058: LD_ADDR_VAR 0 10
56062: PUSH
56063: LD_VAR 0 10
56067: PUSH
56068: LD_VAR 0 6
56072: PPUSH
56073: CALL_OW 311
56077: PPUSH
56078: LD_INT 3
56080: PPUSH
56081: CALL_OW 259
56085: PUSH
56086: LD_INT 4
56088: MUL
56089: MUL
56090: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
56091: LD_VAR 0 6
56095: PPUSH
56096: CALL_OW 263
56100: PUSH
56101: LD_INT 2
56103: EQUAL
56104: IFFALSE 56155
// begin j := IsControledBy ( i ) ;
56106: LD_ADDR_VAR 0 7
56110: PUSH
56111: LD_VAR 0 6
56115: PPUSH
56116: CALL_OW 312
56120: ST_TO_ADDR
// if j then
56121: LD_VAR 0 7
56125: IFFALSE 56155
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
56127: LD_ADDR_VAR 0 10
56131: PUSH
56132: LD_VAR 0 10
56136: PUSH
56137: LD_VAR 0 7
56141: PPUSH
56142: LD_INT 3
56144: PPUSH
56145: CALL_OW 259
56149: PUSH
56150: LD_INT 3
56152: MUL
56153: MUL
56154: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
56155: LD_VAR 0 6
56159: PPUSH
56160: CALL_OW 264
56164: PUSH
56165: LD_INT 5
56167: PUSH
56168: LD_INT 6
56170: PUSH
56171: LD_INT 46
56173: PUSH
56174: LD_INT 44
56176: PUSH
56177: LD_INT 47
56179: PUSH
56180: LD_INT 45
56182: PUSH
56183: LD_INT 28
56185: PUSH
56186: LD_INT 7
56188: PUSH
56189: LD_INT 27
56191: PUSH
56192: LD_INT 29
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: IN
56207: PUSH
56208: LD_VAR 0 1
56212: PPUSH
56213: LD_INT 52
56215: PPUSH
56216: CALL_OW 321
56220: PUSH
56221: LD_INT 2
56223: EQUAL
56224: AND
56225: IFFALSE 56242
// bpoints := bpoints * 1.2 ;
56227: LD_ADDR_VAR 0 10
56231: PUSH
56232: LD_VAR 0 10
56236: PUSH
56237: LD_REAL  1.20000000000000E+0000
56240: MUL
56241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
56242: LD_VAR 0 6
56246: PPUSH
56247: CALL_OW 264
56251: PUSH
56252: LD_INT 6
56254: PUSH
56255: LD_INT 46
56257: PUSH
56258: LD_INT 47
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: LIST
56265: IN
56266: IFFALSE 56283
// bpoints := bpoints * 1.2 ;
56268: LD_ADDR_VAR 0 10
56272: PUSH
56273: LD_VAR 0 10
56277: PUSH
56278: LD_REAL  1.20000000000000E+0000
56281: MUL
56282: ST_TO_ADDR
// end ; unit_building :
56283: GO 56297
56285: LD_INT 3
56287: DOUBLE
56288: EQUAL
56289: IFTRUE 56293
56291: GO 56296
56293: POP
// ; end ;
56294: GO 56297
56296: POP
// for j = 1 to 3 do
56297: LD_ADDR_VAR 0 7
56301: PUSH
56302: DOUBLE
56303: LD_INT 1
56305: DEC
56306: ST_TO_ADDR
56307: LD_INT 3
56309: PUSH
56310: FOR_TO
56311: IFFALSE 56364
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
56313: LD_ADDR_VAR 0 5
56317: PUSH
56318: LD_VAR 0 5
56322: PPUSH
56323: LD_VAR 0 7
56327: PPUSH
56328: LD_VAR 0 5
56332: PUSH
56333: LD_VAR 0 7
56337: ARRAY
56338: PUSH
56339: LD_VAR 0 9
56343: PUSH
56344: LD_VAR 0 7
56348: ARRAY
56349: PUSH
56350: LD_VAR 0 10
56354: MUL
56355: PLUS
56356: PPUSH
56357: CALL_OW 1
56361: ST_TO_ADDR
56362: GO 56310
56364: POP
56365: POP
// end ;
56366: GO 54843
56368: POP
56369: POP
// result := Replace ( result , 4 , tmp ) ;
56370: LD_ADDR_VAR 0 5
56374: PUSH
56375: LD_VAR 0 5
56379: PPUSH
56380: LD_INT 4
56382: PPUSH
56383: LD_VAR 0 8
56387: PPUSH
56388: CALL_OW 1
56392: ST_TO_ADDR
// end ;
56393: LD_VAR 0 5
56397: RET
// export function DangerAtRange ( unit , range ) ; begin
56398: LD_INT 0
56400: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
56401: LD_ADDR_VAR 0 3
56405: PUSH
56406: LD_VAR 0 1
56410: PPUSH
56411: CALL_OW 255
56415: PPUSH
56416: LD_VAR 0 1
56420: PPUSH
56421: CALL_OW 250
56425: PPUSH
56426: LD_VAR 0 1
56430: PPUSH
56431: CALL_OW 251
56435: PPUSH
56436: LD_VAR 0 2
56440: PPUSH
56441: CALL 54695 0 4
56445: ST_TO_ADDR
// end ;
56446: LD_VAR 0 3
56450: RET
// export function DangerInArea ( side , area ) ; begin
56451: LD_INT 0
56453: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
56454: LD_ADDR_VAR 0 3
56458: PUSH
56459: LD_VAR 0 2
56463: PPUSH
56464: LD_INT 81
56466: PUSH
56467: LD_VAR 0 1
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PPUSH
56476: CALL_OW 70
56480: ST_TO_ADDR
// end ;
56481: LD_VAR 0 3
56485: RET
// export function IsExtension ( b ) ; begin
56486: LD_INT 0
56488: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
56489: LD_ADDR_VAR 0 2
56493: PUSH
56494: LD_VAR 0 1
56498: PUSH
56499: LD_INT 23
56501: PUSH
56502: LD_INT 20
56504: PUSH
56505: LD_INT 22
56507: PUSH
56508: LD_INT 17
56510: PUSH
56511: LD_INT 24
56513: PUSH
56514: LD_INT 21
56516: PUSH
56517: LD_INT 19
56519: PUSH
56520: LD_INT 16
56522: PUSH
56523: LD_INT 25
56525: PUSH
56526: LD_INT 18
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: IN
56541: ST_TO_ADDR
// end ;
56542: LD_VAR 0 2
56546: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
56547: LD_INT 0
56549: PPUSH
56550: PPUSH
56551: PPUSH
// result := [ ] ;
56552: LD_ADDR_VAR 0 4
56556: PUSH
56557: EMPTY
56558: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
56559: LD_ADDR_VAR 0 5
56563: PUSH
56564: LD_VAR 0 2
56568: PPUSH
56569: LD_INT 21
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PPUSH
56579: CALL_OW 70
56583: ST_TO_ADDR
// if not tmp then
56584: LD_VAR 0 5
56588: NOT
56589: IFFALSE 56593
// exit ;
56591: GO 56657
// if checkLink then
56593: LD_VAR 0 3
56597: IFFALSE 56647
// begin for i in tmp do
56599: LD_ADDR_VAR 0 6
56603: PUSH
56604: LD_VAR 0 5
56608: PUSH
56609: FOR_IN
56610: IFFALSE 56645
// if GetBase ( i ) <> base then
56612: LD_VAR 0 6
56616: PPUSH
56617: CALL_OW 274
56621: PUSH
56622: LD_VAR 0 1
56626: NONEQUAL
56627: IFFALSE 56643
// ComLinkToBase ( base , i ) ;
56629: LD_VAR 0 1
56633: PPUSH
56634: LD_VAR 0 6
56638: PPUSH
56639: CALL_OW 169
56643: GO 56609
56645: POP
56646: POP
// end ; result := tmp ;
56647: LD_ADDR_VAR 0 4
56651: PUSH
56652: LD_VAR 0 5
56656: ST_TO_ADDR
// end ;
56657: LD_VAR 0 4
56661: RET
// export function ComComplete ( units , b ) ; var i ; begin
56662: LD_INT 0
56664: PPUSH
56665: PPUSH
// if not units then
56666: LD_VAR 0 1
56670: NOT
56671: IFFALSE 56675
// exit ;
56673: GO 56765
// for i in units do
56675: LD_ADDR_VAR 0 4
56679: PUSH
56680: LD_VAR 0 1
56684: PUSH
56685: FOR_IN
56686: IFFALSE 56763
// if BuildingStatus ( b ) = bs_build then
56688: LD_VAR 0 2
56692: PPUSH
56693: CALL_OW 461
56697: PUSH
56698: LD_INT 1
56700: EQUAL
56701: IFFALSE 56761
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
56703: LD_VAR 0 4
56707: PPUSH
56708: LD_STRING h
56710: PUSH
56711: LD_VAR 0 2
56715: PPUSH
56716: CALL_OW 250
56720: PUSH
56721: LD_VAR 0 2
56725: PPUSH
56726: CALL_OW 251
56730: PUSH
56731: LD_VAR 0 2
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: PUSH
56754: EMPTY
56755: LIST
56756: PPUSH
56757: CALL_OW 446
56761: GO 56685
56763: POP
56764: POP
// end ;
56765: LD_VAR 0 3
56769: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
56770: LD_INT 0
56772: PPUSH
56773: PPUSH
56774: PPUSH
56775: PPUSH
56776: PPUSH
56777: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
56778: LD_VAR 0 1
56782: NOT
56783: PUSH
56784: LD_VAR 0 1
56788: PPUSH
56789: CALL_OW 263
56793: PUSH
56794: LD_INT 2
56796: NONEQUAL
56797: OR
56798: IFFALSE 56802
// exit ;
56800: GO 57118
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
56802: LD_ADDR_VAR 0 6
56806: PUSH
56807: LD_INT 22
56809: PUSH
56810: LD_VAR 0 1
56814: PPUSH
56815: CALL_OW 255
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: LD_INT 30
56829: PUSH
56830: LD_INT 36
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 34
56839: PUSH
56840: LD_INT 31
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: LIST
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PPUSH
56856: CALL_OW 69
56860: ST_TO_ADDR
// if not tmp then
56861: LD_VAR 0 6
56865: NOT
56866: IFFALSE 56870
// exit ;
56868: GO 57118
// result := [ ] ;
56870: LD_ADDR_VAR 0 2
56874: PUSH
56875: EMPTY
56876: ST_TO_ADDR
// for i in tmp do
56877: LD_ADDR_VAR 0 3
56881: PUSH
56882: LD_VAR 0 6
56886: PUSH
56887: FOR_IN
56888: IFFALSE 56959
// begin t := UnitsInside ( i ) ;
56890: LD_ADDR_VAR 0 4
56894: PUSH
56895: LD_VAR 0 3
56899: PPUSH
56900: CALL_OW 313
56904: ST_TO_ADDR
// if t then
56905: LD_VAR 0 4
56909: IFFALSE 56957
// for j in t do
56911: LD_ADDR_VAR 0 7
56915: PUSH
56916: LD_VAR 0 4
56920: PUSH
56921: FOR_IN
56922: IFFALSE 56955
// result := Replace ( result , result + 1 , j ) ;
56924: LD_ADDR_VAR 0 2
56928: PUSH
56929: LD_VAR 0 2
56933: PPUSH
56934: LD_VAR 0 2
56938: PUSH
56939: LD_INT 1
56941: PLUS
56942: PPUSH
56943: LD_VAR 0 7
56947: PPUSH
56948: CALL_OW 1
56952: ST_TO_ADDR
56953: GO 56921
56955: POP
56956: POP
// end ;
56957: GO 56887
56959: POP
56960: POP
// if not result then
56961: LD_VAR 0 2
56965: NOT
56966: IFFALSE 56970
// exit ;
56968: GO 57118
// mech := result [ 1 ] ;
56970: LD_ADDR_VAR 0 5
56974: PUSH
56975: LD_VAR 0 2
56979: PUSH
56980: LD_INT 1
56982: ARRAY
56983: ST_TO_ADDR
// if result > 1 then
56984: LD_VAR 0 2
56988: PUSH
56989: LD_INT 1
56991: GREATER
56992: IFFALSE 57104
// begin for i = 2 to result do
56994: LD_ADDR_VAR 0 3
56998: PUSH
56999: DOUBLE
57000: LD_INT 2
57002: DEC
57003: ST_TO_ADDR
57004: LD_VAR 0 2
57008: PUSH
57009: FOR_TO
57010: IFFALSE 57102
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
57012: LD_ADDR_VAR 0 4
57016: PUSH
57017: LD_VAR 0 2
57021: PUSH
57022: LD_VAR 0 3
57026: ARRAY
57027: PPUSH
57028: LD_INT 3
57030: PPUSH
57031: CALL_OW 259
57035: PUSH
57036: LD_VAR 0 2
57040: PUSH
57041: LD_VAR 0 3
57045: ARRAY
57046: PPUSH
57047: CALL_OW 432
57051: MINUS
57052: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
57053: LD_VAR 0 4
57057: PUSH
57058: LD_VAR 0 5
57062: PPUSH
57063: LD_INT 3
57065: PPUSH
57066: CALL_OW 259
57070: PUSH
57071: LD_VAR 0 5
57075: PPUSH
57076: CALL_OW 432
57080: MINUS
57081: GREATEREQUAL
57082: IFFALSE 57100
// mech := result [ i ] ;
57084: LD_ADDR_VAR 0 5
57088: PUSH
57089: LD_VAR 0 2
57093: PUSH
57094: LD_VAR 0 3
57098: ARRAY
57099: ST_TO_ADDR
// end ;
57100: GO 57009
57102: POP
57103: POP
// end ; ComLinkTo ( vehicle , mech ) ;
57104: LD_VAR 0 1
57108: PPUSH
57109: LD_VAR 0 5
57113: PPUSH
57114: CALL_OW 135
// end ;
57118: LD_VAR 0 2
57122: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
57123: LD_INT 0
57125: PPUSH
57126: PPUSH
57127: PPUSH
57128: PPUSH
57129: PPUSH
57130: PPUSH
57131: PPUSH
57132: PPUSH
57133: PPUSH
57134: PPUSH
57135: PPUSH
57136: PPUSH
57137: PPUSH
// result := [ ] ;
57138: LD_ADDR_VAR 0 7
57142: PUSH
57143: EMPTY
57144: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
57145: LD_VAR 0 1
57149: PPUSH
57150: CALL_OW 266
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: IN
57165: NOT
57166: IFFALSE 57170
// exit ;
57168: GO 58804
// if name then
57170: LD_VAR 0 3
57174: IFFALSE 57190
// SetBName ( base_dep , name ) ;
57176: LD_VAR 0 1
57180: PPUSH
57181: LD_VAR 0 3
57185: PPUSH
57186: CALL_OW 500
// base := GetBase ( base_dep ) ;
57190: LD_ADDR_VAR 0 15
57194: PUSH
57195: LD_VAR 0 1
57199: PPUSH
57200: CALL_OW 274
57204: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
57205: LD_ADDR_VAR 0 16
57209: PUSH
57210: LD_VAR 0 1
57214: PPUSH
57215: CALL_OW 255
57219: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
57220: LD_ADDR_VAR 0 17
57224: PUSH
57225: LD_VAR 0 1
57229: PPUSH
57230: CALL_OW 248
57234: ST_TO_ADDR
// if sources then
57235: LD_VAR 0 5
57239: IFFALSE 57286
// for i = 1 to 3 do
57241: LD_ADDR_VAR 0 8
57245: PUSH
57246: DOUBLE
57247: LD_INT 1
57249: DEC
57250: ST_TO_ADDR
57251: LD_INT 3
57253: PUSH
57254: FOR_TO
57255: IFFALSE 57284
// AddResourceType ( base , i , sources [ i ] ) ;
57257: LD_VAR 0 15
57261: PPUSH
57262: LD_VAR 0 8
57266: PPUSH
57267: LD_VAR 0 5
57271: PUSH
57272: LD_VAR 0 8
57276: ARRAY
57277: PPUSH
57278: CALL_OW 276
57282: GO 57254
57284: POP
57285: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
57286: LD_ADDR_VAR 0 18
57290: PUSH
57291: LD_VAR 0 15
57295: PPUSH
57296: LD_VAR 0 2
57300: PPUSH
57301: LD_INT 1
57303: PPUSH
57304: CALL 56547 0 3
57308: ST_TO_ADDR
// InitHc ;
57309: CALL_OW 19
// InitUc ;
57313: CALL_OW 18
// uc_side := side ;
57317: LD_ADDR_OWVAR 20
57321: PUSH
57322: LD_VAR 0 16
57326: ST_TO_ADDR
// uc_nation := nation ;
57327: LD_ADDR_OWVAR 21
57331: PUSH
57332: LD_VAR 0 17
57336: ST_TO_ADDR
// if buildings then
57337: LD_VAR 0 18
57341: IFFALSE 58663
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
57343: LD_ADDR_VAR 0 19
57347: PUSH
57348: LD_VAR 0 18
57352: PPUSH
57353: LD_INT 2
57355: PUSH
57356: LD_INT 30
57358: PUSH
57359: LD_INT 29
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 30
57368: PUSH
57369: LD_INT 30
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: LIST
57380: PPUSH
57381: CALL_OW 72
57385: ST_TO_ADDR
// if tmp then
57386: LD_VAR 0 19
57390: IFFALSE 57438
// for i in tmp do
57392: LD_ADDR_VAR 0 8
57396: PUSH
57397: LD_VAR 0 19
57401: PUSH
57402: FOR_IN
57403: IFFALSE 57436
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
57405: LD_VAR 0 8
57409: PPUSH
57410: CALL_OW 250
57414: PPUSH
57415: LD_VAR 0 8
57419: PPUSH
57420: CALL_OW 251
57424: PPUSH
57425: LD_VAR 0 16
57429: PPUSH
57430: CALL_OW 441
57434: GO 57402
57436: POP
57437: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
57438: LD_VAR 0 18
57442: PPUSH
57443: LD_INT 2
57445: PUSH
57446: LD_INT 30
57448: PUSH
57449: LD_INT 32
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 30
57458: PUSH
57459: LD_INT 33
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: LIST
57470: PPUSH
57471: CALL_OW 72
57475: IFFALSE 57563
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
57477: LD_ADDR_VAR 0 8
57481: PUSH
57482: LD_VAR 0 18
57486: PPUSH
57487: LD_INT 2
57489: PUSH
57490: LD_INT 30
57492: PUSH
57493: LD_INT 32
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 30
57502: PUSH
57503: LD_INT 33
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: LIST
57514: PPUSH
57515: CALL_OW 72
57519: PUSH
57520: FOR_IN
57521: IFFALSE 57561
// begin if not GetBWeapon ( i ) then
57523: LD_VAR 0 8
57527: PPUSH
57528: CALL_OW 269
57532: NOT
57533: IFFALSE 57559
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
57535: LD_VAR 0 8
57539: PPUSH
57540: LD_VAR 0 8
57544: PPUSH
57545: LD_VAR 0 2
57549: PPUSH
57550: CALL 58809 0 2
57554: PPUSH
57555: CALL_OW 431
// end ;
57559: GO 57520
57561: POP
57562: POP
// end ; for i = 1 to personel do
57563: LD_ADDR_VAR 0 8
57567: PUSH
57568: DOUBLE
57569: LD_INT 1
57571: DEC
57572: ST_TO_ADDR
57573: LD_VAR 0 6
57577: PUSH
57578: FOR_TO
57579: IFFALSE 58643
// begin if i > 4 then
57581: LD_VAR 0 8
57585: PUSH
57586: LD_INT 4
57588: GREATER
57589: IFFALSE 57593
// break ;
57591: GO 58643
// case i of 1 :
57593: LD_VAR 0 8
57597: PUSH
57598: LD_INT 1
57600: DOUBLE
57601: EQUAL
57602: IFTRUE 57606
57604: GO 57686
57606: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
57607: LD_ADDR_VAR 0 12
57611: PUSH
57612: LD_VAR 0 18
57616: PPUSH
57617: LD_INT 22
57619: PUSH
57620: LD_VAR 0 16
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 58
57631: PUSH
57632: EMPTY
57633: LIST
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: LD_INT 30
57640: PUSH
57641: LD_INT 32
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 30
57650: PUSH
57651: LD_INT 4
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 30
57660: PUSH
57661: LD_INT 5
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: LIST
57678: PPUSH
57679: CALL_OW 72
57683: ST_TO_ADDR
57684: GO 57908
57686: LD_INT 2
57688: DOUBLE
57689: EQUAL
57690: IFTRUE 57694
57692: GO 57756
57694: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
57695: LD_ADDR_VAR 0 12
57699: PUSH
57700: LD_VAR 0 18
57704: PPUSH
57705: LD_INT 22
57707: PUSH
57708: LD_VAR 0 16
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: LD_INT 30
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 30
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: LIST
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PPUSH
57749: CALL_OW 72
57753: ST_TO_ADDR
57754: GO 57908
57756: LD_INT 3
57758: DOUBLE
57759: EQUAL
57760: IFTRUE 57764
57762: GO 57826
57764: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
57765: LD_ADDR_VAR 0 12
57769: PUSH
57770: LD_VAR 0 18
57774: PPUSH
57775: LD_INT 22
57777: PUSH
57778: LD_VAR 0 16
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: LD_INT 30
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 30
57802: PUSH
57803: LD_INT 3
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: LIST
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PPUSH
57819: CALL_OW 72
57823: ST_TO_ADDR
57824: GO 57908
57826: LD_INT 4
57828: DOUBLE
57829: EQUAL
57830: IFTRUE 57834
57832: GO 57907
57834: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
57835: LD_ADDR_VAR 0 12
57839: PUSH
57840: LD_VAR 0 18
57844: PPUSH
57845: LD_INT 22
57847: PUSH
57848: LD_VAR 0 16
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: LD_INT 30
57862: PUSH
57863: LD_INT 6
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 30
57872: PUSH
57873: LD_INT 7
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 30
57882: PUSH
57883: LD_INT 8
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PPUSH
57900: CALL_OW 72
57904: ST_TO_ADDR
57905: GO 57908
57907: POP
// if i = 1 then
57908: LD_VAR 0 8
57912: PUSH
57913: LD_INT 1
57915: EQUAL
57916: IFFALSE 58027
// begin tmp := [ ] ;
57918: LD_ADDR_VAR 0 19
57922: PUSH
57923: EMPTY
57924: ST_TO_ADDR
// for j in f do
57925: LD_ADDR_VAR 0 9
57929: PUSH
57930: LD_VAR 0 12
57934: PUSH
57935: FOR_IN
57936: IFFALSE 58009
// if GetBType ( j ) = b_bunker then
57938: LD_VAR 0 9
57942: PPUSH
57943: CALL_OW 266
57947: PUSH
57948: LD_INT 32
57950: EQUAL
57951: IFFALSE 57978
// tmp := Insert ( tmp , 1 , j ) else
57953: LD_ADDR_VAR 0 19
57957: PUSH
57958: LD_VAR 0 19
57962: PPUSH
57963: LD_INT 1
57965: PPUSH
57966: LD_VAR 0 9
57970: PPUSH
57971: CALL_OW 2
57975: ST_TO_ADDR
57976: GO 58007
// tmp := Insert ( tmp , tmp + 1 , j ) ;
57978: LD_ADDR_VAR 0 19
57982: PUSH
57983: LD_VAR 0 19
57987: PPUSH
57988: LD_VAR 0 19
57992: PUSH
57993: LD_INT 1
57995: PLUS
57996: PPUSH
57997: LD_VAR 0 9
58001: PPUSH
58002: CALL_OW 2
58006: ST_TO_ADDR
58007: GO 57935
58009: POP
58010: POP
// if tmp then
58011: LD_VAR 0 19
58015: IFFALSE 58027
// f := tmp ;
58017: LD_ADDR_VAR 0 12
58021: PUSH
58022: LD_VAR 0 19
58026: ST_TO_ADDR
// end ; x := personel [ i ] ;
58027: LD_ADDR_VAR 0 13
58031: PUSH
58032: LD_VAR 0 6
58036: PUSH
58037: LD_VAR 0 8
58041: ARRAY
58042: ST_TO_ADDR
// if x = - 1 then
58043: LD_VAR 0 13
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: EQUAL
58052: IFFALSE 58261
// begin for j in f do
58054: LD_ADDR_VAR 0 9
58058: PUSH
58059: LD_VAR 0 12
58063: PUSH
58064: FOR_IN
58065: IFFALSE 58257
// repeat InitHc ;
58067: CALL_OW 19
// if GetBType ( j ) = b_barracks then
58071: LD_VAR 0 9
58075: PPUSH
58076: CALL_OW 266
58080: PUSH
58081: LD_INT 5
58083: EQUAL
58084: IFFALSE 58154
// begin if UnitsInside ( j ) < 3 then
58086: LD_VAR 0 9
58090: PPUSH
58091: CALL_OW 313
58095: PUSH
58096: LD_INT 3
58098: LESS
58099: IFFALSE 58135
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
58101: LD_INT 0
58103: PPUSH
58104: LD_INT 5
58106: PUSH
58107: LD_INT 8
58109: PUSH
58110: LD_INT 9
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: LIST
58117: PUSH
58118: LD_VAR 0 17
58122: ARRAY
58123: PPUSH
58124: LD_VAR 0 4
58128: PPUSH
58129: CALL_OW 380
58133: GO 58152
// PrepareHuman ( false , i , skill ) ;
58135: LD_INT 0
58137: PPUSH
58138: LD_VAR 0 8
58142: PPUSH
58143: LD_VAR 0 4
58147: PPUSH
58148: CALL_OW 380
// end else
58152: GO 58171
// PrepareHuman ( false , i , skill ) ;
58154: LD_INT 0
58156: PPUSH
58157: LD_VAR 0 8
58161: PPUSH
58162: LD_VAR 0 4
58166: PPUSH
58167: CALL_OW 380
// un := CreateHuman ;
58171: LD_ADDR_VAR 0 14
58175: PUSH
58176: CALL_OW 44
58180: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58181: LD_ADDR_VAR 0 7
58185: PUSH
58186: LD_VAR 0 7
58190: PPUSH
58191: LD_INT 1
58193: PPUSH
58194: LD_VAR 0 14
58198: PPUSH
58199: CALL_OW 2
58203: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
58204: LD_VAR 0 14
58208: PPUSH
58209: LD_VAR 0 9
58213: PPUSH
58214: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
58218: LD_VAR 0 9
58222: PPUSH
58223: CALL_OW 313
58227: PUSH
58228: LD_INT 6
58230: EQUAL
58231: PUSH
58232: LD_VAR 0 9
58236: PPUSH
58237: CALL_OW 266
58241: PUSH
58242: LD_INT 32
58244: PUSH
58245: LD_INT 31
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: IN
58252: OR
58253: IFFALSE 58067
58255: GO 58064
58257: POP
58258: POP
// end else
58259: GO 58641
// for j = 1 to x do
58261: LD_ADDR_VAR 0 9
58265: PUSH
58266: DOUBLE
58267: LD_INT 1
58269: DEC
58270: ST_TO_ADDR
58271: LD_VAR 0 13
58275: PUSH
58276: FOR_TO
58277: IFFALSE 58639
// begin InitHc ;
58279: CALL_OW 19
// if not f then
58283: LD_VAR 0 12
58287: NOT
58288: IFFALSE 58377
// begin PrepareHuman ( false , i , skill ) ;
58290: LD_INT 0
58292: PPUSH
58293: LD_VAR 0 8
58297: PPUSH
58298: LD_VAR 0 4
58302: PPUSH
58303: CALL_OW 380
// un := CreateHuman ;
58307: LD_ADDR_VAR 0 14
58311: PUSH
58312: CALL_OW 44
58316: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58317: LD_ADDR_VAR 0 7
58321: PUSH
58322: LD_VAR 0 7
58326: PPUSH
58327: LD_INT 1
58329: PPUSH
58330: LD_VAR 0 14
58334: PPUSH
58335: CALL_OW 2
58339: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
58340: LD_VAR 0 14
58344: PPUSH
58345: LD_VAR 0 1
58349: PPUSH
58350: CALL_OW 250
58354: PPUSH
58355: LD_VAR 0 1
58359: PPUSH
58360: CALL_OW 251
58364: PPUSH
58365: LD_INT 10
58367: PPUSH
58368: LD_INT 0
58370: PPUSH
58371: CALL_OW 50
// continue ;
58375: GO 58276
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
58377: LD_VAR 0 12
58381: PUSH
58382: LD_INT 1
58384: ARRAY
58385: PPUSH
58386: CALL_OW 313
58390: PUSH
58391: LD_VAR 0 12
58395: PUSH
58396: LD_INT 1
58398: ARRAY
58399: PPUSH
58400: CALL_OW 266
58404: PUSH
58405: LD_INT 32
58407: PUSH
58408: LD_INT 31
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: IN
58415: AND
58416: PUSH
58417: LD_VAR 0 12
58421: PUSH
58422: LD_INT 1
58424: ARRAY
58425: PPUSH
58426: CALL_OW 313
58430: PUSH
58431: LD_INT 6
58433: EQUAL
58434: OR
58435: IFFALSE 58455
// f := Delete ( f , 1 ) ;
58437: LD_ADDR_VAR 0 12
58441: PUSH
58442: LD_VAR 0 12
58446: PPUSH
58447: LD_INT 1
58449: PPUSH
58450: CALL_OW 3
58454: ST_TO_ADDR
// if not f then
58455: LD_VAR 0 12
58459: NOT
58460: IFFALSE 58478
// begin x := x + 2 ;
58462: LD_ADDR_VAR 0 13
58466: PUSH
58467: LD_VAR 0 13
58471: PUSH
58472: LD_INT 2
58474: PLUS
58475: ST_TO_ADDR
// continue ;
58476: GO 58276
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
58478: LD_VAR 0 12
58482: PUSH
58483: LD_INT 1
58485: ARRAY
58486: PPUSH
58487: CALL_OW 266
58491: PUSH
58492: LD_INT 5
58494: EQUAL
58495: IFFALSE 58569
// begin if UnitsInside ( f [ 1 ] ) < 3 then
58497: LD_VAR 0 12
58501: PUSH
58502: LD_INT 1
58504: ARRAY
58505: PPUSH
58506: CALL_OW 313
58510: PUSH
58511: LD_INT 3
58513: LESS
58514: IFFALSE 58550
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
58516: LD_INT 0
58518: PPUSH
58519: LD_INT 5
58521: PUSH
58522: LD_INT 8
58524: PUSH
58525: LD_INT 9
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: LIST
58532: PUSH
58533: LD_VAR 0 17
58537: ARRAY
58538: PPUSH
58539: LD_VAR 0 4
58543: PPUSH
58544: CALL_OW 380
58548: GO 58567
// PrepareHuman ( false , i , skill ) ;
58550: LD_INT 0
58552: PPUSH
58553: LD_VAR 0 8
58557: PPUSH
58558: LD_VAR 0 4
58562: PPUSH
58563: CALL_OW 380
// end else
58567: GO 58586
// PrepareHuman ( false , i , skill ) ;
58569: LD_INT 0
58571: PPUSH
58572: LD_VAR 0 8
58576: PPUSH
58577: LD_VAR 0 4
58581: PPUSH
58582: CALL_OW 380
// un := CreateHuman ;
58586: LD_ADDR_VAR 0 14
58590: PUSH
58591: CALL_OW 44
58595: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58596: LD_ADDR_VAR 0 7
58600: PUSH
58601: LD_VAR 0 7
58605: PPUSH
58606: LD_INT 1
58608: PPUSH
58609: LD_VAR 0 14
58613: PPUSH
58614: CALL_OW 2
58618: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
58619: LD_VAR 0 14
58623: PPUSH
58624: LD_VAR 0 12
58628: PUSH
58629: LD_INT 1
58631: ARRAY
58632: PPUSH
58633: CALL_OW 52
// end ;
58637: GO 58276
58639: POP
58640: POP
// end ;
58641: GO 57578
58643: POP
58644: POP
// result := result ^ buildings ;
58645: LD_ADDR_VAR 0 7
58649: PUSH
58650: LD_VAR 0 7
58654: PUSH
58655: LD_VAR 0 18
58659: ADD
58660: ST_TO_ADDR
// end else
58661: GO 58804
// begin for i = 1 to personel do
58663: LD_ADDR_VAR 0 8
58667: PUSH
58668: DOUBLE
58669: LD_INT 1
58671: DEC
58672: ST_TO_ADDR
58673: LD_VAR 0 6
58677: PUSH
58678: FOR_TO
58679: IFFALSE 58802
// begin if i > 4 then
58681: LD_VAR 0 8
58685: PUSH
58686: LD_INT 4
58688: GREATER
58689: IFFALSE 58693
// break ;
58691: GO 58802
// x := personel [ i ] ;
58693: LD_ADDR_VAR 0 13
58697: PUSH
58698: LD_VAR 0 6
58702: PUSH
58703: LD_VAR 0 8
58707: ARRAY
58708: ST_TO_ADDR
// if x = - 1 then
58709: LD_VAR 0 13
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: EQUAL
58718: IFFALSE 58722
// continue ;
58720: GO 58678
// PrepareHuman ( false , i , skill ) ;
58722: LD_INT 0
58724: PPUSH
58725: LD_VAR 0 8
58729: PPUSH
58730: LD_VAR 0 4
58734: PPUSH
58735: CALL_OW 380
// un := CreateHuman ;
58739: LD_ADDR_VAR 0 14
58743: PUSH
58744: CALL_OW 44
58748: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
58749: LD_VAR 0 14
58753: PPUSH
58754: LD_VAR 0 1
58758: PPUSH
58759: CALL_OW 250
58763: PPUSH
58764: LD_VAR 0 1
58768: PPUSH
58769: CALL_OW 251
58773: PPUSH
58774: LD_INT 10
58776: PPUSH
58777: LD_INT 0
58779: PPUSH
58780: CALL_OW 50
// result := result ^ un ;
58784: LD_ADDR_VAR 0 7
58788: PUSH
58789: LD_VAR 0 7
58793: PUSH
58794: LD_VAR 0 14
58798: ADD
58799: ST_TO_ADDR
// end ;
58800: GO 58678
58802: POP
58803: POP
// end ; end ;
58804: LD_VAR 0 7
58808: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
58809: LD_INT 0
58811: PPUSH
58812: PPUSH
58813: PPUSH
58814: PPUSH
58815: PPUSH
58816: PPUSH
58817: PPUSH
58818: PPUSH
58819: PPUSH
58820: PPUSH
58821: PPUSH
58822: PPUSH
58823: PPUSH
58824: PPUSH
58825: PPUSH
58826: PPUSH
// result := false ;
58827: LD_ADDR_VAR 0 3
58831: PUSH
58832: LD_INT 0
58834: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
58835: LD_VAR 0 1
58839: NOT
58840: PUSH
58841: LD_VAR 0 1
58845: PPUSH
58846: CALL_OW 266
58850: PUSH
58851: LD_INT 32
58853: PUSH
58854: LD_INT 33
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: IN
58861: NOT
58862: OR
58863: IFFALSE 58867
// exit ;
58865: GO 59976
// nat := GetNation ( tower ) ;
58867: LD_ADDR_VAR 0 12
58871: PUSH
58872: LD_VAR 0 1
58876: PPUSH
58877: CALL_OW 248
58881: ST_TO_ADDR
// side := GetSide ( tower ) ;
58882: LD_ADDR_VAR 0 16
58886: PUSH
58887: LD_VAR 0 1
58891: PPUSH
58892: CALL_OW 255
58896: ST_TO_ADDR
// x := GetX ( tower ) ;
58897: LD_ADDR_VAR 0 10
58901: PUSH
58902: LD_VAR 0 1
58906: PPUSH
58907: CALL_OW 250
58911: ST_TO_ADDR
// y := GetY ( tower ) ;
58912: LD_ADDR_VAR 0 11
58916: PUSH
58917: LD_VAR 0 1
58921: PPUSH
58922: CALL_OW 251
58926: ST_TO_ADDR
// if not x or not y then
58927: LD_VAR 0 10
58931: NOT
58932: PUSH
58933: LD_VAR 0 11
58937: NOT
58938: OR
58939: IFFALSE 58943
// exit ;
58941: GO 59976
// weapon := 0 ;
58943: LD_ADDR_VAR 0 18
58947: PUSH
58948: LD_INT 0
58950: ST_TO_ADDR
// fac_list := [ ] ;
58951: LD_ADDR_VAR 0 17
58955: PUSH
58956: EMPTY
58957: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
58958: LD_ADDR_VAR 0 6
58962: PUSH
58963: LD_VAR 0 1
58967: PPUSH
58968: CALL_OW 274
58972: PPUSH
58973: LD_VAR 0 2
58977: PPUSH
58978: LD_INT 0
58980: PPUSH
58981: CALL 56547 0 3
58985: PPUSH
58986: LD_INT 30
58988: PUSH
58989: LD_INT 3
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PPUSH
58996: CALL_OW 72
59000: ST_TO_ADDR
// if not factories then
59001: LD_VAR 0 6
59005: NOT
59006: IFFALSE 59010
// exit ;
59008: GO 59976
// for i in factories do
59010: LD_ADDR_VAR 0 8
59014: PUSH
59015: LD_VAR 0 6
59019: PUSH
59020: FOR_IN
59021: IFFALSE 59046
// fac_list := fac_list union AvailableWeaponList ( i ) ;
59023: LD_ADDR_VAR 0 17
59027: PUSH
59028: LD_VAR 0 17
59032: PUSH
59033: LD_VAR 0 8
59037: PPUSH
59038: CALL_OW 478
59042: UNION
59043: ST_TO_ADDR
59044: GO 59020
59046: POP
59047: POP
// if not fac_list then
59048: LD_VAR 0 17
59052: NOT
59053: IFFALSE 59057
// exit ;
59055: GO 59976
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
59057: LD_ADDR_VAR 0 5
59061: PUSH
59062: LD_INT 4
59064: PUSH
59065: LD_INT 5
59067: PUSH
59068: LD_INT 9
59070: PUSH
59071: LD_INT 10
59073: PUSH
59074: LD_INT 6
59076: PUSH
59077: LD_INT 7
59079: PUSH
59080: LD_INT 11
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 27
59094: PUSH
59095: LD_INT 28
59097: PUSH
59098: LD_INT 26
59100: PUSH
59101: LD_INT 30
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 43
59112: PUSH
59113: LD_INT 44
59115: PUSH
59116: LD_INT 46
59118: PUSH
59119: LD_INT 45
59121: PUSH
59122: LD_INT 47
59124: PUSH
59125: LD_INT 49
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: LIST
59140: PUSH
59141: LD_VAR 0 12
59145: ARRAY
59146: ST_TO_ADDR
// list := list isect fac_list ;
59147: LD_ADDR_VAR 0 5
59151: PUSH
59152: LD_VAR 0 5
59156: PUSH
59157: LD_VAR 0 17
59161: ISECT
59162: ST_TO_ADDR
// if not list then
59163: LD_VAR 0 5
59167: NOT
59168: IFFALSE 59172
// exit ;
59170: GO 59976
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
59172: LD_VAR 0 12
59176: PUSH
59177: LD_INT 3
59179: EQUAL
59180: PUSH
59181: LD_INT 49
59183: PUSH
59184: LD_VAR 0 5
59188: IN
59189: AND
59190: PUSH
59191: LD_INT 31
59193: PPUSH
59194: LD_VAR 0 16
59198: PPUSH
59199: CALL_OW 321
59203: PUSH
59204: LD_INT 2
59206: EQUAL
59207: AND
59208: IFFALSE 59268
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
59210: LD_INT 22
59212: PUSH
59213: LD_VAR 0 16
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 35
59224: PUSH
59225: LD_INT 49
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 91
59234: PUSH
59235: LD_VAR 0 1
59239: PUSH
59240: LD_INT 10
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: LIST
59252: PPUSH
59253: CALL_OW 69
59257: NOT
59258: IFFALSE 59268
// weapon := ru_time_lapser ;
59260: LD_ADDR_VAR 0 18
59264: PUSH
59265: LD_INT 49
59267: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
59268: LD_VAR 0 12
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: IN
59283: PUSH
59284: LD_INT 11
59286: PUSH
59287: LD_VAR 0 5
59291: IN
59292: PUSH
59293: LD_INT 30
59295: PUSH
59296: LD_VAR 0 5
59300: IN
59301: OR
59302: AND
59303: PUSH
59304: LD_INT 6
59306: PPUSH
59307: LD_VAR 0 16
59311: PPUSH
59312: CALL_OW 321
59316: PUSH
59317: LD_INT 2
59319: EQUAL
59320: AND
59321: IFFALSE 59486
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
59323: LD_INT 22
59325: PUSH
59326: LD_VAR 0 16
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 2
59337: PUSH
59338: LD_INT 35
59340: PUSH
59341: LD_INT 11
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 35
59350: PUSH
59351: LD_INT 30
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 91
59365: PUSH
59366: LD_VAR 0 1
59370: PUSH
59371: LD_INT 18
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: LIST
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: PPUSH
59384: CALL_OW 69
59388: NOT
59389: PUSH
59390: LD_INT 22
59392: PUSH
59393: LD_VAR 0 16
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: LD_INT 30
59407: PUSH
59408: LD_INT 32
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 30
59417: PUSH
59418: LD_INT 33
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 91
59432: PUSH
59433: LD_VAR 0 1
59437: PUSH
59438: LD_INT 12
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: LIST
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: LIST
59450: PUSH
59451: EMPTY
59452: LIST
59453: PPUSH
59454: CALL_OW 69
59458: PUSH
59459: LD_INT 2
59461: GREATER
59462: AND
59463: IFFALSE 59486
// weapon := [ us_radar , ar_radar ] [ nat ] ;
59465: LD_ADDR_VAR 0 18
59469: PUSH
59470: LD_INT 11
59472: PUSH
59473: LD_INT 30
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_VAR 0 12
59484: ARRAY
59485: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
59486: LD_VAR 0 18
59490: NOT
59491: PUSH
59492: LD_INT 40
59494: PPUSH
59495: LD_VAR 0 16
59499: PPUSH
59500: CALL_OW 321
59504: PUSH
59505: LD_INT 2
59507: EQUAL
59508: AND
59509: PUSH
59510: LD_INT 7
59512: PUSH
59513: LD_VAR 0 5
59517: IN
59518: PUSH
59519: LD_INT 28
59521: PUSH
59522: LD_VAR 0 5
59526: IN
59527: OR
59528: PUSH
59529: LD_INT 45
59531: PUSH
59532: LD_VAR 0 5
59536: IN
59537: OR
59538: AND
59539: IFFALSE 59793
// begin hex := GetHexInfo ( x , y ) ;
59541: LD_ADDR_VAR 0 4
59545: PUSH
59546: LD_VAR 0 10
59550: PPUSH
59551: LD_VAR 0 11
59555: PPUSH
59556: CALL_OW 546
59560: ST_TO_ADDR
// if hex [ 1 ] then
59561: LD_VAR 0 4
59565: PUSH
59566: LD_INT 1
59568: ARRAY
59569: IFFALSE 59573
// exit ;
59571: GO 59976
// height := hex [ 2 ] ;
59573: LD_ADDR_VAR 0 15
59577: PUSH
59578: LD_VAR 0 4
59582: PUSH
59583: LD_INT 2
59585: ARRAY
59586: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
59587: LD_ADDR_VAR 0 14
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 2
59597: PUSH
59598: LD_INT 3
59600: PUSH
59601: LD_INT 5
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: ST_TO_ADDR
// for i in tmp do
59610: LD_ADDR_VAR 0 8
59614: PUSH
59615: LD_VAR 0 14
59619: PUSH
59620: FOR_IN
59621: IFFALSE 59791
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
59623: LD_ADDR_VAR 0 9
59627: PUSH
59628: LD_VAR 0 10
59632: PPUSH
59633: LD_VAR 0 8
59637: PPUSH
59638: LD_INT 5
59640: PPUSH
59641: CALL_OW 272
59645: PUSH
59646: LD_VAR 0 11
59650: PPUSH
59651: LD_VAR 0 8
59655: PPUSH
59656: LD_INT 5
59658: PPUSH
59659: CALL_OW 273
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
59668: LD_VAR 0 9
59672: PUSH
59673: LD_INT 1
59675: ARRAY
59676: PPUSH
59677: LD_VAR 0 9
59681: PUSH
59682: LD_INT 2
59684: ARRAY
59685: PPUSH
59686: CALL_OW 488
59690: IFFALSE 59789
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
59692: LD_ADDR_VAR 0 4
59696: PUSH
59697: LD_VAR 0 9
59701: PUSH
59702: LD_INT 1
59704: ARRAY
59705: PPUSH
59706: LD_VAR 0 9
59710: PUSH
59711: LD_INT 2
59713: ARRAY
59714: PPUSH
59715: CALL_OW 546
59719: ST_TO_ADDR
// if hex [ 1 ] then
59720: LD_VAR 0 4
59724: PUSH
59725: LD_INT 1
59727: ARRAY
59728: IFFALSE 59732
// continue ;
59730: GO 59620
// h := hex [ 2 ] ;
59732: LD_ADDR_VAR 0 13
59736: PUSH
59737: LD_VAR 0 4
59741: PUSH
59742: LD_INT 2
59744: ARRAY
59745: ST_TO_ADDR
// if h + 7 < height then
59746: LD_VAR 0 13
59750: PUSH
59751: LD_INT 7
59753: PLUS
59754: PUSH
59755: LD_VAR 0 15
59759: LESS
59760: IFFALSE 59789
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
59762: LD_ADDR_VAR 0 18
59766: PUSH
59767: LD_INT 7
59769: PUSH
59770: LD_INT 28
59772: PUSH
59773: LD_INT 45
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: LIST
59780: PUSH
59781: LD_VAR 0 12
59785: ARRAY
59786: ST_TO_ADDR
// break ;
59787: GO 59791
// end ; end ; end ;
59789: GO 59620
59791: POP
59792: POP
// end ; if not weapon then
59793: LD_VAR 0 18
59797: NOT
59798: IFFALSE 59858
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
59800: LD_ADDR_VAR 0 5
59804: PUSH
59805: LD_VAR 0 5
59809: PUSH
59810: LD_INT 11
59812: PUSH
59813: LD_INT 30
59815: PUSH
59816: LD_INT 49
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: LIST
59823: DIFF
59824: ST_TO_ADDR
// if not list then
59825: LD_VAR 0 5
59829: NOT
59830: IFFALSE 59834
// exit ;
59832: GO 59976
// weapon := list [ rand ( 1 , list ) ] ;
59834: LD_ADDR_VAR 0 18
59838: PUSH
59839: LD_VAR 0 5
59843: PUSH
59844: LD_INT 1
59846: PPUSH
59847: LD_VAR 0 5
59851: PPUSH
59852: CALL_OW 12
59856: ARRAY
59857: ST_TO_ADDR
// end ; if weapon then
59858: LD_VAR 0 18
59862: IFFALSE 59976
// begin tmp := CostOfWeapon ( weapon ) ;
59864: LD_ADDR_VAR 0 14
59868: PUSH
59869: LD_VAR 0 18
59873: PPUSH
59874: CALL_OW 451
59878: ST_TO_ADDR
// j := GetBase ( tower ) ;
59879: LD_ADDR_VAR 0 9
59883: PUSH
59884: LD_VAR 0 1
59888: PPUSH
59889: CALL_OW 274
59893: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
59894: LD_VAR 0 9
59898: PPUSH
59899: LD_INT 1
59901: PPUSH
59902: CALL_OW 275
59906: PUSH
59907: LD_VAR 0 14
59911: PUSH
59912: LD_INT 1
59914: ARRAY
59915: GREATEREQUAL
59916: PUSH
59917: LD_VAR 0 9
59921: PPUSH
59922: LD_INT 2
59924: PPUSH
59925: CALL_OW 275
59929: PUSH
59930: LD_VAR 0 14
59934: PUSH
59935: LD_INT 2
59937: ARRAY
59938: GREATEREQUAL
59939: AND
59940: PUSH
59941: LD_VAR 0 9
59945: PPUSH
59946: LD_INT 3
59948: PPUSH
59949: CALL_OW 275
59953: PUSH
59954: LD_VAR 0 14
59958: PUSH
59959: LD_INT 3
59961: ARRAY
59962: GREATEREQUAL
59963: AND
59964: IFFALSE 59976
// result := weapon ;
59966: LD_ADDR_VAR 0 3
59970: PUSH
59971: LD_VAR 0 18
59975: ST_TO_ADDR
// end ; end ;
59976: LD_VAR 0 3
59980: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
59981: LD_INT 0
59983: PPUSH
59984: PPUSH
// result := true ;
59985: LD_ADDR_VAR 0 3
59989: PUSH
59990: LD_INT 1
59992: ST_TO_ADDR
// if array1 = array2 then
59993: LD_VAR 0 1
59997: PUSH
59998: LD_VAR 0 2
60002: EQUAL
60003: IFFALSE 60063
// begin for i = 1 to array1 do
60005: LD_ADDR_VAR 0 4
60009: PUSH
60010: DOUBLE
60011: LD_INT 1
60013: DEC
60014: ST_TO_ADDR
60015: LD_VAR 0 1
60019: PUSH
60020: FOR_TO
60021: IFFALSE 60059
// if array1 [ i ] <> array2 [ i ] then
60023: LD_VAR 0 1
60027: PUSH
60028: LD_VAR 0 4
60032: ARRAY
60033: PUSH
60034: LD_VAR 0 2
60038: PUSH
60039: LD_VAR 0 4
60043: ARRAY
60044: NONEQUAL
60045: IFFALSE 60057
// begin result := false ;
60047: LD_ADDR_VAR 0 3
60051: PUSH
60052: LD_INT 0
60054: ST_TO_ADDR
// break ;
60055: GO 60059
// end ;
60057: GO 60020
60059: POP
60060: POP
// end else
60061: GO 60071
// result := false ;
60063: LD_ADDR_VAR 0 3
60067: PUSH
60068: LD_INT 0
60070: ST_TO_ADDR
// end ;
60071: LD_VAR 0 3
60075: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
60076: LD_INT 0
60078: PPUSH
60079: PPUSH
// if not array1 or not array2 then
60080: LD_VAR 0 1
60084: NOT
60085: PUSH
60086: LD_VAR 0 2
60090: NOT
60091: OR
60092: IFFALSE 60096
// exit ;
60094: GO 60160
// result := true ;
60096: LD_ADDR_VAR 0 3
60100: PUSH
60101: LD_INT 1
60103: ST_TO_ADDR
// for i = 1 to array1 do
60104: LD_ADDR_VAR 0 4
60108: PUSH
60109: DOUBLE
60110: LD_INT 1
60112: DEC
60113: ST_TO_ADDR
60114: LD_VAR 0 1
60118: PUSH
60119: FOR_TO
60120: IFFALSE 60158
// if array1 [ i ] <> array2 [ i ] then
60122: LD_VAR 0 1
60126: PUSH
60127: LD_VAR 0 4
60131: ARRAY
60132: PUSH
60133: LD_VAR 0 2
60137: PUSH
60138: LD_VAR 0 4
60142: ARRAY
60143: NONEQUAL
60144: IFFALSE 60156
// begin result := false ;
60146: LD_ADDR_VAR 0 3
60150: PUSH
60151: LD_INT 0
60153: ST_TO_ADDR
// break ;
60154: GO 60158
// end ;
60156: GO 60119
60158: POP
60159: POP
// end ;
60160: LD_VAR 0 3
60164: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
60165: LD_INT 0
60167: PPUSH
60168: PPUSH
60169: PPUSH
// pom := GetBase ( fac ) ;
60170: LD_ADDR_VAR 0 5
60174: PUSH
60175: LD_VAR 0 1
60179: PPUSH
60180: CALL_OW 274
60184: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
60185: LD_ADDR_VAR 0 4
60189: PUSH
60190: LD_VAR 0 2
60194: PUSH
60195: LD_INT 1
60197: ARRAY
60198: PPUSH
60199: LD_VAR 0 2
60203: PUSH
60204: LD_INT 2
60206: ARRAY
60207: PPUSH
60208: LD_VAR 0 2
60212: PUSH
60213: LD_INT 3
60215: ARRAY
60216: PPUSH
60217: LD_VAR 0 2
60221: PUSH
60222: LD_INT 4
60224: ARRAY
60225: PPUSH
60226: CALL_OW 449
60230: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60231: LD_ADDR_VAR 0 3
60235: PUSH
60236: LD_VAR 0 5
60240: PPUSH
60241: LD_INT 1
60243: PPUSH
60244: CALL_OW 275
60248: PUSH
60249: LD_VAR 0 4
60253: PUSH
60254: LD_INT 1
60256: ARRAY
60257: GREATEREQUAL
60258: PUSH
60259: LD_VAR 0 5
60263: PPUSH
60264: LD_INT 2
60266: PPUSH
60267: CALL_OW 275
60271: PUSH
60272: LD_VAR 0 4
60276: PUSH
60277: LD_INT 2
60279: ARRAY
60280: GREATEREQUAL
60281: AND
60282: PUSH
60283: LD_VAR 0 5
60287: PPUSH
60288: LD_INT 3
60290: PPUSH
60291: CALL_OW 275
60295: PUSH
60296: LD_VAR 0 4
60300: PUSH
60301: LD_INT 3
60303: ARRAY
60304: GREATEREQUAL
60305: AND
60306: ST_TO_ADDR
// end ;
60307: LD_VAR 0 3
60311: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
60312: LD_INT 0
60314: PPUSH
60315: PPUSH
60316: PPUSH
60317: PPUSH
// pom := GetBase ( building ) ;
60318: LD_ADDR_VAR 0 3
60322: PUSH
60323: LD_VAR 0 1
60327: PPUSH
60328: CALL_OW 274
60332: ST_TO_ADDR
// if not pom then
60333: LD_VAR 0 3
60337: NOT
60338: IFFALSE 60342
// exit ;
60340: GO 60512
// btype := GetBType ( building ) ;
60342: LD_ADDR_VAR 0 5
60346: PUSH
60347: LD_VAR 0 1
60351: PPUSH
60352: CALL_OW 266
60356: ST_TO_ADDR
// if btype = b_armoury then
60357: LD_VAR 0 5
60361: PUSH
60362: LD_INT 4
60364: EQUAL
60365: IFFALSE 60375
// btype := b_barracks ;
60367: LD_ADDR_VAR 0 5
60371: PUSH
60372: LD_INT 5
60374: ST_TO_ADDR
// if btype = b_depot then
60375: LD_VAR 0 5
60379: PUSH
60380: LD_INT 0
60382: EQUAL
60383: IFFALSE 60393
// btype := b_warehouse ;
60385: LD_ADDR_VAR 0 5
60389: PUSH
60390: LD_INT 1
60392: ST_TO_ADDR
// if btype = b_workshop then
60393: LD_VAR 0 5
60397: PUSH
60398: LD_INT 2
60400: EQUAL
60401: IFFALSE 60411
// btype := b_factory ;
60403: LD_ADDR_VAR 0 5
60407: PUSH
60408: LD_INT 3
60410: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
60411: LD_ADDR_VAR 0 4
60415: PUSH
60416: LD_VAR 0 5
60420: PPUSH
60421: LD_VAR 0 1
60425: PPUSH
60426: CALL_OW 248
60430: PPUSH
60431: CALL_OW 450
60435: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60436: LD_ADDR_VAR 0 2
60440: PUSH
60441: LD_VAR 0 3
60445: PPUSH
60446: LD_INT 1
60448: PPUSH
60449: CALL_OW 275
60453: PUSH
60454: LD_VAR 0 4
60458: PUSH
60459: LD_INT 1
60461: ARRAY
60462: GREATEREQUAL
60463: PUSH
60464: LD_VAR 0 3
60468: PPUSH
60469: LD_INT 2
60471: PPUSH
60472: CALL_OW 275
60476: PUSH
60477: LD_VAR 0 4
60481: PUSH
60482: LD_INT 2
60484: ARRAY
60485: GREATEREQUAL
60486: AND
60487: PUSH
60488: LD_VAR 0 3
60492: PPUSH
60493: LD_INT 3
60495: PPUSH
60496: CALL_OW 275
60500: PUSH
60501: LD_VAR 0 4
60505: PUSH
60506: LD_INT 3
60508: ARRAY
60509: GREATEREQUAL
60510: AND
60511: ST_TO_ADDR
// end ;
60512: LD_VAR 0 2
60516: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
60517: LD_INT 0
60519: PPUSH
60520: PPUSH
60521: PPUSH
// pom := GetBase ( building ) ;
60522: LD_ADDR_VAR 0 4
60526: PUSH
60527: LD_VAR 0 1
60531: PPUSH
60532: CALL_OW 274
60536: ST_TO_ADDR
// if not pom then
60537: LD_VAR 0 4
60541: NOT
60542: IFFALSE 60546
// exit ;
60544: GO 60647
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
60546: LD_ADDR_VAR 0 5
60550: PUSH
60551: LD_VAR 0 2
60555: PPUSH
60556: LD_VAR 0 1
60560: PPUSH
60561: CALL_OW 248
60565: PPUSH
60566: CALL_OW 450
60570: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60571: LD_ADDR_VAR 0 3
60575: PUSH
60576: LD_VAR 0 4
60580: PPUSH
60581: LD_INT 1
60583: PPUSH
60584: CALL_OW 275
60588: PUSH
60589: LD_VAR 0 5
60593: PUSH
60594: LD_INT 1
60596: ARRAY
60597: GREATEREQUAL
60598: PUSH
60599: LD_VAR 0 4
60603: PPUSH
60604: LD_INT 2
60606: PPUSH
60607: CALL_OW 275
60611: PUSH
60612: LD_VAR 0 5
60616: PUSH
60617: LD_INT 2
60619: ARRAY
60620: GREATEREQUAL
60621: AND
60622: PUSH
60623: LD_VAR 0 4
60627: PPUSH
60628: LD_INT 3
60630: PPUSH
60631: CALL_OW 275
60635: PUSH
60636: LD_VAR 0 5
60640: PUSH
60641: LD_INT 3
60643: ARRAY
60644: GREATEREQUAL
60645: AND
60646: ST_TO_ADDR
// end ;
60647: LD_VAR 0 3
60651: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
60652: LD_INT 0
60654: PPUSH
60655: PPUSH
60656: PPUSH
60657: PPUSH
60658: PPUSH
60659: PPUSH
60660: PPUSH
60661: PPUSH
60662: PPUSH
60663: PPUSH
60664: PPUSH
// result := false ;
60665: LD_ADDR_VAR 0 8
60669: PUSH
60670: LD_INT 0
60672: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
60673: LD_VAR 0 5
60677: NOT
60678: PUSH
60679: LD_VAR 0 1
60683: NOT
60684: OR
60685: PUSH
60686: LD_VAR 0 2
60690: NOT
60691: OR
60692: PUSH
60693: LD_VAR 0 3
60697: NOT
60698: OR
60699: IFFALSE 60703
// exit ;
60701: GO 61517
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
60703: LD_ADDR_VAR 0 14
60707: PUSH
60708: LD_VAR 0 1
60712: PPUSH
60713: LD_VAR 0 2
60717: PPUSH
60718: LD_VAR 0 3
60722: PPUSH
60723: LD_VAR 0 4
60727: PPUSH
60728: LD_VAR 0 5
60732: PUSH
60733: LD_INT 1
60735: ARRAY
60736: PPUSH
60737: CALL_OW 248
60741: PPUSH
60742: LD_INT 0
60744: PPUSH
60745: CALL 62754 0 6
60749: ST_TO_ADDR
// if not hexes then
60750: LD_VAR 0 14
60754: NOT
60755: IFFALSE 60759
// exit ;
60757: GO 61517
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60759: LD_ADDR_VAR 0 17
60763: PUSH
60764: LD_VAR 0 5
60768: PPUSH
60769: LD_INT 22
60771: PUSH
60772: LD_VAR 0 13
60776: PPUSH
60777: CALL_OW 255
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: LD_INT 30
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 30
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: LIST
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PPUSH
60818: CALL_OW 72
60822: ST_TO_ADDR
// for i = 1 to hexes do
60823: LD_ADDR_VAR 0 9
60827: PUSH
60828: DOUBLE
60829: LD_INT 1
60831: DEC
60832: ST_TO_ADDR
60833: LD_VAR 0 14
60837: PUSH
60838: FOR_TO
60839: IFFALSE 61515
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60841: LD_ADDR_VAR 0 13
60845: PUSH
60846: LD_VAR 0 14
60850: PUSH
60851: LD_VAR 0 9
60855: ARRAY
60856: PUSH
60857: LD_INT 1
60859: ARRAY
60860: PPUSH
60861: LD_VAR 0 14
60865: PUSH
60866: LD_VAR 0 9
60870: ARRAY
60871: PUSH
60872: LD_INT 2
60874: ARRAY
60875: PPUSH
60876: CALL_OW 428
60880: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
60881: LD_VAR 0 14
60885: PUSH
60886: LD_VAR 0 9
60890: ARRAY
60891: PUSH
60892: LD_INT 1
60894: ARRAY
60895: PPUSH
60896: LD_VAR 0 14
60900: PUSH
60901: LD_VAR 0 9
60905: ARRAY
60906: PUSH
60907: LD_INT 2
60909: ARRAY
60910: PPUSH
60911: CALL_OW 351
60915: PUSH
60916: LD_VAR 0 14
60920: PUSH
60921: LD_VAR 0 9
60925: ARRAY
60926: PUSH
60927: LD_INT 1
60929: ARRAY
60930: PPUSH
60931: LD_VAR 0 14
60935: PUSH
60936: LD_VAR 0 9
60940: ARRAY
60941: PUSH
60942: LD_INT 2
60944: ARRAY
60945: PPUSH
60946: CALL_OW 488
60950: NOT
60951: OR
60952: PUSH
60953: LD_VAR 0 13
60957: PPUSH
60958: CALL_OW 247
60962: PUSH
60963: LD_INT 3
60965: EQUAL
60966: OR
60967: IFFALSE 60973
// exit ;
60969: POP
60970: POP
60971: GO 61517
// if not tmp then
60973: LD_VAR 0 13
60977: NOT
60978: IFFALSE 60982
// continue ;
60980: GO 60838
// result := true ;
60982: LD_ADDR_VAR 0 8
60986: PUSH
60987: LD_INT 1
60989: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
60990: LD_VAR 0 6
60994: PUSH
60995: LD_VAR 0 13
60999: PPUSH
61000: CALL_OW 247
61004: PUSH
61005: LD_INT 2
61007: EQUAL
61008: AND
61009: PUSH
61010: LD_VAR 0 13
61014: PPUSH
61015: CALL_OW 263
61019: PUSH
61020: LD_INT 1
61022: EQUAL
61023: AND
61024: IFFALSE 61188
// begin if IsDrivenBy ( tmp ) then
61026: LD_VAR 0 13
61030: PPUSH
61031: CALL_OW 311
61035: IFFALSE 61039
// continue ;
61037: GO 60838
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
61039: LD_VAR 0 6
61043: PPUSH
61044: LD_INT 3
61046: PUSH
61047: LD_INT 60
61049: PUSH
61050: EMPTY
61051: LIST
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 3
61059: PUSH
61060: LD_INT 55
61062: PUSH
61063: EMPTY
61064: LIST
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PPUSH
61074: CALL_OW 72
61078: IFFALSE 61186
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
61080: LD_ADDR_VAR 0 18
61084: PUSH
61085: LD_VAR 0 6
61089: PPUSH
61090: LD_INT 3
61092: PUSH
61093: LD_INT 60
61095: PUSH
61096: EMPTY
61097: LIST
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 3
61105: PUSH
61106: LD_INT 55
61108: PUSH
61109: EMPTY
61110: LIST
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PPUSH
61120: CALL_OW 72
61124: PUSH
61125: LD_INT 1
61127: ARRAY
61128: ST_TO_ADDR
// if IsInUnit ( driver ) then
61129: LD_VAR 0 18
61133: PPUSH
61134: CALL_OW 310
61138: IFFALSE 61149
// ComExit ( driver ) ;
61140: LD_VAR 0 18
61144: PPUSH
61145: CALL 85882 0 1
// AddComEnterUnit ( driver , tmp ) ;
61149: LD_VAR 0 18
61153: PPUSH
61154: LD_VAR 0 13
61158: PPUSH
61159: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
61163: LD_VAR 0 18
61167: PPUSH
61168: LD_VAR 0 7
61172: PPUSH
61173: CALL_OW 173
// AddComExitVehicle ( driver ) ;
61177: LD_VAR 0 18
61181: PPUSH
61182: CALL_OW 181
// end ; continue ;
61186: GO 60838
// end ; if not cleaners or not tmp in cleaners then
61188: LD_VAR 0 6
61192: NOT
61193: PUSH
61194: LD_VAR 0 13
61198: PUSH
61199: LD_VAR 0 6
61203: IN
61204: NOT
61205: OR
61206: IFFALSE 61513
// begin if dep then
61208: LD_VAR 0 17
61212: IFFALSE 61348
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
61214: LD_ADDR_VAR 0 16
61218: PUSH
61219: LD_VAR 0 17
61223: PUSH
61224: LD_INT 1
61226: ARRAY
61227: PPUSH
61228: CALL_OW 250
61232: PPUSH
61233: LD_VAR 0 17
61237: PUSH
61238: LD_INT 1
61240: ARRAY
61241: PPUSH
61242: CALL_OW 254
61246: PPUSH
61247: LD_INT 5
61249: PPUSH
61250: CALL_OW 272
61254: PUSH
61255: LD_VAR 0 17
61259: PUSH
61260: LD_INT 1
61262: ARRAY
61263: PPUSH
61264: CALL_OW 251
61268: PPUSH
61269: LD_VAR 0 17
61273: PUSH
61274: LD_INT 1
61276: ARRAY
61277: PPUSH
61278: CALL_OW 254
61282: PPUSH
61283: LD_INT 5
61285: PPUSH
61286: CALL_OW 273
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
61295: LD_VAR 0 16
61299: PUSH
61300: LD_INT 1
61302: ARRAY
61303: PPUSH
61304: LD_VAR 0 16
61308: PUSH
61309: LD_INT 2
61311: ARRAY
61312: PPUSH
61313: CALL_OW 488
61317: IFFALSE 61348
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
61319: LD_VAR 0 13
61323: PPUSH
61324: LD_VAR 0 16
61328: PUSH
61329: LD_INT 1
61331: ARRAY
61332: PPUSH
61333: LD_VAR 0 16
61337: PUSH
61338: LD_INT 2
61340: ARRAY
61341: PPUSH
61342: CALL_OW 111
// continue ;
61346: GO 60838
// end ; end ; r := GetDir ( tmp ) ;
61348: LD_ADDR_VAR 0 15
61352: PUSH
61353: LD_VAR 0 13
61357: PPUSH
61358: CALL_OW 254
61362: ST_TO_ADDR
// if r = 5 then
61363: LD_VAR 0 15
61367: PUSH
61368: LD_INT 5
61370: EQUAL
61371: IFFALSE 61381
// r := 0 ;
61373: LD_ADDR_VAR 0 15
61377: PUSH
61378: LD_INT 0
61380: ST_TO_ADDR
// for j = r to 5 do
61381: LD_ADDR_VAR 0 10
61385: PUSH
61386: DOUBLE
61387: LD_VAR 0 15
61391: DEC
61392: ST_TO_ADDR
61393: LD_INT 5
61395: PUSH
61396: FOR_TO
61397: IFFALSE 61511
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
61399: LD_ADDR_VAR 0 11
61403: PUSH
61404: LD_VAR 0 13
61408: PPUSH
61409: CALL_OW 250
61413: PPUSH
61414: LD_VAR 0 10
61418: PPUSH
61419: LD_INT 2
61421: PPUSH
61422: CALL_OW 272
61426: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
61427: LD_ADDR_VAR 0 12
61431: PUSH
61432: LD_VAR 0 13
61436: PPUSH
61437: CALL_OW 251
61441: PPUSH
61442: LD_VAR 0 10
61446: PPUSH
61447: LD_INT 2
61449: PPUSH
61450: CALL_OW 273
61454: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
61455: LD_VAR 0 11
61459: PPUSH
61460: LD_VAR 0 12
61464: PPUSH
61465: CALL_OW 488
61469: PUSH
61470: LD_VAR 0 11
61474: PPUSH
61475: LD_VAR 0 12
61479: PPUSH
61480: CALL_OW 428
61484: NOT
61485: AND
61486: IFFALSE 61509
// begin ComMoveXY ( tmp , _x , _y ) ;
61488: LD_VAR 0 13
61492: PPUSH
61493: LD_VAR 0 11
61497: PPUSH
61498: LD_VAR 0 12
61502: PPUSH
61503: CALL_OW 111
// break ;
61507: GO 61511
// end ; end ;
61509: GO 61396
61511: POP
61512: POP
// end ; end ;
61513: GO 60838
61515: POP
61516: POP
// end ;
61517: LD_VAR 0 8
61521: RET
// export function BuildingTechInvented ( side , btype ) ; begin
61522: LD_INT 0
61524: PPUSH
// result := true ;
61525: LD_ADDR_VAR 0 3
61529: PUSH
61530: LD_INT 1
61532: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
61533: LD_VAR 0 2
61537: PUSH
61538: LD_INT 24
61540: DOUBLE
61541: EQUAL
61542: IFTRUE 61552
61544: LD_INT 33
61546: DOUBLE
61547: EQUAL
61548: IFTRUE 61552
61550: GO 61577
61552: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
61553: LD_ADDR_VAR 0 3
61557: PUSH
61558: LD_INT 32
61560: PPUSH
61561: LD_VAR 0 1
61565: PPUSH
61566: CALL_OW 321
61570: PUSH
61571: LD_INT 2
61573: EQUAL
61574: ST_TO_ADDR
61575: GO 61897
61577: LD_INT 20
61579: DOUBLE
61580: EQUAL
61581: IFTRUE 61585
61583: GO 61610
61585: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
61586: LD_ADDR_VAR 0 3
61590: PUSH
61591: LD_INT 6
61593: PPUSH
61594: LD_VAR 0 1
61598: PPUSH
61599: CALL_OW 321
61603: PUSH
61604: LD_INT 2
61606: EQUAL
61607: ST_TO_ADDR
61608: GO 61897
61610: LD_INT 22
61612: DOUBLE
61613: EQUAL
61614: IFTRUE 61624
61616: LD_INT 36
61618: DOUBLE
61619: EQUAL
61620: IFTRUE 61624
61622: GO 61649
61624: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
61625: LD_ADDR_VAR 0 3
61629: PUSH
61630: LD_INT 15
61632: PPUSH
61633: LD_VAR 0 1
61637: PPUSH
61638: CALL_OW 321
61642: PUSH
61643: LD_INT 2
61645: EQUAL
61646: ST_TO_ADDR
61647: GO 61897
61649: LD_INT 30
61651: DOUBLE
61652: EQUAL
61653: IFTRUE 61657
61655: GO 61682
61657: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
61658: LD_ADDR_VAR 0 3
61662: PUSH
61663: LD_INT 20
61665: PPUSH
61666: LD_VAR 0 1
61670: PPUSH
61671: CALL_OW 321
61675: PUSH
61676: LD_INT 2
61678: EQUAL
61679: ST_TO_ADDR
61680: GO 61897
61682: LD_INT 28
61684: DOUBLE
61685: EQUAL
61686: IFTRUE 61696
61688: LD_INT 21
61690: DOUBLE
61691: EQUAL
61692: IFTRUE 61696
61694: GO 61721
61696: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
61697: LD_ADDR_VAR 0 3
61701: PUSH
61702: LD_INT 21
61704: PPUSH
61705: LD_VAR 0 1
61709: PPUSH
61710: CALL_OW 321
61714: PUSH
61715: LD_INT 2
61717: EQUAL
61718: ST_TO_ADDR
61719: GO 61897
61721: LD_INT 16
61723: DOUBLE
61724: EQUAL
61725: IFTRUE 61729
61727: GO 61756
61729: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
61730: LD_ADDR_VAR 0 3
61734: PUSH
61735: LD_EXP 82
61739: PPUSH
61740: LD_VAR 0 1
61744: PPUSH
61745: CALL_OW 321
61749: PUSH
61750: LD_INT 2
61752: EQUAL
61753: ST_TO_ADDR
61754: GO 61897
61756: LD_INT 19
61758: DOUBLE
61759: EQUAL
61760: IFTRUE 61770
61762: LD_INT 23
61764: DOUBLE
61765: EQUAL
61766: IFTRUE 61770
61768: GO 61797
61770: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
61771: LD_ADDR_VAR 0 3
61775: PUSH
61776: LD_EXP 81
61780: PPUSH
61781: LD_VAR 0 1
61785: PPUSH
61786: CALL_OW 321
61790: PUSH
61791: LD_INT 2
61793: EQUAL
61794: ST_TO_ADDR
61795: GO 61897
61797: LD_INT 17
61799: DOUBLE
61800: EQUAL
61801: IFTRUE 61805
61803: GO 61830
61805: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
61806: LD_ADDR_VAR 0 3
61810: PUSH
61811: LD_INT 39
61813: PPUSH
61814: LD_VAR 0 1
61818: PPUSH
61819: CALL_OW 321
61823: PUSH
61824: LD_INT 2
61826: EQUAL
61827: ST_TO_ADDR
61828: GO 61897
61830: LD_INT 18
61832: DOUBLE
61833: EQUAL
61834: IFTRUE 61838
61836: GO 61863
61838: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
61839: LD_ADDR_VAR 0 3
61843: PUSH
61844: LD_INT 40
61846: PPUSH
61847: LD_VAR 0 1
61851: PPUSH
61852: CALL_OW 321
61856: PUSH
61857: LD_INT 2
61859: EQUAL
61860: ST_TO_ADDR
61861: GO 61897
61863: LD_INT 27
61865: DOUBLE
61866: EQUAL
61867: IFTRUE 61871
61869: GO 61896
61871: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
61872: LD_ADDR_VAR 0 3
61876: PUSH
61877: LD_INT 35
61879: PPUSH
61880: LD_VAR 0 1
61884: PPUSH
61885: CALL_OW 321
61889: PUSH
61890: LD_INT 2
61892: EQUAL
61893: ST_TO_ADDR
61894: GO 61897
61896: POP
// end ;
61897: LD_VAR 0 3
61901: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
61902: LD_INT 0
61904: PPUSH
61905: PPUSH
61906: PPUSH
61907: PPUSH
61908: PPUSH
61909: PPUSH
61910: PPUSH
61911: PPUSH
61912: PPUSH
61913: PPUSH
61914: PPUSH
// result := false ;
61915: LD_ADDR_VAR 0 6
61919: PUSH
61920: LD_INT 0
61922: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
61923: LD_VAR 0 1
61927: NOT
61928: PUSH
61929: LD_VAR 0 1
61933: PPUSH
61934: CALL_OW 266
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: IN
61949: NOT
61950: OR
61951: PUSH
61952: LD_VAR 0 2
61956: NOT
61957: OR
61958: PUSH
61959: LD_VAR 0 5
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: LD_INT 2
61972: PUSH
61973: LD_INT 3
61975: PUSH
61976: LD_INT 4
61978: PUSH
61979: LD_INT 5
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: IN
61990: NOT
61991: OR
61992: PUSH
61993: LD_VAR 0 3
61997: PPUSH
61998: LD_VAR 0 4
62002: PPUSH
62003: CALL_OW 488
62007: NOT
62008: OR
62009: IFFALSE 62013
// exit ;
62011: GO 62749
// side := GetSide ( depot ) ;
62013: LD_ADDR_VAR 0 9
62017: PUSH
62018: LD_VAR 0 1
62022: PPUSH
62023: CALL_OW 255
62027: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
62028: LD_VAR 0 9
62032: PPUSH
62033: LD_VAR 0 2
62037: PPUSH
62038: CALL 61522 0 2
62042: NOT
62043: IFFALSE 62047
// exit ;
62045: GO 62749
// pom := GetBase ( depot ) ;
62047: LD_ADDR_VAR 0 10
62051: PUSH
62052: LD_VAR 0 1
62056: PPUSH
62057: CALL_OW 274
62061: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62062: LD_ADDR_VAR 0 11
62066: PUSH
62067: LD_VAR 0 2
62071: PPUSH
62072: LD_VAR 0 1
62076: PPUSH
62077: CALL_OW 248
62081: PPUSH
62082: CALL_OW 450
62086: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
62087: LD_VAR 0 10
62091: PPUSH
62092: LD_INT 1
62094: PPUSH
62095: CALL_OW 275
62099: PUSH
62100: LD_VAR 0 11
62104: PUSH
62105: LD_INT 1
62107: ARRAY
62108: GREATEREQUAL
62109: PUSH
62110: LD_VAR 0 10
62114: PPUSH
62115: LD_INT 2
62117: PPUSH
62118: CALL_OW 275
62122: PUSH
62123: LD_VAR 0 11
62127: PUSH
62128: LD_INT 2
62130: ARRAY
62131: GREATEREQUAL
62132: AND
62133: PUSH
62134: LD_VAR 0 10
62138: PPUSH
62139: LD_INT 3
62141: PPUSH
62142: CALL_OW 275
62146: PUSH
62147: LD_VAR 0 11
62151: PUSH
62152: LD_INT 3
62154: ARRAY
62155: GREATEREQUAL
62156: AND
62157: NOT
62158: IFFALSE 62162
// exit ;
62160: GO 62749
// if GetBType ( depot ) = b_depot then
62162: LD_VAR 0 1
62166: PPUSH
62167: CALL_OW 266
62171: PUSH
62172: LD_INT 0
62174: EQUAL
62175: IFFALSE 62187
// dist := 28 else
62177: LD_ADDR_VAR 0 14
62181: PUSH
62182: LD_INT 28
62184: ST_TO_ADDR
62185: GO 62195
// dist := 36 ;
62187: LD_ADDR_VAR 0 14
62191: PUSH
62192: LD_INT 36
62194: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
62195: LD_VAR 0 1
62199: PPUSH
62200: LD_VAR 0 3
62204: PPUSH
62205: LD_VAR 0 4
62209: PPUSH
62210: CALL_OW 297
62214: PUSH
62215: LD_VAR 0 14
62219: GREATER
62220: IFFALSE 62224
// exit ;
62222: GO 62749
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
62224: LD_ADDR_VAR 0 12
62228: PUSH
62229: LD_VAR 0 2
62233: PPUSH
62234: LD_VAR 0 3
62238: PPUSH
62239: LD_VAR 0 4
62243: PPUSH
62244: LD_VAR 0 5
62248: PPUSH
62249: LD_VAR 0 1
62253: PPUSH
62254: CALL_OW 248
62258: PPUSH
62259: LD_INT 0
62261: PPUSH
62262: CALL 62754 0 6
62266: ST_TO_ADDR
// if not hexes then
62267: LD_VAR 0 12
62271: NOT
62272: IFFALSE 62276
// exit ;
62274: GO 62749
// hex := GetHexInfo ( x , y ) ;
62276: LD_ADDR_VAR 0 15
62280: PUSH
62281: LD_VAR 0 3
62285: PPUSH
62286: LD_VAR 0 4
62290: PPUSH
62291: CALL_OW 546
62295: ST_TO_ADDR
// if hex [ 1 ] then
62296: LD_VAR 0 15
62300: PUSH
62301: LD_INT 1
62303: ARRAY
62304: IFFALSE 62308
// exit ;
62306: GO 62749
// height := hex [ 2 ] ;
62308: LD_ADDR_VAR 0 13
62312: PUSH
62313: LD_VAR 0 15
62317: PUSH
62318: LD_INT 2
62320: ARRAY
62321: ST_TO_ADDR
// for i = 1 to hexes do
62322: LD_ADDR_VAR 0 7
62326: PUSH
62327: DOUBLE
62328: LD_INT 1
62330: DEC
62331: ST_TO_ADDR
62332: LD_VAR 0 12
62336: PUSH
62337: FOR_TO
62338: IFFALSE 62668
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
62340: LD_VAR 0 12
62344: PUSH
62345: LD_VAR 0 7
62349: ARRAY
62350: PUSH
62351: LD_INT 1
62353: ARRAY
62354: PPUSH
62355: LD_VAR 0 12
62359: PUSH
62360: LD_VAR 0 7
62364: ARRAY
62365: PUSH
62366: LD_INT 2
62368: ARRAY
62369: PPUSH
62370: CALL_OW 488
62374: NOT
62375: PUSH
62376: LD_VAR 0 12
62380: PUSH
62381: LD_VAR 0 7
62385: ARRAY
62386: PUSH
62387: LD_INT 1
62389: ARRAY
62390: PPUSH
62391: LD_VAR 0 12
62395: PUSH
62396: LD_VAR 0 7
62400: ARRAY
62401: PUSH
62402: LD_INT 2
62404: ARRAY
62405: PPUSH
62406: CALL_OW 428
62410: PUSH
62411: LD_INT 0
62413: GREATER
62414: OR
62415: PUSH
62416: LD_VAR 0 12
62420: PUSH
62421: LD_VAR 0 7
62425: ARRAY
62426: PUSH
62427: LD_INT 1
62429: ARRAY
62430: PPUSH
62431: LD_VAR 0 12
62435: PUSH
62436: LD_VAR 0 7
62440: ARRAY
62441: PUSH
62442: LD_INT 2
62444: ARRAY
62445: PPUSH
62446: CALL_OW 351
62450: OR
62451: IFFALSE 62457
// exit ;
62453: POP
62454: POP
62455: GO 62749
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62457: LD_ADDR_VAR 0 8
62461: PUSH
62462: LD_VAR 0 12
62466: PUSH
62467: LD_VAR 0 7
62471: ARRAY
62472: PUSH
62473: LD_INT 1
62475: ARRAY
62476: PPUSH
62477: LD_VAR 0 12
62481: PUSH
62482: LD_VAR 0 7
62486: ARRAY
62487: PUSH
62488: LD_INT 2
62490: ARRAY
62491: PPUSH
62492: CALL_OW 546
62496: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
62497: LD_VAR 0 8
62501: PUSH
62502: LD_INT 1
62504: ARRAY
62505: PUSH
62506: LD_VAR 0 8
62510: PUSH
62511: LD_INT 2
62513: ARRAY
62514: PUSH
62515: LD_VAR 0 13
62519: PUSH
62520: LD_INT 2
62522: PLUS
62523: GREATER
62524: OR
62525: PUSH
62526: LD_VAR 0 8
62530: PUSH
62531: LD_INT 2
62533: ARRAY
62534: PUSH
62535: LD_VAR 0 13
62539: PUSH
62540: LD_INT 2
62542: MINUS
62543: LESS
62544: OR
62545: PUSH
62546: LD_VAR 0 8
62550: PUSH
62551: LD_INT 3
62553: ARRAY
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 8
62560: PUSH
62561: LD_INT 9
62563: PUSH
62564: LD_INT 10
62566: PUSH
62567: LD_INT 11
62569: PUSH
62570: LD_INT 12
62572: PUSH
62573: LD_INT 13
62575: PUSH
62576: LD_INT 16
62578: PUSH
62579: LD_INT 17
62581: PUSH
62582: LD_INT 18
62584: PUSH
62585: LD_INT 19
62587: PUSH
62588: LD_INT 20
62590: PUSH
62591: LD_INT 21
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: IN
62609: NOT
62610: OR
62611: PUSH
62612: LD_VAR 0 8
62616: PUSH
62617: LD_INT 5
62619: ARRAY
62620: NOT
62621: OR
62622: PUSH
62623: LD_VAR 0 8
62627: PUSH
62628: LD_INT 6
62630: ARRAY
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: LD_INT 2
62637: PUSH
62638: LD_INT 7
62640: PUSH
62641: LD_INT 9
62643: PUSH
62644: LD_INT 10
62646: PUSH
62647: LD_INT 11
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: IN
62658: NOT
62659: OR
62660: IFFALSE 62666
// exit ;
62662: POP
62663: POP
62664: GO 62749
// end ;
62666: GO 62337
62668: POP
62669: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
62670: LD_VAR 0 9
62674: PPUSH
62675: LD_VAR 0 3
62679: PPUSH
62680: LD_VAR 0 4
62684: PPUSH
62685: LD_INT 20
62687: PPUSH
62688: CALL 54695 0 4
62692: PUSH
62693: LD_INT 4
62695: ARRAY
62696: IFFALSE 62700
// exit ;
62698: GO 62749
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
62700: LD_VAR 0 2
62704: PUSH
62705: LD_INT 29
62707: PUSH
62708: LD_INT 30
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: IN
62715: PUSH
62716: LD_VAR 0 3
62720: PPUSH
62721: LD_VAR 0 4
62725: PPUSH
62726: LD_VAR 0 9
62730: PPUSH
62731: CALL_OW 440
62735: NOT
62736: AND
62737: IFFALSE 62741
// exit ;
62739: GO 62749
// result := true ;
62741: LD_ADDR_VAR 0 6
62745: PUSH
62746: LD_INT 1
62748: ST_TO_ADDR
// end ;
62749: LD_VAR 0 6
62753: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
62754: LD_INT 0
62756: PPUSH
62757: PPUSH
62758: PPUSH
62759: PPUSH
62760: PPUSH
62761: PPUSH
62762: PPUSH
62763: PPUSH
62764: PPUSH
62765: PPUSH
62766: PPUSH
62767: PPUSH
62768: PPUSH
62769: PPUSH
62770: PPUSH
62771: PPUSH
62772: PPUSH
62773: PPUSH
62774: PPUSH
62775: PPUSH
62776: PPUSH
62777: PPUSH
62778: PPUSH
62779: PPUSH
62780: PPUSH
62781: PPUSH
62782: PPUSH
62783: PPUSH
62784: PPUSH
62785: PPUSH
62786: PPUSH
62787: PPUSH
62788: PPUSH
62789: PPUSH
62790: PPUSH
62791: PPUSH
62792: PPUSH
62793: PPUSH
62794: PPUSH
62795: PPUSH
62796: PPUSH
62797: PPUSH
62798: PPUSH
62799: PPUSH
62800: PPUSH
62801: PPUSH
62802: PPUSH
62803: PPUSH
62804: PPUSH
62805: PPUSH
62806: PPUSH
62807: PPUSH
62808: PPUSH
62809: PPUSH
62810: PPUSH
62811: PPUSH
62812: PPUSH
62813: PPUSH
// result = [ ] ;
62814: LD_ADDR_VAR 0 7
62818: PUSH
62819: EMPTY
62820: ST_TO_ADDR
// temp_list = [ ] ;
62821: LD_ADDR_VAR 0 9
62825: PUSH
62826: EMPTY
62827: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
62828: LD_VAR 0 4
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 1
62838: PUSH
62839: LD_INT 2
62841: PUSH
62842: LD_INT 3
62844: PUSH
62845: LD_INT 4
62847: PUSH
62848: LD_INT 5
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: IN
62859: NOT
62860: PUSH
62861: LD_VAR 0 1
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: IN
62876: PUSH
62877: LD_VAR 0 5
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: LD_INT 2
62887: PUSH
62888: LD_INT 3
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: LIST
62895: IN
62896: NOT
62897: AND
62898: OR
62899: IFFALSE 62903
// exit ;
62901: GO 81294
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
62903: LD_VAR 0 1
62907: PUSH
62908: LD_INT 6
62910: PUSH
62911: LD_INT 7
62913: PUSH
62914: LD_INT 8
62916: PUSH
62917: LD_INT 13
62919: PUSH
62920: LD_INT 12
62922: PUSH
62923: LD_INT 15
62925: PUSH
62926: LD_INT 11
62928: PUSH
62929: LD_INT 14
62931: PUSH
62932: LD_INT 10
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: IN
62946: IFFALSE 62956
// btype = b_lab ;
62948: LD_ADDR_VAR 0 1
62952: PUSH
62953: LD_INT 6
62955: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
62956: LD_VAR 0 6
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: LIST
62974: IN
62975: NOT
62976: PUSH
62977: LD_VAR 0 1
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: LD_INT 2
62990: PUSH
62991: LD_INT 3
62993: PUSH
62994: LD_INT 6
62996: PUSH
62997: LD_INT 36
62999: PUSH
63000: LD_INT 4
63002: PUSH
63003: LD_INT 5
63005: PUSH
63006: LD_INT 31
63008: PUSH
63009: LD_INT 32
63011: PUSH
63012: LD_INT 33
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: IN
63028: NOT
63029: PUSH
63030: LD_VAR 0 6
63034: PUSH
63035: LD_INT 1
63037: EQUAL
63038: AND
63039: OR
63040: PUSH
63041: LD_VAR 0 1
63045: PUSH
63046: LD_INT 2
63048: PUSH
63049: LD_INT 3
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: IN
63056: NOT
63057: PUSH
63058: LD_VAR 0 6
63062: PUSH
63063: LD_INT 2
63065: EQUAL
63066: AND
63067: OR
63068: IFFALSE 63078
// mode = 0 ;
63070: LD_ADDR_VAR 0 6
63074: PUSH
63075: LD_INT 0
63077: ST_TO_ADDR
// case mode of 0 :
63078: LD_VAR 0 6
63082: PUSH
63083: LD_INT 0
63085: DOUBLE
63086: EQUAL
63087: IFTRUE 63091
63089: GO 74544
63091: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63092: LD_ADDR_VAR 0 11
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: LD_INT 1
63112: NEG
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 1
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 1
63150: NEG
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: LD_INT 2
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: LD_INT 2
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: LD_INT 2
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 0
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 1
63227: NEG
63228: PUSH
63229: LD_INT 1
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: LD_INT 3
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 0
63248: PUSH
63249: LD_INT 3
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 1
63258: NEG
63259: PUSH
63260: LD_INT 2
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63285: LD_ADDR_VAR 0 12
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: LD_INT 1
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 1
63354: NEG
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 2
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 2
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: LD_INT 1
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 2
63408: NEG
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 2
63419: NEG
63420: PUSH
63421: LD_INT 1
63423: NEG
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 2
63431: NEG
63432: PUSH
63433: LD_INT 1
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 3
63442: NEG
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 3
63453: NEG
63454: PUSH
63455: LD_INT 1
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63481: LD_ADDR_VAR 0 13
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: LD_INT 0
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 1
63519: PUSH
63520: LD_INT 1
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 0
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 1
63539: NEG
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 1
63550: NEG
63551: PUSH
63552: LD_INT 1
63554: NEG
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: LD_INT 2
63566: NEG
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 2
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 2
63584: PUSH
63585: LD_INT 2
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: LD_INT 2
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 2
63604: NEG
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 2
63616: NEG
63617: PUSH
63618: LD_INT 2
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 2
63628: NEG
63629: PUSH
63630: LD_INT 3
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 3
63640: NEG
63641: PUSH
63642: LD_INT 2
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 3
63652: NEG
63653: PUSH
63654: LD_INT 3
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63680: LD_ADDR_VAR 0 14
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 1
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: LD_INT 1
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 1
63749: NEG
63750: PUSH
63751: LD_INT 1
63753: NEG
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: LD_INT 2
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 0
63773: PUSH
63774: LD_INT 2
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: LD_INT 1
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: LD_INT 2
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: LD_INT 3
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: LD_INT 3
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: LD_INT 2
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63876: LD_ADDR_VAR 0 15
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: LD_INT 1
63896: NEG
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 1
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 1
63945: NEG
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 2
63968: PUSH
63969: LD_INT 0
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 2
63978: PUSH
63979: LD_INT 1
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 1
63988: NEG
63989: PUSH
63990: LD_INT 1
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 2
63999: NEG
64000: PUSH
64001: LD_INT 0
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 2
64010: NEG
64011: PUSH
64012: LD_INT 1
64014: NEG
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 2
64022: PUSH
64023: LD_INT 1
64025: NEG
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 3
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 3
64043: PUSH
64044: LD_INT 1
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64069: LD_ADDR_VAR 0 16
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 0
64086: PUSH
64087: LD_INT 1
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: LD_INT 1
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: LD_INT 1
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: LD_INT 0
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: LD_INT 1
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 1
64150: NEG
64151: PUSH
64152: LD_INT 2
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 2
64162: PUSH
64163: LD_INT 1
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 2
64172: PUSH
64173: LD_INT 2
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: PUSH
64183: LD_INT 2
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 2
64192: NEG
64193: PUSH
64194: LD_INT 1
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 2
64204: NEG
64205: PUSH
64206: LD_INT 2
64208: NEG
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 3
64216: PUSH
64217: LD_INT 2
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 3
64226: PUSH
64227: LD_INT 3
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 2
64236: PUSH
64237: LD_INT 3
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64262: LD_ADDR_VAR 0 17
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: LD_INT 1
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: PUSH
64301: LD_INT 1
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 1
64331: NEG
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 1
64343: NEG
64344: PUSH
64345: LD_INT 2
64347: NEG
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: LD_INT 2
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: LD_INT 1
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 2
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 2
64387: PUSH
64388: LD_INT 1
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: PUSH
64395: LD_INT 2
64397: PUSH
64398: LD_INT 2
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: LD_INT 2
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: LD_INT 2
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 1
64427: NEG
64428: PUSH
64429: LD_INT 1
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 2
64438: NEG
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 2
64449: NEG
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 2
64461: NEG
64462: PUSH
64463: LD_INT 2
64465: NEG
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64492: LD_ADDR_VAR 0 18
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: LD_INT 1
64512: NEG
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 1
64520: PUSH
64521: LD_INT 0
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 1
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 0
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 1
64550: NEG
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 1
64561: NEG
64562: PUSH
64563: LD_INT 1
64565: NEG
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 1
64573: NEG
64574: PUSH
64575: LD_INT 2
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: LD_INT 2
64588: NEG
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: LD_INT 1
64599: NEG
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 2
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 2
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 2
64627: PUSH
64628: LD_INT 2
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: LD_INT 2
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 2
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 1
64657: NEG
64658: PUSH
64659: LD_INT 1
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 2
64668: NEG
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 2
64679: NEG
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 2
64691: NEG
64692: PUSH
64693: LD_INT 2
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64722: LD_ADDR_VAR 0 19
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: LD_INT 1
64742: NEG
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 1
64750: PUSH
64751: LD_INT 0
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 1
64760: PUSH
64761: LD_INT 1
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 1
64791: NEG
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: LD_INT 2
64807: NEG
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: LD_INT 2
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: LD_INT 1
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 2
64837: PUSH
64838: LD_INT 0
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 2
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 2
64857: PUSH
64858: LD_INT 2
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 1
64867: PUSH
64868: LD_INT 2
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: LD_INT 2
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 1
64887: NEG
64888: PUSH
64889: LD_INT 1
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 2
64898: NEG
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 2
64909: NEG
64910: PUSH
64911: LD_INT 1
64913: NEG
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 2
64921: NEG
64922: PUSH
64923: LD_INT 2
64925: NEG
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64952: LD_ADDR_VAR 0 20
64956: PUSH
64957: LD_INT 0
64959: PUSH
64960: LD_INT 0
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 1
64980: PUSH
64981: LD_INT 0
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 1
64990: PUSH
64991: LD_INT 1
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: LD_INT 1
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 1
65021: NEG
65022: PUSH
65023: LD_INT 1
65025: NEG
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 1
65033: NEG
65034: PUSH
65035: LD_INT 2
65037: NEG
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: LD_INT 2
65048: NEG
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 1
65056: PUSH
65057: LD_INT 1
65059: NEG
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 2
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 2
65077: PUSH
65078: LD_INT 1
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 2
65087: PUSH
65088: LD_INT 2
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 1
65097: PUSH
65098: LD_INT 2
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 0
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 1
65117: NEG
65118: PUSH
65119: LD_INT 1
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 2
65128: NEG
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 2
65139: NEG
65140: PUSH
65141: LD_INT 1
65143: NEG
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 2
65151: NEG
65152: PUSH
65153: LD_INT 2
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65182: LD_ADDR_VAR 0 21
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 1
65210: PUSH
65211: LD_INT 0
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 1
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 1
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 1
65240: NEG
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: LD_INT 1
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 1
65263: NEG
65264: PUSH
65265: LD_INT 2
65267: NEG
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: LD_INT 2
65278: NEG
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 1
65286: PUSH
65287: LD_INT 1
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 2
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 2
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 2
65317: PUSH
65318: LD_INT 2
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 1
65327: PUSH
65328: LD_INT 2
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 0
65337: PUSH
65338: LD_INT 2
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 1
65347: NEG
65348: PUSH
65349: LD_INT 1
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 2
65358: NEG
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 2
65369: NEG
65370: PUSH
65371: LD_INT 1
65373: NEG
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 2
65381: NEG
65382: PUSH
65383: LD_INT 2
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65412: LD_ADDR_VAR 0 22
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: LD_INT 0
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 0
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 1
65440: PUSH
65441: LD_INT 0
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 1
65450: PUSH
65451: LD_INT 1
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 0
65460: PUSH
65461: LD_INT 1
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 1
65470: NEG
65471: PUSH
65472: LD_INT 0
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: LD_INT 1
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 1
65493: NEG
65494: PUSH
65495: LD_INT 2
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: LD_INT 2
65508: NEG
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: LD_INT 1
65519: NEG
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 2
65527: PUSH
65528: LD_INT 0
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 2
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 2
65547: PUSH
65548: LD_INT 2
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 1
65557: PUSH
65558: LD_INT 2
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 0
65567: PUSH
65568: LD_INT 2
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: LD_INT 1
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 2
65588: NEG
65589: PUSH
65590: LD_INT 0
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 2
65599: NEG
65600: PUSH
65601: LD_INT 1
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 2
65611: NEG
65612: PUSH
65613: LD_INT 2
65615: NEG
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65642: LD_ADDR_VAR 0 23
65646: PUSH
65647: LD_INT 0
65649: PUSH
65650: LD_INT 0
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: LD_INT 1
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 1
65670: PUSH
65671: LD_INT 0
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 1
65680: PUSH
65681: LD_INT 1
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 0
65690: PUSH
65691: LD_INT 1
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 1
65700: NEG
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 1
65711: NEG
65712: PUSH
65713: LD_INT 1
65715: NEG
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 1
65723: NEG
65724: PUSH
65725: LD_INT 2
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: LD_INT 2
65738: NEG
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 1
65746: PUSH
65747: LD_INT 1
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 2
65757: PUSH
65758: LD_INT 0
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 2
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 2
65777: PUSH
65778: LD_INT 2
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 1
65787: PUSH
65788: LD_INT 2
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: LD_INT 2
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 1
65807: NEG
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 2
65818: NEG
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 2
65829: NEG
65830: PUSH
65831: LD_INT 1
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 2
65841: NEG
65842: PUSH
65843: LD_INT 2
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 2
65853: NEG
65854: PUSH
65855: LD_INT 3
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 1
65865: NEG
65866: PUSH
65867: LD_INT 3
65869: NEG
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 1
65877: PUSH
65878: LD_INT 2
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 2
65888: PUSH
65889: LD_INT 1
65891: NEG
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
65922: LD_ADDR_VAR 0 24
65926: PUSH
65927: LD_INT 0
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 0
65939: PUSH
65940: LD_INT 1
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: PUSH
65951: LD_INT 0
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 1
65960: PUSH
65961: LD_INT 1
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 0
65970: PUSH
65971: LD_INT 1
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 1
65980: NEG
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 1
65991: NEG
65992: PUSH
65993: LD_INT 1
65995: NEG
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 1
66003: NEG
66004: PUSH
66005: LD_INT 2
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: LD_INT 2
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: LD_INT 1
66029: NEG
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 2
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 2
66047: PUSH
66048: LD_INT 1
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 2
66057: PUSH
66058: LD_INT 2
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 1
66067: PUSH
66068: LD_INT 2
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 0
66077: PUSH
66078: LD_INT 2
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 1
66087: NEG
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 2
66098: NEG
66099: PUSH
66100: LD_INT 0
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 2
66109: NEG
66110: PUSH
66111: LD_INT 1
66113: NEG
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 2
66121: NEG
66122: PUSH
66123: LD_INT 2
66125: NEG
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: PUSH
66134: LD_INT 2
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 2
66144: PUSH
66145: LD_INT 1
66147: NEG
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 3
66155: PUSH
66156: LD_INT 1
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 3
66165: PUSH
66166: LD_INT 2
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
66198: LD_ADDR_VAR 0 25
66202: PUSH
66203: LD_INT 0
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 0
66215: PUSH
66216: LD_INT 1
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 1
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 1
66236: PUSH
66237: LD_INT 1
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 0
66246: PUSH
66247: LD_INT 1
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 1
66256: NEG
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 1
66267: NEG
66268: PUSH
66269: LD_INT 1
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 1
66279: NEG
66280: PUSH
66281: LD_INT 2
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: LD_INT 2
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: LD_INT 1
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 2
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 2
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 2
66333: PUSH
66334: LD_INT 2
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: LD_INT 2
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 0
66353: PUSH
66354: LD_INT 2
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 1
66363: NEG
66364: PUSH
66365: LD_INT 1
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 2
66374: NEG
66375: PUSH
66376: LD_INT 0
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 2
66385: NEG
66386: PUSH
66387: LD_INT 1
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 2
66397: NEG
66398: PUSH
66399: LD_INT 2
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 3
66409: PUSH
66410: LD_INT 1
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 3
66419: PUSH
66420: LD_INT 2
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 2
66429: PUSH
66430: LD_INT 3
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 1
66439: PUSH
66440: LD_INT 3
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66472: LD_ADDR_VAR 0 26
66476: PUSH
66477: LD_INT 0
66479: PUSH
66480: LD_INT 0
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: LD_INT 1
66492: NEG
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 1
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 1
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: LD_INT 1
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 1
66530: NEG
66531: PUSH
66532: LD_INT 0
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 1
66541: NEG
66542: PUSH
66543: LD_INT 1
66545: NEG
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 1
66553: NEG
66554: PUSH
66555: LD_INT 2
66557: NEG
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 0
66565: PUSH
66566: LD_INT 2
66568: NEG
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 1
66576: PUSH
66577: LD_INT 1
66579: NEG
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 2
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 2
66597: PUSH
66598: LD_INT 1
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 2
66607: PUSH
66608: LD_INT 2
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 1
66617: PUSH
66618: LD_INT 2
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: LD_INT 2
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 1
66637: NEG
66638: PUSH
66639: LD_INT 1
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 2
66648: NEG
66649: PUSH
66650: LD_INT 0
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 2
66659: NEG
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 2
66671: NEG
66672: PUSH
66673: LD_INT 2
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 2
66683: PUSH
66684: LD_INT 3
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 1
66693: PUSH
66694: LD_INT 3
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 1
66703: NEG
66704: PUSH
66705: LD_INT 2
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 2
66714: NEG
66715: PUSH
66716: LD_INT 1
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66748: LD_ADDR_VAR 0 27
66752: PUSH
66753: LD_INT 0
66755: PUSH
66756: LD_INT 0
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: LD_INT 1
66768: NEG
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 1
66776: PUSH
66777: LD_INT 0
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 1
66786: PUSH
66787: LD_INT 1
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 0
66796: PUSH
66797: LD_INT 1
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 1
66806: NEG
66807: PUSH
66808: LD_INT 0
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 1
66817: NEG
66818: PUSH
66819: LD_INT 1
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 1
66829: NEG
66830: PUSH
66831: LD_INT 2
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 0
66841: PUSH
66842: LD_INT 2
66844: NEG
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 1
66852: PUSH
66853: LD_INT 1
66855: NEG
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 2
66863: PUSH
66864: LD_INT 0
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 2
66873: PUSH
66874: LD_INT 1
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 2
66883: PUSH
66884: LD_INT 2
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 1
66893: PUSH
66894: LD_INT 2
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 0
66903: PUSH
66904: LD_INT 2
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 1
66913: NEG
66914: PUSH
66915: LD_INT 1
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 2
66924: NEG
66925: PUSH
66926: LD_INT 0
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 2
66935: NEG
66936: PUSH
66937: LD_INT 1
66939: NEG
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 2
66947: NEG
66948: PUSH
66949: LD_INT 2
66951: NEG
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 1
66959: NEG
66960: PUSH
66961: LD_INT 2
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 2
66970: NEG
66971: PUSH
66972: LD_INT 1
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 3
66981: NEG
66982: PUSH
66983: LD_INT 1
66985: NEG
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 3
66993: NEG
66994: PUSH
66995: LD_INT 2
66997: NEG
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67028: LD_ADDR_VAR 0 28
67032: PUSH
67033: LD_INT 0
67035: PUSH
67036: LD_INT 0
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 0
67045: PUSH
67046: LD_INT 1
67048: NEG
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 1
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 1
67066: PUSH
67067: LD_INT 1
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: LD_INT 1
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 1
67086: NEG
67087: PUSH
67088: LD_INT 0
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 1
67097: NEG
67098: PUSH
67099: LD_INT 1
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 1
67109: NEG
67110: PUSH
67111: LD_INT 2
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: LD_INT 2
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 1
67132: PUSH
67133: LD_INT 1
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 2
67143: PUSH
67144: LD_INT 0
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 2
67153: PUSH
67154: LD_INT 1
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 2
67163: PUSH
67164: LD_INT 2
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 1
67173: PUSH
67174: LD_INT 2
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: LD_INT 2
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 1
67193: NEG
67194: PUSH
67195: LD_INT 1
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 2
67204: NEG
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 2
67215: NEG
67216: PUSH
67217: LD_INT 1
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 2
67227: NEG
67228: PUSH
67229: LD_INT 2
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 2
67239: NEG
67240: PUSH
67241: LD_INT 3
67243: NEG
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 1
67251: NEG
67252: PUSH
67253: LD_INT 3
67255: NEG
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 3
67263: NEG
67264: PUSH
67265: LD_INT 1
67267: NEG
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: LD_INT 2
67279: NEG
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67310: LD_ADDR_VAR 0 29
67314: PUSH
67315: LD_INT 0
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 0
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 1
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 1
67348: PUSH
67349: LD_INT 1
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 0
67358: PUSH
67359: LD_INT 1
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 1
67368: NEG
67369: PUSH
67370: LD_INT 0
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 1
67379: NEG
67380: PUSH
67381: LD_INT 1
67383: NEG
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 1
67391: NEG
67392: PUSH
67393: LD_INT 2
67395: NEG
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: LD_INT 2
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 1
67414: PUSH
67415: LD_INT 1
67417: NEG
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 2
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 2
67435: PUSH
67436: LD_INT 1
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 1
67445: PUSH
67446: LD_INT 2
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 0
67455: PUSH
67456: LD_INT 2
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 1
67465: NEG
67466: PUSH
67467: LD_INT 1
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 2
67476: NEG
67477: PUSH
67478: LD_INT 1
67480: NEG
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 2
67488: NEG
67489: PUSH
67490: LD_INT 2
67492: NEG
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 2
67500: NEG
67501: PUSH
67502: LD_INT 3
67504: NEG
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 2
67512: PUSH
67513: LD_INT 1
67515: NEG
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 3
67523: PUSH
67524: LD_INT 1
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 1
67533: PUSH
67534: LD_INT 3
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 1
67543: NEG
67544: PUSH
67545: LD_INT 2
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 3
67554: NEG
67555: PUSH
67556: LD_INT 2
67558: NEG
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67589: LD_ADDR_VAR 0 30
67593: PUSH
67594: LD_INT 0
67596: PUSH
67597: LD_INT 0
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 0
67606: PUSH
67607: LD_INT 1
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 1
67617: PUSH
67618: LD_INT 0
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 1
67627: PUSH
67628: LD_INT 1
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 0
67637: PUSH
67638: LD_INT 1
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 1
67647: NEG
67648: PUSH
67649: LD_INT 0
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 1
67658: NEG
67659: PUSH
67660: LD_INT 1
67662: NEG
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 1
67670: NEG
67671: PUSH
67672: LD_INT 2
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: LD_INT 2
67685: NEG
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 1
67693: PUSH
67694: LD_INT 1
67696: NEG
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 2
67704: PUSH
67705: LD_INT 0
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 2
67714: PUSH
67715: LD_INT 1
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 2
67724: PUSH
67725: LD_INT 2
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 1
67734: PUSH
67735: LD_INT 2
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 1
67744: NEG
67745: PUSH
67746: LD_INT 1
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 2
67755: NEG
67756: PUSH
67757: LD_INT 0
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 2
67766: NEG
67767: PUSH
67768: LD_INT 1
67770: NEG
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 1
67778: NEG
67779: PUSH
67780: LD_INT 3
67782: NEG
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 1
67790: PUSH
67791: LD_INT 2
67793: NEG
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 3
67801: PUSH
67802: LD_INT 2
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 2
67811: PUSH
67812: LD_INT 3
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 2
67821: NEG
67822: PUSH
67823: LD_INT 1
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 3
67832: NEG
67833: PUSH
67834: LD_INT 1
67836: NEG
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67867: LD_ADDR_VAR 0 31
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: LD_INT 0
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 0
67884: PUSH
67885: LD_INT 1
67887: NEG
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 1
67895: PUSH
67896: LD_INT 0
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 1
67905: PUSH
67906: LD_INT 1
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 0
67915: PUSH
67916: LD_INT 1
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 1
67925: NEG
67926: PUSH
67927: LD_INT 0
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 1
67936: NEG
67937: PUSH
67938: LD_INT 1
67940: NEG
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 1
67948: NEG
67949: PUSH
67950: LD_INT 2
67952: NEG
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 1
67960: PUSH
67961: LD_INT 1
67963: NEG
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 2
67971: PUSH
67972: LD_INT 0
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 2
67981: PUSH
67982: LD_INT 1
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 2
67991: PUSH
67992: LD_INT 2
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 1
68001: PUSH
68002: LD_INT 2
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 0
68011: PUSH
68012: LD_INT 2
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 1
68021: NEG
68022: PUSH
68023: LD_INT 1
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 2
68032: NEG
68033: PUSH
68034: LD_INT 1
68036: NEG
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 2
68044: NEG
68045: PUSH
68046: LD_INT 2
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 2
68056: NEG
68057: PUSH
68058: LD_INT 3
68060: NEG
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 2
68068: PUSH
68069: LD_INT 1
68071: NEG
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 3
68079: PUSH
68080: LD_INT 1
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 1
68089: PUSH
68090: LD_INT 3
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 1
68099: NEG
68100: PUSH
68101: LD_INT 2
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 3
68110: NEG
68111: PUSH
68112: LD_INT 2
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68145: LD_ADDR_VAR 0 32
68149: PUSH
68150: LD_INT 0
68152: PUSH
68153: LD_INT 0
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 0
68162: PUSH
68163: LD_INT 1
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 1
68173: PUSH
68174: LD_INT 0
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 1
68183: PUSH
68184: LD_INT 1
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: LD_INT 1
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 1
68203: NEG
68204: PUSH
68205: LD_INT 0
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 1
68214: NEG
68215: PUSH
68216: LD_INT 1
68218: NEG
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 1
68226: NEG
68227: PUSH
68228: LD_INT 2
68230: NEG
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: LD_INT 2
68241: NEG
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 1
68249: PUSH
68250: LD_INT 1
68252: NEG
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 2
68260: PUSH
68261: LD_INT 1
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 2
68270: PUSH
68271: LD_INT 2
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 1
68280: PUSH
68281: LD_INT 2
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: LD_INT 2
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 1
68300: NEG
68301: PUSH
68302: LD_INT 1
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 2
68311: NEG
68312: PUSH
68313: LD_INT 0
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 2
68322: NEG
68323: PUSH
68324: LD_INT 1
68326: NEG
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 1
68334: NEG
68335: PUSH
68336: LD_INT 3
68338: NEG
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 1
68346: PUSH
68347: LD_INT 2
68349: NEG
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 3
68357: PUSH
68358: LD_INT 2
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 2
68367: PUSH
68368: LD_INT 3
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 2
68377: NEG
68378: PUSH
68379: LD_INT 1
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 3
68388: NEG
68389: PUSH
68390: LD_INT 1
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68423: LD_ADDR_VAR 0 33
68427: PUSH
68428: LD_INT 0
68430: PUSH
68431: LD_INT 0
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 0
68440: PUSH
68441: LD_INT 1
68443: NEG
68444: PUSH
68445: EMPTY
68446: LIST
68447: LIST
68448: PUSH
68449: LD_INT 1
68451: PUSH
68452: LD_INT 0
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PUSH
68459: LD_INT 1
68461: PUSH
68462: LD_INT 1
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 0
68471: PUSH
68472: LD_INT 1
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 1
68481: NEG
68482: PUSH
68483: LD_INT 0
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 1
68492: NEG
68493: PUSH
68494: LD_INT 1
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 1
68504: NEG
68505: PUSH
68506: LD_INT 2
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 1
68516: PUSH
68517: LD_INT 1
68519: NEG
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 2
68527: PUSH
68528: LD_INT 0
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 2
68537: PUSH
68538: LD_INT 1
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 1
68547: PUSH
68548: LD_INT 2
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 0
68557: PUSH
68558: LD_INT 2
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 1
68567: NEG
68568: PUSH
68569: LD_INT 1
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 2
68578: NEG
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 2
68589: NEG
68590: PUSH
68591: LD_INT 1
68593: NEG
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 2
68601: NEG
68602: PUSH
68603: LD_INT 2
68605: NEG
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 2
68613: NEG
68614: PUSH
68615: LD_INT 3
68617: NEG
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 2
68625: PUSH
68626: LD_INT 1
68628: NEG
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 3
68636: PUSH
68637: LD_INT 1
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 1
68646: PUSH
68647: LD_INT 3
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 1
68656: NEG
68657: PUSH
68658: LD_INT 2
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: LD_INT 3
68667: NEG
68668: PUSH
68669: LD_INT 2
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68702: LD_ADDR_VAR 0 34
68706: PUSH
68707: LD_INT 0
68709: PUSH
68710: LD_INT 0
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PUSH
68717: LD_INT 0
68719: PUSH
68720: LD_INT 1
68722: NEG
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 1
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 1
68740: PUSH
68741: LD_INT 1
68743: PUSH
68744: EMPTY
68745: LIST
68746: LIST
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: LD_INT 1
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PUSH
68758: LD_INT 1
68760: NEG
68761: PUSH
68762: LD_INT 0
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 1
68771: NEG
68772: PUSH
68773: LD_INT 1
68775: NEG
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 1
68783: NEG
68784: PUSH
68785: LD_INT 2
68787: NEG
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 0
68795: PUSH
68796: LD_INT 2
68798: NEG
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 1
68806: PUSH
68807: LD_INT 1
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 2
68817: PUSH
68818: LD_INT 1
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 2
68827: PUSH
68828: LD_INT 2
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 1
68837: PUSH
68838: LD_INT 2
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 1
68847: NEG
68848: PUSH
68849: LD_INT 1
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 2
68858: NEG
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 2
68869: NEG
68870: PUSH
68871: LD_INT 1
68873: NEG
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 2
68881: NEG
68882: PUSH
68883: LD_INT 2
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 1
68893: NEG
68894: PUSH
68895: LD_INT 3
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 1
68905: PUSH
68906: LD_INT 2
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 3
68916: PUSH
68917: LD_INT 2
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 2
68926: PUSH
68927: LD_INT 3
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 2
68936: NEG
68937: PUSH
68938: LD_INT 1
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 3
68947: NEG
68948: PUSH
68949: LD_INT 1
68951: NEG
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
68982: LD_ADDR_VAR 0 35
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: LD_INT 0
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: LD_INT 1
69002: NEG
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 1
69010: PUSH
69011: LD_INT 0
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 1
69020: PUSH
69021: LD_INT 1
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 0
69030: PUSH
69031: LD_INT 1
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 1
69040: NEG
69041: PUSH
69042: LD_INT 0
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 1
69051: NEG
69052: PUSH
69053: LD_INT 1
69055: NEG
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 2
69063: PUSH
69064: LD_INT 1
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 2
69073: NEG
69074: PUSH
69075: LD_INT 1
69077: NEG
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
69094: LD_ADDR_VAR 0 36
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: LD_INT 0
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 0
69111: PUSH
69112: LD_INT 1
69114: NEG
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 1
69122: PUSH
69123: LD_INT 0
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 1
69132: PUSH
69133: LD_INT 1
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 0
69142: PUSH
69143: LD_INT 1
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 1
69152: NEG
69153: PUSH
69154: LD_INT 0
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 1
69163: NEG
69164: PUSH
69165: LD_INT 1
69167: NEG
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 1
69175: NEG
69176: PUSH
69177: LD_INT 2
69179: NEG
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 1
69187: PUSH
69188: LD_INT 2
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
69206: LD_ADDR_VAR 0 37
69210: PUSH
69211: LD_INT 0
69213: PUSH
69214: LD_INT 0
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 0
69223: PUSH
69224: LD_INT 1
69226: NEG
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 1
69234: PUSH
69235: LD_INT 0
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 1
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 0
69254: PUSH
69255: LD_INT 1
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 1
69264: NEG
69265: PUSH
69266: LD_INT 0
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 1
69275: NEG
69276: PUSH
69277: LD_INT 1
69279: NEG
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 1
69287: PUSH
69288: LD_INT 1
69290: NEG
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 1
69298: NEG
69299: PUSH
69300: LD_INT 1
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
69318: LD_ADDR_VAR 0 38
69322: PUSH
69323: LD_INT 0
69325: PUSH
69326: LD_INT 0
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 0
69335: PUSH
69336: LD_INT 1
69338: NEG
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 1
69346: PUSH
69347: LD_INT 0
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 1
69356: PUSH
69357: LD_INT 1
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 0
69366: PUSH
69367: LD_INT 1
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 1
69376: NEG
69377: PUSH
69378: LD_INT 0
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 1
69387: NEG
69388: PUSH
69389: LD_INT 1
69391: NEG
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 2
69399: PUSH
69400: LD_INT 1
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 2
69409: NEG
69410: PUSH
69411: LD_INT 1
69413: NEG
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
69430: LD_ADDR_VAR 0 39
69434: PUSH
69435: LD_INT 0
69437: PUSH
69438: LD_INT 0
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 0
69447: PUSH
69448: LD_INT 1
69450: NEG
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 1
69458: PUSH
69459: LD_INT 0
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 1
69468: PUSH
69469: LD_INT 1
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 0
69478: PUSH
69479: LD_INT 1
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: NEG
69489: PUSH
69490: LD_INT 0
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 1
69499: NEG
69500: PUSH
69501: LD_INT 1
69503: NEG
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 1
69511: NEG
69512: PUSH
69513: LD_INT 2
69515: NEG
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 1
69523: PUSH
69524: LD_INT 2
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
69542: LD_ADDR_VAR 0 40
69546: PUSH
69547: LD_INT 0
69549: PUSH
69550: LD_INT 0
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 0
69559: PUSH
69560: LD_INT 1
69562: NEG
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 1
69570: PUSH
69571: LD_INT 0
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 1
69580: PUSH
69581: LD_INT 1
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 0
69590: PUSH
69591: LD_INT 1
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 1
69600: NEG
69601: PUSH
69602: LD_INT 0
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 1
69611: NEG
69612: PUSH
69613: LD_INT 1
69615: NEG
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 1
69623: PUSH
69624: LD_INT 1
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 1
69634: NEG
69635: PUSH
69636: LD_INT 1
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69654: LD_ADDR_VAR 0 41
69658: PUSH
69659: LD_INT 0
69661: PUSH
69662: LD_INT 0
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 0
69671: PUSH
69672: LD_INT 1
69674: NEG
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 1
69682: PUSH
69683: LD_INT 0
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 1
69692: PUSH
69693: LD_INT 1
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 0
69702: PUSH
69703: LD_INT 1
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 1
69712: NEG
69713: PUSH
69714: LD_INT 0
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 1
69723: NEG
69724: PUSH
69725: LD_INT 1
69727: NEG
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 1
69735: NEG
69736: PUSH
69737: LD_INT 2
69739: NEG
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 1
69747: PUSH
69748: LD_INT 1
69750: NEG
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 2
69758: PUSH
69759: LD_INT 0
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 2
69768: PUSH
69769: LD_INT 1
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 2
69778: PUSH
69779: LD_INT 2
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 1
69788: PUSH
69789: LD_INT 2
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 1
69798: NEG
69799: PUSH
69800: LD_INT 1
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 2
69809: NEG
69810: PUSH
69811: LD_INT 0
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 2
69820: NEG
69821: PUSH
69822: LD_INT 1
69824: NEG
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 2
69832: NEG
69833: PUSH
69834: LD_INT 2
69836: NEG
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 2
69844: NEG
69845: PUSH
69846: LD_INT 3
69848: NEG
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 2
69856: PUSH
69857: LD_INT 1
69859: NEG
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 3
69867: PUSH
69868: LD_INT 0
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 3
69877: PUSH
69878: LD_INT 1
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 3
69887: PUSH
69888: LD_INT 2
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 3
69897: PUSH
69898: LD_INT 3
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 2
69907: PUSH
69908: LD_INT 3
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 2
69917: NEG
69918: PUSH
69919: LD_INT 1
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 3
69928: NEG
69929: PUSH
69930: LD_INT 0
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 3
69939: NEG
69940: PUSH
69941: LD_INT 1
69943: NEG
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 3
69951: NEG
69952: PUSH
69953: LD_INT 2
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 3
69963: NEG
69964: PUSH
69965: LD_INT 3
69967: NEG
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: LIST
70003: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70004: LD_ADDR_VAR 0 42
70008: PUSH
70009: LD_INT 0
70011: PUSH
70012: LD_INT 0
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 0
70021: PUSH
70022: LD_INT 1
70024: NEG
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 1
70032: PUSH
70033: LD_INT 0
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 1
70042: PUSH
70043: LD_INT 1
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 0
70052: PUSH
70053: LD_INT 1
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 1
70062: NEG
70063: PUSH
70064: LD_INT 0
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 1
70073: NEG
70074: PUSH
70075: LD_INT 1
70077: NEG
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 1
70085: NEG
70086: PUSH
70087: LD_INT 2
70089: NEG
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 0
70097: PUSH
70098: LD_INT 2
70100: NEG
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 1
70108: PUSH
70109: LD_INT 1
70111: NEG
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 2
70119: PUSH
70120: LD_INT 1
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 2
70129: PUSH
70130: LD_INT 2
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 1
70139: PUSH
70140: LD_INT 2
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 0
70149: PUSH
70150: LD_INT 2
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 1
70159: NEG
70160: PUSH
70161: LD_INT 1
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 2
70170: NEG
70171: PUSH
70172: LD_INT 1
70174: NEG
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 2
70182: NEG
70183: PUSH
70184: LD_INT 2
70186: NEG
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 2
70194: NEG
70195: PUSH
70196: LD_INT 3
70198: NEG
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 1
70206: NEG
70207: PUSH
70208: LD_INT 3
70210: NEG
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 0
70218: PUSH
70219: LD_INT 3
70221: NEG
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 1
70229: PUSH
70230: LD_INT 2
70232: NEG
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 3
70240: PUSH
70241: LD_INT 2
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 3
70250: PUSH
70251: LD_INT 3
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 2
70260: PUSH
70261: LD_INT 3
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 1
70270: PUSH
70271: LD_INT 3
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 0
70280: PUSH
70281: LD_INT 3
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 1
70290: NEG
70291: PUSH
70292: LD_INT 2
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 3
70301: NEG
70302: PUSH
70303: LD_INT 2
70305: NEG
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 3
70313: NEG
70314: PUSH
70315: LD_INT 3
70317: NEG
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70354: LD_ADDR_VAR 0 43
70358: PUSH
70359: LD_INT 0
70361: PUSH
70362: LD_INT 0
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: LD_INT 1
70374: NEG
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 1
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 1
70392: PUSH
70393: LD_INT 1
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 0
70402: PUSH
70403: LD_INT 1
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 1
70412: NEG
70413: PUSH
70414: LD_INT 0
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 1
70423: NEG
70424: PUSH
70425: LD_INT 1
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 1
70435: NEG
70436: PUSH
70437: LD_INT 2
70439: NEG
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 0
70447: PUSH
70448: LD_INT 2
70450: NEG
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 1
70458: PUSH
70459: LD_INT 1
70461: NEG
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 2
70469: PUSH
70470: LD_INT 0
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 2
70479: PUSH
70480: LD_INT 1
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 1
70489: PUSH
70490: LD_INT 2
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 0
70499: PUSH
70500: LD_INT 2
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 1
70509: NEG
70510: PUSH
70511: LD_INT 1
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 2
70520: NEG
70521: PUSH
70522: LD_INT 0
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_INT 2
70531: NEG
70532: PUSH
70533: LD_INT 1
70535: NEG
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 1
70543: NEG
70544: PUSH
70545: LD_INT 3
70547: NEG
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 0
70555: PUSH
70556: LD_INT 3
70558: NEG
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 1
70566: PUSH
70567: LD_INT 2
70569: NEG
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 2
70577: PUSH
70578: LD_INT 1
70580: NEG
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 3
70588: PUSH
70589: LD_INT 0
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 3
70598: PUSH
70599: LD_INT 1
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 1
70608: PUSH
70609: LD_INT 3
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: LD_INT 0
70618: PUSH
70619: LD_INT 3
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: LD_INT 1
70628: NEG
70629: PUSH
70630: LD_INT 2
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 2
70639: NEG
70640: PUSH
70641: LD_INT 1
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PUSH
70648: LD_INT 3
70650: NEG
70651: PUSH
70652: LD_INT 0
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 3
70661: NEG
70662: PUSH
70663: LD_INT 1
70665: NEG
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: EMPTY
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70702: LD_ADDR_VAR 0 44
70706: PUSH
70707: LD_INT 0
70709: PUSH
70710: LD_INT 0
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 0
70719: PUSH
70720: LD_INT 1
70722: NEG
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 1
70730: PUSH
70731: LD_INT 0
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 1
70740: PUSH
70741: LD_INT 1
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 0
70750: PUSH
70751: LD_INT 1
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 1
70760: NEG
70761: PUSH
70762: LD_INT 0
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 1
70771: NEG
70772: PUSH
70773: LD_INT 1
70775: NEG
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: PUSH
70781: LD_INT 1
70783: NEG
70784: PUSH
70785: LD_INT 2
70787: NEG
70788: PUSH
70789: EMPTY
70790: LIST
70791: LIST
70792: PUSH
70793: LD_INT 1
70795: PUSH
70796: LD_INT 1
70798: NEG
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 2
70806: PUSH
70807: LD_INT 0
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 2
70816: PUSH
70817: LD_INT 1
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 2
70826: PUSH
70827: LD_INT 2
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: LD_INT 1
70836: PUSH
70837: LD_INT 2
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 1
70846: NEG
70847: PUSH
70848: LD_INT 1
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 2
70857: NEG
70858: PUSH
70859: LD_INT 0
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: LD_INT 2
70868: NEG
70869: PUSH
70870: LD_INT 1
70872: NEG
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 2
70880: NEG
70881: PUSH
70882: LD_INT 2
70884: NEG
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 2
70892: NEG
70893: PUSH
70894: LD_INT 3
70896: NEG
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 2
70904: PUSH
70905: LD_INT 1
70907: NEG
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 3
70915: PUSH
70916: LD_INT 0
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 3
70925: PUSH
70926: LD_INT 1
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 3
70935: PUSH
70936: LD_INT 2
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 3
70945: PUSH
70946: LD_INT 3
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 2
70955: PUSH
70956: LD_INT 3
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 2
70965: NEG
70966: PUSH
70967: LD_INT 1
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 3
70976: NEG
70977: PUSH
70978: LD_INT 0
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 3
70987: NEG
70988: PUSH
70989: LD_INT 1
70991: NEG
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 3
70999: NEG
71000: PUSH
71001: LD_INT 2
71003: NEG
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 3
71011: NEG
71012: PUSH
71013: LD_INT 3
71015: NEG
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71052: LD_ADDR_VAR 0 45
71056: PUSH
71057: LD_INT 0
71059: PUSH
71060: LD_INT 0
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 0
71069: PUSH
71070: LD_INT 1
71072: NEG
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 1
71080: PUSH
71081: LD_INT 0
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: LD_INT 1
71090: PUSH
71091: LD_INT 1
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: LD_INT 0
71100: PUSH
71101: LD_INT 1
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 1
71110: NEG
71111: PUSH
71112: LD_INT 0
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_INT 1
71121: NEG
71122: PUSH
71123: LD_INT 1
71125: NEG
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 1
71133: NEG
71134: PUSH
71135: LD_INT 2
71137: NEG
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 0
71145: PUSH
71146: LD_INT 2
71148: NEG
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 1
71156: PUSH
71157: LD_INT 1
71159: NEG
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_INT 2
71167: PUSH
71168: LD_INT 1
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 2
71177: PUSH
71178: LD_INT 2
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 1
71187: PUSH
71188: LD_INT 2
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PUSH
71195: LD_INT 0
71197: PUSH
71198: LD_INT 2
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 1
71207: NEG
71208: PUSH
71209: LD_INT 1
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 2
71218: NEG
71219: PUSH
71220: LD_INT 1
71222: NEG
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 2
71230: NEG
71231: PUSH
71232: LD_INT 2
71234: NEG
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 2
71242: NEG
71243: PUSH
71244: LD_INT 3
71246: NEG
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 1
71254: NEG
71255: PUSH
71256: LD_INT 3
71258: NEG
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 0
71266: PUSH
71267: LD_INT 3
71269: NEG
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 1
71277: PUSH
71278: LD_INT 2
71280: NEG
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 3
71288: PUSH
71289: LD_INT 2
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 3
71298: PUSH
71299: LD_INT 3
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 2
71308: PUSH
71309: LD_INT 3
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 1
71318: PUSH
71319: LD_INT 3
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: LD_INT 0
71328: PUSH
71329: LD_INT 3
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 1
71338: NEG
71339: PUSH
71340: LD_INT 2
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: LD_INT 3
71349: NEG
71350: PUSH
71351: LD_INT 2
71353: NEG
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 3
71361: NEG
71362: PUSH
71363: LD_INT 3
71365: NEG
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71402: LD_ADDR_VAR 0 46
71406: PUSH
71407: LD_INT 0
71409: PUSH
71410: LD_INT 0
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 0
71419: PUSH
71420: LD_INT 1
71422: NEG
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 1
71430: PUSH
71431: LD_INT 0
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: LD_INT 1
71440: PUSH
71441: LD_INT 1
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 0
71450: PUSH
71451: LD_INT 1
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 1
71460: NEG
71461: PUSH
71462: LD_INT 0
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 1
71471: NEG
71472: PUSH
71473: LD_INT 1
71475: NEG
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 1
71483: NEG
71484: PUSH
71485: LD_INT 2
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 0
71495: PUSH
71496: LD_INT 2
71498: NEG
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 1
71506: PUSH
71507: LD_INT 1
71509: NEG
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 2
71517: PUSH
71518: LD_INT 0
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 2
71527: PUSH
71528: LD_INT 1
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 1
71537: PUSH
71538: LD_INT 2
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 0
71547: PUSH
71548: LD_INT 2
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: LD_INT 1
71557: NEG
71558: PUSH
71559: LD_INT 1
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: PUSH
71566: LD_INT 2
71568: NEG
71569: PUSH
71570: LD_INT 0
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 2
71579: NEG
71580: PUSH
71581: LD_INT 1
71583: NEG
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 1
71591: NEG
71592: PUSH
71593: LD_INT 3
71595: NEG
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 0
71603: PUSH
71604: LD_INT 3
71606: NEG
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: PUSH
71612: LD_INT 1
71614: PUSH
71615: LD_INT 2
71617: NEG
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: LD_INT 2
71625: PUSH
71626: LD_INT 1
71628: NEG
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 3
71636: PUSH
71637: LD_INT 0
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 3
71646: PUSH
71647: LD_INT 1
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 1
71656: PUSH
71657: LD_INT 3
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 0
71666: PUSH
71667: LD_INT 3
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 1
71676: NEG
71677: PUSH
71678: LD_INT 2
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 2
71687: NEG
71688: PUSH
71689: LD_INT 1
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 3
71698: NEG
71699: PUSH
71700: LD_INT 0
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 3
71709: NEG
71710: PUSH
71711: LD_INT 1
71713: NEG
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: LIST
71749: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71750: LD_ADDR_VAR 0 47
71754: PUSH
71755: LD_INT 0
71757: PUSH
71758: LD_INT 0
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 0
71767: PUSH
71768: LD_INT 1
71770: NEG
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 1
71778: PUSH
71779: LD_INT 0
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 1
71788: PUSH
71789: LD_INT 1
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 0
71798: PUSH
71799: LD_INT 1
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 1
71808: NEG
71809: PUSH
71810: LD_INT 0
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 1
71819: NEG
71820: PUSH
71821: LD_INT 1
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 1
71831: NEG
71832: PUSH
71833: LD_INT 2
71835: NEG
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_INT 0
71843: PUSH
71844: LD_INT 2
71846: NEG
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 1
71854: PUSH
71855: LD_INT 1
71857: NEG
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: LD_INT 2
71865: NEG
71866: PUSH
71867: LD_INT 1
71869: NEG
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 2
71877: NEG
71878: PUSH
71879: LD_INT 2
71881: NEG
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71901: LD_ADDR_VAR 0 48
71905: PUSH
71906: LD_INT 0
71908: PUSH
71909: LD_INT 0
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 0
71918: PUSH
71919: LD_INT 1
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 1
71929: PUSH
71930: LD_INT 0
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 1
71939: PUSH
71940: LD_INT 1
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 0
71949: PUSH
71950: LD_INT 1
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 1
71959: NEG
71960: PUSH
71961: LD_INT 0
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 1
71970: NEG
71971: PUSH
71972: LD_INT 1
71974: NEG
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 1
71982: NEG
71983: PUSH
71984: LD_INT 2
71986: NEG
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 0
71994: PUSH
71995: LD_INT 2
71997: NEG
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 1
72005: PUSH
72006: LD_INT 1
72008: NEG
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PUSH
72014: LD_INT 2
72016: PUSH
72017: LD_INT 0
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: PUSH
72024: LD_INT 2
72026: PUSH
72027: LD_INT 1
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: PUSH
72034: EMPTY
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72048: LD_ADDR_VAR 0 49
72052: PUSH
72053: LD_INT 0
72055: PUSH
72056: LD_INT 0
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_INT 0
72065: PUSH
72066: LD_INT 1
72068: NEG
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 1
72076: PUSH
72077: LD_INT 0
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 1
72086: PUSH
72087: LD_INT 1
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 0
72096: PUSH
72097: LD_INT 1
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 1
72106: NEG
72107: PUSH
72108: LD_INT 0
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: PUSH
72115: LD_INT 1
72117: NEG
72118: PUSH
72119: LD_INT 1
72121: NEG
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PUSH
72127: LD_INT 1
72129: PUSH
72130: LD_INT 1
72132: NEG
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 2
72140: PUSH
72141: LD_INT 0
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 2
72150: PUSH
72151: LD_INT 1
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: LD_INT 2
72160: PUSH
72161: LD_INT 2
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 1
72170: PUSH
72171: LD_INT 2
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72192: LD_ADDR_VAR 0 50
72196: PUSH
72197: LD_INT 0
72199: PUSH
72200: LD_INT 0
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: LD_INT 0
72209: PUSH
72210: LD_INT 1
72212: NEG
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 1
72220: PUSH
72221: LD_INT 0
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: LD_INT 1
72230: PUSH
72231: LD_INT 1
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 0
72240: PUSH
72241: LD_INT 1
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: LD_INT 1
72250: NEG
72251: PUSH
72252: LD_INT 0
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: PUSH
72259: LD_INT 1
72261: NEG
72262: PUSH
72263: LD_INT 1
72265: NEG
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: PUSH
72271: LD_INT 2
72273: PUSH
72274: LD_INT 1
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: LD_INT 2
72283: PUSH
72284: LD_INT 2
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 1
72293: PUSH
72294: LD_INT 2
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: PUSH
72301: LD_INT 0
72303: PUSH
72304: LD_INT 2
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: PUSH
72311: LD_INT 1
72313: NEG
72314: PUSH
72315: LD_INT 1
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72336: LD_ADDR_VAR 0 51
72340: PUSH
72341: LD_INT 0
72343: PUSH
72344: LD_INT 0
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 0
72353: PUSH
72354: LD_INT 1
72356: NEG
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 1
72364: PUSH
72365: LD_INT 0
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: LD_INT 1
72374: PUSH
72375: LD_INT 1
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 0
72384: PUSH
72385: LD_INT 1
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: PUSH
72392: LD_INT 1
72394: NEG
72395: PUSH
72396: LD_INT 0
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: PUSH
72403: LD_INT 1
72405: NEG
72406: PUSH
72407: LD_INT 1
72409: NEG
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PUSH
72415: LD_INT 1
72417: PUSH
72418: LD_INT 2
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: LD_INT 0
72427: PUSH
72428: LD_INT 2
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: PUSH
72435: LD_INT 1
72437: NEG
72438: PUSH
72439: LD_INT 1
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: LD_INT 2
72448: NEG
72449: PUSH
72450: LD_INT 0
72452: PUSH
72453: EMPTY
72454: LIST
72455: LIST
72456: PUSH
72457: LD_INT 2
72459: NEG
72460: PUSH
72461: LD_INT 1
72463: NEG
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72483: LD_ADDR_VAR 0 52
72487: PUSH
72488: LD_INT 0
72490: PUSH
72491: LD_INT 0
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: LD_INT 0
72500: PUSH
72501: LD_INT 1
72503: NEG
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: PUSH
72509: LD_INT 1
72511: PUSH
72512: LD_INT 0
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: LD_INT 1
72521: PUSH
72522: LD_INT 1
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 0
72531: PUSH
72532: LD_INT 1
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: LD_INT 1
72541: NEG
72542: PUSH
72543: LD_INT 0
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 1
72552: NEG
72553: PUSH
72554: LD_INT 1
72556: NEG
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: LD_INT 1
72564: NEG
72565: PUSH
72566: LD_INT 2
72568: NEG
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: LD_INT 1
72576: NEG
72577: PUSH
72578: LD_INT 1
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: PUSH
72585: LD_INT 2
72587: NEG
72588: PUSH
72589: LD_INT 0
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: PUSH
72596: LD_INT 2
72598: NEG
72599: PUSH
72600: LD_INT 1
72602: NEG
72603: PUSH
72604: EMPTY
72605: LIST
72606: LIST
72607: PUSH
72608: LD_INT 2
72610: NEG
72611: PUSH
72612: LD_INT 2
72614: NEG
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72634: LD_ADDR_VAR 0 53
72638: PUSH
72639: LD_INT 0
72641: PUSH
72642: LD_INT 0
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 0
72651: PUSH
72652: LD_INT 1
72654: NEG
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 1
72662: PUSH
72663: LD_INT 0
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PUSH
72670: LD_INT 1
72672: PUSH
72673: LD_INT 1
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: LD_INT 0
72682: PUSH
72683: LD_INT 1
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PUSH
72690: LD_INT 1
72692: NEG
72693: PUSH
72694: LD_INT 0
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 1
72703: NEG
72704: PUSH
72705: LD_INT 1
72707: NEG
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 1
72715: NEG
72716: PUSH
72717: LD_INT 2
72719: NEG
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PUSH
72725: LD_INT 0
72727: PUSH
72728: LD_INT 2
72730: NEG
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: LD_INT 1
72738: PUSH
72739: LD_INT 1
72741: NEG
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 2
72749: PUSH
72750: LD_INT 0
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: LD_INT 2
72759: PUSH
72760: LD_INT 1
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 2
72769: PUSH
72770: LD_INT 2
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 1
72779: PUSH
72780: LD_INT 2
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: PUSH
72787: LD_INT 0
72789: PUSH
72790: LD_INT 2
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: PUSH
72797: LD_INT 1
72799: NEG
72800: PUSH
72801: LD_INT 1
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 2
72810: NEG
72811: PUSH
72812: LD_INT 0
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_INT 2
72821: NEG
72822: PUSH
72823: LD_INT 1
72825: NEG
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PUSH
72831: LD_INT 2
72833: NEG
72834: PUSH
72835: LD_INT 2
72837: NEG
72838: PUSH
72839: EMPTY
72840: LIST
72841: LIST
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72864: LD_ADDR_VAR 0 54
72868: PUSH
72869: LD_INT 0
72871: PUSH
72872: LD_INT 0
72874: PUSH
72875: EMPTY
72876: LIST
72877: LIST
72878: PUSH
72879: LD_INT 0
72881: PUSH
72882: LD_INT 1
72884: NEG
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: LD_INT 1
72892: PUSH
72893: LD_INT 0
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 1
72902: PUSH
72903: LD_INT 1
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: LD_INT 0
72912: PUSH
72913: LD_INT 1
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: PUSH
72920: LD_INT 1
72922: NEG
72923: PUSH
72924: LD_INT 0
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 1
72933: NEG
72934: PUSH
72935: LD_INT 1
72937: NEG
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: PUSH
72943: LD_INT 1
72945: NEG
72946: PUSH
72947: LD_INT 2
72949: NEG
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 0
72957: PUSH
72958: LD_INT 2
72960: NEG
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 1
72968: PUSH
72969: LD_INT 1
72971: NEG
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: LD_INT 2
72979: PUSH
72980: LD_INT 0
72982: PUSH
72983: EMPTY
72984: LIST
72985: LIST
72986: PUSH
72987: LD_INT 2
72989: PUSH
72990: LD_INT 1
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: PUSH
72997: LD_INT 2
72999: PUSH
73000: LD_INT 2
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 1
73009: PUSH
73010: LD_INT 2
73012: PUSH
73013: EMPTY
73014: LIST
73015: LIST
73016: PUSH
73017: LD_INT 0
73019: PUSH
73020: LD_INT 2
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: PUSH
73027: LD_INT 1
73029: NEG
73030: PUSH
73031: LD_INT 1
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 2
73040: NEG
73041: PUSH
73042: LD_INT 0
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: PUSH
73049: LD_INT 2
73051: NEG
73052: PUSH
73053: LD_INT 1
73055: NEG
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 2
73063: NEG
73064: PUSH
73065: LD_INT 2
73067: NEG
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: EMPTY
73074: LIST
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: LIST
73080: LIST
73081: LIST
73082: LIST
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: LIST
73093: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73094: LD_ADDR_VAR 0 55
73098: PUSH
73099: LD_INT 0
73101: PUSH
73102: LD_INT 0
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 0
73111: PUSH
73112: LD_INT 1
73114: NEG
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: PUSH
73120: LD_INT 1
73122: PUSH
73123: LD_INT 0
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: PUSH
73130: LD_INT 1
73132: PUSH
73133: LD_INT 1
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: PUSH
73140: LD_INT 0
73142: PUSH
73143: LD_INT 1
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: PUSH
73150: LD_INT 1
73152: NEG
73153: PUSH
73154: LD_INT 0
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: PUSH
73161: LD_INT 1
73163: NEG
73164: PUSH
73165: LD_INT 1
73167: NEG
73168: PUSH
73169: EMPTY
73170: LIST
73171: LIST
73172: PUSH
73173: LD_INT 1
73175: NEG
73176: PUSH
73177: LD_INT 2
73179: NEG
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: PUSH
73185: LD_INT 0
73187: PUSH
73188: LD_INT 2
73190: NEG
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: PUSH
73196: LD_INT 1
73198: PUSH
73199: LD_INT 1
73201: NEG
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_INT 2
73209: PUSH
73210: LD_INT 0
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: PUSH
73217: LD_INT 2
73219: PUSH
73220: LD_INT 1
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: LD_INT 2
73229: PUSH
73230: LD_INT 2
73232: PUSH
73233: EMPTY
73234: LIST
73235: LIST
73236: PUSH
73237: LD_INT 1
73239: PUSH
73240: LD_INT 2
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PUSH
73247: LD_INT 0
73249: PUSH
73250: LD_INT 2
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PUSH
73257: LD_INT 1
73259: NEG
73260: PUSH
73261: LD_INT 1
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: PUSH
73268: LD_INT 2
73270: NEG
73271: PUSH
73272: LD_INT 0
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: LD_INT 2
73281: NEG
73282: PUSH
73283: LD_INT 1
73285: NEG
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PUSH
73291: LD_INT 2
73293: NEG
73294: PUSH
73295: LD_INT 2
73297: NEG
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: PUSH
73303: EMPTY
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73324: LD_ADDR_VAR 0 56
73328: PUSH
73329: LD_INT 0
73331: PUSH
73332: LD_INT 0
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: LD_INT 0
73341: PUSH
73342: LD_INT 1
73344: NEG
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: PUSH
73350: LD_INT 1
73352: PUSH
73353: LD_INT 0
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: PUSH
73360: LD_INT 1
73362: PUSH
73363: LD_INT 1
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: PUSH
73370: LD_INT 0
73372: PUSH
73373: LD_INT 1
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: LD_INT 1
73382: NEG
73383: PUSH
73384: LD_INT 0
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PUSH
73391: LD_INT 1
73393: NEG
73394: PUSH
73395: LD_INT 1
73397: NEG
73398: PUSH
73399: EMPTY
73400: LIST
73401: LIST
73402: PUSH
73403: LD_INT 1
73405: NEG
73406: PUSH
73407: LD_INT 2
73409: NEG
73410: PUSH
73411: EMPTY
73412: LIST
73413: LIST
73414: PUSH
73415: LD_INT 0
73417: PUSH
73418: LD_INT 2
73420: NEG
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: PUSH
73426: LD_INT 1
73428: PUSH
73429: LD_INT 1
73431: NEG
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PUSH
73437: LD_INT 2
73439: PUSH
73440: LD_INT 0
73442: PUSH
73443: EMPTY
73444: LIST
73445: LIST
73446: PUSH
73447: LD_INT 2
73449: PUSH
73450: LD_INT 1
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: PUSH
73457: LD_INT 2
73459: PUSH
73460: LD_INT 2
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_INT 1
73469: PUSH
73470: LD_INT 2
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: PUSH
73477: LD_INT 0
73479: PUSH
73480: LD_INT 2
73482: PUSH
73483: EMPTY
73484: LIST
73485: LIST
73486: PUSH
73487: LD_INT 1
73489: NEG
73490: PUSH
73491: LD_INT 1
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: PUSH
73498: LD_INT 2
73500: NEG
73501: PUSH
73502: LD_INT 0
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: PUSH
73509: LD_INT 2
73511: NEG
73512: PUSH
73513: LD_INT 1
73515: NEG
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: PUSH
73521: LD_INT 2
73523: NEG
73524: PUSH
73525: LD_INT 2
73527: NEG
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: PUSH
73533: EMPTY
73534: LIST
73535: LIST
73536: LIST
73537: LIST
73538: LIST
73539: LIST
73540: LIST
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73554: LD_ADDR_VAR 0 57
73558: PUSH
73559: LD_INT 0
73561: PUSH
73562: LD_INT 0
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: PUSH
73569: LD_INT 0
73571: PUSH
73572: LD_INT 1
73574: NEG
73575: PUSH
73576: EMPTY
73577: LIST
73578: LIST
73579: PUSH
73580: LD_INT 1
73582: PUSH
73583: LD_INT 0
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PUSH
73590: LD_INT 1
73592: PUSH
73593: LD_INT 1
73595: PUSH
73596: EMPTY
73597: LIST
73598: LIST
73599: PUSH
73600: LD_INT 0
73602: PUSH
73603: LD_INT 1
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: LD_INT 1
73612: NEG
73613: PUSH
73614: LD_INT 0
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: LD_INT 1
73623: NEG
73624: PUSH
73625: LD_INT 1
73627: NEG
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: PUSH
73633: LD_INT 1
73635: NEG
73636: PUSH
73637: LD_INT 2
73639: NEG
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: PUSH
73645: LD_INT 0
73647: PUSH
73648: LD_INT 2
73650: NEG
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: PUSH
73656: LD_INT 1
73658: PUSH
73659: LD_INT 1
73661: NEG
73662: PUSH
73663: EMPTY
73664: LIST
73665: LIST
73666: PUSH
73667: LD_INT 2
73669: PUSH
73670: LD_INT 0
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 2
73679: PUSH
73680: LD_INT 1
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: PUSH
73687: LD_INT 2
73689: PUSH
73690: LD_INT 2
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PUSH
73697: LD_INT 1
73699: PUSH
73700: LD_INT 2
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PUSH
73707: LD_INT 0
73709: PUSH
73710: LD_INT 2
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: LD_INT 1
73719: NEG
73720: PUSH
73721: LD_INT 1
73723: PUSH
73724: EMPTY
73725: LIST
73726: LIST
73727: PUSH
73728: LD_INT 2
73730: NEG
73731: PUSH
73732: LD_INT 0
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: PUSH
73739: LD_INT 2
73741: NEG
73742: PUSH
73743: LD_INT 1
73745: NEG
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: PUSH
73751: LD_INT 2
73753: NEG
73754: PUSH
73755: LD_INT 2
73757: NEG
73758: PUSH
73759: EMPTY
73760: LIST
73761: LIST
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: LIST
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: LIST
73781: LIST
73782: LIST
73783: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73784: LD_ADDR_VAR 0 58
73788: PUSH
73789: LD_INT 0
73791: PUSH
73792: LD_INT 0
73794: PUSH
73795: EMPTY
73796: LIST
73797: LIST
73798: PUSH
73799: LD_INT 0
73801: PUSH
73802: LD_INT 1
73804: NEG
73805: PUSH
73806: EMPTY
73807: LIST
73808: LIST
73809: PUSH
73810: LD_INT 1
73812: PUSH
73813: LD_INT 0
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: PUSH
73820: LD_INT 1
73822: PUSH
73823: LD_INT 1
73825: PUSH
73826: EMPTY
73827: LIST
73828: LIST
73829: PUSH
73830: LD_INT 0
73832: PUSH
73833: LD_INT 1
73835: PUSH
73836: EMPTY
73837: LIST
73838: LIST
73839: PUSH
73840: LD_INT 1
73842: NEG
73843: PUSH
73844: LD_INT 0
73846: PUSH
73847: EMPTY
73848: LIST
73849: LIST
73850: PUSH
73851: LD_INT 1
73853: NEG
73854: PUSH
73855: LD_INT 1
73857: NEG
73858: PUSH
73859: EMPTY
73860: LIST
73861: LIST
73862: PUSH
73863: LD_INT 1
73865: NEG
73866: PUSH
73867: LD_INT 2
73869: NEG
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: PUSH
73875: LD_INT 0
73877: PUSH
73878: LD_INT 2
73880: NEG
73881: PUSH
73882: EMPTY
73883: LIST
73884: LIST
73885: PUSH
73886: LD_INT 1
73888: PUSH
73889: LD_INT 1
73891: NEG
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: PUSH
73897: LD_INT 2
73899: PUSH
73900: LD_INT 0
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: PUSH
73907: LD_INT 2
73909: PUSH
73910: LD_INT 1
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: PUSH
73917: LD_INT 2
73919: PUSH
73920: LD_INT 2
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PUSH
73927: LD_INT 1
73929: PUSH
73930: LD_INT 2
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: PUSH
73937: LD_INT 0
73939: PUSH
73940: LD_INT 2
73942: PUSH
73943: EMPTY
73944: LIST
73945: LIST
73946: PUSH
73947: LD_INT 1
73949: NEG
73950: PUSH
73951: LD_INT 1
73953: PUSH
73954: EMPTY
73955: LIST
73956: LIST
73957: PUSH
73958: LD_INT 2
73960: NEG
73961: PUSH
73962: LD_INT 0
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: PUSH
73969: LD_INT 2
73971: NEG
73972: PUSH
73973: LD_INT 1
73975: NEG
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: PUSH
73981: LD_INT 2
73983: NEG
73984: PUSH
73985: LD_INT 2
73987: NEG
73988: PUSH
73989: EMPTY
73990: LIST
73991: LIST
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: LIST
73999: LIST
74000: LIST
74001: LIST
74002: LIST
74003: LIST
74004: LIST
74005: LIST
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74014: LD_ADDR_VAR 0 59
74018: PUSH
74019: LD_INT 0
74021: PUSH
74022: LD_INT 0
74024: PUSH
74025: EMPTY
74026: LIST
74027: LIST
74028: PUSH
74029: LD_INT 0
74031: PUSH
74032: LD_INT 1
74034: NEG
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PUSH
74040: LD_INT 1
74042: PUSH
74043: LD_INT 0
74045: PUSH
74046: EMPTY
74047: LIST
74048: LIST
74049: PUSH
74050: LD_INT 1
74052: PUSH
74053: LD_INT 1
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: PUSH
74060: LD_INT 0
74062: PUSH
74063: LD_INT 1
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: PUSH
74070: LD_INT 1
74072: NEG
74073: PUSH
74074: LD_INT 0
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: PUSH
74081: LD_INT 1
74083: NEG
74084: PUSH
74085: LD_INT 1
74087: NEG
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: LIST
74100: LIST
74101: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74102: LD_ADDR_VAR 0 60
74106: PUSH
74107: LD_INT 0
74109: PUSH
74110: LD_INT 0
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 0
74119: PUSH
74120: LD_INT 1
74122: NEG
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: LD_INT 1
74130: PUSH
74131: LD_INT 0
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 1
74140: PUSH
74141: LD_INT 1
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: PUSH
74148: LD_INT 0
74150: PUSH
74151: LD_INT 1
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PUSH
74158: LD_INT 1
74160: NEG
74161: PUSH
74162: LD_INT 0
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: PUSH
74169: LD_INT 1
74171: NEG
74172: PUSH
74173: LD_INT 1
74175: NEG
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: LIST
74185: LIST
74186: LIST
74187: LIST
74188: LIST
74189: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74190: LD_ADDR_VAR 0 61
74194: PUSH
74195: LD_INT 0
74197: PUSH
74198: LD_INT 0
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: PUSH
74205: LD_INT 0
74207: PUSH
74208: LD_INT 1
74210: NEG
74211: PUSH
74212: EMPTY
74213: LIST
74214: LIST
74215: PUSH
74216: LD_INT 1
74218: PUSH
74219: LD_INT 0
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: PUSH
74226: LD_INT 1
74228: PUSH
74229: LD_INT 1
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: LD_INT 0
74238: PUSH
74239: LD_INT 1
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PUSH
74246: LD_INT 1
74248: NEG
74249: PUSH
74250: LD_INT 0
74252: PUSH
74253: EMPTY
74254: LIST
74255: LIST
74256: PUSH
74257: LD_INT 1
74259: NEG
74260: PUSH
74261: LD_INT 1
74263: NEG
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74278: LD_ADDR_VAR 0 62
74282: PUSH
74283: LD_INT 0
74285: PUSH
74286: LD_INT 0
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: PUSH
74293: LD_INT 0
74295: PUSH
74296: LD_INT 1
74298: NEG
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: PUSH
74304: LD_INT 1
74306: PUSH
74307: LD_INT 0
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: PUSH
74314: LD_INT 1
74316: PUSH
74317: LD_INT 1
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PUSH
74324: LD_INT 0
74326: PUSH
74327: LD_INT 1
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: PUSH
74334: LD_INT 1
74336: NEG
74337: PUSH
74338: LD_INT 0
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: PUSH
74345: LD_INT 1
74347: NEG
74348: PUSH
74349: LD_INT 1
74351: NEG
74352: PUSH
74353: EMPTY
74354: LIST
74355: LIST
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74366: LD_ADDR_VAR 0 63
74370: PUSH
74371: LD_INT 0
74373: PUSH
74374: LD_INT 0
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: PUSH
74381: LD_INT 0
74383: PUSH
74384: LD_INT 1
74386: NEG
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: PUSH
74392: LD_INT 1
74394: PUSH
74395: LD_INT 0
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: PUSH
74402: LD_INT 1
74404: PUSH
74405: LD_INT 1
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: PUSH
74412: LD_INT 0
74414: PUSH
74415: LD_INT 1
74417: PUSH
74418: EMPTY
74419: LIST
74420: LIST
74421: PUSH
74422: LD_INT 1
74424: NEG
74425: PUSH
74426: LD_INT 0
74428: PUSH
74429: EMPTY
74430: LIST
74431: LIST
74432: PUSH
74433: LD_INT 1
74435: NEG
74436: PUSH
74437: LD_INT 1
74439: NEG
74440: PUSH
74441: EMPTY
74442: LIST
74443: LIST
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74454: LD_ADDR_VAR 0 64
74458: PUSH
74459: LD_INT 0
74461: PUSH
74462: LD_INT 0
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PUSH
74469: LD_INT 0
74471: PUSH
74472: LD_INT 1
74474: NEG
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: PUSH
74480: LD_INT 1
74482: PUSH
74483: LD_INT 0
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: PUSH
74490: LD_INT 1
74492: PUSH
74493: LD_INT 1
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: PUSH
74500: LD_INT 0
74502: PUSH
74503: LD_INT 1
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: PUSH
74510: LD_INT 1
74512: NEG
74513: PUSH
74514: LD_INT 0
74516: PUSH
74517: EMPTY
74518: LIST
74519: LIST
74520: PUSH
74521: LD_INT 1
74523: NEG
74524: PUSH
74525: LD_INT 1
74527: NEG
74528: PUSH
74529: EMPTY
74530: LIST
74531: LIST
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: ST_TO_ADDR
// end ; 1 :
74542: GO 80439
74544: LD_INT 1
74546: DOUBLE
74547: EQUAL
74548: IFTRUE 74552
74550: GO 77175
74552: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74553: LD_ADDR_VAR 0 11
74557: PUSH
74558: LD_INT 1
74560: NEG
74561: PUSH
74562: LD_INT 3
74564: NEG
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: PUSH
74570: LD_INT 0
74572: PUSH
74573: LD_INT 3
74575: NEG
74576: PUSH
74577: EMPTY
74578: LIST
74579: LIST
74580: PUSH
74581: LD_INT 1
74583: PUSH
74584: LD_INT 2
74586: NEG
74587: PUSH
74588: EMPTY
74589: LIST
74590: LIST
74591: PUSH
74592: EMPTY
74593: LIST
74594: LIST
74595: LIST
74596: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74597: LD_ADDR_VAR 0 12
74601: PUSH
74602: LD_INT 2
74604: PUSH
74605: LD_INT 1
74607: NEG
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: PUSH
74613: LD_INT 3
74615: PUSH
74616: LD_INT 0
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: PUSH
74623: LD_INT 3
74625: PUSH
74626: LD_INT 1
74628: PUSH
74629: EMPTY
74630: LIST
74631: LIST
74632: PUSH
74633: EMPTY
74634: LIST
74635: LIST
74636: LIST
74637: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74638: LD_ADDR_VAR 0 13
74642: PUSH
74643: LD_INT 3
74645: PUSH
74646: LD_INT 2
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: PUSH
74653: LD_INT 3
74655: PUSH
74656: LD_INT 3
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: PUSH
74663: LD_INT 2
74665: PUSH
74666: LD_INT 3
74668: PUSH
74669: EMPTY
74670: LIST
74671: LIST
74672: PUSH
74673: EMPTY
74674: LIST
74675: LIST
74676: LIST
74677: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74678: LD_ADDR_VAR 0 14
74682: PUSH
74683: LD_INT 1
74685: PUSH
74686: LD_INT 3
74688: PUSH
74689: EMPTY
74690: LIST
74691: LIST
74692: PUSH
74693: LD_INT 0
74695: PUSH
74696: LD_INT 3
74698: PUSH
74699: EMPTY
74700: LIST
74701: LIST
74702: PUSH
74703: LD_INT 1
74705: NEG
74706: PUSH
74707: LD_INT 2
74709: PUSH
74710: EMPTY
74711: LIST
74712: LIST
74713: PUSH
74714: EMPTY
74715: LIST
74716: LIST
74717: LIST
74718: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74719: LD_ADDR_VAR 0 15
74723: PUSH
74724: LD_INT 2
74726: NEG
74727: PUSH
74728: LD_INT 1
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: PUSH
74735: LD_INT 3
74737: NEG
74738: PUSH
74739: LD_INT 0
74741: PUSH
74742: EMPTY
74743: LIST
74744: LIST
74745: PUSH
74746: LD_INT 3
74748: NEG
74749: PUSH
74750: LD_INT 1
74752: NEG
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: PUSH
74758: EMPTY
74759: LIST
74760: LIST
74761: LIST
74762: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74763: LD_ADDR_VAR 0 16
74767: PUSH
74768: LD_INT 2
74770: NEG
74771: PUSH
74772: LD_INT 3
74774: NEG
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: PUSH
74780: LD_INT 3
74782: NEG
74783: PUSH
74784: LD_INT 2
74786: NEG
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PUSH
74792: LD_INT 3
74794: NEG
74795: PUSH
74796: LD_INT 3
74798: NEG
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: LIST
74808: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74809: LD_ADDR_VAR 0 17
74813: PUSH
74814: LD_INT 1
74816: NEG
74817: PUSH
74818: LD_INT 3
74820: NEG
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: PUSH
74826: LD_INT 0
74828: PUSH
74829: LD_INT 3
74831: NEG
74832: PUSH
74833: EMPTY
74834: LIST
74835: LIST
74836: PUSH
74837: LD_INT 1
74839: PUSH
74840: LD_INT 2
74842: NEG
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: LIST
74852: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74853: LD_ADDR_VAR 0 18
74857: PUSH
74858: LD_INT 2
74860: PUSH
74861: LD_INT 1
74863: NEG
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: PUSH
74869: LD_INT 3
74871: PUSH
74872: LD_INT 0
74874: PUSH
74875: EMPTY
74876: LIST
74877: LIST
74878: PUSH
74879: LD_INT 3
74881: PUSH
74882: LD_INT 1
74884: PUSH
74885: EMPTY
74886: LIST
74887: LIST
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: LIST
74893: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74894: LD_ADDR_VAR 0 19
74898: PUSH
74899: LD_INT 3
74901: PUSH
74902: LD_INT 2
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: PUSH
74909: LD_INT 3
74911: PUSH
74912: LD_INT 3
74914: PUSH
74915: EMPTY
74916: LIST
74917: LIST
74918: PUSH
74919: LD_INT 2
74921: PUSH
74922: LD_INT 3
74924: PUSH
74925: EMPTY
74926: LIST
74927: LIST
74928: PUSH
74929: EMPTY
74930: LIST
74931: LIST
74932: LIST
74933: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74934: LD_ADDR_VAR 0 20
74938: PUSH
74939: LD_INT 1
74941: PUSH
74942: LD_INT 3
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: PUSH
74949: LD_INT 0
74951: PUSH
74952: LD_INT 3
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: PUSH
74959: LD_INT 1
74961: NEG
74962: PUSH
74963: LD_INT 2
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: PUSH
74970: EMPTY
74971: LIST
74972: LIST
74973: LIST
74974: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74975: LD_ADDR_VAR 0 21
74979: PUSH
74980: LD_INT 2
74982: NEG
74983: PUSH
74984: LD_INT 1
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: PUSH
74991: LD_INT 3
74993: NEG
74994: PUSH
74995: LD_INT 0
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: PUSH
75002: LD_INT 3
75004: NEG
75005: PUSH
75006: LD_INT 1
75008: NEG
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: LIST
75018: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75019: LD_ADDR_VAR 0 22
75023: PUSH
75024: LD_INT 2
75026: NEG
75027: PUSH
75028: LD_INT 3
75030: NEG
75031: PUSH
75032: EMPTY
75033: LIST
75034: LIST
75035: PUSH
75036: LD_INT 3
75038: NEG
75039: PUSH
75040: LD_INT 2
75042: NEG
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: PUSH
75048: LD_INT 3
75050: NEG
75051: PUSH
75052: LD_INT 3
75054: NEG
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: PUSH
75060: EMPTY
75061: LIST
75062: LIST
75063: LIST
75064: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
75065: LD_ADDR_VAR 0 23
75069: PUSH
75070: LD_INT 0
75072: PUSH
75073: LD_INT 3
75075: NEG
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: LD_INT 1
75083: NEG
75084: PUSH
75085: LD_INT 4
75087: NEG
75088: PUSH
75089: EMPTY
75090: LIST
75091: LIST
75092: PUSH
75093: LD_INT 1
75095: PUSH
75096: LD_INT 3
75098: NEG
75099: PUSH
75100: EMPTY
75101: LIST
75102: LIST
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: LIST
75108: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
75109: LD_ADDR_VAR 0 24
75113: PUSH
75114: LD_INT 3
75116: PUSH
75117: LD_INT 0
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: PUSH
75124: LD_INT 3
75126: PUSH
75127: LD_INT 1
75129: NEG
75130: PUSH
75131: EMPTY
75132: LIST
75133: LIST
75134: PUSH
75135: LD_INT 4
75137: PUSH
75138: LD_INT 1
75140: PUSH
75141: EMPTY
75142: LIST
75143: LIST
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: LIST
75149: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
75150: LD_ADDR_VAR 0 25
75154: PUSH
75155: LD_INT 3
75157: PUSH
75158: LD_INT 3
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: PUSH
75165: LD_INT 4
75167: PUSH
75168: LD_INT 3
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: PUSH
75175: LD_INT 3
75177: PUSH
75178: LD_INT 4
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PUSH
75185: EMPTY
75186: LIST
75187: LIST
75188: LIST
75189: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
75190: LD_ADDR_VAR 0 26
75194: PUSH
75195: LD_INT 0
75197: PUSH
75198: LD_INT 3
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PUSH
75205: LD_INT 1
75207: PUSH
75208: LD_INT 4
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: PUSH
75215: LD_INT 1
75217: NEG
75218: PUSH
75219: LD_INT 3
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: LIST
75230: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
75231: LD_ADDR_VAR 0 27
75235: PUSH
75236: LD_INT 3
75238: NEG
75239: PUSH
75240: LD_INT 0
75242: PUSH
75243: EMPTY
75244: LIST
75245: LIST
75246: PUSH
75247: LD_INT 3
75249: NEG
75250: PUSH
75251: LD_INT 1
75253: PUSH
75254: EMPTY
75255: LIST
75256: LIST
75257: PUSH
75258: LD_INT 4
75260: NEG
75261: PUSH
75262: LD_INT 1
75264: NEG
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: LIST
75274: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
75275: LD_ADDR_VAR 0 28
75279: PUSH
75280: LD_INT 3
75282: NEG
75283: PUSH
75284: LD_INT 3
75286: NEG
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 3
75294: NEG
75295: PUSH
75296: LD_INT 4
75298: NEG
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: PUSH
75304: LD_INT 4
75306: NEG
75307: PUSH
75308: LD_INT 3
75310: NEG
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: LIST
75320: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
75321: LD_ADDR_VAR 0 29
75325: PUSH
75326: LD_INT 1
75328: NEG
75329: PUSH
75330: LD_INT 3
75332: NEG
75333: PUSH
75334: EMPTY
75335: LIST
75336: LIST
75337: PUSH
75338: LD_INT 0
75340: PUSH
75341: LD_INT 3
75343: NEG
75344: PUSH
75345: EMPTY
75346: LIST
75347: LIST
75348: PUSH
75349: LD_INT 1
75351: PUSH
75352: LD_INT 2
75354: NEG
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: PUSH
75360: LD_INT 1
75362: NEG
75363: PUSH
75364: LD_INT 4
75366: NEG
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: PUSH
75372: LD_INT 0
75374: PUSH
75375: LD_INT 4
75377: NEG
75378: PUSH
75379: EMPTY
75380: LIST
75381: LIST
75382: PUSH
75383: LD_INT 1
75385: PUSH
75386: LD_INT 3
75388: NEG
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: PUSH
75394: LD_INT 1
75396: NEG
75397: PUSH
75398: LD_INT 5
75400: NEG
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: PUSH
75406: LD_INT 0
75408: PUSH
75409: LD_INT 5
75411: NEG
75412: PUSH
75413: EMPTY
75414: LIST
75415: LIST
75416: PUSH
75417: LD_INT 1
75419: PUSH
75420: LD_INT 4
75422: NEG
75423: PUSH
75424: EMPTY
75425: LIST
75426: LIST
75427: PUSH
75428: LD_INT 1
75430: NEG
75431: PUSH
75432: LD_INT 6
75434: NEG
75435: PUSH
75436: EMPTY
75437: LIST
75438: LIST
75439: PUSH
75440: LD_INT 0
75442: PUSH
75443: LD_INT 6
75445: NEG
75446: PUSH
75447: EMPTY
75448: LIST
75449: LIST
75450: PUSH
75451: LD_INT 1
75453: PUSH
75454: LD_INT 5
75456: NEG
75457: PUSH
75458: EMPTY
75459: LIST
75460: LIST
75461: PUSH
75462: EMPTY
75463: LIST
75464: LIST
75465: LIST
75466: LIST
75467: LIST
75468: LIST
75469: LIST
75470: LIST
75471: LIST
75472: LIST
75473: LIST
75474: LIST
75475: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
75476: LD_ADDR_VAR 0 30
75480: PUSH
75481: LD_INT 2
75483: PUSH
75484: LD_INT 1
75486: NEG
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: PUSH
75492: LD_INT 3
75494: PUSH
75495: LD_INT 0
75497: PUSH
75498: EMPTY
75499: LIST
75500: LIST
75501: PUSH
75502: LD_INT 3
75504: PUSH
75505: LD_INT 1
75507: PUSH
75508: EMPTY
75509: LIST
75510: LIST
75511: PUSH
75512: LD_INT 3
75514: PUSH
75515: LD_INT 1
75517: NEG
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: PUSH
75523: LD_INT 4
75525: PUSH
75526: LD_INT 0
75528: PUSH
75529: EMPTY
75530: LIST
75531: LIST
75532: PUSH
75533: LD_INT 4
75535: PUSH
75536: LD_INT 1
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: PUSH
75543: LD_INT 4
75545: PUSH
75546: LD_INT 1
75548: NEG
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: PUSH
75554: LD_INT 5
75556: PUSH
75557: LD_INT 0
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: PUSH
75564: LD_INT 5
75566: PUSH
75567: LD_INT 1
75569: PUSH
75570: EMPTY
75571: LIST
75572: LIST
75573: PUSH
75574: LD_INT 5
75576: PUSH
75577: LD_INT 1
75579: NEG
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: PUSH
75585: LD_INT 6
75587: PUSH
75588: LD_INT 0
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: PUSH
75595: LD_INT 6
75597: PUSH
75598: LD_INT 1
75600: PUSH
75601: EMPTY
75602: LIST
75603: LIST
75604: PUSH
75605: EMPTY
75606: LIST
75607: LIST
75608: LIST
75609: LIST
75610: LIST
75611: LIST
75612: LIST
75613: LIST
75614: LIST
75615: LIST
75616: LIST
75617: LIST
75618: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
75619: LD_ADDR_VAR 0 31
75623: PUSH
75624: LD_INT 3
75626: PUSH
75627: LD_INT 2
75629: PUSH
75630: EMPTY
75631: LIST
75632: LIST
75633: PUSH
75634: LD_INT 3
75636: PUSH
75637: LD_INT 3
75639: PUSH
75640: EMPTY
75641: LIST
75642: LIST
75643: PUSH
75644: LD_INT 2
75646: PUSH
75647: LD_INT 3
75649: PUSH
75650: EMPTY
75651: LIST
75652: LIST
75653: PUSH
75654: LD_INT 4
75656: PUSH
75657: LD_INT 3
75659: PUSH
75660: EMPTY
75661: LIST
75662: LIST
75663: PUSH
75664: LD_INT 4
75666: PUSH
75667: LD_INT 4
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: PUSH
75674: LD_INT 3
75676: PUSH
75677: LD_INT 4
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PUSH
75684: LD_INT 5
75686: PUSH
75687: LD_INT 4
75689: PUSH
75690: EMPTY
75691: LIST
75692: LIST
75693: PUSH
75694: LD_INT 5
75696: PUSH
75697: LD_INT 5
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: PUSH
75704: LD_INT 4
75706: PUSH
75707: LD_INT 5
75709: PUSH
75710: EMPTY
75711: LIST
75712: LIST
75713: PUSH
75714: LD_INT 6
75716: PUSH
75717: LD_INT 5
75719: PUSH
75720: EMPTY
75721: LIST
75722: LIST
75723: PUSH
75724: LD_INT 6
75726: PUSH
75727: LD_INT 6
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: PUSH
75734: LD_INT 5
75736: PUSH
75737: LD_INT 6
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: LIST
75748: LIST
75749: LIST
75750: LIST
75751: LIST
75752: LIST
75753: LIST
75754: LIST
75755: LIST
75756: LIST
75757: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
75758: LD_ADDR_VAR 0 32
75762: PUSH
75763: LD_INT 1
75765: PUSH
75766: LD_INT 3
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: PUSH
75773: LD_INT 0
75775: PUSH
75776: LD_INT 3
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: LD_INT 1
75785: NEG
75786: PUSH
75787: LD_INT 2
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: PUSH
75794: LD_INT 1
75796: PUSH
75797: LD_INT 4
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: PUSH
75804: LD_INT 0
75806: PUSH
75807: LD_INT 4
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: PUSH
75814: LD_INT 1
75816: NEG
75817: PUSH
75818: LD_INT 3
75820: PUSH
75821: EMPTY
75822: LIST
75823: LIST
75824: PUSH
75825: LD_INT 1
75827: PUSH
75828: LD_INT 5
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: PUSH
75835: LD_INT 0
75837: PUSH
75838: LD_INT 5
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: PUSH
75845: LD_INT 1
75847: NEG
75848: PUSH
75849: LD_INT 4
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: PUSH
75856: LD_INT 1
75858: PUSH
75859: LD_INT 6
75861: PUSH
75862: EMPTY
75863: LIST
75864: LIST
75865: PUSH
75866: LD_INT 0
75868: PUSH
75869: LD_INT 6
75871: PUSH
75872: EMPTY
75873: LIST
75874: LIST
75875: PUSH
75876: LD_INT 1
75878: NEG
75879: PUSH
75880: LD_INT 5
75882: PUSH
75883: EMPTY
75884: LIST
75885: LIST
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: LIST
75893: LIST
75894: LIST
75895: LIST
75896: LIST
75897: LIST
75898: LIST
75899: LIST
75900: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
75901: LD_ADDR_VAR 0 33
75905: PUSH
75906: LD_INT 2
75908: NEG
75909: PUSH
75910: LD_INT 1
75912: PUSH
75913: EMPTY
75914: LIST
75915: LIST
75916: PUSH
75917: LD_INT 3
75919: NEG
75920: PUSH
75921: LD_INT 0
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PUSH
75928: LD_INT 3
75930: NEG
75931: PUSH
75932: LD_INT 1
75934: NEG
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: PUSH
75940: LD_INT 3
75942: NEG
75943: PUSH
75944: LD_INT 1
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: PUSH
75951: LD_INT 4
75953: NEG
75954: PUSH
75955: LD_INT 0
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: PUSH
75962: LD_INT 4
75964: NEG
75965: PUSH
75966: LD_INT 1
75968: NEG
75969: PUSH
75970: EMPTY
75971: LIST
75972: LIST
75973: PUSH
75974: LD_INT 4
75976: NEG
75977: PUSH
75978: LD_INT 1
75980: PUSH
75981: EMPTY
75982: LIST
75983: LIST
75984: PUSH
75985: LD_INT 5
75987: NEG
75988: PUSH
75989: LD_INT 0
75991: PUSH
75992: EMPTY
75993: LIST
75994: LIST
75995: PUSH
75996: LD_INT 5
75998: NEG
75999: PUSH
76000: LD_INT 1
76002: NEG
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: PUSH
76008: LD_INT 5
76010: NEG
76011: PUSH
76012: LD_INT 1
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: PUSH
76019: LD_INT 6
76021: NEG
76022: PUSH
76023: LD_INT 0
76025: PUSH
76026: EMPTY
76027: LIST
76028: LIST
76029: PUSH
76030: LD_INT 6
76032: NEG
76033: PUSH
76034: LD_INT 1
76036: NEG
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: LIST
76046: LIST
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
76056: LD_ADDR_VAR 0 34
76060: PUSH
76061: LD_INT 2
76063: NEG
76064: PUSH
76065: LD_INT 3
76067: NEG
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: PUSH
76073: LD_INT 3
76075: NEG
76076: PUSH
76077: LD_INT 2
76079: NEG
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: PUSH
76085: LD_INT 3
76087: NEG
76088: PUSH
76089: LD_INT 3
76091: NEG
76092: PUSH
76093: EMPTY
76094: LIST
76095: LIST
76096: PUSH
76097: LD_INT 3
76099: NEG
76100: PUSH
76101: LD_INT 4
76103: NEG
76104: PUSH
76105: EMPTY
76106: LIST
76107: LIST
76108: PUSH
76109: LD_INT 4
76111: NEG
76112: PUSH
76113: LD_INT 3
76115: NEG
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: PUSH
76121: LD_INT 4
76123: NEG
76124: PUSH
76125: LD_INT 4
76127: NEG
76128: PUSH
76129: EMPTY
76130: LIST
76131: LIST
76132: PUSH
76133: LD_INT 4
76135: NEG
76136: PUSH
76137: LD_INT 5
76139: NEG
76140: PUSH
76141: EMPTY
76142: LIST
76143: LIST
76144: PUSH
76145: LD_INT 5
76147: NEG
76148: PUSH
76149: LD_INT 4
76151: NEG
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: PUSH
76157: LD_INT 5
76159: NEG
76160: PUSH
76161: LD_INT 5
76163: NEG
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: PUSH
76169: LD_INT 5
76171: NEG
76172: PUSH
76173: LD_INT 6
76175: NEG
76176: PUSH
76177: EMPTY
76178: LIST
76179: LIST
76180: PUSH
76181: LD_INT 6
76183: NEG
76184: PUSH
76185: LD_INT 5
76187: NEG
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: PUSH
76193: LD_INT 6
76195: NEG
76196: PUSH
76197: LD_INT 6
76199: NEG
76200: PUSH
76201: EMPTY
76202: LIST
76203: LIST
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: LIST
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
76219: LD_ADDR_VAR 0 41
76223: PUSH
76224: LD_INT 0
76226: PUSH
76227: LD_INT 2
76229: NEG
76230: PUSH
76231: EMPTY
76232: LIST
76233: LIST
76234: PUSH
76235: LD_INT 1
76237: NEG
76238: PUSH
76239: LD_INT 3
76241: NEG
76242: PUSH
76243: EMPTY
76244: LIST
76245: LIST
76246: PUSH
76247: LD_INT 1
76249: PUSH
76250: LD_INT 2
76252: NEG
76253: PUSH
76254: EMPTY
76255: LIST
76256: LIST
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: LIST
76262: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
76263: LD_ADDR_VAR 0 42
76267: PUSH
76268: LD_INT 2
76270: PUSH
76271: LD_INT 0
76273: PUSH
76274: EMPTY
76275: LIST
76276: LIST
76277: PUSH
76278: LD_INT 2
76280: PUSH
76281: LD_INT 1
76283: NEG
76284: PUSH
76285: EMPTY
76286: LIST
76287: LIST
76288: PUSH
76289: LD_INT 3
76291: PUSH
76292: LD_INT 1
76294: PUSH
76295: EMPTY
76296: LIST
76297: LIST
76298: PUSH
76299: EMPTY
76300: LIST
76301: LIST
76302: LIST
76303: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
76304: LD_ADDR_VAR 0 43
76308: PUSH
76309: LD_INT 2
76311: PUSH
76312: LD_INT 2
76314: PUSH
76315: EMPTY
76316: LIST
76317: LIST
76318: PUSH
76319: LD_INT 3
76321: PUSH
76322: LD_INT 2
76324: PUSH
76325: EMPTY
76326: LIST
76327: LIST
76328: PUSH
76329: LD_INT 2
76331: PUSH
76332: LD_INT 3
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: PUSH
76339: EMPTY
76340: LIST
76341: LIST
76342: LIST
76343: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
76344: LD_ADDR_VAR 0 44
76348: PUSH
76349: LD_INT 0
76351: PUSH
76352: LD_INT 2
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: PUSH
76359: LD_INT 1
76361: PUSH
76362: LD_INT 3
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: PUSH
76369: LD_INT 1
76371: NEG
76372: PUSH
76373: LD_INT 2
76375: PUSH
76376: EMPTY
76377: LIST
76378: LIST
76379: PUSH
76380: EMPTY
76381: LIST
76382: LIST
76383: LIST
76384: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
76385: LD_ADDR_VAR 0 45
76389: PUSH
76390: LD_INT 2
76392: NEG
76393: PUSH
76394: LD_INT 0
76396: PUSH
76397: EMPTY
76398: LIST
76399: LIST
76400: PUSH
76401: LD_INT 2
76403: NEG
76404: PUSH
76405: LD_INT 1
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: PUSH
76412: LD_INT 3
76414: NEG
76415: PUSH
76416: LD_INT 1
76418: NEG
76419: PUSH
76420: EMPTY
76421: LIST
76422: LIST
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: LIST
76428: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
76429: LD_ADDR_VAR 0 46
76433: PUSH
76434: LD_INT 2
76436: NEG
76437: PUSH
76438: LD_INT 2
76440: NEG
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: PUSH
76446: LD_INT 2
76448: NEG
76449: PUSH
76450: LD_INT 3
76452: NEG
76453: PUSH
76454: EMPTY
76455: LIST
76456: LIST
76457: PUSH
76458: LD_INT 3
76460: NEG
76461: PUSH
76462: LD_INT 2
76464: NEG
76465: PUSH
76466: EMPTY
76467: LIST
76468: LIST
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: LIST
76474: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
76475: LD_ADDR_VAR 0 47
76479: PUSH
76480: LD_INT 2
76482: NEG
76483: PUSH
76484: LD_INT 3
76486: NEG
76487: PUSH
76488: EMPTY
76489: LIST
76490: LIST
76491: PUSH
76492: LD_INT 1
76494: NEG
76495: PUSH
76496: LD_INT 3
76498: NEG
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PUSH
76504: EMPTY
76505: LIST
76506: LIST
76507: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
76508: LD_ADDR_VAR 0 48
76512: PUSH
76513: LD_INT 1
76515: PUSH
76516: LD_INT 2
76518: NEG
76519: PUSH
76520: EMPTY
76521: LIST
76522: LIST
76523: PUSH
76524: LD_INT 2
76526: PUSH
76527: LD_INT 1
76529: NEG
76530: PUSH
76531: EMPTY
76532: LIST
76533: LIST
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
76539: LD_ADDR_VAR 0 49
76543: PUSH
76544: LD_INT 3
76546: PUSH
76547: LD_INT 1
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: PUSH
76554: LD_INT 3
76556: PUSH
76557: LD_INT 2
76559: PUSH
76560: EMPTY
76561: LIST
76562: LIST
76563: PUSH
76564: EMPTY
76565: LIST
76566: LIST
76567: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
76568: LD_ADDR_VAR 0 50
76572: PUSH
76573: LD_INT 2
76575: PUSH
76576: LD_INT 3
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: PUSH
76583: LD_INT 1
76585: PUSH
76586: LD_INT 3
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: PUSH
76593: EMPTY
76594: LIST
76595: LIST
76596: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
76597: LD_ADDR_VAR 0 51
76601: PUSH
76602: LD_INT 1
76604: NEG
76605: PUSH
76606: LD_INT 2
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PUSH
76613: LD_INT 2
76615: NEG
76616: PUSH
76617: LD_INT 1
76619: PUSH
76620: EMPTY
76621: LIST
76622: LIST
76623: PUSH
76624: EMPTY
76625: LIST
76626: LIST
76627: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
76628: LD_ADDR_VAR 0 52
76632: PUSH
76633: LD_INT 3
76635: NEG
76636: PUSH
76637: LD_INT 1
76639: NEG
76640: PUSH
76641: EMPTY
76642: LIST
76643: LIST
76644: PUSH
76645: LD_INT 3
76647: NEG
76648: PUSH
76649: LD_INT 2
76651: NEG
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76661: LD_ADDR_VAR 0 53
76665: PUSH
76666: LD_INT 1
76668: NEG
76669: PUSH
76670: LD_INT 3
76672: NEG
76673: PUSH
76674: EMPTY
76675: LIST
76676: LIST
76677: PUSH
76678: LD_INT 0
76680: PUSH
76681: LD_INT 3
76683: NEG
76684: PUSH
76685: EMPTY
76686: LIST
76687: LIST
76688: PUSH
76689: LD_INT 1
76691: PUSH
76692: LD_INT 2
76694: NEG
76695: PUSH
76696: EMPTY
76697: LIST
76698: LIST
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: LIST
76704: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76705: LD_ADDR_VAR 0 54
76709: PUSH
76710: LD_INT 2
76712: PUSH
76713: LD_INT 1
76715: NEG
76716: PUSH
76717: EMPTY
76718: LIST
76719: LIST
76720: PUSH
76721: LD_INT 3
76723: PUSH
76724: LD_INT 0
76726: PUSH
76727: EMPTY
76728: LIST
76729: LIST
76730: PUSH
76731: LD_INT 3
76733: PUSH
76734: LD_INT 1
76736: PUSH
76737: EMPTY
76738: LIST
76739: LIST
76740: PUSH
76741: EMPTY
76742: LIST
76743: LIST
76744: LIST
76745: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76746: LD_ADDR_VAR 0 55
76750: PUSH
76751: LD_INT 3
76753: PUSH
76754: LD_INT 2
76756: PUSH
76757: EMPTY
76758: LIST
76759: LIST
76760: PUSH
76761: LD_INT 3
76763: PUSH
76764: LD_INT 3
76766: PUSH
76767: EMPTY
76768: LIST
76769: LIST
76770: PUSH
76771: LD_INT 2
76773: PUSH
76774: LD_INT 3
76776: PUSH
76777: EMPTY
76778: LIST
76779: LIST
76780: PUSH
76781: EMPTY
76782: LIST
76783: LIST
76784: LIST
76785: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76786: LD_ADDR_VAR 0 56
76790: PUSH
76791: LD_INT 1
76793: PUSH
76794: LD_INT 3
76796: PUSH
76797: EMPTY
76798: LIST
76799: LIST
76800: PUSH
76801: LD_INT 0
76803: PUSH
76804: LD_INT 3
76806: PUSH
76807: EMPTY
76808: LIST
76809: LIST
76810: PUSH
76811: LD_INT 1
76813: NEG
76814: PUSH
76815: LD_INT 2
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: PUSH
76822: EMPTY
76823: LIST
76824: LIST
76825: LIST
76826: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76827: LD_ADDR_VAR 0 57
76831: PUSH
76832: LD_INT 2
76834: NEG
76835: PUSH
76836: LD_INT 1
76838: PUSH
76839: EMPTY
76840: LIST
76841: LIST
76842: PUSH
76843: LD_INT 3
76845: NEG
76846: PUSH
76847: LD_INT 0
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: PUSH
76854: LD_INT 3
76856: NEG
76857: PUSH
76858: LD_INT 1
76860: NEG
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: LIST
76870: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76871: LD_ADDR_VAR 0 58
76875: PUSH
76876: LD_INT 2
76878: NEG
76879: PUSH
76880: LD_INT 3
76882: NEG
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: PUSH
76888: LD_INT 3
76890: NEG
76891: PUSH
76892: LD_INT 2
76894: NEG
76895: PUSH
76896: EMPTY
76897: LIST
76898: LIST
76899: PUSH
76900: LD_INT 3
76902: NEG
76903: PUSH
76904: LD_INT 3
76906: NEG
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: PUSH
76912: EMPTY
76913: LIST
76914: LIST
76915: LIST
76916: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
76917: LD_ADDR_VAR 0 59
76921: PUSH
76922: LD_INT 1
76924: NEG
76925: PUSH
76926: LD_INT 2
76928: NEG
76929: PUSH
76930: EMPTY
76931: LIST
76932: LIST
76933: PUSH
76934: LD_INT 0
76936: PUSH
76937: LD_INT 2
76939: NEG
76940: PUSH
76941: EMPTY
76942: LIST
76943: LIST
76944: PUSH
76945: LD_INT 1
76947: PUSH
76948: LD_INT 1
76950: NEG
76951: PUSH
76952: EMPTY
76953: LIST
76954: LIST
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: LIST
76960: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
76961: LD_ADDR_VAR 0 60
76965: PUSH
76966: LD_INT 1
76968: PUSH
76969: LD_INT 1
76971: NEG
76972: PUSH
76973: EMPTY
76974: LIST
76975: LIST
76976: PUSH
76977: LD_INT 2
76979: PUSH
76980: LD_INT 0
76982: PUSH
76983: EMPTY
76984: LIST
76985: LIST
76986: PUSH
76987: LD_INT 2
76989: PUSH
76990: LD_INT 1
76992: PUSH
76993: EMPTY
76994: LIST
76995: LIST
76996: PUSH
76997: EMPTY
76998: LIST
76999: LIST
77000: LIST
77001: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
77002: LD_ADDR_VAR 0 61
77006: PUSH
77007: LD_INT 2
77009: PUSH
77010: LD_INT 1
77012: PUSH
77013: EMPTY
77014: LIST
77015: LIST
77016: PUSH
77017: LD_INT 2
77019: PUSH
77020: LD_INT 2
77022: PUSH
77023: EMPTY
77024: LIST
77025: LIST
77026: PUSH
77027: LD_INT 1
77029: PUSH
77030: LD_INT 2
77032: PUSH
77033: EMPTY
77034: LIST
77035: LIST
77036: PUSH
77037: EMPTY
77038: LIST
77039: LIST
77040: LIST
77041: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
77042: LD_ADDR_VAR 0 62
77046: PUSH
77047: LD_INT 1
77049: PUSH
77050: LD_INT 2
77052: PUSH
77053: EMPTY
77054: LIST
77055: LIST
77056: PUSH
77057: LD_INT 0
77059: PUSH
77060: LD_INT 2
77062: PUSH
77063: EMPTY
77064: LIST
77065: LIST
77066: PUSH
77067: LD_INT 1
77069: NEG
77070: PUSH
77071: LD_INT 1
77073: PUSH
77074: EMPTY
77075: LIST
77076: LIST
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: LIST
77082: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
77083: LD_ADDR_VAR 0 63
77087: PUSH
77088: LD_INT 1
77090: NEG
77091: PUSH
77092: LD_INT 1
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: PUSH
77099: LD_INT 2
77101: NEG
77102: PUSH
77103: LD_INT 0
77105: PUSH
77106: EMPTY
77107: LIST
77108: LIST
77109: PUSH
77110: LD_INT 2
77112: NEG
77113: PUSH
77114: LD_INT 1
77116: NEG
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: PUSH
77122: EMPTY
77123: LIST
77124: LIST
77125: LIST
77126: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77127: LD_ADDR_VAR 0 64
77131: PUSH
77132: LD_INT 1
77134: NEG
77135: PUSH
77136: LD_INT 2
77138: NEG
77139: PUSH
77140: EMPTY
77141: LIST
77142: LIST
77143: PUSH
77144: LD_INT 2
77146: NEG
77147: PUSH
77148: LD_INT 1
77150: NEG
77151: PUSH
77152: EMPTY
77153: LIST
77154: LIST
77155: PUSH
77156: LD_INT 2
77158: NEG
77159: PUSH
77160: LD_INT 2
77162: NEG
77163: PUSH
77164: EMPTY
77165: LIST
77166: LIST
77167: PUSH
77168: EMPTY
77169: LIST
77170: LIST
77171: LIST
77172: ST_TO_ADDR
// end ; 2 :
77173: GO 80439
77175: LD_INT 2
77177: DOUBLE
77178: EQUAL
77179: IFTRUE 77183
77181: GO 80438
77183: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
77184: LD_ADDR_VAR 0 29
77188: PUSH
77189: LD_INT 4
77191: PUSH
77192: LD_INT 0
77194: PUSH
77195: EMPTY
77196: LIST
77197: LIST
77198: PUSH
77199: LD_INT 4
77201: PUSH
77202: LD_INT 1
77204: NEG
77205: PUSH
77206: EMPTY
77207: LIST
77208: LIST
77209: PUSH
77210: LD_INT 5
77212: PUSH
77213: LD_INT 0
77215: PUSH
77216: EMPTY
77217: LIST
77218: LIST
77219: PUSH
77220: LD_INT 5
77222: PUSH
77223: LD_INT 1
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: PUSH
77230: LD_INT 4
77232: PUSH
77233: LD_INT 1
77235: PUSH
77236: EMPTY
77237: LIST
77238: LIST
77239: PUSH
77240: LD_INT 3
77242: PUSH
77243: LD_INT 0
77245: PUSH
77246: EMPTY
77247: LIST
77248: LIST
77249: PUSH
77250: LD_INT 3
77252: PUSH
77253: LD_INT 1
77255: NEG
77256: PUSH
77257: EMPTY
77258: LIST
77259: LIST
77260: PUSH
77261: LD_INT 3
77263: PUSH
77264: LD_INT 2
77266: NEG
77267: PUSH
77268: EMPTY
77269: LIST
77270: LIST
77271: PUSH
77272: LD_INT 5
77274: PUSH
77275: LD_INT 2
77277: PUSH
77278: EMPTY
77279: LIST
77280: LIST
77281: PUSH
77282: LD_INT 3
77284: PUSH
77285: LD_INT 3
77287: PUSH
77288: EMPTY
77289: LIST
77290: LIST
77291: PUSH
77292: LD_INT 3
77294: PUSH
77295: LD_INT 2
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: PUSH
77302: LD_INT 4
77304: PUSH
77305: LD_INT 3
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: PUSH
77312: LD_INT 4
77314: PUSH
77315: LD_INT 4
77317: PUSH
77318: EMPTY
77319: LIST
77320: LIST
77321: PUSH
77322: LD_INT 3
77324: PUSH
77325: LD_INT 4
77327: PUSH
77328: EMPTY
77329: LIST
77330: LIST
77331: PUSH
77332: LD_INT 2
77334: PUSH
77335: LD_INT 3
77337: PUSH
77338: EMPTY
77339: LIST
77340: LIST
77341: PUSH
77342: LD_INT 2
77344: PUSH
77345: LD_INT 2
77347: PUSH
77348: EMPTY
77349: LIST
77350: LIST
77351: PUSH
77352: LD_INT 4
77354: PUSH
77355: LD_INT 2
77357: PUSH
77358: EMPTY
77359: LIST
77360: LIST
77361: PUSH
77362: LD_INT 2
77364: PUSH
77365: LD_INT 4
77367: PUSH
77368: EMPTY
77369: LIST
77370: LIST
77371: PUSH
77372: LD_INT 0
77374: PUSH
77375: LD_INT 4
77377: PUSH
77378: EMPTY
77379: LIST
77380: LIST
77381: PUSH
77382: LD_INT 0
77384: PUSH
77385: LD_INT 3
77387: PUSH
77388: EMPTY
77389: LIST
77390: LIST
77391: PUSH
77392: LD_INT 1
77394: PUSH
77395: LD_INT 4
77397: PUSH
77398: EMPTY
77399: LIST
77400: LIST
77401: PUSH
77402: LD_INT 1
77404: PUSH
77405: LD_INT 5
77407: PUSH
77408: EMPTY
77409: LIST
77410: LIST
77411: PUSH
77412: LD_INT 0
77414: PUSH
77415: LD_INT 5
77417: PUSH
77418: EMPTY
77419: LIST
77420: LIST
77421: PUSH
77422: LD_INT 1
77424: NEG
77425: PUSH
77426: LD_INT 4
77428: PUSH
77429: EMPTY
77430: LIST
77431: LIST
77432: PUSH
77433: LD_INT 1
77435: NEG
77436: PUSH
77437: LD_INT 3
77439: PUSH
77440: EMPTY
77441: LIST
77442: LIST
77443: PUSH
77444: LD_INT 2
77446: PUSH
77447: LD_INT 5
77449: PUSH
77450: EMPTY
77451: LIST
77452: LIST
77453: PUSH
77454: LD_INT 2
77456: NEG
77457: PUSH
77458: LD_INT 3
77460: PUSH
77461: EMPTY
77462: LIST
77463: LIST
77464: PUSH
77465: LD_INT 3
77467: NEG
77468: PUSH
77469: LD_INT 0
77471: PUSH
77472: EMPTY
77473: LIST
77474: LIST
77475: PUSH
77476: LD_INT 3
77478: NEG
77479: PUSH
77480: LD_INT 1
77482: NEG
77483: PUSH
77484: EMPTY
77485: LIST
77486: LIST
77487: PUSH
77488: LD_INT 2
77490: NEG
77491: PUSH
77492: LD_INT 0
77494: PUSH
77495: EMPTY
77496: LIST
77497: LIST
77498: PUSH
77499: LD_INT 2
77501: NEG
77502: PUSH
77503: LD_INT 1
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: PUSH
77510: LD_INT 3
77512: NEG
77513: PUSH
77514: LD_INT 1
77516: PUSH
77517: EMPTY
77518: LIST
77519: LIST
77520: PUSH
77521: LD_INT 4
77523: NEG
77524: PUSH
77525: LD_INT 0
77527: PUSH
77528: EMPTY
77529: LIST
77530: LIST
77531: PUSH
77532: LD_INT 4
77534: NEG
77535: PUSH
77536: LD_INT 1
77538: NEG
77539: PUSH
77540: EMPTY
77541: LIST
77542: LIST
77543: PUSH
77544: LD_INT 4
77546: NEG
77547: PUSH
77548: LD_INT 2
77550: NEG
77551: PUSH
77552: EMPTY
77553: LIST
77554: LIST
77555: PUSH
77556: LD_INT 2
77558: NEG
77559: PUSH
77560: LD_INT 2
77562: PUSH
77563: EMPTY
77564: LIST
77565: LIST
77566: PUSH
77567: LD_INT 4
77569: NEG
77570: PUSH
77571: LD_INT 4
77573: NEG
77574: PUSH
77575: EMPTY
77576: LIST
77577: LIST
77578: PUSH
77579: LD_INT 4
77581: NEG
77582: PUSH
77583: LD_INT 5
77585: NEG
77586: PUSH
77587: EMPTY
77588: LIST
77589: LIST
77590: PUSH
77591: LD_INT 3
77593: NEG
77594: PUSH
77595: LD_INT 4
77597: NEG
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: PUSH
77603: LD_INT 3
77605: NEG
77606: PUSH
77607: LD_INT 3
77609: NEG
77610: PUSH
77611: EMPTY
77612: LIST
77613: LIST
77614: PUSH
77615: LD_INT 4
77617: NEG
77618: PUSH
77619: LD_INT 3
77621: NEG
77622: PUSH
77623: EMPTY
77624: LIST
77625: LIST
77626: PUSH
77627: LD_INT 5
77629: NEG
77630: PUSH
77631: LD_INT 4
77633: NEG
77634: PUSH
77635: EMPTY
77636: LIST
77637: LIST
77638: PUSH
77639: LD_INT 5
77641: NEG
77642: PUSH
77643: LD_INT 5
77645: NEG
77646: PUSH
77647: EMPTY
77648: LIST
77649: LIST
77650: PUSH
77651: LD_INT 3
77653: NEG
77654: PUSH
77655: LD_INT 5
77657: NEG
77658: PUSH
77659: EMPTY
77660: LIST
77661: LIST
77662: PUSH
77663: LD_INT 5
77665: NEG
77666: PUSH
77667: LD_INT 3
77669: NEG
77670: PUSH
77671: EMPTY
77672: LIST
77673: LIST
77674: PUSH
77675: EMPTY
77676: LIST
77677: LIST
77678: LIST
77679: LIST
77680: LIST
77681: LIST
77682: LIST
77683: LIST
77684: LIST
77685: LIST
77686: LIST
77687: LIST
77688: LIST
77689: LIST
77690: LIST
77691: LIST
77692: LIST
77693: LIST
77694: LIST
77695: LIST
77696: LIST
77697: LIST
77698: LIST
77699: LIST
77700: LIST
77701: LIST
77702: LIST
77703: LIST
77704: LIST
77705: LIST
77706: LIST
77707: LIST
77708: LIST
77709: LIST
77710: LIST
77711: LIST
77712: LIST
77713: LIST
77714: LIST
77715: LIST
77716: LIST
77717: LIST
77718: LIST
77719: LIST
77720: LIST
77721: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
77722: LD_ADDR_VAR 0 30
77726: PUSH
77727: LD_INT 4
77729: PUSH
77730: LD_INT 4
77732: PUSH
77733: EMPTY
77734: LIST
77735: LIST
77736: PUSH
77737: LD_INT 4
77739: PUSH
77740: LD_INT 3
77742: PUSH
77743: EMPTY
77744: LIST
77745: LIST
77746: PUSH
77747: LD_INT 5
77749: PUSH
77750: LD_INT 4
77752: PUSH
77753: EMPTY
77754: LIST
77755: LIST
77756: PUSH
77757: LD_INT 5
77759: PUSH
77760: LD_INT 5
77762: PUSH
77763: EMPTY
77764: LIST
77765: LIST
77766: PUSH
77767: LD_INT 4
77769: PUSH
77770: LD_INT 5
77772: PUSH
77773: EMPTY
77774: LIST
77775: LIST
77776: PUSH
77777: LD_INT 3
77779: PUSH
77780: LD_INT 4
77782: PUSH
77783: EMPTY
77784: LIST
77785: LIST
77786: PUSH
77787: LD_INT 3
77789: PUSH
77790: LD_INT 3
77792: PUSH
77793: EMPTY
77794: LIST
77795: LIST
77796: PUSH
77797: LD_INT 5
77799: PUSH
77800: LD_INT 3
77802: PUSH
77803: EMPTY
77804: LIST
77805: LIST
77806: PUSH
77807: LD_INT 3
77809: PUSH
77810: LD_INT 5
77812: PUSH
77813: EMPTY
77814: LIST
77815: LIST
77816: PUSH
77817: LD_INT 0
77819: PUSH
77820: LD_INT 3
77822: PUSH
77823: EMPTY
77824: LIST
77825: LIST
77826: PUSH
77827: LD_INT 0
77829: PUSH
77830: LD_INT 2
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PUSH
77837: LD_INT 1
77839: PUSH
77840: LD_INT 3
77842: PUSH
77843: EMPTY
77844: LIST
77845: LIST
77846: PUSH
77847: LD_INT 1
77849: PUSH
77850: LD_INT 4
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: PUSH
77857: LD_INT 0
77859: PUSH
77860: LD_INT 4
77862: PUSH
77863: EMPTY
77864: LIST
77865: LIST
77866: PUSH
77867: LD_INT 1
77869: NEG
77870: PUSH
77871: LD_INT 3
77873: PUSH
77874: EMPTY
77875: LIST
77876: LIST
77877: PUSH
77878: LD_INT 1
77880: NEG
77881: PUSH
77882: LD_INT 2
77884: PUSH
77885: EMPTY
77886: LIST
77887: LIST
77888: PUSH
77889: LD_INT 2
77891: PUSH
77892: LD_INT 4
77894: PUSH
77895: EMPTY
77896: LIST
77897: LIST
77898: PUSH
77899: LD_INT 2
77901: NEG
77902: PUSH
77903: LD_INT 2
77905: PUSH
77906: EMPTY
77907: LIST
77908: LIST
77909: PUSH
77910: LD_INT 4
77912: NEG
77913: PUSH
77914: LD_INT 0
77916: PUSH
77917: EMPTY
77918: LIST
77919: LIST
77920: PUSH
77921: LD_INT 4
77923: NEG
77924: PUSH
77925: LD_INT 1
77927: NEG
77928: PUSH
77929: EMPTY
77930: LIST
77931: LIST
77932: PUSH
77933: LD_INT 3
77935: NEG
77936: PUSH
77937: LD_INT 0
77939: PUSH
77940: EMPTY
77941: LIST
77942: LIST
77943: PUSH
77944: LD_INT 3
77946: NEG
77947: PUSH
77948: LD_INT 1
77950: PUSH
77951: EMPTY
77952: LIST
77953: LIST
77954: PUSH
77955: LD_INT 4
77957: NEG
77958: PUSH
77959: LD_INT 1
77961: PUSH
77962: EMPTY
77963: LIST
77964: LIST
77965: PUSH
77966: LD_INT 5
77968: NEG
77969: PUSH
77970: LD_INT 0
77972: PUSH
77973: EMPTY
77974: LIST
77975: LIST
77976: PUSH
77977: LD_INT 5
77979: NEG
77980: PUSH
77981: LD_INT 1
77983: NEG
77984: PUSH
77985: EMPTY
77986: LIST
77987: LIST
77988: PUSH
77989: LD_INT 5
77991: NEG
77992: PUSH
77993: LD_INT 2
77995: NEG
77996: PUSH
77997: EMPTY
77998: LIST
77999: LIST
78000: PUSH
78001: LD_INT 3
78003: NEG
78004: PUSH
78005: LD_INT 2
78007: PUSH
78008: EMPTY
78009: LIST
78010: LIST
78011: PUSH
78012: LD_INT 3
78014: NEG
78015: PUSH
78016: LD_INT 3
78018: NEG
78019: PUSH
78020: EMPTY
78021: LIST
78022: LIST
78023: PUSH
78024: LD_INT 3
78026: NEG
78027: PUSH
78028: LD_INT 4
78030: NEG
78031: PUSH
78032: EMPTY
78033: LIST
78034: LIST
78035: PUSH
78036: LD_INT 2
78038: NEG
78039: PUSH
78040: LD_INT 3
78042: NEG
78043: PUSH
78044: EMPTY
78045: LIST
78046: LIST
78047: PUSH
78048: LD_INT 2
78050: NEG
78051: PUSH
78052: LD_INT 2
78054: NEG
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: PUSH
78060: LD_INT 3
78062: NEG
78063: PUSH
78064: LD_INT 2
78066: NEG
78067: PUSH
78068: EMPTY
78069: LIST
78070: LIST
78071: PUSH
78072: LD_INT 4
78074: NEG
78075: PUSH
78076: LD_INT 3
78078: NEG
78079: PUSH
78080: EMPTY
78081: LIST
78082: LIST
78083: PUSH
78084: LD_INT 4
78086: NEG
78087: PUSH
78088: LD_INT 4
78090: NEG
78091: PUSH
78092: EMPTY
78093: LIST
78094: LIST
78095: PUSH
78096: LD_INT 2
78098: NEG
78099: PUSH
78100: LD_INT 4
78102: NEG
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PUSH
78108: LD_INT 4
78110: NEG
78111: PUSH
78112: LD_INT 2
78114: NEG
78115: PUSH
78116: EMPTY
78117: LIST
78118: LIST
78119: PUSH
78120: LD_INT 0
78122: PUSH
78123: LD_INT 4
78125: NEG
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: PUSH
78131: LD_INT 0
78133: PUSH
78134: LD_INT 5
78136: NEG
78137: PUSH
78138: EMPTY
78139: LIST
78140: LIST
78141: PUSH
78142: LD_INT 1
78144: PUSH
78145: LD_INT 4
78147: NEG
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: PUSH
78153: LD_INT 1
78155: PUSH
78156: LD_INT 3
78158: NEG
78159: PUSH
78160: EMPTY
78161: LIST
78162: LIST
78163: PUSH
78164: LD_INT 0
78166: PUSH
78167: LD_INT 3
78169: NEG
78170: PUSH
78171: EMPTY
78172: LIST
78173: LIST
78174: PUSH
78175: LD_INT 1
78177: NEG
78178: PUSH
78179: LD_INT 4
78181: NEG
78182: PUSH
78183: EMPTY
78184: LIST
78185: LIST
78186: PUSH
78187: LD_INT 1
78189: NEG
78190: PUSH
78191: LD_INT 5
78193: NEG
78194: PUSH
78195: EMPTY
78196: LIST
78197: LIST
78198: PUSH
78199: LD_INT 2
78201: PUSH
78202: LD_INT 3
78204: NEG
78205: PUSH
78206: EMPTY
78207: LIST
78208: LIST
78209: PUSH
78210: LD_INT 2
78212: NEG
78213: PUSH
78214: LD_INT 5
78216: NEG
78217: PUSH
78218: EMPTY
78219: LIST
78220: LIST
78221: PUSH
78222: EMPTY
78223: LIST
78224: LIST
78225: LIST
78226: LIST
78227: LIST
78228: LIST
78229: LIST
78230: LIST
78231: LIST
78232: LIST
78233: LIST
78234: LIST
78235: LIST
78236: LIST
78237: LIST
78238: LIST
78239: LIST
78240: LIST
78241: LIST
78242: LIST
78243: LIST
78244: LIST
78245: LIST
78246: LIST
78247: LIST
78248: LIST
78249: LIST
78250: LIST
78251: LIST
78252: LIST
78253: LIST
78254: LIST
78255: LIST
78256: LIST
78257: LIST
78258: LIST
78259: LIST
78260: LIST
78261: LIST
78262: LIST
78263: LIST
78264: LIST
78265: LIST
78266: LIST
78267: LIST
78268: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
78269: LD_ADDR_VAR 0 31
78273: PUSH
78274: LD_INT 0
78276: PUSH
78277: LD_INT 4
78279: PUSH
78280: EMPTY
78281: LIST
78282: LIST
78283: PUSH
78284: LD_INT 0
78286: PUSH
78287: LD_INT 3
78289: PUSH
78290: EMPTY
78291: LIST
78292: LIST
78293: PUSH
78294: LD_INT 1
78296: PUSH
78297: LD_INT 4
78299: PUSH
78300: EMPTY
78301: LIST
78302: LIST
78303: PUSH
78304: LD_INT 1
78306: PUSH
78307: LD_INT 5
78309: PUSH
78310: EMPTY
78311: LIST
78312: LIST
78313: PUSH
78314: LD_INT 0
78316: PUSH
78317: LD_INT 5
78319: PUSH
78320: EMPTY
78321: LIST
78322: LIST
78323: PUSH
78324: LD_INT 1
78326: NEG
78327: PUSH
78328: LD_INT 4
78330: PUSH
78331: EMPTY
78332: LIST
78333: LIST
78334: PUSH
78335: LD_INT 1
78337: NEG
78338: PUSH
78339: LD_INT 3
78341: PUSH
78342: EMPTY
78343: LIST
78344: LIST
78345: PUSH
78346: LD_INT 2
78348: PUSH
78349: LD_INT 5
78351: PUSH
78352: EMPTY
78353: LIST
78354: LIST
78355: PUSH
78356: LD_INT 2
78358: NEG
78359: PUSH
78360: LD_INT 3
78362: PUSH
78363: EMPTY
78364: LIST
78365: LIST
78366: PUSH
78367: LD_INT 3
78369: NEG
78370: PUSH
78371: LD_INT 0
78373: PUSH
78374: EMPTY
78375: LIST
78376: LIST
78377: PUSH
78378: LD_INT 3
78380: NEG
78381: PUSH
78382: LD_INT 1
78384: NEG
78385: PUSH
78386: EMPTY
78387: LIST
78388: LIST
78389: PUSH
78390: LD_INT 2
78392: NEG
78393: PUSH
78394: LD_INT 0
78396: PUSH
78397: EMPTY
78398: LIST
78399: LIST
78400: PUSH
78401: LD_INT 2
78403: NEG
78404: PUSH
78405: LD_INT 1
78407: PUSH
78408: EMPTY
78409: LIST
78410: LIST
78411: PUSH
78412: LD_INT 3
78414: NEG
78415: PUSH
78416: LD_INT 1
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: PUSH
78423: LD_INT 4
78425: NEG
78426: PUSH
78427: LD_INT 0
78429: PUSH
78430: EMPTY
78431: LIST
78432: LIST
78433: PUSH
78434: LD_INT 4
78436: NEG
78437: PUSH
78438: LD_INT 1
78440: NEG
78441: PUSH
78442: EMPTY
78443: LIST
78444: LIST
78445: PUSH
78446: LD_INT 4
78448: NEG
78449: PUSH
78450: LD_INT 2
78452: NEG
78453: PUSH
78454: EMPTY
78455: LIST
78456: LIST
78457: PUSH
78458: LD_INT 2
78460: NEG
78461: PUSH
78462: LD_INT 2
78464: PUSH
78465: EMPTY
78466: LIST
78467: LIST
78468: PUSH
78469: LD_INT 4
78471: NEG
78472: PUSH
78473: LD_INT 4
78475: NEG
78476: PUSH
78477: EMPTY
78478: LIST
78479: LIST
78480: PUSH
78481: LD_INT 4
78483: NEG
78484: PUSH
78485: LD_INT 5
78487: NEG
78488: PUSH
78489: EMPTY
78490: LIST
78491: LIST
78492: PUSH
78493: LD_INT 3
78495: NEG
78496: PUSH
78497: LD_INT 4
78499: NEG
78500: PUSH
78501: EMPTY
78502: LIST
78503: LIST
78504: PUSH
78505: LD_INT 3
78507: NEG
78508: PUSH
78509: LD_INT 3
78511: NEG
78512: PUSH
78513: EMPTY
78514: LIST
78515: LIST
78516: PUSH
78517: LD_INT 4
78519: NEG
78520: PUSH
78521: LD_INT 3
78523: NEG
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: PUSH
78529: LD_INT 5
78531: NEG
78532: PUSH
78533: LD_INT 4
78535: NEG
78536: PUSH
78537: EMPTY
78538: LIST
78539: LIST
78540: PUSH
78541: LD_INT 5
78543: NEG
78544: PUSH
78545: LD_INT 5
78547: NEG
78548: PUSH
78549: EMPTY
78550: LIST
78551: LIST
78552: PUSH
78553: LD_INT 3
78555: NEG
78556: PUSH
78557: LD_INT 5
78559: NEG
78560: PUSH
78561: EMPTY
78562: LIST
78563: LIST
78564: PUSH
78565: LD_INT 5
78567: NEG
78568: PUSH
78569: LD_INT 3
78571: NEG
78572: PUSH
78573: EMPTY
78574: LIST
78575: LIST
78576: PUSH
78577: LD_INT 0
78579: PUSH
78580: LD_INT 3
78582: NEG
78583: PUSH
78584: EMPTY
78585: LIST
78586: LIST
78587: PUSH
78588: LD_INT 0
78590: PUSH
78591: LD_INT 4
78593: NEG
78594: PUSH
78595: EMPTY
78596: LIST
78597: LIST
78598: PUSH
78599: LD_INT 1
78601: PUSH
78602: LD_INT 3
78604: NEG
78605: PUSH
78606: EMPTY
78607: LIST
78608: LIST
78609: PUSH
78610: LD_INT 1
78612: PUSH
78613: LD_INT 2
78615: NEG
78616: PUSH
78617: EMPTY
78618: LIST
78619: LIST
78620: PUSH
78621: LD_INT 0
78623: PUSH
78624: LD_INT 2
78626: NEG
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: PUSH
78632: LD_INT 1
78634: NEG
78635: PUSH
78636: LD_INT 3
78638: NEG
78639: PUSH
78640: EMPTY
78641: LIST
78642: LIST
78643: PUSH
78644: LD_INT 1
78646: NEG
78647: PUSH
78648: LD_INT 4
78650: NEG
78651: PUSH
78652: EMPTY
78653: LIST
78654: LIST
78655: PUSH
78656: LD_INT 2
78658: PUSH
78659: LD_INT 2
78661: NEG
78662: PUSH
78663: EMPTY
78664: LIST
78665: LIST
78666: PUSH
78667: LD_INT 2
78669: NEG
78670: PUSH
78671: LD_INT 4
78673: NEG
78674: PUSH
78675: EMPTY
78676: LIST
78677: LIST
78678: PUSH
78679: LD_INT 4
78681: PUSH
78682: LD_INT 0
78684: PUSH
78685: EMPTY
78686: LIST
78687: LIST
78688: PUSH
78689: LD_INT 4
78691: PUSH
78692: LD_INT 1
78694: NEG
78695: PUSH
78696: EMPTY
78697: LIST
78698: LIST
78699: PUSH
78700: LD_INT 5
78702: PUSH
78703: LD_INT 0
78705: PUSH
78706: EMPTY
78707: LIST
78708: LIST
78709: PUSH
78710: LD_INT 5
78712: PUSH
78713: LD_INT 1
78715: PUSH
78716: EMPTY
78717: LIST
78718: LIST
78719: PUSH
78720: LD_INT 4
78722: PUSH
78723: LD_INT 1
78725: PUSH
78726: EMPTY
78727: LIST
78728: LIST
78729: PUSH
78730: LD_INT 3
78732: PUSH
78733: LD_INT 0
78735: PUSH
78736: EMPTY
78737: LIST
78738: LIST
78739: PUSH
78740: LD_INT 3
78742: PUSH
78743: LD_INT 1
78745: NEG
78746: PUSH
78747: EMPTY
78748: LIST
78749: LIST
78750: PUSH
78751: LD_INT 3
78753: PUSH
78754: LD_INT 2
78756: NEG
78757: PUSH
78758: EMPTY
78759: LIST
78760: LIST
78761: PUSH
78762: LD_INT 5
78764: PUSH
78765: LD_INT 2
78767: PUSH
78768: EMPTY
78769: LIST
78770: LIST
78771: PUSH
78772: EMPTY
78773: LIST
78774: LIST
78775: LIST
78776: LIST
78777: LIST
78778: LIST
78779: LIST
78780: LIST
78781: LIST
78782: LIST
78783: LIST
78784: LIST
78785: LIST
78786: LIST
78787: LIST
78788: LIST
78789: LIST
78790: LIST
78791: LIST
78792: LIST
78793: LIST
78794: LIST
78795: LIST
78796: LIST
78797: LIST
78798: LIST
78799: LIST
78800: LIST
78801: LIST
78802: LIST
78803: LIST
78804: LIST
78805: LIST
78806: LIST
78807: LIST
78808: LIST
78809: LIST
78810: LIST
78811: LIST
78812: LIST
78813: LIST
78814: LIST
78815: LIST
78816: LIST
78817: LIST
78818: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
78819: LD_ADDR_VAR 0 32
78823: PUSH
78824: LD_INT 4
78826: NEG
78827: PUSH
78828: LD_INT 0
78830: PUSH
78831: EMPTY
78832: LIST
78833: LIST
78834: PUSH
78835: LD_INT 4
78837: NEG
78838: PUSH
78839: LD_INT 1
78841: NEG
78842: PUSH
78843: EMPTY
78844: LIST
78845: LIST
78846: PUSH
78847: LD_INT 3
78849: NEG
78850: PUSH
78851: LD_INT 0
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: PUSH
78858: LD_INT 3
78860: NEG
78861: PUSH
78862: LD_INT 1
78864: PUSH
78865: EMPTY
78866: LIST
78867: LIST
78868: PUSH
78869: LD_INT 4
78871: NEG
78872: PUSH
78873: LD_INT 1
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: PUSH
78880: LD_INT 5
78882: NEG
78883: PUSH
78884: LD_INT 0
78886: PUSH
78887: EMPTY
78888: LIST
78889: LIST
78890: PUSH
78891: LD_INT 5
78893: NEG
78894: PUSH
78895: LD_INT 1
78897: NEG
78898: PUSH
78899: EMPTY
78900: LIST
78901: LIST
78902: PUSH
78903: LD_INT 5
78905: NEG
78906: PUSH
78907: LD_INT 2
78909: NEG
78910: PUSH
78911: EMPTY
78912: LIST
78913: LIST
78914: PUSH
78915: LD_INT 3
78917: NEG
78918: PUSH
78919: LD_INT 2
78921: PUSH
78922: EMPTY
78923: LIST
78924: LIST
78925: PUSH
78926: LD_INT 3
78928: NEG
78929: PUSH
78930: LD_INT 3
78932: NEG
78933: PUSH
78934: EMPTY
78935: LIST
78936: LIST
78937: PUSH
78938: LD_INT 3
78940: NEG
78941: PUSH
78942: LD_INT 4
78944: NEG
78945: PUSH
78946: EMPTY
78947: LIST
78948: LIST
78949: PUSH
78950: LD_INT 2
78952: NEG
78953: PUSH
78954: LD_INT 3
78956: NEG
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: PUSH
78962: LD_INT 2
78964: NEG
78965: PUSH
78966: LD_INT 2
78968: NEG
78969: PUSH
78970: EMPTY
78971: LIST
78972: LIST
78973: PUSH
78974: LD_INT 3
78976: NEG
78977: PUSH
78978: LD_INT 2
78980: NEG
78981: PUSH
78982: EMPTY
78983: LIST
78984: LIST
78985: PUSH
78986: LD_INT 4
78988: NEG
78989: PUSH
78990: LD_INT 3
78992: NEG
78993: PUSH
78994: EMPTY
78995: LIST
78996: LIST
78997: PUSH
78998: LD_INT 4
79000: NEG
79001: PUSH
79002: LD_INT 4
79004: NEG
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: PUSH
79010: LD_INT 2
79012: NEG
79013: PUSH
79014: LD_INT 4
79016: NEG
79017: PUSH
79018: EMPTY
79019: LIST
79020: LIST
79021: PUSH
79022: LD_INT 4
79024: NEG
79025: PUSH
79026: LD_INT 2
79028: NEG
79029: PUSH
79030: EMPTY
79031: LIST
79032: LIST
79033: PUSH
79034: LD_INT 0
79036: PUSH
79037: LD_INT 4
79039: NEG
79040: PUSH
79041: EMPTY
79042: LIST
79043: LIST
79044: PUSH
79045: LD_INT 0
79047: PUSH
79048: LD_INT 5
79050: NEG
79051: PUSH
79052: EMPTY
79053: LIST
79054: LIST
79055: PUSH
79056: LD_INT 1
79058: PUSH
79059: LD_INT 4
79061: NEG
79062: PUSH
79063: EMPTY
79064: LIST
79065: LIST
79066: PUSH
79067: LD_INT 1
79069: PUSH
79070: LD_INT 3
79072: NEG
79073: PUSH
79074: EMPTY
79075: LIST
79076: LIST
79077: PUSH
79078: LD_INT 0
79080: PUSH
79081: LD_INT 3
79083: NEG
79084: PUSH
79085: EMPTY
79086: LIST
79087: LIST
79088: PUSH
79089: LD_INT 1
79091: NEG
79092: PUSH
79093: LD_INT 4
79095: NEG
79096: PUSH
79097: EMPTY
79098: LIST
79099: LIST
79100: PUSH
79101: LD_INT 1
79103: NEG
79104: PUSH
79105: LD_INT 5
79107: NEG
79108: PUSH
79109: EMPTY
79110: LIST
79111: LIST
79112: PUSH
79113: LD_INT 2
79115: PUSH
79116: LD_INT 3
79118: NEG
79119: PUSH
79120: EMPTY
79121: LIST
79122: LIST
79123: PUSH
79124: LD_INT 2
79126: NEG
79127: PUSH
79128: LD_INT 5
79130: NEG
79131: PUSH
79132: EMPTY
79133: LIST
79134: LIST
79135: PUSH
79136: LD_INT 3
79138: PUSH
79139: LD_INT 0
79141: PUSH
79142: EMPTY
79143: LIST
79144: LIST
79145: PUSH
79146: LD_INT 3
79148: PUSH
79149: LD_INT 1
79151: NEG
79152: PUSH
79153: EMPTY
79154: LIST
79155: LIST
79156: PUSH
79157: LD_INT 4
79159: PUSH
79160: LD_INT 0
79162: PUSH
79163: EMPTY
79164: LIST
79165: LIST
79166: PUSH
79167: LD_INT 4
79169: PUSH
79170: LD_INT 1
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: PUSH
79177: LD_INT 3
79179: PUSH
79180: LD_INT 1
79182: PUSH
79183: EMPTY
79184: LIST
79185: LIST
79186: PUSH
79187: LD_INT 2
79189: PUSH
79190: LD_INT 0
79192: PUSH
79193: EMPTY
79194: LIST
79195: LIST
79196: PUSH
79197: LD_INT 2
79199: PUSH
79200: LD_INT 1
79202: NEG
79203: PUSH
79204: EMPTY
79205: LIST
79206: LIST
79207: PUSH
79208: LD_INT 2
79210: PUSH
79211: LD_INT 2
79213: NEG
79214: PUSH
79215: EMPTY
79216: LIST
79217: LIST
79218: PUSH
79219: LD_INT 4
79221: PUSH
79222: LD_INT 2
79224: PUSH
79225: EMPTY
79226: LIST
79227: LIST
79228: PUSH
79229: LD_INT 4
79231: PUSH
79232: LD_INT 4
79234: PUSH
79235: EMPTY
79236: LIST
79237: LIST
79238: PUSH
79239: LD_INT 4
79241: PUSH
79242: LD_INT 3
79244: PUSH
79245: EMPTY
79246: LIST
79247: LIST
79248: PUSH
79249: LD_INT 5
79251: PUSH
79252: LD_INT 4
79254: PUSH
79255: EMPTY
79256: LIST
79257: LIST
79258: PUSH
79259: LD_INT 5
79261: PUSH
79262: LD_INT 5
79264: PUSH
79265: EMPTY
79266: LIST
79267: LIST
79268: PUSH
79269: LD_INT 4
79271: PUSH
79272: LD_INT 5
79274: PUSH
79275: EMPTY
79276: LIST
79277: LIST
79278: PUSH
79279: LD_INT 3
79281: PUSH
79282: LD_INT 4
79284: PUSH
79285: EMPTY
79286: LIST
79287: LIST
79288: PUSH
79289: LD_INT 3
79291: PUSH
79292: LD_INT 3
79294: PUSH
79295: EMPTY
79296: LIST
79297: LIST
79298: PUSH
79299: LD_INT 5
79301: PUSH
79302: LD_INT 3
79304: PUSH
79305: EMPTY
79306: LIST
79307: LIST
79308: PUSH
79309: LD_INT 3
79311: PUSH
79312: LD_INT 5
79314: PUSH
79315: EMPTY
79316: LIST
79317: LIST
79318: PUSH
79319: EMPTY
79320: LIST
79321: LIST
79322: LIST
79323: LIST
79324: LIST
79325: LIST
79326: LIST
79327: LIST
79328: LIST
79329: LIST
79330: LIST
79331: LIST
79332: LIST
79333: LIST
79334: LIST
79335: LIST
79336: LIST
79337: LIST
79338: LIST
79339: LIST
79340: LIST
79341: LIST
79342: LIST
79343: LIST
79344: LIST
79345: LIST
79346: LIST
79347: LIST
79348: LIST
79349: LIST
79350: LIST
79351: LIST
79352: LIST
79353: LIST
79354: LIST
79355: LIST
79356: LIST
79357: LIST
79358: LIST
79359: LIST
79360: LIST
79361: LIST
79362: LIST
79363: LIST
79364: LIST
79365: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
79366: LD_ADDR_VAR 0 33
79370: PUSH
79371: LD_INT 4
79373: NEG
79374: PUSH
79375: LD_INT 4
79377: NEG
79378: PUSH
79379: EMPTY
79380: LIST
79381: LIST
79382: PUSH
79383: LD_INT 4
79385: NEG
79386: PUSH
79387: LD_INT 5
79389: NEG
79390: PUSH
79391: EMPTY
79392: LIST
79393: LIST
79394: PUSH
79395: LD_INT 3
79397: NEG
79398: PUSH
79399: LD_INT 4
79401: NEG
79402: PUSH
79403: EMPTY
79404: LIST
79405: LIST
79406: PUSH
79407: LD_INT 3
79409: NEG
79410: PUSH
79411: LD_INT 3
79413: NEG
79414: PUSH
79415: EMPTY
79416: LIST
79417: LIST
79418: PUSH
79419: LD_INT 4
79421: NEG
79422: PUSH
79423: LD_INT 3
79425: NEG
79426: PUSH
79427: EMPTY
79428: LIST
79429: LIST
79430: PUSH
79431: LD_INT 5
79433: NEG
79434: PUSH
79435: LD_INT 4
79437: NEG
79438: PUSH
79439: EMPTY
79440: LIST
79441: LIST
79442: PUSH
79443: LD_INT 5
79445: NEG
79446: PUSH
79447: LD_INT 5
79449: NEG
79450: PUSH
79451: EMPTY
79452: LIST
79453: LIST
79454: PUSH
79455: LD_INT 3
79457: NEG
79458: PUSH
79459: LD_INT 5
79461: NEG
79462: PUSH
79463: EMPTY
79464: LIST
79465: LIST
79466: PUSH
79467: LD_INT 5
79469: NEG
79470: PUSH
79471: LD_INT 3
79473: NEG
79474: PUSH
79475: EMPTY
79476: LIST
79477: LIST
79478: PUSH
79479: LD_INT 0
79481: PUSH
79482: LD_INT 3
79484: NEG
79485: PUSH
79486: EMPTY
79487: LIST
79488: LIST
79489: PUSH
79490: LD_INT 0
79492: PUSH
79493: LD_INT 4
79495: NEG
79496: PUSH
79497: EMPTY
79498: LIST
79499: LIST
79500: PUSH
79501: LD_INT 1
79503: PUSH
79504: LD_INT 3
79506: NEG
79507: PUSH
79508: EMPTY
79509: LIST
79510: LIST
79511: PUSH
79512: LD_INT 1
79514: PUSH
79515: LD_INT 2
79517: NEG
79518: PUSH
79519: EMPTY
79520: LIST
79521: LIST
79522: PUSH
79523: LD_INT 0
79525: PUSH
79526: LD_INT 2
79528: NEG
79529: PUSH
79530: EMPTY
79531: LIST
79532: LIST
79533: PUSH
79534: LD_INT 1
79536: NEG
79537: PUSH
79538: LD_INT 3
79540: NEG
79541: PUSH
79542: EMPTY
79543: LIST
79544: LIST
79545: PUSH
79546: LD_INT 1
79548: NEG
79549: PUSH
79550: LD_INT 4
79552: NEG
79553: PUSH
79554: EMPTY
79555: LIST
79556: LIST
79557: PUSH
79558: LD_INT 2
79560: PUSH
79561: LD_INT 2
79563: NEG
79564: PUSH
79565: EMPTY
79566: LIST
79567: LIST
79568: PUSH
79569: LD_INT 2
79571: NEG
79572: PUSH
79573: LD_INT 4
79575: NEG
79576: PUSH
79577: EMPTY
79578: LIST
79579: LIST
79580: PUSH
79581: LD_INT 4
79583: PUSH
79584: LD_INT 0
79586: PUSH
79587: EMPTY
79588: LIST
79589: LIST
79590: PUSH
79591: LD_INT 4
79593: PUSH
79594: LD_INT 1
79596: NEG
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: PUSH
79602: LD_INT 5
79604: PUSH
79605: LD_INT 0
79607: PUSH
79608: EMPTY
79609: LIST
79610: LIST
79611: PUSH
79612: LD_INT 5
79614: PUSH
79615: LD_INT 1
79617: PUSH
79618: EMPTY
79619: LIST
79620: LIST
79621: PUSH
79622: LD_INT 4
79624: PUSH
79625: LD_INT 1
79627: PUSH
79628: EMPTY
79629: LIST
79630: LIST
79631: PUSH
79632: LD_INT 3
79634: PUSH
79635: LD_INT 0
79637: PUSH
79638: EMPTY
79639: LIST
79640: LIST
79641: PUSH
79642: LD_INT 3
79644: PUSH
79645: LD_INT 1
79647: NEG
79648: PUSH
79649: EMPTY
79650: LIST
79651: LIST
79652: PUSH
79653: LD_INT 3
79655: PUSH
79656: LD_INT 2
79658: NEG
79659: PUSH
79660: EMPTY
79661: LIST
79662: LIST
79663: PUSH
79664: LD_INT 5
79666: PUSH
79667: LD_INT 2
79669: PUSH
79670: EMPTY
79671: LIST
79672: LIST
79673: PUSH
79674: LD_INT 3
79676: PUSH
79677: LD_INT 3
79679: PUSH
79680: EMPTY
79681: LIST
79682: LIST
79683: PUSH
79684: LD_INT 3
79686: PUSH
79687: LD_INT 2
79689: PUSH
79690: EMPTY
79691: LIST
79692: LIST
79693: PUSH
79694: LD_INT 4
79696: PUSH
79697: LD_INT 3
79699: PUSH
79700: EMPTY
79701: LIST
79702: LIST
79703: PUSH
79704: LD_INT 4
79706: PUSH
79707: LD_INT 4
79709: PUSH
79710: EMPTY
79711: LIST
79712: LIST
79713: PUSH
79714: LD_INT 3
79716: PUSH
79717: LD_INT 4
79719: PUSH
79720: EMPTY
79721: LIST
79722: LIST
79723: PUSH
79724: LD_INT 2
79726: PUSH
79727: LD_INT 3
79729: PUSH
79730: EMPTY
79731: LIST
79732: LIST
79733: PUSH
79734: LD_INT 2
79736: PUSH
79737: LD_INT 2
79739: PUSH
79740: EMPTY
79741: LIST
79742: LIST
79743: PUSH
79744: LD_INT 4
79746: PUSH
79747: LD_INT 2
79749: PUSH
79750: EMPTY
79751: LIST
79752: LIST
79753: PUSH
79754: LD_INT 2
79756: PUSH
79757: LD_INT 4
79759: PUSH
79760: EMPTY
79761: LIST
79762: LIST
79763: PUSH
79764: LD_INT 0
79766: PUSH
79767: LD_INT 4
79769: PUSH
79770: EMPTY
79771: LIST
79772: LIST
79773: PUSH
79774: LD_INT 0
79776: PUSH
79777: LD_INT 3
79779: PUSH
79780: EMPTY
79781: LIST
79782: LIST
79783: PUSH
79784: LD_INT 1
79786: PUSH
79787: LD_INT 4
79789: PUSH
79790: EMPTY
79791: LIST
79792: LIST
79793: PUSH
79794: LD_INT 1
79796: PUSH
79797: LD_INT 5
79799: PUSH
79800: EMPTY
79801: LIST
79802: LIST
79803: PUSH
79804: LD_INT 0
79806: PUSH
79807: LD_INT 5
79809: PUSH
79810: EMPTY
79811: LIST
79812: LIST
79813: PUSH
79814: LD_INT 1
79816: NEG
79817: PUSH
79818: LD_INT 4
79820: PUSH
79821: EMPTY
79822: LIST
79823: LIST
79824: PUSH
79825: LD_INT 1
79827: NEG
79828: PUSH
79829: LD_INT 3
79831: PUSH
79832: EMPTY
79833: LIST
79834: LIST
79835: PUSH
79836: LD_INT 2
79838: PUSH
79839: LD_INT 5
79841: PUSH
79842: EMPTY
79843: LIST
79844: LIST
79845: PUSH
79846: LD_INT 2
79848: NEG
79849: PUSH
79850: LD_INT 3
79852: PUSH
79853: EMPTY
79854: LIST
79855: LIST
79856: PUSH
79857: EMPTY
79858: LIST
79859: LIST
79860: LIST
79861: LIST
79862: LIST
79863: LIST
79864: LIST
79865: LIST
79866: LIST
79867: LIST
79868: LIST
79869: LIST
79870: LIST
79871: LIST
79872: LIST
79873: LIST
79874: LIST
79875: LIST
79876: LIST
79877: LIST
79878: LIST
79879: LIST
79880: LIST
79881: LIST
79882: LIST
79883: LIST
79884: LIST
79885: LIST
79886: LIST
79887: LIST
79888: LIST
79889: LIST
79890: LIST
79891: LIST
79892: LIST
79893: LIST
79894: LIST
79895: LIST
79896: LIST
79897: LIST
79898: LIST
79899: LIST
79900: LIST
79901: LIST
79902: LIST
79903: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
79904: LD_ADDR_VAR 0 34
79908: PUSH
79909: LD_INT 0
79911: PUSH
79912: LD_INT 4
79914: NEG
79915: PUSH
79916: EMPTY
79917: LIST
79918: LIST
79919: PUSH
79920: LD_INT 0
79922: PUSH
79923: LD_INT 5
79925: NEG
79926: PUSH
79927: EMPTY
79928: LIST
79929: LIST
79930: PUSH
79931: LD_INT 1
79933: PUSH
79934: LD_INT 4
79936: NEG
79937: PUSH
79938: EMPTY
79939: LIST
79940: LIST
79941: PUSH
79942: LD_INT 1
79944: PUSH
79945: LD_INT 3
79947: NEG
79948: PUSH
79949: EMPTY
79950: LIST
79951: LIST
79952: PUSH
79953: LD_INT 0
79955: PUSH
79956: LD_INT 3
79958: NEG
79959: PUSH
79960: EMPTY
79961: LIST
79962: LIST
79963: PUSH
79964: LD_INT 1
79966: NEG
79967: PUSH
79968: LD_INT 4
79970: NEG
79971: PUSH
79972: EMPTY
79973: LIST
79974: LIST
79975: PUSH
79976: LD_INT 1
79978: NEG
79979: PUSH
79980: LD_INT 5
79982: NEG
79983: PUSH
79984: EMPTY
79985: LIST
79986: LIST
79987: PUSH
79988: LD_INT 2
79990: PUSH
79991: LD_INT 3
79993: NEG
79994: PUSH
79995: EMPTY
79996: LIST
79997: LIST
79998: PUSH
79999: LD_INT 2
80001: NEG
80002: PUSH
80003: LD_INT 5
80005: NEG
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: PUSH
80011: LD_INT 3
80013: PUSH
80014: LD_INT 0
80016: PUSH
80017: EMPTY
80018: LIST
80019: LIST
80020: PUSH
80021: LD_INT 3
80023: PUSH
80024: LD_INT 1
80026: NEG
80027: PUSH
80028: EMPTY
80029: LIST
80030: LIST
80031: PUSH
80032: LD_INT 4
80034: PUSH
80035: LD_INT 0
80037: PUSH
80038: EMPTY
80039: LIST
80040: LIST
80041: PUSH
80042: LD_INT 4
80044: PUSH
80045: LD_INT 1
80047: PUSH
80048: EMPTY
80049: LIST
80050: LIST
80051: PUSH
80052: LD_INT 3
80054: PUSH
80055: LD_INT 1
80057: PUSH
80058: EMPTY
80059: LIST
80060: LIST
80061: PUSH
80062: LD_INT 2
80064: PUSH
80065: LD_INT 0
80067: PUSH
80068: EMPTY
80069: LIST
80070: LIST
80071: PUSH
80072: LD_INT 2
80074: PUSH
80075: LD_INT 1
80077: NEG
80078: PUSH
80079: EMPTY
80080: LIST
80081: LIST
80082: PUSH
80083: LD_INT 2
80085: PUSH
80086: LD_INT 2
80088: NEG
80089: PUSH
80090: EMPTY
80091: LIST
80092: LIST
80093: PUSH
80094: LD_INT 4
80096: PUSH
80097: LD_INT 2
80099: PUSH
80100: EMPTY
80101: LIST
80102: LIST
80103: PUSH
80104: LD_INT 4
80106: PUSH
80107: LD_INT 4
80109: PUSH
80110: EMPTY
80111: LIST
80112: LIST
80113: PUSH
80114: LD_INT 4
80116: PUSH
80117: LD_INT 3
80119: PUSH
80120: EMPTY
80121: LIST
80122: LIST
80123: PUSH
80124: LD_INT 5
80126: PUSH
80127: LD_INT 4
80129: PUSH
80130: EMPTY
80131: LIST
80132: LIST
80133: PUSH
80134: LD_INT 5
80136: PUSH
80137: LD_INT 5
80139: PUSH
80140: EMPTY
80141: LIST
80142: LIST
80143: PUSH
80144: LD_INT 4
80146: PUSH
80147: LD_INT 5
80149: PUSH
80150: EMPTY
80151: LIST
80152: LIST
80153: PUSH
80154: LD_INT 3
80156: PUSH
80157: LD_INT 4
80159: PUSH
80160: EMPTY
80161: LIST
80162: LIST
80163: PUSH
80164: LD_INT 3
80166: PUSH
80167: LD_INT 3
80169: PUSH
80170: EMPTY
80171: LIST
80172: LIST
80173: PUSH
80174: LD_INT 5
80176: PUSH
80177: LD_INT 3
80179: PUSH
80180: EMPTY
80181: LIST
80182: LIST
80183: PUSH
80184: LD_INT 3
80186: PUSH
80187: LD_INT 5
80189: PUSH
80190: EMPTY
80191: LIST
80192: LIST
80193: PUSH
80194: LD_INT 0
80196: PUSH
80197: LD_INT 3
80199: PUSH
80200: EMPTY
80201: LIST
80202: LIST
80203: PUSH
80204: LD_INT 0
80206: PUSH
80207: LD_INT 2
80209: PUSH
80210: EMPTY
80211: LIST
80212: LIST
80213: PUSH
80214: LD_INT 1
80216: PUSH
80217: LD_INT 3
80219: PUSH
80220: EMPTY
80221: LIST
80222: LIST
80223: PUSH
80224: LD_INT 1
80226: PUSH
80227: LD_INT 4
80229: PUSH
80230: EMPTY
80231: LIST
80232: LIST
80233: PUSH
80234: LD_INT 0
80236: PUSH
80237: LD_INT 4
80239: PUSH
80240: EMPTY
80241: LIST
80242: LIST
80243: PUSH
80244: LD_INT 1
80246: NEG
80247: PUSH
80248: LD_INT 3
80250: PUSH
80251: EMPTY
80252: LIST
80253: LIST
80254: PUSH
80255: LD_INT 1
80257: NEG
80258: PUSH
80259: LD_INT 2
80261: PUSH
80262: EMPTY
80263: LIST
80264: LIST
80265: PUSH
80266: LD_INT 2
80268: PUSH
80269: LD_INT 4
80271: PUSH
80272: EMPTY
80273: LIST
80274: LIST
80275: PUSH
80276: LD_INT 2
80278: NEG
80279: PUSH
80280: LD_INT 2
80282: PUSH
80283: EMPTY
80284: LIST
80285: LIST
80286: PUSH
80287: LD_INT 4
80289: NEG
80290: PUSH
80291: LD_INT 0
80293: PUSH
80294: EMPTY
80295: LIST
80296: LIST
80297: PUSH
80298: LD_INT 4
80300: NEG
80301: PUSH
80302: LD_INT 1
80304: NEG
80305: PUSH
80306: EMPTY
80307: LIST
80308: LIST
80309: PUSH
80310: LD_INT 3
80312: NEG
80313: PUSH
80314: LD_INT 0
80316: PUSH
80317: EMPTY
80318: LIST
80319: LIST
80320: PUSH
80321: LD_INT 3
80323: NEG
80324: PUSH
80325: LD_INT 1
80327: PUSH
80328: EMPTY
80329: LIST
80330: LIST
80331: PUSH
80332: LD_INT 4
80334: NEG
80335: PUSH
80336: LD_INT 1
80338: PUSH
80339: EMPTY
80340: LIST
80341: LIST
80342: PUSH
80343: LD_INT 5
80345: NEG
80346: PUSH
80347: LD_INT 0
80349: PUSH
80350: EMPTY
80351: LIST
80352: LIST
80353: PUSH
80354: LD_INT 5
80356: NEG
80357: PUSH
80358: LD_INT 1
80360: NEG
80361: PUSH
80362: EMPTY
80363: LIST
80364: LIST
80365: PUSH
80366: LD_INT 5
80368: NEG
80369: PUSH
80370: LD_INT 2
80372: NEG
80373: PUSH
80374: EMPTY
80375: LIST
80376: LIST
80377: PUSH
80378: LD_INT 3
80380: NEG
80381: PUSH
80382: LD_INT 2
80384: PUSH
80385: EMPTY
80386: LIST
80387: LIST
80388: PUSH
80389: EMPTY
80390: LIST
80391: LIST
80392: LIST
80393: LIST
80394: LIST
80395: LIST
80396: LIST
80397: LIST
80398: LIST
80399: LIST
80400: LIST
80401: LIST
80402: LIST
80403: LIST
80404: LIST
80405: LIST
80406: LIST
80407: LIST
80408: LIST
80409: LIST
80410: LIST
80411: LIST
80412: LIST
80413: LIST
80414: LIST
80415: LIST
80416: LIST
80417: LIST
80418: LIST
80419: LIST
80420: LIST
80421: LIST
80422: LIST
80423: LIST
80424: LIST
80425: LIST
80426: LIST
80427: LIST
80428: LIST
80429: LIST
80430: LIST
80431: LIST
80432: LIST
80433: LIST
80434: LIST
80435: ST_TO_ADDR
// end ; end ;
80436: GO 80439
80438: POP
// case btype of b_depot , b_warehouse :
80439: LD_VAR 0 1
80443: PUSH
80444: LD_INT 0
80446: DOUBLE
80447: EQUAL
80448: IFTRUE 80458
80450: LD_INT 1
80452: DOUBLE
80453: EQUAL
80454: IFTRUE 80458
80456: GO 80659
80458: POP
// case nation of nation_american :
80459: LD_VAR 0 5
80463: PUSH
80464: LD_INT 1
80466: DOUBLE
80467: EQUAL
80468: IFTRUE 80472
80470: GO 80528
80472: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
80473: LD_ADDR_VAR 0 9
80477: PUSH
80478: LD_VAR 0 11
80482: PUSH
80483: LD_VAR 0 12
80487: PUSH
80488: LD_VAR 0 13
80492: PUSH
80493: LD_VAR 0 14
80497: PUSH
80498: LD_VAR 0 15
80502: PUSH
80503: LD_VAR 0 16
80507: PUSH
80508: EMPTY
80509: LIST
80510: LIST
80511: LIST
80512: LIST
80513: LIST
80514: LIST
80515: PUSH
80516: LD_VAR 0 4
80520: PUSH
80521: LD_INT 1
80523: PLUS
80524: ARRAY
80525: ST_TO_ADDR
80526: GO 80657
80528: LD_INT 2
80530: DOUBLE
80531: EQUAL
80532: IFTRUE 80536
80534: GO 80592
80536: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
80537: LD_ADDR_VAR 0 9
80541: PUSH
80542: LD_VAR 0 17
80546: PUSH
80547: LD_VAR 0 18
80551: PUSH
80552: LD_VAR 0 19
80556: PUSH
80557: LD_VAR 0 20
80561: PUSH
80562: LD_VAR 0 21
80566: PUSH
80567: LD_VAR 0 22
80571: PUSH
80572: EMPTY
80573: LIST
80574: LIST
80575: LIST
80576: LIST
80577: LIST
80578: LIST
80579: PUSH
80580: LD_VAR 0 4
80584: PUSH
80585: LD_INT 1
80587: PLUS
80588: ARRAY
80589: ST_TO_ADDR
80590: GO 80657
80592: LD_INT 3
80594: DOUBLE
80595: EQUAL
80596: IFTRUE 80600
80598: GO 80656
80600: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
80601: LD_ADDR_VAR 0 9
80605: PUSH
80606: LD_VAR 0 23
80610: PUSH
80611: LD_VAR 0 24
80615: PUSH
80616: LD_VAR 0 25
80620: PUSH
80621: LD_VAR 0 26
80625: PUSH
80626: LD_VAR 0 27
80630: PUSH
80631: LD_VAR 0 28
80635: PUSH
80636: EMPTY
80637: LIST
80638: LIST
80639: LIST
80640: LIST
80641: LIST
80642: LIST
80643: PUSH
80644: LD_VAR 0 4
80648: PUSH
80649: LD_INT 1
80651: PLUS
80652: ARRAY
80653: ST_TO_ADDR
80654: GO 80657
80656: POP
80657: GO 81212
80659: LD_INT 2
80661: DOUBLE
80662: EQUAL
80663: IFTRUE 80673
80665: LD_INT 3
80667: DOUBLE
80668: EQUAL
80669: IFTRUE 80673
80671: GO 80729
80673: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
80674: LD_ADDR_VAR 0 9
80678: PUSH
80679: LD_VAR 0 29
80683: PUSH
80684: LD_VAR 0 30
80688: PUSH
80689: LD_VAR 0 31
80693: PUSH
80694: LD_VAR 0 32
80698: PUSH
80699: LD_VAR 0 33
80703: PUSH
80704: LD_VAR 0 34
80708: PUSH
80709: EMPTY
80710: LIST
80711: LIST
80712: LIST
80713: LIST
80714: LIST
80715: LIST
80716: PUSH
80717: LD_VAR 0 4
80721: PUSH
80722: LD_INT 1
80724: PLUS
80725: ARRAY
80726: ST_TO_ADDR
80727: GO 81212
80729: LD_INT 16
80731: DOUBLE
80732: EQUAL
80733: IFTRUE 80791
80735: LD_INT 17
80737: DOUBLE
80738: EQUAL
80739: IFTRUE 80791
80741: LD_INT 18
80743: DOUBLE
80744: EQUAL
80745: IFTRUE 80791
80747: LD_INT 19
80749: DOUBLE
80750: EQUAL
80751: IFTRUE 80791
80753: LD_INT 22
80755: DOUBLE
80756: EQUAL
80757: IFTRUE 80791
80759: LD_INT 20
80761: DOUBLE
80762: EQUAL
80763: IFTRUE 80791
80765: LD_INT 21
80767: DOUBLE
80768: EQUAL
80769: IFTRUE 80791
80771: LD_INT 23
80773: DOUBLE
80774: EQUAL
80775: IFTRUE 80791
80777: LD_INT 24
80779: DOUBLE
80780: EQUAL
80781: IFTRUE 80791
80783: LD_INT 25
80785: DOUBLE
80786: EQUAL
80787: IFTRUE 80791
80789: GO 80847
80791: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
80792: LD_ADDR_VAR 0 9
80796: PUSH
80797: LD_VAR 0 35
80801: PUSH
80802: LD_VAR 0 36
80806: PUSH
80807: LD_VAR 0 37
80811: PUSH
80812: LD_VAR 0 38
80816: PUSH
80817: LD_VAR 0 39
80821: PUSH
80822: LD_VAR 0 40
80826: PUSH
80827: EMPTY
80828: LIST
80829: LIST
80830: LIST
80831: LIST
80832: LIST
80833: LIST
80834: PUSH
80835: LD_VAR 0 4
80839: PUSH
80840: LD_INT 1
80842: PLUS
80843: ARRAY
80844: ST_TO_ADDR
80845: GO 81212
80847: LD_INT 6
80849: DOUBLE
80850: EQUAL
80851: IFTRUE 80903
80853: LD_INT 7
80855: DOUBLE
80856: EQUAL
80857: IFTRUE 80903
80859: LD_INT 8
80861: DOUBLE
80862: EQUAL
80863: IFTRUE 80903
80865: LD_INT 13
80867: DOUBLE
80868: EQUAL
80869: IFTRUE 80903
80871: LD_INT 12
80873: DOUBLE
80874: EQUAL
80875: IFTRUE 80903
80877: LD_INT 15
80879: DOUBLE
80880: EQUAL
80881: IFTRUE 80903
80883: LD_INT 11
80885: DOUBLE
80886: EQUAL
80887: IFTRUE 80903
80889: LD_INT 14
80891: DOUBLE
80892: EQUAL
80893: IFTRUE 80903
80895: LD_INT 10
80897: DOUBLE
80898: EQUAL
80899: IFTRUE 80903
80901: GO 80959
80903: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
80904: LD_ADDR_VAR 0 9
80908: PUSH
80909: LD_VAR 0 41
80913: PUSH
80914: LD_VAR 0 42
80918: PUSH
80919: LD_VAR 0 43
80923: PUSH
80924: LD_VAR 0 44
80928: PUSH
80929: LD_VAR 0 45
80933: PUSH
80934: LD_VAR 0 46
80938: PUSH
80939: EMPTY
80940: LIST
80941: LIST
80942: LIST
80943: LIST
80944: LIST
80945: LIST
80946: PUSH
80947: LD_VAR 0 4
80951: PUSH
80952: LD_INT 1
80954: PLUS
80955: ARRAY
80956: ST_TO_ADDR
80957: GO 81212
80959: LD_INT 36
80961: DOUBLE
80962: EQUAL
80963: IFTRUE 80967
80965: GO 81023
80967: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
80968: LD_ADDR_VAR 0 9
80972: PUSH
80973: LD_VAR 0 47
80977: PUSH
80978: LD_VAR 0 48
80982: PUSH
80983: LD_VAR 0 49
80987: PUSH
80988: LD_VAR 0 50
80992: PUSH
80993: LD_VAR 0 51
80997: PUSH
80998: LD_VAR 0 52
81002: PUSH
81003: EMPTY
81004: LIST
81005: LIST
81006: LIST
81007: LIST
81008: LIST
81009: LIST
81010: PUSH
81011: LD_VAR 0 4
81015: PUSH
81016: LD_INT 1
81018: PLUS
81019: ARRAY
81020: ST_TO_ADDR
81021: GO 81212
81023: LD_INT 4
81025: DOUBLE
81026: EQUAL
81027: IFTRUE 81049
81029: LD_INT 5
81031: DOUBLE
81032: EQUAL
81033: IFTRUE 81049
81035: LD_INT 34
81037: DOUBLE
81038: EQUAL
81039: IFTRUE 81049
81041: LD_INT 37
81043: DOUBLE
81044: EQUAL
81045: IFTRUE 81049
81047: GO 81105
81049: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
81050: LD_ADDR_VAR 0 9
81054: PUSH
81055: LD_VAR 0 53
81059: PUSH
81060: LD_VAR 0 54
81064: PUSH
81065: LD_VAR 0 55
81069: PUSH
81070: LD_VAR 0 56
81074: PUSH
81075: LD_VAR 0 57
81079: PUSH
81080: LD_VAR 0 58
81084: PUSH
81085: EMPTY
81086: LIST
81087: LIST
81088: LIST
81089: LIST
81090: LIST
81091: LIST
81092: PUSH
81093: LD_VAR 0 4
81097: PUSH
81098: LD_INT 1
81100: PLUS
81101: ARRAY
81102: ST_TO_ADDR
81103: GO 81212
81105: LD_INT 31
81107: DOUBLE
81108: EQUAL
81109: IFTRUE 81155
81111: LD_INT 32
81113: DOUBLE
81114: EQUAL
81115: IFTRUE 81155
81117: LD_INT 33
81119: DOUBLE
81120: EQUAL
81121: IFTRUE 81155
81123: LD_INT 27
81125: DOUBLE
81126: EQUAL
81127: IFTRUE 81155
81129: LD_INT 26
81131: DOUBLE
81132: EQUAL
81133: IFTRUE 81155
81135: LD_INT 28
81137: DOUBLE
81138: EQUAL
81139: IFTRUE 81155
81141: LD_INT 29
81143: DOUBLE
81144: EQUAL
81145: IFTRUE 81155
81147: LD_INT 30
81149: DOUBLE
81150: EQUAL
81151: IFTRUE 81155
81153: GO 81211
81155: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
81156: LD_ADDR_VAR 0 9
81160: PUSH
81161: LD_VAR 0 59
81165: PUSH
81166: LD_VAR 0 60
81170: PUSH
81171: LD_VAR 0 61
81175: PUSH
81176: LD_VAR 0 62
81180: PUSH
81181: LD_VAR 0 63
81185: PUSH
81186: LD_VAR 0 64
81190: PUSH
81191: EMPTY
81192: LIST
81193: LIST
81194: LIST
81195: LIST
81196: LIST
81197: LIST
81198: PUSH
81199: LD_VAR 0 4
81203: PUSH
81204: LD_INT 1
81206: PLUS
81207: ARRAY
81208: ST_TO_ADDR
81209: GO 81212
81211: POP
// temp_list2 = [ ] ;
81212: LD_ADDR_VAR 0 10
81216: PUSH
81217: EMPTY
81218: ST_TO_ADDR
// for i in temp_list do
81219: LD_ADDR_VAR 0 8
81223: PUSH
81224: LD_VAR 0 9
81228: PUSH
81229: FOR_IN
81230: IFFALSE 81282
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
81232: LD_ADDR_VAR 0 10
81236: PUSH
81237: LD_VAR 0 10
81241: PUSH
81242: LD_VAR 0 8
81246: PUSH
81247: LD_INT 1
81249: ARRAY
81250: PUSH
81251: LD_VAR 0 2
81255: PLUS
81256: PUSH
81257: LD_VAR 0 8
81261: PUSH
81262: LD_INT 2
81264: ARRAY
81265: PUSH
81266: LD_VAR 0 3
81270: PLUS
81271: PUSH
81272: EMPTY
81273: LIST
81274: LIST
81275: PUSH
81276: EMPTY
81277: LIST
81278: ADD
81279: ST_TO_ADDR
81280: GO 81229
81282: POP
81283: POP
// result = temp_list2 ;
81284: LD_ADDR_VAR 0 7
81288: PUSH
81289: LD_VAR 0 10
81293: ST_TO_ADDR
// end ;
81294: LD_VAR 0 7
81298: RET
// export function EnemyInRange ( unit , dist ) ; begin
81299: LD_INT 0
81301: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
81302: LD_ADDR_VAR 0 3
81306: PUSH
81307: LD_VAR 0 1
81311: PPUSH
81312: CALL_OW 255
81316: PPUSH
81317: LD_VAR 0 1
81321: PPUSH
81322: CALL_OW 250
81326: PPUSH
81327: LD_VAR 0 1
81331: PPUSH
81332: CALL_OW 251
81336: PPUSH
81337: LD_VAR 0 2
81341: PPUSH
81342: CALL 54695 0 4
81346: PUSH
81347: LD_INT 4
81349: ARRAY
81350: ST_TO_ADDR
// end ;
81351: LD_VAR 0 3
81355: RET
// export function PlayerSeeMe ( unit ) ; begin
81356: LD_INT 0
81358: PPUSH
// result := See ( your_side , unit ) ;
81359: LD_ADDR_VAR 0 2
81363: PUSH
81364: LD_OWVAR 2
81368: PPUSH
81369: LD_VAR 0 1
81373: PPUSH
81374: CALL_OW 292
81378: ST_TO_ADDR
// end ;
81379: LD_VAR 0 2
81383: RET
// export function ReverseDir ( unit ) ; begin
81384: LD_INT 0
81386: PPUSH
// if not unit then
81387: LD_VAR 0 1
81391: NOT
81392: IFFALSE 81396
// exit ;
81394: GO 81419
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
81396: LD_ADDR_VAR 0 2
81400: PUSH
81401: LD_VAR 0 1
81405: PPUSH
81406: CALL_OW 254
81410: PUSH
81411: LD_INT 3
81413: PLUS
81414: PUSH
81415: LD_INT 6
81417: MOD
81418: ST_TO_ADDR
// end ;
81419: LD_VAR 0 2
81423: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
81424: LD_INT 0
81426: PPUSH
81427: PPUSH
81428: PPUSH
81429: PPUSH
81430: PPUSH
// if not hexes then
81431: LD_VAR 0 2
81435: NOT
81436: IFFALSE 81440
// exit ;
81438: GO 81588
// dist := 9999 ;
81440: LD_ADDR_VAR 0 5
81444: PUSH
81445: LD_INT 9999
81447: ST_TO_ADDR
// for i = 1 to hexes do
81448: LD_ADDR_VAR 0 4
81452: PUSH
81453: DOUBLE
81454: LD_INT 1
81456: DEC
81457: ST_TO_ADDR
81458: LD_VAR 0 2
81462: PUSH
81463: FOR_TO
81464: IFFALSE 81576
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
81466: LD_VAR 0 1
81470: PPUSH
81471: LD_VAR 0 2
81475: PUSH
81476: LD_VAR 0 4
81480: ARRAY
81481: PUSH
81482: LD_INT 1
81484: ARRAY
81485: PPUSH
81486: LD_VAR 0 2
81490: PUSH
81491: LD_VAR 0 4
81495: ARRAY
81496: PUSH
81497: LD_INT 2
81499: ARRAY
81500: PPUSH
81501: CALL_OW 297
81505: PUSH
81506: LD_VAR 0 5
81510: LESS
81511: IFFALSE 81574
// begin hex := hexes [ i ] ;
81513: LD_ADDR_VAR 0 7
81517: PUSH
81518: LD_VAR 0 2
81522: PUSH
81523: LD_VAR 0 4
81527: ARRAY
81528: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
81529: LD_ADDR_VAR 0 5
81533: PUSH
81534: LD_VAR 0 1
81538: PPUSH
81539: LD_VAR 0 2
81543: PUSH
81544: LD_VAR 0 4
81548: ARRAY
81549: PUSH
81550: LD_INT 1
81552: ARRAY
81553: PPUSH
81554: LD_VAR 0 2
81558: PUSH
81559: LD_VAR 0 4
81563: ARRAY
81564: PUSH
81565: LD_INT 2
81567: ARRAY
81568: PPUSH
81569: CALL_OW 297
81573: ST_TO_ADDR
// end ; end ;
81574: GO 81463
81576: POP
81577: POP
// result := hex ;
81578: LD_ADDR_VAR 0 3
81582: PUSH
81583: LD_VAR 0 7
81587: ST_TO_ADDR
// end ;
81588: LD_VAR 0 3
81592: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
81593: LD_INT 0
81595: PPUSH
81596: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
81597: LD_VAR 0 1
81601: NOT
81602: PUSH
81603: LD_VAR 0 1
81607: PUSH
81608: LD_INT 21
81610: PUSH
81611: LD_INT 2
81613: PUSH
81614: EMPTY
81615: LIST
81616: LIST
81617: PUSH
81618: LD_INT 23
81620: PUSH
81621: LD_INT 2
81623: PUSH
81624: EMPTY
81625: LIST
81626: LIST
81627: PUSH
81628: EMPTY
81629: LIST
81630: LIST
81631: PPUSH
81632: CALL_OW 69
81636: IN
81637: NOT
81638: OR
81639: IFFALSE 81643
// exit ;
81641: GO 81690
// for i = 1 to 3 do
81643: LD_ADDR_VAR 0 3
81647: PUSH
81648: DOUBLE
81649: LD_INT 1
81651: DEC
81652: ST_TO_ADDR
81653: LD_INT 3
81655: PUSH
81656: FOR_TO
81657: IFFALSE 81688
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
81659: LD_VAR 0 1
81663: PPUSH
81664: CALL_OW 250
81668: PPUSH
81669: LD_VAR 0 1
81673: PPUSH
81674: CALL_OW 251
81678: PPUSH
81679: LD_INT 1
81681: PPUSH
81682: CALL_OW 453
81686: GO 81656
81688: POP
81689: POP
// end ;
81690: LD_VAR 0 2
81694: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
81695: LD_INT 0
81697: PPUSH
81698: PPUSH
81699: PPUSH
81700: PPUSH
81701: PPUSH
81702: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
81703: LD_VAR 0 1
81707: NOT
81708: PUSH
81709: LD_VAR 0 2
81713: NOT
81714: OR
81715: PUSH
81716: LD_VAR 0 1
81720: PPUSH
81721: CALL_OW 314
81725: OR
81726: IFFALSE 81730
// exit ;
81728: GO 82171
// x := GetX ( enemy_unit ) ;
81730: LD_ADDR_VAR 0 7
81734: PUSH
81735: LD_VAR 0 2
81739: PPUSH
81740: CALL_OW 250
81744: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
81745: LD_ADDR_VAR 0 8
81749: PUSH
81750: LD_VAR 0 2
81754: PPUSH
81755: CALL_OW 251
81759: ST_TO_ADDR
// if not x or not y then
81760: LD_VAR 0 7
81764: NOT
81765: PUSH
81766: LD_VAR 0 8
81770: NOT
81771: OR
81772: IFFALSE 81776
// exit ;
81774: GO 82171
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
81776: LD_ADDR_VAR 0 6
81780: PUSH
81781: LD_VAR 0 7
81785: PPUSH
81786: LD_INT 0
81788: PPUSH
81789: LD_INT 4
81791: PPUSH
81792: CALL_OW 272
81796: PUSH
81797: LD_VAR 0 8
81801: PPUSH
81802: LD_INT 0
81804: PPUSH
81805: LD_INT 4
81807: PPUSH
81808: CALL_OW 273
81812: PUSH
81813: EMPTY
81814: LIST
81815: LIST
81816: PUSH
81817: LD_VAR 0 7
81821: PPUSH
81822: LD_INT 1
81824: PPUSH
81825: LD_INT 4
81827: PPUSH
81828: CALL_OW 272
81832: PUSH
81833: LD_VAR 0 8
81837: PPUSH
81838: LD_INT 1
81840: PPUSH
81841: LD_INT 4
81843: PPUSH
81844: CALL_OW 273
81848: PUSH
81849: EMPTY
81850: LIST
81851: LIST
81852: PUSH
81853: LD_VAR 0 7
81857: PPUSH
81858: LD_INT 2
81860: PPUSH
81861: LD_INT 4
81863: PPUSH
81864: CALL_OW 272
81868: PUSH
81869: LD_VAR 0 8
81873: PPUSH
81874: LD_INT 2
81876: PPUSH
81877: LD_INT 4
81879: PPUSH
81880: CALL_OW 273
81884: PUSH
81885: EMPTY
81886: LIST
81887: LIST
81888: PUSH
81889: LD_VAR 0 7
81893: PPUSH
81894: LD_INT 3
81896: PPUSH
81897: LD_INT 4
81899: PPUSH
81900: CALL_OW 272
81904: PUSH
81905: LD_VAR 0 8
81909: PPUSH
81910: LD_INT 3
81912: PPUSH
81913: LD_INT 4
81915: PPUSH
81916: CALL_OW 273
81920: PUSH
81921: EMPTY
81922: LIST
81923: LIST
81924: PUSH
81925: LD_VAR 0 7
81929: PPUSH
81930: LD_INT 4
81932: PPUSH
81933: LD_INT 4
81935: PPUSH
81936: CALL_OW 272
81940: PUSH
81941: LD_VAR 0 8
81945: PPUSH
81946: LD_INT 4
81948: PPUSH
81949: LD_INT 4
81951: PPUSH
81952: CALL_OW 273
81956: PUSH
81957: EMPTY
81958: LIST
81959: LIST
81960: PUSH
81961: LD_VAR 0 7
81965: PPUSH
81966: LD_INT 5
81968: PPUSH
81969: LD_INT 4
81971: PPUSH
81972: CALL_OW 272
81976: PUSH
81977: LD_VAR 0 8
81981: PPUSH
81982: LD_INT 5
81984: PPUSH
81985: LD_INT 4
81987: PPUSH
81988: CALL_OW 273
81992: PUSH
81993: EMPTY
81994: LIST
81995: LIST
81996: PUSH
81997: EMPTY
81998: LIST
81999: LIST
82000: LIST
82001: LIST
82002: LIST
82003: LIST
82004: ST_TO_ADDR
// for i = tmp downto 1 do
82005: LD_ADDR_VAR 0 4
82009: PUSH
82010: DOUBLE
82011: LD_VAR 0 6
82015: INC
82016: ST_TO_ADDR
82017: LD_INT 1
82019: PUSH
82020: FOR_DOWNTO
82021: IFFALSE 82122
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
82023: LD_VAR 0 6
82027: PUSH
82028: LD_VAR 0 4
82032: ARRAY
82033: PUSH
82034: LD_INT 1
82036: ARRAY
82037: PPUSH
82038: LD_VAR 0 6
82042: PUSH
82043: LD_VAR 0 4
82047: ARRAY
82048: PUSH
82049: LD_INT 2
82051: ARRAY
82052: PPUSH
82053: CALL_OW 488
82057: NOT
82058: PUSH
82059: LD_VAR 0 6
82063: PUSH
82064: LD_VAR 0 4
82068: ARRAY
82069: PUSH
82070: LD_INT 1
82072: ARRAY
82073: PPUSH
82074: LD_VAR 0 6
82078: PUSH
82079: LD_VAR 0 4
82083: ARRAY
82084: PUSH
82085: LD_INT 2
82087: ARRAY
82088: PPUSH
82089: CALL_OW 428
82093: PUSH
82094: LD_INT 0
82096: NONEQUAL
82097: OR
82098: IFFALSE 82120
// tmp := Delete ( tmp , i ) ;
82100: LD_ADDR_VAR 0 6
82104: PUSH
82105: LD_VAR 0 6
82109: PPUSH
82110: LD_VAR 0 4
82114: PPUSH
82115: CALL_OW 3
82119: ST_TO_ADDR
82120: GO 82020
82122: POP
82123: POP
// j := GetClosestHex ( unit , tmp ) ;
82124: LD_ADDR_VAR 0 5
82128: PUSH
82129: LD_VAR 0 1
82133: PPUSH
82134: LD_VAR 0 6
82138: PPUSH
82139: CALL 81424 0 2
82143: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
82144: LD_VAR 0 1
82148: PPUSH
82149: LD_VAR 0 5
82153: PUSH
82154: LD_INT 1
82156: ARRAY
82157: PPUSH
82158: LD_VAR 0 5
82162: PUSH
82163: LD_INT 2
82165: ARRAY
82166: PPUSH
82167: CALL_OW 111
// end ;
82171: LD_VAR 0 3
82175: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
82176: LD_INT 0
82178: PPUSH
82179: PPUSH
82180: PPUSH
// uc_side = 0 ;
82181: LD_ADDR_OWVAR 20
82185: PUSH
82186: LD_INT 0
82188: ST_TO_ADDR
// uc_nation = 0 ;
82189: LD_ADDR_OWVAR 21
82193: PUSH
82194: LD_INT 0
82196: ST_TO_ADDR
// InitHc_All ( ) ;
82197: CALL_OW 584
// InitVc ;
82201: CALL_OW 20
// if mastodonts then
82205: LD_VAR 0 6
82209: IFFALSE 82276
// for i = 1 to mastodonts do
82211: LD_ADDR_VAR 0 11
82215: PUSH
82216: DOUBLE
82217: LD_INT 1
82219: DEC
82220: ST_TO_ADDR
82221: LD_VAR 0 6
82225: PUSH
82226: FOR_TO
82227: IFFALSE 82274
// begin vc_chassis := 31 ;
82229: LD_ADDR_OWVAR 37
82233: PUSH
82234: LD_INT 31
82236: ST_TO_ADDR
// vc_control := control_rider ;
82237: LD_ADDR_OWVAR 38
82241: PUSH
82242: LD_INT 4
82244: ST_TO_ADDR
// animal := CreateVehicle ;
82245: LD_ADDR_VAR 0 12
82249: PUSH
82250: CALL_OW 45
82254: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82255: LD_VAR 0 12
82259: PPUSH
82260: LD_VAR 0 8
82264: PPUSH
82265: LD_INT 0
82267: PPUSH
82268: CALL 84411 0 3
// end ;
82272: GO 82226
82274: POP
82275: POP
// if horses then
82276: LD_VAR 0 5
82280: IFFALSE 82347
// for i = 1 to horses do
82282: LD_ADDR_VAR 0 11
82286: PUSH
82287: DOUBLE
82288: LD_INT 1
82290: DEC
82291: ST_TO_ADDR
82292: LD_VAR 0 5
82296: PUSH
82297: FOR_TO
82298: IFFALSE 82345
// begin hc_class := 21 ;
82300: LD_ADDR_OWVAR 28
82304: PUSH
82305: LD_INT 21
82307: ST_TO_ADDR
// hc_gallery :=  ;
82308: LD_ADDR_OWVAR 33
82312: PUSH
82313: LD_STRING 
82315: ST_TO_ADDR
// animal := CreateHuman ;
82316: LD_ADDR_VAR 0 12
82320: PUSH
82321: CALL_OW 44
82325: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82326: LD_VAR 0 12
82330: PPUSH
82331: LD_VAR 0 8
82335: PPUSH
82336: LD_INT 0
82338: PPUSH
82339: CALL 84411 0 3
// end ;
82343: GO 82297
82345: POP
82346: POP
// if birds then
82347: LD_VAR 0 1
82351: IFFALSE 82418
// for i = 1 to birds do
82353: LD_ADDR_VAR 0 11
82357: PUSH
82358: DOUBLE
82359: LD_INT 1
82361: DEC
82362: ST_TO_ADDR
82363: LD_VAR 0 1
82367: PUSH
82368: FOR_TO
82369: IFFALSE 82416
// begin hc_class = 18 ;
82371: LD_ADDR_OWVAR 28
82375: PUSH
82376: LD_INT 18
82378: ST_TO_ADDR
// hc_gallery =  ;
82379: LD_ADDR_OWVAR 33
82383: PUSH
82384: LD_STRING 
82386: ST_TO_ADDR
// animal := CreateHuman ;
82387: LD_ADDR_VAR 0 12
82391: PUSH
82392: CALL_OW 44
82396: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82397: LD_VAR 0 12
82401: PPUSH
82402: LD_VAR 0 8
82406: PPUSH
82407: LD_INT 0
82409: PPUSH
82410: CALL 84411 0 3
// end ;
82414: GO 82368
82416: POP
82417: POP
// if tigers then
82418: LD_VAR 0 2
82422: IFFALSE 82506
// for i = 1 to tigers do
82424: LD_ADDR_VAR 0 11
82428: PUSH
82429: DOUBLE
82430: LD_INT 1
82432: DEC
82433: ST_TO_ADDR
82434: LD_VAR 0 2
82438: PUSH
82439: FOR_TO
82440: IFFALSE 82504
// begin hc_class = class_tiger ;
82442: LD_ADDR_OWVAR 28
82446: PUSH
82447: LD_INT 14
82449: ST_TO_ADDR
// hc_gallery =  ;
82450: LD_ADDR_OWVAR 33
82454: PUSH
82455: LD_STRING 
82457: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
82458: LD_ADDR_OWVAR 35
82462: PUSH
82463: LD_INT 7
82465: NEG
82466: PPUSH
82467: LD_INT 7
82469: PPUSH
82470: CALL_OW 12
82474: ST_TO_ADDR
// animal := CreateHuman ;
82475: LD_ADDR_VAR 0 12
82479: PUSH
82480: CALL_OW 44
82484: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82485: LD_VAR 0 12
82489: PPUSH
82490: LD_VAR 0 8
82494: PPUSH
82495: LD_INT 0
82497: PPUSH
82498: CALL 84411 0 3
// end ;
82502: GO 82439
82504: POP
82505: POP
// if apemans then
82506: LD_VAR 0 3
82510: IFFALSE 82633
// for i = 1 to apemans do
82512: LD_ADDR_VAR 0 11
82516: PUSH
82517: DOUBLE
82518: LD_INT 1
82520: DEC
82521: ST_TO_ADDR
82522: LD_VAR 0 3
82526: PUSH
82527: FOR_TO
82528: IFFALSE 82631
// begin hc_class = class_apeman ;
82530: LD_ADDR_OWVAR 28
82534: PUSH
82535: LD_INT 12
82537: ST_TO_ADDR
// hc_gallery =  ;
82538: LD_ADDR_OWVAR 33
82542: PUSH
82543: LD_STRING 
82545: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
82546: LD_ADDR_OWVAR 35
82550: PUSH
82551: LD_INT 2
82553: NEG
82554: PPUSH
82555: LD_INT 2
82557: PPUSH
82558: CALL_OW 12
82562: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
82563: LD_ADDR_OWVAR 31
82567: PUSH
82568: LD_INT 1
82570: PPUSH
82571: LD_INT 3
82573: PPUSH
82574: CALL_OW 12
82578: PUSH
82579: LD_INT 1
82581: PPUSH
82582: LD_INT 3
82584: PPUSH
82585: CALL_OW 12
82589: PUSH
82590: LD_INT 0
82592: PUSH
82593: LD_INT 0
82595: PUSH
82596: EMPTY
82597: LIST
82598: LIST
82599: LIST
82600: LIST
82601: ST_TO_ADDR
// animal := CreateHuman ;
82602: LD_ADDR_VAR 0 12
82606: PUSH
82607: CALL_OW 44
82611: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82612: LD_VAR 0 12
82616: PPUSH
82617: LD_VAR 0 8
82621: PPUSH
82622: LD_INT 0
82624: PPUSH
82625: CALL 84411 0 3
// end ;
82629: GO 82527
82631: POP
82632: POP
// if enchidnas then
82633: LD_VAR 0 4
82637: IFFALSE 82704
// for i = 1 to enchidnas do
82639: LD_ADDR_VAR 0 11
82643: PUSH
82644: DOUBLE
82645: LD_INT 1
82647: DEC
82648: ST_TO_ADDR
82649: LD_VAR 0 4
82653: PUSH
82654: FOR_TO
82655: IFFALSE 82702
// begin hc_class = 13 ;
82657: LD_ADDR_OWVAR 28
82661: PUSH
82662: LD_INT 13
82664: ST_TO_ADDR
// hc_gallery =  ;
82665: LD_ADDR_OWVAR 33
82669: PUSH
82670: LD_STRING 
82672: ST_TO_ADDR
// animal := CreateHuman ;
82673: LD_ADDR_VAR 0 12
82677: PUSH
82678: CALL_OW 44
82682: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82683: LD_VAR 0 12
82687: PPUSH
82688: LD_VAR 0 8
82692: PPUSH
82693: LD_INT 0
82695: PPUSH
82696: CALL 84411 0 3
// end ;
82700: GO 82654
82702: POP
82703: POP
// if fishes then
82704: LD_VAR 0 7
82708: IFFALSE 82775
// for i = 1 to fishes do
82710: LD_ADDR_VAR 0 11
82714: PUSH
82715: DOUBLE
82716: LD_INT 1
82718: DEC
82719: ST_TO_ADDR
82720: LD_VAR 0 7
82724: PUSH
82725: FOR_TO
82726: IFFALSE 82773
// begin hc_class = 20 ;
82728: LD_ADDR_OWVAR 28
82732: PUSH
82733: LD_INT 20
82735: ST_TO_ADDR
// hc_gallery =  ;
82736: LD_ADDR_OWVAR 33
82740: PUSH
82741: LD_STRING 
82743: ST_TO_ADDR
// animal := CreateHuman ;
82744: LD_ADDR_VAR 0 12
82748: PUSH
82749: CALL_OW 44
82753: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
82754: LD_VAR 0 12
82758: PPUSH
82759: LD_VAR 0 9
82763: PPUSH
82764: LD_INT 0
82766: PPUSH
82767: CALL 84411 0 3
// end ;
82771: GO 82725
82773: POP
82774: POP
// end ;
82775: LD_VAR 0 10
82779: RET
// export function WantHeal ( sci , unit ) ; begin
82780: LD_INT 0
82782: PPUSH
// if GetTaskList ( sci ) > 0 then
82783: LD_VAR 0 1
82787: PPUSH
82788: CALL_OW 437
82792: PUSH
82793: LD_INT 0
82795: GREATER
82796: IFFALSE 82866
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
82798: LD_VAR 0 1
82802: PPUSH
82803: CALL_OW 437
82807: PUSH
82808: LD_INT 1
82810: ARRAY
82811: PUSH
82812: LD_INT 1
82814: ARRAY
82815: PUSH
82816: LD_STRING l
82818: EQUAL
82819: PUSH
82820: LD_VAR 0 1
82824: PPUSH
82825: CALL_OW 437
82829: PUSH
82830: LD_INT 1
82832: ARRAY
82833: PUSH
82834: LD_INT 4
82836: ARRAY
82837: PUSH
82838: LD_VAR 0 2
82842: EQUAL
82843: AND
82844: IFFALSE 82856
// result := true else
82846: LD_ADDR_VAR 0 3
82850: PUSH
82851: LD_INT 1
82853: ST_TO_ADDR
82854: GO 82864
// result := false ;
82856: LD_ADDR_VAR 0 3
82860: PUSH
82861: LD_INT 0
82863: ST_TO_ADDR
// end else
82864: GO 82874
// result := false ;
82866: LD_ADDR_VAR 0 3
82870: PUSH
82871: LD_INT 0
82873: ST_TO_ADDR
// end ;
82874: LD_VAR 0 3
82878: RET
// export function HealTarget ( sci ) ; begin
82879: LD_INT 0
82881: PPUSH
// if not sci then
82882: LD_VAR 0 1
82886: NOT
82887: IFFALSE 82891
// exit ;
82889: GO 82956
// result := 0 ;
82891: LD_ADDR_VAR 0 2
82895: PUSH
82896: LD_INT 0
82898: ST_TO_ADDR
// if GetTaskList ( sci ) then
82899: LD_VAR 0 1
82903: PPUSH
82904: CALL_OW 437
82908: IFFALSE 82956
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
82910: LD_VAR 0 1
82914: PPUSH
82915: CALL_OW 437
82919: PUSH
82920: LD_INT 1
82922: ARRAY
82923: PUSH
82924: LD_INT 1
82926: ARRAY
82927: PUSH
82928: LD_STRING l
82930: EQUAL
82931: IFFALSE 82956
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
82933: LD_ADDR_VAR 0 2
82937: PUSH
82938: LD_VAR 0 1
82942: PPUSH
82943: CALL_OW 437
82947: PUSH
82948: LD_INT 1
82950: ARRAY
82951: PUSH
82952: LD_INT 4
82954: ARRAY
82955: ST_TO_ADDR
// end ;
82956: LD_VAR 0 2
82960: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
82961: LD_INT 0
82963: PPUSH
82964: PPUSH
82965: PPUSH
82966: PPUSH
// if not base_units then
82967: LD_VAR 0 1
82971: NOT
82972: IFFALSE 82976
// exit ;
82974: GO 83063
// result := false ;
82976: LD_ADDR_VAR 0 2
82980: PUSH
82981: LD_INT 0
82983: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
82984: LD_ADDR_VAR 0 5
82988: PUSH
82989: LD_VAR 0 1
82993: PPUSH
82994: LD_INT 21
82996: PUSH
82997: LD_INT 3
82999: PUSH
83000: EMPTY
83001: LIST
83002: LIST
83003: PPUSH
83004: CALL_OW 72
83008: ST_TO_ADDR
// if not tmp then
83009: LD_VAR 0 5
83013: NOT
83014: IFFALSE 83018
// exit ;
83016: GO 83063
// for i in tmp do
83018: LD_ADDR_VAR 0 3
83022: PUSH
83023: LD_VAR 0 5
83027: PUSH
83028: FOR_IN
83029: IFFALSE 83061
// begin result := EnemyInRange ( i , 22 ) ;
83031: LD_ADDR_VAR 0 2
83035: PUSH
83036: LD_VAR 0 3
83040: PPUSH
83041: LD_INT 22
83043: PPUSH
83044: CALL 81299 0 2
83048: ST_TO_ADDR
// if result then
83049: LD_VAR 0 2
83053: IFFALSE 83059
// exit ;
83055: POP
83056: POP
83057: GO 83063
// end ;
83059: GO 83028
83061: POP
83062: POP
// end ;
83063: LD_VAR 0 2
83067: RET
// export function FilterByTag ( units , tag ) ; begin
83068: LD_INT 0
83070: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
83071: LD_ADDR_VAR 0 3
83075: PUSH
83076: LD_VAR 0 1
83080: PPUSH
83081: LD_INT 120
83083: PUSH
83084: LD_VAR 0 2
83088: PUSH
83089: EMPTY
83090: LIST
83091: LIST
83092: PPUSH
83093: CALL_OW 72
83097: ST_TO_ADDR
// end ;
83098: LD_VAR 0 3
83102: RET
// export function IsDriver ( un ) ; begin
83103: LD_INT 0
83105: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
83106: LD_ADDR_VAR 0 2
83110: PUSH
83111: LD_VAR 0 1
83115: PUSH
83116: LD_INT 55
83118: PUSH
83119: EMPTY
83120: LIST
83121: PPUSH
83122: CALL_OW 69
83126: IN
83127: ST_TO_ADDR
// end ;
83128: LD_VAR 0 2
83132: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
83133: LD_INT 0
83135: PPUSH
83136: PPUSH
// list := [ ] ;
83137: LD_ADDR_VAR 0 5
83141: PUSH
83142: EMPTY
83143: ST_TO_ADDR
// case d of 0 :
83144: LD_VAR 0 3
83148: PUSH
83149: LD_INT 0
83151: DOUBLE
83152: EQUAL
83153: IFTRUE 83157
83155: GO 83290
83157: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
83158: LD_ADDR_VAR 0 5
83162: PUSH
83163: LD_VAR 0 1
83167: PUSH
83168: LD_INT 4
83170: MINUS
83171: PUSH
83172: LD_VAR 0 2
83176: PUSH
83177: LD_INT 4
83179: MINUS
83180: PUSH
83181: LD_INT 2
83183: PUSH
83184: EMPTY
83185: LIST
83186: LIST
83187: LIST
83188: PUSH
83189: LD_VAR 0 1
83193: PUSH
83194: LD_INT 3
83196: MINUS
83197: PUSH
83198: LD_VAR 0 2
83202: PUSH
83203: LD_INT 1
83205: PUSH
83206: EMPTY
83207: LIST
83208: LIST
83209: LIST
83210: PUSH
83211: LD_VAR 0 1
83215: PUSH
83216: LD_INT 4
83218: PLUS
83219: PUSH
83220: LD_VAR 0 2
83224: PUSH
83225: LD_INT 4
83227: PUSH
83228: EMPTY
83229: LIST
83230: LIST
83231: LIST
83232: PUSH
83233: LD_VAR 0 1
83237: PUSH
83238: LD_INT 3
83240: PLUS
83241: PUSH
83242: LD_VAR 0 2
83246: PUSH
83247: LD_INT 3
83249: PLUS
83250: PUSH
83251: LD_INT 5
83253: PUSH
83254: EMPTY
83255: LIST
83256: LIST
83257: LIST
83258: PUSH
83259: LD_VAR 0 1
83263: PUSH
83264: LD_VAR 0 2
83268: PUSH
83269: LD_INT 4
83271: PLUS
83272: PUSH
83273: LD_INT 0
83275: PUSH
83276: EMPTY
83277: LIST
83278: LIST
83279: LIST
83280: PUSH
83281: EMPTY
83282: LIST
83283: LIST
83284: LIST
83285: LIST
83286: LIST
83287: ST_TO_ADDR
// end ; 1 :
83288: GO 83988
83290: LD_INT 1
83292: DOUBLE
83293: EQUAL
83294: IFTRUE 83298
83296: GO 83431
83298: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
83299: LD_ADDR_VAR 0 5
83303: PUSH
83304: LD_VAR 0 1
83308: PUSH
83309: LD_VAR 0 2
83313: PUSH
83314: LD_INT 4
83316: MINUS
83317: PUSH
83318: LD_INT 3
83320: PUSH
83321: EMPTY
83322: LIST
83323: LIST
83324: LIST
83325: PUSH
83326: LD_VAR 0 1
83330: PUSH
83331: LD_INT 3
83333: MINUS
83334: PUSH
83335: LD_VAR 0 2
83339: PUSH
83340: LD_INT 3
83342: MINUS
83343: PUSH
83344: LD_INT 2
83346: PUSH
83347: EMPTY
83348: LIST
83349: LIST
83350: LIST
83351: PUSH
83352: LD_VAR 0 1
83356: PUSH
83357: LD_INT 4
83359: MINUS
83360: PUSH
83361: LD_VAR 0 2
83365: PUSH
83366: LD_INT 1
83368: PUSH
83369: EMPTY
83370: LIST
83371: LIST
83372: LIST
83373: PUSH
83374: LD_VAR 0 1
83378: PUSH
83379: LD_VAR 0 2
83383: PUSH
83384: LD_INT 3
83386: PLUS
83387: PUSH
83388: LD_INT 0
83390: PUSH
83391: EMPTY
83392: LIST
83393: LIST
83394: LIST
83395: PUSH
83396: LD_VAR 0 1
83400: PUSH
83401: LD_INT 4
83403: PLUS
83404: PUSH
83405: LD_VAR 0 2
83409: PUSH
83410: LD_INT 4
83412: PLUS
83413: PUSH
83414: LD_INT 5
83416: PUSH
83417: EMPTY
83418: LIST
83419: LIST
83420: LIST
83421: PUSH
83422: EMPTY
83423: LIST
83424: LIST
83425: LIST
83426: LIST
83427: LIST
83428: ST_TO_ADDR
// end ; 2 :
83429: GO 83988
83431: LD_INT 2
83433: DOUBLE
83434: EQUAL
83435: IFTRUE 83439
83437: GO 83568
83439: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
83440: LD_ADDR_VAR 0 5
83444: PUSH
83445: LD_VAR 0 1
83449: PUSH
83450: LD_VAR 0 2
83454: PUSH
83455: LD_INT 3
83457: MINUS
83458: PUSH
83459: LD_INT 3
83461: PUSH
83462: EMPTY
83463: LIST
83464: LIST
83465: LIST
83466: PUSH
83467: LD_VAR 0 1
83471: PUSH
83472: LD_INT 4
83474: PLUS
83475: PUSH
83476: LD_VAR 0 2
83480: PUSH
83481: LD_INT 4
83483: PUSH
83484: EMPTY
83485: LIST
83486: LIST
83487: LIST
83488: PUSH
83489: LD_VAR 0 1
83493: PUSH
83494: LD_VAR 0 2
83498: PUSH
83499: LD_INT 4
83501: PLUS
83502: PUSH
83503: LD_INT 0
83505: PUSH
83506: EMPTY
83507: LIST
83508: LIST
83509: LIST
83510: PUSH
83511: LD_VAR 0 1
83515: PUSH
83516: LD_INT 3
83518: MINUS
83519: PUSH
83520: LD_VAR 0 2
83524: PUSH
83525: LD_INT 1
83527: PUSH
83528: EMPTY
83529: LIST
83530: LIST
83531: LIST
83532: PUSH
83533: LD_VAR 0 1
83537: PUSH
83538: LD_INT 4
83540: MINUS
83541: PUSH
83542: LD_VAR 0 2
83546: PUSH
83547: LD_INT 4
83549: MINUS
83550: PUSH
83551: LD_INT 2
83553: PUSH
83554: EMPTY
83555: LIST
83556: LIST
83557: LIST
83558: PUSH
83559: EMPTY
83560: LIST
83561: LIST
83562: LIST
83563: LIST
83564: LIST
83565: ST_TO_ADDR
// end ; 3 :
83566: GO 83988
83568: LD_INT 3
83570: DOUBLE
83571: EQUAL
83572: IFTRUE 83576
83574: GO 83709
83576: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
83577: LD_ADDR_VAR 0 5
83581: PUSH
83582: LD_VAR 0 1
83586: PUSH
83587: LD_INT 3
83589: PLUS
83590: PUSH
83591: LD_VAR 0 2
83595: PUSH
83596: LD_INT 4
83598: PUSH
83599: EMPTY
83600: LIST
83601: LIST
83602: LIST
83603: PUSH
83604: LD_VAR 0 1
83608: PUSH
83609: LD_INT 4
83611: PLUS
83612: PUSH
83613: LD_VAR 0 2
83617: PUSH
83618: LD_INT 4
83620: PLUS
83621: PUSH
83622: LD_INT 5
83624: PUSH
83625: EMPTY
83626: LIST
83627: LIST
83628: LIST
83629: PUSH
83630: LD_VAR 0 1
83634: PUSH
83635: LD_INT 4
83637: MINUS
83638: PUSH
83639: LD_VAR 0 2
83643: PUSH
83644: LD_INT 1
83646: PUSH
83647: EMPTY
83648: LIST
83649: LIST
83650: LIST
83651: PUSH
83652: LD_VAR 0 1
83656: PUSH
83657: LD_VAR 0 2
83661: PUSH
83662: LD_INT 4
83664: MINUS
83665: PUSH
83666: LD_INT 3
83668: PUSH
83669: EMPTY
83670: LIST
83671: LIST
83672: LIST
83673: PUSH
83674: LD_VAR 0 1
83678: PUSH
83679: LD_INT 3
83681: MINUS
83682: PUSH
83683: LD_VAR 0 2
83687: PUSH
83688: LD_INT 3
83690: MINUS
83691: PUSH
83692: LD_INT 2
83694: PUSH
83695: EMPTY
83696: LIST
83697: LIST
83698: LIST
83699: PUSH
83700: EMPTY
83701: LIST
83702: LIST
83703: LIST
83704: LIST
83705: LIST
83706: ST_TO_ADDR
// end ; 4 :
83707: GO 83988
83709: LD_INT 4
83711: DOUBLE
83712: EQUAL
83713: IFTRUE 83717
83715: GO 83850
83717: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
83718: LD_ADDR_VAR 0 5
83722: PUSH
83723: LD_VAR 0 1
83727: PUSH
83728: LD_VAR 0 2
83732: PUSH
83733: LD_INT 4
83735: PLUS
83736: PUSH
83737: LD_INT 0
83739: PUSH
83740: EMPTY
83741: LIST
83742: LIST
83743: LIST
83744: PUSH
83745: LD_VAR 0 1
83749: PUSH
83750: LD_INT 3
83752: PLUS
83753: PUSH
83754: LD_VAR 0 2
83758: PUSH
83759: LD_INT 3
83761: PLUS
83762: PUSH
83763: LD_INT 5
83765: PUSH
83766: EMPTY
83767: LIST
83768: LIST
83769: LIST
83770: PUSH
83771: LD_VAR 0 1
83775: PUSH
83776: LD_INT 4
83778: PLUS
83779: PUSH
83780: LD_VAR 0 2
83784: PUSH
83785: LD_INT 4
83787: PUSH
83788: EMPTY
83789: LIST
83790: LIST
83791: LIST
83792: PUSH
83793: LD_VAR 0 1
83797: PUSH
83798: LD_VAR 0 2
83802: PUSH
83803: LD_INT 3
83805: MINUS
83806: PUSH
83807: LD_INT 3
83809: PUSH
83810: EMPTY
83811: LIST
83812: LIST
83813: LIST
83814: PUSH
83815: LD_VAR 0 1
83819: PUSH
83820: LD_INT 4
83822: MINUS
83823: PUSH
83824: LD_VAR 0 2
83828: PUSH
83829: LD_INT 4
83831: MINUS
83832: PUSH
83833: LD_INT 2
83835: PUSH
83836: EMPTY
83837: LIST
83838: LIST
83839: LIST
83840: PUSH
83841: EMPTY
83842: LIST
83843: LIST
83844: LIST
83845: LIST
83846: LIST
83847: ST_TO_ADDR
// end ; 5 :
83848: GO 83988
83850: LD_INT 5
83852: DOUBLE
83853: EQUAL
83854: IFTRUE 83858
83856: GO 83987
83858: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
83859: LD_ADDR_VAR 0 5
83863: PUSH
83864: LD_VAR 0 1
83868: PUSH
83869: LD_INT 4
83871: MINUS
83872: PUSH
83873: LD_VAR 0 2
83877: PUSH
83878: LD_INT 1
83880: PUSH
83881: EMPTY
83882: LIST
83883: LIST
83884: LIST
83885: PUSH
83886: LD_VAR 0 1
83890: PUSH
83891: LD_VAR 0 2
83895: PUSH
83896: LD_INT 4
83898: MINUS
83899: PUSH
83900: LD_INT 3
83902: PUSH
83903: EMPTY
83904: LIST
83905: LIST
83906: LIST
83907: PUSH
83908: LD_VAR 0 1
83912: PUSH
83913: LD_INT 4
83915: PLUS
83916: PUSH
83917: LD_VAR 0 2
83921: PUSH
83922: LD_INT 4
83924: PLUS
83925: PUSH
83926: LD_INT 5
83928: PUSH
83929: EMPTY
83930: LIST
83931: LIST
83932: LIST
83933: PUSH
83934: LD_VAR 0 1
83938: PUSH
83939: LD_INT 3
83941: PLUS
83942: PUSH
83943: LD_VAR 0 2
83947: PUSH
83948: LD_INT 4
83950: PUSH
83951: EMPTY
83952: LIST
83953: LIST
83954: LIST
83955: PUSH
83956: LD_VAR 0 1
83960: PUSH
83961: LD_VAR 0 2
83965: PUSH
83966: LD_INT 3
83968: PLUS
83969: PUSH
83970: LD_INT 0
83972: PUSH
83973: EMPTY
83974: LIST
83975: LIST
83976: LIST
83977: PUSH
83978: EMPTY
83979: LIST
83980: LIST
83981: LIST
83982: LIST
83983: LIST
83984: ST_TO_ADDR
// end ; end ;
83985: GO 83988
83987: POP
// result := list ;
83988: LD_ADDR_VAR 0 4
83992: PUSH
83993: LD_VAR 0 5
83997: ST_TO_ADDR
// end ;
83998: LD_VAR 0 4
84002: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
84003: LD_INT 0
84005: PPUSH
84006: PPUSH
84007: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
84008: LD_VAR 0 1
84012: NOT
84013: PUSH
84014: LD_VAR 0 2
84018: PUSH
84019: LD_INT 1
84021: PUSH
84022: LD_INT 2
84024: PUSH
84025: LD_INT 3
84027: PUSH
84028: LD_INT 4
84030: PUSH
84031: EMPTY
84032: LIST
84033: LIST
84034: LIST
84035: LIST
84036: IN
84037: NOT
84038: OR
84039: IFFALSE 84043
// exit ;
84041: GO 84135
// tmp := [ ] ;
84043: LD_ADDR_VAR 0 5
84047: PUSH
84048: EMPTY
84049: ST_TO_ADDR
// for i in units do
84050: LD_ADDR_VAR 0 4
84054: PUSH
84055: LD_VAR 0 1
84059: PUSH
84060: FOR_IN
84061: IFFALSE 84104
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
84063: LD_ADDR_VAR 0 5
84067: PUSH
84068: LD_VAR 0 5
84072: PPUSH
84073: LD_VAR 0 5
84077: PUSH
84078: LD_INT 1
84080: PLUS
84081: PPUSH
84082: LD_VAR 0 4
84086: PPUSH
84087: LD_VAR 0 2
84091: PPUSH
84092: CALL_OW 259
84096: PPUSH
84097: CALL_OW 2
84101: ST_TO_ADDR
84102: GO 84060
84104: POP
84105: POP
// if not tmp then
84106: LD_VAR 0 5
84110: NOT
84111: IFFALSE 84115
// exit ;
84113: GO 84135
// result := SortListByListDesc ( units , tmp ) ;
84115: LD_ADDR_VAR 0 3
84119: PUSH
84120: LD_VAR 0 1
84124: PPUSH
84125: LD_VAR 0 5
84129: PPUSH
84130: CALL_OW 77
84134: ST_TO_ADDR
// end ;
84135: LD_VAR 0 3
84139: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
84140: LD_INT 0
84142: PPUSH
84143: PPUSH
84144: PPUSH
// result := false ;
84145: LD_ADDR_VAR 0 3
84149: PUSH
84150: LD_INT 0
84152: ST_TO_ADDR
// x := GetX ( building ) ;
84153: LD_ADDR_VAR 0 4
84157: PUSH
84158: LD_VAR 0 2
84162: PPUSH
84163: CALL_OW 250
84167: ST_TO_ADDR
// y := GetY ( building ) ;
84168: LD_ADDR_VAR 0 5
84172: PUSH
84173: LD_VAR 0 2
84177: PPUSH
84178: CALL_OW 251
84182: ST_TO_ADDR
// if not building or not x or not y then
84183: LD_VAR 0 2
84187: NOT
84188: PUSH
84189: LD_VAR 0 4
84193: NOT
84194: OR
84195: PUSH
84196: LD_VAR 0 5
84200: NOT
84201: OR
84202: IFFALSE 84206
// exit ;
84204: GO 84298
// if GetTaskList ( unit ) then
84206: LD_VAR 0 1
84210: PPUSH
84211: CALL_OW 437
84215: IFFALSE 84298
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
84217: LD_STRING e
84219: PUSH
84220: LD_VAR 0 1
84224: PPUSH
84225: CALL_OW 437
84229: PUSH
84230: LD_INT 1
84232: ARRAY
84233: PUSH
84234: LD_INT 1
84236: ARRAY
84237: EQUAL
84238: PUSH
84239: LD_VAR 0 4
84243: PUSH
84244: LD_VAR 0 1
84248: PPUSH
84249: CALL_OW 437
84253: PUSH
84254: LD_INT 1
84256: ARRAY
84257: PUSH
84258: LD_INT 2
84260: ARRAY
84261: EQUAL
84262: AND
84263: PUSH
84264: LD_VAR 0 5
84268: PUSH
84269: LD_VAR 0 1
84273: PPUSH
84274: CALL_OW 437
84278: PUSH
84279: LD_INT 1
84281: ARRAY
84282: PUSH
84283: LD_INT 3
84285: ARRAY
84286: EQUAL
84287: AND
84288: IFFALSE 84298
// result := true end ;
84290: LD_ADDR_VAR 0 3
84294: PUSH
84295: LD_INT 1
84297: ST_TO_ADDR
// end ;
84298: LD_VAR 0 3
84302: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
84303: LD_INT 0
84305: PPUSH
// result := false ;
84306: LD_ADDR_VAR 0 4
84310: PUSH
84311: LD_INT 0
84313: ST_TO_ADDR
// if GetTaskList ( unit ) then
84314: LD_VAR 0 1
84318: PPUSH
84319: CALL_OW 437
84323: IFFALSE 84406
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
84325: LD_STRING M
84327: PUSH
84328: LD_VAR 0 1
84332: PPUSH
84333: CALL_OW 437
84337: PUSH
84338: LD_INT 1
84340: ARRAY
84341: PUSH
84342: LD_INT 1
84344: ARRAY
84345: EQUAL
84346: PUSH
84347: LD_VAR 0 2
84351: PUSH
84352: LD_VAR 0 1
84356: PPUSH
84357: CALL_OW 437
84361: PUSH
84362: LD_INT 1
84364: ARRAY
84365: PUSH
84366: LD_INT 2
84368: ARRAY
84369: EQUAL
84370: AND
84371: PUSH
84372: LD_VAR 0 3
84376: PUSH
84377: LD_VAR 0 1
84381: PPUSH
84382: CALL_OW 437
84386: PUSH
84387: LD_INT 1
84389: ARRAY
84390: PUSH
84391: LD_INT 3
84393: ARRAY
84394: EQUAL
84395: AND
84396: IFFALSE 84406
// result := true ;
84398: LD_ADDR_VAR 0 4
84402: PUSH
84403: LD_INT 1
84405: ST_TO_ADDR
// end ; end ;
84406: LD_VAR 0 4
84410: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
84411: LD_INT 0
84413: PPUSH
84414: PPUSH
84415: PPUSH
84416: PPUSH
// if not unit or not area then
84417: LD_VAR 0 1
84421: NOT
84422: PUSH
84423: LD_VAR 0 2
84427: NOT
84428: OR
84429: IFFALSE 84433
// exit ;
84431: GO 84597
// tmp := AreaToList ( area , i ) ;
84433: LD_ADDR_VAR 0 6
84437: PUSH
84438: LD_VAR 0 2
84442: PPUSH
84443: LD_VAR 0 5
84447: PPUSH
84448: CALL_OW 517
84452: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
84453: LD_ADDR_VAR 0 5
84457: PUSH
84458: DOUBLE
84459: LD_INT 1
84461: DEC
84462: ST_TO_ADDR
84463: LD_VAR 0 6
84467: PUSH
84468: LD_INT 1
84470: ARRAY
84471: PUSH
84472: FOR_TO
84473: IFFALSE 84595
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
84475: LD_ADDR_VAR 0 7
84479: PUSH
84480: LD_VAR 0 6
84484: PUSH
84485: LD_INT 1
84487: ARRAY
84488: PUSH
84489: LD_VAR 0 5
84493: ARRAY
84494: PUSH
84495: LD_VAR 0 6
84499: PUSH
84500: LD_INT 2
84502: ARRAY
84503: PUSH
84504: LD_VAR 0 5
84508: ARRAY
84509: PUSH
84510: EMPTY
84511: LIST
84512: LIST
84513: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
84514: LD_VAR 0 7
84518: PUSH
84519: LD_INT 1
84521: ARRAY
84522: PPUSH
84523: LD_VAR 0 7
84527: PUSH
84528: LD_INT 2
84530: ARRAY
84531: PPUSH
84532: CALL_OW 428
84536: PUSH
84537: LD_INT 0
84539: EQUAL
84540: IFFALSE 84593
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
84542: LD_VAR 0 1
84546: PPUSH
84547: LD_VAR 0 7
84551: PUSH
84552: LD_INT 1
84554: ARRAY
84555: PPUSH
84556: LD_VAR 0 7
84560: PUSH
84561: LD_INT 2
84563: ARRAY
84564: PPUSH
84565: LD_VAR 0 3
84569: PPUSH
84570: CALL_OW 48
// result := IsPlaced ( unit ) ;
84574: LD_ADDR_VAR 0 4
84578: PUSH
84579: LD_VAR 0 1
84583: PPUSH
84584: CALL_OW 305
84588: ST_TO_ADDR
// exit ;
84589: POP
84590: POP
84591: GO 84597
// end ; end ;
84593: GO 84472
84595: POP
84596: POP
// end ;
84597: LD_VAR 0 4
84601: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
84602: LD_INT 0
84604: PPUSH
84605: PPUSH
84606: PPUSH
// if not side or side > 8 then
84607: LD_VAR 0 1
84611: NOT
84612: PUSH
84613: LD_VAR 0 1
84617: PUSH
84618: LD_INT 8
84620: GREATER
84621: OR
84622: IFFALSE 84626
// exit ;
84624: GO 84813
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
84626: LD_ADDR_VAR 0 4
84630: PUSH
84631: LD_INT 22
84633: PUSH
84634: LD_VAR 0 1
84638: PUSH
84639: EMPTY
84640: LIST
84641: LIST
84642: PUSH
84643: LD_INT 21
84645: PUSH
84646: LD_INT 3
84648: PUSH
84649: EMPTY
84650: LIST
84651: LIST
84652: PUSH
84653: EMPTY
84654: LIST
84655: LIST
84656: PPUSH
84657: CALL_OW 69
84661: ST_TO_ADDR
// if not tmp then
84662: LD_VAR 0 4
84666: NOT
84667: IFFALSE 84671
// exit ;
84669: GO 84813
// enable_addtolog := true ;
84671: LD_ADDR_OWVAR 81
84675: PUSH
84676: LD_INT 1
84678: ST_TO_ADDR
// AddToLog ( [ ) ;
84679: LD_STRING [
84681: PPUSH
84682: CALL_OW 561
// for i in tmp do
84686: LD_ADDR_VAR 0 3
84690: PUSH
84691: LD_VAR 0 4
84695: PUSH
84696: FOR_IN
84697: IFFALSE 84804
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
84699: LD_STRING [
84701: PUSH
84702: LD_VAR 0 3
84706: PPUSH
84707: CALL_OW 266
84711: STR
84712: PUSH
84713: LD_STRING , 
84715: STR
84716: PUSH
84717: LD_VAR 0 3
84721: PPUSH
84722: CALL_OW 250
84726: STR
84727: PUSH
84728: LD_STRING , 
84730: STR
84731: PUSH
84732: LD_VAR 0 3
84736: PPUSH
84737: CALL_OW 251
84741: STR
84742: PUSH
84743: LD_STRING , 
84745: STR
84746: PUSH
84747: LD_VAR 0 3
84751: PPUSH
84752: CALL_OW 254
84756: STR
84757: PUSH
84758: LD_STRING , 
84760: STR
84761: PUSH
84762: LD_VAR 0 3
84766: PPUSH
84767: LD_INT 1
84769: PPUSH
84770: CALL_OW 268
84774: STR
84775: PUSH
84776: LD_STRING , 
84778: STR
84779: PUSH
84780: LD_VAR 0 3
84784: PPUSH
84785: LD_INT 2
84787: PPUSH
84788: CALL_OW 268
84792: STR
84793: PUSH
84794: LD_STRING ],
84796: STR
84797: PPUSH
84798: CALL_OW 561
// end ;
84802: GO 84696
84804: POP
84805: POP
// AddToLog ( ]; ) ;
84806: LD_STRING ];
84808: PPUSH
84809: CALL_OW 561
// end ;
84813: LD_VAR 0 2
84817: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
84818: LD_INT 0
84820: PPUSH
84821: PPUSH
84822: PPUSH
84823: PPUSH
84824: PPUSH
// if not area or not rate or not max then
84825: LD_VAR 0 1
84829: NOT
84830: PUSH
84831: LD_VAR 0 2
84835: NOT
84836: OR
84837: PUSH
84838: LD_VAR 0 4
84842: NOT
84843: OR
84844: IFFALSE 84848
// exit ;
84846: GO 85037
// while 1 do
84848: LD_INT 1
84850: IFFALSE 85037
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
84852: LD_ADDR_VAR 0 9
84856: PUSH
84857: LD_VAR 0 1
84861: PPUSH
84862: LD_INT 1
84864: PPUSH
84865: CALL_OW 287
84869: PUSH
84870: LD_INT 10
84872: MUL
84873: ST_TO_ADDR
// r := rate / 10 ;
84874: LD_ADDR_VAR 0 7
84878: PUSH
84879: LD_VAR 0 2
84883: PUSH
84884: LD_INT 10
84886: DIVREAL
84887: ST_TO_ADDR
// time := 1 1$00 ;
84888: LD_ADDR_VAR 0 8
84892: PUSH
84893: LD_INT 2100
84895: ST_TO_ADDR
// if amount < min then
84896: LD_VAR 0 9
84900: PUSH
84901: LD_VAR 0 3
84905: LESS
84906: IFFALSE 84924
// r := r * 2 else
84908: LD_ADDR_VAR 0 7
84912: PUSH
84913: LD_VAR 0 7
84917: PUSH
84918: LD_INT 2
84920: MUL
84921: ST_TO_ADDR
84922: GO 84950
// if amount > max then
84924: LD_VAR 0 9
84928: PUSH
84929: LD_VAR 0 4
84933: GREATER
84934: IFFALSE 84950
// r := r / 2 ;
84936: LD_ADDR_VAR 0 7
84940: PUSH
84941: LD_VAR 0 7
84945: PUSH
84946: LD_INT 2
84948: DIVREAL
84949: ST_TO_ADDR
// time := time / r ;
84950: LD_ADDR_VAR 0 8
84954: PUSH
84955: LD_VAR 0 8
84959: PUSH
84960: LD_VAR 0 7
84964: DIVREAL
84965: ST_TO_ADDR
// if time < 0 then
84966: LD_VAR 0 8
84970: PUSH
84971: LD_INT 0
84973: LESS
84974: IFFALSE 84991
// time := time * - 1 ;
84976: LD_ADDR_VAR 0 8
84980: PUSH
84981: LD_VAR 0 8
84985: PUSH
84986: LD_INT 1
84988: NEG
84989: MUL
84990: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
84991: LD_VAR 0 8
84995: PUSH
84996: LD_INT 35
84998: PPUSH
84999: LD_INT 875
85001: PPUSH
85002: CALL_OW 12
85006: PLUS
85007: PPUSH
85008: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
85012: LD_INT 1
85014: PPUSH
85015: LD_INT 5
85017: PPUSH
85018: CALL_OW 12
85022: PPUSH
85023: LD_VAR 0 1
85027: PPUSH
85028: LD_INT 1
85030: PPUSH
85031: CALL_OW 55
// end ;
85035: GO 84848
// end ;
85037: LD_VAR 0 5
85041: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
85042: LD_INT 0
85044: PPUSH
85045: PPUSH
85046: PPUSH
85047: PPUSH
85048: PPUSH
85049: PPUSH
85050: PPUSH
85051: PPUSH
// if not turrets or not factories then
85052: LD_VAR 0 1
85056: NOT
85057: PUSH
85058: LD_VAR 0 2
85062: NOT
85063: OR
85064: IFFALSE 85068
// exit ;
85066: GO 85375
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
85068: LD_ADDR_VAR 0 10
85072: PUSH
85073: LD_INT 5
85075: PUSH
85076: LD_INT 6
85078: PUSH
85079: EMPTY
85080: LIST
85081: LIST
85082: PUSH
85083: LD_INT 2
85085: PUSH
85086: LD_INT 4
85088: PUSH
85089: EMPTY
85090: LIST
85091: LIST
85092: PUSH
85093: LD_INT 3
85095: PUSH
85096: LD_INT 5
85098: PUSH
85099: EMPTY
85100: LIST
85101: LIST
85102: PUSH
85103: EMPTY
85104: LIST
85105: LIST
85106: LIST
85107: PUSH
85108: LD_INT 24
85110: PUSH
85111: LD_INT 25
85113: PUSH
85114: EMPTY
85115: LIST
85116: LIST
85117: PUSH
85118: LD_INT 23
85120: PUSH
85121: LD_INT 27
85123: PUSH
85124: EMPTY
85125: LIST
85126: LIST
85127: PUSH
85128: EMPTY
85129: LIST
85130: LIST
85131: PUSH
85132: LD_INT 42
85134: PUSH
85135: LD_INT 43
85137: PUSH
85138: EMPTY
85139: LIST
85140: LIST
85141: PUSH
85142: LD_INT 44
85144: PUSH
85145: LD_INT 46
85147: PUSH
85148: EMPTY
85149: LIST
85150: LIST
85151: PUSH
85152: LD_INT 45
85154: PUSH
85155: LD_INT 47
85157: PUSH
85158: EMPTY
85159: LIST
85160: LIST
85161: PUSH
85162: EMPTY
85163: LIST
85164: LIST
85165: LIST
85166: PUSH
85167: EMPTY
85168: LIST
85169: LIST
85170: LIST
85171: ST_TO_ADDR
// result := [ ] ;
85172: LD_ADDR_VAR 0 3
85176: PUSH
85177: EMPTY
85178: ST_TO_ADDR
// for i in turrets do
85179: LD_ADDR_VAR 0 4
85183: PUSH
85184: LD_VAR 0 1
85188: PUSH
85189: FOR_IN
85190: IFFALSE 85373
// begin nat := GetNation ( i ) ;
85192: LD_ADDR_VAR 0 7
85196: PUSH
85197: LD_VAR 0 4
85201: PPUSH
85202: CALL_OW 248
85206: ST_TO_ADDR
// weapon := 0 ;
85207: LD_ADDR_VAR 0 8
85211: PUSH
85212: LD_INT 0
85214: ST_TO_ADDR
// if not nat then
85215: LD_VAR 0 7
85219: NOT
85220: IFFALSE 85224
// continue ;
85222: GO 85189
// for j in list [ nat ] do
85224: LD_ADDR_VAR 0 5
85228: PUSH
85229: LD_VAR 0 10
85233: PUSH
85234: LD_VAR 0 7
85238: ARRAY
85239: PUSH
85240: FOR_IN
85241: IFFALSE 85282
// if GetBWeapon ( i ) = j [ 1 ] then
85243: LD_VAR 0 4
85247: PPUSH
85248: CALL_OW 269
85252: PUSH
85253: LD_VAR 0 5
85257: PUSH
85258: LD_INT 1
85260: ARRAY
85261: EQUAL
85262: IFFALSE 85280
// begin weapon := j [ 2 ] ;
85264: LD_ADDR_VAR 0 8
85268: PUSH
85269: LD_VAR 0 5
85273: PUSH
85274: LD_INT 2
85276: ARRAY
85277: ST_TO_ADDR
// break ;
85278: GO 85282
// end ;
85280: GO 85240
85282: POP
85283: POP
// if not weapon then
85284: LD_VAR 0 8
85288: NOT
85289: IFFALSE 85293
// continue ;
85291: GO 85189
// for k in factories do
85293: LD_ADDR_VAR 0 6
85297: PUSH
85298: LD_VAR 0 2
85302: PUSH
85303: FOR_IN
85304: IFFALSE 85369
// begin weapons := AvailableWeaponList ( k ) ;
85306: LD_ADDR_VAR 0 9
85310: PUSH
85311: LD_VAR 0 6
85315: PPUSH
85316: CALL_OW 478
85320: ST_TO_ADDR
// if not weapons then
85321: LD_VAR 0 9
85325: NOT
85326: IFFALSE 85330
// continue ;
85328: GO 85303
// if weapon in weapons then
85330: LD_VAR 0 8
85334: PUSH
85335: LD_VAR 0 9
85339: IN
85340: IFFALSE 85367
// begin result := [ i , weapon ] ;
85342: LD_ADDR_VAR 0 3
85346: PUSH
85347: LD_VAR 0 4
85351: PUSH
85352: LD_VAR 0 8
85356: PUSH
85357: EMPTY
85358: LIST
85359: LIST
85360: ST_TO_ADDR
// exit ;
85361: POP
85362: POP
85363: POP
85364: POP
85365: GO 85375
// end ; end ;
85367: GO 85303
85369: POP
85370: POP
// end ;
85371: GO 85189
85373: POP
85374: POP
// end ;
85375: LD_VAR 0 3
85379: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
85380: LD_INT 0
85382: PPUSH
// if not side or side > 8 then
85383: LD_VAR 0 3
85387: NOT
85388: PUSH
85389: LD_VAR 0 3
85393: PUSH
85394: LD_INT 8
85396: GREATER
85397: OR
85398: IFFALSE 85402
// exit ;
85400: GO 85461
// if not range then
85402: LD_VAR 0 4
85406: NOT
85407: IFFALSE 85418
// range := - 12 ;
85409: LD_ADDR_VAR 0 4
85413: PUSH
85414: LD_INT 12
85416: NEG
85417: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
85418: LD_VAR 0 1
85422: PPUSH
85423: LD_VAR 0 2
85427: PPUSH
85428: LD_VAR 0 3
85432: PPUSH
85433: LD_VAR 0 4
85437: PPUSH
85438: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
85442: LD_VAR 0 1
85446: PPUSH
85447: LD_VAR 0 2
85451: PPUSH
85452: LD_VAR 0 3
85456: PPUSH
85457: CALL_OW 331
// end ;
85461: LD_VAR 0 5
85465: RET
// export function Video ( mode ) ; begin
85466: LD_INT 0
85468: PPUSH
// ingame_video = mode ;
85469: LD_ADDR_OWVAR 52
85473: PUSH
85474: LD_VAR 0 1
85478: ST_TO_ADDR
// interface_hidden = mode ;
85479: LD_ADDR_OWVAR 54
85483: PUSH
85484: LD_VAR 0 1
85488: ST_TO_ADDR
// end ;
85489: LD_VAR 0 2
85493: RET
// export function Join ( array , element ) ; begin
85494: LD_INT 0
85496: PPUSH
// result := Replace ( array , array + 1 , element ) ;
85497: LD_ADDR_VAR 0 3
85501: PUSH
85502: LD_VAR 0 1
85506: PPUSH
85507: LD_VAR 0 1
85511: PUSH
85512: LD_INT 1
85514: PLUS
85515: PPUSH
85516: LD_VAR 0 2
85520: PPUSH
85521: CALL_OW 1
85525: ST_TO_ADDR
// end ;
85526: LD_VAR 0 3
85530: RET
// export function JoinUnion ( array , element ) ; begin
85531: LD_INT 0
85533: PPUSH
// result := array union element ;
85534: LD_ADDR_VAR 0 3
85538: PUSH
85539: LD_VAR 0 1
85543: PUSH
85544: LD_VAR 0 2
85548: UNION
85549: ST_TO_ADDR
// end ;
85550: LD_VAR 0 3
85554: RET
// export function GetBehemoths ( side ) ; begin
85555: LD_INT 0
85557: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
85558: LD_ADDR_VAR 0 2
85562: PUSH
85563: LD_INT 22
85565: PUSH
85566: LD_VAR 0 1
85570: PUSH
85571: EMPTY
85572: LIST
85573: LIST
85574: PUSH
85575: LD_INT 31
85577: PUSH
85578: LD_INT 25
85580: PUSH
85581: EMPTY
85582: LIST
85583: LIST
85584: PUSH
85585: EMPTY
85586: LIST
85587: LIST
85588: PPUSH
85589: CALL_OW 69
85593: ST_TO_ADDR
// end ;
85594: LD_VAR 0 2
85598: RET
// export function Shuffle ( array ) ; var i , index ; begin
85599: LD_INT 0
85601: PPUSH
85602: PPUSH
85603: PPUSH
// result := [ ] ;
85604: LD_ADDR_VAR 0 2
85608: PUSH
85609: EMPTY
85610: ST_TO_ADDR
// if not array then
85611: LD_VAR 0 1
85615: NOT
85616: IFFALSE 85620
// exit ;
85618: GO 85719
// Randomize ;
85620: CALL_OW 10
// for i = array downto 1 do
85624: LD_ADDR_VAR 0 3
85628: PUSH
85629: DOUBLE
85630: LD_VAR 0 1
85634: INC
85635: ST_TO_ADDR
85636: LD_INT 1
85638: PUSH
85639: FOR_DOWNTO
85640: IFFALSE 85717
// begin index := rand ( 1 , array ) ;
85642: LD_ADDR_VAR 0 4
85646: PUSH
85647: LD_INT 1
85649: PPUSH
85650: LD_VAR 0 1
85654: PPUSH
85655: CALL_OW 12
85659: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
85660: LD_ADDR_VAR 0 2
85664: PUSH
85665: LD_VAR 0 2
85669: PPUSH
85670: LD_VAR 0 2
85674: PUSH
85675: LD_INT 1
85677: PLUS
85678: PPUSH
85679: LD_VAR 0 1
85683: PUSH
85684: LD_VAR 0 4
85688: ARRAY
85689: PPUSH
85690: CALL_OW 2
85694: ST_TO_ADDR
// array := Delete ( array , index ) ;
85695: LD_ADDR_VAR 0 1
85699: PUSH
85700: LD_VAR 0 1
85704: PPUSH
85705: LD_VAR 0 4
85709: PPUSH
85710: CALL_OW 3
85714: ST_TO_ADDR
// end ;
85715: GO 85639
85717: POP
85718: POP
// end ;
85719: LD_VAR 0 2
85723: RET
// export function GetBaseMaterials ( base ) ; begin
85724: LD_INT 0
85726: PPUSH
// result := [ 0 , 0 , 0 ] ;
85727: LD_ADDR_VAR 0 2
85731: PUSH
85732: LD_INT 0
85734: PUSH
85735: LD_INT 0
85737: PUSH
85738: LD_INT 0
85740: PUSH
85741: EMPTY
85742: LIST
85743: LIST
85744: LIST
85745: ST_TO_ADDR
// if not base then
85746: LD_VAR 0 1
85750: NOT
85751: IFFALSE 85755
// exit ;
85753: GO 85804
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
85755: LD_ADDR_VAR 0 2
85759: PUSH
85760: LD_VAR 0 1
85764: PPUSH
85765: LD_INT 1
85767: PPUSH
85768: CALL_OW 275
85772: PUSH
85773: LD_VAR 0 1
85777: PPUSH
85778: LD_INT 2
85780: PPUSH
85781: CALL_OW 275
85785: PUSH
85786: LD_VAR 0 1
85790: PPUSH
85791: LD_INT 3
85793: PPUSH
85794: CALL_OW 275
85798: PUSH
85799: EMPTY
85800: LIST
85801: LIST
85802: LIST
85803: ST_TO_ADDR
// end ;
85804: LD_VAR 0 2
85808: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
85809: LD_INT 0
85811: PPUSH
85812: PPUSH
// result := array ;
85813: LD_ADDR_VAR 0 3
85817: PUSH
85818: LD_VAR 0 1
85822: ST_TO_ADDR
// if size > 0 then
85823: LD_VAR 0 2
85827: PUSH
85828: LD_INT 0
85830: GREATER
85831: IFFALSE 85877
// for i := array downto size do
85833: LD_ADDR_VAR 0 4
85837: PUSH
85838: DOUBLE
85839: LD_VAR 0 1
85843: INC
85844: ST_TO_ADDR
85845: LD_VAR 0 2
85849: PUSH
85850: FOR_DOWNTO
85851: IFFALSE 85875
// result := Delete ( result , result ) ;
85853: LD_ADDR_VAR 0 3
85857: PUSH
85858: LD_VAR 0 3
85862: PPUSH
85863: LD_VAR 0 3
85867: PPUSH
85868: CALL_OW 3
85872: ST_TO_ADDR
85873: GO 85850
85875: POP
85876: POP
// end ;
85877: LD_VAR 0 3
85881: RET
// export function ComExit ( unit ) ; var tmp ; begin
85882: LD_INT 0
85884: PPUSH
85885: PPUSH
// if not IsInUnit ( unit ) then
85886: LD_VAR 0 1
85890: PPUSH
85891: CALL_OW 310
85895: NOT
85896: IFFALSE 85900
// exit ;
85898: GO 85960
// tmp := IsInUnit ( unit ) ;
85900: LD_ADDR_VAR 0 3
85904: PUSH
85905: LD_VAR 0 1
85909: PPUSH
85910: CALL_OW 310
85914: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
85915: LD_VAR 0 3
85919: PPUSH
85920: CALL_OW 247
85924: PUSH
85925: LD_INT 2
85927: EQUAL
85928: IFFALSE 85941
// ComExitVehicle ( unit ) else
85930: LD_VAR 0 1
85934: PPUSH
85935: CALL_OW 121
85939: GO 85950
// ComExitBuilding ( unit ) ;
85941: LD_VAR 0 1
85945: PPUSH
85946: CALL_OW 122
// result := tmp ;
85950: LD_ADDR_VAR 0 2
85954: PUSH
85955: LD_VAR 0 3
85959: ST_TO_ADDR
// end ;
85960: LD_VAR 0 2
85964: RET
// export function ComExitAll ( units ) ; var i ; begin
85965: LD_INT 0
85967: PPUSH
85968: PPUSH
// if not units then
85969: LD_VAR 0 1
85973: NOT
85974: IFFALSE 85978
// exit ;
85976: GO 86004
// for i in units do
85978: LD_ADDR_VAR 0 3
85982: PUSH
85983: LD_VAR 0 1
85987: PUSH
85988: FOR_IN
85989: IFFALSE 86002
// ComExit ( i ) ;
85991: LD_VAR 0 3
85995: PPUSH
85996: CALL 85882 0 1
86000: GO 85988
86002: POP
86003: POP
// end ;
86004: LD_VAR 0 2
86008: RET
// export function ResetHc ; begin
86009: LD_INT 0
86011: PPUSH
// InitHc ;
86012: CALL_OW 19
// hc_importance := 0 ;
86016: LD_ADDR_OWVAR 32
86020: PUSH
86021: LD_INT 0
86023: ST_TO_ADDR
// end ;
86024: LD_VAR 0 1
86028: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
86029: LD_INT 0
86031: PPUSH
86032: PPUSH
86033: PPUSH
// _x := ( x1 + x2 ) div 2 ;
86034: LD_ADDR_VAR 0 6
86038: PUSH
86039: LD_VAR 0 1
86043: PUSH
86044: LD_VAR 0 3
86048: PLUS
86049: PUSH
86050: LD_INT 2
86052: DIV
86053: ST_TO_ADDR
// if _x < 0 then
86054: LD_VAR 0 6
86058: PUSH
86059: LD_INT 0
86061: LESS
86062: IFFALSE 86079
// _x := _x * - 1 ;
86064: LD_ADDR_VAR 0 6
86068: PUSH
86069: LD_VAR 0 6
86073: PUSH
86074: LD_INT 1
86076: NEG
86077: MUL
86078: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
86079: LD_ADDR_VAR 0 7
86083: PUSH
86084: LD_VAR 0 2
86088: PUSH
86089: LD_VAR 0 4
86093: PLUS
86094: PUSH
86095: LD_INT 2
86097: DIV
86098: ST_TO_ADDR
// if _y < 0 then
86099: LD_VAR 0 7
86103: PUSH
86104: LD_INT 0
86106: LESS
86107: IFFALSE 86124
// _y := _y * - 1 ;
86109: LD_ADDR_VAR 0 7
86113: PUSH
86114: LD_VAR 0 7
86118: PUSH
86119: LD_INT 1
86121: NEG
86122: MUL
86123: ST_TO_ADDR
// result := [ _x , _y ] ;
86124: LD_ADDR_VAR 0 5
86128: PUSH
86129: LD_VAR 0 6
86133: PUSH
86134: LD_VAR 0 7
86138: PUSH
86139: EMPTY
86140: LIST
86141: LIST
86142: ST_TO_ADDR
// end ;
86143: LD_VAR 0 5
86147: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
86148: LD_INT 0
86150: PPUSH
86151: PPUSH
86152: PPUSH
86153: PPUSH
// task := GetTaskList ( unit ) ;
86154: LD_ADDR_VAR 0 7
86158: PUSH
86159: LD_VAR 0 1
86163: PPUSH
86164: CALL_OW 437
86168: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
86169: LD_VAR 0 7
86173: NOT
86174: PUSH
86175: LD_VAR 0 1
86179: PPUSH
86180: LD_VAR 0 2
86184: PPUSH
86185: CALL_OW 308
86189: NOT
86190: AND
86191: IFFALSE 86195
// exit ;
86193: GO 86313
// if IsInArea ( unit , area ) then
86195: LD_VAR 0 1
86199: PPUSH
86200: LD_VAR 0 2
86204: PPUSH
86205: CALL_OW 308
86209: IFFALSE 86227
// begin ComMoveToArea ( unit , goAway ) ;
86211: LD_VAR 0 1
86215: PPUSH
86216: LD_VAR 0 3
86220: PPUSH
86221: CALL_OW 113
// exit ;
86225: GO 86313
// end ; if task [ 1 ] [ 1 ] <> M then
86227: LD_VAR 0 7
86231: PUSH
86232: LD_INT 1
86234: ARRAY
86235: PUSH
86236: LD_INT 1
86238: ARRAY
86239: PUSH
86240: LD_STRING M
86242: NONEQUAL
86243: IFFALSE 86247
// exit ;
86245: GO 86313
// x := task [ 1 ] [ 2 ] ;
86247: LD_ADDR_VAR 0 5
86251: PUSH
86252: LD_VAR 0 7
86256: PUSH
86257: LD_INT 1
86259: ARRAY
86260: PUSH
86261: LD_INT 2
86263: ARRAY
86264: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
86265: LD_ADDR_VAR 0 6
86269: PUSH
86270: LD_VAR 0 7
86274: PUSH
86275: LD_INT 1
86277: ARRAY
86278: PUSH
86279: LD_INT 3
86281: ARRAY
86282: ST_TO_ADDR
// if InArea ( x , y , area ) then
86283: LD_VAR 0 5
86287: PPUSH
86288: LD_VAR 0 6
86292: PPUSH
86293: LD_VAR 0 2
86297: PPUSH
86298: CALL_OW 309
86302: IFFALSE 86313
// ComStop ( unit ) ;
86304: LD_VAR 0 1
86308: PPUSH
86309: CALL_OW 141
// end ;
86313: LD_VAR 0 4
86317: RET
// export function Abs ( value ) ; begin
86318: LD_INT 0
86320: PPUSH
// result := value ;
86321: LD_ADDR_VAR 0 2
86325: PUSH
86326: LD_VAR 0 1
86330: ST_TO_ADDR
// if value < 0 then
86331: LD_VAR 0 1
86335: PUSH
86336: LD_INT 0
86338: LESS
86339: IFFALSE 86356
// result := value * - 1 ;
86341: LD_ADDR_VAR 0 2
86345: PUSH
86346: LD_VAR 0 1
86350: PUSH
86351: LD_INT 1
86353: NEG
86354: MUL
86355: ST_TO_ADDR
// end ;
86356: LD_VAR 0 2
86360: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
86361: LD_INT 0
86363: PPUSH
86364: PPUSH
86365: PPUSH
86366: PPUSH
86367: PPUSH
86368: PPUSH
86369: PPUSH
86370: PPUSH
// if not unit or not building then
86371: LD_VAR 0 1
86375: NOT
86376: PUSH
86377: LD_VAR 0 2
86381: NOT
86382: OR
86383: IFFALSE 86387
// exit ;
86385: GO 86613
// x := GetX ( building ) ;
86387: LD_ADDR_VAR 0 4
86391: PUSH
86392: LD_VAR 0 2
86396: PPUSH
86397: CALL_OW 250
86401: ST_TO_ADDR
// y := GetY ( building ) ;
86402: LD_ADDR_VAR 0 6
86406: PUSH
86407: LD_VAR 0 2
86411: PPUSH
86412: CALL_OW 251
86416: ST_TO_ADDR
// d := GetDir ( building ) ;
86417: LD_ADDR_VAR 0 8
86421: PUSH
86422: LD_VAR 0 2
86426: PPUSH
86427: CALL_OW 254
86431: ST_TO_ADDR
// r := 4 ;
86432: LD_ADDR_VAR 0 9
86436: PUSH
86437: LD_INT 4
86439: ST_TO_ADDR
// for i := 1 to 5 do
86440: LD_ADDR_VAR 0 10
86444: PUSH
86445: DOUBLE
86446: LD_INT 1
86448: DEC
86449: ST_TO_ADDR
86450: LD_INT 5
86452: PUSH
86453: FOR_TO
86454: IFFALSE 86611
// begin _x := ShiftX ( x , d , r + i ) ;
86456: LD_ADDR_VAR 0 5
86460: PUSH
86461: LD_VAR 0 4
86465: PPUSH
86466: LD_VAR 0 8
86470: PPUSH
86471: LD_VAR 0 9
86475: PUSH
86476: LD_VAR 0 10
86480: PLUS
86481: PPUSH
86482: CALL_OW 272
86486: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
86487: LD_ADDR_VAR 0 7
86491: PUSH
86492: LD_VAR 0 6
86496: PPUSH
86497: LD_VAR 0 8
86501: PPUSH
86502: LD_VAR 0 9
86506: PUSH
86507: LD_VAR 0 10
86511: PLUS
86512: PPUSH
86513: CALL_OW 273
86517: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
86518: LD_VAR 0 5
86522: PPUSH
86523: LD_VAR 0 7
86527: PPUSH
86528: CALL_OW 488
86532: PUSH
86533: LD_VAR 0 5
86537: PPUSH
86538: LD_VAR 0 7
86542: PPUSH
86543: CALL_OW 428
86547: PPUSH
86548: CALL_OW 247
86552: PUSH
86553: LD_INT 3
86555: PUSH
86556: LD_INT 2
86558: PUSH
86559: EMPTY
86560: LIST
86561: LIST
86562: IN
86563: NOT
86564: AND
86565: IFFALSE 86609
// begin ComMoveXY ( unit , _x , _y ) ;
86567: LD_VAR 0 1
86571: PPUSH
86572: LD_VAR 0 5
86576: PPUSH
86577: LD_VAR 0 7
86581: PPUSH
86582: CALL_OW 111
// result := [ _x , _y ] ;
86586: LD_ADDR_VAR 0 3
86590: PUSH
86591: LD_VAR 0 5
86595: PUSH
86596: LD_VAR 0 7
86600: PUSH
86601: EMPTY
86602: LIST
86603: LIST
86604: ST_TO_ADDR
// exit ;
86605: POP
86606: POP
86607: GO 86613
// end ; end ;
86609: GO 86453
86611: POP
86612: POP
// end ;
86613: LD_VAR 0 3
86617: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
86618: LD_INT 0
86620: PPUSH
86621: PPUSH
86622: PPUSH
// result := 0 ;
86623: LD_ADDR_VAR 0 3
86627: PUSH
86628: LD_INT 0
86630: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
86631: LD_VAR 0 1
86635: PUSH
86636: LD_INT 0
86638: LESS
86639: PUSH
86640: LD_VAR 0 1
86644: PUSH
86645: LD_INT 8
86647: GREATER
86648: OR
86649: PUSH
86650: LD_VAR 0 2
86654: PUSH
86655: LD_INT 0
86657: LESS
86658: OR
86659: PUSH
86660: LD_VAR 0 2
86664: PUSH
86665: LD_INT 8
86667: GREATER
86668: OR
86669: IFFALSE 86673
// exit ;
86671: GO 86748
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
86673: LD_ADDR_VAR 0 4
86677: PUSH
86678: LD_INT 22
86680: PUSH
86681: LD_VAR 0 2
86685: PUSH
86686: EMPTY
86687: LIST
86688: LIST
86689: PPUSH
86690: CALL_OW 69
86694: PUSH
86695: FOR_IN
86696: IFFALSE 86746
// begin un := UnitShoot ( i ) ;
86698: LD_ADDR_VAR 0 5
86702: PUSH
86703: LD_VAR 0 4
86707: PPUSH
86708: CALL_OW 504
86712: ST_TO_ADDR
// if GetSide ( un ) = side1 then
86713: LD_VAR 0 5
86717: PPUSH
86718: CALL_OW 255
86722: PUSH
86723: LD_VAR 0 1
86727: EQUAL
86728: IFFALSE 86744
// begin result := un ;
86730: LD_ADDR_VAR 0 3
86734: PUSH
86735: LD_VAR 0 5
86739: ST_TO_ADDR
// exit ;
86740: POP
86741: POP
86742: GO 86748
// end ; end ;
86744: GO 86695
86746: POP
86747: POP
// end ;
86748: LD_VAR 0 3
86752: RET
// export function GetCargoBay ( units ) ; begin
86753: LD_INT 0
86755: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
86756: LD_ADDR_VAR 0 2
86760: PUSH
86761: LD_VAR 0 1
86765: PPUSH
86766: LD_INT 2
86768: PUSH
86769: LD_INT 34
86771: PUSH
86772: LD_INT 12
86774: PUSH
86775: EMPTY
86776: LIST
86777: LIST
86778: PUSH
86779: LD_INT 34
86781: PUSH
86782: LD_INT 51
86784: PUSH
86785: EMPTY
86786: LIST
86787: LIST
86788: PUSH
86789: LD_INT 34
86791: PUSH
86792: LD_INT 32
86794: PUSH
86795: EMPTY
86796: LIST
86797: LIST
86798: PUSH
86799: LD_INT 34
86801: PUSH
86802: LD_EXP 70
86806: PUSH
86807: EMPTY
86808: LIST
86809: LIST
86810: PUSH
86811: EMPTY
86812: LIST
86813: LIST
86814: LIST
86815: LIST
86816: LIST
86817: PPUSH
86818: CALL_OW 72
86822: ST_TO_ADDR
// end ;
86823: LD_VAR 0 2
86827: RET
// export function Negate ( value ) ; begin
86828: LD_INT 0
86830: PPUSH
// result := not value ;
86831: LD_ADDR_VAR 0 2
86835: PUSH
86836: LD_VAR 0 1
86840: NOT
86841: ST_TO_ADDR
// end ;
86842: LD_VAR 0 2
86846: RET
// export function Inc ( value ) ; begin
86847: LD_INT 0
86849: PPUSH
// result := value + 1 ;
86850: LD_ADDR_VAR 0 2
86854: PUSH
86855: LD_VAR 0 1
86859: PUSH
86860: LD_INT 1
86862: PLUS
86863: ST_TO_ADDR
// end ;
86864: LD_VAR 0 2
86868: RET
// export function Dec ( value ) ; begin
86869: LD_INT 0
86871: PPUSH
// result := value - 1 ;
86872: LD_ADDR_VAR 0 2
86876: PUSH
86877: LD_VAR 0 1
86881: PUSH
86882: LD_INT 1
86884: MINUS
86885: ST_TO_ADDR
// end ;
86886: LD_VAR 0 2
86890: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
86891: LD_INT 0
86893: PPUSH
86894: PPUSH
86895: PPUSH
86896: PPUSH
86897: PPUSH
86898: PPUSH
86899: PPUSH
86900: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
86901: LD_VAR 0 1
86905: PPUSH
86906: LD_VAR 0 2
86910: PPUSH
86911: CALL_OW 488
86915: NOT
86916: PUSH
86917: LD_VAR 0 3
86921: PPUSH
86922: LD_VAR 0 4
86926: PPUSH
86927: CALL_OW 488
86931: NOT
86932: OR
86933: IFFALSE 86946
// begin result := - 1 ;
86935: LD_ADDR_VAR 0 5
86939: PUSH
86940: LD_INT 1
86942: NEG
86943: ST_TO_ADDR
// exit ;
86944: GO 87181
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
86946: LD_ADDR_VAR 0 12
86950: PUSH
86951: LD_VAR 0 1
86955: PPUSH
86956: LD_VAR 0 2
86960: PPUSH
86961: LD_VAR 0 3
86965: PPUSH
86966: LD_VAR 0 4
86970: PPUSH
86971: CALL 86029 0 4
86975: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
86976: LD_ADDR_VAR 0 11
86980: PUSH
86981: LD_VAR 0 1
86985: PPUSH
86986: LD_VAR 0 2
86990: PPUSH
86991: LD_VAR 0 12
86995: PUSH
86996: LD_INT 1
86998: ARRAY
86999: PPUSH
87000: LD_VAR 0 12
87004: PUSH
87005: LD_INT 2
87007: ARRAY
87008: PPUSH
87009: CALL_OW 298
87013: ST_TO_ADDR
// distance := 9999 ;
87014: LD_ADDR_VAR 0 10
87018: PUSH
87019: LD_INT 9999
87021: ST_TO_ADDR
// for i := 0 to 5 do
87022: LD_ADDR_VAR 0 6
87026: PUSH
87027: DOUBLE
87028: LD_INT 0
87030: DEC
87031: ST_TO_ADDR
87032: LD_INT 5
87034: PUSH
87035: FOR_TO
87036: IFFALSE 87179
// begin _x := ShiftX ( x1 , i , centerDist ) ;
87038: LD_ADDR_VAR 0 7
87042: PUSH
87043: LD_VAR 0 1
87047: PPUSH
87048: LD_VAR 0 6
87052: PPUSH
87053: LD_VAR 0 11
87057: PPUSH
87058: CALL_OW 272
87062: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
87063: LD_ADDR_VAR 0 8
87067: PUSH
87068: LD_VAR 0 2
87072: PPUSH
87073: LD_VAR 0 6
87077: PPUSH
87078: LD_VAR 0 11
87082: PPUSH
87083: CALL_OW 273
87087: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
87088: LD_VAR 0 7
87092: PPUSH
87093: LD_VAR 0 8
87097: PPUSH
87098: CALL_OW 488
87102: NOT
87103: IFFALSE 87107
// continue ;
87105: GO 87035
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
87107: LD_ADDR_VAR 0 9
87111: PUSH
87112: LD_VAR 0 12
87116: PUSH
87117: LD_INT 1
87119: ARRAY
87120: PPUSH
87121: LD_VAR 0 12
87125: PUSH
87126: LD_INT 2
87128: ARRAY
87129: PPUSH
87130: LD_VAR 0 7
87134: PPUSH
87135: LD_VAR 0 8
87139: PPUSH
87140: CALL_OW 298
87144: ST_TO_ADDR
// if tmp < distance then
87145: LD_VAR 0 9
87149: PUSH
87150: LD_VAR 0 10
87154: LESS
87155: IFFALSE 87177
// begin result := i ;
87157: LD_ADDR_VAR 0 5
87161: PUSH
87162: LD_VAR 0 6
87166: ST_TO_ADDR
// distance := tmp ;
87167: LD_ADDR_VAR 0 10
87171: PUSH
87172: LD_VAR 0 9
87176: ST_TO_ADDR
// end ; end ;
87177: GO 87035
87179: POP
87180: POP
// end ;
87181: LD_VAR 0 5
87185: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
87186: LD_INT 0
87188: PPUSH
87189: PPUSH
// if not driver or not IsInUnit ( driver ) then
87190: LD_VAR 0 1
87194: NOT
87195: PUSH
87196: LD_VAR 0 1
87200: PPUSH
87201: CALL_OW 310
87205: NOT
87206: OR
87207: IFFALSE 87211
// exit ;
87209: GO 87301
// vehicle := IsInUnit ( driver ) ;
87211: LD_ADDR_VAR 0 3
87215: PUSH
87216: LD_VAR 0 1
87220: PPUSH
87221: CALL_OW 310
87225: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
87226: LD_VAR 0 1
87230: PPUSH
87231: LD_STRING \
87233: PUSH
87234: LD_INT 0
87236: PUSH
87237: LD_INT 0
87239: PUSH
87240: LD_INT 0
87242: PUSH
87243: LD_INT 0
87245: PUSH
87246: LD_INT 0
87248: PUSH
87249: LD_INT 0
87251: PUSH
87252: EMPTY
87253: LIST
87254: LIST
87255: LIST
87256: LIST
87257: LIST
87258: LIST
87259: LIST
87260: PUSH
87261: LD_STRING E
87263: PUSH
87264: LD_INT 0
87266: PUSH
87267: LD_INT 0
87269: PUSH
87270: LD_VAR 0 3
87274: PUSH
87275: LD_INT 0
87277: PUSH
87278: LD_INT 0
87280: PUSH
87281: LD_INT 0
87283: PUSH
87284: EMPTY
87285: LIST
87286: LIST
87287: LIST
87288: LIST
87289: LIST
87290: LIST
87291: LIST
87292: PUSH
87293: EMPTY
87294: LIST
87295: LIST
87296: PPUSH
87297: CALL_OW 446
// end ;
87301: LD_VAR 0 2
87305: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
87306: LD_INT 0
87308: PPUSH
87309: PPUSH
// if not driver or not IsInUnit ( driver ) then
87310: LD_VAR 0 1
87314: NOT
87315: PUSH
87316: LD_VAR 0 1
87320: PPUSH
87321: CALL_OW 310
87325: NOT
87326: OR
87327: IFFALSE 87331
// exit ;
87329: GO 87421
// vehicle := IsInUnit ( driver ) ;
87331: LD_ADDR_VAR 0 3
87335: PUSH
87336: LD_VAR 0 1
87340: PPUSH
87341: CALL_OW 310
87345: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
87346: LD_VAR 0 1
87350: PPUSH
87351: LD_STRING \
87353: PUSH
87354: LD_INT 0
87356: PUSH
87357: LD_INT 0
87359: PUSH
87360: LD_INT 0
87362: PUSH
87363: LD_INT 0
87365: PUSH
87366: LD_INT 0
87368: PUSH
87369: LD_INT 0
87371: PUSH
87372: EMPTY
87373: LIST
87374: LIST
87375: LIST
87376: LIST
87377: LIST
87378: LIST
87379: LIST
87380: PUSH
87381: LD_STRING E
87383: PUSH
87384: LD_INT 0
87386: PUSH
87387: LD_INT 0
87389: PUSH
87390: LD_VAR 0 3
87394: PUSH
87395: LD_INT 0
87397: PUSH
87398: LD_INT 0
87400: PUSH
87401: LD_INT 0
87403: PUSH
87404: EMPTY
87405: LIST
87406: LIST
87407: LIST
87408: LIST
87409: LIST
87410: LIST
87411: LIST
87412: PUSH
87413: EMPTY
87414: LIST
87415: LIST
87416: PPUSH
87417: CALL_OW 447
// end ;
87421: LD_VAR 0 2
87425: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
87426: LD_INT 0
87428: PPUSH
87429: PPUSH
87430: PPUSH
// tmp := [ ] ;
87431: LD_ADDR_VAR 0 5
87435: PUSH
87436: EMPTY
87437: ST_TO_ADDR
// for i in units do
87438: LD_ADDR_VAR 0 4
87442: PUSH
87443: LD_VAR 0 1
87447: PUSH
87448: FOR_IN
87449: IFFALSE 87487
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
87451: LD_ADDR_VAR 0 5
87455: PUSH
87456: LD_VAR 0 5
87460: PPUSH
87461: LD_VAR 0 5
87465: PUSH
87466: LD_INT 1
87468: PLUS
87469: PPUSH
87470: LD_VAR 0 4
87474: PPUSH
87475: CALL_OW 256
87479: PPUSH
87480: CALL_OW 2
87484: ST_TO_ADDR
87485: GO 87448
87487: POP
87488: POP
// if not tmp then
87489: LD_VAR 0 5
87493: NOT
87494: IFFALSE 87498
// exit ;
87496: GO 87546
// if asc then
87498: LD_VAR 0 2
87502: IFFALSE 87526
// result := SortListByListAsc ( units , tmp ) else
87504: LD_ADDR_VAR 0 3
87508: PUSH
87509: LD_VAR 0 1
87513: PPUSH
87514: LD_VAR 0 5
87518: PPUSH
87519: CALL_OW 76
87523: ST_TO_ADDR
87524: GO 87546
// result := SortListByListDesc ( units , tmp ) ;
87526: LD_ADDR_VAR 0 3
87530: PUSH
87531: LD_VAR 0 1
87535: PPUSH
87536: LD_VAR 0 5
87540: PPUSH
87541: CALL_OW 77
87545: ST_TO_ADDR
// end ;
87546: LD_VAR 0 3
87550: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
87551: LD_INT 0
87553: PPUSH
87554: PPUSH
// task := GetTaskList ( mech ) ;
87555: LD_ADDR_VAR 0 4
87559: PUSH
87560: LD_VAR 0 1
87564: PPUSH
87565: CALL_OW 437
87569: ST_TO_ADDR
// if not task then
87570: LD_VAR 0 4
87574: NOT
87575: IFFALSE 87579
// exit ;
87577: GO 87621
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
87579: LD_ADDR_VAR 0 3
87583: PUSH
87584: LD_VAR 0 4
87588: PUSH
87589: LD_INT 1
87591: ARRAY
87592: PUSH
87593: LD_INT 1
87595: ARRAY
87596: PUSH
87597: LD_STRING r
87599: EQUAL
87600: PUSH
87601: LD_VAR 0 4
87605: PUSH
87606: LD_INT 1
87608: ARRAY
87609: PUSH
87610: LD_INT 4
87612: ARRAY
87613: PUSH
87614: LD_VAR 0 2
87618: EQUAL
87619: AND
87620: ST_TO_ADDR
// end ;
87621: LD_VAR 0 3
87625: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
87626: LD_INT 0
87628: PPUSH
// SetDir ( unit , d ) ;
87629: LD_VAR 0 1
87633: PPUSH
87634: LD_VAR 0 4
87638: PPUSH
87639: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
87643: LD_VAR 0 1
87647: PPUSH
87648: LD_VAR 0 2
87652: PPUSH
87653: LD_VAR 0 3
87657: PPUSH
87658: LD_VAR 0 5
87662: PPUSH
87663: CALL_OW 48
// end ;
87667: LD_VAR 0 6
87671: RET
// export function ToNaturalNumber ( number ) ; begin
87672: LD_INT 0
87674: PPUSH
// result := number div 1 ;
87675: LD_ADDR_VAR 0 2
87679: PUSH
87680: LD_VAR 0 1
87684: PUSH
87685: LD_INT 1
87687: DIV
87688: ST_TO_ADDR
// if number < 0 then
87689: LD_VAR 0 1
87693: PUSH
87694: LD_INT 0
87696: LESS
87697: IFFALSE 87707
// result := 0 ;
87699: LD_ADDR_VAR 0 2
87703: PUSH
87704: LD_INT 0
87706: ST_TO_ADDR
// end ;
87707: LD_VAR 0 2
87711: RET
// export function SortByClass ( units , class ) ; var un ; begin
87712: LD_INT 0
87714: PPUSH
87715: PPUSH
// if not units or not class then
87716: LD_VAR 0 1
87720: NOT
87721: PUSH
87722: LD_VAR 0 2
87726: NOT
87727: OR
87728: IFFALSE 87732
// exit ;
87730: GO 87827
// result := [ ] ;
87732: LD_ADDR_VAR 0 3
87736: PUSH
87737: EMPTY
87738: ST_TO_ADDR
// for un in units do
87739: LD_ADDR_VAR 0 4
87743: PUSH
87744: LD_VAR 0 1
87748: PUSH
87749: FOR_IN
87750: IFFALSE 87825
// if GetClass ( un ) = class then
87752: LD_VAR 0 4
87756: PPUSH
87757: CALL_OW 257
87761: PUSH
87762: LD_VAR 0 2
87766: EQUAL
87767: IFFALSE 87794
// result := Insert ( result , 1 , un ) else
87769: LD_ADDR_VAR 0 3
87773: PUSH
87774: LD_VAR 0 3
87778: PPUSH
87779: LD_INT 1
87781: PPUSH
87782: LD_VAR 0 4
87786: PPUSH
87787: CALL_OW 2
87791: ST_TO_ADDR
87792: GO 87823
// result := Replace ( result , result + 1 , un ) ;
87794: LD_ADDR_VAR 0 3
87798: PUSH
87799: LD_VAR 0 3
87803: PPUSH
87804: LD_VAR 0 3
87808: PUSH
87809: LD_INT 1
87811: PLUS
87812: PPUSH
87813: LD_VAR 0 4
87817: PPUSH
87818: CALL_OW 1
87822: ST_TO_ADDR
87823: GO 87749
87825: POP
87826: POP
// end ;
87827: LD_VAR 0 3
87831: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
87832: LD_INT 0
87834: PPUSH
87835: PPUSH
87836: PPUSH
87837: PPUSH
87838: PPUSH
87839: PPUSH
87840: PPUSH
// result := [ ] ;
87841: LD_ADDR_VAR 0 4
87845: PUSH
87846: EMPTY
87847: ST_TO_ADDR
// if x - r < 0 then
87848: LD_VAR 0 1
87852: PUSH
87853: LD_VAR 0 3
87857: MINUS
87858: PUSH
87859: LD_INT 0
87861: LESS
87862: IFFALSE 87874
// min_x := 0 else
87864: LD_ADDR_VAR 0 8
87868: PUSH
87869: LD_INT 0
87871: ST_TO_ADDR
87872: GO 87890
// min_x := x - r ;
87874: LD_ADDR_VAR 0 8
87878: PUSH
87879: LD_VAR 0 1
87883: PUSH
87884: LD_VAR 0 3
87888: MINUS
87889: ST_TO_ADDR
// if y - r < 0 then
87890: LD_VAR 0 2
87894: PUSH
87895: LD_VAR 0 3
87899: MINUS
87900: PUSH
87901: LD_INT 0
87903: LESS
87904: IFFALSE 87916
// min_y := 0 else
87906: LD_ADDR_VAR 0 7
87910: PUSH
87911: LD_INT 0
87913: ST_TO_ADDR
87914: GO 87932
// min_y := y - r ;
87916: LD_ADDR_VAR 0 7
87920: PUSH
87921: LD_VAR 0 2
87925: PUSH
87926: LD_VAR 0 3
87930: MINUS
87931: ST_TO_ADDR
// max_x := x + r ;
87932: LD_ADDR_VAR 0 9
87936: PUSH
87937: LD_VAR 0 1
87941: PUSH
87942: LD_VAR 0 3
87946: PLUS
87947: ST_TO_ADDR
// max_y := y + r ;
87948: LD_ADDR_VAR 0 10
87952: PUSH
87953: LD_VAR 0 2
87957: PUSH
87958: LD_VAR 0 3
87962: PLUS
87963: ST_TO_ADDR
// for _x = min_x to max_x do
87964: LD_ADDR_VAR 0 5
87968: PUSH
87969: DOUBLE
87970: LD_VAR 0 8
87974: DEC
87975: ST_TO_ADDR
87976: LD_VAR 0 9
87980: PUSH
87981: FOR_TO
87982: IFFALSE 88083
// for _y = min_y to max_y do
87984: LD_ADDR_VAR 0 6
87988: PUSH
87989: DOUBLE
87990: LD_VAR 0 7
87994: DEC
87995: ST_TO_ADDR
87996: LD_VAR 0 10
88000: PUSH
88001: FOR_TO
88002: IFFALSE 88079
// begin if not ValidHex ( _x , _y ) then
88004: LD_VAR 0 5
88008: PPUSH
88009: LD_VAR 0 6
88013: PPUSH
88014: CALL_OW 488
88018: NOT
88019: IFFALSE 88023
// continue ;
88021: GO 88001
// if GetResourceTypeXY ( _x , _y ) then
88023: LD_VAR 0 5
88027: PPUSH
88028: LD_VAR 0 6
88032: PPUSH
88033: CALL_OW 283
88037: IFFALSE 88077
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
88039: LD_ADDR_VAR 0 4
88043: PUSH
88044: LD_VAR 0 4
88048: PPUSH
88049: LD_VAR 0 4
88053: PUSH
88054: LD_INT 1
88056: PLUS
88057: PPUSH
88058: LD_VAR 0 5
88062: PUSH
88063: LD_VAR 0 6
88067: PUSH
88068: EMPTY
88069: LIST
88070: LIST
88071: PPUSH
88072: CALL_OW 1
88076: ST_TO_ADDR
// end ;
88077: GO 88001
88079: POP
88080: POP
88081: GO 87981
88083: POP
88084: POP
// end ;
88085: LD_VAR 0 4
88089: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
88090: LD_INT 0
88092: PPUSH
88093: PPUSH
88094: PPUSH
88095: PPUSH
88096: PPUSH
88097: PPUSH
88098: PPUSH
88099: PPUSH
// if not units then
88100: LD_VAR 0 1
88104: NOT
88105: IFFALSE 88109
// exit ;
88107: GO 88534
// result := UnitFilter ( units , [ f_ok ] ) ;
88109: LD_ADDR_VAR 0 3
88113: PUSH
88114: LD_VAR 0 1
88118: PPUSH
88119: LD_INT 50
88121: PUSH
88122: EMPTY
88123: LIST
88124: PPUSH
88125: CALL_OW 72
88129: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
88130: LD_ADDR_VAR 0 8
88134: PUSH
88135: LD_VAR 0 1
88139: PUSH
88140: LD_INT 1
88142: ARRAY
88143: PPUSH
88144: CALL_OW 255
88148: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
88149: LD_ADDR_VAR 0 10
88153: PUSH
88154: LD_INT 29
88156: PUSH
88157: LD_EXP 73
88161: PUSH
88162: EMPTY
88163: LIST
88164: LIST
88165: ST_TO_ADDR
// if not result then
88166: LD_VAR 0 3
88170: NOT
88171: IFFALSE 88175
// exit ;
88173: GO 88534
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
88175: LD_ADDR_VAR 0 5
88179: PUSH
88180: LD_INT 81
88182: PUSH
88183: LD_VAR 0 8
88187: PUSH
88188: EMPTY
88189: LIST
88190: LIST
88191: PPUSH
88192: CALL_OW 69
88196: ST_TO_ADDR
// for i in result do
88197: LD_ADDR_VAR 0 4
88201: PUSH
88202: LD_VAR 0 3
88206: PUSH
88207: FOR_IN
88208: IFFALSE 88532
// begin tag := GetTag ( i ) + 1 ;
88210: LD_ADDR_VAR 0 9
88214: PUSH
88215: LD_VAR 0 4
88219: PPUSH
88220: CALL_OW 110
88224: PUSH
88225: LD_INT 1
88227: PLUS
88228: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
88229: LD_ADDR_VAR 0 7
88233: PUSH
88234: LD_VAR 0 4
88238: PPUSH
88239: CALL_OW 250
88243: PPUSH
88244: LD_VAR 0 4
88248: PPUSH
88249: CALL_OW 251
88253: PPUSH
88254: LD_INT 6
88256: PPUSH
88257: CALL 87832 0 3
88261: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
88262: LD_VAR 0 7
88266: PUSH
88267: LD_VAR 0 4
88271: PPUSH
88272: CALL_OW 264
88276: PUSH
88277: LD_VAR 0 10
88281: IN
88282: NOT
88283: AND
88284: IFFALSE 88323
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
88286: LD_VAR 0 4
88290: PPUSH
88291: LD_VAR 0 7
88295: PUSH
88296: LD_INT 1
88298: ARRAY
88299: PUSH
88300: LD_INT 1
88302: ARRAY
88303: PPUSH
88304: LD_VAR 0 7
88308: PUSH
88309: LD_INT 1
88311: ARRAY
88312: PUSH
88313: LD_INT 2
88315: ARRAY
88316: PPUSH
88317: CALL_OW 116
88321: GO 88530
// if path > tag then
88323: LD_VAR 0 2
88327: PUSH
88328: LD_VAR 0 9
88332: GREATER
88333: IFFALSE 88500
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
88335: LD_ADDR_VAR 0 6
88339: PUSH
88340: LD_VAR 0 5
88344: PPUSH
88345: LD_INT 91
88347: PUSH
88348: LD_VAR 0 4
88352: PUSH
88353: LD_INT 12
88355: PUSH
88356: EMPTY
88357: LIST
88358: LIST
88359: LIST
88360: PPUSH
88361: CALL_OW 72
88365: ST_TO_ADDR
// if nearEnemy then
88366: LD_VAR 0 6
88370: IFFALSE 88398
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
88372: LD_VAR 0 4
88376: PPUSH
88377: LD_VAR 0 6
88381: PPUSH
88382: LD_VAR 0 4
88386: PPUSH
88387: CALL_OW 74
88391: PPUSH
88392: CALL_OW 115
88396: GO 88498
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
88398: LD_VAR 0 4
88402: PPUSH
88403: LD_VAR 0 2
88407: PUSH
88408: LD_VAR 0 9
88412: ARRAY
88413: PUSH
88414: LD_INT 1
88416: ARRAY
88417: PPUSH
88418: LD_VAR 0 2
88422: PUSH
88423: LD_VAR 0 9
88427: ARRAY
88428: PUSH
88429: LD_INT 2
88431: ARRAY
88432: PPUSH
88433: CALL_OW 297
88437: PUSH
88438: LD_INT 6
88440: GREATER
88441: IFFALSE 88484
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
88443: LD_VAR 0 4
88447: PPUSH
88448: LD_VAR 0 2
88452: PUSH
88453: LD_VAR 0 9
88457: ARRAY
88458: PUSH
88459: LD_INT 1
88461: ARRAY
88462: PPUSH
88463: LD_VAR 0 2
88467: PUSH
88468: LD_VAR 0 9
88472: ARRAY
88473: PUSH
88474: LD_INT 2
88476: ARRAY
88477: PPUSH
88478: CALL_OW 114
88482: GO 88498
// SetTag ( i , tag ) ;
88484: LD_VAR 0 4
88488: PPUSH
88489: LD_VAR 0 9
88493: PPUSH
88494: CALL_OW 109
// end else
88498: GO 88530
// if enemy then
88500: LD_VAR 0 5
88504: IFFALSE 88530
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
88506: LD_VAR 0 4
88510: PPUSH
88511: LD_VAR 0 5
88515: PPUSH
88516: LD_VAR 0 4
88520: PPUSH
88521: CALL_OW 74
88525: PPUSH
88526: CALL_OW 115
// end ;
88530: GO 88207
88532: POP
88533: POP
// end ;
88534: LD_VAR 0 3
88538: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
88539: LD_INT 0
88541: PPUSH
88542: PPUSH
88543: PPUSH
// if not unit or IsInUnit ( unit ) then
88544: LD_VAR 0 1
88548: NOT
88549: PUSH
88550: LD_VAR 0 1
88554: PPUSH
88555: CALL_OW 310
88559: OR
88560: IFFALSE 88564
// exit ;
88562: GO 88655
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
88564: LD_ADDR_VAR 0 4
88568: PUSH
88569: LD_VAR 0 1
88573: PPUSH
88574: CALL_OW 250
88578: PPUSH
88579: LD_VAR 0 2
88583: PPUSH
88584: LD_INT 1
88586: PPUSH
88587: CALL_OW 272
88591: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
88592: LD_ADDR_VAR 0 5
88596: PUSH
88597: LD_VAR 0 1
88601: PPUSH
88602: CALL_OW 251
88606: PPUSH
88607: LD_VAR 0 2
88611: PPUSH
88612: LD_INT 1
88614: PPUSH
88615: CALL_OW 273
88619: ST_TO_ADDR
// if ValidHex ( x , y ) then
88620: LD_VAR 0 4
88624: PPUSH
88625: LD_VAR 0 5
88629: PPUSH
88630: CALL_OW 488
88634: IFFALSE 88655
// ComTurnXY ( unit , x , y ) ;
88636: LD_VAR 0 1
88640: PPUSH
88641: LD_VAR 0 4
88645: PPUSH
88646: LD_VAR 0 5
88650: PPUSH
88651: CALL_OW 118
// end ;
88655: LD_VAR 0 3
88659: RET
// export function SeeUnits ( side , units ) ; var i ; begin
88660: LD_INT 0
88662: PPUSH
88663: PPUSH
// result := false ;
88664: LD_ADDR_VAR 0 3
88668: PUSH
88669: LD_INT 0
88671: ST_TO_ADDR
// if not units then
88672: LD_VAR 0 2
88676: NOT
88677: IFFALSE 88681
// exit ;
88679: GO 88726
// for i in units do
88681: LD_ADDR_VAR 0 4
88685: PUSH
88686: LD_VAR 0 2
88690: PUSH
88691: FOR_IN
88692: IFFALSE 88724
// if See ( side , i ) then
88694: LD_VAR 0 1
88698: PPUSH
88699: LD_VAR 0 4
88703: PPUSH
88704: CALL_OW 292
88708: IFFALSE 88722
// begin result := true ;
88710: LD_ADDR_VAR 0 3
88714: PUSH
88715: LD_INT 1
88717: ST_TO_ADDR
// exit ;
88718: POP
88719: POP
88720: GO 88726
// end ;
88722: GO 88691
88724: POP
88725: POP
// end ;
88726: LD_VAR 0 3
88730: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
88731: LD_INT 0
88733: PPUSH
88734: PPUSH
88735: PPUSH
88736: PPUSH
// if not unit or not points then
88737: LD_VAR 0 1
88741: NOT
88742: PUSH
88743: LD_VAR 0 2
88747: NOT
88748: OR
88749: IFFALSE 88753
// exit ;
88751: GO 88843
// dist := 99999 ;
88753: LD_ADDR_VAR 0 5
88757: PUSH
88758: LD_INT 99999
88760: ST_TO_ADDR
// for i in points do
88761: LD_ADDR_VAR 0 4
88765: PUSH
88766: LD_VAR 0 2
88770: PUSH
88771: FOR_IN
88772: IFFALSE 88841
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
88774: LD_ADDR_VAR 0 6
88778: PUSH
88779: LD_VAR 0 1
88783: PPUSH
88784: LD_VAR 0 4
88788: PUSH
88789: LD_INT 1
88791: ARRAY
88792: PPUSH
88793: LD_VAR 0 4
88797: PUSH
88798: LD_INT 2
88800: ARRAY
88801: PPUSH
88802: CALL_OW 297
88806: ST_TO_ADDR
// if tmpDist < dist then
88807: LD_VAR 0 6
88811: PUSH
88812: LD_VAR 0 5
88816: LESS
88817: IFFALSE 88839
// begin result := i ;
88819: LD_ADDR_VAR 0 3
88823: PUSH
88824: LD_VAR 0 4
88828: ST_TO_ADDR
// dist := tmpDist ;
88829: LD_ADDR_VAR 0 5
88833: PUSH
88834: LD_VAR 0 6
88838: ST_TO_ADDR
// end ; end ;
88839: GO 88771
88841: POP
88842: POP
// end ;
88843: LD_VAR 0 3
88847: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
88848: LD_INT 0
88850: PPUSH
// uc_side := side ;
88851: LD_ADDR_OWVAR 20
88855: PUSH
88856: LD_VAR 0 1
88860: ST_TO_ADDR
// uc_nation := 3 ;
88861: LD_ADDR_OWVAR 21
88865: PUSH
88866: LD_INT 3
88868: ST_TO_ADDR
// vc_chassis := 25 ;
88869: LD_ADDR_OWVAR 37
88873: PUSH
88874: LD_INT 25
88876: ST_TO_ADDR
// vc_engine := engine_siberite ;
88877: LD_ADDR_OWVAR 39
88881: PUSH
88882: LD_INT 3
88884: ST_TO_ADDR
// vc_control := control_computer ;
88885: LD_ADDR_OWVAR 38
88889: PUSH
88890: LD_INT 3
88892: ST_TO_ADDR
// vc_weapon := 59 ;
88893: LD_ADDR_OWVAR 40
88897: PUSH
88898: LD_INT 59
88900: ST_TO_ADDR
// result := CreateVehicle ;
88901: LD_ADDR_VAR 0 5
88905: PUSH
88906: CALL_OW 45
88910: ST_TO_ADDR
// SetDir ( result , d ) ;
88911: LD_VAR 0 5
88915: PPUSH
88916: LD_VAR 0 4
88920: PPUSH
88921: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
88925: LD_VAR 0 5
88929: PPUSH
88930: LD_VAR 0 2
88934: PPUSH
88935: LD_VAR 0 3
88939: PPUSH
88940: LD_INT 0
88942: PPUSH
88943: CALL_OW 48
// end ; end_of_file
88947: LD_VAR 0 5
88951: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
88952: LD_VAR 0 1
88956: PUSH
88957: LD_INT 200
88959: DOUBLE
88960: GREATEREQUAL
88961: IFFALSE 88969
88963: LD_INT 299
88965: DOUBLE
88966: LESSEQUAL
88967: IFTRUE 88971
88969: GO 89003
88971: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
88972: LD_VAR 0 1
88976: PPUSH
88977: LD_VAR 0 2
88981: PPUSH
88982: LD_VAR 0 3
88986: PPUSH
88987: LD_VAR 0 4
88991: PPUSH
88992: LD_VAR 0 5
88996: PPUSH
88997: CALL 44551 0 5
89001: GO 89080
89003: LD_INT 300
89005: DOUBLE
89006: GREATEREQUAL
89007: IFFALSE 89015
89009: LD_INT 399
89011: DOUBLE
89012: LESSEQUAL
89013: IFTRUE 89017
89015: GO 89079
89017: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
89018: LD_VAR 0 1
89022: PPUSH
89023: LD_VAR 0 2
89027: PPUSH
89028: LD_VAR 0 3
89032: PPUSH
89033: LD_VAR 0 4
89037: PPUSH
89038: LD_VAR 0 5
89042: PPUSH
89043: LD_VAR 0 6
89047: PPUSH
89048: LD_VAR 0 7
89052: PPUSH
89053: LD_VAR 0 8
89057: PPUSH
89058: LD_VAR 0 9
89062: PPUSH
89063: LD_VAR 0 10
89067: PPUSH
89068: LD_VAR 0 11
89072: PPUSH
89073: CALL 42193 0 11
89077: GO 89080
89079: POP
// end ;
89080: PPOPN 11
89082: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
89083: LD_VAR 0 1
89087: PPUSH
89088: LD_VAR 0 2
89092: PPUSH
89093: LD_VAR 0 3
89097: PPUSH
89098: LD_VAR 0 4
89102: PPUSH
89103: LD_VAR 0 5
89107: PPUSH
89108: CALL 44287 0 5
// end ; end_of_file
89112: PPOPN 5
89114: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
89115: LD_VAR 0 1
89119: PPUSH
89120: LD_VAR 0 2
89124: PPUSH
89125: LD_VAR 0 3
89129: PPUSH
89130: LD_VAR 0 4
89134: PPUSH
89135: LD_VAR 0 5
89139: PPUSH
89140: LD_VAR 0 6
89144: PPUSH
89145: CALL 29886 0 6
// end ;
89149: PPOPN 6
89151: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
89152: CALL 29861 0 0
// end ;
89156: PPOPN 1
89158: END
