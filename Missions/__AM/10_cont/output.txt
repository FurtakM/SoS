// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 61
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 65
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 66
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 63
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 53
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 52
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 56
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 59
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 60
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 62
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 57
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 58
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 64
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 54
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 55
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 67
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// CreateNature ;
 314: CALL 26779 0 0
// PrepareDifficulty ;
 318: CALL 11448 0 0
// PrepareJMMTeam ;
 322: CALL 1370 0 0
// PrepareCathyTeam ;
 326: CALL 2606 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 330: LD_INT 24
 332: PPUSH
 333: LD_INT 1
 335: PUSH
 336: LD_OWVAR 67
 340: PLUS
 341: PPUSH
 342: CALL 21308 0 2
// if Difficulty > 1 then
 346: LD_OWVAR 67
 350: PUSH
 351: LD_INT 1
 353: GREATER
 354: IFFALSE 368
// PlaceMines ( MineField2 , Difficulty ) ;
 356: LD_INT 25
 358: PPUSH
 359: LD_OWVAR 67
 363: PPUSH
 364: CALL 21308 0 2
// if Difficulty > 2 then
 368: LD_OWVAR 67
 372: PUSH
 373: LD_INT 2
 375: GREATER
 376: IFFALSE 390
// PlaceMines ( MineField3 , Difficulty ) ;
 378: LD_INT 26
 380: PPUSH
 381: LD_OWVAR 67
 385: PPUSH
 386: CALL 21308 0 2
// PrepareArabianCommander ;
 390: CALL 4088 0 0
// PrepareArabian ;
 394: CALL 4140 0 0
// BuildArabianBase ;
 398: CALL 14263 0 0
// TameApemans ;
 402: CALL 20113 0 0
// end ;
 406: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 407: LD_EXP 67
 411: PUSH
 412: LD_INT 1
 414: EQUAL
 415: IFFALSE 721
 417: GO 419
 419: DISABLE
 420: LD_INT 0
 422: PPUSH
// begin enable ;
 423: ENABLE
// fogoff ( true ) ;
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 431: LD_ADDR_VAR 0 1
 435: PUSH
 436: LD_INT 22
 438: PUSH
 439: LD_INT 1
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: LD_INT 21
 448: PUSH
 449: LD_INT 1
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: PPUSH
 460: CALL_OW 69
 464: PUSH
 465: FOR_IN
 466: IFFALSE 482
// SetLives ( i , 1000 ) ;
 468: LD_VAR 0 1
 472: PPUSH
 473: LD_INT 1000
 475: PPUSH
 476: CALL_OW 234
 480: GO 465
 482: POP
 483: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 484: LD_ADDR_VAR 0 1
 488: PUSH
 489: LD_INT 22
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 2
 501: PUSH
 502: LD_INT 30
 504: PUSH
 505: LD_INT 0
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: PUSH
 512: LD_INT 30
 514: PUSH
 515: LD_INT 1
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL_OW 69
 535: PUSH
 536: FOR_IN
 537: IFFALSE 561
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 539: LD_VAR 0 1
 543: PPUSH
 544: CALL_OW 274
 548: PPUSH
 549: LD_INT 1
 551: PPUSH
 552: LD_INT 9999
 554: PPUSH
 555: CALL_OW 277
 559: GO 536
 561: POP
 562: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 563: LD_ADDR_VAR 0 1
 567: PUSH
 568: LD_INT 22
 570: PUSH
 571: LD_INT 1
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 30
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 30
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PPUSH
 610: CALL_OW 69
 614: PUSH
 615: FOR_IN
 616: IFFALSE 640
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 618: LD_VAR 0 1
 622: PPUSH
 623: CALL_OW 274
 627: PPUSH
 628: LD_INT 2
 630: PPUSH
 631: LD_INT 9999
 633: PPUSH
 634: CALL_OW 277
 638: GO 615
 640: POP
 641: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 642: LD_ADDR_VAR 0 1
 646: PUSH
 647: LD_INT 22
 649: PUSH
 650: LD_INT 1
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: PUSH
 657: LD_INT 2
 659: PUSH
 660: LD_INT 30
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 30
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PPUSH
 689: CALL_OW 69
 693: PUSH
 694: FOR_IN
 695: IFFALSE 719
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 697: LD_VAR 0 1
 701: PPUSH
 702: CALL_OW 274
 706: PPUSH
 707: LD_INT 3
 709: PPUSH
 710: LD_INT 9999
 712: PPUSH
 713: CALL_OW 277
 717: GO 694
 719: POP
 720: POP
// end ;
 721: PPOPN 1
 723: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 724: LD_INT 25
 726: PUSH
 727: LD_INT 5
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PPUSH
 734: CALL_OW 69
 738: IFFALSE 751
 740: GO 742
 742: DISABLE
// snipersTrained := true ;
 743: LD_ADDR_EXP 62
 747: PUSH
 748: LD_INT 1
 750: ST_TO_ADDR
 751: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_friend and ruDestroyedBuildings and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 2
 757: PPUSH
 758: CALL_OW 81
 762: PUSH
 763: LD_INT 1
 765: EQUAL
 766: PUSH
 767: LD_EXP 42
 771: AND
 772: PUSH
 773: LD_INT 22
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PUSH
 783: LD_INT 21
 785: PUSH
 786: LD_INT 3
 788: PUSH
 789: EMPTY
 790: LIST
 791: LIST
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: PPUSH
 797: CALL_OW 69
 801: PUSH
 802: LD_INT 0
 804: EQUAL
 805: AND
 806: IFFALSE 818
 808: GO 810
 810: DISABLE
// SetAchievement ( ACH_POWER ) ;
 811: LD_STRING ACH_POWER
 813: PPUSH
 814: CALL_OW 543
 818: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 819: LD_INT 22
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 30
 831: PUSH
 832: LD_INT 1
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PPUSH
 843: CALL_OW 69
 847: PUSH
 848: LD_INT 22
 850: PUSH
 851: LD_INT 1
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: PUSH
 858: LD_INT 30
 860: PUSH
 861: LD_INT 32
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: PPUSH
 872: CALL_OW 69
 876: AND
 877: PUSH
 878: LD_INT 22
 880: PUSH
 881: LD_INT 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PUSH
 888: LD_INT 30
 890: PUSH
 891: LD_INT 33
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PPUSH
 902: CALL_OW 69
 906: AND
 907: PUSH
 908: LD_INT 22
 910: PUSH
 911: LD_INT 1
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PUSH
 918: LD_INT 30
 920: PUSH
 921: LD_INT 5
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PPUSH
 932: CALL_OW 69
 936: AND
 937: PUSH
 938: LD_INT 22
 940: PUSH
 941: LD_INT 1
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: LD_INT 30
 950: PUSH
 951: LD_INT 3
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PPUSH
 962: CALL_OW 69
 966: AND
 967: PUSH
 968: LD_INT 22
 970: PUSH
 971: LD_INT 1
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: LD_INT 30
 980: PUSH
 981: LD_INT 36
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PPUSH
 992: CALL_OW 69
 996: AND
 997: PUSH
 998: LD_INT 22
1000: PUSH
1001: LD_INT 1
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: LD_INT 30
1010: PUSH
1011: LD_INT 31
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PPUSH
1022: CALL_OW 69
1026: AND
1027: PUSH
1028: LD_INT 22
1030: PUSH
1031: LD_INT 1
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: PUSH
1038: LD_INT 30
1040: PUSH
1041: LD_INT 22
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PPUSH
1052: CALL_OW 69
1056: AND
1057: PUSH
1058: LD_INT 22
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: LD_INT 30
1070: PUSH
1071: LD_INT 20
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: AND
1087: PUSH
1088: LD_INT 22
1090: PUSH
1091: LD_INT 1
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 30
1100: PUSH
1101: LD_INT 19
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PPUSH
1112: CALL_OW 69
1116: AND
1117: PUSH
1118: LD_INT 22
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 30
1130: PUSH
1131: LD_INT 16
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 69
1146: AND
1147: PUSH
1148: LD_INT 22
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 30
1160: PUSH
1161: LD_INT 17
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: PPUSH
1172: CALL_OW 69
1176: AND
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 30
1190: PUSH
1191: LD_INT 21
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PPUSH
1202: CALL_OW 69
1206: AND
1207: PUSH
1208: LD_INT 22
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: PUSH
1218: LD_INT 30
1220: PUSH
1221: LD_INT 29
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: PPUSH
1232: CALL_OW 69
1236: AND
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 30
1250: PUSH
1251: LD_INT 30
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PPUSH
1262: CALL_OW 69
1266: AND
1267: PUSH
1268: LD_INT 22
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 30
1280: PUSH
1281: LD_INT 27
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: AND
1297: PUSH
1298: LD_INT 22
1300: PUSH
1301: LD_INT 1
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 30
1310: PUSH
1311: LD_INT 26
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PPUSH
1322: CALL_OW 69
1326: AND
1327: PUSH
1328: LD_INT 22
1330: PUSH
1331: LD_INT 1
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 30
1340: PUSH
1341: LD_INT 28
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: CALL_OW 69
1356: AND
1357: IFFALSE 1369
1359: GO 1361
1361: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1362: LD_STRING ACH_ARCH
1364: PPUSH
1365: CALL_OW 543
1369: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1370: LD_INT 0
1372: PPUSH
1373: PPUSH
1374: PPUSH
1375: PPUSH
1376: PPUSH
1377: PPUSH
// uc_side = 1 ;
1378: LD_ADDR_OWVAR 20
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// uc_nation = 1 ;
1386: LD_ADDR_OWVAR 21
1390: PUSH
1391: LD_INT 1
1393: ST_TO_ADDR
// count = 0 ;
1394: LD_ADDR_VAR 0 6
1398: PUSH
1399: LD_INT 0
1401: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1402: LD_ADDR_EXP 1
1406: PUSH
1407: LD_STRING JMM
1409: PPUSH
1410: LD_INT 1
1412: PPUSH
1413: LD_STRING 10_
1415: PPUSH
1416: CALL 47609 0 3
1420: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1421: LD_ADDR_EXP 20
1425: PUSH
1426: LD_EXP 20
1430: PUSH
1431: LD_EXP 1
1435: ADD
1436: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1437: LD_ADDR_EXP 10
1441: PUSH
1442: LD_STRING Gary
1444: PPUSH
1445: LD_INT 1
1447: PPUSH
1448: LD_STRING 10_
1450: PPUSH
1451: CALL 47609 0 3
1455: ST_TO_ADDR
// if Gary then
1456: LD_EXP 10
1460: IFFALSE 1478
// JMMSquad = JMMSquad ^ Gary ;
1462: LD_ADDR_EXP 20
1466: PUSH
1467: LD_EXP 20
1471: PUSH
1472: LD_EXP 10
1476: ADD
1477: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1478: LD_ADDR_EXP 5
1482: PUSH
1483: LD_STRING Cyrus
1485: PPUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_STRING 10_
1491: PPUSH
1492: CALL 47609 0 3
1496: ST_TO_ADDR
// if Cyrus then
1497: LD_EXP 5
1501: IFFALSE 1519
// JMMSquad = JMMSquad ^ Cyrus ;
1503: LD_ADDR_EXP 20
1507: PUSH
1508: LD_EXP 20
1512: PUSH
1513: LD_EXP 5
1517: ADD
1518: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1519: LD_ADDR_EXP 4
1523: PUSH
1524: LD_STRING Bobby
1526: PPUSH
1527: LD_INT 1
1529: PPUSH
1530: LD_STRING 10_
1532: PPUSH
1533: CALL 47609 0 3
1537: ST_TO_ADDR
// if Bobby then
1538: LD_EXP 4
1542: IFFALSE 1560
// JMMSquad = JMMSquad ^ Bobby ;
1544: LD_ADDR_EXP 20
1548: PUSH
1549: LD_EXP 20
1553: PUSH
1554: LD_EXP 4
1558: ADD
1559: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1560: LD_ADDR_EXP 6
1564: PUSH
1565: LD_STRING Lisa
1567: PPUSH
1568: LD_INT 1
1570: PPUSH
1571: LD_STRING 10_
1573: PPUSH
1574: CALL 47609 0 3
1578: ST_TO_ADDR
// if Lisa then
1579: LD_EXP 6
1583: IFFALSE 1601
// JMMSquad = JMMSquad ^ Lisa ;
1585: LD_ADDR_EXP 20
1589: PUSH
1590: LD_EXP 20
1594: PUSH
1595: LD_EXP 6
1599: ADD
1600: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1601: LD_ADDR_EXP 2
1605: PUSH
1606: LD_STRING Brown
1608: PPUSH
1609: LD_INT 1
1611: PPUSH
1612: LD_STRING 10_
1614: PPUSH
1615: CALL 47609 0 3
1619: ST_TO_ADDR
// if Brown then
1620: LD_EXP 2
1624: IFFALSE 1642
// JMMSquad = JMMSquad ^ Brown ;
1626: LD_ADDR_EXP 20
1630: PUSH
1631: LD_EXP 20
1635: PUSH
1636: LD_EXP 2
1640: ADD
1641: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1642: LD_ADDR_EXP 3
1646: PUSH
1647: LD_STRING Donaldson
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: LD_STRING 10_
1655: PPUSH
1656: CALL 47609 0 3
1660: ST_TO_ADDR
// if Donaldson then
1661: LD_EXP 3
1665: IFFALSE 1683
// JMMSquad = JMMSquad ^ Donaldson ;
1667: LD_ADDR_EXP 20
1671: PUSH
1672: LD_EXP 20
1676: PUSH
1677: LD_EXP 3
1681: ADD
1682: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1683: LD_ADDR_EXP 7
1687: PUSH
1688: LD_STRING Frank
1690: PPUSH
1691: LD_INT 1
1693: PPUSH
1694: LD_STRING 10_
1696: PPUSH
1697: CALL 47609 0 3
1701: ST_TO_ADDR
// if Frank then
1702: LD_EXP 7
1706: IFFALSE 1724
// JMMSquad = JMMSquad ^ Frank ;
1708: LD_ADDR_EXP 20
1712: PUSH
1713: LD_EXP 20
1717: PUSH
1718: LD_EXP 7
1722: ADD
1723: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1724: LD_ADDR_EXP 9
1728: PUSH
1729: LD_STRING Houten
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_STRING 10_
1737: PPUSH
1738: CALL 47609 0 3
1742: ST_TO_ADDR
// if Houten then
1743: LD_EXP 9
1747: IFFALSE 1765
// JMMSquad = JMMSquad ^ Houten ;
1749: LD_ADDR_EXP 20
1753: PUSH
1754: LD_EXP 20
1758: PUSH
1759: LD_EXP 9
1763: ADD
1764: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1765: LD_ADDR_EXP 21
1769: PUSH
1770: LD_STRING OthersIn10
1772: PPUSH
1773: CALL_OW 31
1777: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1778: LD_ADDR_EXP 24
1782: PUSH
1783: LD_STRING Powell
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: LD_STRING 
1791: PPUSH
1792: CALL 47609 0 3
1796: ST_TO_ADDR
// for i in JMMSquad do
1797: LD_ADDR_VAR 0 2
1801: PUSH
1802: LD_EXP 20
1806: PUSH
1807: FOR_IN
1808: IFFALSE 2088
// begin if count < 3 then
1810: LD_VAR 0 6
1814: PUSH
1815: LD_INT 3
1817: LESS
1818: IFFALSE 1935
// begin vc_engine = 1 ;
1820: LD_ADDR_OWVAR 39
1824: PUSH
1825: LD_INT 1
1827: ST_TO_ADDR
// vc_control = 1 ;
1828: LD_ADDR_OWVAR 38
1832: PUSH
1833: LD_INT 1
1835: ST_TO_ADDR
// vc_weapon = 12 ;
1836: LD_ADDR_OWVAR 40
1840: PUSH
1841: LD_INT 12
1843: ST_TO_ADDR
// vc_chassis = 3 ;
1844: LD_ADDR_OWVAR 37
1848: PUSH
1849: LD_INT 3
1851: ST_TO_ADDR
// veh = CreateVehicle ;
1852: LD_ADDR_VAR 0 4
1856: PUSH
1857: CALL_OW 45
1861: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1862: LD_VAR 0 4
1866: PPUSH
1867: LD_INT 1
1869: PPUSH
1870: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1874: LD_VAR 0 4
1878: PPUSH
1879: LD_INT 2
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 49
// if count mod 2 = 0 then
1889: LD_VAR 0 6
1893: PUSH
1894: LD_INT 2
1896: MOD
1897: PUSH
1898: LD_INT 0
1900: EQUAL
1901: IFFALSE 1920
// AddCargo ( veh , 1 , 100 ) else
1903: LD_VAR 0 4
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 100
1913: PPUSH
1914: CALL_OW 291
1918: GO 1935
// AddCargo ( veh , 3 , 100 ) end ;
1920: LD_VAR 0 4
1924: PPUSH
1925: LD_INT 3
1927: PPUSH
1928: LD_INT 100
1930: PPUSH
1931: CALL_OW 291
// if count >= 3 then
1935: LD_VAR 0 6
1939: PUSH
1940: LD_INT 3
1942: GREATEREQUAL
1943: IFFALSE 2058
// begin vc_engine = 1 ;
1945: LD_ADDR_OWVAR 39
1949: PUSH
1950: LD_INT 1
1952: ST_TO_ADDR
// vc_control = 1 ;
1953: LD_ADDR_OWVAR 38
1957: PUSH
1958: LD_INT 1
1960: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1961: LD_ADDR_OWVAR 40
1965: PUSH
1966: LD_INT 3
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: LD_INT 5
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 1
1982: PPUSH
1983: LD_INT 3
1985: PPUSH
1986: CALL_OW 12
1990: ARRAY
1991: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1992: LD_ADDR_OWVAR 37
1996: PUSH
1997: LD_INT 2
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_VAR 0 2
2011: PUSH
2012: LD_INT 2
2014: MOD
2015: PUSH
2016: LD_INT 1
2018: PLUS
2019: ARRAY
2020: ST_TO_ADDR
// veh = CreateVehicle ;
2021: LD_ADDR_VAR 0 4
2025: PUSH
2026: CALL_OW 45
2030: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2031: LD_VAR 0 4
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2043: LD_VAR 0 4
2047: PPUSH
2048: LD_INT 2
2050: PPUSH
2051: LD_INT 0
2053: PPUSH
2054: CALL_OW 49
// end ; count = count + 1 ;
2058: LD_ADDR_VAR 0 6
2062: PUSH
2063: LD_VAR 0 6
2067: PUSH
2068: LD_INT 1
2070: PLUS
2071: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_VAR 0 4
2081: PPUSH
2082: CALL_OW 52
// end ;
2086: GO 1807
2088: POP
2089: POP
// for i := 1 to others10 do
2090: LD_ADDR_VAR 0 2
2094: PUSH
2095: DOUBLE
2096: LD_INT 1
2098: DEC
2099: ST_TO_ADDR
2100: LD_EXP 21
2104: PUSH
2105: FOR_TO
2106: IFFALSE 2337
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2108: LD_VAR 0 2
2112: PUSH
2113: LD_INT 5
2115: PUSH
2116: LD_INT 4
2118: PUSH
2119: LD_INT 3
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: PUSH
2131: LD_OWVAR 67
2135: ARRAY
2136: LESS
2137: IFFALSE 2290
// begin vc_engine = 1 ;
2139: LD_ADDR_OWVAR 39
2143: PUSH
2144: LD_INT 1
2146: ST_TO_ADDR
// vc_control = 1 ;
2147: LD_ADDR_OWVAR 38
2151: PUSH
2152: LD_INT 1
2154: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2155: LD_ADDR_OWVAR 40
2159: PUSH
2160: LD_INT 3
2162: PUSH
2163: LD_INT 4
2165: PUSH
2166: LD_INT 5
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: LIST
2173: PUSH
2174: LD_INT 1
2176: PPUSH
2177: LD_INT 3
2179: PPUSH
2180: CALL_OW 12
2184: ARRAY
2185: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2186: LD_ADDR_OWVAR 37
2190: PUSH
2191: LD_INT 2
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_VAR 0 2
2205: PUSH
2206: LD_INT 2
2208: MOD
2209: PUSH
2210: LD_INT 1
2212: PLUS
2213: ARRAY
2214: ST_TO_ADDR
// veh = CreateVehicle ;
2215: LD_ADDR_VAR 0 4
2219: PUSH
2220: CALL_OW 45
2224: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2225: LD_VAR 0 4
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2237: LD_VAR 0 4
2241: PPUSH
2242: LD_INT 2
2244: PPUSH
2245: LD_INT 0
2247: PPUSH
2248: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2252: LD_ADDR_EXP 28
2256: PUSH
2257: LD_EXP 28
2261: PUSH
2262: LD_VAR 0 4
2266: ADD
2267: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2268: LD_EXP 21
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_VAR 0 4
2283: PPUSH
2284: CALL_OW 52
// end else
2288: GO 2335
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2290: LD_EXP 21
2294: PUSH
2295: LD_VAR 0 2
2299: ARRAY
2300: PPUSH
2301: LD_INT 106
2303: PPUSH
2304: LD_INT 33
2306: PPUSH
2307: LD_INT 6
2309: PPUSH
2310: LD_INT 0
2312: PPUSH
2313: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2317: LD_EXP 21
2321: PUSH
2322: LD_VAR 0 2
2326: ARRAY
2327: PPUSH
2328: LD_INT 4
2330: PPUSH
2331: CALL_OW 235
// end ; end ;
2335: GO 2105
2337: POP
2338: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2339: LD_INT 22
2341: PUSH
2342: LD_INT 1
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 21
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PPUSH
2363: CALL_OW 69
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: CALL_OW 336
// end ;
2375: LD_VAR 0 1
2379: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2380: LD_INT 0
2382: PPUSH
2383: PPUSH
2384: PPUSH
2385: PPUSH
2386: PPUSH
// uc_side = 1 ;
2387: LD_ADDR_OWVAR 20
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// uc_nation = 1 ;
2395: LD_ADDR_OWVAR 21
2399: PUSH
2400: LD_INT 1
2402: ST_TO_ADDR
// for i := 1 to 10 do
2403: LD_ADDR_VAR 0 2
2407: PUSH
2408: DOUBLE
2409: LD_INT 1
2411: DEC
2412: ST_TO_ADDR
2413: LD_INT 10
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2599
// begin vc_engine = 1 ;
2419: LD_ADDR_OWVAR 39
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// vc_control = 1 ;
2427: LD_ADDR_OWVAR 38
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2435: LD_ADDR_OWVAR 40
2439: PUSH
2440: LD_INT 3
2442: PUSH
2443: LD_INT 4
2445: PUSH
2446: LD_INT 5
2448: PUSH
2449: LD_INT 12
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 1
2460: PPUSH
2461: LD_INT 4
2463: PPUSH
2464: CALL_OW 12
2468: ARRAY
2469: ST_TO_ADDR
// vc_chassis = 3 ;
2470: LD_ADDR_OWVAR 37
2474: PUSH
2475: LD_INT 3
2477: ST_TO_ADDR
// veh = CreateVehicle ;
2478: LD_ADDR_VAR 0 3
2482: PUSH
2483: CALL_OW 45
2487: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2488: LD_VAR 0 3
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2500: LD_VAR 0 3
2504: PPUSH
2505: LD_INT 2
2507: PPUSH
2508: LD_INT 0
2510: PPUSH
2511: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2515: LD_ADDR_EXP 28
2519: PUSH
2520: LD_EXP 28
2524: PUSH
2525: LD_VAR 0 3
2529: ADD
2530: ST_TO_ADDR
// if vc_weapon = 12 then
2531: LD_OWVAR 40
2535: PUSH
2536: LD_INT 12
2538: EQUAL
2539: IFFALSE 2597
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2541: LD_ADDR_VAR 0 4
2545: PUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 10
2551: PPUSH
2552: CALL_OW 12
2556: PUSH
2557: LD_INT 10
2559: MUL
2560: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2561: LD_VAR 0 3
2565: PPUSH
2566: LD_INT 1
2568: PUSH
2569: LD_INT 3
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 1
2578: PPUSH
2579: LD_INT 2
2581: PPUSH
2582: CALL_OW 12
2586: ARRAY
2587: PPUSH
2588: LD_VAR 0 4
2592: PPUSH
2593: CALL_OW 291
// end ; end ;
2597: GO 2416
2599: POP
2600: POP
// end ;
2601: LD_VAR 0 1
2605: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2606: LD_INT 0
2608: PPUSH
2609: PPUSH
2610: PPUSH
// uc_side = 4 ;
2611: LD_ADDR_OWVAR 20
2615: PUSH
2616: LD_INT 4
2618: ST_TO_ADDR
// uc_nation = 1 ;
2619: LD_ADDR_OWVAR 21
2623: PUSH
2624: LD_INT 1
2626: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2627: LD_ADDR_EXP 11
2631: PUSH
2632: LD_STRING Simms
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: LD_STRING 
2640: PPUSH
2641: CALL 47609 0 3
2645: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2646: LD_ADDR_EXP 12
2650: PUSH
2651: LD_STRING Denis
2653: PPUSH
2654: LD_INT 1
2656: PPUSH
2657: LD_STRING 08_
2659: PPUSH
2660: CALL 47609 0 3
2664: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2665: LD_ADDR_EXP 13
2669: PUSH
2670: LD_STRING Joan
2672: PPUSH
2673: LD_INT 1
2675: PPUSH
2676: LD_STRING 08_
2678: PPUSH
2679: CALL 47609 0 3
2683: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2684: LD_STRING 08_Khatam
2686: PPUSH
2687: CALL_OW 28
2691: IFFALSE 2714
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2693: LD_ADDR_EXP 14
2697: PUSH
2698: LD_STRING Khatam
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: LD_STRING 08_
2706: PPUSH
2707: CALL 47609 0 3
2711: ST_TO_ADDR
2712: GO 2742
// if TestCharacters ( 03_Khatam ) then
2714: LD_STRING 03_Khatam
2716: PPUSH
2717: CALL_OW 28
2721: IFFALSE 2742
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2723: LD_ADDR_EXP 14
2727: PUSH
2728: LD_STRING Khatam
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_STRING 03_
2736: PPUSH
2737: CALL 47609 0 3
2741: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2742: LD_ADDR_EXP 15
2746: PUSH
2747: LD_STRING Gladstone
2749: PPUSH
2750: LD_INT 1
2752: PPUSH
2753: LD_STRING 08_
2755: PPUSH
2756: CALL 47609 0 3
2760: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2761: LD_ADDR_EXP 17
2765: PUSH
2766: LD_STRING DeltaDoctor
2768: PPUSH
2769: LD_INT 1
2771: PPUSH
2772: LD_STRING 
2774: PPUSH
2775: CALL 47609 0 3
2779: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2780: LD_ADDR_EXP 7
2784: PUSH
2785: LD_STRING Frank
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: LD_STRING 08_
2793: PPUSH
2794: CALL 47609 0 3
2798: ST_TO_ADDR
// if Frank then
2799: LD_EXP 7
2803: IFFALSE 2826
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2805: LD_ADDR_EXP 8
2809: PUSH
2810: LD_STRING Yamoko
2812: PPUSH
2813: LD_INT 0
2815: PPUSH
2816: LD_STRING 
2818: PPUSH
2819: CALL 47609 0 3
2823: ST_TO_ADDR
2824: GO 2845
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2826: LD_ADDR_EXP 8
2830: PUSH
2831: LD_STRING Kikuchi
2833: PPUSH
2834: LD_INT 1
2836: PPUSH
2837: LD_STRING 08_
2839: PPUSH
2840: CALL 47609 0 3
2844: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2845: LD_ADDR_EXP 22
2849: PUSH
2850: LD_STRING 09_others
2852: PPUSH
2853: CALL_OW 31
2857: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2858: LD_ADDR_EXP 23
2862: PUSH
2863: LD_STRING 09_apes
2865: PPUSH
2866: CALL_OW 31
2870: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2871: LD_EXP 11
2875: PPUSH
2876: LD_INT 1
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2886: LD_EXP 12
2890: PPUSH
2891: LD_INT 1
2893: PPUSH
2894: LD_INT 0
2896: PPUSH
2897: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2901: LD_EXP 13
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 0
2911: PPUSH
2912: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2916: LD_EXP 14
2920: PPUSH
2921: LD_INT 1
2923: PPUSH
2924: LD_INT 0
2926: PPUSH
2927: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2931: LD_EXP 15
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2946: LD_EXP 17
2950: PPUSH
2951: LD_INT 1
2953: PPUSH
2954: LD_INT 0
2956: PPUSH
2957: CALL_OW 49
// if Kikuchi then
2961: LD_EXP 8
2965: IFFALSE 2982
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2967: LD_EXP 8
2971: PPUSH
2972: LD_INT 1
2974: PPUSH
2975: LD_INT 0
2977: PPUSH
2978: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2982: LD_EXP 11
2986: PUSH
2987: LD_EXP 14
2991: PUSH
2992: LD_EXP 12
2996: PUSH
2997: LD_EXP 15
3001: PUSH
3002: LD_EXP 17
3006: PUSH
3007: LD_EXP 13
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: PPUSH
3020: LD_INT 4
3022: PPUSH
3023: CALL_OW 336
// if others09 > 2 then
3027: LD_EXP 22
3031: PUSH
3032: LD_INT 2
3034: GREATER
3035: IFFALSE 3116
// begin for i := 1 to 3 do
3037: LD_ADDR_VAR 0 2
3041: PUSH
3042: DOUBLE
3043: LD_INT 1
3045: DEC
3046: ST_TO_ADDR
3047: LD_INT 3
3049: PUSH
3050: FOR_TO
3051: IFFALSE 3112
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3053: LD_EXP 22
3057: PUSH
3058: LD_VAR 0 2
3062: ARRAY
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 0
3069: PPUSH
3070: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3074: LD_ADDR_EXP 22
3078: PUSH
3079: LD_EXP 22
3083: PPUSH
3084: LD_INT 1
3086: PPUSH
3087: CALL_OW 3
3091: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3092: LD_EXP 22
3096: PUSH
3097: LD_VAR 0 2
3101: ARRAY
3102: PPUSH
3103: LD_INT 2
3105: PPUSH
3106: CALL_OW 336
// end ;
3110: GO 3050
3112: POP
3113: POP
// end else
3114: GO 3176
// begin for i in others09 do
3116: LD_ADDR_VAR 0 2
3120: PUSH
3121: LD_EXP 22
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3174
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3129: LD_VAR 0 2
3133: PPUSH
3134: LD_INT 1
3136: PPUSH
3137: LD_INT 0
3139: PPUSH
3140: CALL_OW 49
// others09 = others09 diff i ;
3144: LD_ADDR_EXP 22
3148: PUSH
3149: LD_EXP 22
3153: PUSH
3154: LD_VAR 0 2
3158: DIFF
3159: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 336
// end ;
3172: GO 3126
3174: POP
3175: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3176: LD_INT 22
3178: PUSH
3179: LD_INT 4
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PUSH
3186: LD_INT 25
3188: PUSH
3189: LD_INT 2
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: PPUSH
3200: CALL_OW 69
3204: PUSH
3205: LD_INT 0
3207: EQUAL
3208: IFFALSE 3340
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3210: LD_ADDR_VAR 0 3
3214: PUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 4
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: LD_INT 25
3227: PUSH
3228: LD_INT 2
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PPUSH
3239: CALL_OW 69
3243: PUSH
3244: LD_EXP 11
3248: PUSH
3249: LD_EXP 14
3253: PUSH
3254: LD_EXP 12
3258: PUSH
3259: LD_EXP 15
3263: PUSH
3264: LD_EXP 17
3268: PUSH
3269: LD_EXP 13
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: DIFF
3282: ST_TO_ADDR
// if not tmp then
3283: LD_VAR 0 3
3287: NOT
3288: IFFALSE 3324
// begin if Denis then
3290: LD_EXP 12
3294: IFFALSE 3310
// SetClass ( Denis , 2 ) else
3296: LD_EXP 12
3300: PPUSH
3301: LD_INT 2
3303: PPUSH
3304: CALL_OW 336
3308: GO 3322
// SetClass ( DeltaDoctor , 2 ) ;
3310: LD_EXP 17
3314: PPUSH
3315: LD_INT 2
3317: PPUSH
3318: CALL_OW 336
// end else
3322: GO 3340
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3324: LD_VAR 0 3
3328: PUSH
3329: LD_INT 1
3331: ARRAY
3332: PPUSH
3333: LD_INT 2
3335: PPUSH
3336: CALL_OW 336
// end ; end ; for i in ape09 do
3340: LD_ADDR_VAR 0 2
3344: PUSH
3345: LD_EXP 23
3349: PUSH
3350: FOR_IN
3351: IFFALSE 3370
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3353: LD_VAR 0 2
3357: PPUSH
3358: LD_INT 1
3360: PPUSH
3361: LD_INT 0
3363: PPUSH
3364: CALL_OW 49
3368: GO 3350
3370: POP
3371: POP
// uc_side = 4 ;
3372: LD_ADDR_OWVAR 20
3376: PUSH
3377: LD_INT 4
3379: ST_TO_ADDR
// hc_class := 1 ;
3380: LD_ADDR_OWVAR 28
3384: PUSH
3385: LD_INT 1
3387: ST_TO_ADDR
// hc_sex := sex_female ;
3388: LD_ADDR_OWVAR 27
3392: PUSH
3393: LD_INT 2
3395: ST_TO_ADDR
// hc_gallery :=  ;
3396: LD_ADDR_OWVAR 33
3400: PUSH
3401: LD_STRING 
3403: ST_TO_ADDR
// hc_name :=  ;
3404: LD_ADDR_OWVAR 26
3408: PUSH
3409: LD_STRING 
3411: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3412: LD_ADDR_OWVAR 31
3416: PUSH
3417: LD_INT 1
3419: PUSH
3420: LD_INT 7
3422: PUSH
3423: LD_INT 1
3425: PUSH
3426: LD_INT 0
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: ST_TO_ADDR
// AmScout = CreateHuman ;
3435: LD_ADDR_EXP 18
3439: PUSH
3440: CALL_OW 44
3444: ST_TO_ADDR
// end ;
3445: LD_VAR 0 1
3449: RET
// export function PrepareCornell ; begin
3450: LD_INT 0
3452: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3453: LD_INT 4
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: CALL_OW 343
// uc_side = 4 ;
3463: LD_ADDR_OWVAR 20
3467: PUSH
3468: LD_INT 4
3470: ST_TO_ADDR
// uc_nation = 1 ;
3471: LD_ADDR_OWVAR 21
3475: PUSH
3476: LD_INT 1
3478: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3479: LD_ADDR_EXP 19
3483: PUSH
3484: LD_STRING Cornel
3486: PPUSH
3487: LD_INT 1
3489: PPUSH
3490: LD_STRING 03_
3492: PPUSH
3493: CALL 47609 0 3
3497: ST_TO_ADDR
// if not Cornell then
3498: LD_EXP 19
3502: NOT
3503: IFFALSE 3507
// exit ;
3505: GO 3615
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3507: LD_EXP 19
3511: PPUSH
3512: LD_INT 8
3514: PPUSH
3515: LD_INT 0
3517: PPUSH
3518: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3522: LD_EXP 19
3526: PPUSH
3527: LD_INT 350
3529: PPUSH
3530: CALL_OW 234
// if IsInUnit ( JMM ) then
3534: LD_EXP 1
3538: PPUSH
3539: CALL_OW 310
3543: IFFALSE 3586
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3545: LD_EXP 19
3549: PPUSH
3550: LD_EXP 1
3554: PPUSH
3555: CALL_OW 310
3559: PPUSH
3560: CALL_OW 250
3564: PPUSH
3565: LD_EXP 1
3569: PPUSH
3570: CALL_OW 310
3574: PPUSH
3575: CALL_OW 251
3579: PPUSH
3580: CALL_OW 111
3584: GO 3615
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3586: LD_EXP 19
3590: PPUSH
3591: LD_EXP 1
3595: PPUSH
3596: CALL_OW 250
3600: PPUSH
3601: LD_EXP 1
3605: PPUSH
3606: CALL_OW 251
3610: PPUSH
3611: CALL_OW 111
// end ; end_of_file
3615: LD_VAR 0 1
3619: RET
// export function PrepareRussians ; var i , un ; begin
3620: LD_INT 0
3622: PPUSH
3623: PPUSH
3624: PPUSH
// uc_side = 3 ;
3625: LD_ADDR_OWVAR 20
3629: PUSH
3630: LD_INT 3
3632: ST_TO_ADDR
// uc_nation = 3 ;
3633: LD_ADDR_OWVAR 21
3637: PUSH
3638: LD_INT 3
3640: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3641: LD_ADDR_EXP 25
3645: PUSH
3646: LD_STRING Tsaritsyn
3648: PPUSH
3649: LD_INT 0
3651: PPUSH
3652: LD_STRING 
3654: PPUSH
3655: CALL 47609 0 3
3659: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3660: LD_EXP 25
3664: PPUSH
3665: LD_INT 3
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: CALL_OW 49
// for i = 1 to 14 do
3675: LD_ADDR_VAR 0 2
3679: PUSH
3680: DOUBLE
3681: LD_INT 1
3683: DEC
3684: ST_TO_ADDR
3685: LD_INT 14
3687: PUSH
3688: FOR_TO
3689: IFFALSE 3775
// begin uc_side = 3 ;
3691: LD_ADDR_OWVAR 20
3695: PUSH
3696: LD_INT 3
3698: ST_TO_ADDR
// uc_nation = 3 ;
3699: LD_ADDR_OWVAR 21
3703: PUSH
3704: LD_INT 3
3706: ST_TO_ADDR
// hc_gallery =  ;
3707: LD_ADDR_OWVAR 33
3711: PUSH
3712: LD_STRING 
3714: ST_TO_ADDR
// hc_name =  ;
3715: LD_ADDR_OWVAR 26
3719: PUSH
3720: LD_STRING 
3722: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3723: LD_INT 0
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: LD_EXP 36
3733: PPUSH
3734: LD_EXP 37
3738: PPUSH
3739: CALL_OW 12
3743: PPUSH
3744: CALL_OW 380
// un = CreateHuman ;
3748: LD_ADDR_VAR 0 3
3752: PUSH
3753: CALL_OW 44
3757: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3758: LD_VAR 0 3
3762: PPUSH
3763: LD_INT 3
3765: PPUSH
3766: LD_INT 0
3768: PPUSH
3769: CALL_OW 49
// end ;
3773: GO 3688
3775: POP
3776: POP
// for i = 1 to 6 do
3777: LD_ADDR_VAR 0 2
3781: PUSH
3782: DOUBLE
3783: LD_INT 1
3785: DEC
3786: ST_TO_ADDR
3787: LD_INT 6
3789: PUSH
3790: FOR_TO
3791: IFFALSE 3877
// begin uc_side = 3 ;
3793: LD_ADDR_OWVAR 20
3797: PUSH
3798: LD_INT 3
3800: ST_TO_ADDR
// uc_nation = 3 ;
3801: LD_ADDR_OWVAR 21
3805: PUSH
3806: LD_INT 3
3808: ST_TO_ADDR
// hc_gallery =  ;
3809: LD_ADDR_OWVAR 33
3813: PUSH
3814: LD_STRING 
3816: ST_TO_ADDR
// hc_name =  ;
3817: LD_ADDR_OWVAR 26
3821: PUSH
3822: LD_STRING 
3824: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3825: LD_INT 0
3827: PPUSH
3828: LD_INT 2
3830: PPUSH
3831: LD_EXP 36
3835: PPUSH
3836: LD_EXP 37
3840: PPUSH
3841: CALL_OW 12
3845: PPUSH
3846: CALL_OW 380
// un = CreateHuman ;
3850: LD_ADDR_VAR 0 3
3854: PUSH
3855: CALL_OW 44
3859: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3860: LD_VAR 0 3
3864: PPUSH
3865: LD_INT 3
3867: PPUSH
3868: LD_INT 0
3870: PPUSH
3871: CALL_OW 49
// end ;
3875: GO 3790
3877: POP
3878: POP
// for i = 1 to 6 do
3879: LD_ADDR_VAR 0 2
3883: PUSH
3884: DOUBLE
3885: LD_INT 1
3887: DEC
3888: ST_TO_ADDR
3889: LD_INT 6
3891: PUSH
3892: FOR_TO
3893: IFFALSE 3979
// begin uc_side = 3 ;
3895: LD_ADDR_OWVAR 20
3899: PUSH
3900: LD_INT 3
3902: ST_TO_ADDR
// uc_nation = 3 ;
3903: LD_ADDR_OWVAR 21
3907: PUSH
3908: LD_INT 3
3910: ST_TO_ADDR
// hc_gallery =  ;
3911: LD_ADDR_OWVAR 33
3915: PUSH
3916: LD_STRING 
3918: ST_TO_ADDR
// hc_name =  ;
3919: LD_ADDR_OWVAR 26
3923: PUSH
3924: LD_STRING 
3926: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3927: LD_INT 0
3929: PPUSH
3930: LD_INT 3
3932: PPUSH
3933: LD_EXP 36
3937: PPUSH
3938: LD_EXP 37
3942: PPUSH
3943: CALL_OW 12
3947: PPUSH
3948: CALL_OW 380
// un = CreateHuman ;
3952: LD_ADDR_VAR 0 3
3956: PUSH
3957: CALL_OW 44
3961: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3962: LD_VAR 0 3
3966: PPUSH
3967: LD_INT 3
3969: PPUSH
3970: LD_INT 0
3972: PPUSH
3973: CALL_OW 49
// end ;
3977: GO 3892
3979: POP
3980: POP
// for i = 1 to 4 do
3981: LD_ADDR_VAR 0 2
3985: PUSH
3986: DOUBLE
3987: LD_INT 1
3989: DEC
3990: ST_TO_ADDR
3991: LD_INT 4
3993: PUSH
3994: FOR_TO
3995: IFFALSE 4081
// begin uc_side = 3 ;
3997: LD_ADDR_OWVAR 20
4001: PUSH
4002: LD_INT 3
4004: ST_TO_ADDR
// uc_nation = 3 ;
4005: LD_ADDR_OWVAR 21
4009: PUSH
4010: LD_INT 3
4012: ST_TO_ADDR
// hc_gallery =  ;
4013: LD_ADDR_OWVAR 33
4017: PUSH
4018: LD_STRING 
4020: ST_TO_ADDR
// hc_name =  ;
4021: LD_ADDR_OWVAR 26
4025: PUSH
4026: LD_STRING 
4028: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4029: LD_INT 0
4031: PPUSH
4032: LD_INT 4
4034: PPUSH
4035: LD_EXP 36
4039: PPUSH
4040: LD_EXP 37
4044: PPUSH
4045: CALL_OW 12
4049: PPUSH
4050: CALL_OW 380
// un = CreateHuman ;
4054: LD_ADDR_VAR 0 3
4058: PUSH
4059: CALL_OW 44
4063: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4064: LD_VAR 0 3
4068: PPUSH
4069: LD_INT 3
4071: PPUSH
4072: LD_INT 0
4074: PPUSH
4075: CALL_OW 49
// end ;
4079: GO 3994
4081: POP
4082: POP
// end ; end_of_file
4083: LD_VAR 0 1
4087: RET
// export function PrepareArabianCommander ; begin
4088: LD_INT 0
4090: PPUSH
// uc_side = 2 ;
4091: LD_ADDR_OWVAR 20
4095: PUSH
4096: LD_INT 2
4098: ST_TO_ADDR
// uc_nation = 2 ;
4099: LD_ADDR_OWVAR 21
4103: PUSH
4104: LD_INT 2
4106: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4107: LD_ADDR_EXP 26
4111: PUSH
4112: LD_STRING Dietrich
4114: PPUSH
4115: CALL_OW 25
4119: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4120: LD_EXP 26
4124: PPUSH
4125: LD_INT 4
4127: PPUSH
4128: LD_INT 0
4130: PPUSH
4131: CALL_OW 49
// end ;
4135: LD_VAR 0 1
4139: RET
// export function PrepareArabian ; var i , un , veh ; begin
4140: LD_INT 0
4142: PPUSH
4143: PPUSH
4144: PPUSH
4145: PPUSH
// uc_side := 2 ;
4146: LD_ADDR_OWVAR 20
4150: PUSH
4151: LD_INT 2
4153: ST_TO_ADDR
// uc_nation := 2 ;
4154: LD_ADDR_OWVAR 21
4158: PUSH
4159: LD_INT 2
4161: ST_TO_ADDR
// if not Ahmed then
4162: LD_EXP 27
4166: NOT
4167: IFFALSE 4235
// begin InitHc ;
4169: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4173: LD_INT 1
4175: PPUSH
4176: LD_INT 1
4178: PPUSH
4179: LD_EXP 36
4183: PPUSH
4184: LD_EXP 37
4188: PUSH
4189: LD_INT 1
4191: PLUS
4192: PPUSH
4193: CALL_OW 12
4197: PPUSH
4198: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4202: LD_ADDR_OWVAR 26
4206: PUSH
4207: LD_STRING Ahmed Abbasid
4209: ST_TO_ADDR
// Ahmed := CreateHuman ;
4210: LD_ADDR_EXP 27
4214: PUSH
4215: CALL_OW 44
4219: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4220: LD_EXP 27
4224: PPUSH
4225: LD_INT 4
4227: PPUSH
4228: LD_INT 0
4230: PPUSH
4231: CALL_OW 49
// end ; for i = 1 to 4 do
4235: LD_ADDR_VAR 0 2
4239: PUSH
4240: DOUBLE
4241: LD_INT 1
4243: DEC
4244: ST_TO_ADDR
4245: LD_INT 4
4247: PUSH
4248: FOR_TO
4249: IFFALSE 4335
// begin uc_side = 2 ;
4251: LD_ADDR_OWVAR 20
4255: PUSH
4256: LD_INT 2
4258: ST_TO_ADDR
// uc_nation = 2 ;
4259: LD_ADDR_OWVAR 21
4263: PUSH
4264: LD_INT 2
4266: ST_TO_ADDR
// hc_gallery =  ;
4267: LD_ADDR_OWVAR 33
4271: PUSH
4272: LD_STRING 
4274: ST_TO_ADDR
// hc_name =  ;
4275: LD_ADDR_OWVAR 26
4279: PUSH
4280: LD_STRING 
4282: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4283: LD_INT 0
4285: PPUSH
4286: LD_INT 2
4288: PPUSH
4289: LD_EXP 36
4293: PPUSH
4294: LD_EXP 37
4298: PPUSH
4299: CALL_OW 12
4303: PPUSH
4304: CALL_OW 380
// un = CreateHuman ;
4308: LD_ADDR_VAR 0 3
4312: PUSH
4313: CALL_OW 44
4317: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4318: LD_VAR 0 3
4322: PPUSH
4323: LD_INT 4
4325: PPUSH
4326: LD_INT 0
4328: PPUSH
4329: CALL_OW 49
// end ;
4333: GO 4248
4335: POP
4336: POP
// for i = 1 to 5 do
4337: LD_ADDR_VAR 0 2
4341: PUSH
4342: DOUBLE
4343: LD_INT 1
4345: DEC
4346: ST_TO_ADDR
4347: LD_INT 5
4349: PUSH
4350: FOR_TO
4351: IFFALSE 4437
// begin uc_side = 2 ;
4353: LD_ADDR_OWVAR 20
4357: PUSH
4358: LD_INT 2
4360: ST_TO_ADDR
// uc_nation = 2 ;
4361: LD_ADDR_OWVAR 21
4365: PUSH
4366: LD_INT 2
4368: ST_TO_ADDR
// hc_gallery =  ;
4369: LD_ADDR_OWVAR 33
4373: PUSH
4374: LD_STRING 
4376: ST_TO_ADDR
// hc_name =  ;
4377: LD_ADDR_OWVAR 26
4381: PUSH
4382: LD_STRING 
4384: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4385: LD_INT 0
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_EXP 36
4395: PPUSH
4396: LD_EXP 37
4400: PPUSH
4401: CALL_OW 12
4405: PPUSH
4406: CALL_OW 380
// un = CreateHuman ;
4410: LD_ADDR_VAR 0 3
4414: PUSH
4415: CALL_OW 44
4419: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4420: LD_VAR 0 3
4424: PPUSH
4425: LD_INT 4
4427: PPUSH
4428: LD_INT 0
4430: PPUSH
4431: CALL_OW 49
// end ;
4435: GO 4350
4437: POP
4438: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4439: LD_ADDR_VAR 0 2
4443: PUSH
4444: DOUBLE
4445: LD_INT 1
4447: DEC
4448: ST_TO_ADDR
4449: LD_INT 3
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 4
4457: PUSH
4458: LD_INT 4
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_OWVAR 67
4471: ARRAY
4472: PUSH
4473: FOR_TO
4474: IFFALSE 4560
// begin uc_side = 2 ;
4476: LD_ADDR_OWVAR 20
4480: PUSH
4481: LD_INT 2
4483: ST_TO_ADDR
// uc_nation = 2 ;
4484: LD_ADDR_OWVAR 21
4488: PUSH
4489: LD_INT 2
4491: ST_TO_ADDR
// hc_gallery =  ;
4492: LD_ADDR_OWVAR 33
4496: PUSH
4497: LD_STRING 
4499: ST_TO_ADDR
// hc_name =  ;
4500: LD_ADDR_OWVAR 26
4504: PUSH
4505: LD_STRING 
4507: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4508: LD_INT 0
4510: PPUSH
4511: LD_INT 4
4513: PPUSH
4514: LD_EXP 36
4518: PPUSH
4519: LD_EXP 37
4523: PPUSH
4524: CALL_OW 12
4528: PPUSH
4529: CALL_OW 380
// un = CreateHuman ;
4533: LD_ADDR_VAR 0 3
4537: PUSH
4538: CALL_OW 44
4542: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4543: LD_VAR 0 3
4547: PPUSH
4548: LD_INT 4
4550: PPUSH
4551: LD_INT 0
4553: PPUSH
4554: CALL_OW 49
// end ;
4558: GO 4473
4560: POP
4561: POP
// for i = 1 to 2 do
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: DOUBLE
4568: LD_INT 1
4570: DEC
4571: ST_TO_ADDR
4572: LD_INT 2
4574: PUSH
4575: FOR_TO
4576: IFFALSE 4706
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4578: LD_ADDR_VAR 0 4
4582: PUSH
4583: LD_INT 22
4585: PUSH
4586: LD_INT 2
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 21
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 58
4605: PUSH
4606: EMPTY
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 69
4618: ST_TO_ADDR
// uc_side = 2 ;
4619: LD_ADDR_OWVAR 20
4623: PUSH
4624: LD_INT 2
4626: ST_TO_ADDR
// uc_nation = 2 ;
4627: LD_ADDR_OWVAR 21
4631: PUSH
4632: LD_INT 2
4634: ST_TO_ADDR
// hc_gallery =  ;
4635: LD_ADDR_OWVAR 33
4639: PUSH
4640: LD_STRING 
4642: ST_TO_ADDR
// hc_name =  ;
4643: LD_ADDR_OWVAR 26
4647: PUSH
4648: LD_STRING 
4650: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4651: LD_INT 0
4653: PPUSH
4654: LD_INT 3
4656: PPUSH
4657: LD_EXP 36
4661: PPUSH
4662: LD_EXP 37
4666: PPUSH
4667: CALL_OW 12
4671: PPUSH
4672: CALL_OW 380
// un = CreateHuman ;
4676: LD_ADDR_VAR 0 3
4680: PUSH
4681: CALL_OW 44
4685: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4686: LD_VAR 0 3
4690: PPUSH
4691: LD_VAR 0 4
4695: PUSH
4696: LD_INT 1
4698: ARRAY
4699: PPUSH
4700: CALL_OW 52
// end ;
4704: GO 4575
4706: POP
4707: POP
// end ;
4708: LD_VAR 0 1
4712: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4713: LD_INT 0
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
4720: PPUSH
// for i := 1 to 2 do
4721: LD_ADDR_VAR 0 2
4725: PUSH
4726: DOUBLE
4727: LD_INT 1
4729: DEC
4730: ST_TO_ADDR
4731: LD_INT 2
4733: PUSH
4734: FOR_TO
4735: IFFALSE 4861
// begin uc_side = 5 ;
4737: LD_ADDR_OWVAR 20
4741: PUSH
4742: LD_INT 5
4744: ST_TO_ADDR
// uc_nation = 2 ;
4745: LD_ADDR_OWVAR 21
4749: PUSH
4750: LD_INT 2
4752: ST_TO_ADDR
// vc_chassis := 31 ;
4753: LD_ADDR_OWVAR 37
4757: PUSH
4758: LD_INT 31
4760: ST_TO_ADDR
// vc_control := control_rider ;
4761: LD_ADDR_OWVAR 38
4765: PUSH
4766: LD_INT 4
4768: ST_TO_ADDR
// animal := CreateVehicle ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 45
4778: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 7
4786: PPUSH
4787: LD_INT 0
4789: PPUSH
4790: CALL_OW 49
// hc_gallery =  ;
4794: LD_ADDR_OWVAR 33
4798: PUSH
4799: LD_STRING 
4801: ST_TO_ADDR
// hc_name =  ;
4802: LD_ADDR_OWVAR 26
4806: PUSH
4807: LD_STRING 
4809: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4810: LD_INT 0
4812: PPUSH
4813: LD_INT 11
4815: PPUSH
4816: LD_EXP 36
4820: PPUSH
4821: LD_EXP 37
4825: PPUSH
4826: CALL_OW 12
4830: PPUSH
4831: CALL_OW 380
// un = CreateHuman ;
4835: LD_ADDR_VAR 0 4
4839: PUSH
4840: CALL_OW 44
4844: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4845: LD_VAR 0 4
4849: PPUSH
4850: LD_VAR 0 3
4854: PPUSH
4855: CALL_OW 52
// end ;
4859: GO 4734
4861: POP
4862: POP
// repeat wait ( 0 0$1 ) ;
4863: LD_INT 35
4865: PPUSH
4866: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4870: LD_ADDR_VAR 0 5
4874: PUSH
4875: LD_INT 22
4877: PUSH
4878: LD_INT 1
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PPUSH
4890: LD_VAR 0 2
4894: PPUSH
4895: CALL_OW 74
4899: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4900: LD_ADDR_VAR 0 6
4904: PUSH
4905: LD_INT 22
4907: PUSH
4908: LD_INT 1
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 2
4917: PUSH
4918: LD_INT 59
4920: PUSH
4921: EMPTY
4922: LIST
4923: PUSH
4924: LD_INT 21
4926: PUSH
4927: LD_INT 1
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 21
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: EMPTY
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: PPUSH
4962: LD_VAR 0 2
4966: PPUSH
4967: CALL_OW 74
4971: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4972: LD_ADDR_VAR 0 2
4976: PUSH
4977: LD_INT 22
4979: PUSH
4980: LD_INT 5
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 25
4989: PUSH
4990: LD_INT 11
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PPUSH
5001: CALL_OW 69
5005: PUSH
5006: FOR_IN
5007: IFFALSE 5077
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5009: LD_VAR 0 2
5013: PPUSH
5014: LD_VAR 0 5
5018: PPUSH
5019: CALL_OW 296
5023: PUSH
5024: LD_INT 8
5026: PLUS
5027: PUSH
5028: LD_VAR 0 2
5032: PPUSH
5033: LD_VAR 0 6
5037: PPUSH
5038: CALL_OW 296
5042: LESS
5043: IFFALSE 5061
// ComAttackUnit ( i , target1 ) else
5045: LD_VAR 0 2
5049: PPUSH
5050: LD_VAR 0 5
5054: PPUSH
5055: CALL_OW 115
5059: GO 5075
// ComAttackUnit ( i , target2 ) ;
5061: LD_VAR 0 2
5065: PPUSH
5066: LD_VAR 0 6
5070: PPUSH
5071: CALL_OW 115
// end ;
5075: GO 5006
5077: POP
5078: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
5079: LD_INT 22
5081: PUSH
5082: LD_INT 5
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: LD_INT 25
5091: PUSH
5092: LD_INT 11
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PPUSH
5103: CALL_OW 69
5107: PUSH
5108: LD_INT 0
5110: EQUAL
5111: PUSH
5112: LD_INT 22
5114: PUSH
5115: LD_INT 1
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 69
5126: PUSH
5127: LD_INT 0
5129: EQUAL
5130: OR
5131: IFFALSE 4863
// end ; end_of_file
5133: LD_VAR 0 1
5137: RET
// every 1 do
5138: GO 5140
5140: DISABLE
// begin Video ( true ) ;
5141: LD_INT 1
5143: PPUSH
5144: CALL 84318 0 1
// RevealFogArea ( 1 , EpsilonTerrain ) ;
5148: LD_INT 1
5150: PPUSH
5151: LD_INT 19
5153: PPUSH
5154: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5158: LD_EXP 11
5162: PPUSH
5163: CALL_OW 87
// wait ( 0 0$3 ) ;
5167: LD_INT 105
5169: PPUSH
5170: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5174: LD_EXP 1
5178: PPUSH
5179: CALL_OW 310
5183: PPUSH
5184: CALL_OW 85
// Wait ( 0 0$1 ) ;
5188: LD_INT 35
5190: PPUSH
5191: CALL_OW 67
// if IsOk ( Gary ) then
5195: LD_EXP 10
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5242
// begin Say ( Gary , D2-Gary-1 ) ;
5206: LD_EXP 10
5210: PPUSH
5211: LD_STRING D2-Gary-1
5213: PPUSH
5214: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5218: LD_EXP 1
5222: PPUSH
5223: LD_STRING D2-JMM-1
5225: PPUSH
5226: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5230: LD_EXP 10
5234: PPUSH
5235: LD_STRING D2-Gary-2
5237: PPUSH
5238: CALL_OW 88
// end ; Video ( false ) ;
5242: LD_INT 0
5244: PPUSH
5245: CALL 84318 0 1
// ChangeMissionObjectives ( M1 ) ;
5249: LD_STRING M1
5251: PPUSH
5252: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5256: LD_INT 38
5258: PPUSH
5259: LD_INT 1
5261: PPUSH
5262: LD_INT 100
5264: PPUSH
5265: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5269: LD_INT 47
5271: PPUSH
5272: LD_INT 1
5274: PPUSH
5275: LD_INT 50
5277: PPUSH
5278: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5282: LD_INT 47
5284: PPUSH
5285: LD_INT 3
5287: PPUSH
5288: LD_INT 50
5290: PPUSH
5291: CALL_OW 291
// SaveForQuickRestart ;
5295: CALL_OW 22
// end ;
5299: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5300: LD_EXP 1
5304: PPUSH
5305: LD_EXP 11
5309: PPUSH
5310: CALL_OW 296
5314: PUSH
5315: LD_INT 15
5317: LESS
5318: IFFALSE 5999
5320: GO 5322
5322: DISABLE
5323: LD_INT 0
5325: PPUSH
// begin wait ( 0 0$3 ) ;
5326: LD_INT 105
5328: PPUSH
5329: CALL_OW 67
// Video ( true ) ;
5333: LD_INT 1
5335: PPUSH
5336: CALL 84318 0 1
// ComExitVehicle ( JMM ) ;
5340: LD_EXP 1
5344: PPUSH
5345: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5349: LD_EXP 1
5353: PPUSH
5354: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
5358: LD_EXP 1
5362: PPUSH
5363: LD_EXP 11
5367: PPUSH
5368: CALL_OW 179
// p := 15 ;
5372: LD_ADDR_VAR 0 1
5376: PUSH
5377: LD_INT 15
5379: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5380: LD_INT 35
5382: PPUSH
5383: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5387: LD_EXP 11
5391: PUSH
5392: LD_EXP 13
5396: PUSH
5397: LD_EXP 12
5401: PUSH
5402: LD_EXP 14
5406: PUSH
5407: LD_EXP 8
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: PPUSH
5419: LD_EXP 1
5423: PPUSH
5424: CALL_OW 112
// p := p - 1 ;
5428: LD_ADDR_VAR 0 1
5432: PUSH
5433: LD_VAR 0 1
5437: PUSH
5438: LD_INT 1
5440: MINUS
5441: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5442: LD_EXP 1
5446: PPUSH
5447: LD_EXP 11
5451: PPUSH
5452: CALL_OW 296
5456: PUSH
5457: LD_INT 5
5459: LESS
5460: PUSH
5461: LD_VAR 0 1
5465: PUSH
5466: LD_INT 0
5468: LESSEQUAL
5469: OR
5470: IFFALSE 5380
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5472: LD_EXP 11
5476: PUSH
5477: LD_EXP 13
5481: PUSH
5482: LD_EXP 12
5486: PUSH
5487: LD_EXP 14
5491: PUSH
5492: LD_EXP 8
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: PPUSH
5504: LD_EXP 1
5508: PPUSH
5509: CALL_OW 119
// if not IsInUnit ( JMM ) then
5513: LD_EXP 1
5517: PPUSH
5518: CALL_OW 310
5522: NOT
5523: IFFALSE 5539
// ComTurnUnit ( JMM , Simms ) ;
5525: LD_EXP 1
5529: PPUSH
5530: LD_EXP 11
5534: PPUSH
5535: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5539: LD_EXP 11
5543: PUSH
5544: LD_EXP 13
5548: PUSH
5549: LD_EXP 12
5553: PUSH
5554: LD_EXP 14
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: PPUSH
5565: LD_EXP 1
5569: PPUSH
5570: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5574: LD_EXP 1
5578: PUSH
5579: LD_EXP 11
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: PPUSH
5588: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5592: LD_EXP 11
5596: PPUSH
5597: LD_STRING D2a-Sim-1
5599: PPUSH
5600: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5604: LD_EXP 1
5608: PPUSH
5609: LD_STRING D2a-JMM-1
5611: PPUSH
5612: CALL_OW 88
// if IsOk ( Joan ) then
5616: LD_EXP 13
5620: PPUSH
5621: CALL_OW 302
5625: IFFALSE 5703
// begin if not IsInUnit ( JMM ) then
5627: LD_EXP 1
5631: PPUSH
5632: CALL_OW 310
5636: NOT
5637: IFFALSE 5653
// ComTurnUnit ( JMM , Joan ) ;
5639: LD_EXP 1
5643: PPUSH
5644: LD_EXP 13
5648: PPUSH
5649: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5653: LD_EXP 13
5657: PPUSH
5658: LD_EXP 1
5662: PPUSH
5663: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5667: LD_EXP 13
5671: PPUSH
5672: LD_STRING D2b-Joan-1
5674: PPUSH
5675: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5679: LD_EXP 1
5683: PPUSH
5684: LD_STRING D2b-JMM-1
5686: PPUSH
5687: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5691: LD_EXP 13
5695: PPUSH
5696: LD_STRING D2b-Joan-2
5698: PPUSH
5699: CALL_OW 88
// end ; if IsOk ( Denis ) then
5703: LD_EXP 12
5707: PPUSH
5708: CALL_OW 302
5712: IFFALSE 5766
// begin if not IsInUnit ( JMM ) then
5714: LD_EXP 1
5718: PPUSH
5719: CALL_OW 310
5723: NOT
5724: IFFALSE 5740
// ComTurnUnit ( JMM , Denis ) ;
5726: LD_EXP 1
5730: PPUSH
5731: LD_EXP 12
5735: PPUSH
5736: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
5740: LD_EXP 12
5744: PPUSH
5745: LD_EXP 1
5749: PPUSH
5750: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5754: LD_EXP 12
5758: PPUSH
5759: LD_STRING D2c-Den-1
5761: PPUSH
5762: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
5766: LD_EXP 8
5770: PPUSH
5771: CALL_OW 302
5775: PUSH
5776: LD_STRING 08_Kikuchi
5778: PPUSH
5779: CALL_OW 28
5783: NOT
5784: AND
5785: IFFALSE 5880
// begin repeat wait ( 0 0$1 ) ;
5787: LD_INT 35
5789: PPUSH
5790: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
5794: LD_EXP 8
5798: PPUSH
5799: LD_EXP 1
5803: PPUSH
5804: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
5808: LD_EXP 1
5812: PPUSH
5813: LD_EXP 8
5817: PPUSH
5818: CALL_OW 296
5822: PUSH
5823: LD_INT 5
5825: LESS
5826: IFFALSE 5787
// ComTurnUnit ( Kikuchi , JMM ) ;
5828: LD_EXP 8
5832: PPUSH
5833: LD_EXP 1
5837: PPUSH
5838: CALL_OW 119
// if not IsInUnit ( JMM ) then
5842: LD_EXP 1
5846: PPUSH
5847: CALL_OW 310
5851: NOT
5852: IFFALSE 5868
// ComTurnUnit ( JMM , Kikuchi ) ;
5854: LD_EXP 1
5858: PPUSH
5859: LD_EXP 8
5863: PPUSH
5864: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
5868: LD_EXP 8
5872: PPUSH
5873: LD_STRING D3b-Yam-1
5875: PPUSH
5876: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5880: LD_EXP 14
5884: PPUSH
5885: CALL_OW 302
5889: IFFALSE 5955
// begin if not IsInUnit ( JMM ) then
5891: LD_EXP 1
5895: PPUSH
5896: CALL_OW 310
5900: NOT
5901: IFFALSE 5917
// ComTurnUnit ( JMM , Khatam ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_EXP 14
5912: PPUSH
5913: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
5917: LD_EXP 14
5921: PPUSH
5922: LD_EXP 1
5926: PPUSH
5927: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5931: LD_EXP 1
5935: PPUSH
5936: LD_STRING D2c-JMM-1
5938: PPUSH
5939: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5943: LD_EXP 14
5947: PPUSH
5948: LD_STRING D2c-Khat-1
5950: PPUSH
5951: CALL_OW 88
// end ; Video ( false ) ;
5955: LD_INT 0
5957: PPUSH
5958: CALL 84318 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5962: LD_INT 22
5964: PUSH
5965: LD_INT 4
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PPUSH
5972: CALL_OW 69
5976: PPUSH
5977: LD_INT 1
5979: PPUSH
5980: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5984: LD_STRING M1a
5986: PPUSH
5987: CALL_OW 337
// joinEpsilon = 1 ;
5991: LD_ADDR_EXP 29
5995: PUSH
5996: LD_INT 1
5998: ST_TO_ADDR
// end ;
5999: PPOPN 1
6001: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
6002: LD_INT 38
6004: PPUSH
6005: LD_INT 1
6007: PPUSH
6008: CALL_OW 289
6012: PUSH
6013: LD_INT 0
6015: EQUAL
6016: PUSH
6017: LD_INT 47
6019: PPUSH
6020: LD_INT 1
6022: PPUSH
6023: CALL_OW 289
6027: PUSH
6028: LD_INT 0
6030: EQUAL
6031: AND
6032: PUSH
6033: LD_INT 47
6035: PPUSH
6036: LD_INT 2
6038: PPUSH
6039: CALL_OW 289
6043: PUSH
6044: LD_INT 0
6046: EQUAL
6047: AND
6048: IFFALSE 6173
6050: GO 6052
6052: DISABLE
6053: LD_INT 0
6055: PPUSH
// begin p := 0 ;
6056: LD_ADDR_VAR 0 1
6060: PUSH
6061: LD_INT 0
6063: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6064: LD_INT 38
6066: PUSH
6067: LD_INT 47
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PPUSH
6074: LD_INT 56
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6084: LD_INT 35
6086: PPUSH
6087: CALL_OW 67
// p := p + 1 ;
6091: LD_ADDR_VAR 0 1
6095: PUSH
6096: LD_VAR 0 1
6100: PUSH
6101: LD_INT 1
6103: PLUS
6104: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6105: LD_INT 38
6107: PUSH
6108: LD_INT 47
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PPUSH
6115: LD_INT 56
6117: PPUSH
6118: LD_INT 0
6120: PPUSH
6121: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6125: LD_INT 38
6127: PPUSH
6128: LD_INT 27
6130: PPUSH
6131: CALL_OW 308
6135: IFFALSE 6144
// RemoveUnit ( cargo1 ) ;
6137: LD_INT 38
6139: PPUSH
6140: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6144: LD_INT 47
6146: PPUSH
6147: LD_INT 27
6149: PPUSH
6150: CALL_OW 308
6154: IFFALSE 6163
// RemoveUnit ( cargo2 ) ;
6156: LD_INT 47
6158: PPUSH
6159: CALL_OW 64
// until p > 30 ;
6163: LD_VAR 0 1
6167: PUSH
6168: LD_INT 30
6170: GREATER
6171: IFFALSE 6084
// end ;
6173: PPOPN 1
6175: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6176: LD_EXP 65
6180: PUSH
6181: LD_INT 1
6183: EQUAL
6184: IFFALSE 7316
6186: GO 6188
6188: DISABLE
6189: LD_INT 0
6191: PPUSH
6192: PPUSH
6193: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6194: LD_ADDR_VAR 0 1
6198: PUSH
6199: LD_INT 22
6201: PUSH
6202: LD_INT 1
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 4
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 26
6221: PUSH
6222: LD_INT 1
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: PPUSH
6234: CALL_OW 69
6238: PUSH
6239: LD_EXP 1
6243: PUSH
6244: LD_EXP 2
6248: PUSH
6249: LD_EXP 3
6253: PUSH
6254: LD_EXP 4
6258: PUSH
6259: LD_EXP 5
6263: PUSH
6264: LD_EXP 6
6268: PUSH
6269: LD_EXP 7
6273: PUSH
6274: LD_EXP 8
6278: PUSH
6279: LD_EXP 9
6283: PUSH
6284: LD_EXP 10
6288: PUSH
6289: LD_EXP 11
6293: PUSH
6294: LD_EXP 12
6298: PUSH
6299: LD_EXP 13
6303: PUSH
6304: LD_EXP 14
6308: PUSH
6309: LD_EXP 15
6313: PUSH
6314: LD_EXP 16
6318: PUSH
6319: LD_EXP 17
6323: PUSH
6324: LD_EXP 18
6328: PUSH
6329: LD_EXP 19
6333: PUSH
6334: LD_EXP 24
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: DIFF
6361: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6362: LD_ADDR_VAR 0 2
6366: PUSH
6367: LD_INT 22
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 26
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: LD_INT 2
6389: PUSH
6390: LD_INT 25
6392: PUSH
6393: LD_INT 1
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 25
6402: PUSH
6403: LD_INT 2
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 25
6412: PUSH
6413: LD_INT 3
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: LIST
6430: PPUSH
6431: CALL_OW 69
6435: PUSH
6436: LD_EXP 1
6440: PUSH
6441: LD_EXP 2
6445: PUSH
6446: LD_EXP 3
6450: PUSH
6451: LD_EXP 4
6455: PUSH
6456: LD_EXP 5
6460: PUSH
6461: LD_EXP 6
6465: PUSH
6466: LD_EXP 7
6470: PUSH
6471: LD_EXP 8
6475: PUSH
6476: LD_EXP 9
6480: PUSH
6481: LD_EXP 10
6485: PUSH
6486: LD_EXP 11
6490: PUSH
6491: LD_EXP 12
6495: PUSH
6496: LD_EXP 13
6500: PUSH
6501: LD_EXP 14
6505: PUSH
6506: LD_EXP 15
6510: PUSH
6511: LD_EXP 16
6515: PUSH
6516: LD_EXP 17
6520: PUSH
6521: LD_EXP 18
6525: PUSH
6526: LD_EXP 19
6530: PUSH
6531: LD_EXP 24
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: DIFF
6558: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6559: LD_EXP 10
6563: PUSH
6564: LD_VAR 0 2
6568: OR
6569: PUSH
6570: LD_EXP 17
6574: PUSH
6575: LD_VAR 0 1
6579: OR
6580: AND
6581: IFFALSE 6800
// begin DialogueOn ;
6583: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6587: LD_EXP 17
6591: PPUSH
6592: CALL_OW 302
6596: IFFALSE 6612
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6598: LD_EXP 17
6602: PPUSH
6603: LD_STRING D3-Sci1-1
6605: PPUSH
6606: CALL_OW 88
6610: GO 6624
// Say ( tmp1 , D3-Sci1-1 ) ;
6612: LD_VAR 0 1
6616: PPUSH
6617: LD_STRING D3-Sci1-1
6619: PPUSH
6620: CALL_OW 88
// if IsOk ( Gary ) then
6624: LD_EXP 10
6628: PPUSH
6629: CALL_OW 302
6633: IFFALSE 6649
// Say ( Gary , D3-Gary-1 ) else
6635: LD_EXP 10
6639: PPUSH
6640: LD_STRING D3-Gary-1
6642: PPUSH
6643: CALL_OW 88
6647: GO 6661
// Say ( tmp2 , D3-Gary-1 ) ;
6649: LD_VAR 0 2
6653: PPUSH
6654: LD_STRING D3-Gary-1
6656: PPUSH
6657: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6661: LD_EXP 17
6665: PPUSH
6666: CALL_OW 302
6670: IFFALSE 6686
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6672: LD_EXP 17
6676: PPUSH
6677: LD_STRING D3-Sci1-2
6679: PPUSH
6680: CALL_OW 88
6684: GO 6698
// Say ( tmp1 , D3-Sci1-2 ) ;
6686: LD_VAR 0 1
6690: PPUSH
6691: LD_STRING D3-Sci1-2
6693: PPUSH
6694: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6698: LD_EXP 1
6702: PPUSH
6703: LD_STRING D3-JMM-2
6705: PPUSH
6706: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6710: LD_EXP 17
6714: PPUSH
6715: CALL_OW 302
6719: IFFALSE 6735
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6721: LD_EXP 17
6725: PPUSH
6726: LD_STRING D3-Sci1-3
6728: PPUSH
6729: CALL_OW 88
6733: GO 6747
// Say ( tmp1 , D3-Sci1-3 ) ;
6735: LD_VAR 0 1
6739: PPUSH
6740: LD_STRING D3-Sci1-3
6742: PPUSH
6743: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
6747: LD_EXP 1
6751: PPUSH
6752: LD_STRING D3-JMM-3
6754: PPUSH
6755: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6759: LD_EXP 17
6763: PPUSH
6764: CALL_OW 302
6768: IFFALSE 6784
// Say ( DeltaDoctor , D3-Sci1-4 ) else
6770: LD_EXP 17
6774: PPUSH
6775: LD_STRING D3-Sci1-4
6777: PPUSH
6778: CALL_OW 88
6782: GO 6796
// Say ( tmp1 , D3-Sci1-4 ) ;
6784: LD_VAR 0 1
6788: PPUSH
6789: LD_STRING D3-Sci1-4
6791: PPUSH
6792: CALL_OW 88
// DialogueOff ;
6796: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
6800: LD_INT 12
6802: PPUSH
6803: LD_INT 1
6805: PPUSH
6806: LD_INT 1
6808: PPUSH
6809: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
6813: LD_INT 32
6815: PPUSH
6816: LD_INT 1
6818: PPUSH
6819: LD_INT 1
6821: PPUSH
6822: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
6826: LD_INT 12
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 1
6834: PPUSH
6835: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
6839: LD_INT 33
6841: PPUSH
6842: LD_INT 1
6844: PPUSH
6845: LD_INT 1
6847: PPUSH
6848: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
6852: LD_STRING M2
6854: PPUSH
6855: CALL_OW 337
// wait ( 3 3$0 ) ;
6859: LD_INT 6300
6861: PPUSH
6862: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6866: LD_INT 35
6868: PPUSH
6869: CALL_OW 67
// until not InBattle ( 1 ) ;
6873: LD_INT 1
6875: PPUSH
6876: CALL_OW 463
6880: NOT
6881: IFFALSE 6866
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
6883: LD_EXP 11
6887: PPUSH
6888: CALL_OW 302
6892: PUSH
6893: LD_EXP 17
6897: PPUSH
6898: CALL_OW 302
6902: AND
6903: IFFALSE 7072
// begin DialogueOn ;
6905: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6909: LD_EXP 11
6913: PPUSH
6914: LD_STRING D3a-Sim-1
6916: PPUSH
6917: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
6921: LD_EXP 17
6925: PPUSH
6926: LD_STRING D3a-Sci1-1
6928: PPUSH
6929: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6933: LD_EXP 11
6937: PPUSH
6938: LD_STRING D3a-Sim-2
6940: PPUSH
6941: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
6945: LD_EXP 17
6949: PPUSH
6950: LD_STRING D3a-Sci1-2
6952: PPUSH
6953: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6957: LD_EXP 11
6961: PPUSH
6962: LD_STRING D3a-Sim-3
6964: PPUSH
6965: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
6969: LD_EXP 17
6973: PPUSH
6974: LD_STRING D3a-Sci1-3
6976: PPUSH
6977: CALL_OW 88
// if IsOK ( Joan ) then
6981: LD_EXP 13
6985: PPUSH
6986: CALL_OW 302
6990: IFFALSE 7006
// Say ( Simms , D3a-Sim-4 ) else
6992: LD_EXP 11
6996: PPUSH
6997: LD_STRING D3a-Sim-4
6999: PPUSH
7000: CALL_OW 88
7004: GO 7018
// Say ( Simms , D3a-Sim-4a ) ;
7006: LD_EXP 11
7010: PPUSH
7011: LD_STRING D3a-Sim-4a
7013: PPUSH
7014: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7018: LD_EXP 17
7022: PPUSH
7023: LD_STRING D3a-Sci1-4
7025: PPUSH
7026: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7030: LD_EXP 11
7034: PPUSH
7035: LD_STRING D3a-Sim-5
7037: PPUSH
7038: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7042: LD_EXP 17
7046: PPUSH
7047: LD_STRING D3a-Sci1-5
7049: PPUSH
7050: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7054: LD_EXP 11
7058: PPUSH
7059: LD_STRING D3a-Sim-6
7061: PPUSH
7062: CALL_OW 88
// DialogueOff ;
7066: CALL_OW 7
// end else
7070: GO 7316
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
7072: LD_ADDR_VAR 0 3
7076: PUSH
7077: LD_INT 22
7079: PUSH
7080: LD_INT 1
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: LD_INT 25
7089: PUSH
7090: LD_INT 4
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PPUSH
7101: CALL_OW 69
7105: PUSH
7106: LD_EXP 11
7110: PUSH
7111: LD_EXP 14
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: DIFF
7120: ST_TO_ADDR
// if tmp3 > 0 then
7121: LD_VAR 0 3
7125: PUSH
7126: LD_INT 0
7128: GREATER
7129: IFFALSE 7316
// begin DialogueOn ;
7131: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7135: LD_EXP 11
7139: PPUSH
7140: LD_STRING D3a-Sim-1
7142: PPUSH
7143: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7147: LD_VAR 0 3
7151: PUSH
7152: LD_INT 1
7154: ARRAY
7155: PPUSH
7156: LD_STRING D3a-Sci1-1
7158: PPUSH
7159: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7163: LD_EXP 11
7167: PPUSH
7168: LD_STRING D3a-Sim-2
7170: PPUSH
7171: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7175: LD_VAR 0 3
7179: PUSH
7180: LD_INT 1
7182: ARRAY
7183: PPUSH
7184: LD_STRING D3a-Sci1-2
7186: PPUSH
7187: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7191: LD_EXP 11
7195: PPUSH
7196: LD_STRING D3a-Sim-3
7198: PPUSH
7199: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7203: LD_VAR 0 3
7207: PUSH
7208: LD_INT 1
7210: ARRAY
7211: PPUSH
7212: LD_STRING D3a-Sci1-3
7214: PPUSH
7215: CALL_OW 88
// if IsOK ( Joan ) then
7219: LD_EXP 13
7223: PPUSH
7224: CALL_OW 302
7228: IFFALSE 7244
// Say ( Simms , D3a-Sim-4 ) else
7230: LD_EXP 11
7234: PPUSH
7235: LD_STRING D3a-Sim-4
7237: PPUSH
7238: CALL_OW 88
7242: GO 7256
// Say ( Simms , D3a-Sim-4a ) ;
7244: LD_EXP 11
7248: PPUSH
7249: LD_STRING D3a-Sim-4a
7251: PPUSH
7252: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 1
7263: ARRAY
7264: PPUSH
7265: LD_STRING D3a-Sci1-4
7267: PPUSH
7268: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7272: LD_EXP 11
7276: PPUSH
7277: LD_STRING D3a-Sim-5
7279: PPUSH
7280: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7284: LD_VAR 0 3
7288: PUSH
7289: LD_INT 1
7291: ARRAY
7292: PPUSH
7293: LD_STRING D3a-Sci1-5
7295: PPUSH
7296: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7300: LD_EXP 11
7304: PPUSH
7305: LD_STRING D3a-Sim-6
7307: PPUSH
7308: CALL_OW 88
// DialogueOff ;
7312: CALL_OW 7
// end ; end ; end ;
7316: PPOPN 3
7318: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7319: LD_EXP 29
7323: PUSH
7324: LD_INT 1
7326: EQUAL
7327: IFFALSE 7662
7329: GO 7331
7331: DISABLE
7332: LD_INT 0
7334: PPUSH
// begin wait ( 2 2$00 ) ;
7335: LD_INT 4200
7337: PPUSH
7338: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7342: LD_EXP 18
7346: PPUSH
7347: LD_STRING D4-FSol1-1
7349: PPUSH
7350: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7354: LD_STRING M3
7356: PPUSH
7357: CALL_OW 337
// PrepareRussians ;
7361: CALL 3620 0 0
// spawnRussians := true ;
7365: LD_ADDR_EXP 58
7369: PUSH
7370: LD_INT 1
7372: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7373: LD_ADDR_VAR 0 1
7377: PUSH
7378: LD_INT 1
7380: PPUSH
7381: LD_INT 100
7383: PPUSH
7384: CALL_OW 12
7388: ST_TO_ADDR
// if difficulty = 1 then
7389: LD_OWVAR 67
7393: PUSH
7394: LD_INT 1
7396: EQUAL
7397: IFFALSE 7480
// begin if rnd > 0 and rnd < 51 then
7399: LD_VAR 0 1
7403: PUSH
7404: LD_INT 0
7406: GREATER
7407: PUSH
7408: LD_VAR 0 1
7412: PUSH
7413: LD_INT 51
7415: LESS
7416: AND
7417: IFFALSE 7426
// BuildRussianBase ( 2 ) ;
7419: LD_INT 2
7421: PPUSH
7422: CALL 11768 0 1
// if rnd > 50 and rnd < 81 then
7426: LD_VAR 0 1
7430: PUSH
7431: LD_INT 50
7433: GREATER
7434: PUSH
7435: LD_VAR 0 1
7439: PUSH
7440: LD_INT 81
7442: LESS
7443: AND
7444: IFFALSE 7453
// BuildRussianBase ( 1 ) ;
7446: LD_INT 1
7448: PPUSH
7449: CALL 11768 0 1
// if rnd > 80 and rnd < 101 then
7453: LD_VAR 0 1
7457: PUSH
7458: LD_INT 80
7460: GREATER
7461: PUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_INT 101
7469: LESS
7470: AND
7471: IFFALSE 7480
// BuildRussianBase ( 3 ) ;
7473: LD_INT 3
7475: PPUSH
7476: CALL 11768 0 1
// end ; if difficulty = 2 then
7480: LD_OWVAR 67
7484: PUSH
7485: LD_INT 2
7487: EQUAL
7488: IFFALSE 7571
// begin if rnd > 0 and rnd < 61 then
7490: LD_VAR 0 1
7494: PUSH
7495: LD_INT 0
7497: GREATER
7498: PUSH
7499: LD_VAR 0 1
7503: PUSH
7504: LD_INT 61
7506: LESS
7507: AND
7508: IFFALSE 7517
// BuildRussianBase ( 2 ) ;
7510: LD_INT 2
7512: PPUSH
7513: CALL 11768 0 1
// if rnd > 60 and rnd < 81 then
7517: LD_VAR 0 1
7521: PUSH
7522: LD_INT 60
7524: GREATER
7525: PUSH
7526: LD_VAR 0 1
7530: PUSH
7531: LD_INT 81
7533: LESS
7534: AND
7535: IFFALSE 7544
// BuildRussianBase ( 1 ) ;
7537: LD_INT 1
7539: PPUSH
7540: CALL 11768 0 1
// if rnd > 80 and rnd < 101 then
7544: LD_VAR 0 1
7548: PUSH
7549: LD_INT 80
7551: GREATER
7552: PUSH
7553: LD_VAR 0 1
7557: PUSH
7558: LD_INT 101
7560: LESS
7561: AND
7562: IFFALSE 7571
// BuildRussianBase ( 3 ) ;
7564: LD_INT 3
7566: PPUSH
7567: CALL 11768 0 1
// end ; if difficulty >= 3 then
7571: LD_OWVAR 67
7575: PUSH
7576: LD_INT 3
7578: GREATEREQUAL
7579: IFFALSE 7662
// begin if rnd > 0 and rnd < 71 then
7581: LD_VAR 0 1
7585: PUSH
7586: LD_INT 0
7588: GREATER
7589: PUSH
7590: LD_VAR 0 1
7594: PUSH
7595: LD_INT 71
7597: LESS
7598: AND
7599: IFFALSE 7608
// BuildRussianBase ( 3 ) ;
7601: LD_INT 3
7603: PPUSH
7604: CALL 11768 0 1
// if rnd > 70 and rnd < 81 then
7608: LD_VAR 0 1
7612: PUSH
7613: LD_INT 70
7615: GREATER
7616: PUSH
7617: LD_VAR 0 1
7621: PUSH
7622: LD_INT 81
7624: LESS
7625: AND
7626: IFFALSE 7635
// BuildRussianBase ( 2 ) ;
7628: LD_INT 2
7630: PPUSH
7631: CALL 11768 0 1
// if rnd > 80 and rnd < 101 then
7635: LD_VAR 0 1
7639: PUSH
7640: LD_INT 80
7642: GREATER
7643: PUSH
7644: LD_VAR 0 1
7648: PUSH
7649: LD_INT 101
7651: LESS
7652: AND
7653: IFFALSE 7662
// BuildRussianBase ( 1 ) ;
7655: LD_INT 1
7657: PPUSH
7658: CALL 11768 0 1
// end ; end ;
7662: PPOPN 1
7664: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7665: LD_INT 54
7667: PPUSH
7668: LD_INT 1
7670: PPUSH
7671: CALL_OW 321
7675: PUSH
7676: LD_INT 2
7678: EQUAL
7679: PUSH
7680: LD_INT 21
7682: PPUSH
7683: LD_INT 1
7685: PPUSH
7686: CALL_OW 321
7690: PUSH
7691: LD_INT 2
7693: EQUAL
7694: OR
7695: PUSH
7696: LD_INT 22
7698: PPUSH
7699: LD_INT 1
7701: PPUSH
7702: CALL_OW 321
7706: PUSH
7707: LD_INT 2
7709: EQUAL
7710: OR
7711: IFFALSE 8013
7713: GO 7715
7715: DISABLE
7716: LD_INT 0
7718: PPUSH
7719: PPUSH
// begin if IsOk ( DeltaDoctor ) then
7720: LD_EXP 17
7724: PPUSH
7725: CALL_OW 302
7729: IFFALSE 7743
// tmp := DeltaDoctor else
7731: LD_ADDR_VAR 0 2
7735: PUSH
7736: LD_EXP 17
7740: ST_TO_ADDR
7741: GO 7753
// tmp := Denis ;
7743: LD_ADDR_VAR 0 2
7747: PUSH
7748: LD_EXP 12
7752: ST_TO_ADDR
// if tmp then
7753: LD_VAR 0 2
7757: IFFALSE 7851
// begin DialogueOn ;
7759: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
7763: LD_EXP 1
7767: PPUSH
7768: LD_STRING D6-JMM-1
7770: PPUSH
7771: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
7775: LD_VAR 0 2
7779: PPUSH
7780: LD_STRING D6-Sci1-1
7782: PPUSH
7783: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
7787: LD_EXP 1
7791: PPUSH
7792: LD_STRING D6-JMM-2
7794: PPUSH
7795: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
7799: LD_VAR 0 2
7803: PPUSH
7804: LD_STRING D6-Sci1-2
7806: PPUSH
7807: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
7811: LD_EXP 1
7815: PPUSH
7816: LD_STRING D6-JMM-3
7818: PPUSH
7819: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
7823: LD_VAR 0 2
7827: PPUSH
7828: LD_STRING D6-Sci1-3
7830: PPUSH
7831: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
7835: LD_EXP 1
7839: PPUSH
7840: LD_STRING D6-JMM-4
7842: PPUSH
7843: CALL_OW 88
// DialogueOff ;
7847: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
7851: LD_INT 1050
7853: PPUSH
7854: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
7858: LD_EXP 49
7862: PUSH
7863: LD_INT 0
7865: EQUAL
7866: PUSH
7867: LD_EXP 14
7871: PPUSH
7872: CALL_OW 302
7876: AND
7877: IFFALSE 7935
// begin DialogueOn ;
7879: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
7883: LD_EXP 27
7887: PPUSH
7888: LD_STRING D5-Ar1-1
7890: PPUSH
7891: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
7895: LD_EXP 26
7899: PPUSH
7900: LD_STRING D5-Diet-1
7902: PPUSH
7903: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
7907: LD_EXP 27
7911: PPUSH
7912: LD_STRING D5-Ar1-2
7914: PPUSH
7915: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
7919: LD_EXP 26
7923: PPUSH
7924: LD_STRING D5-Diet-2
7926: PPUSH
7927: CALL_OW 88
// DialogueOff ;
7931: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7935: LD_INT 35
7937: PPUSH
7938: CALL_OW 67
// until tick > 10 10$00 ;
7942: LD_OWVAR 1
7946: PUSH
7947: LD_INT 21000
7949: GREATER
7950: IFFALSE 7935
// wait ( 1 1$30 ) ;
7952: LD_INT 3150
7954: PPUSH
7955: CALL_OW 67
// if arabianTrait = 0 then
7959: LD_EXP 49
7963: PUSH
7964: LD_INT 0
7966: EQUAL
7967: IFFALSE 8013
// begin arabianTrait = 1 ;
7969: LD_ADDR_EXP 49
7973: PUSH
7974: LD_INT 1
7976: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
7977: LD_INT 2
7979: PPUSH
7980: LD_INT 3
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 1
7988: PPUSH
7989: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
7993: LD_INT 2
7995: PPUSH
7996: LD_INT 6
7998: PPUSH
7999: LD_INT 1
8001: PPUSH
8002: LD_INT 1
8004: PPUSH
8005: CALL_OW 80
// PrepareArabianTrait ;
8009: CALL 8016 0 0
// end ; end ;
8013: PPOPN 2
8015: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8016: LD_INT 0
8018: PPUSH
8019: PPUSH
8020: PPUSH
8021: PPUSH
8022: PPUSH
8023: PPUSH
8024: PPUSH
8025: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8026: LD_ADDR_VAR 0 6
8030: PUSH
8031: LD_INT 22
8033: PUSH
8034: LD_INT 2
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 2
8043: PUSH
8044: LD_INT 25
8046: PUSH
8047: LD_INT 4
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 25
8056: PUSH
8057: LD_INT 2
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 25
8066: PUSH
8067: LD_INT 3
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PPUSH
8084: CALL_OW 69
8088: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8089: LD_ADDR_VAR 0 5
8093: PUSH
8094: LD_INT 22
8096: PUSH
8097: LD_INT 2
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 21
8106: PUSH
8107: LD_INT 1
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 25
8119: PUSH
8120: LD_INT 1
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 25
8129: PUSH
8130: LD_INT 8
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 25
8139: PUSH
8140: LD_INT 15
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: PPUSH
8158: CALL_OW 69
8162: PUSH
8163: LD_EXP 26
8167: PUSH
8168: EMPTY
8169: LIST
8170: DIFF
8171: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8172: LD_ADDR_VAR 0 7
8176: PUSH
8177: LD_INT 22
8179: PUSH
8180: LD_INT 2
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: LD_INT 30
8189: PUSH
8190: LD_INT 5
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: PUSH
8206: LD_INT 1
8208: ARRAY
8209: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8210: LD_VAR 0 6
8214: PPUSH
8215: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8219: LD_VAR 0 5
8223: PPUSH
8224: CALL_OW 122
// wait ( 0 0$3 ) ;
8228: LD_INT 105
8230: PPUSH
8231: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8235: LD_VAR 0 6
8239: PPUSH
8240: LD_VAR 0 7
8244: PPUSH
8245: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8249: LD_VAR 0 6
8253: PPUSH
8254: LD_INT 1
8256: PUSH
8257: LD_INT 8
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: PUSH
8264: LD_INT 1
8266: PPUSH
8267: LD_INT 2
8269: PPUSH
8270: CALL_OW 12
8274: ARRAY
8275: PPUSH
8276: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8280: LD_VAR 0 6
8284: PPUSH
8285: CALL_OW 182
// wait ( 0 0$1 ) ;
8289: LD_INT 35
8291: PPUSH
8292: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8296: LD_INT 76
8298: PPUSH
8299: LD_INT 19
8301: PPUSH
8302: CALL_OW 84
// DialogueOn ;
8306: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8310: LD_INT 22
8312: PUSH
8313: LD_INT 1
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 26
8322: PUSH
8323: LD_INT 1
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 2
8332: PUSH
8333: LD_INT 25
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: LD_INT 3
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 25
8365: PUSH
8366: LD_INT 4
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: LD_INT 25
8375: PUSH
8376: LD_INT 5
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: LIST
8395: PPUSH
8396: CALL_OW 69
8400: PPUSH
8401: LD_STRING D8-Sol1-1
8403: PPUSH
8404: LD_STRING D8-Sol1-1
8406: PPUSH
8407: CALL 11110 0 3
// if IsOK ( DeltaDoctor ) then
8411: LD_EXP 17
8415: PPUSH
8416: CALL_OW 302
8420: IFFALSE 8436
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8422: LD_EXP 17
8426: PPUSH
8427: LD_STRING D8-Sci1-1
8429: PPUSH
8430: CALL_OW 88
8434: GO 8537
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8436: LD_INT 22
8438: PUSH
8439: LD_INT 1
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 26
8448: PUSH
8449: LD_INT 1
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: LD_INT 25
8461: PUSH
8462: LD_INT 1
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 25
8471: PUSH
8472: LD_INT 2
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 25
8481: PUSH
8482: LD_INT 3
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 25
8491: PUSH
8492: LD_INT 4
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 25
8501: PUSH
8502: LD_INT 5
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: PPUSH
8522: CALL_OW 69
8526: PPUSH
8527: LD_STRING D8-Sol1-1
8529: PPUSH
8530: LD_STRING D8-Sol1-1
8532: PPUSH
8533: CALL 11110 0 3
// Say ( JMM , D8-JMM-1 ) ;
8537: LD_EXP 1
8541: PPUSH
8542: LD_STRING D8-JMM-1
8544: PPUSH
8545: CALL_OW 88
// DialogueOff ;
8549: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8553: LD_INT 2
8555: PPUSH
8556: LD_INT 2
8558: PPUSH
8559: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8563: LD_INT 1
8565: PPUSH
8566: LD_INT 2
8568: PPUSH
8569: LD_INT 2
8571: PPUSH
8572: LD_INT 1
8574: PPUSH
8575: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8579: LD_INT 3
8581: PPUSH
8582: LD_INT 2
8584: PPUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_INT 1
8590: PPUSH
8591: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8595: LD_STRING M4
8597: PPUSH
8598: CALL_OW 337
// wait ( 0 0$1 ) ;
8602: LD_INT 35
8604: PPUSH
8605: CALL_OW 67
// if IsLive ( Khatam ) then
8609: LD_EXP 14
8613: PPUSH
8614: CALL_OW 300
8618: IFFALSE 8632
// DoNotAttack ( 2 , Khatam ) ;
8620: LD_INT 2
8622: PPUSH
8623: LD_EXP 14
8627: PPUSH
8628: CALL_OW 471
// wait ( 0 0$1 ) ;
8632: LD_INT 35
8634: PPUSH
8635: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8639: LD_ADDR_VAR 0 8
8643: PUSH
8644: LD_INT 22
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 21
8656: PUSH
8657: LD_INT 3
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 69
8672: PPUSH
8673: LD_VAR 0 5
8677: PUSH
8678: LD_INT 1
8680: ARRAY
8681: PPUSH
8682: CALL_OW 74
8686: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8687: LD_VAR 0 5
8691: PPUSH
8692: LD_INT 25
8694: PUSH
8695: LD_INT 1
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 72
8706: PUSH
8707: LD_INT 1
8709: ARRAY
8710: PPUSH
8711: LD_VAR 0 8
8715: PPUSH
8716: CALL_OW 250
8720: PPUSH
8721: LD_VAR 0 8
8725: PPUSH
8726: CALL_OW 251
8730: PPUSH
8731: LD_VAR 0 8
8735: PPUSH
8736: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
8740: LD_VAR 0 5
8744: PPUSH
8745: LD_INT 84
8747: PPUSH
8748: LD_INT 22
8750: PPUSH
8751: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
8755: LD_VAR 0 5
8759: PPUSH
8760: LD_INT 82
8762: PPUSH
8763: LD_INT 5
8765: PPUSH
8766: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
8770: LD_VAR 0 5
8774: PPUSH
8775: LD_INT 95
8777: PPUSH
8778: LD_INT 12
8780: PPUSH
8781: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
8785: LD_VAR 0 5
8789: PPUSH
8790: LD_INT 102
8792: PPUSH
8793: LD_INT 11
8795: PPUSH
8796: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
8800: LD_VAR 0 5
8804: PPUSH
8805: LD_INT 116
8807: PPUSH
8808: LD_INT 15
8810: PPUSH
8811: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
8815: LD_VAR 0 5
8819: PPUSH
8820: LD_INT 140
8822: PPUSH
8823: LD_INT 25
8825: PPUSH
8826: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
8830: LD_VAR 0 5
8834: PPUSH
8835: LD_INT 160
8837: PPUSH
8838: LD_INT 56
8840: PPUSH
8841: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8845: LD_ADDR_VAR 0 5
8849: PUSH
8850: LD_INT 22
8852: PUSH
8853: LD_INT 2
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 21
8862: PUSH
8863: LD_INT 1
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 2
8872: PUSH
8873: LD_INT 25
8875: PUSH
8876: LD_INT 1
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: LD_INT 25
8885: PUSH
8886: LD_INT 8
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: LD_INT 25
8895: PUSH
8896: LD_INT 15
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: PUSH
8919: LD_EXP 26
8923: PUSH
8924: EMPTY
8925: LIST
8926: DIFF
8927: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
8928: LD_ADDR_VAR 0 6
8932: PUSH
8933: LD_INT 22
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 21
8945: PUSH
8946: LD_INT 1
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 2
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 2
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 25
8968: PUSH
8969: LD_INT 3
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 25
8978: PUSH
8979: LD_INT 4
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: LD_INT 25
8988: PUSH
8989: LD_INT 12
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 25
8998: PUSH
8999: LD_INT 16
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: PPUSH
9019: CALL_OW 69
9023: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9024: LD_ADDR_VAR 0 6
9028: PUSH
9029: LD_VAR 0 6
9033: PUSH
9034: LD_EXP 26
9038: ADD
9039: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9040: LD_VAR 0 5
9044: PPUSH
9045: LD_INT 189
9047: PPUSH
9048: LD_INT 79
9050: PPUSH
9051: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9055: LD_VAR 0 5
9059: PPUSH
9060: LD_INT 25
9062: PUSH
9063: LD_INT 15
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PPUSH
9070: CALL_OW 72
9074: IFFALSE 9115
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9076: LD_VAR 0 5
9080: PPUSH
9081: LD_INT 25
9083: PUSH
9084: LD_INT 15
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PPUSH
9091: CALL_OW 72
9095: PUSH
9096: LD_INT 1
9098: ARRAY
9099: PPUSH
9100: LD_INT 84
9102: PPUSH
9103: LD_INT 21
9105: PPUSH
9106: CALL_OW 428
9110: PPUSH
9111: CALL_OW 120
// wait ( 0 0$4 ) ;
9115: LD_INT 140
9117: PPUSH
9118: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9122: LD_VAR 0 6
9126: PPUSH
9127: LD_INT 88
9129: PPUSH
9130: LD_INT 8
9132: PPUSH
9133: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9137: LD_VAR 0 6
9141: PPUSH
9142: LD_INT 102
9144: PPUSH
9145: LD_INT 10
9147: PPUSH
9148: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9152: LD_VAR 0 6
9156: PPUSH
9157: LD_INT 116
9159: PPUSH
9160: LD_INT 15
9162: PPUSH
9163: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9167: LD_VAR 0 6
9171: PPUSH
9172: LD_INT 140
9174: PPUSH
9175: LD_INT 25
9177: PPUSH
9178: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9182: LD_VAR 0 6
9186: PPUSH
9187: LD_INT 160
9189: PPUSH
9190: LD_INT 56
9192: PPUSH
9193: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9197: LD_VAR 0 6
9201: PPUSH
9202: LD_INT 189
9204: PPUSH
9205: LD_INT 79
9207: PPUSH
9208: CALL_OW 171
// arabianAttackersAI = 1 ;
9212: LD_ADDR_EXP 46
9216: PUSH
9217: LD_INT 1
9219: ST_TO_ADDR
// if IsOk ( Gary ) then
9220: LD_EXP 10
9224: PPUSH
9225: CALL_OW 302
9229: IFFALSE 9243
// Say ( Gary , D8a-Gary-1 ) ;
9231: LD_EXP 10
9235: PPUSH
9236: LD_STRING D8a-Gary-1
9238: PPUSH
9239: CALL_OW 88
// wait ( 0 0$5 ) ;
9243: LD_INT 175
9245: PPUSH
9246: CALL_OW 67
// if IsOK ( Khatam ) then
9250: LD_EXP 14
9254: PPUSH
9255: CALL_OW 302
9259: IFFALSE 9795
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9261: LD_ADDR_VAR 0 3
9265: PUSH
9266: LD_INT 22
9268: PUSH
9269: LD_INT 1
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 2
9278: PUSH
9279: LD_INT 25
9281: PUSH
9282: LD_INT 1
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 25
9291: PUSH
9292: LD_INT 2
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 25
9301: PUSH
9302: LD_INT 3
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 25
9311: PUSH
9312: LD_INT 4
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 25
9321: PUSH
9322: LD_INT 5
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 25
9331: PUSH
9332: LD_INT 8
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PPUSH
9352: CALL_OW 69
9356: PUSH
9357: LD_EXP 1
9361: PUSH
9362: LD_EXP 2
9366: PUSH
9367: LD_EXP 3
9371: PUSH
9372: LD_EXP 4
9376: PUSH
9377: LD_EXP 5
9381: PUSH
9382: LD_EXP 6
9386: PUSH
9387: LD_EXP 7
9391: PUSH
9392: LD_EXP 8
9396: PUSH
9397: LD_EXP 9
9401: PUSH
9402: LD_EXP 10
9406: PUSH
9407: LD_EXP 11
9411: PUSH
9412: LD_EXP 12
9416: PUSH
9417: LD_EXP 13
9421: PUSH
9422: LD_EXP 14
9426: PUSH
9427: LD_EXP 15
9431: PUSH
9432: LD_EXP 16
9436: PUSH
9437: LD_EXP 17
9441: PUSH
9442: LD_EXP 19
9446: PUSH
9447: LD_EXP 24
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: DIFF
9473: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9474: LD_EXP 14
9478: PPUSH
9479: LD_INT 8
9481: PPUSH
9482: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9486: LD_EXP 14
9490: PPUSH
9491: CALL_OW 122
// wait ( 0 0$1 ) ;
9495: LD_INT 35
9497: PPUSH
9498: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9502: LD_EXP 14
9506: PPUSH
9507: CALL_OW 121
// wait ( 0 0$1 ) ;
9511: LD_INT 35
9513: PPUSH
9514: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9518: LD_EXP 14
9522: PPUSH
9523: LD_INT 7
9525: PPUSH
9526: CALL_OW 113
// if not tmp then
9530: LD_VAR 0 3
9534: NOT
9535: IFFALSE 9539
// exit ;
9537: GO 9795
// DialogueOn ;
9539: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9543: LD_VAR 0 3
9547: PUSH
9548: LD_INT 1
9550: ARRAY
9551: PPUSH
9552: CALL_OW 258
9556: PUSH
9557: LD_INT 1
9559: EQUAL
9560: IFFALSE 9580
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9562: LD_VAR 0 3
9566: PUSH
9567: LD_INT 1
9569: ARRAY
9570: PPUSH
9571: LD_STRING D8b-Sol1-1
9573: PPUSH
9574: CALL_OW 88
9578: GO 9596
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9580: LD_VAR 0 3
9584: PUSH
9585: LD_INT 1
9587: ARRAY
9588: PPUSH
9589: LD_STRING D8b-FSol1-1
9591: PPUSH
9592: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9596: LD_EXP 14
9600: PPUSH
9601: LD_STRING D8b-Khat-1
9603: PPUSH
9604: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9608: LD_VAR 0 3
9612: PUSH
9613: LD_INT 1
9615: ARRAY
9616: PPUSH
9617: CALL_OW 258
9621: PUSH
9622: LD_INT 1
9624: EQUAL
9625: IFFALSE 9645
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9627: LD_VAR 0 3
9631: PUSH
9632: LD_INT 1
9634: ARRAY
9635: PPUSH
9636: LD_STRING D8b-Sol1-2
9638: PPUSH
9639: CALL_OW 88
9643: GO 9661
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9645: LD_VAR 0 3
9649: PUSH
9650: LD_INT 1
9652: ARRAY
9653: PPUSH
9654: LD_STRING D8b-FSol1-2
9656: PPUSH
9657: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9661: LD_EXP 14
9665: PPUSH
9666: LD_STRING D8b-Khat-2
9668: PPUSH
9669: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9673: LD_VAR 0 3
9677: PUSH
9678: LD_INT 1
9680: ARRAY
9681: PPUSH
9682: CALL_OW 258
9686: PUSH
9687: LD_INT 1
9689: EQUAL
9690: IFFALSE 9710
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9692: LD_VAR 0 3
9696: PUSH
9697: LD_INT 1
9699: ARRAY
9700: PPUSH
9701: LD_STRING D8b-Sol1-3
9703: PPUSH
9704: CALL_OW 88
9708: GO 9726
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
9710: LD_VAR 0 3
9714: PUSH
9715: LD_INT 1
9717: ARRAY
9718: PPUSH
9719: LD_STRING D8b-FSol1-3
9721: PPUSH
9722: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
9726: LD_EXP 14
9730: PPUSH
9731: LD_STRING D8b-Khat-3
9733: PPUSH
9734: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9738: LD_VAR 0 3
9742: PUSH
9743: LD_INT 1
9745: ARRAY
9746: PPUSH
9747: CALL_OW 258
9751: PUSH
9752: LD_INT 1
9754: EQUAL
9755: IFFALSE 9775
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
9757: LD_VAR 0 3
9761: PUSH
9762: LD_INT 1
9764: ARRAY
9765: PPUSH
9766: LD_STRING D8b-Sol1-4
9768: PPUSH
9769: CALL_OW 88
9773: GO 9791
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
9775: LD_VAR 0 3
9779: PUSH
9780: LD_INT 1
9782: ARRAY
9783: PPUSH
9784: LD_STRING D8b-FSol1-4
9786: PPUSH
9787: CALL_OW 88
// DialogueOff ;
9791: CALL_OW 7
// end ; end ;
9795: LD_VAR 0 1
9799: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
9800: LD_INT 7
9802: PPUSH
9803: LD_INT 22
9805: PUSH
9806: LD_INT 2
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 70
9817: PUSH
9818: LD_INT 0
9820: GREATER
9821: PUSH
9822: LD_EXP 14
9826: PPUSH
9827: LD_INT 7
9829: PPUSH
9830: CALL_OW 308
9834: OR
9835: IFFALSE 10042
9837: GO 9839
9839: DISABLE
9840: LD_INT 0
9842: PPUSH
// begin enable ;
9843: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
9844: LD_ADDR_VAR 0 1
9848: PUSH
9849: LD_INT 7
9851: PPUSH
9852: LD_INT 22
9854: PUSH
9855: LD_INT 2
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PPUSH
9862: CALL_OW 70
9866: PUSH
9867: FOR_IN
9868: IFFALSE 10009
// begin if GetClass ( i ) = 4 then
9870: LD_VAR 0 1
9874: PPUSH
9875: CALL_OW 257
9879: PUSH
9880: LD_INT 4
9882: EQUAL
9883: IFFALSE 9895
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
9885: LD_INT 1
9887: PPUSH
9888: LD_STRING 10_ScientistsEscape_1
9890: PPUSH
9891: CALL_OW 39
// if i = Dietrich then
9895: LD_VAR 0 1
9899: PUSH
9900: LD_EXP 26
9904: EQUAL
9905: IFFALSE 9915
// GensherStatus = 1 ;
9907: LD_ADDR_EXP 52
9911: PUSH
9912: LD_INT 1
9914: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
9915: LD_VAR 0 1
9919: PPUSH
9920: CALL_OW 257
9924: PUSH
9925: LD_INT 1
9927: EQUAL
9928: PUSH
9929: LD_VAR 0 1
9933: PPUSH
9934: CALL_OW 257
9938: PUSH
9939: LD_INT 2
9941: EQUAL
9942: OR
9943: PUSH
9944: LD_VAR 0 1
9948: PPUSH
9949: CALL_OW 257
9953: PUSH
9954: LD_INT 3
9956: EQUAL
9957: OR
9958: PUSH
9959: LD_VAR 0 1
9963: PPUSH
9964: CALL_OW 257
9968: PUSH
9969: LD_INT 4
9971: EQUAL
9972: OR
9973: PUSH
9974: LD_VAR 0 1
9978: PPUSH
9979: CALL_OW 257
9983: PUSH
9984: LD_INT 8
9986: EQUAL
9987: OR
9988: IFFALSE 9998
// arabianEscape = 1 ;
9990: LD_ADDR_EXP 47
9994: PUSH
9995: LD_INT 1
9997: ST_TO_ADDR
// RemoveUnit ( i ) ;
9998: LD_VAR 0 1
10002: PPUSH
10003: CALL_OW 64
// end ;
10007: GO 9867
10009: POP
10010: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
10011: LD_EXP 14
10015: PPUSH
10016: LD_INT 7
10018: PPUSH
10019: CALL_OW 308
10023: IFFALSE 10042
// begin KhatamStatus = 1 ;
10025: LD_ADDR_EXP 53
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10033: LD_EXP 14
10037: PPUSH
10038: CALL_OW 64
// end ; end ;
10042: PPOPN 1
10044: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10045: LD_INT 22
10047: PUSH
10048: LD_INT 2
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 21
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PPUSH
10069: CALL_OW 69
10073: PUSH
10074: LD_INT 0
10076: EQUAL
10077: PUSH
10078: LD_INT 22
10080: PUSH
10081: LD_INT 4
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 21
10090: PUSH
10091: LD_INT 1
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PPUSH
10102: CALL_OW 69
10106: PUSH
10107: LD_INT 0
10109: EQUAL
10110: AND
10111: IFFALSE 10124
10113: GO 10115
10115: DISABLE
// arabianDefeated = 1 ;
10116: LD_ADDR_EXP 48
10120: PUSH
10121: LD_INT 1
10123: ST_TO_ADDR
10124: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10125: LD_INT 54
10127: PPUSH
10128: LD_INT 1
10130: PPUSH
10131: CALL_OW 321
10135: PUSH
10136: LD_INT 2
10138: EQUAL
10139: PUSH
10140: LD_INT 55
10142: PPUSH
10143: LD_INT 1
10145: PPUSH
10146: CALL_OW 321
10150: PUSH
10151: LD_INT 2
10153: EQUAL
10154: AND
10155: PUSH
10156: LD_INT 21
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: CALL_OW 321
10166: PUSH
10167: LD_INT 2
10169: EQUAL
10170: AND
10171: PUSH
10172: LD_INT 22
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: CALL_OW 321
10182: PUSH
10183: LD_INT 2
10185: EQUAL
10186: AND
10187: PUSH
10188: LD_INT 12
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: CALL_OW 321
10198: PUSH
10199: LD_INT 2
10201: EQUAL
10202: AND
10203: PUSH
10204: LD_INT 32
10206: PPUSH
10207: LD_INT 1
10209: PPUSH
10210: CALL_OW 321
10214: PUSH
10215: LD_INT 2
10217: EQUAL
10218: AND
10219: PUSH
10220: LD_EXP 63
10224: PUSH
10225: LD_INT 0
10227: EQUAL
10228: AND
10229: PUSH
10230: LD_EXP 49
10234: PUSH
10235: LD_INT 0
10237: EQUAL
10238: AND
10239: PUSH
10240: LD_OWVAR 1
10244: PUSH
10245: LD_INT 31500
10247: GREATEREQUAL
10248: AND
10249: IFFALSE 10266
10251: GO 10253
10253: DISABLE
// begin arabianTrait = 1 ;
10254: LD_ADDR_EXP 49
10258: PUSH
10259: LD_INT 1
10261: ST_TO_ADDR
// PrepareArabianTrait ;
10262: CALL 8016 0 0
// end ;
10266: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10267: LD_EXP 29
10271: PUSH
10272: LD_STRING 02_mikhailStatus_1
10274: PPUSH
10275: LD_INT 0
10277: PPUSH
10278: CALL_OW 30
10282: PUSH
10283: LD_INT 1
10285: EQUAL
10286: AND
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_INT 5
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 69
10302: PUSH
10303: LD_INT 0
10305: EQUAL
10306: AND
10307: PUSH
10308: LD_INT 22
10310: PUSH
10311: LD_INT 2
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 21
10320: PUSH
10321: LD_INT 1
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: CALL_OW 69
10336: PUSH
10337: LD_INT 0
10339: EQUAL
10340: PUSH
10341: LD_EXP 49
10345: PUSH
10346: LD_INT 0
10348: EQUAL
10349: OR
10350: AND
10351: IFFALSE 10360
10353: GO 10355
10355: DISABLE
// PrepareCornell ;
10356: CALL 3450 0 0
10360: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10361: LD_INT 22
10363: PUSH
10364: LD_INT 1
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 69
10375: PPUSH
10376: LD_EXP 19
10380: PPUSH
10381: CALL_OW 74
10385: PPUSH
10386: LD_EXP 19
10390: PPUSH
10391: CALL_OW 296
10395: PUSH
10396: LD_INT 9
10398: LESS
10399: IFFALSE 10620
10401: GO 10403
10403: DISABLE
// begin InGameOn ;
10404: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10408: LD_EXP 19
10412: PPUSH
10413: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10417: LD_EXP 19
10421: PPUSH
10422: LD_STRING D7-Corn-1
10424: PPUSH
10425: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10429: LD_INT 22
10431: PUSH
10432: LD_INT 1
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 2
10441: PUSH
10442: LD_INT 25
10444: PUSH
10445: LD_INT 1
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 25
10454: PUSH
10455: LD_INT 2
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 25
10464: PUSH
10465: LD_INT 3
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 25
10474: PUSH
10475: LD_INT 4
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 25
10484: PUSH
10485: LD_INT 5
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PPUSH
10504: CALL_OW 69
10508: PPUSH
10509: LD_STRING D7-Sol1-1
10511: PPUSH
10512: LD_STRING D7-FSol1-1
10514: PPUSH
10515: CALL 11110 0 3
// CenterNowOnUnits ( Cornell ) ;
10519: LD_EXP 19
10523: PPUSH
10524: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10528: LD_EXP 19
10532: PPUSH
10533: LD_STRING D7-Corn-2
10535: PPUSH
10536: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10540: LD_EXP 1
10544: PPUSH
10545: LD_STRING D7-JMM-2
10547: PPUSH
10548: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10552: LD_EXP 19
10556: PPUSH
10557: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10561: LD_EXP 19
10565: PPUSH
10566: LD_STRING D7-Corn-3
10568: PPUSH
10569: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10573: LD_EXP 19
10577: PPUSH
10578: LD_INT 250
10580: PPUSH
10581: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10585: LD_EXP 19
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 235
// wait ( 0 0$1 ) ;
10597: LD_INT 35
10599: PPUSH
10600: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10604: LD_EXP 1
10608: PPUSH
10609: LD_STRING D7-JMM-3
10611: PPUSH
10612: CALL_OW 88
// InGameOff ;
10616: CALL_OW 9
// end ;
10620: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10621: LD_EXP 19
10625: PPUSH
10626: CALL_OW 255
10630: PUSH
10631: LD_INT 1
10633: EQUAL
10634: PUSH
10635: LD_EXP 19
10639: PPUSH
10640: CALL_OW 256
10644: PUSH
10645: LD_INT 350
10647: GREATER
10648: AND
10649: IFFALSE 10842
10651: GO 10653
10653: DISABLE
// begin DialogueOn ;
10654: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10658: LD_EXP 1
10662: PPUSH
10663: LD_STRING D7a-JMM-1
10665: PPUSH
10666: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10670: LD_EXP 19
10674: PPUSH
10675: LD_STRING D7a-Corn-1
10677: PPUSH
10678: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10682: LD_EXP 1
10686: PPUSH
10687: LD_STRING D7a-JMM-2
10689: PPUSH
10690: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10694: LD_EXP 19
10698: PPUSH
10699: LD_STRING D7a-Corn-2
10701: PPUSH
10702: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
10706: LD_EXP 1
10710: PPUSH
10711: LD_STRING D7a-JMM-3
10713: PPUSH
10714: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
10718: LD_EXP 19
10722: PPUSH
10723: LD_STRING D7a-Corn-3
10725: PPUSH
10726: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
10730: LD_EXP 1
10734: PPUSH
10735: LD_STRING D7a-JMM-4
10737: PPUSH
10738: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
10742: LD_EXP 19
10746: PPUSH
10747: LD_STRING D7a-Corn-4
10749: PPUSH
10750: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
10754: LD_EXP 1
10758: PPUSH
10759: LD_STRING D7a-JMM-5
10761: PPUSH
10762: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
10766: LD_EXP 19
10770: PPUSH
10771: LD_STRING D7a-Corn-5
10773: PPUSH
10774: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
10778: LD_EXP 1
10782: PPUSH
10783: LD_STRING D7a-JMM-6
10785: PPUSH
10786: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
10790: LD_EXP 19
10794: PPUSH
10795: LD_STRING D7a-Corn-6
10797: PPUSH
10798: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
10802: LD_EXP 1
10806: PPUSH
10807: LD_STRING D7a-JMM-7
10809: PPUSH
10810: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
10814: LD_EXP 19
10818: PPUSH
10819: LD_STRING D7a-Corn-7
10821: PPUSH
10822: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
10826: LD_EXP 1
10830: PPUSH
10831: LD_STRING D7a-JMM-8
10833: PPUSH
10834: CALL_OW 88
// DialogueOff ;
10838: CALL_OW 7
// end ;
10842: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
10843: LD_EXP 61
10847: PUSH
10848: LD_EXP 1
10852: PPUSH
10853: CALL_OW 302
10857: PUSH
10858: LD_EXP 5
10862: PPUSH
10863: CALL_OW 302
10867: OR
10868: AND
10869: IFFALSE 10959
10871: GO 10873
10873: DISABLE
// begin Wait ( 0 0$2 ) ;
10874: LD_INT 70
10876: PPUSH
10877: CALL_OW 67
// DialogueOn ;
10881: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
10885: LD_EXP 61
10889: PUSH
10890: LD_INT 1
10892: ARRAY
10893: PPUSH
10894: LD_EXP 61
10898: PUSH
10899: LD_INT 2
10901: ARRAY
10902: PPUSH
10903: CALL_OW 86
// if IsOk ( Cyrus ) then
10907: LD_EXP 5
10911: PPUSH
10912: CALL_OW 302
10916: IFFALSE 10932
// Say ( Cyrus , D10-Cyrus-1 ) else
10918: LD_EXP 5
10922: PPUSH
10923: LD_STRING D10-Cyrus-1
10925: PPUSH
10926: CALL_OW 88
10930: GO 10955
// if IsOk ( JMM ) then
10932: LD_EXP 1
10936: PPUSH
10937: CALL_OW 302
10941: IFFALSE 10955
// Say ( JMM , D10-JMM-1 ) ;
10943: LD_EXP 1
10947: PPUSH
10948: LD_STRING D10-JMM-1
10950: PPUSH
10951: CALL_OW 88
// DialogueOff ;
10955: CALL_OW 7
// end ;
10959: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
10960: LD_INT 12
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: CALL_OW 321
10970: PUSH
10971: LD_INT 2
10973: EQUAL
10974: IFFALSE 10986
10976: GO 10978
10978: DISABLE
// ChangeMissionObjectives ( M2b ) ;
10979: LD_STRING M2b
10981: PPUSH
10982: CALL_OW 337
10986: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
10987: LD_INT 32
10989: PPUSH
10990: LD_INT 1
10992: PPUSH
10993: CALL_OW 321
10997: PUSH
10998: LD_INT 2
11000: EQUAL
11001: IFFALSE 11013
11003: GO 11005
11005: DISABLE
// ChangeMissionObjectives ( M2c ) ;
11006: LD_STRING M2c
11008: PPUSH
11009: CALL_OW 337
11013: END
// every 0 0$1 trigger arabianDefeated = 1 do
11014: LD_EXP 48
11018: PUSH
11019: LD_INT 1
11021: EQUAL
11022: IFFALSE 11034
11024: GO 11026
11026: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11027: LD_STRING M4a
11029: PPUSH
11030: CALL_OW 337
11034: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11035: LD_INT 54
11037: PPUSH
11038: LD_INT 1
11040: PPUSH
11041: CALL_OW 321
11045: PUSH
11046: LD_INT 2
11048: EQUAL
11049: PUSH
11050: LD_INT 55
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 321
11060: PUSH
11061: LD_INT 2
11063: EQUAL
11064: AND
11065: PUSH
11066: LD_INT 21
11068: PPUSH
11069: LD_INT 1
11071: PPUSH
11072: CALL_OW 321
11076: PUSH
11077: LD_INT 2
11079: EQUAL
11080: AND
11081: PUSH
11082: LD_INT 22
11084: PPUSH
11085: LD_INT 1
11087: PPUSH
11088: CALL_OW 321
11092: PUSH
11093: LD_INT 2
11095: EQUAL
11096: AND
11097: IFFALSE 11109
11099: GO 11101
11101: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11102: LD_STRING M2a
11104: PPUSH
11105: CALL_OW 337
11109: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11110: LD_INT 0
11112: PPUSH
11113: PPUSH
11114: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11115: LD_ADDR_VAR 0 1
11119: PUSH
11120: LD_VAR 0 1
11124: PUSH
11125: LD_EXP 1
11129: PUSH
11130: LD_EXP 2
11134: PUSH
11135: LD_EXP 3
11139: PUSH
11140: LD_EXP 4
11144: PUSH
11145: LD_EXP 5
11149: PUSH
11150: LD_EXP 6
11154: PUSH
11155: LD_EXP 7
11159: PUSH
11160: LD_EXP 8
11164: PUSH
11165: LD_EXP 9
11169: PUSH
11170: LD_EXP 10
11174: PUSH
11175: LD_EXP 11
11179: PUSH
11180: LD_EXP 12
11184: PUSH
11185: LD_EXP 13
11189: PUSH
11190: LD_EXP 14
11194: PUSH
11195: LD_EXP 15
11199: PUSH
11200: LD_EXP 16
11204: PUSH
11205: LD_EXP 17
11209: PUSH
11210: LD_EXP 18
11214: PUSH
11215: LD_EXP 19
11219: PUSH
11220: LD_EXP 24
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: DIFF
11247: ST_TO_ADDR
// if not characters then
11248: LD_VAR 0 1
11252: NOT
11253: IFFALSE 11257
// exit ;
11255: GO 11403
// rnd = rand ( 1 , characters ) ;
11257: LD_ADDR_VAR 0 6
11261: PUSH
11262: LD_INT 1
11264: PPUSH
11265: LD_VAR 0 1
11269: PPUSH
11270: CALL_OW 12
11274: ST_TO_ADDR
// for i = 1 to characters do
11275: LD_ADDR_VAR 0 5
11279: PUSH
11280: DOUBLE
11281: LD_INT 1
11283: DEC
11284: ST_TO_ADDR
11285: LD_VAR 0 1
11289: PUSH
11290: FOR_TO
11291: IFFALSE 11401
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11293: LD_VAR 0 5
11297: PUSH
11298: LD_VAR 0 6
11302: EQUAL
11303: PUSH
11304: LD_VAR 0 1
11308: PUSH
11309: LD_VAR 0 5
11313: ARRAY
11314: PPUSH
11315: CALL_OW 258
11319: PUSH
11320: LD_INT 1
11322: EQUAL
11323: AND
11324: IFFALSE 11346
// Say ( characters [ i ] , dialogMID ) ;
11326: LD_VAR 0 1
11330: PUSH
11331: LD_VAR 0 5
11335: ARRAY
11336: PPUSH
11337: LD_VAR 0 2
11341: PPUSH
11342: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11346: LD_VAR 0 5
11350: PUSH
11351: LD_VAR 0 6
11355: EQUAL
11356: PUSH
11357: LD_VAR 0 1
11361: PUSH
11362: LD_VAR 0 5
11366: ARRAY
11367: PPUSH
11368: CALL_OW 258
11372: PUSH
11373: LD_INT 2
11375: EQUAL
11376: AND
11377: IFFALSE 11399
// Say ( characters [ i ] , dialogFID ) ;
11379: LD_VAR 0 1
11383: PUSH
11384: LD_VAR 0 5
11388: ARRAY
11389: PPUSH
11390: LD_VAR 0 3
11394: PPUSH
11395: CALL_OW 88
// end ;
11399: GO 11290
11401: POP
11402: POP
// end ;
11403: LD_VAR 0 4
11407: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11408: LD_INT 0
11410: PPUSH
11411: PPUSH
// for i in charactersList do
11412: LD_ADDR_VAR 0 4
11416: PUSH
11417: LD_VAR 0 1
11421: PUSH
11422: FOR_IN
11423: IFFALSE 11441
// SaveCharacters ( i , ident ) ;
11425: LD_VAR 0 4
11429: PPUSH
11430: LD_VAR 0 2
11434: PPUSH
11435: CALL_OW 38
11439: GO 11422
11441: POP
11442: POP
// end ;
11443: LD_VAR 0 3
11447: RET
// export function PrepareDifficulty ; begin
11448: LD_INT 0
11450: PPUSH
// if difficulty = 1 then
11451: LD_OWVAR 67
11455: PUSH
11456: LD_INT 1
11458: EQUAL
11459: IFFALSE 11503
// begin RuSolMinLevel = 3 ;
11461: LD_ADDR_EXP 36
11465: PUSH
11466: LD_INT 3
11468: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11469: LD_ADDR_EXP 37
11473: PUSH
11474: LD_INT 5
11476: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11477: LD_INT 51
11479: PPUSH
11480: LD_INT 6
11482: PPUSH
11483: LD_INT 2
11485: PPUSH
11486: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11490: LD_INT 51
11492: PPUSH
11493: LD_INT 5
11495: PPUSH
11496: LD_INT 2
11498: PPUSH
11499: CALL_OW 322
// end ; if difficulty = 2 then
11503: LD_OWVAR 67
11507: PUSH
11508: LD_INT 2
11510: EQUAL
11511: IFFALSE 11607
// begin RuSolMinLevel = 5 ;
11513: LD_ADDR_EXP 36
11517: PUSH
11518: LD_INT 5
11520: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11521: LD_ADDR_EXP 37
11525: PUSH
11526: LD_INT 7
11528: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11529: LD_INT 51
11531: PPUSH
11532: LD_INT 6
11534: PPUSH
11535: LD_INT 2
11537: PPUSH
11538: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11542: LD_INT 57
11544: PPUSH
11545: LD_INT 6
11547: PPUSH
11548: LD_INT 2
11550: PPUSH
11551: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11555: LD_INT 63
11557: PPUSH
11558: LD_INT 6
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11568: LD_INT 51
11570: PPUSH
11571: LD_INT 5
11573: PPUSH
11574: LD_INT 2
11576: PPUSH
11577: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11581: LD_INT 5
11583: PPUSH
11584: LD_INT 2
11586: PPUSH
11587: LD_INT 2
11589: PPUSH
11590: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11594: LD_INT 5
11596: PPUSH
11597: LD_INT 5
11599: PPUSH
11600: LD_INT 2
11602: PPUSH
11603: CALL_OW 322
// end ; if difficulty >= 3 then
11607: LD_OWVAR 67
11611: PUSH
11612: LD_INT 3
11614: GREATEREQUAL
11615: IFFALSE 11763
// begin RuSolMinLevel = 6 ;
11617: LD_ADDR_EXP 36
11621: PUSH
11622: LD_INT 6
11624: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11625: LD_ADDR_EXP 37
11629: PUSH
11630: LD_INT 8
11632: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11633: LD_INT 51
11635: PPUSH
11636: LD_INT 6
11638: PPUSH
11639: LD_INT 2
11641: PPUSH
11642: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11646: LD_INT 57
11648: PPUSH
11649: LD_INT 6
11651: PPUSH
11652: LD_INT 2
11654: PPUSH
11655: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11659: LD_INT 52
11661: PPUSH
11662: LD_INT 6
11664: PPUSH
11665: LD_INT 2
11667: PPUSH
11668: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11672: LD_INT 58
11674: PPUSH
11675: LD_INT 6
11677: PPUSH
11678: LD_INT 2
11680: PPUSH
11681: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11685: LD_INT 63
11687: PPUSH
11688: LD_INT 6
11690: PPUSH
11691: LD_INT 2
11693: PPUSH
11694: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11698: LD_INT 64
11700: PPUSH
11701: LD_INT 6
11703: PPUSH
11704: LD_INT 2
11706: PPUSH
11707: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11711: LD_INT 51
11713: PPUSH
11714: LD_INT 5
11716: PPUSH
11717: LD_INT 2
11719: PPUSH
11720: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
11724: LD_INT 52
11726: PPUSH
11727: LD_INT 5
11729: PPUSH
11730: LD_INT 2
11732: PPUSH
11733: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
11737: LD_INT 66
11739: PPUSH
11740: LD_INT 2
11742: PPUSH
11743: LD_INT 2
11745: PPUSH
11746: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
11750: LD_INT 66
11752: PPUSH
11753: LD_INT 5
11755: PPUSH
11756: LD_INT 2
11758: PPUSH
11759: CALL_OW 322
// end ; end ;
11763: LD_VAR 0 1
11767: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
11768: LD_INT 0
11770: PPUSH
11771: PPUSH
11772: PPUSH
11773: PPUSH
11774: PPUSH
11775: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
11776: LD_ADDR_VAR 0 7
11780: PUSH
11781: LD_INT 43
11783: PUSH
11784: LD_INT 68
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 43
11793: PUSH
11794: LD_INT 79
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 99
11803: PUSH
11804: LD_INT 114
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 103
11813: PUSH
11814: LD_INT 114
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 156
11823: PUSH
11824: LD_INT 92
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 152
11833: PUSH
11834: LD_INT 85
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: ST_TO_ADDR
// for i in sources do
11849: LD_ADDR_VAR 0 3
11853: PUSH
11854: LD_VAR 0 7
11858: PUSH
11859: FOR_IN
11860: IFFALSE 11889
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
11862: LD_VAR 0 3
11866: PUSH
11867: LD_INT 1
11869: ARRAY
11870: PPUSH
11871: LD_VAR 0 3
11875: PUSH
11876: LD_INT 2
11878: ARRAY
11879: PPUSH
11880: LD_INT 3
11882: PPUSH
11883: CALL_OW 441
11887: GO 11859
11889: POP
11890: POP
// case position of 1 :
11891: LD_VAR 0 1
11895: PUSH
11896: LD_INT 1
11898: DOUBLE
11899: EQUAL
11900: IFTRUE 11904
11902: GO 11915
11904: POP
// area := westConv ; 2 :
11905: LD_ADDR_VAR 0 6
11909: PUSH
11910: LD_INT 20
11912: ST_TO_ADDR
11913: GO 11954
11915: LD_INT 2
11917: DOUBLE
11918: EQUAL
11919: IFTRUE 11923
11921: GO 11934
11923: POP
// area := midConv ; 3 :
11924: LD_ADDR_VAR 0 6
11928: PUSH
11929: LD_INT 21
11931: ST_TO_ADDR
11932: GO 11954
11934: LD_INT 3
11936: DOUBLE
11937: EQUAL
11938: IFTRUE 11942
11940: GO 11953
11942: POP
// area := eastConv ; end ;
11943: LD_ADDR_VAR 0 6
11947: PUSH
11948: LD_INT 22
11950: ST_TO_ADDR
11951: GO 11954
11953: POP
// area := AreaToList ( area , 0 ) ;
11954: LD_ADDR_VAR 0 6
11958: PUSH
11959: LD_VAR 0 6
11963: PPUSH
11964: LD_INT 0
11966: PPUSH
11967: CALL_OW 517
11971: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
11972: LD_ADDR_VAR 0 3
11976: PUSH
11977: DOUBLE
11978: LD_INT 1
11980: DEC
11981: ST_TO_ADDR
11982: LD_VAR 0 6
11986: PUSH
11987: LD_INT 1
11989: ARRAY
11990: PUSH
11991: FOR_TO
11992: IFFALSE 12073
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
11994: LD_VAR 0 6
11998: PUSH
11999: LD_INT 1
12001: ARRAY
12002: PUSH
12003: LD_VAR 0 3
12007: ARRAY
12008: PPUSH
12009: LD_VAR 0 6
12013: PUSH
12014: LD_INT 2
12016: ARRAY
12017: PUSH
12018: LD_VAR 0 3
12022: ARRAY
12023: PPUSH
12024: LD_INT 1
12026: PPUSH
12027: LD_INT 1
12029: PPUSH
12030: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12034: LD_VAR 0 6
12038: PUSH
12039: LD_INT 1
12041: ARRAY
12042: PUSH
12043: LD_VAR 0 3
12047: ARRAY
12048: PPUSH
12049: LD_VAR 0 6
12053: PUSH
12054: LD_INT 2
12056: ARRAY
12057: PUSH
12058: LD_VAR 0 3
12062: ARRAY
12063: PPUSH
12064: LD_INT 1
12066: PPUSH
12067: CALL_OW 331
// end ;
12071: GO 11991
12073: POP
12074: POP
// ruPossition = position ;
12075: LD_ADDR_EXP 41
12079: PUSH
12080: LD_VAR 0 1
12084: ST_TO_ADDR
// if position = 1 then
12085: LD_VAR 0 1
12089: PUSH
12090: LD_INT 1
12092: EQUAL
12093: IFFALSE 12841
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12095: LD_ADDR_VAR 0 4
12099: PUSH
12100: LD_INT 22
12102: PUSH
12103: LD_INT 3
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 25
12112: PUSH
12113: LD_INT 2
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PPUSH
12124: CALL_OW 69
12128: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12129: LD_ADDR_VAR 0 5
12133: PUSH
12134: LD_INT 0
12136: PUSH
12137: LD_INT 49
12139: PUSH
12140: LD_INT 74
12142: PUSH
12143: LD_INT 3
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 4
12154: PUSH
12155: LD_INT 73
12157: PUSH
12158: LD_INT 88
12160: PUSH
12161: LD_INT 5
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 4
12172: PUSH
12173: LD_INT 56
12175: PUSH
12176: LD_INT 62
12178: PUSH
12179: LD_INT 3
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 29
12190: PUSH
12191: LD_INT 43
12193: PUSH
12194: LD_INT 68
12196: PUSH
12197: LD_INT 2
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 30
12208: PUSH
12209: LD_INT 43
12211: PUSH
12212: LD_INT 79
12214: PUSH
12215: LD_INT 5
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 28
12226: PUSH
12227: LD_INT 60
12229: PUSH
12230: LD_INT 75
12232: PUSH
12233: LD_INT 1
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 2
12244: PUSH
12245: LD_INT 50
12247: PUSH
12248: LD_INT 87
12250: PUSH
12251: LD_INT 1
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 28
12262: PUSH
12263: LD_INT 45
12265: PUSH
12266: LD_INT 67
12268: PUSH
12269: LD_INT 2
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 17
12280: PUSH
12281: LD_INT 47
12283: PUSH
12284: LD_INT 84
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: LD_INT 18
12298: PUSH
12299: LD_INT 46
12301: PUSH
12302: LD_INT 87
12304: PUSH
12305: LD_INT 1
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 28
12316: PUSH
12317: LD_INT 41
12319: PUSH
12320: LD_INT 64
12322: PUSH
12323: LD_INT 5
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 32
12334: PUSH
12335: LD_INT 75
12337: PUSH
12338: LD_INT 76
12340: PUSH
12341: LD_INT 5
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 32
12352: PUSH
12353: LD_INT 77
12355: PUSH
12356: LD_INT 75
12358: PUSH
12359: LD_INT 5
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: PUSH
12368: LD_INT 32
12370: PUSH
12371: LD_INT 69
12373: PUSH
12374: LD_INT 68
12376: PUSH
12377: LD_INT 3
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 32
12388: PUSH
12389: LD_INT 59
12391: PUSH
12392: LD_INT 96
12394: PUSH
12395: LD_INT 5
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 32
12406: PUSH
12407: LD_INT 56
12409: PUSH
12410: LD_INT 96
12412: PUSH
12413: LD_INT 0
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: PUSH
12422: LD_INT 32
12424: PUSH
12425: LD_INT 51
12427: PUSH
12428: LD_INT 61
12430: PUSH
12431: LD_INT 3
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 32
12442: PUSH
12443: LD_INT 42
12445: PUSH
12446: LD_INT 60
12448: PUSH
12449: LD_INT 3
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 32
12460: PUSH
12461: LD_INT 36
12463: PUSH
12464: LD_INT 58
12466: PUSH
12467: LD_INT 3
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 32
12478: PUSH
12479: LD_INT 39
12481: PUSH
12482: LD_INT 59
12484: PUSH
12485: LD_INT 3
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 32
12496: PUSH
12497: LD_INT 61
12499: PUSH
12500: LD_INT 64
12502: PUSH
12503: LD_INT 3
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 33
12514: PUSH
12515: LD_INT 63
12517: PUSH
12518: LD_INT 90
12520: PUSH
12521: LD_INT 5
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 33
12532: PUSH
12533: LD_INT 64
12535: PUSH
12536: LD_INT 88
12538: PUSH
12539: LD_INT 5
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 33
12550: PUSH
12551: LD_INT 72
12553: PUSH
12554: LD_INT 82
12556: PUSH
12557: LD_INT 5
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 6
12568: PUSH
12569: LD_INT 42
12571: PUSH
12572: LD_INT 74
12574: PUSH
12575: LD_INT 1
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 6
12586: PUSH
12587: LD_INT 56
12589: PUSH
12590: LD_INT 77
12592: PUSH
12593: LD_INT 2
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 21
12604: PUSH
12605: LD_INT 54
12607: PUSH
12608: LD_INT 91
12610: PUSH
12611: LD_INT 5
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 16
12622: PUSH
12623: LD_INT 50
12625: PUSH
12626: LD_INT 83
12628: PUSH
12629: LD_INT 3
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 24
12640: PUSH
12641: LD_INT 50
12643: PUSH
12644: LD_INT 90
12646: PUSH
12647: LD_INT 0
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12687: LD_ADDR_VAR 0 3
12691: PUSH
12692: LD_INT 22
12694: PUSH
12695: LD_INT 3
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 3
12704: PUSH
12705: LD_INT 25
12707: PUSH
12708: LD_INT 2
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PPUSH
12723: CALL_OW 69
12727: PUSH
12728: FOR_IN
12729: IFFALSE 12748
// AddComAgressiveMove ( i , 53 , 82 ) ;
12731: LD_VAR 0 3
12735: PPUSH
12736: LD_INT 53
12738: PPUSH
12739: LD_INT 82
12741: PPUSH
12742: CALL_OW 174
12746: GO 12728
12748: POP
12749: POP
// for i := 1 to buildingsTab do
12750: LD_ADDR_VAR 0 3
12754: PUSH
12755: DOUBLE
12756: LD_INT 1
12758: DEC
12759: ST_TO_ADDR
12760: LD_VAR 0 5
12764: PUSH
12765: FOR_TO
12766: IFFALSE 12839
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12768: LD_VAR 0 4
12772: PPUSH
12773: LD_VAR 0 5
12777: PUSH
12778: LD_VAR 0 3
12782: ARRAY
12783: PUSH
12784: LD_INT 1
12786: ARRAY
12787: PPUSH
12788: LD_VAR 0 5
12792: PUSH
12793: LD_VAR 0 3
12797: ARRAY
12798: PUSH
12799: LD_INT 2
12801: ARRAY
12802: PPUSH
12803: LD_VAR 0 5
12807: PUSH
12808: LD_VAR 0 3
12812: ARRAY
12813: PUSH
12814: LD_INT 3
12816: ARRAY
12817: PPUSH
12818: LD_VAR 0 5
12822: PUSH
12823: LD_VAR 0 3
12827: ARRAY
12828: PUSH
12829: LD_INT 4
12831: ARRAY
12832: PPUSH
12833: CALL_OW 205
12837: GO 12765
12839: POP
12840: POP
// end ; if position = 2 then
12841: LD_VAR 0 1
12845: PUSH
12846: LD_INT 2
12848: EQUAL
12849: IFFALSE 13464
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12851: LD_ADDR_VAR 0 4
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_INT 3
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 25
12868: PUSH
12869: LD_INT 2
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PPUSH
12880: CALL_OW 69
12884: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
12885: LD_ADDR_VAR 0 5
12889: PUSH
12890: LD_INT 0
12892: PUSH
12893: LD_INT 104
12895: PUSH
12896: LD_INT 110
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 4
12910: PUSH
12911: LD_INT 98
12913: PUSH
12914: LD_INT 90
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 29
12928: PUSH
12929: LD_INT 103
12931: PUSH
12932: LD_INT 114
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 30
12946: PUSH
12947: LD_INT 99
12949: PUSH
12950: LD_INT 114
12952: PUSH
12953: LD_INT 3
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 28
12964: PUSH
12965: LD_INT 100
12967: PUSH
12968: LD_INT 112
12970: PUSH
12971: LD_INT 1
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 2
12982: PUSH
12983: LD_INT 92
12985: PUSH
12986: LD_INT 101
12988: PUSH
12989: LD_INT 0
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 28
13000: PUSH
13001: LD_INT 97
13003: PUSH
13004: LD_INT 116
13006: PUSH
13007: LD_INT 5
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 17
13018: PUSH
13019: LD_INT 96
13021: PUSH
13022: LD_INT 101
13024: PUSH
13025: LD_INT 4
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 18
13036: PUSH
13037: LD_INT 88
13039: PUSH
13040: LD_INT 97
13042: PUSH
13043: LD_INT 2
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 28
13054: PUSH
13055: LD_INT 106
13057: PUSH
13058: LD_INT 92
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 32
13072: PUSH
13073: LD_INT 88
13075: PUSH
13076: LD_INT 89
13078: PUSH
13079: LD_INT 2
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 32
13090: PUSH
13091: LD_INT 86
13093: PUSH
13094: LD_INT 90
13096: PUSH
13097: LD_INT 2
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 32
13108: PUSH
13109: LD_INT 85
13111: PUSH
13112: LD_INT 99
13114: PUSH
13115: LD_INT 2
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 32
13126: PUSH
13127: LD_INT 85
13129: PUSH
13130: LD_INT 107
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 33
13144: PUSH
13145: LD_INT 105
13147: PUSH
13148: LD_INT 99
13150: PUSH
13151: LD_INT 1
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 33
13162: PUSH
13163: LD_INT 102
13165: PUSH
13166: LD_INT 92
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 33
13180: PUSH
13181: LD_INT 105
13183: PUSH
13184: LD_INT 92
13186: PUSH
13187: LD_INT 2
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 6
13198: PUSH
13199: LD_INT 92
13201: PUSH
13202: LD_INT 110
13204: PUSH
13205: LD_INT 0
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 6
13216: PUSH
13217: LD_INT 103
13219: PUSH
13220: LD_INT 103
13222: PUSH
13223: LD_INT 5
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 21
13234: PUSH
13235: LD_INT 89
13237: PUSH
13238: LD_INT 101
13240: PUSH
13241: LD_INT 1
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 16
13252: PUSH
13253: LD_INT 95
13255: PUSH
13256: LD_INT 104
13258: PUSH
13259: LD_INT 4
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 24
13270: PUSH
13271: LD_INT 92
13273: PUSH
13274: LD_INT 105
13276: PUSH
13277: LD_INT 0
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13310: LD_ADDR_VAR 0 3
13314: PUSH
13315: LD_INT 22
13317: PUSH
13318: LD_INT 3
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PUSH
13325: LD_INT 3
13327: PUSH
13328: LD_INT 25
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: PUSH
13351: FOR_IN
13352: IFFALSE 13371
// AddComAgressiveMove ( i , 96 , 99 ) ;
13354: LD_VAR 0 3
13358: PPUSH
13359: LD_INT 96
13361: PPUSH
13362: LD_INT 99
13364: PPUSH
13365: CALL_OW 174
13369: GO 13351
13371: POP
13372: POP
// for i := 1 to buildingsTab do
13373: LD_ADDR_VAR 0 3
13377: PUSH
13378: DOUBLE
13379: LD_INT 1
13381: DEC
13382: ST_TO_ADDR
13383: LD_VAR 0 5
13387: PUSH
13388: FOR_TO
13389: IFFALSE 13462
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13391: LD_VAR 0 4
13395: PPUSH
13396: LD_VAR 0 5
13400: PUSH
13401: LD_VAR 0 3
13405: ARRAY
13406: PUSH
13407: LD_INT 1
13409: ARRAY
13410: PPUSH
13411: LD_VAR 0 5
13415: PUSH
13416: LD_VAR 0 3
13420: ARRAY
13421: PUSH
13422: LD_INT 2
13424: ARRAY
13425: PPUSH
13426: LD_VAR 0 5
13430: PUSH
13431: LD_VAR 0 3
13435: ARRAY
13436: PUSH
13437: LD_INT 3
13439: ARRAY
13440: PPUSH
13441: LD_VAR 0 5
13445: PUSH
13446: LD_VAR 0 3
13450: ARRAY
13451: PUSH
13452: LD_INT 4
13454: ARRAY
13455: PPUSH
13456: CALL_OW 205
13460: GO 13388
13462: POP
13463: POP
// end ; if position = 3 then
13464: LD_VAR 0 1
13468: PUSH
13469: LD_INT 3
13471: EQUAL
13472: IFFALSE 14258
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13474: LD_ADDR_VAR 0 4
13478: PUSH
13479: LD_INT 22
13481: PUSH
13482: LD_INT 3
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: LD_INT 25
13491: PUSH
13492: LD_INT 2
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13508: LD_ADDR_VAR 0 5
13512: PUSH
13513: LD_INT 0
13515: PUSH
13516: LD_INT 151
13518: PUSH
13519: LD_INT 71
13521: PUSH
13522: LD_INT 4
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 4
13533: PUSH
13534: LD_INT 145
13536: PUSH
13537: LD_INT 53
13539: PUSH
13540: LD_INT 3
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 4
13551: PUSH
13552: LD_INT 172
13554: PUSH
13555: LD_INT 102
13557: PUSH
13558: LD_INT 5
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 29
13569: PUSH
13570: LD_INT 152
13572: PUSH
13573: LD_INT 85
13575: PUSH
13576: LD_INT 3
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 30
13587: PUSH
13588: LD_INT 156
13590: PUSH
13591: LD_INT 92
13593: PUSH
13594: LD_INT 3
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 28
13605: PUSH
13606: LD_INT 151
13608: PUSH
13609: LD_INT 66
13611: PUSH
13612: LD_INT 4
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 2
13623: PUSH
13624: LD_INT 163
13626: PUSH
13627: LD_INT 95
13629: PUSH
13630: LD_INT 5
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 28
13641: PUSH
13642: LD_INT 149
13644: PUSH
13645: LD_INT 63
13647: PUSH
13648: LD_INT 4
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 17
13659: PUSH
13660: LD_INT 167
13662: PUSH
13663: LD_INT 99
13665: PUSH
13666: LD_INT 5
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 18
13677: PUSH
13678: LD_INT 163
13680: PUSH
13681: LD_INT 98
13683: PUSH
13684: LD_INT 0
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: PUSH
13693: LD_INT 28
13695: PUSH
13696: LD_INT 154
13698: PUSH
13699: LD_INT 70
13701: PUSH
13702: LD_INT 4
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 32
13713: PUSH
13714: LD_INT 155
13716: PUSH
13717: LD_INT 62
13719: PUSH
13720: LD_INT 4
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 32
13731: PUSH
13732: LD_INT 161
13734: PUSH
13735: LD_INT 69
13737: PUSH
13738: LD_INT 4
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 32
13749: PUSH
13750: LD_INT 168
13752: PUSH
13753: LD_INT 78
13755: PUSH
13756: LD_INT 4
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 32
13767: PUSH
13768: LD_INT 163
13770: PUSH
13771: LD_INT 80
13773: PUSH
13774: LD_INT 5
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 32
13785: PUSH
13786: LD_INT 136
13788: PUSH
13789: LD_INT 73
13791: PUSH
13792: LD_INT 0
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 32
13803: PUSH
13804: LD_INT 157
13806: PUSH
13807: LD_INT 98
13809: PUSH
13810: LD_INT 0
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 32
13821: PUSH
13822: LD_INT 150
13824: PUSH
13825: LD_INT 87
13827: PUSH
13828: LD_INT 1
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 33
13839: PUSH
13840: LD_INT 171
13842: PUSH
13843: LD_INT 97
13845: PUSH
13846: LD_INT 4
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 33
13857: PUSH
13858: LD_INT 168
13860: PUSH
13861: LD_INT 92
13863: PUSH
13864: LD_INT 4
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 33
13875: PUSH
13876: LD_INT 166
13878: PUSH
13879: LD_INT 80
13881: PUSH
13882: LD_INT 5
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 33
13893: PUSH
13894: LD_INT 141
13896: PUSH
13897: LD_INT 54
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 33
13911: PUSH
13912: LD_INT 133
13914: PUSH
13915: LD_INT 57
13917: PUSH
13918: LD_INT 2
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 33
13929: PUSH
13930: LD_INT 132
13932: PUSH
13933: LD_INT 61
13935: PUSH
13936: LD_INT 2
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 33
13947: PUSH
13948: LD_INT 150
13950: PUSH
13951: LD_INT 82
13953: PUSH
13954: LD_INT 0
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 33
13965: PUSH
13966: LD_INT 132
13968: PUSH
13969: LD_INT 72
13971: PUSH
13972: LD_INT 0
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 6
13983: PUSH
13984: LD_INT 146
13986: PUSH
13987: LD_INT 64
13989: PUSH
13990: LD_INT 4
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 6
14001: PUSH
14002: LD_INT 159
14004: PUSH
14005: LD_INT 85
14007: PUSH
14008: LD_INT 4
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 21
14019: PUSH
14020: LD_INT 163
14022: PUSH
14023: LD_INT 91
14025: PUSH
14026: LD_INT 3
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 16
14037: PUSH
14038: LD_INT 166
14040: PUSH
14041: LD_INT 95
14043: PUSH
14044: LD_INT 4
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 24
14055: PUSH
14056: LD_INT 159
14058: PUSH
14059: LD_INT 95
14061: PUSH
14062: LD_INT 1
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: LD_INT 22
14111: PUSH
14112: LD_INT 3
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 3
14121: PUSH
14122: LD_INT 25
14124: PUSH
14125: LD_INT 2
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 69
14144: PUSH
14145: FOR_IN
14146: IFFALSE 14165
// AddComAgressiveMove ( i , 141 , 65 ) ;
14148: LD_VAR 0 3
14152: PPUSH
14153: LD_INT 141
14155: PPUSH
14156: LD_INT 65
14158: PPUSH
14159: CALL_OW 174
14163: GO 14145
14165: POP
14166: POP
// for i := 1 to buildingsTab do
14167: LD_ADDR_VAR 0 3
14171: PUSH
14172: DOUBLE
14173: LD_INT 1
14175: DEC
14176: ST_TO_ADDR
14177: LD_VAR 0 5
14181: PUSH
14182: FOR_TO
14183: IFFALSE 14256
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14185: LD_VAR 0 4
14189: PPUSH
14190: LD_VAR 0 5
14194: PUSH
14195: LD_VAR 0 3
14199: ARRAY
14200: PUSH
14201: LD_INT 1
14203: ARRAY
14204: PPUSH
14205: LD_VAR 0 5
14209: PUSH
14210: LD_VAR 0 3
14214: ARRAY
14215: PUSH
14216: LD_INT 2
14218: ARRAY
14219: PPUSH
14220: LD_VAR 0 5
14224: PUSH
14225: LD_VAR 0 3
14229: ARRAY
14230: PUSH
14231: LD_INT 3
14233: ARRAY
14234: PPUSH
14235: LD_VAR 0 5
14239: PUSH
14240: LD_VAR 0 3
14244: ARRAY
14245: PUSH
14246: LD_INT 4
14248: ARRAY
14249: PPUSH
14250: CALL_OW 205
14254: GO 14182
14256: POP
14257: POP
// end ; end ;
14258: LD_VAR 0 2
14262: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14263: LD_INT 0
14265: PPUSH
14266: PPUSH
14267: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14268: LD_ADDR_EXP 68
14272: PUSH
14273: LD_INT 0
14275: PUSH
14276: LD_INT 71
14278: PUSH
14279: LD_INT 15
14281: PUSH
14282: LD_INT 3
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 6
14293: PUSH
14294: LD_INT 77
14296: PUSH
14297: LD_INT 18
14299: PUSH
14300: LD_INT 3
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 4
14311: PUSH
14312: LD_INT 77
14314: PUSH
14315: LD_INT 26
14317: PUSH
14318: LD_INT 0
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 31
14329: PUSH
14330: LD_INT 72
14332: PUSH
14333: LD_INT 24
14335: PUSH
14336: LD_INT 0
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 31
14347: PUSH
14348: LD_INT 82
14350: PUSH
14351: LD_INT 28
14353: PUSH
14354: LD_INT 0
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 31
14365: PUSH
14366: LD_INT 84
14368: PUSH
14369: LD_INT 21
14371: PUSH
14372: LD_INT 3
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: LD_INT 31
14383: PUSH
14384: LD_INT 66
14386: PUSH
14387: LD_INT 14
14389: PUSH
14390: LD_INT 2
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 27
14401: PUSH
14402: LD_INT 67
14404: PUSH
14405: LD_INT 18
14407: PUSH
14408: LD_INT 5
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 27
14419: PUSH
14420: LD_INT 69
14422: PUSH
14423: LD_INT 23
14425: PUSH
14426: LD_INT 2
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14446: LD_ADDR_VAR 0 3
14450: PUSH
14451: LD_INT 22
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 25
14463: PUSH
14464: LD_INT 2
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 69
14479: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14480: LD_VAR 0 3
14484: PPUSH
14485: LD_EXP 68
14489: PUSH
14490: LD_INT 1
14492: ARRAY
14493: PUSH
14494: LD_INT 1
14496: ARRAY
14497: PPUSH
14498: LD_EXP 68
14502: PUSH
14503: LD_INT 1
14505: ARRAY
14506: PUSH
14507: LD_INT 2
14509: ARRAY
14510: PPUSH
14511: LD_EXP 68
14515: PUSH
14516: LD_INT 1
14518: ARRAY
14519: PUSH
14520: LD_INT 3
14522: ARRAY
14523: PPUSH
14524: LD_EXP 68
14528: PUSH
14529: LD_INT 1
14531: ARRAY
14532: PUSH
14533: LD_INT 4
14535: ARRAY
14536: PPUSH
14537: CALL_OW 205
// end ;
14541: LD_VAR 0 1
14545: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14546: LD_INT 0
14548: PPUSH
14549: PPUSH
14550: PPUSH
14551: PPUSH
14552: PPUSH
14553: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14554: LD_ADDR_VAR 0 7
14558: PUSH
14559: LD_INT 22
14561: PUSH
14562: LD_VAR 0 1
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 25
14573: PUSH
14574: LD_INT 9
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PPUSH
14585: CALL_OW 69
14589: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14590: LD_ADDR_VAR 0 8
14594: PUSH
14595: LD_INT 22
14597: PUSH
14598: LD_VAR 0 2
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: LD_INT 3
14609: PUSH
14610: LD_INT 21
14612: PUSH
14613: LD_INT 3
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 69
14632: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14633: LD_ADDR_VAR 0 5
14637: PUSH
14638: LD_INT 1
14640: PPUSH
14641: LD_INT 3
14643: PPUSH
14644: CALL_OW 12
14648: ST_TO_ADDR
// for i = 1 to list do
14649: LD_ADDR_VAR 0 6
14653: PUSH
14654: DOUBLE
14655: LD_INT 1
14657: DEC
14658: ST_TO_ADDR
14659: LD_VAR 0 7
14663: PUSH
14664: FOR_TO
14665: IFFALSE 15655
// for ta in filter do
14667: LD_ADDR_VAR 0 4
14671: PUSH
14672: LD_VAR 0 8
14676: PUSH
14677: FOR_IN
14678: IFFALSE 15651
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14680: LD_VAR 0 7
14684: PUSH
14685: LD_VAR 0 6
14689: ARRAY
14690: PPUSH
14691: LD_VAR 0 4
14695: PPUSH
14696: CALL_OW 296
14700: PUSH
14701: LD_INT 15
14703: LESSEQUAL
14704: IFFALSE 15649
// begin case c of 1 :
14706: LD_VAR 0 5
14710: PUSH
14711: LD_INT 1
14713: DOUBLE
14714: EQUAL
14715: IFTRUE 14719
14717: GO 15151
14719: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
14720: LD_VAR 0 7
14724: PUSH
14725: LD_VAR 0 6
14729: ARRAY
14730: PPUSH
14731: LD_VAR 0 4
14735: PPUSH
14736: CALL_OW 250
14740: PPUSH
14741: LD_VAR 0 4
14745: PPUSH
14746: CALL_OW 251
14750: PPUSH
14751: CALL_OW 154
// if eventVar2 = 0 then
14755: LD_EXP 66
14759: PUSH
14760: LD_INT 0
14762: EQUAL
14763: IFFALSE 15149
// begin eventVar2 = 1 ;
14765: LD_ADDR_EXP 66
14769: PUSH
14770: LD_INT 1
14772: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14773: LD_INT 245
14775: PPUSH
14776: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14780: LD_VAR 0 4
14784: PPUSH
14785: CALL_OW 250
14789: PPUSH
14790: LD_VAR 0 4
14794: PPUSH
14795: CALL_OW 251
14799: PPUSH
14800: CALL_OW 84
// DialogueOn ;
14804: CALL_OW 6
// if IsOK ( Cyrus ) then
14808: LD_EXP 5
14812: PPUSH
14813: CALL_OW 302
14817: IFFALSE 14833
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14819: LD_EXP 5
14823: PPUSH
14824: LD_STRING D9a-Cyrus-1
14826: PPUSH
14827: CALL_OW 88
// end else
14831: GO 14955
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14833: LD_INT 22
14835: PUSH
14836: LD_INT 1
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 26
14845: PUSH
14846: LD_INT 1
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 2
14855: PUSH
14856: LD_INT 25
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 25
14868: PUSH
14869: LD_INT 2
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 25
14878: PUSH
14879: LD_INT 3
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: LD_INT 25
14888: PUSH
14889: LD_INT 4
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PUSH
14896: LD_INT 25
14898: PUSH
14899: LD_INT 5
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: PPUSH
14919: CALL_OW 69
14923: PUSH
14924: LD_EXP 1
14928: PUSH
14929: LD_EXP 14
14933: PUSH
14934: LD_EXP 5
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: DIFF
14944: PPUSH
14945: LD_STRING D9a-Sol1-1
14947: PPUSH
14948: LD_STRING D9a-Sol1-1
14950: PPUSH
14951: CALL 11110 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14955: LD_INT 22
14957: PUSH
14958: LD_INT 1
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 26
14967: PUSH
14968: LD_INT 1
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 2
14977: PUSH
14978: LD_INT 25
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 2
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 25
15000: PUSH
15001: LD_INT 3
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 25
15010: PUSH
15011: LD_INT 4
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: LD_INT 25
15020: PUSH
15021: LD_INT 5
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: PPUSH
15041: CALL_OW 69
15045: PUSH
15046: LD_EXP 1
15050: PUSH
15051: LD_EXP 14
15055: PUSH
15056: LD_EXP 5
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: DIFF
15066: PPUSH
15067: LD_STRING D9b-Sol1-1
15069: PPUSH
15070: LD_STRING D9b-Sol1-1
15072: PPUSH
15073: CALL 11110 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15077: LD_STRING 09_arInfo
15079: PPUSH
15080: LD_INT 0
15082: PPUSH
15083: CALL_OW 30
15087: PUSH
15088: LD_INT 1
15090: EQUAL
15091: IFFALSE 15105
// Say ( JMM , D9a-JMM-1 ) ;
15093: LD_EXP 1
15097: PPUSH
15098: LD_STRING D9a-JMM-1
15100: PPUSH
15101: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15105: LD_EXP 1
15109: PPUSH
15110: LD_STRING D9c-JMM-1
15112: PPUSH
15113: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15117: LD_INT 12
15119: PPUSH
15120: LD_INT 1
15122: PPUSH
15123: CALL_OW 321
15127: PUSH
15128: LD_INT 2
15130: EQUAL
15131: IFFALSE 15145
// Say ( JMM , D9c-JMM-1a ) ;
15133: LD_EXP 1
15137: PPUSH
15138: LD_STRING D9c-JMM-1a
15140: PPUSH
15141: CALL_OW 88
// DialogueOff ;
15145: CALL_OW 7
// end ; end ; 2 :
15149: GO 15649
15151: LD_INT 2
15153: DOUBLE
15154: EQUAL
15155: IFTRUE 15159
15157: GO 15617
15159: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15160: LD_VAR 0 7
15164: PUSH
15165: LD_VAR 0 6
15169: ARRAY
15170: PPUSH
15171: LD_VAR 0 4
15175: PPUSH
15176: CALL_OW 250
15180: PUSH
15181: LD_INT 1
15183: NEG
15184: PPUSH
15185: LD_INT 1
15187: PPUSH
15188: CALL_OW 12
15192: PLUS
15193: PPUSH
15194: LD_VAR 0 4
15198: PPUSH
15199: CALL_OW 251
15203: PUSH
15204: LD_INT 1
15206: NEG
15207: PPUSH
15208: LD_INT 1
15210: PPUSH
15211: CALL_OW 12
15215: PLUS
15216: PPUSH
15217: CALL_OW 153
// if eventVar2 = 0 then
15221: LD_EXP 66
15225: PUSH
15226: LD_INT 0
15228: EQUAL
15229: IFFALSE 15615
// begin eventVar2 = 1 ;
15231: LD_ADDR_EXP 66
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15239: LD_INT 245
15241: PPUSH
15242: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15246: LD_VAR 0 4
15250: PPUSH
15251: CALL_OW 250
15255: PPUSH
15256: LD_VAR 0 4
15260: PPUSH
15261: CALL_OW 251
15265: PPUSH
15266: CALL_OW 84
// DialogueOn ;
15270: CALL_OW 6
// if IsOK ( Cyrus ) then
15274: LD_EXP 5
15278: PPUSH
15279: CALL_OW 302
15283: IFFALSE 15299
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15285: LD_EXP 5
15289: PPUSH
15290: LD_STRING D9a-Cyrus-1
15292: PPUSH
15293: CALL_OW 88
// end else
15297: GO 15421
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15299: LD_INT 22
15301: PUSH
15302: LD_INT 1
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 26
15311: PUSH
15312: LD_INT 1
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 2
15321: PUSH
15322: LD_INT 25
15324: PUSH
15325: LD_INT 1
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 25
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 25
15344: PUSH
15345: LD_INT 3
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 25
15354: PUSH
15355: LD_INT 4
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 25
15364: PUSH
15365: LD_INT 5
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: LIST
15384: PPUSH
15385: CALL_OW 69
15389: PUSH
15390: LD_EXP 1
15394: PUSH
15395: LD_EXP 14
15399: PUSH
15400: LD_EXP 5
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: DIFF
15410: PPUSH
15411: LD_STRING D9a-Sol1-1
15413: PPUSH
15414: LD_STRING D9a-Sol1-1
15416: PPUSH
15417: CALL 11110 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15421: LD_INT 22
15423: PUSH
15424: LD_INT 1
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 26
15433: PUSH
15434: LD_INT 1
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 2
15443: PUSH
15444: LD_INT 25
15446: PUSH
15447: LD_INT 1
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 25
15456: PUSH
15457: LD_INT 2
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 25
15466: PUSH
15467: LD_INT 3
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 25
15476: PUSH
15477: LD_INT 4
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 25
15486: PUSH
15487: LD_INT 5
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: LIST
15506: PPUSH
15507: CALL_OW 69
15511: PUSH
15512: LD_EXP 1
15516: PUSH
15517: LD_EXP 14
15521: PUSH
15522: LD_EXP 5
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: DIFF
15532: PPUSH
15533: LD_STRING D9b-Sol1-1
15535: PPUSH
15536: LD_STRING D9b-Sol1-1
15538: PPUSH
15539: CALL 11110 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15543: LD_STRING 09_arInfo
15545: PPUSH
15546: LD_INT 0
15548: PPUSH
15549: CALL_OW 30
15553: PUSH
15554: LD_INT 1
15556: EQUAL
15557: IFFALSE 15571
// Say ( JMM , D9a-JMM-1 ) ;
15559: LD_EXP 1
15563: PPUSH
15564: LD_STRING D9a-JMM-1
15566: PPUSH
15567: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15571: LD_EXP 1
15575: PPUSH
15576: LD_STRING D9c-JMM-1
15578: PPUSH
15579: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15583: LD_INT 12
15585: PPUSH
15586: LD_INT 1
15588: PPUSH
15589: CALL_OW 321
15593: PUSH
15594: LD_INT 2
15596: EQUAL
15597: IFFALSE 15611
// Say ( JMM , D9c-JMM-1a ) ;
15599: LD_EXP 1
15603: PPUSH
15604: LD_STRING D9c-JMM-1a
15606: PPUSH
15607: CALL_OW 88
// DialogueOff ;
15611: CALL_OW 7
// end ; end ; 3 :
15615: GO 15649
15617: LD_INT 3
15619: DOUBLE
15620: EQUAL
15621: IFTRUE 15625
15623: GO 15648
15625: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15626: LD_VAR 0 7
15630: PUSH
15631: LD_VAR 0 6
15635: ARRAY
15636: PPUSH
15637: LD_VAR 0 4
15641: PPUSH
15642: CALL_OW 115
15646: GO 15649
15648: POP
// end ; end ;
15649: GO 14677
15651: POP
15652: POP
15653: GO 14664
15655: POP
15656: POP
// end ;
15657: LD_VAR 0 3
15661: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15662: LD_INT 0
15664: PPUSH
15665: PPUSH
15666: PPUSH
15667: PPUSH
// for i = 1 to 72 do
15668: LD_ADDR_VAR 0 5
15672: PUSH
15673: DOUBLE
15674: LD_INT 1
15676: DEC
15677: ST_TO_ADDR
15678: LD_INT 72
15680: PUSH
15681: FOR_TO
15682: IFFALSE 15740
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15684: LD_VAR 0 5
15688: PPUSH
15689: LD_VAR 0 1
15693: PPUSH
15694: CALL_OW 321
15698: PUSH
15699: LD_INT 1
15701: EQUAL
15702: PUSH
15703: LD_VAR 0 5
15707: PPUSH
15708: LD_VAR 0 3
15712: PPUSH
15713: CALL_OW 482
15717: PUSH
15718: LD_INT 1
15720: EQUAL
15721: AND
15722: IFFALSE 15738
// AddComResearch ( lab , i ) ;
15724: LD_VAR 0 2
15728: PPUSH
15729: LD_VAR 0 5
15733: PPUSH
15734: CALL_OW 184
15738: GO 15681
15740: POP
15741: POP
// end ;
15742: LD_VAR 0 4
15746: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
15747: LD_INT 0
15749: PPUSH
15750: PPUSH
15751: PPUSH
15752: PPUSH
15753: PPUSH
15754: PPUSH
15755: PPUSH
15756: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
15757: LD_ADDR_VAR 0 6
15761: PUSH
15762: LD_INT 22
15764: PUSH
15765: LD_VAR 0 1
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 56
15776: PUSH
15777: EMPTY
15778: LIST
15779: PUSH
15780: LD_INT 24
15782: PUSH
15783: LD_INT 700
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 3
15792: PUSH
15793: LD_INT 60
15795: PUSH
15796: EMPTY
15797: LIST
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 2
15805: PUSH
15806: LD_INT 25
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 25
15818: PUSH
15819: LD_INT 9
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: LIST
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: PPUSH
15838: CALL_OW 69
15842: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
15843: LD_ADDR_VAR 0 7
15847: PUSH
15848: LD_INT 22
15850: PUSH
15851: LD_VAR 0 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 30
15862: PUSH
15863: LD_INT 32
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 58
15872: PUSH
15873: EMPTY
15874: LIST
15875: PUSH
15876: LD_INT 24
15878: PUSH
15879: LD_INT 251
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: PPUSH
15892: CALL_OW 69
15896: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
15897: LD_ADDR_VAR 0 9
15901: PUSH
15902: LD_INT 22
15904: PUSH
15905: LD_VAR 0 1
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 2
15916: PUSH
15917: LD_INT 30
15919: PUSH
15920: LD_INT 4
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 30
15929: PUSH
15930: LD_INT 5
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 24
15944: PUSH
15945: LD_INT 251
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: LIST
15956: PPUSH
15957: CALL_OW 69
15961: ST_TO_ADDR
// if barrackList > 0 then
15962: LD_VAR 0 9
15966: PUSH
15967: LD_INT 0
15969: GREATER
15970: IFFALSE 16105
// begin if turretList = 0 then
15972: LD_VAR 0 7
15976: PUSH
15977: LD_INT 0
15979: EQUAL
15980: IFFALSE 16029
// begin for i in soldiers_list do
15982: LD_ADDR_VAR 0 4
15986: PUSH
15987: LD_VAR 0 6
15991: PUSH
15992: FOR_IN
15993: IFFALSE 16025
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
15995: LD_VAR 0 4
15999: PPUSH
16000: LD_VAR 0 9
16004: PUSH
16005: LD_INT 1
16007: PPUSH
16008: LD_VAR 0 9
16012: PPUSH
16013: CALL_OW 12
16017: ARRAY
16018: PPUSH
16019: CALL_OW 120
16023: GO 15992
16025: POP
16026: POP
// end else
16027: GO 16105
// begin for i in barrackList do
16029: LD_ADDR_VAR 0 4
16033: PUSH
16034: LD_VAR 0 9
16038: PUSH
16039: FOR_IN
16040: IFFALSE 16103
// begin insideUnits = UnitsInside ( i ) ;
16042: LD_ADDR_VAR 0 10
16046: PUSH
16047: LD_VAR 0 4
16051: PPUSH
16052: CALL_OW 313
16056: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16057: LD_VAR 0 10
16061: PUSH
16062: LD_INT 1
16064: ARRAY
16065: PPUSH
16066: LD_VAR 0 7
16070: PUSH
16071: LD_INT 1
16073: ARRAY
16074: PPUSH
16075: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16079: LD_VAR 0 6
16083: PUSH
16084: LD_INT 1
16086: ARRAY
16087: PPUSH
16088: LD_VAR 0 7
16092: PUSH
16093: LD_INT 1
16095: ARRAY
16096: PPUSH
16097: CALL_OW 120
// end ;
16101: GO 16039
16103: POP
16104: POP
// end ; end ; end ;
16105: LD_VAR 0 3
16109: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16110: LD_INT 0
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
16117: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16118: LD_ADDR_VAR 0 6
16122: PUSH
16123: LD_VAR 0 2
16127: PPUSH
16128: CALL_OW 313
16132: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16133: LD_ADDR_VAR 0 7
16137: PUSH
16138: LD_INT 22
16140: PUSH
16141: LD_VAR 0 1
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 25
16152: PUSH
16153: LD_INT 2
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 24
16162: PUSH
16163: LD_INT 1000
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: LD_INT 54
16175: PUSH
16176: EMPTY
16177: LIST
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: PPUSH
16189: CALL_OW 69
16193: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16194: LD_ADDR_VAR 0 4
16198: PUSH
16199: LD_INT 22
16201: PUSH
16202: LD_VAR 0 1
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 21
16213: PUSH
16214: LD_INT 3
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 3
16223: PUSH
16224: LD_INT 24
16226: PUSH
16227: LD_INT 1000
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: PPUSH
16246: CALL_OW 69
16250: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16251: LD_VAR 0 4
16255: NOT
16256: PUSH
16257: LD_VAR 0 7
16261: NOT
16262: AND
16263: PUSH
16264: LD_EXP 42
16268: NOT
16269: AND
16270: IFFALSE 16274
// exit ;
16272: GO 16465
// if buildings_list > 0 and engineerOkInside then
16274: LD_VAR 0 4
16278: PUSH
16279: LD_INT 0
16281: GREATER
16282: PUSH
16283: LD_VAR 0 6
16287: AND
16288: IFFALSE 16342
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16290: LD_ADDR_VAR 0 5
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_VAR 0 1
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 25
16309: PUSH
16310: LD_INT 2
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PPUSH
16321: CALL_OW 69
16325: PUSH
16326: FOR_IN
16327: IFFALSE 16340
// ComExitBuilding ( i ) ;
16329: LD_VAR 0 5
16333: PPUSH
16334: CALL_OW 122
16338: GO 16326
16340: POP
16341: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16342: LD_VAR 0 4
16346: PUSH
16347: LD_INT 0
16349: GREATER
16350: PUSH
16351: LD_VAR 0 7
16355: PUSH
16356: LD_INT 0
16358: GREATER
16359: AND
16360: IFFALSE 16414
// begin for i in engineerOkOutside do
16362: LD_ADDR_VAR 0 5
16366: PUSH
16367: LD_VAR 0 7
16371: PUSH
16372: FOR_IN
16373: IFFALSE 16412
// for j in buildings_list do
16375: LD_ADDR_VAR 0 8
16379: PUSH
16380: LD_VAR 0 4
16384: PUSH
16385: FOR_IN
16386: IFFALSE 16408
// ComRepairBuilding ( i , j [ 1 ] ) ;
16388: LD_VAR 0 5
16392: PPUSH
16393: LD_VAR 0 8
16397: PUSH
16398: LD_INT 1
16400: ARRAY
16401: PPUSH
16402: CALL_OW 130
16406: GO 16385
16408: POP
16409: POP
16410: GO 16372
16412: POP
16413: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16414: LD_VAR 0 4
16418: PUSH
16419: LD_INT 0
16421: EQUAL
16422: PUSH
16423: LD_VAR 0 7
16427: PUSH
16428: LD_INT 0
16430: GREATER
16431: AND
16432: IFFALSE 16465
// for i in engineerOkOutside do
16434: LD_ADDR_VAR 0 5
16438: PUSH
16439: LD_VAR 0 7
16443: PUSH
16444: FOR_IN
16445: IFFALSE 16463
// ComEnterUnit ( i , building ) ;
16447: LD_VAR 0 5
16451: PPUSH
16452: LD_VAR 0 2
16456: PPUSH
16457: CALL_OW 120
16461: GO 16444
16463: POP
16464: POP
// end ;
16465: LD_VAR 0 3
16469: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16470: LD_INT 0
16472: PPUSH
16473: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16474: LD_INT 22
16476: PUSH
16477: LD_VAR 0 1
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 25
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: PUSH
16505: LD_INT 0
16507: GREATER
16508: PUSH
16509: LD_INT 22
16511: PUSH
16512: LD_VAR 0 1
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 21
16523: PUSH
16524: LD_INT 3
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 3
16533: PUSH
16534: LD_INT 24
16536: PUSH
16537: LD_INT 1000
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: LIST
16552: PPUSH
16553: CALL_OW 69
16557: PUSH
16558: LD_INT 0
16560: EQUAL
16561: AND
16562: PUSH
16563: LD_VAR 0 2
16567: PUSH
16568: LD_INT 0
16570: GREATER
16571: AND
16572: IFFALSE 16671
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16574: LD_ADDR_VAR 0 4
16578: PUSH
16579: LD_INT 22
16581: PUSH
16582: LD_VAR 0 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 25
16593: PUSH
16594: LD_INT 2
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 69
16609: PUSH
16610: FOR_IN
16611: IFFALSE 16669
// begin AddComExitBuilding ( i ) ;
16613: LD_VAR 0 4
16617: PPUSH
16618: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16622: LD_VAR 0 4
16626: PPUSH
16627: LD_VAR 0 2
16631: PUSH
16632: LD_INT 1
16634: ARRAY
16635: PPUSH
16636: LD_VAR 0 2
16640: PUSH
16641: LD_INT 2
16643: ARRAY
16644: PPUSH
16645: LD_VAR 0 2
16649: PUSH
16650: LD_INT 3
16652: ARRAY
16653: PPUSH
16654: LD_VAR 0 2
16658: PUSH
16659: LD_INT 4
16661: ARRAY
16662: PPUSH
16663: CALL_OW 205
// end ;
16667: GO 16610
16669: POP
16670: POP
// end ; end ;
16671: LD_VAR 0 3
16675: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16676: LD_INT 0
16678: PPUSH
16679: PPUSH
16680: PPUSH
16681: PPUSH
16682: PPUSH
16683: PPUSH
16684: PPUSH
16685: PPUSH
16686: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16687: LD_ADDR_VAR 0 6
16691: PUSH
16692: LD_INT 22
16694: PUSH
16695: LD_VAR 0 1
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 25
16706: PUSH
16707: LD_INT 4
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 24
16716: PUSH
16717: LD_INT 251
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: PPUSH
16729: CALL_OW 69
16733: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
16734: LD_ADDR_VAR 0 7
16738: PUSH
16739: LD_VAR 0 3
16743: PPUSH
16744: LD_INT 22
16746: PUSH
16747: LD_VAR 0 1
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 25
16758: PUSH
16759: LD_INT 4
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 50
16768: PUSH
16769: EMPTY
16770: LIST
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: LIST
16776: PPUSH
16777: CALL_OW 70
16781: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
16782: LD_ADDR_VAR 0 10
16786: PUSH
16787: LD_VAR 0 3
16791: PPUSH
16792: LD_INT 22
16794: PUSH
16795: LD_VAR 0 1
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 21
16806: PUSH
16807: LD_INT 1
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 3
16816: PUSH
16817: LD_INT 25
16819: PUSH
16820: LD_INT 3
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 3
16833: PUSH
16834: LD_INT 24
16836: PUSH
16837: LD_INT 750
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: PPUSH
16854: CALL_OW 70
16858: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16859: LD_ADDR_VAR 0 11
16863: PUSH
16864: LD_VAR 0 2
16868: PPUSH
16869: LD_INT 22
16871: PUSH
16872: LD_VAR 0 1
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 25
16896: PUSH
16897: LD_INT 3
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 3
16910: PUSH
16911: LD_INT 24
16913: PUSH
16914: LD_INT 1000
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: PPUSH
16931: CALL_OW 70
16935: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
16936: LD_VAR 0 10
16940: NOT
16941: PUSH
16942: LD_VAR 0 7
16946: NOT
16947: AND
16948: PUSH
16949: LD_VAR 0 11
16953: NOT
16954: AND
16955: IFFALSE 16959
// exit ;
16957: GO 17219
// if damageUnits > 0 and sci_list > 0 then
16959: LD_VAR 0 10
16963: PUSH
16964: LD_INT 0
16966: GREATER
16967: PUSH
16968: LD_VAR 0 6
16972: PUSH
16973: LD_INT 0
16975: GREATER
16976: AND
16977: IFFALSE 17010
// for i in damageUnits do
16979: LD_ADDR_VAR 0 8
16983: PUSH
16984: LD_VAR 0 10
16988: PUSH
16989: FOR_IN
16990: IFFALSE 17008
// ComMoveToArea ( i , healArea ) ;
16992: LD_VAR 0 8
16996: PPUSH
16997: LD_VAR 0 2
17001: PPUSH
17002: CALL_OW 113
17006: GO 16989
17008: POP
17009: POP
// if unitsToHeal > 0 and sci_list > 0 then
17010: LD_VAR 0 11
17014: PUSH
17015: LD_INT 0
17017: GREATER
17018: PUSH
17019: LD_VAR 0 6
17023: PUSH
17024: LD_INT 0
17026: GREATER
17027: AND
17028: IFFALSE 17087
// begin for i in sci_list do
17030: LD_ADDR_VAR 0 8
17034: PUSH
17035: LD_VAR 0 6
17039: PUSH
17040: FOR_IN
17041: IFFALSE 17085
// begin ComExitBuilding ( i ) ;
17043: LD_VAR 0 8
17047: PPUSH
17048: CALL_OW 122
// for j in unitsToHeal do
17052: LD_ADDR_VAR 0 9
17056: PUSH
17057: LD_VAR 0 11
17061: PUSH
17062: FOR_IN
17063: IFFALSE 17081
// AddComHeal ( i , j ) ;
17065: LD_VAR 0 8
17069: PPUSH
17070: LD_VAR 0 9
17074: PPUSH
17075: CALL_OW 188
17079: GO 17062
17081: POP
17082: POP
// end ;
17083: GO 17040
17085: POP
17086: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17087: LD_VAR 0 10
17091: PUSH
17092: LD_INT 0
17094: EQUAL
17095: PUSH
17096: LD_VAR 0 11
17100: PUSH
17101: LD_INT 0
17103: EQUAL
17104: AND
17105: PUSH
17106: LD_VAR 0 7
17110: PUSH
17111: LD_INT 0
17113: GREATER
17114: AND
17115: IFFALSE 17219
// for i in sci_listOutside do
17117: LD_ADDR_VAR 0 8
17121: PUSH
17122: LD_VAR 0 7
17126: PUSH
17127: FOR_IN
17128: IFFALSE 17217
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17130: LD_ADDR_VAR 0 12
17134: PUSH
17135: LD_INT 22
17137: PUSH
17138: LD_VAR 0 1
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 21
17149: PUSH
17150: LD_INT 3
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 30
17159: PUSH
17160: LD_INT 8
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 69
17176: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17177: LD_ADDR_VAR 0 13
17181: PUSH
17182: LD_INT 1
17184: PPUSH
17185: LD_VAR 0 12
17189: PPUSH
17190: CALL_OW 12
17194: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17195: LD_VAR 0 8
17199: PPUSH
17200: LD_VAR 0 12
17204: PUSH
17205: LD_VAR 0 13
17209: ARRAY
17210: PPUSH
17211: CALL_OW 120
// end ;
17215: GO 17127
17217: POP
17218: POP
// end ;
17219: LD_VAR 0 5
17223: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17224: LD_INT 0
17226: PPUSH
17227: PPUSH
17228: PPUSH
17229: PPUSH
17230: PPUSH
17231: PPUSH
17232: PPUSH
17233: PPUSH
17234: PPUSH
17235: PPUSH
17236: PPUSH
// amChassisTab = [ ] ;
17237: LD_ADDR_VAR 0 19
17241: PUSH
17242: EMPTY
17243: ST_TO_ADDR
// arChassisTab = [ ] ;
17244: LD_ADDR_VAR 0 18
17248: PUSH
17249: EMPTY
17250: ST_TO_ADDR
// ruChassisTab = [ ] ;
17251: LD_ADDR_VAR 0 17
17255: PUSH
17256: EMPTY
17257: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17258: LD_INT 35
17260: PPUSH
17261: CALL_OW 67
// if nation = 1 then
17265: LD_VAR 0 5
17269: PUSH
17270: LD_INT 1
17272: EQUAL
17273: IFFALSE 17778
// begin uc_side = side ;
17275: LD_ADDR_OWVAR 20
17279: PUSH
17280: LD_VAR 0 2
17284: ST_TO_ADDR
// uc_nation = nation ;
17285: LD_ADDR_OWVAR 21
17289: PUSH
17290: LD_VAR 0 5
17294: ST_TO_ADDR
// vc_engine = vehengine ;
17295: LD_ADDR_OWVAR 39
17299: PUSH
17300: LD_VAR 0 6
17304: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17305: LD_ADDR_OWVAR 38
17309: PUSH
17310: LD_VAR 0 7
17314: PUSH
17315: LD_INT 1
17317: PPUSH
17318: LD_VAR 0 7
17322: PPUSH
17323: CALL_OW 12
17327: ARRAY
17328: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17329: LD_ADDR_OWVAR 40
17333: PUSH
17334: LD_VAR 0 10
17338: PUSH
17339: LD_INT 1
17341: PPUSH
17342: LD_VAR 0 10
17346: PPUSH
17347: CALL_OW 12
17351: ARRAY
17352: ST_TO_ADDR
// for j = 1 to AMWeapon do
17353: LD_ADDR_VAR 0 14
17357: PUSH
17358: DOUBLE
17359: LD_INT 1
17361: DEC
17362: ST_TO_ADDR
17363: LD_VAR 0 10
17367: PUSH
17368: FOR_TO
17369: IFFALSE 17670
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17371: LD_VAR 0 10
17375: PUSH
17376: LD_VAR 0 14
17380: ARRAY
17381: PUSH
17382: LD_INT 2
17384: EQUAL
17385: PUSH
17386: LD_VAR 0 10
17390: PUSH
17391: LD_VAR 0 14
17395: ARRAY
17396: PUSH
17397: LD_INT 3
17399: EQUAL
17400: OR
17401: IFFALSE 17454
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17403: LD_ADDR_VAR 0 19
17407: PUSH
17408: LD_INT 1
17410: PUSH
17411: LD_INT 2
17413: PUSH
17414: LD_INT 3
17416: PUSH
17417: LD_INT 4
17419: PUSH
17420: LD_INT 5
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17430: LD_ADDR_OWVAR 37
17434: PUSH
17435: LD_VAR 0 19
17439: PUSH
17440: LD_INT 1
17442: PPUSH
17443: LD_VAR 0 19
17447: PPUSH
17448: CALL_OW 12
17452: ARRAY
17453: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17454: LD_VAR 0 10
17458: PUSH
17459: LD_VAR 0 14
17463: ARRAY
17464: PUSH
17465: LD_INT 4
17467: EQUAL
17468: PUSH
17469: LD_VAR 0 10
17473: PUSH
17474: LD_VAR 0 14
17478: ARRAY
17479: PUSH
17480: LD_INT 5
17482: EQUAL
17483: OR
17484: PUSH
17485: LD_VAR 0 10
17489: PUSH
17490: LD_VAR 0 14
17494: ARRAY
17495: PUSH
17496: LD_INT 9
17498: EQUAL
17499: OR
17500: PUSH
17501: LD_VAR 0 10
17505: PUSH
17506: LD_VAR 0 14
17510: ARRAY
17511: PUSH
17512: LD_INT 11
17514: EQUAL
17515: OR
17516: PUSH
17517: LD_VAR 0 10
17521: PUSH
17522: LD_VAR 0 14
17526: ARRAY
17527: PUSH
17528: LD_INT 7
17530: EQUAL
17531: OR
17532: IFFALSE 17581
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17534: LD_ADDR_VAR 0 19
17538: PUSH
17539: LD_INT 2
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: LD_INT 4
17547: PUSH
17548: LD_INT 5
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17557: LD_ADDR_OWVAR 37
17561: PUSH
17562: LD_VAR 0 19
17566: PUSH
17567: LD_INT 1
17569: PPUSH
17570: LD_VAR 0 19
17574: PPUSH
17575: CALL_OW 12
17579: ARRAY
17580: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17581: LD_VAR 0 10
17585: PUSH
17586: LD_VAR 0 14
17590: ARRAY
17591: PUSH
17592: LD_INT 8
17594: EQUAL
17595: PUSH
17596: LD_VAR 0 10
17600: PUSH
17601: LD_VAR 0 14
17605: ARRAY
17606: PUSH
17607: LD_INT 6
17609: EQUAL
17610: OR
17611: PUSH
17612: LD_VAR 0 10
17616: PUSH
17617: LD_VAR 0 14
17621: ARRAY
17622: PUSH
17623: LD_INT 10
17625: EQUAL
17626: OR
17627: IFFALSE 17668
// begin amChassisTab = [ 4 , 5 ] ;
17629: LD_ADDR_VAR 0 19
17633: PUSH
17634: LD_INT 4
17636: PUSH
17637: LD_INT 5
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17644: LD_ADDR_OWVAR 37
17648: PUSH
17649: LD_VAR 0 19
17653: PUSH
17654: LD_INT 1
17656: PPUSH
17657: LD_VAR 0 19
17661: PPUSH
17662: CALL_OW 12
17666: ARRAY
17667: ST_TO_ADDR
// end ; end ;
17668: GO 17368
17670: POP
17671: POP
// veh = CreateVehicle ;
17672: LD_ADDR_VAR 0 16
17676: PUSH
17677: CALL_OW 45
17681: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17682: LD_VAR 0 16
17686: PPUSH
17687: LD_VAR 0 1
17691: PPUSH
17692: LD_INT 0
17694: PPUSH
17695: CALL_OW 49
// if vc_control = 1 then
17699: LD_OWVAR 38
17703: PUSH
17704: LD_INT 1
17706: EQUAL
17707: IFFALSE 17764
// begin hc_gallery =  ;
17709: LD_ADDR_OWVAR 33
17713: PUSH
17714: LD_STRING 
17716: ST_TO_ADDR
// hc_name =  ;
17717: LD_ADDR_OWVAR 26
17721: PUSH
17722: LD_STRING 
17724: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17725: LD_INT 0
17727: PPUSH
17728: LD_INT 3
17730: PPUSH
17731: LD_VAR 0 4
17735: PPUSH
17736: CALL_OW 380
// un = CreateHuman ;
17740: LD_ADDR_VAR 0 15
17744: PUSH
17745: CALL_OW 44
17749: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17750: LD_VAR 0 15
17754: PPUSH
17755: LD_VAR 0 16
17759: PPUSH
17760: CALL_OW 52
// end ; i = i + 1 ;
17764: LD_ADDR_VAR 0 13
17768: PUSH
17769: LD_VAR 0 13
17773: PUSH
17774: LD_INT 1
17776: PLUS
17777: ST_TO_ADDR
// end ; if nation = 2 then
17778: LD_VAR 0 5
17782: PUSH
17783: LD_INT 2
17785: EQUAL
17786: IFFALSE 18208
// begin uc_side = side ;
17788: LD_ADDR_OWVAR 20
17792: PUSH
17793: LD_VAR 0 2
17797: ST_TO_ADDR
// uc_nation = nation ;
17798: LD_ADDR_OWVAR 21
17802: PUSH
17803: LD_VAR 0 5
17807: ST_TO_ADDR
// vc_engine = vehengine ;
17808: LD_ADDR_OWVAR 39
17812: PUSH
17813: LD_VAR 0 6
17817: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17818: LD_ADDR_OWVAR 38
17822: PUSH
17823: LD_VAR 0 7
17827: PUSH
17828: LD_INT 1
17830: PPUSH
17831: LD_VAR 0 7
17835: PPUSH
17836: CALL_OW 12
17840: ARRAY
17841: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
17842: LD_ADDR_OWVAR 40
17846: PUSH
17847: LD_VAR 0 9
17851: PUSH
17852: LD_INT 1
17854: PPUSH
17855: LD_VAR 0 9
17859: PPUSH
17860: CALL_OW 12
17864: ARRAY
17865: ST_TO_ADDR
// for j = 1 to ARWeapons do
17866: LD_ADDR_VAR 0 14
17870: PUSH
17871: DOUBLE
17872: LD_INT 1
17874: DEC
17875: ST_TO_ADDR
17876: LD_VAR 0 9
17880: PUSH
17881: FOR_TO
17882: IFFALSE 18100
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
17884: LD_VAR 0 9
17888: PUSH
17889: LD_VAR 0 14
17893: ARRAY
17894: PUSH
17895: LD_INT 24
17897: EQUAL
17898: PUSH
17899: LD_VAR 0 9
17903: PUSH
17904: LD_VAR 0 14
17908: ARRAY
17909: PUSH
17910: LD_INT 22
17912: EQUAL
17913: OR
17914: PUSH
17915: LD_VAR 0 9
17919: PUSH
17920: LD_VAR 0 14
17924: ARRAY
17925: PUSH
17926: LD_INT 23
17928: EQUAL
17929: OR
17930: PUSH
17931: LD_VAR 0 9
17935: PUSH
17936: LD_VAR 0 14
17940: ARRAY
17941: PUSH
17942: LD_INT 30
17944: EQUAL
17945: OR
17946: IFFALSE 17983
// begin arChassisTab = [ 14 ] ;
17948: LD_ADDR_VAR 0 18
17952: PUSH
17953: LD_INT 14
17955: PUSH
17956: EMPTY
17957: LIST
17958: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17959: LD_ADDR_OWVAR 37
17963: PUSH
17964: LD_VAR 0 18
17968: PUSH
17969: LD_INT 1
17971: PPUSH
17972: LD_VAR 0 18
17976: PPUSH
17977: CALL_OW 12
17981: ARRAY
17982: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
17983: LD_VAR 0 9
17987: PUSH
17988: LD_VAR 0 14
17992: ARRAY
17993: PUSH
17994: LD_INT 29
17996: EQUAL
17997: PUSH
17998: LD_VAR 0 9
18002: PUSH
18003: LD_VAR 0 14
18007: ARRAY
18008: PUSH
18009: LD_INT 28
18011: EQUAL
18012: OR
18013: PUSH
18014: LD_VAR 0 9
18018: PUSH
18019: LD_VAR 0 14
18023: ARRAY
18024: PUSH
18025: LD_INT 27
18027: EQUAL
18028: OR
18029: PUSH
18030: LD_VAR 0 9
18034: PUSH
18035: LD_VAR 0 14
18039: ARRAY
18040: PUSH
18041: LD_INT 26
18043: EQUAL
18044: OR
18045: PUSH
18046: LD_VAR 0 9
18050: PUSH
18051: LD_VAR 0 14
18055: ARRAY
18056: PUSH
18057: LD_INT 25
18059: EQUAL
18060: OR
18061: IFFALSE 18098
// begin arChassisTab = [ 14 ] ;
18063: LD_ADDR_VAR 0 18
18067: PUSH
18068: LD_INT 14
18070: PUSH
18071: EMPTY
18072: LIST
18073: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18074: LD_ADDR_OWVAR 37
18078: PUSH
18079: LD_VAR 0 18
18083: PUSH
18084: LD_INT 1
18086: PPUSH
18087: LD_VAR 0 18
18091: PPUSH
18092: CALL_OW 12
18096: ARRAY
18097: ST_TO_ADDR
// end ; end ;
18098: GO 17881
18100: POP
18101: POP
// veh = CreateVehicle ;
18102: LD_ADDR_VAR 0 16
18106: PUSH
18107: CALL_OW 45
18111: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18112: LD_VAR 0 16
18116: PPUSH
18117: LD_VAR 0 1
18121: PPUSH
18122: LD_INT 0
18124: PPUSH
18125: CALL_OW 49
// if vc_control = 1 then
18129: LD_OWVAR 38
18133: PUSH
18134: LD_INT 1
18136: EQUAL
18137: IFFALSE 18194
// begin hc_gallery =  ;
18139: LD_ADDR_OWVAR 33
18143: PUSH
18144: LD_STRING 
18146: ST_TO_ADDR
// hc_name =  ;
18147: LD_ADDR_OWVAR 26
18151: PUSH
18152: LD_STRING 
18154: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18155: LD_INT 0
18157: PPUSH
18158: LD_INT 3
18160: PPUSH
18161: LD_VAR 0 4
18165: PPUSH
18166: CALL_OW 380
// un = CreateHuman ;
18170: LD_ADDR_VAR 0 15
18174: PUSH
18175: CALL_OW 44
18179: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18180: LD_VAR 0 15
18184: PPUSH
18185: LD_VAR 0 16
18189: PPUSH
18190: CALL_OW 52
// end ; i = i + 1 ;
18194: LD_ADDR_VAR 0 13
18198: PUSH
18199: LD_VAR 0 13
18203: PUSH
18204: LD_INT 1
18206: PLUS
18207: ST_TO_ADDR
// end ; if nation = 3 then
18208: LD_VAR 0 5
18212: PUSH
18213: LD_INT 3
18215: EQUAL
18216: IFFALSE 18622
// begin uc_side = side ;
18218: LD_ADDR_OWVAR 20
18222: PUSH
18223: LD_VAR 0 2
18227: ST_TO_ADDR
// uc_nation = nation ;
18228: LD_ADDR_OWVAR 21
18232: PUSH
18233: LD_VAR 0 5
18237: ST_TO_ADDR
// vc_engine = vehengine ;
18238: LD_ADDR_OWVAR 39
18242: PUSH
18243: LD_VAR 0 6
18247: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18248: LD_ADDR_OWVAR 38
18252: PUSH
18253: LD_VAR 0 7
18257: PUSH
18258: LD_INT 1
18260: PPUSH
18261: LD_VAR 0 7
18265: PPUSH
18266: CALL_OW 12
18270: ARRAY
18271: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18272: LD_ADDR_OWVAR 40
18276: PUSH
18277: LD_VAR 0 8
18281: PUSH
18282: LD_INT 1
18284: PPUSH
18285: LD_VAR 0 8
18289: PPUSH
18290: CALL_OW 12
18294: ARRAY
18295: ST_TO_ADDR
// for j = 1 to RuWeapons do
18296: LD_ADDR_VAR 0 14
18300: PUSH
18301: DOUBLE
18302: LD_INT 1
18304: DEC
18305: ST_TO_ADDR
18306: LD_VAR 0 8
18310: PUSH
18311: FOR_TO
18312: IFFALSE 18514
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18314: LD_VAR 0 8
18318: PUSH
18319: LD_VAR 0 14
18323: ARRAY
18324: PUSH
18325: LD_INT 42
18327: EQUAL
18328: PUSH
18329: LD_VAR 0 8
18333: PUSH
18334: LD_VAR 0 14
18338: ARRAY
18339: PUSH
18340: LD_INT 43
18342: EQUAL
18343: OR
18344: PUSH
18345: LD_VAR 0 8
18349: PUSH
18350: LD_VAR 0 14
18354: ARRAY
18355: PUSH
18356: LD_INT 44
18358: EQUAL
18359: OR
18360: PUSH
18361: LD_VAR 0 8
18365: PUSH
18366: LD_VAR 0 14
18370: ARRAY
18371: PUSH
18372: LD_INT 45
18374: EQUAL
18375: OR
18376: PUSH
18377: LD_VAR 0 8
18381: PUSH
18382: LD_VAR 0 14
18386: ARRAY
18387: PUSH
18388: LD_INT 49
18390: EQUAL
18391: OR
18392: IFFALSE 18441
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18394: LD_ADDR_VAR 0 17
18398: PUSH
18399: LD_INT 21
18401: PUSH
18402: LD_INT 22
18404: PUSH
18405: LD_INT 23
18407: PUSH
18408: LD_INT 24
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18417: LD_ADDR_OWVAR 37
18421: PUSH
18422: LD_VAR 0 17
18426: PUSH
18427: LD_INT 1
18429: PPUSH
18430: LD_VAR 0 17
18434: PPUSH
18435: CALL_OW 12
18439: ARRAY
18440: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18441: LD_VAR 0 8
18445: PUSH
18446: LD_VAR 0 14
18450: ARRAY
18451: PUSH
18452: LD_INT 46
18454: EQUAL
18455: PUSH
18456: LD_VAR 0 8
18460: PUSH
18461: LD_VAR 0 14
18465: ARRAY
18466: PUSH
18467: LD_INT 47
18469: EQUAL
18470: OR
18471: IFFALSE 18512
// begin ruChassisTab = [ 23 , 24 ] ;
18473: LD_ADDR_VAR 0 17
18477: PUSH
18478: LD_INT 23
18480: PUSH
18481: LD_INT 24
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18488: LD_ADDR_OWVAR 37
18492: PUSH
18493: LD_VAR 0 17
18497: PUSH
18498: LD_INT 1
18500: PPUSH
18501: LD_VAR 0 17
18505: PPUSH
18506: CALL_OW 12
18510: ARRAY
18511: ST_TO_ADDR
// end ; end ;
18512: GO 18311
18514: POP
18515: POP
// veh = CreateVehicle ;
18516: LD_ADDR_VAR 0 16
18520: PUSH
18521: CALL_OW 45
18525: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18526: LD_VAR 0 16
18530: PPUSH
18531: LD_VAR 0 1
18535: PPUSH
18536: LD_INT 0
18538: PPUSH
18539: CALL_OW 49
// if vc_control = 1 then
18543: LD_OWVAR 38
18547: PUSH
18548: LD_INT 1
18550: EQUAL
18551: IFFALSE 18608
// begin hc_gallery =  ;
18553: LD_ADDR_OWVAR 33
18557: PUSH
18558: LD_STRING 
18560: ST_TO_ADDR
// hc_name =  ;
18561: LD_ADDR_OWVAR 26
18565: PUSH
18566: LD_STRING 
18568: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18569: LD_INT 0
18571: PPUSH
18572: LD_INT 3
18574: PPUSH
18575: LD_VAR 0 4
18579: PPUSH
18580: CALL_OW 380
// un = CreateHuman ;
18584: LD_ADDR_VAR 0 15
18588: PUSH
18589: CALL_OW 44
18593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18594: LD_VAR 0 15
18598: PPUSH
18599: LD_VAR 0 16
18603: PPUSH
18604: CALL_OW 52
// end ; i = i + 1 ;
18608: LD_ADDR_VAR 0 13
18612: PUSH
18613: LD_VAR 0 13
18617: PUSH
18618: LD_INT 1
18620: PLUS
18621: ST_TO_ADDR
// end ; until i = vehCount ;
18622: LD_VAR 0 13
18626: PUSH
18627: LD_VAR 0 3
18631: EQUAL
18632: IFFALSE 17258
// repeat wait ( 0 0$1 ) ;
18634: LD_INT 35
18636: PPUSH
18637: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18641: LD_ADDR_VAR 0 20
18645: PUSH
18646: LD_INT 22
18648: PUSH
18649: LD_VAR 0 2
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 21
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 24
18670: PUSH
18671: LD_INT 650
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: PPUSH
18683: CALL_OW 69
18687: ST_TO_ADDR
// if vehicleOK_list > 0 then
18688: LD_VAR 0 20
18692: PUSH
18693: LD_INT 0
18695: GREATER
18696: IFFALSE 18887
// begin for i in vehicleOK_list do
18698: LD_ADDR_VAR 0 13
18702: PUSH
18703: LD_VAR 0 20
18707: PUSH
18708: FOR_IN
18709: IFFALSE 18885
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18711: LD_ADDR_VAR 0 21
18715: PUSH
18716: LD_INT 22
18718: PUSH
18719: LD_VAR 0 11
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PPUSH
18728: CALL_OW 69
18732: PPUSH
18733: LD_VAR 0 13
18737: PPUSH
18738: CALL_OW 74
18742: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18743: LD_ADDR_VAR 0 22
18747: PUSH
18748: LD_INT 22
18750: PUSH
18751: LD_VAR 0 11
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: LD_INT 59
18765: PUSH
18766: EMPTY
18767: LIST
18768: PUSH
18769: LD_INT 21
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 21
18781: PUSH
18782: LD_INT 2
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: PPUSH
18802: CALL_OW 69
18806: PPUSH
18807: LD_VAR 0 13
18811: PPUSH
18812: CALL_OW 74
18816: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18817: LD_VAR 0 13
18821: PPUSH
18822: LD_VAR 0 21
18826: PPUSH
18827: CALL_OW 296
18831: PUSH
18832: LD_INT 8
18834: PLUS
18835: PUSH
18836: LD_VAR 0 13
18840: PPUSH
18841: LD_VAR 0 22
18845: PPUSH
18846: CALL_OW 296
18850: LESS
18851: IFFALSE 18869
// begin ComAttackUnit ( i , target1 ) ;
18853: LD_VAR 0 13
18857: PPUSH
18858: LD_VAR 0 21
18862: PPUSH
18863: CALL_OW 115
// end else
18867: GO 18883
// begin ComAttackUnit ( i , target2 ) ;
18869: LD_VAR 0 13
18873: PPUSH
18874: LD_VAR 0 22
18878: PPUSH
18879: CALL_OW 115
// end ; end ;
18883: GO 18708
18885: POP
18886: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
18887: LD_INT 22
18889: PUSH
18890: LD_VAR 0 2
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 21
18901: PUSH
18902: LD_INT 2
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PPUSH
18913: CALL_OW 69
18917: PUSH
18918: LD_INT 0
18920: EQUAL
18921: IFFALSE 18634
// end ;
18923: LD_VAR 0 12
18927: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
18928: LD_INT 0
18930: PPUSH
18931: PPUSH
18932: PPUSH
18933: PPUSH
18934: PPUSH
18935: PPUSH
18936: PPUSH
18937: PPUSH
18938: PPUSH
18939: PPUSH
18940: PPUSH
// for i = 1 to soldierCount do
18941: LD_ADDR_VAR 0 13
18945: PUSH
18946: DOUBLE
18947: LD_INT 1
18949: DEC
18950: ST_TO_ADDR
18951: LD_VAR 0 3
18955: PUSH
18956: FOR_TO
18957: IFFALSE 19039
// begin uc_side = side ;
18959: LD_ADDR_OWVAR 20
18963: PUSH
18964: LD_VAR 0 1
18968: ST_TO_ADDR
// uc_nation = nation ;
18969: LD_ADDR_OWVAR 21
18973: PUSH
18974: LD_VAR 0 2
18978: ST_TO_ADDR
// hc_name =  ;
18979: LD_ADDR_OWVAR 26
18983: PUSH
18984: LD_STRING 
18986: ST_TO_ADDR
// hc_gallery =  ;
18987: LD_ADDR_OWVAR 33
18991: PUSH
18992: LD_STRING 
18994: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
18995: LD_INT 0
18997: PPUSH
18998: LD_INT 1
19000: PPUSH
19001: LD_VAR 0 8
19005: PPUSH
19006: CALL_OW 380
// un = CreateHuman ;
19010: LD_ADDR_VAR 0 15
19014: PUSH
19015: CALL_OW 44
19019: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19020: LD_VAR 0 15
19024: PPUSH
19025: LD_VAR 0 9
19029: PPUSH
19030: LD_INT 0
19032: PPUSH
19033: CALL_OW 49
// end ;
19037: GO 18956
19039: POP
19040: POP
// for i = 1 to sniperCount do
19041: LD_ADDR_VAR 0 13
19045: PUSH
19046: DOUBLE
19047: LD_INT 1
19049: DEC
19050: ST_TO_ADDR
19051: LD_VAR 0 4
19055: PUSH
19056: FOR_TO
19057: IFFALSE 19139
// begin uc_side = side ;
19059: LD_ADDR_OWVAR 20
19063: PUSH
19064: LD_VAR 0 1
19068: ST_TO_ADDR
// uc_nation = nation ;
19069: LD_ADDR_OWVAR 21
19073: PUSH
19074: LD_VAR 0 2
19078: ST_TO_ADDR
// hc_name =  ;
19079: LD_ADDR_OWVAR 26
19083: PUSH
19084: LD_STRING 
19086: ST_TO_ADDR
// hc_gallery =  ;
19087: LD_ADDR_OWVAR 33
19091: PUSH
19092: LD_STRING 
19094: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19095: LD_INT 0
19097: PPUSH
19098: LD_INT 5
19100: PPUSH
19101: LD_VAR 0 8
19105: PPUSH
19106: CALL_OW 380
// un = CreateHuman ;
19110: LD_ADDR_VAR 0 15
19114: PUSH
19115: CALL_OW 44
19119: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19120: LD_VAR 0 15
19124: PPUSH
19125: LD_VAR 0 9
19129: PPUSH
19130: LD_INT 0
19132: PPUSH
19133: CALL_OW 49
// end ;
19137: GO 19056
19139: POP
19140: POP
// for i = 1 to bazookCount do
19141: LD_ADDR_VAR 0 13
19145: PUSH
19146: DOUBLE
19147: LD_INT 1
19149: DEC
19150: ST_TO_ADDR
19151: LD_VAR 0 5
19155: PUSH
19156: FOR_TO
19157: IFFALSE 19239
// begin uc_side = side ;
19159: LD_ADDR_OWVAR 20
19163: PUSH
19164: LD_VAR 0 1
19168: ST_TO_ADDR
// uc_nation = nation ;
19169: LD_ADDR_OWVAR 21
19173: PUSH
19174: LD_VAR 0 2
19178: ST_TO_ADDR
// hc_name =  ;
19179: LD_ADDR_OWVAR 26
19183: PUSH
19184: LD_STRING 
19186: ST_TO_ADDR
// hc_gallery =  ;
19187: LD_ADDR_OWVAR 33
19191: PUSH
19192: LD_STRING 
19194: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19195: LD_INT 0
19197: PPUSH
19198: LD_INT 9
19200: PPUSH
19201: LD_VAR 0 8
19205: PPUSH
19206: CALL_OW 380
// un = CreateHuman ;
19210: LD_ADDR_VAR 0 15
19214: PUSH
19215: CALL_OW 44
19219: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19220: LD_VAR 0 15
19224: PPUSH
19225: LD_VAR 0 9
19229: PPUSH
19230: LD_INT 0
19232: PPUSH
19233: CALL_OW 49
// end ;
19237: GO 19156
19239: POP
19240: POP
// for i = 1 to mortalCount do
19241: LD_ADDR_VAR 0 13
19245: PUSH
19246: DOUBLE
19247: LD_INT 1
19249: DEC
19250: ST_TO_ADDR
19251: LD_VAR 0 6
19255: PUSH
19256: FOR_TO
19257: IFFALSE 19339
// begin uc_side = side ;
19259: LD_ADDR_OWVAR 20
19263: PUSH
19264: LD_VAR 0 1
19268: ST_TO_ADDR
// uc_nation = nation ;
19269: LD_ADDR_OWVAR 21
19273: PUSH
19274: LD_VAR 0 2
19278: ST_TO_ADDR
// hc_name =  ;
19279: LD_ADDR_OWVAR 26
19283: PUSH
19284: LD_STRING 
19286: ST_TO_ADDR
// hc_gallery =  ;
19287: LD_ADDR_OWVAR 33
19291: PUSH
19292: LD_STRING 
19294: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19295: LD_INT 0
19297: PPUSH
19298: LD_INT 8
19300: PPUSH
19301: LD_VAR 0 8
19305: PPUSH
19306: CALL_OW 380
// un = CreateHuman ;
19310: LD_ADDR_VAR 0 15
19314: PUSH
19315: CALL_OW 44
19319: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19320: LD_VAR 0 15
19324: PPUSH
19325: LD_VAR 0 9
19329: PPUSH
19330: LD_INT 0
19332: PPUSH
19333: CALL_OW 49
// end ;
19337: GO 19256
19339: POP
19340: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19341: LD_ADDR_VAR 0 18
19345: PUSH
19346: LD_INT 22
19348: PUSH
19349: LD_VAR 0 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: LD_INT 25
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 25
19373: PUSH
19374: LD_INT 5
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 25
19383: PUSH
19384: LD_INT 8
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 25
19393: PUSH
19394: LD_INT 9
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PPUSH
19412: CALL_OW 69
19416: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19417: LD_ADDR_VAR 0 17
19421: PUSH
19422: LD_INT 22
19424: PUSH
19425: LD_VAR 0 1
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 25
19436: PUSH
19437: LD_INT 4
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PPUSH
19448: CALL_OW 69
19452: ST_TO_ADDR
// for i in medic_list do
19453: LD_ADDR_VAR 0 13
19457: PUSH
19458: LD_VAR 0 17
19462: PUSH
19463: FOR_IN
19464: IFFALSE 19482
// ComMoveToArea ( i , healArea ) ;
19466: LD_VAR 0 13
19470: PPUSH
19471: LD_VAR 0 10
19475: PPUSH
19476: CALL_OW 113
19480: GO 19463
19482: POP
19483: POP
// repeat wait ( 0 0$1 ) ;
19484: LD_INT 35
19486: PPUSH
19487: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19491: LD_ADDR_VAR 0 16
19495: PUSH
19496: LD_INT 22
19498: PUSH
19499: LD_VAR 0 1
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: LD_INT 3
19513: PUSH
19514: LD_INT 24
19516: PUSH
19517: LD_INT 550
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 24
19530: PUSH
19531: LD_INT 250
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PPUSH
19547: CALL_OW 69
19551: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19552: LD_ADDR_VAR 0 18
19556: PUSH
19557: LD_INT 22
19559: PUSH
19560: LD_VAR 0 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 2
19571: PUSH
19572: LD_INT 25
19574: PUSH
19575: LD_INT 1
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 25
19584: PUSH
19585: LD_INT 5
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 25
19594: PUSH
19595: LD_INT 8
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 25
19604: PUSH
19605: LD_INT 9
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 24
19621: PUSH
19622: LD_INT 1000
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: PPUSH
19634: CALL_OW 69
19638: ST_TO_ADDR
// if medicCount > 0 then
19639: LD_VAR 0 7
19643: PUSH
19644: LD_INT 0
19646: GREATER
19647: IFFALSE 19721
// begin if damageUnit_list > 0 then
19649: LD_VAR 0 16
19653: PUSH
19654: LD_INT 0
19656: GREATER
19657: IFFALSE 19721
// begin for i in damageUnit_list do
19659: LD_ADDR_VAR 0 13
19663: PUSH
19664: LD_VAR 0 16
19668: PUSH
19669: FOR_IN
19670: IFFALSE 19719
// begin ComMoveToArea ( i , healArea ) ;
19672: LD_VAR 0 13
19676: PPUSH
19677: LD_VAR 0 10
19681: PPUSH
19682: CALL_OW 113
// for j in medic_list do
19686: LD_ADDR_VAR 0 14
19690: PUSH
19691: LD_VAR 0 17
19695: PUSH
19696: FOR_IN
19697: IFFALSE 19715
// AddComHeal ( j , i ) ;
19699: LD_VAR 0 14
19703: PPUSH
19704: LD_VAR 0 13
19708: PPUSH
19709: CALL_OW 188
19713: GO 19696
19715: POP
19716: POP
// end ;
19717: GO 19669
19719: POP
19720: POP
// end ; end ; for i in soldiersOK_list do
19721: LD_ADDR_VAR 0 13
19725: PUSH
19726: LD_VAR 0 18
19730: PUSH
19731: FOR_IN
19732: IFFALSE 19908
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19734: LD_ADDR_VAR 0 21
19738: PUSH
19739: LD_INT 22
19741: PUSH
19742: LD_VAR 0 11
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PPUSH
19751: CALL_OW 69
19755: PPUSH
19756: LD_VAR 0 13
19760: PPUSH
19761: CALL_OW 74
19765: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19766: LD_ADDR_VAR 0 22
19770: PUSH
19771: LD_INT 22
19773: PUSH
19774: LD_VAR 0 11
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: LD_INT 59
19788: PUSH
19789: EMPTY
19790: LIST
19791: PUSH
19792: LD_INT 21
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 21
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: EMPTY
19823: LIST
19824: PPUSH
19825: CALL_OW 69
19829: PPUSH
19830: LD_VAR 0 13
19834: PPUSH
19835: CALL_OW 74
19839: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19840: LD_VAR 0 13
19844: PPUSH
19845: LD_VAR 0 21
19849: PPUSH
19850: CALL_OW 296
19854: PUSH
19855: LD_INT 8
19857: PLUS
19858: PUSH
19859: LD_VAR 0 13
19863: PPUSH
19864: LD_VAR 0 22
19868: PPUSH
19869: CALL_OW 296
19873: LESS
19874: IFFALSE 19892
// begin ComAttackUnit ( i , target1 ) ;
19876: LD_VAR 0 13
19880: PPUSH
19881: LD_VAR 0 21
19885: PPUSH
19886: CALL_OW 115
// end else
19890: GO 19906
// begin ComAttackUnit ( i , target2 ) ;
19892: LD_VAR 0 13
19896: PPUSH
19897: LD_VAR 0 22
19901: PPUSH
19902: CALL_OW 115
// end ; end ;
19906: GO 19731
19908: POP
19909: POP
// for i in soldiersOK_list do
19910: LD_ADDR_VAR 0 13
19914: PUSH
19915: LD_VAR 0 18
19919: PUSH
19920: FOR_IN
19921: IFFALSE 20097
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19923: LD_ADDR_VAR 0 21
19927: PUSH
19928: LD_INT 22
19930: PUSH
19931: LD_VAR 0 11
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PPUSH
19940: CALL_OW 69
19944: PPUSH
19945: LD_VAR 0 13
19949: PPUSH
19950: CALL_OW 74
19954: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19955: LD_ADDR_VAR 0 22
19959: PUSH
19960: LD_INT 22
19962: PUSH
19963: LD_VAR 0 11
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 2
19974: PUSH
19975: LD_INT 59
19977: PUSH
19978: EMPTY
19979: LIST
19980: PUSH
19981: LD_INT 21
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 21
19993: PUSH
19994: LD_INT 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: EMPTY
20012: LIST
20013: PPUSH
20014: CALL_OW 69
20018: PPUSH
20019: LD_VAR 0 13
20023: PPUSH
20024: CALL_OW 74
20028: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20029: LD_VAR 0 13
20033: PPUSH
20034: LD_VAR 0 21
20038: PPUSH
20039: CALL_OW 296
20043: PUSH
20044: LD_INT 8
20046: PLUS
20047: PUSH
20048: LD_VAR 0 13
20052: PPUSH
20053: LD_VAR 0 22
20057: PPUSH
20058: CALL_OW 296
20062: LESS
20063: IFFALSE 20081
// begin ComAttackUnit ( i , target1 ) ;
20065: LD_VAR 0 13
20069: PPUSH
20070: LD_VAR 0 21
20074: PPUSH
20075: CALL_OW 115
// end else
20079: GO 20095
// begin ComAttackUnit ( i , target2 ) ;
20081: LD_VAR 0 13
20085: PPUSH
20086: LD_VAR 0 22
20090: PPUSH
20091: CALL_OW 115
// end ; end ;
20095: GO 19920
20097: POP
20098: POP
// until soldiersOK_list = [ ] ;
20099: LD_VAR 0 18
20103: PUSH
20104: EMPTY
20105: EQUAL
20106: IFFALSE 19484
// end ;
20108: LD_VAR 0 12
20112: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20113: LD_INT 0
20115: PPUSH
20116: PPUSH
20117: PPUSH
20118: PPUSH
20119: PPUSH
20120: PPUSH
20121: PPUSH
// repeat wait ( 0 0$1 ) ;
20122: LD_INT 35
20124: PPUSH
20125: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20129: LD_ADDR_VAR 0 7
20133: PUSH
20134: LD_INT 22
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 25
20146: PUSH
20147: LD_INT 4
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 3
20156: PUSH
20157: LD_INT 60
20159: PUSH
20160: EMPTY
20161: LIST
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: PPUSH
20172: CALL_OW 69
20176: ST_TO_ADDR
// if not tmp then
20177: LD_VAR 0 7
20181: NOT
20182: IFFALSE 20186
// continue ;
20184: GO 20122
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20186: LD_ADDR_VAR 0 3
20190: PUSH
20191: LD_INT 5
20193: PPUSH
20194: LD_INT 22
20196: PUSH
20197: LD_INT 0
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 25
20206: PUSH
20207: LD_INT 12
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PPUSH
20218: CALL_OW 70
20222: PUSH
20223: FOR_IN
20224: IFFALSE 20257
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20226: LD_VAR 0 7
20230: PPUSH
20231: LD_VAR 0 3
20235: PPUSH
20236: CALL_OW 250
20240: PPUSH
20241: LD_VAR 0 3
20245: PPUSH
20246: CALL_OW 251
20250: PPUSH
20251: CALL_OW 131
20255: GO 20223
20257: POP
20258: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20259: LD_INT 22
20261: PUSH
20262: LD_INT 2
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 25
20271: PUSH
20272: LD_INT 4
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PPUSH
20283: CALL_OW 69
20287: PUSH
20288: LD_INT 0
20290: EQUAL
20291: PUSH
20292: LD_INT 5
20294: PPUSH
20295: LD_INT 22
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 25
20307: PUSH
20308: LD_INT 12
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PPUSH
20319: CALL_OW 70
20323: PUSH
20324: LD_INT 2
20326: LESS
20327: OR
20328: PUSH
20329: LD_OWVAR 1
20333: PUSH
20334: LD_INT 7000
20336: GREATEREQUAL
20337: OR
20338: IFFALSE 20122
// repeat wait ( 0 0$1 ) ;
20340: LD_INT 35
20342: PPUSH
20343: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20347: LD_ADDR_VAR 0 5
20351: PUSH
20352: LD_INT 22
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 30
20364: PUSH
20365: LD_INT 5
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PPUSH
20376: CALL_OW 69
20380: ST_TO_ADDR
// until arm ;
20381: LD_VAR 0 5
20385: IFFALSE 20340
// wait ( 0 0$25 ) ;
20387: LD_INT 875
20389: PPUSH
20390: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20394: LD_ADDR_VAR 0 6
20398: PUSH
20399: LD_INT 22
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: LD_INT 30
20414: PUSH
20415: LD_INT 0
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 30
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: LIST
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PPUSH
20441: CALL_OW 69
20445: ST_TO_ADDR
// j := 0 ;
20446: LD_ADDR_VAR 0 3
20450: PUSH
20451: LD_INT 0
20453: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20454: LD_ADDR_VAR 0 2
20458: PUSH
20459: LD_INT 22
20461: PUSH
20462: LD_INT 2
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 25
20471: PUSH
20472: LD_INT 12
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PPUSH
20483: CALL_OW 69
20487: PUSH
20488: FOR_IN
20489: IFFALSE 20576
// begin ComMoveXY ( i , 63 , 16 ) ;
20491: LD_VAR 0 2
20495: PPUSH
20496: LD_INT 63
20498: PPUSH
20499: LD_INT 16
20501: PPUSH
20502: CALL_OW 111
// j := j + 1 ;
20506: LD_ADDR_VAR 0 3
20510: PUSH
20511: LD_VAR 0 3
20515: PUSH
20516: LD_INT 1
20518: PLUS
20519: ST_TO_ADDR
// if j < 5 then
20520: LD_VAR 0 3
20524: PUSH
20525: LD_INT 5
20527: LESS
20528: IFFALSE 20546
// b := arm [ 1 ] else
20530: LD_ADDR_VAR 0 4
20534: PUSH
20535: LD_VAR 0 5
20539: PUSH
20540: LD_INT 1
20542: ARRAY
20543: ST_TO_ADDR
20544: GO 20560
// b := dep [ 1 ] ;
20546: LD_ADDR_VAR 0 4
20550: PUSH
20551: LD_VAR 0 6
20555: PUSH
20556: LD_INT 1
20558: ARRAY
20559: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20560: LD_VAR 0 2
20564: PPUSH
20565: LD_VAR 0 4
20569: PPUSH
20570: CALL_OW 180
// end ;
20574: GO 20488
20576: POP
20577: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20578: LD_ADDR_VAR 0 2
20582: PUSH
20583: LD_INT 22
20585: PUSH
20586: LD_INT 2
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 25
20595: PUSH
20596: LD_INT 4
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PPUSH
20607: CALL_OW 69
20611: PUSH
20612: FOR_IN
20613: IFFALSE 20659
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20615: LD_VAR 0 2
20619: PPUSH
20620: LD_INT 22
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 30
20632: PUSH
20633: LD_INT 8
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PPUSH
20644: CALL_OW 69
20648: PUSH
20649: LD_INT 1
20651: ARRAY
20652: PPUSH
20653: CALL_OW 120
20657: GO 20612
20659: POP
20660: POP
// end ;
20661: LD_VAR 0 1
20665: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20666: LD_INT 0
20668: PPUSH
20669: PPUSH
20670: PPUSH
20671: PPUSH
20672: PPUSH
20673: PPUSH
20674: PPUSH
20675: PPUSH
20676: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20677: LD_INT 22
20679: PUSH
20680: LD_VAR 0 1
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 21
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PPUSH
20703: CALL_OW 69
20707: PUSH
20708: LD_VAR 0 3
20712: LESSEQUAL
20713: IFFALSE 20857
// for i = 1 to vehCount do
20715: LD_ADDR_VAR 0 10
20719: PUSH
20720: DOUBLE
20721: LD_INT 1
20723: DEC
20724: ST_TO_ADDR
20725: LD_VAR 0 3
20729: PUSH
20730: FOR_TO
20731: IFFALSE 20855
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
20733: LD_ADDR_VAR 0 12
20737: PUSH
20738: LD_VAR 0 5
20742: PUSH
20743: LD_INT 1
20745: PPUSH
20746: LD_VAR 0 5
20750: PPUSH
20751: CALL_OW 12
20755: ARRAY
20756: ST_TO_ADDR
// if randWeapon = 46 then
20757: LD_VAR 0 12
20761: PUSH
20762: LD_INT 46
20764: EQUAL
20765: IFFALSE 20810
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
20767: LD_VAR 0 2
20771: PPUSH
20772: LD_INT 24
20774: PPUSH
20775: LD_VAR 0 6
20779: PPUSH
20780: LD_VAR 0 7
20784: PUSH
20785: LD_INT 1
20787: PPUSH
20788: LD_VAR 0 7
20792: PPUSH
20793: CALL_OW 12
20797: ARRAY
20798: PPUSH
20799: LD_VAR 0 12
20803: PPUSH
20804: CALL_OW 185
20808: GO 20853
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
20810: LD_VAR 0 2
20814: PPUSH
20815: LD_VAR 0 8
20819: PPUSH
20820: LD_VAR 0 6
20824: PPUSH
20825: LD_VAR 0 7
20829: PUSH
20830: LD_INT 1
20832: PPUSH
20833: LD_VAR 0 7
20837: PPUSH
20838: CALL_OW 12
20842: ARRAY
20843: PPUSH
20844: LD_VAR 0 12
20848: PPUSH
20849: CALL_OW 185
// end ;
20853: GO 20730
20855: POP
20856: POP
// repeat wait ( 0 0$1 ) ;
20857: LD_INT 35
20859: PPUSH
20860: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
20864: LD_INT 22
20866: PUSH
20867: LD_VAR 0 1
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 21
20878: PUSH
20879: LD_INT 2
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 24
20888: PUSH
20889: LD_INT 250
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: LIST
20900: PPUSH
20901: CALL_OW 69
20905: PUSH
20906: LD_VAR 0 3
20910: GREATEREQUAL
20911: IFFALSE 20857
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
20913: LD_INT 22
20915: PUSH
20916: LD_VAR 0 1
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 21
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 24
20937: PUSH
20938: LD_INT 250
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: LIST
20949: PPUSH
20950: CALL_OW 69
20954: PUSH
20955: LD_VAR 0 3
20959: GREATEREQUAL
20960: IFFALSE 21303
// begin repeat begin wait ( 0 0$1 ) ;
20962: LD_INT 35
20964: PPUSH
20965: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
20969: LD_INT 22
20971: PUSH
20972: LD_VAR 0 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 21
20983: PUSH
20984: LD_INT 2
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 24
20993: PUSH
20994: LD_INT 651
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: PPUSH
21006: CALL_OW 69
21010: PUSH
21011: LD_INT 0
21013: GREATER
21014: IFFALSE 21242
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21016: LD_ADDR_VAR 0 10
21020: PUSH
21021: LD_INT 22
21023: PUSH
21024: LD_VAR 0 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 21
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 24
21045: PUSH
21046: LD_INT 651
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: LIST
21057: PPUSH
21058: CALL_OW 69
21062: PUSH
21063: FOR_IN
21064: IFFALSE 21240
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21066: LD_ADDR_VAR 0 16
21070: PUSH
21071: LD_INT 22
21073: PUSH
21074: LD_VAR 0 4
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PPUSH
21083: CALL_OW 69
21087: PPUSH
21088: LD_VAR 0 10
21092: PPUSH
21093: CALL_OW 74
21097: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21098: LD_ADDR_VAR 0 17
21102: PUSH
21103: LD_INT 22
21105: PUSH
21106: LD_VAR 0 4
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 2
21117: PUSH
21118: LD_INT 59
21120: PUSH
21121: EMPTY
21122: LIST
21123: PUSH
21124: LD_INT 21
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 21
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: EMPTY
21155: LIST
21156: PPUSH
21157: CALL_OW 69
21161: PPUSH
21162: LD_VAR 0 10
21166: PPUSH
21167: CALL_OW 74
21171: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21172: LD_VAR 0 10
21176: PPUSH
21177: LD_VAR 0 16
21181: PPUSH
21182: CALL_OW 296
21186: PUSH
21187: LD_INT 8
21189: PLUS
21190: PUSH
21191: LD_VAR 0 10
21195: PPUSH
21196: LD_VAR 0 17
21200: PPUSH
21201: CALL_OW 296
21205: LESS
21206: IFFALSE 21224
// begin ComAttackUnit ( i , target1 ) ;
21208: LD_VAR 0 10
21212: PPUSH
21213: LD_VAR 0 16
21217: PPUSH
21218: CALL_OW 115
// end else
21222: GO 21238
// begin ComAttackUnit ( i , target2 ) ;
21224: LD_VAR 0 10
21228: PPUSH
21229: LD_VAR 0 17
21233: PPUSH
21234: CALL_OW 115
// end ; end ;
21238: GO 21063
21240: POP
21241: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21242: LD_INT 22
21244: PUSH
21245: LD_VAR 0 1
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 21
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PPUSH
21268: CALL_OW 69
21272: PUSH
21273: LD_INT 0
21275: EQUAL
21276: PUSH
21277: LD_INT 22
21279: PUSH
21280: LD_VAR 0 4
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: PPUSH
21292: CALL_OW 69
21296: PUSH
21297: LD_INT 0
21299: EQUAL
21300: OR
21301: IFFALSE 20962
// end ; end ;
21303: LD_VAR 0 9
21307: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21308: LD_INT 0
21310: PPUSH
21311: PPUSH
21312: PPUSH
21313: PPUSH
// r := 100 ;
21314: LD_ADDR_VAR 0 5
21318: PUSH
21319: LD_INT 100
21321: ST_TO_ADDR
// x := 0 ;
21322: LD_ADDR_VAR 0 6
21326: PUSH
21327: LD_INT 0
21329: ST_TO_ADDR
// while ( x < n ) do
21330: LD_VAR 0 6
21334: PUSH
21335: LD_VAR 0 2
21339: LESS
21340: IFFALSE 21627
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21342: LD_ADDR_VAR 0 4
21346: PUSH
21347: DOUBLE
21348: LD_INT 1
21350: DEC
21351: ST_TO_ADDR
21352: LD_VAR 0 1
21356: PPUSH
21357: LD_INT 0
21359: PPUSH
21360: CALL_OW 517
21364: PUSH
21365: LD_INT 1
21367: ARRAY
21368: PUSH
21369: FOR_TO
21370: IFFALSE 21623
// begin if r > 50 then
21372: LD_VAR 0 5
21376: PUSH
21377: LD_INT 50
21379: GREATER
21380: IFFALSE 21599
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21382: LD_VAR 0 1
21386: PPUSH
21387: LD_INT 0
21389: PPUSH
21390: CALL_OW 517
21394: PUSH
21395: LD_INT 1
21397: ARRAY
21398: PUSH
21399: LD_VAR 0 4
21403: ARRAY
21404: PPUSH
21405: LD_VAR 0 1
21409: PPUSH
21410: LD_INT 0
21412: PPUSH
21413: CALL_OW 517
21417: PUSH
21418: LD_INT 2
21420: ARRAY
21421: PUSH
21422: LD_VAR 0 4
21426: ARRAY
21427: PPUSH
21428: CALL_OW 458
21432: NOT
21433: IFFALSE 21583
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21435: LD_VAR 0 1
21439: PPUSH
21440: LD_INT 0
21442: PPUSH
21443: CALL_OW 517
21447: PUSH
21448: LD_INT 1
21450: ARRAY
21451: PUSH
21452: LD_VAR 0 4
21456: ARRAY
21457: PPUSH
21458: LD_VAR 0 1
21462: PPUSH
21463: LD_INT 0
21465: PPUSH
21466: CALL_OW 517
21470: PUSH
21471: LD_INT 2
21473: ARRAY
21474: PUSH
21475: LD_VAR 0 4
21479: ARRAY
21480: PPUSH
21481: LD_INT 5
21483: PPUSH
21484: LD_INT 0
21486: PPUSH
21487: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21491: LD_ADDR_EXP 50
21495: PUSH
21496: LD_EXP 50
21500: PPUSH
21501: LD_INT 1
21503: PPUSH
21504: LD_VAR 0 1
21508: PPUSH
21509: LD_INT 0
21511: PPUSH
21512: CALL_OW 517
21516: PUSH
21517: LD_INT 1
21519: ARRAY
21520: PUSH
21521: LD_VAR 0 4
21525: ARRAY
21526: PUSH
21527: LD_VAR 0 1
21531: PPUSH
21532: LD_INT 0
21534: PPUSH
21535: CALL_OW 517
21539: PUSH
21540: LD_INT 2
21542: ARRAY
21543: PUSH
21544: LD_VAR 0 4
21548: ARRAY
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PPUSH
21554: CALL_OW 2
21558: ST_TO_ADDR
// r := 0 ;
21559: LD_ADDR_VAR 0 5
21563: PUSH
21564: LD_INT 0
21566: ST_TO_ADDR
// x := x + 1 ;
21567: LD_ADDR_VAR 0 6
21571: PUSH
21572: LD_VAR 0 6
21576: PUSH
21577: LD_INT 1
21579: PLUS
21580: ST_TO_ADDR
// end else
21581: GO 21597
// r := r + 35 ;
21583: LD_ADDR_VAR 0 5
21587: PUSH
21588: LD_VAR 0 5
21592: PUSH
21593: LD_INT 35
21595: PLUS
21596: ST_TO_ADDR
// end else
21597: GO 21621
// r := r + rand ( 10 , 25 ) ;
21599: LD_ADDR_VAR 0 5
21603: PUSH
21604: LD_VAR 0 5
21608: PUSH
21609: LD_INT 10
21611: PPUSH
21612: LD_INT 25
21614: PPUSH
21615: CALL_OW 12
21619: PLUS
21620: ST_TO_ADDR
// end ;
21621: GO 21369
21623: POP
21624: POP
21625: GO 21330
// end ; end_of_file
21627: LD_VAR 0 3
21631: RET
// every 0 0$1 trigger russianAI = 1 do
21632: LD_EXP 39
21636: PUSH
21637: LD_INT 1
21639: EQUAL
21640: IFFALSE 21859
21642: GO 21644
21644: DISABLE
// begin enable ;
21645: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21646: LD_INT 3
21648: PPUSH
21649: LD_EXP 30
21653: PPUSH
21654: CALL 16110 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21658: LD_INT 3
21660: PPUSH
21661: LD_EXP 42
21665: PPUSH
21666: CALL 16470 0 2
// if ruPossition = 1 then
21670: LD_EXP 41
21674: PUSH
21675: LD_INT 1
21677: EQUAL
21678: IFFALSE 21733
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21680: LD_INT 3
21682: PPUSH
21683: LD_INT 13
21685: PPUSH
21686: LD_INT 10
21688: PPUSH
21689: LD_INT 22
21691: PUSH
21692: LD_INT 3
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 21
21701: PUSH
21702: LD_INT 3
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 30
21711: PUSH
21712: LD_INT 8
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: PPUSH
21724: CALL_OW 69
21728: PPUSH
21729: CALL 16676 0 4
// if ruPossition = 2 then
21733: LD_EXP 41
21737: PUSH
21738: LD_INT 2
21740: EQUAL
21741: IFFALSE 21796
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21743: LD_INT 3
21745: PPUSH
21746: LD_INT 14
21748: PPUSH
21749: LD_INT 11
21751: PPUSH
21752: LD_INT 22
21754: PUSH
21755: LD_INT 3
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 21
21764: PUSH
21765: LD_INT 3
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 30
21774: PUSH
21775: LD_INT 8
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: PPUSH
21787: CALL_OW 69
21791: PPUSH
21792: CALL 16676 0 4
// if ruPossition = 3 then
21796: LD_EXP 41
21800: PUSH
21801: LD_INT 3
21803: EQUAL
21804: IFFALSE 21859
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21806: LD_INT 3
21808: PPUSH
21809: LD_INT 15
21811: PPUSH
21812: LD_INT 12
21814: PPUSH
21815: LD_INT 22
21817: PUSH
21818: LD_INT 3
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 21
21827: PUSH
21828: LD_INT 3
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 30
21837: PUSH
21838: LD_INT 8
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: PPUSH
21850: CALL_OW 69
21854: PPUSH
21855: CALL 16676 0 4
// end ;
21859: END
// every 0 0$1 do
21860: GO 21862
21862: DISABLE
// begin enable ;
21863: ENABLE
// if ruPossition = 1 then
21864: LD_EXP 41
21868: PUSH
21869: LD_INT 1
21871: EQUAL
21872: IFFALSE 21884
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
21874: LD_INT 3
21876: PPUSH
21877: LD_INT 10
21879: PPUSH
21880: CALL 15747 0 2
// if ruPossition = 2 then
21884: LD_EXP 41
21888: PUSH
21889: LD_INT 2
21891: EQUAL
21892: IFFALSE 21904
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
21894: LD_INT 3
21896: PPUSH
21897: LD_INT 11
21899: PPUSH
21900: CALL 15747 0 2
// if ruPossition = 3 then
21904: LD_EXP 41
21908: PUSH
21909: LD_INT 3
21911: EQUAL
21912: IFFALSE 21924
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
21914: LD_INT 3
21916: PPUSH
21917: LD_INT 12
21919: PPUSH
21920: CALL 15747 0 2
// IntBazooka ( 3 , 1 ) ;
21924: LD_INT 3
21926: PPUSH
21927: LD_INT 1
21929: PPUSH
21930: CALL 14546 0 2
// IntBazooka ( 6 , 1 ) ;
21934: LD_INT 6
21936: PPUSH
21937: LD_INT 1
21939: PPUSH
21940: CALL 14546 0 2
// end ;
21944: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21945: LD_EXP 39
21949: PUSH
21950: LD_INT 1
21952: EQUAL
21953: PUSH
21954: LD_EXP 35
21958: PPUSH
21959: CALL_OW 302
21963: AND
21964: PUSH
21965: LD_EXP 35
21969: PPUSH
21970: CALL_OW 255
21974: PUSH
21975: LD_INT 3
21977: EQUAL
21978: AND
21979: PUSH
21980: LD_INT 22
21982: PUSH
21983: LD_INT 3
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 21
21992: PUSH
21993: LD_INT 2
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 33
22002: PUSH
22003: LD_INT 3
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: LIST
22014: PPUSH
22015: CALL_OW 69
22019: PUSH
22020: LD_INT 0
22022: EQUAL
22023: AND
22024: IFFALSE 22232
22026: GO 22028
22028: DISABLE
// begin enable ;
22029: ENABLE
// if Difficulty = 1 then
22030: LD_OWVAR 67
22034: PUSH
22035: LD_INT 1
22037: EQUAL
22038: IFFALSE 22100
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22040: LD_INT 3
22042: PPUSH
22043: LD_EXP 35
22047: PPUSH
22048: LD_INT 5
22050: PPUSH
22051: LD_INT 8
22053: PPUSH
22054: CALL_OW 12
22058: PPUSH
22059: LD_INT 1
22061: PPUSH
22062: LD_INT 43
22064: PUSH
22065: LD_INT 44
22067: PUSH
22068: LD_INT 45
22070: PUSH
22071: LD_INT 46
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PPUSH
22080: LD_INT 1
22082: PPUSH
22083: LD_INT 3
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PPUSH
22093: LD_INT 22
22095: PPUSH
22096: CALL 20666 0 8
// if Difficulty = 2 then
22100: LD_OWVAR 67
22104: PUSH
22105: LD_INT 2
22107: EQUAL
22108: IFFALSE 22166
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22110: LD_INT 3
22112: PPUSH
22113: LD_EXP 35
22117: PPUSH
22118: LD_INT 6
22120: PPUSH
22121: LD_INT 8
22123: PPUSH
22124: CALL_OW 12
22128: PPUSH
22129: LD_INT 1
22131: PPUSH
22132: LD_INT 44
22134: PUSH
22135: LD_INT 45
22137: PUSH
22138: LD_INT 46
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: PPUSH
22146: LD_INT 1
22148: PPUSH
22149: LD_INT 3
22151: PUSH
22152: LD_INT 3
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PPUSH
22159: LD_INT 22
22161: PPUSH
22162: CALL 20666 0 8
// if Difficulty >= 3 then
22166: LD_OWVAR 67
22170: PUSH
22171: LD_INT 3
22173: GREATEREQUAL
22174: IFFALSE 22232
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22176: LD_INT 3
22178: PPUSH
22179: LD_EXP 35
22183: PPUSH
22184: LD_INT 7
22186: PPUSH
22187: LD_INT 8
22189: PPUSH
22190: CALL_OW 12
22194: PPUSH
22195: LD_INT 1
22197: PPUSH
22198: LD_INT 44
22200: PUSH
22201: LD_INT 45
22203: PUSH
22204: LD_INT 46
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: LIST
22211: PPUSH
22212: LD_INT 1
22214: PPUSH
22215: LD_INT 3
22217: PUSH
22218: LD_INT 3
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PPUSH
22225: LD_INT 22
22227: PPUSH
22228: CALL 20666 0 8
// end ;
22232: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22233: LD_EXP 50
22237: PUSH
22238: LD_EXP 49
22242: AND
22243: IFFALSE 22364
22245: GO 22247
22247: DISABLE
22248: LD_INT 0
22250: PPUSH
// begin enable ;
22251: ENABLE
// for i in arabianMines do
22252: LD_ADDR_VAR 0 1
22256: PUSH
22257: LD_EXP 50
22261: PUSH
22262: FOR_IN
22263: IFFALSE 22362
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22265: LD_INT 22
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 92
22277: PUSH
22278: LD_VAR 0 1
22282: PUSH
22283: LD_INT 1
22285: ARRAY
22286: PUSH
22287: LD_VAR 0 1
22291: PUSH
22292: LD_INT 2
22294: ARRAY
22295: PUSH
22296: LD_INT 3
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PPUSH
22309: CALL_OW 69
22313: IFFALSE 22360
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22315: LD_VAR 0 1
22319: PUSH
22320: LD_INT 1
22322: ARRAY
22323: PPUSH
22324: LD_VAR 0 1
22328: PUSH
22329: LD_INT 2
22331: ARRAY
22332: PPUSH
22333: LD_INT 5
22335: PPUSH
22336: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22340: LD_ADDR_EXP 50
22344: PUSH
22345: LD_EXP 50
22349: PPUSH
22350: LD_VAR 0 1
22354: PPUSH
22355: CALL_OW 3
22359: ST_TO_ADDR
// end ; end ;
22360: GO 22262
22362: POP
22363: POP
// end ; end_of_file
22364: PPOPN 1
22366: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22367: LD_VAR 0 1
22371: PPUSH
22372: CALL_OW 255
22376: PUSH
22377: LD_INT 4
22379: EQUAL
22380: IFFALSE 22394
// SetBName ( building , epsilon ) ;
22382: LD_VAR 0 1
22386: PPUSH
22387: LD_STRING epsilon
22389: PPUSH
22390: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22394: LD_VAR 0 1
22398: PPUSH
22399: CALL_OW 255
22403: PUSH
22404: LD_INT 1
22406: EQUAL
22407: PUSH
22408: LD_VAR 0 1
22412: PPUSH
22413: CALL_OW 266
22417: PUSH
22418: LD_INT 0
22420: EQUAL
22421: AND
22422: IFFALSE 22436
// SetBName ( building , epsilon ) ;
22424: LD_VAR 0 1
22428: PPUSH
22429: LD_STRING epsilon
22431: PPUSH
22432: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22436: LD_VAR 0 1
22440: PPUSH
22441: CALL_OW 255
22445: PUSH
22446: LD_INT 3
22448: EQUAL
22449: PUSH
22450: LD_VAR 0 1
22454: PPUSH
22455: CALL_OW 266
22459: PUSH
22460: LD_INT 0
22462: EQUAL
22463: AND
22464: IFFALSE 22478
// SetBName ( building , chuikov ) ;
22466: LD_VAR 0 1
22470: PPUSH
22471: LD_STRING chuikov
22473: PPUSH
22474: CALL_OW 500
// if GetSide ( building ) = 2 then
22478: LD_VAR 0 1
22482: PPUSH
22483: CALL_OW 255
22487: PUSH
22488: LD_INT 2
22490: EQUAL
22491: IFFALSE 22547
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22493: LD_VAR 0 1
22497: PPUSH
22498: CALL_OW 266
22502: PUSH
22503: LD_INT 6
22505: EQUAL
22506: PUSH
22507: LD_VAR 0 1
22511: PPUSH
22512: CALL_OW 266
22516: PUSH
22517: LD_INT 9
22519: EQUAL
22520: OR
22521: IFFALSE 22547
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22523: LD_VAR 0 1
22527: PPUSH
22528: LD_INT 10
22530: PPUSH
22531: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22535: LD_VAR 0 1
22539: PPUSH
22540: LD_INT 11
22542: PPUSH
22543: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22547: LD_VAR 0 1
22551: PPUSH
22552: CALL_OW 255
22556: PUSH
22557: LD_INT 3
22559: EQUAL
22560: IFFALSE 22594
// begin ruDepotConstructed := true ;
22562: LD_ADDR_EXP 57
22566: PUSH
22567: LD_INT 1
22569: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22570: LD_VAR 0 1
22574: PPUSH
22575: CALL_OW 266
22579: PUSH
22580: LD_INT 2
22582: EQUAL
22583: IFFALSE 22594
// AddComUpgrade ( building ) ;
22585: LD_VAR 0 1
22589: PPUSH
22590: CALL_OW 206
// end ; end ;
22594: PPOPN 2
22596: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22597: LD_INT 0
22599: PPUSH
22600: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22601: LD_VAR 0 1
22605: PUSH
22606: LD_INT 22
22608: PUSH
22609: LD_INT 3
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 23
22618: PUSH
22619: LD_INT 3
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 21
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: PPUSH
22641: CALL_OW 69
22645: IN
22646: PUSH
22647: LD_EXP 61
22651: NOT
22652: AND
22653: IFFALSE 22684
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22655: LD_ADDR_EXP 61
22659: PUSH
22660: LD_VAR 0 1
22664: PPUSH
22665: CALL_OW 250
22669: PUSH
22670: LD_VAR 0 1
22674: PPUSH
22675: CALL_OW 251
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: ST_TO_ADDR
// end ;
22684: PPOPN 3
22686: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22687: LD_VAR 0 2
22691: PPUSH
22692: CALL_OW 255
22696: PUSH
22697: LD_INT 3
22699: EQUAL
22700: PUSH
22701: LD_EXP 35
22705: PPUSH
22706: CALL_OW 255
22710: PUSH
22711: LD_INT 3
22713: EQUAL
22714: AND
22715: PUSH
22716: LD_EXP 35
22720: PPUSH
22721: CALL_OW 302
22725: AND
22726: IFFALSE 22742
// ComEnterUnit ( human , ruFab ) ;
22728: LD_VAR 0 2
22732: PPUSH
22733: LD_EXP 35
22737: PPUSH
22738: CALL_OW 120
// end ;
22742: PPOPN 2
22744: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
22745: LD_INT 0
22747: PPUSH
22748: PPUSH
22749: PPUSH
22750: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22751: LD_VAR 0 1
22755: PPUSH
22756: CALL_OW 255
22760: PUSH
22761: LD_INT 1
22763: EQUAL
22764: PUSH
22765: LD_EXP 65
22769: PUSH
22770: LD_INT 0
22772: EQUAL
22773: AND
22774: IFFALSE 22976
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 266
22785: PUSH
22786: LD_INT 26
22788: EQUAL
22789: PUSH
22790: LD_VAR 0 1
22794: PPUSH
22795: CALL_OW 266
22799: PUSH
22800: LD_INT 27
22802: EQUAL
22803: OR
22804: PUSH
22805: LD_VAR 0 1
22809: PPUSH
22810: CALL_OW 266
22814: PUSH
22815: LD_INT 28
22817: EQUAL
22818: OR
22819: IFFALSE 22976
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
22821: LD_INT 22
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: LD_INT 30
22836: PUSH
22837: LD_INT 7
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 30
22846: PUSH
22847: LD_INT 8
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PPUSH
22863: CALL_OW 69
22867: PUSH
22868: LD_INT 0
22870: GREATER
22871: IFFALSE 22976
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22873: LD_ADDR_VAR 0 2
22877: PUSH
22878: LD_INT 22
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: LD_INT 30
22893: PUSH
22894: LD_INT 7
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 30
22903: PUSH
22904: LD_INT 8
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: LIST
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PPUSH
22920: CALL_OW 69
22924: PUSH
22925: FOR_IN
22926: IFFALSE 22974
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22928: LD_VAR 0 2
22932: PPUSH
22933: LD_INT 1
22935: PPUSH
22936: CALL_OW 268
22940: PUSH
22941: LD_INT 11
22943: EQUAL
22944: PUSH
22945: LD_VAR 0 2
22949: PPUSH
22950: LD_INT 2
22952: PPUSH
22953: CALL_OW 268
22957: PUSH
22958: LD_INT 11
22960: EQUAL
22961: OR
22962: IFFALSE 22972
// eventVar1 = 1 ;
22964: LD_ADDR_EXP 65
22968: PUSH
22969: LD_INT 1
22971: ST_TO_ADDR
22972: GO 22925
22974: POP
22975: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
22976: LD_VAR 0 1
22980: PPUSH
22981: CALL_OW 255
22985: PUSH
22986: LD_INT 3
22988: EQUAL
22989: IFFALSE 23469
// begin if GetBType ( building ) = b_depot then
22991: LD_VAR 0 1
22995: PPUSH
22996: CALL_OW 266
23000: PUSH
23001: LD_INT 0
23003: EQUAL
23004: IFFALSE 23076
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
23006: LD_VAR 0 1
23010: PPUSH
23011: CALL_OW 274
23015: PPUSH
23016: LD_INT 1
23018: PPUSH
23019: LD_INT 5000
23021: PPUSH
23022: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 274
23035: PPUSH
23036: LD_INT 2
23038: PPUSH
23039: LD_INT 300
23041: PPUSH
23042: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23046: LD_VAR 0 1
23050: PPUSH
23051: CALL_OW 274
23055: PPUSH
23056: LD_INT 3
23058: PPUSH
23059: LD_INT 100
23061: PPUSH
23062: CALL_OW 277
// ruDepot = building ;
23066: LD_ADDR_EXP 30
23070: PUSH
23071: LD_VAR 0 1
23075: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 266
23085: PUSH
23086: LD_INT 0
23088: EQUAL
23089: PUSH
23090: LD_VAR 0 1
23094: PPUSH
23095: CALL_OW 266
23099: PUSH
23100: LD_INT 2
23102: EQUAL
23103: OR
23104: PUSH
23105: LD_VAR 0 1
23109: PPUSH
23110: CALL_OW 266
23114: PUSH
23115: LD_INT 4
23117: EQUAL
23118: OR
23119: IFFALSE 23130
// ComUpgrade ( building ) ;
23121: LD_VAR 0 1
23125: PPUSH
23126: CALL_OW 146
// if GetBType ( building ) = b_lab then
23130: LD_VAR 0 1
23134: PPUSH
23135: CALL_OW 266
23139: PUSH
23140: LD_INT 6
23142: EQUAL
23143: IFFALSE 23346
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23145: LD_INT 22
23147: PUSH
23148: LD_INT 3
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 30
23157: PUSH
23158: LD_INT 8
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PPUSH
23169: CALL_OW 69
23173: PUSH
23174: LD_INT 0
23176: EQUAL
23177: IFFALSE 23215
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23179: LD_VAR 0 1
23183: PPUSH
23184: LD_INT 10
23186: PPUSH
23187: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23191: LD_VAR 0 1
23195: PPUSH
23196: LD_INT 12
23198: PPUSH
23199: CALL_OW 207
// ruLab1 = building ;
23203: LD_ADDR_EXP 31
23207: PUSH
23208: LD_VAR 0 1
23212: ST_TO_ADDR
// end else
23213: GO 23249
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23215: LD_VAR 0 1
23219: PPUSH
23220: LD_INT 11
23222: PPUSH
23223: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23227: LD_VAR 0 1
23231: PPUSH
23232: LD_INT 14
23234: PPUSH
23235: CALL_OW 207
// ruLab2 = building ;
23239: LD_ADDR_EXP 32
23243: PUSH
23244: LD_VAR 0 1
23248: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23249: LD_INT 3
23251: PPUSH
23252: LD_VAR 0 1
23256: PPUSH
23257: LD_INT 3
23259: PPUSH
23260: CALL 15662 0 3
// if ruDestroyedBuildings > 0 then
23264: LD_EXP 42
23268: PUSH
23269: LD_INT 0
23271: GREATER
23272: IFFALSE 23346
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23274: LD_ADDR_EXP 42
23278: PUSH
23279: LD_EXP 42
23283: PPUSH
23284: LD_INT 1
23286: PPUSH
23287: CALL_OW 3
23291: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23292: LD_ADDR_EXP 42
23296: PUSH
23297: LD_EXP 42
23301: PPUSH
23302: LD_INT 1
23304: PPUSH
23305: CALL_OW 3
23309: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23310: LD_ADDR_EXP 42
23314: PUSH
23315: LD_EXP 42
23319: PPUSH
23320: LD_INT 1
23322: PPUSH
23323: CALL_OW 3
23327: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23328: LD_ADDR_EXP 42
23332: PUSH
23333: LD_EXP 42
23337: PPUSH
23338: LD_INT 1
23340: PPUSH
23341: CALL_OW 3
23345: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23346: LD_VAR 0 1
23350: PPUSH
23351: CALL_OW 266
23355: PUSH
23356: LD_INT 32
23358: EQUAL
23359: IFFALSE 23396
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23361: LD_VAR 0 1
23365: PPUSH
23366: LD_INT 44
23368: PUSH
23369: LD_INT 45
23371: PUSH
23372: LD_INT 46
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 1
23382: PPUSH
23383: LD_INT 3
23385: PPUSH
23386: CALL_OW 12
23390: ARRAY
23391: PPUSH
23392: CALL_OW 208
// if GetBType ( building ) = b_turret then
23396: LD_VAR 0 1
23400: PPUSH
23401: CALL_OW 266
23405: PUSH
23406: LD_INT 33
23408: EQUAL
23409: IFFALSE 23446
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23411: LD_VAR 0 1
23415: PPUSH
23416: LD_INT 44
23418: PUSH
23419: LD_INT 45
23421: PUSH
23422: LD_INT 46
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: PPUSH
23433: LD_INT 3
23435: PPUSH
23436: CALL_OW 12
23440: ARRAY
23441: PPUSH
23442: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23446: LD_VAR 0 1
23450: PPUSH
23451: CALL_OW 266
23455: PUSH
23456: LD_INT 24
23458: EQUAL
23459: IFFALSE 23469
// russianAI = 1 ;
23461: LD_ADDR_EXP 39
23465: PUSH
23466: LD_INT 1
23468: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23469: LD_VAR 0 1
23473: PPUSH
23474: CALL_OW 255
23478: PUSH
23479: LD_INT 2
23481: EQUAL
23482: IFFALSE 24361
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23484: LD_VAR 0 1
23488: PPUSH
23489: CALL_OW 266
23493: PUSH
23494: LD_EXP 68
23498: PUSH
23499: LD_INT 1
23501: ARRAY
23502: PUSH
23503: LD_INT 1
23505: ARRAY
23506: EQUAL
23507: IFFALSE 23634
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23509: LD_ADDR_EXP 68
23513: PUSH
23514: LD_EXP 68
23518: PPUSH
23519: LD_INT 1
23521: PPUSH
23522: CALL_OW 3
23526: ST_TO_ADDR
// if arBuildingsTab then
23527: LD_EXP 68
23531: IFFALSE 23634
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23533: LD_ADDR_VAR 0 3
23537: PUSH
23538: LD_INT 22
23540: PUSH
23541: LD_INT 2
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 25
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PPUSH
23562: CALL_OW 69
23566: ST_TO_ADDR
// if engineers then
23567: LD_VAR 0 3
23571: IFFALSE 23634
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23573: LD_VAR 0 3
23577: PPUSH
23578: LD_EXP 68
23582: PUSH
23583: LD_INT 1
23585: ARRAY
23586: PUSH
23587: LD_INT 1
23589: ARRAY
23590: PPUSH
23591: LD_EXP 68
23595: PUSH
23596: LD_INT 1
23598: ARRAY
23599: PUSH
23600: LD_INT 2
23602: ARRAY
23603: PPUSH
23604: LD_EXP 68
23608: PUSH
23609: LD_INT 1
23611: ARRAY
23612: PUSH
23613: LD_INT 3
23615: ARRAY
23616: PPUSH
23617: LD_EXP 68
23621: PUSH
23622: LD_INT 1
23624: ARRAY
23625: PUSH
23626: LD_INT 4
23628: ARRAY
23629: PPUSH
23630: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23634: LD_VAR 0 1
23638: PPUSH
23639: CALL_OW 266
23643: PUSH
23644: LD_INT 31
23646: EQUAL
23647: IFFALSE 23793
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23649: LD_ADDR_VAR 0 4
23653: PUSH
23654: LD_INT 22
23656: PUSH
23657: LD_INT 2
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 2
23666: PUSH
23667: LD_INT 25
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 25
23679: PUSH
23680: LD_INT 8
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: LIST
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PPUSH
23696: CALL_OW 69
23700: PUSH
23701: LD_EXP 26
23705: DIFF
23706: ST_TO_ADDR
// if not sol then
23707: LD_VAR 0 4
23711: NOT
23712: IFFALSE 23716
// exit ;
23714: GO 24361
// for i in sol do
23716: LD_ADDR_VAR 0 2
23720: PUSH
23721: LD_VAR 0 4
23725: PUSH
23726: FOR_IN
23727: IFFALSE 23791
// if not GetTag ( i ) then
23729: LD_VAR 0 2
23733: PPUSH
23734: CALL_OW 110
23738: NOT
23739: IFFALSE 23789
// begin if IsInUnit ( i ) then
23741: LD_VAR 0 2
23745: PPUSH
23746: CALL_OW 310
23750: IFFALSE 23761
// ComExitBuilding ( i ) ;
23752: LD_VAR 0 2
23756: PPUSH
23757: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
23761: LD_VAR 0 2
23765: PPUSH
23766: LD_VAR 0 1
23770: PPUSH
23771: CALL_OW 180
// SetTag ( i , 11 ) ;
23775: LD_VAR 0 2
23779: PPUSH
23780: LD_INT 11
23782: PPUSH
23783: CALL_OW 109
// break ;
23787: GO 23791
// end ;
23789: GO 23726
23791: POP
23792: POP
// end ; if GetBType ( building ) = b_depot then
23793: LD_VAR 0 1
23797: PPUSH
23798: CALL_OW 266
23802: PUSH
23803: LD_INT 0
23805: EQUAL
23806: IFFALSE 23892
// begin arDepot = building ;
23808: LD_ADDR_EXP 43
23812: PUSH
23813: LD_VAR 0 1
23817: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
23818: LD_INT 38
23820: PUSH
23821: LD_INT 47
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PPUSH
23828: LD_INT 71
23830: PPUSH
23831: LD_INT 19
23833: PPUSH
23834: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL_OW 274
23847: PPUSH
23848: LD_INT 1
23850: PPUSH
23851: LD_INT 500
23853: PPUSH
23854: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL_OW 274
23867: PPUSH
23868: LD_INT 3
23870: PPUSH
23871: LD_INT 30
23873: PPUSH
23874: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
23878: LD_EXP 26
23882: PPUSH
23883: LD_VAR 0 1
23887: PPUSH
23888: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
23892: LD_VAR 0 1
23896: PPUSH
23897: CALL_OW 266
23901: PUSH
23902: LD_INT 6
23904: EQUAL
23905: PUSH
23906: LD_VAR 0 1
23910: PPUSH
23911: CALL_OW 266
23915: PUSH
23916: LD_INT 9
23918: EQUAL
23919: OR
23920: IFFALSE 23971
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23922: LD_VAR 0 1
23926: PPUSH
23927: LD_INT 10
23929: PPUSH
23930: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
23934: LD_VAR 0 1
23938: PPUSH
23939: LD_INT 11
23941: PPUSH
23942: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
23946: LD_INT 2
23948: PPUSH
23949: LD_VAR 0 1
23953: PPUSH
23954: LD_INT 2
23956: PPUSH
23957: CALL 15662 0 3
// arLab = building ;
23961: LD_ADDR_EXP 44
23965: PUSH
23966: LD_VAR 0 1
23970: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23971: LD_VAR 0 1
23975: PPUSH
23976: CALL_OW 266
23980: PUSH
23981: LD_INT 2
23983: EQUAL
23984: PUSH
23985: LD_VAR 0 1
23989: PPUSH
23990: CALL_OW 266
23994: PUSH
23995: LD_INT 4
23997: EQUAL
23998: OR
23999: IFFALSE 24070
// begin ComUpgrade ( building ) ;
24001: LD_VAR 0 1
24005: PPUSH
24006: CALL_OW 146
// if GetBType ( building ) = b_armoury then
24010: LD_VAR 0 1
24014: PPUSH
24015: CALL_OW 266
24019: PUSH
24020: LD_INT 4
24022: EQUAL
24023: IFFALSE 24070
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24025: LD_INT 22
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 25
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PPUSH
24049: CALL_OW 69
24053: PUSH
24054: LD_EXP 26
24058: DIFF
24059: PPUSH
24060: LD_INT 75
24062: PPUSH
24063: LD_INT 21
24065: PPUSH
24066: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24070: LD_VAR 0 1
24074: PPUSH
24075: CALL_OW 266
24079: PUSH
24080: LD_INT 27
24082: EQUAL
24083: IFFALSE 24361
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24085: LD_INT 22
24087: PUSH
24088: LD_INT 2
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 30
24097: PUSH
24098: LD_INT 27
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PPUSH
24109: CALL_OW 69
24113: PUSH
24114: LD_INT 2
24116: EQUAL
24117: IFFALSE 24361
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24119: LD_ADDR_VAR 0 2
24123: PUSH
24124: LD_INT 22
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 21
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 25
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: LIST
24158: PPUSH
24159: CALL_OW 69
24163: PUSH
24164: LD_INT 1
24166: ARRAY
24167: ST_TO_ADDR
// if not i then
24168: LD_VAR 0 2
24172: NOT
24173: IFFALSE 24177
// exit ;
24175: GO 24361
// AddComMoveXY ( i , 92 , 34 ) ;
24177: LD_VAR 0 2
24181: PPUSH
24182: LD_INT 92
24184: PPUSH
24185: LD_INT 34
24187: PPUSH
24188: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24192: LD_VAR 0 2
24196: PPUSH
24197: LD_INT 35
24199: PPUSH
24200: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24204: LD_VAR 0 2
24208: PPUSH
24209: LD_INT 101
24211: PPUSH
24212: LD_INT 20
24214: PPUSH
24215: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24219: LD_VAR 0 2
24223: PPUSH
24224: LD_INT 35
24226: PPUSH
24227: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24231: LD_VAR 0 2
24235: PPUSH
24236: LD_INT 115
24238: PPUSH
24239: LD_INT 30
24241: PPUSH
24242: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24246: LD_VAR 0 2
24250: PPUSH
24251: LD_INT 35
24253: PPUSH
24254: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24258: LD_VAR 0 2
24262: PPUSH
24263: LD_INT 82
24265: PPUSH
24266: LD_INT 57
24268: PPUSH
24269: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24273: LD_VAR 0 2
24277: PPUSH
24278: LD_INT 35
24280: PPUSH
24281: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24285: LD_VAR 0 2
24289: PPUSH
24290: LD_INT 36
24292: PPUSH
24293: LD_INT 28
24295: PPUSH
24296: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24300: LD_VAR 0 2
24304: PPUSH
24305: LD_INT 70
24307: PPUSH
24308: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24312: LD_INT 22
24314: PUSH
24315: LD_INT 2
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 21
24324: PUSH
24325: LD_INT 1
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 25
24334: PUSH
24335: LD_INT 2
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: LIST
24346: PPUSH
24347: CALL_OW 69
24351: PPUSH
24352: LD_EXP 43
24356: PPUSH
24357: CALL_OW 180
// end ; end ; end ;
24361: PPOPN 5
24363: END
// on UpgradeComplete ( building ) do var i ;
24364: LD_INT 0
24366: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24367: LD_VAR 0 1
24371: PPUSH
24372: CALL_OW 255
24376: PUSH
24377: LD_INT 1
24379: EQUAL
24380: PUSH
24381: LD_EXP 65
24385: PUSH
24386: LD_INT 0
24388: EQUAL
24389: AND
24390: IFFALSE 24588
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24392: LD_VAR 0 1
24396: PPUSH
24397: CALL_OW 266
24401: PUSH
24402: LD_INT 7
24404: EQUAL
24405: PUSH
24406: LD_VAR 0 1
24410: PPUSH
24411: CALL_OW 266
24415: PUSH
24416: LD_INT 8
24418: EQUAL
24419: OR
24420: IFFALSE 24588
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24422: LD_INT 22
24424: PUSH
24425: LD_INT 1
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: LD_INT 30
24437: PUSH
24438: LD_INT 26
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 30
24447: PUSH
24448: LD_INT 27
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 30
24457: PUSH
24458: LD_INT 28
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PPUSH
24475: CALL_OW 69
24479: PUSH
24480: LD_INT 0
24482: GREATER
24483: IFFALSE 24588
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24485: LD_ADDR_VAR 0 2
24489: PUSH
24490: LD_INT 22
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: LD_INT 30
24505: PUSH
24506: LD_INT 7
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 30
24515: PUSH
24516: LD_INT 8
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: LIST
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PPUSH
24532: CALL_OW 69
24536: PUSH
24537: FOR_IN
24538: IFFALSE 24586
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24540: LD_VAR 0 2
24544: PPUSH
24545: LD_INT 1
24547: PPUSH
24548: CALL_OW 268
24552: PUSH
24553: LD_INT 11
24555: EQUAL
24556: PUSH
24557: LD_VAR 0 2
24561: PPUSH
24562: LD_INT 2
24564: PPUSH
24565: CALL_OW 268
24569: PUSH
24570: LD_INT 11
24572: EQUAL
24573: OR
24574: IFFALSE 24584
// eventVar1 = 1 ;
24576: LD_ADDR_EXP 65
24580: PUSH
24581: LD_INT 1
24583: ST_TO_ADDR
24584: GO 24537
24586: POP
24587: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24588: LD_VAR 0 1
24592: PPUSH
24593: CALL_OW 255
24597: PUSH
24598: LD_INT 2
24600: EQUAL
24601: IFFALSE 24706
// begin if GetBType ( building ) = b_barracks then
24603: LD_VAR 0 1
24607: PPUSH
24608: CALL_OW 266
24612: PUSH
24613: LD_INT 5
24615: EQUAL
24616: IFFALSE 24706
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24618: LD_ADDR_VAR 0 2
24622: PUSH
24623: LD_INT 22
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 25
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 3
24645: PUSH
24646: LD_INT 54
24648: PUSH
24649: EMPTY
24650: LIST
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: PPUSH
24661: CALL_OW 69
24665: PUSH
24666: LD_EXP 26
24670: PUSH
24671: EMPTY
24672: LIST
24673: DIFF
24674: PUSH
24675: FOR_IN
24676: IFFALSE 24694
// ComEnterUnit ( i , building ) ;
24678: LD_VAR 0 2
24682: PPUSH
24683: LD_VAR 0 1
24687: PPUSH
24688: CALL_OW 120
24692: GO 24675
24694: POP
24695: POP
// arArm = building ;
24696: LD_ADDR_EXP 45
24700: PUSH
24701: LD_VAR 0 1
24705: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
24706: LD_VAR 0 1
24710: PPUSH
24711: CALL_OW 255
24715: PUSH
24716: LD_INT 3
24718: EQUAL
24719: IFFALSE 25192
// begin if GetBType ( building ) = b_factory then
24721: LD_VAR 0 1
24725: PPUSH
24726: CALL_OW 266
24730: PUSH
24731: LD_INT 3
24733: EQUAL
24734: IFFALSE 24801
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
24736: LD_ADDR_VAR 0 2
24740: PUSH
24741: LD_INT 22
24743: PUSH
24744: LD_INT 3
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 25
24753: PUSH
24754: LD_INT 3
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PPUSH
24765: CALL_OW 69
24769: PUSH
24770: FOR_IN
24771: IFFALSE 24789
// ComEnterUnit ( i , building ) ;
24773: LD_VAR 0 2
24777: PPUSH
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL_OW 120
24787: GO 24770
24789: POP
24790: POP
// ruFab = building ;
24791: LD_ADDR_EXP 35
24795: PUSH
24796: LD_VAR 0 1
24800: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
24801: LD_INT 22
24803: PUSH
24804: LD_INT 3
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 21
24813: PUSH
24814: LD_INT 3
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 30
24823: PUSH
24824: LD_INT 8
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: LIST
24835: PPUSH
24836: CALL_OW 69
24840: PUSH
24841: LD_INT 2
24843: EQUAL
24844: IFFALSE 25052
// begin for i = 1 to 2 do
24846: LD_ADDR_VAR 0 2
24850: PUSH
24851: DOUBLE
24852: LD_INT 1
24854: DEC
24855: ST_TO_ADDR
24856: LD_INT 2
24858: PUSH
24859: FOR_TO
24860: IFFALSE 24947
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
24862: LD_INT 22
24864: PUSH
24865: LD_INT 3
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 25
24874: PUSH
24875: LD_INT 4
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PPUSH
24886: CALL_OW 69
24890: PUSH
24891: LD_VAR 0 2
24895: ARRAY
24896: PPUSH
24897: LD_INT 22
24899: PUSH
24900: LD_INT 3
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 21
24909: PUSH
24910: LD_INT 3
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 30
24919: PUSH
24920: LD_INT 8
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: PPUSH
24932: CALL_OW 69
24936: PUSH
24937: LD_INT 1
24939: ARRAY
24940: PPUSH
24941: CALL_OW 120
24945: GO 24859
24947: POP
24948: POP
// for i = 3 to 4 do
24949: LD_ADDR_VAR 0 2
24953: PUSH
24954: DOUBLE
24955: LD_INT 3
24957: DEC
24958: ST_TO_ADDR
24959: LD_INT 4
24961: PUSH
24962: FOR_TO
24963: IFFALSE 25050
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
24965: LD_INT 22
24967: PUSH
24968: LD_INT 3
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 25
24977: PUSH
24978: LD_INT 4
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PPUSH
24989: CALL_OW 69
24993: PUSH
24994: LD_VAR 0 2
24998: ARRAY
24999: PPUSH
25000: LD_INT 22
25002: PUSH
25003: LD_INT 3
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 21
25012: PUSH
25013: LD_INT 3
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 30
25022: PUSH
25023: LD_INT 8
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: PPUSH
25035: CALL_OW 69
25039: PUSH
25040: LD_INT 2
25042: ARRAY
25043: PPUSH
25044: CALL_OW 120
25048: GO 24962
25050: POP
25051: POP
// end ; if GetBType ( building ) = b_barracks then
25052: LD_VAR 0 1
25056: PPUSH
25057: CALL_OW 266
25061: PUSH
25062: LD_INT 5
25064: EQUAL
25065: IFFALSE 25192
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25067: LD_ADDR_VAR 0 2
25071: PUSH
25072: LD_INT 22
25074: PUSH
25075: LD_INT 3
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 25
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 3
25094: PUSH
25095: LD_INT 54
25097: PUSH
25098: EMPTY
25099: LIST
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: LIST
25109: PPUSH
25110: CALL_OW 69
25114: PUSH
25115: FOR_IN
25116: IFFALSE 25134
// ComEnterUnit ( i , building ) ;
25118: LD_VAR 0 2
25122: PPUSH
25123: LD_VAR 0 1
25127: PPUSH
25128: CALL_OW 120
25132: GO 25115
25134: POP
25135: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25136: LD_INT 22
25138: PUSH
25139: LD_INT 3
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 30
25148: PUSH
25149: LD_INT 5
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PPUSH
25160: CALL_OW 69
25164: PUSH
25165: LD_INT 0
25167: EQUAL
25168: IFFALSE 25182
// ruArm1 = building else
25170: LD_ADDR_EXP 33
25174: PUSH
25175: LD_VAR 0 1
25179: ST_TO_ADDR
25180: GO 25192
// ruArm2 = building ;
25182: LD_ADDR_EXP 34
25186: PUSH
25187: LD_VAR 0 1
25191: ST_TO_ADDR
// end ; end ; end ;
25192: PPOPN 2
25194: END
// on EnterBuilding ( building , human ) do var rnd ;
25195: LD_INT 0
25197: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25198: LD_VAR 0 2
25202: PPUSH
25203: CALL_OW 255
25207: PUSH
25208: LD_INT 2
25210: EQUAL
25211: PUSH
25212: LD_VAR 0 2
25216: PPUSH
25217: CALL_OW 257
25221: PUSH
25222: LD_INT 1
25224: EQUAL
25225: AND
25226: PUSH
25227: LD_VAR 0 1
25231: PUSH
25232: LD_EXP 45
25236: EQUAL
25237: AND
25238: IFFALSE 25285
// begin wait ( 0 0$1 ) ;
25240: LD_INT 35
25242: PPUSH
25243: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25247: LD_ADDR_VAR 0 3
25251: PUSH
25252: LD_INT 1
25254: PPUSH
25255: LD_INT 100
25257: PPUSH
25258: CALL_OW 12
25262: ST_TO_ADDR
// if rnd > 50 then
25263: LD_VAR 0 3
25267: PUSH
25268: LD_INT 50
25270: GREATER
25271: IFFALSE 25285
// SetClass ( human , class_mortar ) ;
25273: LD_VAR 0 2
25277: PPUSH
25278: LD_INT 8
25280: PPUSH
25281: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25285: LD_VAR 0 2
25289: PUSH
25290: LD_INT 22
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 25
25302: PUSH
25303: LD_INT 12
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: IN
25319: IFFALSE 25369
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25321: LD_VAR 0 1
25325: PPUSH
25326: CALL_OW 266
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: IN
25341: IFFALSE 25357
// SetClass ( human , class_apeman_engineer ) else
25343: LD_VAR 0 2
25347: PPUSH
25348: LD_INT 16
25350: PPUSH
25351: CALL_OW 336
25355: GO 25369
// SetClass ( human , class_apeman_soldier ) ;
25357: LD_VAR 0 2
25361: PPUSH
25362: LD_INT 15
25364: PPUSH
25365: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25369: LD_VAR 0 2
25373: PPUSH
25374: CALL_OW 255
25378: PUSH
25379: LD_INT 3
25381: EQUAL
25382: PUSH
25383: LD_VAR 0 2
25387: PPUSH
25388: CALL_OW 257
25392: PUSH
25393: LD_INT 1
25395: EQUAL
25396: AND
25397: PUSH
25398: LD_VAR 0 1
25402: PUSH
25403: LD_EXP 33
25407: EQUAL
25408: PUSH
25409: LD_VAR 0 1
25413: PUSH
25414: LD_EXP 34
25418: EQUAL
25419: OR
25420: PUSH
25421: EMPTY
25422: LIST
25423: AND
25424: IFFALSE 25445
// begin wait ( 0 0$1 ) ;
25426: LD_INT 35
25428: PPUSH
25429: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25433: LD_VAR 0 2
25437: PPUSH
25438: LD_INT 9
25440: PPUSH
25441: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25445: LD_VAR 0 2
25449: PPUSH
25450: CALL_OW 255
25454: PUSH
25455: LD_INT 3
25457: EQUAL
25458: PUSH
25459: LD_VAR 0 2
25463: PPUSH
25464: CALL_OW 257
25468: PUSH
25469: LD_INT 9
25471: EQUAL
25472: AND
25473: PUSH
25474: LD_VAR 0 1
25478: PPUSH
25479: CALL_OW 266
25483: PUSH
25484: LD_INT 32
25486: EQUAL
25487: AND
25488: IFFALSE 25509
// begin wait ( 0 0$1 ) ;
25490: LD_INT 35
25492: PPUSH
25493: CALL_OW 67
// SetClass ( human , 1 ) ;
25497: LD_VAR 0 2
25501: PPUSH
25502: LD_INT 1
25504: PPUSH
25505: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25509: LD_VAR 0 2
25513: PPUSH
25514: CALL_OW 255
25518: PUSH
25519: LD_INT 3
25521: EQUAL
25522: PUSH
25523: LD_VAR 0 2
25527: PPUSH
25528: CALL_OW 257
25532: PUSH
25533: LD_INT 3
25535: EQUAL
25536: AND
25537: PUSH
25538: LD_VAR 0 1
25542: PUSH
25543: LD_EXP 35
25547: EQUAL
25548: AND
25549: IFFALSE 25563
// SetLives ( human , 1000 ) ;
25551: LD_VAR 0 2
25555: PPUSH
25556: LD_INT 1000
25558: PPUSH
25559: CALL_OW 234
// end ;
25563: PPOPN 3
25565: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25566: LD_VAR 0 1
25570: PUSH
25571: LD_INT 1
25573: EQUAL
25574: PUSH
25575: LD_VAR 0 2
25579: PUSH
25580: LD_INT 2
25582: EQUAL
25583: AND
25584: PUSH
25585: LD_INT 1
25587: PPUSH
25588: LD_INT 2
25590: PPUSH
25591: CALL_OW 81
25595: PUSH
25596: LD_INT 1
25598: EQUAL
25599: AND
25600: IFFALSE 25621
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25602: LD_EXP 24
25606: PPUSH
25607: LD_STRING D6b-Pow-1
25609: PPUSH
25610: CALL_OW 94
// YouLost ( Powell ) ;
25614: LD_STRING Powell
25616: PPUSH
25617: CALL_OW 104
// end ; end ;
25621: PPOPN 2
25623: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25624: LD_INT 23
25626: PPUSH
25627: LD_INT 22
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 21
25639: PUSH
25640: LD_INT 3
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PPUSH
25651: CALL_OW 70
25655: PUSH
25656: LD_INT 23
25658: PPUSH
25659: LD_INT 22
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 21
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PPUSH
25683: CALL_OW 70
25687: OR
25688: PUSH
25689: LD_INT 1
25691: PPUSH
25692: LD_INT 2
25694: PPUSH
25695: CALL_OW 81
25699: PUSH
25700: LD_INT 1
25702: EQUAL
25703: AND
25704: IFFALSE 25837
25706: GO 25708
25708: DISABLE
// begin enable ;
25709: ENABLE
// wait ( 0 0$10 ) ;
25710: LD_INT 350
25712: PPUSH
25713: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
25717: LD_INT 23
25719: PPUSH
25720: LD_INT 22
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 21
25732: PUSH
25733: LD_INT 3
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PPUSH
25744: CALL_OW 70
25748: PUSH
25749: LD_INT 23
25751: PPUSH
25752: LD_INT 22
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 21
25764: PUSH
25765: LD_INT 2
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PPUSH
25776: CALL_OW 70
25780: OR
25781: PUSH
25782: LD_INT 1
25784: PPUSH
25785: LD_INT 2
25787: PPUSH
25788: CALL_OW 81
25792: PUSH
25793: LD_INT 1
25795: EQUAL
25796: AND
25797: IFFALSE 25837
// begin disable ;
25799: DISABLE
// InGameOn ;
25800: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
25804: LD_INT 73
25806: PPUSH
25807: LD_INT 18
25809: PPUSH
25810: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
25814: LD_EXP 24
25818: PPUSH
25819: LD_STRING D6b-Pow-1
25821: PPUSH
25822: CALL_OW 94
// YouLost ( Powell ) ;
25826: LD_STRING Powell
25828: PPUSH
25829: CALL_OW 104
// InGameOff ;
25833: CALL_OW 9
// end ; end ;
25837: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
25838: LD_VAR 0 1
25842: PUSH
25843: LD_EXP 1
25847: EQUAL
25848: IFFALSE 25857
// YouLost ( JMM ) ;
25850: LD_STRING JMM
25852: PPUSH
25853: CALL_OW 104
// if unit = Khatam then
25857: LD_VAR 0 1
25861: PUSH
25862: LD_EXP 14
25866: EQUAL
25867: IFFALSE 25877
// KhatamStatus = 0 ;
25869: LD_ADDR_EXP 53
25873: PUSH
25874: LD_INT 0
25876: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
25877: LD_VAR 0 1
25881: PPUSH
25882: CALL_OW 255
25886: PUSH
25887: LD_INT 3
25889: EQUAL
25890: PUSH
25891: LD_VAR 0 1
25895: PPUSH
25896: CALL_OW 247
25900: PUSH
25901: LD_INT 3
25903: EQUAL
25904: AND
25905: IFFALSE 26597
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
25907: LD_VAR 0 1
25911: PPUSH
25912: CALL_OW 266
25916: PUSH
25917: LD_INT 31
25919: EQUAL
25920: PUSH
25921: LD_VAR 0 1
25925: PPUSH
25926: CALL_OW 266
25930: PUSH
25931: LD_INT 32
25933: EQUAL
25934: OR
25935: PUSH
25936: LD_VAR 0 1
25940: PPUSH
25941: CALL_OW 266
25945: PUSH
25946: LD_INT 36
25948: EQUAL
25949: OR
25950: PUSH
25951: LD_VAR 0 1
25955: PPUSH
25956: CALL_OW 266
25960: PUSH
25961: LD_INT 0
25963: EQUAL
25964: OR
25965: PUSH
25966: LD_VAR 0 1
25970: PPUSH
25971: CALL_OW 266
25975: PUSH
25976: LD_INT 24
25978: EQUAL
25979: OR
25980: PUSH
25981: LD_VAR 0 1
25985: PPUSH
25986: CALL_OW 266
25990: PUSH
25991: LD_INT 17
25993: EQUAL
25994: OR
25995: PUSH
25996: LD_VAR 0 1
26000: PPUSH
26001: CALL_OW 266
26005: PUSH
26006: LD_INT 25
26008: EQUAL
26009: OR
26010: PUSH
26011: LD_VAR 0 1
26015: PPUSH
26016: CALL_OW 266
26020: PUSH
26021: LD_INT 19
26023: EQUAL
26024: OR
26025: PUSH
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL_OW 266
26035: PUSH
26036: LD_INT 20
26038: EQUAL
26039: OR
26040: PUSH
26041: LD_VAR 0 1
26045: PPUSH
26046: CALL_OW 266
26050: PUSH
26051: LD_INT 18
26053: EQUAL
26054: OR
26055: PUSH
26056: LD_VAR 0 1
26060: PPUSH
26061: CALL_OW 266
26065: PUSH
26066: LD_INT 21
26068: EQUAL
26069: OR
26070: PUSH
26071: LD_VAR 0 1
26075: PPUSH
26076: CALL_OW 266
26080: PUSH
26081: LD_INT 23
26083: EQUAL
26084: OR
26085: PUSH
26086: LD_VAR 0 1
26090: PPUSH
26091: CALL_OW 266
26095: PUSH
26096: LD_INT 16
26098: EQUAL
26099: OR
26100: PUSH
26101: LD_VAR 0 1
26105: PPUSH
26106: CALL_OW 266
26110: PUSH
26111: LD_INT 6
26113: EQUAL
26114: OR
26115: PUSH
26116: LD_VAR 0 1
26120: PPUSH
26121: CALL_OW 266
26125: PUSH
26126: LD_INT 29
26128: EQUAL
26129: OR
26130: PUSH
26131: LD_VAR 0 1
26135: PPUSH
26136: CALL_OW 266
26140: PUSH
26141: LD_INT 26
26143: EQUAL
26144: OR
26145: PUSH
26146: LD_VAR 0 1
26150: PPUSH
26151: CALL_OW 266
26155: PUSH
26156: LD_INT 30
26158: EQUAL
26159: OR
26160: PUSH
26161: LD_VAR 0 1
26165: PPUSH
26166: CALL_OW 266
26170: PUSH
26171: LD_INT 28
26173: EQUAL
26174: OR
26175: PUSH
26176: LD_VAR 0 1
26180: PPUSH
26181: CALL_OW 266
26185: PUSH
26186: LD_INT 27
26188: EQUAL
26189: OR
26190: PUSH
26191: LD_VAR 0 1
26195: PPUSH
26196: CALL_OW 266
26200: PUSH
26201: LD_INT 33
26203: EQUAL
26204: OR
26205: PUSH
26206: LD_VAR 0 1
26210: PPUSH
26211: CALL_OW 266
26215: PUSH
26216: LD_INT 2
26218: EQUAL
26219: OR
26220: PUSH
26221: LD_VAR 0 1
26225: PPUSH
26226: CALL_OW 266
26230: PUSH
26231: LD_INT 4
26233: EQUAL
26234: OR
26235: IFFALSE 26321
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26237: LD_ADDR_EXP 42
26241: PUSH
26242: LD_EXP 42
26246: PUSH
26247: LD_VAR 0 1
26251: PPUSH
26252: CALL_OW 266
26256: ADD
26257: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26258: LD_ADDR_EXP 42
26262: PUSH
26263: LD_EXP 42
26267: PUSH
26268: LD_VAR 0 1
26272: PPUSH
26273: CALL_OW 250
26277: ADD
26278: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26279: LD_ADDR_EXP 42
26283: PUSH
26284: LD_EXP 42
26288: PUSH
26289: LD_VAR 0 1
26293: PPUSH
26294: CALL_OW 251
26298: ADD
26299: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26300: LD_ADDR_EXP 42
26304: PUSH
26305: LD_EXP 42
26309: PUSH
26310: LD_VAR 0 1
26314: PPUSH
26315: CALL_OW 254
26319: ADD
26320: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26321: LD_VAR 0 1
26325: PPUSH
26326: CALL_OW 266
26330: PUSH
26331: LD_INT 1
26333: EQUAL
26334: IFFALSE 26413
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26336: LD_ADDR_EXP 42
26340: PUSH
26341: LD_EXP 42
26345: PUSH
26346: LD_INT 0
26348: ADD
26349: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26350: LD_ADDR_EXP 42
26354: PUSH
26355: LD_EXP 42
26359: PUSH
26360: LD_VAR 0 1
26364: PPUSH
26365: CALL_OW 250
26369: ADD
26370: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26371: LD_ADDR_EXP 42
26375: PUSH
26376: LD_EXP 42
26380: PUSH
26381: LD_VAR 0 1
26385: PPUSH
26386: CALL_OW 251
26390: ADD
26391: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26392: LD_ADDR_EXP 42
26396: PUSH
26397: LD_EXP 42
26401: PUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL_OW 254
26411: ADD
26412: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26413: LD_VAR 0 1
26417: PPUSH
26418: CALL_OW 266
26422: PUSH
26423: LD_INT 3
26425: EQUAL
26426: IFFALSE 26505
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26428: LD_ADDR_EXP 42
26432: PUSH
26433: LD_EXP 42
26437: PUSH
26438: LD_INT 2
26440: ADD
26441: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26442: LD_ADDR_EXP 42
26446: PUSH
26447: LD_EXP 42
26451: PUSH
26452: LD_VAR 0 1
26456: PPUSH
26457: CALL_OW 250
26461: ADD
26462: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26463: LD_ADDR_EXP 42
26467: PUSH
26468: LD_EXP 42
26472: PUSH
26473: LD_VAR 0 1
26477: PPUSH
26478: CALL_OW 251
26482: ADD
26483: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26484: LD_ADDR_EXP 42
26488: PUSH
26489: LD_EXP 42
26493: PUSH
26494: LD_VAR 0 1
26498: PPUSH
26499: CALL_OW 254
26503: ADD
26504: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 266
26514: PUSH
26515: LD_INT 5
26517: EQUAL
26518: IFFALSE 26597
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26520: LD_ADDR_EXP 42
26524: PUSH
26525: LD_EXP 42
26529: PUSH
26530: LD_INT 4
26532: ADD
26533: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26534: LD_ADDR_EXP 42
26538: PUSH
26539: LD_EXP 42
26543: PUSH
26544: LD_VAR 0 1
26548: PPUSH
26549: CALL_OW 250
26553: ADD
26554: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26555: LD_ADDR_EXP 42
26559: PUSH
26560: LD_EXP 42
26564: PUSH
26565: LD_VAR 0 1
26569: PPUSH
26570: CALL_OW 251
26574: ADD
26575: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26576: LD_ADDR_EXP 42
26580: PUSH
26581: LD_EXP 42
26585: PUSH
26586: LD_VAR 0 1
26590: PPUSH
26591: CALL_OW 254
26595: ADD
26596: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26597: LD_EXP 51
26601: PUSH
26602: LD_VAR 0 1
26606: PPUSH
26607: CALL_OW 257
26611: PUSH
26612: LD_INT 3
26614: EQUAL
26615: AND
26616: PUSH
26617: LD_VAR 0 1
26621: PPUSH
26622: CALL_OW 255
26626: PUSH
26627: LD_INT 3
26629: EQUAL
26630: AND
26631: PUSH
26632: LD_EXP 35
26636: PPUSH
26637: CALL_OW 302
26641: AND
26642: PUSH
26643: LD_EXP 35
26647: PPUSH
26648: CALL_OW 255
26652: PUSH
26653: LD_INT 3
26655: EQUAL
26656: AND
26657: IFFALSE 26741
// begin ruMech := ruMech - 1 ;
26659: LD_ADDR_EXP 51
26663: PUSH
26664: LD_EXP 51
26668: PUSH
26669: LD_INT 1
26671: MINUS
26672: ST_TO_ADDR
// uc_side = 3 ;
26673: LD_ADDR_OWVAR 20
26677: PUSH
26678: LD_INT 3
26680: ST_TO_ADDR
// uc_nation = 3 ;
26681: LD_ADDR_OWVAR 21
26685: PUSH
26686: LD_INT 3
26688: ST_TO_ADDR
// hc_gallery :=  ;
26689: LD_ADDR_OWVAR 33
26693: PUSH
26694: LD_STRING 
26696: ST_TO_ADDR
// hc_name :=  ;
26697: LD_ADDR_OWVAR 26
26701: PUSH
26702: LD_STRING 
26704: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
26705: LD_INT 0
26707: PPUSH
26708: LD_EXP 36
26712: PPUSH
26713: LD_EXP 37
26717: PPUSH
26718: CALL_OW 12
26722: PPUSH
26723: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
26727: CALL_OW 44
26731: PPUSH
26732: LD_EXP 35
26736: PPUSH
26737: CALL_OW 52
// end ; end ;
26741: PPOPN 1
26743: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
26744: LD_ADDR_OWVAR 57
26748: PUSH
26749: LD_INT 0
26751: ST_TO_ADDR
// fastEnd = 1 ;
26752: LD_ADDR_EXP 63
26756: PUSH
26757: LD_INT 1
26759: ST_TO_ADDR
// FinishMission ;
26760: CALL 27928 0 0
// end ;
26764: PPOPN 1
26766: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL 43710 0 1
// end ; end_of_file
26776: PPOPN 1
26778: END
// export function CreateNature ; var i , un ; begin
26779: LD_INT 0
26781: PPUSH
26782: PPUSH
26783: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
26784: LD_ADDR_VAR 0 2
26788: PUSH
26789: DOUBLE
26790: LD_INT 1
26792: DEC
26793: ST_TO_ADDR
26794: LD_OWVAR 67
26798: PUSH
26799: LD_INT 1
26801: PPUSH
26802: LD_INT 5
26804: PPUSH
26805: CALL_OW 12
26809: PLUS
26810: PUSH
26811: FOR_TO
26812: IFFALSE 26957
// begin hc_sex = sex_male ;
26814: LD_ADDR_OWVAR 27
26818: PUSH
26819: LD_INT 1
26821: ST_TO_ADDR
// uc_side = 0 ;
26822: LD_ADDR_OWVAR 20
26826: PUSH
26827: LD_INT 0
26829: ST_TO_ADDR
// uc_nation = nation_nature ;
26830: LD_ADDR_OWVAR 21
26834: PUSH
26835: LD_INT 0
26837: ST_TO_ADDR
// hc_class = class_apeman ;
26838: LD_ADDR_OWVAR 28
26842: PUSH
26843: LD_INT 12
26845: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
26846: LD_ADDR_OWVAR 31
26850: PUSH
26851: LD_INT 2
26853: PPUSH
26854: LD_INT 7
26856: PPUSH
26857: CALL_OW 12
26861: PUSH
26862: LD_OWVAR 67
26866: PLUS
26867: PUSH
26868: LD_INT 2
26870: PPUSH
26871: LD_INT 10
26873: PPUSH
26874: CALL_OW 12
26878: PUSH
26879: LD_INT 2
26881: PPUSH
26882: LD_INT 10
26884: PPUSH
26885: CALL_OW 12
26889: PUSH
26890: LD_INT 2
26892: PPUSH
26893: LD_INT 10
26895: PPUSH
26896: CALL_OW 12
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26907: LD_ADDR_OWVAR 35
26911: PUSH
26912: LD_INT 5
26914: NEG
26915: PPUSH
26916: LD_INT 5
26918: PPUSH
26919: CALL_OW 12
26923: PUSH
26924: LD_OWVAR 67
26928: MUL
26929: ST_TO_ADDR
// un = CreateHuman ;
26930: LD_ADDR_VAR 0 3
26934: PUSH
26935: CALL_OW 44
26939: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
26940: LD_VAR 0 3
26944: PPUSH
26945: LD_INT 5
26947: PPUSH
26948: LD_INT 0
26950: PPUSH
26951: CALL_OW 49
// end ;
26955: GO 26811
26957: POP
26958: POP
// for i = 1 to Difficulty + 2 do
26959: LD_ADDR_VAR 0 2
26963: PUSH
26964: DOUBLE
26965: LD_INT 1
26967: DEC
26968: ST_TO_ADDR
26969: LD_OWVAR 67
26973: PUSH
26974: LD_INT 2
26976: PLUS
26977: PUSH
26978: FOR_TO
26979: IFFALSE 27088
// begin hc_sex = sex_male ;
26981: LD_ADDR_OWVAR 27
26985: PUSH
26986: LD_INT 1
26988: ST_TO_ADDR
// uc_side = 0 ;
26989: LD_ADDR_OWVAR 20
26993: PUSH
26994: LD_INT 0
26996: ST_TO_ADDR
// uc_nation = nation_nature ;
26997: LD_ADDR_OWVAR 21
27001: PUSH
27002: LD_INT 0
27004: ST_TO_ADDR
// hc_class = class_tiger ;
27005: LD_ADDR_OWVAR 28
27009: PUSH
27010: LD_INT 14
27012: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27013: LD_ADDR_OWVAR 31
27017: PUSH
27018: LD_EXP 37
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27038: LD_ADDR_OWVAR 35
27042: PUSH
27043: LD_INT 5
27045: NEG
27046: PPUSH
27047: LD_INT 5
27049: PPUSH
27050: CALL_OW 12
27054: PUSH
27055: LD_OWVAR 67
27059: MUL
27060: ST_TO_ADDR
// un = CreateHuman ;
27061: LD_ADDR_VAR 0 3
27065: PUSH
27066: CALL_OW 44
27070: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27071: LD_VAR 0 3
27075: PPUSH
27076: LD_INT 6
27078: PPUSH
27079: LD_INT 0
27081: PPUSH
27082: CALL_OW 49
// end ;
27086: GO 26978
27088: POP
27089: POP
// for i = 1 to rand ( 3 , 4 ) do
27090: LD_ADDR_VAR 0 2
27094: PUSH
27095: DOUBLE
27096: LD_INT 1
27098: DEC
27099: ST_TO_ADDR
27100: LD_INT 3
27102: PPUSH
27103: LD_INT 4
27105: PPUSH
27106: CALL_OW 12
27110: PUSH
27111: FOR_TO
27112: IFFALSE 27206
// begin hc_sex = sex_male ;
27114: LD_ADDR_OWVAR 27
27118: PUSH
27119: LD_INT 1
27121: ST_TO_ADDR
// uc_side = 0 ;
27122: LD_ADDR_OWVAR 20
27126: PUSH
27127: LD_INT 0
27129: ST_TO_ADDR
// uc_nation = nation_nature ;
27130: LD_ADDR_OWVAR 21
27134: PUSH
27135: LD_INT 0
27137: ST_TO_ADDR
// hc_class = 18 ;
27138: LD_ADDR_OWVAR 28
27142: PUSH
27143: LD_INT 18
27145: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27146: LD_ADDR_OWVAR 31
27150: PUSH
27151: LD_EXP 37
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: ST_TO_ADDR
// hc_agressivity = 0 ;
27171: LD_ADDR_OWVAR 35
27175: PUSH
27176: LD_INT 0
27178: ST_TO_ADDR
// un = CreateHuman ;
27179: LD_ADDR_VAR 0 3
27183: PUSH
27184: CALL_OW 44
27188: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27189: LD_VAR 0 3
27193: PPUSH
27194: LD_INT 6
27196: PPUSH
27197: LD_INT 0
27199: PPUSH
27200: CALL_OW 49
// end ;
27204: GO 27111
27206: POP
27207: POP
// end ; end_of_file
27208: LD_VAR 0 1
27212: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27213: LD_EXP 46
27217: PUSH
27218: LD_INT 1
27220: EQUAL
27221: IFFALSE 27309
27223: GO 27225
27225: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27226: LD_INT 7
27228: PPUSH
27229: LD_INT 5
27231: PPUSH
27232: LD_INT 4
27234: PUSH
27235: LD_INT 5
27237: PUSH
27238: LD_INT 6
27240: PUSH
27241: LD_INT 6
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: PUSH
27250: LD_OWVAR 67
27254: ARRAY
27255: PPUSH
27256: LD_EXP 36
27260: PPUSH
27261: LD_EXP 37
27265: PPUSH
27266: CALL_OW 12
27270: PPUSH
27271: LD_INT 2
27273: PPUSH
27274: LD_INT 1
27276: PPUSH
27277: LD_INT 1
27279: PPUSH
27280: EMPTY
27281: PPUSH
27282: LD_INT 25
27284: PUSH
27285: LD_INT 26
27287: PUSH
27288: LD_INT 27
27290: PUSH
27291: LD_INT 28
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: PPUSH
27300: EMPTY
27301: PPUSH
27302: LD_INT 1
27304: PPUSH
27305: CALL 17224 0 11
27309: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27310: LD_EXP 46
27314: PUSH
27315: LD_INT 1
27317: EQUAL
27318: IFFALSE 27410
27320: GO 27322
27322: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27323: LD_INT 5
27325: PPUSH
27326: LD_INT 2
27328: PPUSH
27329: LD_INT 5
27331: PUSH
27332: LD_INT 6
27334: PUSH
27335: LD_INT 8
27337: PUSH
27338: LD_INT 9
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: PUSH
27347: LD_OWVAR 67
27351: ARRAY
27352: PPUSH
27353: LD_INT 0
27355: PPUSH
27356: LD_INT 0
27358: PPUSH
27359: LD_INT 2
27361: PUSH
27362: LD_INT 4
27364: PUSH
27365: LD_INT 5
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: PUSH
27373: LD_OWVAR 67
27377: ARRAY
27378: PPUSH
27379: LD_INT 0
27381: PPUSH
27382: LD_EXP 36
27386: PPUSH
27387: LD_EXP 37
27391: PPUSH
27392: CALL_OW 12
27396: PPUSH
27397: LD_INT 7
27399: PPUSH
27400: LD_INT 9
27402: PPUSH
27403: LD_INT 1
27405: PPUSH
27406: CALL 18928 0 11
27410: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27411: LD_EXP 46
27415: PUSH
27416: LD_INT 1
27418: EQUAL
27419: IFFALSE 27428
27421: GO 27423
27423: DISABLE
// PrepareArabianSheik ;
27424: CALL 4713 0 0
27428: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27429: LD_EXP 29
27433: PUSH
27434: LD_EXP 64
27438: PUSH
27439: LD_INT 1
27441: EQUAL
27442: AND
27443: IFFALSE 27512
27445: GO 27447
27447: DISABLE
// begin enable ;
27448: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27449: LD_INT 6
27451: PPUSH
27452: LD_INT 3
27454: PPUSH
27455: LD_EXP 60
27459: PPUSH
27460: LD_INT 0
27462: PPUSH
27463: LD_OWVAR 67
27467: PPUSH
27468: LD_INT 0
27470: PPUSH
27471: LD_EXP 60
27475: PUSH
27476: LD_INT 3
27478: DIV
27479: PUSH
27480: LD_INT 1
27482: PLUS
27483: PPUSH
27484: LD_EXP 36
27488: PPUSH
27489: LD_EXP 37
27493: PPUSH
27494: CALL_OW 12
27498: PPUSH
27499: LD_INT 17
27501: PPUSH
27502: LD_INT 18
27504: PPUSH
27505: LD_INT 1
27507: PPUSH
27508: CALL 18928 0 11
// end ;
27512: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27513: LD_EXP 29
27517: PUSH
27518: LD_EXP 64
27522: PUSH
27523: LD_INT 1
27525: EQUAL
27526: AND
27527: IFFALSE 27604
27529: GO 27531
27531: DISABLE
// begin enable ;
27532: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27533: LD_INT 17
27535: PPUSH
27536: LD_INT 6
27538: PPUSH
27539: LD_EXP 59
27543: PPUSH
27544: LD_EXP 36
27548: PPUSH
27549: LD_EXP 37
27553: PPUSH
27554: CALL_OW 12
27558: PPUSH
27559: LD_INT 3
27561: PPUSH
27562: LD_INT 1
27564: PPUSH
27565: LD_INT 3
27567: PUSH
27568: LD_INT 3
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PPUSH
27575: LD_INT 43
27577: PUSH
27578: LD_INT 44
27580: PUSH
27581: LD_INT 45
27583: PUSH
27584: LD_INT 46
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: PPUSH
27593: EMPTY
27594: PPUSH
27595: EMPTY
27596: PPUSH
27597: LD_INT 1
27599: PPUSH
27600: CALL 17224 0 11
// end ;
27604: END
// every 10 10$00 trigger joinEpsilon do
27605: LD_EXP 29
27609: IFFALSE 27663
27611: GO 27613
27613: DISABLE
// begin enable ;
27614: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27615: LD_ADDR_EXP 59
27619: PUSH
27620: LD_EXP 59
27624: PUSH
27625: LD_INT 1
27627: PPUSH
27628: LD_OWVAR 67
27632: PPUSH
27633: CALL_OW 12
27637: PLUS
27638: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27639: LD_ADDR_EXP 60
27643: PUSH
27644: LD_EXP 60
27648: PUSH
27649: LD_INT 1
27651: PPUSH
27652: LD_OWVAR 67
27656: PPUSH
27657: CALL_OW 12
27661: PLUS
27662: ST_TO_ADDR
// end ;
27663: END
// every 21 21$0 trigger attackAvalaible = 1 do
27664: LD_EXP 64
27668: PUSH
27669: LD_INT 1
27671: EQUAL
27672: IFFALSE 27685
27674: GO 27676
27676: DISABLE
// attackAvalaible = 0 ; end_of_file
27677: LD_ADDR_EXP 64
27681: PUSH
27682: LD_INT 0
27684: ST_TO_ADDR
27685: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
27686: LD_INT 54
27688: PPUSH
27689: LD_INT 1
27691: PPUSH
27692: CALL_OW 321
27696: PUSH
27697: LD_INT 2
27699: EQUAL
27700: PUSH
27701: LD_INT 55
27703: PPUSH
27704: LD_INT 1
27706: PPUSH
27707: CALL_OW 321
27711: PUSH
27712: LD_INT 2
27714: EQUAL
27715: AND
27716: PUSH
27717: LD_INT 21
27719: PPUSH
27720: LD_INT 1
27722: PPUSH
27723: CALL_OW 321
27727: PUSH
27728: LD_INT 2
27730: EQUAL
27731: AND
27732: PUSH
27733: LD_INT 22
27735: PPUSH
27736: LD_INT 1
27738: PPUSH
27739: CALL_OW 321
27743: PUSH
27744: LD_INT 2
27746: EQUAL
27747: AND
27748: PUSH
27749: LD_INT 12
27751: PPUSH
27752: LD_INT 1
27754: PPUSH
27755: CALL_OW 321
27759: PUSH
27760: LD_INT 1
27762: EQUAL
27763: PUSH
27764: LD_INT 32
27766: PPUSH
27767: LD_INT 1
27769: PPUSH
27770: CALL_OW 321
27774: PUSH
27775: LD_INT 1
27777: EQUAL
27778: OR
27779: PUSH
27780: EMPTY
27781: LIST
27782: AND
27783: PUSH
27784: LD_EXP 48
27788: PUSH
27789: LD_INT 1
27791: EQUAL
27792: AND
27793: PUSH
27794: LD_INT 22
27796: PUSH
27797: LD_INT 3
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 21
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PPUSH
27818: CALL_OW 69
27822: PUSH
27823: LD_INT 0
27825: EQUAL
27826: AND
27827: IFFALSE 27883
27829: GO 27831
27831: DISABLE
// begin case query ( QEndMission ) of 1 :
27832: LD_STRING QEndMission
27834: PPUSH
27835: CALL_OW 97
27839: PUSH
27840: LD_INT 1
27842: DOUBLE
27843: EQUAL
27844: IFTRUE 27848
27846: GO 27859
27848: POP
// begin end_the_mission_allowed = true ;
27849: LD_ADDR_OWVAR 57
27853: PUSH
27854: LD_INT 1
27856: ST_TO_ADDR
// end ; 2 :
27857: GO 27883
27859: LD_INT 2
27861: DOUBLE
27862: EQUAL
27863: IFTRUE 27867
27865: GO 27882
27867: POP
// begin fastEnd = 1 ;
27868: LD_ADDR_EXP 63
27872: PUSH
27873: LD_INT 1
27875: ST_TO_ADDR
// FinishMission ;
27876: CALL 27928 0 0
// end ; end ;
27880: GO 27883
27882: POP
// end ;
27883: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
27884: LD_EXP 58
27888: PUSH
27889: LD_EXP 57
27893: NOT
27894: AND
27895: PUSH
27896: LD_INT 22
27898: PUSH
27899: LD_INT 3
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PPUSH
27906: CALL_OW 69
27910: PUSH
27911: LD_INT 0
27913: EQUAL
27914: AND
27915: IFFALSE 27927
27917: GO 27919
27919: DISABLE
// SetAchievement ( ACH_TACT ) ;
27920: LD_STRING ACH_TACT
27922: PPUSH
27923: CALL_OW 543
27927: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
27928: LD_INT 0
27930: PPUSH
27931: PPUSH
27932: PPUSH
27933: PPUSH
// if not snipersTrained then
27934: LD_EXP 62
27938: NOT
27939: IFFALSE 27948
// SetAchievement ( ACH_SNIPER ) ;
27941: LD_STRING ACH_SNIPER
27943: PPUSH
27944: CALL_OW 543
// m1 := false ;
27948: LD_ADDR_VAR 0 2
27952: PUSH
27953: LD_INT 0
27955: ST_TO_ADDR
// m2 := false ;
27956: LD_ADDR_VAR 0 3
27960: PUSH
27961: LD_INT 0
27963: ST_TO_ADDR
// m3 := false ;
27964: LD_ADDR_VAR 0 4
27968: PUSH
27969: LD_INT 0
27971: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
27972: LD_EXP 53
27976: PPUSH
27977: LD_STRING 10_KhatamStatus_1
27979: PPUSH
27980: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
27984: LD_EXP 52
27988: PPUSH
27989: LD_STRING 10_GensherEscape_1
27991: PPUSH
27992: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
27996: LD_INT 12
27998: PPUSH
27999: LD_INT 1
28001: PPUSH
28002: CALL_OW 321
28006: PUSH
28007: LD_INT 2
28009: EQUAL
28010: IFFALSE 28032
// begin AddMedal ( sights , 1 ) ;
28012: LD_STRING sights
28014: PPUSH
28015: LD_INT 1
28017: PPUSH
28018: CALL_OW 101
// m1 := true ;
28022: LD_ADDR_VAR 0 2
28026: PUSH
28027: LD_INT 1
28029: ST_TO_ADDR
// end else
28030: GO 28043
// begin AddMedal ( sights , - 1 ) ;
28032: LD_STRING sights
28034: PPUSH
28035: LD_INT 1
28037: NEG
28038: PPUSH
28039: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28043: LD_INT 32
28045: PPUSH
28046: LD_INT 1
28048: PPUSH
28049: CALL_OW 321
28053: PUSH
28054: LD_INT 2
28056: EQUAL
28057: IFFALSE 28079
// begin AddMedal ( computers , 1 ) ;
28059: LD_STRING computers
28061: PPUSH
28062: LD_INT 1
28064: PPUSH
28065: CALL_OW 101
// m2 := true ;
28069: LD_ADDR_VAR 0 3
28073: PUSH
28074: LD_INT 1
28076: ST_TO_ADDR
// end else
28077: GO 28090
// begin AddMedal ( computers , - 1 ) ;
28079: LD_STRING computers
28081: PPUSH
28082: LD_INT 1
28084: NEG
28085: PPUSH
28086: CALL_OW 101
// end ; if arabianEscape = 0 then
28090: LD_EXP 47
28094: PUSH
28095: LD_INT 0
28097: EQUAL
28098: IFFALSE 28130
// begin AddMedal ( renegades , 2 ) ;
28100: LD_STRING renegades
28102: PPUSH
28103: LD_INT 2
28105: PPUSH
28106: CALL_OW 101
// m3 := true ;
28110: LD_ADDR_VAR 0 4
28114: PUSH
28115: LD_INT 1
28117: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28118: LD_INT 0
28120: PPUSH
28121: LD_STRING 10_ScientistsEscape_1
28123: PPUSH
28124: CALL_OW 39
// end else
28128: GO 28141
// begin AddMedal ( renegades , - 1 ) ;
28130: LD_STRING renegades
28132: PPUSH
28133: LD_INT 1
28135: NEG
28136: PPUSH
28137: CALL_OW 101
// end ; SaveEpsilonBase ;
28141: CALL 28927 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28145: LD_VAR 0 2
28149: PUSH
28150: LD_VAR 0 3
28154: AND
28155: PUSH
28156: LD_VAR 0 4
28160: AND
28161: PUSH
28162: LD_OWVAR 67
28166: PUSH
28167: LD_INT 3
28169: GREATEREQUAL
28170: AND
28171: IFFALSE 28183
// SetAchievementEX ( ACH_AMER , 10 ) ;
28173: LD_STRING ACH_AMER
28175: PPUSH
28176: LD_INT 10
28178: PPUSH
28179: CALL_OW 564
// if tick <= 40 40$00 then
28183: LD_OWVAR 1
28187: PUSH
28188: LD_INT 84000
28190: LESSEQUAL
28191: IFFALSE 28207
// begin wait ( 3 ) ;
28193: LD_INT 3
28195: PPUSH
28196: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28200: LD_STRING ACH_ASPEED_10
28202: PPUSH
28203: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28207: LD_STRING Main
28209: PPUSH
28210: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28214: LD_INT 22
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 23
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 21
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: LD_INT 25
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 25
28259: PUSH
28260: LD_INT 2
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 25
28269: PUSH
28270: LD_INT 3
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 25
28279: PUSH
28280: LD_INT 4
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 25
28289: PUSH
28290: LD_INT 5
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 25
28299: PUSH
28300: LD_INT 8
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: PPUSH
28322: CALL_OW 69
28326: PPUSH
28327: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28331: LD_EXP 1
28335: PPUSH
28336: LD_EXP 54
28340: PUSH
28341: LD_STRING JMM
28343: STR
28344: PPUSH
28345: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28349: LD_EXP 2
28353: PPUSH
28354: LD_EXP 54
28358: PUSH
28359: LD_STRING Brown
28361: STR
28362: PPUSH
28363: CALL 11408 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28367: LD_EXP 3
28371: PPUSH
28372: LD_EXP 54
28376: PUSH
28377: LD_STRING Donaldson
28379: STR
28380: PPUSH
28381: CALL 11408 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28385: LD_EXP 4
28389: PPUSH
28390: LD_EXP 54
28394: PUSH
28395: LD_STRING Bobby
28397: STR
28398: PPUSH
28399: CALL 11408 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28403: LD_EXP 5
28407: PPUSH
28408: LD_EXP 54
28412: PUSH
28413: LD_STRING Cyrus
28415: STR
28416: PPUSH
28417: CALL 11408 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28421: LD_EXP 6
28425: PPUSH
28426: LD_EXP 54
28430: PUSH
28431: LD_STRING Lisa
28433: STR
28434: PPUSH
28435: CALL 11408 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28439: LD_EXP 7
28443: PPUSH
28444: LD_EXP 54
28448: PUSH
28449: LD_STRING Frank
28451: STR
28452: PPUSH
28453: CALL 11408 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28457: LD_EXP 8
28461: PPUSH
28462: LD_EXP 54
28466: PUSH
28467: LD_STRING Kikuchi
28469: STR
28470: PPUSH
28471: CALL 11408 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28475: LD_EXP 9
28479: PPUSH
28480: LD_EXP 54
28484: PUSH
28485: LD_STRING Houten
28487: STR
28488: PPUSH
28489: CALL 11408 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28493: LD_EXP 10
28497: PPUSH
28498: LD_EXP 54
28502: PUSH
28503: LD_STRING Gary
28505: STR
28506: PPUSH
28507: CALL 11408 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28511: LD_EXP 19
28515: PPUSH
28516: LD_EXP 54
28520: PUSH
28521: LD_STRING Cornell
28523: STR
28524: PPUSH
28525: CALL 11408 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28529: LD_EXP 11
28533: PPUSH
28534: LD_EXP 54
28538: PUSH
28539: LD_STRING Simms
28541: STR
28542: PPUSH
28543: CALL 11408 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28547: LD_EXP 12
28551: PPUSH
28552: LD_EXP 54
28556: PUSH
28557: LD_STRING Denis
28559: STR
28560: PPUSH
28561: CALL 11408 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28565: LD_EXP 13
28569: PPUSH
28570: LD_EXP 54
28574: PUSH
28575: LD_STRING Joan
28577: STR
28578: PPUSH
28579: CALL 11408 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28583: LD_EXP 15
28587: PPUSH
28588: LD_EXP 54
28592: PUSH
28593: LD_STRING Gladstone
28595: STR
28596: PPUSH
28597: CALL 11408 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28601: LD_EXP 17
28605: PPUSH
28606: LD_EXP 54
28610: PUSH
28611: LD_STRING DeltaDoctor
28613: STR
28614: PPUSH
28615: CALL 11408 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28619: LD_EXP 22
28623: PPUSH
28624: LD_STRING 10c_lock
28626: PPUSH
28627: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28631: LD_INT 50
28633: PUSH
28634: EMPTY
28635: LIST
28636: PUSH
28637: LD_INT 22
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 21
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: LD_INT 25
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 25
28672: PUSH
28673: LD_INT 2
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 25
28682: PUSH
28683: LD_INT 3
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 25
28692: PUSH
28693: LD_INT 4
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 25
28702: PUSH
28703: LD_INT 5
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 25
28712: PUSH
28713: LD_INT 8
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: PPUSH
28735: CALL_OW 69
28739: PUSH
28740: LD_EXP 1
28744: PUSH
28745: LD_EXP 2
28749: PUSH
28750: LD_EXP 3
28754: PUSH
28755: LD_EXP 4
28759: PUSH
28760: LD_EXP 5
28764: PUSH
28765: LD_EXP 6
28769: PUSH
28770: LD_EXP 7
28774: PUSH
28775: LD_EXP 15
28779: PUSH
28780: LD_EXP 8
28784: PUSH
28785: LD_EXP 12
28789: PUSH
28790: LD_EXP 13
28794: PUSH
28795: LD_EXP 9
28799: PUSH
28800: LD_EXP 11
28804: PUSH
28805: LD_EXP 10
28809: PUSH
28810: LD_EXP 17
28814: PUSH
28815: LD_EXP 19
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: DIFF
28838: PPUSH
28839: LD_STRING 10_other_survivors
28841: PPUSH
28842: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
28846: LD_INT 50
28848: PUSH
28849: EMPTY
28850: LIST
28851: PUSH
28852: LD_INT 22
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 21
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: LD_INT 25
28877: PUSH
28878: LD_INT 16
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 25
28887: PUSH
28888: LD_INT 12
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: PPUSH
28906: CALL_OW 69
28910: PPUSH
28911: LD_STRING 10_ape
28913: PPUSH
28914: CALL_OW 38
// YouWin ;
28918: CALL_OW 103
// end ;
28922: LD_VAR 0 1
28926: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
28927: LD_INT 0
28929: PPUSH
28930: PPUSH
28931: PPUSH
28932: PPUSH
// epsilonBase = [ ] ;
28933: LD_ADDR_VAR 0 2
28937: PUSH
28938: EMPTY
28939: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
28940: LD_ADDR_VAR 0 3
28944: PUSH
28945: LD_INT 22
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 21
28957: PUSH
28958: LD_INT 3
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 50
28967: PUSH
28968: EMPTY
28969: LIST
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: PPUSH
28976: CALL_OW 69
28980: ST_TO_ADDR
// for i in buildings do
28981: LD_ADDR_VAR 0 4
28985: PUSH
28986: LD_VAR 0 3
28990: PUSH
28991: FOR_IN
28992: IFFALSE 29444
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
28994: LD_VAR 0 4
28998: PPUSH
28999: CALL_OW 266
29003: PUSH
29004: LD_INT 6
29006: PUSH
29007: LD_INT 7
29009: PUSH
29010: LD_INT 8
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: LIST
29017: IN
29018: IFFALSE 29132
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29020: LD_ADDR_VAR 0 2
29024: PUSH
29025: LD_VAR 0 2
29029: PUSH
29030: LD_VAR 0 4
29034: PPUSH
29035: CALL_OW 266
29039: PUSH
29040: LD_VAR 0 4
29044: PPUSH
29045: CALL_OW 250
29049: PUSH
29050: LD_VAR 0 4
29054: PPUSH
29055: CALL_OW 251
29059: PUSH
29060: LD_VAR 0 4
29064: PPUSH
29065: CALL_OW 254
29069: PUSH
29070: LD_VAR 0 4
29074: PPUSH
29075: CALL_OW 267
29079: PUSH
29080: LD_VAR 0 4
29084: PPUSH
29085: CALL_OW 248
29089: PUSH
29090: LD_VAR 0 4
29094: PPUSH
29095: LD_INT 1
29097: PPUSH
29098: CALL_OW 268
29102: PUSH
29103: LD_VAR 0 4
29107: PPUSH
29108: LD_INT 2
29110: PPUSH
29111: CALL_OW 268
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: ADD
29129: ST_TO_ADDR
29130: GO 29442
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29132: LD_VAR 0 4
29136: PPUSH
29137: CALL_OW 266
29141: PUSH
29142: LD_INT 32
29144: EQUAL
29145: PUSH
29146: LD_VAR 0 4
29150: PPUSH
29151: CALL_OW 266
29155: PUSH
29156: LD_INT 33
29158: EQUAL
29159: OR
29160: IFFALSE 29257
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29162: LD_ADDR_VAR 0 2
29166: PUSH
29167: LD_VAR 0 2
29171: PUSH
29172: LD_VAR 0 4
29176: PPUSH
29177: CALL_OW 266
29181: PUSH
29182: LD_VAR 0 4
29186: PPUSH
29187: CALL_OW 250
29191: PUSH
29192: LD_VAR 0 4
29196: PPUSH
29197: CALL_OW 251
29201: PUSH
29202: LD_VAR 0 4
29206: PPUSH
29207: CALL_OW 254
29211: PUSH
29212: LD_VAR 0 4
29216: PPUSH
29217: CALL_OW 267
29221: PUSH
29222: LD_VAR 0 4
29226: PPUSH
29227: CALL_OW 248
29231: PUSH
29232: LD_VAR 0 4
29236: PPUSH
29237: CALL_OW 269
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: ADD
29254: ST_TO_ADDR
29255: GO 29442
// if GetBType ( i ) = b_factory then
29257: LD_VAR 0 4
29261: PPUSH
29262: CALL_OW 266
29266: PUSH
29267: LD_INT 3
29269: EQUAL
29270: IFFALSE 29360
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29272: LD_ADDR_VAR 0 2
29276: PUSH
29277: LD_VAR 0 2
29281: PPUSH
29282: LD_INT 1
29284: PPUSH
29285: LD_VAR 0 4
29289: PPUSH
29290: CALL_OW 266
29294: PUSH
29295: LD_VAR 0 4
29299: PPUSH
29300: CALL_OW 250
29304: PUSH
29305: LD_VAR 0 4
29309: PPUSH
29310: CALL_OW 251
29314: PUSH
29315: LD_VAR 0 4
29319: PPUSH
29320: CALL_OW 254
29324: PUSH
29325: LD_VAR 0 4
29329: PPUSH
29330: CALL_OW 267
29334: PUSH
29335: LD_VAR 0 4
29339: PPUSH
29340: CALL_OW 248
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: PPUSH
29353: CALL_OW 2
29357: ST_TO_ADDR
29358: GO 29442
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29360: LD_ADDR_VAR 0 2
29364: PUSH
29365: LD_VAR 0 2
29369: PUSH
29370: LD_VAR 0 4
29374: PPUSH
29375: CALL_OW 266
29379: PUSH
29380: LD_VAR 0 4
29384: PPUSH
29385: CALL_OW 250
29389: PUSH
29390: LD_VAR 0 4
29394: PPUSH
29395: CALL_OW 251
29399: PUSH
29400: LD_VAR 0 4
29404: PPUSH
29405: CALL_OW 254
29409: PUSH
29410: LD_VAR 0 4
29414: PPUSH
29415: CALL_OW 267
29419: PUSH
29420: LD_VAR 0 4
29424: PPUSH
29425: CALL_OW 248
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: PUSH
29438: EMPTY
29439: LIST
29440: ADD
29441: ST_TO_ADDR
// end ;
29442: GO 28991
29444: POP
29445: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29446: LD_VAR 0 2
29450: PPUSH
29451: LD_STRING 10_EpsilonBase
29453: PPUSH
29454: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29458: LD_INT 19
29460: PPUSH
29461: LD_STRING 10_EpsilonEnv
29463: PPUSH
29464: CALL 29473 0 2
// end ;
29468: LD_VAR 0 1
29472: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29473: LD_INT 0
29475: PPUSH
// result := ListEnvironmentArea ( area ) ;
29476: LD_ADDR_VAR 0 3
29480: PUSH
29481: LD_VAR 0 1
29485: PPUSH
29486: CALL_OW 353
29490: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29491: LD_VAR 0 3
29495: PPUSH
29496: LD_VAR 0 2
29500: PPUSH
29501: CALL_OW 39
// end ; end_of_file
29505: LD_VAR 0 3
29509: RET
// every 0 0$01 do var timer ;
29510: GO 29512
29512: DISABLE
29513: LD_INT 0
29515: PPUSH
// begin timer := 0 0$20 ;
29516: LD_ADDR_VAR 0 1
29520: PUSH
29521: LD_INT 700
29523: ST_TO_ADDR
// repeat wait ( timer ) ;
29524: LD_VAR 0 1
29528: PPUSH
29529: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
29533: LD_EXP 56
29537: PUSH
29538: LD_INT 6
29540: GREATEREQUAL
29541: PUSH
29542: LD_EXP 56
29546: PUSH
29547: LD_INT 14
29549: LESS
29550: AND
29551: IFFALSE 29567
// timer := timer + 0 0$3 ;
29553: LD_ADDR_VAR 0 1
29557: PUSH
29558: LD_VAR 0 1
29562: PUSH
29563: LD_INT 105
29565: PLUS
29566: ST_TO_ADDR
// if cratesSpawned >= 14 then
29567: LD_EXP 56
29571: PUSH
29572: LD_INT 14
29574: GREATEREQUAL
29575: IFFALSE 29591
// timer := timer + 0 0$6 ;
29577: LD_ADDR_VAR 0 1
29581: PUSH
29582: LD_VAR 0 1
29586: PUSH
29587: LD_INT 210
29589: PLUS
29590: ST_TO_ADDR
// if timer > 2 2$00 then
29591: LD_VAR 0 1
29595: PUSH
29596: LD_INT 4200
29598: GREATER
29599: IFFALSE 29609
// timer := 0 0$45 ;
29601: LD_ADDR_VAR 0 1
29605: PUSH
29606: LD_INT 1575
29608: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29609: LD_INT 1
29611: PPUSH
29612: LD_INT 5
29614: PPUSH
29615: CALL_OW 12
29619: PPUSH
29620: LD_INT 16
29622: PPUSH
29623: LD_INT 1
29625: PPUSH
29626: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29630: LD_ADDR_EXP 56
29634: PUSH
29635: LD_EXP 56
29639: PUSH
29640: LD_INT 1
29642: PLUS
29643: ST_TO_ADDR
// until false ;
29644: LD_INT 0
29646: IFFALSE 29524
// end ; end_of_file
29648: PPOPN 1
29650: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
29651: LD_INT 0
29653: PPUSH
// ar_miner := 81 ;
29654: LD_ADDR_EXP 76
29658: PUSH
29659: LD_INT 81
29661: ST_TO_ADDR
// ar_crane := 88 ;
29662: LD_ADDR_EXP 75
29666: PUSH
29667: LD_INT 88
29669: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29670: LD_ADDR_EXP 70
29674: PUSH
29675: LD_INT 89
29677: ST_TO_ADDR
// us_hack := 99 ;
29678: LD_ADDR_EXP 71
29682: PUSH
29683: LD_INT 99
29685: ST_TO_ADDR
// us_artillery := 97 ;
29686: LD_ADDR_EXP 72
29690: PUSH
29691: LD_INT 97
29693: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29694: LD_ADDR_EXP 73
29698: PUSH
29699: LD_INT 91
29701: ST_TO_ADDR
// ar_mortar := 92 ;
29702: LD_ADDR_EXP 74
29706: PUSH
29707: LD_INT 92
29709: ST_TO_ADDR
// ru_radar := 98 ;
29710: LD_ADDR_EXP 69
29714: PUSH
29715: LD_INT 98
29717: ST_TO_ADDR
// tech_Artillery := 80 ;
29718: LD_ADDR_EXP 77
29722: PUSH
29723: LD_INT 80
29725: ST_TO_ADDR
// tech_RadMat := 81 ;
29726: LD_ADDR_EXP 78
29730: PUSH
29731: LD_INT 81
29733: ST_TO_ADDR
// tech_BasicTools := 82 ;
29734: LD_ADDR_EXP 79
29738: PUSH
29739: LD_INT 82
29741: ST_TO_ADDR
// tech_Cargo := 83 ;
29742: LD_ADDR_EXP 80
29746: PUSH
29747: LD_INT 83
29749: ST_TO_ADDR
// tech_Track := 84 ;
29750: LD_ADDR_EXP 81
29754: PUSH
29755: LD_INT 84
29757: ST_TO_ADDR
// tech_Crane := 85 ;
29758: LD_ADDR_EXP 82
29762: PUSH
29763: LD_INT 85
29765: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29766: LD_ADDR_EXP 83
29770: PUSH
29771: LD_INT 86
29773: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29774: LD_ADDR_EXP 84
29778: PUSH
29779: LD_INT 87
29781: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
29782: LD_ADDR_EXP 85
29786: PUSH
29787: LD_INT 88
29789: ST_TO_ADDR
// class_mastodont := 31 ;
29790: LD_ADDR_EXP 86
29794: PUSH
29795: LD_INT 31
29797: ST_TO_ADDR
// class_horse := 21 ;
29798: LD_ADDR_EXP 87
29802: PUSH
29803: LD_INT 21
29805: ST_TO_ADDR
// end ;
29806: LD_VAR 0 1
29810: RET
// every 1 do
29811: GO 29813
29813: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
29814: CALL 29651 0 0
29818: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29819: LD_INT 0
29821: PPUSH
// if p2 = 100 then
29822: LD_VAR 0 2
29826: PUSH
29827: LD_INT 100
29829: EQUAL
29830: IFFALSE 30833
// begin if not StreamModeActive then
29832: LD_EXP 88
29836: NOT
29837: IFFALSE 29847
// StreamModeActive := true ;
29839: LD_ADDR_EXP 88
29843: PUSH
29844: LD_INT 1
29846: ST_TO_ADDR
// if p3 = 0 then
29847: LD_VAR 0 3
29851: PUSH
29852: LD_INT 0
29854: EQUAL
29855: IFFALSE 29861
// InitStreamMode ;
29857: CALL 30993 0 0
// if p3 = 1 then
29861: LD_VAR 0 3
29865: PUSH
29866: LD_INT 1
29868: EQUAL
29869: IFFALSE 29879
// sRocket := true ;
29871: LD_ADDR_EXP 93
29875: PUSH
29876: LD_INT 1
29878: ST_TO_ADDR
// if p3 = 2 then
29879: LD_VAR 0 3
29883: PUSH
29884: LD_INT 2
29886: EQUAL
29887: IFFALSE 29897
// sSpeed := true ;
29889: LD_ADDR_EXP 92
29893: PUSH
29894: LD_INT 1
29896: ST_TO_ADDR
// if p3 = 3 then
29897: LD_VAR 0 3
29901: PUSH
29902: LD_INT 3
29904: EQUAL
29905: IFFALSE 29915
// sEngine := true ;
29907: LD_ADDR_EXP 94
29911: PUSH
29912: LD_INT 1
29914: ST_TO_ADDR
// if p3 = 4 then
29915: LD_VAR 0 3
29919: PUSH
29920: LD_INT 4
29922: EQUAL
29923: IFFALSE 29933
// sSpec := true ;
29925: LD_ADDR_EXP 91
29929: PUSH
29930: LD_INT 1
29932: ST_TO_ADDR
// if p3 = 5 then
29933: LD_VAR 0 3
29937: PUSH
29938: LD_INT 5
29940: EQUAL
29941: IFFALSE 29951
// sLevel := true ;
29943: LD_ADDR_EXP 95
29947: PUSH
29948: LD_INT 1
29950: ST_TO_ADDR
// if p3 = 6 then
29951: LD_VAR 0 3
29955: PUSH
29956: LD_INT 6
29958: EQUAL
29959: IFFALSE 29969
// sArmoury := true ;
29961: LD_ADDR_EXP 96
29965: PUSH
29966: LD_INT 1
29968: ST_TO_ADDR
// if p3 = 7 then
29969: LD_VAR 0 3
29973: PUSH
29974: LD_INT 7
29976: EQUAL
29977: IFFALSE 29987
// sRadar := true ;
29979: LD_ADDR_EXP 97
29983: PUSH
29984: LD_INT 1
29986: ST_TO_ADDR
// if p3 = 8 then
29987: LD_VAR 0 3
29991: PUSH
29992: LD_INT 8
29994: EQUAL
29995: IFFALSE 30005
// sBunker := true ;
29997: LD_ADDR_EXP 98
30001: PUSH
30002: LD_INT 1
30004: ST_TO_ADDR
// if p3 = 9 then
30005: LD_VAR 0 3
30009: PUSH
30010: LD_INT 9
30012: EQUAL
30013: IFFALSE 30023
// sHack := true ;
30015: LD_ADDR_EXP 99
30019: PUSH
30020: LD_INT 1
30022: ST_TO_ADDR
// if p3 = 10 then
30023: LD_VAR 0 3
30027: PUSH
30028: LD_INT 10
30030: EQUAL
30031: IFFALSE 30041
// sFire := true ;
30033: LD_ADDR_EXP 100
30037: PUSH
30038: LD_INT 1
30040: ST_TO_ADDR
// if p3 = 11 then
30041: LD_VAR 0 3
30045: PUSH
30046: LD_INT 11
30048: EQUAL
30049: IFFALSE 30059
// sRefresh := true ;
30051: LD_ADDR_EXP 101
30055: PUSH
30056: LD_INT 1
30058: ST_TO_ADDR
// if p3 = 12 then
30059: LD_VAR 0 3
30063: PUSH
30064: LD_INT 12
30066: EQUAL
30067: IFFALSE 30077
// sExp := true ;
30069: LD_ADDR_EXP 102
30073: PUSH
30074: LD_INT 1
30076: ST_TO_ADDR
// if p3 = 13 then
30077: LD_VAR 0 3
30081: PUSH
30082: LD_INT 13
30084: EQUAL
30085: IFFALSE 30095
// sDepot := true ;
30087: LD_ADDR_EXP 103
30091: PUSH
30092: LD_INT 1
30094: ST_TO_ADDR
// if p3 = 14 then
30095: LD_VAR 0 3
30099: PUSH
30100: LD_INT 14
30102: EQUAL
30103: IFFALSE 30113
// sFlag := true ;
30105: LD_ADDR_EXP 104
30109: PUSH
30110: LD_INT 1
30112: ST_TO_ADDR
// if p3 = 15 then
30113: LD_VAR 0 3
30117: PUSH
30118: LD_INT 15
30120: EQUAL
30121: IFFALSE 30131
// sKamikadze := true ;
30123: LD_ADDR_EXP 112
30127: PUSH
30128: LD_INT 1
30130: ST_TO_ADDR
// if p3 = 16 then
30131: LD_VAR 0 3
30135: PUSH
30136: LD_INT 16
30138: EQUAL
30139: IFFALSE 30149
// sTroll := true ;
30141: LD_ADDR_EXP 113
30145: PUSH
30146: LD_INT 1
30148: ST_TO_ADDR
// if p3 = 17 then
30149: LD_VAR 0 3
30153: PUSH
30154: LD_INT 17
30156: EQUAL
30157: IFFALSE 30167
// sSlow := true ;
30159: LD_ADDR_EXP 114
30163: PUSH
30164: LD_INT 1
30166: ST_TO_ADDR
// if p3 = 18 then
30167: LD_VAR 0 3
30171: PUSH
30172: LD_INT 18
30174: EQUAL
30175: IFFALSE 30185
// sLack := true ;
30177: LD_ADDR_EXP 115
30181: PUSH
30182: LD_INT 1
30184: ST_TO_ADDR
// if p3 = 19 then
30185: LD_VAR 0 3
30189: PUSH
30190: LD_INT 19
30192: EQUAL
30193: IFFALSE 30203
// sTank := true ;
30195: LD_ADDR_EXP 117
30199: PUSH
30200: LD_INT 1
30202: ST_TO_ADDR
// if p3 = 20 then
30203: LD_VAR 0 3
30207: PUSH
30208: LD_INT 20
30210: EQUAL
30211: IFFALSE 30221
// sRemote := true ;
30213: LD_ADDR_EXP 118
30217: PUSH
30218: LD_INT 1
30220: ST_TO_ADDR
// if p3 = 21 then
30221: LD_VAR 0 3
30225: PUSH
30226: LD_INT 21
30228: EQUAL
30229: IFFALSE 30239
// sPowell := true ;
30231: LD_ADDR_EXP 119
30235: PUSH
30236: LD_INT 1
30238: ST_TO_ADDR
// if p3 = 22 then
30239: LD_VAR 0 3
30243: PUSH
30244: LD_INT 22
30246: EQUAL
30247: IFFALSE 30257
// sTeleport := true ;
30249: LD_ADDR_EXP 122
30253: PUSH
30254: LD_INT 1
30256: ST_TO_ADDR
// if p3 = 23 then
30257: LD_VAR 0 3
30261: PUSH
30262: LD_INT 23
30264: EQUAL
30265: IFFALSE 30275
// sOilTower := true ;
30267: LD_ADDR_EXP 124
30271: PUSH
30272: LD_INT 1
30274: ST_TO_ADDR
// if p3 = 24 then
30275: LD_VAR 0 3
30279: PUSH
30280: LD_INT 24
30282: EQUAL
30283: IFFALSE 30293
// sShovel := true ;
30285: LD_ADDR_EXP 125
30289: PUSH
30290: LD_INT 1
30292: ST_TO_ADDR
// if p3 = 25 then
30293: LD_VAR 0 3
30297: PUSH
30298: LD_INT 25
30300: EQUAL
30301: IFFALSE 30311
// sSheik := true ;
30303: LD_ADDR_EXP 126
30307: PUSH
30308: LD_INT 1
30310: ST_TO_ADDR
// if p3 = 26 then
30311: LD_VAR 0 3
30315: PUSH
30316: LD_INT 26
30318: EQUAL
30319: IFFALSE 30329
// sEarthquake := true ;
30321: LD_ADDR_EXP 128
30325: PUSH
30326: LD_INT 1
30328: ST_TO_ADDR
// if p3 = 27 then
30329: LD_VAR 0 3
30333: PUSH
30334: LD_INT 27
30336: EQUAL
30337: IFFALSE 30347
// sAI := true ;
30339: LD_ADDR_EXP 129
30343: PUSH
30344: LD_INT 1
30346: ST_TO_ADDR
// if p3 = 28 then
30347: LD_VAR 0 3
30351: PUSH
30352: LD_INT 28
30354: EQUAL
30355: IFFALSE 30365
// sCargo := true ;
30357: LD_ADDR_EXP 132
30361: PUSH
30362: LD_INT 1
30364: ST_TO_ADDR
// if p3 = 29 then
30365: LD_VAR 0 3
30369: PUSH
30370: LD_INT 29
30372: EQUAL
30373: IFFALSE 30383
// sDLaser := true ;
30375: LD_ADDR_EXP 133
30379: PUSH
30380: LD_INT 1
30382: ST_TO_ADDR
// if p3 = 30 then
30383: LD_VAR 0 3
30387: PUSH
30388: LD_INT 30
30390: EQUAL
30391: IFFALSE 30401
// sExchange := true ;
30393: LD_ADDR_EXP 134
30397: PUSH
30398: LD_INT 1
30400: ST_TO_ADDR
// if p3 = 31 then
30401: LD_VAR 0 3
30405: PUSH
30406: LD_INT 31
30408: EQUAL
30409: IFFALSE 30419
// sFac := true ;
30411: LD_ADDR_EXP 135
30415: PUSH
30416: LD_INT 1
30418: ST_TO_ADDR
// if p3 = 32 then
30419: LD_VAR 0 3
30423: PUSH
30424: LD_INT 32
30426: EQUAL
30427: IFFALSE 30437
// sPower := true ;
30429: LD_ADDR_EXP 136
30433: PUSH
30434: LD_INT 1
30436: ST_TO_ADDR
// if p3 = 33 then
30437: LD_VAR 0 3
30441: PUSH
30442: LD_INT 33
30444: EQUAL
30445: IFFALSE 30455
// sRandom := true ;
30447: LD_ADDR_EXP 137
30451: PUSH
30452: LD_INT 1
30454: ST_TO_ADDR
// if p3 = 34 then
30455: LD_VAR 0 3
30459: PUSH
30460: LD_INT 34
30462: EQUAL
30463: IFFALSE 30473
// sShield := true ;
30465: LD_ADDR_EXP 138
30469: PUSH
30470: LD_INT 1
30472: ST_TO_ADDR
// if p3 = 35 then
30473: LD_VAR 0 3
30477: PUSH
30478: LD_INT 35
30480: EQUAL
30481: IFFALSE 30491
// sTime := true ;
30483: LD_ADDR_EXP 139
30487: PUSH
30488: LD_INT 1
30490: ST_TO_ADDR
// if p3 = 36 then
30491: LD_VAR 0 3
30495: PUSH
30496: LD_INT 36
30498: EQUAL
30499: IFFALSE 30509
// sTools := true ;
30501: LD_ADDR_EXP 140
30505: PUSH
30506: LD_INT 1
30508: ST_TO_ADDR
// if p3 = 101 then
30509: LD_VAR 0 3
30513: PUSH
30514: LD_INT 101
30516: EQUAL
30517: IFFALSE 30527
// sSold := true ;
30519: LD_ADDR_EXP 105
30523: PUSH
30524: LD_INT 1
30526: ST_TO_ADDR
// if p3 = 102 then
30527: LD_VAR 0 3
30531: PUSH
30532: LD_INT 102
30534: EQUAL
30535: IFFALSE 30545
// sDiff := true ;
30537: LD_ADDR_EXP 106
30541: PUSH
30542: LD_INT 1
30544: ST_TO_ADDR
// if p3 = 103 then
30545: LD_VAR 0 3
30549: PUSH
30550: LD_INT 103
30552: EQUAL
30553: IFFALSE 30563
// sFog := true ;
30555: LD_ADDR_EXP 109
30559: PUSH
30560: LD_INT 1
30562: ST_TO_ADDR
// if p3 = 104 then
30563: LD_VAR 0 3
30567: PUSH
30568: LD_INT 104
30570: EQUAL
30571: IFFALSE 30581
// sReset := true ;
30573: LD_ADDR_EXP 110
30577: PUSH
30578: LD_INT 1
30580: ST_TO_ADDR
// if p3 = 105 then
30581: LD_VAR 0 3
30585: PUSH
30586: LD_INT 105
30588: EQUAL
30589: IFFALSE 30599
// sSun := true ;
30591: LD_ADDR_EXP 111
30595: PUSH
30596: LD_INT 1
30598: ST_TO_ADDR
// if p3 = 106 then
30599: LD_VAR 0 3
30603: PUSH
30604: LD_INT 106
30606: EQUAL
30607: IFFALSE 30617
// sTiger := true ;
30609: LD_ADDR_EXP 107
30613: PUSH
30614: LD_INT 1
30616: ST_TO_ADDR
// if p3 = 107 then
30617: LD_VAR 0 3
30621: PUSH
30622: LD_INT 107
30624: EQUAL
30625: IFFALSE 30635
// sBomb := true ;
30627: LD_ADDR_EXP 108
30631: PUSH
30632: LD_INT 1
30634: ST_TO_ADDR
// if p3 = 108 then
30635: LD_VAR 0 3
30639: PUSH
30640: LD_INT 108
30642: EQUAL
30643: IFFALSE 30653
// sWound := true ;
30645: LD_ADDR_EXP 116
30649: PUSH
30650: LD_INT 1
30652: ST_TO_ADDR
// if p3 = 109 then
30653: LD_VAR 0 3
30657: PUSH
30658: LD_INT 109
30660: EQUAL
30661: IFFALSE 30671
// sBetray := true ;
30663: LD_ADDR_EXP 120
30667: PUSH
30668: LD_INT 1
30670: ST_TO_ADDR
// if p3 = 110 then
30671: LD_VAR 0 3
30675: PUSH
30676: LD_INT 110
30678: EQUAL
30679: IFFALSE 30689
// sContamin := true ;
30681: LD_ADDR_EXP 121
30685: PUSH
30686: LD_INT 1
30688: ST_TO_ADDR
// if p3 = 111 then
30689: LD_VAR 0 3
30693: PUSH
30694: LD_INT 111
30696: EQUAL
30697: IFFALSE 30707
// sOil := true ;
30699: LD_ADDR_EXP 123
30703: PUSH
30704: LD_INT 1
30706: ST_TO_ADDR
// if p3 = 112 then
30707: LD_VAR 0 3
30711: PUSH
30712: LD_INT 112
30714: EQUAL
30715: IFFALSE 30725
// sStu := true ;
30717: LD_ADDR_EXP 127
30721: PUSH
30722: LD_INT 1
30724: ST_TO_ADDR
// if p3 = 113 then
30725: LD_VAR 0 3
30729: PUSH
30730: LD_INT 113
30732: EQUAL
30733: IFFALSE 30743
// sBazooka := true ;
30735: LD_ADDR_EXP 130
30739: PUSH
30740: LD_INT 1
30742: ST_TO_ADDR
// if p3 = 114 then
30743: LD_VAR 0 3
30747: PUSH
30748: LD_INT 114
30750: EQUAL
30751: IFFALSE 30761
// sMortar := true ;
30753: LD_ADDR_EXP 131
30757: PUSH
30758: LD_INT 1
30760: ST_TO_ADDR
// if p3 = 115 then
30761: LD_VAR 0 3
30765: PUSH
30766: LD_INT 115
30768: EQUAL
30769: IFFALSE 30779
// sRanger := true ;
30771: LD_ADDR_EXP 141
30775: PUSH
30776: LD_INT 1
30778: ST_TO_ADDR
// if p3 = 116 then
30779: LD_VAR 0 3
30783: PUSH
30784: LD_INT 116
30786: EQUAL
30787: IFFALSE 30797
// sComputer := true ;
30789: LD_ADDR_EXP 142
30793: PUSH
30794: LD_INT 1
30796: ST_TO_ADDR
// if p3 = 117 then
30797: LD_VAR 0 3
30801: PUSH
30802: LD_INT 117
30804: EQUAL
30805: IFFALSE 30815
// s30 := true ;
30807: LD_ADDR_EXP 143
30811: PUSH
30812: LD_INT 1
30814: ST_TO_ADDR
// if p3 = 118 then
30815: LD_VAR 0 3
30819: PUSH
30820: LD_INT 118
30822: EQUAL
30823: IFFALSE 30833
// s60 := true ;
30825: LD_ADDR_EXP 144
30829: PUSH
30830: LD_INT 1
30832: ST_TO_ADDR
// end ; if p2 = 101 then
30833: LD_VAR 0 2
30837: PUSH
30838: LD_INT 101
30840: EQUAL
30841: IFFALSE 30969
// begin case p3 of 1 :
30843: LD_VAR 0 3
30847: PUSH
30848: LD_INT 1
30850: DOUBLE
30851: EQUAL
30852: IFTRUE 30856
30854: GO 30863
30856: POP
// hHackUnlimitedResources ; 2 :
30857: CALL 42565 0 0
30861: GO 30969
30863: LD_INT 2
30865: DOUBLE
30866: EQUAL
30867: IFTRUE 30871
30869: GO 30878
30871: POP
// hHackSetLevel10 ; 3 :
30872: CALL 42698 0 0
30876: GO 30969
30878: LD_INT 3
30880: DOUBLE
30881: EQUAL
30882: IFTRUE 30886
30884: GO 30893
30886: POP
// hHackSetLevel10YourUnits ; 4 :
30887: CALL 42783 0 0
30891: GO 30969
30893: LD_INT 4
30895: DOUBLE
30896: EQUAL
30897: IFTRUE 30901
30899: GO 30908
30901: POP
// hHackInvincible ; 5 :
30902: CALL 43231 0 0
30906: GO 30969
30908: LD_INT 5
30910: DOUBLE
30911: EQUAL
30912: IFTRUE 30916
30914: GO 30923
30916: POP
// hHackInvisible ; 6 :
30917: CALL 43342 0 0
30921: GO 30969
30923: LD_INT 6
30925: DOUBLE
30926: EQUAL
30927: IFTRUE 30931
30929: GO 30938
30931: POP
// hHackChangeYourSide ; 7 :
30932: CALL 43399 0 0
30936: GO 30969
30938: LD_INT 7
30940: DOUBLE
30941: EQUAL
30942: IFTRUE 30946
30944: GO 30953
30946: POP
// hHackChangeUnitSide ; 8 :
30947: CALL 43441 0 0
30951: GO 30969
30953: LD_INT 8
30955: DOUBLE
30956: EQUAL
30957: IFTRUE 30961
30959: GO 30968
30961: POP
// hHackFog ; end ;
30962: CALL 43542 0 0
30966: GO 30969
30968: POP
// end ; end ;
30969: LD_VAR 0 7
30973: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
30974: GO 30976
30976: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
30977: LD_STRING initStreamRollete();
30979: PPUSH
30980: CALL_OW 559
// InitStreamMode ;
30984: CALL 30993 0 0
// DefineStreamItems ( ) ;
30988: CALL 31457 0 0
// end ;
30992: END
// function InitStreamMode ; begin
30993: LD_INT 0
30995: PPUSH
// streamModeActive := false ;
30996: LD_ADDR_EXP 88
31000: PUSH
31001: LD_INT 0
31003: ST_TO_ADDR
// normalCounter := 36 ;
31004: LD_ADDR_EXP 89
31008: PUSH
31009: LD_INT 36
31011: ST_TO_ADDR
// hardcoreCounter := 16 ;
31012: LD_ADDR_EXP 90
31016: PUSH
31017: LD_INT 16
31019: ST_TO_ADDR
// sRocket := false ;
31020: LD_ADDR_EXP 93
31024: PUSH
31025: LD_INT 0
31027: ST_TO_ADDR
// sSpeed := false ;
31028: LD_ADDR_EXP 92
31032: PUSH
31033: LD_INT 0
31035: ST_TO_ADDR
// sEngine := false ;
31036: LD_ADDR_EXP 94
31040: PUSH
31041: LD_INT 0
31043: ST_TO_ADDR
// sSpec := false ;
31044: LD_ADDR_EXP 91
31048: PUSH
31049: LD_INT 0
31051: ST_TO_ADDR
// sLevel := false ;
31052: LD_ADDR_EXP 95
31056: PUSH
31057: LD_INT 0
31059: ST_TO_ADDR
// sArmoury := false ;
31060: LD_ADDR_EXP 96
31064: PUSH
31065: LD_INT 0
31067: ST_TO_ADDR
// sRadar := false ;
31068: LD_ADDR_EXP 97
31072: PUSH
31073: LD_INT 0
31075: ST_TO_ADDR
// sBunker := false ;
31076: LD_ADDR_EXP 98
31080: PUSH
31081: LD_INT 0
31083: ST_TO_ADDR
// sHack := false ;
31084: LD_ADDR_EXP 99
31088: PUSH
31089: LD_INT 0
31091: ST_TO_ADDR
// sFire := false ;
31092: LD_ADDR_EXP 100
31096: PUSH
31097: LD_INT 0
31099: ST_TO_ADDR
// sRefresh := false ;
31100: LD_ADDR_EXP 101
31104: PUSH
31105: LD_INT 0
31107: ST_TO_ADDR
// sExp := false ;
31108: LD_ADDR_EXP 102
31112: PUSH
31113: LD_INT 0
31115: ST_TO_ADDR
// sDepot := false ;
31116: LD_ADDR_EXP 103
31120: PUSH
31121: LD_INT 0
31123: ST_TO_ADDR
// sFlag := false ;
31124: LD_ADDR_EXP 104
31128: PUSH
31129: LD_INT 0
31131: ST_TO_ADDR
// sKamikadze := false ;
31132: LD_ADDR_EXP 112
31136: PUSH
31137: LD_INT 0
31139: ST_TO_ADDR
// sTroll := false ;
31140: LD_ADDR_EXP 113
31144: PUSH
31145: LD_INT 0
31147: ST_TO_ADDR
// sSlow := false ;
31148: LD_ADDR_EXP 114
31152: PUSH
31153: LD_INT 0
31155: ST_TO_ADDR
// sLack := false ;
31156: LD_ADDR_EXP 115
31160: PUSH
31161: LD_INT 0
31163: ST_TO_ADDR
// sTank := false ;
31164: LD_ADDR_EXP 117
31168: PUSH
31169: LD_INT 0
31171: ST_TO_ADDR
// sRemote := false ;
31172: LD_ADDR_EXP 118
31176: PUSH
31177: LD_INT 0
31179: ST_TO_ADDR
// sPowell := false ;
31180: LD_ADDR_EXP 119
31184: PUSH
31185: LD_INT 0
31187: ST_TO_ADDR
// sTeleport := false ;
31188: LD_ADDR_EXP 122
31192: PUSH
31193: LD_INT 0
31195: ST_TO_ADDR
// sOilTower := false ;
31196: LD_ADDR_EXP 124
31200: PUSH
31201: LD_INT 0
31203: ST_TO_ADDR
// sShovel := false ;
31204: LD_ADDR_EXP 125
31208: PUSH
31209: LD_INT 0
31211: ST_TO_ADDR
// sSheik := false ;
31212: LD_ADDR_EXP 126
31216: PUSH
31217: LD_INT 0
31219: ST_TO_ADDR
// sEarthquake := false ;
31220: LD_ADDR_EXP 128
31224: PUSH
31225: LD_INT 0
31227: ST_TO_ADDR
// sAI := false ;
31228: LD_ADDR_EXP 129
31232: PUSH
31233: LD_INT 0
31235: ST_TO_ADDR
// sCargo := false ;
31236: LD_ADDR_EXP 132
31240: PUSH
31241: LD_INT 0
31243: ST_TO_ADDR
// sDLaser := false ;
31244: LD_ADDR_EXP 133
31248: PUSH
31249: LD_INT 0
31251: ST_TO_ADDR
// sExchange := false ;
31252: LD_ADDR_EXP 134
31256: PUSH
31257: LD_INT 0
31259: ST_TO_ADDR
// sFac := false ;
31260: LD_ADDR_EXP 135
31264: PUSH
31265: LD_INT 0
31267: ST_TO_ADDR
// sPower := false ;
31268: LD_ADDR_EXP 136
31272: PUSH
31273: LD_INT 0
31275: ST_TO_ADDR
// sRandom := false ;
31276: LD_ADDR_EXP 137
31280: PUSH
31281: LD_INT 0
31283: ST_TO_ADDR
// sShield := false ;
31284: LD_ADDR_EXP 138
31288: PUSH
31289: LD_INT 0
31291: ST_TO_ADDR
// sTime := false ;
31292: LD_ADDR_EXP 139
31296: PUSH
31297: LD_INT 0
31299: ST_TO_ADDR
// sTools := false ;
31300: LD_ADDR_EXP 140
31304: PUSH
31305: LD_INT 0
31307: ST_TO_ADDR
// sSold := false ;
31308: LD_ADDR_EXP 105
31312: PUSH
31313: LD_INT 0
31315: ST_TO_ADDR
// sDiff := false ;
31316: LD_ADDR_EXP 106
31320: PUSH
31321: LD_INT 0
31323: ST_TO_ADDR
// sFog := false ;
31324: LD_ADDR_EXP 109
31328: PUSH
31329: LD_INT 0
31331: ST_TO_ADDR
// sReset := false ;
31332: LD_ADDR_EXP 110
31336: PUSH
31337: LD_INT 0
31339: ST_TO_ADDR
// sSun := false ;
31340: LD_ADDR_EXP 111
31344: PUSH
31345: LD_INT 0
31347: ST_TO_ADDR
// sTiger := false ;
31348: LD_ADDR_EXP 107
31352: PUSH
31353: LD_INT 0
31355: ST_TO_ADDR
// sBomb := false ;
31356: LD_ADDR_EXP 108
31360: PUSH
31361: LD_INT 0
31363: ST_TO_ADDR
// sWound := false ;
31364: LD_ADDR_EXP 116
31368: PUSH
31369: LD_INT 0
31371: ST_TO_ADDR
// sBetray := false ;
31372: LD_ADDR_EXP 120
31376: PUSH
31377: LD_INT 0
31379: ST_TO_ADDR
// sContamin := false ;
31380: LD_ADDR_EXP 121
31384: PUSH
31385: LD_INT 0
31387: ST_TO_ADDR
// sOil := false ;
31388: LD_ADDR_EXP 123
31392: PUSH
31393: LD_INT 0
31395: ST_TO_ADDR
// sStu := false ;
31396: LD_ADDR_EXP 127
31400: PUSH
31401: LD_INT 0
31403: ST_TO_ADDR
// sBazooka := false ;
31404: LD_ADDR_EXP 130
31408: PUSH
31409: LD_INT 0
31411: ST_TO_ADDR
// sMortar := false ;
31412: LD_ADDR_EXP 131
31416: PUSH
31417: LD_INT 0
31419: ST_TO_ADDR
// sRanger := false ;
31420: LD_ADDR_EXP 141
31424: PUSH
31425: LD_INT 0
31427: ST_TO_ADDR
// sComputer := false ;
31428: LD_ADDR_EXP 142
31432: PUSH
31433: LD_INT 0
31435: ST_TO_ADDR
// s30 := false ;
31436: LD_ADDR_EXP 143
31440: PUSH
31441: LD_INT 0
31443: ST_TO_ADDR
// s60 := false ;
31444: LD_ADDR_EXP 144
31448: PUSH
31449: LD_INT 0
31451: ST_TO_ADDR
// end ;
31452: LD_VAR 0 1
31456: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
31457: LD_INT 0
31459: PPUSH
31460: PPUSH
31461: PPUSH
31462: PPUSH
31463: PPUSH
// result := [ ] ;
31464: LD_ADDR_VAR 0 1
31468: PUSH
31469: EMPTY
31470: ST_TO_ADDR
// if campaign_id = 1 then
31471: LD_OWVAR 69
31475: PUSH
31476: LD_INT 1
31478: EQUAL
31479: IFFALSE 34645
// begin case mission_number of 1 :
31481: LD_OWVAR 70
31485: PUSH
31486: LD_INT 1
31488: DOUBLE
31489: EQUAL
31490: IFTRUE 31494
31492: GO 31570
31494: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
31495: LD_ADDR_VAR 0 1
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: LD_INT 4
31505: PUSH
31506: LD_INT 11
31508: PUSH
31509: LD_INT 12
31511: PUSH
31512: LD_INT 15
31514: PUSH
31515: LD_INT 16
31517: PUSH
31518: LD_INT 22
31520: PUSH
31521: LD_INT 23
31523: PUSH
31524: LD_INT 26
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 101
31540: PUSH
31541: LD_INT 102
31543: PUSH
31544: LD_INT 106
31546: PUSH
31547: LD_INT 116
31549: PUSH
31550: LD_INT 117
31552: PUSH
31553: LD_INT 118
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: ST_TO_ADDR
31568: GO 34643
31570: LD_INT 2
31572: DOUBLE
31573: EQUAL
31574: IFTRUE 31578
31576: GO 31662
31578: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
31579: LD_ADDR_VAR 0 1
31583: PUSH
31584: LD_INT 2
31586: PUSH
31587: LD_INT 4
31589: PUSH
31590: LD_INT 11
31592: PUSH
31593: LD_INT 12
31595: PUSH
31596: LD_INT 15
31598: PUSH
31599: LD_INT 16
31601: PUSH
31602: LD_INT 22
31604: PUSH
31605: LD_INT 23
31607: PUSH
31608: LD_INT 26
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 101
31624: PUSH
31625: LD_INT 102
31627: PUSH
31628: LD_INT 105
31630: PUSH
31631: LD_INT 106
31633: PUSH
31634: LD_INT 108
31636: PUSH
31637: LD_INT 116
31639: PUSH
31640: LD_INT 117
31642: PUSH
31643: LD_INT 118
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: ST_TO_ADDR
31660: GO 34643
31662: LD_INT 3
31664: DOUBLE
31665: EQUAL
31666: IFTRUE 31670
31668: GO 31758
31670: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
31671: LD_ADDR_VAR 0 1
31675: PUSH
31676: LD_INT 2
31678: PUSH
31679: LD_INT 4
31681: PUSH
31682: LD_INT 5
31684: PUSH
31685: LD_INT 11
31687: PUSH
31688: LD_INT 12
31690: PUSH
31691: LD_INT 15
31693: PUSH
31694: LD_INT 16
31696: PUSH
31697: LD_INT 22
31699: PUSH
31700: LD_INT 26
31702: PUSH
31703: LD_INT 36
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 101
31720: PUSH
31721: LD_INT 102
31723: PUSH
31724: LD_INT 105
31726: PUSH
31727: LD_INT 106
31729: PUSH
31730: LD_INT 108
31732: PUSH
31733: LD_INT 116
31735: PUSH
31736: LD_INT 117
31738: PUSH
31739: LD_INT 118
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: ST_TO_ADDR
31756: GO 34643
31758: LD_INT 4
31760: DOUBLE
31761: EQUAL
31762: IFTRUE 31766
31764: GO 31862
31766: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
31767: LD_ADDR_VAR 0 1
31771: PUSH
31772: LD_INT 2
31774: PUSH
31775: LD_INT 4
31777: PUSH
31778: LD_INT 5
31780: PUSH
31781: LD_INT 8
31783: PUSH
31784: LD_INT 11
31786: PUSH
31787: LD_INT 12
31789: PUSH
31790: LD_INT 15
31792: PUSH
31793: LD_INT 16
31795: PUSH
31796: LD_INT 22
31798: PUSH
31799: LD_INT 23
31801: PUSH
31802: LD_INT 26
31804: PUSH
31805: LD_INT 36
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 101
31824: PUSH
31825: LD_INT 102
31827: PUSH
31828: LD_INT 105
31830: PUSH
31831: LD_INT 106
31833: PUSH
31834: LD_INT 108
31836: PUSH
31837: LD_INT 116
31839: PUSH
31840: LD_INT 117
31842: PUSH
31843: LD_INT 118
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: ST_TO_ADDR
31860: GO 34643
31862: LD_INT 5
31864: DOUBLE
31865: EQUAL
31866: IFTRUE 31870
31868: GO 31982
31870: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
31871: LD_ADDR_VAR 0 1
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: LD_INT 4
31881: PUSH
31882: LD_INT 5
31884: PUSH
31885: LD_INT 6
31887: PUSH
31888: LD_INT 8
31890: PUSH
31891: LD_INT 11
31893: PUSH
31894: LD_INT 12
31896: PUSH
31897: LD_INT 15
31899: PUSH
31900: LD_INT 16
31902: PUSH
31903: LD_INT 22
31905: PUSH
31906: LD_INT 23
31908: PUSH
31909: LD_INT 25
31911: PUSH
31912: LD_INT 26
31914: PUSH
31915: LD_INT 36
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 101
31936: PUSH
31937: LD_INT 102
31939: PUSH
31940: LD_INT 105
31942: PUSH
31943: LD_INT 106
31945: PUSH
31946: LD_INT 108
31948: PUSH
31949: LD_INT 109
31951: PUSH
31952: LD_INT 112
31954: PUSH
31955: LD_INT 116
31957: PUSH
31958: LD_INT 117
31960: PUSH
31961: LD_INT 118
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: ST_TO_ADDR
31980: GO 34643
31982: LD_INT 6
31984: DOUBLE
31985: EQUAL
31986: IFTRUE 31990
31988: GO 32122
31990: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
31991: LD_ADDR_VAR 0 1
31995: PUSH
31996: LD_INT 2
31998: PUSH
31999: LD_INT 4
32001: PUSH
32002: LD_INT 5
32004: PUSH
32005: LD_INT 6
32007: PUSH
32008: LD_INT 8
32010: PUSH
32011: LD_INT 11
32013: PUSH
32014: LD_INT 12
32016: PUSH
32017: LD_INT 15
32019: PUSH
32020: LD_INT 16
32022: PUSH
32023: LD_INT 20
32025: PUSH
32026: LD_INT 21
32028: PUSH
32029: LD_INT 22
32031: PUSH
32032: LD_INT 23
32034: PUSH
32035: LD_INT 25
32037: PUSH
32038: LD_INT 26
32040: PUSH
32041: LD_INT 30
32043: PUSH
32044: LD_INT 31
32046: PUSH
32047: LD_INT 32
32049: PUSH
32050: LD_INT 36
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 101
32076: PUSH
32077: LD_INT 102
32079: PUSH
32080: LD_INT 105
32082: PUSH
32083: LD_INT 106
32085: PUSH
32086: LD_INT 108
32088: PUSH
32089: LD_INT 109
32091: PUSH
32092: LD_INT 112
32094: PUSH
32095: LD_INT 116
32097: PUSH
32098: LD_INT 117
32100: PUSH
32101: LD_INT 118
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: ST_TO_ADDR
32120: GO 34643
32122: LD_INT 7
32124: DOUBLE
32125: EQUAL
32126: IFTRUE 32130
32128: GO 32242
32130: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
32131: LD_ADDR_VAR 0 1
32135: PUSH
32136: LD_INT 2
32138: PUSH
32139: LD_INT 4
32141: PUSH
32142: LD_INT 5
32144: PUSH
32145: LD_INT 7
32147: PUSH
32148: LD_INT 11
32150: PUSH
32151: LD_INT 12
32153: PUSH
32154: LD_INT 15
32156: PUSH
32157: LD_INT 16
32159: PUSH
32160: LD_INT 20
32162: PUSH
32163: LD_INT 21
32165: PUSH
32166: LD_INT 22
32168: PUSH
32169: LD_INT 23
32171: PUSH
32172: LD_INT 25
32174: PUSH
32175: LD_INT 26
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 101
32196: PUSH
32197: LD_INT 102
32199: PUSH
32200: LD_INT 103
32202: PUSH
32203: LD_INT 105
32205: PUSH
32206: LD_INT 106
32208: PUSH
32209: LD_INT 108
32211: PUSH
32212: LD_INT 112
32214: PUSH
32215: LD_INT 116
32217: PUSH
32218: LD_INT 117
32220: PUSH
32221: LD_INT 118
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: ST_TO_ADDR
32240: GO 34643
32242: LD_INT 8
32244: DOUBLE
32245: EQUAL
32246: IFTRUE 32250
32248: GO 32390
32250: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
32251: LD_ADDR_VAR 0 1
32255: PUSH
32256: LD_INT 2
32258: PUSH
32259: LD_INT 4
32261: PUSH
32262: LD_INT 5
32264: PUSH
32265: LD_INT 6
32267: PUSH
32268: LD_INT 7
32270: PUSH
32271: LD_INT 8
32273: PUSH
32274: LD_INT 11
32276: PUSH
32277: LD_INT 12
32279: PUSH
32280: LD_INT 15
32282: PUSH
32283: LD_INT 16
32285: PUSH
32286: LD_INT 20
32288: PUSH
32289: LD_INT 21
32291: PUSH
32292: LD_INT 22
32294: PUSH
32295: LD_INT 23
32297: PUSH
32298: LD_INT 25
32300: PUSH
32301: LD_INT 26
32303: PUSH
32304: LD_INT 30
32306: PUSH
32307: LD_INT 31
32309: PUSH
32310: LD_INT 32
32312: PUSH
32313: LD_INT 36
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 101
32340: PUSH
32341: LD_INT 102
32343: PUSH
32344: LD_INT 103
32346: PUSH
32347: LD_INT 105
32349: PUSH
32350: LD_INT 106
32352: PUSH
32353: LD_INT 108
32355: PUSH
32356: LD_INT 109
32358: PUSH
32359: LD_INT 112
32361: PUSH
32362: LD_INT 116
32364: PUSH
32365: LD_INT 117
32367: PUSH
32368: LD_INT 118
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: ST_TO_ADDR
32388: GO 34643
32390: LD_INT 9
32392: DOUBLE
32393: EQUAL
32394: IFTRUE 32398
32396: GO 32546
32398: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
32399: LD_ADDR_VAR 0 1
32403: PUSH
32404: LD_INT 2
32406: PUSH
32407: LD_INT 4
32409: PUSH
32410: LD_INT 5
32412: PUSH
32413: LD_INT 6
32415: PUSH
32416: LD_INT 7
32418: PUSH
32419: LD_INT 8
32421: PUSH
32422: LD_INT 11
32424: PUSH
32425: LD_INT 12
32427: PUSH
32428: LD_INT 15
32430: PUSH
32431: LD_INT 16
32433: PUSH
32434: LD_INT 20
32436: PUSH
32437: LD_INT 21
32439: PUSH
32440: LD_INT 22
32442: PUSH
32443: LD_INT 23
32445: PUSH
32446: LD_INT 25
32448: PUSH
32449: LD_INT 26
32451: PUSH
32452: LD_INT 28
32454: PUSH
32455: LD_INT 30
32457: PUSH
32458: LD_INT 31
32460: PUSH
32461: LD_INT 32
32463: PUSH
32464: LD_INT 36
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 101
32492: PUSH
32493: LD_INT 102
32495: PUSH
32496: LD_INT 103
32498: PUSH
32499: LD_INT 105
32501: PUSH
32502: LD_INT 106
32504: PUSH
32505: LD_INT 108
32507: PUSH
32508: LD_INT 109
32510: PUSH
32511: LD_INT 112
32513: PUSH
32514: LD_INT 114
32516: PUSH
32517: LD_INT 116
32519: PUSH
32520: LD_INT 117
32522: PUSH
32523: LD_INT 118
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: ST_TO_ADDR
32544: GO 34643
32546: LD_INT 10
32548: DOUBLE
32549: EQUAL
32550: IFTRUE 32554
32552: GO 32750
32554: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
32555: LD_ADDR_VAR 0 1
32559: PUSH
32560: LD_INT 2
32562: PUSH
32563: LD_INT 4
32565: PUSH
32566: LD_INT 5
32568: PUSH
32569: LD_INT 6
32571: PUSH
32572: LD_INT 7
32574: PUSH
32575: LD_INT 8
32577: PUSH
32578: LD_INT 9
32580: PUSH
32581: LD_INT 10
32583: PUSH
32584: LD_INT 11
32586: PUSH
32587: LD_INT 12
32589: PUSH
32590: LD_INT 13
32592: PUSH
32593: LD_INT 14
32595: PUSH
32596: LD_INT 15
32598: PUSH
32599: LD_INT 16
32601: PUSH
32602: LD_INT 17
32604: PUSH
32605: LD_INT 18
32607: PUSH
32608: LD_INT 19
32610: PUSH
32611: LD_INT 20
32613: PUSH
32614: LD_INT 21
32616: PUSH
32617: LD_INT 22
32619: PUSH
32620: LD_INT 23
32622: PUSH
32623: LD_INT 24
32625: PUSH
32626: LD_INT 25
32628: PUSH
32629: LD_INT 26
32631: PUSH
32632: LD_INT 28
32634: PUSH
32635: LD_INT 30
32637: PUSH
32638: LD_INT 31
32640: PUSH
32641: LD_INT 32
32643: PUSH
32644: LD_INT 36
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 101
32680: PUSH
32681: LD_INT 102
32683: PUSH
32684: LD_INT 103
32686: PUSH
32687: LD_INT 104
32689: PUSH
32690: LD_INT 105
32692: PUSH
32693: LD_INT 106
32695: PUSH
32696: LD_INT 107
32698: PUSH
32699: LD_INT 108
32701: PUSH
32702: LD_INT 109
32704: PUSH
32705: LD_INT 110
32707: PUSH
32708: LD_INT 111
32710: PUSH
32711: LD_INT 112
32713: PUSH
32714: LD_INT 114
32716: PUSH
32717: LD_INT 116
32719: PUSH
32720: LD_INT 117
32722: PUSH
32723: LD_INT 118
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: ST_TO_ADDR
32748: GO 34643
32750: LD_INT 11
32752: DOUBLE
32753: EQUAL
32754: IFTRUE 32758
32756: GO 32962
32758: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
32759: LD_ADDR_VAR 0 1
32763: PUSH
32764: LD_INT 2
32766: PUSH
32767: LD_INT 3
32769: PUSH
32770: LD_INT 4
32772: PUSH
32773: LD_INT 5
32775: PUSH
32776: LD_INT 6
32778: PUSH
32779: LD_INT 7
32781: PUSH
32782: LD_INT 8
32784: PUSH
32785: LD_INT 9
32787: PUSH
32788: LD_INT 10
32790: PUSH
32791: LD_INT 11
32793: PUSH
32794: LD_INT 12
32796: PUSH
32797: LD_INT 13
32799: PUSH
32800: LD_INT 14
32802: PUSH
32803: LD_INT 15
32805: PUSH
32806: LD_INT 16
32808: PUSH
32809: LD_INT 17
32811: PUSH
32812: LD_INT 18
32814: PUSH
32815: LD_INT 19
32817: PUSH
32818: LD_INT 20
32820: PUSH
32821: LD_INT 21
32823: PUSH
32824: LD_INT 22
32826: PUSH
32827: LD_INT 23
32829: PUSH
32830: LD_INT 24
32832: PUSH
32833: LD_INT 25
32835: PUSH
32836: LD_INT 26
32838: PUSH
32839: LD_INT 28
32841: PUSH
32842: LD_INT 30
32844: PUSH
32845: LD_INT 31
32847: PUSH
32848: LD_INT 32
32850: PUSH
32851: LD_INT 34
32853: PUSH
32854: LD_INT 36
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 101
32892: PUSH
32893: LD_INT 102
32895: PUSH
32896: LD_INT 103
32898: PUSH
32899: LD_INT 104
32901: PUSH
32902: LD_INT 105
32904: PUSH
32905: LD_INT 106
32907: PUSH
32908: LD_INT 107
32910: PUSH
32911: LD_INT 108
32913: PUSH
32914: LD_INT 109
32916: PUSH
32917: LD_INT 110
32919: PUSH
32920: LD_INT 111
32922: PUSH
32923: LD_INT 112
32925: PUSH
32926: LD_INT 114
32928: PUSH
32929: LD_INT 116
32931: PUSH
32932: LD_INT 117
32934: PUSH
32935: LD_INT 118
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: ST_TO_ADDR
32960: GO 34643
32962: LD_INT 12
32964: DOUBLE
32965: EQUAL
32966: IFTRUE 32970
32968: GO 33190
32970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
32971: LD_ADDR_VAR 0 1
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: LD_INT 3
32984: PUSH
32985: LD_INT 4
32987: PUSH
32988: LD_INT 5
32990: PUSH
32991: LD_INT 6
32993: PUSH
32994: LD_INT 7
32996: PUSH
32997: LD_INT 8
32999: PUSH
33000: LD_INT 9
33002: PUSH
33003: LD_INT 10
33005: PUSH
33006: LD_INT 11
33008: PUSH
33009: LD_INT 12
33011: PUSH
33012: LD_INT 13
33014: PUSH
33015: LD_INT 14
33017: PUSH
33018: LD_INT 15
33020: PUSH
33021: LD_INT 16
33023: PUSH
33024: LD_INT 17
33026: PUSH
33027: LD_INT 18
33029: PUSH
33030: LD_INT 19
33032: PUSH
33033: LD_INT 20
33035: PUSH
33036: LD_INT 21
33038: PUSH
33039: LD_INT 22
33041: PUSH
33042: LD_INT 23
33044: PUSH
33045: LD_INT 24
33047: PUSH
33048: LD_INT 25
33050: PUSH
33051: LD_INT 26
33053: PUSH
33054: LD_INT 27
33056: PUSH
33057: LD_INT 28
33059: PUSH
33060: LD_INT 30
33062: PUSH
33063: LD_INT 31
33065: PUSH
33066: LD_INT 32
33068: PUSH
33069: LD_INT 33
33071: PUSH
33072: LD_INT 34
33074: PUSH
33075: LD_INT 36
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 101
33116: PUSH
33117: LD_INT 102
33119: PUSH
33120: LD_INT 103
33122: PUSH
33123: LD_INT 104
33125: PUSH
33126: LD_INT 105
33128: PUSH
33129: LD_INT 106
33131: PUSH
33132: LD_INT 107
33134: PUSH
33135: LD_INT 108
33137: PUSH
33138: LD_INT 109
33140: PUSH
33141: LD_INT 110
33143: PUSH
33144: LD_INT 111
33146: PUSH
33147: LD_INT 112
33149: PUSH
33150: LD_INT 113
33152: PUSH
33153: LD_INT 114
33155: PUSH
33156: LD_INT 116
33158: PUSH
33159: LD_INT 117
33161: PUSH
33162: LD_INT 118
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: ST_TO_ADDR
33188: GO 34643
33190: LD_INT 13
33192: DOUBLE
33193: EQUAL
33194: IFTRUE 33198
33196: GO 33406
33198: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
33199: LD_ADDR_VAR 0 1
33203: PUSH
33204: LD_INT 1
33206: PUSH
33207: LD_INT 2
33209: PUSH
33210: LD_INT 3
33212: PUSH
33213: LD_INT 4
33215: PUSH
33216: LD_INT 5
33218: PUSH
33219: LD_INT 8
33221: PUSH
33222: LD_INT 9
33224: PUSH
33225: LD_INT 10
33227: PUSH
33228: LD_INT 11
33230: PUSH
33231: LD_INT 12
33233: PUSH
33234: LD_INT 14
33236: PUSH
33237: LD_INT 15
33239: PUSH
33240: LD_INT 16
33242: PUSH
33243: LD_INT 17
33245: PUSH
33246: LD_INT 18
33248: PUSH
33249: LD_INT 19
33251: PUSH
33252: LD_INT 20
33254: PUSH
33255: LD_INT 21
33257: PUSH
33258: LD_INT 22
33260: PUSH
33261: LD_INT 23
33263: PUSH
33264: LD_INT 24
33266: PUSH
33267: LD_INT 25
33269: PUSH
33270: LD_INT 26
33272: PUSH
33273: LD_INT 27
33275: PUSH
33276: LD_INT 28
33278: PUSH
33279: LD_INT 30
33281: PUSH
33282: LD_INT 31
33284: PUSH
33285: LD_INT 32
33287: PUSH
33288: LD_INT 33
33290: PUSH
33291: LD_INT 34
33293: PUSH
33294: LD_INT 36
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 101
33332: PUSH
33333: LD_INT 102
33335: PUSH
33336: LD_INT 103
33338: PUSH
33339: LD_INT 104
33341: PUSH
33342: LD_INT 105
33344: PUSH
33345: LD_INT 106
33347: PUSH
33348: LD_INT 107
33350: PUSH
33351: LD_INT 108
33353: PUSH
33354: LD_INT 109
33356: PUSH
33357: LD_INT 110
33359: PUSH
33360: LD_INT 111
33362: PUSH
33363: LD_INT 112
33365: PUSH
33366: LD_INT 113
33368: PUSH
33369: LD_INT 114
33371: PUSH
33372: LD_INT 116
33374: PUSH
33375: LD_INT 117
33377: PUSH
33378: LD_INT 118
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: ST_TO_ADDR
33404: GO 34643
33406: LD_INT 14
33408: DOUBLE
33409: EQUAL
33410: IFTRUE 33414
33412: GO 33638
33414: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
33415: LD_ADDR_VAR 0 1
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: LD_INT 2
33425: PUSH
33426: LD_INT 3
33428: PUSH
33429: LD_INT 4
33431: PUSH
33432: LD_INT 5
33434: PUSH
33435: LD_INT 6
33437: PUSH
33438: LD_INT 7
33440: PUSH
33441: LD_INT 8
33443: PUSH
33444: LD_INT 9
33446: PUSH
33447: LD_INT 10
33449: PUSH
33450: LD_INT 11
33452: PUSH
33453: LD_INT 12
33455: PUSH
33456: LD_INT 13
33458: PUSH
33459: LD_INT 14
33461: PUSH
33462: LD_INT 15
33464: PUSH
33465: LD_INT 16
33467: PUSH
33468: LD_INT 17
33470: PUSH
33471: LD_INT 18
33473: PUSH
33474: LD_INT 19
33476: PUSH
33477: LD_INT 20
33479: PUSH
33480: LD_INT 21
33482: PUSH
33483: LD_INT 22
33485: PUSH
33486: LD_INT 23
33488: PUSH
33489: LD_INT 24
33491: PUSH
33492: LD_INT 25
33494: PUSH
33495: LD_INT 26
33497: PUSH
33498: LD_INT 27
33500: PUSH
33501: LD_INT 28
33503: PUSH
33504: LD_INT 29
33506: PUSH
33507: LD_INT 30
33509: PUSH
33510: LD_INT 31
33512: PUSH
33513: LD_INT 32
33515: PUSH
33516: LD_INT 33
33518: PUSH
33519: LD_INT 34
33521: PUSH
33522: LD_INT 36
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 101
33564: PUSH
33565: LD_INT 102
33567: PUSH
33568: LD_INT 103
33570: PUSH
33571: LD_INT 104
33573: PUSH
33574: LD_INT 105
33576: PUSH
33577: LD_INT 106
33579: PUSH
33580: LD_INT 107
33582: PUSH
33583: LD_INT 108
33585: PUSH
33586: LD_INT 109
33588: PUSH
33589: LD_INT 110
33591: PUSH
33592: LD_INT 111
33594: PUSH
33595: LD_INT 112
33597: PUSH
33598: LD_INT 113
33600: PUSH
33601: LD_INT 114
33603: PUSH
33604: LD_INT 116
33606: PUSH
33607: LD_INT 117
33609: PUSH
33610: LD_INT 118
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: ST_TO_ADDR
33636: GO 34643
33638: LD_INT 15
33640: DOUBLE
33641: EQUAL
33642: IFTRUE 33646
33644: GO 33870
33646: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
33647: LD_ADDR_VAR 0 1
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: LD_INT 3
33660: PUSH
33661: LD_INT 4
33663: PUSH
33664: LD_INT 5
33666: PUSH
33667: LD_INT 6
33669: PUSH
33670: LD_INT 7
33672: PUSH
33673: LD_INT 8
33675: PUSH
33676: LD_INT 9
33678: PUSH
33679: LD_INT 10
33681: PUSH
33682: LD_INT 11
33684: PUSH
33685: LD_INT 12
33687: PUSH
33688: LD_INT 13
33690: PUSH
33691: LD_INT 14
33693: PUSH
33694: LD_INT 15
33696: PUSH
33697: LD_INT 16
33699: PUSH
33700: LD_INT 17
33702: PUSH
33703: LD_INT 18
33705: PUSH
33706: LD_INT 19
33708: PUSH
33709: LD_INT 20
33711: PUSH
33712: LD_INT 21
33714: PUSH
33715: LD_INT 22
33717: PUSH
33718: LD_INT 23
33720: PUSH
33721: LD_INT 24
33723: PUSH
33724: LD_INT 25
33726: PUSH
33727: LD_INT 26
33729: PUSH
33730: LD_INT 27
33732: PUSH
33733: LD_INT 28
33735: PUSH
33736: LD_INT 29
33738: PUSH
33739: LD_INT 30
33741: PUSH
33742: LD_INT 31
33744: PUSH
33745: LD_INT 32
33747: PUSH
33748: LD_INT 33
33750: PUSH
33751: LD_INT 34
33753: PUSH
33754: LD_INT 36
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 101
33796: PUSH
33797: LD_INT 102
33799: PUSH
33800: LD_INT 103
33802: PUSH
33803: LD_INT 104
33805: PUSH
33806: LD_INT 105
33808: PUSH
33809: LD_INT 106
33811: PUSH
33812: LD_INT 107
33814: PUSH
33815: LD_INT 108
33817: PUSH
33818: LD_INT 109
33820: PUSH
33821: LD_INT 110
33823: PUSH
33824: LD_INT 111
33826: PUSH
33827: LD_INT 112
33829: PUSH
33830: LD_INT 113
33832: PUSH
33833: LD_INT 114
33835: PUSH
33836: LD_INT 116
33838: PUSH
33839: LD_INT 117
33841: PUSH
33842: LD_INT 118
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: ST_TO_ADDR
33868: GO 34643
33870: LD_INT 16
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33878
33876: GO 34014
33878: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
33879: LD_ADDR_VAR 0 1
33883: PUSH
33884: LD_INT 2
33886: PUSH
33887: LD_INT 4
33889: PUSH
33890: LD_INT 5
33892: PUSH
33893: LD_INT 7
33895: PUSH
33896: LD_INT 11
33898: PUSH
33899: LD_INT 12
33901: PUSH
33902: LD_INT 15
33904: PUSH
33905: LD_INT 16
33907: PUSH
33908: LD_INT 20
33910: PUSH
33911: LD_INT 21
33913: PUSH
33914: LD_INT 22
33916: PUSH
33917: LD_INT 23
33919: PUSH
33920: LD_INT 25
33922: PUSH
33923: LD_INT 26
33925: PUSH
33926: LD_INT 30
33928: PUSH
33929: LD_INT 31
33931: PUSH
33932: LD_INT 32
33934: PUSH
33935: LD_INT 33
33937: PUSH
33938: LD_INT 34
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 101
33964: PUSH
33965: LD_INT 102
33967: PUSH
33968: LD_INT 103
33970: PUSH
33971: LD_INT 106
33973: PUSH
33974: LD_INT 108
33976: PUSH
33977: LD_INT 112
33979: PUSH
33980: LD_INT 113
33982: PUSH
33983: LD_INT 114
33985: PUSH
33986: LD_INT 116
33988: PUSH
33989: LD_INT 117
33991: PUSH
33992: LD_INT 118
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: ST_TO_ADDR
34012: GO 34643
34014: LD_INT 17
34016: DOUBLE
34017: EQUAL
34018: IFTRUE 34022
34020: GO 34246
34022: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
34023: LD_ADDR_VAR 0 1
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: LD_INT 2
34033: PUSH
34034: LD_INT 3
34036: PUSH
34037: LD_INT 4
34039: PUSH
34040: LD_INT 5
34042: PUSH
34043: LD_INT 6
34045: PUSH
34046: LD_INT 7
34048: PUSH
34049: LD_INT 8
34051: PUSH
34052: LD_INT 9
34054: PUSH
34055: LD_INT 10
34057: PUSH
34058: LD_INT 11
34060: PUSH
34061: LD_INT 12
34063: PUSH
34064: LD_INT 13
34066: PUSH
34067: LD_INT 14
34069: PUSH
34070: LD_INT 15
34072: PUSH
34073: LD_INT 16
34075: PUSH
34076: LD_INT 17
34078: PUSH
34079: LD_INT 18
34081: PUSH
34082: LD_INT 19
34084: PUSH
34085: LD_INT 20
34087: PUSH
34088: LD_INT 21
34090: PUSH
34091: LD_INT 22
34093: PUSH
34094: LD_INT 23
34096: PUSH
34097: LD_INT 24
34099: PUSH
34100: LD_INT 25
34102: PUSH
34103: LD_INT 26
34105: PUSH
34106: LD_INT 27
34108: PUSH
34109: LD_INT 28
34111: PUSH
34112: LD_INT 29
34114: PUSH
34115: LD_INT 30
34117: PUSH
34118: LD_INT 31
34120: PUSH
34121: LD_INT 32
34123: PUSH
34124: LD_INT 33
34126: PUSH
34127: LD_INT 34
34129: PUSH
34130: LD_INT 36
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 101
34172: PUSH
34173: LD_INT 102
34175: PUSH
34176: LD_INT 103
34178: PUSH
34179: LD_INT 104
34181: PUSH
34182: LD_INT 105
34184: PUSH
34185: LD_INT 106
34187: PUSH
34188: LD_INT 107
34190: PUSH
34191: LD_INT 108
34193: PUSH
34194: LD_INT 109
34196: PUSH
34197: LD_INT 110
34199: PUSH
34200: LD_INT 111
34202: PUSH
34203: LD_INT 112
34205: PUSH
34206: LD_INT 113
34208: PUSH
34209: LD_INT 114
34211: PUSH
34212: LD_INT 116
34214: PUSH
34215: LD_INT 117
34217: PUSH
34218: LD_INT 118
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: ST_TO_ADDR
34244: GO 34643
34246: LD_INT 18
34248: DOUBLE
34249: EQUAL
34250: IFTRUE 34254
34252: GO 34402
34254: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
34255: LD_ADDR_VAR 0 1
34259: PUSH
34260: LD_INT 2
34262: PUSH
34263: LD_INT 4
34265: PUSH
34266: LD_INT 5
34268: PUSH
34269: LD_INT 7
34271: PUSH
34272: LD_INT 11
34274: PUSH
34275: LD_INT 12
34277: PUSH
34278: LD_INT 15
34280: PUSH
34281: LD_INT 16
34283: PUSH
34284: LD_INT 20
34286: PUSH
34287: LD_INT 21
34289: PUSH
34290: LD_INT 22
34292: PUSH
34293: LD_INT 23
34295: PUSH
34296: LD_INT 25
34298: PUSH
34299: LD_INT 26
34301: PUSH
34302: LD_INT 30
34304: PUSH
34305: LD_INT 31
34307: PUSH
34308: LD_INT 32
34310: PUSH
34311: LD_INT 33
34313: PUSH
34314: LD_INT 34
34316: PUSH
34317: LD_INT 35
34319: PUSH
34320: LD_INT 36
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 101
34348: PUSH
34349: LD_INT 102
34351: PUSH
34352: LD_INT 103
34354: PUSH
34355: LD_INT 106
34357: PUSH
34358: LD_INT 108
34360: PUSH
34361: LD_INT 112
34363: PUSH
34364: LD_INT 113
34366: PUSH
34367: LD_INT 114
34369: PUSH
34370: LD_INT 115
34372: PUSH
34373: LD_INT 116
34375: PUSH
34376: LD_INT 117
34378: PUSH
34379: LD_INT 118
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: ST_TO_ADDR
34400: GO 34643
34402: LD_INT 19
34404: DOUBLE
34405: EQUAL
34406: IFTRUE 34410
34408: GO 34642
34410: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
34411: LD_ADDR_VAR 0 1
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: LD_INT 3
34424: PUSH
34425: LD_INT 4
34427: PUSH
34428: LD_INT 5
34430: PUSH
34431: LD_INT 6
34433: PUSH
34434: LD_INT 7
34436: PUSH
34437: LD_INT 8
34439: PUSH
34440: LD_INT 9
34442: PUSH
34443: LD_INT 10
34445: PUSH
34446: LD_INT 11
34448: PUSH
34449: LD_INT 12
34451: PUSH
34452: LD_INT 13
34454: PUSH
34455: LD_INT 14
34457: PUSH
34458: LD_INT 15
34460: PUSH
34461: LD_INT 16
34463: PUSH
34464: LD_INT 17
34466: PUSH
34467: LD_INT 18
34469: PUSH
34470: LD_INT 19
34472: PUSH
34473: LD_INT 20
34475: PUSH
34476: LD_INT 21
34478: PUSH
34479: LD_INT 22
34481: PUSH
34482: LD_INT 23
34484: PUSH
34485: LD_INT 24
34487: PUSH
34488: LD_INT 25
34490: PUSH
34491: LD_INT 26
34493: PUSH
34494: LD_INT 27
34496: PUSH
34497: LD_INT 28
34499: PUSH
34500: LD_INT 29
34502: PUSH
34503: LD_INT 30
34505: PUSH
34506: LD_INT 31
34508: PUSH
34509: LD_INT 32
34511: PUSH
34512: LD_INT 33
34514: PUSH
34515: LD_INT 34
34517: PUSH
34518: LD_INT 35
34520: PUSH
34521: LD_INT 36
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 101
34564: PUSH
34565: LD_INT 102
34567: PUSH
34568: LD_INT 103
34570: PUSH
34571: LD_INT 104
34573: PUSH
34574: LD_INT 105
34576: PUSH
34577: LD_INT 106
34579: PUSH
34580: LD_INT 107
34582: PUSH
34583: LD_INT 108
34585: PUSH
34586: LD_INT 109
34588: PUSH
34589: LD_INT 110
34591: PUSH
34592: LD_INT 111
34594: PUSH
34595: LD_INT 112
34597: PUSH
34598: LD_INT 113
34600: PUSH
34601: LD_INT 114
34603: PUSH
34604: LD_INT 115
34606: PUSH
34607: LD_INT 116
34609: PUSH
34610: LD_INT 117
34612: PUSH
34613: LD_INT 118
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: ST_TO_ADDR
34640: GO 34643
34642: POP
// end else
34643: GO 34874
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
34645: LD_ADDR_VAR 0 1
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: LD_INT 2
34655: PUSH
34656: LD_INT 3
34658: PUSH
34659: LD_INT 4
34661: PUSH
34662: LD_INT 5
34664: PUSH
34665: LD_INT 6
34667: PUSH
34668: LD_INT 7
34670: PUSH
34671: LD_INT 8
34673: PUSH
34674: LD_INT 9
34676: PUSH
34677: LD_INT 10
34679: PUSH
34680: LD_INT 11
34682: PUSH
34683: LD_INT 12
34685: PUSH
34686: LD_INT 13
34688: PUSH
34689: LD_INT 14
34691: PUSH
34692: LD_INT 15
34694: PUSH
34695: LD_INT 16
34697: PUSH
34698: LD_INT 17
34700: PUSH
34701: LD_INT 18
34703: PUSH
34704: LD_INT 19
34706: PUSH
34707: LD_INT 20
34709: PUSH
34710: LD_INT 21
34712: PUSH
34713: LD_INT 22
34715: PUSH
34716: LD_INT 23
34718: PUSH
34719: LD_INT 24
34721: PUSH
34722: LD_INT 25
34724: PUSH
34725: LD_INT 26
34727: PUSH
34728: LD_INT 27
34730: PUSH
34731: LD_INT 28
34733: PUSH
34734: LD_INT 29
34736: PUSH
34737: LD_INT 30
34739: PUSH
34740: LD_INT 31
34742: PUSH
34743: LD_INT 32
34745: PUSH
34746: LD_INT 33
34748: PUSH
34749: LD_INT 34
34751: PUSH
34752: LD_INT 35
34754: PUSH
34755: LD_INT 36
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 101
34798: PUSH
34799: LD_INT 102
34801: PUSH
34802: LD_INT 103
34804: PUSH
34805: LD_INT 104
34807: PUSH
34808: LD_INT 105
34810: PUSH
34811: LD_INT 106
34813: PUSH
34814: LD_INT 107
34816: PUSH
34817: LD_INT 108
34819: PUSH
34820: LD_INT 109
34822: PUSH
34823: LD_INT 110
34825: PUSH
34826: LD_INT 111
34828: PUSH
34829: LD_INT 112
34831: PUSH
34832: LD_INT 113
34834: PUSH
34835: LD_INT 114
34837: PUSH
34838: LD_INT 115
34840: PUSH
34841: LD_INT 116
34843: PUSH
34844: LD_INT 117
34846: PUSH
34847: LD_INT 118
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: ST_TO_ADDR
// if result then
34874: LD_VAR 0 1
34878: IFFALSE 35167
// begin normal :=  ;
34880: LD_ADDR_VAR 0 3
34884: PUSH
34885: LD_STRING 
34887: ST_TO_ADDR
// hardcore :=  ;
34888: LD_ADDR_VAR 0 4
34892: PUSH
34893: LD_STRING 
34895: ST_TO_ADDR
// for i = 1 to normalCounter do
34896: LD_ADDR_VAR 0 5
34900: PUSH
34901: DOUBLE
34902: LD_INT 1
34904: DEC
34905: ST_TO_ADDR
34906: LD_EXP 89
34910: PUSH
34911: FOR_TO
34912: IFFALSE 35013
// begin tmp := 0 ;
34914: LD_ADDR_VAR 0 2
34918: PUSH
34919: LD_STRING 0
34921: ST_TO_ADDR
// if result [ 1 ] then
34922: LD_VAR 0 1
34926: PUSH
34927: LD_INT 1
34929: ARRAY
34930: IFFALSE 34995
// if result [ 1 ] [ 1 ] = i then
34932: LD_VAR 0 1
34936: PUSH
34937: LD_INT 1
34939: ARRAY
34940: PUSH
34941: LD_INT 1
34943: ARRAY
34944: PUSH
34945: LD_VAR 0 5
34949: EQUAL
34950: IFFALSE 34995
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
34952: LD_ADDR_VAR 0 1
34956: PUSH
34957: LD_VAR 0 1
34961: PPUSH
34962: LD_INT 1
34964: PPUSH
34965: LD_VAR 0 1
34969: PUSH
34970: LD_INT 1
34972: ARRAY
34973: PPUSH
34974: LD_INT 1
34976: PPUSH
34977: CALL_OW 3
34981: PPUSH
34982: CALL_OW 1
34986: ST_TO_ADDR
// tmp := 1 ;
34987: LD_ADDR_VAR 0 2
34991: PUSH
34992: LD_STRING 1
34994: ST_TO_ADDR
// end ; normal := normal & tmp ;
34995: LD_ADDR_VAR 0 3
34999: PUSH
35000: LD_VAR 0 3
35004: PUSH
35005: LD_VAR 0 2
35009: STR
35010: ST_TO_ADDR
// end ;
35011: GO 34911
35013: POP
35014: POP
// for i = 1 to hardcoreCounter do
35015: LD_ADDR_VAR 0 5
35019: PUSH
35020: DOUBLE
35021: LD_INT 1
35023: DEC
35024: ST_TO_ADDR
35025: LD_EXP 90
35029: PUSH
35030: FOR_TO
35031: IFFALSE 35136
// begin tmp := 0 ;
35033: LD_ADDR_VAR 0 2
35037: PUSH
35038: LD_STRING 0
35040: ST_TO_ADDR
// if result [ 2 ] then
35041: LD_VAR 0 1
35045: PUSH
35046: LD_INT 2
35048: ARRAY
35049: IFFALSE 35118
// if result [ 2 ] [ 1 ] = 100 + i then
35051: LD_VAR 0 1
35055: PUSH
35056: LD_INT 2
35058: ARRAY
35059: PUSH
35060: LD_INT 1
35062: ARRAY
35063: PUSH
35064: LD_INT 100
35066: PUSH
35067: LD_VAR 0 5
35071: PLUS
35072: EQUAL
35073: IFFALSE 35118
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
35075: LD_ADDR_VAR 0 1
35079: PUSH
35080: LD_VAR 0 1
35084: PPUSH
35085: LD_INT 2
35087: PPUSH
35088: LD_VAR 0 1
35092: PUSH
35093: LD_INT 2
35095: ARRAY
35096: PPUSH
35097: LD_INT 1
35099: PPUSH
35100: CALL_OW 3
35104: PPUSH
35105: CALL_OW 1
35109: ST_TO_ADDR
// tmp := 1 ;
35110: LD_ADDR_VAR 0 2
35114: PUSH
35115: LD_STRING 1
35117: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
35118: LD_ADDR_VAR 0 4
35122: PUSH
35123: LD_VAR 0 4
35127: PUSH
35128: LD_VAR 0 2
35132: STR
35133: ST_TO_ADDR
// end ;
35134: GO 35030
35136: POP
35137: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
35138: LD_STRING getStreamItemsFromMission("
35140: PUSH
35141: LD_VAR 0 3
35145: STR
35146: PUSH
35147: LD_STRING ","
35149: STR
35150: PUSH
35151: LD_VAR 0 4
35155: STR
35156: PUSH
35157: LD_STRING ")
35159: STR
35160: PPUSH
35161: CALL_OW 559
// end else
35165: GO 35174
// ToLua ( getStreamItemsFromMission("","") ) ;
35167: LD_STRING getStreamItemsFromMission("","")
35169: PPUSH
35170: CALL_OW 559
// end ;
35174: LD_VAR 0 1
35178: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
35179: LD_EXP 88
35183: PUSH
35184: LD_EXP 93
35188: AND
35189: IFFALSE 35313
35191: GO 35193
35193: DISABLE
35194: LD_INT 0
35196: PPUSH
35197: PPUSH
// begin enable ;
35198: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
35199: LD_ADDR_VAR 0 2
35203: PUSH
35204: LD_INT 22
35206: PUSH
35207: LD_OWVAR 2
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 2
35218: PUSH
35219: LD_INT 34
35221: PUSH
35222: LD_INT 7
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 34
35231: PUSH
35232: LD_INT 45
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 34
35241: PUSH
35242: LD_INT 28
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 34
35251: PUSH
35252: LD_INT 47
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PPUSH
35270: CALL_OW 69
35274: ST_TO_ADDR
// if not tmp then
35275: LD_VAR 0 2
35279: NOT
35280: IFFALSE 35284
// exit ;
35282: GO 35313
// for i in tmp do
35284: LD_ADDR_VAR 0 1
35288: PUSH
35289: LD_VAR 0 2
35293: PUSH
35294: FOR_IN
35295: IFFALSE 35311
// begin SetLives ( i , 0 ) ;
35297: LD_VAR 0 1
35301: PPUSH
35302: LD_INT 0
35304: PPUSH
35305: CALL_OW 234
// end ;
35309: GO 35294
35311: POP
35312: POP
// end ;
35313: PPOPN 2
35315: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
35316: LD_EXP 88
35320: PUSH
35321: LD_EXP 94
35325: AND
35326: IFFALSE 35410
35328: GO 35330
35330: DISABLE
35331: LD_INT 0
35333: PPUSH
35334: PPUSH
// begin enable ;
35335: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
35336: LD_ADDR_VAR 0 2
35340: PUSH
35341: LD_INT 22
35343: PUSH
35344: LD_OWVAR 2
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 32
35355: PUSH
35356: LD_INT 3
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PPUSH
35367: CALL_OW 69
35371: ST_TO_ADDR
// if not tmp then
35372: LD_VAR 0 2
35376: NOT
35377: IFFALSE 35381
// exit ;
35379: GO 35410
// for i in tmp do
35381: LD_ADDR_VAR 0 1
35385: PUSH
35386: LD_VAR 0 2
35390: PUSH
35391: FOR_IN
35392: IFFALSE 35408
// begin SetLives ( i , 0 ) ;
35394: LD_VAR 0 1
35398: PPUSH
35399: LD_INT 0
35401: PPUSH
35402: CALL_OW 234
// end ;
35406: GO 35391
35408: POP
35409: POP
// end ;
35410: PPOPN 2
35412: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
35413: LD_EXP 88
35417: PUSH
35418: LD_EXP 91
35422: AND
35423: IFFALSE 35516
35425: GO 35427
35427: DISABLE
35428: LD_INT 0
35430: PPUSH
// begin enable ;
35431: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
35432: LD_ADDR_VAR 0 1
35436: PUSH
35437: LD_INT 22
35439: PUSH
35440: LD_OWVAR 2
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 2
35451: PUSH
35452: LD_INT 25
35454: PUSH
35455: LD_INT 5
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 25
35464: PUSH
35465: LD_INT 9
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 25
35474: PUSH
35475: LD_INT 8
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PPUSH
35492: CALL_OW 69
35496: PUSH
35497: FOR_IN
35498: IFFALSE 35514
// begin SetClass ( i , 1 ) ;
35500: LD_VAR 0 1
35504: PPUSH
35505: LD_INT 1
35507: PPUSH
35508: CALL_OW 336
// end ;
35512: GO 35497
35514: POP
35515: POP
// end ;
35516: PPOPN 1
35518: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
35519: LD_EXP 88
35523: PUSH
35524: LD_EXP 92
35528: AND
35529: PUSH
35530: LD_OWVAR 65
35534: PUSH
35535: LD_INT 7
35537: LESS
35538: AND
35539: IFFALSE 35553
35541: GO 35543
35543: DISABLE
// begin enable ;
35544: ENABLE
// game_speed := 7 ;
35545: LD_ADDR_OWVAR 65
35549: PUSH
35550: LD_INT 7
35552: ST_TO_ADDR
// end ;
35553: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
35554: LD_EXP 88
35558: PUSH
35559: LD_EXP 95
35563: AND
35564: IFFALSE 35766
35566: GO 35568
35568: DISABLE
35569: LD_INT 0
35571: PPUSH
35572: PPUSH
35573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
35574: LD_ADDR_VAR 0 3
35578: PUSH
35579: LD_INT 81
35581: PUSH
35582: LD_OWVAR 2
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 21
35593: PUSH
35594: LD_INT 1
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PPUSH
35605: CALL_OW 69
35609: ST_TO_ADDR
// if not tmp then
35610: LD_VAR 0 3
35614: NOT
35615: IFFALSE 35619
// exit ;
35617: GO 35766
// if tmp > 5 then
35619: LD_VAR 0 3
35623: PUSH
35624: LD_INT 5
35626: GREATER
35627: IFFALSE 35639
// k := 5 else
35629: LD_ADDR_VAR 0 2
35633: PUSH
35634: LD_INT 5
35636: ST_TO_ADDR
35637: GO 35649
// k := tmp ;
35639: LD_ADDR_VAR 0 2
35643: PUSH
35644: LD_VAR 0 3
35648: ST_TO_ADDR
// for i := 1 to k do
35649: LD_ADDR_VAR 0 1
35653: PUSH
35654: DOUBLE
35655: LD_INT 1
35657: DEC
35658: ST_TO_ADDR
35659: LD_VAR 0 2
35663: PUSH
35664: FOR_TO
35665: IFFALSE 35764
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
35667: LD_VAR 0 3
35671: PUSH
35672: LD_VAR 0 1
35676: ARRAY
35677: PPUSH
35678: LD_VAR 0 1
35682: PUSH
35683: LD_INT 4
35685: MOD
35686: PUSH
35687: LD_INT 1
35689: PLUS
35690: PPUSH
35691: CALL_OW 259
35695: PUSH
35696: LD_INT 10
35698: LESS
35699: IFFALSE 35762
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
35701: LD_VAR 0 3
35705: PUSH
35706: LD_VAR 0 1
35710: ARRAY
35711: PPUSH
35712: LD_VAR 0 1
35716: PUSH
35717: LD_INT 4
35719: MOD
35720: PUSH
35721: LD_INT 1
35723: PLUS
35724: PPUSH
35725: LD_VAR 0 3
35729: PUSH
35730: LD_VAR 0 1
35734: ARRAY
35735: PPUSH
35736: LD_VAR 0 1
35740: PUSH
35741: LD_INT 4
35743: MOD
35744: PUSH
35745: LD_INT 1
35747: PLUS
35748: PPUSH
35749: CALL_OW 259
35753: PUSH
35754: LD_INT 1
35756: PLUS
35757: PPUSH
35758: CALL_OW 237
35762: GO 35664
35764: POP
35765: POP
// end ;
35766: PPOPN 3
35768: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
35769: LD_EXP 88
35773: PUSH
35774: LD_EXP 96
35778: AND
35779: IFFALSE 35799
35781: GO 35783
35783: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
35784: LD_INT 4
35786: PPUSH
35787: LD_OWVAR 2
35791: PPUSH
35792: LD_INT 0
35794: PPUSH
35795: CALL_OW 324
35799: END
// every 0 0$1 trigger StreamModeActive and sShovel do
35800: LD_EXP 88
35804: PUSH
35805: LD_EXP 125
35809: AND
35810: IFFALSE 35830
35812: GO 35814
35814: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
35815: LD_INT 19
35817: PPUSH
35818: LD_OWVAR 2
35822: PPUSH
35823: LD_INT 0
35825: PPUSH
35826: CALL_OW 324
35830: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
35831: LD_EXP 88
35835: PUSH
35836: LD_EXP 97
35840: AND
35841: IFFALSE 35943
35843: GO 35845
35845: DISABLE
35846: LD_INT 0
35848: PPUSH
35849: PPUSH
// begin enable ;
35850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
35851: LD_ADDR_VAR 0 2
35855: PUSH
35856: LD_INT 22
35858: PUSH
35859: LD_OWVAR 2
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 2
35870: PUSH
35871: LD_INT 34
35873: PUSH
35874: LD_INT 11
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 34
35883: PUSH
35884: LD_INT 30
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PPUSH
35900: CALL_OW 69
35904: ST_TO_ADDR
// if not tmp then
35905: LD_VAR 0 2
35909: NOT
35910: IFFALSE 35914
// exit ;
35912: GO 35943
// for i in tmp do
35914: LD_ADDR_VAR 0 1
35918: PUSH
35919: LD_VAR 0 2
35923: PUSH
35924: FOR_IN
35925: IFFALSE 35941
// begin SetLives ( i , 0 ) ;
35927: LD_VAR 0 1
35931: PPUSH
35932: LD_INT 0
35934: PPUSH
35935: CALL_OW 234
// end ;
35939: GO 35924
35941: POP
35942: POP
// end ;
35943: PPOPN 2
35945: END
// every 0 0$1 trigger StreamModeActive and sBunker do
35946: LD_EXP 88
35950: PUSH
35951: LD_EXP 98
35955: AND
35956: IFFALSE 35976
35958: GO 35960
35960: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
35961: LD_INT 32
35963: PPUSH
35964: LD_OWVAR 2
35968: PPUSH
35969: LD_INT 0
35971: PPUSH
35972: CALL_OW 324
35976: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
35977: LD_EXP 88
35981: PUSH
35982: LD_EXP 99
35986: AND
35987: IFFALSE 36168
35989: GO 35991
35991: DISABLE
35992: LD_INT 0
35994: PPUSH
35995: PPUSH
35996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
35997: LD_ADDR_VAR 0 2
36001: PUSH
36002: LD_INT 22
36004: PUSH
36005: LD_OWVAR 2
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 33
36016: PUSH
36017: LD_INT 3
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PPUSH
36028: CALL_OW 69
36032: ST_TO_ADDR
// if not tmp then
36033: LD_VAR 0 2
36037: NOT
36038: IFFALSE 36042
// exit ;
36040: GO 36168
// side := 0 ;
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: LD_INT 0
36049: ST_TO_ADDR
// for i := 1 to 8 do
36050: LD_ADDR_VAR 0 1
36054: PUSH
36055: DOUBLE
36056: LD_INT 1
36058: DEC
36059: ST_TO_ADDR
36060: LD_INT 8
36062: PUSH
36063: FOR_TO
36064: IFFALSE 36112
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
36066: LD_OWVAR 2
36070: PUSH
36071: LD_VAR 0 1
36075: NONEQUAL
36076: PUSH
36077: LD_OWVAR 2
36081: PPUSH
36082: LD_VAR 0 1
36086: PPUSH
36087: CALL_OW 81
36091: PUSH
36092: LD_INT 2
36094: EQUAL
36095: AND
36096: IFFALSE 36110
// begin side := i ;
36098: LD_ADDR_VAR 0 3
36102: PUSH
36103: LD_VAR 0 1
36107: ST_TO_ADDR
// break ;
36108: GO 36112
// end ;
36110: GO 36063
36112: POP
36113: POP
// if not side then
36114: LD_VAR 0 3
36118: NOT
36119: IFFALSE 36123
// exit ;
36121: GO 36168
// for i := 1 to tmp do
36123: LD_ADDR_VAR 0 1
36127: PUSH
36128: DOUBLE
36129: LD_INT 1
36131: DEC
36132: ST_TO_ADDR
36133: LD_VAR 0 2
36137: PUSH
36138: FOR_TO
36139: IFFALSE 36166
// if Prob ( 60 ) then
36141: LD_INT 60
36143: PPUSH
36144: CALL_OW 13
36148: IFFALSE 36164
// SetSide ( i , side ) ;
36150: LD_VAR 0 1
36154: PPUSH
36155: LD_VAR 0 3
36159: PPUSH
36160: CALL_OW 235
36164: GO 36138
36166: POP
36167: POP
// end ;
36168: PPOPN 3
36170: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
36171: LD_EXP 88
36175: PUSH
36176: LD_EXP 101
36180: AND
36181: IFFALSE 36300
36183: GO 36185
36185: DISABLE
36186: LD_INT 0
36188: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
36189: LD_ADDR_VAR 0 1
36193: PUSH
36194: LD_INT 22
36196: PUSH
36197: LD_OWVAR 2
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 21
36208: PUSH
36209: LD_INT 1
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 3
36218: PUSH
36219: LD_INT 23
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: LIST
36237: PPUSH
36238: CALL_OW 69
36242: PUSH
36243: FOR_IN
36244: IFFALSE 36298
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
36246: LD_VAR 0 1
36250: PPUSH
36251: CALL_OW 257
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: LD_INT 3
36264: PUSH
36265: LD_INT 4
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: IN
36274: IFFALSE 36296
// SetClass ( un , rand ( 1 , 4 ) ) ;
36276: LD_VAR 0 1
36280: PPUSH
36281: LD_INT 1
36283: PPUSH
36284: LD_INT 4
36286: PPUSH
36287: CALL_OW 12
36291: PPUSH
36292: CALL_OW 336
36296: GO 36243
36298: POP
36299: POP
// end ;
36300: PPOPN 1
36302: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
36303: LD_EXP 88
36307: PUSH
36308: LD_EXP 100
36312: AND
36313: IFFALSE 36392
36315: GO 36317
36317: DISABLE
36318: LD_INT 0
36320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
36321: LD_ADDR_VAR 0 1
36325: PUSH
36326: LD_INT 22
36328: PUSH
36329: LD_OWVAR 2
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 21
36340: PUSH
36341: LD_INT 3
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PPUSH
36352: CALL_OW 69
36356: ST_TO_ADDR
// if not tmp then
36357: LD_VAR 0 1
36361: NOT
36362: IFFALSE 36366
// exit ;
36364: GO 36392
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
36366: LD_VAR 0 1
36370: PUSH
36371: LD_INT 1
36373: PPUSH
36374: LD_VAR 0 1
36378: PPUSH
36379: CALL_OW 12
36383: ARRAY
36384: PPUSH
36385: LD_INT 100
36387: PPUSH
36388: CALL_OW 234
// end ;
36392: PPOPN 1
36394: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
36395: LD_EXP 88
36399: PUSH
36400: LD_EXP 102
36404: AND
36405: IFFALSE 36503
36407: GO 36409
36409: DISABLE
36410: LD_INT 0
36412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36413: LD_ADDR_VAR 0 1
36417: PUSH
36418: LD_INT 22
36420: PUSH
36421: LD_OWVAR 2
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 21
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PPUSH
36444: CALL_OW 69
36448: ST_TO_ADDR
// if not tmp then
36449: LD_VAR 0 1
36453: NOT
36454: IFFALSE 36458
// exit ;
36456: GO 36503
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
36458: LD_VAR 0 1
36462: PUSH
36463: LD_INT 1
36465: PPUSH
36466: LD_VAR 0 1
36470: PPUSH
36471: CALL_OW 12
36475: ARRAY
36476: PPUSH
36477: LD_INT 1
36479: PPUSH
36480: LD_INT 4
36482: PPUSH
36483: CALL_OW 12
36487: PPUSH
36488: LD_INT 3000
36490: PPUSH
36491: LD_INT 9000
36493: PPUSH
36494: CALL_OW 12
36498: PPUSH
36499: CALL_OW 492
// end ;
36503: PPOPN 1
36505: END
// every 0 0$1 trigger StreamModeActive and sDepot do
36506: LD_EXP 88
36510: PUSH
36511: LD_EXP 103
36515: AND
36516: IFFALSE 36536
36518: GO 36520
36520: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
36521: LD_INT 1
36523: PPUSH
36524: LD_OWVAR 2
36528: PPUSH
36529: LD_INT 0
36531: PPUSH
36532: CALL_OW 324
36536: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
36537: LD_EXP 88
36541: PUSH
36542: LD_EXP 104
36546: AND
36547: IFFALSE 36630
36549: GO 36551
36551: DISABLE
36552: LD_INT 0
36554: PPUSH
36555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
36556: LD_ADDR_VAR 0 2
36560: PUSH
36561: LD_INT 22
36563: PUSH
36564: LD_OWVAR 2
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 21
36575: PUSH
36576: LD_INT 3
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PPUSH
36587: CALL_OW 69
36591: ST_TO_ADDR
// if not tmp then
36592: LD_VAR 0 2
36596: NOT
36597: IFFALSE 36601
// exit ;
36599: GO 36630
// for i in tmp do
36601: LD_ADDR_VAR 0 1
36605: PUSH
36606: LD_VAR 0 2
36610: PUSH
36611: FOR_IN
36612: IFFALSE 36628
// SetBLevel ( i , 10 ) ;
36614: LD_VAR 0 1
36618: PPUSH
36619: LD_INT 10
36621: PPUSH
36622: CALL_OW 241
36626: GO 36611
36628: POP
36629: POP
// end ;
36630: PPOPN 2
36632: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
36633: LD_EXP 88
36637: PUSH
36638: LD_EXP 105
36642: AND
36643: IFFALSE 36754
36645: GO 36647
36647: DISABLE
36648: LD_INT 0
36650: PPUSH
36651: PPUSH
36652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36653: LD_ADDR_VAR 0 3
36657: PUSH
36658: LD_INT 22
36660: PUSH
36661: LD_OWVAR 2
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 25
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PPUSH
36684: CALL_OW 69
36688: ST_TO_ADDR
// if not tmp then
36689: LD_VAR 0 3
36693: NOT
36694: IFFALSE 36698
// exit ;
36696: GO 36754
// un := tmp [ rand ( 1 , tmp ) ] ;
36698: LD_ADDR_VAR 0 2
36702: PUSH
36703: LD_VAR 0 3
36707: PUSH
36708: LD_INT 1
36710: PPUSH
36711: LD_VAR 0 3
36715: PPUSH
36716: CALL_OW 12
36720: ARRAY
36721: ST_TO_ADDR
// if Crawls ( un ) then
36722: LD_VAR 0 2
36726: PPUSH
36727: CALL_OW 318
36731: IFFALSE 36742
// ComWalk ( un ) ;
36733: LD_VAR 0 2
36737: PPUSH
36738: CALL_OW 138
// SetClass ( un , class_sniper ) ;
36742: LD_VAR 0 2
36746: PPUSH
36747: LD_INT 5
36749: PPUSH
36750: CALL_OW 336
// end ;
36754: PPOPN 3
36756: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
36757: LD_EXP 88
36761: PUSH
36762: LD_EXP 106
36766: AND
36767: PUSH
36768: LD_OWVAR 67
36772: PUSH
36773: LD_INT 4
36775: LESS
36776: AND
36777: IFFALSE 36796
36779: GO 36781
36781: DISABLE
// begin Difficulty := Difficulty + 1 ;
36782: LD_ADDR_OWVAR 67
36786: PUSH
36787: LD_OWVAR 67
36791: PUSH
36792: LD_INT 1
36794: PLUS
36795: ST_TO_ADDR
// end ;
36796: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
36797: LD_EXP 88
36801: PUSH
36802: LD_EXP 107
36806: AND
36807: IFFALSE 36910
36809: GO 36811
36811: DISABLE
36812: LD_INT 0
36814: PPUSH
// begin for i := 1 to 5 do
36815: LD_ADDR_VAR 0 1
36819: PUSH
36820: DOUBLE
36821: LD_INT 1
36823: DEC
36824: ST_TO_ADDR
36825: LD_INT 5
36827: PUSH
36828: FOR_TO
36829: IFFALSE 36908
// begin uc_nation := nation_nature ;
36831: LD_ADDR_OWVAR 21
36835: PUSH
36836: LD_INT 0
36838: ST_TO_ADDR
// uc_side := 0 ;
36839: LD_ADDR_OWVAR 20
36843: PUSH
36844: LD_INT 0
36846: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36847: LD_ADDR_OWVAR 29
36851: PUSH
36852: LD_INT 12
36854: PUSH
36855: LD_INT 12
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: ST_TO_ADDR
// hc_agressivity := 20 ;
36862: LD_ADDR_OWVAR 35
36866: PUSH
36867: LD_INT 20
36869: ST_TO_ADDR
// hc_class := class_tiger ;
36870: LD_ADDR_OWVAR 28
36874: PUSH
36875: LD_INT 14
36877: ST_TO_ADDR
// hc_gallery :=  ;
36878: LD_ADDR_OWVAR 33
36882: PUSH
36883: LD_STRING 
36885: ST_TO_ADDR
// hc_name :=  ;
36886: LD_ADDR_OWVAR 26
36890: PUSH
36891: LD_STRING 
36893: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
36894: CALL_OW 44
36898: PPUSH
36899: LD_INT 0
36901: PPUSH
36902: CALL_OW 51
// end ;
36906: GO 36828
36908: POP
36909: POP
// end ;
36910: PPOPN 1
36912: END
// every 0 0$1 trigger StreamModeActive and sBomb do
36913: LD_EXP 88
36917: PUSH
36918: LD_EXP 108
36922: AND
36923: IFFALSE 36932
36925: GO 36927
36927: DISABLE
// StreamSibBomb ;
36928: CALL 36933 0 0
36932: END
// export function StreamSibBomb ; var i , x , y ; begin
36933: LD_INT 0
36935: PPUSH
36936: PPUSH
36937: PPUSH
36938: PPUSH
// result := false ;
36939: LD_ADDR_VAR 0 1
36943: PUSH
36944: LD_INT 0
36946: ST_TO_ADDR
// for i := 1 to 16 do
36947: LD_ADDR_VAR 0 2
36951: PUSH
36952: DOUBLE
36953: LD_INT 1
36955: DEC
36956: ST_TO_ADDR
36957: LD_INT 16
36959: PUSH
36960: FOR_TO
36961: IFFALSE 37160
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36963: LD_ADDR_VAR 0 3
36967: PUSH
36968: LD_INT 10
36970: PUSH
36971: LD_INT 20
36973: PUSH
36974: LD_INT 30
36976: PUSH
36977: LD_INT 40
36979: PUSH
36980: LD_INT 50
36982: PUSH
36983: LD_INT 60
36985: PUSH
36986: LD_INT 70
36988: PUSH
36989: LD_INT 80
36991: PUSH
36992: LD_INT 90
36994: PUSH
36995: LD_INT 100
36997: PUSH
36998: LD_INT 110
37000: PUSH
37001: LD_INT 120
37003: PUSH
37004: LD_INT 130
37006: PUSH
37007: LD_INT 140
37009: PUSH
37010: LD_INT 150
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: PPUSH
37033: LD_INT 15
37035: PPUSH
37036: CALL_OW 12
37040: ARRAY
37041: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37042: LD_ADDR_VAR 0 4
37046: PUSH
37047: LD_INT 10
37049: PUSH
37050: LD_INT 20
37052: PUSH
37053: LD_INT 30
37055: PUSH
37056: LD_INT 40
37058: PUSH
37059: LD_INT 50
37061: PUSH
37062: LD_INT 60
37064: PUSH
37065: LD_INT 70
37067: PUSH
37068: LD_INT 80
37070: PUSH
37071: LD_INT 90
37073: PUSH
37074: LD_INT 100
37076: PUSH
37077: LD_INT 110
37079: PUSH
37080: LD_INT 120
37082: PUSH
37083: LD_INT 130
37085: PUSH
37086: LD_INT 140
37088: PUSH
37089: LD_INT 150
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 1
37111: PPUSH
37112: LD_INT 15
37114: PPUSH
37115: CALL_OW 12
37119: ARRAY
37120: ST_TO_ADDR
// if ValidHex ( x , y ) then
37121: LD_VAR 0 3
37125: PPUSH
37126: LD_VAR 0 4
37130: PPUSH
37131: CALL_OW 488
37135: IFFALSE 37158
// begin result := [ x , y ] ;
37137: LD_ADDR_VAR 0 1
37141: PUSH
37142: LD_VAR 0 3
37146: PUSH
37147: LD_VAR 0 4
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: ST_TO_ADDR
// break ;
37156: GO 37160
// end ; end ;
37158: GO 36960
37160: POP
37161: POP
// if result then
37162: LD_VAR 0 1
37166: IFFALSE 37226
// begin ToLua ( playSibBomb() ) ;
37168: LD_STRING playSibBomb()
37170: PPUSH
37171: CALL_OW 559
// wait ( 0 0$14 ) ;
37175: LD_INT 490
37177: PPUSH
37178: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
37182: LD_VAR 0 1
37186: PUSH
37187: LD_INT 1
37189: ARRAY
37190: PPUSH
37191: LD_VAR 0 1
37195: PUSH
37196: LD_INT 2
37198: ARRAY
37199: PPUSH
37200: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
37204: LD_VAR 0 1
37208: PUSH
37209: LD_INT 1
37211: ARRAY
37212: PPUSH
37213: LD_VAR 0 1
37217: PUSH
37218: LD_INT 2
37220: ARRAY
37221: PPUSH
37222: CALL_OW 429
// end ; end ;
37226: LD_VAR 0 1
37230: RET
// every 0 0$1 trigger StreamModeActive and sReset do
37231: LD_EXP 88
37235: PUSH
37236: LD_EXP 110
37240: AND
37241: IFFALSE 37253
37243: GO 37245
37245: DISABLE
// YouLost (  ) ;
37246: LD_STRING 
37248: PPUSH
37249: CALL_OW 104
37253: END
// every 0 0$1 trigger StreamModeActive and sFog do
37254: LD_EXP 88
37258: PUSH
37259: LD_EXP 109
37263: AND
37264: IFFALSE 37278
37266: GO 37268
37268: DISABLE
// FogOff ( your_side ) ;
37269: LD_OWVAR 2
37273: PPUSH
37274: CALL_OW 344
37278: END
// every 0 0$1 trigger StreamModeActive and sSun do
37279: LD_EXP 88
37283: PUSH
37284: LD_EXP 111
37288: AND
37289: IFFALSE 37317
37291: GO 37293
37293: DISABLE
// begin solar_recharge_percent := 0 ;
37294: LD_ADDR_OWVAR 79
37298: PUSH
37299: LD_INT 0
37301: ST_TO_ADDR
// wait ( 5 5$00 ) ;
37302: LD_INT 10500
37304: PPUSH
37305: CALL_OW 67
// solar_recharge_percent := 100 ;
37309: LD_ADDR_OWVAR 79
37313: PUSH
37314: LD_INT 100
37316: ST_TO_ADDR
// end ;
37317: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
37318: LD_EXP 88
37322: PUSH
37323: LD_EXP 112
37327: AND
37328: IFFALSE 37567
37330: GO 37332
37332: DISABLE
37333: LD_INT 0
37335: PPUSH
37336: PPUSH
37337: PPUSH
// begin tmp := [ ] ;
37338: LD_ADDR_VAR 0 3
37342: PUSH
37343: EMPTY
37344: ST_TO_ADDR
// for i := 1 to 6 do
37345: LD_ADDR_VAR 0 1
37349: PUSH
37350: DOUBLE
37351: LD_INT 1
37353: DEC
37354: ST_TO_ADDR
37355: LD_INT 6
37357: PUSH
37358: FOR_TO
37359: IFFALSE 37464
// begin uc_nation := nation_nature ;
37361: LD_ADDR_OWVAR 21
37365: PUSH
37366: LD_INT 0
37368: ST_TO_ADDR
// uc_side := 0 ;
37369: LD_ADDR_OWVAR 20
37373: PUSH
37374: LD_INT 0
37376: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37377: LD_ADDR_OWVAR 29
37381: PUSH
37382: LD_INT 12
37384: PUSH
37385: LD_INT 12
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: ST_TO_ADDR
// hc_agressivity := 20 ;
37392: LD_ADDR_OWVAR 35
37396: PUSH
37397: LD_INT 20
37399: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
37400: LD_ADDR_OWVAR 28
37404: PUSH
37405: LD_INT 17
37407: ST_TO_ADDR
// hc_gallery :=  ;
37408: LD_ADDR_OWVAR 33
37412: PUSH
37413: LD_STRING 
37415: ST_TO_ADDR
// hc_name :=  ;
37416: LD_ADDR_OWVAR 26
37420: PUSH
37421: LD_STRING 
37423: ST_TO_ADDR
// un := CreateHuman ;
37424: LD_ADDR_VAR 0 2
37428: PUSH
37429: CALL_OW 44
37433: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
37434: LD_VAR 0 2
37438: PPUSH
37439: LD_INT 1
37441: PPUSH
37442: CALL_OW 51
// tmp := tmp ^ un ;
37446: LD_ADDR_VAR 0 3
37450: PUSH
37451: LD_VAR 0 3
37455: PUSH
37456: LD_VAR 0 2
37460: ADD
37461: ST_TO_ADDR
// end ;
37462: GO 37358
37464: POP
37465: POP
// repeat wait ( 0 0$1 ) ;
37466: LD_INT 35
37468: PPUSH
37469: CALL_OW 67
// for un in tmp do
37473: LD_ADDR_VAR 0 2
37477: PUSH
37478: LD_VAR 0 3
37482: PUSH
37483: FOR_IN
37484: IFFALSE 37558
// begin if IsDead ( un ) then
37486: LD_VAR 0 2
37490: PPUSH
37491: CALL_OW 301
37495: IFFALSE 37515
// begin tmp := tmp diff un ;
37497: LD_ADDR_VAR 0 3
37501: PUSH
37502: LD_VAR 0 3
37506: PUSH
37507: LD_VAR 0 2
37511: DIFF
37512: ST_TO_ADDR
// continue ;
37513: GO 37483
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
37515: LD_VAR 0 2
37519: PPUSH
37520: LD_INT 3
37522: PUSH
37523: LD_INT 22
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PPUSH
37537: CALL_OW 69
37541: PPUSH
37542: LD_VAR 0 2
37546: PPUSH
37547: CALL_OW 74
37551: PPUSH
37552: CALL_OW 115
// end ;
37556: GO 37483
37558: POP
37559: POP
// until not tmp ;
37560: LD_VAR 0 3
37564: NOT
37565: IFFALSE 37466
// end ;
37567: PPOPN 3
37569: END
// every 0 0$1 trigger StreamModeActive and sTroll do
37570: LD_EXP 88
37574: PUSH
37575: LD_EXP 113
37579: AND
37580: IFFALSE 37634
37582: GO 37584
37584: DISABLE
// begin ToLua ( displayTroll(); ) ;
37585: LD_STRING displayTroll();
37587: PPUSH
37588: CALL_OW 559
// wait ( 3 3$00 ) ;
37592: LD_INT 6300
37594: PPUSH
37595: CALL_OW 67
// ToLua ( hideTroll(); ) ;
37599: LD_STRING hideTroll();
37601: PPUSH
37602: CALL_OW 559
// wait ( 1 1$00 ) ;
37606: LD_INT 2100
37608: PPUSH
37609: CALL_OW 67
// ToLua ( displayTroll(); ) ;
37613: LD_STRING displayTroll();
37615: PPUSH
37616: CALL_OW 559
// wait ( 1 1$00 ) ;
37620: LD_INT 2100
37622: PPUSH
37623: CALL_OW 67
// ToLua ( hideTroll(); ) ;
37627: LD_STRING hideTroll();
37629: PPUSH
37630: CALL_OW 559
// end ;
37634: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
37635: LD_EXP 88
37639: PUSH
37640: LD_EXP 114
37644: AND
37645: IFFALSE 37708
37647: GO 37649
37649: DISABLE
37650: LD_INT 0
37652: PPUSH
// begin p := 0 ;
37653: LD_ADDR_VAR 0 1
37657: PUSH
37658: LD_INT 0
37660: ST_TO_ADDR
// repeat game_speed := 1 ;
37661: LD_ADDR_OWVAR 65
37665: PUSH
37666: LD_INT 1
37668: ST_TO_ADDR
// wait ( 0 0$1 ) ;
37669: LD_INT 35
37671: PPUSH
37672: CALL_OW 67
// p := p + 1 ;
37676: LD_ADDR_VAR 0 1
37680: PUSH
37681: LD_VAR 0 1
37685: PUSH
37686: LD_INT 1
37688: PLUS
37689: ST_TO_ADDR
// until p >= 60 ;
37690: LD_VAR 0 1
37694: PUSH
37695: LD_INT 60
37697: GREATEREQUAL
37698: IFFALSE 37661
// game_speed := 4 ;
37700: LD_ADDR_OWVAR 65
37704: PUSH
37705: LD_INT 4
37707: ST_TO_ADDR
// end ;
37708: PPOPN 1
37710: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
37711: LD_EXP 88
37715: PUSH
37716: LD_EXP 115
37720: AND
37721: IFFALSE 37867
37723: GO 37725
37725: DISABLE
37726: LD_INT 0
37728: PPUSH
37729: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37730: LD_ADDR_VAR 0 1
37734: PUSH
37735: LD_INT 22
37737: PUSH
37738: LD_OWVAR 2
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: LD_INT 30
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 30
37762: PUSH
37763: LD_INT 1
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: LIST
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PPUSH
37779: CALL_OW 69
37783: ST_TO_ADDR
// if not depot then
37784: LD_VAR 0 1
37788: NOT
37789: IFFALSE 37793
// exit ;
37791: GO 37867
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
37793: LD_ADDR_VAR 0 2
37797: PUSH
37798: LD_VAR 0 1
37802: PUSH
37803: LD_INT 1
37805: PPUSH
37806: LD_VAR 0 1
37810: PPUSH
37811: CALL_OW 12
37815: ARRAY
37816: PPUSH
37817: CALL_OW 274
37821: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
37822: LD_VAR 0 2
37826: PPUSH
37827: LD_INT 1
37829: PPUSH
37830: LD_INT 0
37832: PPUSH
37833: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
37837: LD_VAR 0 2
37841: PPUSH
37842: LD_INT 2
37844: PPUSH
37845: LD_INT 0
37847: PPUSH
37848: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
37852: LD_VAR 0 2
37856: PPUSH
37857: LD_INT 3
37859: PPUSH
37860: LD_INT 0
37862: PPUSH
37863: CALL_OW 277
// end ;
37867: PPOPN 2
37869: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
37870: LD_EXP 88
37874: PUSH
37875: LD_EXP 116
37879: AND
37880: IFFALSE 37977
37882: GO 37884
37884: DISABLE
37885: LD_INT 0
37887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37888: LD_ADDR_VAR 0 1
37892: PUSH
37893: LD_INT 22
37895: PUSH
37896: LD_OWVAR 2
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 21
37907: PUSH
37908: LD_INT 1
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 3
37917: PUSH
37918: LD_INT 23
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: PPUSH
37937: CALL_OW 69
37941: ST_TO_ADDR
// if not tmp then
37942: LD_VAR 0 1
37946: NOT
37947: IFFALSE 37951
// exit ;
37949: GO 37977
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
37951: LD_VAR 0 1
37955: PUSH
37956: LD_INT 1
37958: PPUSH
37959: LD_VAR 0 1
37963: PPUSH
37964: CALL_OW 12
37968: ARRAY
37969: PPUSH
37970: LD_INT 200
37972: PPUSH
37973: CALL_OW 234
// end ;
37977: PPOPN 1
37979: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
37980: LD_EXP 88
37984: PUSH
37985: LD_EXP 117
37989: AND
37990: IFFALSE 38069
37992: GO 37994
37994: DISABLE
37995: LD_INT 0
37997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
37998: LD_ADDR_VAR 0 1
38002: PUSH
38003: LD_INT 22
38005: PUSH
38006: LD_OWVAR 2
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 21
38017: PUSH
38018: LD_INT 2
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PPUSH
38029: CALL_OW 69
38033: ST_TO_ADDR
// if not tmp then
38034: LD_VAR 0 1
38038: NOT
38039: IFFALSE 38043
// exit ;
38041: GO 38069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
38043: LD_VAR 0 1
38047: PUSH
38048: LD_INT 1
38050: PPUSH
38051: LD_VAR 0 1
38055: PPUSH
38056: CALL_OW 12
38060: ARRAY
38061: PPUSH
38062: LD_INT 60
38064: PPUSH
38065: CALL_OW 234
// end ;
38069: PPOPN 1
38071: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
38072: LD_EXP 88
38076: PUSH
38077: LD_EXP 118
38081: AND
38082: IFFALSE 38181
38084: GO 38086
38086: DISABLE
38087: LD_INT 0
38089: PPUSH
38090: PPUSH
// begin enable ;
38091: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
38092: LD_ADDR_VAR 0 1
38096: PUSH
38097: LD_INT 22
38099: PUSH
38100: LD_OWVAR 2
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 61
38111: PUSH
38112: EMPTY
38113: LIST
38114: PUSH
38115: LD_INT 33
38117: PUSH
38118: LD_INT 2
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: PPUSH
38130: CALL_OW 69
38134: ST_TO_ADDR
// if not tmp then
38135: LD_VAR 0 1
38139: NOT
38140: IFFALSE 38144
// exit ;
38142: GO 38181
// for i in tmp do
38144: LD_ADDR_VAR 0 2
38148: PUSH
38149: LD_VAR 0 1
38153: PUSH
38154: FOR_IN
38155: IFFALSE 38179
// if IsControledBy ( i ) then
38157: LD_VAR 0 2
38161: PPUSH
38162: CALL_OW 312
38166: IFFALSE 38177
// ComUnlink ( i ) ;
38168: LD_VAR 0 2
38172: PPUSH
38173: CALL_OW 136
38177: GO 38154
38179: POP
38180: POP
// end ;
38181: PPOPN 2
38183: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
38184: LD_EXP 88
38188: PUSH
38189: LD_EXP 119
38193: AND
38194: IFFALSE 38334
38196: GO 38198
38198: DISABLE
38199: LD_INT 0
38201: PPUSH
38202: PPUSH
// begin ToLua ( displayPowell(); ) ;
38203: LD_STRING displayPowell();
38205: PPUSH
38206: CALL_OW 559
// uc_side := 0 ;
38210: LD_ADDR_OWVAR 20
38214: PUSH
38215: LD_INT 0
38217: ST_TO_ADDR
// uc_nation := 2 ;
38218: LD_ADDR_OWVAR 21
38222: PUSH
38223: LD_INT 2
38225: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
38226: LD_ADDR_OWVAR 37
38230: PUSH
38231: LD_INT 14
38233: ST_TO_ADDR
// vc_engine := engine_siberite ;
38234: LD_ADDR_OWVAR 39
38238: PUSH
38239: LD_INT 3
38241: ST_TO_ADDR
// vc_control := control_apeman ;
38242: LD_ADDR_OWVAR 38
38246: PUSH
38247: LD_INT 5
38249: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
38250: LD_ADDR_OWVAR 40
38254: PUSH
38255: LD_INT 29
38257: ST_TO_ADDR
// un := CreateVehicle ;
38258: LD_ADDR_VAR 0 2
38262: PUSH
38263: CALL_OW 45
38267: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38268: LD_VAR 0 2
38272: PPUSH
38273: LD_INT 1
38275: PPUSH
38276: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
38280: LD_INT 35
38282: PPUSH
38283: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
38287: LD_VAR 0 2
38291: PPUSH
38292: LD_INT 22
38294: PUSH
38295: LD_OWVAR 2
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PPUSH
38304: CALL_OW 69
38308: PPUSH
38309: LD_VAR 0 2
38313: PPUSH
38314: CALL_OW 74
38318: PPUSH
38319: CALL_OW 115
// until IsDead ( un ) ;
38323: LD_VAR 0 2
38327: PPUSH
38328: CALL_OW 301
38332: IFFALSE 38280
// end ;
38334: PPOPN 2
38336: END
// every 0 0$1 trigger StreamModeActive and sStu do
38337: LD_EXP 88
38341: PUSH
38342: LD_EXP 127
38346: AND
38347: IFFALSE 38363
38349: GO 38351
38351: DISABLE
// begin ToLua ( displayStucuk(); ) ;
38352: LD_STRING displayStucuk();
38354: PPUSH
38355: CALL_OW 559
// ResetFog ;
38359: CALL_OW 335
// end ;
38363: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
38364: LD_EXP 88
38368: PUSH
38369: LD_EXP 120
38373: AND
38374: IFFALSE 38515
38376: GO 38378
38378: DISABLE
38379: LD_INT 0
38381: PPUSH
38382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38383: LD_ADDR_VAR 0 2
38387: PUSH
38388: LD_INT 22
38390: PUSH
38391: LD_OWVAR 2
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 21
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PPUSH
38414: CALL_OW 69
38418: ST_TO_ADDR
// if not tmp then
38419: LD_VAR 0 2
38423: NOT
38424: IFFALSE 38428
// exit ;
38426: GO 38515
// un := tmp [ rand ( 1 , tmp ) ] ;
38428: LD_ADDR_VAR 0 1
38432: PUSH
38433: LD_VAR 0 2
38437: PUSH
38438: LD_INT 1
38440: PPUSH
38441: LD_VAR 0 2
38445: PPUSH
38446: CALL_OW 12
38450: ARRAY
38451: ST_TO_ADDR
// SetSide ( un , 0 ) ;
38452: LD_VAR 0 1
38456: PPUSH
38457: LD_INT 0
38459: PPUSH
38460: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
38464: LD_VAR 0 1
38468: PPUSH
38469: LD_OWVAR 3
38473: PUSH
38474: LD_VAR 0 1
38478: DIFF
38479: PPUSH
38480: LD_VAR 0 1
38484: PPUSH
38485: CALL_OW 74
38489: PPUSH
38490: CALL_OW 115
// wait ( 0 0$20 ) ;
38494: LD_INT 700
38496: PPUSH
38497: CALL_OW 67
// SetSide ( un , your_side ) ;
38501: LD_VAR 0 1
38505: PPUSH
38506: LD_OWVAR 2
38510: PPUSH
38511: CALL_OW 235
// end ;
38515: PPOPN 2
38517: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
38518: LD_EXP 88
38522: PUSH
38523: LD_EXP 121
38527: AND
38528: IFFALSE 38634
38530: GO 38532
38532: DISABLE
38533: LD_INT 0
38535: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38536: LD_ADDR_VAR 0 1
38540: PUSH
38541: LD_INT 22
38543: PUSH
38544: LD_OWVAR 2
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: LD_INT 30
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 30
38568: PUSH
38569: LD_INT 1
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: LIST
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PPUSH
38585: CALL_OW 69
38589: ST_TO_ADDR
// if not depot then
38590: LD_VAR 0 1
38594: NOT
38595: IFFALSE 38599
// exit ;
38597: GO 38634
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
38599: LD_VAR 0 1
38603: PUSH
38604: LD_INT 1
38606: ARRAY
38607: PPUSH
38608: CALL_OW 250
38612: PPUSH
38613: LD_VAR 0 1
38617: PUSH
38618: LD_INT 1
38620: ARRAY
38621: PPUSH
38622: CALL_OW 251
38626: PPUSH
38627: LD_INT 70
38629: PPUSH
38630: CALL_OW 495
// end ;
38634: PPOPN 1
38636: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
38637: LD_EXP 88
38641: PUSH
38642: LD_EXP 122
38646: AND
38647: IFFALSE 38858
38649: GO 38651
38651: DISABLE
38652: LD_INT 0
38654: PPUSH
38655: PPUSH
38656: PPUSH
38657: PPUSH
38658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38659: LD_ADDR_VAR 0 5
38663: PUSH
38664: LD_INT 22
38666: PUSH
38667: LD_OWVAR 2
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 21
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PPUSH
38690: CALL_OW 69
38694: ST_TO_ADDR
// if not tmp then
38695: LD_VAR 0 5
38699: NOT
38700: IFFALSE 38704
// exit ;
38702: GO 38858
// for i in tmp do
38704: LD_ADDR_VAR 0 1
38708: PUSH
38709: LD_VAR 0 5
38713: PUSH
38714: FOR_IN
38715: IFFALSE 38856
// begin d := rand ( 0 , 5 ) ;
38717: LD_ADDR_VAR 0 4
38721: PUSH
38722: LD_INT 0
38724: PPUSH
38725: LD_INT 5
38727: PPUSH
38728: CALL_OW 12
38732: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
38733: LD_ADDR_VAR 0 2
38737: PUSH
38738: LD_VAR 0 1
38742: PPUSH
38743: CALL_OW 250
38747: PPUSH
38748: LD_VAR 0 4
38752: PPUSH
38753: LD_INT 3
38755: PPUSH
38756: LD_INT 12
38758: PPUSH
38759: CALL_OW 12
38763: PPUSH
38764: CALL_OW 272
38768: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
38769: LD_ADDR_VAR 0 3
38773: PUSH
38774: LD_VAR 0 1
38778: PPUSH
38779: CALL_OW 251
38783: PPUSH
38784: LD_VAR 0 4
38788: PPUSH
38789: LD_INT 3
38791: PPUSH
38792: LD_INT 12
38794: PPUSH
38795: CALL_OW 12
38799: PPUSH
38800: CALL_OW 273
38804: ST_TO_ADDR
// if ValidHex ( x , y ) then
38805: LD_VAR 0 2
38809: PPUSH
38810: LD_VAR 0 3
38814: PPUSH
38815: CALL_OW 488
38819: IFFALSE 38854
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
38821: LD_VAR 0 1
38825: PPUSH
38826: LD_VAR 0 2
38830: PPUSH
38831: LD_VAR 0 3
38835: PPUSH
38836: LD_INT 3
38838: PPUSH
38839: LD_INT 6
38841: PPUSH
38842: CALL_OW 12
38846: PPUSH
38847: LD_INT 1
38849: PPUSH
38850: CALL_OW 483
// end ;
38854: GO 38714
38856: POP
38857: POP
// end ;
38858: PPOPN 5
38860: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
38861: LD_EXP 88
38865: PUSH
38866: LD_EXP 123
38870: AND
38871: IFFALSE 38965
38873: GO 38875
38875: DISABLE
38876: LD_INT 0
38878: PPUSH
38879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
38880: LD_ADDR_VAR 0 2
38884: PUSH
38885: LD_INT 22
38887: PUSH
38888: LD_OWVAR 2
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 32
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 21
38909: PUSH
38910: LD_INT 2
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: PPUSH
38922: CALL_OW 69
38926: ST_TO_ADDR
// if not tmp then
38927: LD_VAR 0 2
38931: NOT
38932: IFFALSE 38936
// exit ;
38934: GO 38965
// for i in tmp do
38936: LD_ADDR_VAR 0 1
38940: PUSH
38941: LD_VAR 0 2
38945: PUSH
38946: FOR_IN
38947: IFFALSE 38963
// SetFuel ( i , 0 ) ;
38949: LD_VAR 0 1
38953: PPUSH
38954: LD_INT 0
38956: PPUSH
38957: CALL_OW 240
38961: GO 38946
38963: POP
38964: POP
// end ;
38965: PPOPN 2
38967: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
38968: LD_EXP 88
38972: PUSH
38973: LD_EXP 124
38977: AND
38978: IFFALSE 39044
38980: GO 38982
38982: DISABLE
38983: LD_INT 0
38985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38986: LD_ADDR_VAR 0 1
38990: PUSH
38991: LD_INT 22
38993: PUSH
38994: LD_OWVAR 2
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 30
39005: PUSH
39006: LD_INT 29
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PPUSH
39017: CALL_OW 69
39021: ST_TO_ADDR
// if not tmp then
39022: LD_VAR 0 1
39026: NOT
39027: IFFALSE 39031
// exit ;
39029: GO 39044
// DestroyUnit ( tmp [ 1 ] ) ;
39031: LD_VAR 0 1
39035: PUSH
39036: LD_INT 1
39038: ARRAY
39039: PPUSH
39040: CALL_OW 65
// end ;
39044: PPOPN 1
39046: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
39047: LD_EXP 88
39051: PUSH
39052: LD_EXP 126
39056: AND
39057: IFFALSE 39186
39059: GO 39061
39061: DISABLE
39062: LD_INT 0
39064: PPUSH
// begin uc_side := 0 ;
39065: LD_ADDR_OWVAR 20
39069: PUSH
39070: LD_INT 0
39072: ST_TO_ADDR
// uc_nation := nation_arabian ;
39073: LD_ADDR_OWVAR 21
39077: PUSH
39078: LD_INT 2
39080: ST_TO_ADDR
// hc_gallery :=  ;
39081: LD_ADDR_OWVAR 33
39085: PUSH
39086: LD_STRING 
39088: ST_TO_ADDR
// hc_name :=  ;
39089: LD_ADDR_OWVAR 26
39093: PUSH
39094: LD_STRING 
39096: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
39097: LD_INT 1
39099: PPUSH
39100: LD_INT 11
39102: PPUSH
39103: LD_INT 10
39105: PPUSH
39106: CALL_OW 380
// un := CreateHuman ;
39110: LD_ADDR_VAR 0 1
39114: PUSH
39115: CALL_OW 44
39119: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39120: LD_VAR 0 1
39124: PPUSH
39125: LD_INT 1
39127: PPUSH
39128: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39132: LD_INT 35
39134: PPUSH
39135: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39139: LD_VAR 0 1
39143: PPUSH
39144: LD_INT 22
39146: PUSH
39147: LD_OWVAR 2
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PPUSH
39156: CALL_OW 69
39160: PPUSH
39161: LD_VAR 0 1
39165: PPUSH
39166: CALL_OW 74
39170: PPUSH
39171: CALL_OW 115
// until IsDead ( un ) ;
39175: LD_VAR 0 1
39179: PPUSH
39180: CALL_OW 301
39184: IFFALSE 39132
// end ;
39186: PPOPN 1
39188: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
39189: LD_EXP 88
39193: PUSH
39194: LD_EXP 128
39198: AND
39199: IFFALSE 39211
39201: GO 39203
39203: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
39204: LD_STRING earthquake(getX(game), 0, 32)
39206: PPUSH
39207: CALL_OW 559
39211: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
39212: LD_EXP 88
39216: PUSH
39217: LD_EXP 129
39221: AND
39222: IFFALSE 39313
39224: GO 39226
39226: DISABLE
39227: LD_INT 0
39229: PPUSH
// begin enable ;
39230: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
39231: LD_ADDR_VAR 0 1
39235: PUSH
39236: LD_INT 22
39238: PUSH
39239: LD_OWVAR 2
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 21
39250: PUSH
39251: LD_INT 2
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 33
39260: PUSH
39261: LD_INT 3
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: LIST
39272: PPUSH
39273: CALL_OW 69
39277: ST_TO_ADDR
// if not tmp then
39278: LD_VAR 0 1
39282: NOT
39283: IFFALSE 39287
// exit ;
39285: GO 39313
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
39287: LD_VAR 0 1
39291: PUSH
39292: LD_INT 1
39294: PPUSH
39295: LD_VAR 0 1
39299: PPUSH
39300: CALL_OW 12
39304: ARRAY
39305: PPUSH
39306: LD_INT 1
39308: PPUSH
39309: CALL_OW 234
// end ;
39313: PPOPN 1
39315: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
39316: LD_EXP 88
39320: PUSH
39321: LD_EXP 130
39325: AND
39326: IFFALSE 39467
39328: GO 39330
39330: DISABLE
39331: LD_INT 0
39333: PPUSH
39334: PPUSH
39335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39336: LD_ADDR_VAR 0 3
39340: PUSH
39341: LD_INT 22
39343: PUSH
39344: LD_OWVAR 2
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 25
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PPUSH
39367: CALL_OW 69
39371: ST_TO_ADDR
// if not tmp then
39372: LD_VAR 0 3
39376: NOT
39377: IFFALSE 39381
// exit ;
39379: GO 39467
// un := tmp [ rand ( 1 , tmp ) ] ;
39381: LD_ADDR_VAR 0 2
39385: PUSH
39386: LD_VAR 0 3
39390: PUSH
39391: LD_INT 1
39393: PPUSH
39394: LD_VAR 0 3
39398: PPUSH
39399: CALL_OW 12
39403: ARRAY
39404: ST_TO_ADDR
// if Crawls ( un ) then
39405: LD_VAR 0 2
39409: PPUSH
39410: CALL_OW 318
39414: IFFALSE 39425
// ComWalk ( un ) ;
39416: LD_VAR 0 2
39420: PPUSH
39421: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
39425: LD_VAR 0 2
39429: PPUSH
39430: LD_INT 9
39432: PPUSH
39433: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
39437: LD_INT 28
39439: PPUSH
39440: LD_OWVAR 2
39444: PPUSH
39445: LD_INT 2
39447: PPUSH
39448: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
39452: LD_INT 29
39454: PPUSH
39455: LD_OWVAR 2
39459: PPUSH
39460: LD_INT 2
39462: PPUSH
39463: CALL_OW 322
// end ;
39467: PPOPN 3
39469: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
39470: LD_EXP 88
39474: PUSH
39475: LD_EXP 131
39479: AND
39480: IFFALSE 39591
39482: GO 39484
39484: DISABLE
39485: LD_INT 0
39487: PPUSH
39488: PPUSH
39489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39490: LD_ADDR_VAR 0 3
39494: PUSH
39495: LD_INT 22
39497: PUSH
39498: LD_OWVAR 2
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 25
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PPUSH
39521: CALL_OW 69
39525: ST_TO_ADDR
// if not tmp then
39526: LD_VAR 0 3
39530: NOT
39531: IFFALSE 39535
// exit ;
39533: GO 39591
// un := tmp [ rand ( 1 , tmp ) ] ;
39535: LD_ADDR_VAR 0 2
39539: PUSH
39540: LD_VAR 0 3
39544: PUSH
39545: LD_INT 1
39547: PPUSH
39548: LD_VAR 0 3
39552: PPUSH
39553: CALL_OW 12
39557: ARRAY
39558: ST_TO_ADDR
// if Crawls ( un ) then
39559: LD_VAR 0 2
39563: PPUSH
39564: CALL_OW 318
39568: IFFALSE 39579
// ComWalk ( un ) ;
39570: LD_VAR 0 2
39574: PPUSH
39575: CALL_OW 138
// SetClass ( un , class_mortar ) ;
39579: LD_VAR 0 2
39583: PPUSH
39584: LD_INT 8
39586: PPUSH
39587: CALL_OW 336
// end ;
39591: PPOPN 3
39593: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
39594: LD_EXP 88
39598: PUSH
39599: LD_EXP 132
39603: AND
39604: IFFALSE 39748
39606: GO 39608
39608: DISABLE
39609: LD_INT 0
39611: PPUSH
39612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
39613: LD_ADDR_VAR 0 2
39617: PUSH
39618: LD_INT 22
39620: PUSH
39621: LD_OWVAR 2
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 21
39632: PUSH
39633: LD_INT 2
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 2
39642: PUSH
39643: LD_INT 34
39645: PUSH
39646: LD_INT 12
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 34
39655: PUSH
39656: LD_INT 51
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 34
39665: PUSH
39666: LD_INT 32
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: LIST
39683: PPUSH
39684: CALL_OW 69
39688: ST_TO_ADDR
// if not tmp then
39689: LD_VAR 0 2
39693: NOT
39694: IFFALSE 39698
// exit ;
39696: GO 39748
// for i in tmp do
39698: LD_ADDR_VAR 0 1
39702: PUSH
39703: LD_VAR 0 2
39707: PUSH
39708: FOR_IN
39709: IFFALSE 39746
// if GetCargo ( i , mat_artifact ) = 0 then
39711: LD_VAR 0 1
39715: PPUSH
39716: LD_INT 4
39718: PPUSH
39719: CALL_OW 289
39723: PUSH
39724: LD_INT 0
39726: EQUAL
39727: IFFALSE 39744
// SetCargo ( i , mat_siberit , 100 ) ;
39729: LD_VAR 0 1
39733: PPUSH
39734: LD_INT 3
39736: PPUSH
39737: LD_INT 100
39739: PPUSH
39740: CALL_OW 290
39744: GO 39708
39746: POP
39747: POP
// end ;
39748: PPOPN 2
39750: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
39751: LD_EXP 88
39755: PUSH
39756: LD_EXP 133
39760: AND
39761: IFFALSE 39944
39763: GO 39765
39765: DISABLE
39766: LD_INT 0
39768: PPUSH
39769: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39770: LD_ADDR_VAR 0 2
39774: PUSH
39775: LD_INT 22
39777: PUSH
39778: LD_OWVAR 2
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PPUSH
39787: CALL_OW 69
39791: ST_TO_ADDR
// if not tmp then
39792: LD_VAR 0 2
39796: NOT
39797: IFFALSE 39801
// exit ;
39799: GO 39944
// for i := 1 to 2 do
39801: LD_ADDR_VAR 0 1
39805: PUSH
39806: DOUBLE
39807: LD_INT 1
39809: DEC
39810: ST_TO_ADDR
39811: LD_INT 2
39813: PUSH
39814: FOR_TO
39815: IFFALSE 39942
// begin uc_side := your_side ;
39817: LD_ADDR_OWVAR 20
39821: PUSH
39822: LD_OWVAR 2
39826: ST_TO_ADDR
// uc_nation := nation_american ;
39827: LD_ADDR_OWVAR 21
39831: PUSH
39832: LD_INT 1
39834: ST_TO_ADDR
// vc_chassis := us_morphling ;
39835: LD_ADDR_OWVAR 37
39839: PUSH
39840: LD_INT 5
39842: ST_TO_ADDR
// vc_engine := engine_siberite ;
39843: LD_ADDR_OWVAR 39
39847: PUSH
39848: LD_INT 3
39850: ST_TO_ADDR
// vc_control := control_computer ;
39851: LD_ADDR_OWVAR 38
39855: PUSH
39856: LD_INT 3
39858: ST_TO_ADDR
// vc_weapon := us_double_laser ;
39859: LD_ADDR_OWVAR 40
39863: PUSH
39864: LD_INT 10
39866: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
39867: LD_VAR 0 2
39871: PUSH
39872: LD_INT 1
39874: ARRAY
39875: PPUSH
39876: CALL_OW 310
39880: NOT
39881: IFFALSE 39928
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
39883: CALL_OW 45
39887: PPUSH
39888: LD_VAR 0 2
39892: PUSH
39893: LD_INT 1
39895: ARRAY
39896: PPUSH
39897: CALL_OW 250
39901: PPUSH
39902: LD_VAR 0 2
39906: PUSH
39907: LD_INT 1
39909: ARRAY
39910: PPUSH
39911: CALL_OW 251
39915: PPUSH
39916: LD_INT 12
39918: PPUSH
39919: LD_INT 1
39921: PPUSH
39922: CALL_OW 50
39926: GO 39940
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
39928: CALL_OW 45
39932: PPUSH
39933: LD_INT 1
39935: PPUSH
39936: CALL_OW 51
// end ;
39940: GO 39814
39942: POP
39943: POP
// end ;
39944: PPOPN 2
39946: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
39947: LD_EXP 88
39951: PUSH
39952: LD_EXP 134
39956: AND
39957: IFFALSE 40179
39959: GO 39961
39961: DISABLE
39962: LD_INT 0
39964: PPUSH
39965: PPUSH
39966: PPUSH
39967: PPUSH
39968: PPUSH
39969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39970: LD_ADDR_VAR 0 6
39974: PUSH
39975: LD_INT 22
39977: PUSH
39978: LD_OWVAR 2
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 21
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 3
39999: PUSH
40000: LD_INT 23
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: LIST
40018: PPUSH
40019: CALL_OW 69
40023: ST_TO_ADDR
// if not tmp then
40024: LD_VAR 0 6
40028: NOT
40029: IFFALSE 40033
// exit ;
40031: GO 40179
// s1 := rand ( 1 , 4 ) ;
40033: LD_ADDR_VAR 0 2
40037: PUSH
40038: LD_INT 1
40040: PPUSH
40041: LD_INT 4
40043: PPUSH
40044: CALL_OW 12
40048: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
40049: LD_ADDR_VAR 0 4
40053: PUSH
40054: LD_VAR 0 6
40058: PUSH
40059: LD_INT 1
40061: ARRAY
40062: PPUSH
40063: LD_VAR 0 2
40067: PPUSH
40068: CALL_OW 259
40072: ST_TO_ADDR
// if s1 = 1 then
40073: LD_VAR 0 2
40077: PUSH
40078: LD_INT 1
40080: EQUAL
40081: IFFALSE 40101
// s2 := rand ( 2 , 4 ) else
40083: LD_ADDR_VAR 0 3
40087: PUSH
40088: LD_INT 2
40090: PPUSH
40091: LD_INT 4
40093: PPUSH
40094: CALL_OW 12
40098: ST_TO_ADDR
40099: GO 40109
// s2 := 1 ;
40101: LD_ADDR_VAR 0 3
40105: PUSH
40106: LD_INT 1
40108: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
40109: LD_ADDR_VAR 0 5
40113: PUSH
40114: LD_VAR 0 6
40118: PUSH
40119: LD_INT 1
40121: ARRAY
40122: PPUSH
40123: LD_VAR 0 3
40127: PPUSH
40128: CALL_OW 259
40132: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
40133: LD_VAR 0 6
40137: PUSH
40138: LD_INT 1
40140: ARRAY
40141: PPUSH
40142: LD_VAR 0 2
40146: PPUSH
40147: LD_VAR 0 5
40151: PPUSH
40152: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
40156: LD_VAR 0 6
40160: PUSH
40161: LD_INT 1
40163: ARRAY
40164: PPUSH
40165: LD_VAR 0 3
40169: PPUSH
40170: LD_VAR 0 4
40174: PPUSH
40175: CALL_OW 237
// end ;
40179: PPOPN 6
40181: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
40182: LD_EXP 88
40186: PUSH
40187: LD_EXP 135
40191: AND
40192: IFFALSE 40271
40194: GO 40196
40196: DISABLE
40197: LD_INT 0
40199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
40200: LD_ADDR_VAR 0 1
40204: PUSH
40205: LD_INT 22
40207: PUSH
40208: LD_OWVAR 2
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 30
40219: PUSH
40220: LD_INT 3
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PPUSH
40231: CALL_OW 69
40235: ST_TO_ADDR
// if not tmp then
40236: LD_VAR 0 1
40240: NOT
40241: IFFALSE 40245
// exit ;
40243: GO 40271
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40245: LD_VAR 0 1
40249: PUSH
40250: LD_INT 1
40252: PPUSH
40253: LD_VAR 0 1
40257: PPUSH
40258: CALL_OW 12
40262: ARRAY
40263: PPUSH
40264: LD_INT 1
40266: PPUSH
40267: CALL_OW 234
// end ;
40271: PPOPN 1
40273: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
40274: LD_EXP 88
40278: PUSH
40279: LD_EXP 136
40283: AND
40284: IFFALSE 40396
40286: GO 40288
40288: DISABLE
40289: LD_INT 0
40291: PPUSH
40292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
40293: LD_ADDR_VAR 0 2
40297: PUSH
40298: LD_INT 22
40300: PUSH
40301: LD_OWVAR 2
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: LD_INT 30
40315: PUSH
40316: LD_INT 27
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 30
40325: PUSH
40326: LD_INT 26
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 30
40335: PUSH
40336: LD_INT 28
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PPUSH
40353: CALL_OW 69
40357: ST_TO_ADDR
// if not tmp then
40358: LD_VAR 0 2
40362: NOT
40363: IFFALSE 40367
// exit ;
40365: GO 40396
// for i in tmp do
40367: LD_ADDR_VAR 0 1
40371: PUSH
40372: LD_VAR 0 2
40376: PUSH
40377: FOR_IN
40378: IFFALSE 40394
// SetLives ( i , 1 ) ;
40380: LD_VAR 0 1
40384: PPUSH
40385: LD_INT 1
40387: PPUSH
40388: CALL_OW 234
40392: GO 40377
40394: POP
40395: POP
// end ;
40396: PPOPN 2
40398: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
40399: LD_EXP 88
40403: PUSH
40404: LD_EXP 137
40408: AND
40409: IFFALSE 40696
40411: GO 40413
40413: DISABLE
40414: LD_INT 0
40416: PPUSH
40417: PPUSH
40418: PPUSH
// begin i := rand ( 1 , 7 ) ;
40419: LD_ADDR_VAR 0 1
40423: PUSH
40424: LD_INT 1
40426: PPUSH
40427: LD_INT 7
40429: PPUSH
40430: CALL_OW 12
40434: ST_TO_ADDR
// case i of 1 :
40435: LD_VAR 0 1
40439: PUSH
40440: LD_INT 1
40442: DOUBLE
40443: EQUAL
40444: IFTRUE 40448
40446: GO 40458
40448: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
40449: LD_STRING earthquake(getX(game), 0, 32)
40451: PPUSH
40452: CALL_OW 559
40456: GO 40696
40458: LD_INT 2
40460: DOUBLE
40461: EQUAL
40462: IFTRUE 40466
40464: GO 40480
40466: POP
// begin ToLua ( displayStucuk(); ) ;
40467: LD_STRING displayStucuk();
40469: PPUSH
40470: CALL_OW 559
// ResetFog ;
40474: CALL_OW 335
// end ; 3 :
40478: GO 40696
40480: LD_INT 3
40482: DOUBLE
40483: EQUAL
40484: IFTRUE 40488
40486: GO 40592
40488: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40489: LD_ADDR_VAR 0 2
40493: PUSH
40494: LD_INT 22
40496: PUSH
40497: LD_OWVAR 2
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 25
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PPUSH
40520: CALL_OW 69
40524: ST_TO_ADDR
// if not tmp then
40525: LD_VAR 0 2
40529: NOT
40530: IFFALSE 40534
// exit ;
40532: GO 40696
// un := tmp [ rand ( 1 , tmp ) ] ;
40534: LD_ADDR_VAR 0 3
40538: PUSH
40539: LD_VAR 0 2
40543: PUSH
40544: LD_INT 1
40546: PPUSH
40547: LD_VAR 0 2
40551: PPUSH
40552: CALL_OW 12
40556: ARRAY
40557: ST_TO_ADDR
// if Crawls ( un ) then
40558: LD_VAR 0 3
40562: PPUSH
40563: CALL_OW 318
40567: IFFALSE 40578
// ComWalk ( un ) ;
40569: LD_VAR 0 3
40573: PPUSH
40574: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40578: LD_VAR 0 3
40582: PPUSH
40583: LD_INT 8
40585: PPUSH
40586: CALL_OW 336
// end ; 4 :
40590: GO 40696
40592: LD_INT 4
40594: DOUBLE
40595: EQUAL
40596: IFTRUE 40600
40598: GO 40674
40600: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
40601: LD_ADDR_VAR 0 2
40605: PUSH
40606: LD_INT 22
40608: PUSH
40609: LD_OWVAR 2
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 30
40620: PUSH
40621: LD_INT 29
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PPUSH
40632: CALL_OW 69
40636: ST_TO_ADDR
// if not tmp then
40637: LD_VAR 0 2
40641: NOT
40642: IFFALSE 40646
// exit ;
40644: GO 40696
// CenterNowOnUnits ( tmp [ 1 ] ) ;
40646: LD_VAR 0 2
40650: PUSH
40651: LD_INT 1
40653: ARRAY
40654: PPUSH
40655: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
40659: LD_VAR 0 2
40663: PUSH
40664: LD_INT 1
40666: ARRAY
40667: PPUSH
40668: CALL_OW 65
// end ; 5 .. 7 :
40672: GO 40696
40674: LD_INT 5
40676: DOUBLE
40677: GREATEREQUAL
40678: IFFALSE 40686
40680: LD_INT 7
40682: DOUBLE
40683: LESSEQUAL
40684: IFTRUE 40688
40686: GO 40695
40688: POP
// StreamSibBomb ; end ;
40689: CALL 36933 0 0
40693: GO 40696
40695: POP
// end ;
40696: PPOPN 3
40698: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
40699: LD_EXP 88
40703: PUSH
40704: LD_EXP 138
40708: AND
40709: IFFALSE 40865
40711: GO 40713
40713: DISABLE
40714: LD_INT 0
40716: PPUSH
40717: PPUSH
40718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
40719: LD_ADDR_VAR 0 2
40723: PUSH
40724: LD_INT 81
40726: PUSH
40727: LD_OWVAR 2
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: LD_INT 21
40741: PUSH
40742: LD_INT 1
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 21
40751: PUSH
40752: LD_INT 2
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: LIST
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PPUSH
40768: CALL_OW 69
40772: ST_TO_ADDR
// if not tmp then
40773: LD_VAR 0 2
40777: NOT
40778: IFFALSE 40782
// exit ;
40780: GO 40865
// p := 0 ;
40782: LD_ADDR_VAR 0 3
40786: PUSH
40787: LD_INT 0
40789: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40790: LD_INT 35
40792: PPUSH
40793: CALL_OW 67
// p := p + 1 ;
40797: LD_ADDR_VAR 0 3
40801: PUSH
40802: LD_VAR 0 3
40806: PUSH
40807: LD_INT 1
40809: PLUS
40810: ST_TO_ADDR
// for i in tmp do
40811: LD_ADDR_VAR 0 1
40815: PUSH
40816: LD_VAR 0 2
40820: PUSH
40821: FOR_IN
40822: IFFALSE 40853
// if GetLives ( i ) < 1000 then
40824: LD_VAR 0 1
40828: PPUSH
40829: CALL_OW 256
40833: PUSH
40834: LD_INT 1000
40836: LESS
40837: IFFALSE 40851
// SetLives ( i , 1000 ) ;
40839: LD_VAR 0 1
40843: PPUSH
40844: LD_INT 1000
40846: PPUSH
40847: CALL_OW 234
40851: GO 40821
40853: POP
40854: POP
// until p > 20 ;
40855: LD_VAR 0 3
40859: PUSH
40860: LD_INT 20
40862: GREATER
40863: IFFALSE 40790
// end ;
40865: PPOPN 3
40867: END
// every 0 0$1 trigger StreamModeActive and sTime do
40868: LD_EXP 88
40872: PUSH
40873: LD_EXP 139
40877: AND
40878: IFFALSE 40913
40880: GO 40882
40882: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
40883: LD_INT 28
40885: PPUSH
40886: LD_OWVAR 2
40890: PPUSH
40891: LD_INT 2
40893: PPUSH
40894: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
40898: LD_INT 30
40900: PPUSH
40901: LD_OWVAR 2
40905: PPUSH
40906: LD_INT 2
40908: PPUSH
40909: CALL_OW 322
// end ;
40913: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
40914: LD_EXP 88
40918: PUSH
40919: LD_EXP 140
40923: AND
40924: IFFALSE 41045
40926: GO 40928
40928: DISABLE
40929: LD_INT 0
40931: PPUSH
40932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40933: LD_ADDR_VAR 0 2
40937: PUSH
40938: LD_INT 22
40940: PUSH
40941: LD_OWVAR 2
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 21
40952: PUSH
40953: LD_INT 1
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 3
40962: PUSH
40963: LD_INT 23
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: LIST
40981: PPUSH
40982: CALL_OW 69
40986: ST_TO_ADDR
// if not tmp then
40987: LD_VAR 0 2
40991: NOT
40992: IFFALSE 40996
// exit ;
40994: GO 41045
// for i in tmp do
40996: LD_ADDR_VAR 0 1
41000: PUSH
41001: LD_VAR 0 2
41005: PUSH
41006: FOR_IN
41007: IFFALSE 41043
// begin if Crawls ( i ) then
41009: LD_VAR 0 1
41013: PPUSH
41014: CALL_OW 318
41018: IFFALSE 41029
// ComWalk ( i ) ;
41020: LD_VAR 0 1
41024: PPUSH
41025: CALL_OW 138
// SetClass ( i , 2 ) ;
41029: LD_VAR 0 1
41033: PPUSH
41034: LD_INT 2
41036: PPUSH
41037: CALL_OW 336
// end ;
41041: GO 41006
41043: POP
41044: POP
// end ;
41045: PPOPN 2
41047: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
41048: LD_EXP 88
41052: PUSH
41053: LD_EXP 141
41057: AND
41058: IFFALSE 41346
41060: GO 41062
41062: DISABLE
41063: LD_INT 0
41065: PPUSH
41066: PPUSH
41067: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
41068: LD_OWVAR 2
41072: PPUSH
41073: LD_INT 9
41075: PPUSH
41076: LD_INT 1
41078: PPUSH
41079: LD_INT 1
41081: PPUSH
41082: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
41086: LD_INT 9
41088: PPUSH
41089: LD_OWVAR 2
41093: PPUSH
41094: CALL_OW 343
// uc_side := 9 ;
41098: LD_ADDR_OWVAR 20
41102: PUSH
41103: LD_INT 9
41105: ST_TO_ADDR
// uc_nation := 2 ;
41106: LD_ADDR_OWVAR 21
41110: PUSH
41111: LD_INT 2
41113: ST_TO_ADDR
// hc_name := Dark Warrior ;
41114: LD_ADDR_OWVAR 26
41118: PUSH
41119: LD_STRING Dark Warrior
41121: ST_TO_ADDR
// hc_gallery :=  ;
41122: LD_ADDR_OWVAR 33
41126: PUSH
41127: LD_STRING 
41129: ST_TO_ADDR
// hc_noskilllimit := true ;
41130: LD_ADDR_OWVAR 76
41134: PUSH
41135: LD_INT 1
41137: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
41138: LD_ADDR_OWVAR 31
41142: PUSH
41143: LD_INT 30
41145: PUSH
41146: LD_INT 30
41148: PUSH
41149: LD_INT 30
41151: PUSH
41152: LD_INT 30
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: ST_TO_ADDR
// un := CreateHuman ;
41161: LD_ADDR_VAR 0 3
41165: PUSH
41166: CALL_OW 44
41170: ST_TO_ADDR
// hc_noskilllimit := false ;
41171: LD_ADDR_OWVAR 76
41175: PUSH
41176: LD_INT 0
41178: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
41179: LD_VAR 0 3
41183: PPUSH
41184: LD_INT 1
41186: PPUSH
41187: CALL_OW 51
// ToLua ( playRanger() ) ;
41191: LD_STRING playRanger()
41193: PPUSH
41194: CALL_OW 559
// p := 0 ;
41198: LD_ADDR_VAR 0 2
41202: PUSH
41203: LD_INT 0
41205: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41206: LD_INT 35
41208: PPUSH
41209: CALL_OW 67
// p := p + 1 ;
41213: LD_ADDR_VAR 0 2
41217: PUSH
41218: LD_VAR 0 2
41222: PUSH
41223: LD_INT 1
41225: PLUS
41226: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
41227: LD_VAR 0 3
41231: PPUSH
41232: CALL_OW 256
41236: PUSH
41237: LD_INT 1000
41239: LESS
41240: IFFALSE 41254
// SetLives ( un , 1000 ) ;
41242: LD_VAR 0 3
41246: PPUSH
41247: LD_INT 1000
41249: PPUSH
41250: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
41254: LD_VAR 0 3
41258: PPUSH
41259: LD_INT 81
41261: PUSH
41262: LD_OWVAR 2
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 91
41273: PUSH
41274: LD_VAR 0 3
41278: PUSH
41279: LD_INT 30
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: LIST
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PPUSH
41291: CALL_OW 69
41295: PPUSH
41296: LD_VAR 0 3
41300: PPUSH
41301: CALL_OW 74
41305: PPUSH
41306: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
41310: LD_VAR 0 2
41314: PUSH
41315: LD_INT 80
41317: GREATER
41318: PUSH
41319: LD_VAR 0 3
41323: PPUSH
41324: CALL_OW 301
41328: OR
41329: IFFALSE 41206
// if un then
41331: LD_VAR 0 3
41335: IFFALSE 41346
// RemoveUnit ( un ) ;
41337: LD_VAR 0 3
41341: PPUSH
41342: CALL_OW 64
// end ;
41346: PPOPN 3
41348: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
41349: LD_EXP 142
41353: IFFALSE 41469
41355: GO 41357
41357: DISABLE
41358: LD_INT 0
41360: PPUSH
41361: PPUSH
41362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
41363: LD_ADDR_VAR 0 2
41367: PUSH
41368: LD_INT 81
41370: PUSH
41371: LD_OWVAR 2
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 21
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PPUSH
41394: CALL_OW 69
41398: ST_TO_ADDR
// if not tmp then
41399: LD_VAR 0 2
41403: NOT
41404: IFFALSE 41408
// exit ;
41406: GO 41469
// ToLua ( playComputer() ) ;
41408: LD_STRING playComputer()
41410: PPUSH
41411: CALL_OW 559
// for i in tmp do
41415: LD_ADDR_VAR 0 1
41419: PUSH
41420: LD_VAR 0 2
41424: PUSH
41425: FOR_IN
41426: IFFALSE 41467
// for j := 1 to 4 do
41428: LD_ADDR_VAR 0 3
41432: PUSH
41433: DOUBLE
41434: LD_INT 1
41436: DEC
41437: ST_TO_ADDR
41438: LD_INT 4
41440: PUSH
41441: FOR_TO
41442: IFFALSE 41463
// SetSkill ( i , j , 10 ) ;
41444: LD_VAR 0 1
41448: PPUSH
41449: LD_VAR 0 3
41453: PPUSH
41454: LD_INT 10
41456: PPUSH
41457: CALL_OW 237
41461: GO 41441
41463: POP
41464: POP
41465: GO 41425
41467: POP
41468: POP
// end ;
41469: PPOPN 3
41471: END
// every 0 0$1 trigger s30 do var i , tmp ;
41472: LD_EXP 143
41476: IFFALSE 41545
41478: GO 41480
41480: DISABLE
41481: LD_INT 0
41483: PPUSH
41484: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
41485: LD_ADDR_VAR 0 2
41489: PUSH
41490: LD_INT 22
41492: PUSH
41493: LD_OWVAR 2
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PPUSH
41502: CALL_OW 69
41506: ST_TO_ADDR
// if not tmp then
41507: LD_VAR 0 2
41511: NOT
41512: IFFALSE 41516
// exit ;
41514: GO 41545
// for i in tmp do
41516: LD_ADDR_VAR 0 1
41520: PUSH
41521: LD_VAR 0 2
41525: PUSH
41526: FOR_IN
41527: IFFALSE 41543
// SetLives ( i , 300 ) ;
41529: LD_VAR 0 1
41533: PPUSH
41534: LD_INT 300
41536: PPUSH
41537: CALL_OW 234
41541: GO 41526
41543: POP
41544: POP
// end ;
41545: PPOPN 2
41547: END
// every 0 0$1 trigger s60 do var i , tmp ;
41548: LD_EXP 144
41552: IFFALSE 41621
41554: GO 41556
41556: DISABLE
41557: LD_INT 0
41559: PPUSH
41560: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
41561: LD_ADDR_VAR 0 2
41565: PUSH
41566: LD_INT 22
41568: PUSH
41569: LD_OWVAR 2
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PPUSH
41578: CALL_OW 69
41582: ST_TO_ADDR
// if not tmp then
41583: LD_VAR 0 2
41587: NOT
41588: IFFALSE 41592
// exit ;
41590: GO 41621
// for i in tmp do
41592: LD_ADDR_VAR 0 1
41596: PUSH
41597: LD_VAR 0 2
41601: PUSH
41602: FOR_IN
41603: IFFALSE 41619
// SetLives ( i , 600 ) ;
41605: LD_VAR 0 1
41609: PPUSH
41610: LD_INT 600
41612: PPUSH
41613: CALL_OW 234
41617: GO 41602
41619: POP
41620: POP
// end ;
41621: PPOPN 2
41623: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
41624: LD_INT 0
41626: PPUSH
// case cmd of 301 :
41627: LD_VAR 0 1
41631: PUSH
41632: LD_INT 301
41634: DOUBLE
41635: EQUAL
41636: IFTRUE 41640
41638: GO 41672
41640: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
41641: LD_VAR 0 6
41645: PPUSH
41646: LD_VAR 0 7
41650: PPUSH
41651: LD_VAR 0 8
41655: PPUSH
41656: LD_VAR 0 4
41660: PPUSH
41661: LD_VAR 0 5
41665: PPUSH
41666: CALL 42873 0 5
41670: GO 41793
41672: LD_INT 302
41674: DOUBLE
41675: EQUAL
41676: IFTRUE 41680
41678: GO 41717
41680: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
41681: LD_VAR 0 6
41685: PPUSH
41686: LD_VAR 0 7
41690: PPUSH
41691: LD_VAR 0 8
41695: PPUSH
41696: LD_VAR 0 9
41700: PPUSH
41701: LD_VAR 0 4
41705: PPUSH
41706: LD_VAR 0 5
41710: PPUSH
41711: CALL 42964 0 6
41715: GO 41793
41717: LD_INT 303
41719: DOUBLE
41720: EQUAL
41721: IFTRUE 41725
41723: GO 41762
41725: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
41726: LD_VAR 0 6
41730: PPUSH
41731: LD_VAR 0 7
41735: PPUSH
41736: LD_VAR 0 8
41740: PPUSH
41741: LD_VAR 0 9
41745: PPUSH
41746: LD_VAR 0 4
41750: PPUSH
41751: LD_VAR 0 5
41755: PPUSH
41756: CALL 41798 0 6
41760: GO 41793
41762: LD_INT 304
41764: DOUBLE
41765: EQUAL
41766: IFTRUE 41770
41768: GO 41792
41770: POP
// hHackTeleport ( unit , x , y ) ; end ;
41771: LD_VAR 0 2
41775: PPUSH
41776: LD_VAR 0 4
41780: PPUSH
41781: LD_VAR 0 5
41785: PPUSH
41786: CALL 43557 0 3
41790: GO 41793
41792: POP
// end ;
41793: LD_VAR 0 12
41797: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
41798: LD_INT 0
41800: PPUSH
41801: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
41802: LD_VAR 0 1
41806: PUSH
41807: LD_INT 1
41809: LESS
41810: PUSH
41811: LD_VAR 0 1
41815: PUSH
41816: LD_INT 3
41818: GREATER
41819: OR
41820: PUSH
41821: LD_VAR 0 5
41825: PPUSH
41826: LD_VAR 0 6
41830: PPUSH
41831: CALL_OW 428
41835: OR
41836: IFFALSE 41840
// exit ;
41838: GO 42560
// uc_side := your_side ;
41840: LD_ADDR_OWVAR 20
41844: PUSH
41845: LD_OWVAR 2
41849: ST_TO_ADDR
// uc_nation := nation ;
41850: LD_ADDR_OWVAR 21
41854: PUSH
41855: LD_VAR 0 1
41859: ST_TO_ADDR
// bc_level = 1 ;
41860: LD_ADDR_OWVAR 43
41864: PUSH
41865: LD_INT 1
41867: ST_TO_ADDR
// case btype of 1 :
41868: LD_VAR 0 2
41872: PUSH
41873: LD_INT 1
41875: DOUBLE
41876: EQUAL
41877: IFTRUE 41881
41879: GO 41892
41881: POP
// bc_type := b_depot ; 2 :
41882: LD_ADDR_OWVAR 42
41886: PUSH
41887: LD_INT 0
41889: ST_TO_ADDR
41890: GO 42504
41892: LD_INT 2
41894: DOUBLE
41895: EQUAL
41896: IFTRUE 41900
41898: GO 41911
41900: POP
// bc_type := b_warehouse ; 3 :
41901: LD_ADDR_OWVAR 42
41905: PUSH
41906: LD_INT 1
41908: ST_TO_ADDR
41909: GO 42504
41911: LD_INT 3
41913: DOUBLE
41914: EQUAL
41915: IFTRUE 41919
41917: GO 41930
41919: POP
// bc_type := b_lab ; 4 .. 9 :
41920: LD_ADDR_OWVAR 42
41924: PUSH
41925: LD_INT 6
41927: ST_TO_ADDR
41928: GO 42504
41930: LD_INT 4
41932: DOUBLE
41933: GREATEREQUAL
41934: IFFALSE 41942
41936: LD_INT 9
41938: DOUBLE
41939: LESSEQUAL
41940: IFTRUE 41944
41942: GO 41996
41944: POP
// begin bc_type := b_lab_half ;
41945: LD_ADDR_OWVAR 42
41949: PUSH
41950: LD_INT 7
41952: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
41953: LD_ADDR_OWVAR 44
41957: PUSH
41958: LD_INT 10
41960: PUSH
41961: LD_INT 11
41963: PUSH
41964: LD_INT 12
41966: PUSH
41967: LD_INT 15
41969: PUSH
41970: LD_INT 14
41972: PUSH
41973: LD_INT 13
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: PUSH
41984: LD_VAR 0 2
41988: PUSH
41989: LD_INT 3
41991: MINUS
41992: ARRAY
41993: ST_TO_ADDR
// end ; 10 .. 13 :
41994: GO 42504
41996: LD_INT 10
41998: DOUBLE
41999: GREATEREQUAL
42000: IFFALSE 42008
42002: LD_INT 13
42004: DOUBLE
42005: LESSEQUAL
42006: IFTRUE 42010
42008: GO 42087
42010: POP
// begin bc_type := b_lab_full ;
42011: LD_ADDR_OWVAR 42
42015: PUSH
42016: LD_INT 8
42018: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
42019: LD_ADDR_OWVAR 44
42023: PUSH
42024: LD_INT 10
42026: PUSH
42027: LD_INT 12
42029: PUSH
42030: LD_INT 14
42032: PUSH
42033: LD_INT 13
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: PUSH
42042: LD_VAR 0 2
42046: PUSH
42047: LD_INT 9
42049: MINUS
42050: ARRAY
42051: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
42052: LD_ADDR_OWVAR 45
42056: PUSH
42057: LD_INT 11
42059: PUSH
42060: LD_INT 15
42062: PUSH
42063: LD_INT 12
42065: PUSH
42066: LD_INT 15
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: PUSH
42075: LD_VAR 0 2
42079: PUSH
42080: LD_INT 9
42082: MINUS
42083: ARRAY
42084: ST_TO_ADDR
// end ; 14 :
42085: GO 42504
42087: LD_INT 14
42089: DOUBLE
42090: EQUAL
42091: IFTRUE 42095
42093: GO 42106
42095: POP
// bc_type := b_workshop ; 15 :
42096: LD_ADDR_OWVAR 42
42100: PUSH
42101: LD_INT 2
42103: ST_TO_ADDR
42104: GO 42504
42106: LD_INT 15
42108: DOUBLE
42109: EQUAL
42110: IFTRUE 42114
42112: GO 42125
42114: POP
// bc_type := b_factory ; 16 :
42115: LD_ADDR_OWVAR 42
42119: PUSH
42120: LD_INT 3
42122: ST_TO_ADDR
42123: GO 42504
42125: LD_INT 16
42127: DOUBLE
42128: EQUAL
42129: IFTRUE 42133
42131: GO 42144
42133: POP
// bc_type := b_ext_gun ; 17 :
42134: LD_ADDR_OWVAR 42
42138: PUSH
42139: LD_INT 17
42141: ST_TO_ADDR
42142: GO 42504
42144: LD_INT 17
42146: DOUBLE
42147: EQUAL
42148: IFTRUE 42152
42150: GO 42180
42152: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
42153: LD_ADDR_OWVAR 42
42157: PUSH
42158: LD_INT 19
42160: PUSH
42161: LD_INT 23
42163: PUSH
42164: LD_INT 19
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: LIST
42171: PUSH
42172: LD_VAR 0 1
42176: ARRAY
42177: ST_TO_ADDR
42178: GO 42504
42180: LD_INT 18
42182: DOUBLE
42183: EQUAL
42184: IFTRUE 42188
42186: GO 42199
42188: POP
// bc_type := b_ext_radar ; 19 :
42189: LD_ADDR_OWVAR 42
42193: PUSH
42194: LD_INT 20
42196: ST_TO_ADDR
42197: GO 42504
42199: LD_INT 19
42201: DOUBLE
42202: EQUAL
42203: IFTRUE 42207
42205: GO 42218
42207: POP
// bc_type := b_ext_radio ; 20 :
42208: LD_ADDR_OWVAR 42
42212: PUSH
42213: LD_INT 22
42215: ST_TO_ADDR
42216: GO 42504
42218: LD_INT 20
42220: DOUBLE
42221: EQUAL
42222: IFTRUE 42226
42224: GO 42237
42226: POP
// bc_type := b_ext_siberium ; 21 :
42227: LD_ADDR_OWVAR 42
42231: PUSH
42232: LD_INT 21
42234: ST_TO_ADDR
42235: GO 42504
42237: LD_INT 21
42239: DOUBLE
42240: EQUAL
42241: IFTRUE 42245
42243: GO 42256
42245: POP
// bc_type := b_ext_computer ; 22 :
42246: LD_ADDR_OWVAR 42
42250: PUSH
42251: LD_INT 24
42253: ST_TO_ADDR
42254: GO 42504
42256: LD_INT 22
42258: DOUBLE
42259: EQUAL
42260: IFTRUE 42264
42262: GO 42275
42264: POP
// bc_type := b_ext_track ; 23 :
42265: LD_ADDR_OWVAR 42
42269: PUSH
42270: LD_INT 16
42272: ST_TO_ADDR
42273: GO 42504
42275: LD_INT 23
42277: DOUBLE
42278: EQUAL
42279: IFTRUE 42283
42281: GO 42294
42283: POP
// bc_type := b_ext_laser ; 24 :
42284: LD_ADDR_OWVAR 42
42288: PUSH
42289: LD_INT 25
42291: ST_TO_ADDR
42292: GO 42504
42294: LD_INT 24
42296: DOUBLE
42297: EQUAL
42298: IFTRUE 42302
42300: GO 42313
42302: POP
// bc_type := b_control_tower ; 25 :
42303: LD_ADDR_OWVAR 42
42307: PUSH
42308: LD_INT 36
42310: ST_TO_ADDR
42311: GO 42504
42313: LD_INT 25
42315: DOUBLE
42316: EQUAL
42317: IFTRUE 42321
42319: GO 42332
42321: POP
// bc_type := b_breastwork ; 26 :
42322: LD_ADDR_OWVAR 42
42326: PUSH
42327: LD_INT 31
42329: ST_TO_ADDR
42330: GO 42504
42332: LD_INT 26
42334: DOUBLE
42335: EQUAL
42336: IFTRUE 42340
42338: GO 42351
42340: POP
// bc_type := b_bunker ; 27 :
42341: LD_ADDR_OWVAR 42
42345: PUSH
42346: LD_INT 32
42348: ST_TO_ADDR
42349: GO 42504
42351: LD_INT 27
42353: DOUBLE
42354: EQUAL
42355: IFTRUE 42359
42357: GO 42370
42359: POP
// bc_type := b_turret ; 28 :
42360: LD_ADDR_OWVAR 42
42364: PUSH
42365: LD_INT 33
42367: ST_TO_ADDR
42368: GO 42504
42370: LD_INT 28
42372: DOUBLE
42373: EQUAL
42374: IFTRUE 42378
42376: GO 42389
42378: POP
// bc_type := b_armoury ; 29 :
42379: LD_ADDR_OWVAR 42
42383: PUSH
42384: LD_INT 4
42386: ST_TO_ADDR
42387: GO 42504
42389: LD_INT 29
42391: DOUBLE
42392: EQUAL
42393: IFTRUE 42397
42395: GO 42408
42397: POP
// bc_type := b_barracks ; 30 :
42398: LD_ADDR_OWVAR 42
42402: PUSH
42403: LD_INT 5
42405: ST_TO_ADDR
42406: GO 42504
42408: LD_INT 30
42410: DOUBLE
42411: EQUAL
42412: IFTRUE 42416
42414: GO 42427
42416: POP
// bc_type := b_solar_power ; 31 :
42417: LD_ADDR_OWVAR 42
42421: PUSH
42422: LD_INT 27
42424: ST_TO_ADDR
42425: GO 42504
42427: LD_INT 31
42429: DOUBLE
42430: EQUAL
42431: IFTRUE 42435
42433: GO 42446
42435: POP
// bc_type := b_oil_power ; 32 :
42436: LD_ADDR_OWVAR 42
42440: PUSH
42441: LD_INT 26
42443: ST_TO_ADDR
42444: GO 42504
42446: LD_INT 32
42448: DOUBLE
42449: EQUAL
42450: IFTRUE 42454
42452: GO 42465
42454: POP
// bc_type := b_siberite_power ; 33 :
42455: LD_ADDR_OWVAR 42
42459: PUSH
42460: LD_INT 28
42462: ST_TO_ADDR
42463: GO 42504
42465: LD_INT 33
42467: DOUBLE
42468: EQUAL
42469: IFTRUE 42473
42471: GO 42484
42473: POP
// bc_type := b_oil_mine ; 34 :
42474: LD_ADDR_OWVAR 42
42478: PUSH
42479: LD_INT 29
42481: ST_TO_ADDR
42482: GO 42504
42484: LD_INT 34
42486: DOUBLE
42487: EQUAL
42488: IFTRUE 42492
42490: GO 42503
42492: POP
// bc_type := b_siberite_mine ; end ;
42493: LD_ADDR_OWVAR 42
42497: PUSH
42498: LD_INT 30
42500: ST_TO_ADDR
42501: GO 42504
42503: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
42504: LD_ADDR_VAR 0 8
42508: PUSH
42509: LD_VAR 0 5
42513: PPUSH
42514: LD_VAR 0 6
42518: PPUSH
42519: LD_VAR 0 3
42523: PPUSH
42524: CALL_OW 47
42528: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
42529: LD_OWVAR 42
42533: PUSH
42534: LD_INT 32
42536: PUSH
42537: LD_INT 33
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: IN
42544: IFFALSE 42560
// PlaceWeaponTurret ( b , weapon ) ;
42546: LD_VAR 0 8
42550: PPUSH
42551: LD_VAR 0 4
42555: PPUSH
42556: CALL_OW 431
// end ;
42560: LD_VAR 0 7
42564: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
42565: LD_INT 0
42567: PPUSH
42568: PPUSH
42569: PPUSH
42570: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42571: LD_ADDR_VAR 0 4
42575: PUSH
42576: LD_INT 22
42578: PUSH
42579: LD_OWVAR 2
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 30
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 30
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: LIST
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PPUSH
42620: CALL_OW 69
42624: ST_TO_ADDR
// if not tmp then
42625: LD_VAR 0 4
42629: NOT
42630: IFFALSE 42634
// exit ;
42632: GO 42693
// for i in tmp do
42634: LD_ADDR_VAR 0 2
42638: PUSH
42639: LD_VAR 0 4
42643: PUSH
42644: FOR_IN
42645: IFFALSE 42691
// for j = 1 to 3 do
42647: LD_ADDR_VAR 0 3
42651: PUSH
42652: DOUBLE
42653: LD_INT 1
42655: DEC
42656: ST_TO_ADDR
42657: LD_INT 3
42659: PUSH
42660: FOR_TO
42661: IFFALSE 42687
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
42663: LD_VAR 0 2
42667: PPUSH
42668: CALL_OW 274
42672: PPUSH
42673: LD_VAR 0 3
42677: PPUSH
42678: LD_INT 99999
42680: PPUSH
42681: CALL_OW 277
42685: GO 42660
42687: POP
42688: POP
42689: GO 42644
42691: POP
42692: POP
// end ;
42693: LD_VAR 0 1
42697: RET
// export function hHackSetLevel10 ; var i , j ; begin
42698: LD_INT 0
42700: PPUSH
42701: PPUSH
42702: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
42703: LD_ADDR_VAR 0 2
42707: PUSH
42708: LD_INT 21
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PPUSH
42718: CALL_OW 69
42722: PUSH
42723: FOR_IN
42724: IFFALSE 42776
// if IsSelected ( i ) then
42726: LD_VAR 0 2
42730: PPUSH
42731: CALL_OW 306
42735: IFFALSE 42774
// begin for j := 1 to 4 do
42737: LD_ADDR_VAR 0 3
42741: PUSH
42742: DOUBLE
42743: LD_INT 1
42745: DEC
42746: ST_TO_ADDR
42747: LD_INT 4
42749: PUSH
42750: FOR_TO
42751: IFFALSE 42772
// SetSkill ( i , j , 10 ) ;
42753: LD_VAR 0 2
42757: PPUSH
42758: LD_VAR 0 3
42762: PPUSH
42763: LD_INT 10
42765: PPUSH
42766: CALL_OW 237
42770: GO 42750
42772: POP
42773: POP
// end ;
42774: GO 42723
42776: POP
42777: POP
// end ;
42778: LD_VAR 0 1
42782: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
42783: LD_INT 0
42785: PPUSH
42786: PPUSH
42787: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
42788: LD_ADDR_VAR 0 2
42792: PUSH
42793: LD_INT 22
42795: PUSH
42796: LD_OWVAR 2
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 21
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PPUSH
42819: CALL_OW 69
42823: PUSH
42824: FOR_IN
42825: IFFALSE 42866
// begin for j := 1 to 4 do
42827: LD_ADDR_VAR 0 3
42831: PUSH
42832: DOUBLE
42833: LD_INT 1
42835: DEC
42836: ST_TO_ADDR
42837: LD_INT 4
42839: PUSH
42840: FOR_TO
42841: IFFALSE 42862
// SetSkill ( i , j , 10 ) ;
42843: LD_VAR 0 2
42847: PPUSH
42848: LD_VAR 0 3
42852: PPUSH
42853: LD_INT 10
42855: PPUSH
42856: CALL_OW 237
42860: GO 42840
42862: POP
42863: POP
// end ;
42864: GO 42824
42866: POP
42867: POP
// end ;
42868: LD_VAR 0 1
42872: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
42873: LD_INT 0
42875: PPUSH
// uc_side := your_side ;
42876: LD_ADDR_OWVAR 20
42880: PUSH
42881: LD_OWVAR 2
42885: ST_TO_ADDR
// uc_nation := nation ;
42886: LD_ADDR_OWVAR 21
42890: PUSH
42891: LD_VAR 0 1
42895: ST_TO_ADDR
// InitHc ;
42896: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
42900: LD_INT 0
42902: PPUSH
42903: LD_VAR 0 2
42907: PPUSH
42908: LD_VAR 0 3
42912: PPUSH
42913: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
42917: LD_VAR 0 4
42921: PPUSH
42922: LD_VAR 0 5
42926: PPUSH
42927: CALL_OW 428
42931: PUSH
42932: LD_INT 0
42934: EQUAL
42935: IFFALSE 42959
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
42937: CALL_OW 44
42941: PPUSH
42942: LD_VAR 0 4
42946: PPUSH
42947: LD_VAR 0 5
42951: PPUSH
42952: LD_INT 1
42954: PPUSH
42955: CALL_OW 48
// end ;
42959: LD_VAR 0 6
42963: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
42964: LD_INT 0
42966: PPUSH
42967: PPUSH
// uc_side := your_side ;
42968: LD_ADDR_OWVAR 20
42972: PUSH
42973: LD_OWVAR 2
42977: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
42978: LD_VAR 0 1
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: LD_INT 3
42991: PUSH
42992: LD_INT 4
42994: PUSH
42995: LD_INT 5
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: IN
43005: IFFALSE 43017
// uc_nation := nation_american else
43007: LD_ADDR_OWVAR 21
43011: PUSH
43012: LD_INT 1
43014: ST_TO_ADDR
43015: GO 43060
// if chassis in [ 11 , 12 , 13 , 14 ] then
43017: LD_VAR 0 1
43021: PUSH
43022: LD_INT 11
43024: PUSH
43025: LD_INT 12
43027: PUSH
43028: LD_INT 13
43030: PUSH
43031: LD_INT 14
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: IN
43040: IFFALSE 43052
// uc_nation := nation_arabian else
43042: LD_ADDR_OWVAR 21
43046: PUSH
43047: LD_INT 2
43049: ST_TO_ADDR
43050: GO 43060
// uc_nation := nation_russian ;
43052: LD_ADDR_OWVAR 21
43056: PUSH
43057: LD_INT 3
43059: ST_TO_ADDR
// vc_chassis := chassis ;
43060: LD_ADDR_OWVAR 37
43064: PUSH
43065: LD_VAR 0 1
43069: ST_TO_ADDR
// vc_engine := engine ;
43070: LD_ADDR_OWVAR 39
43074: PUSH
43075: LD_VAR 0 2
43079: ST_TO_ADDR
// vc_control := control ;
43080: LD_ADDR_OWVAR 38
43084: PUSH
43085: LD_VAR 0 3
43089: ST_TO_ADDR
// vc_weapon := weapon ;
43090: LD_ADDR_OWVAR 40
43094: PUSH
43095: LD_VAR 0 4
43099: ST_TO_ADDR
// un := CreateVehicle ;
43100: LD_ADDR_VAR 0 8
43104: PUSH
43105: CALL_OW 45
43109: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
43110: LD_VAR 0 8
43114: PPUSH
43115: LD_INT 0
43117: PPUSH
43118: LD_INT 5
43120: PPUSH
43121: CALL_OW 12
43125: PPUSH
43126: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
43130: LD_VAR 0 8
43134: PPUSH
43135: LD_VAR 0 5
43139: PPUSH
43140: LD_VAR 0 6
43144: PPUSH
43145: LD_INT 1
43147: PPUSH
43148: CALL_OW 48
// end ;
43152: LD_VAR 0 7
43156: RET
// export hInvincible ; every 1 do
43157: GO 43159
43159: DISABLE
// hInvincible := [ ] ;
43160: LD_ADDR_EXP 145
43164: PUSH
43165: EMPTY
43166: ST_TO_ADDR
43167: END
// every 10 do var i ;
43168: GO 43170
43170: DISABLE
43171: LD_INT 0
43173: PPUSH
// begin enable ;
43174: ENABLE
// if not hInvincible then
43175: LD_EXP 145
43179: NOT
43180: IFFALSE 43184
// exit ;
43182: GO 43228
// for i in hInvincible do
43184: LD_ADDR_VAR 0 1
43188: PUSH
43189: LD_EXP 145
43193: PUSH
43194: FOR_IN
43195: IFFALSE 43226
// if GetLives ( i ) < 1000 then
43197: LD_VAR 0 1
43201: PPUSH
43202: CALL_OW 256
43206: PUSH
43207: LD_INT 1000
43209: LESS
43210: IFFALSE 43224
// SetLives ( i , 1000 ) ;
43212: LD_VAR 0 1
43216: PPUSH
43217: LD_INT 1000
43219: PPUSH
43220: CALL_OW 234
43224: GO 43194
43226: POP
43227: POP
// end ;
43228: PPOPN 1
43230: END
// export function hHackInvincible ; var i ; begin
43231: LD_INT 0
43233: PPUSH
43234: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
43235: LD_ADDR_VAR 0 2
43239: PUSH
43240: LD_INT 2
43242: PUSH
43243: LD_INT 21
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 21
43255: PUSH
43256: LD_INT 2
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: LIST
43267: PPUSH
43268: CALL_OW 69
43272: PUSH
43273: FOR_IN
43274: IFFALSE 43335
// if IsSelected ( i ) then
43276: LD_VAR 0 2
43280: PPUSH
43281: CALL_OW 306
43285: IFFALSE 43333
// begin if i in hInvincible then
43287: LD_VAR 0 2
43291: PUSH
43292: LD_EXP 145
43296: IN
43297: IFFALSE 43317
// hInvincible := hInvincible diff i else
43299: LD_ADDR_EXP 145
43303: PUSH
43304: LD_EXP 145
43308: PUSH
43309: LD_VAR 0 2
43313: DIFF
43314: ST_TO_ADDR
43315: GO 43333
// hInvincible := hInvincible union i ;
43317: LD_ADDR_EXP 145
43321: PUSH
43322: LD_EXP 145
43326: PUSH
43327: LD_VAR 0 2
43331: UNION
43332: ST_TO_ADDR
// end ;
43333: GO 43273
43335: POP
43336: POP
// end ;
43337: LD_VAR 0 1
43341: RET
// export function hHackInvisible ; var i , j ; begin
43342: LD_INT 0
43344: PPUSH
43345: PPUSH
43346: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43347: LD_ADDR_VAR 0 2
43351: PUSH
43352: LD_INT 21
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PPUSH
43362: CALL_OW 69
43366: PUSH
43367: FOR_IN
43368: IFFALSE 43392
// if IsSelected ( i ) then
43370: LD_VAR 0 2
43374: PPUSH
43375: CALL_OW 306
43379: IFFALSE 43390
// ComForceInvisible ( i ) ;
43381: LD_VAR 0 2
43385: PPUSH
43386: CALL_OW 496
43390: GO 43367
43392: POP
43393: POP
// end ;
43394: LD_VAR 0 1
43398: RET
// export function hHackChangeYourSide ; begin
43399: LD_INT 0
43401: PPUSH
// if your_side = 8 then
43402: LD_OWVAR 2
43406: PUSH
43407: LD_INT 8
43409: EQUAL
43410: IFFALSE 43422
// your_side := 0 else
43412: LD_ADDR_OWVAR 2
43416: PUSH
43417: LD_INT 0
43419: ST_TO_ADDR
43420: GO 43436
// your_side := your_side + 1 ;
43422: LD_ADDR_OWVAR 2
43426: PUSH
43427: LD_OWVAR 2
43431: PUSH
43432: LD_INT 1
43434: PLUS
43435: ST_TO_ADDR
// end ;
43436: LD_VAR 0 1
43440: RET
// export function hHackChangeUnitSide ; var i , j ; begin
43441: LD_INT 0
43443: PPUSH
43444: PPUSH
43445: PPUSH
// for i in all_units do
43446: LD_ADDR_VAR 0 2
43450: PUSH
43451: LD_OWVAR 3
43455: PUSH
43456: FOR_IN
43457: IFFALSE 43535
// if IsSelected ( i ) then
43459: LD_VAR 0 2
43463: PPUSH
43464: CALL_OW 306
43468: IFFALSE 43533
// begin j := GetSide ( i ) ;
43470: LD_ADDR_VAR 0 3
43474: PUSH
43475: LD_VAR 0 2
43479: PPUSH
43480: CALL_OW 255
43484: ST_TO_ADDR
// if j = 8 then
43485: LD_VAR 0 3
43489: PUSH
43490: LD_INT 8
43492: EQUAL
43493: IFFALSE 43505
// j := 0 else
43495: LD_ADDR_VAR 0 3
43499: PUSH
43500: LD_INT 0
43502: ST_TO_ADDR
43503: GO 43519
// j := j + 1 ;
43505: LD_ADDR_VAR 0 3
43509: PUSH
43510: LD_VAR 0 3
43514: PUSH
43515: LD_INT 1
43517: PLUS
43518: ST_TO_ADDR
// SetSide ( i , j ) ;
43519: LD_VAR 0 2
43523: PPUSH
43524: LD_VAR 0 3
43528: PPUSH
43529: CALL_OW 235
// end ;
43533: GO 43456
43535: POP
43536: POP
// end ;
43537: LD_VAR 0 1
43541: RET
// export function hHackFog ; begin
43542: LD_INT 0
43544: PPUSH
// FogOff ( true ) ;
43545: LD_INT 1
43547: PPUSH
43548: CALL_OW 344
// end ;
43552: LD_VAR 0 1
43556: RET
// export function hHackTeleport ( unit , x , y ) ; begin
43557: LD_INT 0
43559: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
43560: LD_VAR 0 1
43564: PPUSH
43565: LD_VAR 0 2
43569: PPUSH
43570: LD_VAR 0 3
43574: PPUSH
43575: LD_INT 1
43577: PPUSH
43578: LD_INT 1
43580: PPUSH
43581: CALL_OW 483
// CenterOnXY ( x , y ) ;
43585: LD_VAR 0 2
43589: PPUSH
43590: LD_VAR 0 3
43594: PPUSH
43595: CALL_OW 84
// end ; end_of_file
43599: LD_VAR 0 4
43603: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
43604: LD_INT 0
43606: PPUSH
43607: PPUSH
43608: PPUSH
43609: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
43610: LD_VAR 0 1
43614: PPUSH
43615: CALL_OW 264
43619: PUSH
43620: LD_EXP 73
43624: EQUAL
43625: IFFALSE 43697
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
43627: LD_INT 68
43629: PPUSH
43630: LD_VAR 0 1
43634: PPUSH
43635: CALL_OW 255
43639: PPUSH
43640: CALL_OW 321
43644: PUSH
43645: LD_INT 2
43647: EQUAL
43648: IFFALSE 43660
// eff := 70 else
43650: LD_ADDR_VAR 0 4
43654: PUSH
43655: LD_INT 70
43657: ST_TO_ADDR
43658: GO 43668
// eff := 30 ;
43660: LD_ADDR_VAR 0 4
43664: PUSH
43665: LD_INT 30
43667: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
43668: LD_VAR 0 1
43672: PPUSH
43673: CALL_OW 250
43677: PPUSH
43678: LD_VAR 0 1
43682: PPUSH
43683: CALL_OW 251
43687: PPUSH
43688: LD_VAR 0 4
43692: PPUSH
43693: CALL_OW 495
// end ; end ;
43697: LD_VAR 0 2
43701: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
43702: LD_INT 0
43704: PPUSH
// end ;
43705: LD_VAR 0 4
43709: RET
// export function SOS_Command ( cmd ) ; begin
43710: LD_INT 0
43712: PPUSH
// end ;
43713: LD_VAR 0 2
43717: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
43718: LD_INT 0
43720: PPUSH
// end ;
43721: LD_VAR 0 6
43725: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
43726: LD_INT 0
43728: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
43729: LD_VAR 0 1
43733: PUSH
43734: LD_INT 250
43736: EQUAL
43737: PUSH
43738: LD_VAR 0 2
43742: PPUSH
43743: CALL_OW 264
43747: PUSH
43748: LD_EXP 76
43752: EQUAL
43753: AND
43754: IFFALSE 43775
// MinerPlaceMine ( unit , x , y ) ;
43756: LD_VAR 0 2
43760: PPUSH
43761: LD_VAR 0 4
43765: PPUSH
43766: LD_VAR 0 5
43770: PPUSH
43771: CALL 46124 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
43775: LD_VAR 0 1
43779: PUSH
43780: LD_INT 251
43782: EQUAL
43783: PUSH
43784: LD_VAR 0 2
43788: PPUSH
43789: CALL_OW 264
43793: PUSH
43794: LD_EXP 76
43798: EQUAL
43799: AND
43800: IFFALSE 43821
// MinerDetonateMine ( unit , x , y ) ;
43802: LD_VAR 0 2
43806: PPUSH
43807: LD_VAR 0 4
43811: PPUSH
43812: LD_VAR 0 5
43816: PPUSH
43817: CALL 46401 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
43821: LD_VAR 0 1
43825: PUSH
43826: LD_INT 252
43828: EQUAL
43829: PUSH
43830: LD_VAR 0 2
43834: PPUSH
43835: CALL_OW 264
43839: PUSH
43840: LD_EXP 76
43844: EQUAL
43845: AND
43846: IFFALSE 43867
// MinerCreateMinefield ( unit , x , y ) ;
43848: LD_VAR 0 2
43852: PPUSH
43853: LD_VAR 0 4
43857: PPUSH
43858: LD_VAR 0 5
43862: PPUSH
43863: CALL 46818 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
43867: LD_VAR 0 1
43871: PUSH
43872: LD_INT 253
43874: EQUAL
43875: PUSH
43876: LD_VAR 0 2
43880: PPUSH
43881: CALL_OW 257
43885: PUSH
43886: LD_INT 5
43888: EQUAL
43889: AND
43890: IFFALSE 43911
// ComBinocular ( unit , x , y ) ;
43892: LD_VAR 0 2
43896: PPUSH
43897: LD_VAR 0 4
43901: PPUSH
43902: LD_VAR 0 5
43906: PPUSH
43907: CALL 47189 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
43911: LD_VAR 0 1
43915: PUSH
43916: LD_INT 254
43918: EQUAL
43919: PUSH
43920: LD_VAR 0 2
43924: PPUSH
43925: CALL_OW 264
43929: PUSH
43930: LD_EXP 71
43934: EQUAL
43935: AND
43936: PUSH
43937: LD_VAR 0 3
43941: PPUSH
43942: CALL_OW 263
43946: PUSH
43947: LD_INT 3
43949: EQUAL
43950: AND
43951: IFFALSE 43967
// HackDestroyVehicle ( unit , selectedUnit ) ;
43953: LD_VAR 0 2
43957: PPUSH
43958: LD_VAR 0 3
43962: PPUSH
43963: CALL 45484 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
43967: LD_VAR 0 1
43971: PUSH
43972: LD_INT 255
43974: EQUAL
43975: PUSH
43976: LD_VAR 0 2
43980: PPUSH
43981: CALL_OW 264
43985: PUSH
43986: LD_INT 14
43988: PUSH
43989: LD_INT 53
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: IN
43996: AND
43997: PUSH
43998: LD_VAR 0 4
44002: PPUSH
44003: LD_VAR 0 5
44007: PPUSH
44008: CALL_OW 488
44012: AND
44013: IFFALSE 44037
// CutTreeXYR ( unit , x , y , 12 ) ;
44015: LD_VAR 0 2
44019: PPUSH
44020: LD_VAR 0 4
44024: PPUSH
44025: LD_VAR 0 5
44029: PPUSH
44030: LD_INT 12
44032: PPUSH
44033: CALL 44050 0 4
// end ;
44037: LD_VAR 0 6
44041: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
44042: LD_INT 0
44044: PPUSH
// end ;
44045: LD_VAR 0 4
44049: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
44050: LD_INT 0
44052: PPUSH
44053: PPUSH
44054: PPUSH
44055: PPUSH
44056: PPUSH
44057: PPUSH
44058: PPUSH
44059: PPUSH
44060: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
44061: LD_VAR 0 1
44065: NOT
44066: PUSH
44067: LD_VAR 0 2
44071: PPUSH
44072: LD_VAR 0 3
44076: PPUSH
44077: CALL_OW 488
44081: NOT
44082: OR
44083: PUSH
44084: LD_VAR 0 4
44088: NOT
44089: OR
44090: IFFALSE 44094
// exit ;
44092: GO 44434
// list := [ ] ;
44094: LD_ADDR_VAR 0 13
44098: PUSH
44099: EMPTY
44100: ST_TO_ADDR
// if x - r < 0 then
44101: LD_VAR 0 2
44105: PUSH
44106: LD_VAR 0 4
44110: MINUS
44111: PUSH
44112: LD_INT 0
44114: LESS
44115: IFFALSE 44127
// min_x := 0 else
44117: LD_ADDR_VAR 0 7
44121: PUSH
44122: LD_INT 0
44124: ST_TO_ADDR
44125: GO 44143
// min_x := x - r ;
44127: LD_ADDR_VAR 0 7
44131: PUSH
44132: LD_VAR 0 2
44136: PUSH
44137: LD_VAR 0 4
44141: MINUS
44142: ST_TO_ADDR
// if y - r < 0 then
44143: LD_VAR 0 3
44147: PUSH
44148: LD_VAR 0 4
44152: MINUS
44153: PUSH
44154: LD_INT 0
44156: LESS
44157: IFFALSE 44169
// min_y := 0 else
44159: LD_ADDR_VAR 0 8
44163: PUSH
44164: LD_INT 0
44166: ST_TO_ADDR
44167: GO 44185
// min_y := y - r ;
44169: LD_ADDR_VAR 0 8
44173: PUSH
44174: LD_VAR 0 3
44178: PUSH
44179: LD_VAR 0 4
44183: MINUS
44184: ST_TO_ADDR
// max_x := x + r ;
44185: LD_ADDR_VAR 0 9
44189: PUSH
44190: LD_VAR 0 2
44194: PUSH
44195: LD_VAR 0 4
44199: PLUS
44200: ST_TO_ADDR
// max_y := y + r ;
44201: LD_ADDR_VAR 0 10
44205: PUSH
44206: LD_VAR 0 3
44210: PUSH
44211: LD_VAR 0 4
44215: PLUS
44216: ST_TO_ADDR
// for _x = min_x to max_x do
44217: LD_ADDR_VAR 0 11
44221: PUSH
44222: DOUBLE
44223: LD_VAR 0 7
44227: DEC
44228: ST_TO_ADDR
44229: LD_VAR 0 9
44233: PUSH
44234: FOR_TO
44235: IFFALSE 44352
// for _y = min_y to max_y do
44237: LD_ADDR_VAR 0 12
44241: PUSH
44242: DOUBLE
44243: LD_VAR 0 8
44247: DEC
44248: ST_TO_ADDR
44249: LD_VAR 0 10
44253: PUSH
44254: FOR_TO
44255: IFFALSE 44348
// begin if not ValidHex ( _x , _y ) then
44257: LD_VAR 0 11
44261: PPUSH
44262: LD_VAR 0 12
44266: PPUSH
44267: CALL_OW 488
44271: NOT
44272: IFFALSE 44276
// continue ;
44274: GO 44254
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
44276: LD_VAR 0 11
44280: PPUSH
44281: LD_VAR 0 12
44285: PPUSH
44286: CALL_OW 351
44290: PUSH
44291: LD_VAR 0 11
44295: PPUSH
44296: LD_VAR 0 12
44300: PPUSH
44301: CALL_OW 554
44305: AND
44306: IFFALSE 44346
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
44308: LD_ADDR_VAR 0 13
44312: PUSH
44313: LD_VAR 0 13
44317: PPUSH
44318: LD_VAR 0 13
44322: PUSH
44323: LD_INT 1
44325: PLUS
44326: PPUSH
44327: LD_VAR 0 11
44331: PUSH
44332: LD_VAR 0 12
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PPUSH
44341: CALL_OW 2
44345: ST_TO_ADDR
// end ;
44346: GO 44254
44348: POP
44349: POP
44350: GO 44234
44352: POP
44353: POP
// if not list then
44354: LD_VAR 0 13
44358: NOT
44359: IFFALSE 44363
// exit ;
44361: GO 44434
// for i in list do
44363: LD_ADDR_VAR 0 6
44367: PUSH
44368: LD_VAR 0 13
44372: PUSH
44373: FOR_IN
44374: IFFALSE 44432
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
44376: LD_VAR 0 1
44380: PPUSH
44381: LD_STRING M
44383: PUSH
44384: LD_VAR 0 6
44388: PUSH
44389: LD_INT 1
44391: ARRAY
44392: PUSH
44393: LD_VAR 0 6
44397: PUSH
44398: LD_INT 2
44400: ARRAY
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: PUSH
44423: EMPTY
44424: LIST
44425: PPUSH
44426: CALL_OW 447
44430: GO 44373
44432: POP
44433: POP
// end ;
44434: LD_VAR 0 5
44438: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
44439: LD_EXP 148
44443: NOT
44444: IFFALSE 44494
44446: GO 44448
44448: DISABLE
// begin initHack := true ;
44449: LD_ADDR_EXP 148
44453: PUSH
44454: LD_INT 1
44456: ST_TO_ADDR
// hackTanks := [ ] ;
44457: LD_ADDR_EXP 149
44461: PUSH
44462: EMPTY
44463: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
44464: LD_ADDR_EXP 150
44468: PUSH
44469: EMPTY
44470: ST_TO_ADDR
// hackLimit := 3 ;
44471: LD_ADDR_EXP 151
44475: PUSH
44476: LD_INT 3
44478: ST_TO_ADDR
// hackDist := 12 ;
44479: LD_ADDR_EXP 152
44483: PUSH
44484: LD_INT 12
44486: ST_TO_ADDR
// hackCounter := [ ] ;
44487: LD_ADDR_EXP 153
44491: PUSH
44492: EMPTY
44493: ST_TO_ADDR
// end ;
44494: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
44495: LD_EXP 148
44499: PUSH
44500: LD_INT 34
44502: PUSH
44503: LD_EXP 71
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PPUSH
44512: CALL_OW 69
44516: AND
44517: IFFALSE 44772
44519: GO 44521
44521: DISABLE
44522: LD_INT 0
44524: PPUSH
44525: PPUSH
// begin enable ;
44526: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
44527: LD_ADDR_VAR 0 1
44531: PUSH
44532: LD_INT 34
44534: PUSH
44535: LD_EXP 71
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PPUSH
44544: CALL_OW 69
44548: PUSH
44549: FOR_IN
44550: IFFALSE 44770
// begin if not i in hackTanks then
44552: LD_VAR 0 1
44556: PUSH
44557: LD_EXP 149
44561: IN
44562: NOT
44563: IFFALSE 44646
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
44565: LD_ADDR_EXP 149
44569: PUSH
44570: LD_EXP 149
44574: PPUSH
44575: LD_EXP 149
44579: PUSH
44580: LD_INT 1
44582: PLUS
44583: PPUSH
44584: LD_VAR 0 1
44588: PPUSH
44589: CALL_OW 1
44593: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
44594: LD_ADDR_EXP 150
44598: PUSH
44599: LD_EXP 150
44603: PPUSH
44604: LD_EXP 150
44608: PUSH
44609: LD_INT 1
44611: PLUS
44612: PPUSH
44613: EMPTY
44614: PPUSH
44615: CALL_OW 1
44619: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
44620: LD_ADDR_EXP 153
44624: PUSH
44625: LD_EXP 153
44629: PPUSH
44630: LD_EXP 153
44634: PUSH
44635: LD_INT 1
44637: PLUS
44638: PPUSH
44639: EMPTY
44640: PPUSH
44641: CALL_OW 1
44645: ST_TO_ADDR
// end ; if not IsOk ( i ) then
44646: LD_VAR 0 1
44650: PPUSH
44651: CALL_OW 302
44655: NOT
44656: IFFALSE 44669
// begin HackUnlinkAll ( i ) ;
44658: LD_VAR 0 1
44662: PPUSH
44663: CALL 44775 0 1
// continue ;
44667: GO 44549
// end ; HackCheckCapturedStatus ( i ) ;
44669: LD_VAR 0 1
44673: PPUSH
44674: CALL 45218 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
44678: LD_ADDR_VAR 0 2
44682: PUSH
44683: LD_INT 81
44685: PUSH
44686: LD_VAR 0 1
44690: PPUSH
44691: CALL_OW 255
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 33
44702: PUSH
44703: LD_INT 3
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 91
44712: PUSH
44713: LD_VAR 0 1
44717: PUSH
44718: LD_EXP 152
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 50
44730: PUSH
44731: EMPTY
44732: LIST
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: PPUSH
44740: CALL_OW 69
44744: ST_TO_ADDR
// if not tmp then
44745: LD_VAR 0 2
44749: NOT
44750: IFFALSE 44754
// continue ;
44752: GO 44549
// HackLink ( i , tmp ) ;
44754: LD_VAR 0 1
44758: PPUSH
44759: LD_VAR 0 2
44763: PPUSH
44764: CALL 44911 0 2
// end ;
44768: GO 44549
44770: POP
44771: POP
// end ;
44772: PPOPN 2
44774: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
44775: LD_INT 0
44777: PPUSH
44778: PPUSH
44779: PPUSH
// if not hack in hackTanks then
44780: LD_VAR 0 1
44784: PUSH
44785: LD_EXP 149
44789: IN
44790: NOT
44791: IFFALSE 44795
// exit ;
44793: GO 44906
// index := GetElementIndex ( hackTanks , hack ) ;
44795: LD_ADDR_VAR 0 4
44799: PUSH
44800: LD_EXP 149
44804: PPUSH
44805: LD_VAR 0 1
44809: PPUSH
44810: CALL 52380 0 2
44814: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
44815: LD_EXP 150
44819: PUSH
44820: LD_VAR 0 4
44824: ARRAY
44825: IFFALSE 44906
// begin for i in hackTanksCaptured [ index ] do
44827: LD_ADDR_VAR 0 3
44831: PUSH
44832: LD_EXP 150
44836: PUSH
44837: LD_VAR 0 4
44841: ARRAY
44842: PUSH
44843: FOR_IN
44844: IFFALSE 44870
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
44846: LD_VAR 0 3
44850: PUSH
44851: LD_INT 1
44853: ARRAY
44854: PPUSH
44855: LD_VAR 0 3
44859: PUSH
44860: LD_INT 2
44862: ARRAY
44863: PPUSH
44864: CALL_OW 235
44868: GO 44843
44870: POP
44871: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
44872: LD_ADDR_EXP 150
44876: PUSH
44877: LD_EXP 150
44881: PPUSH
44882: LD_VAR 0 4
44886: PPUSH
44887: EMPTY
44888: PPUSH
44889: CALL_OW 1
44893: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
44894: LD_VAR 0 1
44898: PPUSH
44899: LD_INT 0
44901: PPUSH
44902: CALL_OW 505
// end ; end ;
44906: LD_VAR 0 2
44910: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
44911: LD_INT 0
44913: PPUSH
44914: PPUSH
44915: PPUSH
// if not hack in hackTanks or not vehicles then
44916: LD_VAR 0 1
44920: PUSH
44921: LD_EXP 149
44925: IN
44926: NOT
44927: PUSH
44928: LD_VAR 0 2
44932: NOT
44933: OR
44934: IFFALSE 44938
// exit ;
44936: GO 45213
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
44938: LD_ADDR_VAR 0 2
44942: PUSH
44943: LD_VAR 0 1
44947: PPUSH
44948: LD_VAR 0 2
44952: PPUSH
44953: LD_INT 1
44955: PPUSH
44956: LD_INT 1
44958: PPUSH
44959: CALL 53030 0 4
44963: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
44964: LD_ADDR_VAR 0 5
44968: PUSH
44969: LD_EXP 149
44973: PPUSH
44974: LD_VAR 0 1
44978: PPUSH
44979: CALL 52380 0 2
44983: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
44984: LD_EXP 150
44988: PUSH
44989: LD_VAR 0 5
44993: ARRAY
44994: PUSH
44995: LD_EXP 151
44999: LESS
45000: IFFALSE 45189
// begin for i := 1 to vehicles do
45002: LD_ADDR_VAR 0 4
45006: PUSH
45007: DOUBLE
45008: LD_INT 1
45010: DEC
45011: ST_TO_ADDR
45012: LD_VAR 0 2
45016: PUSH
45017: FOR_TO
45018: IFFALSE 45187
// begin if hackTanksCaptured [ index ] = hackLimit then
45020: LD_EXP 150
45024: PUSH
45025: LD_VAR 0 5
45029: ARRAY
45030: PUSH
45031: LD_EXP 151
45035: EQUAL
45036: IFFALSE 45040
// break ;
45038: GO 45187
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
45040: LD_ADDR_EXP 153
45044: PUSH
45045: LD_EXP 153
45049: PPUSH
45050: LD_VAR 0 5
45054: PPUSH
45055: LD_EXP 153
45059: PUSH
45060: LD_VAR 0 5
45064: ARRAY
45065: PUSH
45066: LD_INT 1
45068: PLUS
45069: PPUSH
45070: CALL_OW 1
45074: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
45075: LD_ADDR_EXP 150
45079: PUSH
45080: LD_EXP 150
45084: PPUSH
45085: LD_VAR 0 5
45089: PUSH
45090: LD_EXP 150
45094: PUSH
45095: LD_VAR 0 5
45099: ARRAY
45100: PUSH
45101: LD_INT 1
45103: PLUS
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PPUSH
45109: LD_VAR 0 2
45113: PUSH
45114: LD_VAR 0 4
45118: ARRAY
45119: PUSH
45120: LD_VAR 0 2
45124: PUSH
45125: LD_VAR 0 4
45129: ARRAY
45130: PPUSH
45131: CALL_OW 255
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PPUSH
45140: CALL 52595 0 3
45144: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
45145: LD_VAR 0 2
45149: PUSH
45150: LD_VAR 0 4
45154: ARRAY
45155: PPUSH
45156: LD_VAR 0 1
45160: PPUSH
45161: CALL_OW 255
45165: PPUSH
45166: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
45170: LD_VAR 0 2
45174: PUSH
45175: LD_VAR 0 4
45179: ARRAY
45180: PPUSH
45181: CALL_OW 141
// end ;
45185: GO 45017
45187: POP
45188: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
45189: LD_VAR 0 1
45193: PPUSH
45194: LD_EXP 150
45198: PUSH
45199: LD_VAR 0 5
45203: ARRAY
45204: PUSH
45205: LD_INT 0
45207: PLUS
45208: PPUSH
45209: CALL_OW 505
// end ;
45213: LD_VAR 0 3
45217: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
45218: LD_INT 0
45220: PPUSH
45221: PPUSH
45222: PPUSH
45223: PPUSH
// if not hack in hackTanks then
45224: LD_VAR 0 1
45228: PUSH
45229: LD_EXP 149
45233: IN
45234: NOT
45235: IFFALSE 45239
// exit ;
45237: GO 45479
// index := GetElementIndex ( hackTanks , hack ) ;
45239: LD_ADDR_VAR 0 4
45243: PUSH
45244: LD_EXP 149
45248: PPUSH
45249: LD_VAR 0 1
45253: PPUSH
45254: CALL 52380 0 2
45258: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
45259: LD_ADDR_VAR 0 3
45263: PUSH
45264: DOUBLE
45265: LD_EXP 150
45269: PUSH
45270: LD_VAR 0 4
45274: ARRAY
45275: INC
45276: ST_TO_ADDR
45277: LD_INT 1
45279: PUSH
45280: FOR_DOWNTO
45281: IFFALSE 45453
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
45283: LD_ADDR_VAR 0 5
45287: PUSH
45288: LD_EXP 150
45292: PUSH
45293: LD_VAR 0 4
45297: ARRAY
45298: PUSH
45299: LD_VAR 0 3
45303: ARRAY
45304: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
45305: LD_VAR 0 5
45309: PUSH
45310: LD_INT 1
45312: ARRAY
45313: PPUSH
45314: CALL_OW 302
45318: NOT
45319: PUSH
45320: LD_VAR 0 5
45324: PUSH
45325: LD_INT 1
45327: ARRAY
45328: PPUSH
45329: CALL_OW 255
45333: PUSH
45334: LD_VAR 0 1
45338: PPUSH
45339: CALL_OW 255
45343: NONEQUAL
45344: OR
45345: IFFALSE 45451
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
45347: LD_VAR 0 5
45351: PUSH
45352: LD_INT 1
45354: ARRAY
45355: PPUSH
45356: CALL_OW 305
45360: PUSH
45361: LD_VAR 0 5
45365: PUSH
45366: LD_INT 1
45368: ARRAY
45369: PPUSH
45370: CALL_OW 255
45374: PUSH
45375: LD_VAR 0 1
45379: PPUSH
45380: CALL_OW 255
45384: EQUAL
45385: AND
45386: IFFALSE 45410
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
45388: LD_VAR 0 5
45392: PUSH
45393: LD_INT 1
45395: ARRAY
45396: PPUSH
45397: LD_VAR 0 5
45401: PUSH
45402: LD_INT 2
45404: ARRAY
45405: PPUSH
45406: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
45410: LD_ADDR_EXP 150
45414: PUSH
45415: LD_EXP 150
45419: PPUSH
45420: LD_VAR 0 4
45424: PPUSH
45425: LD_EXP 150
45429: PUSH
45430: LD_VAR 0 4
45434: ARRAY
45435: PPUSH
45436: LD_VAR 0 3
45440: PPUSH
45441: CALL_OW 3
45445: PPUSH
45446: CALL_OW 1
45450: ST_TO_ADDR
// end ; end ;
45451: GO 45280
45453: POP
45454: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
45455: LD_VAR 0 1
45459: PPUSH
45460: LD_EXP 150
45464: PUSH
45465: LD_VAR 0 4
45469: ARRAY
45470: PUSH
45471: LD_INT 0
45473: PLUS
45474: PPUSH
45475: CALL_OW 505
// end ;
45479: LD_VAR 0 2
45483: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
45484: LD_INT 0
45486: PPUSH
45487: PPUSH
45488: PPUSH
45489: PPUSH
// if not hack in hackTanks then
45490: LD_VAR 0 1
45494: PUSH
45495: LD_EXP 149
45499: IN
45500: NOT
45501: IFFALSE 45505
// exit ;
45503: GO 45590
// index := GetElementIndex ( hackTanks , hack ) ;
45505: LD_ADDR_VAR 0 5
45509: PUSH
45510: LD_EXP 149
45514: PPUSH
45515: LD_VAR 0 1
45519: PPUSH
45520: CALL 52380 0 2
45524: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
45525: LD_ADDR_VAR 0 4
45529: PUSH
45530: DOUBLE
45531: LD_INT 1
45533: DEC
45534: ST_TO_ADDR
45535: LD_EXP 150
45539: PUSH
45540: LD_VAR 0 5
45544: ARRAY
45545: PUSH
45546: FOR_TO
45547: IFFALSE 45588
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
45549: LD_EXP 150
45553: PUSH
45554: LD_VAR 0 5
45558: ARRAY
45559: PUSH
45560: LD_VAR 0 4
45564: ARRAY
45565: PUSH
45566: LD_INT 1
45568: ARRAY
45569: PUSH
45570: LD_VAR 0 2
45574: EQUAL
45575: IFFALSE 45586
// KillUnit ( vehicle ) ;
45577: LD_VAR 0 2
45581: PPUSH
45582: CALL_OW 66
45586: GO 45546
45588: POP
45589: POP
// end ;
45590: LD_VAR 0 3
45594: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
45595: LD_EXP 154
45599: NOT
45600: IFFALSE 45635
45602: GO 45604
45604: DISABLE
// begin initMiner := true ;
45605: LD_ADDR_EXP 154
45609: PUSH
45610: LD_INT 1
45612: ST_TO_ADDR
// minersList := [ ] ;
45613: LD_ADDR_EXP 155
45617: PUSH
45618: EMPTY
45619: ST_TO_ADDR
// minerMinesList := [ ] ;
45620: LD_ADDR_EXP 156
45624: PUSH
45625: EMPTY
45626: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
45627: LD_ADDR_EXP 157
45631: PUSH
45632: LD_INT 5
45634: ST_TO_ADDR
// end ;
45635: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
45636: LD_EXP 154
45640: PUSH
45641: LD_INT 34
45643: PUSH
45644: LD_EXP 76
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PPUSH
45653: CALL_OW 69
45657: AND
45658: IFFALSE 46121
45660: GO 45662
45662: DISABLE
45663: LD_INT 0
45665: PPUSH
45666: PPUSH
45667: PPUSH
45668: PPUSH
// begin enable ;
45669: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
45670: LD_ADDR_VAR 0 1
45674: PUSH
45675: LD_INT 34
45677: PUSH
45678: LD_EXP 76
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PPUSH
45687: CALL_OW 69
45691: PUSH
45692: FOR_IN
45693: IFFALSE 45765
// begin if not i in minersList then
45695: LD_VAR 0 1
45699: PUSH
45700: LD_EXP 155
45704: IN
45705: NOT
45706: IFFALSE 45763
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
45708: LD_ADDR_EXP 155
45712: PUSH
45713: LD_EXP 155
45717: PPUSH
45718: LD_EXP 155
45722: PUSH
45723: LD_INT 1
45725: PLUS
45726: PPUSH
45727: LD_VAR 0 1
45731: PPUSH
45732: CALL_OW 1
45736: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
45737: LD_ADDR_EXP 156
45741: PUSH
45742: LD_EXP 156
45746: PPUSH
45747: LD_EXP 156
45751: PUSH
45752: LD_INT 1
45754: PLUS
45755: PPUSH
45756: EMPTY
45757: PPUSH
45758: CALL_OW 1
45762: ST_TO_ADDR
// end end ;
45763: GO 45692
45765: POP
45766: POP
// for i := minerMinesList downto 1 do
45767: LD_ADDR_VAR 0 1
45771: PUSH
45772: DOUBLE
45773: LD_EXP 156
45777: INC
45778: ST_TO_ADDR
45779: LD_INT 1
45781: PUSH
45782: FOR_DOWNTO
45783: IFFALSE 46119
// begin if IsLive ( minersList [ i ] ) then
45785: LD_EXP 155
45789: PUSH
45790: LD_VAR 0 1
45794: ARRAY
45795: PPUSH
45796: CALL_OW 300
45800: IFFALSE 45828
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
45802: LD_EXP 155
45806: PUSH
45807: LD_VAR 0 1
45811: ARRAY
45812: PPUSH
45813: LD_EXP 156
45817: PUSH
45818: LD_VAR 0 1
45822: ARRAY
45823: PPUSH
45824: CALL_OW 505
// if not minerMinesList [ i ] then
45828: LD_EXP 156
45832: PUSH
45833: LD_VAR 0 1
45837: ARRAY
45838: NOT
45839: IFFALSE 45843
// continue ;
45841: GO 45782
// for j := minerMinesList [ i ] downto 1 do
45843: LD_ADDR_VAR 0 2
45847: PUSH
45848: DOUBLE
45849: LD_EXP 156
45853: PUSH
45854: LD_VAR 0 1
45858: ARRAY
45859: INC
45860: ST_TO_ADDR
45861: LD_INT 1
45863: PUSH
45864: FOR_DOWNTO
45865: IFFALSE 46115
// begin side := GetSide ( minersList [ i ] ) ;
45867: LD_ADDR_VAR 0 3
45871: PUSH
45872: LD_EXP 155
45876: PUSH
45877: LD_VAR 0 1
45881: ARRAY
45882: PPUSH
45883: CALL_OW 255
45887: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
45888: LD_ADDR_VAR 0 4
45892: PUSH
45893: LD_EXP 156
45897: PUSH
45898: LD_VAR 0 1
45902: ARRAY
45903: PUSH
45904: LD_VAR 0 2
45908: ARRAY
45909: PUSH
45910: LD_INT 1
45912: ARRAY
45913: PPUSH
45914: LD_EXP 156
45918: PUSH
45919: LD_VAR 0 1
45923: ARRAY
45924: PUSH
45925: LD_VAR 0 2
45929: ARRAY
45930: PUSH
45931: LD_INT 2
45933: ARRAY
45934: PPUSH
45935: CALL_OW 428
45939: ST_TO_ADDR
// if not tmp then
45940: LD_VAR 0 4
45944: NOT
45945: IFFALSE 45949
// continue ;
45947: GO 45864
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
45949: LD_VAR 0 4
45953: PUSH
45954: LD_INT 81
45956: PUSH
45957: LD_VAR 0 3
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PPUSH
45966: CALL_OW 69
45970: IN
45971: PUSH
45972: LD_EXP 156
45976: PUSH
45977: LD_VAR 0 1
45981: ARRAY
45982: PUSH
45983: LD_VAR 0 2
45987: ARRAY
45988: PUSH
45989: LD_INT 1
45991: ARRAY
45992: PPUSH
45993: LD_EXP 156
45997: PUSH
45998: LD_VAR 0 1
46002: ARRAY
46003: PUSH
46004: LD_VAR 0 2
46008: ARRAY
46009: PUSH
46010: LD_INT 2
46012: ARRAY
46013: PPUSH
46014: CALL_OW 458
46018: AND
46019: IFFALSE 46113
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
46021: LD_EXP 156
46025: PUSH
46026: LD_VAR 0 1
46030: ARRAY
46031: PUSH
46032: LD_VAR 0 2
46036: ARRAY
46037: PUSH
46038: LD_INT 1
46040: ARRAY
46041: PPUSH
46042: LD_EXP 156
46046: PUSH
46047: LD_VAR 0 1
46051: ARRAY
46052: PUSH
46053: LD_VAR 0 2
46057: ARRAY
46058: PUSH
46059: LD_INT 2
46061: ARRAY
46062: PPUSH
46063: LD_VAR 0 3
46067: PPUSH
46068: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
46072: LD_ADDR_EXP 156
46076: PUSH
46077: LD_EXP 156
46081: PPUSH
46082: LD_VAR 0 1
46086: PPUSH
46087: LD_EXP 156
46091: PUSH
46092: LD_VAR 0 1
46096: ARRAY
46097: PPUSH
46098: LD_VAR 0 2
46102: PPUSH
46103: CALL_OW 3
46107: PPUSH
46108: CALL_OW 1
46112: ST_TO_ADDR
// end ; end ;
46113: GO 45864
46115: POP
46116: POP
// end ;
46117: GO 45782
46119: POP
46120: POP
// end ;
46121: PPOPN 4
46123: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
46124: LD_INT 0
46126: PPUSH
46127: PPUSH
// result := false ;
46128: LD_ADDR_VAR 0 4
46132: PUSH
46133: LD_INT 0
46135: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
46136: LD_VAR 0 1
46140: PPUSH
46141: CALL_OW 264
46145: PUSH
46146: LD_EXP 76
46150: EQUAL
46151: NOT
46152: IFFALSE 46156
// exit ;
46154: GO 46396
// index := GetElementIndex ( minersList , unit ) ;
46156: LD_ADDR_VAR 0 5
46160: PUSH
46161: LD_EXP 155
46165: PPUSH
46166: LD_VAR 0 1
46170: PPUSH
46171: CALL 52380 0 2
46175: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
46176: LD_EXP 156
46180: PUSH
46181: LD_VAR 0 5
46185: ARRAY
46186: PUSH
46187: LD_EXP 157
46191: GREATEREQUAL
46192: IFFALSE 46196
// exit ;
46194: GO 46396
// ComMoveXY ( unit , x , y ) ;
46196: LD_VAR 0 1
46200: PPUSH
46201: LD_VAR 0 2
46205: PPUSH
46206: LD_VAR 0 3
46210: PPUSH
46211: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
46215: LD_INT 35
46217: PPUSH
46218: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
46222: LD_VAR 0 1
46226: PPUSH
46227: LD_VAR 0 2
46231: PPUSH
46232: LD_VAR 0 3
46236: PPUSH
46237: CALL 83152 0 3
46241: NOT
46242: PUSH
46243: LD_VAR 0 1
46247: PPUSH
46248: CALL_OW 314
46252: AND
46253: IFFALSE 46257
// exit ;
46255: GO 46396
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
46257: LD_VAR 0 2
46261: PPUSH
46262: LD_VAR 0 3
46266: PPUSH
46267: CALL_OW 428
46271: PUSH
46272: LD_VAR 0 1
46276: EQUAL
46277: PUSH
46278: LD_VAR 0 1
46282: PPUSH
46283: CALL_OW 314
46287: NOT
46288: AND
46289: IFFALSE 46215
// PlaySoundXY ( x , y , PlantMine ) ;
46291: LD_VAR 0 2
46295: PPUSH
46296: LD_VAR 0 3
46300: PPUSH
46301: LD_STRING PlantMine
46303: PPUSH
46304: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
46308: LD_VAR 0 2
46312: PPUSH
46313: LD_VAR 0 3
46317: PPUSH
46318: LD_VAR 0 1
46322: PPUSH
46323: CALL_OW 255
46327: PPUSH
46328: LD_INT 0
46330: PPUSH
46331: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
46335: LD_ADDR_EXP 156
46339: PUSH
46340: LD_EXP 156
46344: PPUSH
46345: LD_VAR 0 5
46349: PUSH
46350: LD_EXP 156
46354: PUSH
46355: LD_VAR 0 5
46359: ARRAY
46360: PUSH
46361: LD_INT 1
46363: PLUS
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PPUSH
46369: LD_VAR 0 2
46373: PUSH
46374: LD_VAR 0 3
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PPUSH
46383: CALL 52595 0 3
46387: ST_TO_ADDR
// result := true ;
46388: LD_ADDR_VAR 0 4
46392: PUSH
46393: LD_INT 1
46395: ST_TO_ADDR
// end ;
46396: LD_VAR 0 4
46400: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
46401: LD_INT 0
46403: PPUSH
46404: PPUSH
46405: PPUSH
// if not unit in minersList then
46406: LD_VAR 0 1
46410: PUSH
46411: LD_EXP 155
46415: IN
46416: NOT
46417: IFFALSE 46421
// exit ;
46419: GO 46813
// index := GetElementIndex ( minersList , unit ) ;
46421: LD_ADDR_VAR 0 6
46425: PUSH
46426: LD_EXP 155
46430: PPUSH
46431: LD_VAR 0 1
46435: PPUSH
46436: CALL 52380 0 2
46440: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
46441: LD_ADDR_VAR 0 5
46445: PUSH
46446: DOUBLE
46447: LD_EXP 156
46451: PUSH
46452: LD_VAR 0 6
46456: ARRAY
46457: INC
46458: ST_TO_ADDR
46459: LD_INT 1
46461: PUSH
46462: FOR_DOWNTO
46463: IFFALSE 46624
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
46465: LD_EXP 156
46469: PUSH
46470: LD_VAR 0 6
46474: ARRAY
46475: PUSH
46476: LD_VAR 0 5
46480: ARRAY
46481: PUSH
46482: LD_INT 1
46484: ARRAY
46485: PUSH
46486: LD_VAR 0 2
46490: EQUAL
46491: PUSH
46492: LD_EXP 156
46496: PUSH
46497: LD_VAR 0 6
46501: ARRAY
46502: PUSH
46503: LD_VAR 0 5
46507: ARRAY
46508: PUSH
46509: LD_INT 2
46511: ARRAY
46512: PUSH
46513: LD_VAR 0 3
46517: EQUAL
46518: AND
46519: IFFALSE 46622
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
46521: LD_EXP 156
46525: PUSH
46526: LD_VAR 0 6
46530: ARRAY
46531: PUSH
46532: LD_VAR 0 5
46536: ARRAY
46537: PUSH
46538: LD_INT 1
46540: ARRAY
46541: PPUSH
46542: LD_EXP 156
46546: PUSH
46547: LD_VAR 0 6
46551: ARRAY
46552: PUSH
46553: LD_VAR 0 5
46557: ARRAY
46558: PUSH
46559: LD_INT 2
46561: ARRAY
46562: PPUSH
46563: LD_VAR 0 1
46567: PPUSH
46568: CALL_OW 255
46572: PPUSH
46573: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
46577: LD_ADDR_EXP 156
46581: PUSH
46582: LD_EXP 156
46586: PPUSH
46587: LD_VAR 0 6
46591: PPUSH
46592: LD_EXP 156
46596: PUSH
46597: LD_VAR 0 6
46601: ARRAY
46602: PPUSH
46603: LD_VAR 0 5
46607: PPUSH
46608: CALL_OW 3
46612: PPUSH
46613: CALL_OW 1
46617: ST_TO_ADDR
// exit ;
46618: POP
46619: POP
46620: GO 46813
// end ; end ;
46622: GO 46462
46624: POP
46625: POP
// for i := minerMinesList [ index ] downto 1 do
46626: LD_ADDR_VAR 0 5
46630: PUSH
46631: DOUBLE
46632: LD_EXP 156
46636: PUSH
46637: LD_VAR 0 6
46641: ARRAY
46642: INC
46643: ST_TO_ADDR
46644: LD_INT 1
46646: PUSH
46647: FOR_DOWNTO
46648: IFFALSE 46811
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
46650: LD_EXP 156
46654: PUSH
46655: LD_VAR 0 6
46659: ARRAY
46660: PUSH
46661: LD_VAR 0 5
46665: ARRAY
46666: PUSH
46667: LD_INT 1
46669: ARRAY
46670: PPUSH
46671: LD_EXP 156
46675: PUSH
46676: LD_VAR 0 6
46680: ARRAY
46681: PUSH
46682: LD_VAR 0 5
46686: ARRAY
46687: PUSH
46688: LD_INT 2
46690: ARRAY
46691: PPUSH
46692: LD_VAR 0 2
46696: PPUSH
46697: LD_VAR 0 3
46701: PPUSH
46702: CALL_OW 298
46706: PUSH
46707: LD_INT 6
46709: LESS
46710: IFFALSE 46809
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
46712: LD_EXP 156
46716: PUSH
46717: LD_VAR 0 6
46721: ARRAY
46722: PUSH
46723: LD_VAR 0 5
46727: ARRAY
46728: PUSH
46729: LD_INT 1
46731: ARRAY
46732: PPUSH
46733: LD_EXP 156
46737: PUSH
46738: LD_VAR 0 6
46742: ARRAY
46743: PUSH
46744: LD_VAR 0 5
46748: ARRAY
46749: PUSH
46750: LD_INT 2
46752: ARRAY
46753: PPUSH
46754: LD_VAR 0 1
46758: PPUSH
46759: CALL_OW 255
46763: PPUSH
46764: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
46768: LD_ADDR_EXP 156
46772: PUSH
46773: LD_EXP 156
46777: PPUSH
46778: LD_VAR 0 6
46782: PPUSH
46783: LD_EXP 156
46787: PUSH
46788: LD_VAR 0 6
46792: ARRAY
46793: PPUSH
46794: LD_VAR 0 5
46798: PPUSH
46799: CALL_OW 3
46803: PPUSH
46804: CALL_OW 1
46808: ST_TO_ADDR
// end ; end ;
46809: GO 46647
46811: POP
46812: POP
// end ;
46813: LD_VAR 0 4
46817: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
46818: LD_INT 0
46820: PPUSH
46821: PPUSH
46822: PPUSH
46823: PPUSH
46824: PPUSH
46825: PPUSH
46826: PPUSH
46827: PPUSH
46828: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
46829: LD_VAR 0 1
46833: PPUSH
46834: CALL_OW 264
46838: PUSH
46839: LD_EXP 76
46843: EQUAL
46844: NOT
46845: PUSH
46846: LD_VAR 0 1
46850: PUSH
46851: LD_EXP 155
46855: IN
46856: NOT
46857: OR
46858: IFFALSE 46862
// exit ;
46860: GO 47184
// index := GetElementIndex ( minersList , unit ) ;
46862: LD_ADDR_VAR 0 6
46866: PUSH
46867: LD_EXP 155
46871: PPUSH
46872: LD_VAR 0 1
46876: PPUSH
46877: CALL 52380 0 2
46881: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
46882: LD_ADDR_VAR 0 8
46886: PUSH
46887: LD_EXP 157
46891: PUSH
46892: LD_EXP 156
46896: PUSH
46897: LD_VAR 0 6
46901: ARRAY
46902: MINUS
46903: ST_TO_ADDR
// if not minesFreeAmount then
46904: LD_VAR 0 8
46908: NOT
46909: IFFALSE 46913
// exit ;
46911: GO 47184
// tmp := [ ] ;
46913: LD_ADDR_VAR 0 7
46917: PUSH
46918: EMPTY
46919: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
46920: LD_ADDR_VAR 0 5
46924: PUSH
46925: DOUBLE
46926: LD_INT 1
46928: DEC
46929: ST_TO_ADDR
46930: LD_VAR 0 8
46934: PUSH
46935: FOR_TO
46936: IFFALSE 47131
// begin _d := rand ( 0 , 5 ) ;
46938: LD_ADDR_VAR 0 11
46942: PUSH
46943: LD_INT 0
46945: PPUSH
46946: LD_INT 5
46948: PPUSH
46949: CALL_OW 12
46953: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
46954: LD_ADDR_VAR 0 12
46958: PUSH
46959: LD_INT 2
46961: PPUSH
46962: LD_INT 6
46964: PPUSH
46965: CALL_OW 12
46969: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
46970: LD_ADDR_VAR 0 9
46974: PUSH
46975: LD_VAR 0 2
46979: PPUSH
46980: LD_VAR 0 11
46984: PPUSH
46985: LD_VAR 0 12
46989: PPUSH
46990: CALL_OW 272
46994: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
46995: LD_ADDR_VAR 0 10
46999: PUSH
47000: LD_VAR 0 3
47004: PPUSH
47005: LD_VAR 0 11
47009: PPUSH
47010: LD_VAR 0 12
47014: PPUSH
47015: CALL_OW 273
47019: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
47020: LD_VAR 0 9
47024: PPUSH
47025: LD_VAR 0 10
47029: PPUSH
47030: CALL_OW 488
47034: PUSH
47035: LD_VAR 0 9
47039: PUSH
47040: LD_VAR 0 10
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_VAR 0 7
47053: IN
47054: NOT
47055: AND
47056: PUSH
47057: LD_VAR 0 9
47061: PPUSH
47062: LD_VAR 0 10
47066: PPUSH
47067: CALL_OW 458
47071: NOT
47072: AND
47073: IFFALSE 47115
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
47075: LD_ADDR_VAR 0 7
47079: PUSH
47080: LD_VAR 0 7
47084: PPUSH
47085: LD_VAR 0 7
47089: PUSH
47090: LD_INT 1
47092: PLUS
47093: PPUSH
47094: LD_VAR 0 9
47098: PUSH
47099: LD_VAR 0 10
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PPUSH
47108: CALL_OW 1
47112: ST_TO_ADDR
47113: GO 47129
// i := i - 1 ;
47115: LD_ADDR_VAR 0 5
47119: PUSH
47120: LD_VAR 0 5
47124: PUSH
47125: LD_INT 1
47127: MINUS
47128: ST_TO_ADDR
// end ;
47129: GO 46935
47131: POP
47132: POP
// for i in tmp do
47133: LD_ADDR_VAR 0 5
47137: PUSH
47138: LD_VAR 0 7
47142: PUSH
47143: FOR_IN
47144: IFFALSE 47182
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
47146: LD_VAR 0 1
47150: PPUSH
47151: LD_VAR 0 5
47155: PUSH
47156: LD_INT 1
47158: ARRAY
47159: PPUSH
47160: LD_VAR 0 5
47164: PUSH
47165: LD_INT 2
47167: ARRAY
47168: PPUSH
47169: CALL 46124 0 3
47173: NOT
47174: IFFALSE 47180
// exit ;
47176: POP
47177: POP
47178: GO 47184
47180: GO 47143
47182: POP
47183: POP
// end ;
47184: LD_VAR 0 4
47188: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
47189: LD_INT 0
47191: PPUSH
47192: PPUSH
47193: PPUSH
47194: PPUSH
47195: PPUSH
47196: PPUSH
47197: PPUSH
// if not GetClass ( unit ) = class_sniper then
47198: LD_VAR 0 1
47202: PPUSH
47203: CALL_OW 257
47207: PUSH
47208: LD_INT 5
47210: EQUAL
47211: NOT
47212: IFFALSE 47216
// exit ;
47214: GO 47604
// dist := 8 ;
47216: LD_ADDR_VAR 0 5
47220: PUSH
47221: LD_INT 8
47223: ST_TO_ADDR
// viewRange := 12 ;
47224: LD_ADDR_VAR 0 7
47228: PUSH
47229: LD_INT 12
47231: ST_TO_ADDR
// side := GetSide ( unit ) ;
47232: LD_ADDR_VAR 0 6
47236: PUSH
47237: LD_VAR 0 1
47241: PPUSH
47242: CALL_OW 255
47246: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
47247: LD_INT 61
47249: PPUSH
47250: LD_VAR 0 6
47254: PPUSH
47255: CALL_OW 321
47259: PUSH
47260: LD_INT 2
47262: EQUAL
47263: IFFALSE 47273
// viewRange := 16 ;
47265: LD_ADDR_VAR 0 7
47269: PUSH
47270: LD_INT 16
47272: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
47273: LD_VAR 0 1
47277: PPUSH
47278: LD_VAR 0 2
47282: PPUSH
47283: LD_VAR 0 3
47287: PPUSH
47288: CALL_OW 297
47292: PUSH
47293: LD_VAR 0 5
47297: GREATER
47298: IFFALSE 47377
// begin ComMoveXY ( unit , x , y ) ;
47300: LD_VAR 0 1
47304: PPUSH
47305: LD_VAR 0 2
47309: PPUSH
47310: LD_VAR 0 3
47314: PPUSH
47315: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
47319: LD_INT 35
47321: PPUSH
47322: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
47326: LD_VAR 0 1
47330: PPUSH
47331: LD_VAR 0 2
47335: PPUSH
47336: LD_VAR 0 3
47340: PPUSH
47341: CALL 83152 0 3
47345: NOT
47346: IFFALSE 47350
// exit ;
47348: GO 47604
// until GetDistUnitXY ( unit , x , y ) < dist ;
47350: LD_VAR 0 1
47354: PPUSH
47355: LD_VAR 0 2
47359: PPUSH
47360: LD_VAR 0 3
47364: PPUSH
47365: CALL_OW 297
47369: PUSH
47370: LD_VAR 0 5
47374: LESS
47375: IFFALSE 47319
// end ; ComTurnXY ( unit , x , y ) ;
47377: LD_VAR 0 1
47381: PPUSH
47382: LD_VAR 0 2
47386: PPUSH
47387: LD_VAR 0 3
47391: PPUSH
47392: CALL_OW 118
// wait ( 5 ) ;
47396: LD_INT 5
47398: PPUSH
47399: CALL_OW 67
// _d := GetDir ( unit ) ;
47403: LD_ADDR_VAR 0 10
47407: PUSH
47408: LD_VAR 0 1
47412: PPUSH
47413: CALL_OW 254
47417: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
47418: LD_ADDR_VAR 0 8
47422: PUSH
47423: LD_VAR 0 1
47427: PPUSH
47428: CALL_OW 250
47432: PPUSH
47433: LD_VAR 0 10
47437: PPUSH
47438: LD_VAR 0 5
47442: PPUSH
47443: CALL_OW 272
47447: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
47448: LD_ADDR_VAR 0 9
47452: PUSH
47453: LD_VAR 0 1
47457: PPUSH
47458: CALL_OW 251
47462: PPUSH
47463: LD_VAR 0 10
47467: PPUSH
47468: LD_VAR 0 5
47472: PPUSH
47473: CALL_OW 273
47477: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47478: LD_VAR 0 8
47482: PPUSH
47483: LD_VAR 0 9
47487: PPUSH
47488: CALL_OW 488
47492: NOT
47493: IFFALSE 47497
// exit ;
47495: GO 47604
// ComAnimCustom ( unit , 1 ) ;
47497: LD_VAR 0 1
47501: PPUSH
47502: LD_INT 1
47504: PPUSH
47505: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
47509: LD_VAR 0 8
47513: PPUSH
47514: LD_VAR 0 9
47518: PPUSH
47519: LD_VAR 0 6
47523: PPUSH
47524: LD_VAR 0 7
47528: PPUSH
47529: CALL_OW 330
// repeat wait ( 1 ) ;
47533: LD_INT 1
47535: PPUSH
47536: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
47540: LD_VAR 0 1
47544: PPUSH
47545: CALL_OW 316
47549: PUSH
47550: LD_VAR 0 1
47554: PPUSH
47555: CALL_OW 314
47559: OR
47560: PUSH
47561: LD_VAR 0 1
47565: PPUSH
47566: CALL_OW 302
47570: NOT
47571: OR
47572: PUSH
47573: LD_VAR 0 1
47577: PPUSH
47578: CALL_OW 301
47582: OR
47583: IFFALSE 47533
// RemoveSeeing ( _x , _y , side ) ;
47585: LD_VAR 0 8
47589: PPUSH
47590: LD_VAR 0 9
47594: PPUSH
47595: LD_VAR 0 6
47599: PPUSH
47600: CALL_OW 331
// end ; end_of_file
47604: LD_VAR 0 4
47608: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
47609: LD_INT 0
47611: PPUSH
47612: PPUSH
// if exist_mode then
47613: LD_VAR 0 2
47617: IFFALSE 47642
// unit := CreateCharacter ( prefix & ident ) else
47619: LD_ADDR_VAR 0 5
47623: PUSH
47624: LD_VAR 0 3
47628: PUSH
47629: LD_VAR 0 1
47633: STR
47634: PPUSH
47635: CALL_OW 34
47639: ST_TO_ADDR
47640: GO 47657
// unit := NewCharacter ( ident ) ;
47642: LD_ADDR_VAR 0 5
47646: PUSH
47647: LD_VAR 0 1
47651: PPUSH
47652: CALL_OW 25
47656: ST_TO_ADDR
// result := unit ;
47657: LD_ADDR_VAR 0 4
47661: PUSH
47662: LD_VAR 0 5
47666: ST_TO_ADDR
// end ;
47667: LD_VAR 0 4
47671: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
47672: LD_INT 0
47674: PPUSH
47675: PPUSH
// if not side or not nation then
47676: LD_VAR 0 1
47680: NOT
47681: PUSH
47682: LD_VAR 0 2
47686: NOT
47687: OR
47688: IFFALSE 47692
// exit ;
47690: GO 48460
// case nation of nation_american :
47692: LD_VAR 0 2
47696: PUSH
47697: LD_INT 1
47699: DOUBLE
47700: EQUAL
47701: IFTRUE 47705
47703: GO 47919
47705: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
47706: LD_ADDR_VAR 0 4
47710: PUSH
47711: LD_INT 35
47713: PUSH
47714: LD_INT 45
47716: PUSH
47717: LD_INT 46
47719: PUSH
47720: LD_INT 47
47722: PUSH
47723: LD_INT 82
47725: PUSH
47726: LD_INT 83
47728: PUSH
47729: LD_INT 84
47731: PUSH
47732: LD_INT 85
47734: PUSH
47735: LD_INT 86
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: LD_INT 6
47746: PUSH
47747: LD_INT 15
47749: PUSH
47750: LD_INT 16
47752: PUSH
47753: LD_INT 7
47755: PUSH
47756: LD_INT 12
47758: PUSH
47759: LD_INT 13
47761: PUSH
47762: LD_INT 10
47764: PUSH
47765: LD_INT 14
47767: PUSH
47768: LD_INT 20
47770: PUSH
47771: LD_INT 21
47773: PUSH
47774: LD_INT 22
47776: PUSH
47777: LD_INT 25
47779: PUSH
47780: LD_INT 32
47782: PUSH
47783: LD_INT 27
47785: PUSH
47786: LD_INT 36
47788: PUSH
47789: LD_INT 69
47791: PUSH
47792: LD_INT 39
47794: PUSH
47795: LD_INT 34
47797: PUSH
47798: LD_INT 40
47800: PUSH
47801: LD_INT 48
47803: PUSH
47804: LD_INT 49
47806: PUSH
47807: LD_INT 50
47809: PUSH
47810: LD_INT 51
47812: PUSH
47813: LD_INT 52
47815: PUSH
47816: LD_INT 53
47818: PUSH
47819: LD_INT 54
47821: PUSH
47822: LD_INT 55
47824: PUSH
47825: LD_INT 56
47827: PUSH
47828: LD_INT 57
47830: PUSH
47831: LD_INT 58
47833: PUSH
47834: LD_INT 59
47836: PUSH
47837: LD_INT 60
47839: PUSH
47840: LD_INT 61
47842: PUSH
47843: LD_INT 62
47845: PUSH
47846: LD_INT 80
47848: PUSH
47849: LD_INT 82
47851: PUSH
47852: LD_INT 83
47854: PUSH
47855: LD_INT 84
47857: PUSH
47858: LD_INT 85
47860: PUSH
47861: LD_INT 86
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: ST_TO_ADDR
47917: GO 48384
47919: LD_INT 2
47921: DOUBLE
47922: EQUAL
47923: IFTRUE 47927
47925: GO 48153
47927: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
47928: LD_ADDR_VAR 0 4
47932: PUSH
47933: LD_INT 35
47935: PUSH
47936: LD_INT 45
47938: PUSH
47939: LD_INT 46
47941: PUSH
47942: LD_INT 47
47944: PUSH
47945: LD_INT 82
47947: PUSH
47948: LD_INT 83
47950: PUSH
47951: LD_INT 84
47953: PUSH
47954: LD_INT 85
47956: PUSH
47957: LD_INT 87
47959: PUSH
47960: LD_INT 70
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 11
47968: PUSH
47969: LD_INT 3
47971: PUSH
47972: LD_INT 4
47974: PUSH
47975: LD_INT 5
47977: PUSH
47978: LD_INT 6
47980: PUSH
47981: LD_INT 15
47983: PUSH
47984: LD_INT 18
47986: PUSH
47987: LD_INT 7
47989: PUSH
47990: LD_INT 17
47992: PUSH
47993: LD_INT 8
47995: PUSH
47996: LD_INT 20
47998: PUSH
47999: LD_INT 21
48001: PUSH
48002: LD_INT 22
48004: PUSH
48005: LD_INT 72
48007: PUSH
48008: LD_INT 26
48010: PUSH
48011: LD_INT 69
48013: PUSH
48014: LD_INT 39
48016: PUSH
48017: LD_INT 40
48019: PUSH
48020: LD_INT 41
48022: PUSH
48023: LD_INT 42
48025: PUSH
48026: LD_INT 43
48028: PUSH
48029: LD_INT 48
48031: PUSH
48032: LD_INT 49
48034: PUSH
48035: LD_INT 50
48037: PUSH
48038: LD_INT 51
48040: PUSH
48041: LD_INT 52
48043: PUSH
48044: LD_INT 53
48046: PUSH
48047: LD_INT 54
48049: PUSH
48050: LD_INT 55
48052: PUSH
48053: LD_INT 56
48055: PUSH
48056: LD_INT 60
48058: PUSH
48059: LD_INT 61
48061: PUSH
48062: LD_INT 62
48064: PUSH
48065: LD_INT 66
48067: PUSH
48068: LD_INT 67
48070: PUSH
48071: LD_INT 68
48073: PUSH
48074: LD_INT 81
48076: PUSH
48077: LD_INT 82
48079: PUSH
48080: LD_INT 83
48082: PUSH
48083: LD_INT 84
48085: PUSH
48086: LD_INT 85
48088: PUSH
48089: LD_INT 87
48091: PUSH
48092: LD_INT 88
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: ST_TO_ADDR
48151: GO 48384
48153: LD_INT 3
48155: DOUBLE
48156: EQUAL
48157: IFTRUE 48161
48159: GO 48383
48161: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
48162: LD_ADDR_VAR 0 4
48166: PUSH
48167: LD_INT 46
48169: PUSH
48170: LD_INT 47
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: LD_INT 82
48181: PUSH
48182: LD_INT 83
48184: PUSH
48185: LD_INT 84
48187: PUSH
48188: LD_INT 85
48190: PUSH
48191: LD_INT 86
48193: PUSH
48194: LD_INT 11
48196: PUSH
48197: LD_INT 9
48199: PUSH
48200: LD_INT 20
48202: PUSH
48203: LD_INT 19
48205: PUSH
48206: LD_INT 21
48208: PUSH
48209: LD_INT 24
48211: PUSH
48212: LD_INT 22
48214: PUSH
48215: LD_INT 25
48217: PUSH
48218: LD_INT 28
48220: PUSH
48221: LD_INT 29
48223: PUSH
48224: LD_INT 30
48226: PUSH
48227: LD_INT 31
48229: PUSH
48230: LD_INT 37
48232: PUSH
48233: LD_INT 38
48235: PUSH
48236: LD_INT 32
48238: PUSH
48239: LD_INT 27
48241: PUSH
48242: LD_INT 33
48244: PUSH
48245: LD_INT 69
48247: PUSH
48248: LD_INT 39
48250: PUSH
48251: LD_INT 34
48253: PUSH
48254: LD_INT 40
48256: PUSH
48257: LD_INT 71
48259: PUSH
48260: LD_INT 23
48262: PUSH
48263: LD_INT 44
48265: PUSH
48266: LD_INT 48
48268: PUSH
48269: LD_INT 49
48271: PUSH
48272: LD_INT 50
48274: PUSH
48275: LD_INT 51
48277: PUSH
48278: LD_INT 52
48280: PUSH
48281: LD_INT 53
48283: PUSH
48284: LD_INT 54
48286: PUSH
48287: LD_INT 55
48289: PUSH
48290: LD_INT 56
48292: PUSH
48293: LD_INT 57
48295: PUSH
48296: LD_INT 58
48298: PUSH
48299: LD_INT 59
48301: PUSH
48302: LD_INT 63
48304: PUSH
48305: LD_INT 64
48307: PUSH
48308: LD_INT 65
48310: PUSH
48311: LD_INT 82
48313: PUSH
48314: LD_INT 83
48316: PUSH
48317: LD_INT 84
48319: PUSH
48320: LD_INT 85
48322: PUSH
48323: LD_INT 86
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: ST_TO_ADDR
48381: GO 48384
48383: POP
// if state > - 1 and state < 3 then
48384: LD_VAR 0 3
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: GREATER
48393: PUSH
48394: LD_VAR 0 3
48398: PUSH
48399: LD_INT 3
48401: LESS
48402: AND
48403: IFFALSE 48460
// for i in result do
48405: LD_ADDR_VAR 0 5
48409: PUSH
48410: LD_VAR 0 4
48414: PUSH
48415: FOR_IN
48416: IFFALSE 48458
// if GetTech ( i , side ) <> state then
48418: LD_VAR 0 5
48422: PPUSH
48423: LD_VAR 0 1
48427: PPUSH
48428: CALL_OW 321
48432: PUSH
48433: LD_VAR 0 3
48437: NONEQUAL
48438: IFFALSE 48456
// result := result diff i ;
48440: LD_ADDR_VAR 0 4
48444: PUSH
48445: LD_VAR 0 4
48449: PUSH
48450: LD_VAR 0 5
48454: DIFF
48455: ST_TO_ADDR
48456: GO 48415
48458: POP
48459: POP
// end ;
48460: LD_VAR 0 4
48464: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
48465: LD_INT 0
48467: PPUSH
48468: PPUSH
48469: PPUSH
// result := true ;
48470: LD_ADDR_VAR 0 3
48474: PUSH
48475: LD_INT 1
48477: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
48478: LD_ADDR_VAR 0 5
48482: PUSH
48483: LD_VAR 0 2
48487: PPUSH
48488: CALL_OW 480
48492: ST_TO_ADDR
// if not tmp then
48493: LD_VAR 0 5
48497: NOT
48498: IFFALSE 48502
// exit ;
48500: GO 48551
// for i in tmp do
48502: LD_ADDR_VAR 0 4
48506: PUSH
48507: LD_VAR 0 5
48511: PUSH
48512: FOR_IN
48513: IFFALSE 48549
// if GetTech ( i , side ) <> state_researched then
48515: LD_VAR 0 4
48519: PPUSH
48520: LD_VAR 0 1
48524: PPUSH
48525: CALL_OW 321
48529: PUSH
48530: LD_INT 2
48532: NONEQUAL
48533: IFFALSE 48547
// begin result := false ;
48535: LD_ADDR_VAR 0 3
48539: PUSH
48540: LD_INT 0
48542: ST_TO_ADDR
// exit ;
48543: POP
48544: POP
48545: GO 48551
// end ;
48547: GO 48512
48549: POP
48550: POP
// end ;
48551: LD_VAR 0 3
48555: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
48556: LD_INT 0
48558: PPUSH
48559: PPUSH
48560: PPUSH
48561: PPUSH
48562: PPUSH
48563: PPUSH
48564: PPUSH
48565: PPUSH
48566: PPUSH
48567: PPUSH
48568: PPUSH
48569: PPUSH
48570: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
48571: LD_VAR 0 1
48575: NOT
48576: PUSH
48577: LD_VAR 0 1
48581: PPUSH
48582: CALL_OW 257
48586: PUSH
48587: LD_INT 9
48589: NONEQUAL
48590: OR
48591: IFFALSE 48595
// exit ;
48593: GO 49168
// side := GetSide ( unit ) ;
48595: LD_ADDR_VAR 0 9
48599: PUSH
48600: LD_VAR 0 1
48604: PPUSH
48605: CALL_OW 255
48609: ST_TO_ADDR
// tech_space := tech_spacanom ;
48610: LD_ADDR_VAR 0 12
48614: PUSH
48615: LD_INT 29
48617: ST_TO_ADDR
// tech_time := tech_taurad ;
48618: LD_ADDR_VAR 0 13
48622: PUSH
48623: LD_INT 28
48625: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
48626: LD_ADDR_VAR 0 11
48630: PUSH
48631: LD_VAR 0 1
48635: PPUSH
48636: CALL_OW 310
48640: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
48641: LD_VAR 0 11
48645: PPUSH
48646: CALL_OW 247
48650: PUSH
48651: LD_INT 2
48653: EQUAL
48654: IFFALSE 48658
// exit ;
48656: GO 49168
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48658: LD_ADDR_VAR 0 8
48662: PUSH
48663: LD_INT 81
48665: PUSH
48666: LD_VAR 0 9
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 3
48677: PUSH
48678: LD_INT 21
48680: PUSH
48681: LD_INT 3
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PPUSH
48696: CALL_OW 69
48700: ST_TO_ADDR
// if not tmp then
48701: LD_VAR 0 8
48705: NOT
48706: IFFALSE 48710
// exit ;
48708: GO 49168
// if in_unit then
48710: LD_VAR 0 11
48714: IFFALSE 48738
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
48716: LD_ADDR_VAR 0 10
48720: PUSH
48721: LD_VAR 0 8
48725: PPUSH
48726: LD_VAR 0 11
48730: PPUSH
48731: CALL_OW 74
48735: ST_TO_ADDR
48736: GO 48758
// enemy := NearestUnitToUnit ( tmp , unit ) ;
48738: LD_ADDR_VAR 0 10
48742: PUSH
48743: LD_VAR 0 8
48747: PPUSH
48748: LD_VAR 0 1
48752: PPUSH
48753: CALL_OW 74
48757: ST_TO_ADDR
// if not enemy then
48758: LD_VAR 0 10
48762: NOT
48763: IFFALSE 48767
// exit ;
48765: GO 49168
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
48767: LD_VAR 0 11
48771: PUSH
48772: LD_VAR 0 11
48776: PPUSH
48777: LD_VAR 0 10
48781: PPUSH
48782: CALL_OW 296
48786: PUSH
48787: LD_INT 13
48789: GREATER
48790: AND
48791: PUSH
48792: LD_VAR 0 1
48796: PPUSH
48797: LD_VAR 0 10
48801: PPUSH
48802: CALL_OW 296
48806: PUSH
48807: LD_INT 12
48809: GREATER
48810: OR
48811: IFFALSE 48815
// exit ;
48813: GO 49168
// missile := [ 1 ] ;
48815: LD_ADDR_VAR 0 14
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: EMPTY
48824: LIST
48825: ST_TO_ADDR
// if Researched ( side , tech_space ) then
48826: LD_VAR 0 9
48830: PPUSH
48831: LD_VAR 0 12
48835: PPUSH
48836: CALL_OW 325
48840: IFFALSE 48869
// missile := Insert ( missile , missile + 1 , 2 ) ;
48842: LD_ADDR_VAR 0 14
48846: PUSH
48847: LD_VAR 0 14
48851: PPUSH
48852: LD_VAR 0 14
48856: PUSH
48857: LD_INT 1
48859: PLUS
48860: PPUSH
48861: LD_INT 2
48863: PPUSH
48864: CALL_OW 2
48868: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
48869: LD_VAR 0 9
48873: PPUSH
48874: LD_VAR 0 13
48878: PPUSH
48879: CALL_OW 325
48883: PUSH
48884: LD_VAR 0 10
48888: PPUSH
48889: CALL_OW 255
48893: PPUSH
48894: LD_VAR 0 13
48898: PPUSH
48899: CALL_OW 325
48903: NOT
48904: AND
48905: IFFALSE 48934
// missile := Insert ( missile , missile + 1 , 3 ) ;
48907: LD_ADDR_VAR 0 14
48911: PUSH
48912: LD_VAR 0 14
48916: PPUSH
48917: LD_VAR 0 14
48921: PUSH
48922: LD_INT 1
48924: PLUS
48925: PPUSH
48926: LD_INT 3
48928: PPUSH
48929: CALL_OW 2
48933: ST_TO_ADDR
// if missile < 2 then
48934: LD_VAR 0 14
48938: PUSH
48939: LD_INT 2
48941: LESS
48942: IFFALSE 48946
// exit ;
48944: GO 49168
// x := GetX ( enemy ) ;
48946: LD_ADDR_VAR 0 4
48950: PUSH
48951: LD_VAR 0 10
48955: PPUSH
48956: CALL_OW 250
48960: ST_TO_ADDR
// y := GetY ( enemy ) ;
48961: LD_ADDR_VAR 0 5
48965: PUSH
48966: LD_VAR 0 10
48970: PPUSH
48971: CALL_OW 251
48975: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
48976: LD_ADDR_VAR 0 6
48980: PUSH
48981: LD_VAR 0 4
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PPUSH
48990: LD_INT 1
48992: PPUSH
48993: CALL_OW 12
48997: PLUS
48998: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
48999: LD_ADDR_VAR 0 7
49003: PUSH
49004: LD_VAR 0 5
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PPUSH
49013: LD_INT 1
49015: PPUSH
49016: CALL_OW 12
49020: PLUS
49021: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49022: LD_VAR 0 6
49026: PPUSH
49027: LD_VAR 0 7
49031: PPUSH
49032: CALL_OW 488
49036: NOT
49037: IFFALSE 49059
// begin _x := x ;
49039: LD_ADDR_VAR 0 6
49043: PUSH
49044: LD_VAR 0 4
49048: ST_TO_ADDR
// _y := y ;
49049: LD_ADDR_VAR 0 7
49053: PUSH
49054: LD_VAR 0 5
49058: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
49059: LD_ADDR_VAR 0 3
49063: PUSH
49064: LD_INT 1
49066: PPUSH
49067: LD_VAR 0 14
49071: PPUSH
49072: CALL_OW 12
49076: ST_TO_ADDR
// case i of 1 :
49077: LD_VAR 0 3
49081: PUSH
49082: LD_INT 1
49084: DOUBLE
49085: EQUAL
49086: IFTRUE 49090
49088: GO 49107
49090: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
49091: LD_VAR 0 1
49095: PPUSH
49096: LD_VAR 0 10
49100: PPUSH
49101: CALL_OW 115
49105: GO 49168
49107: LD_INT 2
49109: DOUBLE
49110: EQUAL
49111: IFTRUE 49115
49113: GO 49137
49115: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
49116: LD_VAR 0 1
49120: PPUSH
49121: LD_VAR 0 6
49125: PPUSH
49126: LD_VAR 0 7
49130: PPUSH
49131: CALL_OW 153
49135: GO 49168
49137: LD_INT 3
49139: DOUBLE
49140: EQUAL
49141: IFTRUE 49145
49143: GO 49167
49145: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
49146: LD_VAR 0 1
49150: PPUSH
49151: LD_VAR 0 6
49155: PPUSH
49156: LD_VAR 0 7
49160: PPUSH
49161: CALL_OW 154
49165: GO 49168
49167: POP
// end ;
49168: LD_VAR 0 2
49172: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
49173: LD_INT 0
49175: PPUSH
49176: PPUSH
49177: PPUSH
49178: PPUSH
49179: PPUSH
49180: PPUSH
// if not unit or not building then
49181: LD_VAR 0 1
49185: NOT
49186: PUSH
49187: LD_VAR 0 2
49191: NOT
49192: OR
49193: IFFALSE 49197
// exit ;
49195: GO 49355
// x := GetX ( building ) ;
49197: LD_ADDR_VAR 0 5
49201: PUSH
49202: LD_VAR 0 2
49206: PPUSH
49207: CALL_OW 250
49211: ST_TO_ADDR
// y := GetY ( building ) ;
49212: LD_ADDR_VAR 0 6
49216: PUSH
49217: LD_VAR 0 2
49221: PPUSH
49222: CALL_OW 251
49226: ST_TO_ADDR
// for i = 0 to 5 do
49227: LD_ADDR_VAR 0 4
49231: PUSH
49232: DOUBLE
49233: LD_INT 0
49235: DEC
49236: ST_TO_ADDR
49237: LD_INT 5
49239: PUSH
49240: FOR_TO
49241: IFFALSE 49353
// begin _x := ShiftX ( x , i , 3 ) ;
49243: LD_ADDR_VAR 0 7
49247: PUSH
49248: LD_VAR 0 5
49252: PPUSH
49253: LD_VAR 0 4
49257: PPUSH
49258: LD_INT 3
49260: PPUSH
49261: CALL_OW 272
49265: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
49266: LD_ADDR_VAR 0 8
49270: PUSH
49271: LD_VAR 0 6
49275: PPUSH
49276: LD_VAR 0 4
49280: PPUSH
49281: LD_INT 3
49283: PPUSH
49284: CALL_OW 273
49288: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49289: LD_VAR 0 7
49293: PPUSH
49294: LD_VAR 0 8
49298: PPUSH
49299: CALL_OW 488
49303: NOT
49304: IFFALSE 49308
// continue ;
49306: GO 49240
// if HexInfo ( _x , _y ) = 0 then
49308: LD_VAR 0 7
49312: PPUSH
49313: LD_VAR 0 8
49317: PPUSH
49318: CALL_OW 428
49322: PUSH
49323: LD_INT 0
49325: EQUAL
49326: IFFALSE 49351
// begin ComMoveXY ( unit , _x , _y ) ;
49328: LD_VAR 0 1
49332: PPUSH
49333: LD_VAR 0 7
49337: PPUSH
49338: LD_VAR 0 8
49342: PPUSH
49343: CALL_OW 111
// exit ;
49347: POP
49348: POP
49349: GO 49355
// end ; end ;
49351: GO 49240
49353: POP
49354: POP
// end ;
49355: LD_VAR 0 3
49359: RET
// export function ScanBase ( side , base_area ) ; begin
49360: LD_INT 0
49362: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
49363: LD_ADDR_VAR 0 3
49367: PUSH
49368: LD_VAR 0 2
49372: PPUSH
49373: LD_INT 81
49375: PUSH
49376: LD_VAR 0 1
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PPUSH
49385: CALL_OW 70
49389: ST_TO_ADDR
// end ;
49390: LD_VAR 0 3
49394: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
49395: LD_INT 0
49397: PPUSH
49398: PPUSH
49399: PPUSH
49400: PPUSH
// result := false ;
49401: LD_ADDR_VAR 0 2
49405: PUSH
49406: LD_INT 0
49408: ST_TO_ADDR
// side := GetSide ( unit ) ;
49409: LD_ADDR_VAR 0 3
49413: PUSH
49414: LD_VAR 0 1
49418: PPUSH
49419: CALL_OW 255
49423: ST_TO_ADDR
// nat := GetNation ( unit ) ;
49424: LD_ADDR_VAR 0 4
49428: PUSH
49429: LD_VAR 0 1
49433: PPUSH
49434: CALL_OW 248
49438: ST_TO_ADDR
// case nat of 1 :
49439: LD_VAR 0 4
49443: PUSH
49444: LD_INT 1
49446: DOUBLE
49447: EQUAL
49448: IFTRUE 49452
49450: GO 49463
49452: POP
// tech := tech_lassight ; 2 :
49453: LD_ADDR_VAR 0 5
49457: PUSH
49458: LD_INT 12
49460: ST_TO_ADDR
49461: GO 49502
49463: LD_INT 2
49465: DOUBLE
49466: EQUAL
49467: IFTRUE 49471
49469: GO 49482
49471: POP
// tech := tech_mortar ; 3 :
49472: LD_ADDR_VAR 0 5
49476: PUSH
49477: LD_INT 41
49479: ST_TO_ADDR
49480: GO 49502
49482: LD_INT 3
49484: DOUBLE
49485: EQUAL
49486: IFTRUE 49490
49488: GO 49501
49490: POP
// tech := tech_bazooka ; end ;
49491: LD_ADDR_VAR 0 5
49495: PUSH
49496: LD_INT 44
49498: ST_TO_ADDR
49499: GO 49502
49501: POP
// if Researched ( side , tech ) then
49502: LD_VAR 0 3
49506: PPUSH
49507: LD_VAR 0 5
49511: PPUSH
49512: CALL_OW 325
49516: IFFALSE 49543
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
49518: LD_ADDR_VAR 0 2
49522: PUSH
49523: LD_INT 5
49525: PUSH
49526: LD_INT 8
49528: PUSH
49529: LD_INT 9
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: LIST
49536: PUSH
49537: LD_VAR 0 4
49541: ARRAY
49542: ST_TO_ADDR
// end ;
49543: LD_VAR 0 2
49547: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
49548: LD_INT 0
49550: PPUSH
49551: PPUSH
49552: PPUSH
// if not mines then
49553: LD_VAR 0 2
49557: NOT
49558: IFFALSE 49562
// exit ;
49560: GO 49706
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49562: LD_ADDR_VAR 0 5
49566: PUSH
49567: LD_INT 81
49569: PUSH
49570: LD_VAR 0 1
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 3
49581: PUSH
49582: LD_INT 21
49584: PUSH
49585: LD_INT 3
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PPUSH
49600: CALL_OW 69
49604: ST_TO_ADDR
// for i in mines do
49605: LD_ADDR_VAR 0 4
49609: PUSH
49610: LD_VAR 0 2
49614: PUSH
49615: FOR_IN
49616: IFFALSE 49704
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
49618: LD_VAR 0 4
49622: PUSH
49623: LD_INT 1
49625: ARRAY
49626: PPUSH
49627: LD_VAR 0 4
49631: PUSH
49632: LD_INT 2
49634: ARRAY
49635: PPUSH
49636: CALL_OW 458
49640: NOT
49641: IFFALSE 49645
// continue ;
49643: GO 49615
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
49645: LD_VAR 0 4
49649: PUSH
49650: LD_INT 1
49652: ARRAY
49653: PPUSH
49654: LD_VAR 0 4
49658: PUSH
49659: LD_INT 2
49661: ARRAY
49662: PPUSH
49663: CALL_OW 428
49667: PUSH
49668: LD_VAR 0 5
49672: IN
49673: IFFALSE 49702
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
49675: LD_VAR 0 4
49679: PUSH
49680: LD_INT 1
49682: ARRAY
49683: PPUSH
49684: LD_VAR 0 4
49688: PUSH
49689: LD_INT 2
49691: ARRAY
49692: PPUSH
49693: LD_VAR 0 1
49697: PPUSH
49698: CALL_OW 456
// end ;
49702: GO 49615
49704: POP
49705: POP
// end ;
49706: LD_VAR 0 3
49710: RET
// export function Count ( array ) ; var i ; begin
49711: LD_INT 0
49713: PPUSH
49714: PPUSH
// result := 0 ;
49715: LD_ADDR_VAR 0 2
49719: PUSH
49720: LD_INT 0
49722: ST_TO_ADDR
// for i in array do
49723: LD_ADDR_VAR 0 3
49727: PUSH
49728: LD_VAR 0 1
49732: PUSH
49733: FOR_IN
49734: IFFALSE 49758
// if i then
49736: LD_VAR 0 3
49740: IFFALSE 49756
// result := result + 1 ;
49742: LD_ADDR_VAR 0 2
49746: PUSH
49747: LD_VAR 0 2
49751: PUSH
49752: LD_INT 1
49754: PLUS
49755: ST_TO_ADDR
49756: GO 49733
49758: POP
49759: POP
// end ;
49760: LD_VAR 0 2
49764: RET
// export function IsEmpty ( building ) ; begin
49765: LD_INT 0
49767: PPUSH
// if not building then
49768: LD_VAR 0 1
49772: NOT
49773: IFFALSE 49777
// exit ;
49775: GO 49820
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
49777: LD_ADDR_VAR 0 2
49781: PUSH
49782: LD_VAR 0 1
49786: PUSH
49787: LD_INT 22
49789: PUSH
49790: LD_VAR 0 1
49794: PPUSH
49795: CALL_OW 255
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 58
49806: PUSH
49807: EMPTY
49808: LIST
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PPUSH
49814: CALL_OW 69
49818: IN
49819: ST_TO_ADDR
// end ;
49820: LD_VAR 0 2
49824: RET
// export function IsNotFull ( building ) ; begin
49825: LD_INT 0
49827: PPUSH
// if not building then
49828: LD_VAR 0 1
49832: NOT
49833: IFFALSE 49837
// exit ;
49835: GO 49856
// result := UnitsInside ( building ) < 6 ;
49837: LD_ADDR_VAR 0 2
49841: PUSH
49842: LD_VAR 0 1
49846: PPUSH
49847: CALL_OW 313
49851: PUSH
49852: LD_INT 6
49854: LESS
49855: ST_TO_ADDR
// end ;
49856: LD_VAR 0 2
49860: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
49861: LD_INT 0
49863: PPUSH
49864: PPUSH
49865: PPUSH
49866: PPUSH
// tmp := [ ] ;
49867: LD_ADDR_VAR 0 3
49871: PUSH
49872: EMPTY
49873: ST_TO_ADDR
// list := [ ] ;
49874: LD_ADDR_VAR 0 5
49878: PUSH
49879: EMPTY
49880: ST_TO_ADDR
// for i = 16 to 25 do
49881: LD_ADDR_VAR 0 4
49885: PUSH
49886: DOUBLE
49887: LD_INT 16
49889: DEC
49890: ST_TO_ADDR
49891: LD_INT 25
49893: PUSH
49894: FOR_TO
49895: IFFALSE 49968
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
49897: LD_ADDR_VAR 0 3
49901: PUSH
49902: LD_VAR 0 3
49906: PUSH
49907: LD_INT 22
49909: PUSH
49910: LD_VAR 0 1
49914: PPUSH
49915: CALL_OW 255
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 91
49926: PUSH
49927: LD_VAR 0 1
49931: PUSH
49932: LD_INT 6
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 30
49942: PUSH
49943: LD_VAR 0 4
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: LIST
49956: PUSH
49957: EMPTY
49958: LIST
49959: PPUSH
49960: CALL_OW 69
49964: ADD
49965: ST_TO_ADDR
49966: GO 49894
49968: POP
49969: POP
// for i = 1 to tmp do
49970: LD_ADDR_VAR 0 4
49974: PUSH
49975: DOUBLE
49976: LD_INT 1
49978: DEC
49979: ST_TO_ADDR
49980: LD_VAR 0 3
49984: PUSH
49985: FOR_TO
49986: IFFALSE 50074
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
49988: LD_ADDR_VAR 0 5
49992: PUSH
49993: LD_VAR 0 5
49997: PUSH
49998: LD_VAR 0 3
50002: PUSH
50003: LD_VAR 0 4
50007: ARRAY
50008: PPUSH
50009: CALL_OW 266
50013: PUSH
50014: LD_VAR 0 3
50018: PUSH
50019: LD_VAR 0 4
50023: ARRAY
50024: PPUSH
50025: CALL_OW 250
50029: PUSH
50030: LD_VAR 0 3
50034: PUSH
50035: LD_VAR 0 4
50039: ARRAY
50040: PPUSH
50041: CALL_OW 251
50045: PUSH
50046: LD_VAR 0 3
50050: PUSH
50051: LD_VAR 0 4
50055: ARRAY
50056: PPUSH
50057: CALL_OW 254
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: PUSH
50068: EMPTY
50069: LIST
50070: ADD
50071: ST_TO_ADDR
50072: GO 49985
50074: POP
50075: POP
// result := list ;
50076: LD_ADDR_VAR 0 2
50080: PUSH
50081: LD_VAR 0 5
50085: ST_TO_ADDR
// end ;
50086: LD_VAR 0 2
50090: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
50091: LD_INT 0
50093: PPUSH
50094: PPUSH
50095: PPUSH
50096: PPUSH
50097: PPUSH
50098: PPUSH
50099: PPUSH
// if not factory then
50100: LD_VAR 0 1
50104: NOT
50105: IFFALSE 50109
// exit ;
50107: GO 50702
// if control = control_apeman then
50109: LD_VAR 0 4
50113: PUSH
50114: LD_INT 5
50116: EQUAL
50117: IFFALSE 50226
// begin tmp := UnitsInside ( factory ) ;
50119: LD_ADDR_VAR 0 8
50123: PUSH
50124: LD_VAR 0 1
50128: PPUSH
50129: CALL_OW 313
50133: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
50134: LD_VAR 0 8
50138: PPUSH
50139: LD_INT 25
50141: PUSH
50142: LD_INT 12
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PPUSH
50149: CALL_OW 72
50153: NOT
50154: IFFALSE 50164
// control := control_manual ;
50156: LD_ADDR_VAR 0 4
50160: PUSH
50161: LD_INT 1
50163: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
50164: LD_ADDR_VAR 0 8
50168: PUSH
50169: LD_VAR 0 1
50173: PPUSH
50174: CALL 49861 0 1
50178: ST_TO_ADDR
// if tmp then
50179: LD_VAR 0 8
50183: IFFALSE 50226
// begin for i in tmp do
50185: LD_ADDR_VAR 0 7
50189: PUSH
50190: LD_VAR 0 8
50194: PUSH
50195: FOR_IN
50196: IFFALSE 50224
// if i [ 1 ] = b_ext_radio then
50198: LD_VAR 0 7
50202: PUSH
50203: LD_INT 1
50205: ARRAY
50206: PUSH
50207: LD_INT 22
50209: EQUAL
50210: IFFALSE 50222
// begin control := control_remote ;
50212: LD_ADDR_VAR 0 4
50216: PUSH
50217: LD_INT 2
50219: ST_TO_ADDR
// break ;
50220: GO 50224
// end ;
50222: GO 50195
50224: POP
50225: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
50226: LD_VAR 0 1
50230: PPUSH
50231: LD_VAR 0 2
50235: PPUSH
50236: LD_VAR 0 3
50240: PPUSH
50241: LD_VAR 0 4
50245: PPUSH
50246: LD_VAR 0 5
50250: PPUSH
50251: CALL_OW 448
50255: IFFALSE 50290
// begin result := [ chassis , engine , control , weapon ] ;
50257: LD_ADDR_VAR 0 6
50261: PUSH
50262: LD_VAR 0 2
50266: PUSH
50267: LD_VAR 0 3
50271: PUSH
50272: LD_VAR 0 4
50276: PUSH
50277: LD_VAR 0 5
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: ST_TO_ADDR
// exit ;
50288: GO 50702
// end ; _chassis := AvailableChassisList ( factory ) ;
50290: LD_ADDR_VAR 0 9
50294: PUSH
50295: LD_VAR 0 1
50299: PPUSH
50300: CALL_OW 475
50304: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
50305: LD_ADDR_VAR 0 11
50309: PUSH
50310: LD_VAR 0 1
50314: PPUSH
50315: CALL_OW 476
50319: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
50320: LD_ADDR_VAR 0 12
50324: PUSH
50325: LD_VAR 0 1
50329: PPUSH
50330: CALL_OW 477
50334: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
50335: LD_ADDR_VAR 0 10
50339: PUSH
50340: LD_VAR 0 1
50344: PPUSH
50345: CALL_OW 478
50349: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
50350: LD_VAR 0 9
50354: NOT
50355: PUSH
50356: LD_VAR 0 11
50360: NOT
50361: OR
50362: PUSH
50363: LD_VAR 0 12
50367: NOT
50368: OR
50369: PUSH
50370: LD_VAR 0 10
50374: NOT
50375: OR
50376: IFFALSE 50411
// begin result := [ chassis , engine , control , weapon ] ;
50378: LD_ADDR_VAR 0 6
50382: PUSH
50383: LD_VAR 0 2
50387: PUSH
50388: LD_VAR 0 3
50392: PUSH
50393: LD_VAR 0 4
50397: PUSH
50398: LD_VAR 0 5
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: ST_TO_ADDR
// exit ;
50409: GO 50702
// end ; if not chassis in _chassis then
50411: LD_VAR 0 2
50415: PUSH
50416: LD_VAR 0 9
50420: IN
50421: NOT
50422: IFFALSE 50448
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
50424: LD_ADDR_VAR 0 2
50428: PUSH
50429: LD_VAR 0 9
50433: PUSH
50434: LD_INT 1
50436: PPUSH
50437: LD_VAR 0 9
50441: PPUSH
50442: CALL_OW 12
50446: ARRAY
50447: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
50448: LD_VAR 0 2
50452: PPUSH
50453: LD_VAR 0 3
50457: PPUSH
50458: CALL 50707 0 2
50462: NOT
50463: IFFALSE 50522
// repeat engine := _engine [ 1 ] ;
50465: LD_ADDR_VAR 0 3
50469: PUSH
50470: LD_VAR 0 11
50474: PUSH
50475: LD_INT 1
50477: ARRAY
50478: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
50479: LD_ADDR_VAR 0 11
50483: PUSH
50484: LD_VAR 0 11
50488: PPUSH
50489: LD_INT 1
50491: PPUSH
50492: CALL_OW 3
50496: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
50497: LD_VAR 0 2
50501: PPUSH
50502: LD_VAR 0 3
50506: PPUSH
50507: CALL 50707 0 2
50511: PUSH
50512: LD_VAR 0 11
50516: PUSH
50517: EMPTY
50518: EQUAL
50519: OR
50520: IFFALSE 50465
// if not control in _control then
50522: LD_VAR 0 4
50526: PUSH
50527: LD_VAR 0 12
50531: IN
50532: NOT
50533: IFFALSE 50559
// control := _control [ rand ( 1 , _control ) ] ;
50535: LD_ADDR_VAR 0 4
50539: PUSH
50540: LD_VAR 0 12
50544: PUSH
50545: LD_INT 1
50547: PPUSH
50548: LD_VAR 0 12
50552: PPUSH
50553: CALL_OW 12
50557: ARRAY
50558: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
50559: LD_VAR 0 2
50563: PPUSH
50564: LD_VAR 0 5
50568: PPUSH
50569: CALL 50927 0 2
50573: NOT
50574: IFFALSE 50633
// repeat weapon := _weapon [ 1 ] ;
50576: LD_ADDR_VAR 0 5
50580: PUSH
50581: LD_VAR 0 10
50585: PUSH
50586: LD_INT 1
50588: ARRAY
50589: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
50590: LD_ADDR_VAR 0 10
50594: PUSH
50595: LD_VAR 0 10
50599: PPUSH
50600: LD_INT 1
50602: PPUSH
50603: CALL_OW 3
50607: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
50608: LD_VAR 0 2
50612: PPUSH
50613: LD_VAR 0 5
50617: PPUSH
50618: CALL 50927 0 2
50622: PUSH
50623: LD_VAR 0 10
50627: PUSH
50628: EMPTY
50629: EQUAL
50630: OR
50631: IFFALSE 50576
// result := [ ] ;
50633: LD_ADDR_VAR 0 6
50637: PUSH
50638: EMPTY
50639: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
50640: LD_VAR 0 1
50644: PPUSH
50645: LD_VAR 0 2
50649: PPUSH
50650: LD_VAR 0 3
50654: PPUSH
50655: LD_VAR 0 4
50659: PPUSH
50660: LD_VAR 0 5
50664: PPUSH
50665: CALL_OW 448
50669: IFFALSE 50702
// result := [ chassis , engine , control , weapon ] ;
50671: LD_ADDR_VAR 0 6
50675: PUSH
50676: LD_VAR 0 2
50680: PUSH
50681: LD_VAR 0 3
50685: PUSH
50686: LD_VAR 0 4
50690: PUSH
50691: LD_VAR 0 5
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: ST_TO_ADDR
// end ;
50702: LD_VAR 0 6
50706: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
50707: LD_INT 0
50709: PPUSH
// if not chassis or not engine then
50710: LD_VAR 0 1
50714: NOT
50715: PUSH
50716: LD_VAR 0 2
50720: NOT
50721: OR
50722: IFFALSE 50726
// exit ;
50724: GO 50922
// case engine of engine_solar :
50726: LD_VAR 0 2
50730: PUSH
50731: LD_INT 2
50733: DOUBLE
50734: EQUAL
50735: IFTRUE 50739
50737: GO 50777
50739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
50740: LD_ADDR_VAR 0 3
50744: PUSH
50745: LD_INT 11
50747: PUSH
50748: LD_INT 12
50750: PUSH
50751: LD_INT 13
50753: PUSH
50754: LD_INT 14
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: LD_INT 3
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: ST_TO_ADDR
50775: GO 50906
50777: LD_INT 1
50779: DOUBLE
50780: EQUAL
50781: IFTRUE 50785
50783: GO 50847
50785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
50786: LD_ADDR_VAR 0 3
50790: PUSH
50791: LD_INT 11
50793: PUSH
50794: LD_INT 12
50796: PUSH
50797: LD_INT 13
50799: PUSH
50800: LD_INT 14
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: LD_INT 3
50811: PUSH
50812: LD_INT 4
50814: PUSH
50815: LD_INT 5
50817: PUSH
50818: LD_INT 21
50820: PUSH
50821: LD_INT 23
50823: PUSH
50824: LD_INT 22
50826: PUSH
50827: LD_INT 24
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: ST_TO_ADDR
50845: GO 50906
50847: LD_INT 3
50849: DOUBLE
50850: EQUAL
50851: IFTRUE 50855
50853: GO 50905
50855: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50856: LD_ADDR_VAR 0 3
50860: PUSH
50861: LD_INT 13
50863: PUSH
50864: LD_INT 14
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 3
50872: PUSH
50873: LD_INT 4
50875: PUSH
50876: LD_INT 5
50878: PUSH
50879: LD_INT 21
50881: PUSH
50882: LD_INT 22
50884: PUSH
50885: LD_INT 23
50887: PUSH
50888: LD_INT 24
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: ST_TO_ADDR
50903: GO 50906
50905: POP
// result := ( chassis in result ) ;
50906: LD_ADDR_VAR 0 3
50910: PUSH
50911: LD_VAR 0 1
50915: PUSH
50916: LD_VAR 0 3
50920: IN
50921: ST_TO_ADDR
// end ;
50922: LD_VAR 0 3
50926: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
50927: LD_INT 0
50929: PPUSH
// if not chassis or not weapon then
50930: LD_VAR 0 1
50934: NOT
50935: PUSH
50936: LD_VAR 0 2
50940: NOT
50941: OR
50942: IFFALSE 50946
// exit ;
50944: GO 52008
// case weapon of us_machine_gun :
50946: LD_VAR 0 2
50950: PUSH
50951: LD_INT 2
50953: DOUBLE
50954: EQUAL
50955: IFTRUE 50959
50957: GO 50989
50959: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
50960: LD_ADDR_VAR 0 3
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 2
50970: PUSH
50971: LD_INT 3
50973: PUSH
50974: LD_INT 4
50976: PUSH
50977: LD_INT 5
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: ST_TO_ADDR
50987: GO 51992
50989: LD_INT 3
50991: DOUBLE
50992: EQUAL
50993: IFTRUE 50997
50995: GO 51027
50997: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
50998: LD_ADDR_VAR 0 3
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: LD_INT 3
51011: PUSH
51012: LD_INT 4
51014: PUSH
51015: LD_INT 5
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: ST_TO_ADDR
51025: GO 51992
51027: LD_INT 11
51029: DOUBLE
51030: EQUAL
51031: IFTRUE 51035
51033: GO 51065
51035: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
51036: LD_ADDR_VAR 0 3
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: LD_INT 3
51049: PUSH
51050: LD_INT 4
51052: PUSH
51053: LD_INT 5
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: ST_TO_ADDR
51063: GO 51992
51065: LD_INT 4
51067: DOUBLE
51068: EQUAL
51069: IFTRUE 51073
51071: GO 51099
51073: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
51074: LD_ADDR_VAR 0 3
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: LD_INT 3
51084: PUSH
51085: LD_INT 4
51087: PUSH
51088: LD_INT 5
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: ST_TO_ADDR
51097: GO 51992
51099: LD_INT 5
51101: DOUBLE
51102: EQUAL
51103: IFTRUE 51107
51105: GO 51133
51107: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
51108: LD_ADDR_VAR 0 3
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: LD_INT 3
51118: PUSH
51119: LD_INT 4
51121: PUSH
51122: LD_INT 5
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: ST_TO_ADDR
51131: GO 51992
51133: LD_INT 9
51135: DOUBLE
51136: EQUAL
51137: IFTRUE 51141
51139: GO 51167
51141: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
51142: LD_ADDR_VAR 0 3
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: LD_INT 4
51155: PUSH
51156: LD_INT 5
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: ST_TO_ADDR
51165: GO 51992
51167: LD_INT 7
51169: DOUBLE
51170: EQUAL
51171: IFTRUE 51175
51173: GO 51201
51175: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
51176: LD_ADDR_VAR 0 3
51180: PUSH
51181: LD_INT 2
51183: PUSH
51184: LD_INT 3
51186: PUSH
51187: LD_INT 4
51189: PUSH
51190: LD_INT 5
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: ST_TO_ADDR
51199: GO 51992
51201: LD_INT 12
51203: DOUBLE
51204: EQUAL
51205: IFTRUE 51209
51207: GO 51235
51209: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
51210: LD_ADDR_VAR 0 3
51214: PUSH
51215: LD_INT 2
51217: PUSH
51218: LD_INT 3
51220: PUSH
51221: LD_INT 4
51223: PUSH
51224: LD_INT 5
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: ST_TO_ADDR
51233: GO 51992
51235: LD_INT 13
51237: DOUBLE
51238: EQUAL
51239: IFTRUE 51243
51241: GO 51269
51243: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
51244: LD_ADDR_VAR 0 3
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: LD_INT 3
51254: PUSH
51255: LD_INT 4
51257: PUSH
51258: LD_INT 5
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: ST_TO_ADDR
51267: GO 51992
51269: LD_INT 14
51271: DOUBLE
51272: EQUAL
51273: IFTRUE 51277
51275: GO 51295
51277: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
51278: LD_ADDR_VAR 0 3
51282: PUSH
51283: LD_INT 4
51285: PUSH
51286: LD_INT 5
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: ST_TO_ADDR
51293: GO 51992
51295: LD_INT 6
51297: DOUBLE
51298: EQUAL
51299: IFTRUE 51303
51301: GO 51321
51303: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
51304: LD_ADDR_VAR 0 3
51308: PUSH
51309: LD_INT 4
51311: PUSH
51312: LD_INT 5
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: ST_TO_ADDR
51319: GO 51992
51321: LD_INT 10
51323: DOUBLE
51324: EQUAL
51325: IFTRUE 51329
51327: GO 51347
51329: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
51330: LD_ADDR_VAR 0 3
51334: PUSH
51335: LD_INT 4
51337: PUSH
51338: LD_INT 5
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: ST_TO_ADDR
51345: GO 51992
51347: LD_INT 22
51349: DOUBLE
51350: EQUAL
51351: IFTRUE 51355
51353: GO 51381
51355: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
51356: LD_ADDR_VAR 0 3
51360: PUSH
51361: LD_INT 11
51363: PUSH
51364: LD_INT 12
51366: PUSH
51367: LD_INT 13
51369: PUSH
51370: LD_INT 14
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: ST_TO_ADDR
51379: GO 51992
51381: LD_INT 23
51383: DOUBLE
51384: EQUAL
51385: IFTRUE 51389
51387: GO 51415
51389: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
51390: LD_ADDR_VAR 0 3
51394: PUSH
51395: LD_INT 11
51397: PUSH
51398: LD_INT 12
51400: PUSH
51401: LD_INT 13
51403: PUSH
51404: LD_INT 14
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: ST_TO_ADDR
51413: GO 51992
51415: LD_INT 24
51417: DOUBLE
51418: EQUAL
51419: IFTRUE 51423
51421: GO 51449
51423: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
51424: LD_ADDR_VAR 0 3
51428: PUSH
51429: LD_INT 11
51431: PUSH
51432: LD_INT 12
51434: PUSH
51435: LD_INT 13
51437: PUSH
51438: LD_INT 14
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: ST_TO_ADDR
51447: GO 51992
51449: LD_INT 30
51451: DOUBLE
51452: EQUAL
51453: IFTRUE 51457
51455: GO 51483
51457: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
51458: LD_ADDR_VAR 0 3
51462: PUSH
51463: LD_INT 11
51465: PUSH
51466: LD_INT 12
51468: PUSH
51469: LD_INT 13
51471: PUSH
51472: LD_INT 14
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: ST_TO_ADDR
51481: GO 51992
51483: LD_INT 25
51485: DOUBLE
51486: EQUAL
51487: IFTRUE 51491
51489: GO 51509
51491: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
51492: LD_ADDR_VAR 0 3
51496: PUSH
51497: LD_INT 13
51499: PUSH
51500: LD_INT 14
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: ST_TO_ADDR
51507: GO 51992
51509: LD_INT 27
51511: DOUBLE
51512: EQUAL
51513: IFTRUE 51517
51515: GO 51535
51517: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
51518: LD_ADDR_VAR 0 3
51522: PUSH
51523: LD_INT 13
51525: PUSH
51526: LD_INT 14
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: ST_TO_ADDR
51533: GO 51992
51535: LD_EXP 74
51539: DOUBLE
51540: EQUAL
51541: IFTRUE 51545
51543: GO 51571
51545: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
51546: LD_ADDR_VAR 0 3
51550: PUSH
51551: LD_INT 11
51553: PUSH
51554: LD_INT 12
51556: PUSH
51557: LD_INT 13
51559: PUSH
51560: LD_INT 14
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: ST_TO_ADDR
51569: GO 51992
51571: LD_INT 28
51573: DOUBLE
51574: EQUAL
51575: IFTRUE 51579
51577: GO 51597
51579: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
51580: LD_ADDR_VAR 0 3
51584: PUSH
51585: LD_INT 13
51587: PUSH
51588: LD_INT 14
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: ST_TO_ADDR
51595: GO 51992
51597: LD_INT 29
51599: DOUBLE
51600: EQUAL
51601: IFTRUE 51605
51603: GO 51623
51605: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
51606: LD_ADDR_VAR 0 3
51610: PUSH
51611: LD_INT 13
51613: PUSH
51614: LD_INT 14
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: ST_TO_ADDR
51621: GO 51992
51623: LD_INT 31
51625: DOUBLE
51626: EQUAL
51627: IFTRUE 51631
51629: GO 51649
51631: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
51632: LD_ADDR_VAR 0 3
51636: PUSH
51637: LD_INT 13
51639: PUSH
51640: LD_INT 14
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: ST_TO_ADDR
51647: GO 51992
51649: LD_INT 26
51651: DOUBLE
51652: EQUAL
51653: IFTRUE 51657
51655: GO 51675
51657: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
51658: LD_ADDR_VAR 0 3
51662: PUSH
51663: LD_INT 13
51665: PUSH
51666: LD_INT 14
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: ST_TO_ADDR
51673: GO 51992
51675: LD_INT 42
51677: DOUBLE
51678: EQUAL
51679: IFTRUE 51683
51681: GO 51709
51683: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
51684: LD_ADDR_VAR 0 3
51688: PUSH
51689: LD_INT 21
51691: PUSH
51692: LD_INT 22
51694: PUSH
51695: LD_INT 23
51697: PUSH
51698: LD_INT 24
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: ST_TO_ADDR
51707: GO 51992
51709: LD_INT 43
51711: DOUBLE
51712: EQUAL
51713: IFTRUE 51717
51715: GO 51743
51717: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
51718: LD_ADDR_VAR 0 3
51722: PUSH
51723: LD_INT 21
51725: PUSH
51726: LD_INT 22
51728: PUSH
51729: LD_INT 23
51731: PUSH
51732: LD_INT 24
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: ST_TO_ADDR
51741: GO 51992
51743: LD_INT 44
51745: DOUBLE
51746: EQUAL
51747: IFTRUE 51751
51749: GO 51777
51751: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
51752: LD_ADDR_VAR 0 3
51756: PUSH
51757: LD_INT 21
51759: PUSH
51760: LD_INT 22
51762: PUSH
51763: LD_INT 23
51765: PUSH
51766: LD_INT 24
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: ST_TO_ADDR
51775: GO 51992
51777: LD_INT 45
51779: DOUBLE
51780: EQUAL
51781: IFTRUE 51785
51783: GO 51811
51785: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
51786: LD_ADDR_VAR 0 3
51790: PUSH
51791: LD_INT 21
51793: PUSH
51794: LD_INT 22
51796: PUSH
51797: LD_INT 23
51799: PUSH
51800: LD_INT 24
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: ST_TO_ADDR
51809: GO 51992
51811: LD_INT 49
51813: DOUBLE
51814: EQUAL
51815: IFTRUE 51819
51817: GO 51845
51819: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
51820: LD_ADDR_VAR 0 3
51824: PUSH
51825: LD_INT 21
51827: PUSH
51828: LD_INT 22
51830: PUSH
51831: LD_INT 23
51833: PUSH
51834: LD_INT 24
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: ST_TO_ADDR
51843: GO 51992
51845: LD_INT 51
51847: DOUBLE
51848: EQUAL
51849: IFTRUE 51853
51851: GO 51879
51853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
51854: LD_ADDR_VAR 0 3
51858: PUSH
51859: LD_INT 21
51861: PUSH
51862: LD_INT 22
51864: PUSH
51865: LD_INT 23
51867: PUSH
51868: LD_INT 24
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
51877: GO 51992
51879: LD_INT 52
51881: DOUBLE
51882: EQUAL
51883: IFTRUE 51887
51885: GO 51913
51887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
51888: LD_ADDR_VAR 0 3
51892: PUSH
51893: LD_INT 21
51895: PUSH
51896: LD_INT 22
51898: PUSH
51899: LD_INT 23
51901: PUSH
51902: LD_INT 24
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: ST_TO_ADDR
51911: GO 51992
51913: LD_INT 53
51915: DOUBLE
51916: EQUAL
51917: IFTRUE 51921
51919: GO 51939
51921: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
51922: LD_ADDR_VAR 0 3
51926: PUSH
51927: LD_INT 23
51929: PUSH
51930: LD_INT 24
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: ST_TO_ADDR
51937: GO 51992
51939: LD_INT 46
51941: DOUBLE
51942: EQUAL
51943: IFTRUE 51947
51945: GO 51965
51947: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
51948: LD_ADDR_VAR 0 3
51952: PUSH
51953: LD_INT 23
51955: PUSH
51956: LD_INT 24
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: ST_TO_ADDR
51963: GO 51992
51965: LD_INT 47
51967: DOUBLE
51968: EQUAL
51969: IFTRUE 51973
51971: GO 51991
51973: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
51974: LD_ADDR_VAR 0 3
51978: PUSH
51979: LD_INT 23
51981: PUSH
51982: LD_INT 24
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: ST_TO_ADDR
51989: GO 51992
51991: POP
// result := ( chassis in result ) ;
51992: LD_ADDR_VAR 0 3
51996: PUSH
51997: LD_VAR 0 1
52001: PUSH
52002: LD_VAR 0 3
52006: IN
52007: ST_TO_ADDR
// end ;
52008: LD_VAR 0 3
52012: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
52013: LD_INT 0
52015: PPUSH
52016: PPUSH
52017: PPUSH
52018: PPUSH
52019: PPUSH
52020: PPUSH
52021: PPUSH
// result := array ;
52022: LD_ADDR_VAR 0 5
52026: PUSH
52027: LD_VAR 0 1
52031: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
52032: LD_VAR 0 1
52036: NOT
52037: PUSH
52038: LD_VAR 0 2
52042: NOT
52043: OR
52044: PUSH
52045: LD_VAR 0 3
52049: NOT
52050: OR
52051: PUSH
52052: LD_VAR 0 2
52056: PUSH
52057: LD_VAR 0 1
52061: GREATER
52062: OR
52063: PUSH
52064: LD_VAR 0 3
52068: PUSH
52069: LD_VAR 0 1
52073: GREATER
52074: OR
52075: IFFALSE 52079
// exit ;
52077: GO 52375
// if direction then
52079: LD_VAR 0 4
52083: IFFALSE 52147
// begin d := 1 ;
52085: LD_ADDR_VAR 0 9
52089: PUSH
52090: LD_INT 1
52092: ST_TO_ADDR
// if i_from > i_to then
52093: LD_VAR 0 2
52097: PUSH
52098: LD_VAR 0 3
52102: GREATER
52103: IFFALSE 52129
// length := ( array - i_from ) + i_to else
52105: LD_ADDR_VAR 0 11
52109: PUSH
52110: LD_VAR 0 1
52114: PUSH
52115: LD_VAR 0 2
52119: MINUS
52120: PUSH
52121: LD_VAR 0 3
52125: PLUS
52126: ST_TO_ADDR
52127: GO 52145
// length := i_to - i_from ;
52129: LD_ADDR_VAR 0 11
52133: PUSH
52134: LD_VAR 0 3
52138: PUSH
52139: LD_VAR 0 2
52143: MINUS
52144: ST_TO_ADDR
// end else
52145: GO 52208
// begin d := - 1 ;
52147: LD_ADDR_VAR 0 9
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: ST_TO_ADDR
// if i_from > i_to then
52156: LD_VAR 0 2
52160: PUSH
52161: LD_VAR 0 3
52165: GREATER
52166: IFFALSE 52186
// length := i_from - i_to else
52168: LD_ADDR_VAR 0 11
52172: PUSH
52173: LD_VAR 0 2
52177: PUSH
52178: LD_VAR 0 3
52182: MINUS
52183: ST_TO_ADDR
52184: GO 52208
// length := ( array - i_to ) + i_from ;
52186: LD_ADDR_VAR 0 11
52190: PUSH
52191: LD_VAR 0 1
52195: PUSH
52196: LD_VAR 0 3
52200: MINUS
52201: PUSH
52202: LD_VAR 0 2
52206: PLUS
52207: ST_TO_ADDR
// end ; if not length then
52208: LD_VAR 0 11
52212: NOT
52213: IFFALSE 52217
// exit ;
52215: GO 52375
// tmp := array ;
52217: LD_ADDR_VAR 0 10
52221: PUSH
52222: LD_VAR 0 1
52226: ST_TO_ADDR
// for i = 1 to length do
52227: LD_ADDR_VAR 0 6
52231: PUSH
52232: DOUBLE
52233: LD_INT 1
52235: DEC
52236: ST_TO_ADDR
52237: LD_VAR 0 11
52241: PUSH
52242: FOR_TO
52243: IFFALSE 52363
// begin for j = 1 to array do
52245: LD_ADDR_VAR 0 7
52249: PUSH
52250: DOUBLE
52251: LD_INT 1
52253: DEC
52254: ST_TO_ADDR
52255: LD_VAR 0 1
52259: PUSH
52260: FOR_TO
52261: IFFALSE 52349
// begin k := j + d ;
52263: LD_ADDR_VAR 0 8
52267: PUSH
52268: LD_VAR 0 7
52272: PUSH
52273: LD_VAR 0 9
52277: PLUS
52278: ST_TO_ADDR
// if k > array then
52279: LD_VAR 0 8
52283: PUSH
52284: LD_VAR 0 1
52288: GREATER
52289: IFFALSE 52299
// k := 1 ;
52291: LD_ADDR_VAR 0 8
52295: PUSH
52296: LD_INT 1
52298: ST_TO_ADDR
// if not k then
52299: LD_VAR 0 8
52303: NOT
52304: IFFALSE 52316
// k := array ;
52306: LD_ADDR_VAR 0 8
52310: PUSH
52311: LD_VAR 0 1
52315: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
52316: LD_ADDR_VAR 0 10
52320: PUSH
52321: LD_VAR 0 10
52325: PPUSH
52326: LD_VAR 0 8
52330: PPUSH
52331: LD_VAR 0 1
52335: PUSH
52336: LD_VAR 0 7
52340: ARRAY
52341: PPUSH
52342: CALL_OW 1
52346: ST_TO_ADDR
// end ;
52347: GO 52260
52349: POP
52350: POP
// array := tmp ;
52351: LD_ADDR_VAR 0 1
52355: PUSH
52356: LD_VAR 0 10
52360: ST_TO_ADDR
// end ;
52361: GO 52242
52363: POP
52364: POP
// result := array ;
52365: LD_ADDR_VAR 0 5
52369: PUSH
52370: LD_VAR 0 1
52374: ST_TO_ADDR
// end ;
52375: LD_VAR 0 5
52379: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
52380: LD_INT 0
52382: PPUSH
52383: PPUSH
// result := 0 ;
52384: LD_ADDR_VAR 0 3
52388: PUSH
52389: LD_INT 0
52391: ST_TO_ADDR
// if not array or not value in array then
52392: LD_VAR 0 1
52396: NOT
52397: PUSH
52398: LD_VAR 0 2
52402: PUSH
52403: LD_VAR 0 1
52407: IN
52408: NOT
52409: OR
52410: IFFALSE 52414
// exit ;
52412: GO 52468
// for i = 1 to array do
52414: LD_ADDR_VAR 0 4
52418: PUSH
52419: DOUBLE
52420: LD_INT 1
52422: DEC
52423: ST_TO_ADDR
52424: LD_VAR 0 1
52428: PUSH
52429: FOR_TO
52430: IFFALSE 52466
// if value = array [ i ] then
52432: LD_VAR 0 2
52436: PUSH
52437: LD_VAR 0 1
52441: PUSH
52442: LD_VAR 0 4
52446: ARRAY
52447: EQUAL
52448: IFFALSE 52464
// begin result := i ;
52450: LD_ADDR_VAR 0 3
52454: PUSH
52455: LD_VAR 0 4
52459: ST_TO_ADDR
// exit ;
52460: POP
52461: POP
52462: GO 52468
// end ;
52464: GO 52429
52466: POP
52467: POP
// end ;
52468: LD_VAR 0 3
52472: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
52473: LD_INT 0
52475: PPUSH
// vc_chassis := chassis ;
52476: LD_ADDR_OWVAR 37
52480: PUSH
52481: LD_VAR 0 1
52485: ST_TO_ADDR
// vc_engine := engine ;
52486: LD_ADDR_OWVAR 39
52490: PUSH
52491: LD_VAR 0 2
52495: ST_TO_ADDR
// vc_control := control ;
52496: LD_ADDR_OWVAR 38
52500: PUSH
52501: LD_VAR 0 3
52505: ST_TO_ADDR
// vc_weapon := weapon ;
52506: LD_ADDR_OWVAR 40
52510: PUSH
52511: LD_VAR 0 4
52515: ST_TO_ADDR
// vc_fuel_battery := fuel ;
52516: LD_ADDR_OWVAR 41
52520: PUSH
52521: LD_VAR 0 5
52525: ST_TO_ADDR
// end ;
52526: LD_VAR 0 6
52530: RET
// export function WantPlant ( unit ) ; var task ; begin
52531: LD_INT 0
52533: PPUSH
52534: PPUSH
// result := false ;
52535: LD_ADDR_VAR 0 2
52539: PUSH
52540: LD_INT 0
52542: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
52543: LD_ADDR_VAR 0 3
52547: PUSH
52548: LD_VAR 0 1
52552: PPUSH
52553: CALL_OW 437
52557: ST_TO_ADDR
// if task then
52558: LD_VAR 0 3
52562: IFFALSE 52590
// if task [ 1 ] [ 1 ] = p then
52564: LD_VAR 0 3
52568: PUSH
52569: LD_INT 1
52571: ARRAY
52572: PUSH
52573: LD_INT 1
52575: ARRAY
52576: PUSH
52577: LD_STRING p
52579: EQUAL
52580: IFFALSE 52590
// result := true ;
52582: LD_ADDR_VAR 0 2
52586: PUSH
52587: LD_INT 1
52589: ST_TO_ADDR
// end ;
52590: LD_VAR 0 2
52594: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
52595: LD_INT 0
52597: PPUSH
52598: PPUSH
52599: PPUSH
52600: PPUSH
// if pos < 1 then
52601: LD_VAR 0 2
52605: PUSH
52606: LD_INT 1
52608: LESS
52609: IFFALSE 52613
// exit ;
52611: GO 52916
// if pos = 1 then
52613: LD_VAR 0 2
52617: PUSH
52618: LD_INT 1
52620: EQUAL
52621: IFFALSE 52654
// result := Replace ( arr , pos [ 1 ] , value ) else
52623: LD_ADDR_VAR 0 4
52627: PUSH
52628: LD_VAR 0 1
52632: PPUSH
52633: LD_VAR 0 2
52637: PUSH
52638: LD_INT 1
52640: ARRAY
52641: PPUSH
52642: LD_VAR 0 3
52646: PPUSH
52647: CALL_OW 1
52651: ST_TO_ADDR
52652: GO 52916
// begin tmp := arr ;
52654: LD_ADDR_VAR 0 6
52658: PUSH
52659: LD_VAR 0 1
52663: ST_TO_ADDR
// s_arr := [ tmp ] ;
52664: LD_ADDR_VAR 0 7
52668: PUSH
52669: LD_VAR 0 6
52673: PUSH
52674: EMPTY
52675: LIST
52676: ST_TO_ADDR
// for i = 1 to pos - 1 do
52677: LD_ADDR_VAR 0 5
52681: PUSH
52682: DOUBLE
52683: LD_INT 1
52685: DEC
52686: ST_TO_ADDR
52687: LD_VAR 0 2
52691: PUSH
52692: LD_INT 1
52694: MINUS
52695: PUSH
52696: FOR_TO
52697: IFFALSE 52742
// begin tmp := tmp [ pos [ i ] ] ;
52699: LD_ADDR_VAR 0 6
52703: PUSH
52704: LD_VAR 0 6
52708: PUSH
52709: LD_VAR 0 2
52713: PUSH
52714: LD_VAR 0 5
52718: ARRAY
52719: ARRAY
52720: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
52721: LD_ADDR_VAR 0 7
52725: PUSH
52726: LD_VAR 0 7
52730: PUSH
52731: LD_VAR 0 6
52735: PUSH
52736: EMPTY
52737: LIST
52738: ADD
52739: ST_TO_ADDR
// end ;
52740: GO 52696
52742: POP
52743: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
52744: LD_ADDR_VAR 0 6
52748: PUSH
52749: LD_VAR 0 6
52753: PPUSH
52754: LD_VAR 0 2
52758: PUSH
52759: LD_VAR 0 2
52763: ARRAY
52764: PPUSH
52765: LD_VAR 0 3
52769: PPUSH
52770: CALL_OW 1
52774: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
52775: LD_ADDR_VAR 0 7
52779: PUSH
52780: LD_VAR 0 7
52784: PPUSH
52785: LD_VAR 0 7
52789: PPUSH
52790: LD_VAR 0 6
52794: PPUSH
52795: CALL_OW 1
52799: ST_TO_ADDR
// for i = s_arr downto 2 do
52800: LD_ADDR_VAR 0 5
52804: PUSH
52805: DOUBLE
52806: LD_VAR 0 7
52810: INC
52811: ST_TO_ADDR
52812: LD_INT 2
52814: PUSH
52815: FOR_DOWNTO
52816: IFFALSE 52900
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
52818: LD_ADDR_VAR 0 6
52822: PUSH
52823: LD_VAR 0 7
52827: PUSH
52828: LD_VAR 0 5
52832: PUSH
52833: LD_INT 1
52835: MINUS
52836: ARRAY
52837: PPUSH
52838: LD_VAR 0 2
52842: PUSH
52843: LD_VAR 0 5
52847: PUSH
52848: LD_INT 1
52850: MINUS
52851: ARRAY
52852: PPUSH
52853: LD_VAR 0 7
52857: PUSH
52858: LD_VAR 0 5
52862: ARRAY
52863: PPUSH
52864: CALL_OW 1
52868: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
52869: LD_ADDR_VAR 0 7
52873: PUSH
52874: LD_VAR 0 7
52878: PPUSH
52879: LD_VAR 0 5
52883: PUSH
52884: LD_INT 1
52886: MINUS
52887: PPUSH
52888: LD_VAR 0 6
52892: PPUSH
52893: CALL_OW 1
52897: ST_TO_ADDR
// end ;
52898: GO 52815
52900: POP
52901: POP
// result := s_arr [ 1 ] ;
52902: LD_ADDR_VAR 0 4
52906: PUSH
52907: LD_VAR 0 7
52911: PUSH
52912: LD_INT 1
52914: ARRAY
52915: ST_TO_ADDR
// end ; end ;
52916: LD_VAR 0 4
52920: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
52921: LD_INT 0
52923: PPUSH
52924: PPUSH
// if not list then
52925: LD_VAR 0 1
52929: NOT
52930: IFFALSE 52934
// exit ;
52932: GO 53025
// i := list [ pos1 ] ;
52934: LD_ADDR_VAR 0 5
52938: PUSH
52939: LD_VAR 0 1
52943: PUSH
52944: LD_VAR 0 2
52948: ARRAY
52949: ST_TO_ADDR
// if not i then
52950: LD_VAR 0 5
52954: NOT
52955: IFFALSE 52959
// exit ;
52957: GO 53025
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
52959: LD_ADDR_VAR 0 1
52963: PUSH
52964: LD_VAR 0 1
52968: PPUSH
52969: LD_VAR 0 2
52973: PPUSH
52974: LD_VAR 0 1
52978: PUSH
52979: LD_VAR 0 3
52983: ARRAY
52984: PPUSH
52985: CALL_OW 1
52989: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
52990: LD_ADDR_VAR 0 1
52994: PUSH
52995: LD_VAR 0 1
52999: PPUSH
53000: LD_VAR 0 3
53004: PPUSH
53005: LD_VAR 0 5
53009: PPUSH
53010: CALL_OW 1
53014: ST_TO_ADDR
// result := list ;
53015: LD_ADDR_VAR 0 4
53019: PUSH
53020: LD_VAR 0 1
53024: ST_TO_ADDR
// end ;
53025: LD_VAR 0 4
53029: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
53030: LD_INT 0
53032: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
53033: LD_ADDR_VAR 0 5
53037: PUSH
53038: LD_VAR 0 1
53042: PPUSH
53043: CALL_OW 250
53047: PPUSH
53048: LD_VAR 0 1
53052: PPUSH
53053: CALL_OW 251
53057: PPUSH
53058: LD_VAR 0 2
53062: PPUSH
53063: LD_VAR 0 3
53067: PPUSH
53068: LD_VAR 0 4
53072: PPUSH
53073: CALL 53083 0 5
53077: ST_TO_ADDR
// end ;
53078: LD_VAR 0 5
53082: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
53083: LD_INT 0
53085: PPUSH
53086: PPUSH
53087: PPUSH
53088: PPUSH
// if not list then
53089: LD_VAR 0 3
53093: NOT
53094: IFFALSE 53098
// exit ;
53096: GO 53486
// result := [ ] ;
53098: LD_ADDR_VAR 0 6
53102: PUSH
53103: EMPTY
53104: ST_TO_ADDR
// for i in list do
53105: LD_ADDR_VAR 0 7
53109: PUSH
53110: LD_VAR 0 3
53114: PUSH
53115: FOR_IN
53116: IFFALSE 53318
// begin tmp := GetDistUnitXY ( i , x , y ) ;
53118: LD_ADDR_VAR 0 9
53122: PUSH
53123: LD_VAR 0 7
53127: PPUSH
53128: LD_VAR 0 1
53132: PPUSH
53133: LD_VAR 0 2
53137: PPUSH
53138: CALL_OW 297
53142: ST_TO_ADDR
// if not result then
53143: LD_VAR 0 6
53147: NOT
53148: IFFALSE 53174
// result := [ [ i , tmp ] ] else
53150: LD_ADDR_VAR 0 6
53154: PUSH
53155: LD_VAR 0 7
53159: PUSH
53160: LD_VAR 0 9
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: EMPTY
53170: LIST
53171: ST_TO_ADDR
53172: GO 53316
// begin if result [ result ] [ 2 ] < tmp then
53174: LD_VAR 0 6
53178: PUSH
53179: LD_VAR 0 6
53183: ARRAY
53184: PUSH
53185: LD_INT 2
53187: ARRAY
53188: PUSH
53189: LD_VAR 0 9
53193: LESS
53194: IFFALSE 53236
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
53196: LD_ADDR_VAR 0 6
53200: PUSH
53201: LD_VAR 0 6
53205: PPUSH
53206: LD_VAR 0 6
53210: PUSH
53211: LD_INT 1
53213: PLUS
53214: PPUSH
53215: LD_VAR 0 7
53219: PUSH
53220: LD_VAR 0 9
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PPUSH
53229: CALL_OW 2
53233: ST_TO_ADDR
53234: GO 53316
// for j = 1 to result do
53236: LD_ADDR_VAR 0 8
53240: PUSH
53241: DOUBLE
53242: LD_INT 1
53244: DEC
53245: ST_TO_ADDR
53246: LD_VAR 0 6
53250: PUSH
53251: FOR_TO
53252: IFFALSE 53314
// begin if tmp < result [ j ] [ 2 ] then
53254: LD_VAR 0 9
53258: PUSH
53259: LD_VAR 0 6
53263: PUSH
53264: LD_VAR 0 8
53268: ARRAY
53269: PUSH
53270: LD_INT 2
53272: ARRAY
53273: LESS
53274: IFFALSE 53312
// begin result := Insert ( result , j , [ i , tmp ] ) ;
53276: LD_ADDR_VAR 0 6
53280: PUSH
53281: LD_VAR 0 6
53285: PPUSH
53286: LD_VAR 0 8
53290: PPUSH
53291: LD_VAR 0 7
53295: PUSH
53296: LD_VAR 0 9
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PPUSH
53305: CALL_OW 2
53309: ST_TO_ADDR
// break ;
53310: GO 53314
// end ; end ;
53312: GO 53251
53314: POP
53315: POP
// end ; end ;
53316: GO 53115
53318: POP
53319: POP
// if result and not asc then
53320: LD_VAR 0 6
53324: PUSH
53325: LD_VAR 0 4
53329: NOT
53330: AND
53331: IFFALSE 53406
// begin tmp := result ;
53333: LD_ADDR_VAR 0 9
53337: PUSH
53338: LD_VAR 0 6
53342: ST_TO_ADDR
// for i = tmp downto 1 do
53343: LD_ADDR_VAR 0 7
53347: PUSH
53348: DOUBLE
53349: LD_VAR 0 9
53353: INC
53354: ST_TO_ADDR
53355: LD_INT 1
53357: PUSH
53358: FOR_DOWNTO
53359: IFFALSE 53404
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
53361: LD_ADDR_VAR 0 6
53365: PUSH
53366: LD_VAR 0 6
53370: PPUSH
53371: LD_VAR 0 9
53375: PUSH
53376: LD_VAR 0 7
53380: MINUS
53381: PUSH
53382: LD_INT 1
53384: PLUS
53385: PPUSH
53386: LD_VAR 0 9
53390: PUSH
53391: LD_VAR 0 7
53395: ARRAY
53396: PPUSH
53397: CALL_OW 1
53401: ST_TO_ADDR
53402: GO 53358
53404: POP
53405: POP
// end ; tmp := [ ] ;
53406: LD_ADDR_VAR 0 9
53410: PUSH
53411: EMPTY
53412: ST_TO_ADDR
// if mode then
53413: LD_VAR 0 5
53417: IFFALSE 53486
// begin for i = 1 to result do
53419: LD_ADDR_VAR 0 7
53423: PUSH
53424: DOUBLE
53425: LD_INT 1
53427: DEC
53428: ST_TO_ADDR
53429: LD_VAR 0 6
53433: PUSH
53434: FOR_TO
53435: IFFALSE 53474
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
53437: LD_ADDR_VAR 0 9
53441: PUSH
53442: LD_VAR 0 9
53446: PPUSH
53447: LD_VAR 0 7
53451: PPUSH
53452: LD_VAR 0 6
53456: PUSH
53457: LD_VAR 0 7
53461: ARRAY
53462: PUSH
53463: LD_INT 1
53465: ARRAY
53466: PPUSH
53467: CALL_OW 1
53471: ST_TO_ADDR
53472: GO 53434
53474: POP
53475: POP
// result := tmp ;
53476: LD_ADDR_VAR 0 6
53480: PUSH
53481: LD_VAR 0 9
53485: ST_TO_ADDR
// end ; end ;
53486: LD_VAR 0 6
53490: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
53491: LD_INT 0
53493: PPUSH
53494: PPUSH
53495: PPUSH
53496: PPUSH
53497: PPUSH
53498: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
53499: LD_ADDR_VAR 0 5
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: EMPTY
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: ST_TO_ADDR
// if not x or not y then
53521: LD_VAR 0 2
53525: NOT
53526: PUSH
53527: LD_VAR 0 3
53531: NOT
53532: OR
53533: IFFALSE 53537
// exit ;
53535: GO 55189
// if not range then
53537: LD_VAR 0 4
53541: NOT
53542: IFFALSE 53552
// range := 10 ;
53544: LD_ADDR_VAR 0 4
53548: PUSH
53549: LD_INT 10
53551: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
53552: LD_ADDR_VAR 0 8
53556: PUSH
53557: LD_INT 81
53559: PUSH
53560: LD_VAR 0 1
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 92
53571: PUSH
53572: LD_VAR 0 2
53576: PUSH
53577: LD_VAR 0 3
53581: PUSH
53582: LD_VAR 0 4
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 3
53595: PUSH
53596: LD_INT 21
53598: PUSH
53599: LD_INT 3
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: LIST
53614: PPUSH
53615: CALL_OW 69
53619: ST_TO_ADDR
// if not tmp then
53620: LD_VAR 0 8
53624: NOT
53625: IFFALSE 53629
// exit ;
53627: GO 55189
// for i in tmp do
53629: LD_ADDR_VAR 0 6
53633: PUSH
53634: LD_VAR 0 8
53638: PUSH
53639: FOR_IN
53640: IFFALSE 55164
// begin points := [ 0 , 0 , 0 ] ;
53642: LD_ADDR_VAR 0 9
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: ST_TO_ADDR
// bpoints := 1 ;
53661: LD_ADDR_VAR 0 10
53665: PUSH
53666: LD_INT 1
53668: ST_TO_ADDR
// case GetType ( i ) of unit_human :
53669: LD_VAR 0 6
53673: PPUSH
53674: CALL_OW 247
53678: PUSH
53679: LD_INT 1
53681: DOUBLE
53682: EQUAL
53683: IFTRUE 53687
53685: GO 54265
53687: POP
// begin if GetClass ( i ) = 1 then
53688: LD_VAR 0 6
53692: PPUSH
53693: CALL_OW 257
53697: PUSH
53698: LD_INT 1
53700: EQUAL
53701: IFFALSE 53722
// points := [ 10 , 5 , 3 ] ;
53703: LD_ADDR_VAR 0 9
53707: PUSH
53708: LD_INT 10
53710: PUSH
53711: LD_INT 5
53713: PUSH
53714: LD_INT 3
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: LIST
53721: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
53722: LD_VAR 0 6
53726: PPUSH
53727: CALL_OW 257
53731: PUSH
53732: LD_INT 2
53734: PUSH
53735: LD_INT 3
53737: PUSH
53738: LD_INT 4
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: LIST
53745: IN
53746: IFFALSE 53767
// points := [ 3 , 2 , 1 ] ;
53748: LD_ADDR_VAR 0 9
53752: PUSH
53753: LD_INT 3
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: LIST
53766: ST_TO_ADDR
// if GetClass ( i ) = 5 then
53767: LD_VAR 0 6
53771: PPUSH
53772: CALL_OW 257
53776: PUSH
53777: LD_INT 5
53779: EQUAL
53780: IFFALSE 53801
// points := [ 130 , 5 , 2 ] ;
53782: LD_ADDR_VAR 0 9
53786: PUSH
53787: LD_INT 130
53789: PUSH
53790: LD_INT 5
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: LIST
53800: ST_TO_ADDR
// if GetClass ( i ) = 8 then
53801: LD_VAR 0 6
53805: PPUSH
53806: CALL_OW 257
53810: PUSH
53811: LD_INT 8
53813: EQUAL
53814: IFFALSE 53835
// points := [ 35 , 35 , 30 ] ;
53816: LD_ADDR_VAR 0 9
53820: PUSH
53821: LD_INT 35
53823: PUSH
53824: LD_INT 35
53826: PUSH
53827: LD_INT 30
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: LIST
53834: ST_TO_ADDR
// if GetClass ( i ) = 9 then
53835: LD_VAR 0 6
53839: PPUSH
53840: CALL_OW 257
53844: PUSH
53845: LD_INT 9
53847: EQUAL
53848: IFFALSE 53869
// points := [ 20 , 55 , 40 ] ;
53850: LD_ADDR_VAR 0 9
53854: PUSH
53855: LD_INT 20
53857: PUSH
53858: LD_INT 55
53860: PUSH
53861: LD_INT 40
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: LIST
53868: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
53869: LD_VAR 0 6
53873: PPUSH
53874: CALL_OW 257
53878: PUSH
53879: LD_INT 12
53881: PUSH
53882: LD_INT 16
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: IN
53889: IFFALSE 53910
// points := [ 5 , 3 , 2 ] ;
53891: LD_ADDR_VAR 0 9
53895: PUSH
53896: LD_INT 5
53898: PUSH
53899: LD_INT 3
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: LIST
53909: ST_TO_ADDR
// if GetClass ( i ) = 17 then
53910: LD_VAR 0 6
53914: PPUSH
53915: CALL_OW 257
53919: PUSH
53920: LD_INT 17
53922: EQUAL
53923: IFFALSE 53944
// points := [ 100 , 50 , 75 ] ;
53925: LD_ADDR_VAR 0 9
53929: PUSH
53930: LD_INT 100
53932: PUSH
53933: LD_INT 50
53935: PUSH
53936: LD_INT 75
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: LIST
53943: ST_TO_ADDR
// if GetClass ( i ) = 15 then
53944: LD_VAR 0 6
53948: PPUSH
53949: CALL_OW 257
53953: PUSH
53954: LD_INT 15
53956: EQUAL
53957: IFFALSE 53978
// points := [ 10 , 5 , 3 ] ;
53959: LD_ADDR_VAR 0 9
53963: PUSH
53964: LD_INT 10
53966: PUSH
53967: LD_INT 5
53969: PUSH
53970: LD_INT 3
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: LIST
53977: ST_TO_ADDR
// if GetClass ( i ) = 14 then
53978: LD_VAR 0 6
53982: PPUSH
53983: CALL_OW 257
53987: PUSH
53988: LD_INT 14
53990: EQUAL
53991: IFFALSE 54012
// points := [ 10 , 0 , 0 ] ;
53993: LD_ADDR_VAR 0 9
53997: PUSH
53998: LD_INT 10
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: LIST
54011: ST_TO_ADDR
// if GetClass ( i ) = 11 then
54012: LD_VAR 0 6
54016: PPUSH
54017: CALL_OW 257
54021: PUSH
54022: LD_INT 11
54024: EQUAL
54025: IFFALSE 54046
// points := [ 30 , 10 , 5 ] ;
54027: LD_ADDR_VAR 0 9
54031: PUSH
54032: LD_INT 30
54034: PUSH
54035: LD_INT 10
54037: PUSH
54038: LD_INT 5
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
54046: LD_VAR 0 1
54050: PPUSH
54051: LD_INT 5
54053: PPUSH
54054: CALL_OW 321
54058: PUSH
54059: LD_INT 2
54061: EQUAL
54062: IFFALSE 54079
// bpoints := bpoints * 1.8 ;
54064: LD_ADDR_VAR 0 10
54068: PUSH
54069: LD_VAR 0 10
54073: PUSH
54074: LD_REAL  1.80000000000000E+0000
54077: MUL
54078: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
54079: LD_VAR 0 6
54083: PPUSH
54084: CALL_OW 257
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: LD_INT 3
54097: PUSH
54098: LD_INT 4
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: IN
54107: PUSH
54108: LD_VAR 0 1
54112: PPUSH
54113: LD_INT 51
54115: PPUSH
54116: CALL_OW 321
54120: PUSH
54121: LD_INT 2
54123: EQUAL
54124: AND
54125: IFFALSE 54142
// bpoints := bpoints * 1.2 ;
54127: LD_ADDR_VAR 0 10
54131: PUSH
54132: LD_VAR 0 10
54136: PUSH
54137: LD_REAL  1.20000000000000E+0000
54140: MUL
54141: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
54142: LD_VAR 0 6
54146: PPUSH
54147: CALL_OW 257
54151: PUSH
54152: LD_INT 5
54154: PUSH
54155: LD_INT 7
54157: PUSH
54158: LD_INT 9
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: LIST
54165: IN
54166: PUSH
54167: LD_VAR 0 1
54171: PPUSH
54172: LD_INT 52
54174: PPUSH
54175: CALL_OW 321
54179: PUSH
54180: LD_INT 2
54182: EQUAL
54183: AND
54184: IFFALSE 54201
// bpoints := bpoints * 1.5 ;
54186: LD_ADDR_VAR 0 10
54190: PUSH
54191: LD_VAR 0 10
54195: PUSH
54196: LD_REAL  1.50000000000000E+0000
54199: MUL
54200: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
54201: LD_VAR 0 1
54205: PPUSH
54206: LD_INT 66
54208: PPUSH
54209: CALL_OW 321
54213: PUSH
54214: LD_INT 2
54216: EQUAL
54217: IFFALSE 54234
// bpoints := bpoints * 1.1 ;
54219: LD_ADDR_VAR 0 10
54223: PUSH
54224: LD_VAR 0 10
54228: PUSH
54229: LD_REAL  1.10000000000000E+0000
54232: MUL
54233: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
54234: LD_ADDR_VAR 0 10
54238: PUSH
54239: LD_VAR 0 10
54243: PUSH
54244: LD_VAR 0 6
54248: PPUSH
54249: LD_INT 1
54251: PPUSH
54252: CALL_OW 259
54256: PUSH
54257: LD_REAL  1.15000000000000E+0000
54260: MUL
54261: MUL
54262: ST_TO_ADDR
// end ; unit_vehicle :
54263: GO 55093
54265: LD_INT 2
54267: DOUBLE
54268: EQUAL
54269: IFTRUE 54273
54271: GO 55081
54273: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
54274: LD_VAR 0 6
54278: PPUSH
54279: CALL_OW 264
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: LD_INT 42
54289: PUSH
54290: LD_INT 24
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: LIST
54297: IN
54298: IFFALSE 54319
// points := [ 25 , 5 , 3 ] ;
54300: LD_ADDR_VAR 0 9
54304: PUSH
54305: LD_INT 25
54307: PUSH
54308: LD_INT 5
54310: PUSH
54311: LD_INT 3
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: LIST
54318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
54319: LD_VAR 0 6
54323: PPUSH
54324: CALL_OW 264
54328: PUSH
54329: LD_INT 4
54331: PUSH
54332: LD_INT 43
54334: PUSH
54335: LD_INT 25
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: LIST
54342: IN
54343: IFFALSE 54364
// points := [ 40 , 15 , 5 ] ;
54345: LD_ADDR_VAR 0 9
54349: PUSH
54350: LD_INT 40
54352: PUSH
54353: LD_INT 15
54355: PUSH
54356: LD_INT 5
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: LIST
54363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
54364: LD_VAR 0 6
54368: PPUSH
54369: CALL_OW 264
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: LD_INT 23
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: IN
54384: IFFALSE 54405
// points := [ 7 , 25 , 8 ] ;
54386: LD_ADDR_VAR 0 9
54390: PUSH
54391: LD_INT 7
54393: PUSH
54394: LD_INT 25
54396: PUSH
54397: LD_INT 8
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: LIST
54404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
54405: LD_VAR 0 6
54409: PPUSH
54410: CALL_OW 264
54414: PUSH
54415: LD_INT 5
54417: PUSH
54418: LD_INT 27
54420: PUSH
54421: LD_INT 44
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: LIST
54428: IN
54429: IFFALSE 54450
// points := [ 14 , 50 , 16 ] ;
54431: LD_ADDR_VAR 0 9
54435: PUSH
54436: LD_INT 14
54438: PUSH
54439: LD_INT 50
54441: PUSH
54442: LD_INT 16
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: LIST
54449: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
54450: LD_VAR 0 6
54454: PPUSH
54455: CALL_OW 264
54459: PUSH
54460: LD_INT 6
54462: PUSH
54463: LD_INT 46
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: IN
54470: IFFALSE 54491
// points := [ 32 , 120 , 70 ] ;
54472: LD_ADDR_VAR 0 9
54476: PUSH
54477: LD_INT 32
54479: PUSH
54480: LD_INT 120
54482: PUSH
54483: LD_INT 70
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: LIST
54490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
54491: LD_VAR 0 6
54495: PPUSH
54496: CALL_OW 264
54500: PUSH
54501: LD_INT 7
54503: PUSH
54504: LD_INT 28
54506: PUSH
54507: LD_INT 45
54509: PUSH
54510: LD_EXP 74
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: IN
54521: IFFALSE 54542
// points := [ 35 , 20 , 45 ] ;
54523: LD_ADDR_VAR 0 9
54527: PUSH
54528: LD_INT 35
54530: PUSH
54531: LD_INT 20
54533: PUSH
54534: LD_INT 45
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: LIST
54541: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
54542: LD_VAR 0 6
54546: PPUSH
54547: CALL_OW 264
54551: PUSH
54552: LD_INT 47
54554: PUSH
54555: EMPTY
54556: LIST
54557: IN
54558: IFFALSE 54579
// points := [ 67 , 45 , 75 ] ;
54560: LD_ADDR_VAR 0 9
54564: PUSH
54565: LD_INT 67
54567: PUSH
54568: LD_INT 45
54570: PUSH
54571: LD_INT 75
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: LIST
54578: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
54579: LD_VAR 0 6
54583: PPUSH
54584: CALL_OW 264
54588: PUSH
54589: LD_INT 26
54591: PUSH
54592: EMPTY
54593: LIST
54594: IN
54595: IFFALSE 54616
// points := [ 120 , 30 , 80 ] ;
54597: LD_ADDR_VAR 0 9
54601: PUSH
54602: LD_INT 120
54604: PUSH
54605: LD_INT 30
54607: PUSH
54608: LD_INT 80
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: LIST
54615: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
54616: LD_VAR 0 6
54620: PPUSH
54621: CALL_OW 264
54625: PUSH
54626: LD_INT 22
54628: PUSH
54629: EMPTY
54630: LIST
54631: IN
54632: IFFALSE 54653
// points := [ 40 , 1 , 1 ] ;
54634: LD_ADDR_VAR 0 9
54638: PUSH
54639: LD_INT 40
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: LIST
54652: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
54653: LD_VAR 0 6
54657: PPUSH
54658: CALL_OW 264
54662: PUSH
54663: LD_INT 29
54665: PUSH
54666: EMPTY
54667: LIST
54668: IN
54669: IFFALSE 54690
// points := [ 70 , 200 , 400 ] ;
54671: LD_ADDR_VAR 0 9
54675: PUSH
54676: LD_INT 70
54678: PUSH
54679: LD_INT 200
54681: PUSH
54682: LD_INT 400
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: LIST
54689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
54690: LD_VAR 0 6
54694: PPUSH
54695: CALL_OW 264
54699: PUSH
54700: LD_INT 14
54702: PUSH
54703: LD_INT 53
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: IN
54710: IFFALSE 54731
// points := [ 40 , 10 , 20 ] ;
54712: LD_ADDR_VAR 0 9
54716: PUSH
54717: LD_INT 40
54719: PUSH
54720: LD_INT 10
54722: PUSH
54723: LD_INT 20
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: LIST
54730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
54731: LD_VAR 0 6
54735: PPUSH
54736: CALL_OW 264
54740: PUSH
54741: LD_INT 9
54743: PUSH
54744: EMPTY
54745: LIST
54746: IN
54747: IFFALSE 54768
// points := [ 5 , 70 , 20 ] ;
54749: LD_ADDR_VAR 0 9
54753: PUSH
54754: LD_INT 5
54756: PUSH
54757: LD_INT 70
54759: PUSH
54760: LD_INT 20
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: LIST
54767: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
54768: LD_VAR 0 6
54772: PPUSH
54773: CALL_OW 264
54777: PUSH
54778: LD_INT 10
54780: PUSH
54781: EMPTY
54782: LIST
54783: IN
54784: IFFALSE 54805
// points := [ 35 , 110 , 70 ] ;
54786: LD_ADDR_VAR 0 9
54790: PUSH
54791: LD_INT 35
54793: PUSH
54794: LD_INT 110
54796: PUSH
54797: LD_INT 70
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: LIST
54804: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
54805: LD_VAR 0 6
54809: PPUSH
54810: CALL_OW 265
54814: PUSH
54815: LD_INT 25
54817: EQUAL
54818: IFFALSE 54839
// points := [ 80 , 65 , 100 ] ;
54820: LD_ADDR_VAR 0 9
54824: PUSH
54825: LD_INT 80
54827: PUSH
54828: LD_INT 65
54830: PUSH
54831: LD_INT 100
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
54839: LD_VAR 0 6
54843: PPUSH
54844: CALL_OW 263
54848: PUSH
54849: LD_INT 1
54851: EQUAL
54852: IFFALSE 54887
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
54854: LD_ADDR_VAR 0 10
54858: PUSH
54859: LD_VAR 0 10
54863: PUSH
54864: LD_VAR 0 6
54868: PPUSH
54869: CALL_OW 311
54873: PPUSH
54874: LD_INT 3
54876: PPUSH
54877: CALL_OW 259
54881: PUSH
54882: LD_INT 4
54884: MUL
54885: MUL
54886: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
54887: LD_VAR 0 6
54891: PPUSH
54892: CALL_OW 263
54896: PUSH
54897: LD_INT 2
54899: EQUAL
54900: IFFALSE 54951
// begin j := IsControledBy ( i ) ;
54902: LD_ADDR_VAR 0 7
54906: PUSH
54907: LD_VAR 0 6
54911: PPUSH
54912: CALL_OW 312
54916: ST_TO_ADDR
// if j then
54917: LD_VAR 0 7
54921: IFFALSE 54951
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
54923: LD_ADDR_VAR 0 10
54927: PUSH
54928: LD_VAR 0 10
54932: PUSH
54933: LD_VAR 0 7
54937: PPUSH
54938: LD_INT 3
54940: PPUSH
54941: CALL_OW 259
54945: PUSH
54946: LD_INT 3
54948: MUL
54949: MUL
54950: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
54951: LD_VAR 0 6
54955: PPUSH
54956: CALL_OW 264
54960: PUSH
54961: LD_INT 5
54963: PUSH
54964: LD_INT 6
54966: PUSH
54967: LD_INT 46
54969: PUSH
54970: LD_INT 44
54972: PUSH
54973: LD_INT 47
54975: PUSH
54976: LD_INT 45
54978: PUSH
54979: LD_INT 28
54981: PUSH
54982: LD_INT 7
54984: PUSH
54985: LD_INT 27
54987: PUSH
54988: LD_INT 29
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: IN
55003: PUSH
55004: LD_VAR 0 1
55008: PPUSH
55009: LD_INT 52
55011: PPUSH
55012: CALL_OW 321
55016: PUSH
55017: LD_INT 2
55019: EQUAL
55020: AND
55021: IFFALSE 55038
// bpoints := bpoints * 1.2 ;
55023: LD_ADDR_VAR 0 10
55027: PUSH
55028: LD_VAR 0 10
55032: PUSH
55033: LD_REAL  1.20000000000000E+0000
55036: MUL
55037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
55038: LD_VAR 0 6
55042: PPUSH
55043: CALL_OW 264
55047: PUSH
55048: LD_INT 6
55050: PUSH
55051: LD_INT 46
55053: PUSH
55054: LD_INT 47
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: LIST
55061: IN
55062: IFFALSE 55079
// bpoints := bpoints * 1.2 ;
55064: LD_ADDR_VAR 0 10
55068: PUSH
55069: LD_VAR 0 10
55073: PUSH
55074: LD_REAL  1.20000000000000E+0000
55077: MUL
55078: ST_TO_ADDR
// end ; unit_building :
55079: GO 55093
55081: LD_INT 3
55083: DOUBLE
55084: EQUAL
55085: IFTRUE 55089
55087: GO 55092
55089: POP
// ; end ;
55090: GO 55093
55092: POP
// for j = 1 to 3 do
55093: LD_ADDR_VAR 0 7
55097: PUSH
55098: DOUBLE
55099: LD_INT 1
55101: DEC
55102: ST_TO_ADDR
55103: LD_INT 3
55105: PUSH
55106: FOR_TO
55107: IFFALSE 55160
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
55109: LD_ADDR_VAR 0 5
55113: PUSH
55114: LD_VAR 0 5
55118: PPUSH
55119: LD_VAR 0 7
55123: PPUSH
55124: LD_VAR 0 5
55128: PUSH
55129: LD_VAR 0 7
55133: ARRAY
55134: PUSH
55135: LD_VAR 0 9
55139: PUSH
55140: LD_VAR 0 7
55144: ARRAY
55145: PUSH
55146: LD_VAR 0 10
55150: MUL
55151: PLUS
55152: PPUSH
55153: CALL_OW 1
55157: ST_TO_ADDR
55158: GO 55106
55160: POP
55161: POP
// end ;
55162: GO 53639
55164: POP
55165: POP
// result := Replace ( result , 4 , tmp ) ;
55166: LD_ADDR_VAR 0 5
55170: PUSH
55171: LD_VAR 0 5
55175: PPUSH
55176: LD_INT 4
55178: PPUSH
55179: LD_VAR 0 8
55183: PPUSH
55184: CALL_OW 1
55188: ST_TO_ADDR
// end ;
55189: LD_VAR 0 5
55193: RET
// export function DangerAtRange ( unit , range ) ; begin
55194: LD_INT 0
55196: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
55197: LD_ADDR_VAR 0 3
55201: PUSH
55202: LD_VAR 0 1
55206: PPUSH
55207: CALL_OW 255
55211: PPUSH
55212: LD_VAR 0 1
55216: PPUSH
55217: CALL_OW 250
55221: PPUSH
55222: LD_VAR 0 1
55226: PPUSH
55227: CALL_OW 251
55231: PPUSH
55232: LD_VAR 0 2
55236: PPUSH
55237: CALL 53491 0 4
55241: ST_TO_ADDR
// end ;
55242: LD_VAR 0 3
55246: RET
// export function DangerInArea ( side , area ) ; begin
55247: LD_INT 0
55249: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
55250: LD_ADDR_VAR 0 3
55254: PUSH
55255: LD_VAR 0 2
55259: PPUSH
55260: LD_INT 81
55262: PUSH
55263: LD_VAR 0 1
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PPUSH
55272: CALL_OW 70
55276: ST_TO_ADDR
// end ;
55277: LD_VAR 0 3
55281: RET
// export function IsExtension ( b ) ; begin
55282: LD_INT 0
55284: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
55285: LD_ADDR_VAR 0 2
55289: PUSH
55290: LD_VAR 0 1
55294: PUSH
55295: LD_INT 23
55297: PUSH
55298: LD_INT 20
55300: PUSH
55301: LD_INT 22
55303: PUSH
55304: LD_INT 17
55306: PUSH
55307: LD_INT 24
55309: PUSH
55310: LD_INT 21
55312: PUSH
55313: LD_INT 19
55315: PUSH
55316: LD_INT 16
55318: PUSH
55319: LD_INT 25
55321: PUSH
55322: LD_INT 18
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: IN
55337: ST_TO_ADDR
// end ;
55338: LD_VAR 0 2
55342: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
55343: LD_INT 0
55345: PPUSH
55346: PPUSH
55347: PPUSH
// result := [ ] ;
55348: LD_ADDR_VAR 0 4
55352: PUSH
55353: EMPTY
55354: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
55355: LD_ADDR_VAR 0 5
55359: PUSH
55360: LD_VAR 0 2
55364: PPUSH
55365: LD_INT 21
55367: PUSH
55368: LD_INT 3
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PPUSH
55375: CALL_OW 70
55379: ST_TO_ADDR
// if not tmp then
55380: LD_VAR 0 5
55384: NOT
55385: IFFALSE 55389
// exit ;
55387: GO 55453
// if checkLink then
55389: LD_VAR 0 3
55393: IFFALSE 55443
// begin for i in tmp do
55395: LD_ADDR_VAR 0 6
55399: PUSH
55400: LD_VAR 0 5
55404: PUSH
55405: FOR_IN
55406: IFFALSE 55441
// if GetBase ( i ) <> base then
55408: LD_VAR 0 6
55412: PPUSH
55413: CALL_OW 274
55417: PUSH
55418: LD_VAR 0 1
55422: NONEQUAL
55423: IFFALSE 55439
// ComLinkToBase ( base , i ) ;
55425: LD_VAR 0 1
55429: PPUSH
55430: LD_VAR 0 6
55434: PPUSH
55435: CALL_OW 169
55439: GO 55405
55441: POP
55442: POP
// end ; result := tmp ;
55443: LD_ADDR_VAR 0 4
55447: PUSH
55448: LD_VAR 0 5
55452: ST_TO_ADDR
// end ;
55453: LD_VAR 0 4
55457: RET
// export function ComComplete ( units , b ) ; var i ; begin
55458: LD_INT 0
55460: PPUSH
55461: PPUSH
// if not units then
55462: LD_VAR 0 1
55466: NOT
55467: IFFALSE 55471
// exit ;
55469: GO 55561
// for i in units do
55471: LD_ADDR_VAR 0 4
55475: PUSH
55476: LD_VAR 0 1
55480: PUSH
55481: FOR_IN
55482: IFFALSE 55559
// if BuildingStatus ( b ) = bs_build then
55484: LD_VAR 0 2
55488: PPUSH
55489: CALL_OW 461
55493: PUSH
55494: LD_INT 1
55496: EQUAL
55497: IFFALSE 55557
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
55499: LD_VAR 0 4
55503: PPUSH
55504: LD_STRING h
55506: PUSH
55507: LD_VAR 0 2
55511: PPUSH
55512: CALL_OW 250
55516: PUSH
55517: LD_VAR 0 2
55521: PPUSH
55522: CALL_OW 251
55526: PUSH
55527: LD_VAR 0 2
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: PUSH
55550: EMPTY
55551: LIST
55552: PPUSH
55553: CALL_OW 446
55557: GO 55481
55559: POP
55560: POP
// end ;
55561: LD_VAR 0 3
55565: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
55566: LD_INT 0
55568: PPUSH
55569: PPUSH
55570: PPUSH
55571: PPUSH
55572: PPUSH
55573: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
55574: LD_VAR 0 1
55578: NOT
55579: PUSH
55580: LD_VAR 0 1
55584: PPUSH
55585: CALL_OW 263
55589: PUSH
55590: LD_INT 2
55592: NONEQUAL
55593: OR
55594: IFFALSE 55598
// exit ;
55596: GO 55914
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
55598: LD_ADDR_VAR 0 6
55602: PUSH
55603: LD_INT 22
55605: PUSH
55606: LD_VAR 0 1
55610: PPUSH
55611: CALL_OW 255
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: LD_INT 30
55625: PUSH
55626: LD_INT 36
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 34
55635: PUSH
55636: LD_INT 31
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: LIST
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PPUSH
55652: CALL_OW 69
55656: ST_TO_ADDR
// if not tmp then
55657: LD_VAR 0 6
55661: NOT
55662: IFFALSE 55666
// exit ;
55664: GO 55914
// result := [ ] ;
55666: LD_ADDR_VAR 0 2
55670: PUSH
55671: EMPTY
55672: ST_TO_ADDR
// for i in tmp do
55673: LD_ADDR_VAR 0 3
55677: PUSH
55678: LD_VAR 0 6
55682: PUSH
55683: FOR_IN
55684: IFFALSE 55755
// begin t := UnitsInside ( i ) ;
55686: LD_ADDR_VAR 0 4
55690: PUSH
55691: LD_VAR 0 3
55695: PPUSH
55696: CALL_OW 313
55700: ST_TO_ADDR
// if t then
55701: LD_VAR 0 4
55705: IFFALSE 55753
// for j in t do
55707: LD_ADDR_VAR 0 7
55711: PUSH
55712: LD_VAR 0 4
55716: PUSH
55717: FOR_IN
55718: IFFALSE 55751
// result := Replace ( result , result + 1 , j ) ;
55720: LD_ADDR_VAR 0 2
55724: PUSH
55725: LD_VAR 0 2
55729: PPUSH
55730: LD_VAR 0 2
55734: PUSH
55735: LD_INT 1
55737: PLUS
55738: PPUSH
55739: LD_VAR 0 7
55743: PPUSH
55744: CALL_OW 1
55748: ST_TO_ADDR
55749: GO 55717
55751: POP
55752: POP
// end ;
55753: GO 55683
55755: POP
55756: POP
// if not result then
55757: LD_VAR 0 2
55761: NOT
55762: IFFALSE 55766
// exit ;
55764: GO 55914
// mech := result [ 1 ] ;
55766: LD_ADDR_VAR 0 5
55770: PUSH
55771: LD_VAR 0 2
55775: PUSH
55776: LD_INT 1
55778: ARRAY
55779: ST_TO_ADDR
// if result > 1 then
55780: LD_VAR 0 2
55784: PUSH
55785: LD_INT 1
55787: GREATER
55788: IFFALSE 55900
// begin for i = 2 to result do
55790: LD_ADDR_VAR 0 3
55794: PUSH
55795: DOUBLE
55796: LD_INT 2
55798: DEC
55799: ST_TO_ADDR
55800: LD_VAR 0 2
55804: PUSH
55805: FOR_TO
55806: IFFALSE 55898
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
55808: LD_ADDR_VAR 0 4
55812: PUSH
55813: LD_VAR 0 2
55817: PUSH
55818: LD_VAR 0 3
55822: ARRAY
55823: PPUSH
55824: LD_INT 3
55826: PPUSH
55827: CALL_OW 259
55831: PUSH
55832: LD_VAR 0 2
55836: PUSH
55837: LD_VAR 0 3
55841: ARRAY
55842: PPUSH
55843: CALL_OW 432
55847: MINUS
55848: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
55849: LD_VAR 0 4
55853: PUSH
55854: LD_VAR 0 5
55858: PPUSH
55859: LD_INT 3
55861: PPUSH
55862: CALL_OW 259
55866: PUSH
55867: LD_VAR 0 5
55871: PPUSH
55872: CALL_OW 432
55876: MINUS
55877: GREATEREQUAL
55878: IFFALSE 55896
// mech := result [ i ] ;
55880: LD_ADDR_VAR 0 5
55884: PUSH
55885: LD_VAR 0 2
55889: PUSH
55890: LD_VAR 0 3
55894: ARRAY
55895: ST_TO_ADDR
// end ;
55896: GO 55805
55898: POP
55899: POP
// end ; ComLinkTo ( vehicle , mech ) ;
55900: LD_VAR 0 1
55904: PPUSH
55905: LD_VAR 0 5
55909: PPUSH
55910: CALL_OW 135
// end ;
55914: LD_VAR 0 2
55918: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
55919: LD_INT 0
55921: PPUSH
55922: PPUSH
55923: PPUSH
55924: PPUSH
55925: PPUSH
55926: PPUSH
55927: PPUSH
55928: PPUSH
55929: PPUSH
55930: PPUSH
55931: PPUSH
55932: PPUSH
55933: PPUSH
// result := [ ] ;
55934: LD_ADDR_VAR 0 7
55938: PUSH
55939: EMPTY
55940: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
55941: LD_VAR 0 1
55945: PPUSH
55946: CALL_OW 266
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: IN
55961: NOT
55962: IFFALSE 55966
// exit ;
55964: GO 57600
// if name then
55966: LD_VAR 0 3
55970: IFFALSE 55986
// SetBName ( base_dep , name ) ;
55972: LD_VAR 0 1
55976: PPUSH
55977: LD_VAR 0 3
55981: PPUSH
55982: CALL_OW 500
// base := GetBase ( base_dep ) ;
55986: LD_ADDR_VAR 0 15
55990: PUSH
55991: LD_VAR 0 1
55995: PPUSH
55996: CALL_OW 274
56000: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
56001: LD_ADDR_VAR 0 16
56005: PUSH
56006: LD_VAR 0 1
56010: PPUSH
56011: CALL_OW 255
56015: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
56016: LD_ADDR_VAR 0 17
56020: PUSH
56021: LD_VAR 0 1
56025: PPUSH
56026: CALL_OW 248
56030: ST_TO_ADDR
// if sources then
56031: LD_VAR 0 5
56035: IFFALSE 56082
// for i = 1 to 3 do
56037: LD_ADDR_VAR 0 8
56041: PUSH
56042: DOUBLE
56043: LD_INT 1
56045: DEC
56046: ST_TO_ADDR
56047: LD_INT 3
56049: PUSH
56050: FOR_TO
56051: IFFALSE 56080
// AddResourceType ( base , i , sources [ i ] ) ;
56053: LD_VAR 0 15
56057: PPUSH
56058: LD_VAR 0 8
56062: PPUSH
56063: LD_VAR 0 5
56067: PUSH
56068: LD_VAR 0 8
56072: ARRAY
56073: PPUSH
56074: CALL_OW 276
56078: GO 56050
56080: POP
56081: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
56082: LD_ADDR_VAR 0 18
56086: PUSH
56087: LD_VAR 0 15
56091: PPUSH
56092: LD_VAR 0 2
56096: PPUSH
56097: LD_INT 1
56099: PPUSH
56100: CALL 55343 0 3
56104: ST_TO_ADDR
// InitHc ;
56105: CALL_OW 19
// InitUc ;
56109: CALL_OW 18
// uc_side := side ;
56113: LD_ADDR_OWVAR 20
56117: PUSH
56118: LD_VAR 0 16
56122: ST_TO_ADDR
// uc_nation := nation ;
56123: LD_ADDR_OWVAR 21
56127: PUSH
56128: LD_VAR 0 17
56132: ST_TO_ADDR
// if buildings then
56133: LD_VAR 0 18
56137: IFFALSE 57459
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
56139: LD_ADDR_VAR 0 19
56143: PUSH
56144: LD_VAR 0 18
56148: PPUSH
56149: LD_INT 2
56151: PUSH
56152: LD_INT 30
56154: PUSH
56155: LD_INT 29
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 30
56164: PUSH
56165: LD_INT 30
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: LIST
56176: PPUSH
56177: CALL_OW 72
56181: ST_TO_ADDR
// if tmp then
56182: LD_VAR 0 19
56186: IFFALSE 56234
// for i in tmp do
56188: LD_ADDR_VAR 0 8
56192: PUSH
56193: LD_VAR 0 19
56197: PUSH
56198: FOR_IN
56199: IFFALSE 56232
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
56201: LD_VAR 0 8
56205: PPUSH
56206: CALL_OW 250
56210: PPUSH
56211: LD_VAR 0 8
56215: PPUSH
56216: CALL_OW 251
56220: PPUSH
56221: LD_VAR 0 16
56225: PPUSH
56226: CALL_OW 441
56230: GO 56198
56232: POP
56233: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
56234: LD_VAR 0 18
56238: PPUSH
56239: LD_INT 2
56241: PUSH
56242: LD_INT 30
56244: PUSH
56245: LD_INT 32
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 30
56254: PUSH
56255: LD_INT 33
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: LIST
56266: PPUSH
56267: CALL_OW 72
56271: IFFALSE 56359
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
56273: LD_ADDR_VAR 0 8
56277: PUSH
56278: LD_VAR 0 18
56282: PPUSH
56283: LD_INT 2
56285: PUSH
56286: LD_INT 30
56288: PUSH
56289: LD_INT 32
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 30
56298: PUSH
56299: LD_INT 33
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: LIST
56310: PPUSH
56311: CALL_OW 72
56315: PUSH
56316: FOR_IN
56317: IFFALSE 56357
// begin if not GetBWeapon ( i ) then
56319: LD_VAR 0 8
56323: PPUSH
56324: CALL_OW 269
56328: NOT
56329: IFFALSE 56355
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
56331: LD_VAR 0 8
56335: PPUSH
56336: LD_VAR 0 8
56340: PPUSH
56341: LD_VAR 0 2
56345: PPUSH
56346: CALL 57605 0 2
56350: PPUSH
56351: CALL_OW 431
// end ;
56355: GO 56316
56357: POP
56358: POP
// end ; for i = 1 to personel do
56359: LD_ADDR_VAR 0 8
56363: PUSH
56364: DOUBLE
56365: LD_INT 1
56367: DEC
56368: ST_TO_ADDR
56369: LD_VAR 0 6
56373: PUSH
56374: FOR_TO
56375: IFFALSE 57439
// begin if i > 4 then
56377: LD_VAR 0 8
56381: PUSH
56382: LD_INT 4
56384: GREATER
56385: IFFALSE 56389
// break ;
56387: GO 57439
// case i of 1 :
56389: LD_VAR 0 8
56393: PUSH
56394: LD_INT 1
56396: DOUBLE
56397: EQUAL
56398: IFTRUE 56402
56400: GO 56482
56402: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
56403: LD_ADDR_VAR 0 12
56407: PUSH
56408: LD_VAR 0 18
56412: PPUSH
56413: LD_INT 22
56415: PUSH
56416: LD_VAR 0 16
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 58
56427: PUSH
56428: EMPTY
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: LD_INT 30
56436: PUSH
56437: LD_INT 32
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 30
56446: PUSH
56447: LD_INT 4
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 30
56456: PUSH
56457: LD_INT 5
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: LIST
56474: PPUSH
56475: CALL_OW 72
56479: ST_TO_ADDR
56480: GO 56704
56482: LD_INT 2
56484: DOUBLE
56485: EQUAL
56486: IFTRUE 56490
56488: GO 56552
56490: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
56491: LD_ADDR_VAR 0 12
56495: PUSH
56496: LD_VAR 0 18
56500: PPUSH
56501: LD_INT 22
56503: PUSH
56504: LD_VAR 0 16
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 2
56515: PUSH
56516: LD_INT 30
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 30
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: LIST
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PPUSH
56545: CALL_OW 72
56549: ST_TO_ADDR
56550: GO 56704
56552: LD_INT 3
56554: DOUBLE
56555: EQUAL
56556: IFTRUE 56560
56558: GO 56622
56560: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
56561: LD_ADDR_VAR 0 12
56565: PUSH
56566: LD_VAR 0 18
56570: PPUSH
56571: LD_INT 22
56573: PUSH
56574: LD_VAR 0 16
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: LD_INT 30
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 30
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: LIST
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PPUSH
56615: CALL_OW 72
56619: ST_TO_ADDR
56620: GO 56704
56622: LD_INT 4
56624: DOUBLE
56625: EQUAL
56626: IFTRUE 56630
56628: GO 56703
56630: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
56631: LD_ADDR_VAR 0 12
56635: PUSH
56636: LD_VAR 0 18
56640: PPUSH
56641: LD_INT 22
56643: PUSH
56644: LD_VAR 0 16
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: LD_INT 30
56658: PUSH
56659: LD_INT 6
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 30
56668: PUSH
56669: LD_INT 7
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 30
56678: PUSH
56679: LD_INT 8
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PPUSH
56696: CALL_OW 72
56700: ST_TO_ADDR
56701: GO 56704
56703: POP
// if i = 1 then
56704: LD_VAR 0 8
56708: PUSH
56709: LD_INT 1
56711: EQUAL
56712: IFFALSE 56823
// begin tmp := [ ] ;
56714: LD_ADDR_VAR 0 19
56718: PUSH
56719: EMPTY
56720: ST_TO_ADDR
// for j in f do
56721: LD_ADDR_VAR 0 9
56725: PUSH
56726: LD_VAR 0 12
56730: PUSH
56731: FOR_IN
56732: IFFALSE 56805
// if GetBType ( j ) = b_bunker then
56734: LD_VAR 0 9
56738: PPUSH
56739: CALL_OW 266
56743: PUSH
56744: LD_INT 32
56746: EQUAL
56747: IFFALSE 56774
// tmp := Insert ( tmp , 1 , j ) else
56749: LD_ADDR_VAR 0 19
56753: PUSH
56754: LD_VAR 0 19
56758: PPUSH
56759: LD_INT 1
56761: PPUSH
56762: LD_VAR 0 9
56766: PPUSH
56767: CALL_OW 2
56771: ST_TO_ADDR
56772: GO 56803
// tmp := Insert ( tmp , tmp + 1 , j ) ;
56774: LD_ADDR_VAR 0 19
56778: PUSH
56779: LD_VAR 0 19
56783: PPUSH
56784: LD_VAR 0 19
56788: PUSH
56789: LD_INT 1
56791: PLUS
56792: PPUSH
56793: LD_VAR 0 9
56797: PPUSH
56798: CALL_OW 2
56802: ST_TO_ADDR
56803: GO 56731
56805: POP
56806: POP
// if tmp then
56807: LD_VAR 0 19
56811: IFFALSE 56823
// f := tmp ;
56813: LD_ADDR_VAR 0 12
56817: PUSH
56818: LD_VAR 0 19
56822: ST_TO_ADDR
// end ; x := personel [ i ] ;
56823: LD_ADDR_VAR 0 13
56827: PUSH
56828: LD_VAR 0 6
56832: PUSH
56833: LD_VAR 0 8
56837: ARRAY
56838: ST_TO_ADDR
// if x = - 1 then
56839: LD_VAR 0 13
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: EQUAL
56848: IFFALSE 57057
// begin for j in f do
56850: LD_ADDR_VAR 0 9
56854: PUSH
56855: LD_VAR 0 12
56859: PUSH
56860: FOR_IN
56861: IFFALSE 57053
// repeat InitHc ;
56863: CALL_OW 19
// if GetBType ( j ) = b_barracks then
56867: LD_VAR 0 9
56871: PPUSH
56872: CALL_OW 266
56876: PUSH
56877: LD_INT 5
56879: EQUAL
56880: IFFALSE 56950
// begin if UnitsInside ( j ) < 3 then
56882: LD_VAR 0 9
56886: PPUSH
56887: CALL_OW 313
56891: PUSH
56892: LD_INT 3
56894: LESS
56895: IFFALSE 56931
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56897: LD_INT 0
56899: PPUSH
56900: LD_INT 5
56902: PUSH
56903: LD_INT 8
56905: PUSH
56906: LD_INT 9
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: LIST
56913: PUSH
56914: LD_VAR 0 17
56918: ARRAY
56919: PPUSH
56920: LD_VAR 0 4
56924: PPUSH
56925: CALL_OW 380
56929: GO 56948
// PrepareHuman ( false , i , skill ) ;
56931: LD_INT 0
56933: PPUSH
56934: LD_VAR 0 8
56938: PPUSH
56939: LD_VAR 0 4
56943: PPUSH
56944: CALL_OW 380
// end else
56948: GO 56967
// PrepareHuman ( false , i , skill ) ;
56950: LD_INT 0
56952: PPUSH
56953: LD_VAR 0 8
56957: PPUSH
56958: LD_VAR 0 4
56962: PPUSH
56963: CALL_OW 380
// un := CreateHuman ;
56967: LD_ADDR_VAR 0 14
56971: PUSH
56972: CALL_OW 44
56976: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56977: LD_ADDR_VAR 0 7
56981: PUSH
56982: LD_VAR 0 7
56986: PPUSH
56987: LD_INT 1
56989: PPUSH
56990: LD_VAR 0 14
56994: PPUSH
56995: CALL_OW 2
56999: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
57000: LD_VAR 0 14
57004: PPUSH
57005: LD_VAR 0 9
57009: PPUSH
57010: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
57014: LD_VAR 0 9
57018: PPUSH
57019: CALL_OW 313
57023: PUSH
57024: LD_INT 6
57026: EQUAL
57027: PUSH
57028: LD_VAR 0 9
57032: PPUSH
57033: CALL_OW 266
57037: PUSH
57038: LD_INT 32
57040: PUSH
57041: LD_INT 31
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: IN
57048: OR
57049: IFFALSE 56863
57051: GO 56860
57053: POP
57054: POP
// end else
57055: GO 57437
// for j = 1 to x do
57057: LD_ADDR_VAR 0 9
57061: PUSH
57062: DOUBLE
57063: LD_INT 1
57065: DEC
57066: ST_TO_ADDR
57067: LD_VAR 0 13
57071: PUSH
57072: FOR_TO
57073: IFFALSE 57435
// begin InitHc ;
57075: CALL_OW 19
// if not f then
57079: LD_VAR 0 12
57083: NOT
57084: IFFALSE 57173
// begin PrepareHuman ( false , i , skill ) ;
57086: LD_INT 0
57088: PPUSH
57089: LD_VAR 0 8
57093: PPUSH
57094: LD_VAR 0 4
57098: PPUSH
57099: CALL_OW 380
// un := CreateHuman ;
57103: LD_ADDR_VAR 0 14
57107: PUSH
57108: CALL_OW 44
57112: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57113: LD_ADDR_VAR 0 7
57117: PUSH
57118: LD_VAR 0 7
57122: PPUSH
57123: LD_INT 1
57125: PPUSH
57126: LD_VAR 0 14
57130: PPUSH
57131: CALL_OW 2
57135: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
57136: LD_VAR 0 14
57140: PPUSH
57141: LD_VAR 0 1
57145: PPUSH
57146: CALL_OW 250
57150: PPUSH
57151: LD_VAR 0 1
57155: PPUSH
57156: CALL_OW 251
57160: PPUSH
57161: LD_INT 10
57163: PPUSH
57164: LD_INT 0
57166: PPUSH
57167: CALL_OW 50
// continue ;
57171: GO 57072
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
57173: LD_VAR 0 12
57177: PUSH
57178: LD_INT 1
57180: ARRAY
57181: PPUSH
57182: CALL_OW 313
57186: PUSH
57187: LD_VAR 0 12
57191: PUSH
57192: LD_INT 1
57194: ARRAY
57195: PPUSH
57196: CALL_OW 266
57200: PUSH
57201: LD_INT 32
57203: PUSH
57204: LD_INT 31
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: IN
57211: AND
57212: PUSH
57213: LD_VAR 0 12
57217: PUSH
57218: LD_INT 1
57220: ARRAY
57221: PPUSH
57222: CALL_OW 313
57226: PUSH
57227: LD_INT 6
57229: EQUAL
57230: OR
57231: IFFALSE 57251
// f := Delete ( f , 1 ) ;
57233: LD_ADDR_VAR 0 12
57237: PUSH
57238: LD_VAR 0 12
57242: PPUSH
57243: LD_INT 1
57245: PPUSH
57246: CALL_OW 3
57250: ST_TO_ADDR
// if not f then
57251: LD_VAR 0 12
57255: NOT
57256: IFFALSE 57274
// begin x := x + 2 ;
57258: LD_ADDR_VAR 0 13
57262: PUSH
57263: LD_VAR 0 13
57267: PUSH
57268: LD_INT 2
57270: PLUS
57271: ST_TO_ADDR
// continue ;
57272: GO 57072
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
57274: LD_VAR 0 12
57278: PUSH
57279: LD_INT 1
57281: ARRAY
57282: PPUSH
57283: CALL_OW 266
57287: PUSH
57288: LD_INT 5
57290: EQUAL
57291: IFFALSE 57365
// begin if UnitsInside ( f [ 1 ] ) < 3 then
57293: LD_VAR 0 12
57297: PUSH
57298: LD_INT 1
57300: ARRAY
57301: PPUSH
57302: CALL_OW 313
57306: PUSH
57307: LD_INT 3
57309: LESS
57310: IFFALSE 57346
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
57312: LD_INT 0
57314: PPUSH
57315: LD_INT 5
57317: PUSH
57318: LD_INT 8
57320: PUSH
57321: LD_INT 9
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: LIST
57328: PUSH
57329: LD_VAR 0 17
57333: ARRAY
57334: PPUSH
57335: LD_VAR 0 4
57339: PPUSH
57340: CALL_OW 380
57344: GO 57363
// PrepareHuman ( false , i , skill ) ;
57346: LD_INT 0
57348: PPUSH
57349: LD_VAR 0 8
57353: PPUSH
57354: LD_VAR 0 4
57358: PPUSH
57359: CALL_OW 380
// end else
57363: GO 57382
// PrepareHuman ( false , i , skill ) ;
57365: LD_INT 0
57367: PPUSH
57368: LD_VAR 0 8
57372: PPUSH
57373: LD_VAR 0 4
57377: PPUSH
57378: CALL_OW 380
// un := CreateHuman ;
57382: LD_ADDR_VAR 0 14
57386: PUSH
57387: CALL_OW 44
57391: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
57392: LD_ADDR_VAR 0 7
57396: PUSH
57397: LD_VAR 0 7
57401: PPUSH
57402: LD_INT 1
57404: PPUSH
57405: LD_VAR 0 14
57409: PPUSH
57410: CALL_OW 2
57414: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
57415: LD_VAR 0 14
57419: PPUSH
57420: LD_VAR 0 12
57424: PUSH
57425: LD_INT 1
57427: ARRAY
57428: PPUSH
57429: CALL_OW 52
// end ;
57433: GO 57072
57435: POP
57436: POP
// end ;
57437: GO 56374
57439: POP
57440: POP
// result := result ^ buildings ;
57441: LD_ADDR_VAR 0 7
57445: PUSH
57446: LD_VAR 0 7
57450: PUSH
57451: LD_VAR 0 18
57455: ADD
57456: ST_TO_ADDR
// end else
57457: GO 57600
// begin for i = 1 to personel do
57459: LD_ADDR_VAR 0 8
57463: PUSH
57464: DOUBLE
57465: LD_INT 1
57467: DEC
57468: ST_TO_ADDR
57469: LD_VAR 0 6
57473: PUSH
57474: FOR_TO
57475: IFFALSE 57598
// begin if i > 4 then
57477: LD_VAR 0 8
57481: PUSH
57482: LD_INT 4
57484: GREATER
57485: IFFALSE 57489
// break ;
57487: GO 57598
// x := personel [ i ] ;
57489: LD_ADDR_VAR 0 13
57493: PUSH
57494: LD_VAR 0 6
57498: PUSH
57499: LD_VAR 0 8
57503: ARRAY
57504: ST_TO_ADDR
// if x = - 1 then
57505: LD_VAR 0 13
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: EQUAL
57514: IFFALSE 57518
// continue ;
57516: GO 57474
// PrepareHuman ( false , i , skill ) ;
57518: LD_INT 0
57520: PPUSH
57521: LD_VAR 0 8
57525: PPUSH
57526: LD_VAR 0 4
57530: PPUSH
57531: CALL_OW 380
// un := CreateHuman ;
57535: LD_ADDR_VAR 0 14
57539: PUSH
57540: CALL_OW 44
57544: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
57545: LD_VAR 0 14
57549: PPUSH
57550: LD_VAR 0 1
57554: PPUSH
57555: CALL_OW 250
57559: PPUSH
57560: LD_VAR 0 1
57564: PPUSH
57565: CALL_OW 251
57569: PPUSH
57570: LD_INT 10
57572: PPUSH
57573: LD_INT 0
57575: PPUSH
57576: CALL_OW 50
// result := result ^ un ;
57580: LD_ADDR_VAR 0 7
57584: PUSH
57585: LD_VAR 0 7
57589: PUSH
57590: LD_VAR 0 14
57594: ADD
57595: ST_TO_ADDR
// end ;
57596: GO 57474
57598: POP
57599: POP
// end ; end ;
57600: LD_VAR 0 7
57604: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
57605: LD_INT 0
57607: PPUSH
57608: PPUSH
57609: PPUSH
57610: PPUSH
57611: PPUSH
57612: PPUSH
57613: PPUSH
57614: PPUSH
57615: PPUSH
57616: PPUSH
57617: PPUSH
57618: PPUSH
57619: PPUSH
57620: PPUSH
57621: PPUSH
57622: PPUSH
// result := false ;
57623: LD_ADDR_VAR 0 3
57627: PUSH
57628: LD_INT 0
57630: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
57631: LD_VAR 0 1
57635: NOT
57636: PUSH
57637: LD_VAR 0 1
57641: PPUSH
57642: CALL_OW 266
57646: PUSH
57647: LD_INT 32
57649: PUSH
57650: LD_INT 33
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: IN
57657: NOT
57658: OR
57659: IFFALSE 57663
// exit ;
57661: GO 58772
// nat := GetNation ( tower ) ;
57663: LD_ADDR_VAR 0 12
57667: PUSH
57668: LD_VAR 0 1
57672: PPUSH
57673: CALL_OW 248
57677: ST_TO_ADDR
// side := GetSide ( tower ) ;
57678: LD_ADDR_VAR 0 16
57682: PUSH
57683: LD_VAR 0 1
57687: PPUSH
57688: CALL_OW 255
57692: ST_TO_ADDR
// x := GetX ( tower ) ;
57693: LD_ADDR_VAR 0 10
57697: PUSH
57698: LD_VAR 0 1
57702: PPUSH
57703: CALL_OW 250
57707: ST_TO_ADDR
// y := GetY ( tower ) ;
57708: LD_ADDR_VAR 0 11
57712: PUSH
57713: LD_VAR 0 1
57717: PPUSH
57718: CALL_OW 251
57722: ST_TO_ADDR
// if not x or not y then
57723: LD_VAR 0 10
57727: NOT
57728: PUSH
57729: LD_VAR 0 11
57733: NOT
57734: OR
57735: IFFALSE 57739
// exit ;
57737: GO 58772
// weapon := 0 ;
57739: LD_ADDR_VAR 0 18
57743: PUSH
57744: LD_INT 0
57746: ST_TO_ADDR
// fac_list := [ ] ;
57747: LD_ADDR_VAR 0 17
57751: PUSH
57752: EMPTY
57753: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
57754: LD_ADDR_VAR 0 6
57758: PUSH
57759: LD_VAR 0 1
57763: PPUSH
57764: CALL_OW 274
57768: PPUSH
57769: LD_VAR 0 2
57773: PPUSH
57774: LD_INT 0
57776: PPUSH
57777: CALL 55343 0 3
57781: PPUSH
57782: LD_INT 30
57784: PUSH
57785: LD_INT 3
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PPUSH
57792: CALL_OW 72
57796: ST_TO_ADDR
// if not factories then
57797: LD_VAR 0 6
57801: NOT
57802: IFFALSE 57806
// exit ;
57804: GO 58772
// for i in factories do
57806: LD_ADDR_VAR 0 8
57810: PUSH
57811: LD_VAR 0 6
57815: PUSH
57816: FOR_IN
57817: IFFALSE 57842
// fac_list := fac_list union AvailableWeaponList ( i ) ;
57819: LD_ADDR_VAR 0 17
57823: PUSH
57824: LD_VAR 0 17
57828: PUSH
57829: LD_VAR 0 8
57833: PPUSH
57834: CALL_OW 478
57838: UNION
57839: ST_TO_ADDR
57840: GO 57816
57842: POP
57843: POP
// if not fac_list then
57844: LD_VAR 0 17
57848: NOT
57849: IFFALSE 57853
// exit ;
57851: GO 58772
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
57853: LD_ADDR_VAR 0 5
57857: PUSH
57858: LD_INT 4
57860: PUSH
57861: LD_INT 5
57863: PUSH
57864: LD_INT 9
57866: PUSH
57867: LD_INT 10
57869: PUSH
57870: LD_INT 6
57872: PUSH
57873: LD_INT 7
57875: PUSH
57876: LD_INT 11
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 27
57890: PUSH
57891: LD_INT 28
57893: PUSH
57894: LD_INT 26
57896: PUSH
57897: LD_INT 30
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 43
57908: PUSH
57909: LD_INT 44
57911: PUSH
57912: LD_INT 46
57914: PUSH
57915: LD_INT 45
57917: PUSH
57918: LD_INT 47
57920: PUSH
57921: LD_INT 49
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: LIST
57936: PUSH
57937: LD_VAR 0 12
57941: ARRAY
57942: ST_TO_ADDR
// list := list isect fac_list ;
57943: LD_ADDR_VAR 0 5
57947: PUSH
57948: LD_VAR 0 5
57952: PUSH
57953: LD_VAR 0 17
57957: ISECT
57958: ST_TO_ADDR
// if not list then
57959: LD_VAR 0 5
57963: NOT
57964: IFFALSE 57968
// exit ;
57966: GO 58772
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
57968: LD_VAR 0 12
57972: PUSH
57973: LD_INT 3
57975: EQUAL
57976: PUSH
57977: LD_INT 49
57979: PUSH
57980: LD_VAR 0 5
57984: IN
57985: AND
57986: PUSH
57987: LD_INT 31
57989: PPUSH
57990: LD_VAR 0 16
57994: PPUSH
57995: CALL_OW 321
57999: PUSH
58000: LD_INT 2
58002: EQUAL
58003: AND
58004: IFFALSE 58064
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
58006: LD_INT 22
58008: PUSH
58009: LD_VAR 0 16
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 35
58020: PUSH
58021: LD_INT 49
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 91
58030: PUSH
58031: LD_VAR 0 1
58035: PUSH
58036: LD_INT 10
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: LIST
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: LIST
58048: PPUSH
58049: CALL_OW 69
58053: NOT
58054: IFFALSE 58064
// weapon := ru_time_lapser ;
58056: LD_ADDR_VAR 0 18
58060: PUSH
58061: LD_INT 49
58063: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
58064: LD_VAR 0 12
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: LD_INT 2
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: IN
58079: PUSH
58080: LD_INT 11
58082: PUSH
58083: LD_VAR 0 5
58087: IN
58088: PUSH
58089: LD_INT 30
58091: PUSH
58092: LD_VAR 0 5
58096: IN
58097: OR
58098: AND
58099: PUSH
58100: LD_INT 6
58102: PPUSH
58103: LD_VAR 0 16
58107: PPUSH
58108: CALL_OW 321
58112: PUSH
58113: LD_INT 2
58115: EQUAL
58116: AND
58117: IFFALSE 58282
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
58119: LD_INT 22
58121: PUSH
58122: LD_VAR 0 16
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: LD_INT 35
58136: PUSH
58137: LD_INT 11
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 35
58146: PUSH
58147: LD_INT 30
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 91
58161: PUSH
58162: LD_VAR 0 1
58166: PUSH
58167: LD_INT 18
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: LIST
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: LIST
58179: PPUSH
58180: CALL_OW 69
58184: NOT
58185: PUSH
58186: LD_INT 22
58188: PUSH
58189: LD_VAR 0 16
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: LD_INT 30
58203: PUSH
58204: LD_INT 32
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 30
58213: PUSH
58214: LD_INT 33
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 91
58228: PUSH
58229: LD_VAR 0 1
58233: PUSH
58234: LD_INT 12
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: LIST
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: LIST
58246: PUSH
58247: EMPTY
58248: LIST
58249: PPUSH
58250: CALL_OW 69
58254: PUSH
58255: LD_INT 2
58257: GREATER
58258: AND
58259: IFFALSE 58282
// weapon := [ us_radar , ar_radar ] [ nat ] ;
58261: LD_ADDR_VAR 0 18
58265: PUSH
58266: LD_INT 11
58268: PUSH
58269: LD_INT 30
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_VAR 0 12
58280: ARRAY
58281: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
58282: LD_VAR 0 18
58286: NOT
58287: PUSH
58288: LD_INT 40
58290: PPUSH
58291: LD_VAR 0 16
58295: PPUSH
58296: CALL_OW 321
58300: PUSH
58301: LD_INT 2
58303: EQUAL
58304: AND
58305: PUSH
58306: LD_INT 7
58308: PUSH
58309: LD_VAR 0 5
58313: IN
58314: PUSH
58315: LD_INT 28
58317: PUSH
58318: LD_VAR 0 5
58322: IN
58323: OR
58324: PUSH
58325: LD_INT 45
58327: PUSH
58328: LD_VAR 0 5
58332: IN
58333: OR
58334: AND
58335: IFFALSE 58589
// begin hex := GetHexInfo ( x , y ) ;
58337: LD_ADDR_VAR 0 4
58341: PUSH
58342: LD_VAR 0 10
58346: PPUSH
58347: LD_VAR 0 11
58351: PPUSH
58352: CALL_OW 546
58356: ST_TO_ADDR
// if hex [ 1 ] then
58357: LD_VAR 0 4
58361: PUSH
58362: LD_INT 1
58364: ARRAY
58365: IFFALSE 58369
// exit ;
58367: GO 58772
// height := hex [ 2 ] ;
58369: LD_ADDR_VAR 0 15
58373: PUSH
58374: LD_VAR 0 4
58378: PUSH
58379: LD_INT 2
58381: ARRAY
58382: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
58383: LD_ADDR_VAR 0 14
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: LD_INT 5
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: ST_TO_ADDR
// for i in tmp do
58406: LD_ADDR_VAR 0 8
58410: PUSH
58411: LD_VAR 0 14
58415: PUSH
58416: FOR_IN
58417: IFFALSE 58587
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
58419: LD_ADDR_VAR 0 9
58423: PUSH
58424: LD_VAR 0 10
58428: PPUSH
58429: LD_VAR 0 8
58433: PPUSH
58434: LD_INT 5
58436: PPUSH
58437: CALL_OW 272
58441: PUSH
58442: LD_VAR 0 11
58446: PPUSH
58447: LD_VAR 0 8
58451: PPUSH
58452: LD_INT 5
58454: PPUSH
58455: CALL_OW 273
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58464: LD_VAR 0 9
58468: PUSH
58469: LD_INT 1
58471: ARRAY
58472: PPUSH
58473: LD_VAR 0 9
58477: PUSH
58478: LD_INT 2
58480: ARRAY
58481: PPUSH
58482: CALL_OW 488
58486: IFFALSE 58585
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
58488: LD_ADDR_VAR 0 4
58492: PUSH
58493: LD_VAR 0 9
58497: PUSH
58498: LD_INT 1
58500: ARRAY
58501: PPUSH
58502: LD_VAR 0 9
58506: PUSH
58507: LD_INT 2
58509: ARRAY
58510: PPUSH
58511: CALL_OW 546
58515: ST_TO_ADDR
// if hex [ 1 ] then
58516: LD_VAR 0 4
58520: PUSH
58521: LD_INT 1
58523: ARRAY
58524: IFFALSE 58528
// continue ;
58526: GO 58416
// h := hex [ 2 ] ;
58528: LD_ADDR_VAR 0 13
58532: PUSH
58533: LD_VAR 0 4
58537: PUSH
58538: LD_INT 2
58540: ARRAY
58541: ST_TO_ADDR
// if h + 7 < height then
58542: LD_VAR 0 13
58546: PUSH
58547: LD_INT 7
58549: PLUS
58550: PUSH
58551: LD_VAR 0 15
58555: LESS
58556: IFFALSE 58585
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
58558: LD_ADDR_VAR 0 18
58562: PUSH
58563: LD_INT 7
58565: PUSH
58566: LD_INT 28
58568: PUSH
58569: LD_INT 45
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: PUSH
58577: LD_VAR 0 12
58581: ARRAY
58582: ST_TO_ADDR
// break ;
58583: GO 58587
// end ; end ; end ;
58585: GO 58416
58587: POP
58588: POP
// end ; if not weapon then
58589: LD_VAR 0 18
58593: NOT
58594: IFFALSE 58654
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
58596: LD_ADDR_VAR 0 5
58600: PUSH
58601: LD_VAR 0 5
58605: PUSH
58606: LD_INT 11
58608: PUSH
58609: LD_INT 30
58611: PUSH
58612: LD_INT 49
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: LIST
58619: DIFF
58620: ST_TO_ADDR
// if not list then
58621: LD_VAR 0 5
58625: NOT
58626: IFFALSE 58630
// exit ;
58628: GO 58772
// weapon := list [ rand ( 1 , list ) ] ;
58630: LD_ADDR_VAR 0 18
58634: PUSH
58635: LD_VAR 0 5
58639: PUSH
58640: LD_INT 1
58642: PPUSH
58643: LD_VAR 0 5
58647: PPUSH
58648: CALL_OW 12
58652: ARRAY
58653: ST_TO_ADDR
// end ; if weapon then
58654: LD_VAR 0 18
58658: IFFALSE 58772
// begin tmp := CostOfWeapon ( weapon ) ;
58660: LD_ADDR_VAR 0 14
58664: PUSH
58665: LD_VAR 0 18
58669: PPUSH
58670: CALL_OW 451
58674: ST_TO_ADDR
// j := GetBase ( tower ) ;
58675: LD_ADDR_VAR 0 9
58679: PUSH
58680: LD_VAR 0 1
58684: PPUSH
58685: CALL_OW 274
58689: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
58690: LD_VAR 0 9
58694: PPUSH
58695: LD_INT 1
58697: PPUSH
58698: CALL_OW 275
58702: PUSH
58703: LD_VAR 0 14
58707: PUSH
58708: LD_INT 1
58710: ARRAY
58711: GREATEREQUAL
58712: PUSH
58713: LD_VAR 0 9
58717: PPUSH
58718: LD_INT 2
58720: PPUSH
58721: CALL_OW 275
58725: PUSH
58726: LD_VAR 0 14
58730: PUSH
58731: LD_INT 2
58733: ARRAY
58734: GREATEREQUAL
58735: AND
58736: PUSH
58737: LD_VAR 0 9
58741: PPUSH
58742: LD_INT 3
58744: PPUSH
58745: CALL_OW 275
58749: PUSH
58750: LD_VAR 0 14
58754: PUSH
58755: LD_INT 3
58757: ARRAY
58758: GREATEREQUAL
58759: AND
58760: IFFALSE 58772
// result := weapon ;
58762: LD_ADDR_VAR 0 3
58766: PUSH
58767: LD_VAR 0 18
58771: ST_TO_ADDR
// end ; end ;
58772: LD_VAR 0 3
58776: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
58777: LD_INT 0
58779: PPUSH
58780: PPUSH
// result := true ;
58781: LD_ADDR_VAR 0 3
58785: PUSH
58786: LD_INT 1
58788: ST_TO_ADDR
// if array1 = array2 then
58789: LD_VAR 0 1
58793: PUSH
58794: LD_VAR 0 2
58798: EQUAL
58799: IFFALSE 58859
// begin for i = 1 to array1 do
58801: LD_ADDR_VAR 0 4
58805: PUSH
58806: DOUBLE
58807: LD_INT 1
58809: DEC
58810: ST_TO_ADDR
58811: LD_VAR 0 1
58815: PUSH
58816: FOR_TO
58817: IFFALSE 58855
// if array1 [ i ] <> array2 [ i ] then
58819: LD_VAR 0 1
58823: PUSH
58824: LD_VAR 0 4
58828: ARRAY
58829: PUSH
58830: LD_VAR 0 2
58834: PUSH
58835: LD_VAR 0 4
58839: ARRAY
58840: NONEQUAL
58841: IFFALSE 58853
// begin result := false ;
58843: LD_ADDR_VAR 0 3
58847: PUSH
58848: LD_INT 0
58850: ST_TO_ADDR
// break ;
58851: GO 58855
// end ;
58853: GO 58816
58855: POP
58856: POP
// end else
58857: GO 58867
// result := false ;
58859: LD_ADDR_VAR 0 3
58863: PUSH
58864: LD_INT 0
58866: ST_TO_ADDR
// end ;
58867: LD_VAR 0 3
58871: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
58872: LD_INT 0
58874: PPUSH
58875: PPUSH
// if not array1 or not array2 then
58876: LD_VAR 0 1
58880: NOT
58881: PUSH
58882: LD_VAR 0 2
58886: NOT
58887: OR
58888: IFFALSE 58892
// exit ;
58890: GO 58956
// result := true ;
58892: LD_ADDR_VAR 0 3
58896: PUSH
58897: LD_INT 1
58899: ST_TO_ADDR
// for i = 1 to array1 do
58900: LD_ADDR_VAR 0 4
58904: PUSH
58905: DOUBLE
58906: LD_INT 1
58908: DEC
58909: ST_TO_ADDR
58910: LD_VAR 0 1
58914: PUSH
58915: FOR_TO
58916: IFFALSE 58954
// if array1 [ i ] <> array2 [ i ] then
58918: LD_VAR 0 1
58922: PUSH
58923: LD_VAR 0 4
58927: ARRAY
58928: PUSH
58929: LD_VAR 0 2
58933: PUSH
58934: LD_VAR 0 4
58938: ARRAY
58939: NONEQUAL
58940: IFFALSE 58952
// begin result := false ;
58942: LD_ADDR_VAR 0 3
58946: PUSH
58947: LD_INT 0
58949: ST_TO_ADDR
// break ;
58950: GO 58954
// end ;
58952: GO 58915
58954: POP
58955: POP
// end ;
58956: LD_VAR 0 3
58960: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
58961: LD_INT 0
58963: PPUSH
58964: PPUSH
58965: PPUSH
// pom := GetBase ( fac ) ;
58966: LD_ADDR_VAR 0 5
58970: PUSH
58971: LD_VAR 0 1
58975: PPUSH
58976: CALL_OW 274
58980: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
58981: LD_ADDR_VAR 0 4
58985: PUSH
58986: LD_VAR 0 2
58990: PUSH
58991: LD_INT 1
58993: ARRAY
58994: PPUSH
58995: LD_VAR 0 2
58999: PUSH
59000: LD_INT 2
59002: ARRAY
59003: PPUSH
59004: LD_VAR 0 2
59008: PUSH
59009: LD_INT 3
59011: ARRAY
59012: PPUSH
59013: LD_VAR 0 2
59017: PUSH
59018: LD_INT 4
59020: ARRAY
59021: PPUSH
59022: CALL_OW 449
59026: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59027: LD_ADDR_VAR 0 3
59031: PUSH
59032: LD_VAR 0 5
59036: PPUSH
59037: LD_INT 1
59039: PPUSH
59040: CALL_OW 275
59044: PUSH
59045: LD_VAR 0 4
59049: PUSH
59050: LD_INT 1
59052: ARRAY
59053: GREATEREQUAL
59054: PUSH
59055: LD_VAR 0 5
59059: PPUSH
59060: LD_INT 2
59062: PPUSH
59063: CALL_OW 275
59067: PUSH
59068: LD_VAR 0 4
59072: PUSH
59073: LD_INT 2
59075: ARRAY
59076: GREATEREQUAL
59077: AND
59078: PUSH
59079: LD_VAR 0 5
59083: PPUSH
59084: LD_INT 3
59086: PPUSH
59087: CALL_OW 275
59091: PUSH
59092: LD_VAR 0 4
59096: PUSH
59097: LD_INT 3
59099: ARRAY
59100: GREATEREQUAL
59101: AND
59102: ST_TO_ADDR
// end ;
59103: LD_VAR 0 3
59107: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
59108: LD_INT 0
59110: PPUSH
59111: PPUSH
59112: PPUSH
59113: PPUSH
// pom := GetBase ( building ) ;
59114: LD_ADDR_VAR 0 3
59118: PUSH
59119: LD_VAR 0 1
59123: PPUSH
59124: CALL_OW 274
59128: ST_TO_ADDR
// if not pom then
59129: LD_VAR 0 3
59133: NOT
59134: IFFALSE 59138
// exit ;
59136: GO 59308
// btype := GetBType ( building ) ;
59138: LD_ADDR_VAR 0 5
59142: PUSH
59143: LD_VAR 0 1
59147: PPUSH
59148: CALL_OW 266
59152: ST_TO_ADDR
// if btype = b_armoury then
59153: LD_VAR 0 5
59157: PUSH
59158: LD_INT 4
59160: EQUAL
59161: IFFALSE 59171
// btype := b_barracks ;
59163: LD_ADDR_VAR 0 5
59167: PUSH
59168: LD_INT 5
59170: ST_TO_ADDR
// if btype = b_depot then
59171: LD_VAR 0 5
59175: PUSH
59176: LD_INT 0
59178: EQUAL
59179: IFFALSE 59189
// btype := b_warehouse ;
59181: LD_ADDR_VAR 0 5
59185: PUSH
59186: LD_INT 1
59188: ST_TO_ADDR
// if btype = b_workshop then
59189: LD_VAR 0 5
59193: PUSH
59194: LD_INT 2
59196: EQUAL
59197: IFFALSE 59207
// btype := b_factory ;
59199: LD_ADDR_VAR 0 5
59203: PUSH
59204: LD_INT 3
59206: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
59207: LD_ADDR_VAR 0 4
59211: PUSH
59212: LD_VAR 0 5
59216: PPUSH
59217: LD_VAR 0 1
59221: PPUSH
59222: CALL_OW 248
59226: PPUSH
59227: CALL_OW 450
59231: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59232: LD_ADDR_VAR 0 2
59236: PUSH
59237: LD_VAR 0 3
59241: PPUSH
59242: LD_INT 1
59244: PPUSH
59245: CALL_OW 275
59249: PUSH
59250: LD_VAR 0 4
59254: PUSH
59255: LD_INT 1
59257: ARRAY
59258: GREATEREQUAL
59259: PUSH
59260: LD_VAR 0 3
59264: PPUSH
59265: LD_INT 2
59267: PPUSH
59268: CALL_OW 275
59272: PUSH
59273: LD_VAR 0 4
59277: PUSH
59278: LD_INT 2
59280: ARRAY
59281: GREATEREQUAL
59282: AND
59283: PUSH
59284: LD_VAR 0 3
59288: PPUSH
59289: LD_INT 3
59291: PPUSH
59292: CALL_OW 275
59296: PUSH
59297: LD_VAR 0 4
59301: PUSH
59302: LD_INT 3
59304: ARRAY
59305: GREATEREQUAL
59306: AND
59307: ST_TO_ADDR
// end ;
59308: LD_VAR 0 2
59312: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
59313: LD_INT 0
59315: PPUSH
59316: PPUSH
59317: PPUSH
// pom := GetBase ( building ) ;
59318: LD_ADDR_VAR 0 4
59322: PUSH
59323: LD_VAR 0 1
59327: PPUSH
59328: CALL_OW 274
59332: ST_TO_ADDR
// if not pom then
59333: LD_VAR 0 4
59337: NOT
59338: IFFALSE 59342
// exit ;
59340: GO 59443
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
59342: LD_ADDR_VAR 0 5
59346: PUSH
59347: LD_VAR 0 2
59351: PPUSH
59352: LD_VAR 0 1
59356: PPUSH
59357: CALL_OW 248
59361: PPUSH
59362: CALL_OW 450
59366: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
59367: LD_ADDR_VAR 0 3
59371: PUSH
59372: LD_VAR 0 4
59376: PPUSH
59377: LD_INT 1
59379: PPUSH
59380: CALL_OW 275
59384: PUSH
59385: LD_VAR 0 5
59389: PUSH
59390: LD_INT 1
59392: ARRAY
59393: GREATEREQUAL
59394: PUSH
59395: LD_VAR 0 4
59399: PPUSH
59400: LD_INT 2
59402: PPUSH
59403: CALL_OW 275
59407: PUSH
59408: LD_VAR 0 5
59412: PUSH
59413: LD_INT 2
59415: ARRAY
59416: GREATEREQUAL
59417: AND
59418: PUSH
59419: LD_VAR 0 4
59423: PPUSH
59424: LD_INT 3
59426: PPUSH
59427: CALL_OW 275
59431: PUSH
59432: LD_VAR 0 5
59436: PUSH
59437: LD_INT 3
59439: ARRAY
59440: GREATEREQUAL
59441: AND
59442: ST_TO_ADDR
// end ;
59443: LD_VAR 0 3
59447: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
59448: LD_INT 0
59450: PPUSH
59451: PPUSH
59452: PPUSH
59453: PPUSH
59454: PPUSH
59455: PPUSH
59456: PPUSH
59457: PPUSH
59458: PPUSH
59459: PPUSH
59460: PPUSH
// result := false ;
59461: LD_ADDR_VAR 0 8
59465: PUSH
59466: LD_INT 0
59468: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
59469: LD_VAR 0 5
59473: NOT
59474: PUSH
59475: LD_VAR 0 1
59479: NOT
59480: OR
59481: PUSH
59482: LD_VAR 0 2
59486: NOT
59487: OR
59488: PUSH
59489: LD_VAR 0 3
59493: NOT
59494: OR
59495: IFFALSE 59499
// exit ;
59497: GO 60313
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
59499: LD_ADDR_VAR 0 14
59503: PUSH
59504: LD_VAR 0 1
59508: PPUSH
59509: LD_VAR 0 2
59513: PPUSH
59514: LD_VAR 0 3
59518: PPUSH
59519: LD_VAR 0 4
59523: PPUSH
59524: LD_VAR 0 5
59528: PUSH
59529: LD_INT 1
59531: ARRAY
59532: PPUSH
59533: CALL_OW 248
59537: PPUSH
59538: LD_INT 0
59540: PPUSH
59541: CALL 61550 0 6
59545: ST_TO_ADDR
// if not hexes then
59546: LD_VAR 0 14
59550: NOT
59551: IFFALSE 59555
// exit ;
59553: GO 60313
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59555: LD_ADDR_VAR 0 17
59559: PUSH
59560: LD_VAR 0 5
59564: PPUSH
59565: LD_INT 22
59567: PUSH
59568: LD_VAR 0 13
59572: PPUSH
59573: CALL_OW 255
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: PUSH
59585: LD_INT 30
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 30
59597: PUSH
59598: LD_INT 1
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: LIST
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PPUSH
59614: CALL_OW 72
59618: ST_TO_ADDR
// for i = 1 to hexes do
59619: LD_ADDR_VAR 0 9
59623: PUSH
59624: DOUBLE
59625: LD_INT 1
59627: DEC
59628: ST_TO_ADDR
59629: LD_VAR 0 14
59633: PUSH
59634: FOR_TO
59635: IFFALSE 60311
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59637: LD_ADDR_VAR 0 13
59641: PUSH
59642: LD_VAR 0 14
59646: PUSH
59647: LD_VAR 0 9
59651: ARRAY
59652: PUSH
59653: LD_INT 1
59655: ARRAY
59656: PPUSH
59657: LD_VAR 0 14
59661: PUSH
59662: LD_VAR 0 9
59666: ARRAY
59667: PUSH
59668: LD_INT 2
59670: ARRAY
59671: PPUSH
59672: CALL_OW 428
59676: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
59677: LD_VAR 0 14
59681: PUSH
59682: LD_VAR 0 9
59686: ARRAY
59687: PUSH
59688: LD_INT 1
59690: ARRAY
59691: PPUSH
59692: LD_VAR 0 14
59696: PUSH
59697: LD_VAR 0 9
59701: ARRAY
59702: PUSH
59703: LD_INT 2
59705: ARRAY
59706: PPUSH
59707: CALL_OW 351
59711: PUSH
59712: LD_VAR 0 14
59716: PUSH
59717: LD_VAR 0 9
59721: ARRAY
59722: PUSH
59723: LD_INT 1
59725: ARRAY
59726: PPUSH
59727: LD_VAR 0 14
59731: PUSH
59732: LD_VAR 0 9
59736: ARRAY
59737: PUSH
59738: LD_INT 2
59740: ARRAY
59741: PPUSH
59742: CALL_OW 488
59746: NOT
59747: OR
59748: PUSH
59749: LD_VAR 0 13
59753: PPUSH
59754: CALL_OW 247
59758: PUSH
59759: LD_INT 3
59761: EQUAL
59762: OR
59763: IFFALSE 59769
// exit ;
59765: POP
59766: POP
59767: GO 60313
// if not tmp then
59769: LD_VAR 0 13
59773: NOT
59774: IFFALSE 59778
// continue ;
59776: GO 59634
// result := true ;
59778: LD_ADDR_VAR 0 8
59782: PUSH
59783: LD_INT 1
59785: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
59786: LD_VAR 0 6
59790: PUSH
59791: LD_VAR 0 13
59795: PPUSH
59796: CALL_OW 247
59800: PUSH
59801: LD_INT 2
59803: EQUAL
59804: AND
59805: PUSH
59806: LD_VAR 0 13
59810: PPUSH
59811: CALL_OW 263
59815: PUSH
59816: LD_INT 1
59818: EQUAL
59819: AND
59820: IFFALSE 59984
// begin if IsDrivenBy ( tmp ) then
59822: LD_VAR 0 13
59826: PPUSH
59827: CALL_OW 311
59831: IFFALSE 59835
// continue ;
59833: GO 59634
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
59835: LD_VAR 0 6
59839: PPUSH
59840: LD_INT 3
59842: PUSH
59843: LD_INT 60
59845: PUSH
59846: EMPTY
59847: LIST
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: LD_INT 55
59858: PUSH
59859: EMPTY
59860: LIST
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PPUSH
59870: CALL_OW 72
59874: IFFALSE 59982
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
59876: LD_ADDR_VAR 0 18
59880: PUSH
59881: LD_VAR 0 6
59885: PPUSH
59886: LD_INT 3
59888: PUSH
59889: LD_INT 60
59891: PUSH
59892: EMPTY
59893: LIST
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 3
59901: PUSH
59902: LD_INT 55
59904: PUSH
59905: EMPTY
59906: LIST
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PPUSH
59916: CALL_OW 72
59920: PUSH
59921: LD_INT 1
59923: ARRAY
59924: ST_TO_ADDR
// if IsInUnit ( driver ) then
59925: LD_VAR 0 18
59929: PPUSH
59930: CALL_OW 310
59934: IFFALSE 59945
// ComExit ( driver ) ;
59936: LD_VAR 0 18
59940: PPUSH
59941: CALL 84734 0 1
// AddComEnterUnit ( driver , tmp ) ;
59945: LD_VAR 0 18
59949: PPUSH
59950: LD_VAR 0 13
59954: PPUSH
59955: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
59959: LD_VAR 0 18
59963: PPUSH
59964: LD_VAR 0 7
59968: PPUSH
59969: CALL_OW 173
// AddComExitVehicle ( driver ) ;
59973: LD_VAR 0 18
59977: PPUSH
59978: CALL_OW 181
// end ; continue ;
59982: GO 59634
// end ; if not cleaners or not tmp in cleaners then
59984: LD_VAR 0 6
59988: NOT
59989: PUSH
59990: LD_VAR 0 13
59994: PUSH
59995: LD_VAR 0 6
59999: IN
60000: NOT
60001: OR
60002: IFFALSE 60309
// begin if dep then
60004: LD_VAR 0 17
60008: IFFALSE 60144
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
60010: LD_ADDR_VAR 0 16
60014: PUSH
60015: LD_VAR 0 17
60019: PUSH
60020: LD_INT 1
60022: ARRAY
60023: PPUSH
60024: CALL_OW 250
60028: PPUSH
60029: LD_VAR 0 17
60033: PUSH
60034: LD_INT 1
60036: ARRAY
60037: PPUSH
60038: CALL_OW 254
60042: PPUSH
60043: LD_INT 5
60045: PPUSH
60046: CALL_OW 272
60050: PUSH
60051: LD_VAR 0 17
60055: PUSH
60056: LD_INT 1
60058: ARRAY
60059: PPUSH
60060: CALL_OW 251
60064: PPUSH
60065: LD_VAR 0 17
60069: PUSH
60070: LD_INT 1
60072: ARRAY
60073: PPUSH
60074: CALL_OW 254
60078: PPUSH
60079: LD_INT 5
60081: PPUSH
60082: CALL_OW 273
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
60091: LD_VAR 0 16
60095: PUSH
60096: LD_INT 1
60098: ARRAY
60099: PPUSH
60100: LD_VAR 0 16
60104: PUSH
60105: LD_INT 2
60107: ARRAY
60108: PPUSH
60109: CALL_OW 488
60113: IFFALSE 60144
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
60115: LD_VAR 0 13
60119: PPUSH
60120: LD_VAR 0 16
60124: PUSH
60125: LD_INT 1
60127: ARRAY
60128: PPUSH
60129: LD_VAR 0 16
60133: PUSH
60134: LD_INT 2
60136: ARRAY
60137: PPUSH
60138: CALL_OW 111
// continue ;
60142: GO 59634
// end ; end ; r := GetDir ( tmp ) ;
60144: LD_ADDR_VAR 0 15
60148: PUSH
60149: LD_VAR 0 13
60153: PPUSH
60154: CALL_OW 254
60158: ST_TO_ADDR
// if r = 5 then
60159: LD_VAR 0 15
60163: PUSH
60164: LD_INT 5
60166: EQUAL
60167: IFFALSE 60177
// r := 0 ;
60169: LD_ADDR_VAR 0 15
60173: PUSH
60174: LD_INT 0
60176: ST_TO_ADDR
// for j = r to 5 do
60177: LD_ADDR_VAR 0 10
60181: PUSH
60182: DOUBLE
60183: LD_VAR 0 15
60187: DEC
60188: ST_TO_ADDR
60189: LD_INT 5
60191: PUSH
60192: FOR_TO
60193: IFFALSE 60307
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
60195: LD_ADDR_VAR 0 11
60199: PUSH
60200: LD_VAR 0 13
60204: PPUSH
60205: CALL_OW 250
60209: PPUSH
60210: LD_VAR 0 10
60214: PPUSH
60215: LD_INT 2
60217: PPUSH
60218: CALL_OW 272
60222: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
60223: LD_ADDR_VAR 0 12
60227: PUSH
60228: LD_VAR 0 13
60232: PPUSH
60233: CALL_OW 251
60237: PPUSH
60238: LD_VAR 0 10
60242: PPUSH
60243: LD_INT 2
60245: PPUSH
60246: CALL_OW 273
60250: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
60251: LD_VAR 0 11
60255: PPUSH
60256: LD_VAR 0 12
60260: PPUSH
60261: CALL_OW 488
60265: PUSH
60266: LD_VAR 0 11
60270: PPUSH
60271: LD_VAR 0 12
60275: PPUSH
60276: CALL_OW 428
60280: NOT
60281: AND
60282: IFFALSE 60305
// begin ComMoveXY ( tmp , _x , _y ) ;
60284: LD_VAR 0 13
60288: PPUSH
60289: LD_VAR 0 11
60293: PPUSH
60294: LD_VAR 0 12
60298: PPUSH
60299: CALL_OW 111
// break ;
60303: GO 60307
// end ; end ;
60305: GO 60192
60307: POP
60308: POP
// end ; end ;
60309: GO 59634
60311: POP
60312: POP
// end ;
60313: LD_VAR 0 8
60317: RET
// export function BuildingTechInvented ( side , btype ) ; begin
60318: LD_INT 0
60320: PPUSH
// result := true ;
60321: LD_ADDR_VAR 0 3
60325: PUSH
60326: LD_INT 1
60328: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
60329: LD_VAR 0 2
60333: PUSH
60334: LD_INT 24
60336: DOUBLE
60337: EQUAL
60338: IFTRUE 60348
60340: LD_INT 33
60342: DOUBLE
60343: EQUAL
60344: IFTRUE 60348
60346: GO 60373
60348: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
60349: LD_ADDR_VAR 0 3
60353: PUSH
60354: LD_INT 32
60356: PPUSH
60357: LD_VAR 0 1
60361: PPUSH
60362: CALL_OW 321
60366: PUSH
60367: LD_INT 2
60369: EQUAL
60370: ST_TO_ADDR
60371: GO 60693
60373: LD_INT 20
60375: DOUBLE
60376: EQUAL
60377: IFTRUE 60381
60379: GO 60406
60381: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
60382: LD_ADDR_VAR 0 3
60386: PUSH
60387: LD_INT 6
60389: PPUSH
60390: LD_VAR 0 1
60394: PPUSH
60395: CALL_OW 321
60399: PUSH
60400: LD_INT 2
60402: EQUAL
60403: ST_TO_ADDR
60404: GO 60693
60406: LD_INT 22
60408: DOUBLE
60409: EQUAL
60410: IFTRUE 60420
60412: LD_INT 36
60414: DOUBLE
60415: EQUAL
60416: IFTRUE 60420
60418: GO 60445
60420: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
60421: LD_ADDR_VAR 0 3
60425: PUSH
60426: LD_INT 15
60428: PPUSH
60429: LD_VAR 0 1
60433: PPUSH
60434: CALL_OW 321
60438: PUSH
60439: LD_INT 2
60441: EQUAL
60442: ST_TO_ADDR
60443: GO 60693
60445: LD_INT 30
60447: DOUBLE
60448: EQUAL
60449: IFTRUE 60453
60451: GO 60478
60453: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
60454: LD_ADDR_VAR 0 3
60458: PUSH
60459: LD_INT 20
60461: PPUSH
60462: LD_VAR 0 1
60466: PPUSH
60467: CALL_OW 321
60471: PUSH
60472: LD_INT 2
60474: EQUAL
60475: ST_TO_ADDR
60476: GO 60693
60478: LD_INT 28
60480: DOUBLE
60481: EQUAL
60482: IFTRUE 60492
60484: LD_INT 21
60486: DOUBLE
60487: EQUAL
60488: IFTRUE 60492
60490: GO 60517
60492: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
60493: LD_ADDR_VAR 0 3
60497: PUSH
60498: LD_INT 21
60500: PPUSH
60501: LD_VAR 0 1
60505: PPUSH
60506: CALL_OW 321
60510: PUSH
60511: LD_INT 2
60513: EQUAL
60514: ST_TO_ADDR
60515: GO 60693
60517: LD_INT 16
60519: DOUBLE
60520: EQUAL
60521: IFTRUE 60525
60523: GO 60552
60525: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
60526: LD_ADDR_VAR 0 3
60530: PUSH
60531: LD_EXP 81
60535: PPUSH
60536: LD_VAR 0 1
60540: PPUSH
60541: CALL_OW 321
60545: PUSH
60546: LD_INT 2
60548: EQUAL
60549: ST_TO_ADDR
60550: GO 60693
60552: LD_INT 19
60554: DOUBLE
60555: EQUAL
60556: IFTRUE 60566
60558: LD_INT 23
60560: DOUBLE
60561: EQUAL
60562: IFTRUE 60566
60564: GO 60593
60566: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
60567: LD_ADDR_VAR 0 3
60571: PUSH
60572: LD_EXP 80
60576: PPUSH
60577: LD_VAR 0 1
60581: PPUSH
60582: CALL_OW 321
60586: PUSH
60587: LD_INT 2
60589: EQUAL
60590: ST_TO_ADDR
60591: GO 60693
60593: LD_INT 17
60595: DOUBLE
60596: EQUAL
60597: IFTRUE 60601
60599: GO 60626
60601: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
60602: LD_ADDR_VAR 0 3
60606: PUSH
60607: LD_INT 39
60609: PPUSH
60610: LD_VAR 0 1
60614: PPUSH
60615: CALL_OW 321
60619: PUSH
60620: LD_INT 2
60622: EQUAL
60623: ST_TO_ADDR
60624: GO 60693
60626: LD_INT 18
60628: DOUBLE
60629: EQUAL
60630: IFTRUE 60634
60632: GO 60659
60634: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
60635: LD_ADDR_VAR 0 3
60639: PUSH
60640: LD_INT 40
60642: PPUSH
60643: LD_VAR 0 1
60647: PPUSH
60648: CALL_OW 321
60652: PUSH
60653: LD_INT 2
60655: EQUAL
60656: ST_TO_ADDR
60657: GO 60693
60659: LD_INT 27
60661: DOUBLE
60662: EQUAL
60663: IFTRUE 60667
60665: GO 60692
60667: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
60668: LD_ADDR_VAR 0 3
60672: PUSH
60673: LD_INT 35
60675: PPUSH
60676: LD_VAR 0 1
60680: PPUSH
60681: CALL_OW 321
60685: PUSH
60686: LD_INT 2
60688: EQUAL
60689: ST_TO_ADDR
60690: GO 60693
60692: POP
// end ;
60693: LD_VAR 0 3
60697: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
60698: LD_INT 0
60700: PPUSH
60701: PPUSH
60702: PPUSH
60703: PPUSH
60704: PPUSH
60705: PPUSH
60706: PPUSH
60707: PPUSH
60708: PPUSH
60709: PPUSH
60710: PPUSH
// result := false ;
60711: LD_ADDR_VAR 0 6
60715: PUSH
60716: LD_INT 0
60718: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
60719: LD_VAR 0 1
60723: NOT
60724: PUSH
60725: LD_VAR 0 1
60729: PPUSH
60730: CALL_OW 266
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: IN
60745: NOT
60746: OR
60747: PUSH
60748: LD_VAR 0 2
60752: NOT
60753: OR
60754: PUSH
60755: LD_VAR 0 5
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 3
60771: PUSH
60772: LD_INT 4
60774: PUSH
60775: LD_INT 5
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: IN
60786: NOT
60787: OR
60788: PUSH
60789: LD_VAR 0 3
60793: PPUSH
60794: LD_VAR 0 4
60798: PPUSH
60799: CALL_OW 488
60803: NOT
60804: OR
60805: IFFALSE 60809
// exit ;
60807: GO 61545
// side := GetSide ( depot ) ;
60809: LD_ADDR_VAR 0 9
60813: PUSH
60814: LD_VAR 0 1
60818: PPUSH
60819: CALL_OW 255
60823: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
60824: LD_VAR 0 9
60828: PPUSH
60829: LD_VAR 0 2
60833: PPUSH
60834: CALL 60318 0 2
60838: NOT
60839: IFFALSE 60843
// exit ;
60841: GO 61545
// pom := GetBase ( depot ) ;
60843: LD_ADDR_VAR 0 10
60847: PUSH
60848: LD_VAR 0 1
60852: PPUSH
60853: CALL_OW 274
60857: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
60858: LD_ADDR_VAR 0 11
60862: PUSH
60863: LD_VAR 0 2
60867: PPUSH
60868: LD_VAR 0 1
60872: PPUSH
60873: CALL_OW 248
60877: PPUSH
60878: CALL_OW 450
60882: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
60883: LD_VAR 0 10
60887: PPUSH
60888: LD_INT 1
60890: PPUSH
60891: CALL_OW 275
60895: PUSH
60896: LD_VAR 0 11
60900: PUSH
60901: LD_INT 1
60903: ARRAY
60904: GREATEREQUAL
60905: PUSH
60906: LD_VAR 0 10
60910: PPUSH
60911: LD_INT 2
60913: PPUSH
60914: CALL_OW 275
60918: PUSH
60919: LD_VAR 0 11
60923: PUSH
60924: LD_INT 2
60926: ARRAY
60927: GREATEREQUAL
60928: AND
60929: PUSH
60930: LD_VAR 0 10
60934: PPUSH
60935: LD_INT 3
60937: PPUSH
60938: CALL_OW 275
60942: PUSH
60943: LD_VAR 0 11
60947: PUSH
60948: LD_INT 3
60950: ARRAY
60951: GREATEREQUAL
60952: AND
60953: NOT
60954: IFFALSE 60958
// exit ;
60956: GO 61545
// if GetBType ( depot ) = b_depot then
60958: LD_VAR 0 1
60962: PPUSH
60963: CALL_OW 266
60967: PUSH
60968: LD_INT 0
60970: EQUAL
60971: IFFALSE 60983
// dist := 28 else
60973: LD_ADDR_VAR 0 14
60977: PUSH
60978: LD_INT 28
60980: ST_TO_ADDR
60981: GO 60991
// dist := 36 ;
60983: LD_ADDR_VAR 0 14
60987: PUSH
60988: LD_INT 36
60990: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
60991: LD_VAR 0 1
60995: PPUSH
60996: LD_VAR 0 3
61000: PPUSH
61001: LD_VAR 0 4
61005: PPUSH
61006: CALL_OW 297
61010: PUSH
61011: LD_VAR 0 14
61015: GREATER
61016: IFFALSE 61020
// exit ;
61018: GO 61545
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
61020: LD_ADDR_VAR 0 12
61024: PUSH
61025: LD_VAR 0 2
61029: PPUSH
61030: LD_VAR 0 3
61034: PPUSH
61035: LD_VAR 0 4
61039: PPUSH
61040: LD_VAR 0 5
61044: PPUSH
61045: LD_VAR 0 1
61049: PPUSH
61050: CALL_OW 248
61054: PPUSH
61055: LD_INT 0
61057: PPUSH
61058: CALL 61550 0 6
61062: ST_TO_ADDR
// if not hexes then
61063: LD_VAR 0 12
61067: NOT
61068: IFFALSE 61072
// exit ;
61070: GO 61545
// hex := GetHexInfo ( x , y ) ;
61072: LD_ADDR_VAR 0 15
61076: PUSH
61077: LD_VAR 0 3
61081: PPUSH
61082: LD_VAR 0 4
61086: PPUSH
61087: CALL_OW 546
61091: ST_TO_ADDR
// if hex [ 1 ] then
61092: LD_VAR 0 15
61096: PUSH
61097: LD_INT 1
61099: ARRAY
61100: IFFALSE 61104
// exit ;
61102: GO 61545
// height := hex [ 2 ] ;
61104: LD_ADDR_VAR 0 13
61108: PUSH
61109: LD_VAR 0 15
61113: PUSH
61114: LD_INT 2
61116: ARRAY
61117: ST_TO_ADDR
// for i = 1 to hexes do
61118: LD_ADDR_VAR 0 7
61122: PUSH
61123: DOUBLE
61124: LD_INT 1
61126: DEC
61127: ST_TO_ADDR
61128: LD_VAR 0 12
61132: PUSH
61133: FOR_TO
61134: IFFALSE 61464
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
61136: LD_VAR 0 12
61140: PUSH
61141: LD_VAR 0 7
61145: ARRAY
61146: PUSH
61147: LD_INT 1
61149: ARRAY
61150: PPUSH
61151: LD_VAR 0 12
61155: PUSH
61156: LD_VAR 0 7
61160: ARRAY
61161: PUSH
61162: LD_INT 2
61164: ARRAY
61165: PPUSH
61166: CALL_OW 488
61170: NOT
61171: PUSH
61172: LD_VAR 0 12
61176: PUSH
61177: LD_VAR 0 7
61181: ARRAY
61182: PUSH
61183: LD_INT 1
61185: ARRAY
61186: PPUSH
61187: LD_VAR 0 12
61191: PUSH
61192: LD_VAR 0 7
61196: ARRAY
61197: PUSH
61198: LD_INT 2
61200: ARRAY
61201: PPUSH
61202: CALL_OW 428
61206: PUSH
61207: LD_INT 0
61209: GREATER
61210: OR
61211: PUSH
61212: LD_VAR 0 12
61216: PUSH
61217: LD_VAR 0 7
61221: ARRAY
61222: PUSH
61223: LD_INT 1
61225: ARRAY
61226: PPUSH
61227: LD_VAR 0 12
61231: PUSH
61232: LD_VAR 0 7
61236: ARRAY
61237: PUSH
61238: LD_INT 2
61240: ARRAY
61241: PPUSH
61242: CALL_OW 351
61246: OR
61247: IFFALSE 61253
// exit ;
61249: POP
61250: POP
61251: GO 61545
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61253: LD_ADDR_VAR 0 8
61257: PUSH
61258: LD_VAR 0 12
61262: PUSH
61263: LD_VAR 0 7
61267: ARRAY
61268: PUSH
61269: LD_INT 1
61271: ARRAY
61272: PPUSH
61273: LD_VAR 0 12
61277: PUSH
61278: LD_VAR 0 7
61282: ARRAY
61283: PUSH
61284: LD_INT 2
61286: ARRAY
61287: PPUSH
61288: CALL_OW 546
61292: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
61293: LD_VAR 0 8
61297: PUSH
61298: LD_INT 1
61300: ARRAY
61301: PUSH
61302: LD_VAR 0 8
61306: PUSH
61307: LD_INT 2
61309: ARRAY
61310: PUSH
61311: LD_VAR 0 13
61315: PUSH
61316: LD_INT 2
61318: PLUS
61319: GREATER
61320: OR
61321: PUSH
61322: LD_VAR 0 8
61326: PUSH
61327: LD_INT 2
61329: ARRAY
61330: PUSH
61331: LD_VAR 0 13
61335: PUSH
61336: LD_INT 2
61338: MINUS
61339: LESS
61340: OR
61341: PUSH
61342: LD_VAR 0 8
61346: PUSH
61347: LD_INT 3
61349: ARRAY
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 8
61356: PUSH
61357: LD_INT 9
61359: PUSH
61360: LD_INT 10
61362: PUSH
61363: LD_INT 11
61365: PUSH
61366: LD_INT 12
61368: PUSH
61369: LD_INT 13
61371: PUSH
61372: LD_INT 16
61374: PUSH
61375: LD_INT 17
61377: PUSH
61378: LD_INT 18
61380: PUSH
61381: LD_INT 19
61383: PUSH
61384: LD_INT 20
61386: PUSH
61387: LD_INT 21
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: IN
61405: NOT
61406: OR
61407: PUSH
61408: LD_VAR 0 8
61412: PUSH
61413: LD_INT 5
61415: ARRAY
61416: NOT
61417: OR
61418: PUSH
61419: LD_VAR 0 8
61423: PUSH
61424: LD_INT 6
61426: ARRAY
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: LD_INT 7
61436: PUSH
61437: LD_INT 9
61439: PUSH
61440: LD_INT 10
61442: PUSH
61443: LD_INT 11
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: IN
61454: NOT
61455: OR
61456: IFFALSE 61462
// exit ;
61458: POP
61459: POP
61460: GO 61545
// end ;
61462: GO 61133
61464: POP
61465: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
61466: LD_VAR 0 9
61470: PPUSH
61471: LD_VAR 0 3
61475: PPUSH
61476: LD_VAR 0 4
61480: PPUSH
61481: LD_INT 20
61483: PPUSH
61484: CALL 53491 0 4
61488: PUSH
61489: LD_INT 4
61491: ARRAY
61492: IFFALSE 61496
// exit ;
61494: GO 61545
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
61496: LD_VAR 0 2
61500: PUSH
61501: LD_INT 29
61503: PUSH
61504: LD_INT 30
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: IN
61511: PUSH
61512: LD_VAR 0 3
61516: PPUSH
61517: LD_VAR 0 4
61521: PPUSH
61522: LD_VAR 0 9
61526: PPUSH
61527: CALL_OW 440
61531: NOT
61532: AND
61533: IFFALSE 61537
// exit ;
61535: GO 61545
// result := true ;
61537: LD_ADDR_VAR 0 6
61541: PUSH
61542: LD_INT 1
61544: ST_TO_ADDR
// end ;
61545: LD_VAR 0 6
61549: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
61550: LD_INT 0
61552: PPUSH
61553: PPUSH
61554: PPUSH
61555: PPUSH
61556: PPUSH
61557: PPUSH
61558: PPUSH
61559: PPUSH
61560: PPUSH
61561: PPUSH
61562: PPUSH
61563: PPUSH
61564: PPUSH
61565: PPUSH
61566: PPUSH
61567: PPUSH
61568: PPUSH
61569: PPUSH
61570: PPUSH
61571: PPUSH
61572: PPUSH
61573: PPUSH
61574: PPUSH
61575: PPUSH
61576: PPUSH
61577: PPUSH
61578: PPUSH
61579: PPUSH
61580: PPUSH
61581: PPUSH
61582: PPUSH
61583: PPUSH
61584: PPUSH
61585: PPUSH
61586: PPUSH
61587: PPUSH
61588: PPUSH
61589: PPUSH
61590: PPUSH
61591: PPUSH
61592: PPUSH
61593: PPUSH
61594: PPUSH
61595: PPUSH
61596: PPUSH
61597: PPUSH
61598: PPUSH
61599: PPUSH
61600: PPUSH
61601: PPUSH
61602: PPUSH
61603: PPUSH
61604: PPUSH
61605: PPUSH
61606: PPUSH
61607: PPUSH
61608: PPUSH
61609: PPUSH
// result = [ ] ;
61610: LD_ADDR_VAR 0 7
61614: PUSH
61615: EMPTY
61616: ST_TO_ADDR
// temp_list = [ ] ;
61617: LD_ADDR_VAR 0 9
61621: PUSH
61622: EMPTY
61623: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
61624: LD_VAR 0 4
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: LD_INT 3
61640: PUSH
61641: LD_INT 4
61643: PUSH
61644: LD_INT 5
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: IN
61655: NOT
61656: PUSH
61657: LD_VAR 0 1
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: IN
61672: PUSH
61673: LD_VAR 0 5
61677: PUSH
61678: LD_INT 1
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: LD_INT 3
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: LIST
61691: IN
61692: NOT
61693: AND
61694: OR
61695: IFFALSE 61699
// exit ;
61697: GO 80090
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
61699: LD_VAR 0 1
61703: PUSH
61704: LD_INT 6
61706: PUSH
61707: LD_INT 7
61709: PUSH
61710: LD_INT 8
61712: PUSH
61713: LD_INT 13
61715: PUSH
61716: LD_INT 12
61718: PUSH
61719: LD_INT 15
61721: PUSH
61722: LD_INT 11
61724: PUSH
61725: LD_INT 14
61727: PUSH
61728: LD_INT 10
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: IN
61742: IFFALSE 61752
// btype = b_lab ;
61744: LD_ADDR_VAR 0 1
61748: PUSH
61749: LD_INT 6
61751: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
61752: LD_VAR 0 6
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: LD_INT 1
61762: PUSH
61763: LD_INT 2
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: LIST
61770: IN
61771: NOT
61772: PUSH
61773: LD_VAR 0 1
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: LD_INT 2
61786: PUSH
61787: LD_INT 3
61789: PUSH
61790: LD_INT 6
61792: PUSH
61793: LD_INT 36
61795: PUSH
61796: LD_INT 4
61798: PUSH
61799: LD_INT 5
61801: PUSH
61802: LD_INT 31
61804: PUSH
61805: LD_INT 32
61807: PUSH
61808: LD_INT 33
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: IN
61824: NOT
61825: PUSH
61826: LD_VAR 0 6
61830: PUSH
61831: LD_INT 1
61833: EQUAL
61834: AND
61835: OR
61836: PUSH
61837: LD_VAR 0 1
61841: PUSH
61842: LD_INT 2
61844: PUSH
61845: LD_INT 3
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: IN
61852: NOT
61853: PUSH
61854: LD_VAR 0 6
61858: PUSH
61859: LD_INT 2
61861: EQUAL
61862: AND
61863: OR
61864: IFFALSE 61874
// mode = 0 ;
61866: LD_ADDR_VAR 0 6
61870: PUSH
61871: LD_INT 0
61873: ST_TO_ADDR
// case mode of 0 :
61874: LD_VAR 0 6
61878: PUSH
61879: LD_INT 0
61881: DOUBLE
61882: EQUAL
61883: IFTRUE 61887
61885: GO 73340
61887: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61888: LD_ADDR_VAR 0 11
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 1
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: LD_INT 0
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: NEG
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: LD_INT 2
61973: NEG
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: LD_INT 2
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: LD_INT 2
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: LD_INT 1
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: LD_INT 3
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62081: LD_ADDR_VAR 0 12
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: NEG
62151: PUSH
62152: LD_INT 1
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 2
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 2
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: LD_INT 1
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 2
62204: NEG
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 2
62215: NEG
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 2
62227: NEG
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 3
62238: NEG
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 3
62249: NEG
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62277: LD_ADDR_VAR 0 13
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 1
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: LD_INT 1
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: LD_INT 1
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: LD_INT 2
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 2
62380: PUSH
62381: LD_INT 2
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: LD_INT 2
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 2
62400: NEG
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 2
62412: NEG
62413: PUSH
62414: LD_INT 2
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 2
62424: NEG
62425: PUSH
62426: LD_INT 3
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 3
62436: NEG
62437: PUSH
62438: LD_INT 2
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 3
62448: NEG
62449: PUSH
62450: LD_INT 3
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62476: LD_ADDR_VAR 0 14
62480: PUSH
62481: LD_INT 0
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 1
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 1
62557: NEG
62558: PUSH
62559: LD_INT 2
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: LD_INT 2
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: LD_INT 1
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: LD_INT 2
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 1
62611: NEG
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: LD_INT 3
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 3
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 2
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62672: LD_ADDR_VAR 0 15
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 2
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: LD_INT 1
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 2
62795: NEG
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 2
62806: NEG
62807: PUSH
62808: LD_INT 1
62810: NEG
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 2
62818: PUSH
62819: LD_INT 1
62821: NEG
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 3
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 3
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62865: LD_ADDR_VAR 0 16
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: LD_INT 1
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: LD_INT 1
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: LD_INT 1
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: LD_INT 1
62938: NEG
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 1
62946: NEG
62947: PUSH
62948: LD_INT 2
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 2
62958: PUSH
62959: LD_INT 1
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 2
62968: PUSH
62969: LD_INT 2
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 1
62978: PUSH
62979: LD_INT 2
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 2
62988: NEG
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 2
63000: NEG
63001: PUSH
63002: LD_INT 2
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 3
63012: PUSH
63013: LD_INT 2
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 3
63022: PUSH
63023: LD_INT 3
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 2
63032: PUSH
63033: LD_INT 3
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63058: LD_ADDR_VAR 0 17
63062: PUSH
63063: LD_INT 0
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: LD_INT 1
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 1
63139: NEG
63140: PUSH
63141: LD_INT 2
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: LD_INT 2
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 2
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: LD_INT 2
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_INT 2
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 2
63245: NEG
63246: PUSH
63247: LD_INT 1
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 2
63257: NEG
63258: PUSH
63259: LD_INT 2
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63288: LD_ADDR_VAR 0 18
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: LD_INT 1
63308: NEG
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: LD_INT 2
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: LD_INT 2
63384: NEG
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 1
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 2
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 2
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: LD_INT 2
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 2
63464: NEG
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 2
63475: NEG
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 2
63487: NEG
63488: PUSH
63489: LD_INT 2
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63518: LD_ADDR_VAR 0 19
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: LD_INT 1
63538: NEG
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 1
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: LD_INT 1
63591: NEG
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: LD_INT 2
63603: NEG
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: LD_INT 2
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 2
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 2
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 2
63653: PUSH
63654: LD_INT 2
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 2
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 2
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 2
63694: NEG
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 2
63705: NEG
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 2
63717: NEG
63718: PUSH
63719: LD_INT 2
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63748: LD_ADDR_VAR 0 20
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 1
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 1
63806: NEG
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 1
63817: NEG
63818: PUSH
63819: LD_INT 1
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 1
63829: NEG
63830: PUSH
63831: LD_INT 2
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: LD_INT 2
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 2
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: LD_INT 2
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: LD_INT 2
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: LD_INT 2
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 2
63924: NEG
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 2
63935: NEG
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 2
63947: NEG
63948: PUSH
63949: LD_INT 2
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63978: LD_ADDR_VAR 0 21
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: LD_INT 0
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 0
63995: PUSH
63996: LD_INT 1
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: LD_INT 1
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 1
64036: NEG
64037: PUSH
64038: LD_INT 0
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 1
64047: NEG
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 1
64059: NEG
64060: PUSH
64061: LD_INT 2
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: LD_INT 2
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: LD_INT 1
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 2
64093: PUSH
64094: LD_INT 0
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 2
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 2
64113: PUSH
64114: LD_INT 2
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 1
64123: PUSH
64124: LD_INT 2
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: LD_INT 2
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 1
64143: NEG
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 2
64154: NEG
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 2
64165: NEG
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 2
64177: NEG
64178: PUSH
64179: LD_INT 2
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64208: LD_ADDR_VAR 0 22
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 0
64225: PUSH
64226: LD_INT 1
64228: NEG
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 1
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 1
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 0
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 1
64266: NEG
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 1
64277: NEG
64278: PUSH
64279: LD_INT 1
64281: NEG
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: LD_INT 2
64293: NEG
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: LD_INT 2
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 1
64312: PUSH
64313: LD_INT 1
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 2
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 2
64333: PUSH
64334: LD_INT 1
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 2
64343: PUSH
64344: LD_INT 2
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 1
64353: PUSH
64354: LD_INT 2
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: LD_INT 2
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: LD_INT 1
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 2
64384: NEG
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 2
64395: NEG
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 2
64407: NEG
64408: PUSH
64409: LD_INT 2
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64438: LD_ADDR_VAR 0 23
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 0
64455: PUSH
64456: LD_INT 1
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 1
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: LD_INT 1
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 1
64507: NEG
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: LD_INT 2
64523: NEG
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: LD_INT 2
64534: NEG
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 1
64542: PUSH
64543: LD_INT 1
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 2
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 2
64563: PUSH
64564: LD_INT 1
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 2
64573: PUSH
64574: LD_INT 2
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: LD_INT 2
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: LD_INT 2
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 1
64603: NEG
64604: PUSH
64605: LD_INT 1
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 2
64614: NEG
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 2
64625: NEG
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 2
64637: NEG
64638: PUSH
64639: LD_INT 2
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 2
64649: NEG
64650: PUSH
64651: LD_INT 3
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: LD_INT 3
64665: NEG
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: LD_INT 2
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 2
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
64718: LD_ADDR_VAR 0 24
64722: PUSH
64723: LD_INT 0
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 1
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 1
64756: PUSH
64757: LD_INT 1
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 0
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: LD_INT 1
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: PUSH
64801: LD_INT 2
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: LD_INT 2
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 1
64822: PUSH
64823: LD_INT 1
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 2
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 2
64843: PUSH
64844: LD_INT 1
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 2
64853: PUSH
64854: LD_INT 2
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 1
64863: PUSH
64864: LD_INT 2
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: LD_INT 2
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: PUSH
64885: LD_INT 1
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 2
64905: NEG
64906: PUSH
64907: LD_INT 1
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 2
64917: NEG
64918: PUSH
64919: LD_INT 2
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: LD_INT 2
64932: NEG
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 2
64940: PUSH
64941: LD_INT 1
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 3
64951: PUSH
64952: LD_INT 1
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 3
64961: PUSH
64962: LD_INT 2
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
64994: LD_ADDR_VAR 0 25
64998: PUSH
64999: LD_INT 0
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 1
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: LD_INT 1
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 1
65052: NEG
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 1
65063: NEG
65064: PUSH
65065: LD_INT 1
65067: NEG
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 1
65075: NEG
65076: PUSH
65077: LD_INT 2
65079: NEG
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: LD_INT 2
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: PUSH
65099: LD_INT 1
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 2
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 2
65119: PUSH
65120: LD_INT 1
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 2
65129: PUSH
65130: LD_INT 2
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: LD_INT 2
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: LD_INT 2
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: NEG
65160: PUSH
65161: LD_INT 1
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 2
65170: NEG
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 2
65181: NEG
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 2
65193: NEG
65194: PUSH
65195: LD_INT 2
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 3
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 3
65215: PUSH
65216: LD_INT 2
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 2
65225: PUSH
65226: LD_INT 3
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 1
65235: PUSH
65236: LD_INT 3
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65268: LD_ADDR_VAR 0 26
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: LD_INT 1
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: LD_INT 0
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: LD_INT 0
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: LD_INT 1
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: NEG
65350: PUSH
65351: LD_INT 2
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: LD_INT 2
65364: NEG
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: LD_INT 1
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 2
65383: PUSH
65384: LD_INT 0
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 2
65393: PUSH
65394: LD_INT 1
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 2
65403: PUSH
65404: LD_INT 2
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: LD_INT 2
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 1
65433: NEG
65434: PUSH
65435: LD_INT 1
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 2
65444: NEG
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 2
65455: NEG
65456: PUSH
65457: LD_INT 1
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 2
65467: NEG
65468: PUSH
65469: LD_INT 2
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 2
65479: PUSH
65480: LD_INT 3
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: LD_INT 3
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 1
65499: NEG
65500: PUSH
65501: LD_INT 2
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 2
65510: NEG
65511: PUSH
65512: LD_INT 1
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65544: LD_ADDR_VAR 0 27
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: LD_INT 0
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: LD_INT 1
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: PUSH
65573: LD_INT 0
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 1
65582: PUSH
65583: LD_INT 1
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 0
65592: PUSH
65593: LD_INT 1
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 1
65602: NEG
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: NEG
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 1
65625: NEG
65626: PUSH
65627: LD_INT 2
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: LD_INT 2
65640: NEG
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 1
65648: PUSH
65649: LD_INT 1
65651: NEG
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 2
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 2
65669: PUSH
65670: LD_INT 1
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 2
65679: PUSH
65680: LD_INT 2
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 1
65689: PUSH
65690: LD_INT 2
65692: PUSH
65693: EMPTY
65694: LIST
65695: LIST
65696: PUSH
65697: LD_INT 0
65699: PUSH
65700: LD_INT 2
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: LD_INT 1
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 2
65720: NEG
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 2
65731: NEG
65732: PUSH
65733: LD_INT 1
65735: NEG
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 2
65743: NEG
65744: PUSH
65745: LD_INT 2
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 1
65755: NEG
65756: PUSH
65757: LD_INT 2
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 2
65766: NEG
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 3
65777: NEG
65778: PUSH
65779: LD_INT 1
65781: NEG
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 3
65789: NEG
65790: PUSH
65791: LD_INT 2
65793: NEG
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65824: LD_ADDR_VAR 0 28
65828: PUSH
65829: LD_INT 0
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 0
65841: PUSH
65842: LD_INT 1
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 1
65852: PUSH
65853: LD_INT 0
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: LD_INT 1
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 1
65882: NEG
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 1
65893: NEG
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 1
65905: NEG
65906: PUSH
65907: LD_INT 2
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: LD_INT 2
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: LD_INT 1
65931: NEG
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 2
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 2
65949: PUSH
65950: LD_INT 1
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 2
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 1
65969: PUSH
65970: LD_INT 2
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: LD_INT 2
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 1
65989: NEG
65990: PUSH
65991: LD_INT 1
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 2
66000: NEG
66001: PUSH
66002: LD_INT 0
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 2
66011: NEG
66012: PUSH
66013: LD_INT 1
66015: NEG
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 2
66023: NEG
66024: PUSH
66025: LD_INT 2
66027: NEG
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 2
66035: NEG
66036: PUSH
66037: LD_INT 3
66039: NEG
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 1
66047: NEG
66048: PUSH
66049: LD_INT 3
66051: NEG
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 3
66059: NEG
66060: PUSH
66061: LD_INT 1
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 3
66071: NEG
66072: PUSH
66073: LD_INT 2
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66106: LD_ADDR_VAR 0 29
66110: PUSH
66111: LD_INT 0
66113: PUSH
66114: LD_INT 0
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 0
66123: PUSH
66124: LD_INT 1
66126: NEG
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 1
66134: PUSH
66135: LD_INT 0
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 1
66144: PUSH
66145: LD_INT 1
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 0
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 1
66164: NEG
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: LD_INT 1
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 1
66187: NEG
66188: PUSH
66189: LD_INT 2
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 0
66199: PUSH
66200: LD_INT 2
66202: NEG
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 1
66210: PUSH
66211: LD_INT 1
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 2
66221: PUSH
66222: LD_INT 0
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 2
66231: PUSH
66232: LD_INT 1
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: LD_INT 2
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 0
66251: PUSH
66252: LD_INT 2
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 1
66261: NEG
66262: PUSH
66263: LD_INT 1
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: NEG
66273: PUSH
66274: LD_INT 1
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 2
66284: NEG
66285: PUSH
66286: LD_INT 2
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 2
66296: NEG
66297: PUSH
66298: LD_INT 3
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 2
66308: PUSH
66309: LD_INT 1
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 3
66319: PUSH
66320: LD_INT 1
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 1
66329: PUSH
66330: LD_INT 3
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 1
66339: NEG
66340: PUSH
66341: LD_INT 2
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 3
66350: NEG
66351: PUSH
66352: LD_INT 2
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66385: LD_ADDR_VAR 0 30
66389: PUSH
66390: LD_INT 0
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 0
66402: PUSH
66403: LD_INT 1
66405: NEG
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 1
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 1
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: LD_INT 1
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 1
66443: NEG
66444: PUSH
66445: LD_INT 0
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 1
66454: NEG
66455: PUSH
66456: LD_INT 1
66458: NEG
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 1
66466: NEG
66467: PUSH
66468: LD_INT 2
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: LD_INT 2
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 1
66489: PUSH
66490: LD_INT 1
66492: NEG
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 2
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 2
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 2
66520: PUSH
66521: LD_INT 2
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 1
66530: PUSH
66531: LD_INT 2
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 1
66540: NEG
66541: PUSH
66542: LD_INT 1
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 2
66551: NEG
66552: PUSH
66553: LD_INT 0
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 2
66562: NEG
66563: PUSH
66564: LD_INT 1
66566: NEG
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 1
66574: NEG
66575: PUSH
66576: LD_INT 3
66578: NEG
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 1
66586: PUSH
66587: LD_INT 2
66589: NEG
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 3
66597: PUSH
66598: LD_INT 2
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 2
66607: PUSH
66608: LD_INT 3
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 2
66617: NEG
66618: PUSH
66619: LD_INT 1
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 3
66628: NEG
66629: PUSH
66630: LD_INT 1
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66663: LD_ADDR_VAR 0 31
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: LD_INT 0
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 0
66680: PUSH
66681: LD_INT 1
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 1
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 1
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 1
66721: NEG
66722: PUSH
66723: LD_INT 0
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 1
66732: NEG
66733: PUSH
66734: LD_INT 1
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 1
66744: NEG
66745: PUSH
66746: LD_INT 2
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 1
66756: PUSH
66757: LD_INT 1
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 2
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 2
66777: PUSH
66778: LD_INT 1
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 2
66787: PUSH
66788: LD_INT 2
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: LD_INT 1
66797: PUSH
66798: LD_INT 2
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 0
66807: PUSH
66808: LD_INT 2
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 1
66817: NEG
66818: PUSH
66819: LD_INT 1
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 2
66828: NEG
66829: PUSH
66830: LD_INT 1
66832: NEG
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 2
66840: NEG
66841: PUSH
66842: LD_INT 2
66844: NEG
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 2
66852: NEG
66853: PUSH
66854: LD_INT 3
66856: NEG
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 2
66864: PUSH
66865: LD_INT 1
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 3
66875: PUSH
66876: LD_INT 1
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: LD_INT 3
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: NEG
66896: PUSH
66897: LD_INT 2
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 3
66906: NEG
66907: PUSH
66908: LD_INT 2
66910: NEG
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66941: LD_ADDR_VAR 0 32
66945: PUSH
66946: LD_INT 0
66948: PUSH
66949: LD_INT 0
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 0
66958: PUSH
66959: LD_INT 1
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 1
66969: PUSH
66970: LD_INT 0
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 1
66979: PUSH
66980: LD_INT 1
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 0
66989: PUSH
66990: LD_INT 1
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 1
66999: NEG
67000: PUSH
67001: LD_INT 0
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 1
67010: NEG
67011: PUSH
67012: LD_INT 1
67014: NEG
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: PUSH
67024: LD_INT 2
67026: NEG
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: LD_INT 2
67037: NEG
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 1
67045: PUSH
67046: LD_INT 1
67048: NEG
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 2
67056: PUSH
67057: LD_INT 1
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 2
67066: PUSH
67067: LD_INT 2
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 1
67076: PUSH
67077: LD_INT 2
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: LD_INT 2
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 1
67096: NEG
67097: PUSH
67098: LD_INT 1
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 2
67107: NEG
67108: PUSH
67109: LD_INT 0
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 2
67118: NEG
67119: PUSH
67120: LD_INT 1
67122: NEG
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 1
67130: NEG
67131: PUSH
67132: LD_INT 3
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: LD_INT 2
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 3
67153: PUSH
67154: LD_INT 2
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 2
67163: PUSH
67164: LD_INT 3
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 2
67173: NEG
67174: PUSH
67175: LD_INT 1
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 3
67184: NEG
67185: PUSH
67186: LD_INT 1
67188: NEG
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67219: LD_ADDR_VAR 0 33
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: LD_INT 0
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 0
67236: PUSH
67237: LD_INT 1
67239: NEG
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 1
67247: PUSH
67248: LD_INT 0
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: LD_INT 1
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 0
67267: PUSH
67268: LD_INT 1
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 1
67277: NEG
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 1
67288: NEG
67289: PUSH
67290: LD_INT 1
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 1
67300: NEG
67301: PUSH
67302: LD_INT 2
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 1
67312: PUSH
67313: LD_INT 1
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 2
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 2
67333: PUSH
67334: LD_INT 1
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 1
67343: PUSH
67344: LD_INT 2
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 0
67353: PUSH
67354: LD_INT 2
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 1
67363: NEG
67364: PUSH
67365: LD_INT 1
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 2
67374: NEG
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 2
67385: NEG
67386: PUSH
67387: LD_INT 1
67389: NEG
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 2
67397: NEG
67398: PUSH
67399: LD_INT 2
67401: NEG
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 2
67409: NEG
67410: PUSH
67411: LD_INT 3
67413: NEG
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 2
67421: PUSH
67422: LD_INT 1
67424: NEG
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 3
67432: PUSH
67433: LD_INT 1
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 1
67442: PUSH
67443: LD_INT 3
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 1
67452: NEG
67453: PUSH
67454: LD_INT 2
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 3
67463: NEG
67464: PUSH
67465: LD_INT 2
67467: NEG
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67498: LD_ADDR_VAR 0 34
67502: PUSH
67503: LD_INT 0
67505: PUSH
67506: LD_INT 0
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: LD_INT 1
67518: NEG
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 1
67526: PUSH
67527: LD_INT 0
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 1
67536: PUSH
67537: LD_INT 1
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 0
67546: PUSH
67547: LD_INT 1
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 1
67556: NEG
67557: PUSH
67558: LD_INT 0
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 1
67567: NEG
67568: PUSH
67569: LD_INT 1
67571: NEG
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 1
67579: NEG
67580: PUSH
67581: LD_INT 2
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: LD_INT 2
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 1
67602: PUSH
67603: LD_INT 1
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 2
67613: PUSH
67614: LD_INT 1
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 2
67623: PUSH
67624: LD_INT 2
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 1
67633: PUSH
67634: LD_INT 2
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 1
67643: NEG
67644: PUSH
67645: LD_INT 1
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 2
67654: NEG
67655: PUSH
67656: LD_INT 0
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 2
67665: NEG
67666: PUSH
67667: LD_INT 1
67669: NEG
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 2
67677: NEG
67678: PUSH
67679: LD_INT 2
67681: NEG
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 1
67689: NEG
67690: PUSH
67691: LD_INT 3
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 1
67701: PUSH
67702: LD_INT 2
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 3
67712: PUSH
67713: LD_INT 2
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 2
67722: PUSH
67723: LD_INT 3
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 2
67732: NEG
67733: PUSH
67734: LD_INT 1
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 3
67743: NEG
67744: PUSH
67745: LD_INT 1
67747: NEG
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
67778: LD_ADDR_VAR 0 35
67782: PUSH
67783: LD_INT 0
67785: PUSH
67786: LD_INT 0
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 0
67795: PUSH
67796: LD_INT 1
67798: NEG
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 1
67806: PUSH
67807: LD_INT 0
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 1
67816: PUSH
67817: LD_INT 1
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 0
67826: PUSH
67827: LD_INT 1
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 1
67836: NEG
67837: PUSH
67838: LD_INT 0
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 1
67847: NEG
67848: PUSH
67849: LD_INT 1
67851: NEG
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 2
67859: PUSH
67860: LD_INT 1
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 2
67869: NEG
67870: PUSH
67871: LD_INT 1
67873: NEG
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
67890: LD_ADDR_VAR 0 36
67894: PUSH
67895: LD_INT 0
67897: PUSH
67898: LD_INT 0
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 0
67907: PUSH
67908: LD_INT 1
67910: NEG
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 1
67918: PUSH
67919: LD_INT 0
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 1
67928: PUSH
67929: LD_INT 1
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 0
67938: PUSH
67939: LD_INT 1
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 1
67948: NEG
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 1
67959: NEG
67960: PUSH
67961: LD_INT 1
67963: NEG
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 1
67971: NEG
67972: PUSH
67973: LD_INT 2
67975: NEG
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 1
67983: PUSH
67984: LD_INT 2
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
68002: LD_ADDR_VAR 0 37
68006: PUSH
68007: LD_INT 0
68009: PUSH
68010: LD_INT 0
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 0
68019: PUSH
68020: LD_INT 1
68022: NEG
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 1
68030: PUSH
68031: LD_INT 0
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 1
68040: PUSH
68041: LD_INT 1
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 0
68050: PUSH
68051: LD_INT 1
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 1
68060: NEG
68061: PUSH
68062: LD_INT 0
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 1
68071: NEG
68072: PUSH
68073: LD_INT 1
68075: NEG
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 1
68083: PUSH
68084: LD_INT 1
68086: NEG
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 1
68094: NEG
68095: PUSH
68096: LD_INT 1
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
68114: LD_ADDR_VAR 0 38
68118: PUSH
68119: LD_INT 0
68121: PUSH
68122: LD_INT 0
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: LD_INT 0
68131: PUSH
68132: LD_INT 1
68134: NEG
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 1
68142: PUSH
68143: LD_INT 0
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 1
68152: PUSH
68153: LD_INT 1
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 0
68162: PUSH
68163: LD_INT 1
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 1
68172: NEG
68173: PUSH
68174: LD_INT 0
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 1
68183: NEG
68184: PUSH
68185: LD_INT 1
68187: NEG
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 2
68195: PUSH
68196: LD_INT 1
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 2
68205: NEG
68206: PUSH
68207: LD_INT 1
68209: NEG
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
68226: LD_ADDR_VAR 0 39
68230: PUSH
68231: LD_INT 0
68233: PUSH
68234: LD_INT 0
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 0
68243: PUSH
68244: LD_INT 1
68246: NEG
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 1
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 1
68264: PUSH
68265: LD_INT 1
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 0
68274: PUSH
68275: LD_INT 1
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 1
68284: NEG
68285: PUSH
68286: LD_INT 0
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 1
68295: NEG
68296: PUSH
68297: LD_INT 1
68299: NEG
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 1
68307: NEG
68308: PUSH
68309: LD_INT 2
68311: NEG
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 1
68319: PUSH
68320: LD_INT 2
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
68338: LD_ADDR_VAR 0 40
68342: PUSH
68343: LD_INT 0
68345: PUSH
68346: LD_INT 0
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 0
68355: PUSH
68356: LD_INT 1
68358: NEG
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 1
68366: PUSH
68367: LD_INT 0
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 1
68376: PUSH
68377: LD_INT 1
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 0
68386: PUSH
68387: LD_INT 1
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 1
68396: NEG
68397: PUSH
68398: LD_INT 0
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 1
68407: NEG
68408: PUSH
68409: LD_INT 1
68411: NEG
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: LD_INT 1
68419: PUSH
68420: LD_INT 1
68422: NEG
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 1
68430: NEG
68431: PUSH
68432: LD_INT 1
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68450: LD_ADDR_VAR 0 41
68454: PUSH
68455: LD_INT 0
68457: PUSH
68458: LD_INT 0
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 0
68467: PUSH
68468: LD_INT 1
68470: NEG
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 1
68478: PUSH
68479: LD_INT 0
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 1
68488: PUSH
68489: LD_INT 1
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 0
68498: PUSH
68499: LD_INT 1
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: LD_INT 1
68508: NEG
68509: PUSH
68510: LD_INT 0
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 1
68519: NEG
68520: PUSH
68521: LD_INT 1
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 1
68531: NEG
68532: PUSH
68533: LD_INT 2
68535: NEG
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 1
68543: PUSH
68544: LD_INT 1
68546: NEG
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 2
68554: PUSH
68555: LD_INT 0
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 2
68564: PUSH
68565: LD_INT 1
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 2
68574: PUSH
68575: LD_INT 2
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 1
68584: PUSH
68585: LD_INT 2
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 1
68594: NEG
68595: PUSH
68596: LD_INT 1
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 2
68605: NEG
68606: PUSH
68607: LD_INT 0
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 2
68616: NEG
68617: PUSH
68618: LD_INT 1
68620: NEG
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 2
68628: NEG
68629: PUSH
68630: LD_INT 2
68632: NEG
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 2
68640: NEG
68641: PUSH
68642: LD_INT 3
68644: NEG
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 2
68652: PUSH
68653: LD_INT 1
68655: NEG
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 3
68663: PUSH
68664: LD_INT 0
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 3
68673: PUSH
68674: LD_INT 1
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 3
68683: PUSH
68684: LD_INT 2
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 3
68693: PUSH
68694: LD_INT 3
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 2
68703: PUSH
68704: LD_INT 3
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 2
68713: NEG
68714: PUSH
68715: LD_INT 1
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 3
68724: NEG
68725: PUSH
68726: LD_INT 0
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 3
68735: NEG
68736: PUSH
68737: LD_INT 1
68739: NEG
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 3
68747: NEG
68748: PUSH
68749: LD_INT 2
68751: NEG
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 3
68759: NEG
68760: PUSH
68761: LD_INT 3
68763: NEG
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68800: LD_ADDR_VAR 0 42
68804: PUSH
68805: LD_INT 0
68807: PUSH
68808: LD_INT 0
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 0
68817: PUSH
68818: LD_INT 1
68820: NEG
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 1
68828: PUSH
68829: LD_INT 0
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 1
68838: PUSH
68839: LD_INT 1
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 0
68848: PUSH
68849: LD_INT 1
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 1
68858: NEG
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 1
68869: NEG
68870: PUSH
68871: LD_INT 1
68873: NEG
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 1
68881: NEG
68882: PUSH
68883: LD_INT 2
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 0
68893: PUSH
68894: LD_INT 2
68896: NEG
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 1
68904: PUSH
68905: LD_INT 1
68907: NEG
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 2
68915: PUSH
68916: LD_INT 1
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 2
68925: PUSH
68926: LD_INT 2
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 1
68935: PUSH
68936: LD_INT 2
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 0
68945: PUSH
68946: LD_INT 2
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 1
68955: NEG
68956: PUSH
68957: LD_INT 1
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 2
68966: NEG
68967: PUSH
68968: LD_INT 1
68970: NEG
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 2
68978: NEG
68979: PUSH
68980: LD_INT 2
68982: NEG
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 2
68990: NEG
68991: PUSH
68992: LD_INT 3
68994: NEG
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 1
69002: NEG
69003: PUSH
69004: LD_INT 3
69006: NEG
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 0
69014: PUSH
69015: LD_INT 3
69017: NEG
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 1
69025: PUSH
69026: LD_INT 2
69028: NEG
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 3
69036: PUSH
69037: LD_INT 2
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 3
69046: PUSH
69047: LD_INT 3
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 2
69056: PUSH
69057: LD_INT 3
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 1
69066: PUSH
69067: LD_INT 3
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 0
69076: PUSH
69077: LD_INT 3
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 1
69086: NEG
69087: PUSH
69088: LD_INT 2
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 3
69097: NEG
69098: PUSH
69099: LD_INT 2
69101: NEG
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 3
69109: NEG
69110: PUSH
69111: LD_INT 3
69113: NEG
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69150: LD_ADDR_VAR 0 43
69154: PUSH
69155: LD_INT 0
69157: PUSH
69158: LD_INT 0
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 0
69167: PUSH
69168: LD_INT 1
69170: NEG
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 1
69178: PUSH
69179: LD_INT 0
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 1
69188: PUSH
69189: LD_INT 1
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 0
69198: PUSH
69199: LD_INT 1
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 1
69208: NEG
69209: PUSH
69210: LD_INT 0
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 1
69219: NEG
69220: PUSH
69221: LD_INT 1
69223: NEG
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 1
69231: NEG
69232: PUSH
69233: LD_INT 2
69235: NEG
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 0
69243: PUSH
69244: LD_INT 2
69246: NEG
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 1
69254: PUSH
69255: LD_INT 1
69257: NEG
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 2
69265: PUSH
69266: LD_INT 0
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 2
69275: PUSH
69276: LD_INT 1
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: LD_INT 1
69285: PUSH
69286: LD_INT 2
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 0
69295: PUSH
69296: LD_INT 2
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 1
69305: NEG
69306: PUSH
69307: LD_INT 1
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 2
69316: NEG
69317: PUSH
69318: LD_INT 0
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 2
69327: NEG
69328: PUSH
69329: LD_INT 1
69331: NEG
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 1
69339: NEG
69340: PUSH
69341: LD_INT 3
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: LD_INT 3
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: LD_INT 2
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 2
69373: PUSH
69374: LD_INT 1
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 3
69384: PUSH
69385: LD_INT 0
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 3
69394: PUSH
69395: LD_INT 1
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 1
69404: PUSH
69405: LD_INT 3
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 0
69414: PUSH
69415: LD_INT 3
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 1
69424: NEG
69425: PUSH
69426: LD_INT 2
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 2
69435: NEG
69436: PUSH
69437: LD_INT 1
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 3
69446: NEG
69447: PUSH
69448: LD_INT 0
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 3
69457: NEG
69458: PUSH
69459: LD_INT 1
69461: NEG
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69498: LD_ADDR_VAR 0 44
69502: PUSH
69503: LD_INT 0
69505: PUSH
69506: LD_INT 0
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 0
69515: PUSH
69516: LD_INT 1
69518: NEG
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: LD_INT 1
69526: PUSH
69527: LD_INT 0
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 1
69536: PUSH
69537: LD_INT 1
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 0
69546: PUSH
69547: LD_INT 1
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 1
69556: NEG
69557: PUSH
69558: LD_INT 0
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 1
69567: NEG
69568: PUSH
69569: LD_INT 1
69571: NEG
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 1
69579: NEG
69580: PUSH
69581: LD_INT 2
69583: NEG
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 1
69591: PUSH
69592: LD_INT 1
69594: NEG
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 2
69602: PUSH
69603: LD_INT 0
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 2
69612: PUSH
69613: LD_INT 1
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 2
69622: PUSH
69623: LD_INT 2
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 1
69632: PUSH
69633: LD_INT 2
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 1
69642: NEG
69643: PUSH
69644: LD_INT 1
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 2
69653: NEG
69654: PUSH
69655: LD_INT 0
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 2
69664: NEG
69665: PUSH
69666: LD_INT 1
69668: NEG
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 2
69676: NEG
69677: PUSH
69678: LD_INT 2
69680: NEG
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 2
69688: NEG
69689: PUSH
69690: LD_INT 3
69692: NEG
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 2
69700: PUSH
69701: LD_INT 1
69703: NEG
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 3
69711: PUSH
69712: LD_INT 0
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 3
69721: PUSH
69722: LD_INT 1
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 3
69731: PUSH
69732: LD_INT 2
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 3
69741: PUSH
69742: LD_INT 3
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 2
69751: PUSH
69752: LD_INT 3
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 2
69761: NEG
69762: PUSH
69763: LD_INT 1
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 3
69772: NEG
69773: PUSH
69774: LD_INT 0
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 3
69783: NEG
69784: PUSH
69785: LD_INT 1
69787: NEG
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 3
69795: NEG
69796: PUSH
69797: LD_INT 2
69799: NEG
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 3
69807: NEG
69808: PUSH
69809: LD_INT 3
69811: NEG
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69848: LD_ADDR_VAR 0 45
69852: PUSH
69853: LD_INT 0
69855: PUSH
69856: LD_INT 0
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 0
69865: PUSH
69866: LD_INT 1
69868: NEG
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 1
69876: PUSH
69877: LD_INT 0
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 1
69886: PUSH
69887: LD_INT 1
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 0
69896: PUSH
69897: LD_INT 1
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 1
69906: NEG
69907: PUSH
69908: LD_INT 0
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 1
69917: NEG
69918: PUSH
69919: LD_INT 1
69921: NEG
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 1
69929: NEG
69930: PUSH
69931: LD_INT 2
69933: NEG
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 0
69941: PUSH
69942: LD_INT 2
69944: NEG
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 1
69952: PUSH
69953: LD_INT 1
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 2
69963: PUSH
69964: LD_INT 1
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 2
69973: PUSH
69974: LD_INT 2
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 1
69983: PUSH
69984: LD_INT 2
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 0
69993: PUSH
69994: LD_INT 2
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 1
70003: NEG
70004: PUSH
70005: LD_INT 1
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 2
70014: NEG
70015: PUSH
70016: LD_INT 1
70018: NEG
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 2
70026: NEG
70027: PUSH
70028: LD_INT 2
70030: NEG
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 2
70038: NEG
70039: PUSH
70040: LD_INT 3
70042: NEG
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 1
70050: NEG
70051: PUSH
70052: LD_INT 3
70054: NEG
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 0
70062: PUSH
70063: LD_INT 3
70065: NEG
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 1
70073: PUSH
70074: LD_INT 2
70076: NEG
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 3
70084: PUSH
70085: LD_INT 2
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 3
70094: PUSH
70095: LD_INT 3
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 2
70104: PUSH
70105: LD_INT 3
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 1
70114: PUSH
70115: LD_INT 3
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 0
70124: PUSH
70125: LD_INT 3
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 1
70134: NEG
70135: PUSH
70136: LD_INT 2
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 3
70145: NEG
70146: PUSH
70147: LD_INT 2
70149: NEG
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 3
70157: NEG
70158: PUSH
70159: LD_INT 3
70161: NEG
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70198: LD_ADDR_VAR 0 46
70202: PUSH
70203: LD_INT 0
70205: PUSH
70206: LD_INT 0
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 0
70215: PUSH
70216: LD_INT 1
70218: NEG
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 1
70226: PUSH
70227: LD_INT 0
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 1
70236: PUSH
70237: LD_INT 1
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 0
70246: PUSH
70247: LD_INT 1
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 1
70256: NEG
70257: PUSH
70258: LD_INT 0
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 1
70267: NEG
70268: PUSH
70269: LD_INT 1
70271: NEG
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 1
70279: NEG
70280: PUSH
70281: LD_INT 2
70283: NEG
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 0
70291: PUSH
70292: LD_INT 2
70294: NEG
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 1
70302: PUSH
70303: LD_INT 1
70305: NEG
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 2
70313: PUSH
70314: LD_INT 0
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 2
70323: PUSH
70324: LD_INT 1
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 1
70333: PUSH
70334: LD_INT 2
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 0
70343: PUSH
70344: LD_INT 2
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 1
70353: NEG
70354: PUSH
70355: LD_INT 1
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 2
70364: NEG
70365: PUSH
70366: LD_INT 0
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 2
70375: NEG
70376: PUSH
70377: LD_INT 1
70379: NEG
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 1
70387: NEG
70388: PUSH
70389: LD_INT 3
70391: NEG
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 0
70399: PUSH
70400: LD_INT 3
70402: NEG
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 1
70410: PUSH
70411: LD_INT 2
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 2
70421: PUSH
70422: LD_INT 1
70424: NEG
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 3
70432: PUSH
70433: LD_INT 0
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 3
70442: PUSH
70443: LD_INT 1
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 1
70452: PUSH
70453: LD_INT 3
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: LD_INT 0
70462: PUSH
70463: LD_INT 3
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 1
70472: NEG
70473: PUSH
70474: LD_INT 2
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 2
70483: NEG
70484: PUSH
70485: LD_INT 1
70487: PUSH
70488: EMPTY
70489: LIST
70490: LIST
70491: PUSH
70492: LD_INT 3
70494: NEG
70495: PUSH
70496: LD_INT 0
70498: PUSH
70499: EMPTY
70500: LIST
70501: LIST
70502: PUSH
70503: LD_INT 3
70505: NEG
70506: PUSH
70507: LD_INT 1
70509: NEG
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70546: LD_ADDR_VAR 0 47
70550: PUSH
70551: LD_INT 0
70553: PUSH
70554: LD_INT 0
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 0
70563: PUSH
70564: LD_INT 1
70566: NEG
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 1
70574: PUSH
70575: LD_INT 0
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 1
70584: PUSH
70585: LD_INT 1
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 0
70594: PUSH
70595: LD_INT 1
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 1
70604: NEG
70605: PUSH
70606: LD_INT 0
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 1
70615: NEG
70616: PUSH
70617: LD_INT 1
70619: NEG
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 1
70627: NEG
70628: PUSH
70629: LD_INT 2
70631: NEG
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 0
70639: PUSH
70640: LD_INT 2
70642: NEG
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PUSH
70648: LD_INT 1
70650: PUSH
70651: LD_INT 1
70653: NEG
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 2
70661: NEG
70662: PUSH
70663: LD_INT 1
70665: NEG
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 2
70673: NEG
70674: PUSH
70675: LD_INT 2
70677: NEG
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70697: LD_ADDR_VAR 0 48
70701: PUSH
70702: LD_INT 0
70704: PUSH
70705: LD_INT 0
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 0
70714: PUSH
70715: LD_INT 1
70717: NEG
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 1
70725: PUSH
70726: LD_INT 0
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: LD_INT 1
70735: PUSH
70736: LD_INT 1
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 0
70745: PUSH
70746: LD_INT 1
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 1
70755: NEG
70756: PUSH
70757: LD_INT 0
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 1
70766: NEG
70767: PUSH
70768: LD_INT 1
70770: NEG
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 1
70778: NEG
70779: PUSH
70780: LD_INT 2
70782: NEG
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 0
70790: PUSH
70791: LD_INT 2
70793: NEG
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 1
70801: PUSH
70802: LD_INT 1
70804: NEG
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: LD_INT 2
70812: PUSH
70813: LD_INT 0
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: LD_INT 2
70822: PUSH
70823: LD_INT 1
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70844: LD_ADDR_VAR 0 49
70848: PUSH
70849: LD_INT 0
70851: PUSH
70852: LD_INT 0
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 0
70861: PUSH
70862: LD_INT 1
70864: NEG
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 1
70872: PUSH
70873: LD_INT 0
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 1
70882: PUSH
70883: LD_INT 1
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 0
70892: PUSH
70893: LD_INT 1
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: PUSH
70900: LD_INT 1
70902: NEG
70903: PUSH
70904: LD_INT 0
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 1
70913: NEG
70914: PUSH
70915: LD_INT 1
70917: NEG
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 1
70925: PUSH
70926: LD_INT 1
70928: NEG
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 2
70936: PUSH
70937: LD_INT 0
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 2
70946: PUSH
70947: LD_INT 1
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 2
70956: PUSH
70957: LD_INT 2
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 1
70966: PUSH
70967: LD_INT 2
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70988: LD_ADDR_VAR 0 50
70992: PUSH
70993: LD_INT 0
70995: PUSH
70996: LD_INT 0
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 0
71005: PUSH
71006: LD_INT 1
71008: NEG
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 1
71016: PUSH
71017: LD_INT 0
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 1
71026: PUSH
71027: LD_INT 1
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 0
71036: PUSH
71037: LD_INT 1
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 1
71046: NEG
71047: PUSH
71048: LD_INT 0
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 1
71057: NEG
71058: PUSH
71059: LD_INT 1
71061: NEG
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: LD_INT 2
71069: PUSH
71070: LD_INT 1
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 2
71079: PUSH
71080: LD_INT 2
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 1
71089: PUSH
71090: LD_INT 2
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 0
71099: PUSH
71100: LD_INT 2
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 1
71109: NEG
71110: PUSH
71111: LD_INT 1
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71132: LD_ADDR_VAR 0 51
71136: PUSH
71137: LD_INT 0
71139: PUSH
71140: LD_INT 0
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 0
71149: PUSH
71150: LD_INT 1
71152: NEG
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 1
71160: PUSH
71161: LD_INT 0
71163: PUSH
71164: EMPTY
71165: LIST
71166: LIST
71167: PUSH
71168: LD_INT 1
71170: PUSH
71171: LD_INT 1
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: LD_INT 0
71180: PUSH
71181: LD_INT 1
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: LD_INT 1
71190: NEG
71191: PUSH
71192: LD_INT 0
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: PUSH
71199: LD_INT 1
71201: NEG
71202: PUSH
71203: LD_INT 1
71205: NEG
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 1
71213: PUSH
71214: LD_INT 2
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 0
71223: PUSH
71224: LD_INT 2
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: LD_INT 1
71233: NEG
71234: PUSH
71235: LD_INT 1
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 2
71244: NEG
71245: PUSH
71246: LD_INT 0
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 2
71255: NEG
71256: PUSH
71257: LD_INT 1
71259: NEG
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71279: LD_ADDR_VAR 0 52
71283: PUSH
71284: LD_INT 0
71286: PUSH
71287: LD_INT 0
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 0
71296: PUSH
71297: LD_INT 1
71299: NEG
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 1
71307: PUSH
71308: LD_INT 0
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: LD_INT 1
71317: PUSH
71318: LD_INT 1
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 0
71327: PUSH
71328: LD_INT 1
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 1
71337: NEG
71338: PUSH
71339: LD_INT 0
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 1
71348: NEG
71349: PUSH
71350: LD_INT 1
71352: NEG
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 1
71360: NEG
71361: PUSH
71362: LD_INT 2
71364: NEG
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 1
71372: NEG
71373: PUSH
71374: LD_INT 1
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: LD_INT 2
71383: NEG
71384: PUSH
71385: LD_INT 0
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 2
71394: NEG
71395: PUSH
71396: LD_INT 1
71398: NEG
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: PUSH
71404: LD_INT 2
71406: NEG
71407: PUSH
71408: LD_INT 2
71410: NEG
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71430: LD_ADDR_VAR 0 53
71434: PUSH
71435: LD_INT 0
71437: PUSH
71438: LD_INT 0
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 0
71447: PUSH
71448: LD_INT 1
71450: NEG
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 1
71458: PUSH
71459: LD_INT 0
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 1
71468: PUSH
71469: LD_INT 1
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 0
71478: PUSH
71479: LD_INT 1
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 1
71488: NEG
71489: PUSH
71490: LD_INT 0
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 1
71499: NEG
71500: PUSH
71501: LD_INT 1
71503: NEG
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 1
71511: NEG
71512: PUSH
71513: LD_INT 2
71515: NEG
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 0
71523: PUSH
71524: LD_INT 2
71526: NEG
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 1
71534: PUSH
71535: LD_INT 1
71537: NEG
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 2
71545: PUSH
71546: LD_INT 0
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 2
71555: PUSH
71556: LD_INT 1
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 2
71565: PUSH
71566: LD_INT 2
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 1
71575: PUSH
71576: LD_INT 2
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 0
71585: PUSH
71586: LD_INT 2
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 1
71595: NEG
71596: PUSH
71597: LD_INT 1
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 2
71606: NEG
71607: PUSH
71608: LD_INT 0
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 2
71617: NEG
71618: PUSH
71619: LD_INT 1
71621: NEG
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 2
71629: NEG
71630: PUSH
71631: LD_INT 2
71633: NEG
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71660: LD_ADDR_VAR 0 54
71664: PUSH
71665: LD_INT 0
71667: PUSH
71668: LD_INT 0
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 0
71677: PUSH
71678: LD_INT 1
71680: NEG
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_INT 1
71688: PUSH
71689: LD_INT 0
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 1
71698: PUSH
71699: LD_INT 1
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 0
71708: PUSH
71709: LD_INT 1
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 1
71718: NEG
71719: PUSH
71720: LD_INT 0
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 1
71729: NEG
71730: PUSH
71731: LD_INT 1
71733: NEG
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 1
71741: NEG
71742: PUSH
71743: LD_INT 2
71745: NEG
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 0
71753: PUSH
71754: LD_INT 2
71756: NEG
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 1
71764: PUSH
71765: LD_INT 1
71767: NEG
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_INT 2
71775: PUSH
71776: LD_INT 0
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 2
71785: PUSH
71786: LD_INT 1
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 2
71795: PUSH
71796: LD_INT 2
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 1
71805: PUSH
71806: LD_INT 2
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 0
71815: PUSH
71816: LD_INT 2
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 1
71825: NEG
71826: PUSH
71827: LD_INT 1
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 2
71836: NEG
71837: PUSH
71838: LD_INT 0
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PUSH
71845: LD_INT 2
71847: NEG
71848: PUSH
71849: LD_INT 1
71851: NEG
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 2
71859: NEG
71860: PUSH
71861: LD_INT 2
71863: NEG
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71890: LD_ADDR_VAR 0 55
71894: PUSH
71895: LD_INT 0
71897: PUSH
71898: LD_INT 0
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 0
71907: PUSH
71908: LD_INT 1
71910: NEG
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 1
71918: PUSH
71919: LD_INT 0
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 1
71928: PUSH
71929: LD_INT 1
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 0
71938: PUSH
71939: LD_INT 1
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: PUSH
71946: LD_INT 1
71948: NEG
71949: PUSH
71950: LD_INT 0
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 1
71959: NEG
71960: PUSH
71961: LD_INT 1
71963: NEG
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: LD_INT 1
71971: NEG
71972: PUSH
71973: LD_INT 2
71975: NEG
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 0
71983: PUSH
71984: LD_INT 2
71986: NEG
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 1
71994: PUSH
71995: LD_INT 1
71997: NEG
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 2
72005: PUSH
72006: LD_INT 0
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 2
72015: PUSH
72016: LD_INT 1
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PUSH
72023: LD_INT 2
72025: PUSH
72026: LD_INT 2
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 1
72035: PUSH
72036: LD_INT 2
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 0
72045: PUSH
72046: LD_INT 2
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 1
72055: NEG
72056: PUSH
72057: LD_INT 1
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 2
72066: NEG
72067: PUSH
72068: LD_INT 0
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 2
72077: NEG
72078: PUSH
72079: LD_INT 1
72081: NEG
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 2
72089: NEG
72090: PUSH
72091: LD_INT 2
72093: NEG
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72120: LD_ADDR_VAR 0 56
72124: PUSH
72125: LD_INT 0
72127: PUSH
72128: LD_INT 0
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_INT 0
72137: PUSH
72138: LD_INT 1
72140: NEG
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 1
72148: PUSH
72149: LD_INT 0
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 1
72158: PUSH
72159: LD_INT 1
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: LD_INT 0
72168: PUSH
72169: LD_INT 1
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 1
72178: NEG
72179: PUSH
72180: LD_INT 0
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: LD_INT 1
72189: NEG
72190: PUSH
72191: LD_INT 1
72193: NEG
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: PUSH
72199: LD_INT 1
72201: NEG
72202: PUSH
72203: LD_INT 2
72205: NEG
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 0
72213: PUSH
72214: LD_INT 2
72216: NEG
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 1
72224: PUSH
72225: LD_INT 1
72227: NEG
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: LD_INT 2
72235: PUSH
72236: LD_INT 0
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 2
72245: PUSH
72246: LD_INT 1
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: LD_INT 2
72255: PUSH
72256: LD_INT 2
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 1
72265: PUSH
72266: LD_INT 2
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: LD_INT 0
72275: PUSH
72276: LD_INT 2
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PUSH
72283: LD_INT 1
72285: NEG
72286: PUSH
72287: LD_INT 1
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 2
72296: NEG
72297: PUSH
72298: LD_INT 0
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 2
72307: NEG
72308: PUSH
72309: LD_INT 1
72311: NEG
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 2
72319: NEG
72320: PUSH
72321: LD_INT 2
72323: NEG
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72350: LD_ADDR_VAR 0 57
72354: PUSH
72355: LD_INT 0
72357: PUSH
72358: LD_INT 0
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 0
72367: PUSH
72368: LD_INT 1
72370: NEG
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 1
72378: PUSH
72379: LD_INT 0
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 1
72388: PUSH
72389: LD_INT 1
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 0
72398: PUSH
72399: LD_INT 1
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: LD_INT 1
72408: NEG
72409: PUSH
72410: LD_INT 0
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: LD_INT 1
72419: NEG
72420: PUSH
72421: LD_INT 1
72423: NEG
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 1
72431: NEG
72432: PUSH
72433: LD_INT 2
72435: NEG
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 0
72443: PUSH
72444: LD_INT 2
72446: NEG
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 1
72454: PUSH
72455: LD_INT 1
72457: NEG
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PUSH
72463: LD_INT 2
72465: PUSH
72466: LD_INT 0
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 2
72475: PUSH
72476: LD_INT 1
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: PUSH
72483: LD_INT 2
72485: PUSH
72486: LD_INT 2
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: PUSH
72493: LD_INT 1
72495: PUSH
72496: LD_INT 2
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 0
72505: PUSH
72506: LD_INT 2
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 1
72515: NEG
72516: PUSH
72517: LD_INT 1
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 2
72526: NEG
72527: PUSH
72528: LD_INT 0
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: PUSH
72535: LD_INT 2
72537: NEG
72538: PUSH
72539: LD_INT 1
72541: NEG
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_INT 2
72549: NEG
72550: PUSH
72551: LD_INT 2
72553: NEG
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72580: LD_ADDR_VAR 0 58
72584: PUSH
72585: LD_INT 0
72587: PUSH
72588: LD_INT 0
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: PUSH
72595: LD_INT 0
72597: PUSH
72598: LD_INT 1
72600: NEG
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PUSH
72606: LD_INT 1
72608: PUSH
72609: LD_INT 0
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: LD_INT 1
72618: PUSH
72619: LD_INT 1
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: PUSH
72626: LD_INT 0
72628: PUSH
72629: LD_INT 1
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PUSH
72636: LD_INT 1
72638: NEG
72639: PUSH
72640: LD_INT 0
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: PUSH
72647: LD_INT 1
72649: NEG
72650: PUSH
72651: LD_INT 1
72653: NEG
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: PUSH
72659: LD_INT 1
72661: NEG
72662: PUSH
72663: LD_INT 2
72665: NEG
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PUSH
72671: LD_INT 0
72673: PUSH
72674: LD_INT 2
72676: NEG
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: PUSH
72682: LD_INT 1
72684: PUSH
72685: LD_INT 1
72687: NEG
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 2
72695: PUSH
72696: LD_INT 0
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 2
72705: PUSH
72706: LD_INT 1
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 2
72715: PUSH
72716: LD_INT 2
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 1
72725: PUSH
72726: LD_INT 2
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 0
72735: PUSH
72736: LD_INT 2
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_INT 1
72745: NEG
72746: PUSH
72747: LD_INT 1
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: LD_INT 2
72756: NEG
72757: PUSH
72758: LD_INT 0
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: LD_INT 2
72767: NEG
72768: PUSH
72769: LD_INT 1
72771: NEG
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 2
72779: NEG
72780: PUSH
72781: LD_INT 2
72783: NEG
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72810: LD_ADDR_VAR 0 59
72814: PUSH
72815: LD_INT 0
72817: PUSH
72818: LD_INT 0
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 0
72827: PUSH
72828: LD_INT 1
72830: NEG
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 1
72838: PUSH
72839: LD_INT 0
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 1
72848: PUSH
72849: LD_INT 1
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 0
72858: PUSH
72859: LD_INT 1
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 1
72868: NEG
72869: PUSH
72870: LD_INT 0
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PUSH
72877: LD_INT 1
72879: NEG
72880: PUSH
72881: LD_INT 1
72883: NEG
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72898: LD_ADDR_VAR 0 60
72902: PUSH
72903: LD_INT 0
72905: PUSH
72906: LD_INT 0
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: LD_INT 0
72915: PUSH
72916: LD_INT 1
72918: NEG
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 1
72926: PUSH
72927: LD_INT 0
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: PUSH
72934: LD_INT 1
72936: PUSH
72937: LD_INT 1
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: PUSH
72944: LD_INT 0
72946: PUSH
72947: LD_INT 1
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: PUSH
72954: LD_INT 1
72956: NEG
72957: PUSH
72958: LD_INT 0
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: LD_INT 1
72967: NEG
72968: PUSH
72969: LD_INT 1
72971: NEG
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: LIST
72984: LIST
72985: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72986: LD_ADDR_VAR 0 61
72990: PUSH
72991: LD_INT 0
72993: PUSH
72994: LD_INT 0
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: LD_INT 0
73003: PUSH
73004: LD_INT 1
73006: NEG
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: PUSH
73012: LD_INT 1
73014: PUSH
73015: LD_INT 0
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: PUSH
73022: LD_INT 1
73024: PUSH
73025: LD_INT 1
73027: PUSH
73028: EMPTY
73029: LIST
73030: LIST
73031: PUSH
73032: LD_INT 0
73034: PUSH
73035: LD_INT 1
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: PUSH
73042: LD_INT 1
73044: NEG
73045: PUSH
73046: LD_INT 0
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: PUSH
73053: LD_INT 1
73055: NEG
73056: PUSH
73057: LD_INT 1
73059: NEG
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: LIST
73069: LIST
73070: LIST
73071: LIST
73072: LIST
73073: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73074: LD_ADDR_VAR 0 62
73078: PUSH
73079: LD_INT 0
73081: PUSH
73082: LD_INT 0
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: PUSH
73089: LD_INT 0
73091: PUSH
73092: LD_INT 1
73094: NEG
73095: PUSH
73096: EMPTY
73097: LIST
73098: LIST
73099: PUSH
73100: LD_INT 1
73102: PUSH
73103: LD_INT 0
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: PUSH
73110: LD_INT 1
73112: PUSH
73113: LD_INT 1
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: PUSH
73120: LD_INT 0
73122: PUSH
73123: LD_INT 1
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: PUSH
73130: LD_INT 1
73132: NEG
73133: PUSH
73134: LD_INT 0
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PUSH
73141: LD_INT 1
73143: NEG
73144: PUSH
73145: LD_INT 1
73147: NEG
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73162: LD_ADDR_VAR 0 63
73166: PUSH
73167: LD_INT 0
73169: PUSH
73170: LD_INT 0
73172: PUSH
73173: EMPTY
73174: LIST
73175: LIST
73176: PUSH
73177: LD_INT 0
73179: PUSH
73180: LD_INT 1
73182: NEG
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: PUSH
73188: LD_INT 1
73190: PUSH
73191: LD_INT 0
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: PUSH
73198: LD_INT 1
73200: PUSH
73201: LD_INT 1
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: PUSH
73208: LD_INT 0
73210: PUSH
73211: LD_INT 1
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: PUSH
73218: LD_INT 1
73220: NEG
73221: PUSH
73222: LD_INT 0
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PUSH
73229: LD_INT 1
73231: NEG
73232: PUSH
73233: LD_INT 1
73235: NEG
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
73250: LD_ADDR_VAR 0 64
73254: PUSH
73255: LD_INT 0
73257: PUSH
73258: LD_INT 0
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PUSH
73265: LD_INT 0
73267: PUSH
73268: LD_INT 1
73270: NEG
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: LD_INT 1
73278: PUSH
73279: LD_INT 0
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: LD_INT 1
73288: PUSH
73289: LD_INT 1
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: PUSH
73296: LD_INT 0
73298: PUSH
73299: LD_INT 1
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: PUSH
73306: LD_INT 1
73308: NEG
73309: PUSH
73310: LD_INT 0
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: LD_INT 1
73319: NEG
73320: PUSH
73321: LD_INT 1
73323: NEG
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: ST_TO_ADDR
// end ; 1 :
73338: GO 79235
73340: LD_INT 1
73342: DOUBLE
73343: EQUAL
73344: IFTRUE 73348
73346: GO 75971
73348: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73349: LD_ADDR_VAR 0 11
73353: PUSH
73354: LD_INT 1
73356: NEG
73357: PUSH
73358: LD_INT 3
73360: NEG
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: LD_INT 0
73368: PUSH
73369: LD_INT 3
73371: NEG
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: PUSH
73377: LD_INT 1
73379: PUSH
73380: LD_INT 2
73382: NEG
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: LIST
73392: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73393: LD_ADDR_VAR 0 12
73397: PUSH
73398: LD_INT 2
73400: PUSH
73401: LD_INT 1
73403: NEG
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: PUSH
73409: LD_INT 3
73411: PUSH
73412: LD_INT 0
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: PUSH
73419: LD_INT 3
73421: PUSH
73422: LD_INT 1
73424: PUSH
73425: EMPTY
73426: LIST
73427: LIST
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: LIST
73433: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73434: LD_ADDR_VAR 0 13
73438: PUSH
73439: LD_INT 3
73441: PUSH
73442: LD_INT 2
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: PUSH
73449: LD_INT 3
73451: PUSH
73452: LD_INT 3
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: PUSH
73459: LD_INT 2
73461: PUSH
73462: LD_INT 3
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: LIST
73473: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73474: LD_ADDR_VAR 0 14
73478: PUSH
73479: LD_INT 1
73481: PUSH
73482: LD_INT 3
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: PUSH
73489: LD_INT 0
73491: PUSH
73492: LD_INT 3
73494: PUSH
73495: EMPTY
73496: LIST
73497: LIST
73498: PUSH
73499: LD_INT 1
73501: NEG
73502: PUSH
73503: LD_INT 2
73505: PUSH
73506: EMPTY
73507: LIST
73508: LIST
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: LIST
73514: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73515: LD_ADDR_VAR 0 15
73519: PUSH
73520: LD_INT 2
73522: NEG
73523: PUSH
73524: LD_INT 1
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: LD_INT 3
73533: NEG
73534: PUSH
73535: LD_INT 0
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 3
73544: NEG
73545: PUSH
73546: LD_INT 1
73548: NEG
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: LIST
73558: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73559: LD_ADDR_VAR 0 16
73563: PUSH
73564: LD_INT 2
73566: NEG
73567: PUSH
73568: LD_INT 3
73570: NEG
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PUSH
73576: LD_INT 3
73578: NEG
73579: PUSH
73580: LD_INT 2
73582: NEG
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: PUSH
73588: LD_INT 3
73590: NEG
73591: PUSH
73592: LD_INT 3
73594: NEG
73595: PUSH
73596: EMPTY
73597: LIST
73598: LIST
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: LIST
73604: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73605: LD_ADDR_VAR 0 17
73609: PUSH
73610: LD_INT 1
73612: NEG
73613: PUSH
73614: LD_INT 3
73616: NEG
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: LD_INT 0
73624: PUSH
73625: LD_INT 3
73627: NEG
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: PUSH
73633: LD_INT 1
73635: PUSH
73636: LD_INT 2
73638: NEG
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: LIST
73648: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73649: LD_ADDR_VAR 0 18
73653: PUSH
73654: LD_INT 2
73656: PUSH
73657: LD_INT 1
73659: NEG
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 3
73667: PUSH
73668: LD_INT 0
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: PUSH
73675: LD_INT 3
73677: PUSH
73678: LD_INT 1
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: EMPTY
73686: LIST
73687: LIST
73688: LIST
73689: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73690: LD_ADDR_VAR 0 19
73694: PUSH
73695: LD_INT 3
73697: PUSH
73698: LD_INT 2
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PUSH
73705: LD_INT 3
73707: PUSH
73708: LD_INT 3
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: PUSH
73715: LD_INT 2
73717: PUSH
73718: LD_INT 3
73720: PUSH
73721: EMPTY
73722: LIST
73723: LIST
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: LIST
73729: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73730: LD_ADDR_VAR 0 20
73734: PUSH
73735: LD_INT 1
73737: PUSH
73738: LD_INT 3
73740: PUSH
73741: EMPTY
73742: LIST
73743: LIST
73744: PUSH
73745: LD_INT 0
73747: PUSH
73748: LD_INT 3
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 1
73757: NEG
73758: PUSH
73759: LD_INT 2
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: LIST
73770: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73771: LD_ADDR_VAR 0 21
73775: PUSH
73776: LD_INT 2
73778: NEG
73779: PUSH
73780: LD_INT 1
73782: PUSH
73783: EMPTY
73784: LIST
73785: LIST
73786: PUSH
73787: LD_INT 3
73789: NEG
73790: PUSH
73791: LD_INT 0
73793: PUSH
73794: EMPTY
73795: LIST
73796: LIST
73797: PUSH
73798: LD_INT 3
73800: NEG
73801: PUSH
73802: LD_INT 1
73804: NEG
73805: PUSH
73806: EMPTY
73807: LIST
73808: LIST
73809: PUSH
73810: EMPTY
73811: LIST
73812: LIST
73813: LIST
73814: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73815: LD_ADDR_VAR 0 22
73819: PUSH
73820: LD_INT 2
73822: NEG
73823: PUSH
73824: LD_INT 3
73826: NEG
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: LD_INT 3
73834: NEG
73835: PUSH
73836: LD_INT 2
73838: NEG
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: PUSH
73844: LD_INT 3
73846: NEG
73847: PUSH
73848: LD_INT 3
73850: NEG
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: LIST
73860: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
73861: LD_ADDR_VAR 0 23
73865: PUSH
73866: LD_INT 0
73868: PUSH
73869: LD_INT 3
73871: NEG
73872: PUSH
73873: EMPTY
73874: LIST
73875: LIST
73876: PUSH
73877: LD_INT 1
73879: NEG
73880: PUSH
73881: LD_INT 4
73883: NEG
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: PUSH
73889: LD_INT 1
73891: PUSH
73892: LD_INT 3
73894: NEG
73895: PUSH
73896: EMPTY
73897: LIST
73898: LIST
73899: PUSH
73900: EMPTY
73901: LIST
73902: LIST
73903: LIST
73904: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
73905: LD_ADDR_VAR 0 24
73909: PUSH
73910: LD_INT 3
73912: PUSH
73913: LD_INT 0
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PUSH
73920: LD_INT 3
73922: PUSH
73923: LD_INT 1
73925: NEG
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: PUSH
73931: LD_INT 4
73933: PUSH
73934: LD_INT 1
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: LIST
73945: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
73946: LD_ADDR_VAR 0 25
73950: PUSH
73951: LD_INT 3
73953: PUSH
73954: LD_INT 3
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: PUSH
73961: LD_INT 4
73963: PUSH
73964: LD_INT 3
73966: PUSH
73967: EMPTY
73968: LIST
73969: LIST
73970: PUSH
73971: LD_INT 3
73973: PUSH
73974: LD_INT 4
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: PUSH
73981: EMPTY
73982: LIST
73983: LIST
73984: LIST
73985: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
73986: LD_ADDR_VAR 0 26
73990: PUSH
73991: LD_INT 0
73993: PUSH
73994: LD_INT 3
73996: PUSH
73997: EMPTY
73998: LIST
73999: LIST
74000: PUSH
74001: LD_INT 1
74003: PUSH
74004: LD_INT 4
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: PUSH
74011: LD_INT 1
74013: NEG
74014: PUSH
74015: LD_INT 3
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: LIST
74026: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
74027: LD_ADDR_VAR 0 27
74031: PUSH
74032: LD_INT 3
74034: NEG
74035: PUSH
74036: LD_INT 0
74038: PUSH
74039: EMPTY
74040: LIST
74041: LIST
74042: PUSH
74043: LD_INT 3
74045: NEG
74046: PUSH
74047: LD_INT 1
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: PUSH
74054: LD_INT 4
74056: NEG
74057: PUSH
74058: LD_INT 1
74060: NEG
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: LIST
74070: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
74071: LD_ADDR_VAR 0 28
74075: PUSH
74076: LD_INT 3
74078: NEG
74079: PUSH
74080: LD_INT 3
74082: NEG
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: PUSH
74088: LD_INT 3
74090: NEG
74091: PUSH
74092: LD_INT 4
74094: NEG
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: LD_INT 4
74102: NEG
74103: PUSH
74104: LD_INT 3
74106: NEG
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: PUSH
74112: EMPTY
74113: LIST
74114: LIST
74115: LIST
74116: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
74117: LD_ADDR_VAR 0 29
74121: PUSH
74122: LD_INT 1
74124: NEG
74125: PUSH
74126: LD_INT 3
74128: NEG
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PUSH
74134: LD_INT 0
74136: PUSH
74137: LD_INT 3
74139: NEG
74140: PUSH
74141: EMPTY
74142: LIST
74143: LIST
74144: PUSH
74145: LD_INT 1
74147: PUSH
74148: LD_INT 2
74150: NEG
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 1
74158: NEG
74159: PUSH
74160: LD_INT 4
74162: NEG
74163: PUSH
74164: EMPTY
74165: LIST
74166: LIST
74167: PUSH
74168: LD_INT 0
74170: PUSH
74171: LD_INT 4
74173: NEG
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: PUSH
74179: LD_INT 1
74181: PUSH
74182: LD_INT 3
74184: NEG
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: PUSH
74190: LD_INT 1
74192: NEG
74193: PUSH
74194: LD_INT 5
74196: NEG
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 0
74204: PUSH
74205: LD_INT 5
74207: NEG
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: PUSH
74213: LD_INT 1
74215: PUSH
74216: LD_INT 4
74218: NEG
74219: PUSH
74220: EMPTY
74221: LIST
74222: LIST
74223: PUSH
74224: LD_INT 1
74226: NEG
74227: PUSH
74228: LD_INT 6
74230: NEG
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: LD_INT 0
74238: PUSH
74239: LD_INT 6
74241: NEG
74242: PUSH
74243: EMPTY
74244: LIST
74245: LIST
74246: PUSH
74247: LD_INT 1
74249: PUSH
74250: LD_INT 5
74252: NEG
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
74272: LD_ADDR_VAR 0 30
74276: PUSH
74277: LD_INT 2
74279: PUSH
74280: LD_INT 1
74282: NEG
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: PUSH
74288: LD_INT 3
74290: PUSH
74291: LD_INT 0
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: PUSH
74298: LD_INT 3
74300: PUSH
74301: LD_INT 1
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: PUSH
74308: LD_INT 3
74310: PUSH
74311: LD_INT 1
74313: NEG
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: PUSH
74319: LD_INT 4
74321: PUSH
74322: LD_INT 0
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: PUSH
74329: LD_INT 4
74331: PUSH
74332: LD_INT 1
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 4
74341: PUSH
74342: LD_INT 1
74344: NEG
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: PUSH
74350: LD_INT 5
74352: PUSH
74353: LD_INT 0
74355: PUSH
74356: EMPTY
74357: LIST
74358: LIST
74359: PUSH
74360: LD_INT 5
74362: PUSH
74363: LD_INT 1
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PUSH
74370: LD_INT 5
74372: PUSH
74373: LD_INT 1
74375: NEG
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: PUSH
74381: LD_INT 6
74383: PUSH
74384: LD_INT 0
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: PUSH
74391: LD_INT 6
74393: PUSH
74394: LD_INT 1
74396: PUSH
74397: EMPTY
74398: LIST
74399: LIST
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
74415: LD_ADDR_VAR 0 31
74419: PUSH
74420: LD_INT 3
74422: PUSH
74423: LD_INT 2
74425: PUSH
74426: EMPTY
74427: LIST
74428: LIST
74429: PUSH
74430: LD_INT 3
74432: PUSH
74433: LD_INT 3
74435: PUSH
74436: EMPTY
74437: LIST
74438: LIST
74439: PUSH
74440: LD_INT 2
74442: PUSH
74443: LD_INT 3
74445: PUSH
74446: EMPTY
74447: LIST
74448: LIST
74449: PUSH
74450: LD_INT 4
74452: PUSH
74453: LD_INT 3
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: PUSH
74460: LD_INT 4
74462: PUSH
74463: LD_INT 4
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: PUSH
74470: LD_INT 3
74472: PUSH
74473: LD_INT 4
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: PUSH
74480: LD_INT 5
74482: PUSH
74483: LD_INT 4
74485: PUSH
74486: EMPTY
74487: LIST
74488: LIST
74489: PUSH
74490: LD_INT 5
74492: PUSH
74493: LD_INT 5
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: PUSH
74500: LD_INT 4
74502: PUSH
74503: LD_INT 5
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: PUSH
74510: LD_INT 6
74512: PUSH
74513: LD_INT 5
74515: PUSH
74516: EMPTY
74517: LIST
74518: LIST
74519: PUSH
74520: LD_INT 6
74522: PUSH
74523: LD_INT 6
74525: PUSH
74526: EMPTY
74527: LIST
74528: LIST
74529: PUSH
74530: LD_INT 5
74532: PUSH
74533: LD_INT 6
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: PUSH
74540: EMPTY
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: LIST
74547: LIST
74548: LIST
74549: LIST
74550: LIST
74551: LIST
74552: LIST
74553: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
74554: LD_ADDR_VAR 0 32
74558: PUSH
74559: LD_INT 1
74561: PUSH
74562: LD_INT 3
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: PUSH
74569: LD_INT 0
74571: PUSH
74572: LD_INT 3
74574: PUSH
74575: EMPTY
74576: LIST
74577: LIST
74578: PUSH
74579: LD_INT 1
74581: NEG
74582: PUSH
74583: LD_INT 2
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: PUSH
74590: LD_INT 1
74592: PUSH
74593: LD_INT 4
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: PUSH
74600: LD_INT 0
74602: PUSH
74603: LD_INT 4
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PUSH
74610: LD_INT 1
74612: NEG
74613: PUSH
74614: LD_INT 3
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: PUSH
74621: LD_INT 1
74623: PUSH
74624: LD_INT 5
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: PUSH
74631: LD_INT 0
74633: PUSH
74634: LD_INT 5
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: PUSH
74641: LD_INT 1
74643: NEG
74644: PUSH
74645: LD_INT 4
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: PUSH
74652: LD_INT 1
74654: PUSH
74655: LD_INT 6
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: PUSH
74662: LD_INT 0
74664: PUSH
74665: LD_INT 6
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: PUSH
74672: LD_INT 1
74674: NEG
74675: PUSH
74676: LD_INT 5
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: LIST
74690: LIST
74691: LIST
74692: LIST
74693: LIST
74694: LIST
74695: LIST
74696: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
74697: LD_ADDR_VAR 0 33
74701: PUSH
74702: LD_INT 2
74704: NEG
74705: PUSH
74706: LD_INT 1
74708: PUSH
74709: EMPTY
74710: LIST
74711: LIST
74712: PUSH
74713: LD_INT 3
74715: NEG
74716: PUSH
74717: LD_INT 0
74719: PUSH
74720: EMPTY
74721: LIST
74722: LIST
74723: PUSH
74724: LD_INT 3
74726: NEG
74727: PUSH
74728: LD_INT 1
74730: NEG
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: PUSH
74736: LD_INT 3
74738: NEG
74739: PUSH
74740: LD_INT 1
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: PUSH
74747: LD_INT 4
74749: NEG
74750: PUSH
74751: LD_INT 0
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: PUSH
74758: LD_INT 4
74760: NEG
74761: PUSH
74762: LD_INT 1
74764: NEG
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: PUSH
74770: LD_INT 4
74772: NEG
74773: PUSH
74774: LD_INT 1
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_INT 5
74783: NEG
74784: PUSH
74785: LD_INT 0
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PUSH
74792: LD_INT 5
74794: NEG
74795: PUSH
74796: LD_INT 1
74798: NEG
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: PUSH
74804: LD_INT 5
74806: NEG
74807: PUSH
74808: LD_INT 1
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PUSH
74815: LD_INT 6
74817: NEG
74818: PUSH
74819: LD_INT 0
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: PUSH
74826: LD_INT 6
74828: NEG
74829: PUSH
74830: LD_INT 1
74832: NEG
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: EMPTY
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
74852: LD_ADDR_VAR 0 34
74856: PUSH
74857: LD_INT 2
74859: NEG
74860: PUSH
74861: LD_INT 3
74863: NEG
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: PUSH
74869: LD_INT 3
74871: NEG
74872: PUSH
74873: LD_INT 2
74875: NEG
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PUSH
74881: LD_INT 3
74883: NEG
74884: PUSH
74885: LD_INT 3
74887: NEG
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: LD_INT 3
74895: NEG
74896: PUSH
74897: LD_INT 4
74899: NEG
74900: PUSH
74901: EMPTY
74902: LIST
74903: LIST
74904: PUSH
74905: LD_INT 4
74907: NEG
74908: PUSH
74909: LD_INT 3
74911: NEG
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: PUSH
74917: LD_INT 4
74919: NEG
74920: PUSH
74921: LD_INT 4
74923: NEG
74924: PUSH
74925: EMPTY
74926: LIST
74927: LIST
74928: PUSH
74929: LD_INT 4
74931: NEG
74932: PUSH
74933: LD_INT 5
74935: NEG
74936: PUSH
74937: EMPTY
74938: LIST
74939: LIST
74940: PUSH
74941: LD_INT 5
74943: NEG
74944: PUSH
74945: LD_INT 4
74947: NEG
74948: PUSH
74949: EMPTY
74950: LIST
74951: LIST
74952: PUSH
74953: LD_INT 5
74955: NEG
74956: PUSH
74957: LD_INT 5
74959: NEG
74960: PUSH
74961: EMPTY
74962: LIST
74963: LIST
74964: PUSH
74965: LD_INT 5
74967: NEG
74968: PUSH
74969: LD_INT 6
74971: NEG
74972: PUSH
74973: EMPTY
74974: LIST
74975: LIST
74976: PUSH
74977: LD_INT 6
74979: NEG
74980: PUSH
74981: LD_INT 5
74983: NEG
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: PUSH
74989: LD_INT 6
74991: NEG
74992: PUSH
74993: LD_INT 6
74995: NEG
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: LIST
75009: LIST
75010: LIST
75011: LIST
75012: LIST
75013: LIST
75014: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
75015: LD_ADDR_VAR 0 41
75019: PUSH
75020: LD_INT 0
75022: PUSH
75023: LD_INT 2
75025: NEG
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: PUSH
75031: LD_INT 1
75033: NEG
75034: PUSH
75035: LD_INT 3
75037: NEG
75038: PUSH
75039: EMPTY
75040: LIST
75041: LIST
75042: PUSH
75043: LD_INT 1
75045: PUSH
75046: LD_INT 2
75048: NEG
75049: PUSH
75050: EMPTY
75051: LIST
75052: LIST
75053: PUSH
75054: EMPTY
75055: LIST
75056: LIST
75057: LIST
75058: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
75059: LD_ADDR_VAR 0 42
75063: PUSH
75064: LD_INT 2
75066: PUSH
75067: LD_INT 0
75069: PUSH
75070: EMPTY
75071: LIST
75072: LIST
75073: PUSH
75074: LD_INT 2
75076: PUSH
75077: LD_INT 1
75079: NEG
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: PUSH
75085: LD_INT 3
75087: PUSH
75088: LD_INT 1
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: LIST
75099: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
75100: LD_ADDR_VAR 0 43
75104: PUSH
75105: LD_INT 2
75107: PUSH
75108: LD_INT 2
75110: PUSH
75111: EMPTY
75112: LIST
75113: LIST
75114: PUSH
75115: LD_INT 3
75117: PUSH
75118: LD_INT 2
75120: PUSH
75121: EMPTY
75122: LIST
75123: LIST
75124: PUSH
75125: LD_INT 2
75127: PUSH
75128: LD_INT 3
75130: PUSH
75131: EMPTY
75132: LIST
75133: LIST
75134: PUSH
75135: EMPTY
75136: LIST
75137: LIST
75138: LIST
75139: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
75140: LD_ADDR_VAR 0 44
75144: PUSH
75145: LD_INT 0
75147: PUSH
75148: LD_INT 2
75150: PUSH
75151: EMPTY
75152: LIST
75153: LIST
75154: PUSH
75155: LD_INT 1
75157: PUSH
75158: LD_INT 3
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: PUSH
75165: LD_INT 1
75167: NEG
75168: PUSH
75169: LD_INT 2
75171: PUSH
75172: EMPTY
75173: LIST
75174: LIST
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: LIST
75180: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
75181: LD_ADDR_VAR 0 45
75185: PUSH
75186: LD_INT 2
75188: NEG
75189: PUSH
75190: LD_INT 0
75192: PUSH
75193: EMPTY
75194: LIST
75195: LIST
75196: PUSH
75197: LD_INT 2
75199: NEG
75200: PUSH
75201: LD_INT 1
75203: PUSH
75204: EMPTY
75205: LIST
75206: LIST
75207: PUSH
75208: LD_INT 3
75210: NEG
75211: PUSH
75212: LD_INT 1
75214: NEG
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: PUSH
75220: EMPTY
75221: LIST
75222: LIST
75223: LIST
75224: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
75225: LD_ADDR_VAR 0 46
75229: PUSH
75230: LD_INT 2
75232: NEG
75233: PUSH
75234: LD_INT 2
75236: NEG
75237: PUSH
75238: EMPTY
75239: LIST
75240: LIST
75241: PUSH
75242: LD_INT 2
75244: NEG
75245: PUSH
75246: LD_INT 3
75248: NEG
75249: PUSH
75250: EMPTY
75251: LIST
75252: LIST
75253: PUSH
75254: LD_INT 3
75256: NEG
75257: PUSH
75258: LD_INT 2
75260: NEG
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: LIST
75270: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
75271: LD_ADDR_VAR 0 47
75275: PUSH
75276: LD_INT 2
75278: NEG
75279: PUSH
75280: LD_INT 3
75282: NEG
75283: PUSH
75284: EMPTY
75285: LIST
75286: LIST
75287: PUSH
75288: LD_INT 1
75290: NEG
75291: PUSH
75292: LD_INT 3
75294: NEG
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
75304: LD_ADDR_VAR 0 48
75308: PUSH
75309: LD_INT 1
75311: PUSH
75312: LD_INT 2
75314: NEG
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: PUSH
75320: LD_INT 2
75322: PUSH
75323: LD_INT 1
75325: NEG
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
75335: LD_ADDR_VAR 0 49
75339: PUSH
75340: LD_INT 3
75342: PUSH
75343: LD_INT 1
75345: PUSH
75346: EMPTY
75347: LIST
75348: LIST
75349: PUSH
75350: LD_INT 3
75352: PUSH
75353: LD_INT 2
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
75364: LD_ADDR_VAR 0 50
75368: PUSH
75369: LD_INT 2
75371: PUSH
75372: LD_INT 3
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: PUSH
75379: LD_INT 1
75381: PUSH
75382: LD_INT 3
75384: PUSH
75385: EMPTY
75386: LIST
75387: LIST
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
75393: LD_ADDR_VAR 0 51
75397: PUSH
75398: LD_INT 1
75400: NEG
75401: PUSH
75402: LD_INT 2
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: LD_INT 2
75411: NEG
75412: PUSH
75413: LD_INT 1
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: PUSH
75420: EMPTY
75421: LIST
75422: LIST
75423: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
75424: LD_ADDR_VAR 0 52
75428: PUSH
75429: LD_INT 3
75431: NEG
75432: PUSH
75433: LD_INT 1
75435: NEG
75436: PUSH
75437: EMPTY
75438: LIST
75439: LIST
75440: PUSH
75441: LD_INT 3
75443: NEG
75444: PUSH
75445: LD_INT 2
75447: NEG
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: PUSH
75453: EMPTY
75454: LIST
75455: LIST
75456: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75457: LD_ADDR_VAR 0 53
75461: PUSH
75462: LD_INT 1
75464: NEG
75465: PUSH
75466: LD_INT 3
75468: NEG
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: LD_INT 0
75476: PUSH
75477: LD_INT 3
75479: NEG
75480: PUSH
75481: EMPTY
75482: LIST
75483: LIST
75484: PUSH
75485: LD_INT 1
75487: PUSH
75488: LD_INT 2
75490: NEG
75491: PUSH
75492: EMPTY
75493: LIST
75494: LIST
75495: PUSH
75496: EMPTY
75497: LIST
75498: LIST
75499: LIST
75500: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75501: LD_ADDR_VAR 0 54
75505: PUSH
75506: LD_INT 2
75508: PUSH
75509: LD_INT 1
75511: NEG
75512: PUSH
75513: EMPTY
75514: LIST
75515: LIST
75516: PUSH
75517: LD_INT 3
75519: PUSH
75520: LD_INT 0
75522: PUSH
75523: EMPTY
75524: LIST
75525: LIST
75526: PUSH
75527: LD_INT 3
75529: PUSH
75530: LD_INT 1
75532: PUSH
75533: EMPTY
75534: LIST
75535: LIST
75536: PUSH
75537: EMPTY
75538: LIST
75539: LIST
75540: LIST
75541: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75542: LD_ADDR_VAR 0 55
75546: PUSH
75547: LD_INT 3
75549: PUSH
75550: LD_INT 2
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: PUSH
75557: LD_INT 3
75559: PUSH
75560: LD_INT 3
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: LD_INT 2
75569: PUSH
75570: LD_INT 3
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: PUSH
75577: EMPTY
75578: LIST
75579: LIST
75580: LIST
75581: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75582: LD_ADDR_VAR 0 56
75586: PUSH
75587: LD_INT 1
75589: PUSH
75590: LD_INT 3
75592: PUSH
75593: EMPTY
75594: LIST
75595: LIST
75596: PUSH
75597: LD_INT 0
75599: PUSH
75600: LD_INT 3
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: PUSH
75607: LD_INT 1
75609: NEG
75610: PUSH
75611: LD_INT 2
75613: PUSH
75614: EMPTY
75615: LIST
75616: LIST
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: LIST
75622: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75623: LD_ADDR_VAR 0 57
75627: PUSH
75628: LD_INT 2
75630: NEG
75631: PUSH
75632: LD_INT 1
75634: PUSH
75635: EMPTY
75636: LIST
75637: LIST
75638: PUSH
75639: LD_INT 3
75641: NEG
75642: PUSH
75643: LD_INT 0
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: PUSH
75650: LD_INT 3
75652: NEG
75653: PUSH
75654: LD_INT 1
75656: NEG
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: LIST
75666: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75667: LD_ADDR_VAR 0 58
75671: PUSH
75672: LD_INT 2
75674: NEG
75675: PUSH
75676: LD_INT 3
75678: NEG
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PUSH
75684: LD_INT 3
75686: NEG
75687: PUSH
75688: LD_INT 2
75690: NEG
75691: PUSH
75692: EMPTY
75693: LIST
75694: LIST
75695: PUSH
75696: LD_INT 3
75698: NEG
75699: PUSH
75700: LD_INT 3
75702: NEG
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: EMPTY
75709: LIST
75710: LIST
75711: LIST
75712: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
75713: LD_ADDR_VAR 0 59
75717: PUSH
75718: LD_INT 1
75720: NEG
75721: PUSH
75722: LD_INT 2
75724: NEG
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: PUSH
75730: LD_INT 0
75732: PUSH
75733: LD_INT 2
75735: NEG
75736: PUSH
75737: EMPTY
75738: LIST
75739: LIST
75740: PUSH
75741: LD_INT 1
75743: PUSH
75744: LD_INT 1
75746: NEG
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: PUSH
75752: EMPTY
75753: LIST
75754: LIST
75755: LIST
75756: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
75757: LD_ADDR_VAR 0 60
75761: PUSH
75762: LD_INT 1
75764: PUSH
75765: LD_INT 1
75767: NEG
75768: PUSH
75769: EMPTY
75770: LIST
75771: LIST
75772: PUSH
75773: LD_INT 2
75775: PUSH
75776: LD_INT 0
75778: PUSH
75779: EMPTY
75780: LIST
75781: LIST
75782: PUSH
75783: LD_INT 2
75785: PUSH
75786: LD_INT 1
75788: PUSH
75789: EMPTY
75790: LIST
75791: LIST
75792: PUSH
75793: EMPTY
75794: LIST
75795: LIST
75796: LIST
75797: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
75798: LD_ADDR_VAR 0 61
75802: PUSH
75803: LD_INT 2
75805: PUSH
75806: LD_INT 1
75808: PUSH
75809: EMPTY
75810: LIST
75811: LIST
75812: PUSH
75813: LD_INT 2
75815: PUSH
75816: LD_INT 2
75818: PUSH
75819: EMPTY
75820: LIST
75821: LIST
75822: PUSH
75823: LD_INT 1
75825: PUSH
75826: LD_INT 2
75828: PUSH
75829: EMPTY
75830: LIST
75831: LIST
75832: PUSH
75833: EMPTY
75834: LIST
75835: LIST
75836: LIST
75837: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
75838: LD_ADDR_VAR 0 62
75842: PUSH
75843: LD_INT 1
75845: PUSH
75846: LD_INT 2
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: PUSH
75853: LD_INT 0
75855: PUSH
75856: LD_INT 2
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: PUSH
75863: LD_INT 1
75865: NEG
75866: PUSH
75867: LD_INT 1
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: LIST
75878: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
75879: LD_ADDR_VAR 0 63
75883: PUSH
75884: LD_INT 1
75886: NEG
75887: PUSH
75888: LD_INT 1
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: LD_INT 2
75897: NEG
75898: PUSH
75899: LD_INT 0
75901: PUSH
75902: EMPTY
75903: LIST
75904: LIST
75905: PUSH
75906: LD_INT 2
75908: NEG
75909: PUSH
75910: LD_INT 1
75912: NEG
75913: PUSH
75914: EMPTY
75915: LIST
75916: LIST
75917: PUSH
75918: EMPTY
75919: LIST
75920: LIST
75921: LIST
75922: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75923: LD_ADDR_VAR 0 64
75927: PUSH
75928: LD_INT 1
75930: NEG
75931: PUSH
75932: LD_INT 2
75934: NEG
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: PUSH
75940: LD_INT 2
75942: NEG
75943: PUSH
75944: LD_INT 1
75946: NEG
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PUSH
75952: LD_INT 2
75954: NEG
75955: PUSH
75956: LD_INT 2
75958: NEG
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: LIST
75968: ST_TO_ADDR
// end ; 2 :
75969: GO 79235
75971: LD_INT 2
75973: DOUBLE
75974: EQUAL
75975: IFTRUE 75979
75977: GO 79234
75979: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
75980: LD_ADDR_VAR 0 29
75984: PUSH
75985: LD_INT 4
75987: PUSH
75988: LD_INT 0
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: PUSH
75995: LD_INT 4
75997: PUSH
75998: LD_INT 1
76000: NEG
76001: PUSH
76002: EMPTY
76003: LIST
76004: LIST
76005: PUSH
76006: LD_INT 5
76008: PUSH
76009: LD_INT 0
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: PUSH
76016: LD_INT 5
76018: PUSH
76019: LD_INT 1
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: PUSH
76026: LD_INT 4
76028: PUSH
76029: LD_INT 1
76031: PUSH
76032: EMPTY
76033: LIST
76034: LIST
76035: PUSH
76036: LD_INT 3
76038: PUSH
76039: LD_INT 0
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: PUSH
76046: LD_INT 3
76048: PUSH
76049: LD_INT 1
76051: NEG
76052: PUSH
76053: EMPTY
76054: LIST
76055: LIST
76056: PUSH
76057: LD_INT 3
76059: PUSH
76060: LD_INT 2
76062: NEG
76063: PUSH
76064: EMPTY
76065: LIST
76066: LIST
76067: PUSH
76068: LD_INT 5
76070: PUSH
76071: LD_INT 2
76073: PUSH
76074: EMPTY
76075: LIST
76076: LIST
76077: PUSH
76078: LD_INT 3
76080: PUSH
76081: LD_INT 3
76083: PUSH
76084: EMPTY
76085: LIST
76086: LIST
76087: PUSH
76088: LD_INT 3
76090: PUSH
76091: LD_INT 2
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: PUSH
76098: LD_INT 4
76100: PUSH
76101: LD_INT 3
76103: PUSH
76104: EMPTY
76105: LIST
76106: LIST
76107: PUSH
76108: LD_INT 4
76110: PUSH
76111: LD_INT 4
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: PUSH
76118: LD_INT 3
76120: PUSH
76121: LD_INT 4
76123: PUSH
76124: EMPTY
76125: LIST
76126: LIST
76127: PUSH
76128: LD_INT 2
76130: PUSH
76131: LD_INT 3
76133: PUSH
76134: EMPTY
76135: LIST
76136: LIST
76137: PUSH
76138: LD_INT 2
76140: PUSH
76141: LD_INT 2
76143: PUSH
76144: EMPTY
76145: LIST
76146: LIST
76147: PUSH
76148: LD_INT 4
76150: PUSH
76151: LD_INT 2
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: PUSH
76158: LD_INT 2
76160: PUSH
76161: LD_INT 4
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: LD_INT 0
76170: PUSH
76171: LD_INT 4
76173: PUSH
76174: EMPTY
76175: LIST
76176: LIST
76177: PUSH
76178: LD_INT 0
76180: PUSH
76181: LD_INT 3
76183: PUSH
76184: EMPTY
76185: LIST
76186: LIST
76187: PUSH
76188: LD_INT 1
76190: PUSH
76191: LD_INT 4
76193: PUSH
76194: EMPTY
76195: LIST
76196: LIST
76197: PUSH
76198: LD_INT 1
76200: PUSH
76201: LD_INT 5
76203: PUSH
76204: EMPTY
76205: LIST
76206: LIST
76207: PUSH
76208: LD_INT 0
76210: PUSH
76211: LD_INT 5
76213: PUSH
76214: EMPTY
76215: LIST
76216: LIST
76217: PUSH
76218: LD_INT 1
76220: NEG
76221: PUSH
76222: LD_INT 4
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: PUSH
76229: LD_INT 1
76231: NEG
76232: PUSH
76233: LD_INT 3
76235: PUSH
76236: EMPTY
76237: LIST
76238: LIST
76239: PUSH
76240: LD_INT 2
76242: PUSH
76243: LD_INT 5
76245: PUSH
76246: EMPTY
76247: LIST
76248: LIST
76249: PUSH
76250: LD_INT 2
76252: NEG
76253: PUSH
76254: LD_INT 3
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: PUSH
76261: LD_INT 3
76263: NEG
76264: PUSH
76265: LD_INT 0
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: PUSH
76272: LD_INT 3
76274: NEG
76275: PUSH
76276: LD_INT 1
76278: NEG
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: PUSH
76284: LD_INT 2
76286: NEG
76287: PUSH
76288: LD_INT 0
76290: PUSH
76291: EMPTY
76292: LIST
76293: LIST
76294: PUSH
76295: LD_INT 2
76297: NEG
76298: PUSH
76299: LD_INT 1
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: PUSH
76306: LD_INT 3
76308: NEG
76309: PUSH
76310: LD_INT 1
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: PUSH
76317: LD_INT 4
76319: NEG
76320: PUSH
76321: LD_INT 0
76323: PUSH
76324: EMPTY
76325: LIST
76326: LIST
76327: PUSH
76328: LD_INT 4
76330: NEG
76331: PUSH
76332: LD_INT 1
76334: NEG
76335: PUSH
76336: EMPTY
76337: LIST
76338: LIST
76339: PUSH
76340: LD_INT 4
76342: NEG
76343: PUSH
76344: LD_INT 2
76346: NEG
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: PUSH
76352: LD_INT 2
76354: NEG
76355: PUSH
76356: LD_INT 2
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: PUSH
76363: LD_INT 4
76365: NEG
76366: PUSH
76367: LD_INT 4
76369: NEG
76370: PUSH
76371: EMPTY
76372: LIST
76373: LIST
76374: PUSH
76375: LD_INT 4
76377: NEG
76378: PUSH
76379: LD_INT 5
76381: NEG
76382: PUSH
76383: EMPTY
76384: LIST
76385: LIST
76386: PUSH
76387: LD_INT 3
76389: NEG
76390: PUSH
76391: LD_INT 4
76393: NEG
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: PUSH
76399: LD_INT 3
76401: NEG
76402: PUSH
76403: LD_INT 3
76405: NEG
76406: PUSH
76407: EMPTY
76408: LIST
76409: LIST
76410: PUSH
76411: LD_INT 4
76413: NEG
76414: PUSH
76415: LD_INT 3
76417: NEG
76418: PUSH
76419: EMPTY
76420: LIST
76421: LIST
76422: PUSH
76423: LD_INT 5
76425: NEG
76426: PUSH
76427: LD_INT 4
76429: NEG
76430: PUSH
76431: EMPTY
76432: LIST
76433: LIST
76434: PUSH
76435: LD_INT 5
76437: NEG
76438: PUSH
76439: LD_INT 5
76441: NEG
76442: PUSH
76443: EMPTY
76444: LIST
76445: LIST
76446: PUSH
76447: LD_INT 3
76449: NEG
76450: PUSH
76451: LD_INT 5
76453: NEG
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: PUSH
76459: LD_INT 5
76461: NEG
76462: PUSH
76463: LD_INT 3
76465: NEG
76466: PUSH
76467: EMPTY
76468: LIST
76469: LIST
76470: PUSH
76471: EMPTY
76472: LIST
76473: LIST
76474: LIST
76475: LIST
76476: LIST
76477: LIST
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: LIST
76483: LIST
76484: LIST
76485: LIST
76486: LIST
76487: LIST
76488: LIST
76489: LIST
76490: LIST
76491: LIST
76492: LIST
76493: LIST
76494: LIST
76495: LIST
76496: LIST
76497: LIST
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: LIST
76507: LIST
76508: LIST
76509: LIST
76510: LIST
76511: LIST
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
76518: LD_ADDR_VAR 0 30
76522: PUSH
76523: LD_INT 4
76525: PUSH
76526: LD_INT 4
76528: PUSH
76529: EMPTY
76530: LIST
76531: LIST
76532: PUSH
76533: LD_INT 4
76535: PUSH
76536: LD_INT 3
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: PUSH
76543: LD_INT 5
76545: PUSH
76546: LD_INT 4
76548: PUSH
76549: EMPTY
76550: LIST
76551: LIST
76552: PUSH
76553: LD_INT 5
76555: PUSH
76556: LD_INT 5
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: PUSH
76563: LD_INT 4
76565: PUSH
76566: LD_INT 5
76568: PUSH
76569: EMPTY
76570: LIST
76571: LIST
76572: PUSH
76573: LD_INT 3
76575: PUSH
76576: LD_INT 4
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: PUSH
76583: LD_INT 3
76585: PUSH
76586: LD_INT 3
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: PUSH
76593: LD_INT 5
76595: PUSH
76596: LD_INT 3
76598: PUSH
76599: EMPTY
76600: LIST
76601: LIST
76602: PUSH
76603: LD_INT 3
76605: PUSH
76606: LD_INT 5
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PUSH
76613: LD_INT 0
76615: PUSH
76616: LD_INT 3
76618: PUSH
76619: EMPTY
76620: LIST
76621: LIST
76622: PUSH
76623: LD_INT 0
76625: PUSH
76626: LD_INT 2
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: PUSH
76633: LD_INT 1
76635: PUSH
76636: LD_INT 3
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: LD_INT 1
76645: PUSH
76646: LD_INT 4
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PUSH
76653: LD_INT 0
76655: PUSH
76656: LD_INT 4
76658: PUSH
76659: EMPTY
76660: LIST
76661: LIST
76662: PUSH
76663: LD_INT 1
76665: NEG
76666: PUSH
76667: LD_INT 3
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: PUSH
76674: LD_INT 1
76676: NEG
76677: PUSH
76678: LD_INT 2
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: PUSH
76685: LD_INT 2
76687: PUSH
76688: LD_INT 4
76690: PUSH
76691: EMPTY
76692: LIST
76693: LIST
76694: PUSH
76695: LD_INT 2
76697: NEG
76698: PUSH
76699: LD_INT 2
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: PUSH
76706: LD_INT 4
76708: NEG
76709: PUSH
76710: LD_INT 0
76712: PUSH
76713: EMPTY
76714: LIST
76715: LIST
76716: PUSH
76717: LD_INT 4
76719: NEG
76720: PUSH
76721: LD_INT 1
76723: NEG
76724: PUSH
76725: EMPTY
76726: LIST
76727: LIST
76728: PUSH
76729: LD_INT 3
76731: NEG
76732: PUSH
76733: LD_INT 0
76735: PUSH
76736: EMPTY
76737: LIST
76738: LIST
76739: PUSH
76740: LD_INT 3
76742: NEG
76743: PUSH
76744: LD_INT 1
76746: PUSH
76747: EMPTY
76748: LIST
76749: LIST
76750: PUSH
76751: LD_INT 4
76753: NEG
76754: PUSH
76755: LD_INT 1
76757: PUSH
76758: EMPTY
76759: LIST
76760: LIST
76761: PUSH
76762: LD_INT 5
76764: NEG
76765: PUSH
76766: LD_INT 0
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: PUSH
76773: LD_INT 5
76775: NEG
76776: PUSH
76777: LD_INT 1
76779: NEG
76780: PUSH
76781: EMPTY
76782: LIST
76783: LIST
76784: PUSH
76785: LD_INT 5
76787: NEG
76788: PUSH
76789: LD_INT 2
76791: NEG
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: PUSH
76797: LD_INT 3
76799: NEG
76800: PUSH
76801: LD_INT 2
76803: PUSH
76804: EMPTY
76805: LIST
76806: LIST
76807: PUSH
76808: LD_INT 3
76810: NEG
76811: PUSH
76812: LD_INT 3
76814: NEG
76815: PUSH
76816: EMPTY
76817: LIST
76818: LIST
76819: PUSH
76820: LD_INT 3
76822: NEG
76823: PUSH
76824: LD_INT 4
76826: NEG
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: PUSH
76832: LD_INT 2
76834: NEG
76835: PUSH
76836: LD_INT 3
76838: NEG
76839: PUSH
76840: EMPTY
76841: LIST
76842: LIST
76843: PUSH
76844: LD_INT 2
76846: NEG
76847: PUSH
76848: LD_INT 2
76850: NEG
76851: PUSH
76852: EMPTY
76853: LIST
76854: LIST
76855: PUSH
76856: LD_INT 3
76858: NEG
76859: PUSH
76860: LD_INT 2
76862: NEG
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: PUSH
76868: LD_INT 4
76870: NEG
76871: PUSH
76872: LD_INT 3
76874: NEG
76875: PUSH
76876: EMPTY
76877: LIST
76878: LIST
76879: PUSH
76880: LD_INT 4
76882: NEG
76883: PUSH
76884: LD_INT 4
76886: NEG
76887: PUSH
76888: EMPTY
76889: LIST
76890: LIST
76891: PUSH
76892: LD_INT 2
76894: NEG
76895: PUSH
76896: LD_INT 4
76898: NEG
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: PUSH
76904: LD_INT 4
76906: NEG
76907: PUSH
76908: LD_INT 2
76910: NEG
76911: PUSH
76912: EMPTY
76913: LIST
76914: LIST
76915: PUSH
76916: LD_INT 0
76918: PUSH
76919: LD_INT 4
76921: NEG
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: PUSH
76927: LD_INT 0
76929: PUSH
76930: LD_INT 5
76932: NEG
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: PUSH
76938: LD_INT 1
76940: PUSH
76941: LD_INT 4
76943: NEG
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: PUSH
76949: LD_INT 1
76951: PUSH
76952: LD_INT 3
76954: NEG
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PUSH
76960: LD_INT 0
76962: PUSH
76963: LD_INT 3
76965: NEG
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PUSH
76971: LD_INT 1
76973: NEG
76974: PUSH
76975: LD_INT 4
76977: NEG
76978: PUSH
76979: EMPTY
76980: LIST
76981: LIST
76982: PUSH
76983: LD_INT 1
76985: NEG
76986: PUSH
76987: LD_INT 5
76989: NEG
76990: PUSH
76991: EMPTY
76992: LIST
76993: LIST
76994: PUSH
76995: LD_INT 2
76997: PUSH
76998: LD_INT 3
77000: NEG
77001: PUSH
77002: EMPTY
77003: LIST
77004: LIST
77005: PUSH
77006: LD_INT 2
77008: NEG
77009: PUSH
77010: LD_INT 5
77012: NEG
77013: PUSH
77014: EMPTY
77015: LIST
77016: LIST
77017: PUSH
77018: EMPTY
77019: LIST
77020: LIST
77021: LIST
77022: LIST
77023: LIST
77024: LIST
77025: LIST
77026: LIST
77027: LIST
77028: LIST
77029: LIST
77030: LIST
77031: LIST
77032: LIST
77033: LIST
77034: LIST
77035: LIST
77036: LIST
77037: LIST
77038: LIST
77039: LIST
77040: LIST
77041: LIST
77042: LIST
77043: LIST
77044: LIST
77045: LIST
77046: LIST
77047: LIST
77048: LIST
77049: LIST
77050: LIST
77051: LIST
77052: LIST
77053: LIST
77054: LIST
77055: LIST
77056: LIST
77057: LIST
77058: LIST
77059: LIST
77060: LIST
77061: LIST
77062: LIST
77063: LIST
77064: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
77065: LD_ADDR_VAR 0 31
77069: PUSH
77070: LD_INT 0
77072: PUSH
77073: LD_INT 4
77075: PUSH
77076: EMPTY
77077: LIST
77078: LIST
77079: PUSH
77080: LD_INT 0
77082: PUSH
77083: LD_INT 3
77085: PUSH
77086: EMPTY
77087: LIST
77088: LIST
77089: PUSH
77090: LD_INT 1
77092: PUSH
77093: LD_INT 4
77095: PUSH
77096: EMPTY
77097: LIST
77098: LIST
77099: PUSH
77100: LD_INT 1
77102: PUSH
77103: LD_INT 5
77105: PUSH
77106: EMPTY
77107: LIST
77108: LIST
77109: PUSH
77110: LD_INT 0
77112: PUSH
77113: LD_INT 5
77115: PUSH
77116: EMPTY
77117: LIST
77118: LIST
77119: PUSH
77120: LD_INT 1
77122: NEG
77123: PUSH
77124: LD_INT 4
77126: PUSH
77127: EMPTY
77128: LIST
77129: LIST
77130: PUSH
77131: LD_INT 1
77133: NEG
77134: PUSH
77135: LD_INT 3
77137: PUSH
77138: EMPTY
77139: LIST
77140: LIST
77141: PUSH
77142: LD_INT 2
77144: PUSH
77145: LD_INT 5
77147: PUSH
77148: EMPTY
77149: LIST
77150: LIST
77151: PUSH
77152: LD_INT 2
77154: NEG
77155: PUSH
77156: LD_INT 3
77158: PUSH
77159: EMPTY
77160: LIST
77161: LIST
77162: PUSH
77163: LD_INT 3
77165: NEG
77166: PUSH
77167: LD_INT 0
77169: PUSH
77170: EMPTY
77171: LIST
77172: LIST
77173: PUSH
77174: LD_INT 3
77176: NEG
77177: PUSH
77178: LD_INT 1
77180: NEG
77181: PUSH
77182: EMPTY
77183: LIST
77184: LIST
77185: PUSH
77186: LD_INT 2
77188: NEG
77189: PUSH
77190: LD_INT 0
77192: PUSH
77193: EMPTY
77194: LIST
77195: LIST
77196: PUSH
77197: LD_INT 2
77199: NEG
77200: PUSH
77201: LD_INT 1
77203: PUSH
77204: EMPTY
77205: LIST
77206: LIST
77207: PUSH
77208: LD_INT 3
77210: NEG
77211: PUSH
77212: LD_INT 1
77214: PUSH
77215: EMPTY
77216: LIST
77217: LIST
77218: PUSH
77219: LD_INT 4
77221: NEG
77222: PUSH
77223: LD_INT 0
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: PUSH
77230: LD_INT 4
77232: NEG
77233: PUSH
77234: LD_INT 1
77236: NEG
77237: PUSH
77238: EMPTY
77239: LIST
77240: LIST
77241: PUSH
77242: LD_INT 4
77244: NEG
77245: PUSH
77246: LD_INT 2
77248: NEG
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: PUSH
77254: LD_INT 2
77256: NEG
77257: PUSH
77258: LD_INT 2
77260: PUSH
77261: EMPTY
77262: LIST
77263: LIST
77264: PUSH
77265: LD_INT 4
77267: NEG
77268: PUSH
77269: LD_INT 4
77271: NEG
77272: PUSH
77273: EMPTY
77274: LIST
77275: LIST
77276: PUSH
77277: LD_INT 4
77279: NEG
77280: PUSH
77281: LD_INT 5
77283: NEG
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: LD_INT 3
77291: NEG
77292: PUSH
77293: LD_INT 4
77295: NEG
77296: PUSH
77297: EMPTY
77298: LIST
77299: LIST
77300: PUSH
77301: LD_INT 3
77303: NEG
77304: PUSH
77305: LD_INT 3
77307: NEG
77308: PUSH
77309: EMPTY
77310: LIST
77311: LIST
77312: PUSH
77313: LD_INT 4
77315: NEG
77316: PUSH
77317: LD_INT 3
77319: NEG
77320: PUSH
77321: EMPTY
77322: LIST
77323: LIST
77324: PUSH
77325: LD_INT 5
77327: NEG
77328: PUSH
77329: LD_INT 4
77331: NEG
77332: PUSH
77333: EMPTY
77334: LIST
77335: LIST
77336: PUSH
77337: LD_INT 5
77339: NEG
77340: PUSH
77341: LD_INT 5
77343: NEG
77344: PUSH
77345: EMPTY
77346: LIST
77347: LIST
77348: PUSH
77349: LD_INT 3
77351: NEG
77352: PUSH
77353: LD_INT 5
77355: NEG
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: PUSH
77361: LD_INT 5
77363: NEG
77364: PUSH
77365: LD_INT 3
77367: NEG
77368: PUSH
77369: EMPTY
77370: LIST
77371: LIST
77372: PUSH
77373: LD_INT 0
77375: PUSH
77376: LD_INT 3
77378: NEG
77379: PUSH
77380: EMPTY
77381: LIST
77382: LIST
77383: PUSH
77384: LD_INT 0
77386: PUSH
77387: LD_INT 4
77389: NEG
77390: PUSH
77391: EMPTY
77392: LIST
77393: LIST
77394: PUSH
77395: LD_INT 1
77397: PUSH
77398: LD_INT 3
77400: NEG
77401: PUSH
77402: EMPTY
77403: LIST
77404: LIST
77405: PUSH
77406: LD_INT 1
77408: PUSH
77409: LD_INT 2
77411: NEG
77412: PUSH
77413: EMPTY
77414: LIST
77415: LIST
77416: PUSH
77417: LD_INT 0
77419: PUSH
77420: LD_INT 2
77422: NEG
77423: PUSH
77424: EMPTY
77425: LIST
77426: LIST
77427: PUSH
77428: LD_INT 1
77430: NEG
77431: PUSH
77432: LD_INT 3
77434: NEG
77435: PUSH
77436: EMPTY
77437: LIST
77438: LIST
77439: PUSH
77440: LD_INT 1
77442: NEG
77443: PUSH
77444: LD_INT 4
77446: NEG
77447: PUSH
77448: EMPTY
77449: LIST
77450: LIST
77451: PUSH
77452: LD_INT 2
77454: PUSH
77455: LD_INT 2
77457: NEG
77458: PUSH
77459: EMPTY
77460: LIST
77461: LIST
77462: PUSH
77463: LD_INT 2
77465: NEG
77466: PUSH
77467: LD_INT 4
77469: NEG
77470: PUSH
77471: EMPTY
77472: LIST
77473: LIST
77474: PUSH
77475: LD_INT 4
77477: PUSH
77478: LD_INT 0
77480: PUSH
77481: EMPTY
77482: LIST
77483: LIST
77484: PUSH
77485: LD_INT 4
77487: PUSH
77488: LD_INT 1
77490: NEG
77491: PUSH
77492: EMPTY
77493: LIST
77494: LIST
77495: PUSH
77496: LD_INT 5
77498: PUSH
77499: LD_INT 0
77501: PUSH
77502: EMPTY
77503: LIST
77504: LIST
77505: PUSH
77506: LD_INT 5
77508: PUSH
77509: LD_INT 1
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: PUSH
77516: LD_INT 4
77518: PUSH
77519: LD_INT 1
77521: PUSH
77522: EMPTY
77523: LIST
77524: LIST
77525: PUSH
77526: LD_INT 3
77528: PUSH
77529: LD_INT 0
77531: PUSH
77532: EMPTY
77533: LIST
77534: LIST
77535: PUSH
77536: LD_INT 3
77538: PUSH
77539: LD_INT 1
77541: NEG
77542: PUSH
77543: EMPTY
77544: LIST
77545: LIST
77546: PUSH
77547: LD_INT 3
77549: PUSH
77550: LD_INT 2
77552: NEG
77553: PUSH
77554: EMPTY
77555: LIST
77556: LIST
77557: PUSH
77558: LD_INT 5
77560: PUSH
77561: LD_INT 2
77563: PUSH
77564: EMPTY
77565: LIST
77566: LIST
77567: PUSH
77568: EMPTY
77569: LIST
77570: LIST
77571: LIST
77572: LIST
77573: LIST
77574: LIST
77575: LIST
77576: LIST
77577: LIST
77578: LIST
77579: LIST
77580: LIST
77581: LIST
77582: LIST
77583: LIST
77584: LIST
77585: LIST
77586: LIST
77587: LIST
77588: LIST
77589: LIST
77590: LIST
77591: LIST
77592: LIST
77593: LIST
77594: LIST
77595: LIST
77596: LIST
77597: LIST
77598: LIST
77599: LIST
77600: LIST
77601: LIST
77602: LIST
77603: LIST
77604: LIST
77605: LIST
77606: LIST
77607: LIST
77608: LIST
77609: LIST
77610: LIST
77611: LIST
77612: LIST
77613: LIST
77614: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
77615: LD_ADDR_VAR 0 32
77619: PUSH
77620: LD_INT 4
77622: NEG
77623: PUSH
77624: LD_INT 0
77626: PUSH
77627: EMPTY
77628: LIST
77629: LIST
77630: PUSH
77631: LD_INT 4
77633: NEG
77634: PUSH
77635: LD_INT 1
77637: NEG
77638: PUSH
77639: EMPTY
77640: LIST
77641: LIST
77642: PUSH
77643: LD_INT 3
77645: NEG
77646: PUSH
77647: LD_INT 0
77649: PUSH
77650: EMPTY
77651: LIST
77652: LIST
77653: PUSH
77654: LD_INT 3
77656: NEG
77657: PUSH
77658: LD_INT 1
77660: PUSH
77661: EMPTY
77662: LIST
77663: LIST
77664: PUSH
77665: LD_INT 4
77667: NEG
77668: PUSH
77669: LD_INT 1
77671: PUSH
77672: EMPTY
77673: LIST
77674: LIST
77675: PUSH
77676: LD_INT 5
77678: NEG
77679: PUSH
77680: LD_INT 0
77682: PUSH
77683: EMPTY
77684: LIST
77685: LIST
77686: PUSH
77687: LD_INT 5
77689: NEG
77690: PUSH
77691: LD_INT 1
77693: NEG
77694: PUSH
77695: EMPTY
77696: LIST
77697: LIST
77698: PUSH
77699: LD_INT 5
77701: NEG
77702: PUSH
77703: LD_INT 2
77705: NEG
77706: PUSH
77707: EMPTY
77708: LIST
77709: LIST
77710: PUSH
77711: LD_INT 3
77713: NEG
77714: PUSH
77715: LD_INT 2
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: PUSH
77722: LD_INT 3
77724: NEG
77725: PUSH
77726: LD_INT 3
77728: NEG
77729: PUSH
77730: EMPTY
77731: LIST
77732: LIST
77733: PUSH
77734: LD_INT 3
77736: NEG
77737: PUSH
77738: LD_INT 4
77740: NEG
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: PUSH
77746: LD_INT 2
77748: NEG
77749: PUSH
77750: LD_INT 3
77752: NEG
77753: PUSH
77754: EMPTY
77755: LIST
77756: LIST
77757: PUSH
77758: LD_INT 2
77760: NEG
77761: PUSH
77762: LD_INT 2
77764: NEG
77765: PUSH
77766: EMPTY
77767: LIST
77768: LIST
77769: PUSH
77770: LD_INT 3
77772: NEG
77773: PUSH
77774: LD_INT 2
77776: NEG
77777: PUSH
77778: EMPTY
77779: LIST
77780: LIST
77781: PUSH
77782: LD_INT 4
77784: NEG
77785: PUSH
77786: LD_INT 3
77788: NEG
77789: PUSH
77790: EMPTY
77791: LIST
77792: LIST
77793: PUSH
77794: LD_INT 4
77796: NEG
77797: PUSH
77798: LD_INT 4
77800: NEG
77801: PUSH
77802: EMPTY
77803: LIST
77804: LIST
77805: PUSH
77806: LD_INT 2
77808: NEG
77809: PUSH
77810: LD_INT 4
77812: NEG
77813: PUSH
77814: EMPTY
77815: LIST
77816: LIST
77817: PUSH
77818: LD_INT 4
77820: NEG
77821: PUSH
77822: LD_INT 2
77824: NEG
77825: PUSH
77826: EMPTY
77827: LIST
77828: LIST
77829: PUSH
77830: LD_INT 0
77832: PUSH
77833: LD_INT 4
77835: NEG
77836: PUSH
77837: EMPTY
77838: LIST
77839: LIST
77840: PUSH
77841: LD_INT 0
77843: PUSH
77844: LD_INT 5
77846: NEG
77847: PUSH
77848: EMPTY
77849: LIST
77850: LIST
77851: PUSH
77852: LD_INT 1
77854: PUSH
77855: LD_INT 4
77857: NEG
77858: PUSH
77859: EMPTY
77860: LIST
77861: LIST
77862: PUSH
77863: LD_INT 1
77865: PUSH
77866: LD_INT 3
77868: NEG
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: PUSH
77874: LD_INT 0
77876: PUSH
77877: LD_INT 3
77879: NEG
77880: PUSH
77881: EMPTY
77882: LIST
77883: LIST
77884: PUSH
77885: LD_INT 1
77887: NEG
77888: PUSH
77889: LD_INT 4
77891: NEG
77892: PUSH
77893: EMPTY
77894: LIST
77895: LIST
77896: PUSH
77897: LD_INT 1
77899: NEG
77900: PUSH
77901: LD_INT 5
77903: NEG
77904: PUSH
77905: EMPTY
77906: LIST
77907: LIST
77908: PUSH
77909: LD_INT 2
77911: PUSH
77912: LD_INT 3
77914: NEG
77915: PUSH
77916: EMPTY
77917: LIST
77918: LIST
77919: PUSH
77920: LD_INT 2
77922: NEG
77923: PUSH
77924: LD_INT 5
77926: NEG
77927: PUSH
77928: EMPTY
77929: LIST
77930: LIST
77931: PUSH
77932: LD_INT 3
77934: PUSH
77935: LD_INT 0
77937: PUSH
77938: EMPTY
77939: LIST
77940: LIST
77941: PUSH
77942: LD_INT 3
77944: PUSH
77945: LD_INT 1
77947: NEG
77948: PUSH
77949: EMPTY
77950: LIST
77951: LIST
77952: PUSH
77953: LD_INT 4
77955: PUSH
77956: LD_INT 0
77958: PUSH
77959: EMPTY
77960: LIST
77961: LIST
77962: PUSH
77963: LD_INT 4
77965: PUSH
77966: LD_INT 1
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: PUSH
77973: LD_INT 3
77975: PUSH
77976: LD_INT 1
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: PUSH
77983: LD_INT 2
77985: PUSH
77986: LD_INT 0
77988: PUSH
77989: EMPTY
77990: LIST
77991: LIST
77992: PUSH
77993: LD_INT 2
77995: PUSH
77996: LD_INT 1
77998: NEG
77999: PUSH
78000: EMPTY
78001: LIST
78002: LIST
78003: PUSH
78004: LD_INT 2
78006: PUSH
78007: LD_INT 2
78009: NEG
78010: PUSH
78011: EMPTY
78012: LIST
78013: LIST
78014: PUSH
78015: LD_INT 4
78017: PUSH
78018: LD_INT 2
78020: PUSH
78021: EMPTY
78022: LIST
78023: LIST
78024: PUSH
78025: LD_INT 4
78027: PUSH
78028: LD_INT 4
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: PUSH
78035: LD_INT 4
78037: PUSH
78038: LD_INT 3
78040: PUSH
78041: EMPTY
78042: LIST
78043: LIST
78044: PUSH
78045: LD_INT 5
78047: PUSH
78048: LD_INT 4
78050: PUSH
78051: EMPTY
78052: LIST
78053: LIST
78054: PUSH
78055: LD_INT 5
78057: PUSH
78058: LD_INT 5
78060: PUSH
78061: EMPTY
78062: LIST
78063: LIST
78064: PUSH
78065: LD_INT 4
78067: PUSH
78068: LD_INT 5
78070: PUSH
78071: EMPTY
78072: LIST
78073: LIST
78074: PUSH
78075: LD_INT 3
78077: PUSH
78078: LD_INT 4
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: PUSH
78085: LD_INT 3
78087: PUSH
78088: LD_INT 3
78090: PUSH
78091: EMPTY
78092: LIST
78093: LIST
78094: PUSH
78095: LD_INT 5
78097: PUSH
78098: LD_INT 3
78100: PUSH
78101: EMPTY
78102: LIST
78103: LIST
78104: PUSH
78105: LD_INT 3
78107: PUSH
78108: LD_INT 5
78110: PUSH
78111: EMPTY
78112: LIST
78113: LIST
78114: PUSH
78115: EMPTY
78116: LIST
78117: LIST
78118: LIST
78119: LIST
78120: LIST
78121: LIST
78122: LIST
78123: LIST
78124: LIST
78125: LIST
78126: LIST
78127: LIST
78128: LIST
78129: LIST
78130: LIST
78131: LIST
78132: LIST
78133: LIST
78134: LIST
78135: LIST
78136: LIST
78137: LIST
78138: LIST
78139: LIST
78140: LIST
78141: LIST
78142: LIST
78143: LIST
78144: LIST
78145: LIST
78146: LIST
78147: LIST
78148: LIST
78149: LIST
78150: LIST
78151: LIST
78152: LIST
78153: LIST
78154: LIST
78155: LIST
78156: LIST
78157: LIST
78158: LIST
78159: LIST
78160: LIST
78161: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
78162: LD_ADDR_VAR 0 33
78166: PUSH
78167: LD_INT 4
78169: NEG
78170: PUSH
78171: LD_INT 4
78173: NEG
78174: PUSH
78175: EMPTY
78176: LIST
78177: LIST
78178: PUSH
78179: LD_INT 4
78181: NEG
78182: PUSH
78183: LD_INT 5
78185: NEG
78186: PUSH
78187: EMPTY
78188: LIST
78189: LIST
78190: PUSH
78191: LD_INT 3
78193: NEG
78194: PUSH
78195: LD_INT 4
78197: NEG
78198: PUSH
78199: EMPTY
78200: LIST
78201: LIST
78202: PUSH
78203: LD_INT 3
78205: NEG
78206: PUSH
78207: LD_INT 3
78209: NEG
78210: PUSH
78211: EMPTY
78212: LIST
78213: LIST
78214: PUSH
78215: LD_INT 4
78217: NEG
78218: PUSH
78219: LD_INT 3
78221: NEG
78222: PUSH
78223: EMPTY
78224: LIST
78225: LIST
78226: PUSH
78227: LD_INT 5
78229: NEG
78230: PUSH
78231: LD_INT 4
78233: NEG
78234: PUSH
78235: EMPTY
78236: LIST
78237: LIST
78238: PUSH
78239: LD_INT 5
78241: NEG
78242: PUSH
78243: LD_INT 5
78245: NEG
78246: PUSH
78247: EMPTY
78248: LIST
78249: LIST
78250: PUSH
78251: LD_INT 3
78253: NEG
78254: PUSH
78255: LD_INT 5
78257: NEG
78258: PUSH
78259: EMPTY
78260: LIST
78261: LIST
78262: PUSH
78263: LD_INT 5
78265: NEG
78266: PUSH
78267: LD_INT 3
78269: NEG
78270: PUSH
78271: EMPTY
78272: LIST
78273: LIST
78274: PUSH
78275: LD_INT 0
78277: PUSH
78278: LD_INT 3
78280: NEG
78281: PUSH
78282: EMPTY
78283: LIST
78284: LIST
78285: PUSH
78286: LD_INT 0
78288: PUSH
78289: LD_INT 4
78291: NEG
78292: PUSH
78293: EMPTY
78294: LIST
78295: LIST
78296: PUSH
78297: LD_INT 1
78299: PUSH
78300: LD_INT 3
78302: NEG
78303: PUSH
78304: EMPTY
78305: LIST
78306: LIST
78307: PUSH
78308: LD_INT 1
78310: PUSH
78311: LD_INT 2
78313: NEG
78314: PUSH
78315: EMPTY
78316: LIST
78317: LIST
78318: PUSH
78319: LD_INT 0
78321: PUSH
78322: LD_INT 2
78324: NEG
78325: PUSH
78326: EMPTY
78327: LIST
78328: LIST
78329: PUSH
78330: LD_INT 1
78332: NEG
78333: PUSH
78334: LD_INT 3
78336: NEG
78337: PUSH
78338: EMPTY
78339: LIST
78340: LIST
78341: PUSH
78342: LD_INT 1
78344: NEG
78345: PUSH
78346: LD_INT 4
78348: NEG
78349: PUSH
78350: EMPTY
78351: LIST
78352: LIST
78353: PUSH
78354: LD_INT 2
78356: PUSH
78357: LD_INT 2
78359: NEG
78360: PUSH
78361: EMPTY
78362: LIST
78363: LIST
78364: PUSH
78365: LD_INT 2
78367: NEG
78368: PUSH
78369: LD_INT 4
78371: NEG
78372: PUSH
78373: EMPTY
78374: LIST
78375: LIST
78376: PUSH
78377: LD_INT 4
78379: PUSH
78380: LD_INT 0
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: PUSH
78387: LD_INT 4
78389: PUSH
78390: LD_INT 1
78392: NEG
78393: PUSH
78394: EMPTY
78395: LIST
78396: LIST
78397: PUSH
78398: LD_INT 5
78400: PUSH
78401: LD_INT 0
78403: PUSH
78404: EMPTY
78405: LIST
78406: LIST
78407: PUSH
78408: LD_INT 5
78410: PUSH
78411: LD_INT 1
78413: PUSH
78414: EMPTY
78415: LIST
78416: LIST
78417: PUSH
78418: LD_INT 4
78420: PUSH
78421: LD_INT 1
78423: PUSH
78424: EMPTY
78425: LIST
78426: LIST
78427: PUSH
78428: LD_INT 3
78430: PUSH
78431: LD_INT 0
78433: PUSH
78434: EMPTY
78435: LIST
78436: LIST
78437: PUSH
78438: LD_INT 3
78440: PUSH
78441: LD_INT 1
78443: NEG
78444: PUSH
78445: EMPTY
78446: LIST
78447: LIST
78448: PUSH
78449: LD_INT 3
78451: PUSH
78452: LD_INT 2
78454: NEG
78455: PUSH
78456: EMPTY
78457: LIST
78458: LIST
78459: PUSH
78460: LD_INT 5
78462: PUSH
78463: LD_INT 2
78465: PUSH
78466: EMPTY
78467: LIST
78468: LIST
78469: PUSH
78470: LD_INT 3
78472: PUSH
78473: LD_INT 3
78475: PUSH
78476: EMPTY
78477: LIST
78478: LIST
78479: PUSH
78480: LD_INT 3
78482: PUSH
78483: LD_INT 2
78485: PUSH
78486: EMPTY
78487: LIST
78488: LIST
78489: PUSH
78490: LD_INT 4
78492: PUSH
78493: LD_INT 3
78495: PUSH
78496: EMPTY
78497: LIST
78498: LIST
78499: PUSH
78500: LD_INT 4
78502: PUSH
78503: LD_INT 4
78505: PUSH
78506: EMPTY
78507: LIST
78508: LIST
78509: PUSH
78510: LD_INT 3
78512: PUSH
78513: LD_INT 4
78515: PUSH
78516: EMPTY
78517: LIST
78518: LIST
78519: PUSH
78520: LD_INT 2
78522: PUSH
78523: LD_INT 3
78525: PUSH
78526: EMPTY
78527: LIST
78528: LIST
78529: PUSH
78530: LD_INT 2
78532: PUSH
78533: LD_INT 2
78535: PUSH
78536: EMPTY
78537: LIST
78538: LIST
78539: PUSH
78540: LD_INT 4
78542: PUSH
78543: LD_INT 2
78545: PUSH
78546: EMPTY
78547: LIST
78548: LIST
78549: PUSH
78550: LD_INT 2
78552: PUSH
78553: LD_INT 4
78555: PUSH
78556: EMPTY
78557: LIST
78558: LIST
78559: PUSH
78560: LD_INT 0
78562: PUSH
78563: LD_INT 4
78565: PUSH
78566: EMPTY
78567: LIST
78568: LIST
78569: PUSH
78570: LD_INT 0
78572: PUSH
78573: LD_INT 3
78575: PUSH
78576: EMPTY
78577: LIST
78578: LIST
78579: PUSH
78580: LD_INT 1
78582: PUSH
78583: LD_INT 4
78585: PUSH
78586: EMPTY
78587: LIST
78588: LIST
78589: PUSH
78590: LD_INT 1
78592: PUSH
78593: LD_INT 5
78595: PUSH
78596: EMPTY
78597: LIST
78598: LIST
78599: PUSH
78600: LD_INT 0
78602: PUSH
78603: LD_INT 5
78605: PUSH
78606: EMPTY
78607: LIST
78608: LIST
78609: PUSH
78610: LD_INT 1
78612: NEG
78613: PUSH
78614: LD_INT 4
78616: PUSH
78617: EMPTY
78618: LIST
78619: LIST
78620: PUSH
78621: LD_INT 1
78623: NEG
78624: PUSH
78625: LD_INT 3
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: PUSH
78632: LD_INT 2
78634: PUSH
78635: LD_INT 5
78637: PUSH
78638: EMPTY
78639: LIST
78640: LIST
78641: PUSH
78642: LD_INT 2
78644: NEG
78645: PUSH
78646: LD_INT 3
78648: PUSH
78649: EMPTY
78650: LIST
78651: LIST
78652: PUSH
78653: EMPTY
78654: LIST
78655: LIST
78656: LIST
78657: LIST
78658: LIST
78659: LIST
78660: LIST
78661: LIST
78662: LIST
78663: LIST
78664: LIST
78665: LIST
78666: LIST
78667: LIST
78668: LIST
78669: LIST
78670: LIST
78671: LIST
78672: LIST
78673: LIST
78674: LIST
78675: LIST
78676: LIST
78677: LIST
78678: LIST
78679: LIST
78680: LIST
78681: LIST
78682: LIST
78683: LIST
78684: LIST
78685: LIST
78686: LIST
78687: LIST
78688: LIST
78689: LIST
78690: LIST
78691: LIST
78692: LIST
78693: LIST
78694: LIST
78695: LIST
78696: LIST
78697: LIST
78698: LIST
78699: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
78700: LD_ADDR_VAR 0 34
78704: PUSH
78705: LD_INT 0
78707: PUSH
78708: LD_INT 4
78710: NEG
78711: PUSH
78712: EMPTY
78713: LIST
78714: LIST
78715: PUSH
78716: LD_INT 0
78718: PUSH
78719: LD_INT 5
78721: NEG
78722: PUSH
78723: EMPTY
78724: LIST
78725: LIST
78726: PUSH
78727: LD_INT 1
78729: PUSH
78730: LD_INT 4
78732: NEG
78733: PUSH
78734: EMPTY
78735: LIST
78736: LIST
78737: PUSH
78738: LD_INT 1
78740: PUSH
78741: LD_INT 3
78743: NEG
78744: PUSH
78745: EMPTY
78746: LIST
78747: LIST
78748: PUSH
78749: LD_INT 0
78751: PUSH
78752: LD_INT 3
78754: NEG
78755: PUSH
78756: EMPTY
78757: LIST
78758: LIST
78759: PUSH
78760: LD_INT 1
78762: NEG
78763: PUSH
78764: LD_INT 4
78766: NEG
78767: PUSH
78768: EMPTY
78769: LIST
78770: LIST
78771: PUSH
78772: LD_INT 1
78774: NEG
78775: PUSH
78776: LD_INT 5
78778: NEG
78779: PUSH
78780: EMPTY
78781: LIST
78782: LIST
78783: PUSH
78784: LD_INT 2
78786: PUSH
78787: LD_INT 3
78789: NEG
78790: PUSH
78791: EMPTY
78792: LIST
78793: LIST
78794: PUSH
78795: LD_INT 2
78797: NEG
78798: PUSH
78799: LD_INT 5
78801: NEG
78802: PUSH
78803: EMPTY
78804: LIST
78805: LIST
78806: PUSH
78807: LD_INT 3
78809: PUSH
78810: LD_INT 0
78812: PUSH
78813: EMPTY
78814: LIST
78815: LIST
78816: PUSH
78817: LD_INT 3
78819: PUSH
78820: LD_INT 1
78822: NEG
78823: PUSH
78824: EMPTY
78825: LIST
78826: LIST
78827: PUSH
78828: LD_INT 4
78830: PUSH
78831: LD_INT 0
78833: PUSH
78834: EMPTY
78835: LIST
78836: LIST
78837: PUSH
78838: LD_INT 4
78840: PUSH
78841: LD_INT 1
78843: PUSH
78844: EMPTY
78845: LIST
78846: LIST
78847: PUSH
78848: LD_INT 3
78850: PUSH
78851: LD_INT 1
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: PUSH
78858: LD_INT 2
78860: PUSH
78861: LD_INT 0
78863: PUSH
78864: EMPTY
78865: LIST
78866: LIST
78867: PUSH
78868: LD_INT 2
78870: PUSH
78871: LD_INT 1
78873: NEG
78874: PUSH
78875: EMPTY
78876: LIST
78877: LIST
78878: PUSH
78879: LD_INT 2
78881: PUSH
78882: LD_INT 2
78884: NEG
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: PUSH
78890: LD_INT 4
78892: PUSH
78893: LD_INT 2
78895: PUSH
78896: EMPTY
78897: LIST
78898: LIST
78899: PUSH
78900: LD_INT 4
78902: PUSH
78903: LD_INT 4
78905: PUSH
78906: EMPTY
78907: LIST
78908: LIST
78909: PUSH
78910: LD_INT 4
78912: PUSH
78913: LD_INT 3
78915: PUSH
78916: EMPTY
78917: LIST
78918: LIST
78919: PUSH
78920: LD_INT 5
78922: PUSH
78923: LD_INT 4
78925: PUSH
78926: EMPTY
78927: LIST
78928: LIST
78929: PUSH
78930: LD_INT 5
78932: PUSH
78933: LD_INT 5
78935: PUSH
78936: EMPTY
78937: LIST
78938: LIST
78939: PUSH
78940: LD_INT 4
78942: PUSH
78943: LD_INT 5
78945: PUSH
78946: EMPTY
78947: LIST
78948: LIST
78949: PUSH
78950: LD_INT 3
78952: PUSH
78953: LD_INT 4
78955: PUSH
78956: EMPTY
78957: LIST
78958: LIST
78959: PUSH
78960: LD_INT 3
78962: PUSH
78963: LD_INT 3
78965: PUSH
78966: EMPTY
78967: LIST
78968: LIST
78969: PUSH
78970: LD_INT 5
78972: PUSH
78973: LD_INT 3
78975: PUSH
78976: EMPTY
78977: LIST
78978: LIST
78979: PUSH
78980: LD_INT 3
78982: PUSH
78983: LD_INT 5
78985: PUSH
78986: EMPTY
78987: LIST
78988: LIST
78989: PUSH
78990: LD_INT 0
78992: PUSH
78993: LD_INT 3
78995: PUSH
78996: EMPTY
78997: LIST
78998: LIST
78999: PUSH
79000: LD_INT 0
79002: PUSH
79003: LD_INT 2
79005: PUSH
79006: EMPTY
79007: LIST
79008: LIST
79009: PUSH
79010: LD_INT 1
79012: PUSH
79013: LD_INT 3
79015: PUSH
79016: EMPTY
79017: LIST
79018: LIST
79019: PUSH
79020: LD_INT 1
79022: PUSH
79023: LD_INT 4
79025: PUSH
79026: EMPTY
79027: LIST
79028: LIST
79029: PUSH
79030: LD_INT 0
79032: PUSH
79033: LD_INT 4
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: PUSH
79040: LD_INT 1
79042: NEG
79043: PUSH
79044: LD_INT 3
79046: PUSH
79047: EMPTY
79048: LIST
79049: LIST
79050: PUSH
79051: LD_INT 1
79053: NEG
79054: PUSH
79055: LD_INT 2
79057: PUSH
79058: EMPTY
79059: LIST
79060: LIST
79061: PUSH
79062: LD_INT 2
79064: PUSH
79065: LD_INT 4
79067: PUSH
79068: EMPTY
79069: LIST
79070: LIST
79071: PUSH
79072: LD_INT 2
79074: NEG
79075: PUSH
79076: LD_INT 2
79078: PUSH
79079: EMPTY
79080: LIST
79081: LIST
79082: PUSH
79083: LD_INT 4
79085: NEG
79086: PUSH
79087: LD_INT 0
79089: PUSH
79090: EMPTY
79091: LIST
79092: LIST
79093: PUSH
79094: LD_INT 4
79096: NEG
79097: PUSH
79098: LD_INT 1
79100: NEG
79101: PUSH
79102: EMPTY
79103: LIST
79104: LIST
79105: PUSH
79106: LD_INT 3
79108: NEG
79109: PUSH
79110: LD_INT 0
79112: PUSH
79113: EMPTY
79114: LIST
79115: LIST
79116: PUSH
79117: LD_INT 3
79119: NEG
79120: PUSH
79121: LD_INT 1
79123: PUSH
79124: EMPTY
79125: LIST
79126: LIST
79127: PUSH
79128: LD_INT 4
79130: NEG
79131: PUSH
79132: LD_INT 1
79134: PUSH
79135: EMPTY
79136: LIST
79137: LIST
79138: PUSH
79139: LD_INT 5
79141: NEG
79142: PUSH
79143: LD_INT 0
79145: PUSH
79146: EMPTY
79147: LIST
79148: LIST
79149: PUSH
79150: LD_INT 5
79152: NEG
79153: PUSH
79154: LD_INT 1
79156: NEG
79157: PUSH
79158: EMPTY
79159: LIST
79160: LIST
79161: PUSH
79162: LD_INT 5
79164: NEG
79165: PUSH
79166: LD_INT 2
79168: NEG
79169: PUSH
79170: EMPTY
79171: LIST
79172: LIST
79173: PUSH
79174: LD_INT 3
79176: NEG
79177: PUSH
79178: LD_INT 2
79180: PUSH
79181: EMPTY
79182: LIST
79183: LIST
79184: PUSH
79185: EMPTY
79186: LIST
79187: LIST
79188: LIST
79189: LIST
79190: LIST
79191: LIST
79192: LIST
79193: LIST
79194: LIST
79195: LIST
79196: LIST
79197: LIST
79198: LIST
79199: LIST
79200: LIST
79201: LIST
79202: LIST
79203: LIST
79204: LIST
79205: LIST
79206: LIST
79207: LIST
79208: LIST
79209: LIST
79210: LIST
79211: LIST
79212: LIST
79213: LIST
79214: LIST
79215: LIST
79216: LIST
79217: LIST
79218: LIST
79219: LIST
79220: LIST
79221: LIST
79222: LIST
79223: LIST
79224: LIST
79225: LIST
79226: LIST
79227: LIST
79228: LIST
79229: LIST
79230: LIST
79231: ST_TO_ADDR
// end ; end ;
79232: GO 79235
79234: POP
// case btype of b_depot , b_warehouse :
79235: LD_VAR 0 1
79239: PUSH
79240: LD_INT 0
79242: DOUBLE
79243: EQUAL
79244: IFTRUE 79254
79246: LD_INT 1
79248: DOUBLE
79249: EQUAL
79250: IFTRUE 79254
79252: GO 79455
79254: POP
// case nation of nation_american :
79255: LD_VAR 0 5
79259: PUSH
79260: LD_INT 1
79262: DOUBLE
79263: EQUAL
79264: IFTRUE 79268
79266: GO 79324
79268: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
79269: LD_ADDR_VAR 0 9
79273: PUSH
79274: LD_VAR 0 11
79278: PUSH
79279: LD_VAR 0 12
79283: PUSH
79284: LD_VAR 0 13
79288: PUSH
79289: LD_VAR 0 14
79293: PUSH
79294: LD_VAR 0 15
79298: PUSH
79299: LD_VAR 0 16
79303: PUSH
79304: EMPTY
79305: LIST
79306: LIST
79307: LIST
79308: LIST
79309: LIST
79310: LIST
79311: PUSH
79312: LD_VAR 0 4
79316: PUSH
79317: LD_INT 1
79319: PLUS
79320: ARRAY
79321: ST_TO_ADDR
79322: GO 79453
79324: LD_INT 2
79326: DOUBLE
79327: EQUAL
79328: IFTRUE 79332
79330: GO 79388
79332: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
79333: LD_ADDR_VAR 0 9
79337: PUSH
79338: LD_VAR 0 17
79342: PUSH
79343: LD_VAR 0 18
79347: PUSH
79348: LD_VAR 0 19
79352: PUSH
79353: LD_VAR 0 20
79357: PUSH
79358: LD_VAR 0 21
79362: PUSH
79363: LD_VAR 0 22
79367: PUSH
79368: EMPTY
79369: LIST
79370: LIST
79371: LIST
79372: LIST
79373: LIST
79374: LIST
79375: PUSH
79376: LD_VAR 0 4
79380: PUSH
79381: LD_INT 1
79383: PLUS
79384: ARRAY
79385: ST_TO_ADDR
79386: GO 79453
79388: LD_INT 3
79390: DOUBLE
79391: EQUAL
79392: IFTRUE 79396
79394: GO 79452
79396: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
79397: LD_ADDR_VAR 0 9
79401: PUSH
79402: LD_VAR 0 23
79406: PUSH
79407: LD_VAR 0 24
79411: PUSH
79412: LD_VAR 0 25
79416: PUSH
79417: LD_VAR 0 26
79421: PUSH
79422: LD_VAR 0 27
79426: PUSH
79427: LD_VAR 0 28
79431: PUSH
79432: EMPTY
79433: LIST
79434: LIST
79435: LIST
79436: LIST
79437: LIST
79438: LIST
79439: PUSH
79440: LD_VAR 0 4
79444: PUSH
79445: LD_INT 1
79447: PLUS
79448: ARRAY
79449: ST_TO_ADDR
79450: GO 79453
79452: POP
79453: GO 80008
79455: LD_INT 2
79457: DOUBLE
79458: EQUAL
79459: IFTRUE 79469
79461: LD_INT 3
79463: DOUBLE
79464: EQUAL
79465: IFTRUE 79469
79467: GO 79525
79469: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
79470: LD_ADDR_VAR 0 9
79474: PUSH
79475: LD_VAR 0 29
79479: PUSH
79480: LD_VAR 0 30
79484: PUSH
79485: LD_VAR 0 31
79489: PUSH
79490: LD_VAR 0 32
79494: PUSH
79495: LD_VAR 0 33
79499: PUSH
79500: LD_VAR 0 34
79504: PUSH
79505: EMPTY
79506: LIST
79507: LIST
79508: LIST
79509: LIST
79510: LIST
79511: LIST
79512: PUSH
79513: LD_VAR 0 4
79517: PUSH
79518: LD_INT 1
79520: PLUS
79521: ARRAY
79522: ST_TO_ADDR
79523: GO 80008
79525: LD_INT 16
79527: DOUBLE
79528: EQUAL
79529: IFTRUE 79587
79531: LD_INT 17
79533: DOUBLE
79534: EQUAL
79535: IFTRUE 79587
79537: LD_INT 18
79539: DOUBLE
79540: EQUAL
79541: IFTRUE 79587
79543: LD_INT 19
79545: DOUBLE
79546: EQUAL
79547: IFTRUE 79587
79549: LD_INT 22
79551: DOUBLE
79552: EQUAL
79553: IFTRUE 79587
79555: LD_INT 20
79557: DOUBLE
79558: EQUAL
79559: IFTRUE 79587
79561: LD_INT 21
79563: DOUBLE
79564: EQUAL
79565: IFTRUE 79587
79567: LD_INT 23
79569: DOUBLE
79570: EQUAL
79571: IFTRUE 79587
79573: LD_INT 24
79575: DOUBLE
79576: EQUAL
79577: IFTRUE 79587
79579: LD_INT 25
79581: DOUBLE
79582: EQUAL
79583: IFTRUE 79587
79585: GO 79643
79587: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
79588: LD_ADDR_VAR 0 9
79592: PUSH
79593: LD_VAR 0 35
79597: PUSH
79598: LD_VAR 0 36
79602: PUSH
79603: LD_VAR 0 37
79607: PUSH
79608: LD_VAR 0 38
79612: PUSH
79613: LD_VAR 0 39
79617: PUSH
79618: LD_VAR 0 40
79622: PUSH
79623: EMPTY
79624: LIST
79625: LIST
79626: LIST
79627: LIST
79628: LIST
79629: LIST
79630: PUSH
79631: LD_VAR 0 4
79635: PUSH
79636: LD_INT 1
79638: PLUS
79639: ARRAY
79640: ST_TO_ADDR
79641: GO 80008
79643: LD_INT 6
79645: DOUBLE
79646: EQUAL
79647: IFTRUE 79699
79649: LD_INT 7
79651: DOUBLE
79652: EQUAL
79653: IFTRUE 79699
79655: LD_INT 8
79657: DOUBLE
79658: EQUAL
79659: IFTRUE 79699
79661: LD_INT 13
79663: DOUBLE
79664: EQUAL
79665: IFTRUE 79699
79667: LD_INT 12
79669: DOUBLE
79670: EQUAL
79671: IFTRUE 79699
79673: LD_INT 15
79675: DOUBLE
79676: EQUAL
79677: IFTRUE 79699
79679: LD_INT 11
79681: DOUBLE
79682: EQUAL
79683: IFTRUE 79699
79685: LD_INT 14
79687: DOUBLE
79688: EQUAL
79689: IFTRUE 79699
79691: LD_INT 10
79693: DOUBLE
79694: EQUAL
79695: IFTRUE 79699
79697: GO 79755
79699: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
79700: LD_ADDR_VAR 0 9
79704: PUSH
79705: LD_VAR 0 41
79709: PUSH
79710: LD_VAR 0 42
79714: PUSH
79715: LD_VAR 0 43
79719: PUSH
79720: LD_VAR 0 44
79724: PUSH
79725: LD_VAR 0 45
79729: PUSH
79730: LD_VAR 0 46
79734: PUSH
79735: EMPTY
79736: LIST
79737: LIST
79738: LIST
79739: LIST
79740: LIST
79741: LIST
79742: PUSH
79743: LD_VAR 0 4
79747: PUSH
79748: LD_INT 1
79750: PLUS
79751: ARRAY
79752: ST_TO_ADDR
79753: GO 80008
79755: LD_INT 36
79757: DOUBLE
79758: EQUAL
79759: IFTRUE 79763
79761: GO 79819
79763: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
79764: LD_ADDR_VAR 0 9
79768: PUSH
79769: LD_VAR 0 47
79773: PUSH
79774: LD_VAR 0 48
79778: PUSH
79779: LD_VAR 0 49
79783: PUSH
79784: LD_VAR 0 50
79788: PUSH
79789: LD_VAR 0 51
79793: PUSH
79794: LD_VAR 0 52
79798: PUSH
79799: EMPTY
79800: LIST
79801: LIST
79802: LIST
79803: LIST
79804: LIST
79805: LIST
79806: PUSH
79807: LD_VAR 0 4
79811: PUSH
79812: LD_INT 1
79814: PLUS
79815: ARRAY
79816: ST_TO_ADDR
79817: GO 80008
79819: LD_INT 4
79821: DOUBLE
79822: EQUAL
79823: IFTRUE 79845
79825: LD_INT 5
79827: DOUBLE
79828: EQUAL
79829: IFTRUE 79845
79831: LD_INT 34
79833: DOUBLE
79834: EQUAL
79835: IFTRUE 79845
79837: LD_INT 37
79839: DOUBLE
79840: EQUAL
79841: IFTRUE 79845
79843: GO 79901
79845: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
79846: LD_ADDR_VAR 0 9
79850: PUSH
79851: LD_VAR 0 53
79855: PUSH
79856: LD_VAR 0 54
79860: PUSH
79861: LD_VAR 0 55
79865: PUSH
79866: LD_VAR 0 56
79870: PUSH
79871: LD_VAR 0 57
79875: PUSH
79876: LD_VAR 0 58
79880: PUSH
79881: EMPTY
79882: LIST
79883: LIST
79884: LIST
79885: LIST
79886: LIST
79887: LIST
79888: PUSH
79889: LD_VAR 0 4
79893: PUSH
79894: LD_INT 1
79896: PLUS
79897: ARRAY
79898: ST_TO_ADDR
79899: GO 80008
79901: LD_INT 31
79903: DOUBLE
79904: EQUAL
79905: IFTRUE 79951
79907: LD_INT 32
79909: DOUBLE
79910: EQUAL
79911: IFTRUE 79951
79913: LD_INT 33
79915: DOUBLE
79916: EQUAL
79917: IFTRUE 79951
79919: LD_INT 27
79921: DOUBLE
79922: EQUAL
79923: IFTRUE 79951
79925: LD_INT 26
79927: DOUBLE
79928: EQUAL
79929: IFTRUE 79951
79931: LD_INT 28
79933: DOUBLE
79934: EQUAL
79935: IFTRUE 79951
79937: LD_INT 29
79939: DOUBLE
79940: EQUAL
79941: IFTRUE 79951
79943: LD_INT 30
79945: DOUBLE
79946: EQUAL
79947: IFTRUE 79951
79949: GO 80007
79951: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
79952: LD_ADDR_VAR 0 9
79956: PUSH
79957: LD_VAR 0 59
79961: PUSH
79962: LD_VAR 0 60
79966: PUSH
79967: LD_VAR 0 61
79971: PUSH
79972: LD_VAR 0 62
79976: PUSH
79977: LD_VAR 0 63
79981: PUSH
79982: LD_VAR 0 64
79986: PUSH
79987: EMPTY
79988: LIST
79989: LIST
79990: LIST
79991: LIST
79992: LIST
79993: LIST
79994: PUSH
79995: LD_VAR 0 4
79999: PUSH
80000: LD_INT 1
80002: PLUS
80003: ARRAY
80004: ST_TO_ADDR
80005: GO 80008
80007: POP
// temp_list2 = [ ] ;
80008: LD_ADDR_VAR 0 10
80012: PUSH
80013: EMPTY
80014: ST_TO_ADDR
// for i in temp_list do
80015: LD_ADDR_VAR 0 8
80019: PUSH
80020: LD_VAR 0 9
80024: PUSH
80025: FOR_IN
80026: IFFALSE 80078
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
80028: LD_ADDR_VAR 0 10
80032: PUSH
80033: LD_VAR 0 10
80037: PUSH
80038: LD_VAR 0 8
80042: PUSH
80043: LD_INT 1
80045: ARRAY
80046: PUSH
80047: LD_VAR 0 2
80051: PLUS
80052: PUSH
80053: LD_VAR 0 8
80057: PUSH
80058: LD_INT 2
80060: ARRAY
80061: PUSH
80062: LD_VAR 0 3
80066: PLUS
80067: PUSH
80068: EMPTY
80069: LIST
80070: LIST
80071: PUSH
80072: EMPTY
80073: LIST
80074: ADD
80075: ST_TO_ADDR
80076: GO 80025
80078: POP
80079: POP
// result = temp_list2 ;
80080: LD_ADDR_VAR 0 7
80084: PUSH
80085: LD_VAR 0 10
80089: ST_TO_ADDR
// end ;
80090: LD_VAR 0 7
80094: RET
// export function EnemyInRange ( unit , dist ) ; begin
80095: LD_INT 0
80097: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
80098: LD_ADDR_VAR 0 3
80102: PUSH
80103: LD_VAR 0 1
80107: PPUSH
80108: CALL_OW 255
80112: PPUSH
80113: LD_VAR 0 1
80117: PPUSH
80118: CALL_OW 250
80122: PPUSH
80123: LD_VAR 0 1
80127: PPUSH
80128: CALL_OW 251
80132: PPUSH
80133: LD_VAR 0 2
80137: PPUSH
80138: CALL 53491 0 4
80142: PUSH
80143: LD_INT 4
80145: ARRAY
80146: ST_TO_ADDR
// end ;
80147: LD_VAR 0 3
80151: RET
// export function PlayerSeeMe ( unit ) ; begin
80152: LD_INT 0
80154: PPUSH
// result := See ( your_side , unit ) ;
80155: LD_ADDR_VAR 0 2
80159: PUSH
80160: LD_OWVAR 2
80164: PPUSH
80165: LD_VAR 0 1
80169: PPUSH
80170: CALL_OW 292
80174: ST_TO_ADDR
// end ;
80175: LD_VAR 0 2
80179: RET
// export function ReverseDir ( unit ) ; begin
80180: LD_INT 0
80182: PPUSH
// if not unit then
80183: LD_VAR 0 1
80187: NOT
80188: IFFALSE 80192
// exit ;
80190: GO 80215
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
80192: LD_ADDR_VAR 0 2
80196: PUSH
80197: LD_VAR 0 1
80201: PPUSH
80202: CALL_OW 254
80206: PUSH
80207: LD_INT 3
80209: PLUS
80210: PUSH
80211: LD_INT 6
80213: MOD
80214: ST_TO_ADDR
// end ;
80215: LD_VAR 0 2
80219: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
80220: LD_INT 0
80222: PPUSH
80223: PPUSH
80224: PPUSH
80225: PPUSH
80226: PPUSH
// if not hexes then
80227: LD_VAR 0 2
80231: NOT
80232: IFFALSE 80236
// exit ;
80234: GO 80384
// dist := 9999 ;
80236: LD_ADDR_VAR 0 5
80240: PUSH
80241: LD_INT 9999
80243: ST_TO_ADDR
// for i = 1 to hexes do
80244: LD_ADDR_VAR 0 4
80248: PUSH
80249: DOUBLE
80250: LD_INT 1
80252: DEC
80253: ST_TO_ADDR
80254: LD_VAR 0 2
80258: PUSH
80259: FOR_TO
80260: IFFALSE 80372
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
80262: LD_VAR 0 1
80266: PPUSH
80267: LD_VAR 0 2
80271: PUSH
80272: LD_VAR 0 4
80276: ARRAY
80277: PUSH
80278: LD_INT 1
80280: ARRAY
80281: PPUSH
80282: LD_VAR 0 2
80286: PUSH
80287: LD_VAR 0 4
80291: ARRAY
80292: PUSH
80293: LD_INT 2
80295: ARRAY
80296: PPUSH
80297: CALL_OW 297
80301: PUSH
80302: LD_VAR 0 5
80306: LESS
80307: IFFALSE 80370
// begin hex := hexes [ i ] ;
80309: LD_ADDR_VAR 0 7
80313: PUSH
80314: LD_VAR 0 2
80318: PUSH
80319: LD_VAR 0 4
80323: ARRAY
80324: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
80325: LD_ADDR_VAR 0 5
80329: PUSH
80330: LD_VAR 0 1
80334: PPUSH
80335: LD_VAR 0 2
80339: PUSH
80340: LD_VAR 0 4
80344: ARRAY
80345: PUSH
80346: LD_INT 1
80348: ARRAY
80349: PPUSH
80350: LD_VAR 0 2
80354: PUSH
80355: LD_VAR 0 4
80359: ARRAY
80360: PUSH
80361: LD_INT 2
80363: ARRAY
80364: PPUSH
80365: CALL_OW 297
80369: ST_TO_ADDR
// end ; end ;
80370: GO 80259
80372: POP
80373: POP
// result := hex ;
80374: LD_ADDR_VAR 0 3
80378: PUSH
80379: LD_VAR 0 7
80383: ST_TO_ADDR
// end ;
80384: LD_VAR 0 3
80388: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
80389: LD_INT 0
80391: PPUSH
80392: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
80393: LD_VAR 0 1
80397: NOT
80398: PUSH
80399: LD_VAR 0 1
80403: PUSH
80404: LD_INT 21
80406: PUSH
80407: LD_INT 2
80409: PUSH
80410: EMPTY
80411: LIST
80412: LIST
80413: PUSH
80414: LD_INT 23
80416: PUSH
80417: LD_INT 2
80419: PUSH
80420: EMPTY
80421: LIST
80422: LIST
80423: PUSH
80424: EMPTY
80425: LIST
80426: LIST
80427: PPUSH
80428: CALL_OW 69
80432: IN
80433: NOT
80434: OR
80435: IFFALSE 80439
// exit ;
80437: GO 80486
// for i = 1 to 3 do
80439: LD_ADDR_VAR 0 3
80443: PUSH
80444: DOUBLE
80445: LD_INT 1
80447: DEC
80448: ST_TO_ADDR
80449: LD_INT 3
80451: PUSH
80452: FOR_TO
80453: IFFALSE 80484
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
80455: LD_VAR 0 1
80459: PPUSH
80460: CALL_OW 250
80464: PPUSH
80465: LD_VAR 0 1
80469: PPUSH
80470: CALL_OW 251
80474: PPUSH
80475: LD_INT 1
80477: PPUSH
80478: CALL_OW 453
80482: GO 80452
80484: POP
80485: POP
// end ;
80486: LD_VAR 0 2
80490: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
80491: LD_INT 0
80493: PPUSH
80494: PPUSH
80495: PPUSH
80496: PPUSH
80497: PPUSH
80498: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
80499: LD_VAR 0 1
80503: NOT
80504: PUSH
80505: LD_VAR 0 2
80509: NOT
80510: OR
80511: PUSH
80512: LD_VAR 0 1
80516: PPUSH
80517: CALL_OW 314
80521: OR
80522: IFFALSE 80526
// exit ;
80524: GO 80967
// x := GetX ( enemy_unit ) ;
80526: LD_ADDR_VAR 0 7
80530: PUSH
80531: LD_VAR 0 2
80535: PPUSH
80536: CALL_OW 250
80540: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
80541: LD_ADDR_VAR 0 8
80545: PUSH
80546: LD_VAR 0 2
80550: PPUSH
80551: CALL_OW 251
80555: ST_TO_ADDR
// if not x or not y then
80556: LD_VAR 0 7
80560: NOT
80561: PUSH
80562: LD_VAR 0 8
80566: NOT
80567: OR
80568: IFFALSE 80572
// exit ;
80570: GO 80967
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
80572: LD_ADDR_VAR 0 6
80576: PUSH
80577: LD_VAR 0 7
80581: PPUSH
80582: LD_INT 0
80584: PPUSH
80585: LD_INT 4
80587: PPUSH
80588: CALL_OW 272
80592: PUSH
80593: LD_VAR 0 8
80597: PPUSH
80598: LD_INT 0
80600: PPUSH
80601: LD_INT 4
80603: PPUSH
80604: CALL_OW 273
80608: PUSH
80609: EMPTY
80610: LIST
80611: LIST
80612: PUSH
80613: LD_VAR 0 7
80617: PPUSH
80618: LD_INT 1
80620: PPUSH
80621: LD_INT 4
80623: PPUSH
80624: CALL_OW 272
80628: PUSH
80629: LD_VAR 0 8
80633: PPUSH
80634: LD_INT 1
80636: PPUSH
80637: LD_INT 4
80639: PPUSH
80640: CALL_OW 273
80644: PUSH
80645: EMPTY
80646: LIST
80647: LIST
80648: PUSH
80649: LD_VAR 0 7
80653: PPUSH
80654: LD_INT 2
80656: PPUSH
80657: LD_INT 4
80659: PPUSH
80660: CALL_OW 272
80664: PUSH
80665: LD_VAR 0 8
80669: PPUSH
80670: LD_INT 2
80672: PPUSH
80673: LD_INT 4
80675: PPUSH
80676: CALL_OW 273
80680: PUSH
80681: EMPTY
80682: LIST
80683: LIST
80684: PUSH
80685: LD_VAR 0 7
80689: PPUSH
80690: LD_INT 3
80692: PPUSH
80693: LD_INT 4
80695: PPUSH
80696: CALL_OW 272
80700: PUSH
80701: LD_VAR 0 8
80705: PPUSH
80706: LD_INT 3
80708: PPUSH
80709: LD_INT 4
80711: PPUSH
80712: CALL_OW 273
80716: PUSH
80717: EMPTY
80718: LIST
80719: LIST
80720: PUSH
80721: LD_VAR 0 7
80725: PPUSH
80726: LD_INT 4
80728: PPUSH
80729: LD_INT 4
80731: PPUSH
80732: CALL_OW 272
80736: PUSH
80737: LD_VAR 0 8
80741: PPUSH
80742: LD_INT 4
80744: PPUSH
80745: LD_INT 4
80747: PPUSH
80748: CALL_OW 273
80752: PUSH
80753: EMPTY
80754: LIST
80755: LIST
80756: PUSH
80757: LD_VAR 0 7
80761: PPUSH
80762: LD_INT 5
80764: PPUSH
80765: LD_INT 4
80767: PPUSH
80768: CALL_OW 272
80772: PUSH
80773: LD_VAR 0 8
80777: PPUSH
80778: LD_INT 5
80780: PPUSH
80781: LD_INT 4
80783: PPUSH
80784: CALL_OW 273
80788: PUSH
80789: EMPTY
80790: LIST
80791: LIST
80792: PUSH
80793: EMPTY
80794: LIST
80795: LIST
80796: LIST
80797: LIST
80798: LIST
80799: LIST
80800: ST_TO_ADDR
// for i = tmp downto 1 do
80801: LD_ADDR_VAR 0 4
80805: PUSH
80806: DOUBLE
80807: LD_VAR 0 6
80811: INC
80812: ST_TO_ADDR
80813: LD_INT 1
80815: PUSH
80816: FOR_DOWNTO
80817: IFFALSE 80918
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
80819: LD_VAR 0 6
80823: PUSH
80824: LD_VAR 0 4
80828: ARRAY
80829: PUSH
80830: LD_INT 1
80832: ARRAY
80833: PPUSH
80834: LD_VAR 0 6
80838: PUSH
80839: LD_VAR 0 4
80843: ARRAY
80844: PUSH
80845: LD_INT 2
80847: ARRAY
80848: PPUSH
80849: CALL_OW 488
80853: NOT
80854: PUSH
80855: LD_VAR 0 6
80859: PUSH
80860: LD_VAR 0 4
80864: ARRAY
80865: PUSH
80866: LD_INT 1
80868: ARRAY
80869: PPUSH
80870: LD_VAR 0 6
80874: PUSH
80875: LD_VAR 0 4
80879: ARRAY
80880: PUSH
80881: LD_INT 2
80883: ARRAY
80884: PPUSH
80885: CALL_OW 428
80889: PUSH
80890: LD_INT 0
80892: NONEQUAL
80893: OR
80894: IFFALSE 80916
// tmp := Delete ( tmp , i ) ;
80896: LD_ADDR_VAR 0 6
80900: PUSH
80901: LD_VAR 0 6
80905: PPUSH
80906: LD_VAR 0 4
80910: PPUSH
80911: CALL_OW 3
80915: ST_TO_ADDR
80916: GO 80816
80918: POP
80919: POP
// j := GetClosestHex ( unit , tmp ) ;
80920: LD_ADDR_VAR 0 5
80924: PUSH
80925: LD_VAR 0 1
80929: PPUSH
80930: LD_VAR 0 6
80934: PPUSH
80935: CALL 80220 0 2
80939: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
80940: LD_VAR 0 1
80944: PPUSH
80945: LD_VAR 0 5
80949: PUSH
80950: LD_INT 1
80952: ARRAY
80953: PPUSH
80954: LD_VAR 0 5
80958: PUSH
80959: LD_INT 2
80961: ARRAY
80962: PPUSH
80963: CALL_OW 111
// end ;
80967: LD_VAR 0 3
80971: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
80972: LD_INT 0
80974: PPUSH
80975: PPUSH
80976: PPUSH
// uc_side = 0 ;
80977: LD_ADDR_OWVAR 20
80981: PUSH
80982: LD_INT 0
80984: ST_TO_ADDR
// uc_nation = 0 ;
80985: LD_ADDR_OWVAR 21
80989: PUSH
80990: LD_INT 0
80992: ST_TO_ADDR
// InitHc_All ( ) ;
80993: CALL_OW 584
// InitVc ;
80997: CALL_OW 20
// if mastodonts then
81001: LD_VAR 0 6
81005: IFFALSE 81072
// for i = 1 to mastodonts do
81007: LD_ADDR_VAR 0 11
81011: PUSH
81012: DOUBLE
81013: LD_INT 1
81015: DEC
81016: ST_TO_ADDR
81017: LD_VAR 0 6
81021: PUSH
81022: FOR_TO
81023: IFFALSE 81070
// begin vc_chassis := 31 ;
81025: LD_ADDR_OWVAR 37
81029: PUSH
81030: LD_INT 31
81032: ST_TO_ADDR
// vc_control := control_rider ;
81033: LD_ADDR_OWVAR 38
81037: PUSH
81038: LD_INT 4
81040: ST_TO_ADDR
// animal := CreateVehicle ;
81041: LD_ADDR_VAR 0 12
81045: PUSH
81046: CALL_OW 45
81050: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81051: LD_VAR 0 12
81055: PPUSH
81056: LD_VAR 0 8
81060: PPUSH
81061: LD_INT 0
81063: PPUSH
81064: CALL 83260 0 3
// end ;
81068: GO 81022
81070: POP
81071: POP
// if horses then
81072: LD_VAR 0 5
81076: IFFALSE 81143
// for i = 1 to horses do
81078: LD_ADDR_VAR 0 11
81082: PUSH
81083: DOUBLE
81084: LD_INT 1
81086: DEC
81087: ST_TO_ADDR
81088: LD_VAR 0 5
81092: PUSH
81093: FOR_TO
81094: IFFALSE 81141
// begin hc_class := 21 ;
81096: LD_ADDR_OWVAR 28
81100: PUSH
81101: LD_INT 21
81103: ST_TO_ADDR
// hc_gallery :=  ;
81104: LD_ADDR_OWVAR 33
81108: PUSH
81109: LD_STRING 
81111: ST_TO_ADDR
// animal := CreateHuman ;
81112: LD_ADDR_VAR 0 12
81116: PUSH
81117: CALL_OW 44
81121: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81122: LD_VAR 0 12
81126: PPUSH
81127: LD_VAR 0 8
81131: PPUSH
81132: LD_INT 0
81134: PPUSH
81135: CALL 83260 0 3
// end ;
81139: GO 81093
81141: POP
81142: POP
// if birds then
81143: LD_VAR 0 1
81147: IFFALSE 81214
// for i = 1 to birds do
81149: LD_ADDR_VAR 0 11
81153: PUSH
81154: DOUBLE
81155: LD_INT 1
81157: DEC
81158: ST_TO_ADDR
81159: LD_VAR 0 1
81163: PUSH
81164: FOR_TO
81165: IFFALSE 81212
// begin hc_class = 18 ;
81167: LD_ADDR_OWVAR 28
81171: PUSH
81172: LD_INT 18
81174: ST_TO_ADDR
// hc_gallery =  ;
81175: LD_ADDR_OWVAR 33
81179: PUSH
81180: LD_STRING 
81182: ST_TO_ADDR
// animal := CreateHuman ;
81183: LD_ADDR_VAR 0 12
81187: PUSH
81188: CALL_OW 44
81192: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81193: LD_VAR 0 12
81197: PPUSH
81198: LD_VAR 0 8
81202: PPUSH
81203: LD_INT 0
81205: PPUSH
81206: CALL 83260 0 3
// end ;
81210: GO 81164
81212: POP
81213: POP
// if tigers then
81214: LD_VAR 0 2
81218: IFFALSE 81302
// for i = 1 to tigers do
81220: LD_ADDR_VAR 0 11
81224: PUSH
81225: DOUBLE
81226: LD_INT 1
81228: DEC
81229: ST_TO_ADDR
81230: LD_VAR 0 2
81234: PUSH
81235: FOR_TO
81236: IFFALSE 81300
// begin hc_class = class_tiger ;
81238: LD_ADDR_OWVAR 28
81242: PUSH
81243: LD_INT 14
81245: ST_TO_ADDR
// hc_gallery =  ;
81246: LD_ADDR_OWVAR 33
81250: PUSH
81251: LD_STRING 
81253: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
81254: LD_ADDR_OWVAR 35
81258: PUSH
81259: LD_INT 7
81261: NEG
81262: PPUSH
81263: LD_INT 7
81265: PPUSH
81266: CALL_OW 12
81270: ST_TO_ADDR
// animal := CreateHuman ;
81271: LD_ADDR_VAR 0 12
81275: PUSH
81276: CALL_OW 44
81280: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81281: LD_VAR 0 12
81285: PPUSH
81286: LD_VAR 0 8
81290: PPUSH
81291: LD_INT 0
81293: PPUSH
81294: CALL 83260 0 3
// end ;
81298: GO 81235
81300: POP
81301: POP
// if apemans then
81302: LD_VAR 0 3
81306: IFFALSE 81429
// for i = 1 to apemans do
81308: LD_ADDR_VAR 0 11
81312: PUSH
81313: DOUBLE
81314: LD_INT 1
81316: DEC
81317: ST_TO_ADDR
81318: LD_VAR 0 3
81322: PUSH
81323: FOR_TO
81324: IFFALSE 81427
// begin hc_class = class_apeman ;
81326: LD_ADDR_OWVAR 28
81330: PUSH
81331: LD_INT 12
81333: ST_TO_ADDR
// hc_gallery =  ;
81334: LD_ADDR_OWVAR 33
81338: PUSH
81339: LD_STRING 
81341: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
81342: LD_ADDR_OWVAR 35
81346: PUSH
81347: LD_INT 2
81349: NEG
81350: PPUSH
81351: LD_INT 2
81353: PPUSH
81354: CALL_OW 12
81358: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
81359: LD_ADDR_OWVAR 31
81363: PUSH
81364: LD_INT 1
81366: PPUSH
81367: LD_INT 3
81369: PPUSH
81370: CALL_OW 12
81374: PUSH
81375: LD_INT 1
81377: PPUSH
81378: LD_INT 3
81380: PPUSH
81381: CALL_OW 12
81385: PUSH
81386: LD_INT 0
81388: PUSH
81389: LD_INT 0
81391: PUSH
81392: EMPTY
81393: LIST
81394: LIST
81395: LIST
81396: LIST
81397: ST_TO_ADDR
// animal := CreateHuman ;
81398: LD_ADDR_VAR 0 12
81402: PUSH
81403: CALL_OW 44
81407: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81408: LD_VAR 0 12
81412: PPUSH
81413: LD_VAR 0 8
81417: PPUSH
81418: LD_INT 0
81420: PPUSH
81421: CALL 83260 0 3
// end ;
81425: GO 81323
81427: POP
81428: POP
// if enchidnas then
81429: LD_VAR 0 4
81433: IFFALSE 81500
// for i = 1 to enchidnas do
81435: LD_ADDR_VAR 0 11
81439: PUSH
81440: DOUBLE
81441: LD_INT 1
81443: DEC
81444: ST_TO_ADDR
81445: LD_VAR 0 4
81449: PUSH
81450: FOR_TO
81451: IFFALSE 81498
// begin hc_class = 13 ;
81453: LD_ADDR_OWVAR 28
81457: PUSH
81458: LD_INT 13
81460: ST_TO_ADDR
// hc_gallery =  ;
81461: LD_ADDR_OWVAR 33
81465: PUSH
81466: LD_STRING 
81468: ST_TO_ADDR
// animal := CreateHuman ;
81469: LD_ADDR_VAR 0 12
81473: PUSH
81474: CALL_OW 44
81478: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
81479: LD_VAR 0 12
81483: PPUSH
81484: LD_VAR 0 8
81488: PPUSH
81489: LD_INT 0
81491: PPUSH
81492: CALL 83260 0 3
// end ;
81496: GO 81450
81498: POP
81499: POP
// if fishes then
81500: LD_VAR 0 7
81504: IFFALSE 81571
// for i = 1 to fishes do
81506: LD_ADDR_VAR 0 11
81510: PUSH
81511: DOUBLE
81512: LD_INT 1
81514: DEC
81515: ST_TO_ADDR
81516: LD_VAR 0 7
81520: PUSH
81521: FOR_TO
81522: IFFALSE 81569
// begin hc_class = 20 ;
81524: LD_ADDR_OWVAR 28
81528: PUSH
81529: LD_INT 20
81531: ST_TO_ADDR
// hc_gallery =  ;
81532: LD_ADDR_OWVAR 33
81536: PUSH
81537: LD_STRING 
81539: ST_TO_ADDR
// animal := CreateHuman ;
81540: LD_ADDR_VAR 0 12
81544: PUSH
81545: CALL_OW 44
81549: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
81550: LD_VAR 0 12
81554: PPUSH
81555: LD_VAR 0 9
81559: PPUSH
81560: LD_INT 0
81562: PPUSH
81563: CALL 83260 0 3
// end ;
81567: GO 81521
81569: POP
81570: POP
// end ;
81571: LD_VAR 0 10
81575: RET
// export function WantHeal ( sci , unit ) ; begin
81576: LD_INT 0
81578: PPUSH
// if GetTaskList ( sci ) > 0 then
81579: LD_VAR 0 1
81583: PPUSH
81584: CALL_OW 437
81588: PUSH
81589: LD_INT 0
81591: GREATER
81592: IFFALSE 81662
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
81594: LD_VAR 0 1
81598: PPUSH
81599: CALL_OW 437
81603: PUSH
81604: LD_INT 1
81606: ARRAY
81607: PUSH
81608: LD_INT 1
81610: ARRAY
81611: PUSH
81612: LD_STRING l
81614: EQUAL
81615: PUSH
81616: LD_VAR 0 1
81620: PPUSH
81621: CALL_OW 437
81625: PUSH
81626: LD_INT 1
81628: ARRAY
81629: PUSH
81630: LD_INT 4
81632: ARRAY
81633: PUSH
81634: LD_VAR 0 2
81638: EQUAL
81639: AND
81640: IFFALSE 81652
// result := true else
81642: LD_ADDR_VAR 0 3
81646: PUSH
81647: LD_INT 1
81649: ST_TO_ADDR
81650: GO 81660
// result := false ;
81652: LD_ADDR_VAR 0 3
81656: PUSH
81657: LD_INT 0
81659: ST_TO_ADDR
// end else
81660: GO 81670
// result := false ;
81662: LD_ADDR_VAR 0 3
81666: PUSH
81667: LD_INT 0
81669: ST_TO_ADDR
// end ;
81670: LD_VAR 0 3
81674: RET
// export function HealTarget ( sci ) ; begin
81675: LD_INT 0
81677: PPUSH
// if not sci then
81678: LD_VAR 0 1
81682: NOT
81683: IFFALSE 81687
// exit ;
81685: GO 81752
// result := 0 ;
81687: LD_ADDR_VAR 0 2
81691: PUSH
81692: LD_INT 0
81694: ST_TO_ADDR
// if GetTaskList ( sci ) then
81695: LD_VAR 0 1
81699: PPUSH
81700: CALL_OW 437
81704: IFFALSE 81752
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
81706: LD_VAR 0 1
81710: PPUSH
81711: CALL_OW 437
81715: PUSH
81716: LD_INT 1
81718: ARRAY
81719: PUSH
81720: LD_INT 1
81722: ARRAY
81723: PUSH
81724: LD_STRING l
81726: EQUAL
81727: IFFALSE 81752
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
81729: LD_ADDR_VAR 0 2
81733: PUSH
81734: LD_VAR 0 1
81738: PPUSH
81739: CALL_OW 437
81743: PUSH
81744: LD_INT 1
81746: ARRAY
81747: PUSH
81748: LD_INT 4
81750: ARRAY
81751: ST_TO_ADDR
// end ;
81752: LD_VAR 0 2
81756: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
81757: LD_INT 0
81759: PPUSH
81760: PPUSH
81761: PPUSH
81762: PPUSH
// if not base_units then
81763: LD_VAR 0 1
81767: NOT
81768: IFFALSE 81772
// exit ;
81770: GO 81859
// result := false ;
81772: LD_ADDR_VAR 0 2
81776: PUSH
81777: LD_INT 0
81779: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
81780: LD_ADDR_VAR 0 5
81784: PUSH
81785: LD_VAR 0 1
81789: PPUSH
81790: LD_INT 21
81792: PUSH
81793: LD_INT 3
81795: PUSH
81796: EMPTY
81797: LIST
81798: LIST
81799: PPUSH
81800: CALL_OW 72
81804: ST_TO_ADDR
// if not tmp then
81805: LD_VAR 0 5
81809: NOT
81810: IFFALSE 81814
// exit ;
81812: GO 81859
// for i in tmp do
81814: LD_ADDR_VAR 0 3
81818: PUSH
81819: LD_VAR 0 5
81823: PUSH
81824: FOR_IN
81825: IFFALSE 81857
// begin result := EnemyInRange ( i , 22 ) ;
81827: LD_ADDR_VAR 0 2
81831: PUSH
81832: LD_VAR 0 3
81836: PPUSH
81837: LD_INT 22
81839: PPUSH
81840: CALL 80095 0 2
81844: ST_TO_ADDR
// if result then
81845: LD_VAR 0 2
81849: IFFALSE 81855
// exit ;
81851: POP
81852: POP
81853: GO 81859
// end ;
81855: GO 81824
81857: POP
81858: POP
// end ;
81859: LD_VAR 0 2
81863: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
81864: LD_INT 0
81866: PPUSH
81867: PPUSH
// if not units then
81868: LD_VAR 0 1
81872: NOT
81873: IFFALSE 81877
// exit ;
81875: GO 81947
// result := [ ] ;
81877: LD_ADDR_VAR 0 3
81881: PUSH
81882: EMPTY
81883: ST_TO_ADDR
// for i in units do
81884: LD_ADDR_VAR 0 4
81888: PUSH
81889: LD_VAR 0 1
81893: PUSH
81894: FOR_IN
81895: IFFALSE 81945
// if GetTag ( i ) = tag then
81897: LD_VAR 0 4
81901: PPUSH
81902: CALL_OW 110
81906: PUSH
81907: LD_VAR 0 2
81911: EQUAL
81912: IFFALSE 81943
// result := Replace ( result , result + 1 , i ) ;
81914: LD_ADDR_VAR 0 3
81918: PUSH
81919: LD_VAR 0 3
81923: PPUSH
81924: LD_VAR 0 3
81928: PUSH
81929: LD_INT 1
81931: PLUS
81932: PPUSH
81933: LD_VAR 0 4
81937: PPUSH
81938: CALL_OW 1
81942: ST_TO_ADDR
81943: GO 81894
81945: POP
81946: POP
// end ;
81947: LD_VAR 0 3
81951: RET
// export function IsDriver ( un ) ; begin
81952: LD_INT 0
81954: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
81955: LD_ADDR_VAR 0 2
81959: PUSH
81960: LD_VAR 0 1
81964: PUSH
81965: LD_INT 55
81967: PUSH
81968: EMPTY
81969: LIST
81970: PPUSH
81971: CALL_OW 69
81975: IN
81976: ST_TO_ADDR
// end ;
81977: LD_VAR 0 2
81981: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
81982: LD_INT 0
81984: PPUSH
81985: PPUSH
// list := [ ] ;
81986: LD_ADDR_VAR 0 5
81990: PUSH
81991: EMPTY
81992: ST_TO_ADDR
// case d of 0 :
81993: LD_VAR 0 3
81997: PUSH
81998: LD_INT 0
82000: DOUBLE
82001: EQUAL
82002: IFTRUE 82006
82004: GO 82139
82006: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
82007: LD_ADDR_VAR 0 5
82011: PUSH
82012: LD_VAR 0 1
82016: PUSH
82017: LD_INT 4
82019: MINUS
82020: PUSH
82021: LD_VAR 0 2
82025: PUSH
82026: LD_INT 4
82028: MINUS
82029: PUSH
82030: LD_INT 2
82032: PUSH
82033: EMPTY
82034: LIST
82035: LIST
82036: LIST
82037: PUSH
82038: LD_VAR 0 1
82042: PUSH
82043: LD_INT 3
82045: MINUS
82046: PUSH
82047: LD_VAR 0 2
82051: PUSH
82052: LD_INT 1
82054: PUSH
82055: EMPTY
82056: LIST
82057: LIST
82058: LIST
82059: PUSH
82060: LD_VAR 0 1
82064: PUSH
82065: LD_INT 4
82067: PLUS
82068: PUSH
82069: LD_VAR 0 2
82073: PUSH
82074: LD_INT 4
82076: PUSH
82077: EMPTY
82078: LIST
82079: LIST
82080: LIST
82081: PUSH
82082: LD_VAR 0 1
82086: PUSH
82087: LD_INT 3
82089: PLUS
82090: PUSH
82091: LD_VAR 0 2
82095: PUSH
82096: LD_INT 3
82098: PLUS
82099: PUSH
82100: LD_INT 5
82102: PUSH
82103: EMPTY
82104: LIST
82105: LIST
82106: LIST
82107: PUSH
82108: LD_VAR 0 1
82112: PUSH
82113: LD_VAR 0 2
82117: PUSH
82118: LD_INT 4
82120: PLUS
82121: PUSH
82122: LD_INT 0
82124: PUSH
82125: EMPTY
82126: LIST
82127: LIST
82128: LIST
82129: PUSH
82130: EMPTY
82131: LIST
82132: LIST
82133: LIST
82134: LIST
82135: LIST
82136: ST_TO_ADDR
// end ; 1 :
82137: GO 82837
82139: LD_INT 1
82141: DOUBLE
82142: EQUAL
82143: IFTRUE 82147
82145: GO 82280
82147: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
82148: LD_ADDR_VAR 0 5
82152: PUSH
82153: LD_VAR 0 1
82157: PUSH
82158: LD_VAR 0 2
82162: PUSH
82163: LD_INT 4
82165: MINUS
82166: PUSH
82167: LD_INT 3
82169: PUSH
82170: EMPTY
82171: LIST
82172: LIST
82173: LIST
82174: PUSH
82175: LD_VAR 0 1
82179: PUSH
82180: LD_INT 3
82182: MINUS
82183: PUSH
82184: LD_VAR 0 2
82188: PUSH
82189: LD_INT 3
82191: MINUS
82192: PUSH
82193: LD_INT 2
82195: PUSH
82196: EMPTY
82197: LIST
82198: LIST
82199: LIST
82200: PUSH
82201: LD_VAR 0 1
82205: PUSH
82206: LD_INT 4
82208: MINUS
82209: PUSH
82210: LD_VAR 0 2
82214: PUSH
82215: LD_INT 1
82217: PUSH
82218: EMPTY
82219: LIST
82220: LIST
82221: LIST
82222: PUSH
82223: LD_VAR 0 1
82227: PUSH
82228: LD_VAR 0 2
82232: PUSH
82233: LD_INT 3
82235: PLUS
82236: PUSH
82237: LD_INT 0
82239: PUSH
82240: EMPTY
82241: LIST
82242: LIST
82243: LIST
82244: PUSH
82245: LD_VAR 0 1
82249: PUSH
82250: LD_INT 4
82252: PLUS
82253: PUSH
82254: LD_VAR 0 2
82258: PUSH
82259: LD_INT 4
82261: PLUS
82262: PUSH
82263: LD_INT 5
82265: PUSH
82266: EMPTY
82267: LIST
82268: LIST
82269: LIST
82270: PUSH
82271: EMPTY
82272: LIST
82273: LIST
82274: LIST
82275: LIST
82276: LIST
82277: ST_TO_ADDR
// end ; 2 :
82278: GO 82837
82280: LD_INT 2
82282: DOUBLE
82283: EQUAL
82284: IFTRUE 82288
82286: GO 82417
82288: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
82289: LD_ADDR_VAR 0 5
82293: PUSH
82294: LD_VAR 0 1
82298: PUSH
82299: LD_VAR 0 2
82303: PUSH
82304: LD_INT 3
82306: MINUS
82307: PUSH
82308: LD_INT 3
82310: PUSH
82311: EMPTY
82312: LIST
82313: LIST
82314: LIST
82315: PUSH
82316: LD_VAR 0 1
82320: PUSH
82321: LD_INT 4
82323: PLUS
82324: PUSH
82325: LD_VAR 0 2
82329: PUSH
82330: LD_INT 4
82332: PUSH
82333: EMPTY
82334: LIST
82335: LIST
82336: LIST
82337: PUSH
82338: LD_VAR 0 1
82342: PUSH
82343: LD_VAR 0 2
82347: PUSH
82348: LD_INT 4
82350: PLUS
82351: PUSH
82352: LD_INT 0
82354: PUSH
82355: EMPTY
82356: LIST
82357: LIST
82358: LIST
82359: PUSH
82360: LD_VAR 0 1
82364: PUSH
82365: LD_INT 3
82367: MINUS
82368: PUSH
82369: LD_VAR 0 2
82373: PUSH
82374: LD_INT 1
82376: PUSH
82377: EMPTY
82378: LIST
82379: LIST
82380: LIST
82381: PUSH
82382: LD_VAR 0 1
82386: PUSH
82387: LD_INT 4
82389: MINUS
82390: PUSH
82391: LD_VAR 0 2
82395: PUSH
82396: LD_INT 4
82398: MINUS
82399: PUSH
82400: LD_INT 2
82402: PUSH
82403: EMPTY
82404: LIST
82405: LIST
82406: LIST
82407: PUSH
82408: EMPTY
82409: LIST
82410: LIST
82411: LIST
82412: LIST
82413: LIST
82414: ST_TO_ADDR
// end ; 3 :
82415: GO 82837
82417: LD_INT 3
82419: DOUBLE
82420: EQUAL
82421: IFTRUE 82425
82423: GO 82558
82425: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
82426: LD_ADDR_VAR 0 5
82430: PUSH
82431: LD_VAR 0 1
82435: PUSH
82436: LD_INT 3
82438: PLUS
82439: PUSH
82440: LD_VAR 0 2
82444: PUSH
82445: LD_INT 4
82447: PUSH
82448: EMPTY
82449: LIST
82450: LIST
82451: LIST
82452: PUSH
82453: LD_VAR 0 1
82457: PUSH
82458: LD_INT 4
82460: PLUS
82461: PUSH
82462: LD_VAR 0 2
82466: PUSH
82467: LD_INT 4
82469: PLUS
82470: PUSH
82471: LD_INT 5
82473: PUSH
82474: EMPTY
82475: LIST
82476: LIST
82477: LIST
82478: PUSH
82479: LD_VAR 0 1
82483: PUSH
82484: LD_INT 4
82486: MINUS
82487: PUSH
82488: LD_VAR 0 2
82492: PUSH
82493: LD_INT 1
82495: PUSH
82496: EMPTY
82497: LIST
82498: LIST
82499: LIST
82500: PUSH
82501: LD_VAR 0 1
82505: PUSH
82506: LD_VAR 0 2
82510: PUSH
82511: LD_INT 4
82513: MINUS
82514: PUSH
82515: LD_INT 3
82517: PUSH
82518: EMPTY
82519: LIST
82520: LIST
82521: LIST
82522: PUSH
82523: LD_VAR 0 1
82527: PUSH
82528: LD_INT 3
82530: MINUS
82531: PUSH
82532: LD_VAR 0 2
82536: PUSH
82537: LD_INT 3
82539: MINUS
82540: PUSH
82541: LD_INT 2
82543: PUSH
82544: EMPTY
82545: LIST
82546: LIST
82547: LIST
82548: PUSH
82549: EMPTY
82550: LIST
82551: LIST
82552: LIST
82553: LIST
82554: LIST
82555: ST_TO_ADDR
// end ; 4 :
82556: GO 82837
82558: LD_INT 4
82560: DOUBLE
82561: EQUAL
82562: IFTRUE 82566
82564: GO 82699
82566: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
82567: LD_ADDR_VAR 0 5
82571: PUSH
82572: LD_VAR 0 1
82576: PUSH
82577: LD_VAR 0 2
82581: PUSH
82582: LD_INT 4
82584: PLUS
82585: PUSH
82586: LD_INT 0
82588: PUSH
82589: EMPTY
82590: LIST
82591: LIST
82592: LIST
82593: PUSH
82594: LD_VAR 0 1
82598: PUSH
82599: LD_INT 3
82601: PLUS
82602: PUSH
82603: LD_VAR 0 2
82607: PUSH
82608: LD_INT 3
82610: PLUS
82611: PUSH
82612: LD_INT 5
82614: PUSH
82615: EMPTY
82616: LIST
82617: LIST
82618: LIST
82619: PUSH
82620: LD_VAR 0 1
82624: PUSH
82625: LD_INT 4
82627: PLUS
82628: PUSH
82629: LD_VAR 0 2
82633: PUSH
82634: LD_INT 4
82636: PUSH
82637: EMPTY
82638: LIST
82639: LIST
82640: LIST
82641: PUSH
82642: LD_VAR 0 1
82646: PUSH
82647: LD_VAR 0 2
82651: PUSH
82652: LD_INT 3
82654: MINUS
82655: PUSH
82656: LD_INT 3
82658: PUSH
82659: EMPTY
82660: LIST
82661: LIST
82662: LIST
82663: PUSH
82664: LD_VAR 0 1
82668: PUSH
82669: LD_INT 4
82671: MINUS
82672: PUSH
82673: LD_VAR 0 2
82677: PUSH
82678: LD_INT 4
82680: MINUS
82681: PUSH
82682: LD_INT 2
82684: PUSH
82685: EMPTY
82686: LIST
82687: LIST
82688: LIST
82689: PUSH
82690: EMPTY
82691: LIST
82692: LIST
82693: LIST
82694: LIST
82695: LIST
82696: ST_TO_ADDR
// end ; 5 :
82697: GO 82837
82699: LD_INT 5
82701: DOUBLE
82702: EQUAL
82703: IFTRUE 82707
82705: GO 82836
82707: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
82708: LD_ADDR_VAR 0 5
82712: PUSH
82713: LD_VAR 0 1
82717: PUSH
82718: LD_INT 4
82720: MINUS
82721: PUSH
82722: LD_VAR 0 2
82726: PUSH
82727: LD_INT 1
82729: PUSH
82730: EMPTY
82731: LIST
82732: LIST
82733: LIST
82734: PUSH
82735: LD_VAR 0 1
82739: PUSH
82740: LD_VAR 0 2
82744: PUSH
82745: LD_INT 4
82747: MINUS
82748: PUSH
82749: LD_INT 3
82751: PUSH
82752: EMPTY
82753: LIST
82754: LIST
82755: LIST
82756: PUSH
82757: LD_VAR 0 1
82761: PUSH
82762: LD_INT 4
82764: PLUS
82765: PUSH
82766: LD_VAR 0 2
82770: PUSH
82771: LD_INT 4
82773: PLUS
82774: PUSH
82775: LD_INT 5
82777: PUSH
82778: EMPTY
82779: LIST
82780: LIST
82781: LIST
82782: PUSH
82783: LD_VAR 0 1
82787: PUSH
82788: LD_INT 3
82790: PLUS
82791: PUSH
82792: LD_VAR 0 2
82796: PUSH
82797: LD_INT 4
82799: PUSH
82800: EMPTY
82801: LIST
82802: LIST
82803: LIST
82804: PUSH
82805: LD_VAR 0 1
82809: PUSH
82810: LD_VAR 0 2
82814: PUSH
82815: LD_INT 3
82817: PLUS
82818: PUSH
82819: LD_INT 0
82821: PUSH
82822: EMPTY
82823: LIST
82824: LIST
82825: LIST
82826: PUSH
82827: EMPTY
82828: LIST
82829: LIST
82830: LIST
82831: LIST
82832: LIST
82833: ST_TO_ADDR
// end ; end ;
82834: GO 82837
82836: POP
// result := list ;
82837: LD_ADDR_VAR 0 4
82841: PUSH
82842: LD_VAR 0 5
82846: ST_TO_ADDR
// end ;
82847: LD_VAR 0 4
82851: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
82852: LD_INT 0
82854: PPUSH
82855: PPUSH
82856: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
82857: LD_VAR 0 1
82861: NOT
82862: PUSH
82863: LD_VAR 0 2
82867: PUSH
82868: LD_INT 1
82870: PUSH
82871: LD_INT 2
82873: PUSH
82874: LD_INT 3
82876: PUSH
82877: LD_INT 4
82879: PUSH
82880: EMPTY
82881: LIST
82882: LIST
82883: LIST
82884: LIST
82885: IN
82886: NOT
82887: OR
82888: IFFALSE 82892
// exit ;
82890: GO 82984
// tmp := [ ] ;
82892: LD_ADDR_VAR 0 5
82896: PUSH
82897: EMPTY
82898: ST_TO_ADDR
// for i in units do
82899: LD_ADDR_VAR 0 4
82903: PUSH
82904: LD_VAR 0 1
82908: PUSH
82909: FOR_IN
82910: IFFALSE 82953
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
82912: LD_ADDR_VAR 0 5
82916: PUSH
82917: LD_VAR 0 5
82921: PPUSH
82922: LD_VAR 0 5
82926: PUSH
82927: LD_INT 1
82929: PLUS
82930: PPUSH
82931: LD_VAR 0 4
82935: PPUSH
82936: LD_VAR 0 2
82940: PPUSH
82941: CALL_OW 259
82945: PPUSH
82946: CALL_OW 2
82950: ST_TO_ADDR
82951: GO 82909
82953: POP
82954: POP
// if not tmp then
82955: LD_VAR 0 5
82959: NOT
82960: IFFALSE 82964
// exit ;
82962: GO 82984
// result := SortListByListDesc ( units , tmp ) ;
82964: LD_ADDR_VAR 0 3
82968: PUSH
82969: LD_VAR 0 1
82973: PPUSH
82974: LD_VAR 0 5
82978: PPUSH
82979: CALL_OW 77
82983: ST_TO_ADDR
// end ;
82984: LD_VAR 0 3
82988: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
82989: LD_INT 0
82991: PPUSH
82992: PPUSH
82993: PPUSH
// result := false ;
82994: LD_ADDR_VAR 0 3
82998: PUSH
82999: LD_INT 0
83001: ST_TO_ADDR
// x := GetX ( building ) ;
83002: LD_ADDR_VAR 0 4
83006: PUSH
83007: LD_VAR 0 2
83011: PPUSH
83012: CALL_OW 250
83016: ST_TO_ADDR
// y := GetY ( building ) ;
83017: LD_ADDR_VAR 0 5
83021: PUSH
83022: LD_VAR 0 2
83026: PPUSH
83027: CALL_OW 251
83031: ST_TO_ADDR
// if not building or not x or not y then
83032: LD_VAR 0 2
83036: NOT
83037: PUSH
83038: LD_VAR 0 4
83042: NOT
83043: OR
83044: PUSH
83045: LD_VAR 0 5
83049: NOT
83050: OR
83051: IFFALSE 83055
// exit ;
83053: GO 83147
// if GetTaskList ( unit ) then
83055: LD_VAR 0 1
83059: PPUSH
83060: CALL_OW 437
83064: IFFALSE 83147
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
83066: LD_STRING e
83068: PUSH
83069: LD_VAR 0 1
83073: PPUSH
83074: CALL_OW 437
83078: PUSH
83079: LD_INT 1
83081: ARRAY
83082: PUSH
83083: LD_INT 1
83085: ARRAY
83086: EQUAL
83087: PUSH
83088: LD_VAR 0 4
83092: PUSH
83093: LD_VAR 0 1
83097: PPUSH
83098: CALL_OW 437
83102: PUSH
83103: LD_INT 1
83105: ARRAY
83106: PUSH
83107: LD_INT 2
83109: ARRAY
83110: EQUAL
83111: AND
83112: PUSH
83113: LD_VAR 0 5
83117: PUSH
83118: LD_VAR 0 1
83122: PPUSH
83123: CALL_OW 437
83127: PUSH
83128: LD_INT 1
83130: ARRAY
83131: PUSH
83132: LD_INT 3
83134: ARRAY
83135: EQUAL
83136: AND
83137: IFFALSE 83147
// result := true end ;
83139: LD_ADDR_VAR 0 3
83143: PUSH
83144: LD_INT 1
83146: ST_TO_ADDR
// end ;
83147: LD_VAR 0 3
83151: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
83152: LD_INT 0
83154: PPUSH
// result := false ;
83155: LD_ADDR_VAR 0 4
83159: PUSH
83160: LD_INT 0
83162: ST_TO_ADDR
// if GetTaskList ( unit ) then
83163: LD_VAR 0 1
83167: PPUSH
83168: CALL_OW 437
83172: IFFALSE 83255
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
83174: LD_STRING M
83176: PUSH
83177: LD_VAR 0 1
83181: PPUSH
83182: CALL_OW 437
83186: PUSH
83187: LD_INT 1
83189: ARRAY
83190: PUSH
83191: LD_INT 1
83193: ARRAY
83194: EQUAL
83195: PUSH
83196: LD_VAR 0 2
83200: PUSH
83201: LD_VAR 0 1
83205: PPUSH
83206: CALL_OW 437
83210: PUSH
83211: LD_INT 1
83213: ARRAY
83214: PUSH
83215: LD_INT 2
83217: ARRAY
83218: EQUAL
83219: AND
83220: PUSH
83221: LD_VAR 0 3
83225: PUSH
83226: LD_VAR 0 1
83230: PPUSH
83231: CALL_OW 437
83235: PUSH
83236: LD_INT 1
83238: ARRAY
83239: PUSH
83240: LD_INT 3
83242: ARRAY
83243: EQUAL
83244: AND
83245: IFFALSE 83255
// result := true ;
83247: LD_ADDR_VAR 0 4
83251: PUSH
83252: LD_INT 1
83254: ST_TO_ADDR
// end ; end ;
83255: LD_VAR 0 4
83259: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
83260: LD_INT 0
83262: PPUSH
83263: PPUSH
83264: PPUSH
83265: PPUSH
// if not unit or not area then
83266: LD_VAR 0 1
83270: NOT
83271: PUSH
83272: LD_VAR 0 2
83276: NOT
83277: OR
83278: IFFALSE 83282
// exit ;
83280: GO 83446
// tmp := AreaToList ( area , i ) ;
83282: LD_ADDR_VAR 0 6
83286: PUSH
83287: LD_VAR 0 2
83291: PPUSH
83292: LD_VAR 0 5
83296: PPUSH
83297: CALL_OW 517
83301: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
83302: LD_ADDR_VAR 0 5
83306: PUSH
83307: DOUBLE
83308: LD_INT 1
83310: DEC
83311: ST_TO_ADDR
83312: LD_VAR 0 6
83316: PUSH
83317: LD_INT 1
83319: ARRAY
83320: PUSH
83321: FOR_TO
83322: IFFALSE 83444
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
83324: LD_ADDR_VAR 0 7
83328: PUSH
83329: LD_VAR 0 6
83333: PUSH
83334: LD_INT 1
83336: ARRAY
83337: PUSH
83338: LD_VAR 0 5
83342: ARRAY
83343: PUSH
83344: LD_VAR 0 6
83348: PUSH
83349: LD_INT 2
83351: ARRAY
83352: PUSH
83353: LD_VAR 0 5
83357: ARRAY
83358: PUSH
83359: EMPTY
83360: LIST
83361: LIST
83362: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
83363: LD_VAR 0 7
83367: PUSH
83368: LD_INT 1
83370: ARRAY
83371: PPUSH
83372: LD_VAR 0 7
83376: PUSH
83377: LD_INT 2
83379: ARRAY
83380: PPUSH
83381: CALL_OW 428
83385: PUSH
83386: LD_INT 0
83388: EQUAL
83389: IFFALSE 83442
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
83391: LD_VAR 0 1
83395: PPUSH
83396: LD_VAR 0 7
83400: PUSH
83401: LD_INT 1
83403: ARRAY
83404: PPUSH
83405: LD_VAR 0 7
83409: PUSH
83410: LD_INT 2
83412: ARRAY
83413: PPUSH
83414: LD_VAR 0 3
83418: PPUSH
83419: CALL_OW 48
// result := IsPlaced ( unit ) ;
83423: LD_ADDR_VAR 0 4
83427: PUSH
83428: LD_VAR 0 1
83432: PPUSH
83433: CALL_OW 305
83437: ST_TO_ADDR
// exit ;
83438: POP
83439: POP
83440: GO 83446
// end ; end ;
83442: GO 83321
83444: POP
83445: POP
// end ;
83446: LD_VAR 0 4
83450: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
83451: LD_INT 0
83453: PPUSH
83454: PPUSH
83455: PPUSH
// if not side or side > 8 then
83456: LD_VAR 0 1
83460: NOT
83461: PUSH
83462: LD_VAR 0 1
83466: PUSH
83467: LD_INT 8
83469: GREATER
83470: OR
83471: IFFALSE 83475
// exit ;
83473: GO 83662
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
83475: LD_ADDR_VAR 0 4
83479: PUSH
83480: LD_INT 22
83482: PUSH
83483: LD_VAR 0 1
83487: PUSH
83488: EMPTY
83489: LIST
83490: LIST
83491: PUSH
83492: LD_INT 21
83494: PUSH
83495: LD_INT 3
83497: PUSH
83498: EMPTY
83499: LIST
83500: LIST
83501: PUSH
83502: EMPTY
83503: LIST
83504: LIST
83505: PPUSH
83506: CALL_OW 69
83510: ST_TO_ADDR
// if not tmp then
83511: LD_VAR 0 4
83515: NOT
83516: IFFALSE 83520
// exit ;
83518: GO 83662
// enable_addtolog := true ;
83520: LD_ADDR_OWVAR 81
83524: PUSH
83525: LD_INT 1
83527: ST_TO_ADDR
// AddToLog ( [ ) ;
83528: LD_STRING [
83530: PPUSH
83531: CALL_OW 561
// for i in tmp do
83535: LD_ADDR_VAR 0 3
83539: PUSH
83540: LD_VAR 0 4
83544: PUSH
83545: FOR_IN
83546: IFFALSE 83653
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
83548: LD_STRING [
83550: PUSH
83551: LD_VAR 0 3
83555: PPUSH
83556: CALL_OW 266
83560: STR
83561: PUSH
83562: LD_STRING , 
83564: STR
83565: PUSH
83566: LD_VAR 0 3
83570: PPUSH
83571: CALL_OW 250
83575: STR
83576: PUSH
83577: LD_STRING , 
83579: STR
83580: PUSH
83581: LD_VAR 0 3
83585: PPUSH
83586: CALL_OW 251
83590: STR
83591: PUSH
83592: LD_STRING , 
83594: STR
83595: PUSH
83596: LD_VAR 0 3
83600: PPUSH
83601: CALL_OW 254
83605: STR
83606: PUSH
83607: LD_STRING , 
83609: STR
83610: PUSH
83611: LD_VAR 0 3
83615: PPUSH
83616: LD_INT 1
83618: PPUSH
83619: CALL_OW 268
83623: STR
83624: PUSH
83625: LD_STRING , 
83627: STR
83628: PUSH
83629: LD_VAR 0 3
83633: PPUSH
83634: LD_INT 2
83636: PPUSH
83637: CALL_OW 268
83641: STR
83642: PUSH
83643: LD_STRING ],
83645: STR
83646: PPUSH
83647: CALL_OW 561
// end ;
83651: GO 83545
83653: POP
83654: POP
// AddToLog ( ]; ) ;
83655: LD_STRING ];
83657: PPUSH
83658: CALL_OW 561
// end ;
83662: LD_VAR 0 2
83666: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
83667: LD_INT 0
83669: PPUSH
83670: PPUSH
83671: PPUSH
83672: PPUSH
83673: PPUSH
// if not area or not rate or not max then
83674: LD_VAR 0 1
83678: NOT
83679: PUSH
83680: LD_VAR 0 2
83684: NOT
83685: OR
83686: PUSH
83687: LD_VAR 0 4
83691: NOT
83692: OR
83693: IFFALSE 83697
// exit ;
83695: GO 83889
// while 1 do
83697: LD_INT 1
83699: IFFALSE 83889
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
83701: LD_ADDR_VAR 0 9
83705: PUSH
83706: LD_VAR 0 1
83710: PPUSH
83711: LD_INT 1
83713: PPUSH
83714: CALL_OW 287
83718: PUSH
83719: LD_INT 10
83721: MUL
83722: ST_TO_ADDR
// r := rate / 10 ;
83723: LD_ADDR_VAR 0 7
83727: PUSH
83728: LD_VAR 0 2
83732: PUSH
83733: LD_INT 10
83735: DIVREAL
83736: ST_TO_ADDR
// time := 1 1$00 ;
83737: LD_ADDR_VAR 0 8
83741: PUSH
83742: LD_INT 2100
83744: ST_TO_ADDR
// if amount < min then
83745: LD_VAR 0 9
83749: PUSH
83750: LD_VAR 0 3
83754: LESS
83755: IFFALSE 83773
// r := r * 2 else
83757: LD_ADDR_VAR 0 7
83761: PUSH
83762: LD_VAR 0 7
83766: PUSH
83767: LD_INT 2
83769: MUL
83770: ST_TO_ADDR
83771: GO 83799
// if amount > max then
83773: LD_VAR 0 9
83777: PUSH
83778: LD_VAR 0 4
83782: GREATER
83783: IFFALSE 83799
// r := r / 2 ;
83785: LD_ADDR_VAR 0 7
83789: PUSH
83790: LD_VAR 0 7
83794: PUSH
83795: LD_INT 2
83797: DIVREAL
83798: ST_TO_ADDR
// time := time / r ;
83799: LD_ADDR_VAR 0 8
83803: PUSH
83804: LD_VAR 0 8
83808: PUSH
83809: LD_VAR 0 7
83813: DIVREAL
83814: ST_TO_ADDR
// if time < 0 then
83815: LD_VAR 0 8
83819: PUSH
83820: LD_INT 0
83822: LESS
83823: IFFALSE 83840
// time := time * - 1 ;
83825: LD_ADDR_VAR 0 8
83829: PUSH
83830: LD_VAR 0 8
83834: PUSH
83835: LD_INT 1
83837: NEG
83838: MUL
83839: ST_TO_ADDR
// wait ( time ) ;
83840: LD_VAR 0 8
83844: PPUSH
83845: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
83849: LD_INT 35
83851: PPUSH
83852: LD_INT 875
83854: PPUSH
83855: CALL_OW 12
83859: PPUSH
83860: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
83864: LD_INT 1
83866: PPUSH
83867: LD_INT 5
83869: PPUSH
83870: CALL_OW 12
83874: PPUSH
83875: LD_VAR 0 1
83879: PPUSH
83880: LD_INT 1
83882: PPUSH
83883: CALL_OW 55
// end ;
83887: GO 83697
// end ;
83889: LD_VAR 0 5
83893: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
83894: LD_INT 0
83896: PPUSH
83897: PPUSH
83898: PPUSH
83899: PPUSH
83900: PPUSH
83901: PPUSH
83902: PPUSH
83903: PPUSH
// if not turrets or not factories then
83904: LD_VAR 0 1
83908: NOT
83909: PUSH
83910: LD_VAR 0 2
83914: NOT
83915: OR
83916: IFFALSE 83920
// exit ;
83918: GO 84227
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
83920: LD_ADDR_VAR 0 10
83924: PUSH
83925: LD_INT 5
83927: PUSH
83928: LD_INT 6
83930: PUSH
83931: EMPTY
83932: LIST
83933: LIST
83934: PUSH
83935: LD_INT 2
83937: PUSH
83938: LD_INT 4
83940: PUSH
83941: EMPTY
83942: LIST
83943: LIST
83944: PUSH
83945: LD_INT 3
83947: PUSH
83948: LD_INT 5
83950: PUSH
83951: EMPTY
83952: LIST
83953: LIST
83954: PUSH
83955: EMPTY
83956: LIST
83957: LIST
83958: LIST
83959: PUSH
83960: LD_INT 24
83962: PUSH
83963: LD_INT 25
83965: PUSH
83966: EMPTY
83967: LIST
83968: LIST
83969: PUSH
83970: LD_INT 23
83972: PUSH
83973: LD_INT 27
83975: PUSH
83976: EMPTY
83977: LIST
83978: LIST
83979: PUSH
83980: EMPTY
83981: LIST
83982: LIST
83983: PUSH
83984: LD_INT 42
83986: PUSH
83987: LD_INT 43
83989: PUSH
83990: EMPTY
83991: LIST
83992: LIST
83993: PUSH
83994: LD_INT 44
83996: PUSH
83997: LD_INT 46
83999: PUSH
84000: EMPTY
84001: LIST
84002: LIST
84003: PUSH
84004: LD_INT 45
84006: PUSH
84007: LD_INT 47
84009: PUSH
84010: EMPTY
84011: LIST
84012: LIST
84013: PUSH
84014: EMPTY
84015: LIST
84016: LIST
84017: LIST
84018: PUSH
84019: EMPTY
84020: LIST
84021: LIST
84022: LIST
84023: ST_TO_ADDR
// result := [ ] ;
84024: LD_ADDR_VAR 0 3
84028: PUSH
84029: EMPTY
84030: ST_TO_ADDR
// for i in turrets do
84031: LD_ADDR_VAR 0 4
84035: PUSH
84036: LD_VAR 0 1
84040: PUSH
84041: FOR_IN
84042: IFFALSE 84225
// begin nat := GetNation ( i ) ;
84044: LD_ADDR_VAR 0 7
84048: PUSH
84049: LD_VAR 0 4
84053: PPUSH
84054: CALL_OW 248
84058: ST_TO_ADDR
// weapon := 0 ;
84059: LD_ADDR_VAR 0 8
84063: PUSH
84064: LD_INT 0
84066: ST_TO_ADDR
// if not nat then
84067: LD_VAR 0 7
84071: NOT
84072: IFFALSE 84076
// continue ;
84074: GO 84041
// for j in list [ nat ] do
84076: LD_ADDR_VAR 0 5
84080: PUSH
84081: LD_VAR 0 10
84085: PUSH
84086: LD_VAR 0 7
84090: ARRAY
84091: PUSH
84092: FOR_IN
84093: IFFALSE 84134
// if GetBWeapon ( i ) = j [ 1 ] then
84095: LD_VAR 0 4
84099: PPUSH
84100: CALL_OW 269
84104: PUSH
84105: LD_VAR 0 5
84109: PUSH
84110: LD_INT 1
84112: ARRAY
84113: EQUAL
84114: IFFALSE 84132
// begin weapon := j [ 2 ] ;
84116: LD_ADDR_VAR 0 8
84120: PUSH
84121: LD_VAR 0 5
84125: PUSH
84126: LD_INT 2
84128: ARRAY
84129: ST_TO_ADDR
// break ;
84130: GO 84134
// end ;
84132: GO 84092
84134: POP
84135: POP
// if not weapon then
84136: LD_VAR 0 8
84140: NOT
84141: IFFALSE 84145
// continue ;
84143: GO 84041
// for k in factories do
84145: LD_ADDR_VAR 0 6
84149: PUSH
84150: LD_VAR 0 2
84154: PUSH
84155: FOR_IN
84156: IFFALSE 84221
// begin weapons := AvailableWeaponList ( k ) ;
84158: LD_ADDR_VAR 0 9
84162: PUSH
84163: LD_VAR 0 6
84167: PPUSH
84168: CALL_OW 478
84172: ST_TO_ADDR
// if not weapons then
84173: LD_VAR 0 9
84177: NOT
84178: IFFALSE 84182
// continue ;
84180: GO 84155
// if weapon in weapons then
84182: LD_VAR 0 8
84186: PUSH
84187: LD_VAR 0 9
84191: IN
84192: IFFALSE 84219
// begin result := [ i , weapon ] ;
84194: LD_ADDR_VAR 0 3
84198: PUSH
84199: LD_VAR 0 4
84203: PUSH
84204: LD_VAR 0 8
84208: PUSH
84209: EMPTY
84210: LIST
84211: LIST
84212: ST_TO_ADDR
// exit ;
84213: POP
84214: POP
84215: POP
84216: POP
84217: GO 84227
// end ; end ;
84219: GO 84155
84221: POP
84222: POP
// end ;
84223: GO 84041
84225: POP
84226: POP
// end ;
84227: LD_VAR 0 3
84231: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
84232: LD_INT 0
84234: PPUSH
// if not side or side > 8 then
84235: LD_VAR 0 3
84239: NOT
84240: PUSH
84241: LD_VAR 0 3
84245: PUSH
84246: LD_INT 8
84248: GREATER
84249: OR
84250: IFFALSE 84254
// exit ;
84252: GO 84313
// if not range then
84254: LD_VAR 0 4
84258: NOT
84259: IFFALSE 84270
// range := - 12 ;
84261: LD_ADDR_VAR 0 4
84265: PUSH
84266: LD_INT 12
84268: NEG
84269: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
84270: LD_VAR 0 1
84274: PPUSH
84275: LD_VAR 0 2
84279: PPUSH
84280: LD_VAR 0 3
84284: PPUSH
84285: LD_VAR 0 4
84289: PPUSH
84290: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
84294: LD_VAR 0 1
84298: PPUSH
84299: LD_VAR 0 2
84303: PPUSH
84304: LD_VAR 0 3
84308: PPUSH
84309: CALL_OW 331
// end ;
84313: LD_VAR 0 5
84317: RET
// export function Video ( mode ) ; begin
84318: LD_INT 0
84320: PPUSH
// ingame_video = mode ;
84321: LD_ADDR_OWVAR 52
84325: PUSH
84326: LD_VAR 0 1
84330: ST_TO_ADDR
// interface_hidden = mode ;
84331: LD_ADDR_OWVAR 54
84335: PUSH
84336: LD_VAR 0 1
84340: ST_TO_ADDR
// end ;
84341: LD_VAR 0 2
84345: RET
// export function Join ( array , element ) ; begin
84346: LD_INT 0
84348: PPUSH
// result := Replace ( array , array + 1 , element ) ;
84349: LD_ADDR_VAR 0 3
84353: PUSH
84354: LD_VAR 0 1
84358: PPUSH
84359: LD_VAR 0 1
84363: PUSH
84364: LD_INT 1
84366: PLUS
84367: PPUSH
84368: LD_VAR 0 2
84372: PPUSH
84373: CALL_OW 1
84377: ST_TO_ADDR
// end ;
84378: LD_VAR 0 3
84382: RET
// export function JoinUnion ( array , element ) ; begin
84383: LD_INT 0
84385: PPUSH
// result := array union element ;
84386: LD_ADDR_VAR 0 3
84390: PUSH
84391: LD_VAR 0 1
84395: PUSH
84396: LD_VAR 0 2
84400: UNION
84401: ST_TO_ADDR
// end ;
84402: LD_VAR 0 3
84406: RET
// export function GetBehemoths ( side ) ; begin
84407: LD_INT 0
84409: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
84410: LD_ADDR_VAR 0 2
84414: PUSH
84415: LD_INT 22
84417: PUSH
84418: LD_VAR 0 1
84422: PUSH
84423: EMPTY
84424: LIST
84425: LIST
84426: PUSH
84427: LD_INT 31
84429: PUSH
84430: LD_INT 25
84432: PUSH
84433: EMPTY
84434: LIST
84435: LIST
84436: PUSH
84437: EMPTY
84438: LIST
84439: LIST
84440: PPUSH
84441: CALL_OW 69
84445: ST_TO_ADDR
// end ;
84446: LD_VAR 0 2
84450: RET
// export function Shuffle ( array ) ; var i , index ; begin
84451: LD_INT 0
84453: PPUSH
84454: PPUSH
84455: PPUSH
// result := [ ] ;
84456: LD_ADDR_VAR 0 2
84460: PUSH
84461: EMPTY
84462: ST_TO_ADDR
// if not array then
84463: LD_VAR 0 1
84467: NOT
84468: IFFALSE 84472
// exit ;
84470: GO 84571
// Randomize ;
84472: CALL_OW 10
// for i = array downto 1 do
84476: LD_ADDR_VAR 0 3
84480: PUSH
84481: DOUBLE
84482: LD_VAR 0 1
84486: INC
84487: ST_TO_ADDR
84488: LD_INT 1
84490: PUSH
84491: FOR_DOWNTO
84492: IFFALSE 84569
// begin index := rand ( 1 , array ) ;
84494: LD_ADDR_VAR 0 4
84498: PUSH
84499: LD_INT 1
84501: PPUSH
84502: LD_VAR 0 1
84506: PPUSH
84507: CALL_OW 12
84511: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
84512: LD_ADDR_VAR 0 2
84516: PUSH
84517: LD_VAR 0 2
84521: PPUSH
84522: LD_VAR 0 2
84526: PUSH
84527: LD_INT 1
84529: PLUS
84530: PPUSH
84531: LD_VAR 0 1
84535: PUSH
84536: LD_VAR 0 4
84540: ARRAY
84541: PPUSH
84542: CALL_OW 2
84546: ST_TO_ADDR
// array := Delete ( array , index ) ;
84547: LD_ADDR_VAR 0 1
84551: PUSH
84552: LD_VAR 0 1
84556: PPUSH
84557: LD_VAR 0 4
84561: PPUSH
84562: CALL_OW 3
84566: ST_TO_ADDR
// end ;
84567: GO 84491
84569: POP
84570: POP
// end ;
84571: LD_VAR 0 2
84575: RET
// export function GetBaseMaterials ( base ) ; begin
84576: LD_INT 0
84578: PPUSH
// result := [ 0 , 0 , 0 ] ;
84579: LD_ADDR_VAR 0 2
84583: PUSH
84584: LD_INT 0
84586: PUSH
84587: LD_INT 0
84589: PUSH
84590: LD_INT 0
84592: PUSH
84593: EMPTY
84594: LIST
84595: LIST
84596: LIST
84597: ST_TO_ADDR
// if not base then
84598: LD_VAR 0 1
84602: NOT
84603: IFFALSE 84607
// exit ;
84605: GO 84656
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
84607: LD_ADDR_VAR 0 2
84611: PUSH
84612: LD_VAR 0 1
84616: PPUSH
84617: LD_INT 1
84619: PPUSH
84620: CALL_OW 275
84624: PUSH
84625: LD_VAR 0 1
84629: PPUSH
84630: LD_INT 2
84632: PPUSH
84633: CALL_OW 275
84637: PUSH
84638: LD_VAR 0 1
84642: PPUSH
84643: LD_INT 3
84645: PPUSH
84646: CALL_OW 275
84650: PUSH
84651: EMPTY
84652: LIST
84653: LIST
84654: LIST
84655: ST_TO_ADDR
// end ;
84656: LD_VAR 0 2
84660: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
84661: LD_INT 0
84663: PPUSH
84664: PPUSH
// result := array ;
84665: LD_ADDR_VAR 0 3
84669: PUSH
84670: LD_VAR 0 1
84674: ST_TO_ADDR
// if size > 0 then
84675: LD_VAR 0 2
84679: PUSH
84680: LD_INT 0
84682: GREATER
84683: IFFALSE 84729
// for i := array downto size do
84685: LD_ADDR_VAR 0 4
84689: PUSH
84690: DOUBLE
84691: LD_VAR 0 1
84695: INC
84696: ST_TO_ADDR
84697: LD_VAR 0 2
84701: PUSH
84702: FOR_DOWNTO
84703: IFFALSE 84727
// result := Delete ( result , result ) ;
84705: LD_ADDR_VAR 0 3
84709: PUSH
84710: LD_VAR 0 3
84714: PPUSH
84715: LD_VAR 0 3
84719: PPUSH
84720: CALL_OW 3
84724: ST_TO_ADDR
84725: GO 84702
84727: POP
84728: POP
// end ;
84729: LD_VAR 0 3
84733: RET
// export function ComExit ( unit ) ; var tmp ; begin
84734: LD_INT 0
84736: PPUSH
84737: PPUSH
// if not IsInUnit ( unit ) then
84738: LD_VAR 0 1
84742: PPUSH
84743: CALL_OW 310
84747: NOT
84748: IFFALSE 84752
// exit ;
84750: GO 84812
// tmp := IsInUnit ( unit ) ;
84752: LD_ADDR_VAR 0 3
84756: PUSH
84757: LD_VAR 0 1
84761: PPUSH
84762: CALL_OW 310
84766: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
84767: LD_VAR 0 3
84771: PPUSH
84772: CALL_OW 247
84776: PUSH
84777: LD_INT 2
84779: EQUAL
84780: IFFALSE 84793
// ComExitVehicle ( unit ) else
84782: LD_VAR 0 1
84786: PPUSH
84787: CALL_OW 121
84791: GO 84802
// ComExitBuilding ( unit ) ;
84793: LD_VAR 0 1
84797: PPUSH
84798: CALL_OW 122
// result := tmp ;
84802: LD_ADDR_VAR 0 2
84806: PUSH
84807: LD_VAR 0 3
84811: ST_TO_ADDR
// end ;
84812: LD_VAR 0 2
84816: RET
// export function ComExitAll ( units ) ; var i ; begin
84817: LD_INT 0
84819: PPUSH
84820: PPUSH
// if not units then
84821: LD_VAR 0 1
84825: NOT
84826: IFFALSE 84830
// exit ;
84828: GO 84856
// for i in units do
84830: LD_ADDR_VAR 0 3
84834: PUSH
84835: LD_VAR 0 1
84839: PUSH
84840: FOR_IN
84841: IFFALSE 84854
// ComExit ( i ) ;
84843: LD_VAR 0 3
84847: PPUSH
84848: CALL 84734 0 1
84852: GO 84840
84854: POP
84855: POP
// end ;
84856: LD_VAR 0 2
84860: RET
// export function ResetHc ; begin
84861: LD_INT 0
84863: PPUSH
// InitHc ;
84864: CALL_OW 19
// hc_importance := 0 ;
84868: LD_ADDR_OWVAR 32
84872: PUSH
84873: LD_INT 0
84875: ST_TO_ADDR
// end ;
84876: LD_VAR 0 1
84880: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
84881: LD_INT 0
84883: PPUSH
84884: PPUSH
84885: PPUSH
// _x := ( x1 + x2 ) div 2 ;
84886: LD_ADDR_VAR 0 6
84890: PUSH
84891: LD_VAR 0 1
84895: PUSH
84896: LD_VAR 0 3
84900: PLUS
84901: PUSH
84902: LD_INT 2
84904: DIV
84905: ST_TO_ADDR
// if _x < 0 then
84906: LD_VAR 0 6
84910: PUSH
84911: LD_INT 0
84913: LESS
84914: IFFALSE 84931
// _x := _x * - 1 ;
84916: LD_ADDR_VAR 0 6
84920: PUSH
84921: LD_VAR 0 6
84925: PUSH
84926: LD_INT 1
84928: NEG
84929: MUL
84930: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
84931: LD_ADDR_VAR 0 7
84935: PUSH
84936: LD_VAR 0 2
84940: PUSH
84941: LD_VAR 0 4
84945: PLUS
84946: PUSH
84947: LD_INT 2
84949: DIV
84950: ST_TO_ADDR
// if _y < 0 then
84951: LD_VAR 0 7
84955: PUSH
84956: LD_INT 0
84958: LESS
84959: IFFALSE 84976
// _y := _y * - 1 ;
84961: LD_ADDR_VAR 0 7
84965: PUSH
84966: LD_VAR 0 7
84970: PUSH
84971: LD_INT 1
84973: NEG
84974: MUL
84975: ST_TO_ADDR
// result := [ _x , _y ] ;
84976: LD_ADDR_VAR 0 5
84980: PUSH
84981: LD_VAR 0 6
84985: PUSH
84986: LD_VAR 0 7
84990: PUSH
84991: EMPTY
84992: LIST
84993: LIST
84994: ST_TO_ADDR
// end ;
84995: LD_VAR 0 5
84999: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
85000: LD_INT 0
85002: PPUSH
85003: PPUSH
85004: PPUSH
85005: PPUSH
// task := GetTaskList ( unit ) ;
85006: LD_ADDR_VAR 0 7
85010: PUSH
85011: LD_VAR 0 1
85015: PPUSH
85016: CALL_OW 437
85020: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
85021: LD_VAR 0 7
85025: NOT
85026: PUSH
85027: LD_VAR 0 1
85031: PPUSH
85032: LD_VAR 0 2
85036: PPUSH
85037: CALL_OW 308
85041: NOT
85042: AND
85043: IFFALSE 85047
// exit ;
85045: GO 85165
// if IsInArea ( unit , area ) then
85047: LD_VAR 0 1
85051: PPUSH
85052: LD_VAR 0 2
85056: PPUSH
85057: CALL_OW 308
85061: IFFALSE 85079
// begin ComMoveToArea ( unit , goAway ) ;
85063: LD_VAR 0 1
85067: PPUSH
85068: LD_VAR 0 3
85072: PPUSH
85073: CALL_OW 113
// exit ;
85077: GO 85165
// end ; if task [ 1 ] [ 1 ] <> M then
85079: LD_VAR 0 7
85083: PUSH
85084: LD_INT 1
85086: ARRAY
85087: PUSH
85088: LD_INT 1
85090: ARRAY
85091: PUSH
85092: LD_STRING M
85094: NONEQUAL
85095: IFFALSE 85099
// exit ;
85097: GO 85165
// x := task [ 1 ] [ 2 ] ;
85099: LD_ADDR_VAR 0 5
85103: PUSH
85104: LD_VAR 0 7
85108: PUSH
85109: LD_INT 1
85111: ARRAY
85112: PUSH
85113: LD_INT 2
85115: ARRAY
85116: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
85117: LD_ADDR_VAR 0 6
85121: PUSH
85122: LD_VAR 0 7
85126: PUSH
85127: LD_INT 1
85129: ARRAY
85130: PUSH
85131: LD_INT 3
85133: ARRAY
85134: ST_TO_ADDR
// if InArea ( x , y , area ) then
85135: LD_VAR 0 5
85139: PPUSH
85140: LD_VAR 0 6
85144: PPUSH
85145: LD_VAR 0 2
85149: PPUSH
85150: CALL_OW 309
85154: IFFALSE 85165
// ComStop ( unit ) ;
85156: LD_VAR 0 1
85160: PPUSH
85161: CALL_OW 141
// end ;
85165: LD_VAR 0 4
85169: RET
// export function Abs ( value ) ; begin
85170: LD_INT 0
85172: PPUSH
// result := value ;
85173: LD_ADDR_VAR 0 2
85177: PUSH
85178: LD_VAR 0 1
85182: ST_TO_ADDR
// if value < 0 then
85183: LD_VAR 0 1
85187: PUSH
85188: LD_INT 0
85190: LESS
85191: IFFALSE 85208
// result := value * - 1 ;
85193: LD_ADDR_VAR 0 2
85197: PUSH
85198: LD_VAR 0 1
85202: PUSH
85203: LD_INT 1
85205: NEG
85206: MUL
85207: ST_TO_ADDR
// end ;
85208: LD_VAR 0 2
85212: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
85213: LD_INT 0
85215: PPUSH
85216: PPUSH
85217: PPUSH
85218: PPUSH
85219: PPUSH
85220: PPUSH
85221: PPUSH
85222: PPUSH
// if not unit or not building then
85223: LD_VAR 0 1
85227: NOT
85228: PUSH
85229: LD_VAR 0 2
85233: NOT
85234: OR
85235: IFFALSE 85239
// exit ;
85237: GO 85465
// x := GetX ( building ) ;
85239: LD_ADDR_VAR 0 4
85243: PUSH
85244: LD_VAR 0 2
85248: PPUSH
85249: CALL_OW 250
85253: ST_TO_ADDR
// y := GetY ( building ) ;
85254: LD_ADDR_VAR 0 6
85258: PUSH
85259: LD_VAR 0 2
85263: PPUSH
85264: CALL_OW 251
85268: ST_TO_ADDR
// d := GetDir ( building ) ;
85269: LD_ADDR_VAR 0 8
85273: PUSH
85274: LD_VAR 0 2
85278: PPUSH
85279: CALL_OW 254
85283: ST_TO_ADDR
// r := 4 ;
85284: LD_ADDR_VAR 0 9
85288: PUSH
85289: LD_INT 4
85291: ST_TO_ADDR
// for i := 1 to 5 do
85292: LD_ADDR_VAR 0 10
85296: PUSH
85297: DOUBLE
85298: LD_INT 1
85300: DEC
85301: ST_TO_ADDR
85302: LD_INT 5
85304: PUSH
85305: FOR_TO
85306: IFFALSE 85463
// begin _x := ShiftX ( x , d , r + i ) ;
85308: LD_ADDR_VAR 0 5
85312: PUSH
85313: LD_VAR 0 4
85317: PPUSH
85318: LD_VAR 0 8
85322: PPUSH
85323: LD_VAR 0 9
85327: PUSH
85328: LD_VAR 0 10
85332: PLUS
85333: PPUSH
85334: CALL_OW 272
85338: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
85339: LD_ADDR_VAR 0 7
85343: PUSH
85344: LD_VAR 0 6
85348: PPUSH
85349: LD_VAR 0 8
85353: PPUSH
85354: LD_VAR 0 9
85358: PUSH
85359: LD_VAR 0 10
85363: PLUS
85364: PPUSH
85365: CALL_OW 273
85369: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
85370: LD_VAR 0 5
85374: PPUSH
85375: LD_VAR 0 7
85379: PPUSH
85380: CALL_OW 488
85384: PUSH
85385: LD_VAR 0 5
85389: PPUSH
85390: LD_VAR 0 7
85394: PPUSH
85395: CALL_OW 428
85399: PPUSH
85400: CALL_OW 247
85404: PUSH
85405: LD_INT 3
85407: PUSH
85408: LD_INT 2
85410: PUSH
85411: EMPTY
85412: LIST
85413: LIST
85414: IN
85415: NOT
85416: AND
85417: IFFALSE 85461
// begin ComMoveXY ( unit , _x , _y ) ;
85419: LD_VAR 0 1
85423: PPUSH
85424: LD_VAR 0 5
85428: PPUSH
85429: LD_VAR 0 7
85433: PPUSH
85434: CALL_OW 111
// result := [ _x , _y ] ;
85438: LD_ADDR_VAR 0 3
85442: PUSH
85443: LD_VAR 0 5
85447: PUSH
85448: LD_VAR 0 7
85452: PUSH
85453: EMPTY
85454: LIST
85455: LIST
85456: ST_TO_ADDR
// exit ;
85457: POP
85458: POP
85459: GO 85465
// end ; end ;
85461: GO 85305
85463: POP
85464: POP
// end ;
85465: LD_VAR 0 3
85469: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
85470: LD_INT 0
85472: PPUSH
85473: PPUSH
85474: PPUSH
// result := 0 ;
85475: LD_ADDR_VAR 0 3
85479: PUSH
85480: LD_INT 0
85482: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
85483: LD_VAR 0 1
85487: PUSH
85488: LD_INT 0
85490: LESS
85491: PUSH
85492: LD_VAR 0 1
85496: PUSH
85497: LD_INT 8
85499: GREATER
85500: OR
85501: PUSH
85502: LD_VAR 0 2
85506: PUSH
85507: LD_INT 0
85509: LESS
85510: OR
85511: PUSH
85512: LD_VAR 0 2
85516: PUSH
85517: LD_INT 8
85519: GREATER
85520: OR
85521: IFFALSE 85525
// exit ;
85523: GO 85600
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
85525: LD_ADDR_VAR 0 4
85529: PUSH
85530: LD_INT 22
85532: PUSH
85533: LD_VAR 0 2
85537: PUSH
85538: EMPTY
85539: LIST
85540: LIST
85541: PPUSH
85542: CALL_OW 69
85546: PUSH
85547: FOR_IN
85548: IFFALSE 85598
// begin un := UnitShoot ( i ) ;
85550: LD_ADDR_VAR 0 5
85554: PUSH
85555: LD_VAR 0 4
85559: PPUSH
85560: CALL_OW 504
85564: ST_TO_ADDR
// if GetSide ( un ) = side1 then
85565: LD_VAR 0 5
85569: PPUSH
85570: CALL_OW 255
85574: PUSH
85575: LD_VAR 0 1
85579: EQUAL
85580: IFFALSE 85596
// begin result := un ;
85582: LD_ADDR_VAR 0 3
85586: PUSH
85587: LD_VAR 0 5
85591: ST_TO_ADDR
// exit ;
85592: POP
85593: POP
85594: GO 85600
// end ; end ;
85596: GO 85547
85598: POP
85599: POP
// end ;
85600: LD_VAR 0 3
85604: RET
// export function GetCargoBay ( units ) ; begin
85605: LD_INT 0
85607: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
85608: LD_ADDR_VAR 0 2
85612: PUSH
85613: LD_VAR 0 1
85617: PPUSH
85618: LD_INT 2
85620: PUSH
85621: LD_INT 34
85623: PUSH
85624: LD_INT 12
85626: PUSH
85627: EMPTY
85628: LIST
85629: LIST
85630: PUSH
85631: LD_INT 34
85633: PUSH
85634: LD_INT 51
85636: PUSH
85637: EMPTY
85638: LIST
85639: LIST
85640: PUSH
85641: LD_INT 34
85643: PUSH
85644: LD_INT 32
85646: PUSH
85647: EMPTY
85648: LIST
85649: LIST
85650: PUSH
85651: LD_INT 34
85653: PUSH
85654: LD_EXP 70
85658: PUSH
85659: EMPTY
85660: LIST
85661: LIST
85662: PUSH
85663: EMPTY
85664: LIST
85665: LIST
85666: LIST
85667: LIST
85668: LIST
85669: PPUSH
85670: CALL_OW 72
85674: ST_TO_ADDR
// end ;
85675: LD_VAR 0 2
85679: RET
// export function Negate ( value ) ; begin
85680: LD_INT 0
85682: PPUSH
// result := not value ;
85683: LD_ADDR_VAR 0 2
85687: PUSH
85688: LD_VAR 0 1
85692: NOT
85693: ST_TO_ADDR
// end ;
85694: LD_VAR 0 2
85698: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
85699: LD_INT 0
85701: PPUSH
// if x1 = x2 then
85702: LD_VAR 0 1
85706: PUSH
85707: LD_VAR 0 3
85711: EQUAL
85712: IFFALSE 85746
// begin if y1 > y2 then
85714: LD_VAR 0 2
85718: PUSH
85719: LD_VAR 0 4
85723: GREATER
85724: IFFALSE 85736
// result := 0 else
85726: LD_ADDR_VAR 0 5
85730: PUSH
85731: LD_INT 0
85733: ST_TO_ADDR
85734: GO 85744
// result := 3 ;
85736: LD_ADDR_VAR 0 5
85740: PUSH
85741: LD_INT 3
85743: ST_TO_ADDR
// exit ;
85744: GO 85832
// end ; if y1 = y2 then
85746: LD_VAR 0 2
85750: PUSH
85751: LD_VAR 0 4
85755: EQUAL
85756: IFFALSE 85790
// begin if x1 > x2 then
85758: LD_VAR 0 1
85762: PUSH
85763: LD_VAR 0 3
85767: GREATER
85768: IFFALSE 85780
// result := 1 else
85770: LD_ADDR_VAR 0 5
85774: PUSH
85775: LD_INT 1
85777: ST_TO_ADDR
85778: GO 85788
// result := 4 ;
85780: LD_ADDR_VAR 0 5
85784: PUSH
85785: LD_INT 4
85787: ST_TO_ADDR
// exit ;
85788: GO 85832
// end ; if x1 > x2 and y1 > y2 then
85790: LD_VAR 0 1
85794: PUSH
85795: LD_VAR 0 3
85799: GREATER
85800: PUSH
85801: LD_VAR 0 2
85805: PUSH
85806: LD_VAR 0 4
85810: GREATER
85811: AND
85812: IFFALSE 85824
// result := 2 else
85814: LD_ADDR_VAR 0 5
85818: PUSH
85819: LD_INT 2
85821: ST_TO_ADDR
85822: GO 85832
// result := 5 ;
85824: LD_ADDR_VAR 0 5
85828: PUSH
85829: LD_INT 5
85831: ST_TO_ADDR
// end ;
85832: LD_VAR 0 5
85836: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
85837: LD_INT 0
85839: PPUSH
85840: PPUSH
// if not driver or not IsInUnit ( driver ) then
85841: LD_VAR 0 1
85845: NOT
85846: PUSH
85847: LD_VAR 0 1
85851: PPUSH
85852: CALL_OW 310
85856: NOT
85857: OR
85858: IFFALSE 85862
// exit ;
85860: GO 85952
// vehicle := IsInUnit ( driver ) ;
85862: LD_ADDR_VAR 0 3
85866: PUSH
85867: LD_VAR 0 1
85871: PPUSH
85872: CALL_OW 310
85876: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
85877: LD_VAR 0 1
85881: PPUSH
85882: LD_STRING \
85884: PUSH
85885: LD_INT 0
85887: PUSH
85888: LD_INT 0
85890: PUSH
85891: LD_INT 0
85893: PUSH
85894: LD_INT 0
85896: PUSH
85897: LD_INT 0
85899: PUSH
85900: LD_INT 0
85902: PUSH
85903: EMPTY
85904: LIST
85905: LIST
85906: LIST
85907: LIST
85908: LIST
85909: LIST
85910: LIST
85911: PUSH
85912: LD_STRING E
85914: PUSH
85915: LD_INT 0
85917: PUSH
85918: LD_INT 0
85920: PUSH
85921: LD_VAR 0 3
85925: PUSH
85926: LD_INT 0
85928: PUSH
85929: LD_INT 0
85931: PUSH
85932: LD_INT 0
85934: PUSH
85935: EMPTY
85936: LIST
85937: LIST
85938: LIST
85939: LIST
85940: LIST
85941: LIST
85942: LIST
85943: PUSH
85944: EMPTY
85945: LIST
85946: LIST
85947: PPUSH
85948: CALL_OW 446
// end ;
85952: LD_VAR 0 2
85956: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
85957: LD_INT 0
85959: PPUSH
85960: PPUSH
// if not driver or not IsInUnit ( driver ) then
85961: LD_VAR 0 1
85965: NOT
85966: PUSH
85967: LD_VAR 0 1
85971: PPUSH
85972: CALL_OW 310
85976: NOT
85977: OR
85978: IFFALSE 85982
// exit ;
85980: GO 86072
// vehicle := IsInUnit ( driver ) ;
85982: LD_ADDR_VAR 0 3
85986: PUSH
85987: LD_VAR 0 1
85991: PPUSH
85992: CALL_OW 310
85996: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
85997: LD_VAR 0 1
86001: PPUSH
86002: LD_STRING \
86004: PUSH
86005: LD_INT 0
86007: PUSH
86008: LD_INT 0
86010: PUSH
86011: LD_INT 0
86013: PUSH
86014: LD_INT 0
86016: PUSH
86017: LD_INT 0
86019: PUSH
86020: LD_INT 0
86022: PUSH
86023: EMPTY
86024: LIST
86025: LIST
86026: LIST
86027: LIST
86028: LIST
86029: LIST
86030: LIST
86031: PUSH
86032: LD_STRING E
86034: PUSH
86035: LD_INT 0
86037: PUSH
86038: LD_INT 0
86040: PUSH
86041: LD_VAR 0 3
86045: PUSH
86046: LD_INT 0
86048: PUSH
86049: LD_INT 0
86051: PUSH
86052: LD_INT 0
86054: PUSH
86055: EMPTY
86056: LIST
86057: LIST
86058: LIST
86059: LIST
86060: LIST
86061: LIST
86062: LIST
86063: PUSH
86064: EMPTY
86065: LIST
86066: LIST
86067: PPUSH
86068: CALL_OW 447
// end ;
86072: LD_VAR 0 2
86076: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
86077: LD_INT 0
86079: PPUSH
86080: PPUSH
86081: PPUSH
// tmp := [ ] ;
86082: LD_ADDR_VAR 0 5
86086: PUSH
86087: EMPTY
86088: ST_TO_ADDR
// for i in units do
86089: LD_ADDR_VAR 0 4
86093: PUSH
86094: LD_VAR 0 1
86098: PUSH
86099: FOR_IN
86100: IFFALSE 86138
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
86102: LD_ADDR_VAR 0 5
86106: PUSH
86107: LD_VAR 0 5
86111: PPUSH
86112: LD_VAR 0 5
86116: PUSH
86117: LD_INT 1
86119: PLUS
86120: PPUSH
86121: LD_VAR 0 4
86125: PPUSH
86126: CALL_OW 256
86130: PPUSH
86131: CALL_OW 2
86135: ST_TO_ADDR
86136: GO 86099
86138: POP
86139: POP
// if not tmp then
86140: LD_VAR 0 5
86144: NOT
86145: IFFALSE 86149
// exit ;
86147: GO 86197
// if asc then
86149: LD_VAR 0 2
86153: IFFALSE 86177
// result := SortListByListAsc ( units , tmp ) else
86155: LD_ADDR_VAR 0 3
86159: PUSH
86160: LD_VAR 0 1
86164: PPUSH
86165: LD_VAR 0 5
86169: PPUSH
86170: CALL_OW 76
86174: ST_TO_ADDR
86175: GO 86197
// result := SortListByListDesc ( units , tmp ) ;
86177: LD_ADDR_VAR 0 3
86181: PUSH
86182: LD_VAR 0 1
86186: PPUSH
86187: LD_VAR 0 5
86191: PPUSH
86192: CALL_OW 77
86196: ST_TO_ADDR
// end ;
86197: LD_VAR 0 3
86201: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
86202: LD_INT 0
86204: PPUSH
86205: PPUSH
// task := GetTaskList ( mech ) ;
86206: LD_ADDR_VAR 0 4
86210: PUSH
86211: LD_VAR 0 1
86215: PPUSH
86216: CALL_OW 437
86220: ST_TO_ADDR
// if not task then
86221: LD_VAR 0 4
86225: NOT
86226: IFFALSE 86230
// exit ;
86228: GO 86272
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
86230: LD_ADDR_VAR 0 3
86234: PUSH
86235: LD_VAR 0 4
86239: PUSH
86240: LD_INT 1
86242: ARRAY
86243: PUSH
86244: LD_INT 1
86246: ARRAY
86247: PUSH
86248: LD_STRING r
86250: EQUAL
86251: PUSH
86252: LD_VAR 0 4
86256: PUSH
86257: LD_INT 1
86259: ARRAY
86260: PUSH
86261: LD_INT 4
86263: ARRAY
86264: PUSH
86265: LD_VAR 0 2
86269: EQUAL
86270: AND
86271: ST_TO_ADDR
// end ;
86272: LD_VAR 0 3
86276: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
86277: LD_INT 0
86279: PPUSH
// SetDir ( unit , d ) ;
86280: LD_VAR 0 1
86284: PPUSH
86285: LD_VAR 0 4
86289: PPUSH
86290: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
86294: LD_VAR 0 1
86298: PPUSH
86299: LD_VAR 0 2
86303: PPUSH
86304: LD_VAR 0 3
86308: PPUSH
86309: LD_VAR 0 5
86313: PPUSH
86314: CALL_OW 48
// end ;
86318: LD_VAR 0 6
86322: RET
// export function ToNaturalNumber ( number ) ; begin
86323: LD_INT 0
86325: PPUSH
// result := number div 1 ;
86326: LD_ADDR_VAR 0 2
86330: PUSH
86331: LD_VAR 0 1
86335: PUSH
86336: LD_INT 1
86338: DIV
86339: ST_TO_ADDR
// if number < 0 then
86340: LD_VAR 0 1
86344: PUSH
86345: LD_INT 0
86347: LESS
86348: IFFALSE 86358
// result := 0 ;
86350: LD_ADDR_VAR 0 2
86354: PUSH
86355: LD_INT 0
86357: ST_TO_ADDR
// end ;
86358: LD_VAR 0 2
86362: RET
// export function SortByClass ( units , class ) ; var un ; begin
86363: LD_INT 0
86365: PPUSH
86366: PPUSH
// if not units or not class then
86367: LD_VAR 0 1
86371: NOT
86372: PUSH
86373: LD_VAR 0 2
86377: NOT
86378: OR
86379: IFFALSE 86383
// exit ;
86381: GO 86478
// result := [ ] ;
86383: LD_ADDR_VAR 0 3
86387: PUSH
86388: EMPTY
86389: ST_TO_ADDR
// for un in units do
86390: LD_ADDR_VAR 0 4
86394: PUSH
86395: LD_VAR 0 1
86399: PUSH
86400: FOR_IN
86401: IFFALSE 86476
// if GetClass ( un ) = class then
86403: LD_VAR 0 4
86407: PPUSH
86408: CALL_OW 257
86412: PUSH
86413: LD_VAR 0 2
86417: EQUAL
86418: IFFALSE 86445
// result := Insert ( result , 1 , un ) else
86420: LD_ADDR_VAR 0 3
86424: PUSH
86425: LD_VAR 0 3
86429: PPUSH
86430: LD_INT 1
86432: PPUSH
86433: LD_VAR 0 4
86437: PPUSH
86438: CALL_OW 2
86442: ST_TO_ADDR
86443: GO 86474
// result := Replace ( result , result + 1 , un ) ;
86445: LD_ADDR_VAR 0 3
86449: PUSH
86450: LD_VAR 0 3
86454: PPUSH
86455: LD_VAR 0 3
86459: PUSH
86460: LD_INT 1
86462: PLUS
86463: PPUSH
86464: LD_VAR 0 4
86468: PPUSH
86469: CALL_OW 1
86473: ST_TO_ADDR
86474: GO 86400
86476: POP
86477: POP
// end ;
86478: LD_VAR 0 3
86482: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
86483: LD_INT 0
86485: PPUSH
86486: PPUSH
86487: PPUSH
86488: PPUSH
86489: PPUSH
86490: PPUSH
86491: PPUSH
// result := [ ] ;
86492: LD_ADDR_VAR 0 4
86496: PUSH
86497: EMPTY
86498: ST_TO_ADDR
// if x - r < 0 then
86499: LD_VAR 0 1
86503: PUSH
86504: LD_VAR 0 3
86508: MINUS
86509: PUSH
86510: LD_INT 0
86512: LESS
86513: IFFALSE 86525
// min_x := 0 else
86515: LD_ADDR_VAR 0 8
86519: PUSH
86520: LD_INT 0
86522: ST_TO_ADDR
86523: GO 86541
// min_x := x - r ;
86525: LD_ADDR_VAR 0 8
86529: PUSH
86530: LD_VAR 0 1
86534: PUSH
86535: LD_VAR 0 3
86539: MINUS
86540: ST_TO_ADDR
// if y - r < 0 then
86541: LD_VAR 0 2
86545: PUSH
86546: LD_VAR 0 3
86550: MINUS
86551: PUSH
86552: LD_INT 0
86554: LESS
86555: IFFALSE 86567
// min_y := 0 else
86557: LD_ADDR_VAR 0 7
86561: PUSH
86562: LD_INT 0
86564: ST_TO_ADDR
86565: GO 86583
// min_y := y - r ;
86567: LD_ADDR_VAR 0 7
86571: PUSH
86572: LD_VAR 0 2
86576: PUSH
86577: LD_VAR 0 3
86581: MINUS
86582: ST_TO_ADDR
// max_x := x + r ;
86583: LD_ADDR_VAR 0 9
86587: PUSH
86588: LD_VAR 0 1
86592: PUSH
86593: LD_VAR 0 3
86597: PLUS
86598: ST_TO_ADDR
// max_y := y + r ;
86599: LD_ADDR_VAR 0 10
86603: PUSH
86604: LD_VAR 0 2
86608: PUSH
86609: LD_VAR 0 3
86613: PLUS
86614: ST_TO_ADDR
// for _x = min_x to max_x do
86615: LD_ADDR_VAR 0 5
86619: PUSH
86620: DOUBLE
86621: LD_VAR 0 8
86625: DEC
86626: ST_TO_ADDR
86627: LD_VAR 0 9
86631: PUSH
86632: FOR_TO
86633: IFFALSE 86734
// for _y = min_y to max_y do
86635: LD_ADDR_VAR 0 6
86639: PUSH
86640: DOUBLE
86641: LD_VAR 0 7
86645: DEC
86646: ST_TO_ADDR
86647: LD_VAR 0 10
86651: PUSH
86652: FOR_TO
86653: IFFALSE 86730
// begin if not ValidHex ( _x , _y ) then
86655: LD_VAR 0 5
86659: PPUSH
86660: LD_VAR 0 6
86664: PPUSH
86665: CALL_OW 488
86669: NOT
86670: IFFALSE 86674
// continue ;
86672: GO 86652
// if GetResourceTypeXY ( _x , _y ) then
86674: LD_VAR 0 5
86678: PPUSH
86679: LD_VAR 0 6
86683: PPUSH
86684: CALL_OW 283
86688: IFFALSE 86728
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
86690: LD_ADDR_VAR 0 4
86694: PUSH
86695: LD_VAR 0 4
86699: PPUSH
86700: LD_VAR 0 4
86704: PUSH
86705: LD_INT 1
86707: PLUS
86708: PPUSH
86709: LD_VAR 0 5
86713: PUSH
86714: LD_VAR 0 6
86718: PUSH
86719: EMPTY
86720: LIST
86721: LIST
86722: PPUSH
86723: CALL_OW 1
86727: ST_TO_ADDR
// end ;
86728: GO 86652
86730: POP
86731: POP
86732: GO 86632
86734: POP
86735: POP
// end ;
86736: LD_VAR 0 4
86740: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
86741: LD_INT 0
86743: PPUSH
86744: PPUSH
86745: PPUSH
86746: PPUSH
86747: PPUSH
86748: PPUSH
// if not units then
86749: LD_VAR 0 1
86753: NOT
86754: IFFALSE 86758
// exit ;
86756: GO 87159
// result := UnitFilter ( units , [ f_ok ] ) ;
86758: LD_ADDR_VAR 0 3
86762: PUSH
86763: LD_VAR 0 1
86767: PPUSH
86768: LD_INT 50
86770: PUSH
86771: EMPTY
86772: LIST
86773: PPUSH
86774: CALL_OW 72
86778: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
86779: LD_ADDR_VAR 0 7
86783: PUSH
86784: LD_VAR 0 1
86788: PUSH
86789: LD_INT 1
86791: ARRAY
86792: PPUSH
86793: CALL_OW 255
86797: ST_TO_ADDR
// if not result then
86798: LD_VAR 0 3
86802: NOT
86803: IFFALSE 86807
// exit ;
86805: GO 87159
// for i in result do
86807: LD_ADDR_VAR 0 4
86811: PUSH
86812: LD_VAR 0 3
86816: PUSH
86817: FOR_IN
86818: IFFALSE 87157
// begin tag := GetTag ( i ) + 1 ;
86820: LD_ADDR_VAR 0 8
86824: PUSH
86825: LD_VAR 0 4
86829: PPUSH
86830: CALL_OW 110
86834: PUSH
86835: LD_INT 1
86837: PLUS
86838: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
86839: LD_ADDR_VAR 0 6
86843: PUSH
86844: LD_VAR 0 4
86848: PPUSH
86849: CALL_OW 250
86853: PPUSH
86854: LD_VAR 0 4
86858: PPUSH
86859: CALL_OW 251
86863: PPUSH
86864: LD_INT 6
86866: PPUSH
86867: CALL 86483 0 3
86871: ST_TO_ADDR
// if cr then
86872: LD_VAR 0 6
86876: IFFALSE 86915
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
86878: LD_VAR 0 4
86882: PPUSH
86883: LD_VAR 0 6
86887: PUSH
86888: LD_INT 1
86890: ARRAY
86891: PUSH
86892: LD_INT 1
86894: ARRAY
86895: PPUSH
86896: LD_VAR 0 6
86900: PUSH
86901: LD_INT 1
86903: ARRAY
86904: PUSH
86905: LD_INT 2
86907: ARRAY
86908: PPUSH
86909: CALL_OW 116
86913: GO 87155
// if path > tag then
86915: LD_VAR 0 2
86919: PUSH
86920: LD_VAR 0 8
86924: GREATER
86925: IFFALSE 87103
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
86927: LD_ADDR_VAR 0 5
86931: PUSH
86932: LD_INT 81
86934: PUSH
86935: LD_VAR 0 7
86939: PUSH
86940: EMPTY
86941: LIST
86942: LIST
86943: PUSH
86944: LD_INT 91
86946: PUSH
86947: LD_VAR 0 4
86951: PUSH
86952: LD_INT 12
86954: PUSH
86955: EMPTY
86956: LIST
86957: LIST
86958: LIST
86959: PUSH
86960: EMPTY
86961: LIST
86962: LIST
86963: PPUSH
86964: CALL_OW 69
86968: ST_TO_ADDR
// if enemy then
86969: LD_VAR 0 5
86973: IFFALSE 87001
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
86975: LD_VAR 0 4
86979: PPUSH
86980: LD_VAR 0 5
86984: PPUSH
86985: LD_VAR 0 4
86989: PPUSH
86990: CALL_OW 74
86994: PPUSH
86995: CALL_OW 115
86999: GO 87101
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
87001: LD_VAR 0 4
87005: PPUSH
87006: LD_VAR 0 2
87010: PUSH
87011: LD_VAR 0 8
87015: ARRAY
87016: PUSH
87017: LD_INT 1
87019: ARRAY
87020: PPUSH
87021: LD_VAR 0 2
87025: PUSH
87026: LD_VAR 0 8
87030: ARRAY
87031: PUSH
87032: LD_INT 2
87034: ARRAY
87035: PPUSH
87036: CALL_OW 297
87040: PUSH
87041: LD_INT 6
87043: GREATER
87044: IFFALSE 87087
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
87046: LD_VAR 0 4
87050: PPUSH
87051: LD_VAR 0 2
87055: PUSH
87056: LD_VAR 0 8
87060: ARRAY
87061: PUSH
87062: LD_INT 1
87064: ARRAY
87065: PPUSH
87066: LD_VAR 0 2
87070: PUSH
87071: LD_VAR 0 8
87075: ARRAY
87076: PUSH
87077: LD_INT 2
87079: ARRAY
87080: PPUSH
87081: CALL_OW 114
87085: GO 87101
// SetTag ( i , tag ) ;
87087: LD_VAR 0 4
87091: PPUSH
87092: LD_VAR 0 8
87096: PPUSH
87097: CALL_OW 109
// end else
87101: GO 87155
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
87103: LD_ADDR_VAR 0 5
87107: PUSH
87108: LD_INT 81
87110: PUSH
87111: LD_VAR 0 7
87115: PUSH
87116: EMPTY
87117: LIST
87118: LIST
87119: PPUSH
87120: CALL_OW 69
87124: ST_TO_ADDR
// if enemy then
87125: LD_VAR 0 5
87129: IFFALSE 87155
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
87131: LD_VAR 0 4
87135: PPUSH
87136: LD_VAR 0 5
87140: PPUSH
87141: LD_VAR 0 4
87145: PPUSH
87146: CALL_OW 74
87150: PPUSH
87151: CALL_OW 115
// end ; end ;
87155: GO 86817
87157: POP
87158: POP
// end ; end_of_file
87159: LD_VAR 0 3
87163: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
87164: LD_VAR 0 1
87168: PUSH
87169: LD_INT 200
87171: DOUBLE
87172: GREATEREQUAL
87173: IFFALSE 87181
87175: LD_INT 299
87177: DOUBLE
87178: LESSEQUAL
87179: IFTRUE 87183
87181: GO 87215
87183: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
87184: LD_VAR 0 1
87188: PPUSH
87189: LD_VAR 0 2
87193: PPUSH
87194: LD_VAR 0 3
87198: PPUSH
87199: LD_VAR 0 4
87203: PPUSH
87204: LD_VAR 0 5
87208: PPUSH
87209: CALL 43726 0 5
87213: GO 87292
87215: LD_INT 300
87217: DOUBLE
87218: GREATEREQUAL
87219: IFFALSE 87227
87221: LD_INT 399
87223: DOUBLE
87224: LESSEQUAL
87225: IFTRUE 87229
87227: GO 87291
87229: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
87230: LD_VAR 0 1
87234: PPUSH
87235: LD_VAR 0 2
87239: PPUSH
87240: LD_VAR 0 3
87244: PPUSH
87245: LD_VAR 0 4
87249: PPUSH
87250: LD_VAR 0 5
87254: PPUSH
87255: LD_VAR 0 6
87259: PPUSH
87260: LD_VAR 0 7
87264: PPUSH
87265: LD_VAR 0 8
87269: PPUSH
87270: LD_VAR 0 9
87274: PPUSH
87275: LD_VAR 0 10
87279: PPUSH
87280: LD_VAR 0 11
87284: PPUSH
87285: CALL 41624 0 11
87289: GO 87292
87291: POP
// end ;
87292: PPOPN 11
87294: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
87295: LD_VAR 0 1
87299: PPUSH
87300: LD_VAR 0 2
87304: PPUSH
87305: LD_VAR 0 3
87309: PPUSH
87310: LD_VAR 0 4
87314: PPUSH
87315: LD_VAR 0 5
87319: PPUSH
87320: CALL 43718 0 5
// end ; end_of_file
87324: PPOPN 5
87326: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
87327: LD_VAR 0 1
87331: PPUSH
87332: LD_VAR 0 2
87336: PPUSH
87337: LD_VAR 0 3
87341: PPUSH
87342: LD_VAR 0 4
87346: PPUSH
87347: LD_VAR 0 5
87351: PPUSH
87352: LD_VAR 0 6
87356: PPUSH
87357: CALL 29819 0 6
// end ;
87361: PPOPN 6
87363: END
