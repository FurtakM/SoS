// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 59
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: PUSH
 142: LD_OWVAR 67
 146: ARRAY
 147: ST_TO_ADDR
// eventVar1 = 0 ;
 148: LD_ADDR_EXP 62
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// eventVar2 = 0 ;
 156: LD_ADDR_EXP 63
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// fastEnd = 0 ;
 164: LD_ADDR_EXP 60
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// KhatamStatus = 0 ;
 172: LD_ADDR_EXP 53
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// GensherStatus = 0 ;
 180: LD_ADDR_EXP 52
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// cratesSpawned = 0 ;
 188: LD_ADDR_EXP 56
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 196: LD_ADDR_EXP 57
 200: PUSH
 201: LD_INT 1
 203: PUSH
 204: LD_INT 2
 206: PUSH
 207: LD_INT 2
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: PUSH
 215: LD_OWVAR 67
 219: ARRAY
 220: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 ] [ Difficulty ] ;
 221: LD_ADDR_EXP 58
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: LD_INT 4
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: LD_OWVAR 67
 244: ARRAY
 245: ST_TO_ADDR
// attackAvalaible = 1 ;
 246: LD_ADDR_EXP 61
 250: PUSH
 251: LD_INT 1
 253: ST_TO_ADDR
// mission_prefix := 10c_ ;
 254: LD_ADDR_EXP 54
 258: PUSH
 259: LD_STRING 10c_
 261: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 262: LD_ADDR_EXP 55
 266: PUSH
 267: LD_STRING 10_
 269: ST_TO_ADDR
// debugMode = 0 ;
 270: LD_ADDR_EXP 64
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// PrepareNature ;
 278: CALL 25028 0 0
// PrepareDifficulty ;
 282: CALL 10011 0 0
// PrepareJMMTeam ;
 286: CALL 696 0 0
// PrepareCathyTeam ;
 290: CALL 1771 0 0
// PlaceMines ( MineField1 , 3 + Difficulty ) ;
 294: LD_INT 24
 296: PPUSH
 297: LD_INT 3
 299: PUSH
 300: LD_OWVAR 67
 304: PLUS
 305: PPUSH
 306: CALL 19885 0 2
// if Difficulty > 1 then
 310: LD_OWVAR 67
 314: PUSH
 315: LD_INT 1
 317: GREATER
 318: IFFALSE 336
// PlaceMines ( MineField2 , 3 + Difficulty ) ;
 320: LD_INT 25
 322: PPUSH
 323: LD_INT 3
 325: PUSH
 326: LD_OWVAR 67
 330: PLUS
 331: PPUSH
 332: CALL 19885 0 2
// if Difficulty > 2 then
 336: LD_OWVAR 67
 340: PUSH
 341: LD_INT 2
 343: GREATER
 344: IFFALSE 362
// PlaceMines ( MineField3 , 3 + Difficulty ) ;
 346: LD_INT 26
 348: PPUSH
 349: LD_INT 3
 351: PUSH
 352: LD_OWVAR 67
 356: PLUS
 357: PPUSH
 358: CALL 19885 0 2
// PrepareArabianCommander ;
 362: CALL 3209 0 0
// PrepareArabian ;
 366: CALL 3261 0 0
// BuildArabianBase ;
 370: CALL 12826 0 0
// TameApemans ;
 374: CALL 18690 0 0
// end ;
 378: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 379: LD_EXP 64
 383: PUSH
 384: LD_INT 1
 386: EQUAL
 387: IFFALSE 693
 389: GO 391
 391: DISABLE
 392: LD_INT 0
 394: PPUSH
// begin enable ;
 395: ENABLE
// fogoff ( true ) ;
 396: LD_INT 1
 398: PPUSH
 399: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 403: LD_ADDR_VAR 0 1
 407: PUSH
 408: LD_INT 22
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: LD_INT 21
 420: PUSH
 421: LD_INT 1
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: PPUSH
 432: CALL_OW 69
 436: PUSH
 437: FOR_IN
 438: IFFALSE 454
// SetLives ( i , 1000 ) ;
 440: LD_VAR 0 1
 444: PPUSH
 445: LD_INT 1000
 447: PPUSH
 448: CALL_OW 234
 452: GO 437
 454: POP
 455: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 456: LD_ADDR_VAR 0 1
 460: PUSH
 461: LD_INT 22
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PPUSH
 503: CALL_OW 69
 507: PUSH
 508: FOR_IN
 509: IFFALSE 533
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 511: LD_VAR 0 1
 515: PPUSH
 516: CALL_OW 274
 520: PPUSH
 521: LD_INT 1
 523: PPUSH
 524: LD_INT 9999
 526: PPUSH
 527: CALL_OW 277
 531: GO 508
 533: POP
 534: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 2
 552: PUSH
 553: LD_INT 30
 555: PUSH
 556: LD_INT 0
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: PUSH
 563: LD_INT 30
 565: PUSH
 566: LD_INT 1
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: FOR_IN
 588: IFFALSE 612
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 590: LD_VAR 0 1
 594: PPUSH
 595: CALL_OW 274
 599: PPUSH
 600: LD_INT 2
 602: PPUSH
 603: LD_INT 9999
 605: PPUSH
 606: CALL_OW 277
 610: GO 587
 612: POP
 613: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 614: LD_ADDR_VAR 0 1
 618: PUSH
 619: LD_INT 22
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: LD_INT 2
 631: PUSH
 632: LD_INT 30
 634: PUSH
 635: LD_INT 0
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PUSH
 642: LD_INT 30
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: PUSH
 652: EMPTY
 653: LIST
 654: LIST
 655: LIST
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PPUSH
 661: CALL_OW 69
 665: PUSH
 666: FOR_IN
 667: IFFALSE 691
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 669: LD_VAR 0 1
 673: PPUSH
 674: CALL_OW 274
 678: PPUSH
 679: LD_INT 3
 681: PPUSH
 682: LD_INT 9999
 684: PPUSH
 685: CALL_OW 277
 689: GO 666
 691: POP
 692: POP
// end ; end_of_file
 693: PPOPN 1
 695: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 696: LD_INT 0
 698: PPUSH
 699: PPUSH
 700: PPUSH
 701: PPUSH
 702: PPUSH
 703: PPUSH
// uc_side = 1 ;
 704: LD_ADDR_OWVAR 20
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// uc_nation = 1 ;
 712: LD_ADDR_OWVAR 21
 716: PUSH
 717: LD_INT 1
 719: ST_TO_ADDR
// count = 0 ;
 720: LD_ADDR_VAR 0 6
 724: PUSH
 725: LD_INT 0
 727: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 728: LD_ADDR_EXP 1
 732: PUSH
 733: LD_STRING 10_JMM
 735: PPUSH
 736: LD_INT 1
 738: PPUSH
 739: CALL 9616 0 2
 743: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 744: LD_ADDR_EXP 20
 748: PUSH
 749: LD_EXP 20
 753: PUSH
 754: LD_EXP 1
 758: ADD
 759: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 760: LD_ADDR_EXP 10
 764: PUSH
 765: LD_STRING 10_Gary
 767: PPUSH
 768: LD_INT 1
 770: PPUSH
 771: CALL 9616 0 2
 775: ST_TO_ADDR
// if Gary then
 776: LD_EXP 10
 780: IFFALSE 798
// JMMSquad = JMMSquad ^ Gary ;
 782: LD_ADDR_EXP 20
 786: PUSH
 787: LD_EXP 20
 791: PUSH
 792: LD_EXP 10
 796: ADD
 797: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 798: LD_ADDR_EXP 5
 802: PUSH
 803: LD_STRING 10_Cyrus
 805: PPUSH
 806: LD_INT 1
 808: PPUSH
 809: CALL 9616 0 2
 813: ST_TO_ADDR
// if Cyrus then
 814: LD_EXP 5
 818: IFFALSE 836
// JMMSquad = JMMSquad ^ Cyrus ;
 820: LD_ADDR_EXP 20
 824: PUSH
 825: LD_EXP 20
 829: PUSH
 830: LD_EXP 5
 834: ADD
 835: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 836: LD_ADDR_EXP 4
 840: PUSH
 841: LD_STRING 10_Bobby
 843: PPUSH
 844: LD_INT 1
 846: PPUSH
 847: CALL 9616 0 2
 851: ST_TO_ADDR
// if Bobby then
 852: LD_EXP 4
 856: IFFALSE 874
// JMMSquad = JMMSquad ^ Bobby ;
 858: LD_ADDR_EXP 20
 862: PUSH
 863: LD_EXP 20
 867: PUSH
 868: LD_EXP 4
 872: ADD
 873: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 874: LD_ADDR_EXP 6
 878: PUSH
 879: LD_STRING 10_Lisa
 881: PPUSH
 882: LD_INT 1
 884: PPUSH
 885: CALL 9616 0 2
 889: ST_TO_ADDR
// if Lisa then
 890: LD_EXP 6
 894: IFFALSE 912
// JMMSquad = JMMSquad ^ Lisa ;
 896: LD_ADDR_EXP 20
 900: PUSH
 901: LD_EXP 20
 905: PUSH
 906: LD_EXP 6
 910: ADD
 911: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 912: LD_ADDR_EXP 2
 916: PUSH
 917: LD_STRING 10_Brown
 919: PPUSH
 920: LD_INT 1
 922: PPUSH
 923: CALL 9616 0 2
 927: ST_TO_ADDR
// if Brown then
 928: LD_EXP 2
 932: IFFALSE 950
// JMMSquad = JMMSquad ^ Brown ;
 934: LD_ADDR_EXP 20
 938: PUSH
 939: LD_EXP 20
 943: PUSH
 944: LD_EXP 2
 948: ADD
 949: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 950: LD_ADDR_EXP 3
 954: PUSH
 955: LD_STRING 10_Donaldson
 957: PPUSH
 958: LD_INT 1
 960: PPUSH
 961: CALL 9616 0 2
 965: ST_TO_ADDR
// if Donaldson then
 966: LD_EXP 3
 970: IFFALSE 988
// JMMSquad = JMMSquad ^ Donaldson ;
 972: LD_ADDR_EXP 20
 976: PUSH
 977: LD_EXP 20
 981: PUSH
 982: LD_EXP 3
 986: ADD
 987: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 988: LD_ADDR_EXP 7
 992: PUSH
 993: LD_STRING 10_Frank
 995: PPUSH
 996: LD_INT 1
 998: PPUSH
 999: CALL 9616 0 2
1003: ST_TO_ADDR
// if Frank then
1004: LD_EXP 7
1008: IFFALSE 1026
// JMMSquad = JMMSquad ^ Frank ;
1010: LD_ADDR_EXP 20
1014: PUSH
1015: LD_EXP 20
1019: PUSH
1020: LD_EXP 7
1024: ADD
1025: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1026: LD_ADDR_EXP 9
1030: PUSH
1031: LD_STRING 10_Houten
1033: PPUSH
1034: LD_INT 1
1036: PPUSH
1037: CALL 9616 0 2
1041: ST_TO_ADDR
// if Houten then
1042: LD_EXP 9
1046: IFFALSE 1064
// JMMSquad = JMMSquad ^ Houten ;
1048: LD_ADDR_EXP 20
1052: PUSH
1053: LD_EXP 20
1057: PUSH
1058: LD_EXP 9
1062: ADD
1063: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1064: LD_ADDR_EXP 21
1068: PUSH
1069: LD_STRING OthersIn10
1071: PPUSH
1072: CALL_OW 31
1076: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1077: LD_ADDR_EXP 24
1081: PUSH
1082: LD_STRING Powell
1084: PPUSH
1085: LD_INT 0
1087: PPUSH
1088: CALL 9616 0 2
1092: ST_TO_ADDR
// for i in JMMSquad do
1093: LD_ADDR_VAR 0 2
1097: PUSH
1098: LD_EXP 20
1102: PUSH
1103: FOR_IN
1104: IFFALSE 1363
// begin if count < 3 then
1106: LD_VAR 0 6
1110: PUSH
1111: LD_INT 3
1113: LESS
1114: IFFALSE 1231
// begin vc_engine = 1 ;
1116: LD_ADDR_OWVAR 39
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// vc_control = 1 ;
1124: LD_ADDR_OWVAR 38
1128: PUSH
1129: LD_INT 1
1131: ST_TO_ADDR
// vc_weapon = 12 ;
1132: LD_ADDR_OWVAR 40
1136: PUSH
1137: LD_INT 12
1139: ST_TO_ADDR
// vc_chassis = 3 ;
1140: LD_ADDR_OWVAR 37
1144: PUSH
1145: LD_INT 3
1147: ST_TO_ADDR
// veh = CreateVehicle ;
1148: LD_ADDR_VAR 0 4
1152: PUSH
1153: CALL_OW 45
1157: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1158: LD_VAR 0 4
1162: PPUSH
1163: LD_INT 1
1165: PPUSH
1166: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1170: LD_VAR 0 4
1174: PPUSH
1175: LD_INT 2
1177: PPUSH
1178: LD_INT 0
1180: PPUSH
1181: CALL_OW 49
// if count mod 2 = 0 then
1185: LD_VAR 0 6
1189: PUSH
1190: LD_INT 2
1192: MOD
1193: PUSH
1194: LD_INT 0
1196: EQUAL
1197: IFFALSE 1216
// AddCargo ( veh , 1 , 100 ) else
1199: LD_VAR 0 4
1203: PPUSH
1204: LD_INT 1
1206: PPUSH
1207: LD_INT 100
1209: PPUSH
1210: CALL_OW 291
1214: GO 1231
// AddCargo ( veh , 3 , 100 ) end ;
1216: LD_VAR 0 4
1220: PPUSH
1221: LD_INT 3
1223: PPUSH
1224: LD_INT 100
1226: PPUSH
1227: CALL_OW 291
// if count >= 3 then
1231: LD_VAR 0 6
1235: PUSH
1236: LD_INT 3
1238: GREATEREQUAL
1239: IFFALSE 1333
// begin vc_engine = 1 ;
1241: LD_ADDR_OWVAR 39
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_control = 1 ;
1249: LD_ADDR_OWVAR 38
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1257: LD_ADDR_OWVAR 40
1261: PUSH
1262: LD_INT 3
1264: PUSH
1265: LD_INT 4
1267: PUSH
1268: LD_INT 5
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 1
1278: PPUSH
1279: LD_INT 3
1281: PPUSH
1282: CALL_OW 12
1286: ARRAY
1287: ST_TO_ADDR
// vc_chassis = 3 ;
1288: LD_ADDR_OWVAR 37
1292: PUSH
1293: LD_INT 3
1295: ST_TO_ADDR
// veh = CreateVehicle ;
1296: LD_ADDR_VAR 0 4
1300: PUSH
1301: CALL_OW 45
1305: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1306: LD_VAR 0 4
1310: PPUSH
1311: LD_INT 1
1313: PPUSH
1314: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1318: LD_VAR 0 4
1322: PPUSH
1323: LD_INT 2
1325: PPUSH
1326: LD_INT 0
1328: PPUSH
1329: CALL_OW 49
// end ; count = count + 1 ;
1333: LD_ADDR_VAR 0 6
1337: PUSH
1338: LD_VAR 0 6
1342: PUSH
1343: LD_INT 1
1345: PLUS
1346: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1347: LD_VAR 0 2
1351: PPUSH
1352: LD_VAR 0 4
1356: PPUSH
1357: CALL_OW 52
// end ;
1361: GO 1103
1363: POP
1364: POP
// for i in others10 do
1365: LD_ADDR_VAR 0 2
1369: PUSH
1370: LD_EXP 21
1374: PUSH
1375: FOR_IN
1376: IFFALSE 1502
// begin vc_engine = 1 ;
1378: LD_ADDR_OWVAR 39
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// vc_control = 1 ;
1386: LD_ADDR_OWVAR 38
1390: PUSH
1391: LD_INT 1
1393: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1394: LD_ADDR_OWVAR 40
1398: PUSH
1399: LD_INT 3
1401: PUSH
1402: LD_INT 4
1404: PUSH
1405: LD_INT 5
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: LIST
1412: PUSH
1413: LD_INT 1
1415: PPUSH
1416: LD_INT 3
1418: PPUSH
1419: CALL_OW 12
1423: ARRAY
1424: ST_TO_ADDR
// vc_chassis = 3 ;
1425: LD_ADDR_OWVAR 37
1429: PUSH
1430: LD_INT 3
1432: ST_TO_ADDR
// veh = CreateVehicle ;
1433: LD_ADDR_VAR 0 4
1437: PUSH
1438: CALL_OW 45
1442: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1443: LD_VAR 0 4
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1455: LD_VAR 0 4
1459: PPUSH
1460: LD_INT 2
1462: PPUSH
1463: LD_INT 0
1465: PPUSH
1466: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1470: LD_ADDR_EXP 28
1474: PUSH
1475: LD_EXP 28
1479: PUSH
1480: LD_VAR 0 4
1484: ADD
1485: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1486: LD_VAR 0 2
1490: PPUSH
1491: LD_VAR 0 4
1495: PPUSH
1496: CALL_OW 52
// end ;
1500: GO 1375
1502: POP
1503: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1504: LD_INT 22
1506: PUSH
1507: LD_INT 1
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: PUSH
1514: LD_INT 21
1516: PUSH
1517: LD_INT 1
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: PPUSH
1528: CALL_OW 69
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: CALL_OW 336
// end ;
1540: LD_VAR 0 1
1544: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1545: LD_INT 0
1547: PPUSH
1548: PPUSH
1549: PPUSH
1550: PPUSH
1551: PPUSH
// uc_side = 1 ;
1552: LD_ADDR_OWVAR 20
1556: PUSH
1557: LD_INT 1
1559: ST_TO_ADDR
// uc_nation = 1 ;
1560: LD_ADDR_OWVAR 21
1564: PUSH
1565: LD_INT 1
1567: ST_TO_ADDR
// for i := 1 to 10 do
1568: LD_ADDR_VAR 0 2
1572: PUSH
1573: DOUBLE
1574: LD_INT 1
1576: DEC
1577: ST_TO_ADDR
1578: LD_INT 10
1580: PUSH
1581: FOR_TO
1582: IFFALSE 1764
// begin vc_engine = 1 ;
1584: LD_ADDR_OWVAR 39
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// vc_control = 1 ;
1592: LD_ADDR_OWVAR 38
1596: PUSH
1597: LD_INT 1
1599: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1600: LD_ADDR_OWVAR 40
1604: PUSH
1605: LD_INT 3
1607: PUSH
1608: LD_INT 4
1610: PUSH
1611: LD_INT 5
1613: PUSH
1614: LD_INT 12
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 1
1625: PPUSH
1626: LD_INT 4
1628: PPUSH
1629: CALL_OW 12
1633: ARRAY
1634: ST_TO_ADDR
// vc_chassis = 3 ;
1635: LD_ADDR_OWVAR 37
1639: PUSH
1640: LD_INT 3
1642: ST_TO_ADDR
// veh = CreateVehicle ;
1643: LD_ADDR_VAR 0 3
1647: PUSH
1648: CALL_OW 45
1652: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1653: LD_VAR 0 3
1657: PPUSH
1658: LD_INT 1
1660: PPUSH
1661: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1665: LD_VAR 0 3
1669: PPUSH
1670: LD_INT 2
1672: PPUSH
1673: LD_INT 0
1675: PPUSH
1676: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1680: LD_ADDR_EXP 28
1684: PUSH
1685: LD_EXP 28
1689: PUSH
1690: LD_VAR 0 3
1694: ADD
1695: ST_TO_ADDR
// if vc_weapon = 12 then
1696: LD_OWVAR 40
1700: PUSH
1701: LD_INT 12
1703: EQUAL
1704: IFFALSE 1762
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1706: LD_ADDR_VAR 0 4
1710: PUSH
1711: LD_INT 5
1713: PPUSH
1714: LD_INT 10
1716: PPUSH
1717: CALL_OW 12
1721: PUSH
1722: LD_INT 10
1724: MUL
1725: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1726: LD_VAR 0 3
1730: PPUSH
1731: LD_INT 1
1733: PUSH
1734: LD_INT 3
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 2
1746: PPUSH
1747: CALL_OW 12
1751: ARRAY
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL_OW 291
// end ; end ;
1762: GO 1581
1764: POP
1765: POP
// end ;
1766: LD_VAR 0 1
1770: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1771: LD_INT 0
1773: PPUSH
1774: PPUSH
1775: PPUSH
// uc_side = 4 ;
1776: LD_ADDR_OWVAR 20
1780: PUSH
1781: LD_INT 4
1783: ST_TO_ADDR
// uc_nation = 1 ;
1784: LD_ADDR_OWVAR 21
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1792: LD_ADDR_EXP 11
1796: PUSH
1797: LD_STRING Simms
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL 9616 0 2
1807: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1808: LD_ADDR_EXP 12
1812: PUSH
1813: LD_STRING 08_Denis
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: CALL 9616 0 2
1823: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1824: LD_ADDR_EXP 13
1828: PUSH
1829: LD_STRING 08_Joan
1831: PPUSH
1832: LD_INT 1
1834: PPUSH
1835: CALL 9616 0 2
1839: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
1840: LD_STRING 08_Khatam
1842: PPUSH
1843: CALL_OW 28
1847: IFFALSE 1867
// Khatam = PrepareUnit ( 08_Khatam , true ) else
1849: LD_ADDR_EXP 14
1853: PUSH
1854: LD_STRING 08_Khatam
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: CALL 9616 0 2
1864: ST_TO_ADDR
1865: GO 1892
// if TestCharacters ( 03_Khatam ) then
1867: LD_STRING 03_Khatam
1869: PPUSH
1870: CALL_OW 28
1874: IFFALSE 1892
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
1876: LD_ADDR_EXP 14
1880: PUSH
1881: LD_STRING 03_Khatam
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: CALL 9616 0 2
1891: ST_TO_ADDR
// Gladstone = PrepareUnit ( 08_Gladstone , true ) ;
1892: LD_ADDR_EXP 15
1896: PUSH
1897: LD_STRING 08_Gladstone
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: CALL 9616 0 2
1907: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1908: LD_ADDR_EXP 17
1912: PUSH
1913: LD_STRING DeltaDoctor
1915: PPUSH
1916: LD_INT 1
1918: PPUSH
1919: CALL 9616 0 2
1923: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1924: LD_STRING 08_Frank
1926: PPUSH
1927: CALL_OW 28
1931: PUSH
1932: LD_INT 1
1934: EQUAL
1935: IFFALSE 1953
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1937: LD_ADDR_EXP 8
1941: PUSH
1942: LD_STRING Yamoko
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: CALL 9616 0 2
1952: ST_TO_ADDR
// if TestCharacters ( 08_Kikuchi ) then
1953: LD_STRING 08_Kikuchi
1955: PPUSH
1956: CALL_OW 28
1960: IFFALSE 1978
// Kikuchi = PrepareUnit ( 08_Kikuchi , true ) ;
1962: LD_ADDR_EXP 8
1966: PUSH
1967: LD_STRING 08_Kikuchi
1969: PPUSH
1970: LD_INT 1
1972: PPUSH
1973: CALL 9616 0 2
1977: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1978: LD_ADDR_EXP 22
1982: PUSH
1983: LD_STRING 09_others
1985: PPUSH
1986: CALL_OW 31
1990: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1991: LD_ADDR_EXP 23
1995: PUSH
1996: LD_STRING 09_apes
1998: PPUSH
1999: CALL_OW 31
2003: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2004: LD_EXP 11
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 0
2014: PPUSH
2015: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2019: LD_EXP 12
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: LD_INT 0
2029: PPUSH
2030: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2034: LD_EXP 13
2038: PPUSH
2039: LD_INT 1
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2049: LD_EXP 14
2053: PPUSH
2054: LD_INT 1
2056: PPUSH
2057: LD_INT 0
2059: PPUSH
2060: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2064: LD_EXP 15
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2079: LD_EXP 17
2083: PPUSH
2084: LD_INT 1
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2094: LD_EXP 8
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2109: LD_EXP 11
2113: PUSH
2114: LD_EXP 14
2118: PUSH
2119: LD_EXP 12
2123: PUSH
2124: LD_EXP 15
2128: PUSH
2129: LD_EXP 17
2133: PUSH
2134: LD_EXP 13
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: PPUSH
2147: LD_INT 4
2149: PPUSH
2150: CALL_OW 336
// if others09 > 2 then
2154: LD_EXP 22
2158: PUSH
2159: LD_INT 2
2161: GREATER
2162: IFFALSE 2243
// begin for i := 1 to 3 do
2164: LD_ADDR_VAR 0 2
2168: PUSH
2169: DOUBLE
2170: LD_INT 1
2172: DEC
2173: ST_TO_ADDR
2174: LD_INT 3
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2239
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2180: LD_EXP 22
2184: PUSH
2185: LD_VAR 0 2
2189: ARRAY
2190: PPUSH
2191: LD_INT 1
2193: PPUSH
2194: LD_INT 0
2196: PPUSH
2197: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2201: LD_ADDR_EXP 22
2205: PUSH
2206: LD_EXP 22
2210: PPUSH
2211: LD_INT 1
2213: PPUSH
2214: CALL_OW 3
2218: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2219: LD_EXP 22
2223: PUSH
2224: LD_VAR 0 2
2228: ARRAY
2229: PPUSH
2230: LD_INT 2
2232: PPUSH
2233: CALL_OW 336
// end ;
2237: GO 2177
2239: POP
2240: POP
// end else
2241: GO 2303
// begin for i in others09 do
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_EXP 22
2252: PUSH
2253: FOR_IN
2254: IFFALSE 2301
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2256: LD_VAR 0 2
2260: PPUSH
2261: LD_INT 1
2263: PPUSH
2264: LD_INT 0
2266: PPUSH
2267: CALL_OW 49
// others09 = others09 diff i ;
2271: LD_ADDR_EXP 22
2275: PUSH
2276: LD_EXP 22
2280: PUSH
2281: LD_VAR 0 2
2285: DIFF
2286: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: CALL_OW 336
// end ;
2299: GO 2253
2301: POP
2302: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2303: LD_INT 22
2305: PUSH
2306: LD_INT 4
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 25
2315: PUSH
2316: LD_INT 2
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 0
2334: EQUAL
2335: IFFALSE 2467
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: LD_INT 22
2344: PUSH
2345: LD_INT 4
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: LD_INT 25
2354: PUSH
2355: LD_INT 2
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PPUSH
2366: CALL_OW 69
2370: PUSH
2371: LD_EXP 11
2375: PUSH
2376: LD_EXP 14
2380: PUSH
2381: LD_EXP 12
2385: PUSH
2386: LD_EXP 15
2390: PUSH
2391: LD_EXP 17
2395: PUSH
2396: LD_EXP 13
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: DIFF
2409: ST_TO_ADDR
// if not tmp then
2410: LD_VAR 0 3
2414: NOT
2415: IFFALSE 2451
// begin if Denis then
2417: LD_EXP 12
2421: IFFALSE 2437
// SetClass ( Denis , 2 ) else
2423: LD_EXP 12
2427: PPUSH
2428: LD_INT 2
2430: PPUSH
2431: CALL_OW 336
2435: GO 2449
// SetClass ( DeltaDoctor , 2 ) ;
2437: LD_EXP 17
2441: PPUSH
2442: LD_INT 2
2444: PPUSH
2445: CALL_OW 336
// end else
2449: GO 2467
// begin SetClass ( tmp [ 1 ] , 2 ) ;
2451: LD_VAR 0 3
2455: PUSH
2456: LD_INT 1
2458: ARRAY
2459: PPUSH
2460: LD_INT 2
2462: PPUSH
2463: CALL_OW 336
// end ; end ; for i in ape09 do
2467: LD_ADDR_VAR 0 2
2471: PUSH
2472: LD_EXP 23
2476: PUSH
2477: FOR_IN
2478: IFFALSE 2497
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_INT 1
2487: PPUSH
2488: LD_INT 0
2490: PPUSH
2491: CALL_OW 49
2495: GO 2477
2497: POP
2498: POP
// uc_side = 4 ;
2499: LD_ADDR_OWVAR 20
2503: PUSH
2504: LD_INT 4
2506: ST_TO_ADDR
// hc_class := 1 ;
2507: LD_ADDR_OWVAR 28
2511: PUSH
2512: LD_INT 1
2514: ST_TO_ADDR
// hc_sex := sex_female ;
2515: LD_ADDR_OWVAR 27
2519: PUSH
2520: LD_INT 2
2522: ST_TO_ADDR
// hc_gallery :=  ;
2523: LD_ADDR_OWVAR 33
2527: PUSH
2528: LD_STRING 
2530: ST_TO_ADDR
// hc_name :=  ;
2531: LD_ADDR_OWVAR 26
2535: PUSH
2536: LD_STRING 
2538: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2539: LD_ADDR_OWVAR 31
2543: PUSH
2544: LD_INT 1
2546: PUSH
2547: LD_INT 7
2549: PUSH
2550: LD_INT 1
2552: PUSH
2553: LD_INT 0
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: ST_TO_ADDR
// AmScout = CreateHuman ;
2562: LD_ADDR_EXP 18
2566: PUSH
2567: CALL_OW 44
2571: ST_TO_ADDR
// end ;
2572: LD_VAR 0 1
2576: RET
// export function PrepareCornell ; begin
2577: LD_INT 0
2579: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2580: LD_INT 4
2582: PPUSH
2583: LD_INT 4
2585: PPUSH
2586: CALL_OW 343
// uc_side = 4 ;
2590: LD_ADDR_OWVAR 20
2594: PUSH
2595: LD_INT 4
2597: ST_TO_ADDR
// uc_nation = 1 ;
2598: LD_ADDR_OWVAR 21
2602: PUSH
2603: LD_INT 1
2605: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2606: LD_ADDR_EXP 19
2610: PUSH
2611: LD_STRING 03_Cornel
2613: PPUSH
2614: LD_INT 1
2616: PPUSH
2617: CALL 9616 0 2
2621: ST_TO_ADDR
// if not Cornell then
2622: LD_EXP 19
2626: NOT
2627: IFFALSE 2631
// exit ;
2629: GO 2739
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2631: LD_EXP 19
2635: PPUSH
2636: LD_INT 8
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2646: LD_EXP 19
2650: PPUSH
2651: LD_INT 350
2653: PPUSH
2654: CALL_OW 234
// if IsInUnit ( JMM ) then
2658: LD_EXP 1
2662: PPUSH
2663: CALL_OW 310
2667: IFFALSE 2710
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2669: LD_EXP 19
2673: PPUSH
2674: LD_EXP 1
2678: PPUSH
2679: CALL_OW 310
2683: PPUSH
2684: CALL_OW 250
2688: PPUSH
2689: LD_EXP 1
2693: PPUSH
2694: CALL_OW 310
2698: PPUSH
2699: CALL_OW 251
2703: PPUSH
2704: CALL_OW 111
2708: GO 2739
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2710: LD_EXP 19
2714: PPUSH
2715: LD_EXP 1
2719: PPUSH
2720: CALL_OW 250
2724: PPUSH
2725: LD_EXP 1
2729: PPUSH
2730: CALL_OW 251
2734: PPUSH
2735: CALL_OW 111
// end ; end_of_file
2739: LD_VAR 0 1
2743: RET
// export function PrepareRussians ; var i , un ; begin
2744: LD_INT 0
2746: PPUSH
2747: PPUSH
2748: PPUSH
// uc_side = 3 ;
2749: LD_ADDR_OWVAR 20
2753: PUSH
2754: LD_INT 3
2756: ST_TO_ADDR
// uc_nation = 3 ;
2757: LD_ADDR_OWVAR 21
2761: PUSH
2762: LD_INT 3
2764: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2765: LD_ADDR_EXP 25
2769: PUSH
2770: LD_STRING Tsaritsyn
2772: PPUSH
2773: LD_INT 0
2775: PPUSH
2776: CALL 9616 0 2
2780: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2781: LD_EXP 25
2785: PPUSH
2786: LD_INT 3
2788: PPUSH
2789: LD_INT 0
2791: PPUSH
2792: CALL_OW 49
// for i = 1 to 14 do
2796: LD_ADDR_VAR 0 2
2800: PUSH
2801: DOUBLE
2802: LD_INT 1
2804: DEC
2805: ST_TO_ADDR
2806: LD_INT 14
2808: PUSH
2809: FOR_TO
2810: IFFALSE 2896
// begin uc_side = 3 ;
2812: LD_ADDR_OWVAR 20
2816: PUSH
2817: LD_INT 3
2819: ST_TO_ADDR
// uc_nation = 3 ;
2820: LD_ADDR_OWVAR 21
2824: PUSH
2825: LD_INT 3
2827: ST_TO_ADDR
// hc_gallery =  ;
2828: LD_ADDR_OWVAR 33
2832: PUSH
2833: LD_STRING 
2835: ST_TO_ADDR
// hc_name =  ;
2836: LD_ADDR_OWVAR 26
2840: PUSH
2841: LD_STRING 
2843: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2844: LD_INT 0
2846: PPUSH
2847: LD_INT 1
2849: PPUSH
2850: LD_EXP 36
2854: PPUSH
2855: LD_EXP 37
2859: PPUSH
2860: CALL_OW 12
2864: PPUSH
2865: CALL_OW 380
// un = CreateHuman ;
2869: LD_ADDR_VAR 0 3
2873: PUSH
2874: CALL_OW 44
2878: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2879: LD_VAR 0 3
2883: PPUSH
2884: LD_INT 3
2886: PPUSH
2887: LD_INT 0
2889: PPUSH
2890: CALL_OW 49
// end ;
2894: GO 2809
2896: POP
2897: POP
// for i = 1 to 6 do
2898: LD_ADDR_VAR 0 2
2902: PUSH
2903: DOUBLE
2904: LD_INT 1
2906: DEC
2907: ST_TO_ADDR
2908: LD_INT 6
2910: PUSH
2911: FOR_TO
2912: IFFALSE 2998
// begin uc_side = 3 ;
2914: LD_ADDR_OWVAR 20
2918: PUSH
2919: LD_INT 3
2921: ST_TO_ADDR
// uc_nation = 3 ;
2922: LD_ADDR_OWVAR 21
2926: PUSH
2927: LD_INT 3
2929: ST_TO_ADDR
// hc_gallery =  ;
2930: LD_ADDR_OWVAR 33
2934: PUSH
2935: LD_STRING 
2937: ST_TO_ADDR
// hc_name =  ;
2938: LD_ADDR_OWVAR 26
2942: PUSH
2943: LD_STRING 
2945: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2946: LD_INT 0
2948: PPUSH
2949: LD_INT 2
2951: PPUSH
2952: LD_EXP 36
2956: PPUSH
2957: LD_EXP 37
2961: PPUSH
2962: CALL_OW 12
2966: PPUSH
2967: CALL_OW 380
// un = CreateHuman ;
2971: LD_ADDR_VAR 0 3
2975: PUSH
2976: CALL_OW 44
2980: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2981: LD_VAR 0 3
2985: PPUSH
2986: LD_INT 3
2988: PPUSH
2989: LD_INT 0
2991: PPUSH
2992: CALL_OW 49
// end ;
2996: GO 2911
2998: POP
2999: POP
// for i = 1 to 6 do
3000: LD_ADDR_VAR 0 2
3004: PUSH
3005: DOUBLE
3006: LD_INT 1
3008: DEC
3009: ST_TO_ADDR
3010: LD_INT 6
3012: PUSH
3013: FOR_TO
3014: IFFALSE 3100
// begin uc_side = 3 ;
3016: LD_ADDR_OWVAR 20
3020: PUSH
3021: LD_INT 3
3023: ST_TO_ADDR
// uc_nation = 3 ;
3024: LD_ADDR_OWVAR 21
3028: PUSH
3029: LD_INT 3
3031: ST_TO_ADDR
// hc_gallery =  ;
3032: LD_ADDR_OWVAR 33
3036: PUSH
3037: LD_STRING 
3039: ST_TO_ADDR
// hc_name =  ;
3040: LD_ADDR_OWVAR 26
3044: PUSH
3045: LD_STRING 
3047: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3048: LD_INT 0
3050: PPUSH
3051: LD_INT 3
3053: PPUSH
3054: LD_EXP 36
3058: PPUSH
3059: LD_EXP 37
3063: PPUSH
3064: CALL_OW 12
3068: PPUSH
3069: CALL_OW 380
// un = CreateHuman ;
3073: LD_ADDR_VAR 0 3
3077: PUSH
3078: CALL_OW 44
3082: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3083: LD_VAR 0 3
3087: PPUSH
3088: LD_INT 3
3090: PPUSH
3091: LD_INT 0
3093: PPUSH
3094: CALL_OW 49
// end ;
3098: GO 3013
3100: POP
3101: POP
// for i = 1 to 4 do
3102: LD_ADDR_VAR 0 2
3106: PUSH
3107: DOUBLE
3108: LD_INT 1
3110: DEC
3111: ST_TO_ADDR
3112: LD_INT 4
3114: PUSH
3115: FOR_TO
3116: IFFALSE 3202
// begin uc_side = 3 ;
3118: LD_ADDR_OWVAR 20
3122: PUSH
3123: LD_INT 3
3125: ST_TO_ADDR
// uc_nation = 3 ;
3126: LD_ADDR_OWVAR 21
3130: PUSH
3131: LD_INT 3
3133: ST_TO_ADDR
// hc_gallery =  ;
3134: LD_ADDR_OWVAR 33
3138: PUSH
3139: LD_STRING 
3141: ST_TO_ADDR
// hc_name =  ;
3142: LD_ADDR_OWVAR 26
3146: PUSH
3147: LD_STRING 
3149: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3150: LD_INT 0
3152: PPUSH
3153: LD_INT 4
3155: PPUSH
3156: LD_EXP 36
3160: PPUSH
3161: LD_EXP 37
3165: PPUSH
3166: CALL_OW 12
3170: PPUSH
3171: CALL_OW 380
// un = CreateHuman ;
3175: LD_ADDR_VAR 0 3
3179: PUSH
3180: CALL_OW 44
3184: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3185: LD_VAR 0 3
3189: PPUSH
3190: LD_INT 3
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: CALL_OW 49
// end ;
3200: GO 3115
3202: POP
3203: POP
// end ; end_of_file
3204: LD_VAR 0 1
3208: RET
// export function PrepareArabianCommander ; begin
3209: LD_INT 0
3211: PPUSH
// uc_side = 2 ;
3212: LD_ADDR_OWVAR 20
3216: PUSH
3217: LD_INT 2
3219: ST_TO_ADDR
// uc_nation = 2 ;
3220: LD_ADDR_OWVAR 21
3224: PUSH
3225: LD_INT 2
3227: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3228: LD_ADDR_EXP 26
3232: PUSH
3233: LD_STRING Dietrich
3235: PPUSH
3236: CALL_OW 25
3240: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3241: LD_EXP 26
3245: PPUSH
3246: LD_INT 4
3248: PPUSH
3249: LD_INT 0
3251: PPUSH
3252: CALL_OW 49
// end ;
3256: LD_VAR 0 1
3260: RET
// export function PrepareArabian ; var i , un , veh ; begin
3261: LD_INT 0
3263: PPUSH
3264: PPUSH
3265: PPUSH
3266: PPUSH
// uc_side := 2 ;
3267: LD_ADDR_OWVAR 20
3271: PUSH
3272: LD_INT 2
3274: ST_TO_ADDR
// uc_nation := 2 ;
3275: LD_ADDR_OWVAR 21
3279: PUSH
3280: LD_INT 2
3282: ST_TO_ADDR
// if not Ahmed then
3283: LD_EXP 27
3287: NOT
3288: IFFALSE 3356
// begin InitHc ;
3290: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3294: LD_INT 1
3296: PPUSH
3297: LD_INT 1
3299: PPUSH
3300: LD_EXP 36
3304: PPUSH
3305: LD_EXP 37
3309: PUSH
3310: LD_INT 1
3312: PLUS
3313: PPUSH
3314: CALL_OW 12
3318: PPUSH
3319: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3323: LD_ADDR_OWVAR 26
3327: PUSH
3328: LD_STRING Ahmed Abbasid
3330: ST_TO_ADDR
// Ahmed := CreateHuman ;
3331: LD_ADDR_EXP 27
3335: PUSH
3336: CALL_OW 44
3340: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3341: LD_EXP 27
3345: PPUSH
3346: LD_INT 4
3348: PPUSH
3349: LD_INT 0
3351: PPUSH
3352: CALL_OW 49
// end ; for i = 1 to 4 do
3356: LD_ADDR_VAR 0 2
3360: PUSH
3361: DOUBLE
3362: LD_INT 1
3364: DEC
3365: ST_TO_ADDR
3366: LD_INT 4
3368: PUSH
3369: FOR_TO
3370: IFFALSE 3456
// begin uc_side = 2 ;
3372: LD_ADDR_OWVAR 20
3376: PUSH
3377: LD_INT 2
3379: ST_TO_ADDR
// uc_nation = 2 ;
3380: LD_ADDR_OWVAR 21
3384: PUSH
3385: LD_INT 2
3387: ST_TO_ADDR
// hc_gallery =  ;
3388: LD_ADDR_OWVAR 33
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// hc_name =  ;
3396: LD_ADDR_OWVAR 26
3400: PUSH
3401: LD_STRING 
3403: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3404: LD_INT 0
3406: PPUSH
3407: LD_INT 2
3409: PPUSH
3410: LD_EXP 36
3414: PPUSH
3415: LD_EXP 37
3419: PPUSH
3420: CALL_OW 12
3424: PPUSH
3425: CALL_OW 380
// un = CreateHuman ;
3429: LD_ADDR_VAR 0 3
3433: PUSH
3434: CALL_OW 44
3438: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3439: LD_VAR 0 3
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: LD_INT 0
3449: PPUSH
3450: CALL_OW 49
// end ;
3454: GO 3369
3456: POP
3457: POP
// for i = 1 to 5 do
3458: LD_ADDR_VAR 0 2
3462: PUSH
3463: DOUBLE
3464: LD_INT 1
3466: DEC
3467: ST_TO_ADDR
3468: LD_INT 5
3470: PUSH
3471: FOR_TO
3472: IFFALSE 3558
// begin uc_side = 2 ;
3474: LD_ADDR_OWVAR 20
3478: PUSH
3479: LD_INT 2
3481: ST_TO_ADDR
// uc_nation = 2 ;
3482: LD_ADDR_OWVAR 21
3486: PUSH
3487: LD_INT 2
3489: ST_TO_ADDR
// hc_gallery =  ;
3490: LD_ADDR_OWVAR 33
3494: PUSH
3495: LD_STRING 
3497: ST_TO_ADDR
// hc_name =  ;
3498: LD_ADDR_OWVAR 26
3502: PUSH
3503: LD_STRING 
3505: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3506: LD_INT 0
3508: PPUSH
3509: LD_INT 1
3511: PPUSH
3512: LD_EXP 36
3516: PPUSH
3517: LD_EXP 37
3521: PPUSH
3522: CALL_OW 12
3526: PPUSH
3527: CALL_OW 380
// un = CreateHuman ;
3531: LD_ADDR_VAR 0 3
3535: PUSH
3536: CALL_OW 44
3540: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3541: LD_VAR 0 3
3545: PPUSH
3546: LD_INT 4
3548: PPUSH
3549: LD_INT 0
3551: PPUSH
3552: CALL_OW 49
// end ;
3556: GO 3471
3558: POP
3559: POP
// for i = 1 to 4 do
3560: LD_ADDR_VAR 0 2
3564: PUSH
3565: DOUBLE
3566: LD_INT 1
3568: DEC
3569: ST_TO_ADDR
3570: LD_INT 4
3572: PUSH
3573: FOR_TO
3574: IFFALSE 3660
// begin uc_side = 2 ;
3576: LD_ADDR_OWVAR 20
3580: PUSH
3581: LD_INT 2
3583: ST_TO_ADDR
// uc_nation = 2 ;
3584: LD_ADDR_OWVAR 21
3588: PUSH
3589: LD_INT 2
3591: ST_TO_ADDR
// hc_gallery =  ;
3592: LD_ADDR_OWVAR 33
3596: PUSH
3597: LD_STRING 
3599: ST_TO_ADDR
// hc_name =  ;
3600: LD_ADDR_OWVAR 26
3604: PUSH
3605: LD_STRING 
3607: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3608: LD_INT 0
3610: PPUSH
3611: LD_INT 4
3613: PPUSH
3614: LD_EXP 36
3618: PPUSH
3619: LD_EXP 37
3623: PPUSH
3624: CALL_OW 12
3628: PPUSH
3629: CALL_OW 380
// un = CreateHuman ;
3633: LD_ADDR_VAR 0 3
3637: PUSH
3638: CALL_OW 44
3642: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3643: LD_VAR 0 3
3647: PPUSH
3648: LD_INT 4
3650: PPUSH
3651: LD_INT 0
3653: PPUSH
3654: CALL_OW 49
// end ;
3658: GO 3573
3660: POP
3661: POP
// for i = 1 to 2 do
3662: LD_ADDR_VAR 0 2
3666: PUSH
3667: DOUBLE
3668: LD_INT 1
3670: DEC
3671: ST_TO_ADDR
3672: LD_INT 2
3674: PUSH
3675: FOR_TO
3676: IFFALSE 3806
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3678: LD_ADDR_VAR 0 4
3682: PUSH
3683: LD_INT 22
3685: PUSH
3686: LD_INT 2
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 21
3695: PUSH
3696: LD_INT 2
3698: PUSH
3699: EMPTY
3700: LIST
3701: LIST
3702: PUSH
3703: LD_INT 58
3705: PUSH
3706: EMPTY
3707: LIST
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: PPUSH
3714: CALL_OW 69
3718: ST_TO_ADDR
// uc_side = 2 ;
3719: LD_ADDR_OWVAR 20
3723: PUSH
3724: LD_INT 2
3726: ST_TO_ADDR
// uc_nation = 2 ;
3727: LD_ADDR_OWVAR 21
3731: PUSH
3732: LD_INT 2
3734: ST_TO_ADDR
// hc_gallery =  ;
3735: LD_ADDR_OWVAR 33
3739: PUSH
3740: LD_STRING 
3742: ST_TO_ADDR
// hc_name =  ;
3743: LD_ADDR_OWVAR 26
3747: PUSH
3748: LD_STRING 
3750: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3751: LD_INT 0
3753: PPUSH
3754: LD_INT 3
3756: PPUSH
3757: LD_EXP 36
3761: PPUSH
3762: LD_EXP 37
3766: PPUSH
3767: CALL_OW 12
3771: PPUSH
3772: CALL_OW 380
// un = CreateHuman ;
3776: LD_ADDR_VAR 0 3
3780: PUSH
3781: CALL_OW 44
3785: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3786: LD_VAR 0 3
3790: PPUSH
3791: LD_VAR 0 4
3795: PUSH
3796: LD_INT 1
3798: ARRAY
3799: PPUSH
3800: CALL_OW 52
// end ;
3804: GO 3675
3806: POP
3807: POP
// end ;
3808: LD_VAR 0 1
3812: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3813: LD_INT 0
3815: PPUSH
3816: PPUSH
3817: PPUSH
3818: PPUSH
3819: PPUSH
3820: PPUSH
// for i := 1 to 2 do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 2
3833: PUSH
3834: FOR_TO
3835: IFFALSE 3961
// begin uc_side = 5 ;
3837: LD_ADDR_OWVAR 20
3841: PUSH
3842: LD_INT 5
3844: ST_TO_ADDR
// uc_nation = 2 ;
3845: LD_ADDR_OWVAR 21
3849: PUSH
3850: LD_INT 2
3852: ST_TO_ADDR
// vc_chassis := 31 ;
3853: LD_ADDR_OWVAR 37
3857: PUSH
3858: LD_INT 31
3860: ST_TO_ADDR
// vc_control := control_rider ;
3861: LD_ADDR_OWVAR 38
3865: PUSH
3866: LD_INT 4
3868: ST_TO_ADDR
// animal := CreateVehicle ;
3869: LD_ADDR_VAR 0 3
3873: PUSH
3874: CALL_OW 45
3878: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3879: LD_VAR 0 3
3883: PPUSH
3884: LD_INT 7
3886: PPUSH
3887: LD_INT 0
3889: PPUSH
3890: CALL_OW 49
// hc_gallery =  ;
3894: LD_ADDR_OWVAR 33
3898: PUSH
3899: LD_STRING 
3901: ST_TO_ADDR
// hc_name =  ;
3902: LD_ADDR_OWVAR 26
3906: PUSH
3907: LD_STRING 
3909: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3910: LD_INT 0
3912: PPUSH
3913: LD_INT 11
3915: PPUSH
3916: LD_EXP 36
3920: PPUSH
3921: LD_EXP 37
3925: PPUSH
3926: CALL_OW 12
3930: PPUSH
3931: CALL_OW 380
// un = CreateHuman ;
3935: LD_ADDR_VAR 0 4
3939: PUSH
3940: CALL_OW 44
3944: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_VAR 0 3
3954: PPUSH
3955: CALL_OW 52
// end ;
3959: GO 3834
3961: POP
3962: POP
// repeat wait ( 0 0$1 ) ;
3963: LD_INT 35
3965: PPUSH
3966: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
3970: LD_ADDR_VAR 0 5
3974: PUSH
3975: LD_INT 22
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PPUSH
3985: CALL_OW 69
3989: PPUSH
3990: LD_VAR 0 2
3994: PPUSH
3995: CALL_OW 74
3999: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4000: LD_ADDR_VAR 0 6
4004: PUSH
4005: LD_INT 22
4007: PUSH
4008: LD_INT 1
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: PUSH
4015: LD_INT 2
4017: PUSH
4018: LD_INT 59
4020: PUSH
4021: EMPTY
4022: LIST
4023: PUSH
4024: LD_INT 21
4026: PUSH
4027: LD_INT 1
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 21
4036: PUSH
4037: LD_INT 2
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PUSH
4054: EMPTY
4055: LIST
4056: PPUSH
4057: CALL_OW 69
4061: PPUSH
4062: LD_VAR 0 2
4066: PPUSH
4067: CALL_OW 74
4071: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4072: LD_ADDR_VAR 0 2
4076: PUSH
4077: LD_INT 22
4079: PUSH
4080: LD_INT 5
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: PUSH
4087: LD_INT 25
4089: PUSH
4090: LD_INT 11
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: PPUSH
4101: CALL_OW 69
4105: PUSH
4106: FOR_IN
4107: IFFALSE 4177
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4109: LD_VAR 0 2
4113: PPUSH
4114: LD_VAR 0 5
4118: PPUSH
4119: CALL_OW 296
4123: PUSH
4124: LD_INT 8
4126: PLUS
4127: PUSH
4128: LD_VAR 0 2
4132: PPUSH
4133: LD_VAR 0 6
4137: PPUSH
4138: CALL_OW 296
4142: LESS
4143: IFFALSE 4161
// ComAttackUnit ( i , target1 ) else
4145: LD_VAR 0 2
4149: PPUSH
4150: LD_VAR 0 5
4154: PPUSH
4155: CALL_OW 115
4159: GO 4175
// ComAttackUnit ( i , target2 ) ;
4161: LD_VAR 0 2
4165: PPUSH
4166: LD_VAR 0 6
4170: PPUSH
4171: CALL_OW 115
// end ;
4175: GO 4106
4177: POP
4178: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4179: LD_INT 22
4181: PUSH
4182: LD_INT 5
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PUSH
4189: LD_INT 25
4191: PUSH
4192: LD_INT 11
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PPUSH
4203: CALL_OW 69
4207: PUSH
4208: LD_INT 0
4210: EQUAL
4211: PUSH
4212: LD_INT 22
4214: PUSH
4215: LD_INT 1
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PPUSH
4222: CALL_OW 69
4226: PUSH
4227: LD_INT 0
4229: EQUAL
4230: OR
4231: IFFALSE 3963
// end ; end_of_file
4233: LD_VAR 0 1
4237: RET
// every 1 do
4238: GO 4240
4240: DISABLE
// begin InGameOn ;
4241: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4245: LD_INT 1
4247: PPUSH
4248: LD_INT 19
4250: PPUSH
4251: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4255: LD_EXP 11
4259: PPUSH
4260: CALL_OW 87
// wait ( 0 0$3 ) ;
4264: LD_INT 105
4266: PPUSH
4267: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4271: LD_EXP 1
4275: PPUSH
4276: CALL_OW 310
4280: PPUSH
4281: CALL_OW 85
// Wait ( 0 0$1 ) ;
4285: LD_INT 35
4287: PPUSH
4288: CALL_OW 67
// if IsOk ( Gary ) then
4292: LD_EXP 10
4296: PPUSH
4297: CALL_OW 302
4301: IFFALSE 4339
// begin Say ( Gary , D2-Gary-1 ) ;
4303: LD_EXP 10
4307: PPUSH
4308: LD_STRING D2-Gary-1
4310: PPUSH
4311: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4315: LD_EXP 1
4319: PPUSH
4320: LD_STRING D2-JMM-1
4322: PPUSH
4323: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4327: LD_EXP 10
4331: PPUSH
4332: LD_STRING D2-Gary-2
4334: PPUSH
4335: CALL_OW 88
// end ; InGameOff ;
4339: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4343: LD_STRING M1
4345: PPUSH
4346: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4350: LD_INT 38
4352: PPUSH
4353: LD_INT 1
4355: PPUSH
4356: LD_INT 100
4358: PPUSH
4359: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4363: LD_INT 47
4365: PPUSH
4366: LD_INT 1
4368: PPUSH
4369: LD_INT 50
4371: PPUSH
4372: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4376: LD_INT 47
4378: PPUSH
4379: LD_INT 3
4381: PPUSH
4382: LD_INT 50
4384: PPUSH
4385: CALL_OW 291
// SaveForQuickRestart ;
4389: CALL_OW 22
// end ;
4393: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4394: LD_EXP 1
4398: PPUSH
4399: LD_EXP 11
4403: PPUSH
4404: CALL_OW 296
4408: PUSH
4409: LD_INT 15
4411: LESS
4412: IFFALSE 4895
4414: GO 4416
4416: DISABLE
// begin wait ( 0 0$3 ) ;
4417: LD_INT 105
4419: PPUSH
4420: CALL_OW 67
// InGameOn ;
4424: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4428: LD_EXP 1
4432: PPUSH
4433: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4437: LD_EXP 1
4441: PPUSH
4442: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4446: LD_EXP 1
4450: PPUSH
4451: LD_EXP 11
4455: PPUSH
4456: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4460: LD_INT 35
4462: PPUSH
4463: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4467: LD_EXP 11
4471: PUSH
4472: LD_EXP 13
4476: PUSH
4477: LD_EXP 12
4481: PUSH
4482: LD_EXP 14
4486: PUSH
4487: LD_EXP 8
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: PPUSH
4499: LD_EXP 1
4503: PPUSH
4504: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4508: LD_EXP 1
4512: PPUSH
4513: LD_EXP 11
4517: PPUSH
4518: CALL_OW 296
4522: PUSH
4523: LD_INT 5
4525: LESS
4526: IFFALSE 4460
// ComTurnUnit ( JMM , Simms ) ;
4528: LD_EXP 1
4532: PPUSH
4533: LD_EXP 11
4537: PPUSH
4538: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4542: LD_EXP 11
4546: PUSH
4547: LD_EXP 13
4551: PUSH
4552: LD_EXP 12
4556: PUSH
4557: LD_EXP 14
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: PPUSH
4568: LD_EXP 1
4572: PPUSH
4573: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4577: LD_EXP 1
4581: PUSH
4582: LD_EXP 11
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PPUSH
4591: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4595: LD_EXP 11
4599: PPUSH
4600: LD_STRING D2a-Sim-1
4602: PPUSH
4603: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4607: LD_EXP 1
4611: PPUSH
4612: LD_STRING D2a-JMM-1
4614: PPUSH
4615: CALL_OW 88
// if IsOk ( Joan ) then
4619: LD_EXP 13
4623: PPUSH
4624: CALL_OW 302
4628: IFFALSE 4680
// begin ComTurnUnit ( JMM , Joan ) ;
4630: LD_EXP 1
4634: PPUSH
4635: LD_EXP 13
4639: PPUSH
4640: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4644: LD_EXP 13
4648: PPUSH
4649: LD_STRING D2b-Joan-1
4651: PPUSH
4652: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4656: LD_EXP 1
4660: PPUSH
4661: LD_STRING D2b-JMM-1
4663: PPUSH
4664: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4668: LD_EXP 13
4672: PPUSH
4673: LD_STRING D2b-Joan-2
4675: PPUSH
4676: CALL_OW 88
// end ; if IsOk ( Denis ) then
4680: LD_EXP 12
4684: PPUSH
4685: CALL_OW 302
4689: IFFALSE 4717
// begin ComTurnUnit ( JMM , Denis ) ;
4691: LD_EXP 1
4695: PPUSH
4696: LD_EXP 12
4700: PPUSH
4701: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4705: LD_EXP 12
4709: PPUSH
4710: LD_STRING D2c-Den-1
4712: PPUSH
4713: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
4717: LD_EXP 8
4721: PPUSH
4722: CALL_OW 302
4726: PUSH
4727: LD_STRING 08_Kikuchi
4729: PPUSH
4730: CALL_OW 28
4734: NOT
4735: AND
4736: IFFALSE 4805
// begin repeat wait ( 0 0$1 ) ;
4738: LD_INT 35
4740: PPUSH
4741: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4745: LD_EXP 8
4749: PPUSH
4750: LD_EXP 1
4754: PPUSH
4755: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4759: LD_EXP 1
4763: PPUSH
4764: LD_EXP 8
4768: PPUSH
4769: CALL_OW 296
4773: PUSH
4774: LD_INT 5
4776: LESS
4777: IFFALSE 4738
// ComTurnUnit ( JMM , Kikuchi ) ;
4779: LD_EXP 1
4783: PPUSH
4784: LD_EXP 8
4788: PPUSH
4789: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4793: LD_EXP 8
4797: PPUSH
4798: LD_STRING D3b-Yam-1
4800: PPUSH
4801: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4805: LD_EXP 14
4809: PPUSH
4810: CALL_OW 302
4814: IFFALSE 4854
// begin ComTurnUnit ( JMM , Khatam ) ;
4816: LD_EXP 1
4820: PPUSH
4821: LD_EXP 14
4825: PPUSH
4826: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4830: LD_EXP 1
4834: PPUSH
4835: LD_STRING D2c-JMM-1
4837: PPUSH
4838: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4842: LD_EXP 14
4846: PPUSH
4847: LD_STRING D2c-Khat-1
4849: PPUSH
4850: CALL_OW 88
// end ; InGameOff ;
4854: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4858: LD_INT 22
4860: PUSH
4861: LD_INT 4
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PPUSH
4868: CALL_OW 69
4872: PPUSH
4873: LD_INT 1
4875: PPUSH
4876: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4880: LD_STRING M1a
4882: PPUSH
4883: CALL_OW 337
// joinEpsilon = 1 ;
4887: LD_ADDR_EXP 29
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// end ;
4895: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
4896: LD_INT 38
4898: PPUSH
4899: LD_INT 1
4901: PPUSH
4902: CALL_OW 289
4906: PUSH
4907: LD_INT 0
4909: EQUAL
4910: PUSH
4911: LD_INT 47
4913: PPUSH
4914: LD_INT 1
4916: PPUSH
4917: CALL_OW 289
4921: PUSH
4922: LD_INT 0
4924: EQUAL
4925: AND
4926: PUSH
4927: LD_INT 47
4929: PPUSH
4930: LD_INT 2
4932: PPUSH
4933: CALL_OW 289
4937: PUSH
4938: LD_INT 0
4940: EQUAL
4941: AND
4942: IFFALSE 4967
4944: GO 4946
4946: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
4947: LD_INT 38
4949: PUSH
4950: LD_INT 47
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PPUSH
4957: LD_INT 62
4959: PPUSH
4960: LD_INT 6
4962: PPUSH
4963: CALL_OW 111
4967: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
4968: LD_EXP 62
4972: PUSH
4973: LD_INT 1
4975: EQUAL
4976: IFFALSE 6108
4978: GO 4980
4980: DISABLE
4981: LD_INT 0
4983: PPUSH
4984: PPUSH
4985: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
4986: LD_ADDR_VAR 0 1
4990: PUSH
4991: LD_INT 22
4993: PUSH
4994: LD_INT 1
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 25
5003: PUSH
5004: LD_INT 4
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: LD_INT 26
5013: PUSH
5014: LD_INT 1
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 69
5030: PUSH
5031: LD_EXP 1
5035: PUSH
5036: LD_EXP 2
5040: PUSH
5041: LD_EXP 3
5045: PUSH
5046: LD_EXP 4
5050: PUSH
5051: LD_EXP 5
5055: PUSH
5056: LD_EXP 6
5060: PUSH
5061: LD_EXP 7
5065: PUSH
5066: LD_EXP 8
5070: PUSH
5071: LD_EXP 9
5075: PUSH
5076: LD_EXP 10
5080: PUSH
5081: LD_EXP 11
5085: PUSH
5086: LD_EXP 12
5090: PUSH
5091: LD_EXP 13
5095: PUSH
5096: LD_EXP 14
5100: PUSH
5101: LD_EXP 15
5105: PUSH
5106: LD_EXP 16
5110: PUSH
5111: LD_EXP 17
5115: PUSH
5116: LD_EXP 18
5120: PUSH
5121: LD_EXP 19
5125: PUSH
5126: LD_EXP 24
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: DIFF
5153: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5154: LD_ADDR_VAR 0 2
5158: PUSH
5159: LD_INT 22
5161: PUSH
5162: LD_INT 1
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 26
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 2
5181: PUSH
5182: LD_INT 25
5184: PUSH
5185: LD_INT 1
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 25
5194: PUSH
5195: LD_INT 2
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PUSH
5202: LD_INT 25
5204: PUSH
5205: LD_INT 3
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: PPUSH
5223: CALL_OW 69
5227: PUSH
5228: LD_EXP 1
5232: PUSH
5233: LD_EXP 2
5237: PUSH
5238: LD_EXP 3
5242: PUSH
5243: LD_EXP 4
5247: PUSH
5248: LD_EXP 5
5252: PUSH
5253: LD_EXP 6
5257: PUSH
5258: LD_EXP 7
5262: PUSH
5263: LD_EXP 8
5267: PUSH
5268: LD_EXP 9
5272: PUSH
5273: LD_EXP 10
5277: PUSH
5278: LD_EXP 11
5282: PUSH
5283: LD_EXP 12
5287: PUSH
5288: LD_EXP 13
5292: PUSH
5293: LD_EXP 14
5297: PUSH
5298: LD_EXP 15
5302: PUSH
5303: LD_EXP 16
5307: PUSH
5308: LD_EXP 17
5312: PUSH
5313: LD_EXP 18
5317: PUSH
5318: LD_EXP 19
5322: PUSH
5323: LD_EXP 24
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: DIFF
5350: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5351: LD_EXP 10
5355: PUSH
5356: LD_VAR 0 2
5360: OR
5361: PUSH
5362: LD_EXP 17
5366: PUSH
5367: LD_VAR 0 1
5371: OR
5372: AND
5373: IFFALSE 5592
// begin DialogueOn ;
5375: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5379: LD_EXP 17
5383: PPUSH
5384: CALL_OW 302
5388: IFFALSE 5404
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5390: LD_EXP 17
5394: PPUSH
5395: LD_STRING D3-Sci1-1
5397: PPUSH
5398: CALL_OW 88
5402: GO 5416
// Say ( tmp1 , D3-Sci1-1 ) ;
5404: LD_VAR 0 1
5408: PPUSH
5409: LD_STRING D3-Sci1-1
5411: PPUSH
5412: CALL_OW 88
// if IsOk ( Gary ) then
5416: LD_EXP 10
5420: PPUSH
5421: CALL_OW 302
5425: IFFALSE 5441
// Say ( Gary , D3-Gary-1 ) else
5427: LD_EXP 10
5431: PPUSH
5432: LD_STRING D3-Gary-1
5434: PPUSH
5435: CALL_OW 88
5439: GO 5453
// Say ( tmp2 , D3-Gary-1 ) ;
5441: LD_VAR 0 2
5445: PPUSH
5446: LD_STRING D3-Gary-1
5448: PPUSH
5449: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5453: LD_EXP 17
5457: PPUSH
5458: CALL_OW 302
5462: IFFALSE 5478
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5464: LD_EXP 17
5468: PPUSH
5469: LD_STRING D3-Sci1-2
5471: PPUSH
5472: CALL_OW 88
5476: GO 5490
// Say ( tmp1 , D3-Sci1-2 ) ;
5478: LD_VAR 0 1
5482: PPUSH
5483: LD_STRING D3-Sci1-2
5485: PPUSH
5486: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5490: LD_EXP 1
5494: PPUSH
5495: LD_STRING D3-JMM-2
5497: PPUSH
5498: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5502: LD_EXP 17
5506: PPUSH
5507: CALL_OW 302
5511: IFFALSE 5527
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5513: LD_EXP 17
5517: PPUSH
5518: LD_STRING D3-Sci1-3
5520: PPUSH
5521: CALL_OW 88
5525: GO 5539
// Say ( tmp1 , D3-Sci1-3 ) ;
5527: LD_VAR 0 1
5531: PPUSH
5532: LD_STRING D3-Sci1-3
5534: PPUSH
5535: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5539: LD_EXP 1
5543: PPUSH
5544: LD_STRING D3-JMM-3
5546: PPUSH
5547: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5551: LD_EXP 17
5555: PPUSH
5556: CALL_OW 302
5560: IFFALSE 5576
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5562: LD_EXP 17
5566: PPUSH
5567: LD_STRING D3-Sci1-4
5569: PPUSH
5570: CALL_OW 88
5574: GO 5588
// Say ( tmp1 , D3-Sci1-4 ) ;
5576: LD_VAR 0 1
5580: PPUSH
5581: LD_STRING D3-Sci1-4
5583: PPUSH
5584: CALL_OW 88
// DialogueOff ;
5588: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5592: LD_INT 12
5594: PPUSH
5595: LD_INT 1
5597: PPUSH
5598: LD_INT 1
5600: PPUSH
5601: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5605: LD_INT 32
5607: PPUSH
5608: LD_INT 1
5610: PPUSH
5611: LD_INT 1
5613: PPUSH
5614: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5618: LD_INT 12
5620: PPUSH
5621: LD_INT 1
5623: PPUSH
5624: LD_INT 1
5626: PPUSH
5627: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5631: LD_INT 33
5633: PPUSH
5634: LD_INT 1
5636: PPUSH
5637: LD_INT 1
5639: PPUSH
5640: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5644: LD_STRING M2
5646: PPUSH
5647: CALL_OW 337
// wait ( 3 3$0 ) ;
5651: LD_INT 6300
5653: PPUSH
5654: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5658: LD_INT 35
5660: PPUSH
5661: CALL_OW 67
// until not InBattle ( 1 ) ;
5665: LD_INT 1
5667: PPUSH
5668: CALL_OW 463
5672: NOT
5673: IFFALSE 5658
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5675: LD_EXP 11
5679: PPUSH
5680: CALL_OW 302
5684: PUSH
5685: LD_EXP 17
5689: PPUSH
5690: CALL_OW 302
5694: AND
5695: IFFALSE 5864
// begin DialogueOn ;
5697: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5701: LD_EXP 11
5705: PPUSH
5706: LD_STRING D3a-Sim-1
5708: PPUSH
5709: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5713: LD_EXP 17
5717: PPUSH
5718: LD_STRING D3a-Sci1-1
5720: PPUSH
5721: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5725: LD_EXP 11
5729: PPUSH
5730: LD_STRING D3a-Sim-2
5732: PPUSH
5733: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5737: LD_EXP 17
5741: PPUSH
5742: LD_STRING D3a-Sci1-2
5744: PPUSH
5745: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5749: LD_EXP 11
5753: PPUSH
5754: LD_STRING D3a-Sim-3
5756: PPUSH
5757: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5761: LD_EXP 17
5765: PPUSH
5766: LD_STRING D3a-Sci1-3
5768: PPUSH
5769: CALL_OW 88
// if IsOK ( Joan ) then
5773: LD_EXP 13
5777: PPUSH
5778: CALL_OW 302
5782: IFFALSE 5798
// Say ( Simms , D3a-Sim-4 ) else
5784: LD_EXP 11
5788: PPUSH
5789: LD_STRING D3a-Sim-4
5791: PPUSH
5792: CALL_OW 88
5796: GO 5810
// Say ( Simms , D3a-Sim-4a ) ;
5798: LD_EXP 11
5802: PPUSH
5803: LD_STRING D3a-Sim-4a
5805: PPUSH
5806: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5810: LD_EXP 17
5814: PPUSH
5815: LD_STRING D3a-Sci1-4
5817: PPUSH
5818: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5822: LD_EXP 11
5826: PPUSH
5827: LD_STRING D3a-Sim-5
5829: PPUSH
5830: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5834: LD_EXP 17
5838: PPUSH
5839: LD_STRING D3a-Sci1-5
5841: PPUSH
5842: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5846: LD_EXP 11
5850: PPUSH
5851: LD_STRING D3a-Sim-6
5853: PPUSH
5854: CALL_OW 88
// DialogueOff ;
5858: CALL_OW 7
// end else
5862: GO 6108
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5864: LD_ADDR_VAR 0 3
5868: PUSH
5869: LD_INT 22
5871: PUSH
5872: LD_INT 1
5874: PUSH
5875: EMPTY
5876: LIST
5877: LIST
5878: PUSH
5879: LD_INT 25
5881: PUSH
5882: LD_INT 4
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PPUSH
5893: CALL_OW 69
5897: PUSH
5898: LD_EXP 11
5902: PUSH
5903: LD_EXP 14
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: DIFF
5912: ST_TO_ADDR
// if tmp3 > 0 then
5913: LD_VAR 0 3
5917: PUSH
5918: LD_INT 0
5920: GREATER
5921: IFFALSE 6108
// begin DialogueOn ;
5923: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5927: LD_EXP 11
5931: PPUSH
5932: LD_STRING D3a-Sim-1
5934: PPUSH
5935: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
5939: LD_VAR 0 3
5943: PUSH
5944: LD_INT 1
5946: ARRAY
5947: PPUSH
5948: LD_STRING D3a-Sci1-1
5950: PPUSH
5951: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5955: LD_EXP 11
5959: PPUSH
5960: LD_STRING D3a-Sim-2
5962: PPUSH
5963: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
5967: LD_VAR 0 3
5971: PUSH
5972: LD_INT 1
5974: ARRAY
5975: PPUSH
5976: LD_STRING D3a-Sci1-2
5978: PPUSH
5979: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5983: LD_EXP 11
5987: PPUSH
5988: LD_STRING D3a-Sim-3
5990: PPUSH
5991: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
5995: LD_VAR 0 3
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: PPUSH
6004: LD_STRING D3a-Sci1-3
6006: PPUSH
6007: CALL_OW 88
// if IsOK ( Joan ) then
6011: LD_EXP 13
6015: PPUSH
6016: CALL_OW 302
6020: IFFALSE 6036
// Say ( Simms , D3a-Sim-4 ) else
6022: LD_EXP 11
6026: PPUSH
6027: LD_STRING D3a-Sim-4
6029: PPUSH
6030: CALL_OW 88
6034: GO 6048
// Say ( Simms , D3a-Sim-4a ) ;
6036: LD_EXP 11
6040: PPUSH
6041: LD_STRING D3a-Sim-4a
6043: PPUSH
6044: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6048: LD_VAR 0 3
6052: PUSH
6053: LD_INT 1
6055: ARRAY
6056: PPUSH
6057: LD_STRING D3a-Sci1-4
6059: PPUSH
6060: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6064: LD_EXP 11
6068: PPUSH
6069: LD_STRING D3a-Sim-5
6071: PPUSH
6072: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6076: LD_VAR 0 3
6080: PUSH
6081: LD_INT 1
6083: ARRAY
6084: PPUSH
6085: LD_STRING D3a-Sci1-5
6087: PPUSH
6088: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6092: LD_EXP 11
6096: PPUSH
6097: LD_STRING D3a-Sim-6
6099: PPUSH
6100: CALL_OW 88
// DialogueOff ;
6104: CALL_OW 7
// end ; end ; end ;
6108: PPOPN 3
6110: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6111: LD_EXP 29
6115: PUSH
6116: LD_INT 1
6118: EQUAL
6119: IFFALSE 6439
6121: GO 6123
6123: DISABLE
6124: LD_INT 0
6126: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6127: LD_EXP 18
6131: PPUSH
6132: LD_STRING D4-FSol1-1
6134: PPUSH
6135: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6139: LD_STRING M3
6141: PPUSH
6142: CALL_OW 337
// PrepareRussians ;
6146: CALL 2744 0 0
// rnd = Rand ( 1 , 100 ) ;
6150: LD_ADDR_VAR 0 1
6154: PUSH
6155: LD_INT 1
6157: PPUSH
6158: LD_INT 100
6160: PPUSH
6161: CALL_OW 12
6165: ST_TO_ADDR
// if difficulty = 1 then
6166: LD_OWVAR 67
6170: PUSH
6171: LD_INT 1
6173: EQUAL
6174: IFFALSE 6257
// begin if rnd > 0 and rnd < 51 then
6176: LD_VAR 0 1
6180: PUSH
6181: LD_INT 0
6183: GREATER
6184: PUSH
6185: LD_VAR 0 1
6189: PUSH
6190: LD_INT 51
6192: LESS
6193: AND
6194: IFFALSE 6203
// BuildRussianBase ( 2 ) ;
6196: LD_INT 2
6198: PPUSH
6199: CALL 10331 0 1
// if rnd > 50 and rnd < 81 then
6203: LD_VAR 0 1
6207: PUSH
6208: LD_INT 50
6210: GREATER
6211: PUSH
6212: LD_VAR 0 1
6216: PUSH
6217: LD_INT 81
6219: LESS
6220: AND
6221: IFFALSE 6230
// BuildRussianBase ( 1 ) ;
6223: LD_INT 1
6225: PPUSH
6226: CALL 10331 0 1
// if rnd > 80 and rnd < 101 then
6230: LD_VAR 0 1
6234: PUSH
6235: LD_INT 80
6237: GREATER
6238: PUSH
6239: LD_VAR 0 1
6243: PUSH
6244: LD_INT 101
6246: LESS
6247: AND
6248: IFFALSE 6257
// BuildRussianBase ( 3 ) ;
6250: LD_INT 3
6252: PPUSH
6253: CALL 10331 0 1
// end ; if difficulty = 2 then
6257: LD_OWVAR 67
6261: PUSH
6262: LD_INT 2
6264: EQUAL
6265: IFFALSE 6348
// begin if rnd > 0 and rnd < 61 then
6267: LD_VAR 0 1
6271: PUSH
6272: LD_INT 0
6274: GREATER
6275: PUSH
6276: LD_VAR 0 1
6280: PUSH
6281: LD_INT 61
6283: LESS
6284: AND
6285: IFFALSE 6294
// BuildRussianBase ( 2 ) ;
6287: LD_INT 2
6289: PPUSH
6290: CALL 10331 0 1
// if rnd > 60 and rnd < 81 then
6294: LD_VAR 0 1
6298: PUSH
6299: LD_INT 60
6301: GREATER
6302: PUSH
6303: LD_VAR 0 1
6307: PUSH
6308: LD_INT 81
6310: LESS
6311: AND
6312: IFFALSE 6321
// BuildRussianBase ( 1 ) ;
6314: LD_INT 1
6316: PPUSH
6317: CALL 10331 0 1
// if rnd > 80 and rnd < 101 then
6321: LD_VAR 0 1
6325: PUSH
6326: LD_INT 80
6328: GREATER
6329: PUSH
6330: LD_VAR 0 1
6334: PUSH
6335: LD_INT 101
6337: LESS
6338: AND
6339: IFFALSE 6348
// BuildRussianBase ( 3 ) ;
6341: LD_INT 3
6343: PPUSH
6344: CALL 10331 0 1
// end ; if difficulty = 3 then
6348: LD_OWVAR 67
6352: PUSH
6353: LD_INT 3
6355: EQUAL
6356: IFFALSE 6439
// begin if rnd > 0 and rnd < 71 then
6358: LD_VAR 0 1
6362: PUSH
6363: LD_INT 0
6365: GREATER
6366: PUSH
6367: LD_VAR 0 1
6371: PUSH
6372: LD_INT 71
6374: LESS
6375: AND
6376: IFFALSE 6385
// BuildRussianBase ( 3 ) ;
6378: LD_INT 3
6380: PPUSH
6381: CALL 10331 0 1
// if rnd > 70 and rnd < 81 then
6385: LD_VAR 0 1
6389: PUSH
6390: LD_INT 70
6392: GREATER
6393: PUSH
6394: LD_VAR 0 1
6398: PUSH
6399: LD_INT 81
6401: LESS
6402: AND
6403: IFFALSE 6412
// BuildRussianBase ( 2 ) ;
6405: LD_INT 2
6407: PPUSH
6408: CALL 10331 0 1
// if rnd > 80 and rnd < 101 then
6412: LD_VAR 0 1
6416: PUSH
6417: LD_INT 80
6419: GREATER
6420: PUSH
6421: LD_VAR 0 1
6425: PUSH
6426: LD_INT 101
6428: LESS
6429: AND
6430: IFFALSE 6439
// BuildRussianBase ( 1 ) ;
6432: LD_INT 1
6434: PPUSH
6435: CALL 10331 0 1
// end ; end ;
6439: PPOPN 1
6441: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6442: LD_INT 54
6444: PPUSH
6445: LD_INT 1
6447: PPUSH
6448: CALL_OW 321
6452: PUSH
6453: LD_INT 2
6455: EQUAL
6456: PUSH
6457: LD_INT 21
6459: PPUSH
6460: LD_INT 1
6462: PPUSH
6463: CALL_OW 321
6467: PUSH
6468: LD_INT 2
6470: EQUAL
6471: OR
6472: PUSH
6473: LD_INT 22
6475: PPUSH
6476: LD_INT 1
6478: PPUSH
6479: CALL_OW 321
6483: PUSH
6484: LD_INT 2
6486: EQUAL
6487: OR
6488: IFFALSE 6800
6490: GO 6492
6492: DISABLE
6493: LD_INT 0
6495: PPUSH
6496: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6497: LD_EXP 17
6501: PPUSH
6502: CALL_OW 302
6506: IFFALSE 6520
// tmp := DeltaDoctor else
6508: LD_ADDR_VAR 0 2
6512: PUSH
6513: LD_EXP 17
6517: ST_TO_ADDR
6518: GO 6530
// tmp := Denis ;
6520: LD_ADDR_VAR 0 2
6524: PUSH
6525: LD_EXP 12
6529: ST_TO_ADDR
// if tmp then
6530: LD_VAR 0 2
6534: IFFALSE 6628
// begin DialogueOn ;
6536: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6540: LD_EXP 1
6544: PPUSH
6545: LD_STRING D6-JMM-1
6547: PPUSH
6548: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6552: LD_VAR 0 2
6556: PPUSH
6557: LD_STRING D6-Sci1-1
6559: PPUSH
6560: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6564: LD_EXP 1
6568: PPUSH
6569: LD_STRING D6-JMM-2
6571: PPUSH
6572: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6576: LD_VAR 0 2
6580: PPUSH
6581: LD_STRING D6-Sci1-2
6583: PPUSH
6584: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6588: LD_EXP 1
6592: PPUSH
6593: LD_STRING D6-JMM-3
6595: PPUSH
6596: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6600: LD_VAR 0 2
6604: PPUSH
6605: LD_STRING D6-Sci1-3
6607: PPUSH
6608: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6612: LD_EXP 1
6616: PPUSH
6617: LD_STRING D6-JMM-4
6619: PPUSH
6620: CALL_OW 88
// DialogueOff ;
6624: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6628: LD_INT 1050
6630: PPUSH
6631: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
6635: LD_EXP 49
6639: PUSH
6640: LD_INT 0
6642: EQUAL
6643: PUSH
6644: LD_EXP 14
6648: PPUSH
6649: CALL_OW 302
6653: AND
6654: IFFALSE 6712
// begin DialogueOn ;
6656: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6660: LD_EXP 27
6664: PPUSH
6665: LD_STRING D5-Ar1-1
6667: PPUSH
6668: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6672: LD_EXP 26
6676: PPUSH
6677: LD_STRING D5-Diet-1
6679: PPUSH
6680: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6684: LD_EXP 27
6688: PPUSH
6689: LD_STRING D5-Ar1-2
6691: PPUSH
6692: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6696: LD_EXP 26
6700: PPUSH
6701: LD_STRING D5-Diet-2
6703: PPUSH
6704: CALL_OW 88
// DialogueOff ;
6708: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6712: LD_INT 2100
6714: PUSH
6715: LD_INT 3150
6717: PUSH
6718: LD_INT 4200
6720: PUSH
6721: LD_INT 5250
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: PUSH
6730: LD_INT 1
6732: PPUSH
6733: LD_INT 4
6735: PPUSH
6736: CALL_OW 12
6740: ARRAY
6741: PPUSH
6742: CALL_OW 67
// if arabianTrait = 0 then
6746: LD_EXP 49
6750: PUSH
6751: LD_INT 0
6753: EQUAL
6754: IFFALSE 6800
// begin arabianTrait = 1 ;
6756: LD_ADDR_EXP 49
6760: PUSH
6761: LD_INT 1
6763: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6764: LD_INT 2
6766: PPUSH
6767: LD_INT 3
6769: PPUSH
6770: LD_INT 1
6772: PPUSH
6773: LD_INT 1
6775: PPUSH
6776: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6780: LD_INT 2
6782: PPUSH
6783: LD_INT 6
6785: PPUSH
6786: LD_INT 1
6788: PPUSH
6789: LD_INT 1
6791: PPUSH
6792: CALL_OW 80
// PrepareArabianTrait ;
6796: CALL 6803 0 0
// end ; end ;
6800: PPOPN 2
6802: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian ; begin
6803: LD_INT 0
6805: PPUSH
6806: PPUSH
6807: PPUSH
6808: PPUSH
6809: PPUSH
6810: PPUSH
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) ) ;
6811: LD_INT 22
6813: PUSH
6814: LD_INT 2
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: PUSH
6821: LD_INT 25
6823: PUSH
6824: LD_INT 4
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PPUSH
6835: CALL_OW 69
6839: PPUSH
6840: CALL_OW 122
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) ) ;
6844: LD_INT 22
6846: PUSH
6847: LD_INT 2
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 25
6856: PUSH
6857: LD_INT 3
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PPUSH
6868: CALL_OW 69
6872: PPUSH
6873: CALL_OW 121
// SetClass ( Dietrich , 8 ) ;
6877: LD_EXP 26
6881: PPUSH
6882: LD_INT 8
6884: PPUSH
6885: CALL_OW 336
// wait ( 0 0$3 ) ;
6889: LD_INT 105
6891: PPUSH
6892: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6896: LD_INT 76
6898: PPUSH
6899: LD_INT 19
6901: PPUSH
6902: CALL_OW 84
// DialogueOn ;
6906: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6910: LD_INT 22
6912: PUSH
6913: LD_INT 1
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 26
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 2
6932: PUSH
6933: LD_INT 25
6935: PUSH
6936: LD_INT 1
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 25
6945: PUSH
6946: LD_INT 2
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 25
6955: PUSH
6956: LD_INT 3
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 25
6965: PUSH
6966: LD_INT 4
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 25
6975: PUSH
6976: LD_INT 5
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: LIST
6995: PPUSH
6996: CALL_OW 69
7000: PPUSH
7001: LD_STRING D8-Sol1-1
7003: PPUSH
7004: LD_STRING D8-Sol1-1
7006: PPUSH
7007: CALL 9673 0 3
// if IsOK ( DeltaDoctor ) then
7011: LD_EXP 17
7015: PPUSH
7016: CALL_OW 302
7020: IFFALSE 7036
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7022: LD_EXP 17
7026: PPUSH
7027: LD_STRING D8-Sci1-1
7029: PPUSH
7030: CALL_OW 88
7034: GO 7137
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7036: LD_INT 22
7038: PUSH
7039: LD_INT 1
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 26
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 2
7058: PUSH
7059: LD_INT 25
7061: PUSH
7062: LD_INT 1
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 25
7071: PUSH
7072: LD_INT 2
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 25
7081: PUSH
7082: LD_INT 3
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: LD_INT 25
7091: PUSH
7092: LD_INT 4
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PUSH
7099: LD_INT 25
7101: PUSH
7102: LD_INT 5
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: LIST
7121: PPUSH
7122: CALL_OW 69
7126: PPUSH
7127: LD_STRING D8-Sol1-1
7129: PPUSH
7130: LD_STRING D8-Sol1-1
7132: PPUSH
7133: CALL 9673 0 3
// Say ( JMM , D8-JMM-1 ) ;
7137: LD_EXP 1
7141: PPUSH
7142: LD_STRING D8-JMM-1
7144: PPUSH
7145: CALL_OW 88
// DialogueOff ;
7149: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7153: LD_INT 2
7155: PPUSH
7156: LD_INT 2
7158: PPUSH
7159: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7163: LD_INT 1
7165: PPUSH
7166: LD_INT 2
7168: PPUSH
7169: LD_INT 2
7171: PPUSH
7172: LD_INT 1
7174: PPUSH
7175: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7179: LD_INT 3
7181: PPUSH
7182: LD_INT 2
7184: PPUSH
7185: LD_INT 1
7187: PPUSH
7188: LD_INT 1
7190: PPUSH
7191: CALL_OW 80
// SetClass ( Dietrich , 1 ) ;
7195: LD_EXP 26
7199: PPUSH
7200: LD_INT 1
7202: PPUSH
7203: CALL_OW 336
// ChangeMissionObjectives ( M4 ) ;
7207: LD_STRING M4
7209: PPUSH
7210: CALL_OW 337
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7214: LD_ADDR_VAR 0 5
7218: PUSH
7219: LD_INT 22
7221: PUSH
7222: LD_INT 2
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 21
7231: PUSH
7232: LD_INT 1
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 2
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 1
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 25
7254: PUSH
7255: LD_INT 8
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: LD_INT 25
7264: PUSH
7265: LD_INT 15
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: LIST
7282: PPUSH
7283: CALL_OW 69
7287: PUSH
7288: LD_EXP 26
7292: PUSH
7293: EMPTY
7294: LIST
7295: DIFF
7296: ST_TO_ADDR
// if IsLive ( Khatam ) then
7297: LD_EXP 14
7301: PPUSH
7302: CALL_OW 300
7306: IFFALSE 7320
// DoNotAttack ( 2 , Khatam ) ;
7308: LD_INT 2
7310: PPUSH
7311: LD_EXP 14
7315: PPUSH
7316: CALL_OW 471
// ComExitBuilding ( arSoldiers ) ;
7320: LD_VAR 0 5
7324: PPUSH
7325: CALL_OW 122
// wait ( 0 0$1 ) ;
7329: LD_INT 35
7331: PPUSH
7332: CALL_OW 67
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
7336: LD_VAR 0 5
7340: PPUSH
7341: LD_INT 84
7343: PPUSH
7344: LD_INT 22
7346: PPUSH
7347: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
7351: LD_VAR 0 5
7355: PPUSH
7356: LD_INT 82
7358: PPUSH
7359: LD_INT 5
7361: PPUSH
7362: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
7366: LD_VAR 0 5
7370: PPUSH
7371: LD_INT 95
7373: PPUSH
7374: LD_INT 12
7376: PPUSH
7377: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
7381: LD_VAR 0 5
7385: PPUSH
7386: LD_INT 102
7388: PPUSH
7389: LD_INT 11
7391: PPUSH
7392: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
7396: LD_VAR 0 5
7400: PPUSH
7401: LD_INT 116
7403: PPUSH
7404: LD_INT 15
7406: PPUSH
7407: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
7411: LD_VAR 0 5
7415: PPUSH
7416: LD_INT 140
7418: PPUSH
7419: LD_INT 25
7421: PPUSH
7422: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
7426: LD_VAR 0 5
7430: PPUSH
7431: LD_INT 160
7433: PPUSH
7434: LD_INT 56
7436: PPUSH
7437: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
7441: LD_VAR 0 5
7445: PPUSH
7446: LD_INT 189
7448: PPUSH
7449: LD_INT 79
7451: PPUSH
7452: CALL_OW 174
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
7456: LD_ADDR_VAR 0 6
7460: PUSH
7461: LD_INT 22
7463: PUSH
7464: LD_INT 2
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: LD_INT 21
7473: PUSH
7474: LD_INT 1
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 2
7483: PUSH
7484: LD_INT 25
7486: PUSH
7487: LD_INT 2
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PUSH
7494: LD_INT 25
7496: PUSH
7497: LD_INT 3
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PUSH
7504: LD_INT 25
7506: PUSH
7507: LD_INT 4
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: LD_INT 25
7516: PUSH
7517: LD_INT 12
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PUSH
7524: LD_INT 25
7526: PUSH
7527: LD_INT 16
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: LIST
7546: PPUSH
7547: CALL_OW 69
7551: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
7552: LD_ADDR_VAR 0 6
7556: PUSH
7557: LD_VAR 0 6
7561: PUSH
7562: LD_EXP 26
7566: ADD
7567: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7568: LD_INT 350
7570: PPUSH
7571: CALL_OW 67
// ComExitBuilding ( arCivilian ) ;
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 122
// wait ( 0 0$1 ) ;
7584: LD_INT 35
7586: PPUSH
7587: CALL_OW 67
// AddComMoveXY ( arCivilian , 81 , 5 ) ;
7591: LD_VAR 0 6
7595: PPUSH
7596: LD_INT 81
7598: PPUSH
7599: LD_INT 5
7601: PPUSH
7602: CALL_OW 171
// AddComMoveXY ( arCivilian , 82 , 5 ) ;
7606: LD_VAR 0 6
7610: PPUSH
7611: LD_INT 82
7613: PPUSH
7614: LD_INT 5
7616: PPUSH
7617: CALL_OW 171
// AddComMoveXY ( arCivilian , 95 , 12 ) ;
7621: LD_VAR 0 6
7625: PPUSH
7626: LD_INT 95
7628: PPUSH
7629: LD_INT 12
7631: PPUSH
7632: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 11 ) ;
7636: LD_VAR 0 6
7640: PPUSH
7641: LD_INT 102
7643: PPUSH
7644: LD_INT 11
7646: PPUSH
7647: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
7651: LD_VAR 0 6
7655: PPUSH
7656: LD_INT 116
7658: PPUSH
7659: LD_INT 15
7661: PPUSH
7662: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
7666: LD_VAR 0 6
7670: PPUSH
7671: LD_INT 140
7673: PPUSH
7674: LD_INT 25
7676: PPUSH
7677: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
7681: LD_VAR 0 6
7685: PPUSH
7686: LD_INT 160
7688: PPUSH
7689: LD_INT 56
7691: PPUSH
7692: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
7696: LD_VAR 0 6
7700: PPUSH
7701: LD_INT 189
7703: PPUSH
7704: LD_INT 79
7706: PPUSH
7707: CALL_OW 171
// arabianAttackersAI = 1 ;
7711: LD_ADDR_EXP 46
7715: PUSH
7716: LD_INT 1
7718: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7719: LD_INT 350
7721: PPUSH
7722: CALL_OW 67
// if IsOk ( Gary ) then
7726: LD_EXP 10
7730: PPUSH
7731: CALL_OW 302
7735: IFFALSE 7749
// Say ( Gary , D8a-Gary-1 ) ;
7737: LD_EXP 10
7741: PPUSH
7742: LD_STRING D8a-Gary-1
7744: PPUSH
7745: CALL_OW 88
// wait ( 0 0$5 ) ;
7749: LD_INT 175
7751: PPUSH
7752: CALL_OW 67
// if IsOK ( Khatam ) then
7756: LD_EXP 14
7760: PPUSH
7761: CALL_OW 302
7765: IFFALSE 8301
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7767: LD_ADDR_VAR 0 3
7771: PUSH
7772: LD_INT 22
7774: PUSH
7775: LD_INT 1
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: LD_INT 2
7784: PUSH
7785: LD_INT 25
7787: PUSH
7788: LD_INT 1
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: LD_INT 25
7797: PUSH
7798: LD_INT 2
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 25
7807: PUSH
7808: LD_INT 3
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 25
7817: PUSH
7818: LD_INT 4
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PUSH
7825: LD_INT 25
7827: PUSH
7828: LD_INT 5
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 25
7837: PUSH
7838: LD_INT 8
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: PUSH
7863: LD_EXP 1
7867: PUSH
7868: LD_EXP 2
7872: PUSH
7873: LD_EXP 3
7877: PUSH
7878: LD_EXP 4
7882: PUSH
7883: LD_EXP 5
7887: PUSH
7888: LD_EXP 6
7892: PUSH
7893: LD_EXP 7
7897: PUSH
7898: LD_EXP 8
7902: PUSH
7903: LD_EXP 9
7907: PUSH
7908: LD_EXP 10
7912: PUSH
7913: LD_EXP 11
7917: PUSH
7918: LD_EXP 12
7922: PUSH
7923: LD_EXP 13
7927: PUSH
7928: LD_EXP 14
7932: PUSH
7933: LD_EXP 15
7937: PUSH
7938: LD_EXP 16
7942: PUSH
7943: LD_EXP 17
7947: PUSH
7948: LD_EXP 19
7952: PUSH
7953: LD_EXP 24
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: DIFF
7979: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
7980: LD_EXP 14
7984: PPUSH
7985: LD_INT 8
7987: PPUSH
7988: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
7992: LD_EXP 14
7996: PPUSH
7997: CALL_OW 122
// wait ( 0 0$1 ) ;
8001: LD_INT 35
8003: PPUSH
8004: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
8008: LD_EXP 14
8012: PPUSH
8013: CALL_OW 121
// wait ( 0 0$1 ) ;
8017: LD_INT 35
8019: PPUSH
8020: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8024: LD_EXP 14
8028: PPUSH
8029: LD_INT 7
8031: PPUSH
8032: CALL_OW 113
// if not tmp then
8036: LD_VAR 0 3
8040: NOT
8041: IFFALSE 8045
// exit ;
8043: GO 8301
// DialogueOn ;
8045: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8049: LD_VAR 0 3
8053: PUSH
8054: LD_INT 1
8056: ARRAY
8057: PPUSH
8058: CALL_OW 258
8062: PUSH
8063: LD_INT 1
8065: EQUAL
8066: IFFALSE 8086
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8068: LD_VAR 0 3
8072: PUSH
8073: LD_INT 1
8075: ARRAY
8076: PPUSH
8077: LD_STRING D8b-Sol1-1
8079: PPUSH
8080: CALL_OW 88
8084: GO 8102
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8086: LD_VAR 0 3
8090: PUSH
8091: LD_INT 1
8093: ARRAY
8094: PPUSH
8095: LD_STRING D8b-FSol1-1
8097: PPUSH
8098: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8102: LD_EXP 14
8106: PPUSH
8107: LD_STRING D8b-Khat-1
8109: PPUSH
8110: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8114: LD_VAR 0 3
8118: PUSH
8119: LD_INT 1
8121: ARRAY
8122: PPUSH
8123: CALL_OW 258
8127: PUSH
8128: LD_INT 1
8130: EQUAL
8131: IFFALSE 8151
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8133: LD_VAR 0 3
8137: PUSH
8138: LD_INT 1
8140: ARRAY
8141: PPUSH
8142: LD_STRING D8b-Sol1-2
8144: PPUSH
8145: CALL_OW 88
8149: GO 8167
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8151: LD_VAR 0 3
8155: PUSH
8156: LD_INT 1
8158: ARRAY
8159: PPUSH
8160: LD_STRING D8b-FSol1-2
8162: PPUSH
8163: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8167: LD_EXP 14
8171: PPUSH
8172: LD_STRING D8b-Khat-2
8174: PPUSH
8175: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8179: LD_VAR 0 3
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: CALL_OW 258
8192: PUSH
8193: LD_INT 1
8195: EQUAL
8196: IFFALSE 8216
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8198: LD_VAR 0 3
8202: PUSH
8203: LD_INT 1
8205: ARRAY
8206: PPUSH
8207: LD_STRING D8b-Sol1-3
8209: PPUSH
8210: CALL_OW 88
8214: GO 8232
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8216: LD_VAR 0 3
8220: PUSH
8221: LD_INT 1
8223: ARRAY
8224: PPUSH
8225: LD_STRING D8b-FSol1-3
8227: PPUSH
8228: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8232: LD_EXP 14
8236: PPUSH
8237: LD_STRING D8b-Khat-3
8239: PPUSH
8240: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8244: LD_VAR 0 3
8248: PUSH
8249: LD_INT 1
8251: ARRAY
8252: PPUSH
8253: CALL_OW 258
8257: PUSH
8258: LD_INT 1
8260: EQUAL
8261: IFFALSE 8281
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8263: LD_VAR 0 3
8267: PUSH
8268: LD_INT 1
8270: ARRAY
8271: PPUSH
8272: LD_STRING D8b-Sol1-4
8274: PPUSH
8275: CALL_OW 88
8279: GO 8297
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8281: LD_VAR 0 3
8285: PUSH
8286: LD_INT 1
8288: ARRAY
8289: PPUSH
8290: LD_STRING D8b-FSol1-4
8292: PPUSH
8293: CALL_OW 88
// DialogueOff ;
8297: CALL_OW 7
// end ; end ;
8301: LD_VAR 0 1
8305: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
8306: LD_INT 7
8308: PPUSH
8309: LD_INT 22
8311: PUSH
8312: LD_INT 2
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: PPUSH
8319: CALL_OW 70
8323: PUSH
8324: LD_INT 0
8326: GREATER
8327: PUSH
8328: LD_EXP 14
8332: PPUSH
8333: LD_INT 7
8335: PPUSH
8336: CALL_OW 308
8340: OR
8341: IFFALSE 8548
8343: GO 8345
8345: DISABLE
8346: LD_INT 0
8348: PPUSH
// begin enable ;
8349: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8350: LD_ADDR_VAR 0 1
8354: PUSH
8355: LD_INT 7
8357: PPUSH
8358: LD_INT 22
8360: PUSH
8361: LD_INT 2
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PPUSH
8368: CALL_OW 70
8372: PUSH
8373: FOR_IN
8374: IFFALSE 8515
// begin if GetClass ( i ) = 4 then
8376: LD_VAR 0 1
8380: PPUSH
8381: CALL_OW 257
8385: PUSH
8386: LD_INT 4
8388: EQUAL
8389: IFFALSE 8401
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8391: LD_INT 1
8393: PPUSH
8394: LD_STRING 10_ScientistsEscape_1
8396: PPUSH
8397: CALL_OW 39
// if i = Dietrich then
8401: LD_VAR 0 1
8405: PUSH
8406: LD_EXP 26
8410: EQUAL
8411: IFFALSE 8421
// GensherStatus = 1 ;
8413: LD_ADDR_EXP 52
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
8421: LD_VAR 0 1
8425: PPUSH
8426: CALL_OW 257
8430: PUSH
8431: LD_INT 1
8433: EQUAL
8434: PUSH
8435: LD_VAR 0 1
8439: PPUSH
8440: CALL_OW 257
8444: PUSH
8445: LD_INT 2
8447: EQUAL
8448: OR
8449: PUSH
8450: LD_VAR 0 1
8454: PPUSH
8455: CALL_OW 257
8459: PUSH
8460: LD_INT 3
8462: EQUAL
8463: OR
8464: PUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL_OW 257
8474: PUSH
8475: LD_INT 4
8477: EQUAL
8478: OR
8479: PUSH
8480: LD_VAR 0 1
8484: PPUSH
8485: CALL_OW 257
8489: PUSH
8490: LD_INT 8
8492: EQUAL
8493: OR
8494: IFFALSE 8504
// arabianEscape = 1 ;
8496: LD_ADDR_EXP 47
8500: PUSH
8501: LD_INT 1
8503: ST_TO_ADDR
// RemoveUnit ( i ) ;
8504: LD_VAR 0 1
8508: PPUSH
8509: CALL_OW 64
// end ;
8513: GO 8373
8515: POP
8516: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8517: LD_EXP 14
8521: PPUSH
8522: LD_INT 7
8524: PPUSH
8525: CALL_OW 308
8529: IFFALSE 8548
// begin KhatamStatus = 1 ;
8531: LD_ADDR_EXP 53
8535: PUSH
8536: LD_INT 1
8538: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8539: LD_EXP 14
8543: PPUSH
8544: CALL_OW 64
// end ; end ;
8548: PPOPN 1
8550: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8551: LD_INT 22
8553: PUSH
8554: LD_INT 2
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 21
8563: PUSH
8564: LD_INT 1
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PPUSH
8575: CALL_OW 69
8579: PUSH
8580: LD_INT 0
8582: EQUAL
8583: PUSH
8584: LD_INT 22
8586: PUSH
8587: LD_INT 4
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: LD_INT 21
8596: PUSH
8597: LD_INT 1
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PPUSH
8608: CALL_OW 69
8612: PUSH
8613: LD_INT 0
8615: EQUAL
8616: AND
8617: IFFALSE 8630
8619: GO 8621
8621: DISABLE
// arabianDefeated = 1 ;
8622: LD_ADDR_EXP 48
8626: PUSH
8627: LD_INT 1
8629: ST_TO_ADDR
8630: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8631: LD_INT 54
8633: PPUSH
8634: LD_INT 1
8636: PPUSH
8637: CALL_OW 321
8641: PUSH
8642: LD_INT 2
8644: EQUAL
8645: PUSH
8646: LD_INT 55
8648: PPUSH
8649: LD_INT 1
8651: PPUSH
8652: CALL_OW 321
8656: PUSH
8657: LD_INT 2
8659: EQUAL
8660: AND
8661: PUSH
8662: LD_INT 21
8664: PPUSH
8665: LD_INT 1
8667: PPUSH
8668: CALL_OW 321
8672: PUSH
8673: LD_INT 2
8675: EQUAL
8676: AND
8677: PUSH
8678: LD_INT 22
8680: PPUSH
8681: LD_INT 1
8683: PPUSH
8684: CALL_OW 321
8688: PUSH
8689: LD_INT 2
8691: EQUAL
8692: AND
8693: PUSH
8694: LD_INT 12
8696: PPUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 321
8704: PUSH
8705: LD_INT 2
8707: EQUAL
8708: AND
8709: PUSH
8710: LD_INT 32
8712: PPUSH
8713: LD_INT 1
8715: PPUSH
8716: CALL_OW 321
8720: PUSH
8721: LD_INT 2
8723: EQUAL
8724: AND
8725: PUSH
8726: LD_EXP 60
8730: PUSH
8731: LD_INT 0
8733: EQUAL
8734: AND
8735: PUSH
8736: LD_EXP 49
8740: PUSH
8741: LD_INT 0
8743: EQUAL
8744: AND
8745: PUSH
8746: LD_OWVAR 1
8750: PUSH
8751: LD_INT 31500
8753: GREATEREQUAL
8754: AND
8755: IFFALSE 8772
8757: GO 8759
8759: DISABLE
// begin arabianTrait = 1 ;
8760: LD_ADDR_EXP 49
8764: PUSH
8765: LD_INT 1
8767: ST_TO_ADDR
// PrepareArabianTrait ;
8768: CALL 6803 0 0
// end ;
8772: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
8773: LD_EXP 29
8777: PUSH
8778: LD_STRING 02_mikhailStatus_1
8780: PPUSH
8781: LD_INT 0
8783: PPUSH
8784: CALL_OW 30
8788: PUSH
8789: LD_INT 1
8791: EQUAL
8792: AND
8793: PUSH
8794: LD_INT 22
8796: PUSH
8797: LD_INT 5
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PPUSH
8804: CALL_OW 69
8808: PUSH
8809: LD_INT 0
8811: EQUAL
8812: AND
8813: PUSH
8814: LD_INT 22
8816: PUSH
8817: LD_INT 2
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 21
8826: PUSH
8827: LD_INT 1
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PPUSH
8838: CALL_OW 69
8842: PUSH
8843: LD_INT 0
8845: EQUAL
8846: PUSH
8847: LD_EXP 49
8851: PUSH
8852: LD_INT 0
8854: EQUAL
8855: OR
8856: AND
8857: IFFALSE 8866
8859: GO 8861
8861: DISABLE
// PrepareCornell ;
8862: CALL 2577 0 0
8866: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8867: LD_INT 22
8869: PUSH
8870: LD_INT 1
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PPUSH
8877: CALL_OW 69
8881: PPUSH
8882: LD_EXP 19
8886: PPUSH
8887: CALL_OW 74
8891: PPUSH
8892: LD_EXP 19
8896: PPUSH
8897: CALL_OW 296
8901: PUSH
8902: LD_INT 9
8904: LESS
8905: IFFALSE 9126
8907: GO 8909
8909: DISABLE
// begin InGameOn ;
8910: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8914: LD_EXP 19
8918: PPUSH
8919: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8923: LD_EXP 19
8927: PPUSH
8928: LD_STRING D7-Corn-1
8930: PPUSH
8931: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8935: LD_INT 22
8937: PUSH
8938: LD_INT 1
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 2
8947: PUSH
8948: LD_INT 25
8950: PUSH
8951: LD_INT 1
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: LD_INT 25
8960: PUSH
8961: LD_INT 2
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: LD_INT 25
8970: PUSH
8971: LD_INT 3
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 25
8980: PUSH
8981: LD_INT 4
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 25
8990: PUSH
8991: LD_INT 5
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: PPUSH
9010: CALL_OW 69
9014: PPUSH
9015: LD_STRING D7-Sol1-1
9017: PPUSH
9018: LD_STRING D7-FSol1-1
9020: PPUSH
9021: CALL 9673 0 3
// CenterNowOnUnits ( Cornell ) ;
9025: LD_EXP 19
9029: PPUSH
9030: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
9034: LD_EXP 19
9038: PPUSH
9039: LD_STRING D7-Corn-2
9041: PPUSH
9042: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
9046: LD_EXP 1
9050: PPUSH
9051: LD_STRING D7-JMM-2
9053: PPUSH
9054: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
9058: LD_EXP 19
9062: PPUSH
9063: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9067: LD_EXP 19
9071: PPUSH
9072: LD_STRING D7-Corn-3
9074: PPUSH
9075: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9079: LD_EXP 19
9083: PPUSH
9084: LD_INT 250
9086: PPUSH
9087: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9091: LD_EXP 19
9095: PPUSH
9096: LD_INT 1
9098: PPUSH
9099: CALL_OW 235
// wait ( 0 0$1 ) ;
9103: LD_INT 35
9105: PPUSH
9106: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9110: LD_EXP 1
9114: PPUSH
9115: LD_STRING D7-JMM-3
9117: PPUSH
9118: CALL_OW 88
// InGameOff ;
9122: CALL_OW 9
// end ;
9126: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
9127: LD_EXP 19
9131: PPUSH
9132: CALL_OW 255
9136: PUSH
9137: LD_INT 1
9139: EQUAL
9140: PUSH
9141: LD_EXP 19
9145: PPUSH
9146: CALL_OW 256
9150: PUSH
9151: LD_INT 350
9153: GREATER
9154: AND
9155: IFFALSE 9348
9157: GO 9159
9159: DISABLE
// begin DialogueOn ;
9160: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9164: LD_EXP 1
9168: PPUSH
9169: LD_STRING D7a-JMM-1
9171: PPUSH
9172: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9176: LD_EXP 19
9180: PPUSH
9181: LD_STRING D7a-Corn-1
9183: PPUSH
9184: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9188: LD_EXP 1
9192: PPUSH
9193: LD_STRING D7a-JMM-2
9195: PPUSH
9196: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9200: LD_EXP 19
9204: PPUSH
9205: LD_STRING D7a-Corn-2
9207: PPUSH
9208: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9212: LD_EXP 1
9216: PPUSH
9217: LD_STRING D7a-JMM-3
9219: PPUSH
9220: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9224: LD_EXP 19
9228: PPUSH
9229: LD_STRING D7a-Corn-3
9231: PPUSH
9232: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9236: LD_EXP 1
9240: PPUSH
9241: LD_STRING D7a-JMM-4
9243: PPUSH
9244: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9248: LD_EXP 19
9252: PPUSH
9253: LD_STRING D7a-Corn-4
9255: PPUSH
9256: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9260: LD_EXP 1
9264: PPUSH
9265: LD_STRING D7a-JMM-5
9267: PPUSH
9268: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9272: LD_EXP 19
9276: PPUSH
9277: LD_STRING D7a-Corn-5
9279: PPUSH
9280: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9284: LD_EXP 1
9288: PPUSH
9289: LD_STRING D7a-JMM-6
9291: PPUSH
9292: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9296: LD_EXP 19
9300: PPUSH
9301: LD_STRING D7a-Corn-6
9303: PPUSH
9304: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9308: LD_EXP 1
9312: PPUSH
9313: LD_STRING D7a-JMM-7
9315: PPUSH
9316: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9320: LD_EXP 19
9324: PPUSH
9325: LD_STRING D7a-Corn-7
9327: PPUSH
9328: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9332: LD_EXP 1
9336: PPUSH
9337: LD_STRING D7a-JMM-8
9339: PPUSH
9340: CALL_OW 88
// DialogueOff ;
9344: CALL_OW 7
// end ;
9348: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9349: LD_EXP 59
9353: PUSH
9354: LD_EXP 1
9358: PPUSH
9359: CALL_OW 302
9363: PUSH
9364: LD_EXP 5
9368: PPUSH
9369: CALL_OW 302
9373: OR
9374: AND
9375: IFFALSE 9465
9377: GO 9379
9379: DISABLE
// begin Wait ( 0 0$2 ) ;
9380: LD_INT 70
9382: PPUSH
9383: CALL_OW 67
// DialogueOn ;
9387: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9391: LD_EXP 59
9395: PUSH
9396: LD_INT 1
9398: ARRAY
9399: PPUSH
9400: LD_EXP 59
9404: PUSH
9405: LD_INT 2
9407: ARRAY
9408: PPUSH
9409: CALL_OW 86
// if IsOk ( Cyrus ) then
9413: LD_EXP 5
9417: PPUSH
9418: CALL_OW 302
9422: IFFALSE 9438
// Say ( Cyrus , D10-Cyrus-1 ) else
9424: LD_EXP 5
9428: PPUSH
9429: LD_STRING D10-Cyrus-1
9431: PPUSH
9432: CALL_OW 88
9436: GO 9461
// if IsOk ( JMM ) then
9438: LD_EXP 1
9442: PPUSH
9443: CALL_OW 302
9447: IFFALSE 9461
// Say ( JMM , D10-JMM-1 ) ;
9449: LD_EXP 1
9453: PPUSH
9454: LD_STRING D10-JMM-1
9456: PPUSH
9457: CALL_OW 88
// DialogueOff ;
9461: CALL_OW 7
// end ;
9465: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9466: LD_INT 12
9468: PPUSH
9469: LD_INT 1
9471: PPUSH
9472: CALL_OW 321
9476: PUSH
9477: LD_INT 2
9479: EQUAL
9480: IFFALSE 9492
9482: GO 9484
9484: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9485: LD_STRING M2b
9487: PPUSH
9488: CALL_OW 337
9492: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9493: LD_INT 32
9495: PPUSH
9496: LD_INT 1
9498: PPUSH
9499: CALL_OW 321
9503: PUSH
9504: LD_INT 2
9506: EQUAL
9507: IFFALSE 9519
9509: GO 9511
9511: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9512: LD_STRING M2c
9514: PPUSH
9515: CALL_OW 337
9519: END
// every 0 0$1 trigger arabianDefeated = 1 do
9520: LD_EXP 48
9524: PUSH
9525: LD_INT 1
9527: EQUAL
9528: IFFALSE 9540
9530: GO 9532
9532: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9533: LD_STRING M4a
9535: PPUSH
9536: CALL_OW 337
9540: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9541: LD_INT 54
9543: PPUSH
9544: LD_INT 1
9546: PPUSH
9547: CALL_OW 321
9551: PUSH
9552: LD_INT 2
9554: EQUAL
9555: PUSH
9556: LD_INT 55
9558: PPUSH
9559: LD_INT 1
9561: PPUSH
9562: CALL_OW 321
9566: PUSH
9567: LD_INT 2
9569: EQUAL
9570: AND
9571: PUSH
9572: LD_INT 21
9574: PPUSH
9575: LD_INT 1
9577: PPUSH
9578: CALL_OW 321
9582: PUSH
9583: LD_INT 2
9585: EQUAL
9586: AND
9587: PUSH
9588: LD_INT 22
9590: PPUSH
9591: LD_INT 1
9593: PPUSH
9594: CALL_OW 321
9598: PUSH
9599: LD_INT 2
9601: EQUAL
9602: AND
9603: IFFALSE 9615
9605: GO 9607
9607: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9608: LD_STRING M2a
9610: PPUSH
9611: CALL_OW 337
9615: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9616: LD_INT 0
9618: PPUSH
9619: PPUSH
// if exist_mode then
9620: LD_VAR 0 2
9624: IFFALSE 9643
// unit := CreateCharacter ( ident ) else
9626: LD_ADDR_VAR 0 4
9630: PUSH
9631: LD_VAR 0 1
9635: PPUSH
9636: CALL_OW 34
9640: ST_TO_ADDR
9641: GO 9658
// unit := NewCharacter ( ident ) ;
9643: LD_ADDR_VAR 0 4
9647: PUSH
9648: LD_VAR 0 1
9652: PPUSH
9653: CALL_OW 25
9657: ST_TO_ADDR
// result := unit ;
9658: LD_ADDR_VAR 0 3
9662: PUSH
9663: LD_VAR 0 4
9667: ST_TO_ADDR
// end ;
9668: LD_VAR 0 3
9672: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9673: LD_INT 0
9675: PPUSH
9676: PPUSH
9677: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9678: LD_ADDR_VAR 0 1
9682: PUSH
9683: LD_VAR 0 1
9687: PUSH
9688: LD_EXP 1
9692: PUSH
9693: LD_EXP 2
9697: PUSH
9698: LD_EXP 3
9702: PUSH
9703: LD_EXP 4
9707: PUSH
9708: LD_EXP 5
9712: PUSH
9713: LD_EXP 6
9717: PUSH
9718: LD_EXP 7
9722: PUSH
9723: LD_EXP 8
9727: PUSH
9728: LD_EXP 9
9732: PUSH
9733: LD_EXP 10
9737: PUSH
9738: LD_EXP 11
9742: PUSH
9743: LD_EXP 12
9747: PUSH
9748: LD_EXP 13
9752: PUSH
9753: LD_EXP 14
9757: PUSH
9758: LD_EXP 15
9762: PUSH
9763: LD_EXP 16
9767: PUSH
9768: LD_EXP 17
9772: PUSH
9773: LD_EXP 18
9777: PUSH
9778: LD_EXP 19
9782: PUSH
9783: LD_EXP 24
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: DIFF
9810: ST_TO_ADDR
// if not characters then
9811: LD_VAR 0 1
9815: NOT
9816: IFFALSE 9820
// exit ;
9818: GO 9966
// rnd = rand ( 1 , characters ) ;
9820: LD_ADDR_VAR 0 6
9824: PUSH
9825: LD_INT 1
9827: PPUSH
9828: LD_VAR 0 1
9832: PPUSH
9833: CALL_OW 12
9837: ST_TO_ADDR
// for i = 1 to characters do
9838: LD_ADDR_VAR 0 5
9842: PUSH
9843: DOUBLE
9844: LD_INT 1
9846: DEC
9847: ST_TO_ADDR
9848: LD_VAR 0 1
9852: PUSH
9853: FOR_TO
9854: IFFALSE 9964
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9856: LD_VAR 0 5
9860: PUSH
9861: LD_VAR 0 6
9865: EQUAL
9866: PUSH
9867: LD_VAR 0 1
9871: PUSH
9872: LD_VAR 0 5
9876: ARRAY
9877: PPUSH
9878: CALL_OW 258
9882: PUSH
9883: LD_INT 1
9885: EQUAL
9886: AND
9887: IFFALSE 9909
// Say ( characters [ i ] , dialogMID ) ;
9889: LD_VAR 0 1
9893: PUSH
9894: LD_VAR 0 5
9898: ARRAY
9899: PPUSH
9900: LD_VAR 0 2
9904: PPUSH
9905: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9909: LD_VAR 0 5
9913: PUSH
9914: LD_VAR 0 6
9918: EQUAL
9919: PUSH
9920: LD_VAR 0 1
9924: PUSH
9925: LD_VAR 0 5
9929: ARRAY
9930: PPUSH
9931: CALL_OW 258
9935: PUSH
9936: LD_INT 2
9938: EQUAL
9939: AND
9940: IFFALSE 9962
// Say ( characters [ i ] , dialogFID ) ;
9942: LD_VAR 0 1
9946: PUSH
9947: LD_VAR 0 5
9951: ARRAY
9952: PPUSH
9953: LD_VAR 0 3
9957: PPUSH
9958: CALL_OW 88
// end ;
9962: GO 9853
9964: POP
9965: POP
// end ;
9966: LD_VAR 0 4
9970: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9971: LD_INT 0
9973: PPUSH
9974: PPUSH
// for i in charactersList do
9975: LD_ADDR_VAR 0 4
9979: PUSH
9980: LD_VAR 0 1
9984: PUSH
9985: FOR_IN
9986: IFFALSE 10004
// SaveCharacters ( i , ident ) ;
9988: LD_VAR 0 4
9992: PPUSH
9993: LD_VAR 0 2
9997: PPUSH
9998: CALL_OW 38
10002: GO 9985
10004: POP
10005: POP
// end ;
10006: LD_VAR 0 3
10010: RET
// export function PrepareDifficulty ; begin
10011: LD_INT 0
10013: PPUSH
// if difficulty = 1 then
10014: LD_OWVAR 67
10018: PUSH
10019: LD_INT 1
10021: EQUAL
10022: IFFALSE 10066
// begin RuSolMinLevel = 3 ;
10024: LD_ADDR_EXP 36
10028: PUSH
10029: LD_INT 3
10031: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
10032: LD_ADDR_EXP 37
10036: PUSH
10037: LD_INT 5
10039: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10040: LD_INT 51
10042: PPUSH
10043: LD_INT 6
10045: PPUSH
10046: LD_INT 2
10048: PPUSH
10049: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10053: LD_INT 51
10055: PPUSH
10056: LD_INT 5
10058: PPUSH
10059: LD_INT 2
10061: PPUSH
10062: CALL_OW 322
// end ; if difficulty = 2 then
10066: LD_OWVAR 67
10070: PUSH
10071: LD_INT 2
10073: EQUAL
10074: IFFALSE 10170
// begin RuSolMinLevel = 5 ;
10076: LD_ADDR_EXP 36
10080: PUSH
10081: LD_INT 5
10083: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10084: LD_ADDR_EXP 37
10088: PUSH
10089: LD_INT 7
10091: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10092: LD_INT 51
10094: PPUSH
10095: LD_INT 6
10097: PPUSH
10098: LD_INT 2
10100: PPUSH
10101: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10105: LD_INT 57
10107: PPUSH
10108: LD_INT 6
10110: PPUSH
10111: LD_INT 2
10113: PPUSH
10114: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10118: LD_INT 63
10120: PPUSH
10121: LD_INT 6
10123: PPUSH
10124: LD_INT 2
10126: PPUSH
10127: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10131: LD_INT 51
10133: PPUSH
10134: LD_INT 5
10136: PPUSH
10137: LD_INT 2
10139: PPUSH
10140: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10144: LD_INT 5
10146: PPUSH
10147: LD_INT 2
10149: PPUSH
10150: LD_INT 2
10152: PPUSH
10153: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10157: LD_INT 5
10159: PPUSH
10160: LD_INT 5
10162: PPUSH
10163: LD_INT 2
10165: PPUSH
10166: CALL_OW 322
// end ; if difficulty = 3 then
10170: LD_OWVAR 67
10174: PUSH
10175: LD_INT 3
10177: EQUAL
10178: IFFALSE 10326
// begin RuSolMinLevel = 6 ;
10180: LD_ADDR_EXP 36
10184: PUSH
10185: LD_INT 6
10187: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10188: LD_ADDR_EXP 37
10192: PUSH
10193: LD_INT 8
10195: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10196: LD_INT 51
10198: PPUSH
10199: LD_INT 6
10201: PPUSH
10202: LD_INT 2
10204: PPUSH
10205: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10209: LD_INT 57
10211: PPUSH
10212: LD_INT 6
10214: PPUSH
10215: LD_INT 2
10217: PPUSH
10218: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10222: LD_INT 52
10224: PPUSH
10225: LD_INT 6
10227: PPUSH
10228: LD_INT 2
10230: PPUSH
10231: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10235: LD_INT 58
10237: PPUSH
10238: LD_INT 6
10240: PPUSH
10241: LD_INT 2
10243: PPUSH
10244: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10248: LD_INT 63
10250: PPUSH
10251: LD_INT 6
10253: PPUSH
10254: LD_INT 2
10256: PPUSH
10257: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10261: LD_INT 64
10263: PPUSH
10264: LD_INT 6
10266: PPUSH
10267: LD_INT 2
10269: PPUSH
10270: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10274: LD_INT 51
10276: PPUSH
10277: LD_INT 5
10279: PPUSH
10280: LD_INT 2
10282: PPUSH
10283: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10287: LD_INT 52
10289: PPUSH
10290: LD_INT 5
10292: PPUSH
10293: LD_INT 2
10295: PPUSH
10296: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10300: LD_INT 66
10302: PPUSH
10303: LD_INT 2
10305: PPUSH
10306: LD_INT 2
10308: PPUSH
10309: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10313: LD_INT 66
10315: PPUSH
10316: LD_INT 5
10318: PPUSH
10319: LD_INT 2
10321: PPUSH
10322: CALL_OW 322
// end ; end ;
10326: LD_VAR 0 1
10330: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
10331: LD_INT 0
10333: PPUSH
10334: PPUSH
10335: PPUSH
10336: PPUSH
10337: PPUSH
10338: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
10339: LD_ADDR_VAR 0 7
10343: PUSH
10344: LD_INT 43
10346: PUSH
10347: LD_INT 68
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 43
10356: PUSH
10357: LD_INT 79
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 99
10366: PUSH
10367: LD_INT 114
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 103
10376: PUSH
10377: LD_INT 114
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 156
10386: PUSH
10387: LD_INT 92
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 152
10396: PUSH
10397: LD_INT 85
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: ST_TO_ADDR
// for i in sources do
10412: LD_ADDR_VAR 0 3
10416: PUSH
10417: LD_VAR 0 7
10421: PUSH
10422: FOR_IN
10423: IFFALSE 10452
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
10425: LD_VAR 0 3
10429: PUSH
10430: LD_INT 1
10432: ARRAY
10433: PPUSH
10434: LD_VAR 0 3
10438: PUSH
10439: LD_INT 2
10441: ARRAY
10442: PPUSH
10443: LD_INT 3
10445: PPUSH
10446: CALL_OW 441
10450: GO 10422
10452: POP
10453: POP
// case position of 1 :
10454: LD_VAR 0 1
10458: PUSH
10459: LD_INT 1
10461: DOUBLE
10462: EQUAL
10463: IFTRUE 10467
10465: GO 10478
10467: POP
// area := westConv ; 2 :
10468: LD_ADDR_VAR 0 6
10472: PUSH
10473: LD_INT 20
10475: ST_TO_ADDR
10476: GO 10517
10478: LD_INT 2
10480: DOUBLE
10481: EQUAL
10482: IFTRUE 10486
10484: GO 10497
10486: POP
// area := midConv ; 3 :
10487: LD_ADDR_VAR 0 6
10491: PUSH
10492: LD_INT 21
10494: ST_TO_ADDR
10495: GO 10517
10497: LD_INT 3
10499: DOUBLE
10500: EQUAL
10501: IFTRUE 10505
10503: GO 10516
10505: POP
// area := eastConv ; end ;
10506: LD_ADDR_VAR 0 6
10510: PUSH
10511: LD_INT 22
10513: ST_TO_ADDR
10514: GO 10517
10516: POP
// area := AreaToList ( area , 0 ) ;
10517: LD_ADDR_VAR 0 6
10521: PUSH
10522: LD_VAR 0 6
10526: PPUSH
10527: LD_INT 0
10529: PPUSH
10530: CALL_OW 517
10534: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10535: LD_ADDR_VAR 0 3
10539: PUSH
10540: DOUBLE
10541: LD_INT 1
10543: DEC
10544: ST_TO_ADDR
10545: LD_VAR 0 6
10549: PUSH
10550: LD_INT 1
10552: ARRAY
10553: PUSH
10554: FOR_TO
10555: IFFALSE 10636
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10557: LD_VAR 0 6
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PUSH
10566: LD_VAR 0 3
10570: ARRAY
10571: PPUSH
10572: LD_VAR 0 6
10576: PUSH
10577: LD_INT 2
10579: ARRAY
10580: PUSH
10581: LD_VAR 0 3
10585: ARRAY
10586: PPUSH
10587: LD_INT 1
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10597: LD_VAR 0 6
10601: PUSH
10602: LD_INT 1
10604: ARRAY
10605: PUSH
10606: LD_VAR 0 3
10610: ARRAY
10611: PPUSH
10612: LD_VAR 0 6
10616: PUSH
10617: LD_INT 2
10619: ARRAY
10620: PUSH
10621: LD_VAR 0 3
10625: ARRAY
10626: PPUSH
10627: LD_INT 1
10629: PPUSH
10630: CALL_OW 331
// end ;
10634: GO 10554
10636: POP
10637: POP
// ruPossition = position ;
10638: LD_ADDR_EXP 41
10642: PUSH
10643: LD_VAR 0 1
10647: ST_TO_ADDR
// if position = 1 then
10648: LD_VAR 0 1
10652: PUSH
10653: LD_INT 1
10655: EQUAL
10656: IFFALSE 11404
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10658: LD_ADDR_VAR 0 4
10662: PUSH
10663: LD_INT 22
10665: PUSH
10666: LD_INT 3
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 25
10675: PUSH
10676: LD_INT 2
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PPUSH
10687: CALL_OW 69
10691: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10692: LD_ADDR_VAR 0 5
10696: PUSH
10697: LD_INT 0
10699: PUSH
10700: LD_INT 49
10702: PUSH
10703: LD_INT 74
10705: PUSH
10706: LD_INT 3
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 4
10717: PUSH
10718: LD_INT 73
10720: PUSH
10721: LD_INT 88
10723: PUSH
10724: LD_INT 5
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 4
10735: PUSH
10736: LD_INT 56
10738: PUSH
10739: LD_INT 62
10741: PUSH
10742: LD_INT 3
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 29
10753: PUSH
10754: LD_INT 43
10756: PUSH
10757: LD_INT 68
10759: PUSH
10760: LD_INT 2
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 30
10771: PUSH
10772: LD_INT 43
10774: PUSH
10775: LD_INT 79
10777: PUSH
10778: LD_INT 5
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 28
10789: PUSH
10790: LD_INT 60
10792: PUSH
10793: LD_INT 75
10795: PUSH
10796: LD_INT 1
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: PUSH
10805: LD_INT 2
10807: PUSH
10808: LD_INT 50
10810: PUSH
10811: LD_INT 87
10813: PUSH
10814: LD_INT 1
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 28
10825: PUSH
10826: LD_INT 45
10828: PUSH
10829: LD_INT 67
10831: PUSH
10832: LD_INT 2
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 17
10843: PUSH
10844: LD_INT 47
10846: PUSH
10847: LD_INT 84
10849: PUSH
10850: LD_INT 2
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 18
10861: PUSH
10862: LD_INT 46
10864: PUSH
10865: LD_INT 87
10867: PUSH
10868: LD_INT 1
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: PUSH
10877: LD_INT 28
10879: PUSH
10880: LD_INT 41
10882: PUSH
10883: LD_INT 64
10885: PUSH
10886: LD_INT 5
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 32
10897: PUSH
10898: LD_INT 75
10900: PUSH
10901: LD_INT 76
10903: PUSH
10904: LD_INT 5
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 32
10915: PUSH
10916: LD_INT 77
10918: PUSH
10919: LD_INT 75
10921: PUSH
10922: LD_INT 5
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: PUSH
10931: LD_INT 32
10933: PUSH
10934: LD_INT 69
10936: PUSH
10937: LD_INT 68
10939: PUSH
10940: LD_INT 3
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 32
10951: PUSH
10952: LD_INT 59
10954: PUSH
10955: LD_INT 96
10957: PUSH
10958: LD_INT 5
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: PUSH
10967: LD_INT 32
10969: PUSH
10970: LD_INT 56
10972: PUSH
10973: LD_INT 96
10975: PUSH
10976: LD_INT 0
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 32
10987: PUSH
10988: LD_INT 51
10990: PUSH
10991: LD_INT 61
10993: PUSH
10994: LD_INT 3
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 32
11005: PUSH
11006: LD_INT 42
11008: PUSH
11009: LD_INT 60
11011: PUSH
11012: LD_INT 3
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 32
11023: PUSH
11024: LD_INT 36
11026: PUSH
11027: LD_INT 58
11029: PUSH
11030: LD_INT 3
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 32
11041: PUSH
11042: LD_INT 39
11044: PUSH
11045: LD_INT 59
11047: PUSH
11048: LD_INT 3
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 32
11059: PUSH
11060: LD_INT 61
11062: PUSH
11063: LD_INT 64
11065: PUSH
11066: LD_INT 3
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 33
11077: PUSH
11078: LD_INT 63
11080: PUSH
11081: LD_INT 90
11083: PUSH
11084: LD_INT 5
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 33
11095: PUSH
11096: LD_INT 64
11098: PUSH
11099: LD_INT 88
11101: PUSH
11102: LD_INT 5
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 33
11113: PUSH
11114: LD_INT 72
11116: PUSH
11117: LD_INT 82
11119: PUSH
11120: LD_INT 5
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 6
11131: PUSH
11132: LD_INT 42
11134: PUSH
11135: LD_INT 74
11137: PUSH
11138: LD_INT 1
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 6
11149: PUSH
11150: LD_INT 56
11152: PUSH
11153: LD_INT 77
11155: PUSH
11156: LD_INT 2
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: PUSH
11165: LD_INT 21
11167: PUSH
11168: LD_INT 54
11170: PUSH
11171: LD_INT 91
11173: PUSH
11174: LD_INT 5
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 16
11185: PUSH
11186: LD_INT 50
11188: PUSH
11189: LD_INT 83
11191: PUSH
11192: LD_INT 3
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: PUSH
11201: LD_INT 24
11203: PUSH
11204: LD_INT 50
11206: PUSH
11207: LD_INT 90
11209: PUSH
11210: LD_INT 0
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11250: LD_ADDR_VAR 0 3
11254: PUSH
11255: LD_INT 22
11257: PUSH
11258: LD_INT 3
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 3
11267: PUSH
11268: LD_INT 25
11270: PUSH
11271: LD_INT 2
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PPUSH
11286: CALL_OW 69
11290: PUSH
11291: FOR_IN
11292: IFFALSE 11311
// AddComAgressiveMove ( i , 53 , 82 ) ;
11294: LD_VAR 0 3
11298: PPUSH
11299: LD_INT 53
11301: PPUSH
11302: LD_INT 82
11304: PPUSH
11305: CALL_OW 174
11309: GO 11291
11311: POP
11312: POP
// for i := 1 to buildingsTab do
11313: LD_ADDR_VAR 0 3
11317: PUSH
11318: DOUBLE
11319: LD_INT 1
11321: DEC
11322: ST_TO_ADDR
11323: LD_VAR 0 5
11327: PUSH
11328: FOR_TO
11329: IFFALSE 11402
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11331: LD_VAR 0 4
11335: PPUSH
11336: LD_VAR 0 5
11340: PUSH
11341: LD_VAR 0 3
11345: ARRAY
11346: PUSH
11347: LD_INT 1
11349: ARRAY
11350: PPUSH
11351: LD_VAR 0 5
11355: PUSH
11356: LD_VAR 0 3
11360: ARRAY
11361: PUSH
11362: LD_INT 2
11364: ARRAY
11365: PPUSH
11366: LD_VAR 0 5
11370: PUSH
11371: LD_VAR 0 3
11375: ARRAY
11376: PUSH
11377: LD_INT 3
11379: ARRAY
11380: PPUSH
11381: LD_VAR 0 5
11385: PUSH
11386: LD_VAR 0 3
11390: ARRAY
11391: PUSH
11392: LD_INT 4
11394: ARRAY
11395: PPUSH
11396: CALL_OW 205
11400: GO 11328
11402: POP
11403: POP
// end ; if position = 2 then
11404: LD_VAR 0 1
11408: PUSH
11409: LD_INT 2
11411: EQUAL
11412: IFFALSE 12027
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11414: LD_ADDR_VAR 0 4
11418: PUSH
11419: LD_INT 22
11421: PUSH
11422: LD_INT 3
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 25
11431: PUSH
11432: LD_INT 2
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PPUSH
11443: CALL_OW 69
11447: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11448: LD_ADDR_VAR 0 5
11452: PUSH
11453: LD_INT 0
11455: PUSH
11456: LD_INT 104
11458: PUSH
11459: LD_INT 110
11461: PUSH
11462: LD_INT 5
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 4
11473: PUSH
11474: LD_INT 98
11476: PUSH
11477: LD_INT 90
11479: PUSH
11480: LD_INT 3
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 29
11491: PUSH
11492: LD_INT 103
11494: PUSH
11495: LD_INT 114
11497: PUSH
11498: LD_INT 2
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 30
11509: PUSH
11510: LD_INT 99
11512: PUSH
11513: LD_INT 114
11515: PUSH
11516: LD_INT 3
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 28
11527: PUSH
11528: LD_INT 100
11530: PUSH
11531: LD_INT 112
11533: PUSH
11534: LD_INT 1
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 2
11545: PUSH
11546: LD_INT 92
11548: PUSH
11549: LD_INT 101
11551: PUSH
11552: LD_INT 0
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 28
11563: PUSH
11564: LD_INT 97
11566: PUSH
11567: LD_INT 116
11569: PUSH
11570: LD_INT 5
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 17
11581: PUSH
11582: LD_INT 96
11584: PUSH
11585: LD_INT 101
11587: PUSH
11588: LD_INT 4
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 18
11599: PUSH
11600: LD_INT 88
11602: PUSH
11603: LD_INT 97
11605: PUSH
11606: LD_INT 2
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 28
11617: PUSH
11618: LD_INT 106
11620: PUSH
11621: LD_INT 92
11623: PUSH
11624: LD_INT 2
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 32
11635: PUSH
11636: LD_INT 88
11638: PUSH
11639: LD_INT 89
11641: PUSH
11642: LD_INT 2
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 32
11653: PUSH
11654: LD_INT 86
11656: PUSH
11657: LD_INT 90
11659: PUSH
11660: LD_INT 2
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 32
11671: PUSH
11672: LD_INT 85
11674: PUSH
11675: LD_INT 99
11677: PUSH
11678: LD_INT 2
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 32
11689: PUSH
11690: LD_INT 85
11692: PUSH
11693: LD_INT 107
11695: PUSH
11696: LD_INT 1
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 33
11707: PUSH
11708: LD_INT 105
11710: PUSH
11711: LD_INT 99
11713: PUSH
11714: LD_INT 1
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 33
11725: PUSH
11726: LD_INT 102
11728: PUSH
11729: LD_INT 92
11731: PUSH
11732: LD_INT 3
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 33
11743: PUSH
11744: LD_INT 105
11746: PUSH
11747: LD_INT 92
11749: PUSH
11750: LD_INT 2
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 6
11761: PUSH
11762: LD_INT 92
11764: PUSH
11765: LD_INT 110
11767: PUSH
11768: LD_INT 0
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 6
11779: PUSH
11780: LD_INT 103
11782: PUSH
11783: LD_INT 103
11785: PUSH
11786: LD_INT 5
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 21
11797: PUSH
11798: LD_INT 89
11800: PUSH
11801: LD_INT 101
11803: PUSH
11804: LD_INT 1
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: PUSH
11813: LD_INT 16
11815: PUSH
11816: LD_INT 95
11818: PUSH
11819: LD_INT 104
11821: PUSH
11822: LD_INT 4
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 24
11833: PUSH
11834: LD_INT 92
11836: PUSH
11837: LD_INT 105
11839: PUSH
11840: LD_INT 0
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11873: LD_ADDR_VAR 0 3
11877: PUSH
11878: LD_INT 22
11880: PUSH
11881: LD_INT 3
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PUSH
11888: LD_INT 3
11890: PUSH
11891: LD_INT 25
11893: PUSH
11894: LD_INT 2
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PPUSH
11909: CALL_OW 69
11913: PUSH
11914: FOR_IN
11915: IFFALSE 11934
// AddComAgressiveMove ( i , 96 , 99 ) ;
11917: LD_VAR 0 3
11921: PPUSH
11922: LD_INT 96
11924: PPUSH
11925: LD_INT 99
11927: PPUSH
11928: CALL_OW 174
11932: GO 11914
11934: POP
11935: POP
// for i := 1 to buildingsTab do
11936: LD_ADDR_VAR 0 3
11940: PUSH
11941: DOUBLE
11942: LD_INT 1
11944: DEC
11945: ST_TO_ADDR
11946: LD_VAR 0 5
11950: PUSH
11951: FOR_TO
11952: IFFALSE 12025
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11954: LD_VAR 0 4
11958: PPUSH
11959: LD_VAR 0 5
11963: PUSH
11964: LD_VAR 0 3
11968: ARRAY
11969: PUSH
11970: LD_INT 1
11972: ARRAY
11973: PPUSH
11974: LD_VAR 0 5
11978: PUSH
11979: LD_VAR 0 3
11983: ARRAY
11984: PUSH
11985: LD_INT 2
11987: ARRAY
11988: PPUSH
11989: LD_VAR 0 5
11993: PUSH
11994: LD_VAR 0 3
11998: ARRAY
11999: PUSH
12000: LD_INT 3
12002: ARRAY
12003: PPUSH
12004: LD_VAR 0 5
12008: PUSH
12009: LD_VAR 0 3
12013: ARRAY
12014: PUSH
12015: LD_INT 4
12017: ARRAY
12018: PPUSH
12019: CALL_OW 205
12023: GO 11951
12025: POP
12026: POP
// end ; if position = 3 then
12027: LD_VAR 0 1
12031: PUSH
12032: LD_INT 3
12034: EQUAL
12035: IFFALSE 12821
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12037: LD_ADDR_VAR 0 4
12041: PUSH
12042: LD_INT 22
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 25
12054: PUSH
12055: LD_INT 2
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PPUSH
12066: CALL_OW 69
12070: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_INT 0
12078: PUSH
12079: LD_INT 151
12081: PUSH
12082: LD_INT 71
12084: PUSH
12085: LD_INT 4
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: PUSH
12094: LD_INT 4
12096: PUSH
12097: LD_INT 145
12099: PUSH
12100: LD_INT 53
12102: PUSH
12103: LD_INT 3
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 4
12114: PUSH
12115: LD_INT 172
12117: PUSH
12118: LD_INT 102
12120: PUSH
12121: LD_INT 5
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 29
12132: PUSH
12133: LD_INT 152
12135: PUSH
12136: LD_INT 85
12138: PUSH
12139: LD_INT 3
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PUSH
12148: LD_INT 30
12150: PUSH
12151: LD_INT 156
12153: PUSH
12154: LD_INT 92
12156: PUSH
12157: LD_INT 3
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PUSH
12166: LD_INT 28
12168: PUSH
12169: LD_INT 151
12171: PUSH
12172: LD_INT 66
12174: PUSH
12175: LD_INT 4
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: PUSH
12184: LD_INT 2
12186: PUSH
12187: LD_INT 163
12189: PUSH
12190: LD_INT 95
12192: PUSH
12193: LD_INT 5
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 28
12204: PUSH
12205: LD_INT 149
12207: PUSH
12208: LD_INT 63
12210: PUSH
12211: LD_INT 4
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 17
12222: PUSH
12223: LD_INT 167
12225: PUSH
12226: LD_INT 99
12228: PUSH
12229: LD_INT 5
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: PUSH
12238: LD_INT 18
12240: PUSH
12241: LD_INT 163
12243: PUSH
12244: LD_INT 98
12246: PUSH
12247: LD_INT 0
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 28
12258: PUSH
12259: LD_INT 154
12261: PUSH
12262: LD_INT 70
12264: PUSH
12265: LD_INT 4
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 32
12276: PUSH
12277: LD_INT 155
12279: PUSH
12280: LD_INT 62
12282: PUSH
12283: LD_INT 4
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 32
12294: PUSH
12295: LD_INT 161
12297: PUSH
12298: LD_INT 69
12300: PUSH
12301: LD_INT 4
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 32
12312: PUSH
12313: LD_INT 168
12315: PUSH
12316: LD_INT 78
12318: PUSH
12319: LD_INT 4
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 32
12330: PUSH
12331: LD_INT 163
12333: PUSH
12334: LD_INT 80
12336: PUSH
12337: LD_INT 5
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 32
12348: PUSH
12349: LD_INT 136
12351: PUSH
12352: LD_INT 73
12354: PUSH
12355: LD_INT 0
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 32
12366: PUSH
12367: LD_INT 157
12369: PUSH
12370: LD_INT 98
12372: PUSH
12373: LD_INT 0
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 32
12384: PUSH
12385: LD_INT 150
12387: PUSH
12388: LD_INT 87
12390: PUSH
12391: LD_INT 1
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 33
12402: PUSH
12403: LD_INT 171
12405: PUSH
12406: LD_INT 97
12408: PUSH
12409: LD_INT 4
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 33
12420: PUSH
12421: LD_INT 168
12423: PUSH
12424: LD_INT 92
12426: PUSH
12427: LD_INT 4
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 33
12438: PUSH
12439: LD_INT 166
12441: PUSH
12442: LD_INT 80
12444: PUSH
12445: LD_INT 5
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 33
12456: PUSH
12457: LD_INT 141
12459: PUSH
12460: LD_INT 54
12462: PUSH
12463: LD_INT 2
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 33
12474: PUSH
12475: LD_INT 133
12477: PUSH
12478: LD_INT 57
12480: PUSH
12481: LD_INT 2
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 33
12492: PUSH
12493: LD_INT 132
12495: PUSH
12496: LD_INT 61
12498: PUSH
12499: LD_INT 2
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: PUSH
12508: LD_INT 33
12510: PUSH
12511: LD_INT 150
12513: PUSH
12514: LD_INT 82
12516: PUSH
12517: LD_INT 0
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 33
12528: PUSH
12529: LD_INT 132
12531: PUSH
12532: LD_INT 72
12534: PUSH
12535: LD_INT 0
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 6
12546: PUSH
12547: LD_INT 146
12549: PUSH
12550: LD_INT 64
12552: PUSH
12553: LD_INT 4
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 6
12564: PUSH
12565: LD_INT 159
12567: PUSH
12568: LD_INT 85
12570: PUSH
12571: LD_INT 4
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 21
12582: PUSH
12583: LD_INT 163
12585: PUSH
12586: LD_INT 91
12588: PUSH
12589: LD_INT 3
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: LD_INT 16
12600: PUSH
12601: LD_INT 166
12603: PUSH
12604: LD_INT 95
12606: PUSH
12607: LD_INT 4
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 24
12618: PUSH
12619: LD_INT 159
12621: PUSH
12622: LD_INT 95
12624: PUSH
12625: LD_INT 1
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12667: LD_ADDR_VAR 0 3
12671: PUSH
12672: LD_INT 22
12674: PUSH
12675: LD_INT 3
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: LD_INT 3
12684: PUSH
12685: LD_INT 25
12687: PUSH
12688: LD_INT 2
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PPUSH
12703: CALL_OW 69
12707: PUSH
12708: FOR_IN
12709: IFFALSE 12728
// AddComAgressiveMove ( i , 141 , 65 ) ;
12711: LD_VAR 0 3
12715: PPUSH
12716: LD_INT 141
12718: PPUSH
12719: LD_INT 65
12721: PPUSH
12722: CALL_OW 174
12726: GO 12708
12728: POP
12729: POP
// for i := 1 to buildingsTab do
12730: LD_ADDR_VAR 0 3
12734: PUSH
12735: DOUBLE
12736: LD_INT 1
12738: DEC
12739: ST_TO_ADDR
12740: LD_VAR 0 5
12744: PUSH
12745: FOR_TO
12746: IFFALSE 12819
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12748: LD_VAR 0 4
12752: PPUSH
12753: LD_VAR 0 5
12757: PUSH
12758: LD_VAR 0 3
12762: ARRAY
12763: PUSH
12764: LD_INT 1
12766: ARRAY
12767: PPUSH
12768: LD_VAR 0 5
12772: PUSH
12773: LD_VAR 0 3
12777: ARRAY
12778: PUSH
12779: LD_INT 2
12781: ARRAY
12782: PPUSH
12783: LD_VAR 0 5
12787: PUSH
12788: LD_VAR 0 3
12792: ARRAY
12793: PUSH
12794: LD_INT 3
12796: ARRAY
12797: PPUSH
12798: LD_VAR 0 5
12802: PUSH
12803: LD_VAR 0 3
12807: ARRAY
12808: PUSH
12809: LD_INT 4
12811: ARRAY
12812: PPUSH
12813: CALL_OW 205
12817: GO 12745
12819: POP
12820: POP
// end ; end ;
12821: LD_VAR 0 2
12825: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12826: LD_INT 0
12828: PPUSH
12829: PPUSH
12830: PPUSH
12831: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12832: LD_ADDR_VAR 0 3
12836: PUSH
12837: LD_INT 22
12839: PUSH
12840: LD_INT 2
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 25
12849: PUSH
12850: LD_INT 2
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PPUSH
12861: CALL_OW 69
12865: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12866: LD_VAR 0 3
12870: PPUSH
12871: LD_INT 0
12873: PPUSH
12874: LD_INT 71
12876: PPUSH
12877: LD_INT 15
12879: PPUSH
12880: LD_INT 3
12882: PPUSH
12883: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12887: LD_ADDR_VAR 0 4
12891: PUSH
12892: LD_INT 6
12894: PUSH
12895: LD_INT 77
12897: PUSH
12898: LD_INT 18
12900: PUSH
12901: LD_INT 3
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 4
12912: PUSH
12913: LD_INT 77
12915: PUSH
12916: LD_INT 26
12918: PUSH
12919: LD_INT 0
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 31
12930: PUSH
12931: LD_INT 82
12933: PUSH
12934: LD_INT 28
12936: PUSH
12937: LD_INT 0
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 31
12948: PUSH
12949: LD_INT 84
12951: PUSH
12952: LD_INT 21
12954: PUSH
12955: LD_INT 3
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 31
12966: PUSH
12967: LD_INT 66
12969: PUSH
12970: LD_INT 14
12972: PUSH
12973: LD_INT 2
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 27
12984: PUSH
12985: LD_INT 67
12987: PUSH
12988: LD_INT 18
12990: PUSH
12991: LD_INT 5
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 27
13002: PUSH
13003: LD_INT 69
13005: PUSH
13006: LD_INT 23
13008: PUSH
13009: LD_INT 2
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: ST_TO_ADDR
// for i := 1 to buildingsTab do
13027: LD_ADDR_VAR 0 2
13031: PUSH
13032: DOUBLE
13033: LD_INT 1
13035: DEC
13036: ST_TO_ADDR
13037: LD_VAR 0 4
13041: PUSH
13042: FOR_TO
13043: IFFALSE 13116
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13045: LD_VAR 0 3
13049: PPUSH
13050: LD_VAR 0 4
13054: PUSH
13055: LD_VAR 0 2
13059: ARRAY
13060: PUSH
13061: LD_INT 1
13063: ARRAY
13064: PPUSH
13065: LD_VAR 0 4
13069: PUSH
13070: LD_VAR 0 2
13074: ARRAY
13075: PUSH
13076: LD_INT 2
13078: ARRAY
13079: PPUSH
13080: LD_VAR 0 4
13084: PUSH
13085: LD_VAR 0 2
13089: ARRAY
13090: PUSH
13091: LD_INT 3
13093: ARRAY
13094: PPUSH
13095: LD_VAR 0 4
13099: PUSH
13100: LD_VAR 0 2
13104: ARRAY
13105: PUSH
13106: LD_INT 4
13108: ARRAY
13109: PPUSH
13110: CALL_OW 205
13114: GO 13042
13116: POP
13117: POP
// end ;
13118: LD_VAR 0 1
13122: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
13123: LD_INT 0
13125: PPUSH
13126: PPUSH
13127: PPUSH
13128: PPUSH
13129: PPUSH
13130: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
13131: LD_ADDR_VAR 0 7
13135: PUSH
13136: LD_INT 22
13138: PUSH
13139: LD_VAR 0 1
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 25
13150: PUSH
13151: LD_INT 9
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: PPUSH
13162: CALL_OW 69
13166: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13167: LD_ADDR_VAR 0 8
13171: PUSH
13172: LD_INT 22
13174: PUSH
13175: LD_VAR 0 2
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 3
13186: PUSH
13187: LD_INT 21
13189: PUSH
13190: LD_INT 3
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PPUSH
13205: CALL_OW 69
13209: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13210: LD_ADDR_VAR 0 5
13214: PUSH
13215: LD_INT 1
13217: PPUSH
13218: LD_INT 3
13220: PPUSH
13221: CALL_OW 12
13225: ST_TO_ADDR
// for i = 1 to list do
13226: LD_ADDR_VAR 0 6
13230: PUSH
13231: DOUBLE
13232: LD_INT 1
13234: DEC
13235: ST_TO_ADDR
13236: LD_VAR 0 7
13240: PUSH
13241: FOR_TO
13242: IFFALSE 14232
// for ta in filter do
13244: LD_ADDR_VAR 0 4
13248: PUSH
13249: LD_VAR 0 8
13253: PUSH
13254: FOR_IN
13255: IFFALSE 14228
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13257: LD_VAR 0 7
13261: PUSH
13262: LD_VAR 0 6
13266: ARRAY
13267: PPUSH
13268: LD_VAR 0 4
13272: PPUSH
13273: CALL_OW 296
13277: PUSH
13278: LD_INT 15
13280: LESSEQUAL
13281: IFFALSE 14226
// begin case c of 1 :
13283: LD_VAR 0 5
13287: PUSH
13288: LD_INT 1
13290: DOUBLE
13291: EQUAL
13292: IFTRUE 13296
13294: GO 13728
13296: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13297: LD_VAR 0 7
13301: PUSH
13302: LD_VAR 0 6
13306: ARRAY
13307: PPUSH
13308: LD_VAR 0 4
13312: PPUSH
13313: CALL_OW 250
13317: PPUSH
13318: LD_VAR 0 4
13322: PPUSH
13323: CALL_OW 251
13327: PPUSH
13328: CALL_OW 154
// if eventVar2 = 0 then
13332: LD_EXP 63
13336: PUSH
13337: LD_INT 0
13339: EQUAL
13340: IFFALSE 13726
// begin eventVar2 = 1 ;
13342: LD_ADDR_EXP 63
13346: PUSH
13347: LD_INT 1
13349: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13350: LD_INT 245
13352: PPUSH
13353: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13357: LD_VAR 0 4
13361: PPUSH
13362: CALL_OW 250
13366: PPUSH
13367: LD_VAR 0 4
13371: PPUSH
13372: CALL_OW 251
13376: PPUSH
13377: CALL_OW 84
// DialogueOn ;
13381: CALL_OW 6
// if IsOK ( Cyrus ) then
13385: LD_EXP 5
13389: PPUSH
13390: CALL_OW 302
13394: IFFALSE 13410
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13396: LD_EXP 5
13400: PPUSH
13401: LD_STRING D9a-Cyrus-1
13403: PPUSH
13404: CALL_OW 88
// end else
13408: GO 13532
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13410: LD_INT 22
13412: PUSH
13413: LD_INT 1
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 26
13422: PUSH
13423: LD_INT 1
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 2
13432: PUSH
13433: LD_INT 25
13435: PUSH
13436: LD_INT 1
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 25
13445: PUSH
13446: LD_INT 2
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 25
13455: PUSH
13456: LD_INT 3
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 25
13465: PUSH
13466: LD_INT 4
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 25
13475: PUSH
13476: LD_INT 5
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 69
13500: PUSH
13501: LD_EXP 1
13505: PUSH
13506: LD_EXP 14
13510: PUSH
13511: LD_EXP 5
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: LIST
13520: DIFF
13521: PPUSH
13522: LD_STRING D9a-Sol1-1
13524: PPUSH
13525: LD_STRING D9a-Sol1-1
13527: PPUSH
13528: CALL 9673 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13532: LD_INT 22
13534: PUSH
13535: LD_INT 1
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 26
13544: PUSH
13545: LD_INT 1
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 2
13554: PUSH
13555: LD_INT 25
13557: PUSH
13558: LD_INT 1
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 25
13567: PUSH
13568: LD_INT 2
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 25
13577: PUSH
13578: LD_INT 3
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 25
13587: PUSH
13588: LD_INT 4
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 25
13597: PUSH
13598: LD_INT 5
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: LIST
13617: PPUSH
13618: CALL_OW 69
13622: PUSH
13623: LD_EXP 1
13627: PUSH
13628: LD_EXP 14
13632: PUSH
13633: LD_EXP 5
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: DIFF
13643: PPUSH
13644: LD_STRING D9b-Sol1-1
13646: PPUSH
13647: LD_STRING D9b-Sol1-1
13649: PPUSH
13650: CALL 9673 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13654: LD_STRING 09_arInfo
13656: PPUSH
13657: LD_INT 0
13659: PPUSH
13660: CALL_OW 30
13664: PUSH
13665: LD_INT 1
13667: EQUAL
13668: IFFALSE 13682
// Say ( JMM , D9a-JMM-1 ) ;
13670: LD_EXP 1
13674: PPUSH
13675: LD_STRING D9a-JMM-1
13677: PPUSH
13678: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13682: LD_EXP 1
13686: PPUSH
13687: LD_STRING D9c-JMM-1
13689: PPUSH
13690: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13694: LD_INT 12
13696: PPUSH
13697: LD_INT 1
13699: PPUSH
13700: CALL_OW 321
13704: PUSH
13705: LD_INT 2
13707: EQUAL
13708: IFFALSE 13722
// Say ( JMM , D9c-JMM-1a ) ;
13710: LD_EXP 1
13714: PPUSH
13715: LD_STRING D9c-JMM-1a
13717: PPUSH
13718: CALL_OW 88
// DialogueOff ;
13722: CALL_OW 7
// end ; end ; 2 :
13726: GO 14226
13728: LD_INT 2
13730: DOUBLE
13731: EQUAL
13732: IFTRUE 13736
13734: GO 14194
13736: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13737: LD_VAR 0 7
13741: PUSH
13742: LD_VAR 0 6
13746: ARRAY
13747: PPUSH
13748: LD_VAR 0 4
13752: PPUSH
13753: CALL_OW 250
13757: PUSH
13758: LD_INT 1
13760: NEG
13761: PPUSH
13762: LD_INT 1
13764: PPUSH
13765: CALL_OW 12
13769: PLUS
13770: PPUSH
13771: LD_VAR 0 4
13775: PPUSH
13776: CALL_OW 251
13780: PUSH
13781: LD_INT 1
13783: NEG
13784: PPUSH
13785: LD_INT 1
13787: PPUSH
13788: CALL_OW 12
13792: PLUS
13793: PPUSH
13794: CALL_OW 153
// if eventVar2 = 0 then
13798: LD_EXP 63
13802: PUSH
13803: LD_INT 0
13805: EQUAL
13806: IFFALSE 14192
// begin eventVar2 = 1 ;
13808: LD_ADDR_EXP 63
13812: PUSH
13813: LD_INT 1
13815: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13816: LD_INT 245
13818: PPUSH
13819: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13823: LD_VAR 0 4
13827: PPUSH
13828: CALL_OW 250
13832: PPUSH
13833: LD_VAR 0 4
13837: PPUSH
13838: CALL_OW 251
13842: PPUSH
13843: CALL_OW 84
// DialogueOn ;
13847: CALL_OW 6
// if IsOK ( Cyrus ) then
13851: LD_EXP 5
13855: PPUSH
13856: CALL_OW 302
13860: IFFALSE 13876
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13862: LD_EXP 5
13866: PPUSH
13867: LD_STRING D9a-Cyrus-1
13869: PPUSH
13870: CALL_OW 88
// end else
13874: GO 13998
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13876: LD_INT 22
13878: PUSH
13879: LD_INT 1
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 26
13888: PUSH
13889: LD_INT 1
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 2
13898: PUSH
13899: LD_INT 25
13901: PUSH
13902: LD_INT 1
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 25
13911: PUSH
13912: LD_INT 2
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: LD_INT 25
13921: PUSH
13922: LD_INT 3
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: LD_INT 25
13931: PUSH
13932: LD_INT 4
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: PUSH
13939: LD_INT 25
13941: PUSH
13942: LD_INT 5
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: PPUSH
13962: CALL_OW 69
13966: PUSH
13967: LD_EXP 1
13971: PUSH
13972: LD_EXP 14
13976: PUSH
13977: LD_EXP 5
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: LIST
13986: DIFF
13987: PPUSH
13988: LD_STRING D9a-Sol1-1
13990: PPUSH
13991: LD_STRING D9a-Sol1-1
13993: PPUSH
13994: CALL 9673 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13998: LD_INT 22
14000: PUSH
14001: LD_INT 1
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: LD_INT 26
14010: PUSH
14011: LD_INT 1
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 2
14020: PUSH
14021: LD_INT 25
14023: PUSH
14024: LD_INT 1
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: LD_INT 25
14033: PUSH
14034: LD_INT 2
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: LD_INT 25
14043: PUSH
14044: LD_INT 3
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 25
14053: PUSH
14054: LD_INT 4
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 25
14063: PUSH
14064: LD_INT 5
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: LIST
14083: PPUSH
14084: CALL_OW 69
14088: PUSH
14089: LD_EXP 1
14093: PUSH
14094: LD_EXP 14
14098: PUSH
14099: LD_EXP 5
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: LIST
14108: DIFF
14109: PPUSH
14110: LD_STRING D9b-Sol1-1
14112: PPUSH
14113: LD_STRING D9b-Sol1-1
14115: PPUSH
14116: CALL 9673 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14120: LD_STRING 09_arInfo
14122: PPUSH
14123: LD_INT 0
14125: PPUSH
14126: CALL_OW 30
14130: PUSH
14131: LD_INT 1
14133: EQUAL
14134: IFFALSE 14148
// Say ( JMM , D9a-JMM-1 ) ;
14136: LD_EXP 1
14140: PPUSH
14141: LD_STRING D9a-JMM-1
14143: PPUSH
14144: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14148: LD_EXP 1
14152: PPUSH
14153: LD_STRING D9c-JMM-1
14155: PPUSH
14156: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14160: LD_INT 12
14162: PPUSH
14163: LD_INT 1
14165: PPUSH
14166: CALL_OW 321
14170: PUSH
14171: LD_INT 2
14173: EQUAL
14174: IFFALSE 14188
// Say ( JMM , D9c-JMM-1a ) ;
14176: LD_EXP 1
14180: PPUSH
14181: LD_STRING D9c-JMM-1a
14183: PPUSH
14184: CALL_OW 88
// DialogueOff ;
14188: CALL_OW 7
// end ; end ; 3 :
14192: GO 14226
14194: LD_INT 3
14196: DOUBLE
14197: EQUAL
14198: IFTRUE 14202
14200: GO 14225
14202: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14203: LD_VAR 0 7
14207: PUSH
14208: LD_VAR 0 6
14212: ARRAY
14213: PPUSH
14214: LD_VAR 0 4
14218: PPUSH
14219: CALL_OW 115
14223: GO 14226
14225: POP
// end ; end ;
14226: GO 13254
14228: POP
14229: POP
14230: GO 13241
14232: POP
14233: POP
// end ;
14234: LD_VAR 0 3
14238: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14239: LD_INT 0
14241: PPUSH
14242: PPUSH
14243: PPUSH
14244: PPUSH
// for i = 1 to 72 do
14245: LD_ADDR_VAR 0 5
14249: PUSH
14250: DOUBLE
14251: LD_INT 1
14253: DEC
14254: ST_TO_ADDR
14255: LD_INT 72
14257: PUSH
14258: FOR_TO
14259: IFFALSE 14317
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14261: LD_VAR 0 5
14265: PPUSH
14266: LD_VAR 0 1
14270: PPUSH
14271: CALL_OW 321
14275: PUSH
14276: LD_INT 1
14278: EQUAL
14279: PUSH
14280: LD_VAR 0 5
14284: PPUSH
14285: LD_VAR 0 3
14289: PPUSH
14290: CALL_OW 482
14294: PUSH
14295: LD_INT 1
14297: EQUAL
14298: AND
14299: IFFALSE 14315
// AddComResearch ( lab , i ) ;
14301: LD_VAR 0 2
14305: PPUSH
14306: LD_VAR 0 5
14310: PPUSH
14311: CALL_OW 184
14315: GO 14258
14317: POP
14318: POP
// end ;
14319: LD_VAR 0 4
14323: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14324: LD_INT 0
14326: PPUSH
14327: PPUSH
14328: PPUSH
14329: PPUSH
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14334: LD_ADDR_VAR 0 6
14338: PUSH
14339: LD_INT 22
14341: PUSH
14342: LD_VAR 0 1
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 56
14353: PUSH
14354: EMPTY
14355: LIST
14356: PUSH
14357: LD_INT 24
14359: PUSH
14360: LD_INT 700
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 3
14369: PUSH
14370: LD_INT 60
14372: PUSH
14373: EMPTY
14374: LIST
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 2
14382: PUSH
14383: LD_INT 25
14385: PUSH
14386: LD_INT 1
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: LD_INT 25
14395: PUSH
14396: LD_INT 9
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: LIST
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: PPUSH
14415: CALL_OW 69
14419: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14420: LD_ADDR_VAR 0 7
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_VAR 0 1
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 30
14439: PUSH
14440: LD_INT 32
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: LD_INT 58
14449: PUSH
14450: EMPTY
14451: LIST
14452: PUSH
14453: LD_INT 24
14455: PUSH
14456: LD_INT 251
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 69
14473: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14474: LD_ADDR_VAR 0 9
14478: PUSH
14479: LD_INT 22
14481: PUSH
14482: LD_VAR 0 1
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 2
14493: PUSH
14494: LD_INT 30
14496: PUSH
14497: LD_INT 4
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 30
14506: PUSH
14507: LD_INT 5
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 24
14521: PUSH
14522: LD_INT 251
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: LIST
14533: PPUSH
14534: CALL_OW 69
14538: ST_TO_ADDR
// if barrackList > 0 then
14539: LD_VAR 0 9
14543: PUSH
14544: LD_INT 0
14546: GREATER
14547: IFFALSE 14682
// begin if turretList = 0 then
14549: LD_VAR 0 7
14553: PUSH
14554: LD_INT 0
14556: EQUAL
14557: IFFALSE 14606
// begin for i in soldiers_list do
14559: LD_ADDR_VAR 0 4
14563: PUSH
14564: LD_VAR 0 6
14568: PUSH
14569: FOR_IN
14570: IFFALSE 14602
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14572: LD_VAR 0 4
14576: PPUSH
14577: LD_VAR 0 9
14581: PUSH
14582: LD_INT 1
14584: PPUSH
14585: LD_VAR 0 9
14589: PPUSH
14590: CALL_OW 12
14594: ARRAY
14595: PPUSH
14596: CALL_OW 120
14600: GO 14569
14602: POP
14603: POP
// end else
14604: GO 14682
// begin for i in barrackList do
14606: LD_ADDR_VAR 0 4
14610: PUSH
14611: LD_VAR 0 9
14615: PUSH
14616: FOR_IN
14617: IFFALSE 14680
// begin insideUnits = UnitsInside ( i ) ;
14619: LD_ADDR_VAR 0 10
14623: PUSH
14624: LD_VAR 0 4
14628: PPUSH
14629: CALL_OW 313
14633: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14634: LD_VAR 0 10
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PPUSH
14643: LD_VAR 0 7
14647: PUSH
14648: LD_INT 1
14650: ARRAY
14651: PPUSH
14652: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14656: LD_VAR 0 6
14660: PUSH
14661: LD_INT 1
14663: ARRAY
14664: PPUSH
14665: LD_VAR 0 7
14669: PUSH
14670: LD_INT 1
14672: ARRAY
14673: PPUSH
14674: CALL_OW 120
// end ;
14678: GO 14616
14680: POP
14681: POP
// end ; end ; end ;
14682: LD_VAR 0 3
14686: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14687: LD_INT 0
14689: PPUSH
14690: PPUSH
14691: PPUSH
14692: PPUSH
14693: PPUSH
14694: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14695: LD_ADDR_VAR 0 6
14699: PUSH
14700: LD_VAR 0 2
14704: PPUSH
14705: CALL_OW 313
14709: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14710: LD_ADDR_VAR 0 7
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_VAR 0 1
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: LD_INT 25
14729: PUSH
14730: LD_INT 2
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 24
14739: PUSH
14740: LD_INT 1000
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 3
14749: PUSH
14750: LD_INT 54
14752: PUSH
14753: EMPTY
14754: LIST
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: PPUSH
14766: CALL_OW 69
14770: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14771: LD_ADDR_VAR 0 4
14775: PUSH
14776: LD_INT 22
14778: PUSH
14779: LD_VAR 0 1
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 21
14790: PUSH
14791: LD_INT 3
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 3
14800: PUSH
14801: LD_INT 24
14803: PUSH
14804: LD_INT 1000
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: LIST
14819: PUSH
14820: EMPTY
14821: LIST
14822: PPUSH
14823: CALL_OW 69
14827: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14828: LD_VAR 0 4
14832: NOT
14833: PUSH
14834: LD_VAR 0 7
14838: NOT
14839: AND
14840: PUSH
14841: LD_EXP 42
14845: NOT
14846: AND
14847: IFFALSE 14851
// exit ;
14849: GO 15042
// if buildings_list > 0 and engineerOkInside then
14851: LD_VAR 0 4
14855: PUSH
14856: LD_INT 0
14858: GREATER
14859: PUSH
14860: LD_VAR 0 6
14864: AND
14865: IFFALSE 14919
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14867: LD_ADDR_VAR 0 5
14871: PUSH
14872: LD_INT 22
14874: PUSH
14875: LD_VAR 0 1
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: LD_INT 25
14886: PUSH
14887: LD_INT 2
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PPUSH
14898: CALL_OW 69
14902: PUSH
14903: FOR_IN
14904: IFFALSE 14917
// ComExitBuilding ( i ) ;
14906: LD_VAR 0 5
14910: PPUSH
14911: CALL_OW 122
14915: GO 14903
14917: POP
14918: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14919: LD_VAR 0 4
14923: PUSH
14924: LD_INT 0
14926: GREATER
14927: PUSH
14928: LD_VAR 0 7
14932: PUSH
14933: LD_INT 0
14935: GREATER
14936: AND
14937: IFFALSE 14991
// begin for i in engineerOkOutside do
14939: LD_ADDR_VAR 0 5
14943: PUSH
14944: LD_VAR 0 7
14948: PUSH
14949: FOR_IN
14950: IFFALSE 14989
// for j in buildings_list do
14952: LD_ADDR_VAR 0 8
14956: PUSH
14957: LD_VAR 0 4
14961: PUSH
14962: FOR_IN
14963: IFFALSE 14985
// ComRepairBuilding ( i , j [ 1 ] ) ;
14965: LD_VAR 0 5
14969: PPUSH
14970: LD_VAR 0 8
14974: PUSH
14975: LD_INT 1
14977: ARRAY
14978: PPUSH
14979: CALL_OW 130
14983: GO 14962
14985: POP
14986: POP
14987: GO 14949
14989: POP
14990: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14991: LD_VAR 0 4
14995: PUSH
14996: LD_INT 0
14998: EQUAL
14999: PUSH
15000: LD_VAR 0 7
15004: PUSH
15005: LD_INT 0
15007: GREATER
15008: AND
15009: IFFALSE 15042
// for i in engineerOkOutside do
15011: LD_ADDR_VAR 0 5
15015: PUSH
15016: LD_VAR 0 7
15020: PUSH
15021: FOR_IN
15022: IFFALSE 15040
// ComEnterUnit ( i , building ) ;
15024: LD_VAR 0 5
15028: PPUSH
15029: LD_VAR 0 2
15033: PPUSH
15034: CALL_OW 120
15038: GO 15021
15040: POP
15041: POP
// end ;
15042: LD_VAR 0 3
15046: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
15047: LD_INT 0
15049: PPUSH
15050: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
15051: LD_INT 22
15053: PUSH
15054: LD_VAR 0 1
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 25
15065: PUSH
15066: LD_INT 2
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PPUSH
15077: CALL_OW 69
15081: PUSH
15082: LD_INT 0
15084: GREATER
15085: PUSH
15086: LD_INT 22
15088: PUSH
15089: LD_VAR 0 1
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 21
15100: PUSH
15101: LD_INT 3
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 3
15110: PUSH
15111: LD_INT 24
15113: PUSH
15114: LD_INT 1000
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: LIST
15129: PPUSH
15130: CALL_OW 69
15134: PUSH
15135: LD_INT 0
15137: EQUAL
15138: AND
15139: PUSH
15140: LD_VAR 0 2
15144: PUSH
15145: LD_INT 0
15147: GREATER
15148: AND
15149: IFFALSE 15248
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
15151: LD_ADDR_VAR 0 4
15155: PUSH
15156: LD_INT 22
15158: PUSH
15159: LD_VAR 0 1
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: LD_INT 25
15170: PUSH
15171: LD_INT 2
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PPUSH
15182: CALL_OW 69
15186: PUSH
15187: FOR_IN
15188: IFFALSE 15246
// begin AddComExitBuilding ( i ) ;
15190: LD_VAR 0 4
15194: PPUSH
15195: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15199: LD_VAR 0 4
15203: PPUSH
15204: LD_VAR 0 2
15208: PUSH
15209: LD_INT 1
15211: ARRAY
15212: PPUSH
15213: LD_VAR 0 2
15217: PUSH
15218: LD_INT 2
15220: ARRAY
15221: PPUSH
15222: LD_VAR 0 2
15226: PUSH
15227: LD_INT 3
15229: ARRAY
15230: PPUSH
15231: LD_VAR 0 2
15235: PUSH
15236: LD_INT 4
15238: ARRAY
15239: PPUSH
15240: CALL_OW 205
// end ;
15244: GO 15187
15246: POP
15247: POP
// end ; end ;
15248: LD_VAR 0 3
15252: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15253: LD_INT 0
15255: PPUSH
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15264: LD_ADDR_VAR 0 6
15268: PUSH
15269: LD_INT 22
15271: PUSH
15272: LD_VAR 0 1
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 25
15283: PUSH
15284: LD_INT 4
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 24
15293: PUSH
15294: LD_INT 251
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: LIST
15305: PPUSH
15306: CALL_OW 69
15310: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15311: LD_ADDR_VAR 0 7
15315: PUSH
15316: LD_VAR 0 3
15320: PPUSH
15321: LD_INT 22
15323: PUSH
15324: LD_VAR 0 1
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 25
15335: PUSH
15336: LD_INT 4
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PUSH
15343: LD_INT 50
15345: PUSH
15346: EMPTY
15347: LIST
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: LIST
15353: PPUSH
15354: CALL_OW 70
15358: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15359: LD_ADDR_VAR 0 10
15363: PUSH
15364: LD_VAR 0 3
15368: PPUSH
15369: LD_INT 22
15371: PUSH
15372: LD_VAR 0 1
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 21
15383: PUSH
15384: LD_INT 1
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 3
15393: PUSH
15394: LD_INT 25
15396: PUSH
15397: LD_INT 3
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: LD_INT 3
15410: PUSH
15411: LD_INT 24
15413: PUSH
15414: LD_INT 750
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: PPUSH
15431: CALL_OW 70
15435: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15436: LD_ADDR_VAR 0 11
15440: PUSH
15441: LD_VAR 0 2
15445: PPUSH
15446: LD_INT 22
15448: PUSH
15449: LD_VAR 0 1
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 21
15460: PUSH
15461: LD_INT 1
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 3
15470: PUSH
15471: LD_INT 25
15473: PUSH
15474: LD_INT 3
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 3
15487: PUSH
15488: LD_INT 24
15490: PUSH
15491: LD_INT 1000
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: PPUSH
15508: CALL_OW 70
15512: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15513: LD_VAR 0 10
15517: NOT
15518: PUSH
15519: LD_VAR 0 7
15523: NOT
15524: AND
15525: PUSH
15526: LD_VAR 0 11
15530: NOT
15531: AND
15532: IFFALSE 15536
// exit ;
15534: GO 15796
// if damageUnits > 0 and sci_list > 0 then
15536: LD_VAR 0 10
15540: PUSH
15541: LD_INT 0
15543: GREATER
15544: PUSH
15545: LD_VAR 0 6
15549: PUSH
15550: LD_INT 0
15552: GREATER
15553: AND
15554: IFFALSE 15587
// for i in damageUnits do
15556: LD_ADDR_VAR 0 8
15560: PUSH
15561: LD_VAR 0 10
15565: PUSH
15566: FOR_IN
15567: IFFALSE 15585
// ComMoveToArea ( i , healArea ) ;
15569: LD_VAR 0 8
15573: PPUSH
15574: LD_VAR 0 2
15578: PPUSH
15579: CALL_OW 113
15583: GO 15566
15585: POP
15586: POP
// if unitsToHeal > 0 and sci_list > 0 then
15587: LD_VAR 0 11
15591: PUSH
15592: LD_INT 0
15594: GREATER
15595: PUSH
15596: LD_VAR 0 6
15600: PUSH
15601: LD_INT 0
15603: GREATER
15604: AND
15605: IFFALSE 15664
// begin for i in sci_list do
15607: LD_ADDR_VAR 0 8
15611: PUSH
15612: LD_VAR 0 6
15616: PUSH
15617: FOR_IN
15618: IFFALSE 15662
// begin ComExitBuilding ( i ) ;
15620: LD_VAR 0 8
15624: PPUSH
15625: CALL_OW 122
// for j in unitsToHeal do
15629: LD_ADDR_VAR 0 9
15633: PUSH
15634: LD_VAR 0 11
15638: PUSH
15639: FOR_IN
15640: IFFALSE 15658
// AddComHeal ( i , j ) ;
15642: LD_VAR 0 8
15646: PPUSH
15647: LD_VAR 0 9
15651: PPUSH
15652: CALL_OW 188
15656: GO 15639
15658: POP
15659: POP
// end ;
15660: GO 15617
15662: POP
15663: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15664: LD_VAR 0 10
15668: PUSH
15669: LD_INT 0
15671: EQUAL
15672: PUSH
15673: LD_VAR 0 11
15677: PUSH
15678: LD_INT 0
15680: EQUAL
15681: AND
15682: PUSH
15683: LD_VAR 0 7
15687: PUSH
15688: LD_INT 0
15690: GREATER
15691: AND
15692: IFFALSE 15796
// for i in sci_listOutside do
15694: LD_ADDR_VAR 0 8
15698: PUSH
15699: LD_VAR 0 7
15703: PUSH
15704: FOR_IN
15705: IFFALSE 15794
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15707: LD_ADDR_VAR 0 12
15711: PUSH
15712: LD_INT 22
15714: PUSH
15715: LD_VAR 0 1
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 21
15726: PUSH
15727: LD_INT 3
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 30
15736: PUSH
15737: LD_INT 8
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: LIST
15748: PPUSH
15749: CALL_OW 69
15753: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15754: LD_ADDR_VAR 0 13
15758: PUSH
15759: LD_INT 1
15761: PPUSH
15762: LD_VAR 0 12
15766: PPUSH
15767: CALL_OW 12
15771: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15772: LD_VAR 0 8
15776: PPUSH
15777: LD_VAR 0 12
15781: PUSH
15782: LD_VAR 0 13
15786: ARRAY
15787: PPUSH
15788: CALL_OW 120
// end ;
15792: GO 15704
15794: POP
15795: POP
// end ;
15796: LD_VAR 0 5
15800: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15801: LD_INT 0
15803: PPUSH
15804: PPUSH
15805: PPUSH
15806: PPUSH
15807: PPUSH
15808: PPUSH
15809: PPUSH
15810: PPUSH
15811: PPUSH
15812: PPUSH
15813: PPUSH
// amChassisTab = [ ] ;
15814: LD_ADDR_VAR 0 19
15818: PUSH
15819: EMPTY
15820: ST_TO_ADDR
// arChassisTab = [ ] ;
15821: LD_ADDR_VAR 0 18
15825: PUSH
15826: EMPTY
15827: ST_TO_ADDR
// ruChassisTab = [ ] ;
15828: LD_ADDR_VAR 0 17
15832: PUSH
15833: EMPTY
15834: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15835: LD_INT 35
15837: PPUSH
15838: CALL_OW 67
// if nation = 1 then
15842: LD_VAR 0 5
15846: PUSH
15847: LD_INT 1
15849: EQUAL
15850: IFFALSE 16355
// begin uc_side = side ;
15852: LD_ADDR_OWVAR 20
15856: PUSH
15857: LD_VAR 0 2
15861: ST_TO_ADDR
// uc_nation = nation ;
15862: LD_ADDR_OWVAR 21
15866: PUSH
15867: LD_VAR 0 5
15871: ST_TO_ADDR
// vc_engine = vehengine ;
15872: LD_ADDR_OWVAR 39
15876: PUSH
15877: LD_VAR 0 6
15881: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15882: LD_ADDR_OWVAR 38
15886: PUSH
15887: LD_VAR 0 7
15891: PUSH
15892: LD_INT 1
15894: PPUSH
15895: LD_VAR 0 7
15899: PPUSH
15900: CALL_OW 12
15904: ARRAY
15905: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15906: LD_ADDR_OWVAR 40
15910: PUSH
15911: LD_VAR 0 10
15915: PUSH
15916: LD_INT 1
15918: PPUSH
15919: LD_VAR 0 10
15923: PPUSH
15924: CALL_OW 12
15928: ARRAY
15929: ST_TO_ADDR
// for j = 1 to AMWeapon do
15930: LD_ADDR_VAR 0 14
15934: PUSH
15935: DOUBLE
15936: LD_INT 1
15938: DEC
15939: ST_TO_ADDR
15940: LD_VAR 0 10
15944: PUSH
15945: FOR_TO
15946: IFFALSE 16247
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15948: LD_VAR 0 10
15952: PUSH
15953: LD_VAR 0 14
15957: ARRAY
15958: PUSH
15959: LD_INT 2
15961: EQUAL
15962: PUSH
15963: LD_VAR 0 10
15967: PUSH
15968: LD_VAR 0 14
15972: ARRAY
15973: PUSH
15974: LD_INT 3
15976: EQUAL
15977: OR
15978: IFFALSE 16031
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15980: LD_ADDR_VAR 0 19
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: LD_INT 2
15990: PUSH
15991: LD_INT 3
15993: PUSH
15994: LD_INT 4
15996: PUSH
15997: LD_INT 5
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16007: LD_ADDR_OWVAR 37
16011: PUSH
16012: LD_VAR 0 19
16016: PUSH
16017: LD_INT 1
16019: PPUSH
16020: LD_VAR 0 19
16024: PPUSH
16025: CALL_OW 12
16029: ARRAY
16030: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
16031: LD_VAR 0 10
16035: PUSH
16036: LD_VAR 0 14
16040: ARRAY
16041: PUSH
16042: LD_INT 4
16044: EQUAL
16045: PUSH
16046: LD_VAR 0 10
16050: PUSH
16051: LD_VAR 0 14
16055: ARRAY
16056: PUSH
16057: LD_INT 5
16059: EQUAL
16060: OR
16061: PUSH
16062: LD_VAR 0 10
16066: PUSH
16067: LD_VAR 0 14
16071: ARRAY
16072: PUSH
16073: LD_INT 9
16075: EQUAL
16076: OR
16077: PUSH
16078: LD_VAR 0 10
16082: PUSH
16083: LD_VAR 0 14
16087: ARRAY
16088: PUSH
16089: LD_INT 11
16091: EQUAL
16092: OR
16093: PUSH
16094: LD_VAR 0 10
16098: PUSH
16099: LD_VAR 0 14
16103: ARRAY
16104: PUSH
16105: LD_INT 7
16107: EQUAL
16108: OR
16109: IFFALSE 16158
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
16111: LD_ADDR_VAR 0 19
16115: PUSH
16116: LD_INT 2
16118: PUSH
16119: LD_INT 3
16121: PUSH
16122: LD_INT 4
16124: PUSH
16125: LD_INT 5
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16134: LD_ADDR_OWVAR 37
16138: PUSH
16139: LD_VAR 0 19
16143: PUSH
16144: LD_INT 1
16146: PPUSH
16147: LD_VAR 0 19
16151: PPUSH
16152: CALL_OW 12
16156: ARRAY
16157: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
16158: LD_VAR 0 10
16162: PUSH
16163: LD_VAR 0 14
16167: ARRAY
16168: PUSH
16169: LD_INT 8
16171: EQUAL
16172: PUSH
16173: LD_VAR 0 10
16177: PUSH
16178: LD_VAR 0 14
16182: ARRAY
16183: PUSH
16184: LD_INT 6
16186: EQUAL
16187: OR
16188: PUSH
16189: LD_VAR 0 10
16193: PUSH
16194: LD_VAR 0 14
16198: ARRAY
16199: PUSH
16200: LD_INT 10
16202: EQUAL
16203: OR
16204: IFFALSE 16245
// begin amChassisTab = [ 4 , 5 ] ;
16206: LD_ADDR_VAR 0 19
16210: PUSH
16211: LD_INT 4
16213: PUSH
16214: LD_INT 5
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16221: LD_ADDR_OWVAR 37
16225: PUSH
16226: LD_VAR 0 19
16230: PUSH
16231: LD_INT 1
16233: PPUSH
16234: LD_VAR 0 19
16238: PPUSH
16239: CALL_OW 12
16243: ARRAY
16244: ST_TO_ADDR
// end ; end ;
16245: GO 15945
16247: POP
16248: POP
// veh = CreateVehicle ;
16249: LD_ADDR_VAR 0 16
16253: PUSH
16254: CALL_OW 45
16258: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16259: LD_VAR 0 16
16263: PPUSH
16264: LD_VAR 0 1
16268: PPUSH
16269: LD_INT 0
16271: PPUSH
16272: CALL_OW 49
// if vc_control = 1 then
16276: LD_OWVAR 38
16280: PUSH
16281: LD_INT 1
16283: EQUAL
16284: IFFALSE 16341
// begin hc_gallery =  ;
16286: LD_ADDR_OWVAR 33
16290: PUSH
16291: LD_STRING 
16293: ST_TO_ADDR
// hc_name =  ;
16294: LD_ADDR_OWVAR 26
16298: PUSH
16299: LD_STRING 
16301: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16302: LD_INT 0
16304: PPUSH
16305: LD_INT 3
16307: PPUSH
16308: LD_VAR 0 4
16312: PPUSH
16313: CALL_OW 380
// un = CreateHuman ;
16317: LD_ADDR_VAR 0 15
16321: PUSH
16322: CALL_OW 44
16326: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16327: LD_VAR 0 15
16331: PPUSH
16332: LD_VAR 0 16
16336: PPUSH
16337: CALL_OW 52
// end ; i = i + 1 ;
16341: LD_ADDR_VAR 0 13
16345: PUSH
16346: LD_VAR 0 13
16350: PUSH
16351: LD_INT 1
16353: PLUS
16354: ST_TO_ADDR
// end ; if nation = 2 then
16355: LD_VAR 0 5
16359: PUSH
16360: LD_INT 2
16362: EQUAL
16363: IFFALSE 16785
// begin uc_side = side ;
16365: LD_ADDR_OWVAR 20
16369: PUSH
16370: LD_VAR 0 2
16374: ST_TO_ADDR
// uc_nation = nation ;
16375: LD_ADDR_OWVAR 21
16379: PUSH
16380: LD_VAR 0 5
16384: ST_TO_ADDR
// vc_engine = vehengine ;
16385: LD_ADDR_OWVAR 39
16389: PUSH
16390: LD_VAR 0 6
16394: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16395: LD_ADDR_OWVAR 38
16399: PUSH
16400: LD_VAR 0 7
16404: PUSH
16405: LD_INT 1
16407: PPUSH
16408: LD_VAR 0 7
16412: PPUSH
16413: CALL_OW 12
16417: ARRAY
16418: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16419: LD_ADDR_OWVAR 40
16423: PUSH
16424: LD_VAR 0 9
16428: PUSH
16429: LD_INT 1
16431: PPUSH
16432: LD_VAR 0 9
16436: PPUSH
16437: CALL_OW 12
16441: ARRAY
16442: ST_TO_ADDR
// for j = 1 to ARWeapons do
16443: LD_ADDR_VAR 0 14
16447: PUSH
16448: DOUBLE
16449: LD_INT 1
16451: DEC
16452: ST_TO_ADDR
16453: LD_VAR 0 9
16457: PUSH
16458: FOR_TO
16459: IFFALSE 16677
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16461: LD_VAR 0 9
16465: PUSH
16466: LD_VAR 0 14
16470: ARRAY
16471: PUSH
16472: LD_INT 24
16474: EQUAL
16475: PUSH
16476: LD_VAR 0 9
16480: PUSH
16481: LD_VAR 0 14
16485: ARRAY
16486: PUSH
16487: LD_INT 22
16489: EQUAL
16490: OR
16491: PUSH
16492: LD_VAR 0 9
16496: PUSH
16497: LD_VAR 0 14
16501: ARRAY
16502: PUSH
16503: LD_INT 23
16505: EQUAL
16506: OR
16507: PUSH
16508: LD_VAR 0 9
16512: PUSH
16513: LD_VAR 0 14
16517: ARRAY
16518: PUSH
16519: LD_INT 30
16521: EQUAL
16522: OR
16523: IFFALSE 16560
// begin arChassisTab = [ 14 ] ;
16525: LD_ADDR_VAR 0 18
16529: PUSH
16530: LD_INT 14
16532: PUSH
16533: EMPTY
16534: LIST
16535: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16536: LD_ADDR_OWVAR 37
16540: PUSH
16541: LD_VAR 0 18
16545: PUSH
16546: LD_INT 1
16548: PPUSH
16549: LD_VAR 0 18
16553: PPUSH
16554: CALL_OW 12
16558: ARRAY
16559: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16560: LD_VAR 0 9
16564: PUSH
16565: LD_VAR 0 14
16569: ARRAY
16570: PUSH
16571: LD_INT 29
16573: EQUAL
16574: PUSH
16575: LD_VAR 0 9
16579: PUSH
16580: LD_VAR 0 14
16584: ARRAY
16585: PUSH
16586: LD_INT 28
16588: EQUAL
16589: OR
16590: PUSH
16591: LD_VAR 0 9
16595: PUSH
16596: LD_VAR 0 14
16600: ARRAY
16601: PUSH
16602: LD_INT 27
16604: EQUAL
16605: OR
16606: PUSH
16607: LD_VAR 0 9
16611: PUSH
16612: LD_VAR 0 14
16616: ARRAY
16617: PUSH
16618: LD_INT 26
16620: EQUAL
16621: OR
16622: PUSH
16623: LD_VAR 0 9
16627: PUSH
16628: LD_VAR 0 14
16632: ARRAY
16633: PUSH
16634: LD_INT 25
16636: EQUAL
16637: OR
16638: IFFALSE 16675
// begin arChassisTab = [ 14 ] ;
16640: LD_ADDR_VAR 0 18
16644: PUSH
16645: LD_INT 14
16647: PUSH
16648: EMPTY
16649: LIST
16650: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16651: LD_ADDR_OWVAR 37
16655: PUSH
16656: LD_VAR 0 18
16660: PUSH
16661: LD_INT 1
16663: PPUSH
16664: LD_VAR 0 18
16668: PPUSH
16669: CALL_OW 12
16673: ARRAY
16674: ST_TO_ADDR
// end ; end ;
16675: GO 16458
16677: POP
16678: POP
// veh = CreateVehicle ;
16679: LD_ADDR_VAR 0 16
16683: PUSH
16684: CALL_OW 45
16688: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16689: LD_VAR 0 16
16693: PPUSH
16694: LD_VAR 0 1
16698: PPUSH
16699: LD_INT 0
16701: PPUSH
16702: CALL_OW 49
// if vc_control = 1 then
16706: LD_OWVAR 38
16710: PUSH
16711: LD_INT 1
16713: EQUAL
16714: IFFALSE 16771
// begin hc_gallery =  ;
16716: LD_ADDR_OWVAR 33
16720: PUSH
16721: LD_STRING 
16723: ST_TO_ADDR
// hc_name =  ;
16724: LD_ADDR_OWVAR 26
16728: PUSH
16729: LD_STRING 
16731: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16732: LD_INT 0
16734: PPUSH
16735: LD_INT 3
16737: PPUSH
16738: LD_VAR 0 4
16742: PPUSH
16743: CALL_OW 380
// un = CreateHuman ;
16747: LD_ADDR_VAR 0 15
16751: PUSH
16752: CALL_OW 44
16756: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16757: LD_VAR 0 15
16761: PPUSH
16762: LD_VAR 0 16
16766: PPUSH
16767: CALL_OW 52
// end ; i = i + 1 ;
16771: LD_ADDR_VAR 0 13
16775: PUSH
16776: LD_VAR 0 13
16780: PUSH
16781: LD_INT 1
16783: PLUS
16784: ST_TO_ADDR
// end ; if nation = 3 then
16785: LD_VAR 0 5
16789: PUSH
16790: LD_INT 3
16792: EQUAL
16793: IFFALSE 17199
// begin uc_side = side ;
16795: LD_ADDR_OWVAR 20
16799: PUSH
16800: LD_VAR 0 2
16804: ST_TO_ADDR
// uc_nation = nation ;
16805: LD_ADDR_OWVAR 21
16809: PUSH
16810: LD_VAR 0 5
16814: ST_TO_ADDR
// vc_engine = vehengine ;
16815: LD_ADDR_OWVAR 39
16819: PUSH
16820: LD_VAR 0 6
16824: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16825: LD_ADDR_OWVAR 38
16829: PUSH
16830: LD_VAR 0 7
16834: PUSH
16835: LD_INT 1
16837: PPUSH
16838: LD_VAR 0 7
16842: PPUSH
16843: CALL_OW 12
16847: ARRAY
16848: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16849: LD_ADDR_OWVAR 40
16853: PUSH
16854: LD_VAR 0 8
16858: PUSH
16859: LD_INT 1
16861: PPUSH
16862: LD_VAR 0 8
16866: PPUSH
16867: CALL_OW 12
16871: ARRAY
16872: ST_TO_ADDR
// for j = 1 to RuWeapons do
16873: LD_ADDR_VAR 0 14
16877: PUSH
16878: DOUBLE
16879: LD_INT 1
16881: DEC
16882: ST_TO_ADDR
16883: LD_VAR 0 8
16887: PUSH
16888: FOR_TO
16889: IFFALSE 17091
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16891: LD_VAR 0 8
16895: PUSH
16896: LD_VAR 0 14
16900: ARRAY
16901: PUSH
16902: LD_INT 42
16904: EQUAL
16905: PUSH
16906: LD_VAR 0 8
16910: PUSH
16911: LD_VAR 0 14
16915: ARRAY
16916: PUSH
16917: LD_INT 43
16919: EQUAL
16920: OR
16921: PUSH
16922: LD_VAR 0 8
16926: PUSH
16927: LD_VAR 0 14
16931: ARRAY
16932: PUSH
16933: LD_INT 44
16935: EQUAL
16936: OR
16937: PUSH
16938: LD_VAR 0 8
16942: PUSH
16943: LD_VAR 0 14
16947: ARRAY
16948: PUSH
16949: LD_INT 45
16951: EQUAL
16952: OR
16953: PUSH
16954: LD_VAR 0 8
16958: PUSH
16959: LD_VAR 0 14
16963: ARRAY
16964: PUSH
16965: LD_INT 49
16967: EQUAL
16968: OR
16969: IFFALSE 17018
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16971: LD_ADDR_VAR 0 17
16975: PUSH
16976: LD_INT 21
16978: PUSH
16979: LD_INT 22
16981: PUSH
16982: LD_INT 23
16984: PUSH
16985: LD_INT 24
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16994: LD_ADDR_OWVAR 37
16998: PUSH
16999: LD_VAR 0 17
17003: PUSH
17004: LD_INT 1
17006: PPUSH
17007: LD_VAR 0 17
17011: PPUSH
17012: CALL_OW 12
17016: ARRAY
17017: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
17018: LD_VAR 0 8
17022: PUSH
17023: LD_VAR 0 14
17027: ARRAY
17028: PUSH
17029: LD_INT 46
17031: EQUAL
17032: PUSH
17033: LD_VAR 0 8
17037: PUSH
17038: LD_VAR 0 14
17042: ARRAY
17043: PUSH
17044: LD_INT 47
17046: EQUAL
17047: OR
17048: IFFALSE 17089
// begin ruChassisTab = [ 23 , 24 ] ;
17050: LD_ADDR_VAR 0 17
17054: PUSH
17055: LD_INT 23
17057: PUSH
17058: LD_INT 24
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
17065: LD_ADDR_OWVAR 37
17069: PUSH
17070: LD_VAR 0 17
17074: PUSH
17075: LD_INT 1
17077: PPUSH
17078: LD_VAR 0 17
17082: PPUSH
17083: CALL_OW 12
17087: ARRAY
17088: ST_TO_ADDR
// end ; end ;
17089: GO 16888
17091: POP
17092: POP
// veh = CreateVehicle ;
17093: LD_ADDR_VAR 0 16
17097: PUSH
17098: CALL_OW 45
17102: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17103: LD_VAR 0 16
17107: PPUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: LD_INT 0
17115: PPUSH
17116: CALL_OW 49
// if vc_control = 1 then
17120: LD_OWVAR 38
17124: PUSH
17125: LD_INT 1
17127: EQUAL
17128: IFFALSE 17185
// begin hc_gallery =  ;
17130: LD_ADDR_OWVAR 33
17134: PUSH
17135: LD_STRING 
17137: ST_TO_ADDR
// hc_name =  ;
17138: LD_ADDR_OWVAR 26
17142: PUSH
17143: LD_STRING 
17145: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17146: LD_INT 0
17148: PPUSH
17149: LD_INT 3
17151: PPUSH
17152: LD_VAR 0 4
17156: PPUSH
17157: CALL_OW 380
// un = CreateHuman ;
17161: LD_ADDR_VAR 0 15
17165: PUSH
17166: CALL_OW 44
17170: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17171: LD_VAR 0 15
17175: PPUSH
17176: LD_VAR 0 16
17180: PPUSH
17181: CALL_OW 52
// end ; i = i + 1 ;
17185: LD_ADDR_VAR 0 13
17189: PUSH
17190: LD_VAR 0 13
17194: PUSH
17195: LD_INT 1
17197: PLUS
17198: ST_TO_ADDR
// end ; until i = vehCount ;
17199: LD_VAR 0 13
17203: PUSH
17204: LD_VAR 0 3
17208: EQUAL
17209: IFFALSE 15835
// repeat wait ( 0 0$1 ) ;
17211: LD_INT 35
17213: PPUSH
17214: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17218: LD_ADDR_VAR 0 20
17222: PUSH
17223: LD_INT 22
17225: PUSH
17226: LD_VAR 0 2
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 21
17237: PUSH
17238: LD_INT 2
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 24
17247: PUSH
17248: LD_INT 650
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: LIST
17259: PPUSH
17260: CALL_OW 69
17264: ST_TO_ADDR
// if vehicleOK_list > 0 then
17265: LD_VAR 0 20
17269: PUSH
17270: LD_INT 0
17272: GREATER
17273: IFFALSE 17464
// begin for i in vehicleOK_list do
17275: LD_ADDR_VAR 0 13
17279: PUSH
17280: LD_VAR 0 20
17284: PUSH
17285: FOR_IN
17286: IFFALSE 17462
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17288: LD_ADDR_VAR 0 21
17292: PUSH
17293: LD_INT 22
17295: PUSH
17296: LD_VAR 0 11
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PPUSH
17305: CALL_OW 69
17309: PPUSH
17310: LD_VAR 0 13
17314: PPUSH
17315: CALL_OW 74
17319: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17320: LD_ADDR_VAR 0 22
17324: PUSH
17325: LD_INT 22
17327: PUSH
17328: LD_VAR 0 11
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 2
17339: PUSH
17340: LD_INT 59
17342: PUSH
17343: EMPTY
17344: LIST
17345: PUSH
17346: LD_INT 21
17348: PUSH
17349: LD_INT 1
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 21
17358: PUSH
17359: LD_INT 2
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: EMPTY
17377: LIST
17378: PPUSH
17379: CALL_OW 69
17383: PPUSH
17384: LD_VAR 0 13
17388: PPUSH
17389: CALL_OW 74
17393: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17394: LD_VAR 0 13
17398: PPUSH
17399: LD_VAR 0 21
17403: PPUSH
17404: CALL_OW 296
17408: PUSH
17409: LD_INT 8
17411: PLUS
17412: PUSH
17413: LD_VAR 0 13
17417: PPUSH
17418: LD_VAR 0 22
17422: PPUSH
17423: CALL_OW 296
17427: LESS
17428: IFFALSE 17446
// begin ComAttackUnit ( i , target1 ) ;
17430: LD_VAR 0 13
17434: PPUSH
17435: LD_VAR 0 21
17439: PPUSH
17440: CALL_OW 115
// end else
17444: GO 17460
// begin ComAttackUnit ( i , target2 ) ;
17446: LD_VAR 0 13
17450: PPUSH
17451: LD_VAR 0 22
17455: PPUSH
17456: CALL_OW 115
// end ; end ;
17460: GO 17285
17462: POP
17463: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17464: LD_INT 22
17466: PUSH
17467: LD_VAR 0 2
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 21
17478: PUSH
17479: LD_INT 2
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PPUSH
17490: CALL_OW 69
17494: PUSH
17495: LD_INT 0
17497: EQUAL
17498: IFFALSE 17211
// end ;
17500: LD_VAR 0 12
17504: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17505: LD_INT 0
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
17511: PPUSH
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
17516: PPUSH
17517: PPUSH
// for i = 1 to soldierCount do
17518: LD_ADDR_VAR 0 13
17522: PUSH
17523: DOUBLE
17524: LD_INT 1
17526: DEC
17527: ST_TO_ADDR
17528: LD_VAR 0 3
17532: PUSH
17533: FOR_TO
17534: IFFALSE 17616
// begin uc_side = side ;
17536: LD_ADDR_OWVAR 20
17540: PUSH
17541: LD_VAR 0 1
17545: ST_TO_ADDR
// uc_nation = nation ;
17546: LD_ADDR_OWVAR 21
17550: PUSH
17551: LD_VAR 0 2
17555: ST_TO_ADDR
// hc_name =  ;
17556: LD_ADDR_OWVAR 26
17560: PUSH
17561: LD_STRING 
17563: ST_TO_ADDR
// hc_gallery =  ;
17564: LD_ADDR_OWVAR 33
17568: PUSH
17569: LD_STRING 
17571: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17572: LD_INT 0
17574: PPUSH
17575: LD_INT 1
17577: PPUSH
17578: LD_VAR 0 8
17582: PPUSH
17583: CALL_OW 380
// un = CreateHuman ;
17587: LD_ADDR_VAR 0 15
17591: PUSH
17592: CALL_OW 44
17596: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17597: LD_VAR 0 15
17601: PPUSH
17602: LD_VAR 0 9
17606: PPUSH
17607: LD_INT 0
17609: PPUSH
17610: CALL_OW 49
// end ;
17614: GO 17533
17616: POP
17617: POP
// for i = 1 to sniperCount do
17618: LD_ADDR_VAR 0 13
17622: PUSH
17623: DOUBLE
17624: LD_INT 1
17626: DEC
17627: ST_TO_ADDR
17628: LD_VAR 0 4
17632: PUSH
17633: FOR_TO
17634: IFFALSE 17716
// begin uc_side = side ;
17636: LD_ADDR_OWVAR 20
17640: PUSH
17641: LD_VAR 0 1
17645: ST_TO_ADDR
// uc_nation = nation ;
17646: LD_ADDR_OWVAR 21
17650: PUSH
17651: LD_VAR 0 2
17655: ST_TO_ADDR
// hc_name =  ;
17656: LD_ADDR_OWVAR 26
17660: PUSH
17661: LD_STRING 
17663: ST_TO_ADDR
// hc_gallery =  ;
17664: LD_ADDR_OWVAR 33
17668: PUSH
17669: LD_STRING 
17671: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17672: LD_INT 0
17674: PPUSH
17675: LD_INT 5
17677: PPUSH
17678: LD_VAR 0 8
17682: PPUSH
17683: CALL_OW 380
// un = CreateHuman ;
17687: LD_ADDR_VAR 0 15
17691: PUSH
17692: CALL_OW 44
17696: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17697: LD_VAR 0 15
17701: PPUSH
17702: LD_VAR 0 9
17706: PPUSH
17707: LD_INT 0
17709: PPUSH
17710: CALL_OW 49
// end ;
17714: GO 17633
17716: POP
17717: POP
// for i = 1 to bazookCount do
17718: LD_ADDR_VAR 0 13
17722: PUSH
17723: DOUBLE
17724: LD_INT 1
17726: DEC
17727: ST_TO_ADDR
17728: LD_VAR 0 5
17732: PUSH
17733: FOR_TO
17734: IFFALSE 17816
// begin uc_side = side ;
17736: LD_ADDR_OWVAR 20
17740: PUSH
17741: LD_VAR 0 1
17745: ST_TO_ADDR
// uc_nation = nation ;
17746: LD_ADDR_OWVAR 21
17750: PUSH
17751: LD_VAR 0 2
17755: ST_TO_ADDR
// hc_name =  ;
17756: LD_ADDR_OWVAR 26
17760: PUSH
17761: LD_STRING 
17763: ST_TO_ADDR
// hc_gallery =  ;
17764: LD_ADDR_OWVAR 33
17768: PUSH
17769: LD_STRING 
17771: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17772: LD_INT 0
17774: PPUSH
17775: LD_INT 9
17777: PPUSH
17778: LD_VAR 0 8
17782: PPUSH
17783: CALL_OW 380
// un = CreateHuman ;
17787: LD_ADDR_VAR 0 15
17791: PUSH
17792: CALL_OW 44
17796: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17797: LD_VAR 0 15
17801: PPUSH
17802: LD_VAR 0 9
17806: PPUSH
17807: LD_INT 0
17809: PPUSH
17810: CALL_OW 49
// end ;
17814: GO 17733
17816: POP
17817: POP
// for i = 1 to mortalCount do
17818: LD_ADDR_VAR 0 13
17822: PUSH
17823: DOUBLE
17824: LD_INT 1
17826: DEC
17827: ST_TO_ADDR
17828: LD_VAR 0 6
17832: PUSH
17833: FOR_TO
17834: IFFALSE 17916
// begin uc_side = side ;
17836: LD_ADDR_OWVAR 20
17840: PUSH
17841: LD_VAR 0 1
17845: ST_TO_ADDR
// uc_nation = nation ;
17846: LD_ADDR_OWVAR 21
17850: PUSH
17851: LD_VAR 0 2
17855: ST_TO_ADDR
// hc_name =  ;
17856: LD_ADDR_OWVAR 26
17860: PUSH
17861: LD_STRING 
17863: ST_TO_ADDR
// hc_gallery =  ;
17864: LD_ADDR_OWVAR 33
17868: PUSH
17869: LD_STRING 
17871: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17872: LD_INT 0
17874: PPUSH
17875: LD_INT 8
17877: PPUSH
17878: LD_VAR 0 8
17882: PPUSH
17883: CALL_OW 380
// un = CreateHuman ;
17887: LD_ADDR_VAR 0 15
17891: PUSH
17892: CALL_OW 44
17896: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17897: LD_VAR 0 15
17901: PPUSH
17902: LD_VAR 0 9
17906: PPUSH
17907: LD_INT 0
17909: PPUSH
17910: CALL_OW 49
// end ;
17914: GO 17833
17916: POP
17917: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17918: LD_ADDR_VAR 0 18
17922: PUSH
17923: LD_INT 22
17925: PUSH
17926: LD_VAR 0 1
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 2
17937: PUSH
17938: LD_INT 25
17940: PUSH
17941: LD_INT 1
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 25
17950: PUSH
17951: LD_INT 5
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 25
17960: PUSH
17961: LD_INT 8
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 25
17970: PUSH
17971: LD_INT 9
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PPUSH
17989: CALL_OW 69
17993: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17994: LD_ADDR_VAR 0 17
17998: PUSH
17999: LD_INT 22
18001: PUSH
18002: LD_VAR 0 1
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 25
18013: PUSH
18014: LD_INT 4
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PPUSH
18025: CALL_OW 69
18029: ST_TO_ADDR
// for i in medic_list do
18030: LD_ADDR_VAR 0 13
18034: PUSH
18035: LD_VAR 0 17
18039: PUSH
18040: FOR_IN
18041: IFFALSE 18059
// ComMoveToArea ( i , healArea ) ;
18043: LD_VAR 0 13
18047: PPUSH
18048: LD_VAR 0 10
18052: PPUSH
18053: CALL_OW 113
18057: GO 18040
18059: POP
18060: POP
// repeat wait ( 0 0$1 ) ;
18061: LD_INT 35
18063: PPUSH
18064: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
18068: LD_ADDR_VAR 0 16
18072: PUSH
18073: LD_INT 22
18075: PUSH
18076: LD_VAR 0 1
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 1
18087: PUSH
18088: LD_INT 3
18090: PUSH
18091: LD_INT 24
18093: PUSH
18094: LD_INT 550
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 24
18107: PUSH
18108: LD_INT 250
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: LIST
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PPUSH
18124: CALL_OW 69
18128: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
18129: LD_ADDR_VAR 0 18
18133: PUSH
18134: LD_INT 22
18136: PUSH
18137: LD_VAR 0 1
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 2
18148: PUSH
18149: LD_INT 25
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 25
18161: PUSH
18162: LD_INT 5
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 25
18171: PUSH
18172: LD_INT 8
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 25
18181: PUSH
18182: LD_INT 9
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 24
18198: PUSH
18199: LD_INT 1000
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: LIST
18210: PPUSH
18211: CALL_OW 69
18215: ST_TO_ADDR
// if medicCount > 0 then
18216: LD_VAR 0 7
18220: PUSH
18221: LD_INT 0
18223: GREATER
18224: IFFALSE 18298
// begin if damageUnit_list > 0 then
18226: LD_VAR 0 16
18230: PUSH
18231: LD_INT 0
18233: GREATER
18234: IFFALSE 18298
// begin for i in damageUnit_list do
18236: LD_ADDR_VAR 0 13
18240: PUSH
18241: LD_VAR 0 16
18245: PUSH
18246: FOR_IN
18247: IFFALSE 18296
// begin ComMoveToArea ( i , healArea ) ;
18249: LD_VAR 0 13
18253: PPUSH
18254: LD_VAR 0 10
18258: PPUSH
18259: CALL_OW 113
// for j in medic_list do
18263: LD_ADDR_VAR 0 14
18267: PUSH
18268: LD_VAR 0 17
18272: PUSH
18273: FOR_IN
18274: IFFALSE 18292
// AddComHeal ( j , i ) ;
18276: LD_VAR 0 14
18280: PPUSH
18281: LD_VAR 0 13
18285: PPUSH
18286: CALL_OW 188
18290: GO 18273
18292: POP
18293: POP
// end ;
18294: GO 18246
18296: POP
18297: POP
// end ; end ; for i in soldiersOK_list do
18298: LD_ADDR_VAR 0 13
18302: PUSH
18303: LD_VAR 0 18
18307: PUSH
18308: FOR_IN
18309: IFFALSE 18485
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18311: LD_ADDR_VAR 0 21
18315: PUSH
18316: LD_INT 22
18318: PUSH
18319: LD_VAR 0 11
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PPUSH
18328: CALL_OW 69
18332: PPUSH
18333: LD_VAR 0 13
18337: PPUSH
18338: CALL_OW 74
18342: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18343: LD_ADDR_VAR 0 22
18347: PUSH
18348: LD_INT 22
18350: PUSH
18351: LD_VAR 0 11
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: LD_INT 59
18365: PUSH
18366: EMPTY
18367: LIST
18368: PUSH
18369: LD_INT 21
18371: PUSH
18372: LD_INT 1
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 21
18381: PUSH
18382: LD_INT 2
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: EMPTY
18400: LIST
18401: PPUSH
18402: CALL_OW 69
18406: PPUSH
18407: LD_VAR 0 13
18411: PPUSH
18412: CALL_OW 74
18416: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18417: LD_VAR 0 13
18421: PPUSH
18422: LD_VAR 0 21
18426: PPUSH
18427: CALL_OW 296
18431: PUSH
18432: LD_INT 8
18434: PLUS
18435: PUSH
18436: LD_VAR 0 13
18440: PPUSH
18441: LD_VAR 0 22
18445: PPUSH
18446: CALL_OW 296
18450: LESS
18451: IFFALSE 18469
// begin ComAttackUnit ( i , target1 ) ;
18453: LD_VAR 0 13
18457: PPUSH
18458: LD_VAR 0 21
18462: PPUSH
18463: CALL_OW 115
// end else
18467: GO 18483
// begin ComAttackUnit ( i , target2 ) ;
18469: LD_VAR 0 13
18473: PPUSH
18474: LD_VAR 0 22
18478: PPUSH
18479: CALL_OW 115
// end ; end ;
18483: GO 18308
18485: POP
18486: POP
// for i in soldiersOK_list do
18487: LD_ADDR_VAR 0 13
18491: PUSH
18492: LD_VAR 0 18
18496: PUSH
18497: FOR_IN
18498: IFFALSE 18674
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18500: LD_ADDR_VAR 0 21
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_VAR 0 11
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PPUSH
18517: CALL_OW 69
18521: PPUSH
18522: LD_VAR 0 13
18526: PPUSH
18527: CALL_OW 74
18531: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18532: LD_ADDR_VAR 0 22
18536: PUSH
18537: LD_INT 22
18539: PUSH
18540: LD_VAR 0 11
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 2
18551: PUSH
18552: LD_INT 59
18554: PUSH
18555: EMPTY
18556: LIST
18557: PUSH
18558: LD_INT 21
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 21
18570: PUSH
18571: LD_INT 2
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: EMPTY
18589: LIST
18590: PPUSH
18591: CALL_OW 69
18595: PPUSH
18596: LD_VAR 0 13
18600: PPUSH
18601: CALL_OW 74
18605: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18606: LD_VAR 0 13
18610: PPUSH
18611: LD_VAR 0 21
18615: PPUSH
18616: CALL_OW 296
18620: PUSH
18621: LD_INT 8
18623: PLUS
18624: PUSH
18625: LD_VAR 0 13
18629: PPUSH
18630: LD_VAR 0 22
18634: PPUSH
18635: CALL_OW 296
18639: LESS
18640: IFFALSE 18658
// begin ComAttackUnit ( i , target1 ) ;
18642: LD_VAR 0 13
18646: PPUSH
18647: LD_VAR 0 21
18651: PPUSH
18652: CALL_OW 115
// end else
18656: GO 18672
// begin ComAttackUnit ( i , target2 ) ;
18658: LD_VAR 0 13
18662: PPUSH
18663: LD_VAR 0 22
18667: PPUSH
18668: CALL_OW 115
// end ; end ;
18672: GO 18497
18674: POP
18675: POP
// until soldiersOK_list = [ ] ;
18676: LD_VAR 0 18
18680: PUSH
18681: EMPTY
18682: EQUAL
18683: IFFALSE 18061
// end ;
18685: LD_VAR 0 12
18689: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
18690: LD_INT 0
18692: PPUSH
18693: PPUSH
18694: PPUSH
18695: PPUSH
18696: PPUSH
18697: PPUSH
18698: PPUSH
// repeat wait ( 0 0$1 ) ;
18699: LD_INT 35
18701: PPUSH
18702: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
18706: LD_ADDR_VAR 0 7
18710: PUSH
18711: LD_INT 22
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 25
18723: PUSH
18724: LD_INT 4
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 3
18733: PUSH
18734: LD_INT 60
18736: PUSH
18737: EMPTY
18738: LIST
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: PPUSH
18749: CALL_OW 69
18753: ST_TO_ADDR
// if not tmp then
18754: LD_VAR 0 7
18758: NOT
18759: IFFALSE 18763
// continue ;
18761: GO 18699
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18763: LD_ADDR_VAR 0 3
18767: PUSH
18768: LD_INT 5
18770: PPUSH
18771: LD_INT 22
18773: PUSH
18774: LD_INT 0
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 25
18783: PUSH
18784: LD_INT 12
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PPUSH
18795: CALL_OW 70
18799: PUSH
18800: FOR_IN
18801: IFFALSE 18834
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
18803: LD_VAR 0 7
18807: PPUSH
18808: LD_VAR 0 3
18812: PPUSH
18813: CALL_OW 250
18817: PPUSH
18818: LD_VAR 0 3
18822: PPUSH
18823: CALL_OW 251
18827: PPUSH
18828: CALL_OW 131
18832: GO 18800
18834: POP
18835: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
18836: LD_INT 22
18838: PUSH
18839: LD_INT 2
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 25
18848: PUSH
18849: LD_INT 4
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PPUSH
18860: CALL_OW 69
18864: PUSH
18865: LD_INT 0
18867: EQUAL
18868: PUSH
18869: LD_INT 5
18871: PPUSH
18872: LD_INT 22
18874: PUSH
18875: LD_INT 0
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 25
18884: PUSH
18885: LD_INT 12
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PPUSH
18896: CALL_OW 70
18900: PUSH
18901: LD_INT 2
18903: LESS
18904: OR
18905: PUSH
18906: LD_OWVAR 1
18910: PUSH
18911: LD_INT 7000
18913: GREATEREQUAL
18914: OR
18915: IFFALSE 18699
// repeat wait ( 0 0$1 ) ;
18917: LD_INT 35
18919: PPUSH
18920: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
18924: LD_ADDR_VAR 0 5
18928: PUSH
18929: LD_INT 22
18931: PUSH
18932: LD_INT 2
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 30
18941: PUSH
18942: LD_INT 5
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PPUSH
18953: CALL_OW 69
18957: ST_TO_ADDR
// until arm ;
18958: LD_VAR 0 5
18962: IFFALSE 18917
// wait ( 0 0$25 ) ;
18964: LD_INT 875
18966: PPUSH
18967: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18971: LD_ADDR_VAR 0 6
18975: PUSH
18976: LD_INT 22
18978: PUSH
18979: LD_INT 2
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 2
18988: PUSH
18989: LD_INT 30
18991: PUSH
18992: LD_INT 0
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 30
19001: PUSH
19002: LD_INT 1
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: LIST
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PPUSH
19018: CALL_OW 69
19022: ST_TO_ADDR
// j := 0 ;
19023: LD_ADDR_VAR 0 3
19027: PUSH
19028: LD_INT 0
19030: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
19031: LD_ADDR_VAR 0 2
19035: PUSH
19036: LD_INT 22
19038: PUSH
19039: LD_INT 2
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 25
19048: PUSH
19049: LD_INT 12
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PPUSH
19060: CALL_OW 69
19064: PUSH
19065: FOR_IN
19066: IFFALSE 19153
// begin ComMoveXY ( i , 63 , 16 ) ;
19068: LD_VAR 0 2
19072: PPUSH
19073: LD_INT 63
19075: PPUSH
19076: LD_INT 16
19078: PPUSH
19079: CALL_OW 111
// j := j + 1 ;
19083: LD_ADDR_VAR 0 3
19087: PUSH
19088: LD_VAR 0 3
19092: PUSH
19093: LD_INT 1
19095: PLUS
19096: ST_TO_ADDR
// if j < 5 then
19097: LD_VAR 0 3
19101: PUSH
19102: LD_INT 5
19104: LESS
19105: IFFALSE 19123
// b := arm [ 1 ] else
19107: LD_ADDR_VAR 0 4
19111: PUSH
19112: LD_VAR 0 5
19116: PUSH
19117: LD_INT 1
19119: ARRAY
19120: ST_TO_ADDR
19121: GO 19137
// b := dep [ 1 ] ;
19123: LD_ADDR_VAR 0 4
19127: PUSH
19128: LD_VAR 0 6
19132: PUSH
19133: LD_INT 1
19135: ARRAY
19136: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
19137: LD_VAR 0 2
19141: PPUSH
19142: LD_VAR 0 4
19146: PPUSH
19147: CALL_OW 180
// end ;
19151: GO 19065
19153: POP
19154: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
19155: LD_ADDR_VAR 0 2
19159: PUSH
19160: LD_INT 22
19162: PUSH
19163: LD_INT 2
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 25
19172: PUSH
19173: LD_INT 4
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PPUSH
19184: CALL_OW 69
19188: PUSH
19189: FOR_IN
19190: IFFALSE 19236
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
19192: LD_VAR 0 2
19196: PPUSH
19197: LD_INT 22
19199: PUSH
19200: LD_INT 2
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 30
19209: PUSH
19210: LD_INT 8
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PPUSH
19221: CALL_OW 69
19225: PUSH
19226: LD_INT 1
19228: ARRAY
19229: PPUSH
19230: CALL_OW 120
19234: GO 19189
19236: POP
19237: POP
// end ;
19238: LD_VAR 0 1
19242: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
19243: LD_INT 0
19245: PPUSH
19246: PPUSH
19247: PPUSH
19248: PPUSH
19249: PPUSH
19250: PPUSH
19251: PPUSH
19252: PPUSH
19253: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
19254: LD_INT 22
19256: PUSH
19257: LD_VAR 0 1
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 21
19268: PUSH
19269: LD_INT 2
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PPUSH
19280: CALL_OW 69
19284: PUSH
19285: LD_VAR 0 3
19289: LESSEQUAL
19290: IFFALSE 19434
// for i = 1 to vehCount do
19292: LD_ADDR_VAR 0 10
19296: PUSH
19297: DOUBLE
19298: LD_INT 1
19300: DEC
19301: ST_TO_ADDR
19302: LD_VAR 0 3
19306: PUSH
19307: FOR_TO
19308: IFFALSE 19432
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
19310: LD_ADDR_VAR 0 12
19314: PUSH
19315: LD_VAR 0 5
19319: PUSH
19320: LD_INT 1
19322: PPUSH
19323: LD_VAR 0 5
19327: PPUSH
19328: CALL_OW 12
19332: ARRAY
19333: ST_TO_ADDR
// if randWeapon = 46 then
19334: LD_VAR 0 12
19338: PUSH
19339: LD_INT 46
19341: EQUAL
19342: IFFALSE 19387
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
19344: LD_VAR 0 2
19348: PPUSH
19349: LD_INT 24
19351: PPUSH
19352: LD_VAR 0 6
19356: PPUSH
19357: LD_VAR 0 7
19361: PUSH
19362: LD_INT 1
19364: PPUSH
19365: LD_VAR 0 7
19369: PPUSH
19370: CALL_OW 12
19374: ARRAY
19375: PPUSH
19376: LD_VAR 0 12
19380: PPUSH
19381: CALL_OW 185
19385: GO 19430
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19387: LD_VAR 0 2
19391: PPUSH
19392: LD_VAR 0 8
19396: PPUSH
19397: LD_VAR 0 6
19401: PPUSH
19402: LD_VAR 0 7
19406: PUSH
19407: LD_INT 1
19409: PPUSH
19410: LD_VAR 0 7
19414: PPUSH
19415: CALL_OW 12
19419: ARRAY
19420: PPUSH
19421: LD_VAR 0 12
19425: PPUSH
19426: CALL_OW 185
// end ;
19430: GO 19307
19432: POP
19433: POP
// repeat wait ( 0 0$1 ) ;
19434: LD_INT 35
19436: PPUSH
19437: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19441: LD_INT 22
19443: PUSH
19444: LD_VAR 0 1
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 21
19455: PUSH
19456: LD_INT 2
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 24
19465: PUSH
19466: LD_INT 250
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: PPUSH
19478: CALL_OW 69
19482: PUSH
19483: LD_VAR 0 3
19487: GREATEREQUAL
19488: IFFALSE 19434
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19490: LD_INT 22
19492: PUSH
19493: LD_VAR 0 1
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 21
19504: PUSH
19505: LD_INT 2
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 24
19514: PUSH
19515: LD_INT 250
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: PPUSH
19527: CALL_OW 69
19531: PUSH
19532: LD_VAR 0 3
19536: GREATEREQUAL
19537: IFFALSE 19880
// begin repeat begin wait ( 0 0$1 ) ;
19539: LD_INT 35
19541: PPUSH
19542: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19546: LD_INT 22
19548: PUSH
19549: LD_VAR 0 1
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 21
19560: PUSH
19561: LD_INT 2
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 24
19570: PUSH
19571: LD_INT 651
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: LIST
19582: PPUSH
19583: CALL_OW 69
19587: PUSH
19588: LD_INT 0
19590: GREATER
19591: IFFALSE 19819
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19593: LD_ADDR_VAR 0 10
19597: PUSH
19598: LD_INT 22
19600: PUSH
19601: LD_VAR 0 1
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 21
19612: PUSH
19613: LD_INT 2
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 24
19622: PUSH
19623: LD_INT 651
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: PPUSH
19635: CALL_OW 69
19639: PUSH
19640: FOR_IN
19641: IFFALSE 19817
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19643: LD_ADDR_VAR 0 16
19647: PUSH
19648: LD_INT 22
19650: PUSH
19651: LD_VAR 0 4
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PPUSH
19660: CALL_OW 69
19664: PPUSH
19665: LD_VAR 0 10
19669: PPUSH
19670: CALL_OW 74
19674: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19675: LD_ADDR_VAR 0 17
19679: PUSH
19680: LD_INT 22
19682: PUSH
19683: LD_VAR 0 4
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: LD_INT 2
19694: PUSH
19695: LD_INT 59
19697: PUSH
19698: EMPTY
19699: LIST
19700: PUSH
19701: LD_INT 21
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 21
19713: PUSH
19714: LD_INT 2
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: EMPTY
19732: LIST
19733: PPUSH
19734: CALL_OW 69
19738: PPUSH
19739: LD_VAR 0 10
19743: PPUSH
19744: CALL_OW 74
19748: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19749: LD_VAR 0 10
19753: PPUSH
19754: LD_VAR 0 16
19758: PPUSH
19759: CALL_OW 296
19763: PUSH
19764: LD_INT 8
19766: PLUS
19767: PUSH
19768: LD_VAR 0 10
19772: PPUSH
19773: LD_VAR 0 17
19777: PPUSH
19778: CALL_OW 296
19782: LESS
19783: IFFALSE 19801
// begin ComAttackUnit ( i , target1 ) ;
19785: LD_VAR 0 10
19789: PPUSH
19790: LD_VAR 0 16
19794: PPUSH
19795: CALL_OW 115
// end else
19799: GO 19815
// begin ComAttackUnit ( i , target2 ) ;
19801: LD_VAR 0 10
19805: PPUSH
19806: LD_VAR 0 17
19810: PPUSH
19811: CALL_OW 115
// end ; end ;
19815: GO 19640
19817: POP
19818: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19819: LD_INT 22
19821: PUSH
19822: LD_VAR 0 1
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 21
19833: PUSH
19834: LD_INT 2
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PPUSH
19845: CALL_OW 69
19849: PUSH
19850: LD_INT 0
19852: EQUAL
19853: PUSH
19854: LD_INT 22
19856: PUSH
19857: LD_VAR 0 4
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: EMPTY
19867: LIST
19868: PPUSH
19869: CALL_OW 69
19873: PUSH
19874: LD_INT 0
19876: EQUAL
19877: OR
19878: IFFALSE 19539
// end ; end ;
19880: LD_VAR 0 9
19884: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19885: LD_INT 0
19887: PPUSH
19888: PPUSH
19889: PPUSH
19890: PPUSH
// r := 100 ;
19891: LD_ADDR_VAR 0 5
19895: PUSH
19896: LD_INT 100
19898: ST_TO_ADDR
// x := 0 ;
19899: LD_ADDR_VAR 0 6
19903: PUSH
19904: LD_INT 0
19906: ST_TO_ADDR
// while ( x < n ) do
19907: LD_VAR 0 6
19911: PUSH
19912: LD_VAR 0 2
19916: LESS
19917: IFFALSE 20204
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19919: LD_ADDR_VAR 0 4
19923: PUSH
19924: DOUBLE
19925: LD_INT 1
19927: DEC
19928: ST_TO_ADDR
19929: LD_VAR 0 1
19933: PPUSH
19934: LD_INT 0
19936: PPUSH
19937: CALL_OW 517
19941: PUSH
19942: LD_INT 1
19944: ARRAY
19945: PUSH
19946: FOR_TO
19947: IFFALSE 20200
// begin if r > 50 then
19949: LD_VAR 0 5
19953: PUSH
19954: LD_INT 50
19956: GREATER
19957: IFFALSE 20176
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19959: LD_VAR 0 1
19963: PPUSH
19964: LD_INT 0
19966: PPUSH
19967: CALL_OW 517
19971: PUSH
19972: LD_INT 1
19974: ARRAY
19975: PUSH
19976: LD_VAR 0 4
19980: ARRAY
19981: PPUSH
19982: LD_VAR 0 1
19986: PPUSH
19987: LD_INT 0
19989: PPUSH
19990: CALL_OW 517
19994: PUSH
19995: LD_INT 2
19997: ARRAY
19998: PUSH
19999: LD_VAR 0 4
20003: ARRAY
20004: PPUSH
20005: CALL_OW 458
20009: NOT
20010: IFFALSE 20160
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
20012: LD_VAR 0 1
20016: PPUSH
20017: LD_INT 0
20019: PPUSH
20020: CALL_OW 517
20024: PUSH
20025: LD_INT 1
20027: ARRAY
20028: PUSH
20029: LD_VAR 0 4
20033: ARRAY
20034: PPUSH
20035: LD_VAR 0 1
20039: PPUSH
20040: LD_INT 0
20042: PPUSH
20043: CALL_OW 517
20047: PUSH
20048: LD_INT 2
20050: ARRAY
20051: PUSH
20052: LD_VAR 0 4
20056: ARRAY
20057: PPUSH
20058: LD_INT 5
20060: PPUSH
20061: LD_INT 0
20063: PPUSH
20064: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
20068: LD_ADDR_EXP 50
20072: PUSH
20073: LD_EXP 50
20077: PPUSH
20078: LD_INT 1
20080: PPUSH
20081: LD_VAR 0 1
20085: PPUSH
20086: LD_INT 0
20088: PPUSH
20089: CALL_OW 517
20093: PUSH
20094: LD_INT 1
20096: ARRAY
20097: PUSH
20098: LD_VAR 0 4
20102: ARRAY
20103: PUSH
20104: LD_VAR 0 1
20108: PPUSH
20109: LD_INT 0
20111: PPUSH
20112: CALL_OW 517
20116: PUSH
20117: LD_INT 2
20119: ARRAY
20120: PUSH
20121: LD_VAR 0 4
20125: ARRAY
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PPUSH
20131: CALL_OW 2
20135: ST_TO_ADDR
// r := 0 ;
20136: LD_ADDR_VAR 0 5
20140: PUSH
20141: LD_INT 0
20143: ST_TO_ADDR
// x := x + 1 ;
20144: LD_ADDR_VAR 0 6
20148: PUSH
20149: LD_VAR 0 6
20153: PUSH
20154: LD_INT 1
20156: PLUS
20157: ST_TO_ADDR
// end else
20158: GO 20174
// r := r + 35 ;
20160: LD_ADDR_VAR 0 5
20164: PUSH
20165: LD_VAR 0 5
20169: PUSH
20170: LD_INT 35
20172: PLUS
20173: ST_TO_ADDR
// end else
20174: GO 20198
// r := r + rand ( 10 , 25 ) ;
20176: LD_ADDR_VAR 0 5
20180: PUSH
20181: LD_VAR 0 5
20185: PUSH
20186: LD_INT 10
20188: PPUSH
20189: LD_INT 25
20191: PPUSH
20192: CALL_OW 12
20196: PLUS
20197: ST_TO_ADDR
// end ;
20198: GO 19946
20200: POP
20201: POP
20202: GO 19907
// end ; end_of_file
20204: LD_VAR 0 3
20208: RET
// every 0 0$1 trigger russianAI = 1 do
20209: LD_EXP 39
20213: PUSH
20214: LD_INT 1
20216: EQUAL
20217: IFFALSE 20436
20219: GO 20221
20221: DISABLE
// begin enable ;
20222: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
20223: LD_INT 3
20225: PPUSH
20226: LD_EXP 30
20230: PPUSH
20231: CALL 14687 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
20235: LD_INT 3
20237: PPUSH
20238: LD_EXP 42
20242: PPUSH
20243: CALL 15047 0 2
// if ruPossition = 1 then
20247: LD_EXP 41
20251: PUSH
20252: LD_INT 1
20254: EQUAL
20255: IFFALSE 20310
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20257: LD_INT 3
20259: PPUSH
20260: LD_INT 13
20262: PPUSH
20263: LD_INT 10
20265: PPUSH
20266: LD_INT 22
20268: PUSH
20269: LD_INT 3
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 21
20278: PUSH
20279: LD_INT 3
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 30
20288: PUSH
20289: LD_INT 8
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: PPUSH
20301: CALL_OW 69
20305: PPUSH
20306: CALL 15253 0 4
// if ruPossition = 2 then
20310: LD_EXP 41
20314: PUSH
20315: LD_INT 2
20317: EQUAL
20318: IFFALSE 20373
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20320: LD_INT 3
20322: PPUSH
20323: LD_INT 14
20325: PPUSH
20326: LD_INT 11
20328: PPUSH
20329: LD_INT 22
20331: PUSH
20332: LD_INT 3
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 21
20341: PUSH
20342: LD_INT 3
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 30
20351: PUSH
20352: LD_INT 8
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: LIST
20363: PPUSH
20364: CALL_OW 69
20368: PPUSH
20369: CALL 15253 0 4
// if ruPossition = 3 then
20373: LD_EXP 41
20377: PUSH
20378: LD_INT 3
20380: EQUAL
20381: IFFALSE 20436
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20383: LD_INT 3
20385: PPUSH
20386: LD_INT 15
20388: PPUSH
20389: LD_INT 12
20391: PPUSH
20392: LD_INT 22
20394: PUSH
20395: LD_INT 3
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 21
20404: PUSH
20405: LD_INT 3
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 30
20414: PUSH
20415: LD_INT 8
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: LIST
20426: PPUSH
20427: CALL_OW 69
20431: PPUSH
20432: CALL 15253 0 4
// end ;
20436: END
// every 0 0$1 do
20437: GO 20439
20439: DISABLE
// begin enable ;
20440: ENABLE
// if ruPossition = 1 then
20441: LD_EXP 41
20445: PUSH
20446: LD_INT 1
20448: EQUAL
20449: IFFALSE 20461
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20451: LD_INT 3
20453: PPUSH
20454: LD_INT 10
20456: PPUSH
20457: CALL 14324 0 2
// if ruPossition = 2 then
20461: LD_EXP 41
20465: PUSH
20466: LD_INT 2
20468: EQUAL
20469: IFFALSE 20481
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20471: LD_INT 3
20473: PPUSH
20474: LD_INT 11
20476: PPUSH
20477: CALL 14324 0 2
// if ruPossition = 3 then
20481: LD_EXP 41
20485: PUSH
20486: LD_INT 3
20488: EQUAL
20489: IFFALSE 20501
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20491: LD_INT 3
20493: PPUSH
20494: LD_INT 12
20496: PPUSH
20497: CALL 14324 0 2
// IntBazooka ( 3 , 1 ) ;
20501: LD_INT 3
20503: PPUSH
20504: LD_INT 1
20506: PPUSH
20507: CALL 13123 0 2
// IntBazooka ( 6 , 1 ) ;
20511: LD_INT 6
20513: PPUSH
20514: LD_INT 1
20516: PPUSH
20517: CALL 13123 0 2
// end ;
20521: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20522: LD_EXP 39
20526: PUSH
20527: LD_INT 1
20529: EQUAL
20530: PUSH
20531: LD_EXP 35
20535: PPUSH
20536: CALL_OW 302
20540: AND
20541: PUSH
20542: LD_EXP 35
20546: PPUSH
20547: CALL_OW 255
20551: PUSH
20552: LD_INT 3
20554: EQUAL
20555: AND
20556: PUSH
20557: LD_INT 22
20559: PUSH
20560: LD_INT 3
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 21
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 33
20579: PUSH
20580: LD_INT 3
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: LIST
20591: PPUSH
20592: CALL_OW 69
20596: PUSH
20597: LD_INT 0
20599: EQUAL
20600: AND
20601: IFFALSE 20809
20603: GO 20605
20605: DISABLE
// begin enable ;
20606: ENABLE
// if Difficulty = 1 then
20607: LD_OWVAR 67
20611: PUSH
20612: LD_INT 1
20614: EQUAL
20615: IFFALSE 20677
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20617: LD_INT 3
20619: PPUSH
20620: LD_EXP 35
20624: PPUSH
20625: LD_INT 5
20627: PPUSH
20628: LD_INT 8
20630: PPUSH
20631: CALL_OW 12
20635: PPUSH
20636: LD_INT 1
20638: PPUSH
20639: LD_INT 43
20641: PUSH
20642: LD_INT 44
20644: PUSH
20645: LD_INT 45
20647: PUSH
20648: LD_INT 46
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: PPUSH
20657: LD_INT 1
20659: PPUSH
20660: LD_INT 3
20662: PUSH
20663: LD_INT 3
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PPUSH
20670: LD_INT 22
20672: PPUSH
20673: CALL 19243 0 8
// if Difficulty = 2 then
20677: LD_OWVAR 67
20681: PUSH
20682: LD_INT 2
20684: EQUAL
20685: IFFALSE 20743
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20687: LD_INT 3
20689: PPUSH
20690: LD_EXP 35
20694: PPUSH
20695: LD_INT 6
20697: PPUSH
20698: LD_INT 8
20700: PPUSH
20701: CALL_OW 12
20705: PPUSH
20706: LD_INT 1
20708: PPUSH
20709: LD_INT 44
20711: PUSH
20712: LD_INT 45
20714: PUSH
20715: LD_INT 46
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: LIST
20722: PPUSH
20723: LD_INT 1
20725: PPUSH
20726: LD_INT 3
20728: PUSH
20729: LD_INT 3
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PPUSH
20736: LD_INT 22
20738: PPUSH
20739: CALL 19243 0 8
// if Difficulty = 3 then
20743: LD_OWVAR 67
20747: PUSH
20748: LD_INT 3
20750: EQUAL
20751: IFFALSE 20809
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20753: LD_INT 3
20755: PPUSH
20756: LD_EXP 35
20760: PPUSH
20761: LD_INT 7
20763: PPUSH
20764: LD_INT 8
20766: PPUSH
20767: CALL_OW 12
20771: PPUSH
20772: LD_INT 1
20774: PPUSH
20775: LD_INT 44
20777: PUSH
20778: LD_INT 45
20780: PUSH
20781: LD_INT 46
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: LIST
20788: PPUSH
20789: LD_INT 1
20791: PPUSH
20792: LD_INT 3
20794: PUSH
20795: LD_INT 3
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PPUSH
20802: LD_INT 22
20804: PPUSH
20805: CALL 19243 0 8
// end ;
20809: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20810: LD_EXP 50
20814: PUSH
20815: LD_EXP 49
20819: AND
20820: IFFALSE 20941
20822: GO 20824
20824: DISABLE
20825: LD_INT 0
20827: PPUSH
// begin enable ;
20828: ENABLE
// for i in arabianMines do
20829: LD_ADDR_VAR 0 1
20833: PUSH
20834: LD_EXP 50
20838: PUSH
20839: FOR_IN
20840: IFFALSE 20939
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20842: LD_INT 22
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 92
20854: PUSH
20855: LD_VAR 0 1
20859: PUSH
20860: LD_INT 1
20862: ARRAY
20863: PUSH
20864: LD_VAR 0 1
20868: PUSH
20869: LD_INT 2
20871: ARRAY
20872: PUSH
20873: LD_INT 3
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PPUSH
20886: CALL_OW 69
20890: IFFALSE 20937
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20892: LD_VAR 0 1
20896: PUSH
20897: LD_INT 1
20899: ARRAY
20900: PPUSH
20901: LD_VAR 0 1
20905: PUSH
20906: LD_INT 2
20908: ARRAY
20909: PPUSH
20910: LD_INT 5
20912: PPUSH
20913: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20917: LD_ADDR_EXP 50
20921: PUSH
20922: LD_EXP 50
20926: PPUSH
20927: LD_VAR 0 1
20931: PPUSH
20932: CALL_OW 3
20936: ST_TO_ADDR
// end ; end ;
20937: GO 20839
20939: POP
20940: POP
// end ; end_of_file
20941: PPOPN 1
20943: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20944: LD_VAR 0 1
20948: PPUSH
20949: CALL_OW 255
20953: PUSH
20954: LD_INT 4
20956: EQUAL
20957: IFFALSE 20971
// SetBName ( building , epsilon ) ;
20959: LD_VAR 0 1
20963: PPUSH
20964: LD_STRING epsilon
20966: PPUSH
20967: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20971: LD_VAR 0 1
20975: PPUSH
20976: CALL_OW 255
20980: PUSH
20981: LD_INT 1
20983: EQUAL
20984: PUSH
20985: LD_VAR 0 1
20989: PPUSH
20990: CALL_OW 266
20994: PUSH
20995: LD_INT 0
20997: EQUAL
20998: AND
20999: IFFALSE 21013
// SetBName ( building , epsilon ) ;
21001: LD_VAR 0 1
21005: PPUSH
21006: LD_STRING epsilon
21008: PPUSH
21009: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
21013: LD_VAR 0 1
21017: PPUSH
21018: CALL_OW 255
21022: PUSH
21023: LD_INT 3
21025: EQUAL
21026: PUSH
21027: LD_VAR 0 1
21031: PPUSH
21032: CALL_OW 266
21036: PUSH
21037: LD_INT 0
21039: EQUAL
21040: AND
21041: IFFALSE 21055
// SetBName ( building , chuikov ) ;
21043: LD_VAR 0 1
21047: PPUSH
21048: LD_STRING chuikov
21050: PPUSH
21051: CALL_OW 500
// if GetSide ( building ) = 2 then
21055: LD_VAR 0 1
21059: PPUSH
21060: CALL_OW 255
21064: PUSH
21065: LD_INT 2
21067: EQUAL
21068: IFFALSE 21124
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21070: LD_VAR 0 1
21074: PPUSH
21075: CALL_OW 266
21079: PUSH
21080: LD_INT 6
21082: EQUAL
21083: PUSH
21084: LD_VAR 0 1
21088: PPUSH
21089: CALL_OW 266
21093: PUSH
21094: LD_INT 9
21096: EQUAL
21097: OR
21098: IFFALSE 21124
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21100: LD_VAR 0 1
21104: PPUSH
21105: LD_INT 10
21107: PPUSH
21108: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21112: LD_VAR 0 1
21116: PPUSH
21117: LD_INT 11
21119: PPUSH
21120: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
21124: LD_VAR 0 1
21128: PPUSH
21129: CALL_OW 255
21133: PUSH
21134: LD_INT 3
21136: EQUAL
21137: IFFALSE 21163
// begin if GetBType ( building ) = 2 then
21139: LD_VAR 0 1
21143: PPUSH
21144: CALL_OW 266
21148: PUSH
21149: LD_INT 2
21151: EQUAL
21152: IFFALSE 21163
// AddComUpgrade ( building ) ;
21154: LD_VAR 0 1
21158: PPUSH
21159: CALL_OW 206
// end ; end ;
21163: PPOPN 2
21165: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
21166: LD_INT 0
21168: PPUSH
21169: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
21170: LD_VAR 0 1
21174: PUSH
21175: LD_INT 22
21177: PUSH
21178: LD_INT 3
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 23
21187: PUSH
21188: LD_INT 3
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 21
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: LIST
21209: PPUSH
21210: CALL_OW 69
21214: IN
21215: PUSH
21216: LD_EXP 59
21220: NOT
21221: AND
21222: IFFALSE 21253
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
21224: LD_ADDR_EXP 59
21228: PUSH
21229: LD_VAR 0 1
21233: PPUSH
21234: CALL_OW 250
21238: PUSH
21239: LD_VAR 0 1
21243: PPUSH
21244: CALL_OW 251
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: ST_TO_ADDR
// end ;
21253: PPOPN 3
21255: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
21256: LD_VAR 0 2
21260: PPUSH
21261: CALL_OW 255
21265: PUSH
21266: LD_INT 3
21268: EQUAL
21269: PUSH
21270: LD_EXP 35
21274: PPUSH
21275: CALL_OW 255
21279: PUSH
21280: LD_INT 3
21282: EQUAL
21283: AND
21284: PUSH
21285: LD_EXP 35
21289: PPUSH
21290: CALL_OW 302
21294: AND
21295: IFFALSE 21311
// ComEnterUnit ( human , ruFab ) ;
21297: LD_VAR 0 2
21301: PPUSH
21302: LD_EXP 35
21306: PPUSH
21307: CALL_OW 120
// end ;
21311: PPOPN 2
21313: END
// on BuildingComplete ( building ) do var i , sol , tmp ;
21314: LD_INT 0
21316: PPUSH
21317: PPUSH
21318: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
21319: LD_VAR 0 1
21323: PPUSH
21324: CALL_OW 255
21328: PUSH
21329: LD_INT 1
21331: EQUAL
21332: PUSH
21333: LD_EXP 62
21337: PUSH
21338: LD_INT 0
21340: EQUAL
21341: AND
21342: IFFALSE 21544
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
21344: LD_VAR 0 1
21348: PPUSH
21349: CALL_OW 266
21353: PUSH
21354: LD_INT 26
21356: EQUAL
21357: PUSH
21358: LD_VAR 0 1
21362: PPUSH
21363: CALL_OW 266
21367: PUSH
21368: LD_INT 27
21370: EQUAL
21371: OR
21372: PUSH
21373: LD_VAR 0 1
21377: PPUSH
21378: CALL_OW 266
21382: PUSH
21383: LD_INT 28
21385: EQUAL
21386: OR
21387: IFFALSE 21544
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
21389: LD_INT 22
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: LD_INT 30
21404: PUSH
21405: LD_INT 7
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 30
21414: PUSH
21415: LD_INT 8
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: LIST
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PPUSH
21431: CALL_OW 69
21435: PUSH
21436: LD_INT 0
21438: GREATER
21439: IFFALSE 21544
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21441: LD_ADDR_VAR 0 2
21445: PUSH
21446: LD_INT 22
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 2
21458: PUSH
21459: LD_INT 30
21461: PUSH
21462: LD_INT 7
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 30
21471: PUSH
21472: LD_INT 8
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: LIST
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PPUSH
21488: CALL_OW 69
21492: PUSH
21493: FOR_IN
21494: IFFALSE 21542
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21496: LD_VAR 0 2
21500: PPUSH
21501: LD_INT 1
21503: PPUSH
21504: CALL_OW 268
21508: PUSH
21509: LD_INT 11
21511: EQUAL
21512: PUSH
21513: LD_VAR 0 2
21517: PPUSH
21518: LD_INT 2
21520: PPUSH
21521: CALL_OW 268
21525: PUSH
21526: LD_INT 11
21528: EQUAL
21529: OR
21530: IFFALSE 21540
// eventVar1 = 1 ;
21532: LD_ADDR_EXP 62
21536: PUSH
21537: LD_INT 1
21539: ST_TO_ADDR
21540: GO 21493
21542: POP
21543: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21544: LD_VAR 0 1
21548: PPUSH
21549: CALL_OW 255
21553: PUSH
21554: LD_INT 3
21556: EQUAL
21557: IFFALSE 22037
// begin if GetBType ( building ) = b_depot then
21559: LD_VAR 0 1
21563: PPUSH
21564: CALL_OW 266
21568: PUSH
21569: LD_INT 0
21571: EQUAL
21572: IFFALSE 21644
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21574: LD_VAR 0 1
21578: PPUSH
21579: CALL_OW 274
21583: PPUSH
21584: LD_INT 1
21586: PPUSH
21587: LD_INT 5000
21589: PPUSH
21590: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
21594: LD_VAR 0 1
21598: PPUSH
21599: CALL_OW 274
21603: PPUSH
21604: LD_INT 2
21606: PPUSH
21607: LD_INT 300
21609: PPUSH
21610: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
21614: LD_VAR 0 1
21618: PPUSH
21619: CALL_OW 274
21623: PPUSH
21624: LD_INT 3
21626: PPUSH
21627: LD_INT 100
21629: PPUSH
21630: CALL_OW 277
// ruDepot = building ;
21634: LD_ADDR_EXP 30
21638: PUSH
21639: LD_VAR 0 1
21643: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21644: LD_VAR 0 1
21648: PPUSH
21649: CALL_OW 266
21653: PUSH
21654: LD_INT 0
21656: EQUAL
21657: PUSH
21658: LD_VAR 0 1
21662: PPUSH
21663: CALL_OW 266
21667: PUSH
21668: LD_INT 2
21670: EQUAL
21671: OR
21672: PUSH
21673: LD_VAR 0 1
21677: PPUSH
21678: CALL_OW 266
21682: PUSH
21683: LD_INT 4
21685: EQUAL
21686: OR
21687: IFFALSE 21698
// ComUpgrade ( building ) ;
21689: LD_VAR 0 1
21693: PPUSH
21694: CALL_OW 146
// if GetBType ( building ) = b_lab then
21698: LD_VAR 0 1
21702: PPUSH
21703: CALL_OW 266
21707: PUSH
21708: LD_INT 6
21710: EQUAL
21711: IFFALSE 21914
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21713: LD_INT 22
21715: PUSH
21716: LD_INT 3
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 30
21725: PUSH
21726: LD_INT 8
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PPUSH
21737: CALL_OW 69
21741: PUSH
21742: LD_INT 0
21744: EQUAL
21745: IFFALSE 21783
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21747: LD_VAR 0 1
21751: PPUSH
21752: LD_INT 10
21754: PPUSH
21755: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21759: LD_VAR 0 1
21763: PPUSH
21764: LD_INT 12
21766: PPUSH
21767: CALL_OW 207
// ruLab1 = building ;
21771: LD_ADDR_EXP 31
21775: PUSH
21776: LD_VAR 0 1
21780: ST_TO_ADDR
// end else
21781: GO 21817
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21783: LD_VAR 0 1
21787: PPUSH
21788: LD_INT 11
21790: PPUSH
21791: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21795: LD_VAR 0 1
21799: PPUSH
21800: LD_INT 14
21802: PPUSH
21803: CALL_OW 207
// ruLab2 = building ;
21807: LD_ADDR_EXP 32
21811: PUSH
21812: LD_VAR 0 1
21816: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21817: LD_INT 3
21819: PPUSH
21820: LD_VAR 0 1
21824: PPUSH
21825: LD_INT 3
21827: PPUSH
21828: CALL 14239 0 3
// if ruDestroyedBuildings > 0 then
21832: LD_EXP 42
21836: PUSH
21837: LD_INT 0
21839: GREATER
21840: IFFALSE 21914
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21842: LD_ADDR_EXP 42
21846: PUSH
21847: LD_EXP 42
21851: PPUSH
21852: LD_INT 1
21854: PPUSH
21855: CALL_OW 3
21859: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21860: LD_ADDR_EXP 42
21864: PUSH
21865: LD_EXP 42
21869: PPUSH
21870: LD_INT 1
21872: PPUSH
21873: CALL_OW 3
21877: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21878: LD_ADDR_EXP 42
21882: PUSH
21883: LD_EXP 42
21887: PPUSH
21888: LD_INT 1
21890: PPUSH
21891: CALL_OW 3
21895: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21896: LD_ADDR_EXP 42
21900: PUSH
21901: LD_EXP 42
21905: PPUSH
21906: LD_INT 1
21908: PPUSH
21909: CALL_OW 3
21913: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21914: LD_VAR 0 1
21918: PPUSH
21919: CALL_OW 266
21923: PUSH
21924: LD_INT 32
21926: EQUAL
21927: IFFALSE 21964
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21929: LD_VAR 0 1
21933: PPUSH
21934: LD_INT 44
21936: PUSH
21937: LD_INT 45
21939: PUSH
21940: LD_INT 46
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 1
21950: PPUSH
21951: LD_INT 3
21953: PPUSH
21954: CALL_OW 12
21958: ARRAY
21959: PPUSH
21960: CALL_OW 208
// if GetBType ( building ) = b_turret then
21964: LD_VAR 0 1
21968: PPUSH
21969: CALL_OW 266
21973: PUSH
21974: LD_INT 33
21976: EQUAL
21977: IFFALSE 22014
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21979: LD_VAR 0 1
21983: PPUSH
21984: LD_INT 44
21986: PUSH
21987: LD_INT 45
21989: PUSH
21990: LD_INT 46
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 1
22000: PPUSH
22001: LD_INT 3
22003: PPUSH
22004: CALL_OW 12
22008: ARRAY
22009: PPUSH
22010: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
22014: LD_VAR 0 1
22018: PPUSH
22019: CALL_OW 266
22023: PUSH
22024: LD_INT 24
22026: EQUAL
22027: IFFALSE 22037
// russianAI = 1 ;
22029: LD_ADDR_EXP 39
22033: PUSH
22034: LD_INT 1
22036: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
22037: LD_VAR 0 1
22041: PPUSH
22042: CALL_OW 255
22046: PUSH
22047: LD_INT 2
22049: EQUAL
22050: IFFALSE 22719
// begin if GetBType ( building ) = b_breastwork then
22052: LD_VAR 0 1
22056: PPUSH
22057: CALL_OW 266
22061: PUSH
22062: LD_INT 31
22064: EQUAL
22065: IFFALSE 22211
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
22067: LD_ADDR_VAR 0 3
22071: PUSH
22072: LD_INT 22
22074: PUSH
22075: LD_INT 2
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 2
22084: PUSH
22085: LD_INT 25
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 25
22097: PUSH
22098: LD_INT 8
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: LIST
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PPUSH
22114: CALL_OW 69
22118: PUSH
22119: LD_EXP 26
22123: DIFF
22124: ST_TO_ADDR
// if not sol then
22125: LD_VAR 0 3
22129: NOT
22130: IFFALSE 22134
// exit ;
22132: GO 22719
// for i in sol do
22134: LD_ADDR_VAR 0 2
22138: PUSH
22139: LD_VAR 0 3
22143: PUSH
22144: FOR_IN
22145: IFFALSE 22209
// if not GetTag ( i ) then
22147: LD_VAR 0 2
22151: PPUSH
22152: CALL_OW 110
22156: NOT
22157: IFFALSE 22207
// begin if IsInUnit ( i ) then
22159: LD_VAR 0 2
22163: PPUSH
22164: CALL_OW 310
22168: IFFALSE 22179
// ComExitBuilding ( i ) ;
22170: LD_VAR 0 2
22174: PPUSH
22175: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
22179: LD_VAR 0 2
22183: PPUSH
22184: LD_VAR 0 1
22188: PPUSH
22189: CALL_OW 180
// SetTag ( i , 11 ) ;
22193: LD_VAR 0 2
22197: PPUSH
22198: LD_INT 11
22200: PPUSH
22201: CALL_OW 109
// break ;
22205: GO 22209
// end ;
22207: GO 22144
22209: POP
22210: POP
// end ; if GetBType ( building ) = b_depot then
22211: LD_VAR 0 1
22215: PPUSH
22216: CALL_OW 266
22220: PUSH
22221: LD_INT 0
22223: EQUAL
22224: IFFALSE 22310
// begin arDepot = building ;
22226: LD_ADDR_EXP 43
22230: PUSH
22231: LD_VAR 0 1
22235: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
22236: LD_INT 38
22238: PUSH
22239: LD_INT 47
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PPUSH
22246: LD_INT 71
22248: PPUSH
22249: LD_INT 19
22251: PPUSH
22252: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
22256: LD_VAR 0 1
22260: PPUSH
22261: CALL_OW 274
22265: PPUSH
22266: LD_INT 1
22268: PPUSH
22269: LD_INT 500
22271: PPUSH
22272: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
22276: LD_VAR 0 1
22280: PPUSH
22281: CALL_OW 274
22285: PPUSH
22286: LD_INT 3
22288: PPUSH
22289: LD_INT 30
22291: PPUSH
22292: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
22296: LD_EXP 26
22300: PPUSH
22301: LD_EXP 43
22305: PPUSH
22306: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22310: LD_VAR 0 1
22314: PPUSH
22315: CALL_OW 266
22319: PUSH
22320: LD_INT 6
22322: EQUAL
22323: PUSH
22324: LD_VAR 0 1
22328: PPUSH
22329: CALL_OW 266
22333: PUSH
22334: LD_INT 9
22336: EQUAL
22337: OR
22338: IFFALSE 22389
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22340: LD_VAR 0 1
22344: PPUSH
22345: LD_INT 10
22347: PPUSH
22348: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22352: LD_VAR 0 1
22356: PPUSH
22357: LD_INT 11
22359: PPUSH
22360: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
22364: LD_INT 2
22366: PPUSH
22367: LD_VAR 0 1
22371: PPUSH
22372: LD_INT 2
22374: PPUSH
22375: CALL 14239 0 3
// arLab = building ;
22379: LD_ADDR_EXP 44
22383: PUSH
22384: LD_VAR 0 1
22388: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
22389: LD_VAR 0 1
22393: PPUSH
22394: CALL_OW 266
22398: PUSH
22399: LD_INT 2
22401: EQUAL
22402: PUSH
22403: LD_VAR 0 1
22407: PPUSH
22408: CALL_OW 266
22412: PUSH
22413: LD_INT 4
22415: EQUAL
22416: OR
22417: IFFALSE 22482
// begin ComUpgrade ( building ) ;
22419: LD_VAR 0 1
22423: PPUSH
22424: CALL_OW 146
// if GetBType ( building ) = b_armoury then
22428: LD_VAR 0 1
22432: PPUSH
22433: CALL_OW 266
22437: PUSH
22438: LD_INT 4
22440: EQUAL
22441: IFFALSE 22482
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , 75 , 21 ) ;
22443: LD_INT 22
22445: PUSH
22446: LD_INT 2
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 25
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PPUSH
22467: CALL_OW 69
22471: PPUSH
22472: LD_INT 75
22474: PPUSH
22475: LD_INT 21
22477: PPUSH
22478: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
22482: LD_VAR 0 1
22486: PPUSH
22487: CALL_OW 266
22491: PUSH
22492: LD_INT 27
22494: EQUAL
22495: IFFALSE 22719
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
22497: LD_INT 22
22499: PUSH
22500: LD_INT 2
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 30
22509: PUSH
22510: LD_INT 27
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PPUSH
22521: CALL_OW 69
22525: PUSH
22526: LD_INT 2
22528: EQUAL
22529: IFFALSE 22719
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
22531: LD_ADDR_VAR 0 2
22535: PUSH
22536: LD_INT 22
22538: PUSH
22539: LD_INT 2
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 21
22548: PUSH
22549: LD_INT 1
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 25
22558: PUSH
22559: LD_INT 2
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: LIST
22570: PPUSH
22571: CALL_OW 69
22575: PUSH
22576: LD_INT 1
22578: ARRAY
22579: ST_TO_ADDR
// if not i then
22580: LD_VAR 0 2
22584: NOT
22585: IFFALSE 22589
// exit ;
22587: GO 22719
// AddComMoveXY ( i , 92 , 34 ) ;
22589: LD_VAR 0 2
22593: PPUSH
22594: LD_INT 92
22596: PPUSH
22597: LD_INT 34
22599: PPUSH
22600: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
22604: LD_VAR 0 2
22608: PPUSH
22609: LD_INT 35
22611: PPUSH
22612: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
22616: LD_VAR 0 2
22620: PPUSH
22621: LD_INT 82
22623: PPUSH
22624: LD_INT 57
22626: PPUSH
22627: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
22631: LD_VAR 0 2
22635: PPUSH
22636: LD_INT 35
22638: PPUSH
22639: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
22643: LD_VAR 0 2
22647: PPUSH
22648: LD_INT 36
22650: PPUSH
22651: LD_INT 28
22653: PPUSH
22654: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
22658: LD_VAR 0 2
22662: PPUSH
22663: LD_INT 35
22665: PPUSH
22666: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22670: LD_INT 22
22672: PUSH
22673: LD_INT 2
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 21
22682: PUSH
22683: LD_INT 1
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 25
22692: PUSH
22693: LD_INT 2
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: LIST
22704: PPUSH
22705: CALL_OW 69
22709: PPUSH
22710: LD_EXP 43
22714: PPUSH
22715: CALL_OW 180
// end ; end ; end ;
22719: PPOPN 4
22721: END
// on UpgradeComplete ( building ) do var i ;
22722: LD_INT 0
22724: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22725: LD_VAR 0 1
22729: PPUSH
22730: CALL_OW 255
22734: PUSH
22735: LD_INT 1
22737: EQUAL
22738: PUSH
22739: LD_EXP 62
22743: PUSH
22744: LD_INT 0
22746: EQUAL
22747: AND
22748: IFFALSE 22946
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22750: LD_VAR 0 1
22754: PPUSH
22755: CALL_OW 266
22759: PUSH
22760: LD_INT 7
22762: EQUAL
22763: PUSH
22764: LD_VAR 0 1
22768: PPUSH
22769: CALL_OW 266
22773: PUSH
22774: LD_INT 8
22776: EQUAL
22777: OR
22778: IFFALSE 22946
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22780: LD_INT 22
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: LD_INT 30
22795: PUSH
22796: LD_INT 26
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 30
22805: PUSH
22806: LD_INT 27
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 30
22815: PUSH
22816: LD_INT 28
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PPUSH
22833: CALL_OW 69
22837: PUSH
22838: LD_INT 0
22840: GREATER
22841: IFFALSE 22946
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22843: LD_ADDR_VAR 0 2
22847: PUSH
22848: LD_INT 22
22850: PUSH
22851: LD_INT 1
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 2
22860: PUSH
22861: LD_INT 30
22863: PUSH
22864: LD_INT 7
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 30
22873: PUSH
22874: LD_INT 8
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: LIST
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PPUSH
22890: CALL_OW 69
22894: PUSH
22895: FOR_IN
22896: IFFALSE 22944
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22898: LD_VAR 0 2
22902: PPUSH
22903: LD_INT 1
22905: PPUSH
22906: CALL_OW 268
22910: PUSH
22911: LD_INT 11
22913: EQUAL
22914: PUSH
22915: LD_VAR 0 2
22919: PPUSH
22920: LD_INT 2
22922: PPUSH
22923: CALL_OW 268
22927: PUSH
22928: LD_INT 11
22930: EQUAL
22931: OR
22932: IFFALSE 22942
// eventVar1 = 1 ;
22934: LD_ADDR_EXP 62
22938: PUSH
22939: LD_INT 1
22941: ST_TO_ADDR
22942: GO 22895
22944: POP
22945: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22946: LD_VAR 0 1
22950: PPUSH
22951: CALL_OW 255
22955: PUSH
22956: LD_INT 2
22958: EQUAL
22959: IFFALSE 23064
// begin if GetBType ( building ) = b_barracks then
22961: LD_VAR 0 1
22965: PPUSH
22966: CALL_OW 266
22970: PUSH
22971: LD_INT 5
22973: EQUAL
22974: IFFALSE 23064
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22976: LD_ADDR_VAR 0 2
22980: PUSH
22981: LD_INT 22
22983: PUSH
22984: LD_INT 2
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 25
22993: PUSH
22994: LD_INT 1
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 3
23003: PUSH
23004: LD_INT 54
23006: PUSH
23007: EMPTY
23008: LIST
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: PPUSH
23019: CALL_OW 69
23023: PUSH
23024: LD_EXP 26
23028: PUSH
23029: EMPTY
23030: LIST
23031: DIFF
23032: PUSH
23033: FOR_IN
23034: IFFALSE 23052
// ComEnterUnit ( i , building ) ;
23036: LD_VAR 0 2
23040: PPUSH
23041: LD_VAR 0 1
23045: PPUSH
23046: CALL_OW 120
23050: GO 23033
23052: POP
23053: POP
// arArm = building ;
23054: LD_ADDR_EXP 45
23058: PUSH
23059: LD_VAR 0 1
23063: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
23064: LD_VAR 0 1
23068: PPUSH
23069: CALL_OW 255
23073: PUSH
23074: LD_INT 3
23076: EQUAL
23077: IFFALSE 23550
// begin if GetBType ( building ) = b_factory then
23079: LD_VAR 0 1
23083: PPUSH
23084: CALL_OW 266
23088: PUSH
23089: LD_INT 3
23091: EQUAL
23092: IFFALSE 23159
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
23094: LD_ADDR_VAR 0 2
23098: PUSH
23099: LD_INT 22
23101: PUSH
23102: LD_INT 3
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 25
23111: PUSH
23112: LD_INT 3
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PPUSH
23123: CALL_OW 69
23127: PUSH
23128: FOR_IN
23129: IFFALSE 23147
// ComEnterUnit ( i , building ) ;
23131: LD_VAR 0 2
23135: PPUSH
23136: LD_VAR 0 1
23140: PPUSH
23141: CALL_OW 120
23145: GO 23128
23147: POP
23148: POP
// ruFab = building ;
23149: LD_ADDR_EXP 35
23153: PUSH
23154: LD_VAR 0 1
23158: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
23159: LD_INT 22
23161: PUSH
23162: LD_INT 3
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 21
23171: PUSH
23172: LD_INT 3
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 30
23181: PUSH
23182: LD_INT 8
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: LIST
23193: PPUSH
23194: CALL_OW 69
23198: PUSH
23199: LD_INT 2
23201: EQUAL
23202: IFFALSE 23410
// begin for i = 1 to 2 do
23204: LD_ADDR_VAR 0 2
23208: PUSH
23209: DOUBLE
23210: LD_INT 1
23212: DEC
23213: ST_TO_ADDR
23214: LD_INT 2
23216: PUSH
23217: FOR_TO
23218: IFFALSE 23305
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
23220: LD_INT 22
23222: PUSH
23223: LD_INT 3
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 25
23232: PUSH
23233: LD_INT 4
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PPUSH
23244: CALL_OW 69
23248: PUSH
23249: LD_VAR 0 2
23253: ARRAY
23254: PPUSH
23255: LD_INT 22
23257: PUSH
23258: LD_INT 3
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 21
23267: PUSH
23268: LD_INT 3
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 30
23277: PUSH
23278: LD_INT 8
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: LIST
23289: PPUSH
23290: CALL_OW 69
23294: PUSH
23295: LD_INT 1
23297: ARRAY
23298: PPUSH
23299: CALL_OW 120
23303: GO 23217
23305: POP
23306: POP
// for i = 3 to 4 do
23307: LD_ADDR_VAR 0 2
23311: PUSH
23312: DOUBLE
23313: LD_INT 3
23315: DEC
23316: ST_TO_ADDR
23317: LD_INT 4
23319: PUSH
23320: FOR_TO
23321: IFFALSE 23408
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23323: LD_INT 22
23325: PUSH
23326: LD_INT 3
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 25
23335: PUSH
23336: LD_INT 4
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PPUSH
23347: CALL_OW 69
23351: PUSH
23352: LD_VAR 0 2
23356: ARRAY
23357: PPUSH
23358: LD_INT 22
23360: PUSH
23361: LD_INT 3
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 21
23370: PUSH
23371: LD_INT 3
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 30
23380: PUSH
23381: LD_INT 8
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: PPUSH
23393: CALL_OW 69
23397: PUSH
23398: LD_INT 2
23400: ARRAY
23401: PPUSH
23402: CALL_OW 120
23406: GO 23320
23408: POP
23409: POP
// end ; if GetBType ( building ) = b_barracks then
23410: LD_VAR 0 1
23414: PPUSH
23415: CALL_OW 266
23419: PUSH
23420: LD_INT 5
23422: EQUAL
23423: IFFALSE 23550
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
23425: LD_ADDR_VAR 0 2
23429: PUSH
23430: LD_INT 22
23432: PUSH
23433: LD_INT 3
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 25
23442: PUSH
23443: LD_INT 1
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 3
23452: PUSH
23453: LD_INT 54
23455: PUSH
23456: EMPTY
23457: LIST
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: LIST
23467: PPUSH
23468: CALL_OW 69
23472: PUSH
23473: FOR_IN
23474: IFFALSE 23492
// ComEnterUnit ( i , building ) ;
23476: LD_VAR 0 2
23480: PPUSH
23481: LD_VAR 0 1
23485: PPUSH
23486: CALL_OW 120
23490: GO 23473
23492: POP
23493: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
23494: LD_INT 22
23496: PUSH
23497: LD_INT 3
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 30
23506: PUSH
23507: LD_INT 5
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PPUSH
23518: CALL_OW 69
23522: PUSH
23523: LD_INT 0
23525: EQUAL
23526: IFFALSE 23540
// ruArm1 = building else
23528: LD_ADDR_EXP 33
23532: PUSH
23533: LD_VAR 0 1
23537: ST_TO_ADDR
23538: GO 23550
// ruArm2 = building ;
23540: LD_ADDR_EXP 34
23544: PUSH
23545: LD_VAR 0 1
23549: ST_TO_ADDR
// end ; end ; end ;
23550: PPOPN 2
23552: END
// on EnterBuilding ( building , human ) do var rnd ;
23553: LD_INT 0
23555: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23556: LD_VAR 0 2
23560: PPUSH
23561: CALL_OW 255
23565: PUSH
23566: LD_INT 2
23568: EQUAL
23569: PUSH
23570: LD_VAR 0 2
23574: PPUSH
23575: CALL_OW 257
23579: PUSH
23580: LD_INT 1
23582: EQUAL
23583: AND
23584: PUSH
23585: LD_VAR 0 1
23589: PUSH
23590: LD_EXP 45
23594: EQUAL
23595: AND
23596: IFFALSE 23643
// begin wait ( 0 0$1 ) ;
23598: LD_INT 35
23600: PPUSH
23601: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23605: LD_ADDR_VAR 0 3
23609: PUSH
23610: LD_INT 1
23612: PPUSH
23613: LD_INT 100
23615: PPUSH
23616: CALL_OW 12
23620: ST_TO_ADDR
// if rnd > 50 then
23621: LD_VAR 0 3
23625: PUSH
23626: LD_INT 50
23628: GREATER
23629: IFFALSE 23643
// SetClass ( human , class_mortar ) ;
23631: LD_VAR 0 2
23635: PPUSH
23636: LD_INT 8
23638: PPUSH
23639: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
23643: LD_VAR 0 2
23647: PUSH
23648: LD_INT 22
23650: PUSH
23651: LD_INT 2
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 25
23660: PUSH
23661: LD_INT 12
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PPUSH
23672: CALL_OW 69
23676: IN
23677: IFFALSE 23727
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
23679: LD_VAR 0 1
23683: PPUSH
23684: CALL_OW 266
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: IN
23699: IFFALSE 23715
// SetClass ( human , class_apeman_engineer ) else
23701: LD_VAR 0 2
23705: PPUSH
23706: LD_INT 16
23708: PPUSH
23709: CALL_OW 336
23713: GO 23727
// SetClass ( human , class_apeman_soldier ) ;
23715: LD_VAR 0 2
23719: PPUSH
23720: LD_INT 15
23722: PPUSH
23723: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23727: LD_VAR 0 2
23731: PPUSH
23732: CALL_OW 255
23736: PUSH
23737: LD_INT 3
23739: EQUAL
23740: PUSH
23741: LD_VAR 0 2
23745: PPUSH
23746: CALL_OW 257
23750: PUSH
23751: LD_INT 1
23753: EQUAL
23754: AND
23755: PUSH
23756: LD_VAR 0 1
23760: PUSH
23761: LD_EXP 33
23765: EQUAL
23766: PUSH
23767: LD_VAR 0 1
23771: PUSH
23772: LD_EXP 34
23776: EQUAL
23777: OR
23778: PUSH
23779: EMPTY
23780: LIST
23781: AND
23782: IFFALSE 23803
// begin wait ( 0 0$1 ) ;
23784: LD_INT 35
23786: PPUSH
23787: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23791: LD_VAR 0 2
23795: PPUSH
23796: LD_INT 9
23798: PPUSH
23799: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23803: LD_VAR 0 2
23807: PPUSH
23808: CALL_OW 255
23812: PUSH
23813: LD_INT 3
23815: EQUAL
23816: PUSH
23817: LD_VAR 0 2
23821: PPUSH
23822: CALL_OW 257
23826: PUSH
23827: LD_INT 9
23829: EQUAL
23830: AND
23831: PUSH
23832: LD_VAR 0 1
23836: PPUSH
23837: CALL_OW 266
23841: PUSH
23842: LD_INT 32
23844: EQUAL
23845: AND
23846: IFFALSE 23867
// begin wait ( 0 0$1 ) ;
23848: LD_INT 35
23850: PPUSH
23851: CALL_OW 67
// SetClass ( human , 1 ) ;
23855: LD_VAR 0 2
23859: PPUSH
23860: LD_INT 1
23862: PPUSH
23863: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23867: LD_VAR 0 2
23871: PPUSH
23872: CALL_OW 255
23876: PUSH
23877: LD_INT 3
23879: EQUAL
23880: PUSH
23881: LD_VAR 0 2
23885: PPUSH
23886: CALL_OW 257
23890: PUSH
23891: LD_INT 3
23893: EQUAL
23894: AND
23895: PUSH
23896: LD_VAR 0 1
23900: PUSH
23901: LD_EXP 35
23905: EQUAL
23906: AND
23907: IFFALSE 23921
// SetLives ( human , 1000 ) ;
23909: LD_VAR 0 2
23913: PPUSH
23914: LD_INT 1000
23916: PPUSH
23917: CALL_OW 234
// end ;
23921: PPOPN 3
23923: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23924: LD_VAR 0 1
23928: PUSH
23929: LD_INT 1
23931: EQUAL
23932: PUSH
23933: LD_VAR 0 2
23937: PUSH
23938: LD_INT 2
23940: EQUAL
23941: AND
23942: PUSH
23943: LD_INT 1
23945: PPUSH
23946: LD_INT 2
23948: PPUSH
23949: CALL_OW 81
23953: PUSH
23954: LD_INT 1
23956: EQUAL
23957: AND
23958: IFFALSE 23979
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23960: LD_EXP 24
23964: PPUSH
23965: LD_STRING D6b-Pow-1
23967: PPUSH
23968: CALL_OW 94
// YouLost ( Powell ) ;
23972: LD_STRING Powell
23974: PPUSH
23975: CALL_OW 104
// end ; end ;
23979: PPOPN 2
23981: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23982: LD_INT 23
23984: PPUSH
23985: LD_INT 22
23987: PUSH
23988: LD_INT 1
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 21
23997: PUSH
23998: LD_INT 3
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PPUSH
24009: CALL_OW 70
24013: PUSH
24014: LD_INT 23
24016: PPUSH
24017: LD_INT 22
24019: PUSH
24020: LD_INT 1
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 21
24029: PUSH
24030: LD_INT 2
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PPUSH
24041: CALL_OW 70
24045: OR
24046: PUSH
24047: LD_INT 1
24049: PPUSH
24050: LD_INT 2
24052: PPUSH
24053: CALL_OW 81
24057: PUSH
24058: LD_INT 1
24060: EQUAL
24061: AND
24062: IFFALSE 24086
24064: GO 24066
24066: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
24067: LD_EXP 24
24071: PPUSH
24072: LD_STRING D6b-Pow-1
24074: PPUSH
24075: CALL_OW 94
// YouLost ( Powell ) ;
24079: LD_STRING Powell
24081: PPUSH
24082: CALL_OW 104
// end ;
24086: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
24087: LD_VAR 0 1
24091: PUSH
24092: LD_EXP 1
24096: EQUAL
24097: IFFALSE 24106
// YouLost ( JMM ) ;
24099: LD_STRING JMM
24101: PPUSH
24102: CALL_OW 104
// if unit = Khatam then
24106: LD_VAR 0 1
24110: PUSH
24111: LD_EXP 14
24115: EQUAL
24116: IFFALSE 24126
// KhatamStatus = 0 ;
24118: LD_ADDR_EXP 53
24122: PUSH
24123: LD_INT 0
24125: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
24126: LD_VAR 0 1
24130: PPUSH
24131: CALL_OW 255
24135: PUSH
24136: LD_INT 3
24138: EQUAL
24139: PUSH
24140: LD_VAR 0 1
24144: PPUSH
24145: CALL_OW 247
24149: PUSH
24150: LD_INT 3
24152: EQUAL
24153: AND
24154: IFFALSE 24846
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
24156: LD_VAR 0 1
24160: PPUSH
24161: CALL_OW 266
24165: PUSH
24166: LD_INT 31
24168: EQUAL
24169: PUSH
24170: LD_VAR 0 1
24174: PPUSH
24175: CALL_OW 266
24179: PUSH
24180: LD_INT 32
24182: EQUAL
24183: OR
24184: PUSH
24185: LD_VAR 0 1
24189: PPUSH
24190: CALL_OW 266
24194: PUSH
24195: LD_INT 36
24197: EQUAL
24198: OR
24199: PUSH
24200: LD_VAR 0 1
24204: PPUSH
24205: CALL_OW 266
24209: PUSH
24210: LD_INT 0
24212: EQUAL
24213: OR
24214: PUSH
24215: LD_VAR 0 1
24219: PPUSH
24220: CALL_OW 266
24224: PUSH
24225: LD_INT 24
24227: EQUAL
24228: OR
24229: PUSH
24230: LD_VAR 0 1
24234: PPUSH
24235: CALL_OW 266
24239: PUSH
24240: LD_INT 17
24242: EQUAL
24243: OR
24244: PUSH
24245: LD_VAR 0 1
24249: PPUSH
24250: CALL_OW 266
24254: PUSH
24255: LD_INT 25
24257: EQUAL
24258: OR
24259: PUSH
24260: LD_VAR 0 1
24264: PPUSH
24265: CALL_OW 266
24269: PUSH
24270: LD_INT 19
24272: EQUAL
24273: OR
24274: PUSH
24275: LD_VAR 0 1
24279: PPUSH
24280: CALL_OW 266
24284: PUSH
24285: LD_INT 20
24287: EQUAL
24288: OR
24289: PUSH
24290: LD_VAR 0 1
24294: PPUSH
24295: CALL_OW 266
24299: PUSH
24300: LD_INT 18
24302: EQUAL
24303: OR
24304: PUSH
24305: LD_VAR 0 1
24309: PPUSH
24310: CALL_OW 266
24314: PUSH
24315: LD_INT 21
24317: EQUAL
24318: OR
24319: PUSH
24320: LD_VAR 0 1
24324: PPUSH
24325: CALL_OW 266
24329: PUSH
24330: LD_INT 23
24332: EQUAL
24333: OR
24334: PUSH
24335: LD_VAR 0 1
24339: PPUSH
24340: CALL_OW 266
24344: PUSH
24345: LD_INT 16
24347: EQUAL
24348: OR
24349: PUSH
24350: LD_VAR 0 1
24354: PPUSH
24355: CALL_OW 266
24359: PUSH
24360: LD_INT 6
24362: EQUAL
24363: OR
24364: PUSH
24365: LD_VAR 0 1
24369: PPUSH
24370: CALL_OW 266
24374: PUSH
24375: LD_INT 29
24377: EQUAL
24378: OR
24379: PUSH
24380: LD_VAR 0 1
24384: PPUSH
24385: CALL_OW 266
24389: PUSH
24390: LD_INT 26
24392: EQUAL
24393: OR
24394: PUSH
24395: LD_VAR 0 1
24399: PPUSH
24400: CALL_OW 266
24404: PUSH
24405: LD_INT 30
24407: EQUAL
24408: OR
24409: PUSH
24410: LD_VAR 0 1
24414: PPUSH
24415: CALL_OW 266
24419: PUSH
24420: LD_INT 28
24422: EQUAL
24423: OR
24424: PUSH
24425: LD_VAR 0 1
24429: PPUSH
24430: CALL_OW 266
24434: PUSH
24435: LD_INT 27
24437: EQUAL
24438: OR
24439: PUSH
24440: LD_VAR 0 1
24444: PPUSH
24445: CALL_OW 266
24449: PUSH
24450: LD_INT 33
24452: EQUAL
24453: OR
24454: PUSH
24455: LD_VAR 0 1
24459: PPUSH
24460: CALL_OW 266
24464: PUSH
24465: LD_INT 2
24467: EQUAL
24468: OR
24469: PUSH
24470: LD_VAR 0 1
24474: PPUSH
24475: CALL_OW 266
24479: PUSH
24480: LD_INT 4
24482: EQUAL
24483: OR
24484: IFFALSE 24570
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
24486: LD_ADDR_EXP 42
24490: PUSH
24491: LD_EXP 42
24495: PUSH
24496: LD_VAR 0 1
24500: PPUSH
24501: CALL_OW 266
24505: ADD
24506: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24507: LD_ADDR_EXP 42
24511: PUSH
24512: LD_EXP 42
24516: PUSH
24517: LD_VAR 0 1
24521: PPUSH
24522: CALL_OW 250
24526: ADD
24527: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24528: LD_ADDR_EXP 42
24532: PUSH
24533: LD_EXP 42
24537: PUSH
24538: LD_VAR 0 1
24542: PPUSH
24543: CALL_OW 251
24547: ADD
24548: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24549: LD_ADDR_EXP 42
24553: PUSH
24554: LD_EXP 42
24558: PUSH
24559: LD_VAR 0 1
24563: PPUSH
24564: CALL_OW 254
24568: ADD
24569: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
24570: LD_VAR 0 1
24574: PPUSH
24575: CALL_OW 266
24579: PUSH
24580: LD_INT 1
24582: EQUAL
24583: IFFALSE 24662
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
24585: LD_ADDR_EXP 42
24589: PUSH
24590: LD_EXP 42
24594: PUSH
24595: LD_INT 0
24597: ADD
24598: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24599: LD_ADDR_EXP 42
24603: PUSH
24604: LD_EXP 42
24608: PUSH
24609: LD_VAR 0 1
24613: PPUSH
24614: CALL_OW 250
24618: ADD
24619: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24620: LD_ADDR_EXP 42
24624: PUSH
24625: LD_EXP 42
24629: PUSH
24630: LD_VAR 0 1
24634: PPUSH
24635: CALL_OW 251
24639: ADD
24640: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24641: LD_ADDR_EXP 42
24645: PUSH
24646: LD_EXP 42
24650: PUSH
24651: LD_VAR 0 1
24655: PPUSH
24656: CALL_OW 254
24660: ADD
24661: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24662: LD_VAR 0 1
24666: PPUSH
24667: CALL_OW 266
24671: PUSH
24672: LD_INT 3
24674: EQUAL
24675: IFFALSE 24754
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24677: LD_ADDR_EXP 42
24681: PUSH
24682: LD_EXP 42
24686: PUSH
24687: LD_INT 2
24689: ADD
24690: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24691: LD_ADDR_EXP 42
24695: PUSH
24696: LD_EXP 42
24700: PUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: CALL_OW 250
24710: ADD
24711: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24712: LD_ADDR_EXP 42
24716: PUSH
24717: LD_EXP 42
24721: PUSH
24722: LD_VAR 0 1
24726: PPUSH
24727: CALL_OW 251
24731: ADD
24732: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24733: LD_ADDR_EXP 42
24737: PUSH
24738: LD_EXP 42
24742: PUSH
24743: LD_VAR 0 1
24747: PPUSH
24748: CALL_OW 254
24752: ADD
24753: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24754: LD_VAR 0 1
24758: PPUSH
24759: CALL_OW 266
24763: PUSH
24764: LD_INT 5
24766: EQUAL
24767: IFFALSE 24846
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24769: LD_ADDR_EXP 42
24773: PUSH
24774: LD_EXP 42
24778: PUSH
24779: LD_INT 4
24781: ADD
24782: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24783: LD_ADDR_EXP 42
24787: PUSH
24788: LD_EXP 42
24792: PUSH
24793: LD_VAR 0 1
24797: PPUSH
24798: CALL_OW 250
24802: ADD
24803: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24804: LD_ADDR_EXP 42
24808: PUSH
24809: LD_EXP 42
24813: PUSH
24814: LD_VAR 0 1
24818: PPUSH
24819: CALL_OW 251
24823: ADD
24824: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24825: LD_ADDR_EXP 42
24829: PUSH
24830: LD_EXP 42
24834: PUSH
24835: LD_VAR 0 1
24839: PPUSH
24840: CALL_OW 254
24844: ADD
24845: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24846: LD_EXP 51
24850: PUSH
24851: LD_VAR 0 1
24855: PPUSH
24856: CALL_OW 257
24860: PUSH
24861: LD_INT 3
24863: EQUAL
24864: AND
24865: PUSH
24866: LD_VAR 0 1
24870: PPUSH
24871: CALL_OW 255
24875: PUSH
24876: LD_INT 3
24878: EQUAL
24879: AND
24880: PUSH
24881: LD_EXP 35
24885: PPUSH
24886: CALL_OW 302
24890: AND
24891: PUSH
24892: LD_EXP 35
24896: PPUSH
24897: CALL_OW 255
24901: PUSH
24902: LD_INT 3
24904: EQUAL
24905: AND
24906: IFFALSE 24990
// begin ruMech := ruMech - 1 ;
24908: LD_ADDR_EXP 51
24912: PUSH
24913: LD_EXP 51
24917: PUSH
24918: LD_INT 1
24920: MINUS
24921: ST_TO_ADDR
// uc_side = 3 ;
24922: LD_ADDR_OWVAR 20
24926: PUSH
24927: LD_INT 3
24929: ST_TO_ADDR
// uc_nation = 3 ;
24930: LD_ADDR_OWVAR 21
24934: PUSH
24935: LD_INT 3
24937: ST_TO_ADDR
// hc_gallery :=  ;
24938: LD_ADDR_OWVAR 33
24942: PUSH
24943: LD_STRING 
24945: ST_TO_ADDR
// hc_name :=  ;
24946: LD_ADDR_OWVAR 26
24950: PUSH
24951: LD_STRING 
24953: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24954: LD_INT 0
24956: PPUSH
24957: LD_EXP 36
24961: PPUSH
24962: LD_EXP 37
24966: PPUSH
24967: CALL_OW 12
24971: PPUSH
24972: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24976: CALL_OW 44
24980: PPUSH
24981: LD_EXP 35
24985: PPUSH
24986: CALL_OW 52
// end ; end ;
24990: PPOPN 1
24992: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24993: LD_ADDR_OWVAR 57
24997: PUSH
24998: LD_INT 0
25000: ST_TO_ADDR
// fastEnd = 1 ;
25001: LD_ADDR_EXP 60
25005: PUSH
25006: LD_INT 1
25008: ST_TO_ADDR
// FinishMission ;
25009: CALL 26125 0 0
// end ;
25013: PPOPN 1
25015: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
25016: LD_VAR 0 1
25020: PPUSH
25021: CALL 27963 0 1
// end ; end_of_file
25025: PPOPN 1
25027: END
// export function PrepareNature ; var i , un ; begin
25028: LD_INT 0
25030: PPUSH
25031: PPUSH
25032: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
25033: LD_ADDR_VAR 0 2
25037: PUSH
25038: DOUBLE
25039: LD_INT 1
25041: DEC
25042: ST_TO_ADDR
25043: LD_OWVAR 67
25047: PUSH
25048: LD_INT 1
25050: PPUSH
25051: LD_INT 5
25053: PPUSH
25054: CALL_OW 12
25058: PLUS
25059: PUSH
25060: FOR_TO
25061: IFFALSE 25206
// begin hc_sex = sex_male ;
25063: LD_ADDR_OWVAR 27
25067: PUSH
25068: LD_INT 1
25070: ST_TO_ADDR
// uc_side = 0 ;
25071: LD_ADDR_OWVAR 20
25075: PUSH
25076: LD_INT 0
25078: ST_TO_ADDR
// uc_nation = nation_nature ;
25079: LD_ADDR_OWVAR 21
25083: PUSH
25084: LD_INT 0
25086: ST_TO_ADDR
// hc_class = class_apeman ;
25087: LD_ADDR_OWVAR 28
25091: PUSH
25092: LD_INT 12
25094: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
25095: LD_ADDR_OWVAR 31
25099: PUSH
25100: LD_INT 2
25102: PPUSH
25103: LD_INT 7
25105: PPUSH
25106: CALL_OW 12
25110: PUSH
25111: LD_OWVAR 67
25115: PLUS
25116: PUSH
25117: LD_INT 2
25119: PPUSH
25120: LD_INT 10
25122: PPUSH
25123: CALL_OW 12
25127: PUSH
25128: LD_INT 2
25130: PPUSH
25131: LD_INT 10
25133: PPUSH
25134: CALL_OW 12
25138: PUSH
25139: LD_INT 2
25141: PPUSH
25142: LD_INT 10
25144: PPUSH
25145: CALL_OW 12
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
25156: LD_ADDR_OWVAR 35
25160: PUSH
25161: LD_INT 5
25163: NEG
25164: PPUSH
25165: LD_INT 5
25167: PPUSH
25168: CALL_OW 12
25172: PUSH
25173: LD_OWVAR 67
25177: MUL
25178: ST_TO_ADDR
// un = CreateHuman ;
25179: LD_ADDR_VAR 0 3
25183: PUSH
25184: CALL_OW 44
25188: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
25189: LD_VAR 0 3
25193: PPUSH
25194: LD_INT 5
25196: PPUSH
25197: LD_INT 0
25199: PPUSH
25200: CALL_OW 49
// end ;
25204: GO 25060
25206: POP
25207: POP
// for i = 1 to Difficulty + 2 do
25208: LD_ADDR_VAR 0 2
25212: PUSH
25213: DOUBLE
25214: LD_INT 1
25216: DEC
25217: ST_TO_ADDR
25218: LD_OWVAR 67
25222: PUSH
25223: LD_INT 2
25225: PLUS
25226: PUSH
25227: FOR_TO
25228: IFFALSE 25337
// begin hc_sex = sex_male ;
25230: LD_ADDR_OWVAR 27
25234: PUSH
25235: LD_INT 1
25237: ST_TO_ADDR
// uc_side = 0 ;
25238: LD_ADDR_OWVAR 20
25242: PUSH
25243: LD_INT 0
25245: ST_TO_ADDR
// uc_nation = nation_nature ;
25246: LD_ADDR_OWVAR 21
25250: PUSH
25251: LD_INT 0
25253: ST_TO_ADDR
// hc_class = class_tiger ;
25254: LD_ADDR_OWVAR 28
25258: PUSH
25259: LD_INT 14
25261: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25262: LD_ADDR_OWVAR 31
25266: PUSH
25267: LD_EXP 37
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: LD_INT 0
25277: PUSH
25278: LD_INT 0
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
25287: LD_ADDR_OWVAR 35
25291: PUSH
25292: LD_INT 5
25294: NEG
25295: PPUSH
25296: LD_INT 5
25298: PPUSH
25299: CALL_OW 12
25303: PUSH
25304: LD_OWVAR 67
25308: MUL
25309: ST_TO_ADDR
// un = CreateHuman ;
25310: LD_ADDR_VAR 0 3
25314: PUSH
25315: CALL_OW 44
25319: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25320: LD_VAR 0 3
25324: PPUSH
25325: LD_INT 6
25327: PPUSH
25328: LD_INT 0
25330: PPUSH
25331: CALL_OW 49
// end ;
25335: GO 25227
25337: POP
25338: POP
// for i = 1 to rand ( 3 , 4 ) do
25339: LD_ADDR_VAR 0 2
25343: PUSH
25344: DOUBLE
25345: LD_INT 1
25347: DEC
25348: ST_TO_ADDR
25349: LD_INT 3
25351: PPUSH
25352: LD_INT 4
25354: PPUSH
25355: CALL_OW 12
25359: PUSH
25360: FOR_TO
25361: IFFALSE 25455
// begin hc_sex = sex_male ;
25363: LD_ADDR_OWVAR 27
25367: PUSH
25368: LD_INT 1
25370: ST_TO_ADDR
// uc_side = 0 ;
25371: LD_ADDR_OWVAR 20
25375: PUSH
25376: LD_INT 0
25378: ST_TO_ADDR
// uc_nation = nation_nature ;
25379: LD_ADDR_OWVAR 21
25383: PUSH
25384: LD_INT 0
25386: ST_TO_ADDR
// hc_class = 18 ;
25387: LD_ADDR_OWVAR 28
25391: PUSH
25392: LD_INT 18
25394: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25395: LD_ADDR_OWVAR 31
25399: PUSH
25400: LD_EXP 37
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: LD_INT 0
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: ST_TO_ADDR
// hc_agressivity = 0 ;
25420: LD_ADDR_OWVAR 35
25424: PUSH
25425: LD_INT 0
25427: ST_TO_ADDR
// un = CreateHuman ;
25428: LD_ADDR_VAR 0 3
25432: PUSH
25433: CALL_OW 44
25437: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25438: LD_VAR 0 3
25442: PPUSH
25443: LD_INT 6
25445: PPUSH
25446: LD_INT 0
25448: PPUSH
25449: CALL_OW 49
// end ;
25453: GO 25360
25455: POP
25456: POP
// end ; end_of_file
25457: LD_VAR 0 1
25461: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
25462: LD_EXP 46
25466: PUSH
25467: LD_INT 1
25469: EQUAL
25470: IFFALSE 25554
25472: GO 25474
25474: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
25475: LD_INT 7
25477: PPUSH
25478: LD_INT 5
25480: PPUSH
25481: LD_INT 4
25483: PUSH
25484: LD_INT 5
25486: PUSH
25487: LD_INT 6
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: LIST
25494: PUSH
25495: LD_OWVAR 67
25499: ARRAY
25500: PPUSH
25501: LD_EXP 36
25505: PPUSH
25506: LD_EXP 37
25510: PPUSH
25511: CALL_OW 12
25515: PPUSH
25516: LD_INT 2
25518: PPUSH
25519: LD_INT 1
25521: PPUSH
25522: LD_INT 1
25524: PPUSH
25525: EMPTY
25526: PPUSH
25527: LD_INT 25
25529: PUSH
25530: LD_INT 26
25532: PUSH
25533: LD_INT 27
25535: PUSH
25536: LD_INT 28
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: PPUSH
25545: EMPTY
25546: PPUSH
25547: LD_INT 1
25549: PPUSH
25550: CALL 15801 0 11
25554: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25555: LD_EXP 46
25559: PUSH
25560: LD_INT 1
25562: EQUAL
25563: IFFALSE 25651
25565: GO 25567
25567: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
25568: LD_INT 5
25570: PPUSH
25571: LD_INT 2
25573: PPUSH
25574: LD_INT 5
25576: PUSH
25577: LD_INT 6
25579: PUSH
25580: LD_INT 8
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: LIST
25587: PUSH
25588: LD_OWVAR 67
25592: ARRAY
25593: PPUSH
25594: LD_INT 0
25596: PPUSH
25597: LD_INT 0
25599: PPUSH
25600: LD_INT 2
25602: PUSH
25603: LD_INT 4
25605: PUSH
25606: LD_INT 5
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: LIST
25613: PUSH
25614: LD_OWVAR 67
25618: ARRAY
25619: PPUSH
25620: LD_INT 0
25622: PPUSH
25623: LD_EXP 36
25627: PPUSH
25628: LD_EXP 37
25632: PPUSH
25633: CALL_OW 12
25637: PPUSH
25638: LD_INT 7
25640: PPUSH
25641: LD_INT 9
25643: PPUSH
25644: LD_INT 1
25646: PPUSH
25647: CALL 17505 0 11
25651: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25652: LD_EXP 46
25656: PUSH
25657: LD_INT 1
25659: EQUAL
25660: IFFALSE 25669
25662: GO 25664
25664: DISABLE
// PrepareArabianSheik ;
25665: CALL 3813 0 0
25669: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25670: LD_EXP 29
25674: PUSH
25675: LD_EXP 61
25679: PUSH
25680: LD_INT 1
25682: EQUAL
25683: AND
25684: IFFALSE 25753
25686: GO 25688
25688: DISABLE
// begin enable ;
25689: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25690: LD_INT 6
25692: PPUSH
25693: LD_INT 3
25695: PPUSH
25696: LD_EXP 58
25700: PPUSH
25701: LD_INT 0
25703: PPUSH
25704: LD_OWVAR 67
25708: PPUSH
25709: LD_INT 0
25711: PPUSH
25712: LD_EXP 58
25716: PUSH
25717: LD_INT 3
25719: DIV
25720: PUSH
25721: LD_INT 1
25723: PLUS
25724: PPUSH
25725: LD_EXP 36
25729: PPUSH
25730: LD_EXP 37
25734: PPUSH
25735: CALL_OW 12
25739: PPUSH
25740: LD_INT 17
25742: PPUSH
25743: LD_INT 18
25745: PPUSH
25746: LD_INT 1
25748: PPUSH
25749: CALL 17505 0 11
// end ;
25753: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25754: LD_EXP 29
25758: PUSH
25759: LD_EXP 61
25763: PUSH
25764: LD_INT 1
25766: EQUAL
25767: AND
25768: IFFALSE 25845
25770: GO 25772
25772: DISABLE
// begin enable ;
25773: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25774: LD_INT 17
25776: PPUSH
25777: LD_INT 6
25779: PPUSH
25780: LD_EXP 57
25784: PPUSH
25785: LD_EXP 36
25789: PPUSH
25790: LD_EXP 37
25794: PPUSH
25795: CALL_OW 12
25799: PPUSH
25800: LD_INT 3
25802: PPUSH
25803: LD_INT 1
25805: PPUSH
25806: LD_INT 3
25808: PUSH
25809: LD_INT 3
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PPUSH
25816: LD_INT 43
25818: PUSH
25819: LD_INT 44
25821: PUSH
25822: LD_INT 45
25824: PUSH
25825: LD_INT 46
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: PPUSH
25834: EMPTY
25835: PPUSH
25836: EMPTY
25837: PPUSH
25838: LD_INT 1
25840: PPUSH
25841: CALL 15801 0 11
// end ;
25845: END
// every 10 10$00 trigger joinEpsilon do
25846: LD_EXP 29
25850: IFFALSE 25904
25852: GO 25854
25854: DISABLE
// begin enable ;
25855: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25856: LD_ADDR_EXP 57
25860: PUSH
25861: LD_EXP 57
25865: PUSH
25866: LD_INT 1
25868: PPUSH
25869: LD_OWVAR 67
25873: PPUSH
25874: CALL_OW 12
25878: PLUS
25879: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25880: LD_ADDR_EXP 58
25884: PUSH
25885: LD_EXP 58
25889: PUSH
25890: LD_INT 1
25892: PPUSH
25893: LD_OWVAR 67
25897: PPUSH
25898: CALL_OW 12
25902: PLUS
25903: ST_TO_ADDR
// end ;
25904: END
// every 21 21$0 trigger attackAvalaible = 1 do
25905: LD_EXP 61
25909: PUSH
25910: LD_INT 1
25912: EQUAL
25913: IFFALSE 25926
25915: GO 25917
25917: DISABLE
// attackAvalaible = 0 ; end_of_file
25918: LD_ADDR_EXP 61
25922: PUSH
25923: LD_INT 0
25925: ST_TO_ADDR
25926: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25927: LD_INT 54
25929: PPUSH
25930: LD_INT 1
25932: PPUSH
25933: CALL_OW 321
25937: PUSH
25938: LD_INT 2
25940: EQUAL
25941: PUSH
25942: LD_INT 55
25944: PPUSH
25945: LD_INT 1
25947: PPUSH
25948: CALL_OW 321
25952: PUSH
25953: LD_INT 2
25955: EQUAL
25956: AND
25957: PUSH
25958: LD_INT 21
25960: PPUSH
25961: LD_INT 1
25963: PPUSH
25964: CALL_OW 321
25968: PUSH
25969: LD_INT 2
25971: EQUAL
25972: AND
25973: PUSH
25974: LD_INT 22
25976: PPUSH
25977: LD_INT 1
25979: PPUSH
25980: CALL_OW 321
25984: PUSH
25985: LD_INT 2
25987: EQUAL
25988: AND
25989: PUSH
25990: LD_INT 12
25992: PPUSH
25993: LD_INT 1
25995: PPUSH
25996: CALL_OW 321
26000: PUSH
26001: LD_INT 1
26003: EQUAL
26004: PUSH
26005: LD_INT 32
26007: PPUSH
26008: LD_INT 1
26010: PPUSH
26011: CALL_OW 321
26015: PUSH
26016: LD_INT 1
26018: EQUAL
26019: OR
26020: PUSH
26021: EMPTY
26022: LIST
26023: AND
26024: PUSH
26025: LD_EXP 48
26029: PUSH
26030: LD_INT 1
26032: EQUAL
26033: AND
26034: PUSH
26035: LD_INT 22
26037: PUSH
26038: LD_INT 3
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 21
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PPUSH
26059: CALL_OW 69
26063: PUSH
26064: LD_INT 0
26066: EQUAL
26067: AND
26068: IFFALSE 26124
26070: GO 26072
26072: DISABLE
// begin case query ( QEndMission ) of 1 :
26073: LD_STRING QEndMission
26075: PPUSH
26076: CALL_OW 97
26080: PUSH
26081: LD_INT 1
26083: DOUBLE
26084: EQUAL
26085: IFTRUE 26089
26087: GO 26100
26089: POP
// begin end_the_mission_allowed = true ;
26090: LD_ADDR_OWVAR 57
26094: PUSH
26095: LD_INT 1
26097: ST_TO_ADDR
// end ; 2 :
26098: GO 26124
26100: LD_INT 2
26102: DOUBLE
26103: EQUAL
26104: IFTRUE 26108
26106: GO 26123
26108: POP
// begin fastEnd = 1 ;
26109: LD_ADDR_EXP 60
26113: PUSH
26114: LD_INT 1
26116: ST_TO_ADDR
// FinishMission ;
26117: CALL 26125 0 0
// end ; end ;
26121: GO 26124
26123: POP
// end ;
26124: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
26125: LD_INT 0
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
// m1 := false ;
26131: LD_ADDR_VAR 0 2
26135: PUSH
26136: LD_INT 0
26138: ST_TO_ADDR
// m2 := false ;
26139: LD_ADDR_VAR 0 3
26143: PUSH
26144: LD_INT 0
26146: ST_TO_ADDR
// m3 := false ;
26147: LD_ADDR_VAR 0 4
26151: PUSH
26152: LD_INT 0
26154: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
26155: LD_EXP 53
26159: PPUSH
26160: LD_STRING 10_KhatamStatus_1
26162: PPUSH
26163: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
26167: LD_EXP 52
26171: PPUSH
26172: LD_STRING 10_GensherEscape_1
26174: PPUSH
26175: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
26179: LD_INT 12
26181: PPUSH
26182: LD_INT 1
26184: PPUSH
26185: CALL_OW 321
26189: PUSH
26190: LD_INT 2
26192: EQUAL
26193: IFFALSE 26215
// begin AddMedal ( sights , 1 ) ;
26195: LD_STRING sights
26197: PPUSH
26198: LD_INT 1
26200: PPUSH
26201: CALL_OW 101
// m1 := true ;
26205: LD_ADDR_VAR 0 2
26209: PUSH
26210: LD_INT 1
26212: ST_TO_ADDR
// end else
26213: GO 26226
// begin AddMedal ( sights , - 1 ) ;
26215: LD_STRING sights
26217: PPUSH
26218: LD_INT 1
26220: NEG
26221: PPUSH
26222: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
26226: LD_INT 32
26228: PPUSH
26229: LD_INT 1
26231: PPUSH
26232: CALL_OW 321
26236: PUSH
26237: LD_INT 2
26239: EQUAL
26240: IFFALSE 26262
// begin AddMedal ( computers , 1 ) ;
26242: LD_STRING computers
26244: PPUSH
26245: LD_INT 1
26247: PPUSH
26248: CALL_OW 101
// m2 := true ;
26252: LD_ADDR_VAR 0 3
26256: PUSH
26257: LD_INT 1
26259: ST_TO_ADDR
// end else
26260: GO 26273
// begin AddMedal ( computers , - 1 ) ;
26262: LD_STRING computers
26264: PPUSH
26265: LD_INT 1
26267: NEG
26268: PPUSH
26269: CALL_OW 101
// end ; if arabianEscape = 0 then
26273: LD_EXP 47
26277: PUSH
26278: LD_INT 0
26280: EQUAL
26281: IFFALSE 26313
// begin AddMedal ( renegades , 2 ) ;
26283: LD_STRING renegades
26285: PPUSH
26286: LD_INT 2
26288: PPUSH
26289: CALL_OW 101
// m3 := true ;
26293: LD_ADDR_VAR 0 4
26297: PUSH
26298: LD_INT 1
26300: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
26301: LD_INT 0
26303: PPUSH
26304: LD_STRING 10_ScientistsEscape_1
26306: PPUSH
26307: CALL_OW 39
// end else
26311: GO 26324
// begin AddMedal ( renegades , - 1 ) ;
26313: LD_STRING renegades
26315: PPUSH
26316: LD_INT 1
26318: NEG
26319: PPUSH
26320: CALL_OW 101
// end ; SaveEpsilonBase ;
26324: CALL 27086 0 0
// if m1 and m2 and m3 and Difficulty = 3 then
26328: LD_VAR 0 2
26332: PUSH
26333: LD_VAR 0 3
26337: AND
26338: PUSH
26339: LD_VAR 0 4
26343: AND
26344: PUSH
26345: LD_OWVAR 67
26349: PUSH
26350: LD_INT 3
26352: EQUAL
26353: AND
26354: IFFALSE 26366
// SetAchievementEX ( ACH_AMER , 10 ) ;
26356: LD_STRING ACH_AMER
26358: PPUSH
26359: LD_INT 10
26361: PPUSH
26362: CALL_OW 564
// GiveMedals ( Main ) ;
26366: LD_STRING Main
26368: PPUSH
26369: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
26373: LD_INT 22
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 23
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 21
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 2
26405: PUSH
26406: LD_INT 25
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 25
26418: PUSH
26419: LD_INT 2
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 25
26428: PUSH
26429: LD_INT 3
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 25
26438: PUSH
26439: LD_INT 4
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 25
26448: PUSH
26449: LD_INT 5
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 25
26458: PUSH
26459: LD_INT 8
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: PPUSH
26481: CALL_OW 69
26485: PPUSH
26486: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26490: LD_EXP 1
26494: PPUSH
26495: LD_EXP 54
26499: PUSH
26500: LD_STRING JMM
26502: STR
26503: PPUSH
26504: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26508: LD_EXP 2
26512: PPUSH
26513: LD_EXP 54
26517: PUSH
26518: LD_STRING Brown
26520: STR
26521: PPUSH
26522: CALL 9971 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26526: LD_EXP 3
26530: PPUSH
26531: LD_EXP 54
26535: PUSH
26536: LD_STRING Donaldson
26538: STR
26539: PPUSH
26540: CALL 9971 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26544: LD_EXP 4
26548: PPUSH
26549: LD_EXP 54
26553: PUSH
26554: LD_STRING Bobby
26556: STR
26557: PPUSH
26558: CALL 9971 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26562: LD_EXP 5
26566: PPUSH
26567: LD_EXP 54
26571: PUSH
26572: LD_STRING Cyrus
26574: STR
26575: PPUSH
26576: CALL 9971 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26580: LD_EXP 6
26584: PPUSH
26585: LD_EXP 54
26589: PUSH
26590: LD_STRING Lisa
26592: STR
26593: PPUSH
26594: CALL 9971 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26598: LD_EXP 7
26602: PPUSH
26603: LD_EXP 54
26607: PUSH
26608: LD_STRING Frank
26610: STR
26611: PPUSH
26612: CALL 9971 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26616: LD_EXP 8
26620: PPUSH
26621: LD_EXP 54
26625: PUSH
26626: LD_STRING Kikuchi
26628: STR
26629: PPUSH
26630: CALL 9971 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26634: LD_EXP 9
26638: PPUSH
26639: LD_EXP 54
26643: PUSH
26644: LD_STRING Houten
26646: STR
26647: PPUSH
26648: CALL 9971 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26652: LD_EXP 10
26656: PPUSH
26657: LD_EXP 54
26661: PUSH
26662: LD_STRING Gary
26664: STR
26665: PPUSH
26666: CALL 9971 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26670: LD_EXP 19
26674: PPUSH
26675: LD_EXP 54
26679: PUSH
26680: LD_STRING Cornell
26682: STR
26683: PPUSH
26684: CALL 9971 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26688: LD_EXP 11
26692: PPUSH
26693: LD_EXP 54
26697: PUSH
26698: LD_STRING Simms
26700: STR
26701: PPUSH
26702: CALL 9971 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26706: LD_EXP 12
26710: PPUSH
26711: LD_EXP 54
26715: PUSH
26716: LD_STRING Denis
26718: STR
26719: PPUSH
26720: CALL 9971 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26724: LD_EXP 13
26728: PPUSH
26729: LD_EXP 54
26733: PUSH
26734: LD_STRING Joan
26736: STR
26737: PPUSH
26738: CALL 9971 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26742: LD_EXP 15
26746: PPUSH
26747: LD_EXP 54
26751: PUSH
26752: LD_STRING Gladstone
26754: STR
26755: PPUSH
26756: CALL 9971 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26760: LD_EXP 17
26764: PPUSH
26765: LD_EXP 54
26769: PUSH
26770: LD_STRING DeltaDoctor
26772: STR
26773: PPUSH
26774: CALL 9971 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
26778: LD_EXP 22
26782: PPUSH
26783: LD_STRING 10c_lock
26785: PPUSH
26786: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26790: LD_INT 50
26792: PUSH
26793: EMPTY
26794: LIST
26795: PUSH
26796: LD_INT 22
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 21
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: LD_INT 25
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 25
26831: PUSH
26832: LD_INT 2
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 25
26841: PUSH
26842: LD_INT 3
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 25
26851: PUSH
26852: LD_INT 4
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 25
26861: PUSH
26862: LD_INT 5
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 25
26871: PUSH
26872: LD_INT 8
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: PPUSH
26894: CALL_OW 69
26898: PUSH
26899: LD_EXP 1
26903: PUSH
26904: LD_EXP 2
26908: PUSH
26909: LD_EXP 3
26913: PUSH
26914: LD_EXP 4
26918: PUSH
26919: LD_EXP 5
26923: PUSH
26924: LD_EXP 6
26928: PUSH
26929: LD_EXP 7
26933: PUSH
26934: LD_EXP 15
26938: PUSH
26939: LD_EXP 8
26943: PUSH
26944: LD_EXP 12
26948: PUSH
26949: LD_EXP 13
26953: PUSH
26954: LD_EXP 9
26958: PUSH
26959: LD_EXP 11
26963: PUSH
26964: LD_EXP 10
26968: PUSH
26969: LD_EXP 17
26973: PUSH
26974: LD_EXP 19
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: DIFF
26997: PPUSH
26998: LD_STRING 10_other_survivors
27000: PPUSH
27001: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
27005: LD_INT 50
27007: PUSH
27008: EMPTY
27009: LIST
27010: PUSH
27011: LD_INT 22
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 21
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 2
27033: PUSH
27034: LD_INT 25
27036: PUSH
27037: LD_INT 16
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 25
27046: PUSH
27047: LD_INT 12
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: LIST
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: PPUSH
27065: CALL_OW 69
27069: PPUSH
27070: LD_STRING 10_ape
27072: PPUSH
27073: CALL_OW 38
// YouWin ;
27077: CALL_OW 103
// end ;
27081: LD_VAR 0 1
27085: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
27086: LD_INT 0
27088: PPUSH
27089: PPUSH
27090: PPUSH
27091: PPUSH
// epsilonBase = [ ] ;
27092: LD_ADDR_VAR 0 2
27096: PUSH
27097: EMPTY
27098: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
27099: LD_ADDR_VAR 0 3
27103: PUSH
27104: LD_INT 22
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 23
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 21
27126: PUSH
27127: LD_INT 3
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 50
27136: PUSH
27137: EMPTY
27138: LIST
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: PPUSH
27146: CALL_OW 69
27150: ST_TO_ADDR
// for i in buildings do
27151: LD_ADDR_VAR 0 4
27155: PUSH
27156: LD_VAR 0 3
27160: PUSH
27161: FOR_IN
27162: IFFALSE 27614
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
27164: LD_VAR 0 4
27168: PPUSH
27169: CALL_OW 266
27173: PUSH
27174: LD_INT 6
27176: PUSH
27177: LD_INT 7
27179: PUSH
27180: LD_INT 8
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: LIST
27187: IN
27188: IFFALSE 27302
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
27190: LD_ADDR_VAR 0 2
27194: PUSH
27195: LD_VAR 0 2
27199: PUSH
27200: LD_VAR 0 4
27204: PPUSH
27205: CALL_OW 266
27209: PUSH
27210: LD_VAR 0 4
27214: PPUSH
27215: CALL_OW 250
27219: PUSH
27220: LD_VAR 0 4
27224: PPUSH
27225: CALL_OW 251
27229: PUSH
27230: LD_VAR 0 4
27234: PPUSH
27235: CALL_OW 254
27239: PUSH
27240: LD_VAR 0 4
27244: PPUSH
27245: CALL_OW 267
27249: PUSH
27250: LD_VAR 0 4
27254: PPUSH
27255: CALL_OW 248
27259: PUSH
27260: LD_VAR 0 4
27264: PPUSH
27265: LD_INT 1
27267: PPUSH
27268: CALL_OW 268
27272: PUSH
27273: LD_VAR 0 4
27277: PPUSH
27278: LD_INT 2
27280: PPUSH
27281: CALL_OW 268
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: PUSH
27296: EMPTY
27297: LIST
27298: ADD
27299: ST_TO_ADDR
27300: GO 27612
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
27302: LD_VAR 0 4
27306: PPUSH
27307: CALL_OW 266
27311: PUSH
27312: LD_INT 32
27314: EQUAL
27315: PUSH
27316: LD_VAR 0 4
27320: PPUSH
27321: CALL_OW 266
27325: PUSH
27326: LD_INT 33
27328: EQUAL
27329: OR
27330: IFFALSE 27427
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
27332: LD_ADDR_VAR 0 2
27336: PUSH
27337: LD_VAR 0 2
27341: PUSH
27342: LD_VAR 0 4
27346: PPUSH
27347: CALL_OW 266
27351: PUSH
27352: LD_VAR 0 4
27356: PPUSH
27357: CALL_OW 250
27361: PUSH
27362: LD_VAR 0 4
27366: PPUSH
27367: CALL_OW 251
27371: PUSH
27372: LD_VAR 0 4
27376: PPUSH
27377: CALL_OW 254
27381: PUSH
27382: LD_VAR 0 4
27386: PPUSH
27387: CALL_OW 267
27391: PUSH
27392: LD_VAR 0 4
27396: PPUSH
27397: CALL_OW 248
27401: PUSH
27402: LD_VAR 0 4
27406: PPUSH
27407: CALL_OW 269
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: PUSH
27421: EMPTY
27422: LIST
27423: ADD
27424: ST_TO_ADDR
27425: GO 27612
// if GetBType ( i ) = b_factory then
27427: LD_VAR 0 4
27431: PPUSH
27432: CALL_OW 266
27436: PUSH
27437: LD_INT 3
27439: EQUAL
27440: IFFALSE 27530
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
27442: LD_ADDR_VAR 0 2
27446: PUSH
27447: LD_VAR 0 2
27451: PPUSH
27452: LD_INT 1
27454: PPUSH
27455: LD_VAR 0 4
27459: PPUSH
27460: CALL_OW 266
27464: PUSH
27465: LD_VAR 0 4
27469: PPUSH
27470: CALL_OW 250
27474: PUSH
27475: LD_VAR 0 4
27479: PPUSH
27480: CALL_OW 251
27484: PUSH
27485: LD_VAR 0 4
27489: PPUSH
27490: CALL_OW 254
27494: PUSH
27495: LD_VAR 0 4
27499: PPUSH
27500: CALL_OW 267
27504: PUSH
27505: LD_VAR 0 4
27509: PPUSH
27510: CALL_OW 248
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: PPUSH
27523: CALL_OW 2
27527: ST_TO_ADDR
27528: GO 27612
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27530: LD_ADDR_VAR 0 2
27534: PUSH
27535: LD_VAR 0 2
27539: PUSH
27540: LD_VAR 0 4
27544: PPUSH
27545: CALL_OW 266
27549: PUSH
27550: LD_VAR 0 4
27554: PPUSH
27555: CALL_OW 250
27559: PUSH
27560: LD_VAR 0 4
27564: PPUSH
27565: CALL_OW 251
27569: PUSH
27570: LD_VAR 0 4
27574: PPUSH
27575: CALL_OW 254
27579: PUSH
27580: LD_VAR 0 4
27584: PPUSH
27585: CALL_OW 267
27589: PUSH
27590: LD_VAR 0 4
27594: PPUSH
27595: CALL_OW 248
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: PUSH
27608: EMPTY
27609: LIST
27610: ADD
27611: ST_TO_ADDR
// end ;
27612: GO 27161
27614: POP
27615: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27616: LD_VAR 0 2
27620: PPUSH
27621: LD_STRING 10_EpsilonBase
27623: PPUSH
27624: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
27628: LD_INT 19
27630: PPUSH
27631: LD_STRING 10_EpsilonEnv
27633: PPUSH
27634: CALL 27643 0 2
// end ;
27638: LD_VAR 0 1
27642: RET
// export function SaveEnvironment ( area , saveId ) ; begin
27643: LD_INT 0
27645: PPUSH
// result := ListEnvironmentArea ( area ) ;
27646: LD_ADDR_VAR 0 3
27650: PUSH
27651: LD_VAR 0 1
27655: PPUSH
27656: CALL_OW 353
27660: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
27661: LD_VAR 0 3
27665: PPUSH
27666: LD_VAR 0 2
27670: PPUSH
27671: CALL_OW 39
// end ; end_of_file
27675: LD_VAR 0 3
27679: RET
// every 0 0$01 do var timer ;
27680: GO 27682
27682: DISABLE
27683: LD_INT 0
27685: PPUSH
// begin timer := 0 0$30 ;
27686: LD_ADDR_VAR 0 1
27690: PUSH
27691: LD_INT 1050
27693: ST_TO_ADDR
// repeat wait ( timer ) ;
27694: LD_VAR 0 1
27698: PPUSH
27699: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
27703: LD_EXP 56
27707: PUSH
27708: LD_INT 6
27710: GREATEREQUAL
27711: PUSH
27712: LD_EXP 56
27716: PUSH
27717: LD_INT 12
27719: LESS
27720: AND
27721: IFFALSE 27737
// timer := timer + 0 0$3 ;
27723: LD_ADDR_VAR 0 1
27727: PUSH
27728: LD_VAR 0 1
27732: PUSH
27733: LD_INT 105
27735: PLUS
27736: ST_TO_ADDR
// if cratesSpawned >= 12 then
27737: LD_EXP 56
27741: PUSH
27742: LD_INT 12
27744: GREATEREQUAL
27745: IFFALSE 27761
// timer := timer + 0 0$9 ;
27747: LD_ADDR_VAR 0 1
27751: PUSH
27752: LD_VAR 0 1
27756: PUSH
27757: LD_INT 315
27759: PLUS
27760: ST_TO_ADDR
// if timer > 3 3$00 then
27761: LD_VAR 0 1
27765: PUSH
27766: LD_INT 6300
27768: GREATER
27769: IFFALSE 27779
// timer := 0 0$50 ;
27771: LD_ADDR_VAR 0 1
27775: PUSH
27776: LD_INT 1750
27778: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
27779: LD_INT 1
27781: PPUSH
27782: LD_INT 5
27784: PPUSH
27785: CALL_OW 12
27789: PPUSH
27790: LD_INT 16
27792: PPUSH
27793: LD_INT 1
27795: PPUSH
27796: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27800: LD_ADDR_EXP 56
27804: PUSH
27805: LD_EXP 56
27809: PUSH
27810: LD_INT 1
27812: PLUS
27813: ST_TO_ADDR
// until false ;
27814: LD_INT 0
27816: IFFALSE 27694
// end ; end_of_file
27818: PPOPN 1
27820: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
27821: GO 27823
27823: DISABLE
// begin ru_radar := 98 ;
27824: LD_ADDR_EXP 65
27828: PUSH
27829: LD_INT 98
27831: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27832: LD_ADDR_EXP 66
27836: PUSH
27837: LD_INT 89
27839: ST_TO_ADDR
// us_hack := 99 ;
27840: LD_ADDR_EXP 67
27844: PUSH
27845: LD_INT 99
27847: ST_TO_ADDR
// us_artillery := 97 ;
27848: LD_ADDR_EXP 68
27852: PUSH
27853: LD_INT 97
27855: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27856: LD_ADDR_EXP 69
27860: PUSH
27861: LD_INT 91
27863: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
27864: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
27865: LD_INT 0
27867: PPUSH
27868: PPUSH
27869: PPUSH
27870: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27871: LD_VAR 0 1
27875: PPUSH
27876: CALL_OW 264
27880: PUSH
27881: LD_EXP 69
27885: EQUAL
27886: IFFALSE 27958
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27888: LD_INT 68
27890: PPUSH
27891: LD_VAR 0 1
27895: PPUSH
27896: CALL_OW 255
27900: PPUSH
27901: CALL_OW 321
27905: PUSH
27906: LD_INT 2
27908: EQUAL
27909: IFFALSE 27921
// eff := 70 else
27911: LD_ADDR_VAR 0 6
27915: PUSH
27916: LD_INT 70
27918: ST_TO_ADDR
27919: GO 27929
// eff := 30 ;
27921: LD_ADDR_VAR 0 6
27925: PUSH
27926: LD_INT 30
27928: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27929: LD_VAR 0 1
27933: PPUSH
27934: CALL_OW 250
27938: PPUSH
27939: LD_VAR 0 1
27943: PPUSH
27944: CALL_OW 251
27948: PPUSH
27949: LD_VAR 0 6
27953: PPUSH
27954: CALL_OW 495
// end ; end ;
27958: LD_VAR 0 4
27962: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
27963: LD_INT 0
27965: PPUSH
27966: PPUSH
27967: PPUSH
27968: PPUSH
27969: PPUSH
27970: PPUSH
// if cmd = 124 then
27971: LD_VAR 0 1
27975: PUSH
27976: LD_INT 124
27978: EQUAL
27979: IFFALSE 28185
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
27981: LD_ADDR_VAR 0 5
27985: PUSH
27986: LD_INT 2
27988: PUSH
27989: LD_INT 34
27991: PUSH
27992: LD_INT 53
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 34
28001: PUSH
28002: LD_INT 14
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: LIST
28013: PPUSH
28014: CALL_OW 69
28018: ST_TO_ADDR
// if not tmp then
28019: LD_VAR 0 5
28023: NOT
28024: IFFALSE 28028
// exit ;
28026: GO 28185
// for i in tmp do
28028: LD_ADDR_VAR 0 3
28032: PUSH
28033: LD_VAR 0 5
28037: PUSH
28038: FOR_IN
28039: IFFALSE 28183
// begin taskList := GetTaskList ( i ) ;
28041: LD_ADDR_VAR 0 6
28045: PUSH
28046: LD_VAR 0 3
28050: PPUSH
28051: CALL_OW 437
28055: ST_TO_ADDR
// if not taskList then
28056: LD_VAR 0 6
28060: NOT
28061: IFFALSE 28065
// continue ;
28063: GO 28038
// for j = 1 to taskList do
28065: LD_ADDR_VAR 0 4
28069: PUSH
28070: DOUBLE
28071: LD_INT 1
28073: DEC
28074: ST_TO_ADDR
28075: LD_VAR 0 6
28079: PUSH
28080: FOR_TO
28081: IFFALSE 28179
// if taskList [ j ] [ 1 ] = | then
28083: LD_VAR 0 6
28087: PUSH
28088: LD_VAR 0 4
28092: ARRAY
28093: PUSH
28094: LD_INT 1
28096: ARRAY
28097: PUSH
28098: LD_STRING |
28100: EQUAL
28101: IFFALSE 28177
// begin _taskList := Delete ( taskList , 1 ) ;
28103: LD_ADDR_VAR 0 7
28107: PUSH
28108: LD_VAR 0 6
28112: PPUSH
28113: LD_INT 1
28115: PPUSH
28116: CALL_OW 3
28120: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
28121: LD_VAR 0 3
28125: PPUSH
28126: LD_VAR 0 7
28130: PPUSH
28131: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
28135: LD_VAR 0 3
28139: PPUSH
28140: LD_VAR 0 6
28144: PUSH
28145: LD_VAR 0 4
28149: ARRAY
28150: PUSH
28151: LD_INT 2
28153: ARRAY
28154: PPUSH
28155: LD_VAR 0 6
28159: PUSH
28160: LD_VAR 0 4
28164: ARRAY
28165: PUSH
28166: LD_INT 3
28168: ARRAY
28169: PPUSH
28170: LD_INT 8
28172: PPUSH
28173: CALL 28190 0 4
// end ;
28177: GO 28080
28179: POP
28180: POP
// end ;
28181: GO 28038
28183: POP
28184: POP
// end ; end ;
28185: LD_VAR 0 2
28189: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28190: LD_INT 0
28192: PPUSH
28193: PPUSH
28194: PPUSH
28195: PPUSH
28196: PPUSH
28197: PPUSH
28198: PPUSH
28199: PPUSH
28200: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28201: LD_VAR 0 1
28205: NOT
28206: PUSH
28207: LD_VAR 0 2
28211: PPUSH
28212: LD_VAR 0 3
28216: PPUSH
28217: CALL_OW 488
28221: NOT
28222: OR
28223: PUSH
28224: LD_VAR 0 4
28228: NOT
28229: OR
28230: IFFALSE 28234
// exit ;
28232: GO 28574
// list := [ ] ;
28234: LD_ADDR_VAR 0 13
28238: PUSH
28239: EMPTY
28240: ST_TO_ADDR
// if x - r < 0 then
28241: LD_VAR 0 2
28245: PUSH
28246: LD_VAR 0 4
28250: MINUS
28251: PUSH
28252: LD_INT 0
28254: LESS
28255: IFFALSE 28267
// min_x := 0 else
28257: LD_ADDR_VAR 0 7
28261: PUSH
28262: LD_INT 0
28264: ST_TO_ADDR
28265: GO 28283
// min_x := x - r ;
28267: LD_ADDR_VAR 0 7
28271: PUSH
28272: LD_VAR 0 2
28276: PUSH
28277: LD_VAR 0 4
28281: MINUS
28282: ST_TO_ADDR
// if y - r < 0 then
28283: LD_VAR 0 3
28287: PUSH
28288: LD_VAR 0 4
28292: MINUS
28293: PUSH
28294: LD_INT 0
28296: LESS
28297: IFFALSE 28309
// min_y := 0 else
28299: LD_ADDR_VAR 0 8
28303: PUSH
28304: LD_INT 0
28306: ST_TO_ADDR
28307: GO 28325
// min_y := y - r ;
28309: LD_ADDR_VAR 0 8
28313: PUSH
28314: LD_VAR 0 3
28318: PUSH
28319: LD_VAR 0 4
28323: MINUS
28324: ST_TO_ADDR
// max_x := x + r ;
28325: LD_ADDR_VAR 0 9
28329: PUSH
28330: LD_VAR 0 2
28334: PUSH
28335: LD_VAR 0 4
28339: PLUS
28340: ST_TO_ADDR
// max_y := y + r ;
28341: LD_ADDR_VAR 0 10
28345: PUSH
28346: LD_VAR 0 3
28350: PUSH
28351: LD_VAR 0 4
28355: PLUS
28356: ST_TO_ADDR
// for _x = min_x to max_x do
28357: LD_ADDR_VAR 0 11
28361: PUSH
28362: DOUBLE
28363: LD_VAR 0 7
28367: DEC
28368: ST_TO_ADDR
28369: LD_VAR 0 9
28373: PUSH
28374: FOR_TO
28375: IFFALSE 28492
// for _y = min_y to max_y do
28377: LD_ADDR_VAR 0 12
28381: PUSH
28382: DOUBLE
28383: LD_VAR 0 8
28387: DEC
28388: ST_TO_ADDR
28389: LD_VAR 0 10
28393: PUSH
28394: FOR_TO
28395: IFFALSE 28488
// begin if not ValidHex ( _x , _y ) then
28397: LD_VAR 0 11
28401: PPUSH
28402: LD_VAR 0 12
28406: PPUSH
28407: CALL_OW 488
28411: NOT
28412: IFFALSE 28416
// continue ;
28414: GO 28394
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28416: LD_VAR 0 11
28420: PPUSH
28421: LD_VAR 0 12
28425: PPUSH
28426: CALL_OW 351
28430: PUSH
28431: LD_VAR 0 11
28435: PPUSH
28436: LD_VAR 0 12
28440: PPUSH
28441: CALL_OW 554
28445: AND
28446: IFFALSE 28486
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28448: LD_ADDR_VAR 0 13
28452: PUSH
28453: LD_VAR 0 13
28457: PPUSH
28458: LD_VAR 0 13
28462: PUSH
28463: LD_INT 1
28465: PLUS
28466: PPUSH
28467: LD_VAR 0 11
28471: PUSH
28472: LD_VAR 0 12
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PPUSH
28481: CALL_OW 2
28485: ST_TO_ADDR
// end ;
28486: GO 28394
28488: POP
28489: POP
28490: GO 28374
28492: POP
28493: POP
// if not list then
28494: LD_VAR 0 13
28498: NOT
28499: IFFALSE 28503
// exit ;
28501: GO 28574
// for i in list do
28503: LD_ADDR_VAR 0 6
28507: PUSH
28508: LD_VAR 0 13
28512: PUSH
28513: FOR_IN
28514: IFFALSE 28572
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28516: LD_VAR 0 1
28520: PPUSH
28521: LD_STRING M
28523: PUSH
28524: LD_VAR 0 6
28528: PUSH
28529: LD_INT 1
28531: ARRAY
28532: PUSH
28533: LD_VAR 0 6
28537: PUSH
28538: LD_INT 2
28540: ARRAY
28541: PUSH
28542: LD_INT 0
28544: PUSH
28545: LD_INT 0
28547: PUSH
28548: LD_INT 0
28550: PUSH
28551: LD_INT 0
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: PUSH
28563: EMPTY
28564: LIST
28565: PPUSH
28566: CALL_OW 447
28570: GO 28513
28572: POP
28573: POP
// end ;
28574: LD_VAR 0 5
28578: RET
