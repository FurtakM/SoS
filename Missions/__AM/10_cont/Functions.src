Export Function PrepareUnit(ident, exist_mode);
var unit;
begin

if exist_mode then
unit := CreateCharacter(ident)
else
unit := NewCharacter(ident);

result := unit;
End;

Export function DialogRandom(characters, dialogMID, dialogFID);
var i, rnd;
begin  
characters := characters diff [JMM, Brown, Donaldson, Bobby, Cyrus, Lisa, Frank, Kikuchi, Houten, Gary, Simms, Denis, Joan, Khatam, Gladstone, Steve, DeltaDoctor, AmScout, Cornell, Powell];

if not characters then
   exit;

rnd = rand(1, characters);

for i = 1 to characters do
begin

    if i = rnd AND GetSex(characters[i]) = 1 then Say(characters[i], dialogMID);
    if i = rnd AND GetSex(characters[i]) = 2 then Say(characters[i], dialogFID);

end;

end;

Export function EnchancedSaveCharacters(charactersList, ident);
var i;
begin
    for i in charactersList do
        SaveCharacters(i, ident);
end;

Export function PrepareDifficulty;
begin
    if difficulty = 1 then
    begin
        RuSolMinLevel = 4;
        RuSolMaxLevel = 7;
        SetTech(tech_Weap1, 6, state_researched);
        SetTech(tech_Weap1, 5, state_researched);
    end;

    if difficulty = 2 then
    begin
        RuSolMinLevel = 5;
        RuSolMaxLevel = 7;
        SetTech(tech_Weap1, 6, state_researched);
        SetTech(tech_Comp1, 6, state_researched);
        SetTech(tech_ST1, 6, state_researched);
        SetTech(tech_Weap1, 5, state_researched);
        SetTech(tech_StimDrugs, 2, state_researched);
        SetTech(tech_StimDrugs, 5, state_researched);
    end;

    if difficulty = 3 then
    begin
        RuSolMinLevel = 6;
        RuSolMaxLevel = 8;
        SetTech(tech_Weap1, 6, state_researched);
        SetTech(tech_Comp1, 6, state_researched);
        SetTech(tech_Weap2, 6, state_researched);
        SetTech(tech_Comp2, 6, state_researched);
        SetTech(tech_ST1, 6, state_researched);
        SetTech(tech_ST2, 6, state_researched);
        SetTech(tech_Weap1, 5, state_researched);
        SetTech(tech_Weap2, 5, state_researched);
        SetTech(tech_Bio1, 2, state_researched);
        SetTech(tech_Bio1, 5, state_researched);
    end;
end;

// AI functions

Export function BuildRussianBase(position);
var i, engineers, buildingsTab, area, sources;
begin

// 1 - west , 2 - middle, 3 - east

   sources := [ [43,68], [43,79], [99,114], [103,114], [156,92], [152,85] ];

   for i in sources do
       SetResourceVisibility(i[1], i[2], 3);

   case position of
   1: area := westConv;
   2: area := midConv;
   3: area := eastConv;
   end;

   area := AreaToList(area, 0);

    for i = 1 to area[1] do
       begin
       PlaceSeeing(area[1][i], area[2][i], 1, 1);
       RemoveSeeing(area[1][i], area[2][i], 1);
       end; 

   ruPossition = position;

    if position = 1 then
    begin
        engineers = FilterAllUnits([[f_side, 3], [f_class, 2]]);

        buildingsTab = [
            [b_depot, 49, 74, 3],
            [b_armoury, 73, 88, 5],
            [b_armoury, 56, 62, 3],
            [b_oil_mine, 43, 68, 2],
            [b_siberite_mine, 43, 79, 5],
            [b_siberite_power, 60, 75, 1],
            [b_workshop, 50, 87, 1],
            [b_siberite_power, 45, 67, 2],
            [b_ext_gun, 47, 84, 2],
            [b_ext_rocket, 46, 87, 1],
            [b_siberite_power, 41, 64, 5],
            [b_bunker, 75, 76, 5],
            [b_bunker, 77, 75, 5],
            [b_bunker, 69, 68, 3],
            [b_bunker, 59, 96, 5],
            [b_bunker, 56, 96, 0],
            [b_bunker, 51, 61, 3],
            [b_bunker, 42, 60, 3],
            [b_bunker, 36, 58, 3],
            [b_bunker, 39, 59, 3],
            [b_bunker, 61, 64, 3],
            [b_turret, 63, 90, 5],
            [b_turret, 64, 88, 5],
            [b_turret, 72, 82, 5],
            [b_lab, 42, 74, 1],
            [b_lab, 56, 77, 2],
            [b_ext_siberium, 54, 91, 5],
            [b_ext_track, 50, 83, 3],
            [b_ext_computer, 50, 90, 0]
        ];

        for i in FilterAllUnits([[f_side, 3], [f_not, [f_class, 2]]]) do AddComAgressiveMove(i, 53, 82);

        for i := 1 to buildingsTab do
            AddComBuild(engineers, buildingsTab[i][1], buildingsTab[i][2], buildingsTab[i][3], buildingsTab[i][4]);

    end;

    if position = 2 then
    begin
        engineers = FilterAllUnits([[f_side, 3], [f_class, 2]]);

        buildingsTab = [
            [b_depot, 104, 110, 5],
            [b_armoury, 98, 90, 3],
            [b_oil_mine, 103, 114, 2],
            [b_siberite_mine, 99, 114, 3],
            [b_siberite_power, 100, 112, 1],
            [b_workshop, 92, 101, 0],
            [b_siberite_power, 97, 116, 5],
            [b_ext_gun, 96, 101, 4],
            [b_ext_rocket, 88, 97, 2],
            [b_siberite_power, 106, 92, 2],
            [b_bunker, 88, 89, 2],
            [b_bunker, 86, 90, 2],
            [b_bunker, 85, 99, 2],
            [b_bunker, 85, 107, 1],
            [b_turret, 105, 99, 1],
            [b_turret, 102, 92, 3],
            [b_turret, 105, 92, 2],
            [b_lab, 92, 110, 0],
            [b_lab, 103, 103, 5],
            [b_ext_siberium, 89, 101, 1],
            [b_ext_track, 95, 104, 4],
            [b_ext_computer, 92, 105, 0]
        ];

        for i in FilterAllUnits([[f_side, 3], [f_not, [f_class, 2]]]) do AddComAgressiveMove(i, 96, 99);

        for i := 1 to buildingsTab do
            AddComBuild(engineers, buildingsTab[i][1], buildingsTab[i][2], buildingsTab[i][3], buildingsTab[i][4]);

    end;

    if position = 3 then
    begin
        engineers = FilterAllUnits([[f_side, 3], [f_class, 2]]);

        buildingsTab = [
            [ b_depot, 151, 71, 4],
            [b_armoury, 145, 53, 3],
            [b_armoury, 172,102, 5],
            [b_oil_mine, 152, 85, 3],
            [b_siberite_mine, 156, 92, 3],
            [b_siberite_power, 151, 66, 4],
            [b_workshop, 163, 95, 5],
            [b_siberite_power, 149, 63, 4],
            [b_ext_gun, 167, 99, 5],
            [b_ext_rocket, 163, 98, 0],
            [b_siberite_power, 154, 70, 4],
            [b_bunker, 155, 62, 4],
            [b_bunker, 161, 69, 4],
            [b_bunker, 168, 78, 4],
            [b_bunker, 163, 80, 5],
            [b_bunker, 136, 73, 0],
            [b_bunker, 157, 98, 0],
            [b_bunker, 150, 87, 1],
            [b_turret, 171, 97, 4],
            [b_turret, 168, 92, 4],
            [b_turret, 166, 80, 5],
            [b_turret, 141, 54, 2],
            [b_turret, 133, 57, 2],
            [b_turret, 132, 61, 2],
            [b_turret, 150, 82, 0],
            [b_turret, 132, 72, 0],
            [b_lab, 146, 64, 4],
            [b_lab, 159, 85, 4],
            [b_ext_siberium, 163, 91, 3],
            [b_ext_track, 166, 95, 4],
            [b_ext_computer, 159, 95, 1]
        ];

        for i in FilterAllUnits([[f_side, 3], [f_not, [f_class, 2]]]) do AddComAgressiveMove(i, 141, 65);

        for i := 1 to buildingsTab do
            AddComBuild(engineers, buildingsTab[i][1], buildingsTab[i][2], buildingsTab[i][3], buildingsTab[i][4]);

    end;

end;

Export function BuildArabianBase;
var i, engineers, buildingsTab;
begin

    engineers = FilterAllUnits([[f_side, 2], [f_class, 2]]);
    AddComBuild(engineers, b_depot, 71, 15, 3);

buildingsTab = [
    [b_lab, 77, 18, 3],
    [b_armoury, 77, 26, 0],
    [b_breastwork, 82, 28, 0],
    [b_breastwork, 84, 21, 3],
    [b_breastwork, 66, 14, 2],
    [b_solar_power, 67, 18, 5],
    [b_solar_power, 69, 23, 2],
];

for i := 1 to buildingsTab do
    AddComBuild(engineers, buildingsTab[i][1], buildingsTab[i][2], buildingsTab[i][3], buildingsTab[i][4]);
end;

Export Function IntBazooka(side, targetSide);
var ta, c, i, list, filter;
begin

    list   := FilterAllUnits([[f_side, side], [f_class, class_bazooker]]);
    filter := FilterAllUnits([[f_side, targetSide], [f_not, [f_type, unit_building]]]);

    c := Rand(1, 3);

        for i = 1 to list do
        for ta in filter do
            begin

            if GetDistUnits(list[i], ta) <= 15 then
                begin
                    Case c of
                    1: begin
                        ComTimeShift(list[i], GetX(ta), GetY(ta));

                        if eventVar2 = 0 then
                        begin
                            eventVar2 = 1;
                            wait(0$7);
                            CenterOnXY(GetX(ta), GetY(ta));
                            DialogueOn;
                            if IsOK(Cyrus) then
                            begin
                                Say(Cyrus, 'D9a-Cyrus-1');
                            end
                            else
                            begin
                                DialogRandom(FilterAllUnits([[f_side, 1], [f_sex, 1], [f_or, [f_class, 1], [f_class, 2], [f_class, 3], [f_class, 4], [f_class, 5]]]) diff [JMM, Khatam, Cyrus], 'D9a-Sol1-1', 'D9a-Sol1-1');
                            end;
                            DialogRandom(FilterAllUnits([[f_side, 1], [f_sex, 1], [f_or, [f_class, 1], [f_class, 2], [f_class, 3], [f_class, 4], [f_class, 5]]]) diff [JMM, Khatam, Cyrus], 'D9b-Sol1-1', 'D9b-Sol1-1');
                            if LoadVariable('09_arInfo', 0) = 1 then Say(JMM, 'D9a-JMM-1');
                            Say(JMM, 'D9c-JMM-1');
                            If GetTech(tech_LasSight, 1) = state_researched then Say(JMM, 'D9c-JMM-1a');
                            DialogueOff;
                        end;

                    end; 
                    2: begin
                        ComSpaceShift(list[i], GetX(ta) + Rand(-1,1), GetY(ta) + Rand(-1,1));
                        if eventVar2 = 0 then
                        begin
                            eventVar2 = 1;
                            wait(0$7);
                            CenterOnXY(GetX(ta), GetY(ta));
                            DialogueOn;
                            if IsOK(Cyrus) then
                            begin
                                Say(Cyrus, 'D9a-Cyrus-1');
                            end
                            else
                            begin
                                DialogRandom(FilterAllUnits([[f_side, 1], [f_sex, 1], [f_or, [f_class, 1], [f_class, 2], [f_class, 3], [f_class, 4], [f_class, 5]]]) diff [JMM, Khatam, Cyrus], 'D9a-Sol1-1', 'D9a-Sol1-1');
                            end;
                            DialogRandom(FilterAllUnits([[f_side, 1], [f_sex, 1], [f_or, [f_class, 1], [f_class, 2], [f_class, 3], [f_class, 4], [f_class, 5]]]) diff [JMM, Khatam, Cyrus], 'D9b-Sol1-1', 'D9b-Sol1-1');
                            if LoadVariable('09_arInfo', 0) = 1 then Say(JMM, 'D9a-JMM-1');
                            Say(JMM, 'D9c-JMM-1');
                            If GetTech(tech_LasSight, 1) = state_researched then Say(JMM, 'D9c-JMM-1a');
                            DialogueOff;
                        end;
                    end; 
                    3: ComAttackUnit(list[i], ta);
                    end;

                end;
            end;

End;

Export function ResAllTechs(side, lab, nation);
var i, tech, cout;
begin

For i = 1 to 72 do
If GetTech(i, side) = state_enabled and TechNationAvailable(i, nation) = true then AddComResearch(lab, i);

end;

Export function EnterBunkerOrBarrack(side, area);
var i,j, soldiers_list, turretList, temp, barrackList, insideUnits;
begin


soldiers_list = FilterAllUnits([[f_side, side], [f_outside], [f_lives, 700],  [f_not, [f_hastask]], [f_or, [f_class, 1], [f_class, 9]]]);
turretList = FilterAllUnits([[f_side, side], [f_btype, b_bunker], [f_empty], [f_lives, 251]]);
barrackList = FilterAllUnits([[f_side, side], [f_or, [f_btype, 4], [f_btype, 5]], [f_lives, 251]]);

if barrackList > 0 then
begin

    if turretList = 0 then
    begin
        for i in soldiers_list do ComEnterUnit(i, barrackList[Rand(1, barrackList)]);
    end else
    begin
        for i in barrackList do 
        begin
            insideUnits = UnitsInside(i);
            ComEnterUnit(insideUnits[1], turretList[1]);
            ComEnterUnit(soldiers_list[1], turretList[1]);
        end;
    end;

end;

end;


Export function RepairBuilding(side, building);
var buildings_list, i,engineerOkInside, engineerOkOutside, j;
begin

  engineerOkInside = UnitsInside(building);
  engineerOkOutside = FilterAllUnits([[f_side, side], [f_class, 2], [f_lives, 1000], [f_not, [f_inside]]]);
  buildings_list = FilterAllUnits([[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

  if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then exit;

  if buildings_list > 0 and engineerOkInside then
     for i in FilterAllUnits([[f_side, side], [f_class, 2]]) do ComExitBuilding(i);

  if buildings_list > 0  and engineerOkOutside > 0 then
  begin

    for i in engineerOkOutside do
      for j in buildings_list do
          ComRepairBuilding(i, j[1]);

  end;

  if buildings_list = 0 and engineerOkOutside > 0 then
      for i in engineerOkOutside do ComEnterUnit(i, building);
END;

Export function RebuildBuildings(side, destroyedBuildings);
var i;
begin
if FilterAllUnits([[f_side, side], [f_class, 2]]) > 0 and FilterAllUnits([[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]) = 0 and destroyedBuildings > 0  then
begin
    for i in FilterAllUnits([[f_side, side], [f_class, 2]]) do 
    begin
        AddComExitBuilding(i);
        AddComBuild(i, destroyedBuildings[1], destroyedBuildings[2], destroyedBuildings[3], destroyedBuildings[4]);
    end;
end;
end;

Export function HealUnitInBase(side, healArea, baseArea, build);
var sci_list, sci_listOutside,  i, j, damageUnits, unitsToHeal, tmp, rnd;
begin

  sci_list = FilterAllUnits([[f_side, side], [f_class, 4], [f_lives, 251]]);
  sci_listOutside = FilterUnitsInArea(baseArea, [[f_side, side], [f_class, 4], [f_ok]]);
  damageUnits = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_class, 3]], [f_not, [f_lives, 750]]]);
  unitsToHeal = FilterUnitsInArea(healArea,[[f_side, side], [f_type, unit_human], [f_not, [f_class, 3]], [f_not, [f_lives, 1000]]]);

  if not damageUnits and not sci_listOutside and not unitsToHeal then exit;

  if damageUnits > 0 and sci_list > 0 then
    for i in damageUnits do ComMoveToArea(i, healArea);

  if unitsToHeal > 0 and sci_list > 0 then
  begin
    for i in sci_list do
    begin

      ComExitBuilding(i);

      for j in unitsToHeal do AddComHeal(i, j);
    end;
  end;

  if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
      for i in sci_listOutside do
      begin
          tmp = FilterAllUnits([[f_side, side], [f_type, unit_building], [f_btype, b_lab_full]]);
          rnd = rand(1, tmp);
          ComEnterUnit(i, tmp[rnd]);
      end; 

END;

export function RespawnAttackVehicle(area, side, vehCount, mehskill, nation, vehEngine, vehControl, RUWeapons, ARWeapons, AMWeapon, targetSide);
var i, j, un, veh, ruChassisTab, arChassisTab, amChassisTab, vehicleOK_list, target1, target2;
begin

  amChassisTab = [];
  arChassisTab = [];
  ruChassisTab = [];

  repeat

  wait(0$01);

  IF nation = 1 then
  begin

        uc_side = side;
        uc_nation = nation;

        vc_engine = vehengine;
        vc_control = vehControl[Rand(1,vehControl)];
        vc_weapon = AMWeapon[Rand(1, AMWeapon)];

        for j = 1 to AMWeapon do
        begin
            IF AMWeapon[j] = 2 or AMWeapon[j] = 3 then
            begin
                amChassisTab = [1,2,3,4,5];
                vc_chassis = amChassisTab[Rand(1,amChassisTab)];
            end;

            IF AMWeapon[j] = 4 or AMWeapon[j] = 5 or AMWeapon[j] = 9 or AMWeapon[j] = 11 or AMWeapon[j] = 7 then
            begin
                amChassisTab = [2,3,4,5];
                vc_chassis = amChassisTab[Rand(1, amChassisTab)];
            end;

            IF AMWeapon[j] = 8 or AMWeapon[j] = 6 or AMWeapon[j] = 10 then
            begin
                amChassisTab = [4,5];
                vc_chassis = amChassisTab[Rand(1, amChassisTab)];
            end;

        end;

        veh = CreateVehicle;
        PlaceUnitArea(veh, area, false);

        IF vc_control = 1 then
        begin

            hc_gallery = '';
            hc_name = '';
            PrepareHuman(false, 3, mehskill);

            un = CreateHuman;
            PlaceHumanInUnit(un, veh);

        end;


        i = i + 1;

    end;

  IF nation = 2 then
  begin

        uc_side = side;
        uc_nation = nation;

        vc_engine = vehengine;
        vc_control = vehControl[Rand(1,vehControl)];
        vc_weapon = ARWeapons[Rand(1, ARWeapons)];

        for j = 1 to ARWeapons do
        begin

            IF ARWeapons[j] = 24 or ARWeapons[j] = 22 or ARWeapons[j] = 23 or ARWeapons[j] = 30 then
            begin
                arChassisTab = [14];
                vc_chassis = arChassisTab[Rand(1, arChassisTab)];
            end;

            IF ARWeapons[j] = 29 or ARWeapons[j] = 28 or ARWeapons[j] = 27 or ARWeapons[j] = 26 or ARWeapons[j] = 25 then
            begin
                arChassisTab = [14];
                vc_chassis = arChassisTab[Rand(1, arChassisTab)];
            end;

        end;

        veh = CreateVehicle;
        PlaceUnitArea(veh, area, false);

        IF vc_control = 1 then
        begin

            hc_gallery = '';
            hc_name = '';
            PrepareHuman(false, 3, mehskill);

            un = CreateHuman;
            PlaceHumanInUnit(un, veh);

        end;


        i = i + 1;

    end;


  IF nation = 3 then
  begin

        uc_side = side;
        uc_nation = nation;

        vc_engine = vehengine;
        vc_control = vehControl[Rand(1,vehControl)];
        vc_weapon = RUWeapons[Rand(1, RUWeapons)];


        for j = 1 to RuWeapons do
        begin

            IF RUWeapons[j] = 42 or RUWeapons[j] = 43 or RUWeapons[j] = 44 or RUWeapons[j] = 45 or RUWeapons[j] = 49 then
            begin
                ruChassisTab = [21, 22, 23, 24];
                vc_chassis = ruChassisTab[Rand(1, ruChassisTab)];
            end;

            IF RUWeapons[j] = 46 or RUWeapons[j] = 47 then
            begin
                ruChassisTab = [23, 24];
                vc_chassis = ruChassisTab[Rand(1, ruChassisTab)];
            end;

        end;


        veh = CreateVehicle;
        PlaceUnitArea(veh, area, false);

        IF vc_control = 1 then
        begin

            hc_gallery = '';
            hc_name = '';
            PrepareHuman(false, 3, mehskill);

            un = CreateHuman;
            PlaceHumanInUnit(un, veh);

        end;


        i = i + 1;

    end;

  until i = vehCount;

    repeat
        wait(0$1);
        vehicleOK_list = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 650]]);

        IF vehicleOK_list > 0 then
        begin

            for i in vehicleOK_list  do
            begin

            target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
            target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

            If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
            begin
                ComAttackUnit(i, target1);
            end
            else
            begin
                ComAttackUnit(i, target2);
            end;
        end;
      end;
    until (FilterAllUnits([[f_side, side], [f_type, unit_vehicle]])) = 0;


END;

Export function RespawnAttackInfantry(side, nation, soldierCount, sniperCount, bazookCount, mortalCount, medicCount, skil, spawnArea, healArea, targetSide);
var i, j,  un, damageUnit_list, medic_list, soldiersOK_list, enemyUnits, und, target1, target2;
begin

        {for i = 1 to medicCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 4, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;}


       for i = 1 to soldierCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 1, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to sniperCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 5, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to bazookCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 9, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to mortalCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                PrepareHuman(false, 8, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;


        soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]]]);

        medic_list = FilterAllUnits([[f_side, side], [f_class, 4]]);

                for i in medic_list do ComMoveToArea(i, healArea);


    repeat
        wait(0$1);
        damageUnit_list = FilterAllUnits([[f_side, side], [f_and, [f_not, [f_lives, 550]],[f_lives, 250]]]);
        soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]], [f_lives, 1000]]);

        IF medicCount > 0  then
        begin
                if damageUnit_list > 0 then
                begin
                        for i in damageUnit_list  do
                        begin
                                ComMoveToArea(i, healArea);
                                for j in medic_list do 
                                AddComHeal(j, i);
                        end;
                    end;
        end;

        for i in soldiersOK_list do
        begin

                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                begin
                        ComAttackUnit(i, target1);
                        end  else
                        begin
                        ComAttackUnit(i, target2);
                end;

        end;
                    
        for i in soldiersOK_list do
        begin
                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                begin
                ComAttackUnit(i, target1);
                end else
                begin
                ComAttackUnit(i, target2);
        end;
    end; until soldiersOK_list = [];

END;

// Tame apemans
Export function TameApemans;
var i, j, b, arm, dep, tmp;
begin

repeat
 wait(0$1);

 tmp := FilterAllUnits([[f_side, 2], [f_class, 4], [f_not, [f_hastask]]]);

 if not tmp then
    continue;

 for j in FilterUnitsInArea(NatureArea1, [[f_side, 0], [f_class, 12]]) do
     ComTameXY(tmp, GetX(j), GetY(j));

until FilterAllUnits([[f_side, 2], [f_class, 4]]) = 0 or FilterUnitsInArea(NatureArea1, [[f_side, 0], [f_class, 12]]) < 2 or tick >= 3$20;

repeat
 wait(0$1);
 arm := FilterAllUnits([[f_side, 2], [f_btype, b_barracks]]);
until arm;

wait(0$25);

dep := FilterAllUnits([[f_side, 2], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]]);
j := 0;

for i in FilterAllUnits([[f_side, 2], [f_class, 12]]) do
begin
ComMoveXY(i, 63, 16);
j := j + 1;

if j < 5 then
   b := arm[1]
else
   b := dep[1];

AddComEnterUnit(i, b);
end;

for i in FilterAllUnits([[f_side, 2], [f_class, 4]]) do
    ComEnterUnit(i, FilterAllUnits([[f_side, 2], [f_btype, b_lab_full]])[1]);

end;

Export function BuildingVehicleAndAttackEnemy(side, fabric, vehCount, targetSide, weaponTab, engine, control, chassis);
var i, j, randWeapon, lastIndex, weaponTabTemp, temp, target1, target2;
begin

     IF FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]) <= vehCount then
        for i = 1 to vehCount do
        begin
            randWeapon = weaponTab[Rand(1, weaponTab)];
            if randWeapon = 46 then AddComConstruct(fabric, 24, engine, control[Rand(1, control)], randWeapon)
            else AddComConstruct(fabric, chassis, engine, control[Rand(1, control)], randWeapon);
        end;

        repeat
                wait(0$1);;
        until FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 250]]) >= vehCount;

    IF FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 250]]) >= vehCount then
    begin

        repeat begin
        wait(0$1);

        if FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 651]]) > 0 then
        begin

                for i in FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 651]]) do
                begin

                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                        If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                        begin
                                ComAttackUnit(i, target1);
                        end
                        else
                        begin
                                ComAttackUnit(i, target2);
                        end;
                end;

        end;

        end until FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]) = 0 or FilterAllUnits([[f_side, targetSide]]) = 0;

    end;
END;

Export Function PlaceMines(area, n);
var i, r, x;
begin
r := 100;
x := 0;

while(x < n) do
for i = 1 to AreaToList(area, 0)[1] do
    begin
    if r > 50 then
       begin
       if not MineAtPos(AreaToList(area, 0)[1][i], AreaToList(area, 0)[2][i]) then
          begin
          PlaceMine(AreaToList(area, 0)[1][i], AreaToList(area, 0)[2][i], 5, 0);

          arabianMines := Insert(arabianMines, 1, [AreaToList(area, 0)[1][i], AreaToList(area, 0)[2][i]]);

          r := 0;
          x := x + 1;
          end
           else
            r := r + 35;
       end
        else
         r := r + rand(10, 25);
    end;

End;

