// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 291 0 0
// PrepareRussian ;
  23: CALL 9069 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 74285 0 9
// Action ;
  79: CALL 15318 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 13
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 9
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 10
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// invincibleMode := false ;
 175: LD_ADDR_EXP 5
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// captureRocketCounter := 0 ;
 183: LD_ADDR_EXP 11
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// killMechCounter := 0 ;
 191: LD_ADDR_EXP 12
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// end ;
 199: LD_VAR 0 1
 203: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 34
 216: PUSH
 217: LD_INT 6
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: LD_INT 6
 235: GREATEREQUAL
 236: IFFALSE 248
 238: GO 240
 240: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 241: LD_STRING ACH_ARMOR
 243: PPUSH
 244: CALL_OW 543
 248: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 249: LD_EXP 11
 253: PUSH
 254: LD_INT 3
 256: GREATEREQUAL
 257: IFFALSE 269
 259: GO 261
 261: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 262: LD_STRING ACH_TOOL
 264: PPUSH
 265: CALL_OW 543
 269: END
// every 0 0$1 trigger killMechCounter >= 10 do
 270: LD_EXP 12
 274: PUSH
 275: LD_INT 10
 277: GREATEREQUAL
 278: IFFALSE 290
 280: GO 282
 282: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 283: LD_STRING ACH_MECH
 285: PPUSH
 286: CALL_OW 543
 290: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
// uc_side := 1 ;
 309: LD_ADDR_OWVAR 20
 313: PUSH
 314: LD_INT 1
 316: ST_TO_ADDR
// uc_nation := 1 ;
 317: LD_ADDR_OWVAR 21
 321: PUSH
 322: LD_INT 1
 324: ST_TO_ADDR
// PrepareGammaBase ;
 325: CALL 2428 0 0
// x := 52 ;
 329: LD_ADDR_VAR 0 13
 333: PUSH
 334: LD_INT 52
 336: ST_TO_ADDR
// y := 16 ;
 337: LD_ADDR_VAR 0 14
 341: PUSH
 342: LD_INT 16
 344: ST_TO_ADDR
// case gammaCommander of 1 :
 345: LD_EXP 13
 349: PUSH
 350: LD_INT 1
 352: DOUBLE
 353: EQUAL
 354: IFTRUE 358
 356: GO 443
 358: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 359: LD_ADDR_EXP 16
 363: PUSH
 364: LD_STRING Donaldson
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_STRING 04_
 372: PPUSH
 373: CALL 40274 0 3
 377: ST_TO_ADDR
// if HexInfo ( x , y ) then
 378: LD_VAR 0 13
 382: PPUSH
 383: LD_VAR 0 14
 387: PPUSH
 388: CALL_OW 428
 392: IFFALSE 410
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 394: LD_EXP 16
 398: PPUSH
 399: LD_EXP 31
 403: PPUSH
 404: CALL_OW 52
 408: GO 432
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 410: LD_EXP 16
 414: PPUSH
 415: LD_VAR 0 13
 419: PPUSH
 420: LD_VAR 0 14
 424: PPUSH
 425: LD_INT 0
 427: PPUSH
 428: CALL_OW 48
// ComHold ( Donaldson ) ;
 432: LD_EXP 16
 436: PPUSH
 437: CALL_OW 140
// end ; 2 :
 441: GO 630
 443: LD_INT 2
 445: DOUBLE
 446: EQUAL
 447: IFTRUE 451
 449: GO 536
 451: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 452: LD_ADDR_EXP 15
 456: PUSH
 457: LD_STRING Brown
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: LD_STRING 04_
 465: PPUSH
 466: CALL 40274 0 3
 470: ST_TO_ADDR
// if HexInfo ( x , y ) then
 471: LD_VAR 0 13
 475: PPUSH
 476: LD_VAR 0 14
 480: PPUSH
 481: CALL_OW 428
 485: IFFALSE 503
// PlaceHumanInUnit ( Brown , amDepot ) else
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 31
 496: PPUSH
 497: CALL_OW 52
 501: GO 525
// PlaceUnitXY ( Brown , x , y , false ) ;
 503: LD_EXP 15
 507: PPUSH
 508: LD_VAR 0 13
 512: PPUSH
 513: LD_VAR 0 14
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 48
// ComHold ( Brown ) ;
 525: LD_EXP 15
 529: PPUSH
 530: CALL_OW 140
// end ; 3 :
 534: GO 630
 536: LD_INT 3
 538: DOUBLE
 539: EQUAL
 540: IFTRUE 544
 542: GO 629
 544: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_STRING VanHouten
 552: PPUSH
 553: LD_INT 0
 555: PPUSH
 556: LD_STRING 
 558: PPUSH
 559: CALL 40274 0 3
 563: ST_TO_ADDR
// if HexInfo ( x , y ) then
 564: LD_VAR 0 13
 568: PPUSH
 569: LD_VAR 0 14
 573: PPUSH
 574: CALL_OW 428
 578: IFFALSE 596
// PlaceHumanInUnit ( Houten , amDepot ) else
 580: LD_EXP 25
 584: PPUSH
 585: LD_EXP 31
 589: PPUSH
 590: CALL_OW 52
 594: GO 618
// PlaceUnitXY ( Houten , x , y , false ) ;
 596: LD_EXP 25
 600: PPUSH
 601: LD_VAR 0 13
 605: PPUSH
 606: LD_VAR 0 14
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL_OW 48
// ComHold ( Houten ) ;
 618: LD_EXP 25
 622: PPUSH
 623: CALL_OW 140
// end ; end ;
 627: GO 630
 629: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 630: LD_ADDR_EXP 29
 634: PUSH
 635: LD_STRING Harisson
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: LD_STRING 
 643: PPUSH
 644: CALL 40274 0 3
 648: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 649: LD_ADDR_EXP 30
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: LD_STRING 
 662: PPUSH
 663: CALL 40274 0 3
 667: ST_TO_ADDR
// tmp := [ ] ;
 668: LD_ADDR_VAR 0 4
 672: PUSH
 673: EMPTY
 674: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 675: LD_STRING 04_Lisa
 677: PUSH
 678: EMPTY
 679: LIST
 680: PPUSH
 681: CALL_OW 28
 685: IFFALSE 792
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 687: LD_STRING LisaInDelta
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 30
 697: NOT
 698: PUSH
 699: LD_STRING 07_Lisa
 701: PUSH
 702: EMPTY
 703: LIST
 704: PPUSH
 705: CALL_OW 28
 709: NOT
 710: AND
 711: IFFALSE 734
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 713: LD_ADDR_EXP 19
 717: PUSH
 718: LD_STRING Lisa
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_STRING 04_
 726: PPUSH
 727: CALL 40274 0 3
 731: ST_TO_ADDR
 732: GO 766
// if not LoadVariable ( LisaIn07 , false ) then
 734: LD_STRING LisaIn07
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 30
 744: NOT
 745: IFFALSE 766
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 747: LD_ADDR_EXP 19
 751: PUSH
 752: LD_STRING Lisa
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 07_
 760: PPUSH
 761: CALL 40274 0 3
 765: ST_TO_ADDR
// if Lisa then
 766: LD_EXP 19
 770: IFFALSE 792
// tmp2 := Join ( tmp2 , Lisa ) ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: LD_VAR 0 5
 781: PPUSH
 782: LD_EXP 19
 786: PPUSH
 787: CALL 77595 0 2
 791: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 792: LD_STRING 04_Bobby
 794: PUSH
 795: EMPTY
 796: LIST
 797: PPUSH
 798: CALL_OW 28
 802: IFFALSE 909
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 804: LD_STRING BobbyInDelta
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 30
 814: NOT
 815: PUSH
 816: LD_STRING 07_Bobby
 818: PUSH
 819: EMPTY
 820: LIST
 821: PPUSH
 822: CALL_OW 28
 826: NOT
 827: AND
 828: IFFALSE 851
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 830: LD_ADDR_EXP 17
 834: PUSH
 835: LD_STRING Bobby
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_STRING 04_
 843: PPUSH
 844: CALL 40274 0 3
 848: ST_TO_ADDR
 849: GO 883
// if not LoadVariable ( BobbyIn07 , false ) then
 851: LD_STRING BobbyIn07
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 30
 861: NOT
 862: IFFALSE 883
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 864: LD_ADDR_EXP 17
 868: PUSH
 869: LD_STRING Bobby
 871: PPUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_STRING 07_
 877: PPUSH
 878: CALL 40274 0 3
 882: ST_TO_ADDR
// if Bobby then
 883: LD_EXP 17
 887: IFFALSE 909
// tmp2 := Join ( tmp2 , Bobby ) ;
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: LD_VAR 0 5
 898: PPUSH
 899: LD_EXP 17
 903: PPUSH
 904: CALL 77595 0 2
 908: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 909: LD_STRING 04_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: IFFALSE 1026
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 921: LD_STRING CyrusInDelta
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: CALL_OW 30
 931: NOT
 932: PUSH
 933: LD_STRING 07_Cyrus
 935: PUSH
 936: EMPTY
 937: LIST
 938: PPUSH
 939: CALL_OW 28
 943: NOT
 944: AND
 945: IFFALSE 968
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_STRING Cyrus
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_STRING 04_
 960: PPUSH
 961: CALL 40274 0 3
 965: ST_TO_ADDR
 966: GO 1000
// if not LoadVariable ( CyrusIn07 , false ) then
 968: LD_STRING CyrusIn07
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: NOT
 979: IFFALSE 1000
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 981: LD_ADDR_EXP 18
 985: PUSH
 986: LD_STRING Cyrus
 988: PPUSH
 989: LD_INT 1
 991: PPUSH
 992: LD_STRING 07_
 994: PPUSH
 995: CALL 40274 0 3
 999: ST_TO_ADDR
// if Cyrus then
1000: LD_EXP 18
1004: IFFALSE 1026
// tmp2 := Join ( tmp2 , Cyrus ) ;
1006: LD_ADDR_VAR 0 5
1010: PUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_EXP 18
1020: PPUSH
1021: CALL 77595 0 2
1025: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1026: LD_STRING 04_Brown
1028: PUSH
1029: EMPTY
1030: LIST
1031: PPUSH
1032: CALL_OW 28
1036: PUSH
1037: LD_STRING BrownInDelta
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 30
1047: NOT
1048: AND
1049: PUSH
1050: LD_STRING 07_Brown
1052: PUSH
1053: EMPTY
1054: LIST
1055: PPUSH
1056: CALL_OW 28
1060: NOT
1061: AND
1062: PUSH
1063: LD_EXP 13
1067: PUSH
1068: LD_INT 2
1070: NONEQUAL
1071: AND
1072: IFFALSE 1115
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1074: LD_ADDR_EXP 15
1078: PUSH
1079: LD_STRING Brown
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_STRING 04_
1087: PPUSH
1088: CALL 40274 0 3
1092: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1093: LD_ADDR_VAR 0 5
1097: PUSH
1098: LD_VAR 0 5
1102: PPUSH
1103: LD_EXP 15
1107: PPUSH
1108: CALL 77595 0 2
1112: ST_TO_ADDR
// end else
1113: GO 1177
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1115: LD_STRING BrownIn07
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 30
1125: NOT
1126: PUSH
1127: LD_EXP 13
1131: PUSH
1132: LD_INT 2
1134: NONEQUAL
1135: AND
1136: IFFALSE 1177
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1138: LD_ADDR_EXP 15
1142: PUSH
1143: LD_STRING Brown
1145: PPUSH
1146: LD_INT 1
1148: PPUSH
1149: LD_STRING 07_
1151: PPUSH
1152: CALL 40274 0 3
1156: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1157: LD_ADDR_VAR 0 5
1161: PUSH
1162: LD_VAR 0 5
1166: PPUSH
1167: LD_EXP 15
1171: PPUSH
1172: CALL 77595 0 2
1176: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1177: LD_STRING 04_Donaldson
1179: PUSH
1180: EMPTY
1181: LIST
1182: PPUSH
1183: CALL_OW 28
1187: PUSH
1188: LD_STRING DonaldsonInDelta
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 30
1198: NOT
1199: AND
1200: PUSH
1201: LD_STRING 07_Donaldson
1203: PUSH
1204: EMPTY
1205: LIST
1206: PPUSH
1207: CALL_OW 28
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 13
1218: PUSH
1219: LD_INT 1
1221: NONEQUAL
1222: AND
1223: IFFALSE 1266
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1225: LD_ADDR_EXP 16
1229: PUSH
1230: LD_STRING Donaldson
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_STRING 04_
1238: PPUSH
1239: CALL 40274 0 3
1243: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1244: LD_ADDR_VAR 0 5
1248: PUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: LD_EXP 16
1258: PPUSH
1259: CALL 77595 0 2
1263: ST_TO_ADDR
// end else
1264: GO 1328
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1266: LD_STRING DonaldsonIn07
1268: PPUSH
1269: LD_INT 0
1271: PPUSH
1272: CALL_OW 30
1276: NOT
1277: PUSH
1278: LD_EXP 13
1282: PUSH
1283: LD_INT 1
1285: NONEQUAL
1286: AND
1287: IFFALSE 1328
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1289: LD_ADDR_EXP 16
1293: PUSH
1294: LD_STRING Donaldson
1296: PPUSH
1297: LD_INT 1
1299: PPUSH
1300: LD_STRING 07_
1302: PPUSH
1303: CALL 40274 0 3
1307: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1308: LD_ADDR_VAR 0 5
1312: PUSH
1313: LD_VAR 0 5
1317: PPUSH
1318: LD_EXP 16
1322: PPUSH
1323: CALL 77595 0 2
1327: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1328: LD_STRING KhatamIn07
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 30
1338: NOT
1339: IFFALSE 1380
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1341: LD_ADDR_EXP 23
1345: PUSH
1346: LD_STRING Khatam
1348: PPUSH
1349: LD_INT 1
1351: PPUSH
1352: LD_STRING 07_
1354: PPUSH
1355: CALL 40274 0 3
1359: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1360: LD_ADDR_VAR 0 5
1364: PUSH
1365: LD_VAR 0 5
1369: PPUSH
1370: LD_EXP 23
1374: PPUSH
1375: CALL 77595 0 2
1379: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1380: LD_ADDR_VAR 0 6
1384: PUSH
1385: LD_STRING 07_othersGamma
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// tmp := 5 - others ;
1393: LD_ADDR_VAR 0 4
1397: PUSH
1398: LD_INT 5
1400: PUSH
1401: LD_VAR 0 6
1405: MINUS
1406: ST_TO_ADDR
// if tmp then
1407: LD_VAR 0 4
1411: IFFALSE 1468
// for i := tmp downto 1 do
1413: LD_ADDR_VAR 0 2
1417: PUSH
1418: DOUBLE
1419: LD_VAR 0 4
1423: INC
1424: ST_TO_ADDR
1425: LD_INT 1
1427: PUSH
1428: FOR_DOWNTO
1429: IFFALSE 1466
// begin PrepareHuman ( false , 1 , 5 ) ;
1431: LD_INT 0
1433: PPUSH
1434: LD_INT 1
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1444: LD_ADDR_VAR 0 6
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: CALL_OW 44
1458: PPUSH
1459: CALL 77595 0 2
1463: ST_TO_ADDR
// end ;
1464: GO 1428
1466: POP
1467: POP
// for i in others do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: LD_VAR 0 6
1477: PUSH
1478: FOR_IN
1479: IFFALSE 1495
// SetTag ( i , 106 ) ;
1481: LD_VAR 0 2
1485: PPUSH
1486: LD_INT 106
1488: PPUSH
1489: CALL_OW 109
1493: GO 1478
1495: POP
1496: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1497: LD_ADDR_VAR 0 8
1501: PUSH
1502: LD_INT 22
1504: PUSH
1505: LD_INT 1
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 30
1514: PUSH
1515: LD_INT 31
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PPUSH
1526: CALL_OW 69
1530: ST_TO_ADDR
// for i in bun do
1531: LD_ADDR_VAR 0 2
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: FOR_IN
1542: IFFALSE 1674
// begin x := GetX ( i ) ;
1544: LD_ADDR_VAR 0 13
1548: PUSH
1549: LD_VAR 0 2
1553: PPUSH
1554: CALL_OW 250
1558: ST_TO_ADDR
// y := GetY ( i ) ;
1559: LD_ADDR_VAR 0 14
1563: PUSH
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 251
1573: ST_TO_ADDR
// d := GetDir ( i ) ;
1574: LD_ADDR_VAR 0 15
1578: PUSH
1579: LD_VAR 0 2
1583: PPUSH
1584: CALL_OW 254
1588: ST_TO_ADDR
// RemoveUnit ( i ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: CALL_OW 64
// bc_type := b_bunker ;
1598: LD_ADDR_OWVAR 42
1602: PUSH
1603: LD_INT 32
1605: ST_TO_ADDR
// bc_level := 6 ;
1606: LD_ADDR_OWVAR 43
1610: PUSH
1611: LD_INT 6
1613: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1614: LD_ADDR_VAR 0 16
1618: PUSH
1619: LD_VAR 0 13
1623: PPUSH
1624: LD_VAR 0 14
1628: PPUSH
1629: LD_VAR 0 15
1633: PPUSH
1634: CALL_OW 47
1638: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1639: LD_VAR 0 16
1643: PPUSH
1644: LD_INT 5
1646: PUSH
1647: LD_INT 4
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 2
1658: PUSH
1659: LD_INT 2
1661: MOD
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PPUSH
1668: CALL_OW 431
// end ;
1672: GO 1541
1674: POP
1675: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1676: LD_ADDR_VAR 0 7
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 1
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 30
1693: PUSH
1694: LD_INT 5
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1710: LD_ADDR_VAR 0 9
1714: PUSH
1715: LD_INT 22
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 2
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 6
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 7
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 30
1750: PUSH
1751: LD_INT 8
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PPUSH
1768: CALL_OW 69
1772: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1773: LD_ADDR_VAR 0 10
1777: PUSH
1778: LD_INT 22
1780: PUSH
1781: LD_INT 1
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 30
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 69
1806: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1807: LD_ADDR_VAR 0 11
1811: PUSH
1812: LD_INT 22
1814: PUSH
1815: LD_INT 1
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 30
1824: PUSH
1825: LD_INT 36
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PPUSH
1836: CALL_OW 69
1840: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 30
1861: PUSH
1862: LD_INT 31
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 30
1871: PUSH
1872: LD_INT 32
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: ST_TO_ADDR
// for i in others union tmp2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 6
1902: PUSH
1903: LD_VAR 0 5
1907: UNION
1908: PUSH
1909: FOR_IN
1910: IFFALSE 2350
// begin placed := false ;
1912: LD_ADDR_VAR 0 12
1916: PUSH
1917: LD_INT 0
1919: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1920: LD_VAR 0 2
1924: PPUSH
1925: CALL_OW 257
1929: PUSH
1930: LD_INT 1
1932: EQUAL
1933: IFFALSE 2058
// begin if UnitFilter ( bun , [ f_empty ] ) then
1935: LD_VAR 0 8
1939: PPUSH
1940: LD_INT 58
1942: PUSH
1943: EMPTY
1944: LIST
1945: PPUSH
1946: CALL_OW 72
1950: IFFALSE 1989
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 8
1961: PPUSH
1962: LD_INT 58
1964: PUSH
1965: EMPTY
1966: LIST
1967: PPUSH
1968: CALL_OW 72
1972: PUSH
1973: LD_INT 1
1975: ARRAY
1976: PPUSH
1977: CALL_OW 52
// placed := true ;
1981: LD_ADDR_VAR 0 12
1985: PUSH
1986: LD_INT 1
1988: ST_TO_ADDR
// end ; if arm and not placed then
1989: LD_VAR 0 7
1993: PUSH
1994: LD_VAR 0 12
1998: NOT
1999: AND
2000: IFFALSE 2058
// begin for j in arm do
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 7
2011: PUSH
2012: FOR_IN
2013: IFFALSE 2056
// if UnitsInside ( j ) < 6 then
2015: LD_VAR 0 3
2019: PPUSH
2020: CALL_OW 313
2024: PUSH
2025: LD_INT 6
2027: LESS
2028: IFFALSE 2054
// begin PlaceHumanInUnit ( i , j ) ;
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 52
// placed := true ;
2044: LD_ADDR_VAR 0 12
2048: PUSH
2049: LD_INT 1
2051: ST_TO_ADDR
// break ;
2052: GO 2056
// end ;
2054: GO 2012
2056: POP
2057: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2058: LD_VAR 0 2
2062: PPUSH
2063: CALL_OW 257
2067: PUSH
2068: LD_INT 2
2070: EQUAL
2071: IFFALSE 2104
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2073: LD_VAR 0 2
2077: PPUSH
2078: LD_INT 52
2080: PPUSH
2081: LD_INT 20
2083: PPUSH
2084: LD_INT 6
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 50
// placed := true ;
2094: LD_ADDR_VAR 0 12
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// continue ;
2102: GO 1909
// end ; if GetClass ( i ) = class_mechanic then
2104: LD_VAR 0 2
2108: PPUSH
2109: CALL_OW 257
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2240
// begin if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2240
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2125: LD_VAR 0 11
2129: PUSH
2130: LD_VAR 0 11
2134: PUSH
2135: LD_INT 1
2137: ARRAY
2138: PPUSH
2139: CALL_OW 313
2143: PUSH
2144: LD_INT 3
2146: LESS
2147: AND
2148: IFFALSE 2176
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_VAR 0 11
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: CALL_OW 52
// placed := true ;
2168: LD_ADDR_VAR 0 12
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// end ; if placed then
2176: LD_VAR 0 12
2180: IFFALSE 2184
// continue ;
2182: GO 1909
// for j in fac do
2184: LD_ADDR_VAR 0 3
2188: PUSH
2189: LD_VAR 0 10
2193: PUSH
2194: FOR_IN
2195: IFFALSE 2238
// if UnitsInside ( j ) < 6 then
2197: LD_VAR 0 3
2201: PPUSH
2202: CALL_OW 313
2206: PUSH
2207: LD_INT 6
2209: LESS
2210: IFFALSE 2236
// begin PlaceHumanInUnit ( i , j ) ;
2212: LD_VAR 0 2
2216: PPUSH
2217: LD_VAR 0 3
2221: PPUSH
2222: CALL_OW 52
// placed := true ;
2226: LD_ADDR_VAR 0 12
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// break ;
2234: GO 2238
// end ;
2236: GO 2194
2238: POP
2239: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2240: LD_VAR 0 2
2244: PPUSH
2245: CALL_OW 257
2249: PUSH
2250: LD_INT 4
2252: EQUAL
2253: IFFALSE 2317
// begin if lab then
2255: LD_VAR 0 9
2259: IFFALSE 2317
// begin for j in lab do
2261: LD_ADDR_VAR 0 3
2265: PUSH
2266: LD_VAR 0 9
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2315
// if UnitsInside ( j ) < 6 then
2274: LD_VAR 0 3
2278: PPUSH
2279: CALL_OW 313
2283: PUSH
2284: LD_INT 6
2286: LESS
2287: IFFALSE 2313
// begin PlaceHumanInUnit ( i , j ) ;
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 3
2298: PPUSH
2299: CALL_OW 52
// placed := true ;
2303: LD_ADDR_VAR 0 12
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// break ;
2311: GO 2315
// end ;
2313: GO 2271
2315: POP
2316: POP
// end ; end ; if not placed then
2317: LD_VAR 0 12
2321: NOT
2322: IFFALSE 2348
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// ComHold ( i ) ;
2339: LD_VAR 0 2
2343: PPUSH
2344: CALL_OW 140
// end ; end ;
2348: GO 1909
2350: POP
2351: POP
// if ct then
2352: LD_VAR 0 11
2356: IFFALSE 2423
// if UnitsInside ( ct [ 1 ] ) then
2358: LD_VAR 0 11
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: CALL_OW 313
2371: IFFALSE 2423
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2373: LD_ADDR_VAR 0 2
2377: PUSH
2378: LD_INT 22
2380: PUSH
2381: LD_INT 1
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 33
2390: PUSH
2391: LD_INT 2
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PPUSH
2402: CALL_OW 69
2406: PUSH
2407: FOR_IN
2408: IFFALSE 2421
// Connect ( i ) ;
2410: LD_VAR 0 2
2414: PPUSH
2415: CALL 48214 0 1
2419: GO 2407
2421: POP
2422: POP
// end ; end ;
2423: LD_VAR 0 1
2427: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2428: LD_INT 0
2430: PPUSH
2431: PPUSH
2432: PPUSH
2433: PPUSH
2434: PPUSH
2435: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2436: LD_INT 71
2438: PPUSH
2439: LD_INT 5
2441: PPUSH
2442: LD_INT 1
2444: PPUSH
2445: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2449: LD_ADDR_VAR 0 2
2453: PUSH
2454: LD_STRING GammaBase
2456: PPUSH
2457: EMPTY
2458: PPUSH
2459: CALL_OW 30
2463: ST_TO_ADDR
// if not blist then
2464: LD_VAR 0 2
2468: NOT
2469: IFFALSE 2509
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: LD_INT 52
2481: PUSH
2482: LD_INT 12
2484: PUSH
2485: LD_INT 3
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: ST_TO_ADDR
// uc_side := 1 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// uc_nation := 1 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// for i in blist do
2525: LD_ADDR_VAR 0 3
2529: PUSH
2530: LD_VAR 0 2
2534: PUSH
2535: FOR_IN
2536: IFFALSE 2814
// begin InitBc ;
2538: CALL_OW 21
// bc_type := i [ 1 ] ;
2542: LD_ADDR_OWVAR 42
2546: PUSH
2547: LD_VAR 0 3
2551: PUSH
2552: LD_INT 1
2554: ARRAY
2555: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2556: LD_ADDR_OWVAR 43
2560: PUSH
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 5
2568: ARRAY
2569: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2570: LD_OWVAR 42
2574: PUSH
2575: LD_INT 6
2577: PUSH
2578: LD_INT 7
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: IN
2585: IFFALSE 2649
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2587: LD_STRING 06_remoteVehs_1
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL_OW 30
2597: IFFALSE 2625
// begin bc_type := b_lab_full ;
2599: LD_ADDR_OWVAR 42
2603: PUSH
2604: LD_INT 8
2606: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2607: LD_ADDR_OWVAR 44
2611: PUSH
2612: LD_INT 10
2614: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2615: LD_ADDR_OWVAR 45
2619: PUSH
2620: LD_INT 15
2622: ST_TO_ADDR
// end else
2623: GO 2649
// begin bc_type := b_lab_half ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_INT 7
2632: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2633: LD_ADDR_OWVAR 44
2637: PUSH
2638: LD_INT 10
2640: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 9
2648: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2649: LD_OWVAR 42
2653: PUSH
2654: LD_INT 2
2656: EQUAL
2657: IFFALSE 2667
// bc_type := b_factory ;
2659: LD_ADDR_OWVAR 42
2663: PUSH
2664: LD_INT 3
2666: ST_TO_ADDR
// if bc_type = b_depot then
2667: LD_OWVAR 42
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2724
// begin bc_type := b_warehouse ;
2677: LD_ADDR_OWVAR 42
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2685: LD_ADDR_EXP 31
2689: PUSH
2690: LD_VAR 0 3
2694: PUSH
2695: LD_INT 2
2697: ARRAY
2698: PPUSH
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 3
2706: ARRAY
2707: PPUSH
2708: LD_VAR 0 3
2712: PUSH
2713: LD_INT 4
2715: ARRAY
2716: PPUSH
2717: CALL_OW 47
2721: ST_TO_ADDR
// continue ;
2722: GO 2535
// end ; if bc_type = b_armoury then
2724: LD_OWVAR 42
2728: PUSH
2729: LD_INT 4
2731: EQUAL
2732: IFFALSE 2742
// bc_type = b_barracks ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 3
2751: PUSH
2752: LD_INT 2
2754: ARRAY
2755: PPUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_INT 3
2763: ARRAY
2764: PPUSH
2765: LD_VAR 0 3
2769: PUSH
2770: LD_INT 4
2772: ARRAY
2773: PPUSH
2774: CALL_OW 47
2778: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2779: LD_VAR 0 4
2783: PPUSH
2784: CALL_OW 266
2788: PUSH
2789: LD_INT 32
2791: EQUAL
2792: IFFALSE 2812
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 3
2803: PUSH
2804: LD_INT 7
2806: ARRAY
2807: PPUSH
2808: CALL_OW 431
// end ;
2812: GO 2535
2814: POP
2815: POP
// if not amDepot then
2816: LD_EXP 31
2820: NOT
2821: IFFALSE 2858
// begin bc_type := b_warehouse ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// bc_level := 6 ;
2831: LD_ADDR_OWVAR 43
2835: PUSH
2836: LD_INT 6
2838: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2839: LD_ADDR_EXP 31
2843: PUSH
2844: LD_INT 52
2846: PPUSH
2847: LD_INT 12
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 47
2857: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 5
2865: ST_TO_ADDR
// bc_level := 6 ;
2866: LD_ADDR_OWVAR 43
2870: PUSH
2871: LD_INT 6
2873: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2874: LD_INT 61
2876: PPUSH
2877: LD_INT 29
2879: PPUSH
2880: LD_INT 5
2882: PPUSH
2883: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2887: LD_EXP 31
2891: PPUSH
2892: LD_STRING gamma
2894: PPUSH
2895: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2899: LD_EXP 31
2903: PPUSH
2904: CALL_OW 274
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 400
2914: PUSH
2915: LD_INT 320
2917: PUSH
2918: LD_INT 270
2920: PUSH
2921: LD_INT 230
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: PPUSH
2936: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2940: LD_EXP 31
2944: PPUSH
2945: CALL_OW 274
2949: PPUSH
2950: LD_INT 2
2952: PPUSH
2953: LD_INT 130
2955: PPUSH
2956: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2960: LD_INT 22
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: IFFALSE 3236
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: LD_INT 22
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_INT 30
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 69
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3028: LD_ADDR_VAR 0 6
3032: PUSH
3033: LD_VAR 0 4
3037: PPUSH
3038: CALL_OW 250
3042: PPUSH
3043: LD_VAR 0 4
3047: PPUSH
3048: CALL_OW 251
3052: PPUSH
3053: LD_VAR 0 4
3057: PPUSH
3058: CALL_OW 254
3062: PPUSH
3063: CALL 75242 0 3
3067: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: LD_INT 19
3075: PUSH
3076: LD_INT 17
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3083: LD_STRING 06_remoteVehs_1
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 30
3093: IFFALSE 3116
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_VAR 0 2
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 22
3110: PPUSH
3111: CALL_OW 2
3115: ST_TO_ADDR
// for i in tmp do
3116: LD_ADDR_VAR 0 3
3120: PUSH
3121: LD_VAR 0 6
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3234
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3129: LD_VAR 0 3
3133: PUSH
3134: LD_INT 1
3136: ARRAY
3137: PPUSH
3138: LD_VAR 0 3
3142: PUSH
3143: LD_INT 2
3145: ARRAY
3146: PPUSH
3147: CALL_OW 428
3151: PUSH
3152: LD_INT 0
3154: EQUAL
3155: IFFALSE 3232
// begin bc_type := blist [ 1 ] ;
3157: LD_ADDR_OWVAR 42
3161: PUSH
3162: LD_VAR 0 2
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: ARRAY
3179: PPUSH
3180: LD_VAR 0 3
3184: PUSH
3185: LD_INT 2
3187: ARRAY
3188: PPUSH
3189: LD_VAR 0 3
3193: PUSH
3194: LD_INT 3
3196: ARRAY
3197: PPUSH
3198: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 3
3219: ST_TO_ADDR
// if blist = 0 then
3220: LD_VAR 0 2
3224: PUSH
3225: LD_INT 0
3227: EQUAL
3228: IFFALSE 3232
// break ;
3230: GO 3234
// end ;
3232: GO 3126
3234: POP
3235: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3236: LD_STRING 06_remoteVehs_1
3238: PPUSH
3239: LD_INT 0
3241: PPUSH
3242: CALL_OW 30
3246: IFFALSE 3699
// begin bc_type := b_control_tower ;
3248: LD_ADDR_OWVAR 42
3252: PUSH
3253: LD_INT 36
3255: ST_TO_ADDR
// bc_level := 4 ;
3256: LD_ADDR_OWVAR 43
3260: PUSH
3261: LD_INT 4
3263: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3264: LD_EXP 31
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 62
3274: PPUSH
3275: LD_INT 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: CALL 53342 0 5
3285: PUSH
3286: LD_INT 92
3288: PUSH
3289: LD_INT 62
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: NOT
3309: AND
3310: IFFALSE 3327
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3312: LD_INT 62
3314: PPUSH
3315: LD_INT 12
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 47
3325: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3327: LD_EXP 31
3331: PPUSH
3332: LD_INT 36
3334: PPUSH
3335: LD_INT 37
3337: PPUSH
3338: LD_INT 18
3340: PPUSH
3341: LD_INT 2
3343: PPUSH
3344: CALL 53342 0 5
3348: PUSH
3349: LD_INT 92
3351: PUSH
3352: LD_INT 37
3354: PUSH
3355: LD_INT 18
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: NOT
3372: AND
3373: IFFALSE 3390
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3375: LD_INT 37
3377: PPUSH
3378: LD_INT 18
3380: PPUSH
3381: LD_INT 2
3383: PPUSH
3384: CALL_OW 47
3388: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3390: LD_EXP 31
3394: PPUSH
3395: LD_INT 36
3397: PPUSH
3398: LD_INT 66
3400: PPUSH
3401: LD_INT 14
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL 53342 0 5
3411: PUSH
3412: LD_INT 92
3414: PUSH
3415: LD_INT 66
3417: PUSH
3418: LD_INT 14
3420: PUSH
3421: LD_INT 3
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: NOT
3435: AND
3436: IFFALSE 3453
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3438: LD_INT 66
3440: PPUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: CALL_OW 47
3451: GO 3489
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3453: LD_EXP 31
3457: PPUSH
3458: LD_INT 36
3460: PPUSH
3461: LD_INT 74
3463: PPUSH
3464: LD_INT 26
3466: PPUSH
3467: LD_INT 4
3469: PPUSH
3470: CALL 53342 0 5
3474: IFFALSE 3489
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3476: LD_INT 74
3478: PPUSH
3479: LD_INT 26
3481: PPUSH
3482: LD_INT 4
3484: PPUSH
3485: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 36
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: NOT
3518: IFFALSE 3522
// exit ;
3520: GO 4047
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 3
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 2
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: PUSH
3550: LD_OWVAR 67
3554: ARRAY
3555: PUSH
3556: FOR_TO
3557: IFFALSE 3697
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3559: LD_ADDR_OWVAR 37
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: LD_INT 2
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_INT 2
3579: PPUSH
3580: CALL_OW 12
3584: ARRAY
3585: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3586: LD_ADDR_OWVAR 39
3590: PUSH
3591: LD_INT 1
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 1
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 12
3611: ARRAY
3612: ST_TO_ADDR
// vc_control := control_remote ;
3613: LD_ADDR_OWVAR 38
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3621: LD_ADDR_OWVAR 40
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 5
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: LIST
3639: PUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 12
3650: ARRAY
3651: ST_TO_ADDR
// veh := CreateVehicle ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3662: LD_VAR 0 5
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3674: LD_VAR 0 5
3678: PPUSH
3679: LD_INT 61
3681: PPUSH
3682: LD_INT 23
3684: PPUSH
3685: LD_INT 9
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 50
// end ;
3695: GO 3556
3697: POP
3698: POP
// end ; if gammaCommander = 1 then
3699: LD_EXP 13
3703: PUSH
3704: LD_INT 1
3706: EQUAL
3707: IFFALSE 3884
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: PUSH
3737: LD_OWVAR 67
3741: ARRAY
3742: PUSH
3743: FOR_TO
3744: IFFALSE 3880
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3746: LD_ADDR_OWVAR 37
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 2
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 1
3763: PPUSH
3764: LD_INT 2
3766: PPUSH
3767: CALL_OW 12
3771: ARRAY
3772: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3773: LD_ADDR_OWVAR 39
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 1
3790: PPUSH
3791: LD_INT 2
3793: PPUSH
3794: CALL_OW 12
3798: ARRAY
3799: ST_TO_ADDR
// vc_control := control_manual ;
3800: LD_ADDR_OWVAR 38
3804: PUSH
3805: LD_INT 1
3807: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3808: LD_ADDR_OWVAR 40
3812: PUSH
3813: LD_INT 4
3815: PUSH
3816: LD_INT 5
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: ST_TO_ADDR
// veh := CreateVehicle ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: CALL_OW 45
3844: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3845: LD_VAR 0 5
3849: PPUSH
3850: LD_INT 3
3852: PPUSH
3853: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_INT 61
3864: PPUSH
3865: LD_INT 23
3867: PPUSH
3868: LD_INT 9
3870: PPUSH
3871: LD_INT 0
3873: PPUSH
3874: CALL_OW 50
// end ;
3878: GO 3743
3880: POP
3881: POP
// end else
3882: GO 4047
// if gammaCommander = 2 then
3884: LD_EXP 13
3888: PUSH
3889: LD_INT 2
3891: EQUAL
3892: IFFALSE 4047
// begin bc_type := b_bunker ;
3894: LD_ADDR_OWVAR 42
3898: PUSH
3899: LD_INT 32
3901: ST_TO_ADDR
// bc_level := 6 ;
3902: LD_ADDR_OWVAR 43
3906: PUSH
3907: LD_INT 6
3909: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: LD_INT 67
3917: PPUSH
3918: LD_INT 36
3920: PPUSH
3921: LD_INT 5
3923: PPUSH
3924: CALL_OW 47
3928: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: LD_INT 61
3948: PPUSH
3949: LD_INT 40
3951: PPUSH
3952: LD_INT 5
3954: PPUSH
3955: CALL_OW 47
3959: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3960: LD_VAR 0 4
3964: PPUSH
3965: LD_INT 5
3967: PPUSH
3968: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3972: LD_ADDR_OWVAR 37
3976: PUSH
3977: LD_INT 2
3979: ST_TO_ADDR
// vc_engine := engine_combustion ;
3980: LD_ADDR_OWVAR 39
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// vc_control := control_manual ;
3988: LD_ADDR_OWVAR 38
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_weapon := us_crane ;
3996: LD_ADDR_OWVAR 40
4000: PUSH
4001: LD_INT 13
4003: ST_TO_ADDR
// veh := CreateVehicle ;
4004: LD_ADDR_VAR 0 5
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4026: LD_VAR 0 5
4030: PPUSH
4031: LD_INT 61
4033: PPUSH
4034: LD_INT 23
4036: PPUSH
4037: LD_INT 9
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 50
// end ; end ;
4047: LD_VAR 0 1
4051: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4052: LD_INT 0
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
// uc_side := 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// uc_nation := 1 ;
4066: LD_ADDR_OWVAR 21
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4074: LD_ADDR_EXP 26
4078: PUSH
4079: LD_STRING Denis
4081: PPUSH
4082: LD_EXP 1
4086: NOT
4087: PPUSH
4088: LD_STRING 06c_
4090: PPUSH
4091: CALL 40274 0 3
4095: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4096: LD_EXP 26
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4111: LD_ADDR_EXP 27
4115: PUSH
4116: LD_STRING Joan
4118: PPUSH
4119: LD_EXP 1
4123: NOT
4124: PPUSH
4125: LD_STRING 06c_
4127: PPUSH
4128: CALL 40274 0 3
4132: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4133: LD_EXP 27
4137: PPUSH
4138: LD_INT 4
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4148: LD_ADDR_EXP 24
4152: PUSH
4153: LD_STRING Mike
4155: PPUSH
4156: LD_EXP 1
4160: NOT
4161: PPUSH
4162: LD_STRING 06c_
4164: PPUSH
4165: CALL 40274 0 3
4169: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4170: LD_EXP 24
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4185: LD_STRING GladstoneIn07
4187: PPUSH
4188: LD_INT 0
4190: PPUSH
4191: CALL_OW 30
4195: NOT
4196: IFFALSE 4276
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4198: LD_ADDR_EXP 21
4202: PUSH
4203: LD_STRING Gladstone
4205: PPUSH
4206: LD_EXP 1
4210: NOT
4211: PPUSH
4212: LD_STRING 06c_
4214: PPUSH
4215: CALL 40274 0 3
4219: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4220: LD_EXP 21
4224: NOT
4225: PUSH
4226: LD_STRING GladstoneStayInDelta
4228: PPUSH
4229: LD_INT 0
4231: PPUSH
4232: CALL_OW 30
4236: AND
4237: IFFALSE 4261
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4239: LD_ADDR_EXP 21
4243: PUSH
4244: LD_STRING Gladstone
4246: PPUSH
4247: LD_EXP 1
4251: NOT
4252: PPUSH
4253: LD_STRING 05_
4255: PPUSH
4256: CALL 40274 0 3
4260: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4261: LD_EXP 21
4265: PPUSH
4266: LD_INT 4
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4276: LD_STRING LisaStayInDelta
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 30
4286: IFFALSE 4322
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4288: LD_ADDR_EXP 19
4292: PUSH
4293: LD_STRING Lisa
4295: PPUSH
4296: LD_INT 1
4298: PPUSH
4299: LD_STRING 05_
4301: PPUSH
4302: CALL 40274 0 3
4306: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4307: LD_EXP 19
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4322: LD_STRING BobbyStayInDelta
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 30
4332: IFFALSE 4368
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4334: LD_ADDR_EXP 17
4338: PUSH
4339: LD_STRING Bobby
4341: PPUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_STRING 05_
4347: PPUSH
4348: CALL 40274 0 3
4352: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4353: LD_EXP 17
4357: PPUSH
4358: LD_INT 4
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4368: LD_STRING CyrusStayInDelta
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: CALL_OW 30
4378: IFFALSE 4414
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4380: LD_ADDR_EXP 18
4384: PUSH
4385: LD_STRING Cyrus
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_STRING 05_
4393: PPUSH
4394: CALL 40274 0 3
4398: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4399: LD_EXP 18
4403: PPUSH
4404: LD_INT 4
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4414: LD_STRING BrownStayInDelta
4416: PPUSH
4417: LD_INT 0
4419: PPUSH
4420: CALL_OW 30
4424: IFFALSE 4460
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4426: LD_ADDR_EXP 15
4430: PUSH
4431: LD_STRING Brown
4433: PPUSH
4434: LD_INT 1
4436: PPUSH
4437: LD_STRING 05_
4439: PPUSH
4440: CALL 40274 0 3
4444: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4445: LD_EXP 15
4449: PPUSH
4450: LD_INT 4
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4460: LD_STRING DonaldsonStayInDelta
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 30
4470: IFFALSE 4506
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4472: LD_ADDR_EXP 16
4476: PUSH
4477: LD_STRING Donaldson
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_STRING 05_
4485: PPUSH
4486: CALL 40274 0 3
4490: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4491: LD_EXP 16
4495: PPUSH
4496: LD_INT 4
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_STRING OthersStayInDelta
4513: PPUSH
4514: CALL_OW 31
4518: ST_TO_ADDR
// if others > 2 then
4519: LD_VAR 0 4
4523: PUSH
4524: LD_INT 2
4526: GREATER
4527: IFFALSE 4590
// begin for j := 1 to 2 do
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_INT 2
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4586
// begin SetTag ( others [ j ] , 107 ) ;
4545: LD_VAR 0 4
4549: PUSH
4550: LD_VAR 0 3
4554: ARRAY
4555: PPUSH
4556: LD_INT 107
4558: PPUSH
4559: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4563: LD_VAR 0 4
4567: PUSH
4568: LD_VAR 0 3
4572: ARRAY
4573: PPUSH
4574: LD_INT 4
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 49
// end ;
4584: GO 4542
4586: POP
4587: POP
// end else
4588: GO 4651
// begin for j := 1 to others do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_VAR 0 4
4604: PUSH
4605: FOR_TO
4606: IFFALSE 4649
// begin SetTag ( others [ i ] , 107 ) ;
4608: LD_VAR 0 4
4612: PUSH
4613: LD_VAR 0 2
4617: ARRAY
4618: PPUSH
4619: LD_INT 107
4621: PPUSH
4622: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4626: LD_VAR 0 4
4630: PUSH
4631: LD_VAR 0 3
4635: ARRAY
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: LD_INT 0
4642: PPUSH
4643: CALL_OW 49
// end ;
4647: GO 4605
4649: POP
4650: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4651: LD_ADDR_VAR 0 4
4655: PUSH
4656: LD_STRING 06_other_apemans
4658: PPUSH
4659: CALL_OW 31
4663: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4664: LD_VAR 0 4
4668: PUSH
4669: LD_INT 3
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 2
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: PUSH
4687: LD_OWVAR 67
4691: ARRAY
4692: GREATEREQUAL
4693: IFFALSE 4726
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_INT 3
4702: PUSH
4703: LD_INT 2
4705: PUSH
4706: LD_INT 2
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: ST_TO_ADDR
4724: GO 4736
// j := others ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_VAR 0 4
4735: ST_TO_ADDR
// for i := 1 to j do
4736: LD_ADDR_VAR 0 2
4740: PUSH
4741: DOUBLE
4742: LD_INT 1
4744: DEC
4745: ST_TO_ADDR
4746: LD_VAR 0 3
4750: PUSH
4751: FOR_TO
4752: IFFALSE 4777
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4754: LD_VAR 0 4
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: LD_INT 4
4767: PPUSH
4768: LD_INT 0
4770: PPUSH
4771: CALL_OW 49
4775: GO 4751
4777: POP
4778: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4779: LD_INT 4
4781: PPUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 70
4810: PPUSH
4811: LD_INT 53
4813: PPUSH
4814: LD_INT 19
4816: PPUSH
4817: CALL_OW 111
// end ;
4821: LD_VAR 0 1
4825: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4826: LD_INT 0
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
// prefix := 07c_ ;
4842: LD_ADDR_VAR 0 10
4846: PUSH
4847: LD_STRING 07c_
4849: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4850: LD_ADDR_VAR 0 8
4854: PUSH
4855: LD_STRING 07_vehicles
4857: PPUSH
4858: EMPTY
4859: PPUSH
4860: CALL_OW 30
4864: ST_TO_ADDR
// if not vehicles and debug then
4865: LD_VAR 0 8
4869: NOT
4870: PUSH
4871: LD_EXP 1
4875: AND
4876: IFFALSE 4904
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4878: LD_ADDR_VAR 0 8
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 4
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: ST_TO_ADDR
// if not vehicles then
4904: LD_VAR 0 8
4908: NOT
4909: IFFALSE 4966
// begin area := westGammaSupportArea ;
4911: LD_ADDR_VAR 0 11
4915: PUSH
4916: LD_INT 16
4918: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4919: LD_ADDR_VAR 0 14
4923: PUSH
4924: LD_INT 37
4926: PUSH
4927: LD_INT 70
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4934: LD_ADDR_VAR 0 13
4938: PUSH
4939: LD_INT 43
4941: PUSH
4942: LD_INT 67
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: ST_TO_ADDR
// dir := 1 ;
4949: LD_ADDR_VAR 0 12
4953: PUSH
4954: LD_INT 1
4956: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4957: LD_INT 4200
4959: PPUSH
4960: CALL_OW 67
// end else
4964: GO 5012
// begin area := southGammaSupportArea ;
4966: LD_ADDR_VAR 0 11
4970: PUSH
4971: LD_INT 5
4973: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4974: LD_ADDR_VAR 0 14
4978: PUSH
4979: LD_INT 87
4981: PUSH
4982: LD_INT 147
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4989: LD_ADDR_VAR 0 13
4993: PUSH
4994: LD_INT 74
4996: PUSH
4997: LD_INT 129
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: ST_TO_ADDR
// dir := 0 ;
5004: LD_ADDR_VAR 0 12
5008: PUSH
5009: LD_INT 0
5011: ST_TO_ADDR
// end ; squad := [ ] ;
5012: LD_ADDR_VAR 0 5
5016: PUSH
5017: EMPTY
5018: ST_TO_ADDR
// tmp := [ ] ;
5019: LD_ADDR_VAR 0 6
5023: PUSH
5024: EMPTY
5025: ST_TO_ADDR
// tmpVehs := [ ] ;
5026: LD_ADDR_VAR 0 7
5030: PUSH
5031: EMPTY
5032: ST_TO_ADDR
// uc_side := 1 ;
5033: LD_ADDR_OWVAR 20
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// uc_nation := 1 ;
5041: LD_ADDR_OWVAR 21
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if vehicles then
5049: LD_VAR 0 8
5053: IFFALSE 5187
// begin for i := 1 to vehicles do
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: DOUBLE
5061: LD_INT 1
5063: DEC
5064: ST_TO_ADDR
5065: LD_VAR 0 8
5069: PUSH
5070: FOR_TO
5071: IFFALSE 5185
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
5073: LD_ADDR_OWVAR 37
5077: PUSH
5078: LD_VAR 0 8
5082: PUSH
5083: LD_VAR 0 2
5087: ARRAY
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5093: LD_ADDR_OWVAR 39
5097: PUSH
5098: LD_VAR 0 8
5102: PUSH
5103: LD_VAR 0 2
5107: ARRAY
5108: PUSH
5109: LD_INT 2
5111: ARRAY
5112: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5113: LD_ADDR_OWVAR 38
5117: PUSH
5118: LD_VAR 0 8
5122: PUSH
5123: LD_VAR 0 2
5127: ARRAY
5128: PUSH
5129: LD_INT 3
5131: ARRAY
5132: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5133: LD_ADDR_OWVAR 40
5137: PUSH
5138: LD_VAR 0 8
5142: PUSH
5143: LD_VAR 0 2
5147: ARRAY
5148: PUSH
5149: LD_INT 4
5151: ARRAY
5152: ST_TO_ADDR
// veh := CreateVehicle ;
5153: LD_ADDR_VAR 0 9
5157: PUSH
5158: CALL_OW 45
5162: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5163: LD_ADDR_VAR 0 7
5167: PUSH
5168: LD_VAR 0 7
5172: PPUSH
5173: LD_VAR 0 9
5177: PPUSH
5178: CALL 77595 0 2
5182: ST_TO_ADDR
// end ;
5183: GO 5070
5185: POP
5186: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5187: LD_ADDR_EXP 14
5191: PUSH
5192: LD_STRING JMM
5194: PPUSH
5195: LD_EXP 1
5199: NOT
5200: PPUSH
5201: LD_VAR 0 10
5205: PPUSH
5206: CALL 40274 0 3
5210: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5211: LD_EXP 13
5215: PUSH
5216: LD_INT 1
5218: PUSH
5219: LD_INT 3
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: IN
5226: PUSH
5227: LD_EXP 15
5231: NOT
5232: AND
5233: IFFALSE 5294
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5235: LD_ADDR_EXP 15
5239: PUSH
5240: LD_STRING Brown
5242: PPUSH
5243: LD_EXP 1
5247: NOT
5248: PPUSH
5249: LD_VAR 0 10
5253: PPUSH
5254: CALL 40274 0 3
5258: ST_TO_ADDR
// if Brown then
5259: LD_EXP 15
5263: IFFALSE 5294
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5265: LD_ADDR_VAR 0 6
5269: PUSH
5270: LD_VAR 0 6
5274: PPUSH
5275: LD_VAR 0 6
5279: PUSH
5280: LD_INT 1
5282: PLUS
5283: PPUSH
5284: LD_EXP 15
5288: PPUSH
5289: CALL_OW 1
5293: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5294: LD_EXP 13
5298: PUSH
5299: LD_INT 2
5301: PUSH
5302: LD_INT 3
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: IN
5309: PUSH
5310: LD_EXP 16
5314: NOT
5315: AND
5316: IFFALSE 5377
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5318: LD_ADDR_EXP 16
5322: PUSH
5323: LD_STRING Donaldson
5325: PPUSH
5326: LD_EXP 1
5330: NOT
5331: PPUSH
5332: LD_VAR 0 10
5336: PPUSH
5337: CALL 40274 0 3
5341: ST_TO_ADDR
// if Donaldson then
5342: LD_EXP 16
5346: IFFALSE 5377
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_VAR 0 6
5357: PPUSH
5358: LD_VAR 0 6
5362: PUSH
5363: LD_INT 1
5365: PLUS
5366: PPUSH
5367: LD_EXP 16
5371: PPUSH
5372: CALL_OW 1
5376: ST_TO_ADDR
// end ; if not Bobby then
5377: LD_EXP 17
5381: NOT
5382: IFFALSE 5440
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5384: LD_ADDR_EXP 17
5388: PUSH
5389: LD_STRING Bobby
5391: PPUSH
5392: LD_INT 1
5394: PPUSH
5395: LD_VAR 0 10
5399: PPUSH
5400: CALL 40274 0 3
5404: ST_TO_ADDR
// if Bobby then
5405: LD_EXP 17
5409: IFFALSE 5440
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5411: LD_ADDR_VAR 0 6
5415: PUSH
5416: LD_VAR 0 6
5420: PPUSH
5421: LD_VAR 0 6
5425: PUSH
5426: LD_INT 1
5428: PLUS
5429: PPUSH
5430: LD_EXP 17
5434: PPUSH
5435: CALL_OW 1
5439: ST_TO_ADDR
// end ; if not Cyrus then
5440: LD_EXP 18
5444: NOT
5445: IFFALSE 5503
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5447: LD_ADDR_EXP 18
5451: PUSH
5452: LD_STRING Cyrus
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: LD_VAR 0 10
5462: PPUSH
5463: CALL 40274 0 3
5467: ST_TO_ADDR
// if Cyrus then
5468: LD_EXP 18
5472: IFFALSE 5503
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5474: LD_ADDR_VAR 0 6
5478: PUSH
5479: LD_VAR 0 6
5483: PPUSH
5484: LD_VAR 0 6
5488: PUSH
5489: LD_INT 1
5491: PLUS
5492: PPUSH
5493: LD_EXP 18
5497: PPUSH
5498: CALL_OW 1
5502: ST_TO_ADDR
// end ; if not Lisa then
5503: LD_EXP 19
5507: NOT
5508: IFFALSE 5569
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5510: LD_ADDR_EXP 19
5514: PUSH
5515: LD_STRING Lisa
5517: PPUSH
5518: LD_EXP 1
5522: NOT
5523: PPUSH
5524: LD_VAR 0 10
5528: PPUSH
5529: CALL 40274 0 3
5533: ST_TO_ADDR
// if Lisa then
5534: LD_EXP 19
5538: IFFALSE 5569
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5540: LD_ADDR_VAR 0 6
5544: PUSH
5545: LD_VAR 0 6
5549: PPUSH
5550: LD_VAR 0 6
5554: PUSH
5555: LD_INT 1
5557: PLUS
5558: PPUSH
5559: LD_EXP 19
5563: PPUSH
5564: CALL_OW 1
5568: ST_TO_ADDR
// end ; if not Frank then
5569: LD_EXP 20
5573: NOT
5574: IFFALSE 5635
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5576: LD_ADDR_EXP 20
5580: PUSH
5581: LD_STRING Frank
5583: PPUSH
5584: LD_EXP 1
5588: NOT
5589: PPUSH
5590: LD_VAR 0 10
5594: PPUSH
5595: CALL 40274 0 3
5599: ST_TO_ADDR
// if Frank then
5600: LD_EXP 20
5604: IFFALSE 5635
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_VAR 0 6
5615: PPUSH
5616: LD_VAR 0 6
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: PPUSH
5625: LD_EXP 20
5629: PPUSH
5630: CALL_OW 1
5634: ST_TO_ADDR
// end ; if not Kikuchi then
5635: LD_EXP 22
5639: NOT
5640: IFFALSE 5698
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5642: LD_ADDR_EXP 22
5646: PUSH
5647: LD_STRING Kikuchi
5649: PPUSH
5650: LD_INT 1
5652: PPUSH
5653: LD_VAR 0 10
5657: PPUSH
5658: CALL 40274 0 3
5662: ST_TO_ADDR
// if Kikuchi then
5663: LD_EXP 22
5667: IFFALSE 5698
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: LD_VAR 0 6
5678: PPUSH
5679: LD_VAR 0 6
5683: PUSH
5684: LD_INT 1
5686: PLUS
5687: PPUSH
5688: LD_EXP 22
5692: PPUSH
5693: CALL_OW 1
5697: ST_TO_ADDR
// end ; if not Gladstone then
5698: LD_EXP 21
5702: NOT
5703: IFFALSE 5764
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5705: LD_ADDR_EXP 21
5709: PUSH
5710: LD_STRING Gladstone
5712: PPUSH
5713: LD_EXP 1
5717: NOT
5718: PPUSH
5719: LD_VAR 0 10
5723: PPUSH
5724: CALL 40274 0 3
5728: ST_TO_ADDR
// if Gladstone then
5729: LD_EXP 21
5733: IFFALSE 5764
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5735: LD_ADDR_VAR 0 6
5739: PUSH
5740: LD_VAR 0 6
5744: PPUSH
5745: LD_VAR 0 6
5749: PUSH
5750: LD_INT 1
5752: PLUS
5753: PPUSH
5754: LD_EXP 21
5758: PPUSH
5759: CALL_OW 1
5763: ST_TO_ADDR
// end ; if not Khatam then
5764: LD_EXP 23
5768: NOT
5769: IFFALSE 5827
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5771: LD_ADDR_EXP 23
5775: PUSH
5776: LD_STRING Khatam
5778: PPUSH
5779: LD_INT 1
5781: PPUSH
5782: LD_VAR 0 10
5786: PPUSH
5787: CALL 40274 0 3
5791: ST_TO_ADDR
// if Khatam then
5792: LD_EXP 23
5796: IFFALSE 5827
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5798: LD_ADDR_VAR 0 6
5802: PUSH
5803: LD_VAR 0 6
5807: PPUSH
5808: LD_VAR 0 6
5812: PUSH
5813: LD_INT 1
5815: PLUS
5816: PPUSH
5817: LD_EXP 23
5821: PPUSH
5822: CALL_OW 1
5826: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5827: LD_ADDR_VAR 0 4
5831: PUSH
5832: LD_STRING 07c_others
5834: PPUSH
5835: CALL_OW 31
5839: ST_TO_ADDR
// squad := others ;
5840: LD_ADDR_VAR 0 5
5844: PUSH
5845: LD_VAR 0 4
5849: ST_TO_ADDR
// if others then
5850: LD_VAR 0 4
5854: IFFALSE 5905
// for i in others do
5856: LD_ADDR_VAR 0 2
5860: PUSH
5861: LD_VAR 0 4
5865: PUSH
5866: FOR_IN
5867: IFFALSE 5903
// begin SetTag ( i , 108 ) ;
5869: LD_VAR 0 2
5873: PPUSH
5874: LD_INT 108
5876: PPUSH
5877: CALL_OW 109
// tmp := Join ( tmp , i ) ;
5881: LD_ADDR_VAR 0 6
5885: PUSH
5886: LD_VAR 0 6
5890: PPUSH
5891: LD_VAR 0 2
5895: PPUSH
5896: CALL 77595 0 2
5900: ST_TO_ADDR
// end ;
5901: GO 5866
5903: POP
5904: POP
// if tmp then
5905: LD_VAR 0 6
5909: IFFALSE 6144
// begin tmp := Join ( tmp , JMM ) ;
5911: LD_ADDR_VAR 0 6
5915: PUSH
5916: LD_VAR 0 6
5920: PPUSH
5921: LD_EXP 14
5925: PPUSH
5926: CALL 77595 0 2
5930: ST_TO_ADDR
// for i in tmp do
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: LD_VAR 0 6
5940: PUSH
5941: FOR_IN
5942: IFFALSE 6142
// begin SetDir ( i , dir ) ;
5944: LD_VAR 0 2
5948: PPUSH
5949: LD_VAR 0 12
5953: PPUSH
5954: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
5958: LD_VAR 0 2
5962: PPUSH
5963: CALL_OW 257
5967: PUSH
5968: LD_INT 3
5970: EQUAL
5971: PUSH
5972: LD_VAR 0 7
5976: AND
5977: IFFALSE 6067
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5979: LD_VAR 0 7
5983: PUSH
5984: LD_INT 1
5986: ARRAY
5987: PPUSH
5988: LD_INT 0
5990: PPUSH
5991: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
5995: LD_VAR 0 7
5999: PUSH
6000: LD_INT 1
6002: ARRAY
6003: PPUSH
6004: LD_VAR 0 14
6008: PUSH
6009: LD_INT 1
6011: ARRAY
6012: PPUSH
6013: LD_VAR 0 14
6017: PUSH
6018: LD_INT 2
6020: ARRAY
6021: PPUSH
6022: LD_INT 0
6024: PPUSH
6025: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_VAR 0 7
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PPUSH
6043: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6047: LD_ADDR_VAR 0 7
6051: PUSH
6052: LD_VAR 0 7
6056: PPUSH
6057: LD_INT 1
6059: PPUSH
6060: CALL_OW 3
6064: ST_TO_ADDR
// end else
6065: GO 6084
// PlaceUnitArea ( i , area , false ) ;
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_VAR 0 11
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6084: LD_VAR 0 2
6088: PPUSH
6089: LD_VAR 0 13
6093: PUSH
6094: LD_INT 1
6096: ARRAY
6097: PPUSH
6098: LD_VAR 0 13
6102: PUSH
6103: LD_INT 2
6105: ARRAY
6106: PPUSH
6107: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6111: LD_INT 35
6113: PPUSH
6114: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6118: LD_VAR 0 11
6122: PPUSH
6123: LD_INT 22
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: NOT
6138: IFFALSE 6111
// end ;
6140: GO 5941
6142: POP
6143: POP
// end ; if not IsPlaced ( JMM ) or not IsInUnit ( JMM ) then
6144: LD_EXP 14
6148: PPUSH
6149: CALL_OW 305
6153: NOT
6154: PUSH
6155: LD_EXP 14
6159: PPUSH
6160: CALL_OW 310
6164: NOT
6165: OR
6166: IFFALSE 6198
// PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6168: LD_EXP 14
6172: PPUSH
6173: LD_VAR 0 14
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: PPUSH
6182: LD_VAR 0 14
6186: PUSH
6187: LD_INT 2
6189: ARRAY
6190: PPUSH
6191: LD_INT 0
6193: PPUSH
6194: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6198: LD_EXP 14
6202: PPUSH
6203: LD_VAR 0 13
6207: PUSH
6208: LD_INT 1
6210: ARRAY
6211: PPUSH
6212: LD_VAR 0 13
6216: PUSH
6217: LD_INT 2
6219: ARRAY
6220: PPUSH
6221: CALL_OW 111
// jmmArrival := true ;
6225: LD_ADDR_EXP 8
6229: PUSH
6230: LD_INT 1
6232: ST_TO_ADDR
// end ;
6233: LD_VAR 0 1
6237: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
6242: PPUSH
6243: PPUSH
6244: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6245: LD_INT 1
6247: PPUSH
6248: LD_INT 17
6250: PPUSH
6251: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6255: LD_INT 2
6257: PPUSH
6258: LD_INT 17
6260: PPUSH
6261: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6265: LD_ADDR_VAR 0 5
6269: PUSH
6270: LD_INT 6
6272: PPUSH
6273: LD_INT 58
6275: PUSH
6276: EMPTY
6277: LIST
6278: PPUSH
6279: CALL_OW 70
6283: ST_TO_ADDR
// if tmp then
6284: LD_VAR 0 5
6288: IFFALSE 6316
// for i in tmp do
6290: LD_ADDR_VAR 0 2
6294: PUSH
6295: LD_VAR 0 5
6299: PUSH
6300: FOR_IN
6301: IFFALSE 6314
// RemoveUnit ( i ) ;
6303: LD_VAR 0 2
6307: PPUSH
6308: CALL_OW 64
6312: GO 6300
6314: POP
6315: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6316: LD_ADDR_VAR 0 5
6320: PUSH
6321: LD_INT 6
6323: PPUSH
6324: LD_INT 3
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 3
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 70
6345: ST_TO_ADDR
// if tmp then
6346: LD_VAR 0 5
6350: IFFALSE 6374
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6352: LD_VAR 0 5
6356: PPUSH
6357: LD_INT 33
6359: PPUSH
6360: LD_INT 39
6362: PPUSH
6363: CALL_OW 111
// wait ( 0 0$3 ) ;
6367: LD_INT 105
6369: PPUSH
6370: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6374: LD_INT 70
6376: PPUSH
6377: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6381: LD_INT 6
6383: PPUSH
6384: LD_INT 50
6386: PUSH
6387: EMPTY
6388: LIST
6389: PPUSH
6390: CALL_OW 70
6394: NOT
6395: IFFALSE 6374
// uc_side := 4 ;
6397: LD_ADDR_OWVAR 20
6401: PUSH
6402: LD_INT 4
6404: ST_TO_ADDR
// uc_nation := 1 ;
6405: LD_ADDR_OWVAR 21
6409: PUSH
6410: LD_INT 1
6412: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6413: LD_ADDR_EXP 28
6417: PUSH
6418: LD_STRING Sikorski
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: LD_STRING 
6426: PPUSH
6427: CALL 40274 0 3
6431: ST_TO_ADDR
// vc_engine := engine_combustion ;
6432: LD_ADDR_OWVAR 39
6436: PUSH
6437: LD_INT 1
6439: ST_TO_ADDR
// vc_control := control_manual ;
6440: LD_ADDR_OWVAR 38
6444: PUSH
6445: LD_INT 1
6447: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6448: LD_ADDR_OWVAR 40
6452: PUSH
6453: LD_INT 6
6455: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6456: LD_ADDR_OWVAR 37
6460: PUSH
6461: LD_INT 4
6463: ST_TO_ADDR
// veh := CreateVehicle ;
6464: LD_ADDR_VAR 0 4
6468: PUSH
6469: CALL_OW 45
6473: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6474: LD_VAR 0 4
6478: PPUSH
6479: LD_INT 3
6481: PPUSH
6482: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6486: LD_VAR 0 4
6490: PPUSH
6491: LD_INT 4
6493: NEG
6494: PPUSH
6495: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6499: LD_VAR 0 4
6503: PPUSH
6504: LD_INT 70
6506: PPUSH
6507: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_INT 6
6518: PPUSH
6519: LD_INT 0
6521: PPUSH
6522: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6526: LD_EXP 28
6530: PPUSH
6531: LD_VAR 0 4
6535: PPUSH
6536: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6540: LD_EXP 28
6544: PPUSH
6545: LD_INT 37
6547: PPUSH
6548: LD_INT 30
6550: PPUSH
6551: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6555: LD_INT 10
6557: PPUSH
6558: CALL_OW 67
// InitHc_All ( ) ;
6562: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: DOUBLE
6572: LD_INT 1
6574: DEC
6575: ST_TO_ADDR
6576: LD_INT 3
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: LD_INT 2
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_OWVAR 67
6598: ARRAY
6599: PUSH
6600: FOR_TO
6601: IFFALSE 6736
// begin repeat wait ( 0 0$2 ) ;
6603: LD_INT 70
6605: PPUSH
6606: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6610: LD_INT 6
6612: PPUSH
6613: LD_INT 50
6615: PUSH
6616: EMPTY
6617: LIST
6618: PPUSH
6619: CALL_OW 70
6623: NOT
6624: IFFALSE 6603
// uc_side := 4 ;
6626: LD_ADDR_OWVAR 20
6630: PUSH
6631: LD_INT 4
6633: ST_TO_ADDR
// uc_nation := 1 ;
6634: LD_ADDR_OWVAR 21
6638: PUSH
6639: LD_INT 1
6641: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6642: LD_INT 0
6644: PPUSH
6645: LD_INT 1
6647: PPUSH
6648: LD_INT 4
6650: PPUSH
6651: LD_INT 7
6653: PPUSH
6654: CALL_OW 12
6658: PPUSH
6659: CALL_OW 380
// un := CreateHuman ;
6663: LD_ADDR_VAR 0 3
6667: PUSH
6668: CALL_OW 44
6672: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6673: LD_VAR 0 3
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 233
// SetTag ( un , 101 ) ;
6685: LD_VAR 0 3
6689: PPUSH
6690: LD_INT 101
6692: PPUSH
6693: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6697: LD_VAR 0 3
6701: PPUSH
6702: LD_INT 6
6704: PPUSH
6705: LD_INT 0
6707: PPUSH
6708: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6712: LD_VAR 0 3
6716: PPUSH
6717: LD_INT 25
6719: PPUSH
6720: LD_INT 27
6722: PPUSH
6723: CALL_OW 111
// wait ( 0 0$1 ) ;
6727: LD_INT 35
6729: PPUSH
6730: CALL_OW 67
// end ;
6734: GO 6600
6736: POP
6737: POP
// repeat wait ( 0 0$2 ) ;
6738: LD_INT 70
6740: PPUSH
6741: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6745: LD_ADDR_VAR 0 2
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 4
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 25
6762: PUSH
6763: LD_INT 1
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 69
6778: PUSH
6779: FOR_IN
6780: IFFALSE 6843
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6782: LD_VAR 0 2
6786: PPUSH
6787: LD_INT 17
6789: PPUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 2
6802: PUSH
6803: LD_INT 58
6805: PUSH
6806: EMPTY
6807: LIST
6808: PUSH
6809: LD_INT 33
6811: PUSH
6812: LD_INT 2
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 70
6832: PUSH
6833: LD_INT 1
6835: ARRAY
6836: PPUSH
6837: CALL_OW 115
6841: GO 6779
6843: POP
6844: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
6845: LD_INT 17
6847: PPUSH
6848: LD_INT 22
6850: PUSH
6851: LD_INT 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 2
6860: PUSH
6861: LD_INT 58
6863: PUSH
6864: EMPTY
6865: LIST
6866: PUSH
6867: LD_INT 33
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 70
6890: NOT
6891: IFFALSE 6738
// for i := 1 to 2 do
6893: LD_ADDR_VAR 0 2
6897: PUSH
6898: DOUBLE
6899: LD_INT 1
6901: DEC
6902: ST_TO_ADDR
6903: LD_INT 2
6905: PUSH
6906: FOR_TO
6907: IFFALSE 7019
// begin uc_side := 4 ;
6909: LD_ADDR_OWVAR 20
6913: PUSH
6914: LD_INT 4
6916: ST_TO_ADDR
// uc_nation := 1 ;
6917: LD_ADDR_OWVAR 21
6921: PUSH
6922: LD_INT 1
6924: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6925: LD_INT 0
6927: PPUSH
6928: LD_INT 4
6930: PPUSH
6931: LD_INT 3
6933: PPUSH
6934: LD_INT 5
6936: PPUSH
6937: CALL_OW 12
6941: PPUSH
6942: CALL_OW 380
// un := CreateHuman ;
6946: LD_ADDR_VAR 0 3
6950: PUSH
6951: CALL_OW 44
6955: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6956: LD_VAR 0 3
6960: PPUSH
6961: LD_INT 3
6963: PPUSH
6964: CALL_OW 233
// SetTag ( un , 101 ) ;
6968: LD_VAR 0 3
6972: PPUSH
6973: LD_INT 101
6975: PPUSH
6976: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6980: LD_VAR 0 3
6984: PPUSH
6985: LD_INT 6
6987: PPUSH
6988: LD_INT 0
6990: PPUSH
6991: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6995: LD_VAR 0 3
6999: PPUSH
7000: LD_INT 25
7002: PPUSH
7003: LD_INT 27
7005: PPUSH
7006: CALL_OW 111
// wait ( 0 0$1 ) ;
7010: LD_INT 35
7012: PPUSH
7013: CALL_OW 67
// end ;
7017: GO 6906
7019: POP
7020: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7021: LD_ADDR_VAR 0 2
7025: PUSH
7026: DOUBLE
7027: LD_INT 1
7029: DEC
7030: ST_TO_ADDR
7031: LD_INT 5
7033: PUSH
7034: LD_INT 4
7036: PUSH
7037: LD_INT 3
7039: PUSH
7040: LD_INT 3
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PUSH
7049: LD_OWVAR 67
7053: ARRAY
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7321
// begin repeat wait ( 0 0$2 ) ;
7058: LD_INT 70
7060: PPUSH
7061: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7065: LD_INT 6
7067: PPUSH
7068: LD_INT 50
7070: PUSH
7071: EMPTY
7072: LIST
7073: PPUSH
7074: CALL_OW 70
7078: NOT
7079: IFFALSE 7058
// uc_side := 4 ;
7081: LD_ADDR_OWVAR 20
7085: PUSH
7086: LD_INT 4
7088: ST_TO_ADDR
// uc_nation := 1 ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_INT 1
7096: ST_TO_ADDR
// vc_engine := engine_combustion ;
7097: LD_ADDR_OWVAR 39
7101: PUSH
7102: LD_INT 1
7104: ST_TO_ADDR
// vc_control := control_manual ;
7105: LD_ADDR_OWVAR 38
7109: PUSH
7110: LD_INT 1
7112: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7113: LD_ADDR_OWVAR 40
7117: PUSH
7118: LD_INT 5
7120: PUSH
7121: LD_INT 7
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: LD_INT 4
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_VAR 0 2
7140: PUSH
7141: LD_INT 4
7143: MOD
7144: PUSH
7145: LD_INT 1
7147: PLUS
7148: ARRAY
7149: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7150: LD_ADDR_OWVAR 37
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: LD_INT 3
7160: PUSH
7161: LD_INT 4
7163: PUSH
7164: LD_INT 4
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: LD_VAR 0 2
7177: PUSH
7178: LD_INT 4
7180: MOD
7181: PUSH
7182: LD_INT 1
7184: PLUS
7185: ARRAY
7186: ST_TO_ADDR
// veh := CreateVehicle ;
7187: LD_ADDR_VAR 0 4
7191: PUSH
7192: CALL_OW 45
7196: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7197: LD_VAR 0 4
7201: PPUSH
7202: LD_INT 3
7204: PPUSH
7205: CALL_OW 233
// SetTag ( veh , 0 ) ;
7209: LD_VAR 0 4
7213: PPUSH
7214: LD_INT 0
7216: PPUSH
7217: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7221: LD_VAR 0 4
7225: PPUSH
7226: LD_INT 70
7228: PPUSH
7229: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7233: LD_VAR 0 4
7237: PPUSH
7238: LD_INT 6
7240: PPUSH
7241: LD_INT 0
7243: PPUSH
7244: CALL_OW 49
// InitHc ;
7248: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7252: LD_INT 0
7254: PPUSH
7255: LD_INT 3
7257: PPUSH
7258: LD_INT 4
7260: PPUSH
7261: LD_INT 7
7263: PPUSH
7264: CALL_OW 12
7268: PPUSH
7269: CALL_OW 380
// un := CreateHuman ;
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: CALL_OW 44
7282: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7283: LD_VAR 0 3
7287: PPUSH
7288: LD_VAR 0 4
7292: PPUSH
7293: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7297: LD_VAR 0 3
7301: PPUSH
7302: LD_INT 30
7304: PPUSH
7305: LD_INT 22
7307: PPUSH
7308: CALL_OW 111
// wait ( 0 0$3 ) ;
7312: LD_INT 105
7314: PPUSH
7315: CALL_OW 67
// end ;
7319: GO 7055
7321: POP
7322: POP
// wait ( 0 0$10 ) ;
7323: LD_INT 350
7325: PPUSH
7326: CALL_OW 67
// end ;
7330: LD_VAR 0 1
7334: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
// gammaBase := [ ] ;
7341: LD_ADDR_VAR 0 4
7345: PUSH
7346: EMPTY
7347: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7348: LD_ADDR_VAR 0 5
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_INT 22
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 21
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: PUSH
7378: LD_INT 50
7380: PUSH
7381: EMPTY
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 70
7393: ST_TO_ADDR
// for i in buildings do
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_VAR 0 5
7403: PUSH
7404: FOR_IN
7405: IFFALSE 7842
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7407: LD_VAR 0 3
7411: PPUSH
7412: CALL_OW 266
7416: PUSH
7417: LD_INT 6
7419: PUSH
7420: LD_INT 7
7422: PUSH
7423: LD_INT 8
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: IN
7431: IFFALSE 7545
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7433: LD_ADDR_VAR 0 4
7437: PUSH
7438: LD_VAR 0 4
7442: PUSH
7443: LD_VAR 0 3
7447: PPUSH
7448: CALL_OW 266
7452: PUSH
7453: LD_VAR 0 3
7457: PPUSH
7458: CALL_OW 250
7462: PUSH
7463: LD_VAR 0 3
7467: PPUSH
7468: CALL_OW 251
7472: PUSH
7473: LD_VAR 0 3
7477: PPUSH
7478: CALL_OW 254
7482: PUSH
7483: LD_VAR 0 3
7487: PPUSH
7488: CALL_OW 267
7492: PUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: CALL_OW 248
7502: PUSH
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_INT 1
7510: PPUSH
7511: CALL_OW 268
7515: PUSH
7516: LD_VAR 0 3
7520: PPUSH
7521: LD_INT 2
7523: PPUSH
7524: CALL_OW 268
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: ADD
7542: ST_TO_ADDR
7543: GO 7840
// if GetBType ( i ) = b_bunker then
7545: LD_VAR 0 3
7549: PPUSH
7550: CALL_OW 266
7554: PUSH
7555: LD_INT 32
7557: EQUAL
7558: IFFALSE 7655
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7560: LD_ADDR_VAR 0 4
7564: PUSH
7565: LD_VAR 0 4
7569: PUSH
7570: LD_VAR 0 3
7574: PPUSH
7575: CALL_OW 266
7579: PUSH
7580: LD_VAR 0 3
7584: PPUSH
7585: CALL_OW 250
7589: PUSH
7590: LD_VAR 0 3
7594: PPUSH
7595: CALL_OW 251
7599: PUSH
7600: LD_VAR 0 3
7604: PPUSH
7605: CALL_OW 254
7609: PUSH
7610: LD_VAR 0 3
7614: PPUSH
7615: CALL_OW 267
7619: PUSH
7620: LD_VAR 0 3
7624: PPUSH
7625: CALL_OW 248
7629: PUSH
7630: LD_VAR 0 3
7634: PPUSH
7635: CALL_OW 269
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: ADD
7652: ST_TO_ADDR
7653: GO 7840
// if GetBType ( i ) = b_factory then
7655: LD_VAR 0 3
7659: PPUSH
7660: CALL_OW 266
7664: PUSH
7665: LD_INT 3
7667: EQUAL
7668: IFFALSE 7758
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7670: LD_ADDR_VAR 0 4
7674: PUSH
7675: LD_VAR 0 4
7679: PPUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 266
7692: PUSH
7693: LD_VAR 0 3
7697: PPUSH
7698: CALL_OW 250
7702: PUSH
7703: LD_VAR 0 3
7707: PPUSH
7708: CALL_OW 251
7712: PUSH
7713: LD_VAR 0 3
7717: PPUSH
7718: CALL_OW 254
7722: PUSH
7723: LD_VAR 0 3
7727: PPUSH
7728: CALL_OW 267
7732: PUSH
7733: LD_VAR 0 3
7737: PPUSH
7738: CALL_OW 248
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 2
7755: ST_TO_ADDR
7756: GO 7840
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7758: LD_ADDR_VAR 0 4
7762: PUSH
7763: LD_VAR 0 4
7767: PUSH
7768: LD_VAR 0 3
7772: PPUSH
7773: CALL_OW 266
7777: PUSH
7778: LD_VAR 0 3
7782: PPUSH
7783: CALL_OW 250
7787: PUSH
7788: LD_VAR 0 3
7792: PPUSH
7793: CALL_OW 251
7797: PUSH
7798: LD_VAR 0 3
7802: PPUSH
7803: CALL_OW 254
7807: PUSH
7808: LD_VAR 0 3
7812: PPUSH
7813: CALL_OW 267
7817: PUSH
7818: LD_VAR 0 3
7822: PPUSH
7823: CALL_OW 248
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: ADD
7839: ST_TO_ADDR
// end ;
7840: GO 7404
7842: POP
7843: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7844: LD_VAR 0 4
7848: PPUSH
7849: LD_STRING 08_GammaBase
7851: PPUSH
7852: CALL_OW 39
// end ;
7856: LD_VAR 0 2
7860: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7861: LD_INT 0
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
7867: PPUSH
7868: PPUSH
7869: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
7870: LD_ADDR_VAR 0 3
7874: PUSH
7875: LD_INT 17
7877: PPUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 3
7890: PUSH
7891: LD_INT 21
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 3
7907: PUSH
7908: LD_INT 33
7910: PUSH
7911: LD_INT 2
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 70
7931: ST_TO_ADDR
// if tmp then
7932: LD_VAR 0 3
7936: IFFALSE 8055
// begin for i in tmp do
7938: LD_ADDR_VAR 0 2
7942: PUSH
7943: LD_VAR 0 3
7947: PUSH
7948: FOR_IN
7949: IFFALSE 7980
// begin SetSide ( i , 4 ) ;
7951: LD_VAR 0 2
7955: PPUSH
7956: LD_INT 4
7958: PPUSH
7959: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
7963: LD_VAR 0 2
7967: PPUSH
7968: LD_INT 42
7970: PPUSH
7971: LD_INT 22
7973: PPUSH
7974: CALL_OW 111
// end ;
7978: GO 7948
7980: POP
7981: POP
// repeat wait ( 0 0$3 ) ;
7982: LD_INT 105
7984: PPUSH
7985: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
7989: LD_VAR 0 3
7993: PPUSH
7994: LD_INT 51
7996: PPUSH
7997: LD_INT 16
7999: PPUSH
8000: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8004: LD_VAR 0 3
8008: PPUSH
8009: LD_INT 95
8011: PUSH
8012: LD_INT 17
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PPUSH
8019: CALL_OW 72
8023: NOT
8024: IFFALSE 7982
// for i in tmp do
8026: LD_ADDR_VAR 0 2
8030: PUSH
8031: LD_VAR 0 3
8035: PUSH
8036: FOR_IN
8037: IFFALSE 8053
// SetSide ( i , 1 ) ;
8039: LD_VAR 0 2
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 235
8051: GO 8036
8053: POP
8054: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8055: LD_ADDR_VAR 0 3
8059: PUSH
8060: LD_INT 17
8062: PPUSH
8063: LD_INT 22
8065: PUSH
8066: LD_INT 1
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 33
8075: PUSH
8076: LD_INT 2
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 70
8091: ST_TO_ADDR
// if tmp then
8092: LD_VAR 0 3
8096: IFFALSE 8120
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8098: LD_VAR 0 3
8102: PPUSH
8103: LD_INT 40
8105: PPUSH
8106: LD_INT 32
8108: PPUSH
8109: CALL_OW 111
// wait ( 0 0$3 ) ;
8113: LD_INT 105
8115: PPUSH
8116: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8120: LD_ADDR_VAR 0 3
8124: PUSH
8125: LD_INT 17
8127: PPUSH
8128: LD_INT 22
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: LD_INT 2
8140: PUSH
8141: LD_INT 21
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 21
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// if tmp then
8175: LD_VAR 0 3
8179: IFFALSE 8327
// begin repeat wait ( 0 0$1 ) ;
8181: LD_INT 35
8183: PPUSH
8184: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_INT 17
8195: PPUSH
8196: LD_INT 22
8198: PUSH
8199: LD_INT 1
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 2
8208: PUSH
8209: LD_INT 21
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 21
8221: PUSH
8222: LD_INT 3
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PPUSH
8238: CALL_OW 70
8242: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8243: LD_ADDR_VAR 0 2
8247: PUSH
8248: LD_INT 22
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: LD_INT 25
8263: PUSH
8264: LD_INT 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 21
8273: PUSH
8274: LD_INT 2
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 69
8294: PUSH
8295: FOR_IN
8296: IFFALSE 8318
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8298: LD_VAR 0 2
8302: PPUSH
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: CALL_OW 115
8316: GO 8295
8318: POP
8319: POP
// until not tmp ;
8320: LD_VAR 0 3
8324: NOT
8325: IFFALSE 8181
// end ; wait ( 0 0$2 ) ;
8327: LD_INT 70
8329: PPUSH
8330: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8334: LD_ADDR_VAR 0 3
8338: PUSH
8339: LD_INT 22
8341: PUSH
8342: LD_INT 4
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8354: LD_VAR 0 3
8358: PPUSH
8359: LD_INT 52
8361: PPUSH
8362: LD_INT 54
8364: PPUSH
8365: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8369: LD_VAR 0 3
8373: PPUSH
8374: LD_INT 175
8376: PPUSH
8377: CALL_OW 202
// wait ( 0 0$5 ) ;
8381: LD_INT 175
8383: PPUSH
8384: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8388: LD_VAR 0 3
8392: PPUSH
8393: LD_INT 120
8395: PUSH
8396: LD_INT 101
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 72
8407: PPUSH
8408: LD_INT 42
8410: PPUSH
8411: LD_INT 52
8413: PPUSH
8414: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8418: LD_VAR 0 3
8422: PPUSH
8423: LD_INT 120
8425: PUSH
8426: LD_INT 101
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PPUSH
8433: CALL_OW 72
8437: PPUSH
8438: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8442: LD_VAR 0 3
8446: PPUSH
8447: LD_INT 120
8449: PUSH
8450: LD_INT 101
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 25
8459: PUSH
8460: LD_INT 4
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PPUSH
8471: CALL_OW 72
8475: PPUSH
8476: LD_INT 34
8478: PPUSH
8479: LD_INT 47
8481: PPUSH
8482: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8486: LD_VAR 0 3
8490: PPUSH
8491: LD_INT 120
8493: PUSH
8494: LD_INT 101
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_INT 25
8503: PUSH
8504: LD_INT 4
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PPUSH
8515: CALL_OW 72
8519: PPUSH
8520: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8524: LD_ADDR_VAR 0 7
8528: PUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 72
8548: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8549: LD_ADDR_VAR 0 4
8553: PUSH
8554: LD_INT 81
8556: PUSH
8557: LD_INT 1
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8569: LD_ADDR_VAR 0 5
8573: PUSH
8574: LD_INT 57
8576: PUSH
8577: LD_INT 66
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 62
8586: PUSH
8587: LD_INT 58
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8598: LD_INT 35
8600: PPUSH
8601: CALL_OW 67
// for i in filter do
8605: LD_ADDR_VAR 0 2
8609: PUSH
8610: LD_VAR 0 7
8614: PUSH
8615: FOR_IN
8616: IFFALSE 9055
// begin if IsDead ( i ) then
8618: LD_VAR 0 2
8622: PPUSH
8623: CALL_OW 301
8627: IFFALSE 8647
// begin filter := filter diff i ;
8629: LD_ADDR_VAR 0 7
8633: PUSH
8634: LD_VAR 0 7
8638: PUSH
8639: LD_VAR 0 2
8643: DIFF
8644: ST_TO_ADDR
// continue ;
8645: GO 8615
// end ; tmp := IsDrivenBy ( i ) ;
8647: LD_ADDR_VAR 0 3
8651: PUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 311
8661: ST_TO_ADDR
// if not tmp then
8662: LD_VAR 0 3
8666: NOT
8667: IFFALSE 8671
// continue ;
8669: GO 8615
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8671: LD_VAR 0 2
8675: PPUSH
8676: CALL_OW 261
8680: PUSH
8681: LD_INT 30
8683: GREATER
8684: PUSH
8685: LD_VAR 0 2
8689: PPUSH
8690: CALL_OW 110
8694: PUSH
8695: LD_INT 2
8697: EQUAL
8698: AND
8699: IFFALSE 8715
// SetTag ( i , 0 ) else
8701: LD_VAR 0 2
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 109
8713: GO 8759
// if GetTag ( i ) = 2 then
8715: LD_VAR 0 2
8719: PPUSH
8720: CALL_OW 110
8724: PUSH
8725: LD_INT 2
8727: EQUAL
8728: IFFALSE 8759
// begin ComMoveXY ( i , 52 , 50 ) ;
8730: LD_VAR 0 2
8734: PPUSH
8735: LD_INT 52
8737: PPUSH
8738: LD_INT 50
8740: PPUSH
8741: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
8745: LD_VAR 0 2
8749: PPUSH
8750: LD_EXP 31
8754: PPUSH
8755: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8759: LD_VAR 0 2
8763: PPUSH
8764: CALL_OW 256
8768: PUSH
8769: LD_INT 600
8771: GREATEREQUAL
8772: PUSH
8773: LD_VAR 0 2
8777: PPUSH
8778: CALL_OW 110
8782: NOT
8783: AND
8784: IFFALSE 8810
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8786: LD_VAR 0 2
8790: PPUSH
8791: LD_VAR 0 4
8795: PPUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 74
8805: PPUSH
8806: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8810: LD_VAR 0 2
8814: PPUSH
8815: CALL_OW 256
8819: PUSH
8820: LD_INT 600
8822: LESS
8823: PUSH
8824: LD_VAR 0 2
8828: PPUSH
8829: CALL_OW 110
8833: NOT
8834: AND
8835: IFFALSE 8911
// begin SetTag ( i , 1 ) ;
8837: LD_VAR 0 2
8841: PPUSH
8842: LD_INT 1
8844: PPUSH
8845: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8849: LD_ADDR_VAR 0 6
8853: PUSH
8854: LD_VAR 0 2
8858: PPUSH
8859: LD_VAR 0 5
8863: PPUSH
8864: CALL 80939 0 2
8868: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8869: LD_VAR 0 2
8873: PPUSH
8874: LD_VAR 0 6
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 6
8887: PUSH
8888: LD_INT 2
8890: ARRAY
8891: PPUSH
8892: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_INT 40
8903: PPUSH
8904: LD_INT 49
8906: PPUSH
8907: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8911: LD_VAR 0 2
8915: PPUSH
8916: CALL_OW 110
8920: PUSH
8921: LD_INT 1
8923: EQUAL
8924: PUSH
8925: LD_VAR 0 2
8929: PPUSH
8930: LD_INT 40
8932: PPUSH
8933: LD_INT 49
8935: PPUSH
8936: CALL_OW 297
8940: PUSH
8941: LD_INT 9
8943: LESS
8944: AND
8945: PUSH
8946: LD_VAR 0 3
8950: AND
8951: IFFALSE 9053
// begin ComExitVehicle ( tmp ) ;
8953: LD_VAR 0 3
8957: PPUSH
8958: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8962: LD_VAR 0 3
8966: PPUSH
8967: LD_VAR 0 2
8971: PPUSH
8972: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8976: LD_INT 35
8978: PPUSH
8979: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 256
8992: PUSH
8993: LD_INT 1000
8995: EQUAL
8996: IFFALSE 8976
// ComEnterUnit ( tmp , i ) ;
8998: LD_VAR 0 3
9002: PPUSH
9003: LD_VAR 0 2
9007: PPUSH
9008: CALL_OW 120
// if GetFuel ( i ) <= 40 then
9012: LD_VAR 0 2
9016: PPUSH
9017: CALL_OW 261
9021: PUSH
9022: LD_INT 40
9024: LESSEQUAL
9025: IFFALSE 9041
// SetTag ( i , 2 ) else
9027: LD_VAR 0 2
9031: PPUSH
9032: LD_INT 2
9034: PPUSH
9035: CALL_OW 109
9039: GO 9053
// SetTag ( i , 0 ) ;
9041: LD_VAR 0 2
9045: PPUSH
9046: LD_INT 0
9048: PPUSH
9049: CALL_OW 109
// end ; end ;
9053: GO 8615
9055: POP
9056: POP
// until not filter ;
9057: LD_VAR 0 7
9061: NOT
9062: IFFALSE 8598
// end ; end_of_file
9064: LD_VAR 0 1
9068: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9069: LD_INT 0
9071: PPUSH
9072: PPUSH
9073: PPUSH
9074: PPUSH
9075: PPUSH
// uc_side := 3 ;
9076: LD_ADDR_OWVAR 20
9080: PUSH
9081: LD_INT 3
9083: ST_TO_ADDR
// uc_nation := 3 ;
9084: LD_ADDR_OWVAR 21
9088: PUSH
9089: LD_INT 3
9091: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9092: LD_ADDR_EXP 33
9096: PUSH
9097: LD_INT 8
9099: PUSH
9100: LD_INT 11
9102: PUSH
9103: LD_INT 14
9105: PUSH
9106: LD_INT 17
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PUSH
9115: LD_OWVAR 67
9119: ARRAY
9120: ST_TO_ADDR
// ruMobile := [ ] ;
9121: LD_ADDR_EXP 34
9125: PUSH
9126: EMPTY
9127: ST_TO_ADDR
// ruBuildList := [ ] ;
9128: LD_ADDR_EXP 35
9132: PUSH
9133: EMPTY
9134: ST_TO_ADDR
// russianAttackers := [ ] ;
9135: LD_ADDR_EXP 36
9139: PUSH
9140: EMPTY
9141: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9142: LD_ADDR_VAR 0 5
9146: PUSH
9147: LD_INT 43
9149: PUSH
9150: LD_INT 44
9152: PUSH
9153: LD_INT 46
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: ST_TO_ADDR
// if Difficulty > 2 then
9161: LD_OWVAR 67
9165: PUSH
9166: LD_INT 2
9168: GREATER
9169: IFFALSE 9192
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9171: LD_ADDR_VAR 0 5
9175: PUSH
9176: LD_VAR 0 5
9180: PUSH
9181: LD_INT 45
9183: PUSH
9184: LD_INT 46
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: ADD
9191: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9192: LD_ADDR_EXP 32
9196: PUSH
9197: LD_STRING Borodin
9199: PPUSH
9200: CALL_OW 25
9204: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9205: LD_EXP 32
9209: PPUSH
9210: LD_INT 28
9212: PPUSH
9213: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
9217: LD_INT 28
9219: PPUSH
9220: CALL_OW 274
9224: PPUSH
9225: LD_INT 1
9227: PPUSH
9228: LD_INT 3000
9230: PUSH
9231: LD_INT 4000
9233: PUSH
9234: LD_INT 5000
9236: PUSH
9237: LD_INT 6000
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: PUSH
9246: LD_OWVAR 67
9250: ARRAY
9251: PPUSH
9252: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
9256: LD_INT 28
9258: PPUSH
9259: CALL_OW 274
9263: PPUSH
9264: LD_INT 2
9266: PPUSH
9267: LD_INT 1000
9269: PPUSH
9270: CALL_OW 277
// if Difficulty > 2 then
9274: LD_OWVAR 67
9278: PUSH
9279: LD_INT 2
9281: GREATER
9282: IFFALSE 9406
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9284: LD_ADDR_VAR 0 4
9288: PUSH
9289: LD_INT 99
9291: PUSH
9292: LD_INT 130
9294: PUSH
9295: LD_INT 2
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 121
9305: PUSH
9306: LD_INT 127
9308: PUSH
9309: LD_INT 4
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 117
9319: PUSH
9320: LD_INT 121
9322: PUSH
9323: LD_INT 4
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: ST_TO_ADDR
// for i in tmp do
9336: LD_ADDR_VAR 0 2
9340: PUSH
9341: LD_VAR 0 4
9345: PUSH
9346: FOR_IN
9347: IFFALSE 9404
// begin bc_type := b_turret ;
9349: LD_ADDR_OWVAR 42
9353: PUSH
9354: LD_INT 33
9356: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9357: LD_ADDR_OWVAR 43
9361: PUSH
9362: LD_INT 2
9364: PUSH
9365: LD_OWVAR 67
9369: PLUS
9370: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9371: LD_VAR 0 2
9375: PUSH
9376: LD_INT 1
9378: ARRAY
9379: PPUSH
9380: LD_VAR 0 2
9384: PUSH
9385: LD_INT 2
9387: ARRAY
9388: PPUSH
9389: LD_VAR 0 2
9393: PUSH
9394: LD_INT 3
9396: ARRAY
9397: PPUSH
9398: CALL_OW 47
// end ;
9402: GO 9346
9404: POP
9405: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9406: LD_ADDR_VAR 0 2
9410: PUSH
9411: LD_INT 22
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 21
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 69
9439: PUSH
9440: FOR_IN
9441: IFFALSE 9463
// SetBLevel ( i , 2 + Difficulty ) ;
9443: LD_VAR 0 2
9447: PPUSH
9448: LD_INT 2
9450: PUSH
9451: LD_OWVAR 67
9455: PLUS
9456: PPUSH
9457: CALL_OW 241
9461: GO 9440
9463: POP
9464: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9465: LD_ADDR_VAR 0 4
9469: PUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: LD_INT 30
9485: PUSH
9486: LD_INT 32
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PUSH
9493: LD_INT 30
9495: PUSH
9496: LD_INT 33
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PPUSH
9512: CALL_OW 69
9516: ST_TO_ADDR
// for i in tmp do
9517: LD_ADDR_VAR 0 2
9521: PUSH
9522: LD_VAR 0 4
9526: PUSH
9527: FOR_IN
9528: IFFALSE 9560
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9530: LD_VAR 0 2
9534: PPUSH
9535: LD_VAR 0 5
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_VAR 0 5
9547: PPUSH
9548: CALL_OW 12
9552: ARRAY
9553: PPUSH
9554: CALL_OW 431
9558: GO 9527
9560: POP
9561: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9562: LD_ADDR_VAR 0 2
9566: PUSH
9567: LD_INT 22
9569: PUSH
9570: LD_INT 3
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 30
9579: PUSH
9580: LD_INT 32
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PPUSH
9591: CALL_OW 69
9595: PUSH
9596: FOR_IN
9597: IFFALSE 9646
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9599: LD_INT 0
9601: PPUSH
9602: LD_INT 5
9604: PUSH
9605: LD_INT 6
9607: PUSH
9608: LD_INT 7
9610: PUSH
9611: LD_INT 8
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_OWVAR 67
9624: ARRAY
9625: PPUSH
9626: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9630: CALL_OW 44
9634: PPUSH
9635: LD_VAR 0 2
9639: PPUSH
9640: CALL_OW 52
// end ;
9644: GO 9596
9646: POP
9647: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9648: LD_ADDR_VAR 0 2
9652: PUSH
9653: LD_INT 22
9655: PUSH
9656: LD_INT 3
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 30
9665: PUSH
9666: LD_INT 5
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 69
9681: PUSH
9682: FOR_IN
9683: IFFALSE 9773
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9685: LD_ADDR_VAR 0 3
9689: PUSH
9690: DOUBLE
9691: LD_INT 1
9693: DEC
9694: ST_TO_ADDR
9695: LD_INT 2
9697: PUSH
9698: LD_INT 3
9700: PUSH
9701: LD_INT 4
9703: PUSH
9704: LD_INT 5
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: PUSH
9713: LD_OWVAR 67
9717: ARRAY
9718: PUSH
9719: FOR_TO
9720: IFFALSE 9769
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9722: LD_INT 0
9724: PPUSH
9725: LD_INT 5
9727: PUSH
9728: LD_INT 6
9730: PUSH
9731: LD_INT 7
9733: PUSH
9734: LD_INT 8
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: PUSH
9743: LD_OWVAR 67
9747: ARRAY
9748: PPUSH
9749: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9753: CALL_OW 44
9757: PPUSH
9758: LD_VAR 0 2
9762: PPUSH
9763: CALL_OW 52
// end ;
9767: GO 9719
9769: POP
9770: POP
// end ;
9771: GO 9682
9773: POP
9774: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9775: LD_ADDR_VAR 0 2
9779: PUSH
9780: DOUBLE
9781: LD_INT 1
9783: DEC
9784: ST_TO_ADDR
9785: LD_INT 3
9787: PUSH
9788: LD_INT 4
9790: PUSH
9791: LD_INT 5
9793: PUSH
9794: LD_INT 5
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: PUSH
9803: LD_OWVAR 67
9807: ARRAY
9808: PUSH
9809: FOR_TO
9810: IFFALSE 9857
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9812: LD_INT 0
9814: PPUSH
9815: LD_INT 4
9817: PUSH
9818: LD_INT 5
9820: PUSH
9821: LD_INT 5
9823: PUSH
9824: LD_INT 6
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: LD_OWVAR 67
9837: ARRAY
9838: PPUSH
9839: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9843: CALL_OW 44
9847: PPUSH
9848: LD_INT 28
9850: PPUSH
9851: CALL_OW 52
// end ;
9855: GO 9809
9857: POP
9858: POP
// for i := 1 to 2 do
9859: LD_ADDR_VAR 0 2
9863: PUSH
9864: DOUBLE
9865: LD_INT 1
9867: DEC
9868: ST_TO_ADDR
9869: LD_INT 2
9871: PUSH
9872: FOR_TO
9873: IFFALSE 9907
// begin PrepareScientist ( false , 6 ) ;
9875: LD_INT 0
9877: PPUSH
9878: LD_INT 6
9880: PPUSH
9881: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9885: CALL_OW 44
9889: PPUSH
9890: LD_INT 81
9892: PPUSH
9893: LD_INT 93
9895: PPUSH
9896: CALL_OW 428
9900: PPUSH
9901: CALL_OW 52
// end ;
9905: GO 9872
9907: POP
9908: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9909: LD_INT 22
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: LD_INT 3
9917: PPUSH
9918: LD_INT 51
9920: PPUSH
9921: LD_INT 100
9923: PPUSH
9924: CALL 45114 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9928: CALL_OW 45
9932: PPUSH
9933: LD_INT 91
9935: PPUSH
9936: LD_INT 94
9938: PPUSH
9939: LD_INT 3
9941: PPUSH
9942: LD_INT 0
9944: PPUSH
9945: CALL_OW 50
// for i := 1 to 2 do
9949: LD_ADDR_VAR 0 2
9953: PUSH
9954: DOUBLE
9955: LD_INT 1
9957: DEC
9958: ST_TO_ADDR
9959: LD_INT 2
9961: PUSH
9962: FOR_TO
9963: IFFALSE 10007
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9965: LD_INT 22
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: LD_INT 3
9973: PPUSH
9974: LD_INT 52
9976: PPUSH
9977: LD_INT 100
9979: PPUSH
9980: CALL 45114 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9984: CALL_OW 45
9988: PPUSH
9989: LD_INT 91
9991: PPUSH
9992: LD_INT 94
9994: PPUSH
9995: LD_INT 4
9997: PPUSH
9998: LD_INT 0
10000: PPUSH
10001: CALL_OW 50
// end ;
10005: GO 9962
10007: POP
10008: POP
// end ;
10009: LD_VAR 0 1
10013: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
10014: LD_INT 0
10016: PPUSH
10017: PPUSH
10018: PPUSH
10019: PPUSH
10020: PPUSH
// uc_side := 3 ;
10021: LD_ADDR_OWVAR 20
10025: PUSH
10026: LD_INT 3
10028: ST_TO_ADDR
// uc_nation := 3 ;
10029: LD_ADDR_OWVAR 21
10033: PUSH
10034: LD_INT 3
10036: ST_TO_ADDR
// for i := 1 to 4 do
10037: LD_ADDR_VAR 0 2
10041: PUSH
10042: DOUBLE
10043: LD_INT 1
10045: DEC
10046: ST_TO_ADDR
10047: LD_INT 4
10049: PUSH
10050: FOR_TO
10051: IFFALSE 10178
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10053: LD_INT 22
10055: PPUSH
10056: LD_INT 1
10058: PPUSH
10059: LD_INT 1
10061: PPUSH
10062: LD_INT 42
10064: PUSH
10065: LD_INT 43
10067: PUSH
10068: LD_INT 44
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 1
10078: PPUSH
10079: LD_INT 3
10081: PPUSH
10082: CALL_OW 12
10086: ARRAY
10087: PPUSH
10088: LD_INT 40
10090: PPUSH
10091: CALL 45114 0 5
// veh := CreateVehicle ;
10095: LD_ADDR_VAR 0 4
10099: PUSH
10100: CALL_OW 45
10104: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10105: LD_VAR 0 4
10109: PPUSH
10110: LD_INT 5
10112: PPUSH
10113: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10117: LD_VAR 0 4
10121: PPUSH
10122: LD_INT 7
10124: PPUSH
10125: LD_INT 0
10127: PPUSH
10128: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10132: LD_INT 0
10134: PPUSH
10135: LD_INT 5
10137: PPUSH
10138: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10142: CALL_OW 44
10146: PPUSH
10147: LD_VAR 0 4
10151: PPUSH
10152: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10156: LD_ADDR_VAR 0 5
10160: PUSH
10161: LD_VAR 0 5
10165: PPUSH
10166: LD_VAR 0 4
10170: PPUSH
10171: CALL 77595 0 2
10175: ST_TO_ADDR
// end ;
10176: GO 10050
10178: POP
10179: POP
// for i := 1 to 3 do
10180: LD_ADDR_VAR 0 2
10184: PUSH
10185: DOUBLE
10186: LD_INT 1
10188: DEC
10189: ST_TO_ADDR
10190: LD_INT 3
10192: PUSH
10193: FOR_TO
10194: IFFALSE 10321
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10196: LD_INT 22
10198: PPUSH
10199: LD_INT 1
10201: PPUSH
10202: LD_INT 1
10204: PPUSH
10205: LD_INT 42
10207: PUSH
10208: LD_INT 43
10210: PUSH
10211: LD_INT 44
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 1
10221: PPUSH
10222: LD_INT 3
10224: PPUSH
10225: CALL_OW 12
10229: ARRAY
10230: PPUSH
10231: LD_INT 40
10233: PPUSH
10234: CALL 45114 0 5
// veh := CreateVehicle ;
10238: LD_ADDR_VAR 0 4
10242: PUSH
10243: CALL_OW 45
10247: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10248: LD_VAR 0 4
10252: PPUSH
10253: LD_INT 5
10255: PPUSH
10256: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10260: LD_VAR 0 4
10264: PPUSH
10265: LD_INT 8
10267: PPUSH
10268: LD_INT 0
10270: PPUSH
10271: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10275: LD_INT 0
10277: PPUSH
10278: LD_INT 5
10280: PPUSH
10281: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10285: CALL_OW 44
10289: PPUSH
10290: LD_VAR 0 4
10294: PPUSH
10295: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10299: LD_ADDR_VAR 0 5
10303: PUSH
10304: LD_VAR 0 5
10308: PPUSH
10309: LD_VAR 0 4
10313: PPUSH
10314: CALL 77595 0 2
10318: ST_TO_ADDR
// end ;
10319: GO 10193
10321: POP
10322: POP
// for i := 1 to 2 do
10323: LD_ADDR_VAR 0 2
10327: PUSH
10328: DOUBLE
10329: LD_INT 1
10331: DEC
10332: ST_TO_ADDR
10333: LD_INT 2
10335: PUSH
10336: FOR_TO
10337: IFFALSE 10396
// begin PrepareSoldier ( false , 5 ) ;
10339: LD_INT 0
10341: PPUSH
10342: LD_INT 5
10344: PPUSH
10345: CALL_OW 381
// un := CreateHuman ;
10349: LD_ADDR_VAR 0 3
10353: PUSH
10354: CALL_OW 44
10358: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10359: LD_VAR 0 3
10363: PPUSH
10364: LD_INT 8
10366: PPUSH
10367: LD_INT 0
10369: PPUSH
10370: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10374: LD_ADDR_VAR 0 5
10378: PUSH
10379: LD_VAR 0 5
10383: PPUSH
10384: LD_VAR 0 3
10388: PPUSH
10389: CALL 77595 0 2
10393: ST_TO_ADDR
// end ;
10394: GO 10336
10396: POP
10397: POP
// for i in tmp do
10398: LD_ADDR_VAR 0 2
10402: PUSH
10403: LD_VAR 0 5
10407: PUSH
10408: FOR_IN
10409: IFFALSE 10428
// ComAgressiveMove ( i , 51 , 16 ) ;
10411: LD_VAR 0 2
10415: PPUSH
10416: LD_INT 51
10418: PPUSH
10419: LD_INT 16
10421: PPUSH
10422: CALL_OW 114
10426: GO 10408
10428: POP
10429: POP
// end ;
10430: LD_VAR 0 1
10434: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10435: LD_EXP 34
10439: IFFALSE 11014
10441: GO 10443
10443: DISABLE
10444: LD_INT 0
10446: PPUSH
10447: PPUSH
10448: PPUSH
// begin enable ;
10449: ENABLE
// if not ruMobile then
10450: LD_EXP 34
10454: NOT
10455: IFFALSE 10459
// exit ;
10457: GO 11014
// for i in ruMobile do
10459: LD_ADDR_VAR 0 1
10463: PUSH
10464: LD_EXP 34
10468: PUSH
10469: FOR_IN
10470: IFFALSE 11012
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10472: LD_VAR 0 1
10476: PPUSH
10477: CALL_OW 302
10481: NOT
10482: PUSH
10483: LD_VAR 0 1
10487: PPUSH
10488: CALL_OW 255
10492: PUSH
10493: LD_INT 3
10495: NONEQUAL
10496: OR
10497: IFFALSE 10517
// begin ruMobile := ruMobile diff i ;
10499: LD_ADDR_EXP 34
10503: PUSH
10504: LD_EXP 34
10508: PUSH
10509: LD_VAR 0 1
10513: DIFF
10514: ST_TO_ADDR
// continue ;
10515: GO 10469
// end ; if GetTag ( i ) = 300 then
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL_OW 110
10526: PUSH
10527: LD_INT 300
10529: EQUAL
10530: IFFALSE 10645
// begin if GetFuel ( i ) < 50 then
10532: LD_VAR 0 1
10536: PPUSH
10537: CALL_OW 261
10541: PUSH
10542: LD_INT 50
10544: LESS
10545: IFFALSE 10604
// begin ComMoveXY ( i , 93 , 100 ) ;
10547: LD_VAR 0 1
10551: PPUSH
10552: LD_INT 93
10554: PPUSH
10555: LD_INT 100
10557: PPUSH
10558: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10562: LD_INT 35
10564: PPUSH
10565: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10569: LD_VAR 0 1
10573: PPUSH
10574: LD_INT 93
10576: PPUSH
10577: LD_INT 100
10579: PPUSH
10580: CALL_OW 297
10584: PUSH
10585: LD_INT 4
10587: LESS
10588: IFFALSE 10562
// SetFuel ( i , 100 ) ;
10590: LD_VAR 0 1
10594: PPUSH
10595: LD_INT 100
10597: PPUSH
10598: CALL_OW 240
// end else
10602: GO 10645
// if not IsInArea ( i , ruParkingArea ) then
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_INT 10
10611: PPUSH
10612: CALL_OW 308
10616: NOT
10617: IFFALSE 10633
// ComMoveToArea ( i , ruParkingArea ) else
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_INT 10
10626: PPUSH
10627: CALL_OW 113
10631: GO 10645
// SetTag ( i , 301 ) ;
10633: LD_VAR 0 1
10637: PPUSH
10638: LD_INT 301
10640: PPUSH
10641: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL_OW 110
10654: PUSH
10655: LD_INT 301
10657: EQUAL
10658: IFFALSE 10788
// begin if GetLives ( i ) < 1000 then
10660: LD_VAR 0 1
10664: PPUSH
10665: CALL_OW 256
10669: PUSH
10670: LD_INT 1000
10672: LESS
10673: IFFALSE 10765
// begin if not IsDrivenBy ( i ) then
10675: LD_VAR 0 1
10679: PPUSH
10680: CALL_OW 311
10684: NOT
10685: IFFALSE 10689
// continue ;
10687: GO 10469
// mech := IsDrivenBy ( i ) ;
10689: LD_ADDR_VAR 0 2
10693: PUSH
10694: LD_VAR 0 1
10698: PPUSH
10699: CALL_OW 311
10703: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10704: LD_VAR 0 2
10708: PPUSH
10709: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10713: LD_VAR 0 2
10717: PPUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10727: LD_INT 35
10729: PPUSH
10730: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10734: LD_VAR 0 1
10738: PPUSH
10739: CALL_OW 256
10743: PUSH
10744: LD_INT 1000
10746: EQUAL
10747: IFFALSE 10727
// ComEnterUnit ( mech , i ) ;
10749: LD_VAR 0 2
10753: PPUSH
10754: LD_VAR 0 1
10758: PPUSH
10759: CALL_OW 120
// end else
10763: GO 10788
// if IsDrivenBy ( i ) then
10765: LD_VAR 0 1
10769: PPUSH
10770: CALL_OW 311
10774: IFFALSE 10788
// SetTag ( i , 0 ) ;
10776: LD_VAR 0 1
10780: PPUSH
10781: LD_INT 0
10783: PPUSH
10784: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10788: LD_VAR 0 1
10792: PPUSH
10793: CALL_OW 110
10797: PUSH
10798: LD_INT 300
10800: LESS
10801: IFFALSE 11010
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10803: LD_ADDR_VAR 0 3
10807: PUSH
10808: LD_INT 11
10810: PPUSH
10811: LD_INT 81
10813: PUSH
10814: LD_INT 3
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 70
10825: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10826: LD_VAR 0 1
10830: PPUSH
10831: CALL_OW 256
10835: PUSH
10836: LD_INT 650
10838: LESS
10839: IFFALSE 10864
// begin ComStop ( i ) ;
10841: LD_VAR 0 1
10845: PPUSH
10846: CALL_OW 141
// SetTag ( i , 300 ) ;
10850: LD_VAR 0 1
10854: PPUSH
10855: LD_INT 300
10857: PPUSH
10858: CALL_OW 109
// continue ;
10862: GO 10469
// end ; if enemy then
10864: LD_VAR 0 3
10868: IFFALSE 10908
// begin if not HasTask ( i ) then
10870: LD_VAR 0 1
10874: PPUSH
10875: CALL_OW 314
10879: NOT
10880: IFFALSE 10906
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_VAR 0 3
10891: PPUSH
10892: LD_VAR 0 1
10896: PPUSH
10897: CALL_OW 74
10901: PPUSH
10902: CALL_OW 115
// end else
10906: GO 11010
// if ruMobile > 2 then
10908: LD_EXP 34
10912: PUSH
10913: LD_INT 2
10915: GREATER
10916: IFFALSE 11010
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10918: LD_ADDR_VAR 0 3
10922: PUSH
10923: LD_INT 81
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PPUSH
10933: CALL_OW 69
10937: ST_TO_ADDR
// if enemy then
10938: LD_VAR 0 3
10942: IFFALSE 11010
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10944: LD_VAR 0 1
10948: PPUSH
10949: LD_INT 116
10951: PUSH
10952: LD_INT 95
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: LD_INT 84
10961: PUSH
10962: LD_INT 68
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 58
10971: PUSH
10972: LD_INT 53
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 44
10981: PUSH
10982: LD_INT 35
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 45
10991: PUSH
10992: LD_INT 23
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: PPUSH
11006: CALL 80199 0 2
// end ; end ; end ;
11010: GO 10469
11012: POP
11013: POP
// end ;
11014: PPOPN 3
11016: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11017: LD_INT 3
11019: PUSH
11020: LD_INT 22
11022: PUSH
11023: LD_INT 1
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: LD_INT 32
11036: PUSH
11037: LD_INT 1
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PPUSH
11048: CALL_OW 69
11052: IFFALSE 11136
11054: GO 11056
11056: DISABLE
11057: LD_INT 0
11059: PPUSH
// begin enable ;
11060: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11061: LD_ADDR_VAR 0 1
11065: PUSH
11066: LD_INT 3
11068: PUSH
11069: LD_INT 22
11071: PUSH
11072: LD_INT 1
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: LD_INT 32
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PPUSH
11097: CALL_OW 69
11101: PUSH
11102: FOR_IN
11103: IFFALSE 11134
// if GetFuel ( i ) < 3 then
11105: LD_VAR 0 1
11109: PPUSH
11110: CALL_OW 261
11114: PUSH
11115: LD_INT 3
11117: LESS
11118: IFFALSE 11132
// SetFuel ( i , 3 ) ;
11120: LD_VAR 0 1
11124: PPUSH
11125: LD_INT 3
11127: PPUSH
11128: CALL_OW 240
11132: GO 11102
11134: POP
11135: POP
// end ;
11136: PPOPN 1
11138: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11139: LD_INT 29
11141: PPUSH
11142: CALL_OW 302
11146: PUSH
11147: LD_INT 29
11149: PPUSH
11150: CALL_OW 461
11154: PUSH
11155: LD_INT 2
11157: EQUAL
11158: AND
11159: IFFALSE 11392
11161: GO 11163
11163: DISABLE
11164: LD_INT 0
11166: PPUSH
11167: PPUSH
// begin enable ;
11168: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11169: LD_ADDR_VAR 0 1
11173: PUSH
11174: LD_INT 21
11176: PUSH
11177: LD_INT 22
11179: PUSH
11180: LD_INT 23
11182: PUSH
11183: LD_INT 24
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 1
11194: PPUSH
11195: LD_INT 4
11197: PPUSH
11198: CALL_OW 12
11202: ARRAY
11203: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11204: LD_ADDR_VAR 0 2
11208: PUSH
11209: LD_INT 42
11211: PUSH
11212: LD_INT 44
11214: PUSH
11215: LD_INT 43
11217: PUSH
11218: LD_INT 46
11220: PUSH
11221: LD_INT 45
11223: PUSH
11224: LD_INT 46
11226: PUSH
11227: LD_INT 45
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: LD_OWVAR 67
11243: PUSH
11244: LD_INT 0
11246: PPUSH
11247: LD_INT 3
11249: PPUSH
11250: CALL_OW 12
11254: PLUS
11255: ARRAY
11256: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11257: LD_VAR 0 1
11261: PUSH
11262: LD_INT 21
11264: PUSH
11265: LD_INT 22
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: IN
11272: PUSH
11273: LD_VAR 0 2
11277: PUSH
11278: LD_INT 46
11280: EQUAL
11281: AND
11282: IFFALSE 11311
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11284: LD_ADDR_VAR 0 2
11288: PUSH
11289: LD_INT 44
11291: PUSH
11292: LD_INT 45
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: LD_INT 1
11301: PPUSH
11302: LD_INT 2
11304: PPUSH
11305: CALL_OW 12
11309: ARRAY
11310: ST_TO_ADDR
// if tick < [ 12 12$00 , 11 11$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11311: LD_OWVAR 1
11315: PUSH
11316: LD_INT 25200
11318: PUSH
11319: LD_INT 23100
11321: PUSH
11322: LD_INT 21000
11324: PUSH
11325: LD_INT 18900
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: LD_OWVAR 67
11338: ARRAY
11339: LESS
11340: IFFALSE 11369
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11342: LD_ADDR_VAR 0 2
11346: PUSH
11347: LD_INT 44
11349: PUSH
11350: LD_INT 43
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 1
11359: PPUSH
11360: LD_INT 2
11362: PPUSH
11363: CALL_OW 12
11367: ARRAY
11368: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11369: LD_INT 29
11371: PPUSH
11372: LD_VAR 0 1
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: LD_INT 1
11382: PPUSH
11383: LD_VAR 0 2
11387: PPUSH
11388: CALL_OW 185
// end ;
11392: PPOPN 2
11394: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11395: LD_INT 28
11397: PPUSH
11398: CALL_OW 302
11402: IFFALSE 12994
11404: GO 11406
11406: DISABLE
11407: LD_INT 0
11409: PPUSH
11410: PPUSH
11411: PPUSH
11412: PPUSH
11413: PPUSH
11414: PPUSH
11415: PPUSH
11416: PPUSH
11417: PPUSH
11418: PPUSH
11419: PPUSH
11420: PPUSH
11421: PPUSH
// begin enable ;
11422: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11423: LD_ADDR_VAR 0 4
11427: PUSH
11428: LD_INT 12
11430: PPUSH
11431: LD_INT 3
11433: PUSH
11434: LD_INT 24
11436: PUSH
11437: LD_INT 1000
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 21
11450: PUSH
11451: LD_INT 3
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PPUSH
11462: CALL_OW 70
11466: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11467: LD_ADDR_VAR 0 5
11471: PUSH
11472: LD_INT 22
11474: PUSH
11475: LD_INT 3
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 25
11484: PUSH
11485: LD_INT 2
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PPUSH
11496: CALL_OW 69
11500: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11501: LD_ADDR_VAR 0 6
11505: PUSH
11506: LD_INT 22
11508: PUSH
11509: LD_INT 3
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 34
11518: PUSH
11519: LD_INT 52
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PPUSH
11530: CALL_OW 69
11534: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11535: LD_ADDR_VAR 0 8
11539: PUSH
11540: LD_INT 22
11542: PUSH
11543: LD_INT 3
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 25
11552: PUSH
11553: LD_INT 4
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PPUSH
11564: CALL_OW 69
11568: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11569: LD_ADDR_VAR 0 9
11573: PUSH
11574: LD_INT 81
11576: PPUSH
11577: LD_INT 93
11579: PPUSH
11580: CALL_OW 428
11584: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11585: LD_ADDR_VAR 0 10
11589: PUSH
11590: LD_INT 22
11592: PUSH
11593: LD_INT 3
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 30
11602: PUSH
11603: LD_INT 32
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 50
11612: PUSH
11613: EMPTY
11614: LIST
11615: PUSH
11616: LD_INT 58
11618: PUSH
11619: EMPTY
11620: LIST
11621: PUSH
11622: LD_INT 3
11624: PUSH
11625: LD_INT 120
11627: PUSH
11628: LD_INT 701
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: PPUSH
11646: CALL_OW 69
11650: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11651: LD_ADDR_VAR 0 12
11655: PUSH
11656: LD_INT 22
11658: PUSH
11659: LD_INT 3
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 30
11668: PUSH
11669: LD_INT 5
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 50
11678: PUSH
11679: EMPTY
11680: LIST
11681: PUSH
11682: LD_INT 3
11684: PUSH
11685: LD_INT 62
11687: PUSH
11688: EMPTY
11689: LIST
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 69
11705: ST_TO_ADDR
// if emptyTowers then
11706: LD_VAR 0 10
11710: IFFALSE 11971
// begin for i in emptyTowers do
11712: LD_ADDR_VAR 0 1
11716: PUSH
11717: LD_VAR 0 10
11721: PUSH
11722: FOR_IN
11723: IFFALSE 11967
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11725: LD_ADDR_VAR 0 11
11729: PUSH
11730: LD_INT 22
11732: PUSH
11733: LD_INT 3
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 2
11742: PUSH
11743: LD_INT 54
11745: PUSH
11746: EMPTY
11747: LIST
11748: PUSH
11749: LD_INT 95
11751: PUSH
11752: LD_INT 12
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 50
11776: PUSH
11777: EMPTY
11778: LIST
11779: PUSH
11780: LD_INT 3
11782: PUSH
11783: LD_INT 120
11785: PUSH
11786: LD_INT 701
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PPUSH
11804: CALL_OW 69
11808: ST_TO_ADDR
// if not sol then
11809: LD_VAR 0 11
11813: NOT
11814: IFFALSE 11818
// break ;
11816: GO 11967
// for j in sol do
11818: LD_ADDR_VAR 0 2
11822: PUSH
11823: LD_VAR 0 11
11827: PUSH
11828: FOR_IN
11829: IFFALSE 11880
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
11831: LD_VAR 0 2
11835: PPUSH
11836: CALL_OW 310
11840: PUSH
11841: LD_VAR 0 2
11845: PPUSH
11846: CALL_OW 310
11850: PPUSH
11851: CALL_OW 266
11855: PUSH
11856: LD_INT 32
11858: EQUAL
11859: AND
11860: IFFALSE 11878
// sol := sol diff j ;
11862: LD_ADDR_VAR 0 11
11866: PUSH
11867: LD_VAR 0 11
11871: PUSH
11872: LD_VAR 0 2
11876: DIFF
11877: ST_TO_ADDR
11878: GO 11828
11880: POP
11881: POP
// if not sol then
11882: LD_VAR 0 11
11886: NOT
11887: IFFALSE 11891
// break ;
11889: GO 11967
// if IsInUnit ( sol [ 1 ] ) then
11891: LD_VAR 0 11
11895: PUSH
11896: LD_INT 1
11898: ARRAY
11899: PPUSH
11900: CALL_OW 310
11904: IFFALSE 11919
// ComExit ( sol [ 1 ] ) ;
11906: LD_VAR 0 11
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PPUSH
11915: CALL 77993 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
11919: LD_VAR 0 11
11923: PUSH
11924: LD_INT 1
11926: ARRAY
11927: PPUSH
11928: LD_INT 701
11930: PPUSH
11931: CALL_OW 109
// SetTag ( i , 701 ) ;
11935: LD_VAR 0 1
11939: PPUSH
11940: LD_INT 701
11942: PPUSH
11943: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
11947: LD_VAR 0 11
11951: PUSH
11952: LD_INT 1
11954: ARRAY
11955: PPUSH
11956: LD_VAR 0 1
11960: PPUSH
11961: CALL_OW 180
// end ;
11965: GO 11722
11967: POP
11968: POP
// end else
11969: GO 12217
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
11971: LD_VAR 0 11
11975: PPUSH
11976: LD_INT 3
11978: PUSH
11979: LD_INT 54
11981: PUSH
11982: EMPTY
11983: LIST
11984: PUSH
11985: LD_INT 95
11987: PUSH
11988: LD_INT 12
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: PPUSH
12000: CALL_OW 72
12004: IFFALSE 12217
// begin if barracks then
12006: LD_VAR 0 12
12010: IFFALSE 12078
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12012: LD_ADDR_VAR 0 1
12016: PUSH
12017: LD_VAR 0 11
12021: PPUSH
12022: LD_INT 3
12024: PUSH
12025: LD_INT 54
12027: PUSH
12028: EMPTY
12029: LIST
12030: PUSH
12031: LD_INT 95
12033: PUSH
12034: LD_INT 12
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: PPUSH
12046: CALL_OW 72
12050: PUSH
12051: FOR_IN
12052: IFFALSE 12074
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_VAR 0 12
12063: PUSH
12064: LD_INT 1
12066: ARRAY
12067: PPUSH
12068: CALL_OW 120
12072: GO 12051
12074: POP
12075: POP
// end else
12076: GO 12217
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12078: LD_INT 12
12080: PPUSH
12081: LD_INT 81
12083: PUSH
12084: LD_INT 3
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PPUSH
12091: CALL_OW 70
12095: IFFALSE 12217
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12097: LD_ADDR_VAR 0 1
12101: PUSH
12102: LD_VAR 0 11
12106: PPUSH
12107: LD_INT 3
12109: PUSH
12110: LD_INT 54
12112: PUSH
12113: EMPTY
12114: LIST
12115: PUSH
12116: LD_INT 95
12118: PUSH
12119: LD_INT 12
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: PPUSH
12131: CALL_OW 72
12135: PUSH
12136: FOR_IN
12137: IFFALSE 12215
// begin SetTag ( i , 702 ) ;
12139: LD_VAR 0 1
12143: PPUSH
12144: LD_INT 702
12146: PPUSH
12147: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12151: LD_ADDR_VAR 0 13
12155: PUSH
12156: LD_INT 12
12158: PPUSH
12159: LD_INT 81
12161: PUSH
12162: LD_INT 3
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PPUSH
12169: CALL_OW 70
12173: PPUSH
12174: LD_VAR 0 1
12178: PPUSH
12179: CALL_OW 74
12183: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12184: LD_VAR 0 1
12188: PPUSH
12189: LD_VAR 0 13
12193: PPUSH
12194: CALL_OW 250
12198: PPUSH
12199: LD_VAR 0 13
12203: PPUSH
12204: CALL_OW 251
12208: PPUSH
12209: CALL_OW 114
// end ;
12213: GO 12136
12215: POP
12216: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12217: LD_ADDR_VAR 0 3
12221: PUSH
12222: LD_INT 22
12224: PUSH
12225: LD_INT 3
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 95
12234: PUSH
12235: LD_INT 11
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 50
12244: PUSH
12245: EMPTY
12246: LIST
12247: PUSH
12248: LD_INT 25
12250: PUSH
12251: LD_INT 1
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 120
12260: PUSH
12261: LD_INT 702
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: PPUSH
12275: CALL_OW 69
12279: ST_TO_ADDR
// if tmp then
12280: LD_VAR 0 3
12284: IFFALSE 12330
// for i in tmp do
12286: LD_ADDR_VAR 0 1
12290: PUSH
12291: LD_VAR 0 3
12295: PUSH
12296: FOR_IN
12297: IFFALSE 12328
// begin ComMoveXY ( i , 90 , 94 ) ;
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_INT 90
12306: PPUSH
12307: LD_INT 94
12309: PPUSH
12310: CALL_OW 111
// SetTag ( i , 0 ) ;
12314: LD_VAR 0 1
12318: PPUSH
12319: LD_INT 0
12321: PPUSH
12322: CALL_OW 109
// end ;
12326: GO 12296
12328: POP
12329: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12330: LD_VAR 0 8
12334: PUSH
12335: LD_VAR 0 5
12339: PPUSH
12340: LD_INT 120
12342: PUSH
12343: LD_INT 2
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 72
12354: AND
12355: IFFALSE 12368
// ComExitAll ( sci ) else
12357: LD_VAR 0 8
12361: PPUSH
12362: CALL 78076 0 1
12366: GO 12441
// if sci then
12368: LD_VAR 0 8
12372: IFFALSE 12441
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12374: LD_VAR 0 8
12378: PPUSH
12379: LD_INT 3
12381: PUSH
12382: LD_INT 54
12384: PUSH
12385: EMPTY
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 72
12396: PUSH
12397: LD_VAR 0 9
12401: PPUSH
12402: CALL_OW 302
12406: AND
12407: IFFALSE 12441
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12409: LD_VAR 0 8
12413: PPUSH
12414: LD_INT 3
12416: PUSH
12417: LD_INT 54
12419: PUSH
12420: EMPTY
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PPUSH
12427: CALL_OW 72
12431: PPUSH
12432: LD_VAR 0 9
12436: PPUSH
12437: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12441: LD_VAR 0 6
12445: PPUSH
12446: LD_INT 50
12448: PUSH
12449: EMPTY
12450: LIST
12451: PPUSH
12452: CALL_OW 72
12456: PUSH
12457: LD_VAR 0 4
12461: AND
12462: IFFALSE 12493
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12464: LD_VAR 0 6
12468: PPUSH
12469: LD_INT 50
12471: PUSH
12472: EMPTY
12473: LIST
12474: PPUSH
12475: CALL_OW 72
12479: PPUSH
12480: LD_VAR 0 4
12484: PUSH
12485: LD_INT 1
12487: ARRAY
12488: PPUSH
12489: CALL_OW 130
// if eng then
12493: LD_VAR 0 5
12497: IFFALSE 12994
// begin for i in eng do
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: LD_VAR 0 5
12508: PUSH
12509: FOR_IN
12510: IFFALSE 12992
// begin tag := GetTag ( i ) ;
12512: LD_ADDR_VAR 0 7
12516: PUSH
12517: LD_VAR 0 1
12521: PPUSH
12522: CALL_OW 110
12526: ST_TO_ADDR
// case tag of 0 :
12527: LD_VAR 0 7
12531: PUSH
12532: LD_INT 0
12534: DOUBLE
12535: EQUAL
12536: IFTRUE 12540
12538: GO 12751
12540: POP
// begin if b then
12541: LD_VAR 0 4
12545: IFFALSE 12561
// begin SetTag ( i , 1 ) ;
12547: LD_VAR 0 1
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: CALL_OW 109
// continue ;
12559: GO 12509
// end ; if not ruBuildList then
12561: LD_EXP 35
12565: NOT
12566: IFFALSE 12582
// ComEnterUnit ( i , ruDep ) else
12568: LD_VAR 0 1
12572: PPUSH
12573: LD_INT 28
12575: PPUSH
12576: CALL_OW 120
12580: GO 12749
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12582: LD_INT 11
12584: PPUSH
12585: LD_INT 81
12587: PUSH
12588: LD_INT 3
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PPUSH
12595: CALL_OW 70
12599: PUSH
12600: LD_INT 0
12602: EQUAL
12603: PUSH
12604: LD_INT 28
12606: PPUSH
12607: LD_EXP 35
12611: PUSH
12612: LD_INT 1
12614: ARRAY
12615: PUSH
12616: LD_INT 1
12618: ARRAY
12619: PPUSH
12620: LD_EXP 35
12624: PUSH
12625: LD_INT 1
12627: ARRAY
12628: PUSH
12629: LD_INT 2
12631: ARRAY
12632: PPUSH
12633: LD_EXP 35
12637: PUSH
12638: LD_INT 1
12640: ARRAY
12641: PUSH
12642: LD_INT 3
12644: ARRAY
12645: PPUSH
12646: LD_EXP 35
12650: PUSH
12651: LD_INT 1
12653: ARRAY
12654: PUSH
12655: LD_INT 4
12657: ARRAY
12658: PPUSH
12659: CALL 53342 0 5
12663: AND
12664: IFFALSE 12749
// begin if IsInUnit ( i ) then
12666: LD_VAR 0 1
12670: PPUSH
12671: CALL_OW 310
12675: IFFALSE 12688
// ComExitBuilding ( i ) else
12677: LD_VAR 0 1
12681: PPUSH
12682: CALL_OW 122
12686: GO 12749
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12688: LD_VAR 0 1
12692: PPUSH
12693: LD_EXP 35
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PUSH
12702: LD_INT 1
12704: ARRAY
12705: PPUSH
12706: LD_EXP 35
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PUSH
12715: LD_INT 2
12717: ARRAY
12718: PPUSH
12719: LD_EXP 35
12723: PUSH
12724: LD_INT 1
12726: ARRAY
12727: PUSH
12728: LD_INT 3
12730: ARRAY
12731: PPUSH
12732: LD_EXP 35
12736: PUSH
12737: LD_INT 1
12739: ARRAY
12740: PUSH
12741: LD_INT 4
12743: ARRAY
12744: PPUSH
12745: CALL_OW 145
// end ; end ; 1 :
12749: GO 12948
12751: LD_INT 1
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12862
12759: POP
// begin if not b then
12760: LD_VAR 0 4
12764: NOT
12765: IFFALSE 12781
// begin SetTag ( i , 0 ) ;
12767: LD_VAR 0 1
12771: PPUSH
12772: LD_INT 0
12774: PPUSH
12775: CALL_OW 109
// continue ;
12779: GO 12509
// end ; if IsInUnit ( i ) then
12781: LD_VAR 0 1
12785: PPUSH
12786: CALL_OW 310
12790: IFFALSE 12801
// ComExitBuilding ( i ) ;
12792: LD_VAR 0 1
12796: PPUSH
12797: CALL_OW 122
// if GetLives ( i ) < 650 then
12801: LD_VAR 0 1
12805: PPUSH
12806: CALL_OW 256
12810: PUSH
12811: LD_INT 650
12813: LESS
12814: IFFALSE 12830
// begin SetTag ( i , 2 ) ;
12816: LD_VAR 0 1
12820: PPUSH
12821: LD_INT 2
12823: PPUSH
12824: CALL_OW 109
// continue ;
12828: GO 12509
// end ; if b then
12830: LD_VAR 0 4
12834: IFFALSE 12860
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
12836: LD_VAR 0 1
12840: PPUSH
12841: LD_VAR 0 4
12845: PPUSH
12846: LD_VAR 0 1
12850: PPUSH
12851: CALL_OW 74
12855: PPUSH
12856: CALL_OW 130
// end ; 2 :
12860: GO 12948
12862: LD_INT 2
12864: DOUBLE
12865: EQUAL
12866: IFTRUE 12870
12868: GO 12947
12870: POP
// begin if GetLives ( i ) = 1000 then
12871: LD_VAR 0 1
12875: PPUSH
12876: CALL_OW 256
12880: PUSH
12881: LD_INT 1000
12883: EQUAL
12884: IFFALSE 12900
// begin SetTag ( i , 1 ) ;
12886: LD_VAR 0 1
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 109
// continue ;
12898: GO 12509
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
12900: LD_VAR 0 1
12904: PPUSH
12905: LD_INT 84
12907: PPUSH
12908: LD_INT 93
12910: PPUSH
12911: CALL_OW 297
12915: PUSH
12916: LD_INT 6
12918: GREATER
12919: IFFALSE 12945
// begin ComMoveXY ( i , 84 , 93 ) ;
12921: LD_VAR 0 1
12925: PPUSH
12926: LD_INT 84
12928: PPUSH
12929: LD_INT 93
12931: PPUSH
12932: CALL_OW 111
// AddComHold ( i ) ;
12936: LD_VAR 0 1
12940: PPUSH
12941: CALL_OW 200
// end ; end ; end ;
12945: GO 12948
12947: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
12948: LD_VAR 0 1
12952: PPUSH
12953: LD_INT 12
12955: PPUSH
12956: CALL_OW 308
12960: NOT
12961: PUSH
12962: LD_VAR 0 1
12966: PPUSH
12967: CALL_OW 310
12971: NOT
12972: AND
12973: IFFALSE 12990
// ComMoveXY ( i , 91 , 95 ) ;
12975: LD_VAR 0 1
12979: PPUSH
12980: LD_INT 91
12982: PPUSH
12983: LD_INT 95
12985: PPUSH
12986: CALL_OW 111
// end ;
12990: GO 12509
12992: POP
12993: POP
// end ; end ;
12994: PPOPN 13
12996: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
12997: LD_INT 0
12999: PPUSH
13000: PPUSH
13001: PPUSH
13002: PPUSH
13003: PPUSH
13004: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
13005: LD_ADDR_VAR 0 3
13009: PUSH
13010: DOUBLE
13011: LD_INT 1
13013: DEC
13014: ST_TO_ADDR
13015: LD_INT 3
13017: PUSH
13018: LD_INT 4
13020: PUSH
13021: LD_INT 5
13023: PUSH
13024: LD_INT 6
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: PUSH
13033: LD_OWVAR 67
13037: ARRAY
13038: PUSH
13039: LD_VAR 0 1
13043: PLUS
13044: PUSH
13045: FOR_TO
13046: IFFALSE 13363
// begin uc_side := 6 ;
13048: LD_ADDR_OWVAR 20
13052: PUSH
13053: LD_INT 6
13055: ST_TO_ADDR
// uc_nation := 3 ;
13056: LD_ADDR_OWVAR 21
13060: PUSH
13061: LD_INT 3
13063: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13064: LD_ADDR_VAR 0 6
13068: PUSH
13069: LD_INT 21
13071: PUSH
13072: LD_INT 22
13074: PUSH
13075: LD_INT 23
13077: PUSH
13078: LD_INT 24
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 1
13089: PPUSH
13090: LD_INT 4
13092: PPUSH
13093: CALL_OW 12
13097: ARRAY
13098: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13099: LD_ADDR_VAR 0 7
13103: PUSH
13104: LD_INT 42
13106: PUSH
13107: LD_INT 44
13109: PUSH
13110: LD_INT 43
13112: PUSH
13113: LD_INT 46
13115: PUSH
13116: LD_INT 45
13118: PUSH
13119: LD_INT 46
13121: PUSH
13122: LD_INT 45
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: PUSH
13134: LD_OWVAR 67
13138: PUSH
13139: LD_INT 0
13141: PPUSH
13142: LD_INT 3
13144: PPUSH
13145: CALL_OW 12
13149: PLUS
13150: ARRAY
13151: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13152: LD_VAR 0 6
13156: PUSH
13157: LD_INT 21
13159: PUSH
13160: LD_INT 22
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: IN
13167: PUSH
13168: LD_VAR 0 7
13172: PUSH
13173: LD_INT 46
13175: EQUAL
13176: AND
13177: IFFALSE 13206
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13179: LD_ADDR_VAR 0 7
13183: PUSH
13184: LD_INT 44
13186: PUSH
13187: LD_INT 45
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_INT 2
13199: PPUSH
13200: CALL_OW 12
13204: ARRAY
13205: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13206: LD_OWVAR 1
13210: PUSH
13211: LD_INT 31500
13213: PUSH
13214: LD_INT 27300
13216: PUSH
13217: LD_INT 23100
13219: PUSH
13220: LD_INT 18900
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: PUSH
13229: LD_OWVAR 67
13233: ARRAY
13234: LESS
13235: IFFALSE 13268
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13237: LD_ADDR_VAR 0 7
13241: PUSH
13242: LD_INT 44
13244: PUSH
13245: LD_INT 43
13247: PUSH
13248: LD_INT 42
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 1
13258: PPUSH
13259: LD_INT 3
13261: PPUSH
13262: CALL_OW 12
13266: ARRAY
13267: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13268: LD_VAR 0 6
13272: PPUSH
13273: LD_INT 1
13275: PPUSH
13276: LD_INT 3
13278: PPUSH
13279: LD_VAR 0 7
13283: PPUSH
13284: LD_INT 90
13286: PPUSH
13287: CALL 45114 0 5
// un := CreateVehicle ;
13291: LD_ADDR_VAR 0 4
13295: PUSH
13296: CALL_OW 45
13300: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13301: LD_VAR 0 4
13305: PPUSH
13306: LD_INT 140
13308: PPUSH
13309: LD_INT 146
13311: PPUSH
13312: LD_INT 0
13314: PPUSH
13315: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13319: LD_VAR 0 4
13323: PPUSH
13324: LD_INT 131
13326: PPUSH
13327: LD_INT 128
13329: PPUSH
13330: CALL_OW 111
// wait ( 0 0$3 ) ;
13334: LD_INT 105
13336: PPUSH
13337: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13341: LD_ADDR_VAR 0 5
13345: PUSH
13346: LD_VAR 0 5
13350: PPUSH
13351: LD_VAR 0 4
13355: PPUSH
13356: CALL 77595 0 2
13360: ST_TO_ADDR
// end ;
13361: GO 13045
13363: POP
13364: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13365: LD_ADDR_EXP 36
13369: PUSH
13370: LD_EXP 36
13374: PPUSH
13375: LD_VAR 0 5
13379: PPUSH
13380: CALL 77632 0 2
13384: ST_TO_ADDR
// end ;
13385: LD_VAR 0 2
13389: RET
// every 0 0$3 trigger russianAttackers do
13390: LD_EXP 36
13394: IFFALSE 13477
13396: GO 13398
13398: DISABLE
// begin enable ;
13399: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13400: LD_EXP 36
13404: PPUSH
13405: LD_INT 126
13407: PUSH
13408: LD_INT 108
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 107
13417: PUSH
13418: LD_INT 85
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 82
13427: PUSH
13428: LD_INT 62
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 73
13437: PUSH
13438: LD_INT 46
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 62
13447: PUSH
13448: LD_INT 31
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 52
13457: PUSH
13458: LD_INT 17
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: PPUSH
13473: CALL 80199 0 2
// end ; end_of_file
13477: END
// on SailEvent ( event ) do begin if event = 1 then
13478: LD_VAR 0 1
13482: PUSH
13483: LD_INT 1
13485: EQUAL
13486: IFFALSE 13501
// PrepareRussianAttack ( Difficulty + 3 ) ;
13488: LD_OWVAR 67
13492: PUSH
13493: LD_INT 3
13495: PLUS
13496: PPUSH
13497: CALL 12997 0 1
// end ;
13501: PPOPN 1
13503: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13504: LD_VAR 0 1
13508: PUSH
13509: LD_EXP 28
13513: EQUAL
13514: PUSH
13515: LD_VAR 0 2
13519: PUSH
13520: LD_INT 1
13522: EQUAL
13523: AND
13524: IFFALSE 13530
// SikorskiKilledInAction ;
13526: CALL 18647 0 0
// end ;
13530: PPOPN 3
13532: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13533: LD_INT 0
13535: PPUSH
13536: PPUSH
13537: PPUSH
13538: PPUSH
13539: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13540: LD_VAR 0 1
13544: PPUSH
13545: CALL 35985 0 1
// if un = JMM then
13549: LD_VAR 0 1
13553: PUSH
13554: LD_EXP 14
13558: EQUAL
13559: IFFALSE 13568
// YouLost ( JMM ) ;
13561: LD_STRING JMM
13563: PPUSH
13564: CALL_OW 104
// if un = Sikorski then
13568: LD_VAR 0 1
13572: PUSH
13573: LD_EXP 28
13577: EQUAL
13578: IFFALSE 13604
// if sikorskiStatus = 0 then
13580: LD_EXP 9
13584: PUSH
13585: LD_INT 0
13587: EQUAL
13588: IFFALSE 13596
// SikorskiKilledInAction else
13590: CALL 18647 0 0
13594: GO 13604
// sikorskiIsKilled := true ;
13596: LD_ADDR_EXP 10
13600: PUSH
13601: LD_INT 1
13603: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13604: LD_VAR 0 1
13608: PPUSH
13609: CALL_OW 255
13613: PUSH
13614: LD_INT 1
13616: EQUAL
13617: PUSH
13618: LD_VAR 0 1
13622: PPUSH
13623: CALL_OW 248
13627: PUSH
13628: LD_INT 1
13630: EQUAL
13631: AND
13632: PUSH
13633: LD_VAR 0 1
13637: PPUSH
13638: CALL_OW 266
13642: PUSH
13643: LD_INT 0
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: IN
13653: AND
13654: IFFALSE 13663
// YouLost ( Destroyed ) ;
13656: LD_STRING Destroyed
13658: PPUSH
13659: CALL_OW 104
// if un = ruDep then
13663: LD_VAR 0 1
13667: PUSH
13668: LD_INT 28
13670: EQUAL
13671: IFFALSE 13805
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
13673: LD_ADDR_VAR 0 2
13677: PUSH
13678: LD_INT 22
13680: PUSH
13681: LD_INT 3
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 25
13690: PUSH
13691: LD_INT 1
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PPUSH
13702: CALL_OW 69
13706: PUSH
13707: FOR_IN
13708: IFFALSE 13803
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
13710: LD_ADDR_VAR 0 3
13714: PUSH
13715: LD_INT 11
13717: PPUSH
13718: LD_INT 81
13720: PUSH
13721: LD_INT 3
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PPUSH
13728: CALL_OW 70
13732: PPUSH
13733: LD_VAR 0 2
13737: PPUSH
13738: CALL_OW 74
13742: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
13743: LD_VAR 0 2
13747: PPUSH
13748: CALL_OW 310
13752: PPUSH
13753: CALL_OW 266
13757: PUSH
13758: LD_INT 32
13760: EQUAL
13761: IFFALSE 13801
// begin ComExitBuilding ( i ) ;
13763: LD_VAR 0 2
13767: PPUSH
13768: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
13772: LD_VAR 0 2
13776: PPUSH
13777: LD_VAR 0 3
13781: PPUSH
13782: CALL_OW 250
13786: PPUSH
13787: LD_VAR 0 3
13791: PPUSH
13792: CALL_OW 251
13796: PPUSH
13797: CALL_OW 174
// end ; end ;
13801: GO 13707
13803: POP
13804: POP
// end ; if un in ruMobile then
13805: LD_VAR 0 1
13809: PUSH
13810: LD_EXP 34
13814: IN
13815: IFFALSE 13833
// ruMobile := ruMobile diff un ;
13817: LD_ADDR_EXP 34
13821: PUSH
13822: LD_EXP 34
13826: PUSH
13827: LD_VAR 0 1
13831: DIFF
13832: ST_TO_ADDR
// if GetSide ( un ) = 3 then
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 255
13842: PUSH
13843: LD_INT 3
13845: EQUAL
13846: IFFALSE 14481
// begin if GetType ( un ) = unit_building then
13848: LD_VAR 0 1
13852: PPUSH
13853: CALL_OW 247
13857: PUSH
13858: LD_INT 3
13860: EQUAL
13861: IFFALSE 13997
// begin btype := GetBType ( un ) ;
13863: LD_ADDR_VAR 0 6
13867: PUSH
13868: LD_VAR 0 1
13872: PPUSH
13873: CALL_OW 266
13877: ST_TO_ADDR
// if btype = b_warehouse then
13878: LD_VAR 0 6
13882: PUSH
13883: LD_INT 1
13885: EQUAL
13886: IFFALSE 13896
// btype := b_depot ;
13888: LD_ADDR_VAR 0 6
13892: PUSH
13893: LD_INT 0
13895: ST_TO_ADDR
// if btype = b_barracks then
13896: LD_VAR 0 6
13900: PUSH
13901: LD_INT 5
13903: EQUAL
13904: IFFALSE 13914
// btype := b_armoury ;
13906: LD_ADDR_VAR 0 6
13910: PUSH
13911: LD_INT 4
13913: ST_TO_ADDR
// if btype = b_lab_full then
13914: LD_VAR 0 6
13918: PUSH
13919: LD_INT 8
13921: EQUAL
13922: IFFALSE 13932
// btype := b_lab ;
13924: LD_ADDR_VAR 0 6
13928: PUSH
13929: LD_INT 6
13931: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
13932: LD_ADDR_EXP 35
13936: PUSH
13937: LD_EXP 35
13941: PPUSH
13942: LD_EXP 35
13946: PUSH
13947: LD_INT 1
13949: PLUS
13950: PPUSH
13951: LD_VAR 0 6
13955: PUSH
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 250
13965: PUSH
13966: LD_VAR 0 1
13970: PPUSH
13971: CALL_OW 251
13975: PUSH
13976: LD_VAR 0 1
13980: PPUSH
13981: CALL_OW 254
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: PPUSH
13992: CALL_OW 1
13996: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 247
14006: PUSH
14007: LD_INT 2
14009: EQUAL
14010: IFFALSE 14285
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
14012: LD_VAR 0 1
14016: PPUSH
14017: CALL_OW 264
14021: PUSH
14022: LD_INT 52
14024: PUSH
14025: LD_INT 51
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: IN
14032: IFFALSE 14062
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14034: LD_INT 29
14036: PPUSH
14037: LD_INT 22
14039: PPUSH
14040: LD_INT 1
14042: PPUSH
14043: LD_INT 3
14045: PPUSH
14046: LD_VAR 0 1
14050: PPUSH
14051: CALL_OW 264
14055: PPUSH
14056: CALL_OW 185
// end else
14060: GO 14285
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14062: LD_ADDR_VAR 0 4
14066: PUSH
14067: LD_INT 21
14069: PUSH
14070: LD_INT 22
14072: PUSH
14073: LD_INT 23
14075: PUSH
14076: LD_INT 24
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 1
14087: PPUSH
14088: LD_INT 4
14090: PPUSH
14091: CALL_OW 12
14095: ARRAY
14096: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14097: LD_ADDR_VAR 0 5
14101: PUSH
14102: LD_INT 42
14104: PUSH
14105: LD_INT 44
14107: PUSH
14108: LD_INT 43
14110: PUSH
14111: LD_INT 46
14113: PUSH
14114: LD_INT 45
14116: PUSH
14117: LD_INT 46
14119: PUSH
14120: LD_INT 45
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: PUSH
14132: LD_OWVAR 67
14136: PUSH
14137: LD_INT 0
14139: PPUSH
14140: LD_INT 3
14142: PPUSH
14143: CALL_OW 12
14147: PLUS
14148: ARRAY
14149: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14150: LD_VAR 0 4
14154: PUSH
14155: LD_INT 21
14157: PUSH
14158: LD_INT 22
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: IN
14165: PUSH
14166: LD_VAR 0 5
14170: PUSH
14171: LD_INT 46
14173: EQUAL
14174: AND
14175: IFFALSE 14204
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
14177: LD_ADDR_VAR 0 5
14181: PUSH
14182: LD_INT 44
14184: PUSH
14185: LD_INT 45
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 1
14194: PPUSH
14195: LD_INT 2
14197: PPUSH
14198: CALL_OW 12
14202: ARRAY
14203: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14204: LD_OWVAR 1
14208: PUSH
14209: LD_INT 31500
14211: PUSH
14212: LD_INT 27300
14214: PUSH
14215: LD_INT 23100
14217: PUSH
14218: LD_INT 21000
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: PUSH
14227: LD_OWVAR 67
14231: ARRAY
14232: LESS
14233: IFFALSE 14262
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14235: LD_ADDR_VAR 0 5
14239: PUSH
14240: LD_INT 44
14242: PUSH
14243: LD_INT 43
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 1
14252: PPUSH
14253: LD_INT 2
14255: PPUSH
14256: CALL_OW 12
14260: ARRAY
14261: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14262: LD_INT 29
14264: PPUSH
14265: LD_VAR 0 4
14269: PPUSH
14270: LD_INT 1
14272: PPUSH
14273: LD_INT 1
14275: PPUSH
14276: LD_VAR 0 5
14280: PPUSH
14281: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14285: LD_VAR 0 1
14289: PPUSH
14290: CALL_OW 257
14294: PUSH
14295: LD_INT 3
14297: EQUAL
14298: IFFALSE 14481
// begin killMechCounter := Inc ( killMechCounter ) ;
14300: LD_ADDR_EXP 12
14304: PUSH
14305: LD_EXP 12
14309: PPUSH
14310: CALL 78956 0 1
14314: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14315: LD_EXP 33
14319: PUSH
14320: LD_INT 0
14322: EQUAL
14323: PUSH
14324: LD_INT 29
14326: PPUSH
14327: CALL_OW 302
14331: NOT
14332: OR
14333: IFFALSE 14337
// exit ;
14335: GO 14481
// ruMechCounter := Dec ( ruMechCounter ) ;
14337: LD_ADDR_EXP 33
14341: PUSH
14342: LD_EXP 33
14346: PPUSH
14347: CALL 78978 0 1
14351: ST_TO_ADDR
// uc_side := 3 ;
14352: LD_ADDR_OWVAR 20
14356: PUSH
14357: LD_INT 3
14359: ST_TO_ADDR
// uc_nation := 3 ;
14360: LD_ADDR_OWVAR 21
14364: PUSH
14365: LD_INT 3
14367: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14368: LD_INT 0
14370: PPUSH
14371: LD_INT 5
14373: PUSH
14374: LD_INT 6
14376: PUSH
14377: LD_INT 7
14379: PUSH
14380: LD_INT 8
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: PUSH
14389: LD_OWVAR 67
14393: ARRAY
14394: PPUSH
14395: CALL_OW 383
// tmp := CreateHuman ;
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: CALL_OW 44
14408: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14409: LD_VAR 0 3
14413: PPUSH
14414: LD_INT 145
14416: PPUSH
14417: LD_INT 133
14419: PPUSH
14420: LD_INT 0
14422: PPUSH
14423: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14427: LD_VAR 0 3
14431: PPUSH
14432: LD_INT 29
14434: PPUSH
14435: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14439: LD_INT 35
14441: PPUSH
14442: CALL_OW 67
// if not HasTask ( tmp ) then
14446: LD_VAR 0 3
14450: PPUSH
14451: CALL_OW 314
14455: NOT
14456: IFFALSE 14470
// ComEnterUnit ( tmp , ruFac ) ;
14458: LD_VAR 0 3
14462: PPUSH
14463: LD_INT 29
14465: PPUSH
14466: CALL_OW 120
// until IsInUnit ( tmp ) ;
14470: LD_VAR 0 3
14474: PPUSH
14475: CALL_OW 310
14479: IFFALSE 14439
// end ; end ; end ;
14481: PPOPN 6
14483: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 255
14493: PUSH
14494: LD_INT 4
14496: EQUAL
14497: IFFALSE 14514
// ComMoveXY ( driver , 40 , 47 ) ;
14499: LD_VAR 0 1
14503: PPUSH
14504: LD_INT 40
14506: PPUSH
14507: LD_INT 47
14509: PPUSH
14510: CALL_OW 111
// if GetSide ( driver ) = 3 then
14514: LD_VAR 0 1
14518: PPUSH
14519: CALL_OW 255
14523: PUSH
14524: LD_INT 3
14526: EQUAL
14527: IFFALSE 14741
// begin ComMoveXY ( driver , 90 , 97 ) ;
14529: LD_VAR 0 1
14533: PPUSH
14534: LD_INT 90
14536: PPUSH
14537: LD_INT 97
14539: PPUSH
14540: CALL_OW 111
// if IsOk ( ruFac ) then
14544: LD_INT 29
14546: PPUSH
14547: CALL_OW 302
14551: IFFALSE 14665
// begin repeat wait ( 0 0$1 ) ;
14553: LD_INT 35
14555: PPUSH
14556: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14560: LD_INT 29
14562: PPUSH
14563: CALL_OW 313
14567: PUSH
14568: LD_INT 6
14570: LESS
14571: PUSH
14572: LD_VAR 0 1
14576: PPUSH
14577: CALL_OW 301
14581: OR
14582: IFFALSE 14553
// if IsDead ( driver ) then
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 301
14593: IFFALSE 14597
// exit ;
14595: GO 14741
// repeat wait ( 0 0$10 ) ;
14597: LD_INT 350
14599: PPUSH
14600: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 314
14613: NOT
14614: PUSH
14615: LD_INT 29
14617: PPUSH
14618: CALL_OW 313
14622: PUSH
14623: LD_INT 6
14625: LESS
14626: AND
14627: IFFALSE 14641
// ComEnterUnit ( driver , ruFac ) ;
14629: LD_VAR 0 1
14633: PPUSH
14634: LD_INT 29
14636: PPUSH
14637: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14641: LD_VAR 0 1
14645: PPUSH
14646: CALL_OW 301
14650: PUSH
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL_OW 310
14660: OR
14661: IFFALSE 14597
// end else
14663: GO 14741
// begin ComMoveXY ( driver , 142 , 148 ) ;
14665: LD_VAR 0 1
14669: PPUSH
14670: LD_INT 142
14672: PPUSH
14673: LD_INT 148
14675: PPUSH
14676: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14680: LD_INT 35
14682: PPUSH
14683: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 301
14696: PUSH
14697: LD_VAR 0 1
14701: PPUSH
14702: LD_INT 142
14704: PPUSH
14705: LD_INT 148
14707: PPUSH
14708: CALL_OW 307
14712: OR
14713: IFFALSE 14680
// if IsAt ( driver , 142 , 148 ) then
14715: LD_VAR 0 1
14719: PPUSH
14720: LD_INT 142
14722: PPUSH
14723: LD_INT 148
14725: PPUSH
14726: CALL_OW 307
14730: IFFALSE 14741
// RemoveUnit ( driver ) ;
14732: LD_VAR 0 1
14736: PPUSH
14737: CALL_OW 64
// end ; end ; end ;
14741: PPOPN 4
14743: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
14744: LD_VAR 0 2
14748: PPUSH
14749: CALL_OW 257
14753: PUSH
14754: LD_INT 3
14756: EQUAL
14757: PUSH
14758: LD_VAR 0 1
14762: PPUSH
14763: CALL_OW 255
14767: PUSH
14768: LD_INT 3
14770: EQUAL
14771: AND
14772: PUSH
14773: LD_VAR 0 1
14777: PUSH
14778: LD_INT 29
14780: EQUAL
14781: AND
14782: IFFALSE 14796
// SetLives ( un , 1000 ) ;
14784: LD_VAR 0 2
14788: PPUSH
14789: LD_INT 1000
14791: PPUSH
14792: CALL_OW 234
// if GetTag ( b ) = 701 then
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 110
14805: PUSH
14806: LD_INT 701
14808: EQUAL
14809: IFFALSE 14835
// begin SetTag ( b , 0 ) ;
14811: LD_VAR 0 1
14815: PPUSH
14816: LD_INT 0
14818: PPUSH
14819: CALL_OW 109
// SetTag ( un , 0 ) ;
14823: LD_VAR 0 2
14827: PPUSH
14828: LD_INT 0
14830: PPUSH
14831: CALL_OW 109
// end ; end ;
14835: PPOPN 2
14837: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
14838: LD_VAR 0 1
14842: PPUSH
14843: CALL_OW 255
14847: PUSH
14848: LD_INT 3
14850: PUSH
14851: LD_INT 6
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: IN
14858: PUSH
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 263
14868: PUSH
14869: LD_INT 3
14871: EQUAL
14872: AND
14873: PUSH
14874: LD_EXP 7
14878: NOT
14879: AND
14880: IFFALSE 14899
// begin seenComputer := true ;
14882: LD_ADDR_EXP 7
14886: PUSH
14887: LD_INT 1
14889: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
14890: LD_VAR 0 1
14894: PPUSH
14895: CALL 17838 0 1
// end ; end ;
14899: PPOPN 1
14901: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
14902: LD_INT 0
14904: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL 36105 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
14919: LD_VAR 0 1
14923: PPUSH
14924: CALL_OW 255
14928: PUSH
14929: LD_INT 3
14931: EQUAL
14932: PUSH
14933: LD_VAR 0 1
14937: PPUSH
14938: CALL_OW 263
14942: PUSH
14943: LD_INT 1
14945: EQUAL
14946: AND
14947: PUSH
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL_OW 264
14957: PUSH
14958: LD_INT 42
14960: PUSH
14961: LD_INT 43
14963: PUSH
14964: LD_INT 44
14966: PUSH
14967: LD_INT 46
14969: PUSH
14970: LD_INT 45
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: IN
14980: AND
14981: IFFALSE 15011
// begin SetTag ( vehicle , 300 ) ;
14983: LD_VAR 0 1
14987: PPUSH
14988: LD_INT 300
14990: PPUSH
14991: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
14995: LD_ADDR_EXP 34
14999: PUSH
15000: LD_EXP 34
15004: PUSH
15005: LD_VAR 0 1
15009: UNION
15010: ST_TO_ADDR
// end ; end ;
15011: PPOPN 3
15013: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
15014: LD_INT 0
15016: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15017: LD_VAR 0 2
15021: PPUSH
15022: LD_VAR 0 3
15026: PPUSH
15027: LD_INT 13
15029: PPUSH
15030: CALL_OW 309
15034: IFFALSE 15165
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15036: LD_ADDR_VAR 0 6
15040: PUSH
15041: LD_INT 22
15043: PUSH
15044: LD_INT 3
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 50
15053: PUSH
15054: EMPTY
15055: LIST
15056: PUSH
15057: LD_INT 34
15059: PUSH
15060: LD_INT 51
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: PPUSH
15072: CALL_OW 69
15076: ST_TO_ADDR
// if not cargo then
15077: LD_VAR 0 6
15081: NOT
15082: IFFALSE 15086
// exit ;
15084: GO 15165
// wait ( 0 0$5 ) ;
15086: LD_INT 175
15088: PPUSH
15089: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15093: LD_VAR 0 6
15097: PUSH
15098: LD_INT 1
15100: ARRAY
15101: PPUSH
15102: LD_INT 28
15104: PPUSH
15105: CALL_OW 296
15109: PUSH
15110: LD_INT 6
15112: LESS
15113: PUSH
15114: LD_VAR 0 6
15118: PUSH
15119: LD_INT 1
15121: ARRAY
15122: PPUSH
15123: CALL_OW 261
15127: PUSH
15128: LD_INT 50
15130: LESS
15131: AND
15132: IFFALSE 15146
// ComMoveUnit ( cargo , ruDep ) ;
15134: LD_VAR 0 6
15138: PPUSH
15139: LD_INT 28
15141: PPUSH
15142: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15146: LD_VAR 0 6
15150: PPUSH
15151: LD_VAR 0 2
15155: PPUSH
15156: LD_VAR 0 3
15160: PPUSH
15161: CALL_OW 177
// end ; end ;
15165: PPOPN 6
15167: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15168: LD_VAR 0 1
15172: PPUSH
15173: CALL_OW 264
15177: PUSH
15178: LD_INT 45
15180: EQUAL
15181: IFFALSE 15198
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15183: LD_ADDR_EXP 11
15187: PUSH
15188: LD_EXP 11
15192: PPUSH
15193: CALL 78956 0 1
15197: ST_TO_ADDR
// end ;
15198: PPOPN 4
15200: END
// on BuildingComplete ( b ) do var i , tmp ;
15201: LD_INT 0
15203: PPUSH
15204: PPUSH
// begin if GetSide ( b ) = 3 then
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 255
15214: PUSH
15215: LD_INT 3
15217: EQUAL
15218: IFFALSE 15315
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15220: LD_ADDR_EXP 35
15224: PUSH
15225: LD_EXP 35
15229: PPUSH
15230: LD_INT 1
15232: PPUSH
15233: CALL_OW 3
15237: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 266
15247: PUSH
15248: LD_INT 4
15250: EQUAL
15251: IFFALSE 15262
// ComUpgrade ( b ) ;
15253: LD_VAR 0 1
15257: PPUSH
15258: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15262: LD_VAR 0 1
15266: PPUSH
15267: CALL_OW 266
15271: PUSH
15272: LD_INT 32
15274: PUSH
15275: LD_INT 33
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: IN
15282: IFFALSE 15315
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15284: LD_VAR 0 1
15288: PPUSH
15289: LD_INT 46
15291: PUSH
15292: LD_INT 45
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: LD_INT 1
15301: PPUSH
15302: LD_INT 2
15304: PPUSH
15305: CALL_OW 12
15309: ARRAY
15310: PPUSH
15311: CALL_OW 208
// end ; end ; end_of_file
15315: PPOPN 3
15317: END
// export function Action ; var i , tmp , un , inUnit ; begin
15318: LD_INT 0
15320: PPUSH
15321: PPUSH
15322: PPUSH
15323: PPUSH
15324: PPUSH
// Video ( true ) ;
15325: LD_INT 1
15327: PPUSH
15328: CALL 77567 0 1
// invincibleMode := true ;
15332: LD_ADDR_EXP 5
15336: PUSH
15337: LD_INT 1
15339: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15340: LD_INT 50
15342: PPUSH
15343: LD_INT 12
15345: PPUSH
15346: LD_INT 1
15348: PPUSH
15349: LD_INT 56
15351: NEG
15352: PPUSH
15353: CALL 77481 0 4
// CenterOnXY ( 50 , 12 ) ;
15357: LD_INT 50
15359: PPUSH
15360: LD_INT 12
15362: PPUSH
15363: CALL_OW 84
// wait ( 0 0$3 ) ;
15367: LD_INT 105
15369: PPUSH
15370: CALL_OW 67
// PrepareStartRussianAttack ;
15374: CALL 10014 0 0
// CenterOnXY ( 66 , 47 ) ;
15378: LD_INT 66
15380: PPUSH
15381: LD_INT 47
15383: PPUSH
15384: CALL_OW 84
// wait ( 0 0$5 ) ;
15388: LD_INT 175
15390: PPUSH
15391: CALL_OW 67
// case gammaCommander of 1 :
15395: LD_EXP 13
15399: PUSH
15400: LD_INT 1
15402: DOUBLE
15403: EQUAL
15404: IFTRUE 15408
15406: GO 15423
15408: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15409: LD_EXP 16
15413: PPUSH
15414: LD_STRING D1-Don-1
15416: PPUSH
15417: CALL_OW 88
15421: GO 15470
15423: LD_INT 2
15425: DOUBLE
15426: EQUAL
15427: IFTRUE 15431
15429: GO 15446
15431: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15432: LD_EXP 15
15436: PPUSH
15437: LD_STRING D1-Brown-1
15439: PPUSH
15440: CALL_OW 88
15444: GO 15470
15446: LD_INT 3
15448: DOUBLE
15449: EQUAL
15450: IFTRUE 15454
15452: GO 15469
15454: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15455: LD_EXP 25
15459: PPUSH
15460: LD_STRING D1-VanH-1
15462: PPUSH
15463: CALL_OW 88
15467: GO 15470
15469: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15470: LD_ADDR_VAR 0 3
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 33
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: PUSH
15495: LD_INT 61
15497: PUSH
15498: EMPTY
15499: LIST
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: ST_TO_ADDR
// if tmp then
15511: LD_VAR 0 3
15515: IFFALSE 15532
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15517: LD_VAR 0 3
15521: PPUSH
15522: LD_INT 74
15524: PPUSH
15525: LD_INT 44
15527: PPUSH
15528: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15532: LD_ADDR_VAR 0 3
15536: PUSH
15537: LD_INT 22
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: LD_INT 25
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PPUSH
15561: CALL_OW 69
15565: PUSH
15566: LD_EXP 16
15570: PUSH
15571: LD_EXP 15
15575: PUSH
15576: LD_EXP 25
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: LIST
15585: DIFF
15586: ST_TO_ADDR
// if tmp then
15587: LD_VAR 0 3
15591: IFFALSE 15669
// for i in tmp do
15593: LD_ADDR_VAR 0 2
15597: PUSH
15598: LD_VAR 0 3
15602: PUSH
15603: FOR_IN
15604: IFFALSE 15667
// begin inUnit := IsInUnit ( i ) ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_VAR 0 2
15615: PPUSH
15616: CALL_OW 310
15620: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15621: LD_VAR 0 5
15625: PUSH
15626: LD_VAR 0 5
15630: PPUSH
15631: CALL_OW 266
15635: PUSH
15636: LD_INT 32
15638: PUSH
15639: LD_INT 31
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: IN
15646: AND
15647: IFFALSE 15665
// tmp := tmp diff i ;
15649: LD_ADDR_VAR 0 3
15653: PUSH
15654: LD_VAR 0 3
15658: PUSH
15659: LD_VAR 0 2
15663: DIFF
15664: ST_TO_ADDR
// end ;
15665: GO 15603
15667: POP
15668: POP
// if tmp then
15669: LD_VAR 0 3
15673: IFFALSE 15763
// begin ComExitAll ( tmp ) ;
15675: LD_VAR 0 3
15679: PPUSH
15680: CALL 78076 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
15684: LD_VAR 0 3
15688: PPUSH
15689: LD_INT 74
15691: PPUSH
15692: LD_INT 44
15694: PPUSH
15695: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
15699: LD_ADDR_VAR 0 3
15703: PUSH
15704: LD_INT 22
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 25
15716: PUSH
15717: LD_INT 4
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PPUSH
15728: CALL_OW 69
15732: ST_TO_ADDR
// if tmp then
15733: LD_VAR 0 3
15737: IFFALSE 15763
// begin ComExitAll ( tmp ) ;
15739: LD_VAR 0 3
15743: PPUSH
15744: CALL 78076 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_INT 66
15755: PPUSH
15756: LD_INT 28
15758: PPUSH
15759: CALL_OW 171
// end ; end ; game_speed := 4 ;
15763: LD_ADDR_OWVAR 65
15767: PUSH
15768: LD_INT 4
15770: ST_TO_ADDR
// wait ( 0 0$2 ) ;
15771: LD_INT 70
15773: PPUSH
15774: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
15778: LD_EXP 29
15782: PPUSH
15783: LD_STRING D1-Har-1
15785: PPUSH
15786: CALL_OW 94
// case gammaCommander of 1 :
15790: LD_EXP 13
15794: PUSH
15795: LD_INT 1
15797: DOUBLE
15798: EQUAL
15799: IFTRUE 15803
15801: GO 15818
15803: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
15804: LD_EXP 16
15808: PPUSH
15809: LD_STRING D1-Don-2
15811: PPUSH
15812: CALL_OW 88
15816: GO 15865
15818: LD_INT 2
15820: DOUBLE
15821: EQUAL
15822: IFTRUE 15826
15824: GO 15841
15826: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
15827: LD_EXP 15
15831: PPUSH
15832: LD_STRING D1-Brown-2
15834: PPUSH
15835: CALL_OW 88
15839: GO 15865
15841: LD_INT 3
15843: DOUBLE
15844: EQUAL
15845: IFTRUE 15849
15847: GO 15864
15849: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
15850: LD_EXP 25
15854: PPUSH
15855: LD_STRING D1-VanH-2
15857: PPUSH
15858: CALL_OW 88
15862: GO 15865
15864: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
15865: LD_EXP 29
15869: PPUSH
15870: LD_STRING D1-Har-2
15872: PPUSH
15873: CALL_OW 94
// invincibleMode := false ;
15877: LD_ADDR_EXP 5
15881: PUSH
15882: LD_INT 0
15884: ST_TO_ADDR
// Video ( false ) ;
15885: LD_INT 0
15887: PPUSH
15888: CALL 77567 0 1
// ChangeMissionObjectives ( M1 ) ;
15892: LD_STRING M1
15894: PPUSH
15895: CALL_OW 337
// SaveForQuickRestart ;
15899: CALL_OW 22
// wait ( 2 2$30 ) ;
15903: LD_INT 5250
15905: PPUSH
15906: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
15910: LD_INT 1
15912: PPUSH
15913: CALL 12997 0 1
// wait ( 4 4$30 ) ;
15917: LD_INT 9450
15919: PPUSH
15920: CALL_OW 67
// if Difficulty > 1 then
15924: LD_OWVAR 67
15928: PUSH
15929: LD_INT 1
15931: GREATER
15932: IFFALSE 15941
// PrepareRussianAttack ( 2 ) ;
15934: LD_INT 2
15936: PPUSH
15937: CALL 12997 0 1
// if Difficulty > 2 then
15941: LD_OWVAR 67
15945: PUSH
15946: LD_INT 2
15948: GREATER
15949: IFFALSE 16108
// begin for i := 1 to 4 do
15951: LD_ADDR_VAR 0 2
15955: PUSH
15956: DOUBLE
15957: LD_INT 1
15959: DEC
15960: ST_TO_ADDR
15961: LD_INT 4
15963: PUSH
15964: FOR_TO
15965: IFFALSE 16050
// begin uc_side := 6 ;
15967: LD_ADDR_OWVAR 20
15971: PUSH
15972: LD_INT 6
15974: ST_TO_ADDR
// uc_nation := 3 ;
15975: LD_ADDR_OWVAR 21
15979: PUSH
15980: LD_INT 3
15982: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
15983: LD_INT 0
15985: PPUSH
15986: LD_INT 7
15988: PPUSH
15989: CALL_OW 381
// un := CreateHuman ;
15993: LD_ADDR_VAR 0 4
15997: PUSH
15998: CALL_OW 44
16002: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16003: LD_VAR 0 4
16007: PPUSH
16008: LD_INT 122
16010: PPUSH
16011: LD_INT 89
16013: PPUSH
16014: LD_INT 3
16016: PPUSH
16017: LD_INT 0
16019: PPUSH
16020: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16024: LD_VAR 0 4
16028: PPUSH
16029: LD_INT 88
16031: PPUSH
16032: LD_INT 42
16034: PPUSH
16035: CALL_OW 114
// AddComHold ( un ) ;
16039: LD_VAR 0 4
16043: PPUSH
16044: CALL_OW 200
// end ;
16048: GO 15964
16050: POP
16051: POP
// PrepareScientist ( false , 6 ) ;
16052: LD_INT 0
16054: PPUSH
16055: LD_INT 6
16057: PPUSH
16058: CALL_OW 384
// un := CreateHuman ;
16062: LD_ADDR_VAR 0 4
16066: PUSH
16067: CALL_OW 44
16071: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16072: LD_VAR 0 4
16076: PPUSH
16077: LD_INT 122
16079: PPUSH
16080: LD_INT 89
16082: PPUSH
16083: LD_INT 3
16085: PPUSH
16086: LD_INT 0
16088: PPUSH
16089: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16093: LD_VAR 0 4
16097: PPUSH
16098: LD_INT 91
16100: PPUSH
16101: LD_INT 48
16103: PPUSH
16104: CALL_OW 111
// end ; end ;
16108: LD_VAR 0 1
16112: RET
// every 0 0$1 trigger invincibleMode do var i ;
16113: LD_EXP 5
16117: IFFALSE 16214
16119: GO 16121
16121: DISABLE
16122: LD_INT 0
16124: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16125: LD_ADDR_VAR 0 1
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_INT 1
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 2
16142: PUSH
16143: LD_INT 21
16145: PUSH
16146: LD_INT 3
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 21
16155: PUSH
16156: LD_INT 1
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 3
16170: PUSH
16171: LD_INT 24
16173: PUSH
16174: LD_INT 900
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: PPUSH
16190: CALL_OW 69
16194: PUSH
16195: FOR_IN
16196: IFFALSE 16212
// SetLives ( i , 900 ) ;
16198: LD_VAR 0 1
16202: PPUSH
16203: LD_INT 900
16205: PPUSH
16206: CALL_OW 234
16210: GO 16195
16212: POP
16213: POP
// end ;
16214: PPOPN 1
16216: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16217: LD_OWVAR 1
16221: PUSH
16222: LD_INT 14700
16224: GREATER
16225: IFFALSE 17835
16227: GO 16229
16229: DISABLE
16230: LD_INT 0
16232: PPUSH
16233: PPUSH
// begin PrepareSupportFromDelta ;
16234: CALL 4052 0 0
// deltaSupport := true ;
16238: LD_ADDR_EXP 6
16242: PUSH
16243: LD_INT 1
16245: ST_TO_ADDR
// dialog := false ;
16246: LD_ADDR_VAR 0 1
16250: PUSH
16251: LD_INT 0
16253: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16254: LD_EXP 21
16258: PPUSH
16259: CALL_OW 302
16263: IFFALSE 16285
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16265: LD_ADDR_VAR 0 1
16269: PUSH
16270: LD_EXP 21
16274: PPUSH
16275: LD_STRING D2-Glad-1
16277: PPUSH
16278: CALL_OW 88
16282: ST_TO_ADDR
16283: GO 16367
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16285: LD_ADDR_VAR 0 1
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 120
16302: PUSH
16303: LD_INT 107
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 21
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 23
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: PPUSH
16336: CALL_OW 69
16340: PUSH
16341: LD_EXP 27
16345: PUSH
16346: LD_EXP 26
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: DIFF
16355: PPUSH
16356: LD_STRING D2-Sol1-1
16358: PPUSH
16359: LD_STRING D2-FSol1-1
16361: PPUSH
16362: CALL 20040 0 3
16366: ST_TO_ADDR
// if dialog then
16367: LD_VAR 0 1
16371: IFFALSE 16472
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16373: LD_EXP 16
16377: PPUSH
16378: CALL_OW 302
16382: PUSH
16383: LD_EXP 13
16387: PUSH
16388: LD_INT 1
16390: EQUAL
16391: AND
16392: IFFALSE 16406
// Say ( Donaldson , D2-Don-1 ) ;
16394: LD_EXP 16
16398: PPUSH
16399: LD_STRING D2-Don-1
16401: PPUSH
16402: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16406: LD_EXP 15
16410: PPUSH
16411: CALL_OW 302
16415: PUSH
16416: LD_EXP 13
16420: PUSH
16421: LD_INT 2
16423: EQUAL
16424: AND
16425: IFFALSE 16439
// Say ( Brown , D2-Brown-1 ) ;
16427: LD_EXP 15
16431: PPUSH
16432: LD_STRING D2-Brown-1
16434: PPUSH
16435: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16439: LD_EXP 25
16443: PPUSH
16444: CALL_OW 302
16448: PUSH
16449: LD_EXP 13
16453: PUSH
16454: LD_INT 3
16456: EQUAL
16457: AND
16458: IFFALSE 16472
// Say ( Houten , D2-VanH-1 ) ;
16460: LD_EXP 25
16464: PPUSH
16465: LD_STRING D2-VanH-1
16467: PPUSH
16468: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16472: LD_INT 3
16474: PPUSH
16475: CALL 12997 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16479: LD_STRING 07_time
16481: PPUSH
16482: LD_INT 18900
16484: PPUSH
16485: CALL_OW 30
16489: PUSH
16490: LD_INT 3
16492: DIV
16493: PPUSH
16494: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16498: LD_INT 34
16500: PPUSH
16501: LD_INT 1
16503: PPUSH
16504: CALL_OW 321
16508: PUSH
16509: LD_INT 2
16511: EQUAL
16512: IFFALSE 16521
// SetAchievement ( ACH_HEAVYGUN ) ;
16514: LD_STRING ACH_HEAVYGUN
16516: PPUSH
16517: CALL_OW 543
// PrepareMacmillanSquad ;
16521: CALL 4826 0 0
// wait ( 0 0$1 ) ;
16525: LD_INT 35
16527: PPUSH
16528: CALL_OW 67
// DialogueOn ;
16532: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16536: LD_EXP 14
16540: PPUSH
16541: CALL_OW 87
// dwait ( 0 0$2 ) ;
16545: LD_INT 70
16547: PPUSH
16548: CALL_OW 68
// DialogueOff ;
16552: CALL_OW 7
// wait ( 0 0$10 ) ;
16556: LD_INT 350
16558: PPUSH
16559: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16563: LD_INT 1
16565: PPUSH
16566: CALL_OW 427
// p := 0 ;
16570: LD_ADDR_VAR 0 2
16574: PUSH
16575: LD_INT 0
16577: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16578: LD_INT 35
16580: PPUSH
16581: CALL_OW 67
// p := Inc ( p ) ;
16585: LD_ADDR_VAR 0 2
16589: PUSH
16590: LD_VAR 0 2
16594: PPUSH
16595: CALL 78956 0 1
16599: ST_TO_ADDR
// if p > 300 then
16600: LD_VAR 0 2
16604: PUSH
16605: LD_INT 300
16607: GREATER
16608: IFFALSE 16612
// exit ;
16610: GO 17835
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16612: LD_EXP 14
16616: PPUSH
16617: LD_INT 15
16619: PPUSH
16620: CALL_OW 308
16624: PUSH
16625: LD_EXP 14
16629: PPUSH
16630: CALL_OW 310
16634: PPUSH
16635: LD_INT 15
16637: PPUSH
16638: CALL_OW 308
16642: OR
16643: PUSH
16644: LD_EXP 14
16648: PPUSH
16649: LD_EXP 27
16653: PPUSH
16654: CALL_OW 296
16658: PUSH
16659: LD_INT 10
16661: LESS
16662: OR
16663: PUSH
16664: LD_INT 22
16666: PUSH
16667: LD_INT 1
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 2
16676: PUSH
16677: LD_INT 120
16679: PUSH
16680: LD_INT 106
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 120
16689: PUSH
16690: LD_INT 107
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 91
16704: PUSH
16705: LD_EXP 14
16709: PUSH
16710: LD_INT 12
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: PPUSH
16723: CALL_OW 69
16727: OR
16728: IFFALSE 16578
// DialogueOn ;
16730: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
16734: LD_EXP 14
16738: PPUSH
16739: LD_STRING D3-JMM-1
16741: PPUSH
16742: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
16746: LD_EXP 16
16750: PPUSH
16751: CALL_OW 302
16755: PUSH
16756: LD_EXP 13
16760: PUSH
16761: LD_INT 1
16763: EQUAL
16764: AND
16765: IFFALSE 16781
// Say ( Donaldson , D3-Don-1 ) else
16767: LD_EXP 16
16771: PPUSH
16772: LD_STRING D3-Don-1
16774: PPUSH
16775: CALL_OW 88
16779: GO 16877
// begin if gammaCommander = 1 then
16781: LD_EXP 13
16785: PUSH
16786: LD_INT 1
16788: EQUAL
16789: IFFALSE 16877
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
16791: LD_INT 22
16793: PUSH
16794: LD_INT 1
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 21
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 23
16813: PUSH
16814: LD_INT 1
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 120
16823: PUSH
16824: LD_INT 106
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 26
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: PPUSH
16848: CALL_OW 69
16852: PPUSH
16853: LD_STRING D3-Sol1-1
16855: PPUSH
16856: LD_STRING 
16858: PPUSH
16859: CALL 20040 0 3
16863: IFFALSE 16877
// Say ( JMM , D3-JMM-2 ) ;
16865: LD_EXP 14
16869: PPUSH
16870: LD_STRING D3-JMM-2
16872: PPUSH
16873: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
16877: LD_EXP 15
16881: PPUSH
16882: CALL_OW 302
16886: PUSH
16887: LD_EXP 13
16891: PUSH
16892: LD_INT 2
16894: EQUAL
16895: AND
16896: IFFALSE 16912
// Say ( Brown , D3-Brown-1 ) else
16898: LD_EXP 15
16902: PPUSH
16903: LD_STRING D3-Brown-1
16905: PPUSH
16906: CALL_OW 88
16910: GO 17008
// begin if gammaCommander = 2 then
16912: LD_EXP 13
16916: PUSH
16917: LD_INT 2
16919: EQUAL
16920: IFFALSE 17008
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
16922: LD_INT 22
16924: PUSH
16925: LD_INT 1
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 21
16934: PUSH
16935: LD_INT 1
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 23
16944: PUSH
16945: LD_INT 1
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 120
16954: PUSH
16955: LD_INT 106
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 26
16964: PUSH
16965: LD_INT 1
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: PPUSH
16979: CALL_OW 69
16983: PPUSH
16984: LD_STRING D3-Sol1-1a
16986: PPUSH
16987: LD_STRING 
16989: PPUSH
16990: CALL 20040 0 3
16994: IFFALSE 17008
// Say ( JMM , D3-JMM-2 ) ;
16996: LD_EXP 14
17000: PPUSH
17001: LD_STRING D3-JMM-2
17003: PPUSH
17004: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17008: LD_EXP 25
17012: PPUSH
17013: CALL_OW 302
17017: PUSH
17018: LD_EXP 13
17022: PUSH
17023: LD_INT 3
17025: EQUAL
17026: AND
17027: IFFALSE 17043
// Say ( Houten , D3-VanH-1 ) else
17029: LD_EXP 25
17033: PPUSH
17034: LD_STRING D3-VanH-1
17036: PPUSH
17037: CALL_OW 88
17041: GO 17139
// begin if gammaCommander = 3 then
17043: LD_EXP 13
17047: PUSH
17048: LD_INT 3
17050: EQUAL
17051: IFFALSE 17139
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17053: LD_INT 22
17055: PUSH
17056: LD_INT 1
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 21
17065: PUSH
17066: LD_INT 1
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 23
17075: PUSH
17076: LD_INT 1
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 120
17085: PUSH
17086: LD_INT 106
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 26
17095: PUSH
17096: LD_INT 1
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 69
17114: PPUSH
17115: LD_STRING D3-Sol1-1b
17117: PPUSH
17118: LD_STRING 
17120: PPUSH
17121: CALL 20040 0 3
17125: IFFALSE 17139
// Say ( JMM , D3-JMM-2 ) ;
17127: LD_EXP 14
17131: PPUSH
17132: LD_STRING D3-JMM-2
17134: PPUSH
17135: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17139: LD_EXP 27
17143: PPUSH
17144: CALL_OW 302
17148: IFFALSE 17176
// begin Say ( Joan , D3a-Joan-1 ) ;
17150: LD_EXP 27
17154: PPUSH
17155: LD_STRING D3a-Joan-1
17157: PPUSH
17158: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17162: LD_EXP 14
17166: PPUSH
17167: LD_STRING D3a-JMM-1
17169: PPUSH
17170: CALL_OW 88
// end else
17174: GO 17610
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17176: LD_STRING 06_JoanStatus_1
17178: PPUSH
17179: LD_INT 0
17181: PPUSH
17182: CALL_OW 30
17186: PUSH
17187: LD_INT 1
17189: EQUAL
17190: IFFALSE 17610
// begin Say ( JMM , D3b-JMM-1 ) ;
17192: LD_EXP 14
17196: PPUSH
17197: LD_STRING D3b-JMM-1
17199: PPUSH
17200: CALL_OW 88
// dialog := false ;
17204: LD_ADDR_VAR 0 1
17208: PUSH
17209: LD_INT 0
17211: ST_TO_ADDR
// if gammaCommander = 1 then
17212: LD_EXP 13
17216: PUSH
17217: LD_INT 1
17219: EQUAL
17220: IFFALSE 17331
// if IsOK ( Donaldson ) then
17222: LD_EXP 16
17226: PPUSH
17227: CALL_OW 302
17231: IFFALSE 17253
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17233: LD_ADDR_VAR 0 1
17237: PUSH
17238: LD_EXP 16
17242: PPUSH
17243: LD_STRING D3b-Don-1
17245: PPUSH
17246: CALL_OW 88
17250: ST_TO_ADDR
17251: GO 17331
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17253: LD_ADDR_VAR 0 1
17257: PUSH
17258: LD_INT 22
17260: PUSH
17261: LD_INT 1
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 21
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 23
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 120
17290: PUSH
17291: LD_INT 106
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 26
17300: PUSH
17301: LD_INT 1
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: PPUSH
17320: LD_STRING D3b-Sol1-1
17322: PPUSH
17323: LD_STRING 
17325: PPUSH
17326: CALL 20040 0 3
17330: ST_TO_ADDR
// if gammaCommander = 2 then
17331: LD_EXP 13
17335: PUSH
17336: LD_INT 2
17338: EQUAL
17339: IFFALSE 17450
// if IsOk ( Brown ) then
17341: LD_EXP 15
17345: PPUSH
17346: CALL_OW 302
17350: IFFALSE 17372
// dialog := Say ( Brown , D3b-Brown-1 ) else
17352: LD_ADDR_VAR 0 1
17356: PUSH
17357: LD_EXP 15
17361: PPUSH
17362: LD_STRING D3b-Brown-1
17364: PPUSH
17365: CALL_OW 88
17369: ST_TO_ADDR
17370: GO 17450
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17372: LD_ADDR_VAR 0 1
17376: PUSH
17377: LD_INT 22
17379: PUSH
17380: LD_INT 1
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 21
17389: PUSH
17390: LD_INT 1
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 23
17399: PUSH
17400: LD_INT 1
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 120
17409: PUSH
17410: LD_INT 106
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 26
17419: PUSH
17420: LD_INT 1
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: PPUSH
17434: CALL_OW 69
17438: PPUSH
17439: LD_STRING D3b-Sol1-1
17441: PPUSH
17442: LD_STRING 
17444: PPUSH
17445: CALL 20040 0 3
17449: ST_TO_ADDR
// if gammaCommander = 3 then
17450: LD_EXP 13
17454: PUSH
17455: LD_INT 3
17457: EQUAL
17458: IFFALSE 17569
// if IsOk ( Houten ) then
17460: LD_EXP 25
17464: PPUSH
17465: CALL_OW 302
17469: IFFALSE 17491
// dialog := Say ( Houten , D3b-VanH-1 ) else
17471: LD_ADDR_VAR 0 1
17475: PUSH
17476: LD_EXP 25
17480: PPUSH
17481: LD_STRING D3b-VanH-1
17483: PPUSH
17484: CALL_OW 88
17488: ST_TO_ADDR
17489: GO 17569
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17491: LD_ADDR_VAR 0 1
17495: PUSH
17496: LD_INT 22
17498: PUSH
17499: LD_INT 1
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: LD_INT 21
17508: PUSH
17509: LD_INT 1
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 23
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 120
17528: PUSH
17529: LD_INT 106
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 26
17538: PUSH
17539: LD_INT 1
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: PPUSH
17553: CALL_OW 69
17557: PPUSH
17558: LD_STRING D3b-Sol1-1
17560: PPUSH
17561: LD_STRING 
17563: PPUSH
17564: CALL 20040 0 3
17568: ST_TO_ADDR
// if dialog then
17569: LD_VAR 0 1
17573: IFFALSE 17610
// begin Say ( JMM , D3b-JMM-2 ) ;
17575: LD_EXP 14
17579: PPUSH
17580: LD_STRING D3b-JMM-2
17582: PPUSH
17583: CALL_OW 88
// if IsOK ( Lisa ) then
17587: LD_EXP 19
17591: PPUSH
17592: CALL_OW 302
17596: IFFALSE 17610
// Say ( Lisa , D3b-Lisa-2 ) ;
17598: LD_EXP 19
17602: PPUSH
17603: LD_STRING D3b-Lisa-2
17605: PPUSH
17606: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17610: LD_EXP 7
17614: NOT
17615: IFFALSE 17623
// begin DialogueOff ;
17617: CALL_OW 7
// exit ;
17621: GO 17835
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17623: LD_INT 22
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 21
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 23
17645: PUSH
17646: LD_INT 1
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 2
17655: PUSH
17656: LD_INT 120
17658: PUSH
17659: LD_INT 106
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 120
17668: PUSH
17669: LD_INT 107
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 26
17683: PUSH
17684: LD_INT 1
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: PPUSH
17698: CALL_OW 69
17702: PPUSH
17703: LD_STRING DCa-Sol1-1
17705: PPUSH
17706: LD_STRING 
17708: PPUSH
17709: CALL 20040 0 3
17713: IFFALSE 17727
// Say ( JMM , DCb-JMM-1 ) ;
17715: LD_EXP 14
17719: PPUSH
17720: LD_STRING DCb-JMM-1
17722: PPUSH
17723: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
17727: LD_INT 22
17729: PUSH
17730: LD_INT 1
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 21
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 23
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 2
17759: PUSH
17760: LD_INT 120
17762: PUSH
17763: LD_INT 106
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 120
17772: PUSH
17773: LD_INT 107
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 26
17787: PUSH
17788: LD_INT 1
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 69
17806: PPUSH
17807: LD_STRING DCb-Sol1-1
17809: PPUSH
17810: LD_STRING 
17812: PPUSH
17813: CALL 20040 0 3
17817: IFFALSE 17831
// Say ( JMM , DCb-JMM-2 ) ;
17819: LD_EXP 14
17823: PPUSH
17824: LD_STRING DCb-JMM-2
17826: PPUSH
17827: CALL_OW 88
// DialogueOff ;
17831: CALL_OW 7
// end ;
17835: PPOPN 2
17837: END
// export function DialogSeenComputer ( un ) ; begin
17838: LD_INT 0
17840: PPUSH
// if jmmArrival then
17841: LD_EXP 8
17845: IFFALSE 17849
// exit ;
17847: GO 17915
// CenterOnUnits ( un ) ;
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
17858: LD_INT 22
17860: PUSH
17861: LD_INT 1
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: LD_INT 120
17873: PUSH
17874: LD_INT 106
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 120
17883: PUSH
17884: LD_INT 107
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PPUSH
17900: CALL_OW 69
17904: PPUSH
17905: LD_STRING DC-Sol1-1
17907: PPUSH
17908: LD_STRING DC-FSol1-1
17910: PPUSH
17911: CALL 20040 0 3
// end ;
17915: LD_VAR 0 2
17919: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
17920: LD_EXP 8
17924: PUSH
17925: LD_OWVAR 1
17929: PUSH
17930: LD_INT 48300
17932: GREATEREQUAL
17933: AND
17934: PUSH
17935: LD_EXP 14
17939: PPUSH
17940: CALL_OW 302
17944: AND
17945: IFFALSE 18431
17947: GO 17949
17949: DISABLE
// begin wait ( 2 2$00 ) ;
17950: LD_INT 4200
17952: PPUSH
17953: CALL_OW 67
// DialogueOn ;
17957: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
17961: LD_EXP 30
17965: PPUSH
17966: LD_STRING D4-Pow-1
17968: PPUSH
17969: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
17973: LD_EXP 14
17977: PPUSH
17978: LD_STRING D4-JMM-1
17980: PPUSH
17981: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
17985: LD_EXP 30
17989: PPUSH
17990: LD_STRING D4-Pow-2
17992: PPUSH
17993: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
17997: LD_EXP 14
18001: PPUSH
18002: LD_STRING D4-JMM-2
18004: PPUSH
18005: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18009: LD_EXP 30
18013: PPUSH
18014: LD_STRING D4-Pow-3
18016: PPUSH
18017: CALL_OW 94
// DialogueOff ;
18021: CALL_OW 7
// wait ( 1 1$00 ) ;
18025: LD_INT 2100
18027: PPUSH
18028: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18032: LD_INT 1
18034: PPUSH
18035: CALL_OW 427
// wait ( 7 7$30 ) ;
18039: LD_INT 15750
18041: PPUSH
18042: CALL_OW 67
// DialogueOn ;
18046: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18050: LD_EXP 30
18054: PPUSH
18055: LD_STRING D4a-Pow-1
18057: PPUSH
18058: CALL_OW 94
// DialogueOff ;
18062: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18066: LD_INT 1
18068: PPUSH
18069: CALL_OW 427
// SikorskiCounter ;
18073: CALL 19824 0 0
// PrepareSikorsky ;
18077: CALL 6238 0 0
// CenterNowOnUnits ( Sikorski ) ;
18081: LD_EXP 28
18085: PPUSH
18086: CALL_OW 87
// DialogueOn ;
18090: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18094: LD_EXP 28
18098: PPUSH
18099: LD_STRING D5-Sik-1
18101: PPUSH
18102: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18106: LD_INT 11
18108: PPUSH
18109: LD_INT 22
18111: PUSH
18112: LD_INT 1
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PPUSH
18119: CALL_OW 70
18123: PUSH
18124: LD_INT 1
18126: GREATER
18127: PUSH
18128: LD_INT 28
18130: PPUSH
18131: CALL_OW 302
18135: NOT
18136: OR
18137: PUSH
18138: LD_INT 28
18140: PPUSH
18141: CALL_OW 255
18145: PUSH
18146: LD_INT 1
18148: EQUAL
18149: OR
18150: IFFALSE 18202
// begin Say ( JMM , D5-JMM-1 ) ;
18152: LD_EXP 14
18156: PPUSH
18157: LD_STRING D5-JMM-1
18159: PPUSH
18160: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18164: LD_EXP 28
18168: PPUSH
18169: LD_STRING D7a-Sik-1
18171: PPUSH
18172: CALL_OW 88
// DialogueOff ;
18176: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18180: LD_STRING M2
18182: PPUSH
18183: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18187: LD_INT 1
18189: PPUSH
18190: CALL_OW 427
// SikorskiAttack ;
18194: CALL 7861 0 0
// exit ;
18198: GO 18431
// end else
18200: GO 18247
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18202: LD_INT 15
18204: PPUSH
18205: LD_INT 81
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PPUSH
18215: CALL_OW 70
18219: IFFALSE 18235
// Say ( JMM , D5-JMM-1b ) else
18221: LD_EXP 14
18225: PPUSH
18226: LD_STRING D5-JMM-1b
18228: PPUSH
18229: CALL_OW 88
18233: GO 18247
// Say ( JMM , D5-JMM-1a ) ;
18235: LD_EXP 14
18239: PPUSH
18240: LD_STRING D5-JMM-1a
18242: PPUSH
18243: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18247: LD_EXP 28
18251: PPUSH
18252: LD_STRING D5-Sik-2
18254: PPUSH
18255: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18259: LD_STRING QSikorski
18261: PPUSH
18262: CALL_OW 97
18266: PUSH
18267: LD_INT 1
18269: DOUBLE
18270: EQUAL
18271: IFTRUE 18275
18273: GO 18298
18275: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18276: LD_EXP 28
18280: PPUSH
18281: LD_STRING D5a-Sik-1
18283: PPUSH
18284: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18288: LD_ADDR_EXP 4
18292: PUSH
18293: LD_INT 2100
18295: ST_TO_ADDR
// end ; 2 :
18296: GO 18385
18298: LD_INT 2
18300: DOUBLE
18301: EQUAL
18302: IFTRUE 18306
18304: GO 18329
18306: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18307: LD_EXP 28
18311: PPUSH
18312: LD_STRING D5b-Sik-1
18314: PPUSH
18315: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18319: LD_ADDR_EXP 4
18323: PUSH
18324: LD_INT 10500
18326: ST_TO_ADDR
// end ; 3 :
18327: GO 18385
18329: LD_INT 3
18331: DOUBLE
18332: EQUAL
18333: IFTRUE 18337
18335: GO 18384
18337: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18338: LD_EXP 28
18342: PPUSH
18343: LD_STRING D5c-Sik-1
18345: PPUSH
18346: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18350: LD_EXP 14
18354: PPUSH
18355: LD_STRING D5c-JMM-1
18357: PPUSH
18358: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18362: LD_EXP 28
18366: PPUSH
18367: LD_STRING D5c-Sik-2
18369: PPUSH
18370: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18374: LD_ADDR_EXP 4
18378: PUSH
18379: LD_INT 10500
18381: ST_TO_ADDR
// end ; end ;
18382: GO 18385
18384: POP
// DialogueOff ;
18385: CALL_OW 7
// SikorskiWaitCounter ;
18389: CALL 19887 0 0
// DialogueOn ;
18393: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18397: LD_EXP 28
18401: PPUSH
18402: LD_STRING D6-Sik-1
18404: PPUSH
18405: CALL_OW 88
// DialogueOff ;
18409: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18413: LD_STRING M2
18415: PPUSH
18416: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18420: LD_INT 1
18422: PPUSH
18423: CALL_OW 427
// SikorskiAttack ;
18427: CALL 7861 0 0
// end ;
18431: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18432: LD_INT 11
18434: PPUSH
18435: LD_INT 22
18437: PUSH
18438: LD_INT 4
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PPUSH
18445: CALL_OW 70
18449: PUSH
18450: LD_INT 2
18452: GREATER
18453: IFFALSE 18646
18455: GO 18457
18457: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18458: LD_EXP 28
18462: PPUSH
18463: LD_STRING D7-Sik-1
18465: PPUSH
18466: CALL_OW 88
// wait ( 0 0$10 ) ;
18470: LD_INT 350
18472: PPUSH
18473: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18477: LD_EXP 14
18481: PPUSH
18482: LD_INT 11
18484: PPUSH
18485: CALL_OW 308
18489: PUSH
18490: LD_EXP 14
18494: PPUSH
18495: CALL_OW 310
18499: PPUSH
18500: LD_INT 11
18502: PPUSH
18503: CALL_OW 308
18507: OR
18508: IFFALSE 18532
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18510: LD_EXP 28
18514: PPUSH
18515: LD_STRING D7a-Sik-1
18517: PPUSH
18518: CALL_OW 88
// sikorskiStatus := 1 ;
18522: LD_ADDR_EXP 9
18526: PUSH
18527: LD_INT 1
18529: ST_TO_ADDR
// end else
18530: GO 18552
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18532: LD_EXP 28
18536: PPUSH
18537: LD_STRING D7b-Sik-1
18539: PPUSH
18540: CALL_OW 88
// sikorskiStatus := 0 ;
18544: LD_ADDR_EXP 9
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18552: LD_INT 1575
18554: PPUSH
18555: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18559: LD_EXP 14
18563: PPUSH
18564: LD_INT 11
18566: PPUSH
18567: CALL_OW 308
18571: PUSH
18572: LD_EXP 14
18576: PPUSH
18577: CALL_OW 310
18581: PPUSH
18582: LD_INT 11
18584: PPUSH
18585: CALL_OW 308
18589: OR
18590: PUSH
18591: LD_EXP 14
18595: PPUSH
18596: CALL_OW 302
18600: NOT
18601: OR
18602: IFFALSE 18626
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18604: LD_EXP 28
18608: PPUSH
18609: LD_STRING D7a-Sik-1
18611: PPUSH
18612: CALL_OW 88
// sikorskiStatus := 1 ;
18616: LD_ADDR_EXP 9
18620: PUSH
18621: LD_INT 1
18623: ST_TO_ADDR
// end else
18624: GO 18646
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18626: LD_EXP 28
18630: PPUSH
18631: LD_STRING D7b-Sik-1
18633: PPUSH
18634: CALL_OW 88
// sikorskiStatus := 0 ;
18638: LD_ADDR_EXP 9
18642: PUSH
18643: LD_INT 0
18645: ST_TO_ADDR
// end ; end ;
18646: END
// export function SikorskiKilledInAction ; begin
18647: LD_INT 0
18649: PPUSH
// wait ( 0 0$2 ) ;
18650: LD_INT 70
18652: PPUSH
18653: CALL_OW 67
// DialogueOn ;
18657: CALL_OW 6
// dwait ( 0 0$1 ) ;
18661: LD_INT 35
18663: PPUSH
18664: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
18668: LD_EXP 30
18672: PPUSH
18673: LD_STRING D8b-Pow-1
18675: PPUSH
18676: CALL_OW 94
// YouLost ( Dismissed ) ;
18680: LD_STRING Dismissed
18682: PPUSH
18683: CALL_OW 104
// DialogueOff ;
18687: CALL_OW 7
// end ;
18691: LD_VAR 0 1
18695: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
18696: LD_EXP 8
18700: PUSH
18701: LD_INT 28
18703: PPUSH
18704: CALL_OW 301
18708: AND
18709: PUSH
18710: LD_EXP 32
18714: PPUSH
18715: CALL_OW 301
18719: AND
18720: PUSH
18721: LD_INT 22
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 50
18733: PUSH
18734: EMPTY
18735: LIST
18736: PUSH
18737: LD_INT 30
18739: PUSH
18740: LD_INT 5
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: LIST
18751: PPUSH
18752: CALL_OW 69
18756: PUSH
18757: LD_INT 0
18759: EQUAL
18760: AND
18761: IFFALSE 19821
18763: GO 18765
18765: DISABLE
18766: LD_INT 0
18768: PPUSH
18769: PPUSH
18770: PPUSH
// begin Video ( true ) ;
18771: LD_INT 1
18773: PPUSH
18774: CALL 77567 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
18778: LD_INT 104
18780: PPUSH
18781: LD_INT 108
18783: PPUSH
18784: LD_INT 1
18786: PPUSH
18787: LD_INT 36
18789: NEG
18790: PPUSH
18791: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
18795: LD_INT 104
18797: PPUSH
18798: LD_INT 108
18800: PPUSH
18801: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
18805: LD_ADDR_VAR 0 2
18809: PUSH
18810: LD_INT 22
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 3
18832: PUSH
18833: LD_INT 24
18835: PUSH
18836: LD_INT 249
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: PPUSH
18852: CALL_OW 69
18856: ST_TO_ADDR
// if tmp then
18857: LD_VAR 0 2
18861: IFFALSE 18892
// for i in tmp do
18863: LD_ADDR_VAR 0 1
18867: PUSH
18868: LD_VAR 0 2
18872: PUSH
18873: FOR_IN
18874: IFFALSE 18890
// SetLives ( i , 249 ) ;
18876: LD_VAR 0 1
18880: PPUSH
18881: LD_INT 249
18883: PPUSH
18884: CALL_OW 234
18888: GO 18873
18890: POP
18891: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18892: LD_ADDR_VAR 0 1
18896: PUSH
18897: LD_INT 22
18899: PUSH
18900: LD_INT 3
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 21
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PPUSH
18921: CALL_OW 69
18925: PUSH
18926: FOR_IN
18927: IFFALSE 18970
// begin ComExit ( i ) ;
18929: LD_VAR 0 1
18933: PPUSH
18934: CALL 77993 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
18938: LD_VAR 0 1
18942: PPUSH
18943: LD_INT 131
18945: PPUSH
18946: LD_INT 127
18948: PPUSH
18949: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
18953: LD_VAR 0 1
18957: PPUSH
18958: LD_INT 141
18960: PPUSH
18961: LD_INT 147
18963: PPUSH
18964: CALL_OW 171
// end ;
18968: GO 18926
18970: POP
18971: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
18972: LD_INT 81
18974: PUSH
18975: LD_INT 3
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 3
18984: PUSH
18985: LD_INT 21
18987: PUSH
18988: LD_INT 3
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PPUSH
19003: CALL_OW 69
19007: PPUSH
19008: LD_INT 131
19010: PPUSH
19011: LD_INT 127
19013: PPUSH
19014: CALL_OW 174
// wait ( 0 0$08 ) ;
19018: LD_INT 280
19020: PPUSH
19021: CALL_OW 67
// DialogueOn ;
19025: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19029: LD_EXP 9
19033: PUSH
19034: LD_INT 1
19036: EQUAL
19037: PUSH
19038: LD_EXP 28
19042: PPUSH
19043: CALL_OW 302
19047: AND
19048: IFFALSE 19062
// Say ( Sikorski , D9-Sik-1 ) ;
19050: LD_EXP 28
19054: PPUSH
19055: LD_STRING D9-Sik-1
19057: PPUSH
19058: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19062: LD_INT 22
19064: PUSH
19065: LD_INT 4
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PPUSH
19072: CALL_OW 69
19076: PUSH
19077: LD_INT 0
19079: EQUAL
19080: PUSH
19081: LD_EXP 3
19085: AND
19086: IFFALSE 19095
// SetAchievement ( ACH_BLITZKRIEG ) ;
19088: LD_STRING ACH_BLITZKRIEG
19090: PPUSH
19091: CALL_OW 543
// if tick <= 45 45$10 then
19095: LD_OWVAR 1
19099: PUSH
19100: LD_INT 94850
19102: LESSEQUAL
19103: IFFALSE 19119
// begin wait ( 3 ) ;
19105: LD_INT 3
19107: PPUSH
19108: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19112: LD_STRING ACH_ASPEED_8
19114: PPUSH
19115: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19119: LD_STRING med1
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19129: LD_STRING med2
19131: PPUSH
19132: LD_INT 1
19134: PPUSH
19135: CALL_OW 101
// if sikorskiStatus = 1 then
19139: LD_EXP 9
19143: PUSH
19144: LD_INT 1
19146: EQUAL
19147: IFFALSE 19161
// AddMedal ( perfect , 1 ) else
19149: LD_STRING perfect
19151: PPUSH
19152: LD_INT 1
19154: PPUSH
19155: CALL_OW 101
19159: GO 19172
// AddMedal ( perfect , - 1 ) ;
19161: LD_STRING perfect
19163: PPUSH
19164: LD_INT 1
19166: NEG
19167: PPUSH
19168: CALL_OW 101
// if Difficulty >= 3 then
19172: LD_OWVAR 67
19176: PUSH
19177: LD_INT 3
19179: GREATEREQUAL
19180: IFFALSE 19192
// SetAchievementEX ( ACH_AMER , 8 ) ;
19182: LD_STRING ACH_AMER
19184: PPUSH
19185: LD_INT 8
19187: PPUSH
19188: CALL_OW 564
// GiveMedals ( Main ) ;
19192: LD_STRING Main
19194: PPUSH
19195: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19199: LD_INT 22
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 23
19211: PUSH
19212: LD_INT 1
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 21
19221: PUSH
19222: LD_INT 1
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: PPUSH
19234: CALL_OW 69
19238: PPUSH
19239: CALL_OW 43
// prefix := 08_ ;
19243: LD_ADDR_VAR 0 3
19247: PUSH
19248: LD_STRING 08_
19250: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19251: LD_EXP 14
19255: PPUSH
19256: LD_VAR 0 3
19260: PUSH
19261: LD_STRING JMM
19263: STR
19264: PPUSH
19265: CALL_OW 38
// if IsLive ( Brown ) then
19269: LD_EXP 15
19273: PPUSH
19274: CALL_OW 300
19278: IFFALSE 19298
// SaveCharacters ( Brown , prefix & Brown ) ;
19280: LD_EXP 15
19284: PPUSH
19285: LD_VAR 0 3
19289: PUSH
19290: LD_STRING Brown
19292: STR
19293: PPUSH
19294: CALL_OW 38
// if IsLive ( Donaldson ) then
19298: LD_EXP 16
19302: PPUSH
19303: CALL_OW 300
19307: IFFALSE 19327
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19309: LD_EXP 16
19313: PPUSH
19314: LD_VAR 0 3
19318: PUSH
19319: LD_STRING Donaldson
19321: STR
19322: PPUSH
19323: CALL_OW 38
// if IsLive ( Bobby ) then
19327: LD_EXP 17
19331: PPUSH
19332: CALL_OW 300
19336: IFFALSE 19356
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19338: LD_EXP 17
19342: PPUSH
19343: LD_VAR 0 3
19347: PUSH
19348: LD_STRING Bobby
19350: STR
19351: PPUSH
19352: CALL_OW 38
// if IsLive ( Cyrus ) then
19356: LD_EXP 18
19360: PPUSH
19361: CALL_OW 300
19365: IFFALSE 19385
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19367: LD_EXP 18
19371: PPUSH
19372: LD_VAR 0 3
19376: PUSH
19377: LD_STRING Cyrus
19379: STR
19380: PPUSH
19381: CALL_OW 38
// if IsLive ( Lisa ) then
19385: LD_EXP 19
19389: PPUSH
19390: CALL_OW 300
19394: IFFALSE 19414
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19396: LD_EXP 19
19400: PPUSH
19401: LD_VAR 0 3
19405: PUSH
19406: LD_STRING Lisa
19408: STR
19409: PPUSH
19410: CALL_OW 38
// if IsLive ( Frank ) then
19414: LD_EXP 20
19418: PPUSH
19419: CALL_OW 300
19423: IFFALSE 19443
// SaveCharacters ( Frank , prefix & Frank ) ;
19425: LD_EXP 20
19429: PPUSH
19430: LD_VAR 0 3
19434: PUSH
19435: LD_STRING Frank
19437: STR
19438: PPUSH
19439: CALL_OW 38
// if IsLive ( Gladstone ) then
19443: LD_EXP 21
19447: PPUSH
19448: CALL_OW 300
19452: IFFALSE 19472
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19454: LD_EXP 21
19458: PPUSH
19459: LD_VAR 0 3
19463: PUSH
19464: LD_STRING Gladstone
19466: STR
19467: PPUSH
19468: CALL_OW 38
// if IsLive ( Kikuchi ) then
19472: LD_EXP 22
19476: PPUSH
19477: CALL_OW 300
19481: IFFALSE 19501
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19483: LD_EXP 22
19487: PPUSH
19488: LD_VAR 0 3
19492: PUSH
19493: LD_STRING Kikuchi
19495: STR
19496: PPUSH
19497: CALL_OW 38
// if IsLive ( Denis ) then
19501: LD_EXP 26
19505: PPUSH
19506: CALL_OW 300
19510: IFFALSE 19530
// SaveCharacters ( Denis , prefix & Denis ) ;
19512: LD_EXP 26
19516: PPUSH
19517: LD_VAR 0 3
19521: PUSH
19522: LD_STRING Denis
19524: STR
19525: PPUSH
19526: CALL_OW 38
// if IsLive ( Joan ) then
19530: LD_EXP 27
19534: PPUSH
19535: CALL_OW 300
19539: IFFALSE 19561
// SaveCharacters ( Joan , prefix & Joan ) else
19541: LD_EXP 27
19545: PPUSH
19546: LD_VAR 0 3
19550: PUSH
19551: LD_STRING Joan
19553: STR
19554: PPUSH
19555: CALL_OW 38
19559: GO 19568
// DeleteCharacters ( Joan ) ;
19561: LD_STRING Joan
19563: PPUSH
19564: CALL_OW 40
// if IsLive ( Khatam ) then
19568: LD_EXP 23
19572: PPUSH
19573: CALL_OW 300
19577: IFFALSE 19597
// SaveCharacters ( Khatam , prefix & Khatam ) ;
19579: LD_EXP 23
19583: PPUSH
19584: LD_VAR 0 3
19588: PUSH
19589: LD_STRING Khatam
19591: STR
19592: PPUSH
19593: CALL_OW 38
// if IsLive ( Houten ) then
19597: LD_EXP 25
19601: PPUSH
19602: CALL_OW 300
19606: IFFALSE 19633
// begin ToLua ( enableBioCharacter(BIO_HOUT) ) ;
19608: LD_STRING enableBioCharacter(BIO_HOUT)
19610: PPUSH
19611: CALL_OW 559
// SaveCharacters ( Houten , prefix & Houten ) ;
19615: LD_EXP 25
19619: PPUSH
19620: LD_VAR 0 3
19624: PUSH
19625: LD_STRING Houten
19627: STR
19628: PPUSH
19629: CALL_OW 38
// end ; if IsLive ( Mike ) then
19633: LD_EXP 24
19637: PPUSH
19638: CALL_OW 300
19642: IFFALSE 19662
// SaveCharacters ( Mike , prefix & Mike ) ;
19644: LD_EXP 24
19648: PPUSH
19649: LD_VAR 0 3
19653: PUSH
19654: LD_STRING Mike
19656: STR
19657: PPUSH
19658: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
19662: LD_INT 22
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 21
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 23
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: LIST
19696: PPUSH
19697: CALL_OW 69
19701: PUSH
19702: LD_EXP 14
19706: PUSH
19707: LD_EXP 15
19711: PUSH
19712: LD_EXP 16
19716: PUSH
19717: LD_EXP 17
19721: PUSH
19722: LD_EXP 18
19726: PUSH
19727: LD_EXP 19
19731: PUSH
19732: LD_EXP 20
19736: PUSH
19737: LD_EXP 21
19741: PUSH
19742: LD_EXP 22
19746: PUSH
19747: LD_EXP 26
19751: PUSH
19752: LD_EXP 27
19756: PUSH
19757: LD_EXP 25
19761: PUSH
19762: LD_EXP 23
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: DIFF
19782: PPUSH
19783: LD_STRING 08_other_survivors
19785: PPUSH
19786: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
19790: LD_INT 15
19792: PPUSH
19793: CALL 7335 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
19797: LD_EXP 10
19801: NOT
19802: PPUSH
19803: LD_STRING 08_SikorskiStatus
19805: PPUSH
19806: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_SIK) ) ;
19810: LD_STRING enableBioCharacter(BIO_SIK)
19812: PPUSH
19813: CALL_OW 559
// YouWin ;
19817: CALL_OW 103
// end ; end_of_file
19821: PPOPN 3
19823: END
// export function SikorskiCounter ; begin
19824: LD_INT 0
19826: PPUSH
// repeat wait ( 0 0$1 ) ;
19827: LD_INT 35
19829: PPUSH
19830: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
19834: LD_ADDR_OWVAR 47
19838: PUSH
19839: LD_STRING #Am08-2
19841: PUSH
19842: LD_EXP 3
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
19851: LD_ADDR_EXP 3
19855: PUSH
19856: LD_EXP 3
19860: PUSH
19861: LD_INT 35
19863: MINUS
19864: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
19865: LD_EXP 3
19869: PUSH
19870: LD_INT 0
19872: EQUAL
19873: IFFALSE 19827
// display_strings := [ ] ;
19875: LD_ADDR_OWVAR 47
19879: PUSH
19880: EMPTY
19881: ST_TO_ADDR
// end ;
19882: LD_VAR 0 1
19886: RET
// export function SikorskiWaitCounter ; begin
19887: LD_INT 0
19889: PPUSH
// repeat wait ( 0 0$1 ) ;
19890: LD_INT 35
19892: PPUSH
19893: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
19897: LD_ADDR_OWVAR 47
19901: PUSH
19902: LD_STRING #Am08-1
19904: PUSH
19905: LD_EXP 4
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
19914: LD_ADDR_EXP 4
19918: PUSH
19919: LD_EXP 4
19923: PUSH
19924: LD_INT 35
19926: MINUS
19927: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
19928: LD_EXP 4
19932: PUSH
19933: LD_INT 0
19935: EQUAL
19936: IFFALSE 19890
// display_strings := [ ] ;
19938: LD_ADDR_OWVAR 47
19942: PUSH
19943: EMPTY
19944: ST_TO_ADDR
// end ; end_of_file
19945: LD_VAR 0 1
19949: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
19950: LD_EXP 3
19954: IFFALSE 19994
19956: GO 19958
19958: DISABLE
// begin enable ;
19959: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
19960: LD_INT 14
19962: PPUSH
19963: CALL_OW 435
19967: PUSH
19968: LD_INT 10
19970: LESS
19971: IFFALSE 19994
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
19973: LD_INT 1
19975: PPUSH
19976: LD_INT 5
19978: PPUSH
19979: CALL_OW 12
19983: PPUSH
19984: LD_INT 14
19986: PPUSH
19987: LD_INT 1
19989: PPUSH
19990: CALL_OW 55
// end ;
19994: END
// every 0 0$55 trigger sikorskiArriveCounter do
19995: LD_EXP 3
19999: IFFALSE 20039
20001: GO 20003
20003: DISABLE
// begin enable ;
20004: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
20005: LD_INT 13
20007: PPUSH
20008: CALL_OW 435
20012: PUSH
20013: LD_INT 10
20015: LESS
20016: IFFALSE 20039
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20018: LD_INT 1
20020: PPUSH
20021: LD_INT 5
20023: PPUSH
20024: CALL_OW 12
20028: PPUSH
20029: LD_INT 13
20031: PPUSH
20032: LD_INT 1
20034: PPUSH
20035: CALL_OW 55
// end ; end_of_file
20039: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20040: LD_INT 0
20042: PPUSH
20043: PPUSH
// if not units then
20044: LD_VAR 0 1
20048: NOT
20049: IFFALSE 20053
// exit ;
20051: GO 20178
// result := false ;
20053: LD_ADDR_VAR 0 4
20057: PUSH
20058: LD_INT 0
20060: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20061: LD_ADDR_VAR 0 5
20065: PUSH
20066: LD_VAR 0 1
20070: PPUSH
20071: LD_INT 26
20073: PUSH
20074: LD_INT 1
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PPUSH
20081: CALL_OW 72
20085: ST_TO_ADDR
// if tmp then
20086: LD_VAR 0 5
20090: IFFALSE 20116
// result := Say ( tmp [ 1 ] , menDialog ) ;
20092: LD_ADDR_VAR 0 4
20096: PUSH
20097: LD_VAR 0 5
20101: PUSH
20102: LD_INT 1
20104: ARRAY
20105: PPUSH
20106: LD_VAR 0 2
20110: PPUSH
20111: CALL_OW 88
20115: ST_TO_ADDR
// if not result then
20116: LD_VAR 0 4
20120: NOT
20121: IFFALSE 20178
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20123: LD_ADDR_VAR 0 5
20127: PUSH
20128: LD_VAR 0 1
20132: PPUSH
20133: LD_INT 26
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PPUSH
20143: CALL_OW 72
20147: ST_TO_ADDR
// if tmp then
20148: LD_VAR 0 5
20152: IFFALSE 20178
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20154: LD_ADDR_VAR 0 4
20158: PUSH
20159: LD_VAR 0 5
20163: PUSH
20164: LD_INT 1
20166: ARRAY
20167: PPUSH
20168: LD_VAR 0 3
20172: PPUSH
20173: CALL_OW 88
20177: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20178: LD_VAR 0 4
20182: RET
// export globalGameSaveCounter ; every 0 0$1 do
20183: GO 20185
20185: DISABLE
// begin enable ;
20186: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20187: LD_STRING updateTimer(
20189: PUSH
20190: LD_OWVAR 1
20194: STR
20195: PUSH
20196: LD_STRING );
20198: STR
20199: PPUSH
20200: CALL_OW 559
// end ;
20204: END
// every 0 0$1 do
20205: GO 20207
20207: DISABLE
// begin globalGameSaveCounter := 0 ;
20208: LD_ADDR_EXP 37
20212: PUSH
20213: LD_INT 0
20215: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20216: LD_STRING setGameSaveCounter(0)
20218: PPUSH
20219: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20223: LD_STRING initStreamRollete();
20225: PPUSH
20226: CALL_OW 559
// InitStreamMode ;
20230: CALL 21556 0 0
// DefineStreamItems ( false ) ;
20234: LD_INT 0
20236: PPUSH
20237: CALL 22020 0 1
// end ;
20241: END
// export function SOS_MapStart ( ) ; begin
20242: LD_INT 0
20244: PPUSH
// if streamModeActive then
20245: LD_EXP 38
20249: IFFALSE 20258
// DefineStreamItems ( true ) ;
20251: LD_INT 1
20253: PPUSH
20254: CALL 22020 0 1
// UpdateLuaVariables ( ) ;
20258: CALL 20275 0 0
// UpdateFactoryWaypoints ( ) ;
20262: CALL 34889 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20266: CALL 35146 0 0
// end ;
20270: LD_VAR 0 1
20274: RET
// function UpdateLuaVariables ( ) ; begin
20275: LD_INT 0
20277: PPUSH
// if globalGameSaveCounter then
20278: LD_EXP 37
20282: IFFALSE 20316
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20284: LD_ADDR_EXP 37
20288: PUSH
20289: LD_EXP 37
20293: PPUSH
20294: CALL 78956 0 1
20298: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20299: LD_STRING setGameSaveCounter(
20301: PUSH
20302: LD_EXP 37
20306: STR
20307: PUSH
20308: LD_STRING )
20310: STR
20311: PPUSH
20312: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20316: LD_STRING setGameDifficulty(
20318: PUSH
20319: LD_OWVAR 67
20323: STR
20324: PUSH
20325: LD_STRING )
20327: STR
20328: PPUSH
20329: CALL_OW 559
// end ;
20333: LD_VAR 0 1
20337: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20338: LD_INT 0
20340: PPUSH
// if p2 = stream_mode then
20341: LD_VAR 0 2
20345: PUSH
20346: LD_INT 100
20348: EQUAL
20349: IFFALSE 21352
// begin if not StreamModeActive then
20351: LD_EXP 38
20355: NOT
20356: IFFALSE 20366
// StreamModeActive := true ;
20358: LD_ADDR_EXP 38
20362: PUSH
20363: LD_INT 1
20365: ST_TO_ADDR
// if p3 = 0 then
20366: LD_VAR 0 3
20370: PUSH
20371: LD_INT 0
20373: EQUAL
20374: IFFALSE 20380
// InitStreamMode ;
20376: CALL 21556 0 0
// if p3 = 1 then
20380: LD_VAR 0 3
20384: PUSH
20385: LD_INT 1
20387: EQUAL
20388: IFFALSE 20398
// sRocket := true ;
20390: LD_ADDR_EXP 43
20394: PUSH
20395: LD_INT 1
20397: ST_TO_ADDR
// if p3 = 2 then
20398: LD_VAR 0 3
20402: PUSH
20403: LD_INT 2
20405: EQUAL
20406: IFFALSE 20416
// sSpeed := true ;
20408: LD_ADDR_EXP 42
20412: PUSH
20413: LD_INT 1
20415: ST_TO_ADDR
// if p3 = 3 then
20416: LD_VAR 0 3
20420: PUSH
20421: LD_INT 3
20423: EQUAL
20424: IFFALSE 20434
// sEngine := true ;
20426: LD_ADDR_EXP 44
20430: PUSH
20431: LD_INT 1
20433: ST_TO_ADDR
// if p3 = 4 then
20434: LD_VAR 0 3
20438: PUSH
20439: LD_INT 4
20441: EQUAL
20442: IFFALSE 20452
// sSpec := true ;
20444: LD_ADDR_EXP 41
20448: PUSH
20449: LD_INT 1
20451: ST_TO_ADDR
// if p3 = 5 then
20452: LD_VAR 0 3
20456: PUSH
20457: LD_INT 5
20459: EQUAL
20460: IFFALSE 20470
// sLevel := true ;
20462: LD_ADDR_EXP 45
20466: PUSH
20467: LD_INT 1
20469: ST_TO_ADDR
// if p3 = 6 then
20470: LD_VAR 0 3
20474: PUSH
20475: LD_INT 6
20477: EQUAL
20478: IFFALSE 20488
// sArmoury := true ;
20480: LD_ADDR_EXP 46
20484: PUSH
20485: LD_INT 1
20487: ST_TO_ADDR
// if p3 = 7 then
20488: LD_VAR 0 3
20492: PUSH
20493: LD_INT 7
20495: EQUAL
20496: IFFALSE 20506
// sRadar := true ;
20498: LD_ADDR_EXP 47
20502: PUSH
20503: LD_INT 1
20505: ST_TO_ADDR
// if p3 = 8 then
20506: LD_VAR 0 3
20510: PUSH
20511: LD_INT 8
20513: EQUAL
20514: IFFALSE 20524
// sBunker := true ;
20516: LD_ADDR_EXP 48
20520: PUSH
20521: LD_INT 1
20523: ST_TO_ADDR
// if p3 = 9 then
20524: LD_VAR 0 3
20528: PUSH
20529: LD_INT 9
20531: EQUAL
20532: IFFALSE 20542
// sHack := true ;
20534: LD_ADDR_EXP 49
20538: PUSH
20539: LD_INT 1
20541: ST_TO_ADDR
// if p3 = 10 then
20542: LD_VAR 0 3
20546: PUSH
20547: LD_INT 10
20549: EQUAL
20550: IFFALSE 20560
// sFire := true ;
20552: LD_ADDR_EXP 50
20556: PUSH
20557: LD_INT 1
20559: ST_TO_ADDR
// if p3 = 11 then
20560: LD_VAR 0 3
20564: PUSH
20565: LD_INT 11
20567: EQUAL
20568: IFFALSE 20578
// sRefresh := true ;
20570: LD_ADDR_EXP 51
20574: PUSH
20575: LD_INT 1
20577: ST_TO_ADDR
// if p3 = 12 then
20578: LD_VAR 0 3
20582: PUSH
20583: LD_INT 12
20585: EQUAL
20586: IFFALSE 20596
// sExp := true ;
20588: LD_ADDR_EXP 52
20592: PUSH
20593: LD_INT 1
20595: ST_TO_ADDR
// if p3 = 13 then
20596: LD_VAR 0 3
20600: PUSH
20601: LD_INT 13
20603: EQUAL
20604: IFFALSE 20614
// sDepot := true ;
20606: LD_ADDR_EXP 53
20610: PUSH
20611: LD_INT 1
20613: ST_TO_ADDR
// if p3 = 14 then
20614: LD_VAR 0 3
20618: PUSH
20619: LD_INT 14
20621: EQUAL
20622: IFFALSE 20632
// sFlag := true ;
20624: LD_ADDR_EXP 54
20628: PUSH
20629: LD_INT 1
20631: ST_TO_ADDR
// if p3 = 15 then
20632: LD_VAR 0 3
20636: PUSH
20637: LD_INT 15
20639: EQUAL
20640: IFFALSE 20650
// sKamikadze := true ;
20642: LD_ADDR_EXP 62
20646: PUSH
20647: LD_INT 1
20649: ST_TO_ADDR
// if p3 = 16 then
20650: LD_VAR 0 3
20654: PUSH
20655: LD_INT 16
20657: EQUAL
20658: IFFALSE 20668
// sTroll := true ;
20660: LD_ADDR_EXP 63
20664: PUSH
20665: LD_INT 1
20667: ST_TO_ADDR
// if p3 = 17 then
20668: LD_VAR 0 3
20672: PUSH
20673: LD_INT 17
20675: EQUAL
20676: IFFALSE 20686
// sSlow := true ;
20678: LD_ADDR_EXP 64
20682: PUSH
20683: LD_INT 1
20685: ST_TO_ADDR
// if p3 = 18 then
20686: LD_VAR 0 3
20690: PUSH
20691: LD_INT 18
20693: EQUAL
20694: IFFALSE 20704
// sLack := true ;
20696: LD_ADDR_EXP 65
20700: PUSH
20701: LD_INT 1
20703: ST_TO_ADDR
// if p3 = 19 then
20704: LD_VAR 0 3
20708: PUSH
20709: LD_INT 19
20711: EQUAL
20712: IFFALSE 20722
// sTank := true ;
20714: LD_ADDR_EXP 67
20718: PUSH
20719: LD_INT 1
20721: ST_TO_ADDR
// if p3 = 20 then
20722: LD_VAR 0 3
20726: PUSH
20727: LD_INT 20
20729: EQUAL
20730: IFFALSE 20740
// sRemote := true ;
20732: LD_ADDR_EXP 68
20736: PUSH
20737: LD_INT 1
20739: ST_TO_ADDR
// if p3 = 21 then
20740: LD_VAR 0 3
20744: PUSH
20745: LD_INT 21
20747: EQUAL
20748: IFFALSE 20758
// sPowell := true ;
20750: LD_ADDR_EXP 69
20754: PUSH
20755: LD_INT 1
20757: ST_TO_ADDR
// if p3 = 22 then
20758: LD_VAR 0 3
20762: PUSH
20763: LD_INT 22
20765: EQUAL
20766: IFFALSE 20776
// sTeleport := true ;
20768: LD_ADDR_EXP 72
20772: PUSH
20773: LD_INT 1
20775: ST_TO_ADDR
// if p3 = 23 then
20776: LD_VAR 0 3
20780: PUSH
20781: LD_INT 23
20783: EQUAL
20784: IFFALSE 20794
// sOilTower := true ;
20786: LD_ADDR_EXP 74
20790: PUSH
20791: LD_INT 1
20793: ST_TO_ADDR
// if p3 = 24 then
20794: LD_VAR 0 3
20798: PUSH
20799: LD_INT 24
20801: EQUAL
20802: IFFALSE 20812
// sShovel := true ;
20804: LD_ADDR_EXP 75
20808: PUSH
20809: LD_INT 1
20811: ST_TO_ADDR
// if p3 = 25 then
20812: LD_VAR 0 3
20816: PUSH
20817: LD_INT 25
20819: EQUAL
20820: IFFALSE 20830
// sSheik := true ;
20822: LD_ADDR_EXP 76
20826: PUSH
20827: LD_INT 1
20829: ST_TO_ADDR
// if p3 = 26 then
20830: LD_VAR 0 3
20834: PUSH
20835: LD_INT 26
20837: EQUAL
20838: IFFALSE 20848
// sEarthquake := true ;
20840: LD_ADDR_EXP 78
20844: PUSH
20845: LD_INT 1
20847: ST_TO_ADDR
// if p3 = 27 then
20848: LD_VAR 0 3
20852: PUSH
20853: LD_INT 27
20855: EQUAL
20856: IFFALSE 20866
// sAI := true ;
20858: LD_ADDR_EXP 79
20862: PUSH
20863: LD_INT 1
20865: ST_TO_ADDR
// if p3 = 28 then
20866: LD_VAR 0 3
20870: PUSH
20871: LD_INT 28
20873: EQUAL
20874: IFFALSE 20884
// sCargo := true ;
20876: LD_ADDR_EXP 82
20880: PUSH
20881: LD_INT 1
20883: ST_TO_ADDR
// if p3 = 29 then
20884: LD_VAR 0 3
20888: PUSH
20889: LD_INT 29
20891: EQUAL
20892: IFFALSE 20902
// sDLaser := true ;
20894: LD_ADDR_EXP 83
20898: PUSH
20899: LD_INT 1
20901: ST_TO_ADDR
// if p3 = 30 then
20902: LD_VAR 0 3
20906: PUSH
20907: LD_INT 30
20909: EQUAL
20910: IFFALSE 20920
// sExchange := true ;
20912: LD_ADDR_EXP 84
20916: PUSH
20917: LD_INT 1
20919: ST_TO_ADDR
// if p3 = 31 then
20920: LD_VAR 0 3
20924: PUSH
20925: LD_INT 31
20927: EQUAL
20928: IFFALSE 20938
// sFac := true ;
20930: LD_ADDR_EXP 85
20934: PUSH
20935: LD_INT 1
20937: ST_TO_ADDR
// if p3 = 32 then
20938: LD_VAR 0 3
20942: PUSH
20943: LD_INT 32
20945: EQUAL
20946: IFFALSE 20956
// sPower := true ;
20948: LD_ADDR_EXP 86
20952: PUSH
20953: LD_INT 1
20955: ST_TO_ADDR
// if p3 = 33 then
20956: LD_VAR 0 3
20960: PUSH
20961: LD_INT 33
20963: EQUAL
20964: IFFALSE 20974
// sRandom := true ;
20966: LD_ADDR_EXP 87
20970: PUSH
20971: LD_INT 1
20973: ST_TO_ADDR
// if p3 = 34 then
20974: LD_VAR 0 3
20978: PUSH
20979: LD_INT 34
20981: EQUAL
20982: IFFALSE 20992
// sShield := true ;
20984: LD_ADDR_EXP 88
20988: PUSH
20989: LD_INT 1
20991: ST_TO_ADDR
// if p3 = 35 then
20992: LD_VAR 0 3
20996: PUSH
20997: LD_INT 35
20999: EQUAL
21000: IFFALSE 21010
// sTime := true ;
21002: LD_ADDR_EXP 89
21006: PUSH
21007: LD_INT 1
21009: ST_TO_ADDR
// if p3 = 36 then
21010: LD_VAR 0 3
21014: PUSH
21015: LD_INT 36
21017: EQUAL
21018: IFFALSE 21028
// sTools := true ;
21020: LD_ADDR_EXP 90
21024: PUSH
21025: LD_INT 1
21027: ST_TO_ADDR
// if p3 = 101 then
21028: LD_VAR 0 3
21032: PUSH
21033: LD_INT 101
21035: EQUAL
21036: IFFALSE 21046
// sSold := true ;
21038: LD_ADDR_EXP 55
21042: PUSH
21043: LD_INT 1
21045: ST_TO_ADDR
// if p3 = 102 then
21046: LD_VAR 0 3
21050: PUSH
21051: LD_INT 102
21053: EQUAL
21054: IFFALSE 21064
// sDiff := true ;
21056: LD_ADDR_EXP 56
21060: PUSH
21061: LD_INT 1
21063: ST_TO_ADDR
// if p3 = 103 then
21064: LD_VAR 0 3
21068: PUSH
21069: LD_INT 103
21071: EQUAL
21072: IFFALSE 21082
// sFog := true ;
21074: LD_ADDR_EXP 59
21078: PUSH
21079: LD_INT 1
21081: ST_TO_ADDR
// if p3 = 104 then
21082: LD_VAR 0 3
21086: PUSH
21087: LD_INT 104
21089: EQUAL
21090: IFFALSE 21100
// sReset := true ;
21092: LD_ADDR_EXP 60
21096: PUSH
21097: LD_INT 1
21099: ST_TO_ADDR
// if p3 = 105 then
21100: LD_VAR 0 3
21104: PUSH
21105: LD_INT 105
21107: EQUAL
21108: IFFALSE 21118
// sSun := true ;
21110: LD_ADDR_EXP 61
21114: PUSH
21115: LD_INT 1
21117: ST_TO_ADDR
// if p3 = 106 then
21118: LD_VAR 0 3
21122: PUSH
21123: LD_INT 106
21125: EQUAL
21126: IFFALSE 21136
// sTiger := true ;
21128: LD_ADDR_EXP 57
21132: PUSH
21133: LD_INT 1
21135: ST_TO_ADDR
// if p3 = 107 then
21136: LD_VAR 0 3
21140: PUSH
21141: LD_INT 107
21143: EQUAL
21144: IFFALSE 21154
// sBomb := true ;
21146: LD_ADDR_EXP 58
21150: PUSH
21151: LD_INT 1
21153: ST_TO_ADDR
// if p3 = 108 then
21154: LD_VAR 0 3
21158: PUSH
21159: LD_INT 108
21161: EQUAL
21162: IFFALSE 21172
// sWound := true ;
21164: LD_ADDR_EXP 66
21168: PUSH
21169: LD_INT 1
21171: ST_TO_ADDR
// if p3 = 109 then
21172: LD_VAR 0 3
21176: PUSH
21177: LD_INT 109
21179: EQUAL
21180: IFFALSE 21190
// sBetray := true ;
21182: LD_ADDR_EXP 70
21186: PUSH
21187: LD_INT 1
21189: ST_TO_ADDR
// if p3 = 110 then
21190: LD_VAR 0 3
21194: PUSH
21195: LD_INT 110
21197: EQUAL
21198: IFFALSE 21208
// sContamin := true ;
21200: LD_ADDR_EXP 71
21204: PUSH
21205: LD_INT 1
21207: ST_TO_ADDR
// if p3 = 111 then
21208: LD_VAR 0 3
21212: PUSH
21213: LD_INT 111
21215: EQUAL
21216: IFFALSE 21226
// sOil := true ;
21218: LD_ADDR_EXP 73
21222: PUSH
21223: LD_INT 1
21225: ST_TO_ADDR
// if p3 = 112 then
21226: LD_VAR 0 3
21230: PUSH
21231: LD_INT 112
21233: EQUAL
21234: IFFALSE 21244
// sStu := true ;
21236: LD_ADDR_EXP 77
21240: PUSH
21241: LD_INT 1
21243: ST_TO_ADDR
// if p3 = 113 then
21244: LD_VAR 0 3
21248: PUSH
21249: LD_INT 113
21251: EQUAL
21252: IFFALSE 21262
// sBazooka := true ;
21254: LD_ADDR_EXP 80
21258: PUSH
21259: LD_INT 1
21261: ST_TO_ADDR
// if p3 = 114 then
21262: LD_VAR 0 3
21266: PUSH
21267: LD_INT 114
21269: EQUAL
21270: IFFALSE 21280
// sMortar := true ;
21272: LD_ADDR_EXP 81
21276: PUSH
21277: LD_INT 1
21279: ST_TO_ADDR
// if p3 = 115 then
21280: LD_VAR 0 3
21284: PUSH
21285: LD_INT 115
21287: EQUAL
21288: IFFALSE 21298
// sRanger := true ;
21290: LD_ADDR_EXP 91
21294: PUSH
21295: LD_INT 1
21297: ST_TO_ADDR
// if p3 = 116 then
21298: LD_VAR 0 3
21302: PUSH
21303: LD_INT 116
21305: EQUAL
21306: IFFALSE 21316
// sComputer := true ;
21308: LD_ADDR_EXP 92
21312: PUSH
21313: LD_INT 1
21315: ST_TO_ADDR
// if p3 = 117 then
21316: LD_VAR 0 3
21320: PUSH
21321: LD_INT 117
21323: EQUAL
21324: IFFALSE 21334
// s30 := true ;
21326: LD_ADDR_EXP 93
21330: PUSH
21331: LD_INT 1
21333: ST_TO_ADDR
// if p3 = 118 then
21334: LD_VAR 0 3
21338: PUSH
21339: LD_INT 118
21341: EQUAL
21342: IFFALSE 21352
// s60 := true ;
21344: LD_ADDR_EXP 94
21348: PUSH
21349: LD_INT 1
21351: ST_TO_ADDR
// end ; if p2 = hack_mode then
21352: LD_VAR 0 2
21356: PUSH
21357: LD_INT 101
21359: EQUAL
21360: IFFALSE 21488
// begin case p3 of 1 :
21362: LD_VAR 0 3
21366: PUSH
21367: LD_INT 1
21369: DOUBLE
21370: EQUAL
21371: IFTRUE 21375
21373: GO 21382
21375: POP
// hHackUnlimitedResources ; 2 :
21376: CALL 33635 0 0
21380: GO 21488
21382: LD_INT 2
21384: DOUBLE
21385: EQUAL
21386: IFTRUE 21390
21388: GO 21397
21390: POP
// hHackSetLevel10 ; 3 :
21391: CALL 33768 0 0
21395: GO 21488
21397: LD_INT 3
21399: DOUBLE
21400: EQUAL
21401: IFTRUE 21405
21403: GO 21412
21405: POP
// hHackSetLevel10YourUnits ; 4 :
21406: CALL 33853 0 0
21410: GO 21488
21412: LD_INT 4
21414: DOUBLE
21415: EQUAL
21416: IFTRUE 21420
21418: GO 21427
21420: POP
// hHackInvincible ; 5 :
21421: CALL 34301 0 0
21425: GO 21488
21427: LD_INT 5
21429: DOUBLE
21430: EQUAL
21431: IFTRUE 21435
21433: GO 21442
21435: POP
// hHackInvisible ; 6 :
21436: CALL 34412 0 0
21440: GO 21488
21442: LD_INT 6
21444: DOUBLE
21445: EQUAL
21446: IFTRUE 21450
21448: GO 21457
21450: POP
// hHackChangeYourSide ; 7 :
21451: CALL 34469 0 0
21455: GO 21488
21457: LD_INT 7
21459: DOUBLE
21460: EQUAL
21461: IFTRUE 21465
21463: GO 21472
21465: POP
// hHackChangeUnitSide ; 8 :
21466: CALL 34511 0 0
21470: GO 21488
21472: LD_INT 8
21474: DOUBLE
21475: EQUAL
21476: IFTRUE 21480
21478: GO 21487
21480: POP
// hHackFog ; end ;
21481: CALL 34612 0 0
21485: GO 21488
21487: POP
// end ; if p2 = game_save_mode then
21488: LD_VAR 0 2
21492: PUSH
21493: LD_INT 102
21495: EQUAL
21496: IFFALSE 21551
// begin if p3 = 1 then
21498: LD_VAR 0 3
21502: PUSH
21503: LD_INT 1
21505: EQUAL
21506: IFFALSE 21518
// globalGameSaveCounter := p4 ;
21508: LD_ADDR_EXP 37
21512: PUSH
21513: LD_VAR 0 4
21517: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21518: LD_VAR 0 3
21522: PUSH
21523: LD_INT 2
21525: EQUAL
21526: PUSH
21527: LD_EXP 37
21531: AND
21532: IFFALSE 21551
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21534: LD_STRING setGameSaveCounter(
21536: PUSH
21537: LD_EXP 37
21541: STR
21542: PUSH
21543: LD_STRING )
21545: STR
21546: PPUSH
21547: CALL_OW 559
// end ; end ;
21551: LD_VAR 0 7
21555: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21556: LD_INT 0
21558: PPUSH
// streamModeActive := false ;
21559: LD_ADDR_EXP 38
21563: PUSH
21564: LD_INT 0
21566: ST_TO_ADDR
// normalCounter := 36 ;
21567: LD_ADDR_EXP 39
21571: PUSH
21572: LD_INT 36
21574: ST_TO_ADDR
// hardcoreCounter := 18 ;
21575: LD_ADDR_EXP 40
21579: PUSH
21580: LD_INT 18
21582: ST_TO_ADDR
// sRocket := false ;
21583: LD_ADDR_EXP 43
21587: PUSH
21588: LD_INT 0
21590: ST_TO_ADDR
// sSpeed := false ;
21591: LD_ADDR_EXP 42
21595: PUSH
21596: LD_INT 0
21598: ST_TO_ADDR
// sEngine := false ;
21599: LD_ADDR_EXP 44
21603: PUSH
21604: LD_INT 0
21606: ST_TO_ADDR
// sSpec := false ;
21607: LD_ADDR_EXP 41
21611: PUSH
21612: LD_INT 0
21614: ST_TO_ADDR
// sLevel := false ;
21615: LD_ADDR_EXP 45
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// sArmoury := false ;
21623: LD_ADDR_EXP 46
21627: PUSH
21628: LD_INT 0
21630: ST_TO_ADDR
// sRadar := false ;
21631: LD_ADDR_EXP 47
21635: PUSH
21636: LD_INT 0
21638: ST_TO_ADDR
// sBunker := false ;
21639: LD_ADDR_EXP 48
21643: PUSH
21644: LD_INT 0
21646: ST_TO_ADDR
// sHack := false ;
21647: LD_ADDR_EXP 49
21651: PUSH
21652: LD_INT 0
21654: ST_TO_ADDR
// sFire := false ;
21655: LD_ADDR_EXP 50
21659: PUSH
21660: LD_INT 0
21662: ST_TO_ADDR
// sRefresh := false ;
21663: LD_ADDR_EXP 51
21667: PUSH
21668: LD_INT 0
21670: ST_TO_ADDR
// sExp := false ;
21671: LD_ADDR_EXP 52
21675: PUSH
21676: LD_INT 0
21678: ST_TO_ADDR
// sDepot := false ;
21679: LD_ADDR_EXP 53
21683: PUSH
21684: LD_INT 0
21686: ST_TO_ADDR
// sFlag := false ;
21687: LD_ADDR_EXP 54
21691: PUSH
21692: LD_INT 0
21694: ST_TO_ADDR
// sKamikadze := false ;
21695: LD_ADDR_EXP 62
21699: PUSH
21700: LD_INT 0
21702: ST_TO_ADDR
// sTroll := false ;
21703: LD_ADDR_EXP 63
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
// sSlow := false ;
21711: LD_ADDR_EXP 64
21715: PUSH
21716: LD_INT 0
21718: ST_TO_ADDR
// sLack := false ;
21719: LD_ADDR_EXP 65
21723: PUSH
21724: LD_INT 0
21726: ST_TO_ADDR
// sTank := false ;
21727: LD_ADDR_EXP 67
21731: PUSH
21732: LD_INT 0
21734: ST_TO_ADDR
// sRemote := false ;
21735: LD_ADDR_EXP 68
21739: PUSH
21740: LD_INT 0
21742: ST_TO_ADDR
// sPowell := false ;
21743: LD_ADDR_EXP 69
21747: PUSH
21748: LD_INT 0
21750: ST_TO_ADDR
// sTeleport := false ;
21751: LD_ADDR_EXP 72
21755: PUSH
21756: LD_INT 0
21758: ST_TO_ADDR
// sOilTower := false ;
21759: LD_ADDR_EXP 74
21763: PUSH
21764: LD_INT 0
21766: ST_TO_ADDR
// sShovel := false ;
21767: LD_ADDR_EXP 75
21771: PUSH
21772: LD_INT 0
21774: ST_TO_ADDR
// sSheik := false ;
21775: LD_ADDR_EXP 76
21779: PUSH
21780: LD_INT 0
21782: ST_TO_ADDR
// sEarthquake := false ;
21783: LD_ADDR_EXP 78
21787: PUSH
21788: LD_INT 0
21790: ST_TO_ADDR
// sAI := false ;
21791: LD_ADDR_EXP 79
21795: PUSH
21796: LD_INT 0
21798: ST_TO_ADDR
// sCargo := false ;
21799: LD_ADDR_EXP 82
21803: PUSH
21804: LD_INT 0
21806: ST_TO_ADDR
// sDLaser := false ;
21807: LD_ADDR_EXP 83
21811: PUSH
21812: LD_INT 0
21814: ST_TO_ADDR
// sExchange := false ;
21815: LD_ADDR_EXP 84
21819: PUSH
21820: LD_INT 0
21822: ST_TO_ADDR
// sFac := false ;
21823: LD_ADDR_EXP 85
21827: PUSH
21828: LD_INT 0
21830: ST_TO_ADDR
// sPower := false ;
21831: LD_ADDR_EXP 86
21835: PUSH
21836: LD_INT 0
21838: ST_TO_ADDR
// sRandom := false ;
21839: LD_ADDR_EXP 87
21843: PUSH
21844: LD_INT 0
21846: ST_TO_ADDR
// sShield := false ;
21847: LD_ADDR_EXP 88
21851: PUSH
21852: LD_INT 0
21854: ST_TO_ADDR
// sTime := false ;
21855: LD_ADDR_EXP 89
21859: PUSH
21860: LD_INT 0
21862: ST_TO_ADDR
// sTools := false ;
21863: LD_ADDR_EXP 90
21867: PUSH
21868: LD_INT 0
21870: ST_TO_ADDR
// sSold := false ;
21871: LD_ADDR_EXP 55
21875: PUSH
21876: LD_INT 0
21878: ST_TO_ADDR
// sDiff := false ;
21879: LD_ADDR_EXP 56
21883: PUSH
21884: LD_INT 0
21886: ST_TO_ADDR
// sFog := false ;
21887: LD_ADDR_EXP 59
21891: PUSH
21892: LD_INT 0
21894: ST_TO_ADDR
// sReset := false ;
21895: LD_ADDR_EXP 60
21899: PUSH
21900: LD_INT 0
21902: ST_TO_ADDR
// sSun := false ;
21903: LD_ADDR_EXP 61
21907: PUSH
21908: LD_INT 0
21910: ST_TO_ADDR
// sTiger := false ;
21911: LD_ADDR_EXP 57
21915: PUSH
21916: LD_INT 0
21918: ST_TO_ADDR
// sBomb := false ;
21919: LD_ADDR_EXP 58
21923: PUSH
21924: LD_INT 0
21926: ST_TO_ADDR
// sWound := false ;
21927: LD_ADDR_EXP 66
21931: PUSH
21932: LD_INT 0
21934: ST_TO_ADDR
// sBetray := false ;
21935: LD_ADDR_EXP 70
21939: PUSH
21940: LD_INT 0
21942: ST_TO_ADDR
// sContamin := false ;
21943: LD_ADDR_EXP 71
21947: PUSH
21948: LD_INT 0
21950: ST_TO_ADDR
// sOil := false ;
21951: LD_ADDR_EXP 73
21955: PUSH
21956: LD_INT 0
21958: ST_TO_ADDR
// sStu := false ;
21959: LD_ADDR_EXP 77
21963: PUSH
21964: LD_INT 0
21966: ST_TO_ADDR
// sBazooka := false ;
21967: LD_ADDR_EXP 80
21971: PUSH
21972: LD_INT 0
21974: ST_TO_ADDR
// sMortar := false ;
21975: LD_ADDR_EXP 81
21979: PUSH
21980: LD_INT 0
21982: ST_TO_ADDR
// sRanger := false ;
21983: LD_ADDR_EXP 91
21987: PUSH
21988: LD_INT 0
21990: ST_TO_ADDR
// sComputer := false ;
21991: LD_ADDR_EXP 92
21995: PUSH
21996: LD_INT 0
21998: ST_TO_ADDR
// s30 := false ;
21999: LD_ADDR_EXP 93
22003: PUSH
22004: LD_INT 0
22006: ST_TO_ADDR
// s60 := false ;
22007: LD_ADDR_EXP 94
22011: PUSH
22012: LD_INT 0
22014: ST_TO_ADDR
// end ;
22015: LD_VAR 0 1
22019: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22020: LD_INT 0
22022: PPUSH
22023: PPUSH
22024: PPUSH
22025: PPUSH
22026: PPUSH
22027: PPUSH
22028: PPUSH
// result := [ ] ;
22029: LD_ADDR_VAR 0 2
22033: PUSH
22034: EMPTY
22035: ST_TO_ADDR
// if campaign_id = 1 then
22036: LD_OWVAR 69
22040: PUSH
22041: LD_INT 1
22043: EQUAL
22044: IFFALSE 25210
// begin case mission_number of 1 :
22046: LD_OWVAR 70
22050: PUSH
22051: LD_INT 1
22053: DOUBLE
22054: EQUAL
22055: IFTRUE 22059
22057: GO 22135
22059: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22060: LD_ADDR_VAR 0 2
22064: PUSH
22065: LD_INT 2
22067: PUSH
22068: LD_INT 4
22070: PUSH
22071: LD_INT 11
22073: PUSH
22074: LD_INT 12
22076: PUSH
22077: LD_INT 15
22079: PUSH
22080: LD_INT 16
22082: PUSH
22083: LD_INT 22
22085: PUSH
22086: LD_INT 23
22088: PUSH
22089: LD_INT 26
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 101
22105: PUSH
22106: LD_INT 102
22108: PUSH
22109: LD_INT 106
22111: PUSH
22112: LD_INT 116
22114: PUSH
22115: LD_INT 117
22117: PUSH
22118: LD_INT 118
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: ST_TO_ADDR
22133: GO 25208
22135: LD_INT 2
22137: DOUBLE
22138: EQUAL
22139: IFTRUE 22143
22141: GO 22227
22143: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22144: LD_ADDR_VAR 0 2
22148: PUSH
22149: LD_INT 2
22151: PUSH
22152: LD_INT 4
22154: PUSH
22155: LD_INT 11
22157: PUSH
22158: LD_INT 12
22160: PUSH
22161: LD_INT 15
22163: PUSH
22164: LD_INT 16
22166: PUSH
22167: LD_INT 22
22169: PUSH
22170: LD_INT 23
22172: PUSH
22173: LD_INT 26
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 101
22189: PUSH
22190: LD_INT 102
22192: PUSH
22193: LD_INT 105
22195: PUSH
22196: LD_INT 106
22198: PUSH
22199: LD_INT 108
22201: PUSH
22202: LD_INT 116
22204: PUSH
22205: LD_INT 117
22207: PUSH
22208: LD_INT 118
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: ST_TO_ADDR
22225: GO 25208
22227: LD_INT 3
22229: DOUBLE
22230: EQUAL
22231: IFTRUE 22235
22233: GO 22323
22235: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22236: LD_ADDR_VAR 0 2
22240: PUSH
22241: LD_INT 2
22243: PUSH
22244: LD_INT 4
22246: PUSH
22247: LD_INT 5
22249: PUSH
22250: LD_INT 11
22252: PUSH
22253: LD_INT 12
22255: PUSH
22256: LD_INT 15
22258: PUSH
22259: LD_INT 16
22261: PUSH
22262: LD_INT 22
22264: PUSH
22265: LD_INT 26
22267: PUSH
22268: LD_INT 36
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 101
22285: PUSH
22286: LD_INT 102
22288: PUSH
22289: LD_INT 105
22291: PUSH
22292: LD_INT 106
22294: PUSH
22295: LD_INT 108
22297: PUSH
22298: LD_INT 116
22300: PUSH
22301: LD_INT 117
22303: PUSH
22304: LD_INT 118
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: ST_TO_ADDR
22321: GO 25208
22323: LD_INT 4
22325: DOUBLE
22326: EQUAL
22327: IFTRUE 22331
22329: GO 22427
22331: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22332: LD_ADDR_VAR 0 2
22336: PUSH
22337: LD_INT 2
22339: PUSH
22340: LD_INT 4
22342: PUSH
22343: LD_INT 5
22345: PUSH
22346: LD_INT 8
22348: PUSH
22349: LD_INT 11
22351: PUSH
22352: LD_INT 12
22354: PUSH
22355: LD_INT 15
22357: PUSH
22358: LD_INT 16
22360: PUSH
22361: LD_INT 22
22363: PUSH
22364: LD_INT 23
22366: PUSH
22367: LD_INT 26
22369: PUSH
22370: LD_INT 36
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 101
22389: PUSH
22390: LD_INT 102
22392: PUSH
22393: LD_INT 105
22395: PUSH
22396: LD_INT 106
22398: PUSH
22399: LD_INT 108
22401: PUSH
22402: LD_INT 116
22404: PUSH
22405: LD_INT 117
22407: PUSH
22408: LD_INT 118
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: ST_TO_ADDR
22425: GO 25208
22427: LD_INT 5
22429: DOUBLE
22430: EQUAL
22431: IFTRUE 22435
22433: GO 22547
22435: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22436: LD_ADDR_VAR 0 2
22440: PUSH
22441: LD_INT 2
22443: PUSH
22444: LD_INT 4
22446: PUSH
22447: LD_INT 5
22449: PUSH
22450: LD_INT 6
22452: PUSH
22453: LD_INT 8
22455: PUSH
22456: LD_INT 11
22458: PUSH
22459: LD_INT 12
22461: PUSH
22462: LD_INT 15
22464: PUSH
22465: LD_INT 16
22467: PUSH
22468: LD_INT 22
22470: PUSH
22471: LD_INT 23
22473: PUSH
22474: LD_INT 25
22476: PUSH
22477: LD_INT 26
22479: PUSH
22480: LD_INT 36
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 101
22501: PUSH
22502: LD_INT 102
22504: PUSH
22505: LD_INT 105
22507: PUSH
22508: LD_INT 106
22510: PUSH
22511: LD_INT 108
22513: PUSH
22514: LD_INT 109
22516: PUSH
22517: LD_INT 112
22519: PUSH
22520: LD_INT 116
22522: PUSH
22523: LD_INT 117
22525: PUSH
22526: LD_INT 118
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: ST_TO_ADDR
22545: GO 25208
22547: LD_INT 6
22549: DOUBLE
22550: EQUAL
22551: IFTRUE 22555
22553: GO 22687
22555: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22556: LD_ADDR_VAR 0 2
22560: PUSH
22561: LD_INT 2
22563: PUSH
22564: LD_INT 4
22566: PUSH
22567: LD_INT 5
22569: PUSH
22570: LD_INT 6
22572: PUSH
22573: LD_INT 8
22575: PUSH
22576: LD_INT 11
22578: PUSH
22579: LD_INT 12
22581: PUSH
22582: LD_INT 15
22584: PUSH
22585: LD_INT 16
22587: PUSH
22588: LD_INT 20
22590: PUSH
22591: LD_INT 21
22593: PUSH
22594: LD_INT 22
22596: PUSH
22597: LD_INT 23
22599: PUSH
22600: LD_INT 25
22602: PUSH
22603: LD_INT 26
22605: PUSH
22606: LD_INT 30
22608: PUSH
22609: LD_INT 31
22611: PUSH
22612: LD_INT 32
22614: PUSH
22615: LD_INT 36
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 101
22641: PUSH
22642: LD_INT 102
22644: PUSH
22645: LD_INT 105
22647: PUSH
22648: LD_INT 106
22650: PUSH
22651: LD_INT 108
22653: PUSH
22654: LD_INT 109
22656: PUSH
22657: LD_INT 112
22659: PUSH
22660: LD_INT 116
22662: PUSH
22663: LD_INT 117
22665: PUSH
22666: LD_INT 118
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: ST_TO_ADDR
22685: GO 25208
22687: LD_INT 7
22689: DOUBLE
22690: EQUAL
22691: IFTRUE 22695
22693: GO 22807
22695: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22696: LD_ADDR_VAR 0 2
22700: PUSH
22701: LD_INT 2
22703: PUSH
22704: LD_INT 4
22706: PUSH
22707: LD_INT 5
22709: PUSH
22710: LD_INT 7
22712: PUSH
22713: LD_INT 11
22715: PUSH
22716: LD_INT 12
22718: PUSH
22719: LD_INT 15
22721: PUSH
22722: LD_INT 16
22724: PUSH
22725: LD_INT 20
22727: PUSH
22728: LD_INT 21
22730: PUSH
22731: LD_INT 22
22733: PUSH
22734: LD_INT 23
22736: PUSH
22737: LD_INT 25
22739: PUSH
22740: LD_INT 26
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 101
22761: PUSH
22762: LD_INT 102
22764: PUSH
22765: LD_INT 103
22767: PUSH
22768: LD_INT 105
22770: PUSH
22771: LD_INT 106
22773: PUSH
22774: LD_INT 108
22776: PUSH
22777: LD_INT 112
22779: PUSH
22780: LD_INT 116
22782: PUSH
22783: LD_INT 117
22785: PUSH
22786: LD_INT 118
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: ST_TO_ADDR
22805: GO 25208
22807: LD_INT 8
22809: DOUBLE
22810: EQUAL
22811: IFTRUE 22815
22813: GO 22955
22815: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22816: LD_ADDR_VAR 0 2
22820: PUSH
22821: LD_INT 2
22823: PUSH
22824: LD_INT 4
22826: PUSH
22827: LD_INT 5
22829: PUSH
22830: LD_INT 6
22832: PUSH
22833: LD_INT 7
22835: PUSH
22836: LD_INT 8
22838: PUSH
22839: LD_INT 11
22841: PUSH
22842: LD_INT 12
22844: PUSH
22845: LD_INT 15
22847: PUSH
22848: LD_INT 16
22850: PUSH
22851: LD_INT 20
22853: PUSH
22854: LD_INT 21
22856: PUSH
22857: LD_INT 22
22859: PUSH
22860: LD_INT 23
22862: PUSH
22863: LD_INT 25
22865: PUSH
22866: LD_INT 26
22868: PUSH
22869: LD_INT 30
22871: PUSH
22872: LD_INT 31
22874: PUSH
22875: LD_INT 32
22877: PUSH
22878: LD_INT 36
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 101
22905: PUSH
22906: LD_INT 102
22908: PUSH
22909: LD_INT 103
22911: PUSH
22912: LD_INT 105
22914: PUSH
22915: LD_INT 106
22917: PUSH
22918: LD_INT 108
22920: PUSH
22921: LD_INT 109
22923: PUSH
22924: LD_INT 112
22926: PUSH
22927: LD_INT 116
22929: PUSH
22930: LD_INT 117
22932: PUSH
22933: LD_INT 118
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: ST_TO_ADDR
22953: GO 25208
22955: LD_INT 9
22957: DOUBLE
22958: EQUAL
22959: IFTRUE 22963
22961: GO 23111
22963: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22964: LD_ADDR_VAR 0 2
22968: PUSH
22969: LD_INT 2
22971: PUSH
22972: LD_INT 4
22974: PUSH
22975: LD_INT 5
22977: PUSH
22978: LD_INT 6
22980: PUSH
22981: LD_INT 7
22983: PUSH
22984: LD_INT 8
22986: PUSH
22987: LD_INT 11
22989: PUSH
22990: LD_INT 12
22992: PUSH
22993: LD_INT 15
22995: PUSH
22996: LD_INT 16
22998: PUSH
22999: LD_INT 20
23001: PUSH
23002: LD_INT 21
23004: PUSH
23005: LD_INT 22
23007: PUSH
23008: LD_INT 23
23010: PUSH
23011: LD_INT 25
23013: PUSH
23014: LD_INT 26
23016: PUSH
23017: LD_INT 28
23019: PUSH
23020: LD_INT 30
23022: PUSH
23023: LD_INT 31
23025: PUSH
23026: LD_INT 32
23028: PUSH
23029: LD_INT 36
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 101
23057: PUSH
23058: LD_INT 102
23060: PUSH
23061: LD_INT 103
23063: PUSH
23064: LD_INT 105
23066: PUSH
23067: LD_INT 106
23069: PUSH
23070: LD_INT 108
23072: PUSH
23073: LD_INT 109
23075: PUSH
23076: LD_INT 112
23078: PUSH
23079: LD_INT 114
23081: PUSH
23082: LD_INT 116
23084: PUSH
23085: LD_INT 117
23087: PUSH
23088: LD_INT 118
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: ST_TO_ADDR
23109: GO 25208
23111: LD_INT 10
23113: DOUBLE
23114: EQUAL
23115: IFTRUE 23119
23117: GO 23315
23119: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23120: LD_ADDR_VAR 0 2
23124: PUSH
23125: LD_INT 2
23127: PUSH
23128: LD_INT 4
23130: PUSH
23131: LD_INT 5
23133: PUSH
23134: LD_INT 6
23136: PUSH
23137: LD_INT 7
23139: PUSH
23140: LD_INT 8
23142: PUSH
23143: LD_INT 9
23145: PUSH
23146: LD_INT 10
23148: PUSH
23149: LD_INT 11
23151: PUSH
23152: LD_INT 12
23154: PUSH
23155: LD_INT 13
23157: PUSH
23158: LD_INT 14
23160: PUSH
23161: LD_INT 15
23163: PUSH
23164: LD_INT 16
23166: PUSH
23167: LD_INT 17
23169: PUSH
23170: LD_INT 18
23172: PUSH
23173: LD_INT 19
23175: PUSH
23176: LD_INT 20
23178: PUSH
23179: LD_INT 21
23181: PUSH
23182: LD_INT 22
23184: PUSH
23185: LD_INT 23
23187: PUSH
23188: LD_INT 24
23190: PUSH
23191: LD_INT 25
23193: PUSH
23194: LD_INT 26
23196: PUSH
23197: LD_INT 28
23199: PUSH
23200: LD_INT 30
23202: PUSH
23203: LD_INT 31
23205: PUSH
23206: LD_INT 32
23208: PUSH
23209: LD_INT 36
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 101
23245: PUSH
23246: LD_INT 102
23248: PUSH
23249: LD_INT 103
23251: PUSH
23252: LD_INT 104
23254: PUSH
23255: LD_INT 105
23257: PUSH
23258: LD_INT 106
23260: PUSH
23261: LD_INT 107
23263: PUSH
23264: LD_INT 108
23266: PUSH
23267: LD_INT 109
23269: PUSH
23270: LD_INT 110
23272: PUSH
23273: LD_INT 111
23275: PUSH
23276: LD_INT 112
23278: PUSH
23279: LD_INT 114
23281: PUSH
23282: LD_INT 116
23284: PUSH
23285: LD_INT 117
23287: PUSH
23288: LD_INT 118
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: ST_TO_ADDR
23313: GO 25208
23315: LD_INT 11
23317: DOUBLE
23318: EQUAL
23319: IFTRUE 23323
23321: GO 23527
23323: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23324: LD_ADDR_VAR 0 2
23328: PUSH
23329: LD_INT 2
23331: PUSH
23332: LD_INT 3
23334: PUSH
23335: LD_INT 4
23337: PUSH
23338: LD_INT 5
23340: PUSH
23341: LD_INT 6
23343: PUSH
23344: LD_INT 7
23346: PUSH
23347: LD_INT 8
23349: PUSH
23350: LD_INT 9
23352: PUSH
23353: LD_INT 10
23355: PUSH
23356: LD_INT 11
23358: PUSH
23359: LD_INT 12
23361: PUSH
23362: LD_INT 13
23364: PUSH
23365: LD_INT 14
23367: PUSH
23368: LD_INT 15
23370: PUSH
23371: LD_INT 16
23373: PUSH
23374: LD_INT 17
23376: PUSH
23377: LD_INT 18
23379: PUSH
23380: LD_INT 19
23382: PUSH
23383: LD_INT 20
23385: PUSH
23386: LD_INT 21
23388: PUSH
23389: LD_INT 22
23391: PUSH
23392: LD_INT 23
23394: PUSH
23395: LD_INT 24
23397: PUSH
23398: LD_INT 25
23400: PUSH
23401: LD_INT 26
23403: PUSH
23404: LD_INT 28
23406: PUSH
23407: LD_INT 30
23409: PUSH
23410: LD_INT 31
23412: PUSH
23413: LD_INT 32
23415: PUSH
23416: LD_INT 34
23418: PUSH
23419: LD_INT 36
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 101
23457: PUSH
23458: LD_INT 102
23460: PUSH
23461: LD_INT 103
23463: PUSH
23464: LD_INT 104
23466: PUSH
23467: LD_INT 105
23469: PUSH
23470: LD_INT 106
23472: PUSH
23473: LD_INT 107
23475: PUSH
23476: LD_INT 108
23478: PUSH
23479: LD_INT 109
23481: PUSH
23482: LD_INT 110
23484: PUSH
23485: LD_INT 111
23487: PUSH
23488: LD_INT 112
23490: PUSH
23491: LD_INT 114
23493: PUSH
23494: LD_INT 116
23496: PUSH
23497: LD_INT 117
23499: PUSH
23500: LD_INT 118
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: ST_TO_ADDR
23525: GO 25208
23527: LD_INT 12
23529: DOUBLE
23530: EQUAL
23531: IFTRUE 23535
23533: GO 23755
23535: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23536: LD_ADDR_VAR 0 2
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: LD_INT 2
23546: PUSH
23547: LD_INT 3
23549: PUSH
23550: LD_INT 4
23552: PUSH
23553: LD_INT 5
23555: PUSH
23556: LD_INT 6
23558: PUSH
23559: LD_INT 7
23561: PUSH
23562: LD_INT 8
23564: PUSH
23565: LD_INT 9
23567: PUSH
23568: LD_INT 10
23570: PUSH
23571: LD_INT 11
23573: PUSH
23574: LD_INT 12
23576: PUSH
23577: LD_INT 13
23579: PUSH
23580: LD_INT 14
23582: PUSH
23583: LD_INT 15
23585: PUSH
23586: LD_INT 16
23588: PUSH
23589: LD_INT 17
23591: PUSH
23592: LD_INT 18
23594: PUSH
23595: LD_INT 19
23597: PUSH
23598: LD_INT 20
23600: PUSH
23601: LD_INT 21
23603: PUSH
23604: LD_INT 22
23606: PUSH
23607: LD_INT 23
23609: PUSH
23610: LD_INT 24
23612: PUSH
23613: LD_INT 25
23615: PUSH
23616: LD_INT 26
23618: PUSH
23619: LD_INT 27
23621: PUSH
23622: LD_INT 28
23624: PUSH
23625: LD_INT 30
23627: PUSH
23628: LD_INT 31
23630: PUSH
23631: LD_INT 32
23633: PUSH
23634: LD_INT 33
23636: PUSH
23637: LD_INT 34
23639: PUSH
23640: LD_INT 36
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 101
23681: PUSH
23682: LD_INT 102
23684: PUSH
23685: LD_INT 103
23687: PUSH
23688: LD_INT 104
23690: PUSH
23691: LD_INT 105
23693: PUSH
23694: LD_INT 106
23696: PUSH
23697: LD_INT 107
23699: PUSH
23700: LD_INT 108
23702: PUSH
23703: LD_INT 109
23705: PUSH
23706: LD_INT 110
23708: PUSH
23709: LD_INT 111
23711: PUSH
23712: LD_INT 112
23714: PUSH
23715: LD_INT 113
23717: PUSH
23718: LD_INT 114
23720: PUSH
23721: LD_INT 116
23723: PUSH
23724: LD_INT 117
23726: PUSH
23727: LD_INT 118
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: ST_TO_ADDR
23753: GO 25208
23755: LD_INT 13
23757: DOUBLE
23758: EQUAL
23759: IFTRUE 23763
23761: GO 23971
23763: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23764: LD_ADDR_VAR 0 2
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: LD_INT 3
23777: PUSH
23778: LD_INT 4
23780: PUSH
23781: LD_INT 5
23783: PUSH
23784: LD_INT 8
23786: PUSH
23787: LD_INT 9
23789: PUSH
23790: LD_INT 10
23792: PUSH
23793: LD_INT 11
23795: PUSH
23796: LD_INT 12
23798: PUSH
23799: LD_INT 14
23801: PUSH
23802: LD_INT 15
23804: PUSH
23805: LD_INT 16
23807: PUSH
23808: LD_INT 17
23810: PUSH
23811: LD_INT 18
23813: PUSH
23814: LD_INT 19
23816: PUSH
23817: LD_INT 20
23819: PUSH
23820: LD_INT 21
23822: PUSH
23823: LD_INT 22
23825: PUSH
23826: LD_INT 23
23828: PUSH
23829: LD_INT 24
23831: PUSH
23832: LD_INT 25
23834: PUSH
23835: LD_INT 26
23837: PUSH
23838: LD_INT 27
23840: PUSH
23841: LD_INT 28
23843: PUSH
23844: LD_INT 30
23846: PUSH
23847: LD_INT 31
23849: PUSH
23850: LD_INT 32
23852: PUSH
23853: LD_INT 33
23855: PUSH
23856: LD_INT 34
23858: PUSH
23859: LD_INT 36
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 101
23897: PUSH
23898: LD_INT 102
23900: PUSH
23901: LD_INT 103
23903: PUSH
23904: LD_INT 104
23906: PUSH
23907: LD_INT 105
23909: PUSH
23910: LD_INT 106
23912: PUSH
23913: LD_INT 107
23915: PUSH
23916: LD_INT 108
23918: PUSH
23919: LD_INT 109
23921: PUSH
23922: LD_INT 110
23924: PUSH
23925: LD_INT 111
23927: PUSH
23928: LD_INT 112
23930: PUSH
23931: LD_INT 113
23933: PUSH
23934: LD_INT 114
23936: PUSH
23937: LD_INT 116
23939: PUSH
23940: LD_INT 117
23942: PUSH
23943: LD_INT 118
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: ST_TO_ADDR
23969: GO 25208
23971: LD_INT 14
23973: DOUBLE
23974: EQUAL
23975: IFTRUE 23979
23977: GO 24203
23979: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23980: LD_ADDR_VAR 0 2
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: LD_INT 2
23990: PUSH
23991: LD_INT 3
23993: PUSH
23994: LD_INT 4
23996: PUSH
23997: LD_INT 5
23999: PUSH
24000: LD_INT 6
24002: PUSH
24003: LD_INT 7
24005: PUSH
24006: LD_INT 8
24008: PUSH
24009: LD_INT 9
24011: PUSH
24012: LD_INT 10
24014: PUSH
24015: LD_INT 11
24017: PUSH
24018: LD_INT 12
24020: PUSH
24021: LD_INT 13
24023: PUSH
24024: LD_INT 14
24026: PUSH
24027: LD_INT 15
24029: PUSH
24030: LD_INT 16
24032: PUSH
24033: LD_INT 17
24035: PUSH
24036: LD_INT 18
24038: PUSH
24039: LD_INT 19
24041: PUSH
24042: LD_INT 20
24044: PUSH
24045: LD_INT 21
24047: PUSH
24048: LD_INT 22
24050: PUSH
24051: LD_INT 23
24053: PUSH
24054: LD_INT 24
24056: PUSH
24057: LD_INT 25
24059: PUSH
24060: LD_INT 26
24062: PUSH
24063: LD_INT 27
24065: PUSH
24066: LD_INT 28
24068: PUSH
24069: LD_INT 29
24071: PUSH
24072: LD_INT 30
24074: PUSH
24075: LD_INT 31
24077: PUSH
24078: LD_INT 32
24080: PUSH
24081: LD_INT 33
24083: PUSH
24084: LD_INT 34
24086: PUSH
24087: LD_INT 36
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 101
24129: PUSH
24130: LD_INT 102
24132: PUSH
24133: LD_INT 103
24135: PUSH
24136: LD_INT 104
24138: PUSH
24139: LD_INT 105
24141: PUSH
24142: LD_INT 106
24144: PUSH
24145: LD_INT 107
24147: PUSH
24148: LD_INT 108
24150: PUSH
24151: LD_INT 109
24153: PUSH
24154: LD_INT 110
24156: PUSH
24157: LD_INT 111
24159: PUSH
24160: LD_INT 112
24162: PUSH
24163: LD_INT 113
24165: PUSH
24166: LD_INT 114
24168: PUSH
24169: LD_INT 116
24171: PUSH
24172: LD_INT 117
24174: PUSH
24175: LD_INT 118
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: ST_TO_ADDR
24201: GO 25208
24203: LD_INT 15
24205: DOUBLE
24206: EQUAL
24207: IFTRUE 24211
24209: GO 24435
24211: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24212: LD_ADDR_VAR 0 2
24216: PUSH
24217: LD_INT 1
24219: PUSH
24220: LD_INT 2
24222: PUSH
24223: LD_INT 3
24225: PUSH
24226: LD_INT 4
24228: PUSH
24229: LD_INT 5
24231: PUSH
24232: LD_INT 6
24234: PUSH
24235: LD_INT 7
24237: PUSH
24238: LD_INT 8
24240: PUSH
24241: LD_INT 9
24243: PUSH
24244: LD_INT 10
24246: PUSH
24247: LD_INT 11
24249: PUSH
24250: LD_INT 12
24252: PUSH
24253: LD_INT 13
24255: PUSH
24256: LD_INT 14
24258: PUSH
24259: LD_INT 15
24261: PUSH
24262: LD_INT 16
24264: PUSH
24265: LD_INT 17
24267: PUSH
24268: LD_INT 18
24270: PUSH
24271: LD_INT 19
24273: PUSH
24274: LD_INT 20
24276: PUSH
24277: LD_INT 21
24279: PUSH
24280: LD_INT 22
24282: PUSH
24283: LD_INT 23
24285: PUSH
24286: LD_INT 24
24288: PUSH
24289: LD_INT 25
24291: PUSH
24292: LD_INT 26
24294: PUSH
24295: LD_INT 27
24297: PUSH
24298: LD_INT 28
24300: PUSH
24301: LD_INT 29
24303: PUSH
24304: LD_INT 30
24306: PUSH
24307: LD_INT 31
24309: PUSH
24310: LD_INT 32
24312: PUSH
24313: LD_INT 33
24315: PUSH
24316: LD_INT 34
24318: PUSH
24319: LD_INT 36
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 101
24361: PUSH
24362: LD_INT 102
24364: PUSH
24365: LD_INT 103
24367: PUSH
24368: LD_INT 104
24370: PUSH
24371: LD_INT 105
24373: PUSH
24374: LD_INT 106
24376: PUSH
24377: LD_INT 107
24379: PUSH
24380: LD_INT 108
24382: PUSH
24383: LD_INT 109
24385: PUSH
24386: LD_INT 110
24388: PUSH
24389: LD_INT 111
24391: PUSH
24392: LD_INT 112
24394: PUSH
24395: LD_INT 113
24397: PUSH
24398: LD_INT 114
24400: PUSH
24401: LD_INT 116
24403: PUSH
24404: LD_INT 117
24406: PUSH
24407: LD_INT 118
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: ST_TO_ADDR
24433: GO 25208
24435: LD_INT 16
24437: DOUBLE
24438: EQUAL
24439: IFTRUE 24443
24441: GO 24579
24443: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24444: LD_ADDR_VAR 0 2
24448: PUSH
24449: LD_INT 2
24451: PUSH
24452: LD_INT 4
24454: PUSH
24455: LD_INT 5
24457: PUSH
24458: LD_INT 7
24460: PUSH
24461: LD_INT 11
24463: PUSH
24464: LD_INT 12
24466: PUSH
24467: LD_INT 15
24469: PUSH
24470: LD_INT 16
24472: PUSH
24473: LD_INT 20
24475: PUSH
24476: LD_INT 21
24478: PUSH
24479: LD_INT 22
24481: PUSH
24482: LD_INT 23
24484: PUSH
24485: LD_INT 25
24487: PUSH
24488: LD_INT 26
24490: PUSH
24491: LD_INT 30
24493: PUSH
24494: LD_INT 31
24496: PUSH
24497: LD_INT 32
24499: PUSH
24500: LD_INT 33
24502: PUSH
24503: LD_INT 34
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 101
24529: PUSH
24530: LD_INT 102
24532: PUSH
24533: LD_INT 103
24535: PUSH
24536: LD_INT 106
24538: PUSH
24539: LD_INT 108
24541: PUSH
24542: LD_INT 112
24544: PUSH
24545: LD_INT 113
24547: PUSH
24548: LD_INT 114
24550: PUSH
24551: LD_INT 116
24553: PUSH
24554: LD_INT 117
24556: PUSH
24557: LD_INT 118
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: ST_TO_ADDR
24577: GO 25208
24579: LD_INT 17
24581: DOUBLE
24582: EQUAL
24583: IFTRUE 24587
24585: GO 24811
24587: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24588: LD_ADDR_VAR 0 2
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: LD_INT 2
24598: PUSH
24599: LD_INT 3
24601: PUSH
24602: LD_INT 4
24604: PUSH
24605: LD_INT 5
24607: PUSH
24608: LD_INT 6
24610: PUSH
24611: LD_INT 7
24613: PUSH
24614: LD_INT 8
24616: PUSH
24617: LD_INT 9
24619: PUSH
24620: LD_INT 10
24622: PUSH
24623: LD_INT 11
24625: PUSH
24626: LD_INT 12
24628: PUSH
24629: LD_INT 13
24631: PUSH
24632: LD_INT 14
24634: PUSH
24635: LD_INT 15
24637: PUSH
24638: LD_INT 16
24640: PUSH
24641: LD_INT 17
24643: PUSH
24644: LD_INT 18
24646: PUSH
24647: LD_INT 19
24649: PUSH
24650: LD_INT 20
24652: PUSH
24653: LD_INT 21
24655: PUSH
24656: LD_INT 22
24658: PUSH
24659: LD_INT 23
24661: PUSH
24662: LD_INT 24
24664: PUSH
24665: LD_INT 25
24667: PUSH
24668: LD_INT 26
24670: PUSH
24671: LD_INT 27
24673: PUSH
24674: LD_INT 28
24676: PUSH
24677: LD_INT 29
24679: PUSH
24680: LD_INT 30
24682: PUSH
24683: LD_INT 31
24685: PUSH
24686: LD_INT 32
24688: PUSH
24689: LD_INT 33
24691: PUSH
24692: LD_INT 34
24694: PUSH
24695: LD_INT 36
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 101
24737: PUSH
24738: LD_INT 102
24740: PUSH
24741: LD_INT 103
24743: PUSH
24744: LD_INT 104
24746: PUSH
24747: LD_INT 105
24749: PUSH
24750: LD_INT 106
24752: PUSH
24753: LD_INT 107
24755: PUSH
24756: LD_INT 108
24758: PUSH
24759: LD_INT 109
24761: PUSH
24762: LD_INT 110
24764: PUSH
24765: LD_INT 111
24767: PUSH
24768: LD_INT 112
24770: PUSH
24771: LD_INT 113
24773: PUSH
24774: LD_INT 114
24776: PUSH
24777: LD_INT 116
24779: PUSH
24780: LD_INT 117
24782: PUSH
24783: LD_INT 118
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: ST_TO_ADDR
24809: GO 25208
24811: LD_INT 18
24813: DOUBLE
24814: EQUAL
24815: IFTRUE 24819
24817: GO 24967
24819: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24820: LD_ADDR_VAR 0 2
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: LD_INT 4
24830: PUSH
24831: LD_INT 5
24833: PUSH
24834: LD_INT 7
24836: PUSH
24837: LD_INT 11
24839: PUSH
24840: LD_INT 12
24842: PUSH
24843: LD_INT 15
24845: PUSH
24846: LD_INT 16
24848: PUSH
24849: LD_INT 20
24851: PUSH
24852: LD_INT 21
24854: PUSH
24855: LD_INT 22
24857: PUSH
24858: LD_INT 23
24860: PUSH
24861: LD_INT 25
24863: PUSH
24864: LD_INT 26
24866: PUSH
24867: LD_INT 30
24869: PUSH
24870: LD_INT 31
24872: PUSH
24873: LD_INT 32
24875: PUSH
24876: LD_INT 33
24878: PUSH
24879: LD_INT 34
24881: PUSH
24882: LD_INT 35
24884: PUSH
24885: LD_INT 36
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 101
24913: PUSH
24914: LD_INT 102
24916: PUSH
24917: LD_INT 103
24919: PUSH
24920: LD_INT 106
24922: PUSH
24923: LD_INT 108
24925: PUSH
24926: LD_INT 112
24928: PUSH
24929: LD_INT 113
24931: PUSH
24932: LD_INT 114
24934: PUSH
24935: LD_INT 115
24937: PUSH
24938: LD_INT 116
24940: PUSH
24941: LD_INT 117
24943: PUSH
24944: LD_INT 118
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: ST_TO_ADDR
24965: GO 25208
24967: LD_INT 19
24969: DOUBLE
24970: EQUAL
24971: IFTRUE 24975
24973: GO 25207
24975: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24976: LD_ADDR_VAR 0 2
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: LD_INT 2
24986: PUSH
24987: LD_INT 3
24989: PUSH
24990: LD_INT 4
24992: PUSH
24993: LD_INT 5
24995: PUSH
24996: LD_INT 6
24998: PUSH
24999: LD_INT 7
25001: PUSH
25002: LD_INT 8
25004: PUSH
25005: LD_INT 9
25007: PUSH
25008: LD_INT 10
25010: PUSH
25011: LD_INT 11
25013: PUSH
25014: LD_INT 12
25016: PUSH
25017: LD_INT 13
25019: PUSH
25020: LD_INT 14
25022: PUSH
25023: LD_INT 15
25025: PUSH
25026: LD_INT 16
25028: PUSH
25029: LD_INT 17
25031: PUSH
25032: LD_INT 18
25034: PUSH
25035: LD_INT 19
25037: PUSH
25038: LD_INT 20
25040: PUSH
25041: LD_INT 21
25043: PUSH
25044: LD_INT 22
25046: PUSH
25047: LD_INT 23
25049: PUSH
25050: LD_INT 24
25052: PUSH
25053: LD_INT 25
25055: PUSH
25056: LD_INT 26
25058: PUSH
25059: LD_INT 27
25061: PUSH
25062: LD_INT 28
25064: PUSH
25065: LD_INT 29
25067: PUSH
25068: LD_INT 30
25070: PUSH
25071: LD_INT 31
25073: PUSH
25074: LD_INT 32
25076: PUSH
25077: LD_INT 33
25079: PUSH
25080: LD_INT 34
25082: PUSH
25083: LD_INT 35
25085: PUSH
25086: LD_INT 36
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 101
25129: PUSH
25130: LD_INT 102
25132: PUSH
25133: LD_INT 103
25135: PUSH
25136: LD_INT 104
25138: PUSH
25139: LD_INT 105
25141: PUSH
25142: LD_INT 106
25144: PUSH
25145: LD_INT 107
25147: PUSH
25148: LD_INT 108
25150: PUSH
25151: LD_INT 109
25153: PUSH
25154: LD_INT 110
25156: PUSH
25157: LD_INT 111
25159: PUSH
25160: LD_INT 112
25162: PUSH
25163: LD_INT 113
25165: PUSH
25166: LD_INT 114
25168: PUSH
25169: LD_INT 115
25171: PUSH
25172: LD_INT 116
25174: PUSH
25175: LD_INT 117
25177: PUSH
25178: LD_INT 118
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: ST_TO_ADDR
25205: GO 25208
25207: POP
// end else
25208: GO 25439
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25210: LD_ADDR_VAR 0 2
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: LD_INT 2
25220: PUSH
25221: LD_INT 3
25223: PUSH
25224: LD_INT 4
25226: PUSH
25227: LD_INT 5
25229: PUSH
25230: LD_INT 6
25232: PUSH
25233: LD_INT 7
25235: PUSH
25236: LD_INT 8
25238: PUSH
25239: LD_INT 9
25241: PUSH
25242: LD_INT 10
25244: PUSH
25245: LD_INT 11
25247: PUSH
25248: LD_INT 12
25250: PUSH
25251: LD_INT 13
25253: PUSH
25254: LD_INT 14
25256: PUSH
25257: LD_INT 15
25259: PUSH
25260: LD_INT 16
25262: PUSH
25263: LD_INT 17
25265: PUSH
25266: LD_INT 18
25268: PUSH
25269: LD_INT 19
25271: PUSH
25272: LD_INT 20
25274: PUSH
25275: LD_INT 21
25277: PUSH
25278: LD_INT 22
25280: PUSH
25281: LD_INT 23
25283: PUSH
25284: LD_INT 24
25286: PUSH
25287: LD_INT 25
25289: PUSH
25290: LD_INT 26
25292: PUSH
25293: LD_INT 27
25295: PUSH
25296: LD_INT 28
25298: PUSH
25299: LD_INT 29
25301: PUSH
25302: LD_INT 30
25304: PUSH
25305: LD_INT 31
25307: PUSH
25308: LD_INT 32
25310: PUSH
25311: LD_INT 33
25313: PUSH
25314: LD_INT 34
25316: PUSH
25317: LD_INT 35
25319: PUSH
25320: LD_INT 36
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 101
25363: PUSH
25364: LD_INT 102
25366: PUSH
25367: LD_INT 103
25369: PUSH
25370: LD_INT 104
25372: PUSH
25373: LD_INT 105
25375: PUSH
25376: LD_INT 106
25378: PUSH
25379: LD_INT 107
25381: PUSH
25382: LD_INT 108
25384: PUSH
25385: LD_INT 109
25387: PUSH
25388: LD_INT 110
25390: PUSH
25391: LD_INT 111
25393: PUSH
25394: LD_INT 112
25396: PUSH
25397: LD_INT 113
25399: PUSH
25400: LD_INT 114
25402: PUSH
25403: LD_INT 115
25405: PUSH
25406: LD_INT 116
25408: PUSH
25409: LD_INT 117
25411: PUSH
25412: LD_INT 118
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: ST_TO_ADDR
// if result then
25439: LD_VAR 0 2
25443: IFFALSE 26229
// begin normal :=  ;
25445: LD_ADDR_VAR 0 5
25449: PUSH
25450: LD_STRING 
25452: ST_TO_ADDR
// hardcore :=  ;
25453: LD_ADDR_VAR 0 6
25457: PUSH
25458: LD_STRING 
25460: ST_TO_ADDR
// active :=  ;
25461: LD_ADDR_VAR 0 7
25465: PUSH
25466: LD_STRING 
25468: ST_TO_ADDR
// for i = 1 to normalCounter do
25469: LD_ADDR_VAR 0 8
25473: PUSH
25474: DOUBLE
25475: LD_INT 1
25477: DEC
25478: ST_TO_ADDR
25479: LD_EXP 39
25483: PUSH
25484: FOR_TO
25485: IFFALSE 25586
// begin tmp := 0 ;
25487: LD_ADDR_VAR 0 3
25491: PUSH
25492: LD_STRING 0
25494: ST_TO_ADDR
// if result [ 1 ] then
25495: LD_VAR 0 2
25499: PUSH
25500: LD_INT 1
25502: ARRAY
25503: IFFALSE 25568
// if result [ 1 ] [ 1 ] = i then
25505: LD_VAR 0 2
25509: PUSH
25510: LD_INT 1
25512: ARRAY
25513: PUSH
25514: LD_INT 1
25516: ARRAY
25517: PUSH
25518: LD_VAR 0 8
25522: EQUAL
25523: IFFALSE 25568
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25525: LD_ADDR_VAR 0 2
25529: PUSH
25530: LD_VAR 0 2
25534: PPUSH
25535: LD_INT 1
25537: PPUSH
25538: LD_VAR 0 2
25542: PUSH
25543: LD_INT 1
25545: ARRAY
25546: PPUSH
25547: LD_INT 1
25549: PPUSH
25550: CALL_OW 3
25554: PPUSH
25555: CALL_OW 1
25559: ST_TO_ADDR
// tmp := 1 ;
25560: LD_ADDR_VAR 0 3
25564: PUSH
25565: LD_STRING 1
25567: ST_TO_ADDR
// end ; normal := normal & tmp ;
25568: LD_ADDR_VAR 0 5
25572: PUSH
25573: LD_VAR 0 5
25577: PUSH
25578: LD_VAR 0 3
25582: STR
25583: ST_TO_ADDR
// end ;
25584: GO 25484
25586: POP
25587: POP
// for i = 1 to hardcoreCounter do
25588: LD_ADDR_VAR 0 8
25592: PUSH
25593: DOUBLE
25594: LD_INT 1
25596: DEC
25597: ST_TO_ADDR
25598: LD_EXP 40
25602: PUSH
25603: FOR_TO
25604: IFFALSE 25709
// begin tmp := 0 ;
25606: LD_ADDR_VAR 0 3
25610: PUSH
25611: LD_STRING 0
25613: ST_TO_ADDR
// if result [ 2 ] then
25614: LD_VAR 0 2
25618: PUSH
25619: LD_INT 2
25621: ARRAY
25622: IFFALSE 25691
// if result [ 2 ] [ 1 ] = 100 + i then
25624: LD_VAR 0 2
25628: PUSH
25629: LD_INT 2
25631: ARRAY
25632: PUSH
25633: LD_INT 1
25635: ARRAY
25636: PUSH
25637: LD_INT 100
25639: PUSH
25640: LD_VAR 0 8
25644: PLUS
25645: EQUAL
25646: IFFALSE 25691
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25648: LD_ADDR_VAR 0 2
25652: PUSH
25653: LD_VAR 0 2
25657: PPUSH
25658: LD_INT 2
25660: PPUSH
25661: LD_VAR 0 2
25665: PUSH
25666: LD_INT 2
25668: ARRAY
25669: PPUSH
25670: LD_INT 1
25672: PPUSH
25673: CALL_OW 3
25677: PPUSH
25678: CALL_OW 1
25682: ST_TO_ADDR
// tmp := 1 ;
25683: LD_ADDR_VAR 0 3
25687: PUSH
25688: LD_STRING 1
25690: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25691: LD_ADDR_VAR 0 6
25695: PUSH
25696: LD_VAR 0 6
25700: PUSH
25701: LD_VAR 0 3
25705: STR
25706: ST_TO_ADDR
// end ;
25707: GO 25603
25709: POP
25710: POP
// if isGameLoad then
25711: LD_VAR 0 1
25715: IFFALSE 26190
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25717: LD_ADDR_VAR 0 4
25721: PUSH
25722: LD_EXP 43
25726: PUSH
25727: LD_EXP 42
25731: PUSH
25732: LD_EXP 44
25736: PUSH
25737: LD_EXP 41
25741: PUSH
25742: LD_EXP 45
25746: PUSH
25747: LD_EXP 46
25751: PUSH
25752: LD_EXP 47
25756: PUSH
25757: LD_EXP 48
25761: PUSH
25762: LD_EXP 49
25766: PUSH
25767: LD_EXP 50
25771: PUSH
25772: LD_EXP 51
25776: PUSH
25777: LD_EXP 52
25781: PUSH
25782: LD_EXP 53
25786: PUSH
25787: LD_EXP 54
25791: PUSH
25792: LD_EXP 62
25796: PUSH
25797: LD_EXP 63
25801: PUSH
25802: LD_EXP 64
25806: PUSH
25807: LD_EXP 65
25811: PUSH
25812: LD_EXP 67
25816: PUSH
25817: LD_EXP 68
25821: PUSH
25822: LD_EXP 69
25826: PUSH
25827: LD_EXP 72
25831: PUSH
25832: LD_EXP 74
25836: PUSH
25837: LD_EXP 75
25841: PUSH
25842: LD_EXP 76
25846: PUSH
25847: LD_EXP 78
25851: PUSH
25852: LD_EXP 79
25856: PUSH
25857: LD_EXP 82
25861: PUSH
25862: LD_EXP 83
25866: PUSH
25867: LD_EXP 84
25871: PUSH
25872: LD_EXP 85
25876: PUSH
25877: LD_EXP 86
25881: PUSH
25882: LD_EXP 87
25886: PUSH
25887: LD_EXP 88
25891: PUSH
25892: LD_EXP 89
25896: PUSH
25897: LD_EXP 90
25901: PUSH
25902: LD_EXP 55
25906: PUSH
25907: LD_EXP 56
25911: PUSH
25912: LD_EXP 59
25916: PUSH
25917: LD_EXP 60
25921: PUSH
25922: LD_EXP 61
25926: PUSH
25927: LD_EXP 57
25931: PUSH
25932: LD_EXP 58
25936: PUSH
25937: LD_EXP 66
25941: PUSH
25942: LD_EXP 70
25946: PUSH
25947: LD_EXP 71
25951: PUSH
25952: LD_EXP 73
25956: PUSH
25957: LD_EXP 77
25961: PUSH
25962: LD_EXP 80
25966: PUSH
25967: LD_EXP 81
25971: PUSH
25972: LD_EXP 91
25976: PUSH
25977: LD_EXP 92
25981: PUSH
25982: LD_EXP 93
25986: PUSH
25987: LD_EXP 94
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: ST_TO_ADDR
// tmp :=  ;
26048: LD_ADDR_VAR 0 3
26052: PUSH
26053: LD_STRING 
26055: ST_TO_ADDR
// for i = 1 to normalCounter do
26056: LD_ADDR_VAR 0 8
26060: PUSH
26061: DOUBLE
26062: LD_INT 1
26064: DEC
26065: ST_TO_ADDR
26066: LD_EXP 39
26070: PUSH
26071: FOR_TO
26072: IFFALSE 26108
// begin if flags [ i ] then
26074: LD_VAR 0 4
26078: PUSH
26079: LD_VAR 0 8
26083: ARRAY
26084: IFFALSE 26106
// tmp := tmp & i & ; ;
26086: LD_ADDR_VAR 0 3
26090: PUSH
26091: LD_VAR 0 3
26095: PUSH
26096: LD_VAR 0 8
26100: STR
26101: PUSH
26102: LD_STRING ;
26104: STR
26105: ST_TO_ADDR
// end ;
26106: GO 26071
26108: POP
26109: POP
// for i = 1 to hardcoreCounter do
26110: LD_ADDR_VAR 0 8
26114: PUSH
26115: DOUBLE
26116: LD_INT 1
26118: DEC
26119: ST_TO_ADDR
26120: LD_EXP 40
26124: PUSH
26125: FOR_TO
26126: IFFALSE 26172
// begin if flags [ normalCounter + i ] then
26128: LD_VAR 0 4
26132: PUSH
26133: LD_EXP 39
26137: PUSH
26138: LD_VAR 0 8
26142: PLUS
26143: ARRAY
26144: IFFALSE 26170
// tmp := tmp & ( 100 + i ) & ; ;
26146: LD_ADDR_VAR 0 3
26150: PUSH
26151: LD_VAR 0 3
26155: PUSH
26156: LD_INT 100
26158: PUSH
26159: LD_VAR 0 8
26163: PLUS
26164: STR
26165: PUSH
26166: LD_STRING ;
26168: STR
26169: ST_TO_ADDR
// end ;
26170: GO 26125
26172: POP
26173: POP
// if tmp then
26174: LD_VAR 0 3
26178: IFFALSE 26190
// active := tmp ;
26180: LD_ADDR_VAR 0 7
26184: PUSH
26185: LD_VAR 0 3
26189: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26190: LD_STRING getStreamItemsFromMission("
26192: PUSH
26193: LD_VAR 0 5
26197: STR
26198: PUSH
26199: LD_STRING ","
26201: STR
26202: PUSH
26203: LD_VAR 0 6
26207: STR
26208: PUSH
26209: LD_STRING ","
26211: STR
26212: PUSH
26213: LD_VAR 0 7
26217: STR
26218: PUSH
26219: LD_STRING ")
26221: STR
26222: PPUSH
26223: CALL_OW 559
// end else
26227: GO 26236
// ToLua ( getStreamItemsFromMission("","","") ) ;
26229: LD_STRING getStreamItemsFromMission("","","")
26231: PPUSH
26232: CALL_OW 559
// end ;
26236: LD_VAR 0 2
26240: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26241: LD_EXP 38
26245: PUSH
26246: LD_EXP 43
26250: AND
26251: IFFALSE 26375
26253: GO 26255
26255: DISABLE
26256: LD_INT 0
26258: PPUSH
26259: PPUSH
// begin enable ;
26260: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26261: LD_ADDR_VAR 0 2
26265: PUSH
26266: LD_INT 22
26268: PUSH
26269: LD_OWVAR 2
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 2
26280: PUSH
26281: LD_INT 34
26283: PUSH
26284: LD_INT 7
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 34
26293: PUSH
26294: LD_INT 45
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 34
26303: PUSH
26304: LD_INT 28
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 34
26313: PUSH
26314: LD_INT 47
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PPUSH
26332: CALL_OW 69
26336: ST_TO_ADDR
// if not tmp then
26337: LD_VAR 0 2
26341: NOT
26342: IFFALSE 26346
// exit ;
26344: GO 26375
// for i in tmp do
26346: LD_ADDR_VAR 0 1
26350: PUSH
26351: LD_VAR 0 2
26355: PUSH
26356: FOR_IN
26357: IFFALSE 26373
// begin SetLives ( i , 0 ) ;
26359: LD_VAR 0 1
26363: PPUSH
26364: LD_INT 0
26366: PPUSH
26367: CALL_OW 234
// end ;
26371: GO 26356
26373: POP
26374: POP
// end ;
26375: PPOPN 2
26377: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26378: LD_EXP 38
26382: PUSH
26383: LD_EXP 44
26387: AND
26388: IFFALSE 26472
26390: GO 26392
26392: DISABLE
26393: LD_INT 0
26395: PPUSH
26396: PPUSH
// begin enable ;
26397: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26398: LD_ADDR_VAR 0 2
26402: PUSH
26403: LD_INT 22
26405: PUSH
26406: LD_OWVAR 2
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 32
26417: PUSH
26418: LD_INT 3
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PPUSH
26429: CALL_OW 69
26433: ST_TO_ADDR
// if not tmp then
26434: LD_VAR 0 2
26438: NOT
26439: IFFALSE 26443
// exit ;
26441: GO 26472
// for i in tmp do
26443: LD_ADDR_VAR 0 1
26447: PUSH
26448: LD_VAR 0 2
26452: PUSH
26453: FOR_IN
26454: IFFALSE 26470
// begin SetLives ( i , 0 ) ;
26456: LD_VAR 0 1
26460: PPUSH
26461: LD_INT 0
26463: PPUSH
26464: CALL_OW 234
// end ;
26468: GO 26453
26470: POP
26471: POP
// end ;
26472: PPOPN 2
26474: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26475: LD_EXP 38
26479: PUSH
26480: LD_EXP 41
26484: AND
26485: IFFALSE 26578
26487: GO 26489
26489: DISABLE
26490: LD_INT 0
26492: PPUSH
// begin enable ;
26493: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26494: LD_ADDR_VAR 0 1
26498: PUSH
26499: LD_INT 22
26501: PUSH
26502: LD_OWVAR 2
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 2
26513: PUSH
26514: LD_INT 25
26516: PUSH
26517: LD_INT 5
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 25
26526: PUSH
26527: LD_INT 9
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 25
26536: PUSH
26537: LD_INT 8
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PPUSH
26554: CALL_OW 69
26558: PUSH
26559: FOR_IN
26560: IFFALSE 26576
// begin SetClass ( i , 1 ) ;
26562: LD_VAR 0 1
26566: PPUSH
26567: LD_INT 1
26569: PPUSH
26570: CALL_OW 336
// end ;
26574: GO 26559
26576: POP
26577: POP
// end ;
26578: PPOPN 1
26580: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26581: LD_EXP 38
26585: PUSH
26586: LD_EXP 42
26590: AND
26591: PUSH
26592: LD_OWVAR 65
26596: PUSH
26597: LD_INT 7
26599: LESS
26600: AND
26601: IFFALSE 26615
26603: GO 26605
26605: DISABLE
// begin enable ;
26606: ENABLE
// game_speed := 7 ;
26607: LD_ADDR_OWVAR 65
26611: PUSH
26612: LD_INT 7
26614: ST_TO_ADDR
// end ;
26615: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26616: LD_EXP 38
26620: PUSH
26621: LD_EXP 45
26625: AND
26626: IFFALSE 26828
26628: GO 26630
26630: DISABLE
26631: LD_INT 0
26633: PPUSH
26634: PPUSH
26635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26636: LD_ADDR_VAR 0 3
26640: PUSH
26641: LD_INT 81
26643: PUSH
26644: LD_OWVAR 2
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 21
26655: PUSH
26656: LD_INT 1
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PPUSH
26667: CALL_OW 69
26671: ST_TO_ADDR
// if not tmp then
26672: LD_VAR 0 3
26676: NOT
26677: IFFALSE 26681
// exit ;
26679: GO 26828
// if tmp > 5 then
26681: LD_VAR 0 3
26685: PUSH
26686: LD_INT 5
26688: GREATER
26689: IFFALSE 26701
// k := 5 else
26691: LD_ADDR_VAR 0 2
26695: PUSH
26696: LD_INT 5
26698: ST_TO_ADDR
26699: GO 26711
// k := tmp ;
26701: LD_ADDR_VAR 0 2
26705: PUSH
26706: LD_VAR 0 3
26710: ST_TO_ADDR
// for i := 1 to k do
26711: LD_ADDR_VAR 0 1
26715: PUSH
26716: DOUBLE
26717: LD_INT 1
26719: DEC
26720: ST_TO_ADDR
26721: LD_VAR 0 2
26725: PUSH
26726: FOR_TO
26727: IFFALSE 26826
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26729: LD_VAR 0 3
26733: PUSH
26734: LD_VAR 0 1
26738: ARRAY
26739: PPUSH
26740: LD_VAR 0 1
26744: PUSH
26745: LD_INT 4
26747: MOD
26748: PUSH
26749: LD_INT 1
26751: PLUS
26752: PPUSH
26753: CALL_OW 259
26757: PUSH
26758: LD_INT 10
26760: LESS
26761: IFFALSE 26824
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26763: LD_VAR 0 3
26767: PUSH
26768: LD_VAR 0 1
26772: ARRAY
26773: PPUSH
26774: LD_VAR 0 1
26778: PUSH
26779: LD_INT 4
26781: MOD
26782: PUSH
26783: LD_INT 1
26785: PLUS
26786: PPUSH
26787: LD_VAR 0 3
26791: PUSH
26792: LD_VAR 0 1
26796: ARRAY
26797: PPUSH
26798: LD_VAR 0 1
26802: PUSH
26803: LD_INT 4
26805: MOD
26806: PUSH
26807: LD_INT 1
26809: PLUS
26810: PPUSH
26811: CALL_OW 259
26815: PUSH
26816: LD_INT 1
26818: PLUS
26819: PPUSH
26820: CALL_OW 237
26824: GO 26726
26826: POP
26827: POP
// end ;
26828: PPOPN 3
26830: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26831: LD_EXP 38
26835: PUSH
26836: LD_EXP 46
26840: AND
26841: IFFALSE 26861
26843: GO 26845
26845: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26846: LD_INT 4
26848: PPUSH
26849: LD_OWVAR 2
26853: PPUSH
26854: LD_INT 0
26856: PPUSH
26857: CALL_OW 324
26861: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26862: LD_EXP 38
26866: PUSH
26867: LD_EXP 75
26871: AND
26872: IFFALSE 26892
26874: GO 26876
26876: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26877: LD_INT 19
26879: PPUSH
26880: LD_OWVAR 2
26884: PPUSH
26885: LD_INT 0
26887: PPUSH
26888: CALL_OW 324
26892: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26893: LD_EXP 38
26897: PUSH
26898: LD_EXP 47
26902: AND
26903: IFFALSE 27005
26905: GO 26907
26907: DISABLE
26908: LD_INT 0
26910: PPUSH
26911: PPUSH
// begin enable ;
26912: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26913: LD_ADDR_VAR 0 2
26917: PUSH
26918: LD_INT 22
26920: PUSH
26921: LD_OWVAR 2
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 2
26932: PUSH
26933: LD_INT 34
26935: PUSH
26936: LD_INT 11
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 34
26945: PUSH
26946: LD_INT 30
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: LIST
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PPUSH
26962: CALL_OW 69
26966: ST_TO_ADDR
// if not tmp then
26967: LD_VAR 0 2
26971: NOT
26972: IFFALSE 26976
// exit ;
26974: GO 27005
// for i in tmp do
26976: LD_ADDR_VAR 0 1
26980: PUSH
26981: LD_VAR 0 2
26985: PUSH
26986: FOR_IN
26987: IFFALSE 27003
// begin SetLives ( i , 0 ) ;
26989: LD_VAR 0 1
26993: PPUSH
26994: LD_INT 0
26996: PPUSH
26997: CALL_OW 234
// end ;
27001: GO 26986
27003: POP
27004: POP
// end ;
27005: PPOPN 2
27007: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27008: LD_EXP 38
27012: PUSH
27013: LD_EXP 48
27017: AND
27018: IFFALSE 27038
27020: GO 27022
27022: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27023: LD_INT 32
27025: PPUSH
27026: LD_OWVAR 2
27030: PPUSH
27031: LD_INT 0
27033: PPUSH
27034: CALL_OW 324
27038: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27039: LD_EXP 38
27043: PUSH
27044: LD_EXP 49
27048: AND
27049: IFFALSE 27230
27051: GO 27053
27053: DISABLE
27054: LD_INT 0
27056: PPUSH
27057: PPUSH
27058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27059: LD_ADDR_VAR 0 2
27063: PUSH
27064: LD_INT 22
27066: PUSH
27067: LD_OWVAR 2
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 33
27078: PUSH
27079: LD_INT 3
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PPUSH
27090: CALL_OW 69
27094: ST_TO_ADDR
// if not tmp then
27095: LD_VAR 0 2
27099: NOT
27100: IFFALSE 27104
// exit ;
27102: GO 27230
// side := 0 ;
27104: LD_ADDR_VAR 0 3
27108: PUSH
27109: LD_INT 0
27111: ST_TO_ADDR
// for i := 1 to 8 do
27112: LD_ADDR_VAR 0 1
27116: PUSH
27117: DOUBLE
27118: LD_INT 1
27120: DEC
27121: ST_TO_ADDR
27122: LD_INT 8
27124: PUSH
27125: FOR_TO
27126: IFFALSE 27174
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27128: LD_OWVAR 2
27132: PUSH
27133: LD_VAR 0 1
27137: NONEQUAL
27138: PUSH
27139: LD_OWVAR 2
27143: PPUSH
27144: LD_VAR 0 1
27148: PPUSH
27149: CALL_OW 81
27153: PUSH
27154: LD_INT 2
27156: EQUAL
27157: AND
27158: IFFALSE 27172
// begin side := i ;
27160: LD_ADDR_VAR 0 3
27164: PUSH
27165: LD_VAR 0 1
27169: ST_TO_ADDR
// break ;
27170: GO 27174
// end ;
27172: GO 27125
27174: POP
27175: POP
// if not side then
27176: LD_VAR 0 3
27180: NOT
27181: IFFALSE 27185
// exit ;
27183: GO 27230
// for i := 1 to tmp do
27185: LD_ADDR_VAR 0 1
27189: PUSH
27190: DOUBLE
27191: LD_INT 1
27193: DEC
27194: ST_TO_ADDR
27195: LD_VAR 0 2
27199: PUSH
27200: FOR_TO
27201: IFFALSE 27228
// if Prob ( 60 ) then
27203: LD_INT 60
27205: PPUSH
27206: CALL_OW 13
27210: IFFALSE 27226
// SetSide ( i , side ) ;
27212: LD_VAR 0 1
27216: PPUSH
27217: LD_VAR 0 3
27221: PPUSH
27222: CALL_OW 235
27226: GO 27200
27228: POP
27229: POP
// end ;
27230: PPOPN 3
27232: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27233: LD_EXP 38
27237: PUSH
27238: LD_EXP 51
27242: AND
27243: IFFALSE 27362
27245: GO 27247
27247: DISABLE
27248: LD_INT 0
27250: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27251: LD_ADDR_VAR 0 1
27255: PUSH
27256: LD_INT 22
27258: PUSH
27259: LD_OWVAR 2
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 21
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 3
27280: PUSH
27281: LD_INT 23
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: LIST
27299: PPUSH
27300: CALL_OW 69
27304: PUSH
27305: FOR_IN
27306: IFFALSE 27360
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27308: LD_VAR 0 1
27312: PPUSH
27313: CALL_OW 257
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: LD_INT 3
27326: PUSH
27327: LD_INT 4
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: IN
27336: IFFALSE 27358
// SetClass ( un , rand ( 1 , 4 ) ) ;
27338: LD_VAR 0 1
27342: PPUSH
27343: LD_INT 1
27345: PPUSH
27346: LD_INT 4
27348: PPUSH
27349: CALL_OW 12
27353: PPUSH
27354: CALL_OW 336
27358: GO 27305
27360: POP
27361: POP
// end ;
27362: PPOPN 1
27364: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27365: LD_EXP 38
27369: PUSH
27370: LD_EXP 50
27374: AND
27375: IFFALSE 27454
27377: GO 27379
27379: DISABLE
27380: LD_INT 0
27382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27383: LD_ADDR_VAR 0 1
27387: PUSH
27388: LD_INT 22
27390: PUSH
27391: LD_OWVAR 2
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 21
27402: PUSH
27403: LD_INT 3
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PPUSH
27414: CALL_OW 69
27418: ST_TO_ADDR
// if not tmp then
27419: LD_VAR 0 1
27423: NOT
27424: IFFALSE 27428
// exit ;
27426: GO 27454
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27428: LD_VAR 0 1
27432: PUSH
27433: LD_INT 1
27435: PPUSH
27436: LD_VAR 0 1
27440: PPUSH
27441: CALL_OW 12
27445: ARRAY
27446: PPUSH
27447: LD_INT 100
27449: PPUSH
27450: CALL_OW 234
// end ;
27454: PPOPN 1
27456: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27457: LD_EXP 38
27461: PUSH
27462: LD_EXP 52
27466: AND
27467: IFFALSE 27565
27469: GO 27471
27471: DISABLE
27472: LD_INT 0
27474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27475: LD_ADDR_VAR 0 1
27479: PUSH
27480: LD_INT 22
27482: PUSH
27483: LD_OWVAR 2
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 21
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PPUSH
27506: CALL_OW 69
27510: ST_TO_ADDR
// if not tmp then
27511: LD_VAR 0 1
27515: NOT
27516: IFFALSE 27520
// exit ;
27518: GO 27565
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27520: LD_VAR 0 1
27524: PUSH
27525: LD_INT 1
27527: PPUSH
27528: LD_VAR 0 1
27532: PPUSH
27533: CALL_OW 12
27537: ARRAY
27538: PPUSH
27539: LD_INT 1
27541: PPUSH
27542: LD_INT 4
27544: PPUSH
27545: CALL_OW 12
27549: PPUSH
27550: LD_INT 3000
27552: PPUSH
27553: LD_INT 9000
27555: PPUSH
27556: CALL_OW 12
27560: PPUSH
27561: CALL_OW 492
// end ;
27565: PPOPN 1
27567: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27568: LD_EXP 38
27572: PUSH
27573: LD_EXP 53
27577: AND
27578: IFFALSE 27598
27580: GO 27582
27582: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27583: LD_INT 1
27585: PPUSH
27586: LD_OWVAR 2
27590: PPUSH
27591: LD_INT 0
27593: PPUSH
27594: CALL_OW 324
27598: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27599: LD_EXP 38
27603: PUSH
27604: LD_EXP 54
27608: AND
27609: IFFALSE 27692
27611: GO 27613
27613: DISABLE
27614: LD_INT 0
27616: PPUSH
27617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27618: LD_ADDR_VAR 0 2
27622: PUSH
27623: LD_INT 22
27625: PUSH
27626: LD_OWVAR 2
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 21
27637: PUSH
27638: LD_INT 3
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PPUSH
27649: CALL_OW 69
27653: ST_TO_ADDR
// if not tmp then
27654: LD_VAR 0 2
27658: NOT
27659: IFFALSE 27663
// exit ;
27661: GO 27692
// for i in tmp do
27663: LD_ADDR_VAR 0 1
27667: PUSH
27668: LD_VAR 0 2
27672: PUSH
27673: FOR_IN
27674: IFFALSE 27690
// SetBLevel ( i , 10 ) ;
27676: LD_VAR 0 1
27680: PPUSH
27681: LD_INT 10
27683: PPUSH
27684: CALL_OW 241
27688: GO 27673
27690: POP
27691: POP
// end ;
27692: PPOPN 2
27694: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27695: LD_EXP 38
27699: PUSH
27700: LD_EXP 55
27704: AND
27705: IFFALSE 27816
27707: GO 27709
27709: DISABLE
27710: LD_INT 0
27712: PPUSH
27713: PPUSH
27714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27715: LD_ADDR_VAR 0 3
27719: PUSH
27720: LD_INT 22
27722: PUSH
27723: LD_OWVAR 2
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 25
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PPUSH
27746: CALL_OW 69
27750: ST_TO_ADDR
// if not tmp then
27751: LD_VAR 0 3
27755: NOT
27756: IFFALSE 27760
// exit ;
27758: GO 27816
// un := tmp [ rand ( 1 , tmp ) ] ;
27760: LD_ADDR_VAR 0 2
27764: PUSH
27765: LD_VAR 0 3
27769: PUSH
27770: LD_INT 1
27772: PPUSH
27773: LD_VAR 0 3
27777: PPUSH
27778: CALL_OW 12
27782: ARRAY
27783: ST_TO_ADDR
// if Crawls ( un ) then
27784: LD_VAR 0 2
27788: PPUSH
27789: CALL_OW 318
27793: IFFALSE 27804
// ComWalk ( un ) ;
27795: LD_VAR 0 2
27799: PPUSH
27800: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27804: LD_VAR 0 2
27808: PPUSH
27809: LD_INT 5
27811: PPUSH
27812: CALL_OW 336
// end ;
27816: PPOPN 3
27818: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27819: LD_EXP 38
27823: PUSH
27824: LD_EXP 56
27828: AND
27829: PUSH
27830: LD_OWVAR 67
27834: PUSH
27835: LD_INT 4
27837: LESS
27838: AND
27839: IFFALSE 27858
27841: GO 27843
27843: DISABLE
// begin Difficulty := Difficulty + 1 ;
27844: LD_ADDR_OWVAR 67
27848: PUSH
27849: LD_OWVAR 67
27853: PUSH
27854: LD_INT 1
27856: PLUS
27857: ST_TO_ADDR
// end ;
27858: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27859: LD_EXP 38
27863: PUSH
27864: LD_EXP 57
27868: AND
27869: IFFALSE 27972
27871: GO 27873
27873: DISABLE
27874: LD_INT 0
27876: PPUSH
// begin for i := 1 to 5 do
27877: LD_ADDR_VAR 0 1
27881: PUSH
27882: DOUBLE
27883: LD_INT 1
27885: DEC
27886: ST_TO_ADDR
27887: LD_INT 5
27889: PUSH
27890: FOR_TO
27891: IFFALSE 27970
// begin uc_nation := nation_nature ;
27893: LD_ADDR_OWVAR 21
27897: PUSH
27898: LD_INT 0
27900: ST_TO_ADDR
// uc_side := 0 ;
27901: LD_ADDR_OWVAR 20
27905: PUSH
27906: LD_INT 0
27908: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27909: LD_ADDR_OWVAR 29
27913: PUSH
27914: LD_INT 12
27916: PUSH
27917: LD_INT 12
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: ST_TO_ADDR
// hc_agressivity := 20 ;
27924: LD_ADDR_OWVAR 35
27928: PUSH
27929: LD_INT 20
27931: ST_TO_ADDR
// hc_class := class_tiger ;
27932: LD_ADDR_OWVAR 28
27936: PUSH
27937: LD_INT 14
27939: ST_TO_ADDR
// hc_gallery :=  ;
27940: LD_ADDR_OWVAR 33
27944: PUSH
27945: LD_STRING 
27947: ST_TO_ADDR
// hc_name :=  ;
27948: LD_ADDR_OWVAR 26
27952: PUSH
27953: LD_STRING 
27955: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27956: CALL_OW 44
27960: PPUSH
27961: LD_INT 0
27963: PPUSH
27964: CALL_OW 51
// end ;
27968: GO 27890
27970: POP
27971: POP
// end ;
27972: PPOPN 1
27974: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27975: LD_EXP 38
27979: PUSH
27980: LD_EXP 58
27984: AND
27985: IFFALSE 27994
27987: GO 27989
27989: DISABLE
// StreamSibBomb ;
27990: CALL 27995 0 0
27994: END
// export function StreamSibBomb ; var i , x , y ; begin
27995: LD_INT 0
27997: PPUSH
27998: PPUSH
27999: PPUSH
28000: PPUSH
// result := false ;
28001: LD_ADDR_VAR 0 1
28005: PUSH
28006: LD_INT 0
28008: ST_TO_ADDR
// for i := 1 to 16 do
28009: LD_ADDR_VAR 0 2
28013: PUSH
28014: DOUBLE
28015: LD_INT 1
28017: DEC
28018: ST_TO_ADDR
28019: LD_INT 16
28021: PUSH
28022: FOR_TO
28023: IFFALSE 28222
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28025: LD_ADDR_VAR 0 3
28029: PUSH
28030: LD_INT 10
28032: PUSH
28033: LD_INT 20
28035: PUSH
28036: LD_INT 30
28038: PUSH
28039: LD_INT 40
28041: PUSH
28042: LD_INT 50
28044: PUSH
28045: LD_INT 60
28047: PUSH
28048: LD_INT 70
28050: PUSH
28051: LD_INT 80
28053: PUSH
28054: LD_INT 90
28056: PUSH
28057: LD_INT 100
28059: PUSH
28060: LD_INT 110
28062: PUSH
28063: LD_INT 120
28065: PUSH
28066: LD_INT 130
28068: PUSH
28069: LD_INT 140
28071: PUSH
28072: LD_INT 150
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: PPUSH
28095: LD_INT 15
28097: PPUSH
28098: CALL_OW 12
28102: ARRAY
28103: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28104: LD_ADDR_VAR 0 4
28108: PUSH
28109: LD_INT 10
28111: PUSH
28112: LD_INT 20
28114: PUSH
28115: LD_INT 30
28117: PUSH
28118: LD_INT 40
28120: PUSH
28121: LD_INT 50
28123: PUSH
28124: LD_INT 60
28126: PUSH
28127: LD_INT 70
28129: PUSH
28130: LD_INT 80
28132: PUSH
28133: LD_INT 90
28135: PUSH
28136: LD_INT 100
28138: PUSH
28139: LD_INT 110
28141: PUSH
28142: LD_INT 120
28144: PUSH
28145: LD_INT 130
28147: PUSH
28148: LD_INT 140
28150: PUSH
28151: LD_INT 150
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 1
28173: PPUSH
28174: LD_INT 15
28176: PPUSH
28177: CALL_OW 12
28181: ARRAY
28182: ST_TO_ADDR
// if ValidHex ( x , y ) then
28183: LD_VAR 0 3
28187: PPUSH
28188: LD_VAR 0 4
28192: PPUSH
28193: CALL_OW 488
28197: IFFALSE 28220
// begin result := [ x , y ] ;
28199: LD_ADDR_VAR 0 1
28203: PUSH
28204: LD_VAR 0 3
28208: PUSH
28209: LD_VAR 0 4
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: ST_TO_ADDR
// break ;
28218: GO 28222
// end ; end ;
28220: GO 28022
28222: POP
28223: POP
// if result then
28224: LD_VAR 0 1
28228: IFFALSE 28288
// begin ToLua ( playSibBomb() ) ;
28230: LD_STRING playSibBomb()
28232: PPUSH
28233: CALL_OW 559
// wait ( 0 0$14 ) ;
28237: LD_INT 490
28239: PPUSH
28240: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28244: LD_VAR 0 1
28248: PUSH
28249: LD_INT 1
28251: ARRAY
28252: PPUSH
28253: LD_VAR 0 1
28257: PUSH
28258: LD_INT 2
28260: ARRAY
28261: PPUSH
28262: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28266: LD_VAR 0 1
28270: PUSH
28271: LD_INT 1
28273: ARRAY
28274: PPUSH
28275: LD_VAR 0 1
28279: PUSH
28280: LD_INT 2
28282: ARRAY
28283: PPUSH
28284: CALL_OW 429
// end ; end ;
28288: LD_VAR 0 1
28292: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28293: LD_EXP 38
28297: PUSH
28298: LD_EXP 60
28302: AND
28303: IFFALSE 28315
28305: GO 28307
28307: DISABLE
// YouLost (  ) ;
28308: LD_STRING 
28310: PPUSH
28311: CALL_OW 104
28315: END
// every 0 0$1 trigger StreamModeActive and sFog do
28316: LD_EXP 38
28320: PUSH
28321: LD_EXP 59
28325: AND
28326: IFFALSE 28340
28328: GO 28330
28330: DISABLE
// FogOff ( your_side ) ;
28331: LD_OWVAR 2
28335: PPUSH
28336: CALL_OW 344
28340: END
// every 0 0$1 trigger StreamModeActive and sSun do
28341: LD_EXP 38
28345: PUSH
28346: LD_EXP 61
28350: AND
28351: IFFALSE 28379
28353: GO 28355
28355: DISABLE
// begin solar_recharge_percent := 0 ;
28356: LD_ADDR_OWVAR 79
28360: PUSH
28361: LD_INT 0
28363: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28364: LD_INT 10500
28366: PPUSH
28367: CALL_OW 67
// solar_recharge_percent := 100 ;
28371: LD_ADDR_OWVAR 79
28375: PUSH
28376: LD_INT 100
28378: ST_TO_ADDR
// end ;
28379: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28380: LD_EXP 38
28384: PUSH
28385: LD_EXP 62
28389: AND
28390: IFFALSE 28629
28392: GO 28394
28394: DISABLE
28395: LD_INT 0
28397: PPUSH
28398: PPUSH
28399: PPUSH
// begin tmp := [ ] ;
28400: LD_ADDR_VAR 0 3
28404: PUSH
28405: EMPTY
28406: ST_TO_ADDR
// for i := 1 to 6 do
28407: LD_ADDR_VAR 0 1
28411: PUSH
28412: DOUBLE
28413: LD_INT 1
28415: DEC
28416: ST_TO_ADDR
28417: LD_INT 6
28419: PUSH
28420: FOR_TO
28421: IFFALSE 28526
// begin uc_nation := nation_nature ;
28423: LD_ADDR_OWVAR 21
28427: PUSH
28428: LD_INT 0
28430: ST_TO_ADDR
// uc_side := 0 ;
28431: LD_ADDR_OWVAR 20
28435: PUSH
28436: LD_INT 0
28438: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28439: LD_ADDR_OWVAR 29
28443: PUSH
28444: LD_INT 12
28446: PUSH
28447: LD_INT 12
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: ST_TO_ADDR
// hc_agressivity := 20 ;
28454: LD_ADDR_OWVAR 35
28458: PUSH
28459: LD_INT 20
28461: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28462: LD_ADDR_OWVAR 28
28466: PUSH
28467: LD_INT 17
28469: ST_TO_ADDR
// hc_gallery :=  ;
28470: LD_ADDR_OWVAR 33
28474: PUSH
28475: LD_STRING 
28477: ST_TO_ADDR
// hc_name :=  ;
28478: LD_ADDR_OWVAR 26
28482: PUSH
28483: LD_STRING 
28485: ST_TO_ADDR
// un := CreateHuman ;
28486: LD_ADDR_VAR 0 2
28490: PUSH
28491: CALL_OW 44
28495: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28496: LD_VAR 0 2
28500: PPUSH
28501: LD_INT 1
28503: PPUSH
28504: CALL_OW 51
// tmp := tmp ^ un ;
28508: LD_ADDR_VAR 0 3
28512: PUSH
28513: LD_VAR 0 3
28517: PUSH
28518: LD_VAR 0 2
28522: ADD
28523: ST_TO_ADDR
// end ;
28524: GO 28420
28526: POP
28527: POP
// repeat wait ( 0 0$1 ) ;
28528: LD_INT 35
28530: PPUSH
28531: CALL_OW 67
// for un in tmp do
28535: LD_ADDR_VAR 0 2
28539: PUSH
28540: LD_VAR 0 3
28544: PUSH
28545: FOR_IN
28546: IFFALSE 28620
// begin if IsDead ( un ) then
28548: LD_VAR 0 2
28552: PPUSH
28553: CALL_OW 301
28557: IFFALSE 28577
// begin tmp := tmp diff un ;
28559: LD_ADDR_VAR 0 3
28563: PUSH
28564: LD_VAR 0 3
28568: PUSH
28569: LD_VAR 0 2
28573: DIFF
28574: ST_TO_ADDR
// continue ;
28575: GO 28545
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28577: LD_VAR 0 2
28581: PPUSH
28582: LD_INT 3
28584: PUSH
28585: LD_INT 22
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PPUSH
28599: CALL_OW 69
28603: PPUSH
28604: LD_VAR 0 2
28608: PPUSH
28609: CALL_OW 74
28613: PPUSH
28614: CALL_OW 115
// end ;
28618: GO 28545
28620: POP
28621: POP
// until not tmp ;
28622: LD_VAR 0 3
28626: NOT
28627: IFFALSE 28528
// end ;
28629: PPOPN 3
28631: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28632: LD_EXP 38
28636: PUSH
28637: LD_EXP 63
28641: AND
28642: IFFALSE 28696
28644: GO 28646
28646: DISABLE
// begin ToLua ( displayTroll(); ) ;
28647: LD_STRING displayTroll();
28649: PPUSH
28650: CALL_OW 559
// wait ( 3 3$00 ) ;
28654: LD_INT 6300
28656: PPUSH
28657: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28661: LD_STRING hideTroll();
28663: PPUSH
28664: CALL_OW 559
// wait ( 1 1$00 ) ;
28668: LD_INT 2100
28670: PPUSH
28671: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28675: LD_STRING displayTroll();
28677: PPUSH
28678: CALL_OW 559
// wait ( 1 1$00 ) ;
28682: LD_INT 2100
28684: PPUSH
28685: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28689: LD_STRING hideTroll();
28691: PPUSH
28692: CALL_OW 559
// end ;
28696: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28697: LD_EXP 38
28701: PUSH
28702: LD_EXP 64
28706: AND
28707: IFFALSE 28770
28709: GO 28711
28711: DISABLE
28712: LD_INT 0
28714: PPUSH
// begin p := 0 ;
28715: LD_ADDR_VAR 0 1
28719: PUSH
28720: LD_INT 0
28722: ST_TO_ADDR
// repeat game_speed := 1 ;
28723: LD_ADDR_OWVAR 65
28727: PUSH
28728: LD_INT 1
28730: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28731: LD_INT 35
28733: PPUSH
28734: CALL_OW 67
// p := p + 1 ;
28738: LD_ADDR_VAR 0 1
28742: PUSH
28743: LD_VAR 0 1
28747: PUSH
28748: LD_INT 1
28750: PLUS
28751: ST_TO_ADDR
// until p >= 60 ;
28752: LD_VAR 0 1
28756: PUSH
28757: LD_INT 60
28759: GREATEREQUAL
28760: IFFALSE 28723
// game_speed := 4 ;
28762: LD_ADDR_OWVAR 65
28766: PUSH
28767: LD_INT 4
28769: ST_TO_ADDR
// end ;
28770: PPOPN 1
28772: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28773: LD_EXP 38
28777: PUSH
28778: LD_EXP 65
28782: AND
28783: IFFALSE 28929
28785: GO 28787
28787: DISABLE
28788: LD_INT 0
28790: PPUSH
28791: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28792: LD_ADDR_VAR 0 1
28796: PUSH
28797: LD_INT 22
28799: PUSH
28800: LD_OWVAR 2
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: LD_INT 30
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 30
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: LIST
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PPUSH
28841: CALL_OW 69
28845: ST_TO_ADDR
// if not depot then
28846: LD_VAR 0 1
28850: NOT
28851: IFFALSE 28855
// exit ;
28853: GO 28929
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28855: LD_ADDR_VAR 0 2
28859: PUSH
28860: LD_VAR 0 1
28864: PUSH
28865: LD_INT 1
28867: PPUSH
28868: LD_VAR 0 1
28872: PPUSH
28873: CALL_OW 12
28877: ARRAY
28878: PPUSH
28879: CALL_OW 274
28883: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28884: LD_VAR 0 2
28888: PPUSH
28889: LD_INT 1
28891: PPUSH
28892: LD_INT 0
28894: PPUSH
28895: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28899: LD_VAR 0 2
28903: PPUSH
28904: LD_INT 2
28906: PPUSH
28907: LD_INT 0
28909: PPUSH
28910: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28914: LD_VAR 0 2
28918: PPUSH
28919: LD_INT 3
28921: PPUSH
28922: LD_INT 0
28924: PPUSH
28925: CALL_OW 277
// end ;
28929: PPOPN 2
28931: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28932: LD_EXP 38
28936: PUSH
28937: LD_EXP 66
28941: AND
28942: IFFALSE 29039
28944: GO 28946
28946: DISABLE
28947: LD_INT 0
28949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28950: LD_ADDR_VAR 0 1
28954: PUSH
28955: LD_INT 22
28957: PUSH
28958: LD_OWVAR 2
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 21
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 3
28979: PUSH
28980: LD_INT 23
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: LIST
28998: PPUSH
28999: CALL_OW 69
29003: ST_TO_ADDR
// if not tmp then
29004: LD_VAR 0 1
29008: NOT
29009: IFFALSE 29013
// exit ;
29011: GO 29039
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29013: LD_VAR 0 1
29017: PUSH
29018: LD_INT 1
29020: PPUSH
29021: LD_VAR 0 1
29025: PPUSH
29026: CALL_OW 12
29030: ARRAY
29031: PPUSH
29032: LD_INT 200
29034: PPUSH
29035: CALL_OW 234
// end ;
29039: PPOPN 1
29041: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29042: LD_EXP 38
29046: PUSH
29047: LD_EXP 67
29051: AND
29052: IFFALSE 29131
29054: GO 29056
29056: DISABLE
29057: LD_INT 0
29059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29060: LD_ADDR_VAR 0 1
29064: PUSH
29065: LD_INT 22
29067: PUSH
29068: LD_OWVAR 2
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 21
29079: PUSH
29080: LD_INT 2
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PPUSH
29091: CALL_OW 69
29095: ST_TO_ADDR
// if not tmp then
29096: LD_VAR 0 1
29100: NOT
29101: IFFALSE 29105
// exit ;
29103: GO 29131
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29105: LD_VAR 0 1
29109: PUSH
29110: LD_INT 1
29112: PPUSH
29113: LD_VAR 0 1
29117: PPUSH
29118: CALL_OW 12
29122: ARRAY
29123: PPUSH
29124: LD_INT 60
29126: PPUSH
29127: CALL_OW 234
// end ;
29131: PPOPN 1
29133: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29134: LD_EXP 38
29138: PUSH
29139: LD_EXP 68
29143: AND
29144: IFFALSE 29243
29146: GO 29148
29148: DISABLE
29149: LD_INT 0
29151: PPUSH
29152: PPUSH
// begin enable ;
29153: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29154: LD_ADDR_VAR 0 1
29158: PUSH
29159: LD_INT 22
29161: PUSH
29162: LD_OWVAR 2
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 61
29173: PUSH
29174: EMPTY
29175: LIST
29176: PUSH
29177: LD_INT 33
29179: PUSH
29180: LD_INT 2
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: LIST
29191: PPUSH
29192: CALL_OW 69
29196: ST_TO_ADDR
// if not tmp then
29197: LD_VAR 0 1
29201: NOT
29202: IFFALSE 29206
// exit ;
29204: GO 29243
// for i in tmp do
29206: LD_ADDR_VAR 0 2
29210: PUSH
29211: LD_VAR 0 1
29215: PUSH
29216: FOR_IN
29217: IFFALSE 29241
// if IsControledBy ( i ) then
29219: LD_VAR 0 2
29223: PPUSH
29224: CALL_OW 312
29228: IFFALSE 29239
// ComUnlink ( i ) ;
29230: LD_VAR 0 2
29234: PPUSH
29235: CALL_OW 136
29239: GO 29216
29241: POP
29242: POP
// end ;
29243: PPOPN 2
29245: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29246: LD_EXP 38
29250: PUSH
29251: LD_EXP 69
29255: AND
29256: IFFALSE 29396
29258: GO 29260
29260: DISABLE
29261: LD_INT 0
29263: PPUSH
29264: PPUSH
// begin ToLua ( displayPowell(); ) ;
29265: LD_STRING displayPowell();
29267: PPUSH
29268: CALL_OW 559
// uc_side := 0 ;
29272: LD_ADDR_OWVAR 20
29276: PUSH
29277: LD_INT 0
29279: ST_TO_ADDR
// uc_nation := 2 ;
29280: LD_ADDR_OWVAR 21
29284: PUSH
29285: LD_INT 2
29287: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29288: LD_ADDR_OWVAR 37
29292: PUSH
29293: LD_INT 14
29295: ST_TO_ADDR
// vc_engine := engine_siberite ;
29296: LD_ADDR_OWVAR 39
29300: PUSH
29301: LD_INT 3
29303: ST_TO_ADDR
// vc_control := control_apeman ;
29304: LD_ADDR_OWVAR 38
29308: PUSH
29309: LD_INT 5
29311: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29312: LD_ADDR_OWVAR 40
29316: PUSH
29317: LD_INT 29
29319: ST_TO_ADDR
// un := CreateVehicle ;
29320: LD_ADDR_VAR 0 2
29324: PUSH
29325: CALL_OW 45
29329: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29330: LD_VAR 0 2
29334: PPUSH
29335: LD_INT 1
29337: PPUSH
29338: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29342: LD_INT 35
29344: PPUSH
29345: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29349: LD_VAR 0 2
29353: PPUSH
29354: LD_INT 22
29356: PUSH
29357: LD_OWVAR 2
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PPUSH
29366: CALL_OW 69
29370: PPUSH
29371: LD_VAR 0 2
29375: PPUSH
29376: CALL_OW 74
29380: PPUSH
29381: CALL_OW 115
// until IsDead ( un ) ;
29385: LD_VAR 0 2
29389: PPUSH
29390: CALL_OW 301
29394: IFFALSE 29342
// end ;
29396: PPOPN 2
29398: END
// every 0 0$1 trigger StreamModeActive and sStu do
29399: LD_EXP 38
29403: PUSH
29404: LD_EXP 77
29408: AND
29409: IFFALSE 29425
29411: GO 29413
29413: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29414: LD_STRING displayStucuk();
29416: PPUSH
29417: CALL_OW 559
// ResetFog ;
29421: CALL_OW 335
// end ;
29425: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29426: LD_EXP 38
29430: PUSH
29431: LD_EXP 70
29435: AND
29436: IFFALSE 29577
29438: GO 29440
29440: DISABLE
29441: LD_INT 0
29443: PPUSH
29444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29445: LD_ADDR_VAR 0 2
29449: PUSH
29450: LD_INT 22
29452: PUSH
29453: LD_OWVAR 2
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 21
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PPUSH
29476: CALL_OW 69
29480: ST_TO_ADDR
// if not tmp then
29481: LD_VAR 0 2
29485: NOT
29486: IFFALSE 29490
// exit ;
29488: GO 29577
// un := tmp [ rand ( 1 , tmp ) ] ;
29490: LD_ADDR_VAR 0 1
29494: PUSH
29495: LD_VAR 0 2
29499: PUSH
29500: LD_INT 1
29502: PPUSH
29503: LD_VAR 0 2
29507: PPUSH
29508: CALL_OW 12
29512: ARRAY
29513: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29514: LD_VAR 0 1
29518: PPUSH
29519: LD_INT 0
29521: PPUSH
29522: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29526: LD_VAR 0 1
29530: PPUSH
29531: LD_OWVAR 3
29535: PUSH
29536: LD_VAR 0 1
29540: DIFF
29541: PPUSH
29542: LD_VAR 0 1
29546: PPUSH
29547: CALL_OW 74
29551: PPUSH
29552: CALL_OW 115
// wait ( 0 0$20 ) ;
29556: LD_INT 700
29558: PPUSH
29559: CALL_OW 67
// SetSide ( un , your_side ) ;
29563: LD_VAR 0 1
29567: PPUSH
29568: LD_OWVAR 2
29572: PPUSH
29573: CALL_OW 235
// end ;
29577: PPOPN 2
29579: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29580: LD_EXP 38
29584: PUSH
29585: LD_EXP 71
29589: AND
29590: IFFALSE 29696
29592: GO 29594
29594: DISABLE
29595: LD_INT 0
29597: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29598: LD_ADDR_VAR 0 1
29602: PUSH
29603: LD_INT 22
29605: PUSH
29606: LD_OWVAR 2
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 2
29617: PUSH
29618: LD_INT 30
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 30
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PPUSH
29647: CALL_OW 69
29651: ST_TO_ADDR
// if not depot then
29652: LD_VAR 0 1
29656: NOT
29657: IFFALSE 29661
// exit ;
29659: GO 29696
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29661: LD_VAR 0 1
29665: PUSH
29666: LD_INT 1
29668: ARRAY
29669: PPUSH
29670: CALL_OW 250
29674: PPUSH
29675: LD_VAR 0 1
29679: PUSH
29680: LD_INT 1
29682: ARRAY
29683: PPUSH
29684: CALL_OW 251
29688: PPUSH
29689: LD_INT 70
29691: PPUSH
29692: CALL_OW 495
// end ;
29696: PPOPN 1
29698: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29699: LD_EXP 38
29703: PUSH
29704: LD_EXP 72
29708: AND
29709: IFFALSE 29920
29711: GO 29713
29713: DISABLE
29714: LD_INT 0
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
29720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29721: LD_ADDR_VAR 0 5
29725: PUSH
29726: LD_INT 22
29728: PUSH
29729: LD_OWVAR 2
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 21
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PPUSH
29752: CALL_OW 69
29756: ST_TO_ADDR
// if not tmp then
29757: LD_VAR 0 5
29761: NOT
29762: IFFALSE 29766
// exit ;
29764: GO 29920
// for i in tmp do
29766: LD_ADDR_VAR 0 1
29770: PUSH
29771: LD_VAR 0 5
29775: PUSH
29776: FOR_IN
29777: IFFALSE 29918
// begin d := rand ( 0 , 5 ) ;
29779: LD_ADDR_VAR 0 4
29783: PUSH
29784: LD_INT 0
29786: PPUSH
29787: LD_INT 5
29789: PPUSH
29790: CALL_OW 12
29794: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29795: LD_ADDR_VAR 0 2
29799: PUSH
29800: LD_VAR 0 1
29804: PPUSH
29805: CALL_OW 250
29809: PPUSH
29810: LD_VAR 0 4
29814: PPUSH
29815: LD_INT 3
29817: PPUSH
29818: LD_INT 12
29820: PPUSH
29821: CALL_OW 12
29825: PPUSH
29826: CALL_OW 272
29830: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29831: LD_ADDR_VAR 0 3
29835: PUSH
29836: LD_VAR 0 1
29840: PPUSH
29841: CALL_OW 251
29845: PPUSH
29846: LD_VAR 0 4
29850: PPUSH
29851: LD_INT 3
29853: PPUSH
29854: LD_INT 12
29856: PPUSH
29857: CALL_OW 12
29861: PPUSH
29862: CALL_OW 273
29866: ST_TO_ADDR
// if ValidHex ( x , y ) then
29867: LD_VAR 0 2
29871: PPUSH
29872: LD_VAR 0 3
29876: PPUSH
29877: CALL_OW 488
29881: IFFALSE 29916
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29883: LD_VAR 0 1
29887: PPUSH
29888: LD_VAR 0 2
29892: PPUSH
29893: LD_VAR 0 3
29897: PPUSH
29898: LD_INT 3
29900: PPUSH
29901: LD_INT 6
29903: PPUSH
29904: CALL_OW 12
29908: PPUSH
29909: LD_INT 1
29911: PPUSH
29912: CALL_OW 483
// end ;
29916: GO 29776
29918: POP
29919: POP
// end ;
29920: PPOPN 5
29922: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29923: LD_EXP 38
29927: PUSH
29928: LD_EXP 73
29932: AND
29933: IFFALSE 30027
29935: GO 29937
29937: DISABLE
29938: LD_INT 0
29940: PPUSH
29941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29942: LD_ADDR_VAR 0 2
29946: PUSH
29947: LD_INT 22
29949: PUSH
29950: LD_OWVAR 2
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 32
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 21
29971: PUSH
29972: LD_INT 2
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: LIST
29983: PPUSH
29984: CALL_OW 69
29988: ST_TO_ADDR
// if not tmp then
29989: LD_VAR 0 2
29993: NOT
29994: IFFALSE 29998
// exit ;
29996: GO 30027
// for i in tmp do
29998: LD_ADDR_VAR 0 1
30002: PUSH
30003: LD_VAR 0 2
30007: PUSH
30008: FOR_IN
30009: IFFALSE 30025
// SetFuel ( i , 0 ) ;
30011: LD_VAR 0 1
30015: PPUSH
30016: LD_INT 0
30018: PPUSH
30019: CALL_OW 240
30023: GO 30008
30025: POP
30026: POP
// end ;
30027: PPOPN 2
30029: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30030: LD_EXP 38
30034: PUSH
30035: LD_EXP 74
30039: AND
30040: IFFALSE 30106
30042: GO 30044
30044: DISABLE
30045: LD_INT 0
30047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30048: LD_ADDR_VAR 0 1
30052: PUSH
30053: LD_INT 22
30055: PUSH
30056: LD_OWVAR 2
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 30
30067: PUSH
30068: LD_INT 29
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PPUSH
30079: CALL_OW 69
30083: ST_TO_ADDR
// if not tmp then
30084: LD_VAR 0 1
30088: NOT
30089: IFFALSE 30093
// exit ;
30091: GO 30106
// DestroyUnit ( tmp [ 1 ] ) ;
30093: LD_VAR 0 1
30097: PUSH
30098: LD_INT 1
30100: ARRAY
30101: PPUSH
30102: CALL_OW 65
// end ;
30106: PPOPN 1
30108: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30109: LD_EXP 38
30113: PUSH
30114: LD_EXP 76
30118: AND
30119: IFFALSE 30248
30121: GO 30123
30123: DISABLE
30124: LD_INT 0
30126: PPUSH
// begin uc_side := 0 ;
30127: LD_ADDR_OWVAR 20
30131: PUSH
30132: LD_INT 0
30134: ST_TO_ADDR
// uc_nation := nation_arabian ;
30135: LD_ADDR_OWVAR 21
30139: PUSH
30140: LD_INT 2
30142: ST_TO_ADDR
// hc_gallery :=  ;
30143: LD_ADDR_OWVAR 33
30147: PUSH
30148: LD_STRING 
30150: ST_TO_ADDR
// hc_name :=  ;
30151: LD_ADDR_OWVAR 26
30155: PUSH
30156: LD_STRING 
30158: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30159: LD_INT 1
30161: PPUSH
30162: LD_INT 11
30164: PPUSH
30165: LD_INT 10
30167: PPUSH
30168: CALL_OW 380
// un := CreateHuman ;
30172: LD_ADDR_VAR 0 1
30176: PUSH
30177: CALL_OW 44
30181: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30182: LD_VAR 0 1
30186: PPUSH
30187: LD_INT 1
30189: PPUSH
30190: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30194: LD_INT 35
30196: PPUSH
30197: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30201: LD_VAR 0 1
30205: PPUSH
30206: LD_INT 22
30208: PUSH
30209: LD_OWVAR 2
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PPUSH
30218: CALL_OW 69
30222: PPUSH
30223: LD_VAR 0 1
30227: PPUSH
30228: CALL_OW 74
30232: PPUSH
30233: CALL_OW 115
// until IsDead ( un ) ;
30237: LD_VAR 0 1
30241: PPUSH
30242: CALL_OW 301
30246: IFFALSE 30194
// end ;
30248: PPOPN 1
30250: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30251: LD_EXP 38
30255: PUSH
30256: LD_EXP 78
30260: AND
30261: IFFALSE 30273
30263: GO 30265
30265: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30266: LD_STRING earthquake(getX(game), 0, 32)
30268: PPUSH
30269: CALL_OW 559
30273: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30274: LD_EXP 38
30278: PUSH
30279: LD_EXP 79
30283: AND
30284: IFFALSE 30375
30286: GO 30288
30288: DISABLE
30289: LD_INT 0
30291: PPUSH
// begin enable ;
30292: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30293: LD_ADDR_VAR 0 1
30297: PUSH
30298: LD_INT 22
30300: PUSH
30301: LD_OWVAR 2
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 21
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 33
30322: PUSH
30323: LD_INT 3
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: LIST
30334: PPUSH
30335: CALL_OW 69
30339: ST_TO_ADDR
// if not tmp then
30340: LD_VAR 0 1
30344: NOT
30345: IFFALSE 30349
// exit ;
30347: GO 30375
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30349: LD_VAR 0 1
30353: PUSH
30354: LD_INT 1
30356: PPUSH
30357: LD_VAR 0 1
30361: PPUSH
30362: CALL_OW 12
30366: ARRAY
30367: PPUSH
30368: LD_INT 1
30370: PPUSH
30371: CALL_OW 234
// end ;
30375: PPOPN 1
30377: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30378: LD_EXP 38
30382: PUSH
30383: LD_EXP 80
30387: AND
30388: IFFALSE 30529
30390: GO 30392
30392: DISABLE
30393: LD_INT 0
30395: PPUSH
30396: PPUSH
30397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30398: LD_ADDR_VAR 0 3
30402: PUSH
30403: LD_INT 22
30405: PUSH
30406: LD_OWVAR 2
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 25
30417: PUSH
30418: LD_INT 1
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PPUSH
30429: CALL_OW 69
30433: ST_TO_ADDR
// if not tmp then
30434: LD_VAR 0 3
30438: NOT
30439: IFFALSE 30443
// exit ;
30441: GO 30529
// un := tmp [ rand ( 1 , tmp ) ] ;
30443: LD_ADDR_VAR 0 2
30447: PUSH
30448: LD_VAR 0 3
30452: PUSH
30453: LD_INT 1
30455: PPUSH
30456: LD_VAR 0 3
30460: PPUSH
30461: CALL_OW 12
30465: ARRAY
30466: ST_TO_ADDR
// if Crawls ( un ) then
30467: LD_VAR 0 2
30471: PPUSH
30472: CALL_OW 318
30476: IFFALSE 30487
// ComWalk ( un ) ;
30478: LD_VAR 0 2
30482: PPUSH
30483: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30487: LD_VAR 0 2
30491: PPUSH
30492: LD_INT 9
30494: PPUSH
30495: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30499: LD_INT 28
30501: PPUSH
30502: LD_OWVAR 2
30506: PPUSH
30507: LD_INT 2
30509: PPUSH
30510: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30514: LD_INT 29
30516: PPUSH
30517: LD_OWVAR 2
30521: PPUSH
30522: LD_INT 2
30524: PPUSH
30525: CALL_OW 322
// end ;
30529: PPOPN 3
30531: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30532: LD_EXP 38
30536: PUSH
30537: LD_EXP 81
30541: AND
30542: IFFALSE 30653
30544: GO 30546
30546: DISABLE
30547: LD_INT 0
30549: PPUSH
30550: PPUSH
30551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30552: LD_ADDR_VAR 0 3
30556: PUSH
30557: LD_INT 22
30559: PUSH
30560: LD_OWVAR 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 25
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PPUSH
30583: CALL_OW 69
30587: ST_TO_ADDR
// if not tmp then
30588: LD_VAR 0 3
30592: NOT
30593: IFFALSE 30597
// exit ;
30595: GO 30653
// un := tmp [ rand ( 1 , tmp ) ] ;
30597: LD_ADDR_VAR 0 2
30601: PUSH
30602: LD_VAR 0 3
30606: PUSH
30607: LD_INT 1
30609: PPUSH
30610: LD_VAR 0 3
30614: PPUSH
30615: CALL_OW 12
30619: ARRAY
30620: ST_TO_ADDR
// if Crawls ( un ) then
30621: LD_VAR 0 2
30625: PPUSH
30626: CALL_OW 318
30630: IFFALSE 30641
// ComWalk ( un ) ;
30632: LD_VAR 0 2
30636: PPUSH
30637: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30641: LD_VAR 0 2
30645: PPUSH
30646: LD_INT 8
30648: PPUSH
30649: CALL_OW 336
// end ;
30653: PPOPN 3
30655: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30656: LD_EXP 38
30660: PUSH
30661: LD_EXP 82
30665: AND
30666: IFFALSE 30810
30668: GO 30670
30670: DISABLE
30671: LD_INT 0
30673: PPUSH
30674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30675: LD_ADDR_VAR 0 2
30679: PUSH
30680: LD_INT 22
30682: PUSH
30683: LD_OWVAR 2
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 21
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 2
30704: PUSH
30705: LD_INT 34
30707: PUSH
30708: LD_INT 12
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 34
30717: PUSH
30718: LD_INT 51
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 34
30727: PUSH
30728: LD_INT 32
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: LIST
30745: PPUSH
30746: CALL_OW 69
30750: ST_TO_ADDR
// if not tmp then
30751: LD_VAR 0 2
30755: NOT
30756: IFFALSE 30760
// exit ;
30758: GO 30810
// for i in tmp do
30760: LD_ADDR_VAR 0 1
30764: PUSH
30765: LD_VAR 0 2
30769: PUSH
30770: FOR_IN
30771: IFFALSE 30808
// if GetCargo ( i , mat_artifact ) = 0 then
30773: LD_VAR 0 1
30777: PPUSH
30778: LD_INT 4
30780: PPUSH
30781: CALL_OW 289
30785: PUSH
30786: LD_INT 0
30788: EQUAL
30789: IFFALSE 30806
// SetCargo ( i , mat_siberit , 100 ) ;
30791: LD_VAR 0 1
30795: PPUSH
30796: LD_INT 3
30798: PPUSH
30799: LD_INT 100
30801: PPUSH
30802: CALL_OW 290
30806: GO 30770
30808: POP
30809: POP
// end ;
30810: PPOPN 2
30812: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30813: LD_EXP 38
30817: PUSH
30818: LD_EXP 83
30822: AND
30823: IFFALSE 31006
30825: GO 30827
30827: DISABLE
30828: LD_INT 0
30830: PPUSH
30831: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30832: LD_ADDR_VAR 0 2
30836: PUSH
30837: LD_INT 22
30839: PUSH
30840: LD_OWVAR 2
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PPUSH
30849: CALL_OW 69
30853: ST_TO_ADDR
// if not tmp then
30854: LD_VAR 0 2
30858: NOT
30859: IFFALSE 30863
// exit ;
30861: GO 31006
// for i := 1 to 2 do
30863: LD_ADDR_VAR 0 1
30867: PUSH
30868: DOUBLE
30869: LD_INT 1
30871: DEC
30872: ST_TO_ADDR
30873: LD_INT 2
30875: PUSH
30876: FOR_TO
30877: IFFALSE 31004
// begin uc_side := your_side ;
30879: LD_ADDR_OWVAR 20
30883: PUSH
30884: LD_OWVAR 2
30888: ST_TO_ADDR
// uc_nation := nation_american ;
30889: LD_ADDR_OWVAR 21
30893: PUSH
30894: LD_INT 1
30896: ST_TO_ADDR
// vc_chassis := us_morphling ;
30897: LD_ADDR_OWVAR 37
30901: PUSH
30902: LD_INT 5
30904: ST_TO_ADDR
// vc_engine := engine_siberite ;
30905: LD_ADDR_OWVAR 39
30909: PUSH
30910: LD_INT 3
30912: ST_TO_ADDR
// vc_control := control_computer ;
30913: LD_ADDR_OWVAR 38
30917: PUSH
30918: LD_INT 3
30920: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30921: LD_ADDR_OWVAR 40
30925: PUSH
30926: LD_INT 10
30928: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30929: LD_VAR 0 2
30933: PUSH
30934: LD_INT 1
30936: ARRAY
30937: PPUSH
30938: CALL_OW 310
30942: NOT
30943: IFFALSE 30990
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30945: CALL_OW 45
30949: PPUSH
30950: LD_VAR 0 2
30954: PUSH
30955: LD_INT 1
30957: ARRAY
30958: PPUSH
30959: CALL_OW 250
30963: PPUSH
30964: LD_VAR 0 2
30968: PUSH
30969: LD_INT 1
30971: ARRAY
30972: PPUSH
30973: CALL_OW 251
30977: PPUSH
30978: LD_INT 12
30980: PPUSH
30981: LD_INT 1
30983: PPUSH
30984: CALL_OW 50
30988: GO 31002
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30990: CALL_OW 45
30994: PPUSH
30995: LD_INT 1
30997: PPUSH
30998: CALL_OW 51
// end ;
31002: GO 30876
31004: POP
31005: POP
// end ;
31006: PPOPN 2
31008: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31009: LD_EXP 38
31013: PUSH
31014: LD_EXP 84
31018: AND
31019: IFFALSE 31241
31021: GO 31023
31023: DISABLE
31024: LD_INT 0
31026: PPUSH
31027: PPUSH
31028: PPUSH
31029: PPUSH
31030: PPUSH
31031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31032: LD_ADDR_VAR 0 6
31036: PUSH
31037: LD_INT 22
31039: PUSH
31040: LD_OWVAR 2
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 21
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 3
31061: PUSH
31062: LD_INT 23
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: LIST
31080: PPUSH
31081: CALL_OW 69
31085: ST_TO_ADDR
// if not tmp then
31086: LD_VAR 0 6
31090: NOT
31091: IFFALSE 31095
// exit ;
31093: GO 31241
// s1 := rand ( 1 , 4 ) ;
31095: LD_ADDR_VAR 0 2
31099: PUSH
31100: LD_INT 1
31102: PPUSH
31103: LD_INT 4
31105: PPUSH
31106: CALL_OW 12
31110: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31111: LD_ADDR_VAR 0 4
31115: PUSH
31116: LD_VAR 0 6
31120: PUSH
31121: LD_INT 1
31123: ARRAY
31124: PPUSH
31125: LD_VAR 0 2
31129: PPUSH
31130: CALL_OW 259
31134: ST_TO_ADDR
// if s1 = 1 then
31135: LD_VAR 0 2
31139: PUSH
31140: LD_INT 1
31142: EQUAL
31143: IFFALSE 31163
// s2 := rand ( 2 , 4 ) else
31145: LD_ADDR_VAR 0 3
31149: PUSH
31150: LD_INT 2
31152: PPUSH
31153: LD_INT 4
31155: PPUSH
31156: CALL_OW 12
31160: ST_TO_ADDR
31161: GO 31171
// s2 := 1 ;
31163: LD_ADDR_VAR 0 3
31167: PUSH
31168: LD_INT 1
31170: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31171: LD_ADDR_VAR 0 5
31175: PUSH
31176: LD_VAR 0 6
31180: PUSH
31181: LD_INT 1
31183: ARRAY
31184: PPUSH
31185: LD_VAR 0 3
31189: PPUSH
31190: CALL_OW 259
31194: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31195: LD_VAR 0 6
31199: PUSH
31200: LD_INT 1
31202: ARRAY
31203: PPUSH
31204: LD_VAR 0 2
31208: PPUSH
31209: LD_VAR 0 5
31213: PPUSH
31214: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31218: LD_VAR 0 6
31222: PUSH
31223: LD_INT 1
31225: ARRAY
31226: PPUSH
31227: LD_VAR 0 3
31231: PPUSH
31232: LD_VAR 0 4
31236: PPUSH
31237: CALL_OW 237
// end ;
31241: PPOPN 6
31243: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31244: LD_EXP 38
31248: PUSH
31249: LD_EXP 85
31253: AND
31254: IFFALSE 31333
31256: GO 31258
31258: DISABLE
31259: LD_INT 0
31261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31262: LD_ADDR_VAR 0 1
31266: PUSH
31267: LD_INT 22
31269: PUSH
31270: LD_OWVAR 2
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 30
31281: PUSH
31282: LD_INT 3
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PPUSH
31293: CALL_OW 69
31297: ST_TO_ADDR
// if not tmp then
31298: LD_VAR 0 1
31302: NOT
31303: IFFALSE 31307
// exit ;
31305: GO 31333
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31307: LD_VAR 0 1
31311: PUSH
31312: LD_INT 1
31314: PPUSH
31315: LD_VAR 0 1
31319: PPUSH
31320: CALL_OW 12
31324: ARRAY
31325: PPUSH
31326: LD_INT 1
31328: PPUSH
31329: CALL_OW 234
// end ;
31333: PPOPN 1
31335: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31336: LD_EXP 38
31340: PUSH
31341: LD_EXP 86
31345: AND
31346: IFFALSE 31458
31348: GO 31350
31350: DISABLE
31351: LD_INT 0
31353: PPUSH
31354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31355: LD_ADDR_VAR 0 2
31359: PUSH
31360: LD_INT 22
31362: PUSH
31363: LD_OWVAR 2
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: LD_INT 30
31377: PUSH
31378: LD_INT 27
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 30
31387: PUSH
31388: LD_INT 26
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 30
31397: PUSH
31398: LD_INT 28
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PPUSH
31415: CALL_OW 69
31419: ST_TO_ADDR
// if not tmp then
31420: LD_VAR 0 2
31424: NOT
31425: IFFALSE 31429
// exit ;
31427: GO 31458
// for i in tmp do
31429: LD_ADDR_VAR 0 1
31433: PUSH
31434: LD_VAR 0 2
31438: PUSH
31439: FOR_IN
31440: IFFALSE 31456
// SetLives ( i , 1 ) ;
31442: LD_VAR 0 1
31446: PPUSH
31447: LD_INT 1
31449: PPUSH
31450: CALL_OW 234
31454: GO 31439
31456: POP
31457: POP
// end ;
31458: PPOPN 2
31460: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31461: LD_EXP 38
31465: PUSH
31466: LD_EXP 87
31470: AND
31471: IFFALSE 31758
31473: GO 31475
31475: DISABLE
31476: LD_INT 0
31478: PPUSH
31479: PPUSH
31480: PPUSH
// begin i := rand ( 1 , 7 ) ;
31481: LD_ADDR_VAR 0 1
31485: PUSH
31486: LD_INT 1
31488: PPUSH
31489: LD_INT 7
31491: PPUSH
31492: CALL_OW 12
31496: ST_TO_ADDR
// case i of 1 :
31497: LD_VAR 0 1
31501: PUSH
31502: LD_INT 1
31504: DOUBLE
31505: EQUAL
31506: IFTRUE 31510
31508: GO 31520
31510: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31511: LD_STRING earthquake(getX(game), 0, 32)
31513: PPUSH
31514: CALL_OW 559
31518: GO 31758
31520: LD_INT 2
31522: DOUBLE
31523: EQUAL
31524: IFTRUE 31528
31526: GO 31542
31528: POP
// begin ToLua ( displayStucuk(); ) ;
31529: LD_STRING displayStucuk();
31531: PPUSH
31532: CALL_OW 559
// ResetFog ;
31536: CALL_OW 335
// end ; 3 :
31540: GO 31758
31542: LD_INT 3
31544: DOUBLE
31545: EQUAL
31546: IFTRUE 31550
31548: GO 31654
31550: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31551: LD_ADDR_VAR 0 2
31555: PUSH
31556: LD_INT 22
31558: PUSH
31559: LD_OWVAR 2
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 25
31570: PUSH
31571: LD_INT 1
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PPUSH
31582: CALL_OW 69
31586: ST_TO_ADDR
// if not tmp then
31587: LD_VAR 0 2
31591: NOT
31592: IFFALSE 31596
// exit ;
31594: GO 31758
// un := tmp [ rand ( 1 , tmp ) ] ;
31596: LD_ADDR_VAR 0 3
31600: PUSH
31601: LD_VAR 0 2
31605: PUSH
31606: LD_INT 1
31608: PPUSH
31609: LD_VAR 0 2
31613: PPUSH
31614: CALL_OW 12
31618: ARRAY
31619: ST_TO_ADDR
// if Crawls ( un ) then
31620: LD_VAR 0 3
31624: PPUSH
31625: CALL_OW 318
31629: IFFALSE 31640
// ComWalk ( un ) ;
31631: LD_VAR 0 3
31635: PPUSH
31636: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31640: LD_VAR 0 3
31644: PPUSH
31645: LD_INT 8
31647: PPUSH
31648: CALL_OW 336
// end ; 4 :
31652: GO 31758
31654: LD_INT 4
31656: DOUBLE
31657: EQUAL
31658: IFTRUE 31662
31660: GO 31736
31662: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31663: LD_ADDR_VAR 0 2
31667: PUSH
31668: LD_INT 22
31670: PUSH
31671: LD_OWVAR 2
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 30
31682: PUSH
31683: LD_INT 29
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PPUSH
31694: CALL_OW 69
31698: ST_TO_ADDR
// if not tmp then
31699: LD_VAR 0 2
31703: NOT
31704: IFFALSE 31708
// exit ;
31706: GO 31758
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31708: LD_VAR 0 2
31712: PUSH
31713: LD_INT 1
31715: ARRAY
31716: PPUSH
31717: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31721: LD_VAR 0 2
31725: PUSH
31726: LD_INT 1
31728: ARRAY
31729: PPUSH
31730: CALL_OW 65
// end ; 5 .. 7 :
31734: GO 31758
31736: LD_INT 5
31738: DOUBLE
31739: GREATEREQUAL
31740: IFFALSE 31748
31742: LD_INT 7
31744: DOUBLE
31745: LESSEQUAL
31746: IFTRUE 31750
31748: GO 31757
31750: POP
// StreamSibBomb ; end ;
31751: CALL 27995 0 0
31755: GO 31758
31757: POP
// end ;
31758: PPOPN 3
31760: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31761: LD_EXP 38
31765: PUSH
31766: LD_EXP 88
31770: AND
31771: IFFALSE 31927
31773: GO 31775
31775: DISABLE
31776: LD_INT 0
31778: PPUSH
31779: PPUSH
31780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31781: LD_ADDR_VAR 0 2
31785: PUSH
31786: LD_INT 81
31788: PUSH
31789: LD_OWVAR 2
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: LD_INT 21
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 21
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: LIST
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PPUSH
31830: CALL_OW 69
31834: ST_TO_ADDR
// if not tmp then
31835: LD_VAR 0 2
31839: NOT
31840: IFFALSE 31844
// exit ;
31842: GO 31927
// p := 0 ;
31844: LD_ADDR_VAR 0 3
31848: PUSH
31849: LD_INT 0
31851: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31852: LD_INT 35
31854: PPUSH
31855: CALL_OW 67
// p := p + 1 ;
31859: LD_ADDR_VAR 0 3
31863: PUSH
31864: LD_VAR 0 3
31868: PUSH
31869: LD_INT 1
31871: PLUS
31872: ST_TO_ADDR
// for i in tmp do
31873: LD_ADDR_VAR 0 1
31877: PUSH
31878: LD_VAR 0 2
31882: PUSH
31883: FOR_IN
31884: IFFALSE 31915
// if GetLives ( i ) < 1000 then
31886: LD_VAR 0 1
31890: PPUSH
31891: CALL_OW 256
31895: PUSH
31896: LD_INT 1000
31898: LESS
31899: IFFALSE 31913
// SetLives ( i , 1000 ) ;
31901: LD_VAR 0 1
31905: PPUSH
31906: LD_INT 1000
31908: PPUSH
31909: CALL_OW 234
31913: GO 31883
31915: POP
31916: POP
// until p > 20 ;
31917: LD_VAR 0 3
31921: PUSH
31922: LD_INT 20
31924: GREATER
31925: IFFALSE 31852
// end ;
31927: PPOPN 3
31929: END
// every 0 0$1 trigger StreamModeActive and sTime do
31930: LD_EXP 38
31934: PUSH
31935: LD_EXP 89
31939: AND
31940: IFFALSE 31975
31942: GO 31944
31944: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31945: LD_INT 28
31947: PPUSH
31948: LD_OWVAR 2
31952: PPUSH
31953: LD_INT 2
31955: PPUSH
31956: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31960: LD_INT 30
31962: PPUSH
31963: LD_OWVAR 2
31967: PPUSH
31968: LD_INT 2
31970: PPUSH
31971: CALL_OW 322
// end ;
31975: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31976: LD_EXP 38
31980: PUSH
31981: LD_EXP 90
31985: AND
31986: IFFALSE 32107
31988: GO 31990
31990: DISABLE
31991: LD_INT 0
31993: PPUSH
31994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31995: LD_ADDR_VAR 0 2
31999: PUSH
32000: LD_INT 22
32002: PUSH
32003: LD_OWVAR 2
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 21
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 3
32024: PUSH
32025: LD_INT 23
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: PPUSH
32044: CALL_OW 69
32048: ST_TO_ADDR
// if not tmp then
32049: LD_VAR 0 2
32053: NOT
32054: IFFALSE 32058
// exit ;
32056: GO 32107
// for i in tmp do
32058: LD_ADDR_VAR 0 1
32062: PUSH
32063: LD_VAR 0 2
32067: PUSH
32068: FOR_IN
32069: IFFALSE 32105
// begin if Crawls ( i ) then
32071: LD_VAR 0 1
32075: PPUSH
32076: CALL_OW 318
32080: IFFALSE 32091
// ComWalk ( i ) ;
32082: LD_VAR 0 1
32086: PPUSH
32087: CALL_OW 138
// SetClass ( i , 2 ) ;
32091: LD_VAR 0 1
32095: PPUSH
32096: LD_INT 2
32098: PPUSH
32099: CALL_OW 336
// end ;
32103: GO 32068
32105: POP
32106: POP
// end ;
32107: PPOPN 2
32109: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32110: LD_EXP 38
32114: PUSH
32115: LD_EXP 91
32119: AND
32120: IFFALSE 32408
32122: GO 32124
32124: DISABLE
32125: LD_INT 0
32127: PPUSH
32128: PPUSH
32129: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32130: LD_OWVAR 2
32134: PPUSH
32135: LD_INT 9
32137: PPUSH
32138: LD_INT 1
32140: PPUSH
32141: LD_INT 1
32143: PPUSH
32144: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32148: LD_INT 9
32150: PPUSH
32151: LD_OWVAR 2
32155: PPUSH
32156: CALL_OW 343
// uc_side := 9 ;
32160: LD_ADDR_OWVAR 20
32164: PUSH
32165: LD_INT 9
32167: ST_TO_ADDR
// uc_nation := 2 ;
32168: LD_ADDR_OWVAR 21
32172: PUSH
32173: LD_INT 2
32175: ST_TO_ADDR
// hc_name := Dark Warrior ;
32176: LD_ADDR_OWVAR 26
32180: PUSH
32181: LD_STRING Dark Warrior
32183: ST_TO_ADDR
// hc_gallery :=  ;
32184: LD_ADDR_OWVAR 33
32188: PUSH
32189: LD_STRING 
32191: ST_TO_ADDR
// hc_noskilllimit := true ;
32192: LD_ADDR_OWVAR 76
32196: PUSH
32197: LD_INT 1
32199: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32200: LD_ADDR_OWVAR 31
32204: PUSH
32205: LD_INT 30
32207: PUSH
32208: LD_INT 30
32210: PUSH
32211: LD_INT 30
32213: PUSH
32214: LD_INT 30
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: ST_TO_ADDR
// un := CreateHuman ;
32223: LD_ADDR_VAR 0 3
32227: PUSH
32228: CALL_OW 44
32232: ST_TO_ADDR
// hc_noskilllimit := false ;
32233: LD_ADDR_OWVAR 76
32237: PUSH
32238: LD_INT 0
32240: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32241: LD_VAR 0 3
32245: PPUSH
32246: LD_INT 1
32248: PPUSH
32249: CALL_OW 51
// ToLua ( playRanger() ) ;
32253: LD_STRING playRanger()
32255: PPUSH
32256: CALL_OW 559
// p := 0 ;
32260: LD_ADDR_VAR 0 2
32264: PUSH
32265: LD_INT 0
32267: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32268: LD_INT 35
32270: PPUSH
32271: CALL_OW 67
// p := p + 1 ;
32275: LD_ADDR_VAR 0 2
32279: PUSH
32280: LD_VAR 0 2
32284: PUSH
32285: LD_INT 1
32287: PLUS
32288: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32289: LD_VAR 0 3
32293: PPUSH
32294: CALL_OW 256
32298: PUSH
32299: LD_INT 1000
32301: LESS
32302: IFFALSE 32316
// SetLives ( un , 1000 ) ;
32304: LD_VAR 0 3
32308: PPUSH
32309: LD_INT 1000
32311: PPUSH
32312: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32316: LD_VAR 0 3
32320: PPUSH
32321: LD_INT 81
32323: PUSH
32324: LD_OWVAR 2
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 91
32335: PUSH
32336: LD_VAR 0 3
32340: PUSH
32341: LD_INT 30
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: LIST
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PPUSH
32353: CALL_OW 69
32357: PPUSH
32358: LD_VAR 0 3
32362: PPUSH
32363: CALL_OW 74
32367: PPUSH
32368: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32372: LD_VAR 0 2
32376: PUSH
32377: LD_INT 80
32379: GREATER
32380: PUSH
32381: LD_VAR 0 3
32385: PPUSH
32386: CALL_OW 301
32390: OR
32391: IFFALSE 32268
// if un then
32393: LD_VAR 0 3
32397: IFFALSE 32408
// RemoveUnit ( un ) ;
32399: LD_VAR 0 3
32403: PPUSH
32404: CALL_OW 64
// end ;
32408: PPOPN 3
32410: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32411: LD_EXP 92
32415: IFFALSE 32531
32417: GO 32419
32419: DISABLE
32420: LD_INT 0
32422: PPUSH
32423: PPUSH
32424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32425: LD_ADDR_VAR 0 2
32429: PUSH
32430: LD_INT 81
32432: PUSH
32433: LD_OWVAR 2
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 21
32444: PUSH
32445: LD_INT 1
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PPUSH
32456: CALL_OW 69
32460: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32461: LD_STRING playComputer()
32463: PPUSH
32464: CALL_OW 559
// if not tmp then
32468: LD_VAR 0 2
32472: NOT
32473: IFFALSE 32477
// exit ;
32475: GO 32531
// for i in tmp do
32477: LD_ADDR_VAR 0 1
32481: PUSH
32482: LD_VAR 0 2
32486: PUSH
32487: FOR_IN
32488: IFFALSE 32529
// for j := 1 to 4 do
32490: LD_ADDR_VAR 0 3
32494: PUSH
32495: DOUBLE
32496: LD_INT 1
32498: DEC
32499: ST_TO_ADDR
32500: LD_INT 4
32502: PUSH
32503: FOR_TO
32504: IFFALSE 32525
// SetSkill ( i , j , 10 ) ;
32506: LD_VAR 0 1
32510: PPUSH
32511: LD_VAR 0 3
32515: PPUSH
32516: LD_INT 10
32518: PPUSH
32519: CALL_OW 237
32523: GO 32503
32525: POP
32526: POP
32527: GO 32487
32529: POP
32530: POP
// end ;
32531: PPOPN 3
32533: END
// every 0 0$1 trigger s30 do var i , tmp ;
32534: LD_EXP 93
32538: IFFALSE 32607
32540: GO 32542
32542: DISABLE
32543: LD_INT 0
32545: PPUSH
32546: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32547: LD_ADDR_VAR 0 2
32551: PUSH
32552: LD_INT 22
32554: PUSH
32555: LD_OWVAR 2
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PPUSH
32564: CALL_OW 69
32568: ST_TO_ADDR
// if not tmp then
32569: LD_VAR 0 2
32573: NOT
32574: IFFALSE 32578
// exit ;
32576: GO 32607
// for i in tmp do
32578: LD_ADDR_VAR 0 1
32582: PUSH
32583: LD_VAR 0 2
32587: PUSH
32588: FOR_IN
32589: IFFALSE 32605
// SetLives ( i , 300 ) ;
32591: LD_VAR 0 1
32595: PPUSH
32596: LD_INT 300
32598: PPUSH
32599: CALL_OW 234
32603: GO 32588
32605: POP
32606: POP
// end ;
32607: PPOPN 2
32609: END
// every 0 0$1 trigger s60 do var i , tmp ;
32610: LD_EXP 94
32614: IFFALSE 32683
32616: GO 32618
32618: DISABLE
32619: LD_INT 0
32621: PPUSH
32622: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32623: LD_ADDR_VAR 0 2
32627: PUSH
32628: LD_INT 22
32630: PUSH
32631: LD_OWVAR 2
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PPUSH
32640: CALL_OW 69
32644: ST_TO_ADDR
// if not tmp then
32645: LD_VAR 0 2
32649: NOT
32650: IFFALSE 32654
// exit ;
32652: GO 32683
// for i in tmp do
32654: LD_ADDR_VAR 0 1
32658: PUSH
32659: LD_VAR 0 2
32663: PUSH
32664: FOR_IN
32665: IFFALSE 32681
// SetLives ( i , 600 ) ;
32667: LD_VAR 0 1
32671: PPUSH
32672: LD_INT 600
32674: PPUSH
32675: CALL_OW 234
32679: GO 32664
32681: POP
32682: POP
// end ;
32683: PPOPN 2
32685: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32686: LD_INT 0
32688: PPUSH
// case cmd of 301 :
32689: LD_VAR 0 1
32693: PUSH
32694: LD_INT 301
32696: DOUBLE
32697: EQUAL
32698: IFTRUE 32702
32700: GO 32734
32702: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32703: LD_VAR 0 6
32707: PPUSH
32708: LD_VAR 0 7
32712: PPUSH
32713: LD_VAR 0 8
32717: PPUSH
32718: LD_VAR 0 4
32722: PPUSH
32723: LD_VAR 0 5
32727: PPUSH
32728: CALL 33943 0 5
32732: GO 32855
32734: LD_INT 302
32736: DOUBLE
32737: EQUAL
32738: IFTRUE 32742
32740: GO 32779
32742: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32743: LD_VAR 0 6
32747: PPUSH
32748: LD_VAR 0 7
32752: PPUSH
32753: LD_VAR 0 8
32757: PPUSH
32758: LD_VAR 0 9
32762: PPUSH
32763: LD_VAR 0 4
32767: PPUSH
32768: LD_VAR 0 5
32772: PPUSH
32773: CALL 34034 0 6
32777: GO 32855
32779: LD_INT 303
32781: DOUBLE
32782: EQUAL
32783: IFTRUE 32787
32785: GO 32824
32787: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32788: LD_VAR 0 6
32792: PPUSH
32793: LD_VAR 0 7
32797: PPUSH
32798: LD_VAR 0 8
32802: PPUSH
32803: LD_VAR 0 9
32807: PPUSH
32808: LD_VAR 0 4
32812: PPUSH
32813: LD_VAR 0 5
32817: PPUSH
32818: CALL 32860 0 6
32822: GO 32855
32824: LD_INT 304
32826: DOUBLE
32827: EQUAL
32828: IFTRUE 32832
32830: GO 32854
32832: POP
// hHackTeleport ( unit , x , y ) ; end ;
32833: LD_VAR 0 2
32837: PPUSH
32838: LD_VAR 0 4
32842: PPUSH
32843: LD_VAR 0 5
32847: PPUSH
32848: CALL 34627 0 3
32852: GO 32855
32854: POP
// end ;
32855: LD_VAR 0 12
32859: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32860: LD_INT 0
32862: PPUSH
32863: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32864: LD_VAR 0 1
32868: PUSH
32869: LD_INT 1
32871: LESS
32872: PUSH
32873: LD_VAR 0 1
32877: PUSH
32878: LD_INT 3
32880: GREATER
32881: OR
32882: PUSH
32883: LD_VAR 0 5
32887: PPUSH
32888: LD_VAR 0 6
32892: PPUSH
32893: CALL_OW 428
32897: OR
32898: IFFALSE 32902
// exit ;
32900: GO 33630
// uc_side := your_side ;
32902: LD_ADDR_OWVAR 20
32906: PUSH
32907: LD_OWVAR 2
32911: ST_TO_ADDR
// uc_nation := nation ;
32912: LD_ADDR_OWVAR 21
32916: PUSH
32917: LD_VAR 0 1
32921: ST_TO_ADDR
// bc_level = 1 ;
32922: LD_ADDR_OWVAR 43
32926: PUSH
32927: LD_INT 1
32929: ST_TO_ADDR
// case btype of 1 :
32930: LD_VAR 0 2
32934: PUSH
32935: LD_INT 1
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32943
32941: GO 32954
32943: POP
// bc_type := b_depot ; 2 :
32944: LD_ADDR_OWVAR 42
32948: PUSH
32949: LD_INT 0
32951: ST_TO_ADDR
32952: GO 33574
32954: LD_INT 2
32956: DOUBLE
32957: EQUAL
32958: IFTRUE 32962
32960: GO 32973
32962: POP
// bc_type := b_warehouse ; 3 :
32963: LD_ADDR_OWVAR 42
32967: PUSH
32968: LD_INT 1
32970: ST_TO_ADDR
32971: GO 33574
32973: LD_INT 3
32975: DOUBLE
32976: EQUAL
32977: IFTRUE 32981
32979: GO 32992
32981: POP
// bc_type := b_lab ; 4 .. 9 :
32982: LD_ADDR_OWVAR 42
32986: PUSH
32987: LD_INT 6
32989: ST_TO_ADDR
32990: GO 33574
32992: LD_INT 4
32994: DOUBLE
32995: GREATEREQUAL
32996: IFFALSE 33004
32998: LD_INT 9
33000: DOUBLE
33001: LESSEQUAL
33002: IFTRUE 33006
33004: GO 33066
33006: POP
// begin bc_type := b_lab_half ;
33007: LD_ADDR_OWVAR 42
33011: PUSH
33012: LD_INT 7
33014: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33015: LD_ADDR_OWVAR 44
33019: PUSH
33020: LD_INT 10
33022: PUSH
33023: LD_INT 11
33025: PUSH
33026: LD_INT 12
33028: PUSH
33029: LD_INT 15
33031: PUSH
33032: LD_INT 14
33034: PUSH
33035: LD_INT 13
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: PUSH
33046: LD_VAR 0 2
33050: PUSH
33051: LD_INT 3
33053: MINUS
33054: ARRAY
33055: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33056: LD_ADDR_OWVAR 45
33060: PUSH
33061: LD_INT 9
33063: ST_TO_ADDR
// end ; 10 .. 13 :
33064: GO 33574
33066: LD_INT 10
33068: DOUBLE
33069: GREATEREQUAL
33070: IFFALSE 33078
33072: LD_INT 13
33074: DOUBLE
33075: LESSEQUAL
33076: IFTRUE 33080
33078: GO 33157
33080: POP
// begin bc_type := b_lab_full ;
33081: LD_ADDR_OWVAR 42
33085: PUSH
33086: LD_INT 8
33088: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33089: LD_ADDR_OWVAR 44
33093: PUSH
33094: LD_INT 10
33096: PUSH
33097: LD_INT 12
33099: PUSH
33100: LD_INT 14
33102: PUSH
33103: LD_INT 13
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: PUSH
33112: LD_VAR 0 2
33116: PUSH
33117: LD_INT 9
33119: MINUS
33120: ARRAY
33121: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33122: LD_ADDR_OWVAR 45
33126: PUSH
33127: LD_INT 11
33129: PUSH
33130: LD_INT 15
33132: PUSH
33133: LD_INT 12
33135: PUSH
33136: LD_INT 15
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: PUSH
33145: LD_VAR 0 2
33149: PUSH
33150: LD_INT 9
33152: MINUS
33153: ARRAY
33154: ST_TO_ADDR
// end ; 14 :
33155: GO 33574
33157: LD_INT 14
33159: DOUBLE
33160: EQUAL
33161: IFTRUE 33165
33163: GO 33176
33165: POP
// bc_type := b_workshop ; 15 :
33166: LD_ADDR_OWVAR 42
33170: PUSH
33171: LD_INT 2
33173: ST_TO_ADDR
33174: GO 33574
33176: LD_INT 15
33178: DOUBLE
33179: EQUAL
33180: IFTRUE 33184
33182: GO 33195
33184: POP
// bc_type := b_factory ; 16 :
33185: LD_ADDR_OWVAR 42
33189: PUSH
33190: LD_INT 3
33192: ST_TO_ADDR
33193: GO 33574
33195: LD_INT 16
33197: DOUBLE
33198: EQUAL
33199: IFTRUE 33203
33201: GO 33214
33203: POP
// bc_type := b_ext_gun ; 17 :
33204: LD_ADDR_OWVAR 42
33208: PUSH
33209: LD_INT 17
33211: ST_TO_ADDR
33212: GO 33574
33214: LD_INT 17
33216: DOUBLE
33217: EQUAL
33218: IFTRUE 33222
33220: GO 33250
33222: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33223: LD_ADDR_OWVAR 42
33227: PUSH
33228: LD_INT 19
33230: PUSH
33231: LD_INT 23
33233: PUSH
33234: LD_INT 19
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: PUSH
33242: LD_VAR 0 1
33246: ARRAY
33247: ST_TO_ADDR
33248: GO 33574
33250: LD_INT 18
33252: DOUBLE
33253: EQUAL
33254: IFTRUE 33258
33256: GO 33269
33258: POP
// bc_type := b_ext_radar ; 19 :
33259: LD_ADDR_OWVAR 42
33263: PUSH
33264: LD_INT 20
33266: ST_TO_ADDR
33267: GO 33574
33269: LD_INT 19
33271: DOUBLE
33272: EQUAL
33273: IFTRUE 33277
33275: GO 33288
33277: POP
// bc_type := b_ext_radio ; 20 :
33278: LD_ADDR_OWVAR 42
33282: PUSH
33283: LD_INT 22
33285: ST_TO_ADDR
33286: GO 33574
33288: LD_INT 20
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33296
33294: GO 33307
33296: POP
// bc_type := b_ext_siberium ; 21 :
33297: LD_ADDR_OWVAR 42
33301: PUSH
33302: LD_INT 21
33304: ST_TO_ADDR
33305: GO 33574
33307: LD_INT 21
33309: DOUBLE
33310: EQUAL
33311: IFTRUE 33315
33313: GO 33326
33315: POP
// bc_type := b_ext_computer ; 22 :
33316: LD_ADDR_OWVAR 42
33320: PUSH
33321: LD_INT 24
33323: ST_TO_ADDR
33324: GO 33574
33326: LD_INT 22
33328: DOUBLE
33329: EQUAL
33330: IFTRUE 33334
33332: GO 33345
33334: POP
// bc_type := b_ext_track ; 23 :
33335: LD_ADDR_OWVAR 42
33339: PUSH
33340: LD_INT 16
33342: ST_TO_ADDR
33343: GO 33574
33345: LD_INT 23
33347: DOUBLE
33348: EQUAL
33349: IFTRUE 33353
33351: GO 33364
33353: POP
// bc_type := b_ext_laser ; 24 :
33354: LD_ADDR_OWVAR 42
33358: PUSH
33359: LD_INT 25
33361: ST_TO_ADDR
33362: GO 33574
33364: LD_INT 24
33366: DOUBLE
33367: EQUAL
33368: IFTRUE 33372
33370: GO 33383
33372: POP
// bc_type := b_control_tower ; 25 :
33373: LD_ADDR_OWVAR 42
33377: PUSH
33378: LD_INT 36
33380: ST_TO_ADDR
33381: GO 33574
33383: LD_INT 25
33385: DOUBLE
33386: EQUAL
33387: IFTRUE 33391
33389: GO 33402
33391: POP
// bc_type := b_breastwork ; 26 :
33392: LD_ADDR_OWVAR 42
33396: PUSH
33397: LD_INT 31
33399: ST_TO_ADDR
33400: GO 33574
33402: LD_INT 26
33404: DOUBLE
33405: EQUAL
33406: IFTRUE 33410
33408: GO 33421
33410: POP
// bc_type := b_bunker ; 27 :
33411: LD_ADDR_OWVAR 42
33415: PUSH
33416: LD_INT 32
33418: ST_TO_ADDR
33419: GO 33574
33421: LD_INT 27
33423: DOUBLE
33424: EQUAL
33425: IFTRUE 33429
33427: GO 33440
33429: POP
// bc_type := b_turret ; 28 :
33430: LD_ADDR_OWVAR 42
33434: PUSH
33435: LD_INT 33
33437: ST_TO_ADDR
33438: GO 33574
33440: LD_INT 28
33442: DOUBLE
33443: EQUAL
33444: IFTRUE 33448
33446: GO 33459
33448: POP
// bc_type := b_armoury ; 29 :
33449: LD_ADDR_OWVAR 42
33453: PUSH
33454: LD_INT 4
33456: ST_TO_ADDR
33457: GO 33574
33459: LD_INT 29
33461: DOUBLE
33462: EQUAL
33463: IFTRUE 33467
33465: GO 33478
33467: POP
// bc_type := b_barracks ; 30 :
33468: LD_ADDR_OWVAR 42
33472: PUSH
33473: LD_INT 5
33475: ST_TO_ADDR
33476: GO 33574
33478: LD_INT 30
33480: DOUBLE
33481: EQUAL
33482: IFTRUE 33486
33484: GO 33497
33486: POP
// bc_type := b_solar_power ; 31 :
33487: LD_ADDR_OWVAR 42
33491: PUSH
33492: LD_INT 27
33494: ST_TO_ADDR
33495: GO 33574
33497: LD_INT 31
33499: DOUBLE
33500: EQUAL
33501: IFTRUE 33505
33503: GO 33516
33505: POP
// bc_type := b_oil_power ; 32 :
33506: LD_ADDR_OWVAR 42
33510: PUSH
33511: LD_INT 26
33513: ST_TO_ADDR
33514: GO 33574
33516: LD_INT 32
33518: DOUBLE
33519: EQUAL
33520: IFTRUE 33524
33522: GO 33535
33524: POP
// bc_type := b_siberite_power ; 33 :
33525: LD_ADDR_OWVAR 42
33529: PUSH
33530: LD_INT 28
33532: ST_TO_ADDR
33533: GO 33574
33535: LD_INT 33
33537: DOUBLE
33538: EQUAL
33539: IFTRUE 33543
33541: GO 33554
33543: POP
// bc_type := b_oil_mine ; 34 :
33544: LD_ADDR_OWVAR 42
33548: PUSH
33549: LD_INT 29
33551: ST_TO_ADDR
33552: GO 33574
33554: LD_INT 34
33556: DOUBLE
33557: EQUAL
33558: IFTRUE 33562
33560: GO 33573
33562: POP
// bc_type := b_siberite_mine ; end ;
33563: LD_ADDR_OWVAR 42
33567: PUSH
33568: LD_INT 30
33570: ST_TO_ADDR
33571: GO 33574
33573: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33574: LD_ADDR_VAR 0 8
33578: PUSH
33579: LD_VAR 0 5
33583: PPUSH
33584: LD_VAR 0 6
33588: PPUSH
33589: LD_VAR 0 3
33593: PPUSH
33594: CALL_OW 47
33598: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33599: LD_OWVAR 42
33603: PUSH
33604: LD_INT 32
33606: PUSH
33607: LD_INT 33
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: IN
33614: IFFALSE 33630
// PlaceWeaponTurret ( b , weapon ) ;
33616: LD_VAR 0 8
33620: PPUSH
33621: LD_VAR 0 4
33625: PPUSH
33626: CALL_OW 431
// end ;
33630: LD_VAR 0 7
33634: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33635: LD_INT 0
33637: PPUSH
33638: PPUSH
33639: PPUSH
33640: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33641: LD_ADDR_VAR 0 4
33645: PUSH
33646: LD_INT 22
33648: PUSH
33649: LD_OWVAR 2
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 2
33660: PUSH
33661: LD_INT 30
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 30
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: LIST
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PPUSH
33690: CALL_OW 69
33694: ST_TO_ADDR
// if not tmp then
33695: LD_VAR 0 4
33699: NOT
33700: IFFALSE 33704
// exit ;
33702: GO 33763
// for i in tmp do
33704: LD_ADDR_VAR 0 2
33708: PUSH
33709: LD_VAR 0 4
33713: PUSH
33714: FOR_IN
33715: IFFALSE 33761
// for j = 1 to 3 do
33717: LD_ADDR_VAR 0 3
33721: PUSH
33722: DOUBLE
33723: LD_INT 1
33725: DEC
33726: ST_TO_ADDR
33727: LD_INT 3
33729: PUSH
33730: FOR_TO
33731: IFFALSE 33757
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33733: LD_VAR 0 2
33737: PPUSH
33738: CALL_OW 274
33742: PPUSH
33743: LD_VAR 0 3
33747: PPUSH
33748: LD_INT 99999
33750: PPUSH
33751: CALL_OW 277
33755: GO 33730
33757: POP
33758: POP
33759: GO 33714
33761: POP
33762: POP
// end ;
33763: LD_VAR 0 1
33767: RET
// export function hHackSetLevel10 ; var i , j ; begin
33768: LD_INT 0
33770: PPUSH
33771: PPUSH
33772: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33773: LD_ADDR_VAR 0 2
33777: PUSH
33778: LD_INT 21
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PPUSH
33788: CALL_OW 69
33792: PUSH
33793: FOR_IN
33794: IFFALSE 33846
// if IsSelected ( i ) then
33796: LD_VAR 0 2
33800: PPUSH
33801: CALL_OW 306
33805: IFFALSE 33844
// begin for j := 1 to 4 do
33807: LD_ADDR_VAR 0 3
33811: PUSH
33812: DOUBLE
33813: LD_INT 1
33815: DEC
33816: ST_TO_ADDR
33817: LD_INT 4
33819: PUSH
33820: FOR_TO
33821: IFFALSE 33842
// SetSkill ( i , j , 10 ) ;
33823: LD_VAR 0 2
33827: PPUSH
33828: LD_VAR 0 3
33832: PPUSH
33833: LD_INT 10
33835: PPUSH
33836: CALL_OW 237
33840: GO 33820
33842: POP
33843: POP
// end ;
33844: GO 33793
33846: POP
33847: POP
// end ;
33848: LD_VAR 0 1
33852: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33853: LD_INT 0
33855: PPUSH
33856: PPUSH
33857: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33858: LD_ADDR_VAR 0 2
33862: PUSH
33863: LD_INT 22
33865: PUSH
33866: LD_OWVAR 2
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 21
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PPUSH
33889: CALL_OW 69
33893: PUSH
33894: FOR_IN
33895: IFFALSE 33936
// begin for j := 1 to 4 do
33897: LD_ADDR_VAR 0 3
33901: PUSH
33902: DOUBLE
33903: LD_INT 1
33905: DEC
33906: ST_TO_ADDR
33907: LD_INT 4
33909: PUSH
33910: FOR_TO
33911: IFFALSE 33932
// SetSkill ( i , j , 10 ) ;
33913: LD_VAR 0 2
33917: PPUSH
33918: LD_VAR 0 3
33922: PPUSH
33923: LD_INT 10
33925: PPUSH
33926: CALL_OW 237
33930: GO 33910
33932: POP
33933: POP
// end ;
33934: GO 33894
33936: POP
33937: POP
// end ;
33938: LD_VAR 0 1
33942: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33943: LD_INT 0
33945: PPUSH
// uc_side := your_side ;
33946: LD_ADDR_OWVAR 20
33950: PUSH
33951: LD_OWVAR 2
33955: ST_TO_ADDR
// uc_nation := nation ;
33956: LD_ADDR_OWVAR 21
33960: PUSH
33961: LD_VAR 0 1
33965: ST_TO_ADDR
// InitHc ;
33966: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33970: LD_INT 0
33972: PPUSH
33973: LD_VAR 0 2
33977: PPUSH
33978: LD_VAR 0 3
33982: PPUSH
33983: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33987: LD_VAR 0 4
33991: PPUSH
33992: LD_VAR 0 5
33996: PPUSH
33997: CALL_OW 428
34001: PUSH
34002: LD_INT 0
34004: EQUAL
34005: IFFALSE 34029
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34007: CALL_OW 44
34011: PPUSH
34012: LD_VAR 0 4
34016: PPUSH
34017: LD_VAR 0 5
34021: PPUSH
34022: LD_INT 1
34024: PPUSH
34025: CALL_OW 48
// end ;
34029: LD_VAR 0 6
34033: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34034: LD_INT 0
34036: PPUSH
34037: PPUSH
// uc_side := your_side ;
34038: LD_ADDR_OWVAR 20
34042: PUSH
34043: LD_OWVAR 2
34047: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34048: LD_VAR 0 1
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: LD_INT 3
34061: PUSH
34062: LD_INT 4
34064: PUSH
34065: LD_INT 5
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: IN
34075: IFFALSE 34087
// uc_nation := nation_american else
34077: LD_ADDR_OWVAR 21
34081: PUSH
34082: LD_INT 1
34084: ST_TO_ADDR
34085: GO 34130
// if chassis in [ 11 , 12 , 13 , 14 ] then
34087: LD_VAR 0 1
34091: PUSH
34092: LD_INT 11
34094: PUSH
34095: LD_INT 12
34097: PUSH
34098: LD_INT 13
34100: PUSH
34101: LD_INT 14
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: IN
34110: IFFALSE 34122
// uc_nation := nation_arabian else
34112: LD_ADDR_OWVAR 21
34116: PUSH
34117: LD_INT 2
34119: ST_TO_ADDR
34120: GO 34130
// uc_nation := nation_russian ;
34122: LD_ADDR_OWVAR 21
34126: PUSH
34127: LD_INT 3
34129: ST_TO_ADDR
// vc_chassis := chassis ;
34130: LD_ADDR_OWVAR 37
34134: PUSH
34135: LD_VAR 0 1
34139: ST_TO_ADDR
// vc_engine := engine ;
34140: LD_ADDR_OWVAR 39
34144: PUSH
34145: LD_VAR 0 2
34149: ST_TO_ADDR
// vc_control := control ;
34150: LD_ADDR_OWVAR 38
34154: PUSH
34155: LD_VAR 0 3
34159: ST_TO_ADDR
// vc_weapon := weapon ;
34160: LD_ADDR_OWVAR 40
34164: PUSH
34165: LD_VAR 0 4
34169: ST_TO_ADDR
// un := CreateVehicle ;
34170: LD_ADDR_VAR 0 8
34174: PUSH
34175: CALL_OW 45
34179: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34180: LD_VAR 0 8
34184: PPUSH
34185: LD_INT 0
34187: PPUSH
34188: LD_INT 5
34190: PPUSH
34191: CALL_OW 12
34195: PPUSH
34196: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34200: LD_VAR 0 8
34204: PPUSH
34205: LD_VAR 0 5
34209: PPUSH
34210: LD_VAR 0 6
34214: PPUSH
34215: LD_INT 1
34217: PPUSH
34218: CALL_OW 48
// end ;
34222: LD_VAR 0 7
34226: RET
// export hInvincible ; every 1 do
34227: GO 34229
34229: DISABLE
// hInvincible := [ ] ;
34230: LD_ADDR_EXP 95
34234: PUSH
34235: EMPTY
34236: ST_TO_ADDR
34237: END
// every 10 do var i ;
34238: GO 34240
34240: DISABLE
34241: LD_INT 0
34243: PPUSH
// begin enable ;
34244: ENABLE
// if not hInvincible then
34245: LD_EXP 95
34249: NOT
34250: IFFALSE 34254
// exit ;
34252: GO 34298
// for i in hInvincible do
34254: LD_ADDR_VAR 0 1
34258: PUSH
34259: LD_EXP 95
34263: PUSH
34264: FOR_IN
34265: IFFALSE 34296
// if GetLives ( i ) < 1000 then
34267: LD_VAR 0 1
34271: PPUSH
34272: CALL_OW 256
34276: PUSH
34277: LD_INT 1000
34279: LESS
34280: IFFALSE 34294
// SetLives ( i , 1000 ) ;
34282: LD_VAR 0 1
34286: PPUSH
34287: LD_INT 1000
34289: PPUSH
34290: CALL_OW 234
34294: GO 34264
34296: POP
34297: POP
// end ;
34298: PPOPN 1
34300: END
// export function hHackInvincible ; var i ; begin
34301: LD_INT 0
34303: PPUSH
34304: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34305: LD_ADDR_VAR 0 2
34309: PUSH
34310: LD_INT 2
34312: PUSH
34313: LD_INT 21
34315: PUSH
34316: LD_INT 1
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 21
34325: PUSH
34326: LD_INT 2
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: PPUSH
34338: CALL_OW 69
34342: PUSH
34343: FOR_IN
34344: IFFALSE 34405
// if IsSelected ( i ) then
34346: LD_VAR 0 2
34350: PPUSH
34351: CALL_OW 306
34355: IFFALSE 34403
// begin if i in hInvincible then
34357: LD_VAR 0 2
34361: PUSH
34362: LD_EXP 95
34366: IN
34367: IFFALSE 34387
// hInvincible := hInvincible diff i else
34369: LD_ADDR_EXP 95
34373: PUSH
34374: LD_EXP 95
34378: PUSH
34379: LD_VAR 0 2
34383: DIFF
34384: ST_TO_ADDR
34385: GO 34403
// hInvincible := hInvincible union i ;
34387: LD_ADDR_EXP 95
34391: PUSH
34392: LD_EXP 95
34396: PUSH
34397: LD_VAR 0 2
34401: UNION
34402: ST_TO_ADDR
// end ;
34403: GO 34343
34405: POP
34406: POP
// end ;
34407: LD_VAR 0 1
34411: RET
// export function hHackInvisible ; var i , j ; begin
34412: LD_INT 0
34414: PPUSH
34415: PPUSH
34416: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34417: LD_ADDR_VAR 0 2
34421: PUSH
34422: LD_INT 21
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PPUSH
34432: CALL_OW 69
34436: PUSH
34437: FOR_IN
34438: IFFALSE 34462
// if IsSelected ( i ) then
34440: LD_VAR 0 2
34444: PPUSH
34445: CALL_OW 306
34449: IFFALSE 34460
// ComForceInvisible ( i ) ;
34451: LD_VAR 0 2
34455: PPUSH
34456: CALL_OW 496
34460: GO 34437
34462: POP
34463: POP
// end ;
34464: LD_VAR 0 1
34468: RET
// export function hHackChangeYourSide ; begin
34469: LD_INT 0
34471: PPUSH
// if your_side = 8 then
34472: LD_OWVAR 2
34476: PUSH
34477: LD_INT 8
34479: EQUAL
34480: IFFALSE 34492
// your_side := 0 else
34482: LD_ADDR_OWVAR 2
34486: PUSH
34487: LD_INT 0
34489: ST_TO_ADDR
34490: GO 34506
// your_side := your_side + 1 ;
34492: LD_ADDR_OWVAR 2
34496: PUSH
34497: LD_OWVAR 2
34501: PUSH
34502: LD_INT 1
34504: PLUS
34505: ST_TO_ADDR
// end ;
34506: LD_VAR 0 1
34510: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34511: LD_INT 0
34513: PPUSH
34514: PPUSH
34515: PPUSH
// for i in all_units do
34516: LD_ADDR_VAR 0 2
34520: PUSH
34521: LD_OWVAR 3
34525: PUSH
34526: FOR_IN
34527: IFFALSE 34605
// if IsSelected ( i ) then
34529: LD_VAR 0 2
34533: PPUSH
34534: CALL_OW 306
34538: IFFALSE 34603
// begin j := GetSide ( i ) ;
34540: LD_ADDR_VAR 0 3
34544: PUSH
34545: LD_VAR 0 2
34549: PPUSH
34550: CALL_OW 255
34554: ST_TO_ADDR
// if j = 8 then
34555: LD_VAR 0 3
34559: PUSH
34560: LD_INT 8
34562: EQUAL
34563: IFFALSE 34575
// j := 0 else
34565: LD_ADDR_VAR 0 3
34569: PUSH
34570: LD_INT 0
34572: ST_TO_ADDR
34573: GO 34589
// j := j + 1 ;
34575: LD_ADDR_VAR 0 3
34579: PUSH
34580: LD_VAR 0 3
34584: PUSH
34585: LD_INT 1
34587: PLUS
34588: ST_TO_ADDR
// SetSide ( i , j ) ;
34589: LD_VAR 0 2
34593: PPUSH
34594: LD_VAR 0 3
34598: PPUSH
34599: CALL_OW 235
// end ;
34603: GO 34526
34605: POP
34606: POP
// end ;
34607: LD_VAR 0 1
34611: RET
// export function hHackFog ; begin
34612: LD_INT 0
34614: PPUSH
// FogOff ( true ) ;
34615: LD_INT 1
34617: PPUSH
34618: CALL_OW 344
// end ;
34622: LD_VAR 0 1
34626: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34627: LD_INT 0
34629: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34630: LD_VAR 0 1
34634: PPUSH
34635: LD_VAR 0 2
34639: PPUSH
34640: LD_VAR 0 3
34644: PPUSH
34645: LD_INT 1
34647: PPUSH
34648: LD_INT 1
34650: PPUSH
34651: CALL_OW 483
// CenterOnXY ( x , y ) ;
34655: LD_VAR 0 2
34659: PPUSH
34660: LD_VAR 0 3
34664: PPUSH
34665: CALL_OW 84
// end ;
34669: LD_VAR 0 4
34673: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34674: LD_INT 0
34676: PPUSH
34677: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34678: LD_VAR 0 1
34682: NOT
34683: PUSH
34684: LD_VAR 0 2
34688: PPUSH
34689: LD_VAR 0 3
34693: PPUSH
34694: CALL_OW 488
34698: NOT
34699: OR
34700: PUSH
34701: LD_VAR 0 1
34705: PPUSH
34706: CALL_OW 266
34710: PUSH
34711: LD_INT 3
34713: NONEQUAL
34714: PUSH
34715: LD_VAR 0 1
34719: PPUSH
34720: CALL_OW 247
34724: PUSH
34725: LD_INT 1
34727: EQUAL
34728: NOT
34729: AND
34730: OR
34731: IFFALSE 34735
// exit ;
34733: GO 34884
// if GetType ( factory ) = unit_human then
34735: LD_VAR 0 1
34739: PPUSH
34740: CALL_OW 247
34744: PUSH
34745: LD_INT 1
34747: EQUAL
34748: IFFALSE 34765
// factory := IsInUnit ( factory ) ;
34750: LD_ADDR_VAR 0 1
34754: PUSH
34755: LD_VAR 0 1
34759: PPUSH
34760: CALL_OW 310
34764: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34765: LD_VAR 0 1
34769: PPUSH
34770: CALL_OW 266
34774: PUSH
34775: LD_INT 3
34777: NONEQUAL
34778: IFFALSE 34782
// exit ;
34780: GO 34884
// if HexInfo ( x , y ) = factory then
34782: LD_VAR 0 2
34786: PPUSH
34787: LD_VAR 0 3
34791: PPUSH
34792: CALL_OW 428
34796: PUSH
34797: LD_VAR 0 1
34801: EQUAL
34802: IFFALSE 34829
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34804: LD_ADDR_EXP 96
34808: PUSH
34809: LD_EXP 96
34813: PPUSH
34814: LD_VAR 0 1
34818: PPUSH
34819: LD_INT 0
34821: PPUSH
34822: CALL_OW 1
34826: ST_TO_ADDR
34827: GO 34880
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34829: LD_ADDR_EXP 96
34833: PUSH
34834: LD_EXP 96
34838: PPUSH
34839: LD_VAR 0 1
34843: PPUSH
34844: LD_VAR 0 1
34848: PPUSH
34849: CALL_OW 255
34853: PUSH
34854: LD_VAR 0 1
34858: PUSH
34859: LD_VAR 0 2
34863: PUSH
34864: LD_VAR 0 3
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: PPUSH
34875: CALL_OW 1
34879: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34880: CALL 34889 0 0
// end ;
34884: LD_VAR 0 4
34888: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34889: LD_INT 0
34891: PPUSH
34892: PPUSH
34893: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34894: LD_STRING resetFactoryWaypoint();
34896: PPUSH
34897: CALL_OW 559
// if factoryWaypoints then
34901: LD_EXP 96
34905: IFFALSE 35031
// begin list := PrepareArray ( factoryWaypoints ) ;
34907: LD_ADDR_VAR 0 3
34911: PUSH
34912: LD_EXP 96
34916: PPUSH
34917: CALL 81353 0 1
34921: ST_TO_ADDR
// for i := 1 to list do
34922: LD_ADDR_VAR 0 2
34926: PUSH
34927: DOUBLE
34928: LD_INT 1
34930: DEC
34931: ST_TO_ADDR
34932: LD_VAR 0 3
34936: PUSH
34937: FOR_TO
34938: IFFALSE 35029
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34940: LD_STRING setFactoryWaypointXY(
34942: PUSH
34943: LD_VAR 0 3
34947: PUSH
34948: LD_VAR 0 2
34952: ARRAY
34953: PUSH
34954: LD_INT 1
34956: ARRAY
34957: STR
34958: PUSH
34959: LD_STRING ,
34961: STR
34962: PUSH
34963: LD_VAR 0 3
34967: PUSH
34968: LD_VAR 0 2
34972: ARRAY
34973: PUSH
34974: LD_INT 2
34976: ARRAY
34977: STR
34978: PUSH
34979: LD_STRING ,
34981: STR
34982: PUSH
34983: LD_VAR 0 3
34987: PUSH
34988: LD_VAR 0 2
34992: ARRAY
34993: PUSH
34994: LD_INT 3
34996: ARRAY
34997: STR
34998: PUSH
34999: LD_STRING ,
35001: STR
35002: PUSH
35003: LD_VAR 0 3
35007: PUSH
35008: LD_VAR 0 2
35012: ARRAY
35013: PUSH
35014: LD_INT 4
35016: ARRAY
35017: STR
35018: PUSH
35019: LD_STRING )
35021: STR
35022: PPUSH
35023: CALL_OW 559
35027: GO 34937
35029: POP
35030: POP
// end ; end ;
35031: LD_VAR 0 1
35035: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35036: LD_INT 0
35038: PPUSH
// if HexInfo ( x , y ) = warehouse then
35039: LD_VAR 0 2
35043: PPUSH
35044: LD_VAR 0 3
35048: PPUSH
35049: CALL_OW 428
35053: PUSH
35054: LD_VAR 0 1
35058: EQUAL
35059: IFFALSE 35086
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35061: LD_ADDR_EXP 97
35065: PUSH
35066: LD_EXP 97
35070: PPUSH
35071: LD_VAR 0 1
35075: PPUSH
35076: LD_INT 0
35078: PPUSH
35079: CALL_OW 1
35083: ST_TO_ADDR
35084: GO 35137
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35086: LD_ADDR_EXP 97
35090: PUSH
35091: LD_EXP 97
35095: PPUSH
35096: LD_VAR 0 1
35100: PPUSH
35101: LD_VAR 0 1
35105: PPUSH
35106: CALL_OW 255
35110: PUSH
35111: LD_VAR 0 1
35115: PUSH
35116: LD_VAR 0 2
35120: PUSH
35121: LD_VAR 0 3
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: PPUSH
35132: CALL_OW 1
35136: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35137: CALL 35146 0 0
// end ;
35141: LD_VAR 0 4
35145: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35146: LD_INT 0
35148: PPUSH
35149: PPUSH
35150: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35151: LD_STRING resetWarehouseGatheringPoints();
35153: PPUSH
35154: CALL_OW 559
// if warehouseGatheringPoints then
35158: LD_EXP 97
35162: IFFALSE 35288
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35164: LD_ADDR_VAR 0 3
35168: PUSH
35169: LD_EXP 97
35173: PPUSH
35174: CALL 81353 0 1
35178: ST_TO_ADDR
// for i := 1 to list do
35179: LD_ADDR_VAR 0 2
35183: PUSH
35184: DOUBLE
35185: LD_INT 1
35187: DEC
35188: ST_TO_ADDR
35189: LD_VAR 0 3
35193: PUSH
35194: FOR_TO
35195: IFFALSE 35286
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35197: LD_STRING setWarehouseGatheringPointXY(
35199: PUSH
35200: LD_VAR 0 3
35204: PUSH
35205: LD_VAR 0 2
35209: ARRAY
35210: PUSH
35211: LD_INT 1
35213: ARRAY
35214: STR
35215: PUSH
35216: LD_STRING ,
35218: STR
35219: PUSH
35220: LD_VAR 0 3
35224: PUSH
35225: LD_VAR 0 2
35229: ARRAY
35230: PUSH
35231: LD_INT 2
35233: ARRAY
35234: STR
35235: PUSH
35236: LD_STRING ,
35238: STR
35239: PUSH
35240: LD_VAR 0 3
35244: PUSH
35245: LD_VAR 0 2
35249: ARRAY
35250: PUSH
35251: LD_INT 3
35253: ARRAY
35254: STR
35255: PUSH
35256: LD_STRING ,
35258: STR
35259: PUSH
35260: LD_VAR 0 3
35264: PUSH
35265: LD_VAR 0 2
35269: ARRAY
35270: PUSH
35271: LD_INT 4
35273: ARRAY
35274: STR
35275: PUSH
35276: LD_STRING )
35278: STR
35279: PPUSH
35280: CALL_OW 559
35284: GO 35194
35286: POP
35287: POP
// end ; end ;
35288: LD_VAR 0 1
35292: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35293: LD_EXP 97
35297: IFFALSE 35982
35299: GO 35301
35301: DISABLE
35302: LD_INT 0
35304: PPUSH
35305: PPUSH
35306: PPUSH
35307: PPUSH
35308: PPUSH
35309: PPUSH
35310: PPUSH
35311: PPUSH
35312: PPUSH
// begin enable ;
35313: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35314: LD_ADDR_VAR 0 3
35318: PUSH
35319: LD_EXP 97
35323: PPUSH
35324: CALL 81353 0 1
35328: ST_TO_ADDR
// if not list then
35329: LD_VAR 0 3
35333: NOT
35334: IFFALSE 35338
// exit ;
35336: GO 35982
// for i := 1 to list do
35338: LD_ADDR_VAR 0 1
35342: PUSH
35343: DOUBLE
35344: LD_INT 1
35346: DEC
35347: ST_TO_ADDR
35348: LD_VAR 0 3
35352: PUSH
35353: FOR_TO
35354: IFFALSE 35980
// begin depot := list [ i ] [ 2 ] ;
35356: LD_ADDR_VAR 0 8
35360: PUSH
35361: LD_VAR 0 3
35365: PUSH
35366: LD_VAR 0 1
35370: ARRAY
35371: PUSH
35372: LD_INT 2
35374: ARRAY
35375: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35376: LD_ADDR_VAR 0 5
35380: PUSH
35381: LD_VAR 0 3
35385: PUSH
35386: LD_VAR 0 1
35390: ARRAY
35391: PUSH
35392: LD_INT 1
35394: ARRAY
35395: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35396: LD_VAR 0 8
35400: PPUSH
35401: CALL_OW 301
35405: PUSH
35406: LD_VAR 0 5
35410: PUSH
35411: LD_VAR 0 8
35415: PPUSH
35416: CALL_OW 255
35420: NONEQUAL
35421: OR
35422: IFFALSE 35451
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35424: LD_ADDR_EXP 97
35428: PUSH
35429: LD_EXP 97
35433: PPUSH
35434: LD_VAR 0 8
35438: PPUSH
35439: LD_INT 0
35441: PPUSH
35442: CALL_OW 1
35446: ST_TO_ADDR
// exit ;
35447: POP
35448: POP
35449: GO 35982
// end ; x := list [ i ] [ 3 ] ;
35451: LD_ADDR_VAR 0 6
35455: PUSH
35456: LD_VAR 0 3
35460: PUSH
35461: LD_VAR 0 1
35465: ARRAY
35466: PUSH
35467: LD_INT 3
35469: ARRAY
35470: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35471: LD_ADDR_VAR 0 7
35475: PUSH
35476: LD_VAR 0 3
35480: PUSH
35481: LD_VAR 0 1
35485: ARRAY
35486: PUSH
35487: LD_INT 4
35489: ARRAY
35490: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35491: LD_ADDR_VAR 0 9
35495: PUSH
35496: LD_VAR 0 6
35500: PPUSH
35501: LD_VAR 0 7
35505: PPUSH
35506: LD_INT 16
35508: PPUSH
35509: CALL 79941 0 3
35513: ST_TO_ADDR
// if not cratesNearbyPoint then
35514: LD_VAR 0 9
35518: NOT
35519: IFFALSE 35525
// exit ;
35521: POP
35522: POP
35523: GO 35982
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35525: LD_ADDR_VAR 0 4
35529: PUSH
35530: LD_INT 22
35532: PUSH
35533: LD_VAR 0 5
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 3
35544: PUSH
35545: LD_INT 60
35547: PUSH
35548: EMPTY
35549: LIST
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 91
35557: PUSH
35558: LD_VAR 0 8
35562: PUSH
35563: LD_INT 6
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: LD_INT 25
35576: PUSH
35577: LD_INT 2
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 25
35586: PUSH
35587: LD_INT 16
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: PPUSH
35605: CALL_OW 69
35609: PUSH
35610: LD_VAR 0 8
35614: PPUSH
35615: CALL_OW 313
35619: PPUSH
35620: LD_INT 3
35622: PUSH
35623: LD_INT 60
35625: PUSH
35626: EMPTY
35627: LIST
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: LD_INT 25
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 25
35648: PUSH
35649: LD_INT 16
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: LIST
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PPUSH
35665: CALL_OW 72
35669: UNION
35670: ST_TO_ADDR
// if tmp then
35671: LD_VAR 0 4
35675: IFFALSE 35755
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35677: LD_ADDR_VAR 0 4
35681: PUSH
35682: LD_VAR 0 4
35686: PPUSH
35687: LD_INT 3
35689: PPUSH
35690: CALL 77910 0 2
35694: ST_TO_ADDR
// for j in tmp do
35695: LD_ADDR_VAR 0 2
35699: PUSH
35700: LD_VAR 0 4
35704: PUSH
35705: FOR_IN
35706: IFFALSE 35749
// begin if IsInUnit ( j ) then
35708: LD_VAR 0 2
35712: PPUSH
35713: CALL_OW 310
35717: IFFALSE 35728
// ComExit ( j ) ;
35719: LD_VAR 0 2
35723: PPUSH
35724: CALL 77993 0 1
// AddComCollect ( j , x , y ) ;
35728: LD_VAR 0 2
35732: PPUSH
35733: LD_VAR 0 6
35737: PPUSH
35738: LD_VAR 0 7
35742: PPUSH
35743: CALL_OW 177
// end ;
35747: GO 35705
35749: POP
35750: POP
// exit ;
35751: POP
35752: POP
35753: GO 35982
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35755: LD_ADDR_VAR 0 4
35759: PUSH
35760: LD_INT 22
35762: PUSH
35763: LD_VAR 0 5
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 91
35774: PUSH
35775: LD_VAR 0 8
35779: PUSH
35780: LD_INT 8
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: LD_INT 34
35793: PUSH
35794: LD_INT 12
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 34
35803: PUSH
35804: LD_INT 51
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 34
35813: PUSH
35814: LD_INT 32
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 34
35823: PUSH
35824: LD_INT 89
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: LIST
35842: PPUSH
35843: CALL_OW 69
35847: ST_TO_ADDR
// if tmp then
35848: LD_VAR 0 4
35852: IFFALSE 35978
// begin for j in tmp do
35854: LD_ADDR_VAR 0 2
35858: PUSH
35859: LD_VAR 0 4
35863: PUSH
35864: FOR_IN
35865: IFFALSE 35976
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35867: LD_VAR 0 2
35871: PPUSH
35872: CALL_OW 262
35876: PUSH
35877: LD_INT 3
35879: EQUAL
35880: PUSH
35881: LD_VAR 0 2
35885: PPUSH
35886: CALL_OW 261
35890: PUSH
35891: LD_INT 20
35893: GREATER
35894: OR
35895: PUSH
35896: LD_VAR 0 2
35900: PPUSH
35901: CALL_OW 314
35905: NOT
35906: AND
35907: PUSH
35908: LD_VAR 0 2
35912: PPUSH
35913: CALL_OW 263
35917: PUSH
35918: LD_INT 1
35920: NONEQUAL
35921: PUSH
35922: LD_VAR 0 2
35926: PPUSH
35927: CALL_OW 311
35931: OR
35932: AND
35933: IFFALSE 35974
// begin ComCollect ( j , x , y ) ;
35935: LD_VAR 0 2
35939: PPUSH
35940: LD_VAR 0 6
35944: PPUSH
35945: LD_VAR 0 7
35949: PPUSH
35950: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35954: LD_VAR 0 2
35958: PPUSH
35959: LD_VAR 0 8
35963: PPUSH
35964: CALL_OW 172
// exit ;
35968: POP
35969: POP
35970: POP
35971: POP
35972: GO 35982
// end ;
35974: GO 35864
35976: POP
35977: POP
// end ; end ;
35978: GO 35353
35980: POP
35981: POP
// end ; end_of_file
35982: PPOPN 9
35984: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35985: LD_INT 0
35987: PPUSH
35988: PPUSH
35989: PPUSH
35990: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35991: LD_VAR 0 1
35995: PPUSH
35996: CALL_OW 264
36000: PUSH
36001: LD_INT 91
36003: EQUAL
36004: IFFALSE 36076
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36006: LD_INT 68
36008: PPUSH
36009: LD_VAR 0 1
36013: PPUSH
36014: CALL_OW 255
36018: PPUSH
36019: CALL_OW 321
36023: PUSH
36024: LD_INT 2
36026: EQUAL
36027: IFFALSE 36039
// eff := 70 else
36029: LD_ADDR_VAR 0 4
36033: PUSH
36034: LD_INT 70
36036: ST_TO_ADDR
36037: GO 36047
// eff := 30 ;
36039: LD_ADDR_VAR 0 4
36043: PUSH
36044: LD_INT 30
36046: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36047: LD_VAR 0 1
36051: PPUSH
36052: CALL_OW 250
36056: PPUSH
36057: LD_VAR 0 1
36061: PPUSH
36062: CALL_OW 251
36066: PPUSH
36067: LD_VAR 0 4
36071: PPUSH
36072: CALL_OW 495
// end ; end ;
36076: LD_VAR 0 2
36080: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36081: LD_INT 0
36083: PPUSH
// end ;
36084: LD_VAR 0 4
36088: RET
// export function SOS_Command ( cmd ) ; begin
36089: LD_INT 0
36091: PPUSH
// end ;
36092: LD_VAR 0 2
36096: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36097: LD_INT 0
36099: PPUSH
// end ;
36100: LD_VAR 0 6
36104: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36105: LD_INT 0
36107: PPUSH
36108: PPUSH
// if not vehicle or not factory then
36109: LD_VAR 0 1
36113: NOT
36114: PUSH
36115: LD_VAR 0 2
36119: NOT
36120: OR
36121: IFFALSE 36125
// exit ;
36123: GO 36356
// if factoryWaypoints >= factory then
36125: LD_EXP 96
36129: PUSH
36130: LD_VAR 0 2
36134: GREATEREQUAL
36135: IFFALSE 36356
// if factoryWaypoints [ factory ] then
36137: LD_EXP 96
36141: PUSH
36142: LD_VAR 0 2
36146: ARRAY
36147: IFFALSE 36356
// begin if GetControl ( vehicle ) = control_manual then
36149: LD_VAR 0 1
36153: PPUSH
36154: CALL_OW 263
36158: PUSH
36159: LD_INT 1
36161: EQUAL
36162: IFFALSE 36243
// begin driver := IsDrivenBy ( vehicle ) ;
36164: LD_ADDR_VAR 0 4
36168: PUSH
36169: LD_VAR 0 1
36173: PPUSH
36174: CALL_OW 311
36178: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36179: LD_VAR 0 4
36183: PPUSH
36184: LD_EXP 96
36188: PUSH
36189: LD_VAR 0 2
36193: ARRAY
36194: PUSH
36195: LD_INT 3
36197: ARRAY
36198: PPUSH
36199: LD_EXP 96
36203: PUSH
36204: LD_VAR 0 2
36208: ARRAY
36209: PUSH
36210: LD_INT 4
36212: ARRAY
36213: PPUSH
36214: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36218: LD_VAR 0 4
36222: PPUSH
36223: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36227: LD_VAR 0 4
36231: PPUSH
36232: LD_VAR 0 2
36236: PPUSH
36237: CALL_OW 180
// end else
36241: GO 36356
// if GetControl ( vehicle ) = control_remote then
36243: LD_VAR 0 1
36247: PPUSH
36248: CALL_OW 263
36252: PUSH
36253: LD_INT 2
36255: EQUAL
36256: IFFALSE 36317
// begin wait ( 0 0$2 ) ;
36258: LD_INT 70
36260: PPUSH
36261: CALL_OW 67
// if Connect ( vehicle ) then
36265: LD_VAR 0 1
36269: PPUSH
36270: CALL 48214 0 1
36274: IFFALSE 36315
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36276: LD_VAR 0 1
36280: PPUSH
36281: LD_EXP 96
36285: PUSH
36286: LD_VAR 0 2
36290: ARRAY
36291: PUSH
36292: LD_INT 3
36294: ARRAY
36295: PPUSH
36296: LD_EXP 96
36300: PUSH
36301: LD_VAR 0 2
36305: ARRAY
36306: PUSH
36307: LD_INT 4
36309: ARRAY
36310: PPUSH
36311: CALL_OW 171
// end else
36315: GO 36356
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36317: LD_VAR 0 1
36321: PPUSH
36322: LD_EXP 96
36326: PUSH
36327: LD_VAR 0 2
36331: ARRAY
36332: PUSH
36333: LD_INT 3
36335: ARRAY
36336: PPUSH
36337: LD_EXP 96
36341: PUSH
36342: LD_VAR 0 2
36346: ARRAY
36347: PUSH
36348: LD_INT 4
36350: ARRAY
36351: PPUSH
36352: CALL_OW 171
// end ; end ;
36356: LD_VAR 0 3
36360: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36361: LD_INT 0
36363: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36364: LD_VAR 0 1
36368: PUSH
36369: LD_INT 250
36371: EQUAL
36372: PUSH
36373: LD_VAR 0 2
36377: PPUSH
36378: CALL_OW 264
36382: PUSH
36383: LD_INT 81
36385: EQUAL
36386: AND
36387: IFFALSE 36408
// MinerPlaceMine ( unit , x , y ) ;
36389: LD_VAR 0 2
36393: PPUSH
36394: LD_VAR 0 4
36398: PPUSH
36399: LD_VAR 0 5
36403: PPUSH
36404: CALL 38793 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36408: LD_VAR 0 1
36412: PUSH
36413: LD_INT 251
36415: EQUAL
36416: PUSH
36417: LD_VAR 0 2
36421: PPUSH
36422: CALL_OW 264
36426: PUSH
36427: LD_INT 81
36429: EQUAL
36430: AND
36431: IFFALSE 36452
// MinerDetonateMine ( unit , x , y ) ;
36433: LD_VAR 0 2
36437: PPUSH
36438: LD_VAR 0 4
36442: PPUSH
36443: LD_VAR 0 5
36447: PPUSH
36448: CALL 39068 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36452: LD_VAR 0 1
36456: PUSH
36457: LD_INT 252
36459: EQUAL
36460: PUSH
36461: LD_VAR 0 2
36465: PPUSH
36466: CALL_OW 264
36470: PUSH
36471: LD_INT 81
36473: EQUAL
36474: AND
36475: IFFALSE 36496
// MinerCreateMinefield ( unit , x , y ) ;
36477: LD_VAR 0 2
36481: PPUSH
36482: LD_VAR 0 4
36486: PPUSH
36487: LD_VAR 0 5
36491: PPUSH
36492: CALL 39485 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36496: LD_VAR 0 1
36500: PUSH
36501: LD_INT 253
36503: EQUAL
36504: PUSH
36505: LD_VAR 0 2
36509: PPUSH
36510: CALL_OW 257
36514: PUSH
36515: LD_INT 5
36517: EQUAL
36518: AND
36519: IFFALSE 36540
// ComBinocular ( unit , x , y ) ;
36521: LD_VAR 0 2
36525: PPUSH
36526: LD_VAR 0 4
36530: PPUSH
36531: LD_VAR 0 5
36535: PPUSH
36536: CALL 39854 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36540: LD_VAR 0 1
36544: PUSH
36545: LD_INT 254
36547: EQUAL
36548: PUSH
36549: LD_VAR 0 2
36553: PPUSH
36554: CALL_OW 264
36558: PUSH
36559: LD_INT 99
36561: EQUAL
36562: AND
36563: PUSH
36564: LD_VAR 0 3
36568: PPUSH
36569: CALL_OW 263
36573: PUSH
36574: LD_INT 3
36576: EQUAL
36577: AND
36578: IFFALSE 36594
// HackDestroyVehicle ( unit , selectedUnit ) ;
36580: LD_VAR 0 2
36584: PPUSH
36585: LD_VAR 0 3
36589: PPUSH
36590: CALL 38157 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36594: LD_VAR 0 1
36598: PUSH
36599: LD_INT 255
36601: EQUAL
36602: PUSH
36603: LD_VAR 0 2
36607: PPUSH
36608: CALL_OW 264
36612: PUSH
36613: LD_INT 14
36615: PUSH
36616: LD_INT 53
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: IN
36623: AND
36624: PUSH
36625: LD_VAR 0 4
36629: PPUSH
36630: LD_VAR 0 5
36634: PPUSH
36635: CALL_OW 488
36639: AND
36640: IFFALSE 36664
// CutTreeXYR ( unit , x , y , 12 ) ;
36642: LD_VAR 0 2
36646: PPUSH
36647: LD_VAR 0 4
36651: PPUSH
36652: LD_VAR 0 5
36656: PPUSH
36657: LD_INT 12
36659: PPUSH
36660: CALL 36727 0 4
// if cmd = 256 then
36664: LD_VAR 0 1
36668: PUSH
36669: LD_INT 256
36671: EQUAL
36672: IFFALSE 36693
// SetFactoryWaypoint ( unit , x , y ) ;
36674: LD_VAR 0 2
36678: PPUSH
36679: LD_VAR 0 4
36683: PPUSH
36684: LD_VAR 0 5
36688: PPUSH
36689: CALL 34674 0 3
// if cmd = 257 then
36693: LD_VAR 0 1
36697: PUSH
36698: LD_INT 257
36700: EQUAL
36701: IFFALSE 36722
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36703: LD_VAR 0 2
36707: PPUSH
36708: LD_VAR 0 4
36712: PPUSH
36713: LD_VAR 0 5
36717: PPUSH
36718: CALL 35036 0 3
// end ;
36722: LD_VAR 0 6
36726: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36727: LD_INT 0
36729: PPUSH
36730: PPUSH
36731: PPUSH
36732: PPUSH
36733: PPUSH
36734: PPUSH
36735: PPUSH
36736: PPUSH
36737: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36738: LD_VAR 0 1
36742: NOT
36743: PUSH
36744: LD_VAR 0 2
36748: PPUSH
36749: LD_VAR 0 3
36753: PPUSH
36754: CALL_OW 488
36758: NOT
36759: OR
36760: PUSH
36761: LD_VAR 0 4
36765: NOT
36766: OR
36767: IFFALSE 36771
// exit ;
36769: GO 37111
// list := [ ] ;
36771: LD_ADDR_VAR 0 13
36775: PUSH
36776: EMPTY
36777: ST_TO_ADDR
// if x - r < 0 then
36778: LD_VAR 0 2
36782: PUSH
36783: LD_VAR 0 4
36787: MINUS
36788: PUSH
36789: LD_INT 0
36791: LESS
36792: IFFALSE 36804
// min_x := 0 else
36794: LD_ADDR_VAR 0 7
36798: PUSH
36799: LD_INT 0
36801: ST_TO_ADDR
36802: GO 36820
// min_x := x - r ;
36804: LD_ADDR_VAR 0 7
36808: PUSH
36809: LD_VAR 0 2
36813: PUSH
36814: LD_VAR 0 4
36818: MINUS
36819: ST_TO_ADDR
// if y - r < 0 then
36820: LD_VAR 0 3
36824: PUSH
36825: LD_VAR 0 4
36829: MINUS
36830: PUSH
36831: LD_INT 0
36833: LESS
36834: IFFALSE 36846
// min_y := 0 else
36836: LD_ADDR_VAR 0 8
36840: PUSH
36841: LD_INT 0
36843: ST_TO_ADDR
36844: GO 36862
// min_y := y - r ;
36846: LD_ADDR_VAR 0 8
36850: PUSH
36851: LD_VAR 0 3
36855: PUSH
36856: LD_VAR 0 4
36860: MINUS
36861: ST_TO_ADDR
// max_x := x + r ;
36862: LD_ADDR_VAR 0 9
36866: PUSH
36867: LD_VAR 0 2
36871: PUSH
36872: LD_VAR 0 4
36876: PLUS
36877: ST_TO_ADDR
// max_y := y + r ;
36878: LD_ADDR_VAR 0 10
36882: PUSH
36883: LD_VAR 0 3
36887: PUSH
36888: LD_VAR 0 4
36892: PLUS
36893: ST_TO_ADDR
// for _x = min_x to max_x do
36894: LD_ADDR_VAR 0 11
36898: PUSH
36899: DOUBLE
36900: LD_VAR 0 7
36904: DEC
36905: ST_TO_ADDR
36906: LD_VAR 0 9
36910: PUSH
36911: FOR_TO
36912: IFFALSE 37029
// for _y = min_y to max_y do
36914: LD_ADDR_VAR 0 12
36918: PUSH
36919: DOUBLE
36920: LD_VAR 0 8
36924: DEC
36925: ST_TO_ADDR
36926: LD_VAR 0 10
36930: PUSH
36931: FOR_TO
36932: IFFALSE 37025
// begin if not ValidHex ( _x , _y ) then
36934: LD_VAR 0 11
36938: PPUSH
36939: LD_VAR 0 12
36943: PPUSH
36944: CALL_OW 488
36948: NOT
36949: IFFALSE 36953
// continue ;
36951: GO 36931
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36953: LD_VAR 0 11
36957: PPUSH
36958: LD_VAR 0 12
36962: PPUSH
36963: CALL_OW 351
36967: PUSH
36968: LD_VAR 0 11
36972: PPUSH
36973: LD_VAR 0 12
36977: PPUSH
36978: CALL_OW 554
36982: AND
36983: IFFALSE 37023
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36985: LD_ADDR_VAR 0 13
36989: PUSH
36990: LD_VAR 0 13
36994: PPUSH
36995: LD_VAR 0 13
36999: PUSH
37000: LD_INT 1
37002: PLUS
37003: PPUSH
37004: LD_VAR 0 11
37008: PUSH
37009: LD_VAR 0 12
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PPUSH
37018: CALL_OW 2
37022: ST_TO_ADDR
// end ;
37023: GO 36931
37025: POP
37026: POP
37027: GO 36911
37029: POP
37030: POP
// if not list then
37031: LD_VAR 0 13
37035: NOT
37036: IFFALSE 37040
// exit ;
37038: GO 37111
// for i in list do
37040: LD_ADDR_VAR 0 6
37044: PUSH
37045: LD_VAR 0 13
37049: PUSH
37050: FOR_IN
37051: IFFALSE 37109
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37053: LD_VAR 0 1
37057: PPUSH
37058: LD_STRING M
37060: PUSH
37061: LD_VAR 0 6
37065: PUSH
37066: LD_INT 1
37068: ARRAY
37069: PUSH
37070: LD_VAR 0 6
37074: PUSH
37075: LD_INT 2
37077: ARRAY
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: LD_INT 0
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: PUSH
37100: EMPTY
37101: LIST
37102: PPUSH
37103: CALL_OW 447
37107: GO 37050
37109: POP
37110: POP
// end ;
37111: LD_VAR 0 5
37115: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37116: LD_EXP 99
37120: NOT
37121: IFFALSE 37171
37123: GO 37125
37125: DISABLE
// begin initHack := true ;
37126: LD_ADDR_EXP 99
37130: PUSH
37131: LD_INT 1
37133: ST_TO_ADDR
// hackTanks := [ ] ;
37134: LD_ADDR_EXP 100
37138: PUSH
37139: EMPTY
37140: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37141: LD_ADDR_EXP 101
37145: PUSH
37146: EMPTY
37147: ST_TO_ADDR
// hackLimit := 3 ;
37148: LD_ADDR_EXP 102
37152: PUSH
37153: LD_INT 3
37155: ST_TO_ADDR
// hackDist := 12 ;
37156: LD_ADDR_EXP 103
37160: PUSH
37161: LD_INT 12
37163: ST_TO_ADDR
// hackCounter := [ ] ;
37164: LD_ADDR_EXP 104
37168: PUSH
37169: EMPTY
37170: ST_TO_ADDR
// end ;
37171: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37172: LD_EXP 99
37176: PUSH
37177: LD_INT 34
37179: PUSH
37180: LD_INT 99
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PPUSH
37187: CALL_OW 69
37191: AND
37192: IFFALSE 37445
37194: GO 37196
37196: DISABLE
37197: LD_INT 0
37199: PPUSH
37200: PPUSH
// begin enable ;
37201: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37202: LD_ADDR_VAR 0 1
37206: PUSH
37207: LD_INT 34
37209: PUSH
37210: LD_INT 99
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PPUSH
37217: CALL_OW 69
37221: PUSH
37222: FOR_IN
37223: IFFALSE 37443
// begin if not i in hackTanks then
37225: LD_VAR 0 1
37229: PUSH
37230: LD_EXP 100
37234: IN
37235: NOT
37236: IFFALSE 37319
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37238: LD_ADDR_EXP 100
37242: PUSH
37243: LD_EXP 100
37247: PPUSH
37248: LD_EXP 100
37252: PUSH
37253: LD_INT 1
37255: PLUS
37256: PPUSH
37257: LD_VAR 0 1
37261: PPUSH
37262: CALL_OW 1
37266: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37267: LD_ADDR_EXP 101
37271: PUSH
37272: LD_EXP 101
37276: PPUSH
37277: LD_EXP 101
37281: PUSH
37282: LD_INT 1
37284: PLUS
37285: PPUSH
37286: EMPTY
37287: PPUSH
37288: CALL_OW 1
37292: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37293: LD_ADDR_EXP 104
37297: PUSH
37298: LD_EXP 104
37302: PPUSH
37303: LD_EXP 104
37307: PUSH
37308: LD_INT 1
37310: PLUS
37311: PPUSH
37312: EMPTY
37313: PPUSH
37314: CALL_OW 1
37318: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37319: LD_VAR 0 1
37323: PPUSH
37324: CALL_OW 302
37328: NOT
37329: IFFALSE 37342
// begin HackUnlinkAll ( i ) ;
37331: LD_VAR 0 1
37335: PPUSH
37336: CALL 37448 0 1
// continue ;
37340: GO 37222
// end ; HackCheckCapturedStatus ( i ) ;
37342: LD_VAR 0 1
37346: PPUSH
37347: CALL 37891 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37351: LD_ADDR_VAR 0 2
37355: PUSH
37356: LD_INT 81
37358: PUSH
37359: LD_VAR 0 1
37363: PPUSH
37364: CALL_OW 255
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 33
37375: PUSH
37376: LD_INT 3
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 91
37385: PUSH
37386: LD_VAR 0 1
37390: PUSH
37391: LD_EXP 103
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 50
37403: PUSH
37404: EMPTY
37405: LIST
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: PPUSH
37413: CALL_OW 69
37417: ST_TO_ADDR
// if not tmp then
37418: LD_VAR 0 2
37422: NOT
37423: IFFALSE 37427
// continue ;
37425: GO 37222
// HackLink ( i , tmp ) ;
37427: LD_VAR 0 1
37431: PPUSH
37432: LD_VAR 0 2
37436: PPUSH
37437: CALL 37584 0 2
// end ;
37441: GO 37222
37443: POP
37444: POP
// end ;
37445: PPOPN 2
37447: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37448: LD_INT 0
37450: PPUSH
37451: PPUSH
37452: PPUSH
// if not hack in hackTanks then
37453: LD_VAR 0 1
37457: PUSH
37458: LD_EXP 100
37462: IN
37463: NOT
37464: IFFALSE 37468
// exit ;
37466: GO 37579
// index := GetElementIndex ( hackTanks , hack ) ;
37468: LD_ADDR_VAR 0 4
37472: PUSH
37473: LD_EXP 100
37477: PPUSH
37478: LD_VAR 0 1
37482: PPUSH
37483: CALL 45021 0 2
37487: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37488: LD_EXP 101
37492: PUSH
37493: LD_VAR 0 4
37497: ARRAY
37498: IFFALSE 37579
// begin for i in hackTanksCaptured [ index ] do
37500: LD_ADDR_VAR 0 3
37504: PUSH
37505: LD_EXP 101
37509: PUSH
37510: LD_VAR 0 4
37514: ARRAY
37515: PUSH
37516: FOR_IN
37517: IFFALSE 37543
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37519: LD_VAR 0 3
37523: PUSH
37524: LD_INT 1
37526: ARRAY
37527: PPUSH
37528: LD_VAR 0 3
37532: PUSH
37533: LD_INT 2
37535: ARRAY
37536: PPUSH
37537: CALL_OW 235
37541: GO 37516
37543: POP
37544: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37545: LD_ADDR_EXP 101
37549: PUSH
37550: LD_EXP 101
37554: PPUSH
37555: LD_VAR 0 4
37559: PPUSH
37560: EMPTY
37561: PPUSH
37562: CALL_OW 1
37566: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37567: LD_VAR 0 1
37571: PPUSH
37572: LD_INT 0
37574: PPUSH
37575: CALL_OW 505
// end ; end ;
37579: LD_VAR 0 2
37583: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37584: LD_INT 0
37586: PPUSH
37587: PPUSH
37588: PPUSH
// if not hack in hackTanks or not vehicles then
37589: LD_VAR 0 1
37593: PUSH
37594: LD_EXP 100
37598: IN
37599: NOT
37600: PUSH
37601: LD_VAR 0 2
37605: NOT
37606: OR
37607: IFFALSE 37611
// exit ;
37609: GO 37886
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37611: LD_ADDR_VAR 0 2
37615: PUSH
37616: LD_VAR 0 1
37620: PPUSH
37621: LD_VAR 0 2
37625: PPUSH
37626: LD_INT 1
37628: PPUSH
37629: LD_INT 1
37631: PPUSH
37632: CALL 45671 0 4
37636: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37637: LD_ADDR_VAR 0 5
37641: PUSH
37642: LD_EXP 100
37646: PPUSH
37647: LD_VAR 0 1
37651: PPUSH
37652: CALL 45021 0 2
37656: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37657: LD_EXP 101
37661: PUSH
37662: LD_VAR 0 5
37666: ARRAY
37667: PUSH
37668: LD_EXP 102
37672: LESS
37673: IFFALSE 37862
// begin for i := 1 to vehicles do
37675: LD_ADDR_VAR 0 4
37679: PUSH
37680: DOUBLE
37681: LD_INT 1
37683: DEC
37684: ST_TO_ADDR
37685: LD_VAR 0 2
37689: PUSH
37690: FOR_TO
37691: IFFALSE 37860
// begin if hackTanksCaptured [ index ] = hackLimit then
37693: LD_EXP 101
37697: PUSH
37698: LD_VAR 0 5
37702: ARRAY
37703: PUSH
37704: LD_EXP 102
37708: EQUAL
37709: IFFALSE 37713
// break ;
37711: GO 37860
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37713: LD_ADDR_EXP 104
37717: PUSH
37718: LD_EXP 104
37722: PPUSH
37723: LD_VAR 0 5
37727: PPUSH
37728: LD_EXP 104
37732: PUSH
37733: LD_VAR 0 5
37737: ARRAY
37738: PUSH
37739: LD_INT 1
37741: PLUS
37742: PPUSH
37743: CALL_OW 1
37747: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37748: LD_ADDR_EXP 101
37752: PUSH
37753: LD_EXP 101
37757: PPUSH
37758: LD_VAR 0 5
37762: PUSH
37763: LD_EXP 101
37767: PUSH
37768: LD_VAR 0 5
37772: ARRAY
37773: PUSH
37774: LD_INT 1
37776: PLUS
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PPUSH
37782: LD_VAR 0 2
37786: PUSH
37787: LD_VAR 0 4
37791: ARRAY
37792: PUSH
37793: LD_VAR 0 2
37797: PUSH
37798: LD_VAR 0 4
37802: ARRAY
37803: PPUSH
37804: CALL_OW 255
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PPUSH
37813: CALL 45236 0 3
37817: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37818: LD_VAR 0 2
37822: PUSH
37823: LD_VAR 0 4
37827: ARRAY
37828: PPUSH
37829: LD_VAR 0 1
37833: PPUSH
37834: CALL_OW 255
37838: PPUSH
37839: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37843: LD_VAR 0 2
37847: PUSH
37848: LD_VAR 0 4
37852: ARRAY
37853: PPUSH
37854: CALL_OW 141
// end ;
37858: GO 37690
37860: POP
37861: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37862: LD_VAR 0 1
37866: PPUSH
37867: LD_EXP 101
37871: PUSH
37872: LD_VAR 0 5
37876: ARRAY
37877: PUSH
37878: LD_INT 0
37880: PLUS
37881: PPUSH
37882: CALL_OW 505
// end ;
37886: LD_VAR 0 3
37890: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37891: LD_INT 0
37893: PPUSH
37894: PPUSH
37895: PPUSH
37896: PPUSH
// if not hack in hackTanks then
37897: LD_VAR 0 1
37901: PUSH
37902: LD_EXP 100
37906: IN
37907: NOT
37908: IFFALSE 37912
// exit ;
37910: GO 38152
// index := GetElementIndex ( hackTanks , hack ) ;
37912: LD_ADDR_VAR 0 4
37916: PUSH
37917: LD_EXP 100
37921: PPUSH
37922: LD_VAR 0 1
37926: PPUSH
37927: CALL 45021 0 2
37931: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37932: LD_ADDR_VAR 0 3
37936: PUSH
37937: DOUBLE
37938: LD_EXP 101
37942: PUSH
37943: LD_VAR 0 4
37947: ARRAY
37948: INC
37949: ST_TO_ADDR
37950: LD_INT 1
37952: PUSH
37953: FOR_DOWNTO
37954: IFFALSE 38126
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37956: LD_ADDR_VAR 0 5
37960: PUSH
37961: LD_EXP 101
37965: PUSH
37966: LD_VAR 0 4
37970: ARRAY
37971: PUSH
37972: LD_VAR 0 3
37976: ARRAY
37977: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37978: LD_VAR 0 5
37982: PUSH
37983: LD_INT 1
37985: ARRAY
37986: PPUSH
37987: CALL_OW 302
37991: NOT
37992: PUSH
37993: LD_VAR 0 5
37997: PUSH
37998: LD_INT 1
38000: ARRAY
38001: PPUSH
38002: CALL_OW 255
38006: PUSH
38007: LD_VAR 0 1
38011: PPUSH
38012: CALL_OW 255
38016: NONEQUAL
38017: OR
38018: IFFALSE 38124
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38020: LD_VAR 0 5
38024: PUSH
38025: LD_INT 1
38027: ARRAY
38028: PPUSH
38029: CALL_OW 305
38033: PUSH
38034: LD_VAR 0 5
38038: PUSH
38039: LD_INT 1
38041: ARRAY
38042: PPUSH
38043: CALL_OW 255
38047: PUSH
38048: LD_VAR 0 1
38052: PPUSH
38053: CALL_OW 255
38057: EQUAL
38058: AND
38059: IFFALSE 38083
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38061: LD_VAR 0 5
38065: PUSH
38066: LD_INT 1
38068: ARRAY
38069: PPUSH
38070: LD_VAR 0 5
38074: PUSH
38075: LD_INT 2
38077: ARRAY
38078: PPUSH
38079: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38083: LD_ADDR_EXP 101
38087: PUSH
38088: LD_EXP 101
38092: PPUSH
38093: LD_VAR 0 4
38097: PPUSH
38098: LD_EXP 101
38102: PUSH
38103: LD_VAR 0 4
38107: ARRAY
38108: PPUSH
38109: LD_VAR 0 3
38113: PPUSH
38114: CALL_OW 3
38118: PPUSH
38119: CALL_OW 1
38123: ST_TO_ADDR
// end ; end ;
38124: GO 37953
38126: POP
38127: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38128: LD_VAR 0 1
38132: PPUSH
38133: LD_EXP 101
38137: PUSH
38138: LD_VAR 0 4
38142: ARRAY
38143: PUSH
38144: LD_INT 0
38146: PLUS
38147: PPUSH
38148: CALL_OW 505
// end ;
38152: LD_VAR 0 2
38156: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38157: LD_INT 0
38159: PPUSH
38160: PPUSH
38161: PPUSH
38162: PPUSH
// if not hack in hackTanks then
38163: LD_VAR 0 1
38167: PUSH
38168: LD_EXP 100
38172: IN
38173: NOT
38174: IFFALSE 38178
// exit ;
38176: GO 38263
// index := GetElementIndex ( hackTanks , hack ) ;
38178: LD_ADDR_VAR 0 5
38182: PUSH
38183: LD_EXP 100
38187: PPUSH
38188: LD_VAR 0 1
38192: PPUSH
38193: CALL 45021 0 2
38197: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38198: LD_ADDR_VAR 0 4
38202: PUSH
38203: DOUBLE
38204: LD_INT 1
38206: DEC
38207: ST_TO_ADDR
38208: LD_EXP 101
38212: PUSH
38213: LD_VAR 0 5
38217: ARRAY
38218: PUSH
38219: FOR_TO
38220: IFFALSE 38261
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38222: LD_EXP 101
38226: PUSH
38227: LD_VAR 0 5
38231: ARRAY
38232: PUSH
38233: LD_VAR 0 4
38237: ARRAY
38238: PUSH
38239: LD_INT 1
38241: ARRAY
38242: PUSH
38243: LD_VAR 0 2
38247: EQUAL
38248: IFFALSE 38259
// KillUnit ( vehicle ) ;
38250: LD_VAR 0 2
38254: PPUSH
38255: CALL_OW 66
38259: GO 38219
38261: POP
38262: POP
// end ;
38263: LD_VAR 0 3
38267: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38268: LD_EXP 105
38272: NOT
38273: IFFALSE 38308
38275: GO 38277
38277: DISABLE
// begin initMiner := true ;
38278: LD_ADDR_EXP 105
38282: PUSH
38283: LD_INT 1
38285: ST_TO_ADDR
// minersList := [ ] ;
38286: LD_ADDR_EXP 106
38290: PUSH
38291: EMPTY
38292: ST_TO_ADDR
// minerMinesList := [ ] ;
38293: LD_ADDR_EXP 107
38297: PUSH
38298: EMPTY
38299: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38300: LD_ADDR_EXP 108
38304: PUSH
38305: LD_INT 5
38307: ST_TO_ADDR
// end ;
38308: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38309: LD_EXP 105
38313: PUSH
38314: LD_INT 34
38316: PUSH
38317: LD_INT 81
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PPUSH
38324: CALL_OW 69
38328: AND
38329: IFFALSE 38790
38331: GO 38333
38333: DISABLE
38334: LD_INT 0
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
// begin enable ;
38340: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38341: LD_ADDR_VAR 0 1
38345: PUSH
38346: LD_INT 34
38348: PUSH
38349: LD_INT 81
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PPUSH
38356: CALL_OW 69
38360: PUSH
38361: FOR_IN
38362: IFFALSE 38434
// begin if not i in minersList then
38364: LD_VAR 0 1
38368: PUSH
38369: LD_EXP 106
38373: IN
38374: NOT
38375: IFFALSE 38432
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38377: LD_ADDR_EXP 106
38381: PUSH
38382: LD_EXP 106
38386: PPUSH
38387: LD_EXP 106
38391: PUSH
38392: LD_INT 1
38394: PLUS
38395: PPUSH
38396: LD_VAR 0 1
38400: PPUSH
38401: CALL_OW 1
38405: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38406: LD_ADDR_EXP 107
38410: PUSH
38411: LD_EXP 107
38415: PPUSH
38416: LD_EXP 107
38420: PUSH
38421: LD_INT 1
38423: PLUS
38424: PPUSH
38425: EMPTY
38426: PPUSH
38427: CALL_OW 1
38431: ST_TO_ADDR
// end end ;
38432: GO 38361
38434: POP
38435: POP
// for i := minerMinesList downto 1 do
38436: LD_ADDR_VAR 0 1
38440: PUSH
38441: DOUBLE
38442: LD_EXP 107
38446: INC
38447: ST_TO_ADDR
38448: LD_INT 1
38450: PUSH
38451: FOR_DOWNTO
38452: IFFALSE 38788
// begin if IsLive ( minersList [ i ] ) then
38454: LD_EXP 106
38458: PUSH
38459: LD_VAR 0 1
38463: ARRAY
38464: PPUSH
38465: CALL_OW 300
38469: IFFALSE 38497
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38471: LD_EXP 106
38475: PUSH
38476: LD_VAR 0 1
38480: ARRAY
38481: PPUSH
38482: LD_EXP 107
38486: PUSH
38487: LD_VAR 0 1
38491: ARRAY
38492: PPUSH
38493: CALL_OW 505
// if not minerMinesList [ i ] then
38497: LD_EXP 107
38501: PUSH
38502: LD_VAR 0 1
38506: ARRAY
38507: NOT
38508: IFFALSE 38512
// continue ;
38510: GO 38451
// for j := minerMinesList [ i ] downto 1 do
38512: LD_ADDR_VAR 0 2
38516: PUSH
38517: DOUBLE
38518: LD_EXP 107
38522: PUSH
38523: LD_VAR 0 1
38527: ARRAY
38528: INC
38529: ST_TO_ADDR
38530: LD_INT 1
38532: PUSH
38533: FOR_DOWNTO
38534: IFFALSE 38784
// begin side := GetSide ( minersList [ i ] ) ;
38536: LD_ADDR_VAR 0 3
38540: PUSH
38541: LD_EXP 106
38545: PUSH
38546: LD_VAR 0 1
38550: ARRAY
38551: PPUSH
38552: CALL_OW 255
38556: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38557: LD_ADDR_VAR 0 4
38561: PUSH
38562: LD_EXP 107
38566: PUSH
38567: LD_VAR 0 1
38571: ARRAY
38572: PUSH
38573: LD_VAR 0 2
38577: ARRAY
38578: PUSH
38579: LD_INT 1
38581: ARRAY
38582: PPUSH
38583: LD_EXP 107
38587: PUSH
38588: LD_VAR 0 1
38592: ARRAY
38593: PUSH
38594: LD_VAR 0 2
38598: ARRAY
38599: PUSH
38600: LD_INT 2
38602: ARRAY
38603: PPUSH
38604: CALL_OW 428
38608: ST_TO_ADDR
// if not tmp then
38609: LD_VAR 0 4
38613: NOT
38614: IFFALSE 38618
// continue ;
38616: GO 38533
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38618: LD_VAR 0 4
38622: PUSH
38623: LD_INT 81
38625: PUSH
38626: LD_VAR 0 3
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PPUSH
38635: CALL_OW 69
38639: IN
38640: PUSH
38641: LD_EXP 107
38645: PUSH
38646: LD_VAR 0 1
38650: ARRAY
38651: PUSH
38652: LD_VAR 0 2
38656: ARRAY
38657: PUSH
38658: LD_INT 1
38660: ARRAY
38661: PPUSH
38662: LD_EXP 107
38666: PUSH
38667: LD_VAR 0 1
38671: ARRAY
38672: PUSH
38673: LD_VAR 0 2
38677: ARRAY
38678: PUSH
38679: LD_INT 2
38681: ARRAY
38682: PPUSH
38683: CALL_OW 458
38687: AND
38688: IFFALSE 38782
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38690: LD_EXP 107
38694: PUSH
38695: LD_VAR 0 1
38699: ARRAY
38700: PUSH
38701: LD_VAR 0 2
38705: ARRAY
38706: PUSH
38707: LD_INT 1
38709: ARRAY
38710: PPUSH
38711: LD_EXP 107
38715: PUSH
38716: LD_VAR 0 1
38720: ARRAY
38721: PUSH
38722: LD_VAR 0 2
38726: ARRAY
38727: PUSH
38728: LD_INT 2
38730: ARRAY
38731: PPUSH
38732: LD_VAR 0 3
38736: PPUSH
38737: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38741: LD_ADDR_EXP 107
38745: PUSH
38746: LD_EXP 107
38750: PPUSH
38751: LD_VAR 0 1
38755: PPUSH
38756: LD_EXP 107
38760: PUSH
38761: LD_VAR 0 1
38765: ARRAY
38766: PPUSH
38767: LD_VAR 0 2
38771: PPUSH
38772: CALL_OW 3
38776: PPUSH
38777: CALL_OW 1
38781: ST_TO_ADDR
// end ; end ;
38782: GO 38533
38784: POP
38785: POP
// end ;
38786: GO 38451
38788: POP
38789: POP
// end ;
38790: PPOPN 4
38792: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38793: LD_INT 0
38795: PPUSH
38796: PPUSH
// result := false ;
38797: LD_ADDR_VAR 0 4
38801: PUSH
38802: LD_INT 0
38804: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38805: LD_VAR 0 1
38809: PPUSH
38810: CALL_OW 264
38814: PUSH
38815: LD_INT 81
38817: EQUAL
38818: NOT
38819: IFFALSE 38823
// exit ;
38821: GO 39063
// index := GetElementIndex ( minersList , unit ) ;
38823: LD_ADDR_VAR 0 5
38827: PUSH
38828: LD_EXP 106
38832: PPUSH
38833: LD_VAR 0 1
38837: PPUSH
38838: CALL 45021 0 2
38842: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38843: LD_EXP 107
38847: PUSH
38848: LD_VAR 0 5
38852: ARRAY
38853: PUSH
38854: LD_EXP 108
38858: GREATEREQUAL
38859: IFFALSE 38863
// exit ;
38861: GO 39063
// ComMoveXY ( unit , x , y ) ;
38863: LD_VAR 0 1
38867: PPUSH
38868: LD_VAR 0 2
38872: PPUSH
38873: LD_VAR 0 3
38877: PPUSH
38878: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38882: LD_INT 35
38884: PPUSH
38885: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38889: LD_VAR 0 1
38893: PPUSH
38894: LD_VAR 0 2
38898: PPUSH
38899: LD_VAR 0 3
38903: PPUSH
38904: CALL 76405 0 3
38908: NOT
38909: PUSH
38910: LD_VAR 0 1
38914: PPUSH
38915: CALL_OW 314
38919: AND
38920: IFFALSE 38924
// exit ;
38922: GO 39063
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38924: LD_VAR 0 2
38928: PPUSH
38929: LD_VAR 0 3
38933: PPUSH
38934: CALL_OW 428
38938: PUSH
38939: LD_VAR 0 1
38943: EQUAL
38944: PUSH
38945: LD_VAR 0 1
38949: PPUSH
38950: CALL_OW 314
38954: NOT
38955: AND
38956: IFFALSE 38882
// PlaySoundXY ( x , y , PlantMine ) ;
38958: LD_VAR 0 2
38962: PPUSH
38963: LD_VAR 0 3
38967: PPUSH
38968: LD_STRING PlantMine
38970: PPUSH
38971: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38975: LD_VAR 0 2
38979: PPUSH
38980: LD_VAR 0 3
38984: PPUSH
38985: LD_VAR 0 1
38989: PPUSH
38990: CALL_OW 255
38994: PPUSH
38995: LD_INT 0
38997: PPUSH
38998: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39002: LD_ADDR_EXP 107
39006: PUSH
39007: LD_EXP 107
39011: PPUSH
39012: LD_VAR 0 5
39016: PUSH
39017: LD_EXP 107
39021: PUSH
39022: LD_VAR 0 5
39026: ARRAY
39027: PUSH
39028: LD_INT 1
39030: PLUS
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PPUSH
39036: LD_VAR 0 2
39040: PUSH
39041: LD_VAR 0 3
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PPUSH
39050: CALL 45236 0 3
39054: ST_TO_ADDR
// result := true ;
39055: LD_ADDR_VAR 0 4
39059: PUSH
39060: LD_INT 1
39062: ST_TO_ADDR
// end ;
39063: LD_VAR 0 4
39067: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39068: LD_INT 0
39070: PPUSH
39071: PPUSH
39072: PPUSH
// if not unit in minersList then
39073: LD_VAR 0 1
39077: PUSH
39078: LD_EXP 106
39082: IN
39083: NOT
39084: IFFALSE 39088
// exit ;
39086: GO 39480
// index := GetElementIndex ( minersList , unit ) ;
39088: LD_ADDR_VAR 0 6
39092: PUSH
39093: LD_EXP 106
39097: PPUSH
39098: LD_VAR 0 1
39102: PPUSH
39103: CALL 45021 0 2
39107: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39108: LD_ADDR_VAR 0 5
39112: PUSH
39113: DOUBLE
39114: LD_EXP 107
39118: PUSH
39119: LD_VAR 0 6
39123: ARRAY
39124: INC
39125: ST_TO_ADDR
39126: LD_INT 1
39128: PUSH
39129: FOR_DOWNTO
39130: IFFALSE 39291
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39132: LD_EXP 107
39136: PUSH
39137: LD_VAR 0 6
39141: ARRAY
39142: PUSH
39143: LD_VAR 0 5
39147: ARRAY
39148: PUSH
39149: LD_INT 1
39151: ARRAY
39152: PUSH
39153: LD_VAR 0 2
39157: EQUAL
39158: PUSH
39159: LD_EXP 107
39163: PUSH
39164: LD_VAR 0 6
39168: ARRAY
39169: PUSH
39170: LD_VAR 0 5
39174: ARRAY
39175: PUSH
39176: LD_INT 2
39178: ARRAY
39179: PUSH
39180: LD_VAR 0 3
39184: EQUAL
39185: AND
39186: IFFALSE 39289
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39188: LD_EXP 107
39192: PUSH
39193: LD_VAR 0 6
39197: ARRAY
39198: PUSH
39199: LD_VAR 0 5
39203: ARRAY
39204: PUSH
39205: LD_INT 1
39207: ARRAY
39208: PPUSH
39209: LD_EXP 107
39213: PUSH
39214: LD_VAR 0 6
39218: ARRAY
39219: PUSH
39220: LD_VAR 0 5
39224: ARRAY
39225: PUSH
39226: LD_INT 2
39228: ARRAY
39229: PPUSH
39230: LD_VAR 0 1
39234: PPUSH
39235: CALL_OW 255
39239: PPUSH
39240: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39244: LD_ADDR_EXP 107
39248: PUSH
39249: LD_EXP 107
39253: PPUSH
39254: LD_VAR 0 6
39258: PPUSH
39259: LD_EXP 107
39263: PUSH
39264: LD_VAR 0 6
39268: ARRAY
39269: PPUSH
39270: LD_VAR 0 5
39274: PPUSH
39275: CALL_OW 3
39279: PPUSH
39280: CALL_OW 1
39284: ST_TO_ADDR
// exit ;
39285: POP
39286: POP
39287: GO 39480
// end ; end ;
39289: GO 39129
39291: POP
39292: POP
// for i := minerMinesList [ index ] downto 1 do
39293: LD_ADDR_VAR 0 5
39297: PUSH
39298: DOUBLE
39299: LD_EXP 107
39303: PUSH
39304: LD_VAR 0 6
39308: ARRAY
39309: INC
39310: ST_TO_ADDR
39311: LD_INT 1
39313: PUSH
39314: FOR_DOWNTO
39315: IFFALSE 39478
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39317: LD_EXP 107
39321: PUSH
39322: LD_VAR 0 6
39326: ARRAY
39327: PUSH
39328: LD_VAR 0 5
39332: ARRAY
39333: PUSH
39334: LD_INT 1
39336: ARRAY
39337: PPUSH
39338: LD_EXP 107
39342: PUSH
39343: LD_VAR 0 6
39347: ARRAY
39348: PUSH
39349: LD_VAR 0 5
39353: ARRAY
39354: PUSH
39355: LD_INT 2
39357: ARRAY
39358: PPUSH
39359: LD_VAR 0 2
39363: PPUSH
39364: LD_VAR 0 3
39368: PPUSH
39369: CALL_OW 298
39373: PUSH
39374: LD_INT 6
39376: LESS
39377: IFFALSE 39476
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39379: LD_EXP 107
39383: PUSH
39384: LD_VAR 0 6
39388: ARRAY
39389: PUSH
39390: LD_VAR 0 5
39394: ARRAY
39395: PUSH
39396: LD_INT 1
39398: ARRAY
39399: PPUSH
39400: LD_EXP 107
39404: PUSH
39405: LD_VAR 0 6
39409: ARRAY
39410: PUSH
39411: LD_VAR 0 5
39415: ARRAY
39416: PUSH
39417: LD_INT 2
39419: ARRAY
39420: PPUSH
39421: LD_VAR 0 1
39425: PPUSH
39426: CALL_OW 255
39430: PPUSH
39431: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39435: LD_ADDR_EXP 107
39439: PUSH
39440: LD_EXP 107
39444: PPUSH
39445: LD_VAR 0 6
39449: PPUSH
39450: LD_EXP 107
39454: PUSH
39455: LD_VAR 0 6
39459: ARRAY
39460: PPUSH
39461: LD_VAR 0 5
39465: PPUSH
39466: CALL_OW 3
39470: PPUSH
39471: CALL_OW 1
39475: ST_TO_ADDR
// end ; end ;
39476: GO 39314
39478: POP
39479: POP
// end ;
39480: LD_VAR 0 4
39484: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39485: LD_INT 0
39487: PPUSH
39488: PPUSH
39489: PPUSH
39490: PPUSH
39491: PPUSH
39492: PPUSH
39493: PPUSH
39494: PPUSH
39495: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39496: LD_VAR 0 1
39500: PPUSH
39501: CALL_OW 264
39505: PUSH
39506: LD_INT 81
39508: EQUAL
39509: NOT
39510: PUSH
39511: LD_VAR 0 1
39515: PUSH
39516: LD_EXP 106
39520: IN
39521: NOT
39522: OR
39523: IFFALSE 39527
// exit ;
39525: GO 39849
// index := GetElementIndex ( minersList , unit ) ;
39527: LD_ADDR_VAR 0 6
39531: PUSH
39532: LD_EXP 106
39536: PPUSH
39537: LD_VAR 0 1
39541: PPUSH
39542: CALL 45021 0 2
39546: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39547: LD_ADDR_VAR 0 8
39551: PUSH
39552: LD_EXP 108
39556: PUSH
39557: LD_EXP 107
39561: PUSH
39562: LD_VAR 0 6
39566: ARRAY
39567: MINUS
39568: ST_TO_ADDR
// if not minesFreeAmount then
39569: LD_VAR 0 8
39573: NOT
39574: IFFALSE 39578
// exit ;
39576: GO 39849
// tmp := [ ] ;
39578: LD_ADDR_VAR 0 7
39582: PUSH
39583: EMPTY
39584: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39585: LD_ADDR_VAR 0 5
39589: PUSH
39590: DOUBLE
39591: LD_INT 1
39593: DEC
39594: ST_TO_ADDR
39595: LD_VAR 0 8
39599: PUSH
39600: FOR_TO
39601: IFFALSE 39796
// begin _d := rand ( 0 , 5 ) ;
39603: LD_ADDR_VAR 0 11
39607: PUSH
39608: LD_INT 0
39610: PPUSH
39611: LD_INT 5
39613: PPUSH
39614: CALL_OW 12
39618: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39619: LD_ADDR_VAR 0 12
39623: PUSH
39624: LD_INT 2
39626: PPUSH
39627: LD_INT 6
39629: PPUSH
39630: CALL_OW 12
39634: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39635: LD_ADDR_VAR 0 9
39639: PUSH
39640: LD_VAR 0 2
39644: PPUSH
39645: LD_VAR 0 11
39649: PPUSH
39650: LD_VAR 0 12
39654: PPUSH
39655: CALL_OW 272
39659: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39660: LD_ADDR_VAR 0 10
39664: PUSH
39665: LD_VAR 0 3
39669: PPUSH
39670: LD_VAR 0 11
39674: PPUSH
39675: LD_VAR 0 12
39679: PPUSH
39680: CALL_OW 273
39684: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39685: LD_VAR 0 9
39689: PPUSH
39690: LD_VAR 0 10
39694: PPUSH
39695: CALL_OW 488
39699: PUSH
39700: LD_VAR 0 9
39704: PUSH
39705: LD_VAR 0 10
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_VAR 0 7
39718: IN
39719: NOT
39720: AND
39721: PUSH
39722: LD_VAR 0 9
39726: PPUSH
39727: LD_VAR 0 10
39731: PPUSH
39732: CALL_OW 458
39736: NOT
39737: AND
39738: IFFALSE 39780
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39740: LD_ADDR_VAR 0 7
39744: PUSH
39745: LD_VAR 0 7
39749: PPUSH
39750: LD_VAR 0 7
39754: PUSH
39755: LD_INT 1
39757: PLUS
39758: PPUSH
39759: LD_VAR 0 9
39763: PUSH
39764: LD_VAR 0 10
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PPUSH
39773: CALL_OW 1
39777: ST_TO_ADDR
39778: GO 39794
// i := i - 1 ;
39780: LD_ADDR_VAR 0 5
39784: PUSH
39785: LD_VAR 0 5
39789: PUSH
39790: LD_INT 1
39792: MINUS
39793: ST_TO_ADDR
// end ;
39794: GO 39600
39796: POP
39797: POP
// for i in tmp do
39798: LD_ADDR_VAR 0 5
39802: PUSH
39803: LD_VAR 0 7
39807: PUSH
39808: FOR_IN
39809: IFFALSE 39847
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39811: LD_VAR 0 1
39815: PPUSH
39816: LD_VAR 0 5
39820: PUSH
39821: LD_INT 1
39823: ARRAY
39824: PPUSH
39825: LD_VAR 0 5
39829: PUSH
39830: LD_INT 2
39832: ARRAY
39833: PPUSH
39834: CALL 38793 0 3
39838: NOT
39839: IFFALSE 39845
// exit ;
39841: POP
39842: POP
39843: GO 39849
39845: GO 39808
39847: POP
39848: POP
// end ;
39849: LD_VAR 0 4
39853: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39854: LD_INT 0
39856: PPUSH
39857: PPUSH
39858: PPUSH
39859: PPUSH
39860: PPUSH
39861: PPUSH
39862: PPUSH
// if not GetClass ( unit ) = class_sniper then
39863: LD_VAR 0 1
39867: PPUSH
39868: CALL_OW 257
39872: PUSH
39873: LD_INT 5
39875: EQUAL
39876: NOT
39877: IFFALSE 39881
// exit ;
39879: GO 40269
// dist := 8 ;
39881: LD_ADDR_VAR 0 5
39885: PUSH
39886: LD_INT 8
39888: ST_TO_ADDR
// viewRange := 12 ;
39889: LD_ADDR_VAR 0 7
39893: PUSH
39894: LD_INT 12
39896: ST_TO_ADDR
// side := GetSide ( unit ) ;
39897: LD_ADDR_VAR 0 6
39901: PUSH
39902: LD_VAR 0 1
39906: PPUSH
39907: CALL_OW 255
39911: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39912: LD_INT 61
39914: PPUSH
39915: LD_VAR 0 6
39919: PPUSH
39920: CALL_OW 321
39924: PUSH
39925: LD_INT 2
39927: EQUAL
39928: IFFALSE 39938
// viewRange := 16 ;
39930: LD_ADDR_VAR 0 7
39934: PUSH
39935: LD_INT 16
39937: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39938: LD_VAR 0 1
39942: PPUSH
39943: LD_VAR 0 2
39947: PPUSH
39948: LD_VAR 0 3
39952: PPUSH
39953: CALL_OW 297
39957: PUSH
39958: LD_VAR 0 5
39962: GREATER
39963: IFFALSE 40042
// begin ComMoveXY ( unit , x , y ) ;
39965: LD_VAR 0 1
39969: PPUSH
39970: LD_VAR 0 2
39974: PPUSH
39975: LD_VAR 0 3
39979: PPUSH
39980: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39984: LD_INT 35
39986: PPUSH
39987: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39991: LD_VAR 0 1
39995: PPUSH
39996: LD_VAR 0 2
40000: PPUSH
40001: LD_VAR 0 3
40005: PPUSH
40006: CALL 76405 0 3
40010: NOT
40011: IFFALSE 40015
// exit ;
40013: GO 40269
// until GetDistUnitXY ( unit , x , y ) < dist ;
40015: LD_VAR 0 1
40019: PPUSH
40020: LD_VAR 0 2
40024: PPUSH
40025: LD_VAR 0 3
40029: PPUSH
40030: CALL_OW 297
40034: PUSH
40035: LD_VAR 0 5
40039: LESS
40040: IFFALSE 39984
// end ; ComTurnXY ( unit , x , y ) ;
40042: LD_VAR 0 1
40046: PPUSH
40047: LD_VAR 0 2
40051: PPUSH
40052: LD_VAR 0 3
40056: PPUSH
40057: CALL_OW 118
// wait ( 5 ) ;
40061: LD_INT 5
40063: PPUSH
40064: CALL_OW 67
// _d := GetDir ( unit ) ;
40068: LD_ADDR_VAR 0 10
40072: PUSH
40073: LD_VAR 0 1
40077: PPUSH
40078: CALL_OW 254
40082: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40083: LD_ADDR_VAR 0 8
40087: PUSH
40088: LD_VAR 0 1
40092: PPUSH
40093: CALL_OW 250
40097: PPUSH
40098: LD_VAR 0 10
40102: PPUSH
40103: LD_VAR 0 5
40107: PPUSH
40108: CALL_OW 272
40112: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40113: LD_ADDR_VAR 0 9
40117: PUSH
40118: LD_VAR 0 1
40122: PPUSH
40123: CALL_OW 251
40127: PPUSH
40128: LD_VAR 0 10
40132: PPUSH
40133: LD_VAR 0 5
40137: PPUSH
40138: CALL_OW 273
40142: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40143: LD_VAR 0 8
40147: PPUSH
40148: LD_VAR 0 9
40152: PPUSH
40153: CALL_OW 488
40157: NOT
40158: IFFALSE 40162
// exit ;
40160: GO 40269
// ComAnimCustom ( unit , 1 ) ;
40162: LD_VAR 0 1
40166: PPUSH
40167: LD_INT 1
40169: PPUSH
40170: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40174: LD_VAR 0 8
40178: PPUSH
40179: LD_VAR 0 9
40183: PPUSH
40184: LD_VAR 0 6
40188: PPUSH
40189: LD_VAR 0 7
40193: PPUSH
40194: CALL_OW 330
// repeat wait ( 1 ) ;
40198: LD_INT 1
40200: PPUSH
40201: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40205: LD_VAR 0 1
40209: PPUSH
40210: CALL_OW 316
40214: PUSH
40215: LD_VAR 0 1
40219: PPUSH
40220: CALL_OW 314
40224: OR
40225: PUSH
40226: LD_VAR 0 1
40230: PPUSH
40231: CALL_OW 302
40235: NOT
40236: OR
40237: PUSH
40238: LD_VAR 0 1
40242: PPUSH
40243: CALL_OW 301
40247: OR
40248: IFFALSE 40198
// RemoveSeeing ( _x , _y , side ) ;
40250: LD_VAR 0 8
40254: PPUSH
40255: LD_VAR 0 9
40259: PPUSH
40260: LD_VAR 0 6
40264: PPUSH
40265: CALL_OW 331
// end ; end_of_file
40269: LD_VAR 0 4
40273: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40274: LD_INT 0
40276: PPUSH
40277: PPUSH
// if exist_mode then
40278: LD_VAR 0 2
40282: IFFALSE 40307
// unit := CreateCharacter ( prefix & ident ) else
40284: LD_ADDR_VAR 0 5
40288: PUSH
40289: LD_VAR 0 3
40293: PUSH
40294: LD_VAR 0 1
40298: STR
40299: PPUSH
40300: CALL_OW 34
40304: ST_TO_ADDR
40305: GO 40322
// unit := NewCharacter ( ident ) ;
40307: LD_ADDR_VAR 0 5
40311: PUSH
40312: LD_VAR 0 1
40316: PPUSH
40317: CALL_OW 25
40321: ST_TO_ADDR
// result := unit ;
40322: LD_ADDR_VAR 0 4
40326: PUSH
40327: LD_VAR 0 5
40331: ST_TO_ADDR
// end ;
40332: LD_VAR 0 4
40336: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40337: LD_INT 0
40339: PPUSH
40340: PPUSH
// if not side or not nation then
40341: LD_VAR 0 1
40345: NOT
40346: PUSH
40347: LD_VAR 0 2
40351: NOT
40352: OR
40353: IFFALSE 40357
// exit ;
40355: GO 41125
// case nation of nation_american :
40357: LD_VAR 0 2
40361: PUSH
40362: LD_INT 1
40364: DOUBLE
40365: EQUAL
40366: IFTRUE 40370
40368: GO 40584
40370: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40371: LD_ADDR_VAR 0 4
40375: PUSH
40376: LD_INT 35
40378: PUSH
40379: LD_INT 45
40381: PUSH
40382: LD_INT 46
40384: PUSH
40385: LD_INT 47
40387: PUSH
40388: LD_INT 82
40390: PUSH
40391: LD_INT 83
40393: PUSH
40394: LD_INT 84
40396: PUSH
40397: LD_INT 85
40399: PUSH
40400: LD_INT 86
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: LD_INT 6
40411: PUSH
40412: LD_INT 15
40414: PUSH
40415: LD_INT 16
40417: PUSH
40418: LD_INT 7
40420: PUSH
40421: LD_INT 12
40423: PUSH
40424: LD_INT 13
40426: PUSH
40427: LD_INT 10
40429: PUSH
40430: LD_INT 14
40432: PUSH
40433: LD_INT 20
40435: PUSH
40436: LD_INT 21
40438: PUSH
40439: LD_INT 22
40441: PUSH
40442: LD_INT 25
40444: PUSH
40445: LD_INT 32
40447: PUSH
40448: LD_INT 27
40450: PUSH
40451: LD_INT 36
40453: PUSH
40454: LD_INT 69
40456: PUSH
40457: LD_INT 39
40459: PUSH
40460: LD_INT 34
40462: PUSH
40463: LD_INT 40
40465: PUSH
40466: LD_INT 48
40468: PUSH
40469: LD_INT 49
40471: PUSH
40472: LD_INT 50
40474: PUSH
40475: LD_INT 51
40477: PUSH
40478: LD_INT 52
40480: PUSH
40481: LD_INT 53
40483: PUSH
40484: LD_INT 54
40486: PUSH
40487: LD_INT 55
40489: PUSH
40490: LD_INT 56
40492: PUSH
40493: LD_INT 57
40495: PUSH
40496: LD_INT 58
40498: PUSH
40499: LD_INT 59
40501: PUSH
40502: LD_INT 60
40504: PUSH
40505: LD_INT 61
40507: PUSH
40508: LD_INT 62
40510: PUSH
40511: LD_INT 80
40513: PUSH
40514: LD_INT 82
40516: PUSH
40517: LD_INT 83
40519: PUSH
40520: LD_INT 84
40522: PUSH
40523: LD_INT 85
40525: PUSH
40526: LD_INT 86
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: ST_TO_ADDR
40582: GO 41049
40584: LD_INT 2
40586: DOUBLE
40587: EQUAL
40588: IFTRUE 40592
40590: GO 40818
40592: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40593: LD_ADDR_VAR 0 4
40597: PUSH
40598: LD_INT 35
40600: PUSH
40601: LD_INT 45
40603: PUSH
40604: LD_INT 46
40606: PUSH
40607: LD_INT 47
40609: PUSH
40610: LD_INT 82
40612: PUSH
40613: LD_INT 83
40615: PUSH
40616: LD_INT 84
40618: PUSH
40619: LD_INT 85
40621: PUSH
40622: LD_INT 87
40624: PUSH
40625: LD_INT 70
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 11
40633: PUSH
40634: LD_INT 3
40636: PUSH
40637: LD_INT 4
40639: PUSH
40640: LD_INT 5
40642: PUSH
40643: LD_INT 6
40645: PUSH
40646: LD_INT 15
40648: PUSH
40649: LD_INT 18
40651: PUSH
40652: LD_INT 7
40654: PUSH
40655: LD_INT 17
40657: PUSH
40658: LD_INT 8
40660: PUSH
40661: LD_INT 20
40663: PUSH
40664: LD_INT 21
40666: PUSH
40667: LD_INT 22
40669: PUSH
40670: LD_INT 72
40672: PUSH
40673: LD_INT 26
40675: PUSH
40676: LD_INT 69
40678: PUSH
40679: LD_INT 39
40681: PUSH
40682: LD_INT 40
40684: PUSH
40685: LD_INT 41
40687: PUSH
40688: LD_INT 42
40690: PUSH
40691: LD_INT 43
40693: PUSH
40694: LD_INT 48
40696: PUSH
40697: LD_INT 49
40699: PUSH
40700: LD_INT 50
40702: PUSH
40703: LD_INT 51
40705: PUSH
40706: LD_INT 52
40708: PUSH
40709: LD_INT 53
40711: PUSH
40712: LD_INT 54
40714: PUSH
40715: LD_INT 55
40717: PUSH
40718: LD_INT 56
40720: PUSH
40721: LD_INT 60
40723: PUSH
40724: LD_INT 61
40726: PUSH
40727: LD_INT 62
40729: PUSH
40730: LD_INT 66
40732: PUSH
40733: LD_INT 67
40735: PUSH
40736: LD_INT 68
40738: PUSH
40739: LD_INT 81
40741: PUSH
40742: LD_INT 82
40744: PUSH
40745: LD_INT 83
40747: PUSH
40748: LD_INT 84
40750: PUSH
40751: LD_INT 85
40753: PUSH
40754: LD_INT 87
40756: PUSH
40757: LD_INT 88
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: ST_TO_ADDR
40816: GO 41049
40818: LD_INT 3
40820: DOUBLE
40821: EQUAL
40822: IFTRUE 40826
40824: GO 41048
40826: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40827: LD_ADDR_VAR 0 4
40831: PUSH
40832: LD_INT 46
40834: PUSH
40835: LD_INT 47
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: LD_INT 2
40843: PUSH
40844: LD_INT 82
40846: PUSH
40847: LD_INT 83
40849: PUSH
40850: LD_INT 84
40852: PUSH
40853: LD_INT 85
40855: PUSH
40856: LD_INT 86
40858: PUSH
40859: LD_INT 11
40861: PUSH
40862: LD_INT 9
40864: PUSH
40865: LD_INT 20
40867: PUSH
40868: LD_INT 19
40870: PUSH
40871: LD_INT 21
40873: PUSH
40874: LD_INT 24
40876: PUSH
40877: LD_INT 22
40879: PUSH
40880: LD_INT 25
40882: PUSH
40883: LD_INT 28
40885: PUSH
40886: LD_INT 29
40888: PUSH
40889: LD_INT 30
40891: PUSH
40892: LD_INT 31
40894: PUSH
40895: LD_INT 37
40897: PUSH
40898: LD_INT 38
40900: PUSH
40901: LD_INT 32
40903: PUSH
40904: LD_INT 27
40906: PUSH
40907: LD_INT 33
40909: PUSH
40910: LD_INT 69
40912: PUSH
40913: LD_INT 39
40915: PUSH
40916: LD_INT 34
40918: PUSH
40919: LD_INT 40
40921: PUSH
40922: LD_INT 71
40924: PUSH
40925: LD_INT 23
40927: PUSH
40928: LD_INT 44
40930: PUSH
40931: LD_INT 48
40933: PUSH
40934: LD_INT 49
40936: PUSH
40937: LD_INT 50
40939: PUSH
40940: LD_INT 51
40942: PUSH
40943: LD_INT 52
40945: PUSH
40946: LD_INT 53
40948: PUSH
40949: LD_INT 54
40951: PUSH
40952: LD_INT 55
40954: PUSH
40955: LD_INT 56
40957: PUSH
40958: LD_INT 57
40960: PUSH
40961: LD_INT 58
40963: PUSH
40964: LD_INT 59
40966: PUSH
40967: LD_INT 63
40969: PUSH
40970: LD_INT 64
40972: PUSH
40973: LD_INT 65
40975: PUSH
40976: LD_INT 82
40978: PUSH
40979: LD_INT 83
40981: PUSH
40982: LD_INT 84
40984: PUSH
40985: LD_INT 85
40987: PUSH
40988: LD_INT 86
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: ST_TO_ADDR
41046: GO 41049
41048: POP
// if state > - 1 and state < 3 then
41049: LD_VAR 0 3
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: GREATER
41058: PUSH
41059: LD_VAR 0 3
41063: PUSH
41064: LD_INT 3
41066: LESS
41067: AND
41068: IFFALSE 41125
// for i in result do
41070: LD_ADDR_VAR 0 5
41074: PUSH
41075: LD_VAR 0 4
41079: PUSH
41080: FOR_IN
41081: IFFALSE 41123
// if GetTech ( i , side ) <> state then
41083: LD_VAR 0 5
41087: PPUSH
41088: LD_VAR 0 1
41092: PPUSH
41093: CALL_OW 321
41097: PUSH
41098: LD_VAR 0 3
41102: NONEQUAL
41103: IFFALSE 41121
// result := result diff i ;
41105: LD_ADDR_VAR 0 4
41109: PUSH
41110: LD_VAR 0 4
41114: PUSH
41115: LD_VAR 0 5
41119: DIFF
41120: ST_TO_ADDR
41121: GO 41080
41123: POP
41124: POP
// end ;
41125: LD_VAR 0 4
41129: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41130: LD_INT 0
41132: PPUSH
41133: PPUSH
41134: PPUSH
// result := true ;
41135: LD_ADDR_VAR 0 3
41139: PUSH
41140: LD_INT 1
41142: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41143: LD_ADDR_VAR 0 5
41147: PUSH
41148: LD_VAR 0 2
41152: PPUSH
41153: CALL_OW 480
41157: ST_TO_ADDR
// if not tmp then
41158: LD_VAR 0 5
41162: NOT
41163: IFFALSE 41167
// exit ;
41165: GO 41216
// for i in tmp do
41167: LD_ADDR_VAR 0 4
41171: PUSH
41172: LD_VAR 0 5
41176: PUSH
41177: FOR_IN
41178: IFFALSE 41214
// if GetTech ( i , side ) <> state_researched then
41180: LD_VAR 0 4
41184: PPUSH
41185: LD_VAR 0 1
41189: PPUSH
41190: CALL_OW 321
41194: PUSH
41195: LD_INT 2
41197: NONEQUAL
41198: IFFALSE 41212
// begin result := false ;
41200: LD_ADDR_VAR 0 3
41204: PUSH
41205: LD_INT 0
41207: ST_TO_ADDR
// exit ;
41208: POP
41209: POP
41210: GO 41216
// end ;
41212: GO 41177
41214: POP
41215: POP
// end ;
41216: LD_VAR 0 3
41220: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41221: LD_INT 0
41223: PPUSH
41224: PPUSH
41225: PPUSH
41226: PPUSH
41227: PPUSH
41228: PPUSH
41229: PPUSH
41230: PPUSH
41231: PPUSH
41232: PPUSH
41233: PPUSH
41234: PPUSH
41235: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41236: LD_VAR 0 1
41240: NOT
41241: PUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: CALL_OW 257
41251: PUSH
41252: LD_INT 9
41254: NONEQUAL
41255: OR
41256: IFFALSE 41260
// exit ;
41258: GO 41833
// side := GetSide ( unit ) ;
41260: LD_ADDR_VAR 0 9
41264: PUSH
41265: LD_VAR 0 1
41269: PPUSH
41270: CALL_OW 255
41274: ST_TO_ADDR
// tech_space := tech_spacanom ;
41275: LD_ADDR_VAR 0 12
41279: PUSH
41280: LD_INT 29
41282: ST_TO_ADDR
// tech_time := tech_taurad ;
41283: LD_ADDR_VAR 0 13
41287: PUSH
41288: LD_INT 28
41290: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41291: LD_ADDR_VAR 0 11
41295: PUSH
41296: LD_VAR 0 1
41300: PPUSH
41301: CALL_OW 310
41305: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41306: LD_VAR 0 11
41310: PPUSH
41311: CALL_OW 247
41315: PUSH
41316: LD_INT 2
41318: EQUAL
41319: IFFALSE 41323
// exit ;
41321: GO 41833
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41323: LD_ADDR_VAR 0 8
41327: PUSH
41328: LD_INT 81
41330: PUSH
41331: LD_VAR 0 9
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 3
41342: PUSH
41343: LD_INT 21
41345: PUSH
41346: LD_INT 3
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PPUSH
41361: CALL_OW 69
41365: ST_TO_ADDR
// if not tmp then
41366: LD_VAR 0 8
41370: NOT
41371: IFFALSE 41375
// exit ;
41373: GO 41833
// if in_unit then
41375: LD_VAR 0 11
41379: IFFALSE 41403
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41381: LD_ADDR_VAR 0 10
41385: PUSH
41386: LD_VAR 0 8
41390: PPUSH
41391: LD_VAR 0 11
41395: PPUSH
41396: CALL_OW 74
41400: ST_TO_ADDR
41401: GO 41423
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41403: LD_ADDR_VAR 0 10
41407: PUSH
41408: LD_VAR 0 8
41412: PPUSH
41413: LD_VAR 0 1
41417: PPUSH
41418: CALL_OW 74
41422: ST_TO_ADDR
// if not enemy then
41423: LD_VAR 0 10
41427: NOT
41428: IFFALSE 41432
// exit ;
41430: GO 41833
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41432: LD_VAR 0 11
41436: PUSH
41437: LD_VAR 0 11
41441: PPUSH
41442: LD_VAR 0 10
41446: PPUSH
41447: CALL_OW 296
41451: PUSH
41452: LD_INT 13
41454: GREATER
41455: AND
41456: PUSH
41457: LD_VAR 0 1
41461: PPUSH
41462: LD_VAR 0 10
41466: PPUSH
41467: CALL_OW 296
41471: PUSH
41472: LD_INT 12
41474: GREATER
41475: OR
41476: IFFALSE 41480
// exit ;
41478: GO 41833
// missile := [ 1 ] ;
41480: LD_ADDR_VAR 0 14
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: EMPTY
41489: LIST
41490: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41491: LD_VAR 0 9
41495: PPUSH
41496: LD_VAR 0 12
41500: PPUSH
41501: CALL_OW 325
41505: IFFALSE 41534
// missile := Replace ( missile , missile + 1 , 2 ) ;
41507: LD_ADDR_VAR 0 14
41511: PUSH
41512: LD_VAR 0 14
41516: PPUSH
41517: LD_VAR 0 14
41521: PUSH
41522: LD_INT 1
41524: PLUS
41525: PPUSH
41526: LD_INT 2
41528: PPUSH
41529: CALL_OW 1
41533: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41534: LD_VAR 0 9
41538: PPUSH
41539: LD_VAR 0 13
41543: PPUSH
41544: CALL_OW 325
41548: PUSH
41549: LD_VAR 0 10
41553: PPUSH
41554: CALL_OW 255
41558: PPUSH
41559: LD_VAR 0 13
41563: PPUSH
41564: CALL_OW 325
41568: NOT
41569: AND
41570: IFFALSE 41599
// missile := Replace ( missile , missile + 1 , 3 ) ;
41572: LD_ADDR_VAR 0 14
41576: PUSH
41577: LD_VAR 0 14
41581: PPUSH
41582: LD_VAR 0 14
41586: PUSH
41587: LD_INT 1
41589: PLUS
41590: PPUSH
41591: LD_INT 3
41593: PPUSH
41594: CALL_OW 1
41598: ST_TO_ADDR
// if missile < 2 then
41599: LD_VAR 0 14
41603: PUSH
41604: LD_INT 2
41606: LESS
41607: IFFALSE 41611
// exit ;
41609: GO 41833
// x := GetX ( enemy ) ;
41611: LD_ADDR_VAR 0 4
41615: PUSH
41616: LD_VAR 0 10
41620: PPUSH
41621: CALL_OW 250
41625: ST_TO_ADDR
// y := GetY ( enemy ) ;
41626: LD_ADDR_VAR 0 5
41630: PUSH
41631: LD_VAR 0 10
41635: PPUSH
41636: CALL_OW 251
41640: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41641: LD_ADDR_VAR 0 6
41645: PUSH
41646: LD_VAR 0 4
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PPUSH
41655: LD_INT 1
41657: PPUSH
41658: CALL_OW 12
41662: PLUS
41663: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41664: LD_ADDR_VAR 0 7
41668: PUSH
41669: LD_VAR 0 5
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PPUSH
41678: LD_INT 1
41680: PPUSH
41681: CALL_OW 12
41685: PLUS
41686: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41687: LD_VAR 0 6
41691: PPUSH
41692: LD_VAR 0 7
41696: PPUSH
41697: CALL_OW 488
41701: NOT
41702: IFFALSE 41724
// begin _x := x ;
41704: LD_ADDR_VAR 0 6
41708: PUSH
41709: LD_VAR 0 4
41713: ST_TO_ADDR
// _y := y ;
41714: LD_ADDR_VAR 0 7
41718: PUSH
41719: LD_VAR 0 5
41723: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41724: LD_ADDR_VAR 0 3
41728: PUSH
41729: LD_INT 1
41731: PPUSH
41732: LD_VAR 0 14
41736: PPUSH
41737: CALL_OW 12
41741: ST_TO_ADDR
// case i of 1 :
41742: LD_VAR 0 3
41746: PUSH
41747: LD_INT 1
41749: DOUBLE
41750: EQUAL
41751: IFTRUE 41755
41753: GO 41772
41755: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41756: LD_VAR 0 1
41760: PPUSH
41761: LD_VAR 0 10
41765: PPUSH
41766: CALL_OW 115
41770: GO 41833
41772: LD_INT 2
41774: DOUBLE
41775: EQUAL
41776: IFTRUE 41780
41778: GO 41802
41780: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41781: LD_VAR 0 1
41785: PPUSH
41786: LD_VAR 0 6
41790: PPUSH
41791: LD_VAR 0 7
41795: PPUSH
41796: CALL_OW 153
41800: GO 41833
41802: LD_INT 3
41804: DOUBLE
41805: EQUAL
41806: IFTRUE 41810
41808: GO 41832
41810: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41811: LD_VAR 0 1
41815: PPUSH
41816: LD_VAR 0 6
41820: PPUSH
41821: LD_VAR 0 7
41825: PPUSH
41826: CALL_OW 154
41830: GO 41833
41832: POP
// end ;
41833: LD_VAR 0 2
41837: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41838: LD_INT 0
41840: PPUSH
41841: PPUSH
41842: PPUSH
41843: PPUSH
41844: PPUSH
41845: PPUSH
// if not unit or not building then
41846: LD_VAR 0 1
41850: NOT
41851: PUSH
41852: LD_VAR 0 2
41856: NOT
41857: OR
41858: IFFALSE 41862
// exit ;
41860: GO 42020
// x := GetX ( building ) ;
41862: LD_ADDR_VAR 0 5
41866: PUSH
41867: LD_VAR 0 2
41871: PPUSH
41872: CALL_OW 250
41876: ST_TO_ADDR
// y := GetY ( building ) ;
41877: LD_ADDR_VAR 0 6
41881: PUSH
41882: LD_VAR 0 2
41886: PPUSH
41887: CALL_OW 251
41891: ST_TO_ADDR
// for i = 0 to 5 do
41892: LD_ADDR_VAR 0 4
41896: PUSH
41897: DOUBLE
41898: LD_INT 0
41900: DEC
41901: ST_TO_ADDR
41902: LD_INT 5
41904: PUSH
41905: FOR_TO
41906: IFFALSE 42018
// begin _x := ShiftX ( x , i , 3 ) ;
41908: LD_ADDR_VAR 0 7
41912: PUSH
41913: LD_VAR 0 5
41917: PPUSH
41918: LD_VAR 0 4
41922: PPUSH
41923: LD_INT 3
41925: PPUSH
41926: CALL_OW 272
41930: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41931: LD_ADDR_VAR 0 8
41935: PUSH
41936: LD_VAR 0 6
41940: PPUSH
41941: LD_VAR 0 4
41945: PPUSH
41946: LD_INT 3
41948: PPUSH
41949: CALL_OW 273
41953: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41954: LD_VAR 0 7
41958: PPUSH
41959: LD_VAR 0 8
41963: PPUSH
41964: CALL_OW 488
41968: NOT
41969: IFFALSE 41973
// continue ;
41971: GO 41905
// if HexInfo ( _x , _y ) = 0 then
41973: LD_VAR 0 7
41977: PPUSH
41978: LD_VAR 0 8
41982: PPUSH
41983: CALL_OW 428
41987: PUSH
41988: LD_INT 0
41990: EQUAL
41991: IFFALSE 42016
// begin ComMoveXY ( unit , _x , _y ) ;
41993: LD_VAR 0 1
41997: PPUSH
41998: LD_VAR 0 7
42002: PPUSH
42003: LD_VAR 0 8
42007: PPUSH
42008: CALL_OW 111
// exit ;
42012: POP
42013: POP
42014: GO 42020
// end ; end ;
42016: GO 41905
42018: POP
42019: POP
// end ;
42020: LD_VAR 0 3
42024: RET
// export function ScanBase ( side , base_area ) ; begin
42025: LD_INT 0
42027: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42028: LD_ADDR_VAR 0 3
42032: PUSH
42033: LD_VAR 0 2
42037: PPUSH
42038: LD_INT 81
42040: PUSH
42041: LD_VAR 0 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PPUSH
42050: CALL_OW 70
42054: ST_TO_ADDR
// end ;
42055: LD_VAR 0 3
42059: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42060: LD_INT 0
42062: PPUSH
42063: PPUSH
42064: PPUSH
42065: PPUSH
// result := false ;
42066: LD_ADDR_VAR 0 2
42070: PUSH
42071: LD_INT 0
42073: ST_TO_ADDR
// side := GetSide ( unit ) ;
42074: LD_ADDR_VAR 0 3
42078: PUSH
42079: LD_VAR 0 1
42083: PPUSH
42084: CALL_OW 255
42088: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42089: LD_ADDR_VAR 0 4
42093: PUSH
42094: LD_VAR 0 1
42098: PPUSH
42099: CALL_OW 248
42103: ST_TO_ADDR
// case nat of 1 :
42104: LD_VAR 0 4
42108: PUSH
42109: LD_INT 1
42111: DOUBLE
42112: EQUAL
42113: IFTRUE 42117
42115: GO 42128
42117: POP
// tech := tech_lassight ; 2 :
42118: LD_ADDR_VAR 0 5
42122: PUSH
42123: LD_INT 12
42125: ST_TO_ADDR
42126: GO 42167
42128: LD_INT 2
42130: DOUBLE
42131: EQUAL
42132: IFTRUE 42136
42134: GO 42147
42136: POP
// tech := tech_mortar ; 3 :
42137: LD_ADDR_VAR 0 5
42141: PUSH
42142: LD_INT 41
42144: ST_TO_ADDR
42145: GO 42167
42147: LD_INT 3
42149: DOUBLE
42150: EQUAL
42151: IFTRUE 42155
42153: GO 42166
42155: POP
// tech := tech_bazooka ; end ;
42156: LD_ADDR_VAR 0 5
42160: PUSH
42161: LD_INT 44
42163: ST_TO_ADDR
42164: GO 42167
42166: POP
// if Researched ( side , tech ) then
42167: LD_VAR 0 3
42171: PPUSH
42172: LD_VAR 0 5
42176: PPUSH
42177: CALL_OW 325
42181: IFFALSE 42208
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42183: LD_ADDR_VAR 0 2
42187: PUSH
42188: LD_INT 5
42190: PUSH
42191: LD_INT 8
42193: PUSH
42194: LD_INT 9
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: LIST
42201: PUSH
42202: LD_VAR 0 4
42206: ARRAY
42207: ST_TO_ADDR
// end ;
42208: LD_VAR 0 2
42212: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42213: LD_INT 0
42215: PPUSH
42216: PPUSH
42217: PPUSH
// if not mines then
42218: LD_VAR 0 2
42222: NOT
42223: IFFALSE 42227
// exit ;
42225: GO 42371
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42227: LD_ADDR_VAR 0 5
42231: PUSH
42232: LD_INT 81
42234: PUSH
42235: LD_VAR 0 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 3
42246: PUSH
42247: LD_INT 21
42249: PUSH
42250: LD_INT 3
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PPUSH
42265: CALL_OW 69
42269: ST_TO_ADDR
// for i in mines do
42270: LD_ADDR_VAR 0 4
42274: PUSH
42275: LD_VAR 0 2
42279: PUSH
42280: FOR_IN
42281: IFFALSE 42369
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42283: LD_VAR 0 4
42287: PUSH
42288: LD_INT 1
42290: ARRAY
42291: PPUSH
42292: LD_VAR 0 4
42296: PUSH
42297: LD_INT 2
42299: ARRAY
42300: PPUSH
42301: CALL_OW 458
42305: NOT
42306: IFFALSE 42310
// continue ;
42308: GO 42280
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42310: LD_VAR 0 4
42314: PUSH
42315: LD_INT 1
42317: ARRAY
42318: PPUSH
42319: LD_VAR 0 4
42323: PUSH
42324: LD_INT 2
42326: ARRAY
42327: PPUSH
42328: CALL_OW 428
42332: PUSH
42333: LD_VAR 0 5
42337: IN
42338: IFFALSE 42367
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42340: LD_VAR 0 4
42344: PUSH
42345: LD_INT 1
42347: ARRAY
42348: PPUSH
42349: LD_VAR 0 4
42353: PUSH
42354: LD_INT 2
42356: ARRAY
42357: PPUSH
42358: LD_VAR 0 1
42362: PPUSH
42363: CALL_OW 456
// end ;
42367: GO 42280
42369: POP
42370: POP
// end ;
42371: LD_VAR 0 3
42375: RET
// export function Count ( array ) ; begin
42376: LD_INT 0
42378: PPUSH
// result := array + 0 ;
42379: LD_ADDR_VAR 0 2
42383: PUSH
42384: LD_VAR 0 1
42388: PUSH
42389: LD_INT 0
42391: PLUS
42392: ST_TO_ADDR
// end ;
42393: LD_VAR 0 2
42397: RET
// export function IsEmpty ( building ) ; begin
42398: LD_INT 0
42400: PPUSH
// if not building then
42401: LD_VAR 0 1
42405: NOT
42406: IFFALSE 42410
// exit ;
42408: GO 42453
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42410: LD_ADDR_VAR 0 2
42414: PUSH
42415: LD_VAR 0 1
42419: PUSH
42420: LD_INT 22
42422: PUSH
42423: LD_VAR 0 1
42427: PPUSH
42428: CALL_OW 255
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 58
42439: PUSH
42440: EMPTY
42441: LIST
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PPUSH
42447: CALL_OW 69
42451: IN
42452: ST_TO_ADDR
// end ;
42453: LD_VAR 0 2
42457: RET
// export function IsNotFull ( building ) ; var places ; begin
42458: LD_INT 0
42460: PPUSH
42461: PPUSH
// if not building then
42462: LD_VAR 0 1
42466: NOT
42467: IFFALSE 42471
// exit ;
42469: GO 42499
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42471: LD_ADDR_VAR 0 2
42475: PUSH
42476: LD_VAR 0 1
42480: PPUSH
42481: LD_INT 3
42483: PUSH
42484: LD_INT 62
42486: PUSH
42487: EMPTY
42488: LIST
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PPUSH
42494: CALL_OW 72
42498: ST_TO_ADDR
// end ;
42499: LD_VAR 0 2
42503: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42504: LD_INT 0
42506: PPUSH
42507: PPUSH
42508: PPUSH
42509: PPUSH
// tmp := [ ] ;
42510: LD_ADDR_VAR 0 3
42514: PUSH
42515: EMPTY
42516: ST_TO_ADDR
// list := [ ] ;
42517: LD_ADDR_VAR 0 5
42521: PUSH
42522: EMPTY
42523: ST_TO_ADDR
// for i = 16 to 25 do
42524: LD_ADDR_VAR 0 4
42528: PUSH
42529: DOUBLE
42530: LD_INT 16
42532: DEC
42533: ST_TO_ADDR
42534: LD_INT 25
42536: PUSH
42537: FOR_TO
42538: IFFALSE 42611
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42540: LD_ADDR_VAR 0 3
42544: PUSH
42545: LD_VAR 0 3
42549: PUSH
42550: LD_INT 22
42552: PUSH
42553: LD_VAR 0 1
42557: PPUSH
42558: CALL_OW 255
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 91
42569: PUSH
42570: LD_VAR 0 1
42574: PUSH
42575: LD_INT 6
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 30
42585: PUSH
42586: LD_VAR 0 4
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: LIST
42599: PUSH
42600: EMPTY
42601: LIST
42602: PPUSH
42603: CALL_OW 69
42607: ADD
42608: ST_TO_ADDR
42609: GO 42537
42611: POP
42612: POP
// for i = 1 to tmp do
42613: LD_ADDR_VAR 0 4
42617: PUSH
42618: DOUBLE
42619: LD_INT 1
42621: DEC
42622: ST_TO_ADDR
42623: LD_VAR 0 3
42627: PUSH
42628: FOR_TO
42629: IFFALSE 42717
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42631: LD_ADDR_VAR 0 5
42635: PUSH
42636: LD_VAR 0 5
42640: PUSH
42641: LD_VAR 0 3
42645: PUSH
42646: LD_VAR 0 4
42650: ARRAY
42651: PPUSH
42652: CALL_OW 266
42656: PUSH
42657: LD_VAR 0 3
42661: PUSH
42662: LD_VAR 0 4
42666: ARRAY
42667: PPUSH
42668: CALL_OW 250
42672: PUSH
42673: LD_VAR 0 3
42677: PUSH
42678: LD_VAR 0 4
42682: ARRAY
42683: PPUSH
42684: CALL_OW 251
42688: PUSH
42689: LD_VAR 0 3
42693: PUSH
42694: LD_VAR 0 4
42698: ARRAY
42699: PPUSH
42700: CALL_OW 254
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: PUSH
42711: EMPTY
42712: LIST
42713: ADD
42714: ST_TO_ADDR
42715: GO 42628
42717: POP
42718: POP
// result := list ;
42719: LD_ADDR_VAR 0 2
42723: PUSH
42724: LD_VAR 0 5
42728: ST_TO_ADDR
// end ;
42729: LD_VAR 0 2
42733: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42734: LD_INT 0
42736: PPUSH
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
// if not factory then
42743: LD_VAR 0 1
42747: NOT
42748: IFFALSE 42752
// exit ;
42750: GO 43345
// if control = control_apeman then
42752: LD_VAR 0 4
42756: PUSH
42757: LD_INT 5
42759: EQUAL
42760: IFFALSE 42869
// begin tmp := UnitsInside ( factory ) ;
42762: LD_ADDR_VAR 0 8
42766: PUSH
42767: LD_VAR 0 1
42771: PPUSH
42772: CALL_OW 313
42776: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42777: LD_VAR 0 8
42781: PPUSH
42782: LD_INT 25
42784: PUSH
42785: LD_INT 12
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PPUSH
42792: CALL_OW 72
42796: NOT
42797: IFFALSE 42807
// control := control_manual ;
42799: LD_ADDR_VAR 0 4
42803: PUSH
42804: LD_INT 1
42806: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42807: LD_ADDR_VAR 0 8
42811: PUSH
42812: LD_VAR 0 1
42816: PPUSH
42817: CALL 42504 0 1
42821: ST_TO_ADDR
// if tmp then
42822: LD_VAR 0 8
42826: IFFALSE 42869
// begin for i in tmp do
42828: LD_ADDR_VAR 0 7
42832: PUSH
42833: LD_VAR 0 8
42837: PUSH
42838: FOR_IN
42839: IFFALSE 42867
// if i [ 1 ] = b_ext_radio then
42841: LD_VAR 0 7
42845: PUSH
42846: LD_INT 1
42848: ARRAY
42849: PUSH
42850: LD_INT 22
42852: EQUAL
42853: IFFALSE 42865
// begin control := control_remote ;
42855: LD_ADDR_VAR 0 4
42859: PUSH
42860: LD_INT 2
42862: ST_TO_ADDR
// break ;
42863: GO 42867
// end ;
42865: GO 42838
42867: POP
42868: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42869: LD_VAR 0 1
42873: PPUSH
42874: LD_VAR 0 2
42878: PPUSH
42879: LD_VAR 0 3
42883: PPUSH
42884: LD_VAR 0 4
42888: PPUSH
42889: LD_VAR 0 5
42893: PPUSH
42894: CALL_OW 448
42898: IFFALSE 42933
// begin result := [ chassis , engine , control , weapon ] ;
42900: LD_ADDR_VAR 0 6
42904: PUSH
42905: LD_VAR 0 2
42909: PUSH
42910: LD_VAR 0 3
42914: PUSH
42915: LD_VAR 0 4
42919: PUSH
42920: LD_VAR 0 5
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: ST_TO_ADDR
// exit ;
42931: GO 43345
// end ; _chassis := AvailableChassisList ( factory ) ;
42933: LD_ADDR_VAR 0 9
42937: PUSH
42938: LD_VAR 0 1
42942: PPUSH
42943: CALL_OW 475
42947: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42948: LD_ADDR_VAR 0 11
42952: PUSH
42953: LD_VAR 0 1
42957: PPUSH
42958: CALL_OW 476
42962: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42963: LD_ADDR_VAR 0 12
42967: PUSH
42968: LD_VAR 0 1
42972: PPUSH
42973: CALL_OW 477
42977: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42978: LD_ADDR_VAR 0 10
42982: PUSH
42983: LD_VAR 0 1
42987: PPUSH
42988: CALL_OW 478
42992: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42993: LD_VAR 0 9
42997: NOT
42998: PUSH
42999: LD_VAR 0 11
43003: NOT
43004: OR
43005: PUSH
43006: LD_VAR 0 12
43010: NOT
43011: OR
43012: PUSH
43013: LD_VAR 0 10
43017: NOT
43018: OR
43019: IFFALSE 43054
// begin result := [ chassis , engine , control , weapon ] ;
43021: LD_ADDR_VAR 0 6
43025: PUSH
43026: LD_VAR 0 2
43030: PUSH
43031: LD_VAR 0 3
43035: PUSH
43036: LD_VAR 0 4
43040: PUSH
43041: LD_VAR 0 5
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: ST_TO_ADDR
// exit ;
43052: GO 43345
// end ; if not chassis in _chassis then
43054: LD_VAR 0 2
43058: PUSH
43059: LD_VAR 0 9
43063: IN
43064: NOT
43065: IFFALSE 43091
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43067: LD_ADDR_VAR 0 2
43071: PUSH
43072: LD_VAR 0 9
43076: PUSH
43077: LD_INT 1
43079: PPUSH
43080: LD_VAR 0 9
43084: PPUSH
43085: CALL_OW 12
43089: ARRAY
43090: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43091: LD_VAR 0 2
43095: PPUSH
43096: LD_VAR 0 3
43100: PPUSH
43101: CALL 43350 0 2
43105: NOT
43106: IFFALSE 43165
// repeat engine := _engine [ 1 ] ;
43108: LD_ADDR_VAR 0 3
43112: PUSH
43113: LD_VAR 0 11
43117: PUSH
43118: LD_INT 1
43120: ARRAY
43121: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43122: LD_ADDR_VAR 0 11
43126: PUSH
43127: LD_VAR 0 11
43131: PPUSH
43132: LD_INT 1
43134: PPUSH
43135: CALL_OW 3
43139: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43140: LD_VAR 0 2
43144: PPUSH
43145: LD_VAR 0 3
43149: PPUSH
43150: CALL 43350 0 2
43154: PUSH
43155: LD_VAR 0 11
43159: PUSH
43160: EMPTY
43161: EQUAL
43162: OR
43163: IFFALSE 43108
// if not control in _control then
43165: LD_VAR 0 4
43169: PUSH
43170: LD_VAR 0 12
43174: IN
43175: NOT
43176: IFFALSE 43202
// control := _control [ rand ( 1 , _control ) ] ;
43178: LD_ADDR_VAR 0 4
43182: PUSH
43183: LD_VAR 0 12
43187: PUSH
43188: LD_INT 1
43190: PPUSH
43191: LD_VAR 0 12
43195: PPUSH
43196: CALL_OW 12
43200: ARRAY
43201: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43202: LD_VAR 0 2
43206: PPUSH
43207: LD_VAR 0 5
43211: PPUSH
43212: CALL 43570 0 2
43216: NOT
43217: IFFALSE 43276
// repeat weapon := _weapon [ 1 ] ;
43219: LD_ADDR_VAR 0 5
43223: PUSH
43224: LD_VAR 0 10
43228: PUSH
43229: LD_INT 1
43231: ARRAY
43232: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43233: LD_ADDR_VAR 0 10
43237: PUSH
43238: LD_VAR 0 10
43242: PPUSH
43243: LD_INT 1
43245: PPUSH
43246: CALL_OW 3
43250: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43251: LD_VAR 0 2
43255: PPUSH
43256: LD_VAR 0 5
43260: PPUSH
43261: CALL 43570 0 2
43265: PUSH
43266: LD_VAR 0 10
43270: PUSH
43271: EMPTY
43272: EQUAL
43273: OR
43274: IFFALSE 43219
// result := [ ] ;
43276: LD_ADDR_VAR 0 6
43280: PUSH
43281: EMPTY
43282: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43283: LD_VAR 0 1
43287: PPUSH
43288: LD_VAR 0 2
43292: PPUSH
43293: LD_VAR 0 3
43297: PPUSH
43298: LD_VAR 0 4
43302: PPUSH
43303: LD_VAR 0 5
43307: PPUSH
43308: CALL_OW 448
43312: IFFALSE 43345
// result := [ chassis , engine , control , weapon ] ;
43314: LD_ADDR_VAR 0 6
43318: PUSH
43319: LD_VAR 0 2
43323: PUSH
43324: LD_VAR 0 3
43328: PUSH
43329: LD_VAR 0 4
43333: PUSH
43334: LD_VAR 0 5
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: ST_TO_ADDR
// end ;
43345: LD_VAR 0 6
43349: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43350: LD_INT 0
43352: PPUSH
// if not chassis or not engine then
43353: LD_VAR 0 1
43357: NOT
43358: PUSH
43359: LD_VAR 0 2
43363: NOT
43364: OR
43365: IFFALSE 43369
// exit ;
43367: GO 43565
// case engine of engine_solar :
43369: LD_VAR 0 2
43373: PUSH
43374: LD_INT 2
43376: DOUBLE
43377: EQUAL
43378: IFTRUE 43382
43380: GO 43420
43382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43383: LD_ADDR_VAR 0 3
43387: PUSH
43388: LD_INT 11
43390: PUSH
43391: LD_INT 12
43393: PUSH
43394: LD_INT 13
43396: PUSH
43397: LD_INT 14
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: LD_INT 2
43405: PUSH
43406: LD_INT 3
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: ST_TO_ADDR
43418: GO 43549
43420: LD_INT 1
43422: DOUBLE
43423: EQUAL
43424: IFTRUE 43428
43426: GO 43490
43428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43429: LD_ADDR_VAR 0 3
43433: PUSH
43434: LD_INT 11
43436: PUSH
43437: LD_INT 12
43439: PUSH
43440: LD_INT 13
43442: PUSH
43443: LD_INT 14
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: LD_INT 3
43454: PUSH
43455: LD_INT 4
43457: PUSH
43458: LD_INT 5
43460: PUSH
43461: LD_INT 21
43463: PUSH
43464: LD_INT 23
43466: PUSH
43467: LD_INT 22
43469: PUSH
43470: LD_INT 24
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: ST_TO_ADDR
43488: GO 43549
43490: LD_INT 3
43492: DOUBLE
43493: EQUAL
43494: IFTRUE 43498
43496: GO 43548
43498: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43499: LD_ADDR_VAR 0 3
43503: PUSH
43504: LD_INT 13
43506: PUSH
43507: LD_INT 14
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: LD_INT 3
43515: PUSH
43516: LD_INT 4
43518: PUSH
43519: LD_INT 5
43521: PUSH
43522: LD_INT 21
43524: PUSH
43525: LD_INT 22
43527: PUSH
43528: LD_INT 23
43530: PUSH
43531: LD_INT 24
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: ST_TO_ADDR
43546: GO 43549
43548: POP
// result := ( chassis in result ) ;
43549: LD_ADDR_VAR 0 3
43553: PUSH
43554: LD_VAR 0 1
43558: PUSH
43559: LD_VAR 0 3
43563: IN
43564: ST_TO_ADDR
// end ;
43565: LD_VAR 0 3
43569: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43570: LD_INT 0
43572: PPUSH
// if not chassis or not weapon then
43573: LD_VAR 0 1
43577: NOT
43578: PUSH
43579: LD_VAR 0 2
43583: NOT
43584: OR
43585: IFFALSE 43589
// exit ;
43587: GO 44649
// case weapon of us_machine_gun :
43589: LD_VAR 0 2
43593: PUSH
43594: LD_INT 2
43596: DOUBLE
43597: EQUAL
43598: IFTRUE 43602
43600: GO 43632
43602: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43603: LD_ADDR_VAR 0 3
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: LD_INT 3
43616: PUSH
43617: LD_INT 4
43619: PUSH
43620: LD_INT 5
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: ST_TO_ADDR
43630: GO 44633
43632: LD_INT 3
43634: DOUBLE
43635: EQUAL
43636: IFTRUE 43640
43638: GO 43670
43640: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43641: LD_ADDR_VAR 0 3
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 2
43651: PUSH
43652: LD_INT 3
43654: PUSH
43655: LD_INT 4
43657: PUSH
43658: LD_INT 5
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: ST_TO_ADDR
43668: GO 44633
43670: LD_INT 11
43672: DOUBLE
43673: EQUAL
43674: IFTRUE 43678
43676: GO 43708
43678: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43679: LD_ADDR_VAR 0 3
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: LD_INT 3
43692: PUSH
43693: LD_INT 4
43695: PUSH
43696: LD_INT 5
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: ST_TO_ADDR
43706: GO 44633
43708: LD_INT 4
43710: DOUBLE
43711: EQUAL
43712: IFTRUE 43716
43714: GO 43742
43716: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43717: LD_ADDR_VAR 0 3
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: LD_INT 3
43727: PUSH
43728: LD_INT 4
43730: PUSH
43731: LD_INT 5
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: ST_TO_ADDR
43740: GO 44633
43742: LD_INT 5
43744: DOUBLE
43745: EQUAL
43746: IFTRUE 43750
43748: GO 43776
43750: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43751: LD_ADDR_VAR 0 3
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: LD_INT 3
43761: PUSH
43762: LD_INT 4
43764: PUSH
43765: LD_INT 5
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: ST_TO_ADDR
43774: GO 44633
43776: LD_INT 9
43778: DOUBLE
43779: EQUAL
43780: IFTRUE 43784
43782: GO 43810
43784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43785: LD_ADDR_VAR 0 3
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: LD_INT 3
43795: PUSH
43796: LD_INT 4
43798: PUSH
43799: LD_INT 5
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: ST_TO_ADDR
43808: GO 44633
43810: LD_INT 7
43812: DOUBLE
43813: EQUAL
43814: IFTRUE 43818
43816: GO 43844
43818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43819: LD_ADDR_VAR 0 3
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: LD_INT 3
43829: PUSH
43830: LD_INT 4
43832: PUSH
43833: LD_INT 5
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: ST_TO_ADDR
43842: GO 44633
43844: LD_INT 12
43846: DOUBLE
43847: EQUAL
43848: IFTRUE 43852
43850: GO 43878
43852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43853: LD_ADDR_VAR 0 3
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: LD_INT 3
43863: PUSH
43864: LD_INT 4
43866: PUSH
43867: LD_INT 5
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: ST_TO_ADDR
43876: GO 44633
43878: LD_INT 13
43880: DOUBLE
43881: EQUAL
43882: IFTRUE 43886
43884: GO 43912
43886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43887: LD_ADDR_VAR 0 3
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: LD_INT 4
43900: PUSH
43901: LD_INT 5
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: ST_TO_ADDR
43910: GO 44633
43912: LD_INT 14
43914: DOUBLE
43915: EQUAL
43916: IFTRUE 43920
43918: GO 43938
43920: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43921: LD_ADDR_VAR 0 3
43925: PUSH
43926: LD_INT 4
43928: PUSH
43929: LD_INT 5
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: ST_TO_ADDR
43936: GO 44633
43938: LD_INT 6
43940: DOUBLE
43941: EQUAL
43942: IFTRUE 43946
43944: GO 43964
43946: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43947: LD_ADDR_VAR 0 3
43951: PUSH
43952: LD_INT 4
43954: PUSH
43955: LD_INT 5
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: ST_TO_ADDR
43962: GO 44633
43964: LD_INT 10
43966: DOUBLE
43967: EQUAL
43968: IFTRUE 43972
43970: GO 43990
43972: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43973: LD_ADDR_VAR 0 3
43977: PUSH
43978: LD_INT 4
43980: PUSH
43981: LD_INT 5
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: ST_TO_ADDR
43988: GO 44633
43990: LD_INT 22
43992: DOUBLE
43993: EQUAL
43994: IFTRUE 43998
43996: GO 44024
43998: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43999: LD_ADDR_VAR 0 3
44003: PUSH
44004: LD_INT 11
44006: PUSH
44007: LD_INT 12
44009: PUSH
44010: LD_INT 13
44012: PUSH
44013: LD_INT 14
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: ST_TO_ADDR
44022: GO 44633
44024: LD_INT 23
44026: DOUBLE
44027: EQUAL
44028: IFTRUE 44032
44030: GO 44058
44032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44033: LD_ADDR_VAR 0 3
44037: PUSH
44038: LD_INT 11
44040: PUSH
44041: LD_INT 12
44043: PUSH
44044: LD_INT 13
44046: PUSH
44047: LD_INT 14
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: ST_TO_ADDR
44056: GO 44633
44058: LD_INT 24
44060: DOUBLE
44061: EQUAL
44062: IFTRUE 44066
44064: GO 44092
44066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44067: LD_ADDR_VAR 0 3
44071: PUSH
44072: LD_INT 11
44074: PUSH
44075: LD_INT 12
44077: PUSH
44078: LD_INT 13
44080: PUSH
44081: LD_INT 14
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: ST_TO_ADDR
44090: GO 44633
44092: LD_INT 30
44094: DOUBLE
44095: EQUAL
44096: IFTRUE 44100
44098: GO 44126
44100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44101: LD_ADDR_VAR 0 3
44105: PUSH
44106: LD_INT 11
44108: PUSH
44109: LD_INT 12
44111: PUSH
44112: LD_INT 13
44114: PUSH
44115: LD_INT 14
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: ST_TO_ADDR
44124: GO 44633
44126: LD_INT 25
44128: DOUBLE
44129: EQUAL
44130: IFTRUE 44134
44132: GO 44152
44134: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44135: LD_ADDR_VAR 0 3
44139: PUSH
44140: LD_INT 13
44142: PUSH
44143: LD_INT 14
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: ST_TO_ADDR
44150: GO 44633
44152: LD_INT 27
44154: DOUBLE
44155: EQUAL
44156: IFTRUE 44160
44158: GO 44178
44160: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44161: LD_ADDR_VAR 0 3
44165: PUSH
44166: LD_INT 13
44168: PUSH
44169: LD_INT 14
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: ST_TO_ADDR
44176: GO 44633
44178: LD_INT 92
44180: DOUBLE
44181: EQUAL
44182: IFTRUE 44186
44184: GO 44212
44186: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44187: LD_ADDR_VAR 0 3
44191: PUSH
44192: LD_INT 11
44194: PUSH
44195: LD_INT 12
44197: PUSH
44198: LD_INT 13
44200: PUSH
44201: LD_INT 14
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: ST_TO_ADDR
44210: GO 44633
44212: LD_INT 28
44214: DOUBLE
44215: EQUAL
44216: IFTRUE 44220
44218: GO 44238
44220: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44221: LD_ADDR_VAR 0 3
44225: PUSH
44226: LD_INT 13
44228: PUSH
44229: LD_INT 14
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: ST_TO_ADDR
44236: GO 44633
44238: LD_INT 29
44240: DOUBLE
44241: EQUAL
44242: IFTRUE 44246
44244: GO 44264
44246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44247: LD_ADDR_VAR 0 3
44251: PUSH
44252: LD_INT 13
44254: PUSH
44255: LD_INT 14
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: ST_TO_ADDR
44262: GO 44633
44264: LD_INT 31
44266: DOUBLE
44267: EQUAL
44268: IFTRUE 44272
44270: GO 44290
44272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44273: LD_ADDR_VAR 0 3
44277: PUSH
44278: LD_INT 13
44280: PUSH
44281: LD_INT 14
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: ST_TO_ADDR
44288: GO 44633
44290: LD_INT 26
44292: DOUBLE
44293: EQUAL
44294: IFTRUE 44298
44296: GO 44316
44298: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44299: LD_ADDR_VAR 0 3
44303: PUSH
44304: LD_INT 13
44306: PUSH
44307: LD_INT 14
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: ST_TO_ADDR
44314: GO 44633
44316: LD_INT 42
44318: DOUBLE
44319: EQUAL
44320: IFTRUE 44324
44322: GO 44350
44324: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44325: LD_ADDR_VAR 0 3
44329: PUSH
44330: LD_INT 21
44332: PUSH
44333: LD_INT 22
44335: PUSH
44336: LD_INT 23
44338: PUSH
44339: LD_INT 24
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: ST_TO_ADDR
44348: GO 44633
44350: LD_INT 43
44352: DOUBLE
44353: EQUAL
44354: IFTRUE 44358
44356: GO 44384
44358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44359: LD_ADDR_VAR 0 3
44363: PUSH
44364: LD_INT 21
44366: PUSH
44367: LD_INT 22
44369: PUSH
44370: LD_INT 23
44372: PUSH
44373: LD_INT 24
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: ST_TO_ADDR
44382: GO 44633
44384: LD_INT 44
44386: DOUBLE
44387: EQUAL
44388: IFTRUE 44392
44390: GO 44418
44392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44393: LD_ADDR_VAR 0 3
44397: PUSH
44398: LD_INT 21
44400: PUSH
44401: LD_INT 22
44403: PUSH
44404: LD_INT 23
44406: PUSH
44407: LD_INT 24
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: ST_TO_ADDR
44416: GO 44633
44418: LD_INT 45
44420: DOUBLE
44421: EQUAL
44422: IFTRUE 44426
44424: GO 44452
44426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44427: LD_ADDR_VAR 0 3
44431: PUSH
44432: LD_INT 21
44434: PUSH
44435: LD_INT 22
44437: PUSH
44438: LD_INT 23
44440: PUSH
44441: LD_INT 24
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: ST_TO_ADDR
44450: GO 44633
44452: LD_INT 49
44454: DOUBLE
44455: EQUAL
44456: IFTRUE 44460
44458: GO 44486
44460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44461: LD_ADDR_VAR 0 3
44465: PUSH
44466: LD_INT 21
44468: PUSH
44469: LD_INT 22
44471: PUSH
44472: LD_INT 23
44474: PUSH
44475: LD_INT 24
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: ST_TO_ADDR
44484: GO 44633
44486: LD_INT 51
44488: DOUBLE
44489: EQUAL
44490: IFTRUE 44494
44492: GO 44520
44494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44495: LD_ADDR_VAR 0 3
44499: PUSH
44500: LD_INT 21
44502: PUSH
44503: LD_INT 22
44505: PUSH
44506: LD_INT 23
44508: PUSH
44509: LD_INT 24
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: ST_TO_ADDR
44518: GO 44633
44520: LD_INT 52
44522: DOUBLE
44523: EQUAL
44524: IFTRUE 44528
44526: GO 44554
44528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44529: LD_ADDR_VAR 0 3
44533: PUSH
44534: LD_INT 21
44536: PUSH
44537: LD_INT 22
44539: PUSH
44540: LD_INT 23
44542: PUSH
44543: LD_INT 24
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: ST_TO_ADDR
44552: GO 44633
44554: LD_INT 53
44556: DOUBLE
44557: EQUAL
44558: IFTRUE 44562
44560: GO 44580
44562: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44563: LD_ADDR_VAR 0 3
44567: PUSH
44568: LD_INT 23
44570: PUSH
44571: LD_INT 24
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: ST_TO_ADDR
44578: GO 44633
44580: LD_INT 46
44582: DOUBLE
44583: EQUAL
44584: IFTRUE 44588
44586: GO 44606
44588: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44589: LD_ADDR_VAR 0 3
44593: PUSH
44594: LD_INT 23
44596: PUSH
44597: LD_INT 24
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: ST_TO_ADDR
44604: GO 44633
44606: LD_INT 47
44608: DOUBLE
44609: EQUAL
44610: IFTRUE 44614
44612: GO 44632
44614: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44615: LD_ADDR_VAR 0 3
44619: PUSH
44620: LD_INT 23
44622: PUSH
44623: LD_INT 24
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: ST_TO_ADDR
44630: GO 44633
44632: POP
// result := ( chassis in result ) ;
44633: LD_ADDR_VAR 0 3
44637: PUSH
44638: LD_VAR 0 1
44642: PUSH
44643: LD_VAR 0 3
44647: IN
44648: ST_TO_ADDR
// end ;
44649: LD_VAR 0 3
44653: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44654: LD_INT 0
44656: PPUSH
44657: PPUSH
44658: PPUSH
44659: PPUSH
44660: PPUSH
44661: PPUSH
44662: PPUSH
// result := array ;
44663: LD_ADDR_VAR 0 5
44667: PUSH
44668: LD_VAR 0 1
44672: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44673: LD_VAR 0 1
44677: NOT
44678: PUSH
44679: LD_VAR 0 2
44683: NOT
44684: OR
44685: PUSH
44686: LD_VAR 0 3
44690: NOT
44691: OR
44692: PUSH
44693: LD_VAR 0 2
44697: PUSH
44698: LD_VAR 0 1
44702: GREATER
44703: OR
44704: PUSH
44705: LD_VAR 0 3
44709: PUSH
44710: LD_VAR 0 1
44714: GREATER
44715: OR
44716: IFFALSE 44720
// exit ;
44718: GO 45016
// if direction then
44720: LD_VAR 0 4
44724: IFFALSE 44788
// begin d := 1 ;
44726: LD_ADDR_VAR 0 9
44730: PUSH
44731: LD_INT 1
44733: ST_TO_ADDR
// if i_from > i_to then
44734: LD_VAR 0 2
44738: PUSH
44739: LD_VAR 0 3
44743: GREATER
44744: IFFALSE 44770
// length := ( array - i_from ) + i_to else
44746: LD_ADDR_VAR 0 11
44750: PUSH
44751: LD_VAR 0 1
44755: PUSH
44756: LD_VAR 0 2
44760: MINUS
44761: PUSH
44762: LD_VAR 0 3
44766: PLUS
44767: ST_TO_ADDR
44768: GO 44786
// length := i_to - i_from ;
44770: LD_ADDR_VAR 0 11
44774: PUSH
44775: LD_VAR 0 3
44779: PUSH
44780: LD_VAR 0 2
44784: MINUS
44785: ST_TO_ADDR
// end else
44786: GO 44849
// begin d := - 1 ;
44788: LD_ADDR_VAR 0 9
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: ST_TO_ADDR
// if i_from > i_to then
44797: LD_VAR 0 2
44801: PUSH
44802: LD_VAR 0 3
44806: GREATER
44807: IFFALSE 44827
// length := i_from - i_to else
44809: LD_ADDR_VAR 0 11
44813: PUSH
44814: LD_VAR 0 2
44818: PUSH
44819: LD_VAR 0 3
44823: MINUS
44824: ST_TO_ADDR
44825: GO 44849
// length := ( array - i_to ) + i_from ;
44827: LD_ADDR_VAR 0 11
44831: PUSH
44832: LD_VAR 0 1
44836: PUSH
44837: LD_VAR 0 3
44841: MINUS
44842: PUSH
44843: LD_VAR 0 2
44847: PLUS
44848: ST_TO_ADDR
// end ; if not length then
44849: LD_VAR 0 11
44853: NOT
44854: IFFALSE 44858
// exit ;
44856: GO 45016
// tmp := array ;
44858: LD_ADDR_VAR 0 10
44862: PUSH
44863: LD_VAR 0 1
44867: ST_TO_ADDR
// for i = 1 to length do
44868: LD_ADDR_VAR 0 6
44872: PUSH
44873: DOUBLE
44874: LD_INT 1
44876: DEC
44877: ST_TO_ADDR
44878: LD_VAR 0 11
44882: PUSH
44883: FOR_TO
44884: IFFALSE 45004
// begin for j = 1 to array do
44886: LD_ADDR_VAR 0 7
44890: PUSH
44891: DOUBLE
44892: LD_INT 1
44894: DEC
44895: ST_TO_ADDR
44896: LD_VAR 0 1
44900: PUSH
44901: FOR_TO
44902: IFFALSE 44990
// begin k := j + d ;
44904: LD_ADDR_VAR 0 8
44908: PUSH
44909: LD_VAR 0 7
44913: PUSH
44914: LD_VAR 0 9
44918: PLUS
44919: ST_TO_ADDR
// if k > array then
44920: LD_VAR 0 8
44924: PUSH
44925: LD_VAR 0 1
44929: GREATER
44930: IFFALSE 44940
// k := 1 ;
44932: LD_ADDR_VAR 0 8
44936: PUSH
44937: LD_INT 1
44939: ST_TO_ADDR
// if not k then
44940: LD_VAR 0 8
44944: NOT
44945: IFFALSE 44957
// k := array ;
44947: LD_ADDR_VAR 0 8
44951: PUSH
44952: LD_VAR 0 1
44956: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44957: LD_ADDR_VAR 0 10
44961: PUSH
44962: LD_VAR 0 10
44966: PPUSH
44967: LD_VAR 0 8
44971: PPUSH
44972: LD_VAR 0 1
44976: PUSH
44977: LD_VAR 0 7
44981: ARRAY
44982: PPUSH
44983: CALL_OW 1
44987: ST_TO_ADDR
// end ;
44988: GO 44901
44990: POP
44991: POP
// array := tmp ;
44992: LD_ADDR_VAR 0 1
44996: PUSH
44997: LD_VAR 0 10
45001: ST_TO_ADDR
// end ;
45002: GO 44883
45004: POP
45005: POP
// result := array ;
45006: LD_ADDR_VAR 0 5
45010: PUSH
45011: LD_VAR 0 1
45015: ST_TO_ADDR
// end ;
45016: LD_VAR 0 5
45020: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45021: LD_INT 0
45023: PPUSH
45024: PPUSH
// result := 0 ;
45025: LD_ADDR_VAR 0 3
45029: PUSH
45030: LD_INT 0
45032: ST_TO_ADDR
// if not array or not value in array then
45033: LD_VAR 0 1
45037: NOT
45038: PUSH
45039: LD_VAR 0 2
45043: PUSH
45044: LD_VAR 0 1
45048: IN
45049: NOT
45050: OR
45051: IFFALSE 45055
// exit ;
45053: GO 45109
// for i = 1 to array do
45055: LD_ADDR_VAR 0 4
45059: PUSH
45060: DOUBLE
45061: LD_INT 1
45063: DEC
45064: ST_TO_ADDR
45065: LD_VAR 0 1
45069: PUSH
45070: FOR_TO
45071: IFFALSE 45107
// if value = array [ i ] then
45073: LD_VAR 0 2
45077: PUSH
45078: LD_VAR 0 1
45082: PUSH
45083: LD_VAR 0 4
45087: ARRAY
45088: EQUAL
45089: IFFALSE 45105
// begin result := i ;
45091: LD_ADDR_VAR 0 3
45095: PUSH
45096: LD_VAR 0 4
45100: ST_TO_ADDR
// exit ;
45101: POP
45102: POP
45103: GO 45109
// end ;
45105: GO 45070
45107: POP
45108: POP
// end ;
45109: LD_VAR 0 3
45113: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45114: LD_INT 0
45116: PPUSH
// vc_chassis := chassis ;
45117: LD_ADDR_OWVAR 37
45121: PUSH
45122: LD_VAR 0 1
45126: ST_TO_ADDR
// vc_engine := engine ;
45127: LD_ADDR_OWVAR 39
45131: PUSH
45132: LD_VAR 0 2
45136: ST_TO_ADDR
// vc_control := control ;
45137: LD_ADDR_OWVAR 38
45141: PUSH
45142: LD_VAR 0 3
45146: ST_TO_ADDR
// vc_weapon := weapon ;
45147: LD_ADDR_OWVAR 40
45151: PUSH
45152: LD_VAR 0 4
45156: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45157: LD_ADDR_OWVAR 41
45161: PUSH
45162: LD_VAR 0 5
45166: ST_TO_ADDR
// end ;
45167: LD_VAR 0 6
45171: RET
// export function WantPlant ( unit ) ; var task ; begin
45172: LD_INT 0
45174: PPUSH
45175: PPUSH
// result := false ;
45176: LD_ADDR_VAR 0 2
45180: PUSH
45181: LD_INT 0
45183: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45184: LD_ADDR_VAR 0 3
45188: PUSH
45189: LD_VAR 0 1
45193: PPUSH
45194: CALL_OW 437
45198: ST_TO_ADDR
// if task then
45199: LD_VAR 0 3
45203: IFFALSE 45231
// if task [ 1 ] [ 1 ] = p then
45205: LD_VAR 0 3
45209: PUSH
45210: LD_INT 1
45212: ARRAY
45213: PUSH
45214: LD_INT 1
45216: ARRAY
45217: PUSH
45218: LD_STRING p
45220: EQUAL
45221: IFFALSE 45231
// result := true ;
45223: LD_ADDR_VAR 0 2
45227: PUSH
45228: LD_INT 1
45230: ST_TO_ADDR
// end ;
45231: LD_VAR 0 2
45235: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45236: LD_INT 0
45238: PPUSH
45239: PPUSH
45240: PPUSH
45241: PPUSH
// if pos < 1 then
45242: LD_VAR 0 2
45246: PUSH
45247: LD_INT 1
45249: LESS
45250: IFFALSE 45254
// exit ;
45252: GO 45557
// if pos = 1 then
45254: LD_VAR 0 2
45258: PUSH
45259: LD_INT 1
45261: EQUAL
45262: IFFALSE 45295
// result := Replace ( arr , pos [ 1 ] , value ) else
45264: LD_ADDR_VAR 0 4
45268: PUSH
45269: LD_VAR 0 1
45273: PPUSH
45274: LD_VAR 0 2
45278: PUSH
45279: LD_INT 1
45281: ARRAY
45282: PPUSH
45283: LD_VAR 0 3
45287: PPUSH
45288: CALL_OW 1
45292: ST_TO_ADDR
45293: GO 45557
// begin tmp := arr ;
45295: LD_ADDR_VAR 0 6
45299: PUSH
45300: LD_VAR 0 1
45304: ST_TO_ADDR
// s_arr := [ tmp ] ;
45305: LD_ADDR_VAR 0 7
45309: PUSH
45310: LD_VAR 0 6
45314: PUSH
45315: EMPTY
45316: LIST
45317: ST_TO_ADDR
// for i = 1 to pos - 1 do
45318: LD_ADDR_VAR 0 5
45322: PUSH
45323: DOUBLE
45324: LD_INT 1
45326: DEC
45327: ST_TO_ADDR
45328: LD_VAR 0 2
45332: PUSH
45333: LD_INT 1
45335: MINUS
45336: PUSH
45337: FOR_TO
45338: IFFALSE 45383
// begin tmp := tmp [ pos [ i ] ] ;
45340: LD_ADDR_VAR 0 6
45344: PUSH
45345: LD_VAR 0 6
45349: PUSH
45350: LD_VAR 0 2
45354: PUSH
45355: LD_VAR 0 5
45359: ARRAY
45360: ARRAY
45361: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45362: LD_ADDR_VAR 0 7
45366: PUSH
45367: LD_VAR 0 7
45371: PUSH
45372: LD_VAR 0 6
45376: PUSH
45377: EMPTY
45378: LIST
45379: ADD
45380: ST_TO_ADDR
// end ;
45381: GO 45337
45383: POP
45384: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45385: LD_ADDR_VAR 0 6
45389: PUSH
45390: LD_VAR 0 6
45394: PPUSH
45395: LD_VAR 0 2
45399: PUSH
45400: LD_VAR 0 2
45404: ARRAY
45405: PPUSH
45406: LD_VAR 0 3
45410: PPUSH
45411: CALL_OW 1
45415: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45416: LD_ADDR_VAR 0 7
45420: PUSH
45421: LD_VAR 0 7
45425: PPUSH
45426: LD_VAR 0 7
45430: PPUSH
45431: LD_VAR 0 6
45435: PPUSH
45436: CALL_OW 1
45440: ST_TO_ADDR
// for i = s_arr downto 2 do
45441: LD_ADDR_VAR 0 5
45445: PUSH
45446: DOUBLE
45447: LD_VAR 0 7
45451: INC
45452: ST_TO_ADDR
45453: LD_INT 2
45455: PUSH
45456: FOR_DOWNTO
45457: IFFALSE 45541
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45459: LD_ADDR_VAR 0 6
45463: PUSH
45464: LD_VAR 0 7
45468: PUSH
45469: LD_VAR 0 5
45473: PUSH
45474: LD_INT 1
45476: MINUS
45477: ARRAY
45478: PPUSH
45479: LD_VAR 0 2
45483: PUSH
45484: LD_VAR 0 5
45488: PUSH
45489: LD_INT 1
45491: MINUS
45492: ARRAY
45493: PPUSH
45494: LD_VAR 0 7
45498: PUSH
45499: LD_VAR 0 5
45503: ARRAY
45504: PPUSH
45505: CALL_OW 1
45509: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45510: LD_ADDR_VAR 0 7
45514: PUSH
45515: LD_VAR 0 7
45519: PPUSH
45520: LD_VAR 0 5
45524: PUSH
45525: LD_INT 1
45527: MINUS
45528: PPUSH
45529: LD_VAR 0 6
45533: PPUSH
45534: CALL_OW 1
45538: ST_TO_ADDR
// end ;
45539: GO 45456
45541: POP
45542: POP
// result := s_arr [ 1 ] ;
45543: LD_ADDR_VAR 0 4
45547: PUSH
45548: LD_VAR 0 7
45552: PUSH
45553: LD_INT 1
45555: ARRAY
45556: ST_TO_ADDR
// end ; end ;
45557: LD_VAR 0 4
45561: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45562: LD_INT 0
45564: PPUSH
45565: PPUSH
// if not list then
45566: LD_VAR 0 1
45570: NOT
45571: IFFALSE 45575
// exit ;
45573: GO 45666
// i := list [ pos1 ] ;
45575: LD_ADDR_VAR 0 5
45579: PUSH
45580: LD_VAR 0 1
45584: PUSH
45585: LD_VAR 0 2
45589: ARRAY
45590: ST_TO_ADDR
// if not i then
45591: LD_VAR 0 5
45595: NOT
45596: IFFALSE 45600
// exit ;
45598: GO 45666
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45600: LD_ADDR_VAR 0 1
45604: PUSH
45605: LD_VAR 0 1
45609: PPUSH
45610: LD_VAR 0 2
45614: PPUSH
45615: LD_VAR 0 1
45619: PUSH
45620: LD_VAR 0 3
45624: ARRAY
45625: PPUSH
45626: CALL_OW 1
45630: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45631: LD_ADDR_VAR 0 1
45635: PUSH
45636: LD_VAR 0 1
45640: PPUSH
45641: LD_VAR 0 3
45645: PPUSH
45646: LD_VAR 0 5
45650: PPUSH
45651: CALL_OW 1
45655: ST_TO_ADDR
// result := list ;
45656: LD_ADDR_VAR 0 4
45660: PUSH
45661: LD_VAR 0 1
45665: ST_TO_ADDR
// end ;
45666: LD_VAR 0 4
45670: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45671: LD_INT 0
45673: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45674: LD_ADDR_VAR 0 5
45678: PUSH
45679: LD_VAR 0 1
45683: PPUSH
45684: CALL_OW 250
45688: PPUSH
45689: LD_VAR 0 1
45693: PPUSH
45694: CALL_OW 251
45698: PPUSH
45699: LD_VAR 0 2
45703: PPUSH
45704: LD_VAR 0 3
45708: PPUSH
45709: LD_VAR 0 4
45713: PPUSH
45714: CALL 45724 0 5
45718: ST_TO_ADDR
// end ;
45719: LD_VAR 0 5
45723: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45724: LD_INT 0
45726: PPUSH
45727: PPUSH
45728: PPUSH
45729: PPUSH
// if not list then
45730: LD_VAR 0 3
45734: NOT
45735: IFFALSE 45739
// exit ;
45737: GO 46127
// result := [ ] ;
45739: LD_ADDR_VAR 0 6
45743: PUSH
45744: EMPTY
45745: ST_TO_ADDR
// for i in list do
45746: LD_ADDR_VAR 0 7
45750: PUSH
45751: LD_VAR 0 3
45755: PUSH
45756: FOR_IN
45757: IFFALSE 45959
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45759: LD_ADDR_VAR 0 9
45763: PUSH
45764: LD_VAR 0 7
45768: PPUSH
45769: LD_VAR 0 1
45773: PPUSH
45774: LD_VAR 0 2
45778: PPUSH
45779: CALL_OW 297
45783: ST_TO_ADDR
// if not result then
45784: LD_VAR 0 6
45788: NOT
45789: IFFALSE 45815
// result := [ [ i , tmp ] ] else
45791: LD_ADDR_VAR 0 6
45795: PUSH
45796: LD_VAR 0 7
45800: PUSH
45801: LD_VAR 0 9
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: EMPTY
45811: LIST
45812: ST_TO_ADDR
45813: GO 45957
// begin if result [ result ] [ 2 ] < tmp then
45815: LD_VAR 0 6
45819: PUSH
45820: LD_VAR 0 6
45824: ARRAY
45825: PUSH
45826: LD_INT 2
45828: ARRAY
45829: PUSH
45830: LD_VAR 0 9
45834: LESS
45835: IFFALSE 45877
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45837: LD_ADDR_VAR 0 6
45841: PUSH
45842: LD_VAR 0 6
45846: PPUSH
45847: LD_VAR 0 6
45851: PUSH
45852: LD_INT 1
45854: PLUS
45855: PPUSH
45856: LD_VAR 0 7
45860: PUSH
45861: LD_VAR 0 9
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PPUSH
45870: CALL_OW 2
45874: ST_TO_ADDR
45875: GO 45957
// for j = 1 to result do
45877: LD_ADDR_VAR 0 8
45881: PUSH
45882: DOUBLE
45883: LD_INT 1
45885: DEC
45886: ST_TO_ADDR
45887: LD_VAR 0 6
45891: PUSH
45892: FOR_TO
45893: IFFALSE 45955
// begin if tmp < result [ j ] [ 2 ] then
45895: LD_VAR 0 9
45899: PUSH
45900: LD_VAR 0 6
45904: PUSH
45905: LD_VAR 0 8
45909: ARRAY
45910: PUSH
45911: LD_INT 2
45913: ARRAY
45914: LESS
45915: IFFALSE 45953
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45917: LD_ADDR_VAR 0 6
45921: PUSH
45922: LD_VAR 0 6
45926: PPUSH
45927: LD_VAR 0 8
45931: PPUSH
45932: LD_VAR 0 7
45936: PUSH
45937: LD_VAR 0 9
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PPUSH
45946: CALL_OW 2
45950: ST_TO_ADDR
// break ;
45951: GO 45955
// end ; end ;
45953: GO 45892
45955: POP
45956: POP
// end ; end ;
45957: GO 45756
45959: POP
45960: POP
// if result and not asc then
45961: LD_VAR 0 6
45965: PUSH
45966: LD_VAR 0 4
45970: NOT
45971: AND
45972: IFFALSE 46047
// begin tmp := result ;
45974: LD_ADDR_VAR 0 9
45978: PUSH
45979: LD_VAR 0 6
45983: ST_TO_ADDR
// for i = tmp downto 1 do
45984: LD_ADDR_VAR 0 7
45988: PUSH
45989: DOUBLE
45990: LD_VAR 0 9
45994: INC
45995: ST_TO_ADDR
45996: LD_INT 1
45998: PUSH
45999: FOR_DOWNTO
46000: IFFALSE 46045
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46002: LD_ADDR_VAR 0 6
46006: PUSH
46007: LD_VAR 0 6
46011: PPUSH
46012: LD_VAR 0 9
46016: PUSH
46017: LD_VAR 0 7
46021: MINUS
46022: PUSH
46023: LD_INT 1
46025: PLUS
46026: PPUSH
46027: LD_VAR 0 9
46031: PUSH
46032: LD_VAR 0 7
46036: ARRAY
46037: PPUSH
46038: CALL_OW 1
46042: ST_TO_ADDR
46043: GO 45999
46045: POP
46046: POP
// end ; tmp := [ ] ;
46047: LD_ADDR_VAR 0 9
46051: PUSH
46052: EMPTY
46053: ST_TO_ADDR
// if mode then
46054: LD_VAR 0 5
46058: IFFALSE 46127
// begin for i = 1 to result do
46060: LD_ADDR_VAR 0 7
46064: PUSH
46065: DOUBLE
46066: LD_INT 1
46068: DEC
46069: ST_TO_ADDR
46070: LD_VAR 0 6
46074: PUSH
46075: FOR_TO
46076: IFFALSE 46115
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46078: LD_ADDR_VAR 0 9
46082: PUSH
46083: LD_VAR 0 9
46087: PPUSH
46088: LD_VAR 0 7
46092: PPUSH
46093: LD_VAR 0 6
46097: PUSH
46098: LD_VAR 0 7
46102: ARRAY
46103: PUSH
46104: LD_INT 1
46106: ARRAY
46107: PPUSH
46108: CALL_OW 1
46112: ST_TO_ADDR
46113: GO 46075
46115: POP
46116: POP
// result := tmp ;
46117: LD_ADDR_VAR 0 6
46121: PUSH
46122: LD_VAR 0 9
46126: ST_TO_ADDR
// end ; end ;
46127: LD_VAR 0 6
46131: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46132: LD_INT 0
46134: PPUSH
46135: PPUSH
46136: PPUSH
46137: PPUSH
46138: PPUSH
46139: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46140: LD_ADDR_VAR 0 5
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: ST_TO_ADDR
// if not x or not y then
46162: LD_VAR 0 2
46166: NOT
46167: PUSH
46168: LD_VAR 0 3
46172: NOT
46173: OR
46174: IFFALSE 46178
// exit ;
46176: GO 47828
// if not range then
46178: LD_VAR 0 4
46182: NOT
46183: IFFALSE 46193
// range := 10 ;
46185: LD_ADDR_VAR 0 4
46189: PUSH
46190: LD_INT 10
46192: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46193: LD_ADDR_VAR 0 8
46197: PUSH
46198: LD_INT 81
46200: PUSH
46201: LD_VAR 0 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 92
46212: PUSH
46213: LD_VAR 0 2
46217: PUSH
46218: LD_VAR 0 3
46222: PUSH
46223: LD_VAR 0 4
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 3
46236: PUSH
46237: LD_INT 21
46239: PUSH
46240: LD_INT 3
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: LIST
46255: PPUSH
46256: CALL_OW 69
46260: ST_TO_ADDR
// if not tmp then
46261: LD_VAR 0 8
46265: NOT
46266: IFFALSE 46270
// exit ;
46268: GO 47828
// for i in tmp do
46270: LD_ADDR_VAR 0 6
46274: PUSH
46275: LD_VAR 0 8
46279: PUSH
46280: FOR_IN
46281: IFFALSE 47803
// begin points := [ 0 , 0 , 0 ] ;
46283: LD_ADDR_VAR 0 9
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// bpoints := 1 ;
46302: LD_ADDR_VAR 0 10
46306: PUSH
46307: LD_INT 1
46309: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46310: LD_VAR 0 6
46314: PPUSH
46315: CALL_OW 247
46319: PUSH
46320: LD_INT 1
46322: DOUBLE
46323: EQUAL
46324: IFTRUE 46328
46326: GO 46906
46328: POP
// begin if GetClass ( i ) = 1 then
46329: LD_VAR 0 6
46333: PPUSH
46334: CALL_OW 257
46338: PUSH
46339: LD_INT 1
46341: EQUAL
46342: IFFALSE 46363
// points := [ 10 , 5 , 3 ] ;
46344: LD_ADDR_VAR 0 9
46348: PUSH
46349: LD_INT 10
46351: PUSH
46352: LD_INT 5
46354: PUSH
46355: LD_INT 3
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: LIST
46362: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46363: LD_VAR 0 6
46367: PPUSH
46368: CALL_OW 257
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: LD_INT 3
46378: PUSH
46379: LD_INT 4
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: LIST
46386: IN
46387: IFFALSE 46408
// points := [ 3 , 2 , 1 ] ;
46389: LD_ADDR_VAR 0 9
46393: PUSH
46394: LD_INT 3
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: LIST
46407: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46408: LD_VAR 0 6
46412: PPUSH
46413: CALL_OW 257
46417: PUSH
46418: LD_INT 5
46420: EQUAL
46421: IFFALSE 46442
// points := [ 130 , 5 , 2 ] ;
46423: LD_ADDR_VAR 0 9
46427: PUSH
46428: LD_INT 130
46430: PUSH
46431: LD_INT 5
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46442: LD_VAR 0 6
46446: PPUSH
46447: CALL_OW 257
46451: PUSH
46452: LD_INT 8
46454: EQUAL
46455: IFFALSE 46476
// points := [ 35 , 35 , 30 ] ;
46457: LD_ADDR_VAR 0 9
46461: PUSH
46462: LD_INT 35
46464: PUSH
46465: LD_INT 35
46467: PUSH
46468: LD_INT 30
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: LIST
46475: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46476: LD_VAR 0 6
46480: PPUSH
46481: CALL_OW 257
46485: PUSH
46486: LD_INT 9
46488: EQUAL
46489: IFFALSE 46510
// points := [ 20 , 55 , 40 ] ;
46491: LD_ADDR_VAR 0 9
46495: PUSH
46496: LD_INT 20
46498: PUSH
46499: LD_INT 55
46501: PUSH
46502: LD_INT 40
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: LIST
46509: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46510: LD_VAR 0 6
46514: PPUSH
46515: CALL_OW 257
46519: PUSH
46520: LD_INT 12
46522: PUSH
46523: LD_INT 16
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: IN
46530: IFFALSE 46551
// points := [ 5 , 3 , 2 ] ;
46532: LD_ADDR_VAR 0 9
46536: PUSH
46537: LD_INT 5
46539: PUSH
46540: LD_INT 3
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: LIST
46550: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46551: LD_VAR 0 6
46555: PPUSH
46556: CALL_OW 257
46560: PUSH
46561: LD_INT 17
46563: EQUAL
46564: IFFALSE 46585
// points := [ 100 , 50 , 75 ] ;
46566: LD_ADDR_VAR 0 9
46570: PUSH
46571: LD_INT 100
46573: PUSH
46574: LD_INT 50
46576: PUSH
46577: LD_INT 75
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: LIST
46584: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46585: LD_VAR 0 6
46589: PPUSH
46590: CALL_OW 257
46594: PUSH
46595: LD_INT 15
46597: EQUAL
46598: IFFALSE 46619
// points := [ 10 , 5 , 3 ] ;
46600: LD_ADDR_VAR 0 9
46604: PUSH
46605: LD_INT 10
46607: PUSH
46608: LD_INT 5
46610: PUSH
46611: LD_INT 3
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: LIST
46618: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46619: LD_VAR 0 6
46623: PPUSH
46624: CALL_OW 257
46628: PUSH
46629: LD_INT 14
46631: EQUAL
46632: IFFALSE 46653
// points := [ 10 , 0 , 0 ] ;
46634: LD_ADDR_VAR 0 9
46638: PUSH
46639: LD_INT 10
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: LIST
46652: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46653: LD_VAR 0 6
46657: PPUSH
46658: CALL_OW 257
46662: PUSH
46663: LD_INT 11
46665: EQUAL
46666: IFFALSE 46687
// points := [ 30 , 10 , 5 ] ;
46668: LD_ADDR_VAR 0 9
46672: PUSH
46673: LD_INT 30
46675: PUSH
46676: LD_INT 10
46678: PUSH
46679: LD_INT 5
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: LIST
46686: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46687: LD_VAR 0 1
46691: PPUSH
46692: LD_INT 5
46694: PPUSH
46695: CALL_OW 321
46699: PUSH
46700: LD_INT 2
46702: EQUAL
46703: IFFALSE 46720
// bpoints := bpoints * 1.8 ;
46705: LD_ADDR_VAR 0 10
46709: PUSH
46710: LD_VAR 0 10
46714: PUSH
46715: LD_REAL  1.80000000000000E+0000
46718: MUL
46719: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46720: LD_VAR 0 6
46724: PPUSH
46725: CALL_OW 257
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: LD_INT 3
46738: PUSH
46739: LD_INT 4
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: IN
46748: PUSH
46749: LD_VAR 0 1
46753: PPUSH
46754: LD_INT 51
46756: PPUSH
46757: CALL_OW 321
46761: PUSH
46762: LD_INT 2
46764: EQUAL
46765: AND
46766: IFFALSE 46783
// bpoints := bpoints * 1.2 ;
46768: LD_ADDR_VAR 0 10
46772: PUSH
46773: LD_VAR 0 10
46777: PUSH
46778: LD_REAL  1.20000000000000E+0000
46781: MUL
46782: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46783: LD_VAR 0 6
46787: PPUSH
46788: CALL_OW 257
46792: PUSH
46793: LD_INT 5
46795: PUSH
46796: LD_INT 7
46798: PUSH
46799: LD_INT 9
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: LIST
46806: IN
46807: PUSH
46808: LD_VAR 0 1
46812: PPUSH
46813: LD_INT 52
46815: PPUSH
46816: CALL_OW 321
46820: PUSH
46821: LD_INT 2
46823: EQUAL
46824: AND
46825: IFFALSE 46842
// bpoints := bpoints * 1.5 ;
46827: LD_ADDR_VAR 0 10
46831: PUSH
46832: LD_VAR 0 10
46836: PUSH
46837: LD_REAL  1.50000000000000E+0000
46840: MUL
46841: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46842: LD_VAR 0 1
46846: PPUSH
46847: LD_INT 66
46849: PPUSH
46850: CALL_OW 321
46854: PUSH
46855: LD_INT 2
46857: EQUAL
46858: IFFALSE 46875
// bpoints := bpoints * 1.1 ;
46860: LD_ADDR_VAR 0 10
46864: PUSH
46865: LD_VAR 0 10
46869: PUSH
46870: LD_REAL  1.10000000000000E+0000
46873: MUL
46874: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46875: LD_ADDR_VAR 0 10
46879: PUSH
46880: LD_VAR 0 10
46884: PUSH
46885: LD_VAR 0 6
46889: PPUSH
46890: LD_INT 1
46892: PPUSH
46893: CALL_OW 259
46897: PUSH
46898: LD_REAL  1.15000000000000E+0000
46901: MUL
46902: MUL
46903: ST_TO_ADDR
// end ; unit_vehicle :
46904: GO 47732
46906: LD_INT 2
46908: DOUBLE
46909: EQUAL
46910: IFTRUE 46914
46912: GO 47720
46914: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46915: LD_VAR 0 6
46919: PPUSH
46920: CALL_OW 264
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: LD_INT 42
46930: PUSH
46931: LD_INT 24
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: LIST
46938: IN
46939: IFFALSE 46960
// points := [ 25 , 5 , 3 ] ;
46941: LD_ADDR_VAR 0 9
46945: PUSH
46946: LD_INT 25
46948: PUSH
46949: LD_INT 5
46951: PUSH
46952: LD_INT 3
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46960: LD_VAR 0 6
46964: PPUSH
46965: CALL_OW 264
46969: PUSH
46970: LD_INT 4
46972: PUSH
46973: LD_INT 43
46975: PUSH
46976: LD_INT 25
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: IN
46984: IFFALSE 47005
// points := [ 40 , 15 , 5 ] ;
46986: LD_ADDR_VAR 0 9
46990: PUSH
46991: LD_INT 40
46993: PUSH
46994: LD_INT 15
46996: PUSH
46997: LD_INT 5
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: LIST
47004: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47005: LD_VAR 0 6
47009: PPUSH
47010: CALL_OW 264
47014: PUSH
47015: LD_INT 3
47017: PUSH
47018: LD_INT 23
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: IN
47025: IFFALSE 47046
// points := [ 7 , 25 , 8 ] ;
47027: LD_ADDR_VAR 0 9
47031: PUSH
47032: LD_INT 7
47034: PUSH
47035: LD_INT 25
47037: PUSH
47038: LD_INT 8
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47046: LD_VAR 0 6
47050: PPUSH
47051: CALL_OW 264
47055: PUSH
47056: LD_INT 5
47058: PUSH
47059: LD_INT 27
47061: PUSH
47062: LD_INT 44
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: LIST
47069: IN
47070: IFFALSE 47091
// points := [ 14 , 50 , 16 ] ;
47072: LD_ADDR_VAR 0 9
47076: PUSH
47077: LD_INT 14
47079: PUSH
47080: LD_INT 50
47082: PUSH
47083: LD_INT 16
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: LIST
47090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47091: LD_VAR 0 6
47095: PPUSH
47096: CALL_OW 264
47100: PUSH
47101: LD_INT 6
47103: PUSH
47104: LD_INT 46
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: IN
47111: IFFALSE 47132
// points := [ 32 , 120 , 70 ] ;
47113: LD_ADDR_VAR 0 9
47117: PUSH
47118: LD_INT 32
47120: PUSH
47121: LD_INT 120
47123: PUSH
47124: LD_INT 70
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: LIST
47131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47132: LD_VAR 0 6
47136: PPUSH
47137: CALL_OW 264
47141: PUSH
47142: LD_INT 7
47144: PUSH
47145: LD_INT 28
47147: PUSH
47148: LD_INT 45
47150: PUSH
47151: LD_INT 92
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: IN
47160: IFFALSE 47181
// points := [ 35 , 20 , 45 ] ;
47162: LD_ADDR_VAR 0 9
47166: PUSH
47167: LD_INT 35
47169: PUSH
47170: LD_INT 20
47172: PUSH
47173: LD_INT 45
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: LIST
47180: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47181: LD_VAR 0 6
47185: PPUSH
47186: CALL_OW 264
47190: PUSH
47191: LD_INT 47
47193: PUSH
47194: EMPTY
47195: LIST
47196: IN
47197: IFFALSE 47218
// points := [ 67 , 45 , 75 ] ;
47199: LD_ADDR_VAR 0 9
47203: PUSH
47204: LD_INT 67
47206: PUSH
47207: LD_INT 45
47209: PUSH
47210: LD_INT 75
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: LIST
47217: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47218: LD_VAR 0 6
47222: PPUSH
47223: CALL_OW 264
47227: PUSH
47228: LD_INT 26
47230: PUSH
47231: EMPTY
47232: LIST
47233: IN
47234: IFFALSE 47255
// points := [ 120 , 30 , 80 ] ;
47236: LD_ADDR_VAR 0 9
47240: PUSH
47241: LD_INT 120
47243: PUSH
47244: LD_INT 30
47246: PUSH
47247: LD_INT 80
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: LIST
47254: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47255: LD_VAR 0 6
47259: PPUSH
47260: CALL_OW 264
47264: PUSH
47265: LD_INT 22
47267: PUSH
47268: EMPTY
47269: LIST
47270: IN
47271: IFFALSE 47292
// points := [ 40 , 1 , 1 ] ;
47273: LD_ADDR_VAR 0 9
47277: PUSH
47278: LD_INT 40
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: LIST
47291: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47292: LD_VAR 0 6
47296: PPUSH
47297: CALL_OW 264
47301: PUSH
47302: LD_INT 29
47304: PUSH
47305: EMPTY
47306: LIST
47307: IN
47308: IFFALSE 47329
// points := [ 70 , 200 , 400 ] ;
47310: LD_ADDR_VAR 0 9
47314: PUSH
47315: LD_INT 70
47317: PUSH
47318: LD_INT 200
47320: PUSH
47321: LD_INT 400
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: LIST
47328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47329: LD_VAR 0 6
47333: PPUSH
47334: CALL_OW 264
47338: PUSH
47339: LD_INT 14
47341: PUSH
47342: LD_INT 53
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: IN
47349: IFFALSE 47370
// points := [ 40 , 10 , 20 ] ;
47351: LD_ADDR_VAR 0 9
47355: PUSH
47356: LD_INT 40
47358: PUSH
47359: LD_INT 10
47361: PUSH
47362: LD_INT 20
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: LIST
47369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47370: LD_VAR 0 6
47374: PPUSH
47375: CALL_OW 264
47379: PUSH
47380: LD_INT 9
47382: PUSH
47383: EMPTY
47384: LIST
47385: IN
47386: IFFALSE 47407
// points := [ 5 , 70 , 20 ] ;
47388: LD_ADDR_VAR 0 9
47392: PUSH
47393: LD_INT 5
47395: PUSH
47396: LD_INT 70
47398: PUSH
47399: LD_INT 20
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47407: LD_VAR 0 6
47411: PPUSH
47412: CALL_OW 264
47416: PUSH
47417: LD_INT 10
47419: PUSH
47420: EMPTY
47421: LIST
47422: IN
47423: IFFALSE 47444
// points := [ 35 , 110 , 70 ] ;
47425: LD_ADDR_VAR 0 9
47429: PUSH
47430: LD_INT 35
47432: PUSH
47433: LD_INT 110
47435: PUSH
47436: LD_INT 70
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47444: LD_VAR 0 6
47448: PPUSH
47449: CALL_OW 265
47453: PUSH
47454: LD_INT 25
47456: EQUAL
47457: IFFALSE 47478
// points := [ 80 , 65 , 100 ] ;
47459: LD_ADDR_VAR 0 9
47463: PUSH
47464: LD_INT 80
47466: PUSH
47467: LD_INT 65
47469: PUSH
47470: LD_INT 100
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: LIST
47477: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47478: LD_VAR 0 6
47482: PPUSH
47483: CALL_OW 263
47487: PUSH
47488: LD_INT 1
47490: EQUAL
47491: IFFALSE 47526
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47493: LD_ADDR_VAR 0 10
47497: PUSH
47498: LD_VAR 0 10
47502: PUSH
47503: LD_VAR 0 6
47507: PPUSH
47508: CALL_OW 311
47512: PPUSH
47513: LD_INT 3
47515: PPUSH
47516: CALL_OW 259
47520: PUSH
47521: LD_INT 4
47523: MUL
47524: MUL
47525: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47526: LD_VAR 0 6
47530: PPUSH
47531: CALL_OW 263
47535: PUSH
47536: LD_INT 2
47538: EQUAL
47539: IFFALSE 47590
// begin j := IsControledBy ( i ) ;
47541: LD_ADDR_VAR 0 7
47545: PUSH
47546: LD_VAR 0 6
47550: PPUSH
47551: CALL_OW 312
47555: ST_TO_ADDR
// if j then
47556: LD_VAR 0 7
47560: IFFALSE 47590
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47562: LD_ADDR_VAR 0 10
47566: PUSH
47567: LD_VAR 0 10
47571: PUSH
47572: LD_VAR 0 7
47576: PPUSH
47577: LD_INT 3
47579: PPUSH
47580: CALL_OW 259
47584: PUSH
47585: LD_INT 3
47587: MUL
47588: MUL
47589: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47590: LD_VAR 0 6
47594: PPUSH
47595: CALL_OW 264
47599: PUSH
47600: LD_INT 5
47602: PUSH
47603: LD_INT 6
47605: PUSH
47606: LD_INT 46
47608: PUSH
47609: LD_INT 44
47611: PUSH
47612: LD_INT 47
47614: PUSH
47615: LD_INT 45
47617: PUSH
47618: LD_INT 28
47620: PUSH
47621: LD_INT 7
47623: PUSH
47624: LD_INT 27
47626: PUSH
47627: LD_INT 29
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: IN
47642: PUSH
47643: LD_VAR 0 1
47647: PPUSH
47648: LD_INT 52
47650: PPUSH
47651: CALL_OW 321
47655: PUSH
47656: LD_INT 2
47658: EQUAL
47659: AND
47660: IFFALSE 47677
// bpoints := bpoints * 1.2 ;
47662: LD_ADDR_VAR 0 10
47666: PUSH
47667: LD_VAR 0 10
47671: PUSH
47672: LD_REAL  1.20000000000000E+0000
47675: MUL
47676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47677: LD_VAR 0 6
47681: PPUSH
47682: CALL_OW 264
47686: PUSH
47687: LD_INT 6
47689: PUSH
47690: LD_INT 46
47692: PUSH
47693: LD_INT 47
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: LIST
47700: IN
47701: IFFALSE 47718
// bpoints := bpoints * 1.2 ;
47703: LD_ADDR_VAR 0 10
47707: PUSH
47708: LD_VAR 0 10
47712: PUSH
47713: LD_REAL  1.20000000000000E+0000
47716: MUL
47717: ST_TO_ADDR
// end ; unit_building :
47718: GO 47732
47720: LD_INT 3
47722: DOUBLE
47723: EQUAL
47724: IFTRUE 47728
47726: GO 47731
47728: POP
// ; end ;
47729: GO 47732
47731: POP
// for j = 1 to 3 do
47732: LD_ADDR_VAR 0 7
47736: PUSH
47737: DOUBLE
47738: LD_INT 1
47740: DEC
47741: ST_TO_ADDR
47742: LD_INT 3
47744: PUSH
47745: FOR_TO
47746: IFFALSE 47799
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47748: LD_ADDR_VAR 0 5
47752: PUSH
47753: LD_VAR 0 5
47757: PPUSH
47758: LD_VAR 0 7
47762: PPUSH
47763: LD_VAR 0 5
47767: PUSH
47768: LD_VAR 0 7
47772: ARRAY
47773: PUSH
47774: LD_VAR 0 9
47778: PUSH
47779: LD_VAR 0 7
47783: ARRAY
47784: PUSH
47785: LD_VAR 0 10
47789: MUL
47790: PLUS
47791: PPUSH
47792: CALL_OW 1
47796: ST_TO_ADDR
47797: GO 47745
47799: POP
47800: POP
// end ;
47801: GO 46280
47803: POP
47804: POP
// result := Replace ( result , 4 , tmp ) ;
47805: LD_ADDR_VAR 0 5
47809: PUSH
47810: LD_VAR 0 5
47814: PPUSH
47815: LD_INT 4
47817: PPUSH
47818: LD_VAR 0 8
47822: PPUSH
47823: CALL_OW 1
47827: ST_TO_ADDR
// end ;
47828: LD_VAR 0 5
47832: RET
// export function DangerAtRange ( unit , range ) ; begin
47833: LD_INT 0
47835: PPUSH
// if not unit then
47836: LD_VAR 0 1
47840: NOT
47841: IFFALSE 47845
// exit ;
47843: GO 47890
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47845: LD_ADDR_VAR 0 3
47849: PUSH
47850: LD_VAR 0 1
47854: PPUSH
47855: CALL_OW 255
47859: PPUSH
47860: LD_VAR 0 1
47864: PPUSH
47865: CALL_OW 250
47869: PPUSH
47870: LD_VAR 0 1
47874: PPUSH
47875: CALL_OW 251
47879: PPUSH
47880: LD_VAR 0 2
47884: PPUSH
47885: CALL 46132 0 4
47889: ST_TO_ADDR
// end ;
47890: LD_VAR 0 3
47894: RET
// export function DangerInArea ( side , area ) ; begin
47895: LD_INT 0
47897: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47898: LD_ADDR_VAR 0 3
47902: PUSH
47903: LD_VAR 0 2
47907: PPUSH
47908: LD_INT 81
47910: PUSH
47911: LD_VAR 0 1
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PPUSH
47920: CALL_OW 70
47924: ST_TO_ADDR
// end ;
47925: LD_VAR 0 3
47929: RET
// export function IsExtension ( b ) ; begin
47930: LD_INT 0
47932: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47933: LD_ADDR_VAR 0 2
47937: PUSH
47938: LD_VAR 0 1
47942: PUSH
47943: LD_INT 23
47945: PUSH
47946: LD_INT 20
47948: PUSH
47949: LD_INT 22
47951: PUSH
47952: LD_INT 17
47954: PUSH
47955: LD_INT 24
47957: PUSH
47958: LD_INT 21
47960: PUSH
47961: LD_INT 19
47963: PUSH
47964: LD_INT 16
47966: PUSH
47967: LD_INT 25
47969: PUSH
47970: LD_INT 18
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: IN
47985: ST_TO_ADDR
// end ;
47986: LD_VAR 0 2
47990: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47991: LD_INT 0
47993: PPUSH
47994: PPUSH
47995: PPUSH
// result := [ ] ;
47996: LD_ADDR_VAR 0 4
48000: PUSH
48001: EMPTY
48002: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48003: LD_ADDR_VAR 0 5
48007: PUSH
48008: LD_VAR 0 2
48012: PPUSH
48013: LD_INT 21
48015: PUSH
48016: LD_INT 3
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PPUSH
48023: CALL_OW 70
48027: ST_TO_ADDR
// if not tmp then
48028: LD_VAR 0 5
48032: NOT
48033: IFFALSE 48037
// exit ;
48035: GO 48101
// if checkLink then
48037: LD_VAR 0 3
48041: IFFALSE 48091
// begin for i in tmp do
48043: LD_ADDR_VAR 0 6
48047: PUSH
48048: LD_VAR 0 5
48052: PUSH
48053: FOR_IN
48054: IFFALSE 48089
// if GetBase ( i ) <> base then
48056: LD_VAR 0 6
48060: PPUSH
48061: CALL_OW 274
48065: PUSH
48066: LD_VAR 0 1
48070: NONEQUAL
48071: IFFALSE 48087
// ComLinkToBase ( base , i ) ;
48073: LD_VAR 0 1
48077: PPUSH
48078: LD_VAR 0 6
48082: PPUSH
48083: CALL_OW 169
48087: GO 48053
48089: POP
48090: POP
// end ; result := tmp ;
48091: LD_ADDR_VAR 0 4
48095: PUSH
48096: LD_VAR 0 5
48100: ST_TO_ADDR
// end ;
48101: LD_VAR 0 4
48105: RET
// export function ComComplete ( units , b ) ; var i ; begin
48106: LD_INT 0
48108: PPUSH
48109: PPUSH
// if not units then
48110: LD_VAR 0 1
48114: NOT
48115: IFFALSE 48119
// exit ;
48117: GO 48209
// for i in units do
48119: LD_ADDR_VAR 0 4
48123: PUSH
48124: LD_VAR 0 1
48128: PUSH
48129: FOR_IN
48130: IFFALSE 48207
// if BuildingStatus ( b ) = bs_build then
48132: LD_VAR 0 2
48136: PPUSH
48137: CALL_OW 461
48141: PUSH
48142: LD_INT 1
48144: EQUAL
48145: IFFALSE 48205
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48147: LD_VAR 0 4
48151: PPUSH
48152: LD_STRING h
48154: PUSH
48155: LD_VAR 0 2
48159: PPUSH
48160: CALL_OW 250
48164: PUSH
48165: LD_VAR 0 2
48169: PPUSH
48170: CALL_OW 251
48174: PUSH
48175: LD_VAR 0 2
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: PUSH
48198: EMPTY
48199: LIST
48200: PPUSH
48201: CALL_OW 446
48205: GO 48129
48207: POP
48208: POP
// end ;
48209: LD_VAR 0 3
48213: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48214: LD_INT 0
48216: PPUSH
48217: PPUSH
48218: PPUSH
48219: PPUSH
48220: PPUSH
48221: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48222: LD_VAR 0 1
48226: NOT
48227: PUSH
48228: LD_VAR 0 1
48232: PPUSH
48233: CALL_OW 263
48237: PUSH
48238: LD_INT 2
48240: NONEQUAL
48241: OR
48242: IFFALSE 48246
// exit ;
48244: GO 48562
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48246: LD_ADDR_VAR 0 6
48250: PUSH
48251: LD_INT 22
48253: PUSH
48254: LD_VAR 0 1
48258: PPUSH
48259: CALL_OW 255
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: LD_INT 30
48273: PUSH
48274: LD_INT 36
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 34
48283: PUSH
48284: LD_INT 31
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: LIST
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PPUSH
48300: CALL_OW 69
48304: ST_TO_ADDR
// if not tmp then
48305: LD_VAR 0 6
48309: NOT
48310: IFFALSE 48314
// exit ;
48312: GO 48562
// result := [ ] ;
48314: LD_ADDR_VAR 0 2
48318: PUSH
48319: EMPTY
48320: ST_TO_ADDR
// for i in tmp do
48321: LD_ADDR_VAR 0 3
48325: PUSH
48326: LD_VAR 0 6
48330: PUSH
48331: FOR_IN
48332: IFFALSE 48403
// begin t := UnitsInside ( i ) ;
48334: LD_ADDR_VAR 0 4
48338: PUSH
48339: LD_VAR 0 3
48343: PPUSH
48344: CALL_OW 313
48348: ST_TO_ADDR
// if t then
48349: LD_VAR 0 4
48353: IFFALSE 48401
// for j in t do
48355: LD_ADDR_VAR 0 7
48359: PUSH
48360: LD_VAR 0 4
48364: PUSH
48365: FOR_IN
48366: IFFALSE 48399
// result := Replace ( result , result + 1 , j ) ;
48368: LD_ADDR_VAR 0 2
48372: PUSH
48373: LD_VAR 0 2
48377: PPUSH
48378: LD_VAR 0 2
48382: PUSH
48383: LD_INT 1
48385: PLUS
48386: PPUSH
48387: LD_VAR 0 7
48391: PPUSH
48392: CALL_OW 1
48396: ST_TO_ADDR
48397: GO 48365
48399: POP
48400: POP
// end ;
48401: GO 48331
48403: POP
48404: POP
// if not result then
48405: LD_VAR 0 2
48409: NOT
48410: IFFALSE 48414
// exit ;
48412: GO 48562
// mech := result [ 1 ] ;
48414: LD_ADDR_VAR 0 5
48418: PUSH
48419: LD_VAR 0 2
48423: PUSH
48424: LD_INT 1
48426: ARRAY
48427: ST_TO_ADDR
// if result > 1 then
48428: LD_VAR 0 2
48432: PUSH
48433: LD_INT 1
48435: GREATER
48436: IFFALSE 48548
// begin for i = 2 to result do
48438: LD_ADDR_VAR 0 3
48442: PUSH
48443: DOUBLE
48444: LD_INT 2
48446: DEC
48447: ST_TO_ADDR
48448: LD_VAR 0 2
48452: PUSH
48453: FOR_TO
48454: IFFALSE 48546
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48456: LD_ADDR_VAR 0 4
48460: PUSH
48461: LD_VAR 0 2
48465: PUSH
48466: LD_VAR 0 3
48470: ARRAY
48471: PPUSH
48472: LD_INT 3
48474: PPUSH
48475: CALL_OW 259
48479: PUSH
48480: LD_VAR 0 2
48484: PUSH
48485: LD_VAR 0 3
48489: ARRAY
48490: PPUSH
48491: CALL_OW 432
48495: MINUS
48496: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48497: LD_VAR 0 4
48501: PUSH
48502: LD_VAR 0 5
48506: PPUSH
48507: LD_INT 3
48509: PPUSH
48510: CALL_OW 259
48514: PUSH
48515: LD_VAR 0 5
48519: PPUSH
48520: CALL_OW 432
48524: MINUS
48525: GREATEREQUAL
48526: IFFALSE 48544
// mech := result [ i ] ;
48528: LD_ADDR_VAR 0 5
48532: PUSH
48533: LD_VAR 0 2
48537: PUSH
48538: LD_VAR 0 3
48542: ARRAY
48543: ST_TO_ADDR
// end ;
48544: GO 48453
48546: POP
48547: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48548: LD_VAR 0 1
48552: PPUSH
48553: LD_VAR 0 5
48557: PPUSH
48558: CALL_OW 135
// end ;
48562: LD_VAR 0 2
48566: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48567: LD_INT 0
48569: PPUSH
48570: PPUSH
48571: PPUSH
48572: PPUSH
48573: PPUSH
48574: PPUSH
48575: PPUSH
48576: PPUSH
48577: PPUSH
48578: PPUSH
48579: PPUSH
48580: PPUSH
48581: PPUSH
// result := [ ] ;
48582: LD_ADDR_VAR 0 7
48586: PUSH
48587: EMPTY
48588: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48589: LD_VAR 0 1
48593: PPUSH
48594: CALL_OW 266
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: IN
48609: NOT
48610: IFFALSE 48614
// exit ;
48612: GO 50248
// if name then
48614: LD_VAR 0 3
48618: IFFALSE 48634
// SetBName ( base_dep , name ) ;
48620: LD_VAR 0 1
48624: PPUSH
48625: LD_VAR 0 3
48629: PPUSH
48630: CALL_OW 500
// base := GetBase ( base_dep ) ;
48634: LD_ADDR_VAR 0 15
48638: PUSH
48639: LD_VAR 0 1
48643: PPUSH
48644: CALL_OW 274
48648: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48649: LD_ADDR_VAR 0 16
48653: PUSH
48654: LD_VAR 0 1
48658: PPUSH
48659: CALL_OW 255
48663: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48664: LD_ADDR_VAR 0 17
48668: PUSH
48669: LD_VAR 0 1
48673: PPUSH
48674: CALL_OW 248
48678: ST_TO_ADDR
// if sources then
48679: LD_VAR 0 5
48683: IFFALSE 48730
// for i = 1 to 3 do
48685: LD_ADDR_VAR 0 8
48689: PUSH
48690: DOUBLE
48691: LD_INT 1
48693: DEC
48694: ST_TO_ADDR
48695: LD_INT 3
48697: PUSH
48698: FOR_TO
48699: IFFALSE 48728
// AddResourceType ( base , i , sources [ i ] ) ;
48701: LD_VAR 0 15
48705: PPUSH
48706: LD_VAR 0 8
48710: PPUSH
48711: LD_VAR 0 5
48715: PUSH
48716: LD_VAR 0 8
48720: ARRAY
48721: PPUSH
48722: CALL_OW 276
48726: GO 48698
48728: POP
48729: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48730: LD_ADDR_VAR 0 18
48734: PUSH
48735: LD_VAR 0 15
48739: PPUSH
48740: LD_VAR 0 2
48744: PPUSH
48745: LD_INT 1
48747: PPUSH
48748: CALL 47991 0 3
48752: ST_TO_ADDR
// InitHc ;
48753: CALL_OW 19
// InitUc ;
48757: CALL_OW 18
// uc_side := side ;
48761: LD_ADDR_OWVAR 20
48765: PUSH
48766: LD_VAR 0 16
48770: ST_TO_ADDR
// uc_nation := nation ;
48771: LD_ADDR_OWVAR 21
48775: PUSH
48776: LD_VAR 0 17
48780: ST_TO_ADDR
// if buildings then
48781: LD_VAR 0 18
48785: IFFALSE 50107
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48787: LD_ADDR_VAR 0 19
48791: PUSH
48792: LD_VAR 0 18
48796: PPUSH
48797: LD_INT 2
48799: PUSH
48800: LD_INT 30
48802: PUSH
48803: LD_INT 29
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 30
48812: PUSH
48813: LD_INT 30
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: LIST
48824: PPUSH
48825: CALL_OW 72
48829: ST_TO_ADDR
// if tmp then
48830: LD_VAR 0 19
48834: IFFALSE 48882
// for i in tmp do
48836: LD_ADDR_VAR 0 8
48840: PUSH
48841: LD_VAR 0 19
48845: PUSH
48846: FOR_IN
48847: IFFALSE 48880
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48849: LD_VAR 0 8
48853: PPUSH
48854: CALL_OW 250
48858: PPUSH
48859: LD_VAR 0 8
48863: PPUSH
48864: CALL_OW 251
48868: PPUSH
48869: LD_VAR 0 16
48873: PPUSH
48874: CALL_OW 441
48878: GO 48846
48880: POP
48881: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48882: LD_VAR 0 18
48886: PPUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 30
48892: PUSH
48893: LD_INT 32
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 30
48902: PUSH
48903: LD_INT 33
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: LIST
48914: PPUSH
48915: CALL_OW 72
48919: IFFALSE 49007
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48921: LD_ADDR_VAR 0 8
48925: PUSH
48926: LD_VAR 0 18
48930: PPUSH
48931: LD_INT 2
48933: PUSH
48934: LD_INT 30
48936: PUSH
48937: LD_INT 32
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 30
48946: PUSH
48947: LD_INT 33
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: LIST
48958: PPUSH
48959: CALL_OW 72
48963: PUSH
48964: FOR_IN
48965: IFFALSE 49005
// begin if not GetBWeapon ( i ) then
48967: LD_VAR 0 8
48971: PPUSH
48972: CALL_OW 269
48976: NOT
48977: IFFALSE 49003
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48979: LD_VAR 0 8
48983: PPUSH
48984: LD_VAR 0 8
48988: PPUSH
48989: LD_VAR 0 2
48993: PPUSH
48994: CALL 50253 0 2
48998: PPUSH
48999: CALL_OW 431
// end ;
49003: GO 48964
49005: POP
49006: POP
// end ; for i = 1 to personel do
49007: LD_ADDR_VAR 0 8
49011: PUSH
49012: DOUBLE
49013: LD_INT 1
49015: DEC
49016: ST_TO_ADDR
49017: LD_VAR 0 6
49021: PUSH
49022: FOR_TO
49023: IFFALSE 50087
// begin if i > 4 then
49025: LD_VAR 0 8
49029: PUSH
49030: LD_INT 4
49032: GREATER
49033: IFFALSE 49037
// break ;
49035: GO 50087
// case i of 1 :
49037: LD_VAR 0 8
49041: PUSH
49042: LD_INT 1
49044: DOUBLE
49045: EQUAL
49046: IFTRUE 49050
49048: GO 49130
49050: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49051: LD_ADDR_VAR 0 12
49055: PUSH
49056: LD_VAR 0 18
49060: PPUSH
49061: LD_INT 22
49063: PUSH
49064: LD_VAR 0 16
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 58
49075: PUSH
49076: EMPTY
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: LD_INT 30
49084: PUSH
49085: LD_INT 32
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 30
49094: PUSH
49095: LD_INT 4
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 30
49104: PUSH
49105: LD_INT 5
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: LIST
49122: PPUSH
49123: CALL_OW 72
49127: ST_TO_ADDR
49128: GO 49352
49130: LD_INT 2
49132: DOUBLE
49133: EQUAL
49134: IFTRUE 49138
49136: GO 49200
49138: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49139: LD_ADDR_VAR 0 12
49143: PUSH
49144: LD_VAR 0 18
49148: PPUSH
49149: LD_INT 22
49151: PUSH
49152: LD_VAR 0 16
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: LD_INT 30
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 30
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: LIST
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PPUSH
49193: CALL_OW 72
49197: ST_TO_ADDR
49198: GO 49352
49200: LD_INT 3
49202: DOUBLE
49203: EQUAL
49204: IFTRUE 49208
49206: GO 49270
49208: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49209: LD_ADDR_VAR 0 12
49213: PUSH
49214: LD_VAR 0 18
49218: PPUSH
49219: LD_INT 22
49221: PUSH
49222: LD_VAR 0 16
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: LD_INT 30
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 30
49246: PUSH
49247: LD_INT 3
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: LIST
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PPUSH
49263: CALL_OW 72
49267: ST_TO_ADDR
49268: GO 49352
49270: LD_INT 4
49272: DOUBLE
49273: EQUAL
49274: IFTRUE 49278
49276: GO 49351
49278: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49279: LD_ADDR_VAR 0 12
49283: PUSH
49284: LD_VAR 0 18
49288: PPUSH
49289: LD_INT 22
49291: PUSH
49292: LD_VAR 0 16
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: LD_INT 30
49306: PUSH
49307: LD_INT 6
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 30
49316: PUSH
49317: LD_INT 7
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 30
49326: PUSH
49327: LD_INT 8
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PPUSH
49344: CALL_OW 72
49348: ST_TO_ADDR
49349: GO 49352
49351: POP
// if i = 1 then
49352: LD_VAR 0 8
49356: PUSH
49357: LD_INT 1
49359: EQUAL
49360: IFFALSE 49471
// begin tmp := [ ] ;
49362: LD_ADDR_VAR 0 19
49366: PUSH
49367: EMPTY
49368: ST_TO_ADDR
// for j in f do
49369: LD_ADDR_VAR 0 9
49373: PUSH
49374: LD_VAR 0 12
49378: PUSH
49379: FOR_IN
49380: IFFALSE 49453
// if GetBType ( j ) = b_bunker then
49382: LD_VAR 0 9
49386: PPUSH
49387: CALL_OW 266
49391: PUSH
49392: LD_INT 32
49394: EQUAL
49395: IFFALSE 49422
// tmp := Insert ( tmp , 1 , j ) else
49397: LD_ADDR_VAR 0 19
49401: PUSH
49402: LD_VAR 0 19
49406: PPUSH
49407: LD_INT 1
49409: PPUSH
49410: LD_VAR 0 9
49414: PPUSH
49415: CALL_OW 2
49419: ST_TO_ADDR
49420: GO 49451
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49422: LD_ADDR_VAR 0 19
49426: PUSH
49427: LD_VAR 0 19
49431: PPUSH
49432: LD_VAR 0 19
49436: PUSH
49437: LD_INT 1
49439: PLUS
49440: PPUSH
49441: LD_VAR 0 9
49445: PPUSH
49446: CALL_OW 2
49450: ST_TO_ADDR
49451: GO 49379
49453: POP
49454: POP
// if tmp then
49455: LD_VAR 0 19
49459: IFFALSE 49471
// f := tmp ;
49461: LD_ADDR_VAR 0 12
49465: PUSH
49466: LD_VAR 0 19
49470: ST_TO_ADDR
// end ; x := personel [ i ] ;
49471: LD_ADDR_VAR 0 13
49475: PUSH
49476: LD_VAR 0 6
49480: PUSH
49481: LD_VAR 0 8
49485: ARRAY
49486: ST_TO_ADDR
// if x = - 1 then
49487: LD_VAR 0 13
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: EQUAL
49496: IFFALSE 49705
// begin for j in f do
49498: LD_ADDR_VAR 0 9
49502: PUSH
49503: LD_VAR 0 12
49507: PUSH
49508: FOR_IN
49509: IFFALSE 49701
// repeat InitHc ;
49511: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49515: LD_VAR 0 9
49519: PPUSH
49520: CALL_OW 266
49524: PUSH
49525: LD_INT 5
49527: EQUAL
49528: IFFALSE 49598
// begin if UnitsInside ( j ) < 3 then
49530: LD_VAR 0 9
49534: PPUSH
49535: CALL_OW 313
49539: PUSH
49540: LD_INT 3
49542: LESS
49543: IFFALSE 49579
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49545: LD_INT 0
49547: PPUSH
49548: LD_INT 5
49550: PUSH
49551: LD_INT 8
49553: PUSH
49554: LD_INT 9
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: LIST
49561: PUSH
49562: LD_VAR 0 17
49566: ARRAY
49567: PPUSH
49568: LD_VAR 0 4
49572: PPUSH
49573: CALL_OW 380
49577: GO 49596
// PrepareHuman ( false , i , skill ) ;
49579: LD_INT 0
49581: PPUSH
49582: LD_VAR 0 8
49586: PPUSH
49587: LD_VAR 0 4
49591: PPUSH
49592: CALL_OW 380
// end else
49596: GO 49615
// PrepareHuman ( false , i , skill ) ;
49598: LD_INT 0
49600: PPUSH
49601: LD_VAR 0 8
49605: PPUSH
49606: LD_VAR 0 4
49610: PPUSH
49611: CALL_OW 380
// un := CreateHuman ;
49615: LD_ADDR_VAR 0 14
49619: PUSH
49620: CALL_OW 44
49624: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49625: LD_ADDR_VAR 0 7
49629: PUSH
49630: LD_VAR 0 7
49634: PPUSH
49635: LD_INT 1
49637: PPUSH
49638: LD_VAR 0 14
49642: PPUSH
49643: CALL_OW 2
49647: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49648: LD_VAR 0 14
49652: PPUSH
49653: LD_VAR 0 9
49657: PPUSH
49658: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49662: LD_VAR 0 9
49666: PPUSH
49667: CALL_OW 313
49671: PUSH
49672: LD_INT 6
49674: EQUAL
49675: PUSH
49676: LD_VAR 0 9
49680: PPUSH
49681: CALL_OW 266
49685: PUSH
49686: LD_INT 32
49688: PUSH
49689: LD_INT 31
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: IN
49696: OR
49697: IFFALSE 49511
49699: GO 49508
49701: POP
49702: POP
// end else
49703: GO 50085
// for j = 1 to x do
49705: LD_ADDR_VAR 0 9
49709: PUSH
49710: DOUBLE
49711: LD_INT 1
49713: DEC
49714: ST_TO_ADDR
49715: LD_VAR 0 13
49719: PUSH
49720: FOR_TO
49721: IFFALSE 50083
// begin InitHc ;
49723: CALL_OW 19
// if not f then
49727: LD_VAR 0 12
49731: NOT
49732: IFFALSE 49821
// begin PrepareHuman ( false , i , skill ) ;
49734: LD_INT 0
49736: PPUSH
49737: LD_VAR 0 8
49741: PPUSH
49742: LD_VAR 0 4
49746: PPUSH
49747: CALL_OW 380
// un := CreateHuman ;
49751: LD_ADDR_VAR 0 14
49755: PUSH
49756: CALL_OW 44
49760: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49761: LD_ADDR_VAR 0 7
49765: PUSH
49766: LD_VAR 0 7
49770: PPUSH
49771: LD_INT 1
49773: PPUSH
49774: LD_VAR 0 14
49778: PPUSH
49779: CALL_OW 2
49783: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49784: LD_VAR 0 14
49788: PPUSH
49789: LD_VAR 0 1
49793: PPUSH
49794: CALL_OW 250
49798: PPUSH
49799: LD_VAR 0 1
49803: PPUSH
49804: CALL_OW 251
49808: PPUSH
49809: LD_INT 10
49811: PPUSH
49812: LD_INT 0
49814: PPUSH
49815: CALL_OW 50
// continue ;
49819: GO 49720
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49821: LD_VAR 0 12
49825: PUSH
49826: LD_INT 1
49828: ARRAY
49829: PPUSH
49830: CALL_OW 313
49834: PUSH
49835: LD_VAR 0 12
49839: PUSH
49840: LD_INT 1
49842: ARRAY
49843: PPUSH
49844: CALL_OW 266
49848: PUSH
49849: LD_INT 32
49851: PUSH
49852: LD_INT 31
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: IN
49859: AND
49860: PUSH
49861: LD_VAR 0 12
49865: PUSH
49866: LD_INT 1
49868: ARRAY
49869: PPUSH
49870: CALL_OW 313
49874: PUSH
49875: LD_INT 6
49877: EQUAL
49878: OR
49879: IFFALSE 49899
// f := Delete ( f , 1 ) ;
49881: LD_ADDR_VAR 0 12
49885: PUSH
49886: LD_VAR 0 12
49890: PPUSH
49891: LD_INT 1
49893: PPUSH
49894: CALL_OW 3
49898: ST_TO_ADDR
// if not f then
49899: LD_VAR 0 12
49903: NOT
49904: IFFALSE 49922
// begin x := x + 2 ;
49906: LD_ADDR_VAR 0 13
49910: PUSH
49911: LD_VAR 0 13
49915: PUSH
49916: LD_INT 2
49918: PLUS
49919: ST_TO_ADDR
// continue ;
49920: GO 49720
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49922: LD_VAR 0 12
49926: PUSH
49927: LD_INT 1
49929: ARRAY
49930: PPUSH
49931: CALL_OW 266
49935: PUSH
49936: LD_INT 5
49938: EQUAL
49939: IFFALSE 50013
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49941: LD_VAR 0 12
49945: PUSH
49946: LD_INT 1
49948: ARRAY
49949: PPUSH
49950: CALL_OW 313
49954: PUSH
49955: LD_INT 3
49957: LESS
49958: IFFALSE 49994
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49960: LD_INT 0
49962: PPUSH
49963: LD_INT 5
49965: PUSH
49966: LD_INT 8
49968: PUSH
49969: LD_INT 9
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: LIST
49976: PUSH
49977: LD_VAR 0 17
49981: ARRAY
49982: PPUSH
49983: LD_VAR 0 4
49987: PPUSH
49988: CALL_OW 380
49992: GO 50011
// PrepareHuman ( false , i , skill ) ;
49994: LD_INT 0
49996: PPUSH
49997: LD_VAR 0 8
50001: PPUSH
50002: LD_VAR 0 4
50006: PPUSH
50007: CALL_OW 380
// end else
50011: GO 50030
// PrepareHuman ( false , i , skill ) ;
50013: LD_INT 0
50015: PPUSH
50016: LD_VAR 0 8
50020: PPUSH
50021: LD_VAR 0 4
50025: PPUSH
50026: CALL_OW 380
// un := CreateHuman ;
50030: LD_ADDR_VAR 0 14
50034: PUSH
50035: CALL_OW 44
50039: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50040: LD_ADDR_VAR 0 7
50044: PUSH
50045: LD_VAR 0 7
50049: PPUSH
50050: LD_INT 1
50052: PPUSH
50053: LD_VAR 0 14
50057: PPUSH
50058: CALL_OW 2
50062: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50063: LD_VAR 0 14
50067: PPUSH
50068: LD_VAR 0 12
50072: PUSH
50073: LD_INT 1
50075: ARRAY
50076: PPUSH
50077: CALL_OW 52
// end ;
50081: GO 49720
50083: POP
50084: POP
// end ;
50085: GO 49022
50087: POP
50088: POP
// result := result ^ buildings ;
50089: LD_ADDR_VAR 0 7
50093: PUSH
50094: LD_VAR 0 7
50098: PUSH
50099: LD_VAR 0 18
50103: ADD
50104: ST_TO_ADDR
// end else
50105: GO 50248
// begin for i = 1 to personel do
50107: LD_ADDR_VAR 0 8
50111: PUSH
50112: DOUBLE
50113: LD_INT 1
50115: DEC
50116: ST_TO_ADDR
50117: LD_VAR 0 6
50121: PUSH
50122: FOR_TO
50123: IFFALSE 50246
// begin if i > 4 then
50125: LD_VAR 0 8
50129: PUSH
50130: LD_INT 4
50132: GREATER
50133: IFFALSE 50137
// break ;
50135: GO 50246
// x := personel [ i ] ;
50137: LD_ADDR_VAR 0 13
50141: PUSH
50142: LD_VAR 0 6
50146: PUSH
50147: LD_VAR 0 8
50151: ARRAY
50152: ST_TO_ADDR
// if x = - 1 then
50153: LD_VAR 0 13
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: EQUAL
50162: IFFALSE 50166
// continue ;
50164: GO 50122
// PrepareHuman ( false , i , skill ) ;
50166: LD_INT 0
50168: PPUSH
50169: LD_VAR 0 8
50173: PPUSH
50174: LD_VAR 0 4
50178: PPUSH
50179: CALL_OW 380
// un := CreateHuman ;
50183: LD_ADDR_VAR 0 14
50187: PUSH
50188: CALL_OW 44
50192: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50193: LD_VAR 0 14
50197: PPUSH
50198: LD_VAR 0 1
50202: PPUSH
50203: CALL_OW 250
50207: PPUSH
50208: LD_VAR 0 1
50212: PPUSH
50213: CALL_OW 251
50217: PPUSH
50218: LD_INT 10
50220: PPUSH
50221: LD_INT 0
50223: PPUSH
50224: CALL_OW 50
// result := result ^ un ;
50228: LD_ADDR_VAR 0 7
50232: PUSH
50233: LD_VAR 0 7
50237: PUSH
50238: LD_VAR 0 14
50242: ADD
50243: ST_TO_ADDR
// end ;
50244: GO 50122
50246: POP
50247: POP
// end ; end ;
50248: LD_VAR 0 7
50252: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50253: LD_INT 0
50255: PPUSH
50256: PPUSH
50257: PPUSH
50258: PPUSH
50259: PPUSH
50260: PPUSH
50261: PPUSH
50262: PPUSH
50263: PPUSH
50264: PPUSH
50265: PPUSH
50266: PPUSH
50267: PPUSH
50268: PPUSH
50269: PPUSH
50270: PPUSH
// result := false ;
50271: LD_ADDR_VAR 0 3
50275: PUSH
50276: LD_INT 0
50278: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50279: LD_VAR 0 1
50283: NOT
50284: PUSH
50285: LD_VAR 0 1
50289: PPUSH
50290: CALL_OW 266
50294: PUSH
50295: LD_INT 32
50297: PUSH
50298: LD_INT 33
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: IN
50305: NOT
50306: OR
50307: IFFALSE 50311
// exit ;
50309: GO 51420
// nat := GetNation ( tower ) ;
50311: LD_ADDR_VAR 0 12
50315: PUSH
50316: LD_VAR 0 1
50320: PPUSH
50321: CALL_OW 248
50325: ST_TO_ADDR
// side := GetSide ( tower ) ;
50326: LD_ADDR_VAR 0 16
50330: PUSH
50331: LD_VAR 0 1
50335: PPUSH
50336: CALL_OW 255
50340: ST_TO_ADDR
// x := GetX ( tower ) ;
50341: LD_ADDR_VAR 0 10
50345: PUSH
50346: LD_VAR 0 1
50350: PPUSH
50351: CALL_OW 250
50355: ST_TO_ADDR
// y := GetY ( tower ) ;
50356: LD_ADDR_VAR 0 11
50360: PUSH
50361: LD_VAR 0 1
50365: PPUSH
50366: CALL_OW 251
50370: ST_TO_ADDR
// if not x or not y then
50371: LD_VAR 0 10
50375: NOT
50376: PUSH
50377: LD_VAR 0 11
50381: NOT
50382: OR
50383: IFFALSE 50387
// exit ;
50385: GO 51420
// weapon := 0 ;
50387: LD_ADDR_VAR 0 18
50391: PUSH
50392: LD_INT 0
50394: ST_TO_ADDR
// fac_list := [ ] ;
50395: LD_ADDR_VAR 0 17
50399: PUSH
50400: EMPTY
50401: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50402: LD_ADDR_VAR 0 6
50406: PUSH
50407: LD_VAR 0 1
50411: PPUSH
50412: CALL_OW 274
50416: PPUSH
50417: LD_VAR 0 2
50421: PPUSH
50422: LD_INT 0
50424: PPUSH
50425: CALL 47991 0 3
50429: PPUSH
50430: LD_INT 30
50432: PUSH
50433: LD_INT 3
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PPUSH
50440: CALL_OW 72
50444: ST_TO_ADDR
// if not factories then
50445: LD_VAR 0 6
50449: NOT
50450: IFFALSE 50454
// exit ;
50452: GO 51420
// for i in factories do
50454: LD_ADDR_VAR 0 8
50458: PUSH
50459: LD_VAR 0 6
50463: PUSH
50464: FOR_IN
50465: IFFALSE 50490
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50467: LD_ADDR_VAR 0 17
50471: PUSH
50472: LD_VAR 0 17
50476: PUSH
50477: LD_VAR 0 8
50481: PPUSH
50482: CALL_OW 478
50486: UNION
50487: ST_TO_ADDR
50488: GO 50464
50490: POP
50491: POP
// if not fac_list then
50492: LD_VAR 0 17
50496: NOT
50497: IFFALSE 50501
// exit ;
50499: GO 51420
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50501: LD_ADDR_VAR 0 5
50505: PUSH
50506: LD_INT 4
50508: PUSH
50509: LD_INT 5
50511: PUSH
50512: LD_INT 9
50514: PUSH
50515: LD_INT 10
50517: PUSH
50518: LD_INT 6
50520: PUSH
50521: LD_INT 7
50523: PUSH
50524: LD_INT 11
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 27
50538: PUSH
50539: LD_INT 28
50541: PUSH
50542: LD_INT 26
50544: PUSH
50545: LD_INT 30
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 43
50556: PUSH
50557: LD_INT 44
50559: PUSH
50560: LD_INT 46
50562: PUSH
50563: LD_INT 45
50565: PUSH
50566: LD_INT 47
50568: PUSH
50569: LD_INT 49
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: PUSH
50585: LD_VAR 0 12
50589: ARRAY
50590: ST_TO_ADDR
// list := list isect fac_list ;
50591: LD_ADDR_VAR 0 5
50595: PUSH
50596: LD_VAR 0 5
50600: PUSH
50601: LD_VAR 0 17
50605: ISECT
50606: ST_TO_ADDR
// if not list then
50607: LD_VAR 0 5
50611: NOT
50612: IFFALSE 50616
// exit ;
50614: GO 51420
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50616: LD_VAR 0 12
50620: PUSH
50621: LD_INT 3
50623: EQUAL
50624: PUSH
50625: LD_INT 49
50627: PUSH
50628: LD_VAR 0 5
50632: IN
50633: AND
50634: PUSH
50635: LD_INT 31
50637: PPUSH
50638: LD_VAR 0 16
50642: PPUSH
50643: CALL_OW 321
50647: PUSH
50648: LD_INT 2
50650: EQUAL
50651: AND
50652: IFFALSE 50712
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50654: LD_INT 22
50656: PUSH
50657: LD_VAR 0 16
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 35
50668: PUSH
50669: LD_INT 49
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 91
50678: PUSH
50679: LD_VAR 0 1
50683: PUSH
50684: LD_INT 10
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: LIST
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: LIST
50696: PPUSH
50697: CALL_OW 69
50701: NOT
50702: IFFALSE 50712
// weapon := ru_time_lapser ;
50704: LD_ADDR_VAR 0 18
50708: PUSH
50709: LD_INT 49
50711: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50712: LD_VAR 0 12
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: IN
50727: PUSH
50728: LD_INT 11
50730: PUSH
50731: LD_VAR 0 5
50735: IN
50736: PUSH
50737: LD_INT 30
50739: PUSH
50740: LD_VAR 0 5
50744: IN
50745: OR
50746: AND
50747: PUSH
50748: LD_INT 6
50750: PPUSH
50751: LD_VAR 0 16
50755: PPUSH
50756: CALL_OW 321
50760: PUSH
50761: LD_INT 2
50763: EQUAL
50764: AND
50765: IFFALSE 50930
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50767: LD_INT 22
50769: PUSH
50770: LD_VAR 0 16
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: LD_INT 35
50784: PUSH
50785: LD_INT 11
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 35
50794: PUSH
50795: LD_INT 30
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 91
50809: PUSH
50810: LD_VAR 0 1
50814: PUSH
50815: LD_INT 18
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: LIST
50827: PPUSH
50828: CALL_OW 69
50832: NOT
50833: PUSH
50834: LD_INT 22
50836: PUSH
50837: LD_VAR 0 16
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 30
50851: PUSH
50852: LD_INT 32
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 30
50861: PUSH
50862: LD_INT 33
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 91
50876: PUSH
50877: LD_VAR 0 1
50881: PUSH
50882: LD_INT 12
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: LIST
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: LIST
50894: PUSH
50895: EMPTY
50896: LIST
50897: PPUSH
50898: CALL_OW 69
50902: PUSH
50903: LD_INT 2
50905: GREATER
50906: AND
50907: IFFALSE 50930
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50909: LD_ADDR_VAR 0 18
50913: PUSH
50914: LD_INT 11
50916: PUSH
50917: LD_INT 30
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_VAR 0 12
50928: ARRAY
50929: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50930: LD_VAR 0 18
50934: NOT
50935: PUSH
50936: LD_INT 40
50938: PPUSH
50939: LD_VAR 0 16
50943: PPUSH
50944: CALL_OW 321
50948: PUSH
50949: LD_INT 2
50951: EQUAL
50952: AND
50953: PUSH
50954: LD_INT 7
50956: PUSH
50957: LD_VAR 0 5
50961: IN
50962: PUSH
50963: LD_INT 28
50965: PUSH
50966: LD_VAR 0 5
50970: IN
50971: OR
50972: PUSH
50973: LD_INT 45
50975: PUSH
50976: LD_VAR 0 5
50980: IN
50981: OR
50982: AND
50983: IFFALSE 51237
// begin hex := GetHexInfo ( x , y ) ;
50985: LD_ADDR_VAR 0 4
50989: PUSH
50990: LD_VAR 0 10
50994: PPUSH
50995: LD_VAR 0 11
50999: PPUSH
51000: CALL_OW 546
51004: ST_TO_ADDR
// if hex [ 1 ] then
51005: LD_VAR 0 4
51009: PUSH
51010: LD_INT 1
51012: ARRAY
51013: IFFALSE 51017
// exit ;
51015: GO 51420
// height := hex [ 2 ] ;
51017: LD_ADDR_VAR 0 15
51021: PUSH
51022: LD_VAR 0 4
51026: PUSH
51027: LD_INT 2
51029: ARRAY
51030: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51031: LD_ADDR_VAR 0 14
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: LD_INT 3
51044: PUSH
51045: LD_INT 5
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: ST_TO_ADDR
// for i in tmp do
51054: LD_ADDR_VAR 0 8
51058: PUSH
51059: LD_VAR 0 14
51063: PUSH
51064: FOR_IN
51065: IFFALSE 51235
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51067: LD_ADDR_VAR 0 9
51071: PUSH
51072: LD_VAR 0 10
51076: PPUSH
51077: LD_VAR 0 8
51081: PPUSH
51082: LD_INT 5
51084: PPUSH
51085: CALL_OW 272
51089: PUSH
51090: LD_VAR 0 11
51094: PPUSH
51095: LD_VAR 0 8
51099: PPUSH
51100: LD_INT 5
51102: PPUSH
51103: CALL_OW 273
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51112: LD_VAR 0 9
51116: PUSH
51117: LD_INT 1
51119: ARRAY
51120: PPUSH
51121: LD_VAR 0 9
51125: PUSH
51126: LD_INT 2
51128: ARRAY
51129: PPUSH
51130: CALL_OW 488
51134: IFFALSE 51233
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51136: LD_ADDR_VAR 0 4
51140: PUSH
51141: LD_VAR 0 9
51145: PUSH
51146: LD_INT 1
51148: ARRAY
51149: PPUSH
51150: LD_VAR 0 9
51154: PUSH
51155: LD_INT 2
51157: ARRAY
51158: PPUSH
51159: CALL_OW 546
51163: ST_TO_ADDR
// if hex [ 1 ] then
51164: LD_VAR 0 4
51168: PUSH
51169: LD_INT 1
51171: ARRAY
51172: IFFALSE 51176
// continue ;
51174: GO 51064
// h := hex [ 2 ] ;
51176: LD_ADDR_VAR 0 13
51180: PUSH
51181: LD_VAR 0 4
51185: PUSH
51186: LD_INT 2
51188: ARRAY
51189: ST_TO_ADDR
// if h + 7 < height then
51190: LD_VAR 0 13
51194: PUSH
51195: LD_INT 7
51197: PLUS
51198: PUSH
51199: LD_VAR 0 15
51203: LESS
51204: IFFALSE 51233
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51206: LD_ADDR_VAR 0 18
51210: PUSH
51211: LD_INT 7
51213: PUSH
51214: LD_INT 28
51216: PUSH
51217: LD_INT 45
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: LIST
51224: PUSH
51225: LD_VAR 0 12
51229: ARRAY
51230: ST_TO_ADDR
// break ;
51231: GO 51235
// end ; end ; end ;
51233: GO 51064
51235: POP
51236: POP
// end ; if not weapon then
51237: LD_VAR 0 18
51241: NOT
51242: IFFALSE 51302
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51244: LD_ADDR_VAR 0 5
51248: PUSH
51249: LD_VAR 0 5
51253: PUSH
51254: LD_INT 11
51256: PUSH
51257: LD_INT 30
51259: PUSH
51260: LD_INT 49
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: LIST
51267: DIFF
51268: ST_TO_ADDR
// if not list then
51269: LD_VAR 0 5
51273: NOT
51274: IFFALSE 51278
// exit ;
51276: GO 51420
// weapon := list [ rand ( 1 , list ) ] ;
51278: LD_ADDR_VAR 0 18
51282: PUSH
51283: LD_VAR 0 5
51287: PUSH
51288: LD_INT 1
51290: PPUSH
51291: LD_VAR 0 5
51295: PPUSH
51296: CALL_OW 12
51300: ARRAY
51301: ST_TO_ADDR
// end ; if weapon then
51302: LD_VAR 0 18
51306: IFFALSE 51420
// begin tmp := CostOfWeapon ( weapon ) ;
51308: LD_ADDR_VAR 0 14
51312: PUSH
51313: LD_VAR 0 18
51317: PPUSH
51318: CALL_OW 451
51322: ST_TO_ADDR
// j := GetBase ( tower ) ;
51323: LD_ADDR_VAR 0 9
51327: PUSH
51328: LD_VAR 0 1
51332: PPUSH
51333: CALL_OW 274
51337: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51338: LD_VAR 0 9
51342: PPUSH
51343: LD_INT 1
51345: PPUSH
51346: CALL_OW 275
51350: PUSH
51351: LD_VAR 0 14
51355: PUSH
51356: LD_INT 1
51358: ARRAY
51359: GREATEREQUAL
51360: PUSH
51361: LD_VAR 0 9
51365: PPUSH
51366: LD_INT 2
51368: PPUSH
51369: CALL_OW 275
51373: PUSH
51374: LD_VAR 0 14
51378: PUSH
51379: LD_INT 2
51381: ARRAY
51382: GREATEREQUAL
51383: AND
51384: PUSH
51385: LD_VAR 0 9
51389: PPUSH
51390: LD_INT 3
51392: PPUSH
51393: CALL_OW 275
51397: PUSH
51398: LD_VAR 0 14
51402: PUSH
51403: LD_INT 3
51405: ARRAY
51406: GREATEREQUAL
51407: AND
51408: IFFALSE 51420
// result := weapon ;
51410: LD_ADDR_VAR 0 3
51414: PUSH
51415: LD_VAR 0 18
51419: ST_TO_ADDR
// end ; end ;
51420: LD_VAR 0 3
51424: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51425: LD_INT 0
51427: PPUSH
51428: PPUSH
// result := true ;
51429: LD_ADDR_VAR 0 3
51433: PUSH
51434: LD_INT 1
51436: ST_TO_ADDR
// if array1 = array2 then
51437: LD_VAR 0 1
51441: PUSH
51442: LD_VAR 0 2
51446: EQUAL
51447: IFFALSE 51507
// begin for i = 1 to array1 do
51449: LD_ADDR_VAR 0 4
51453: PUSH
51454: DOUBLE
51455: LD_INT 1
51457: DEC
51458: ST_TO_ADDR
51459: LD_VAR 0 1
51463: PUSH
51464: FOR_TO
51465: IFFALSE 51503
// if array1 [ i ] <> array2 [ i ] then
51467: LD_VAR 0 1
51471: PUSH
51472: LD_VAR 0 4
51476: ARRAY
51477: PUSH
51478: LD_VAR 0 2
51482: PUSH
51483: LD_VAR 0 4
51487: ARRAY
51488: NONEQUAL
51489: IFFALSE 51501
// begin result := false ;
51491: LD_ADDR_VAR 0 3
51495: PUSH
51496: LD_INT 0
51498: ST_TO_ADDR
// break ;
51499: GO 51503
// end ;
51501: GO 51464
51503: POP
51504: POP
// end else
51505: GO 51515
// result := false ;
51507: LD_ADDR_VAR 0 3
51511: PUSH
51512: LD_INT 0
51514: ST_TO_ADDR
// end ;
51515: LD_VAR 0 3
51519: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51520: LD_INT 0
51522: PPUSH
51523: PPUSH
// if not array1 or not array2 then
51524: LD_VAR 0 1
51528: NOT
51529: PUSH
51530: LD_VAR 0 2
51534: NOT
51535: OR
51536: IFFALSE 51540
// exit ;
51538: GO 51604
// result := true ;
51540: LD_ADDR_VAR 0 3
51544: PUSH
51545: LD_INT 1
51547: ST_TO_ADDR
// for i = 1 to array1 do
51548: LD_ADDR_VAR 0 4
51552: PUSH
51553: DOUBLE
51554: LD_INT 1
51556: DEC
51557: ST_TO_ADDR
51558: LD_VAR 0 1
51562: PUSH
51563: FOR_TO
51564: IFFALSE 51602
// if array1 [ i ] <> array2 [ i ] then
51566: LD_VAR 0 1
51570: PUSH
51571: LD_VAR 0 4
51575: ARRAY
51576: PUSH
51577: LD_VAR 0 2
51581: PUSH
51582: LD_VAR 0 4
51586: ARRAY
51587: NONEQUAL
51588: IFFALSE 51600
// begin result := false ;
51590: LD_ADDR_VAR 0 3
51594: PUSH
51595: LD_INT 0
51597: ST_TO_ADDR
// break ;
51598: GO 51602
// end ;
51600: GO 51563
51602: POP
51603: POP
// end ;
51604: LD_VAR 0 3
51608: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51609: LD_INT 0
51611: PPUSH
51612: PPUSH
51613: PPUSH
// pom := GetBase ( fac ) ;
51614: LD_ADDR_VAR 0 5
51618: PUSH
51619: LD_VAR 0 1
51623: PPUSH
51624: CALL_OW 274
51628: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51629: LD_ADDR_VAR 0 4
51633: PUSH
51634: LD_VAR 0 2
51638: PUSH
51639: LD_INT 1
51641: ARRAY
51642: PPUSH
51643: LD_VAR 0 2
51647: PUSH
51648: LD_INT 2
51650: ARRAY
51651: PPUSH
51652: LD_VAR 0 2
51656: PUSH
51657: LD_INT 3
51659: ARRAY
51660: PPUSH
51661: LD_VAR 0 2
51665: PUSH
51666: LD_INT 4
51668: ARRAY
51669: PPUSH
51670: CALL_OW 449
51674: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51675: LD_ADDR_VAR 0 3
51679: PUSH
51680: LD_VAR 0 5
51684: PPUSH
51685: LD_INT 1
51687: PPUSH
51688: CALL_OW 275
51692: PUSH
51693: LD_VAR 0 4
51697: PUSH
51698: LD_INT 1
51700: ARRAY
51701: GREATEREQUAL
51702: PUSH
51703: LD_VAR 0 5
51707: PPUSH
51708: LD_INT 2
51710: PPUSH
51711: CALL_OW 275
51715: PUSH
51716: LD_VAR 0 4
51720: PUSH
51721: LD_INT 2
51723: ARRAY
51724: GREATEREQUAL
51725: AND
51726: PUSH
51727: LD_VAR 0 5
51731: PPUSH
51732: LD_INT 3
51734: PPUSH
51735: CALL_OW 275
51739: PUSH
51740: LD_VAR 0 4
51744: PUSH
51745: LD_INT 3
51747: ARRAY
51748: GREATEREQUAL
51749: AND
51750: ST_TO_ADDR
// end ;
51751: LD_VAR 0 3
51755: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51756: LD_INT 0
51758: PPUSH
51759: PPUSH
51760: PPUSH
51761: PPUSH
// pom := GetBase ( building ) ;
51762: LD_ADDR_VAR 0 3
51766: PUSH
51767: LD_VAR 0 1
51771: PPUSH
51772: CALL_OW 274
51776: ST_TO_ADDR
// if not pom then
51777: LD_VAR 0 3
51781: NOT
51782: IFFALSE 51786
// exit ;
51784: GO 51956
// btype := GetBType ( building ) ;
51786: LD_ADDR_VAR 0 5
51790: PUSH
51791: LD_VAR 0 1
51795: PPUSH
51796: CALL_OW 266
51800: ST_TO_ADDR
// if btype = b_armoury then
51801: LD_VAR 0 5
51805: PUSH
51806: LD_INT 4
51808: EQUAL
51809: IFFALSE 51819
// btype := b_barracks ;
51811: LD_ADDR_VAR 0 5
51815: PUSH
51816: LD_INT 5
51818: ST_TO_ADDR
// if btype = b_depot then
51819: LD_VAR 0 5
51823: PUSH
51824: LD_INT 0
51826: EQUAL
51827: IFFALSE 51837
// btype := b_warehouse ;
51829: LD_ADDR_VAR 0 5
51833: PUSH
51834: LD_INT 1
51836: ST_TO_ADDR
// if btype = b_workshop then
51837: LD_VAR 0 5
51841: PUSH
51842: LD_INT 2
51844: EQUAL
51845: IFFALSE 51855
// btype := b_factory ;
51847: LD_ADDR_VAR 0 5
51851: PUSH
51852: LD_INT 3
51854: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51855: LD_ADDR_VAR 0 4
51859: PUSH
51860: LD_VAR 0 5
51864: PPUSH
51865: LD_VAR 0 1
51869: PPUSH
51870: CALL_OW 248
51874: PPUSH
51875: CALL_OW 450
51879: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51880: LD_ADDR_VAR 0 2
51884: PUSH
51885: LD_VAR 0 3
51889: PPUSH
51890: LD_INT 1
51892: PPUSH
51893: CALL_OW 275
51897: PUSH
51898: LD_VAR 0 4
51902: PUSH
51903: LD_INT 1
51905: ARRAY
51906: GREATEREQUAL
51907: PUSH
51908: LD_VAR 0 3
51912: PPUSH
51913: LD_INT 2
51915: PPUSH
51916: CALL_OW 275
51920: PUSH
51921: LD_VAR 0 4
51925: PUSH
51926: LD_INT 2
51928: ARRAY
51929: GREATEREQUAL
51930: AND
51931: PUSH
51932: LD_VAR 0 3
51936: PPUSH
51937: LD_INT 3
51939: PPUSH
51940: CALL_OW 275
51944: PUSH
51945: LD_VAR 0 4
51949: PUSH
51950: LD_INT 3
51952: ARRAY
51953: GREATEREQUAL
51954: AND
51955: ST_TO_ADDR
// end ;
51956: LD_VAR 0 2
51960: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51961: LD_INT 0
51963: PPUSH
51964: PPUSH
51965: PPUSH
// pom := GetBase ( building ) ;
51966: LD_ADDR_VAR 0 4
51970: PUSH
51971: LD_VAR 0 1
51975: PPUSH
51976: CALL_OW 274
51980: ST_TO_ADDR
// if not pom then
51981: LD_VAR 0 4
51985: NOT
51986: IFFALSE 51990
// exit ;
51988: GO 52091
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51990: LD_ADDR_VAR 0 5
51994: PUSH
51995: LD_VAR 0 2
51999: PPUSH
52000: LD_VAR 0 1
52004: PPUSH
52005: CALL_OW 248
52009: PPUSH
52010: CALL_OW 450
52014: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52015: LD_ADDR_VAR 0 3
52019: PUSH
52020: LD_VAR 0 4
52024: PPUSH
52025: LD_INT 1
52027: PPUSH
52028: CALL_OW 275
52032: PUSH
52033: LD_VAR 0 5
52037: PUSH
52038: LD_INT 1
52040: ARRAY
52041: GREATEREQUAL
52042: PUSH
52043: LD_VAR 0 4
52047: PPUSH
52048: LD_INT 2
52050: PPUSH
52051: CALL_OW 275
52055: PUSH
52056: LD_VAR 0 5
52060: PUSH
52061: LD_INT 2
52063: ARRAY
52064: GREATEREQUAL
52065: AND
52066: PUSH
52067: LD_VAR 0 4
52071: PPUSH
52072: LD_INT 3
52074: PPUSH
52075: CALL_OW 275
52079: PUSH
52080: LD_VAR 0 5
52084: PUSH
52085: LD_INT 3
52087: ARRAY
52088: GREATEREQUAL
52089: AND
52090: ST_TO_ADDR
// end ;
52091: LD_VAR 0 3
52095: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52096: LD_INT 0
52098: PPUSH
52099: PPUSH
52100: PPUSH
52101: PPUSH
52102: PPUSH
52103: PPUSH
52104: PPUSH
52105: PPUSH
52106: PPUSH
52107: PPUSH
52108: PPUSH
// result := false ;
52109: LD_ADDR_VAR 0 8
52113: PUSH
52114: LD_INT 0
52116: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52117: LD_VAR 0 5
52121: NOT
52122: PUSH
52123: LD_VAR 0 1
52127: NOT
52128: OR
52129: PUSH
52130: LD_VAR 0 2
52134: NOT
52135: OR
52136: PUSH
52137: LD_VAR 0 3
52141: NOT
52142: OR
52143: IFFALSE 52147
// exit ;
52145: GO 52961
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52147: LD_ADDR_VAR 0 14
52151: PUSH
52152: LD_VAR 0 1
52156: PPUSH
52157: LD_VAR 0 2
52161: PPUSH
52162: LD_VAR 0 3
52166: PPUSH
52167: LD_VAR 0 4
52171: PPUSH
52172: LD_VAR 0 5
52176: PUSH
52177: LD_INT 1
52179: ARRAY
52180: PPUSH
52181: CALL_OW 248
52185: PPUSH
52186: LD_INT 0
52188: PPUSH
52189: CALL 54214 0 6
52193: ST_TO_ADDR
// if not hexes then
52194: LD_VAR 0 14
52198: NOT
52199: IFFALSE 52203
// exit ;
52201: GO 52961
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52203: LD_ADDR_VAR 0 17
52207: PUSH
52208: LD_VAR 0 5
52212: PPUSH
52213: LD_INT 22
52215: PUSH
52216: LD_VAR 0 13
52220: PPUSH
52221: CALL_OW 255
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: LD_INT 30
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 30
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: LIST
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PPUSH
52262: CALL_OW 72
52266: ST_TO_ADDR
// for i = 1 to hexes do
52267: LD_ADDR_VAR 0 9
52271: PUSH
52272: DOUBLE
52273: LD_INT 1
52275: DEC
52276: ST_TO_ADDR
52277: LD_VAR 0 14
52281: PUSH
52282: FOR_TO
52283: IFFALSE 52959
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52285: LD_ADDR_VAR 0 13
52289: PUSH
52290: LD_VAR 0 14
52294: PUSH
52295: LD_VAR 0 9
52299: ARRAY
52300: PUSH
52301: LD_INT 1
52303: ARRAY
52304: PPUSH
52305: LD_VAR 0 14
52309: PUSH
52310: LD_VAR 0 9
52314: ARRAY
52315: PUSH
52316: LD_INT 2
52318: ARRAY
52319: PPUSH
52320: CALL_OW 428
52324: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52325: LD_VAR 0 14
52329: PUSH
52330: LD_VAR 0 9
52334: ARRAY
52335: PUSH
52336: LD_INT 1
52338: ARRAY
52339: PPUSH
52340: LD_VAR 0 14
52344: PUSH
52345: LD_VAR 0 9
52349: ARRAY
52350: PUSH
52351: LD_INT 2
52353: ARRAY
52354: PPUSH
52355: CALL_OW 351
52359: PUSH
52360: LD_VAR 0 14
52364: PUSH
52365: LD_VAR 0 9
52369: ARRAY
52370: PUSH
52371: LD_INT 1
52373: ARRAY
52374: PPUSH
52375: LD_VAR 0 14
52379: PUSH
52380: LD_VAR 0 9
52384: ARRAY
52385: PUSH
52386: LD_INT 2
52388: ARRAY
52389: PPUSH
52390: CALL_OW 488
52394: NOT
52395: OR
52396: PUSH
52397: LD_VAR 0 13
52401: PPUSH
52402: CALL_OW 247
52406: PUSH
52407: LD_INT 3
52409: EQUAL
52410: OR
52411: IFFALSE 52417
// exit ;
52413: POP
52414: POP
52415: GO 52961
// if not tmp then
52417: LD_VAR 0 13
52421: NOT
52422: IFFALSE 52426
// continue ;
52424: GO 52282
// result := true ;
52426: LD_ADDR_VAR 0 8
52430: PUSH
52431: LD_INT 1
52433: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52434: LD_VAR 0 6
52438: PUSH
52439: LD_VAR 0 13
52443: PPUSH
52444: CALL_OW 247
52448: PUSH
52449: LD_INT 2
52451: EQUAL
52452: AND
52453: PUSH
52454: LD_VAR 0 13
52458: PPUSH
52459: CALL_OW 263
52463: PUSH
52464: LD_INT 1
52466: EQUAL
52467: AND
52468: IFFALSE 52632
// begin if IsDrivenBy ( tmp ) then
52470: LD_VAR 0 13
52474: PPUSH
52475: CALL_OW 311
52479: IFFALSE 52483
// continue ;
52481: GO 52282
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52483: LD_VAR 0 6
52487: PPUSH
52488: LD_INT 3
52490: PUSH
52491: LD_INT 60
52493: PUSH
52494: EMPTY
52495: LIST
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 3
52503: PUSH
52504: LD_INT 55
52506: PUSH
52507: EMPTY
52508: LIST
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PPUSH
52518: CALL_OW 72
52522: IFFALSE 52630
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52524: LD_ADDR_VAR 0 18
52528: PUSH
52529: LD_VAR 0 6
52533: PPUSH
52534: LD_INT 3
52536: PUSH
52537: LD_INT 60
52539: PUSH
52540: EMPTY
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: LD_INT 55
52552: PUSH
52553: EMPTY
52554: LIST
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PPUSH
52564: CALL_OW 72
52568: PUSH
52569: LD_INT 1
52571: ARRAY
52572: ST_TO_ADDR
// if IsInUnit ( driver ) then
52573: LD_VAR 0 18
52577: PPUSH
52578: CALL_OW 310
52582: IFFALSE 52593
// ComExit ( driver ) ;
52584: LD_VAR 0 18
52588: PPUSH
52589: CALL 77993 0 1
// AddComEnterUnit ( driver , tmp ) ;
52593: LD_VAR 0 18
52597: PPUSH
52598: LD_VAR 0 13
52602: PPUSH
52603: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52607: LD_VAR 0 18
52611: PPUSH
52612: LD_VAR 0 7
52616: PPUSH
52617: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52621: LD_VAR 0 18
52625: PPUSH
52626: CALL_OW 181
// end ; continue ;
52630: GO 52282
// end ; if not cleaners or not tmp in cleaners then
52632: LD_VAR 0 6
52636: NOT
52637: PUSH
52638: LD_VAR 0 13
52642: PUSH
52643: LD_VAR 0 6
52647: IN
52648: NOT
52649: OR
52650: IFFALSE 52957
// begin if dep then
52652: LD_VAR 0 17
52656: IFFALSE 52792
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52658: LD_ADDR_VAR 0 16
52662: PUSH
52663: LD_VAR 0 17
52667: PUSH
52668: LD_INT 1
52670: ARRAY
52671: PPUSH
52672: CALL_OW 250
52676: PPUSH
52677: LD_VAR 0 17
52681: PUSH
52682: LD_INT 1
52684: ARRAY
52685: PPUSH
52686: CALL_OW 254
52690: PPUSH
52691: LD_INT 5
52693: PPUSH
52694: CALL_OW 272
52698: PUSH
52699: LD_VAR 0 17
52703: PUSH
52704: LD_INT 1
52706: ARRAY
52707: PPUSH
52708: CALL_OW 251
52712: PPUSH
52713: LD_VAR 0 17
52717: PUSH
52718: LD_INT 1
52720: ARRAY
52721: PPUSH
52722: CALL_OW 254
52726: PPUSH
52727: LD_INT 5
52729: PPUSH
52730: CALL_OW 273
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52739: LD_VAR 0 16
52743: PUSH
52744: LD_INT 1
52746: ARRAY
52747: PPUSH
52748: LD_VAR 0 16
52752: PUSH
52753: LD_INT 2
52755: ARRAY
52756: PPUSH
52757: CALL_OW 488
52761: IFFALSE 52792
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52763: LD_VAR 0 13
52767: PPUSH
52768: LD_VAR 0 16
52772: PUSH
52773: LD_INT 1
52775: ARRAY
52776: PPUSH
52777: LD_VAR 0 16
52781: PUSH
52782: LD_INT 2
52784: ARRAY
52785: PPUSH
52786: CALL_OW 111
// continue ;
52790: GO 52282
// end ; end ; r := GetDir ( tmp ) ;
52792: LD_ADDR_VAR 0 15
52796: PUSH
52797: LD_VAR 0 13
52801: PPUSH
52802: CALL_OW 254
52806: ST_TO_ADDR
// if r = 5 then
52807: LD_VAR 0 15
52811: PUSH
52812: LD_INT 5
52814: EQUAL
52815: IFFALSE 52825
// r := 0 ;
52817: LD_ADDR_VAR 0 15
52821: PUSH
52822: LD_INT 0
52824: ST_TO_ADDR
// for j = r to 5 do
52825: LD_ADDR_VAR 0 10
52829: PUSH
52830: DOUBLE
52831: LD_VAR 0 15
52835: DEC
52836: ST_TO_ADDR
52837: LD_INT 5
52839: PUSH
52840: FOR_TO
52841: IFFALSE 52955
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52843: LD_ADDR_VAR 0 11
52847: PUSH
52848: LD_VAR 0 13
52852: PPUSH
52853: CALL_OW 250
52857: PPUSH
52858: LD_VAR 0 10
52862: PPUSH
52863: LD_INT 2
52865: PPUSH
52866: CALL_OW 272
52870: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52871: LD_ADDR_VAR 0 12
52875: PUSH
52876: LD_VAR 0 13
52880: PPUSH
52881: CALL_OW 251
52885: PPUSH
52886: LD_VAR 0 10
52890: PPUSH
52891: LD_INT 2
52893: PPUSH
52894: CALL_OW 273
52898: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52899: LD_VAR 0 11
52903: PPUSH
52904: LD_VAR 0 12
52908: PPUSH
52909: CALL_OW 488
52913: PUSH
52914: LD_VAR 0 11
52918: PPUSH
52919: LD_VAR 0 12
52923: PPUSH
52924: CALL_OW 428
52928: NOT
52929: AND
52930: IFFALSE 52953
// begin ComMoveXY ( tmp , _x , _y ) ;
52932: LD_VAR 0 13
52936: PPUSH
52937: LD_VAR 0 11
52941: PPUSH
52942: LD_VAR 0 12
52946: PPUSH
52947: CALL_OW 111
// break ;
52951: GO 52955
// end ; end ;
52953: GO 52840
52955: POP
52956: POP
// end ; end ;
52957: GO 52282
52959: POP
52960: POP
// end ;
52961: LD_VAR 0 8
52965: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52966: LD_INT 0
52968: PPUSH
// result := true ;
52969: LD_ADDR_VAR 0 3
52973: PUSH
52974: LD_INT 1
52976: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52977: LD_VAR 0 2
52981: PUSH
52982: LD_INT 24
52984: DOUBLE
52985: EQUAL
52986: IFTRUE 52996
52988: LD_INT 33
52990: DOUBLE
52991: EQUAL
52992: IFTRUE 52996
52994: GO 53021
52996: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52997: LD_ADDR_VAR 0 3
53001: PUSH
53002: LD_INT 32
53004: PPUSH
53005: LD_VAR 0 1
53009: PPUSH
53010: CALL_OW 321
53014: PUSH
53015: LD_INT 2
53017: EQUAL
53018: ST_TO_ADDR
53019: GO 53337
53021: LD_INT 20
53023: DOUBLE
53024: EQUAL
53025: IFTRUE 53029
53027: GO 53054
53029: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53030: LD_ADDR_VAR 0 3
53034: PUSH
53035: LD_INT 6
53037: PPUSH
53038: LD_VAR 0 1
53042: PPUSH
53043: CALL_OW 321
53047: PUSH
53048: LD_INT 2
53050: EQUAL
53051: ST_TO_ADDR
53052: GO 53337
53054: LD_INT 22
53056: DOUBLE
53057: EQUAL
53058: IFTRUE 53068
53060: LD_INT 36
53062: DOUBLE
53063: EQUAL
53064: IFTRUE 53068
53066: GO 53093
53068: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53069: LD_ADDR_VAR 0 3
53073: PUSH
53074: LD_INT 15
53076: PPUSH
53077: LD_VAR 0 1
53081: PPUSH
53082: CALL_OW 321
53086: PUSH
53087: LD_INT 2
53089: EQUAL
53090: ST_TO_ADDR
53091: GO 53337
53093: LD_INT 30
53095: DOUBLE
53096: EQUAL
53097: IFTRUE 53101
53099: GO 53126
53101: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53102: LD_ADDR_VAR 0 3
53106: PUSH
53107: LD_INT 20
53109: PPUSH
53110: LD_VAR 0 1
53114: PPUSH
53115: CALL_OW 321
53119: PUSH
53120: LD_INT 2
53122: EQUAL
53123: ST_TO_ADDR
53124: GO 53337
53126: LD_INT 28
53128: DOUBLE
53129: EQUAL
53130: IFTRUE 53140
53132: LD_INT 21
53134: DOUBLE
53135: EQUAL
53136: IFTRUE 53140
53138: GO 53165
53140: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53141: LD_ADDR_VAR 0 3
53145: PUSH
53146: LD_INT 21
53148: PPUSH
53149: LD_VAR 0 1
53153: PPUSH
53154: CALL_OW 321
53158: PUSH
53159: LD_INT 2
53161: EQUAL
53162: ST_TO_ADDR
53163: GO 53337
53165: LD_INT 16
53167: DOUBLE
53168: EQUAL
53169: IFTRUE 53173
53171: GO 53198
53173: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53174: LD_ADDR_VAR 0 3
53178: PUSH
53179: LD_INT 84
53181: PPUSH
53182: LD_VAR 0 1
53186: PPUSH
53187: CALL_OW 321
53191: PUSH
53192: LD_INT 2
53194: EQUAL
53195: ST_TO_ADDR
53196: GO 53337
53198: LD_INT 19
53200: DOUBLE
53201: EQUAL
53202: IFTRUE 53212
53204: LD_INT 23
53206: DOUBLE
53207: EQUAL
53208: IFTRUE 53212
53210: GO 53237
53212: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53213: LD_ADDR_VAR 0 3
53217: PUSH
53218: LD_INT 83
53220: PPUSH
53221: LD_VAR 0 1
53225: PPUSH
53226: CALL_OW 321
53230: PUSH
53231: LD_INT 2
53233: EQUAL
53234: ST_TO_ADDR
53235: GO 53337
53237: LD_INT 17
53239: DOUBLE
53240: EQUAL
53241: IFTRUE 53245
53243: GO 53270
53245: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53246: LD_ADDR_VAR 0 3
53250: PUSH
53251: LD_INT 39
53253: PPUSH
53254: LD_VAR 0 1
53258: PPUSH
53259: CALL_OW 321
53263: PUSH
53264: LD_INT 2
53266: EQUAL
53267: ST_TO_ADDR
53268: GO 53337
53270: LD_INT 18
53272: DOUBLE
53273: EQUAL
53274: IFTRUE 53278
53276: GO 53303
53278: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53279: LD_ADDR_VAR 0 3
53283: PUSH
53284: LD_INT 40
53286: PPUSH
53287: LD_VAR 0 1
53291: PPUSH
53292: CALL_OW 321
53296: PUSH
53297: LD_INT 2
53299: EQUAL
53300: ST_TO_ADDR
53301: GO 53337
53303: LD_INT 27
53305: DOUBLE
53306: EQUAL
53307: IFTRUE 53311
53309: GO 53336
53311: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53312: LD_ADDR_VAR 0 3
53316: PUSH
53317: LD_INT 35
53319: PPUSH
53320: LD_VAR 0 1
53324: PPUSH
53325: CALL_OW 321
53329: PUSH
53330: LD_INT 2
53332: EQUAL
53333: ST_TO_ADDR
53334: GO 53337
53336: POP
// end ;
53337: LD_VAR 0 3
53341: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53342: LD_INT 0
53344: PPUSH
53345: PPUSH
53346: PPUSH
53347: PPUSH
53348: PPUSH
53349: PPUSH
53350: PPUSH
53351: PPUSH
53352: PPUSH
53353: PPUSH
53354: PPUSH
// result := false ;
53355: LD_ADDR_VAR 0 6
53359: PUSH
53360: LD_INT 0
53362: ST_TO_ADDR
// if btype = b_depot then
53363: LD_VAR 0 2
53367: PUSH
53368: LD_INT 0
53370: EQUAL
53371: IFFALSE 53383
// begin result := true ;
53373: LD_ADDR_VAR 0 6
53377: PUSH
53378: LD_INT 1
53380: ST_TO_ADDR
// exit ;
53381: GO 54209
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53383: LD_VAR 0 1
53387: NOT
53388: PUSH
53389: LD_VAR 0 1
53393: PPUSH
53394: CALL_OW 266
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: IN
53409: NOT
53410: OR
53411: PUSH
53412: LD_VAR 0 2
53416: NOT
53417: OR
53418: PUSH
53419: LD_VAR 0 5
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: LD_INT 3
53435: PUSH
53436: LD_INT 4
53438: PUSH
53439: LD_INT 5
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: IN
53450: NOT
53451: OR
53452: PUSH
53453: LD_VAR 0 3
53457: PPUSH
53458: LD_VAR 0 4
53462: PPUSH
53463: CALL_OW 488
53467: NOT
53468: OR
53469: IFFALSE 53473
// exit ;
53471: GO 54209
// side := GetSide ( depot ) ;
53473: LD_ADDR_VAR 0 9
53477: PUSH
53478: LD_VAR 0 1
53482: PPUSH
53483: CALL_OW 255
53487: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53488: LD_VAR 0 9
53492: PPUSH
53493: LD_VAR 0 2
53497: PPUSH
53498: CALL 52966 0 2
53502: NOT
53503: IFFALSE 53507
// exit ;
53505: GO 54209
// pom := GetBase ( depot ) ;
53507: LD_ADDR_VAR 0 10
53511: PUSH
53512: LD_VAR 0 1
53516: PPUSH
53517: CALL_OW 274
53521: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53522: LD_ADDR_VAR 0 11
53526: PUSH
53527: LD_VAR 0 2
53531: PPUSH
53532: LD_VAR 0 1
53536: PPUSH
53537: CALL_OW 248
53541: PPUSH
53542: CALL_OW 450
53546: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53547: LD_VAR 0 10
53551: PPUSH
53552: LD_INT 1
53554: PPUSH
53555: CALL_OW 275
53559: PUSH
53560: LD_VAR 0 11
53564: PUSH
53565: LD_INT 1
53567: ARRAY
53568: GREATEREQUAL
53569: PUSH
53570: LD_VAR 0 10
53574: PPUSH
53575: LD_INT 2
53577: PPUSH
53578: CALL_OW 275
53582: PUSH
53583: LD_VAR 0 11
53587: PUSH
53588: LD_INT 2
53590: ARRAY
53591: GREATEREQUAL
53592: AND
53593: PUSH
53594: LD_VAR 0 10
53598: PPUSH
53599: LD_INT 3
53601: PPUSH
53602: CALL_OW 275
53606: PUSH
53607: LD_VAR 0 11
53611: PUSH
53612: LD_INT 3
53614: ARRAY
53615: GREATEREQUAL
53616: AND
53617: NOT
53618: IFFALSE 53622
// exit ;
53620: GO 54209
// if GetBType ( depot ) = b_depot then
53622: LD_VAR 0 1
53626: PPUSH
53627: CALL_OW 266
53631: PUSH
53632: LD_INT 0
53634: EQUAL
53635: IFFALSE 53647
// dist := 28 else
53637: LD_ADDR_VAR 0 14
53641: PUSH
53642: LD_INT 28
53644: ST_TO_ADDR
53645: GO 53655
// dist := 36 ;
53647: LD_ADDR_VAR 0 14
53651: PUSH
53652: LD_INT 36
53654: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53655: LD_VAR 0 1
53659: PPUSH
53660: LD_VAR 0 3
53664: PPUSH
53665: LD_VAR 0 4
53669: PPUSH
53670: CALL_OW 297
53674: PUSH
53675: LD_VAR 0 14
53679: GREATER
53680: IFFALSE 53684
// exit ;
53682: GO 54209
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53684: LD_ADDR_VAR 0 12
53688: PUSH
53689: LD_VAR 0 2
53693: PPUSH
53694: LD_VAR 0 3
53698: PPUSH
53699: LD_VAR 0 4
53703: PPUSH
53704: LD_VAR 0 5
53708: PPUSH
53709: LD_VAR 0 1
53713: PPUSH
53714: CALL_OW 248
53718: PPUSH
53719: LD_INT 0
53721: PPUSH
53722: CALL 54214 0 6
53726: ST_TO_ADDR
// if not hexes then
53727: LD_VAR 0 12
53731: NOT
53732: IFFALSE 53736
// exit ;
53734: GO 54209
// hex := GetHexInfo ( x , y ) ;
53736: LD_ADDR_VAR 0 15
53740: PUSH
53741: LD_VAR 0 3
53745: PPUSH
53746: LD_VAR 0 4
53750: PPUSH
53751: CALL_OW 546
53755: ST_TO_ADDR
// if hex [ 1 ] then
53756: LD_VAR 0 15
53760: PUSH
53761: LD_INT 1
53763: ARRAY
53764: IFFALSE 53768
// exit ;
53766: GO 54209
// height := hex [ 2 ] ;
53768: LD_ADDR_VAR 0 13
53772: PUSH
53773: LD_VAR 0 15
53777: PUSH
53778: LD_INT 2
53780: ARRAY
53781: ST_TO_ADDR
// for i = 1 to hexes do
53782: LD_ADDR_VAR 0 7
53786: PUSH
53787: DOUBLE
53788: LD_INT 1
53790: DEC
53791: ST_TO_ADDR
53792: LD_VAR 0 12
53796: PUSH
53797: FOR_TO
53798: IFFALSE 54128
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53800: LD_VAR 0 12
53804: PUSH
53805: LD_VAR 0 7
53809: ARRAY
53810: PUSH
53811: LD_INT 1
53813: ARRAY
53814: PPUSH
53815: LD_VAR 0 12
53819: PUSH
53820: LD_VAR 0 7
53824: ARRAY
53825: PUSH
53826: LD_INT 2
53828: ARRAY
53829: PPUSH
53830: CALL_OW 488
53834: NOT
53835: PUSH
53836: LD_VAR 0 12
53840: PUSH
53841: LD_VAR 0 7
53845: ARRAY
53846: PUSH
53847: LD_INT 1
53849: ARRAY
53850: PPUSH
53851: LD_VAR 0 12
53855: PUSH
53856: LD_VAR 0 7
53860: ARRAY
53861: PUSH
53862: LD_INT 2
53864: ARRAY
53865: PPUSH
53866: CALL_OW 428
53870: PUSH
53871: LD_INT 0
53873: GREATER
53874: OR
53875: PUSH
53876: LD_VAR 0 12
53880: PUSH
53881: LD_VAR 0 7
53885: ARRAY
53886: PUSH
53887: LD_INT 1
53889: ARRAY
53890: PPUSH
53891: LD_VAR 0 12
53895: PUSH
53896: LD_VAR 0 7
53900: ARRAY
53901: PUSH
53902: LD_INT 2
53904: ARRAY
53905: PPUSH
53906: CALL_OW 351
53910: OR
53911: IFFALSE 53917
// exit ;
53913: POP
53914: POP
53915: GO 54209
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53917: LD_ADDR_VAR 0 8
53921: PUSH
53922: LD_VAR 0 12
53926: PUSH
53927: LD_VAR 0 7
53931: ARRAY
53932: PUSH
53933: LD_INT 1
53935: ARRAY
53936: PPUSH
53937: LD_VAR 0 12
53941: PUSH
53942: LD_VAR 0 7
53946: ARRAY
53947: PUSH
53948: LD_INT 2
53950: ARRAY
53951: PPUSH
53952: CALL_OW 546
53956: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53957: LD_VAR 0 8
53961: PUSH
53962: LD_INT 1
53964: ARRAY
53965: PUSH
53966: LD_VAR 0 8
53970: PUSH
53971: LD_INT 2
53973: ARRAY
53974: PUSH
53975: LD_VAR 0 13
53979: PUSH
53980: LD_INT 2
53982: PLUS
53983: GREATER
53984: OR
53985: PUSH
53986: LD_VAR 0 8
53990: PUSH
53991: LD_INT 2
53993: ARRAY
53994: PUSH
53995: LD_VAR 0 13
53999: PUSH
54000: LD_INT 2
54002: MINUS
54003: LESS
54004: OR
54005: PUSH
54006: LD_VAR 0 8
54010: PUSH
54011: LD_INT 3
54013: ARRAY
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 8
54020: PUSH
54021: LD_INT 9
54023: PUSH
54024: LD_INT 10
54026: PUSH
54027: LD_INT 11
54029: PUSH
54030: LD_INT 12
54032: PUSH
54033: LD_INT 13
54035: PUSH
54036: LD_INT 16
54038: PUSH
54039: LD_INT 17
54041: PUSH
54042: LD_INT 18
54044: PUSH
54045: LD_INT 19
54047: PUSH
54048: LD_INT 20
54050: PUSH
54051: LD_INT 21
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: IN
54069: NOT
54070: OR
54071: PUSH
54072: LD_VAR 0 8
54076: PUSH
54077: LD_INT 5
54079: ARRAY
54080: NOT
54081: OR
54082: PUSH
54083: LD_VAR 0 8
54087: PUSH
54088: LD_INT 6
54090: ARRAY
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: LD_INT 7
54100: PUSH
54101: LD_INT 9
54103: PUSH
54104: LD_INT 10
54106: PUSH
54107: LD_INT 11
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: IN
54118: NOT
54119: OR
54120: IFFALSE 54126
// exit ;
54122: POP
54123: POP
54124: GO 54209
// end ;
54126: GO 53797
54128: POP
54129: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54130: LD_VAR 0 9
54134: PPUSH
54135: LD_VAR 0 3
54139: PPUSH
54140: LD_VAR 0 4
54144: PPUSH
54145: LD_INT 20
54147: PPUSH
54148: CALL 46132 0 4
54152: PUSH
54153: LD_INT 4
54155: ARRAY
54156: IFFALSE 54160
// exit ;
54158: GO 54209
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54160: LD_VAR 0 2
54164: PUSH
54165: LD_INT 29
54167: PUSH
54168: LD_INT 30
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: IN
54175: PUSH
54176: LD_VAR 0 3
54180: PPUSH
54181: LD_VAR 0 4
54185: PPUSH
54186: LD_VAR 0 9
54190: PPUSH
54191: CALL_OW 440
54195: NOT
54196: AND
54197: IFFALSE 54201
// exit ;
54199: GO 54209
// result := true ;
54201: LD_ADDR_VAR 0 6
54205: PUSH
54206: LD_INT 1
54208: ST_TO_ADDR
// end ;
54209: LD_VAR 0 6
54213: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54214: LD_INT 0
54216: PPUSH
54217: PPUSH
54218: PPUSH
54219: PPUSH
54220: PPUSH
54221: PPUSH
54222: PPUSH
54223: PPUSH
54224: PPUSH
54225: PPUSH
54226: PPUSH
54227: PPUSH
54228: PPUSH
54229: PPUSH
54230: PPUSH
54231: PPUSH
54232: PPUSH
54233: PPUSH
54234: PPUSH
54235: PPUSH
54236: PPUSH
54237: PPUSH
54238: PPUSH
54239: PPUSH
54240: PPUSH
54241: PPUSH
54242: PPUSH
54243: PPUSH
54244: PPUSH
54245: PPUSH
54246: PPUSH
54247: PPUSH
54248: PPUSH
54249: PPUSH
54250: PPUSH
54251: PPUSH
54252: PPUSH
54253: PPUSH
54254: PPUSH
54255: PPUSH
54256: PPUSH
54257: PPUSH
54258: PPUSH
54259: PPUSH
54260: PPUSH
54261: PPUSH
54262: PPUSH
54263: PPUSH
54264: PPUSH
54265: PPUSH
54266: PPUSH
54267: PPUSH
54268: PPUSH
54269: PPUSH
54270: PPUSH
54271: PPUSH
54272: PPUSH
54273: PPUSH
// result = [ ] ;
54274: LD_ADDR_VAR 0 7
54278: PUSH
54279: EMPTY
54280: ST_TO_ADDR
// temp_list = [ ] ;
54281: LD_ADDR_VAR 0 9
54285: PUSH
54286: EMPTY
54287: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54288: LD_VAR 0 4
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: LD_INT 3
54304: PUSH
54305: LD_INT 4
54307: PUSH
54308: LD_INT 5
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: IN
54319: NOT
54320: PUSH
54321: LD_VAR 0 1
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: IN
54336: PUSH
54337: LD_VAR 0 5
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: LIST
54355: IN
54356: NOT
54357: AND
54358: OR
54359: IFFALSE 54363
// exit ;
54361: GO 72754
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54363: LD_VAR 0 1
54367: PUSH
54368: LD_INT 6
54370: PUSH
54371: LD_INT 7
54373: PUSH
54374: LD_INT 8
54376: PUSH
54377: LD_INT 13
54379: PUSH
54380: LD_INT 12
54382: PUSH
54383: LD_INT 15
54385: PUSH
54386: LD_INT 11
54388: PUSH
54389: LD_INT 14
54391: PUSH
54392: LD_INT 10
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: IN
54406: IFFALSE 54416
// btype = b_lab ;
54408: LD_ADDR_VAR 0 1
54412: PUSH
54413: LD_INT 6
54415: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54416: LD_VAR 0 6
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: LIST
54434: IN
54435: NOT
54436: PUSH
54437: LD_VAR 0 1
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: LD_INT 3
54453: PUSH
54454: LD_INT 6
54456: PUSH
54457: LD_INT 36
54459: PUSH
54460: LD_INT 4
54462: PUSH
54463: LD_INT 5
54465: PUSH
54466: LD_INT 31
54468: PUSH
54469: LD_INT 32
54471: PUSH
54472: LD_INT 33
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: IN
54488: NOT
54489: PUSH
54490: LD_VAR 0 6
54494: PUSH
54495: LD_INT 1
54497: EQUAL
54498: AND
54499: OR
54500: PUSH
54501: LD_VAR 0 1
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: LD_INT 3
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: IN
54516: NOT
54517: PUSH
54518: LD_VAR 0 6
54522: PUSH
54523: LD_INT 2
54525: EQUAL
54526: AND
54527: OR
54528: IFFALSE 54538
// mode = 0 ;
54530: LD_ADDR_VAR 0 6
54534: PUSH
54535: LD_INT 0
54537: ST_TO_ADDR
// case mode of 0 :
54538: LD_VAR 0 6
54542: PUSH
54543: LD_INT 0
54545: DOUBLE
54546: EQUAL
54547: IFTRUE 54551
54549: GO 66004
54551: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54552: LD_ADDR_VAR 0 11
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 1
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_INT 2
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: LD_INT 2
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 2
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 3
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 3
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54745: LD_ADDR_VAR 0 12
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 3
54902: NEG
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 3
54913: NEG
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54941: LD_ADDR_VAR 0 13
54945: PUSH
54946: LD_INT 0
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: LD_INT 3
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 3
55100: NEG
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 3
55112: NEG
55113: PUSH
55114: LD_INT 3
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55140: LD_ADDR_VAR 0 14
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 2
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: LD_INT 3
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 3
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55336: LD_ADDR_VAR 0 15
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 2
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: LD_INT 1
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55529: LD_ADDR_VAR 0 16
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 2
55652: NEG
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: LD_INT 2
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 3
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 3
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: LD_INT 3
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55722: LD_ADDR_VAR 0 17
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: NEG
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55952: LD_ADDR_VAR 0 18
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: NEG
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 2
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 2
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 2
56128: NEG
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56182: LD_ADDR_VAR 0 19
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 2
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 2
56358: NEG
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 2
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56412: LD_ADDR_VAR 0 20
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 1
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: LD_INT 2
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 2
56588: NEG
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56642: LD_ADDR_VAR 0 21
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: LD_INT 1
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: LD_INT 2
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 2
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 2
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56872: LD_ADDR_VAR 0 22
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 2
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 2
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 2
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: LD_INT 1
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 2
57071: NEG
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57102: LD_ADDR_VAR 0 23
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: LD_INT 2
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: LD_INT 2
57198: NEG
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 2
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: LD_INT 2
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 2
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: NEG
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: LD_INT 3
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: LD_INT 3
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57382: LD_ADDR_VAR 0 24
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 1
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: NEG
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: NEG
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 2
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 1
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: LD_INT 2
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 2
57569: NEG
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 2
57581: NEG
57582: PUSH
57583: LD_INT 2
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: LD_INT 2
57596: NEG
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 2
57604: PUSH
57605: LD_INT 1
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 3
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 3
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57658: LD_ADDR_VAR 0 25
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: LD_INT 2
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: LD_INT 2
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: LD_INT 1
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 2
57857: NEG
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 3
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 3
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 2
57889: PUSH
57890: LD_INT 3
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 3
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57932: LD_ADDR_VAR 0 26
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: LD_INT 2
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 2
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 1
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: NEG
58132: PUSH
58133: LD_INT 2
58135: NEG
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58208: LD_ADDR_VAR 0 27
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 2
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 2
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 2
58395: NEG
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 2
58430: NEG
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 3
58441: NEG
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 3
58453: NEG
58454: PUSH
58455: LD_INT 2
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58488: LD_ADDR_VAR 0 28
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 0
58505: PUSH
58506: LD_INT 1
58508: NEG
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: LD_INT 2
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 2
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: NEG
58688: PUSH
58689: LD_INT 2
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 2
58699: NEG
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: LD_INT 3
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 3
58723: NEG
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 3
58735: NEG
58736: PUSH
58737: LD_INT 2
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58770: LD_ADDR_VAR 0 29
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 2
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: PUSH
58906: LD_INT 2
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 2
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: NEG
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: NEG
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 2
58960: NEG
58961: PUSH
58962: LD_INT 3
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 2
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: LD_INT 3
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: LD_INT 2
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 3
59014: NEG
59015: PUSH
59016: LD_INT 2
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59049: LD_ADDR_VAR 0 30
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: LD_INT 2
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 2
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: LD_INT 0
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 2
59184: PUSH
59185: LD_INT 2
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: LD_INT 3
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 3
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: LD_INT 3
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 2
59281: NEG
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 3
59292: NEG
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59327: LD_ADDR_VAR 0 31
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 0
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 1
59408: NEG
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 2
59451: PUSH
59452: LD_INT 2
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: LD_INT 2
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 2
59504: NEG
59505: PUSH
59506: LD_INT 2
59508: NEG
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 2
59516: NEG
59517: PUSH
59518: LD_INT 3
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 3
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 1
59549: PUSH
59550: LD_INT 3
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: LD_INT 2
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 3
59570: NEG
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59605: LD_ADDR_VAR 0 32
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: LD_INT 0
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: LD_INT 1
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: LD_INT 1
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: NEG
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 1
59686: NEG
59687: PUSH
59688: LD_INT 2
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: LD_INT 2
59701: NEG
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: LD_INT 3
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: LD_INT 2
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 3
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 3
59848: NEG
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59883: LD_ADDR_VAR 0 33
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: LD_INT 2
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 2
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: LD_INT 2
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 2
60049: NEG
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: LD_INT 2
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: LD_INT 3
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 2
60085: PUSH
60086: LD_INT 1
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 3
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: LD_INT 3
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 3
60127: NEG
60128: PUSH
60129: LD_INT 2
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60162: LD_ADDR_VAR 0 34
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: LD_INT 2
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: NEG
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 2
60329: NEG
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: LD_INT 3
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: LD_INT 2
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 3
60376: PUSH
60377: LD_INT 2
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 2
60386: PUSH
60387: LD_INT 3
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 3
60407: NEG
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60442: LD_ADDR_VAR 0 35
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 1
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: LD_INT 0
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 2
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60554: LD_ADDR_VAR 0 36
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60666: LD_ADDR_VAR 0 37
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 1
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60778: LD_ADDR_VAR 0 38
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: LD_INT 1
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: LD_INT 0
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 1
60847: NEG
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60890: LD_ADDR_VAR 0 39
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: LD_INT 1
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: LD_INT 0
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: LD_INT 2
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61002: LD_ADDR_VAR 0 40
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: LD_INT 0
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: NEG
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61114: LD_ADDR_VAR 0 41
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: LD_INT 1
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: LD_INT 2
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: PUSH
61219: LD_INT 0
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: LD_INT 1
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: LD_INT 2
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: LD_INT 2
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 1
61258: NEG
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 2
61269: NEG
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 2
61292: NEG
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 2
61304: NEG
61305: PUSH
61306: LD_INT 3
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 3
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 3
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 3
61347: PUSH
61348: LD_INT 2
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 3
61357: PUSH
61358: LD_INT 3
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: PUSH
61368: LD_INT 3
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 2
61377: NEG
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 3
61388: NEG
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 3
61399: NEG
61400: PUSH
61401: LD_INT 1
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 3
61411: NEG
61412: PUSH
61413: LD_INT 2
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 3
61423: NEG
61424: PUSH
61425: LD_INT 3
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61464: LD_ADDR_VAR 0 42
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: LD_INT 2
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: LD_INT 2
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 1
61568: PUSH
61569: LD_INT 1
61571: NEG
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: LD_INT 2
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: LD_INT 2
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 0
61609: PUSH
61610: LD_INT 2
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: NEG
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: NEG
61631: PUSH
61632: LD_INT 1
61634: NEG
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: LD_INT 2
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 2
61654: NEG
61655: PUSH
61656: LD_INT 3
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 1
61666: NEG
61667: PUSH
61668: LD_INT 3
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: LD_INT 3
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: LD_INT 2
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 3
61700: PUSH
61701: LD_INT 2
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 3
61710: PUSH
61711: LD_INT 3
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 2
61720: PUSH
61721: LD_INT 3
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: LD_INT 3
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 3
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: LD_INT 2
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 3
61761: NEG
61762: PUSH
61763: LD_INT 2
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 3
61773: NEG
61774: PUSH
61775: LD_INT 3
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61814: LD_ADDR_VAR 0 43
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_INT 1
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: LD_INT 0
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: NEG
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 2
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 2
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: LD_INT 2
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: LD_INT 1
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 2
61980: NEG
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 2
61991: NEG
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: LD_INT 3
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 2
62037: PUSH
62038: LD_INT 1
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 3
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 3
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: LD_INT 3
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: LD_INT 3
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 1
62088: NEG
62089: PUSH
62090: LD_INT 2
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 2
62099: NEG
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 3
62110: NEG
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 3
62121: NEG
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62162: LD_ADDR_VAR 0 44
62166: PUSH
62167: LD_INT 0
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: LD_INT 1
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 1
62200: PUSH
62201: LD_INT 1
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: LD_INT 1
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: LD_INT 0
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: LD_INT 1
62235: NEG
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: LD_INT 2
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 2
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 2
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 2
62286: PUSH
62287: LD_INT 2
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: LD_INT 2
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 1
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 2
62328: NEG
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: LD_INT 2
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 2
62352: NEG
62353: PUSH
62354: LD_INT 3
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: LD_INT 1
62367: NEG
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 3
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 3
62385: PUSH
62386: LD_INT 1
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 3
62395: PUSH
62396: LD_INT 2
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 3
62405: PUSH
62406: LD_INT 3
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: LD_INT 3
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 2
62425: NEG
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 3
62436: NEG
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 3
62447: NEG
62448: PUSH
62449: LD_INT 1
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 3
62459: NEG
62460: PUSH
62461: LD_INT 2
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 3
62471: NEG
62472: PUSH
62473: LD_INT 3
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62512: LD_ADDR_VAR 0 45
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: LD_INT 0
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: LD_INT 1
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: LD_INT 2
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: LD_INT 2
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 2
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 2
62637: PUSH
62638: LD_INT 2
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: PUSH
62648: LD_INT 2
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 2
62678: NEG
62679: PUSH
62680: LD_INT 1
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: LD_INT 2
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 2
62702: NEG
62703: PUSH
62704: LD_INT 3
62706: NEG
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: LD_INT 3
62718: NEG
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: LD_INT 3
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: LD_INT 2
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 3
62748: PUSH
62749: LD_INT 2
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 3
62758: PUSH
62759: LD_INT 3
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 2
62768: PUSH
62769: LD_INT 3
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: LD_INT 3
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: LD_INT 3
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: NEG
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 3
62809: NEG
62810: PUSH
62811: LD_INT 2
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 3
62821: NEG
62822: PUSH
62823: LD_INT 3
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62862: LD_ADDR_VAR 0 46
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: LD_INT 0
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: NEG
62944: PUSH
62945: LD_INT 2
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: LD_INT 2
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 2
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: LD_INT 2
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 0
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 2
63028: NEG
63029: PUSH
63030: LD_INT 0
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 2
63039: NEG
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: LD_INT 3
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: LD_INT 3
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: LD_INT 2
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: LD_INT 1
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 3
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 3
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: LD_INT 3
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: LD_INT 3
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: LD_INT 2
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 2
63147: NEG
63148: PUSH
63149: LD_INT 1
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 3
63158: NEG
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 3
63169: NEG
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63210: LD_ADDR_VAR 0 47
63214: PUSH
63215: LD_INT 0
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: NEG
63292: PUSH
63293: LD_INT 2
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: LD_INT 2
63306: NEG
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: LD_INT 1
63317: NEG
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 2
63325: NEG
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 2
63337: NEG
63338: PUSH
63339: LD_INT 2
63341: NEG
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63361: LD_ADDR_VAR 0 48
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 1
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: NEG
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: LD_INT 2
63446: NEG
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: LD_INT 2
63457: NEG
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 1
63465: PUSH
63466: LD_INT 1
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 2
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 2
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63508: LD_ADDR_VAR 0 49
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: LD_INT 0
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: LD_INT 0
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 1
63546: PUSH
63547: LD_INT 1
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 1
63566: NEG
63567: PUSH
63568: LD_INT 0
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: NEG
63578: PUSH
63579: LD_INT 1
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: LD_INT 1
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 2
63600: PUSH
63601: LD_INT 0
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 2
63610: PUSH
63611: LD_INT 1
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 2
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 1
63630: PUSH
63631: LD_INT 2
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63652: LD_ADDR_VAR 0 50
63656: PUSH
63657: LD_INT 0
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 0
63669: PUSH
63670: LD_INT 1
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 1
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 1
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: LD_INT 1
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 1
63710: NEG
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 1
63721: NEG
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 2
63733: PUSH
63734: LD_INT 1
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 2
63743: PUSH
63744: LD_INT 2
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: LD_INT 2
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 0
63763: PUSH
63764: LD_INT 2
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 1
63773: NEG
63774: PUSH
63775: LD_INT 1
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63796: LD_ADDR_VAR 0 51
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 1
63865: NEG
63866: PUSH
63867: LD_INT 1
63869: NEG
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: LD_INT 2
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: LD_INT 2
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: NEG
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 2
63908: NEG
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: LD_INT 1
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63943: LD_ADDR_VAR 0 52
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 0
63960: PUSH
63961: LD_INT 1
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 1
63971: PUSH
63972: LD_INT 0
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: LD_INT 1
63981: PUSH
63982: LD_INT 1
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: LD_INT 1
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: NEG
64002: PUSH
64003: LD_INT 0
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 1
64012: NEG
64013: PUSH
64014: LD_INT 1
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: NEG
64025: PUSH
64026: LD_INT 2
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 1
64036: NEG
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 2
64047: NEG
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 2
64058: NEG
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 2
64070: NEG
64071: PUSH
64072: LD_INT 2
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64094: LD_ADDR_VAR 0 53
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 1
64122: PUSH
64123: LD_INT 0
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 1
64132: PUSH
64133: LD_INT 1
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 1
64152: NEG
64153: PUSH
64154: LD_INT 0
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 1
64163: NEG
64164: PUSH
64165: LD_INT 1
64167: NEG
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: LD_INT 2
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: LD_INT 2
64190: NEG
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 1
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 2
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 2
64219: PUSH
64220: LD_INT 1
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 2
64229: PUSH
64230: LD_INT 2
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 1
64239: PUSH
64240: LD_INT 2
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 2
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: NEG
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 2
64270: NEG
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 2
64281: NEG
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 2
64293: NEG
64294: PUSH
64295: LD_INT 2
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64324: LD_ADDR_VAR 0 54
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 1
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 1
64393: NEG
64394: PUSH
64395: LD_INT 1
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 1
64405: NEG
64406: PUSH
64407: LD_INT 2
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: LD_INT 2
64420: NEG
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: PUSH
64426: LD_INT 1
64428: PUSH
64429: LD_INT 1
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 2
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 2
64449: PUSH
64450: LD_INT 1
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: LD_INT 2
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: LD_INT 2
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 2
64500: NEG
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 2
64511: NEG
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 2
64523: NEG
64524: PUSH
64525: LD_INT 2
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64554: LD_ADDR_VAR 0 55
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 1
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 1
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 1
64612: NEG
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: LD_INT 1
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: LD_INT 2
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: LD_INT 2
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: LD_INT 1
64661: NEG
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 2
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 2
64679: PUSH
64680: LD_INT 1
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 2
64689: PUSH
64690: LD_INT 2
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: LD_INT 2
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 0
64709: PUSH
64710: LD_INT 2
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 1
64719: NEG
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 2
64730: NEG
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 2
64741: NEG
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 2
64753: NEG
64754: PUSH
64755: LD_INT 2
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64784: LD_ADDR_VAR 0 56
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 1
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 1
64842: NEG
64843: PUSH
64844: LD_INT 0
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 1
64853: NEG
64854: PUSH
64855: LD_INT 1
64857: NEG
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 1
64865: NEG
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: LD_INT 2
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: LD_INT 1
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 2
64909: PUSH
64910: LD_INT 1
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 2
64919: PUSH
64920: LD_INT 2
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: LD_INT 2
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: LD_INT 2
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 1
64949: NEG
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 2
64960: NEG
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 2
64971: NEG
64972: PUSH
64973: LD_INT 1
64975: NEG
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 2
64983: NEG
64984: PUSH
64985: LD_INT 2
64987: NEG
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65014: LD_ADDR_VAR 0 57
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 1
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 1
65095: NEG
65096: PUSH
65097: LD_INT 2
65099: NEG
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 0
65107: PUSH
65108: LD_INT 2
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 1
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 2
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 2
65139: PUSH
65140: LD_INT 1
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 2
65149: PUSH
65150: LD_INT 2
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: PUSH
65160: LD_INT 2
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 0
65169: PUSH
65170: LD_INT 2
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 1
65179: NEG
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 2
65190: NEG
65191: PUSH
65192: LD_INT 0
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 2
65201: NEG
65202: PUSH
65203: LD_INT 1
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 2
65213: NEG
65214: PUSH
65215: LD_INT 2
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65244: LD_ADDR_VAR 0 58
65248: PUSH
65249: LD_INT 0
65251: PUSH
65252: LD_INT 0
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: LD_INT 1
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 1
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 1
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 0
65292: PUSH
65293: LD_INT 1
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 1
65302: NEG
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 1
65313: NEG
65314: PUSH
65315: LD_INT 1
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 1
65325: NEG
65326: PUSH
65327: LD_INT 2
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 0
65337: PUSH
65338: LD_INT 2
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 1
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 2
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 2
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 2
65379: PUSH
65380: LD_INT 2
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 1
65389: PUSH
65390: LD_INT 2
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 0
65399: PUSH
65400: LD_INT 2
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 1
65409: NEG
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 2
65420: NEG
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 2
65431: NEG
65432: PUSH
65433: LD_INT 1
65435: NEG
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 2
65443: NEG
65444: PUSH
65445: LD_INT 2
65447: NEG
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65474: LD_ADDR_VAR 0 59
65478: PUSH
65479: LD_INT 0
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 0
65491: PUSH
65492: LD_INT 1
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 1
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 1
65512: PUSH
65513: LD_INT 1
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: LD_INT 1
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 0
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 1
65543: NEG
65544: PUSH
65545: LD_INT 1
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65562: LD_ADDR_VAR 0 60
65566: PUSH
65567: LD_INT 0
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 0
65579: PUSH
65580: LD_INT 1
65582: NEG
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 1
65590: PUSH
65591: LD_INT 0
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 1
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 1
65620: NEG
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 1
65631: NEG
65632: PUSH
65633: LD_INT 1
65635: NEG
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65650: LD_ADDR_VAR 0 61
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 0
65667: PUSH
65668: LD_INT 1
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 1
65678: PUSH
65679: LD_INT 0
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: LD_INT 1
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: LD_INT 1
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 1
65719: NEG
65720: PUSH
65721: LD_INT 1
65723: NEG
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65738: LD_ADDR_VAR 0 62
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: LD_INT 0
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: LD_INT 1
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: LD_INT 1
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 1
65776: PUSH
65777: LD_INT 1
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 0
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 1
65796: NEG
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 1
65807: NEG
65808: PUSH
65809: LD_INT 1
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65826: LD_ADDR_VAR 0 63
65830: PUSH
65831: LD_INT 0
65833: PUSH
65834: LD_INT 0
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: LD_INT 1
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 1
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: LD_INT 1
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: LD_INT 1
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: LD_INT 0
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 1
65895: NEG
65896: PUSH
65897: LD_INT 1
65899: NEG
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65914: LD_ADDR_VAR 0 64
65918: PUSH
65919: LD_INT 0
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 1
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 1
65952: PUSH
65953: LD_INT 1
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 0
65962: PUSH
65963: LD_INT 1
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 1
65972: NEG
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 1
65983: NEG
65984: PUSH
65985: LD_INT 1
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: ST_TO_ADDR
// end ; 1 :
66002: GO 71899
66004: LD_INT 1
66006: DOUBLE
66007: EQUAL
66008: IFTRUE 66012
66010: GO 68635
66012: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66013: LD_ADDR_VAR 0 11
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: LD_INT 3
66024: NEG
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: LD_INT 3
66035: NEG
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 1
66043: PUSH
66044: LD_INT 2
66046: NEG
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66057: LD_ADDR_VAR 0 12
66061: PUSH
66062: LD_INT 2
66064: PUSH
66065: LD_INT 1
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 3
66075: PUSH
66076: LD_INT 0
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 3
66085: PUSH
66086: LD_INT 1
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: LIST
66097: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66098: LD_ADDR_VAR 0 13
66102: PUSH
66103: LD_INT 3
66105: PUSH
66106: LD_INT 2
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 3
66115: PUSH
66116: LD_INT 3
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 2
66125: PUSH
66126: LD_INT 3
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: LIST
66137: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66138: LD_ADDR_VAR 0 14
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: LD_INT 3
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: LD_INT 3
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 1
66165: NEG
66166: PUSH
66167: LD_INT 2
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: LIST
66178: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66179: LD_ADDR_VAR 0 15
66183: PUSH
66184: LD_INT 2
66186: NEG
66187: PUSH
66188: LD_INT 1
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 3
66197: NEG
66198: PUSH
66199: LD_INT 0
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 3
66208: NEG
66209: PUSH
66210: LD_INT 1
66212: NEG
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: LIST
66222: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66223: LD_ADDR_VAR 0 16
66227: PUSH
66228: LD_INT 2
66230: NEG
66231: PUSH
66232: LD_INT 3
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 3
66242: NEG
66243: PUSH
66244: LD_INT 2
66246: NEG
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 3
66254: NEG
66255: PUSH
66256: LD_INT 3
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: LIST
66268: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66269: LD_ADDR_VAR 0 17
66273: PUSH
66274: LD_INT 1
66276: NEG
66277: PUSH
66278: LD_INT 3
66280: NEG
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 0
66288: PUSH
66289: LD_INT 3
66291: NEG
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 1
66299: PUSH
66300: LD_INT 2
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: LIST
66312: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66313: LD_ADDR_VAR 0 18
66317: PUSH
66318: LD_INT 2
66320: PUSH
66321: LD_INT 1
66323: NEG
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 3
66331: PUSH
66332: LD_INT 0
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 3
66341: PUSH
66342: LD_INT 1
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: LIST
66353: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66354: LD_ADDR_VAR 0 19
66358: PUSH
66359: LD_INT 3
66361: PUSH
66362: LD_INT 2
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 3
66371: PUSH
66372: LD_INT 3
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 2
66381: PUSH
66382: LD_INT 3
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: LIST
66393: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66394: LD_ADDR_VAR 0 20
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: LD_INT 3
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 0
66411: PUSH
66412: LD_INT 3
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: LD_INT 2
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: LIST
66434: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66435: LD_ADDR_VAR 0 21
66439: PUSH
66440: LD_INT 2
66442: NEG
66443: PUSH
66444: LD_INT 1
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 3
66453: NEG
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 3
66464: NEG
66465: PUSH
66466: LD_INT 1
66468: NEG
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: LIST
66478: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66479: LD_ADDR_VAR 0 22
66483: PUSH
66484: LD_INT 2
66486: NEG
66487: PUSH
66488: LD_INT 3
66490: NEG
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 3
66498: NEG
66499: PUSH
66500: LD_INT 2
66502: NEG
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 3
66510: NEG
66511: PUSH
66512: LD_INT 3
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: LIST
66524: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66525: LD_ADDR_VAR 0 23
66529: PUSH
66530: LD_INT 0
66532: PUSH
66533: LD_INT 3
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 1
66543: NEG
66544: PUSH
66545: LD_INT 4
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 1
66555: PUSH
66556: LD_INT 3
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: LIST
66568: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66569: LD_ADDR_VAR 0 24
66573: PUSH
66574: LD_INT 3
66576: PUSH
66577: LD_INT 0
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 3
66586: PUSH
66587: LD_INT 1
66589: NEG
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 4
66597: PUSH
66598: LD_INT 1
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: LIST
66609: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66610: LD_ADDR_VAR 0 25
66614: PUSH
66615: LD_INT 3
66617: PUSH
66618: LD_INT 3
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 4
66627: PUSH
66628: LD_INT 3
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 3
66637: PUSH
66638: LD_INT 4
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: LIST
66649: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66650: LD_ADDR_VAR 0 26
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: LD_INT 3
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 1
66667: PUSH
66668: LD_INT 4
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 1
66677: NEG
66678: PUSH
66679: LD_INT 3
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: LIST
66690: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66691: LD_ADDR_VAR 0 27
66695: PUSH
66696: LD_INT 3
66698: NEG
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 3
66709: NEG
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 4
66720: NEG
66721: PUSH
66722: LD_INT 1
66724: NEG
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: LIST
66734: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66735: LD_ADDR_VAR 0 28
66739: PUSH
66740: LD_INT 3
66742: NEG
66743: PUSH
66744: LD_INT 3
66746: NEG
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 3
66754: NEG
66755: PUSH
66756: LD_INT 4
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 4
66766: NEG
66767: PUSH
66768: LD_INT 3
66770: NEG
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: LIST
66780: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66781: LD_ADDR_VAR 0 29
66785: PUSH
66786: LD_INT 1
66788: NEG
66789: PUSH
66790: LD_INT 3
66792: NEG
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: LD_INT 3
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: LD_INT 2
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 1
66822: NEG
66823: PUSH
66824: LD_INT 4
66826: NEG
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 0
66834: PUSH
66835: LD_INT 4
66837: NEG
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 1
66845: PUSH
66846: LD_INT 3
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 1
66856: NEG
66857: PUSH
66858: LD_INT 5
66860: NEG
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: LD_INT 5
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 1
66879: PUSH
66880: LD_INT 4
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 1
66890: NEG
66891: PUSH
66892: LD_INT 6
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 0
66902: PUSH
66903: LD_INT 6
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: LD_INT 5
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66936: LD_ADDR_VAR 0 30
66940: PUSH
66941: LD_INT 2
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: LD_INT 0
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 3
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: LD_INT 1
66977: NEG
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 4
66985: PUSH
66986: LD_INT 0
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 4
66995: PUSH
66996: LD_INT 1
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 4
67005: PUSH
67006: LD_INT 1
67008: NEG
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: LD_INT 5
67016: PUSH
67017: LD_INT 0
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 5
67026: PUSH
67027: LD_INT 1
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 5
67036: PUSH
67037: LD_INT 1
67039: NEG
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 6
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 6
67057: PUSH
67058: LD_INT 1
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67079: LD_ADDR_VAR 0 31
67083: PUSH
67084: LD_INT 3
67086: PUSH
67087: LD_INT 2
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 3
67096: PUSH
67097: LD_INT 3
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 2
67106: PUSH
67107: LD_INT 3
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 4
67116: PUSH
67117: LD_INT 3
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 4
67126: PUSH
67127: LD_INT 4
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 3
67136: PUSH
67137: LD_INT 4
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 5
67146: PUSH
67147: LD_INT 4
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 5
67156: PUSH
67157: LD_INT 5
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 4
67166: PUSH
67167: LD_INT 5
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 6
67176: PUSH
67177: LD_INT 5
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 6
67186: PUSH
67187: LD_INT 6
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 5
67196: PUSH
67197: LD_INT 6
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67218: LD_ADDR_VAR 0 32
67222: PUSH
67223: LD_INT 1
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 0
67235: PUSH
67236: LD_INT 3
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 1
67245: NEG
67246: PUSH
67247: LD_INT 2
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 1
67256: PUSH
67257: LD_INT 4
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 0
67266: PUSH
67267: LD_INT 4
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 1
67276: NEG
67277: PUSH
67278: LD_INT 3
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 1
67287: PUSH
67288: LD_INT 5
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: LD_INT 5
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 1
67307: NEG
67308: PUSH
67309: LD_INT 4
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: LD_INT 6
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 0
67328: PUSH
67329: LD_INT 6
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: LD_INT 5
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67361: LD_ADDR_VAR 0 33
67365: PUSH
67366: LD_INT 2
67368: NEG
67369: PUSH
67370: LD_INT 1
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 3
67379: NEG
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 3
67390: NEG
67391: PUSH
67392: LD_INT 1
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 3
67402: NEG
67403: PUSH
67404: LD_INT 1
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 4
67413: NEG
67414: PUSH
67415: LD_INT 0
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 4
67424: NEG
67425: PUSH
67426: LD_INT 1
67428: NEG
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 4
67436: NEG
67437: PUSH
67438: LD_INT 1
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 5
67447: NEG
67448: PUSH
67449: LD_INT 0
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 5
67458: NEG
67459: PUSH
67460: LD_INT 1
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 5
67470: NEG
67471: PUSH
67472: LD_INT 1
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 6
67481: NEG
67482: PUSH
67483: LD_INT 0
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 6
67492: NEG
67493: PUSH
67494: LD_INT 1
67496: NEG
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67516: LD_ADDR_VAR 0 34
67520: PUSH
67521: LD_INT 2
67523: NEG
67524: PUSH
67525: LD_INT 3
67527: NEG
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 3
67535: NEG
67536: PUSH
67537: LD_INT 2
67539: NEG
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 3
67547: NEG
67548: PUSH
67549: LD_INT 3
67551: NEG
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 3
67559: NEG
67560: PUSH
67561: LD_INT 4
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 4
67571: NEG
67572: PUSH
67573: LD_INT 3
67575: NEG
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 4
67583: NEG
67584: PUSH
67585: LD_INT 4
67587: NEG
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 4
67595: NEG
67596: PUSH
67597: LD_INT 5
67599: NEG
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 5
67607: NEG
67608: PUSH
67609: LD_INT 4
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 5
67619: NEG
67620: PUSH
67621: LD_INT 5
67623: NEG
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 5
67631: NEG
67632: PUSH
67633: LD_INT 6
67635: NEG
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 6
67643: NEG
67644: PUSH
67645: LD_INT 5
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 6
67655: NEG
67656: PUSH
67657: LD_INT 6
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67679: LD_ADDR_VAR 0 41
67683: PUSH
67684: LD_INT 0
67686: PUSH
67687: LD_INT 2
67689: NEG
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 1
67697: NEG
67698: PUSH
67699: LD_INT 3
67701: NEG
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 1
67709: PUSH
67710: LD_INT 2
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: LIST
67722: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67723: LD_ADDR_VAR 0 42
67727: PUSH
67728: LD_INT 2
67730: PUSH
67731: LD_INT 0
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 2
67740: PUSH
67741: LD_INT 1
67743: NEG
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 3
67751: PUSH
67752: LD_INT 1
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: LIST
67763: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67764: LD_ADDR_VAR 0 43
67768: PUSH
67769: LD_INT 2
67771: PUSH
67772: LD_INT 2
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 3
67781: PUSH
67782: LD_INT 2
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 2
67791: PUSH
67792: LD_INT 3
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: LIST
67803: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67804: LD_ADDR_VAR 0 44
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: LD_INT 2
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 1
67821: PUSH
67822: LD_INT 3
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 1
67831: NEG
67832: PUSH
67833: LD_INT 2
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: LIST
67844: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67845: LD_ADDR_VAR 0 45
67849: PUSH
67850: LD_INT 2
67852: NEG
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 2
67863: NEG
67864: PUSH
67865: LD_INT 1
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 3
67874: NEG
67875: PUSH
67876: LD_INT 1
67878: NEG
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: LIST
67888: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67889: LD_ADDR_VAR 0 46
67893: PUSH
67894: LD_INT 2
67896: NEG
67897: PUSH
67898: LD_INT 2
67900: NEG
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 2
67908: NEG
67909: PUSH
67910: LD_INT 3
67912: NEG
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 3
67920: NEG
67921: PUSH
67922: LD_INT 2
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: LIST
67934: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67935: LD_ADDR_VAR 0 47
67939: PUSH
67940: LD_INT 2
67942: NEG
67943: PUSH
67944: LD_INT 3
67946: NEG
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 1
67954: NEG
67955: PUSH
67956: LD_INT 3
67958: NEG
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67968: LD_ADDR_VAR 0 48
67972: PUSH
67973: LD_INT 1
67975: PUSH
67976: LD_INT 2
67978: NEG
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 2
67986: PUSH
67987: LD_INT 1
67989: NEG
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67999: LD_ADDR_VAR 0 49
68003: PUSH
68004: LD_INT 3
68006: PUSH
68007: LD_INT 1
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 3
68016: PUSH
68017: LD_INT 2
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68028: LD_ADDR_VAR 0 50
68032: PUSH
68033: LD_INT 2
68035: PUSH
68036: LD_INT 3
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 1
68045: PUSH
68046: LD_INT 3
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68057: LD_ADDR_VAR 0 51
68061: PUSH
68062: LD_INT 1
68064: NEG
68065: PUSH
68066: LD_INT 2
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 2
68075: NEG
68076: PUSH
68077: LD_INT 1
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68088: LD_ADDR_VAR 0 52
68092: PUSH
68093: LD_INT 3
68095: NEG
68096: PUSH
68097: LD_INT 1
68099: NEG
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 3
68107: NEG
68108: PUSH
68109: LD_INT 2
68111: NEG
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68121: LD_ADDR_VAR 0 53
68125: PUSH
68126: LD_INT 1
68128: NEG
68129: PUSH
68130: LD_INT 3
68132: NEG
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 0
68140: PUSH
68141: LD_INT 3
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 1
68151: PUSH
68152: LD_INT 2
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: LIST
68164: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68165: LD_ADDR_VAR 0 54
68169: PUSH
68170: LD_INT 2
68172: PUSH
68173: LD_INT 1
68175: NEG
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 3
68183: PUSH
68184: LD_INT 0
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 3
68193: PUSH
68194: LD_INT 1
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: LIST
68205: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68206: LD_ADDR_VAR 0 55
68210: PUSH
68211: LD_INT 3
68213: PUSH
68214: LD_INT 2
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 3
68223: PUSH
68224: LD_INT 3
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 2
68233: PUSH
68234: LD_INT 3
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: LIST
68245: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68246: LD_ADDR_VAR 0 56
68250: PUSH
68251: LD_INT 1
68253: PUSH
68254: LD_INT 3
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 0
68263: PUSH
68264: LD_INT 3
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 1
68273: NEG
68274: PUSH
68275: LD_INT 2
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: LIST
68286: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68287: LD_ADDR_VAR 0 57
68291: PUSH
68292: LD_INT 2
68294: NEG
68295: PUSH
68296: LD_INT 1
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 3
68305: NEG
68306: PUSH
68307: LD_INT 0
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 3
68316: NEG
68317: PUSH
68318: LD_INT 1
68320: NEG
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: LIST
68330: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68331: LD_ADDR_VAR 0 58
68335: PUSH
68336: LD_INT 2
68338: NEG
68339: PUSH
68340: LD_INT 3
68342: NEG
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 3
68350: NEG
68351: PUSH
68352: LD_INT 2
68354: NEG
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 3
68362: NEG
68363: PUSH
68364: LD_INT 3
68366: NEG
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: LIST
68376: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68377: LD_ADDR_VAR 0 59
68381: PUSH
68382: LD_INT 1
68384: NEG
68385: PUSH
68386: LD_INT 2
68388: NEG
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 0
68396: PUSH
68397: LD_INT 2
68399: NEG
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 1
68407: PUSH
68408: LD_INT 1
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: LIST
68420: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68421: LD_ADDR_VAR 0 60
68425: PUSH
68426: LD_INT 1
68428: PUSH
68429: LD_INT 1
68431: NEG
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: PUSH
68437: LD_INT 2
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 2
68449: PUSH
68450: LD_INT 1
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: LIST
68461: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68462: LD_ADDR_VAR 0 61
68466: PUSH
68467: LD_INT 2
68469: PUSH
68470: LD_INT 1
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 2
68479: PUSH
68480: LD_INT 2
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 1
68489: PUSH
68490: LD_INT 2
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: LIST
68501: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68502: LD_ADDR_VAR 0 62
68506: PUSH
68507: LD_INT 1
68509: PUSH
68510: LD_INT 2
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 0
68519: PUSH
68520: LD_INT 2
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 1
68529: NEG
68530: PUSH
68531: LD_INT 1
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: LIST
68542: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68543: LD_ADDR_VAR 0 63
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: LD_INT 1
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 2
68561: NEG
68562: PUSH
68563: LD_INT 0
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 2
68572: NEG
68573: PUSH
68574: LD_INT 1
68576: NEG
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: LIST
68586: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68587: LD_ADDR_VAR 0 64
68591: PUSH
68592: LD_INT 1
68594: NEG
68595: PUSH
68596: LD_INT 2
68598: NEG
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 2
68606: NEG
68607: PUSH
68608: LD_INT 1
68610: NEG
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 2
68618: NEG
68619: PUSH
68620: LD_INT 2
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: LIST
68632: ST_TO_ADDR
// end ; 2 :
68633: GO 71899
68635: LD_INT 2
68637: DOUBLE
68638: EQUAL
68639: IFTRUE 68643
68641: GO 71898
68643: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68644: LD_ADDR_VAR 0 29
68648: PUSH
68649: LD_INT 4
68651: PUSH
68652: LD_INT 0
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 4
68661: PUSH
68662: LD_INT 1
68664: NEG
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 5
68672: PUSH
68673: LD_INT 0
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 5
68682: PUSH
68683: LD_INT 1
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 4
68692: PUSH
68693: LD_INT 1
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 3
68702: PUSH
68703: LD_INT 0
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 3
68712: PUSH
68713: LD_INT 1
68715: NEG
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 3
68723: PUSH
68724: LD_INT 2
68726: NEG
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 5
68734: PUSH
68735: LD_INT 2
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 3
68744: PUSH
68745: LD_INT 3
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 3
68754: PUSH
68755: LD_INT 2
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 4
68764: PUSH
68765: LD_INT 3
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 4
68774: PUSH
68775: LD_INT 4
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 3
68784: PUSH
68785: LD_INT 4
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 2
68794: PUSH
68795: LD_INT 3
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 2
68804: PUSH
68805: LD_INT 2
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 4
68814: PUSH
68815: LD_INT 2
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 2
68824: PUSH
68825: LD_INT 4
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 0
68834: PUSH
68835: LD_INT 4
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: LD_INT 3
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 1
68854: PUSH
68855: LD_INT 4
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 1
68864: PUSH
68865: LD_INT 5
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 0
68874: PUSH
68875: LD_INT 5
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 1
68884: NEG
68885: PUSH
68886: LD_INT 4
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 1
68895: NEG
68896: PUSH
68897: LD_INT 3
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 2
68906: PUSH
68907: LD_INT 5
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 2
68916: NEG
68917: PUSH
68918: LD_INT 3
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 3
68927: NEG
68928: PUSH
68929: LD_INT 0
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 3
68938: NEG
68939: PUSH
68940: LD_INT 1
68942: NEG
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 2
68950: NEG
68951: PUSH
68952: LD_INT 0
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 2
68961: NEG
68962: PUSH
68963: LD_INT 1
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 3
68972: NEG
68973: PUSH
68974: LD_INT 1
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 4
68983: NEG
68984: PUSH
68985: LD_INT 0
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 4
68994: NEG
68995: PUSH
68996: LD_INT 1
68998: NEG
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 4
69006: NEG
69007: PUSH
69008: LD_INT 2
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 2
69018: NEG
69019: PUSH
69020: LD_INT 2
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 4
69029: NEG
69030: PUSH
69031: LD_INT 4
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 4
69041: NEG
69042: PUSH
69043: LD_INT 5
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 3
69053: NEG
69054: PUSH
69055: LD_INT 4
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 3
69065: NEG
69066: PUSH
69067: LD_INT 3
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 4
69077: NEG
69078: PUSH
69079: LD_INT 3
69081: NEG
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: LD_INT 5
69089: NEG
69090: PUSH
69091: LD_INT 4
69093: NEG
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 5
69101: NEG
69102: PUSH
69103: LD_INT 5
69105: NEG
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 3
69113: NEG
69114: PUSH
69115: LD_INT 5
69117: NEG
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 5
69125: NEG
69126: PUSH
69127: LD_INT 3
69129: NEG
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69182: LD_ADDR_VAR 0 30
69186: PUSH
69187: LD_INT 4
69189: PUSH
69190: LD_INT 4
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 4
69199: PUSH
69200: LD_INT 3
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 5
69209: PUSH
69210: LD_INT 4
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 5
69219: PUSH
69220: LD_INT 5
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 4
69229: PUSH
69230: LD_INT 5
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 3
69239: PUSH
69240: LD_INT 4
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 3
69249: PUSH
69250: LD_INT 3
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 5
69259: PUSH
69260: LD_INT 3
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 3
69269: PUSH
69270: LD_INT 5
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 0
69279: PUSH
69280: LD_INT 3
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 0
69289: PUSH
69290: LD_INT 2
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 1
69299: PUSH
69300: LD_INT 3
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 1
69309: PUSH
69310: LD_INT 4
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 0
69319: PUSH
69320: LD_INT 4
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 1
69329: NEG
69330: PUSH
69331: LD_INT 3
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 1
69340: NEG
69341: PUSH
69342: LD_INT 2
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 2
69351: PUSH
69352: LD_INT 4
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 2
69361: NEG
69362: PUSH
69363: LD_INT 2
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 4
69372: NEG
69373: PUSH
69374: LD_INT 0
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 4
69383: NEG
69384: PUSH
69385: LD_INT 1
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 3
69395: NEG
69396: PUSH
69397: LD_INT 0
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 3
69406: NEG
69407: PUSH
69408: LD_INT 1
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 4
69417: NEG
69418: PUSH
69419: LD_INT 1
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 5
69428: NEG
69429: PUSH
69430: LD_INT 0
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 5
69439: NEG
69440: PUSH
69441: LD_INT 1
69443: NEG
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 5
69451: NEG
69452: PUSH
69453: LD_INT 2
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 3
69463: NEG
69464: PUSH
69465: LD_INT 2
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 3
69474: NEG
69475: PUSH
69476: LD_INT 3
69478: NEG
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 3
69486: NEG
69487: PUSH
69488: LD_INT 4
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 2
69498: NEG
69499: PUSH
69500: LD_INT 3
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 2
69510: NEG
69511: PUSH
69512: LD_INT 2
69514: NEG
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 3
69522: NEG
69523: PUSH
69524: LD_INT 2
69526: NEG
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 4
69534: NEG
69535: PUSH
69536: LD_INT 3
69538: NEG
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 4
69546: NEG
69547: PUSH
69548: LD_INT 4
69550: NEG
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 2
69558: NEG
69559: PUSH
69560: LD_INT 4
69562: NEG
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 4
69570: NEG
69571: PUSH
69572: LD_INT 2
69574: NEG
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 0
69582: PUSH
69583: LD_INT 4
69585: NEG
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 0
69593: PUSH
69594: LD_INT 5
69596: NEG
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 1
69604: PUSH
69605: LD_INT 4
69607: NEG
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 1
69615: PUSH
69616: LD_INT 3
69618: NEG
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 0
69626: PUSH
69627: LD_INT 3
69629: NEG
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 1
69637: NEG
69638: PUSH
69639: LD_INT 4
69641: NEG
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 1
69649: NEG
69650: PUSH
69651: LD_INT 5
69653: NEG
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 2
69661: PUSH
69662: LD_INT 3
69664: NEG
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 2
69672: NEG
69673: PUSH
69674: LD_INT 5
69676: NEG
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: LIST
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69729: LD_ADDR_VAR 0 31
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: LD_INT 4
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 0
69746: PUSH
69747: LD_INT 3
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 1
69756: PUSH
69757: LD_INT 4
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 1
69766: PUSH
69767: LD_INT 5
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: LD_INT 0
69776: PUSH
69777: LD_INT 5
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 1
69786: NEG
69787: PUSH
69788: LD_INT 4
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 1
69797: NEG
69798: PUSH
69799: LD_INT 3
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 2
69808: PUSH
69809: LD_INT 5
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 2
69818: NEG
69819: PUSH
69820: LD_INT 3
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 3
69829: NEG
69830: PUSH
69831: LD_INT 0
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 3
69840: NEG
69841: PUSH
69842: LD_INT 1
69844: NEG
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 2
69852: NEG
69853: PUSH
69854: LD_INT 0
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 2
69863: NEG
69864: PUSH
69865: LD_INT 1
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 3
69874: NEG
69875: PUSH
69876: LD_INT 1
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 4
69885: NEG
69886: PUSH
69887: LD_INT 0
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 4
69896: NEG
69897: PUSH
69898: LD_INT 1
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 4
69908: NEG
69909: PUSH
69910: LD_INT 2
69912: NEG
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 2
69920: NEG
69921: PUSH
69922: LD_INT 2
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 4
69931: NEG
69932: PUSH
69933: LD_INT 4
69935: NEG
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 4
69943: NEG
69944: PUSH
69945: LD_INT 5
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 3
69955: NEG
69956: PUSH
69957: LD_INT 4
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 3
69967: NEG
69968: PUSH
69969: LD_INT 3
69971: NEG
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 4
69979: NEG
69980: PUSH
69981: LD_INT 3
69983: NEG
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 5
69991: NEG
69992: PUSH
69993: LD_INT 4
69995: NEG
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 5
70003: NEG
70004: PUSH
70005: LD_INT 5
70007: NEG
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 3
70015: NEG
70016: PUSH
70017: LD_INT 5
70019: NEG
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 5
70027: NEG
70028: PUSH
70029: LD_INT 3
70031: NEG
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 0
70039: PUSH
70040: LD_INT 3
70042: NEG
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 0
70050: PUSH
70051: LD_INT 4
70053: NEG
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 1
70061: PUSH
70062: LD_INT 3
70064: NEG
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 1
70072: PUSH
70073: LD_INT 2
70075: NEG
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 0
70083: PUSH
70084: LD_INT 2
70086: NEG
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 1
70094: NEG
70095: PUSH
70096: LD_INT 3
70098: NEG
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 1
70106: NEG
70107: PUSH
70108: LD_INT 4
70110: NEG
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 2
70118: PUSH
70119: LD_INT 2
70121: NEG
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 2
70129: NEG
70130: PUSH
70131: LD_INT 4
70133: NEG
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 4
70141: PUSH
70142: LD_INT 0
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 4
70151: PUSH
70152: LD_INT 1
70154: NEG
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 5
70162: PUSH
70163: LD_INT 0
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 5
70172: PUSH
70173: LD_INT 1
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 4
70182: PUSH
70183: LD_INT 1
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 3
70192: PUSH
70193: LD_INT 0
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 3
70202: PUSH
70203: LD_INT 1
70205: NEG
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 3
70213: PUSH
70214: LD_INT 2
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 5
70224: PUSH
70225: LD_INT 2
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70279: LD_ADDR_VAR 0 32
70283: PUSH
70284: LD_INT 4
70286: NEG
70287: PUSH
70288: LD_INT 0
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 4
70297: NEG
70298: PUSH
70299: LD_INT 1
70301: NEG
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 3
70309: NEG
70310: PUSH
70311: LD_INT 0
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 3
70320: NEG
70321: PUSH
70322: LD_INT 1
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 4
70331: NEG
70332: PUSH
70333: LD_INT 1
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 5
70342: NEG
70343: PUSH
70344: LD_INT 0
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 5
70353: NEG
70354: PUSH
70355: LD_INT 1
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 5
70365: NEG
70366: PUSH
70367: LD_INT 2
70369: NEG
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 3
70377: NEG
70378: PUSH
70379: LD_INT 2
70381: PUSH
70382: EMPTY
70383: LIST
70384: LIST
70385: PUSH
70386: LD_INT 3
70388: NEG
70389: PUSH
70390: LD_INT 3
70392: NEG
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 3
70400: NEG
70401: PUSH
70402: LD_INT 4
70404: NEG
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 2
70412: NEG
70413: PUSH
70414: LD_INT 3
70416: NEG
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 2
70424: NEG
70425: PUSH
70426: LD_INT 2
70428: NEG
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 3
70436: NEG
70437: PUSH
70438: LD_INT 2
70440: NEG
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 4
70448: NEG
70449: PUSH
70450: LD_INT 3
70452: NEG
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 4
70460: NEG
70461: PUSH
70462: LD_INT 4
70464: NEG
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 2
70472: NEG
70473: PUSH
70474: LD_INT 4
70476: NEG
70477: PUSH
70478: EMPTY
70479: LIST
70480: LIST
70481: PUSH
70482: LD_INT 4
70484: NEG
70485: PUSH
70486: LD_INT 2
70488: NEG
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 0
70496: PUSH
70497: LD_INT 4
70499: NEG
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 0
70507: PUSH
70508: LD_INT 5
70510: NEG
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 1
70518: PUSH
70519: LD_INT 4
70521: NEG
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 1
70529: PUSH
70530: LD_INT 3
70532: NEG
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 0
70540: PUSH
70541: LD_INT 3
70543: NEG
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 1
70551: NEG
70552: PUSH
70553: LD_INT 4
70555: NEG
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 1
70563: NEG
70564: PUSH
70565: LD_INT 5
70567: NEG
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 2
70575: PUSH
70576: LD_INT 3
70578: NEG
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 2
70586: NEG
70587: PUSH
70588: LD_INT 5
70590: NEG
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 3
70598: PUSH
70599: LD_INT 0
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 3
70608: PUSH
70609: LD_INT 1
70611: NEG
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 4
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 4
70629: PUSH
70630: LD_INT 1
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 3
70639: PUSH
70640: LD_INT 1
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 2
70649: PUSH
70650: LD_INT 0
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 2
70659: PUSH
70660: LD_INT 1
70662: NEG
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 2
70670: PUSH
70671: LD_INT 2
70673: NEG
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 4
70681: PUSH
70682: LD_INT 2
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 4
70691: PUSH
70692: LD_INT 4
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 4
70701: PUSH
70702: LD_INT 3
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 5
70711: PUSH
70712: LD_INT 4
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 5
70721: PUSH
70722: LD_INT 5
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 4
70731: PUSH
70732: LD_INT 5
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 3
70741: PUSH
70742: LD_INT 4
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 3
70751: PUSH
70752: LD_INT 3
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 5
70761: PUSH
70762: LD_INT 3
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 3
70771: PUSH
70772: LD_INT 5
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: LIST
70791: LIST
70792: LIST
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70826: LD_ADDR_VAR 0 33
70830: PUSH
70831: LD_INT 4
70833: NEG
70834: PUSH
70835: LD_INT 4
70837: NEG
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: LD_INT 4
70845: NEG
70846: PUSH
70847: LD_INT 5
70849: NEG
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 3
70857: NEG
70858: PUSH
70859: LD_INT 4
70861: NEG
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 3
70869: NEG
70870: PUSH
70871: LD_INT 3
70873: NEG
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 4
70881: NEG
70882: PUSH
70883: LD_INT 3
70885: NEG
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 5
70893: NEG
70894: PUSH
70895: LD_INT 4
70897: NEG
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 5
70905: NEG
70906: PUSH
70907: LD_INT 5
70909: NEG
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 3
70917: NEG
70918: PUSH
70919: LD_INT 5
70921: NEG
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 5
70929: NEG
70930: PUSH
70931: LD_INT 3
70933: NEG
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 0
70941: PUSH
70942: LD_INT 3
70944: NEG
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 0
70952: PUSH
70953: LD_INT 4
70955: NEG
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 1
70963: PUSH
70964: LD_INT 3
70966: NEG
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 1
70974: PUSH
70975: LD_INT 2
70977: NEG
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 0
70985: PUSH
70986: LD_INT 2
70988: NEG
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 1
70996: NEG
70997: PUSH
70998: LD_INT 3
71000: NEG
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 1
71008: NEG
71009: PUSH
71010: LD_INT 4
71012: NEG
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: LD_INT 2
71020: PUSH
71021: LD_INT 2
71023: NEG
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: PUSH
71029: LD_INT 2
71031: NEG
71032: PUSH
71033: LD_INT 4
71035: NEG
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 4
71043: PUSH
71044: LD_INT 0
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 4
71053: PUSH
71054: LD_INT 1
71056: NEG
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 5
71064: PUSH
71065: LD_INT 0
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 5
71074: PUSH
71075: LD_INT 1
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 4
71084: PUSH
71085: LD_INT 1
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 3
71094: PUSH
71095: LD_INT 0
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 3
71104: PUSH
71105: LD_INT 1
71107: NEG
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 3
71115: PUSH
71116: LD_INT 2
71118: NEG
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 5
71126: PUSH
71127: LD_INT 2
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 3
71136: PUSH
71137: LD_INT 3
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 3
71146: PUSH
71147: LD_INT 2
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 4
71156: PUSH
71157: LD_INT 3
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 4
71166: PUSH
71167: LD_INT 4
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 3
71176: PUSH
71177: LD_INT 4
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 2
71186: PUSH
71187: LD_INT 3
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 2
71196: PUSH
71197: LD_INT 2
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 4
71206: PUSH
71207: LD_INT 2
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 2
71216: PUSH
71217: LD_INT 4
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 0
71226: PUSH
71227: LD_INT 4
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 0
71236: PUSH
71237: LD_INT 3
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 1
71246: PUSH
71247: LD_INT 4
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 1
71256: PUSH
71257: LD_INT 5
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 0
71266: PUSH
71267: LD_INT 5
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 1
71276: NEG
71277: PUSH
71278: LD_INT 4
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_INT 1
71287: NEG
71288: PUSH
71289: LD_INT 3
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 2
71298: PUSH
71299: LD_INT 5
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 2
71308: NEG
71309: PUSH
71310: LD_INT 3
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71364: LD_ADDR_VAR 0 34
71368: PUSH
71369: LD_INT 0
71371: PUSH
71372: LD_INT 4
71374: NEG
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 0
71382: PUSH
71383: LD_INT 5
71385: NEG
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_INT 1
71393: PUSH
71394: LD_INT 4
71396: NEG
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 1
71404: PUSH
71405: LD_INT 3
71407: NEG
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 0
71415: PUSH
71416: LD_INT 3
71418: NEG
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 1
71426: NEG
71427: PUSH
71428: LD_INT 4
71430: NEG
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 1
71438: NEG
71439: PUSH
71440: LD_INT 5
71442: NEG
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 2
71450: PUSH
71451: LD_INT 3
71453: NEG
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 2
71461: NEG
71462: PUSH
71463: LD_INT 5
71465: NEG
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 3
71473: PUSH
71474: LD_INT 0
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 3
71483: PUSH
71484: LD_INT 1
71486: NEG
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 4
71494: PUSH
71495: LD_INT 0
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 4
71504: PUSH
71505: LD_INT 1
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 3
71514: PUSH
71515: LD_INT 1
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PUSH
71522: LD_INT 2
71524: PUSH
71525: LD_INT 0
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 2
71534: PUSH
71535: LD_INT 1
71537: NEG
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 2
71545: PUSH
71546: LD_INT 2
71548: NEG
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: PUSH
71554: LD_INT 4
71556: PUSH
71557: LD_INT 2
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 4
71566: PUSH
71567: LD_INT 4
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: PUSH
71574: LD_INT 4
71576: PUSH
71577: LD_INT 3
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 5
71586: PUSH
71587: LD_INT 4
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 5
71596: PUSH
71597: LD_INT 5
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 4
71606: PUSH
71607: LD_INT 5
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: PUSH
71614: LD_INT 3
71616: PUSH
71617: LD_INT 4
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 3
71626: PUSH
71627: LD_INT 3
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 5
71636: PUSH
71637: LD_INT 3
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 3
71646: PUSH
71647: LD_INT 5
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 0
71656: PUSH
71657: LD_INT 3
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 0
71666: PUSH
71667: LD_INT 2
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 1
71676: PUSH
71677: LD_INT 3
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 1
71686: PUSH
71687: LD_INT 4
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 0
71696: PUSH
71697: LD_INT 4
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: LD_INT 1
71706: NEG
71707: PUSH
71708: LD_INT 3
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 1
71717: NEG
71718: PUSH
71719: LD_INT 2
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: LD_INT 2
71728: PUSH
71729: LD_INT 4
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: PUSH
71736: LD_INT 2
71738: NEG
71739: PUSH
71740: LD_INT 2
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 4
71749: NEG
71750: PUSH
71751: LD_INT 0
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 4
71760: NEG
71761: PUSH
71762: LD_INT 1
71764: NEG
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 3
71772: NEG
71773: PUSH
71774: LD_INT 0
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 3
71783: NEG
71784: PUSH
71785: LD_INT 1
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: LD_INT 4
71794: NEG
71795: PUSH
71796: LD_INT 1
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 5
71805: NEG
71806: PUSH
71807: LD_INT 0
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: PUSH
71814: LD_INT 5
71816: NEG
71817: PUSH
71818: LD_INT 1
71820: NEG
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 5
71828: NEG
71829: PUSH
71830: LD_INT 2
71832: NEG
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: LD_INT 3
71840: NEG
71841: PUSH
71842: LD_INT 2
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: ST_TO_ADDR
// end ; end ;
71896: GO 71899
71898: POP
// case btype of b_depot , b_warehouse :
71899: LD_VAR 0 1
71903: PUSH
71904: LD_INT 0
71906: DOUBLE
71907: EQUAL
71908: IFTRUE 71918
71910: LD_INT 1
71912: DOUBLE
71913: EQUAL
71914: IFTRUE 71918
71916: GO 72119
71918: POP
// case nation of nation_american :
71919: LD_VAR 0 5
71923: PUSH
71924: LD_INT 1
71926: DOUBLE
71927: EQUAL
71928: IFTRUE 71932
71930: GO 71988
71932: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71933: LD_ADDR_VAR 0 9
71937: PUSH
71938: LD_VAR 0 11
71942: PUSH
71943: LD_VAR 0 12
71947: PUSH
71948: LD_VAR 0 13
71952: PUSH
71953: LD_VAR 0 14
71957: PUSH
71958: LD_VAR 0 15
71962: PUSH
71963: LD_VAR 0 16
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: PUSH
71976: LD_VAR 0 4
71980: PUSH
71981: LD_INT 1
71983: PLUS
71984: ARRAY
71985: ST_TO_ADDR
71986: GO 72117
71988: LD_INT 2
71990: DOUBLE
71991: EQUAL
71992: IFTRUE 71996
71994: GO 72052
71996: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71997: LD_ADDR_VAR 0 9
72001: PUSH
72002: LD_VAR 0 17
72006: PUSH
72007: LD_VAR 0 18
72011: PUSH
72012: LD_VAR 0 19
72016: PUSH
72017: LD_VAR 0 20
72021: PUSH
72022: LD_VAR 0 21
72026: PUSH
72027: LD_VAR 0 22
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: PUSH
72040: LD_VAR 0 4
72044: PUSH
72045: LD_INT 1
72047: PLUS
72048: ARRAY
72049: ST_TO_ADDR
72050: GO 72117
72052: LD_INT 3
72054: DOUBLE
72055: EQUAL
72056: IFTRUE 72060
72058: GO 72116
72060: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72061: LD_ADDR_VAR 0 9
72065: PUSH
72066: LD_VAR 0 23
72070: PUSH
72071: LD_VAR 0 24
72075: PUSH
72076: LD_VAR 0 25
72080: PUSH
72081: LD_VAR 0 26
72085: PUSH
72086: LD_VAR 0 27
72090: PUSH
72091: LD_VAR 0 28
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: PUSH
72104: LD_VAR 0 4
72108: PUSH
72109: LD_INT 1
72111: PLUS
72112: ARRAY
72113: ST_TO_ADDR
72114: GO 72117
72116: POP
72117: GO 72672
72119: LD_INT 2
72121: DOUBLE
72122: EQUAL
72123: IFTRUE 72133
72125: LD_INT 3
72127: DOUBLE
72128: EQUAL
72129: IFTRUE 72133
72131: GO 72189
72133: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72134: LD_ADDR_VAR 0 9
72138: PUSH
72139: LD_VAR 0 29
72143: PUSH
72144: LD_VAR 0 30
72148: PUSH
72149: LD_VAR 0 31
72153: PUSH
72154: LD_VAR 0 32
72158: PUSH
72159: LD_VAR 0 33
72163: PUSH
72164: LD_VAR 0 34
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: PUSH
72177: LD_VAR 0 4
72181: PUSH
72182: LD_INT 1
72184: PLUS
72185: ARRAY
72186: ST_TO_ADDR
72187: GO 72672
72189: LD_INT 16
72191: DOUBLE
72192: EQUAL
72193: IFTRUE 72251
72195: LD_INT 17
72197: DOUBLE
72198: EQUAL
72199: IFTRUE 72251
72201: LD_INT 18
72203: DOUBLE
72204: EQUAL
72205: IFTRUE 72251
72207: LD_INT 19
72209: DOUBLE
72210: EQUAL
72211: IFTRUE 72251
72213: LD_INT 22
72215: DOUBLE
72216: EQUAL
72217: IFTRUE 72251
72219: LD_INT 20
72221: DOUBLE
72222: EQUAL
72223: IFTRUE 72251
72225: LD_INT 21
72227: DOUBLE
72228: EQUAL
72229: IFTRUE 72251
72231: LD_INT 23
72233: DOUBLE
72234: EQUAL
72235: IFTRUE 72251
72237: LD_INT 24
72239: DOUBLE
72240: EQUAL
72241: IFTRUE 72251
72243: LD_INT 25
72245: DOUBLE
72246: EQUAL
72247: IFTRUE 72251
72249: GO 72307
72251: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72252: LD_ADDR_VAR 0 9
72256: PUSH
72257: LD_VAR 0 35
72261: PUSH
72262: LD_VAR 0 36
72266: PUSH
72267: LD_VAR 0 37
72271: PUSH
72272: LD_VAR 0 38
72276: PUSH
72277: LD_VAR 0 39
72281: PUSH
72282: LD_VAR 0 40
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: PUSH
72295: LD_VAR 0 4
72299: PUSH
72300: LD_INT 1
72302: PLUS
72303: ARRAY
72304: ST_TO_ADDR
72305: GO 72672
72307: LD_INT 6
72309: DOUBLE
72310: EQUAL
72311: IFTRUE 72363
72313: LD_INT 7
72315: DOUBLE
72316: EQUAL
72317: IFTRUE 72363
72319: LD_INT 8
72321: DOUBLE
72322: EQUAL
72323: IFTRUE 72363
72325: LD_INT 13
72327: DOUBLE
72328: EQUAL
72329: IFTRUE 72363
72331: LD_INT 12
72333: DOUBLE
72334: EQUAL
72335: IFTRUE 72363
72337: LD_INT 15
72339: DOUBLE
72340: EQUAL
72341: IFTRUE 72363
72343: LD_INT 11
72345: DOUBLE
72346: EQUAL
72347: IFTRUE 72363
72349: LD_INT 14
72351: DOUBLE
72352: EQUAL
72353: IFTRUE 72363
72355: LD_INT 10
72357: DOUBLE
72358: EQUAL
72359: IFTRUE 72363
72361: GO 72419
72363: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72364: LD_ADDR_VAR 0 9
72368: PUSH
72369: LD_VAR 0 41
72373: PUSH
72374: LD_VAR 0 42
72378: PUSH
72379: LD_VAR 0 43
72383: PUSH
72384: LD_VAR 0 44
72388: PUSH
72389: LD_VAR 0 45
72393: PUSH
72394: LD_VAR 0 46
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: PUSH
72407: LD_VAR 0 4
72411: PUSH
72412: LD_INT 1
72414: PLUS
72415: ARRAY
72416: ST_TO_ADDR
72417: GO 72672
72419: LD_INT 36
72421: DOUBLE
72422: EQUAL
72423: IFTRUE 72427
72425: GO 72483
72427: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72428: LD_ADDR_VAR 0 9
72432: PUSH
72433: LD_VAR 0 47
72437: PUSH
72438: LD_VAR 0 48
72442: PUSH
72443: LD_VAR 0 49
72447: PUSH
72448: LD_VAR 0 50
72452: PUSH
72453: LD_VAR 0 51
72457: PUSH
72458: LD_VAR 0 52
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: PUSH
72471: LD_VAR 0 4
72475: PUSH
72476: LD_INT 1
72478: PLUS
72479: ARRAY
72480: ST_TO_ADDR
72481: GO 72672
72483: LD_INT 4
72485: DOUBLE
72486: EQUAL
72487: IFTRUE 72509
72489: LD_INT 5
72491: DOUBLE
72492: EQUAL
72493: IFTRUE 72509
72495: LD_INT 34
72497: DOUBLE
72498: EQUAL
72499: IFTRUE 72509
72501: LD_INT 37
72503: DOUBLE
72504: EQUAL
72505: IFTRUE 72509
72507: GO 72565
72509: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72510: LD_ADDR_VAR 0 9
72514: PUSH
72515: LD_VAR 0 53
72519: PUSH
72520: LD_VAR 0 54
72524: PUSH
72525: LD_VAR 0 55
72529: PUSH
72530: LD_VAR 0 56
72534: PUSH
72535: LD_VAR 0 57
72539: PUSH
72540: LD_VAR 0 58
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: LIST
72549: LIST
72550: LIST
72551: LIST
72552: PUSH
72553: LD_VAR 0 4
72557: PUSH
72558: LD_INT 1
72560: PLUS
72561: ARRAY
72562: ST_TO_ADDR
72563: GO 72672
72565: LD_INT 31
72567: DOUBLE
72568: EQUAL
72569: IFTRUE 72615
72571: LD_INT 32
72573: DOUBLE
72574: EQUAL
72575: IFTRUE 72615
72577: LD_INT 33
72579: DOUBLE
72580: EQUAL
72581: IFTRUE 72615
72583: LD_INT 27
72585: DOUBLE
72586: EQUAL
72587: IFTRUE 72615
72589: LD_INT 26
72591: DOUBLE
72592: EQUAL
72593: IFTRUE 72615
72595: LD_INT 28
72597: DOUBLE
72598: EQUAL
72599: IFTRUE 72615
72601: LD_INT 29
72603: DOUBLE
72604: EQUAL
72605: IFTRUE 72615
72607: LD_INT 30
72609: DOUBLE
72610: EQUAL
72611: IFTRUE 72615
72613: GO 72671
72615: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72616: LD_ADDR_VAR 0 9
72620: PUSH
72621: LD_VAR 0 59
72625: PUSH
72626: LD_VAR 0 60
72630: PUSH
72631: LD_VAR 0 61
72635: PUSH
72636: LD_VAR 0 62
72640: PUSH
72641: LD_VAR 0 63
72645: PUSH
72646: LD_VAR 0 64
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: PUSH
72659: LD_VAR 0 4
72663: PUSH
72664: LD_INT 1
72666: PLUS
72667: ARRAY
72668: ST_TO_ADDR
72669: GO 72672
72671: POP
// temp_list2 = [ ] ;
72672: LD_ADDR_VAR 0 10
72676: PUSH
72677: EMPTY
72678: ST_TO_ADDR
// for i in temp_list do
72679: LD_ADDR_VAR 0 8
72683: PUSH
72684: LD_VAR 0 9
72688: PUSH
72689: FOR_IN
72690: IFFALSE 72742
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72692: LD_ADDR_VAR 0 10
72696: PUSH
72697: LD_VAR 0 10
72701: PUSH
72702: LD_VAR 0 8
72706: PUSH
72707: LD_INT 1
72709: ARRAY
72710: PUSH
72711: LD_VAR 0 2
72715: PLUS
72716: PUSH
72717: LD_VAR 0 8
72721: PUSH
72722: LD_INT 2
72724: ARRAY
72725: PUSH
72726: LD_VAR 0 3
72730: PLUS
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: EMPTY
72737: LIST
72738: ADD
72739: ST_TO_ADDR
72740: GO 72689
72742: POP
72743: POP
// result = temp_list2 ;
72744: LD_ADDR_VAR 0 7
72748: PUSH
72749: LD_VAR 0 10
72753: ST_TO_ADDR
// end ;
72754: LD_VAR 0 7
72758: RET
// export function EnemyInRange ( unit , dist ) ; begin
72759: LD_INT 0
72761: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72762: LD_ADDR_VAR 0 3
72766: PUSH
72767: LD_VAR 0 1
72771: PPUSH
72772: CALL_OW 255
72776: PPUSH
72777: LD_VAR 0 1
72781: PPUSH
72782: CALL_OW 250
72786: PPUSH
72787: LD_VAR 0 1
72791: PPUSH
72792: CALL_OW 251
72796: PPUSH
72797: LD_VAR 0 2
72801: PPUSH
72802: CALL 46132 0 4
72806: PUSH
72807: LD_INT 4
72809: ARRAY
72810: ST_TO_ADDR
// end ;
72811: LD_VAR 0 3
72815: RET
// export function PlayerSeeMe ( unit ) ; begin
72816: LD_INT 0
72818: PPUSH
// result := See ( your_side , unit ) ;
72819: LD_ADDR_VAR 0 2
72823: PUSH
72824: LD_OWVAR 2
72828: PPUSH
72829: LD_VAR 0 1
72833: PPUSH
72834: CALL_OW 292
72838: ST_TO_ADDR
// end ;
72839: LD_VAR 0 2
72843: RET
// export function ReverseDir ( unit ) ; begin
72844: LD_INT 0
72846: PPUSH
// if not unit then
72847: LD_VAR 0 1
72851: NOT
72852: IFFALSE 72856
// exit ;
72854: GO 72879
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72856: LD_ADDR_VAR 0 2
72860: PUSH
72861: LD_VAR 0 1
72865: PPUSH
72866: CALL_OW 254
72870: PUSH
72871: LD_INT 3
72873: PLUS
72874: PUSH
72875: LD_INT 6
72877: MOD
72878: ST_TO_ADDR
// end ;
72879: LD_VAR 0 2
72883: RET
// export function ReverseArray ( array ) ; var i ; begin
72884: LD_INT 0
72886: PPUSH
72887: PPUSH
// if not array then
72888: LD_VAR 0 1
72892: NOT
72893: IFFALSE 72897
// exit ;
72895: GO 72952
// result := [ ] ;
72897: LD_ADDR_VAR 0 2
72901: PUSH
72902: EMPTY
72903: ST_TO_ADDR
// for i := array downto 1 do
72904: LD_ADDR_VAR 0 3
72908: PUSH
72909: DOUBLE
72910: LD_VAR 0 1
72914: INC
72915: ST_TO_ADDR
72916: LD_INT 1
72918: PUSH
72919: FOR_DOWNTO
72920: IFFALSE 72950
// result := Join ( result , array [ i ] ) ;
72922: LD_ADDR_VAR 0 2
72926: PUSH
72927: LD_VAR 0 2
72931: PPUSH
72932: LD_VAR 0 1
72936: PUSH
72937: LD_VAR 0 3
72941: ARRAY
72942: PPUSH
72943: CALL 77595 0 2
72947: ST_TO_ADDR
72948: GO 72919
72950: POP
72951: POP
// end ;
72952: LD_VAR 0 2
72956: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72957: LD_INT 0
72959: PPUSH
72960: PPUSH
72961: PPUSH
72962: PPUSH
72963: PPUSH
72964: PPUSH
// if not unit or not hexes then
72965: LD_VAR 0 1
72969: NOT
72970: PUSH
72971: LD_VAR 0 2
72975: NOT
72976: OR
72977: IFFALSE 72981
// exit ;
72979: GO 73104
// dist := 9999 ;
72981: LD_ADDR_VAR 0 5
72985: PUSH
72986: LD_INT 9999
72988: ST_TO_ADDR
// for i = 1 to hexes do
72989: LD_ADDR_VAR 0 4
72993: PUSH
72994: DOUBLE
72995: LD_INT 1
72997: DEC
72998: ST_TO_ADDR
72999: LD_VAR 0 2
73003: PUSH
73004: FOR_TO
73005: IFFALSE 73092
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73007: LD_ADDR_VAR 0 6
73011: PUSH
73012: LD_VAR 0 1
73016: PPUSH
73017: LD_VAR 0 2
73021: PUSH
73022: LD_VAR 0 4
73026: ARRAY
73027: PUSH
73028: LD_INT 1
73030: ARRAY
73031: PPUSH
73032: LD_VAR 0 2
73036: PUSH
73037: LD_VAR 0 4
73041: ARRAY
73042: PUSH
73043: LD_INT 2
73045: ARRAY
73046: PPUSH
73047: CALL_OW 297
73051: ST_TO_ADDR
// if tdist < dist then
73052: LD_VAR 0 6
73056: PUSH
73057: LD_VAR 0 5
73061: LESS
73062: IFFALSE 73090
// begin hex := hexes [ i ] ;
73064: LD_ADDR_VAR 0 8
73068: PUSH
73069: LD_VAR 0 2
73073: PUSH
73074: LD_VAR 0 4
73078: ARRAY
73079: ST_TO_ADDR
// dist := tdist ;
73080: LD_ADDR_VAR 0 5
73084: PUSH
73085: LD_VAR 0 6
73089: ST_TO_ADDR
// end ; end ;
73090: GO 73004
73092: POP
73093: POP
// result := hex ;
73094: LD_ADDR_VAR 0 3
73098: PUSH
73099: LD_VAR 0 8
73103: ST_TO_ADDR
// end ;
73104: LD_VAR 0 3
73108: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73109: LD_INT 0
73111: PPUSH
73112: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73113: LD_VAR 0 1
73117: NOT
73118: PUSH
73119: LD_VAR 0 1
73123: PUSH
73124: LD_INT 21
73126: PUSH
73127: LD_INT 2
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 23
73136: PUSH
73137: LD_INT 2
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PPUSH
73148: CALL_OW 69
73152: IN
73153: NOT
73154: OR
73155: IFFALSE 73159
// exit ;
73157: GO 73206
// for i = 1 to 3 do
73159: LD_ADDR_VAR 0 3
73163: PUSH
73164: DOUBLE
73165: LD_INT 1
73167: DEC
73168: ST_TO_ADDR
73169: LD_INT 3
73171: PUSH
73172: FOR_TO
73173: IFFALSE 73204
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73175: LD_VAR 0 1
73179: PPUSH
73180: CALL_OW 250
73184: PPUSH
73185: LD_VAR 0 1
73189: PPUSH
73190: CALL_OW 251
73194: PPUSH
73195: LD_INT 1
73197: PPUSH
73198: CALL_OW 453
73202: GO 73172
73204: POP
73205: POP
// end ;
73206: LD_VAR 0 2
73210: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73211: LD_INT 0
73213: PPUSH
73214: PPUSH
73215: PPUSH
73216: PPUSH
73217: PPUSH
73218: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73219: LD_VAR 0 1
73223: NOT
73224: PUSH
73225: LD_VAR 0 2
73229: NOT
73230: OR
73231: PUSH
73232: LD_VAR 0 1
73236: PPUSH
73237: CALL_OW 314
73241: OR
73242: IFFALSE 73246
// exit ;
73244: GO 73713
// if GetLives ( i ) < 250 then
73246: LD_VAR 0 4
73250: PPUSH
73251: CALL_OW 256
73255: PUSH
73256: LD_INT 250
73258: LESS
73259: IFFALSE 73272
// begin ComAutodestruct ( i ) ;
73261: LD_VAR 0 4
73265: PPUSH
73266: CALL 73109 0 1
// exit ;
73270: GO 73713
// end ; x := GetX ( enemy_unit ) ;
73272: LD_ADDR_VAR 0 7
73276: PUSH
73277: LD_VAR 0 2
73281: PPUSH
73282: CALL_OW 250
73286: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73287: LD_ADDR_VAR 0 8
73291: PUSH
73292: LD_VAR 0 2
73296: PPUSH
73297: CALL_OW 251
73301: ST_TO_ADDR
// if not x or not y then
73302: LD_VAR 0 7
73306: NOT
73307: PUSH
73308: LD_VAR 0 8
73312: NOT
73313: OR
73314: IFFALSE 73318
// exit ;
73316: GO 73713
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73318: LD_ADDR_VAR 0 6
73322: PUSH
73323: LD_VAR 0 7
73327: PPUSH
73328: LD_INT 0
73330: PPUSH
73331: LD_INT 4
73333: PPUSH
73334: CALL_OW 272
73338: PUSH
73339: LD_VAR 0 8
73343: PPUSH
73344: LD_INT 0
73346: PPUSH
73347: LD_INT 4
73349: PPUSH
73350: CALL_OW 273
73354: PUSH
73355: EMPTY
73356: LIST
73357: LIST
73358: PUSH
73359: LD_VAR 0 7
73363: PPUSH
73364: LD_INT 1
73366: PPUSH
73367: LD_INT 4
73369: PPUSH
73370: CALL_OW 272
73374: PUSH
73375: LD_VAR 0 8
73379: PPUSH
73380: LD_INT 1
73382: PPUSH
73383: LD_INT 4
73385: PPUSH
73386: CALL_OW 273
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: PUSH
73395: LD_VAR 0 7
73399: PPUSH
73400: LD_INT 2
73402: PPUSH
73403: LD_INT 4
73405: PPUSH
73406: CALL_OW 272
73410: PUSH
73411: LD_VAR 0 8
73415: PPUSH
73416: LD_INT 2
73418: PPUSH
73419: LD_INT 4
73421: PPUSH
73422: CALL_OW 273
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_VAR 0 7
73435: PPUSH
73436: LD_INT 3
73438: PPUSH
73439: LD_INT 4
73441: PPUSH
73442: CALL_OW 272
73446: PUSH
73447: LD_VAR 0 8
73451: PPUSH
73452: LD_INT 3
73454: PPUSH
73455: LD_INT 4
73457: PPUSH
73458: CALL_OW 273
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_VAR 0 7
73471: PPUSH
73472: LD_INT 4
73474: PPUSH
73475: LD_INT 4
73477: PPUSH
73478: CALL_OW 272
73482: PUSH
73483: LD_VAR 0 8
73487: PPUSH
73488: LD_INT 4
73490: PPUSH
73491: LD_INT 4
73493: PPUSH
73494: CALL_OW 273
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PUSH
73503: LD_VAR 0 7
73507: PPUSH
73508: LD_INT 5
73510: PPUSH
73511: LD_INT 4
73513: PPUSH
73514: CALL_OW 272
73518: PUSH
73519: LD_VAR 0 8
73523: PPUSH
73524: LD_INT 5
73526: PPUSH
73527: LD_INT 4
73529: PPUSH
73530: CALL_OW 273
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: LIST
73543: LIST
73544: LIST
73545: LIST
73546: ST_TO_ADDR
// for i = tmp downto 1 do
73547: LD_ADDR_VAR 0 4
73551: PUSH
73552: DOUBLE
73553: LD_VAR 0 6
73557: INC
73558: ST_TO_ADDR
73559: LD_INT 1
73561: PUSH
73562: FOR_DOWNTO
73563: IFFALSE 73664
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73565: LD_VAR 0 6
73569: PUSH
73570: LD_VAR 0 4
73574: ARRAY
73575: PUSH
73576: LD_INT 1
73578: ARRAY
73579: PPUSH
73580: LD_VAR 0 6
73584: PUSH
73585: LD_VAR 0 4
73589: ARRAY
73590: PUSH
73591: LD_INT 2
73593: ARRAY
73594: PPUSH
73595: CALL_OW 488
73599: NOT
73600: PUSH
73601: LD_VAR 0 6
73605: PUSH
73606: LD_VAR 0 4
73610: ARRAY
73611: PUSH
73612: LD_INT 1
73614: ARRAY
73615: PPUSH
73616: LD_VAR 0 6
73620: PUSH
73621: LD_VAR 0 4
73625: ARRAY
73626: PUSH
73627: LD_INT 2
73629: ARRAY
73630: PPUSH
73631: CALL_OW 428
73635: PUSH
73636: LD_INT 0
73638: NONEQUAL
73639: OR
73640: IFFALSE 73662
// tmp := Delete ( tmp , i ) ;
73642: LD_ADDR_VAR 0 6
73646: PUSH
73647: LD_VAR 0 6
73651: PPUSH
73652: LD_VAR 0 4
73656: PPUSH
73657: CALL_OW 3
73661: ST_TO_ADDR
73662: GO 73562
73664: POP
73665: POP
// j := GetClosestHex ( unit , tmp ) ;
73666: LD_ADDR_VAR 0 5
73670: PUSH
73671: LD_VAR 0 1
73675: PPUSH
73676: LD_VAR 0 6
73680: PPUSH
73681: CALL 72957 0 2
73685: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73686: LD_VAR 0 1
73690: PPUSH
73691: LD_VAR 0 5
73695: PUSH
73696: LD_INT 1
73698: ARRAY
73699: PPUSH
73700: LD_VAR 0 5
73704: PUSH
73705: LD_INT 2
73707: ARRAY
73708: PPUSH
73709: CALL_OW 111
// end ;
73713: LD_VAR 0 3
73717: RET
// export function PrepareApemanSoldier ( ) ; begin
73718: LD_INT 0
73720: PPUSH
// uc_nation := 0 ;
73721: LD_ADDR_OWVAR 21
73725: PUSH
73726: LD_INT 0
73728: ST_TO_ADDR
// hc_sex := sex_male ;
73729: LD_ADDR_OWVAR 27
73733: PUSH
73734: LD_INT 1
73736: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73737: LD_ADDR_OWVAR 28
73741: PUSH
73742: LD_INT 15
73744: ST_TO_ADDR
// hc_gallery :=  ;
73745: LD_ADDR_OWVAR 33
73749: PUSH
73750: LD_STRING 
73752: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73753: LD_ADDR_OWVAR 31
73757: PUSH
73758: LD_INT 0
73760: PPUSH
73761: LD_INT 3
73763: PPUSH
73764: CALL_OW 12
73768: PUSH
73769: LD_INT 0
73771: PPUSH
73772: LD_INT 3
73774: PPUSH
73775: CALL_OW 12
73779: PUSH
73780: LD_INT 0
73782: PUSH
73783: LD_INT 0
73785: PUSH
73786: EMPTY
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: ST_TO_ADDR
// end ;
73792: LD_VAR 0 1
73796: RET
// export function PrepareApemanEngineer ( ) ; begin
73797: LD_INT 0
73799: PPUSH
// uc_nation := 0 ;
73800: LD_ADDR_OWVAR 21
73804: PUSH
73805: LD_INT 0
73807: ST_TO_ADDR
// hc_sex := sex_male ;
73808: LD_ADDR_OWVAR 27
73812: PUSH
73813: LD_INT 1
73815: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73816: LD_ADDR_OWVAR 28
73820: PUSH
73821: LD_INT 16
73823: ST_TO_ADDR
// hc_gallery :=  ;
73824: LD_ADDR_OWVAR 33
73828: PUSH
73829: LD_STRING 
73831: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73832: LD_ADDR_OWVAR 31
73836: PUSH
73837: LD_INT 0
73839: PPUSH
73840: LD_INT 3
73842: PPUSH
73843: CALL_OW 12
73847: PUSH
73848: LD_INT 0
73850: PPUSH
73851: LD_INT 3
73853: PPUSH
73854: CALL_OW 12
73858: PUSH
73859: LD_INT 0
73861: PUSH
73862: LD_INT 0
73864: PUSH
73865: EMPTY
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: ST_TO_ADDR
// end ;
73871: LD_VAR 0 1
73875: RET
// export function PrepareApeman ( agressivity ) ; begin
73876: LD_INT 0
73878: PPUSH
// uc_side := 0 ;
73879: LD_ADDR_OWVAR 20
73883: PUSH
73884: LD_INT 0
73886: ST_TO_ADDR
// uc_nation := 0 ;
73887: LD_ADDR_OWVAR 21
73891: PUSH
73892: LD_INT 0
73894: ST_TO_ADDR
// hc_sex := sex_male ;
73895: LD_ADDR_OWVAR 27
73899: PUSH
73900: LD_INT 1
73902: ST_TO_ADDR
// hc_class := class_apeman ;
73903: LD_ADDR_OWVAR 28
73907: PUSH
73908: LD_INT 12
73910: ST_TO_ADDR
// hc_gallery :=  ;
73911: LD_ADDR_OWVAR 33
73915: PUSH
73916: LD_STRING 
73918: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73919: LD_ADDR_OWVAR 35
73923: PUSH
73924: LD_VAR 0 1
73928: NEG
73929: PPUSH
73930: LD_VAR 0 1
73934: PPUSH
73935: CALL_OW 12
73939: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73940: LD_ADDR_OWVAR 31
73944: PUSH
73945: LD_INT 0
73947: PPUSH
73948: LD_INT 3
73950: PPUSH
73951: CALL_OW 12
73955: PUSH
73956: LD_INT 0
73958: PPUSH
73959: LD_INT 3
73961: PPUSH
73962: CALL_OW 12
73966: PUSH
73967: LD_INT 0
73969: PUSH
73970: LD_INT 0
73972: PUSH
73973: EMPTY
73974: LIST
73975: LIST
73976: LIST
73977: LIST
73978: ST_TO_ADDR
// end ;
73979: LD_VAR 0 2
73983: RET
// export function PrepareTiger ( agressivity ) ; begin
73984: LD_INT 0
73986: PPUSH
// uc_side := 0 ;
73987: LD_ADDR_OWVAR 20
73991: PUSH
73992: LD_INT 0
73994: ST_TO_ADDR
// uc_nation := 0 ;
73995: LD_ADDR_OWVAR 21
73999: PUSH
74000: LD_INT 0
74002: ST_TO_ADDR
// hc_class := class_tiger ;
74003: LD_ADDR_OWVAR 28
74007: PUSH
74008: LD_INT 14
74010: ST_TO_ADDR
// hc_gallery :=  ;
74011: LD_ADDR_OWVAR 33
74015: PUSH
74016: LD_STRING 
74018: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74019: LD_ADDR_OWVAR 35
74023: PUSH
74024: LD_VAR 0 1
74028: NEG
74029: PPUSH
74030: LD_VAR 0 1
74034: PPUSH
74035: CALL_OW 12
74039: ST_TO_ADDR
// end ;
74040: LD_VAR 0 2
74044: RET
// export function PrepareEnchidna ( ) ; begin
74045: LD_INT 0
74047: PPUSH
// uc_side := 0 ;
74048: LD_ADDR_OWVAR 20
74052: PUSH
74053: LD_INT 0
74055: ST_TO_ADDR
// uc_nation := 0 ;
74056: LD_ADDR_OWVAR 21
74060: PUSH
74061: LD_INT 0
74063: ST_TO_ADDR
// hc_class := class_baggie ;
74064: LD_ADDR_OWVAR 28
74068: PUSH
74069: LD_INT 13
74071: ST_TO_ADDR
// hc_gallery :=  ;
74072: LD_ADDR_OWVAR 33
74076: PUSH
74077: LD_STRING 
74079: ST_TO_ADDR
// end ;
74080: LD_VAR 0 1
74084: RET
// export function PrepareFrog ( ) ; begin
74085: LD_INT 0
74087: PPUSH
// uc_side := 0 ;
74088: LD_ADDR_OWVAR 20
74092: PUSH
74093: LD_INT 0
74095: ST_TO_ADDR
// uc_nation := 0 ;
74096: LD_ADDR_OWVAR 21
74100: PUSH
74101: LD_INT 0
74103: ST_TO_ADDR
// hc_class := class_frog ;
74104: LD_ADDR_OWVAR 28
74108: PUSH
74109: LD_INT 19
74111: ST_TO_ADDR
// hc_gallery :=  ;
74112: LD_ADDR_OWVAR 33
74116: PUSH
74117: LD_STRING 
74119: ST_TO_ADDR
// end ;
74120: LD_VAR 0 1
74124: RET
// export function PrepareFish ( ) ; begin
74125: LD_INT 0
74127: PPUSH
// uc_side := 0 ;
74128: LD_ADDR_OWVAR 20
74132: PUSH
74133: LD_INT 0
74135: ST_TO_ADDR
// uc_nation := 0 ;
74136: LD_ADDR_OWVAR 21
74140: PUSH
74141: LD_INT 0
74143: ST_TO_ADDR
// hc_class := class_fish ;
74144: LD_ADDR_OWVAR 28
74148: PUSH
74149: LD_INT 20
74151: ST_TO_ADDR
// hc_gallery :=  ;
74152: LD_ADDR_OWVAR 33
74156: PUSH
74157: LD_STRING 
74159: ST_TO_ADDR
// end ;
74160: LD_VAR 0 1
74164: RET
// export function PrepareBird ( ) ; begin
74165: LD_INT 0
74167: PPUSH
// uc_side := 0 ;
74168: LD_ADDR_OWVAR 20
74172: PUSH
74173: LD_INT 0
74175: ST_TO_ADDR
// uc_nation := 0 ;
74176: LD_ADDR_OWVAR 21
74180: PUSH
74181: LD_INT 0
74183: ST_TO_ADDR
// hc_class := class_phororhacos ;
74184: LD_ADDR_OWVAR 28
74188: PUSH
74189: LD_INT 18
74191: ST_TO_ADDR
// hc_gallery :=  ;
74192: LD_ADDR_OWVAR 33
74196: PUSH
74197: LD_STRING 
74199: ST_TO_ADDR
// end ;
74200: LD_VAR 0 1
74204: RET
// export function PrepareHorse ( ) ; begin
74205: LD_INT 0
74207: PPUSH
// uc_side := 0 ;
74208: LD_ADDR_OWVAR 20
74212: PUSH
74213: LD_INT 0
74215: ST_TO_ADDR
// uc_nation := 0 ;
74216: LD_ADDR_OWVAR 21
74220: PUSH
74221: LD_INT 0
74223: ST_TO_ADDR
// hc_class := class_horse ;
74224: LD_ADDR_OWVAR 28
74228: PUSH
74229: LD_INT 21
74231: ST_TO_ADDR
// hc_gallery :=  ;
74232: LD_ADDR_OWVAR 33
74236: PUSH
74237: LD_STRING 
74239: ST_TO_ADDR
// end ;
74240: LD_VAR 0 1
74244: RET
// export function PrepareMastodont ( ) ; begin
74245: LD_INT 0
74247: PPUSH
// uc_side := 0 ;
74248: LD_ADDR_OWVAR 20
74252: PUSH
74253: LD_INT 0
74255: ST_TO_ADDR
// uc_nation := 0 ;
74256: LD_ADDR_OWVAR 21
74260: PUSH
74261: LD_INT 0
74263: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74264: LD_ADDR_OWVAR 37
74268: PUSH
74269: LD_INT 31
74271: ST_TO_ADDR
// vc_control := control_rider ;
74272: LD_ADDR_OWVAR 38
74276: PUSH
74277: LD_INT 4
74279: ST_TO_ADDR
// end ;
74280: LD_VAR 0 1
74284: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74285: LD_INT 0
74287: PPUSH
74288: PPUSH
74289: PPUSH
// uc_side = 0 ;
74290: LD_ADDR_OWVAR 20
74294: PUSH
74295: LD_INT 0
74297: ST_TO_ADDR
// uc_nation = 0 ;
74298: LD_ADDR_OWVAR 21
74302: PUSH
74303: LD_INT 0
74305: ST_TO_ADDR
// InitHc_All ( ) ;
74306: CALL_OW 584
// InitVc ;
74310: CALL_OW 20
// if mastodonts then
74314: LD_VAR 0 6
74318: IFFALSE 74385
// for i = 1 to mastodonts do
74320: LD_ADDR_VAR 0 11
74324: PUSH
74325: DOUBLE
74326: LD_INT 1
74328: DEC
74329: ST_TO_ADDR
74330: LD_VAR 0 6
74334: PUSH
74335: FOR_TO
74336: IFFALSE 74383
// begin vc_chassis := 31 ;
74338: LD_ADDR_OWVAR 37
74342: PUSH
74343: LD_INT 31
74345: ST_TO_ADDR
// vc_control := control_rider ;
74346: LD_ADDR_OWVAR 38
74350: PUSH
74351: LD_INT 4
74353: ST_TO_ADDR
// animal := CreateVehicle ;
74354: LD_ADDR_VAR 0 12
74358: PUSH
74359: CALL_OW 45
74363: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74364: LD_VAR 0 12
74368: PPUSH
74369: LD_VAR 0 8
74373: PPUSH
74374: LD_INT 0
74376: PPUSH
74377: CALL 76513 0 3
// end ;
74381: GO 74335
74383: POP
74384: POP
// if horses then
74385: LD_VAR 0 5
74389: IFFALSE 74456
// for i = 1 to horses do
74391: LD_ADDR_VAR 0 11
74395: PUSH
74396: DOUBLE
74397: LD_INT 1
74399: DEC
74400: ST_TO_ADDR
74401: LD_VAR 0 5
74405: PUSH
74406: FOR_TO
74407: IFFALSE 74454
// begin hc_class := 21 ;
74409: LD_ADDR_OWVAR 28
74413: PUSH
74414: LD_INT 21
74416: ST_TO_ADDR
// hc_gallery :=  ;
74417: LD_ADDR_OWVAR 33
74421: PUSH
74422: LD_STRING 
74424: ST_TO_ADDR
// animal := CreateHuman ;
74425: LD_ADDR_VAR 0 12
74429: PUSH
74430: CALL_OW 44
74434: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74435: LD_VAR 0 12
74439: PPUSH
74440: LD_VAR 0 8
74444: PPUSH
74445: LD_INT 0
74447: PPUSH
74448: CALL 76513 0 3
// end ;
74452: GO 74406
74454: POP
74455: POP
// if birds then
74456: LD_VAR 0 1
74460: IFFALSE 74527
// for i = 1 to birds do
74462: LD_ADDR_VAR 0 11
74466: PUSH
74467: DOUBLE
74468: LD_INT 1
74470: DEC
74471: ST_TO_ADDR
74472: LD_VAR 0 1
74476: PUSH
74477: FOR_TO
74478: IFFALSE 74525
// begin hc_class := 18 ;
74480: LD_ADDR_OWVAR 28
74484: PUSH
74485: LD_INT 18
74487: ST_TO_ADDR
// hc_gallery =  ;
74488: LD_ADDR_OWVAR 33
74492: PUSH
74493: LD_STRING 
74495: ST_TO_ADDR
// animal := CreateHuman ;
74496: LD_ADDR_VAR 0 12
74500: PUSH
74501: CALL_OW 44
74505: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74506: LD_VAR 0 12
74510: PPUSH
74511: LD_VAR 0 8
74515: PPUSH
74516: LD_INT 0
74518: PPUSH
74519: CALL 76513 0 3
// end ;
74523: GO 74477
74525: POP
74526: POP
// if tigers then
74527: LD_VAR 0 2
74531: IFFALSE 74615
// for i = 1 to tigers do
74533: LD_ADDR_VAR 0 11
74537: PUSH
74538: DOUBLE
74539: LD_INT 1
74541: DEC
74542: ST_TO_ADDR
74543: LD_VAR 0 2
74547: PUSH
74548: FOR_TO
74549: IFFALSE 74613
// begin hc_class = class_tiger ;
74551: LD_ADDR_OWVAR 28
74555: PUSH
74556: LD_INT 14
74558: ST_TO_ADDR
// hc_gallery =  ;
74559: LD_ADDR_OWVAR 33
74563: PUSH
74564: LD_STRING 
74566: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74567: LD_ADDR_OWVAR 35
74571: PUSH
74572: LD_INT 7
74574: NEG
74575: PPUSH
74576: LD_INT 7
74578: PPUSH
74579: CALL_OW 12
74583: ST_TO_ADDR
// animal := CreateHuman ;
74584: LD_ADDR_VAR 0 12
74588: PUSH
74589: CALL_OW 44
74593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74594: LD_VAR 0 12
74598: PPUSH
74599: LD_VAR 0 8
74603: PPUSH
74604: LD_INT 0
74606: PPUSH
74607: CALL 76513 0 3
// end ;
74611: GO 74548
74613: POP
74614: POP
// if apemans then
74615: LD_VAR 0 3
74619: IFFALSE 74742
// for i = 1 to apemans do
74621: LD_ADDR_VAR 0 11
74625: PUSH
74626: DOUBLE
74627: LD_INT 1
74629: DEC
74630: ST_TO_ADDR
74631: LD_VAR 0 3
74635: PUSH
74636: FOR_TO
74637: IFFALSE 74740
// begin hc_class = class_apeman ;
74639: LD_ADDR_OWVAR 28
74643: PUSH
74644: LD_INT 12
74646: ST_TO_ADDR
// hc_gallery =  ;
74647: LD_ADDR_OWVAR 33
74651: PUSH
74652: LD_STRING 
74654: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74655: LD_ADDR_OWVAR 35
74659: PUSH
74660: LD_INT 2
74662: NEG
74663: PPUSH
74664: LD_INT 2
74666: PPUSH
74667: CALL_OW 12
74671: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74672: LD_ADDR_OWVAR 31
74676: PUSH
74677: LD_INT 1
74679: PPUSH
74680: LD_INT 3
74682: PPUSH
74683: CALL_OW 12
74687: PUSH
74688: LD_INT 1
74690: PPUSH
74691: LD_INT 3
74693: PPUSH
74694: CALL_OW 12
74698: PUSH
74699: LD_INT 0
74701: PUSH
74702: LD_INT 0
74704: PUSH
74705: EMPTY
74706: LIST
74707: LIST
74708: LIST
74709: LIST
74710: ST_TO_ADDR
// animal := CreateHuman ;
74711: LD_ADDR_VAR 0 12
74715: PUSH
74716: CALL_OW 44
74720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74721: LD_VAR 0 12
74725: PPUSH
74726: LD_VAR 0 8
74730: PPUSH
74731: LD_INT 0
74733: PPUSH
74734: CALL 76513 0 3
// end ;
74738: GO 74636
74740: POP
74741: POP
// if enchidnas then
74742: LD_VAR 0 4
74746: IFFALSE 74813
// for i = 1 to enchidnas do
74748: LD_ADDR_VAR 0 11
74752: PUSH
74753: DOUBLE
74754: LD_INT 1
74756: DEC
74757: ST_TO_ADDR
74758: LD_VAR 0 4
74762: PUSH
74763: FOR_TO
74764: IFFALSE 74811
// begin hc_class = 13 ;
74766: LD_ADDR_OWVAR 28
74770: PUSH
74771: LD_INT 13
74773: ST_TO_ADDR
// hc_gallery =  ;
74774: LD_ADDR_OWVAR 33
74778: PUSH
74779: LD_STRING 
74781: ST_TO_ADDR
// animal := CreateHuman ;
74782: LD_ADDR_VAR 0 12
74786: PUSH
74787: CALL_OW 44
74791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74792: LD_VAR 0 12
74796: PPUSH
74797: LD_VAR 0 8
74801: PPUSH
74802: LD_INT 0
74804: PPUSH
74805: CALL 76513 0 3
// end ;
74809: GO 74763
74811: POP
74812: POP
// if fishes then
74813: LD_VAR 0 7
74817: IFFALSE 74884
// for i = 1 to fishes do
74819: LD_ADDR_VAR 0 11
74823: PUSH
74824: DOUBLE
74825: LD_INT 1
74827: DEC
74828: ST_TO_ADDR
74829: LD_VAR 0 7
74833: PUSH
74834: FOR_TO
74835: IFFALSE 74882
// begin hc_class = 20 ;
74837: LD_ADDR_OWVAR 28
74841: PUSH
74842: LD_INT 20
74844: ST_TO_ADDR
// hc_gallery =  ;
74845: LD_ADDR_OWVAR 33
74849: PUSH
74850: LD_STRING 
74852: ST_TO_ADDR
// animal := CreateHuman ;
74853: LD_ADDR_VAR 0 12
74857: PUSH
74858: CALL_OW 44
74862: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74863: LD_VAR 0 12
74867: PPUSH
74868: LD_VAR 0 9
74872: PPUSH
74873: LD_INT 0
74875: PPUSH
74876: CALL 76513 0 3
// end ;
74880: GO 74834
74882: POP
74883: POP
// end ;
74884: LD_VAR 0 10
74888: RET
// export function WantHeal ( sci , unit ) ; begin
74889: LD_INT 0
74891: PPUSH
// if GetTaskList ( sci ) > 0 then
74892: LD_VAR 0 1
74896: PPUSH
74897: CALL_OW 437
74901: PUSH
74902: LD_INT 0
74904: GREATER
74905: IFFALSE 74975
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74907: LD_VAR 0 1
74911: PPUSH
74912: CALL_OW 437
74916: PUSH
74917: LD_INT 1
74919: ARRAY
74920: PUSH
74921: LD_INT 1
74923: ARRAY
74924: PUSH
74925: LD_STRING l
74927: EQUAL
74928: PUSH
74929: LD_VAR 0 1
74933: PPUSH
74934: CALL_OW 437
74938: PUSH
74939: LD_INT 1
74941: ARRAY
74942: PUSH
74943: LD_INT 4
74945: ARRAY
74946: PUSH
74947: LD_VAR 0 2
74951: EQUAL
74952: AND
74953: IFFALSE 74965
// result := true else
74955: LD_ADDR_VAR 0 3
74959: PUSH
74960: LD_INT 1
74962: ST_TO_ADDR
74963: GO 74973
// result := false ;
74965: LD_ADDR_VAR 0 3
74969: PUSH
74970: LD_INT 0
74972: ST_TO_ADDR
// end else
74973: GO 74983
// result := false ;
74975: LD_ADDR_VAR 0 3
74979: PUSH
74980: LD_INT 0
74982: ST_TO_ADDR
// end ;
74983: LD_VAR 0 3
74987: RET
// export function HealTarget ( sci ) ; begin
74988: LD_INT 0
74990: PPUSH
// if not sci then
74991: LD_VAR 0 1
74995: NOT
74996: IFFALSE 75000
// exit ;
74998: GO 75065
// result := 0 ;
75000: LD_ADDR_VAR 0 2
75004: PUSH
75005: LD_INT 0
75007: ST_TO_ADDR
// if GetTaskList ( sci ) then
75008: LD_VAR 0 1
75012: PPUSH
75013: CALL_OW 437
75017: IFFALSE 75065
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75019: LD_VAR 0 1
75023: PPUSH
75024: CALL_OW 437
75028: PUSH
75029: LD_INT 1
75031: ARRAY
75032: PUSH
75033: LD_INT 1
75035: ARRAY
75036: PUSH
75037: LD_STRING l
75039: EQUAL
75040: IFFALSE 75065
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75042: LD_ADDR_VAR 0 2
75046: PUSH
75047: LD_VAR 0 1
75051: PPUSH
75052: CALL_OW 437
75056: PUSH
75057: LD_INT 1
75059: ARRAY
75060: PUSH
75061: LD_INT 4
75063: ARRAY
75064: ST_TO_ADDR
// end ;
75065: LD_VAR 0 2
75069: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75070: LD_INT 0
75072: PPUSH
75073: PPUSH
75074: PPUSH
75075: PPUSH
// if not base_units then
75076: LD_VAR 0 1
75080: NOT
75081: IFFALSE 75085
// exit ;
75083: GO 75172
// result := false ;
75085: LD_ADDR_VAR 0 2
75089: PUSH
75090: LD_INT 0
75092: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75093: LD_ADDR_VAR 0 5
75097: PUSH
75098: LD_VAR 0 1
75102: PPUSH
75103: LD_INT 21
75105: PUSH
75106: LD_INT 3
75108: PUSH
75109: EMPTY
75110: LIST
75111: LIST
75112: PPUSH
75113: CALL_OW 72
75117: ST_TO_ADDR
// if not tmp then
75118: LD_VAR 0 5
75122: NOT
75123: IFFALSE 75127
// exit ;
75125: GO 75172
// for i in tmp do
75127: LD_ADDR_VAR 0 3
75131: PUSH
75132: LD_VAR 0 5
75136: PUSH
75137: FOR_IN
75138: IFFALSE 75170
// begin result := EnemyInRange ( i , 22 ) ;
75140: LD_ADDR_VAR 0 2
75144: PUSH
75145: LD_VAR 0 3
75149: PPUSH
75150: LD_INT 22
75152: PPUSH
75153: CALL 72759 0 2
75157: ST_TO_ADDR
// if result then
75158: LD_VAR 0 2
75162: IFFALSE 75168
// exit ;
75164: POP
75165: POP
75166: GO 75172
// end ;
75168: GO 75137
75170: POP
75171: POP
// end ;
75172: LD_VAR 0 2
75176: RET
// export function FilterByTag ( units , tag ) ; begin
75177: LD_INT 0
75179: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75180: LD_ADDR_VAR 0 3
75184: PUSH
75185: LD_VAR 0 1
75189: PPUSH
75190: LD_INT 120
75192: PUSH
75193: LD_VAR 0 2
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: PPUSH
75202: CALL_OW 72
75206: ST_TO_ADDR
// end ;
75207: LD_VAR 0 3
75211: RET
// export function IsDriver ( un ) ; begin
75212: LD_INT 0
75214: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75215: LD_ADDR_VAR 0 2
75219: PUSH
75220: LD_VAR 0 1
75224: PUSH
75225: LD_INT 55
75227: PUSH
75228: EMPTY
75229: LIST
75230: PPUSH
75231: CALL_OW 69
75235: IN
75236: ST_TO_ADDR
// end ;
75237: LD_VAR 0 2
75241: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75242: LD_INT 0
75244: PPUSH
75245: PPUSH
// list := [ ] ;
75246: LD_ADDR_VAR 0 5
75250: PUSH
75251: EMPTY
75252: ST_TO_ADDR
// case d of 0 :
75253: LD_VAR 0 3
75257: PUSH
75258: LD_INT 0
75260: DOUBLE
75261: EQUAL
75262: IFTRUE 75266
75264: GO 75399
75266: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75267: LD_ADDR_VAR 0 5
75271: PUSH
75272: LD_VAR 0 1
75276: PUSH
75277: LD_INT 4
75279: MINUS
75280: PUSH
75281: LD_VAR 0 2
75285: PUSH
75286: LD_INT 4
75288: MINUS
75289: PUSH
75290: LD_INT 2
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: LIST
75297: PUSH
75298: LD_VAR 0 1
75302: PUSH
75303: LD_INT 3
75305: MINUS
75306: PUSH
75307: LD_VAR 0 2
75311: PUSH
75312: LD_INT 1
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: LIST
75319: PUSH
75320: LD_VAR 0 1
75324: PUSH
75325: LD_INT 4
75327: PLUS
75328: PUSH
75329: LD_VAR 0 2
75333: PUSH
75334: LD_INT 4
75336: PUSH
75337: EMPTY
75338: LIST
75339: LIST
75340: LIST
75341: PUSH
75342: LD_VAR 0 1
75346: PUSH
75347: LD_INT 3
75349: PLUS
75350: PUSH
75351: LD_VAR 0 2
75355: PUSH
75356: LD_INT 3
75358: PLUS
75359: PUSH
75360: LD_INT 5
75362: PUSH
75363: EMPTY
75364: LIST
75365: LIST
75366: LIST
75367: PUSH
75368: LD_VAR 0 1
75372: PUSH
75373: LD_VAR 0 2
75377: PUSH
75378: LD_INT 4
75380: PLUS
75381: PUSH
75382: LD_INT 0
75384: PUSH
75385: EMPTY
75386: LIST
75387: LIST
75388: LIST
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: ST_TO_ADDR
// end ; 1 :
75397: GO 76097
75399: LD_INT 1
75401: DOUBLE
75402: EQUAL
75403: IFTRUE 75407
75405: GO 75540
75407: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75408: LD_ADDR_VAR 0 5
75412: PUSH
75413: LD_VAR 0 1
75417: PUSH
75418: LD_VAR 0 2
75422: PUSH
75423: LD_INT 4
75425: MINUS
75426: PUSH
75427: LD_INT 3
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: LIST
75434: PUSH
75435: LD_VAR 0 1
75439: PUSH
75440: LD_INT 3
75442: MINUS
75443: PUSH
75444: LD_VAR 0 2
75448: PUSH
75449: LD_INT 3
75451: MINUS
75452: PUSH
75453: LD_INT 2
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: LIST
75460: PUSH
75461: LD_VAR 0 1
75465: PUSH
75466: LD_INT 4
75468: MINUS
75469: PUSH
75470: LD_VAR 0 2
75474: PUSH
75475: LD_INT 1
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: LIST
75482: PUSH
75483: LD_VAR 0 1
75487: PUSH
75488: LD_VAR 0 2
75492: PUSH
75493: LD_INT 3
75495: PLUS
75496: PUSH
75497: LD_INT 0
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: LIST
75504: PUSH
75505: LD_VAR 0 1
75509: PUSH
75510: LD_INT 4
75512: PLUS
75513: PUSH
75514: LD_VAR 0 2
75518: PUSH
75519: LD_INT 4
75521: PLUS
75522: PUSH
75523: LD_INT 5
75525: PUSH
75526: EMPTY
75527: LIST
75528: LIST
75529: LIST
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: LIST
75535: LIST
75536: LIST
75537: ST_TO_ADDR
// end ; 2 :
75538: GO 76097
75540: LD_INT 2
75542: DOUBLE
75543: EQUAL
75544: IFTRUE 75548
75546: GO 75677
75548: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75549: LD_ADDR_VAR 0 5
75553: PUSH
75554: LD_VAR 0 1
75558: PUSH
75559: LD_VAR 0 2
75563: PUSH
75564: LD_INT 3
75566: MINUS
75567: PUSH
75568: LD_INT 3
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: LIST
75575: PUSH
75576: LD_VAR 0 1
75580: PUSH
75581: LD_INT 4
75583: PLUS
75584: PUSH
75585: LD_VAR 0 2
75589: PUSH
75590: LD_INT 4
75592: PUSH
75593: EMPTY
75594: LIST
75595: LIST
75596: LIST
75597: PUSH
75598: LD_VAR 0 1
75602: PUSH
75603: LD_VAR 0 2
75607: PUSH
75608: LD_INT 4
75610: PLUS
75611: PUSH
75612: LD_INT 0
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: LIST
75619: PUSH
75620: LD_VAR 0 1
75624: PUSH
75625: LD_INT 3
75627: MINUS
75628: PUSH
75629: LD_VAR 0 2
75633: PUSH
75634: LD_INT 1
75636: PUSH
75637: EMPTY
75638: LIST
75639: LIST
75640: LIST
75641: PUSH
75642: LD_VAR 0 1
75646: PUSH
75647: LD_INT 4
75649: MINUS
75650: PUSH
75651: LD_VAR 0 2
75655: PUSH
75656: LD_INT 4
75658: MINUS
75659: PUSH
75660: LD_INT 2
75662: PUSH
75663: EMPTY
75664: LIST
75665: LIST
75666: LIST
75667: PUSH
75668: EMPTY
75669: LIST
75670: LIST
75671: LIST
75672: LIST
75673: LIST
75674: ST_TO_ADDR
// end ; 3 :
75675: GO 76097
75677: LD_INT 3
75679: DOUBLE
75680: EQUAL
75681: IFTRUE 75685
75683: GO 75818
75685: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75686: LD_ADDR_VAR 0 5
75690: PUSH
75691: LD_VAR 0 1
75695: PUSH
75696: LD_INT 3
75698: PLUS
75699: PUSH
75700: LD_VAR 0 2
75704: PUSH
75705: LD_INT 4
75707: PUSH
75708: EMPTY
75709: LIST
75710: LIST
75711: LIST
75712: PUSH
75713: LD_VAR 0 1
75717: PUSH
75718: LD_INT 4
75720: PLUS
75721: PUSH
75722: LD_VAR 0 2
75726: PUSH
75727: LD_INT 4
75729: PLUS
75730: PUSH
75731: LD_INT 5
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: LIST
75738: PUSH
75739: LD_VAR 0 1
75743: PUSH
75744: LD_INT 4
75746: MINUS
75747: PUSH
75748: LD_VAR 0 2
75752: PUSH
75753: LD_INT 1
75755: PUSH
75756: EMPTY
75757: LIST
75758: LIST
75759: LIST
75760: PUSH
75761: LD_VAR 0 1
75765: PUSH
75766: LD_VAR 0 2
75770: PUSH
75771: LD_INT 4
75773: MINUS
75774: PUSH
75775: LD_INT 3
75777: PUSH
75778: EMPTY
75779: LIST
75780: LIST
75781: LIST
75782: PUSH
75783: LD_VAR 0 1
75787: PUSH
75788: LD_INT 3
75790: MINUS
75791: PUSH
75792: LD_VAR 0 2
75796: PUSH
75797: LD_INT 3
75799: MINUS
75800: PUSH
75801: LD_INT 2
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: LIST
75808: PUSH
75809: EMPTY
75810: LIST
75811: LIST
75812: LIST
75813: LIST
75814: LIST
75815: ST_TO_ADDR
// end ; 4 :
75816: GO 76097
75818: LD_INT 4
75820: DOUBLE
75821: EQUAL
75822: IFTRUE 75826
75824: GO 75959
75826: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75827: LD_ADDR_VAR 0 5
75831: PUSH
75832: LD_VAR 0 1
75836: PUSH
75837: LD_VAR 0 2
75841: PUSH
75842: LD_INT 4
75844: PLUS
75845: PUSH
75846: LD_INT 0
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: LIST
75853: PUSH
75854: LD_VAR 0 1
75858: PUSH
75859: LD_INT 3
75861: PLUS
75862: PUSH
75863: LD_VAR 0 2
75867: PUSH
75868: LD_INT 3
75870: PLUS
75871: PUSH
75872: LD_INT 5
75874: PUSH
75875: EMPTY
75876: LIST
75877: LIST
75878: LIST
75879: PUSH
75880: LD_VAR 0 1
75884: PUSH
75885: LD_INT 4
75887: PLUS
75888: PUSH
75889: LD_VAR 0 2
75893: PUSH
75894: LD_INT 4
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: LIST
75901: PUSH
75902: LD_VAR 0 1
75906: PUSH
75907: LD_VAR 0 2
75911: PUSH
75912: LD_INT 3
75914: MINUS
75915: PUSH
75916: LD_INT 3
75918: PUSH
75919: EMPTY
75920: LIST
75921: LIST
75922: LIST
75923: PUSH
75924: LD_VAR 0 1
75928: PUSH
75929: LD_INT 4
75931: MINUS
75932: PUSH
75933: LD_VAR 0 2
75937: PUSH
75938: LD_INT 4
75940: MINUS
75941: PUSH
75942: LD_INT 2
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: LIST
75949: PUSH
75950: EMPTY
75951: LIST
75952: LIST
75953: LIST
75954: LIST
75955: LIST
75956: ST_TO_ADDR
// end ; 5 :
75957: GO 76097
75959: LD_INT 5
75961: DOUBLE
75962: EQUAL
75963: IFTRUE 75967
75965: GO 76096
75967: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75968: LD_ADDR_VAR 0 5
75972: PUSH
75973: LD_VAR 0 1
75977: PUSH
75978: LD_INT 4
75980: MINUS
75981: PUSH
75982: LD_VAR 0 2
75986: PUSH
75987: LD_INT 1
75989: PUSH
75990: EMPTY
75991: LIST
75992: LIST
75993: LIST
75994: PUSH
75995: LD_VAR 0 1
75999: PUSH
76000: LD_VAR 0 2
76004: PUSH
76005: LD_INT 4
76007: MINUS
76008: PUSH
76009: LD_INT 3
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: LIST
76016: PUSH
76017: LD_VAR 0 1
76021: PUSH
76022: LD_INT 4
76024: PLUS
76025: PUSH
76026: LD_VAR 0 2
76030: PUSH
76031: LD_INT 4
76033: PLUS
76034: PUSH
76035: LD_INT 5
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: LIST
76042: PUSH
76043: LD_VAR 0 1
76047: PUSH
76048: LD_INT 3
76050: PLUS
76051: PUSH
76052: LD_VAR 0 2
76056: PUSH
76057: LD_INT 4
76059: PUSH
76060: EMPTY
76061: LIST
76062: LIST
76063: LIST
76064: PUSH
76065: LD_VAR 0 1
76069: PUSH
76070: LD_VAR 0 2
76074: PUSH
76075: LD_INT 3
76077: PLUS
76078: PUSH
76079: LD_INT 0
76081: PUSH
76082: EMPTY
76083: LIST
76084: LIST
76085: LIST
76086: PUSH
76087: EMPTY
76088: LIST
76089: LIST
76090: LIST
76091: LIST
76092: LIST
76093: ST_TO_ADDR
// end ; end ;
76094: GO 76097
76096: POP
// result := list ;
76097: LD_ADDR_VAR 0 4
76101: PUSH
76102: LD_VAR 0 5
76106: ST_TO_ADDR
// end ;
76107: LD_VAR 0 4
76111: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76112: LD_INT 0
76114: PPUSH
76115: PPUSH
76116: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76117: LD_VAR 0 1
76121: NOT
76122: PUSH
76123: LD_VAR 0 2
76127: PUSH
76128: LD_INT 1
76130: PUSH
76131: LD_INT 2
76133: PUSH
76134: LD_INT 3
76136: PUSH
76137: LD_INT 4
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: LIST
76144: LIST
76145: IN
76146: NOT
76147: OR
76148: IFFALSE 76152
// exit ;
76150: GO 76235
// tmp := [ ] ;
76152: LD_ADDR_VAR 0 5
76156: PUSH
76157: EMPTY
76158: ST_TO_ADDR
// for i in units do
76159: LD_ADDR_VAR 0 4
76163: PUSH
76164: LD_VAR 0 1
76168: PUSH
76169: FOR_IN
76170: IFFALSE 76204
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76172: LD_ADDR_VAR 0 5
76176: PUSH
76177: LD_VAR 0 5
76181: PPUSH
76182: LD_VAR 0 4
76186: PPUSH
76187: LD_VAR 0 2
76191: PPUSH
76192: CALL_OW 259
76196: PPUSH
76197: CALL 77595 0 2
76201: ST_TO_ADDR
76202: GO 76169
76204: POP
76205: POP
// if not tmp then
76206: LD_VAR 0 5
76210: NOT
76211: IFFALSE 76215
// exit ;
76213: GO 76235
// result := SortListByListDesc ( units , tmp ) ;
76215: LD_ADDR_VAR 0 3
76219: PUSH
76220: LD_VAR 0 1
76224: PPUSH
76225: LD_VAR 0 5
76229: PPUSH
76230: CALL_OW 77
76234: ST_TO_ADDR
// end ;
76235: LD_VAR 0 3
76239: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76240: LD_INT 0
76242: PPUSH
76243: PPUSH
76244: PPUSH
// result := false ;
76245: LD_ADDR_VAR 0 3
76249: PUSH
76250: LD_INT 0
76252: ST_TO_ADDR
// if not building then
76253: LD_VAR 0 2
76257: NOT
76258: IFFALSE 76262
// exit ;
76260: GO 76400
// x := GetX ( building ) ;
76262: LD_ADDR_VAR 0 4
76266: PUSH
76267: LD_VAR 0 2
76271: PPUSH
76272: CALL_OW 250
76276: ST_TO_ADDR
// y := GetY ( building ) ;
76277: LD_ADDR_VAR 0 5
76281: PUSH
76282: LD_VAR 0 2
76286: PPUSH
76287: CALL_OW 251
76291: ST_TO_ADDR
// if not x or not y then
76292: LD_VAR 0 4
76296: NOT
76297: PUSH
76298: LD_VAR 0 5
76302: NOT
76303: OR
76304: IFFALSE 76308
// exit ;
76306: GO 76400
// if GetTaskList ( unit ) then
76308: LD_VAR 0 1
76312: PPUSH
76313: CALL_OW 437
76317: IFFALSE 76400
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76319: LD_STRING e
76321: PUSH
76322: LD_VAR 0 1
76326: PPUSH
76327: CALL_OW 437
76331: PUSH
76332: LD_INT 1
76334: ARRAY
76335: PUSH
76336: LD_INT 1
76338: ARRAY
76339: EQUAL
76340: PUSH
76341: LD_VAR 0 4
76345: PUSH
76346: LD_VAR 0 1
76350: PPUSH
76351: CALL_OW 437
76355: PUSH
76356: LD_INT 1
76358: ARRAY
76359: PUSH
76360: LD_INT 2
76362: ARRAY
76363: EQUAL
76364: AND
76365: PUSH
76366: LD_VAR 0 5
76370: PUSH
76371: LD_VAR 0 1
76375: PPUSH
76376: CALL_OW 437
76380: PUSH
76381: LD_INT 1
76383: ARRAY
76384: PUSH
76385: LD_INT 3
76387: ARRAY
76388: EQUAL
76389: AND
76390: IFFALSE 76400
// result := true end ;
76392: LD_ADDR_VAR 0 3
76396: PUSH
76397: LD_INT 1
76399: ST_TO_ADDR
// end ;
76400: LD_VAR 0 3
76404: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76405: LD_INT 0
76407: PPUSH
// result := false ;
76408: LD_ADDR_VAR 0 4
76412: PUSH
76413: LD_INT 0
76415: ST_TO_ADDR
// if GetTaskList ( unit ) then
76416: LD_VAR 0 1
76420: PPUSH
76421: CALL_OW 437
76425: IFFALSE 76508
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76427: LD_STRING M
76429: PUSH
76430: LD_VAR 0 1
76434: PPUSH
76435: CALL_OW 437
76439: PUSH
76440: LD_INT 1
76442: ARRAY
76443: PUSH
76444: LD_INT 1
76446: ARRAY
76447: EQUAL
76448: PUSH
76449: LD_VAR 0 2
76453: PUSH
76454: LD_VAR 0 1
76458: PPUSH
76459: CALL_OW 437
76463: PUSH
76464: LD_INT 1
76466: ARRAY
76467: PUSH
76468: LD_INT 2
76470: ARRAY
76471: EQUAL
76472: AND
76473: PUSH
76474: LD_VAR 0 3
76478: PUSH
76479: LD_VAR 0 1
76483: PPUSH
76484: CALL_OW 437
76488: PUSH
76489: LD_INT 1
76491: ARRAY
76492: PUSH
76493: LD_INT 3
76495: ARRAY
76496: EQUAL
76497: AND
76498: IFFALSE 76508
// result := true ;
76500: LD_ADDR_VAR 0 4
76504: PUSH
76505: LD_INT 1
76507: ST_TO_ADDR
// end ; end ;
76508: LD_VAR 0 4
76512: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76513: LD_INT 0
76515: PPUSH
76516: PPUSH
76517: PPUSH
76518: PPUSH
// if not unit or not area then
76519: LD_VAR 0 1
76523: NOT
76524: PUSH
76525: LD_VAR 0 2
76529: NOT
76530: OR
76531: IFFALSE 76535
// exit ;
76533: GO 76698
// tmp := AreaToList ( area , i ) ;
76535: LD_ADDR_VAR 0 6
76539: PUSH
76540: LD_VAR 0 2
76544: PPUSH
76545: LD_VAR 0 5
76549: PPUSH
76550: CALL_OW 517
76554: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76555: LD_ADDR_VAR 0 5
76559: PUSH
76560: DOUBLE
76561: LD_INT 1
76563: DEC
76564: ST_TO_ADDR
76565: LD_VAR 0 6
76569: PUSH
76570: LD_INT 1
76572: ARRAY
76573: PUSH
76574: FOR_TO
76575: IFFALSE 76696
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76577: LD_ADDR_VAR 0 7
76581: PUSH
76582: LD_VAR 0 6
76586: PUSH
76587: LD_INT 1
76589: ARRAY
76590: PUSH
76591: LD_VAR 0 5
76595: ARRAY
76596: PUSH
76597: LD_VAR 0 6
76601: PUSH
76602: LD_INT 2
76604: ARRAY
76605: PUSH
76606: LD_VAR 0 5
76610: ARRAY
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
76616: LD_INT 92
76618: PUSH
76619: LD_VAR 0 7
76623: PUSH
76624: LD_INT 1
76626: ARRAY
76627: PUSH
76628: LD_VAR 0 7
76632: PUSH
76633: LD_INT 2
76635: ARRAY
76636: PUSH
76637: LD_INT 3
76639: PUSH
76640: EMPTY
76641: LIST
76642: LIST
76643: LIST
76644: LIST
76645: PPUSH
76646: CALL_OW 69
76650: PUSH
76651: LD_INT 0
76653: EQUAL
76654: IFFALSE 76694
// begin PlaceUnitArea ( unit , area , mode ) ;
76656: LD_VAR 0 1
76660: PPUSH
76661: LD_VAR 0 2
76665: PPUSH
76666: LD_VAR 0 3
76670: PPUSH
76671: CALL_OW 49
// result := IsPlaced ( unit ) ;
76675: LD_ADDR_VAR 0 4
76679: PUSH
76680: LD_VAR 0 1
76684: PPUSH
76685: CALL_OW 305
76689: ST_TO_ADDR
// exit ;
76690: POP
76691: POP
76692: GO 76698
// end ; end ;
76694: GO 76574
76696: POP
76697: POP
// end ;
76698: LD_VAR 0 4
76702: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76703: LD_INT 0
76705: PPUSH
76706: PPUSH
76707: PPUSH
// if not side or side > 8 then
76708: LD_VAR 0 1
76712: NOT
76713: PUSH
76714: LD_VAR 0 1
76718: PUSH
76719: LD_INT 8
76721: GREATER
76722: OR
76723: IFFALSE 76727
// exit ;
76725: GO 76914
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76727: LD_ADDR_VAR 0 4
76731: PUSH
76732: LD_INT 22
76734: PUSH
76735: LD_VAR 0 1
76739: PUSH
76740: EMPTY
76741: LIST
76742: LIST
76743: PUSH
76744: LD_INT 21
76746: PUSH
76747: LD_INT 3
76749: PUSH
76750: EMPTY
76751: LIST
76752: LIST
76753: PUSH
76754: EMPTY
76755: LIST
76756: LIST
76757: PPUSH
76758: CALL_OW 69
76762: ST_TO_ADDR
// if not tmp then
76763: LD_VAR 0 4
76767: NOT
76768: IFFALSE 76772
// exit ;
76770: GO 76914
// enable_addtolog := true ;
76772: LD_ADDR_OWVAR 81
76776: PUSH
76777: LD_INT 1
76779: ST_TO_ADDR
// AddToLog ( [ ) ;
76780: LD_STRING [
76782: PPUSH
76783: CALL_OW 561
// for i in tmp do
76787: LD_ADDR_VAR 0 3
76791: PUSH
76792: LD_VAR 0 4
76796: PUSH
76797: FOR_IN
76798: IFFALSE 76905
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76800: LD_STRING [
76802: PUSH
76803: LD_VAR 0 3
76807: PPUSH
76808: CALL_OW 266
76812: STR
76813: PUSH
76814: LD_STRING , 
76816: STR
76817: PUSH
76818: LD_VAR 0 3
76822: PPUSH
76823: CALL_OW 250
76827: STR
76828: PUSH
76829: LD_STRING , 
76831: STR
76832: PUSH
76833: LD_VAR 0 3
76837: PPUSH
76838: CALL_OW 251
76842: STR
76843: PUSH
76844: LD_STRING , 
76846: STR
76847: PUSH
76848: LD_VAR 0 3
76852: PPUSH
76853: CALL_OW 254
76857: STR
76858: PUSH
76859: LD_STRING , 
76861: STR
76862: PUSH
76863: LD_VAR 0 3
76867: PPUSH
76868: LD_INT 1
76870: PPUSH
76871: CALL_OW 268
76875: STR
76876: PUSH
76877: LD_STRING , 
76879: STR
76880: PUSH
76881: LD_VAR 0 3
76885: PPUSH
76886: LD_INT 2
76888: PPUSH
76889: CALL_OW 268
76893: STR
76894: PUSH
76895: LD_STRING ],
76897: STR
76898: PPUSH
76899: CALL_OW 561
// end ;
76903: GO 76797
76905: POP
76906: POP
// AddToLog ( ]; ) ;
76907: LD_STRING ];
76909: PPUSH
76910: CALL_OW 561
// end ;
76914: LD_VAR 0 2
76918: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76919: LD_INT 0
76921: PPUSH
76922: PPUSH
76923: PPUSH
76924: PPUSH
76925: PPUSH
// if not area or not rate or not max then
76926: LD_VAR 0 1
76930: NOT
76931: PUSH
76932: LD_VAR 0 2
76936: NOT
76937: OR
76938: PUSH
76939: LD_VAR 0 4
76943: NOT
76944: OR
76945: IFFALSE 76949
// exit ;
76947: GO 77138
// while 1 do
76949: LD_INT 1
76951: IFFALSE 77138
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76953: LD_ADDR_VAR 0 9
76957: PUSH
76958: LD_VAR 0 1
76962: PPUSH
76963: LD_INT 1
76965: PPUSH
76966: CALL_OW 287
76970: PUSH
76971: LD_INT 10
76973: MUL
76974: ST_TO_ADDR
// r := rate / 10 ;
76975: LD_ADDR_VAR 0 7
76979: PUSH
76980: LD_VAR 0 2
76984: PUSH
76985: LD_INT 10
76987: DIVREAL
76988: ST_TO_ADDR
// time := 1 1$00 ;
76989: LD_ADDR_VAR 0 8
76993: PUSH
76994: LD_INT 2100
76996: ST_TO_ADDR
// if amount < min then
76997: LD_VAR 0 9
77001: PUSH
77002: LD_VAR 0 3
77006: LESS
77007: IFFALSE 77025
// r := r * 2 else
77009: LD_ADDR_VAR 0 7
77013: PUSH
77014: LD_VAR 0 7
77018: PUSH
77019: LD_INT 2
77021: MUL
77022: ST_TO_ADDR
77023: GO 77051
// if amount > max then
77025: LD_VAR 0 9
77029: PUSH
77030: LD_VAR 0 4
77034: GREATER
77035: IFFALSE 77051
// r := r / 2 ;
77037: LD_ADDR_VAR 0 7
77041: PUSH
77042: LD_VAR 0 7
77046: PUSH
77047: LD_INT 2
77049: DIVREAL
77050: ST_TO_ADDR
// time := time / r ;
77051: LD_ADDR_VAR 0 8
77055: PUSH
77056: LD_VAR 0 8
77060: PUSH
77061: LD_VAR 0 7
77065: DIVREAL
77066: ST_TO_ADDR
// if time < 0 then
77067: LD_VAR 0 8
77071: PUSH
77072: LD_INT 0
77074: LESS
77075: IFFALSE 77092
// time := time * - 1 ;
77077: LD_ADDR_VAR 0 8
77081: PUSH
77082: LD_VAR 0 8
77086: PUSH
77087: LD_INT 1
77089: NEG
77090: MUL
77091: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77092: LD_VAR 0 8
77096: PUSH
77097: LD_INT 35
77099: PPUSH
77100: LD_INT 875
77102: PPUSH
77103: CALL_OW 12
77107: PLUS
77108: PPUSH
77109: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77113: LD_INT 1
77115: PPUSH
77116: LD_INT 5
77118: PPUSH
77119: CALL_OW 12
77123: PPUSH
77124: LD_VAR 0 1
77128: PPUSH
77129: LD_INT 1
77131: PPUSH
77132: CALL_OW 55
// end ;
77136: GO 76949
// end ;
77138: LD_VAR 0 5
77142: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77143: LD_INT 0
77145: PPUSH
77146: PPUSH
77147: PPUSH
77148: PPUSH
77149: PPUSH
77150: PPUSH
77151: PPUSH
77152: PPUSH
// if not turrets or not factories then
77153: LD_VAR 0 1
77157: NOT
77158: PUSH
77159: LD_VAR 0 2
77163: NOT
77164: OR
77165: IFFALSE 77169
// exit ;
77167: GO 77476
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77169: LD_ADDR_VAR 0 10
77173: PUSH
77174: LD_INT 5
77176: PUSH
77177: LD_INT 6
77179: PUSH
77180: EMPTY
77181: LIST
77182: LIST
77183: PUSH
77184: LD_INT 2
77186: PUSH
77187: LD_INT 4
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: PUSH
77194: LD_INT 3
77196: PUSH
77197: LD_INT 5
77199: PUSH
77200: EMPTY
77201: LIST
77202: LIST
77203: PUSH
77204: EMPTY
77205: LIST
77206: LIST
77207: LIST
77208: PUSH
77209: LD_INT 24
77211: PUSH
77212: LD_INT 25
77214: PUSH
77215: EMPTY
77216: LIST
77217: LIST
77218: PUSH
77219: LD_INT 23
77221: PUSH
77222: LD_INT 27
77224: PUSH
77225: EMPTY
77226: LIST
77227: LIST
77228: PUSH
77229: EMPTY
77230: LIST
77231: LIST
77232: PUSH
77233: LD_INT 42
77235: PUSH
77236: LD_INT 43
77238: PUSH
77239: EMPTY
77240: LIST
77241: LIST
77242: PUSH
77243: LD_INT 44
77245: PUSH
77246: LD_INT 46
77248: PUSH
77249: EMPTY
77250: LIST
77251: LIST
77252: PUSH
77253: LD_INT 45
77255: PUSH
77256: LD_INT 47
77258: PUSH
77259: EMPTY
77260: LIST
77261: LIST
77262: PUSH
77263: EMPTY
77264: LIST
77265: LIST
77266: LIST
77267: PUSH
77268: EMPTY
77269: LIST
77270: LIST
77271: LIST
77272: ST_TO_ADDR
// result := [ ] ;
77273: LD_ADDR_VAR 0 3
77277: PUSH
77278: EMPTY
77279: ST_TO_ADDR
// for i in turrets do
77280: LD_ADDR_VAR 0 4
77284: PUSH
77285: LD_VAR 0 1
77289: PUSH
77290: FOR_IN
77291: IFFALSE 77474
// begin nat := GetNation ( i ) ;
77293: LD_ADDR_VAR 0 7
77297: PUSH
77298: LD_VAR 0 4
77302: PPUSH
77303: CALL_OW 248
77307: ST_TO_ADDR
// weapon := 0 ;
77308: LD_ADDR_VAR 0 8
77312: PUSH
77313: LD_INT 0
77315: ST_TO_ADDR
// if not nat then
77316: LD_VAR 0 7
77320: NOT
77321: IFFALSE 77325
// continue ;
77323: GO 77290
// for j in list [ nat ] do
77325: LD_ADDR_VAR 0 5
77329: PUSH
77330: LD_VAR 0 10
77334: PUSH
77335: LD_VAR 0 7
77339: ARRAY
77340: PUSH
77341: FOR_IN
77342: IFFALSE 77383
// if GetBWeapon ( i ) = j [ 1 ] then
77344: LD_VAR 0 4
77348: PPUSH
77349: CALL_OW 269
77353: PUSH
77354: LD_VAR 0 5
77358: PUSH
77359: LD_INT 1
77361: ARRAY
77362: EQUAL
77363: IFFALSE 77381
// begin weapon := j [ 2 ] ;
77365: LD_ADDR_VAR 0 8
77369: PUSH
77370: LD_VAR 0 5
77374: PUSH
77375: LD_INT 2
77377: ARRAY
77378: ST_TO_ADDR
// break ;
77379: GO 77383
// end ;
77381: GO 77341
77383: POP
77384: POP
// if not weapon then
77385: LD_VAR 0 8
77389: NOT
77390: IFFALSE 77394
// continue ;
77392: GO 77290
// for k in factories do
77394: LD_ADDR_VAR 0 6
77398: PUSH
77399: LD_VAR 0 2
77403: PUSH
77404: FOR_IN
77405: IFFALSE 77470
// begin weapons := AvailableWeaponList ( k ) ;
77407: LD_ADDR_VAR 0 9
77411: PUSH
77412: LD_VAR 0 6
77416: PPUSH
77417: CALL_OW 478
77421: ST_TO_ADDR
// if not weapons then
77422: LD_VAR 0 9
77426: NOT
77427: IFFALSE 77431
// continue ;
77429: GO 77404
// if weapon in weapons then
77431: LD_VAR 0 8
77435: PUSH
77436: LD_VAR 0 9
77440: IN
77441: IFFALSE 77468
// begin result := [ i , weapon ] ;
77443: LD_ADDR_VAR 0 3
77447: PUSH
77448: LD_VAR 0 4
77452: PUSH
77453: LD_VAR 0 8
77457: PUSH
77458: EMPTY
77459: LIST
77460: LIST
77461: ST_TO_ADDR
// exit ;
77462: POP
77463: POP
77464: POP
77465: POP
77466: GO 77476
// end ; end ;
77468: GO 77404
77470: POP
77471: POP
// end ;
77472: GO 77290
77474: POP
77475: POP
// end ;
77476: LD_VAR 0 3
77480: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77481: LD_INT 0
77483: PPUSH
// if not side or side > 8 then
77484: LD_VAR 0 3
77488: NOT
77489: PUSH
77490: LD_VAR 0 3
77494: PUSH
77495: LD_INT 8
77497: GREATER
77498: OR
77499: IFFALSE 77503
// exit ;
77501: GO 77562
// if not range then
77503: LD_VAR 0 4
77507: NOT
77508: IFFALSE 77519
// range := - 12 ;
77510: LD_ADDR_VAR 0 4
77514: PUSH
77515: LD_INT 12
77517: NEG
77518: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77519: LD_VAR 0 1
77523: PPUSH
77524: LD_VAR 0 2
77528: PPUSH
77529: LD_VAR 0 3
77533: PPUSH
77534: LD_VAR 0 4
77538: PPUSH
77539: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77543: LD_VAR 0 1
77547: PPUSH
77548: LD_VAR 0 2
77552: PPUSH
77553: LD_VAR 0 3
77557: PPUSH
77558: CALL_OW 331
// end ;
77562: LD_VAR 0 5
77566: RET
// export function Video ( mode ) ; begin
77567: LD_INT 0
77569: PPUSH
// ingame_video = mode ;
77570: LD_ADDR_OWVAR 52
77574: PUSH
77575: LD_VAR 0 1
77579: ST_TO_ADDR
// interface_hidden = mode ;
77580: LD_ADDR_OWVAR 54
77584: PUSH
77585: LD_VAR 0 1
77589: ST_TO_ADDR
// end ;
77590: LD_VAR 0 2
77594: RET
// export function Join ( array , element ) ; begin
77595: LD_INT 0
77597: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77598: LD_ADDR_VAR 0 3
77602: PUSH
77603: LD_VAR 0 1
77607: PPUSH
77608: LD_VAR 0 1
77612: PUSH
77613: LD_INT 1
77615: PLUS
77616: PPUSH
77617: LD_VAR 0 2
77621: PPUSH
77622: CALL_OW 1
77626: ST_TO_ADDR
// end ;
77627: LD_VAR 0 3
77631: RET
// export function JoinUnion ( array , element ) ; begin
77632: LD_INT 0
77634: PPUSH
// result := array union element ;
77635: LD_ADDR_VAR 0 3
77639: PUSH
77640: LD_VAR 0 1
77644: PUSH
77645: LD_VAR 0 2
77649: UNION
77650: ST_TO_ADDR
// end ;
77651: LD_VAR 0 3
77655: RET
// export function GetBehemoths ( side ) ; begin
77656: LD_INT 0
77658: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77659: LD_ADDR_VAR 0 2
77663: PUSH
77664: LD_INT 22
77666: PUSH
77667: LD_VAR 0 1
77671: PUSH
77672: EMPTY
77673: LIST
77674: LIST
77675: PUSH
77676: LD_INT 31
77678: PUSH
77679: LD_INT 25
77681: PUSH
77682: EMPTY
77683: LIST
77684: LIST
77685: PUSH
77686: EMPTY
77687: LIST
77688: LIST
77689: PPUSH
77690: CALL_OW 69
77694: ST_TO_ADDR
// end ;
77695: LD_VAR 0 2
77699: RET
// export function Shuffle ( array ) ; var i , index ; begin
77700: LD_INT 0
77702: PPUSH
77703: PPUSH
77704: PPUSH
// result := [ ] ;
77705: LD_ADDR_VAR 0 2
77709: PUSH
77710: EMPTY
77711: ST_TO_ADDR
// if not array then
77712: LD_VAR 0 1
77716: NOT
77717: IFFALSE 77721
// exit ;
77719: GO 77820
// Randomize ;
77721: CALL_OW 10
// for i = array downto 1 do
77725: LD_ADDR_VAR 0 3
77729: PUSH
77730: DOUBLE
77731: LD_VAR 0 1
77735: INC
77736: ST_TO_ADDR
77737: LD_INT 1
77739: PUSH
77740: FOR_DOWNTO
77741: IFFALSE 77818
// begin index := rand ( 1 , array ) ;
77743: LD_ADDR_VAR 0 4
77747: PUSH
77748: LD_INT 1
77750: PPUSH
77751: LD_VAR 0 1
77755: PPUSH
77756: CALL_OW 12
77760: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77761: LD_ADDR_VAR 0 2
77765: PUSH
77766: LD_VAR 0 2
77770: PPUSH
77771: LD_VAR 0 2
77775: PUSH
77776: LD_INT 1
77778: PLUS
77779: PPUSH
77780: LD_VAR 0 1
77784: PUSH
77785: LD_VAR 0 4
77789: ARRAY
77790: PPUSH
77791: CALL_OW 2
77795: ST_TO_ADDR
// array := Delete ( array , index ) ;
77796: LD_ADDR_VAR 0 1
77800: PUSH
77801: LD_VAR 0 1
77805: PPUSH
77806: LD_VAR 0 4
77810: PPUSH
77811: CALL_OW 3
77815: ST_TO_ADDR
// end ;
77816: GO 77740
77818: POP
77819: POP
// end ;
77820: LD_VAR 0 2
77824: RET
// export function GetBaseMaterials ( base ) ; begin
77825: LD_INT 0
77827: PPUSH
// result := [ 0 , 0 , 0 ] ;
77828: LD_ADDR_VAR 0 2
77832: PUSH
77833: LD_INT 0
77835: PUSH
77836: LD_INT 0
77838: PUSH
77839: LD_INT 0
77841: PUSH
77842: EMPTY
77843: LIST
77844: LIST
77845: LIST
77846: ST_TO_ADDR
// if not base then
77847: LD_VAR 0 1
77851: NOT
77852: IFFALSE 77856
// exit ;
77854: GO 77905
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77856: LD_ADDR_VAR 0 2
77860: PUSH
77861: LD_VAR 0 1
77865: PPUSH
77866: LD_INT 1
77868: PPUSH
77869: CALL_OW 275
77873: PUSH
77874: LD_VAR 0 1
77878: PPUSH
77879: LD_INT 2
77881: PPUSH
77882: CALL_OW 275
77886: PUSH
77887: LD_VAR 0 1
77891: PPUSH
77892: LD_INT 3
77894: PPUSH
77895: CALL_OW 275
77899: PUSH
77900: EMPTY
77901: LIST
77902: LIST
77903: LIST
77904: ST_TO_ADDR
// end ;
77905: LD_VAR 0 2
77909: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77910: LD_INT 0
77912: PPUSH
77913: PPUSH
// result := array ;
77914: LD_ADDR_VAR 0 3
77918: PUSH
77919: LD_VAR 0 1
77923: ST_TO_ADDR
// if size >= result then
77924: LD_VAR 0 2
77928: PUSH
77929: LD_VAR 0 3
77933: GREATEREQUAL
77934: IFFALSE 77938
// exit ;
77936: GO 77988
// if size then
77938: LD_VAR 0 2
77942: IFFALSE 77988
// for i := array downto size do
77944: LD_ADDR_VAR 0 4
77948: PUSH
77949: DOUBLE
77950: LD_VAR 0 1
77954: INC
77955: ST_TO_ADDR
77956: LD_VAR 0 2
77960: PUSH
77961: FOR_DOWNTO
77962: IFFALSE 77986
// result := Delete ( result , result ) ;
77964: LD_ADDR_VAR 0 3
77968: PUSH
77969: LD_VAR 0 3
77973: PPUSH
77974: LD_VAR 0 3
77978: PPUSH
77979: CALL_OW 3
77983: ST_TO_ADDR
77984: GO 77961
77986: POP
77987: POP
// end ;
77988: LD_VAR 0 3
77992: RET
// export function ComExit ( unit ) ; var tmp ; begin
77993: LD_INT 0
77995: PPUSH
77996: PPUSH
// if not IsInUnit ( unit ) then
77997: LD_VAR 0 1
78001: PPUSH
78002: CALL_OW 310
78006: NOT
78007: IFFALSE 78011
// exit ;
78009: GO 78071
// tmp := IsInUnit ( unit ) ;
78011: LD_ADDR_VAR 0 3
78015: PUSH
78016: LD_VAR 0 1
78020: PPUSH
78021: CALL_OW 310
78025: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78026: LD_VAR 0 3
78030: PPUSH
78031: CALL_OW 247
78035: PUSH
78036: LD_INT 2
78038: EQUAL
78039: IFFALSE 78052
// ComExitVehicle ( unit ) else
78041: LD_VAR 0 1
78045: PPUSH
78046: CALL_OW 121
78050: GO 78061
// ComExitBuilding ( unit ) ;
78052: LD_VAR 0 1
78056: PPUSH
78057: CALL_OW 122
// result := tmp ;
78061: LD_ADDR_VAR 0 2
78065: PUSH
78066: LD_VAR 0 3
78070: ST_TO_ADDR
// end ;
78071: LD_VAR 0 2
78075: RET
// export function ComExitAll ( units ) ; var i ; begin
78076: LD_INT 0
78078: PPUSH
78079: PPUSH
// if not units then
78080: LD_VAR 0 1
78084: NOT
78085: IFFALSE 78089
// exit ;
78087: GO 78115
// for i in units do
78089: LD_ADDR_VAR 0 3
78093: PUSH
78094: LD_VAR 0 1
78098: PUSH
78099: FOR_IN
78100: IFFALSE 78113
// ComExit ( i ) ;
78102: LD_VAR 0 3
78106: PPUSH
78107: CALL 77993 0 1
78111: GO 78099
78113: POP
78114: POP
// end ;
78115: LD_VAR 0 2
78119: RET
// export function ResetHc ; begin
78120: LD_INT 0
78122: PPUSH
// InitHc ;
78123: CALL_OW 19
// hc_importance := 0 ;
78127: LD_ADDR_OWVAR 32
78131: PUSH
78132: LD_INT 0
78134: ST_TO_ADDR
// end ;
78135: LD_VAR 0 1
78139: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78140: LD_INT 0
78142: PPUSH
78143: PPUSH
78144: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78145: LD_ADDR_VAR 0 6
78149: PUSH
78150: LD_VAR 0 1
78154: PUSH
78155: LD_VAR 0 3
78159: PLUS
78160: PUSH
78161: LD_INT 2
78163: DIV
78164: ST_TO_ADDR
// if _x < 0 then
78165: LD_VAR 0 6
78169: PUSH
78170: LD_INT 0
78172: LESS
78173: IFFALSE 78190
// _x := _x * - 1 ;
78175: LD_ADDR_VAR 0 6
78179: PUSH
78180: LD_VAR 0 6
78184: PUSH
78185: LD_INT 1
78187: NEG
78188: MUL
78189: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78190: LD_ADDR_VAR 0 7
78194: PUSH
78195: LD_VAR 0 2
78199: PUSH
78200: LD_VAR 0 4
78204: PLUS
78205: PUSH
78206: LD_INT 2
78208: DIV
78209: ST_TO_ADDR
// if _y < 0 then
78210: LD_VAR 0 7
78214: PUSH
78215: LD_INT 0
78217: LESS
78218: IFFALSE 78235
// _y := _y * - 1 ;
78220: LD_ADDR_VAR 0 7
78224: PUSH
78225: LD_VAR 0 7
78229: PUSH
78230: LD_INT 1
78232: NEG
78233: MUL
78234: ST_TO_ADDR
// result := [ _x , _y ] ;
78235: LD_ADDR_VAR 0 5
78239: PUSH
78240: LD_VAR 0 6
78244: PUSH
78245: LD_VAR 0 7
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: ST_TO_ADDR
// end ;
78254: LD_VAR 0 5
78258: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78259: LD_INT 0
78261: PPUSH
78262: PPUSH
78263: PPUSH
78264: PPUSH
// task := GetTaskList ( unit ) ;
78265: LD_ADDR_VAR 0 7
78269: PUSH
78270: LD_VAR 0 1
78274: PPUSH
78275: CALL_OW 437
78279: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78280: LD_VAR 0 7
78284: NOT
78285: PUSH
78286: LD_VAR 0 1
78290: PPUSH
78291: LD_VAR 0 2
78295: PPUSH
78296: CALL_OW 308
78300: NOT
78301: AND
78302: IFFALSE 78306
// exit ;
78304: GO 78424
// if IsInArea ( unit , area ) then
78306: LD_VAR 0 1
78310: PPUSH
78311: LD_VAR 0 2
78315: PPUSH
78316: CALL_OW 308
78320: IFFALSE 78338
// begin ComMoveToArea ( unit , goAway ) ;
78322: LD_VAR 0 1
78326: PPUSH
78327: LD_VAR 0 3
78331: PPUSH
78332: CALL_OW 113
// exit ;
78336: GO 78424
// end ; if task [ 1 ] [ 1 ] <> M then
78338: LD_VAR 0 7
78342: PUSH
78343: LD_INT 1
78345: ARRAY
78346: PUSH
78347: LD_INT 1
78349: ARRAY
78350: PUSH
78351: LD_STRING M
78353: NONEQUAL
78354: IFFALSE 78358
// exit ;
78356: GO 78424
// x := task [ 1 ] [ 2 ] ;
78358: LD_ADDR_VAR 0 5
78362: PUSH
78363: LD_VAR 0 7
78367: PUSH
78368: LD_INT 1
78370: ARRAY
78371: PUSH
78372: LD_INT 2
78374: ARRAY
78375: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78376: LD_ADDR_VAR 0 6
78380: PUSH
78381: LD_VAR 0 7
78385: PUSH
78386: LD_INT 1
78388: ARRAY
78389: PUSH
78390: LD_INT 3
78392: ARRAY
78393: ST_TO_ADDR
// if InArea ( x , y , area ) then
78394: LD_VAR 0 5
78398: PPUSH
78399: LD_VAR 0 6
78403: PPUSH
78404: LD_VAR 0 2
78408: PPUSH
78409: CALL_OW 309
78413: IFFALSE 78424
// ComStop ( unit ) ;
78415: LD_VAR 0 1
78419: PPUSH
78420: CALL_OW 141
// end ;
78424: LD_VAR 0 4
78428: RET
// export function Abs ( value ) ; begin
78429: LD_INT 0
78431: PPUSH
// result := value ;
78432: LD_ADDR_VAR 0 2
78436: PUSH
78437: LD_VAR 0 1
78441: ST_TO_ADDR
// if value < 0 then
78442: LD_VAR 0 1
78446: PUSH
78447: LD_INT 0
78449: LESS
78450: IFFALSE 78467
// result := value * - 1 ;
78452: LD_ADDR_VAR 0 2
78456: PUSH
78457: LD_VAR 0 1
78461: PUSH
78462: LD_INT 1
78464: NEG
78465: MUL
78466: ST_TO_ADDR
// end ;
78467: LD_VAR 0 2
78471: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78472: LD_INT 0
78474: PPUSH
78475: PPUSH
78476: PPUSH
78477: PPUSH
78478: PPUSH
78479: PPUSH
78480: PPUSH
78481: PPUSH
// if not unit or not building then
78482: LD_VAR 0 1
78486: NOT
78487: PUSH
78488: LD_VAR 0 2
78492: NOT
78493: OR
78494: IFFALSE 78498
// exit ;
78496: GO 78724
// x := GetX ( building ) ;
78498: LD_ADDR_VAR 0 4
78502: PUSH
78503: LD_VAR 0 2
78507: PPUSH
78508: CALL_OW 250
78512: ST_TO_ADDR
// y := GetY ( building ) ;
78513: LD_ADDR_VAR 0 6
78517: PUSH
78518: LD_VAR 0 2
78522: PPUSH
78523: CALL_OW 251
78527: ST_TO_ADDR
// d := GetDir ( building ) ;
78528: LD_ADDR_VAR 0 8
78532: PUSH
78533: LD_VAR 0 2
78537: PPUSH
78538: CALL_OW 254
78542: ST_TO_ADDR
// r := 4 ;
78543: LD_ADDR_VAR 0 9
78547: PUSH
78548: LD_INT 4
78550: ST_TO_ADDR
// for i := 1 to 5 do
78551: LD_ADDR_VAR 0 10
78555: PUSH
78556: DOUBLE
78557: LD_INT 1
78559: DEC
78560: ST_TO_ADDR
78561: LD_INT 5
78563: PUSH
78564: FOR_TO
78565: IFFALSE 78722
// begin _x := ShiftX ( x , d , r + i ) ;
78567: LD_ADDR_VAR 0 5
78571: PUSH
78572: LD_VAR 0 4
78576: PPUSH
78577: LD_VAR 0 8
78581: PPUSH
78582: LD_VAR 0 9
78586: PUSH
78587: LD_VAR 0 10
78591: PLUS
78592: PPUSH
78593: CALL_OW 272
78597: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78598: LD_ADDR_VAR 0 7
78602: PUSH
78603: LD_VAR 0 6
78607: PPUSH
78608: LD_VAR 0 8
78612: PPUSH
78613: LD_VAR 0 9
78617: PUSH
78618: LD_VAR 0 10
78622: PLUS
78623: PPUSH
78624: CALL_OW 273
78628: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78629: LD_VAR 0 5
78633: PPUSH
78634: LD_VAR 0 7
78638: PPUSH
78639: CALL_OW 488
78643: PUSH
78644: LD_VAR 0 5
78648: PPUSH
78649: LD_VAR 0 7
78653: PPUSH
78654: CALL_OW 428
78658: PPUSH
78659: CALL_OW 247
78663: PUSH
78664: LD_INT 3
78666: PUSH
78667: LD_INT 2
78669: PUSH
78670: EMPTY
78671: LIST
78672: LIST
78673: IN
78674: NOT
78675: AND
78676: IFFALSE 78720
// begin ComMoveXY ( unit , _x , _y ) ;
78678: LD_VAR 0 1
78682: PPUSH
78683: LD_VAR 0 5
78687: PPUSH
78688: LD_VAR 0 7
78692: PPUSH
78693: CALL_OW 111
// result := [ _x , _y ] ;
78697: LD_ADDR_VAR 0 3
78701: PUSH
78702: LD_VAR 0 5
78706: PUSH
78707: LD_VAR 0 7
78711: PUSH
78712: EMPTY
78713: LIST
78714: LIST
78715: ST_TO_ADDR
// exit ;
78716: POP
78717: POP
78718: GO 78724
// end ; end ;
78720: GO 78564
78722: POP
78723: POP
// end ;
78724: LD_VAR 0 3
78728: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78729: LD_INT 0
78731: PPUSH
78732: PPUSH
78733: PPUSH
// result := 0 ;
78734: LD_ADDR_VAR 0 3
78738: PUSH
78739: LD_INT 0
78741: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78742: LD_VAR 0 1
78746: PUSH
78747: LD_INT 0
78749: LESS
78750: PUSH
78751: LD_VAR 0 1
78755: PUSH
78756: LD_INT 8
78758: GREATER
78759: OR
78760: PUSH
78761: LD_VAR 0 2
78765: PUSH
78766: LD_INT 0
78768: LESS
78769: OR
78770: PUSH
78771: LD_VAR 0 2
78775: PUSH
78776: LD_INT 8
78778: GREATER
78779: OR
78780: IFFALSE 78784
// exit ;
78782: GO 78859
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78784: LD_ADDR_VAR 0 4
78788: PUSH
78789: LD_INT 22
78791: PUSH
78792: LD_VAR 0 2
78796: PUSH
78797: EMPTY
78798: LIST
78799: LIST
78800: PPUSH
78801: CALL_OW 69
78805: PUSH
78806: FOR_IN
78807: IFFALSE 78857
// begin un := UnitShoot ( i ) ;
78809: LD_ADDR_VAR 0 5
78813: PUSH
78814: LD_VAR 0 4
78818: PPUSH
78819: CALL_OW 504
78823: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78824: LD_VAR 0 5
78828: PPUSH
78829: CALL_OW 255
78833: PUSH
78834: LD_VAR 0 1
78838: EQUAL
78839: IFFALSE 78855
// begin result := un ;
78841: LD_ADDR_VAR 0 3
78845: PUSH
78846: LD_VAR 0 5
78850: ST_TO_ADDR
// exit ;
78851: POP
78852: POP
78853: GO 78859
// end ; end ;
78855: GO 78806
78857: POP
78858: POP
// end ;
78859: LD_VAR 0 3
78863: RET
// export function GetCargoBay ( units ) ; begin
78864: LD_INT 0
78866: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78867: LD_ADDR_VAR 0 2
78871: PUSH
78872: LD_VAR 0 1
78876: PPUSH
78877: LD_INT 2
78879: PUSH
78880: LD_INT 34
78882: PUSH
78883: LD_INT 12
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: PUSH
78890: LD_INT 34
78892: PUSH
78893: LD_INT 51
78895: PUSH
78896: EMPTY
78897: LIST
78898: LIST
78899: PUSH
78900: LD_INT 34
78902: PUSH
78903: LD_INT 32
78905: PUSH
78906: EMPTY
78907: LIST
78908: LIST
78909: PUSH
78910: LD_INT 34
78912: PUSH
78913: LD_INT 89
78915: PUSH
78916: EMPTY
78917: LIST
78918: LIST
78919: PUSH
78920: EMPTY
78921: LIST
78922: LIST
78923: LIST
78924: LIST
78925: LIST
78926: PPUSH
78927: CALL_OW 72
78931: ST_TO_ADDR
// end ;
78932: LD_VAR 0 2
78936: RET
// export function Negate ( value ) ; begin
78937: LD_INT 0
78939: PPUSH
// result := not value ;
78940: LD_ADDR_VAR 0 2
78944: PUSH
78945: LD_VAR 0 1
78949: NOT
78950: ST_TO_ADDR
// end ;
78951: LD_VAR 0 2
78955: RET
// export function Inc ( value ) ; begin
78956: LD_INT 0
78958: PPUSH
// result := value + 1 ;
78959: LD_ADDR_VAR 0 2
78963: PUSH
78964: LD_VAR 0 1
78968: PUSH
78969: LD_INT 1
78971: PLUS
78972: ST_TO_ADDR
// end ;
78973: LD_VAR 0 2
78977: RET
// export function Dec ( value ) ; begin
78978: LD_INT 0
78980: PPUSH
// result := value - 1 ;
78981: LD_ADDR_VAR 0 2
78985: PUSH
78986: LD_VAR 0 1
78990: PUSH
78991: LD_INT 1
78993: MINUS
78994: ST_TO_ADDR
// end ;
78995: LD_VAR 0 2
78999: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79000: LD_INT 0
79002: PPUSH
79003: PPUSH
79004: PPUSH
79005: PPUSH
79006: PPUSH
79007: PPUSH
79008: PPUSH
79009: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79010: LD_VAR 0 1
79014: PPUSH
79015: LD_VAR 0 2
79019: PPUSH
79020: CALL_OW 488
79024: NOT
79025: PUSH
79026: LD_VAR 0 3
79030: PPUSH
79031: LD_VAR 0 4
79035: PPUSH
79036: CALL_OW 488
79040: NOT
79041: OR
79042: IFFALSE 79055
// begin result := - 1 ;
79044: LD_ADDR_VAR 0 5
79048: PUSH
79049: LD_INT 1
79051: NEG
79052: ST_TO_ADDR
// exit ;
79053: GO 79290
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79055: LD_ADDR_VAR 0 12
79059: PUSH
79060: LD_VAR 0 1
79064: PPUSH
79065: LD_VAR 0 2
79069: PPUSH
79070: LD_VAR 0 3
79074: PPUSH
79075: LD_VAR 0 4
79079: PPUSH
79080: CALL 78140 0 4
79084: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79085: LD_ADDR_VAR 0 11
79089: PUSH
79090: LD_VAR 0 1
79094: PPUSH
79095: LD_VAR 0 2
79099: PPUSH
79100: LD_VAR 0 12
79104: PUSH
79105: LD_INT 1
79107: ARRAY
79108: PPUSH
79109: LD_VAR 0 12
79113: PUSH
79114: LD_INT 2
79116: ARRAY
79117: PPUSH
79118: CALL_OW 298
79122: ST_TO_ADDR
// distance := 9999 ;
79123: LD_ADDR_VAR 0 10
79127: PUSH
79128: LD_INT 9999
79130: ST_TO_ADDR
// for i := 0 to 5 do
79131: LD_ADDR_VAR 0 6
79135: PUSH
79136: DOUBLE
79137: LD_INT 0
79139: DEC
79140: ST_TO_ADDR
79141: LD_INT 5
79143: PUSH
79144: FOR_TO
79145: IFFALSE 79288
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79147: LD_ADDR_VAR 0 7
79151: PUSH
79152: LD_VAR 0 1
79156: PPUSH
79157: LD_VAR 0 6
79161: PPUSH
79162: LD_VAR 0 11
79166: PPUSH
79167: CALL_OW 272
79171: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79172: LD_ADDR_VAR 0 8
79176: PUSH
79177: LD_VAR 0 2
79181: PPUSH
79182: LD_VAR 0 6
79186: PPUSH
79187: LD_VAR 0 11
79191: PPUSH
79192: CALL_OW 273
79196: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79197: LD_VAR 0 7
79201: PPUSH
79202: LD_VAR 0 8
79206: PPUSH
79207: CALL_OW 488
79211: NOT
79212: IFFALSE 79216
// continue ;
79214: GO 79144
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79216: LD_ADDR_VAR 0 9
79220: PUSH
79221: LD_VAR 0 12
79225: PUSH
79226: LD_INT 1
79228: ARRAY
79229: PPUSH
79230: LD_VAR 0 12
79234: PUSH
79235: LD_INT 2
79237: ARRAY
79238: PPUSH
79239: LD_VAR 0 7
79243: PPUSH
79244: LD_VAR 0 8
79248: PPUSH
79249: CALL_OW 298
79253: ST_TO_ADDR
// if tmp < distance then
79254: LD_VAR 0 9
79258: PUSH
79259: LD_VAR 0 10
79263: LESS
79264: IFFALSE 79286
// begin result := i ;
79266: LD_ADDR_VAR 0 5
79270: PUSH
79271: LD_VAR 0 6
79275: ST_TO_ADDR
// distance := tmp ;
79276: LD_ADDR_VAR 0 10
79280: PUSH
79281: LD_VAR 0 9
79285: ST_TO_ADDR
// end ; end ;
79286: GO 79144
79288: POP
79289: POP
// end ;
79290: LD_VAR 0 5
79294: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79295: LD_INT 0
79297: PPUSH
79298: PPUSH
// if not driver or not IsInUnit ( driver ) then
79299: LD_VAR 0 1
79303: NOT
79304: PUSH
79305: LD_VAR 0 1
79309: PPUSH
79310: CALL_OW 310
79314: NOT
79315: OR
79316: IFFALSE 79320
// exit ;
79318: GO 79410
// vehicle := IsInUnit ( driver ) ;
79320: LD_ADDR_VAR 0 3
79324: PUSH
79325: LD_VAR 0 1
79329: PPUSH
79330: CALL_OW 310
79334: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79335: LD_VAR 0 1
79339: PPUSH
79340: LD_STRING \
79342: PUSH
79343: LD_INT 0
79345: PUSH
79346: LD_INT 0
79348: PUSH
79349: LD_INT 0
79351: PUSH
79352: LD_INT 0
79354: PUSH
79355: LD_INT 0
79357: PUSH
79358: LD_INT 0
79360: PUSH
79361: EMPTY
79362: LIST
79363: LIST
79364: LIST
79365: LIST
79366: LIST
79367: LIST
79368: LIST
79369: PUSH
79370: LD_STRING E
79372: PUSH
79373: LD_INT 0
79375: PUSH
79376: LD_INT 0
79378: PUSH
79379: LD_VAR 0 3
79383: PUSH
79384: LD_INT 0
79386: PUSH
79387: LD_INT 0
79389: PUSH
79390: LD_INT 0
79392: PUSH
79393: EMPTY
79394: LIST
79395: LIST
79396: LIST
79397: LIST
79398: LIST
79399: LIST
79400: LIST
79401: PUSH
79402: EMPTY
79403: LIST
79404: LIST
79405: PPUSH
79406: CALL_OW 446
// end ;
79410: LD_VAR 0 2
79414: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79415: LD_INT 0
79417: PPUSH
79418: PPUSH
// if not driver or not IsInUnit ( driver ) then
79419: LD_VAR 0 1
79423: NOT
79424: PUSH
79425: LD_VAR 0 1
79429: PPUSH
79430: CALL_OW 310
79434: NOT
79435: OR
79436: IFFALSE 79440
// exit ;
79438: GO 79530
// vehicle := IsInUnit ( driver ) ;
79440: LD_ADDR_VAR 0 3
79444: PUSH
79445: LD_VAR 0 1
79449: PPUSH
79450: CALL_OW 310
79454: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79455: LD_VAR 0 1
79459: PPUSH
79460: LD_STRING \
79462: PUSH
79463: LD_INT 0
79465: PUSH
79466: LD_INT 0
79468: PUSH
79469: LD_INT 0
79471: PUSH
79472: LD_INT 0
79474: PUSH
79475: LD_INT 0
79477: PUSH
79478: LD_INT 0
79480: PUSH
79481: EMPTY
79482: LIST
79483: LIST
79484: LIST
79485: LIST
79486: LIST
79487: LIST
79488: LIST
79489: PUSH
79490: LD_STRING E
79492: PUSH
79493: LD_INT 0
79495: PUSH
79496: LD_INT 0
79498: PUSH
79499: LD_VAR 0 3
79503: PUSH
79504: LD_INT 0
79506: PUSH
79507: LD_INT 0
79509: PUSH
79510: LD_INT 0
79512: PUSH
79513: EMPTY
79514: LIST
79515: LIST
79516: LIST
79517: LIST
79518: LIST
79519: LIST
79520: LIST
79521: PUSH
79522: EMPTY
79523: LIST
79524: LIST
79525: PPUSH
79526: CALL_OW 447
// end ;
79530: LD_VAR 0 2
79534: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79535: LD_INT 0
79537: PPUSH
79538: PPUSH
79539: PPUSH
// tmp := [ ] ;
79540: LD_ADDR_VAR 0 5
79544: PUSH
79545: EMPTY
79546: ST_TO_ADDR
// for i in units do
79547: LD_ADDR_VAR 0 4
79551: PUSH
79552: LD_VAR 0 1
79556: PUSH
79557: FOR_IN
79558: IFFALSE 79596
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79560: LD_ADDR_VAR 0 5
79564: PUSH
79565: LD_VAR 0 5
79569: PPUSH
79570: LD_VAR 0 5
79574: PUSH
79575: LD_INT 1
79577: PLUS
79578: PPUSH
79579: LD_VAR 0 4
79583: PPUSH
79584: CALL_OW 256
79588: PPUSH
79589: CALL_OW 2
79593: ST_TO_ADDR
79594: GO 79557
79596: POP
79597: POP
// if not tmp then
79598: LD_VAR 0 5
79602: NOT
79603: IFFALSE 79607
// exit ;
79605: GO 79655
// if asc then
79607: LD_VAR 0 2
79611: IFFALSE 79635
// result := SortListByListAsc ( units , tmp ) else
79613: LD_ADDR_VAR 0 3
79617: PUSH
79618: LD_VAR 0 1
79622: PPUSH
79623: LD_VAR 0 5
79627: PPUSH
79628: CALL_OW 76
79632: ST_TO_ADDR
79633: GO 79655
// result := SortListByListDesc ( units , tmp ) ;
79635: LD_ADDR_VAR 0 3
79639: PUSH
79640: LD_VAR 0 1
79644: PPUSH
79645: LD_VAR 0 5
79649: PPUSH
79650: CALL_OW 77
79654: ST_TO_ADDR
// end ;
79655: LD_VAR 0 3
79659: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79660: LD_INT 0
79662: PPUSH
79663: PPUSH
// task := GetTaskList ( mech ) ;
79664: LD_ADDR_VAR 0 4
79668: PUSH
79669: LD_VAR 0 1
79673: PPUSH
79674: CALL_OW 437
79678: ST_TO_ADDR
// if not task then
79679: LD_VAR 0 4
79683: NOT
79684: IFFALSE 79688
// exit ;
79686: GO 79730
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79688: LD_ADDR_VAR 0 3
79692: PUSH
79693: LD_VAR 0 4
79697: PUSH
79698: LD_INT 1
79700: ARRAY
79701: PUSH
79702: LD_INT 1
79704: ARRAY
79705: PUSH
79706: LD_STRING r
79708: EQUAL
79709: PUSH
79710: LD_VAR 0 4
79714: PUSH
79715: LD_INT 1
79717: ARRAY
79718: PUSH
79719: LD_INT 4
79721: ARRAY
79722: PUSH
79723: LD_VAR 0 2
79727: EQUAL
79728: AND
79729: ST_TO_ADDR
// end ;
79730: LD_VAR 0 3
79734: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79735: LD_INT 0
79737: PPUSH
// SetDir ( unit , d ) ;
79738: LD_VAR 0 1
79742: PPUSH
79743: LD_VAR 0 4
79747: PPUSH
79748: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79752: LD_VAR 0 1
79756: PPUSH
79757: LD_VAR 0 2
79761: PPUSH
79762: LD_VAR 0 3
79766: PPUSH
79767: LD_VAR 0 5
79771: PPUSH
79772: CALL_OW 48
// end ;
79776: LD_VAR 0 6
79780: RET
// export function ToNaturalNumber ( number ) ; begin
79781: LD_INT 0
79783: PPUSH
// result := number div 1 ;
79784: LD_ADDR_VAR 0 2
79788: PUSH
79789: LD_VAR 0 1
79793: PUSH
79794: LD_INT 1
79796: DIV
79797: ST_TO_ADDR
// if number < 0 then
79798: LD_VAR 0 1
79802: PUSH
79803: LD_INT 0
79805: LESS
79806: IFFALSE 79816
// result := 0 ;
79808: LD_ADDR_VAR 0 2
79812: PUSH
79813: LD_INT 0
79815: ST_TO_ADDR
// end ;
79816: LD_VAR 0 2
79820: RET
// export function SortByClass ( units , class ) ; var un ; begin
79821: LD_INT 0
79823: PPUSH
79824: PPUSH
// if not units or not class then
79825: LD_VAR 0 1
79829: NOT
79830: PUSH
79831: LD_VAR 0 2
79835: NOT
79836: OR
79837: IFFALSE 79841
// exit ;
79839: GO 79936
// result := [ ] ;
79841: LD_ADDR_VAR 0 3
79845: PUSH
79846: EMPTY
79847: ST_TO_ADDR
// for un in units do
79848: LD_ADDR_VAR 0 4
79852: PUSH
79853: LD_VAR 0 1
79857: PUSH
79858: FOR_IN
79859: IFFALSE 79934
// if GetClass ( un ) = class then
79861: LD_VAR 0 4
79865: PPUSH
79866: CALL_OW 257
79870: PUSH
79871: LD_VAR 0 2
79875: EQUAL
79876: IFFALSE 79903
// result := Insert ( result , 1 , un ) else
79878: LD_ADDR_VAR 0 3
79882: PUSH
79883: LD_VAR 0 3
79887: PPUSH
79888: LD_INT 1
79890: PPUSH
79891: LD_VAR 0 4
79895: PPUSH
79896: CALL_OW 2
79900: ST_TO_ADDR
79901: GO 79932
// result := Replace ( result , result + 1 , un ) ;
79903: LD_ADDR_VAR 0 3
79907: PUSH
79908: LD_VAR 0 3
79912: PPUSH
79913: LD_VAR 0 3
79917: PUSH
79918: LD_INT 1
79920: PLUS
79921: PPUSH
79922: LD_VAR 0 4
79926: PPUSH
79927: CALL_OW 1
79931: ST_TO_ADDR
79932: GO 79858
79934: POP
79935: POP
// end ;
79936: LD_VAR 0 3
79940: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79941: LD_INT 0
79943: PPUSH
79944: PPUSH
79945: PPUSH
79946: PPUSH
79947: PPUSH
79948: PPUSH
79949: PPUSH
// result := [ ] ;
79950: LD_ADDR_VAR 0 4
79954: PUSH
79955: EMPTY
79956: ST_TO_ADDR
// if x - r < 0 then
79957: LD_VAR 0 1
79961: PUSH
79962: LD_VAR 0 3
79966: MINUS
79967: PUSH
79968: LD_INT 0
79970: LESS
79971: IFFALSE 79983
// min_x := 0 else
79973: LD_ADDR_VAR 0 8
79977: PUSH
79978: LD_INT 0
79980: ST_TO_ADDR
79981: GO 79999
// min_x := x - r ;
79983: LD_ADDR_VAR 0 8
79987: PUSH
79988: LD_VAR 0 1
79992: PUSH
79993: LD_VAR 0 3
79997: MINUS
79998: ST_TO_ADDR
// if y - r < 0 then
79999: LD_VAR 0 2
80003: PUSH
80004: LD_VAR 0 3
80008: MINUS
80009: PUSH
80010: LD_INT 0
80012: LESS
80013: IFFALSE 80025
// min_y := 0 else
80015: LD_ADDR_VAR 0 7
80019: PUSH
80020: LD_INT 0
80022: ST_TO_ADDR
80023: GO 80041
// min_y := y - r ;
80025: LD_ADDR_VAR 0 7
80029: PUSH
80030: LD_VAR 0 2
80034: PUSH
80035: LD_VAR 0 3
80039: MINUS
80040: ST_TO_ADDR
// max_x := x + r ;
80041: LD_ADDR_VAR 0 9
80045: PUSH
80046: LD_VAR 0 1
80050: PUSH
80051: LD_VAR 0 3
80055: PLUS
80056: ST_TO_ADDR
// max_y := y + r ;
80057: LD_ADDR_VAR 0 10
80061: PUSH
80062: LD_VAR 0 2
80066: PUSH
80067: LD_VAR 0 3
80071: PLUS
80072: ST_TO_ADDR
// for _x = min_x to max_x do
80073: LD_ADDR_VAR 0 5
80077: PUSH
80078: DOUBLE
80079: LD_VAR 0 8
80083: DEC
80084: ST_TO_ADDR
80085: LD_VAR 0 9
80089: PUSH
80090: FOR_TO
80091: IFFALSE 80192
// for _y = min_y to max_y do
80093: LD_ADDR_VAR 0 6
80097: PUSH
80098: DOUBLE
80099: LD_VAR 0 7
80103: DEC
80104: ST_TO_ADDR
80105: LD_VAR 0 10
80109: PUSH
80110: FOR_TO
80111: IFFALSE 80188
// begin if not ValidHex ( _x , _y ) then
80113: LD_VAR 0 5
80117: PPUSH
80118: LD_VAR 0 6
80122: PPUSH
80123: CALL_OW 488
80127: NOT
80128: IFFALSE 80132
// continue ;
80130: GO 80110
// if GetResourceTypeXY ( _x , _y ) then
80132: LD_VAR 0 5
80136: PPUSH
80137: LD_VAR 0 6
80141: PPUSH
80142: CALL_OW 283
80146: IFFALSE 80186
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80148: LD_ADDR_VAR 0 4
80152: PUSH
80153: LD_VAR 0 4
80157: PPUSH
80158: LD_VAR 0 4
80162: PUSH
80163: LD_INT 1
80165: PLUS
80166: PPUSH
80167: LD_VAR 0 5
80171: PUSH
80172: LD_VAR 0 6
80176: PUSH
80177: EMPTY
80178: LIST
80179: LIST
80180: PPUSH
80181: CALL_OW 1
80185: ST_TO_ADDR
// end ;
80186: GO 80110
80188: POP
80189: POP
80190: GO 80090
80192: POP
80193: POP
// end ;
80194: LD_VAR 0 4
80198: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80199: LD_INT 0
80201: PPUSH
80202: PPUSH
80203: PPUSH
80204: PPUSH
80205: PPUSH
80206: PPUSH
80207: PPUSH
80208: PPUSH
// if not units then
80209: LD_VAR 0 1
80213: NOT
80214: IFFALSE 80218
// exit ;
80216: GO 80742
// result := UnitFilter ( units , [ f_ok ] ) ;
80218: LD_ADDR_VAR 0 3
80222: PUSH
80223: LD_VAR 0 1
80227: PPUSH
80228: LD_INT 50
80230: PUSH
80231: EMPTY
80232: LIST
80233: PPUSH
80234: CALL_OW 72
80238: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80239: LD_ADDR_VAR 0 8
80243: PUSH
80244: LD_VAR 0 1
80248: PUSH
80249: LD_INT 1
80251: ARRAY
80252: PPUSH
80253: CALL_OW 255
80257: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80258: LD_ADDR_VAR 0 10
80262: PUSH
80263: LD_INT 29
80265: PUSH
80266: LD_INT 91
80268: PUSH
80269: LD_INT 49
80271: PUSH
80272: EMPTY
80273: LIST
80274: LIST
80275: LIST
80276: ST_TO_ADDR
// if not result then
80277: LD_VAR 0 3
80281: NOT
80282: IFFALSE 80286
// exit ;
80284: GO 80742
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80286: LD_ADDR_VAR 0 5
80290: PUSH
80291: LD_INT 81
80293: PUSH
80294: LD_VAR 0 8
80298: PUSH
80299: EMPTY
80300: LIST
80301: LIST
80302: PPUSH
80303: CALL_OW 69
80307: ST_TO_ADDR
// for i in result do
80308: LD_ADDR_VAR 0 4
80312: PUSH
80313: LD_VAR 0 3
80317: PUSH
80318: FOR_IN
80319: IFFALSE 80740
// begin tag := GetTag ( i ) + 1 ;
80321: LD_ADDR_VAR 0 9
80325: PUSH
80326: LD_VAR 0 4
80330: PPUSH
80331: CALL_OW 110
80335: PUSH
80336: LD_INT 1
80338: PLUS
80339: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80340: LD_ADDR_VAR 0 7
80344: PUSH
80345: LD_VAR 0 4
80349: PPUSH
80350: CALL_OW 250
80354: PPUSH
80355: LD_VAR 0 4
80359: PPUSH
80360: CALL_OW 251
80364: PPUSH
80365: LD_INT 6
80367: PPUSH
80368: CALL 79941 0 3
80372: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80373: LD_VAR 0 4
80377: PPUSH
80378: CALL_OW 247
80382: PUSH
80383: LD_INT 2
80385: EQUAL
80386: PUSH
80387: LD_VAR 0 7
80391: AND
80392: PUSH
80393: LD_VAR 0 4
80397: PPUSH
80398: CALL_OW 264
80402: PUSH
80403: LD_VAR 0 10
80407: IN
80408: NOT
80409: AND
80410: IFFALSE 80449
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80412: LD_VAR 0 4
80416: PPUSH
80417: LD_VAR 0 7
80421: PUSH
80422: LD_INT 1
80424: ARRAY
80425: PUSH
80426: LD_INT 1
80428: ARRAY
80429: PPUSH
80430: LD_VAR 0 7
80434: PUSH
80435: LD_INT 1
80437: ARRAY
80438: PUSH
80439: LD_INT 2
80441: ARRAY
80442: PPUSH
80443: CALL_OW 116
80447: GO 80738
// if path > tag then
80449: LD_VAR 0 2
80453: PUSH
80454: LD_VAR 0 9
80458: GREATER
80459: IFFALSE 80667
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80461: LD_ADDR_VAR 0 6
80465: PUSH
80466: LD_VAR 0 5
80470: PPUSH
80471: LD_INT 91
80473: PUSH
80474: LD_VAR 0 4
80478: PUSH
80479: LD_INT 8
80481: PUSH
80482: EMPTY
80483: LIST
80484: LIST
80485: LIST
80486: PPUSH
80487: CALL_OW 72
80491: ST_TO_ADDR
// if nearEnemy then
80492: LD_VAR 0 6
80496: IFFALSE 80565
// begin if GetWeapon ( i ) = ru_time_lapser then
80498: LD_VAR 0 4
80502: PPUSH
80503: CALL_OW 264
80507: PUSH
80508: LD_INT 49
80510: EQUAL
80511: IFFALSE 80539
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80513: LD_VAR 0 4
80517: PPUSH
80518: LD_VAR 0 6
80522: PPUSH
80523: LD_VAR 0 4
80527: PPUSH
80528: CALL_OW 74
80532: PPUSH
80533: CALL_OW 112
80537: GO 80563
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80539: LD_VAR 0 4
80543: PPUSH
80544: LD_VAR 0 6
80548: PPUSH
80549: LD_VAR 0 4
80553: PPUSH
80554: CALL_OW 74
80558: PPUSH
80559: CALL 81667 0 2
// end else
80563: GO 80665
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80565: LD_VAR 0 4
80569: PPUSH
80570: LD_VAR 0 2
80574: PUSH
80575: LD_VAR 0 9
80579: ARRAY
80580: PUSH
80581: LD_INT 1
80583: ARRAY
80584: PPUSH
80585: LD_VAR 0 2
80589: PUSH
80590: LD_VAR 0 9
80594: ARRAY
80595: PUSH
80596: LD_INT 2
80598: ARRAY
80599: PPUSH
80600: CALL_OW 297
80604: PUSH
80605: LD_INT 6
80607: GREATER
80608: IFFALSE 80651
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80610: LD_VAR 0 4
80614: PPUSH
80615: LD_VAR 0 2
80619: PUSH
80620: LD_VAR 0 9
80624: ARRAY
80625: PUSH
80626: LD_INT 1
80628: ARRAY
80629: PPUSH
80630: LD_VAR 0 2
80634: PUSH
80635: LD_VAR 0 9
80639: ARRAY
80640: PUSH
80641: LD_INT 2
80643: ARRAY
80644: PPUSH
80645: CALL_OW 114
80649: GO 80665
// SetTag ( i , tag ) ;
80651: LD_VAR 0 4
80655: PPUSH
80656: LD_VAR 0 9
80660: PPUSH
80661: CALL_OW 109
// end else
80665: GO 80738
// if enemy then
80667: LD_VAR 0 5
80671: IFFALSE 80738
// begin if GetWeapon ( i ) = ru_time_lapser then
80673: LD_VAR 0 4
80677: PPUSH
80678: CALL_OW 264
80682: PUSH
80683: LD_INT 49
80685: EQUAL
80686: IFFALSE 80714
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80688: LD_VAR 0 4
80692: PPUSH
80693: LD_VAR 0 5
80697: PPUSH
80698: LD_VAR 0 4
80702: PPUSH
80703: CALL_OW 74
80707: PPUSH
80708: CALL_OW 112
80712: GO 80738
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80714: LD_VAR 0 4
80718: PPUSH
80719: LD_VAR 0 5
80723: PPUSH
80724: LD_VAR 0 4
80728: PPUSH
80729: CALL_OW 74
80733: PPUSH
80734: CALL 81667 0 2
// end ; end ;
80738: GO 80318
80740: POP
80741: POP
// end ;
80742: LD_VAR 0 3
80746: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80747: LD_INT 0
80749: PPUSH
80750: PPUSH
80751: PPUSH
// if not unit or IsInUnit ( unit ) then
80752: LD_VAR 0 1
80756: NOT
80757: PUSH
80758: LD_VAR 0 1
80762: PPUSH
80763: CALL_OW 310
80767: OR
80768: IFFALSE 80772
// exit ;
80770: GO 80863
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80772: LD_ADDR_VAR 0 4
80776: PUSH
80777: LD_VAR 0 1
80781: PPUSH
80782: CALL_OW 250
80786: PPUSH
80787: LD_VAR 0 2
80791: PPUSH
80792: LD_INT 1
80794: PPUSH
80795: CALL_OW 272
80799: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80800: LD_ADDR_VAR 0 5
80804: PUSH
80805: LD_VAR 0 1
80809: PPUSH
80810: CALL_OW 251
80814: PPUSH
80815: LD_VAR 0 2
80819: PPUSH
80820: LD_INT 1
80822: PPUSH
80823: CALL_OW 273
80827: ST_TO_ADDR
// if ValidHex ( x , y ) then
80828: LD_VAR 0 4
80832: PPUSH
80833: LD_VAR 0 5
80837: PPUSH
80838: CALL_OW 488
80842: IFFALSE 80863
// ComTurnXY ( unit , x , y ) ;
80844: LD_VAR 0 1
80848: PPUSH
80849: LD_VAR 0 4
80853: PPUSH
80854: LD_VAR 0 5
80858: PPUSH
80859: CALL_OW 118
// end ;
80863: LD_VAR 0 3
80867: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80868: LD_INT 0
80870: PPUSH
80871: PPUSH
// result := false ;
80872: LD_ADDR_VAR 0 3
80876: PUSH
80877: LD_INT 0
80879: ST_TO_ADDR
// if not units then
80880: LD_VAR 0 2
80884: NOT
80885: IFFALSE 80889
// exit ;
80887: GO 80934
// for i in units do
80889: LD_ADDR_VAR 0 4
80893: PUSH
80894: LD_VAR 0 2
80898: PUSH
80899: FOR_IN
80900: IFFALSE 80932
// if See ( side , i ) then
80902: LD_VAR 0 1
80906: PPUSH
80907: LD_VAR 0 4
80911: PPUSH
80912: CALL_OW 292
80916: IFFALSE 80930
// begin result := true ;
80918: LD_ADDR_VAR 0 3
80922: PUSH
80923: LD_INT 1
80925: ST_TO_ADDR
// exit ;
80926: POP
80927: POP
80928: GO 80934
// end ;
80930: GO 80899
80932: POP
80933: POP
// end ;
80934: LD_VAR 0 3
80938: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80939: LD_INT 0
80941: PPUSH
80942: PPUSH
80943: PPUSH
80944: PPUSH
// if not unit or not points then
80945: LD_VAR 0 1
80949: NOT
80950: PUSH
80951: LD_VAR 0 2
80955: NOT
80956: OR
80957: IFFALSE 80961
// exit ;
80959: GO 81051
// dist := 99999 ;
80961: LD_ADDR_VAR 0 5
80965: PUSH
80966: LD_INT 99999
80968: ST_TO_ADDR
// for i in points do
80969: LD_ADDR_VAR 0 4
80973: PUSH
80974: LD_VAR 0 2
80978: PUSH
80979: FOR_IN
80980: IFFALSE 81049
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80982: LD_ADDR_VAR 0 6
80986: PUSH
80987: LD_VAR 0 1
80991: PPUSH
80992: LD_VAR 0 4
80996: PUSH
80997: LD_INT 1
80999: ARRAY
81000: PPUSH
81001: LD_VAR 0 4
81005: PUSH
81006: LD_INT 2
81008: ARRAY
81009: PPUSH
81010: CALL_OW 297
81014: ST_TO_ADDR
// if tmpDist < dist then
81015: LD_VAR 0 6
81019: PUSH
81020: LD_VAR 0 5
81024: LESS
81025: IFFALSE 81047
// begin result := i ;
81027: LD_ADDR_VAR 0 3
81031: PUSH
81032: LD_VAR 0 4
81036: ST_TO_ADDR
// dist := tmpDist ;
81037: LD_ADDR_VAR 0 5
81041: PUSH
81042: LD_VAR 0 6
81046: ST_TO_ADDR
// end ; end ;
81047: GO 80979
81049: POP
81050: POP
// end ;
81051: LD_VAR 0 3
81055: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81056: LD_INT 0
81058: PPUSH
// uc_side := side ;
81059: LD_ADDR_OWVAR 20
81063: PUSH
81064: LD_VAR 0 1
81068: ST_TO_ADDR
// uc_nation := 3 ;
81069: LD_ADDR_OWVAR 21
81073: PUSH
81074: LD_INT 3
81076: ST_TO_ADDR
// vc_chassis := 25 ;
81077: LD_ADDR_OWVAR 37
81081: PUSH
81082: LD_INT 25
81084: ST_TO_ADDR
// vc_engine := engine_siberite ;
81085: LD_ADDR_OWVAR 39
81089: PUSH
81090: LD_INT 3
81092: ST_TO_ADDR
// vc_control := control_computer ;
81093: LD_ADDR_OWVAR 38
81097: PUSH
81098: LD_INT 3
81100: ST_TO_ADDR
// vc_weapon := 59 ;
81101: LD_ADDR_OWVAR 40
81105: PUSH
81106: LD_INT 59
81108: ST_TO_ADDR
// result := CreateVehicle ;
81109: LD_ADDR_VAR 0 5
81113: PUSH
81114: CALL_OW 45
81118: ST_TO_ADDR
// SetDir ( result , d ) ;
81119: LD_VAR 0 5
81123: PPUSH
81124: LD_VAR 0 4
81128: PPUSH
81129: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81133: LD_VAR 0 5
81137: PPUSH
81138: LD_VAR 0 2
81142: PPUSH
81143: LD_VAR 0 3
81147: PPUSH
81148: LD_INT 0
81150: PPUSH
81151: CALL_OW 48
// end ;
81155: LD_VAR 0 5
81159: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81160: LD_INT 0
81162: PPUSH
81163: PPUSH
81164: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81165: LD_ADDR_VAR 0 2
81169: PUSH
81170: LD_INT 0
81172: PUSH
81173: LD_INT 0
81175: PUSH
81176: LD_INT 0
81178: PUSH
81179: LD_INT 0
81181: PUSH
81182: EMPTY
81183: LIST
81184: LIST
81185: LIST
81186: LIST
81187: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81188: LD_VAR 0 1
81192: NOT
81193: PUSH
81194: LD_VAR 0 1
81198: PPUSH
81199: CALL_OW 264
81203: PUSH
81204: LD_INT 12
81206: PUSH
81207: LD_INT 51
81209: PUSH
81210: LD_INT 32
81212: PUSH
81213: LD_INT 89
81215: PUSH
81216: EMPTY
81217: LIST
81218: LIST
81219: LIST
81220: LIST
81221: IN
81222: NOT
81223: OR
81224: IFFALSE 81228
// exit ;
81226: GO 81326
// for i := 1 to 3 do
81228: LD_ADDR_VAR 0 3
81232: PUSH
81233: DOUBLE
81234: LD_INT 1
81236: DEC
81237: ST_TO_ADDR
81238: LD_INT 3
81240: PUSH
81241: FOR_TO
81242: IFFALSE 81324
// begin tmp := GetCargo ( cargo , i ) ;
81244: LD_ADDR_VAR 0 4
81248: PUSH
81249: LD_VAR 0 1
81253: PPUSH
81254: LD_VAR 0 3
81258: PPUSH
81259: CALL_OW 289
81263: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81264: LD_ADDR_VAR 0 2
81268: PUSH
81269: LD_VAR 0 2
81273: PPUSH
81274: LD_VAR 0 3
81278: PPUSH
81279: LD_VAR 0 4
81283: PPUSH
81284: CALL_OW 1
81288: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81289: LD_ADDR_VAR 0 2
81293: PUSH
81294: LD_VAR 0 2
81298: PPUSH
81299: LD_INT 4
81301: PPUSH
81302: LD_VAR 0 2
81306: PUSH
81307: LD_INT 4
81309: ARRAY
81310: PUSH
81311: LD_VAR 0 4
81315: PLUS
81316: PPUSH
81317: CALL_OW 1
81321: ST_TO_ADDR
// end ;
81322: GO 81241
81324: POP
81325: POP
// end ;
81326: LD_VAR 0 2
81330: RET
// export function Length ( array ) ; begin
81331: LD_INT 0
81333: PPUSH
// result := array + 0 ;
81334: LD_ADDR_VAR 0 2
81338: PUSH
81339: LD_VAR 0 1
81343: PUSH
81344: LD_INT 0
81346: PLUS
81347: ST_TO_ADDR
// end ;
81348: LD_VAR 0 2
81352: RET
// export function PrepareArray ( array ) ; begin
81353: LD_INT 0
81355: PPUSH
// result := array diff 0 ;
81356: LD_ADDR_VAR 0 2
81360: PUSH
81361: LD_VAR 0 1
81365: PUSH
81366: LD_INT 0
81368: DIFF
81369: ST_TO_ADDR
// if not result [ 1 ] then
81370: LD_VAR 0 2
81374: PUSH
81375: LD_INT 1
81377: ARRAY
81378: NOT
81379: IFFALSE 81399
// result := Delete ( result , 1 ) ;
81381: LD_ADDR_VAR 0 2
81385: PUSH
81386: LD_VAR 0 2
81390: PPUSH
81391: LD_INT 1
81393: PPUSH
81394: CALL_OW 3
81398: ST_TO_ADDR
// end ;
81399: LD_VAR 0 2
81403: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81404: LD_INT 0
81406: PPUSH
81407: PPUSH
81408: PPUSH
81409: PPUSH
// sibRocketRange := 25 ;
81410: LD_ADDR_VAR 0 6
81414: PUSH
81415: LD_INT 25
81417: ST_TO_ADDR
// result := false ;
81418: LD_ADDR_VAR 0 4
81422: PUSH
81423: LD_INT 0
81425: ST_TO_ADDR
// for i := 0 to 5 do
81426: LD_ADDR_VAR 0 5
81430: PUSH
81431: DOUBLE
81432: LD_INT 0
81434: DEC
81435: ST_TO_ADDR
81436: LD_INT 5
81438: PUSH
81439: FOR_TO
81440: IFFALSE 81507
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81442: LD_VAR 0 1
81446: PPUSH
81447: LD_VAR 0 5
81451: PPUSH
81452: LD_VAR 0 6
81456: PPUSH
81457: CALL_OW 272
81461: PPUSH
81462: LD_VAR 0 2
81466: PPUSH
81467: LD_VAR 0 5
81471: PPUSH
81472: LD_VAR 0 6
81476: PPUSH
81477: CALL_OW 273
81481: PPUSH
81482: LD_VAR 0 3
81486: PPUSH
81487: CALL_OW 309
81491: IFFALSE 81505
// begin result := true ;
81493: LD_ADDR_VAR 0 4
81497: PUSH
81498: LD_INT 1
81500: ST_TO_ADDR
// exit ;
81501: POP
81502: POP
81503: GO 81509
// end ;
81505: GO 81439
81507: POP
81508: POP
// end ;
81509: LD_VAR 0 4
81513: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81514: LD_INT 0
81516: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81517: LD_VAR 0 1
81521: PPUSH
81522: LD_VAR 0 2
81526: PPUSH
81527: LD_INT 0
81529: PPUSH
81530: LD_INT 0
81532: PPUSH
81533: LD_INT 1
81535: PPUSH
81536: LD_INT 0
81538: PPUSH
81539: CALL_OW 587
// end ;
81543: LD_VAR 0 3
81547: RET
// export function CenterOnNow ( unit ) ; begin
81548: LD_INT 0
81550: PPUSH
// result := IsInUnit ( unit ) ;
81551: LD_ADDR_VAR 0 2
81555: PUSH
81556: LD_VAR 0 1
81560: PPUSH
81561: CALL_OW 310
81565: ST_TO_ADDR
// if not result then
81566: LD_VAR 0 2
81570: NOT
81571: IFFALSE 81583
// result := unit ;
81573: LD_ADDR_VAR 0 2
81577: PUSH
81578: LD_VAR 0 1
81582: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81583: LD_VAR 0 1
81587: PPUSH
81588: CALL_OW 87
// end ;
81592: LD_VAR 0 2
81596: RET
// export function ComMoveHex ( unit , hex ) ; begin
81597: LD_INT 0
81599: PPUSH
// if not hex then
81600: LD_VAR 0 2
81604: NOT
81605: IFFALSE 81609
// exit ;
81607: GO 81662
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81609: LD_VAR 0 2
81613: PUSH
81614: LD_INT 1
81616: ARRAY
81617: PPUSH
81618: LD_VAR 0 2
81622: PUSH
81623: LD_INT 2
81625: ARRAY
81626: PPUSH
81627: CALL_OW 428
81631: IFFALSE 81635
// exit ;
81633: GO 81662
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81635: LD_VAR 0 1
81639: PPUSH
81640: LD_VAR 0 2
81644: PUSH
81645: LD_INT 1
81647: ARRAY
81648: PPUSH
81649: LD_VAR 0 2
81653: PUSH
81654: LD_INT 2
81656: ARRAY
81657: PPUSH
81658: CALL_OW 111
// end ;
81662: LD_VAR 0 3
81666: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81667: LD_INT 0
81669: PPUSH
81670: PPUSH
81671: PPUSH
// if not unit or not enemy then
81672: LD_VAR 0 1
81676: NOT
81677: PUSH
81678: LD_VAR 0 2
81682: NOT
81683: OR
81684: IFFALSE 81688
// exit ;
81686: GO 81812
// x := GetX ( enemy ) ;
81688: LD_ADDR_VAR 0 4
81692: PUSH
81693: LD_VAR 0 2
81697: PPUSH
81698: CALL_OW 250
81702: ST_TO_ADDR
// y := GetY ( enemy ) ;
81703: LD_ADDR_VAR 0 5
81707: PUSH
81708: LD_VAR 0 2
81712: PPUSH
81713: CALL_OW 251
81717: ST_TO_ADDR
// if ValidHex ( x , y ) then
81718: LD_VAR 0 4
81722: PPUSH
81723: LD_VAR 0 5
81727: PPUSH
81728: CALL_OW 488
81732: IFFALSE 81812
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
81734: LD_VAR 0 2
81738: PPUSH
81739: CALL_OW 247
81743: PUSH
81744: LD_INT 3
81746: PUSH
81747: LD_INT 2
81749: PUSH
81750: EMPTY
81751: LIST
81752: LIST
81753: IN
81754: PUSH
81755: LD_VAR 0 1
81759: PPUSH
81760: CALL_OW 255
81764: PPUSH
81765: LD_VAR 0 2
81769: PPUSH
81770: CALL_OW 292
81774: AND
81775: IFFALSE 81793
// ComAttackUnit ( unit , enemy ) else
81777: LD_VAR 0 1
81781: PPUSH
81782: LD_VAR 0 2
81786: PPUSH
81787: CALL_OW 115
81791: GO 81812
// ComAgressiveMove ( unit , x , y ) ;
81793: LD_VAR 0 1
81797: PPUSH
81798: LD_VAR 0 4
81802: PPUSH
81803: LD_VAR 0 5
81807: PPUSH
81808: CALL_OW 114
// end ; end_of_file
81812: LD_VAR 0 3
81816: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81817: LD_VAR 0 1
81821: PUSH
81822: LD_INT 200
81824: DOUBLE
81825: GREATEREQUAL
81826: IFFALSE 81834
81828: LD_INT 299
81830: DOUBLE
81831: LESSEQUAL
81832: IFTRUE 81836
81834: GO 81868
81836: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81837: LD_VAR 0 1
81841: PPUSH
81842: LD_VAR 0 2
81846: PPUSH
81847: LD_VAR 0 3
81851: PPUSH
81852: LD_VAR 0 4
81856: PPUSH
81857: LD_VAR 0 5
81861: PPUSH
81862: CALL 36361 0 5
81866: GO 81945
81868: LD_INT 300
81870: DOUBLE
81871: GREATEREQUAL
81872: IFFALSE 81880
81874: LD_INT 399
81876: DOUBLE
81877: LESSEQUAL
81878: IFTRUE 81882
81880: GO 81944
81882: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81883: LD_VAR 0 1
81887: PPUSH
81888: LD_VAR 0 2
81892: PPUSH
81893: LD_VAR 0 3
81897: PPUSH
81898: LD_VAR 0 4
81902: PPUSH
81903: LD_VAR 0 5
81907: PPUSH
81908: LD_VAR 0 6
81912: PPUSH
81913: LD_VAR 0 7
81917: PPUSH
81918: LD_VAR 0 8
81922: PPUSH
81923: LD_VAR 0 9
81927: PPUSH
81928: LD_VAR 0 10
81932: PPUSH
81933: LD_VAR 0 11
81937: PPUSH
81938: CALL 32686 0 11
81942: GO 81945
81944: POP
// end ;
81945: PPOPN 11
81947: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81948: LD_VAR 0 1
81952: PPUSH
81953: LD_VAR 0 2
81957: PPUSH
81958: LD_VAR 0 3
81962: PPUSH
81963: LD_VAR 0 4
81967: PPUSH
81968: LD_VAR 0 5
81972: PPUSH
81973: CALL 36097 0 5
// end ; end_of_file
81977: PPOPN 5
81979: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81980: LD_VAR 0 1
81984: PPUSH
81985: LD_VAR 0 2
81989: PPUSH
81990: LD_VAR 0 3
81994: PPUSH
81995: LD_VAR 0 4
81999: PPUSH
82000: LD_VAR 0 5
82004: PPUSH
82005: LD_VAR 0 6
82009: PPUSH
82010: CALL 20338 0 6
// end ;
82014: PPOPN 6
82016: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82017: LD_INT 0
82019: PPUSH
// begin if not units then
82020: LD_VAR 0 1
82024: NOT
82025: IFFALSE 82029
// exit ;
82027: GO 82029
// end ;
82029: PPOPN 7
82031: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82032: CALL 20242 0 0
// end ;
82036: PPOPN 1
82038: END
