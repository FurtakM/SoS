// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 217 0 0
// PrepareRussian ;
  23: CALL 7954 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 69734 0 9
// Action ;
  79: CALL 12787 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 9
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 5
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 6
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 7
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 8
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// end ;
 167: LD_VAR 0 1
 171: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 172: LD_INT 22
 174: PUSH
 175: LD_INT 1
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 34
 184: PUSH
 185: LD_INT 6
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PPUSH
 196: CALL_OW 69
 200: PUSH
 201: LD_INT 6
 203: GREATEREQUAL
 204: IFFALSE 216
 206: GO 208
 208: DISABLE
// SetAchievement ( ACH_ARMOR ) ; end_of_file
 209: LD_STRING ACH_ARMOR
 211: PPUSH
 212: CALL_OW 543
 216: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 217: LD_INT 0
 219: PPUSH
 220: PPUSH
 221: PPUSH
 222: PPUSH
 223: PPUSH
 224: PPUSH
 225: PPUSH
 226: PPUSH
 227: PPUSH
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// uc_side := 1 ;
 235: LD_ADDR_OWVAR 20
 239: PUSH
 240: LD_INT 1
 242: ST_TO_ADDR
// uc_nation := 1 ;
 243: LD_ADDR_OWVAR 21
 247: PUSH
 248: LD_INT 1
 250: ST_TO_ADDR
// PrepareGammaBase ;
 251: CALL 2457 0 0
// x := 52 ;
 255: LD_ADDR_VAR 0 13
 259: PUSH
 260: LD_INT 52
 262: ST_TO_ADDR
// y := 16 ;
 263: LD_ADDR_VAR 0 14
 267: PUSH
 268: LD_INT 16
 270: ST_TO_ADDR
// case gammaCommander of 1 :
 271: LD_EXP 9
 275: PUSH
 276: LD_INT 1
 278: DOUBLE
 279: EQUAL
 280: IFTRUE 284
 282: GO 369
 284: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 285: LD_ADDR_EXP 12
 289: PUSH
 290: LD_STRING Donaldson
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: LD_STRING 04_
 298: PPUSH
 299: CALL 36371 0 3
 303: ST_TO_ADDR
// if HexInfo ( x , y ) then
 304: LD_VAR 0 13
 308: PPUSH
 309: LD_VAR 0 14
 313: PPUSH
 314: CALL_OW 428
 318: IFFALSE 336
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 320: LD_EXP 12
 324: PPUSH
 325: LD_EXP 26
 329: PPUSH
 330: CALL_OW 52
 334: GO 358
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 336: LD_EXP 12
 340: PPUSH
 341: LD_VAR 0 13
 345: PPUSH
 346: LD_VAR 0 14
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 48
// ComHold ( Donaldson ) ;
 358: LD_EXP 12
 362: PPUSH
 363: CALL_OW 140
// end ; 2 :
 367: GO 556
 369: LD_INT 2
 371: DOUBLE
 372: EQUAL
 373: IFTRUE 377
 375: GO 462
 377: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 378: LD_ADDR_EXP 11
 382: PUSH
 383: LD_STRING Brown
 385: PPUSH
 386: LD_INT 1
 388: PPUSH
 389: LD_STRING 04_
 391: PPUSH
 392: CALL 36371 0 3
 396: ST_TO_ADDR
// if HexInfo ( x , y ) then
 397: LD_VAR 0 13
 401: PPUSH
 402: LD_VAR 0 14
 406: PPUSH
 407: CALL_OW 428
 411: IFFALSE 429
// PlaceHumanInUnit ( Brown , amDepot ) else
 413: LD_EXP 11
 417: PPUSH
 418: LD_EXP 26
 422: PPUSH
 423: CALL_OW 52
 427: GO 451
// PlaceUnitXY ( Brown , x , y , false ) ;
 429: LD_EXP 11
 433: PPUSH
 434: LD_VAR 0 13
 438: PPUSH
 439: LD_VAR 0 14
 443: PPUSH
 444: LD_INT 0
 446: PPUSH
 447: CALL_OW 48
// ComHold ( Brown ) ;
 451: LD_EXP 11
 455: PPUSH
 456: CALL_OW 140
// end ; 3 :
 460: GO 556
 462: LD_INT 3
 464: DOUBLE
 465: EQUAL
 466: IFTRUE 470
 468: GO 555
 470: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 471: LD_ADDR_EXP 20
 475: PUSH
 476: LD_STRING VanHouten
 478: PPUSH
 479: LD_INT 0
 481: PPUSH
 482: LD_STRING 
 484: PPUSH
 485: CALL 36371 0 3
 489: ST_TO_ADDR
// if HexInfo ( x , y ) then
 490: LD_VAR 0 13
 494: PPUSH
 495: LD_VAR 0 14
 499: PPUSH
 500: CALL_OW 428
 504: IFFALSE 522
// PlaceHumanInUnit ( Houten , amDepot ) else
 506: LD_EXP 20
 510: PPUSH
 511: LD_EXP 26
 515: PPUSH
 516: CALL_OW 52
 520: GO 544
// PlaceUnitXY ( Houten , x , y , false ) ;
 522: LD_EXP 20
 526: PPUSH
 527: LD_VAR 0 13
 531: PPUSH
 532: LD_VAR 0 14
 536: PPUSH
 537: LD_INT 0
 539: PPUSH
 540: CALL_OW 48
// ComHold ( Houten ) ;
 544: LD_EXP 20
 548: PPUSH
 549: CALL_OW 140
// end ; end ;
 553: GO 556
 555: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 556: LD_ADDR_EXP 24
 560: PUSH
 561: LD_STRING Harisson
 563: PPUSH
 564: LD_INT 0
 566: PPUSH
 567: LD_STRING 
 569: PPUSH
 570: CALL 36371 0 3
 574: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 575: LD_ADDR_EXP 25
 579: PUSH
 580: LD_STRING Powell
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: LD_STRING 
 588: PPUSH
 589: CALL 36371 0 3
 593: ST_TO_ADDR
// tmp := [ ] ;
 594: LD_ADDR_VAR 0 4
 598: PUSH
 599: EMPTY
 600: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 601: LD_STRING 04_Lisa
 603: PUSH
 604: EMPTY
 605: LIST
 606: PPUSH
 607: CALL_OW 28
 611: PUSH
 612: LD_STRING LisaInDelta
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 30
 622: NOT
 623: AND
 624: PUSH
 625: LD_STRING 07_Lisa
 627: PUSH
 628: EMPTY
 629: LIST
 630: PPUSH
 631: CALL_OW 28
 635: NOT
 636: AND
 637: IFFALSE 680
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 639: LD_ADDR_EXP 15
 643: PUSH
 644: LD_STRING Lisa
 646: PPUSH
 647: LD_INT 1
 649: PPUSH
 650: LD_STRING 04_
 652: PPUSH
 653: CALL 36371 0 3
 657: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 658: LD_ADDR_VAR 0 5
 662: PUSH
 663: LD_VAR 0 5
 667: PPUSH
 668: LD_EXP 15
 672: PPUSH
 673: CALL 73052 0 2
 677: ST_TO_ADDR
// end else
 678: GO 739
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 680: LD_EXP 15
 684: NOT
 685: PUSH
 686: LD_STRING LisaIn07
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 30
 696: NOT
 697: AND
 698: IFFALSE 739
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 700: LD_ADDR_EXP 15
 704: PUSH
 705: LD_STRING Lisa
 707: PPUSH
 708: LD_INT 1
 710: PPUSH
 711: LD_STRING 07_
 713: PPUSH
 714: CALL 36371 0 3
 718: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 719: LD_ADDR_VAR 0 5
 723: PUSH
 724: LD_VAR 0 5
 728: PPUSH
 729: LD_EXP 15
 733: PPUSH
 734: CALL 73052 0 2
 738: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 739: LD_STRING 04_Bobby
 741: PUSH
 742: EMPTY
 743: LIST
 744: PPUSH
 745: CALL_OW 28
 749: PUSH
 750: LD_STRING BobbyInDelta
 752: PPUSH
 753: LD_INT 0
 755: PPUSH
 756: CALL_OW 30
 760: NOT
 761: AND
 762: PUSH
 763: LD_STRING 07_Bobby
 765: PUSH
 766: EMPTY
 767: LIST
 768: PPUSH
 769: CALL_OW 28
 773: NOT
 774: AND
 775: IFFALSE 818
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 777: LD_ADDR_EXP 13
 781: PUSH
 782: LD_STRING Bobby
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: LD_STRING 04_
 790: PPUSH
 791: CALL 36371 0 3
 795: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 796: LD_ADDR_VAR 0 5
 800: PUSH
 801: LD_VAR 0 5
 805: PPUSH
 806: LD_EXP 13
 810: PPUSH
 811: CALL 73052 0 2
 815: ST_TO_ADDR
// end else
 816: GO 877
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 818: LD_EXP 13
 822: NOT
 823: PUSH
 824: LD_STRING BobbyIn07
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: CALL_OW 30
 834: NOT
 835: AND
 836: IFFALSE 877
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 838: LD_ADDR_EXP 13
 842: PUSH
 843: LD_STRING Bobby
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: LD_STRING 07_
 851: PPUSH
 852: CALL 36371 0 3
 856: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 5
 866: PPUSH
 867: LD_EXP 13
 871: PPUSH
 872: CALL 73052 0 2
 876: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 877: LD_STRING 04_Cyrus
 879: PUSH
 880: EMPTY
 881: LIST
 882: PPUSH
 883: CALL_OW 28
 887: PUSH
 888: LD_STRING CyrusInDelta
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL_OW 30
 898: NOT
 899: AND
 900: PUSH
 901: LD_STRING 07_Cyrus
 903: PUSH
 904: EMPTY
 905: LIST
 906: PPUSH
 907: CALL_OW 28
 911: NOT
 912: AND
 913: IFFALSE 956
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
 915: LD_ADDR_EXP 14
 919: PUSH
 920: LD_STRING Cyrus
 922: PPUSH
 923: LD_INT 1
 925: PPUSH
 926: LD_STRING 04_
 928: PPUSH
 929: CALL 36371 0 3
 933: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 934: LD_ADDR_VAR 0 5
 938: PUSH
 939: LD_VAR 0 5
 943: PPUSH
 944: LD_EXP 14
 948: PPUSH
 949: CALL 73052 0 2
 953: ST_TO_ADDR
// end else
 954: GO 1015
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
 956: LD_EXP 14
 960: NOT
 961: PUSH
 962: LD_STRING CyrusIn07
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 30
 972: NOT
 973: AND
 974: IFFALSE 1015
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 976: LD_ADDR_EXP 14
 980: PUSH
 981: LD_STRING Cyrus
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_STRING 07_
 989: PPUSH
 990: CALL 36371 0 3
 994: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 995: LD_ADDR_VAR 0 5
 999: PUSH
1000: LD_VAR 0 5
1004: PPUSH
1005: LD_EXP 14
1009: PPUSH
1010: CALL 73052 0 2
1014: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1015: LD_STRING 04_Brown
1017: PUSH
1018: EMPTY
1019: LIST
1020: PPUSH
1021: CALL_OW 28
1025: PUSH
1026: LD_STRING BrownInDelta
1028: PPUSH
1029: LD_INT 0
1031: PPUSH
1032: CALL_OW 30
1036: NOT
1037: AND
1038: PUSH
1039: LD_STRING 07_Brown
1041: PUSH
1042: EMPTY
1043: LIST
1044: PPUSH
1045: CALL_OW 28
1049: NOT
1050: AND
1051: PUSH
1052: LD_EXP 9
1056: PUSH
1057: LD_INT 2
1059: NONEQUAL
1060: AND
1061: IFFALSE 1104
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1063: LD_ADDR_EXP 11
1067: PUSH
1068: LD_STRING Brown
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_STRING 04_
1076: PPUSH
1077: CALL 36371 0 3
1081: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1082: LD_ADDR_VAR 0 5
1086: PUSH
1087: LD_VAR 0 5
1091: PPUSH
1092: LD_EXP 11
1096: PPUSH
1097: CALL 73052 0 2
1101: ST_TO_ADDR
// end else
1102: GO 1173
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1104: LD_EXP 11
1108: NOT
1109: PUSH
1110: LD_STRING BrownIn07
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: CALL_OW 30
1120: NOT
1121: AND
1122: PUSH
1123: LD_EXP 9
1127: PUSH
1128: LD_INT 2
1130: NONEQUAL
1131: AND
1132: IFFALSE 1173
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1134: LD_ADDR_EXP 11
1138: PUSH
1139: LD_STRING Brown
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_STRING 07_
1147: PPUSH
1148: CALL 36371 0 3
1152: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1153: LD_ADDR_VAR 0 5
1157: PUSH
1158: LD_VAR 0 5
1162: PPUSH
1163: LD_EXP 11
1167: PPUSH
1168: CALL 73052 0 2
1172: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1173: LD_STRING 04_Donaldson
1175: PUSH
1176: EMPTY
1177: LIST
1178: PPUSH
1179: CALL_OW 28
1183: PUSH
1184: LD_STRING DonaldsonInDelta
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 30
1194: NOT
1195: AND
1196: PUSH
1197: LD_STRING 07_Donaldson
1199: PUSH
1200: EMPTY
1201: LIST
1202: PPUSH
1203: CALL_OW 28
1207: NOT
1208: AND
1209: PUSH
1210: LD_EXP 9
1214: PUSH
1215: LD_INT 1
1217: NONEQUAL
1218: AND
1219: IFFALSE 1262
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1221: LD_ADDR_EXP 12
1225: PUSH
1226: LD_STRING Donaldson
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: LD_STRING 04_
1234: PPUSH
1235: CALL 36371 0 3
1239: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1240: LD_ADDR_VAR 0 5
1244: PUSH
1245: LD_VAR 0 5
1249: PPUSH
1250: LD_EXP 12
1254: PPUSH
1255: CALL 73052 0 2
1259: ST_TO_ADDR
// end else
1260: GO 1331
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1262: LD_EXP 12
1266: NOT
1267: PUSH
1268: LD_STRING DonaldsonIn07
1270: PPUSH
1271: LD_INT 0
1273: PPUSH
1274: CALL_OW 30
1278: NOT
1279: AND
1280: PUSH
1281: LD_EXP 9
1285: PUSH
1286: LD_INT 1
1288: NONEQUAL
1289: AND
1290: IFFALSE 1331
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1292: LD_ADDR_EXP 12
1296: PUSH
1297: LD_STRING Donaldson
1299: PPUSH
1300: LD_INT 1
1302: PPUSH
1303: LD_STRING 07_
1305: PPUSH
1306: CALL 36371 0 3
1310: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1311: LD_ADDR_VAR 0 5
1315: PUSH
1316: LD_VAR 0 5
1320: PPUSH
1321: LD_EXP 12
1325: PPUSH
1326: CALL 73052 0 2
1330: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1331: LD_STRING KhatamIn07
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 30
1341: NOT
1342: IFFALSE 1383
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1344: LD_ADDR_EXP 19
1348: PUSH
1349: LD_STRING Khatam
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: LD_STRING 07_
1357: PPUSH
1358: CALL 36371 0 3
1362: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1363: LD_ADDR_VAR 0 5
1367: PUSH
1368: LD_VAR 0 5
1372: PPUSH
1373: LD_EXP 19
1377: PPUSH
1378: CALL 73052 0 2
1382: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1383: LD_ADDR_VAR 0 6
1387: PUSH
1388: LD_STRING 07_othersGamma
1390: PPUSH
1391: CALL_OW 31
1395: ST_TO_ADDR
// tmp := 5 - others ;
1396: LD_ADDR_VAR 0 4
1400: PUSH
1401: LD_INT 5
1403: PUSH
1404: LD_VAR 0 6
1408: MINUS
1409: ST_TO_ADDR
// if tmp then
1410: LD_VAR 0 4
1414: IFFALSE 1471
// for i := tmp downto 1 do
1416: LD_ADDR_VAR 0 2
1420: PUSH
1421: DOUBLE
1422: LD_VAR 0 4
1426: INC
1427: ST_TO_ADDR
1428: LD_INT 1
1430: PUSH
1431: FOR_DOWNTO
1432: IFFALSE 1469
// begin PrepareHuman ( false , 1 , 5 ) ;
1434: LD_INT 0
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: LD_INT 5
1442: PPUSH
1443: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1447: LD_ADDR_VAR 0 6
1451: PUSH
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL_OW 44
1461: PPUSH
1462: CALL 73052 0 2
1466: ST_TO_ADDR
// end ;
1467: GO 1431
1469: POP
1470: POP
// for i in others do
1471: LD_ADDR_VAR 0 2
1475: PUSH
1476: LD_VAR 0 6
1480: PUSH
1481: FOR_IN
1482: IFFALSE 1498
// SetTag ( i , 106 ) ;
1484: LD_VAR 0 2
1488: PPUSH
1489: LD_INT 106
1491: PPUSH
1492: CALL_OW 109
1496: GO 1481
1498: POP
1499: POP
// if HexInfo ( 61 , 29 ) = 0 then
1500: LD_INT 61
1502: PPUSH
1503: LD_INT 29
1505: PPUSH
1506: CALL_OW 428
1510: PUSH
1511: LD_INT 0
1513: EQUAL
1514: IFFALSE 1545
// begin bc_type := b_barracks ;
1516: LD_ADDR_OWVAR 42
1520: PUSH
1521: LD_INT 5
1523: ST_TO_ADDR
// bc_level := 6 ;
1524: LD_ADDR_OWVAR 43
1528: PUSH
1529: LD_INT 6
1531: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1532: LD_INT 61
1534: PPUSH
1535: LD_INT 29
1537: PPUSH
1538: LD_INT 5
1540: PPUSH
1541: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1545: LD_ADDR_VAR 0 8
1549: PUSH
1550: LD_INT 22
1552: PUSH
1553: LD_INT 1
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PUSH
1560: LD_INT 30
1562: PUSH
1563: LD_INT 31
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 69
1578: ST_TO_ADDR
// for i in bun do
1579: LD_ADDR_VAR 0 2
1583: PUSH
1584: LD_VAR 0 8
1588: PUSH
1589: FOR_IN
1590: IFFALSE 1722
// begin x := GetX ( i ) ;
1592: LD_ADDR_VAR 0 13
1596: PUSH
1597: LD_VAR 0 2
1601: PPUSH
1602: CALL_OW 250
1606: ST_TO_ADDR
// y := GetY ( i ) ;
1607: LD_ADDR_VAR 0 14
1611: PUSH
1612: LD_VAR 0 2
1616: PPUSH
1617: CALL_OW 251
1621: ST_TO_ADDR
// d := GetDir ( i ) ;
1622: LD_ADDR_VAR 0 15
1626: PUSH
1627: LD_VAR 0 2
1631: PPUSH
1632: CALL_OW 254
1636: ST_TO_ADDR
// RemoveUnit ( i ) ;
1637: LD_VAR 0 2
1641: PPUSH
1642: CALL_OW 64
// bc_type := b_bunker ;
1646: LD_ADDR_OWVAR 42
1650: PUSH
1651: LD_INT 32
1653: ST_TO_ADDR
// bc_level := 6 ;
1654: LD_ADDR_OWVAR 43
1658: PUSH
1659: LD_INT 6
1661: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1662: LD_ADDR_VAR 0 16
1666: PUSH
1667: LD_VAR 0 13
1671: PPUSH
1672: LD_VAR 0 14
1676: PPUSH
1677: LD_VAR 0 15
1681: PPUSH
1682: CALL_OW 47
1686: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1687: LD_VAR 0 16
1691: PPUSH
1692: LD_INT 5
1694: PUSH
1695: LD_INT 4
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: LD_VAR 0 2
1706: PUSH
1707: LD_INT 2
1709: MOD
1710: PUSH
1711: LD_INT 1
1713: PLUS
1714: ARRAY
1715: PPUSH
1716: CALL_OW 431
// end ;
1720: GO 1589
1722: POP
1723: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1724: LD_ADDR_VAR 0 7
1728: PUSH
1729: LD_INT 22
1731: PUSH
1732: LD_INT 1
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 30
1741: PUSH
1742: LD_INT 5
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PPUSH
1753: CALL_OW 69
1757: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1758: LD_ADDR_VAR 0 9
1762: PUSH
1763: LD_INT 22
1765: PUSH
1766: LD_INT 1
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 2
1775: PUSH
1776: LD_INT 30
1778: PUSH
1779: LD_INT 6
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 30
1788: PUSH
1789: LD_INT 7
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 30
1798: PUSH
1799: LD_INT 8
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: EMPTY
1813: LIST
1814: LIST
1815: PPUSH
1816: CALL_OW 69
1820: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1821: LD_ADDR_VAR 0 10
1825: PUSH
1826: LD_INT 22
1828: PUSH
1829: LD_INT 1
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 30
1838: PUSH
1839: LD_INT 3
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PPUSH
1850: CALL_OW 69
1854: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1855: LD_ADDR_VAR 0 11
1859: PUSH
1860: LD_INT 22
1862: PUSH
1863: LD_INT 1
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PUSH
1870: LD_INT 30
1872: PUSH
1873: LD_INT 36
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 69
1888: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1889: LD_ADDR_VAR 0 8
1893: PUSH
1894: LD_INT 22
1896: PUSH
1897: LD_INT 1
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 2
1906: PUSH
1907: LD_INT 30
1909: PUSH
1910: LD_INT 31
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 30
1919: PUSH
1920: LD_INT 32
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PPUSH
1936: CALL_OW 69
1940: ST_TO_ADDR
// for i in others union tmp2 do
1941: LD_ADDR_VAR 0 2
1945: PUSH
1946: LD_VAR 0 6
1950: PUSH
1951: LD_VAR 0 5
1955: UNION
1956: PUSH
1957: FOR_IN
1958: IFFALSE 2450
// begin placed := false ;
1960: LD_ADDR_VAR 0 12
1964: PUSH
1965: LD_INT 0
1967: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1968: LD_VAR 0 2
1972: PPUSH
1973: CALL_OW 257
1977: PUSH
1978: LD_INT 1
1980: EQUAL
1981: IFFALSE 2106
// begin if UnitFilter ( bun , [ f_empty ] ) then
1983: LD_VAR 0 8
1987: PPUSH
1988: LD_INT 58
1990: PUSH
1991: EMPTY
1992: LIST
1993: PPUSH
1994: CALL_OW 72
1998: IFFALSE 2037
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2000: LD_VAR 0 2
2004: PPUSH
2005: LD_VAR 0 8
2009: PPUSH
2010: LD_INT 58
2012: PUSH
2013: EMPTY
2014: LIST
2015: PPUSH
2016: CALL_OW 72
2020: PUSH
2021: LD_INT 1
2023: ARRAY
2024: PPUSH
2025: CALL_OW 52
// placed := true ;
2029: LD_ADDR_VAR 0 12
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// end ; if arm and not placed then
2037: LD_VAR 0 7
2041: PUSH
2042: LD_VAR 0 12
2046: NOT
2047: AND
2048: IFFALSE 2106
// begin for j in arm do
2050: LD_ADDR_VAR 0 3
2054: PUSH
2055: LD_VAR 0 7
2059: PUSH
2060: FOR_IN
2061: IFFALSE 2104
// if UnitsInside ( j ) < 6 then
2063: LD_VAR 0 3
2067: PPUSH
2068: CALL_OW 313
2072: PUSH
2073: LD_INT 6
2075: LESS
2076: IFFALSE 2102
// begin PlaceHumanInUnit ( i , j ) ;
2078: LD_VAR 0 2
2082: PPUSH
2083: LD_VAR 0 3
2087: PPUSH
2088: CALL_OW 52
// placed := true ;
2092: LD_ADDR_VAR 0 12
2096: PUSH
2097: LD_INT 1
2099: ST_TO_ADDR
// break ;
2100: GO 2104
// end ;
2102: GO 2060
2104: POP
2105: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2106: LD_VAR 0 2
2110: PPUSH
2111: CALL_OW 257
2115: PUSH
2116: LD_INT 2
2118: EQUAL
2119: IFFALSE 2152
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2121: LD_VAR 0 2
2125: PPUSH
2126: LD_INT 52
2128: PPUSH
2129: LD_INT 20
2131: PPUSH
2132: LD_INT 6
2134: PPUSH
2135: LD_INT 0
2137: PPUSH
2138: CALL_OW 50
// placed := true ;
2142: LD_ADDR_VAR 0 12
2146: PUSH
2147: LD_INT 1
2149: ST_TO_ADDR
// continue ;
2150: GO 1957
// end ; if GetClass ( i ) = class_mechanic then
2152: LD_VAR 0 2
2156: PPUSH
2157: CALL_OW 257
2161: PUSH
2162: LD_INT 3
2164: EQUAL
2165: IFFALSE 2269
// begin if fac then
2167: LD_VAR 0 10
2171: IFFALSE 2269
// begin if ct then
2173: LD_VAR 0 11
2177: IFFALSE 2205
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2179: LD_VAR 0 2
2183: PPUSH
2184: LD_VAR 0 11
2188: PUSH
2189: LD_INT 1
2191: ARRAY
2192: PPUSH
2193: CALL_OW 52
// placed := true ;
2197: LD_ADDR_VAR 0 12
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// end ; if placed then
2205: LD_VAR 0 12
2209: IFFALSE 2213
// continue ;
2211: GO 1957
// for j in fac do
2213: LD_ADDR_VAR 0 3
2217: PUSH
2218: LD_VAR 0 10
2222: PUSH
2223: FOR_IN
2224: IFFALSE 2267
// if UnitsInside ( j ) < 6 then
2226: LD_VAR 0 3
2230: PPUSH
2231: CALL_OW 313
2235: PUSH
2236: LD_INT 6
2238: LESS
2239: IFFALSE 2265
// begin PlaceHumanInUnit ( i , j ) ;
2241: LD_VAR 0 2
2245: PPUSH
2246: LD_VAR 0 3
2250: PPUSH
2251: CALL_OW 52
// placed := true ;
2255: LD_ADDR_VAR 0 12
2259: PUSH
2260: LD_INT 1
2262: ST_TO_ADDR
// break ;
2263: GO 2267
// end ;
2265: GO 2223
2267: POP
2268: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2269: LD_VAR 0 2
2273: PPUSH
2274: CALL_OW 257
2278: PUSH
2279: LD_INT 4
2281: EQUAL
2282: IFFALSE 2377
// begin if lab then
2284: LD_VAR 0 9
2288: IFFALSE 2346
// begin for j in lab do
2290: LD_ADDR_VAR 0 3
2294: PUSH
2295: LD_VAR 0 9
2299: PUSH
2300: FOR_IN
2301: IFFALSE 2344
// if UnitsInside ( j ) < 6 then
2303: LD_VAR 0 3
2307: PPUSH
2308: CALL_OW 313
2312: PUSH
2313: LD_INT 6
2315: LESS
2316: IFFALSE 2342
// begin PlaceHumanInUnit ( i , j ) ;
2318: LD_VAR 0 2
2322: PPUSH
2323: LD_VAR 0 3
2327: PPUSH
2328: CALL_OW 52
// placed := true ;
2332: LD_ADDR_VAR 0 12
2336: PUSH
2337: LD_INT 1
2339: ST_TO_ADDR
// break ;
2340: GO 2344
// end ;
2342: GO 2300
2344: POP
2345: POP
// end ; if not placed then
2346: LD_VAR 0 12
2350: NOT
2351: IFFALSE 2377
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2353: LD_VAR 0 2
2357: PPUSH
2358: LD_INT 3
2360: PPUSH
2361: LD_INT 0
2363: PPUSH
2364: CALL_OW 49
// ComHold ( i ) ;
2368: LD_VAR 0 2
2372: PPUSH
2373: CALL_OW 140
// end ; end ; if ct then
2377: LD_VAR 0 11
2381: IFFALSE 2448
// if UnitsInside ( ct [ 1 ] ) then
2383: LD_VAR 0 11
2387: PUSH
2388: LD_INT 1
2390: ARRAY
2391: PPUSH
2392: CALL_OW 313
2396: IFFALSE 2448
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2398: LD_ADDR_VAR 0 2
2402: PUSH
2403: LD_INT 22
2405: PUSH
2406: LD_INT 1
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: PUSH
2413: LD_INT 33
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PPUSH
2427: CALL_OW 69
2431: PUSH
2432: FOR_IN
2433: IFFALSE 2446
// Connect ( i ) ;
2435: LD_VAR 0 2
2439: PPUSH
2440: CALL 44328 0 1
2444: GO 2432
2446: POP
2447: POP
// end ; end ;
2448: GO 1957
2450: POP
2451: POP
// end ;
2452: LD_VAR 0 1
2456: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2457: LD_INT 0
2459: PPUSH
2460: PPUSH
2461: PPUSH
2462: PPUSH
2463: PPUSH
2464: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2465: LD_INT 71
2467: PPUSH
2468: LD_INT 5
2470: PPUSH
2471: LD_INT 1
2473: PPUSH
2474: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2478: LD_ADDR_VAR 0 2
2482: PUSH
2483: LD_STRING GammaBase
2485: PPUSH
2486: EMPTY
2487: PPUSH
2488: CALL_OW 30
2492: ST_TO_ADDR
// if not blist then
2493: LD_VAR 0 2
2497: NOT
2498: IFFALSE 2538
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: LD_INT 1
2507: PUSH
2508: LD_INT 52
2510: PUSH
2511: LD_INT 12
2513: PUSH
2514: LD_INT 3
2516: PUSH
2517: LD_INT 3
2519: PUSH
2520: LD_INT 0
2522: PUSH
2523: LD_INT 0
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: ST_TO_ADDR
// uc_side := 1 ;
2538: LD_ADDR_OWVAR 20
2542: PUSH
2543: LD_INT 1
2545: ST_TO_ADDR
// uc_nation := 1 ;
2546: LD_ADDR_OWVAR 21
2550: PUSH
2551: LD_INT 1
2553: ST_TO_ADDR
// bc_kind1 := - 1 ;
2554: LD_ADDR_OWVAR 44
2558: PUSH
2559: LD_INT 1
2561: NEG
2562: ST_TO_ADDR
// bc_kind2 := - 1 ;
2563: LD_ADDR_OWVAR 45
2567: PUSH
2568: LD_INT 1
2570: NEG
2571: ST_TO_ADDR
// for i in blist do
2572: LD_ADDR_VAR 0 3
2576: PUSH
2577: LD_VAR 0 2
2581: PUSH
2582: FOR_IN
2583: IFFALSE 2859
// begin bc_type := i [ 1 ] ;
2585: LD_ADDR_OWVAR 42
2589: PUSH
2590: LD_VAR 0 3
2594: PUSH
2595: LD_INT 1
2597: ARRAY
2598: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2599: LD_ADDR_OWVAR 43
2603: PUSH
2604: LD_VAR 0 3
2608: PUSH
2609: LD_INT 5
2611: ARRAY
2612: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2613: LD_OWVAR 42
2617: PUSH
2618: LD_INT 6
2620: PUSH
2621: LD_INT 7
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: IN
2628: IFFALSE 2694
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2630: LD_STRING 06_remoteVehs_1
2632: PPUSH
2633: LD_INT 0
2635: PPUSH
2636: CALL_OW 30
2640: NOT
2641: IFFALSE 2669
// begin bc_type := b_lab_full ;
2643: LD_ADDR_OWVAR 42
2647: PUSH
2648: LD_INT 8
2650: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2651: LD_ADDR_OWVAR 44
2655: PUSH
2656: LD_INT 10
2658: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2659: LD_ADDR_OWVAR 45
2663: PUSH
2664: LD_INT 15
2666: ST_TO_ADDR
// end else
2667: GO 2694
// begin bc_type := b_lab_half ;
2669: LD_ADDR_OWVAR 42
2673: PUSH
2674: LD_INT 7
2676: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2677: LD_ADDR_OWVAR 44
2681: PUSH
2682: LD_INT 10
2684: ST_TO_ADDR
// bc_kind2 := - 1 ;
2685: LD_ADDR_OWVAR 45
2689: PUSH
2690: LD_INT 1
2692: NEG
2693: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2694: LD_OWVAR 42
2698: PUSH
2699: LD_INT 2
2701: EQUAL
2702: IFFALSE 2712
// bc_type := b_factory ;
2704: LD_ADDR_OWVAR 42
2708: PUSH
2709: LD_INT 3
2711: ST_TO_ADDR
// if bc_type = b_depot then
2712: LD_OWVAR 42
2716: PUSH
2717: LD_INT 0
2719: EQUAL
2720: IFFALSE 2769
// begin bc_type := b_warehouse ;
2722: LD_ADDR_OWVAR 42
2726: PUSH
2727: LD_INT 1
2729: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2730: LD_ADDR_EXP 26
2734: PUSH
2735: LD_VAR 0 3
2739: PUSH
2740: LD_INT 2
2742: ARRAY
2743: PPUSH
2744: LD_VAR 0 3
2748: PUSH
2749: LD_INT 3
2751: ARRAY
2752: PPUSH
2753: LD_VAR 0 3
2757: PUSH
2758: LD_INT 4
2760: ARRAY
2761: PPUSH
2762: CALL_OW 47
2766: ST_TO_ADDR
// continue ;
2767: GO 2582
// end ; if bc_type = b_armoury then
2769: LD_OWVAR 42
2773: PUSH
2774: LD_INT 4
2776: EQUAL
2777: IFFALSE 2787
// bc_type = b_barracks ;
2779: LD_ADDR_OWVAR 42
2783: PUSH
2784: LD_INT 5
2786: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2787: LD_ADDR_VAR 0 4
2791: PUSH
2792: LD_VAR 0 3
2796: PUSH
2797: LD_INT 2
2799: ARRAY
2800: PPUSH
2801: LD_VAR 0 3
2805: PUSH
2806: LD_INT 3
2808: ARRAY
2809: PPUSH
2810: LD_VAR 0 3
2814: PUSH
2815: LD_INT 4
2817: ARRAY
2818: PPUSH
2819: CALL_OW 47
2823: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2824: LD_VAR 0 4
2828: PPUSH
2829: CALL_OW 266
2833: PUSH
2834: LD_INT 32
2836: EQUAL
2837: IFFALSE 2857
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2839: LD_VAR 0 4
2843: PPUSH
2844: LD_VAR 0 3
2848: PUSH
2849: LD_INT 7
2851: ARRAY
2852: PPUSH
2853: CALL_OW 431
// end ;
2857: GO 2582
2859: POP
2860: POP
// if not amDepot then
2861: LD_EXP 26
2865: NOT
2866: IFFALSE 2903
// begin bc_type := b_warehouse ;
2868: LD_ADDR_OWVAR 42
2872: PUSH
2873: LD_INT 1
2875: ST_TO_ADDR
// bc_level := 6 ;
2876: LD_ADDR_OWVAR 43
2880: PUSH
2881: LD_INT 6
2883: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2884: LD_ADDR_EXP 26
2888: PUSH
2889: LD_INT 52
2891: PPUSH
2892: LD_INT 12
2894: PPUSH
2895: LD_INT 3
2897: PPUSH
2898: CALL_OW 47
2902: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
2903: LD_EXP 26
2907: PPUSH
2908: LD_STRING gamma
2910: PPUSH
2911: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2915: LD_EXP 26
2919: PPUSH
2920: CALL_OW 274
2924: PPUSH
2925: LD_INT 1
2927: PPUSH
2928: LD_INT 400
2930: PUSH
2931: LD_INT 320
2933: PUSH
2934: LD_INT 270
2936: PUSH
2937: LD_INT 230
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: PUSH
2946: LD_OWVAR 67
2950: ARRAY
2951: PPUSH
2952: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2956: LD_EXP 26
2960: PPUSH
2961: CALL_OW 274
2965: PPUSH
2966: LD_INT 2
2968: PPUSH
2969: LD_INT 130
2971: PPUSH
2972: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2976: LD_INT 22
2978: PUSH
2979: LD_INT 1
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: LD_INT 30
2988: PUSH
2989: LD_INT 3
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PPUSH
3000: CALL_OW 69
3004: IFFALSE 3252
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3006: LD_ADDR_VAR 0 4
3010: PUSH
3011: LD_INT 22
3013: PUSH
3014: LD_INT 1
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 30
3023: PUSH
3024: LD_INT 3
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PPUSH
3035: CALL_OW 69
3039: PUSH
3040: LD_INT 1
3042: ARRAY
3043: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3044: LD_ADDR_VAR 0 6
3048: PUSH
3049: LD_VAR 0 4
3053: PPUSH
3054: CALL_OW 250
3058: PPUSH
3059: LD_VAR 0 4
3063: PPUSH
3064: CALL_OW 251
3068: PPUSH
3069: LD_VAR 0 4
3073: PPUSH
3074: CALL_OW 254
3078: PPUSH
3079: CALL 70691 0 3
3083: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: LD_INT 19
3091: PUSH
3092: LD_INT 17
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3099: LD_STRING 06_remoteVehs_1
3101: PPUSH
3102: LD_INT 0
3104: PPUSH
3105: CALL_OW 30
3109: IFFALSE 3132
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3111: LD_ADDR_VAR 0 2
3115: PUSH
3116: LD_VAR 0 2
3120: PPUSH
3121: LD_INT 1
3123: PPUSH
3124: LD_INT 22
3126: PPUSH
3127: CALL_OW 2
3131: ST_TO_ADDR
// for i in tmp do
3132: LD_ADDR_VAR 0 3
3136: PUSH
3137: LD_VAR 0 6
3141: PUSH
3142: FOR_IN
3143: IFFALSE 3250
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3145: LD_VAR 0 3
3149: PUSH
3150: LD_INT 1
3152: ARRAY
3153: PPUSH
3154: LD_VAR 0 3
3158: PUSH
3159: LD_INT 2
3161: ARRAY
3162: PPUSH
3163: CALL_OW 428
3167: PUSH
3168: LD_INT 0
3170: EQUAL
3171: IFFALSE 3248
// begin bc_type := blist [ 1 ] ;
3173: LD_ADDR_OWVAR 42
3177: PUSH
3178: LD_VAR 0 2
3182: PUSH
3183: LD_INT 1
3185: ARRAY
3186: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3187: LD_VAR 0 3
3191: PUSH
3192: LD_INT 1
3194: ARRAY
3195: PPUSH
3196: LD_VAR 0 3
3200: PUSH
3201: LD_INT 2
3203: ARRAY
3204: PPUSH
3205: LD_VAR 0 3
3209: PUSH
3210: LD_INT 3
3212: ARRAY
3213: PPUSH
3214: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3218: LD_ADDR_VAR 0 2
3222: PUSH
3223: LD_VAR 0 2
3227: PPUSH
3228: LD_INT 1
3230: PPUSH
3231: CALL_OW 3
3235: ST_TO_ADDR
// if blist = 0 then
3236: LD_VAR 0 2
3240: PUSH
3241: LD_INT 0
3243: EQUAL
3244: IFFALSE 3248
// break ;
3246: GO 3250
// end ;
3248: GO 3142
3250: POP
3251: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3252: LD_STRING 06_remoteVehs_1
3254: PPUSH
3255: LD_INT 0
3257: PPUSH
3258: CALL_OW 30
3262: IFFALSE 3715
// begin bc_type := b_control_tower ;
3264: LD_ADDR_OWVAR 42
3268: PUSH
3269: LD_INT 36
3271: ST_TO_ADDR
// bc_level := 4 ;
3272: LD_ADDR_OWVAR 43
3276: PUSH
3277: LD_INT 4
3279: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3280: LD_EXP 26
3284: PPUSH
3285: LD_INT 36
3287: PPUSH
3288: LD_INT 62
3290: PPUSH
3291: LD_INT 12
3293: PPUSH
3294: LD_INT 3
3296: PPUSH
3297: CALL 49460 0 5
3301: PUSH
3302: LD_INT 92
3304: PUSH
3305: LD_INT 62
3307: PUSH
3308: LD_INT 12
3310: PUSH
3311: LD_INT 3
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: PPUSH
3320: CALL_OW 69
3324: NOT
3325: AND
3326: IFFALSE 3343
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3328: LD_INT 62
3330: PPUSH
3331: LD_INT 12
3333: PPUSH
3334: LD_INT 3
3336: PPUSH
3337: CALL_OW 47
3341: GO 3505
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3343: LD_EXP 26
3347: PPUSH
3348: LD_INT 36
3350: PPUSH
3351: LD_INT 37
3353: PPUSH
3354: LD_INT 18
3356: PPUSH
3357: LD_INT 2
3359: PPUSH
3360: CALL 49460 0 5
3364: PUSH
3365: LD_INT 92
3367: PUSH
3368: LD_INT 37
3370: PUSH
3371: LD_INT 18
3373: PUSH
3374: LD_INT 3
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 69
3387: NOT
3388: AND
3389: IFFALSE 3406
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3391: LD_INT 37
3393: PPUSH
3394: LD_INT 18
3396: PPUSH
3397: LD_INT 2
3399: PPUSH
3400: CALL_OW 47
3404: GO 3505
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3406: LD_EXP 26
3410: PPUSH
3411: LD_INT 36
3413: PPUSH
3414: LD_INT 66
3416: PPUSH
3417: LD_INT 14
3419: PPUSH
3420: LD_INT 4
3422: PPUSH
3423: CALL 49460 0 5
3427: PUSH
3428: LD_INT 92
3430: PUSH
3431: LD_INT 66
3433: PUSH
3434: LD_INT 14
3436: PUSH
3437: LD_INT 3
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: PPUSH
3446: CALL_OW 69
3450: NOT
3451: AND
3452: IFFALSE 3469
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3454: LD_INT 66
3456: PPUSH
3457: LD_INT 14
3459: PPUSH
3460: LD_INT 4
3462: PPUSH
3463: CALL_OW 47
3467: GO 3505
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3469: LD_EXP 26
3473: PPUSH
3474: LD_INT 36
3476: PPUSH
3477: LD_INT 74
3479: PPUSH
3480: LD_INT 26
3482: PPUSH
3483: LD_INT 4
3485: PPUSH
3486: CALL 49460 0 5
3490: IFFALSE 3505
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3492: LD_INT 74
3494: PPUSH
3495: LD_INT 26
3497: PPUSH
3498: LD_INT 4
3500: PPUSH
3501: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3505: LD_INT 22
3507: PUSH
3508: LD_INT 1
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 30
3517: PUSH
3518: LD_INT 36
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PPUSH
3529: CALL_OW 69
3533: NOT
3534: IFFALSE 3538
// exit ;
3536: GO 3888
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3538: LD_ADDR_VAR 0 3
3542: PUSH
3543: DOUBLE
3544: LD_INT 1
3546: DEC
3547: ST_TO_ADDR
3548: LD_INT 3
3550: PUSH
3551: LD_INT 2
3553: PUSH
3554: LD_INT 2
3556: PUSH
3557: LD_INT 2
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: PUSH
3566: LD_OWVAR 67
3570: ARRAY
3571: PUSH
3572: FOR_TO
3573: IFFALSE 3713
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3575: LD_ADDR_OWVAR 37
3579: PUSH
3580: LD_INT 3
3582: PUSH
3583: LD_INT 2
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 1
3592: PPUSH
3593: LD_INT 2
3595: PPUSH
3596: CALL_OW 12
3600: ARRAY
3601: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3602: LD_ADDR_OWVAR 39
3606: PUSH
3607: LD_INT 1
3609: PUSH
3610: LD_INT 2
3612: PUSH
3613: EMPTY
3614: LIST
3615: LIST
3616: PUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 2
3622: PPUSH
3623: CALL_OW 12
3627: ARRAY
3628: ST_TO_ADDR
// vc_control := control_remote ;
3629: LD_ADDR_OWVAR 38
3633: PUSH
3634: LD_INT 2
3636: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3637: LD_ADDR_OWVAR 40
3641: PUSH
3642: LD_INT 4
3644: PUSH
3645: LD_INT 3
3647: PUSH
3648: LD_INT 5
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: LIST
3655: PUSH
3656: LD_INT 1
3658: PPUSH
3659: LD_INT 3
3661: PPUSH
3662: CALL_OW 12
3666: ARRAY
3667: ST_TO_ADDR
// veh := CreateVehicle ;
3668: LD_ADDR_VAR 0 5
3672: PUSH
3673: CALL_OW 45
3677: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3678: LD_VAR 0 5
3682: PPUSH
3683: LD_INT 3
3685: PPUSH
3686: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3690: LD_VAR 0 5
3694: PPUSH
3695: LD_INT 61
3697: PPUSH
3698: LD_INT 23
3700: PPUSH
3701: LD_INT 9
3703: PPUSH
3704: LD_INT 0
3706: PPUSH
3707: CALL_OW 50
// end ;
3711: GO 3572
3713: POP
3714: POP
// end ; for i := 1 to [ 2 , 2 , 1 , 1 ] [ Difficulty ] do
3715: LD_ADDR_VAR 0 3
3719: PUSH
3720: DOUBLE
3721: LD_INT 1
3723: DEC
3724: ST_TO_ADDR
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: LD_INT 1
3733: PUSH
3734: LD_INT 1
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: PUSH
3743: LD_OWVAR 67
3747: ARRAY
3748: PUSH
3749: FOR_TO
3750: IFFALSE 3886
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3752: LD_ADDR_OWVAR 37
3756: PUSH
3757: LD_INT 3
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 1
3769: PPUSH
3770: LD_INT 2
3772: PPUSH
3773: CALL_OW 12
3777: ARRAY
3778: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3779: LD_ADDR_OWVAR 39
3783: PUSH
3784: LD_INT 1
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 1
3796: PPUSH
3797: LD_INT 2
3799: PPUSH
3800: CALL_OW 12
3804: ARRAY
3805: ST_TO_ADDR
// vc_control := control_manual ;
3806: LD_ADDR_OWVAR 38
3810: PUSH
3811: LD_INT 1
3813: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3814: LD_ADDR_OWVAR 40
3818: PUSH
3819: LD_INT 4
3821: PUSH
3822: LD_INT 5
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: PUSH
3829: LD_INT 1
3831: PPUSH
3832: LD_INT 2
3834: PPUSH
3835: CALL_OW 12
3839: ARRAY
3840: ST_TO_ADDR
// veh := CreateVehicle ;
3841: LD_ADDR_VAR 0 5
3845: PUSH
3846: CALL_OW 45
3850: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3851: LD_VAR 0 5
3855: PPUSH
3856: LD_INT 3
3858: PPUSH
3859: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3863: LD_VAR 0 5
3867: PPUSH
3868: LD_INT 61
3870: PPUSH
3871: LD_INT 23
3873: PPUSH
3874: LD_INT 9
3876: PPUSH
3877: LD_INT 0
3879: PPUSH
3880: CALL_OW 50
// end ;
3884: GO 3749
3886: POP
3887: POP
// end ;
3888: LD_VAR 0 1
3892: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
3893: LD_INT 0
3895: PPUSH
3896: PPUSH
3897: PPUSH
3898: PPUSH
// uc_side := 1 ;
3899: LD_ADDR_OWVAR 20
3903: PUSH
3904: LD_INT 1
3906: ST_TO_ADDR
// uc_nation := 1 ;
3907: LD_ADDR_OWVAR 21
3911: PUSH
3912: LD_INT 1
3914: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
3915: LD_ADDR_EXP 21
3919: PUSH
3920: LD_STRING Denis
3922: PPUSH
3923: LD_EXP 1
3927: NOT
3928: PPUSH
3929: LD_STRING 06c_
3931: PPUSH
3932: CALL 36371 0 3
3936: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
3937: LD_EXP 21
3941: PPUSH
3942: LD_INT 4
3944: PPUSH
3945: LD_INT 0
3947: PPUSH
3948: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
3952: LD_ADDR_EXP 22
3956: PUSH
3957: LD_STRING Joan
3959: PPUSH
3960: LD_EXP 1
3964: NOT
3965: PPUSH
3966: LD_STRING 06c_
3968: PPUSH
3969: CALL 36371 0 3
3973: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
3974: LD_EXP 22
3978: PPUSH
3979: LD_INT 4
3981: PPUSH
3982: LD_INT 0
3984: PPUSH
3985: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3989: LD_STRING GladstoneIn07
3991: PPUSH
3992: LD_INT 0
3994: PPUSH
3995: CALL_OW 30
3999: NOT
4000: IFFALSE 4080
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4002: LD_ADDR_EXP 17
4006: PUSH
4007: LD_STRING Gladstone
4009: PPUSH
4010: LD_EXP 1
4014: NOT
4015: PPUSH
4016: LD_STRING 06c_
4018: PPUSH
4019: CALL 36371 0 3
4023: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4024: LD_EXP 17
4028: NOT
4029: PUSH
4030: LD_STRING GladstoneStayInDelta
4032: PPUSH
4033: LD_INT 0
4035: PPUSH
4036: CALL_OW 30
4040: AND
4041: IFFALSE 4065
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4043: LD_ADDR_EXP 17
4047: PUSH
4048: LD_STRING Gladstone
4050: PPUSH
4051: LD_EXP 1
4055: NOT
4056: PPUSH
4057: LD_STRING 05_
4059: PPUSH
4060: CALL 36371 0 3
4064: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4065: LD_EXP 17
4069: PPUSH
4070: LD_INT 4
4072: PPUSH
4073: LD_INT 0
4075: PPUSH
4076: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4080: LD_STRING LisaStayInDelta
4082: PPUSH
4083: LD_INT 0
4085: PPUSH
4086: CALL_OW 30
4090: IFFALSE 4126
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4092: LD_ADDR_EXP 15
4096: PUSH
4097: LD_STRING Lisa
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_STRING 05_
4105: PPUSH
4106: CALL 36371 0 3
4110: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4111: LD_EXP 15
4115: PPUSH
4116: LD_INT 4
4118: PPUSH
4119: LD_INT 0
4121: PPUSH
4122: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4126: LD_STRING BobbyStayInDelta
4128: PPUSH
4129: LD_INT 0
4131: PPUSH
4132: CALL_OW 30
4136: IFFALSE 4172
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4138: LD_ADDR_EXP 13
4142: PUSH
4143: LD_STRING Bobby
4145: PPUSH
4146: LD_INT 1
4148: PPUSH
4149: LD_STRING 05_
4151: PPUSH
4152: CALL 36371 0 3
4156: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4157: LD_EXP 13
4161: PPUSH
4162: LD_INT 4
4164: PPUSH
4165: LD_INT 0
4167: PPUSH
4168: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4172: LD_STRING CyrusStayInDelta
4174: PPUSH
4175: LD_INT 0
4177: PPUSH
4178: CALL_OW 30
4182: IFFALSE 4218
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4184: LD_ADDR_EXP 14
4188: PUSH
4189: LD_STRING Cyrus
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: LD_STRING 05_
4197: PPUSH
4198: CALL 36371 0 3
4202: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4203: LD_EXP 14
4207: PPUSH
4208: LD_INT 4
4210: PPUSH
4211: LD_INT 0
4213: PPUSH
4214: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4218: LD_STRING BrownStayInDelta
4220: PPUSH
4221: LD_INT 0
4223: PPUSH
4224: CALL_OW 30
4228: IFFALSE 4264
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4230: LD_ADDR_EXP 11
4234: PUSH
4235: LD_STRING Brown
4237: PPUSH
4238: LD_INT 1
4240: PPUSH
4241: LD_STRING 05_
4243: PPUSH
4244: CALL 36371 0 3
4248: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4249: LD_EXP 11
4253: PPUSH
4254: LD_INT 4
4256: PPUSH
4257: LD_INT 0
4259: PPUSH
4260: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4264: LD_STRING DonaldsonStayInDelta
4266: PPUSH
4267: LD_INT 0
4269: PPUSH
4270: CALL_OW 30
4274: IFFALSE 4310
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4276: LD_ADDR_EXP 12
4280: PUSH
4281: LD_STRING Donaldson
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: LD_STRING 05_
4289: PPUSH
4290: CALL 36371 0 3
4294: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4295: LD_EXP 12
4299: PPUSH
4300: LD_INT 4
4302: PPUSH
4303: LD_INT 0
4305: PPUSH
4306: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4310: LD_ADDR_VAR 0 4
4314: PUSH
4315: LD_STRING OthersStayInDelta
4317: PPUSH
4318: CALL_OW 31
4322: ST_TO_ADDR
// if others > 2 then
4323: LD_VAR 0 4
4327: PUSH
4328: LD_INT 2
4330: GREATER
4331: IFFALSE 4376
// begin for j := 1 to 2 do
4333: LD_ADDR_VAR 0 3
4337: PUSH
4338: DOUBLE
4339: LD_INT 1
4341: DEC
4342: ST_TO_ADDR
4343: LD_INT 2
4345: PUSH
4346: FOR_TO
4347: IFFALSE 4372
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4349: LD_VAR 0 4
4353: PUSH
4354: LD_VAR 0 3
4358: ARRAY
4359: PPUSH
4360: LD_INT 4
4362: PPUSH
4363: LD_INT 0
4365: PPUSH
4366: CALL_OW 49
4370: GO 4346
4372: POP
4373: POP
// end else
4374: GO 4419
// begin for j := 1 to others do
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: DOUBLE
4382: LD_INT 1
4384: DEC
4385: ST_TO_ADDR
4386: LD_VAR 0 4
4390: PUSH
4391: FOR_TO
4392: IFFALSE 4417
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4394: LD_VAR 0 4
4398: PUSH
4399: LD_VAR 0 3
4403: ARRAY
4404: PPUSH
4405: LD_INT 4
4407: PPUSH
4408: LD_INT 0
4410: PPUSH
4411: CALL_OW 49
4415: GO 4391
4417: POP
4418: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4419: LD_ADDR_VAR 0 4
4423: PUSH
4424: LD_STRING 06_other_apemans
4426: PPUSH
4427: CALL_OW 31
4431: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4432: LD_VAR 0 4
4436: PUSH
4437: LD_INT 3
4439: PUSH
4440: LD_INT 2
4442: PUSH
4443: LD_INT 2
4445: PUSH
4446: LD_INT 1
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: PUSH
4455: LD_OWVAR 67
4459: ARRAY
4460: GREATEREQUAL
4461: IFFALSE 4494
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4463: LD_ADDR_VAR 0 3
4467: PUSH
4468: LD_INT 3
4470: PUSH
4471: LD_INT 2
4473: PUSH
4474: LD_INT 2
4476: PUSH
4477: LD_INT 1
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: PUSH
4486: LD_OWVAR 67
4490: ARRAY
4491: ST_TO_ADDR
4492: GO 4504
// j := others ;
4494: LD_ADDR_VAR 0 3
4498: PUSH
4499: LD_VAR 0 4
4503: ST_TO_ADDR
// for i := 1 to j do
4504: LD_ADDR_VAR 0 2
4508: PUSH
4509: DOUBLE
4510: LD_INT 1
4512: DEC
4513: ST_TO_ADDR
4514: LD_VAR 0 3
4518: PUSH
4519: FOR_TO
4520: IFFALSE 4563
// begin PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4522: LD_VAR 0 4
4526: PUSH
4527: LD_VAR 0 2
4531: ARRAY
4532: PPUSH
4533: LD_INT 4
4535: PPUSH
4536: LD_INT 0
4538: PPUSH
4539: CALL_OW 49
// SetTag ( others [ i ] , 107 ) ;
4543: LD_VAR 0 4
4547: PUSH
4548: LD_VAR 0 2
4552: ARRAY
4553: PPUSH
4554: LD_INT 107
4556: PPUSH
4557: CALL_OW 109
// end ;
4561: GO 4519
4563: POP
4564: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4565: LD_INT 4
4567: PPUSH
4568: LD_INT 22
4570: PUSH
4571: LD_INT 1
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: PUSH
4578: LD_INT 21
4580: PUSH
4581: LD_INT 1
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: PPUSH
4592: CALL_OW 70
4596: PPUSH
4597: LD_INT 53
4599: PPUSH
4600: LD_INT 19
4602: PPUSH
4603: CALL_OW 111
// end ;
4607: LD_VAR 0 1
4611: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix ; begin
4612: LD_INT 0
4614: PPUSH
4615: PPUSH
4616: PPUSH
4617: PPUSH
4618: PPUSH
4619: PPUSH
4620: PPUSH
4621: PPUSH
4622: PPUSH
4623: PPUSH
4624: PPUSH
// prefix := 07c_ ;
4625: LD_ADDR_VAR 0 11
4629: PUSH
4630: LD_STRING 07c_
4632: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4633: LD_ADDR_VAR 0 9
4637: PUSH
4638: LD_STRING 07_vehicles
4640: PPUSH
4641: EMPTY
4642: PPUSH
4643: CALL_OW 30
4647: ST_TO_ADDR
// if not vehicles and debug then
4648: LD_VAR 0 9
4652: NOT
4653: PUSH
4654: LD_EXP 1
4658: AND
4659: IFFALSE 4684
// vehicles := [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ;
4661: LD_ADDR_VAR 0 9
4665: PUSH
4666: LD_INT 2
4668: PUSH
4669: LD_INT 1
4671: PUSH
4672: LD_INT 1
4674: PUSH
4675: LD_INT 4
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: ST_TO_ADDR
// squad := [ ] ;
4684: LD_ADDR_VAR 0 6
4688: PUSH
4689: EMPTY
4690: ST_TO_ADDR
// tmp := [ ] ;
4691: LD_ADDR_VAR 0 7
4695: PUSH
4696: EMPTY
4697: ST_TO_ADDR
// tmpVehs := [ ] ;
4698: LD_ADDR_VAR 0 8
4702: PUSH
4703: EMPTY
4704: ST_TO_ADDR
// uc_side := 1 ;
4705: LD_ADDR_OWVAR 20
4709: PUSH
4710: LD_INT 1
4712: ST_TO_ADDR
// uc_nation := 1 ;
4713: LD_ADDR_OWVAR 21
4717: PUSH
4718: LD_INT 1
4720: ST_TO_ADDR
// if vehicles then
4721: LD_VAR 0 9
4725: IFFALSE 4881
// begin k := 1 ;
4727: LD_ADDR_VAR 0 3
4731: PUSH
4732: LD_INT 1
4734: ST_TO_ADDR
// for i := 1 to vehicles div 4 do
4735: LD_ADDR_VAR 0 2
4739: PUSH
4740: DOUBLE
4741: LD_INT 1
4743: DEC
4744: ST_TO_ADDR
4745: LD_VAR 0 9
4749: PUSH
4750: LD_INT 4
4752: DIV
4753: PUSH
4754: FOR_TO
4755: IFFALSE 4879
// begin vc_chassis := vehicles [ k ] ;
4757: LD_ADDR_OWVAR 37
4761: PUSH
4762: LD_VAR 0 9
4766: PUSH
4767: LD_VAR 0 3
4771: ARRAY
4772: ST_TO_ADDR
// vc_engine := vehicles [ k + 1 ] ;
4773: LD_ADDR_OWVAR 39
4777: PUSH
4778: LD_VAR 0 9
4782: PUSH
4783: LD_VAR 0 3
4787: PUSH
4788: LD_INT 1
4790: PLUS
4791: ARRAY
4792: ST_TO_ADDR
// vc_control := vehicles [ k + 2 ] ;
4793: LD_ADDR_OWVAR 38
4797: PUSH
4798: LD_VAR 0 9
4802: PUSH
4803: LD_VAR 0 3
4807: PUSH
4808: LD_INT 2
4810: PLUS
4811: ARRAY
4812: ST_TO_ADDR
// vc_weapon := vehicles [ k + 3 ] ;
4813: LD_ADDR_OWVAR 40
4817: PUSH
4818: LD_VAR 0 9
4822: PUSH
4823: LD_VAR 0 3
4827: PUSH
4828: LD_INT 3
4830: PLUS
4831: ARRAY
4832: ST_TO_ADDR
// k := k + 4 ;
4833: LD_ADDR_VAR 0 3
4837: PUSH
4838: LD_VAR 0 3
4842: PUSH
4843: LD_INT 4
4845: PLUS
4846: ST_TO_ADDR
// veh := CreateVehicle ;
4847: LD_ADDR_VAR 0 10
4851: PUSH
4852: CALL_OW 45
4856: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
4857: LD_ADDR_VAR 0 8
4861: PUSH
4862: LD_VAR 0 8
4866: PPUSH
4867: LD_VAR 0 10
4871: PPUSH
4872: CALL 73052 0 2
4876: ST_TO_ADDR
// end ;
4877: GO 4754
4879: POP
4880: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
4881: LD_ADDR_EXP 10
4885: PUSH
4886: LD_STRING JMM
4888: PPUSH
4889: LD_EXP 1
4893: NOT
4894: PPUSH
4895: LD_VAR 0 11
4899: PPUSH
4900: CALL 36371 0 3
4904: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
4905: LD_EXP 9
4909: PUSH
4910: LD_INT 1
4912: PUSH
4913: LD_INT 3
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: IN
4920: PUSH
4921: LD_EXP 11
4925: NOT
4926: AND
4927: IFFALSE 4988
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
4929: LD_ADDR_EXP 11
4933: PUSH
4934: LD_STRING Brown
4936: PPUSH
4937: LD_EXP 1
4941: NOT
4942: PPUSH
4943: LD_VAR 0 11
4947: PPUSH
4948: CALL 36371 0 3
4952: ST_TO_ADDR
// if Brown then
4953: LD_EXP 11
4957: IFFALSE 4988
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
4959: LD_ADDR_VAR 0 7
4963: PUSH
4964: LD_VAR 0 7
4968: PPUSH
4969: LD_VAR 0 7
4973: PUSH
4974: LD_INT 1
4976: PLUS
4977: PPUSH
4978: LD_EXP 11
4982: PPUSH
4983: CALL_OW 1
4987: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
4988: LD_EXP 9
4992: PUSH
4993: LD_INT 2
4995: PUSH
4996: LD_INT 3
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: IN
5003: PUSH
5004: LD_EXP 12
5008: NOT
5009: AND
5010: IFFALSE 5071
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5012: LD_ADDR_EXP 12
5016: PUSH
5017: LD_STRING Donaldson
5019: PPUSH
5020: LD_EXP 1
5024: NOT
5025: PPUSH
5026: LD_VAR 0 11
5030: PPUSH
5031: CALL 36371 0 3
5035: ST_TO_ADDR
// if Donaldson then
5036: LD_EXP 12
5040: IFFALSE 5071
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5042: LD_ADDR_VAR 0 7
5046: PUSH
5047: LD_VAR 0 7
5051: PPUSH
5052: LD_VAR 0 7
5056: PUSH
5057: LD_INT 1
5059: PLUS
5060: PPUSH
5061: LD_EXP 12
5065: PPUSH
5066: CALL_OW 1
5070: ST_TO_ADDR
// end ; if not Bobby then
5071: LD_EXP 13
5075: NOT
5076: IFFALSE 5134
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5078: LD_ADDR_EXP 13
5082: PUSH
5083: LD_STRING Bobby
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: LD_VAR 0 11
5093: PPUSH
5094: CALL 36371 0 3
5098: ST_TO_ADDR
// if Bobby then
5099: LD_EXP 13
5103: IFFALSE 5134
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5105: LD_ADDR_VAR 0 7
5109: PUSH
5110: LD_VAR 0 7
5114: PPUSH
5115: LD_VAR 0 7
5119: PUSH
5120: LD_INT 1
5122: PLUS
5123: PPUSH
5124: LD_EXP 13
5128: PPUSH
5129: CALL_OW 1
5133: ST_TO_ADDR
// end ; if not Cyrus then
5134: LD_EXP 14
5138: NOT
5139: IFFALSE 5197
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5141: LD_ADDR_EXP 14
5145: PUSH
5146: LD_STRING Cyrus
5148: PPUSH
5149: LD_INT 1
5151: PPUSH
5152: LD_VAR 0 11
5156: PPUSH
5157: CALL 36371 0 3
5161: ST_TO_ADDR
// if Cyrus then
5162: LD_EXP 14
5166: IFFALSE 5197
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5168: LD_ADDR_VAR 0 7
5172: PUSH
5173: LD_VAR 0 7
5177: PPUSH
5178: LD_VAR 0 7
5182: PUSH
5183: LD_INT 1
5185: PLUS
5186: PPUSH
5187: LD_EXP 14
5191: PPUSH
5192: CALL_OW 1
5196: ST_TO_ADDR
// end ; if not Lisa then
5197: LD_EXP 15
5201: NOT
5202: IFFALSE 5263
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5204: LD_ADDR_EXP 15
5208: PUSH
5209: LD_STRING Lisa
5211: PPUSH
5212: LD_EXP 1
5216: NOT
5217: PPUSH
5218: LD_VAR 0 11
5222: PPUSH
5223: CALL 36371 0 3
5227: ST_TO_ADDR
// if Lisa then
5228: LD_EXP 15
5232: IFFALSE 5263
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5234: LD_ADDR_VAR 0 7
5238: PUSH
5239: LD_VAR 0 7
5243: PPUSH
5244: LD_VAR 0 7
5248: PUSH
5249: LD_INT 1
5251: PLUS
5252: PPUSH
5253: LD_EXP 15
5257: PPUSH
5258: CALL_OW 1
5262: ST_TO_ADDR
// end ; if not Frank then
5263: LD_EXP 16
5267: NOT
5268: IFFALSE 5329
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5270: LD_ADDR_EXP 16
5274: PUSH
5275: LD_STRING Frank
5277: PPUSH
5278: LD_EXP 1
5282: NOT
5283: PPUSH
5284: LD_VAR 0 11
5288: PPUSH
5289: CALL 36371 0 3
5293: ST_TO_ADDR
// if Frank then
5294: LD_EXP 16
5298: IFFALSE 5329
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5300: LD_ADDR_VAR 0 7
5304: PUSH
5305: LD_VAR 0 7
5309: PPUSH
5310: LD_VAR 0 7
5314: PUSH
5315: LD_INT 1
5317: PLUS
5318: PPUSH
5319: LD_EXP 16
5323: PPUSH
5324: CALL_OW 1
5328: ST_TO_ADDR
// end ; if not Kikuchi then
5329: LD_EXP 18
5333: NOT
5334: IFFALSE 5392
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5336: LD_ADDR_EXP 18
5340: PUSH
5341: LD_STRING Kikuchi
5343: PPUSH
5344: LD_INT 1
5346: PPUSH
5347: LD_VAR 0 11
5351: PPUSH
5352: CALL 36371 0 3
5356: ST_TO_ADDR
// if Kikuchi then
5357: LD_EXP 18
5361: IFFALSE 5392
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5363: LD_ADDR_VAR 0 7
5367: PUSH
5368: LD_VAR 0 7
5372: PPUSH
5373: LD_VAR 0 7
5377: PUSH
5378: LD_INT 1
5380: PLUS
5381: PPUSH
5382: LD_EXP 18
5386: PPUSH
5387: CALL_OW 1
5391: ST_TO_ADDR
// end ; if not Gladstone then
5392: LD_EXP 17
5396: NOT
5397: IFFALSE 5458
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5399: LD_ADDR_EXP 17
5403: PUSH
5404: LD_STRING Gladstone
5406: PPUSH
5407: LD_EXP 1
5411: NOT
5412: PPUSH
5413: LD_VAR 0 11
5417: PPUSH
5418: CALL 36371 0 3
5422: ST_TO_ADDR
// if Gladstone then
5423: LD_EXP 17
5427: IFFALSE 5458
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5429: LD_ADDR_VAR 0 7
5433: PUSH
5434: LD_VAR 0 7
5438: PPUSH
5439: LD_VAR 0 7
5443: PUSH
5444: LD_INT 1
5446: PLUS
5447: PPUSH
5448: LD_EXP 17
5452: PPUSH
5453: CALL_OW 1
5457: ST_TO_ADDR
// end ; if not Khatam then
5458: LD_EXP 19
5462: NOT
5463: IFFALSE 5521
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5465: LD_ADDR_EXP 19
5469: PUSH
5470: LD_STRING Khatam
5472: PPUSH
5473: LD_INT 1
5475: PPUSH
5476: LD_VAR 0 11
5480: PPUSH
5481: CALL 36371 0 3
5485: ST_TO_ADDR
// if Khatam then
5486: LD_EXP 19
5490: IFFALSE 5521
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5492: LD_ADDR_VAR 0 7
5496: PUSH
5497: LD_VAR 0 7
5501: PPUSH
5502: LD_VAR 0 7
5506: PUSH
5507: LD_INT 1
5509: PLUS
5510: PPUSH
5511: LD_EXP 19
5515: PPUSH
5516: CALL_OW 1
5520: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5521: LD_ADDR_VAR 0 5
5525: PUSH
5526: LD_STRING 07c_others
5528: PPUSH
5529: CALL_OW 31
5533: ST_TO_ADDR
// squad := others ;
5534: LD_ADDR_VAR 0 6
5538: PUSH
5539: LD_VAR 0 5
5543: ST_TO_ADDR
// if others then
5544: LD_VAR 0 5
5548: IFFALSE 5648
// for i in others do
5550: LD_ADDR_VAR 0 2
5554: PUSH
5555: LD_VAR 0 5
5559: PUSH
5560: FOR_IN
5561: IFFALSE 5646
// begin SetTag ( i , 108 ) ;
5563: LD_VAR 0 2
5567: PPUSH
5568: LD_INT 108
5570: PPUSH
5571: CALL_OW 109
// if GetClass ( i ) = class_mechanic then
5575: LD_VAR 0 2
5579: PPUSH
5580: CALL_OW 257
5584: PUSH
5585: LD_INT 3
5587: EQUAL
5588: IFFALSE 5615
// tmp := Insert ( tmp , 1 , i ) else
5590: LD_ADDR_VAR 0 7
5594: PUSH
5595: LD_VAR 0 7
5599: PPUSH
5600: LD_INT 1
5602: PPUSH
5603: LD_VAR 0 2
5607: PPUSH
5608: CALL_OW 2
5612: ST_TO_ADDR
5613: GO 5644
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5615: LD_ADDR_VAR 0 7
5619: PUSH
5620: LD_VAR 0 7
5624: PPUSH
5625: LD_VAR 0 7
5629: PUSH
5630: LD_INT 1
5632: PLUS
5633: PPUSH
5634: LD_VAR 0 2
5638: PPUSH
5639: CALL_OW 1
5643: ST_TO_ADDR
// end ;
5644: GO 5560
5646: POP
5647: POP
// if tmp then
5648: LD_VAR 0 7
5652: IFFALSE 5822
// begin for i in tmp do
5654: LD_ADDR_VAR 0 2
5658: PUSH
5659: LD_VAR 0 7
5663: PUSH
5664: FOR_IN
5665: IFFALSE 5820
// begin SetDir ( i , 3 ) ;
5667: LD_VAR 0 2
5671: PPUSH
5672: LD_INT 3
5674: PPUSH
5675: CALL_OW 233
// if tmpVehs then
5679: LD_VAR 0 8
5683: IFFALSE 5761
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5685: LD_VAR 0 8
5689: PUSH
5690: LD_INT 1
5692: ARRAY
5693: PPUSH
5694: LD_INT 0
5696: PPUSH
5697: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , 87 , 147 , false ) ;
5701: LD_VAR 0 8
5705: PUSH
5706: LD_INT 1
5708: ARRAY
5709: PPUSH
5710: LD_INT 87
5712: PPUSH
5713: LD_INT 147
5715: PPUSH
5716: LD_INT 0
5718: PPUSH
5719: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 8
5732: PUSH
5733: LD_INT 1
5735: ARRAY
5736: PPUSH
5737: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
5741: LD_ADDR_VAR 0 8
5745: PUSH
5746: LD_VAR 0 8
5750: PPUSH
5751: LD_INT 1
5753: PPUSH
5754: CALL_OW 3
5758: ST_TO_ADDR
// end else
5759: GO 5776
// PlaceUnitArea ( i , southGammaSupportArea , false ) ;
5761: LD_VAR 0 2
5765: PPUSH
5766: LD_INT 5
5768: PPUSH
5769: LD_INT 0
5771: PPUSH
5772: CALL_OW 49
// ComMoveXY ( i , 74 , 129 ) ;
5776: LD_VAR 0 2
5780: PPUSH
5781: LD_INT 74
5783: PPUSH
5784: LD_INT 129
5786: PPUSH
5787: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5791: LD_INT 35
5793: PPUSH
5794: CALL_OW 67
// until not FilterUnitsInArea ( southGammaSupportArea , [ f_side , 1 ] ) ;
5798: LD_INT 5
5800: PPUSH
5801: LD_INT 22
5803: PUSH
5804: LD_INT 1
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PPUSH
5811: CALL_OW 70
5815: NOT
5816: IFFALSE 5791
// end ;
5818: GO 5664
5820: POP
5821: POP
// end ; PlaceUnitXY ( JMM , 87 , 147 , false ) ;
5822: LD_EXP 10
5826: PPUSH
5827: LD_INT 87
5829: PPUSH
5830: LD_INT 147
5832: PPUSH
5833: LD_INT 0
5835: PPUSH
5836: CALL_OW 48
// ComMoveXY ( JMM , 79 , 131 ) ;
5840: LD_EXP 10
5844: PPUSH
5845: LD_INT 79
5847: PPUSH
5848: LD_INT 131
5850: PPUSH
5851: CALL_OW 111
// jmmArrival := true ;
5855: LD_ADDR_EXP 7
5859: PUSH
5860: LD_INT 1
5862: ST_TO_ADDR
// end ;
5863: LD_VAR 0 1
5867: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
5868: LD_INT 0
5870: PPUSH
5871: PPUSH
5872: PPUSH
5873: PPUSH
5874: PPUSH
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
5875: LD_ADDR_VAR 0 5
5879: PUSH
5880: LD_INT 6
5882: PPUSH
5883: LD_INT 3
5885: PUSH
5886: LD_INT 21
5888: PUSH
5889: LD_INT 3
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PPUSH
5900: CALL_OW 70
5904: ST_TO_ADDR
// if tmp then
5905: LD_VAR 0 5
5909: IFFALSE 5933
// begin ComMoveXY ( tmp , 33 , 39 ) ;
5911: LD_VAR 0 5
5915: PPUSH
5916: LD_INT 33
5918: PPUSH
5919: LD_INT 39
5921: PPUSH
5922: CALL_OW 111
// wait ( 0 0$3 ) ;
5926: LD_INT 105
5928: PPUSH
5929: CALL_OW 67
// end ; uc_side := 4 ;
5933: LD_ADDR_OWVAR 20
5937: PUSH
5938: LD_INT 4
5940: ST_TO_ADDR
// uc_nation := 1 ;
5941: LD_ADDR_OWVAR 21
5945: PUSH
5946: LD_INT 1
5948: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
5949: LD_ADDR_EXP 23
5953: PUSH
5954: LD_STRING Sikorski
5956: PPUSH
5957: LD_INT 0
5959: PPUSH
5960: LD_STRING 
5962: PPUSH
5963: CALL 36371 0 3
5967: ST_TO_ADDR
// vc_engine := engine_combustion ;
5968: LD_ADDR_OWVAR 39
5972: PUSH
5973: LD_INT 1
5975: ST_TO_ADDR
// vc_control = control_manual ;
5976: LD_ADDR_OWVAR 38
5980: PUSH
5981: LD_INT 1
5983: ST_TO_ADDR
// vc_weapon = [ us_heavy_gun , us_double_gun , us_double_gun , us_double_gun ] [ Difficulty ] ;
5984: LD_ADDR_OWVAR 40
5988: PUSH
5989: LD_INT 6
5991: PUSH
5992: LD_INT 5
5994: PUSH
5995: LD_INT 5
5997: PUSH
5998: LD_INT 5
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: PUSH
6007: LD_OWVAR 67
6011: ARRAY
6012: ST_TO_ADDR
// vc_chassis = us_heavy_tracked ;
6013: LD_ADDR_OWVAR 37
6017: PUSH
6018: LD_INT 4
6020: ST_TO_ADDR
// veh := CreateVehicle ;
6021: LD_ADDR_VAR 0 4
6025: PUSH
6026: CALL_OW 45
6030: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6031: LD_VAR 0 4
6035: PPUSH
6036: LD_INT 3
6038: PPUSH
6039: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6043: LD_VAR 0 4
6047: PPUSH
6048: LD_INT 4
6050: NEG
6051: PPUSH
6052: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6056: LD_VAR 0 4
6060: PPUSH
6061: LD_INT 70
6063: PPUSH
6064: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6068: LD_VAR 0 4
6072: PPUSH
6073: LD_INT 6
6075: PPUSH
6076: LD_INT 0
6078: PPUSH
6079: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6083: LD_EXP 23
6087: PPUSH
6088: LD_VAR 0 4
6092: PPUSH
6093: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6097: LD_EXP 23
6101: PPUSH
6102: LD_INT 37
6104: PPUSH
6105: LD_INT 30
6107: PPUSH
6108: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6112: LD_INT 10
6114: PPUSH
6115: CALL_OW 67
// InitHc_All ( ) ;
6119: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6123: LD_ADDR_VAR 0 2
6127: PUSH
6128: DOUBLE
6129: LD_INT 1
6131: DEC
6132: ST_TO_ADDR
6133: LD_INT 3
6135: PUSH
6136: LD_INT 2
6138: PUSH
6139: LD_INT 2
6141: PUSH
6142: LD_INT 2
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: PUSH
6151: LD_OWVAR 67
6155: ARRAY
6156: PUSH
6157: FOR_TO
6158: IFFALSE 6270
// begin uc_side = 4 ;
6160: LD_ADDR_OWVAR 20
6164: PUSH
6165: LD_INT 4
6167: ST_TO_ADDR
// uc_nation = 1 ;
6168: LD_ADDR_OWVAR 21
6172: PUSH
6173: LD_INT 1
6175: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6176: LD_INT 0
6178: PPUSH
6179: LD_INT 1
6181: PPUSH
6182: LD_INT 4
6184: PPUSH
6185: LD_INT 7
6187: PPUSH
6188: CALL_OW 12
6192: PPUSH
6193: CALL_OW 380
// un := CreateHuman ;
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: CALL_OW 44
6206: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6207: LD_VAR 0 3
6211: PPUSH
6212: LD_INT 3
6214: PPUSH
6215: CALL_OW 233
// SetTag ( un , 101 ) ;
6219: LD_VAR 0 3
6223: PPUSH
6224: LD_INT 101
6226: PPUSH
6227: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6231: LD_VAR 0 3
6235: PPUSH
6236: LD_INT 6
6238: PPUSH
6239: LD_INT 0
6241: PPUSH
6242: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6246: LD_VAR 0 3
6250: PPUSH
6251: LD_INT 25
6253: PPUSH
6254: LD_INT 27
6256: PPUSH
6257: CALL_OW 111
// wait ( 0 0$1 ) ;
6261: LD_INT 35
6263: PPUSH
6264: CALL_OW 67
// end ;
6268: GO 6157
6270: POP
6271: POP
// for i := 1 to 2 do
6272: LD_ADDR_VAR 0 2
6276: PUSH
6277: DOUBLE
6278: LD_INT 1
6280: DEC
6281: ST_TO_ADDR
6282: LD_INT 2
6284: PUSH
6285: FOR_TO
6286: IFFALSE 6398
// begin uc_side = 4 ;
6288: LD_ADDR_OWVAR 20
6292: PUSH
6293: LD_INT 4
6295: ST_TO_ADDR
// uc_nation = 1 ;
6296: LD_ADDR_OWVAR 21
6300: PUSH
6301: LD_INT 1
6303: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6304: LD_INT 0
6306: PPUSH
6307: LD_INT 4
6309: PPUSH
6310: LD_INT 3
6312: PPUSH
6313: LD_INT 5
6315: PPUSH
6316: CALL_OW 12
6320: PPUSH
6321: CALL_OW 380
// un := CreateHuman ;
6325: LD_ADDR_VAR 0 3
6329: PUSH
6330: CALL_OW 44
6334: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6335: LD_VAR 0 3
6339: PPUSH
6340: LD_INT 3
6342: PPUSH
6343: CALL_OW 233
// SetTag ( un , 101 ) ;
6347: LD_VAR 0 3
6351: PPUSH
6352: LD_INT 101
6354: PPUSH
6355: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6359: LD_VAR 0 3
6363: PPUSH
6364: LD_INT 6
6366: PPUSH
6367: LD_INT 0
6369: PPUSH
6370: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6374: LD_VAR 0 3
6378: PPUSH
6379: LD_INT 25
6381: PPUSH
6382: LD_INT 27
6384: PPUSH
6385: CALL_OW 111
// wait ( 0 0$1 ) ;
6389: LD_INT 35
6391: PPUSH
6392: CALL_OW 67
// end ;
6396: GO 6285
6398: POP
6399: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6400: LD_ADDR_VAR 0 2
6404: PUSH
6405: DOUBLE
6406: LD_INT 1
6408: DEC
6409: ST_TO_ADDR
6410: LD_INT 5
6412: PUSH
6413: LD_INT 4
6415: PUSH
6416: LD_INT 3
6418: PUSH
6419: LD_INT 3
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: PUSH
6428: LD_OWVAR 67
6432: ARRAY
6433: PUSH
6434: FOR_TO
6435: IFFALSE 6677
// begin uc_side := 4 ;
6437: LD_ADDR_OWVAR 20
6441: PUSH
6442: LD_INT 4
6444: ST_TO_ADDR
// uc_nation := 1 ;
6445: LD_ADDR_OWVAR 21
6449: PUSH
6450: LD_INT 1
6452: ST_TO_ADDR
// vc_engine := engine_combustion ;
6453: LD_ADDR_OWVAR 39
6457: PUSH
6458: LD_INT 1
6460: ST_TO_ADDR
// vc_control := control_manual ;
6461: LD_ADDR_OWVAR 38
6465: PUSH
6466: LD_INT 1
6468: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6469: LD_ADDR_OWVAR 40
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: LD_INT 7
6479: PUSH
6480: LD_INT 5
6482: PUSH
6483: LD_INT 4
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_VAR 0 2
6496: PUSH
6497: LD_INT 4
6499: MOD
6500: PUSH
6501: LD_INT 1
6503: PLUS
6504: ARRAY
6505: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6506: LD_ADDR_OWVAR 37
6510: PUSH
6511: LD_INT 3
6513: PUSH
6514: LD_INT 3
6516: PUSH
6517: LD_INT 4
6519: PUSH
6520: LD_INT 4
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: PUSH
6529: LD_VAR 0 2
6533: PUSH
6534: LD_INT 4
6536: MOD
6537: PUSH
6538: LD_INT 1
6540: PLUS
6541: ARRAY
6542: ST_TO_ADDR
// veh := CreateVehicle ;
6543: LD_ADDR_VAR 0 4
6547: PUSH
6548: CALL_OW 45
6552: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6553: LD_VAR 0 4
6557: PPUSH
6558: LD_INT 3
6560: PPUSH
6561: CALL_OW 233
// SetTag ( veh , 0 ) ;
6565: LD_VAR 0 4
6569: PPUSH
6570: LD_INT 0
6572: PPUSH
6573: CALL_OW 109
// SetFuel ( veh , 70 ) ;
6577: LD_VAR 0 4
6581: PPUSH
6582: LD_INT 70
6584: PPUSH
6585: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6589: LD_VAR 0 4
6593: PPUSH
6594: LD_INT 6
6596: PPUSH
6597: LD_INT 0
6599: PPUSH
6600: CALL_OW 49
// InitHc ;
6604: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
6608: LD_INT 0
6610: PPUSH
6611: LD_INT 3
6613: PPUSH
6614: LD_INT 4
6616: PPUSH
6617: LD_INT 7
6619: PPUSH
6620: CALL_OW 12
6624: PPUSH
6625: CALL_OW 380
// un := CreateHuman ;
6629: LD_ADDR_VAR 0 3
6633: PUSH
6634: CALL_OW 44
6638: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6639: LD_VAR 0 3
6643: PPUSH
6644: LD_VAR 0 4
6648: PPUSH
6649: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
6653: LD_VAR 0 3
6657: PPUSH
6658: LD_INT 30
6660: PPUSH
6661: LD_INT 22
6663: PPUSH
6664: CALL_OW 111
// wait ( 0 0$3 ) ;
6668: LD_INT 105
6670: PPUSH
6671: CALL_OW 67
// end ;
6675: GO 6434
6677: POP
6678: POP
// wait ( 0 0$10 ) ;
6679: LD_INT 350
6681: PPUSH
6682: CALL_OW 67
// end ;
6686: LD_VAR 0 1
6690: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
6691: LD_INT 0
6693: PPUSH
6694: PPUSH
6695: PPUSH
6696: PPUSH
// gammaBase := [ ] ;
6697: LD_ADDR_VAR 0 4
6701: PUSH
6702: EMPTY
6703: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
6704: LD_ADDR_VAR 0 5
6708: PUSH
6709: LD_VAR 0 1
6713: PPUSH
6714: LD_INT 22
6716: PUSH
6717: LD_INT 1
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PUSH
6724: LD_INT 21
6726: PUSH
6727: LD_INT 3
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: PUSH
6734: LD_INT 50
6736: PUSH
6737: EMPTY
6738: LIST
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: PPUSH
6745: CALL_OW 70
6749: ST_TO_ADDR
// for i in buildings do
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_VAR 0 5
6759: PUSH
6760: FOR_IN
6761: IFFALSE 7198
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
6763: LD_VAR 0 3
6767: PPUSH
6768: CALL_OW 266
6772: PUSH
6773: LD_INT 6
6775: PUSH
6776: LD_INT 7
6778: PUSH
6779: LD_INT 8
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: IN
6787: IFFALSE 6901
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
6789: LD_ADDR_VAR 0 4
6793: PUSH
6794: LD_VAR 0 4
6798: PUSH
6799: LD_VAR 0 3
6803: PPUSH
6804: CALL_OW 266
6808: PUSH
6809: LD_VAR 0 3
6813: PPUSH
6814: CALL_OW 250
6818: PUSH
6819: LD_VAR 0 3
6823: PPUSH
6824: CALL_OW 251
6828: PUSH
6829: LD_VAR 0 3
6833: PPUSH
6834: CALL_OW 254
6838: PUSH
6839: LD_VAR 0 3
6843: PPUSH
6844: CALL_OW 267
6848: PUSH
6849: LD_VAR 0 3
6853: PPUSH
6854: CALL_OW 248
6858: PUSH
6859: LD_VAR 0 3
6863: PPUSH
6864: LD_INT 1
6866: PPUSH
6867: CALL_OW 268
6871: PUSH
6872: LD_VAR 0 3
6876: PPUSH
6877: LD_INT 2
6879: PPUSH
6880: CALL_OW 268
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: PUSH
6895: EMPTY
6896: LIST
6897: ADD
6898: ST_TO_ADDR
6899: GO 7196
// if GetBType ( i ) = b_bunker then
6901: LD_VAR 0 3
6905: PPUSH
6906: CALL_OW 266
6910: PUSH
6911: LD_INT 32
6913: EQUAL
6914: IFFALSE 7011
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
6916: LD_ADDR_VAR 0 4
6920: PUSH
6921: LD_VAR 0 4
6925: PUSH
6926: LD_VAR 0 3
6930: PPUSH
6931: CALL_OW 266
6935: PUSH
6936: LD_VAR 0 3
6940: PPUSH
6941: CALL_OW 250
6945: PUSH
6946: LD_VAR 0 3
6950: PPUSH
6951: CALL_OW 251
6955: PUSH
6956: LD_VAR 0 3
6960: PPUSH
6961: CALL_OW 254
6965: PUSH
6966: LD_VAR 0 3
6970: PPUSH
6971: CALL_OW 267
6975: PUSH
6976: LD_VAR 0 3
6980: PPUSH
6981: CALL_OW 248
6985: PUSH
6986: LD_VAR 0 3
6990: PPUSH
6991: CALL_OW 269
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: PUSH
7005: EMPTY
7006: LIST
7007: ADD
7008: ST_TO_ADDR
7009: GO 7196
// if GetBType ( i ) = b_factory then
7011: LD_VAR 0 3
7015: PPUSH
7016: CALL_OW 266
7020: PUSH
7021: LD_INT 3
7023: EQUAL
7024: IFFALSE 7114
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7026: LD_ADDR_VAR 0 4
7030: PUSH
7031: LD_VAR 0 4
7035: PPUSH
7036: LD_INT 1
7038: PPUSH
7039: LD_VAR 0 3
7043: PPUSH
7044: CALL_OW 266
7048: PUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: CALL_OW 250
7058: PUSH
7059: LD_VAR 0 3
7063: PPUSH
7064: CALL_OW 251
7068: PUSH
7069: LD_VAR 0 3
7073: PPUSH
7074: CALL_OW 254
7078: PUSH
7079: LD_VAR 0 3
7083: PPUSH
7084: CALL_OW 267
7088: PUSH
7089: LD_VAR 0 3
7093: PPUSH
7094: CALL_OW 248
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: PPUSH
7107: CALL_OW 2
7111: ST_TO_ADDR
7112: GO 7196
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7114: LD_ADDR_VAR 0 4
7118: PUSH
7119: LD_VAR 0 4
7123: PUSH
7124: LD_VAR 0 3
7128: PPUSH
7129: CALL_OW 266
7133: PUSH
7134: LD_VAR 0 3
7138: PPUSH
7139: CALL_OW 250
7143: PUSH
7144: LD_VAR 0 3
7148: PPUSH
7149: CALL_OW 251
7153: PUSH
7154: LD_VAR 0 3
7158: PPUSH
7159: CALL_OW 254
7163: PUSH
7164: LD_VAR 0 3
7168: PPUSH
7169: CALL_OW 267
7173: PUSH
7174: LD_VAR 0 3
7178: PPUSH
7179: CALL_OW 248
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: PUSH
7192: EMPTY
7193: LIST
7194: ADD
7195: ST_TO_ADDR
// end ;
7196: GO 6760
7198: POP
7199: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7200: LD_VAR 0 4
7204: PPUSH
7205: LD_STRING 08_GammaBase
7207: PPUSH
7208: CALL_OW 39
// end ;
7212: LD_VAR 0 2
7216: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7217: LD_INT 0
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7226: LD_ADDR_VAR 0 3
7230: PUSH
7231: LD_INT 22
7233: PUSH
7234: LD_INT 4
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PPUSH
7241: CALL_OW 69
7245: ST_TO_ADDR
// ComAgressiveMove ( tmp , 55 , 62 ) ;
7246: LD_VAR 0 3
7250: PPUSH
7251: LD_INT 55
7253: PPUSH
7254: LD_INT 62
7256: PPUSH
7257: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
7261: LD_VAR 0 3
7265: PPUSH
7266: LD_INT 175
7268: PPUSH
7269: CALL_OW 202
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
7273: LD_VAR 0 3
7277: PPUSH
7278: LD_INT 120
7280: PUSH
7281: LD_INT 101
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 72
7292: PPUSH
7293: LD_INT 58
7295: PPUSH
7296: LD_INT 96
7298: PPUSH
7299: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
7303: LD_VAR 0 3
7307: PPUSH
7308: LD_INT 120
7310: PUSH
7311: LD_INT 101
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PPUSH
7318: CALL_OW 72
7322: PPUSH
7323: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
7327: LD_VAR 0 3
7331: PPUSH
7332: LD_INT 120
7334: PUSH
7335: LD_INT 101
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 25
7344: PUSH
7345: LD_INT 4
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 72
7360: PPUSH
7361: LD_INT 52
7363: PPUSH
7364: LD_INT 93
7366: PPUSH
7367: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
7371: LD_VAR 0 3
7375: PPUSH
7376: LD_INT 120
7378: PUSH
7379: LD_INT 101
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: LD_INT 25
7388: PUSH
7389: LD_INT 4
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PPUSH
7400: CALL_OW 72
7404: PPUSH
7405: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
7409: LD_ADDR_VAR 0 7
7413: PUSH
7414: LD_VAR 0 3
7418: PPUSH
7419: LD_INT 21
7421: PUSH
7422: LD_INT 2
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 72
7433: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
7434: LD_ADDR_VAR 0 4
7438: PUSH
7439: LD_INT 81
7441: PUSH
7442: LD_INT 1
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PPUSH
7449: CALL_OW 69
7453: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
7454: LD_ADDR_VAR 0 5
7458: PUSH
7459: LD_INT 57
7461: PUSH
7462: LD_INT 66
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 62
7471: PUSH
7472: LD_INT 58
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7483: LD_INT 35
7485: PPUSH
7486: CALL_OW 67
// for i in filter do
7490: LD_ADDR_VAR 0 2
7494: PUSH
7495: LD_VAR 0 7
7499: PUSH
7500: FOR_IN
7501: IFFALSE 7940
// begin if IsDead ( i ) then
7503: LD_VAR 0 2
7507: PPUSH
7508: CALL_OW 301
7512: IFFALSE 7532
// begin filter := filter diff i ;
7514: LD_ADDR_VAR 0 7
7518: PUSH
7519: LD_VAR 0 7
7523: PUSH
7524: LD_VAR 0 2
7528: DIFF
7529: ST_TO_ADDR
// continue ;
7530: GO 7500
// end ; tmp := IsDrivenBy ( i ) ;
7532: LD_ADDR_VAR 0 3
7536: PUSH
7537: LD_VAR 0 2
7541: PPUSH
7542: CALL_OW 311
7546: ST_TO_ADDR
// if not tmp then
7547: LD_VAR 0 3
7551: NOT
7552: IFFALSE 7556
// continue ;
7554: GO 7500
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
7556: LD_VAR 0 2
7560: PPUSH
7561: CALL_OW 261
7565: PUSH
7566: LD_INT 30
7568: GREATER
7569: PUSH
7570: LD_VAR 0 2
7574: PPUSH
7575: CALL_OW 110
7579: PUSH
7580: LD_INT 2
7582: EQUAL
7583: AND
7584: IFFALSE 7600
// SetTag ( i , 0 ) else
7586: LD_VAR 0 2
7590: PPUSH
7591: LD_INT 0
7593: PPUSH
7594: CALL_OW 109
7598: GO 7644
// if GetTag ( i ) = 2 then
7600: LD_VAR 0 2
7604: PPUSH
7605: CALL_OW 110
7609: PUSH
7610: LD_INT 2
7612: EQUAL
7613: IFFALSE 7644
// begin ComMoveXY ( i , 52 , 50 ) ;
7615: LD_VAR 0 2
7619: PPUSH
7620: LD_INT 52
7622: PPUSH
7623: LD_INT 50
7625: PPUSH
7626: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
7630: LD_VAR 0 2
7634: PPUSH
7635: LD_EXP 26
7639: PPUSH
7640: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
7644: LD_VAR 0 2
7648: PPUSH
7649: CALL_OW 256
7653: PUSH
7654: LD_INT 600
7656: GREATEREQUAL
7657: PUSH
7658: LD_VAR 0 2
7662: PPUSH
7663: CALL_OW 110
7667: NOT
7668: AND
7669: IFFALSE 7695
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7671: LD_VAR 0 2
7675: PPUSH
7676: LD_VAR 0 4
7680: PPUSH
7681: LD_VAR 0 2
7685: PPUSH
7686: CALL_OW 74
7690: PPUSH
7691: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
7695: LD_VAR 0 2
7699: PPUSH
7700: CALL_OW 256
7704: PUSH
7705: LD_INT 600
7707: LESS
7708: PUSH
7709: LD_VAR 0 2
7713: PPUSH
7714: CALL_OW 110
7718: NOT
7719: AND
7720: IFFALSE 7796
// begin SetTag ( i , 1 ) ;
7722: LD_VAR 0 2
7726: PPUSH
7727: LD_INT 1
7729: PPUSH
7730: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
7734: LD_ADDR_VAR 0 6
7738: PUSH
7739: LD_VAR 0 2
7743: PPUSH
7744: LD_VAR 0 5
7748: PPUSH
7749: CALL 76375 0 2
7753: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
7754: LD_VAR 0 2
7758: PPUSH
7759: LD_VAR 0 6
7763: PUSH
7764: LD_INT 1
7766: ARRAY
7767: PPUSH
7768: LD_VAR 0 6
7772: PUSH
7773: LD_INT 2
7775: ARRAY
7776: PPUSH
7777: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
7781: LD_VAR 0 2
7785: PPUSH
7786: LD_INT 40
7788: PPUSH
7789: LD_INT 49
7791: PPUSH
7792: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
7796: LD_VAR 0 2
7800: PPUSH
7801: CALL_OW 110
7805: PUSH
7806: LD_INT 1
7808: EQUAL
7809: PUSH
7810: LD_VAR 0 2
7814: PPUSH
7815: LD_INT 40
7817: PPUSH
7818: LD_INT 49
7820: PPUSH
7821: CALL_OW 297
7825: PUSH
7826: LD_INT 9
7828: LESS
7829: AND
7830: PUSH
7831: LD_VAR 0 3
7835: AND
7836: IFFALSE 7938
// begin ComExitVehicle ( tmp ) ;
7838: LD_VAR 0 3
7842: PPUSH
7843: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7847: LD_VAR 0 3
7851: PPUSH
7852: LD_VAR 0 2
7856: PPUSH
7857: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7861: LD_INT 35
7863: PPUSH
7864: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7868: LD_VAR 0 2
7872: PPUSH
7873: CALL_OW 256
7877: PUSH
7878: LD_INT 1000
7880: EQUAL
7881: IFFALSE 7861
// ComEnterUnit ( tmp , i ) ;
7883: LD_VAR 0 3
7887: PPUSH
7888: LD_VAR 0 2
7892: PPUSH
7893: CALL_OW 120
// if GetFuel ( i ) <= 40 then
7897: LD_VAR 0 2
7901: PPUSH
7902: CALL_OW 261
7906: PUSH
7907: LD_INT 40
7909: LESSEQUAL
7910: IFFALSE 7926
// SetTag ( i , 2 ) else
7912: LD_VAR 0 2
7916: PPUSH
7917: LD_INT 2
7919: PPUSH
7920: CALL_OW 109
7924: GO 7938
// SetTag ( i , 0 ) ;
7926: LD_VAR 0 2
7930: PPUSH
7931: LD_INT 0
7933: PPUSH
7934: CALL_OW 109
// end ; end ;
7938: GO 7500
7940: POP
7941: POP
// until not filter ;
7942: LD_VAR 0 7
7946: NOT
7947: IFFALSE 7483
// end ; end_of_file
7949: LD_VAR 0 1
7953: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
7954: LD_INT 0
7956: PPUSH
7957: PPUSH
7958: PPUSH
7959: PPUSH
7960: PPUSH
// uc_side := 3 ;
7961: LD_ADDR_OWVAR 20
7965: PUSH
7966: LD_INT 3
7968: ST_TO_ADDR
// uc_nation := 3 ;
7969: LD_ADDR_OWVAR 21
7973: PUSH
7974: LD_INT 3
7976: ST_TO_ADDR
// ruMechCounter := [ 8 , 12 , 16 , 20 ] [ Difficulty ] ;
7977: LD_ADDR_EXP 28
7981: PUSH
7982: LD_INT 8
7984: PUSH
7985: LD_INT 12
7987: PUSH
7988: LD_INT 16
7990: PUSH
7991: LD_INT 20
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: PUSH
8000: LD_OWVAR 67
8004: ARRAY
8005: ST_TO_ADDR
// ruMobile := [ ] ;
8006: LD_ADDR_EXP 29
8010: PUSH
8011: EMPTY
8012: ST_TO_ADDR
// ruBuildList := [ ] ;
8013: LD_ADDR_EXP 30
8017: PUSH
8018: EMPTY
8019: ST_TO_ADDR
// russianAttackers := [ ] ;
8020: LD_ADDR_EXP 31
8024: PUSH
8025: EMPTY
8026: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8027: LD_ADDR_VAR 0 5
8031: PUSH
8032: LD_INT 43
8034: PUSH
8035: LD_INT 44
8037: PUSH
8038: LD_INT 46
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: ST_TO_ADDR
// if Difficulty > 2 then
8046: LD_OWVAR 67
8050: PUSH
8051: LD_INT 2
8053: GREATER
8054: IFFALSE 8077
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8056: LD_ADDR_VAR 0 5
8060: PUSH
8061: LD_VAR 0 5
8065: PUSH
8066: LD_INT 45
8068: PUSH
8069: LD_INT 46
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: ADD
8076: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
8077: LD_ADDR_EXP 27
8081: PUSH
8082: LD_STRING Borodin
8084: PPUSH
8085: CALL_OW 25
8089: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
8090: LD_EXP 27
8094: PPUSH
8095: LD_INT 28
8097: PPUSH
8098: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
8102: LD_INT 28
8104: PPUSH
8105: CALL_OW 274
8109: PPUSH
8110: LD_INT 1
8112: PPUSH
8113: LD_INT 3000
8115: PUSH
8116: LD_INT 4000
8118: PUSH
8119: LD_INT 5000
8121: PUSH
8122: LD_INT 6000
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: PUSH
8131: LD_OWVAR 67
8135: ARRAY
8136: PPUSH
8137: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
8141: LD_INT 28
8143: PPUSH
8144: CALL_OW 274
8148: PPUSH
8149: LD_INT 2
8151: PPUSH
8152: LD_INT 1000
8154: PPUSH
8155: CALL_OW 277
// if Difficulty > 2 then
8159: LD_OWVAR 67
8163: PUSH
8164: LD_INT 2
8166: GREATER
8167: IFFALSE 8285
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
8169: LD_ADDR_VAR 0 4
8173: PUSH
8174: LD_INT 99
8176: PUSH
8177: LD_INT 130
8179: PUSH
8180: LD_INT 2
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 121
8190: PUSH
8191: LD_INT 127
8193: PUSH
8194: LD_INT 4
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 117
8204: PUSH
8205: LD_INT 121
8207: PUSH
8208: LD_INT 4
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: LIST
8220: ST_TO_ADDR
// for i in tmp do
8221: LD_ADDR_VAR 0 2
8225: PUSH
8226: LD_VAR 0 4
8230: PUSH
8231: FOR_IN
8232: IFFALSE 8283
// begin bc_type := b_turret ;
8234: LD_ADDR_OWVAR 42
8238: PUSH
8239: LD_INT 33
8241: ST_TO_ADDR
// bc_level := 6 ;
8242: LD_ADDR_OWVAR 43
8246: PUSH
8247: LD_INT 6
8249: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
8250: LD_VAR 0 2
8254: PUSH
8255: LD_INT 1
8257: ARRAY
8258: PPUSH
8259: LD_VAR 0 2
8263: PUSH
8264: LD_INT 2
8266: ARRAY
8267: PPUSH
8268: LD_VAR 0 2
8272: PUSH
8273: LD_INT 3
8275: ARRAY
8276: PPUSH
8277: CALL_OW 47
// end ;
8281: GO 8231
8283: POP
8284: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
8285: LD_ADDR_VAR 0 4
8289: PUSH
8290: LD_INT 22
8292: PUSH
8293: LD_INT 3
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 2
8302: PUSH
8303: LD_INT 30
8305: PUSH
8306: LD_INT 32
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PUSH
8313: LD_INT 30
8315: PUSH
8316: LD_INT 33
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PPUSH
8332: CALL_OW 69
8336: ST_TO_ADDR
// for i in tmp do
8337: LD_ADDR_VAR 0 2
8341: PUSH
8342: LD_VAR 0 4
8346: PUSH
8347: FOR_IN
8348: IFFALSE 8380
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
8350: LD_VAR 0 2
8354: PPUSH
8355: LD_VAR 0 5
8359: PUSH
8360: LD_INT 1
8362: PPUSH
8363: LD_VAR 0 5
8367: PPUSH
8368: CALL_OW 12
8372: ARRAY
8373: PPUSH
8374: CALL_OW 431
8378: GO 8347
8380: POP
8381: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
8382: LD_ADDR_VAR 0 2
8386: PUSH
8387: LD_INT 22
8389: PUSH
8390: LD_INT 3
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_INT 30
8399: PUSH
8400: LD_INT 32
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PPUSH
8411: CALL_OW 69
8415: PUSH
8416: FOR_IN
8417: IFFALSE 8466
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8419: LD_INT 0
8421: PPUSH
8422: LD_INT 5
8424: PUSH
8425: LD_INT 6
8427: PUSH
8428: LD_INT 7
8430: PUSH
8431: LD_INT 8
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: PUSH
8440: LD_OWVAR 67
8444: ARRAY
8445: PPUSH
8446: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8450: CALL_OW 44
8454: PPUSH
8455: LD_VAR 0 2
8459: PPUSH
8460: CALL_OW 52
// end ;
8464: GO 8416
8466: POP
8467: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
8468: LD_ADDR_VAR 0 2
8472: PUSH
8473: LD_INT 22
8475: PUSH
8476: LD_INT 3
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PUSH
8483: LD_INT 30
8485: PUSH
8486: LD_INT 5
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PPUSH
8497: CALL_OW 69
8501: PUSH
8502: FOR_IN
8503: IFFALSE 8593
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
8505: LD_ADDR_VAR 0 3
8509: PUSH
8510: DOUBLE
8511: LD_INT 1
8513: DEC
8514: ST_TO_ADDR
8515: LD_INT 2
8517: PUSH
8518: LD_INT 2
8520: PUSH
8521: LD_INT 3
8523: PUSH
8524: LD_INT 3
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: PUSH
8533: LD_OWVAR 67
8537: ARRAY
8538: PUSH
8539: FOR_TO
8540: IFFALSE 8589
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8542: LD_INT 0
8544: PPUSH
8545: LD_INT 5
8547: PUSH
8548: LD_INT 6
8550: PUSH
8551: LD_INT 7
8553: PUSH
8554: LD_INT 8
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: PUSH
8563: LD_OWVAR 67
8567: ARRAY
8568: PPUSH
8569: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8573: CALL_OW 44
8577: PPUSH
8578: LD_VAR 0 2
8582: PPUSH
8583: CALL_OW 52
// end ;
8587: GO 8539
8589: POP
8590: POP
// end ;
8591: GO 8502
8593: POP
8594: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
8595: LD_ADDR_VAR 0 2
8599: PUSH
8600: DOUBLE
8601: LD_INT 1
8603: DEC
8604: ST_TO_ADDR
8605: LD_INT 3
8607: PUSH
8608: LD_INT 4
8610: PUSH
8611: LD_INT 5
8613: PUSH
8614: LD_INT 5
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: PUSH
8623: LD_OWVAR 67
8627: ARRAY
8628: PUSH
8629: FOR_TO
8630: IFFALSE 8677
// begin PrepareEngineer ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8632: LD_INT 0
8634: PPUSH
8635: LD_INT 5
8637: PUSH
8638: LD_INT 6
8640: PUSH
8641: LD_INT 7
8643: PUSH
8644: LD_INT 8
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: PUSH
8653: LD_OWVAR 67
8657: ARRAY
8658: PPUSH
8659: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
8663: CALL_OW 44
8667: PPUSH
8668: LD_INT 28
8670: PPUSH
8671: CALL_OW 52
// end ;
8675: GO 8629
8677: POP
8678: POP
// for i := 1 to 2 do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: DOUBLE
8685: LD_INT 1
8687: DEC
8688: ST_TO_ADDR
8689: LD_INT 2
8691: PUSH
8692: FOR_TO
8693: IFFALSE 8727
// begin PrepareScientist ( false , 6 ) ;
8695: LD_INT 0
8697: PPUSH
8698: LD_INT 6
8700: PPUSH
8701: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
8705: CALL_OW 44
8709: PPUSH
8710: LD_INT 81
8712: PPUSH
8713: LD_INT 93
8715: PPUSH
8716: CALL_OW 428
8720: PPUSH
8721: CALL_OW 52
// end ;
8725: GO 8692
8727: POP
8728: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
8729: LD_INT 22
8731: PPUSH
8732: LD_INT 1
8734: PPUSH
8735: LD_INT 3
8737: PPUSH
8738: LD_INT 51
8740: PPUSH
8741: LD_INT 100
8743: PPUSH
8744: CALL 41235 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
8748: CALL_OW 45
8752: PPUSH
8753: LD_INT 91
8755: PPUSH
8756: LD_INT 94
8758: PPUSH
8759: LD_INT 3
8761: PPUSH
8762: LD_INT 0
8764: PPUSH
8765: CALL_OW 50
// for i := 1 to 2 do
8769: LD_ADDR_VAR 0 2
8773: PUSH
8774: DOUBLE
8775: LD_INT 1
8777: DEC
8778: ST_TO_ADDR
8779: LD_INT 2
8781: PUSH
8782: FOR_TO
8783: IFFALSE 8827
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
8785: LD_INT 22
8787: PPUSH
8788: LD_INT 1
8790: PPUSH
8791: LD_INT 3
8793: PPUSH
8794: LD_INT 52
8796: PPUSH
8797: LD_INT 100
8799: PPUSH
8800: CALL 41235 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
8804: CALL_OW 45
8808: PPUSH
8809: LD_INT 91
8811: PPUSH
8812: LD_INT 94
8814: PPUSH
8815: LD_INT 4
8817: PPUSH
8818: LD_INT 0
8820: PPUSH
8821: CALL_OW 50
// end ;
8825: GO 8782
8827: POP
8828: POP
// end ;
8829: LD_VAR 0 1
8833: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
8834: LD_INT 0
8836: PPUSH
8837: PPUSH
8838: PPUSH
8839: PPUSH
8840: PPUSH
// uc_side := 3 ;
8841: LD_ADDR_OWVAR 20
8845: PUSH
8846: LD_INT 3
8848: ST_TO_ADDR
// uc_nation := 3 ;
8849: LD_ADDR_OWVAR 21
8853: PUSH
8854: LD_INT 3
8856: ST_TO_ADDR
// for i := 1 to 4 do
8857: LD_ADDR_VAR 0 2
8861: PUSH
8862: DOUBLE
8863: LD_INT 1
8865: DEC
8866: ST_TO_ADDR
8867: LD_INT 4
8869: PUSH
8870: FOR_TO
8871: IFFALSE 8998
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
8873: LD_INT 22
8875: PPUSH
8876: LD_INT 1
8878: PPUSH
8879: LD_INT 1
8881: PPUSH
8882: LD_INT 42
8884: PUSH
8885: LD_INT 43
8887: PUSH
8888: LD_INT 44
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: PUSH
8896: LD_INT 1
8898: PPUSH
8899: LD_INT 3
8901: PPUSH
8902: CALL_OW 12
8906: ARRAY
8907: PPUSH
8908: LD_INT 40
8910: PPUSH
8911: CALL 41235 0 5
// veh := CreateVehicle ;
8915: LD_ADDR_VAR 0 4
8919: PUSH
8920: CALL_OW 45
8924: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
8925: LD_VAR 0 4
8929: PPUSH
8930: LD_INT 5
8932: PPUSH
8933: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
8937: LD_VAR 0 4
8941: PPUSH
8942: LD_INT 7
8944: PPUSH
8945: LD_INT 0
8947: PPUSH
8948: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
8952: LD_INT 0
8954: PPUSH
8955: LD_INT 5
8957: PPUSH
8958: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8962: CALL_OW 44
8966: PPUSH
8967: LD_VAR 0 4
8971: PPUSH
8972: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
8976: LD_ADDR_VAR 0 5
8980: PUSH
8981: LD_VAR 0 5
8985: PPUSH
8986: LD_VAR 0 4
8990: PPUSH
8991: CALL 73052 0 2
8995: ST_TO_ADDR
// end ;
8996: GO 8870
8998: POP
8999: POP
// for i := 1 to 3 do
9000: LD_ADDR_VAR 0 2
9004: PUSH
9005: DOUBLE
9006: LD_INT 1
9008: DEC
9009: ST_TO_ADDR
9010: LD_INT 3
9012: PUSH
9013: FOR_TO
9014: IFFALSE 9141
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9016: LD_INT 22
9018: PPUSH
9019: LD_INT 1
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: LD_INT 42
9027: PUSH
9028: LD_INT 43
9030: PUSH
9031: LD_INT 44
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 1
9041: PPUSH
9042: LD_INT 3
9044: PPUSH
9045: CALL_OW 12
9049: ARRAY
9050: PPUSH
9051: LD_INT 40
9053: PPUSH
9054: CALL 41235 0 5
// veh := CreateVehicle ;
9058: LD_ADDR_VAR 0 4
9062: PUSH
9063: CALL_OW 45
9067: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9068: LD_VAR 0 4
9072: PPUSH
9073: LD_INT 5
9075: PPUSH
9076: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
9080: LD_VAR 0 4
9084: PPUSH
9085: LD_INT 8
9087: PPUSH
9088: LD_INT 0
9090: PPUSH
9091: CALL_OW 49
// PrepareMechanic ( false , 0 ) ;
9095: LD_INT 0
9097: PPUSH
9098: LD_INT 0
9100: PPUSH
9101: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9105: CALL_OW 44
9109: PPUSH
9110: LD_VAR 0 4
9114: PPUSH
9115: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9119: LD_ADDR_VAR 0 5
9123: PUSH
9124: LD_VAR 0 5
9128: PPUSH
9129: LD_VAR 0 4
9133: PPUSH
9134: CALL 73052 0 2
9138: ST_TO_ADDR
// end ;
9139: GO 9013
9141: POP
9142: POP
// for i := 1 to 2 do
9143: LD_ADDR_VAR 0 2
9147: PUSH
9148: DOUBLE
9149: LD_INT 1
9151: DEC
9152: ST_TO_ADDR
9153: LD_INT 2
9155: PUSH
9156: FOR_TO
9157: IFFALSE 9216
// begin PrepareSoldier ( false , 5 ) ;
9159: LD_INT 0
9161: PPUSH
9162: LD_INT 5
9164: PPUSH
9165: CALL_OW 381
// un := CreateHuman ;
9169: LD_ADDR_VAR 0 3
9173: PUSH
9174: CALL_OW 44
9178: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
9179: LD_VAR 0 3
9183: PPUSH
9184: LD_INT 8
9186: PPUSH
9187: LD_INT 0
9189: PPUSH
9190: CALL_OW 49
// tmp := Join ( tmp , un ) ;
9194: LD_ADDR_VAR 0 5
9198: PUSH
9199: LD_VAR 0 5
9203: PPUSH
9204: LD_VAR 0 3
9208: PPUSH
9209: CALL 73052 0 2
9213: ST_TO_ADDR
// end ;
9214: GO 9156
9216: POP
9217: POP
// for i in tmp do
9218: LD_ADDR_VAR 0 2
9222: PUSH
9223: LD_VAR 0 5
9227: PUSH
9228: FOR_IN
9229: IFFALSE 9248
// ComAgressiveMove ( i , 51 , 16 ) ;
9231: LD_VAR 0 2
9235: PPUSH
9236: LD_INT 51
9238: PPUSH
9239: LD_INT 16
9241: PPUSH
9242: CALL_OW 114
9246: GO 9228
9248: POP
9249: POP
// end ;
9250: LD_VAR 0 1
9254: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
9255: LD_EXP 29
9259: IFFALSE 9813
9261: GO 9263
9263: DISABLE
9264: LD_INT 0
9266: PPUSH
9267: PPUSH
9268: PPUSH
// begin enable ;
9269: ENABLE
// if not ruMobile then
9270: LD_EXP 29
9274: NOT
9275: IFFALSE 9279
// exit ;
9277: GO 9813
// for i in ruMobile do
9279: LD_ADDR_VAR 0 1
9283: PUSH
9284: LD_EXP 29
9288: PUSH
9289: FOR_IN
9290: IFFALSE 9811
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
9292: LD_VAR 0 1
9296: PPUSH
9297: CALL_OW 302
9301: NOT
9302: PUSH
9303: LD_VAR 0 1
9307: PPUSH
9308: CALL_OW 255
9312: PUSH
9313: LD_INT 3
9315: NONEQUAL
9316: OR
9317: IFFALSE 9337
// begin ruMobile := ruMobile diff i ;
9319: LD_ADDR_EXP 29
9323: PUSH
9324: LD_EXP 29
9328: PUSH
9329: LD_VAR 0 1
9333: DIFF
9334: ST_TO_ADDR
// continue ;
9335: GO 9289
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
9337: LD_VAR 0 1
9341: PPUSH
9342: CALL_OW 110
9346: NOT
9347: PUSH
9348: LD_VAR 0 1
9352: PPUSH
9353: CALL_OW 110
9357: PUSH
9358: LD_INT 0
9360: EQUAL
9361: OR
9362: IFFALSE 9477
// begin if GetFuel ( i ) < 50 then
9364: LD_VAR 0 1
9368: PPUSH
9369: CALL_OW 261
9373: PUSH
9374: LD_INT 50
9376: LESS
9377: IFFALSE 9436
// begin ComMoveXY ( i , 93 , 100 ) ;
9379: LD_VAR 0 1
9383: PPUSH
9384: LD_INT 93
9386: PPUSH
9387: LD_INT 100
9389: PPUSH
9390: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9394: LD_INT 35
9396: PPUSH
9397: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
9401: LD_VAR 0 1
9405: PPUSH
9406: LD_INT 93
9408: PPUSH
9409: LD_INT 100
9411: PPUSH
9412: CALL_OW 297
9416: PUSH
9417: LD_INT 4
9419: LESS
9420: IFFALSE 9394
// SetFuel ( i , 100 ) ;
9422: LD_VAR 0 1
9426: PPUSH
9427: LD_INT 100
9429: PPUSH
9430: CALL_OW 240
// end else
9434: GO 9477
// if not IsInArea ( i , ruParkingArea ) then
9436: LD_VAR 0 1
9440: PPUSH
9441: LD_INT 10
9443: PPUSH
9444: CALL_OW 308
9448: NOT
9449: IFFALSE 9465
// ComMoveToArea ( i , ruParkingArea ) else
9451: LD_VAR 0 1
9455: PPUSH
9456: LD_INT 10
9458: PPUSH
9459: CALL_OW 113
9463: GO 9477
// SetTag ( i , 1 ) ;
9465: LD_VAR 0 1
9469: PPUSH
9470: LD_INT 1
9472: PPUSH
9473: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
9477: LD_VAR 0 1
9481: PPUSH
9482: CALL_OW 110
9486: PUSH
9487: LD_INT 1
9489: EQUAL
9490: IFFALSE 9620
// begin if GetLives ( i ) < 1000 then
9492: LD_VAR 0 1
9496: PPUSH
9497: CALL_OW 256
9501: PUSH
9502: LD_INT 1000
9504: LESS
9505: IFFALSE 9597
// begin if not IsDrivenBy ( i ) then
9507: LD_VAR 0 1
9511: PPUSH
9512: CALL_OW 311
9516: NOT
9517: IFFALSE 9521
// continue ;
9519: GO 9289
// mech := IsDrivenBy ( i ) ;
9521: LD_ADDR_VAR 0 2
9525: PUSH
9526: LD_VAR 0 1
9530: PPUSH
9531: CALL_OW 311
9535: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9536: LD_VAR 0 2
9540: PPUSH
9541: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9545: LD_VAR 0 2
9549: PPUSH
9550: LD_VAR 0 1
9554: PPUSH
9555: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9559: LD_INT 35
9561: PPUSH
9562: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9566: LD_VAR 0 1
9570: PPUSH
9571: CALL_OW 256
9575: PUSH
9576: LD_INT 1000
9578: EQUAL
9579: IFFALSE 9559
// ComEnterUnit ( mech , i ) ;
9581: LD_VAR 0 2
9585: PPUSH
9586: LD_VAR 0 1
9590: PPUSH
9591: CALL_OW 120
// end else
9595: GO 9620
// if IsDrivenBy ( i ) then
9597: LD_VAR 0 1
9601: PPUSH
9602: CALL_OW 311
9606: IFFALSE 9620
// SetTag ( i , 2 ) ;
9608: LD_VAR 0 1
9612: PPUSH
9613: LD_INT 2
9615: PPUSH
9616: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
9620: LD_VAR 0 1
9624: PPUSH
9625: CALL_OW 110
9629: PUSH
9630: LD_INT 2
9632: EQUAL
9633: IFFALSE 9809
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
9635: LD_ADDR_VAR 0 3
9639: PUSH
9640: LD_INT 11
9642: PPUSH
9643: LD_INT 81
9645: PUSH
9646: LD_INT 3
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PPUSH
9653: CALL_OW 70
9657: ST_TO_ADDR
// if GetLives ( i ) < 650 then
9658: LD_VAR 0 1
9662: PPUSH
9663: CALL_OW 256
9667: PUSH
9668: LD_INT 650
9670: LESS
9671: IFFALSE 9696
// begin ComStop ( i ) ;
9673: LD_VAR 0 1
9677: PPUSH
9678: CALL_OW 141
// SetTag ( i , 0 ) ;
9682: LD_VAR 0 1
9686: PPUSH
9687: LD_INT 0
9689: PPUSH
9690: CALL_OW 109
// continue ;
9694: GO 9289
// end ; if enemy then
9696: LD_VAR 0 3
9700: IFFALSE 9740
// begin if not HasTask ( i ) then
9702: LD_VAR 0 1
9706: PPUSH
9707: CALL_OW 314
9711: NOT
9712: IFFALSE 9738
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9714: LD_VAR 0 1
9718: PPUSH
9719: LD_VAR 0 3
9723: PPUSH
9724: LD_VAR 0 1
9728: PPUSH
9729: CALL_OW 74
9733: PPUSH
9734: CALL_OW 115
// end else
9738: GO 9809
// if ruMobile > 2 then
9740: LD_EXP 29
9744: PUSH
9745: LD_INT 2
9747: GREATER
9748: IFFALSE 9809
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
9750: LD_ADDR_VAR 0 3
9754: PUSH
9755: LD_INT 81
9757: PUSH
9758: LD_INT 3
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PPUSH
9765: CALL_OW 69
9769: ST_TO_ADDR
// if enemy then
9770: LD_VAR 0 3
9774: IFFALSE 9809
// AgressiveMove ( i , [ [ 103 , 83 ] , [ 80 , 56 ] ] ) ;
9776: LD_VAR 0 1
9780: PPUSH
9781: LD_INT 103
9783: PUSH
9784: LD_INT 83
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: LD_INT 80
9793: PUSH
9794: LD_INT 56
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PPUSH
9805: CALL 75648 0 2
// end ; end ; end ;
9809: GO 9289
9811: POP
9812: POP
// end ;
9813: PPOPN 3
9815: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
9816: LD_INT 3
9818: PUSH
9819: LD_INT 22
9821: PUSH
9822: LD_INT 1
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 32
9835: PUSH
9836: LD_INT 1
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PPUSH
9847: CALL_OW 69
9851: IFFALSE 9935
9853: GO 9855
9855: DISABLE
9856: LD_INT 0
9858: PPUSH
// begin enable ;
9859: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
9860: LD_ADDR_VAR 0 1
9864: PUSH
9865: LD_INT 3
9867: PUSH
9868: LD_INT 22
9870: PUSH
9871: LD_INT 1
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 32
9884: PUSH
9885: LD_INT 1
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PPUSH
9896: CALL_OW 69
9900: PUSH
9901: FOR_IN
9902: IFFALSE 9933
// if GetFuel ( i ) < 3 then
9904: LD_VAR 0 1
9908: PPUSH
9909: CALL_OW 261
9913: PUSH
9914: LD_INT 3
9916: LESS
9917: IFFALSE 9931
// SetFuel ( i , 3 ) ;
9919: LD_VAR 0 1
9923: PPUSH
9924: LD_INT 3
9926: PPUSH
9927: CALL_OW 240
9931: GO 9901
9933: POP
9934: POP
// end ;
9935: PPOPN 1
9937: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
9938: LD_INT 28
9940: PPUSH
9941: CALL_OW 302
9945: IFFALSE 10784
9947: GO 9949
9949: DISABLE
9950: LD_INT 0
9952: PPUSH
9953: PPUSH
9954: PPUSH
9955: PPUSH
9956: PPUSH
9957: PPUSH
9958: PPUSH
9959: PPUSH
// begin enable ;
9960: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
9961: LD_ADDR_VAR 0 3
9965: PUSH
9966: LD_INT 12
9968: PPUSH
9969: LD_INT 3
9971: PUSH
9972: LD_INT 24
9974: PUSH
9975: LD_INT 1000
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: LD_INT 21
9988: PUSH
9989: LD_INT 3
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PPUSH
10000: CALL_OW 70
10004: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10005: LD_ADDR_VAR 0 4
10009: PUSH
10010: LD_INT 22
10012: PUSH
10013: LD_INT 3
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: LD_INT 25
10022: PUSH
10023: LD_INT 2
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PPUSH
10034: CALL_OW 69
10038: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
10039: LD_ADDR_VAR 0 5
10043: PUSH
10044: LD_INT 22
10046: PUSH
10047: LD_INT 3
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 34
10056: PUSH
10057: LD_INT 52
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PPUSH
10068: CALL_OW 69
10072: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
10073: LD_ADDR_VAR 0 7
10077: PUSH
10078: LD_INT 22
10080: PUSH
10081: LD_INT 3
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 25
10090: PUSH
10091: LD_INT 4
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PPUSH
10102: CALL_OW 69
10106: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
10107: LD_ADDR_VAR 0 8
10111: PUSH
10112: LD_INT 81
10114: PPUSH
10115: LD_INT 93
10117: PPUSH
10118: CALL_OW 428
10122: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
10123: LD_VAR 0 7
10127: PUSH
10128: LD_VAR 0 4
10132: PPUSH
10133: LD_INT 120
10135: PUSH
10136: LD_INT 2
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PPUSH
10143: CALL_OW 72
10147: AND
10148: IFFALSE 10161
// ComExitAll ( sci ) else
10150: LD_VAR 0 7
10154: PPUSH
10155: CALL 73523 0 1
10159: GO 10234
// if sci then
10161: LD_VAR 0 7
10165: IFFALSE 10234
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
10167: LD_VAR 0 7
10171: PPUSH
10172: LD_INT 3
10174: PUSH
10175: LD_INT 54
10177: PUSH
10178: EMPTY
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PPUSH
10185: CALL_OW 72
10189: PUSH
10190: LD_VAR 0 8
10194: PPUSH
10195: CALL_OW 302
10199: AND
10200: IFFALSE 10234
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
10202: LD_VAR 0 7
10206: PPUSH
10207: LD_INT 3
10209: PUSH
10210: LD_INT 54
10212: PUSH
10213: EMPTY
10214: LIST
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PPUSH
10220: CALL_OW 72
10224: PPUSH
10225: LD_VAR 0 8
10229: PPUSH
10230: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
10234: LD_VAR 0 5
10238: PPUSH
10239: LD_INT 50
10241: PUSH
10242: EMPTY
10243: LIST
10244: PPUSH
10245: CALL_OW 72
10249: PUSH
10250: LD_VAR 0 3
10254: AND
10255: IFFALSE 10286
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
10257: LD_VAR 0 5
10261: PPUSH
10262: LD_INT 50
10264: PUSH
10265: EMPTY
10266: LIST
10267: PPUSH
10268: CALL_OW 72
10272: PPUSH
10273: LD_VAR 0 3
10277: PUSH
10278: LD_INT 1
10280: ARRAY
10281: PPUSH
10282: CALL_OW 130
// if eng then
10286: LD_VAR 0 4
10290: IFFALSE 10784
// begin for i in eng do
10292: LD_ADDR_VAR 0 1
10296: PUSH
10297: LD_VAR 0 4
10301: PUSH
10302: FOR_IN
10303: IFFALSE 10782
// begin tag := GetTag ( i ) ;
10305: LD_ADDR_VAR 0 6
10309: PUSH
10310: LD_VAR 0 1
10314: PPUSH
10315: CALL_OW 110
10319: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
10320: LD_VAR 0 3
10324: NOT
10325: PUSH
10326: LD_EXP 30
10330: NOT
10331: AND
10332: PUSH
10333: LD_VAR 0 6
10337: PUSH
10338: LD_INT 1
10340: EQUAL
10341: AND
10342: IFFALSE 10368
// begin SetTag ( i , 0 ) ;
10344: LD_VAR 0 1
10348: PPUSH
10349: LD_INT 0
10351: PPUSH
10352: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
10356: LD_VAR 0 1
10360: PPUSH
10361: LD_INT 28
10363: PPUSH
10364: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
10368: LD_VAR 0 3
10372: PUSH
10373: LD_EXP 30
10377: OR
10378: PUSH
10379: LD_VAR 0 6
10383: PUSH
10384: LD_INT 0
10386: EQUAL
10387: AND
10388: IFFALSE 10402
// SetTag ( i , 1 ) ;
10390: LD_VAR 0 1
10394: PPUSH
10395: LD_INT 1
10397: PPUSH
10398: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
10402: LD_VAR 0 1
10406: PPUSH
10407: CALL_OW 310
10411: PUSH
10412: LD_VAR 0 6
10416: PUSH
10417: LD_INT 1
10419: EQUAL
10420: AND
10421: IFFALSE 10432
// ComExit ( i ) ;
10423: LD_VAR 0 1
10427: PPUSH
10428: CALL 73440 0 1
// if GetLives ( i ) < 500 and tag = 1 then
10432: LD_VAR 0 1
10436: PPUSH
10437: CALL_OW 256
10441: PUSH
10442: LD_INT 500
10444: LESS
10445: PUSH
10446: LD_VAR 0 6
10450: PUSH
10451: LD_INT 1
10453: EQUAL
10454: AND
10455: IFFALSE 10469
// SetTag ( i , 2 ) ;
10457: LD_VAR 0 1
10461: PPUSH
10462: LD_INT 2
10464: PPUSH
10465: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
10469: LD_VAR 0 1
10473: PPUSH
10474: CALL_OW 256
10478: PUSH
10479: LD_INT 1000
10481: EQUAL
10482: PUSH
10483: LD_VAR 0 6
10487: PUSH
10488: LD_INT 2
10490: EQUAL
10491: AND
10492: IFFALSE 10506
// SetTag ( i , 1 ) ;
10494: LD_VAR 0 1
10498: PPUSH
10499: LD_INT 1
10501: PPUSH
10502: CALL_OW 109
// if tag = 2 then
10506: LD_VAR 0 6
10510: PUSH
10511: LD_INT 2
10513: EQUAL
10514: IFFALSE 10561
// begin if GetDistUnitXY ( i , 84 , 93 ) > 6 then
10516: LD_VAR 0 1
10520: PPUSH
10521: LD_INT 84
10523: PPUSH
10524: LD_INT 93
10526: PPUSH
10527: CALL_OW 297
10531: PUSH
10532: LD_INT 6
10534: GREATER
10535: IFFALSE 10561
// begin ComMoveXY ( i , 84 , 93 ) ;
10537: LD_VAR 0 1
10541: PPUSH
10542: LD_INT 84
10544: PPUSH
10545: LD_INT 93
10547: PPUSH
10548: CALL_OW 111
// AddComHold ( i ) ;
10552: LD_VAR 0 1
10556: PPUSH
10557: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
10561: LD_VAR 0 1
10565: PPUSH
10566: LD_INT 11
10568: PPUSH
10569: CALL_OW 308
10573: IFFALSE 10587
// ComMoveToArea ( i , ruBaseArea ) ;
10575: LD_VAR 0 1
10579: PPUSH
10580: LD_INT 12
10582: PPUSH
10583: CALL_OW 113
// if tag = 1 then
10587: LD_VAR 0 6
10591: PUSH
10592: LD_INT 1
10594: EQUAL
10595: IFFALSE 10780
// begin if b then
10597: LD_VAR 0 3
10601: IFFALSE 10629
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
10603: LD_VAR 0 1
10607: PPUSH
10608: LD_VAR 0 3
10612: PPUSH
10613: LD_VAR 0 1
10617: PPUSH
10618: CALL_OW 74
10622: PPUSH
10623: CALL_OW 130
10627: GO 10780
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
10629: LD_EXP 30
10633: PUSH
10634: LD_INT 11
10636: PPUSH
10637: LD_INT 81
10639: PUSH
10640: LD_INT 3
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PPUSH
10647: CALL_OW 70
10651: PUSH
10652: LD_INT 0
10654: EQUAL
10655: AND
10656: PUSH
10657: LD_INT 28
10659: PPUSH
10660: LD_EXP 30
10664: PUSH
10665: LD_INT 1
10667: ARRAY
10668: PUSH
10669: LD_INT 1
10671: ARRAY
10672: PPUSH
10673: LD_EXP 30
10677: PUSH
10678: LD_INT 1
10680: ARRAY
10681: PUSH
10682: LD_INT 2
10684: ARRAY
10685: PPUSH
10686: LD_EXP 30
10690: PUSH
10691: LD_INT 1
10693: ARRAY
10694: PUSH
10695: LD_INT 3
10697: ARRAY
10698: PPUSH
10699: LD_EXP 30
10703: PUSH
10704: LD_INT 1
10706: ARRAY
10707: PUSH
10708: LD_INT 4
10710: ARRAY
10711: PPUSH
10712: CALL 49460 0 5
10716: AND
10717: IFFALSE 10780
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
10719: LD_VAR 0 1
10723: PPUSH
10724: LD_EXP 30
10728: PUSH
10729: LD_INT 1
10731: ARRAY
10732: PUSH
10733: LD_INT 1
10735: ARRAY
10736: PPUSH
10737: LD_EXP 30
10741: PUSH
10742: LD_INT 1
10744: ARRAY
10745: PUSH
10746: LD_INT 2
10748: ARRAY
10749: PPUSH
10750: LD_EXP 30
10754: PUSH
10755: LD_INT 1
10757: ARRAY
10758: PUSH
10759: LD_INT 3
10761: ARRAY
10762: PPUSH
10763: LD_EXP 30
10767: PUSH
10768: LD_INT 1
10770: ARRAY
10771: PUSH
10772: LD_INT 4
10774: ARRAY
10775: PPUSH
10776: CALL_OW 145
// end ; end ;
10780: GO 10302
10782: POP
10783: POP
// end ; end ;
10784: PPOPN 8
10786: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
10787: LD_INT 0
10789: PPUSH
10790: PPUSH
10791: PPUSH
10792: PPUSH
10793: PPUSH
10794: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
10795: LD_ADDR_VAR 0 3
10799: PUSH
10800: DOUBLE
10801: LD_INT 1
10803: DEC
10804: ST_TO_ADDR
10805: LD_INT 3
10807: PUSH
10808: LD_INT 4
10810: PUSH
10811: LD_INT 5
10813: PUSH
10814: LD_INT 6
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: PUSH
10823: LD_OWVAR 67
10827: ARRAY
10828: PUSH
10829: LD_VAR 0 1
10833: PLUS
10834: PUSH
10835: FOR_TO
10836: IFFALSE 11091
// begin uc_side := 6 ;
10838: LD_ADDR_OWVAR 20
10842: PUSH
10843: LD_INT 6
10845: ST_TO_ADDR
// uc_nation := 3 ;
10846: LD_ADDR_OWVAR 21
10850: PUSH
10851: LD_INT 3
10853: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10854: LD_ADDR_VAR 0 6
10858: PUSH
10859: LD_INT 21
10861: PUSH
10862: LD_INT 22
10864: PUSH
10865: LD_INT 23
10867: PUSH
10868: LD_INT 24
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: PUSH
10877: LD_INT 1
10879: PPUSH
10880: LD_INT 4
10882: PPUSH
10883: CALL_OW 12
10887: ARRAY
10888: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
10889: LD_ADDR_VAR 0 7
10893: PUSH
10894: LD_INT 42
10896: PUSH
10897: LD_INT 44
10899: PUSH
10900: LD_INT 43
10902: PUSH
10903: LD_INT 46
10905: PUSH
10906: LD_INT 45
10908: PUSH
10909: LD_INT 46
10911: PUSH
10912: LD_INT 45
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: PUSH
10924: LD_OWVAR 67
10928: PUSH
10929: LD_INT 0
10931: PPUSH
10932: LD_INT 3
10934: PPUSH
10935: CALL_OW 12
10939: PLUS
10940: ARRAY
10941: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
10942: LD_VAR 0 6
10946: PUSH
10947: LD_INT 21
10949: PUSH
10950: LD_INT 22
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: IN
10957: PUSH
10958: LD_VAR 0 7
10962: PUSH
10963: LD_INT 46
10965: EQUAL
10966: AND
10967: IFFALSE 10996
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10969: LD_ADDR_VAR 0 7
10973: PUSH
10974: LD_INT 44
10976: PUSH
10977: LD_INT 45
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 1
10986: PPUSH
10987: LD_INT 2
10989: PPUSH
10990: CALL_OW 12
10994: ARRAY
10995: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
10996: LD_VAR 0 6
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: LD_INT 3
11006: PPUSH
11007: LD_VAR 0 7
11011: PPUSH
11012: LD_INT 90
11014: PPUSH
11015: CALL 41235 0 5
// un := CreateVehicle ;
11019: LD_ADDR_VAR 0 4
11023: PUSH
11024: CALL_OW 45
11028: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
11029: LD_VAR 0 4
11033: PPUSH
11034: LD_INT 140
11036: PPUSH
11037: LD_INT 146
11039: PPUSH
11040: LD_INT 0
11042: PPUSH
11043: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
11047: LD_VAR 0 4
11051: PPUSH
11052: LD_INT 131
11054: PPUSH
11055: LD_INT 128
11057: PPUSH
11058: CALL_OW 111
// wait ( 0 0$3 ) ;
11062: LD_INT 105
11064: PPUSH
11065: CALL_OW 67
// tmp := Join ( tmp , un ) ;
11069: LD_ADDR_VAR 0 5
11073: PUSH
11074: LD_VAR 0 5
11078: PPUSH
11079: LD_VAR 0 4
11083: PPUSH
11084: CALL 73052 0 2
11088: ST_TO_ADDR
// end ;
11089: GO 10835
11091: POP
11092: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
11093: LD_ADDR_EXP 31
11097: PUSH
11098: LD_EXP 31
11102: PPUSH
11103: LD_VAR 0 5
11107: PPUSH
11108: CALL 73089 0 2
11112: ST_TO_ADDR
// end ;
11113: LD_VAR 0 2
11117: RET
// every 0 0$2 trigger russianAttackers do
11118: LD_EXP 31
11122: IFFALSE 11183
11124: GO 11126
11126: DISABLE
// begin enable ;
11127: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] ] ) ;
11128: LD_EXP 31
11132: PPUSH
11133: LD_INT 126
11135: PUSH
11136: LD_INT 108
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 107
11145: PUSH
11146: LD_INT 85
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: LD_INT 82
11155: PUSH
11156: LD_INT 62
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 73
11165: PUSH
11166: LD_INT 46
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: PPUSH
11179: CALL 75648 0 2
// end ; end_of_file
11183: END
// on UnitDestroyed ( un ) do var tmp , chassis , weapon , btype ;
11184: LD_INT 0
11186: PPUSH
11187: PPUSH
11188: PPUSH
11189: PPUSH
// begin if un = JMM then
11190: LD_VAR 0 1
11194: PUSH
11195: LD_EXP 10
11199: EQUAL
11200: IFFALSE 11209
// YouLost ( JMM ) ;
11202: LD_STRING JMM
11204: PPUSH
11205: CALL_OW 104
// if GetSide ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
11209: LD_VAR 0 1
11213: PPUSH
11214: CALL_OW 255
11218: PUSH
11219: LD_INT 1
11221: EQUAL
11222: PUSH
11223: LD_VAR 0 1
11227: PPUSH
11228: CALL_OW 266
11232: PUSH
11233: LD_INT 0
11235: PUSH
11236: LD_INT 1
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: IN
11243: AND
11244: IFFALSE 11253
// YouLost ( Destroyed ) ;
11246: LD_STRING Destroyed
11248: PPUSH
11249: CALL_OW 104
// if un in ruMobile then
11253: LD_VAR 0 1
11257: PUSH
11258: LD_EXP 29
11262: IN
11263: IFFALSE 11281
// ruMobile := ruMobile diff un ;
11265: LD_ADDR_EXP 29
11269: PUSH
11270: LD_EXP 29
11274: PUSH
11275: LD_VAR 0 1
11279: DIFF
11280: ST_TO_ADDR
// if GetSide ( un ) = 3 then
11281: LD_VAR 0 1
11285: PPUSH
11286: CALL_OW 255
11290: PUSH
11291: LD_INT 3
11293: EQUAL
11294: IFFALSE 11814
// begin if GetType ( un ) = unit_building then
11296: LD_VAR 0 1
11300: PPUSH
11301: CALL_OW 247
11305: PUSH
11306: LD_INT 3
11308: EQUAL
11309: IFFALSE 11445
// begin btype := GetBType ( un ) ;
11311: LD_ADDR_VAR 0 5
11315: PUSH
11316: LD_VAR 0 1
11320: PPUSH
11321: CALL_OW 266
11325: ST_TO_ADDR
// if btype = b_warehouse then
11326: LD_VAR 0 5
11330: PUSH
11331: LD_INT 1
11333: EQUAL
11334: IFFALSE 11344
// btype := b_depot ;
11336: LD_ADDR_VAR 0 5
11340: PUSH
11341: LD_INT 0
11343: ST_TO_ADDR
// if btype = b_barracks then
11344: LD_VAR 0 5
11348: PUSH
11349: LD_INT 5
11351: EQUAL
11352: IFFALSE 11362
// btype := b_armoury ;
11354: LD_ADDR_VAR 0 5
11358: PUSH
11359: LD_INT 4
11361: ST_TO_ADDR
// if btype = b_lab_full then
11362: LD_VAR 0 5
11366: PUSH
11367: LD_INT 8
11369: EQUAL
11370: IFFALSE 11380
// btype := b_lab ;
11372: LD_ADDR_VAR 0 5
11376: PUSH
11377: LD_INT 6
11379: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
11380: LD_ADDR_EXP 30
11384: PUSH
11385: LD_EXP 30
11389: PPUSH
11390: LD_EXP 30
11394: PUSH
11395: LD_INT 1
11397: PLUS
11398: PPUSH
11399: LD_VAR 0 5
11403: PUSH
11404: LD_VAR 0 1
11408: PPUSH
11409: CALL_OW 250
11413: PUSH
11414: LD_VAR 0 1
11418: PPUSH
11419: CALL_OW 251
11423: PUSH
11424: LD_VAR 0 1
11428: PPUSH
11429: CALL_OW 254
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: PPUSH
11440: CALL_OW 1
11444: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
11445: LD_VAR 0 1
11449: PPUSH
11450: CALL_OW 247
11454: PUSH
11455: LD_INT 2
11457: EQUAL
11458: IFFALSE 11675
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
11460: LD_VAR 0 1
11464: PPUSH
11465: CALL_OW 264
11469: PUSH
11470: LD_INT 52
11472: PUSH
11473: LD_INT 51
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: IN
11480: IFFALSE 11510
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
11482: LD_INT 29
11484: PPUSH
11485: LD_INT 22
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: LD_INT 3
11493: PPUSH
11494: LD_VAR 0 1
11498: PPUSH
11499: CALL_OW 264
11503: PPUSH
11504: CALL_OW 185
// end else
11508: GO 11675
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11510: LD_ADDR_VAR 0 3
11514: PUSH
11515: LD_INT 21
11517: PUSH
11518: LD_INT 22
11520: PUSH
11521: LD_INT 23
11523: PUSH
11524: LD_INT 24
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 1
11535: PPUSH
11536: LD_INT 4
11538: PPUSH
11539: CALL_OW 12
11543: ARRAY
11544: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11545: LD_ADDR_VAR 0 4
11549: PUSH
11550: LD_INT 42
11552: PUSH
11553: LD_INT 44
11555: PUSH
11556: LD_INT 43
11558: PUSH
11559: LD_INT 46
11561: PUSH
11562: LD_INT 45
11564: PUSH
11565: LD_INT 46
11567: PUSH
11568: LD_INT 45
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: PUSH
11580: LD_OWVAR 67
11584: PUSH
11585: LD_INT 0
11587: PPUSH
11588: LD_INT 3
11590: PPUSH
11591: CALL_OW 12
11595: PLUS
11596: ARRAY
11597: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11598: LD_VAR 0 3
11602: PUSH
11603: LD_INT 21
11605: PUSH
11606: LD_INT 22
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: IN
11613: PUSH
11614: LD_VAR 0 4
11618: PUSH
11619: LD_INT 46
11621: EQUAL
11622: AND
11623: IFFALSE 11652
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11625: LD_ADDR_VAR 0 4
11629: PUSH
11630: LD_INT 44
11632: PUSH
11633: LD_INT 45
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 1
11642: PPUSH
11643: LD_INT 2
11645: PPUSH
11646: CALL_OW 12
11650: ARRAY
11651: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11652: LD_INT 29
11654: PPUSH
11655: LD_VAR 0 3
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: LD_VAR 0 4
11670: PPUSH
11671: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
11675: LD_VAR 0 1
11679: PPUSH
11680: CALL_OW 257
11684: PUSH
11685: LD_INT 3
11687: EQUAL
11688: IFFALSE 11814
// begin if ruMechCounter = 0 or not IsOk ( ruFac ) then
11690: LD_EXP 28
11694: PUSH
11695: LD_INT 0
11697: EQUAL
11698: PUSH
11699: LD_INT 29
11701: PPUSH
11702: CALL_OW 302
11706: NOT
11707: OR
11708: IFFALSE 11712
// exit ;
11710: GO 11814
// ruMechCounter := Dec ( ruMechCounter ) ;
11712: LD_ADDR_EXP 28
11716: PUSH
11717: LD_EXP 28
11721: PPUSH
11722: CALL 74427 0 1
11726: ST_TO_ADDR
// uc_side := 3 ;
11727: LD_ADDR_OWVAR 20
11731: PUSH
11732: LD_INT 3
11734: ST_TO_ADDR
// uc_nation := 3 ;
11735: LD_ADDR_OWVAR 21
11739: PUSH
11740: LD_INT 3
11742: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
11743: LD_INT 0
11745: PPUSH
11746: LD_INT 6
11748: PUSH
11749: LD_INT 7
11751: PUSH
11752: LD_INT 8
11754: PUSH
11755: LD_INT 9
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: PUSH
11764: LD_OWVAR 67
11768: ARRAY
11769: PPUSH
11770: CALL_OW 383
// tmp := CreateHuman ;
11774: LD_ADDR_VAR 0 2
11778: PUSH
11779: CALL_OW 44
11783: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
11784: LD_VAR 0 2
11788: PPUSH
11789: LD_INT 145
11791: PPUSH
11792: LD_INT 133
11794: PPUSH
11795: LD_INT 0
11797: PPUSH
11798: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
11802: LD_VAR 0 2
11806: PPUSH
11807: LD_INT 29
11809: PPUSH
11810: CALL_OW 120
// end ; end ; end ;
11814: PPOPN 5
11816: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
11817: LD_VAR 0 1
11821: PPUSH
11822: CALL_OW 255
11826: PUSH
11827: LD_INT 4
11829: EQUAL
11830: IFFALSE 11847
// ComMoveXY ( driver , 40 , 47 ) ;
11832: LD_VAR 0 1
11836: PPUSH
11837: LD_INT 40
11839: PPUSH
11840: LD_INT 47
11842: PPUSH
11843: CALL_OW 111
// if GetSide ( driver ) = 3 then
11847: LD_VAR 0 1
11851: PPUSH
11852: CALL_OW 255
11856: PUSH
11857: LD_INT 3
11859: EQUAL
11860: IFFALSE 12084
// begin ComMoveXY ( driver , 90 , 97 ) ;
11862: LD_VAR 0 1
11866: PPUSH
11867: LD_INT 90
11869: PPUSH
11870: LD_INT 97
11872: PPUSH
11873: CALL_OW 111
// if IsOk ( ruFac ) then
11877: LD_INT 29
11879: PPUSH
11880: CALL_OW 302
11884: IFFALSE 12008
// begin repeat wait ( 0 0$1 ) ;
11886: LD_INT 35
11888: PPUSH
11889: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
11893: LD_INT 29
11895: PPUSH
11896: CALL_OW 313
11900: PUSH
11901: LD_INT 6
11903: LESS
11904: PUSH
11905: LD_VAR 0 1
11909: PPUSH
11910: CALL_OW 301
11914: OR
11915: IFFALSE 11886
// if IsDead ( driver ) then
11917: LD_VAR 0 1
11921: PPUSH
11922: CALL_OW 301
11926: IFFALSE 11930
// exit ;
11928: GO 12084
// repeat wait ( 0 0$10 ) ;
11930: LD_INT 350
11932: PPUSH
11933: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
11937: LD_VAR 0 1
11941: PPUSH
11942: CALL_OW 314
11946: NOT
11947: PUSH
11948: LD_INT 29
11950: PPUSH
11951: CALL_OW 313
11955: PUSH
11956: LD_INT 6
11958: LESS
11959: AND
11960: IFFALSE 11974
// ComEnterUnit ( driver , ruFac ) ;
11962: LD_VAR 0 1
11966: PPUSH
11967: LD_INT 29
11969: PPUSH
11970: CALL_OW 120
// until not IsOk ( ruFac ) or IsDead ( driver ) or IsInUnit ( driver ) ;
11974: LD_INT 29
11976: PPUSH
11977: CALL_OW 302
11981: NOT
11982: PUSH
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL_OW 301
11992: OR
11993: PUSH
11994: LD_VAR 0 1
11998: PPUSH
11999: CALL_OW 310
12003: OR
12004: IFFALSE 11930
// end else
12006: GO 12084
// begin ComMoveXY ( driver , 142 , 148 ) ;
12008: LD_VAR 0 1
12012: PPUSH
12013: LD_INT 142
12015: PPUSH
12016: LD_INT 148
12018: PPUSH
12019: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12023: LD_INT 35
12025: PPUSH
12026: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
12030: LD_VAR 0 1
12034: PPUSH
12035: CALL_OW 301
12039: PUSH
12040: LD_VAR 0 1
12044: PPUSH
12045: LD_INT 142
12047: PPUSH
12048: LD_INT 148
12050: PPUSH
12051: CALL_OW 307
12055: OR
12056: IFFALSE 12023
// if IsAt ( driver , 142 , 148 ) then
12058: LD_VAR 0 1
12062: PPUSH
12063: LD_INT 142
12065: PPUSH
12066: LD_INT 148
12068: PPUSH
12069: CALL_OW 307
12073: IFFALSE 12084
// RemoveUnit ( driver ) ;
12075: LD_VAR 0 1
12079: PPUSH
12080: CALL_OW 64
// end ; end ; end ;
12084: PPOPN 4
12086: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
12087: LD_VAR 0 2
12091: PPUSH
12092: CALL_OW 257
12096: PUSH
12097: LD_INT 3
12099: EQUAL
12100: PUSH
12101: LD_VAR 0 1
12105: PPUSH
12106: CALL_OW 255
12110: PUSH
12111: LD_INT 3
12113: EQUAL
12114: AND
12115: PUSH
12116: LD_VAR 0 1
12120: PUSH
12121: LD_INT 29
12123: EQUAL
12124: AND
12125: IFFALSE 12139
// SetLives ( un , 1000 ) ;
12127: LD_VAR 0 2
12131: PPUSH
12132: LD_INT 1000
12134: PPUSH
12135: CALL_OW 234
// end ;
12139: PPOPN 2
12141: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
12142: LD_INT 0
12144: PPUSH
12145: PPUSH
// begin if GetSide ( b ) = 3 then
12146: LD_VAR 0 1
12150: PPUSH
12151: CALL_OW 255
12155: PUSH
12156: LD_INT 3
12158: EQUAL
12159: IFFALSE 12298
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
12161: LD_VAR 0 1
12165: PPUSH
12166: CALL_OW 266
12170: PUSH
12171: LD_INT 32
12173: PUSH
12174: LD_INT 5
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: IN
12181: IFFALSE 12298
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
12183: LD_ADDR_VAR 0 4
12187: PUSH
12188: LD_INT 22
12190: PUSH
12191: LD_INT 3
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PUSH
12198: LD_INT 50
12200: PUSH
12201: EMPTY
12202: LIST
12203: PUSH
12204: LD_INT 30
12206: PUSH
12207: LD_INT 5
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: PPUSH
12219: CALL_OW 69
12223: ST_TO_ADDR
// if not tmp then
12224: LD_VAR 0 4
12228: NOT
12229: IFFALSE 12248
// begin ComMoveXY ( un , 92 , 99 ) ;
12231: LD_VAR 0 2
12235: PPUSH
12236: LD_INT 92
12238: PPUSH
12239: LD_INT 99
12241: PPUSH
12242: CALL_OW 111
// exit ;
12246: GO 12298
// end ; for i in tmp do
12248: LD_ADDR_VAR 0 3
12252: PUSH
12253: LD_VAR 0 4
12257: PUSH
12258: FOR_IN
12259: IFFALSE 12296
// if UnitsInside ( i ) < 6 then
12261: LD_VAR 0 3
12265: PPUSH
12266: CALL_OW 313
12270: PUSH
12271: LD_INT 6
12273: LESS
12274: IFFALSE 12294
// begin ComEnterUnit ( un , i ) ;
12276: LD_VAR 0 2
12280: PPUSH
12281: LD_VAR 0 3
12285: PPUSH
12286: CALL_OW 120
// exit ;
12290: POP
12291: POP
12292: GO 12298
// end ;
12294: GO 12258
12296: POP
12297: POP
// end ; end ; end ;
12298: PPOPN 4
12300: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 and GetControl ( un ) = control_computer and not seenComputer then
12301: LD_VAR 0 1
12305: PPUSH
12306: CALL_OW 255
12310: PUSH
12311: LD_INT 3
12313: EQUAL
12314: PUSH
12315: LD_VAR 0 1
12319: PPUSH
12320: CALL_OW 263
12324: PUSH
12325: LD_INT 3
12327: EQUAL
12328: AND
12329: PUSH
12330: LD_EXP 6
12334: NOT
12335: AND
12336: IFFALSE 12355
// begin DialogSeenComputer ( un ) ;
12338: LD_VAR 0 1
12342: PPUSH
12343: CALL 15084 0 1
// seenComputer := true ;
12347: LD_ADDR_EXP 6
12351: PUSH
12352: LD_INT 1
12354: ST_TO_ADDR
// end ; end ;
12355: PPOPN 1
12357: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
12358: LD_INT 0
12360: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
12361: LD_VAR 0 1
12365: PPUSH
12366: LD_VAR 0 2
12370: PPUSH
12371: CALL 31853 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
12375: LD_VAR 0 1
12379: PPUSH
12380: CALL_OW 255
12384: PUSH
12385: LD_INT 3
12387: EQUAL
12388: PUSH
12389: LD_VAR 0 1
12393: PPUSH
12394: CALL_OW 263
12398: PUSH
12399: LD_INT 1
12401: EQUAL
12402: AND
12403: PUSH
12404: LD_VAR 0 1
12408: PPUSH
12409: CALL_OW 264
12413: PUSH
12414: LD_INT 42
12416: PUSH
12417: LD_INT 43
12419: PUSH
12420: LD_INT 44
12422: PUSH
12423: LD_INT 46
12425: PUSH
12426: LD_INT 45
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: IN
12436: AND
12437: IFFALSE 12455
// ruMobile := ruMobile union vehicle ;
12439: LD_ADDR_EXP 29
12443: PUSH
12444: LD_EXP 29
12448: PUSH
12449: LD_VAR 0 1
12453: UNION
12454: ST_TO_ADDR
// end ;
12455: PPOPN 3
12457: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
12458: LD_INT 0
12460: PPUSH
// begin if InArea ( x , y , ruCrates ) then
12461: LD_VAR 0 2
12465: PPUSH
12466: LD_VAR 0 3
12470: PPUSH
12471: LD_INT 13
12473: PPUSH
12474: CALL_OW 309
12478: IFFALSE 12549
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
12480: LD_ADDR_VAR 0 6
12484: PUSH
12485: LD_INT 22
12487: PUSH
12488: LD_INT 3
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 50
12497: PUSH
12498: EMPTY
12499: LIST
12500: PUSH
12501: LD_INT 34
12503: PUSH
12504: LD_INT 51
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: LIST
12515: PPUSH
12516: CALL_OW 69
12520: ST_TO_ADDR
// if not cargo then
12521: LD_VAR 0 6
12525: NOT
12526: IFFALSE 12530
// exit ;
12528: GO 12549
// AddComCollect ( cargo , x , y ) ;
12530: LD_VAR 0 6
12534: PPUSH
12535: LD_VAR 0 2
12539: PPUSH
12540: LD_VAR 0 3
12544: PPUSH
12545: CALL_OW 177
// end ; end ;
12549: PPOPN 6
12551: END
// on BuildingComplete ( b ) do var i , tmp ;
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
// begin if GetSide ( b ) = 3 then
12556: LD_VAR 0 1
12560: PPUSH
12561: CALL_OW 255
12565: PUSH
12566: LD_INT 3
12568: EQUAL
12569: IFFALSE 12784
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
12571: LD_ADDR_EXP 30
12575: PUSH
12576: LD_EXP 30
12580: PPUSH
12581: LD_INT 1
12583: PPUSH
12584: CALL_OW 3
12588: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
12589: LD_VAR 0 1
12593: PPUSH
12594: CALL_OW 266
12598: PUSH
12599: LD_INT 32
12601: PUSH
12602: LD_INT 33
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: IN
12609: IFFALSE 12784
// begin AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
12611: LD_VAR 0 1
12615: PPUSH
12616: LD_INT 46
12618: PUSH
12619: LD_INT 45
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: LD_INT 1
12628: PPUSH
12629: LD_INT 2
12631: PPUSH
12632: CALL_OW 12
12636: ARRAY
12637: PPUSH
12638: CALL_OW 208
// if GetBType ( b ) = b_bunker then
12642: LD_VAR 0 1
12646: PPUSH
12647: CALL_OW 266
12651: PUSH
12652: LD_INT 32
12654: EQUAL
12655: IFFALSE 12784
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_tag , 0 ] ] ) ;
12657: LD_ADDR_VAR 0 3
12661: PUSH
12662: LD_INT 22
12664: PUSH
12665: LD_INT 3
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 25
12674: PUSH
12675: LD_INT 1
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: LD_INT 120
12684: PUSH
12685: LD_INT 0
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: LIST
12696: PPUSH
12697: CALL_OW 69
12701: ST_TO_ADDR
// if tmp then
12702: LD_VAR 0 3
12706: IFFALSE 12784
// for i in tmp do
12708: LD_ADDR_VAR 0 2
12712: PUSH
12713: LD_VAR 0 3
12717: PUSH
12718: FOR_IN
12719: IFFALSE 12782
// if not IsInUnit ( i ) or GetBType ( IsInUnit ( i ) ) <> b_bunker then
12721: LD_VAR 0 2
12725: PPUSH
12726: CALL_OW 310
12730: NOT
12731: PUSH
12732: LD_VAR 0 2
12736: PPUSH
12737: CALL_OW 310
12741: PPUSH
12742: CALL_OW 266
12746: PUSH
12747: LD_INT 32
12749: NONEQUAL
12750: OR
12751: IFFALSE 12780
// begin ComExit ( i ) ;
12753: LD_VAR 0 2
12757: PPUSH
12758: CALL 73440 0 1
// AddComEnterUnit ( i , b ) ;
12762: LD_VAR 0 2
12766: PPUSH
12767: LD_VAR 0 1
12771: PPUSH
12772: CALL_OW 180
// exit ;
12776: POP
12777: POP
12778: GO 12784
// end ;
12780: GO 12718
12782: POP
12783: POP
// end ; end ; end ; end ; end_of_file
12784: PPOPN 3
12786: END
// export function Action ; var i , tmp , un , inUnit ; begin
12787: LD_INT 0
12789: PPUSH
12790: PPUSH
12791: PPUSH
12792: PPUSH
12793: PPUSH
// Video ( true ) ;
12794: LD_INT 1
12796: PPUSH
12797: CALL 73024 0 1
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
12801: LD_INT 50
12803: PPUSH
12804: LD_INT 12
12806: PPUSH
12807: LD_INT 1
12809: PPUSH
12810: LD_INT 56
12812: NEG
12813: PPUSH
12814: CALL 72938 0 4
// CenterOnXY ( 50 , 12 ) ;
12818: LD_INT 50
12820: PPUSH
12821: LD_INT 12
12823: PPUSH
12824: CALL_OW 84
// wait ( 0 0$3 ) ;
12828: LD_INT 105
12830: PPUSH
12831: CALL_OW 67
// PrepareStartRussianAttack ;
12835: CALL 8834 0 0
// CenterOnXY ( 66 , 47 ) ;
12839: LD_INT 66
12841: PPUSH
12842: LD_INT 47
12844: PPUSH
12845: CALL_OW 84
// wait ( 0 0$5 ) ;
12849: LD_INT 175
12851: PPUSH
12852: CALL_OW 67
// case gammaCommander of 1 :
12856: LD_EXP 9
12860: PUSH
12861: LD_INT 1
12863: DOUBLE
12864: EQUAL
12865: IFTRUE 12869
12867: GO 12884
12869: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
12870: LD_EXP 12
12874: PPUSH
12875: LD_STRING D1-Don-1
12877: PPUSH
12878: CALL_OW 88
12882: GO 12931
12884: LD_INT 2
12886: DOUBLE
12887: EQUAL
12888: IFTRUE 12892
12890: GO 12907
12892: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
12893: LD_EXP 11
12897: PPUSH
12898: LD_STRING D1-Brown-1
12900: PPUSH
12901: CALL_OW 88
12905: GO 12931
12907: LD_INT 3
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 12930
12915: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
12916: LD_EXP 20
12920: PPUSH
12921: LD_STRING D1-VanH-1
12923: PPUSH
12924: CALL_OW 88
12928: GO 12931
12930: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
12931: LD_ADDR_VAR 0 3
12935: PUSH
12936: LD_INT 22
12938: PUSH
12939: LD_INT 1
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 33
12948: PUSH
12949: LD_INT 2
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 61
12958: PUSH
12959: EMPTY
12960: LIST
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: PPUSH
12967: CALL_OW 69
12971: ST_TO_ADDR
// if tmp then
12972: LD_VAR 0 3
12976: IFFALSE 12993
// ComAgressiveMove ( tmp , 74 , 44 ) ;
12978: LD_VAR 0 3
12982: PPUSH
12983: LD_INT 74
12985: PPUSH
12986: LD_INT 44
12988: PPUSH
12989: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
12993: LD_ADDR_VAR 0 3
12997: PUSH
12998: LD_INT 22
13000: PUSH
13001: LD_INT 1
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: LD_INT 25
13010: PUSH
13011: LD_INT 1
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PPUSH
13022: CALL_OW 69
13026: PUSH
13027: LD_EXP 12
13031: PUSH
13032: LD_EXP 11
13036: PUSH
13037: LD_EXP 20
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: DIFF
13047: ST_TO_ADDR
// if tmp then
13048: LD_VAR 0 3
13052: IFFALSE 13130
// for i in tmp do
13054: LD_ADDR_VAR 0 2
13058: PUSH
13059: LD_VAR 0 3
13063: PUSH
13064: FOR_IN
13065: IFFALSE 13128
// begin inUnit := IsInUnit ( i ) ;
13067: LD_ADDR_VAR 0 5
13071: PUSH
13072: LD_VAR 0 2
13076: PPUSH
13077: CALL_OW 310
13081: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
13082: LD_VAR 0 5
13086: PUSH
13087: LD_VAR 0 5
13091: PPUSH
13092: CALL_OW 266
13096: PUSH
13097: LD_INT 32
13099: PUSH
13100: LD_INT 31
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: IN
13107: AND
13108: IFFALSE 13126
// tmp := tmp diff i ;
13110: LD_ADDR_VAR 0 3
13114: PUSH
13115: LD_VAR 0 3
13119: PUSH
13120: LD_VAR 0 2
13124: DIFF
13125: ST_TO_ADDR
// end ;
13126: GO 13064
13128: POP
13129: POP
// if tmp then
13130: LD_VAR 0 3
13134: IFFALSE 13224
// begin ComExitAll ( tmp ) ;
13136: LD_VAR 0 3
13140: PPUSH
13141: CALL 73523 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
13145: LD_VAR 0 3
13149: PPUSH
13150: LD_INT 74
13152: PPUSH
13153: LD_INT 44
13155: PPUSH
13156: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
13160: LD_ADDR_VAR 0 3
13164: PUSH
13165: LD_INT 22
13167: PUSH
13168: LD_INT 1
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 25
13177: PUSH
13178: LD_INT 4
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PPUSH
13189: CALL_OW 69
13193: ST_TO_ADDR
// if tmp then
13194: LD_VAR 0 3
13198: IFFALSE 13224
// begin ComExitAll ( tmp ) ;
13200: LD_VAR 0 3
13204: PPUSH
13205: CALL 73523 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
13209: LD_VAR 0 3
13213: PPUSH
13214: LD_INT 66
13216: PPUSH
13217: LD_INT 28
13219: PPUSH
13220: CALL_OW 171
// end ; end ; game_speed := 4 ;
13224: LD_ADDR_OWVAR 65
13228: PUSH
13229: LD_INT 4
13231: ST_TO_ADDR
// wait ( 0 0$2 ) ;
13232: LD_INT 70
13234: PPUSH
13235: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
13239: LD_EXP 24
13243: PPUSH
13244: LD_STRING D1-Har-1
13246: PPUSH
13247: CALL_OW 94
// case gammaCommander of 1 :
13251: LD_EXP 9
13255: PUSH
13256: LD_INT 1
13258: DOUBLE
13259: EQUAL
13260: IFTRUE 13264
13262: GO 13279
13264: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
13265: LD_EXP 12
13269: PPUSH
13270: LD_STRING D1-Don-2
13272: PPUSH
13273: CALL_OW 88
13277: GO 13326
13279: LD_INT 2
13281: DOUBLE
13282: EQUAL
13283: IFTRUE 13287
13285: GO 13302
13287: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
13288: LD_EXP 11
13292: PPUSH
13293: LD_STRING D1-Brown-2
13295: PPUSH
13296: CALL_OW 88
13300: GO 13326
13302: LD_INT 3
13304: DOUBLE
13305: EQUAL
13306: IFTRUE 13310
13308: GO 13325
13310: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
13311: LD_EXP 20
13315: PPUSH
13316: LD_STRING D1-VanH-2
13318: PPUSH
13319: CALL_OW 88
13323: GO 13326
13325: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
13326: LD_EXP 24
13330: PPUSH
13331: LD_STRING D1-Har-2
13333: PPUSH
13334: CALL_OW 94
// Video ( false ) ;
13338: LD_INT 0
13340: PPUSH
13341: CALL 73024 0 1
// ChangeMissionObjectives ( M1 ) ;
13345: LD_STRING M1
13347: PPUSH
13348: CALL_OW 337
// SaveForQuickRestart ;
13352: CALL_OW 22
// wait ( 2 2$30 ) ;
13356: LD_INT 5250
13358: PPUSH
13359: CALL_OW 67
// PrepareRussianAttack ( 2 ) ;
13363: LD_INT 2
13365: PPUSH
13366: CALL 10787 0 1
// wait ( 4 4$30 ) ;
13370: LD_INT 9450
13372: PPUSH
13373: CALL_OW 67
// if Difficulty > 2 then
13377: LD_OWVAR 67
13381: PUSH
13382: LD_INT 2
13384: GREATER
13385: IFFALSE 13394
// PrepareRussianAttack ( 3 ) ;
13387: LD_INT 3
13389: PPUSH
13390: CALL 10787 0 1
// if Difficulty > 3 then
13394: LD_OWVAR 67
13398: PUSH
13399: LD_INT 3
13401: GREATER
13402: IFFALSE 13561
// begin for i := 1 to 4 do
13404: LD_ADDR_VAR 0 2
13408: PUSH
13409: DOUBLE
13410: LD_INT 1
13412: DEC
13413: ST_TO_ADDR
13414: LD_INT 4
13416: PUSH
13417: FOR_TO
13418: IFFALSE 13503
// begin uc_side := 6 ;
13420: LD_ADDR_OWVAR 20
13424: PUSH
13425: LD_INT 6
13427: ST_TO_ADDR
// uc_nation := 3 ;
13428: LD_ADDR_OWVAR 21
13432: PUSH
13433: LD_INT 3
13435: ST_TO_ADDR
// PrepareSoldier ( false , 6 ) ;
13436: LD_INT 0
13438: PPUSH
13439: LD_INT 6
13441: PPUSH
13442: CALL_OW 381
// un := CreateHuman ;
13446: LD_ADDR_VAR 0 4
13450: PUSH
13451: CALL_OW 44
13455: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
13456: LD_VAR 0 4
13460: PPUSH
13461: LD_INT 122
13463: PPUSH
13464: LD_INT 89
13466: PPUSH
13467: LD_INT 3
13469: PPUSH
13470: LD_INT 0
13472: PPUSH
13473: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
13477: LD_VAR 0 4
13481: PPUSH
13482: LD_INT 88
13484: PPUSH
13485: LD_INT 42
13487: PPUSH
13488: CALL_OW 114
// AddComHold ( un ) ;
13492: LD_VAR 0 4
13496: PPUSH
13497: CALL_OW 200
// end ;
13501: GO 13417
13503: POP
13504: POP
// PrepareScientist ( false , 6 ) ;
13505: LD_INT 0
13507: PPUSH
13508: LD_INT 6
13510: PPUSH
13511: CALL_OW 384
// un := CreateHuman ;
13515: LD_ADDR_VAR 0 4
13519: PUSH
13520: CALL_OW 44
13524: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
13525: LD_VAR 0 4
13529: PPUSH
13530: LD_INT 122
13532: PPUSH
13533: LD_INT 89
13535: PPUSH
13536: LD_INT 3
13538: PPUSH
13539: LD_INT 0
13541: PPUSH
13542: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
13546: LD_VAR 0 4
13550: PPUSH
13551: LD_INT 91
13553: PPUSH
13554: LD_INT 48
13556: PPUSH
13557: CALL_OW 111
// end ; end ;
13561: LD_VAR 0 1
13565: RET
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 3 ] ] ) = 0 and tick > 5 5$00 do var dialog ;
13566: LD_INT 22
13568: PUSH
13569: LD_INT 1
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: LD_INT 101
13578: PUSH
13579: LD_INT 3
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PPUSH
13590: CALL_OW 69
13594: PUSH
13595: LD_INT 0
13597: EQUAL
13598: PUSH
13599: LD_OWVAR 1
13603: PUSH
13604: LD_INT 10500
13606: GREATER
13607: AND
13608: IFFALSE 15081
13610: GO 13612
13612: DISABLE
13613: LD_INT 0
13615: PPUSH
// begin PrepareSupportFromDelta ;
13616: CALL 3893 0 0
// deltaSupport := true ;
13620: LD_ADDR_EXP 5
13624: PUSH
13625: LD_INT 1
13627: ST_TO_ADDR
// dialog := false ;
13628: LD_ADDR_VAR 0 1
13632: PUSH
13633: LD_INT 0
13635: ST_TO_ADDR
// if IsOk ( Gladstone ) then
13636: LD_EXP 17
13640: PPUSH
13641: CALL_OW 302
13645: IFFALSE 13667
// dialog := Say ( Gladstone , D2-Glad-1 ) else
13647: LD_ADDR_VAR 0 1
13651: PUSH
13652: LD_EXP 17
13656: PPUSH
13657: LD_STRING D2-Glad-1
13659: PPUSH
13660: CALL_OW 88
13664: ST_TO_ADDR
13665: GO 13749
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
13667: LD_ADDR_VAR 0 1
13671: PUSH
13672: LD_INT 22
13674: PUSH
13675: LD_INT 1
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 120
13684: PUSH
13685: LD_INT 107
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 21
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 23
13704: PUSH
13705: LD_INT 1
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: PPUSH
13718: CALL_OW 69
13722: PUSH
13723: LD_EXP 22
13727: PUSH
13728: LD_EXP 21
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: DIFF
13737: PPUSH
13738: LD_STRING D2-Sol1-1
13740: PPUSH
13741: LD_STRING D2-FSol1-1
13743: PPUSH
13744: CALL 17078 0 3
13748: ST_TO_ADDR
// if dialog then
13749: LD_VAR 0 1
13753: IFFALSE 13854
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
13755: LD_EXP 12
13759: PPUSH
13760: CALL_OW 302
13764: PUSH
13765: LD_EXP 9
13769: PUSH
13770: LD_INT 1
13772: EQUAL
13773: AND
13774: IFFALSE 13788
// Say ( Donaldson , D2-Don-1 ) ;
13776: LD_EXP 12
13780: PPUSH
13781: LD_STRING D2-Don-1
13783: PPUSH
13784: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
13788: LD_EXP 11
13792: PPUSH
13793: CALL_OW 302
13797: PUSH
13798: LD_EXP 9
13802: PUSH
13803: LD_INT 2
13805: EQUAL
13806: AND
13807: IFFALSE 13821
// Say ( Brown , D2-Brown-1 ) ;
13809: LD_EXP 11
13813: PPUSH
13814: LD_STRING D2-Brown-1
13816: PPUSH
13817: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
13821: LD_EXP 20
13825: PPUSH
13826: CALL_OW 302
13830: PUSH
13831: LD_EXP 9
13835: PUSH
13836: LD_INT 3
13838: EQUAL
13839: AND
13840: IFFALSE 13854
// Say ( Houten , D2-VanH-1 ) ;
13842: LD_EXP 20
13846: PPUSH
13847: LD_STRING D2-VanH-1
13849: PPUSH
13850: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
13854: LD_INT 3
13856: PPUSH
13857: CALL 10787 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
13861: LD_STRING 07_time
13863: PPUSH
13864: LD_INT 18900
13866: PPUSH
13867: CALL_OW 30
13871: PUSH
13872: LD_INT 3
13874: DIV
13875: PPUSH
13876: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
13880: LD_INT 34
13882: PPUSH
13883: LD_INT 1
13885: PPUSH
13886: CALL_OW 321
13890: PUSH
13891: LD_INT 2
13893: EQUAL
13894: IFFALSE 13903
// SetAchievement ( ACH_HEAVYGUN ) ;
13896: LD_STRING ACH_HEAVYGUN
13898: PPUSH
13899: CALL_OW 543
// PrepareMacmillanSquad ;
13903: CALL 4612 0 0
// CenterNowOnUnits ( JMM ) ;
13907: LD_EXP 10
13911: PPUSH
13912: CALL_OW 87
// wait ( 0 0$10 ) ;
13916: LD_INT 350
13918: PPUSH
13919: CALL_OW 67
// PrepareRussianAttack ( Difficulty + 2 ) ;
13923: LD_OWVAR 67
13927: PUSH
13928: LD_INT 2
13930: PLUS
13931: PPUSH
13932: CALL 10787 0 1
// repeat wait ( 0 0$1 ) ;
13936: LD_INT 35
13938: PPUSH
13939: CALL_OW 67
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) ;
13943: LD_EXP 10
13947: PPUSH
13948: LD_INT 15
13950: PPUSH
13951: CALL_OW 308
13955: PUSH
13956: LD_EXP 10
13960: PPUSH
13961: CALL_OW 310
13965: PPUSH
13966: LD_INT 15
13968: PPUSH
13969: CALL_OW 308
13973: OR
13974: IFFALSE 13936
// DialogueOn ;
13976: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
13980: LD_EXP 10
13984: PPUSH
13985: LD_STRING D3-JMM-1
13987: PPUSH
13988: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
13992: LD_EXP 12
13996: PPUSH
13997: CALL_OW 302
14001: PUSH
14002: LD_EXP 9
14006: PUSH
14007: LD_INT 1
14009: EQUAL
14010: AND
14011: IFFALSE 14027
// Say ( Donaldson , D3-Don-1 ) else
14013: LD_EXP 12
14017: PPUSH
14018: LD_STRING D3-Don-1
14020: PPUSH
14021: CALL_OW 88
14025: GO 14123
// begin if gammaCommander = 1 then
14027: LD_EXP 9
14031: PUSH
14032: LD_INT 1
14034: EQUAL
14035: IFFALSE 14123
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
14037: LD_INT 22
14039: PUSH
14040: LD_INT 1
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 21
14049: PUSH
14050: LD_INT 1
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: LD_INT 23
14059: PUSH
14060: LD_INT 1
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PUSH
14067: LD_INT 120
14069: PUSH
14070: LD_INT 106
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PUSH
14077: LD_INT 26
14079: PUSH
14080: LD_INT 1
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: PPUSH
14099: LD_STRING D3-Sol1-1
14101: PPUSH
14102: LD_STRING 
14104: PPUSH
14105: CALL 17078 0 3
14109: IFFALSE 14123
// Say ( JMM , D3-JMM-2 ) ;
14111: LD_EXP 10
14115: PPUSH
14116: LD_STRING D3-JMM-2
14118: PPUSH
14119: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
14123: LD_EXP 11
14127: PPUSH
14128: CALL_OW 302
14132: PUSH
14133: LD_EXP 9
14137: PUSH
14138: LD_INT 2
14140: EQUAL
14141: AND
14142: IFFALSE 14158
// Say ( Brown , D3-Brown-1 ) else
14144: LD_EXP 11
14148: PPUSH
14149: LD_STRING D3-Brown-1
14151: PPUSH
14152: CALL_OW 88
14156: GO 14254
// begin if gammaCommander = 2 then
14158: LD_EXP 9
14162: PUSH
14163: LD_INT 2
14165: EQUAL
14166: IFFALSE 14254
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
14168: LD_INT 22
14170: PUSH
14171: LD_INT 1
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: LD_INT 21
14180: PUSH
14181: LD_INT 1
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 23
14190: PUSH
14191: LD_INT 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 120
14200: PUSH
14201: LD_INT 106
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 26
14210: PUSH
14211: LD_INT 1
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: PPUSH
14225: CALL_OW 69
14229: PPUSH
14230: LD_STRING D3-Sol1-1a
14232: PPUSH
14233: LD_STRING 
14235: PPUSH
14236: CALL 17078 0 3
14240: IFFALSE 14254
// Say ( JMM , D3-JMM-2 ) ;
14242: LD_EXP 10
14246: PPUSH
14247: LD_STRING D3-JMM-2
14249: PPUSH
14250: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
14254: LD_EXP 20
14258: PPUSH
14259: CALL_OW 302
14263: PUSH
14264: LD_EXP 9
14268: PUSH
14269: LD_INT 3
14271: EQUAL
14272: AND
14273: IFFALSE 14289
// Say ( Houten , D3-VanH-1 ) else
14275: LD_EXP 20
14279: PPUSH
14280: LD_STRING D3-VanH-1
14282: PPUSH
14283: CALL_OW 88
14287: GO 14385
// begin if gammaCommander = 3 then
14289: LD_EXP 9
14293: PUSH
14294: LD_INT 3
14296: EQUAL
14297: IFFALSE 14385
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
14299: LD_INT 22
14301: PUSH
14302: LD_INT 1
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 23
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 120
14331: PUSH
14332: LD_INT 106
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 26
14341: PUSH
14342: LD_INT 1
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: PPUSH
14356: CALL_OW 69
14360: PPUSH
14361: LD_STRING D3-Sol1-1b
14363: PPUSH
14364: LD_STRING 
14366: PPUSH
14367: CALL 17078 0 3
14371: IFFALSE 14385
// Say ( JMM , D3-JMM-2 ) ;
14373: LD_EXP 10
14377: PPUSH
14378: LD_STRING D3-JMM-2
14380: PPUSH
14381: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
14385: LD_EXP 22
14389: PPUSH
14390: CALL_OW 302
14394: IFFALSE 14422
// begin Say ( Joan , D3a-Joan-1 ) ;
14396: LD_EXP 22
14400: PPUSH
14401: LD_STRING D3a-Joan-1
14403: PPUSH
14404: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
14408: LD_EXP 10
14412: PPUSH
14413: LD_STRING D3a-JMM-1
14415: PPUSH
14416: CALL_OW 88
// end else
14420: GO 14856
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
14422: LD_STRING 06_JoanStatus_1
14424: PPUSH
14425: LD_INT 0
14427: PPUSH
14428: CALL_OW 30
14432: PUSH
14433: LD_INT 1
14435: EQUAL
14436: IFFALSE 14856
// begin Say ( JMM , D3b-JMM-1 ) ;
14438: LD_EXP 10
14442: PPUSH
14443: LD_STRING D3b-JMM-1
14445: PPUSH
14446: CALL_OW 88
// dialog := false ;
14450: LD_ADDR_VAR 0 1
14454: PUSH
14455: LD_INT 0
14457: ST_TO_ADDR
// if gammaCommander = 1 then
14458: LD_EXP 9
14462: PUSH
14463: LD_INT 1
14465: EQUAL
14466: IFFALSE 14577
// if IsOK ( Donaldson ) then
14468: LD_EXP 12
14472: PPUSH
14473: CALL_OW 302
14477: IFFALSE 14499
// dialog := Say ( Donaldson , D3b-Don-1 ) else
14479: LD_ADDR_VAR 0 1
14483: PUSH
14484: LD_EXP 12
14488: PPUSH
14489: LD_STRING D3b-Don-1
14491: PPUSH
14492: CALL_OW 88
14496: ST_TO_ADDR
14497: GO 14577
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
14499: LD_ADDR_VAR 0 1
14503: PUSH
14504: LD_INT 22
14506: PUSH
14507: LD_INT 1
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 21
14516: PUSH
14517: LD_INT 1
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 23
14526: PUSH
14527: LD_INT 1
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 120
14536: PUSH
14537: LD_INT 106
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 26
14546: PUSH
14547: LD_INT 1
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 69
14565: PPUSH
14566: LD_STRING D3b-Sol1-1
14568: PPUSH
14569: LD_STRING 
14571: PPUSH
14572: CALL 17078 0 3
14576: ST_TO_ADDR
// if gammaCommander = 2 then
14577: LD_EXP 9
14581: PUSH
14582: LD_INT 2
14584: EQUAL
14585: IFFALSE 14696
// if IsOk ( Brown ) then
14587: LD_EXP 11
14591: PPUSH
14592: CALL_OW 302
14596: IFFALSE 14618
// dialog := Say ( Brown , D3b-Brown-1 ) else
14598: LD_ADDR_VAR 0 1
14602: PUSH
14603: LD_EXP 11
14607: PPUSH
14608: LD_STRING D3b-Brown-1
14610: PPUSH
14611: CALL_OW 88
14615: ST_TO_ADDR
14616: GO 14696
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
14618: LD_ADDR_VAR 0 1
14622: PUSH
14623: LD_INT 22
14625: PUSH
14626: LD_INT 1
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: LD_INT 21
14635: PUSH
14636: LD_INT 1
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: LD_INT 23
14645: PUSH
14646: LD_INT 1
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 120
14655: PUSH
14656: LD_INT 106
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 26
14665: PUSH
14666: LD_INT 1
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: PPUSH
14680: CALL_OW 69
14684: PPUSH
14685: LD_STRING D3b-Sol1-1
14687: PPUSH
14688: LD_STRING 
14690: PPUSH
14691: CALL 17078 0 3
14695: ST_TO_ADDR
// if gammaCommander = 3 then
14696: LD_EXP 9
14700: PUSH
14701: LD_INT 3
14703: EQUAL
14704: IFFALSE 14815
// if IsOk ( Houten ) then
14706: LD_EXP 20
14710: PPUSH
14711: CALL_OW 302
14715: IFFALSE 14737
// dialog := Say ( Houten , D3b-VanH-1 ) else
14717: LD_ADDR_VAR 0 1
14721: PUSH
14722: LD_EXP 20
14726: PPUSH
14727: LD_STRING D3b-VanH-1
14729: PPUSH
14730: CALL_OW 88
14734: ST_TO_ADDR
14735: GO 14815
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
14737: LD_ADDR_VAR 0 1
14741: PUSH
14742: LD_INT 22
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 21
14754: PUSH
14755: LD_INT 1
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: LD_INT 23
14764: PUSH
14765: LD_INT 1
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 120
14774: PUSH
14775: LD_INT 106
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: LD_INT 26
14784: PUSH
14785: LD_INT 1
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 69
14803: PPUSH
14804: LD_STRING D3b-Sol1-1
14806: PPUSH
14807: LD_STRING 
14809: PPUSH
14810: CALL 17078 0 3
14814: ST_TO_ADDR
// if dialog then
14815: LD_VAR 0 1
14819: IFFALSE 14856
// begin Say ( JMM , D3b-JMM-2 ) ;
14821: LD_EXP 10
14825: PPUSH
14826: LD_STRING D3b-JMM-2
14828: PPUSH
14829: CALL_OW 88
// if IsOK ( Lisa ) then
14833: LD_EXP 15
14837: PPUSH
14838: CALL_OW 302
14842: IFFALSE 14856
// Say ( Lisa , D3b-Lisa-2 ) ;
14844: LD_EXP 15
14848: PPUSH
14849: LD_STRING D3b-Lisa-2
14851: PPUSH
14852: CALL_OW 88
// end ; end ; end ; if not seenComputer then
14856: LD_EXP 6
14860: NOT
14861: IFFALSE 14869
// begin DialogueOff ;
14863: CALL_OW 7
// exit ;
14867: GO 15081
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
14869: LD_INT 22
14871: PUSH
14872: LD_INT 1
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 21
14881: PUSH
14882: LD_INT 1
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 23
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 2
14901: PUSH
14902: LD_INT 120
14904: PUSH
14905: LD_INT 106
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 120
14914: PUSH
14915: LD_INT 107
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 26
14929: PUSH
14930: LD_INT 1
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: PPUSH
14944: CALL_OW 69
14948: PPUSH
14949: LD_STRING DCa-Sol1-1
14951: PPUSH
14952: LD_STRING 
14954: PPUSH
14955: CALL 17078 0 3
14959: IFFALSE 14973
// Say ( JMM , DCb-JMM-1 ) ;
14961: LD_EXP 10
14965: PPUSH
14966: LD_STRING DCb-JMM-1
14968: PPUSH
14969: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
14973: LD_INT 22
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 21
14985: PUSH
14986: LD_INT 1
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 23
14995: PUSH
14996: LD_INT 1
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: LD_INT 2
15005: PUSH
15006: LD_INT 120
15008: PUSH
15009: LD_INT 106
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 120
15018: PUSH
15019: LD_INT 107
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 26
15033: PUSH
15034: LD_INT 1
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: PPUSH
15048: CALL_OW 69
15052: PPUSH
15053: LD_STRING DCb-Sol1-1
15055: PPUSH
15056: LD_STRING 
15058: PPUSH
15059: CALL 17078 0 3
15063: IFFALSE 15077
// Say ( JMM , DCb-JMM-2 ) ;
15065: LD_EXP 10
15069: PPUSH
15070: LD_STRING DCb-JMM-2
15072: PPUSH
15073: CALL_OW 88
// DialogueOff ;
15077: CALL_OW 7
// end ;
15081: PPOPN 1
15083: END
// export function DialogSeenComputer ( un ) ; begin
15084: LD_INT 0
15086: PPUSH
// if jmmArrival then
15087: LD_EXP 7
15091: IFFALSE 15095
// exit ;
15093: GO 15161
// CenterOnUnits ( un ) ;
15095: LD_VAR 0 1
15099: PPUSH
15100: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
15104: LD_INT 22
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 2
15116: PUSH
15117: LD_INT 120
15119: PUSH
15120: LD_INT 106
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PUSH
15127: LD_INT 120
15129: PUSH
15130: LD_INT 107
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: LIST
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PPUSH
15146: CALL_OW 69
15150: PPUSH
15151: LD_STRING DC-Sol1-1
15153: PPUSH
15154: LD_STRING DC-FSol1-1
15156: PPUSH
15157: CALL 17078 0 3
// end ;
15161: LD_VAR 0 2
15165: RET
// every 0 0$30 trigger jmmArrival and tick >= 22 22$00 and IsOk ( JMM ) do
15166: LD_EXP 7
15170: PUSH
15171: LD_OWVAR 1
15175: PUSH
15176: LD_INT 46200
15178: GREATEREQUAL
15179: AND
15180: PUSH
15181: LD_EXP 10
15185: PPUSH
15186: CALL_OW 302
15190: AND
15191: IFFALSE 15546
15193: GO 15195
15195: DISABLE
// begin DialogueOn ;
15196: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
15200: LD_EXP 25
15204: PPUSH
15205: LD_STRING D4-Pow-1
15207: PPUSH
15208: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
15212: LD_EXP 10
15216: PPUSH
15217: LD_STRING D4-JMM-1
15219: PPUSH
15220: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
15224: LD_EXP 25
15228: PPUSH
15229: LD_STRING D4-Pow-2
15231: PPUSH
15232: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
15236: LD_EXP 10
15240: PPUSH
15241: LD_STRING D4-JMM-2
15243: PPUSH
15244: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
15248: LD_EXP 25
15252: PPUSH
15253: LD_STRING D4-Pow-3
15255: PPUSH
15256: CALL_OW 94
// DialogueOff ;
15260: CALL_OW 7
// wait ( 1 1$00 ) ;
15264: LD_INT 2100
15266: PPUSH
15267: CALL_OW 67
// PrepareRussianAttack ( Difficulty + 1 ) ;
15271: LD_OWVAR 67
15275: PUSH
15276: LD_INT 1
15278: PLUS
15279: PPUSH
15280: CALL 10787 0 1
// wait ( 7 7$30 ) ;
15284: LD_INT 15750
15286: PPUSH
15287: CALL_OW 67
// DialogueOn ;
15291: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
15295: LD_EXP 25
15299: PPUSH
15300: LD_STRING D4a-Pow-1
15302: PPUSH
15303: CALL_OW 94
// DialogueOff ;
15307: CALL_OW 7
// SikorskiCounter ;
15311: CALL 16862 0 0
// PrepareSikorsky ;
15315: CALL 5868 0 0
// CenterNowOnUnits ( Sikorski ) ;
15319: LD_EXP 23
15323: PPUSH
15324: CALL_OW 87
// DialogueOn ;
15328: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
15332: LD_EXP 23
15336: PPUSH
15337: LD_STRING D5-Sik-1
15339: PPUSH
15340: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
15344: LD_EXP 10
15348: PPUSH
15349: LD_STRING D5-JMM-1a
15351: PPUSH
15352: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
15356: LD_EXP 23
15360: PPUSH
15361: LD_STRING D5-Sik-2
15363: PPUSH
15364: CALL_OW 88
// case Query ( QSikorski ) of 1 :
15368: LD_STRING QSikorski
15370: PPUSH
15371: CALL_OW 97
15375: PUSH
15376: LD_INT 1
15378: DOUBLE
15379: EQUAL
15380: IFTRUE 15384
15382: GO 15407
15384: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
15385: LD_EXP 23
15389: PPUSH
15390: LD_STRING D5a-Sik-1
15392: PPUSH
15393: CALL_OW 88
// sikorskiWait := 1 1$00 ;
15397: LD_ADDR_EXP 4
15401: PUSH
15402: LD_INT 2100
15404: ST_TO_ADDR
// end ; 2 :
15405: GO 15494
15407: LD_INT 2
15409: DOUBLE
15410: EQUAL
15411: IFTRUE 15415
15413: GO 15438
15415: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
15416: LD_EXP 23
15420: PPUSH
15421: LD_STRING D5b-Sik-1
15423: PPUSH
15424: CALL_OW 88
// sikorskiWait := 5 5$00 ;
15428: LD_ADDR_EXP 4
15432: PUSH
15433: LD_INT 10500
15435: ST_TO_ADDR
// end ; 3 :
15436: GO 15494
15438: LD_INT 3
15440: DOUBLE
15441: EQUAL
15442: IFTRUE 15446
15444: GO 15493
15446: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
15447: LD_EXP 23
15451: PPUSH
15452: LD_STRING D5c-Sik-1
15454: PPUSH
15455: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
15459: LD_EXP 10
15463: PPUSH
15464: LD_STRING D5c-JMM-1
15466: PPUSH
15467: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
15471: LD_EXP 23
15475: PPUSH
15476: LD_STRING D5c-Sik-2
15478: PPUSH
15479: CALL_OW 88
// sikorskiWait := 5 5$00 ;
15483: LD_ADDR_EXP 4
15487: PUSH
15488: LD_INT 10500
15490: ST_TO_ADDR
// end ; end ;
15491: GO 15494
15493: POP
// DialogueOff ;
15494: CALL_OW 7
// SikorskiWaitCounter ;
15498: CALL 16925 0 0
// DialogueOn ;
15502: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
15506: LD_EXP 23
15510: PPUSH
15511: LD_STRING D6-Sik-1
15513: PPUSH
15514: CALL_OW 88
// DialogueOff ;
15518: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
15522: LD_STRING M2
15524: PPUSH
15525: CALL_OW 337
// PrepareRussianAttack ( Difficulty + 3 ) ;
15529: LD_OWVAR 67
15533: PUSH
15534: LD_INT 3
15536: PLUS
15537: PPUSH
15538: CALL 10787 0 1
// SikorskiAttack ;
15542: CALL 7217 0 0
// end ;
15546: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
15547: LD_INT 11
15549: PPUSH
15550: LD_INT 22
15552: PUSH
15553: LD_INT 4
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PPUSH
15560: CALL_OW 70
15564: PUSH
15565: LD_INT 2
15567: GREATER
15568: IFFALSE 15779
15570: GO 15572
15572: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
15573: LD_EXP 23
15577: PPUSH
15578: LD_STRING D7-Sik-1
15580: PPUSH
15581: CALL_OW 88
// wait ( 0 0$15 ) ;
15585: LD_INT 525
15587: PPUSH
15588: CALL_OW 67
// if InBattle ( 1 ) and ( IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) ) then
15592: LD_INT 1
15594: PPUSH
15595: CALL_OW 463
15599: PUSH
15600: LD_EXP 10
15604: PPUSH
15605: LD_INT 11
15607: PPUSH
15608: CALL_OW 308
15612: PUSH
15613: LD_EXP 10
15617: PPUSH
15618: CALL_OW 310
15622: PPUSH
15623: LD_INT 11
15625: PPUSH
15626: CALL_OW 308
15630: OR
15631: AND
15632: IFFALSE 15656
// begin Say ( Sikorski , D7a-Sik-1 ) ;
15634: LD_EXP 23
15638: PPUSH
15639: LD_STRING D7a-Sik-1
15641: PPUSH
15642: CALL_OW 88
// sikorskiStatus := 1 ;
15646: LD_ADDR_EXP 8
15650: PUSH
15651: LD_INT 1
15653: ST_TO_ADDR
// end else
15654: GO 15676
// begin Say ( Sikorski , D7b-Sik-1 ) ;
15656: LD_EXP 23
15660: PPUSH
15661: LD_STRING D7b-Sik-1
15663: PPUSH
15664: CALL_OW 88
// sikorskiStatus := 2 ;
15668: LD_ADDR_EXP 8
15672: PUSH
15673: LD_INT 2
15675: ST_TO_ADDR
// end ; wait ( 0 0$35 ) ;
15676: LD_INT 1225
15678: PPUSH
15679: CALL_OW 67
// if InBattle ( 1 ) and ( IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) ) then
15683: LD_INT 1
15685: PPUSH
15686: CALL_OW 463
15690: PUSH
15691: LD_EXP 10
15695: PPUSH
15696: LD_INT 11
15698: PPUSH
15699: CALL_OW 308
15703: PUSH
15704: LD_EXP 10
15708: PPUSH
15709: CALL_OW 310
15713: PPUSH
15714: LD_INT 11
15716: PPUSH
15717: CALL_OW 308
15721: OR
15722: PUSH
15723: LD_EXP 10
15727: PPUSH
15728: CALL_OW 302
15732: NOT
15733: OR
15734: AND
15735: IFFALSE 15759
// begin Say ( Sikorski , D7a-Sik-1 ) ;
15737: LD_EXP 23
15741: PPUSH
15742: LD_STRING D7a-Sik-1
15744: PPUSH
15745: CALL_OW 88
// sikorskiStatus := 1 ;
15749: LD_ADDR_EXP 8
15753: PUSH
15754: LD_INT 1
15756: ST_TO_ADDR
// end else
15757: GO 15779
// begin Say ( Sikorski , D7b-Sik-1 ) ;
15759: LD_EXP 23
15763: PPUSH
15764: LD_STRING D7b-Sik-1
15766: PPUSH
15767: CALL_OW 88
// sikorskiStatus := 2 ;
15771: LD_ADDR_EXP 8
15775: PUSH
15776: LD_INT 2
15778: ST_TO_ADDR
// end ; end ;
15779: END
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do var i , tmp , prefix ;
15780: LD_EXP 7
15784: PUSH
15785: LD_INT 28
15787: PPUSH
15788: CALL_OW 301
15792: AND
15793: PUSH
15794: LD_EXP 27
15798: PPUSH
15799: CALL_OW 301
15803: AND
15804: PUSH
15805: LD_INT 22
15807: PUSH
15808: LD_INT 3
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: LD_INT 30
15817: PUSH
15818: LD_INT 5
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PPUSH
15829: CALL_OW 69
15833: AND
15834: IFFALSE 16859
15836: GO 15838
15838: DISABLE
15839: LD_INT 0
15841: PPUSH
15842: PPUSH
15843: PPUSH
// begin Video ( true ) ;
15844: LD_INT 1
15846: PPUSH
15847: CALL 73024 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
15851: LD_INT 104
15853: PPUSH
15854: LD_INT 108
15856: PPUSH
15857: LD_INT 1
15859: PPUSH
15860: LD_INT 36
15862: NEG
15863: PPUSH
15864: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
15868: LD_INT 104
15870: PPUSH
15871: LD_INT 108
15873: PPUSH
15874: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
15878: LD_ADDR_VAR 0 2
15882: PUSH
15883: LD_INT 22
15885: PUSH
15886: LD_INT 1
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 21
15895: PUSH
15896: LD_INT 1
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 3
15905: PUSH
15906: LD_INT 24
15908: PUSH
15909: LD_INT 249
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: PPUSH
15925: CALL_OW 69
15929: ST_TO_ADDR
// if tmp then
15930: LD_VAR 0 2
15934: IFFALSE 15965
// for i in tmp do
15936: LD_ADDR_VAR 0 1
15940: PUSH
15941: LD_VAR 0 2
15945: PUSH
15946: FOR_IN
15947: IFFALSE 15963
// SetLives ( i , 249 ) ;
15949: LD_VAR 0 1
15953: PPUSH
15954: LD_INT 249
15956: PPUSH
15957: CALL_OW 234
15961: GO 15946
15963: POP
15964: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
15965: LD_ADDR_VAR 0 1
15969: PUSH
15970: LD_INT 22
15972: PUSH
15973: LD_INT 3
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 21
15982: PUSH
15983: LD_INT 1
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PPUSH
15994: CALL_OW 69
15998: PUSH
15999: FOR_IN
16000: IFFALSE 16043
// begin ComExit ( i ) ;
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL 73440 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
16011: LD_VAR 0 1
16015: PPUSH
16016: LD_INT 131
16018: PPUSH
16019: LD_INT 127
16021: PPUSH
16022: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
16026: LD_VAR 0 1
16030: PPUSH
16031: LD_INT 141
16033: PPUSH
16034: LD_INT 147
16036: PPUSH
16037: CALL_OW 171
// end ;
16041: GO 15999
16043: POP
16044: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
16045: LD_INT 81
16047: PUSH
16048: LD_INT 3
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 3
16057: PUSH
16058: LD_INT 21
16060: PUSH
16061: LD_INT 3
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PPUSH
16076: CALL_OW 69
16080: PPUSH
16081: LD_INT 131
16083: PPUSH
16084: LD_INT 127
16086: PPUSH
16087: CALL_OW 174
// wait ( 0 0$08 ) ;
16091: LD_INT 280
16093: PPUSH
16094: CALL_OW 67
// DialogueOn ;
16098: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
16102: LD_EXP 8
16106: PUSH
16107: LD_INT 1
16109: EQUAL
16110: PUSH
16111: LD_EXP 23
16115: PPUSH
16116: CALL_OW 302
16120: AND
16121: IFFALSE 16135
// Say ( Sikorski , D9-Sik-1 ) ;
16123: LD_EXP 23
16127: PPUSH
16128: LD_STRING D9-Sik-1
16130: PPUSH
16131: CALL_OW 88
// if IsDead ( Sikorski ) then
16135: LD_EXP 23
16139: PPUSH
16140: CALL_OW 301
16144: IFFALSE 16165
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
16146: LD_EXP 25
16150: PPUSH
16151: LD_STRING D8b-Pow-1
16153: PPUSH
16154: CALL_OW 94
// YouLost ( Dismissed ) ;
16158: LD_STRING Dismissed
16160: PPUSH
16161: CALL_OW 104
// end ; if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
16165: LD_INT 22
16167: PUSH
16168: LD_INT 4
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PPUSH
16175: CALL_OW 69
16179: PUSH
16180: LD_INT 0
16182: EQUAL
16183: PUSH
16184: LD_EXP 3
16188: AND
16189: IFFALSE 16198
// SetAchievement ( ACH_BLITZKRIEG ) ;
16191: LD_STRING ACH_BLITZKRIEG
16193: PPUSH
16194: CALL_OW 543
// if tick <= 25 25$08 then
16198: LD_OWVAR 1
16202: PUSH
16203: LD_INT 52780
16205: LESSEQUAL
16206: IFFALSE 16222
// begin wait ( 3 ) ;
16208: LD_INT 3
16210: PPUSH
16211: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
16215: LD_STRING ACH_ASPEED_8
16217: PPUSH
16218: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
16222: LD_STRING med1
16224: PPUSH
16225: LD_INT 1
16227: PPUSH
16228: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
16232: LD_STRING med2
16234: PPUSH
16235: LD_INT 1
16237: PPUSH
16238: CALL_OW 101
// if sikorskiStatus = 1 then
16242: LD_EXP 8
16246: PUSH
16247: LD_INT 1
16249: EQUAL
16250: IFFALSE 16264
// AddMedal ( perfect , 1 ) else
16252: LD_STRING perfect
16254: PPUSH
16255: LD_INT 1
16257: PPUSH
16258: CALL_OW 101
16262: GO 16275
// AddMedal ( perfect , - 1 ) ;
16264: LD_STRING perfect
16266: PPUSH
16267: LD_INT 1
16269: NEG
16270: PPUSH
16271: CALL_OW 101
// if Difficulty >= 3 then
16275: LD_OWVAR 67
16279: PUSH
16280: LD_INT 3
16282: GREATEREQUAL
16283: IFFALSE 16295
// SetAchievementEX ( ACH_AMER , 8 ) ;
16285: LD_STRING ACH_AMER
16287: PPUSH
16288: LD_INT 8
16290: PPUSH
16291: CALL_OW 564
// GiveMedals ( Main ) ;
16295: LD_STRING Main
16297: PPUSH
16298: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16302: LD_INT 22
16304: PUSH
16305: LD_INT 1
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 23
16314: PUSH
16315: LD_INT 1
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 21
16324: PUSH
16325: LD_INT 1
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: LIST
16336: PPUSH
16337: CALL_OW 69
16341: PPUSH
16342: CALL_OW 43
// prefix := 08_ ;
16346: LD_ADDR_VAR 0 3
16350: PUSH
16351: LD_STRING 08_
16353: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
16354: LD_EXP 10
16358: PPUSH
16359: LD_VAR 0 3
16363: PUSH
16364: LD_STRING JMM
16366: STR
16367: PPUSH
16368: CALL_OW 38
// if IsLive ( Brown ) then
16372: LD_EXP 11
16376: PPUSH
16377: CALL_OW 300
16381: IFFALSE 16401
// SaveCharacters ( Brown , prefix & Brown ) ;
16383: LD_EXP 11
16387: PPUSH
16388: LD_VAR 0 3
16392: PUSH
16393: LD_STRING Brown
16395: STR
16396: PPUSH
16397: CALL_OW 38
// if IsLive ( Donaldson ) then
16401: LD_EXP 12
16405: PPUSH
16406: CALL_OW 300
16410: IFFALSE 16430
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
16412: LD_EXP 12
16416: PPUSH
16417: LD_VAR 0 3
16421: PUSH
16422: LD_STRING Donaldson
16424: STR
16425: PPUSH
16426: CALL_OW 38
// if IsLive ( Bobby ) then
16430: LD_EXP 13
16434: PPUSH
16435: CALL_OW 300
16439: IFFALSE 16459
// SaveCharacters ( Bobby , prefix & Bobby ) ;
16441: LD_EXP 13
16445: PPUSH
16446: LD_VAR 0 3
16450: PUSH
16451: LD_STRING Bobby
16453: STR
16454: PPUSH
16455: CALL_OW 38
// if IsLive ( Cyrus ) then
16459: LD_EXP 14
16463: PPUSH
16464: CALL_OW 300
16468: IFFALSE 16488
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
16470: LD_EXP 14
16474: PPUSH
16475: LD_VAR 0 3
16479: PUSH
16480: LD_STRING Cyrus
16482: STR
16483: PPUSH
16484: CALL_OW 38
// if IsLive ( Lisa ) then
16488: LD_EXP 15
16492: PPUSH
16493: CALL_OW 300
16497: IFFALSE 16517
// SaveCharacters ( Lisa , prefix & Lisa ) ;
16499: LD_EXP 15
16503: PPUSH
16504: LD_VAR 0 3
16508: PUSH
16509: LD_STRING Lisa
16511: STR
16512: PPUSH
16513: CALL_OW 38
// if IsLive ( Frank ) then
16517: LD_EXP 16
16521: PPUSH
16522: CALL_OW 300
16526: IFFALSE 16546
// SaveCharacters ( Frank , prefix & Frank ) ;
16528: LD_EXP 16
16532: PPUSH
16533: LD_VAR 0 3
16537: PUSH
16538: LD_STRING Frank
16540: STR
16541: PPUSH
16542: CALL_OW 38
// if IsLive ( Gladstone ) then
16546: LD_EXP 17
16550: PPUSH
16551: CALL_OW 300
16555: IFFALSE 16575
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
16557: LD_EXP 17
16561: PPUSH
16562: LD_VAR 0 3
16566: PUSH
16567: LD_STRING Gladstone
16569: STR
16570: PPUSH
16571: CALL_OW 38
// if IsLive ( Kikuchi ) then
16575: LD_EXP 18
16579: PPUSH
16580: CALL_OW 300
16584: IFFALSE 16604
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
16586: LD_EXP 18
16590: PPUSH
16591: LD_VAR 0 3
16595: PUSH
16596: LD_STRING Kikuchi
16598: STR
16599: PPUSH
16600: CALL_OW 38
// if IsLive ( Denis ) then
16604: LD_EXP 21
16608: PPUSH
16609: CALL_OW 300
16613: IFFALSE 16633
// SaveCharacters ( Denis , prefix & Denis ) ;
16615: LD_EXP 21
16619: PPUSH
16620: LD_VAR 0 3
16624: PUSH
16625: LD_STRING Denis
16627: STR
16628: PPUSH
16629: CALL_OW 38
// if IsLive ( Joan ) then
16633: LD_EXP 22
16637: PPUSH
16638: CALL_OW 300
16642: IFFALSE 16662
// SaveCharacters ( Joan , prefix & Joan ) ;
16644: LD_EXP 22
16648: PPUSH
16649: LD_VAR 0 3
16653: PUSH
16654: LD_STRING Joan
16656: STR
16657: PPUSH
16658: CALL_OW 38
// if IsLive ( Khatam ) then
16662: LD_EXP 19
16666: PPUSH
16667: CALL_OW 300
16671: IFFALSE 16691
// SaveCharacters ( Khatam , prefix & Khatam ) ;
16673: LD_EXP 19
16677: PPUSH
16678: LD_VAR 0 3
16682: PUSH
16683: LD_STRING Khatam
16685: STR
16686: PPUSH
16687: CALL_OW 38
// if IsLive ( Houten ) then
16691: LD_EXP 20
16695: PPUSH
16696: CALL_OW 300
16700: IFFALSE 16720
// SaveCharacters ( Houten , prefix & Houten ) ;
16702: LD_EXP 20
16706: PPUSH
16707: LD_VAR 0 3
16711: PUSH
16712: LD_STRING Houten
16714: STR
16715: PPUSH
16716: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
16720: LD_INT 22
16722: PUSH
16723: LD_INT 1
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 21
16732: PUSH
16733: LD_INT 1
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PUSH
16740: LD_INT 23
16742: PUSH
16743: LD_INT 1
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: LIST
16754: PPUSH
16755: CALL_OW 69
16759: PUSH
16760: LD_EXP 10
16764: PUSH
16765: LD_EXP 11
16769: PUSH
16770: LD_EXP 12
16774: PUSH
16775: LD_EXP 13
16779: PUSH
16780: LD_EXP 14
16784: PUSH
16785: LD_EXP 15
16789: PUSH
16790: LD_EXP 16
16794: PUSH
16795: LD_EXP 17
16799: PUSH
16800: LD_EXP 18
16804: PUSH
16805: LD_EXP 21
16809: PUSH
16810: LD_EXP 22
16814: PUSH
16815: LD_EXP 20
16819: PUSH
16820: LD_EXP 19
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: DIFF
16840: PPUSH
16841: LD_STRING 08_other_survivors
16843: PPUSH
16844: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
16848: LD_INT 15
16850: PPUSH
16851: CALL 6691 0 1
// YouWin ;
16855: CALL_OW 103
// end ; end_of_file
16859: PPOPN 3
16861: END
// export function SikorskiCounter ; begin
16862: LD_INT 0
16864: PPUSH
// repeat wait ( 0 0$1 ) ;
16865: LD_INT 35
16867: PPUSH
16868: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
16872: LD_ADDR_OWVAR 47
16876: PUSH
16877: LD_STRING #Am08-2
16879: PUSH
16880: LD_EXP 3
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
16889: LD_ADDR_EXP 3
16893: PUSH
16894: LD_EXP 3
16898: PUSH
16899: LD_INT 35
16901: MINUS
16902: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
16903: LD_EXP 3
16907: PUSH
16908: LD_INT 0
16910: EQUAL
16911: IFFALSE 16865
// display_strings := [ ] ;
16913: LD_ADDR_OWVAR 47
16917: PUSH
16918: EMPTY
16919: ST_TO_ADDR
// end ;
16920: LD_VAR 0 1
16924: RET
// export function SikorskiWaitCounter ; begin
16925: LD_INT 0
16927: PPUSH
// repeat wait ( 0 0$1 ) ;
16928: LD_INT 35
16930: PPUSH
16931: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
16935: LD_ADDR_OWVAR 47
16939: PUSH
16940: LD_STRING #Am08-1
16942: PUSH
16943: LD_EXP 4
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
16952: LD_ADDR_EXP 4
16956: PUSH
16957: LD_EXP 4
16961: PUSH
16962: LD_INT 35
16964: MINUS
16965: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
16966: LD_EXP 4
16970: PUSH
16971: LD_INT 0
16973: EQUAL
16974: IFFALSE 16928
// display_strings := [ ] ;
16976: LD_ADDR_OWVAR 47
16980: PUSH
16981: EMPTY
16982: ST_TO_ADDR
// end ; end_of_file
16983: LD_VAR 0 1
16987: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
16988: LD_EXP 3
16992: IFFALSE 17032
16994: GO 16996
16996: DISABLE
// begin enable ;
16997: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
16998: LD_INT 14
17000: PPUSH
17001: CALL_OW 435
17005: PUSH
17006: LD_INT 10
17008: LESS
17009: IFFALSE 17032
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
17011: LD_INT 1
17013: PPUSH
17014: LD_INT 5
17016: PPUSH
17017: CALL_OW 12
17021: PPUSH
17022: LD_INT 14
17024: PPUSH
17025: LD_INT 1
17027: PPUSH
17028: CALL_OW 55
// end ;
17032: END
// every 0 0$55 trigger sikorskiArriveCounter do
17033: LD_EXP 3
17037: IFFALSE 17077
17039: GO 17041
17041: DISABLE
// begin enable ;
17042: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
17043: LD_INT 13
17045: PPUSH
17046: CALL_OW 435
17050: PUSH
17051: LD_INT 10
17053: LESS
17054: IFFALSE 17077
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
17056: LD_INT 1
17058: PPUSH
17059: LD_INT 5
17061: PPUSH
17062: CALL_OW 12
17066: PPUSH
17067: LD_INT 13
17069: PPUSH
17070: LD_INT 1
17072: PPUSH
17073: CALL_OW 55
// end ; end_of_file
17077: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
17078: LD_INT 0
17080: PPUSH
17081: PPUSH
// if not units then
17082: LD_VAR 0 1
17086: NOT
17087: IFFALSE 17091
// exit ;
17089: GO 17216
// result := false ;
17091: LD_ADDR_VAR 0 4
17095: PUSH
17096: LD_INT 0
17098: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
17099: LD_ADDR_VAR 0 5
17103: PUSH
17104: LD_VAR 0 1
17108: PPUSH
17109: LD_INT 26
17111: PUSH
17112: LD_INT 1
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PPUSH
17119: CALL_OW 72
17123: ST_TO_ADDR
// if tmp then
17124: LD_VAR 0 5
17128: IFFALSE 17154
// result := Say ( tmp [ 1 ] , menDialog ) ;
17130: LD_ADDR_VAR 0 4
17134: PUSH
17135: LD_VAR 0 5
17139: PUSH
17140: LD_INT 1
17142: ARRAY
17143: PPUSH
17144: LD_VAR 0 2
17148: PPUSH
17149: CALL_OW 88
17153: ST_TO_ADDR
// if not result then
17154: LD_VAR 0 4
17158: NOT
17159: IFFALSE 17216
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
17161: LD_ADDR_VAR 0 5
17165: PUSH
17166: LD_VAR 0 1
17170: PPUSH
17171: LD_INT 26
17173: PUSH
17174: LD_INT 2
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PPUSH
17181: CALL_OW 72
17185: ST_TO_ADDR
// if tmp then
17186: LD_VAR 0 5
17190: IFFALSE 17216
// result := Say ( tmp [ 1 ] , womenDialog ) ;
17192: LD_ADDR_VAR 0 4
17196: PUSH
17197: LD_VAR 0 5
17201: PUSH
17202: LD_INT 1
17204: ARRAY
17205: PPUSH
17206: LD_VAR 0 3
17210: PPUSH
17211: CALL_OW 88
17215: ST_TO_ADDR
// end ; end ; end_of_file
17216: LD_VAR 0 4
17220: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
17221: LD_INT 0
17223: PPUSH
// ar_miner := 81 ;
17224: LD_ADDR_EXP 39
17228: PUSH
17229: LD_INT 81
17231: ST_TO_ADDR
// ar_crane := 88 ;
17232: LD_ADDR_EXP 38
17236: PUSH
17237: LD_INT 88
17239: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
17240: LD_ADDR_EXP 33
17244: PUSH
17245: LD_INT 89
17247: ST_TO_ADDR
// us_hack := 99 ;
17248: LD_ADDR_EXP 34
17252: PUSH
17253: LD_INT 99
17255: ST_TO_ADDR
// us_artillery := 97 ;
17256: LD_ADDR_EXP 35
17260: PUSH
17261: LD_INT 97
17263: ST_TO_ADDR
// ar_bio_bomb := 91 ;
17264: LD_ADDR_EXP 36
17268: PUSH
17269: LD_INT 91
17271: ST_TO_ADDR
// ar_mortar := 92 ;
17272: LD_ADDR_EXP 37
17276: PUSH
17277: LD_INT 92
17279: ST_TO_ADDR
// ru_flamethrower := 93 ;
17280: LD_ADDR_EXP 40
17284: PUSH
17285: LD_INT 93
17287: ST_TO_ADDR
// ru_radar := 98 ;
17288: LD_ADDR_EXP 32
17292: PUSH
17293: LD_INT 98
17295: ST_TO_ADDR
// tech_Artillery := 80 ;
17296: LD_ADDR_EXP 41
17300: PUSH
17301: LD_INT 80
17303: ST_TO_ADDR
// tech_RadMat := 81 ;
17304: LD_ADDR_EXP 42
17308: PUSH
17309: LD_INT 81
17311: ST_TO_ADDR
// tech_BasicTools := 82 ;
17312: LD_ADDR_EXP 43
17316: PUSH
17317: LD_INT 82
17319: ST_TO_ADDR
// tech_Cargo := 83 ;
17320: LD_ADDR_EXP 44
17324: PUSH
17325: LD_INT 83
17327: ST_TO_ADDR
// tech_Track := 84 ;
17328: LD_ADDR_EXP 45
17332: PUSH
17333: LD_INT 84
17335: ST_TO_ADDR
// tech_Crane := 85 ;
17336: LD_ADDR_EXP 46
17340: PUSH
17341: LD_INT 85
17343: ST_TO_ADDR
// tech_Bulldozer := 86 ;
17344: LD_ADDR_EXP 47
17348: PUSH
17349: LD_INT 86
17351: ST_TO_ADDR
// tech_Hovercraft := 87 ;
17352: LD_ADDR_EXP 48
17356: PUSH
17357: LD_INT 87
17359: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
17360: LD_ADDR_EXP 49
17364: PUSH
17365: LD_INT 88
17367: ST_TO_ADDR
// class_mastodont := 31 ;
17368: LD_ADDR_EXP 50
17372: PUSH
17373: LD_INT 31
17375: ST_TO_ADDR
// class_horse := 21 ;
17376: LD_ADDR_EXP 51
17380: PUSH
17381: LD_INT 21
17383: ST_TO_ADDR
// end ;
17384: LD_VAR 0 1
17388: RET
// every 1 do
17389: GO 17391
17391: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
17392: CALL 17221 0 0
17396: END
// every 0 0$1 do
17397: GO 17399
17399: DISABLE
// begin enable ;
17400: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17401: LD_STRING updateTimer(
17403: PUSH
17404: LD_OWVAR 1
17408: STR
17409: PUSH
17410: LD_STRING );
17412: STR
17413: PPUSH
17414: CALL_OW 559
// end ;
17418: END
// export function SOS_MapStart ( ) ; begin
17419: LD_INT 0
17421: PPUSH
// if streamModeActive then
17422: LD_EXP 52
17426: IFFALSE 17435
// DefineStreamItems ( true ) ;
17428: LD_INT 1
17430: PPUSH
17431: CALL 19085 0 1
// UpdateFactoryWaypoints ( ) ;
17435: CALL 32669 0 0
// end ;
17439: LD_VAR 0 1
17443: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17444: LD_INT 0
17446: PPUSH
// if p2 = 100 then
17447: LD_VAR 0 2
17451: PUSH
17452: LD_INT 100
17454: EQUAL
17455: IFFALSE 18458
// begin if not StreamModeActive then
17457: LD_EXP 52
17461: NOT
17462: IFFALSE 17472
// StreamModeActive := true ;
17464: LD_ADDR_EXP 52
17468: PUSH
17469: LD_INT 1
17471: ST_TO_ADDR
// if p3 = 0 then
17472: LD_VAR 0 3
17476: PUSH
17477: LD_INT 0
17479: EQUAL
17480: IFFALSE 17486
// InitStreamMode ;
17482: CALL 18621 0 0
// if p3 = 1 then
17486: LD_VAR 0 3
17490: PUSH
17491: LD_INT 1
17493: EQUAL
17494: IFFALSE 17504
// sRocket := true ;
17496: LD_ADDR_EXP 57
17500: PUSH
17501: LD_INT 1
17503: ST_TO_ADDR
// if p3 = 2 then
17504: LD_VAR 0 3
17508: PUSH
17509: LD_INT 2
17511: EQUAL
17512: IFFALSE 17522
// sSpeed := true ;
17514: LD_ADDR_EXP 56
17518: PUSH
17519: LD_INT 1
17521: ST_TO_ADDR
// if p3 = 3 then
17522: LD_VAR 0 3
17526: PUSH
17527: LD_INT 3
17529: EQUAL
17530: IFFALSE 17540
// sEngine := true ;
17532: LD_ADDR_EXP 58
17536: PUSH
17537: LD_INT 1
17539: ST_TO_ADDR
// if p3 = 4 then
17540: LD_VAR 0 3
17544: PUSH
17545: LD_INT 4
17547: EQUAL
17548: IFFALSE 17558
// sSpec := true ;
17550: LD_ADDR_EXP 55
17554: PUSH
17555: LD_INT 1
17557: ST_TO_ADDR
// if p3 = 5 then
17558: LD_VAR 0 3
17562: PUSH
17563: LD_INT 5
17565: EQUAL
17566: IFFALSE 17576
// sLevel := true ;
17568: LD_ADDR_EXP 59
17572: PUSH
17573: LD_INT 1
17575: ST_TO_ADDR
// if p3 = 6 then
17576: LD_VAR 0 3
17580: PUSH
17581: LD_INT 6
17583: EQUAL
17584: IFFALSE 17594
// sArmoury := true ;
17586: LD_ADDR_EXP 60
17590: PUSH
17591: LD_INT 1
17593: ST_TO_ADDR
// if p3 = 7 then
17594: LD_VAR 0 3
17598: PUSH
17599: LD_INT 7
17601: EQUAL
17602: IFFALSE 17612
// sRadar := true ;
17604: LD_ADDR_EXP 61
17608: PUSH
17609: LD_INT 1
17611: ST_TO_ADDR
// if p3 = 8 then
17612: LD_VAR 0 3
17616: PUSH
17617: LD_INT 8
17619: EQUAL
17620: IFFALSE 17630
// sBunker := true ;
17622: LD_ADDR_EXP 62
17626: PUSH
17627: LD_INT 1
17629: ST_TO_ADDR
// if p3 = 9 then
17630: LD_VAR 0 3
17634: PUSH
17635: LD_INT 9
17637: EQUAL
17638: IFFALSE 17648
// sHack := true ;
17640: LD_ADDR_EXP 63
17644: PUSH
17645: LD_INT 1
17647: ST_TO_ADDR
// if p3 = 10 then
17648: LD_VAR 0 3
17652: PUSH
17653: LD_INT 10
17655: EQUAL
17656: IFFALSE 17666
// sFire := true ;
17658: LD_ADDR_EXP 64
17662: PUSH
17663: LD_INT 1
17665: ST_TO_ADDR
// if p3 = 11 then
17666: LD_VAR 0 3
17670: PUSH
17671: LD_INT 11
17673: EQUAL
17674: IFFALSE 17684
// sRefresh := true ;
17676: LD_ADDR_EXP 65
17680: PUSH
17681: LD_INT 1
17683: ST_TO_ADDR
// if p3 = 12 then
17684: LD_VAR 0 3
17688: PUSH
17689: LD_INT 12
17691: EQUAL
17692: IFFALSE 17702
// sExp := true ;
17694: LD_ADDR_EXP 66
17698: PUSH
17699: LD_INT 1
17701: ST_TO_ADDR
// if p3 = 13 then
17702: LD_VAR 0 3
17706: PUSH
17707: LD_INT 13
17709: EQUAL
17710: IFFALSE 17720
// sDepot := true ;
17712: LD_ADDR_EXP 67
17716: PUSH
17717: LD_INT 1
17719: ST_TO_ADDR
// if p3 = 14 then
17720: LD_VAR 0 3
17724: PUSH
17725: LD_INT 14
17727: EQUAL
17728: IFFALSE 17738
// sFlag := true ;
17730: LD_ADDR_EXP 68
17734: PUSH
17735: LD_INT 1
17737: ST_TO_ADDR
// if p3 = 15 then
17738: LD_VAR 0 3
17742: PUSH
17743: LD_INT 15
17745: EQUAL
17746: IFFALSE 17756
// sKamikadze := true ;
17748: LD_ADDR_EXP 76
17752: PUSH
17753: LD_INT 1
17755: ST_TO_ADDR
// if p3 = 16 then
17756: LD_VAR 0 3
17760: PUSH
17761: LD_INT 16
17763: EQUAL
17764: IFFALSE 17774
// sTroll := true ;
17766: LD_ADDR_EXP 77
17770: PUSH
17771: LD_INT 1
17773: ST_TO_ADDR
// if p3 = 17 then
17774: LD_VAR 0 3
17778: PUSH
17779: LD_INT 17
17781: EQUAL
17782: IFFALSE 17792
// sSlow := true ;
17784: LD_ADDR_EXP 78
17788: PUSH
17789: LD_INT 1
17791: ST_TO_ADDR
// if p3 = 18 then
17792: LD_VAR 0 3
17796: PUSH
17797: LD_INT 18
17799: EQUAL
17800: IFFALSE 17810
// sLack := true ;
17802: LD_ADDR_EXP 79
17806: PUSH
17807: LD_INT 1
17809: ST_TO_ADDR
// if p3 = 19 then
17810: LD_VAR 0 3
17814: PUSH
17815: LD_INT 19
17817: EQUAL
17818: IFFALSE 17828
// sTank := true ;
17820: LD_ADDR_EXP 81
17824: PUSH
17825: LD_INT 1
17827: ST_TO_ADDR
// if p3 = 20 then
17828: LD_VAR 0 3
17832: PUSH
17833: LD_INT 20
17835: EQUAL
17836: IFFALSE 17846
// sRemote := true ;
17838: LD_ADDR_EXP 82
17842: PUSH
17843: LD_INT 1
17845: ST_TO_ADDR
// if p3 = 21 then
17846: LD_VAR 0 3
17850: PUSH
17851: LD_INT 21
17853: EQUAL
17854: IFFALSE 17864
// sPowell := true ;
17856: LD_ADDR_EXP 83
17860: PUSH
17861: LD_INT 1
17863: ST_TO_ADDR
// if p3 = 22 then
17864: LD_VAR 0 3
17868: PUSH
17869: LD_INT 22
17871: EQUAL
17872: IFFALSE 17882
// sTeleport := true ;
17874: LD_ADDR_EXP 86
17878: PUSH
17879: LD_INT 1
17881: ST_TO_ADDR
// if p3 = 23 then
17882: LD_VAR 0 3
17886: PUSH
17887: LD_INT 23
17889: EQUAL
17890: IFFALSE 17900
// sOilTower := true ;
17892: LD_ADDR_EXP 88
17896: PUSH
17897: LD_INT 1
17899: ST_TO_ADDR
// if p3 = 24 then
17900: LD_VAR 0 3
17904: PUSH
17905: LD_INT 24
17907: EQUAL
17908: IFFALSE 17918
// sShovel := true ;
17910: LD_ADDR_EXP 89
17914: PUSH
17915: LD_INT 1
17917: ST_TO_ADDR
// if p3 = 25 then
17918: LD_VAR 0 3
17922: PUSH
17923: LD_INT 25
17925: EQUAL
17926: IFFALSE 17936
// sSheik := true ;
17928: LD_ADDR_EXP 90
17932: PUSH
17933: LD_INT 1
17935: ST_TO_ADDR
// if p3 = 26 then
17936: LD_VAR 0 3
17940: PUSH
17941: LD_INT 26
17943: EQUAL
17944: IFFALSE 17954
// sEarthquake := true ;
17946: LD_ADDR_EXP 92
17950: PUSH
17951: LD_INT 1
17953: ST_TO_ADDR
// if p3 = 27 then
17954: LD_VAR 0 3
17958: PUSH
17959: LD_INT 27
17961: EQUAL
17962: IFFALSE 17972
// sAI := true ;
17964: LD_ADDR_EXP 93
17968: PUSH
17969: LD_INT 1
17971: ST_TO_ADDR
// if p3 = 28 then
17972: LD_VAR 0 3
17976: PUSH
17977: LD_INT 28
17979: EQUAL
17980: IFFALSE 17990
// sCargo := true ;
17982: LD_ADDR_EXP 96
17986: PUSH
17987: LD_INT 1
17989: ST_TO_ADDR
// if p3 = 29 then
17990: LD_VAR 0 3
17994: PUSH
17995: LD_INT 29
17997: EQUAL
17998: IFFALSE 18008
// sDLaser := true ;
18000: LD_ADDR_EXP 97
18004: PUSH
18005: LD_INT 1
18007: ST_TO_ADDR
// if p3 = 30 then
18008: LD_VAR 0 3
18012: PUSH
18013: LD_INT 30
18015: EQUAL
18016: IFFALSE 18026
// sExchange := true ;
18018: LD_ADDR_EXP 98
18022: PUSH
18023: LD_INT 1
18025: ST_TO_ADDR
// if p3 = 31 then
18026: LD_VAR 0 3
18030: PUSH
18031: LD_INT 31
18033: EQUAL
18034: IFFALSE 18044
// sFac := true ;
18036: LD_ADDR_EXP 99
18040: PUSH
18041: LD_INT 1
18043: ST_TO_ADDR
// if p3 = 32 then
18044: LD_VAR 0 3
18048: PUSH
18049: LD_INT 32
18051: EQUAL
18052: IFFALSE 18062
// sPower := true ;
18054: LD_ADDR_EXP 100
18058: PUSH
18059: LD_INT 1
18061: ST_TO_ADDR
// if p3 = 33 then
18062: LD_VAR 0 3
18066: PUSH
18067: LD_INT 33
18069: EQUAL
18070: IFFALSE 18080
// sRandom := true ;
18072: LD_ADDR_EXP 101
18076: PUSH
18077: LD_INT 1
18079: ST_TO_ADDR
// if p3 = 34 then
18080: LD_VAR 0 3
18084: PUSH
18085: LD_INT 34
18087: EQUAL
18088: IFFALSE 18098
// sShield := true ;
18090: LD_ADDR_EXP 102
18094: PUSH
18095: LD_INT 1
18097: ST_TO_ADDR
// if p3 = 35 then
18098: LD_VAR 0 3
18102: PUSH
18103: LD_INT 35
18105: EQUAL
18106: IFFALSE 18116
// sTime := true ;
18108: LD_ADDR_EXP 103
18112: PUSH
18113: LD_INT 1
18115: ST_TO_ADDR
// if p3 = 36 then
18116: LD_VAR 0 3
18120: PUSH
18121: LD_INT 36
18123: EQUAL
18124: IFFALSE 18134
// sTools := true ;
18126: LD_ADDR_EXP 104
18130: PUSH
18131: LD_INT 1
18133: ST_TO_ADDR
// if p3 = 101 then
18134: LD_VAR 0 3
18138: PUSH
18139: LD_INT 101
18141: EQUAL
18142: IFFALSE 18152
// sSold := true ;
18144: LD_ADDR_EXP 69
18148: PUSH
18149: LD_INT 1
18151: ST_TO_ADDR
// if p3 = 102 then
18152: LD_VAR 0 3
18156: PUSH
18157: LD_INT 102
18159: EQUAL
18160: IFFALSE 18170
// sDiff := true ;
18162: LD_ADDR_EXP 70
18166: PUSH
18167: LD_INT 1
18169: ST_TO_ADDR
// if p3 = 103 then
18170: LD_VAR 0 3
18174: PUSH
18175: LD_INT 103
18177: EQUAL
18178: IFFALSE 18188
// sFog := true ;
18180: LD_ADDR_EXP 73
18184: PUSH
18185: LD_INT 1
18187: ST_TO_ADDR
// if p3 = 104 then
18188: LD_VAR 0 3
18192: PUSH
18193: LD_INT 104
18195: EQUAL
18196: IFFALSE 18206
// sReset := true ;
18198: LD_ADDR_EXP 74
18202: PUSH
18203: LD_INT 1
18205: ST_TO_ADDR
// if p3 = 105 then
18206: LD_VAR 0 3
18210: PUSH
18211: LD_INT 105
18213: EQUAL
18214: IFFALSE 18224
// sSun := true ;
18216: LD_ADDR_EXP 75
18220: PUSH
18221: LD_INT 1
18223: ST_TO_ADDR
// if p3 = 106 then
18224: LD_VAR 0 3
18228: PUSH
18229: LD_INT 106
18231: EQUAL
18232: IFFALSE 18242
// sTiger := true ;
18234: LD_ADDR_EXP 71
18238: PUSH
18239: LD_INT 1
18241: ST_TO_ADDR
// if p3 = 107 then
18242: LD_VAR 0 3
18246: PUSH
18247: LD_INT 107
18249: EQUAL
18250: IFFALSE 18260
// sBomb := true ;
18252: LD_ADDR_EXP 72
18256: PUSH
18257: LD_INT 1
18259: ST_TO_ADDR
// if p3 = 108 then
18260: LD_VAR 0 3
18264: PUSH
18265: LD_INT 108
18267: EQUAL
18268: IFFALSE 18278
// sWound := true ;
18270: LD_ADDR_EXP 80
18274: PUSH
18275: LD_INT 1
18277: ST_TO_ADDR
// if p3 = 109 then
18278: LD_VAR 0 3
18282: PUSH
18283: LD_INT 109
18285: EQUAL
18286: IFFALSE 18296
// sBetray := true ;
18288: LD_ADDR_EXP 84
18292: PUSH
18293: LD_INT 1
18295: ST_TO_ADDR
// if p3 = 110 then
18296: LD_VAR 0 3
18300: PUSH
18301: LD_INT 110
18303: EQUAL
18304: IFFALSE 18314
// sContamin := true ;
18306: LD_ADDR_EXP 85
18310: PUSH
18311: LD_INT 1
18313: ST_TO_ADDR
// if p3 = 111 then
18314: LD_VAR 0 3
18318: PUSH
18319: LD_INT 111
18321: EQUAL
18322: IFFALSE 18332
// sOil := true ;
18324: LD_ADDR_EXP 87
18328: PUSH
18329: LD_INT 1
18331: ST_TO_ADDR
// if p3 = 112 then
18332: LD_VAR 0 3
18336: PUSH
18337: LD_INT 112
18339: EQUAL
18340: IFFALSE 18350
// sStu := true ;
18342: LD_ADDR_EXP 91
18346: PUSH
18347: LD_INT 1
18349: ST_TO_ADDR
// if p3 = 113 then
18350: LD_VAR 0 3
18354: PUSH
18355: LD_INT 113
18357: EQUAL
18358: IFFALSE 18368
// sBazooka := true ;
18360: LD_ADDR_EXP 94
18364: PUSH
18365: LD_INT 1
18367: ST_TO_ADDR
// if p3 = 114 then
18368: LD_VAR 0 3
18372: PUSH
18373: LD_INT 114
18375: EQUAL
18376: IFFALSE 18386
// sMortar := true ;
18378: LD_ADDR_EXP 95
18382: PUSH
18383: LD_INT 1
18385: ST_TO_ADDR
// if p3 = 115 then
18386: LD_VAR 0 3
18390: PUSH
18391: LD_INT 115
18393: EQUAL
18394: IFFALSE 18404
// sRanger := true ;
18396: LD_ADDR_EXP 105
18400: PUSH
18401: LD_INT 1
18403: ST_TO_ADDR
// if p3 = 116 then
18404: LD_VAR 0 3
18408: PUSH
18409: LD_INT 116
18411: EQUAL
18412: IFFALSE 18422
// sComputer := true ;
18414: LD_ADDR_EXP 106
18418: PUSH
18419: LD_INT 1
18421: ST_TO_ADDR
// if p3 = 117 then
18422: LD_VAR 0 3
18426: PUSH
18427: LD_INT 117
18429: EQUAL
18430: IFFALSE 18440
// s30 := true ;
18432: LD_ADDR_EXP 107
18436: PUSH
18437: LD_INT 1
18439: ST_TO_ADDR
// if p3 = 118 then
18440: LD_VAR 0 3
18444: PUSH
18445: LD_INT 118
18447: EQUAL
18448: IFFALSE 18458
// s60 := true ;
18450: LD_ADDR_EXP 108
18454: PUSH
18455: LD_INT 1
18457: ST_TO_ADDR
// end ; if p2 = 101 then
18458: LD_VAR 0 2
18462: PUSH
18463: LD_INT 101
18465: EQUAL
18466: IFFALSE 18594
// begin case p3 of 1 :
18468: LD_VAR 0 3
18472: PUSH
18473: LD_INT 1
18475: DOUBLE
18476: EQUAL
18477: IFTRUE 18481
18479: GO 18488
18481: POP
// hHackUnlimitedResources ; 2 :
18482: CALL 30692 0 0
18486: GO 18594
18488: LD_INT 2
18490: DOUBLE
18491: EQUAL
18492: IFTRUE 18496
18494: GO 18503
18496: POP
// hHackSetLevel10 ; 3 :
18497: CALL 30825 0 0
18501: GO 18594
18503: LD_INT 3
18505: DOUBLE
18506: EQUAL
18507: IFTRUE 18511
18509: GO 18518
18511: POP
// hHackSetLevel10YourUnits ; 4 :
18512: CALL 30910 0 0
18516: GO 18594
18518: LD_INT 4
18520: DOUBLE
18521: EQUAL
18522: IFTRUE 18526
18524: GO 18533
18526: POP
// hHackInvincible ; 5 :
18527: CALL 31358 0 0
18531: GO 18594
18533: LD_INT 5
18535: DOUBLE
18536: EQUAL
18537: IFTRUE 18541
18539: GO 18548
18541: POP
// hHackInvisible ; 6 :
18542: CALL 31469 0 0
18546: GO 18594
18548: LD_INT 6
18550: DOUBLE
18551: EQUAL
18552: IFTRUE 18556
18554: GO 18563
18556: POP
// hHackChangeYourSide ; 7 :
18557: CALL 31526 0 0
18561: GO 18594
18563: LD_INT 7
18565: DOUBLE
18566: EQUAL
18567: IFTRUE 18571
18569: GO 18578
18571: POP
// hHackChangeUnitSide ; 8 :
18572: CALL 31568 0 0
18576: GO 18594
18578: LD_INT 8
18580: DOUBLE
18581: EQUAL
18582: IFTRUE 18586
18584: GO 18593
18586: POP
// hHackFog ; end ;
18587: CALL 31669 0 0
18591: GO 18594
18593: POP
// end ; end ;
18594: LD_VAR 0 7
18598: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
18599: GO 18601
18601: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18602: LD_STRING initStreamRollete();
18604: PPUSH
18605: CALL_OW 559
// InitStreamMode ;
18609: CALL 18621 0 0
// DefineStreamItems ( false ) ;
18613: LD_INT 0
18615: PPUSH
18616: CALL 19085 0 1
// end ;
18620: END
// function InitStreamMode ; begin
18621: LD_INT 0
18623: PPUSH
// streamModeActive := false ;
18624: LD_ADDR_EXP 52
18628: PUSH
18629: LD_INT 0
18631: ST_TO_ADDR
// normalCounter := 36 ;
18632: LD_ADDR_EXP 53
18636: PUSH
18637: LD_INT 36
18639: ST_TO_ADDR
// hardcoreCounter := 18 ;
18640: LD_ADDR_EXP 54
18644: PUSH
18645: LD_INT 18
18647: ST_TO_ADDR
// sRocket := false ;
18648: LD_ADDR_EXP 57
18652: PUSH
18653: LD_INT 0
18655: ST_TO_ADDR
// sSpeed := false ;
18656: LD_ADDR_EXP 56
18660: PUSH
18661: LD_INT 0
18663: ST_TO_ADDR
// sEngine := false ;
18664: LD_ADDR_EXP 58
18668: PUSH
18669: LD_INT 0
18671: ST_TO_ADDR
// sSpec := false ;
18672: LD_ADDR_EXP 55
18676: PUSH
18677: LD_INT 0
18679: ST_TO_ADDR
// sLevel := false ;
18680: LD_ADDR_EXP 59
18684: PUSH
18685: LD_INT 0
18687: ST_TO_ADDR
// sArmoury := false ;
18688: LD_ADDR_EXP 60
18692: PUSH
18693: LD_INT 0
18695: ST_TO_ADDR
// sRadar := false ;
18696: LD_ADDR_EXP 61
18700: PUSH
18701: LD_INT 0
18703: ST_TO_ADDR
// sBunker := false ;
18704: LD_ADDR_EXP 62
18708: PUSH
18709: LD_INT 0
18711: ST_TO_ADDR
// sHack := false ;
18712: LD_ADDR_EXP 63
18716: PUSH
18717: LD_INT 0
18719: ST_TO_ADDR
// sFire := false ;
18720: LD_ADDR_EXP 64
18724: PUSH
18725: LD_INT 0
18727: ST_TO_ADDR
// sRefresh := false ;
18728: LD_ADDR_EXP 65
18732: PUSH
18733: LD_INT 0
18735: ST_TO_ADDR
// sExp := false ;
18736: LD_ADDR_EXP 66
18740: PUSH
18741: LD_INT 0
18743: ST_TO_ADDR
// sDepot := false ;
18744: LD_ADDR_EXP 67
18748: PUSH
18749: LD_INT 0
18751: ST_TO_ADDR
// sFlag := false ;
18752: LD_ADDR_EXP 68
18756: PUSH
18757: LD_INT 0
18759: ST_TO_ADDR
// sKamikadze := false ;
18760: LD_ADDR_EXP 76
18764: PUSH
18765: LD_INT 0
18767: ST_TO_ADDR
// sTroll := false ;
18768: LD_ADDR_EXP 77
18772: PUSH
18773: LD_INT 0
18775: ST_TO_ADDR
// sSlow := false ;
18776: LD_ADDR_EXP 78
18780: PUSH
18781: LD_INT 0
18783: ST_TO_ADDR
// sLack := false ;
18784: LD_ADDR_EXP 79
18788: PUSH
18789: LD_INT 0
18791: ST_TO_ADDR
// sTank := false ;
18792: LD_ADDR_EXP 81
18796: PUSH
18797: LD_INT 0
18799: ST_TO_ADDR
// sRemote := false ;
18800: LD_ADDR_EXP 82
18804: PUSH
18805: LD_INT 0
18807: ST_TO_ADDR
// sPowell := false ;
18808: LD_ADDR_EXP 83
18812: PUSH
18813: LD_INT 0
18815: ST_TO_ADDR
// sTeleport := false ;
18816: LD_ADDR_EXP 86
18820: PUSH
18821: LD_INT 0
18823: ST_TO_ADDR
// sOilTower := false ;
18824: LD_ADDR_EXP 88
18828: PUSH
18829: LD_INT 0
18831: ST_TO_ADDR
// sShovel := false ;
18832: LD_ADDR_EXP 89
18836: PUSH
18837: LD_INT 0
18839: ST_TO_ADDR
// sSheik := false ;
18840: LD_ADDR_EXP 90
18844: PUSH
18845: LD_INT 0
18847: ST_TO_ADDR
// sEarthquake := false ;
18848: LD_ADDR_EXP 92
18852: PUSH
18853: LD_INT 0
18855: ST_TO_ADDR
// sAI := false ;
18856: LD_ADDR_EXP 93
18860: PUSH
18861: LD_INT 0
18863: ST_TO_ADDR
// sCargo := false ;
18864: LD_ADDR_EXP 96
18868: PUSH
18869: LD_INT 0
18871: ST_TO_ADDR
// sDLaser := false ;
18872: LD_ADDR_EXP 97
18876: PUSH
18877: LD_INT 0
18879: ST_TO_ADDR
// sExchange := false ;
18880: LD_ADDR_EXP 98
18884: PUSH
18885: LD_INT 0
18887: ST_TO_ADDR
// sFac := false ;
18888: LD_ADDR_EXP 99
18892: PUSH
18893: LD_INT 0
18895: ST_TO_ADDR
// sPower := false ;
18896: LD_ADDR_EXP 100
18900: PUSH
18901: LD_INT 0
18903: ST_TO_ADDR
// sRandom := false ;
18904: LD_ADDR_EXP 101
18908: PUSH
18909: LD_INT 0
18911: ST_TO_ADDR
// sShield := false ;
18912: LD_ADDR_EXP 102
18916: PUSH
18917: LD_INT 0
18919: ST_TO_ADDR
// sTime := false ;
18920: LD_ADDR_EXP 103
18924: PUSH
18925: LD_INT 0
18927: ST_TO_ADDR
// sTools := false ;
18928: LD_ADDR_EXP 104
18932: PUSH
18933: LD_INT 0
18935: ST_TO_ADDR
// sSold := false ;
18936: LD_ADDR_EXP 69
18940: PUSH
18941: LD_INT 0
18943: ST_TO_ADDR
// sDiff := false ;
18944: LD_ADDR_EXP 70
18948: PUSH
18949: LD_INT 0
18951: ST_TO_ADDR
// sFog := false ;
18952: LD_ADDR_EXP 73
18956: PUSH
18957: LD_INT 0
18959: ST_TO_ADDR
// sReset := false ;
18960: LD_ADDR_EXP 74
18964: PUSH
18965: LD_INT 0
18967: ST_TO_ADDR
// sSun := false ;
18968: LD_ADDR_EXP 75
18972: PUSH
18973: LD_INT 0
18975: ST_TO_ADDR
// sTiger := false ;
18976: LD_ADDR_EXP 71
18980: PUSH
18981: LD_INT 0
18983: ST_TO_ADDR
// sBomb := false ;
18984: LD_ADDR_EXP 72
18988: PUSH
18989: LD_INT 0
18991: ST_TO_ADDR
// sWound := false ;
18992: LD_ADDR_EXP 80
18996: PUSH
18997: LD_INT 0
18999: ST_TO_ADDR
// sBetray := false ;
19000: LD_ADDR_EXP 84
19004: PUSH
19005: LD_INT 0
19007: ST_TO_ADDR
// sContamin := false ;
19008: LD_ADDR_EXP 85
19012: PUSH
19013: LD_INT 0
19015: ST_TO_ADDR
// sOil := false ;
19016: LD_ADDR_EXP 87
19020: PUSH
19021: LD_INT 0
19023: ST_TO_ADDR
// sStu := false ;
19024: LD_ADDR_EXP 91
19028: PUSH
19029: LD_INT 0
19031: ST_TO_ADDR
// sBazooka := false ;
19032: LD_ADDR_EXP 94
19036: PUSH
19037: LD_INT 0
19039: ST_TO_ADDR
// sMortar := false ;
19040: LD_ADDR_EXP 95
19044: PUSH
19045: LD_INT 0
19047: ST_TO_ADDR
// sRanger := false ;
19048: LD_ADDR_EXP 105
19052: PUSH
19053: LD_INT 0
19055: ST_TO_ADDR
// sComputer := false ;
19056: LD_ADDR_EXP 106
19060: PUSH
19061: LD_INT 0
19063: ST_TO_ADDR
// s30 := false ;
19064: LD_ADDR_EXP 107
19068: PUSH
19069: LD_INT 0
19071: ST_TO_ADDR
// s60 := false ;
19072: LD_ADDR_EXP 108
19076: PUSH
19077: LD_INT 0
19079: ST_TO_ADDR
// end ;
19080: LD_VAR 0 1
19084: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19085: LD_INT 0
19087: PPUSH
19088: PPUSH
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
19093: PPUSH
// result := [ ] ;
19094: LD_ADDR_VAR 0 2
19098: PUSH
19099: EMPTY
19100: ST_TO_ADDR
// if campaign_id = 1 then
19101: LD_OWVAR 69
19105: PUSH
19106: LD_INT 1
19108: EQUAL
19109: IFFALSE 22275
// begin case mission_number of 1 :
19111: LD_OWVAR 70
19115: PUSH
19116: LD_INT 1
19118: DOUBLE
19119: EQUAL
19120: IFTRUE 19124
19122: GO 19200
19124: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19125: LD_ADDR_VAR 0 2
19129: PUSH
19130: LD_INT 2
19132: PUSH
19133: LD_INT 4
19135: PUSH
19136: LD_INT 11
19138: PUSH
19139: LD_INT 12
19141: PUSH
19142: LD_INT 15
19144: PUSH
19145: LD_INT 16
19147: PUSH
19148: LD_INT 22
19150: PUSH
19151: LD_INT 23
19153: PUSH
19154: LD_INT 26
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 101
19170: PUSH
19171: LD_INT 102
19173: PUSH
19174: LD_INT 106
19176: PUSH
19177: LD_INT 116
19179: PUSH
19180: LD_INT 117
19182: PUSH
19183: LD_INT 118
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: ST_TO_ADDR
19198: GO 22273
19200: LD_INT 2
19202: DOUBLE
19203: EQUAL
19204: IFTRUE 19208
19206: GO 19292
19208: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19209: LD_ADDR_VAR 0 2
19213: PUSH
19214: LD_INT 2
19216: PUSH
19217: LD_INT 4
19219: PUSH
19220: LD_INT 11
19222: PUSH
19223: LD_INT 12
19225: PUSH
19226: LD_INT 15
19228: PUSH
19229: LD_INT 16
19231: PUSH
19232: LD_INT 22
19234: PUSH
19235: LD_INT 23
19237: PUSH
19238: LD_INT 26
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 101
19254: PUSH
19255: LD_INT 102
19257: PUSH
19258: LD_INT 105
19260: PUSH
19261: LD_INT 106
19263: PUSH
19264: LD_INT 108
19266: PUSH
19267: LD_INT 116
19269: PUSH
19270: LD_INT 117
19272: PUSH
19273: LD_INT 118
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: ST_TO_ADDR
19290: GO 22273
19292: LD_INT 3
19294: DOUBLE
19295: EQUAL
19296: IFTRUE 19300
19298: GO 19388
19300: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19301: LD_ADDR_VAR 0 2
19305: PUSH
19306: LD_INT 2
19308: PUSH
19309: LD_INT 4
19311: PUSH
19312: LD_INT 5
19314: PUSH
19315: LD_INT 11
19317: PUSH
19318: LD_INT 12
19320: PUSH
19321: LD_INT 15
19323: PUSH
19324: LD_INT 16
19326: PUSH
19327: LD_INT 22
19329: PUSH
19330: LD_INT 26
19332: PUSH
19333: LD_INT 36
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 101
19350: PUSH
19351: LD_INT 102
19353: PUSH
19354: LD_INT 105
19356: PUSH
19357: LD_INT 106
19359: PUSH
19360: LD_INT 108
19362: PUSH
19363: LD_INT 116
19365: PUSH
19366: LD_INT 117
19368: PUSH
19369: LD_INT 118
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: ST_TO_ADDR
19386: GO 22273
19388: LD_INT 4
19390: DOUBLE
19391: EQUAL
19392: IFTRUE 19396
19394: GO 19492
19396: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19397: LD_ADDR_VAR 0 2
19401: PUSH
19402: LD_INT 2
19404: PUSH
19405: LD_INT 4
19407: PUSH
19408: LD_INT 5
19410: PUSH
19411: LD_INT 8
19413: PUSH
19414: LD_INT 11
19416: PUSH
19417: LD_INT 12
19419: PUSH
19420: LD_INT 15
19422: PUSH
19423: LD_INT 16
19425: PUSH
19426: LD_INT 22
19428: PUSH
19429: LD_INT 23
19431: PUSH
19432: LD_INT 26
19434: PUSH
19435: LD_INT 36
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 101
19454: PUSH
19455: LD_INT 102
19457: PUSH
19458: LD_INT 105
19460: PUSH
19461: LD_INT 106
19463: PUSH
19464: LD_INT 108
19466: PUSH
19467: LD_INT 116
19469: PUSH
19470: LD_INT 117
19472: PUSH
19473: LD_INT 118
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: ST_TO_ADDR
19490: GO 22273
19492: LD_INT 5
19494: DOUBLE
19495: EQUAL
19496: IFTRUE 19500
19498: GO 19612
19500: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19501: LD_ADDR_VAR 0 2
19505: PUSH
19506: LD_INT 2
19508: PUSH
19509: LD_INT 4
19511: PUSH
19512: LD_INT 5
19514: PUSH
19515: LD_INT 6
19517: PUSH
19518: LD_INT 8
19520: PUSH
19521: LD_INT 11
19523: PUSH
19524: LD_INT 12
19526: PUSH
19527: LD_INT 15
19529: PUSH
19530: LD_INT 16
19532: PUSH
19533: LD_INT 22
19535: PUSH
19536: LD_INT 23
19538: PUSH
19539: LD_INT 25
19541: PUSH
19542: LD_INT 26
19544: PUSH
19545: LD_INT 36
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 101
19566: PUSH
19567: LD_INT 102
19569: PUSH
19570: LD_INT 105
19572: PUSH
19573: LD_INT 106
19575: PUSH
19576: LD_INT 108
19578: PUSH
19579: LD_INT 109
19581: PUSH
19582: LD_INT 112
19584: PUSH
19585: LD_INT 116
19587: PUSH
19588: LD_INT 117
19590: PUSH
19591: LD_INT 118
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: ST_TO_ADDR
19610: GO 22273
19612: LD_INT 6
19614: DOUBLE
19615: EQUAL
19616: IFTRUE 19620
19618: GO 19752
19620: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19621: LD_ADDR_VAR 0 2
19625: PUSH
19626: LD_INT 2
19628: PUSH
19629: LD_INT 4
19631: PUSH
19632: LD_INT 5
19634: PUSH
19635: LD_INT 6
19637: PUSH
19638: LD_INT 8
19640: PUSH
19641: LD_INT 11
19643: PUSH
19644: LD_INT 12
19646: PUSH
19647: LD_INT 15
19649: PUSH
19650: LD_INT 16
19652: PUSH
19653: LD_INT 20
19655: PUSH
19656: LD_INT 21
19658: PUSH
19659: LD_INT 22
19661: PUSH
19662: LD_INT 23
19664: PUSH
19665: LD_INT 25
19667: PUSH
19668: LD_INT 26
19670: PUSH
19671: LD_INT 30
19673: PUSH
19674: LD_INT 31
19676: PUSH
19677: LD_INT 32
19679: PUSH
19680: LD_INT 36
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 101
19706: PUSH
19707: LD_INT 102
19709: PUSH
19710: LD_INT 105
19712: PUSH
19713: LD_INT 106
19715: PUSH
19716: LD_INT 108
19718: PUSH
19719: LD_INT 109
19721: PUSH
19722: LD_INT 112
19724: PUSH
19725: LD_INT 116
19727: PUSH
19728: LD_INT 117
19730: PUSH
19731: LD_INT 118
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: ST_TO_ADDR
19750: GO 22273
19752: LD_INT 7
19754: DOUBLE
19755: EQUAL
19756: IFTRUE 19760
19758: GO 19872
19760: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19761: LD_ADDR_VAR 0 2
19765: PUSH
19766: LD_INT 2
19768: PUSH
19769: LD_INT 4
19771: PUSH
19772: LD_INT 5
19774: PUSH
19775: LD_INT 7
19777: PUSH
19778: LD_INT 11
19780: PUSH
19781: LD_INT 12
19783: PUSH
19784: LD_INT 15
19786: PUSH
19787: LD_INT 16
19789: PUSH
19790: LD_INT 20
19792: PUSH
19793: LD_INT 21
19795: PUSH
19796: LD_INT 22
19798: PUSH
19799: LD_INT 23
19801: PUSH
19802: LD_INT 25
19804: PUSH
19805: LD_INT 26
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 101
19826: PUSH
19827: LD_INT 102
19829: PUSH
19830: LD_INT 103
19832: PUSH
19833: LD_INT 105
19835: PUSH
19836: LD_INT 106
19838: PUSH
19839: LD_INT 108
19841: PUSH
19842: LD_INT 112
19844: PUSH
19845: LD_INT 116
19847: PUSH
19848: LD_INT 117
19850: PUSH
19851: LD_INT 118
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: ST_TO_ADDR
19870: GO 22273
19872: LD_INT 8
19874: DOUBLE
19875: EQUAL
19876: IFTRUE 19880
19878: GO 20020
19880: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19881: LD_ADDR_VAR 0 2
19885: PUSH
19886: LD_INT 2
19888: PUSH
19889: LD_INT 4
19891: PUSH
19892: LD_INT 5
19894: PUSH
19895: LD_INT 6
19897: PUSH
19898: LD_INT 7
19900: PUSH
19901: LD_INT 8
19903: PUSH
19904: LD_INT 11
19906: PUSH
19907: LD_INT 12
19909: PUSH
19910: LD_INT 15
19912: PUSH
19913: LD_INT 16
19915: PUSH
19916: LD_INT 20
19918: PUSH
19919: LD_INT 21
19921: PUSH
19922: LD_INT 22
19924: PUSH
19925: LD_INT 23
19927: PUSH
19928: LD_INT 25
19930: PUSH
19931: LD_INT 26
19933: PUSH
19934: LD_INT 30
19936: PUSH
19937: LD_INT 31
19939: PUSH
19940: LD_INT 32
19942: PUSH
19943: LD_INT 36
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 101
19970: PUSH
19971: LD_INT 102
19973: PUSH
19974: LD_INT 103
19976: PUSH
19977: LD_INT 105
19979: PUSH
19980: LD_INT 106
19982: PUSH
19983: LD_INT 108
19985: PUSH
19986: LD_INT 109
19988: PUSH
19989: LD_INT 112
19991: PUSH
19992: LD_INT 116
19994: PUSH
19995: LD_INT 117
19997: PUSH
19998: LD_INT 118
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: ST_TO_ADDR
20018: GO 22273
20020: LD_INT 9
20022: DOUBLE
20023: EQUAL
20024: IFTRUE 20028
20026: GO 20176
20028: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20029: LD_ADDR_VAR 0 2
20033: PUSH
20034: LD_INT 2
20036: PUSH
20037: LD_INT 4
20039: PUSH
20040: LD_INT 5
20042: PUSH
20043: LD_INT 6
20045: PUSH
20046: LD_INT 7
20048: PUSH
20049: LD_INT 8
20051: PUSH
20052: LD_INT 11
20054: PUSH
20055: LD_INT 12
20057: PUSH
20058: LD_INT 15
20060: PUSH
20061: LD_INT 16
20063: PUSH
20064: LD_INT 20
20066: PUSH
20067: LD_INT 21
20069: PUSH
20070: LD_INT 22
20072: PUSH
20073: LD_INT 23
20075: PUSH
20076: LD_INT 25
20078: PUSH
20079: LD_INT 26
20081: PUSH
20082: LD_INT 28
20084: PUSH
20085: LD_INT 30
20087: PUSH
20088: LD_INT 31
20090: PUSH
20091: LD_INT 32
20093: PUSH
20094: LD_INT 36
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 101
20122: PUSH
20123: LD_INT 102
20125: PUSH
20126: LD_INT 103
20128: PUSH
20129: LD_INT 105
20131: PUSH
20132: LD_INT 106
20134: PUSH
20135: LD_INT 108
20137: PUSH
20138: LD_INT 109
20140: PUSH
20141: LD_INT 112
20143: PUSH
20144: LD_INT 114
20146: PUSH
20147: LD_INT 116
20149: PUSH
20150: LD_INT 117
20152: PUSH
20153: LD_INT 118
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: ST_TO_ADDR
20174: GO 22273
20176: LD_INT 10
20178: DOUBLE
20179: EQUAL
20180: IFTRUE 20184
20182: GO 20380
20184: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20185: LD_ADDR_VAR 0 2
20189: PUSH
20190: LD_INT 2
20192: PUSH
20193: LD_INT 4
20195: PUSH
20196: LD_INT 5
20198: PUSH
20199: LD_INT 6
20201: PUSH
20202: LD_INT 7
20204: PUSH
20205: LD_INT 8
20207: PUSH
20208: LD_INT 9
20210: PUSH
20211: LD_INT 10
20213: PUSH
20214: LD_INT 11
20216: PUSH
20217: LD_INT 12
20219: PUSH
20220: LD_INT 13
20222: PUSH
20223: LD_INT 14
20225: PUSH
20226: LD_INT 15
20228: PUSH
20229: LD_INT 16
20231: PUSH
20232: LD_INT 17
20234: PUSH
20235: LD_INT 18
20237: PUSH
20238: LD_INT 19
20240: PUSH
20241: LD_INT 20
20243: PUSH
20244: LD_INT 21
20246: PUSH
20247: LD_INT 22
20249: PUSH
20250: LD_INT 23
20252: PUSH
20253: LD_INT 24
20255: PUSH
20256: LD_INT 25
20258: PUSH
20259: LD_INT 26
20261: PUSH
20262: LD_INT 28
20264: PUSH
20265: LD_INT 30
20267: PUSH
20268: LD_INT 31
20270: PUSH
20271: LD_INT 32
20273: PUSH
20274: LD_INT 36
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 101
20310: PUSH
20311: LD_INT 102
20313: PUSH
20314: LD_INT 103
20316: PUSH
20317: LD_INT 104
20319: PUSH
20320: LD_INT 105
20322: PUSH
20323: LD_INT 106
20325: PUSH
20326: LD_INT 107
20328: PUSH
20329: LD_INT 108
20331: PUSH
20332: LD_INT 109
20334: PUSH
20335: LD_INT 110
20337: PUSH
20338: LD_INT 111
20340: PUSH
20341: LD_INT 112
20343: PUSH
20344: LD_INT 114
20346: PUSH
20347: LD_INT 116
20349: PUSH
20350: LD_INT 117
20352: PUSH
20353: LD_INT 118
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: ST_TO_ADDR
20378: GO 22273
20380: LD_INT 11
20382: DOUBLE
20383: EQUAL
20384: IFTRUE 20388
20386: GO 20592
20388: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20389: LD_ADDR_VAR 0 2
20393: PUSH
20394: LD_INT 2
20396: PUSH
20397: LD_INT 3
20399: PUSH
20400: LD_INT 4
20402: PUSH
20403: LD_INT 5
20405: PUSH
20406: LD_INT 6
20408: PUSH
20409: LD_INT 7
20411: PUSH
20412: LD_INT 8
20414: PUSH
20415: LD_INT 9
20417: PUSH
20418: LD_INT 10
20420: PUSH
20421: LD_INT 11
20423: PUSH
20424: LD_INT 12
20426: PUSH
20427: LD_INT 13
20429: PUSH
20430: LD_INT 14
20432: PUSH
20433: LD_INT 15
20435: PUSH
20436: LD_INT 16
20438: PUSH
20439: LD_INT 17
20441: PUSH
20442: LD_INT 18
20444: PUSH
20445: LD_INT 19
20447: PUSH
20448: LD_INT 20
20450: PUSH
20451: LD_INT 21
20453: PUSH
20454: LD_INT 22
20456: PUSH
20457: LD_INT 23
20459: PUSH
20460: LD_INT 24
20462: PUSH
20463: LD_INT 25
20465: PUSH
20466: LD_INT 26
20468: PUSH
20469: LD_INT 28
20471: PUSH
20472: LD_INT 30
20474: PUSH
20475: LD_INT 31
20477: PUSH
20478: LD_INT 32
20480: PUSH
20481: LD_INT 34
20483: PUSH
20484: LD_INT 36
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 101
20522: PUSH
20523: LD_INT 102
20525: PUSH
20526: LD_INT 103
20528: PUSH
20529: LD_INT 104
20531: PUSH
20532: LD_INT 105
20534: PUSH
20535: LD_INT 106
20537: PUSH
20538: LD_INT 107
20540: PUSH
20541: LD_INT 108
20543: PUSH
20544: LD_INT 109
20546: PUSH
20547: LD_INT 110
20549: PUSH
20550: LD_INT 111
20552: PUSH
20553: LD_INT 112
20555: PUSH
20556: LD_INT 114
20558: PUSH
20559: LD_INT 116
20561: PUSH
20562: LD_INT 117
20564: PUSH
20565: LD_INT 118
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: ST_TO_ADDR
20590: GO 22273
20592: LD_INT 12
20594: DOUBLE
20595: EQUAL
20596: IFTRUE 20600
20598: GO 20820
20600: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20601: LD_ADDR_VAR 0 2
20605: PUSH
20606: LD_INT 1
20608: PUSH
20609: LD_INT 2
20611: PUSH
20612: LD_INT 3
20614: PUSH
20615: LD_INT 4
20617: PUSH
20618: LD_INT 5
20620: PUSH
20621: LD_INT 6
20623: PUSH
20624: LD_INT 7
20626: PUSH
20627: LD_INT 8
20629: PUSH
20630: LD_INT 9
20632: PUSH
20633: LD_INT 10
20635: PUSH
20636: LD_INT 11
20638: PUSH
20639: LD_INT 12
20641: PUSH
20642: LD_INT 13
20644: PUSH
20645: LD_INT 14
20647: PUSH
20648: LD_INT 15
20650: PUSH
20651: LD_INT 16
20653: PUSH
20654: LD_INT 17
20656: PUSH
20657: LD_INT 18
20659: PUSH
20660: LD_INT 19
20662: PUSH
20663: LD_INT 20
20665: PUSH
20666: LD_INT 21
20668: PUSH
20669: LD_INT 22
20671: PUSH
20672: LD_INT 23
20674: PUSH
20675: LD_INT 24
20677: PUSH
20678: LD_INT 25
20680: PUSH
20681: LD_INT 26
20683: PUSH
20684: LD_INT 27
20686: PUSH
20687: LD_INT 28
20689: PUSH
20690: LD_INT 30
20692: PUSH
20693: LD_INT 31
20695: PUSH
20696: LD_INT 32
20698: PUSH
20699: LD_INT 33
20701: PUSH
20702: LD_INT 34
20704: PUSH
20705: LD_INT 36
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 101
20746: PUSH
20747: LD_INT 102
20749: PUSH
20750: LD_INT 103
20752: PUSH
20753: LD_INT 104
20755: PUSH
20756: LD_INT 105
20758: PUSH
20759: LD_INT 106
20761: PUSH
20762: LD_INT 107
20764: PUSH
20765: LD_INT 108
20767: PUSH
20768: LD_INT 109
20770: PUSH
20771: LD_INT 110
20773: PUSH
20774: LD_INT 111
20776: PUSH
20777: LD_INT 112
20779: PUSH
20780: LD_INT 113
20782: PUSH
20783: LD_INT 114
20785: PUSH
20786: LD_INT 116
20788: PUSH
20789: LD_INT 117
20791: PUSH
20792: LD_INT 118
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: ST_TO_ADDR
20818: GO 22273
20820: LD_INT 13
20822: DOUBLE
20823: EQUAL
20824: IFTRUE 20828
20826: GO 21036
20828: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20829: LD_ADDR_VAR 0 2
20833: PUSH
20834: LD_INT 1
20836: PUSH
20837: LD_INT 2
20839: PUSH
20840: LD_INT 3
20842: PUSH
20843: LD_INT 4
20845: PUSH
20846: LD_INT 5
20848: PUSH
20849: LD_INT 8
20851: PUSH
20852: LD_INT 9
20854: PUSH
20855: LD_INT 10
20857: PUSH
20858: LD_INT 11
20860: PUSH
20861: LD_INT 12
20863: PUSH
20864: LD_INT 14
20866: PUSH
20867: LD_INT 15
20869: PUSH
20870: LD_INT 16
20872: PUSH
20873: LD_INT 17
20875: PUSH
20876: LD_INT 18
20878: PUSH
20879: LD_INT 19
20881: PUSH
20882: LD_INT 20
20884: PUSH
20885: LD_INT 21
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_INT 23
20893: PUSH
20894: LD_INT 24
20896: PUSH
20897: LD_INT 25
20899: PUSH
20900: LD_INT 26
20902: PUSH
20903: LD_INT 27
20905: PUSH
20906: LD_INT 28
20908: PUSH
20909: LD_INT 30
20911: PUSH
20912: LD_INT 31
20914: PUSH
20915: LD_INT 32
20917: PUSH
20918: LD_INT 33
20920: PUSH
20921: LD_INT 34
20923: PUSH
20924: LD_INT 36
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 101
20962: PUSH
20963: LD_INT 102
20965: PUSH
20966: LD_INT 103
20968: PUSH
20969: LD_INT 104
20971: PUSH
20972: LD_INT 105
20974: PUSH
20975: LD_INT 106
20977: PUSH
20978: LD_INT 107
20980: PUSH
20981: LD_INT 108
20983: PUSH
20984: LD_INT 109
20986: PUSH
20987: LD_INT 110
20989: PUSH
20990: LD_INT 111
20992: PUSH
20993: LD_INT 112
20995: PUSH
20996: LD_INT 113
20998: PUSH
20999: LD_INT 114
21001: PUSH
21002: LD_INT 116
21004: PUSH
21005: LD_INT 117
21007: PUSH
21008: LD_INT 118
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: ST_TO_ADDR
21034: GO 22273
21036: LD_INT 14
21038: DOUBLE
21039: EQUAL
21040: IFTRUE 21044
21042: GO 21268
21044: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21045: LD_ADDR_VAR 0 2
21049: PUSH
21050: LD_INT 1
21052: PUSH
21053: LD_INT 2
21055: PUSH
21056: LD_INT 3
21058: PUSH
21059: LD_INT 4
21061: PUSH
21062: LD_INT 5
21064: PUSH
21065: LD_INT 6
21067: PUSH
21068: LD_INT 7
21070: PUSH
21071: LD_INT 8
21073: PUSH
21074: LD_INT 9
21076: PUSH
21077: LD_INT 10
21079: PUSH
21080: LD_INT 11
21082: PUSH
21083: LD_INT 12
21085: PUSH
21086: LD_INT 13
21088: PUSH
21089: LD_INT 14
21091: PUSH
21092: LD_INT 15
21094: PUSH
21095: LD_INT 16
21097: PUSH
21098: LD_INT 17
21100: PUSH
21101: LD_INT 18
21103: PUSH
21104: LD_INT 19
21106: PUSH
21107: LD_INT 20
21109: PUSH
21110: LD_INT 21
21112: PUSH
21113: LD_INT 22
21115: PUSH
21116: LD_INT 23
21118: PUSH
21119: LD_INT 24
21121: PUSH
21122: LD_INT 25
21124: PUSH
21125: LD_INT 26
21127: PUSH
21128: LD_INT 27
21130: PUSH
21131: LD_INT 28
21133: PUSH
21134: LD_INT 29
21136: PUSH
21137: LD_INT 30
21139: PUSH
21140: LD_INT 31
21142: PUSH
21143: LD_INT 32
21145: PUSH
21146: LD_INT 33
21148: PUSH
21149: LD_INT 34
21151: PUSH
21152: LD_INT 36
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 101
21194: PUSH
21195: LD_INT 102
21197: PUSH
21198: LD_INT 103
21200: PUSH
21201: LD_INT 104
21203: PUSH
21204: LD_INT 105
21206: PUSH
21207: LD_INT 106
21209: PUSH
21210: LD_INT 107
21212: PUSH
21213: LD_INT 108
21215: PUSH
21216: LD_INT 109
21218: PUSH
21219: LD_INT 110
21221: PUSH
21222: LD_INT 111
21224: PUSH
21225: LD_INT 112
21227: PUSH
21228: LD_INT 113
21230: PUSH
21231: LD_INT 114
21233: PUSH
21234: LD_INT 116
21236: PUSH
21237: LD_INT 117
21239: PUSH
21240: LD_INT 118
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: ST_TO_ADDR
21266: GO 22273
21268: LD_INT 15
21270: DOUBLE
21271: EQUAL
21272: IFTRUE 21276
21274: GO 21500
21276: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21277: LD_ADDR_VAR 0 2
21281: PUSH
21282: LD_INT 1
21284: PUSH
21285: LD_INT 2
21287: PUSH
21288: LD_INT 3
21290: PUSH
21291: LD_INT 4
21293: PUSH
21294: LD_INT 5
21296: PUSH
21297: LD_INT 6
21299: PUSH
21300: LD_INT 7
21302: PUSH
21303: LD_INT 8
21305: PUSH
21306: LD_INT 9
21308: PUSH
21309: LD_INT 10
21311: PUSH
21312: LD_INT 11
21314: PUSH
21315: LD_INT 12
21317: PUSH
21318: LD_INT 13
21320: PUSH
21321: LD_INT 14
21323: PUSH
21324: LD_INT 15
21326: PUSH
21327: LD_INT 16
21329: PUSH
21330: LD_INT 17
21332: PUSH
21333: LD_INT 18
21335: PUSH
21336: LD_INT 19
21338: PUSH
21339: LD_INT 20
21341: PUSH
21342: LD_INT 21
21344: PUSH
21345: LD_INT 22
21347: PUSH
21348: LD_INT 23
21350: PUSH
21351: LD_INT 24
21353: PUSH
21354: LD_INT 25
21356: PUSH
21357: LD_INT 26
21359: PUSH
21360: LD_INT 27
21362: PUSH
21363: LD_INT 28
21365: PUSH
21366: LD_INT 29
21368: PUSH
21369: LD_INT 30
21371: PUSH
21372: LD_INT 31
21374: PUSH
21375: LD_INT 32
21377: PUSH
21378: LD_INT 33
21380: PUSH
21381: LD_INT 34
21383: PUSH
21384: LD_INT 36
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 101
21426: PUSH
21427: LD_INT 102
21429: PUSH
21430: LD_INT 103
21432: PUSH
21433: LD_INT 104
21435: PUSH
21436: LD_INT 105
21438: PUSH
21439: LD_INT 106
21441: PUSH
21442: LD_INT 107
21444: PUSH
21445: LD_INT 108
21447: PUSH
21448: LD_INT 109
21450: PUSH
21451: LD_INT 110
21453: PUSH
21454: LD_INT 111
21456: PUSH
21457: LD_INT 112
21459: PUSH
21460: LD_INT 113
21462: PUSH
21463: LD_INT 114
21465: PUSH
21466: LD_INT 116
21468: PUSH
21469: LD_INT 117
21471: PUSH
21472: LD_INT 118
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: ST_TO_ADDR
21498: GO 22273
21500: LD_INT 16
21502: DOUBLE
21503: EQUAL
21504: IFTRUE 21508
21506: GO 21644
21508: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21509: LD_ADDR_VAR 0 2
21513: PUSH
21514: LD_INT 2
21516: PUSH
21517: LD_INT 4
21519: PUSH
21520: LD_INT 5
21522: PUSH
21523: LD_INT 7
21525: PUSH
21526: LD_INT 11
21528: PUSH
21529: LD_INT 12
21531: PUSH
21532: LD_INT 15
21534: PUSH
21535: LD_INT 16
21537: PUSH
21538: LD_INT 20
21540: PUSH
21541: LD_INT 21
21543: PUSH
21544: LD_INT 22
21546: PUSH
21547: LD_INT 23
21549: PUSH
21550: LD_INT 25
21552: PUSH
21553: LD_INT 26
21555: PUSH
21556: LD_INT 30
21558: PUSH
21559: LD_INT 31
21561: PUSH
21562: LD_INT 32
21564: PUSH
21565: LD_INT 33
21567: PUSH
21568: LD_INT 34
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 101
21594: PUSH
21595: LD_INT 102
21597: PUSH
21598: LD_INT 103
21600: PUSH
21601: LD_INT 106
21603: PUSH
21604: LD_INT 108
21606: PUSH
21607: LD_INT 112
21609: PUSH
21610: LD_INT 113
21612: PUSH
21613: LD_INT 114
21615: PUSH
21616: LD_INT 116
21618: PUSH
21619: LD_INT 117
21621: PUSH
21622: LD_INT 118
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: ST_TO_ADDR
21642: GO 22273
21644: LD_INT 17
21646: DOUBLE
21647: EQUAL
21648: IFTRUE 21652
21650: GO 21876
21652: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21653: LD_ADDR_VAR 0 2
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: LD_INT 2
21663: PUSH
21664: LD_INT 3
21666: PUSH
21667: LD_INT 4
21669: PUSH
21670: LD_INT 5
21672: PUSH
21673: LD_INT 6
21675: PUSH
21676: LD_INT 7
21678: PUSH
21679: LD_INT 8
21681: PUSH
21682: LD_INT 9
21684: PUSH
21685: LD_INT 10
21687: PUSH
21688: LD_INT 11
21690: PUSH
21691: LD_INT 12
21693: PUSH
21694: LD_INT 13
21696: PUSH
21697: LD_INT 14
21699: PUSH
21700: LD_INT 15
21702: PUSH
21703: LD_INT 16
21705: PUSH
21706: LD_INT 17
21708: PUSH
21709: LD_INT 18
21711: PUSH
21712: LD_INT 19
21714: PUSH
21715: LD_INT 20
21717: PUSH
21718: LD_INT 21
21720: PUSH
21721: LD_INT 22
21723: PUSH
21724: LD_INT 23
21726: PUSH
21727: LD_INT 24
21729: PUSH
21730: LD_INT 25
21732: PUSH
21733: LD_INT 26
21735: PUSH
21736: LD_INT 27
21738: PUSH
21739: LD_INT 28
21741: PUSH
21742: LD_INT 29
21744: PUSH
21745: LD_INT 30
21747: PUSH
21748: LD_INT 31
21750: PUSH
21751: LD_INT 32
21753: PUSH
21754: LD_INT 33
21756: PUSH
21757: LD_INT 34
21759: PUSH
21760: LD_INT 36
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 101
21802: PUSH
21803: LD_INT 102
21805: PUSH
21806: LD_INT 103
21808: PUSH
21809: LD_INT 104
21811: PUSH
21812: LD_INT 105
21814: PUSH
21815: LD_INT 106
21817: PUSH
21818: LD_INT 107
21820: PUSH
21821: LD_INT 108
21823: PUSH
21824: LD_INT 109
21826: PUSH
21827: LD_INT 110
21829: PUSH
21830: LD_INT 111
21832: PUSH
21833: LD_INT 112
21835: PUSH
21836: LD_INT 113
21838: PUSH
21839: LD_INT 114
21841: PUSH
21842: LD_INT 116
21844: PUSH
21845: LD_INT 117
21847: PUSH
21848: LD_INT 118
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: ST_TO_ADDR
21874: GO 22273
21876: LD_INT 18
21878: DOUBLE
21879: EQUAL
21880: IFTRUE 21884
21882: GO 22032
21884: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21885: LD_ADDR_VAR 0 2
21889: PUSH
21890: LD_INT 2
21892: PUSH
21893: LD_INT 4
21895: PUSH
21896: LD_INT 5
21898: PUSH
21899: LD_INT 7
21901: PUSH
21902: LD_INT 11
21904: PUSH
21905: LD_INT 12
21907: PUSH
21908: LD_INT 15
21910: PUSH
21911: LD_INT 16
21913: PUSH
21914: LD_INT 20
21916: PUSH
21917: LD_INT 21
21919: PUSH
21920: LD_INT 22
21922: PUSH
21923: LD_INT 23
21925: PUSH
21926: LD_INT 25
21928: PUSH
21929: LD_INT 26
21931: PUSH
21932: LD_INT 30
21934: PUSH
21935: LD_INT 31
21937: PUSH
21938: LD_INT 32
21940: PUSH
21941: LD_INT 33
21943: PUSH
21944: LD_INT 34
21946: PUSH
21947: LD_INT 35
21949: PUSH
21950: LD_INT 36
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 101
21978: PUSH
21979: LD_INT 102
21981: PUSH
21982: LD_INT 103
21984: PUSH
21985: LD_INT 106
21987: PUSH
21988: LD_INT 108
21990: PUSH
21991: LD_INT 112
21993: PUSH
21994: LD_INT 113
21996: PUSH
21997: LD_INT 114
21999: PUSH
22000: LD_INT 115
22002: PUSH
22003: LD_INT 116
22005: PUSH
22006: LD_INT 117
22008: PUSH
22009: LD_INT 118
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: ST_TO_ADDR
22030: GO 22273
22032: LD_INT 19
22034: DOUBLE
22035: EQUAL
22036: IFTRUE 22040
22038: GO 22272
22040: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22041: LD_ADDR_VAR 0 2
22045: PUSH
22046: LD_INT 1
22048: PUSH
22049: LD_INT 2
22051: PUSH
22052: LD_INT 3
22054: PUSH
22055: LD_INT 4
22057: PUSH
22058: LD_INT 5
22060: PUSH
22061: LD_INT 6
22063: PUSH
22064: LD_INT 7
22066: PUSH
22067: LD_INT 8
22069: PUSH
22070: LD_INT 9
22072: PUSH
22073: LD_INT 10
22075: PUSH
22076: LD_INT 11
22078: PUSH
22079: LD_INT 12
22081: PUSH
22082: LD_INT 13
22084: PUSH
22085: LD_INT 14
22087: PUSH
22088: LD_INT 15
22090: PUSH
22091: LD_INT 16
22093: PUSH
22094: LD_INT 17
22096: PUSH
22097: LD_INT 18
22099: PUSH
22100: LD_INT 19
22102: PUSH
22103: LD_INT 20
22105: PUSH
22106: LD_INT 21
22108: PUSH
22109: LD_INT 22
22111: PUSH
22112: LD_INT 23
22114: PUSH
22115: LD_INT 24
22117: PUSH
22118: LD_INT 25
22120: PUSH
22121: LD_INT 26
22123: PUSH
22124: LD_INT 27
22126: PUSH
22127: LD_INT 28
22129: PUSH
22130: LD_INT 29
22132: PUSH
22133: LD_INT 30
22135: PUSH
22136: LD_INT 31
22138: PUSH
22139: LD_INT 32
22141: PUSH
22142: LD_INT 33
22144: PUSH
22145: LD_INT 34
22147: PUSH
22148: LD_INT 35
22150: PUSH
22151: LD_INT 36
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 101
22194: PUSH
22195: LD_INT 102
22197: PUSH
22198: LD_INT 103
22200: PUSH
22201: LD_INT 104
22203: PUSH
22204: LD_INT 105
22206: PUSH
22207: LD_INT 106
22209: PUSH
22210: LD_INT 107
22212: PUSH
22213: LD_INT 108
22215: PUSH
22216: LD_INT 109
22218: PUSH
22219: LD_INT 110
22221: PUSH
22222: LD_INT 111
22224: PUSH
22225: LD_INT 112
22227: PUSH
22228: LD_INT 113
22230: PUSH
22231: LD_INT 114
22233: PUSH
22234: LD_INT 115
22236: PUSH
22237: LD_INT 116
22239: PUSH
22240: LD_INT 117
22242: PUSH
22243: LD_INT 118
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: ST_TO_ADDR
22270: GO 22273
22272: POP
// end else
22273: GO 22504
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22275: LD_ADDR_VAR 0 2
22279: PUSH
22280: LD_INT 1
22282: PUSH
22283: LD_INT 2
22285: PUSH
22286: LD_INT 3
22288: PUSH
22289: LD_INT 4
22291: PUSH
22292: LD_INT 5
22294: PUSH
22295: LD_INT 6
22297: PUSH
22298: LD_INT 7
22300: PUSH
22301: LD_INT 8
22303: PUSH
22304: LD_INT 9
22306: PUSH
22307: LD_INT 10
22309: PUSH
22310: LD_INT 11
22312: PUSH
22313: LD_INT 12
22315: PUSH
22316: LD_INT 13
22318: PUSH
22319: LD_INT 14
22321: PUSH
22322: LD_INT 15
22324: PUSH
22325: LD_INT 16
22327: PUSH
22328: LD_INT 17
22330: PUSH
22331: LD_INT 18
22333: PUSH
22334: LD_INT 19
22336: PUSH
22337: LD_INT 20
22339: PUSH
22340: LD_INT 21
22342: PUSH
22343: LD_INT 22
22345: PUSH
22346: LD_INT 23
22348: PUSH
22349: LD_INT 24
22351: PUSH
22352: LD_INT 25
22354: PUSH
22355: LD_INT 26
22357: PUSH
22358: LD_INT 27
22360: PUSH
22361: LD_INT 28
22363: PUSH
22364: LD_INT 29
22366: PUSH
22367: LD_INT 30
22369: PUSH
22370: LD_INT 31
22372: PUSH
22373: LD_INT 32
22375: PUSH
22376: LD_INT 33
22378: PUSH
22379: LD_INT 34
22381: PUSH
22382: LD_INT 35
22384: PUSH
22385: LD_INT 36
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 101
22428: PUSH
22429: LD_INT 102
22431: PUSH
22432: LD_INT 103
22434: PUSH
22435: LD_INT 104
22437: PUSH
22438: LD_INT 105
22440: PUSH
22441: LD_INT 106
22443: PUSH
22444: LD_INT 107
22446: PUSH
22447: LD_INT 108
22449: PUSH
22450: LD_INT 109
22452: PUSH
22453: LD_INT 110
22455: PUSH
22456: LD_INT 111
22458: PUSH
22459: LD_INT 112
22461: PUSH
22462: LD_INT 113
22464: PUSH
22465: LD_INT 114
22467: PUSH
22468: LD_INT 115
22470: PUSH
22471: LD_INT 116
22473: PUSH
22474: LD_INT 117
22476: PUSH
22477: LD_INT 118
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: ST_TO_ADDR
// if result then
22504: LD_VAR 0 2
22508: IFFALSE 23294
// begin normal :=  ;
22510: LD_ADDR_VAR 0 5
22514: PUSH
22515: LD_STRING 
22517: ST_TO_ADDR
// hardcore :=  ;
22518: LD_ADDR_VAR 0 6
22522: PUSH
22523: LD_STRING 
22525: ST_TO_ADDR
// active :=  ;
22526: LD_ADDR_VAR 0 7
22530: PUSH
22531: LD_STRING 
22533: ST_TO_ADDR
// for i = 1 to normalCounter do
22534: LD_ADDR_VAR 0 8
22538: PUSH
22539: DOUBLE
22540: LD_INT 1
22542: DEC
22543: ST_TO_ADDR
22544: LD_EXP 53
22548: PUSH
22549: FOR_TO
22550: IFFALSE 22651
// begin tmp := 0 ;
22552: LD_ADDR_VAR 0 3
22556: PUSH
22557: LD_STRING 0
22559: ST_TO_ADDR
// if result [ 1 ] then
22560: LD_VAR 0 2
22564: PUSH
22565: LD_INT 1
22567: ARRAY
22568: IFFALSE 22633
// if result [ 1 ] [ 1 ] = i then
22570: LD_VAR 0 2
22574: PUSH
22575: LD_INT 1
22577: ARRAY
22578: PUSH
22579: LD_INT 1
22581: ARRAY
22582: PUSH
22583: LD_VAR 0 8
22587: EQUAL
22588: IFFALSE 22633
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22590: LD_ADDR_VAR 0 2
22594: PUSH
22595: LD_VAR 0 2
22599: PPUSH
22600: LD_INT 1
22602: PPUSH
22603: LD_VAR 0 2
22607: PUSH
22608: LD_INT 1
22610: ARRAY
22611: PPUSH
22612: LD_INT 1
22614: PPUSH
22615: CALL_OW 3
22619: PPUSH
22620: CALL_OW 1
22624: ST_TO_ADDR
// tmp := 1 ;
22625: LD_ADDR_VAR 0 3
22629: PUSH
22630: LD_STRING 1
22632: ST_TO_ADDR
// end ; normal := normal & tmp ;
22633: LD_ADDR_VAR 0 5
22637: PUSH
22638: LD_VAR 0 5
22642: PUSH
22643: LD_VAR 0 3
22647: STR
22648: ST_TO_ADDR
// end ;
22649: GO 22549
22651: POP
22652: POP
// for i = 1 to hardcoreCounter do
22653: LD_ADDR_VAR 0 8
22657: PUSH
22658: DOUBLE
22659: LD_INT 1
22661: DEC
22662: ST_TO_ADDR
22663: LD_EXP 54
22667: PUSH
22668: FOR_TO
22669: IFFALSE 22774
// begin tmp := 0 ;
22671: LD_ADDR_VAR 0 3
22675: PUSH
22676: LD_STRING 0
22678: ST_TO_ADDR
// if result [ 2 ] then
22679: LD_VAR 0 2
22683: PUSH
22684: LD_INT 2
22686: ARRAY
22687: IFFALSE 22756
// if result [ 2 ] [ 1 ] = 100 + i then
22689: LD_VAR 0 2
22693: PUSH
22694: LD_INT 2
22696: ARRAY
22697: PUSH
22698: LD_INT 1
22700: ARRAY
22701: PUSH
22702: LD_INT 100
22704: PUSH
22705: LD_VAR 0 8
22709: PLUS
22710: EQUAL
22711: IFFALSE 22756
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22713: LD_ADDR_VAR 0 2
22717: PUSH
22718: LD_VAR 0 2
22722: PPUSH
22723: LD_INT 2
22725: PPUSH
22726: LD_VAR 0 2
22730: PUSH
22731: LD_INT 2
22733: ARRAY
22734: PPUSH
22735: LD_INT 1
22737: PPUSH
22738: CALL_OW 3
22742: PPUSH
22743: CALL_OW 1
22747: ST_TO_ADDR
// tmp := 1 ;
22748: LD_ADDR_VAR 0 3
22752: PUSH
22753: LD_STRING 1
22755: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22756: LD_ADDR_VAR 0 6
22760: PUSH
22761: LD_VAR 0 6
22765: PUSH
22766: LD_VAR 0 3
22770: STR
22771: ST_TO_ADDR
// end ;
22772: GO 22668
22774: POP
22775: POP
// if isGameLoad then
22776: LD_VAR 0 1
22780: IFFALSE 23255
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22782: LD_ADDR_VAR 0 4
22786: PUSH
22787: LD_EXP 57
22791: PUSH
22792: LD_EXP 56
22796: PUSH
22797: LD_EXP 58
22801: PUSH
22802: LD_EXP 55
22806: PUSH
22807: LD_EXP 59
22811: PUSH
22812: LD_EXP 60
22816: PUSH
22817: LD_EXP 61
22821: PUSH
22822: LD_EXP 62
22826: PUSH
22827: LD_EXP 63
22831: PUSH
22832: LD_EXP 64
22836: PUSH
22837: LD_EXP 65
22841: PUSH
22842: LD_EXP 66
22846: PUSH
22847: LD_EXP 67
22851: PUSH
22852: LD_EXP 68
22856: PUSH
22857: LD_EXP 76
22861: PUSH
22862: LD_EXP 77
22866: PUSH
22867: LD_EXP 78
22871: PUSH
22872: LD_EXP 79
22876: PUSH
22877: LD_EXP 81
22881: PUSH
22882: LD_EXP 82
22886: PUSH
22887: LD_EXP 83
22891: PUSH
22892: LD_EXP 86
22896: PUSH
22897: LD_EXP 88
22901: PUSH
22902: LD_EXP 89
22906: PUSH
22907: LD_EXP 90
22911: PUSH
22912: LD_EXP 92
22916: PUSH
22917: LD_EXP 93
22921: PUSH
22922: LD_EXP 96
22926: PUSH
22927: LD_EXP 97
22931: PUSH
22932: LD_EXP 98
22936: PUSH
22937: LD_EXP 99
22941: PUSH
22942: LD_EXP 100
22946: PUSH
22947: LD_EXP 101
22951: PUSH
22952: LD_EXP 102
22956: PUSH
22957: LD_EXP 103
22961: PUSH
22962: LD_EXP 104
22966: PUSH
22967: LD_EXP 69
22971: PUSH
22972: LD_EXP 70
22976: PUSH
22977: LD_EXP 73
22981: PUSH
22982: LD_EXP 74
22986: PUSH
22987: LD_EXP 75
22991: PUSH
22992: LD_EXP 71
22996: PUSH
22997: LD_EXP 72
23001: PUSH
23002: LD_EXP 80
23006: PUSH
23007: LD_EXP 84
23011: PUSH
23012: LD_EXP 85
23016: PUSH
23017: LD_EXP 87
23021: PUSH
23022: LD_EXP 91
23026: PUSH
23027: LD_EXP 94
23031: PUSH
23032: LD_EXP 95
23036: PUSH
23037: LD_EXP 105
23041: PUSH
23042: LD_EXP 106
23046: PUSH
23047: LD_EXP 107
23051: PUSH
23052: LD_EXP 108
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: ST_TO_ADDR
// tmp :=  ;
23113: LD_ADDR_VAR 0 3
23117: PUSH
23118: LD_STRING 
23120: ST_TO_ADDR
// for i = 1 to normalCounter do
23121: LD_ADDR_VAR 0 8
23125: PUSH
23126: DOUBLE
23127: LD_INT 1
23129: DEC
23130: ST_TO_ADDR
23131: LD_EXP 53
23135: PUSH
23136: FOR_TO
23137: IFFALSE 23173
// begin if flags [ i ] then
23139: LD_VAR 0 4
23143: PUSH
23144: LD_VAR 0 8
23148: ARRAY
23149: IFFALSE 23171
// tmp := tmp & i & ; ;
23151: LD_ADDR_VAR 0 3
23155: PUSH
23156: LD_VAR 0 3
23160: PUSH
23161: LD_VAR 0 8
23165: STR
23166: PUSH
23167: LD_STRING ;
23169: STR
23170: ST_TO_ADDR
// end ;
23171: GO 23136
23173: POP
23174: POP
// for i = 1 to hardcoreCounter do
23175: LD_ADDR_VAR 0 8
23179: PUSH
23180: DOUBLE
23181: LD_INT 1
23183: DEC
23184: ST_TO_ADDR
23185: LD_EXP 54
23189: PUSH
23190: FOR_TO
23191: IFFALSE 23237
// begin if flags [ normalCounter + i ] then
23193: LD_VAR 0 4
23197: PUSH
23198: LD_EXP 53
23202: PUSH
23203: LD_VAR 0 8
23207: PLUS
23208: ARRAY
23209: IFFALSE 23235
// tmp := tmp & ( 100 + i ) & ; ;
23211: LD_ADDR_VAR 0 3
23215: PUSH
23216: LD_VAR 0 3
23220: PUSH
23221: LD_INT 100
23223: PUSH
23224: LD_VAR 0 8
23228: PLUS
23229: STR
23230: PUSH
23231: LD_STRING ;
23233: STR
23234: ST_TO_ADDR
// end ;
23235: GO 23190
23237: POP
23238: POP
// if tmp then
23239: LD_VAR 0 3
23243: IFFALSE 23255
// active := tmp ;
23245: LD_ADDR_VAR 0 7
23249: PUSH
23250: LD_VAR 0 3
23254: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23255: LD_STRING getStreamItemsFromMission("
23257: PUSH
23258: LD_VAR 0 5
23262: STR
23263: PUSH
23264: LD_STRING ","
23266: STR
23267: PUSH
23268: LD_VAR 0 6
23272: STR
23273: PUSH
23274: LD_STRING ","
23276: STR
23277: PUSH
23278: LD_VAR 0 7
23282: STR
23283: PUSH
23284: LD_STRING ")
23286: STR
23287: PPUSH
23288: CALL_OW 559
// end else
23292: GO 23301
// ToLua ( getStreamItemsFromMission("","","") ) ;
23294: LD_STRING getStreamItemsFromMission("","","")
23296: PPUSH
23297: CALL_OW 559
// end ;
23301: LD_VAR 0 2
23305: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23306: LD_EXP 52
23310: PUSH
23311: LD_EXP 57
23315: AND
23316: IFFALSE 23440
23318: GO 23320
23320: DISABLE
23321: LD_INT 0
23323: PPUSH
23324: PPUSH
// begin enable ;
23325: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23326: LD_ADDR_VAR 0 2
23330: PUSH
23331: LD_INT 22
23333: PUSH
23334: LD_OWVAR 2
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 2
23345: PUSH
23346: LD_INT 34
23348: PUSH
23349: LD_INT 7
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 34
23358: PUSH
23359: LD_INT 45
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 34
23368: PUSH
23369: LD_INT 28
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 34
23378: PUSH
23379: LD_INT 47
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PPUSH
23397: CALL_OW 69
23401: ST_TO_ADDR
// if not tmp then
23402: LD_VAR 0 2
23406: NOT
23407: IFFALSE 23411
// exit ;
23409: GO 23440
// for i in tmp do
23411: LD_ADDR_VAR 0 1
23415: PUSH
23416: LD_VAR 0 2
23420: PUSH
23421: FOR_IN
23422: IFFALSE 23438
// begin SetLives ( i , 0 ) ;
23424: LD_VAR 0 1
23428: PPUSH
23429: LD_INT 0
23431: PPUSH
23432: CALL_OW 234
// end ;
23436: GO 23421
23438: POP
23439: POP
// end ;
23440: PPOPN 2
23442: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23443: LD_EXP 52
23447: PUSH
23448: LD_EXP 58
23452: AND
23453: IFFALSE 23537
23455: GO 23457
23457: DISABLE
23458: LD_INT 0
23460: PPUSH
23461: PPUSH
// begin enable ;
23462: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23463: LD_ADDR_VAR 0 2
23467: PUSH
23468: LD_INT 22
23470: PUSH
23471: LD_OWVAR 2
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 32
23482: PUSH
23483: LD_INT 3
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PPUSH
23494: CALL_OW 69
23498: ST_TO_ADDR
// if not tmp then
23499: LD_VAR 0 2
23503: NOT
23504: IFFALSE 23508
// exit ;
23506: GO 23537
// for i in tmp do
23508: LD_ADDR_VAR 0 1
23512: PUSH
23513: LD_VAR 0 2
23517: PUSH
23518: FOR_IN
23519: IFFALSE 23535
// begin SetLives ( i , 0 ) ;
23521: LD_VAR 0 1
23525: PPUSH
23526: LD_INT 0
23528: PPUSH
23529: CALL_OW 234
// end ;
23533: GO 23518
23535: POP
23536: POP
// end ;
23537: PPOPN 2
23539: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23540: LD_EXP 52
23544: PUSH
23545: LD_EXP 55
23549: AND
23550: IFFALSE 23643
23552: GO 23554
23554: DISABLE
23555: LD_INT 0
23557: PPUSH
// begin enable ;
23558: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23559: LD_ADDR_VAR 0 1
23563: PUSH
23564: LD_INT 22
23566: PUSH
23567: LD_OWVAR 2
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 2
23578: PUSH
23579: LD_INT 25
23581: PUSH
23582: LD_INT 5
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 25
23591: PUSH
23592: LD_INT 9
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 25
23601: PUSH
23602: LD_INT 8
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PPUSH
23619: CALL_OW 69
23623: PUSH
23624: FOR_IN
23625: IFFALSE 23641
// begin SetClass ( i , 1 ) ;
23627: LD_VAR 0 1
23631: PPUSH
23632: LD_INT 1
23634: PPUSH
23635: CALL_OW 336
// end ;
23639: GO 23624
23641: POP
23642: POP
// end ;
23643: PPOPN 1
23645: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23646: LD_EXP 52
23650: PUSH
23651: LD_EXP 56
23655: AND
23656: PUSH
23657: LD_OWVAR 65
23661: PUSH
23662: LD_INT 7
23664: LESS
23665: AND
23666: IFFALSE 23680
23668: GO 23670
23670: DISABLE
// begin enable ;
23671: ENABLE
// game_speed := 7 ;
23672: LD_ADDR_OWVAR 65
23676: PUSH
23677: LD_INT 7
23679: ST_TO_ADDR
// end ;
23680: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23681: LD_EXP 52
23685: PUSH
23686: LD_EXP 59
23690: AND
23691: IFFALSE 23893
23693: GO 23695
23695: DISABLE
23696: LD_INT 0
23698: PPUSH
23699: PPUSH
23700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23701: LD_ADDR_VAR 0 3
23705: PUSH
23706: LD_INT 81
23708: PUSH
23709: LD_OWVAR 2
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 21
23720: PUSH
23721: LD_INT 1
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PPUSH
23732: CALL_OW 69
23736: ST_TO_ADDR
// if not tmp then
23737: LD_VAR 0 3
23741: NOT
23742: IFFALSE 23746
// exit ;
23744: GO 23893
// if tmp > 5 then
23746: LD_VAR 0 3
23750: PUSH
23751: LD_INT 5
23753: GREATER
23754: IFFALSE 23766
// k := 5 else
23756: LD_ADDR_VAR 0 2
23760: PUSH
23761: LD_INT 5
23763: ST_TO_ADDR
23764: GO 23776
// k := tmp ;
23766: LD_ADDR_VAR 0 2
23770: PUSH
23771: LD_VAR 0 3
23775: ST_TO_ADDR
// for i := 1 to k do
23776: LD_ADDR_VAR 0 1
23780: PUSH
23781: DOUBLE
23782: LD_INT 1
23784: DEC
23785: ST_TO_ADDR
23786: LD_VAR 0 2
23790: PUSH
23791: FOR_TO
23792: IFFALSE 23891
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23794: LD_VAR 0 3
23798: PUSH
23799: LD_VAR 0 1
23803: ARRAY
23804: PPUSH
23805: LD_VAR 0 1
23809: PUSH
23810: LD_INT 4
23812: MOD
23813: PUSH
23814: LD_INT 1
23816: PLUS
23817: PPUSH
23818: CALL_OW 259
23822: PUSH
23823: LD_INT 10
23825: LESS
23826: IFFALSE 23889
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23828: LD_VAR 0 3
23832: PUSH
23833: LD_VAR 0 1
23837: ARRAY
23838: PPUSH
23839: LD_VAR 0 1
23843: PUSH
23844: LD_INT 4
23846: MOD
23847: PUSH
23848: LD_INT 1
23850: PLUS
23851: PPUSH
23852: LD_VAR 0 3
23856: PUSH
23857: LD_VAR 0 1
23861: ARRAY
23862: PPUSH
23863: LD_VAR 0 1
23867: PUSH
23868: LD_INT 4
23870: MOD
23871: PUSH
23872: LD_INT 1
23874: PLUS
23875: PPUSH
23876: CALL_OW 259
23880: PUSH
23881: LD_INT 1
23883: PLUS
23884: PPUSH
23885: CALL_OW 237
23889: GO 23791
23891: POP
23892: POP
// end ;
23893: PPOPN 3
23895: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23896: LD_EXP 52
23900: PUSH
23901: LD_EXP 60
23905: AND
23906: IFFALSE 23926
23908: GO 23910
23910: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23911: LD_INT 4
23913: PPUSH
23914: LD_OWVAR 2
23918: PPUSH
23919: LD_INT 0
23921: PPUSH
23922: CALL_OW 324
23926: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23927: LD_EXP 52
23931: PUSH
23932: LD_EXP 89
23936: AND
23937: IFFALSE 23957
23939: GO 23941
23941: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23942: LD_INT 19
23944: PPUSH
23945: LD_OWVAR 2
23949: PPUSH
23950: LD_INT 0
23952: PPUSH
23953: CALL_OW 324
23957: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23958: LD_EXP 52
23962: PUSH
23963: LD_EXP 61
23967: AND
23968: IFFALSE 24070
23970: GO 23972
23972: DISABLE
23973: LD_INT 0
23975: PPUSH
23976: PPUSH
// begin enable ;
23977: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23978: LD_ADDR_VAR 0 2
23982: PUSH
23983: LD_INT 22
23985: PUSH
23986: LD_OWVAR 2
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 2
23997: PUSH
23998: LD_INT 34
24000: PUSH
24001: LD_INT 11
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 34
24010: PUSH
24011: LD_INT 30
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: LIST
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PPUSH
24027: CALL_OW 69
24031: ST_TO_ADDR
// if not tmp then
24032: LD_VAR 0 2
24036: NOT
24037: IFFALSE 24041
// exit ;
24039: GO 24070
// for i in tmp do
24041: LD_ADDR_VAR 0 1
24045: PUSH
24046: LD_VAR 0 2
24050: PUSH
24051: FOR_IN
24052: IFFALSE 24068
// begin SetLives ( i , 0 ) ;
24054: LD_VAR 0 1
24058: PPUSH
24059: LD_INT 0
24061: PPUSH
24062: CALL_OW 234
// end ;
24066: GO 24051
24068: POP
24069: POP
// end ;
24070: PPOPN 2
24072: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24073: LD_EXP 52
24077: PUSH
24078: LD_EXP 62
24082: AND
24083: IFFALSE 24103
24085: GO 24087
24087: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24088: LD_INT 32
24090: PPUSH
24091: LD_OWVAR 2
24095: PPUSH
24096: LD_INT 0
24098: PPUSH
24099: CALL_OW 324
24103: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24104: LD_EXP 52
24108: PUSH
24109: LD_EXP 63
24113: AND
24114: IFFALSE 24295
24116: GO 24118
24118: DISABLE
24119: LD_INT 0
24121: PPUSH
24122: PPUSH
24123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24124: LD_ADDR_VAR 0 2
24128: PUSH
24129: LD_INT 22
24131: PUSH
24132: LD_OWVAR 2
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 33
24143: PUSH
24144: LD_INT 3
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PPUSH
24155: CALL_OW 69
24159: ST_TO_ADDR
// if not tmp then
24160: LD_VAR 0 2
24164: NOT
24165: IFFALSE 24169
// exit ;
24167: GO 24295
// side := 0 ;
24169: LD_ADDR_VAR 0 3
24173: PUSH
24174: LD_INT 0
24176: ST_TO_ADDR
// for i := 1 to 8 do
24177: LD_ADDR_VAR 0 1
24181: PUSH
24182: DOUBLE
24183: LD_INT 1
24185: DEC
24186: ST_TO_ADDR
24187: LD_INT 8
24189: PUSH
24190: FOR_TO
24191: IFFALSE 24239
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24193: LD_OWVAR 2
24197: PUSH
24198: LD_VAR 0 1
24202: NONEQUAL
24203: PUSH
24204: LD_OWVAR 2
24208: PPUSH
24209: LD_VAR 0 1
24213: PPUSH
24214: CALL_OW 81
24218: PUSH
24219: LD_INT 2
24221: EQUAL
24222: AND
24223: IFFALSE 24237
// begin side := i ;
24225: LD_ADDR_VAR 0 3
24229: PUSH
24230: LD_VAR 0 1
24234: ST_TO_ADDR
// break ;
24235: GO 24239
// end ;
24237: GO 24190
24239: POP
24240: POP
// if not side then
24241: LD_VAR 0 3
24245: NOT
24246: IFFALSE 24250
// exit ;
24248: GO 24295
// for i := 1 to tmp do
24250: LD_ADDR_VAR 0 1
24254: PUSH
24255: DOUBLE
24256: LD_INT 1
24258: DEC
24259: ST_TO_ADDR
24260: LD_VAR 0 2
24264: PUSH
24265: FOR_TO
24266: IFFALSE 24293
// if Prob ( 60 ) then
24268: LD_INT 60
24270: PPUSH
24271: CALL_OW 13
24275: IFFALSE 24291
// SetSide ( i , side ) ;
24277: LD_VAR 0 1
24281: PPUSH
24282: LD_VAR 0 3
24286: PPUSH
24287: CALL_OW 235
24291: GO 24265
24293: POP
24294: POP
// end ;
24295: PPOPN 3
24297: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24298: LD_EXP 52
24302: PUSH
24303: LD_EXP 65
24307: AND
24308: IFFALSE 24427
24310: GO 24312
24312: DISABLE
24313: LD_INT 0
24315: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24316: LD_ADDR_VAR 0 1
24320: PUSH
24321: LD_INT 22
24323: PUSH
24324: LD_OWVAR 2
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 21
24335: PUSH
24336: LD_INT 1
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 3
24345: PUSH
24346: LD_INT 23
24348: PUSH
24349: LD_INT 0
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: LIST
24364: PPUSH
24365: CALL_OW 69
24369: PUSH
24370: FOR_IN
24371: IFFALSE 24425
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24373: LD_VAR 0 1
24377: PPUSH
24378: CALL_OW 257
24382: PUSH
24383: LD_INT 1
24385: PUSH
24386: LD_INT 2
24388: PUSH
24389: LD_INT 3
24391: PUSH
24392: LD_INT 4
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: IN
24401: IFFALSE 24423
// SetClass ( un , rand ( 1 , 4 ) ) ;
24403: LD_VAR 0 1
24407: PPUSH
24408: LD_INT 1
24410: PPUSH
24411: LD_INT 4
24413: PPUSH
24414: CALL_OW 12
24418: PPUSH
24419: CALL_OW 336
24423: GO 24370
24425: POP
24426: POP
// end ;
24427: PPOPN 1
24429: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24430: LD_EXP 52
24434: PUSH
24435: LD_EXP 64
24439: AND
24440: IFFALSE 24519
24442: GO 24444
24444: DISABLE
24445: LD_INT 0
24447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24448: LD_ADDR_VAR 0 1
24452: PUSH
24453: LD_INT 22
24455: PUSH
24456: LD_OWVAR 2
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 21
24467: PUSH
24468: LD_INT 3
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PPUSH
24479: CALL_OW 69
24483: ST_TO_ADDR
// if not tmp then
24484: LD_VAR 0 1
24488: NOT
24489: IFFALSE 24493
// exit ;
24491: GO 24519
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24493: LD_VAR 0 1
24497: PUSH
24498: LD_INT 1
24500: PPUSH
24501: LD_VAR 0 1
24505: PPUSH
24506: CALL_OW 12
24510: ARRAY
24511: PPUSH
24512: LD_INT 100
24514: PPUSH
24515: CALL_OW 234
// end ;
24519: PPOPN 1
24521: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24522: LD_EXP 52
24526: PUSH
24527: LD_EXP 66
24531: AND
24532: IFFALSE 24630
24534: GO 24536
24536: DISABLE
24537: LD_INT 0
24539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24540: LD_ADDR_VAR 0 1
24544: PUSH
24545: LD_INT 22
24547: PUSH
24548: LD_OWVAR 2
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 21
24559: PUSH
24560: LD_INT 1
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PPUSH
24571: CALL_OW 69
24575: ST_TO_ADDR
// if not tmp then
24576: LD_VAR 0 1
24580: NOT
24581: IFFALSE 24585
// exit ;
24583: GO 24630
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24585: LD_VAR 0 1
24589: PUSH
24590: LD_INT 1
24592: PPUSH
24593: LD_VAR 0 1
24597: PPUSH
24598: CALL_OW 12
24602: ARRAY
24603: PPUSH
24604: LD_INT 1
24606: PPUSH
24607: LD_INT 4
24609: PPUSH
24610: CALL_OW 12
24614: PPUSH
24615: LD_INT 3000
24617: PPUSH
24618: LD_INT 9000
24620: PPUSH
24621: CALL_OW 12
24625: PPUSH
24626: CALL_OW 492
// end ;
24630: PPOPN 1
24632: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24633: LD_EXP 52
24637: PUSH
24638: LD_EXP 67
24642: AND
24643: IFFALSE 24663
24645: GO 24647
24647: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24648: LD_INT 1
24650: PPUSH
24651: LD_OWVAR 2
24655: PPUSH
24656: LD_INT 0
24658: PPUSH
24659: CALL_OW 324
24663: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24664: LD_EXP 52
24668: PUSH
24669: LD_EXP 68
24673: AND
24674: IFFALSE 24757
24676: GO 24678
24678: DISABLE
24679: LD_INT 0
24681: PPUSH
24682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24683: LD_ADDR_VAR 0 2
24687: PUSH
24688: LD_INT 22
24690: PUSH
24691: LD_OWVAR 2
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 21
24702: PUSH
24703: LD_INT 3
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PPUSH
24714: CALL_OW 69
24718: ST_TO_ADDR
// if not tmp then
24719: LD_VAR 0 2
24723: NOT
24724: IFFALSE 24728
// exit ;
24726: GO 24757
// for i in tmp do
24728: LD_ADDR_VAR 0 1
24732: PUSH
24733: LD_VAR 0 2
24737: PUSH
24738: FOR_IN
24739: IFFALSE 24755
// SetBLevel ( i , 10 ) ;
24741: LD_VAR 0 1
24745: PPUSH
24746: LD_INT 10
24748: PPUSH
24749: CALL_OW 241
24753: GO 24738
24755: POP
24756: POP
// end ;
24757: PPOPN 2
24759: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24760: LD_EXP 52
24764: PUSH
24765: LD_EXP 69
24769: AND
24770: IFFALSE 24881
24772: GO 24774
24774: DISABLE
24775: LD_INT 0
24777: PPUSH
24778: PPUSH
24779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24780: LD_ADDR_VAR 0 3
24784: PUSH
24785: LD_INT 22
24787: PUSH
24788: LD_OWVAR 2
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 25
24799: PUSH
24800: LD_INT 1
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PPUSH
24811: CALL_OW 69
24815: ST_TO_ADDR
// if not tmp then
24816: LD_VAR 0 3
24820: NOT
24821: IFFALSE 24825
// exit ;
24823: GO 24881
// un := tmp [ rand ( 1 , tmp ) ] ;
24825: LD_ADDR_VAR 0 2
24829: PUSH
24830: LD_VAR 0 3
24834: PUSH
24835: LD_INT 1
24837: PPUSH
24838: LD_VAR 0 3
24842: PPUSH
24843: CALL_OW 12
24847: ARRAY
24848: ST_TO_ADDR
// if Crawls ( un ) then
24849: LD_VAR 0 2
24853: PPUSH
24854: CALL_OW 318
24858: IFFALSE 24869
// ComWalk ( un ) ;
24860: LD_VAR 0 2
24864: PPUSH
24865: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24869: LD_VAR 0 2
24873: PPUSH
24874: LD_INT 5
24876: PPUSH
24877: CALL_OW 336
// end ;
24881: PPOPN 3
24883: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24884: LD_EXP 52
24888: PUSH
24889: LD_EXP 70
24893: AND
24894: PUSH
24895: LD_OWVAR 67
24899: PUSH
24900: LD_INT 4
24902: LESS
24903: AND
24904: IFFALSE 24923
24906: GO 24908
24908: DISABLE
// begin Difficulty := Difficulty + 1 ;
24909: LD_ADDR_OWVAR 67
24913: PUSH
24914: LD_OWVAR 67
24918: PUSH
24919: LD_INT 1
24921: PLUS
24922: ST_TO_ADDR
// end ;
24923: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24924: LD_EXP 52
24928: PUSH
24929: LD_EXP 71
24933: AND
24934: IFFALSE 25037
24936: GO 24938
24938: DISABLE
24939: LD_INT 0
24941: PPUSH
// begin for i := 1 to 5 do
24942: LD_ADDR_VAR 0 1
24946: PUSH
24947: DOUBLE
24948: LD_INT 1
24950: DEC
24951: ST_TO_ADDR
24952: LD_INT 5
24954: PUSH
24955: FOR_TO
24956: IFFALSE 25035
// begin uc_nation := nation_nature ;
24958: LD_ADDR_OWVAR 21
24962: PUSH
24963: LD_INT 0
24965: ST_TO_ADDR
// uc_side := 0 ;
24966: LD_ADDR_OWVAR 20
24970: PUSH
24971: LD_INT 0
24973: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24974: LD_ADDR_OWVAR 29
24978: PUSH
24979: LD_INT 12
24981: PUSH
24982: LD_INT 12
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: ST_TO_ADDR
// hc_agressivity := 20 ;
24989: LD_ADDR_OWVAR 35
24993: PUSH
24994: LD_INT 20
24996: ST_TO_ADDR
// hc_class := class_tiger ;
24997: LD_ADDR_OWVAR 28
25001: PUSH
25002: LD_INT 14
25004: ST_TO_ADDR
// hc_gallery :=  ;
25005: LD_ADDR_OWVAR 33
25009: PUSH
25010: LD_STRING 
25012: ST_TO_ADDR
// hc_name :=  ;
25013: LD_ADDR_OWVAR 26
25017: PUSH
25018: LD_STRING 
25020: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25021: CALL_OW 44
25025: PPUSH
25026: LD_INT 0
25028: PPUSH
25029: CALL_OW 51
// end ;
25033: GO 24955
25035: POP
25036: POP
// end ;
25037: PPOPN 1
25039: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25040: LD_EXP 52
25044: PUSH
25045: LD_EXP 72
25049: AND
25050: IFFALSE 25059
25052: GO 25054
25054: DISABLE
// StreamSibBomb ;
25055: CALL 25060 0 0
25059: END
// export function StreamSibBomb ; var i , x , y ; begin
25060: LD_INT 0
25062: PPUSH
25063: PPUSH
25064: PPUSH
25065: PPUSH
// result := false ;
25066: LD_ADDR_VAR 0 1
25070: PUSH
25071: LD_INT 0
25073: ST_TO_ADDR
// for i := 1 to 16 do
25074: LD_ADDR_VAR 0 2
25078: PUSH
25079: DOUBLE
25080: LD_INT 1
25082: DEC
25083: ST_TO_ADDR
25084: LD_INT 16
25086: PUSH
25087: FOR_TO
25088: IFFALSE 25287
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25090: LD_ADDR_VAR 0 3
25094: PUSH
25095: LD_INT 10
25097: PUSH
25098: LD_INT 20
25100: PUSH
25101: LD_INT 30
25103: PUSH
25104: LD_INT 40
25106: PUSH
25107: LD_INT 50
25109: PUSH
25110: LD_INT 60
25112: PUSH
25113: LD_INT 70
25115: PUSH
25116: LD_INT 80
25118: PUSH
25119: LD_INT 90
25121: PUSH
25122: LD_INT 100
25124: PUSH
25125: LD_INT 110
25127: PUSH
25128: LD_INT 120
25130: PUSH
25131: LD_INT 130
25133: PUSH
25134: LD_INT 140
25136: PUSH
25137: LD_INT 150
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: PPUSH
25160: LD_INT 15
25162: PPUSH
25163: CALL_OW 12
25167: ARRAY
25168: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25169: LD_ADDR_VAR 0 4
25173: PUSH
25174: LD_INT 10
25176: PUSH
25177: LD_INT 20
25179: PUSH
25180: LD_INT 30
25182: PUSH
25183: LD_INT 40
25185: PUSH
25186: LD_INT 50
25188: PUSH
25189: LD_INT 60
25191: PUSH
25192: LD_INT 70
25194: PUSH
25195: LD_INT 80
25197: PUSH
25198: LD_INT 90
25200: PUSH
25201: LD_INT 100
25203: PUSH
25204: LD_INT 110
25206: PUSH
25207: LD_INT 120
25209: PUSH
25210: LD_INT 130
25212: PUSH
25213: LD_INT 140
25215: PUSH
25216: LD_INT 150
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: PPUSH
25239: LD_INT 15
25241: PPUSH
25242: CALL_OW 12
25246: ARRAY
25247: ST_TO_ADDR
// if ValidHex ( x , y ) then
25248: LD_VAR 0 3
25252: PPUSH
25253: LD_VAR 0 4
25257: PPUSH
25258: CALL_OW 488
25262: IFFALSE 25285
// begin result := [ x , y ] ;
25264: LD_ADDR_VAR 0 1
25268: PUSH
25269: LD_VAR 0 3
25273: PUSH
25274: LD_VAR 0 4
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: ST_TO_ADDR
// break ;
25283: GO 25287
// end ; end ;
25285: GO 25087
25287: POP
25288: POP
// if result then
25289: LD_VAR 0 1
25293: IFFALSE 25353
// begin ToLua ( playSibBomb() ) ;
25295: LD_STRING playSibBomb()
25297: PPUSH
25298: CALL_OW 559
// wait ( 0 0$14 ) ;
25302: LD_INT 490
25304: PPUSH
25305: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25309: LD_VAR 0 1
25313: PUSH
25314: LD_INT 1
25316: ARRAY
25317: PPUSH
25318: LD_VAR 0 1
25322: PUSH
25323: LD_INT 2
25325: ARRAY
25326: PPUSH
25327: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25331: LD_VAR 0 1
25335: PUSH
25336: LD_INT 1
25338: ARRAY
25339: PPUSH
25340: LD_VAR 0 1
25344: PUSH
25345: LD_INT 2
25347: ARRAY
25348: PPUSH
25349: CALL_OW 429
// end ; end ;
25353: LD_VAR 0 1
25357: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25358: LD_EXP 52
25362: PUSH
25363: LD_EXP 74
25367: AND
25368: IFFALSE 25380
25370: GO 25372
25372: DISABLE
// YouLost (  ) ;
25373: LD_STRING 
25375: PPUSH
25376: CALL_OW 104
25380: END
// every 0 0$1 trigger StreamModeActive and sFog do
25381: LD_EXP 52
25385: PUSH
25386: LD_EXP 73
25390: AND
25391: IFFALSE 25405
25393: GO 25395
25395: DISABLE
// FogOff ( your_side ) ;
25396: LD_OWVAR 2
25400: PPUSH
25401: CALL_OW 344
25405: END
// every 0 0$1 trigger StreamModeActive and sSun do
25406: LD_EXP 52
25410: PUSH
25411: LD_EXP 75
25415: AND
25416: IFFALSE 25444
25418: GO 25420
25420: DISABLE
// begin solar_recharge_percent := 0 ;
25421: LD_ADDR_OWVAR 79
25425: PUSH
25426: LD_INT 0
25428: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25429: LD_INT 10500
25431: PPUSH
25432: CALL_OW 67
// solar_recharge_percent := 100 ;
25436: LD_ADDR_OWVAR 79
25440: PUSH
25441: LD_INT 100
25443: ST_TO_ADDR
// end ;
25444: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25445: LD_EXP 52
25449: PUSH
25450: LD_EXP 76
25454: AND
25455: IFFALSE 25694
25457: GO 25459
25459: DISABLE
25460: LD_INT 0
25462: PPUSH
25463: PPUSH
25464: PPUSH
// begin tmp := [ ] ;
25465: LD_ADDR_VAR 0 3
25469: PUSH
25470: EMPTY
25471: ST_TO_ADDR
// for i := 1 to 6 do
25472: LD_ADDR_VAR 0 1
25476: PUSH
25477: DOUBLE
25478: LD_INT 1
25480: DEC
25481: ST_TO_ADDR
25482: LD_INT 6
25484: PUSH
25485: FOR_TO
25486: IFFALSE 25591
// begin uc_nation := nation_nature ;
25488: LD_ADDR_OWVAR 21
25492: PUSH
25493: LD_INT 0
25495: ST_TO_ADDR
// uc_side := 0 ;
25496: LD_ADDR_OWVAR 20
25500: PUSH
25501: LD_INT 0
25503: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25504: LD_ADDR_OWVAR 29
25508: PUSH
25509: LD_INT 12
25511: PUSH
25512: LD_INT 12
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: ST_TO_ADDR
// hc_agressivity := 20 ;
25519: LD_ADDR_OWVAR 35
25523: PUSH
25524: LD_INT 20
25526: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25527: LD_ADDR_OWVAR 28
25531: PUSH
25532: LD_INT 17
25534: ST_TO_ADDR
// hc_gallery :=  ;
25535: LD_ADDR_OWVAR 33
25539: PUSH
25540: LD_STRING 
25542: ST_TO_ADDR
// hc_name :=  ;
25543: LD_ADDR_OWVAR 26
25547: PUSH
25548: LD_STRING 
25550: ST_TO_ADDR
// un := CreateHuman ;
25551: LD_ADDR_VAR 0 2
25555: PUSH
25556: CALL_OW 44
25560: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25561: LD_VAR 0 2
25565: PPUSH
25566: LD_INT 1
25568: PPUSH
25569: CALL_OW 51
// tmp := tmp ^ un ;
25573: LD_ADDR_VAR 0 3
25577: PUSH
25578: LD_VAR 0 3
25582: PUSH
25583: LD_VAR 0 2
25587: ADD
25588: ST_TO_ADDR
// end ;
25589: GO 25485
25591: POP
25592: POP
// repeat wait ( 0 0$1 ) ;
25593: LD_INT 35
25595: PPUSH
25596: CALL_OW 67
// for un in tmp do
25600: LD_ADDR_VAR 0 2
25604: PUSH
25605: LD_VAR 0 3
25609: PUSH
25610: FOR_IN
25611: IFFALSE 25685
// begin if IsDead ( un ) then
25613: LD_VAR 0 2
25617: PPUSH
25618: CALL_OW 301
25622: IFFALSE 25642
// begin tmp := tmp diff un ;
25624: LD_ADDR_VAR 0 3
25628: PUSH
25629: LD_VAR 0 3
25633: PUSH
25634: LD_VAR 0 2
25638: DIFF
25639: ST_TO_ADDR
// continue ;
25640: GO 25610
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25642: LD_VAR 0 2
25646: PPUSH
25647: LD_INT 3
25649: PUSH
25650: LD_INT 22
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PPUSH
25664: CALL_OW 69
25668: PPUSH
25669: LD_VAR 0 2
25673: PPUSH
25674: CALL_OW 74
25678: PPUSH
25679: CALL_OW 115
// end ;
25683: GO 25610
25685: POP
25686: POP
// until not tmp ;
25687: LD_VAR 0 3
25691: NOT
25692: IFFALSE 25593
// end ;
25694: PPOPN 3
25696: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25697: LD_EXP 52
25701: PUSH
25702: LD_EXP 77
25706: AND
25707: IFFALSE 25761
25709: GO 25711
25711: DISABLE
// begin ToLua ( displayTroll(); ) ;
25712: LD_STRING displayTroll();
25714: PPUSH
25715: CALL_OW 559
// wait ( 3 3$00 ) ;
25719: LD_INT 6300
25721: PPUSH
25722: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25726: LD_STRING hideTroll();
25728: PPUSH
25729: CALL_OW 559
// wait ( 1 1$00 ) ;
25733: LD_INT 2100
25735: PPUSH
25736: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25740: LD_STRING displayTroll();
25742: PPUSH
25743: CALL_OW 559
// wait ( 1 1$00 ) ;
25747: LD_INT 2100
25749: PPUSH
25750: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25754: LD_STRING hideTroll();
25756: PPUSH
25757: CALL_OW 559
// end ;
25761: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25762: LD_EXP 52
25766: PUSH
25767: LD_EXP 78
25771: AND
25772: IFFALSE 25835
25774: GO 25776
25776: DISABLE
25777: LD_INT 0
25779: PPUSH
// begin p := 0 ;
25780: LD_ADDR_VAR 0 1
25784: PUSH
25785: LD_INT 0
25787: ST_TO_ADDR
// repeat game_speed := 1 ;
25788: LD_ADDR_OWVAR 65
25792: PUSH
25793: LD_INT 1
25795: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25796: LD_INT 35
25798: PPUSH
25799: CALL_OW 67
// p := p + 1 ;
25803: LD_ADDR_VAR 0 1
25807: PUSH
25808: LD_VAR 0 1
25812: PUSH
25813: LD_INT 1
25815: PLUS
25816: ST_TO_ADDR
// until p >= 60 ;
25817: LD_VAR 0 1
25821: PUSH
25822: LD_INT 60
25824: GREATEREQUAL
25825: IFFALSE 25788
// game_speed := 4 ;
25827: LD_ADDR_OWVAR 65
25831: PUSH
25832: LD_INT 4
25834: ST_TO_ADDR
// end ;
25835: PPOPN 1
25837: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25838: LD_EXP 52
25842: PUSH
25843: LD_EXP 79
25847: AND
25848: IFFALSE 25994
25850: GO 25852
25852: DISABLE
25853: LD_INT 0
25855: PPUSH
25856: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25857: LD_ADDR_VAR 0 1
25861: PUSH
25862: LD_INT 22
25864: PUSH
25865: LD_OWVAR 2
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 2
25876: PUSH
25877: LD_INT 30
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 30
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: LIST
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PPUSH
25906: CALL_OW 69
25910: ST_TO_ADDR
// if not depot then
25911: LD_VAR 0 1
25915: NOT
25916: IFFALSE 25920
// exit ;
25918: GO 25994
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25920: LD_ADDR_VAR 0 2
25924: PUSH
25925: LD_VAR 0 1
25929: PUSH
25930: LD_INT 1
25932: PPUSH
25933: LD_VAR 0 1
25937: PPUSH
25938: CALL_OW 12
25942: ARRAY
25943: PPUSH
25944: CALL_OW 274
25948: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25949: LD_VAR 0 2
25953: PPUSH
25954: LD_INT 1
25956: PPUSH
25957: LD_INT 0
25959: PPUSH
25960: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25964: LD_VAR 0 2
25968: PPUSH
25969: LD_INT 2
25971: PPUSH
25972: LD_INT 0
25974: PPUSH
25975: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25979: LD_VAR 0 2
25983: PPUSH
25984: LD_INT 3
25986: PPUSH
25987: LD_INT 0
25989: PPUSH
25990: CALL_OW 277
// end ;
25994: PPOPN 2
25996: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25997: LD_EXP 52
26001: PUSH
26002: LD_EXP 80
26006: AND
26007: IFFALSE 26104
26009: GO 26011
26011: DISABLE
26012: LD_INT 0
26014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26015: LD_ADDR_VAR 0 1
26019: PUSH
26020: LD_INT 22
26022: PUSH
26023: LD_OWVAR 2
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 21
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 3
26044: PUSH
26045: LD_INT 23
26047: PUSH
26048: LD_INT 0
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: LIST
26063: PPUSH
26064: CALL_OW 69
26068: ST_TO_ADDR
// if not tmp then
26069: LD_VAR 0 1
26073: NOT
26074: IFFALSE 26078
// exit ;
26076: GO 26104
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26078: LD_VAR 0 1
26082: PUSH
26083: LD_INT 1
26085: PPUSH
26086: LD_VAR 0 1
26090: PPUSH
26091: CALL_OW 12
26095: ARRAY
26096: PPUSH
26097: LD_INT 200
26099: PPUSH
26100: CALL_OW 234
// end ;
26104: PPOPN 1
26106: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26107: LD_EXP 52
26111: PUSH
26112: LD_EXP 81
26116: AND
26117: IFFALSE 26196
26119: GO 26121
26121: DISABLE
26122: LD_INT 0
26124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26125: LD_ADDR_VAR 0 1
26129: PUSH
26130: LD_INT 22
26132: PUSH
26133: LD_OWVAR 2
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 21
26144: PUSH
26145: LD_INT 2
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PPUSH
26156: CALL_OW 69
26160: ST_TO_ADDR
// if not tmp then
26161: LD_VAR 0 1
26165: NOT
26166: IFFALSE 26170
// exit ;
26168: GO 26196
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26170: LD_VAR 0 1
26174: PUSH
26175: LD_INT 1
26177: PPUSH
26178: LD_VAR 0 1
26182: PPUSH
26183: CALL_OW 12
26187: ARRAY
26188: PPUSH
26189: LD_INT 60
26191: PPUSH
26192: CALL_OW 234
// end ;
26196: PPOPN 1
26198: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26199: LD_EXP 52
26203: PUSH
26204: LD_EXP 82
26208: AND
26209: IFFALSE 26308
26211: GO 26213
26213: DISABLE
26214: LD_INT 0
26216: PPUSH
26217: PPUSH
// begin enable ;
26218: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26219: LD_ADDR_VAR 0 1
26223: PUSH
26224: LD_INT 22
26226: PUSH
26227: LD_OWVAR 2
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 61
26238: PUSH
26239: EMPTY
26240: LIST
26241: PUSH
26242: LD_INT 33
26244: PUSH
26245: LD_INT 2
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: LIST
26256: PPUSH
26257: CALL_OW 69
26261: ST_TO_ADDR
// if not tmp then
26262: LD_VAR 0 1
26266: NOT
26267: IFFALSE 26271
// exit ;
26269: GO 26308
// for i in tmp do
26271: LD_ADDR_VAR 0 2
26275: PUSH
26276: LD_VAR 0 1
26280: PUSH
26281: FOR_IN
26282: IFFALSE 26306
// if IsControledBy ( i ) then
26284: LD_VAR 0 2
26288: PPUSH
26289: CALL_OW 312
26293: IFFALSE 26304
// ComUnlink ( i ) ;
26295: LD_VAR 0 2
26299: PPUSH
26300: CALL_OW 136
26304: GO 26281
26306: POP
26307: POP
// end ;
26308: PPOPN 2
26310: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26311: LD_EXP 52
26315: PUSH
26316: LD_EXP 83
26320: AND
26321: IFFALSE 26461
26323: GO 26325
26325: DISABLE
26326: LD_INT 0
26328: PPUSH
26329: PPUSH
// begin ToLua ( displayPowell(); ) ;
26330: LD_STRING displayPowell();
26332: PPUSH
26333: CALL_OW 559
// uc_side := 0 ;
26337: LD_ADDR_OWVAR 20
26341: PUSH
26342: LD_INT 0
26344: ST_TO_ADDR
// uc_nation := 2 ;
26345: LD_ADDR_OWVAR 21
26349: PUSH
26350: LD_INT 2
26352: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26353: LD_ADDR_OWVAR 37
26357: PUSH
26358: LD_INT 14
26360: ST_TO_ADDR
// vc_engine := engine_siberite ;
26361: LD_ADDR_OWVAR 39
26365: PUSH
26366: LD_INT 3
26368: ST_TO_ADDR
// vc_control := control_apeman ;
26369: LD_ADDR_OWVAR 38
26373: PUSH
26374: LD_INT 5
26376: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26377: LD_ADDR_OWVAR 40
26381: PUSH
26382: LD_INT 29
26384: ST_TO_ADDR
// un := CreateVehicle ;
26385: LD_ADDR_VAR 0 2
26389: PUSH
26390: CALL_OW 45
26394: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26395: LD_VAR 0 2
26399: PPUSH
26400: LD_INT 1
26402: PPUSH
26403: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26407: LD_INT 35
26409: PPUSH
26410: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26414: LD_VAR 0 2
26418: PPUSH
26419: LD_INT 22
26421: PUSH
26422: LD_OWVAR 2
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PPUSH
26431: CALL_OW 69
26435: PPUSH
26436: LD_VAR 0 2
26440: PPUSH
26441: CALL_OW 74
26445: PPUSH
26446: CALL_OW 115
// until IsDead ( un ) ;
26450: LD_VAR 0 2
26454: PPUSH
26455: CALL_OW 301
26459: IFFALSE 26407
// end ;
26461: PPOPN 2
26463: END
// every 0 0$1 trigger StreamModeActive and sStu do
26464: LD_EXP 52
26468: PUSH
26469: LD_EXP 91
26473: AND
26474: IFFALSE 26490
26476: GO 26478
26478: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26479: LD_STRING displayStucuk();
26481: PPUSH
26482: CALL_OW 559
// ResetFog ;
26486: CALL_OW 335
// end ;
26490: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26491: LD_EXP 52
26495: PUSH
26496: LD_EXP 84
26500: AND
26501: IFFALSE 26642
26503: GO 26505
26505: DISABLE
26506: LD_INT 0
26508: PPUSH
26509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26510: LD_ADDR_VAR 0 2
26514: PUSH
26515: LD_INT 22
26517: PUSH
26518: LD_OWVAR 2
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 21
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PPUSH
26541: CALL_OW 69
26545: ST_TO_ADDR
// if not tmp then
26546: LD_VAR 0 2
26550: NOT
26551: IFFALSE 26555
// exit ;
26553: GO 26642
// un := tmp [ rand ( 1 , tmp ) ] ;
26555: LD_ADDR_VAR 0 1
26559: PUSH
26560: LD_VAR 0 2
26564: PUSH
26565: LD_INT 1
26567: PPUSH
26568: LD_VAR 0 2
26572: PPUSH
26573: CALL_OW 12
26577: ARRAY
26578: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26579: LD_VAR 0 1
26583: PPUSH
26584: LD_INT 0
26586: PPUSH
26587: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26591: LD_VAR 0 1
26595: PPUSH
26596: LD_OWVAR 3
26600: PUSH
26601: LD_VAR 0 1
26605: DIFF
26606: PPUSH
26607: LD_VAR 0 1
26611: PPUSH
26612: CALL_OW 74
26616: PPUSH
26617: CALL_OW 115
// wait ( 0 0$20 ) ;
26621: LD_INT 700
26623: PPUSH
26624: CALL_OW 67
// SetSide ( un , your_side ) ;
26628: LD_VAR 0 1
26632: PPUSH
26633: LD_OWVAR 2
26637: PPUSH
26638: CALL_OW 235
// end ;
26642: PPOPN 2
26644: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26645: LD_EXP 52
26649: PUSH
26650: LD_EXP 85
26654: AND
26655: IFFALSE 26761
26657: GO 26659
26659: DISABLE
26660: LD_INT 0
26662: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26663: LD_ADDR_VAR 0 1
26667: PUSH
26668: LD_INT 22
26670: PUSH
26671: LD_OWVAR 2
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 2
26682: PUSH
26683: LD_INT 30
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 30
26695: PUSH
26696: LD_INT 1
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: LIST
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PPUSH
26712: CALL_OW 69
26716: ST_TO_ADDR
// if not depot then
26717: LD_VAR 0 1
26721: NOT
26722: IFFALSE 26726
// exit ;
26724: GO 26761
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26726: LD_VAR 0 1
26730: PUSH
26731: LD_INT 1
26733: ARRAY
26734: PPUSH
26735: CALL_OW 250
26739: PPUSH
26740: LD_VAR 0 1
26744: PUSH
26745: LD_INT 1
26747: ARRAY
26748: PPUSH
26749: CALL_OW 251
26753: PPUSH
26754: LD_INT 70
26756: PPUSH
26757: CALL_OW 495
// end ;
26761: PPOPN 1
26763: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26764: LD_EXP 52
26768: PUSH
26769: LD_EXP 86
26773: AND
26774: IFFALSE 26985
26776: GO 26778
26778: DISABLE
26779: LD_INT 0
26781: PPUSH
26782: PPUSH
26783: PPUSH
26784: PPUSH
26785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26786: LD_ADDR_VAR 0 5
26790: PUSH
26791: LD_INT 22
26793: PUSH
26794: LD_OWVAR 2
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 21
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PPUSH
26817: CALL_OW 69
26821: ST_TO_ADDR
// if not tmp then
26822: LD_VAR 0 5
26826: NOT
26827: IFFALSE 26831
// exit ;
26829: GO 26985
// for i in tmp do
26831: LD_ADDR_VAR 0 1
26835: PUSH
26836: LD_VAR 0 5
26840: PUSH
26841: FOR_IN
26842: IFFALSE 26983
// begin d := rand ( 0 , 5 ) ;
26844: LD_ADDR_VAR 0 4
26848: PUSH
26849: LD_INT 0
26851: PPUSH
26852: LD_INT 5
26854: PPUSH
26855: CALL_OW 12
26859: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26860: LD_ADDR_VAR 0 2
26864: PUSH
26865: LD_VAR 0 1
26869: PPUSH
26870: CALL_OW 250
26874: PPUSH
26875: LD_VAR 0 4
26879: PPUSH
26880: LD_INT 3
26882: PPUSH
26883: LD_INT 12
26885: PPUSH
26886: CALL_OW 12
26890: PPUSH
26891: CALL_OW 272
26895: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26896: LD_ADDR_VAR 0 3
26900: PUSH
26901: LD_VAR 0 1
26905: PPUSH
26906: CALL_OW 251
26910: PPUSH
26911: LD_VAR 0 4
26915: PPUSH
26916: LD_INT 3
26918: PPUSH
26919: LD_INT 12
26921: PPUSH
26922: CALL_OW 12
26926: PPUSH
26927: CALL_OW 273
26931: ST_TO_ADDR
// if ValidHex ( x , y ) then
26932: LD_VAR 0 2
26936: PPUSH
26937: LD_VAR 0 3
26941: PPUSH
26942: CALL_OW 488
26946: IFFALSE 26981
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26948: LD_VAR 0 1
26952: PPUSH
26953: LD_VAR 0 2
26957: PPUSH
26958: LD_VAR 0 3
26962: PPUSH
26963: LD_INT 3
26965: PPUSH
26966: LD_INT 6
26968: PPUSH
26969: CALL_OW 12
26973: PPUSH
26974: LD_INT 1
26976: PPUSH
26977: CALL_OW 483
// end ;
26981: GO 26841
26983: POP
26984: POP
// end ;
26985: PPOPN 5
26987: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26988: LD_EXP 52
26992: PUSH
26993: LD_EXP 87
26997: AND
26998: IFFALSE 27092
27000: GO 27002
27002: DISABLE
27003: LD_INT 0
27005: PPUSH
27006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27007: LD_ADDR_VAR 0 2
27011: PUSH
27012: LD_INT 22
27014: PUSH
27015: LD_OWVAR 2
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 32
27026: PUSH
27027: LD_INT 1
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 21
27036: PUSH
27037: LD_INT 2
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: LIST
27048: PPUSH
27049: CALL_OW 69
27053: ST_TO_ADDR
// if not tmp then
27054: LD_VAR 0 2
27058: NOT
27059: IFFALSE 27063
// exit ;
27061: GO 27092
// for i in tmp do
27063: LD_ADDR_VAR 0 1
27067: PUSH
27068: LD_VAR 0 2
27072: PUSH
27073: FOR_IN
27074: IFFALSE 27090
// SetFuel ( i , 0 ) ;
27076: LD_VAR 0 1
27080: PPUSH
27081: LD_INT 0
27083: PPUSH
27084: CALL_OW 240
27088: GO 27073
27090: POP
27091: POP
// end ;
27092: PPOPN 2
27094: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27095: LD_EXP 52
27099: PUSH
27100: LD_EXP 88
27104: AND
27105: IFFALSE 27171
27107: GO 27109
27109: DISABLE
27110: LD_INT 0
27112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27113: LD_ADDR_VAR 0 1
27117: PUSH
27118: LD_INT 22
27120: PUSH
27121: LD_OWVAR 2
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 30
27132: PUSH
27133: LD_INT 29
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PPUSH
27144: CALL_OW 69
27148: ST_TO_ADDR
// if not tmp then
27149: LD_VAR 0 1
27153: NOT
27154: IFFALSE 27158
// exit ;
27156: GO 27171
// DestroyUnit ( tmp [ 1 ] ) ;
27158: LD_VAR 0 1
27162: PUSH
27163: LD_INT 1
27165: ARRAY
27166: PPUSH
27167: CALL_OW 65
// end ;
27171: PPOPN 1
27173: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27174: LD_EXP 52
27178: PUSH
27179: LD_EXP 90
27183: AND
27184: IFFALSE 27313
27186: GO 27188
27188: DISABLE
27189: LD_INT 0
27191: PPUSH
// begin uc_side := 0 ;
27192: LD_ADDR_OWVAR 20
27196: PUSH
27197: LD_INT 0
27199: ST_TO_ADDR
// uc_nation := nation_arabian ;
27200: LD_ADDR_OWVAR 21
27204: PUSH
27205: LD_INT 2
27207: ST_TO_ADDR
// hc_gallery :=  ;
27208: LD_ADDR_OWVAR 33
27212: PUSH
27213: LD_STRING 
27215: ST_TO_ADDR
// hc_name :=  ;
27216: LD_ADDR_OWVAR 26
27220: PUSH
27221: LD_STRING 
27223: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27224: LD_INT 1
27226: PPUSH
27227: LD_INT 11
27229: PPUSH
27230: LD_INT 10
27232: PPUSH
27233: CALL_OW 380
// un := CreateHuman ;
27237: LD_ADDR_VAR 0 1
27241: PUSH
27242: CALL_OW 44
27246: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27247: LD_VAR 0 1
27251: PPUSH
27252: LD_INT 1
27254: PPUSH
27255: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27259: LD_INT 35
27261: PPUSH
27262: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27266: LD_VAR 0 1
27270: PPUSH
27271: LD_INT 22
27273: PUSH
27274: LD_OWVAR 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PPUSH
27283: CALL_OW 69
27287: PPUSH
27288: LD_VAR 0 1
27292: PPUSH
27293: CALL_OW 74
27297: PPUSH
27298: CALL_OW 115
// until IsDead ( un ) ;
27302: LD_VAR 0 1
27306: PPUSH
27307: CALL_OW 301
27311: IFFALSE 27259
// end ;
27313: PPOPN 1
27315: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27316: LD_EXP 52
27320: PUSH
27321: LD_EXP 92
27325: AND
27326: IFFALSE 27338
27328: GO 27330
27330: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27331: LD_STRING earthquake(getX(game), 0, 32)
27333: PPUSH
27334: CALL_OW 559
27338: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27339: LD_EXP 52
27343: PUSH
27344: LD_EXP 93
27348: AND
27349: IFFALSE 27440
27351: GO 27353
27353: DISABLE
27354: LD_INT 0
27356: PPUSH
// begin enable ;
27357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27358: LD_ADDR_VAR 0 1
27362: PUSH
27363: LD_INT 22
27365: PUSH
27366: LD_OWVAR 2
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 21
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 33
27387: PUSH
27388: LD_INT 3
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: LIST
27399: PPUSH
27400: CALL_OW 69
27404: ST_TO_ADDR
// if not tmp then
27405: LD_VAR 0 1
27409: NOT
27410: IFFALSE 27414
// exit ;
27412: GO 27440
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27414: LD_VAR 0 1
27418: PUSH
27419: LD_INT 1
27421: PPUSH
27422: LD_VAR 0 1
27426: PPUSH
27427: CALL_OW 12
27431: ARRAY
27432: PPUSH
27433: LD_INT 1
27435: PPUSH
27436: CALL_OW 234
// end ;
27440: PPOPN 1
27442: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27443: LD_EXP 52
27447: PUSH
27448: LD_EXP 94
27452: AND
27453: IFFALSE 27594
27455: GO 27457
27457: DISABLE
27458: LD_INT 0
27460: PPUSH
27461: PPUSH
27462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27463: LD_ADDR_VAR 0 3
27467: PUSH
27468: LD_INT 22
27470: PUSH
27471: LD_OWVAR 2
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 25
27482: PUSH
27483: LD_INT 1
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PPUSH
27494: CALL_OW 69
27498: ST_TO_ADDR
// if not tmp then
27499: LD_VAR 0 3
27503: NOT
27504: IFFALSE 27508
// exit ;
27506: GO 27594
// un := tmp [ rand ( 1 , tmp ) ] ;
27508: LD_ADDR_VAR 0 2
27512: PUSH
27513: LD_VAR 0 3
27517: PUSH
27518: LD_INT 1
27520: PPUSH
27521: LD_VAR 0 3
27525: PPUSH
27526: CALL_OW 12
27530: ARRAY
27531: ST_TO_ADDR
// if Crawls ( un ) then
27532: LD_VAR 0 2
27536: PPUSH
27537: CALL_OW 318
27541: IFFALSE 27552
// ComWalk ( un ) ;
27543: LD_VAR 0 2
27547: PPUSH
27548: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27552: LD_VAR 0 2
27556: PPUSH
27557: LD_INT 9
27559: PPUSH
27560: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27564: LD_INT 28
27566: PPUSH
27567: LD_OWVAR 2
27571: PPUSH
27572: LD_INT 2
27574: PPUSH
27575: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27579: LD_INT 29
27581: PPUSH
27582: LD_OWVAR 2
27586: PPUSH
27587: LD_INT 2
27589: PPUSH
27590: CALL_OW 322
// end ;
27594: PPOPN 3
27596: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27597: LD_EXP 52
27601: PUSH
27602: LD_EXP 95
27606: AND
27607: IFFALSE 27718
27609: GO 27611
27611: DISABLE
27612: LD_INT 0
27614: PPUSH
27615: PPUSH
27616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27617: LD_ADDR_VAR 0 3
27621: PUSH
27622: LD_INT 22
27624: PUSH
27625: LD_OWVAR 2
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 25
27636: PUSH
27637: LD_INT 1
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PPUSH
27648: CALL_OW 69
27652: ST_TO_ADDR
// if not tmp then
27653: LD_VAR 0 3
27657: NOT
27658: IFFALSE 27662
// exit ;
27660: GO 27718
// un := tmp [ rand ( 1 , tmp ) ] ;
27662: LD_ADDR_VAR 0 2
27666: PUSH
27667: LD_VAR 0 3
27671: PUSH
27672: LD_INT 1
27674: PPUSH
27675: LD_VAR 0 3
27679: PPUSH
27680: CALL_OW 12
27684: ARRAY
27685: ST_TO_ADDR
// if Crawls ( un ) then
27686: LD_VAR 0 2
27690: PPUSH
27691: CALL_OW 318
27695: IFFALSE 27706
// ComWalk ( un ) ;
27697: LD_VAR 0 2
27701: PPUSH
27702: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27706: LD_VAR 0 2
27710: PPUSH
27711: LD_INT 8
27713: PPUSH
27714: CALL_OW 336
// end ;
27718: PPOPN 3
27720: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27721: LD_EXP 52
27725: PUSH
27726: LD_EXP 96
27730: AND
27731: IFFALSE 27875
27733: GO 27735
27735: DISABLE
27736: LD_INT 0
27738: PPUSH
27739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27740: LD_ADDR_VAR 0 2
27744: PUSH
27745: LD_INT 22
27747: PUSH
27748: LD_OWVAR 2
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 21
27759: PUSH
27760: LD_INT 2
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 2
27769: PUSH
27770: LD_INT 34
27772: PUSH
27773: LD_INT 12
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 34
27782: PUSH
27783: LD_INT 51
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 34
27792: PUSH
27793: LD_INT 32
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: LIST
27810: PPUSH
27811: CALL_OW 69
27815: ST_TO_ADDR
// if not tmp then
27816: LD_VAR 0 2
27820: NOT
27821: IFFALSE 27825
// exit ;
27823: GO 27875
// for i in tmp do
27825: LD_ADDR_VAR 0 1
27829: PUSH
27830: LD_VAR 0 2
27834: PUSH
27835: FOR_IN
27836: IFFALSE 27873
// if GetCargo ( i , mat_artifact ) = 0 then
27838: LD_VAR 0 1
27842: PPUSH
27843: LD_INT 4
27845: PPUSH
27846: CALL_OW 289
27850: PUSH
27851: LD_INT 0
27853: EQUAL
27854: IFFALSE 27871
// SetCargo ( i , mat_siberit , 100 ) ;
27856: LD_VAR 0 1
27860: PPUSH
27861: LD_INT 3
27863: PPUSH
27864: LD_INT 100
27866: PPUSH
27867: CALL_OW 290
27871: GO 27835
27873: POP
27874: POP
// end ;
27875: PPOPN 2
27877: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27878: LD_EXP 52
27882: PUSH
27883: LD_EXP 97
27887: AND
27888: IFFALSE 28071
27890: GO 27892
27892: DISABLE
27893: LD_INT 0
27895: PPUSH
27896: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27897: LD_ADDR_VAR 0 2
27901: PUSH
27902: LD_INT 22
27904: PUSH
27905: LD_OWVAR 2
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PPUSH
27914: CALL_OW 69
27918: ST_TO_ADDR
// if not tmp then
27919: LD_VAR 0 2
27923: NOT
27924: IFFALSE 27928
// exit ;
27926: GO 28071
// for i := 1 to 2 do
27928: LD_ADDR_VAR 0 1
27932: PUSH
27933: DOUBLE
27934: LD_INT 1
27936: DEC
27937: ST_TO_ADDR
27938: LD_INT 2
27940: PUSH
27941: FOR_TO
27942: IFFALSE 28069
// begin uc_side := your_side ;
27944: LD_ADDR_OWVAR 20
27948: PUSH
27949: LD_OWVAR 2
27953: ST_TO_ADDR
// uc_nation := nation_american ;
27954: LD_ADDR_OWVAR 21
27958: PUSH
27959: LD_INT 1
27961: ST_TO_ADDR
// vc_chassis := us_morphling ;
27962: LD_ADDR_OWVAR 37
27966: PUSH
27967: LD_INT 5
27969: ST_TO_ADDR
// vc_engine := engine_siberite ;
27970: LD_ADDR_OWVAR 39
27974: PUSH
27975: LD_INT 3
27977: ST_TO_ADDR
// vc_control := control_computer ;
27978: LD_ADDR_OWVAR 38
27982: PUSH
27983: LD_INT 3
27985: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27986: LD_ADDR_OWVAR 40
27990: PUSH
27991: LD_INT 10
27993: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27994: LD_VAR 0 2
27998: PUSH
27999: LD_INT 1
28001: ARRAY
28002: PPUSH
28003: CALL_OW 310
28007: NOT
28008: IFFALSE 28055
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28010: CALL_OW 45
28014: PPUSH
28015: LD_VAR 0 2
28019: PUSH
28020: LD_INT 1
28022: ARRAY
28023: PPUSH
28024: CALL_OW 250
28028: PPUSH
28029: LD_VAR 0 2
28033: PUSH
28034: LD_INT 1
28036: ARRAY
28037: PPUSH
28038: CALL_OW 251
28042: PPUSH
28043: LD_INT 12
28045: PPUSH
28046: LD_INT 1
28048: PPUSH
28049: CALL_OW 50
28053: GO 28067
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28055: CALL_OW 45
28059: PPUSH
28060: LD_INT 1
28062: PPUSH
28063: CALL_OW 51
// end ;
28067: GO 27941
28069: POP
28070: POP
// end ;
28071: PPOPN 2
28073: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28074: LD_EXP 52
28078: PUSH
28079: LD_EXP 98
28083: AND
28084: IFFALSE 28306
28086: GO 28088
28088: DISABLE
28089: LD_INT 0
28091: PPUSH
28092: PPUSH
28093: PPUSH
28094: PPUSH
28095: PPUSH
28096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28097: LD_ADDR_VAR 0 6
28101: PUSH
28102: LD_INT 22
28104: PUSH
28105: LD_OWVAR 2
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 21
28116: PUSH
28117: LD_INT 1
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 3
28126: PUSH
28127: LD_INT 23
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: LIST
28145: PPUSH
28146: CALL_OW 69
28150: ST_TO_ADDR
// if not tmp then
28151: LD_VAR 0 6
28155: NOT
28156: IFFALSE 28160
// exit ;
28158: GO 28306
// s1 := rand ( 1 , 4 ) ;
28160: LD_ADDR_VAR 0 2
28164: PUSH
28165: LD_INT 1
28167: PPUSH
28168: LD_INT 4
28170: PPUSH
28171: CALL_OW 12
28175: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28176: LD_ADDR_VAR 0 4
28180: PUSH
28181: LD_VAR 0 6
28185: PUSH
28186: LD_INT 1
28188: ARRAY
28189: PPUSH
28190: LD_VAR 0 2
28194: PPUSH
28195: CALL_OW 259
28199: ST_TO_ADDR
// if s1 = 1 then
28200: LD_VAR 0 2
28204: PUSH
28205: LD_INT 1
28207: EQUAL
28208: IFFALSE 28228
// s2 := rand ( 2 , 4 ) else
28210: LD_ADDR_VAR 0 3
28214: PUSH
28215: LD_INT 2
28217: PPUSH
28218: LD_INT 4
28220: PPUSH
28221: CALL_OW 12
28225: ST_TO_ADDR
28226: GO 28236
// s2 := 1 ;
28228: LD_ADDR_VAR 0 3
28232: PUSH
28233: LD_INT 1
28235: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28236: LD_ADDR_VAR 0 5
28240: PUSH
28241: LD_VAR 0 6
28245: PUSH
28246: LD_INT 1
28248: ARRAY
28249: PPUSH
28250: LD_VAR 0 3
28254: PPUSH
28255: CALL_OW 259
28259: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28260: LD_VAR 0 6
28264: PUSH
28265: LD_INT 1
28267: ARRAY
28268: PPUSH
28269: LD_VAR 0 2
28273: PPUSH
28274: LD_VAR 0 5
28278: PPUSH
28279: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28283: LD_VAR 0 6
28287: PUSH
28288: LD_INT 1
28290: ARRAY
28291: PPUSH
28292: LD_VAR 0 3
28296: PPUSH
28297: LD_VAR 0 4
28301: PPUSH
28302: CALL_OW 237
// end ;
28306: PPOPN 6
28308: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28309: LD_EXP 52
28313: PUSH
28314: LD_EXP 99
28318: AND
28319: IFFALSE 28398
28321: GO 28323
28323: DISABLE
28324: LD_INT 0
28326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28327: LD_ADDR_VAR 0 1
28331: PUSH
28332: LD_INT 22
28334: PUSH
28335: LD_OWVAR 2
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 30
28346: PUSH
28347: LD_INT 3
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PPUSH
28358: CALL_OW 69
28362: ST_TO_ADDR
// if not tmp then
28363: LD_VAR 0 1
28367: NOT
28368: IFFALSE 28372
// exit ;
28370: GO 28398
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28372: LD_VAR 0 1
28376: PUSH
28377: LD_INT 1
28379: PPUSH
28380: LD_VAR 0 1
28384: PPUSH
28385: CALL_OW 12
28389: ARRAY
28390: PPUSH
28391: LD_INT 1
28393: PPUSH
28394: CALL_OW 234
// end ;
28398: PPOPN 1
28400: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28401: LD_EXP 52
28405: PUSH
28406: LD_EXP 100
28410: AND
28411: IFFALSE 28523
28413: GO 28415
28415: DISABLE
28416: LD_INT 0
28418: PPUSH
28419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28420: LD_ADDR_VAR 0 2
28424: PUSH
28425: LD_INT 22
28427: PUSH
28428: LD_OWVAR 2
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 2
28439: PUSH
28440: LD_INT 30
28442: PUSH
28443: LD_INT 27
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 30
28452: PUSH
28453: LD_INT 26
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 30
28462: PUSH
28463: LD_INT 28
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PPUSH
28480: CALL_OW 69
28484: ST_TO_ADDR
// if not tmp then
28485: LD_VAR 0 2
28489: NOT
28490: IFFALSE 28494
// exit ;
28492: GO 28523
// for i in tmp do
28494: LD_ADDR_VAR 0 1
28498: PUSH
28499: LD_VAR 0 2
28503: PUSH
28504: FOR_IN
28505: IFFALSE 28521
// SetLives ( i , 1 ) ;
28507: LD_VAR 0 1
28511: PPUSH
28512: LD_INT 1
28514: PPUSH
28515: CALL_OW 234
28519: GO 28504
28521: POP
28522: POP
// end ;
28523: PPOPN 2
28525: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28526: LD_EXP 52
28530: PUSH
28531: LD_EXP 101
28535: AND
28536: IFFALSE 28823
28538: GO 28540
28540: DISABLE
28541: LD_INT 0
28543: PPUSH
28544: PPUSH
28545: PPUSH
// begin i := rand ( 1 , 7 ) ;
28546: LD_ADDR_VAR 0 1
28550: PUSH
28551: LD_INT 1
28553: PPUSH
28554: LD_INT 7
28556: PPUSH
28557: CALL_OW 12
28561: ST_TO_ADDR
// case i of 1 :
28562: LD_VAR 0 1
28566: PUSH
28567: LD_INT 1
28569: DOUBLE
28570: EQUAL
28571: IFTRUE 28575
28573: GO 28585
28575: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28576: LD_STRING earthquake(getX(game), 0, 32)
28578: PPUSH
28579: CALL_OW 559
28583: GO 28823
28585: LD_INT 2
28587: DOUBLE
28588: EQUAL
28589: IFTRUE 28593
28591: GO 28607
28593: POP
// begin ToLua ( displayStucuk(); ) ;
28594: LD_STRING displayStucuk();
28596: PPUSH
28597: CALL_OW 559
// ResetFog ;
28601: CALL_OW 335
// end ; 3 :
28605: GO 28823
28607: LD_INT 3
28609: DOUBLE
28610: EQUAL
28611: IFTRUE 28615
28613: GO 28719
28615: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28616: LD_ADDR_VAR 0 2
28620: PUSH
28621: LD_INT 22
28623: PUSH
28624: LD_OWVAR 2
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 25
28635: PUSH
28636: LD_INT 1
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PPUSH
28647: CALL_OW 69
28651: ST_TO_ADDR
// if not tmp then
28652: LD_VAR 0 2
28656: NOT
28657: IFFALSE 28661
// exit ;
28659: GO 28823
// un := tmp [ rand ( 1 , tmp ) ] ;
28661: LD_ADDR_VAR 0 3
28665: PUSH
28666: LD_VAR 0 2
28670: PUSH
28671: LD_INT 1
28673: PPUSH
28674: LD_VAR 0 2
28678: PPUSH
28679: CALL_OW 12
28683: ARRAY
28684: ST_TO_ADDR
// if Crawls ( un ) then
28685: LD_VAR 0 3
28689: PPUSH
28690: CALL_OW 318
28694: IFFALSE 28705
// ComWalk ( un ) ;
28696: LD_VAR 0 3
28700: PPUSH
28701: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28705: LD_VAR 0 3
28709: PPUSH
28710: LD_INT 8
28712: PPUSH
28713: CALL_OW 336
// end ; 4 :
28717: GO 28823
28719: LD_INT 4
28721: DOUBLE
28722: EQUAL
28723: IFTRUE 28727
28725: GO 28801
28727: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28728: LD_ADDR_VAR 0 2
28732: PUSH
28733: LD_INT 22
28735: PUSH
28736: LD_OWVAR 2
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 30
28747: PUSH
28748: LD_INT 29
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PPUSH
28759: CALL_OW 69
28763: ST_TO_ADDR
// if not tmp then
28764: LD_VAR 0 2
28768: NOT
28769: IFFALSE 28773
// exit ;
28771: GO 28823
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28773: LD_VAR 0 2
28777: PUSH
28778: LD_INT 1
28780: ARRAY
28781: PPUSH
28782: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28786: LD_VAR 0 2
28790: PUSH
28791: LD_INT 1
28793: ARRAY
28794: PPUSH
28795: CALL_OW 65
// end ; 5 .. 7 :
28799: GO 28823
28801: LD_INT 5
28803: DOUBLE
28804: GREATEREQUAL
28805: IFFALSE 28813
28807: LD_INT 7
28809: DOUBLE
28810: LESSEQUAL
28811: IFTRUE 28815
28813: GO 28822
28815: POP
// StreamSibBomb ; end ;
28816: CALL 25060 0 0
28820: GO 28823
28822: POP
// end ;
28823: PPOPN 3
28825: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28826: LD_EXP 52
28830: PUSH
28831: LD_EXP 102
28835: AND
28836: IFFALSE 28992
28838: GO 28840
28840: DISABLE
28841: LD_INT 0
28843: PPUSH
28844: PPUSH
28845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28846: LD_ADDR_VAR 0 2
28850: PUSH
28851: LD_INT 81
28853: PUSH
28854: LD_OWVAR 2
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 2
28865: PUSH
28866: LD_INT 21
28868: PUSH
28869: LD_INT 1
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 21
28878: PUSH
28879: LD_INT 2
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: LIST
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PPUSH
28895: CALL_OW 69
28899: ST_TO_ADDR
// if not tmp then
28900: LD_VAR 0 2
28904: NOT
28905: IFFALSE 28909
// exit ;
28907: GO 28992
// p := 0 ;
28909: LD_ADDR_VAR 0 3
28913: PUSH
28914: LD_INT 0
28916: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28917: LD_INT 35
28919: PPUSH
28920: CALL_OW 67
// p := p + 1 ;
28924: LD_ADDR_VAR 0 3
28928: PUSH
28929: LD_VAR 0 3
28933: PUSH
28934: LD_INT 1
28936: PLUS
28937: ST_TO_ADDR
// for i in tmp do
28938: LD_ADDR_VAR 0 1
28942: PUSH
28943: LD_VAR 0 2
28947: PUSH
28948: FOR_IN
28949: IFFALSE 28980
// if GetLives ( i ) < 1000 then
28951: LD_VAR 0 1
28955: PPUSH
28956: CALL_OW 256
28960: PUSH
28961: LD_INT 1000
28963: LESS
28964: IFFALSE 28978
// SetLives ( i , 1000 ) ;
28966: LD_VAR 0 1
28970: PPUSH
28971: LD_INT 1000
28973: PPUSH
28974: CALL_OW 234
28978: GO 28948
28980: POP
28981: POP
// until p > 20 ;
28982: LD_VAR 0 3
28986: PUSH
28987: LD_INT 20
28989: GREATER
28990: IFFALSE 28917
// end ;
28992: PPOPN 3
28994: END
// every 0 0$1 trigger StreamModeActive and sTime do
28995: LD_EXP 52
28999: PUSH
29000: LD_EXP 103
29004: AND
29005: IFFALSE 29040
29007: GO 29009
29009: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29010: LD_INT 28
29012: PPUSH
29013: LD_OWVAR 2
29017: PPUSH
29018: LD_INT 2
29020: PPUSH
29021: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29025: LD_INT 30
29027: PPUSH
29028: LD_OWVAR 2
29032: PPUSH
29033: LD_INT 2
29035: PPUSH
29036: CALL_OW 322
// end ;
29040: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29041: LD_EXP 52
29045: PUSH
29046: LD_EXP 104
29050: AND
29051: IFFALSE 29172
29053: GO 29055
29055: DISABLE
29056: LD_INT 0
29058: PPUSH
29059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29060: LD_ADDR_VAR 0 2
29064: PUSH
29065: LD_INT 22
29067: PUSH
29068: LD_OWVAR 2
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 21
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 3
29089: PUSH
29090: LD_INT 23
29092: PUSH
29093: LD_INT 0
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: LIST
29108: PPUSH
29109: CALL_OW 69
29113: ST_TO_ADDR
// if not tmp then
29114: LD_VAR 0 2
29118: NOT
29119: IFFALSE 29123
// exit ;
29121: GO 29172
// for i in tmp do
29123: LD_ADDR_VAR 0 1
29127: PUSH
29128: LD_VAR 0 2
29132: PUSH
29133: FOR_IN
29134: IFFALSE 29170
// begin if Crawls ( i ) then
29136: LD_VAR 0 1
29140: PPUSH
29141: CALL_OW 318
29145: IFFALSE 29156
// ComWalk ( i ) ;
29147: LD_VAR 0 1
29151: PPUSH
29152: CALL_OW 138
// SetClass ( i , 2 ) ;
29156: LD_VAR 0 1
29160: PPUSH
29161: LD_INT 2
29163: PPUSH
29164: CALL_OW 336
// end ;
29168: GO 29133
29170: POP
29171: POP
// end ;
29172: PPOPN 2
29174: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29175: LD_EXP 52
29179: PUSH
29180: LD_EXP 105
29184: AND
29185: IFFALSE 29473
29187: GO 29189
29189: DISABLE
29190: LD_INT 0
29192: PPUSH
29193: PPUSH
29194: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29195: LD_OWVAR 2
29199: PPUSH
29200: LD_INT 9
29202: PPUSH
29203: LD_INT 1
29205: PPUSH
29206: LD_INT 1
29208: PPUSH
29209: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29213: LD_INT 9
29215: PPUSH
29216: LD_OWVAR 2
29220: PPUSH
29221: CALL_OW 343
// uc_side := 9 ;
29225: LD_ADDR_OWVAR 20
29229: PUSH
29230: LD_INT 9
29232: ST_TO_ADDR
// uc_nation := 2 ;
29233: LD_ADDR_OWVAR 21
29237: PUSH
29238: LD_INT 2
29240: ST_TO_ADDR
// hc_name := Dark Warrior ;
29241: LD_ADDR_OWVAR 26
29245: PUSH
29246: LD_STRING Dark Warrior
29248: ST_TO_ADDR
// hc_gallery :=  ;
29249: LD_ADDR_OWVAR 33
29253: PUSH
29254: LD_STRING 
29256: ST_TO_ADDR
// hc_noskilllimit := true ;
29257: LD_ADDR_OWVAR 76
29261: PUSH
29262: LD_INT 1
29264: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29265: LD_ADDR_OWVAR 31
29269: PUSH
29270: LD_INT 30
29272: PUSH
29273: LD_INT 30
29275: PUSH
29276: LD_INT 30
29278: PUSH
29279: LD_INT 30
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: ST_TO_ADDR
// un := CreateHuman ;
29288: LD_ADDR_VAR 0 3
29292: PUSH
29293: CALL_OW 44
29297: ST_TO_ADDR
// hc_noskilllimit := false ;
29298: LD_ADDR_OWVAR 76
29302: PUSH
29303: LD_INT 0
29305: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29306: LD_VAR 0 3
29310: PPUSH
29311: LD_INT 1
29313: PPUSH
29314: CALL_OW 51
// ToLua ( playRanger() ) ;
29318: LD_STRING playRanger()
29320: PPUSH
29321: CALL_OW 559
// p := 0 ;
29325: LD_ADDR_VAR 0 2
29329: PUSH
29330: LD_INT 0
29332: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29333: LD_INT 35
29335: PPUSH
29336: CALL_OW 67
// p := p + 1 ;
29340: LD_ADDR_VAR 0 2
29344: PUSH
29345: LD_VAR 0 2
29349: PUSH
29350: LD_INT 1
29352: PLUS
29353: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29354: LD_VAR 0 3
29358: PPUSH
29359: CALL_OW 256
29363: PUSH
29364: LD_INT 1000
29366: LESS
29367: IFFALSE 29381
// SetLives ( un , 1000 ) ;
29369: LD_VAR 0 3
29373: PPUSH
29374: LD_INT 1000
29376: PPUSH
29377: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29381: LD_VAR 0 3
29385: PPUSH
29386: LD_INT 81
29388: PUSH
29389: LD_OWVAR 2
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 91
29400: PUSH
29401: LD_VAR 0 3
29405: PUSH
29406: LD_INT 30
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PPUSH
29418: CALL_OW 69
29422: PPUSH
29423: LD_VAR 0 3
29427: PPUSH
29428: CALL_OW 74
29432: PPUSH
29433: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29437: LD_VAR 0 2
29441: PUSH
29442: LD_INT 80
29444: GREATER
29445: PUSH
29446: LD_VAR 0 3
29450: PPUSH
29451: CALL_OW 301
29455: OR
29456: IFFALSE 29333
// if un then
29458: LD_VAR 0 3
29462: IFFALSE 29473
// RemoveUnit ( un ) ;
29464: LD_VAR 0 3
29468: PPUSH
29469: CALL_OW 64
// end ;
29473: PPOPN 3
29475: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29476: LD_EXP 106
29480: IFFALSE 29596
29482: GO 29484
29484: DISABLE
29485: LD_INT 0
29487: PPUSH
29488: PPUSH
29489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29490: LD_ADDR_VAR 0 2
29494: PUSH
29495: LD_INT 81
29497: PUSH
29498: LD_OWVAR 2
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 21
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PPUSH
29521: CALL_OW 69
29525: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29526: LD_STRING playComputer()
29528: PPUSH
29529: CALL_OW 559
// if not tmp then
29533: LD_VAR 0 2
29537: NOT
29538: IFFALSE 29542
// exit ;
29540: GO 29596
// for i in tmp do
29542: LD_ADDR_VAR 0 1
29546: PUSH
29547: LD_VAR 0 2
29551: PUSH
29552: FOR_IN
29553: IFFALSE 29594
// for j := 1 to 4 do
29555: LD_ADDR_VAR 0 3
29559: PUSH
29560: DOUBLE
29561: LD_INT 1
29563: DEC
29564: ST_TO_ADDR
29565: LD_INT 4
29567: PUSH
29568: FOR_TO
29569: IFFALSE 29590
// SetSkill ( i , j , 10 ) ;
29571: LD_VAR 0 1
29575: PPUSH
29576: LD_VAR 0 3
29580: PPUSH
29581: LD_INT 10
29583: PPUSH
29584: CALL_OW 237
29588: GO 29568
29590: POP
29591: POP
29592: GO 29552
29594: POP
29595: POP
// end ;
29596: PPOPN 3
29598: END
// every 0 0$1 trigger s30 do var i , tmp ;
29599: LD_EXP 107
29603: IFFALSE 29672
29605: GO 29607
29607: DISABLE
29608: LD_INT 0
29610: PPUSH
29611: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29612: LD_ADDR_VAR 0 2
29616: PUSH
29617: LD_INT 22
29619: PUSH
29620: LD_OWVAR 2
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PPUSH
29629: CALL_OW 69
29633: ST_TO_ADDR
// if not tmp then
29634: LD_VAR 0 2
29638: NOT
29639: IFFALSE 29643
// exit ;
29641: GO 29672
// for i in tmp do
29643: LD_ADDR_VAR 0 1
29647: PUSH
29648: LD_VAR 0 2
29652: PUSH
29653: FOR_IN
29654: IFFALSE 29670
// SetLives ( i , 300 ) ;
29656: LD_VAR 0 1
29660: PPUSH
29661: LD_INT 300
29663: PPUSH
29664: CALL_OW 234
29668: GO 29653
29670: POP
29671: POP
// end ;
29672: PPOPN 2
29674: END
// every 0 0$1 trigger s60 do var i , tmp ;
29675: LD_EXP 108
29679: IFFALSE 29748
29681: GO 29683
29683: DISABLE
29684: LD_INT 0
29686: PPUSH
29687: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29688: LD_ADDR_VAR 0 2
29692: PUSH
29693: LD_INT 22
29695: PUSH
29696: LD_OWVAR 2
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PPUSH
29705: CALL_OW 69
29709: ST_TO_ADDR
// if not tmp then
29710: LD_VAR 0 2
29714: NOT
29715: IFFALSE 29719
// exit ;
29717: GO 29748
// for i in tmp do
29719: LD_ADDR_VAR 0 1
29723: PUSH
29724: LD_VAR 0 2
29728: PUSH
29729: FOR_IN
29730: IFFALSE 29746
// SetLives ( i , 600 ) ;
29732: LD_VAR 0 1
29736: PPUSH
29737: LD_INT 600
29739: PPUSH
29740: CALL_OW 234
29744: GO 29729
29746: POP
29747: POP
// end ;
29748: PPOPN 2
29750: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29751: LD_INT 0
29753: PPUSH
// case cmd of 301 :
29754: LD_VAR 0 1
29758: PUSH
29759: LD_INT 301
29761: DOUBLE
29762: EQUAL
29763: IFTRUE 29767
29765: GO 29799
29767: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29768: LD_VAR 0 6
29772: PPUSH
29773: LD_VAR 0 7
29777: PPUSH
29778: LD_VAR 0 8
29782: PPUSH
29783: LD_VAR 0 4
29787: PPUSH
29788: LD_VAR 0 5
29792: PPUSH
29793: CALL 31000 0 5
29797: GO 29920
29799: LD_INT 302
29801: DOUBLE
29802: EQUAL
29803: IFTRUE 29807
29805: GO 29844
29807: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29808: LD_VAR 0 6
29812: PPUSH
29813: LD_VAR 0 7
29817: PPUSH
29818: LD_VAR 0 8
29822: PPUSH
29823: LD_VAR 0 9
29827: PPUSH
29828: LD_VAR 0 4
29832: PPUSH
29833: LD_VAR 0 5
29837: PPUSH
29838: CALL 31091 0 6
29842: GO 29920
29844: LD_INT 303
29846: DOUBLE
29847: EQUAL
29848: IFTRUE 29852
29850: GO 29889
29852: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29853: LD_VAR 0 6
29857: PPUSH
29858: LD_VAR 0 7
29862: PPUSH
29863: LD_VAR 0 8
29867: PPUSH
29868: LD_VAR 0 9
29872: PPUSH
29873: LD_VAR 0 4
29877: PPUSH
29878: LD_VAR 0 5
29882: PPUSH
29883: CALL 29925 0 6
29887: GO 29920
29889: LD_INT 304
29891: DOUBLE
29892: EQUAL
29893: IFTRUE 29897
29895: GO 29919
29897: POP
// hHackTeleport ( unit , x , y ) ; end ;
29898: LD_VAR 0 2
29902: PPUSH
29903: LD_VAR 0 4
29907: PPUSH
29908: LD_VAR 0 5
29912: PPUSH
29913: CALL 31684 0 3
29917: GO 29920
29919: POP
// end ;
29920: LD_VAR 0 12
29924: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29925: LD_INT 0
29927: PPUSH
29928: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29929: LD_VAR 0 1
29933: PUSH
29934: LD_INT 1
29936: LESS
29937: PUSH
29938: LD_VAR 0 1
29942: PUSH
29943: LD_INT 3
29945: GREATER
29946: OR
29947: PUSH
29948: LD_VAR 0 5
29952: PPUSH
29953: LD_VAR 0 6
29957: PPUSH
29958: CALL_OW 428
29962: OR
29963: IFFALSE 29967
// exit ;
29965: GO 30687
// uc_side := your_side ;
29967: LD_ADDR_OWVAR 20
29971: PUSH
29972: LD_OWVAR 2
29976: ST_TO_ADDR
// uc_nation := nation ;
29977: LD_ADDR_OWVAR 21
29981: PUSH
29982: LD_VAR 0 1
29986: ST_TO_ADDR
// bc_level = 1 ;
29987: LD_ADDR_OWVAR 43
29991: PUSH
29992: LD_INT 1
29994: ST_TO_ADDR
// case btype of 1 :
29995: LD_VAR 0 2
29999: PUSH
30000: LD_INT 1
30002: DOUBLE
30003: EQUAL
30004: IFTRUE 30008
30006: GO 30019
30008: POP
// bc_type := b_depot ; 2 :
30009: LD_ADDR_OWVAR 42
30013: PUSH
30014: LD_INT 0
30016: ST_TO_ADDR
30017: GO 30631
30019: LD_INT 2
30021: DOUBLE
30022: EQUAL
30023: IFTRUE 30027
30025: GO 30038
30027: POP
// bc_type := b_warehouse ; 3 :
30028: LD_ADDR_OWVAR 42
30032: PUSH
30033: LD_INT 1
30035: ST_TO_ADDR
30036: GO 30631
30038: LD_INT 3
30040: DOUBLE
30041: EQUAL
30042: IFTRUE 30046
30044: GO 30057
30046: POP
// bc_type := b_lab ; 4 .. 9 :
30047: LD_ADDR_OWVAR 42
30051: PUSH
30052: LD_INT 6
30054: ST_TO_ADDR
30055: GO 30631
30057: LD_INT 4
30059: DOUBLE
30060: GREATEREQUAL
30061: IFFALSE 30069
30063: LD_INT 9
30065: DOUBLE
30066: LESSEQUAL
30067: IFTRUE 30071
30069: GO 30123
30071: POP
// begin bc_type := b_lab_half ;
30072: LD_ADDR_OWVAR 42
30076: PUSH
30077: LD_INT 7
30079: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30080: LD_ADDR_OWVAR 44
30084: PUSH
30085: LD_INT 10
30087: PUSH
30088: LD_INT 11
30090: PUSH
30091: LD_INT 12
30093: PUSH
30094: LD_INT 15
30096: PUSH
30097: LD_INT 14
30099: PUSH
30100: LD_INT 13
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: PUSH
30111: LD_VAR 0 2
30115: PUSH
30116: LD_INT 3
30118: MINUS
30119: ARRAY
30120: ST_TO_ADDR
// end ; 10 .. 13 :
30121: GO 30631
30123: LD_INT 10
30125: DOUBLE
30126: GREATEREQUAL
30127: IFFALSE 30135
30129: LD_INT 13
30131: DOUBLE
30132: LESSEQUAL
30133: IFTRUE 30137
30135: GO 30214
30137: POP
// begin bc_type := b_lab_full ;
30138: LD_ADDR_OWVAR 42
30142: PUSH
30143: LD_INT 8
30145: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30146: LD_ADDR_OWVAR 44
30150: PUSH
30151: LD_INT 10
30153: PUSH
30154: LD_INT 12
30156: PUSH
30157: LD_INT 14
30159: PUSH
30160: LD_INT 13
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: PUSH
30169: LD_VAR 0 2
30173: PUSH
30174: LD_INT 9
30176: MINUS
30177: ARRAY
30178: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30179: LD_ADDR_OWVAR 45
30183: PUSH
30184: LD_INT 11
30186: PUSH
30187: LD_INT 15
30189: PUSH
30190: LD_INT 12
30192: PUSH
30193: LD_INT 15
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: PUSH
30202: LD_VAR 0 2
30206: PUSH
30207: LD_INT 9
30209: MINUS
30210: ARRAY
30211: ST_TO_ADDR
// end ; 14 :
30212: GO 30631
30214: LD_INT 14
30216: DOUBLE
30217: EQUAL
30218: IFTRUE 30222
30220: GO 30233
30222: POP
// bc_type := b_workshop ; 15 :
30223: LD_ADDR_OWVAR 42
30227: PUSH
30228: LD_INT 2
30230: ST_TO_ADDR
30231: GO 30631
30233: LD_INT 15
30235: DOUBLE
30236: EQUAL
30237: IFTRUE 30241
30239: GO 30252
30241: POP
// bc_type := b_factory ; 16 :
30242: LD_ADDR_OWVAR 42
30246: PUSH
30247: LD_INT 3
30249: ST_TO_ADDR
30250: GO 30631
30252: LD_INT 16
30254: DOUBLE
30255: EQUAL
30256: IFTRUE 30260
30258: GO 30271
30260: POP
// bc_type := b_ext_gun ; 17 :
30261: LD_ADDR_OWVAR 42
30265: PUSH
30266: LD_INT 17
30268: ST_TO_ADDR
30269: GO 30631
30271: LD_INT 17
30273: DOUBLE
30274: EQUAL
30275: IFTRUE 30279
30277: GO 30307
30279: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30280: LD_ADDR_OWVAR 42
30284: PUSH
30285: LD_INT 19
30287: PUSH
30288: LD_INT 23
30290: PUSH
30291: LD_INT 19
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: LIST
30298: PUSH
30299: LD_VAR 0 1
30303: ARRAY
30304: ST_TO_ADDR
30305: GO 30631
30307: LD_INT 18
30309: DOUBLE
30310: EQUAL
30311: IFTRUE 30315
30313: GO 30326
30315: POP
// bc_type := b_ext_radar ; 19 :
30316: LD_ADDR_OWVAR 42
30320: PUSH
30321: LD_INT 20
30323: ST_TO_ADDR
30324: GO 30631
30326: LD_INT 19
30328: DOUBLE
30329: EQUAL
30330: IFTRUE 30334
30332: GO 30345
30334: POP
// bc_type := b_ext_radio ; 20 :
30335: LD_ADDR_OWVAR 42
30339: PUSH
30340: LD_INT 22
30342: ST_TO_ADDR
30343: GO 30631
30345: LD_INT 20
30347: DOUBLE
30348: EQUAL
30349: IFTRUE 30353
30351: GO 30364
30353: POP
// bc_type := b_ext_siberium ; 21 :
30354: LD_ADDR_OWVAR 42
30358: PUSH
30359: LD_INT 21
30361: ST_TO_ADDR
30362: GO 30631
30364: LD_INT 21
30366: DOUBLE
30367: EQUAL
30368: IFTRUE 30372
30370: GO 30383
30372: POP
// bc_type := b_ext_computer ; 22 :
30373: LD_ADDR_OWVAR 42
30377: PUSH
30378: LD_INT 24
30380: ST_TO_ADDR
30381: GO 30631
30383: LD_INT 22
30385: DOUBLE
30386: EQUAL
30387: IFTRUE 30391
30389: GO 30402
30391: POP
// bc_type := b_ext_track ; 23 :
30392: LD_ADDR_OWVAR 42
30396: PUSH
30397: LD_INT 16
30399: ST_TO_ADDR
30400: GO 30631
30402: LD_INT 23
30404: DOUBLE
30405: EQUAL
30406: IFTRUE 30410
30408: GO 30421
30410: POP
// bc_type := b_ext_laser ; 24 :
30411: LD_ADDR_OWVAR 42
30415: PUSH
30416: LD_INT 25
30418: ST_TO_ADDR
30419: GO 30631
30421: LD_INT 24
30423: DOUBLE
30424: EQUAL
30425: IFTRUE 30429
30427: GO 30440
30429: POP
// bc_type := b_control_tower ; 25 :
30430: LD_ADDR_OWVAR 42
30434: PUSH
30435: LD_INT 36
30437: ST_TO_ADDR
30438: GO 30631
30440: LD_INT 25
30442: DOUBLE
30443: EQUAL
30444: IFTRUE 30448
30446: GO 30459
30448: POP
// bc_type := b_breastwork ; 26 :
30449: LD_ADDR_OWVAR 42
30453: PUSH
30454: LD_INT 31
30456: ST_TO_ADDR
30457: GO 30631
30459: LD_INT 26
30461: DOUBLE
30462: EQUAL
30463: IFTRUE 30467
30465: GO 30478
30467: POP
// bc_type := b_bunker ; 27 :
30468: LD_ADDR_OWVAR 42
30472: PUSH
30473: LD_INT 32
30475: ST_TO_ADDR
30476: GO 30631
30478: LD_INT 27
30480: DOUBLE
30481: EQUAL
30482: IFTRUE 30486
30484: GO 30497
30486: POP
// bc_type := b_turret ; 28 :
30487: LD_ADDR_OWVAR 42
30491: PUSH
30492: LD_INT 33
30494: ST_TO_ADDR
30495: GO 30631
30497: LD_INT 28
30499: DOUBLE
30500: EQUAL
30501: IFTRUE 30505
30503: GO 30516
30505: POP
// bc_type := b_armoury ; 29 :
30506: LD_ADDR_OWVAR 42
30510: PUSH
30511: LD_INT 4
30513: ST_TO_ADDR
30514: GO 30631
30516: LD_INT 29
30518: DOUBLE
30519: EQUAL
30520: IFTRUE 30524
30522: GO 30535
30524: POP
// bc_type := b_barracks ; 30 :
30525: LD_ADDR_OWVAR 42
30529: PUSH
30530: LD_INT 5
30532: ST_TO_ADDR
30533: GO 30631
30535: LD_INT 30
30537: DOUBLE
30538: EQUAL
30539: IFTRUE 30543
30541: GO 30554
30543: POP
// bc_type := b_solar_power ; 31 :
30544: LD_ADDR_OWVAR 42
30548: PUSH
30549: LD_INT 27
30551: ST_TO_ADDR
30552: GO 30631
30554: LD_INT 31
30556: DOUBLE
30557: EQUAL
30558: IFTRUE 30562
30560: GO 30573
30562: POP
// bc_type := b_oil_power ; 32 :
30563: LD_ADDR_OWVAR 42
30567: PUSH
30568: LD_INT 26
30570: ST_TO_ADDR
30571: GO 30631
30573: LD_INT 32
30575: DOUBLE
30576: EQUAL
30577: IFTRUE 30581
30579: GO 30592
30581: POP
// bc_type := b_siberite_power ; 33 :
30582: LD_ADDR_OWVAR 42
30586: PUSH
30587: LD_INT 28
30589: ST_TO_ADDR
30590: GO 30631
30592: LD_INT 33
30594: DOUBLE
30595: EQUAL
30596: IFTRUE 30600
30598: GO 30611
30600: POP
// bc_type := b_oil_mine ; 34 :
30601: LD_ADDR_OWVAR 42
30605: PUSH
30606: LD_INT 29
30608: ST_TO_ADDR
30609: GO 30631
30611: LD_INT 34
30613: DOUBLE
30614: EQUAL
30615: IFTRUE 30619
30617: GO 30630
30619: POP
// bc_type := b_siberite_mine ; end ;
30620: LD_ADDR_OWVAR 42
30624: PUSH
30625: LD_INT 30
30627: ST_TO_ADDR
30628: GO 30631
30630: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30631: LD_ADDR_VAR 0 8
30635: PUSH
30636: LD_VAR 0 5
30640: PPUSH
30641: LD_VAR 0 6
30645: PPUSH
30646: LD_VAR 0 3
30650: PPUSH
30651: CALL_OW 47
30655: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30656: LD_OWVAR 42
30660: PUSH
30661: LD_INT 32
30663: PUSH
30664: LD_INT 33
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: IN
30671: IFFALSE 30687
// PlaceWeaponTurret ( b , weapon ) ;
30673: LD_VAR 0 8
30677: PPUSH
30678: LD_VAR 0 4
30682: PPUSH
30683: CALL_OW 431
// end ;
30687: LD_VAR 0 7
30691: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30692: LD_INT 0
30694: PPUSH
30695: PPUSH
30696: PPUSH
30697: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30698: LD_ADDR_VAR 0 4
30702: PUSH
30703: LD_INT 22
30705: PUSH
30706: LD_OWVAR 2
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 2
30717: PUSH
30718: LD_INT 30
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 30
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PPUSH
30747: CALL_OW 69
30751: ST_TO_ADDR
// if not tmp then
30752: LD_VAR 0 4
30756: NOT
30757: IFFALSE 30761
// exit ;
30759: GO 30820
// for i in tmp do
30761: LD_ADDR_VAR 0 2
30765: PUSH
30766: LD_VAR 0 4
30770: PUSH
30771: FOR_IN
30772: IFFALSE 30818
// for j = 1 to 3 do
30774: LD_ADDR_VAR 0 3
30778: PUSH
30779: DOUBLE
30780: LD_INT 1
30782: DEC
30783: ST_TO_ADDR
30784: LD_INT 3
30786: PUSH
30787: FOR_TO
30788: IFFALSE 30814
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30790: LD_VAR 0 2
30794: PPUSH
30795: CALL_OW 274
30799: PPUSH
30800: LD_VAR 0 3
30804: PPUSH
30805: LD_INT 99999
30807: PPUSH
30808: CALL_OW 277
30812: GO 30787
30814: POP
30815: POP
30816: GO 30771
30818: POP
30819: POP
// end ;
30820: LD_VAR 0 1
30824: RET
// export function hHackSetLevel10 ; var i , j ; begin
30825: LD_INT 0
30827: PPUSH
30828: PPUSH
30829: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30830: LD_ADDR_VAR 0 2
30834: PUSH
30835: LD_INT 21
30837: PUSH
30838: LD_INT 1
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PPUSH
30845: CALL_OW 69
30849: PUSH
30850: FOR_IN
30851: IFFALSE 30903
// if IsSelected ( i ) then
30853: LD_VAR 0 2
30857: PPUSH
30858: CALL_OW 306
30862: IFFALSE 30901
// begin for j := 1 to 4 do
30864: LD_ADDR_VAR 0 3
30868: PUSH
30869: DOUBLE
30870: LD_INT 1
30872: DEC
30873: ST_TO_ADDR
30874: LD_INT 4
30876: PUSH
30877: FOR_TO
30878: IFFALSE 30899
// SetSkill ( i , j , 10 ) ;
30880: LD_VAR 0 2
30884: PPUSH
30885: LD_VAR 0 3
30889: PPUSH
30890: LD_INT 10
30892: PPUSH
30893: CALL_OW 237
30897: GO 30877
30899: POP
30900: POP
// end ;
30901: GO 30850
30903: POP
30904: POP
// end ;
30905: LD_VAR 0 1
30909: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30910: LD_INT 0
30912: PPUSH
30913: PPUSH
30914: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30915: LD_ADDR_VAR 0 2
30919: PUSH
30920: LD_INT 22
30922: PUSH
30923: LD_OWVAR 2
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 21
30934: PUSH
30935: LD_INT 1
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PPUSH
30946: CALL_OW 69
30950: PUSH
30951: FOR_IN
30952: IFFALSE 30993
// begin for j := 1 to 4 do
30954: LD_ADDR_VAR 0 3
30958: PUSH
30959: DOUBLE
30960: LD_INT 1
30962: DEC
30963: ST_TO_ADDR
30964: LD_INT 4
30966: PUSH
30967: FOR_TO
30968: IFFALSE 30989
// SetSkill ( i , j , 10 ) ;
30970: LD_VAR 0 2
30974: PPUSH
30975: LD_VAR 0 3
30979: PPUSH
30980: LD_INT 10
30982: PPUSH
30983: CALL_OW 237
30987: GO 30967
30989: POP
30990: POP
// end ;
30991: GO 30951
30993: POP
30994: POP
// end ;
30995: LD_VAR 0 1
30999: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31000: LD_INT 0
31002: PPUSH
// uc_side := your_side ;
31003: LD_ADDR_OWVAR 20
31007: PUSH
31008: LD_OWVAR 2
31012: ST_TO_ADDR
// uc_nation := nation ;
31013: LD_ADDR_OWVAR 21
31017: PUSH
31018: LD_VAR 0 1
31022: ST_TO_ADDR
// InitHc ;
31023: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31027: LD_INT 0
31029: PPUSH
31030: LD_VAR 0 2
31034: PPUSH
31035: LD_VAR 0 3
31039: PPUSH
31040: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31044: LD_VAR 0 4
31048: PPUSH
31049: LD_VAR 0 5
31053: PPUSH
31054: CALL_OW 428
31058: PUSH
31059: LD_INT 0
31061: EQUAL
31062: IFFALSE 31086
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31064: CALL_OW 44
31068: PPUSH
31069: LD_VAR 0 4
31073: PPUSH
31074: LD_VAR 0 5
31078: PPUSH
31079: LD_INT 1
31081: PPUSH
31082: CALL_OW 48
// end ;
31086: LD_VAR 0 6
31090: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31091: LD_INT 0
31093: PPUSH
31094: PPUSH
// uc_side := your_side ;
31095: LD_ADDR_OWVAR 20
31099: PUSH
31100: LD_OWVAR 2
31104: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31105: LD_VAR 0 1
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: LD_INT 3
31118: PUSH
31119: LD_INT 4
31121: PUSH
31122: LD_INT 5
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: IN
31132: IFFALSE 31144
// uc_nation := nation_american else
31134: LD_ADDR_OWVAR 21
31138: PUSH
31139: LD_INT 1
31141: ST_TO_ADDR
31142: GO 31187
// if chassis in [ 11 , 12 , 13 , 14 ] then
31144: LD_VAR 0 1
31148: PUSH
31149: LD_INT 11
31151: PUSH
31152: LD_INT 12
31154: PUSH
31155: LD_INT 13
31157: PUSH
31158: LD_INT 14
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: IN
31167: IFFALSE 31179
// uc_nation := nation_arabian else
31169: LD_ADDR_OWVAR 21
31173: PUSH
31174: LD_INT 2
31176: ST_TO_ADDR
31177: GO 31187
// uc_nation := nation_russian ;
31179: LD_ADDR_OWVAR 21
31183: PUSH
31184: LD_INT 3
31186: ST_TO_ADDR
// vc_chassis := chassis ;
31187: LD_ADDR_OWVAR 37
31191: PUSH
31192: LD_VAR 0 1
31196: ST_TO_ADDR
// vc_engine := engine ;
31197: LD_ADDR_OWVAR 39
31201: PUSH
31202: LD_VAR 0 2
31206: ST_TO_ADDR
// vc_control := control ;
31207: LD_ADDR_OWVAR 38
31211: PUSH
31212: LD_VAR 0 3
31216: ST_TO_ADDR
// vc_weapon := weapon ;
31217: LD_ADDR_OWVAR 40
31221: PUSH
31222: LD_VAR 0 4
31226: ST_TO_ADDR
// un := CreateVehicle ;
31227: LD_ADDR_VAR 0 8
31231: PUSH
31232: CALL_OW 45
31236: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31237: LD_VAR 0 8
31241: PPUSH
31242: LD_INT 0
31244: PPUSH
31245: LD_INT 5
31247: PPUSH
31248: CALL_OW 12
31252: PPUSH
31253: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31257: LD_VAR 0 8
31261: PPUSH
31262: LD_VAR 0 5
31266: PPUSH
31267: LD_VAR 0 6
31271: PPUSH
31272: LD_INT 1
31274: PPUSH
31275: CALL_OW 48
// end ;
31279: LD_VAR 0 7
31283: RET
// export hInvincible ; every 1 do
31284: GO 31286
31286: DISABLE
// hInvincible := [ ] ;
31287: LD_ADDR_EXP 109
31291: PUSH
31292: EMPTY
31293: ST_TO_ADDR
31294: END
// every 10 do var i ;
31295: GO 31297
31297: DISABLE
31298: LD_INT 0
31300: PPUSH
// begin enable ;
31301: ENABLE
// if not hInvincible then
31302: LD_EXP 109
31306: NOT
31307: IFFALSE 31311
// exit ;
31309: GO 31355
// for i in hInvincible do
31311: LD_ADDR_VAR 0 1
31315: PUSH
31316: LD_EXP 109
31320: PUSH
31321: FOR_IN
31322: IFFALSE 31353
// if GetLives ( i ) < 1000 then
31324: LD_VAR 0 1
31328: PPUSH
31329: CALL_OW 256
31333: PUSH
31334: LD_INT 1000
31336: LESS
31337: IFFALSE 31351
// SetLives ( i , 1000 ) ;
31339: LD_VAR 0 1
31343: PPUSH
31344: LD_INT 1000
31346: PPUSH
31347: CALL_OW 234
31351: GO 31321
31353: POP
31354: POP
// end ;
31355: PPOPN 1
31357: END
// export function hHackInvincible ; var i ; begin
31358: LD_INT 0
31360: PPUSH
31361: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31362: LD_ADDR_VAR 0 2
31366: PUSH
31367: LD_INT 2
31369: PUSH
31370: LD_INT 21
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 21
31382: PUSH
31383: LD_INT 2
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: LIST
31394: PPUSH
31395: CALL_OW 69
31399: PUSH
31400: FOR_IN
31401: IFFALSE 31462
// if IsSelected ( i ) then
31403: LD_VAR 0 2
31407: PPUSH
31408: CALL_OW 306
31412: IFFALSE 31460
// begin if i in hInvincible then
31414: LD_VAR 0 2
31418: PUSH
31419: LD_EXP 109
31423: IN
31424: IFFALSE 31444
// hInvincible := hInvincible diff i else
31426: LD_ADDR_EXP 109
31430: PUSH
31431: LD_EXP 109
31435: PUSH
31436: LD_VAR 0 2
31440: DIFF
31441: ST_TO_ADDR
31442: GO 31460
// hInvincible := hInvincible union i ;
31444: LD_ADDR_EXP 109
31448: PUSH
31449: LD_EXP 109
31453: PUSH
31454: LD_VAR 0 2
31458: UNION
31459: ST_TO_ADDR
// end ;
31460: GO 31400
31462: POP
31463: POP
// end ;
31464: LD_VAR 0 1
31468: RET
// export function hHackInvisible ; var i , j ; begin
31469: LD_INT 0
31471: PPUSH
31472: PPUSH
31473: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31474: LD_ADDR_VAR 0 2
31478: PUSH
31479: LD_INT 21
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PPUSH
31489: CALL_OW 69
31493: PUSH
31494: FOR_IN
31495: IFFALSE 31519
// if IsSelected ( i ) then
31497: LD_VAR 0 2
31501: PPUSH
31502: CALL_OW 306
31506: IFFALSE 31517
// ComForceInvisible ( i ) ;
31508: LD_VAR 0 2
31512: PPUSH
31513: CALL_OW 496
31517: GO 31494
31519: POP
31520: POP
// end ;
31521: LD_VAR 0 1
31525: RET
// export function hHackChangeYourSide ; begin
31526: LD_INT 0
31528: PPUSH
// if your_side = 8 then
31529: LD_OWVAR 2
31533: PUSH
31534: LD_INT 8
31536: EQUAL
31537: IFFALSE 31549
// your_side := 0 else
31539: LD_ADDR_OWVAR 2
31543: PUSH
31544: LD_INT 0
31546: ST_TO_ADDR
31547: GO 31563
// your_side := your_side + 1 ;
31549: LD_ADDR_OWVAR 2
31553: PUSH
31554: LD_OWVAR 2
31558: PUSH
31559: LD_INT 1
31561: PLUS
31562: ST_TO_ADDR
// end ;
31563: LD_VAR 0 1
31567: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31568: LD_INT 0
31570: PPUSH
31571: PPUSH
31572: PPUSH
// for i in all_units do
31573: LD_ADDR_VAR 0 2
31577: PUSH
31578: LD_OWVAR 3
31582: PUSH
31583: FOR_IN
31584: IFFALSE 31662
// if IsSelected ( i ) then
31586: LD_VAR 0 2
31590: PPUSH
31591: CALL_OW 306
31595: IFFALSE 31660
// begin j := GetSide ( i ) ;
31597: LD_ADDR_VAR 0 3
31601: PUSH
31602: LD_VAR 0 2
31606: PPUSH
31607: CALL_OW 255
31611: ST_TO_ADDR
// if j = 8 then
31612: LD_VAR 0 3
31616: PUSH
31617: LD_INT 8
31619: EQUAL
31620: IFFALSE 31632
// j := 0 else
31622: LD_ADDR_VAR 0 3
31626: PUSH
31627: LD_INT 0
31629: ST_TO_ADDR
31630: GO 31646
// j := j + 1 ;
31632: LD_ADDR_VAR 0 3
31636: PUSH
31637: LD_VAR 0 3
31641: PUSH
31642: LD_INT 1
31644: PLUS
31645: ST_TO_ADDR
// SetSide ( i , j ) ;
31646: LD_VAR 0 2
31650: PPUSH
31651: LD_VAR 0 3
31655: PPUSH
31656: CALL_OW 235
// end ;
31660: GO 31583
31662: POP
31663: POP
// end ;
31664: LD_VAR 0 1
31668: RET
// export function hHackFog ; begin
31669: LD_INT 0
31671: PPUSH
// FogOff ( true ) ;
31672: LD_INT 1
31674: PPUSH
31675: CALL_OW 344
// end ;
31679: LD_VAR 0 1
31683: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31684: LD_INT 0
31686: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31687: LD_VAR 0 1
31691: PPUSH
31692: LD_VAR 0 2
31696: PPUSH
31697: LD_VAR 0 3
31701: PPUSH
31702: LD_INT 1
31704: PPUSH
31705: LD_INT 1
31707: PPUSH
31708: CALL_OW 483
// CenterOnXY ( x , y ) ;
31712: LD_VAR 0 2
31716: PPUSH
31717: LD_VAR 0 3
31721: PPUSH
31722: CALL_OW 84
// end ; end_of_file
31726: LD_VAR 0 4
31730: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31731: LD_INT 0
31733: PPUSH
31734: PPUSH
31735: PPUSH
31736: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31737: LD_VAR 0 1
31741: PPUSH
31742: CALL_OW 264
31746: PUSH
31747: LD_EXP 36
31751: EQUAL
31752: IFFALSE 31824
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31754: LD_INT 68
31756: PPUSH
31757: LD_VAR 0 1
31761: PPUSH
31762: CALL_OW 255
31766: PPUSH
31767: CALL_OW 321
31771: PUSH
31772: LD_INT 2
31774: EQUAL
31775: IFFALSE 31787
// eff := 70 else
31777: LD_ADDR_VAR 0 4
31781: PUSH
31782: LD_INT 70
31784: ST_TO_ADDR
31785: GO 31795
// eff := 30 ;
31787: LD_ADDR_VAR 0 4
31791: PUSH
31792: LD_INT 30
31794: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31795: LD_VAR 0 1
31799: PPUSH
31800: CALL_OW 250
31804: PPUSH
31805: LD_VAR 0 1
31809: PPUSH
31810: CALL_OW 251
31814: PPUSH
31815: LD_VAR 0 4
31819: PPUSH
31820: CALL_OW 495
// end ; end ;
31824: LD_VAR 0 2
31828: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31829: LD_INT 0
31831: PPUSH
// end ;
31832: LD_VAR 0 4
31836: RET
// export function SOS_Command ( cmd ) ; begin
31837: LD_INT 0
31839: PPUSH
// end ;
31840: LD_VAR 0 2
31844: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31845: LD_INT 0
31847: PPUSH
// end ;
31848: LD_VAR 0 6
31852: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31853: LD_INT 0
31855: PPUSH
31856: PPUSH
// if not vehicle or not factory then
31857: LD_VAR 0 1
31861: NOT
31862: PUSH
31863: LD_VAR 0 2
31867: NOT
31868: OR
31869: IFFALSE 31873
// exit ;
31871: GO 32104
// if factoryWaypoints >= factory then
31873: LD_EXP 110
31877: PUSH
31878: LD_VAR 0 2
31882: GREATEREQUAL
31883: IFFALSE 32104
// if factoryWaypoints [ factory ] then
31885: LD_EXP 110
31889: PUSH
31890: LD_VAR 0 2
31894: ARRAY
31895: IFFALSE 32104
// begin if GetControl ( vehicle ) = control_manual then
31897: LD_VAR 0 1
31901: PPUSH
31902: CALL_OW 263
31906: PUSH
31907: LD_INT 1
31909: EQUAL
31910: IFFALSE 31991
// begin driver := IsDrivenBy ( vehicle ) ;
31912: LD_ADDR_VAR 0 4
31916: PUSH
31917: LD_VAR 0 1
31921: PPUSH
31922: CALL_OW 311
31926: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31927: LD_VAR 0 4
31931: PPUSH
31932: LD_EXP 110
31936: PUSH
31937: LD_VAR 0 2
31941: ARRAY
31942: PUSH
31943: LD_INT 3
31945: ARRAY
31946: PPUSH
31947: LD_EXP 110
31951: PUSH
31952: LD_VAR 0 2
31956: ARRAY
31957: PUSH
31958: LD_INT 4
31960: ARRAY
31961: PPUSH
31962: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31966: LD_VAR 0 4
31970: PPUSH
31971: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31975: LD_VAR 0 4
31979: PPUSH
31980: LD_VAR 0 2
31984: PPUSH
31985: CALL_OW 180
// end else
31989: GO 32104
// if GetControl ( vehicle ) = control_remote then
31991: LD_VAR 0 1
31995: PPUSH
31996: CALL_OW 263
32000: PUSH
32001: LD_INT 2
32003: EQUAL
32004: IFFALSE 32065
// begin wait ( 0 0$2 ) ;
32006: LD_INT 70
32008: PPUSH
32009: CALL_OW 67
// if Connect ( vehicle ) then
32013: LD_VAR 0 1
32017: PPUSH
32018: CALL 44328 0 1
32022: IFFALSE 32063
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32024: LD_VAR 0 1
32028: PPUSH
32029: LD_EXP 110
32033: PUSH
32034: LD_VAR 0 2
32038: ARRAY
32039: PUSH
32040: LD_INT 3
32042: ARRAY
32043: PPUSH
32044: LD_EXP 110
32048: PUSH
32049: LD_VAR 0 2
32053: ARRAY
32054: PUSH
32055: LD_INT 4
32057: ARRAY
32058: PPUSH
32059: CALL_OW 171
// end else
32063: GO 32104
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32065: LD_VAR 0 1
32069: PPUSH
32070: LD_EXP 110
32074: PUSH
32075: LD_VAR 0 2
32079: ARRAY
32080: PUSH
32081: LD_INT 3
32083: ARRAY
32084: PPUSH
32085: LD_EXP 110
32089: PUSH
32090: LD_VAR 0 2
32094: ARRAY
32095: PUSH
32096: LD_INT 4
32098: ARRAY
32099: PPUSH
32100: CALL_OW 171
// end ; end ;
32104: LD_VAR 0 3
32108: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32109: LD_INT 0
32111: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32112: LD_VAR 0 1
32116: PUSH
32117: LD_INT 250
32119: EQUAL
32120: PUSH
32121: LD_VAR 0 2
32125: PPUSH
32126: CALL_OW 264
32130: PUSH
32131: LD_EXP 39
32135: EQUAL
32136: AND
32137: IFFALSE 32158
// MinerPlaceMine ( unit , x , y ) ;
32139: LD_VAR 0 2
32143: PPUSH
32144: LD_VAR 0 4
32148: PPUSH
32149: LD_VAR 0 5
32153: PPUSH
32154: CALL 34886 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32158: LD_VAR 0 1
32162: PUSH
32163: LD_INT 251
32165: EQUAL
32166: PUSH
32167: LD_VAR 0 2
32171: PPUSH
32172: CALL_OW 264
32176: PUSH
32177: LD_EXP 39
32181: EQUAL
32182: AND
32183: IFFALSE 32204
// MinerDetonateMine ( unit , x , y ) ;
32185: LD_VAR 0 2
32189: PPUSH
32190: LD_VAR 0 4
32194: PPUSH
32195: LD_VAR 0 5
32199: PPUSH
32200: CALL 35163 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32204: LD_VAR 0 1
32208: PUSH
32209: LD_INT 252
32211: EQUAL
32212: PUSH
32213: LD_VAR 0 2
32217: PPUSH
32218: CALL_OW 264
32222: PUSH
32223: LD_EXP 39
32227: EQUAL
32228: AND
32229: IFFALSE 32250
// MinerCreateMinefield ( unit , x , y ) ;
32231: LD_VAR 0 2
32235: PPUSH
32236: LD_VAR 0 4
32240: PPUSH
32241: LD_VAR 0 5
32245: PPUSH
32246: CALL 35580 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32250: LD_VAR 0 1
32254: PUSH
32255: LD_INT 253
32257: EQUAL
32258: PUSH
32259: LD_VAR 0 2
32263: PPUSH
32264: CALL_OW 257
32268: PUSH
32269: LD_INT 5
32271: EQUAL
32272: AND
32273: IFFALSE 32294
// ComBinocular ( unit , x , y ) ;
32275: LD_VAR 0 2
32279: PPUSH
32280: LD_VAR 0 4
32284: PPUSH
32285: LD_VAR 0 5
32289: PPUSH
32290: CALL 35951 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32294: LD_VAR 0 1
32298: PUSH
32299: LD_INT 254
32301: EQUAL
32302: PUSH
32303: LD_VAR 0 2
32307: PPUSH
32308: CALL_OW 264
32312: PUSH
32313: LD_EXP 34
32317: EQUAL
32318: AND
32319: PUSH
32320: LD_VAR 0 3
32324: PPUSH
32325: CALL_OW 263
32329: PUSH
32330: LD_INT 3
32332: EQUAL
32333: AND
32334: IFFALSE 32350
// HackDestroyVehicle ( unit , selectedUnit ) ;
32336: LD_VAR 0 2
32340: PPUSH
32341: LD_VAR 0 3
32345: PPUSH
32346: CALL 34246 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32350: LD_VAR 0 1
32354: PUSH
32355: LD_INT 255
32357: EQUAL
32358: PUSH
32359: LD_VAR 0 2
32363: PPUSH
32364: CALL_OW 264
32368: PUSH
32369: LD_INT 14
32371: PUSH
32372: LD_INT 53
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: IN
32379: AND
32380: PUSH
32381: LD_VAR 0 4
32385: PPUSH
32386: LD_VAR 0 5
32390: PPUSH
32391: CALL_OW 488
32395: AND
32396: IFFALSE 32420
// CutTreeXYR ( unit , x , y , 12 ) ;
32398: LD_VAR 0 2
32402: PPUSH
32403: LD_VAR 0 4
32407: PPUSH
32408: LD_VAR 0 5
32412: PPUSH
32413: LD_INT 12
32415: PPUSH
32416: CALL 32812 0 4
// if cmd = 256 then
32420: LD_VAR 0 1
32424: PUSH
32425: LD_INT 256
32427: EQUAL
32428: IFFALSE 32449
// SetFactoryWaypoint ( unit , x , y ) ;
32430: LD_VAR 0 2
32434: PPUSH
32435: LD_VAR 0 4
32439: PPUSH
32440: LD_VAR 0 5
32444: PPUSH
32445: CALL 32454 0 3
// end ;
32449: LD_VAR 0 6
32453: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32454: LD_INT 0
32456: PPUSH
32457: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32458: LD_VAR 0 1
32462: NOT
32463: PUSH
32464: LD_VAR 0 2
32468: PPUSH
32469: LD_VAR 0 3
32473: PPUSH
32474: CALL_OW 488
32478: NOT
32479: OR
32480: PUSH
32481: LD_VAR 0 1
32485: PPUSH
32486: CALL_OW 266
32490: PUSH
32491: LD_INT 3
32493: NONEQUAL
32494: PUSH
32495: LD_VAR 0 1
32499: PPUSH
32500: CALL_OW 247
32504: PUSH
32505: LD_INT 1
32507: EQUAL
32508: NOT
32509: AND
32510: OR
32511: IFFALSE 32515
// exit ;
32513: GO 32664
// if GetType ( factory ) = unit_human then
32515: LD_VAR 0 1
32519: PPUSH
32520: CALL_OW 247
32524: PUSH
32525: LD_INT 1
32527: EQUAL
32528: IFFALSE 32545
// factory := IsInUnit ( factory ) ;
32530: LD_ADDR_VAR 0 1
32534: PUSH
32535: LD_VAR 0 1
32539: PPUSH
32540: CALL_OW 310
32544: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32545: LD_VAR 0 1
32549: PPUSH
32550: CALL_OW 266
32554: PUSH
32555: LD_INT 3
32557: NONEQUAL
32558: IFFALSE 32562
// exit ;
32560: GO 32664
// if HexInfo ( x , y ) = factory then
32562: LD_VAR 0 2
32566: PPUSH
32567: LD_VAR 0 3
32571: PPUSH
32572: CALL_OW 428
32576: PUSH
32577: LD_VAR 0 1
32581: EQUAL
32582: IFFALSE 32609
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32584: LD_ADDR_EXP 110
32588: PUSH
32589: LD_EXP 110
32593: PPUSH
32594: LD_VAR 0 1
32598: PPUSH
32599: LD_INT 0
32601: PPUSH
32602: CALL_OW 1
32606: ST_TO_ADDR
32607: GO 32660
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32609: LD_ADDR_EXP 110
32613: PUSH
32614: LD_EXP 110
32618: PPUSH
32619: LD_VAR 0 1
32623: PPUSH
32624: LD_VAR 0 1
32628: PPUSH
32629: CALL_OW 255
32633: PUSH
32634: LD_VAR 0 1
32638: PUSH
32639: LD_VAR 0 2
32643: PUSH
32644: LD_VAR 0 3
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: PPUSH
32655: CALL_OW 1
32659: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32660: CALL 32669 0 0
// end ;
32664: LD_VAR 0 4
32668: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
32669: LD_INT 0
32671: PPUSH
32672: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32673: LD_STRING resetFactoryWaypoint();
32675: PPUSH
32676: CALL_OW 559
// if factoryWaypoints then
32680: LD_EXP 110
32684: IFFALSE 32807
// begin for i := 1 to factoryWaypoints do
32686: LD_ADDR_VAR 0 2
32690: PUSH
32691: DOUBLE
32692: LD_INT 1
32694: DEC
32695: ST_TO_ADDR
32696: LD_EXP 110
32700: PUSH
32701: FOR_TO
32702: IFFALSE 32805
// if factoryWaypoints [ i ] then
32704: LD_EXP 110
32708: PUSH
32709: LD_VAR 0 2
32713: ARRAY
32714: IFFALSE 32803
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
32716: LD_STRING setFactoryWaypointXY(
32718: PUSH
32719: LD_EXP 110
32723: PUSH
32724: LD_VAR 0 2
32728: ARRAY
32729: PUSH
32730: LD_INT 1
32732: ARRAY
32733: STR
32734: PUSH
32735: LD_STRING ,
32737: STR
32738: PUSH
32739: LD_EXP 110
32743: PUSH
32744: LD_VAR 0 2
32748: ARRAY
32749: PUSH
32750: LD_INT 2
32752: ARRAY
32753: STR
32754: PUSH
32755: LD_STRING ,
32757: STR
32758: PUSH
32759: LD_EXP 110
32763: PUSH
32764: LD_VAR 0 2
32768: ARRAY
32769: PUSH
32770: LD_INT 3
32772: ARRAY
32773: STR
32774: PUSH
32775: LD_STRING ,
32777: STR
32778: PUSH
32779: LD_EXP 110
32783: PUSH
32784: LD_VAR 0 2
32788: ARRAY
32789: PUSH
32790: LD_INT 4
32792: ARRAY
32793: STR
32794: PUSH
32795: LD_STRING )
32797: STR
32798: PPUSH
32799: CALL_OW 559
32803: GO 32701
32805: POP
32806: POP
// end ; end ;
32807: LD_VAR 0 1
32811: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
32812: LD_INT 0
32814: PPUSH
32815: PPUSH
32816: PPUSH
32817: PPUSH
32818: PPUSH
32819: PPUSH
32820: PPUSH
32821: PPUSH
32822: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
32823: LD_VAR 0 1
32827: NOT
32828: PUSH
32829: LD_VAR 0 2
32833: PPUSH
32834: LD_VAR 0 3
32838: PPUSH
32839: CALL_OW 488
32843: NOT
32844: OR
32845: PUSH
32846: LD_VAR 0 4
32850: NOT
32851: OR
32852: IFFALSE 32856
// exit ;
32854: GO 33196
// list := [ ] ;
32856: LD_ADDR_VAR 0 13
32860: PUSH
32861: EMPTY
32862: ST_TO_ADDR
// if x - r < 0 then
32863: LD_VAR 0 2
32867: PUSH
32868: LD_VAR 0 4
32872: MINUS
32873: PUSH
32874: LD_INT 0
32876: LESS
32877: IFFALSE 32889
// min_x := 0 else
32879: LD_ADDR_VAR 0 7
32883: PUSH
32884: LD_INT 0
32886: ST_TO_ADDR
32887: GO 32905
// min_x := x - r ;
32889: LD_ADDR_VAR 0 7
32893: PUSH
32894: LD_VAR 0 2
32898: PUSH
32899: LD_VAR 0 4
32903: MINUS
32904: ST_TO_ADDR
// if y - r < 0 then
32905: LD_VAR 0 3
32909: PUSH
32910: LD_VAR 0 4
32914: MINUS
32915: PUSH
32916: LD_INT 0
32918: LESS
32919: IFFALSE 32931
// min_y := 0 else
32921: LD_ADDR_VAR 0 8
32925: PUSH
32926: LD_INT 0
32928: ST_TO_ADDR
32929: GO 32947
// min_y := y - r ;
32931: LD_ADDR_VAR 0 8
32935: PUSH
32936: LD_VAR 0 3
32940: PUSH
32941: LD_VAR 0 4
32945: MINUS
32946: ST_TO_ADDR
// max_x := x + r ;
32947: LD_ADDR_VAR 0 9
32951: PUSH
32952: LD_VAR 0 2
32956: PUSH
32957: LD_VAR 0 4
32961: PLUS
32962: ST_TO_ADDR
// max_y := y + r ;
32963: LD_ADDR_VAR 0 10
32967: PUSH
32968: LD_VAR 0 3
32972: PUSH
32973: LD_VAR 0 4
32977: PLUS
32978: ST_TO_ADDR
// for _x = min_x to max_x do
32979: LD_ADDR_VAR 0 11
32983: PUSH
32984: DOUBLE
32985: LD_VAR 0 7
32989: DEC
32990: ST_TO_ADDR
32991: LD_VAR 0 9
32995: PUSH
32996: FOR_TO
32997: IFFALSE 33114
// for _y = min_y to max_y do
32999: LD_ADDR_VAR 0 12
33003: PUSH
33004: DOUBLE
33005: LD_VAR 0 8
33009: DEC
33010: ST_TO_ADDR
33011: LD_VAR 0 10
33015: PUSH
33016: FOR_TO
33017: IFFALSE 33110
// begin if not ValidHex ( _x , _y ) then
33019: LD_VAR 0 11
33023: PPUSH
33024: LD_VAR 0 12
33028: PPUSH
33029: CALL_OW 488
33033: NOT
33034: IFFALSE 33038
// continue ;
33036: GO 33016
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33038: LD_VAR 0 11
33042: PPUSH
33043: LD_VAR 0 12
33047: PPUSH
33048: CALL_OW 351
33052: PUSH
33053: LD_VAR 0 11
33057: PPUSH
33058: LD_VAR 0 12
33062: PPUSH
33063: CALL_OW 554
33067: AND
33068: IFFALSE 33108
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33070: LD_ADDR_VAR 0 13
33074: PUSH
33075: LD_VAR 0 13
33079: PPUSH
33080: LD_VAR 0 13
33084: PUSH
33085: LD_INT 1
33087: PLUS
33088: PPUSH
33089: LD_VAR 0 11
33093: PUSH
33094: LD_VAR 0 12
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PPUSH
33103: CALL_OW 2
33107: ST_TO_ADDR
// end ;
33108: GO 33016
33110: POP
33111: POP
33112: GO 32996
33114: POP
33115: POP
// if not list then
33116: LD_VAR 0 13
33120: NOT
33121: IFFALSE 33125
// exit ;
33123: GO 33196
// for i in list do
33125: LD_ADDR_VAR 0 6
33129: PUSH
33130: LD_VAR 0 13
33134: PUSH
33135: FOR_IN
33136: IFFALSE 33194
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33138: LD_VAR 0 1
33142: PPUSH
33143: LD_STRING M
33145: PUSH
33146: LD_VAR 0 6
33150: PUSH
33151: LD_INT 1
33153: ARRAY
33154: PUSH
33155: LD_VAR 0 6
33159: PUSH
33160: LD_INT 2
33162: ARRAY
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: LD_INT 0
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: PUSH
33185: EMPTY
33186: LIST
33187: PPUSH
33188: CALL_OW 447
33192: GO 33135
33194: POP
33195: POP
// end ;
33196: LD_VAR 0 5
33200: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33201: LD_EXP 111
33205: NOT
33206: IFFALSE 33256
33208: GO 33210
33210: DISABLE
// begin initHack := true ;
33211: LD_ADDR_EXP 111
33215: PUSH
33216: LD_INT 1
33218: ST_TO_ADDR
// hackTanks := [ ] ;
33219: LD_ADDR_EXP 112
33223: PUSH
33224: EMPTY
33225: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33226: LD_ADDR_EXP 113
33230: PUSH
33231: EMPTY
33232: ST_TO_ADDR
// hackLimit := 3 ;
33233: LD_ADDR_EXP 114
33237: PUSH
33238: LD_INT 3
33240: ST_TO_ADDR
// hackDist := 12 ;
33241: LD_ADDR_EXP 115
33245: PUSH
33246: LD_INT 12
33248: ST_TO_ADDR
// hackCounter := [ ] ;
33249: LD_ADDR_EXP 116
33253: PUSH
33254: EMPTY
33255: ST_TO_ADDR
// end ;
33256: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33257: LD_EXP 111
33261: PUSH
33262: LD_INT 34
33264: PUSH
33265: LD_EXP 34
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PPUSH
33274: CALL_OW 69
33278: AND
33279: IFFALSE 33534
33281: GO 33283
33283: DISABLE
33284: LD_INT 0
33286: PPUSH
33287: PPUSH
// begin enable ;
33288: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33289: LD_ADDR_VAR 0 1
33293: PUSH
33294: LD_INT 34
33296: PUSH
33297: LD_EXP 34
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PPUSH
33306: CALL_OW 69
33310: PUSH
33311: FOR_IN
33312: IFFALSE 33532
// begin if not i in hackTanks then
33314: LD_VAR 0 1
33318: PUSH
33319: LD_EXP 112
33323: IN
33324: NOT
33325: IFFALSE 33408
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33327: LD_ADDR_EXP 112
33331: PUSH
33332: LD_EXP 112
33336: PPUSH
33337: LD_EXP 112
33341: PUSH
33342: LD_INT 1
33344: PLUS
33345: PPUSH
33346: LD_VAR 0 1
33350: PPUSH
33351: CALL_OW 1
33355: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33356: LD_ADDR_EXP 113
33360: PUSH
33361: LD_EXP 113
33365: PPUSH
33366: LD_EXP 113
33370: PUSH
33371: LD_INT 1
33373: PLUS
33374: PPUSH
33375: EMPTY
33376: PPUSH
33377: CALL_OW 1
33381: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33382: LD_ADDR_EXP 116
33386: PUSH
33387: LD_EXP 116
33391: PPUSH
33392: LD_EXP 116
33396: PUSH
33397: LD_INT 1
33399: PLUS
33400: PPUSH
33401: EMPTY
33402: PPUSH
33403: CALL_OW 1
33407: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33408: LD_VAR 0 1
33412: PPUSH
33413: CALL_OW 302
33417: NOT
33418: IFFALSE 33431
// begin HackUnlinkAll ( i ) ;
33420: LD_VAR 0 1
33424: PPUSH
33425: CALL 33537 0 1
// continue ;
33429: GO 33311
// end ; HackCheckCapturedStatus ( i ) ;
33431: LD_VAR 0 1
33435: PPUSH
33436: CALL 33980 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33440: LD_ADDR_VAR 0 2
33444: PUSH
33445: LD_INT 81
33447: PUSH
33448: LD_VAR 0 1
33452: PPUSH
33453: CALL_OW 255
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 33
33464: PUSH
33465: LD_INT 3
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 91
33474: PUSH
33475: LD_VAR 0 1
33479: PUSH
33480: LD_EXP 115
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 50
33492: PUSH
33493: EMPTY
33494: LIST
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: PPUSH
33502: CALL_OW 69
33506: ST_TO_ADDR
// if not tmp then
33507: LD_VAR 0 2
33511: NOT
33512: IFFALSE 33516
// continue ;
33514: GO 33311
// HackLink ( i , tmp ) ;
33516: LD_VAR 0 1
33520: PPUSH
33521: LD_VAR 0 2
33525: PPUSH
33526: CALL 33673 0 2
// end ;
33530: GO 33311
33532: POP
33533: POP
// end ;
33534: PPOPN 2
33536: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33537: LD_INT 0
33539: PPUSH
33540: PPUSH
33541: PPUSH
// if not hack in hackTanks then
33542: LD_VAR 0 1
33546: PUSH
33547: LD_EXP 112
33551: IN
33552: NOT
33553: IFFALSE 33557
// exit ;
33555: GO 33668
// index := GetElementIndex ( hackTanks , hack ) ;
33557: LD_ADDR_VAR 0 4
33561: PUSH
33562: LD_EXP 112
33566: PPUSH
33567: LD_VAR 0 1
33571: PPUSH
33572: CALL 41142 0 2
33576: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33577: LD_EXP 113
33581: PUSH
33582: LD_VAR 0 4
33586: ARRAY
33587: IFFALSE 33668
// begin for i in hackTanksCaptured [ index ] do
33589: LD_ADDR_VAR 0 3
33593: PUSH
33594: LD_EXP 113
33598: PUSH
33599: LD_VAR 0 4
33603: ARRAY
33604: PUSH
33605: FOR_IN
33606: IFFALSE 33632
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33608: LD_VAR 0 3
33612: PUSH
33613: LD_INT 1
33615: ARRAY
33616: PPUSH
33617: LD_VAR 0 3
33621: PUSH
33622: LD_INT 2
33624: ARRAY
33625: PPUSH
33626: CALL_OW 235
33630: GO 33605
33632: POP
33633: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33634: LD_ADDR_EXP 113
33638: PUSH
33639: LD_EXP 113
33643: PPUSH
33644: LD_VAR 0 4
33648: PPUSH
33649: EMPTY
33650: PPUSH
33651: CALL_OW 1
33655: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33656: LD_VAR 0 1
33660: PPUSH
33661: LD_INT 0
33663: PPUSH
33664: CALL_OW 505
// end ; end ;
33668: LD_VAR 0 2
33672: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33673: LD_INT 0
33675: PPUSH
33676: PPUSH
33677: PPUSH
// if not hack in hackTanks or not vehicles then
33678: LD_VAR 0 1
33682: PUSH
33683: LD_EXP 112
33687: IN
33688: NOT
33689: PUSH
33690: LD_VAR 0 2
33694: NOT
33695: OR
33696: IFFALSE 33700
// exit ;
33698: GO 33975
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33700: LD_ADDR_VAR 0 2
33704: PUSH
33705: LD_VAR 0 1
33709: PPUSH
33710: LD_VAR 0 2
33714: PPUSH
33715: LD_INT 1
33717: PPUSH
33718: LD_INT 1
33720: PPUSH
33721: CALL 41792 0 4
33725: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
33726: LD_ADDR_VAR 0 5
33730: PUSH
33731: LD_EXP 112
33735: PPUSH
33736: LD_VAR 0 1
33740: PPUSH
33741: CALL 41142 0 2
33745: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
33746: LD_EXP 113
33750: PUSH
33751: LD_VAR 0 5
33755: ARRAY
33756: PUSH
33757: LD_EXP 114
33761: LESS
33762: IFFALSE 33951
// begin for i := 1 to vehicles do
33764: LD_ADDR_VAR 0 4
33768: PUSH
33769: DOUBLE
33770: LD_INT 1
33772: DEC
33773: ST_TO_ADDR
33774: LD_VAR 0 2
33778: PUSH
33779: FOR_TO
33780: IFFALSE 33949
// begin if hackTanksCaptured [ index ] = hackLimit then
33782: LD_EXP 113
33786: PUSH
33787: LD_VAR 0 5
33791: ARRAY
33792: PUSH
33793: LD_EXP 114
33797: EQUAL
33798: IFFALSE 33802
// break ;
33800: GO 33949
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
33802: LD_ADDR_EXP 116
33806: PUSH
33807: LD_EXP 116
33811: PPUSH
33812: LD_VAR 0 5
33816: PPUSH
33817: LD_EXP 116
33821: PUSH
33822: LD_VAR 0 5
33826: ARRAY
33827: PUSH
33828: LD_INT 1
33830: PLUS
33831: PPUSH
33832: CALL_OW 1
33836: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
33837: LD_ADDR_EXP 113
33841: PUSH
33842: LD_EXP 113
33846: PPUSH
33847: LD_VAR 0 5
33851: PUSH
33852: LD_EXP 113
33856: PUSH
33857: LD_VAR 0 5
33861: ARRAY
33862: PUSH
33863: LD_INT 1
33865: PLUS
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PPUSH
33871: LD_VAR 0 2
33875: PUSH
33876: LD_VAR 0 4
33880: ARRAY
33881: PUSH
33882: LD_VAR 0 2
33886: PUSH
33887: LD_VAR 0 4
33891: ARRAY
33892: PPUSH
33893: CALL_OW 255
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PPUSH
33902: CALL 41357 0 3
33906: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
33907: LD_VAR 0 2
33911: PUSH
33912: LD_VAR 0 4
33916: ARRAY
33917: PPUSH
33918: LD_VAR 0 1
33922: PPUSH
33923: CALL_OW 255
33927: PPUSH
33928: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
33932: LD_VAR 0 2
33936: PUSH
33937: LD_VAR 0 4
33941: ARRAY
33942: PPUSH
33943: CALL_OW 141
// end ;
33947: GO 33779
33949: POP
33950: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33951: LD_VAR 0 1
33955: PPUSH
33956: LD_EXP 113
33960: PUSH
33961: LD_VAR 0 5
33965: ARRAY
33966: PUSH
33967: LD_INT 0
33969: PLUS
33970: PPUSH
33971: CALL_OW 505
// end ;
33975: LD_VAR 0 3
33979: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33980: LD_INT 0
33982: PPUSH
33983: PPUSH
33984: PPUSH
33985: PPUSH
// if not hack in hackTanks then
33986: LD_VAR 0 1
33990: PUSH
33991: LD_EXP 112
33995: IN
33996: NOT
33997: IFFALSE 34001
// exit ;
33999: GO 34241
// index := GetElementIndex ( hackTanks , hack ) ;
34001: LD_ADDR_VAR 0 4
34005: PUSH
34006: LD_EXP 112
34010: PPUSH
34011: LD_VAR 0 1
34015: PPUSH
34016: CALL 41142 0 2
34020: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34021: LD_ADDR_VAR 0 3
34025: PUSH
34026: DOUBLE
34027: LD_EXP 113
34031: PUSH
34032: LD_VAR 0 4
34036: ARRAY
34037: INC
34038: ST_TO_ADDR
34039: LD_INT 1
34041: PUSH
34042: FOR_DOWNTO
34043: IFFALSE 34215
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34045: LD_ADDR_VAR 0 5
34049: PUSH
34050: LD_EXP 113
34054: PUSH
34055: LD_VAR 0 4
34059: ARRAY
34060: PUSH
34061: LD_VAR 0 3
34065: ARRAY
34066: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34067: LD_VAR 0 5
34071: PUSH
34072: LD_INT 1
34074: ARRAY
34075: PPUSH
34076: CALL_OW 302
34080: NOT
34081: PUSH
34082: LD_VAR 0 5
34086: PUSH
34087: LD_INT 1
34089: ARRAY
34090: PPUSH
34091: CALL_OW 255
34095: PUSH
34096: LD_VAR 0 1
34100: PPUSH
34101: CALL_OW 255
34105: NONEQUAL
34106: OR
34107: IFFALSE 34213
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34109: LD_VAR 0 5
34113: PUSH
34114: LD_INT 1
34116: ARRAY
34117: PPUSH
34118: CALL_OW 305
34122: PUSH
34123: LD_VAR 0 5
34127: PUSH
34128: LD_INT 1
34130: ARRAY
34131: PPUSH
34132: CALL_OW 255
34136: PUSH
34137: LD_VAR 0 1
34141: PPUSH
34142: CALL_OW 255
34146: EQUAL
34147: AND
34148: IFFALSE 34172
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34150: LD_VAR 0 5
34154: PUSH
34155: LD_INT 1
34157: ARRAY
34158: PPUSH
34159: LD_VAR 0 5
34163: PUSH
34164: LD_INT 2
34166: ARRAY
34167: PPUSH
34168: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34172: LD_ADDR_EXP 113
34176: PUSH
34177: LD_EXP 113
34181: PPUSH
34182: LD_VAR 0 4
34186: PPUSH
34187: LD_EXP 113
34191: PUSH
34192: LD_VAR 0 4
34196: ARRAY
34197: PPUSH
34198: LD_VAR 0 3
34202: PPUSH
34203: CALL_OW 3
34207: PPUSH
34208: CALL_OW 1
34212: ST_TO_ADDR
// end ; end ;
34213: GO 34042
34215: POP
34216: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34217: LD_VAR 0 1
34221: PPUSH
34222: LD_EXP 113
34226: PUSH
34227: LD_VAR 0 4
34231: ARRAY
34232: PUSH
34233: LD_INT 0
34235: PLUS
34236: PPUSH
34237: CALL_OW 505
// end ;
34241: LD_VAR 0 2
34245: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34246: LD_INT 0
34248: PPUSH
34249: PPUSH
34250: PPUSH
34251: PPUSH
// if not hack in hackTanks then
34252: LD_VAR 0 1
34256: PUSH
34257: LD_EXP 112
34261: IN
34262: NOT
34263: IFFALSE 34267
// exit ;
34265: GO 34352
// index := GetElementIndex ( hackTanks , hack ) ;
34267: LD_ADDR_VAR 0 5
34271: PUSH
34272: LD_EXP 112
34276: PPUSH
34277: LD_VAR 0 1
34281: PPUSH
34282: CALL 41142 0 2
34286: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34287: LD_ADDR_VAR 0 4
34291: PUSH
34292: DOUBLE
34293: LD_INT 1
34295: DEC
34296: ST_TO_ADDR
34297: LD_EXP 113
34301: PUSH
34302: LD_VAR 0 5
34306: ARRAY
34307: PUSH
34308: FOR_TO
34309: IFFALSE 34350
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34311: LD_EXP 113
34315: PUSH
34316: LD_VAR 0 5
34320: ARRAY
34321: PUSH
34322: LD_VAR 0 4
34326: ARRAY
34327: PUSH
34328: LD_INT 1
34330: ARRAY
34331: PUSH
34332: LD_VAR 0 2
34336: EQUAL
34337: IFFALSE 34348
// KillUnit ( vehicle ) ;
34339: LD_VAR 0 2
34343: PPUSH
34344: CALL_OW 66
34348: GO 34308
34350: POP
34351: POP
// end ;
34352: LD_VAR 0 3
34356: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34357: LD_EXP 117
34361: NOT
34362: IFFALSE 34397
34364: GO 34366
34366: DISABLE
// begin initMiner := true ;
34367: LD_ADDR_EXP 117
34371: PUSH
34372: LD_INT 1
34374: ST_TO_ADDR
// minersList := [ ] ;
34375: LD_ADDR_EXP 118
34379: PUSH
34380: EMPTY
34381: ST_TO_ADDR
// minerMinesList := [ ] ;
34382: LD_ADDR_EXP 119
34386: PUSH
34387: EMPTY
34388: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34389: LD_ADDR_EXP 120
34393: PUSH
34394: LD_INT 5
34396: ST_TO_ADDR
// end ;
34397: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34398: LD_EXP 117
34402: PUSH
34403: LD_INT 34
34405: PUSH
34406: LD_EXP 39
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PPUSH
34415: CALL_OW 69
34419: AND
34420: IFFALSE 34883
34422: GO 34424
34424: DISABLE
34425: LD_INT 0
34427: PPUSH
34428: PPUSH
34429: PPUSH
34430: PPUSH
// begin enable ;
34431: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34432: LD_ADDR_VAR 0 1
34436: PUSH
34437: LD_INT 34
34439: PUSH
34440: LD_EXP 39
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PPUSH
34449: CALL_OW 69
34453: PUSH
34454: FOR_IN
34455: IFFALSE 34527
// begin if not i in minersList then
34457: LD_VAR 0 1
34461: PUSH
34462: LD_EXP 118
34466: IN
34467: NOT
34468: IFFALSE 34525
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34470: LD_ADDR_EXP 118
34474: PUSH
34475: LD_EXP 118
34479: PPUSH
34480: LD_EXP 118
34484: PUSH
34485: LD_INT 1
34487: PLUS
34488: PPUSH
34489: LD_VAR 0 1
34493: PPUSH
34494: CALL_OW 1
34498: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34499: LD_ADDR_EXP 119
34503: PUSH
34504: LD_EXP 119
34508: PPUSH
34509: LD_EXP 119
34513: PUSH
34514: LD_INT 1
34516: PLUS
34517: PPUSH
34518: EMPTY
34519: PPUSH
34520: CALL_OW 1
34524: ST_TO_ADDR
// end end ;
34525: GO 34454
34527: POP
34528: POP
// for i := minerMinesList downto 1 do
34529: LD_ADDR_VAR 0 1
34533: PUSH
34534: DOUBLE
34535: LD_EXP 119
34539: INC
34540: ST_TO_ADDR
34541: LD_INT 1
34543: PUSH
34544: FOR_DOWNTO
34545: IFFALSE 34881
// begin if IsLive ( minersList [ i ] ) then
34547: LD_EXP 118
34551: PUSH
34552: LD_VAR 0 1
34556: ARRAY
34557: PPUSH
34558: CALL_OW 300
34562: IFFALSE 34590
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34564: LD_EXP 118
34568: PUSH
34569: LD_VAR 0 1
34573: ARRAY
34574: PPUSH
34575: LD_EXP 119
34579: PUSH
34580: LD_VAR 0 1
34584: ARRAY
34585: PPUSH
34586: CALL_OW 505
// if not minerMinesList [ i ] then
34590: LD_EXP 119
34594: PUSH
34595: LD_VAR 0 1
34599: ARRAY
34600: NOT
34601: IFFALSE 34605
// continue ;
34603: GO 34544
// for j := minerMinesList [ i ] downto 1 do
34605: LD_ADDR_VAR 0 2
34609: PUSH
34610: DOUBLE
34611: LD_EXP 119
34615: PUSH
34616: LD_VAR 0 1
34620: ARRAY
34621: INC
34622: ST_TO_ADDR
34623: LD_INT 1
34625: PUSH
34626: FOR_DOWNTO
34627: IFFALSE 34877
// begin side := GetSide ( minersList [ i ] ) ;
34629: LD_ADDR_VAR 0 3
34633: PUSH
34634: LD_EXP 118
34638: PUSH
34639: LD_VAR 0 1
34643: ARRAY
34644: PPUSH
34645: CALL_OW 255
34649: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34650: LD_ADDR_VAR 0 4
34654: PUSH
34655: LD_EXP 119
34659: PUSH
34660: LD_VAR 0 1
34664: ARRAY
34665: PUSH
34666: LD_VAR 0 2
34670: ARRAY
34671: PUSH
34672: LD_INT 1
34674: ARRAY
34675: PPUSH
34676: LD_EXP 119
34680: PUSH
34681: LD_VAR 0 1
34685: ARRAY
34686: PUSH
34687: LD_VAR 0 2
34691: ARRAY
34692: PUSH
34693: LD_INT 2
34695: ARRAY
34696: PPUSH
34697: CALL_OW 428
34701: ST_TO_ADDR
// if not tmp then
34702: LD_VAR 0 4
34706: NOT
34707: IFFALSE 34711
// continue ;
34709: GO 34626
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
34711: LD_VAR 0 4
34715: PUSH
34716: LD_INT 81
34718: PUSH
34719: LD_VAR 0 3
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PPUSH
34728: CALL_OW 69
34732: IN
34733: PUSH
34734: LD_EXP 119
34738: PUSH
34739: LD_VAR 0 1
34743: ARRAY
34744: PUSH
34745: LD_VAR 0 2
34749: ARRAY
34750: PUSH
34751: LD_INT 1
34753: ARRAY
34754: PPUSH
34755: LD_EXP 119
34759: PUSH
34760: LD_VAR 0 1
34764: ARRAY
34765: PUSH
34766: LD_VAR 0 2
34770: ARRAY
34771: PUSH
34772: LD_INT 2
34774: ARRAY
34775: PPUSH
34776: CALL_OW 458
34780: AND
34781: IFFALSE 34875
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
34783: LD_EXP 119
34787: PUSH
34788: LD_VAR 0 1
34792: ARRAY
34793: PUSH
34794: LD_VAR 0 2
34798: ARRAY
34799: PUSH
34800: LD_INT 1
34802: ARRAY
34803: PPUSH
34804: LD_EXP 119
34808: PUSH
34809: LD_VAR 0 1
34813: ARRAY
34814: PUSH
34815: LD_VAR 0 2
34819: ARRAY
34820: PUSH
34821: LD_INT 2
34823: ARRAY
34824: PPUSH
34825: LD_VAR 0 3
34829: PPUSH
34830: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
34834: LD_ADDR_EXP 119
34838: PUSH
34839: LD_EXP 119
34843: PPUSH
34844: LD_VAR 0 1
34848: PPUSH
34849: LD_EXP 119
34853: PUSH
34854: LD_VAR 0 1
34858: ARRAY
34859: PPUSH
34860: LD_VAR 0 2
34864: PPUSH
34865: CALL_OW 3
34869: PPUSH
34870: CALL_OW 1
34874: ST_TO_ADDR
// end ; end ;
34875: GO 34626
34877: POP
34878: POP
// end ;
34879: GO 34544
34881: POP
34882: POP
// end ;
34883: PPOPN 4
34885: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
34886: LD_INT 0
34888: PPUSH
34889: PPUSH
// result := false ;
34890: LD_ADDR_VAR 0 4
34894: PUSH
34895: LD_INT 0
34897: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
34898: LD_VAR 0 1
34902: PPUSH
34903: CALL_OW 264
34907: PUSH
34908: LD_EXP 39
34912: EQUAL
34913: NOT
34914: IFFALSE 34918
// exit ;
34916: GO 35158
// index := GetElementIndex ( minersList , unit ) ;
34918: LD_ADDR_VAR 0 5
34922: PUSH
34923: LD_EXP 118
34927: PPUSH
34928: LD_VAR 0 1
34932: PPUSH
34933: CALL 41142 0 2
34937: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
34938: LD_EXP 119
34942: PUSH
34943: LD_VAR 0 5
34947: ARRAY
34948: PUSH
34949: LD_EXP 120
34953: GREATEREQUAL
34954: IFFALSE 34958
// exit ;
34956: GO 35158
// ComMoveXY ( unit , x , y ) ;
34958: LD_VAR 0 1
34962: PPUSH
34963: LD_VAR 0 2
34967: PPUSH
34968: LD_VAR 0 3
34972: PPUSH
34973: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34977: LD_INT 35
34979: PPUSH
34980: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34984: LD_VAR 0 1
34988: PPUSH
34989: LD_VAR 0 2
34993: PPUSH
34994: LD_VAR 0 3
34998: PPUSH
34999: CALL 71861 0 3
35003: NOT
35004: PUSH
35005: LD_VAR 0 1
35009: PPUSH
35010: CALL_OW 314
35014: AND
35015: IFFALSE 35019
// exit ;
35017: GO 35158
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35019: LD_VAR 0 2
35023: PPUSH
35024: LD_VAR 0 3
35028: PPUSH
35029: CALL_OW 428
35033: PUSH
35034: LD_VAR 0 1
35038: EQUAL
35039: PUSH
35040: LD_VAR 0 1
35044: PPUSH
35045: CALL_OW 314
35049: NOT
35050: AND
35051: IFFALSE 34977
// PlaySoundXY ( x , y , PlantMine ) ;
35053: LD_VAR 0 2
35057: PPUSH
35058: LD_VAR 0 3
35062: PPUSH
35063: LD_STRING PlantMine
35065: PPUSH
35066: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35070: LD_VAR 0 2
35074: PPUSH
35075: LD_VAR 0 3
35079: PPUSH
35080: LD_VAR 0 1
35084: PPUSH
35085: CALL_OW 255
35089: PPUSH
35090: LD_INT 0
35092: PPUSH
35093: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35097: LD_ADDR_EXP 119
35101: PUSH
35102: LD_EXP 119
35106: PPUSH
35107: LD_VAR 0 5
35111: PUSH
35112: LD_EXP 119
35116: PUSH
35117: LD_VAR 0 5
35121: ARRAY
35122: PUSH
35123: LD_INT 1
35125: PLUS
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PPUSH
35131: LD_VAR 0 2
35135: PUSH
35136: LD_VAR 0 3
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PPUSH
35145: CALL 41357 0 3
35149: ST_TO_ADDR
// result := true ;
35150: LD_ADDR_VAR 0 4
35154: PUSH
35155: LD_INT 1
35157: ST_TO_ADDR
// end ;
35158: LD_VAR 0 4
35162: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35163: LD_INT 0
35165: PPUSH
35166: PPUSH
35167: PPUSH
// if not unit in minersList then
35168: LD_VAR 0 1
35172: PUSH
35173: LD_EXP 118
35177: IN
35178: NOT
35179: IFFALSE 35183
// exit ;
35181: GO 35575
// index := GetElementIndex ( minersList , unit ) ;
35183: LD_ADDR_VAR 0 6
35187: PUSH
35188: LD_EXP 118
35192: PPUSH
35193: LD_VAR 0 1
35197: PPUSH
35198: CALL 41142 0 2
35202: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35203: LD_ADDR_VAR 0 5
35207: PUSH
35208: DOUBLE
35209: LD_EXP 119
35213: PUSH
35214: LD_VAR 0 6
35218: ARRAY
35219: INC
35220: ST_TO_ADDR
35221: LD_INT 1
35223: PUSH
35224: FOR_DOWNTO
35225: IFFALSE 35386
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35227: LD_EXP 119
35231: PUSH
35232: LD_VAR 0 6
35236: ARRAY
35237: PUSH
35238: LD_VAR 0 5
35242: ARRAY
35243: PUSH
35244: LD_INT 1
35246: ARRAY
35247: PUSH
35248: LD_VAR 0 2
35252: EQUAL
35253: PUSH
35254: LD_EXP 119
35258: PUSH
35259: LD_VAR 0 6
35263: ARRAY
35264: PUSH
35265: LD_VAR 0 5
35269: ARRAY
35270: PUSH
35271: LD_INT 2
35273: ARRAY
35274: PUSH
35275: LD_VAR 0 3
35279: EQUAL
35280: AND
35281: IFFALSE 35384
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35283: LD_EXP 119
35287: PUSH
35288: LD_VAR 0 6
35292: ARRAY
35293: PUSH
35294: LD_VAR 0 5
35298: ARRAY
35299: PUSH
35300: LD_INT 1
35302: ARRAY
35303: PPUSH
35304: LD_EXP 119
35308: PUSH
35309: LD_VAR 0 6
35313: ARRAY
35314: PUSH
35315: LD_VAR 0 5
35319: ARRAY
35320: PUSH
35321: LD_INT 2
35323: ARRAY
35324: PPUSH
35325: LD_VAR 0 1
35329: PPUSH
35330: CALL_OW 255
35334: PPUSH
35335: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35339: LD_ADDR_EXP 119
35343: PUSH
35344: LD_EXP 119
35348: PPUSH
35349: LD_VAR 0 6
35353: PPUSH
35354: LD_EXP 119
35358: PUSH
35359: LD_VAR 0 6
35363: ARRAY
35364: PPUSH
35365: LD_VAR 0 5
35369: PPUSH
35370: CALL_OW 3
35374: PPUSH
35375: CALL_OW 1
35379: ST_TO_ADDR
// exit ;
35380: POP
35381: POP
35382: GO 35575
// end ; end ;
35384: GO 35224
35386: POP
35387: POP
// for i := minerMinesList [ index ] downto 1 do
35388: LD_ADDR_VAR 0 5
35392: PUSH
35393: DOUBLE
35394: LD_EXP 119
35398: PUSH
35399: LD_VAR 0 6
35403: ARRAY
35404: INC
35405: ST_TO_ADDR
35406: LD_INT 1
35408: PUSH
35409: FOR_DOWNTO
35410: IFFALSE 35573
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35412: LD_EXP 119
35416: PUSH
35417: LD_VAR 0 6
35421: ARRAY
35422: PUSH
35423: LD_VAR 0 5
35427: ARRAY
35428: PUSH
35429: LD_INT 1
35431: ARRAY
35432: PPUSH
35433: LD_EXP 119
35437: PUSH
35438: LD_VAR 0 6
35442: ARRAY
35443: PUSH
35444: LD_VAR 0 5
35448: ARRAY
35449: PUSH
35450: LD_INT 2
35452: ARRAY
35453: PPUSH
35454: LD_VAR 0 2
35458: PPUSH
35459: LD_VAR 0 3
35463: PPUSH
35464: CALL_OW 298
35468: PUSH
35469: LD_INT 6
35471: LESS
35472: IFFALSE 35571
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35474: LD_EXP 119
35478: PUSH
35479: LD_VAR 0 6
35483: ARRAY
35484: PUSH
35485: LD_VAR 0 5
35489: ARRAY
35490: PUSH
35491: LD_INT 1
35493: ARRAY
35494: PPUSH
35495: LD_EXP 119
35499: PUSH
35500: LD_VAR 0 6
35504: ARRAY
35505: PUSH
35506: LD_VAR 0 5
35510: ARRAY
35511: PUSH
35512: LD_INT 2
35514: ARRAY
35515: PPUSH
35516: LD_VAR 0 1
35520: PPUSH
35521: CALL_OW 255
35525: PPUSH
35526: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35530: LD_ADDR_EXP 119
35534: PUSH
35535: LD_EXP 119
35539: PPUSH
35540: LD_VAR 0 6
35544: PPUSH
35545: LD_EXP 119
35549: PUSH
35550: LD_VAR 0 6
35554: ARRAY
35555: PPUSH
35556: LD_VAR 0 5
35560: PPUSH
35561: CALL_OW 3
35565: PPUSH
35566: CALL_OW 1
35570: ST_TO_ADDR
// end ; end ;
35571: GO 35409
35573: POP
35574: POP
// end ;
35575: LD_VAR 0 4
35579: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35580: LD_INT 0
35582: PPUSH
35583: PPUSH
35584: PPUSH
35585: PPUSH
35586: PPUSH
35587: PPUSH
35588: PPUSH
35589: PPUSH
35590: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35591: LD_VAR 0 1
35595: PPUSH
35596: CALL_OW 264
35600: PUSH
35601: LD_EXP 39
35605: EQUAL
35606: NOT
35607: PUSH
35608: LD_VAR 0 1
35612: PUSH
35613: LD_EXP 118
35617: IN
35618: NOT
35619: OR
35620: IFFALSE 35624
// exit ;
35622: GO 35946
// index := GetElementIndex ( minersList , unit ) ;
35624: LD_ADDR_VAR 0 6
35628: PUSH
35629: LD_EXP 118
35633: PPUSH
35634: LD_VAR 0 1
35638: PPUSH
35639: CALL 41142 0 2
35643: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35644: LD_ADDR_VAR 0 8
35648: PUSH
35649: LD_EXP 120
35653: PUSH
35654: LD_EXP 119
35658: PUSH
35659: LD_VAR 0 6
35663: ARRAY
35664: MINUS
35665: ST_TO_ADDR
// if not minesFreeAmount then
35666: LD_VAR 0 8
35670: NOT
35671: IFFALSE 35675
// exit ;
35673: GO 35946
// tmp := [ ] ;
35675: LD_ADDR_VAR 0 7
35679: PUSH
35680: EMPTY
35681: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35682: LD_ADDR_VAR 0 5
35686: PUSH
35687: DOUBLE
35688: LD_INT 1
35690: DEC
35691: ST_TO_ADDR
35692: LD_VAR 0 8
35696: PUSH
35697: FOR_TO
35698: IFFALSE 35893
// begin _d := rand ( 0 , 5 ) ;
35700: LD_ADDR_VAR 0 11
35704: PUSH
35705: LD_INT 0
35707: PPUSH
35708: LD_INT 5
35710: PPUSH
35711: CALL_OW 12
35715: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
35716: LD_ADDR_VAR 0 12
35720: PUSH
35721: LD_INT 2
35723: PPUSH
35724: LD_INT 6
35726: PPUSH
35727: CALL_OW 12
35731: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
35732: LD_ADDR_VAR 0 9
35736: PUSH
35737: LD_VAR 0 2
35741: PPUSH
35742: LD_VAR 0 11
35746: PPUSH
35747: LD_VAR 0 12
35751: PPUSH
35752: CALL_OW 272
35756: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
35757: LD_ADDR_VAR 0 10
35761: PUSH
35762: LD_VAR 0 3
35766: PPUSH
35767: LD_VAR 0 11
35771: PPUSH
35772: LD_VAR 0 12
35776: PPUSH
35777: CALL_OW 273
35781: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
35782: LD_VAR 0 9
35786: PPUSH
35787: LD_VAR 0 10
35791: PPUSH
35792: CALL_OW 488
35796: PUSH
35797: LD_VAR 0 9
35801: PUSH
35802: LD_VAR 0 10
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_VAR 0 7
35815: IN
35816: NOT
35817: AND
35818: PUSH
35819: LD_VAR 0 9
35823: PPUSH
35824: LD_VAR 0 10
35828: PPUSH
35829: CALL_OW 458
35833: NOT
35834: AND
35835: IFFALSE 35877
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
35837: LD_ADDR_VAR 0 7
35841: PUSH
35842: LD_VAR 0 7
35846: PPUSH
35847: LD_VAR 0 7
35851: PUSH
35852: LD_INT 1
35854: PLUS
35855: PPUSH
35856: LD_VAR 0 9
35860: PUSH
35861: LD_VAR 0 10
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PPUSH
35870: CALL_OW 1
35874: ST_TO_ADDR
35875: GO 35891
// i := i - 1 ;
35877: LD_ADDR_VAR 0 5
35881: PUSH
35882: LD_VAR 0 5
35886: PUSH
35887: LD_INT 1
35889: MINUS
35890: ST_TO_ADDR
// end ;
35891: GO 35697
35893: POP
35894: POP
// for i in tmp do
35895: LD_ADDR_VAR 0 5
35899: PUSH
35900: LD_VAR 0 7
35904: PUSH
35905: FOR_IN
35906: IFFALSE 35944
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
35908: LD_VAR 0 1
35912: PPUSH
35913: LD_VAR 0 5
35917: PUSH
35918: LD_INT 1
35920: ARRAY
35921: PPUSH
35922: LD_VAR 0 5
35926: PUSH
35927: LD_INT 2
35929: ARRAY
35930: PPUSH
35931: CALL 34886 0 3
35935: NOT
35936: IFFALSE 35942
// exit ;
35938: POP
35939: POP
35940: GO 35946
35942: GO 35905
35944: POP
35945: POP
// end ;
35946: LD_VAR 0 4
35950: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
35951: LD_INT 0
35953: PPUSH
35954: PPUSH
35955: PPUSH
35956: PPUSH
35957: PPUSH
35958: PPUSH
35959: PPUSH
// if not GetClass ( unit ) = class_sniper then
35960: LD_VAR 0 1
35964: PPUSH
35965: CALL_OW 257
35969: PUSH
35970: LD_INT 5
35972: EQUAL
35973: NOT
35974: IFFALSE 35978
// exit ;
35976: GO 36366
// dist := 8 ;
35978: LD_ADDR_VAR 0 5
35982: PUSH
35983: LD_INT 8
35985: ST_TO_ADDR
// viewRange := 12 ;
35986: LD_ADDR_VAR 0 7
35990: PUSH
35991: LD_INT 12
35993: ST_TO_ADDR
// side := GetSide ( unit ) ;
35994: LD_ADDR_VAR 0 6
35998: PUSH
35999: LD_VAR 0 1
36003: PPUSH
36004: CALL_OW 255
36008: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36009: LD_INT 61
36011: PPUSH
36012: LD_VAR 0 6
36016: PPUSH
36017: CALL_OW 321
36021: PUSH
36022: LD_INT 2
36024: EQUAL
36025: IFFALSE 36035
// viewRange := 16 ;
36027: LD_ADDR_VAR 0 7
36031: PUSH
36032: LD_INT 16
36034: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36035: LD_VAR 0 1
36039: PPUSH
36040: LD_VAR 0 2
36044: PPUSH
36045: LD_VAR 0 3
36049: PPUSH
36050: CALL_OW 297
36054: PUSH
36055: LD_VAR 0 5
36059: GREATER
36060: IFFALSE 36139
// begin ComMoveXY ( unit , x , y ) ;
36062: LD_VAR 0 1
36066: PPUSH
36067: LD_VAR 0 2
36071: PPUSH
36072: LD_VAR 0 3
36076: PPUSH
36077: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36081: LD_INT 35
36083: PPUSH
36084: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36088: LD_VAR 0 1
36092: PPUSH
36093: LD_VAR 0 2
36097: PPUSH
36098: LD_VAR 0 3
36102: PPUSH
36103: CALL 71861 0 3
36107: NOT
36108: IFFALSE 36112
// exit ;
36110: GO 36366
// until GetDistUnitXY ( unit , x , y ) < dist ;
36112: LD_VAR 0 1
36116: PPUSH
36117: LD_VAR 0 2
36121: PPUSH
36122: LD_VAR 0 3
36126: PPUSH
36127: CALL_OW 297
36131: PUSH
36132: LD_VAR 0 5
36136: LESS
36137: IFFALSE 36081
// end ; ComTurnXY ( unit , x , y ) ;
36139: LD_VAR 0 1
36143: PPUSH
36144: LD_VAR 0 2
36148: PPUSH
36149: LD_VAR 0 3
36153: PPUSH
36154: CALL_OW 118
// wait ( 5 ) ;
36158: LD_INT 5
36160: PPUSH
36161: CALL_OW 67
// _d := GetDir ( unit ) ;
36165: LD_ADDR_VAR 0 10
36169: PUSH
36170: LD_VAR 0 1
36174: PPUSH
36175: CALL_OW 254
36179: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36180: LD_ADDR_VAR 0 8
36184: PUSH
36185: LD_VAR 0 1
36189: PPUSH
36190: CALL_OW 250
36194: PPUSH
36195: LD_VAR 0 10
36199: PPUSH
36200: LD_VAR 0 5
36204: PPUSH
36205: CALL_OW 272
36209: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36210: LD_ADDR_VAR 0 9
36214: PUSH
36215: LD_VAR 0 1
36219: PPUSH
36220: CALL_OW 251
36224: PPUSH
36225: LD_VAR 0 10
36229: PPUSH
36230: LD_VAR 0 5
36234: PPUSH
36235: CALL_OW 273
36239: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36240: LD_VAR 0 8
36244: PPUSH
36245: LD_VAR 0 9
36249: PPUSH
36250: CALL_OW 488
36254: NOT
36255: IFFALSE 36259
// exit ;
36257: GO 36366
// ComAnimCustom ( unit , 1 ) ;
36259: LD_VAR 0 1
36263: PPUSH
36264: LD_INT 1
36266: PPUSH
36267: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36271: LD_VAR 0 8
36275: PPUSH
36276: LD_VAR 0 9
36280: PPUSH
36281: LD_VAR 0 6
36285: PPUSH
36286: LD_VAR 0 7
36290: PPUSH
36291: CALL_OW 330
// repeat wait ( 1 ) ;
36295: LD_INT 1
36297: PPUSH
36298: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36302: LD_VAR 0 1
36306: PPUSH
36307: CALL_OW 316
36311: PUSH
36312: LD_VAR 0 1
36316: PPUSH
36317: CALL_OW 314
36321: OR
36322: PUSH
36323: LD_VAR 0 1
36327: PPUSH
36328: CALL_OW 302
36332: NOT
36333: OR
36334: PUSH
36335: LD_VAR 0 1
36339: PPUSH
36340: CALL_OW 301
36344: OR
36345: IFFALSE 36295
// RemoveSeeing ( _x , _y , side ) ;
36347: LD_VAR 0 8
36351: PPUSH
36352: LD_VAR 0 9
36356: PPUSH
36357: LD_VAR 0 6
36361: PPUSH
36362: CALL_OW 331
// end ; end_of_file
36366: LD_VAR 0 4
36370: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36371: LD_INT 0
36373: PPUSH
36374: PPUSH
// if exist_mode then
36375: LD_VAR 0 2
36379: IFFALSE 36404
// unit := CreateCharacter ( prefix & ident ) else
36381: LD_ADDR_VAR 0 5
36385: PUSH
36386: LD_VAR 0 3
36390: PUSH
36391: LD_VAR 0 1
36395: STR
36396: PPUSH
36397: CALL_OW 34
36401: ST_TO_ADDR
36402: GO 36419
// unit := NewCharacter ( ident ) ;
36404: LD_ADDR_VAR 0 5
36408: PUSH
36409: LD_VAR 0 1
36413: PPUSH
36414: CALL_OW 25
36418: ST_TO_ADDR
// result := unit ;
36419: LD_ADDR_VAR 0 4
36423: PUSH
36424: LD_VAR 0 5
36428: ST_TO_ADDR
// end ;
36429: LD_VAR 0 4
36433: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36434: LD_INT 0
36436: PPUSH
36437: PPUSH
// if not side or not nation then
36438: LD_VAR 0 1
36442: NOT
36443: PUSH
36444: LD_VAR 0 2
36448: NOT
36449: OR
36450: IFFALSE 36454
// exit ;
36452: GO 37222
// case nation of nation_american :
36454: LD_VAR 0 2
36458: PUSH
36459: LD_INT 1
36461: DOUBLE
36462: EQUAL
36463: IFTRUE 36467
36465: GO 36681
36467: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36468: LD_ADDR_VAR 0 4
36472: PUSH
36473: LD_INT 35
36475: PUSH
36476: LD_INT 45
36478: PUSH
36479: LD_INT 46
36481: PUSH
36482: LD_INT 47
36484: PUSH
36485: LD_INT 82
36487: PUSH
36488: LD_INT 83
36490: PUSH
36491: LD_INT 84
36493: PUSH
36494: LD_INT 85
36496: PUSH
36497: LD_INT 86
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: LD_INT 2
36505: PUSH
36506: LD_INT 6
36508: PUSH
36509: LD_INT 15
36511: PUSH
36512: LD_INT 16
36514: PUSH
36515: LD_INT 7
36517: PUSH
36518: LD_INT 12
36520: PUSH
36521: LD_INT 13
36523: PUSH
36524: LD_INT 10
36526: PUSH
36527: LD_INT 14
36529: PUSH
36530: LD_INT 20
36532: PUSH
36533: LD_INT 21
36535: PUSH
36536: LD_INT 22
36538: PUSH
36539: LD_INT 25
36541: PUSH
36542: LD_INT 32
36544: PUSH
36545: LD_INT 27
36547: PUSH
36548: LD_INT 36
36550: PUSH
36551: LD_INT 69
36553: PUSH
36554: LD_INT 39
36556: PUSH
36557: LD_INT 34
36559: PUSH
36560: LD_INT 40
36562: PUSH
36563: LD_INT 48
36565: PUSH
36566: LD_INT 49
36568: PUSH
36569: LD_INT 50
36571: PUSH
36572: LD_INT 51
36574: PUSH
36575: LD_INT 52
36577: PUSH
36578: LD_INT 53
36580: PUSH
36581: LD_INT 54
36583: PUSH
36584: LD_INT 55
36586: PUSH
36587: LD_INT 56
36589: PUSH
36590: LD_INT 57
36592: PUSH
36593: LD_INT 58
36595: PUSH
36596: LD_INT 59
36598: PUSH
36599: LD_INT 60
36601: PUSH
36602: LD_INT 61
36604: PUSH
36605: LD_INT 62
36607: PUSH
36608: LD_INT 80
36610: PUSH
36611: LD_INT 82
36613: PUSH
36614: LD_INT 83
36616: PUSH
36617: LD_INT 84
36619: PUSH
36620: LD_INT 85
36622: PUSH
36623: LD_INT 86
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: ST_TO_ADDR
36679: GO 37146
36681: LD_INT 2
36683: DOUBLE
36684: EQUAL
36685: IFTRUE 36689
36687: GO 36915
36689: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36690: LD_ADDR_VAR 0 4
36694: PUSH
36695: LD_INT 35
36697: PUSH
36698: LD_INT 45
36700: PUSH
36701: LD_INT 46
36703: PUSH
36704: LD_INT 47
36706: PUSH
36707: LD_INT 82
36709: PUSH
36710: LD_INT 83
36712: PUSH
36713: LD_INT 84
36715: PUSH
36716: LD_INT 85
36718: PUSH
36719: LD_INT 87
36721: PUSH
36722: LD_INT 70
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: LD_INT 11
36730: PUSH
36731: LD_INT 3
36733: PUSH
36734: LD_INT 4
36736: PUSH
36737: LD_INT 5
36739: PUSH
36740: LD_INT 6
36742: PUSH
36743: LD_INT 15
36745: PUSH
36746: LD_INT 18
36748: PUSH
36749: LD_INT 7
36751: PUSH
36752: LD_INT 17
36754: PUSH
36755: LD_INT 8
36757: PUSH
36758: LD_INT 20
36760: PUSH
36761: LD_INT 21
36763: PUSH
36764: LD_INT 22
36766: PUSH
36767: LD_INT 72
36769: PUSH
36770: LD_INT 26
36772: PUSH
36773: LD_INT 69
36775: PUSH
36776: LD_INT 39
36778: PUSH
36779: LD_INT 40
36781: PUSH
36782: LD_INT 41
36784: PUSH
36785: LD_INT 42
36787: PUSH
36788: LD_INT 43
36790: PUSH
36791: LD_INT 48
36793: PUSH
36794: LD_INT 49
36796: PUSH
36797: LD_INT 50
36799: PUSH
36800: LD_INT 51
36802: PUSH
36803: LD_INT 52
36805: PUSH
36806: LD_INT 53
36808: PUSH
36809: LD_INT 54
36811: PUSH
36812: LD_INT 55
36814: PUSH
36815: LD_INT 56
36817: PUSH
36818: LD_INT 60
36820: PUSH
36821: LD_INT 61
36823: PUSH
36824: LD_INT 62
36826: PUSH
36827: LD_INT 66
36829: PUSH
36830: LD_INT 67
36832: PUSH
36833: LD_INT 68
36835: PUSH
36836: LD_INT 81
36838: PUSH
36839: LD_INT 82
36841: PUSH
36842: LD_INT 83
36844: PUSH
36845: LD_INT 84
36847: PUSH
36848: LD_INT 85
36850: PUSH
36851: LD_INT 87
36853: PUSH
36854: LD_INT 88
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: ST_TO_ADDR
36913: GO 37146
36915: LD_INT 3
36917: DOUBLE
36918: EQUAL
36919: IFTRUE 36923
36921: GO 37145
36923: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36924: LD_ADDR_VAR 0 4
36928: PUSH
36929: LD_INT 46
36931: PUSH
36932: LD_INT 47
36934: PUSH
36935: LD_INT 1
36937: PUSH
36938: LD_INT 2
36940: PUSH
36941: LD_INT 82
36943: PUSH
36944: LD_INT 83
36946: PUSH
36947: LD_INT 84
36949: PUSH
36950: LD_INT 85
36952: PUSH
36953: LD_INT 86
36955: PUSH
36956: LD_INT 11
36958: PUSH
36959: LD_INT 9
36961: PUSH
36962: LD_INT 20
36964: PUSH
36965: LD_INT 19
36967: PUSH
36968: LD_INT 21
36970: PUSH
36971: LD_INT 24
36973: PUSH
36974: LD_INT 22
36976: PUSH
36977: LD_INT 25
36979: PUSH
36980: LD_INT 28
36982: PUSH
36983: LD_INT 29
36985: PUSH
36986: LD_INT 30
36988: PUSH
36989: LD_INT 31
36991: PUSH
36992: LD_INT 37
36994: PUSH
36995: LD_INT 38
36997: PUSH
36998: LD_INT 32
37000: PUSH
37001: LD_INT 27
37003: PUSH
37004: LD_INT 33
37006: PUSH
37007: LD_INT 69
37009: PUSH
37010: LD_INT 39
37012: PUSH
37013: LD_INT 34
37015: PUSH
37016: LD_INT 40
37018: PUSH
37019: LD_INT 71
37021: PUSH
37022: LD_INT 23
37024: PUSH
37025: LD_INT 44
37027: PUSH
37028: LD_INT 48
37030: PUSH
37031: LD_INT 49
37033: PUSH
37034: LD_INT 50
37036: PUSH
37037: LD_INT 51
37039: PUSH
37040: LD_INT 52
37042: PUSH
37043: LD_INT 53
37045: PUSH
37046: LD_INT 54
37048: PUSH
37049: LD_INT 55
37051: PUSH
37052: LD_INT 56
37054: PUSH
37055: LD_INT 57
37057: PUSH
37058: LD_INT 58
37060: PUSH
37061: LD_INT 59
37063: PUSH
37064: LD_INT 63
37066: PUSH
37067: LD_INT 64
37069: PUSH
37070: LD_INT 65
37072: PUSH
37073: LD_INT 82
37075: PUSH
37076: LD_INT 83
37078: PUSH
37079: LD_INT 84
37081: PUSH
37082: LD_INT 85
37084: PUSH
37085: LD_INT 86
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: ST_TO_ADDR
37143: GO 37146
37145: POP
// if state > - 1 and state < 3 then
37146: LD_VAR 0 3
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: GREATER
37155: PUSH
37156: LD_VAR 0 3
37160: PUSH
37161: LD_INT 3
37163: LESS
37164: AND
37165: IFFALSE 37222
// for i in result do
37167: LD_ADDR_VAR 0 5
37171: PUSH
37172: LD_VAR 0 4
37176: PUSH
37177: FOR_IN
37178: IFFALSE 37220
// if GetTech ( i , side ) <> state then
37180: LD_VAR 0 5
37184: PPUSH
37185: LD_VAR 0 1
37189: PPUSH
37190: CALL_OW 321
37194: PUSH
37195: LD_VAR 0 3
37199: NONEQUAL
37200: IFFALSE 37218
// result := result diff i ;
37202: LD_ADDR_VAR 0 4
37206: PUSH
37207: LD_VAR 0 4
37211: PUSH
37212: LD_VAR 0 5
37216: DIFF
37217: ST_TO_ADDR
37218: GO 37177
37220: POP
37221: POP
// end ;
37222: LD_VAR 0 4
37226: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37227: LD_INT 0
37229: PPUSH
37230: PPUSH
37231: PPUSH
// result := true ;
37232: LD_ADDR_VAR 0 3
37236: PUSH
37237: LD_INT 1
37239: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37240: LD_ADDR_VAR 0 5
37244: PUSH
37245: LD_VAR 0 2
37249: PPUSH
37250: CALL_OW 480
37254: ST_TO_ADDR
// if not tmp then
37255: LD_VAR 0 5
37259: NOT
37260: IFFALSE 37264
// exit ;
37262: GO 37313
// for i in tmp do
37264: LD_ADDR_VAR 0 4
37268: PUSH
37269: LD_VAR 0 5
37273: PUSH
37274: FOR_IN
37275: IFFALSE 37311
// if GetTech ( i , side ) <> state_researched then
37277: LD_VAR 0 4
37281: PPUSH
37282: LD_VAR 0 1
37286: PPUSH
37287: CALL_OW 321
37291: PUSH
37292: LD_INT 2
37294: NONEQUAL
37295: IFFALSE 37309
// begin result := false ;
37297: LD_ADDR_VAR 0 3
37301: PUSH
37302: LD_INT 0
37304: ST_TO_ADDR
// exit ;
37305: POP
37306: POP
37307: GO 37313
// end ;
37309: GO 37274
37311: POP
37312: POP
// end ;
37313: LD_VAR 0 3
37317: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37318: LD_INT 0
37320: PPUSH
37321: PPUSH
37322: PPUSH
37323: PPUSH
37324: PPUSH
37325: PPUSH
37326: PPUSH
37327: PPUSH
37328: PPUSH
37329: PPUSH
37330: PPUSH
37331: PPUSH
37332: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37333: LD_VAR 0 1
37337: NOT
37338: PUSH
37339: LD_VAR 0 1
37343: PPUSH
37344: CALL_OW 257
37348: PUSH
37349: LD_INT 9
37351: NONEQUAL
37352: OR
37353: IFFALSE 37357
// exit ;
37355: GO 37930
// side := GetSide ( unit ) ;
37357: LD_ADDR_VAR 0 9
37361: PUSH
37362: LD_VAR 0 1
37366: PPUSH
37367: CALL_OW 255
37371: ST_TO_ADDR
// tech_space := tech_spacanom ;
37372: LD_ADDR_VAR 0 12
37376: PUSH
37377: LD_INT 29
37379: ST_TO_ADDR
// tech_time := tech_taurad ;
37380: LD_ADDR_VAR 0 13
37384: PUSH
37385: LD_INT 28
37387: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37388: LD_ADDR_VAR 0 11
37392: PUSH
37393: LD_VAR 0 1
37397: PPUSH
37398: CALL_OW 310
37402: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37403: LD_VAR 0 11
37407: PPUSH
37408: CALL_OW 247
37412: PUSH
37413: LD_INT 2
37415: EQUAL
37416: IFFALSE 37420
// exit ;
37418: GO 37930
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37420: LD_ADDR_VAR 0 8
37424: PUSH
37425: LD_INT 81
37427: PUSH
37428: LD_VAR 0 9
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 3
37439: PUSH
37440: LD_INT 21
37442: PUSH
37443: LD_INT 3
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PPUSH
37458: CALL_OW 69
37462: ST_TO_ADDR
// if not tmp then
37463: LD_VAR 0 8
37467: NOT
37468: IFFALSE 37472
// exit ;
37470: GO 37930
// if in_unit then
37472: LD_VAR 0 11
37476: IFFALSE 37500
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37478: LD_ADDR_VAR 0 10
37482: PUSH
37483: LD_VAR 0 8
37487: PPUSH
37488: LD_VAR 0 11
37492: PPUSH
37493: CALL_OW 74
37497: ST_TO_ADDR
37498: GO 37520
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37500: LD_ADDR_VAR 0 10
37504: PUSH
37505: LD_VAR 0 8
37509: PPUSH
37510: LD_VAR 0 1
37514: PPUSH
37515: CALL_OW 74
37519: ST_TO_ADDR
// if not enemy then
37520: LD_VAR 0 10
37524: NOT
37525: IFFALSE 37529
// exit ;
37527: GO 37930
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37529: LD_VAR 0 11
37533: PUSH
37534: LD_VAR 0 11
37538: PPUSH
37539: LD_VAR 0 10
37543: PPUSH
37544: CALL_OW 296
37548: PUSH
37549: LD_INT 13
37551: GREATER
37552: AND
37553: PUSH
37554: LD_VAR 0 1
37558: PPUSH
37559: LD_VAR 0 10
37563: PPUSH
37564: CALL_OW 296
37568: PUSH
37569: LD_INT 12
37571: GREATER
37572: OR
37573: IFFALSE 37577
// exit ;
37575: GO 37930
// missile := [ 1 ] ;
37577: LD_ADDR_VAR 0 14
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: EMPTY
37586: LIST
37587: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37588: LD_VAR 0 9
37592: PPUSH
37593: LD_VAR 0 12
37597: PPUSH
37598: CALL_OW 325
37602: IFFALSE 37631
// missile := Replace ( missile , missile + 1 , 2 ) ;
37604: LD_ADDR_VAR 0 14
37608: PUSH
37609: LD_VAR 0 14
37613: PPUSH
37614: LD_VAR 0 14
37618: PUSH
37619: LD_INT 1
37621: PLUS
37622: PPUSH
37623: LD_INT 2
37625: PPUSH
37626: CALL_OW 1
37630: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37631: LD_VAR 0 9
37635: PPUSH
37636: LD_VAR 0 13
37640: PPUSH
37641: CALL_OW 325
37645: PUSH
37646: LD_VAR 0 10
37650: PPUSH
37651: CALL_OW 255
37655: PPUSH
37656: LD_VAR 0 13
37660: PPUSH
37661: CALL_OW 325
37665: NOT
37666: AND
37667: IFFALSE 37696
// missile := Replace ( missile , missile + 1 , 3 ) ;
37669: LD_ADDR_VAR 0 14
37673: PUSH
37674: LD_VAR 0 14
37678: PPUSH
37679: LD_VAR 0 14
37683: PUSH
37684: LD_INT 1
37686: PLUS
37687: PPUSH
37688: LD_INT 3
37690: PPUSH
37691: CALL_OW 1
37695: ST_TO_ADDR
// if missile < 2 then
37696: LD_VAR 0 14
37700: PUSH
37701: LD_INT 2
37703: LESS
37704: IFFALSE 37708
// exit ;
37706: GO 37930
// x := GetX ( enemy ) ;
37708: LD_ADDR_VAR 0 4
37712: PUSH
37713: LD_VAR 0 10
37717: PPUSH
37718: CALL_OW 250
37722: ST_TO_ADDR
// y := GetY ( enemy ) ;
37723: LD_ADDR_VAR 0 5
37727: PUSH
37728: LD_VAR 0 10
37732: PPUSH
37733: CALL_OW 251
37737: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37738: LD_ADDR_VAR 0 6
37742: PUSH
37743: LD_VAR 0 4
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PPUSH
37752: LD_INT 1
37754: PPUSH
37755: CALL_OW 12
37759: PLUS
37760: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37761: LD_ADDR_VAR 0 7
37765: PUSH
37766: LD_VAR 0 5
37770: PUSH
37771: LD_INT 1
37773: NEG
37774: PPUSH
37775: LD_INT 1
37777: PPUSH
37778: CALL_OW 12
37782: PLUS
37783: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37784: LD_VAR 0 6
37788: PPUSH
37789: LD_VAR 0 7
37793: PPUSH
37794: CALL_OW 488
37798: NOT
37799: IFFALSE 37821
// begin _x := x ;
37801: LD_ADDR_VAR 0 6
37805: PUSH
37806: LD_VAR 0 4
37810: ST_TO_ADDR
// _y := y ;
37811: LD_ADDR_VAR 0 7
37815: PUSH
37816: LD_VAR 0 5
37820: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37821: LD_ADDR_VAR 0 3
37825: PUSH
37826: LD_INT 1
37828: PPUSH
37829: LD_VAR 0 14
37833: PPUSH
37834: CALL_OW 12
37838: ST_TO_ADDR
// case i of 1 :
37839: LD_VAR 0 3
37843: PUSH
37844: LD_INT 1
37846: DOUBLE
37847: EQUAL
37848: IFTRUE 37852
37850: GO 37869
37852: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37853: LD_VAR 0 1
37857: PPUSH
37858: LD_VAR 0 10
37862: PPUSH
37863: CALL_OW 115
37867: GO 37930
37869: LD_INT 2
37871: DOUBLE
37872: EQUAL
37873: IFTRUE 37877
37875: GO 37899
37877: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37878: LD_VAR 0 1
37882: PPUSH
37883: LD_VAR 0 6
37887: PPUSH
37888: LD_VAR 0 7
37892: PPUSH
37893: CALL_OW 153
37897: GO 37930
37899: LD_INT 3
37901: DOUBLE
37902: EQUAL
37903: IFTRUE 37907
37905: GO 37929
37907: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37908: LD_VAR 0 1
37912: PPUSH
37913: LD_VAR 0 6
37917: PPUSH
37918: LD_VAR 0 7
37922: PPUSH
37923: CALL_OW 154
37927: GO 37930
37929: POP
// end ;
37930: LD_VAR 0 2
37934: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37935: LD_INT 0
37937: PPUSH
37938: PPUSH
37939: PPUSH
37940: PPUSH
37941: PPUSH
37942: PPUSH
// if not unit or not building then
37943: LD_VAR 0 1
37947: NOT
37948: PUSH
37949: LD_VAR 0 2
37953: NOT
37954: OR
37955: IFFALSE 37959
// exit ;
37957: GO 38117
// x := GetX ( building ) ;
37959: LD_ADDR_VAR 0 5
37963: PUSH
37964: LD_VAR 0 2
37968: PPUSH
37969: CALL_OW 250
37973: ST_TO_ADDR
// y := GetY ( building ) ;
37974: LD_ADDR_VAR 0 6
37978: PUSH
37979: LD_VAR 0 2
37983: PPUSH
37984: CALL_OW 251
37988: ST_TO_ADDR
// for i = 0 to 5 do
37989: LD_ADDR_VAR 0 4
37993: PUSH
37994: DOUBLE
37995: LD_INT 0
37997: DEC
37998: ST_TO_ADDR
37999: LD_INT 5
38001: PUSH
38002: FOR_TO
38003: IFFALSE 38115
// begin _x := ShiftX ( x , i , 3 ) ;
38005: LD_ADDR_VAR 0 7
38009: PUSH
38010: LD_VAR 0 5
38014: PPUSH
38015: LD_VAR 0 4
38019: PPUSH
38020: LD_INT 3
38022: PPUSH
38023: CALL_OW 272
38027: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38028: LD_ADDR_VAR 0 8
38032: PUSH
38033: LD_VAR 0 6
38037: PPUSH
38038: LD_VAR 0 4
38042: PPUSH
38043: LD_INT 3
38045: PPUSH
38046: CALL_OW 273
38050: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38051: LD_VAR 0 7
38055: PPUSH
38056: LD_VAR 0 8
38060: PPUSH
38061: CALL_OW 488
38065: NOT
38066: IFFALSE 38070
// continue ;
38068: GO 38002
// if HexInfo ( _x , _y ) = 0 then
38070: LD_VAR 0 7
38074: PPUSH
38075: LD_VAR 0 8
38079: PPUSH
38080: CALL_OW 428
38084: PUSH
38085: LD_INT 0
38087: EQUAL
38088: IFFALSE 38113
// begin ComMoveXY ( unit , _x , _y ) ;
38090: LD_VAR 0 1
38094: PPUSH
38095: LD_VAR 0 7
38099: PPUSH
38100: LD_VAR 0 8
38104: PPUSH
38105: CALL_OW 111
// exit ;
38109: POP
38110: POP
38111: GO 38117
// end ; end ;
38113: GO 38002
38115: POP
38116: POP
// end ;
38117: LD_VAR 0 3
38121: RET
// export function ScanBase ( side , base_area ) ; begin
38122: LD_INT 0
38124: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38125: LD_ADDR_VAR 0 3
38129: PUSH
38130: LD_VAR 0 2
38134: PPUSH
38135: LD_INT 81
38137: PUSH
38138: LD_VAR 0 1
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PPUSH
38147: CALL_OW 70
38151: ST_TO_ADDR
// end ;
38152: LD_VAR 0 3
38156: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38157: LD_INT 0
38159: PPUSH
38160: PPUSH
38161: PPUSH
38162: PPUSH
// result := false ;
38163: LD_ADDR_VAR 0 2
38167: PUSH
38168: LD_INT 0
38170: ST_TO_ADDR
// side := GetSide ( unit ) ;
38171: LD_ADDR_VAR 0 3
38175: PUSH
38176: LD_VAR 0 1
38180: PPUSH
38181: CALL_OW 255
38185: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38186: LD_ADDR_VAR 0 4
38190: PUSH
38191: LD_VAR 0 1
38195: PPUSH
38196: CALL_OW 248
38200: ST_TO_ADDR
// case nat of 1 :
38201: LD_VAR 0 4
38205: PUSH
38206: LD_INT 1
38208: DOUBLE
38209: EQUAL
38210: IFTRUE 38214
38212: GO 38225
38214: POP
// tech := tech_lassight ; 2 :
38215: LD_ADDR_VAR 0 5
38219: PUSH
38220: LD_INT 12
38222: ST_TO_ADDR
38223: GO 38264
38225: LD_INT 2
38227: DOUBLE
38228: EQUAL
38229: IFTRUE 38233
38231: GO 38244
38233: POP
// tech := tech_mortar ; 3 :
38234: LD_ADDR_VAR 0 5
38238: PUSH
38239: LD_INT 41
38241: ST_TO_ADDR
38242: GO 38264
38244: LD_INT 3
38246: DOUBLE
38247: EQUAL
38248: IFTRUE 38252
38250: GO 38263
38252: POP
// tech := tech_bazooka ; end ;
38253: LD_ADDR_VAR 0 5
38257: PUSH
38258: LD_INT 44
38260: ST_TO_ADDR
38261: GO 38264
38263: POP
// if Researched ( side , tech ) then
38264: LD_VAR 0 3
38268: PPUSH
38269: LD_VAR 0 5
38273: PPUSH
38274: CALL_OW 325
38278: IFFALSE 38305
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38280: LD_ADDR_VAR 0 2
38284: PUSH
38285: LD_INT 5
38287: PUSH
38288: LD_INT 8
38290: PUSH
38291: LD_INT 9
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: LIST
38298: PUSH
38299: LD_VAR 0 4
38303: ARRAY
38304: ST_TO_ADDR
// end ;
38305: LD_VAR 0 2
38309: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38310: LD_INT 0
38312: PPUSH
38313: PPUSH
38314: PPUSH
// if not mines then
38315: LD_VAR 0 2
38319: NOT
38320: IFFALSE 38324
// exit ;
38322: GO 38468
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38324: LD_ADDR_VAR 0 5
38328: PUSH
38329: LD_INT 81
38331: PUSH
38332: LD_VAR 0 1
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 3
38343: PUSH
38344: LD_INT 21
38346: PUSH
38347: LD_INT 3
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PPUSH
38362: CALL_OW 69
38366: ST_TO_ADDR
// for i in mines do
38367: LD_ADDR_VAR 0 4
38371: PUSH
38372: LD_VAR 0 2
38376: PUSH
38377: FOR_IN
38378: IFFALSE 38466
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38380: LD_VAR 0 4
38384: PUSH
38385: LD_INT 1
38387: ARRAY
38388: PPUSH
38389: LD_VAR 0 4
38393: PUSH
38394: LD_INT 2
38396: ARRAY
38397: PPUSH
38398: CALL_OW 458
38402: NOT
38403: IFFALSE 38407
// continue ;
38405: GO 38377
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38407: LD_VAR 0 4
38411: PUSH
38412: LD_INT 1
38414: ARRAY
38415: PPUSH
38416: LD_VAR 0 4
38420: PUSH
38421: LD_INT 2
38423: ARRAY
38424: PPUSH
38425: CALL_OW 428
38429: PUSH
38430: LD_VAR 0 5
38434: IN
38435: IFFALSE 38464
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38437: LD_VAR 0 4
38441: PUSH
38442: LD_INT 1
38444: ARRAY
38445: PPUSH
38446: LD_VAR 0 4
38450: PUSH
38451: LD_INT 2
38453: ARRAY
38454: PPUSH
38455: LD_VAR 0 1
38459: PPUSH
38460: CALL_OW 456
// end ;
38464: GO 38377
38466: POP
38467: POP
// end ;
38468: LD_VAR 0 3
38472: RET
// export function Count ( array ) ; var i ; begin
38473: LD_INT 0
38475: PPUSH
38476: PPUSH
// result := 0 ;
38477: LD_ADDR_VAR 0 2
38481: PUSH
38482: LD_INT 0
38484: ST_TO_ADDR
// for i in array do
38485: LD_ADDR_VAR 0 3
38489: PUSH
38490: LD_VAR 0 1
38494: PUSH
38495: FOR_IN
38496: IFFALSE 38520
// if i then
38498: LD_VAR 0 3
38502: IFFALSE 38518
// result := result + 1 ;
38504: LD_ADDR_VAR 0 2
38508: PUSH
38509: LD_VAR 0 2
38513: PUSH
38514: LD_INT 1
38516: PLUS
38517: ST_TO_ADDR
38518: GO 38495
38520: POP
38521: POP
// end ;
38522: LD_VAR 0 2
38526: RET
// export function IsEmpty ( building ) ; begin
38527: LD_INT 0
38529: PPUSH
// if not building then
38530: LD_VAR 0 1
38534: NOT
38535: IFFALSE 38539
// exit ;
38537: GO 38582
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38539: LD_ADDR_VAR 0 2
38543: PUSH
38544: LD_VAR 0 1
38548: PUSH
38549: LD_INT 22
38551: PUSH
38552: LD_VAR 0 1
38556: PPUSH
38557: CALL_OW 255
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 58
38568: PUSH
38569: EMPTY
38570: LIST
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PPUSH
38576: CALL_OW 69
38580: IN
38581: ST_TO_ADDR
// end ;
38582: LD_VAR 0 2
38586: RET
// export function IsNotFull ( building ) ; begin
38587: LD_INT 0
38589: PPUSH
// if not building then
38590: LD_VAR 0 1
38594: NOT
38595: IFFALSE 38599
// exit ;
38597: GO 38618
// result := UnitsInside ( building ) < 6 ;
38599: LD_ADDR_VAR 0 2
38603: PUSH
38604: LD_VAR 0 1
38608: PPUSH
38609: CALL_OW 313
38613: PUSH
38614: LD_INT 6
38616: LESS
38617: ST_TO_ADDR
// end ;
38618: LD_VAR 0 2
38622: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38623: LD_INT 0
38625: PPUSH
38626: PPUSH
38627: PPUSH
38628: PPUSH
// tmp := [ ] ;
38629: LD_ADDR_VAR 0 3
38633: PUSH
38634: EMPTY
38635: ST_TO_ADDR
// list := [ ] ;
38636: LD_ADDR_VAR 0 5
38640: PUSH
38641: EMPTY
38642: ST_TO_ADDR
// for i = 16 to 25 do
38643: LD_ADDR_VAR 0 4
38647: PUSH
38648: DOUBLE
38649: LD_INT 16
38651: DEC
38652: ST_TO_ADDR
38653: LD_INT 25
38655: PUSH
38656: FOR_TO
38657: IFFALSE 38730
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38659: LD_ADDR_VAR 0 3
38663: PUSH
38664: LD_VAR 0 3
38668: PUSH
38669: LD_INT 22
38671: PUSH
38672: LD_VAR 0 1
38676: PPUSH
38677: CALL_OW 255
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 91
38688: PUSH
38689: LD_VAR 0 1
38693: PUSH
38694: LD_INT 6
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 30
38704: PUSH
38705: LD_VAR 0 4
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: LIST
38718: PUSH
38719: EMPTY
38720: LIST
38721: PPUSH
38722: CALL_OW 69
38726: ADD
38727: ST_TO_ADDR
38728: GO 38656
38730: POP
38731: POP
// for i = 1 to tmp do
38732: LD_ADDR_VAR 0 4
38736: PUSH
38737: DOUBLE
38738: LD_INT 1
38740: DEC
38741: ST_TO_ADDR
38742: LD_VAR 0 3
38746: PUSH
38747: FOR_TO
38748: IFFALSE 38836
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38750: LD_ADDR_VAR 0 5
38754: PUSH
38755: LD_VAR 0 5
38759: PUSH
38760: LD_VAR 0 3
38764: PUSH
38765: LD_VAR 0 4
38769: ARRAY
38770: PPUSH
38771: CALL_OW 266
38775: PUSH
38776: LD_VAR 0 3
38780: PUSH
38781: LD_VAR 0 4
38785: ARRAY
38786: PPUSH
38787: CALL_OW 250
38791: PUSH
38792: LD_VAR 0 3
38796: PUSH
38797: LD_VAR 0 4
38801: ARRAY
38802: PPUSH
38803: CALL_OW 251
38807: PUSH
38808: LD_VAR 0 3
38812: PUSH
38813: LD_VAR 0 4
38817: ARRAY
38818: PPUSH
38819: CALL_OW 254
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: PUSH
38830: EMPTY
38831: LIST
38832: ADD
38833: ST_TO_ADDR
38834: GO 38747
38836: POP
38837: POP
// result := list ;
38838: LD_ADDR_VAR 0 2
38842: PUSH
38843: LD_VAR 0 5
38847: ST_TO_ADDR
// end ;
38848: LD_VAR 0 2
38852: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38853: LD_INT 0
38855: PPUSH
38856: PPUSH
38857: PPUSH
38858: PPUSH
38859: PPUSH
38860: PPUSH
38861: PPUSH
// if not factory then
38862: LD_VAR 0 1
38866: NOT
38867: IFFALSE 38871
// exit ;
38869: GO 39464
// if control = control_apeman then
38871: LD_VAR 0 4
38875: PUSH
38876: LD_INT 5
38878: EQUAL
38879: IFFALSE 38988
// begin tmp := UnitsInside ( factory ) ;
38881: LD_ADDR_VAR 0 8
38885: PUSH
38886: LD_VAR 0 1
38890: PPUSH
38891: CALL_OW 313
38895: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38896: LD_VAR 0 8
38900: PPUSH
38901: LD_INT 25
38903: PUSH
38904: LD_INT 12
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PPUSH
38911: CALL_OW 72
38915: NOT
38916: IFFALSE 38926
// control := control_manual ;
38918: LD_ADDR_VAR 0 4
38922: PUSH
38923: LD_INT 1
38925: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38926: LD_ADDR_VAR 0 8
38930: PUSH
38931: LD_VAR 0 1
38935: PPUSH
38936: CALL 38623 0 1
38940: ST_TO_ADDR
// if tmp then
38941: LD_VAR 0 8
38945: IFFALSE 38988
// begin for i in tmp do
38947: LD_ADDR_VAR 0 7
38951: PUSH
38952: LD_VAR 0 8
38956: PUSH
38957: FOR_IN
38958: IFFALSE 38986
// if i [ 1 ] = b_ext_radio then
38960: LD_VAR 0 7
38964: PUSH
38965: LD_INT 1
38967: ARRAY
38968: PUSH
38969: LD_INT 22
38971: EQUAL
38972: IFFALSE 38984
// begin control := control_remote ;
38974: LD_ADDR_VAR 0 4
38978: PUSH
38979: LD_INT 2
38981: ST_TO_ADDR
// break ;
38982: GO 38986
// end ;
38984: GO 38957
38986: POP
38987: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38988: LD_VAR 0 1
38992: PPUSH
38993: LD_VAR 0 2
38997: PPUSH
38998: LD_VAR 0 3
39002: PPUSH
39003: LD_VAR 0 4
39007: PPUSH
39008: LD_VAR 0 5
39012: PPUSH
39013: CALL_OW 448
39017: IFFALSE 39052
// begin result := [ chassis , engine , control , weapon ] ;
39019: LD_ADDR_VAR 0 6
39023: PUSH
39024: LD_VAR 0 2
39028: PUSH
39029: LD_VAR 0 3
39033: PUSH
39034: LD_VAR 0 4
39038: PUSH
39039: LD_VAR 0 5
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: ST_TO_ADDR
// exit ;
39050: GO 39464
// end ; _chassis := AvailableChassisList ( factory ) ;
39052: LD_ADDR_VAR 0 9
39056: PUSH
39057: LD_VAR 0 1
39061: PPUSH
39062: CALL_OW 475
39066: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39067: LD_ADDR_VAR 0 11
39071: PUSH
39072: LD_VAR 0 1
39076: PPUSH
39077: CALL_OW 476
39081: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39082: LD_ADDR_VAR 0 12
39086: PUSH
39087: LD_VAR 0 1
39091: PPUSH
39092: CALL_OW 477
39096: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39097: LD_ADDR_VAR 0 10
39101: PUSH
39102: LD_VAR 0 1
39106: PPUSH
39107: CALL_OW 478
39111: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39112: LD_VAR 0 9
39116: NOT
39117: PUSH
39118: LD_VAR 0 11
39122: NOT
39123: OR
39124: PUSH
39125: LD_VAR 0 12
39129: NOT
39130: OR
39131: PUSH
39132: LD_VAR 0 10
39136: NOT
39137: OR
39138: IFFALSE 39173
// begin result := [ chassis , engine , control , weapon ] ;
39140: LD_ADDR_VAR 0 6
39144: PUSH
39145: LD_VAR 0 2
39149: PUSH
39150: LD_VAR 0 3
39154: PUSH
39155: LD_VAR 0 4
39159: PUSH
39160: LD_VAR 0 5
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: ST_TO_ADDR
// exit ;
39171: GO 39464
// end ; if not chassis in _chassis then
39173: LD_VAR 0 2
39177: PUSH
39178: LD_VAR 0 9
39182: IN
39183: NOT
39184: IFFALSE 39210
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39186: LD_ADDR_VAR 0 2
39190: PUSH
39191: LD_VAR 0 9
39195: PUSH
39196: LD_INT 1
39198: PPUSH
39199: LD_VAR 0 9
39203: PPUSH
39204: CALL_OW 12
39208: ARRAY
39209: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39210: LD_VAR 0 2
39214: PPUSH
39215: LD_VAR 0 3
39219: PPUSH
39220: CALL 39469 0 2
39224: NOT
39225: IFFALSE 39284
// repeat engine := _engine [ 1 ] ;
39227: LD_ADDR_VAR 0 3
39231: PUSH
39232: LD_VAR 0 11
39236: PUSH
39237: LD_INT 1
39239: ARRAY
39240: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39241: LD_ADDR_VAR 0 11
39245: PUSH
39246: LD_VAR 0 11
39250: PPUSH
39251: LD_INT 1
39253: PPUSH
39254: CALL_OW 3
39258: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39259: LD_VAR 0 2
39263: PPUSH
39264: LD_VAR 0 3
39268: PPUSH
39269: CALL 39469 0 2
39273: PUSH
39274: LD_VAR 0 11
39278: PUSH
39279: EMPTY
39280: EQUAL
39281: OR
39282: IFFALSE 39227
// if not control in _control then
39284: LD_VAR 0 4
39288: PUSH
39289: LD_VAR 0 12
39293: IN
39294: NOT
39295: IFFALSE 39321
// control := _control [ rand ( 1 , _control ) ] ;
39297: LD_ADDR_VAR 0 4
39301: PUSH
39302: LD_VAR 0 12
39306: PUSH
39307: LD_INT 1
39309: PPUSH
39310: LD_VAR 0 12
39314: PPUSH
39315: CALL_OW 12
39319: ARRAY
39320: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39321: LD_VAR 0 2
39325: PPUSH
39326: LD_VAR 0 5
39330: PPUSH
39331: CALL 39689 0 2
39335: NOT
39336: IFFALSE 39395
// repeat weapon := _weapon [ 1 ] ;
39338: LD_ADDR_VAR 0 5
39342: PUSH
39343: LD_VAR 0 10
39347: PUSH
39348: LD_INT 1
39350: ARRAY
39351: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39352: LD_ADDR_VAR 0 10
39356: PUSH
39357: LD_VAR 0 10
39361: PPUSH
39362: LD_INT 1
39364: PPUSH
39365: CALL_OW 3
39369: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39370: LD_VAR 0 2
39374: PPUSH
39375: LD_VAR 0 5
39379: PPUSH
39380: CALL 39689 0 2
39384: PUSH
39385: LD_VAR 0 10
39389: PUSH
39390: EMPTY
39391: EQUAL
39392: OR
39393: IFFALSE 39338
// result := [ ] ;
39395: LD_ADDR_VAR 0 6
39399: PUSH
39400: EMPTY
39401: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39402: LD_VAR 0 1
39406: PPUSH
39407: LD_VAR 0 2
39411: PPUSH
39412: LD_VAR 0 3
39416: PPUSH
39417: LD_VAR 0 4
39421: PPUSH
39422: LD_VAR 0 5
39426: PPUSH
39427: CALL_OW 448
39431: IFFALSE 39464
// result := [ chassis , engine , control , weapon ] ;
39433: LD_ADDR_VAR 0 6
39437: PUSH
39438: LD_VAR 0 2
39442: PUSH
39443: LD_VAR 0 3
39447: PUSH
39448: LD_VAR 0 4
39452: PUSH
39453: LD_VAR 0 5
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: ST_TO_ADDR
// end ;
39464: LD_VAR 0 6
39468: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39469: LD_INT 0
39471: PPUSH
// if not chassis or not engine then
39472: LD_VAR 0 1
39476: NOT
39477: PUSH
39478: LD_VAR 0 2
39482: NOT
39483: OR
39484: IFFALSE 39488
// exit ;
39486: GO 39684
// case engine of engine_solar :
39488: LD_VAR 0 2
39492: PUSH
39493: LD_INT 2
39495: DOUBLE
39496: EQUAL
39497: IFTRUE 39501
39499: GO 39539
39501: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39502: LD_ADDR_VAR 0 3
39506: PUSH
39507: LD_INT 11
39509: PUSH
39510: LD_INT 12
39512: PUSH
39513: LD_INT 13
39515: PUSH
39516: LD_INT 14
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: LD_INT 3
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: ST_TO_ADDR
39537: GO 39668
39539: LD_INT 1
39541: DOUBLE
39542: EQUAL
39543: IFTRUE 39547
39545: GO 39609
39547: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39548: LD_ADDR_VAR 0 3
39552: PUSH
39553: LD_INT 11
39555: PUSH
39556: LD_INT 12
39558: PUSH
39559: LD_INT 13
39561: PUSH
39562: LD_INT 14
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: LD_INT 3
39573: PUSH
39574: LD_INT 4
39576: PUSH
39577: LD_INT 5
39579: PUSH
39580: LD_INT 21
39582: PUSH
39583: LD_INT 23
39585: PUSH
39586: LD_INT 22
39588: PUSH
39589: LD_INT 24
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: ST_TO_ADDR
39607: GO 39668
39609: LD_INT 3
39611: DOUBLE
39612: EQUAL
39613: IFTRUE 39617
39615: GO 39667
39617: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39618: LD_ADDR_VAR 0 3
39622: PUSH
39623: LD_INT 13
39625: PUSH
39626: LD_INT 14
39628: PUSH
39629: LD_INT 2
39631: PUSH
39632: LD_INT 3
39634: PUSH
39635: LD_INT 4
39637: PUSH
39638: LD_INT 5
39640: PUSH
39641: LD_INT 21
39643: PUSH
39644: LD_INT 22
39646: PUSH
39647: LD_INT 23
39649: PUSH
39650: LD_INT 24
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: ST_TO_ADDR
39665: GO 39668
39667: POP
// result := ( chassis in result ) ;
39668: LD_ADDR_VAR 0 3
39672: PUSH
39673: LD_VAR 0 1
39677: PUSH
39678: LD_VAR 0 3
39682: IN
39683: ST_TO_ADDR
// end ;
39684: LD_VAR 0 3
39688: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39689: LD_INT 0
39691: PPUSH
// if not chassis or not weapon then
39692: LD_VAR 0 1
39696: NOT
39697: PUSH
39698: LD_VAR 0 2
39702: NOT
39703: OR
39704: IFFALSE 39708
// exit ;
39706: GO 40770
// case weapon of us_machine_gun :
39708: LD_VAR 0 2
39712: PUSH
39713: LD_INT 2
39715: DOUBLE
39716: EQUAL
39717: IFTRUE 39721
39719: GO 39751
39721: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39722: LD_ADDR_VAR 0 3
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: LD_INT 3
39735: PUSH
39736: LD_INT 4
39738: PUSH
39739: LD_INT 5
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: ST_TO_ADDR
39749: GO 40754
39751: LD_INT 3
39753: DOUBLE
39754: EQUAL
39755: IFTRUE 39759
39757: GO 39789
39759: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39760: LD_ADDR_VAR 0 3
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: LD_INT 2
39770: PUSH
39771: LD_INT 3
39773: PUSH
39774: LD_INT 4
39776: PUSH
39777: LD_INT 5
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: ST_TO_ADDR
39787: GO 40754
39789: LD_INT 11
39791: DOUBLE
39792: EQUAL
39793: IFTRUE 39797
39795: GO 39827
39797: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39798: LD_ADDR_VAR 0 3
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: LD_INT 3
39811: PUSH
39812: LD_INT 4
39814: PUSH
39815: LD_INT 5
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: ST_TO_ADDR
39825: GO 40754
39827: LD_INT 4
39829: DOUBLE
39830: EQUAL
39831: IFTRUE 39835
39833: GO 39861
39835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39836: LD_ADDR_VAR 0 3
39840: PUSH
39841: LD_INT 2
39843: PUSH
39844: LD_INT 3
39846: PUSH
39847: LD_INT 4
39849: PUSH
39850: LD_INT 5
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: ST_TO_ADDR
39859: GO 40754
39861: LD_INT 5
39863: DOUBLE
39864: EQUAL
39865: IFTRUE 39869
39867: GO 39895
39869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39870: LD_ADDR_VAR 0 3
39874: PUSH
39875: LD_INT 2
39877: PUSH
39878: LD_INT 3
39880: PUSH
39881: LD_INT 4
39883: PUSH
39884: LD_INT 5
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: ST_TO_ADDR
39893: GO 40754
39895: LD_INT 9
39897: DOUBLE
39898: EQUAL
39899: IFTRUE 39903
39901: GO 39929
39903: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39904: LD_ADDR_VAR 0 3
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: LD_INT 3
39914: PUSH
39915: LD_INT 4
39917: PUSH
39918: LD_INT 5
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: ST_TO_ADDR
39927: GO 40754
39929: LD_INT 7
39931: DOUBLE
39932: EQUAL
39933: IFTRUE 39937
39935: GO 39963
39937: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39938: LD_ADDR_VAR 0 3
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: LD_INT 3
39948: PUSH
39949: LD_INT 4
39951: PUSH
39952: LD_INT 5
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: ST_TO_ADDR
39961: GO 40754
39963: LD_INT 12
39965: DOUBLE
39966: EQUAL
39967: IFTRUE 39971
39969: GO 39997
39971: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39972: LD_ADDR_VAR 0 3
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: LD_INT 3
39982: PUSH
39983: LD_INT 4
39985: PUSH
39986: LD_INT 5
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: ST_TO_ADDR
39995: GO 40754
39997: LD_INT 13
39999: DOUBLE
40000: EQUAL
40001: IFTRUE 40005
40003: GO 40031
40005: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40006: LD_ADDR_VAR 0 3
40010: PUSH
40011: LD_INT 2
40013: PUSH
40014: LD_INT 3
40016: PUSH
40017: LD_INT 4
40019: PUSH
40020: LD_INT 5
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: ST_TO_ADDR
40029: GO 40754
40031: LD_INT 14
40033: DOUBLE
40034: EQUAL
40035: IFTRUE 40039
40037: GO 40057
40039: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40040: LD_ADDR_VAR 0 3
40044: PUSH
40045: LD_INT 4
40047: PUSH
40048: LD_INT 5
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: ST_TO_ADDR
40055: GO 40754
40057: LD_INT 6
40059: DOUBLE
40060: EQUAL
40061: IFTRUE 40065
40063: GO 40083
40065: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40066: LD_ADDR_VAR 0 3
40070: PUSH
40071: LD_INT 4
40073: PUSH
40074: LD_INT 5
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: ST_TO_ADDR
40081: GO 40754
40083: LD_INT 10
40085: DOUBLE
40086: EQUAL
40087: IFTRUE 40091
40089: GO 40109
40091: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40092: LD_ADDR_VAR 0 3
40096: PUSH
40097: LD_INT 4
40099: PUSH
40100: LD_INT 5
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: ST_TO_ADDR
40107: GO 40754
40109: LD_INT 22
40111: DOUBLE
40112: EQUAL
40113: IFTRUE 40117
40115: GO 40143
40117: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40118: LD_ADDR_VAR 0 3
40122: PUSH
40123: LD_INT 11
40125: PUSH
40126: LD_INT 12
40128: PUSH
40129: LD_INT 13
40131: PUSH
40132: LD_INT 14
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: ST_TO_ADDR
40141: GO 40754
40143: LD_INT 23
40145: DOUBLE
40146: EQUAL
40147: IFTRUE 40151
40149: GO 40177
40151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40152: LD_ADDR_VAR 0 3
40156: PUSH
40157: LD_INT 11
40159: PUSH
40160: LD_INT 12
40162: PUSH
40163: LD_INT 13
40165: PUSH
40166: LD_INT 14
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: ST_TO_ADDR
40175: GO 40754
40177: LD_INT 24
40179: DOUBLE
40180: EQUAL
40181: IFTRUE 40185
40183: GO 40211
40185: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40186: LD_ADDR_VAR 0 3
40190: PUSH
40191: LD_INT 11
40193: PUSH
40194: LD_INT 12
40196: PUSH
40197: LD_INT 13
40199: PUSH
40200: LD_INT 14
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: ST_TO_ADDR
40209: GO 40754
40211: LD_INT 30
40213: DOUBLE
40214: EQUAL
40215: IFTRUE 40219
40217: GO 40245
40219: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40220: LD_ADDR_VAR 0 3
40224: PUSH
40225: LD_INT 11
40227: PUSH
40228: LD_INT 12
40230: PUSH
40231: LD_INT 13
40233: PUSH
40234: LD_INT 14
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: ST_TO_ADDR
40243: GO 40754
40245: LD_INT 25
40247: DOUBLE
40248: EQUAL
40249: IFTRUE 40253
40251: GO 40271
40253: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40254: LD_ADDR_VAR 0 3
40258: PUSH
40259: LD_INT 13
40261: PUSH
40262: LD_INT 14
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: ST_TO_ADDR
40269: GO 40754
40271: LD_INT 27
40273: DOUBLE
40274: EQUAL
40275: IFTRUE 40279
40277: GO 40297
40279: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40280: LD_ADDR_VAR 0 3
40284: PUSH
40285: LD_INT 13
40287: PUSH
40288: LD_INT 14
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: ST_TO_ADDR
40295: GO 40754
40297: LD_EXP 37
40301: DOUBLE
40302: EQUAL
40303: IFTRUE 40307
40305: GO 40333
40307: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40308: LD_ADDR_VAR 0 3
40312: PUSH
40313: LD_INT 11
40315: PUSH
40316: LD_INT 12
40318: PUSH
40319: LD_INT 13
40321: PUSH
40322: LD_INT 14
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: ST_TO_ADDR
40331: GO 40754
40333: LD_INT 28
40335: DOUBLE
40336: EQUAL
40337: IFTRUE 40341
40339: GO 40359
40341: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40342: LD_ADDR_VAR 0 3
40346: PUSH
40347: LD_INT 13
40349: PUSH
40350: LD_INT 14
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: ST_TO_ADDR
40357: GO 40754
40359: LD_INT 29
40361: DOUBLE
40362: EQUAL
40363: IFTRUE 40367
40365: GO 40385
40367: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40368: LD_ADDR_VAR 0 3
40372: PUSH
40373: LD_INT 13
40375: PUSH
40376: LD_INT 14
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: ST_TO_ADDR
40383: GO 40754
40385: LD_INT 31
40387: DOUBLE
40388: EQUAL
40389: IFTRUE 40393
40391: GO 40411
40393: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40394: LD_ADDR_VAR 0 3
40398: PUSH
40399: LD_INT 13
40401: PUSH
40402: LD_INT 14
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: ST_TO_ADDR
40409: GO 40754
40411: LD_INT 26
40413: DOUBLE
40414: EQUAL
40415: IFTRUE 40419
40417: GO 40437
40419: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40420: LD_ADDR_VAR 0 3
40424: PUSH
40425: LD_INT 13
40427: PUSH
40428: LD_INT 14
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: ST_TO_ADDR
40435: GO 40754
40437: LD_INT 42
40439: DOUBLE
40440: EQUAL
40441: IFTRUE 40445
40443: GO 40471
40445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40446: LD_ADDR_VAR 0 3
40450: PUSH
40451: LD_INT 21
40453: PUSH
40454: LD_INT 22
40456: PUSH
40457: LD_INT 23
40459: PUSH
40460: LD_INT 24
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: ST_TO_ADDR
40469: GO 40754
40471: LD_INT 43
40473: DOUBLE
40474: EQUAL
40475: IFTRUE 40479
40477: GO 40505
40479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40480: LD_ADDR_VAR 0 3
40484: PUSH
40485: LD_INT 21
40487: PUSH
40488: LD_INT 22
40490: PUSH
40491: LD_INT 23
40493: PUSH
40494: LD_INT 24
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: ST_TO_ADDR
40503: GO 40754
40505: LD_INT 44
40507: DOUBLE
40508: EQUAL
40509: IFTRUE 40513
40511: GO 40539
40513: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40514: LD_ADDR_VAR 0 3
40518: PUSH
40519: LD_INT 21
40521: PUSH
40522: LD_INT 22
40524: PUSH
40525: LD_INT 23
40527: PUSH
40528: LD_INT 24
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: ST_TO_ADDR
40537: GO 40754
40539: LD_INT 45
40541: DOUBLE
40542: EQUAL
40543: IFTRUE 40547
40545: GO 40573
40547: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40548: LD_ADDR_VAR 0 3
40552: PUSH
40553: LD_INT 21
40555: PUSH
40556: LD_INT 22
40558: PUSH
40559: LD_INT 23
40561: PUSH
40562: LD_INT 24
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: ST_TO_ADDR
40571: GO 40754
40573: LD_INT 49
40575: DOUBLE
40576: EQUAL
40577: IFTRUE 40581
40579: GO 40607
40581: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40582: LD_ADDR_VAR 0 3
40586: PUSH
40587: LD_INT 21
40589: PUSH
40590: LD_INT 22
40592: PUSH
40593: LD_INT 23
40595: PUSH
40596: LD_INT 24
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: ST_TO_ADDR
40605: GO 40754
40607: LD_INT 51
40609: DOUBLE
40610: EQUAL
40611: IFTRUE 40615
40613: GO 40641
40615: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40616: LD_ADDR_VAR 0 3
40620: PUSH
40621: LD_INT 21
40623: PUSH
40624: LD_INT 22
40626: PUSH
40627: LD_INT 23
40629: PUSH
40630: LD_INT 24
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: ST_TO_ADDR
40639: GO 40754
40641: LD_INT 52
40643: DOUBLE
40644: EQUAL
40645: IFTRUE 40649
40647: GO 40675
40649: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40650: LD_ADDR_VAR 0 3
40654: PUSH
40655: LD_INT 21
40657: PUSH
40658: LD_INT 22
40660: PUSH
40661: LD_INT 23
40663: PUSH
40664: LD_INT 24
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: ST_TO_ADDR
40673: GO 40754
40675: LD_INT 53
40677: DOUBLE
40678: EQUAL
40679: IFTRUE 40683
40681: GO 40701
40683: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40684: LD_ADDR_VAR 0 3
40688: PUSH
40689: LD_INT 23
40691: PUSH
40692: LD_INT 24
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: ST_TO_ADDR
40699: GO 40754
40701: LD_INT 46
40703: DOUBLE
40704: EQUAL
40705: IFTRUE 40709
40707: GO 40727
40709: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40710: LD_ADDR_VAR 0 3
40714: PUSH
40715: LD_INT 23
40717: PUSH
40718: LD_INT 24
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: ST_TO_ADDR
40725: GO 40754
40727: LD_INT 47
40729: DOUBLE
40730: EQUAL
40731: IFTRUE 40735
40733: GO 40753
40735: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40736: LD_ADDR_VAR 0 3
40740: PUSH
40741: LD_INT 23
40743: PUSH
40744: LD_INT 24
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: ST_TO_ADDR
40751: GO 40754
40753: POP
// result := ( chassis in result ) ;
40754: LD_ADDR_VAR 0 3
40758: PUSH
40759: LD_VAR 0 1
40763: PUSH
40764: LD_VAR 0 3
40768: IN
40769: ST_TO_ADDR
// end ;
40770: LD_VAR 0 3
40774: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40775: LD_INT 0
40777: PPUSH
40778: PPUSH
40779: PPUSH
40780: PPUSH
40781: PPUSH
40782: PPUSH
40783: PPUSH
// result := array ;
40784: LD_ADDR_VAR 0 5
40788: PUSH
40789: LD_VAR 0 1
40793: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40794: LD_VAR 0 1
40798: NOT
40799: PUSH
40800: LD_VAR 0 2
40804: NOT
40805: OR
40806: PUSH
40807: LD_VAR 0 3
40811: NOT
40812: OR
40813: PUSH
40814: LD_VAR 0 2
40818: PUSH
40819: LD_VAR 0 1
40823: GREATER
40824: OR
40825: PUSH
40826: LD_VAR 0 3
40830: PUSH
40831: LD_VAR 0 1
40835: GREATER
40836: OR
40837: IFFALSE 40841
// exit ;
40839: GO 41137
// if direction then
40841: LD_VAR 0 4
40845: IFFALSE 40909
// begin d := 1 ;
40847: LD_ADDR_VAR 0 9
40851: PUSH
40852: LD_INT 1
40854: ST_TO_ADDR
// if i_from > i_to then
40855: LD_VAR 0 2
40859: PUSH
40860: LD_VAR 0 3
40864: GREATER
40865: IFFALSE 40891
// length := ( array - i_from ) + i_to else
40867: LD_ADDR_VAR 0 11
40871: PUSH
40872: LD_VAR 0 1
40876: PUSH
40877: LD_VAR 0 2
40881: MINUS
40882: PUSH
40883: LD_VAR 0 3
40887: PLUS
40888: ST_TO_ADDR
40889: GO 40907
// length := i_to - i_from ;
40891: LD_ADDR_VAR 0 11
40895: PUSH
40896: LD_VAR 0 3
40900: PUSH
40901: LD_VAR 0 2
40905: MINUS
40906: ST_TO_ADDR
// end else
40907: GO 40970
// begin d := - 1 ;
40909: LD_ADDR_VAR 0 9
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: ST_TO_ADDR
// if i_from > i_to then
40918: LD_VAR 0 2
40922: PUSH
40923: LD_VAR 0 3
40927: GREATER
40928: IFFALSE 40948
// length := i_from - i_to else
40930: LD_ADDR_VAR 0 11
40934: PUSH
40935: LD_VAR 0 2
40939: PUSH
40940: LD_VAR 0 3
40944: MINUS
40945: ST_TO_ADDR
40946: GO 40970
// length := ( array - i_to ) + i_from ;
40948: LD_ADDR_VAR 0 11
40952: PUSH
40953: LD_VAR 0 1
40957: PUSH
40958: LD_VAR 0 3
40962: MINUS
40963: PUSH
40964: LD_VAR 0 2
40968: PLUS
40969: ST_TO_ADDR
// end ; if not length then
40970: LD_VAR 0 11
40974: NOT
40975: IFFALSE 40979
// exit ;
40977: GO 41137
// tmp := array ;
40979: LD_ADDR_VAR 0 10
40983: PUSH
40984: LD_VAR 0 1
40988: ST_TO_ADDR
// for i = 1 to length do
40989: LD_ADDR_VAR 0 6
40993: PUSH
40994: DOUBLE
40995: LD_INT 1
40997: DEC
40998: ST_TO_ADDR
40999: LD_VAR 0 11
41003: PUSH
41004: FOR_TO
41005: IFFALSE 41125
// begin for j = 1 to array do
41007: LD_ADDR_VAR 0 7
41011: PUSH
41012: DOUBLE
41013: LD_INT 1
41015: DEC
41016: ST_TO_ADDR
41017: LD_VAR 0 1
41021: PUSH
41022: FOR_TO
41023: IFFALSE 41111
// begin k := j + d ;
41025: LD_ADDR_VAR 0 8
41029: PUSH
41030: LD_VAR 0 7
41034: PUSH
41035: LD_VAR 0 9
41039: PLUS
41040: ST_TO_ADDR
// if k > array then
41041: LD_VAR 0 8
41045: PUSH
41046: LD_VAR 0 1
41050: GREATER
41051: IFFALSE 41061
// k := 1 ;
41053: LD_ADDR_VAR 0 8
41057: PUSH
41058: LD_INT 1
41060: ST_TO_ADDR
// if not k then
41061: LD_VAR 0 8
41065: NOT
41066: IFFALSE 41078
// k := array ;
41068: LD_ADDR_VAR 0 8
41072: PUSH
41073: LD_VAR 0 1
41077: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41078: LD_ADDR_VAR 0 10
41082: PUSH
41083: LD_VAR 0 10
41087: PPUSH
41088: LD_VAR 0 8
41092: PPUSH
41093: LD_VAR 0 1
41097: PUSH
41098: LD_VAR 0 7
41102: ARRAY
41103: PPUSH
41104: CALL_OW 1
41108: ST_TO_ADDR
// end ;
41109: GO 41022
41111: POP
41112: POP
// array := tmp ;
41113: LD_ADDR_VAR 0 1
41117: PUSH
41118: LD_VAR 0 10
41122: ST_TO_ADDR
// end ;
41123: GO 41004
41125: POP
41126: POP
// result := array ;
41127: LD_ADDR_VAR 0 5
41131: PUSH
41132: LD_VAR 0 1
41136: ST_TO_ADDR
// end ;
41137: LD_VAR 0 5
41141: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41142: LD_INT 0
41144: PPUSH
41145: PPUSH
// result := 0 ;
41146: LD_ADDR_VAR 0 3
41150: PUSH
41151: LD_INT 0
41153: ST_TO_ADDR
// if not array or not value in array then
41154: LD_VAR 0 1
41158: NOT
41159: PUSH
41160: LD_VAR 0 2
41164: PUSH
41165: LD_VAR 0 1
41169: IN
41170: NOT
41171: OR
41172: IFFALSE 41176
// exit ;
41174: GO 41230
// for i = 1 to array do
41176: LD_ADDR_VAR 0 4
41180: PUSH
41181: DOUBLE
41182: LD_INT 1
41184: DEC
41185: ST_TO_ADDR
41186: LD_VAR 0 1
41190: PUSH
41191: FOR_TO
41192: IFFALSE 41228
// if value = array [ i ] then
41194: LD_VAR 0 2
41198: PUSH
41199: LD_VAR 0 1
41203: PUSH
41204: LD_VAR 0 4
41208: ARRAY
41209: EQUAL
41210: IFFALSE 41226
// begin result := i ;
41212: LD_ADDR_VAR 0 3
41216: PUSH
41217: LD_VAR 0 4
41221: ST_TO_ADDR
// exit ;
41222: POP
41223: POP
41224: GO 41230
// end ;
41226: GO 41191
41228: POP
41229: POP
// end ;
41230: LD_VAR 0 3
41234: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41235: LD_INT 0
41237: PPUSH
// vc_chassis := chassis ;
41238: LD_ADDR_OWVAR 37
41242: PUSH
41243: LD_VAR 0 1
41247: ST_TO_ADDR
// vc_engine := engine ;
41248: LD_ADDR_OWVAR 39
41252: PUSH
41253: LD_VAR 0 2
41257: ST_TO_ADDR
// vc_control := control ;
41258: LD_ADDR_OWVAR 38
41262: PUSH
41263: LD_VAR 0 3
41267: ST_TO_ADDR
// vc_weapon := weapon ;
41268: LD_ADDR_OWVAR 40
41272: PUSH
41273: LD_VAR 0 4
41277: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41278: LD_ADDR_OWVAR 41
41282: PUSH
41283: LD_VAR 0 5
41287: ST_TO_ADDR
// end ;
41288: LD_VAR 0 6
41292: RET
// export function WantPlant ( unit ) ; var task ; begin
41293: LD_INT 0
41295: PPUSH
41296: PPUSH
// result := false ;
41297: LD_ADDR_VAR 0 2
41301: PUSH
41302: LD_INT 0
41304: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41305: LD_ADDR_VAR 0 3
41309: PUSH
41310: LD_VAR 0 1
41314: PPUSH
41315: CALL_OW 437
41319: ST_TO_ADDR
// if task then
41320: LD_VAR 0 3
41324: IFFALSE 41352
// if task [ 1 ] [ 1 ] = p then
41326: LD_VAR 0 3
41330: PUSH
41331: LD_INT 1
41333: ARRAY
41334: PUSH
41335: LD_INT 1
41337: ARRAY
41338: PUSH
41339: LD_STRING p
41341: EQUAL
41342: IFFALSE 41352
// result := true ;
41344: LD_ADDR_VAR 0 2
41348: PUSH
41349: LD_INT 1
41351: ST_TO_ADDR
// end ;
41352: LD_VAR 0 2
41356: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41357: LD_INT 0
41359: PPUSH
41360: PPUSH
41361: PPUSH
41362: PPUSH
// if pos < 1 then
41363: LD_VAR 0 2
41367: PUSH
41368: LD_INT 1
41370: LESS
41371: IFFALSE 41375
// exit ;
41373: GO 41678
// if pos = 1 then
41375: LD_VAR 0 2
41379: PUSH
41380: LD_INT 1
41382: EQUAL
41383: IFFALSE 41416
// result := Replace ( arr , pos [ 1 ] , value ) else
41385: LD_ADDR_VAR 0 4
41389: PUSH
41390: LD_VAR 0 1
41394: PPUSH
41395: LD_VAR 0 2
41399: PUSH
41400: LD_INT 1
41402: ARRAY
41403: PPUSH
41404: LD_VAR 0 3
41408: PPUSH
41409: CALL_OW 1
41413: ST_TO_ADDR
41414: GO 41678
// begin tmp := arr ;
41416: LD_ADDR_VAR 0 6
41420: PUSH
41421: LD_VAR 0 1
41425: ST_TO_ADDR
// s_arr := [ tmp ] ;
41426: LD_ADDR_VAR 0 7
41430: PUSH
41431: LD_VAR 0 6
41435: PUSH
41436: EMPTY
41437: LIST
41438: ST_TO_ADDR
// for i = 1 to pos - 1 do
41439: LD_ADDR_VAR 0 5
41443: PUSH
41444: DOUBLE
41445: LD_INT 1
41447: DEC
41448: ST_TO_ADDR
41449: LD_VAR 0 2
41453: PUSH
41454: LD_INT 1
41456: MINUS
41457: PUSH
41458: FOR_TO
41459: IFFALSE 41504
// begin tmp := tmp [ pos [ i ] ] ;
41461: LD_ADDR_VAR 0 6
41465: PUSH
41466: LD_VAR 0 6
41470: PUSH
41471: LD_VAR 0 2
41475: PUSH
41476: LD_VAR 0 5
41480: ARRAY
41481: ARRAY
41482: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41483: LD_ADDR_VAR 0 7
41487: PUSH
41488: LD_VAR 0 7
41492: PUSH
41493: LD_VAR 0 6
41497: PUSH
41498: EMPTY
41499: LIST
41500: ADD
41501: ST_TO_ADDR
// end ;
41502: GO 41458
41504: POP
41505: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41506: LD_ADDR_VAR 0 6
41510: PUSH
41511: LD_VAR 0 6
41515: PPUSH
41516: LD_VAR 0 2
41520: PUSH
41521: LD_VAR 0 2
41525: ARRAY
41526: PPUSH
41527: LD_VAR 0 3
41531: PPUSH
41532: CALL_OW 1
41536: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41537: LD_ADDR_VAR 0 7
41541: PUSH
41542: LD_VAR 0 7
41546: PPUSH
41547: LD_VAR 0 7
41551: PPUSH
41552: LD_VAR 0 6
41556: PPUSH
41557: CALL_OW 1
41561: ST_TO_ADDR
// for i = s_arr downto 2 do
41562: LD_ADDR_VAR 0 5
41566: PUSH
41567: DOUBLE
41568: LD_VAR 0 7
41572: INC
41573: ST_TO_ADDR
41574: LD_INT 2
41576: PUSH
41577: FOR_DOWNTO
41578: IFFALSE 41662
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41580: LD_ADDR_VAR 0 6
41584: PUSH
41585: LD_VAR 0 7
41589: PUSH
41590: LD_VAR 0 5
41594: PUSH
41595: LD_INT 1
41597: MINUS
41598: ARRAY
41599: PPUSH
41600: LD_VAR 0 2
41604: PUSH
41605: LD_VAR 0 5
41609: PUSH
41610: LD_INT 1
41612: MINUS
41613: ARRAY
41614: PPUSH
41615: LD_VAR 0 7
41619: PUSH
41620: LD_VAR 0 5
41624: ARRAY
41625: PPUSH
41626: CALL_OW 1
41630: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41631: LD_ADDR_VAR 0 7
41635: PUSH
41636: LD_VAR 0 7
41640: PPUSH
41641: LD_VAR 0 5
41645: PUSH
41646: LD_INT 1
41648: MINUS
41649: PPUSH
41650: LD_VAR 0 6
41654: PPUSH
41655: CALL_OW 1
41659: ST_TO_ADDR
// end ;
41660: GO 41577
41662: POP
41663: POP
// result := s_arr [ 1 ] ;
41664: LD_ADDR_VAR 0 4
41668: PUSH
41669: LD_VAR 0 7
41673: PUSH
41674: LD_INT 1
41676: ARRAY
41677: ST_TO_ADDR
// end ; end ;
41678: LD_VAR 0 4
41682: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41683: LD_INT 0
41685: PPUSH
41686: PPUSH
// if not list then
41687: LD_VAR 0 1
41691: NOT
41692: IFFALSE 41696
// exit ;
41694: GO 41787
// i := list [ pos1 ] ;
41696: LD_ADDR_VAR 0 5
41700: PUSH
41701: LD_VAR 0 1
41705: PUSH
41706: LD_VAR 0 2
41710: ARRAY
41711: ST_TO_ADDR
// if not i then
41712: LD_VAR 0 5
41716: NOT
41717: IFFALSE 41721
// exit ;
41719: GO 41787
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41721: LD_ADDR_VAR 0 1
41725: PUSH
41726: LD_VAR 0 1
41730: PPUSH
41731: LD_VAR 0 2
41735: PPUSH
41736: LD_VAR 0 1
41740: PUSH
41741: LD_VAR 0 3
41745: ARRAY
41746: PPUSH
41747: CALL_OW 1
41751: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41752: LD_ADDR_VAR 0 1
41756: PUSH
41757: LD_VAR 0 1
41761: PPUSH
41762: LD_VAR 0 3
41766: PPUSH
41767: LD_VAR 0 5
41771: PPUSH
41772: CALL_OW 1
41776: ST_TO_ADDR
// result := list ;
41777: LD_ADDR_VAR 0 4
41781: PUSH
41782: LD_VAR 0 1
41786: ST_TO_ADDR
// end ;
41787: LD_VAR 0 4
41791: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41792: LD_INT 0
41794: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41795: LD_ADDR_VAR 0 5
41799: PUSH
41800: LD_VAR 0 1
41804: PPUSH
41805: CALL_OW 250
41809: PPUSH
41810: LD_VAR 0 1
41814: PPUSH
41815: CALL_OW 251
41819: PPUSH
41820: LD_VAR 0 2
41824: PPUSH
41825: LD_VAR 0 3
41829: PPUSH
41830: LD_VAR 0 4
41834: PPUSH
41835: CALL 41845 0 5
41839: ST_TO_ADDR
// end ;
41840: LD_VAR 0 5
41844: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41845: LD_INT 0
41847: PPUSH
41848: PPUSH
41849: PPUSH
41850: PPUSH
// if not list then
41851: LD_VAR 0 3
41855: NOT
41856: IFFALSE 41860
// exit ;
41858: GO 42248
// result := [ ] ;
41860: LD_ADDR_VAR 0 6
41864: PUSH
41865: EMPTY
41866: ST_TO_ADDR
// for i in list do
41867: LD_ADDR_VAR 0 7
41871: PUSH
41872: LD_VAR 0 3
41876: PUSH
41877: FOR_IN
41878: IFFALSE 42080
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41880: LD_ADDR_VAR 0 9
41884: PUSH
41885: LD_VAR 0 7
41889: PPUSH
41890: LD_VAR 0 1
41894: PPUSH
41895: LD_VAR 0 2
41899: PPUSH
41900: CALL_OW 297
41904: ST_TO_ADDR
// if not result then
41905: LD_VAR 0 6
41909: NOT
41910: IFFALSE 41936
// result := [ [ i , tmp ] ] else
41912: LD_ADDR_VAR 0 6
41916: PUSH
41917: LD_VAR 0 7
41921: PUSH
41922: LD_VAR 0 9
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: EMPTY
41932: LIST
41933: ST_TO_ADDR
41934: GO 42078
// begin if result [ result ] [ 2 ] < tmp then
41936: LD_VAR 0 6
41940: PUSH
41941: LD_VAR 0 6
41945: ARRAY
41946: PUSH
41947: LD_INT 2
41949: ARRAY
41950: PUSH
41951: LD_VAR 0 9
41955: LESS
41956: IFFALSE 41998
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41958: LD_ADDR_VAR 0 6
41962: PUSH
41963: LD_VAR 0 6
41967: PPUSH
41968: LD_VAR 0 6
41972: PUSH
41973: LD_INT 1
41975: PLUS
41976: PPUSH
41977: LD_VAR 0 7
41981: PUSH
41982: LD_VAR 0 9
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PPUSH
41991: CALL_OW 2
41995: ST_TO_ADDR
41996: GO 42078
// for j = 1 to result do
41998: LD_ADDR_VAR 0 8
42002: PUSH
42003: DOUBLE
42004: LD_INT 1
42006: DEC
42007: ST_TO_ADDR
42008: LD_VAR 0 6
42012: PUSH
42013: FOR_TO
42014: IFFALSE 42076
// begin if tmp < result [ j ] [ 2 ] then
42016: LD_VAR 0 9
42020: PUSH
42021: LD_VAR 0 6
42025: PUSH
42026: LD_VAR 0 8
42030: ARRAY
42031: PUSH
42032: LD_INT 2
42034: ARRAY
42035: LESS
42036: IFFALSE 42074
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42038: LD_ADDR_VAR 0 6
42042: PUSH
42043: LD_VAR 0 6
42047: PPUSH
42048: LD_VAR 0 8
42052: PPUSH
42053: LD_VAR 0 7
42057: PUSH
42058: LD_VAR 0 9
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PPUSH
42067: CALL_OW 2
42071: ST_TO_ADDR
// break ;
42072: GO 42076
// end ; end ;
42074: GO 42013
42076: POP
42077: POP
// end ; end ;
42078: GO 41877
42080: POP
42081: POP
// if result and not asc then
42082: LD_VAR 0 6
42086: PUSH
42087: LD_VAR 0 4
42091: NOT
42092: AND
42093: IFFALSE 42168
// begin tmp := result ;
42095: LD_ADDR_VAR 0 9
42099: PUSH
42100: LD_VAR 0 6
42104: ST_TO_ADDR
// for i = tmp downto 1 do
42105: LD_ADDR_VAR 0 7
42109: PUSH
42110: DOUBLE
42111: LD_VAR 0 9
42115: INC
42116: ST_TO_ADDR
42117: LD_INT 1
42119: PUSH
42120: FOR_DOWNTO
42121: IFFALSE 42166
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42123: LD_ADDR_VAR 0 6
42127: PUSH
42128: LD_VAR 0 6
42132: PPUSH
42133: LD_VAR 0 9
42137: PUSH
42138: LD_VAR 0 7
42142: MINUS
42143: PUSH
42144: LD_INT 1
42146: PLUS
42147: PPUSH
42148: LD_VAR 0 9
42152: PUSH
42153: LD_VAR 0 7
42157: ARRAY
42158: PPUSH
42159: CALL_OW 1
42163: ST_TO_ADDR
42164: GO 42120
42166: POP
42167: POP
// end ; tmp := [ ] ;
42168: LD_ADDR_VAR 0 9
42172: PUSH
42173: EMPTY
42174: ST_TO_ADDR
// if mode then
42175: LD_VAR 0 5
42179: IFFALSE 42248
// begin for i = 1 to result do
42181: LD_ADDR_VAR 0 7
42185: PUSH
42186: DOUBLE
42187: LD_INT 1
42189: DEC
42190: ST_TO_ADDR
42191: LD_VAR 0 6
42195: PUSH
42196: FOR_TO
42197: IFFALSE 42236
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42199: LD_ADDR_VAR 0 9
42203: PUSH
42204: LD_VAR 0 9
42208: PPUSH
42209: LD_VAR 0 7
42213: PPUSH
42214: LD_VAR 0 6
42218: PUSH
42219: LD_VAR 0 7
42223: ARRAY
42224: PUSH
42225: LD_INT 1
42227: ARRAY
42228: PPUSH
42229: CALL_OW 1
42233: ST_TO_ADDR
42234: GO 42196
42236: POP
42237: POP
// result := tmp ;
42238: LD_ADDR_VAR 0 6
42242: PUSH
42243: LD_VAR 0 9
42247: ST_TO_ADDR
// end ; end ;
42248: LD_VAR 0 6
42252: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42253: LD_INT 0
42255: PPUSH
42256: PPUSH
42257: PPUSH
42258: PPUSH
42259: PPUSH
42260: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42261: LD_ADDR_VAR 0 5
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: ST_TO_ADDR
// if not x or not y then
42283: LD_VAR 0 2
42287: NOT
42288: PUSH
42289: LD_VAR 0 3
42293: NOT
42294: OR
42295: IFFALSE 42299
// exit ;
42297: GO 43951
// if not range then
42299: LD_VAR 0 4
42303: NOT
42304: IFFALSE 42314
// range := 10 ;
42306: LD_ADDR_VAR 0 4
42310: PUSH
42311: LD_INT 10
42313: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42314: LD_ADDR_VAR 0 8
42318: PUSH
42319: LD_INT 81
42321: PUSH
42322: LD_VAR 0 1
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 92
42333: PUSH
42334: LD_VAR 0 2
42338: PUSH
42339: LD_VAR 0 3
42343: PUSH
42344: LD_VAR 0 4
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 3
42357: PUSH
42358: LD_INT 21
42360: PUSH
42361: LD_INT 3
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: LIST
42376: PPUSH
42377: CALL_OW 69
42381: ST_TO_ADDR
// if not tmp then
42382: LD_VAR 0 8
42386: NOT
42387: IFFALSE 42391
// exit ;
42389: GO 43951
// for i in tmp do
42391: LD_ADDR_VAR 0 6
42395: PUSH
42396: LD_VAR 0 8
42400: PUSH
42401: FOR_IN
42402: IFFALSE 43926
// begin points := [ 0 , 0 , 0 ] ;
42404: LD_ADDR_VAR 0 9
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: LIST
42422: ST_TO_ADDR
// bpoints := 1 ;
42423: LD_ADDR_VAR 0 10
42427: PUSH
42428: LD_INT 1
42430: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42431: LD_VAR 0 6
42435: PPUSH
42436: CALL_OW 247
42440: PUSH
42441: LD_INT 1
42443: DOUBLE
42444: EQUAL
42445: IFTRUE 42449
42447: GO 43027
42449: POP
// begin if GetClass ( i ) = 1 then
42450: LD_VAR 0 6
42454: PPUSH
42455: CALL_OW 257
42459: PUSH
42460: LD_INT 1
42462: EQUAL
42463: IFFALSE 42484
// points := [ 10 , 5 , 3 ] ;
42465: LD_ADDR_VAR 0 9
42469: PUSH
42470: LD_INT 10
42472: PUSH
42473: LD_INT 5
42475: PUSH
42476: LD_INT 3
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: LIST
42483: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42484: LD_VAR 0 6
42488: PPUSH
42489: CALL_OW 257
42493: PUSH
42494: LD_INT 2
42496: PUSH
42497: LD_INT 3
42499: PUSH
42500: LD_INT 4
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: LIST
42507: IN
42508: IFFALSE 42529
// points := [ 3 , 2 , 1 ] ;
42510: LD_ADDR_VAR 0 9
42514: PUSH
42515: LD_INT 3
42517: PUSH
42518: LD_INT 2
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: LIST
42528: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42529: LD_VAR 0 6
42533: PPUSH
42534: CALL_OW 257
42538: PUSH
42539: LD_INT 5
42541: EQUAL
42542: IFFALSE 42563
// points := [ 130 , 5 , 2 ] ;
42544: LD_ADDR_VAR 0 9
42548: PUSH
42549: LD_INT 130
42551: PUSH
42552: LD_INT 5
42554: PUSH
42555: LD_INT 2
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: LIST
42562: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42563: LD_VAR 0 6
42567: PPUSH
42568: CALL_OW 257
42572: PUSH
42573: LD_INT 8
42575: EQUAL
42576: IFFALSE 42597
// points := [ 35 , 35 , 30 ] ;
42578: LD_ADDR_VAR 0 9
42582: PUSH
42583: LD_INT 35
42585: PUSH
42586: LD_INT 35
42588: PUSH
42589: LD_INT 30
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: LIST
42596: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42597: LD_VAR 0 6
42601: PPUSH
42602: CALL_OW 257
42606: PUSH
42607: LD_INT 9
42609: EQUAL
42610: IFFALSE 42631
// points := [ 20 , 55 , 40 ] ;
42612: LD_ADDR_VAR 0 9
42616: PUSH
42617: LD_INT 20
42619: PUSH
42620: LD_INT 55
42622: PUSH
42623: LD_INT 40
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: LIST
42630: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42631: LD_VAR 0 6
42635: PPUSH
42636: CALL_OW 257
42640: PUSH
42641: LD_INT 12
42643: PUSH
42644: LD_INT 16
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: IN
42651: IFFALSE 42672
// points := [ 5 , 3 , 2 ] ;
42653: LD_ADDR_VAR 0 9
42657: PUSH
42658: LD_INT 5
42660: PUSH
42661: LD_INT 3
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: LIST
42671: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42672: LD_VAR 0 6
42676: PPUSH
42677: CALL_OW 257
42681: PUSH
42682: LD_INT 17
42684: EQUAL
42685: IFFALSE 42706
// points := [ 100 , 50 , 75 ] ;
42687: LD_ADDR_VAR 0 9
42691: PUSH
42692: LD_INT 100
42694: PUSH
42695: LD_INT 50
42697: PUSH
42698: LD_INT 75
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: LIST
42705: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42706: LD_VAR 0 6
42710: PPUSH
42711: CALL_OW 257
42715: PUSH
42716: LD_INT 15
42718: EQUAL
42719: IFFALSE 42740
// points := [ 10 , 5 , 3 ] ;
42721: LD_ADDR_VAR 0 9
42725: PUSH
42726: LD_INT 10
42728: PUSH
42729: LD_INT 5
42731: PUSH
42732: LD_INT 3
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42740: LD_VAR 0 6
42744: PPUSH
42745: CALL_OW 257
42749: PUSH
42750: LD_INT 14
42752: EQUAL
42753: IFFALSE 42774
// points := [ 10 , 0 , 0 ] ;
42755: LD_ADDR_VAR 0 9
42759: PUSH
42760: LD_INT 10
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42774: LD_VAR 0 6
42778: PPUSH
42779: CALL_OW 257
42783: PUSH
42784: LD_INT 11
42786: EQUAL
42787: IFFALSE 42808
// points := [ 30 , 10 , 5 ] ;
42789: LD_ADDR_VAR 0 9
42793: PUSH
42794: LD_INT 30
42796: PUSH
42797: LD_INT 10
42799: PUSH
42800: LD_INT 5
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: LIST
42807: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42808: LD_VAR 0 1
42812: PPUSH
42813: LD_INT 5
42815: PPUSH
42816: CALL_OW 321
42820: PUSH
42821: LD_INT 2
42823: EQUAL
42824: IFFALSE 42841
// bpoints := bpoints * 1.8 ;
42826: LD_ADDR_VAR 0 10
42830: PUSH
42831: LD_VAR 0 10
42835: PUSH
42836: LD_REAL  1.80000000000000E+0000
42839: MUL
42840: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42841: LD_VAR 0 6
42845: PPUSH
42846: CALL_OW 257
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: LD_INT 3
42859: PUSH
42860: LD_INT 4
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: IN
42869: PUSH
42870: LD_VAR 0 1
42874: PPUSH
42875: LD_INT 51
42877: PPUSH
42878: CALL_OW 321
42882: PUSH
42883: LD_INT 2
42885: EQUAL
42886: AND
42887: IFFALSE 42904
// bpoints := bpoints * 1.2 ;
42889: LD_ADDR_VAR 0 10
42893: PUSH
42894: LD_VAR 0 10
42898: PUSH
42899: LD_REAL  1.20000000000000E+0000
42902: MUL
42903: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42904: LD_VAR 0 6
42908: PPUSH
42909: CALL_OW 257
42913: PUSH
42914: LD_INT 5
42916: PUSH
42917: LD_INT 7
42919: PUSH
42920: LD_INT 9
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: IN
42928: PUSH
42929: LD_VAR 0 1
42933: PPUSH
42934: LD_INT 52
42936: PPUSH
42937: CALL_OW 321
42941: PUSH
42942: LD_INT 2
42944: EQUAL
42945: AND
42946: IFFALSE 42963
// bpoints := bpoints * 1.5 ;
42948: LD_ADDR_VAR 0 10
42952: PUSH
42953: LD_VAR 0 10
42957: PUSH
42958: LD_REAL  1.50000000000000E+0000
42961: MUL
42962: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42963: LD_VAR 0 1
42967: PPUSH
42968: LD_INT 66
42970: PPUSH
42971: CALL_OW 321
42975: PUSH
42976: LD_INT 2
42978: EQUAL
42979: IFFALSE 42996
// bpoints := bpoints * 1.1 ;
42981: LD_ADDR_VAR 0 10
42985: PUSH
42986: LD_VAR 0 10
42990: PUSH
42991: LD_REAL  1.10000000000000E+0000
42994: MUL
42995: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42996: LD_ADDR_VAR 0 10
43000: PUSH
43001: LD_VAR 0 10
43005: PUSH
43006: LD_VAR 0 6
43010: PPUSH
43011: LD_INT 1
43013: PPUSH
43014: CALL_OW 259
43018: PUSH
43019: LD_REAL  1.15000000000000E+0000
43022: MUL
43023: MUL
43024: ST_TO_ADDR
// end ; unit_vehicle :
43025: GO 43855
43027: LD_INT 2
43029: DOUBLE
43030: EQUAL
43031: IFTRUE 43035
43033: GO 43843
43035: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43036: LD_VAR 0 6
43040: PPUSH
43041: CALL_OW 264
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: LD_INT 42
43051: PUSH
43052: LD_INT 24
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: LIST
43059: IN
43060: IFFALSE 43081
// points := [ 25 , 5 , 3 ] ;
43062: LD_ADDR_VAR 0 9
43066: PUSH
43067: LD_INT 25
43069: PUSH
43070: LD_INT 5
43072: PUSH
43073: LD_INT 3
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: LIST
43080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43081: LD_VAR 0 6
43085: PPUSH
43086: CALL_OW 264
43090: PUSH
43091: LD_INT 4
43093: PUSH
43094: LD_INT 43
43096: PUSH
43097: LD_INT 25
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: IN
43105: IFFALSE 43126
// points := [ 40 , 15 , 5 ] ;
43107: LD_ADDR_VAR 0 9
43111: PUSH
43112: LD_INT 40
43114: PUSH
43115: LD_INT 15
43117: PUSH
43118: LD_INT 5
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: LIST
43125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43126: LD_VAR 0 6
43130: PPUSH
43131: CALL_OW 264
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: LD_INT 23
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: IN
43146: IFFALSE 43167
// points := [ 7 , 25 , 8 ] ;
43148: LD_ADDR_VAR 0 9
43152: PUSH
43153: LD_INT 7
43155: PUSH
43156: LD_INT 25
43158: PUSH
43159: LD_INT 8
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43167: LD_VAR 0 6
43171: PPUSH
43172: CALL_OW 264
43176: PUSH
43177: LD_INT 5
43179: PUSH
43180: LD_INT 27
43182: PUSH
43183: LD_INT 44
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: LIST
43190: IN
43191: IFFALSE 43212
// points := [ 14 , 50 , 16 ] ;
43193: LD_ADDR_VAR 0 9
43197: PUSH
43198: LD_INT 14
43200: PUSH
43201: LD_INT 50
43203: PUSH
43204: LD_INT 16
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43212: LD_VAR 0 6
43216: PPUSH
43217: CALL_OW 264
43221: PUSH
43222: LD_INT 6
43224: PUSH
43225: LD_INT 46
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: IN
43232: IFFALSE 43253
// points := [ 32 , 120 , 70 ] ;
43234: LD_ADDR_VAR 0 9
43238: PUSH
43239: LD_INT 32
43241: PUSH
43242: LD_INT 120
43244: PUSH
43245: LD_INT 70
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: LIST
43252: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43253: LD_VAR 0 6
43257: PPUSH
43258: CALL_OW 264
43262: PUSH
43263: LD_INT 7
43265: PUSH
43266: LD_INT 28
43268: PUSH
43269: LD_INT 45
43271: PUSH
43272: LD_EXP 37
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: IN
43283: IFFALSE 43304
// points := [ 35 , 20 , 45 ] ;
43285: LD_ADDR_VAR 0 9
43289: PUSH
43290: LD_INT 35
43292: PUSH
43293: LD_INT 20
43295: PUSH
43296: LD_INT 45
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43304: LD_VAR 0 6
43308: PPUSH
43309: CALL_OW 264
43313: PUSH
43314: LD_INT 47
43316: PUSH
43317: EMPTY
43318: LIST
43319: IN
43320: IFFALSE 43341
// points := [ 67 , 45 , 75 ] ;
43322: LD_ADDR_VAR 0 9
43326: PUSH
43327: LD_INT 67
43329: PUSH
43330: LD_INT 45
43332: PUSH
43333: LD_INT 75
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: LIST
43340: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43341: LD_VAR 0 6
43345: PPUSH
43346: CALL_OW 264
43350: PUSH
43351: LD_INT 26
43353: PUSH
43354: EMPTY
43355: LIST
43356: IN
43357: IFFALSE 43378
// points := [ 120 , 30 , 80 ] ;
43359: LD_ADDR_VAR 0 9
43363: PUSH
43364: LD_INT 120
43366: PUSH
43367: LD_INT 30
43369: PUSH
43370: LD_INT 80
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: LIST
43377: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43378: LD_VAR 0 6
43382: PPUSH
43383: CALL_OW 264
43387: PUSH
43388: LD_INT 22
43390: PUSH
43391: EMPTY
43392: LIST
43393: IN
43394: IFFALSE 43415
// points := [ 40 , 1 , 1 ] ;
43396: LD_ADDR_VAR 0 9
43400: PUSH
43401: LD_INT 40
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: LIST
43414: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43415: LD_VAR 0 6
43419: PPUSH
43420: CALL_OW 264
43424: PUSH
43425: LD_INT 29
43427: PUSH
43428: EMPTY
43429: LIST
43430: IN
43431: IFFALSE 43452
// points := [ 70 , 200 , 400 ] ;
43433: LD_ADDR_VAR 0 9
43437: PUSH
43438: LD_INT 70
43440: PUSH
43441: LD_INT 200
43443: PUSH
43444: LD_INT 400
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: LIST
43451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43452: LD_VAR 0 6
43456: PPUSH
43457: CALL_OW 264
43461: PUSH
43462: LD_INT 14
43464: PUSH
43465: LD_INT 53
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: IN
43472: IFFALSE 43493
// points := [ 40 , 10 , 20 ] ;
43474: LD_ADDR_VAR 0 9
43478: PUSH
43479: LD_INT 40
43481: PUSH
43482: LD_INT 10
43484: PUSH
43485: LD_INT 20
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: LIST
43492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43493: LD_VAR 0 6
43497: PPUSH
43498: CALL_OW 264
43502: PUSH
43503: LD_INT 9
43505: PUSH
43506: EMPTY
43507: LIST
43508: IN
43509: IFFALSE 43530
// points := [ 5 , 70 , 20 ] ;
43511: LD_ADDR_VAR 0 9
43515: PUSH
43516: LD_INT 5
43518: PUSH
43519: LD_INT 70
43521: PUSH
43522: LD_INT 20
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: LIST
43529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43530: LD_VAR 0 6
43534: PPUSH
43535: CALL_OW 264
43539: PUSH
43540: LD_INT 10
43542: PUSH
43543: EMPTY
43544: LIST
43545: IN
43546: IFFALSE 43567
// points := [ 35 , 110 , 70 ] ;
43548: LD_ADDR_VAR 0 9
43552: PUSH
43553: LD_INT 35
43555: PUSH
43556: LD_INT 110
43558: PUSH
43559: LD_INT 70
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: LIST
43566: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43567: LD_VAR 0 6
43571: PPUSH
43572: CALL_OW 265
43576: PUSH
43577: LD_INT 25
43579: EQUAL
43580: IFFALSE 43601
// points := [ 80 , 65 , 100 ] ;
43582: LD_ADDR_VAR 0 9
43586: PUSH
43587: LD_INT 80
43589: PUSH
43590: LD_INT 65
43592: PUSH
43593: LD_INT 100
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: LIST
43600: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43601: LD_VAR 0 6
43605: PPUSH
43606: CALL_OW 263
43610: PUSH
43611: LD_INT 1
43613: EQUAL
43614: IFFALSE 43649
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43616: LD_ADDR_VAR 0 10
43620: PUSH
43621: LD_VAR 0 10
43625: PUSH
43626: LD_VAR 0 6
43630: PPUSH
43631: CALL_OW 311
43635: PPUSH
43636: LD_INT 3
43638: PPUSH
43639: CALL_OW 259
43643: PUSH
43644: LD_INT 4
43646: MUL
43647: MUL
43648: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43649: LD_VAR 0 6
43653: PPUSH
43654: CALL_OW 263
43658: PUSH
43659: LD_INT 2
43661: EQUAL
43662: IFFALSE 43713
// begin j := IsControledBy ( i ) ;
43664: LD_ADDR_VAR 0 7
43668: PUSH
43669: LD_VAR 0 6
43673: PPUSH
43674: CALL_OW 312
43678: ST_TO_ADDR
// if j then
43679: LD_VAR 0 7
43683: IFFALSE 43713
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43685: LD_ADDR_VAR 0 10
43689: PUSH
43690: LD_VAR 0 10
43694: PUSH
43695: LD_VAR 0 7
43699: PPUSH
43700: LD_INT 3
43702: PPUSH
43703: CALL_OW 259
43707: PUSH
43708: LD_INT 3
43710: MUL
43711: MUL
43712: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43713: LD_VAR 0 6
43717: PPUSH
43718: CALL_OW 264
43722: PUSH
43723: LD_INT 5
43725: PUSH
43726: LD_INT 6
43728: PUSH
43729: LD_INT 46
43731: PUSH
43732: LD_INT 44
43734: PUSH
43735: LD_INT 47
43737: PUSH
43738: LD_INT 45
43740: PUSH
43741: LD_INT 28
43743: PUSH
43744: LD_INT 7
43746: PUSH
43747: LD_INT 27
43749: PUSH
43750: LD_INT 29
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: IN
43765: PUSH
43766: LD_VAR 0 1
43770: PPUSH
43771: LD_INT 52
43773: PPUSH
43774: CALL_OW 321
43778: PUSH
43779: LD_INT 2
43781: EQUAL
43782: AND
43783: IFFALSE 43800
// bpoints := bpoints * 1.2 ;
43785: LD_ADDR_VAR 0 10
43789: PUSH
43790: LD_VAR 0 10
43794: PUSH
43795: LD_REAL  1.20000000000000E+0000
43798: MUL
43799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43800: LD_VAR 0 6
43804: PPUSH
43805: CALL_OW 264
43809: PUSH
43810: LD_INT 6
43812: PUSH
43813: LD_INT 46
43815: PUSH
43816: LD_INT 47
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: LIST
43823: IN
43824: IFFALSE 43841
// bpoints := bpoints * 1.2 ;
43826: LD_ADDR_VAR 0 10
43830: PUSH
43831: LD_VAR 0 10
43835: PUSH
43836: LD_REAL  1.20000000000000E+0000
43839: MUL
43840: ST_TO_ADDR
// end ; unit_building :
43841: GO 43855
43843: LD_INT 3
43845: DOUBLE
43846: EQUAL
43847: IFTRUE 43851
43849: GO 43854
43851: POP
// ; end ;
43852: GO 43855
43854: POP
// for j = 1 to 3 do
43855: LD_ADDR_VAR 0 7
43859: PUSH
43860: DOUBLE
43861: LD_INT 1
43863: DEC
43864: ST_TO_ADDR
43865: LD_INT 3
43867: PUSH
43868: FOR_TO
43869: IFFALSE 43922
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43871: LD_ADDR_VAR 0 5
43875: PUSH
43876: LD_VAR 0 5
43880: PPUSH
43881: LD_VAR 0 7
43885: PPUSH
43886: LD_VAR 0 5
43890: PUSH
43891: LD_VAR 0 7
43895: ARRAY
43896: PUSH
43897: LD_VAR 0 9
43901: PUSH
43902: LD_VAR 0 7
43906: ARRAY
43907: PUSH
43908: LD_VAR 0 10
43912: MUL
43913: PLUS
43914: PPUSH
43915: CALL_OW 1
43919: ST_TO_ADDR
43920: GO 43868
43922: POP
43923: POP
// end ;
43924: GO 42401
43926: POP
43927: POP
// result := Replace ( result , 4 , tmp ) ;
43928: LD_ADDR_VAR 0 5
43932: PUSH
43933: LD_VAR 0 5
43937: PPUSH
43938: LD_INT 4
43940: PPUSH
43941: LD_VAR 0 8
43945: PPUSH
43946: CALL_OW 1
43950: ST_TO_ADDR
// end ;
43951: LD_VAR 0 5
43955: RET
// export function DangerAtRange ( unit , range ) ; begin
43956: LD_INT 0
43958: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43959: LD_ADDR_VAR 0 3
43963: PUSH
43964: LD_VAR 0 1
43968: PPUSH
43969: CALL_OW 255
43973: PPUSH
43974: LD_VAR 0 1
43978: PPUSH
43979: CALL_OW 250
43983: PPUSH
43984: LD_VAR 0 1
43988: PPUSH
43989: CALL_OW 251
43993: PPUSH
43994: LD_VAR 0 2
43998: PPUSH
43999: CALL 42253 0 4
44003: ST_TO_ADDR
// end ;
44004: LD_VAR 0 3
44008: RET
// export function DangerInArea ( side , area ) ; begin
44009: LD_INT 0
44011: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44012: LD_ADDR_VAR 0 3
44016: PUSH
44017: LD_VAR 0 2
44021: PPUSH
44022: LD_INT 81
44024: PUSH
44025: LD_VAR 0 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PPUSH
44034: CALL_OW 70
44038: ST_TO_ADDR
// end ;
44039: LD_VAR 0 3
44043: RET
// export function IsExtension ( b ) ; begin
44044: LD_INT 0
44046: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44047: LD_ADDR_VAR 0 2
44051: PUSH
44052: LD_VAR 0 1
44056: PUSH
44057: LD_INT 23
44059: PUSH
44060: LD_INT 20
44062: PUSH
44063: LD_INT 22
44065: PUSH
44066: LD_INT 17
44068: PUSH
44069: LD_INT 24
44071: PUSH
44072: LD_INT 21
44074: PUSH
44075: LD_INT 19
44077: PUSH
44078: LD_INT 16
44080: PUSH
44081: LD_INT 25
44083: PUSH
44084: LD_INT 18
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: IN
44099: ST_TO_ADDR
// end ;
44100: LD_VAR 0 2
44104: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44105: LD_INT 0
44107: PPUSH
44108: PPUSH
44109: PPUSH
// result := [ ] ;
44110: LD_ADDR_VAR 0 4
44114: PUSH
44115: EMPTY
44116: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44117: LD_ADDR_VAR 0 5
44121: PUSH
44122: LD_VAR 0 2
44126: PPUSH
44127: LD_INT 21
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PPUSH
44137: CALL_OW 70
44141: ST_TO_ADDR
// if not tmp then
44142: LD_VAR 0 5
44146: NOT
44147: IFFALSE 44151
// exit ;
44149: GO 44215
// if checkLink then
44151: LD_VAR 0 3
44155: IFFALSE 44205
// begin for i in tmp do
44157: LD_ADDR_VAR 0 6
44161: PUSH
44162: LD_VAR 0 5
44166: PUSH
44167: FOR_IN
44168: IFFALSE 44203
// if GetBase ( i ) <> base then
44170: LD_VAR 0 6
44174: PPUSH
44175: CALL_OW 274
44179: PUSH
44180: LD_VAR 0 1
44184: NONEQUAL
44185: IFFALSE 44201
// ComLinkToBase ( base , i ) ;
44187: LD_VAR 0 1
44191: PPUSH
44192: LD_VAR 0 6
44196: PPUSH
44197: CALL_OW 169
44201: GO 44167
44203: POP
44204: POP
// end ; result := tmp ;
44205: LD_ADDR_VAR 0 4
44209: PUSH
44210: LD_VAR 0 5
44214: ST_TO_ADDR
// end ;
44215: LD_VAR 0 4
44219: RET
// export function ComComplete ( units , b ) ; var i ; begin
44220: LD_INT 0
44222: PPUSH
44223: PPUSH
// if not units then
44224: LD_VAR 0 1
44228: NOT
44229: IFFALSE 44233
// exit ;
44231: GO 44323
// for i in units do
44233: LD_ADDR_VAR 0 4
44237: PUSH
44238: LD_VAR 0 1
44242: PUSH
44243: FOR_IN
44244: IFFALSE 44321
// if BuildingStatus ( b ) = bs_build then
44246: LD_VAR 0 2
44250: PPUSH
44251: CALL_OW 461
44255: PUSH
44256: LD_INT 1
44258: EQUAL
44259: IFFALSE 44319
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44261: LD_VAR 0 4
44265: PPUSH
44266: LD_STRING h
44268: PUSH
44269: LD_VAR 0 2
44273: PPUSH
44274: CALL_OW 250
44278: PUSH
44279: LD_VAR 0 2
44283: PPUSH
44284: CALL_OW 251
44288: PUSH
44289: LD_VAR 0 2
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: PUSH
44312: EMPTY
44313: LIST
44314: PPUSH
44315: CALL_OW 446
44319: GO 44243
44321: POP
44322: POP
// end ;
44323: LD_VAR 0 3
44327: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44328: LD_INT 0
44330: PPUSH
44331: PPUSH
44332: PPUSH
44333: PPUSH
44334: PPUSH
44335: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44336: LD_VAR 0 1
44340: NOT
44341: PUSH
44342: LD_VAR 0 1
44346: PPUSH
44347: CALL_OW 263
44351: PUSH
44352: LD_INT 2
44354: NONEQUAL
44355: OR
44356: IFFALSE 44360
// exit ;
44358: GO 44676
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44360: LD_ADDR_VAR 0 6
44364: PUSH
44365: LD_INT 22
44367: PUSH
44368: LD_VAR 0 1
44372: PPUSH
44373: CALL_OW 255
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: LD_INT 30
44387: PUSH
44388: LD_INT 36
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 34
44397: PUSH
44398: LD_INT 31
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: LIST
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PPUSH
44414: CALL_OW 69
44418: ST_TO_ADDR
// if not tmp then
44419: LD_VAR 0 6
44423: NOT
44424: IFFALSE 44428
// exit ;
44426: GO 44676
// result := [ ] ;
44428: LD_ADDR_VAR 0 2
44432: PUSH
44433: EMPTY
44434: ST_TO_ADDR
// for i in tmp do
44435: LD_ADDR_VAR 0 3
44439: PUSH
44440: LD_VAR 0 6
44444: PUSH
44445: FOR_IN
44446: IFFALSE 44517
// begin t := UnitsInside ( i ) ;
44448: LD_ADDR_VAR 0 4
44452: PUSH
44453: LD_VAR 0 3
44457: PPUSH
44458: CALL_OW 313
44462: ST_TO_ADDR
// if t then
44463: LD_VAR 0 4
44467: IFFALSE 44515
// for j in t do
44469: LD_ADDR_VAR 0 7
44473: PUSH
44474: LD_VAR 0 4
44478: PUSH
44479: FOR_IN
44480: IFFALSE 44513
// result := Replace ( result , result + 1 , j ) ;
44482: LD_ADDR_VAR 0 2
44486: PUSH
44487: LD_VAR 0 2
44491: PPUSH
44492: LD_VAR 0 2
44496: PUSH
44497: LD_INT 1
44499: PLUS
44500: PPUSH
44501: LD_VAR 0 7
44505: PPUSH
44506: CALL_OW 1
44510: ST_TO_ADDR
44511: GO 44479
44513: POP
44514: POP
// end ;
44515: GO 44445
44517: POP
44518: POP
// if not result then
44519: LD_VAR 0 2
44523: NOT
44524: IFFALSE 44528
// exit ;
44526: GO 44676
// mech := result [ 1 ] ;
44528: LD_ADDR_VAR 0 5
44532: PUSH
44533: LD_VAR 0 2
44537: PUSH
44538: LD_INT 1
44540: ARRAY
44541: ST_TO_ADDR
// if result > 1 then
44542: LD_VAR 0 2
44546: PUSH
44547: LD_INT 1
44549: GREATER
44550: IFFALSE 44662
// begin for i = 2 to result do
44552: LD_ADDR_VAR 0 3
44556: PUSH
44557: DOUBLE
44558: LD_INT 2
44560: DEC
44561: ST_TO_ADDR
44562: LD_VAR 0 2
44566: PUSH
44567: FOR_TO
44568: IFFALSE 44660
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44570: LD_ADDR_VAR 0 4
44574: PUSH
44575: LD_VAR 0 2
44579: PUSH
44580: LD_VAR 0 3
44584: ARRAY
44585: PPUSH
44586: LD_INT 3
44588: PPUSH
44589: CALL_OW 259
44593: PUSH
44594: LD_VAR 0 2
44598: PUSH
44599: LD_VAR 0 3
44603: ARRAY
44604: PPUSH
44605: CALL_OW 432
44609: MINUS
44610: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44611: LD_VAR 0 4
44615: PUSH
44616: LD_VAR 0 5
44620: PPUSH
44621: LD_INT 3
44623: PPUSH
44624: CALL_OW 259
44628: PUSH
44629: LD_VAR 0 5
44633: PPUSH
44634: CALL_OW 432
44638: MINUS
44639: GREATEREQUAL
44640: IFFALSE 44658
// mech := result [ i ] ;
44642: LD_ADDR_VAR 0 5
44646: PUSH
44647: LD_VAR 0 2
44651: PUSH
44652: LD_VAR 0 3
44656: ARRAY
44657: ST_TO_ADDR
// end ;
44658: GO 44567
44660: POP
44661: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44662: LD_VAR 0 1
44666: PPUSH
44667: LD_VAR 0 5
44671: PPUSH
44672: CALL_OW 135
// end ;
44676: LD_VAR 0 2
44680: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44681: LD_INT 0
44683: PPUSH
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
44691: PPUSH
44692: PPUSH
44693: PPUSH
44694: PPUSH
44695: PPUSH
// result := [ ] ;
44696: LD_ADDR_VAR 0 7
44700: PUSH
44701: EMPTY
44702: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44703: LD_VAR 0 1
44707: PPUSH
44708: CALL_OW 266
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: IN
44723: NOT
44724: IFFALSE 44728
// exit ;
44726: GO 46362
// if name then
44728: LD_VAR 0 3
44732: IFFALSE 44748
// SetBName ( base_dep , name ) ;
44734: LD_VAR 0 1
44738: PPUSH
44739: LD_VAR 0 3
44743: PPUSH
44744: CALL_OW 500
// base := GetBase ( base_dep ) ;
44748: LD_ADDR_VAR 0 15
44752: PUSH
44753: LD_VAR 0 1
44757: PPUSH
44758: CALL_OW 274
44762: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44763: LD_ADDR_VAR 0 16
44767: PUSH
44768: LD_VAR 0 1
44772: PPUSH
44773: CALL_OW 255
44777: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44778: LD_ADDR_VAR 0 17
44782: PUSH
44783: LD_VAR 0 1
44787: PPUSH
44788: CALL_OW 248
44792: ST_TO_ADDR
// if sources then
44793: LD_VAR 0 5
44797: IFFALSE 44844
// for i = 1 to 3 do
44799: LD_ADDR_VAR 0 8
44803: PUSH
44804: DOUBLE
44805: LD_INT 1
44807: DEC
44808: ST_TO_ADDR
44809: LD_INT 3
44811: PUSH
44812: FOR_TO
44813: IFFALSE 44842
// AddResourceType ( base , i , sources [ i ] ) ;
44815: LD_VAR 0 15
44819: PPUSH
44820: LD_VAR 0 8
44824: PPUSH
44825: LD_VAR 0 5
44829: PUSH
44830: LD_VAR 0 8
44834: ARRAY
44835: PPUSH
44836: CALL_OW 276
44840: GO 44812
44842: POP
44843: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44844: LD_ADDR_VAR 0 18
44848: PUSH
44849: LD_VAR 0 15
44853: PPUSH
44854: LD_VAR 0 2
44858: PPUSH
44859: LD_INT 1
44861: PPUSH
44862: CALL 44105 0 3
44866: ST_TO_ADDR
// InitHc ;
44867: CALL_OW 19
// InitUc ;
44871: CALL_OW 18
// uc_side := side ;
44875: LD_ADDR_OWVAR 20
44879: PUSH
44880: LD_VAR 0 16
44884: ST_TO_ADDR
// uc_nation := nation ;
44885: LD_ADDR_OWVAR 21
44889: PUSH
44890: LD_VAR 0 17
44894: ST_TO_ADDR
// if buildings then
44895: LD_VAR 0 18
44899: IFFALSE 46221
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44901: LD_ADDR_VAR 0 19
44905: PUSH
44906: LD_VAR 0 18
44910: PPUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 30
44916: PUSH
44917: LD_INT 29
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 30
44926: PUSH
44927: LD_INT 30
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: LIST
44938: PPUSH
44939: CALL_OW 72
44943: ST_TO_ADDR
// if tmp then
44944: LD_VAR 0 19
44948: IFFALSE 44996
// for i in tmp do
44950: LD_ADDR_VAR 0 8
44954: PUSH
44955: LD_VAR 0 19
44959: PUSH
44960: FOR_IN
44961: IFFALSE 44994
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44963: LD_VAR 0 8
44967: PPUSH
44968: CALL_OW 250
44972: PPUSH
44973: LD_VAR 0 8
44977: PPUSH
44978: CALL_OW 251
44982: PPUSH
44983: LD_VAR 0 16
44987: PPUSH
44988: CALL_OW 441
44992: GO 44960
44994: POP
44995: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44996: LD_VAR 0 18
45000: PPUSH
45001: LD_INT 2
45003: PUSH
45004: LD_INT 30
45006: PUSH
45007: LD_INT 32
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 30
45016: PUSH
45017: LD_INT 33
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: LIST
45028: PPUSH
45029: CALL_OW 72
45033: IFFALSE 45121
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45035: LD_ADDR_VAR 0 8
45039: PUSH
45040: LD_VAR 0 18
45044: PPUSH
45045: LD_INT 2
45047: PUSH
45048: LD_INT 30
45050: PUSH
45051: LD_INT 32
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 30
45060: PUSH
45061: LD_INT 33
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: LIST
45072: PPUSH
45073: CALL_OW 72
45077: PUSH
45078: FOR_IN
45079: IFFALSE 45119
// begin if not GetBWeapon ( i ) then
45081: LD_VAR 0 8
45085: PPUSH
45086: CALL_OW 269
45090: NOT
45091: IFFALSE 45117
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45093: LD_VAR 0 8
45097: PPUSH
45098: LD_VAR 0 8
45102: PPUSH
45103: LD_VAR 0 2
45107: PPUSH
45108: CALL 46367 0 2
45112: PPUSH
45113: CALL_OW 431
// end ;
45117: GO 45078
45119: POP
45120: POP
// end ; for i = 1 to personel do
45121: LD_ADDR_VAR 0 8
45125: PUSH
45126: DOUBLE
45127: LD_INT 1
45129: DEC
45130: ST_TO_ADDR
45131: LD_VAR 0 6
45135: PUSH
45136: FOR_TO
45137: IFFALSE 46201
// begin if i > 4 then
45139: LD_VAR 0 8
45143: PUSH
45144: LD_INT 4
45146: GREATER
45147: IFFALSE 45151
// break ;
45149: GO 46201
// case i of 1 :
45151: LD_VAR 0 8
45155: PUSH
45156: LD_INT 1
45158: DOUBLE
45159: EQUAL
45160: IFTRUE 45164
45162: GO 45244
45164: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45165: LD_ADDR_VAR 0 12
45169: PUSH
45170: LD_VAR 0 18
45174: PPUSH
45175: LD_INT 22
45177: PUSH
45178: LD_VAR 0 16
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 58
45189: PUSH
45190: EMPTY
45191: LIST
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: LD_INT 30
45198: PUSH
45199: LD_INT 32
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 30
45208: PUSH
45209: LD_INT 4
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 30
45218: PUSH
45219: LD_INT 5
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: LIST
45236: PPUSH
45237: CALL_OW 72
45241: ST_TO_ADDR
45242: GO 45466
45244: LD_INT 2
45246: DOUBLE
45247: EQUAL
45248: IFTRUE 45252
45250: GO 45314
45252: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45253: LD_ADDR_VAR 0 12
45257: PUSH
45258: LD_VAR 0 18
45262: PPUSH
45263: LD_INT 22
45265: PUSH
45266: LD_VAR 0 16
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: LD_INT 30
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 30
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: LIST
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PPUSH
45307: CALL_OW 72
45311: ST_TO_ADDR
45312: GO 45466
45314: LD_INT 3
45316: DOUBLE
45317: EQUAL
45318: IFTRUE 45322
45320: GO 45384
45322: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45323: LD_ADDR_VAR 0 12
45327: PUSH
45328: LD_VAR 0 18
45332: PPUSH
45333: LD_INT 22
45335: PUSH
45336: LD_VAR 0 16
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: LD_INT 30
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 30
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: LIST
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PPUSH
45377: CALL_OW 72
45381: ST_TO_ADDR
45382: GO 45466
45384: LD_INT 4
45386: DOUBLE
45387: EQUAL
45388: IFTRUE 45392
45390: GO 45465
45392: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45393: LD_ADDR_VAR 0 12
45397: PUSH
45398: LD_VAR 0 18
45402: PPUSH
45403: LD_INT 22
45405: PUSH
45406: LD_VAR 0 16
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: LD_INT 30
45420: PUSH
45421: LD_INT 6
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 30
45430: PUSH
45431: LD_INT 7
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 30
45440: PUSH
45441: LD_INT 8
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PPUSH
45458: CALL_OW 72
45462: ST_TO_ADDR
45463: GO 45466
45465: POP
// if i = 1 then
45466: LD_VAR 0 8
45470: PUSH
45471: LD_INT 1
45473: EQUAL
45474: IFFALSE 45585
// begin tmp := [ ] ;
45476: LD_ADDR_VAR 0 19
45480: PUSH
45481: EMPTY
45482: ST_TO_ADDR
// for j in f do
45483: LD_ADDR_VAR 0 9
45487: PUSH
45488: LD_VAR 0 12
45492: PUSH
45493: FOR_IN
45494: IFFALSE 45567
// if GetBType ( j ) = b_bunker then
45496: LD_VAR 0 9
45500: PPUSH
45501: CALL_OW 266
45505: PUSH
45506: LD_INT 32
45508: EQUAL
45509: IFFALSE 45536
// tmp := Insert ( tmp , 1 , j ) else
45511: LD_ADDR_VAR 0 19
45515: PUSH
45516: LD_VAR 0 19
45520: PPUSH
45521: LD_INT 1
45523: PPUSH
45524: LD_VAR 0 9
45528: PPUSH
45529: CALL_OW 2
45533: ST_TO_ADDR
45534: GO 45565
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45536: LD_ADDR_VAR 0 19
45540: PUSH
45541: LD_VAR 0 19
45545: PPUSH
45546: LD_VAR 0 19
45550: PUSH
45551: LD_INT 1
45553: PLUS
45554: PPUSH
45555: LD_VAR 0 9
45559: PPUSH
45560: CALL_OW 2
45564: ST_TO_ADDR
45565: GO 45493
45567: POP
45568: POP
// if tmp then
45569: LD_VAR 0 19
45573: IFFALSE 45585
// f := tmp ;
45575: LD_ADDR_VAR 0 12
45579: PUSH
45580: LD_VAR 0 19
45584: ST_TO_ADDR
// end ; x := personel [ i ] ;
45585: LD_ADDR_VAR 0 13
45589: PUSH
45590: LD_VAR 0 6
45594: PUSH
45595: LD_VAR 0 8
45599: ARRAY
45600: ST_TO_ADDR
// if x = - 1 then
45601: LD_VAR 0 13
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: EQUAL
45610: IFFALSE 45819
// begin for j in f do
45612: LD_ADDR_VAR 0 9
45616: PUSH
45617: LD_VAR 0 12
45621: PUSH
45622: FOR_IN
45623: IFFALSE 45815
// repeat InitHc ;
45625: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45629: LD_VAR 0 9
45633: PPUSH
45634: CALL_OW 266
45638: PUSH
45639: LD_INT 5
45641: EQUAL
45642: IFFALSE 45712
// begin if UnitsInside ( j ) < 3 then
45644: LD_VAR 0 9
45648: PPUSH
45649: CALL_OW 313
45653: PUSH
45654: LD_INT 3
45656: LESS
45657: IFFALSE 45693
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45659: LD_INT 0
45661: PPUSH
45662: LD_INT 5
45664: PUSH
45665: LD_INT 8
45667: PUSH
45668: LD_INT 9
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: LIST
45675: PUSH
45676: LD_VAR 0 17
45680: ARRAY
45681: PPUSH
45682: LD_VAR 0 4
45686: PPUSH
45687: CALL_OW 380
45691: GO 45710
// PrepareHuman ( false , i , skill ) ;
45693: LD_INT 0
45695: PPUSH
45696: LD_VAR 0 8
45700: PPUSH
45701: LD_VAR 0 4
45705: PPUSH
45706: CALL_OW 380
// end else
45710: GO 45729
// PrepareHuman ( false , i , skill ) ;
45712: LD_INT 0
45714: PPUSH
45715: LD_VAR 0 8
45719: PPUSH
45720: LD_VAR 0 4
45724: PPUSH
45725: CALL_OW 380
// un := CreateHuman ;
45729: LD_ADDR_VAR 0 14
45733: PUSH
45734: CALL_OW 44
45738: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45739: LD_ADDR_VAR 0 7
45743: PUSH
45744: LD_VAR 0 7
45748: PPUSH
45749: LD_INT 1
45751: PPUSH
45752: LD_VAR 0 14
45756: PPUSH
45757: CALL_OW 2
45761: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45762: LD_VAR 0 14
45766: PPUSH
45767: LD_VAR 0 9
45771: PPUSH
45772: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45776: LD_VAR 0 9
45780: PPUSH
45781: CALL_OW 313
45785: PUSH
45786: LD_INT 6
45788: EQUAL
45789: PUSH
45790: LD_VAR 0 9
45794: PPUSH
45795: CALL_OW 266
45799: PUSH
45800: LD_INT 32
45802: PUSH
45803: LD_INT 31
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: IN
45810: OR
45811: IFFALSE 45625
45813: GO 45622
45815: POP
45816: POP
// end else
45817: GO 46199
// for j = 1 to x do
45819: LD_ADDR_VAR 0 9
45823: PUSH
45824: DOUBLE
45825: LD_INT 1
45827: DEC
45828: ST_TO_ADDR
45829: LD_VAR 0 13
45833: PUSH
45834: FOR_TO
45835: IFFALSE 46197
// begin InitHc ;
45837: CALL_OW 19
// if not f then
45841: LD_VAR 0 12
45845: NOT
45846: IFFALSE 45935
// begin PrepareHuman ( false , i , skill ) ;
45848: LD_INT 0
45850: PPUSH
45851: LD_VAR 0 8
45855: PPUSH
45856: LD_VAR 0 4
45860: PPUSH
45861: CALL_OW 380
// un := CreateHuman ;
45865: LD_ADDR_VAR 0 14
45869: PUSH
45870: CALL_OW 44
45874: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45875: LD_ADDR_VAR 0 7
45879: PUSH
45880: LD_VAR 0 7
45884: PPUSH
45885: LD_INT 1
45887: PPUSH
45888: LD_VAR 0 14
45892: PPUSH
45893: CALL_OW 2
45897: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45898: LD_VAR 0 14
45902: PPUSH
45903: LD_VAR 0 1
45907: PPUSH
45908: CALL_OW 250
45912: PPUSH
45913: LD_VAR 0 1
45917: PPUSH
45918: CALL_OW 251
45922: PPUSH
45923: LD_INT 10
45925: PPUSH
45926: LD_INT 0
45928: PPUSH
45929: CALL_OW 50
// continue ;
45933: GO 45834
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45935: LD_VAR 0 12
45939: PUSH
45940: LD_INT 1
45942: ARRAY
45943: PPUSH
45944: CALL_OW 313
45948: PUSH
45949: LD_VAR 0 12
45953: PUSH
45954: LD_INT 1
45956: ARRAY
45957: PPUSH
45958: CALL_OW 266
45962: PUSH
45963: LD_INT 32
45965: PUSH
45966: LD_INT 31
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: IN
45973: AND
45974: PUSH
45975: LD_VAR 0 12
45979: PUSH
45980: LD_INT 1
45982: ARRAY
45983: PPUSH
45984: CALL_OW 313
45988: PUSH
45989: LD_INT 6
45991: EQUAL
45992: OR
45993: IFFALSE 46013
// f := Delete ( f , 1 ) ;
45995: LD_ADDR_VAR 0 12
45999: PUSH
46000: LD_VAR 0 12
46004: PPUSH
46005: LD_INT 1
46007: PPUSH
46008: CALL_OW 3
46012: ST_TO_ADDR
// if not f then
46013: LD_VAR 0 12
46017: NOT
46018: IFFALSE 46036
// begin x := x + 2 ;
46020: LD_ADDR_VAR 0 13
46024: PUSH
46025: LD_VAR 0 13
46029: PUSH
46030: LD_INT 2
46032: PLUS
46033: ST_TO_ADDR
// continue ;
46034: GO 45834
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46036: LD_VAR 0 12
46040: PUSH
46041: LD_INT 1
46043: ARRAY
46044: PPUSH
46045: CALL_OW 266
46049: PUSH
46050: LD_INT 5
46052: EQUAL
46053: IFFALSE 46127
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46055: LD_VAR 0 12
46059: PUSH
46060: LD_INT 1
46062: ARRAY
46063: PPUSH
46064: CALL_OW 313
46068: PUSH
46069: LD_INT 3
46071: LESS
46072: IFFALSE 46108
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46074: LD_INT 0
46076: PPUSH
46077: LD_INT 5
46079: PUSH
46080: LD_INT 8
46082: PUSH
46083: LD_INT 9
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: PUSH
46091: LD_VAR 0 17
46095: ARRAY
46096: PPUSH
46097: LD_VAR 0 4
46101: PPUSH
46102: CALL_OW 380
46106: GO 46125
// PrepareHuman ( false , i , skill ) ;
46108: LD_INT 0
46110: PPUSH
46111: LD_VAR 0 8
46115: PPUSH
46116: LD_VAR 0 4
46120: PPUSH
46121: CALL_OW 380
// end else
46125: GO 46144
// PrepareHuman ( false , i , skill ) ;
46127: LD_INT 0
46129: PPUSH
46130: LD_VAR 0 8
46134: PPUSH
46135: LD_VAR 0 4
46139: PPUSH
46140: CALL_OW 380
// un := CreateHuman ;
46144: LD_ADDR_VAR 0 14
46148: PUSH
46149: CALL_OW 44
46153: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46154: LD_ADDR_VAR 0 7
46158: PUSH
46159: LD_VAR 0 7
46163: PPUSH
46164: LD_INT 1
46166: PPUSH
46167: LD_VAR 0 14
46171: PPUSH
46172: CALL_OW 2
46176: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46177: LD_VAR 0 14
46181: PPUSH
46182: LD_VAR 0 12
46186: PUSH
46187: LD_INT 1
46189: ARRAY
46190: PPUSH
46191: CALL_OW 52
// end ;
46195: GO 45834
46197: POP
46198: POP
// end ;
46199: GO 45136
46201: POP
46202: POP
// result := result ^ buildings ;
46203: LD_ADDR_VAR 0 7
46207: PUSH
46208: LD_VAR 0 7
46212: PUSH
46213: LD_VAR 0 18
46217: ADD
46218: ST_TO_ADDR
// end else
46219: GO 46362
// begin for i = 1 to personel do
46221: LD_ADDR_VAR 0 8
46225: PUSH
46226: DOUBLE
46227: LD_INT 1
46229: DEC
46230: ST_TO_ADDR
46231: LD_VAR 0 6
46235: PUSH
46236: FOR_TO
46237: IFFALSE 46360
// begin if i > 4 then
46239: LD_VAR 0 8
46243: PUSH
46244: LD_INT 4
46246: GREATER
46247: IFFALSE 46251
// break ;
46249: GO 46360
// x := personel [ i ] ;
46251: LD_ADDR_VAR 0 13
46255: PUSH
46256: LD_VAR 0 6
46260: PUSH
46261: LD_VAR 0 8
46265: ARRAY
46266: ST_TO_ADDR
// if x = - 1 then
46267: LD_VAR 0 13
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: EQUAL
46276: IFFALSE 46280
// continue ;
46278: GO 46236
// PrepareHuman ( false , i , skill ) ;
46280: LD_INT 0
46282: PPUSH
46283: LD_VAR 0 8
46287: PPUSH
46288: LD_VAR 0 4
46292: PPUSH
46293: CALL_OW 380
// un := CreateHuman ;
46297: LD_ADDR_VAR 0 14
46301: PUSH
46302: CALL_OW 44
46306: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46307: LD_VAR 0 14
46311: PPUSH
46312: LD_VAR 0 1
46316: PPUSH
46317: CALL_OW 250
46321: PPUSH
46322: LD_VAR 0 1
46326: PPUSH
46327: CALL_OW 251
46331: PPUSH
46332: LD_INT 10
46334: PPUSH
46335: LD_INT 0
46337: PPUSH
46338: CALL_OW 50
// result := result ^ un ;
46342: LD_ADDR_VAR 0 7
46346: PUSH
46347: LD_VAR 0 7
46351: PUSH
46352: LD_VAR 0 14
46356: ADD
46357: ST_TO_ADDR
// end ;
46358: GO 46236
46360: POP
46361: POP
// end ; end ;
46362: LD_VAR 0 7
46366: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46367: LD_INT 0
46369: PPUSH
46370: PPUSH
46371: PPUSH
46372: PPUSH
46373: PPUSH
46374: PPUSH
46375: PPUSH
46376: PPUSH
46377: PPUSH
46378: PPUSH
46379: PPUSH
46380: PPUSH
46381: PPUSH
46382: PPUSH
46383: PPUSH
46384: PPUSH
// result := false ;
46385: LD_ADDR_VAR 0 3
46389: PUSH
46390: LD_INT 0
46392: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46393: LD_VAR 0 1
46397: NOT
46398: PUSH
46399: LD_VAR 0 1
46403: PPUSH
46404: CALL_OW 266
46408: PUSH
46409: LD_INT 32
46411: PUSH
46412: LD_INT 33
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: IN
46419: NOT
46420: OR
46421: IFFALSE 46425
// exit ;
46423: GO 47534
// nat := GetNation ( tower ) ;
46425: LD_ADDR_VAR 0 12
46429: PUSH
46430: LD_VAR 0 1
46434: PPUSH
46435: CALL_OW 248
46439: ST_TO_ADDR
// side := GetSide ( tower ) ;
46440: LD_ADDR_VAR 0 16
46444: PUSH
46445: LD_VAR 0 1
46449: PPUSH
46450: CALL_OW 255
46454: ST_TO_ADDR
// x := GetX ( tower ) ;
46455: LD_ADDR_VAR 0 10
46459: PUSH
46460: LD_VAR 0 1
46464: PPUSH
46465: CALL_OW 250
46469: ST_TO_ADDR
// y := GetY ( tower ) ;
46470: LD_ADDR_VAR 0 11
46474: PUSH
46475: LD_VAR 0 1
46479: PPUSH
46480: CALL_OW 251
46484: ST_TO_ADDR
// if not x or not y then
46485: LD_VAR 0 10
46489: NOT
46490: PUSH
46491: LD_VAR 0 11
46495: NOT
46496: OR
46497: IFFALSE 46501
// exit ;
46499: GO 47534
// weapon := 0 ;
46501: LD_ADDR_VAR 0 18
46505: PUSH
46506: LD_INT 0
46508: ST_TO_ADDR
// fac_list := [ ] ;
46509: LD_ADDR_VAR 0 17
46513: PUSH
46514: EMPTY
46515: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46516: LD_ADDR_VAR 0 6
46520: PUSH
46521: LD_VAR 0 1
46525: PPUSH
46526: CALL_OW 274
46530: PPUSH
46531: LD_VAR 0 2
46535: PPUSH
46536: LD_INT 0
46538: PPUSH
46539: CALL 44105 0 3
46543: PPUSH
46544: LD_INT 30
46546: PUSH
46547: LD_INT 3
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PPUSH
46554: CALL_OW 72
46558: ST_TO_ADDR
// if not factories then
46559: LD_VAR 0 6
46563: NOT
46564: IFFALSE 46568
// exit ;
46566: GO 47534
// for i in factories do
46568: LD_ADDR_VAR 0 8
46572: PUSH
46573: LD_VAR 0 6
46577: PUSH
46578: FOR_IN
46579: IFFALSE 46604
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46581: LD_ADDR_VAR 0 17
46585: PUSH
46586: LD_VAR 0 17
46590: PUSH
46591: LD_VAR 0 8
46595: PPUSH
46596: CALL_OW 478
46600: UNION
46601: ST_TO_ADDR
46602: GO 46578
46604: POP
46605: POP
// if not fac_list then
46606: LD_VAR 0 17
46610: NOT
46611: IFFALSE 46615
// exit ;
46613: GO 47534
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46615: LD_ADDR_VAR 0 5
46619: PUSH
46620: LD_INT 4
46622: PUSH
46623: LD_INT 5
46625: PUSH
46626: LD_INT 9
46628: PUSH
46629: LD_INT 10
46631: PUSH
46632: LD_INT 6
46634: PUSH
46635: LD_INT 7
46637: PUSH
46638: LD_INT 11
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 27
46652: PUSH
46653: LD_INT 28
46655: PUSH
46656: LD_INT 26
46658: PUSH
46659: LD_INT 30
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 43
46670: PUSH
46671: LD_INT 44
46673: PUSH
46674: LD_INT 46
46676: PUSH
46677: LD_INT 45
46679: PUSH
46680: LD_INT 47
46682: PUSH
46683: LD_INT 49
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: LIST
46698: PUSH
46699: LD_VAR 0 12
46703: ARRAY
46704: ST_TO_ADDR
// list := list isect fac_list ;
46705: LD_ADDR_VAR 0 5
46709: PUSH
46710: LD_VAR 0 5
46714: PUSH
46715: LD_VAR 0 17
46719: ISECT
46720: ST_TO_ADDR
// if not list then
46721: LD_VAR 0 5
46725: NOT
46726: IFFALSE 46730
// exit ;
46728: GO 47534
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46730: LD_VAR 0 12
46734: PUSH
46735: LD_INT 3
46737: EQUAL
46738: PUSH
46739: LD_INT 49
46741: PUSH
46742: LD_VAR 0 5
46746: IN
46747: AND
46748: PUSH
46749: LD_INT 31
46751: PPUSH
46752: LD_VAR 0 16
46756: PPUSH
46757: CALL_OW 321
46761: PUSH
46762: LD_INT 2
46764: EQUAL
46765: AND
46766: IFFALSE 46826
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46768: LD_INT 22
46770: PUSH
46771: LD_VAR 0 16
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 35
46782: PUSH
46783: LD_INT 49
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 91
46792: PUSH
46793: LD_VAR 0 1
46797: PUSH
46798: LD_INT 10
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: LIST
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: LIST
46810: PPUSH
46811: CALL_OW 69
46815: NOT
46816: IFFALSE 46826
// weapon := ru_time_lapser ;
46818: LD_ADDR_VAR 0 18
46822: PUSH
46823: LD_INT 49
46825: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46826: LD_VAR 0 12
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: IN
46841: PUSH
46842: LD_INT 11
46844: PUSH
46845: LD_VAR 0 5
46849: IN
46850: PUSH
46851: LD_INT 30
46853: PUSH
46854: LD_VAR 0 5
46858: IN
46859: OR
46860: AND
46861: PUSH
46862: LD_INT 6
46864: PPUSH
46865: LD_VAR 0 16
46869: PPUSH
46870: CALL_OW 321
46874: PUSH
46875: LD_INT 2
46877: EQUAL
46878: AND
46879: IFFALSE 47044
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46881: LD_INT 22
46883: PUSH
46884: LD_VAR 0 16
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: LD_INT 35
46898: PUSH
46899: LD_INT 11
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 35
46908: PUSH
46909: LD_INT 30
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 91
46923: PUSH
46924: LD_VAR 0 1
46928: PUSH
46929: LD_INT 18
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: LIST
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: LIST
46941: PPUSH
46942: CALL_OW 69
46946: NOT
46947: PUSH
46948: LD_INT 22
46950: PUSH
46951: LD_VAR 0 16
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: LD_INT 30
46965: PUSH
46966: LD_INT 32
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 30
46975: PUSH
46976: LD_INT 33
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 91
46990: PUSH
46991: LD_VAR 0 1
46995: PUSH
46996: LD_INT 12
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: LIST
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: LIST
47008: PUSH
47009: EMPTY
47010: LIST
47011: PPUSH
47012: CALL_OW 69
47016: PUSH
47017: LD_INT 2
47019: GREATER
47020: AND
47021: IFFALSE 47044
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47023: LD_ADDR_VAR 0 18
47027: PUSH
47028: LD_INT 11
47030: PUSH
47031: LD_INT 30
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_VAR 0 12
47042: ARRAY
47043: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47044: LD_VAR 0 18
47048: NOT
47049: PUSH
47050: LD_INT 40
47052: PPUSH
47053: LD_VAR 0 16
47057: PPUSH
47058: CALL_OW 321
47062: PUSH
47063: LD_INT 2
47065: EQUAL
47066: AND
47067: PUSH
47068: LD_INT 7
47070: PUSH
47071: LD_VAR 0 5
47075: IN
47076: PUSH
47077: LD_INT 28
47079: PUSH
47080: LD_VAR 0 5
47084: IN
47085: OR
47086: PUSH
47087: LD_INT 45
47089: PUSH
47090: LD_VAR 0 5
47094: IN
47095: OR
47096: AND
47097: IFFALSE 47351
// begin hex := GetHexInfo ( x , y ) ;
47099: LD_ADDR_VAR 0 4
47103: PUSH
47104: LD_VAR 0 10
47108: PPUSH
47109: LD_VAR 0 11
47113: PPUSH
47114: CALL_OW 546
47118: ST_TO_ADDR
// if hex [ 1 ] then
47119: LD_VAR 0 4
47123: PUSH
47124: LD_INT 1
47126: ARRAY
47127: IFFALSE 47131
// exit ;
47129: GO 47534
// height := hex [ 2 ] ;
47131: LD_ADDR_VAR 0 15
47135: PUSH
47136: LD_VAR 0 4
47140: PUSH
47141: LD_INT 2
47143: ARRAY
47144: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47145: LD_ADDR_VAR 0 14
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: LD_INT 3
47158: PUSH
47159: LD_INT 5
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: ST_TO_ADDR
// for i in tmp do
47168: LD_ADDR_VAR 0 8
47172: PUSH
47173: LD_VAR 0 14
47177: PUSH
47178: FOR_IN
47179: IFFALSE 47349
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47181: LD_ADDR_VAR 0 9
47185: PUSH
47186: LD_VAR 0 10
47190: PPUSH
47191: LD_VAR 0 8
47195: PPUSH
47196: LD_INT 5
47198: PPUSH
47199: CALL_OW 272
47203: PUSH
47204: LD_VAR 0 11
47208: PPUSH
47209: LD_VAR 0 8
47213: PPUSH
47214: LD_INT 5
47216: PPUSH
47217: CALL_OW 273
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47226: LD_VAR 0 9
47230: PUSH
47231: LD_INT 1
47233: ARRAY
47234: PPUSH
47235: LD_VAR 0 9
47239: PUSH
47240: LD_INT 2
47242: ARRAY
47243: PPUSH
47244: CALL_OW 488
47248: IFFALSE 47347
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47250: LD_ADDR_VAR 0 4
47254: PUSH
47255: LD_VAR 0 9
47259: PUSH
47260: LD_INT 1
47262: ARRAY
47263: PPUSH
47264: LD_VAR 0 9
47268: PUSH
47269: LD_INT 2
47271: ARRAY
47272: PPUSH
47273: CALL_OW 546
47277: ST_TO_ADDR
// if hex [ 1 ] then
47278: LD_VAR 0 4
47282: PUSH
47283: LD_INT 1
47285: ARRAY
47286: IFFALSE 47290
// continue ;
47288: GO 47178
// h := hex [ 2 ] ;
47290: LD_ADDR_VAR 0 13
47294: PUSH
47295: LD_VAR 0 4
47299: PUSH
47300: LD_INT 2
47302: ARRAY
47303: ST_TO_ADDR
// if h + 7 < height then
47304: LD_VAR 0 13
47308: PUSH
47309: LD_INT 7
47311: PLUS
47312: PUSH
47313: LD_VAR 0 15
47317: LESS
47318: IFFALSE 47347
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47320: LD_ADDR_VAR 0 18
47324: PUSH
47325: LD_INT 7
47327: PUSH
47328: LD_INT 28
47330: PUSH
47331: LD_INT 45
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: LIST
47338: PUSH
47339: LD_VAR 0 12
47343: ARRAY
47344: ST_TO_ADDR
// break ;
47345: GO 47349
// end ; end ; end ;
47347: GO 47178
47349: POP
47350: POP
// end ; if not weapon then
47351: LD_VAR 0 18
47355: NOT
47356: IFFALSE 47416
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47358: LD_ADDR_VAR 0 5
47362: PUSH
47363: LD_VAR 0 5
47367: PUSH
47368: LD_INT 11
47370: PUSH
47371: LD_INT 30
47373: PUSH
47374: LD_INT 49
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: LIST
47381: DIFF
47382: ST_TO_ADDR
// if not list then
47383: LD_VAR 0 5
47387: NOT
47388: IFFALSE 47392
// exit ;
47390: GO 47534
// weapon := list [ rand ( 1 , list ) ] ;
47392: LD_ADDR_VAR 0 18
47396: PUSH
47397: LD_VAR 0 5
47401: PUSH
47402: LD_INT 1
47404: PPUSH
47405: LD_VAR 0 5
47409: PPUSH
47410: CALL_OW 12
47414: ARRAY
47415: ST_TO_ADDR
// end ; if weapon then
47416: LD_VAR 0 18
47420: IFFALSE 47534
// begin tmp := CostOfWeapon ( weapon ) ;
47422: LD_ADDR_VAR 0 14
47426: PUSH
47427: LD_VAR 0 18
47431: PPUSH
47432: CALL_OW 451
47436: ST_TO_ADDR
// j := GetBase ( tower ) ;
47437: LD_ADDR_VAR 0 9
47441: PUSH
47442: LD_VAR 0 1
47446: PPUSH
47447: CALL_OW 274
47451: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47452: LD_VAR 0 9
47456: PPUSH
47457: LD_INT 1
47459: PPUSH
47460: CALL_OW 275
47464: PUSH
47465: LD_VAR 0 14
47469: PUSH
47470: LD_INT 1
47472: ARRAY
47473: GREATEREQUAL
47474: PUSH
47475: LD_VAR 0 9
47479: PPUSH
47480: LD_INT 2
47482: PPUSH
47483: CALL_OW 275
47487: PUSH
47488: LD_VAR 0 14
47492: PUSH
47493: LD_INT 2
47495: ARRAY
47496: GREATEREQUAL
47497: AND
47498: PUSH
47499: LD_VAR 0 9
47503: PPUSH
47504: LD_INT 3
47506: PPUSH
47507: CALL_OW 275
47511: PUSH
47512: LD_VAR 0 14
47516: PUSH
47517: LD_INT 3
47519: ARRAY
47520: GREATEREQUAL
47521: AND
47522: IFFALSE 47534
// result := weapon ;
47524: LD_ADDR_VAR 0 3
47528: PUSH
47529: LD_VAR 0 18
47533: ST_TO_ADDR
// end ; end ;
47534: LD_VAR 0 3
47538: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47539: LD_INT 0
47541: PPUSH
47542: PPUSH
// result := true ;
47543: LD_ADDR_VAR 0 3
47547: PUSH
47548: LD_INT 1
47550: ST_TO_ADDR
// if array1 = array2 then
47551: LD_VAR 0 1
47555: PUSH
47556: LD_VAR 0 2
47560: EQUAL
47561: IFFALSE 47621
// begin for i = 1 to array1 do
47563: LD_ADDR_VAR 0 4
47567: PUSH
47568: DOUBLE
47569: LD_INT 1
47571: DEC
47572: ST_TO_ADDR
47573: LD_VAR 0 1
47577: PUSH
47578: FOR_TO
47579: IFFALSE 47617
// if array1 [ i ] <> array2 [ i ] then
47581: LD_VAR 0 1
47585: PUSH
47586: LD_VAR 0 4
47590: ARRAY
47591: PUSH
47592: LD_VAR 0 2
47596: PUSH
47597: LD_VAR 0 4
47601: ARRAY
47602: NONEQUAL
47603: IFFALSE 47615
// begin result := false ;
47605: LD_ADDR_VAR 0 3
47609: PUSH
47610: LD_INT 0
47612: ST_TO_ADDR
// break ;
47613: GO 47617
// end ;
47615: GO 47578
47617: POP
47618: POP
// end else
47619: GO 47629
// result := false ;
47621: LD_ADDR_VAR 0 3
47625: PUSH
47626: LD_INT 0
47628: ST_TO_ADDR
// end ;
47629: LD_VAR 0 3
47633: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47634: LD_INT 0
47636: PPUSH
47637: PPUSH
// if not array1 or not array2 then
47638: LD_VAR 0 1
47642: NOT
47643: PUSH
47644: LD_VAR 0 2
47648: NOT
47649: OR
47650: IFFALSE 47654
// exit ;
47652: GO 47718
// result := true ;
47654: LD_ADDR_VAR 0 3
47658: PUSH
47659: LD_INT 1
47661: ST_TO_ADDR
// for i = 1 to array1 do
47662: LD_ADDR_VAR 0 4
47666: PUSH
47667: DOUBLE
47668: LD_INT 1
47670: DEC
47671: ST_TO_ADDR
47672: LD_VAR 0 1
47676: PUSH
47677: FOR_TO
47678: IFFALSE 47716
// if array1 [ i ] <> array2 [ i ] then
47680: LD_VAR 0 1
47684: PUSH
47685: LD_VAR 0 4
47689: ARRAY
47690: PUSH
47691: LD_VAR 0 2
47695: PUSH
47696: LD_VAR 0 4
47700: ARRAY
47701: NONEQUAL
47702: IFFALSE 47714
// begin result := false ;
47704: LD_ADDR_VAR 0 3
47708: PUSH
47709: LD_INT 0
47711: ST_TO_ADDR
// break ;
47712: GO 47716
// end ;
47714: GO 47677
47716: POP
47717: POP
// end ;
47718: LD_VAR 0 3
47722: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47723: LD_INT 0
47725: PPUSH
47726: PPUSH
47727: PPUSH
// pom := GetBase ( fac ) ;
47728: LD_ADDR_VAR 0 5
47732: PUSH
47733: LD_VAR 0 1
47737: PPUSH
47738: CALL_OW 274
47742: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47743: LD_ADDR_VAR 0 4
47747: PUSH
47748: LD_VAR 0 2
47752: PUSH
47753: LD_INT 1
47755: ARRAY
47756: PPUSH
47757: LD_VAR 0 2
47761: PUSH
47762: LD_INT 2
47764: ARRAY
47765: PPUSH
47766: LD_VAR 0 2
47770: PUSH
47771: LD_INT 3
47773: ARRAY
47774: PPUSH
47775: LD_VAR 0 2
47779: PUSH
47780: LD_INT 4
47782: ARRAY
47783: PPUSH
47784: CALL_OW 449
47788: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47789: LD_ADDR_VAR 0 3
47793: PUSH
47794: LD_VAR 0 5
47798: PPUSH
47799: LD_INT 1
47801: PPUSH
47802: CALL_OW 275
47806: PUSH
47807: LD_VAR 0 4
47811: PUSH
47812: LD_INT 1
47814: ARRAY
47815: GREATEREQUAL
47816: PUSH
47817: LD_VAR 0 5
47821: PPUSH
47822: LD_INT 2
47824: PPUSH
47825: CALL_OW 275
47829: PUSH
47830: LD_VAR 0 4
47834: PUSH
47835: LD_INT 2
47837: ARRAY
47838: GREATEREQUAL
47839: AND
47840: PUSH
47841: LD_VAR 0 5
47845: PPUSH
47846: LD_INT 3
47848: PPUSH
47849: CALL_OW 275
47853: PUSH
47854: LD_VAR 0 4
47858: PUSH
47859: LD_INT 3
47861: ARRAY
47862: GREATEREQUAL
47863: AND
47864: ST_TO_ADDR
// end ;
47865: LD_VAR 0 3
47869: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47870: LD_INT 0
47872: PPUSH
47873: PPUSH
47874: PPUSH
47875: PPUSH
// pom := GetBase ( building ) ;
47876: LD_ADDR_VAR 0 3
47880: PUSH
47881: LD_VAR 0 1
47885: PPUSH
47886: CALL_OW 274
47890: ST_TO_ADDR
// if not pom then
47891: LD_VAR 0 3
47895: NOT
47896: IFFALSE 47900
// exit ;
47898: GO 48070
// btype := GetBType ( building ) ;
47900: LD_ADDR_VAR 0 5
47904: PUSH
47905: LD_VAR 0 1
47909: PPUSH
47910: CALL_OW 266
47914: ST_TO_ADDR
// if btype = b_armoury then
47915: LD_VAR 0 5
47919: PUSH
47920: LD_INT 4
47922: EQUAL
47923: IFFALSE 47933
// btype := b_barracks ;
47925: LD_ADDR_VAR 0 5
47929: PUSH
47930: LD_INT 5
47932: ST_TO_ADDR
// if btype = b_depot then
47933: LD_VAR 0 5
47937: PUSH
47938: LD_INT 0
47940: EQUAL
47941: IFFALSE 47951
// btype := b_warehouse ;
47943: LD_ADDR_VAR 0 5
47947: PUSH
47948: LD_INT 1
47950: ST_TO_ADDR
// if btype = b_workshop then
47951: LD_VAR 0 5
47955: PUSH
47956: LD_INT 2
47958: EQUAL
47959: IFFALSE 47969
// btype := b_factory ;
47961: LD_ADDR_VAR 0 5
47965: PUSH
47966: LD_INT 3
47968: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47969: LD_ADDR_VAR 0 4
47973: PUSH
47974: LD_VAR 0 5
47978: PPUSH
47979: LD_VAR 0 1
47983: PPUSH
47984: CALL_OW 248
47988: PPUSH
47989: CALL_OW 450
47993: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47994: LD_ADDR_VAR 0 2
47998: PUSH
47999: LD_VAR 0 3
48003: PPUSH
48004: LD_INT 1
48006: PPUSH
48007: CALL_OW 275
48011: PUSH
48012: LD_VAR 0 4
48016: PUSH
48017: LD_INT 1
48019: ARRAY
48020: GREATEREQUAL
48021: PUSH
48022: LD_VAR 0 3
48026: PPUSH
48027: LD_INT 2
48029: PPUSH
48030: CALL_OW 275
48034: PUSH
48035: LD_VAR 0 4
48039: PUSH
48040: LD_INT 2
48042: ARRAY
48043: GREATEREQUAL
48044: AND
48045: PUSH
48046: LD_VAR 0 3
48050: PPUSH
48051: LD_INT 3
48053: PPUSH
48054: CALL_OW 275
48058: PUSH
48059: LD_VAR 0 4
48063: PUSH
48064: LD_INT 3
48066: ARRAY
48067: GREATEREQUAL
48068: AND
48069: ST_TO_ADDR
// end ;
48070: LD_VAR 0 2
48074: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48075: LD_INT 0
48077: PPUSH
48078: PPUSH
48079: PPUSH
// pom := GetBase ( building ) ;
48080: LD_ADDR_VAR 0 4
48084: PUSH
48085: LD_VAR 0 1
48089: PPUSH
48090: CALL_OW 274
48094: ST_TO_ADDR
// if not pom then
48095: LD_VAR 0 4
48099: NOT
48100: IFFALSE 48104
// exit ;
48102: GO 48205
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48104: LD_ADDR_VAR 0 5
48108: PUSH
48109: LD_VAR 0 2
48113: PPUSH
48114: LD_VAR 0 1
48118: PPUSH
48119: CALL_OW 248
48123: PPUSH
48124: CALL_OW 450
48128: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48129: LD_ADDR_VAR 0 3
48133: PUSH
48134: LD_VAR 0 4
48138: PPUSH
48139: LD_INT 1
48141: PPUSH
48142: CALL_OW 275
48146: PUSH
48147: LD_VAR 0 5
48151: PUSH
48152: LD_INT 1
48154: ARRAY
48155: GREATEREQUAL
48156: PUSH
48157: LD_VAR 0 4
48161: PPUSH
48162: LD_INT 2
48164: PPUSH
48165: CALL_OW 275
48169: PUSH
48170: LD_VAR 0 5
48174: PUSH
48175: LD_INT 2
48177: ARRAY
48178: GREATEREQUAL
48179: AND
48180: PUSH
48181: LD_VAR 0 4
48185: PPUSH
48186: LD_INT 3
48188: PPUSH
48189: CALL_OW 275
48193: PUSH
48194: LD_VAR 0 5
48198: PUSH
48199: LD_INT 3
48201: ARRAY
48202: GREATEREQUAL
48203: AND
48204: ST_TO_ADDR
// end ;
48205: LD_VAR 0 3
48209: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48210: LD_INT 0
48212: PPUSH
48213: PPUSH
48214: PPUSH
48215: PPUSH
48216: PPUSH
48217: PPUSH
48218: PPUSH
48219: PPUSH
48220: PPUSH
48221: PPUSH
48222: PPUSH
// result := false ;
48223: LD_ADDR_VAR 0 8
48227: PUSH
48228: LD_INT 0
48230: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48231: LD_VAR 0 5
48235: NOT
48236: PUSH
48237: LD_VAR 0 1
48241: NOT
48242: OR
48243: PUSH
48244: LD_VAR 0 2
48248: NOT
48249: OR
48250: PUSH
48251: LD_VAR 0 3
48255: NOT
48256: OR
48257: IFFALSE 48261
// exit ;
48259: GO 49075
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48261: LD_ADDR_VAR 0 14
48265: PUSH
48266: LD_VAR 0 1
48270: PPUSH
48271: LD_VAR 0 2
48275: PPUSH
48276: LD_VAR 0 3
48280: PPUSH
48281: LD_VAR 0 4
48285: PPUSH
48286: LD_VAR 0 5
48290: PUSH
48291: LD_INT 1
48293: ARRAY
48294: PPUSH
48295: CALL_OW 248
48299: PPUSH
48300: LD_INT 0
48302: PPUSH
48303: CALL 50312 0 6
48307: ST_TO_ADDR
// if not hexes then
48308: LD_VAR 0 14
48312: NOT
48313: IFFALSE 48317
// exit ;
48315: GO 49075
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48317: LD_ADDR_VAR 0 17
48321: PUSH
48322: LD_VAR 0 5
48326: PPUSH
48327: LD_INT 22
48329: PUSH
48330: LD_VAR 0 13
48334: PPUSH
48335: CALL_OW 255
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: LD_INT 30
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 30
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: LIST
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PPUSH
48376: CALL_OW 72
48380: ST_TO_ADDR
// for i = 1 to hexes do
48381: LD_ADDR_VAR 0 9
48385: PUSH
48386: DOUBLE
48387: LD_INT 1
48389: DEC
48390: ST_TO_ADDR
48391: LD_VAR 0 14
48395: PUSH
48396: FOR_TO
48397: IFFALSE 49073
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48399: LD_ADDR_VAR 0 13
48403: PUSH
48404: LD_VAR 0 14
48408: PUSH
48409: LD_VAR 0 9
48413: ARRAY
48414: PUSH
48415: LD_INT 1
48417: ARRAY
48418: PPUSH
48419: LD_VAR 0 14
48423: PUSH
48424: LD_VAR 0 9
48428: ARRAY
48429: PUSH
48430: LD_INT 2
48432: ARRAY
48433: PPUSH
48434: CALL_OW 428
48438: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48439: LD_VAR 0 14
48443: PUSH
48444: LD_VAR 0 9
48448: ARRAY
48449: PUSH
48450: LD_INT 1
48452: ARRAY
48453: PPUSH
48454: LD_VAR 0 14
48458: PUSH
48459: LD_VAR 0 9
48463: ARRAY
48464: PUSH
48465: LD_INT 2
48467: ARRAY
48468: PPUSH
48469: CALL_OW 351
48473: PUSH
48474: LD_VAR 0 14
48478: PUSH
48479: LD_VAR 0 9
48483: ARRAY
48484: PUSH
48485: LD_INT 1
48487: ARRAY
48488: PPUSH
48489: LD_VAR 0 14
48493: PUSH
48494: LD_VAR 0 9
48498: ARRAY
48499: PUSH
48500: LD_INT 2
48502: ARRAY
48503: PPUSH
48504: CALL_OW 488
48508: NOT
48509: OR
48510: PUSH
48511: LD_VAR 0 13
48515: PPUSH
48516: CALL_OW 247
48520: PUSH
48521: LD_INT 3
48523: EQUAL
48524: OR
48525: IFFALSE 48531
// exit ;
48527: POP
48528: POP
48529: GO 49075
// if not tmp then
48531: LD_VAR 0 13
48535: NOT
48536: IFFALSE 48540
// continue ;
48538: GO 48396
// result := true ;
48540: LD_ADDR_VAR 0 8
48544: PUSH
48545: LD_INT 1
48547: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48548: LD_VAR 0 6
48552: PUSH
48553: LD_VAR 0 13
48557: PPUSH
48558: CALL_OW 247
48562: PUSH
48563: LD_INT 2
48565: EQUAL
48566: AND
48567: PUSH
48568: LD_VAR 0 13
48572: PPUSH
48573: CALL_OW 263
48577: PUSH
48578: LD_INT 1
48580: EQUAL
48581: AND
48582: IFFALSE 48746
// begin if IsDrivenBy ( tmp ) then
48584: LD_VAR 0 13
48588: PPUSH
48589: CALL_OW 311
48593: IFFALSE 48597
// continue ;
48595: GO 48396
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48597: LD_VAR 0 6
48601: PPUSH
48602: LD_INT 3
48604: PUSH
48605: LD_INT 60
48607: PUSH
48608: EMPTY
48609: LIST
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 3
48617: PUSH
48618: LD_INT 55
48620: PUSH
48621: EMPTY
48622: LIST
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PPUSH
48632: CALL_OW 72
48636: IFFALSE 48744
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48638: LD_ADDR_VAR 0 18
48642: PUSH
48643: LD_VAR 0 6
48647: PPUSH
48648: LD_INT 3
48650: PUSH
48651: LD_INT 60
48653: PUSH
48654: EMPTY
48655: LIST
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 3
48663: PUSH
48664: LD_INT 55
48666: PUSH
48667: EMPTY
48668: LIST
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PPUSH
48678: CALL_OW 72
48682: PUSH
48683: LD_INT 1
48685: ARRAY
48686: ST_TO_ADDR
// if IsInUnit ( driver ) then
48687: LD_VAR 0 18
48691: PPUSH
48692: CALL_OW 310
48696: IFFALSE 48707
// ComExit ( driver ) ;
48698: LD_VAR 0 18
48702: PPUSH
48703: CALL 73440 0 1
// AddComEnterUnit ( driver , tmp ) ;
48707: LD_VAR 0 18
48711: PPUSH
48712: LD_VAR 0 13
48716: PPUSH
48717: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48721: LD_VAR 0 18
48725: PPUSH
48726: LD_VAR 0 7
48730: PPUSH
48731: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48735: LD_VAR 0 18
48739: PPUSH
48740: CALL_OW 181
// end ; continue ;
48744: GO 48396
// end ; if not cleaners or not tmp in cleaners then
48746: LD_VAR 0 6
48750: NOT
48751: PUSH
48752: LD_VAR 0 13
48756: PUSH
48757: LD_VAR 0 6
48761: IN
48762: NOT
48763: OR
48764: IFFALSE 49071
// begin if dep then
48766: LD_VAR 0 17
48770: IFFALSE 48906
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48772: LD_ADDR_VAR 0 16
48776: PUSH
48777: LD_VAR 0 17
48781: PUSH
48782: LD_INT 1
48784: ARRAY
48785: PPUSH
48786: CALL_OW 250
48790: PPUSH
48791: LD_VAR 0 17
48795: PUSH
48796: LD_INT 1
48798: ARRAY
48799: PPUSH
48800: CALL_OW 254
48804: PPUSH
48805: LD_INT 5
48807: PPUSH
48808: CALL_OW 272
48812: PUSH
48813: LD_VAR 0 17
48817: PUSH
48818: LD_INT 1
48820: ARRAY
48821: PPUSH
48822: CALL_OW 251
48826: PPUSH
48827: LD_VAR 0 17
48831: PUSH
48832: LD_INT 1
48834: ARRAY
48835: PPUSH
48836: CALL_OW 254
48840: PPUSH
48841: LD_INT 5
48843: PPUSH
48844: CALL_OW 273
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48853: LD_VAR 0 16
48857: PUSH
48858: LD_INT 1
48860: ARRAY
48861: PPUSH
48862: LD_VAR 0 16
48866: PUSH
48867: LD_INT 2
48869: ARRAY
48870: PPUSH
48871: CALL_OW 488
48875: IFFALSE 48906
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48877: LD_VAR 0 13
48881: PPUSH
48882: LD_VAR 0 16
48886: PUSH
48887: LD_INT 1
48889: ARRAY
48890: PPUSH
48891: LD_VAR 0 16
48895: PUSH
48896: LD_INT 2
48898: ARRAY
48899: PPUSH
48900: CALL_OW 111
// continue ;
48904: GO 48396
// end ; end ; r := GetDir ( tmp ) ;
48906: LD_ADDR_VAR 0 15
48910: PUSH
48911: LD_VAR 0 13
48915: PPUSH
48916: CALL_OW 254
48920: ST_TO_ADDR
// if r = 5 then
48921: LD_VAR 0 15
48925: PUSH
48926: LD_INT 5
48928: EQUAL
48929: IFFALSE 48939
// r := 0 ;
48931: LD_ADDR_VAR 0 15
48935: PUSH
48936: LD_INT 0
48938: ST_TO_ADDR
// for j = r to 5 do
48939: LD_ADDR_VAR 0 10
48943: PUSH
48944: DOUBLE
48945: LD_VAR 0 15
48949: DEC
48950: ST_TO_ADDR
48951: LD_INT 5
48953: PUSH
48954: FOR_TO
48955: IFFALSE 49069
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48957: LD_ADDR_VAR 0 11
48961: PUSH
48962: LD_VAR 0 13
48966: PPUSH
48967: CALL_OW 250
48971: PPUSH
48972: LD_VAR 0 10
48976: PPUSH
48977: LD_INT 2
48979: PPUSH
48980: CALL_OW 272
48984: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48985: LD_ADDR_VAR 0 12
48989: PUSH
48990: LD_VAR 0 13
48994: PPUSH
48995: CALL_OW 251
48999: PPUSH
49000: LD_VAR 0 10
49004: PPUSH
49005: LD_INT 2
49007: PPUSH
49008: CALL_OW 273
49012: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49013: LD_VAR 0 11
49017: PPUSH
49018: LD_VAR 0 12
49022: PPUSH
49023: CALL_OW 488
49027: PUSH
49028: LD_VAR 0 11
49032: PPUSH
49033: LD_VAR 0 12
49037: PPUSH
49038: CALL_OW 428
49042: NOT
49043: AND
49044: IFFALSE 49067
// begin ComMoveXY ( tmp , _x , _y ) ;
49046: LD_VAR 0 13
49050: PPUSH
49051: LD_VAR 0 11
49055: PPUSH
49056: LD_VAR 0 12
49060: PPUSH
49061: CALL_OW 111
// break ;
49065: GO 49069
// end ; end ;
49067: GO 48954
49069: POP
49070: POP
// end ; end ;
49071: GO 48396
49073: POP
49074: POP
// end ;
49075: LD_VAR 0 8
49079: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49080: LD_INT 0
49082: PPUSH
// result := true ;
49083: LD_ADDR_VAR 0 3
49087: PUSH
49088: LD_INT 1
49090: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49091: LD_VAR 0 2
49095: PUSH
49096: LD_INT 24
49098: DOUBLE
49099: EQUAL
49100: IFTRUE 49110
49102: LD_INT 33
49104: DOUBLE
49105: EQUAL
49106: IFTRUE 49110
49108: GO 49135
49110: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49111: LD_ADDR_VAR 0 3
49115: PUSH
49116: LD_INT 32
49118: PPUSH
49119: LD_VAR 0 1
49123: PPUSH
49124: CALL_OW 321
49128: PUSH
49129: LD_INT 2
49131: EQUAL
49132: ST_TO_ADDR
49133: GO 49455
49135: LD_INT 20
49137: DOUBLE
49138: EQUAL
49139: IFTRUE 49143
49141: GO 49168
49143: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49144: LD_ADDR_VAR 0 3
49148: PUSH
49149: LD_INT 6
49151: PPUSH
49152: LD_VAR 0 1
49156: PPUSH
49157: CALL_OW 321
49161: PUSH
49162: LD_INT 2
49164: EQUAL
49165: ST_TO_ADDR
49166: GO 49455
49168: LD_INT 22
49170: DOUBLE
49171: EQUAL
49172: IFTRUE 49182
49174: LD_INT 36
49176: DOUBLE
49177: EQUAL
49178: IFTRUE 49182
49180: GO 49207
49182: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49183: LD_ADDR_VAR 0 3
49187: PUSH
49188: LD_INT 15
49190: PPUSH
49191: LD_VAR 0 1
49195: PPUSH
49196: CALL_OW 321
49200: PUSH
49201: LD_INT 2
49203: EQUAL
49204: ST_TO_ADDR
49205: GO 49455
49207: LD_INT 30
49209: DOUBLE
49210: EQUAL
49211: IFTRUE 49215
49213: GO 49240
49215: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49216: LD_ADDR_VAR 0 3
49220: PUSH
49221: LD_INT 20
49223: PPUSH
49224: LD_VAR 0 1
49228: PPUSH
49229: CALL_OW 321
49233: PUSH
49234: LD_INT 2
49236: EQUAL
49237: ST_TO_ADDR
49238: GO 49455
49240: LD_INT 28
49242: DOUBLE
49243: EQUAL
49244: IFTRUE 49254
49246: LD_INT 21
49248: DOUBLE
49249: EQUAL
49250: IFTRUE 49254
49252: GO 49279
49254: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49255: LD_ADDR_VAR 0 3
49259: PUSH
49260: LD_INT 21
49262: PPUSH
49263: LD_VAR 0 1
49267: PPUSH
49268: CALL_OW 321
49272: PUSH
49273: LD_INT 2
49275: EQUAL
49276: ST_TO_ADDR
49277: GO 49455
49279: LD_INT 16
49281: DOUBLE
49282: EQUAL
49283: IFTRUE 49287
49285: GO 49314
49287: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49288: LD_ADDR_VAR 0 3
49292: PUSH
49293: LD_EXP 45
49297: PPUSH
49298: LD_VAR 0 1
49302: PPUSH
49303: CALL_OW 321
49307: PUSH
49308: LD_INT 2
49310: EQUAL
49311: ST_TO_ADDR
49312: GO 49455
49314: LD_INT 19
49316: DOUBLE
49317: EQUAL
49318: IFTRUE 49328
49320: LD_INT 23
49322: DOUBLE
49323: EQUAL
49324: IFTRUE 49328
49326: GO 49355
49328: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49329: LD_ADDR_VAR 0 3
49333: PUSH
49334: LD_EXP 44
49338: PPUSH
49339: LD_VAR 0 1
49343: PPUSH
49344: CALL_OW 321
49348: PUSH
49349: LD_INT 2
49351: EQUAL
49352: ST_TO_ADDR
49353: GO 49455
49355: LD_INT 17
49357: DOUBLE
49358: EQUAL
49359: IFTRUE 49363
49361: GO 49388
49363: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49364: LD_ADDR_VAR 0 3
49368: PUSH
49369: LD_INT 39
49371: PPUSH
49372: LD_VAR 0 1
49376: PPUSH
49377: CALL_OW 321
49381: PUSH
49382: LD_INT 2
49384: EQUAL
49385: ST_TO_ADDR
49386: GO 49455
49388: LD_INT 18
49390: DOUBLE
49391: EQUAL
49392: IFTRUE 49396
49394: GO 49421
49396: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49397: LD_ADDR_VAR 0 3
49401: PUSH
49402: LD_INT 40
49404: PPUSH
49405: LD_VAR 0 1
49409: PPUSH
49410: CALL_OW 321
49414: PUSH
49415: LD_INT 2
49417: EQUAL
49418: ST_TO_ADDR
49419: GO 49455
49421: LD_INT 27
49423: DOUBLE
49424: EQUAL
49425: IFTRUE 49429
49427: GO 49454
49429: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49430: LD_ADDR_VAR 0 3
49434: PUSH
49435: LD_INT 35
49437: PPUSH
49438: LD_VAR 0 1
49442: PPUSH
49443: CALL_OW 321
49447: PUSH
49448: LD_INT 2
49450: EQUAL
49451: ST_TO_ADDR
49452: GO 49455
49454: POP
// end ;
49455: LD_VAR 0 3
49459: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49460: LD_INT 0
49462: PPUSH
49463: PPUSH
49464: PPUSH
49465: PPUSH
49466: PPUSH
49467: PPUSH
49468: PPUSH
49469: PPUSH
49470: PPUSH
49471: PPUSH
49472: PPUSH
// result := false ;
49473: LD_ADDR_VAR 0 6
49477: PUSH
49478: LD_INT 0
49480: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49481: LD_VAR 0 1
49485: NOT
49486: PUSH
49487: LD_VAR 0 1
49491: PPUSH
49492: CALL_OW 266
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: IN
49507: NOT
49508: OR
49509: PUSH
49510: LD_VAR 0 2
49514: NOT
49515: OR
49516: PUSH
49517: LD_VAR 0 5
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 3
49533: PUSH
49534: LD_INT 4
49536: PUSH
49537: LD_INT 5
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: IN
49548: NOT
49549: OR
49550: PUSH
49551: LD_VAR 0 3
49555: PPUSH
49556: LD_VAR 0 4
49560: PPUSH
49561: CALL_OW 488
49565: NOT
49566: OR
49567: IFFALSE 49571
// exit ;
49569: GO 50307
// side := GetSide ( depot ) ;
49571: LD_ADDR_VAR 0 9
49575: PUSH
49576: LD_VAR 0 1
49580: PPUSH
49581: CALL_OW 255
49585: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49586: LD_VAR 0 9
49590: PPUSH
49591: LD_VAR 0 2
49595: PPUSH
49596: CALL 49080 0 2
49600: NOT
49601: IFFALSE 49605
// exit ;
49603: GO 50307
// pom := GetBase ( depot ) ;
49605: LD_ADDR_VAR 0 10
49609: PUSH
49610: LD_VAR 0 1
49614: PPUSH
49615: CALL_OW 274
49619: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49620: LD_ADDR_VAR 0 11
49624: PUSH
49625: LD_VAR 0 2
49629: PPUSH
49630: LD_VAR 0 1
49634: PPUSH
49635: CALL_OW 248
49639: PPUSH
49640: CALL_OW 450
49644: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49645: LD_VAR 0 10
49649: PPUSH
49650: LD_INT 1
49652: PPUSH
49653: CALL_OW 275
49657: PUSH
49658: LD_VAR 0 11
49662: PUSH
49663: LD_INT 1
49665: ARRAY
49666: GREATEREQUAL
49667: PUSH
49668: LD_VAR 0 10
49672: PPUSH
49673: LD_INT 2
49675: PPUSH
49676: CALL_OW 275
49680: PUSH
49681: LD_VAR 0 11
49685: PUSH
49686: LD_INT 2
49688: ARRAY
49689: GREATEREQUAL
49690: AND
49691: PUSH
49692: LD_VAR 0 10
49696: PPUSH
49697: LD_INT 3
49699: PPUSH
49700: CALL_OW 275
49704: PUSH
49705: LD_VAR 0 11
49709: PUSH
49710: LD_INT 3
49712: ARRAY
49713: GREATEREQUAL
49714: AND
49715: NOT
49716: IFFALSE 49720
// exit ;
49718: GO 50307
// if GetBType ( depot ) = b_depot then
49720: LD_VAR 0 1
49724: PPUSH
49725: CALL_OW 266
49729: PUSH
49730: LD_INT 0
49732: EQUAL
49733: IFFALSE 49745
// dist := 28 else
49735: LD_ADDR_VAR 0 14
49739: PUSH
49740: LD_INT 28
49742: ST_TO_ADDR
49743: GO 49753
// dist := 36 ;
49745: LD_ADDR_VAR 0 14
49749: PUSH
49750: LD_INT 36
49752: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49753: LD_VAR 0 1
49757: PPUSH
49758: LD_VAR 0 3
49762: PPUSH
49763: LD_VAR 0 4
49767: PPUSH
49768: CALL_OW 297
49772: PUSH
49773: LD_VAR 0 14
49777: GREATER
49778: IFFALSE 49782
// exit ;
49780: GO 50307
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49782: LD_ADDR_VAR 0 12
49786: PUSH
49787: LD_VAR 0 2
49791: PPUSH
49792: LD_VAR 0 3
49796: PPUSH
49797: LD_VAR 0 4
49801: PPUSH
49802: LD_VAR 0 5
49806: PPUSH
49807: LD_VAR 0 1
49811: PPUSH
49812: CALL_OW 248
49816: PPUSH
49817: LD_INT 0
49819: PPUSH
49820: CALL 50312 0 6
49824: ST_TO_ADDR
// if not hexes then
49825: LD_VAR 0 12
49829: NOT
49830: IFFALSE 49834
// exit ;
49832: GO 50307
// hex := GetHexInfo ( x , y ) ;
49834: LD_ADDR_VAR 0 15
49838: PUSH
49839: LD_VAR 0 3
49843: PPUSH
49844: LD_VAR 0 4
49848: PPUSH
49849: CALL_OW 546
49853: ST_TO_ADDR
// if hex [ 1 ] then
49854: LD_VAR 0 15
49858: PUSH
49859: LD_INT 1
49861: ARRAY
49862: IFFALSE 49866
// exit ;
49864: GO 50307
// height := hex [ 2 ] ;
49866: LD_ADDR_VAR 0 13
49870: PUSH
49871: LD_VAR 0 15
49875: PUSH
49876: LD_INT 2
49878: ARRAY
49879: ST_TO_ADDR
// for i = 1 to hexes do
49880: LD_ADDR_VAR 0 7
49884: PUSH
49885: DOUBLE
49886: LD_INT 1
49888: DEC
49889: ST_TO_ADDR
49890: LD_VAR 0 12
49894: PUSH
49895: FOR_TO
49896: IFFALSE 50226
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49898: LD_VAR 0 12
49902: PUSH
49903: LD_VAR 0 7
49907: ARRAY
49908: PUSH
49909: LD_INT 1
49911: ARRAY
49912: PPUSH
49913: LD_VAR 0 12
49917: PUSH
49918: LD_VAR 0 7
49922: ARRAY
49923: PUSH
49924: LD_INT 2
49926: ARRAY
49927: PPUSH
49928: CALL_OW 488
49932: NOT
49933: PUSH
49934: LD_VAR 0 12
49938: PUSH
49939: LD_VAR 0 7
49943: ARRAY
49944: PUSH
49945: LD_INT 1
49947: ARRAY
49948: PPUSH
49949: LD_VAR 0 12
49953: PUSH
49954: LD_VAR 0 7
49958: ARRAY
49959: PUSH
49960: LD_INT 2
49962: ARRAY
49963: PPUSH
49964: CALL_OW 428
49968: PUSH
49969: LD_INT 0
49971: GREATER
49972: OR
49973: PUSH
49974: LD_VAR 0 12
49978: PUSH
49979: LD_VAR 0 7
49983: ARRAY
49984: PUSH
49985: LD_INT 1
49987: ARRAY
49988: PPUSH
49989: LD_VAR 0 12
49993: PUSH
49994: LD_VAR 0 7
49998: ARRAY
49999: PUSH
50000: LD_INT 2
50002: ARRAY
50003: PPUSH
50004: CALL_OW 351
50008: OR
50009: IFFALSE 50015
// exit ;
50011: POP
50012: POP
50013: GO 50307
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50015: LD_ADDR_VAR 0 8
50019: PUSH
50020: LD_VAR 0 12
50024: PUSH
50025: LD_VAR 0 7
50029: ARRAY
50030: PUSH
50031: LD_INT 1
50033: ARRAY
50034: PPUSH
50035: LD_VAR 0 12
50039: PUSH
50040: LD_VAR 0 7
50044: ARRAY
50045: PUSH
50046: LD_INT 2
50048: ARRAY
50049: PPUSH
50050: CALL_OW 546
50054: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50055: LD_VAR 0 8
50059: PUSH
50060: LD_INT 1
50062: ARRAY
50063: PUSH
50064: LD_VAR 0 8
50068: PUSH
50069: LD_INT 2
50071: ARRAY
50072: PUSH
50073: LD_VAR 0 13
50077: PUSH
50078: LD_INT 2
50080: PLUS
50081: GREATER
50082: OR
50083: PUSH
50084: LD_VAR 0 8
50088: PUSH
50089: LD_INT 2
50091: ARRAY
50092: PUSH
50093: LD_VAR 0 13
50097: PUSH
50098: LD_INT 2
50100: MINUS
50101: LESS
50102: OR
50103: PUSH
50104: LD_VAR 0 8
50108: PUSH
50109: LD_INT 3
50111: ARRAY
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: LD_INT 8
50118: PUSH
50119: LD_INT 9
50121: PUSH
50122: LD_INT 10
50124: PUSH
50125: LD_INT 11
50127: PUSH
50128: LD_INT 12
50130: PUSH
50131: LD_INT 13
50133: PUSH
50134: LD_INT 16
50136: PUSH
50137: LD_INT 17
50139: PUSH
50140: LD_INT 18
50142: PUSH
50143: LD_INT 19
50145: PUSH
50146: LD_INT 20
50148: PUSH
50149: LD_INT 21
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: IN
50167: NOT
50168: OR
50169: PUSH
50170: LD_VAR 0 8
50174: PUSH
50175: LD_INT 5
50177: ARRAY
50178: NOT
50179: OR
50180: PUSH
50181: LD_VAR 0 8
50185: PUSH
50186: LD_INT 6
50188: ARRAY
50189: PUSH
50190: LD_INT 1
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: LD_INT 7
50198: PUSH
50199: LD_INT 9
50201: PUSH
50202: LD_INT 10
50204: PUSH
50205: LD_INT 11
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: IN
50216: NOT
50217: OR
50218: IFFALSE 50224
// exit ;
50220: POP
50221: POP
50222: GO 50307
// end ;
50224: GO 49895
50226: POP
50227: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50228: LD_VAR 0 9
50232: PPUSH
50233: LD_VAR 0 3
50237: PPUSH
50238: LD_VAR 0 4
50242: PPUSH
50243: LD_INT 20
50245: PPUSH
50246: CALL 42253 0 4
50250: PUSH
50251: LD_INT 4
50253: ARRAY
50254: IFFALSE 50258
// exit ;
50256: GO 50307
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50258: LD_VAR 0 2
50262: PUSH
50263: LD_INT 29
50265: PUSH
50266: LD_INT 30
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: IN
50273: PUSH
50274: LD_VAR 0 3
50278: PPUSH
50279: LD_VAR 0 4
50283: PPUSH
50284: LD_VAR 0 9
50288: PPUSH
50289: CALL_OW 440
50293: NOT
50294: AND
50295: IFFALSE 50299
// exit ;
50297: GO 50307
// result := true ;
50299: LD_ADDR_VAR 0 6
50303: PUSH
50304: LD_INT 1
50306: ST_TO_ADDR
// end ;
50307: LD_VAR 0 6
50311: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50312: LD_INT 0
50314: PPUSH
50315: PPUSH
50316: PPUSH
50317: PPUSH
50318: PPUSH
50319: PPUSH
50320: PPUSH
50321: PPUSH
50322: PPUSH
50323: PPUSH
50324: PPUSH
50325: PPUSH
50326: PPUSH
50327: PPUSH
50328: PPUSH
50329: PPUSH
50330: PPUSH
50331: PPUSH
50332: PPUSH
50333: PPUSH
50334: PPUSH
50335: PPUSH
50336: PPUSH
50337: PPUSH
50338: PPUSH
50339: PPUSH
50340: PPUSH
50341: PPUSH
50342: PPUSH
50343: PPUSH
50344: PPUSH
50345: PPUSH
50346: PPUSH
50347: PPUSH
50348: PPUSH
50349: PPUSH
50350: PPUSH
50351: PPUSH
50352: PPUSH
50353: PPUSH
50354: PPUSH
50355: PPUSH
50356: PPUSH
50357: PPUSH
50358: PPUSH
50359: PPUSH
50360: PPUSH
50361: PPUSH
50362: PPUSH
50363: PPUSH
50364: PPUSH
50365: PPUSH
50366: PPUSH
50367: PPUSH
50368: PPUSH
50369: PPUSH
50370: PPUSH
50371: PPUSH
// result = [ ] ;
50372: LD_ADDR_VAR 0 7
50376: PUSH
50377: EMPTY
50378: ST_TO_ADDR
// temp_list = [ ] ;
50379: LD_ADDR_VAR 0 9
50383: PUSH
50384: EMPTY
50385: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50386: LD_VAR 0 4
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: LD_INT 4
50405: PUSH
50406: LD_INT 5
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: IN
50417: NOT
50418: PUSH
50419: LD_VAR 0 1
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: IN
50434: PUSH
50435: LD_VAR 0 5
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 2
50445: PUSH
50446: LD_INT 3
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: LIST
50453: IN
50454: NOT
50455: AND
50456: OR
50457: IFFALSE 50461
// exit ;
50459: GO 68852
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50461: LD_VAR 0 1
50465: PUSH
50466: LD_INT 6
50468: PUSH
50469: LD_INT 7
50471: PUSH
50472: LD_INT 8
50474: PUSH
50475: LD_INT 13
50477: PUSH
50478: LD_INT 12
50480: PUSH
50481: LD_INT 15
50483: PUSH
50484: LD_INT 11
50486: PUSH
50487: LD_INT 14
50489: PUSH
50490: LD_INT 10
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: IN
50504: IFFALSE 50514
// btype = b_lab ;
50506: LD_ADDR_VAR 0 1
50510: PUSH
50511: LD_INT 6
50513: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50514: LD_VAR 0 6
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: LIST
50532: IN
50533: NOT
50534: PUSH
50535: LD_VAR 0 1
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: LD_INT 3
50551: PUSH
50552: LD_INT 6
50554: PUSH
50555: LD_INT 36
50557: PUSH
50558: LD_INT 4
50560: PUSH
50561: LD_INT 5
50563: PUSH
50564: LD_INT 31
50566: PUSH
50567: LD_INT 32
50569: PUSH
50570: LD_INT 33
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: IN
50586: NOT
50587: PUSH
50588: LD_VAR 0 6
50592: PUSH
50593: LD_INT 1
50595: EQUAL
50596: AND
50597: OR
50598: PUSH
50599: LD_VAR 0 1
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: LD_INT 3
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: IN
50614: NOT
50615: PUSH
50616: LD_VAR 0 6
50620: PUSH
50621: LD_INT 2
50623: EQUAL
50624: AND
50625: OR
50626: IFFALSE 50636
// mode = 0 ;
50628: LD_ADDR_VAR 0 6
50632: PUSH
50633: LD_INT 0
50635: ST_TO_ADDR
// case mode of 0 :
50636: LD_VAR 0 6
50640: PUSH
50641: LD_INT 0
50643: DOUBLE
50644: EQUAL
50645: IFTRUE 50649
50647: GO 62102
50649: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50650: LD_ADDR_VAR 0 11
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: LD_INT 3
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 0
50806: PUSH
50807: LD_INT 3
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50843: LD_ADDR_VAR 0 12
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 3
51000: NEG
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 3
51011: NEG
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51039: LD_ADDR_VAR 0 13
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: LD_INT 3
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 3
51198: NEG
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 3
51210: NEG
51211: PUSH
51212: LD_INT 3
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51238: LD_ADDR_VAR 0 14
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: LD_INT 2
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: LD_INT 3
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 3
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51434: LD_ADDR_VAR 0 15
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: LD_INT 1
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 2
51568: NEG
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 3
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 3
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51627: LD_ADDR_VAR 0 16
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: LD_INT 2
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 2
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: LD_INT 2
51766: NEG
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 3
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 3
51784: PUSH
51785: LD_INT 3
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 2
51794: PUSH
51795: LD_INT 3
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51820: LD_ADDR_VAR 0 17
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 0
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 2
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 2
52019: NEG
52020: PUSH
52021: LD_INT 2
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52050: LD_ADDR_VAR 0 18
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: NEG
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 2
52237: NEG
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 2
52249: NEG
52250: PUSH
52251: LD_INT 2
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52280: LD_ADDR_VAR 0 19
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: LD_INT 1
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: LD_INT 2
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 2
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: LD_INT 2
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52510: LD_ADDR_VAR 0 20
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 2
52686: NEG
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 2
52709: NEG
52710: PUSH
52711: LD_INT 2
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52740: LD_ADDR_VAR 0 21
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 1
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 2
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52970: LD_ADDR_VAR 0 22
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: NEG
53052: PUSH
53053: LD_INT 2
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 2
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 2
53169: NEG
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53200: LD_ADDR_VAR 0 23
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: NEG
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: LD_INT 2
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: NEG
53412: PUSH
53413: LD_INT 3
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 3
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 2
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53480: LD_ADDR_VAR 0 24
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: PUSH
53616: LD_INT 2
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: LD_INT 2
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: NEG
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: LD_INT 2
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: LD_INT 2
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 3
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53756: LD_ADDR_VAR 0 25
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 3
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 3
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 3
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54030: LD_ADDR_VAR 0 26
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: LD_INT 1
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: NEG
54100: PUSH
54101: LD_INT 1
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: LD_INT 2
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: LD_INT 2
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 2
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: NEG
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 2
54241: PUSH
54242: LD_INT 3
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 3
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: NEG
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: NEG
54273: PUSH
54274: LD_INT 1
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54306: LD_ADDR_VAR 0 27
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: NEG
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: NEG
54506: PUSH
54507: LD_INT 2
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 3
54539: NEG
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 3
54551: NEG
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54586: LD_ADDR_VAR 0 28
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: NEG
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: LD_INT 3
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: LD_INT 3
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 3
54821: NEG
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 3
54833: NEG
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54868: LD_ADDR_VAR 0 29
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: LD_INT 2
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: LD_INT 2
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: NEG
55047: PUSH
55048: LD_INT 2
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: NEG
55059: PUSH
55060: LD_INT 3
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 3
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: LD_INT 3
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 3
55112: NEG
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55147: LD_ADDR_VAR 0 30
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: LD_INT 2
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 1
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: LD_INT 2
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: LD_INT 2
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 2
55313: NEG
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: NEG
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 3
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 3
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 3
55390: NEG
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55425: LD_ADDR_VAR 0 31
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 2
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 2
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 2
55590: NEG
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: LD_INT 3
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 3
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 3
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 3
55668: NEG
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55703: LD_ADDR_VAR 0 32
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 2
55869: NEG
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: LD_INT 3
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: LD_INT 2
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: LD_INT 3
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: NEG
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 3
55946: NEG
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55981: LD_ADDR_VAR 0 33
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 1
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: LD_INT 3
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 3
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 3
56225: NEG
56226: PUSH
56227: LD_INT 2
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56260: LD_ADDR_VAR 0 34
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: LD_INT 2
56345: NEG
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: LD_INT 3
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: LD_INT 2
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 3
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: LD_INT 3
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 3
56505: NEG
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56540: LD_ADDR_VAR 0 35
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: LD_INT 1
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 2
56631: NEG
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56652: LD_ADDR_VAR 0 36
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56764: LD_ADDR_VAR 0 37
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56876: LD_ADDR_VAR 0 38
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: LD_INT 1
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 1
56934: NEG
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 1
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56988: LD_ADDR_VAR 0 39
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57100: LD_ADDR_VAR 0 40
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57212: LD_ADDR_VAR 0 41
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 1
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 1
57293: NEG
57294: PUSH
57295: LD_INT 2
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: LD_INT 2
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 2
57367: NEG
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: NEG
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 2
57402: NEG
57403: PUSH
57404: LD_INT 3
57406: NEG
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 3
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 3
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 3
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 3
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: LD_INT 3
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 2
57475: NEG
57476: PUSH
57477: LD_INT 1
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 3
57486: NEG
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 3
57497: NEG
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: LD_INT 2
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 3
57521: NEG
57522: PUSH
57523: LD_INT 3
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57562: LD_ADDR_VAR 0 42
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 0
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: LD_INT 2
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: LD_INT 2
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: LD_INT 2
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: NEG
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: LD_INT 3
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: LD_INT 3
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 3
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: LD_INT 3
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 2
57818: PUSH
57819: LD_INT 3
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: LD_INT 3
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: LD_INT 3
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 3
57859: NEG
57860: PUSH
57861: LD_INT 2
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 3
57871: NEG
57872: PUSH
57873: LD_INT 3
57875: NEG
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57912: LD_ADDR_VAR 0 43
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: LD_INT 0
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: LD_INT 1
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 2
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: LD_INT 1
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: LD_INT 3
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: LD_INT 3
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: PUSH
58167: LD_INT 3
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: LD_INT 3
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: LD_INT 2
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 2
58197: NEG
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 3
58208: NEG
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 3
58219: NEG
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58260: LD_ADDR_VAR 0 44
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 2
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: NEG
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 2
58426: NEG
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 2
58438: NEG
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 2
58450: NEG
58451: PUSH
58452: LD_INT 3
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 3
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 3
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 3
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: LD_INT 3
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 2
58523: NEG
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 3
58534: NEG
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 3
58545: NEG
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 3
58557: NEG
58558: PUSH
58559: LD_INT 2
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: LD_INT 3
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58610: LD_ADDR_VAR 0 45
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 1
58691: NEG
58692: PUSH
58693: LD_INT 2
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: LD_INT 2
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 2
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 2
58788: NEG
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: LD_INT 3
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: LD_INT 3
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: LD_INT 3
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: LD_INT 2
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 3
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 3
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 2
58866: PUSH
58867: LD_INT 3
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: LD_INT 3
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: LD_INT 2
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 3
58907: NEG
58908: PUSH
58909: LD_INT 2
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: LD_INT 3
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58960: LD_ADDR_VAR 0 46
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: LD_INT 3
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 0
59161: PUSH
59162: LD_INT 3
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: LD_INT 2
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 3
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 3
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: PUSH
59215: LD_INT 3
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: LD_INT 3
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 2
59245: NEG
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 3
59256: NEG
59257: PUSH
59258: LD_INT 0
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 3
59267: NEG
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59308: LD_ADDR_VAR 0 47
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 0
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 0
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 2
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 2
59423: NEG
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 2
59435: NEG
59436: PUSH
59437: LD_INT 2
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59459: LD_ADDR_VAR 0 48
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: LD_INT 1
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 1
59528: NEG
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: LD_INT 2
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59606: LD_ADDR_VAR 0 49
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59750: LD_ADDR_VAR 0 50
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 2
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: LD_INT 2
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: NEG
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59894: LD_ADDR_VAR 0 51
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: LD_INT 2
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 2
60017: NEG
60018: PUSH
60019: LD_INT 1
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60041: LD_ADDR_VAR 0 52
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 0
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: LD_INT 0
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: NEG
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: LD_INT 2
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 2
60168: NEG
60169: PUSH
60170: LD_INT 2
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60192: LD_ADDR_VAR 0 53
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 1
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: LD_INT 2
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: LD_INT 2
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: LD_INT 1
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 2
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: LD_INT 2
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: LD_INT 2
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 2
60368: NEG
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: LD_INT 2
60379: NEG
60380: PUSH
60381: LD_INT 1
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 2
60391: NEG
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60422: LD_ADDR_VAR 0 54
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 1
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: NEG
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: NEG
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: LD_INT 2
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 2
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 2
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: PUSH
60558: LD_INT 2
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 2
60621: NEG
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60652: LD_ADDR_VAR 0 55
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 0
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: NEG
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: LD_INT 2
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: LD_INT 2
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 2
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: PUSH
60788: LD_INT 2
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 2
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 2
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: NEG
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 2
60839: NEG
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: NEG
60852: PUSH
60853: LD_INT 2
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60882: LD_ADDR_VAR 0 56
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: NEG
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 2
60978: NEG
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 1
60986: PUSH
60987: LD_INT 1
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: PUSH
61018: LD_INT 2
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: LD_INT 2
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 2
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 2
61058: NEG
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 2
61081: NEG
61082: PUSH
61083: LD_INT 2
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61112: LD_ADDR_VAR 0 57
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 2
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 2
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 2
61247: PUSH
61248: LD_INT 2
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 1
61257: PUSH
61258: LD_INT 2
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: LD_INT 2
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: LD_INT 1
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 2
61288: NEG
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 2
61311: NEG
61312: PUSH
61313: LD_INT 2
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61342: LD_ADDR_VAR 0 58
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: LD_INT 1
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 0
61435: PUSH
61436: LD_INT 2
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 2
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: LD_INT 2
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: LD_INT 2
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 0
61497: PUSH
61498: LD_INT 2
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 2
61518: NEG
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 2
61529: NEG
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 2
61541: NEG
61542: PUSH
61543: LD_INT 2
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61572: LD_ADDR_VAR 0 59
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: LD_INT 0
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: LD_INT 1
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61660: LD_ADDR_VAR 0 60
61664: PUSH
61665: LD_INT 0
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: LD_INT 1
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 1
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: LD_INT 1
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 1
61729: NEG
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61748: LD_ADDR_VAR 0 61
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: LD_INT 1
61768: NEG
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: LD_INT 1
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 0
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 1
61806: NEG
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61836: LD_ADDR_VAR 0 62
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 1
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61924: LD_ADDR_VAR 0 63
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 0
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: NEG
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62012: LD_ADDR_VAR 0 64
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: LD_INT 1
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: LD_INT 1
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 1
62070: NEG
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: NEG
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: ST_TO_ADDR
// end ; 1 :
62100: GO 67997
62102: LD_INT 1
62104: DOUBLE
62105: EQUAL
62106: IFTRUE 62110
62108: GO 64733
62110: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62111: LD_ADDR_VAR 0 11
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: LD_INT 3
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 0
62130: PUSH
62131: LD_INT 3
62133: NEG
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 1
62141: PUSH
62142: LD_INT 2
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: LIST
62154: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62155: LD_ADDR_VAR 0 12
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 3
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 3
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: LIST
62195: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62196: LD_ADDR_VAR 0 13
62200: PUSH
62201: LD_INT 3
62203: PUSH
62204: LD_INT 2
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 3
62213: PUSH
62214: LD_INT 3
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 2
62223: PUSH
62224: LD_INT 3
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: LIST
62235: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62236: LD_ADDR_VAR 0 14
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: LD_INT 3
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: LD_INT 3
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: LD_INT 2
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: LIST
62276: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62277: LD_ADDR_VAR 0 15
62281: PUSH
62282: LD_INT 2
62284: NEG
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 3
62295: NEG
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 3
62306: NEG
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: LIST
62320: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62321: LD_ADDR_VAR 0 16
62325: PUSH
62326: LD_INT 2
62328: NEG
62329: PUSH
62330: LD_INT 3
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 3
62340: NEG
62341: PUSH
62342: LD_INT 2
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 3
62352: NEG
62353: PUSH
62354: LD_INT 3
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: LIST
62366: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62367: LD_ADDR_VAR 0 17
62371: PUSH
62372: LD_INT 1
62374: NEG
62375: PUSH
62376: LD_INT 3
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 3
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 1
62397: PUSH
62398: LD_INT 2
62400: NEG
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: LIST
62410: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62411: LD_ADDR_VAR 0 18
62415: PUSH
62416: LD_INT 2
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 3
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 3
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: LIST
62451: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62452: LD_ADDR_VAR 0 19
62456: PUSH
62457: LD_INT 3
62459: PUSH
62460: LD_INT 2
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 3
62469: PUSH
62470: LD_INT 3
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 2
62479: PUSH
62480: LD_INT 3
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: LIST
62491: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62492: LD_ADDR_VAR 0 20
62496: PUSH
62497: LD_INT 1
62499: PUSH
62500: LD_INT 3
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: LD_INT 3
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: NEG
62520: PUSH
62521: LD_INT 2
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: LIST
62532: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62533: LD_ADDR_VAR 0 21
62537: PUSH
62538: LD_INT 2
62540: NEG
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 3
62551: NEG
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 3
62562: NEG
62563: PUSH
62564: LD_INT 1
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: LIST
62576: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62577: LD_ADDR_VAR 0 22
62581: PUSH
62582: LD_INT 2
62584: NEG
62585: PUSH
62586: LD_INT 3
62588: NEG
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 3
62596: NEG
62597: PUSH
62598: LD_INT 2
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 3
62608: NEG
62609: PUSH
62610: LD_INT 3
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: LIST
62622: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62623: LD_ADDR_VAR 0 23
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: LD_INT 3
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: LD_INT 4
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 1
62653: PUSH
62654: LD_INT 3
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: LIST
62666: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62667: LD_ADDR_VAR 0 24
62671: PUSH
62672: LD_INT 3
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 3
62684: PUSH
62685: LD_INT 1
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 4
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: LIST
62707: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62708: LD_ADDR_VAR 0 25
62712: PUSH
62713: LD_INT 3
62715: PUSH
62716: LD_INT 3
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 4
62725: PUSH
62726: LD_INT 3
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 3
62735: PUSH
62736: LD_INT 4
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: LIST
62747: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62748: LD_ADDR_VAR 0 26
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: LD_INT 3
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: LD_INT 4
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: LD_INT 3
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: LIST
62788: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62789: LD_ADDR_VAR 0 27
62793: PUSH
62794: LD_INT 3
62796: NEG
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 3
62807: NEG
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 4
62818: NEG
62819: PUSH
62820: LD_INT 1
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: LIST
62832: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62833: LD_ADDR_VAR 0 28
62837: PUSH
62838: LD_INT 3
62840: NEG
62841: PUSH
62842: LD_INT 3
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 3
62852: NEG
62853: PUSH
62854: LD_INT 4
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 4
62864: NEG
62865: PUSH
62866: LD_INT 3
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: LIST
62878: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62879: LD_ADDR_VAR 0 29
62883: PUSH
62884: LD_INT 1
62886: NEG
62887: PUSH
62888: LD_INT 3
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: LD_INT 3
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 1
62909: PUSH
62910: LD_INT 2
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: NEG
62921: PUSH
62922: LD_INT 4
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: LD_INT 4
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: LD_INT 3
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 1
62954: NEG
62955: PUSH
62956: LD_INT 5
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: LD_INT 5
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: LD_INT 4
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: LD_INT 6
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: LD_INT 6
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: LD_INT 5
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63034: LD_ADDR_VAR 0 30
63038: PUSH
63039: LD_INT 2
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 3
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 3
63062: PUSH
63063: LD_INT 1
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 3
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 4
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 4
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 4
63103: PUSH
63104: LD_INT 1
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 5
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 5
63124: PUSH
63125: LD_INT 1
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 5
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 6
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 6
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63177: LD_ADDR_VAR 0 31
63181: PUSH
63182: LD_INT 3
63184: PUSH
63185: LD_INT 2
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 3
63194: PUSH
63195: LD_INT 3
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: LD_INT 3
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 4
63214: PUSH
63215: LD_INT 3
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 4
63224: PUSH
63225: LD_INT 4
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 3
63234: PUSH
63235: LD_INT 4
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 5
63244: PUSH
63245: LD_INT 4
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 5
63254: PUSH
63255: LD_INT 5
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 4
63264: PUSH
63265: LD_INT 5
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 6
63274: PUSH
63275: LD_INT 5
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 6
63284: PUSH
63285: LD_INT 6
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 5
63294: PUSH
63295: LD_INT 6
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63316: LD_ADDR_VAR 0 32
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 3
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: LD_INT 3
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: LD_INT 2
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 1
63354: PUSH
63355: LD_INT 4
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: LD_INT 4
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 1
63374: NEG
63375: PUSH
63376: LD_INT 3
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: LD_INT 5
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: LD_INT 5
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: LD_INT 4
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: LD_INT 6
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 6
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 1
63436: NEG
63437: PUSH
63438: LD_INT 5
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63459: LD_ADDR_VAR 0 33
63463: PUSH
63464: LD_INT 2
63466: NEG
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 3
63477: NEG
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 3
63488: NEG
63489: PUSH
63490: LD_INT 1
63492: NEG
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 3
63500: NEG
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 4
63511: NEG
63512: PUSH
63513: LD_INT 0
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 4
63522: NEG
63523: PUSH
63524: LD_INT 1
63526: NEG
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 4
63534: NEG
63535: PUSH
63536: LD_INT 1
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 5
63545: NEG
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 5
63556: NEG
63557: PUSH
63558: LD_INT 1
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 5
63568: NEG
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 6
63579: NEG
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 6
63590: NEG
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63614: LD_ADDR_VAR 0 34
63618: PUSH
63619: LD_INT 2
63621: NEG
63622: PUSH
63623: LD_INT 3
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 3
63633: NEG
63634: PUSH
63635: LD_INT 2
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 3
63645: NEG
63646: PUSH
63647: LD_INT 3
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 3
63657: NEG
63658: PUSH
63659: LD_INT 4
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 4
63669: NEG
63670: PUSH
63671: LD_INT 3
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 4
63681: NEG
63682: PUSH
63683: LD_INT 4
63685: NEG
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 4
63693: NEG
63694: PUSH
63695: LD_INT 5
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 5
63705: NEG
63706: PUSH
63707: LD_INT 4
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 5
63717: NEG
63718: PUSH
63719: LD_INT 5
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 5
63729: NEG
63730: PUSH
63731: LD_INT 6
63733: NEG
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 6
63741: NEG
63742: PUSH
63743: LD_INT 5
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 6
63753: NEG
63754: PUSH
63755: LD_INT 6
63757: NEG
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63777: LD_ADDR_VAR 0 41
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: LD_INT 2
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: NEG
63796: PUSH
63797: LD_INT 3
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: PUSH
63808: LD_INT 2
63810: NEG
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: LIST
63820: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63821: LD_ADDR_VAR 0 42
63825: PUSH
63826: LD_INT 2
63828: PUSH
63829: LD_INT 0
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 3
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: LIST
63861: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63862: LD_ADDR_VAR 0 43
63866: PUSH
63867: LD_INT 2
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 3
63879: PUSH
63880: LD_INT 2
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 2
63889: PUSH
63890: LD_INT 3
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: LIST
63901: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63902: LD_ADDR_VAR 0 44
63906: PUSH
63907: LD_INT 0
63909: PUSH
63910: LD_INT 2
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: LD_INT 3
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: NEG
63930: PUSH
63931: LD_INT 2
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: LIST
63942: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63943: LD_ADDR_VAR 0 45
63947: PUSH
63948: LD_INT 2
63950: NEG
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 3
63972: NEG
63973: PUSH
63974: LD_INT 1
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: LIST
63986: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63987: LD_ADDR_VAR 0 46
63991: PUSH
63992: LD_INT 2
63994: NEG
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 2
64006: NEG
64007: PUSH
64008: LD_INT 3
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 3
64018: NEG
64019: PUSH
64020: LD_INT 2
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: LIST
64032: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64033: LD_ADDR_VAR 0 47
64037: PUSH
64038: LD_INT 2
64040: NEG
64041: PUSH
64042: LD_INT 3
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 1
64052: NEG
64053: PUSH
64054: LD_INT 3
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64066: LD_ADDR_VAR 0 48
64070: PUSH
64071: LD_INT 1
64073: PUSH
64074: LD_INT 2
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 2
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64097: LD_ADDR_VAR 0 49
64101: PUSH
64102: LD_INT 3
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 3
64114: PUSH
64115: LD_INT 2
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64126: LD_ADDR_VAR 0 50
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: LD_INT 3
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 1
64143: PUSH
64144: LD_INT 3
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64155: LD_ADDR_VAR 0 51
64159: PUSH
64160: LD_INT 1
64162: NEG
64163: PUSH
64164: LD_INT 2
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 2
64173: NEG
64174: PUSH
64175: LD_INT 1
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64186: LD_ADDR_VAR 0 52
64190: PUSH
64191: LD_INT 3
64193: NEG
64194: PUSH
64195: LD_INT 1
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 3
64205: NEG
64206: PUSH
64207: LD_INT 2
64209: NEG
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64219: LD_ADDR_VAR 0 53
64223: PUSH
64224: LD_INT 1
64226: NEG
64227: PUSH
64228: LD_INT 3
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: LD_INT 3
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: LD_INT 2
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: LIST
64262: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64263: LD_ADDR_VAR 0 54
64267: PUSH
64268: LD_INT 2
64270: PUSH
64271: LD_INT 1
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 3
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 3
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: LIST
64303: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64304: LD_ADDR_VAR 0 55
64308: PUSH
64309: LD_INT 3
64311: PUSH
64312: LD_INT 2
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 3
64321: PUSH
64322: LD_INT 3
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 2
64331: PUSH
64332: LD_INT 3
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: LIST
64343: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64344: LD_ADDR_VAR 0 56
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: LD_INT 3
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: LD_INT 3
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: NEG
64372: PUSH
64373: LD_INT 2
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: LIST
64384: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64385: LD_ADDR_VAR 0 57
64389: PUSH
64390: LD_INT 2
64392: NEG
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 3
64403: NEG
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 3
64414: NEG
64415: PUSH
64416: LD_INT 1
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: LIST
64428: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64429: LD_ADDR_VAR 0 58
64433: PUSH
64434: LD_INT 2
64436: NEG
64437: PUSH
64438: LD_INT 3
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 3
64448: NEG
64449: PUSH
64450: LD_INT 2
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 3
64460: NEG
64461: PUSH
64462: LD_INT 3
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: LIST
64474: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64475: LD_ADDR_VAR 0 59
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: LD_INT 2
64486: NEG
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: LD_INT 2
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: LD_INT 1
64508: NEG
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: LIST
64518: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64519: LD_ADDR_VAR 0 60
64523: PUSH
64524: LD_INT 1
64526: PUSH
64527: LD_INT 1
64529: NEG
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 2
64537: PUSH
64538: LD_INT 0
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 2
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64560: LD_ADDR_VAR 0 61
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 2
64577: PUSH
64578: LD_INT 2
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: LD_INT 2
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: LIST
64599: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64600: LD_ADDR_VAR 0 62
64604: PUSH
64605: LD_INT 1
64607: PUSH
64608: LD_INT 2
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: LD_INT 2
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 1
64627: NEG
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: LIST
64640: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64641: LD_ADDR_VAR 0 63
64645: PUSH
64646: LD_INT 1
64648: NEG
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 2
64659: NEG
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 2
64670: NEG
64671: PUSH
64672: LD_INT 1
64674: NEG
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: LIST
64684: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64685: LD_ADDR_VAR 0 64
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: LD_INT 2
64696: NEG
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 2
64704: NEG
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 2
64716: NEG
64717: PUSH
64718: LD_INT 2
64720: NEG
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: LIST
64730: ST_TO_ADDR
// end ; 2 :
64731: GO 67997
64733: LD_INT 2
64735: DOUBLE
64736: EQUAL
64737: IFTRUE 64741
64739: GO 67996
64741: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64742: LD_ADDR_VAR 0 29
64746: PUSH
64747: LD_INT 4
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 4
64759: PUSH
64760: LD_INT 1
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 5
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 5
64780: PUSH
64781: LD_INT 1
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 4
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 3
64800: PUSH
64801: LD_INT 0
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 3
64810: PUSH
64811: LD_INT 1
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 3
64821: PUSH
64822: LD_INT 2
64824: NEG
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 5
64832: PUSH
64833: LD_INT 2
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 3
64842: PUSH
64843: LD_INT 3
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 3
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 4
64862: PUSH
64863: LD_INT 3
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 4
64872: PUSH
64873: LD_INT 4
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 3
64882: PUSH
64883: LD_INT 4
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 2
64892: PUSH
64893: LD_INT 3
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 2
64902: PUSH
64903: LD_INT 2
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 4
64912: PUSH
64913: LD_INT 2
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 2
64922: PUSH
64923: LD_INT 4
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: LD_INT 4
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: LD_INT 3
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: LD_INT 4
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 1
64962: PUSH
64963: LD_INT 5
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: LD_INT 5
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 1
64982: NEG
64983: PUSH
64984: LD_INT 4
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 1
64993: NEG
64994: PUSH
64995: LD_INT 3
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 2
65004: PUSH
65005: LD_INT 5
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 2
65014: NEG
65015: PUSH
65016: LD_INT 3
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 3
65025: NEG
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 3
65036: NEG
65037: PUSH
65038: LD_INT 1
65040: NEG
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 2
65048: NEG
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 2
65059: NEG
65060: PUSH
65061: LD_INT 1
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 3
65070: NEG
65071: PUSH
65072: LD_INT 1
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 4
65081: NEG
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 4
65092: NEG
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 4
65104: NEG
65105: PUSH
65106: LD_INT 2
65108: NEG
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 2
65116: NEG
65117: PUSH
65118: LD_INT 2
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 4
65127: NEG
65128: PUSH
65129: LD_INT 4
65131: NEG
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 4
65139: NEG
65140: PUSH
65141: LD_INT 5
65143: NEG
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 3
65151: NEG
65152: PUSH
65153: LD_INT 4
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 3
65163: NEG
65164: PUSH
65165: LD_INT 3
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 4
65175: NEG
65176: PUSH
65177: LD_INT 3
65179: NEG
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 5
65187: NEG
65188: PUSH
65189: LD_INT 4
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 5
65199: NEG
65200: PUSH
65201: LD_INT 5
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 3
65211: NEG
65212: PUSH
65213: LD_INT 5
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 5
65223: NEG
65224: PUSH
65225: LD_INT 3
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65280: LD_ADDR_VAR 0 30
65284: PUSH
65285: LD_INT 4
65287: PUSH
65288: LD_INT 4
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 4
65297: PUSH
65298: LD_INT 3
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 5
65307: PUSH
65308: LD_INT 4
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 5
65317: PUSH
65318: LD_INT 5
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 4
65327: PUSH
65328: LD_INT 5
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 3
65337: PUSH
65338: LD_INT 4
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 3
65347: PUSH
65348: LD_INT 3
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 5
65357: PUSH
65358: LD_INT 3
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 3
65367: PUSH
65368: LD_INT 5
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 0
65377: PUSH
65378: LD_INT 3
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: LD_INT 2
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 1
65397: PUSH
65398: LD_INT 3
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: LD_INT 4
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 0
65417: PUSH
65418: LD_INT 4
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 1
65427: NEG
65428: PUSH
65429: LD_INT 3
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 1
65438: NEG
65439: PUSH
65440: LD_INT 2
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 2
65449: PUSH
65450: LD_INT 4
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 2
65459: NEG
65460: PUSH
65461: LD_INT 2
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 4
65470: NEG
65471: PUSH
65472: LD_INT 0
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 4
65481: NEG
65482: PUSH
65483: LD_INT 1
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 3
65493: NEG
65494: PUSH
65495: LD_INT 0
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 3
65504: NEG
65505: PUSH
65506: LD_INT 1
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 4
65515: NEG
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 5
65526: NEG
65527: PUSH
65528: LD_INT 0
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 5
65537: NEG
65538: PUSH
65539: LD_INT 1
65541: NEG
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 5
65549: NEG
65550: PUSH
65551: LD_INT 2
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 3
65561: NEG
65562: PUSH
65563: LD_INT 2
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 3
65572: NEG
65573: PUSH
65574: LD_INT 3
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 3
65584: NEG
65585: PUSH
65586: LD_INT 4
65588: NEG
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 2
65596: NEG
65597: PUSH
65598: LD_INT 3
65600: NEG
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 2
65608: NEG
65609: PUSH
65610: LD_INT 2
65612: NEG
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 3
65620: NEG
65621: PUSH
65622: LD_INT 2
65624: NEG
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 4
65632: NEG
65633: PUSH
65634: LD_INT 3
65636: NEG
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 4
65644: NEG
65645: PUSH
65646: LD_INT 4
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 2
65656: NEG
65657: PUSH
65658: LD_INT 4
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 4
65668: NEG
65669: PUSH
65670: LD_INT 2
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 0
65680: PUSH
65681: LD_INT 4
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: LD_INT 5
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 1
65702: PUSH
65703: LD_INT 4
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 1
65713: PUSH
65714: LD_INT 3
65716: NEG
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: LD_INT 3
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: NEG
65736: PUSH
65737: LD_INT 4
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: LD_INT 5
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 2
65759: PUSH
65760: LD_INT 3
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 2
65770: NEG
65771: PUSH
65772: LD_INT 5
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65827: LD_ADDR_VAR 0 31
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: LD_INT 4
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 0
65844: PUSH
65845: LD_INT 3
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 1
65854: PUSH
65855: LD_INT 4
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: LD_INT 5
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: LD_INT 5
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: LD_INT 4
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 1
65895: NEG
65896: PUSH
65897: LD_INT 3
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 2
65906: PUSH
65907: LD_INT 5
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 2
65916: NEG
65917: PUSH
65918: LD_INT 3
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 3
65927: NEG
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 3
65938: NEG
65939: PUSH
65940: LD_INT 1
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 2
65950: NEG
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 2
65961: NEG
65962: PUSH
65963: LD_INT 1
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 3
65972: NEG
65973: PUSH
65974: LD_INT 1
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 4
65983: NEG
65984: PUSH
65985: LD_INT 0
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 4
65994: NEG
65995: PUSH
65996: LD_INT 1
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 4
66006: NEG
66007: PUSH
66008: LD_INT 2
66010: NEG
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 2
66018: NEG
66019: PUSH
66020: LD_INT 2
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 4
66029: NEG
66030: PUSH
66031: LD_INT 4
66033: NEG
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 4
66041: NEG
66042: PUSH
66043: LD_INT 5
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 3
66053: NEG
66054: PUSH
66055: LD_INT 4
66057: NEG
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 3
66065: NEG
66066: PUSH
66067: LD_INT 3
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 4
66077: NEG
66078: PUSH
66079: LD_INT 3
66081: NEG
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 5
66089: NEG
66090: PUSH
66091: LD_INT 4
66093: NEG
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 5
66101: NEG
66102: PUSH
66103: LD_INT 5
66105: NEG
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 3
66113: NEG
66114: PUSH
66115: LD_INT 5
66117: NEG
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 5
66125: NEG
66126: PUSH
66127: LD_INT 3
66129: NEG
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 0
66137: PUSH
66138: LD_INT 3
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: LD_INT 4
66151: NEG
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 1
66159: PUSH
66160: LD_INT 3
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 1
66170: PUSH
66171: LD_INT 2
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 0
66181: PUSH
66182: LD_INT 2
66184: NEG
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 1
66192: NEG
66193: PUSH
66194: LD_INT 3
66196: NEG
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 1
66204: NEG
66205: PUSH
66206: LD_INT 4
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 2
66216: PUSH
66217: LD_INT 2
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 2
66227: NEG
66228: PUSH
66229: LD_INT 4
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 4
66239: PUSH
66240: LD_INT 0
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 4
66249: PUSH
66250: LD_INT 1
66252: NEG
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 5
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 5
66270: PUSH
66271: LD_INT 1
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 4
66280: PUSH
66281: LD_INT 1
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 3
66290: PUSH
66291: LD_INT 0
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 3
66300: PUSH
66301: LD_INT 1
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 3
66311: PUSH
66312: LD_INT 2
66314: NEG
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 5
66322: PUSH
66323: LD_INT 2
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66377: LD_ADDR_VAR 0 32
66381: PUSH
66382: LD_INT 4
66384: NEG
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 4
66395: NEG
66396: PUSH
66397: LD_INT 1
66399: NEG
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 3
66407: NEG
66408: PUSH
66409: LD_INT 0
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 3
66418: NEG
66419: PUSH
66420: LD_INT 1
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 4
66429: NEG
66430: PUSH
66431: LD_INT 1
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 5
66440: NEG
66441: PUSH
66442: LD_INT 0
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 5
66451: NEG
66452: PUSH
66453: LD_INT 1
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 5
66463: NEG
66464: PUSH
66465: LD_INT 2
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 3
66475: NEG
66476: PUSH
66477: LD_INT 2
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 3
66486: NEG
66487: PUSH
66488: LD_INT 3
66490: NEG
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 3
66498: NEG
66499: PUSH
66500: LD_INT 4
66502: NEG
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 2
66510: NEG
66511: PUSH
66512: LD_INT 3
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 2
66522: NEG
66523: PUSH
66524: LD_INT 2
66526: NEG
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 3
66534: NEG
66535: PUSH
66536: LD_INT 2
66538: NEG
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 4
66546: NEG
66547: PUSH
66548: LD_INT 3
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 4
66558: NEG
66559: PUSH
66560: LD_INT 4
66562: NEG
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 2
66570: NEG
66571: PUSH
66572: LD_INT 4
66574: NEG
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 4
66582: NEG
66583: PUSH
66584: LD_INT 2
66586: NEG
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 0
66594: PUSH
66595: LD_INT 4
66597: NEG
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 0
66605: PUSH
66606: LD_INT 5
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 1
66616: PUSH
66617: LD_INT 4
66619: NEG
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 1
66627: PUSH
66628: LD_INT 3
66630: NEG
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 0
66638: PUSH
66639: LD_INT 3
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 1
66649: NEG
66650: PUSH
66651: LD_INT 4
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 1
66661: NEG
66662: PUSH
66663: LD_INT 5
66665: NEG
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 2
66673: PUSH
66674: LD_INT 3
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 2
66684: NEG
66685: PUSH
66686: LD_INT 5
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 3
66696: PUSH
66697: LD_INT 0
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 3
66706: PUSH
66707: LD_INT 1
66709: NEG
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 4
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 4
66727: PUSH
66728: LD_INT 1
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 3
66737: PUSH
66738: LD_INT 1
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 2
66747: PUSH
66748: LD_INT 0
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 2
66757: PUSH
66758: LD_INT 1
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 2
66768: PUSH
66769: LD_INT 2
66771: NEG
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 4
66779: PUSH
66780: LD_INT 2
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 4
66789: PUSH
66790: LD_INT 4
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 4
66799: PUSH
66800: LD_INT 3
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 5
66809: PUSH
66810: LD_INT 4
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 5
66819: PUSH
66820: LD_INT 5
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 4
66829: PUSH
66830: LD_INT 5
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 3
66839: PUSH
66840: LD_INT 4
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 3
66849: PUSH
66850: LD_INT 3
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 5
66859: PUSH
66860: LD_INT 3
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 3
66869: PUSH
66870: LD_INT 5
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66924: LD_ADDR_VAR 0 33
66928: PUSH
66929: LD_INT 4
66931: NEG
66932: PUSH
66933: LD_INT 4
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 4
66943: NEG
66944: PUSH
66945: LD_INT 5
66947: NEG
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 3
66955: NEG
66956: PUSH
66957: LD_INT 4
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 3
66967: NEG
66968: PUSH
66969: LD_INT 3
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 4
66979: NEG
66980: PUSH
66981: LD_INT 3
66983: NEG
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 5
66991: NEG
66992: PUSH
66993: LD_INT 4
66995: NEG
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 5
67003: NEG
67004: PUSH
67005: LD_INT 5
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 3
67015: NEG
67016: PUSH
67017: LD_INT 5
67019: NEG
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 5
67027: NEG
67028: PUSH
67029: LD_INT 3
67031: NEG
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 0
67039: PUSH
67040: LD_INT 3
67042: NEG
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: LD_INT 4
67053: NEG
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 1
67061: PUSH
67062: LD_INT 3
67064: NEG
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 1
67072: PUSH
67073: LD_INT 2
67075: NEG
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 0
67083: PUSH
67084: LD_INT 2
67086: NEG
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 1
67094: NEG
67095: PUSH
67096: LD_INT 3
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 1
67106: NEG
67107: PUSH
67108: LD_INT 4
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 2
67118: PUSH
67119: LD_INT 2
67121: NEG
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 2
67129: NEG
67130: PUSH
67131: LD_INT 4
67133: NEG
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PUSH
67139: LD_INT 4
67141: PUSH
67142: LD_INT 0
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 4
67151: PUSH
67152: LD_INT 1
67154: NEG
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 5
67162: PUSH
67163: LD_INT 0
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 5
67172: PUSH
67173: LD_INT 1
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 4
67182: PUSH
67183: LD_INT 1
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 3
67192: PUSH
67193: LD_INT 0
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 3
67202: PUSH
67203: LD_INT 1
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 3
67213: PUSH
67214: LD_INT 2
67216: NEG
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 5
67224: PUSH
67225: LD_INT 2
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 3
67234: PUSH
67235: LD_INT 3
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 3
67244: PUSH
67245: LD_INT 2
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 4
67254: PUSH
67255: LD_INT 3
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 4
67264: PUSH
67265: LD_INT 4
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 3
67274: PUSH
67275: LD_INT 4
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 2
67284: PUSH
67285: LD_INT 3
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 2
67294: PUSH
67295: LD_INT 2
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 4
67304: PUSH
67305: LD_INT 2
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 2
67314: PUSH
67315: LD_INT 4
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 0
67324: PUSH
67325: LD_INT 4
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 0
67334: PUSH
67335: LD_INT 3
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 1
67344: PUSH
67345: LD_INT 4
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 1
67354: PUSH
67355: LD_INT 5
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: LD_INT 5
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 1
67374: NEG
67375: PUSH
67376: LD_INT 4
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 1
67385: NEG
67386: PUSH
67387: LD_INT 3
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 2
67396: PUSH
67397: LD_INT 5
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 2
67406: NEG
67407: PUSH
67408: LD_INT 3
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: LIST
67423: LIST
67424: LIST
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67462: LD_ADDR_VAR 0 34
67466: PUSH
67467: LD_INT 0
67469: PUSH
67470: LD_INT 4
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 0
67480: PUSH
67481: LD_INT 5
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 1
67491: PUSH
67492: LD_INT 4
67494: NEG
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: LD_INT 3
67505: NEG
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 0
67513: PUSH
67514: LD_INT 3
67516: NEG
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 1
67524: NEG
67525: PUSH
67526: LD_INT 4
67528: NEG
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 1
67536: NEG
67537: PUSH
67538: LD_INT 5
67540: NEG
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 2
67548: PUSH
67549: LD_INT 3
67551: NEG
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 2
67559: NEG
67560: PUSH
67561: LD_INT 5
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 3
67571: PUSH
67572: LD_INT 0
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 3
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 4
67592: PUSH
67593: LD_INT 0
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 4
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 3
67612: PUSH
67613: LD_INT 1
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 2
67622: PUSH
67623: LD_INT 0
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 2
67632: PUSH
67633: LD_INT 1
67635: NEG
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 2
67643: PUSH
67644: LD_INT 2
67646: NEG
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 4
67654: PUSH
67655: LD_INT 2
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 4
67664: PUSH
67665: LD_INT 4
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 4
67674: PUSH
67675: LD_INT 3
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 5
67684: PUSH
67685: LD_INT 4
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 5
67694: PUSH
67695: LD_INT 5
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 4
67704: PUSH
67705: LD_INT 5
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 3
67714: PUSH
67715: LD_INT 4
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 3
67724: PUSH
67725: LD_INT 3
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 5
67734: PUSH
67735: LD_INT 3
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 3
67744: PUSH
67745: LD_INT 5
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 0
67754: PUSH
67755: LD_INT 3
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: LD_INT 2
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 1
67774: PUSH
67775: LD_INT 3
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 1
67784: PUSH
67785: LD_INT 4
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 0
67794: PUSH
67795: LD_INT 4
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 1
67804: NEG
67805: PUSH
67806: LD_INT 3
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 1
67815: NEG
67816: PUSH
67817: LD_INT 2
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 2
67826: PUSH
67827: LD_INT 4
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 2
67836: NEG
67837: PUSH
67838: LD_INT 2
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 4
67847: NEG
67848: PUSH
67849: LD_INT 0
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 4
67858: NEG
67859: PUSH
67860: LD_INT 1
67862: NEG
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 3
67870: NEG
67871: PUSH
67872: LD_INT 0
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 3
67881: NEG
67882: PUSH
67883: LD_INT 1
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 4
67892: NEG
67893: PUSH
67894: LD_INT 1
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 5
67903: NEG
67904: PUSH
67905: LD_INT 0
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 5
67914: NEG
67915: PUSH
67916: LD_INT 1
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 5
67926: NEG
67927: PUSH
67928: LD_INT 2
67930: NEG
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 3
67938: NEG
67939: PUSH
67940: LD_INT 2
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: LIST
67953: LIST
67954: LIST
67955: LIST
67956: LIST
67957: LIST
67958: LIST
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: ST_TO_ADDR
// end ; end ;
67994: GO 67997
67996: POP
// case btype of b_depot , b_warehouse :
67997: LD_VAR 0 1
68001: PUSH
68002: LD_INT 0
68004: DOUBLE
68005: EQUAL
68006: IFTRUE 68016
68008: LD_INT 1
68010: DOUBLE
68011: EQUAL
68012: IFTRUE 68016
68014: GO 68217
68016: POP
// case nation of nation_american :
68017: LD_VAR 0 5
68021: PUSH
68022: LD_INT 1
68024: DOUBLE
68025: EQUAL
68026: IFTRUE 68030
68028: GO 68086
68030: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68031: LD_ADDR_VAR 0 9
68035: PUSH
68036: LD_VAR 0 11
68040: PUSH
68041: LD_VAR 0 12
68045: PUSH
68046: LD_VAR 0 13
68050: PUSH
68051: LD_VAR 0 14
68055: PUSH
68056: LD_VAR 0 15
68060: PUSH
68061: LD_VAR 0 16
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: PUSH
68074: LD_VAR 0 4
68078: PUSH
68079: LD_INT 1
68081: PLUS
68082: ARRAY
68083: ST_TO_ADDR
68084: GO 68215
68086: LD_INT 2
68088: DOUBLE
68089: EQUAL
68090: IFTRUE 68094
68092: GO 68150
68094: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68095: LD_ADDR_VAR 0 9
68099: PUSH
68100: LD_VAR 0 17
68104: PUSH
68105: LD_VAR 0 18
68109: PUSH
68110: LD_VAR 0 19
68114: PUSH
68115: LD_VAR 0 20
68119: PUSH
68120: LD_VAR 0 21
68124: PUSH
68125: LD_VAR 0 22
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: PUSH
68138: LD_VAR 0 4
68142: PUSH
68143: LD_INT 1
68145: PLUS
68146: ARRAY
68147: ST_TO_ADDR
68148: GO 68215
68150: LD_INT 3
68152: DOUBLE
68153: EQUAL
68154: IFTRUE 68158
68156: GO 68214
68158: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68159: LD_ADDR_VAR 0 9
68163: PUSH
68164: LD_VAR 0 23
68168: PUSH
68169: LD_VAR 0 24
68173: PUSH
68174: LD_VAR 0 25
68178: PUSH
68179: LD_VAR 0 26
68183: PUSH
68184: LD_VAR 0 27
68188: PUSH
68189: LD_VAR 0 28
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: PUSH
68202: LD_VAR 0 4
68206: PUSH
68207: LD_INT 1
68209: PLUS
68210: ARRAY
68211: ST_TO_ADDR
68212: GO 68215
68214: POP
68215: GO 68770
68217: LD_INT 2
68219: DOUBLE
68220: EQUAL
68221: IFTRUE 68231
68223: LD_INT 3
68225: DOUBLE
68226: EQUAL
68227: IFTRUE 68231
68229: GO 68287
68231: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68232: LD_ADDR_VAR 0 9
68236: PUSH
68237: LD_VAR 0 29
68241: PUSH
68242: LD_VAR 0 30
68246: PUSH
68247: LD_VAR 0 31
68251: PUSH
68252: LD_VAR 0 32
68256: PUSH
68257: LD_VAR 0 33
68261: PUSH
68262: LD_VAR 0 34
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: PUSH
68275: LD_VAR 0 4
68279: PUSH
68280: LD_INT 1
68282: PLUS
68283: ARRAY
68284: ST_TO_ADDR
68285: GO 68770
68287: LD_INT 16
68289: DOUBLE
68290: EQUAL
68291: IFTRUE 68349
68293: LD_INT 17
68295: DOUBLE
68296: EQUAL
68297: IFTRUE 68349
68299: LD_INT 18
68301: DOUBLE
68302: EQUAL
68303: IFTRUE 68349
68305: LD_INT 19
68307: DOUBLE
68308: EQUAL
68309: IFTRUE 68349
68311: LD_INT 22
68313: DOUBLE
68314: EQUAL
68315: IFTRUE 68349
68317: LD_INT 20
68319: DOUBLE
68320: EQUAL
68321: IFTRUE 68349
68323: LD_INT 21
68325: DOUBLE
68326: EQUAL
68327: IFTRUE 68349
68329: LD_INT 23
68331: DOUBLE
68332: EQUAL
68333: IFTRUE 68349
68335: LD_INT 24
68337: DOUBLE
68338: EQUAL
68339: IFTRUE 68349
68341: LD_INT 25
68343: DOUBLE
68344: EQUAL
68345: IFTRUE 68349
68347: GO 68405
68349: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68350: LD_ADDR_VAR 0 9
68354: PUSH
68355: LD_VAR 0 35
68359: PUSH
68360: LD_VAR 0 36
68364: PUSH
68365: LD_VAR 0 37
68369: PUSH
68370: LD_VAR 0 38
68374: PUSH
68375: LD_VAR 0 39
68379: PUSH
68380: LD_VAR 0 40
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: PUSH
68393: LD_VAR 0 4
68397: PUSH
68398: LD_INT 1
68400: PLUS
68401: ARRAY
68402: ST_TO_ADDR
68403: GO 68770
68405: LD_INT 6
68407: DOUBLE
68408: EQUAL
68409: IFTRUE 68461
68411: LD_INT 7
68413: DOUBLE
68414: EQUAL
68415: IFTRUE 68461
68417: LD_INT 8
68419: DOUBLE
68420: EQUAL
68421: IFTRUE 68461
68423: LD_INT 13
68425: DOUBLE
68426: EQUAL
68427: IFTRUE 68461
68429: LD_INT 12
68431: DOUBLE
68432: EQUAL
68433: IFTRUE 68461
68435: LD_INT 15
68437: DOUBLE
68438: EQUAL
68439: IFTRUE 68461
68441: LD_INT 11
68443: DOUBLE
68444: EQUAL
68445: IFTRUE 68461
68447: LD_INT 14
68449: DOUBLE
68450: EQUAL
68451: IFTRUE 68461
68453: LD_INT 10
68455: DOUBLE
68456: EQUAL
68457: IFTRUE 68461
68459: GO 68517
68461: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68462: LD_ADDR_VAR 0 9
68466: PUSH
68467: LD_VAR 0 41
68471: PUSH
68472: LD_VAR 0 42
68476: PUSH
68477: LD_VAR 0 43
68481: PUSH
68482: LD_VAR 0 44
68486: PUSH
68487: LD_VAR 0 45
68491: PUSH
68492: LD_VAR 0 46
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: PUSH
68505: LD_VAR 0 4
68509: PUSH
68510: LD_INT 1
68512: PLUS
68513: ARRAY
68514: ST_TO_ADDR
68515: GO 68770
68517: LD_INT 36
68519: DOUBLE
68520: EQUAL
68521: IFTRUE 68525
68523: GO 68581
68525: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68526: LD_ADDR_VAR 0 9
68530: PUSH
68531: LD_VAR 0 47
68535: PUSH
68536: LD_VAR 0 48
68540: PUSH
68541: LD_VAR 0 49
68545: PUSH
68546: LD_VAR 0 50
68550: PUSH
68551: LD_VAR 0 51
68555: PUSH
68556: LD_VAR 0 52
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: PUSH
68569: LD_VAR 0 4
68573: PUSH
68574: LD_INT 1
68576: PLUS
68577: ARRAY
68578: ST_TO_ADDR
68579: GO 68770
68581: LD_INT 4
68583: DOUBLE
68584: EQUAL
68585: IFTRUE 68607
68587: LD_INT 5
68589: DOUBLE
68590: EQUAL
68591: IFTRUE 68607
68593: LD_INT 34
68595: DOUBLE
68596: EQUAL
68597: IFTRUE 68607
68599: LD_INT 37
68601: DOUBLE
68602: EQUAL
68603: IFTRUE 68607
68605: GO 68663
68607: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68608: LD_ADDR_VAR 0 9
68612: PUSH
68613: LD_VAR 0 53
68617: PUSH
68618: LD_VAR 0 54
68622: PUSH
68623: LD_VAR 0 55
68627: PUSH
68628: LD_VAR 0 56
68632: PUSH
68633: LD_VAR 0 57
68637: PUSH
68638: LD_VAR 0 58
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: PUSH
68651: LD_VAR 0 4
68655: PUSH
68656: LD_INT 1
68658: PLUS
68659: ARRAY
68660: ST_TO_ADDR
68661: GO 68770
68663: LD_INT 31
68665: DOUBLE
68666: EQUAL
68667: IFTRUE 68713
68669: LD_INT 32
68671: DOUBLE
68672: EQUAL
68673: IFTRUE 68713
68675: LD_INT 33
68677: DOUBLE
68678: EQUAL
68679: IFTRUE 68713
68681: LD_INT 27
68683: DOUBLE
68684: EQUAL
68685: IFTRUE 68713
68687: LD_INT 26
68689: DOUBLE
68690: EQUAL
68691: IFTRUE 68713
68693: LD_INT 28
68695: DOUBLE
68696: EQUAL
68697: IFTRUE 68713
68699: LD_INT 29
68701: DOUBLE
68702: EQUAL
68703: IFTRUE 68713
68705: LD_INT 30
68707: DOUBLE
68708: EQUAL
68709: IFTRUE 68713
68711: GO 68769
68713: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68714: LD_ADDR_VAR 0 9
68718: PUSH
68719: LD_VAR 0 59
68723: PUSH
68724: LD_VAR 0 60
68728: PUSH
68729: LD_VAR 0 61
68733: PUSH
68734: LD_VAR 0 62
68738: PUSH
68739: LD_VAR 0 63
68743: PUSH
68744: LD_VAR 0 64
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: PUSH
68757: LD_VAR 0 4
68761: PUSH
68762: LD_INT 1
68764: PLUS
68765: ARRAY
68766: ST_TO_ADDR
68767: GO 68770
68769: POP
// temp_list2 = [ ] ;
68770: LD_ADDR_VAR 0 10
68774: PUSH
68775: EMPTY
68776: ST_TO_ADDR
// for i in temp_list do
68777: LD_ADDR_VAR 0 8
68781: PUSH
68782: LD_VAR 0 9
68786: PUSH
68787: FOR_IN
68788: IFFALSE 68840
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68790: LD_ADDR_VAR 0 10
68794: PUSH
68795: LD_VAR 0 10
68799: PUSH
68800: LD_VAR 0 8
68804: PUSH
68805: LD_INT 1
68807: ARRAY
68808: PUSH
68809: LD_VAR 0 2
68813: PLUS
68814: PUSH
68815: LD_VAR 0 8
68819: PUSH
68820: LD_INT 2
68822: ARRAY
68823: PUSH
68824: LD_VAR 0 3
68828: PLUS
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: EMPTY
68835: LIST
68836: ADD
68837: ST_TO_ADDR
68838: GO 68787
68840: POP
68841: POP
// result = temp_list2 ;
68842: LD_ADDR_VAR 0 7
68846: PUSH
68847: LD_VAR 0 10
68851: ST_TO_ADDR
// end ;
68852: LD_VAR 0 7
68856: RET
// export function EnemyInRange ( unit , dist ) ; begin
68857: LD_INT 0
68859: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68860: LD_ADDR_VAR 0 3
68864: PUSH
68865: LD_VAR 0 1
68869: PPUSH
68870: CALL_OW 255
68874: PPUSH
68875: LD_VAR 0 1
68879: PPUSH
68880: CALL_OW 250
68884: PPUSH
68885: LD_VAR 0 1
68889: PPUSH
68890: CALL_OW 251
68894: PPUSH
68895: LD_VAR 0 2
68899: PPUSH
68900: CALL 42253 0 4
68904: PUSH
68905: LD_INT 4
68907: ARRAY
68908: ST_TO_ADDR
// end ;
68909: LD_VAR 0 3
68913: RET
// export function PlayerSeeMe ( unit ) ; begin
68914: LD_INT 0
68916: PPUSH
// result := See ( your_side , unit ) ;
68917: LD_ADDR_VAR 0 2
68921: PUSH
68922: LD_OWVAR 2
68926: PPUSH
68927: LD_VAR 0 1
68931: PPUSH
68932: CALL_OW 292
68936: ST_TO_ADDR
// end ;
68937: LD_VAR 0 2
68941: RET
// export function ReverseDir ( unit ) ; begin
68942: LD_INT 0
68944: PPUSH
// if not unit then
68945: LD_VAR 0 1
68949: NOT
68950: IFFALSE 68954
// exit ;
68952: GO 68977
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68954: LD_ADDR_VAR 0 2
68958: PUSH
68959: LD_VAR 0 1
68963: PPUSH
68964: CALL_OW 254
68968: PUSH
68969: LD_INT 3
68971: PLUS
68972: PUSH
68973: LD_INT 6
68975: MOD
68976: ST_TO_ADDR
// end ;
68977: LD_VAR 0 2
68981: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68982: LD_INT 0
68984: PPUSH
68985: PPUSH
68986: PPUSH
68987: PPUSH
68988: PPUSH
// if not hexes then
68989: LD_VAR 0 2
68993: NOT
68994: IFFALSE 68998
// exit ;
68996: GO 69146
// dist := 9999 ;
68998: LD_ADDR_VAR 0 5
69002: PUSH
69003: LD_INT 9999
69005: ST_TO_ADDR
// for i = 1 to hexes do
69006: LD_ADDR_VAR 0 4
69010: PUSH
69011: DOUBLE
69012: LD_INT 1
69014: DEC
69015: ST_TO_ADDR
69016: LD_VAR 0 2
69020: PUSH
69021: FOR_TO
69022: IFFALSE 69134
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69024: LD_VAR 0 1
69028: PPUSH
69029: LD_VAR 0 2
69033: PUSH
69034: LD_VAR 0 4
69038: ARRAY
69039: PUSH
69040: LD_INT 1
69042: ARRAY
69043: PPUSH
69044: LD_VAR 0 2
69048: PUSH
69049: LD_VAR 0 4
69053: ARRAY
69054: PUSH
69055: LD_INT 2
69057: ARRAY
69058: PPUSH
69059: CALL_OW 297
69063: PUSH
69064: LD_VAR 0 5
69068: LESS
69069: IFFALSE 69132
// begin hex := hexes [ i ] ;
69071: LD_ADDR_VAR 0 7
69075: PUSH
69076: LD_VAR 0 2
69080: PUSH
69081: LD_VAR 0 4
69085: ARRAY
69086: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69087: LD_ADDR_VAR 0 5
69091: PUSH
69092: LD_VAR 0 1
69096: PPUSH
69097: LD_VAR 0 2
69101: PUSH
69102: LD_VAR 0 4
69106: ARRAY
69107: PUSH
69108: LD_INT 1
69110: ARRAY
69111: PPUSH
69112: LD_VAR 0 2
69116: PUSH
69117: LD_VAR 0 4
69121: ARRAY
69122: PUSH
69123: LD_INT 2
69125: ARRAY
69126: PPUSH
69127: CALL_OW 297
69131: ST_TO_ADDR
// end ; end ;
69132: GO 69021
69134: POP
69135: POP
// result := hex ;
69136: LD_ADDR_VAR 0 3
69140: PUSH
69141: LD_VAR 0 7
69145: ST_TO_ADDR
// end ;
69146: LD_VAR 0 3
69150: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69151: LD_INT 0
69153: PPUSH
69154: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69155: LD_VAR 0 1
69159: NOT
69160: PUSH
69161: LD_VAR 0 1
69165: PUSH
69166: LD_INT 21
69168: PUSH
69169: LD_INT 2
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 23
69178: PUSH
69179: LD_INT 2
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PPUSH
69190: CALL_OW 69
69194: IN
69195: NOT
69196: OR
69197: IFFALSE 69201
// exit ;
69199: GO 69248
// for i = 1 to 3 do
69201: LD_ADDR_VAR 0 3
69205: PUSH
69206: DOUBLE
69207: LD_INT 1
69209: DEC
69210: ST_TO_ADDR
69211: LD_INT 3
69213: PUSH
69214: FOR_TO
69215: IFFALSE 69246
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69217: LD_VAR 0 1
69221: PPUSH
69222: CALL_OW 250
69226: PPUSH
69227: LD_VAR 0 1
69231: PPUSH
69232: CALL_OW 251
69236: PPUSH
69237: LD_INT 1
69239: PPUSH
69240: CALL_OW 453
69244: GO 69214
69246: POP
69247: POP
// end ;
69248: LD_VAR 0 2
69252: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69253: LD_INT 0
69255: PPUSH
69256: PPUSH
69257: PPUSH
69258: PPUSH
69259: PPUSH
69260: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69261: LD_VAR 0 1
69265: NOT
69266: PUSH
69267: LD_VAR 0 2
69271: NOT
69272: OR
69273: PUSH
69274: LD_VAR 0 1
69278: PPUSH
69279: CALL_OW 314
69283: OR
69284: IFFALSE 69288
// exit ;
69286: GO 69729
// x := GetX ( enemy_unit ) ;
69288: LD_ADDR_VAR 0 7
69292: PUSH
69293: LD_VAR 0 2
69297: PPUSH
69298: CALL_OW 250
69302: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69303: LD_ADDR_VAR 0 8
69307: PUSH
69308: LD_VAR 0 2
69312: PPUSH
69313: CALL_OW 251
69317: ST_TO_ADDR
// if not x or not y then
69318: LD_VAR 0 7
69322: NOT
69323: PUSH
69324: LD_VAR 0 8
69328: NOT
69329: OR
69330: IFFALSE 69334
// exit ;
69332: GO 69729
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69334: LD_ADDR_VAR 0 6
69338: PUSH
69339: LD_VAR 0 7
69343: PPUSH
69344: LD_INT 0
69346: PPUSH
69347: LD_INT 4
69349: PPUSH
69350: CALL_OW 272
69354: PUSH
69355: LD_VAR 0 8
69359: PPUSH
69360: LD_INT 0
69362: PPUSH
69363: LD_INT 4
69365: PPUSH
69366: CALL_OW 273
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_VAR 0 7
69379: PPUSH
69380: LD_INT 1
69382: PPUSH
69383: LD_INT 4
69385: PPUSH
69386: CALL_OW 272
69390: PUSH
69391: LD_VAR 0 8
69395: PPUSH
69396: LD_INT 1
69398: PPUSH
69399: LD_INT 4
69401: PPUSH
69402: CALL_OW 273
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_VAR 0 7
69415: PPUSH
69416: LD_INT 2
69418: PPUSH
69419: LD_INT 4
69421: PPUSH
69422: CALL_OW 272
69426: PUSH
69427: LD_VAR 0 8
69431: PPUSH
69432: LD_INT 2
69434: PPUSH
69435: LD_INT 4
69437: PPUSH
69438: CALL_OW 273
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_VAR 0 7
69451: PPUSH
69452: LD_INT 3
69454: PPUSH
69455: LD_INT 4
69457: PPUSH
69458: CALL_OW 272
69462: PUSH
69463: LD_VAR 0 8
69467: PPUSH
69468: LD_INT 3
69470: PPUSH
69471: LD_INT 4
69473: PPUSH
69474: CALL_OW 273
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_VAR 0 7
69487: PPUSH
69488: LD_INT 4
69490: PPUSH
69491: LD_INT 4
69493: PPUSH
69494: CALL_OW 272
69498: PUSH
69499: LD_VAR 0 8
69503: PPUSH
69504: LD_INT 4
69506: PPUSH
69507: LD_INT 4
69509: PPUSH
69510: CALL_OW 273
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_VAR 0 7
69523: PPUSH
69524: LD_INT 5
69526: PPUSH
69527: LD_INT 4
69529: PPUSH
69530: CALL_OW 272
69534: PUSH
69535: LD_VAR 0 8
69539: PPUSH
69540: LD_INT 5
69542: PPUSH
69543: LD_INT 4
69545: PPUSH
69546: CALL_OW 273
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: ST_TO_ADDR
// for i = tmp downto 1 do
69563: LD_ADDR_VAR 0 4
69567: PUSH
69568: DOUBLE
69569: LD_VAR 0 6
69573: INC
69574: ST_TO_ADDR
69575: LD_INT 1
69577: PUSH
69578: FOR_DOWNTO
69579: IFFALSE 69680
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69581: LD_VAR 0 6
69585: PUSH
69586: LD_VAR 0 4
69590: ARRAY
69591: PUSH
69592: LD_INT 1
69594: ARRAY
69595: PPUSH
69596: LD_VAR 0 6
69600: PUSH
69601: LD_VAR 0 4
69605: ARRAY
69606: PUSH
69607: LD_INT 2
69609: ARRAY
69610: PPUSH
69611: CALL_OW 488
69615: NOT
69616: PUSH
69617: LD_VAR 0 6
69621: PUSH
69622: LD_VAR 0 4
69626: ARRAY
69627: PUSH
69628: LD_INT 1
69630: ARRAY
69631: PPUSH
69632: LD_VAR 0 6
69636: PUSH
69637: LD_VAR 0 4
69641: ARRAY
69642: PUSH
69643: LD_INT 2
69645: ARRAY
69646: PPUSH
69647: CALL_OW 428
69651: PUSH
69652: LD_INT 0
69654: NONEQUAL
69655: OR
69656: IFFALSE 69678
// tmp := Delete ( tmp , i ) ;
69658: LD_ADDR_VAR 0 6
69662: PUSH
69663: LD_VAR 0 6
69667: PPUSH
69668: LD_VAR 0 4
69672: PPUSH
69673: CALL_OW 3
69677: ST_TO_ADDR
69678: GO 69578
69680: POP
69681: POP
// j := GetClosestHex ( unit , tmp ) ;
69682: LD_ADDR_VAR 0 5
69686: PUSH
69687: LD_VAR 0 1
69691: PPUSH
69692: LD_VAR 0 6
69696: PPUSH
69697: CALL 68982 0 2
69701: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69702: LD_VAR 0 1
69706: PPUSH
69707: LD_VAR 0 5
69711: PUSH
69712: LD_INT 1
69714: ARRAY
69715: PPUSH
69716: LD_VAR 0 5
69720: PUSH
69721: LD_INT 2
69723: ARRAY
69724: PPUSH
69725: CALL_OW 111
// end ;
69729: LD_VAR 0 3
69733: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69734: LD_INT 0
69736: PPUSH
69737: PPUSH
69738: PPUSH
// uc_side = 0 ;
69739: LD_ADDR_OWVAR 20
69743: PUSH
69744: LD_INT 0
69746: ST_TO_ADDR
// uc_nation = 0 ;
69747: LD_ADDR_OWVAR 21
69751: PUSH
69752: LD_INT 0
69754: ST_TO_ADDR
// InitHc_All ( ) ;
69755: CALL_OW 584
// InitVc ;
69759: CALL_OW 20
// if mastodonts then
69763: LD_VAR 0 6
69767: IFFALSE 69834
// for i = 1 to mastodonts do
69769: LD_ADDR_VAR 0 11
69773: PUSH
69774: DOUBLE
69775: LD_INT 1
69777: DEC
69778: ST_TO_ADDR
69779: LD_VAR 0 6
69783: PUSH
69784: FOR_TO
69785: IFFALSE 69832
// begin vc_chassis := 31 ;
69787: LD_ADDR_OWVAR 37
69791: PUSH
69792: LD_INT 31
69794: ST_TO_ADDR
// vc_control := control_rider ;
69795: LD_ADDR_OWVAR 38
69799: PUSH
69800: LD_INT 4
69802: ST_TO_ADDR
// animal := CreateVehicle ;
69803: LD_ADDR_VAR 0 12
69807: PUSH
69808: CALL_OW 45
69812: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69813: LD_VAR 0 12
69817: PPUSH
69818: LD_VAR 0 8
69822: PPUSH
69823: LD_INT 0
69825: PPUSH
69826: CALL 71969 0 3
// end ;
69830: GO 69784
69832: POP
69833: POP
// if horses then
69834: LD_VAR 0 5
69838: IFFALSE 69905
// for i = 1 to horses do
69840: LD_ADDR_VAR 0 11
69844: PUSH
69845: DOUBLE
69846: LD_INT 1
69848: DEC
69849: ST_TO_ADDR
69850: LD_VAR 0 5
69854: PUSH
69855: FOR_TO
69856: IFFALSE 69903
// begin hc_class := 21 ;
69858: LD_ADDR_OWVAR 28
69862: PUSH
69863: LD_INT 21
69865: ST_TO_ADDR
// hc_gallery :=  ;
69866: LD_ADDR_OWVAR 33
69870: PUSH
69871: LD_STRING 
69873: ST_TO_ADDR
// animal := CreateHuman ;
69874: LD_ADDR_VAR 0 12
69878: PUSH
69879: CALL_OW 44
69883: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69884: LD_VAR 0 12
69888: PPUSH
69889: LD_VAR 0 8
69893: PPUSH
69894: LD_INT 0
69896: PPUSH
69897: CALL 71969 0 3
// end ;
69901: GO 69855
69903: POP
69904: POP
// if birds then
69905: LD_VAR 0 1
69909: IFFALSE 69976
// for i = 1 to birds do
69911: LD_ADDR_VAR 0 11
69915: PUSH
69916: DOUBLE
69917: LD_INT 1
69919: DEC
69920: ST_TO_ADDR
69921: LD_VAR 0 1
69925: PUSH
69926: FOR_TO
69927: IFFALSE 69974
// begin hc_class = 18 ;
69929: LD_ADDR_OWVAR 28
69933: PUSH
69934: LD_INT 18
69936: ST_TO_ADDR
// hc_gallery =  ;
69937: LD_ADDR_OWVAR 33
69941: PUSH
69942: LD_STRING 
69944: ST_TO_ADDR
// animal := CreateHuman ;
69945: LD_ADDR_VAR 0 12
69949: PUSH
69950: CALL_OW 44
69954: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69955: LD_VAR 0 12
69959: PPUSH
69960: LD_VAR 0 8
69964: PPUSH
69965: LD_INT 0
69967: PPUSH
69968: CALL 71969 0 3
// end ;
69972: GO 69926
69974: POP
69975: POP
// if tigers then
69976: LD_VAR 0 2
69980: IFFALSE 70064
// for i = 1 to tigers do
69982: LD_ADDR_VAR 0 11
69986: PUSH
69987: DOUBLE
69988: LD_INT 1
69990: DEC
69991: ST_TO_ADDR
69992: LD_VAR 0 2
69996: PUSH
69997: FOR_TO
69998: IFFALSE 70062
// begin hc_class = class_tiger ;
70000: LD_ADDR_OWVAR 28
70004: PUSH
70005: LD_INT 14
70007: ST_TO_ADDR
// hc_gallery =  ;
70008: LD_ADDR_OWVAR 33
70012: PUSH
70013: LD_STRING 
70015: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70016: LD_ADDR_OWVAR 35
70020: PUSH
70021: LD_INT 7
70023: NEG
70024: PPUSH
70025: LD_INT 7
70027: PPUSH
70028: CALL_OW 12
70032: ST_TO_ADDR
// animal := CreateHuman ;
70033: LD_ADDR_VAR 0 12
70037: PUSH
70038: CALL_OW 44
70042: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70043: LD_VAR 0 12
70047: PPUSH
70048: LD_VAR 0 8
70052: PPUSH
70053: LD_INT 0
70055: PPUSH
70056: CALL 71969 0 3
// end ;
70060: GO 69997
70062: POP
70063: POP
// if apemans then
70064: LD_VAR 0 3
70068: IFFALSE 70191
// for i = 1 to apemans do
70070: LD_ADDR_VAR 0 11
70074: PUSH
70075: DOUBLE
70076: LD_INT 1
70078: DEC
70079: ST_TO_ADDR
70080: LD_VAR 0 3
70084: PUSH
70085: FOR_TO
70086: IFFALSE 70189
// begin hc_class = class_apeman ;
70088: LD_ADDR_OWVAR 28
70092: PUSH
70093: LD_INT 12
70095: ST_TO_ADDR
// hc_gallery =  ;
70096: LD_ADDR_OWVAR 33
70100: PUSH
70101: LD_STRING 
70103: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70104: LD_ADDR_OWVAR 35
70108: PUSH
70109: LD_INT 2
70111: NEG
70112: PPUSH
70113: LD_INT 2
70115: PPUSH
70116: CALL_OW 12
70120: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70121: LD_ADDR_OWVAR 31
70125: PUSH
70126: LD_INT 1
70128: PPUSH
70129: LD_INT 3
70131: PPUSH
70132: CALL_OW 12
70136: PUSH
70137: LD_INT 1
70139: PPUSH
70140: LD_INT 3
70142: PPUSH
70143: CALL_OW 12
70147: PUSH
70148: LD_INT 0
70150: PUSH
70151: LD_INT 0
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: ST_TO_ADDR
// animal := CreateHuman ;
70160: LD_ADDR_VAR 0 12
70164: PUSH
70165: CALL_OW 44
70169: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70170: LD_VAR 0 12
70174: PPUSH
70175: LD_VAR 0 8
70179: PPUSH
70180: LD_INT 0
70182: PPUSH
70183: CALL 71969 0 3
// end ;
70187: GO 70085
70189: POP
70190: POP
// if enchidnas then
70191: LD_VAR 0 4
70195: IFFALSE 70262
// for i = 1 to enchidnas do
70197: LD_ADDR_VAR 0 11
70201: PUSH
70202: DOUBLE
70203: LD_INT 1
70205: DEC
70206: ST_TO_ADDR
70207: LD_VAR 0 4
70211: PUSH
70212: FOR_TO
70213: IFFALSE 70260
// begin hc_class = 13 ;
70215: LD_ADDR_OWVAR 28
70219: PUSH
70220: LD_INT 13
70222: ST_TO_ADDR
// hc_gallery =  ;
70223: LD_ADDR_OWVAR 33
70227: PUSH
70228: LD_STRING 
70230: ST_TO_ADDR
// animal := CreateHuman ;
70231: LD_ADDR_VAR 0 12
70235: PUSH
70236: CALL_OW 44
70240: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70241: LD_VAR 0 12
70245: PPUSH
70246: LD_VAR 0 8
70250: PPUSH
70251: LD_INT 0
70253: PPUSH
70254: CALL 71969 0 3
// end ;
70258: GO 70212
70260: POP
70261: POP
// if fishes then
70262: LD_VAR 0 7
70266: IFFALSE 70333
// for i = 1 to fishes do
70268: LD_ADDR_VAR 0 11
70272: PUSH
70273: DOUBLE
70274: LD_INT 1
70276: DEC
70277: ST_TO_ADDR
70278: LD_VAR 0 7
70282: PUSH
70283: FOR_TO
70284: IFFALSE 70331
// begin hc_class = 20 ;
70286: LD_ADDR_OWVAR 28
70290: PUSH
70291: LD_INT 20
70293: ST_TO_ADDR
// hc_gallery =  ;
70294: LD_ADDR_OWVAR 33
70298: PUSH
70299: LD_STRING 
70301: ST_TO_ADDR
// animal := CreateHuman ;
70302: LD_ADDR_VAR 0 12
70306: PUSH
70307: CALL_OW 44
70311: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70312: LD_VAR 0 12
70316: PPUSH
70317: LD_VAR 0 9
70321: PPUSH
70322: LD_INT 0
70324: PPUSH
70325: CALL 71969 0 3
// end ;
70329: GO 70283
70331: POP
70332: POP
// end ;
70333: LD_VAR 0 10
70337: RET
// export function WantHeal ( sci , unit ) ; begin
70338: LD_INT 0
70340: PPUSH
// if GetTaskList ( sci ) > 0 then
70341: LD_VAR 0 1
70345: PPUSH
70346: CALL_OW 437
70350: PUSH
70351: LD_INT 0
70353: GREATER
70354: IFFALSE 70424
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70356: LD_VAR 0 1
70360: PPUSH
70361: CALL_OW 437
70365: PUSH
70366: LD_INT 1
70368: ARRAY
70369: PUSH
70370: LD_INT 1
70372: ARRAY
70373: PUSH
70374: LD_STRING l
70376: EQUAL
70377: PUSH
70378: LD_VAR 0 1
70382: PPUSH
70383: CALL_OW 437
70387: PUSH
70388: LD_INT 1
70390: ARRAY
70391: PUSH
70392: LD_INT 4
70394: ARRAY
70395: PUSH
70396: LD_VAR 0 2
70400: EQUAL
70401: AND
70402: IFFALSE 70414
// result := true else
70404: LD_ADDR_VAR 0 3
70408: PUSH
70409: LD_INT 1
70411: ST_TO_ADDR
70412: GO 70422
// result := false ;
70414: LD_ADDR_VAR 0 3
70418: PUSH
70419: LD_INT 0
70421: ST_TO_ADDR
// end else
70422: GO 70432
// result := false ;
70424: LD_ADDR_VAR 0 3
70428: PUSH
70429: LD_INT 0
70431: ST_TO_ADDR
// end ;
70432: LD_VAR 0 3
70436: RET
// export function HealTarget ( sci ) ; begin
70437: LD_INT 0
70439: PPUSH
// if not sci then
70440: LD_VAR 0 1
70444: NOT
70445: IFFALSE 70449
// exit ;
70447: GO 70514
// result := 0 ;
70449: LD_ADDR_VAR 0 2
70453: PUSH
70454: LD_INT 0
70456: ST_TO_ADDR
// if GetTaskList ( sci ) then
70457: LD_VAR 0 1
70461: PPUSH
70462: CALL_OW 437
70466: IFFALSE 70514
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70468: LD_VAR 0 1
70472: PPUSH
70473: CALL_OW 437
70477: PUSH
70478: LD_INT 1
70480: ARRAY
70481: PUSH
70482: LD_INT 1
70484: ARRAY
70485: PUSH
70486: LD_STRING l
70488: EQUAL
70489: IFFALSE 70514
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70491: LD_ADDR_VAR 0 2
70495: PUSH
70496: LD_VAR 0 1
70500: PPUSH
70501: CALL_OW 437
70505: PUSH
70506: LD_INT 1
70508: ARRAY
70509: PUSH
70510: LD_INT 4
70512: ARRAY
70513: ST_TO_ADDR
// end ;
70514: LD_VAR 0 2
70518: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70519: LD_INT 0
70521: PPUSH
70522: PPUSH
70523: PPUSH
70524: PPUSH
// if not base_units then
70525: LD_VAR 0 1
70529: NOT
70530: IFFALSE 70534
// exit ;
70532: GO 70621
// result := false ;
70534: LD_ADDR_VAR 0 2
70538: PUSH
70539: LD_INT 0
70541: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70542: LD_ADDR_VAR 0 5
70546: PUSH
70547: LD_VAR 0 1
70551: PPUSH
70552: LD_INT 21
70554: PUSH
70555: LD_INT 3
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PPUSH
70562: CALL_OW 72
70566: ST_TO_ADDR
// if not tmp then
70567: LD_VAR 0 5
70571: NOT
70572: IFFALSE 70576
// exit ;
70574: GO 70621
// for i in tmp do
70576: LD_ADDR_VAR 0 3
70580: PUSH
70581: LD_VAR 0 5
70585: PUSH
70586: FOR_IN
70587: IFFALSE 70619
// begin result := EnemyInRange ( i , 22 ) ;
70589: LD_ADDR_VAR 0 2
70593: PUSH
70594: LD_VAR 0 3
70598: PPUSH
70599: LD_INT 22
70601: PPUSH
70602: CALL 68857 0 2
70606: ST_TO_ADDR
// if result then
70607: LD_VAR 0 2
70611: IFFALSE 70617
// exit ;
70613: POP
70614: POP
70615: GO 70621
// end ;
70617: GO 70586
70619: POP
70620: POP
// end ;
70621: LD_VAR 0 2
70625: RET
// export function FilterByTag ( units , tag ) ; begin
70626: LD_INT 0
70628: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70629: LD_ADDR_VAR 0 3
70633: PUSH
70634: LD_VAR 0 1
70638: PPUSH
70639: LD_INT 120
70641: PUSH
70642: LD_VAR 0 2
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PPUSH
70651: CALL_OW 72
70655: ST_TO_ADDR
// end ;
70656: LD_VAR 0 3
70660: RET
// export function IsDriver ( un ) ; begin
70661: LD_INT 0
70663: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70664: LD_ADDR_VAR 0 2
70668: PUSH
70669: LD_VAR 0 1
70673: PUSH
70674: LD_INT 55
70676: PUSH
70677: EMPTY
70678: LIST
70679: PPUSH
70680: CALL_OW 69
70684: IN
70685: ST_TO_ADDR
// end ;
70686: LD_VAR 0 2
70690: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70691: LD_INT 0
70693: PPUSH
70694: PPUSH
// list := [ ] ;
70695: LD_ADDR_VAR 0 5
70699: PUSH
70700: EMPTY
70701: ST_TO_ADDR
// case d of 0 :
70702: LD_VAR 0 3
70706: PUSH
70707: LD_INT 0
70709: DOUBLE
70710: EQUAL
70711: IFTRUE 70715
70713: GO 70848
70715: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70716: LD_ADDR_VAR 0 5
70720: PUSH
70721: LD_VAR 0 1
70725: PUSH
70726: LD_INT 4
70728: MINUS
70729: PUSH
70730: LD_VAR 0 2
70734: PUSH
70735: LD_INT 4
70737: MINUS
70738: PUSH
70739: LD_INT 2
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: LIST
70746: PUSH
70747: LD_VAR 0 1
70751: PUSH
70752: LD_INT 3
70754: MINUS
70755: PUSH
70756: LD_VAR 0 2
70760: PUSH
70761: LD_INT 1
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: LIST
70768: PUSH
70769: LD_VAR 0 1
70773: PUSH
70774: LD_INT 4
70776: PLUS
70777: PUSH
70778: LD_VAR 0 2
70782: PUSH
70783: LD_INT 4
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: LIST
70790: PUSH
70791: LD_VAR 0 1
70795: PUSH
70796: LD_INT 3
70798: PLUS
70799: PUSH
70800: LD_VAR 0 2
70804: PUSH
70805: LD_INT 3
70807: PLUS
70808: PUSH
70809: LD_INT 5
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: LIST
70816: PUSH
70817: LD_VAR 0 1
70821: PUSH
70822: LD_VAR 0 2
70826: PUSH
70827: LD_INT 4
70829: PLUS
70830: PUSH
70831: LD_INT 0
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: LIST
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: ST_TO_ADDR
// end ; 1 :
70846: GO 71546
70848: LD_INT 1
70850: DOUBLE
70851: EQUAL
70852: IFTRUE 70856
70854: GO 70989
70856: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70857: LD_ADDR_VAR 0 5
70861: PUSH
70862: LD_VAR 0 1
70866: PUSH
70867: LD_VAR 0 2
70871: PUSH
70872: LD_INT 4
70874: MINUS
70875: PUSH
70876: LD_INT 3
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: LIST
70883: PUSH
70884: LD_VAR 0 1
70888: PUSH
70889: LD_INT 3
70891: MINUS
70892: PUSH
70893: LD_VAR 0 2
70897: PUSH
70898: LD_INT 3
70900: MINUS
70901: PUSH
70902: LD_INT 2
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: LIST
70909: PUSH
70910: LD_VAR 0 1
70914: PUSH
70915: LD_INT 4
70917: MINUS
70918: PUSH
70919: LD_VAR 0 2
70923: PUSH
70924: LD_INT 1
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: LIST
70931: PUSH
70932: LD_VAR 0 1
70936: PUSH
70937: LD_VAR 0 2
70941: PUSH
70942: LD_INT 3
70944: PLUS
70945: PUSH
70946: LD_INT 0
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: LIST
70953: PUSH
70954: LD_VAR 0 1
70958: PUSH
70959: LD_INT 4
70961: PLUS
70962: PUSH
70963: LD_VAR 0 2
70967: PUSH
70968: LD_INT 4
70970: PLUS
70971: PUSH
70972: LD_INT 5
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: LIST
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: ST_TO_ADDR
// end ; 2 :
70987: GO 71546
70989: LD_INT 2
70991: DOUBLE
70992: EQUAL
70993: IFTRUE 70997
70995: GO 71126
70997: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70998: LD_ADDR_VAR 0 5
71002: PUSH
71003: LD_VAR 0 1
71007: PUSH
71008: LD_VAR 0 2
71012: PUSH
71013: LD_INT 3
71015: MINUS
71016: PUSH
71017: LD_INT 3
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: LIST
71024: PUSH
71025: LD_VAR 0 1
71029: PUSH
71030: LD_INT 4
71032: PLUS
71033: PUSH
71034: LD_VAR 0 2
71038: PUSH
71039: LD_INT 4
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: LIST
71046: PUSH
71047: LD_VAR 0 1
71051: PUSH
71052: LD_VAR 0 2
71056: PUSH
71057: LD_INT 4
71059: PLUS
71060: PUSH
71061: LD_INT 0
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: LIST
71068: PUSH
71069: LD_VAR 0 1
71073: PUSH
71074: LD_INT 3
71076: MINUS
71077: PUSH
71078: LD_VAR 0 2
71082: PUSH
71083: LD_INT 1
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: LIST
71090: PUSH
71091: LD_VAR 0 1
71095: PUSH
71096: LD_INT 4
71098: MINUS
71099: PUSH
71100: LD_VAR 0 2
71104: PUSH
71105: LD_INT 4
71107: MINUS
71108: PUSH
71109: LD_INT 2
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: LIST
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: ST_TO_ADDR
// end ; 3 :
71124: GO 71546
71126: LD_INT 3
71128: DOUBLE
71129: EQUAL
71130: IFTRUE 71134
71132: GO 71267
71134: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71135: LD_ADDR_VAR 0 5
71139: PUSH
71140: LD_VAR 0 1
71144: PUSH
71145: LD_INT 3
71147: PLUS
71148: PUSH
71149: LD_VAR 0 2
71153: PUSH
71154: LD_INT 4
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: LIST
71161: PUSH
71162: LD_VAR 0 1
71166: PUSH
71167: LD_INT 4
71169: PLUS
71170: PUSH
71171: LD_VAR 0 2
71175: PUSH
71176: LD_INT 4
71178: PLUS
71179: PUSH
71180: LD_INT 5
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: LIST
71187: PUSH
71188: LD_VAR 0 1
71192: PUSH
71193: LD_INT 4
71195: MINUS
71196: PUSH
71197: LD_VAR 0 2
71201: PUSH
71202: LD_INT 1
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: LIST
71209: PUSH
71210: LD_VAR 0 1
71214: PUSH
71215: LD_VAR 0 2
71219: PUSH
71220: LD_INT 4
71222: MINUS
71223: PUSH
71224: LD_INT 3
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: LIST
71231: PUSH
71232: LD_VAR 0 1
71236: PUSH
71237: LD_INT 3
71239: MINUS
71240: PUSH
71241: LD_VAR 0 2
71245: PUSH
71246: LD_INT 3
71248: MINUS
71249: PUSH
71250: LD_INT 2
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: LIST
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: ST_TO_ADDR
// end ; 4 :
71265: GO 71546
71267: LD_INT 4
71269: DOUBLE
71270: EQUAL
71271: IFTRUE 71275
71273: GO 71408
71275: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71276: LD_ADDR_VAR 0 5
71280: PUSH
71281: LD_VAR 0 1
71285: PUSH
71286: LD_VAR 0 2
71290: PUSH
71291: LD_INT 4
71293: PLUS
71294: PUSH
71295: LD_INT 0
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: LIST
71302: PUSH
71303: LD_VAR 0 1
71307: PUSH
71308: LD_INT 3
71310: PLUS
71311: PUSH
71312: LD_VAR 0 2
71316: PUSH
71317: LD_INT 3
71319: PLUS
71320: PUSH
71321: LD_INT 5
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: LIST
71328: PUSH
71329: LD_VAR 0 1
71333: PUSH
71334: LD_INT 4
71336: PLUS
71337: PUSH
71338: LD_VAR 0 2
71342: PUSH
71343: LD_INT 4
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: LIST
71350: PUSH
71351: LD_VAR 0 1
71355: PUSH
71356: LD_VAR 0 2
71360: PUSH
71361: LD_INT 3
71363: MINUS
71364: PUSH
71365: LD_INT 3
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: LIST
71372: PUSH
71373: LD_VAR 0 1
71377: PUSH
71378: LD_INT 4
71380: MINUS
71381: PUSH
71382: LD_VAR 0 2
71386: PUSH
71387: LD_INT 4
71389: MINUS
71390: PUSH
71391: LD_INT 2
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: LIST
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: ST_TO_ADDR
// end ; 5 :
71406: GO 71546
71408: LD_INT 5
71410: DOUBLE
71411: EQUAL
71412: IFTRUE 71416
71414: GO 71545
71416: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71417: LD_ADDR_VAR 0 5
71421: PUSH
71422: LD_VAR 0 1
71426: PUSH
71427: LD_INT 4
71429: MINUS
71430: PUSH
71431: LD_VAR 0 2
71435: PUSH
71436: LD_INT 1
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: LIST
71443: PUSH
71444: LD_VAR 0 1
71448: PUSH
71449: LD_VAR 0 2
71453: PUSH
71454: LD_INT 4
71456: MINUS
71457: PUSH
71458: LD_INT 3
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: LIST
71465: PUSH
71466: LD_VAR 0 1
71470: PUSH
71471: LD_INT 4
71473: PLUS
71474: PUSH
71475: LD_VAR 0 2
71479: PUSH
71480: LD_INT 4
71482: PLUS
71483: PUSH
71484: LD_INT 5
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: LIST
71491: PUSH
71492: LD_VAR 0 1
71496: PUSH
71497: LD_INT 3
71499: PLUS
71500: PUSH
71501: LD_VAR 0 2
71505: PUSH
71506: LD_INT 4
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: LIST
71513: PUSH
71514: LD_VAR 0 1
71518: PUSH
71519: LD_VAR 0 2
71523: PUSH
71524: LD_INT 3
71526: PLUS
71527: PUSH
71528: LD_INT 0
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: LIST
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: ST_TO_ADDR
// end ; end ;
71543: GO 71546
71545: POP
// result := list ;
71546: LD_ADDR_VAR 0 4
71550: PUSH
71551: LD_VAR 0 5
71555: ST_TO_ADDR
// end ;
71556: LD_VAR 0 4
71560: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71561: LD_INT 0
71563: PPUSH
71564: PPUSH
71565: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71566: LD_VAR 0 1
71570: NOT
71571: PUSH
71572: LD_VAR 0 2
71576: PUSH
71577: LD_INT 1
71579: PUSH
71580: LD_INT 2
71582: PUSH
71583: LD_INT 3
71585: PUSH
71586: LD_INT 4
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: IN
71595: NOT
71596: OR
71597: IFFALSE 71601
// exit ;
71599: GO 71693
// tmp := [ ] ;
71601: LD_ADDR_VAR 0 5
71605: PUSH
71606: EMPTY
71607: ST_TO_ADDR
// for i in units do
71608: LD_ADDR_VAR 0 4
71612: PUSH
71613: LD_VAR 0 1
71617: PUSH
71618: FOR_IN
71619: IFFALSE 71662
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71621: LD_ADDR_VAR 0 5
71625: PUSH
71626: LD_VAR 0 5
71630: PPUSH
71631: LD_VAR 0 5
71635: PUSH
71636: LD_INT 1
71638: PLUS
71639: PPUSH
71640: LD_VAR 0 4
71644: PPUSH
71645: LD_VAR 0 2
71649: PPUSH
71650: CALL_OW 259
71654: PPUSH
71655: CALL_OW 2
71659: ST_TO_ADDR
71660: GO 71618
71662: POP
71663: POP
// if not tmp then
71664: LD_VAR 0 5
71668: NOT
71669: IFFALSE 71673
// exit ;
71671: GO 71693
// result := SortListByListDesc ( units , tmp ) ;
71673: LD_ADDR_VAR 0 3
71677: PUSH
71678: LD_VAR 0 1
71682: PPUSH
71683: LD_VAR 0 5
71687: PPUSH
71688: CALL_OW 77
71692: ST_TO_ADDR
// end ;
71693: LD_VAR 0 3
71697: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71698: LD_INT 0
71700: PPUSH
71701: PPUSH
71702: PPUSH
// result := false ;
71703: LD_ADDR_VAR 0 3
71707: PUSH
71708: LD_INT 0
71710: ST_TO_ADDR
// x := GetX ( building ) ;
71711: LD_ADDR_VAR 0 4
71715: PUSH
71716: LD_VAR 0 2
71720: PPUSH
71721: CALL_OW 250
71725: ST_TO_ADDR
// y := GetY ( building ) ;
71726: LD_ADDR_VAR 0 5
71730: PUSH
71731: LD_VAR 0 2
71735: PPUSH
71736: CALL_OW 251
71740: ST_TO_ADDR
// if not building or not x or not y then
71741: LD_VAR 0 2
71745: NOT
71746: PUSH
71747: LD_VAR 0 4
71751: NOT
71752: OR
71753: PUSH
71754: LD_VAR 0 5
71758: NOT
71759: OR
71760: IFFALSE 71764
// exit ;
71762: GO 71856
// if GetTaskList ( unit ) then
71764: LD_VAR 0 1
71768: PPUSH
71769: CALL_OW 437
71773: IFFALSE 71856
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71775: LD_STRING e
71777: PUSH
71778: LD_VAR 0 1
71782: PPUSH
71783: CALL_OW 437
71787: PUSH
71788: LD_INT 1
71790: ARRAY
71791: PUSH
71792: LD_INT 1
71794: ARRAY
71795: EQUAL
71796: PUSH
71797: LD_VAR 0 4
71801: PUSH
71802: LD_VAR 0 1
71806: PPUSH
71807: CALL_OW 437
71811: PUSH
71812: LD_INT 1
71814: ARRAY
71815: PUSH
71816: LD_INT 2
71818: ARRAY
71819: EQUAL
71820: AND
71821: PUSH
71822: LD_VAR 0 5
71826: PUSH
71827: LD_VAR 0 1
71831: PPUSH
71832: CALL_OW 437
71836: PUSH
71837: LD_INT 1
71839: ARRAY
71840: PUSH
71841: LD_INT 3
71843: ARRAY
71844: EQUAL
71845: AND
71846: IFFALSE 71856
// result := true end ;
71848: LD_ADDR_VAR 0 3
71852: PUSH
71853: LD_INT 1
71855: ST_TO_ADDR
// end ;
71856: LD_VAR 0 3
71860: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71861: LD_INT 0
71863: PPUSH
// result := false ;
71864: LD_ADDR_VAR 0 4
71868: PUSH
71869: LD_INT 0
71871: ST_TO_ADDR
// if GetTaskList ( unit ) then
71872: LD_VAR 0 1
71876: PPUSH
71877: CALL_OW 437
71881: IFFALSE 71964
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71883: LD_STRING M
71885: PUSH
71886: LD_VAR 0 1
71890: PPUSH
71891: CALL_OW 437
71895: PUSH
71896: LD_INT 1
71898: ARRAY
71899: PUSH
71900: LD_INT 1
71902: ARRAY
71903: EQUAL
71904: PUSH
71905: LD_VAR 0 2
71909: PUSH
71910: LD_VAR 0 1
71914: PPUSH
71915: CALL_OW 437
71919: PUSH
71920: LD_INT 1
71922: ARRAY
71923: PUSH
71924: LD_INT 2
71926: ARRAY
71927: EQUAL
71928: AND
71929: PUSH
71930: LD_VAR 0 3
71934: PUSH
71935: LD_VAR 0 1
71939: PPUSH
71940: CALL_OW 437
71944: PUSH
71945: LD_INT 1
71947: ARRAY
71948: PUSH
71949: LD_INT 3
71951: ARRAY
71952: EQUAL
71953: AND
71954: IFFALSE 71964
// result := true ;
71956: LD_ADDR_VAR 0 4
71960: PUSH
71961: LD_INT 1
71963: ST_TO_ADDR
// end ; end ;
71964: LD_VAR 0 4
71968: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71969: LD_INT 0
71971: PPUSH
71972: PPUSH
71973: PPUSH
71974: PPUSH
// if not unit or not area then
71975: LD_VAR 0 1
71979: NOT
71980: PUSH
71981: LD_VAR 0 2
71985: NOT
71986: OR
71987: IFFALSE 71991
// exit ;
71989: GO 72155
// tmp := AreaToList ( area , i ) ;
71991: LD_ADDR_VAR 0 6
71995: PUSH
71996: LD_VAR 0 2
72000: PPUSH
72001: LD_VAR 0 5
72005: PPUSH
72006: CALL_OW 517
72010: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72011: LD_ADDR_VAR 0 5
72015: PUSH
72016: DOUBLE
72017: LD_INT 1
72019: DEC
72020: ST_TO_ADDR
72021: LD_VAR 0 6
72025: PUSH
72026: LD_INT 1
72028: ARRAY
72029: PUSH
72030: FOR_TO
72031: IFFALSE 72153
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72033: LD_ADDR_VAR 0 7
72037: PUSH
72038: LD_VAR 0 6
72042: PUSH
72043: LD_INT 1
72045: ARRAY
72046: PUSH
72047: LD_VAR 0 5
72051: ARRAY
72052: PUSH
72053: LD_VAR 0 6
72057: PUSH
72058: LD_INT 2
72060: ARRAY
72061: PUSH
72062: LD_VAR 0 5
72066: ARRAY
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72072: LD_VAR 0 7
72076: PUSH
72077: LD_INT 1
72079: ARRAY
72080: PPUSH
72081: LD_VAR 0 7
72085: PUSH
72086: LD_INT 2
72088: ARRAY
72089: PPUSH
72090: CALL_OW 428
72094: PUSH
72095: LD_INT 0
72097: EQUAL
72098: IFFALSE 72151
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72100: LD_VAR 0 1
72104: PPUSH
72105: LD_VAR 0 7
72109: PUSH
72110: LD_INT 1
72112: ARRAY
72113: PPUSH
72114: LD_VAR 0 7
72118: PUSH
72119: LD_INT 2
72121: ARRAY
72122: PPUSH
72123: LD_VAR 0 3
72127: PPUSH
72128: CALL_OW 48
// result := IsPlaced ( unit ) ;
72132: LD_ADDR_VAR 0 4
72136: PUSH
72137: LD_VAR 0 1
72141: PPUSH
72142: CALL_OW 305
72146: ST_TO_ADDR
// exit ;
72147: POP
72148: POP
72149: GO 72155
// end ; end ;
72151: GO 72030
72153: POP
72154: POP
// end ;
72155: LD_VAR 0 4
72159: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72160: LD_INT 0
72162: PPUSH
72163: PPUSH
72164: PPUSH
// if not side or side > 8 then
72165: LD_VAR 0 1
72169: NOT
72170: PUSH
72171: LD_VAR 0 1
72175: PUSH
72176: LD_INT 8
72178: GREATER
72179: OR
72180: IFFALSE 72184
// exit ;
72182: GO 72371
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72184: LD_ADDR_VAR 0 4
72188: PUSH
72189: LD_INT 22
72191: PUSH
72192: LD_VAR 0 1
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: PUSH
72201: LD_INT 21
72203: PUSH
72204: LD_INT 3
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PPUSH
72215: CALL_OW 69
72219: ST_TO_ADDR
// if not tmp then
72220: LD_VAR 0 4
72224: NOT
72225: IFFALSE 72229
// exit ;
72227: GO 72371
// enable_addtolog := true ;
72229: LD_ADDR_OWVAR 81
72233: PUSH
72234: LD_INT 1
72236: ST_TO_ADDR
// AddToLog ( [ ) ;
72237: LD_STRING [
72239: PPUSH
72240: CALL_OW 561
// for i in tmp do
72244: LD_ADDR_VAR 0 3
72248: PUSH
72249: LD_VAR 0 4
72253: PUSH
72254: FOR_IN
72255: IFFALSE 72362
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72257: LD_STRING [
72259: PUSH
72260: LD_VAR 0 3
72264: PPUSH
72265: CALL_OW 266
72269: STR
72270: PUSH
72271: LD_STRING , 
72273: STR
72274: PUSH
72275: LD_VAR 0 3
72279: PPUSH
72280: CALL_OW 250
72284: STR
72285: PUSH
72286: LD_STRING , 
72288: STR
72289: PUSH
72290: LD_VAR 0 3
72294: PPUSH
72295: CALL_OW 251
72299: STR
72300: PUSH
72301: LD_STRING , 
72303: STR
72304: PUSH
72305: LD_VAR 0 3
72309: PPUSH
72310: CALL_OW 254
72314: STR
72315: PUSH
72316: LD_STRING , 
72318: STR
72319: PUSH
72320: LD_VAR 0 3
72324: PPUSH
72325: LD_INT 1
72327: PPUSH
72328: CALL_OW 268
72332: STR
72333: PUSH
72334: LD_STRING , 
72336: STR
72337: PUSH
72338: LD_VAR 0 3
72342: PPUSH
72343: LD_INT 2
72345: PPUSH
72346: CALL_OW 268
72350: STR
72351: PUSH
72352: LD_STRING ],
72354: STR
72355: PPUSH
72356: CALL_OW 561
// end ;
72360: GO 72254
72362: POP
72363: POP
// AddToLog ( ]; ) ;
72364: LD_STRING ];
72366: PPUSH
72367: CALL_OW 561
// end ;
72371: LD_VAR 0 2
72375: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72376: LD_INT 0
72378: PPUSH
72379: PPUSH
72380: PPUSH
72381: PPUSH
72382: PPUSH
// if not area or not rate or not max then
72383: LD_VAR 0 1
72387: NOT
72388: PUSH
72389: LD_VAR 0 2
72393: NOT
72394: OR
72395: PUSH
72396: LD_VAR 0 4
72400: NOT
72401: OR
72402: IFFALSE 72406
// exit ;
72404: GO 72595
// while 1 do
72406: LD_INT 1
72408: IFFALSE 72595
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72410: LD_ADDR_VAR 0 9
72414: PUSH
72415: LD_VAR 0 1
72419: PPUSH
72420: LD_INT 1
72422: PPUSH
72423: CALL_OW 287
72427: PUSH
72428: LD_INT 10
72430: MUL
72431: ST_TO_ADDR
// r := rate / 10 ;
72432: LD_ADDR_VAR 0 7
72436: PUSH
72437: LD_VAR 0 2
72441: PUSH
72442: LD_INT 10
72444: DIVREAL
72445: ST_TO_ADDR
// time := 1 1$00 ;
72446: LD_ADDR_VAR 0 8
72450: PUSH
72451: LD_INT 2100
72453: ST_TO_ADDR
// if amount < min then
72454: LD_VAR 0 9
72458: PUSH
72459: LD_VAR 0 3
72463: LESS
72464: IFFALSE 72482
// r := r * 2 else
72466: LD_ADDR_VAR 0 7
72470: PUSH
72471: LD_VAR 0 7
72475: PUSH
72476: LD_INT 2
72478: MUL
72479: ST_TO_ADDR
72480: GO 72508
// if amount > max then
72482: LD_VAR 0 9
72486: PUSH
72487: LD_VAR 0 4
72491: GREATER
72492: IFFALSE 72508
// r := r / 2 ;
72494: LD_ADDR_VAR 0 7
72498: PUSH
72499: LD_VAR 0 7
72503: PUSH
72504: LD_INT 2
72506: DIVREAL
72507: ST_TO_ADDR
// time := time / r ;
72508: LD_ADDR_VAR 0 8
72512: PUSH
72513: LD_VAR 0 8
72517: PUSH
72518: LD_VAR 0 7
72522: DIVREAL
72523: ST_TO_ADDR
// if time < 0 then
72524: LD_VAR 0 8
72528: PUSH
72529: LD_INT 0
72531: LESS
72532: IFFALSE 72549
// time := time * - 1 ;
72534: LD_ADDR_VAR 0 8
72538: PUSH
72539: LD_VAR 0 8
72543: PUSH
72544: LD_INT 1
72546: NEG
72547: MUL
72548: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72549: LD_VAR 0 8
72553: PUSH
72554: LD_INT 35
72556: PPUSH
72557: LD_INT 875
72559: PPUSH
72560: CALL_OW 12
72564: PLUS
72565: PPUSH
72566: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72570: LD_INT 1
72572: PPUSH
72573: LD_INT 5
72575: PPUSH
72576: CALL_OW 12
72580: PPUSH
72581: LD_VAR 0 1
72585: PPUSH
72586: LD_INT 1
72588: PPUSH
72589: CALL_OW 55
// end ;
72593: GO 72406
// end ;
72595: LD_VAR 0 5
72599: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72600: LD_INT 0
72602: PPUSH
72603: PPUSH
72604: PPUSH
72605: PPUSH
72606: PPUSH
72607: PPUSH
72608: PPUSH
72609: PPUSH
// if not turrets or not factories then
72610: LD_VAR 0 1
72614: NOT
72615: PUSH
72616: LD_VAR 0 2
72620: NOT
72621: OR
72622: IFFALSE 72626
// exit ;
72624: GO 72933
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72626: LD_ADDR_VAR 0 10
72630: PUSH
72631: LD_INT 5
72633: PUSH
72634: LD_INT 6
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: PUSH
72641: LD_INT 2
72643: PUSH
72644: LD_INT 4
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 3
72653: PUSH
72654: LD_INT 5
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 24
72668: PUSH
72669: LD_INT 25
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: LD_INT 23
72678: PUSH
72679: LD_INT 27
72681: PUSH
72682: EMPTY
72683: LIST
72684: LIST
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PUSH
72690: LD_INT 42
72692: PUSH
72693: LD_INT 43
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 44
72702: PUSH
72703: LD_INT 46
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: PUSH
72710: LD_INT 45
72712: PUSH
72713: LD_INT 47
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: LIST
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: LIST
72729: ST_TO_ADDR
// result := [ ] ;
72730: LD_ADDR_VAR 0 3
72734: PUSH
72735: EMPTY
72736: ST_TO_ADDR
// for i in turrets do
72737: LD_ADDR_VAR 0 4
72741: PUSH
72742: LD_VAR 0 1
72746: PUSH
72747: FOR_IN
72748: IFFALSE 72931
// begin nat := GetNation ( i ) ;
72750: LD_ADDR_VAR 0 7
72754: PUSH
72755: LD_VAR 0 4
72759: PPUSH
72760: CALL_OW 248
72764: ST_TO_ADDR
// weapon := 0 ;
72765: LD_ADDR_VAR 0 8
72769: PUSH
72770: LD_INT 0
72772: ST_TO_ADDR
// if not nat then
72773: LD_VAR 0 7
72777: NOT
72778: IFFALSE 72782
// continue ;
72780: GO 72747
// for j in list [ nat ] do
72782: LD_ADDR_VAR 0 5
72786: PUSH
72787: LD_VAR 0 10
72791: PUSH
72792: LD_VAR 0 7
72796: ARRAY
72797: PUSH
72798: FOR_IN
72799: IFFALSE 72840
// if GetBWeapon ( i ) = j [ 1 ] then
72801: LD_VAR 0 4
72805: PPUSH
72806: CALL_OW 269
72810: PUSH
72811: LD_VAR 0 5
72815: PUSH
72816: LD_INT 1
72818: ARRAY
72819: EQUAL
72820: IFFALSE 72838
// begin weapon := j [ 2 ] ;
72822: LD_ADDR_VAR 0 8
72826: PUSH
72827: LD_VAR 0 5
72831: PUSH
72832: LD_INT 2
72834: ARRAY
72835: ST_TO_ADDR
// break ;
72836: GO 72840
// end ;
72838: GO 72798
72840: POP
72841: POP
// if not weapon then
72842: LD_VAR 0 8
72846: NOT
72847: IFFALSE 72851
// continue ;
72849: GO 72747
// for k in factories do
72851: LD_ADDR_VAR 0 6
72855: PUSH
72856: LD_VAR 0 2
72860: PUSH
72861: FOR_IN
72862: IFFALSE 72927
// begin weapons := AvailableWeaponList ( k ) ;
72864: LD_ADDR_VAR 0 9
72868: PUSH
72869: LD_VAR 0 6
72873: PPUSH
72874: CALL_OW 478
72878: ST_TO_ADDR
// if not weapons then
72879: LD_VAR 0 9
72883: NOT
72884: IFFALSE 72888
// continue ;
72886: GO 72861
// if weapon in weapons then
72888: LD_VAR 0 8
72892: PUSH
72893: LD_VAR 0 9
72897: IN
72898: IFFALSE 72925
// begin result := [ i , weapon ] ;
72900: LD_ADDR_VAR 0 3
72904: PUSH
72905: LD_VAR 0 4
72909: PUSH
72910: LD_VAR 0 8
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: ST_TO_ADDR
// exit ;
72919: POP
72920: POP
72921: POP
72922: POP
72923: GO 72933
// end ; end ;
72925: GO 72861
72927: POP
72928: POP
// end ;
72929: GO 72747
72931: POP
72932: POP
// end ;
72933: LD_VAR 0 3
72937: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72938: LD_INT 0
72940: PPUSH
// if not side or side > 8 then
72941: LD_VAR 0 3
72945: NOT
72946: PUSH
72947: LD_VAR 0 3
72951: PUSH
72952: LD_INT 8
72954: GREATER
72955: OR
72956: IFFALSE 72960
// exit ;
72958: GO 73019
// if not range then
72960: LD_VAR 0 4
72964: NOT
72965: IFFALSE 72976
// range := - 12 ;
72967: LD_ADDR_VAR 0 4
72971: PUSH
72972: LD_INT 12
72974: NEG
72975: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72976: LD_VAR 0 1
72980: PPUSH
72981: LD_VAR 0 2
72985: PPUSH
72986: LD_VAR 0 3
72990: PPUSH
72991: LD_VAR 0 4
72995: PPUSH
72996: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73000: LD_VAR 0 1
73004: PPUSH
73005: LD_VAR 0 2
73009: PPUSH
73010: LD_VAR 0 3
73014: PPUSH
73015: CALL_OW 331
// end ;
73019: LD_VAR 0 5
73023: RET
// export function Video ( mode ) ; begin
73024: LD_INT 0
73026: PPUSH
// ingame_video = mode ;
73027: LD_ADDR_OWVAR 52
73031: PUSH
73032: LD_VAR 0 1
73036: ST_TO_ADDR
// interface_hidden = mode ;
73037: LD_ADDR_OWVAR 54
73041: PUSH
73042: LD_VAR 0 1
73046: ST_TO_ADDR
// end ;
73047: LD_VAR 0 2
73051: RET
// export function Join ( array , element ) ; begin
73052: LD_INT 0
73054: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73055: LD_ADDR_VAR 0 3
73059: PUSH
73060: LD_VAR 0 1
73064: PPUSH
73065: LD_VAR 0 1
73069: PUSH
73070: LD_INT 1
73072: PLUS
73073: PPUSH
73074: LD_VAR 0 2
73078: PPUSH
73079: CALL_OW 1
73083: ST_TO_ADDR
// end ;
73084: LD_VAR 0 3
73088: RET
// export function JoinUnion ( array , element ) ; begin
73089: LD_INT 0
73091: PPUSH
// result := array union element ;
73092: LD_ADDR_VAR 0 3
73096: PUSH
73097: LD_VAR 0 1
73101: PUSH
73102: LD_VAR 0 2
73106: UNION
73107: ST_TO_ADDR
// end ;
73108: LD_VAR 0 3
73112: RET
// export function GetBehemoths ( side ) ; begin
73113: LD_INT 0
73115: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73116: LD_ADDR_VAR 0 2
73120: PUSH
73121: LD_INT 22
73123: PUSH
73124: LD_VAR 0 1
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 31
73135: PUSH
73136: LD_INT 25
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: PPUSH
73147: CALL_OW 69
73151: ST_TO_ADDR
// end ;
73152: LD_VAR 0 2
73156: RET
// export function Shuffle ( array ) ; var i , index ; begin
73157: LD_INT 0
73159: PPUSH
73160: PPUSH
73161: PPUSH
// result := [ ] ;
73162: LD_ADDR_VAR 0 2
73166: PUSH
73167: EMPTY
73168: ST_TO_ADDR
// if not array then
73169: LD_VAR 0 1
73173: NOT
73174: IFFALSE 73178
// exit ;
73176: GO 73277
// Randomize ;
73178: CALL_OW 10
// for i = array downto 1 do
73182: LD_ADDR_VAR 0 3
73186: PUSH
73187: DOUBLE
73188: LD_VAR 0 1
73192: INC
73193: ST_TO_ADDR
73194: LD_INT 1
73196: PUSH
73197: FOR_DOWNTO
73198: IFFALSE 73275
// begin index := rand ( 1 , array ) ;
73200: LD_ADDR_VAR 0 4
73204: PUSH
73205: LD_INT 1
73207: PPUSH
73208: LD_VAR 0 1
73212: PPUSH
73213: CALL_OW 12
73217: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73218: LD_ADDR_VAR 0 2
73222: PUSH
73223: LD_VAR 0 2
73227: PPUSH
73228: LD_VAR 0 2
73232: PUSH
73233: LD_INT 1
73235: PLUS
73236: PPUSH
73237: LD_VAR 0 1
73241: PUSH
73242: LD_VAR 0 4
73246: ARRAY
73247: PPUSH
73248: CALL_OW 2
73252: ST_TO_ADDR
// array := Delete ( array , index ) ;
73253: LD_ADDR_VAR 0 1
73257: PUSH
73258: LD_VAR 0 1
73262: PPUSH
73263: LD_VAR 0 4
73267: PPUSH
73268: CALL_OW 3
73272: ST_TO_ADDR
// end ;
73273: GO 73197
73275: POP
73276: POP
// end ;
73277: LD_VAR 0 2
73281: RET
// export function GetBaseMaterials ( base ) ; begin
73282: LD_INT 0
73284: PPUSH
// result := [ 0 , 0 , 0 ] ;
73285: LD_ADDR_VAR 0 2
73289: PUSH
73290: LD_INT 0
73292: PUSH
73293: LD_INT 0
73295: PUSH
73296: LD_INT 0
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: LIST
73303: ST_TO_ADDR
// if not base then
73304: LD_VAR 0 1
73308: NOT
73309: IFFALSE 73313
// exit ;
73311: GO 73362
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73313: LD_ADDR_VAR 0 2
73317: PUSH
73318: LD_VAR 0 1
73322: PPUSH
73323: LD_INT 1
73325: PPUSH
73326: CALL_OW 275
73330: PUSH
73331: LD_VAR 0 1
73335: PPUSH
73336: LD_INT 2
73338: PPUSH
73339: CALL_OW 275
73343: PUSH
73344: LD_VAR 0 1
73348: PPUSH
73349: LD_INT 3
73351: PPUSH
73352: CALL_OW 275
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: LIST
73361: ST_TO_ADDR
// end ;
73362: LD_VAR 0 2
73366: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73367: LD_INT 0
73369: PPUSH
73370: PPUSH
// result := array ;
73371: LD_ADDR_VAR 0 3
73375: PUSH
73376: LD_VAR 0 1
73380: ST_TO_ADDR
// if size > 0 then
73381: LD_VAR 0 2
73385: PUSH
73386: LD_INT 0
73388: GREATER
73389: IFFALSE 73435
// for i := array downto size do
73391: LD_ADDR_VAR 0 4
73395: PUSH
73396: DOUBLE
73397: LD_VAR 0 1
73401: INC
73402: ST_TO_ADDR
73403: LD_VAR 0 2
73407: PUSH
73408: FOR_DOWNTO
73409: IFFALSE 73433
// result := Delete ( result , result ) ;
73411: LD_ADDR_VAR 0 3
73415: PUSH
73416: LD_VAR 0 3
73420: PPUSH
73421: LD_VAR 0 3
73425: PPUSH
73426: CALL_OW 3
73430: ST_TO_ADDR
73431: GO 73408
73433: POP
73434: POP
// end ;
73435: LD_VAR 0 3
73439: RET
// export function ComExit ( unit ) ; var tmp ; begin
73440: LD_INT 0
73442: PPUSH
73443: PPUSH
// if not IsInUnit ( unit ) then
73444: LD_VAR 0 1
73448: PPUSH
73449: CALL_OW 310
73453: NOT
73454: IFFALSE 73458
// exit ;
73456: GO 73518
// tmp := IsInUnit ( unit ) ;
73458: LD_ADDR_VAR 0 3
73462: PUSH
73463: LD_VAR 0 1
73467: PPUSH
73468: CALL_OW 310
73472: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73473: LD_VAR 0 3
73477: PPUSH
73478: CALL_OW 247
73482: PUSH
73483: LD_INT 2
73485: EQUAL
73486: IFFALSE 73499
// ComExitVehicle ( unit ) else
73488: LD_VAR 0 1
73492: PPUSH
73493: CALL_OW 121
73497: GO 73508
// ComExitBuilding ( unit ) ;
73499: LD_VAR 0 1
73503: PPUSH
73504: CALL_OW 122
// result := tmp ;
73508: LD_ADDR_VAR 0 2
73512: PUSH
73513: LD_VAR 0 3
73517: ST_TO_ADDR
// end ;
73518: LD_VAR 0 2
73522: RET
// export function ComExitAll ( units ) ; var i ; begin
73523: LD_INT 0
73525: PPUSH
73526: PPUSH
// if not units then
73527: LD_VAR 0 1
73531: NOT
73532: IFFALSE 73536
// exit ;
73534: GO 73562
// for i in units do
73536: LD_ADDR_VAR 0 3
73540: PUSH
73541: LD_VAR 0 1
73545: PUSH
73546: FOR_IN
73547: IFFALSE 73560
// ComExit ( i ) ;
73549: LD_VAR 0 3
73553: PPUSH
73554: CALL 73440 0 1
73558: GO 73546
73560: POP
73561: POP
// end ;
73562: LD_VAR 0 2
73566: RET
// export function ResetHc ; begin
73567: LD_INT 0
73569: PPUSH
// InitHc ;
73570: CALL_OW 19
// hc_importance := 0 ;
73574: LD_ADDR_OWVAR 32
73578: PUSH
73579: LD_INT 0
73581: ST_TO_ADDR
// end ;
73582: LD_VAR 0 1
73586: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73587: LD_INT 0
73589: PPUSH
73590: PPUSH
73591: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73592: LD_ADDR_VAR 0 6
73596: PUSH
73597: LD_VAR 0 1
73601: PUSH
73602: LD_VAR 0 3
73606: PLUS
73607: PUSH
73608: LD_INT 2
73610: DIV
73611: ST_TO_ADDR
// if _x < 0 then
73612: LD_VAR 0 6
73616: PUSH
73617: LD_INT 0
73619: LESS
73620: IFFALSE 73637
// _x := _x * - 1 ;
73622: LD_ADDR_VAR 0 6
73626: PUSH
73627: LD_VAR 0 6
73631: PUSH
73632: LD_INT 1
73634: NEG
73635: MUL
73636: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73637: LD_ADDR_VAR 0 7
73641: PUSH
73642: LD_VAR 0 2
73646: PUSH
73647: LD_VAR 0 4
73651: PLUS
73652: PUSH
73653: LD_INT 2
73655: DIV
73656: ST_TO_ADDR
// if _y < 0 then
73657: LD_VAR 0 7
73661: PUSH
73662: LD_INT 0
73664: LESS
73665: IFFALSE 73682
// _y := _y * - 1 ;
73667: LD_ADDR_VAR 0 7
73671: PUSH
73672: LD_VAR 0 7
73676: PUSH
73677: LD_INT 1
73679: NEG
73680: MUL
73681: ST_TO_ADDR
// result := [ _x , _y ] ;
73682: LD_ADDR_VAR 0 5
73686: PUSH
73687: LD_VAR 0 6
73691: PUSH
73692: LD_VAR 0 7
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: ST_TO_ADDR
// end ;
73701: LD_VAR 0 5
73705: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73706: LD_INT 0
73708: PPUSH
73709: PPUSH
73710: PPUSH
73711: PPUSH
// task := GetTaskList ( unit ) ;
73712: LD_ADDR_VAR 0 7
73716: PUSH
73717: LD_VAR 0 1
73721: PPUSH
73722: CALL_OW 437
73726: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73727: LD_VAR 0 7
73731: NOT
73732: PUSH
73733: LD_VAR 0 1
73737: PPUSH
73738: LD_VAR 0 2
73742: PPUSH
73743: CALL_OW 308
73747: NOT
73748: AND
73749: IFFALSE 73753
// exit ;
73751: GO 73871
// if IsInArea ( unit , area ) then
73753: LD_VAR 0 1
73757: PPUSH
73758: LD_VAR 0 2
73762: PPUSH
73763: CALL_OW 308
73767: IFFALSE 73785
// begin ComMoveToArea ( unit , goAway ) ;
73769: LD_VAR 0 1
73773: PPUSH
73774: LD_VAR 0 3
73778: PPUSH
73779: CALL_OW 113
// exit ;
73783: GO 73871
// end ; if task [ 1 ] [ 1 ] <> M then
73785: LD_VAR 0 7
73789: PUSH
73790: LD_INT 1
73792: ARRAY
73793: PUSH
73794: LD_INT 1
73796: ARRAY
73797: PUSH
73798: LD_STRING M
73800: NONEQUAL
73801: IFFALSE 73805
// exit ;
73803: GO 73871
// x := task [ 1 ] [ 2 ] ;
73805: LD_ADDR_VAR 0 5
73809: PUSH
73810: LD_VAR 0 7
73814: PUSH
73815: LD_INT 1
73817: ARRAY
73818: PUSH
73819: LD_INT 2
73821: ARRAY
73822: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73823: LD_ADDR_VAR 0 6
73827: PUSH
73828: LD_VAR 0 7
73832: PUSH
73833: LD_INT 1
73835: ARRAY
73836: PUSH
73837: LD_INT 3
73839: ARRAY
73840: ST_TO_ADDR
// if InArea ( x , y , area ) then
73841: LD_VAR 0 5
73845: PPUSH
73846: LD_VAR 0 6
73850: PPUSH
73851: LD_VAR 0 2
73855: PPUSH
73856: CALL_OW 309
73860: IFFALSE 73871
// ComStop ( unit ) ;
73862: LD_VAR 0 1
73866: PPUSH
73867: CALL_OW 141
// end ;
73871: LD_VAR 0 4
73875: RET
// export function Abs ( value ) ; begin
73876: LD_INT 0
73878: PPUSH
// result := value ;
73879: LD_ADDR_VAR 0 2
73883: PUSH
73884: LD_VAR 0 1
73888: ST_TO_ADDR
// if value < 0 then
73889: LD_VAR 0 1
73893: PUSH
73894: LD_INT 0
73896: LESS
73897: IFFALSE 73914
// result := value * - 1 ;
73899: LD_ADDR_VAR 0 2
73903: PUSH
73904: LD_VAR 0 1
73908: PUSH
73909: LD_INT 1
73911: NEG
73912: MUL
73913: ST_TO_ADDR
// end ;
73914: LD_VAR 0 2
73918: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73919: LD_INT 0
73921: PPUSH
73922: PPUSH
73923: PPUSH
73924: PPUSH
73925: PPUSH
73926: PPUSH
73927: PPUSH
73928: PPUSH
// if not unit or not building then
73929: LD_VAR 0 1
73933: NOT
73934: PUSH
73935: LD_VAR 0 2
73939: NOT
73940: OR
73941: IFFALSE 73945
// exit ;
73943: GO 74171
// x := GetX ( building ) ;
73945: LD_ADDR_VAR 0 4
73949: PUSH
73950: LD_VAR 0 2
73954: PPUSH
73955: CALL_OW 250
73959: ST_TO_ADDR
// y := GetY ( building ) ;
73960: LD_ADDR_VAR 0 6
73964: PUSH
73965: LD_VAR 0 2
73969: PPUSH
73970: CALL_OW 251
73974: ST_TO_ADDR
// d := GetDir ( building ) ;
73975: LD_ADDR_VAR 0 8
73979: PUSH
73980: LD_VAR 0 2
73984: PPUSH
73985: CALL_OW 254
73989: ST_TO_ADDR
// r := 4 ;
73990: LD_ADDR_VAR 0 9
73994: PUSH
73995: LD_INT 4
73997: ST_TO_ADDR
// for i := 1 to 5 do
73998: LD_ADDR_VAR 0 10
74002: PUSH
74003: DOUBLE
74004: LD_INT 1
74006: DEC
74007: ST_TO_ADDR
74008: LD_INT 5
74010: PUSH
74011: FOR_TO
74012: IFFALSE 74169
// begin _x := ShiftX ( x , d , r + i ) ;
74014: LD_ADDR_VAR 0 5
74018: PUSH
74019: LD_VAR 0 4
74023: PPUSH
74024: LD_VAR 0 8
74028: PPUSH
74029: LD_VAR 0 9
74033: PUSH
74034: LD_VAR 0 10
74038: PLUS
74039: PPUSH
74040: CALL_OW 272
74044: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74045: LD_ADDR_VAR 0 7
74049: PUSH
74050: LD_VAR 0 6
74054: PPUSH
74055: LD_VAR 0 8
74059: PPUSH
74060: LD_VAR 0 9
74064: PUSH
74065: LD_VAR 0 10
74069: PLUS
74070: PPUSH
74071: CALL_OW 273
74075: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74076: LD_VAR 0 5
74080: PPUSH
74081: LD_VAR 0 7
74085: PPUSH
74086: CALL_OW 488
74090: PUSH
74091: LD_VAR 0 5
74095: PPUSH
74096: LD_VAR 0 7
74100: PPUSH
74101: CALL_OW 428
74105: PPUSH
74106: CALL_OW 247
74110: PUSH
74111: LD_INT 3
74113: PUSH
74114: LD_INT 2
74116: PUSH
74117: EMPTY
74118: LIST
74119: LIST
74120: IN
74121: NOT
74122: AND
74123: IFFALSE 74167
// begin ComMoveXY ( unit , _x , _y ) ;
74125: LD_VAR 0 1
74129: PPUSH
74130: LD_VAR 0 5
74134: PPUSH
74135: LD_VAR 0 7
74139: PPUSH
74140: CALL_OW 111
// result := [ _x , _y ] ;
74144: LD_ADDR_VAR 0 3
74148: PUSH
74149: LD_VAR 0 5
74153: PUSH
74154: LD_VAR 0 7
74158: PUSH
74159: EMPTY
74160: LIST
74161: LIST
74162: ST_TO_ADDR
// exit ;
74163: POP
74164: POP
74165: GO 74171
// end ; end ;
74167: GO 74011
74169: POP
74170: POP
// end ;
74171: LD_VAR 0 3
74175: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74176: LD_INT 0
74178: PPUSH
74179: PPUSH
74180: PPUSH
// result := 0 ;
74181: LD_ADDR_VAR 0 3
74185: PUSH
74186: LD_INT 0
74188: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74189: LD_VAR 0 1
74193: PUSH
74194: LD_INT 0
74196: LESS
74197: PUSH
74198: LD_VAR 0 1
74202: PUSH
74203: LD_INT 8
74205: GREATER
74206: OR
74207: PUSH
74208: LD_VAR 0 2
74212: PUSH
74213: LD_INT 0
74215: LESS
74216: OR
74217: PUSH
74218: LD_VAR 0 2
74222: PUSH
74223: LD_INT 8
74225: GREATER
74226: OR
74227: IFFALSE 74231
// exit ;
74229: GO 74306
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74231: LD_ADDR_VAR 0 4
74235: PUSH
74236: LD_INT 22
74238: PUSH
74239: LD_VAR 0 2
74243: PUSH
74244: EMPTY
74245: LIST
74246: LIST
74247: PPUSH
74248: CALL_OW 69
74252: PUSH
74253: FOR_IN
74254: IFFALSE 74304
// begin un := UnitShoot ( i ) ;
74256: LD_ADDR_VAR 0 5
74260: PUSH
74261: LD_VAR 0 4
74265: PPUSH
74266: CALL_OW 504
74270: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74271: LD_VAR 0 5
74275: PPUSH
74276: CALL_OW 255
74280: PUSH
74281: LD_VAR 0 1
74285: EQUAL
74286: IFFALSE 74302
// begin result := un ;
74288: LD_ADDR_VAR 0 3
74292: PUSH
74293: LD_VAR 0 5
74297: ST_TO_ADDR
// exit ;
74298: POP
74299: POP
74300: GO 74306
// end ; end ;
74302: GO 74253
74304: POP
74305: POP
// end ;
74306: LD_VAR 0 3
74310: RET
// export function GetCargoBay ( units ) ; begin
74311: LD_INT 0
74313: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74314: LD_ADDR_VAR 0 2
74318: PUSH
74319: LD_VAR 0 1
74323: PPUSH
74324: LD_INT 2
74326: PUSH
74327: LD_INT 34
74329: PUSH
74330: LD_INT 12
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: PUSH
74337: LD_INT 34
74339: PUSH
74340: LD_INT 51
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: PUSH
74347: LD_INT 34
74349: PUSH
74350: LD_INT 32
74352: PUSH
74353: EMPTY
74354: LIST
74355: LIST
74356: PUSH
74357: LD_INT 34
74359: PUSH
74360: LD_EXP 33
74364: PUSH
74365: EMPTY
74366: LIST
74367: LIST
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: PPUSH
74376: CALL_OW 72
74380: ST_TO_ADDR
// end ;
74381: LD_VAR 0 2
74385: RET
// export function Negate ( value ) ; begin
74386: LD_INT 0
74388: PPUSH
// result := not value ;
74389: LD_ADDR_VAR 0 2
74393: PUSH
74394: LD_VAR 0 1
74398: NOT
74399: ST_TO_ADDR
// end ;
74400: LD_VAR 0 2
74404: RET
// export function Inc ( value ) ; begin
74405: LD_INT 0
74407: PPUSH
// result := value + 1 ;
74408: LD_ADDR_VAR 0 2
74412: PUSH
74413: LD_VAR 0 1
74417: PUSH
74418: LD_INT 1
74420: PLUS
74421: ST_TO_ADDR
// end ;
74422: LD_VAR 0 2
74426: RET
// export function Dec ( value ) ; begin
74427: LD_INT 0
74429: PPUSH
// result := value - 1 ;
74430: LD_ADDR_VAR 0 2
74434: PUSH
74435: LD_VAR 0 1
74439: PUSH
74440: LD_INT 1
74442: MINUS
74443: ST_TO_ADDR
// end ;
74444: LD_VAR 0 2
74448: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74449: LD_INT 0
74451: PPUSH
74452: PPUSH
74453: PPUSH
74454: PPUSH
74455: PPUSH
74456: PPUSH
74457: PPUSH
74458: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74459: LD_VAR 0 1
74463: PPUSH
74464: LD_VAR 0 2
74468: PPUSH
74469: CALL_OW 488
74473: NOT
74474: PUSH
74475: LD_VAR 0 3
74479: PPUSH
74480: LD_VAR 0 4
74484: PPUSH
74485: CALL_OW 488
74489: NOT
74490: OR
74491: IFFALSE 74504
// begin result := - 1 ;
74493: LD_ADDR_VAR 0 5
74497: PUSH
74498: LD_INT 1
74500: NEG
74501: ST_TO_ADDR
// exit ;
74502: GO 74739
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74504: LD_ADDR_VAR 0 12
74508: PUSH
74509: LD_VAR 0 1
74513: PPUSH
74514: LD_VAR 0 2
74518: PPUSH
74519: LD_VAR 0 3
74523: PPUSH
74524: LD_VAR 0 4
74528: PPUSH
74529: CALL 73587 0 4
74533: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74534: LD_ADDR_VAR 0 11
74538: PUSH
74539: LD_VAR 0 1
74543: PPUSH
74544: LD_VAR 0 2
74548: PPUSH
74549: LD_VAR 0 12
74553: PUSH
74554: LD_INT 1
74556: ARRAY
74557: PPUSH
74558: LD_VAR 0 12
74562: PUSH
74563: LD_INT 2
74565: ARRAY
74566: PPUSH
74567: CALL_OW 298
74571: ST_TO_ADDR
// distance := 9999 ;
74572: LD_ADDR_VAR 0 10
74576: PUSH
74577: LD_INT 9999
74579: ST_TO_ADDR
// for i := 0 to 5 do
74580: LD_ADDR_VAR 0 6
74584: PUSH
74585: DOUBLE
74586: LD_INT 0
74588: DEC
74589: ST_TO_ADDR
74590: LD_INT 5
74592: PUSH
74593: FOR_TO
74594: IFFALSE 74737
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74596: LD_ADDR_VAR 0 7
74600: PUSH
74601: LD_VAR 0 1
74605: PPUSH
74606: LD_VAR 0 6
74610: PPUSH
74611: LD_VAR 0 11
74615: PPUSH
74616: CALL_OW 272
74620: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74621: LD_ADDR_VAR 0 8
74625: PUSH
74626: LD_VAR 0 2
74630: PPUSH
74631: LD_VAR 0 6
74635: PPUSH
74636: LD_VAR 0 11
74640: PPUSH
74641: CALL_OW 273
74645: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74646: LD_VAR 0 7
74650: PPUSH
74651: LD_VAR 0 8
74655: PPUSH
74656: CALL_OW 488
74660: NOT
74661: IFFALSE 74665
// continue ;
74663: GO 74593
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74665: LD_ADDR_VAR 0 9
74669: PUSH
74670: LD_VAR 0 12
74674: PUSH
74675: LD_INT 1
74677: ARRAY
74678: PPUSH
74679: LD_VAR 0 12
74683: PUSH
74684: LD_INT 2
74686: ARRAY
74687: PPUSH
74688: LD_VAR 0 7
74692: PPUSH
74693: LD_VAR 0 8
74697: PPUSH
74698: CALL_OW 298
74702: ST_TO_ADDR
// if tmp < distance then
74703: LD_VAR 0 9
74707: PUSH
74708: LD_VAR 0 10
74712: LESS
74713: IFFALSE 74735
// begin result := i ;
74715: LD_ADDR_VAR 0 5
74719: PUSH
74720: LD_VAR 0 6
74724: ST_TO_ADDR
// distance := tmp ;
74725: LD_ADDR_VAR 0 10
74729: PUSH
74730: LD_VAR 0 9
74734: ST_TO_ADDR
// end ; end ;
74735: GO 74593
74737: POP
74738: POP
// end ;
74739: LD_VAR 0 5
74743: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74744: LD_INT 0
74746: PPUSH
74747: PPUSH
// if not driver or not IsInUnit ( driver ) then
74748: LD_VAR 0 1
74752: NOT
74753: PUSH
74754: LD_VAR 0 1
74758: PPUSH
74759: CALL_OW 310
74763: NOT
74764: OR
74765: IFFALSE 74769
// exit ;
74767: GO 74859
// vehicle := IsInUnit ( driver ) ;
74769: LD_ADDR_VAR 0 3
74773: PUSH
74774: LD_VAR 0 1
74778: PPUSH
74779: CALL_OW 310
74783: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74784: LD_VAR 0 1
74788: PPUSH
74789: LD_STRING \
74791: PUSH
74792: LD_INT 0
74794: PUSH
74795: LD_INT 0
74797: PUSH
74798: LD_INT 0
74800: PUSH
74801: LD_INT 0
74803: PUSH
74804: LD_INT 0
74806: PUSH
74807: LD_INT 0
74809: PUSH
74810: EMPTY
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: PUSH
74819: LD_STRING E
74821: PUSH
74822: LD_INT 0
74824: PUSH
74825: LD_INT 0
74827: PUSH
74828: LD_VAR 0 3
74832: PUSH
74833: LD_INT 0
74835: PUSH
74836: LD_INT 0
74838: PUSH
74839: LD_INT 0
74841: PUSH
74842: EMPTY
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: PUSH
74851: EMPTY
74852: LIST
74853: LIST
74854: PPUSH
74855: CALL_OW 446
// end ;
74859: LD_VAR 0 2
74863: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74864: LD_INT 0
74866: PPUSH
74867: PPUSH
// if not driver or not IsInUnit ( driver ) then
74868: LD_VAR 0 1
74872: NOT
74873: PUSH
74874: LD_VAR 0 1
74878: PPUSH
74879: CALL_OW 310
74883: NOT
74884: OR
74885: IFFALSE 74889
// exit ;
74887: GO 74979
// vehicle := IsInUnit ( driver ) ;
74889: LD_ADDR_VAR 0 3
74893: PUSH
74894: LD_VAR 0 1
74898: PPUSH
74899: CALL_OW 310
74903: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74904: LD_VAR 0 1
74908: PPUSH
74909: LD_STRING \
74911: PUSH
74912: LD_INT 0
74914: PUSH
74915: LD_INT 0
74917: PUSH
74918: LD_INT 0
74920: PUSH
74921: LD_INT 0
74923: PUSH
74924: LD_INT 0
74926: PUSH
74927: LD_INT 0
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: PUSH
74939: LD_STRING E
74941: PUSH
74942: LD_INT 0
74944: PUSH
74945: LD_INT 0
74947: PUSH
74948: LD_VAR 0 3
74952: PUSH
74953: LD_INT 0
74955: PUSH
74956: LD_INT 0
74958: PUSH
74959: LD_INT 0
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PPUSH
74975: CALL_OW 447
// end ;
74979: LD_VAR 0 2
74983: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74984: LD_INT 0
74986: PPUSH
74987: PPUSH
74988: PPUSH
// tmp := [ ] ;
74989: LD_ADDR_VAR 0 5
74993: PUSH
74994: EMPTY
74995: ST_TO_ADDR
// for i in units do
74996: LD_ADDR_VAR 0 4
75000: PUSH
75001: LD_VAR 0 1
75005: PUSH
75006: FOR_IN
75007: IFFALSE 75045
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75009: LD_ADDR_VAR 0 5
75013: PUSH
75014: LD_VAR 0 5
75018: PPUSH
75019: LD_VAR 0 5
75023: PUSH
75024: LD_INT 1
75026: PLUS
75027: PPUSH
75028: LD_VAR 0 4
75032: PPUSH
75033: CALL_OW 256
75037: PPUSH
75038: CALL_OW 2
75042: ST_TO_ADDR
75043: GO 75006
75045: POP
75046: POP
// if not tmp then
75047: LD_VAR 0 5
75051: NOT
75052: IFFALSE 75056
// exit ;
75054: GO 75104
// if asc then
75056: LD_VAR 0 2
75060: IFFALSE 75084
// result := SortListByListAsc ( units , tmp ) else
75062: LD_ADDR_VAR 0 3
75066: PUSH
75067: LD_VAR 0 1
75071: PPUSH
75072: LD_VAR 0 5
75076: PPUSH
75077: CALL_OW 76
75081: ST_TO_ADDR
75082: GO 75104
// result := SortListByListDesc ( units , tmp ) ;
75084: LD_ADDR_VAR 0 3
75088: PUSH
75089: LD_VAR 0 1
75093: PPUSH
75094: LD_VAR 0 5
75098: PPUSH
75099: CALL_OW 77
75103: ST_TO_ADDR
// end ;
75104: LD_VAR 0 3
75108: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75109: LD_INT 0
75111: PPUSH
75112: PPUSH
// task := GetTaskList ( mech ) ;
75113: LD_ADDR_VAR 0 4
75117: PUSH
75118: LD_VAR 0 1
75122: PPUSH
75123: CALL_OW 437
75127: ST_TO_ADDR
// if not task then
75128: LD_VAR 0 4
75132: NOT
75133: IFFALSE 75137
// exit ;
75135: GO 75179
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75137: LD_ADDR_VAR 0 3
75141: PUSH
75142: LD_VAR 0 4
75146: PUSH
75147: LD_INT 1
75149: ARRAY
75150: PUSH
75151: LD_INT 1
75153: ARRAY
75154: PUSH
75155: LD_STRING r
75157: EQUAL
75158: PUSH
75159: LD_VAR 0 4
75163: PUSH
75164: LD_INT 1
75166: ARRAY
75167: PUSH
75168: LD_INT 4
75170: ARRAY
75171: PUSH
75172: LD_VAR 0 2
75176: EQUAL
75177: AND
75178: ST_TO_ADDR
// end ;
75179: LD_VAR 0 3
75183: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75184: LD_INT 0
75186: PPUSH
// SetDir ( unit , d ) ;
75187: LD_VAR 0 1
75191: PPUSH
75192: LD_VAR 0 4
75196: PPUSH
75197: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75201: LD_VAR 0 1
75205: PPUSH
75206: LD_VAR 0 2
75210: PPUSH
75211: LD_VAR 0 3
75215: PPUSH
75216: LD_VAR 0 5
75220: PPUSH
75221: CALL_OW 48
// end ;
75225: LD_VAR 0 6
75229: RET
// export function ToNaturalNumber ( number ) ; begin
75230: LD_INT 0
75232: PPUSH
// result := number div 1 ;
75233: LD_ADDR_VAR 0 2
75237: PUSH
75238: LD_VAR 0 1
75242: PUSH
75243: LD_INT 1
75245: DIV
75246: ST_TO_ADDR
// if number < 0 then
75247: LD_VAR 0 1
75251: PUSH
75252: LD_INT 0
75254: LESS
75255: IFFALSE 75265
// result := 0 ;
75257: LD_ADDR_VAR 0 2
75261: PUSH
75262: LD_INT 0
75264: ST_TO_ADDR
// end ;
75265: LD_VAR 0 2
75269: RET
// export function SortByClass ( units , class ) ; var un ; begin
75270: LD_INT 0
75272: PPUSH
75273: PPUSH
// if not units or not class then
75274: LD_VAR 0 1
75278: NOT
75279: PUSH
75280: LD_VAR 0 2
75284: NOT
75285: OR
75286: IFFALSE 75290
// exit ;
75288: GO 75385
// result := [ ] ;
75290: LD_ADDR_VAR 0 3
75294: PUSH
75295: EMPTY
75296: ST_TO_ADDR
// for un in units do
75297: LD_ADDR_VAR 0 4
75301: PUSH
75302: LD_VAR 0 1
75306: PUSH
75307: FOR_IN
75308: IFFALSE 75383
// if GetClass ( un ) = class then
75310: LD_VAR 0 4
75314: PPUSH
75315: CALL_OW 257
75319: PUSH
75320: LD_VAR 0 2
75324: EQUAL
75325: IFFALSE 75352
// result := Insert ( result , 1 , un ) else
75327: LD_ADDR_VAR 0 3
75331: PUSH
75332: LD_VAR 0 3
75336: PPUSH
75337: LD_INT 1
75339: PPUSH
75340: LD_VAR 0 4
75344: PPUSH
75345: CALL_OW 2
75349: ST_TO_ADDR
75350: GO 75381
// result := Replace ( result , result + 1 , un ) ;
75352: LD_ADDR_VAR 0 3
75356: PUSH
75357: LD_VAR 0 3
75361: PPUSH
75362: LD_VAR 0 3
75366: PUSH
75367: LD_INT 1
75369: PLUS
75370: PPUSH
75371: LD_VAR 0 4
75375: PPUSH
75376: CALL_OW 1
75380: ST_TO_ADDR
75381: GO 75307
75383: POP
75384: POP
// end ;
75385: LD_VAR 0 3
75389: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75390: LD_INT 0
75392: PPUSH
75393: PPUSH
75394: PPUSH
75395: PPUSH
75396: PPUSH
75397: PPUSH
75398: PPUSH
// result := [ ] ;
75399: LD_ADDR_VAR 0 4
75403: PUSH
75404: EMPTY
75405: ST_TO_ADDR
// if x - r < 0 then
75406: LD_VAR 0 1
75410: PUSH
75411: LD_VAR 0 3
75415: MINUS
75416: PUSH
75417: LD_INT 0
75419: LESS
75420: IFFALSE 75432
// min_x := 0 else
75422: LD_ADDR_VAR 0 8
75426: PUSH
75427: LD_INT 0
75429: ST_TO_ADDR
75430: GO 75448
// min_x := x - r ;
75432: LD_ADDR_VAR 0 8
75436: PUSH
75437: LD_VAR 0 1
75441: PUSH
75442: LD_VAR 0 3
75446: MINUS
75447: ST_TO_ADDR
// if y - r < 0 then
75448: LD_VAR 0 2
75452: PUSH
75453: LD_VAR 0 3
75457: MINUS
75458: PUSH
75459: LD_INT 0
75461: LESS
75462: IFFALSE 75474
// min_y := 0 else
75464: LD_ADDR_VAR 0 7
75468: PUSH
75469: LD_INT 0
75471: ST_TO_ADDR
75472: GO 75490
// min_y := y - r ;
75474: LD_ADDR_VAR 0 7
75478: PUSH
75479: LD_VAR 0 2
75483: PUSH
75484: LD_VAR 0 3
75488: MINUS
75489: ST_TO_ADDR
// max_x := x + r ;
75490: LD_ADDR_VAR 0 9
75494: PUSH
75495: LD_VAR 0 1
75499: PUSH
75500: LD_VAR 0 3
75504: PLUS
75505: ST_TO_ADDR
// max_y := y + r ;
75506: LD_ADDR_VAR 0 10
75510: PUSH
75511: LD_VAR 0 2
75515: PUSH
75516: LD_VAR 0 3
75520: PLUS
75521: ST_TO_ADDR
// for _x = min_x to max_x do
75522: LD_ADDR_VAR 0 5
75526: PUSH
75527: DOUBLE
75528: LD_VAR 0 8
75532: DEC
75533: ST_TO_ADDR
75534: LD_VAR 0 9
75538: PUSH
75539: FOR_TO
75540: IFFALSE 75641
// for _y = min_y to max_y do
75542: LD_ADDR_VAR 0 6
75546: PUSH
75547: DOUBLE
75548: LD_VAR 0 7
75552: DEC
75553: ST_TO_ADDR
75554: LD_VAR 0 10
75558: PUSH
75559: FOR_TO
75560: IFFALSE 75637
// begin if not ValidHex ( _x , _y ) then
75562: LD_VAR 0 5
75566: PPUSH
75567: LD_VAR 0 6
75571: PPUSH
75572: CALL_OW 488
75576: NOT
75577: IFFALSE 75581
// continue ;
75579: GO 75559
// if GetResourceTypeXY ( _x , _y ) then
75581: LD_VAR 0 5
75585: PPUSH
75586: LD_VAR 0 6
75590: PPUSH
75591: CALL_OW 283
75595: IFFALSE 75635
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75597: LD_ADDR_VAR 0 4
75601: PUSH
75602: LD_VAR 0 4
75606: PPUSH
75607: LD_VAR 0 4
75611: PUSH
75612: LD_INT 1
75614: PLUS
75615: PPUSH
75616: LD_VAR 0 5
75620: PUSH
75621: LD_VAR 0 6
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: PPUSH
75630: CALL_OW 1
75634: ST_TO_ADDR
// end ;
75635: GO 75559
75637: POP
75638: POP
75639: GO 75539
75641: POP
75642: POP
// end ;
75643: LD_VAR 0 4
75647: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75648: LD_INT 0
75650: PPUSH
75651: PPUSH
75652: PPUSH
75653: PPUSH
75654: PPUSH
75655: PPUSH
75656: PPUSH
75657: PPUSH
// if not units then
75658: LD_VAR 0 1
75662: NOT
75663: IFFALSE 75667
// exit ;
75665: GO 76178
// result := UnitFilter ( units , [ f_ok ] ) ;
75667: LD_ADDR_VAR 0 3
75671: PUSH
75672: LD_VAR 0 1
75676: PPUSH
75677: LD_INT 50
75679: PUSH
75680: EMPTY
75681: LIST
75682: PPUSH
75683: CALL_OW 72
75687: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75688: LD_ADDR_VAR 0 8
75692: PUSH
75693: LD_VAR 0 1
75697: PUSH
75698: LD_INT 1
75700: ARRAY
75701: PPUSH
75702: CALL_OW 255
75706: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75707: LD_ADDR_VAR 0 10
75711: PUSH
75712: LD_INT 29
75714: PUSH
75715: LD_EXP 36
75719: PUSH
75720: LD_INT 49
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: LIST
75727: ST_TO_ADDR
// if not result then
75728: LD_VAR 0 3
75732: NOT
75733: IFFALSE 75737
// exit ;
75735: GO 76178
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75737: LD_ADDR_VAR 0 5
75741: PUSH
75742: LD_INT 81
75744: PUSH
75745: LD_VAR 0 8
75749: PUSH
75750: EMPTY
75751: LIST
75752: LIST
75753: PPUSH
75754: CALL_OW 69
75758: ST_TO_ADDR
// for i in result do
75759: LD_ADDR_VAR 0 4
75763: PUSH
75764: LD_VAR 0 3
75768: PUSH
75769: FOR_IN
75770: IFFALSE 76176
// begin tag := GetTag ( i ) + 1 ;
75772: LD_ADDR_VAR 0 9
75776: PUSH
75777: LD_VAR 0 4
75781: PPUSH
75782: CALL_OW 110
75786: PUSH
75787: LD_INT 1
75789: PLUS
75790: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75791: LD_ADDR_VAR 0 7
75795: PUSH
75796: LD_VAR 0 4
75800: PPUSH
75801: CALL_OW 250
75805: PPUSH
75806: LD_VAR 0 4
75810: PPUSH
75811: CALL_OW 251
75815: PPUSH
75816: LD_INT 6
75818: PPUSH
75819: CALL 75390 0 3
75823: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75824: LD_VAR 0 7
75828: PUSH
75829: LD_VAR 0 4
75833: PPUSH
75834: CALL_OW 264
75838: PUSH
75839: LD_VAR 0 10
75843: IN
75844: NOT
75845: AND
75846: IFFALSE 75885
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75848: LD_VAR 0 4
75852: PPUSH
75853: LD_VAR 0 7
75857: PUSH
75858: LD_INT 1
75860: ARRAY
75861: PUSH
75862: LD_INT 1
75864: ARRAY
75865: PPUSH
75866: LD_VAR 0 7
75870: PUSH
75871: LD_INT 1
75873: ARRAY
75874: PUSH
75875: LD_INT 2
75877: ARRAY
75878: PPUSH
75879: CALL_OW 116
75883: GO 76174
// if path > tag then
75885: LD_VAR 0 2
75889: PUSH
75890: LD_VAR 0 9
75894: GREATER
75895: IFFALSE 76103
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
75897: LD_ADDR_VAR 0 6
75901: PUSH
75902: LD_VAR 0 5
75906: PPUSH
75907: LD_INT 91
75909: PUSH
75910: LD_VAR 0 4
75914: PUSH
75915: LD_INT 12
75917: PUSH
75918: EMPTY
75919: LIST
75920: LIST
75921: LIST
75922: PPUSH
75923: CALL_OW 72
75927: ST_TO_ADDR
// if nearEnemy then
75928: LD_VAR 0 6
75932: IFFALSE 76001
// begin if GetWeapon ( i ) = ru_time_lapser then
75934: LD_VAR 0 4
75938: PPUSH
75939: CALL_OW 264
75943: PUSH
75944: LD_INT 49
75946: EQUAL
75947: IFFALSE 75975
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75949: LD_VAR 0 4
75953: PPUSH
75954: LD_VAR 0 6
75958: PPUSH
75959: LD_VAR 0 4
75963: PPUSH
75964: CALL_OW 74
75968: PPUSH
75969: CALL_OW 112
75973: GO 75999
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75975: LD_VAR 0 4
75979: PPUSH
75980: LD_VAR 0 6
75984: PPUSH
75985: LD_VAR 0 4
75989: PPUSH
75990: CALL_OW 74
75994: PPUSH
75995: CALL_OW 115
// end else
75999: GO 76101
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76001: LD_VAR 0 4
76005: PPUSH
76006: LD_VAR 0 2
76010: PUSH
76011: LD_VAR 0 9
76015: ARRAY
76016: PUSH
76017: LD_INT 1
76019: ARRAY
76020: PPUSH
76021: LD_VAR 0 2
76025: PUSH
76026: LD_VAR 0 9
76030: ARRAY
76031: PUSH
76032: LD_INT 2
76034: ARRAY
76035: PPUSH
76036: CALL_OW 297
76040: PUSH
76041: LD_INT 6
76043: GREATER
76044: IFFALSE 76087
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76046: LD_VAR 0 4
76050: PPUSH
76051: LD_VAR 0 2
76055: PUSH
76056: LD_VAR 0 9
76060: ARRAY
76061: PUSH
76062: LD_INT 1
76064: ARRAY
76065: PPUSH
76066: LD_VAR 0 2
76070: PUSH
76071: LD_VAR 0 9
76075: ARRAY
76076: PUSH
76077: LD_INT 2
76079: ARRAY
76080: PPUSH
76081: CALL_OW 114
76085: GO 76101
// SetTag ( i , tag ) ;
76087: LD_VAR 0 4
76091: PPUSH
76092: LD_VAR 0 9
76096: PPUSH
76097: CALL_OW 109
// end else
76101: GO 76174
// if enemy then
76103: LD_VAR 0 5
76107: IFFALSE 76174
// begin if GetWeapon ( i ) = ru_time_lapser then
76109: LD_VAR 0 4
76113: PPUSH
76114: CALL_OW 264
76118: PUSH
76119: LD_INT 49
76121: EQUAL
76122: IFFALSE 76150
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76124: LD_VAR 0 4
76128: PPUSH
76129: LD_VAR 0 5
76133: PPUSH
76134: LD_VAR 0 4
76138: PPUSH
76139: CALL_OW 74
76143: PPUSH
76144: CALL_OW 112
76148: GO 76174
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76150: LD_VAR 0 4
76154: PPUSH
76155: LD_VAR 0 5
76159: PPUSH
76160: LD_VAR 0 4
76164: PPUSH
76165: CALL_OW 74
76169: PPUSH
76170: CALL_OW 115
// end ; end ;
76174: GO 75769
76176: POP
76177: POP
// end ;
76178: LD_VAR 0 3
76182: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76183: LD_INT 0
76185: PPUSH
76186: PPUSH
76187: PPUSH
// if not unit or IsInUnit ( unit ) then
76188: LD_VAR 0 1
76192: NOT
76193: PUSH
76194: LD_VAR 0 1
76198: PPUSH
76199: CALL_OW 310
76203: OR
76204: IFFALSE 76208
// exit ;
76206: GO 76299
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76208: LD_ADDR_VAR 0 4
76212: PUSH
76213: LD_VAR 0 1
76217: PPUSH
76218: CALL_OW 250
76222: PPUSH
76223: LD_VAR 0 2
76227: PPUSH
76228: LD_INT 1
76230: PPUSH
76231: CALL_OW 272
76235: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76236: LD_ADDR_VAR 0 5
76240: PUSH
76241: LD_VAR 0 1
76245: PPUSH
76246: CALL_OW 251
76250: PPUSH
76251: LD_VAR 0 2
76255: PPUSH
76256: LD_INT 1
76258: PPUSH
76259: CALL_OW 273
76263: ST_TO_ADDR
// if ValidHex ( x , y ) then
76264: LD_VAR 0 4
76268: PPUSH
76269: LD_VAR 0 5
76273: PPUSH
76274: CALL_OW 488
76278: IFFALSE 76299
// ComTurnXY ( unit , x , y ) ;
76280: LD_VAR 0 1
76284: PPUSH
76285: LD_VAR 0 4
76289: PPUSH
76290: LD_VAR 0 5
76294: PPUSH
76295: CALL_OW 118
// end ;
76299: LD_VAR 0 3
76303: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76304: LD_INT 0
76306: PPUSH
76307: PPUSH
// result := false ;
76308: LD_ADDR_VAR 0 3
76312: PUSH
76313: LD_INT 0
76315: ST_TO_ADDR
// if not units then
76316: LD_VAR 0 2
76320: NOT
76321: IFFALSE 76325
// exit ;
76323: GO 76370
// for i in units do
76325: LD_ADDR_VAR 0 4
76329: PUSH
76330: LD_VAR 0 2
76334: PUSH
76335: FOR_IN
76336: IFFALSE 76368
// if See ( side , i ) then
76338: LD_VAR 0 1
76342: PPUSH
76343: LD_VAR 0 4
76347: PPUSH
76348: CALL_OW 292
76352: IFFALSE 76366
// begin result := true ;
76354: LD_ADDR_VAR 0 3
76358: PUSH
76359: LD_INT 1
76361: ST_TO_ADDR
// exit ;
76362: POP
76363: POP
76364: GO 76370
// end ;
76366: GO 76335
76368: POP
76369: POP
// end ;
76370: LD_VAR 0 3
76374: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76375: LD_INT 0
76377: PPUSH
76378: PPUSH
76379: PPUSH
76380: PPUSH
// if not unit or not points then
76381: LD_VAR 0 1
76385: NOT
76386: PUSH
76387: LD_VAR 0 2
76391: NOT
76392: OR
76393: IFFALSE 76397
// exit ;
76395: GO 76487
// dist := 99999 ;
76397: LD_ADDR_VAR 0 5
76401: PUSH
76402: LD_INT 99999
76404: ST_TO_ADDR
// for i in points do
76405: LD_ADDR_VAR 0 4
76409: PUSH
76410: LD_VAR 0 2
76414: PUSH
76415: FOR_IN
76416: IFFALSE 76485
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76418: LD_ADDR_VAR 0 6
76422: PUSH
76423: LD_VAR 0 1
76427: PPUSH
76428: LD_VAR 0 4
76432: PUSH
76433: LD_INT 1
76435: ARRAY
76436: PPUSH
76437: LD_VAR 0 4
76441: PUSH
76442: LD_INT 2
76444: ARRAY
76445: PPUSH
76446: CALL_OW 297
76450: ST_TO_ADDR
// if tmpDist < dist then
76451: LD_VAR 0 6
76455: PUSH
76456: LD_VAR 0 5
76460: LESS
76461: IFFALSE 76483
// begin result := i ;
76463: LD_ADDR_VAR 0 3
76467: PUSH
76468: LD_VAR 0 4
76472: ST_TO_ADDR
// dist := tmpDist ;
76473: LD_ADDR_VAR 0 5
76477: PUSH
76478: LD_VAR 0 6
76482: ST_TO_ADDR
// end ; end ;
76483: GO 76415
76485: POP
76486: POP
// end ;
76487: LD_VAR 0 3
76491: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76492: LD_INT 0
76494: PPUSH
// uc_side := side ;
76495: LD_ADDR_OWVAR 20
76499: PUSH
76500: LD_VAR 0 1
76504: ST_TO_ADDR
// uc_nation := 3 ;
76505: LD_ADDR_OWVAR 21
76509: PUSH
76510: LD_INT 3
76512: ST_TO_ADDR
// vc_chassis := 25 ;
76513: LD_ADDR_OWVAR 37
76517: PUSH
76518: LD_INT 25
76520: ST_TO_ADDR
// vc_engine := engine_siberite ;
76521: LD_ADDR_OWVAR 39
76525: PUSH
76526: LD_INT 3
76528: ST_TO_ADDR
// vc_control := control_computer ;
76529: LD_ADDR_OWVAR 38
76533: PUSH
76534: LD_INT 3
76536: ST_TO_ADDR
// vc_weapon := 59 ;
76537: LD_ADDR_OWVAR 40
76541: PUSH
76542: LD_INT 59
76544: ST_TO_ADDR
// result := CreateVehicle ;
76545: LD_ADDR_VAR 0 5
76549: PUSH
76550: CALL_OW 45
76554: ST_TO_ADDR
// SetDir ( result , d ) ;
76555: LD_VAR 0 5
76559: PPUSH
76560: LD_VAR 0 4
76564: PPUSH
76565: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76569: LD_VAR 0 5
76573: PPUSH
76574: LD_VAR 0 2
76578: PPUSH
76579: LD_VAR 0 3
76583: PPUSH
76584: LD_INT 0
76586: PPUSH
76587: CALL_OW 48
// end ;
76591: LD_VAR 0 5
76595: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76596: LD_INT 0
76598: PPUSH
76599: PPUSH
76600: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76601: LD_ADDR_VAR 0 2
76605: PUSH
76606: LD_INT 0
76608: PUSH
76609: LD_INT 0
76611: PUSH
76612: LD_INT 0
76614: PUSH
76615: LD_INT 0
76617: PUSH
76618: EMPTY
76619: LIST
76620: LIST
76621: LIST
76622: LIST
76623: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76624: LD_VAR 0 1
76628: NOT
76629: PUSH
76630: LD_VAR 0 1
76634: PPUSH
76635: CALL_OW 264
76639: PUSH
76640: LD_INT 12
76642: PUSH
76643: LD_INT 51
76645: PUSH
76646: LD_INT 32
76648: PUSH
76649: LD_EXP 33
76653: PUSH
76654: EMPTY
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: IN
76660: NOT
76661: OR
76662: IFFALSE 76666
// exit ;
76664: GO 76764
// for i := 1 to 3 do
76666: LD_ADDR_VAR 0 3
76670: PUSH
76671: DOUBLE
76672: LD_INT 1
76674: DEC
76675: ST_TO_ADDR
76676: LD_INT 3
76678: PUSH
76679: FOR_TO
76680: IFFALSE 76762
// begin tmp := GetCargo ( cargo , i ) ;
76682: LD_ADDR_VAR 0 4
76686: PUSH
76687: LD_VAR 0 1
76691: PPUSH
76692: LD_VAR 0 3
76696: PPUSH
76697: CALL_OW 289
76701: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76702: LD_ADDR_VAR 0 2
76706: PUSH
76707: LD_VAR 0 2
76711: PPUSH
76712: LD_VAR 0 3
76716: PPUSH
76717: LD_VAR 0 4
76721: PPUSH
76722: CALL_OW 1
76726: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76727: LD_ADDR_VAR 0 2
76731: PUSH
76732: LD_VAR 0 2
76736: PPUSH
76737: LD_INT 4
76739: PPUSH
76740: LD_VAR 0 2
76744: PUSH
76745: LD_INT 4
76747: ARRAY
76748: PUSH
76749: LD_VAR 0 4
76753: PLUS
76754: PPUSH
76755: CALL_OW 1
76759: ST_TO_ADDR
// end ;
76760: GO 76679
76762: POP
76763: POP
// end ; end_of_file
76764: LD_VAR 0 2
76768: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76769: LD_VAR 0 1
76773: PUSH
76774: LD_INT 200
76776: DOUBLE
76777: GREATEREQUAL
76778: IFFALSE 76786
76780: LD_INT 299
76782: DOUBLE
76783: LESSEQUAL
76784: IFTRUE 76788
76786: GO 76820
76788: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76789: LD_VAR 0 1
76793: PPUSH
76794: LD_VAR 0 2
76798: PPUSH
76799: LD_VAR 0 3
76803: PPUSH
76804: LD_VAR 0 4
76808: PPUSH
76809: LD_VAR 0 5
76813: PPUSH
76814: CALL 32109 0 5
76818: GO 76897
76820: LD_INT 300
76822: DOUBLE
76823: GREATEREQUAL
76824: IFFALSE 76832
76826: LD_INT 399
76828: DOUBLE
76829: LESSEQUAL
76830: IFTRUE 76834
76832: GO 76896
76834: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76835: LD_VAR 0 1
76839: PPUSH
76840: LD_VAR 0 2
76844: PPUSH
76845: LD_VAR 0 3
76849: PPUSH
76850: LD_VAR 0 4
76854: PPUSH
76855: LD_VAR 0 5
76859: PPUSH
76860: LD_VAR 0 6
76864: PPUSH
76865: LD_VAR 0 7
76869: PPUSH
76870: LD_VAR 0 8
76874: PPUSH
76875: LD_VAR 0 9
76879: PPUSH
76880: LD_VAR 0 10
76884: PPUSH
76885: LD_VAR 0 11
76889: PPUSH
76890: CALL 29751 0 11
76894: GO 76897
76896: POP
// end ;
76897: PPOPN 11
76899: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76900: LD_VAR 0 1
76904: PPUSH
76905: LD_VAR 0 2
76909: PPUSH
76910: LD_VAR 0 3
76914: PPUSH
76915: LD_VAR 0 4
76919: PPUSH
76920: LD_VAR 0 5
76924: PPUSH
76925: CALL 31845 0 5
// end ; end_of_file
76929: PPOPN 5
76931: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76932: LD_VAR 0 1
76936: PPUSH
76937: LD_VAR 0 2
76941: PPUSH
76942: LD_VAR 0 3
76946: PPUSH
76947: LD_VAR 0 4
76951: PPUSH
76952: LD_VAR 0 5
76956: PPUSH
76957: LD_VAR 0 6
76961: PPUSH
76962: CALL 17444 0 6
// end ;
76966: PPOPN 6
76968: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76969: LD_INT 0
76971: PPUSH
// begin if not units then
76972: LD_VAR 0 1
76976: NOT
76977: IFFALSE 76981
// exit ;
76979: GO 77069
// if p1 = 1 then
76981: LD_VAR 0 2
76985: PUSH
76986: LD_INT 1
76988: EQUAL
76989: IFFALSE 77069
// begin if p2 = 1 then
76991: LD_VAR 0 3
76995: PUSH
76996: LD_INT 1
76998: EQUAL
76999: IFFALSE 77030
// begin for i in units do
77001: LD_ADDR_VAR 0 7
77005: PUSH
77006: LD_VAR 0 1
77010: PUSH
77011: FOR_IN
77012: IFFALSE 77028
// begin SetUnitAttackType ( i , 3 ) ;
77014: LD_VAR 0 7
77018: PPUSH
77019: LD_INT 3
77021: PPUSH
77022: CALL_OW 603
// end ;
77026: GO 77011
77028: POP
77029: POP
// end ; if p2 = 2 then
77030: LD_VAR 0 3
77034: PUSH
77035: LD_INT 2
77037: EQUAL
77038: IFFALSE 77069
// begin for i in units do
77040: LD_ADDR_VAR 0 7
77044: PUSH
77045: LD_VAR 0 1
77049: PUSH
77050: FOR_IN
77051: IFFALSE 77067
// begin SetUnitAttackType ( i , 1 ) ;
77053: LD_VAR 0 7
77057: PPUSH
77058: LD_INT 1
77060: PPUSH
77061: CALL_OW 603
// end ;
77065: GO 77050
77067: POP
77068: POP
// end ; end ; end ;
77069: PPOPN 7
77071: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77072: CALL 17419 0 0
// end ;
77076: PPOPN 1
77078: END
