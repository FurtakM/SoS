// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 217 0 0
// PrepareRussian ;
  23: CALL 8047 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 70032 0 9
// Action ;
  79: CALL 13085 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 9
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 5
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 6
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 7
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 8
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// end ;
 167: LD_VAR 0 1
 171: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 172: LD_INT 22
 174: PUSH
 175: LD_INT 1
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 34
 184: PUSH
 185: LD_INT 6
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PPUSH
 196: CALL_OW 69
 200: PUSH
 201: LD_INT 6
 203: GREATEREQUAL
 204: IFFALSE 216
 206: GO 208
 208: DISABLE
// SetAchievement ( ACH_ARMOR ) ; end_of_file
 209: LD_STRING ACH_ARMOR
 211: PPUSH
 212: CALL_OW 543
 216: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 217: LD_INT 0
 219: PPUSH
 220: PPUSH
 221: PPUSH
 222: PPUSH
 223: PPUSH
 224: PPUSH
 225: PPUSH
 226: PPUSH
 227: PPUSH
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// uc_side := 1 ;
 235: LD_ADDR_OWVAR 20
 239: PUSH
 240: LD_INT 1
 242: ST_TO_ADDR
// uc_nation := 1 ;
 243: LD_ADDR_OWVAR 21
 247: PUSH
 248: LD_INT 1
 250: ST_TO_ADDR
// PrepareGammaBase ;
 251: CALL 2457 0 0
// x := 52 ;
 255: LD_ADDR_VAR 0 13
 259: PUSH
 260: LD_INT 52
 262: ST_TO_ADDR
// y := 16 ;
 263: LD_ADDR_VAR 0 14
 267: PUSH
 268: LD_INT 16
 270: ST_TO_ADDR
// case gammaCommander of 1 :
 271: LD_EXP 9
 275: PUSH
 276: LD_INT 1
 278: DOUBLE
 279: EQUAL
 280: IFTRUE 284
 282: GO 369
 284: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 285: LD_ADDR_EXP 12
 289: PUSH
 290: LD_STRING Donaldson
 292: PPUSH
 293: LD_INT 1
 295: PPUSH
 296: LD_STRING 04_
 298: PPUSH
 299: CALL 36669 0 3
 303: ST_TO_ADDR
// if HexInfo ( x , y ) then
 304: LD_VAR 0 13
 308: PPUSH
 309: LD_VAR 0 14
 313: PPUSH
 314: CALL_OW 428
 318: IFFALSE 336
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 320: LD_EXP 12
 324: PPUSH
 325: LD_EXP 26
 329: PPUSH
 330: CALL_OW 52
 334: GO 358
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 336: LD_EXP 12
 340: PPUSH
 341: LD_VAR 0 13
 345: PPUSH
 346: LD_VAR 0 14
 350: PPUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 48
// ComHold ( Donaldson ) ;
 358: LD_EXP 12
 362: PPUSH
 363: CALL_OW 140
// end ; 2 :
 367: GO 556
 369: LD_INT 2
 371: DOUBLE
 372: EQUAL
 373: IFTRUE 377
 375: GO 462
 377: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 378: LD_ADDR_EXP 11
 382: PUSH
 383: LD_STRING Brown
 385: PPUSH
 386: LD_INT 1
 388: PPUSH
 389: LD_STRING 04_
 391: PPUSH
 392: CALL 36669 0 3
 396: ST_TO_ADDR
// if HexInfo ( x , y ) then
 397: LD_VAR 0 13
 401: PPUSH
 402: LD_VAR 0 14
 406: PPUSH
 407: CALL_OW 428
 411: IFFALSE 429
// PlaceHumanInUnit ( Brown , amDepot ) else
 413: LD_EXP 11
 417: PPUSH
 418: LD_EXP 26
 422: PPUSH
 423: CALL_OW 52
 427: GO 451
// PlaceUnitXY ( Brown , x , y , false ) ;
 429: LD_EXP 11
 433: PPUSH
 434: LD_VAR 0 13
 438: PPUSH
 439: LD_VAR 0 14
 443: PPUSH
 444: LD_INT 0
 446: PPUSH
 447: CALL_OW 48
// ComHold ( Brown ) ;
 451: LD_EXP 11
 455: PPUSH
 456: CALL_OW 140
// end ; 3 :
 460: GO 556
 462: LD_INT 3
 464: DOUBLE
 465: EQUAL
 466: IFTRUE 470
 468: GO 555
 470: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 471: LD_ADDR_EXP 20
 475: PUSH
 476: LD_STRING VanHouten
 478: PPUSH
 479: LD_INT 0
 481: PPUSH
 482: LD_STRING 
 484: PPUSH
 485: CALL 36669 0 3
 489: ST_TO_ADDR
// if HexInfo ( x , y ) then
 490: LD_VAR 0 13
 494: PPUSH
 495: LD_VAR 0 14
 499: PPUSH
 500: CALL_OW 428
 504: IFFALSE 522
// PlaceHumanInUnit ( Houten , amDepot ) else
 506: LD_EXP 20
 510: PPUSH
 511: LD_EXP 26
 515: PPUSH
 516: CALL_OW 52
 520: GO 544
// PlaceUnitXY ( Houten , x , y , false ) ;
 522: LD_EXP 20
 526: PPUSH
 527: LD_VAR 0 13
 531: PPUSH
 532: LD_VAR 0 14
 536: PPUSH
 537: LD_INT 0
 539: PPUSH
 540: CALL_OW 48
// ComHold ( Houten ) ;
 544: LD_EXP 20
 548: PPUSH
 549: CALL_OW 140
// end ; end ;
 553: GO 556
 555: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 556: LD_ADDR_EXP 24
 560: PUSH
 561: LD_STRING Harisson
 563: PPUSH
 564: LD_INT 0
 566: PPUSH
 567: LD_STRING 
 569: PPUSH
 570: CALL 36669 0 3
 574: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 575: LD_ADDR_EXP 25
 579: PUSH
 580: LD_STRING Powell
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: LD_STRING 
 588: PPUSH
 589: CALL 36669 0 3
 593: ST_TO_ADDR
// tmp := [ ] ;
 594: LD_ADDR_VAR 0 4
 598: PUSH
 599: EMPTY
 600: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 601: LD_STRING 04_Lisa
 603: PUSH
 604: EMPTY
 605: LIST
 606: PPUSH
 607: CALL_OW 28
 611: PUSH
 612: LD_STRING LisaInDelta
 614: PPUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 30
 622: NOT
 623: AND
 624: PUSH
 625: LD_STRING 07_Lisa
 627: PUSH
 628: EMPTY
 629: LIST
 630: PPUSH
 631: CALL_OW 28
 635: NOT
 636: AND
 637: IFFALSE 680
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 639: LD_ADDR_EXP 15
 643: PUSH
 644: LD_STRING Lisa
 646: PPUSH
 647: LD_INT 1
 649: PPUSH
 650: LD_STRING 04_
 652: PPUSH
 653: CALL 36669 0 3
 657: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 658: LD_ADDR_VAR 0 5
 662: PUSH
 663: LD_VAR 0 5
 667: PPUSH
 668: LD_EXP 15
 672: PPUSH
 673: CALL 73350 0 2
 677: ST_TO_ADDR
// end else
 678: GO 739
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 680: LD_EXP 15
 684: NOT
 685: PUSH
 686: LD_STRING LisaIn07
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 30
 696: NOT
 697: AND
 698: IFFALSE 739
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 700: LD_ADDR_EXP 15
 704: PUSH
 705: LD_STRING Lisa
 707: PPUSH
 708: LD_INT 1
 710: PPUSH
 711: LD_STRING 07_
 713: PPUSH
 714: CALL 36669 0 3
 718: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 719: LD_ADDR_VAR 0 5
 723: PUSH
 724: LD_VAR 0 5
 728: PPUSH
 729: LD_EXP 15
 733: PPUSH
 734: CALL 73350 0 2
 738: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 739: LD_STRING 04_Bobby
 741: PUSH
 742: EMPTY
 743: LIST
 744: PPUSH
 745: CALL_OW 28
 749: PUSH
 750: LD_STRING BobbyInDelta
 752: PPUSH
 753: LD_INT 0
 755: PPUSH
 756: CALL_OW 30
 760: NOT
 761: AND
 762: PUSH
 763: LD_STRING 07_Bobby
 765: PUSH
 766: EMPTY
 767: LIST
 768: PPUSH
 769: CALL_OW 28
 773: NOT
 774: AND
 775: IFFALSE 818
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 777: LD_ADDR_EXP 13
 781: PUSH
 782: LD_STRING Bobby
 784: PPUSH
 785: LD_INT 1
 787: PPUSH
 788: LD_STRING 04_
 790: PPUSH
 791: CALL 36669 0 3
 795: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 796: LD_ADDR_VAR 0 5
 800: PUSH
 801: LD_VAR 0 5
 805: PPUSH
 806: LD_EXP 13
 810: PPUSH
 811: CALL 73350 0 2
 815: ST_TO_ADDR
// end else
 816: GO 877
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 818: LD_EXP 13
 822: NOT
 823: PUSH
 824: LD_STRING BobbyIn07
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: CALL_OW 30
 834: NOT
 835: AND
 836: IFFALSE 877
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 838: LD_ADDR_EXP 13
 842: PUSH
 843: LD_STRING Bobby
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: LD_STRING 07_
 851: PPUSH
 852: CALL 36669 0 3
 856: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 5
 866: PPUSH
 867: LD_EXP 13
 871: PPUSH
 872: CALL 73350 0 2
 876: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 877: LD_STRING 04_Cyrus
 879: PUSH
 880: EMPTY
 881: LIST
 882: PPUSH
 883: CALL_OW 28
 887: PUSH
 888: LD_STRING CyrusInDelta
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL_OW 30
 898: NOT
 899: AND
 900: PUSH
 901: LD_STRING 07_Cyrus
 903: PUSH
 904: EMPTY
 905: LIST
 906: PPUSH
 907: CALL_OW 28
 911: NOT
 912: AND
 913: IFFALSE 956
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
 915: LD_ADDR_EXP 14
 919: PUSH
 920: LD_STRING Cyrus
 922: PPUSH
 923: LD_INT 1
 925: PPUSH
 926: LD_STRING 04_
 928: PPUSH
 929: CALL 36669 0 3
 933: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 934: LD_ADDR_VAR 0 5
 938: PUSH
 939: LD_VAR 0 5
 943: PPUSH
 944: LD_EXP 14
 948: PPUSH
 949: CALL 73350 0 2
 953: ST_TO_ADDR
// end else
 954: GO 1015
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
 956: LD_EXP 14
 960: NOT
 961: PUSH
 962: LD_STRING CyrusIn07
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 30
 972: NOT
 973: AND
 974: IFFALSE 1015
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 976: LD_ADDR_EXP 14
 980: PUSH
 981: LD_STRING Cyrus
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_STRING 07_
 989: PPUSH
 990: CALL 36669 0 3
 994: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 995: LD_ADDR_VAR 0 5
 999: PUSH
1000: LD_VAR 0 5
1004: PPUSH
1005: LD_EXP 14
1009: PPUSH
1010: CALL 73350 0 2
1014: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1015: LD_STRING 04_Brown
1017: PUSH
1018: EMPTY
1019: LIST
1020: PPUSH
1021: CALL_OW 28
1025: PUSH
1026: LD_STRING BrownInDelta
1028: PPUSH
1029: LD_INT 0
1031: PPUSH
1032: CALL_OW 30
1036: NOT
1037: AND
1038: PUSH
1039: LD_STRING 07_Brown
1041: PUSH
1042: EMPTY
1043: LIST
1044: PPUSH
1045: CALL_OW 28
1049: NOT
1050: AND
1051: PUSH
1052: LD_EXP 9
1056: PUSH
1057: LD_INT 2
1059: NONEQUAL
1060: AND
1061: IFFALSE 1104
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1063: LD_ADDR_EXP 11
1067: PUSH
1068: LD_STRING Brown
1070: PPUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_STRING 04_
1076: PPUSH
1077: CALL 36669 0 3
1081: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1082: LD_ADDR_VAR 0 5
1086: PUSH
1087: LD_VAR 0 5
1091: PPUSH
1092: LD_EXP 11
1096: PPUSH
1097: CALL 73350 0 2
1101: ST_TO_ADDR
// end else
1102: GO 1173
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1104: LD_EXP 11
1108: NOT
1109: PUSH
1110: LD_STRING BrownIn07
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: CALL_OW 30
1120: NOT
1121: AND
1122: PUSH
1123: LD_EXP 9
1127: PUSH
1128: LD_INT 2
1130: NONEQUAL
1131: AND
1132: IFFALSE 1173
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1134: LD_ADDR_EXP 11
1138: PUSH
1139: LD_STRING Brown
1141: PPUSH
1142: LD_INT 1
1144: PPUSH
1145: LD_STRING 07_
1147: PPUSH
1148: CALL 36669 0 3
1152: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1153: LD_ADDR_VAR 0 5
1157: PUSH
1158: LD_VAR 0 5
1162: PPUSH
1163: LD_EXP 11
1167: PPUSH
1168: CALL 73350 0 2
1172: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1173: LD_STRING 04_Donaldson
1175: PUSH
1176: EMPTY
1177: LIST
1178: PPUSH
1179: CALL_OW 28
1183: PUSH
1184: LD_STRING DonaldsonInDelta
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL_OW 30
1194: NOT
1195: AND
1196: PUSH
1197: LD_STRING 07_Donaldson
1199: PUSH
1200: EMPTY
1201: LIST
1202: PPUSH
1203: CALL_OW 28
1207: NOT
1208: AND
1209: PUSH
1210: LD_EXP 9
1214: PUSH
1215: LD_INT 1
1217: NONEQUAL
1218: AND
1219: IFFALSE 1262
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1221: LD_ADDR_EXP 12
1225: PUSH
1226: LD_STRING Donaldson
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: LD_STRING 04_
1234: PPUSH
1235: CALL 36669 0 3
1239: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1240: LD_ADDR_VAR 0 5
1244: PUSH
1245: LD_VAR 0 5
1249: PPUSH
1250: LD_EXP 12
1254: PPUSH
1255: CALL 73350 0 2
1259: ST_TO_ADDR
// end else
1260: GO 1331
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1262: LD_EXP 12
1266: NOT
1267: PUSH
1268: LD_STRING DonaldsonIn07
1270: PPUSH
1271: LD_INT 0
1273: PPUSH
1274: CALL_OW 30
1278: NOT
1279: AND
1280: PUSH
1281: LD_EXP 9
1285: PUSH
1286: LD_INT 1
1288: NONEQUAL
1289: AND
1290: IFFALSE 1331
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1292: LD_ADDR_EXP 12
1296: PUSH
1297: LD_STRING Donaldson
1299: PPUSH
1300: LD_INT 1
1302: PPUSH
1303: LD_STRING 07_
1305: PPUSH
1306: CALL 36669 0 3
1310: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1311: LD_ADDR_VAR 0 5
1315: PUSH
1316: LD_VAR 0 5
1320: PPUSH
1321: LD_EXP 12
1325: PPUSH
1326: CALL 73350 0 2
1330: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1331: LD_STRING KhatamIn07
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 30
1341: NOT
1342: IFFALSE 1383
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1344: LD_ADDR_EXP 19
1348: PUSH
1349: LD_STRING Khatam
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: LD_STRING 07_
1357: PPUSH
1358: CALL 36669 0 3
1362: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1363: LD_ADDR_VAR 0 5
1367: PUSH
1368: LD_VAR 0 5
1372: PPUSH
1373: LD_EXP 19
1377: PPUSH
1378: CALL 73350 0 2
1382: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1383: LD_ADDR_VAR 0 6
1387: PUSH
1388: LD_STRING 07_othersGamma
1390: PPUSH
1391: CALL_OW 31
1395: ST_TO_ADDR
// tmp := 5 - others ;
1396: LD_ADDR_VAR 0 4
1400: PUSH
1401: LD_INT 5
1403: PUSH
1404: LD_VAR 0 6
1408: MINUS
1409: ST_TO_ADDR
// if tmp then
1410: LD_VAR 0 4
1414: IFFALSE 1471
// for i := tmp downto 1 do
1416: LD_ADDR_VAR 0 2
1420: PUSH
1421: DOUBLE
1422: LD_VAR 0 4
1426: INC
1427: ST_TO_ADDR
1428: LD_INT 1
1430: PUSH
1431: FOR_DOWNTO
1432: IFFALSE 1469
// begin PrepareHuman ( false , 1 , 5 ) ;
1434: LD_INT 0
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: LD_INT 5
1442: PPUSH
1443: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1447: LD_ADDR_VAR 0 6
1451: PUSH
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL_OW 44
1461: PPUSH
1462: CALL 73350 0 2
1466: ST_TO_ADDR
// end ;
1467: GO 1431
1469: POP
1470: POP
// for i in others do
1471: LD_ADDR_VAR 0 2
1475: PUSH
1476: LD_VAR 0 6
1480: PUSH
1481: FOR_IN
1482: IFFALSE 1498
// SetTag ( i , 106 ) ;
1484: LD_VAR 0 2
1488: PPUSH
1489: LD_INT 106
1491: PPUSH
1492: CALL_OW 109
1496: GO 1481
1498: POP
1499: POP
// if HexInfo ( 61 , 29 ) = 0 then
1500: LD_INT 61
1502: PPUSH
1503: LD_INT 29
1505: PPUSH
1506: CALL_OW 428
1510: PUSH
1511: LD_INT 0
1513: EQUAL
1514: IFFALSE 1545
// begin bc_type := b_barracks ;
1516: LD_ADDR_OWVAR 42
1520: PUSH
1521: LD_INT 5
1523: ST_TO_ADDR
// bc_level := 6 ;
1524: LD_ADDR_OWVAR 43
1528: PUSH
1529: LD_INT 6
1531: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1532: LD_INT 61
1534: PPUSH
1535: LD_INT 29
1537: PPUSH
1538: LD_INT 5
1540: PPUSH
1541: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1545: LD_ADDR_VAR 0 8
1549: PUSH
1550: LD_INT 22
1552: PUSH
1553: LD_INT 1
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PUSH
1560: LD_INT 30
1562: PUSH
1563: LD_INT 31
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PPUSH
1574: CALL_OW 69
1578: ST_TO_ADDR
// for i in bun do
1579: LD_ADDR_VAR 0 2
1583: PUSH
1584: LD_VAR 0 8
1588: PUSH
1589: FOR_IN
1590: IFFALSE 1722
// begin x := GetX ( i ) ;
1592: LD_ADDR_VAR 0 13
1596: PUSH
1597: LD_VAR 0 2
1601: PPUSH
1602: CALL_OW 250
1606: ST_TO_ADDR
// y := GetY ( i ) ;
1607: LD_ADDR_VAR 0 14
1611: PUSH
1612: LD_VAR 0 2
1616: PPUSH
1617: CALL_OW 251
1621: ST_TO_ADDR
// d := GetDir ( i ) ;
1622: LD_ADDR_VAR 0 15
1626: PUSH
1627: LD_VAR 0 2
1631: PPUSH
1632: CALL_OW 254
1636: ST_TO_ADDR
// RemoveUnit ( i ) ;
1637: LD_VAR 0 2
1641: PPUSH
1642: CALL_OW 64
// bc_type := b_bunker ;
1646: LD_ADDR_OWVAR 42
1650: PUSH
1651: LD_INT 32
1653: ST_TO_ADDR
// bc_level := 6 ;
1654: LD_ADDR_OWVAR 43
1658: PUSH
1659: LD_INT 6
1661: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1662: LD_ADDR_VAR 0 16
1666: PUSH
1667: LD_VAR 0 13
1671: PPUSH
1672: LD_VAR 0 14
1676: PPUSH
1677: LD_VAR 0 15
1681: PPUSH
1682: CALL_OW 47
1686: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1687: LD_VAR 0 16
1691: PPUSH
1692: LD_INT 5
1694: PUSH
1695: LD_INT 4
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: LD_VAR 0 2
1706: PUSH
1707: LD_INT 2
1709: MOD
1710: PUSH
1711: LD_INT 1
1713: PLUS
1714: ARRAY
1715: PPUSH
1716: CALL_OW 431
// end ;
1720: GO 1589
1722: POP
1723: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1724: LD_ADDR_VAR 0 7
1728: PUSH
1729: LD_INT 22
1731: PUSH
1732: LD_INT 1
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 30
1741: PUSH
1742: LD_INT 5
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PPUSH
1753: CALL_OW 69
1757: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1758: LD_ADDR_VAR 0 9
1762: PUSH
1763: LD_INT 22
1765: PUSH
1766: LD_INT 1
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 2
1775: PUSH
1776: LD_INT 30
1778: PUSH
1779: LD_INT 6
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 30
1788: PUSH
1789: LD_INT 7
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 30
1798: PUSH
1799: LD_INT 8
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: EMPTY
1813: LIST
1814: LIST
1815: PPUSH
1816: CALL_OW 69
1820: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1821: LD_ADDR_VAR 0 10
1825: PUSH
1826: LD_INT 22
1828: PUSH
1829: LD_INT 1
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 30
1838: PUSH
1839: LD_INT 3
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PPUSH
1850: CALL_OW 69
1854: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1855: LD_ADDR_VAR 0 11
1859: PUSH
1860: LD_INT 22
1862: PUSH
1863: LD_INT 1
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PUSH
1870: LD_INT 30
1872: PUSH
1873: LD_INT 36
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PPUSH
1884: CALL_OW 69
1888: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1889: LD_ADDR_VAR 0 8
1893: PUSH
1894: LD_INT 22
1896: PUSH
1897: LD_INT 1
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 2
1906: PUSH
1907: LD_INT 30
1909: PUSH
1910: LD_INT 31
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 30
1919: PUSH
1920: LD_INT 32
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PPUSH
1936: CALL_OW 69
1940: ST_TO_ADDR
// for i in others union tmp2 do
1941: LD_ADDR_VAR 0 2
1945: PUSH
1946: LD_VAR 0 6
1950: PUSH
1951: LD_VAR 0 5
1955: UNION
1956: PUSH
1957: FOR_IN
1958: IFFALSE 2450
// begin placed := false ;
1960: LD_ADDR_VAR 0 12
1964: PUSH
1965: LD_INT 0
1967: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1968: LD_VAR 0 2
1972: PPUSH
1973: CALL_OW 257
1977: PUSH
1978: LD_INT 1
1980: EQUAL
1981: IFFALSE 2106
// begin if UnitFilter ( bun , [ f_empty ] ) then
1983: LD_VAR 0 8
1987: PPUSH
1988: LD_INT 58
1990: PUSH
1991: EMPTY
1992: LIST
1993: PPUSH
1994: CALL_OW 72
1998: IFFALSE 2037
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2000: LD_VAR 0 2
2004: PPUSH
2005: LD_VAR 0 8
2009: PPUSH
2010: LD_INT 58
2012: PUSH
2013: EMPTY
2014: LIST
2015: PPUSH
2016: CALL_OW 72
2020: PUSH
2021: LD_INT 1
2023: ARRAY
2024: PPUSH
2025: CALL_OW 52
// placed := true ;
2029: LD_ADDR_VAR 0 12
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// end ; if arm and not placed then
2037: LD_VAR 0 7
2041: PUSH
2042: LD_VAR 0 12
2046: NOT
2047: AND
2048: IFFALSE 2106
// begin for j in arm do
2050: LD_ADDR_VAR 0 3
2054: PUSH
2055: LD_VAR 0 7
2059: PUSH
2060: FOR_IN
2061: IFFALSE 2104
// if UnitsInside ( j ) < 6 then
2063: LD_VAR 0 3
2067: PPUSH
2068: CALL_OW 313
2072: PUSH
2073: LD_INT 6
2075: LESS
2076: IFFALSE 2102
// begin PlaceHumanInUnit ( i , j ) ;
2078: LD_VAR 0 2
2082: PPUSH
2083: LD_VAR 0 3
2087: PPUSH
2088: CALL_OW 52
// placed := true ;
2092: LD_ADDR_VAR 0 12
2096: PUSH
2097: LD_INT 1
2099: ST_TO_ADDR
// break ;
2100: GO 2104
// end ;
2102: GO 2060
2104: POP
2105: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2106: LD_VAR 0 2
2110: PPUSH
2111: CALL_OW 257
2115: PUSH
2116: LD_INT 2
2118: EQUAL
2119: IFFALSE 2152
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2121: LD_VAR 0 2
2125: PPUSH
2126: LD_INT 52
2128: PPUSH
2129: LD_INT 20
2131: PPUSH
2132: LD_INT 6
2134: PPUSH
2135: LD_INT 0
2137: PPUSH
2138: CALL_OW 50
// placed := true ;
2142: LD_ADDR_VAR 0 12
2146: PUSH
2147: LD_INT 1
2149: ST_TO_ADDR
// continue ;
2150: GO 1957
// end ; if GetClass ( i ) = class_mechanic then
2152: LD_VAR 0 2
2156: PPUSH
2157: CALL_OW 257
2161: PUSH
2162: LD_INT 3
2164: EQUAL
2165: IFFALSE 2269
// begin if fac then
2167: LD_VAR 0 10
2171: IFFALSE 2269
// begin if ct then
2173: LD_VAR 0 11
2177: IFFALSE 2205
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2179: LD_VAR 0 2
2183: PPUSH
2184: LD_VAR 0 11
2188: PUSH
2189: LD_INT 1
2191: ARRAY
2192: PPUSH
2193: CALL_OW 52
// placed := true ;
2197: LD_ADDR_VAR 0 12
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// end ; if placed then
2205: LD_VAR 0 12
2209: IFFALSE 2213
// continue ;
2211: GO 1957
// for j in fac do
2213: LD_ADDR_VAR 0 3
2217: PUSH
2218: LD_VAR 0 10
2222: PUSH
2223: FOR_IN
2224: IFFALSE 2267
// if UnitsInside ( j ) < 6 then
2226: LD_VAR 0 3
2230: PPUSH
2231: CALL_OW 313
2235: PUSH
2236: LD_INT 6
2238: LESS
2239: IFFALSE 2265
// begin PlaceHumanInUnit ( i , j ) ;
2241: LD_VAR 0 2
2245: PPUSH
2246: LD_VAR 0 3
2250: PPUSH
2251: CALL_OW 52
// placed := true ;
2255: LD_ADDR_VAR 0 12
2259: PUSH
2260: LD_INT 1
2262: ST_TO_ADDR
// break ;
2263: GO 2267
// end ;
2265: GO 2223
2267: POP
2268: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2269: LD_VAR 0 2
2273: PPUSH
2274: CALL_OW 257
2278: PUSH
2279: LD_INT 4
2281: EQUAL
2282: IFFALSE 2377
// begin if lab then
2284: LD_VAR 0 9
2288: IFFALSE 2346
// begin for j in lab do
2290: LD_ADDR_VAR 0 3
2294: PUSH
2295: LD_VAR 0 9
2299: PUSH
2300: FOR_IN
2301: IFFALSE 2344
// if UnitsInside ( j ) < 6 then
2303: LD_VAR 0 3
2307: PPUSH
2308: CALL_OW 313
2312: PUSH
2313: LD_INT 6
2315: LESS
2316: IFFALSE 2342
// begin PlaceHumanInUnit ( i , j ) ;
2318: LD_VAR 0 2
2322: PPUSH
2323: LD_VAR 0 3
2327: PPUSH
2328: CALL_OW 52
// placed := true ;
2332: LD_ADDR_VAR 0 12
2336: PUSH
2337: LD_INT 1
2339: ST_TO_ADDR
// break ;
2340: GO 2344
// end ;
2342: GO 2300
2344: POP
2345: POP
// end ; if not placed then
2346: LD_VAR 0 12
2350: NOT
2351: IFFALSE 2377
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2353: LD_VAR 0 2
2357: PPUSH
2358: LD_INT 3
2360: PPUSH
2361: LD_INT 0
2363: PPUSH
2364: CALL_OW 49
// ComHold ( i ) ;
2368: LD_VAR 0 2
2372: PPUSH
2373: CALL_OW 140
// end ; end ; if ct then
2377: LD_VAR 0 11
2381: IFFALSE 2448
// if UnitsInside ( ct [ 1 ] ) then
2383: LD_VAR 0 11
2387: PUSH
2388: LD_INT 1
2390: ARRAY
2391: PPUSH
2392: CALL_OW 313
2396: IFFALSE 2448
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2398: LD_ADDR_VAR 0 2
2402: PUSH
2403: LD_INT 22
2405: PUSH
2406: LD_INT 1
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: PUSH
2413: LD_INT 33
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PPUSH
2427: CALL_OW 69
2431: PUSH
2432: FOR_IN
2433: IFFALSE 2446
// Connect ( i ) ;
2435: LD_VAR 0 2
2439: PPUSH
2440: CALL 44626 0 1
2444: GO 2432
2446: POP
2447: POP
// end ; end ;
2448: GO 1957
2450: POP
2451: POP
// end ;
2452: LD_VAR 0 1
2456: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2457: LD_INT 0
2459: PPUSH
2460: PPUSH
2461: PPUSH
2462: PPUSH
2463: PPUSH
2464: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2465: LD_INT 71
2467: PPUSH
2468: LD_INT 5
2470: PPUSH
2471: LD_INT 1
2473: PPUSH
2474: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2478: LD_ADDR_VAR 0 2
2482: PUSH
2483: LD_STRING GammaBase
2485: PPUSH
2486: EMPTY
2487: PPUSH
2488: CALL_OW 30
2492: ST_TO_ADDR
// if not blist then
2493: LD_VAR 0 2
2497: NOT
2498: IFFALSE 2538
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: LD_INT 1
2507: PUSH
2508: LD_INT 52
2510: PUSH
2511: LD_INT 12
2513: PUSH
2514: LD_INT 3
2516: PUSH
2517: LD_INT 3
2519: PUSH
2520: LD_INT 0
2522: PUSH
2523: LD_INT 0
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: ST_TO_ADDR
// uc_side := 1 ;
2538: LD_ADDR_OWVAR 20
2542: PUSH
2543: LD_INT 1
2545: ST_TO_ADDR
// uc_nation := 1 ;
2546: LD_ADDR_OWVAR 21
2550: PUSH
2551: LD_INT 1
2553: ST_TO_ADDR
// bc_kind1 := - 1 ;
2554: LD_ADDR_OWVAR 44
2558: PUSH
2559: LD_INT 1
2561: NEG
2562: ST_TO_ADDR
// bc_kind2 := - 1 ;
2563: LD_ADDR_OWVAR 45
2567: PUSH
2568: LD_INT 1
2570: NEG
2571: ST_TO_ADDR
// for i in blist do
2572: LD_ADDR_VAR 0 3
2576: PUSH
2577: LD_VAR 0 2
2581: PUSH
2582: FOR_IN
2583: IFFALSE 2859
// begin bc_type := i [ 1 ] ;
2585: LD_ADDR_OWVAR 42
2589: PUSH
2590: LD_VAR 0 3
2594: PUSH
2595: LD_INT 1
2597: ARRAY
2598: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2599: LD_ADDR_OWVAR 43
2603: PUSH
2604: LD_VAR 0 3
2608: PUSH
2609: LD_INT 5
2611: ARRAY
2612: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2613: LD_OWVAR 42
2617: PUSH
2618: LD_INT 6
2620: PUSH
2621: LD_INT 7
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: IN
2628: IFFALSE 2694
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2630: LD_STRING 06_remoteVehs_1
2632: PPUSH
2633: LD_INT 0
2635: PPUSH
2636: CALL_OW 30
2640: NOT
2641: IFFALSE 2669
// begin bc_type := b_lab_full ;
2643: LD_ADDR_OWVAR 42
2647: PUSH
2648: LD_INT 8
2650: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2651: LD_ADDR_OWVAR 44
2655: PUSH
2656: LD_INT 10
2658: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2659: LD_ADDR_OWVAR 45
2663: PUSH
2664: LD_INT 15
2666: ST_TO_ADDR
// end else
2667: GO 2694
// begin bc_type := b_lab_half ;
2669: LD_ADDR_OWVAR 42
2673: PUSH
2674: LD_INT 7
2676: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2677: LD_ADDR_OWVAR 44
2681: PUSH
2682: LD_INT 10
2684: ST_TO_ADDR
// bc_kind2 := - 1 ;
2685: LD_ADDR_OWVAR 45
2689: PUSH
2690: LD_INT 1
2692: NEG
2693: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2694: LD_OWVAR 42
2698: PUSH
2699: LD_INT 2
2701: EQUAL
2702: IFFALSE 2712
// bc_type := b_factory ;
2704: LD_ADDR_OWVAR 42
2708: PUSH
2709: LD_INT 3
2711: ST_TO_ADDR
// if bc_type = b_depot then
2712: LD_OWVAR 42
2716: PUSH
2717: LD_INT 0
2719: EQUAL
2720: IFFALSE 2769
// begin bc_type := b_warehouse ;
2722: LD_ADDR_OWVAR 42
2726: PUSH
2727: LD_INT 1
2729: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2730: LD_ADDR_EXP 26
2734: PUSH
2735: LD_VAR 0 3
2739: PUSH
2740: LD_INT 2
2742: ARRAY
2743: PPUSH
2744: LD_VAR 0 3
2748: PUSH
2749: LD_INT 3
2751: ARRAY
2752: PPUSH
2753: LD_VAR 0 3
2757: PUSH
2758: LD_INT 4
2760: ARRAY
2761: PPUSH
2762: CALL_OW 47
2766: ST_TO_ADDR
// continue ;
2767: GO 2582
// end ; if bc_type = b_armoury then
2769: LD_OWVAR 42
2773: PUSH
2774: LD_INT 4
2776: EQUAL
2777: IFFALSE 2787
// bc_type = b_barracks ;
2779: LD_ADDR_OWVAR 42
2783: PUSH
2784: LD_INT 5
2786: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2787: LD_ADDR_VAR 0 4
2791: PUSH
2792: LD_VAR 0 3
2796: PUSH
2797: LD_INT 2
2799: ARRAY
2800: PPUSH
2801: LD_VAR 0 3
2805: PUSH
2806: LD_INT 3
2808: ARRAY
2809: PPUSH
2810: LD_VAR 0 3
2814: PUSH
2815: LD_INT 4
2817: ARRAY
2818: PPUSH
2819: CALL_OW 47
2823: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2824: LD_VAR 0 4
2828: PPUSH
2829: CALL_OW 266
2833: PUSH
2834: LD_INT 32
2836: EQUAL
2837: IFFALSE 2857
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2839: LD_VAR 0 4
2843: PPUSH
2844: LD_VAR 0 3
2848: PUSH
2849: LD_INT 7
2851: ARRAY
2852: PPUSH
2853: CALL_OW 431
// end ;
2857: GO 2582
2859: POP
2860: POP
// if not amDepot then
2861: LD_EXP 26
2865: NOT
2866: IFFALSE 2903
// begin bc_type := b_warehouse ;
2868: LD_ADDR_OWVAR 42
2872: PUSH
2873: LD_INT 1
2875: ST_TO_ADDR
// bc_level := 6 ;
2876: LD_ADDR_OWVAR 43
2880: PUSH
2881: LD_INT 6
2883: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2884: LD_ADDR_EXP 26
2888: PUSH
2889: LD_INT 52
2891: PPUSH
2892: LD_INT 12
2894: PPUSH
2895: LD_INT 3
2897: PPUSH
2898: CALL_OW 47
2902: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
2903: LD_EXP 26
2907: PPUSH
2908: LD_STRING gamma
2910: PPUSH
2911: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2915: LD_EXP 26
2919: PPUSH
2920: CALL_OW 274
2924: PPUSH
2925: LD_INT 1
2927: PPUSH
2928: LD_INT 400
2930: PUSH
2931: LD_INT 320
2933: PUSH
2934: LD_INT 270
2936: PUSH
2937: LD_INT 230
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: PUSH
2946: LD_OWVAR 67
2950: ARRAY
2951: PPUSH
2952: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2956: LD_EXP 26
2960: PPUSH
2961: CALL_OW 274
2965: PPUSH
2966: LD_INT 2
2968: PPUSH
2969: LD_INT 130
2971: PPUSH
2972: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2976: LD_INT 22
2978: PUSH
2979: LD_INT 1
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: LD_INT 30
2988: PUSH
2989: LD_INT 3
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PPUSH
3000: CALL_OW 69
3004: IFFALSE 3252
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3006: LD_ADDR_VAR 0 4
3010: PUSH
3011: LD_INT 22
3013: PUSH
3014: LD_INT 1
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 30
3023: PUSH
3024: LD_INT 3
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PPUSH
3035: CALL_OW 69
3039: PUSH
3040: LD_INT 1
3042: ARRAY
3043: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3044: LD_ADDR_VAR 0 6
3048: PUSH
3049: LD_VAR 0 4
3053: PPUSH
3054: CALL_OW 250
3058: PPUSH
3059: LD_VAR 0 4
3063: PPUSH
3064: CALL_OW 251
3068: PPUSH
3069: LD_VAR 0 4
3073: PPUSH
3074: CALL_OW 254
3078: PPUSH
3079: CALL 70989 0 3
3083: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: LD_INT 19
3091: PUSH
3092: LD_INT 17
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3099: LD_STRING 06_remoteVehs_1
3101: PPUSH
3102: LD_INT 0
3104: PPUSH
3105: CALL_OW 30
3109: IFFALSE 3132
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3111: LD_ADDR_VAR 0 2
3115: PUSH
3116: LD_VAR 0 2
3120: PPUSH
3121: LD_INT 1
3123: PPUSH
3124: LD_INT 22
3126: PPUSH
3127: CALL_OW 2
3131: ST_TO_ADDR
// for i in tmp do
3132: LD_ADDR_VAR 0 3
3136: PUSH
3137: LD_VAR 0 6
3141: PUSH
3142: FOR_IN
3143: IFFALSE 3250
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3145: LD_VAR 0 3
3149: PUSH
3150: LD_INT 1
3152: ARRAY
3153: PPUSH
3154: LD_VAR 0 3
3158: PUSH
3159: LD_INT 2
3161: ARRAY
3162: PPUSH
3163: CALL_OW 428
3167: PUSH
3168: LD_INT 0
3170: EQUAL
3171: IFFALSE 3248
// begin bc_type := blist [ 1 ] ;
3173: LD_ADDR_OWVAR 42
3177: PUSH
3178: LD_VAR 0 2
3182: PUSH
3183: LD_INT 1
3185: ARRAY
3186: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3187: LD_VAR 0 3
3191: PUSH
3192: LD_INT 1
3194: ARRAY
3195: PPUSH
3196: LD_VAR 0 3
3200: PUSH
3201: LD_INT 2
3203: ARRAY
3204: PPUSH
3205: LD_VAR 0 3
3209: PUSH
3210: LD_INT 3
3212: ARRAY
3213: PPUSH
3214: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3218: LD_ADDR_VAR 0 2
3222: PUSH
3223: LD_VAR 0 2
3227: PPUSH
3228: LD_INT 1
3230: PPUSH
3231: CALL_OW 3
3235: ST_TO_ADDR
// if blist = 0 then
3236: LD_VAR 0 2
3240: PUSH
3241: LD_INT 0
3243: EQUAL
3244: IFFALSE 3248
// break ;
3246: GO 3250
// end ;
3248: GO 3142
3250: POP
3251: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3252: LD_STRING 06_remoteVehs_1
3254: PPUSH
3255: LD_INT 0
3257: PPUSH
3258: CALL_OW 30
3262: IFFALSE 3715
// begin bc_type := b_control_tower ;
3264: LD_ADDR_OWVAR 42
3268: PUSH
3269: LD_INT 36
3271: ST_TO_ADDR
// bc_level := 4 ;
3272: LD_ADDR_OWVAR 43
3276: PUSH
3277: LD_INT 4
3279: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3280: LD_EXP 26
3284: PPUSH
3285: LD_INT 36
3287: PPUSH
3288: LD_INT 62
3290: PPUSH
3291: LD_INT 12
3293: PPUSH
3294: LD_INT 3
3296: PPUSH
3297: CALL 49758 0 5
3301: PUSH
3302: LD_INT 92
3304: PUSH
3305: LD_INT 62
3307: PUSH
3308: LD_INT 12
3310: PUSH
3311: LD_INT 3
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: PPUSH
3320: CALL_OW 69
3324: NOT
3325: AND
3326: IFFALSE 3343
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3328: LD_INT 62
3330: PPUSH
3331: LD_INT 12
3333: PPUSH
3334: LD_INT 3
3336: PPUSH
3337: CALL_OW 47
3341: GO 3505
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3343: LD_EXP 26
3347: PPUSH
3348: LD_INT 36
3350: PPUSH
3351: LD_INT 37
3353: PPUSH
3354: LD_INT 18
3356: PPUSH
3357: LD_INT 2
3359: PPUSH
3360: CALL 49758 0 5
3364: PUSH
3365: LD_INT 92
3367: PUSH
3368: LD_INT 37
3370: PUSH
3371: LD_INT 18
3373: PUSH
3374: LD_INT 3
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 69
3387: NOT
3388: AND
3389: IFFALSE 3406
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3391: LD_INT 37
3393: PPUSH
3394: LD_INT 18
3396: PPUSH
3397: LD_INT 2
3399: PPUSH
3400: CALL_OW 47
3404: GO 3505
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3406: LD_EXP 26
3410: PPUSH
3411: LD_INT 36
3413: PPUSH
3414: LD_INT 66
3416: PPUSH
3417: LD_INT 14
3419: PPUSH
3420: LD_INT 4
3422: PPUSH
3423: CALL 49758 0 5
3427: PUSH
3428: LD_INT 92
3430: PUSH
3431: LD_INT 66
3433: PUSH
3434: LD_INT 14
3436: PUSH
3437: LD_INT 3
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: PPUSH
3446: CALL_OW 69
3450: NOT
3451: AND
3452: IFFALSE 3469
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3454: LD_INT 66
3456: PPUSH
3457: LD_INT 14
3459: PPUSH
3460: LD_INT 4
3462: PPUSH
3463: CALL_OW 47
3467: GO 3505
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3469: LD_EXP 26
3473: PPUSH
3474: LD_INT 36
3476: PPUSH
3477: LD_INT 74
3479: PPUSH
3480: LD_INT 26
3482: PPUSH
3483: LD_INT 4
3485: PPUSH
3486: CALL 49758 0 5
3490: IFFALSE 3505
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3492: LD_INT 74
3494: PPUSH
3495: LD_INT 26
3497: PPUSH
3498: LD_INT 4
3500: PPUSH
3501: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3505: LD_INT 22
3507: PUSH
3508: LD_INT 1
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 30
3517: PUSH
3518: LD_INT 36
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PPUSH
3529: CALL_OW 69
3533: NOT
3534: IFFALSE 3538
// exit ;
3536: GO 3963
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3538: LD_ADDR_VAR 0 3
3542: PUSH
3543: DOUBLE
3544: LD_INT 1
3546: DEC
3547: ST_TO_ADDR
3548: LD_INT 3
3550: PUSH
3551: LD_INT 2
3553: PUSH
3554: LD_INT 2
3556: PUSH
3557: LD_INT 2
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: PUSH
3566: LD_OWVAR 67
3570: ARRAY
3571: PUSH
3572: FOR_TO
3573: IFFALSE 3713
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3575: LD_ADDR_OWVAR 37
3579: PUSH
3580: LD_INT 3
3582: PUSH
3583: LD_INT 2
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 1
3592: PPUSH
3593: LD_INT 2
3595: PPUSH
3596: CALL_OW 12
3600: ARRAY
3601: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3602: LD_ADDR_OWVAR 39
3606: PUSH
3607: LD_INT 1
3609: PUSH
3610: LD_INT 2
3612: PUSH
3613: EMPTY
3614: LIST
3615: LIST
3616: PUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 2
3622: PPUSH
3623: CALL_OW 12
3627: ARRAY
3628: ST_TO_ADDR
// vc_control := control_remote ;
3629: LD_ADDR_OWVAR 38
3633: PUSH
3634: LD_INT 2
3636: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3637: LD_ADDR_OWVAR 40
3641: PUSH
3642: LD_INT 4
3644: PUSH
3645: LD_INT 3
3647: PUSH
3648: LD_INT 5
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: LIST
3655: PUSH
3656: LD_INT 1
3658: PPUSH
3659: LD_INT 3
3661: PPUSH
3662: CALL_OW 12
3666: ARRAY
3667: ST_TO_ADDR
// veh := CreateVehicle ;
3668: LD_ADDR_VAR 0 5
3672: PUSH
3673: CALL_OW 45
3677: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3678: LD_VAR 0 5
3682: PPUSH
3683: LD_INT 3
3685: PPUSH
3686: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3690: LD_VAR 0 5
3694: PPUSH
3695: LD_INT 61
3697: PPUSH
3698: LD_INT 23
3700: PPUSH
3701: LD_INT 9
3703: PPUSH
3704: LD_INT 0
3706: PPUSH
3707: CALL_OW 50
// end ;
3711: GO 3572
3713: POP
3714: POP
// end ; for i := 1 to [ 2 , 2 , 1 , 1 ] [ Difficulty ] do
3715: LD_ADDR_VAR 0 3
3719: PUSH
3720: DOUBLE
3721: LD_INT 1
3723: DEC
3724: ST_TO_ADDR
3725: LD_INT 2
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: LD_INT 1
3733: PUSH
3734: LD_INT 1
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: PUSH
3743: LD_OWVAR 67
3747: ARRAY
3748: PUSH
3749: FOR_TO
3750: IFFALSE 3886
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3752: LD_ADDR_OWVAR 37
3756: PUSH
3757: LD_INT 3
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 1
3769: PPUSH
3770: LD_INT 2
3772: PPUSH
3773: CALL_OW 12
3777: ARRAY
3778: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3779: LD_ADDR_OWVAR 39
3783: PUSH
3784: LD_INT 1
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 1
3796: PPUSH
3797: LD_INT 2
3799: PPUSH
3800: CALL_OW 12
3804: ARRAY
3805: ST_TO_ADDR
// vc_control := control_manual ;
3806: LD_ADDR_OWVAR 38
3810: PUSH
3811: LD_INT 1
3813: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3814: LD_ADDR_OWVAR 40
3818: PUSH
3819: LD_INT 4
3821: PUSH
3822: LD_INT 5
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: PUSH
3829: LD_INT 1
3831: PPUSH
3832: LD_INT 2
3834: PPUSH
3835: CALL_OW 12
3839: ARRAY
3840: ST_TO_ADDR
// veh := CreateVehicle ;
3841: LD_ADDR_VAR 0 5
3845: PUSH
3846: CALL_OW 45
3850: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3851: LD_VAR 0 5
3855: PPUSH
3856: LD_INT 3
3858: PPUSH
3859: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3863: LD_VAR 0 5
3867: PPUSH
3868: LD_INT 61
3870: PPUSH
3871: LD_INT 23
3873: PPUSH
3874: LD_INT 9
3876: PPUSH
3877: LD_INT 0
3879: PPUSH
3880: CALL_OW 50
// end ;
3884: GO 3749
3886: POP
3887: POP
// vc_chassis := us_medium_wheeled ;
3888: LD_ADDR_OWVAR 37
3892: PUSH
3893: LD_INT 2
3895: ST_TO_ADDR
// vc_engine := engine_combustion ;
3896: LD_ADDR_OWVAR 39
3900: PUSH
3901: LD_INT 1
3903: ST_TO_ADDR
// vc_control := control_manual ;
3904: LD_ADDR_OWVAR 38
3908: PUSH
3909: LD_INT 1
3911: ST_TO_ADDR
// vc_weapon := us_crane ;
3912: LD_ADDR_OWVAR 40
3916: PUSH
3917: LD_INT 13
3919: ST_TO_ADDR
// veh := CreateVehicle ;
3920: LD_ADDR_VAR 0 5
3924: PUSH
3925: CALL_OW 45
3929: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3930: LD_VAR 0 5
3934: PPUSH
3935: LD_INT 3
3937: PPUSH
3938: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3942: LD_VAR 0 5
3946: PPUSH
3947: LD_INT 61
3949: PPUSH
3950: LD_INT 23
3952: PPUSH
3953: LD_INT 9
3955: PPUSH
3956: LD_INT 0
3958: PPUSH
3959: CALL_OW 50
// end ;
3963: LD_VAR 0 1
3967: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
3968: LD_INT 0
3970: PPUSH
3971: PPUSH
3972: PPUSH
3973: PPUSH
// uc_side := 1 ;
3974: LD_ADDR_OWVAR 20
3978: PUSH
3979: LD_INT 1
3981: ST_TO_ADDR
// uc_nation := 1 ;
3982: LD_ADDR_OWVAR 21
3986: PUSH
3987: LD_INT 1
3989: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
3990: LD_ADDR_EXP 21
3994: PUSH
3995: LD_STRING Denis
3997: PPUSH
3998: LD_EXP 1
4002: NOT
4003: PPUSH
4004: LD_STRING 06c_
4006: PPUSH
4007: CALL 36669 0 3
4011: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4012: LD_EXP 21
4016: PPUSH
4017: LD_INT 4
4019: PPUSH
4020: LD_INT 0
4022: PPUSH
4023: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4027: LD_ADDR_EXP 22
4031: PUSH
4032: LD_STRING Joan
4034: PPUSH
4035: LD_EXP 1
4039: NOT
4040: PPUSH
4041: LD_STRING 06c_
4043: PPUSH
4044: CALL 36669 0 3
4048: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4049: LD_EXP 22
4053: PPUSH
4054: LD_INT 4
4056: PPUSH
4057: LD_INT 0
4059: PPUSH
4060: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4064: LD_STRING GladstoneIn07
4066: PPUSH
4067: LD_INT 0
4069: PPUSH
4070: CALL_OW 30
4074: NOT
4075: IFFALSE 4155
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4077: LD_ADDR_EXP 17
4081: PUSH
4082: LD_STRING Gladstone
4084: PPUSH
4085: LD_EXP 1
4089: NOT
4090: PPUSH
4091: LD_STRING 06c_
4093: PPUSH
4094: CALL 36669 0 3
4098: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4099: LD_EXP 17
4103: NOT
4104: PUSH
4105: LD_STRING GladstoneStayInDelta
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 30
4115: AND
4116: IFFALSE 4140
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4118: LD_ADDR_EXP 17
4122: PUSH
4123: LD_STRING Gladstone
4125: PPUSH
4126: LD_EXP 1
4130: NOT
4131: PPUSH
4132: LD_STRING 05_
4134: PPUSH
4135: CALL 36669 0 3
4139: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4140: LD_EXP 17
4144: PPUSH
4145: LD_INT 4
4147: PPUSH
4148: LD_INT 0
4150: PPUSH
4151: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4155: LD_STRING LisaStayInDelta
4157: PPUSH
4158: LD_INT 0
4160: PPUSH
4161: CALL_OW 30
4165: IFFALSE 4201
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4167: LD_ADDR_EXP 15
4171: PUSH
4172: LD_STRING Lisa
4174: PPUSH
4175: LD_INT 1
4177: PPUSH
4178: LD_STRING 05_
4180: PPUSH
4181: CALL 36669 0 3
4185: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4186: LD_EXP 15
4190: PPUSH
4191: LD_INT 4
4193: PPUSH
4194: LD_INT 0
4196: PPUSH
4197: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4201: LD_STRING BobbyStayInDelta
4203: PPUSH
4204: LD_INT 0
4206: PPUSH
4207: CALL_OW 30
4211: IFFALSE 4247
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4213: LD_ADDR_EXP 13
4217: PUSH
4218: LD_STRING Bobby
4220: PPUSH
4221: LD_INT 1
4223: PPUSH
4224: LD_STRING 05_
4226: PPUSH
4227: CALL 36669 0 3
4231: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4232: LD_EXP 13
4236: PPUSH
4237: LD_INT 4
4239: PPUSH
4240: LD_INT 0
4242: PPUSH
4243: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4247: LD_STRING CyrusStayInDelta
4249: PPUSH
4250: LD_INT 0
4252: PPUSH
4253: CALL_OW 30
4257: IFFALSE 4293
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4259: LD_ADDR_EXP 14
4263: PUSH
4264: LD_STRING Cyrus
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: LD_STRING 05_
4272: PPUSH
4273: CALL 36669 0 3
4277: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4278: LD_EXP 14
4282: PPUSH
4283: LD_INT 4
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4293: LD_STRING BrownStayInDelta
4295: PPUSH
4296: LD_INT 0
4298: PPUSH
4299: CALL_OW 30
4303: IFFALSE 4339
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4305: LD_ADDR_EXP 11
4309: PUSH
4310: LD_STRING Brown
4312: PPUSH
4313: LD_INT 1
4315: PPUSH
4316: LD_STRING 05_
4318: PPUSH
4319: CALL 36669 0 3
4323: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4324: LD_EXP 11
4328: PPUSH
4329: LD_INT 4
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4339: LD_STRING DonaldsonStayInDelta
4341: PPUSH
4342: LD_INT 0
4344: PPUSH
4345: CALL_OW 30
4349: IFFALSE 4385
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4351: LD_ADDR_EXP 12
4355: PUSH
4356: LD_STRING Donaldson
4358: PPUSH
4359: LD_INT 1
4361: PPUSH
4362: LD_STRING 05_
4364: PPUSH
4365: CALL 36669 0 3
4369: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4370: LD_EXP 12
4374: PPUSH
4375: LD_INT 4
4377: PPUSH
4378: LD_INT 0
4380: PPUSH
4381: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4385: LD_ADDR_VAR 0 4
4389: PUSH
4390: LD_STRING OthersStayInDelta
4392: PPUSH
4393: CALL_OW 31
4397: ST_TO_ADDR
// if others > 2 then
4398: LD_VAR 0 4
4402: PUSH
4403: LD_INT 2
4405: GREATER
4406: IFFALSE 4469
// begin for j := 1 to 2 do
4408: LD_ADDR_VAR 0 3
4412: PUSH
4413: DOUBLE
4414: LD_INT 1
4416: DEC
4417: ST_TO_ADDR
4418: LD_INT 2
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4465
// begin SetTag ( others [ j ] , 107 ) ;
4424: LD_VAR 0 4
4428: PUSH
4429: LD_VAR 0 3
4433: ARRAY
4434: PPUSH
4435: LD_INT 107
4437: PPUSH
4438: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4442: LD_VAR 0 4
4446: PUSH
4447: LD_VAR 0 3
4451: ARRAY
4452: PPUSH
4453: LD_INT 4
4455: PPUSH
4456: LD_INT 0
4458: PPUSH
4459: CALL_OW 49
// end ;
4463: GO 4421
4465: POP
4466: POP
// end else
4467: GO 4530
// begin for j := 1 to others do
4469: LD_ADDR_VAR 0 3
4473: PUSH
4474: DOUBLE
4475: LD_INT 1
4477: DEC
4478: ST_TO_ADDR
4479: LD_VAR 0 4
4483: PUSH
4484: FOR_TO
4485: IFFALSE 4528
// begin SetTag ( others [ i ] , 107 ) ;
4487: LD_VAR 0 4
4491: PUSH
4492: LD_VAR 0 2
4496: ARRAY
4497: PPUSH
4498: LD_INT 107
4500: PPUSH
4501: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4505: LD_VAR 0 4
4509: PUSH
4510: LD_VAR 0 3
4514: ARRAY
4515: PPUSH
4516: LD_INT 4
4518: PPUSH
4519: LD_INT 0
4521: PPUSH
4522: CALL_OW 49
// end ;
4526: GO 4484
4528: POP
4529: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4530: LD_ADDR_VAR 0 4
4534: PUSH
4535: LD_STRING 06_other_apemans
4537: PPUSH
4538: CALL_OW 31
4542: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4543: LD_VAR 0 4
4547: PUSH
4548: LD_INT 3
4550: PUSH
4551: LD_INT 2
4553: PUSH
4554: LD_INT 2
4556: PUSH
4557: LD_INT 1
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: LD_OWVAR 67
4570: ARRAY
4571: GREATEREQUAL
4572: IFFALSE 4605
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4574: LD_ADDR_VAR 0 3
4578: PUSH
4579: LD_INT 3
4581: PUSH
4582: LD_INT 2
4584: PUSH
4585: LD_INT 2
4587: PUSH
4588: LD_INT 1
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: PUSH
4597: LD_OWVAR 67
4601: ARRAY
4602: ST_TO_ADDR
4603: GO 4615
// j := others ;
4605: LD_ADDR_VAR 0 3
4609: PUSH
4610: LD_VAR 0 4
4614: ST_TO_ADDR
// for i := 1 to j do
4615: LD_ADDR_VAR 0 2
4619: PUSH
4620: DOUBLE
4621: LD_INT 1
4623: DEC
4624: ST_TO_ADDR
4625: LD_VAR 0 3
4629: PUSH
4630: FOR_TO
4631: IFFALSE 4656
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4633: LD_VAR 0 4
4637: PUSH
4638: LD_VAR 0 2
4642: ARRAY
4643: PPUSH
4644: LD_INT 4
4646: PPUSH
4647: LD_INT 0
4649: PPUSH
4650: CALL_OW 49
4654: GO 4630
4656: POP
4657: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4658: LD_INT 4
4660: PPUSH
4661: LD_INT 22
4663: PUSH
4664: LD_INT 1
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 21
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 70
4689: PPUSH
4690: LD_INT 53
4692: PPUSH
4693: LD_INT 19
4695: PPUSH
4696: CALL_OW 111
// end ;
4700: LD_VAR 0 1
4704: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix ; begin
4705: LD_INT 0
4707: PPUSH
4708: PPUSH
4709: PPUSH
4710: PPUSH
4711: PPUSH
4712: PPUSH
4713: PPUSH
4714: PPUSH
4715: PPUSH
4716: PPUSH
4717: PPUSH
// prefix := 07c_ ;
4718: LD_ADDR_VAR 0 11
4722: PUSH
4723: LD_STRING 07c_
4725: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4726: LD_ADDR_VAR 0 9
4730: PUSH
4731: LD_STRING 07_vehicles
4733: PPUSH
4734: EMPTY
4735: PPUSH
4736: CALL_OW 30
4740: ST_TO_ADDR
// if not vehicles and debug then
4741: LD_VAR 0 9
4745: NOT
4746: PUSH
4747: LD_EXP 1
4751: AND
4752: IFFALSE 4777
// vehicles := [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ;
4754: LD_ADDR_VAR 0 9
4758: PUSH
4759: LD_INT 2
4761: PUSH
4762: LD_INT 1
4764: PUSH
4765: LD_INT 1
4767: PUSH
4768: LD_INT 4
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: ST_TO_ADDR
// squad := [ ] ;
4777: LD_ADDR_VAR 0 6
4781: PUSH
4782: EMPTY
4783: ST_TO_ADDR
// tmp := [ ] ;
4784: LD_ADDR_VAR 0 7
4788: PUSH
4789: EMPTY
4790: ST_TO_ADDR
// tmpVehs := [ ] ;
4791: LD_ADDR_VAR 0 8
4795: PUSH
4796: EMPTY
4797: ST_TO_ADDR
// uc_side := 1 ;
4798: LD_ADDR_OWVAR 20
4802: PUSH
4803: LD_INT 1
4805: ST_TO_ADDR
// uc_nation := 1 ;
4806: LD_ADDR_OWVAR 21
4810: PUSH
4811: LD_INT 1
4813: ST_TO_ADDR
// if vehicles then
4814: LD_VAR 0 9
4818: IFFALSE 4974
// begin k := 1 ;
4820: LD_ADDR_VAR 0 3
4824: PUSH
4825: LD_INT 1
4827: ST_TO_ADDR
// for i := 1 to vehicles div 4 do
4828: LD_ADDR_VAR 0 2
4832: PUSH
4833: DOUBLE
4834: LD_INT 1
4836: DEC
4837: ST_TO_ADDR
4838: LD_VAR 0 9
4842: PUSH
4843: LD_INT 4
4845: DIV
4846: PUSH
4847: FOR_TO
4848: IFFALSE 4972
// begin vc_chassis := vehicles [ k ] ;
4850: LD_ADDR_OWVAR 37
4854: PUSH
4855: LD_VAR 0 9
4859: PUSH
4860: LD_VAR 0 3
4864: ARRAY
4865: ST_TO_ADDR
// vc_engine := vehicles [ k + 1 ] ;
4866: LD_ADDR_OWVAR 39
4870: PUSH
4871: LD_VAR 0 9
4875: PUSH
4876: LD_VAR 0 3
4880: PUSH
4881: LD_INT 1
4883: PLUS
4884: ARRAY
4885: ST_TO_ADDR
// vc_control := vehicles [ k + 2 ] ;
4886: LD_ADDR_OWVAR 38
4890: PUSH
4891: LD_VAR 0 9
4895: PUSH
4896: LD_VAR 0 3
4900: PUSH
4901: LD_INT 2
4903: PLUS
4904: ARRAY
4905: ST_TO_ADDR
// vc_weapon := vehicles [ k + 3 ] ;
4906: LD_ADDR_OWVAR 40
4910: PUSH
4911: LD_VAR 0 9
4915: PUSH
4916: LD_VAR 0 3
4920: PUSH
4921: LD_INT 3
4923: PLUS
4924: ARRAY
4925: ST_TO_ADDR
// k := k + 4 ;
4926: LD_ADDR_VAR 0 3
4930: PUSH
4931: LD_VAR 0 3
4935: PUSH
4936: LD_INT 4
4938: PLUS
4939: ST_TO_ADDR
// veh := CreateVehicle ;
4940: LD_ADDR_VAR 0 10
4944: PUSH
4945: CALL_OW 45
4949: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
4950: LD_ADDR_VAR 0 8
4954: PUSH
4955: LD_VAR 0 8
4959: PPUSH
4960: LD_VAR 0 10
4964: PPUSH
4965: CALL 73350 0 2
4969: ST_TO_ADDR
// end ;
4970: GO 4847
4972: POP
4973: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
4974: LD_ADDR_EXP 10
4978: PUSH
4979: LD_STRING JMM
4981: PPUSH
4982: LD_EXP 1
4986: NOT
4987: PPUSH
4988: LD_VAR 0 11
4992: PPUSH
4993: CALL 36669 0 3
4997: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
4998: LD_EXP 9
5002: PUSH
5003: LD_INT 1
5005: PUSH
5006: LD_INT 3
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: IN
5013: PUSH
5014: LD_EXP 11
5018: NOT
5019: AND
5020: IFFALSE 5081
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5022: LD_ADDR_EXP 11
5026: PUSH
5027: LD_STRING Brown
5029: PPUSH
5030: LD_EXP 1
5034: NOT
5035: PPUSH
5036: LD_VAR 0 11
5040: PPUSH
5041: CALL 36669 0 3
5045: ST_TO_ADDR
// if Brown then
5046: LD_EXP 11
5050: IFFALSE 5081
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5052: LD_ADDR_VAR 0 7
5056: PUSH
5057: LD_VAR 0 7
5061: PPUSH
5062: LD_VAR 0 7
5066: PUSH
5067: LD_INT 1
5069: PLUS
5070: PPUSH
5071: LD_EXP 11
5075: PPUSH
5076: CALL_OW 1
5080: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5081: LD_EXP 9
5085: PUSH
5086: LD_INT 2
5088: PUSH
5089: LD_INT 3
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: IN
5096: PUSH
5097: LD_EXP 12
5101: NOT
5102: AND
5103: IFFALSE 5164
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5105: LD_ADDR_EXP 12
5109: PUSH
5110: LD_STRING Donaldson
5112: PPUSH
5113: LD_EXP 1
5117: NOT
5118: PPUSH
5119: LD_VAR 0 11
5123: PPUSH
5124: CALL 36669 0 3
5128: ST_TO_ADDR
// if Donaldson then
5129: LD_EXP 12
5133: IFFALSE 5164
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5135: LD_ADDR_VAR 0 7
5139: PUSH
5140: LD_VAR 0 7
5144: PPUSH
5145: LD_VAR 0 7
5149: PUSH
5150: LD_INT 1
5152: PLUS
5153: PPUSH
5154: LD_EXP 12
5158: PPUSH
5159: CALL_OW 1
5163: ST_TO_ADDR
// end ; if not Bobby then
5164: LD_EXP 13
5168: NOT
5169: IFFALSE 5227
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5171: LD_ADDR_EXP 13
5175: PUSH
5176: LD_STRING Bobby
5178: PPUSH
5179: LD_INT 1
5181: PPUSH
5182: LD_VAR 0 11
5186: PPUSH
5187: CALL 36669 0 3
5191: ST_TO_ADDR
// if Bobby then
5192: LD_EXP 13
5196: IFFALSE 5227
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5198: LD_ADDR_VAR 0 7
5202: PUSH
5203: LD_VAR 0 7
5207: PPUSH
5208: LD_VAR 0 7
5212: PUSH
5213: LD_INT 1
5215: PLUS
5216: PPUSH
5217: LD_EXP 13
5221: PPUSH
5222: CALL_OW 1
5226: ST_TO_ADDR
// end ; if not Cyrus then
5227: LD_EXP 14
5231: NOT
5232: IFFALSE 5290
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5234: LD_ADDR_EXP 14
5238: PUSH
5239: LD_STRING Cyrus
5241: PPUSH
5242: LD_INT 1
5244: PPUSH
5245: LD_VAR 0 11
5249: PPUSH
5250: CALL 36669 0 3
5254: ST_TO_ADDR
// if Cyrus then
5255: LD_EXP 14
5259: IFFALSE 5290
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5261: LD_ADDR_VAR 0 7
5265: PUSH
5266: LD_VAR 0 7
5270: PPUSH
5271: LD_VAR 0 7
5275: PUSH
5276: LD_INT 1
5278: PLUS
5279: PPUSH
5280: LD_EXP 14
5284: PPUSH
5285: CALL_OW 1
5289: ST_TO_ADDR
// end ; if not Lisa then
5290: LD_EXP 15
5294: NOT
5295: IFFALSE 5356
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5297: LD_ADDR_EXP 15
5301: PUSH
5302: LD_STRING Lisa
5304: PPUSH
5305: LD_EXP 1
5309: NOT
5310: PPUSH
5311: LD_VAR 0 11
5315: PPUSH
5316: CALL 36669 0 3
5320: ST_TO_ADDR
// if Lisa then
5321: LD_EXP 15
5325: IFFALSE 5356
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5327: LD_ADDR_VAR 0 7
5331: PUSH
5332: LD_VAR 0 7
5336: PPUSH
5337: LD_VAR 0 7
5341: PUSH
5342: LD_INT 1
5344: PLUS
5345: PPUSH
5346: LD_EXP 15
5350: PPUSH
5351: CALL_OW 1
5355: ST_TO_ADDR
// end ; if not Frank then
5356: LD_EXP 16
5360: NOT
5361: IFFALSE 5422
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5363: LD_ADDR_EXP 16
5367: PUSH
5368: LD_STRING Frank
5370: PPUSH
5371: LD_EXP 1
5375: NOT
5376: PPUSH
5377: LD_VAR 0 11
5381: PPUSH
5382: CALL 36669 0 3
5386: ST_TO_ADDR
// if Frank then
5387: LD_EXP 16
5391: IFFALSE 5422
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5393: LD_ADDR_VAR 0 7
5397: PUSH
5398: LD_VAR 0 7
5402: PPUSH
5403: LD_VAR 0 7
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_EXP 16
5416: PPUSH
5417: CALL_OW 1
5421: ST_TO_ADDR
// end ; if not Kikuchi then
5422: LD_EXP 18
5426: NOT
5427: IFFALSE 5485
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5429: LD_ADDR_EXP 18
5433: PUSH
5434: LD_STRING Kikuchi
5436: PPUSH
5437: LD_INT 1
5439: PPUSH
5440: LD_VAR 0 11
5444: PPUSH
5445: CALL 36669 0 3
5449: ST_TO_ADDR
// if Kikuchi then
5450: LD_EXP 18
5454: IFFALSE 5485
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5456: LD_ADDR_VAR 0 7
5460: PUSH
5461: LD_VAR 0 7
5465: PPUSH
5466: LD_VAR 0 7
5470: PUSH
5471: LD_INT 1
5473: PLUS
5474: PPUSH
5475: LD_EXP 18
5479: PPUSH
5480: CALL_OW 1
5484: ST_TO_ADDR
// end ; if not Gladstone then
5485: LD_EXP 17
5489: NOT
5490: IFFALSE 5551
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5492: LD_ADDR_EXP 17
5496: PUSH
5497: LD_STRING Gladstone
5499: PPUSH
5500: LD_EXP 1
5504: NOT
5505: PPUSH
5506: LD_VAR 0 11
5510: PPUSH
5511: CALL 36669 0 3
5515: ST_TO_ADDR
// if Gladstone then
5516: LD_EXP 17
5520: IFFALSE 5551
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5522: LD_ADDR_VAR 0 7
5526: PUSH
5527: LD_VAR 0 7
5531: PPUSH
5532: LD_VAR 0 7
5536: PUSH
5537: LD_INT 1
5539: PLUS
5540: PPUSH
5541: LD_EXP 17
5545: PPUSH
5546: CALL_OW 1
5550: ST_TO_ADDR
// end ; if not Khatam then
5551: LD_EXP 19
5555: NOT
5556: IFFALSE 5614
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5558: LD_ADDR_EXP 19
5562: PUSH
5563: LD_STRING Khatam
5565: PPUSH
5566: LD_INT 1
5568: PPUSH
5569: LD_VAR 0 11
5573: PPUSH
5574: CALL 36669 0 3
5578: ST_TO_ADDR
// if Khatam then
5579: LD_EXP 19
5583: IFFALSE 5614
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5585: LD_ADDR_VAR 0 7
5589: PUSH
5590: LD_VAR 0 7
5594: PPUSH
5595: LD_VAR 0 7
5599: PUSH
5600: LD_INT 1
5602: PLUS
5603: PPUSH
5604: LD_EXP 19
5608: PPUSH
5609: CALL_OW 1
5613: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5614: LD_ADDR_VAR 0 5
5618: PUSH
5619: LD_STRING 07c_others
5621: PPUSH
5622: CALL_OW 31
5626: ST_TO_ADDR
// squad := others ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_VAR 0 5
5636: ST_TO_ADDR
// if others then
5637: LD_VAR 0 5
5641: IFFALSE 5741
// for i in others do
5643: LD_ADDR_VAR 0 2
5647: PUSH
5648: LD_VAR 0 5
5652: PUSH
5653: FOR_IN
5654: IFFALSE 5739
// begin SetTag ( i , 108 ) ;
5656: LD_VAR 0 2
5660: PPUSH
5661: LD_INT 108
5663: PPUSH
5664: CALL_OW 109
// if GetClass ( i ) = class_mechanic then
5668: LD_VAR 0 2
5672: PPUSH
5673: CALL_OW 257
5677: PUSH
5678: LD_INT 3
5680: EQUAL
5681: IFFALSE 5708
// tmp := Insert ( tmp , 1 , i ) else
5683: LD_ADDR_VAR 0 7
5687: PUSH
5688: LD_VAR 0 7
5692: PPUSH
5693: LD_INT 1
5695: PPUSH
5696: LD_VAR 0 2
5700: PPUSH
5701: CALL_OW 2
5705: ST_TO_ADDR
5706: GO 5737
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5708: LD_ADDR_VAR 0 7
5712: PUSH
5713: LD_VAR 0 7
5717: PPUSH
5718: LD_VAR 0 7
5722: PUSH
5723: LD_INT 1
5725: PLUS
5726: PPUSH
5727: LD_VAR 0 2
5731: PPUSH
5732: CALL_OW 1
5736: ST_TO_ADDR
// end ;
5737: GO 5653
5739: POP
5740: POP
// if tmp then
5741: LD_VAR 0 7
5745: IFFALSE 5915
// begin for i in tmp do
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: LD_VAR 0 7
5756: PUSH
5757: FOR_IN
5758: IFFALSE 5913
// begin SetDir ( i , 3 ) ;
5760: LD_VAR 0 2
5764: PPUSH
5765: LD_INT 3
5767: PPUSH
5768: CALL_OW 233
// if tmpVehs then
5772: LD_VAR 0 8
5776: IFFALSE 5854
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5778: LD_VAR 0 8
5782: PUSH
5783: LD_INT 1
5785: ARRAY
5786: PPUSH
5787: LD_INT 0
5789: PPUSH
5790: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , 87 , 147 , false ) ;
5794: LD_VAR 0 8
5798: PUSH
5799: LD_INT 1
5801: ARRAY
5802: PPUSH
5803: LD_INT 87
5805: PPUSH
5806: LD_INT 147
5808: PPUSH
5809: LD_INT 0
5811: PPUSH
5812: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
5816: LD_VAR 0 2
5820: PPUSH
5821: LD_VAR 0 8
5825: PUSH
5826: LD_INT 1
5828: ARRAY
5829: PPUSH
5830: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
5834: LD_ADDR_VAR 0 8
5838: PUSH
5839: LD_VAR 0 8
5843: PPUSH
5844: LD_INT 1
5846: PPUSH
5847: CALL_OW 3
5851: ST_TO_ADDR
// end else
5852: GO 5869
// PlaceUnitArea ( i , southGammaSupportArea , false ) ;
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_INT 5
5861: PPUSH
5862: LD_INT 0
5864: PPUSH
5865: CALL_OW 49
// ComMoveXY ( i , 74 , 129 ) ;
5869: LD_VAR 0 2
5873: PPUSH
5874: LD_INT 74
5876: PPUSH
5877: LD_INT 129
5879: PPUSH
5880: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5884: LD_INT 35
5886: PPUSH
5887: CALL_OW 67
// until not FilterUnitsInArea ( southGammaSupportArea , [ f_side , 1 ] ) ;
5891: LD_INT 5
5893: PPUSH
5894: LD_INT 22
5896: PUSH
5897: LD_INT 1
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PPUSH
5904: CALL_OW 70
5908: NOT
5909: IFFALSE 5884
// end ;
5911: GO 5757
5913: POP
5914: POP
// end ; PlaceUnitXY ( JMM , 87 , 147 , false ) ;
5915: LD_EXP 10
5919: PPUSH
5920: LD_INT 87
5922: PPUSH
5923: LD_INT 147
5925: PPUSH
5926: LD_INT 0
5928: PPUSH
5929: CALL_OW 48
// ComMoveXY ( JMM , 79 , 131 ) ;
5933: LD_EXP 10
5937: PPUSH
5938: LD_INT 79
5940: PPUSH
5941: LD_INT 131
5943: PPUSH
5944: CALL_OW 111
// jmmArrival := true ;
5948: LD_ADDR_EXP 7
5952: PUSH
5953: LD_INT 1
5955: ST_TO_ADDR
// end ;
5956: LD_VAR 0 1
5960: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
5961: LD_INT 0
5963: PPUSH
5964: PPUSH
5965: PPUSH
5966: PPUSH
5967: PPUSH
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
5968: LD_ADDR_VAR 0 5
5972: PUSH
5973: LD_INT 6
5975: PPUSH
5976: LD_INT 3
5978: PUSH
5979: LD_INT 21
5981: PUSH
5982: LD_INT 3
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: PPUSH
5993: CALL_OW 70
5997: ST_TO_ADDR
// if tmp then
5998: LD_VAR 0 5
6002: IFFALSE 6026
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6004: LD_VAR 0 5
6008: PPUSH
6009: LD_INT 33
6011: PPUSH
6012: LD_INT 39
6014: PPUSH
6015: CALL_OW 111
// wait ( 0 0$3 ) ;
6019: LD_INT 105
6021: PPUSH
6022: CALL_OW 67
// end ; uc_side := 4 ;
6026: LD_ADDR_OWVAR 20
6030: PUSH
6031: LD_INT 4
6033: ST_TO_ADDR
// uc_nation := 1 ;
6034: LD_ADDR_OWVAR 21
6038: PUSH
6039: LD_INT 1
6041: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6042: LD_ADDR_EXP 23
6046: PUSH
6047: LD_STRING Sikorski
6049: PPUSH
6050: LD_INT 0
6052: PPUSH
6053: LD_STRING 
6055: PPUSH
6056: CALL 36669 0 3
6060: ST_TO_ADDR
// vc_engine := engine_combustion ;
6061: LD_ADDR_OWVAR 39
6065: PUSH
6066: LD_INT 1
6068: ST_TO_ADDR
// vc_control = control_manual ;
6069: LD_ADDR_OWVAR 38
6073: PUSH
6074: LD_INT 1
6076: ST_TO_ADDR
// vc_weapon = [ us_heavy_gun , us_double_gun , us_double_gun , us_double_gun ] [ Difficulty ] ;
6077: LD_ADDR_OWVAR 40
6081: PUSH
6082: LD_INT 6
6084: PUSH
6085: LD_INT 5
6087: PUSH
6088: LD_INT 5
6090: PUSH
6091: LD_INT 5
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: LD_OWVAR 67
6104: ARRAY
6105: ST_TO_ADDR
// vc_chassis = us_heavy_tracked ;
6106: LD_ADDR_OWVAR 37
6110: PUSH
6111: LD_INT 4
6113: ST_TO_ADDR
// veh := CreateVehicle ;
6114: LD_ADDR_VAR 0 4
6118: PUSH
6119: CALL_OW 45
6123: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6124: LD_VAR 0 4
6128: PPUSH
6129: LD_INT 3
6131: PPUSH
6132: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6136: LD_VAR 0 4
6140: PPUSH
6141: LD_INT 4
6143: NEG
6144: PPUSH
6145: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6149: LD_VAR 0 4
6153: PPUSH
6154: LD_INT 70
6156: PPUSH
6157: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6161: LD_VAR 0 4
6165: PPUSH
6166: LD_INT 6
6168: PPUSH
6169: LD_INT 0
6171: PPUSH
6172: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6176: LD_EXP 23
6180: PPUSH
6181: LD_VAR 0 4
6185: PPUSH
6186: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6190: LD_EXP 23
6194: PPUSH
6195: LD_INT 37
6197: PPUSH
6198: LD_INT 30
6200: PPUSH
6201: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6205: LD_INT 10
6207: PPUSH
6208: CALL_OW 67
// InitHc_All ( ) ;
6212: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6216: LD_ADDR_VAR 0 2
6220: PUSH
6221: DOUBLE
6222: LD_INT 1
6224: DEC
6225: ST_TO_ADDR
6226: LD_INT 3
6228: PUSH
6229: LD_INT 2
6231: PUSH
6232: LD_INT 2
6234: PUSH
6235: LD_INT 2
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: PUSH
6244: LD_OWVAR 67
6248: ARRAY
6249: PUSH
6250: FOR_TO
6251: IFFALSE 6363
// begin uc_side = 4 ;
6253: LD_ADDR_OWVAR 20
6257: PUSH
6258: LD_INT 4
6260: ST_TO_ADDR
// uc_nation = 1 ;
6261: LD_ADDR_OWVAR 21
6265: PUSH
6266: LD_INT 1
6268: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6269: LD_INT 0
6271: PPUSH
6272: LD_INT 1
6274: PPUSH
6275: LD_INT 4
6277: PPUSH
6278: LD_INT 7
6280: PPUSH
6281: CALL_OW 12
6285: PPUSH
6286: CALL_OW 380
// un := CreateHuman ;
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: CALL_OW 44
6299: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6300: LD_VAR 0 3
6304: PPUSH
6305: LD_INT 3
6307: PPUSH
6308: CALL_OW 233
// SetTag ( un , 101 ) ;
6312: LD_VAR 0 3
6316: PPUSH
6317: LD_INT 101
6319: PPUSH
6320: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6324: LD_VAR 0 3
6328: PPUSH
6329: LD_INT 6
6331: PPUSH
6332: LD_INT 0
6334: PPUSH
6335: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6339: LD_VAR 0 3
6343: PPUSH
6344: LD_INT 25
6346: PPUSH
6347: LD_INT 27
6349: PPUSH
6350: CALL_OW 111
// wait ( 0 0$1 ) ;
6354: LD_INT 35
6356: PPUSH
6357: CALL_OW 67
// end ;
6361: GO 6250
6363: POP
6364: POP
// for i := 1 to 2 do
6365: LD_ADDR_VAR 0 2
6369: PUSH
6370: DOUBLE
6371: LD_INT 1
6373: DEC
6374: ST_TO_ADDR
6375: LD_INT 2
6377: PUSH
6378: FOR_TO
6379: IFFALSE 6491
// begin uc_side = 4 ;
6381: LD_ADDR_OWVAR 20
6385: PUSH
6386: LD_INT 4
6388: ST_TO_ADDR
// uc_nation = 1 ;
6389: LD_ADDR_OWVAR 21
6393: PUSH
6394: LD_INT 1
6396: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6397: LD_INT 0
6399: PPUSH
6400: LD_INT 4
6402: PPUSH
6403: LD_INT 3
6405: PPUSH
6406: LD_INT 5
6408: PPUSH
6409: CALL_OW 12
6413: PPUSH
6414: CALL_OW 380
// un := CreateHuman ;
6418: LD_ADDR_VAR 0 3
6422: PUSH
6423: CALL_OW 44
6427: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6428: LD_VAR 0 3
6432: PPUSH
6433: LD_INT 3
6435: PPUSH
6436: CALL_OW 233
// SetTag ( un , 101 ) ;
6440: LD_VAR 0 3
6444: PPUSH
6445: LD_INT 101
6447: PPUSH
6448: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6452: LD_VAR 0 3
6456: PPUSH
6457: LD_INT 6
6459: PPUSH
6460: LD_INT 0
6462: PPUSH
6463: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6467: LD_VAR 0 3
6471: PPUSH
6472: LD_INT 25
6474: PPUSH
6475: LD_INT 27
6477: PPUSH
6478: CALL_OW 111
// wait ( 0 0$1 ) ;
6482: LD_INT 35
6484: PPUSH
6485: CALL_OW 67
// end ;
6489: GO 6378
6491: POP
6492: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6493: LD_ADDR_VAR 0 2
6497: PUSH
6498: DOUBLE
6499: LD_INT 1
6501: DEC
6502: ST_TO_ADDR
6503: LD_INT 5
6505: PUSH
6506: LD_INT 4
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 3
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_OWVAR 67
6525: ARRAY
6526: PUSH
6527: FOR_TO
6528: IFFALSE 6770
// begin uc_side := 4 ;
6530: LD_ADDR_OWVAR 20
6534: PUSH
6535: LD_INT 4
6537: ST_TO_ADDR
// uc_nation := 1 ;
6538: LD_ADDR_OWVAR 21
6542: PUSH
6543: LD_INT 1
6545: ST_TO_ADDR
// vc_engine := engine_combustion ;
6546: LD_ADDR_OWVAR 39
6550: PUSH
6551: LD_INT 1
6553: ST_TO_ADDR
// vc_control := control_manual ;
6554: LD_ADDR_OWVAR 38
6558: PUSH
6559: LD_INT 1
6561: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6562: LD_ADDR_OWVAR 40
6566: PUSH
6567: LD_INT 5
6569: PUSH
6570: LD_INT 7
6572: PUSH
6573: LD_INT 5
6575: PUSH
6576: LD_INT 4
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: PUSH
6585: LD_VAR 0 2
6589: PUSH
6590: LD_INT 4
6592: MOD
6593: PUSH
6594: LD_INT 1
6596: PLUS
6597: ARRAY
6598: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6599: LD_ADDR_OWVAR 37
6603: PUSH
6604: LD_INT 3
6606: PUSH
6607: LD_INT 3
6609: PUSH
6610: LD_INT 4
6612: PUSH
6613: LD_INT 4
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: PUSH
6622: LD_VAR 0 2
6626: PUSH
6627: LD_INT 4
6629: MOD
6630: PUSH
6631: LD_INT 1
6633: PLUS
6634: ARRAY
6635: ST_TO_ADDR
// veh := CreateVehicle ;
6636: LD_ADDR_VAR 0 4
6640: PUSH
6641: CALL_OW 45
6645: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6646: LD_VAR 0 4
6650: PPUSH
6651: LD_INT 3
6653: PPUSH
6654: CALL_OW 233
// SetTag ( veh , 0 ) ;
6658: LD_VAR 0 4
6662: PPUSH
6663: LD_INT 0
6665: PPUSH
6666: CALL_OW 109
// SetFuel ( veh , 70 ) ;
6670: LD_VAR 0 4
6674: PPUSH
6675: LD_INT 70
6677: PPUSH
6678: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6682: LD_VAR 0 4
6686: PPUSH
6687: LD_INT 6
6689: PPUSH
6690: LD_INT 0
6692: PPUSH
6693: CALL_OW 49
// InitHc ;
6697: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
6701: LD_INT 0
6703: PPUSH
6704: LD_INT 3
6706: PPUSH
6707: LD_INT 4
6709: PPUSH
6710: LD_INT 7
6712: PPUSH
6713: CALL_OW 12
6717: PPUSH
6718: CALL_OW 380
// un := CreateHuman ;
6722: LD_ADDR_VAR 0 3
6726: PUSH
6727: CALL_OW 44
6731: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6732: LD_VAR 0 3
6736: PPUSH
6737: LD_VAR 0 4
6741: PPUSH
6742: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
6746: LD_VAR 0 3
6750: PPUSH
6751: LD_INT 30
6753: PPUSH
6754: LD_INT 22
6756: PPUSH
6757: CALL_OW 111
// wait ( 0 0$3 ) ;
6761: LD_INT 105
6763: PPUSH
6764: CALL_OW 67
// end ;
6768: GO 6527
6770: POP
6771: POP
// wait ( 0 0$10 ) ;
6772: LD_INT 350
6774: PPUSH
6775: CALL_OW 67
// end ;
6779: LD_VAR 0 1
6783: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
6784: LD_INT 0
6786: PPUSH
6787: PPUSH
6788: PPUSH
6789: PPUSH
// gammaBase := [ ] ;
6790: LD_ADDR_VAR 0 4
6794: PUSH
6795: EMPTY
6796: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
6797: LD_ADDR_VAR 0 5
6801: PUSH
6802: LD_VAR 0 1
6806: PPUSH
6807: LD_INT 22
6809: PUSH
6810: LD_INT 1
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 21
6819: PUSH
6820: LD_INT 3
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 50
6829: PUSH
6830: EMPTY
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: LIST
6837: PPUSH
6838: CALL_OW 70
6842: ST_TO_ADDR
// for i in buildings do
6843: LD_ADDR_VAR 0 3
6847: PUSH
6848: LD_VAR 0 5
6852: PUSH
6853: FOR_IN
6854: IFFALSE 7291
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
6856: LD_VAR 0 3
6860: PPUSH
6861: CALL_OW 266
6865: PUSH
6866: LD_INT 6
6868: PUSH
6869: LD_INT 7
6871: PUSH
6872: LD_INT 8
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: IN
6880: IFFALSE 6994
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
6882: LD_ADDR_VAR 0 4
6886: PUSH
6887: LD_VAR 0 4
6891: PUSH
6892: LD_VAR 0 3
6896: PPUSH
6897: CALL_OW 266
6901: PUSH
6902: LD_VAR 0 3
6906: PPUSH
6907: CALL_OW 250
6911: PUSH
6912: LD_VAR 0 3
6916: PPUSH
6917: CALL_OW 251
6921: PUSH
6922: LD_VAR 0 3
6926: PPUSH
6927: CALL_OW 254
6931: PUSH
6932: LD_VAR 0 3
6936: PPUSH
6937: CALL_OW 267
6941: PUSH
6942: LD_VAR 0 3
6946: PPUSH
6947: CALL_OW 248
6951: PUSH
6952: LD_VAR 0 3
6956: PPUSH
6957: LD_INT 1
6959: PPUSH
6960: CALL_OW 268
6964: PUSH
6965: LD_VAR 0 3
6969: PPUSH
6970: LD_INT 2
6972: PPUSH
6973: CALL_OW 268
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: PUSH
6988: EMPTY
6989: LIST
6990: ADD
6991: ST_TO_ADDR
6992: GO 7289
// if GetBType ( i ) = b_bunker then
6994: LD_VAR 0 3
6998: PPUSH
6999: CALL_OW 266
7003: PUSH
7004: LD_INT 32
7006: EQUAL
7007: IFFALSE 7104
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7009: LD_ADDR_VAR 0 4
7013: PUSH
7014: LD_VAR 0 4
7018: PUSH
7019: LD_VAR 0 3
7023: PPUSH
7024: CALL_OW 266
7028: PUSH
7029: LD_VAR 0 3
7033: PPUSH
7034: CALL_OW 250
7038: PUSH
7039: LD_VAR 0 3
7043: PPUSH
7044: CALL_OW 251
7048: PUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: CALL_OW 254
7058: PUSH
7059: LD_VAR 0 3
7063: PPUSH
7064: CALL_OW 267
7068: PUSH
7069: LD_VAR 0 3
7073: PPUSH
7074: CALL_OW 248
7078: PUSH
7079: LD_VAR 0 3
7083: PPUSH
7084: CALL_OW 269
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: PUSH
7098: EMPTY
7099: LIST
7100: ADD
7101: ST_TO_ADDR
7102: GO 7289
// if GetBType ( i ) = b_factory then
7104: LD_VAR 0 3
7108: PPUSH
7109: CALL_OW 266
7113: PUSH
7114: LD_INT 3
7116: EQUAL
7117: IFFALSE 7207
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7119: LD_ADDR_VAR 0 4
7123: PUSH
7124: LD_VAR 0 4
7128: PPUSH
7129: LD_INT 1
7131: PPUSH
7132: LD_VAR 0 3
7136: PPUSH
7137: CALL_OW 266
7141: PUSH
7142: LD_VAR 0 3
7146: PPUSH
7147: CALL_OW 250
7151: PUSH
7152: LD_VAR 0 3
7156: PPUSH
7157: CALL_OW 251
7161: PUSH
7162: LD_VAR 0 3
7166: PPUSH
7167: CALL_OW 254
7171: PUSH
7172: LD_VAR 0 3
7176: PPUSH
7177: CALL_OW 267
7181: PUSH
7182: LD_VAR 0 3
7186: PPUSH
7187: CALL_OW 248
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: PPUSH
7200: CALL_OW 2
7204: ST_TO_ADDR
7205: GO 7289
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7207: LD_ADDR_VAR 0 4
7211: PUSH
7212: LD_VAR 0 4
7216: PUSH
7217: LD_VAR 0 3
7221: PPUSH
7222: CALL_OW 266
7226: PUSH
7227: LD_VAR 0 3
7231: PPUSH
7232: CALL_OW 250
7236: PUSH
7237: LD_VAR 0 3
7241: PPUSH
7242: CALL_OW 251
7246: PUSH
7247: LD_VAR 0 3
7251: PPUSH
7252: CALL_OW 254
7256: PUSH
7257: LD_VAR 0 3
7261: PPUSH
7262: CALL_OW 267
7266: PUSH
7267: LD_VAR 0 3
7271: PPUSH
7272: CALL_OW 248
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: PUSH
7285: EMPTY
7286: LIST
7287: ADD
7288: ST_TO_ADDR
// end ;
7289: GO 6853
7291: POP
7292: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7293: LD_VAR 0 4
7297: PPUSH
7298: LD_STRING 08_GammaBase
7300: PPUSH
7301: CALL_OW 39
// end ;
7305: LD_VAR 0 2
7309: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7310: LD_INT 0
7312: PPUSH
7313: PPUSH
7314: PPUSH
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7319: LD_ADDR_VAR 0 3
7323: PUSH
7324: LD_INT 22
7326: PUSH
7327: LD_INT 4
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PPUSH
7334: CALL_OW 69
7338: ST_TO_ADDR
// ComAgressiveMove ( tmp , 55 , 62 ) ;
7339: LD_VAR 0 3
7343: PPUSH
7344: LD_INT 55
7346: PPUSH
7347: LD_INT 62
7349: PPUSH
7350: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
7354: LD_VAR 0 3
7358: PPUSH
7359: LD_INT 175
7361: PPUSH
7362: CALL_OW 202
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
7366: LD_VAR 0 3
7370: PPUSH
7371: LD_INT 120
7373: PUSH
7374: LD_INT 101
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PPUSH
7381: CALL_OW 72
7385: PPUSH
7386: LD_INT 58
7388: PPUSH
7389: LD_INT 96
7391: PPUSH
7392: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
7396: LD_VAR 0 3
7400: PPUSH
7401: LD_INT 120
7403: PUSH
7404: LD_INT 101
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PPUSH
7411: CALL_OW 72
7415: PPUSH
7416: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
7420: LD_VAR 0 3
7424: PPUSH
7425: LD_INT 120
7427: PUSH
7428: LD_INT 101
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: LD_INT 25
7437: PUSH
7438: LD_INT 4
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PPUSH
7449: CALL_OW 72
7453: PPUSH
7454: LD_INT 52
7456: PPUSH
7457: LD_INT 93
7459: PPUSH
7460: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
7464: LD_VAR 0 3
7468: PPUSH
7469: LD_INT 120
7471: PUSH
7472: LD_INT 101
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 25
7481: PUSH
7482: LD_INT 4
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PPUSH
7493: CALL_OW 72
7497: PPUSH
7498: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
7502: LD_ADDR_VAR 0 7
7506: PUSH
7507: LD_VAR 0 3
7511: PPUSH
7512: LD_INT 21
7514: PUSH
7515: LD_INT 2
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PPUSH
7522: CALL_OW 72
7526: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
7527: LD_ADDR_VAR 0 4
7531: PUSH
7532: LD_INT 81
7534: PUSH
7535: LD_INT 1
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: PPUSH
7542: CALL_OW 69
7546: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
7547: LD_ADDR_VAR 0 5
7551: PUSH
7552: LD_INT 57
7554: PUSH
7555: LD_INT 66
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 62
7564: PUSH
7565: LD_INT 58
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7576: LD_INT 35
7578: PPUSH
7579: CALL_OW 67
// for i in filter do
7583: LD_ADDR_VAR 0 2
7587: PUSH
7588: LD_VAR 0 7
7592: PUSH
7593: FOR_IN
7594: IFFALSE 8033
// begin if IsDead ( i ) then
7596: LD_VAR 0 2
7600: PPUSH
7601: CALL_OW 301
7605: IFFALSE 7625
// begin filter := filter diff i ;
7607: LD_ADDR_VAR 0 7
7611: PUSH
7612: LD_VAR 0 7
7616: PUSH
7617: LD_VAR 0 2
7621: DIFF
7622: ST_TO_ADDR
// continue ;
7623: GO 7593
// end ; tmp := IsDrivenBy ( i ) ;
7625: LD_ADDR_VAR 0 3
7629: PUSH
7630: LD_VAR 0 2
7634: PPUSH
7635: CALL_OW 311
7639: ST_TO_ADDR
// if not tmp then
7640: LD_VAR 0 3
7644: NOT
7645: IFFALSE 7649
// continue ;
7647: GO 7593
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
7649: LD_VAR 0 2
7653: PPUSH
7654: CALL_OW 261
7658: PUSH
7659: LD_INT 30
7661: GREATER
7662: PUSH
7663: LD_VAR 0 2
7667: PPUSH
7668: CALL_OW 110
7672: PUSH
7673: LD_INT 2
7675: EQUAL
7676: AND
7677: IFFALSE 7693
// SetTag ( i , 0 ) else
7679: LD_VAR 0 2
7683: PPUSH
7684: LD_INT 0
7686: PPUSH
7687: CALL_OW 109
7691: GO 7737
// if GetTag ( i ) = 2 then
7693: LD_VAR 0 2
7697: PPUSH
7698: CALL_OW 110
7702: PUSH
7703: LD_INT 2
7705: EQUAL
7706: IFFALSE 7737
// begin ComMoveXY ( i , 52 , 50 ) ;
7708: LD_VAR 0 2
7712: PPUSH
7713: LD_INT 52
7715: PPUSH
7716: LD_INT 50
7718: PPUSH
7719: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
7723: LD_VAR 0 2
7727: PPUSH
7728: LD_EXP 26
7732: PPUSH
7733: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
7737: LD_VAR 0 2
7741: PPUSH
7742: CALL_OW 256
7746: PUSH
7747: LD_INT 600
7749: GREATEREQUAL
7750: PUSH
7751: LD_VAR 0 2
7755: PPUSH
7756: CALL_OW 110
7760: NOT
7761: AND
7762: IFFALSE 7788
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7764: LD_VAR 0 2
7768: PPUSH
7769: LD_VAR 0 4
7773: PPUSH
7774: LD_VAR 0 2
7778: PPUSH
7779: CALL_OW 74
7783: PPUSH
7784: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
7788: LD_VAR 0 2
7792: PPUSH
7793: CALL_OW 256
7797: PUSH
7798: LD_INT 600
7800: LESS
7801: PUSH
7802: LD_VAR 0 2
7806: PPUSH
7807: CALL_OW 110
7811: NOT
7812: AND
7813: IFFALSE 7889
// begin SetTag ( i , 1 ) ;
7815: LD_VAR 0 2
7819: PPUSH
7820: LD_INT 1
7822: PPUSH
7823: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
7827: LD_ADDR_VAR 0 6
7831: PUSH
7832: LD_VAR 0 2
7836: PPUSH
7837: LD_VAR 0 5
7841: PPUSH
7842: CALL 76673 0 2
7846: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
7847: LD_VAR 0 2
7851: PPUSH
7852: LD_VAR 0 6
7856: PUSH
7857: LD_INT 1
7859: ARRAY
7860: PPUSH
7861: LD_VAR 0 6
7865: PUSH
7866: LD_INT 2
7868: ARRAY
7869: PPUSH
7870: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
7874: LD_VAR 0 2
7878: PPUSH
7879: LD_INT 40
7881: PPUSH
7882: LD_INT 49
7884: PPUSH
7885: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
7889: LD_VAR 0 2
7893: PPUSH
7894: CALL_OW 110
7898: PUSH
7899: LD_INT 1
7901: EQUAL
7902: PUSH
7903: LD_VAR 0 2
7907: PPUSH
7908: LD_INT 40
7910: PPUSH
7911: LD_INT 49
7913: PPUSH
7914: CALL_OW 297
7918: PUSH
7919: LD_INT 9
7921: LESS
7922: AND
7923: PUSH
7924: LD_VAR 0 3
7928: AND
7929: IFFALSE 8031
// begin ComExitVehicle ( tmp ) ;
7931: LD_VAR 0 3
7935: PPUSH
7936: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
7940: LD_VAR 0 3
7944: PPUSH
7945: LD_VAR 0 2
7949: PPUSH
7950: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
7954: LD_INT 35
7956: PPUSH
7957: CALL_OW 67
// until GetLives ( i ) = 1000 ;
7961: LD_VAR 0 2
7965: PPUSH
7966: CALL_OW 256
7970: PUSH
7971: LD_INT 1000
7973: EQUAL
7974: IFFALSE 7954
// ComEnterUnit ( tmp , i ) ;
7976: LD_VAR 0 3
7980: PPUSH
7981: LD_VAR 0 2
7985: PPUSH
7986: CALL_OW 120
// if GetFuel ( i ) <= 40 then
7990: LD_VAR 0 2
7994: PPUSH
7995: CALL_OW 261
7999: PUSH
8000: LD_INT 40
8002: LESSEQUAL
8003: IFFALSE 8019
// SetTag ( i , 2 ) else
8005: LD_VAR 0 2
8009: PPUSH
8010: LD_INT 2
8012: PPUSH
8013: CALL_OW 109
8017: GO 8031
// SetTag ( i , 0 ) ;
8019: LD_VAR 0 2
8023: PPUSH
8024: LD_INT 0
8026: PPUSH
8027: CALL_OW 109
// end ; end ;
8031: GO 7593
8033: POP
8034: POP
// until not filter ;
8035: LD_VAR 0 7
8039: NOT
8040: IFFALSE 7576
// end ; end_of_file
8042: LD_VAR 0 1
8046: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
8047: LD_INT 0
8049: PPUSH
8050: PPUSH
8051: PPUSH
8052: PPUSH
8053: PPUSH
// uc_side := 3 ;
8054: LD_ADDR_OWVAR 20
8058: PUSH
8059: LD_INT 3
8061: ST_TO_ADDR
// uc_nation := 3 ;
8062: LD_ADDR_OWVAR 21
8066: PUSH
8067: LD_INT 3
8069: ST_TO_ADDR
// ruMechCounter := [ 8 , 12 , 16 , 20 ] [ Difficulty ] ;
8070: LD_ADDR_EXP 28
8074: PUSH
8075: LD_INT 8
8077: PUSH
8078: LD_INT 12
8080: PUSH
8081: LD_INT 16
8083: PUSH
8084: LD_INT 20
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: PUSH
8093: LD_OWVAR 67
8097: ARRAY
8098: ST_TO_ADDR
// ruMobile := [ ] ;
8099: LD_ADDR_EXP 29
8103: PUSH
8104: EMPTY
8105: ST_TO_ADDR
// ruBuildList := [ ] ;
8106: LD_ADDR_EXP 30
8110: PUSH
8111: EMPTY
8112: ST_TO_ADDR
// russianAttackers := [ ] ;
8113: LD_ADDR_EXP 31
8117: PUSH
8118: EMPTY
8119: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8120: LD_ADDR_VAR 0 5
8124: PUSH
8125: LD_INT 43
8127: PUSH
8128: LD_INT 44
8130: PUSH
8131: LD_INT 46
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: ST_TO_ADDR
// if Difficulty > 2 then
8139: LD_OWVAR 67
8143: PUSH
8144: LD_INT 2
8146: GREATER
8147: IFFALSE 8170
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 5
8158: PUSH
8159: LD_INT 45
8161: PUSH
8162: LD_INT 46
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: ADD
8169: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
8170: LD_ADDR_EXP 27
8174: PUSH
8175: LD_STRING Borodin
8177: PPUSH
8178: CALL_OW 25
8182: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
8183: LD_EXP 27
8187: PPUSH
8188: LD_INT 28
8190: PPUSH
8191: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
8195: LD_INT 28
8197: PPUSH
8198: CALL_OW 274
8202: PPUSH
8203: LD_INT 1
8205: PPUSH
8206: LD_INT 3000
8208: PUSH
8209: LD_INT 4000
8211: PUSH
8212: LD_INT 5000
8214: PUSH
8215: LD_INT 6000
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: PUSH
8224: LD_OWVAR 67
8228: ARRAY
8229: PPUSH
8230: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
8234: LD_INT 28
8236: PPUSH
8237: CALL_OW 274
8241: PPUSH
8242: LD_INT 2
8244: PPUSH
8245: LD_INT 1000
8247: PPUSH
8248: CALL_OW 277
// if Difficulty > 2 then
8252: LD_OWVAR 67
8256: PUSH
8257: LD_INT 2
8259: GREATER
8260: IFFALSE 8378
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
8262: LD_ADDR_VAR 0 4
8266: PUSH
8267: LD_INT 99
8269: PUSH
8270: LD_INT 130
8272: PUSH
8273: LD_INT 2
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 121
8283: PUSH
8284: LD_INT 127
8286: PUSH
8287: LD_INT 4
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: LIST
8294: PUSH
8295: LD_INT 117
8297: PUSH
8298: LD_INT 121
8300: PUSH
8301: LD_INT 4
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: LIST
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: LIST
8313: ST_TO_ADDR
// for i in tmp do
8314: LD_ADDR_VAR 0 2
8318: PUSH
8319: LD_VAR 0 4
8323: PUSH
8324: FOR_IN
8325: IFFALSE 8376
// begin bc_type := b_turret ;
8327: LD_ADDR_OWVAR 42
8331: PUSH
8332: LD_INT 33
8334: ST_TO_ADDR
// bc_level := 6 ;
8335: LD_ADDR_OWVAR 43
8339: PUSH
8340: LD_INT 6
8342: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
8343: LD_VAR 0 2
8347: PUSH
8348: LD_INT 1
8350: ARRAY
8351: PPUSH
8352: LD_VAR 0 2
8356: PUSH
8357: LD_INT 2
8359: ARRAY
8360: PPUSH
8361: LD_VAR 0 2
8365: PUSH
8366: LD_INT 3
8368: ARRAY
8369: PPUSH
8370: CALL_OW 47
// end ;
8374: GO 8324
8376: POP
8377: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
8378: LD_ADDR_VAR 0 4
8382: PUSH
8383: LD_INT 22
8385: PUSH
8386: LD_INT 3
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_INT 2
8395: PUSH
8396: LD_INT 30
8398: PUSH
8399: LD_INT 32
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PUSH
8406: LD_INT 30
8408: PUSH
8409: LD_INT 33
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: LIST
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PPUSH
8425: CALL_OW 69
8429: ST_TO_ADDR
// for i in tmp do
8430: LD_ADDR_VAR 0 2
8434: PUSH
8435: LD_VAR 0 4
8439: PUSH
8440: FOR_IN
8441: IFFALSE 8473
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
8443: LD_VAR 0 2
8447: PPUSH
8448: LD_VAR 0 5
8452: PUSH
8453: LD_INT 1
8455: PPUSH
8456: LD_VAR 0 5
8460: PPUSH
8461: CALL_OW 12
8465: ARRAY
8466: PPUSH
8467: CALL_OW 431
8471: GO 8440
8473: POP
8474: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
8475: LD_ADDR_VAR 0 2
8479: PUSH
8480: LD_INT 22
8482: PUSH
8483: LD_INT 3
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 30
8492: PUSH
8493: LD_INT 32
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PPUSH
8504: CALL_OW 69
8508: PUSH
8509: FOR_IN
8510: IFFALSE 8559
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8512: LD_INT 0
8514: PPUSH
8515: LD_INT 5
8517: PUSH
8518: LD_INT 6
8520: PUSH
8521: LD_INT 7
8523: PUSH
8524: LD_INT 8
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: PUSH
8533: LD_OWVAR 67
8537: ARRAY
8538: PPUSH
8539: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8543: CALL_OW 44
8547: PPUSH
8548: LD_VAR 0 2
8552: PPUSH
8553: CALL_OW 52
// end ;
8557: GO 8509
8559: POP
8560: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
8561: LD_ADDR_VAR 0 2
8565: PUSH
8566: LD_INT 22
8568: PUSH
8569: LD_INT 3
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 30
8578: PUSH
8579: LD_INT 5
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 69
8594: PUSH
8595: FOR_IN
8596: IFFALSE 8686
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
8598: LD_ADDR_VAR 0 3
8602: PUSH
8603: DOUBLE
8604: LD_INT 1
8606: DEC
8607: ST_TO_ADDR
8608: LD_INT 2
8610: PUSH
8611: LD_INT 2
8613: PUSH
8614: LD_INT 3
8616: PUSH
8617: LD_INT 3
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: PUSH
8626: LD_OWVAR 67
8630: ARRAY
8631: PUSH
8632: FOR_TO
8633: IFFALSE 8682
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8635: LD_INT 0
8637: PPUSH
8638: LD_INT 5
8640: PUSH
8641: LD_INT 6
8643: PUSH
8644: LD_INT 7
8646: PUSH
8647: LD_INT 8
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: PUSH
8656: LD_OWVAR 67
8660: ARRAY
8661: PPUSH
8662: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8666: CALL_OW 44
8670: PPUSH
8671: LD_VAR 0 2
8675: PPUSH
8676: CALL_OW 52
// end ;
8680: GO 8632
8682: POP
8683: POP
// end ;
8684: GO 8595
8686: POP
8687: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
8688: LD_ADDR_VAR 0 2
8692: PUSH
8693: DOUBLE
8694: LD_INT 1
8696: DEC
8697: ST_TO_ADDR
8698: LD_INT 3
8700: PUSH
8701: LD_INT 4
8703: PUSH
8704: LD_INT 5
8706: PUSH
8707: LD_INT 5
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: PUSH
8716: LD_OWVAR 67
8720: ARRAY
8721: PUSH
8722: FOR_TO
8723: IFFALSE 8770
// begin PrepareEngineer ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8725: LD_INT 0
8727: PPUSH
8728: LD_INT 5
8730: PUSH
8731: LD_INT 6
8733: PUSH
8734: LD_INT 7
8736: PUSH
8737: LD_INT 8
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: PUSH
8746: LD_OWVAR 67
8750: ARRAY
8751: PPUSH
8752: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
8756: CALL_OW 44
8760: PPUSH
8761: LD_INT 28
8763: PPUSH
8764: CALL_OW 52
// end ;
8768: GO 8722
8770: POP
8771: POP
// for i := 1 to 2 do
8772: LD_ADDR_VAR 0 2
8776: PUSH
8777: DOUBLE
8778: LD_INT 1
8780: DEC
8781: ST_TO_ADDR
8782: LD_INT 2
8784: PUSH
8785: FOR_TO
8786: IFFALSE 8820
// begin PrepareScientist ( false , 6 ) ;
8788: LD_INT 0
8790: PPUSH
8791: LD_INT 6
8793: PPUSH
8794: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
8798: CALL_OW 44
8802: PPUSH
8803: LD_INT 81
8805: PPUSH
8806: LD_INT 93
8808: PPUSH
8809: CALL_OW 428
8813: PPUSH
8814: CALL_OW 52
// end ;
8818: GO 8785
8820: POP
8821: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
8822: LD_INT 22
8824: PPUSH
8825: LD_INT 1
8827: PPUSH
8828: LD_INT 3
8830: PPUSH
8831: LD_INT 51
8833: PPUSH
8834: LD_INT 100
8836: PPUSH
8837: CALL 41533 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
8841: CALL_OW 45
8845: PPUSH
8846: LD_INT 91
8848: PPUSH
8849: LD_INT 94
8851: PPUSH
8852: LD_INT 3
8854: PPUSH
8855: LD_INT 0
8857: PPUSH
8858: CALL_OW 50
// for i := 1 to 2 do
8862: LD_ADDR_VAR 0 2
8866: PUSH
8867: DOUBLE
8868: LD_INT 1
8870: DEC
8871: ST_TO_ADDR
8872: LD_INT 2
8874: PUSH
8875: FOR_TO
8876: IFFALSE 8920
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
8878: LD_INT 22
8880: PPUSH
8881: LD_INT 1
8883: PPUSH
8884: LD_INT 3
8886: PPUSH
8887: LD_INT 52
8889: PPUSH
8890: LD_INT 100
8892: PPUSH
8893: CALL 41533 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
8897: CALL_OW 45
8901: PPUSH
8902: LD_INT 91
8904: PPUSH
8905: LD_INT 94
8907: PPUSH
8908: LD_INT 4
8910: PPUSH
8911: LD_INT 0
8913: PPUSH
8914: CALL_OW 50
// end ;
8918: GO 8875
8920: POP
8921: POP
// end ;
8922: LD_VAR 0 1
8926: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
8927: LD_INT 0
8929: PPUSH
8930: PPUSH
8931: PPUSH
8932: PPUSH
8933: PPUSH
// uc_side := 3 ;
8934: LD_ADDR_OWVAR 20
8938: PUSH
8939: LD_INT 3
8941: ST_TO_ADDR
// uc_nation := 3 ;
8942: LD_ADDR_OWVAR 21
8946: PUSH
8947: LD_INT 3
8949: ST_TO_ADDR
// for i := 1 to 4 do
8950: LD_ADDR_VAR 0 2
8954: PUSH
8955: DOUBLE
8956: LD_INT 1
8958: DEC
8959: ST_TO_ADDR
8960: LD_INT 4
8962: PUSH
8963: FOR_TO
8964: IFFALSE 9091
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
8966: LD_INT 22
8968: PPUSH
8969: LD_INT 1
8971: PPUSH
8972: LD_INT 1
8974: PPUSH
8975: LD_INT 42
8977: PUSH
8978: LD_INT 43
8980: PUSH
8981: LD_INT 44
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: LIST
8988: PUSH
8989: LD_INT 1
8991: PPUSH
8992: LD_INT 3
8994: PPUSH
8995: CALL_OW 12
8999: ARRAY
9000: PPUSH
9001: LD_INT 40
9003: PPUSH
9004: CALL 41533 0 5
// veh := CreateVehicle ;
9008: LD_ADDR_VAR 0 4
9012: PUSH
9013: CALL_OW 45
9017: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9018: LD_VAR 0 4
9022: PPUSH
9023: LD_INT 5
9025: PPUSH
9026: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
9030: LD_VAR 0 4
9034: PPUSH
9035: LD_INT 7
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9045: LD_INT 0
9047: PPUSH
9048: LD_INT 5
9050: PPUSH
9051: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9055: CALL_OW 44
9059: PPUSH
9060: LD_VAR 0 4
9064: PPUSH
9065: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9069: LD_ADDR_VAR 0 5
9073: PUSH
9074: LD_VAR 0 5
9078: PPUSH
9079: LD_VAR 0 4
9083: PPUSH
9084: CALL 73350 0 2
9088: ST_TO_ADDR
// end ;
9089: GO 8963
9091: POP
9092: POP
// for i := 1 to 3 do
9093: LD_ADDR_VAR 0 2
9097: PUSH
9098: DOUBLE
9099: LD_INT 1
9101: DEC
9102: ST_TO_ADDR
9103: LD_INT 3
9105: PUSH
9106: FOR_TO
9107: IFFALSE 9234
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9109: LD_INT 22
9111: PPUSH
9112: LD_INT 1
9114: PPUSH
9115: LD_INT 1
9117: PPUSH
9118: LD_INT 42
9120: PUSH
9121: LD_INT 43
9123: PUSH
9124: LD_INT 44
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 1
9134: PPUSH
9135: LD_INT 3
9137: PPUSH
9138: CALL_OW 12
9142: ARRAY
9143: PPUSH
9144: LD_INT 40
9146: PPUSH
9147: CALL 41533 0 5
// veh := CreateVehicle ;
9151: LD_ADDR_VAR 0 4
9155: PUSH
9156: CALL_OW 45
9160: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9161: LD_VAR 0 4
9165: PPUSH
9166: LD_INT 5
9168: PPUSH
9169: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
9173: LD_VAR 0 4
9177: PPUSH
9178: LD_INT 8
9180: PPUSH
9181: LD_INT 0
9183: PPUSH
9184: CALL_OW 49
// PrepareMechanic ( false , 0 ) ;
9188: LD_INT 0
9190: PPUSH
9191: LD_INT 0
9193: PPUSH
9194: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9198: CALL_OW 44
9202: PPUSH
9203: LD_VAR 0 4
9207: PPUSH
9208: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9212: LD_ADDR_VAR 0 5
9216: PUSH
9217: LD_VAR 0 5
9221: PPUSH
9222: LD_VAR 0 4
9226: PPUSH
9227: CALL 73350 0 2
9231: ST_TO_ADDR
// end ;
9232: GO 9106
9234: POP
9235: POP
// for i := 1 to 2 do
9236: LD_ADDR_VAR 0 2
9240: PUSH
9241: DOUBLE
9242: LD_INT 1
9244: DEC
9245: ST_TO_ADDR
9246: LD_INT 2
9248: PUSH
9249: FOR_TO
9250: IFFALSE 9309
// begin PrepareSoldier ( false , 5 ) ;
9252: LD_INT 0
9254: PPUSH
9255: LD_INT 5
9257: PPUSH
9258: CALL_OW 381
// un := CreateHuman ;
9262: LD_ADDR_VAR 0 3
9266: PUSH
9267: CALL_OW 44
9271: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
9272: LD_VAR 0 3
9276: PPUSH
9277: LD_INT 8
9279: PPUSH
9280: LD_INT 0
9282: PPUSH
9283: CALL_OW 49
// tmp := Join ( tmp , un ) ;
9287: LD_ADDR_VAR 0 5
9291: PUSH
9292: LD_VAR 0 5
9296: PPUSH
9297: LD_VAR 0 3
9301: PPUSH
9302: CALL 73350 0 2
9306: ST_TO_ADDR
// end ;
9307: GO 9249
9309: POP
9310: POP
// for i in tmp do
9311: LD_ADDR_VAR 0 2
9315: PUSH
9316: LD_VAR 0 5
9320: PUSH
9321: FOR_IN
9322: IFFALSE 9341
// ComAgressiveMove ( i , 51 , 16 ) ;
9324: LD_VAR 0 2
9328: PPUSH
9329: LD_INT 51
9331: PPUSH
9332: LD_INT 16
9334: PPUSH
9335: CALL_OW 114
9339: GO 9321
9341: POP
9342: POP
// end ;
9343: LD_VAR 0 1
9347: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
9348: LD_EXP 29
9352: IFFALSE 9906
9354: GO 9356
9356: DISABLE
9357: LD_INT 0
9359: PPUSH
9360: PPUSH
9361: PPUSH
// begin enable ;
9362: ENABLE
// if not ruMobile then
9363: LD_EXP 29
9367: NOT
9368: IFFALSE 9372
// exit ;
9370: GO 9906
// for i in ruMobile do
9372: LD_ADDR_VAR 0 1
9376: PUSH
9377: LD_EXP 29
9381: PUSH
9382: FOR_IN
9383: IFFALSE 9904
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
9385: LD_VAR 0 1
9389: PPUSH
9390: CALL_OW 302
9394: NOT
9395: PUSH
9396: LD_VAR 0 1
9400: PPUSH
9401: CALL_OW 255
9405: PUSH
9406: LD_INT 3
9408: NONEQUAL
9409: OR
9410: IFFALSE 9430
// begin ruMobile := ruMobile diff i ;
9412: LD_ADDR_EXP 29
9416: PUSH
9417: LD_EXP 29
9421: PUSH
9422: LD_VAR 0 1
9426: DIFF
9427: ST_TO_ADDR
// continue ;
9428: GO 9382
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
9430: LD_VAR 0 1
9434: PPUSH
9435: CALL_OW 110
9439: NOT
9440: PUSH
9441: LD_VAR 0 1
9445: PPUSH
9446: CALL_OW 110
9450: PUSH
9451: LD_INT 0
9453: EQUAL
9454: OR
9455: IFFALSE 9570
// begin if GetFuel ( i ) < 50 then
9457: LD_VAR 0 1
9461: PPUSH
9462: CALL_OW 261
9466: PUSH
9467: LD_INT 50
9469: LESS
9470: IFFALSE 9529
// begin ComMoveXY ( i , 93 , 100 ) ;
9472: LD_VAR 0 1
9476: PPUSH
9477: LD_INT 93
9479: PPUSH
9480: LD_INT 100
9482: PPUSH
9483: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9487: LD_INT 35
9489: PPUSH
9490: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
9494: LD_VAR 0 1
9498: PPUSH
9499: LD_INT 93
9501: PPUSH
9502: LD_INT 100
9504: PPUSH
9505: CALL_OW 297
9509: PUSH
9510: LD_INT 4
9512: LESS
9513: IFFALSE 9487
// SetFuel ( i , 100 ) ;
9515: LD_VAR 0 1
9519: PPUSH
9520: LD_INT 100
9522: PPUSH
9523: CALL_OW 240
// end else
9527: GO 9570
// if not IsInArea ( i , ruParkingArea ) then
9529: LD_VAR 0 1
9533: PPUSH
9534: LD_INT 10
9536: PPUSH
9537: CALL_OW 308
9541: NOT
9542: IFFALSE 9558
// ComMoveToArea ( i , ruParkingArea ) else
9544: LD_VAR 0 1
9548: PPUSH
9549: LD_INT 10
9551: PPUSH
9552: CALL_OW 113
9556: GO 9570
// SetTag ( i , 1 ) ;
9558: LD_VAR 0 1
9562: PPUSH
9563: LD_INT 1
9565: PPUSH
9566: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
9570: LD_VAR 0 1
9574: PPUSH
9575: CALL_OW 110
9579: PUSH
9580: LD_INT 1
9582: EQUAL
9583: IFFALSE 9713
// begin if GetLives ( i ) < 1000 then
9585: LD_VAR 0 1
9589: PPUSH
9590: CALL_OW 256
9594: PUSH
9595: LD_INT 1000
9597: LESS
9598: IFFALSE 9690
// begin if not IsDrivenBy ( i ) then
9600: LD_VAR 0 1
9604: PPUSH
9605: CALL_OW 311
9609: NOT
9610: IFFALSE 9614
// continue ;
9612: GO 9382
// mech := IsDrivenBy ( i ) ;
9614: LD_ADDR_VAR 0 2
9618: PUSH
9619: LD_VAR 0 1
9623: PPUSH
9624: CALL_OW 311
9628: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9629: LD_VAR 0 2
9633: PPUSH
9634: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9638: LD_VAR 0 2
9642: PPUSH
9643: LD_VAR 0 1
9647: PPUSH
9648: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9652: LD_INT 35
9654: PPUSH
9655: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9659: LD_VAR 0 1
9663: PPUSH
9664: CALL_OW 256
9668: PUSH
9669: LD_INT 1000
9671: EQUAL
9672: IFFALSE 9652
// ComEnterUnit ( mech , i ) ;
9674: LD_VAR 0 2
9678: PPUSH
9679: LD_VAR 0 1
9683: PPUSH
9684: CALL_OW 120
// end else
9688: GO 9713
// if IsDrivenBy ( i ) then
9690: LD_VAR 0 1
9694: PPUSH
9695: CALL_OW 311
9699: IFFALSE 9713
// SetTag ( i , 2 ) ;
9701: LD_VAR 0 1
9705: PPUSH
9706: LD_INT 2
9708: PPUSH
9709: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
9713: LD_VAR 0 1
9717: PPUSH
9718: CALL_OW 110
9722: PUSH
9723: LD_INT 2
9725: EQUAL
9726: IFFALSE 9902
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
9728: LD_ADDR_VAR 0 3
9732: PUSH
9733: LD_INT 11
9735: PPUSH
9736: LD_INT 81
9738: PUSH
9739: LD_INT 3
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PPUSH
9746: CALL_OW 70
9750: ST_TO_ADDR
// if GetLives ( i ) < 650 then
9751: LD_VAR 0 1
9755: PPUSH
9756: CALL_OW 256
9760: PUSH
9761: LD_INT 650
9763: LESS
9764: IFFALSE 9789
// begin ComStop ( i ) ;
9766: LD_VAR 0 1
9770: PPUSH
9771: CALL_OW 141
// SetTag ( i , 0 ) ;
9775: LD_VAR 0 1
9779: PPUSH
9780: LD_INT 0
9782: PPUSH
9783: CALL_OW 109
// continue ;
9787: GO 9382
// end ; if enemy then
9789: LD_VAR 0 3
9793: IFFALSE 9833
// begin if not HasTask ( i ) then
9795: LD_VAR 0 1
9799: PPUSH
9800: CALL_OW 314
9804: NOT
9805: IFFALSE 9831
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9807: LD_VAR 0 1
9811: PPUSH
9812: LD_VAR 0 3
9816: PPUSH
9817: LD_VAR 0 1
9821: PPUSH
9822: CALL_OW 74
9826: PPUSH
9827: CALL_OW 115
// end else
9831: GO 9902
// if ruMobile > 2 then
9833: LD_EXP 29
9837: PUSH
9838: LD_INT 2
9840: GREATER
9841: IFFALSE 9902
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
9843: LD_ADDR_VAR 0 3
9847: PUSH
9848: LD_INT 81
9850: PUSH
9851: LD_INT 3
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PPUSH
9858: CALL_OW 69
9862: ST_TO_ADDR
// if enemy then
9863: LD_VAR 0 3
9867: IFFALSE 9902
// AgressiveMove ( i , [ [ 103 , 83 ] , [ 80 , 56 ] ] ) ;
9869: LD_VAR 0 1
9873: PPUSH
9874: LD_INT 103
9876: PUSH
9877: LD_INT 83
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 80
9886: PUSH
9887: LD_INT 56
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL 75946 0 2
// end ; end ; end ;
9902: GO 9382
9904: POP
9905: POP
// end ;
9906: PPOPN 3
9908: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
9909: LD_INT 3
9911: PUSH
9912: LD_INT 22
9914: PUSH
9915: LD_INT 1
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 32
9928: PUSH
9929: LD_INT 1
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PPUSH
9940: CALL_OW 69
9944: IFFALSE 10028
9946: GO 9948
9948: DISABLE
9949: LD_INT 0
9951: PPUSH
// begin enable ;
9952: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
9953: LD_ADDR_VAR 0 1
9957: PUSH
9958: LD_INT 3
9960: PUSH
9961: LD_INT 22
9963: PUSH
9964: LD_INT 1
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 32
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PPUSH
9989: CALL_OW 69
9993: PUSH
9994: FOR_IN
9995: IFFALSE 10026
// if GetFuel ( i ) < 3 then
9997: LD_VAR 0 1
10001: PPUSH
10002: CALL_OW 261
10006: PUSH
10007: LD_INT 3
10009: LESS
10010: IFFALSE 10024
// SetFuel ( i , 3 ) ;
10012: LD_VAR 0 1
10016: PPUSH
10017: LD_INT 3
10019: PPUSH
10020: CALL_OW 240
10024: GO 9994
10026: POP
10027: POP
// end ;
10028: PPOPN 1
10030: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
10031: LD_INT 29
10033: PPUSH
10034: CALL_OW 302
10038: PUSH
10039: LD_INT 29
10041: PPUSH
10042: CALL_OW 461
10046: PUSH
10047: LD_INT 2
10049: EQUAL
10050: AND
10051: IFFALSE 10226
10053: GO 10055
10055: DISABLE
10056: LD_INT 0
10058: PPUSH
10059: PPUSH
// begin enable ;
10060: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10061: LD_ADDR_VAR 0 1
10065: PUSH
10066: LD_INT 21
10068: PUSH
10069: LD_INT 22
10071: PUSH
10072: LD_INT 23
10074: PUSH
10075: LD_INT 24
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: PUSH
10084: LD_INT 1
10086: PPUSH
10087: LD_INT 4
10089: PPUSH
10090: CALL_OW 12
10094: ARRAY
10095: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
10096: LD_ADDR_VAR 0 2
10100: PUSH
10101: LD_INT 42
10103: PUSH
10104: LD_INT 44
10106: PUSH
10107: LD_INT 43
10109: PUSH
10110: LD_INT 46
10112: PUSH
10113: LD_INT 45
10115: PUSH
10116: LD_INT 46
10118: PUSH
10119: LD_INT 45
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: PUSH
10131: LD_OWVAR 67
10135: PUSH
10136: LD_INT 0
10138: PPUSH
10139: LD_INT 3
10141: PPUSH
10142: CALL_OW 12
10146: PLUS
10147: ARRAY
10148: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
10149: LD_VAR 0 1
10153: PUSH
10154: LD_INT 21
10156: PUSH
10157: LD_INT 22
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: IN
10164: PUSH
10165: LD_VAR 0 2
10169: PUSH
10170: LD_INT 46
10172: EQUAL
10173: AND
10174: IFFALSE 10203
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10176: LD_ADDR_VAR 0 2
10180: PUSH
10181: LD_INT 44
10183: PUSH
10184: LD_INT 45
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: LD_INT 1
10193: PPUSH
10194: LD_INT 2
10196: PPUSH
10197: CALL_OW 12
10201: ARRAY
10202: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
10203: LD_INT 29
10205: PPUSH
10206: LD_VAR 0 1
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: LD_INT 1
10216: PPUSH
10217: LD_VAR 0 2
10221: PPUSH
10222: CALL_OW 185
// end ;
10226: PPOPN 2
10228: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
10229: LD_INT 28
10231: PPUSH
10232: CALL_OW 302
10236: IFFALSE 11075
10238: GO 10240
10240: DISABLE
10241: LD_INT 0
10243: PPUSH
10244: PPUSH
10245: PPUSH
10246: PPUSH
10247: PPUSH
10248: PPUSH
10249: PPUSH
10250: PPUSH
// begin enable ;
10251: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
10252: LD_ADDR_VAR 0 3
10256: PUSH
10257: LD_INT 12
10259: PPUSH
10260: LD_INT 3
10262: PUSH
10263: LD_INT 24
10265: PUSH
10266: LD_INT 1000
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 21
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 70
10295: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10296: LD_ADDR_VAR 0 4
10300: PUSH
10301: LD_INT 22
10303: PUSH
10304: LD_INT 3
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 25
10313: PUSH
10314: LD_INT 2
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PPUSH
10325: CALL_OW 69
10329: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
10330: LD_ADDR_VAR 0 5
10334: PUSH
10335: LD_INT 22
10337: PUSH
10338: LD_INT 3
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 34
10347: PUSH
10348: LD_INT 52
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PPUSH
10359: CALL_OW 69
10363: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
10364: LD_ADDR_VAR 0 7
10368: PUSH
10369: LD_INT 22
10371: PUSH
10372: LD_INT 3
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 25
10381: PUSH
10382: LD_INT 4
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
10398: LD_ADDR_VAR 0 8
10402: PUSH
10403: LD_INT 81
10405: PPUSH
10406: LD_INT 93
10408: PPUSH
10409: CALL_OW 428
10413: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
10414: LD_VAR 0 7
10418: PUSH
10419: LD_VAR 0 4
10423: PPUSH
10424: LD_INT 120
10426: PUSH
10427: LD_INT 2
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 72
10438: AND
10439: IFFALSE 10452
// ComExitAll ( sci ) else
10441: LD_VAR 0 7
10445: PPUSH
10446: CALL 73821 0 1
10450: GO 10525
// if sci then
10452: LD_VAR 0 7
10456: IFFALSE 10525
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
10458: LD_VAR 0 7
10462: PPUSH
10463: LD_INT 3
10465: PUSH
10466: LD_INT 54
10468: PUSH
10469: EMPTY
10470: LIST
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PPUSH
10476: CALL_OW 72
10480: PUSH
10481: LD_VAR 0 8
10485: PPUSH
10486: CALL_OW 302
10490: AND
10491: IFFALSE 10525
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
10493: LD_VAR 0 7
10497: PPUSH
10498: LD_INT 3
10500: PUSH
10501: LD_INT 54
10503: PUSH
10504: EMPTY
10505: LIST
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PPUSH
10511: CALL_OW 72
10515: PPUSH
10516: LD_VAR 0 8
10520: PPUSH
10521: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
10525: LD_VAR 0 5
10529: PPUSH
10530: LD_INT 50
10532: PUSH
10533: EMPTY
10534: LIST
10535: PPUSH
10536: CALL_OW 72
10540: PUSH
10541: LD_VAR 0 3
10545: AND
10546: IFFALSE 10577
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
10548: LD_VAR 0 5
10552: PPUSH
10553: LD_INT 50
10555: PUSH
10556: EMPTY
10557: LIST
10558: PPUSH
10559: CALL_OW 72
10563: PPUSH
10564: LD_VAR 0 3
10568: PUSH
10569: LD_INT 1
10571: ARRAY
10572: PPUSH
10573: CALL_OW 130
// if eng then
10577: LD_VAR 0 4
10581: IFFALSE 11075
// begin for i in eng do
10583: LD_ADDR_VAR 0 1
10587: PUSH
10588: LD_VAR 0 4
10592: PUSH
10593: FOR_IN
10594: IFFALSE 11073
// begin tag := GetTag ( i ) ;
10596: LD_ADDR_VAR 0 6
10600: PUSH
10601: LD_VAR 0 1
10605: PPUSH
10606: CALL_OW 110
10610: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
10611: LD_VAR 0 3
10615: NOT
10616: PUSH
10617: LD_EXP 30
10621: NOT
10622: AND
10623: PUSH
10624: LD_VAR 0 6
10628: PUSH
10629: LD_INT 1
10631: EQUAL
10632: AND
10633: IFFALSE 10659
// begin SetTag ( i , 0 ) ;
10635: LD_VAR 0 1
10639: PPUSH
10640: LD_INT 0
10642: PPUSH
10643: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
10647: LD_VAR 0 1
10651: PPUSH
10652: LD_INT 28
10654: PPUSH
10655: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
10659: LD_VAR 0 3
10663: PUSH
10664: LD_EXP 30
10668: OR
10669: PUSH
10670: LD_VAR 0 6
10674: PUSH
10675: LD_INT 0
10677: EQUAL
10678: AND
10679: IFFALSE 10693
// SetTag ( i , 1 ) ;
10681: LD_VAR 0 1
10685: PPUSH
10686: LD_INT 1
10688: PPUSH
10689: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
10693: LD_VAR 0 1
10697: PPUSH
10698: CALL_OW 310
10702: PUSH
10703: LD_VAR 0 6
10707: PUSH
10708: LD_INT 1
10710: EQUAL
10711: AND
10712: IFFALSE 10723
// ComExit ( i ) ;
10714: LD_VAR 0 1
10718: PPUSH
10719: CALL 73738 0 1
// if GetLives ( i ) < 500 and tag = 1 then
10723: LD_VAR 0 1
10727: PPUSH
10728: CALL_OW 256
10732: PUSH
10733: LD_INT 500
10735: LESS
10736: PUSH
10737: LD_VAR 0 6
10741: PUSH
10742: LD_INT 1
10744: EQUAL
10745: AND
10746: IFFALSE 10760
// SetTag ( i , 2 ) ;
10748: LD_VAR 0 1
10752: PPUSH
10753: LD_INT 2
10755: PPUSH
10756: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
10760: LD_VAR 0 1
10764: PPUSH
10765: CALL_OW 256
10769: PUSH
10770: LD_INT 1000
10772: EQUAL
10773: PUSH
10774: LD_VAR 0 6
10778: PUSH
10779: LD_INT 2
10781: EQUAL
10782: AND
10783: IFFALSE 10797
// SetTag ( i , 1 ) ;
10785: LD_VAR 0 1
10789: PPUSH
10790: LD_INT 1
10792: PPUSH
10793: CALL_OW 109
// if tag = 2 then
10797: LD_VAR 0 6
10801: PUSH
10802: LD_INT 2
10804: EQUAL
10805: IFFALSE 10852
// begin if GetDistUnitXY ( i , 84 , 93 ) > 6 then
10807: LD_VAR 0 1
10811: PPUSH
10812: LD_INT 84
10814: PPUSH
10815: LD_INT 93
10817: PPUSH
10818: CALL_OW 297
10822: PUSH
10823: LD_INT 6
10825: GREATER
10826: IFFALSE 10852
// begin ComMoveXY ( i , 84 , 93 ) ;
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_INT 84
10835: PPUSH
10836: LD_INT 93
10838: PPUSH
10839: CALL_OW 111
// AddComHold ( i ) ;
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
10852: LD_VAR 0 1
10856: PPUSH
10857: LD_INT 11
10859: PPUSH
10860: CALL_OW 308
10864: IFFALSE 10878
// ComMoveToArea ( i , ruBaseArea ) ;
10866: LD_VAR 0 1
10870: PPUSH
10871: LD_INT 12
10873: PPUSH
10874: CALL_OW 113
// if tag = 1 then
10878: LD_VAR 0 6
10882: PUSH
10883: LD_INT 1
10885: EQUAL
10886: IFFALSE 11071
// begin if b then
10888: LD_VAR 0 3
10892: IFFALSE 10920
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
10894: LD_VAR 0 1
10898: PPUSH
10899: LD_VAR 0 3
10903: PPUSH
10904: LD_VAR 0 1
10908: PPUSH
10909: CALL_OW 74
10913: PPUSH
10914: CALL_OW 130
10918: GO 11071
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
10920: LD_EXP 30
10924: PUSH
10925: LD_INT 11
10927: PPUSH
10928: LD_INT 81
10930: PUSH
10931: LD_INT 3
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PPUSH
10938: CALL_OW 70
10942: PUSH
10943: LD_INT 0
10945: EQUAL
10946: AND
10947: PUSH
10948: LD_INT 28
10950: PPUSH
10951: LD_EXP 30
10955: PUSH
10956: LD_INT 1
10958: ARRAY
10959: PUSH
10960: LD_INT 1
10962: ARRAY
10963: PPUSH
10964: LD_EXP 30
10968: PUSH
10969: LD_INT 1
10971: ARRAY
10972: PUSH
10973: LD_INT 2
10975: ARRAY
10976: PPUSH
10977: LD_EXP 30
10981: PUSH
10982: LD_INT 1
10984: ARRAY
10985: PUSH
10986: LD_INT 3
10988: ARRAY
10989: PPUSH
10990: LD_EXP 30
10994: PUSH
10995: LD_INT 1
10997: ARRAY
10998: PUSH
10999: LD_INT 4
11001: ARRAY
11002: PPUSH
11003: CALL 49758 0 5
11007: AND
11008: IFFALSE 11071
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
11010: LD_VAR 0 1
11014: PPUSH
11015: LD_EXP 30
11019: PUSH
11020: LD_INT 1
11022: ARRAY
11023: PUSH
11024: LD_INT 1
11026: ARRAY
11027: PPUSH
11028: LD_EXP 30
11032: PUSH
11033: LD_INT 1
11035: ARRAY
11036: PUSH
11037: LD_INT 2
11039: ARRAY
11040: PPUSH
11041: LD_EXP 30
11045: PUSH
11046: LD_INT 1
11048: ARRAY
11049: PUSH
11050: LD_INT 3
11052: ARRAY
11053: PPUSH
11054: LD_EXP 30
11058: PUSH
11059: LD_INT 1
11061: ARRAY
11062: PUSH
11063: LD_INT 4
11065: ARRAY
11066: PPUSH
11067: CALL_OW 145
// end ; end ;
11071: GO 10593
11073: POP
11074: POP
// end ; end ;
11075: PPOPN 8
11077: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
11078: LD_INT 0
11080: PPUSH
11081: PPUSH
11082: PPUSH
11083: PPUSH
11084: PPUSH
11085: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
11086: LD_ADDR_VAR 0 3
11090: PUSH
11091: DOUBLE
11092: LD_INT 1
11094: DEC
11095: ST_TO_ADDR
11096: LD_INT 3
11098: PUSH
11099: LD_INT 4
11101: PUSH
11102: LD_INT 5
11104: PUSH
11105: LD_INT 6
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PUSH
11114: LD_OWVAR 67
11118: ARRAY
11119: PUSH
11120: LD_VAR 0 1
11124: PLUS
11125: PUSH
11126: FOR_TO
11127: IFFALSE 11382
// begin uc_side := 6 ;
11129: LD_ADDR_OWVAR 20
11133: PUSH
11134: LD_INT 6
11136: ST_TO_ADDR
// uc_nation := 3 ;
11137: LD_ADDR_OWVAR 21
11141: PUSH
11142: LD_INT 3
11144: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11145: LD_ADDR_VAR 0 6
11149: PUSH
11150: LD_INT 21
11152: PUSH
11153: LD_INT 22
11155: PUSH
11156: LD_INT 23
11158: PUSH
11159: LD_INT 24
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 1
11170: PPUSH
11171: LD_INT 4
11173: PPUSH
11174: CALL_OW 12
11178: ARRAY
11179: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11180: LD_ADDR_VAR 0 7
11184: PUSH
11185: LD_INT 42
11187: PUSH
11188: LD_INT 44
11190: PUSH
11191: LD_INT 43
11193: PUSH
11194: LD_INT 46
11196: PUSH
11197: LD_INT 45
11199: PUSH
11200: LD_INT 46
11202: PUSH
11203: LD_INT 45
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: PUSH
11215: LD_OWVAR 67
11219: PUSH
11220: LD_INT 0
11222: PPUSH
11223: LD_INT 3
11225: PPUSH
11226: CALL_OW 12
11230: PLUS
11231: ARRAY
11232: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11233: LD_VAR 0 6
11237: PUSH
11238: LD_INT 21
11240: PUSH
11241: LD_INT 22
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: IN
11248: PUSH
11249: LD_VAR 0 7
11253: PUSH
11254: LD_INT 46
11256: EQUAL
11257: AND
11258: IFFALSE 11287
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11260: LD_ADDR_VAR 0 7
11264: PUSH
11265: LD_INT 44
11267: PUSH
11268: LD_INT 45
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 1
11277: PPUSH
11278: LD_INT 2
11280: PPUSH
11281: CALL_OW 12
11285: ARRAY
11286: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
11287: LD_VAR 0 6
11291: PPUSH
11292: LD_INT 1
11294: PPUSH
11295: LD_INT 3
11297: PPUSH
11298: LD_VAR 0 7
11302: PPUSH
11303: LD_INT 90
11305: PPUSH
11306: CALL 41533 0 5
// un := CreateVehicle ;
11310: LD_ADDR_VAR 0 4
11314: PUSH
11315: CALL_OW 45
11319: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
11320: LD_VAR 0 4
11324: PPUSH
11325: LD_INT 140
11327: PPUSH
11328: LD_INT 146
11330: PPUSH
11331: LD_INT 0
11333: PPUSH
11334: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
11338: LD_VAR 0 4
11342: PPUSH
11343: LD_INT 131
11345: PPUSH
11346: LD_INT 128
11348: PPUSH
11349: CALL_OW 111
// wait ( 0 0$3 ) ;
11353: LD_INT 105
11355: PPUSH
11356: CALL_OW 67
// tmp := Join ( tmp , un ) ;
11360: LD_ADDR_VAR 0 5
11364: PUSH
11365: LD_VAR 0 5
11369: PPUSH
11370: LD_VAR 0 4
11374: PPUSH
11375: CALL 73350 0 2
11379: ST_TO_ADDR
// end ;
11380: GO 11126
11382: POP
11383: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
11384: LD_ADDR_EXP 31
11388: PUSH
11389: LD_EXP 31
11393: PPUSH
11394: LD_VAR 0 5
11398: PPUSH
11399: CALL 73387 0 2
11403: ST_TO_ADDR
// end ;
11404: LD_VAR 0 2
11408: RET
// every 0 0$2 trigger russianAttackers do
11409: LD_EXP 31
11413: IFFALSE 11474
11415: GO 11417
11417: DISABLE
// begin enable ;
11418: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] ] ) ;
11419: LD_EXP 31
11423: PPUSH
11424: LD_INT 126
11426: PUSH
11427: LD_INT 108
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: LD_INT 107
11436: PUSH
11437: LD_INT 85
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: LD_INT 82
11446: PUSH
11447: LD_INT 62
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 73
11456: PUSH
11457: LD_INT 46
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: PPUSH
11470: CALL 75946 0 2
// end ; end_of_file
11474: END
// on UnitDestroyed ( un ) do var tmp , chassis , weapon , btype ;
11475: LD_INT 0
11477: PPUSH
11478: PPUSH
11479: PPUSH
11480: PPUSH
// begin if un = JMM then
11481: LD_VAR 0 1
11485: PUSH
11486: LD_EXP 10
11490: EQUAL
11491: IFFALSE 11500
// YouLost ( JMM ) ;
11493: LD_STRING JMM
11495: PPUSH
11496: CALL_OW 104
// if GetSide ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
11500: LD_VAR 0 1
11504: PPUSH
11505: CALL_OW 255
11509: PUSH
11510: LD_INT 1
11512: EQUAL
11513: PUSH
11514: LD_VAR 0 1
11518: PPUSH
11519: CALL_OW 266
11523: PUSH
11524: LD_INT 0
11526: PUSH
11527: LD_INT 1
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: IN
11534: AND
11535: IFFALSE 11544
// YouLost ( Destroyed ) ;
11537: LD_STRING Destroyed
11539: PPUSH
11540: CALL_OW 104
// if un in ruMobile then
11544: LD_VAR 0 1
11548: PUSH
11549: LD_EXP 29
11553: IN
11554: IFFALSE 11572
// ruMobile := ruMobile diff un ;
11556: LD_ADDR_EXP 29
11560: PUSH
11561: LD_EXP 29
11565: PUSH
11566: LD_VAR 0 1
11570: DIFF
11571: ST_TO_ADDR
// if GetSide ( un ) = 3 then
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL_OW 255
11581: PUSH
11582: LD_INT 3
11584: EQUAL
11585: IFFALSE 12105
// begin if GetType ( un ) = unit_building then
11587: LD_VAR 0 1
11591: PPUSH
11592: CALL_OW 247
11596: PUSH
11597: LD_INT 3
11599: EQUAL
11600: IFFALSE 11736
// begin btype := GetBType ( un ) ;
11602: LD_ADDR_VAR 0 5
11606: PUSH
11607: LD_VAR 0 1
11611: PPUSH
11612: CALL_OW 266
11616: ST_TO_ADDR
// if btype = b_warehouse then
11617: LD_VAR 0 5
11621: PUSH
11622: LD_INT 1
11624: EQUAL
11625: IFFALSE 11635
// btype := b_depot ;
11627: LD_ADDR_VAR 0 5
11631: PUSH
11632: LD_INT 0
11634: ST_TO_ADDR
// if btype = b_barracks then
11635: LD_VAR 0 5
11639: PUSH
11640: LD_INT 5
11642: EQUAL
11643: IFFALSE 11653
// btype := b_armoury ;
11645: LD_ADDR_VAR 0 5
11649: PUSH
11650: LD_INT 4
11652: ST_TO_ADDR
// if btype = b_lab_full then
11653: LD_VAR 0 5
11657: PUSH
11658: LD_INT 8
11660: EQUAL
11661: IFFALSE 11671
// btype := b_lab ;
11663: LD_ADDR_VAR 0 5
11667: PUSH
11668: LD_INT 6
11670: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
11671: LD_ADDR_EXP 30
11675: PUSH
11676: LD_EXP 30
11680: PPUSH
11681: LD_EXP 30
11685: PUSH
11686: LD_INT 1
11688: PLUS
11689: PPUSH
11690: LD_VAR 0 5
11694: PUSH
11695: LD_VAR 0 1
11699: PPUSH
11700: CALL_OW 250
11704: PUSH
11705: LD_VAR 0 1
11709: PPUSH
11710: CALL_OW 251
11714: PUSH
11715: LD_VAR 0 1
11719: PPUSH
11720: CALL_OW 254
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: PPUSH
11731: CALL_OW 1
11735: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
11736: LD_VAR 0 1
11740: PPUSH
11741: CALL_OW 247
11745: PUSH
11746: LD_INT 2
11748: EQUAL
11749: IFFALSE 11966
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
11751: LD_VAR 0 1
11755: PPUSH
11756: CALL_OW 264
11760: PUSH
11761: LD_INT 52
11763: PUSH
11764: LD_INT 51
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: IN
11771: IFFALSE 11801
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
11773: LD_INT 29
11775: PPUSH
11776: LD_INT 22
11778: PPUSH
11779: LD_INT 1
11781: PPUSH
11782: LD_INT 3
11784: PPUSH
11785: LD_VAR 0 1
11789: PPUSH
11790: CALL_OW 264
11794: PPUSH
11795: CALL_OW 185
// end else
11799: GO 11966
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11801: LD_ADDR_VAR 0 3
11805: PUSH
11806: LD_INT 21
11808: PUSH
11809: LD_INT 22
11811: PUSH
11812: LD_INT 23
11814: PUSH
11815: LD_INT 24
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 1
11826: PPUSH
11827: LD_INT 4
11829: PPUSH
11830: CALL_OW 12
11834: ARRAY
11835: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11836: LD_ADDR_VAR 0 4
11840: PUSH
11841: LD_INT 42
11843: PUSH
11844: LD_INT 44
11846: PUSH
11847: LD_INT 43
11849: PUSH
11850: LD_INT 46
11852: PUSH
11853: LD_INT 45
11855: PUSH
11856: LD_INT 46
11858: PUSH
11859: LD_INT 45
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: PUSH
11871: LD_OWVAR 67
11875: PUSH
11876: LD_INT 0
11878: PPUSH
11879: LD_INT 3
11881: PPUSH
11882: CALL_OW 12
11886: PLUS
11887: ARRAY
11888: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11889: LD_VAR 0 3
11893: PUSH
11894: LD_INT 21
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: IN
11904: PUSH
11905: LD_VAR 0 4
11909: PUSH
11910: LD_INT 46
11912: EQUAL
11913: AND
11914: IFFALSE 11943
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11916: LD_ADDR_VAR 0 4
11920: PUSH
11921: LD_INT 44
11923: PUSH
11924: LD_INT 45
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 1
11933: PPUSH
11934: LD_INT 2
11936: PPUSH
11937: CALL_OW 12
11941: ARRAY
11942: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11943: LD_INT 29
11945: PPUSH
11946: LD_VAR 0 3
11950: PPUSH
11951: LD_INT 1
11953: PPUSH
11954: LD_INT 1
11956: PPUSH
11957: LD_VAR 0 4
11961: PPUSH
11962: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL_OW 257
11975: PUSH
11976: LD_INT 3
11978: EQUAL
11979: IFFALSE 12105
// begin if ruMechCounter = 0 or not IsOk ( ruFac ) then
11981: LD_EXP 28
11985: PUSH
11986: LD_INT 0
11988: EQUAL
11989: PUSH
11990: LD_INT 29
11992: PPUSH
11993: CALL_OW 302
11997: NOT
11998: OR
11999: IFFALSE 12003
// exit ;
12001: GO 12105
// ruMechCounter := Dec ( ruMechCounter ) ;
12003: LD_ADDR_EXP 28
12007: PUSH
12008: LD_EXP 28
12012: PPUSH
12013: CALL 74725 0 1
12017: ST_TO_ADDR
// uc_side := 3 ;
12018: LD_ADDR_OWVAR 20
12022: PUSH
12023: LD_INT 3
12025: ST_TO_ADDR
// uc_nation := 3 ;
12026: LD_ADDR_OWVAR 21
12030: PUSH
12031: LD_INT 3
12033: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
12034: LD_INT 0
12036: PPUSH
12037: LD_INT 6
12039: PUSH
12040: LD_INT 7
12042: PUSH
12043: LD_INT 8
12045: PUSH
12046: LD_INT 9
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: PUSH
12055: LD_OWVAR 67
12059: ARRAY
12060: PPUSH
12061: CALL_OW 383
// tmp := CreateHuman ;
12065: LD_ADDR_VAR 0 2
12069: PUSH
12070: CALL_OW 44
12074: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
12075: LD_VAR 0 2
12079: PPUSH
12080: LD_INT 145
12082: PPUSH
12083: LD_INT 133
12085: PPUSH
12086: LD_INT 0
12088: PPUSH
12089: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
12093: LD_VAR 0 2
12097: PPUSH
12098: LD_INT 29
12100: PPUSH
12101: CALL_OW 120
// end ; end ; end ;
12105: PPOPN 5
12107: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
12108: LD_VAR 0 1
12112: PPUSH
12113: CALL_OW 255
12117: PUSH
12118: LD_INT 4
12120: EQUAL
12121: IFFALSE 12138
// ComMoveXY ( driver , 40 , 47 ) ;
12123: LD_VAR 0 1
12127: PPUSH
12128: LD_INT 40
12130: PPUSH
12131: LD_INT 47
12133: PPUSH
12134: CALL_OW 111
// if GetSide ( driver ) = 3 then
12138: LD_VAR 0 1
12142: PPUSH
12143: CALL_OW 255
12147: PUSH
12148: LD_INT 3
12150: EQUAL
12151: IFFALSE 12375
// begin ComMoveXY ( driver , 90 , 97 ) ;
12153: LD_VAR 0 1
12157: PPUSH
12158: LD_INT 90
12160: PPUSH
12161: LD_INT 97
12163: PPUSH
12164: CALL_OW 111
// if IsOk ( ruFac ) then
12168: LD_INT 29
12170: PPUSH
12171: CALL_OW 302
12175: IFFALSE 12299
// begin repeat wait ( 0 0$1 ) ;
12177: LD_INT 35
12179: PPUSH
12180: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
12184: LD_INT 29
12186: PPUSH
12187: CALL_OW 313
12191: PUSH
12192: LD_INT 6
12194: LESS
12195: PUSH
12196: LD_VAR 0 1
12200: PPUSH
12201: CALL_OW 301
12205: OR
12206: IFFALSE 12177
// if IsDead ( driver ) then
12208: LD_VAR 0 1
12212: PPUSH
12213: CALL_OW 301
12217: IFFALSE 12221
// exit ;
12219: GO 12375
// repeat wait ( 0 0$10 ) ;
12221: LD_INT 350
12223: PPUSH
12224: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
12228: LD_VAR 0 1
12232: PPUSH
12233: CALL_OW 314
12237: NOT
12238: PUSH
12239: LD_INT 29
12241: PPUSH
12242: CALL_OW 313
12246: PUSH
12247: LD_INT 6
12249: LESS
12250: AND
12251: IFFALSE 12265
// ComEnterUnit ( driver , ruFac ) ;
12253: LD_VAR 0 1
12257: PPUSH
12258: LD_INT 29
12260: PPUSH
12261: CALL_OW 120
// until not IsOk ( ruFac ) or IsDead ( driver ) or IsInUnit ( driver ) ;
12265: LD_INT 29
12267: PPUSH
12268: CALL_OW 302
12272: NOT
12273: PUSH
12274: LD_VAR 0 1
12278: PPUSH
12279: CALL_OW 301
12283: OR
12284: PUSH
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 310
12294: OR
12295: IFFALSE 12221
// end else
12297: GO 12375
// begin ComMoveXY ( driver , 142 , 148 ) ;
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_INT 142
12306: PPUSH
12307: LD_INT 148
12309: PPUSH
12310: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12314: LD_INT 35
12316: PPUSH
12317: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
12321: LD_VAR 0 1
12325: PPUSH
12326: CALL_OW 301
12330: PUSH
12331: LD_VAR 0 1
12335: PPUSH
12336: LD_INT 142
12338: PPUSH
12339: LD_INT 148
12341: PPUSH
12342: CALL_OW 307
12346: OR
12347: IFFALSE 12314
// if IsAt ( driver , 142 , 148 ) then
12349: LD_VAR 0 1
12353: PPUSH
12354: LD_INT 142
12356: PPUSH
12357: LD_INT 148
12359: PPUSH
12360: CALL_OW 307
12364: IFFALSE 12375
// RemoveUnit ( driver ) ;
12366: LD_VAR 0 1
12370: PPUSH
12371: CALL_OW 64
// end ; end ; end ;
12375: PPOPN 4
12377: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
12378: LD_VAR 0 2
12382: PPUSH
12383: CALL_OW 257
12387: PUSH
12388: LD_INT 3
12390: EQUAL
12391: PUSH
12392: LD_VAR 0 1
12396: PPUSH
12397: CALL_OW 255
12401: PUSH
12402: LD_INT 3
12404: EQUAL
12405: AND
12406: PUSH
12407: LD_VAR 0 1
12411: PUSH
12412: LD_INT 29
12414: EQUAL
12415: AND
12416: IFFALSE 12430
// SetLives ( un , 1000 ) ;
12418: LD_VAR 0 2
12422: PPUSH
12423: LD_INT 1000
12425: PPUSH
12426: CALL_OW 234
// end ;
12430: PPOPN 2
12432: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
12433: LD_INT 0
12435: PPUSH
12436: PPUSH
// begin if GetSide ( b ) = 3 then
12437: LD_VAR 0 1
12441: PPUSH
12442: CALL_OW 255
12446: PUSH
12447: LD_INT 3
12449: EQUAL
12450: IFFALSE 12589
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
12452: LD_VAR 0 1
12456: PPUSH
12457: CALL_OW 266
12461: PUSH
12462: LD_INT 32
12464: PUSH
12465: LD_INT 5
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: IN
12472: IFFALSE 12589
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) ;
12474: LD_ADDR_VAR 0 4
12478: PUSH
12479: LD_INT 22
12481: PUSH
12482: LD_INT 3
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: LD_INT 50
12491: PUSH
12492: EMPTY
12493: LIST
12494: PUSH
12495: LD_INT 30
12497: PUSH
12498: LD_INT 5
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: PPUSH
12510: CALL_OW 69
12514: ST_TO_ADDR
// if not tmp then
12515: LD_VAR 0 4
12519: NOT
12520: IFFALSE 12539
// begin ComMoveXY ( un , 92 , 99 ) ;
12522: LD_VAR 0 2
12526: PPUSH
12527: LD_INT 92
12529: PPUSH
12530: LD_INT 99
12532: PPUSH
12533: CALL_OW 111
// exit ;
12537: GO 12589
// end ; for i in tmp do
12539: LD_ADDR_VAR 0 3
12543: PUSH
12544: LD_VAR 0 4
12548: PUSH
12549: FOR_IN
12550: IFFALSE 12587
// if UnitsInside ( i ) < 6 then
12552: LD_VAR 0 3
12556: PPUSH
12557: CALL_OW 313
12561: PUSH
12562: LD_INT 6
12564: LESS
12565: IFFALSE 12585
// begin ComEnterUnit ( un , i ) ;
12567: LD_VAR 0 2
12571: PPUSH
12572: LD_VAR 0 3
12576: PPUSH
12577: CALL_OW 120
// exit ;
12581: POP
12582: POP
12583: GO 12589
// end ;
12585: GO 12549
12587: POP
12588: POP
// end ; end ; end ;
12589: PPOPN 4
12591: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
12592: LD_VAR 0 1
12596: PPUSH
12597: CALL_OW 255
12601: PUSH
12602: LD_INT 3
12604: PUSH
12605: LD_INT 6
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: IN
12612: PUSH
12613: LD_VAR 0 1
12617: PPUSH
12618: CALL_OW 263
12622: PUSH
12623: LD_INT 3
12625: EQUAL
12626: AND
12627: PUSH
12628: LD_EXP 6
12632: NOT
12633: AND
12634: IFFALSE 12653
// begin DialogSeenComputer ( un ) ;
12636: LD_VAR 0 1
12640: PPUSH
12641: CALL 15382 0 1
// seenComputer := true ;
12645: LD_ADDR_EXP 6
12649: PUSH
12650: LD_INT 1
12652: ST_TO_ADDR
// end ; end ;
12653: PPOPN 1
12655: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
12656: LD_INT 0
12658: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
12659: LD_VAR 0 1
12663: PPUSH
12664: LD_VAR 0 2
12668: PPUSH
12669: CALL 32151 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
12673: LD_VAR 0 1
12677: PPUSH
12678: CALL_OW 255
12682: PUSH
12683: LD_INT 3
12685: EQUAL
12686: PUSH
12687: LD_VAR 0 1
12691: PPUSH
12692: CALL_OW 263
12696: PUSH
12697: LD_INT 1
12699: EQUAL
12700: AND
12701: PUSH
12702: LD_VAR 0 1
12706: PPUSH
12707: CALL_OW 264
12711: PUSH
12712: LD_INT 42
12714: PUSH
12715: LD_INT 43
12717: PUSH
12718: LD_INT 44
12720: PUSH
12721: LD_INT 46
12723: PUSH
12724: LD_INT 45
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: IN
12734: AND
12735: IFFALSE 12753
// ruMobile := ruMobile union vehicle ;
12737: LD_ADDR_EXP 29
12741: PUSH
12742: LD_EXP 29
12746: PUSH
12747: LD_VAR 0 1
12751: UNION
12752: ST_TO_ADDR
// end ;
12753: PPOPN 3
12755: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
12756: LD_INT 0
12758: PPUSH
// begin if InArea ( x , y , ruCrates ) then
12759: LD_VAR 0 2
12763: PPUSH
12764: LD_VAR 0 3
12768: PPUSH
12769: LD_INT 13
12771: PPUSH
12772: CALL_OW 309
12776: IFFALSE 12847
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
12778: LD_ADDR_VAR 0 6
12782: PUSH
12783: LD_INT 22
12785: PUSH
12786: LD_INT 3
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 50
12795: PUSH
12796: EMPTY
12797: LIST
12798: PUSH
12799: LD_INT 34
12801: PUSH
12802: LD_INT 51
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: PPUSH
12814: CALL_OW 69
12818: ST_TO_ADDR
// if not cargo then
12819: LD_VAR 0 6
12823: NOT
12824: IFFALSE 12828
// exit ;
12826: GO 12847
// AddComCollect ( cargo , x , y ) ;
12828: LD_VAR 0 6
12832: PPUSH
12833: LD_VAR 0 2
12837: PPUSH
12838: LD_VAR 0 3
12842: PPUSH
12843: CALL_OW 177
// end ; end ;
12847: PPOPN 6
12849: END
// on BuildingComplete ( b ) do var i , tmp ;
12850: LD_INT 0
12852: PPUSH
12853: PPUSH
// begin if GetSide ( b ) = 3 then
12854: LD_VAR 0 1
12858: PPUSH
12859: CALL_OW 255
12863: PUSH
12864: LD_INT 3
12866: EQUAL
12867: IFFALSE 13082
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
12869: LD_ADDR_EXP 30
12873: PUSH
12874: LD_EXP 30
12878: PPUSH
12879: LD_INT 1
12881: PPUSH
12882: CALL_OW 3
12886: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
12887: LD_VAR 0 1
12891: PPUSH
12892: CALL_OW 266
12896: PUSH
12897: LD_INT 32
12899: PUSH
12900: LD_INT 33
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: IN
12907: IFFALSE 13082
// begin AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
12909: LD_VAR 0 1
12913: PPUSH
12914: LD_INT 46
12916: PUSH
12917: LD_INT 45
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: LD_INT 1
12926: PPUSH
12927: LD_INT 2
12929: PPUSH
12930: CALL_OW 12
12934: ARRAY
12935: PPUSH
12936: CALL_OW 208
// if GetBType ( b ) = b_bunker then
12940: LD_VAR 0 1
12944: PPUSH
12945: CALL_OW 266
12949: PUSH
12950: LD_INT 32
12952: EQUAL
12953: IFFALSE 13082
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_tag , 0 ] ] ) ;
12955: LD_ADDR_VAR 0 3
12959: PUSH
12960: LD_INT 22
12962: PUSH
12963: LD_INT 3
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 25
12972: PUSH
12973: LD_INT 1
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 120
12982: PUSH
12983: LD_INT 0
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: LIST
12994: PPUSH
12995: CALL_OW 69
12999: ST_TO_ADDR
// if tmp then
13000: LD_VAR 0 3
13004: IFFALSE 13082
// for i in tmp do
13006: LD_ADDR_VAR 0 2
13010: PUSH
13011: LD_VAR 0 3
13015: PUSH
13016: FOR_IN
13017: IFFALSE 13080
// if not IsInUnit ( i ) or GetBType ( IsInUnit ( i ) ) <> b_bunker then
13019: LD_VAR 0 2
13023: PPUSH
13024: CALL_OW 310
13028: NOT
13029: PUSH
13030: LD_VAR 0 2
13034: PPUSH
13035: CALL_OW 310
13039: PPUSH
13040: CALL_OW 266
13044: PUSH
13045: LD_INT 32
13047: NONEQUAL
13048: OR
13049: IFFALSE 13078
// begin ComExit ( i ) ;
13051: LD_VAR 0 2
13055: PPUSH
13056: CALL 73738 0 1
// AddComEnterUnit ( i , b ) ;
13060: LD_VAR 0 2
13064: PPUSH
13065: LD_VAR 0 1
13069: PPUSH
13070: CALL_OW 180
// exit ;
13074: POP
13075: POP
13076: GO 13082
// end ;
13078: GO 13016
13080: POP
13081: POP
// end ; end ; end ; end ; end_of_file
13082: PPOPN 3
13084: END
// export function Action ; var i , tmp , un , inUnit ; begin
13085: LD_INT 0
13087: PPUSH
13088: PPUSH
13089: PPUSH
13090: PPUSH
13091: PPUSH
// Video ( true ) ;
13092: LD_INT 1
13094: PPUSH
13095: CALL 73322 0 1
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
13099: LD_INT 50
13101: PPUSH
13102: LD_INT 12
13104: PPUSH
13105: LD_INT 1
13107: PPUSH
13108: LD_INT 56
13110: NEG
13111: PPUSH
13112: CALL 73236 0 4
// CenterOnXY ( 50 , 12 ) ;
13116: LD_INT 50
13118: PPUSH
13119: LD_INT 12
13121: PPUSH
13122: CALL_OW 84
// wait ( 0 0$3 ) ;
13126: LD_INT 105
13128: PPUSH
13129: CALL_OW 67
// PrepareStartRussianAttack ;
13133: CALL 8927 0 0
// CenterOnXY ( 66 , 47 ) ;
13137: LD_INT 66
13139: PPUSH
13140: LD_INT 47
13142: PPUSH
13143: CALL_OW 84
// wait ( 0 0$5 ) ;
13147: LD_INT 175
13149: PPUSH
13150: CALL_OW 67
// case gammaCommander of 1 :
13154: LD_EXP 9
13158: PUSH
13159: LD_INT 1
13161: DOUBLE
13162: EQUAL
13163: IFTRUE 13167
13165: GO 13182
13167: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
13168: LD_EXP 12
13172: PPUSH
13173: LD_STRING D1-Don-1
13175: PPUSH
13176: CALL_OW 88
13180: GO 13229
13182: LD_INT 2
13184: DOUBLE
13185: EQUAL
13186: IFTRUE 13190
13188: GO 13205
13190: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
13191: LD_EXP 11
13195: PPUSH
13196: LD_STRING D1-Brown-1
13198: PPUSH
13199: CALL_OW 88
13203: GO 13229
13205: LD_INT 3
13207: DOUBLE
13208: EQUAL
13209: IFTRUE 13213
13211: GO 13228
13213: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
13214: LD_EXP 20
13218: PPUSH
13219: LD_STRING D1-VanH-1
13221: PPUSH
13222: CALL_OW 88
13226: GO 13229
13228: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
13229: LD_ADDR_VAR 0 3
13233: PUSH
13234: LD_INT 22
13236: PUSH
13237: LD_INT 1
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: LD_INT 33
13246: PUSH
13247: LD_INT 2
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 61
13256: PUSH
13257: EMPTY
13258: LIST
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
// if tmp then
13270: LD_VAR 0 3
13274: IFFALSE 13291
// ComAgressiveMove ( tmp , 74 , 44 ) ;
13276: LD_VAR 0 3
13280: PPUSH
13281: LD_INT 74
13283: PPUSH
13284: LD_INT 44
13286: PPUSH
13287: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
13291: LD_ADDR_VAR 0 3
13295: PUSH
13296: LD_INT 22
13298: PUSH
13299: LD_INT 1
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: LD_INT 25
13308: PUSH
13309: LD_INT 1
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PPUSH
13320: CALL_OW 69
13324: PUSH
13325: LD_EXP 12
13329: PUSH
13330: LD_EXP 11
13334: PUSH
13335: LD_EXP 20
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: LIST
13344: DIFF
13345: ST_TO_ADDR
// if tmp then
13346: LD_VAR 0 3
13350: IFFALSE 13428
// for i in tmp do
13352: LD_ADDR_VAR 0 2
13356: PUSH
13357: LD_VAR 0 3
13361: PUSH
13362: FOR_IN
13363: IFFALSE 13426
// begin inUnit := IsInUnit ( i ) ;
13365: LD_ADDR_VAR 0 5
13369: PUSH
13370: LD_VAR 0 2
13374: PPUSH
13375: CALL_OW 310
13379: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
13380: LD_VAR 0 5
13384: PUSH
13385: LD_VAR 0 5
13389: PPUSH
13390: CALL_OW 266
13394: PUSH
13395: LD_INT 32
13397: PUSH
13398: LD_INT 31
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: IN
13405: AND
13406: IFFALSE 13424
// tmp := tmp diff i ;
13408: LD_ADDR_VAR 0 3
13412: PUSH
13413: LD_VAR 0 3
13417: PUSH
13418: LD_VAR 0 2
13422: DIFF
13423: ST_TO_ADDR
// end ;
13424: GO 13362
13426: POP
13427: POP
// if tmp then
13428: LD_VAR 0 3
13432: IFFALSE 13522
// begin ComExitAll ( tmp ) ;
13434: LD_VAR 0 3
13438: PPUSH
13439: CALL 73821 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
13443: LD_VAR 0 3
13447: PPUSH
13448: LD_INT 74
13450: PPUSH
13451: LD_INT 44
13453: PPUSH
13454: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
13458: LD_ADDR_VAR 0 3
13462: PUSH
13463: LD_INT 22
13465: PUSH
13466: LD_INT 1
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 25
13475: PUSH
13476: LD_INT 4
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PPUSH
13487: CALL_OW 69
13491: ST_TO_ADDR
// if tmp then
13492: LD_VAR 0 3
13496: IFFALSE 13522
// begin ComExitAll ( tmp ) ;
13498: LD_VAR 0 3
13502: PPUSH
13503: CALL 73821 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
13507: LD_VAR 0 3
13511: PPUSH
13512: LD_INT 66
13514: PPUSH
13515: LD_INT 28
13517: PPUSH
13518: CALL_OW 171
// end ; end ; game_speed := 4 ;
13522: LD_ADDR_OWVAR 65
13526: PUSH
13527: LD_INT 4
13529: ST_TO_ADDR
// wait ( 0 0$2 ) ;
13530: LD_INT 70
13532: PPUSH
13533: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
13537: LD_EXP 24
13541: PPUSH
13542: LD_STRING D1-Har-1
13544: PPUSH
13545: CALL_OW 94
// case gammaCommander of 1 :
13549: LD_EXP 9
13553: PUSH
13554: LD_INT 1
13556: DOUBLE
13557: EQUAL
13558: IFTRUE 13562
13560: GO 13577
13562: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
13563: LD_EXP 12
13567: PPUSH
13568: LD_STRING D1-Don-2
13570: PPUSH
13571: CALL_OW 88
13575: GO 13624
13577: LD_INT 2
13579: DOUBLE
13580: EQUAL
13581: IFTRUE 13585
13583: GO 13600
13585: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
13586: LD_EXP 11
13590: PPUSH
13591: LD_STRING D1-Brown-2
13593: PPUSH
13594: CALL_OW 88
13598: GO 13624
13600: LD_INT 3
13602: DOUBLE
13603: EQUAL
13604: IFTRUE 13608
13606: GO 13623
13608: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
13609: LD_EXP 20
13613: PPUSH
13614: LD_STRING D1-VanH-2
13616: PPUSH
13617: CALL_OW 88
13621: GO 13624
13623: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
13624: LD_EXP 24
13628: PPUSH
13629: LD_STRING D1-Har-2
13631: PPUSH
13632: CALL_OW 94
// Video ( false ) ;
13636: LD_INT 0
13638: PPUSH
13639: CALL 73322 0 1
// ChangeMissionObjectives ( M1 ) ;
13643: LD_STRING M1
13645: PPUSH
13646: CALL_OW 337
// SaveForQuickRestart ;
13650: CALL_OW 22
// wait ( 2 2$30 ) ;
13654: LD_INT 5250
13656: PPUSH
13657: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
13661: LD_INT 1
13663: PPUSH
13664: CALL 11078 0 1
// wait ( 4 4$30 ) ;
13668: LD_INT 9450
13670: PPUSH
13671: CALL_OW 67
// if Difficulty > 2 then
13675: LD_OWVAR 67
13679: PUSH
13680: LD_INT 2
13682: GREATER
13683: IFFALSE 13692
// PrepareRussianAttack ( 2 ) ;
13685: LD_INT 2
13687: PPUSH
13688: CALL 11078 0 1
// if Difficulty > 3 then
13692: LD_OWVAR 67
13696: PUSH
13697: LD_INT 3
13699: GREATER
13700: IFFALSE 13859
// begin for i := 1 to 4 do
13702: LD_ADDR_VAR 0 2
13706: PUSH
13707: DOUBLE
13708: LD_INT 1
13710: DEC
13711: ST_TO_ADDR
13712: LD_INT 4
13714: PUSH
13715: FOR_TO
13716: IFFALSE 13801
// begin uc_side := 6 ;
13718: LD_ADDR_OWVAR 20
13722: PUSH
13723: LD_INT 6
13725: ST_TO_ADDR
// uc_nation := 3 ;
13726: LD_ADDR_OWVAR 21
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// PrepareSoldier ( false , 6 ) ;
13734: LD_INT 0
13736: PPUSH
13737: LD_INT 6
13739: PPUSH
13740: CALL_OW 381
// un := CreateHuman ;
13744: LD_ADDR_VAR 0 4
13748: PUSH
13749: CALL_OW 44
13753: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
13754: LD_VAR 0 4
13758: PPUSH
13759: LD_INT 122
13761: PPUSH
13762: LD_INT 89
13764: PPUSH
13765: LD_INT 3
13767: PPUSH
13768: LD_INT 0
13770: PPUSH
13771: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
13775: LD_VAR 0 4
13779: PPUSH
13780: LD_INT 88
13782: PPUSH
13783: LD_INT 42
13785: PPUSH
13786: CALL_OW 114
// AddComHold ( un ) ;
13790: LD_VAR 0 4
13794: PPUSH
13795: CALL_OW 200
// end ;
13799: GO 13715
13801: POP
13802: POP
// PrepareScientist ( false , 6 ) ;
13803: LD_INT 0
13805: PPUSH
13806: LD_INT 6
13808: PPUSH
13809: CALL_OW 384
// un := CreateHuman ;
13813: LD_ADDR_VAR 0 4
13817: PUSH
13818: CALL_OW 44
13822: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
13823: LD_VAR 0 4
13827: PPUSH
13828: LD_INT 122
13830: PPUSH
13831: LD_INT 89
13833: PPUSH
13834: LD_INT 3
13836: PPUSH
13837: LD_INT 0
13839: PPUSH
13840: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
13844: LD_VAR 0 4
13848: PPUSH
13849: LD_INT 91
13851: PPUSH
13852: LD_INT 48
13854: PPUSH
13855: CALL_OW 111
// end ; end ;
13859: LD_VAR 0 1
13863: RET
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 3 ] ] ) = 0 and tick > 5 5$00 do var dialog ;
13864: LD_INT 22
13866: PUSH
13867: LD_INT 1
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: LD_INT 101
13876: PUSH
13877: LD_INT 3
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PPUSH
13888: CALL_OW 69
13892: PUSH
13893: LD_INT 0
13895: EQUAL
13896: PUSH
13897: LD_OWVAR 1
13901: PUSH
13902: LD_INT 10500
13904: GREATER
13905: AND
13906: IFFALSE 15379
13908: GO 13910
13910: DISABLE
13911: LD_INT 0
13913: PPUSH
// begin PrepareSupportFromDelta ;
13914: CALL 3968 0 0
// deltaSupport := true ;
13918: LD_ADDR_EXP 5
13922: PUSH
13923: LD_INT 1
13925: ST_TO_ADDR
// dialog := false ;
13926: LD_ADDR_VAR 0 1
13930: PUSH
13931: LD_INT 0
13933: ST_TO_ADDR
// if IsOk ( Gladstone ) then
13934: LD_EXP 17
13938: PPUSH
13939: CALL_OW 302
13943: IFFALSE 13965
// dialog := Say ( Gladstone , D2-Glad-1 ) else
13945: LD_ADDR_VAR 0 1
13949: PUSH
13950: LD_EXP 17
13954: PPUSH
13955: LD_STRING D2-Glad-1
13957: PPUSH
13958: CALL_OW 88
13962: ST_TO_ADDR
13963: GO 14047
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
13965: LD_ADDR_VAR 0 1
13969: PUSH
13970: LD_INT 22
13972: PUSH
13973: LD_INT 1
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PUSH
13980: LD_INT 120
13982: PUSH
13983: LD_INT 107
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PUSH
13990: LD_INT 21
13992: PUSH
13993: LD_INT 1
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 23
14002: PUSH
14003: LD_INT 1
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: PPUSH
14016: CALL_OW 69
14020: PUSH
14021: LD_EXP 22
14025: PUSH
14026: LD_EXP 21
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: DIFF
14035: PPUSH
14036: LD_STRING D2-Sol1-1
14038: PPUSH
14039: LD_STRING D2-FSol1-1
14041: PPUSH
14042: CALL 17376 0 3
14046: ST_TO_ADDR
// if dialog then
14047: LD_VAR 0 1
14051: IFFALSE 14152
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
14053: LD_EXP 12
14057: PPUSH
14058: CALL_OW 302
14062: PUSH
14063: LD_EXP 9
14067: PUSH
14068: LD_INT 1
14070: EQUAL
14071: AND
14072: IFFALSE 14086
// Say ( Donaldson , D2-Don-1 ) ;
14074: LD_EXP 12
14078: PPUSH
14079: LD_STRING D2-Don-1
14081: PPUSH
14082: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
14086: LD_EXP 11
14090: PPUSH
14091: CALL_OW 302
14095: PUSH
14096: LD_EXP 9
14100: PUSH
14101: LD_INT 2
14103: EQUAL
14104: AND
14105: IFFALSE 14119
// Say ( Brown , D2-Brown-1 ) ;
14107: LD_EXP 11
14111: PPUSH
14112: LD_STRING D2-Brown-1
14114: PPUSH
14115: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
14119: LD_EXP 20
14123: PPUSH
14124: CALL_OW 302
14128: PUSH
14129: LD_EXP 9
14133: PUSH
14134: LD_INT 3
14136: EQUAL
14137: AND
14138: IFFALSE 14152
// Say ( Houten , D2-VanH-1 ) ;
14140: LD_EXP 20
14144: PPUSH
14145: LD_STRING D2-VanH-1
14147: PPUSH
14148: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
14152: LD_INT 3
14154: PPUSH
14155: CALL 11078 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
14159: LD_STRING 07_time
14161: PPUSH
14162: LD_INT 18900
14164: PPUSH
14165: CALL_OW 30
14169: PUSH
14170: LD_INT 3
14172: DIV
14173: PPUSH
14174: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
14178: LD_INT 34
14180: PPUSH
14181: LD_INT 1
14183: PPUSH
14184: CALL_OW 321
14188: PUSH
14189: LD_INT 2
14191: EQUAL
14192: IFFALSE 14201
// SetAchievement ( ACH_HEAVYGUN ) ;
14194: LD_STRING ACH_HEAVYGUN
14196: PPUSH
14197: CALL_OW 543
// PrepareMacmillanSquad ;
14201: CALL 4705 0 0
// CenterNowOnUnits ( JMM ) ;
14205: LD_EXP 10
14209: PPUSH
14210: CALL_OW 87
// wait ( 0 0$10 ) ;
14214: LD_INT 350
14216: PPUSH
14217: CALL_OW 67
// PrepareRussianAttack ( Difficulty + 2 ) ;
14221: LD_OWVAR 67
14225: PUSH
14226: LD_INT 2
14228: PLUS
14229: PPUSH
14230: CALL 11078 0 1
// repeat wait ( 0 0$1 ) ;
14234: LD_INT 35
14236: PPUSH
14237: CALL_OW 67
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) ;
14241: LD_EXP 10
14245: PPUSH
14246: LD_INT 15
14248: PPUSH
14249: CALL_OW 308
14253: PUSH
14254: LD_EXP 10
14258: PPUSH
14259: CALL_OW 310
14263: PPUSH
14264: LD_INT 15
14266: PPUSH
14267: CALL_OW 308
14271: OR
14272: IFFALSE 14234
// DialogueOn ;
14274: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
14278: LD_EXP 10
14282: PPUSH
14283: LD_STRING D3-JMM-1
14285: PPUSH
14286: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
14290: LD_EXP 12
14294: PPUSH
14295: CALL_OW 302
14299: PUSH
14300: LD_EXP 9
14304: PUSH
14305: LD_INT 1
14307: EQUAL
14308: AND
14309: IFFALSE 14325
// Say ( Donaldson , D3-Don-1 ) else
14311: LD_EXP 12
14315: PPUSH
14316: LD_STRING D3-Don-1
14318: PPUSH
14319: CALL_OW 88
14323: GO 14421
// begin if gammaCommander = 1 then
14325: LD_EXP 9
14329: PUSH
14330: LD_INT 1
14332: EQUAL
14333: IFFALSE 14421
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
14335: LD_INT 22
14337: PUSH
14338: LD_INT 1
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 21
14347: PUSH
14348: LD_INT 1
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: LD_INT 23
14357: PUSH
14358: LD_INT 1
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 120
14367: PUSH
14368: LD_INT 106
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: LD_INT 26
14377: PUSH
14378: LD_INT 1
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: PPUSH
14392: CALL_OW 69
14396: PPUSH
14397: LD_STRING D3-Sol1-1
14399: PPUSH
14400: LD_STRING 
14402: PPUSH
14403: CALL 17376 0 3
14407: IFFALSE 14421
// Say ( JMM , D3-JMM-2 ) ;
14409: LD_EXP 10
14413: PPUSH
14414: LD_STRING D3-JMM-2
14416: PPUSH
14417: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
14421: LD_EXP 11
14425: PPUSH
14426: CALL_OW 302
14430: PUSH
14431: LD_EXP 9
14435: PUSH
14436: LD_INT 2
14438: EQUAL
14439: AND
14440: IFFALSE 14456
// Say ( Brown , D3-Brown-1 ) else
14442: LD_EXP 11
14446: PPUSH
14447: LD_STRING D3-Brown-1
14449: PPUSH
14450: CALL_OW 88
14454: GO 14552
// begin if gammaCommander = 2 then
14456: LD_EXP 9
14460: PUSH
14461: LD_INT 2
14463: EQUAL
14464: IFFALSE 14552
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
14466: LD_INT 22
14468: PUSH
14469: LD_INT 1
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: LD_INT 21
14478: PUSH
14479: LD_INT 1
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PUSH
14486: LD_INT 23
14488: PUSH
14489: LD_INT 1
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: LD_INT 120
14498: PUSH
14499: LD_INT 106
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 26
14508: PUSH
14509: LD_INT 1
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 69
14527: PPUSH
14528: LD_STRING D3-Sol1-1a
14530: PPUSH
14531: LD_STRING 
14533: PPUSH
14534: CALL 17376 0 3
14538: IFFALSE 14552
// Say ( JMM , D3-JMM-2 ) ;
14540: LD_EXP 10
14544: PPUSH
14545: LD_STRING D3-JMM-2
14547: PPUSH
14548: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
14552: LD_EXP 20
14556: PPUSH
14557: CALL_OW 302
14561: PUSH
14562: LD_EXP 9
14566: PUSH
14567: LD_INT 3
14569: EQUAL
14570: AND
14571: IFFALSE 14587
// Say ( Houten , D3-VanH-1 ) else
14573: LD_EXP 20
14577: PPUSH
14578: LD_STRING D3-VanH-1
14580: PPUSH
14581: CALL_OW 88
14585: GO 14683
// begin if gammaCommander = 3 then
14587: LD_EXP 9
14591: PUSH
14592: LD_INT 3
14594: EQUAL
14595: IFFALSE 14683
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
14597: LD_INT 22
14599: PUSH
14600: LD_INT 1
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: LD_INT 21
14609: PUSH
14610: LD_INT 1
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: PUSH
14617: LD_INT 23
14619: PUSH
14620: LD_INT 1
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: LD_INT 120
14629: PUSH
14630: LD_INT 106
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: LD_INT 26
14639: PUSH
14640: LD_INT 1
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: PPUSH
14654: CALL_OW 69
14658: PPUSH
14659: LD_STRING D3-Sol1-1b
14661: PPUSH
14662: LD_STRING 
14664: PPUSH
14665: CALL 17376 0 3
14669: IFFALSE 14683
// Say ( JMM , D3-JMM-2 ) ;
14671: LD_EXP 10
14675: PPUSH
14676: LD_STRING D3-JMM-2
14678: PPUSH
14679: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
14683: LD_EXP 22
14687: PPUSH
14688: CALL_OW 302
14692: IFFALSE 14720
// begin Say ( Joan , D3a-Joan-1 ) ;
14694: LD_EXP 22
14698: PPUSH
14699: LD_STRING D3a-Joan-1
14701: PPUSH
14702: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
14706: LD_EXP 10
14710: PPUSH
14711: LD_STRING D3a-JMM-1
14713: PPUSH
14714: CALL_OW 88
// end else
14718: GO 15154
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
14720: LD_STRING 06_JoanStatus_1
14722: PPUSH
14723: LD_INT 0
14725: PPUSH
14726: CALL_OW 30
14730: PUSH
14731: LD_INT 1
14733: EQUAL
14734: IFFALSE 15154
// begin Say ( JMM , D3b-JMM-1 ) ;
14736: LD_EXP 10
14740: PPUSH
14741: LD_STRING D3b-JMM-1
14743: PPUSH
14744: CALL_OW 88
// dialog := false ;
14748: LD_ADDR_VAR 0 1
14752: PUSH
14753: LD_INT 0
14755: ST_TO_ADDR
// if gammaCommander = 1 then
14756: LD_EXP 9
14760: PUSH
14761: LD_INT 1
14763: EQUAL
14764: IFFALSE 14875
// if IsOK ( Donaldson ) then
14766: LD_EXP 12
14770: PPUSH
14771: CALL_OW 302
14775: IFFALSE 14797
// dialog := Say ( Donaldson , D3b-Don-1 ) else
14777: LD_ADDR_VAR 0 1
14781: PUSH
14782: LD_EXP 12
14786: PPUSH
14787: LD_STRING D3b-Don-1
14789: PPUSH
14790: CALL_OW 88
14794: ST_TO_ADDR
14795: GO 14875
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
14797: LD_ADDR_VAR 0 1
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_INT 1
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 21
14814: PUSH
14815: LD_INT 1
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 23
14824: PUSH
14825: LD_INT 1
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 120
14834: PUSH
14835: LD_INT 106
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: LD_INT 26
14844: PUSH
14845: LD_INT 1
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: PPUSH
14859: CALL_OW 69
14863: PPUSH
14864: LD_STRING D3b-Sol1-1
14866: PPUSH
14867: LD_STRING 
14869: PPUSH
14870: CALL 17376 0 3
14874: ST_TO_ADDR
// if gammaCommander = 2 then
14875: LD_EXP 9
14879: PUSH
14880: LD_INT 2
14882: EQUAL
14883: IFFALSE 14994
// if IsOk ( Brown ) then
14885: LD_EXP 11
14889: PPUSH
14890: CALL_OW 302
14894: IFFALSE 14916
// dialog := Say ( Brown , D3b-Brown-1 ) else
14896: LD_ADDR_VAR 0 1
14900: PUSH
14901: LD_EXP 11
14905: PPUSH
14906: LD_STRING D3b-Brown-1
14908: PPUSH
14909: CALL_OW 88
14913: ST_TO_ADDR
14914: GO 14994
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
14916: LD_ADDR_VAR 0 1
14920: PUSH
14921: LD_INT 22
14923: PUSH
14924: LD_INT 1
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 21
14933: PUSH
14934: LD_INT 1
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: LD_INT 23
14943: PUSH
14944: LD_INT 1
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: LD_INT 120
14953: PUSH
14954: LD_INT 106
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 26
14963: PUSH
14964: LD_INT 1
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: PPUSH
14978: CALL_OW 69
14982: PPUSH
14983: LD_STRING D3b-Sol1-1
14985: PPUSH
14986: LD_STRING 
14988: PPUSH
14989: CALL 17376 0 3
14993: ST_TO_ADDR
// if gammaCommander = 3 then
14994: LD_EXP 9
14998: PUSH
14999: LD_INT 3
15001: EQUAL
15002: IFFALSE 15113
// if IsOk ( Houten ) then
15004: LD_EXP 20
15008: PPUSH
15009: CALL_OW 302
15013: IFFALSE 15035
// dialog := Say ( Houten , D3b-VanH-1 ) else
15015: LD_ADDR_VAR 0 1
15019: PUSH
15020: LD_EXP 20
15024: PPUSH
15025: LD_STRING D3b-VanH-1
15027: PPUSH
15028: CALL_OW 88
15032: ST_TO_ADDR
15033: GO 15113
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15035: LD_ADDR_VAR 0 1
15039: PUSH
15040: LD_INT 22
15042: PUSH
15043: LD_INT 1
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 21
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 23
15062: PUSH
15063: LD_INT 1
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 120
15072: PUSH
15073: LD_INT 106
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: LD_INT 26
15082: PUSH
15083: LD_INT 1
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PPUSH
15102: LD_STRING D3b-Sol1-1
15104: PPUSH
15105: LD_STRING 
15107: PPUSH
15108: CALL 17376 0 3
15112: ST_TO_ADDR
// if dialog then
15113: LD_VAR 0 1
15117: IFFALSE 15154
// begin Say ( JMM , D3b-JMM-2 ) ;
15119: LD_EXP 10
15123: PPUSH
15124: LD_STRING D3b-JMM-2
15126: PPUSH
15127: CALL_OW 88
// if IsOK ( Lisa ) then
15131: LD_EXP 15
15135: PPUSH
15136: CALL_OW 302
15140: IFFALSE 15154
// Say ( Lisa , D3b-Lisa-2 ) ;
15142: LD_EXP 15
15146: PPUSH
15147: LD_STRING D3b-Lisa-2
15149: PPUSH
15150: CALL_OW 88
// end ; end ; end ; if not seenComputer then
15154: LD_EXP 6
15158: NOT
15159: IFFALSE 15167
// begin DialogueOff ;
15161: CALL_OW 7
// exit ;
15165: GO 15379
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
15167: LD_INT 22
15169: PUSH
15170: LD_INT 1
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 21
15179: PUSH
15180: LD_INT 1
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 23
15189: PUSH
15190: LD_INT 1
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 2
15199: PUSH
15200: LD_INT 120
15202: PUSH
15203: LD_INT 106
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: LD_INT 120
15212: PUSH
15213: LD_INT 107
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: LIST
15224: PUSH
15225: LD_INT 26
15227: PUSH
15228: LD_INT 1
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 69
15246: PPUSH
15247: LD_STRING DCa-Sol1-1
15249: PPUSH
15250: LD_STRING 
15252: PPUSH
15253: CALL 17376 0 3
15257: IFFALSE 15271
// Say ( JMM , DCb-JMM-1 ) ;
15259: LD_EXP 10
15263: PPUSH
15264: LD_STRING DCb-JMM-1
15266: PPUSH
15267: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
15271: LD_INT 22
15273: PUSH
15274: LD_INT 1
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 21
15283: PUSH
15284: LD_INT 1
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 23
15293: PUSH
15294: LD_INT 1
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 2
15303: PUSH
15304: LD_INT 120
15306: PUSH
15307: LD_INT 106
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 120
15316: PUSH
15317: LD_INT 107
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 26
15331: PUSH
15332: LD_INT 1
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: PPUSH
15346: CALL_OW 69
15350: PPUSH
15351: LD_STRING DCb-Sol1-1
15353: PPUSH
15354: LD_STRING 
15356: PPUSH
15357: CALL 17376 0 3
15361: IFFALSE 15375
// Say ( JMM , DCb-JMM-2 ) ;
15363: LD_EXP 10
15367: PPUSH
15368: LD_STRING DCb-JMM-2
15370: PPUSH
15371: CALL_OW 88
// DialogueOff ;
15375: CALL_OW 7
// end ;
15379: PPOPN 1
15381: END
// export function DialogSeenComputer ( un ) ; begin
15382: LD_INT 0
15384: PPUSH
// if jmmArrival then
15385: LD_EXP 7
15389: IFFALSE 15393
// exit ;
15391: GO 15459
// CenterOnUnits ( un ) ;
15393: LD_VAR 0 1
15397: PPUSH
15398: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
15402: LD_INT 22
15404: PUSH
15405: LD_INT 1
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 2
15414: PUSH
15415: LD_INT 120
15417: PUSH
15418: LD_INT 106
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 120
15427: PUSH
15428: LD_INT 107
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PPUSH
15444: CALL_OW 69
15448: PPUSH
15449: LD_STRING DC-Sol1-1
15451: PPUSH
15452: LD_STRING DC-FSol1-1
15454: PPUSH
15455: CALL 17376 0 3
// end ;
15459: LD_VAR 0 2
15463: RET
// every 0 0$30 trigger jmmArrival and tick >= 22 22$00 and IsOk ( JMM ) do
15464: LD_EXP 7
15468: PUSH
15469: LD_OWVAR 1
15473: PUSH
15474: LD_INT 46200
15476: GREATEREQUAL
15477: AND
15478: PUSH
15479: LD_EXP 10
15483: PPUSH
15484: CALL_OW 302
15488: AND
15489: IFFALSE 15844
15491: GO 15493
15493: DISABLE
// begin DialogueOn ;
15494: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
15498: LD_EXP 25
15502: PPUSH
15503: LD_STRING D4-Pow-1
15505: PPUSH
15506: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
15510: LD_EXP 10
15514: PPUSH
15515: LD_STRING D4-JMM-1
15517: PPUSH
15518: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
15522: LD_EXP 25
15526: PPUSH
15527: LD_STRING D4-Pow-2
15529: PPUSH
15530: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
15534: LD_EXP 10
15538: PPUSH
15539: LD_STRING D4-JMM-2
15541: PPUSH
15542: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
15546: LD_EXP 25
15550: PPUSH
15551: LD_STRING D4-Pow-3
15553: PPUSH
15554: CALL_OW 94
// DialogueOff ;
15558: CALL_OW 7
// wait ( 1 1$00 ) ;
15562: LD_INT 2100
15564: PPUSH
15565: CALL_OW 67
// PrepareRussianAttack ( Difficulty + 1 ) ;
15569: LD_OWVAR 67
15573: PUSH
15574: LD_INT 1
15576: PLUS
15577: PPUSH
15578: CALL 11078 0 1
// wait ( 7 7$30 ) ;
15582: LD_INT 15750
15584: PPUSH
15585: CALL_OW 67
// DialogueOn ;
15589: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
15593: LD_EXP 25
15597: PPUSH
15598: LD_STRING D4a-Pow-1
15600: PPUSH
15601: CALL_OW 94
// DialogueOff ;
15605: CALL_OW 7
// SikorskiCounter ;
15609: CALL 17160 0 0
// PrepareSikorsky ;
15613: CALL 5961 0 0
// CenterNowOnUnits ( Sikorski ) ;
15617: LD_EXP 23
15621: PPUSH
15622: CALL_OW 87
// DialogueOn ;
15626: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
15630: LD_EXP 23
15634: PPUSH
15635: LD_STRING D5-Sik-1
15637: PPUSH
15638: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
15642: LD_EXP 10
15646: PPUSH
15647: LD_STRING D5-JMM-1a
15649: PPUSH
15650: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
15654: LD_EXP 23
15658: PPUSH
15659: LD_STRING D5-Sik-2
15661: PPUSH
15662: CALL_OW 88
// case Query ( QSikorski ) of 1 :
15666: LD_STRING QSikorski
15668: PPUSH
15669: CALL_OW 97
15673: PUSH
15674: LD_INT 1
15676: DOUBLE
15677: EQUAL
15678: IFTRUE 15682
15680: GO 15705
15682: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
15683: LD_EXP 23
15687: PPUSH
15688: LD_STRING D5a-Sik-1
15690: PPUSH
15691: CALL_OW 88
// sikorskiWait := 1 1$00 ;
15695: LD_ADDR_EXP 4
15699: PUSH
15700: LD_INT 2100
15702: ST_TO_ADDR
// end ; 2 :
15703: GO 15792
15705: LD_INT 2
15707: DOUBLE
15708: EQUAL
15709: IFTRUE 15713
15711: GO 15736
15713: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
15714: LD_EXP 23
15718: PPUSH
15719: LD_STRING D5b-Sik-1
15721: PPUSH
15722: CALL_OW 88
// sikorskiWait := 5 5$00 ;
15726: LD_ADDR_EXP 4
15730: PUSH
15731: LD_INT 10500
15733: ST_TO_ADDR
// end ; 3 :
15734: GO 15792
15736: LD_INT 3
15738: DOUBLE
15739: EQUAL
15740: IFTRUE 15744
15742: GO 15791
15744: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
15745: LD_EXP 23
15749: PPUSH
15750: LD_STRING D5c-Sik-1
15752: PPUSH
15753: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
15757: LD_EXP 10
15761: PPUSH
15762: LD_STRING D5c-JMM-1
15764: PPUSH
15765: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
15769: LD_EXP 23
15773: PPUSH
15774: LD_STRING D5c-Sik-2
15776: PPUSH
15777: CALL_OW 88
// sikorskiWait := 5 5$00 ;
15781: LD_ADDR_EXP 4
15785: PUSH
15786: LD_INT 10500
15788: ST_TO_ADDR
// end ; end ;
15789: GO 15792
15791: POP
// DialogueOff ;
15792: CALL_OW 7
// SikorskiWaitCounter ;
15796: CALL 17223 0 0
// DialogueOn ;
15800: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
15804: LD_EXP 23
15808: PPUSH
15809: LD_STRING D6-Sik-1
15811: PPUSH
15812: CALL_OW 88
// DialogueOff ;
15816: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
15820: LD_STRING M2
15822: PPUSH
15823: CALL_OW 337
// PrepareRussianAttack ( Difficulty + 3 ) ;
15827: LD_OWVAR 67
15831: PUSH
15832: LD_INT 3
15834: PLUS
15835: PPUSH
15836: CALL 11078 0 1
// SikorskiAttack ;
15840: CALL 7310 0 0
// end ;
15844: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
15845: LD_INT 11
15847: PPUSH
15848: LD_INT 22
15850: PUSH
15851: LD_INT 4
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PPUSH
15858: CALL_OW 70
15862: PUSH
15863: LD_INT 2
15865: GREATER
15866: IFFALSE 16077
15868: GO 15870
15870: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
15871: LD_EXP 23
15875: PPUSH
15876: LD_STRING D7-Sik-1
15878: PPUSH
15879: CALL_OW 88
// wait ( 0 0$15 ) ;
15883: LD_INT 525
15885: PPUSH
15886: CALL_OW 67
// if InBattle ( 1 ) and ( IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) ) then
15890: LD_INT 1
15892: PPUSH
15893: CALL_OW 463
15897: PUSH
15898: LD_EXP 10
15902: PPUSH
15903: LD_INT 11
15905: PPUSH
15906: CALL_OW 308
15910: PUSH
15911: LD_EXP 10
15915: PPUSH
15916: CALL_OW 310
15920: PPUSH
15921: LD_INT 11
15923: PPUSH
15924: CALL_OW 308
15928: OR
15929: AND
15930: IFFALSE 15954
// begin Say ( Sikorski , D7a-Sik-1 ) ;
15932: LD_EXP 23
15936: PPUSH
15937: LD_STRING D7a-Sik-1
15939: PPUSH
15940: CALL_OW 88
// sikorskiStatus := 1 ;
15944: LD_ADDR_EXP 8
15948: PUSH
15949: LD_INT 1
15951: ST_TO_ADDR
// end else
15952: GO 15974
// begin Say ( Sikorski , D7b-Sik-1 ) ;
15954: LD_EXP 23
15958: PPUSH
15959: LD_STRING D7b-Sik-1
15961: PPUSH
15962: CALL_OW 88
// sikorskiStatus := 2 ;
15966: LD_ADDR_EXP 8
15970: PUSH
15971: LD_INT 2
15973: ST_TO_ADDR
// end ; wait ( 0 0$35 ) ;
15974: LD_INT 1225
15976: PPUSH
15977: CALL_OW 67
// if InBattle ( 1 ) and ( IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) ) then
15981: LD_INT 1
15983: PPUSH
15984: CALL_OW 463
15988: PUSH
15989: LD_EXP 10
15993: PPUSH
15994: LD_INT 11
15996: PPUSH
15997: CALL_OW 308
16001: PUSH
16002: LD_EXP 10
16006: PPUSH
16007: CALL_OW 310
16011: PPUSH
16012: LD_INT 11
16014: PPUSH
16015: CALL_OW 308
16019: OR
16020: PUSH
16021: LD_EXP 10
16025: PPUSH
16026: CALL_OW 302
16030: NOT
16031: OR
16032: AND
16033: IFFALSE 16057
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16035: LD_EXP 23
16039: PPUSH
16040: LD_STRING D7a-Sik-1
16042: PPUSH
16043: CALL_OW 88
// sikorskiStatus := 1 ;
16047: LD_ADDR_EXP 8
16051: PUSH
16052: LD_INT 1
16054: ST_TO_ADDR
// end else
16055: GO 16077
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16057: LD_EXP 23
16061: PPUSH
16062: LD_STRING D7b-Sik-1
16064: PPUSH
16065: CALL_OW 88
// sikorskiStatus := 2 ;
16069: LD_ADDR_EXP 8
16073: PUSH
16074: LD_INT 2
16076: ST_TO_ADDR
// end ; end ;
16077: END
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do var i , tmp , prefix ;
16078: LD_EXP 7
16082: PUSH
16083: LD_INT 28
16085: PPUSH
16086: CALL_OW 301
16090: AND
16091: PUSH
16092: LD_EXP 27
16096: PPUSH
16097: CALL_OW 301
16101: AND
16102: PUSH
16103: LD_INT 22
16105: PUSH
16106: LD_INT 3
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 30
16115: PUSH
16116: LD_INT 5
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PPUSH
16127: CALL_OW 69
16131: AND
16132: IFFALSE 17157
16134: GO 16136
16136: DISABLE
16137: LD_INT 0
16139: PPUSH
16140: PPUSH
16141: PPUSH
// begin Video ( true ) ;
16142: LD_INT 1
16144: PPUSH
16145: CALL 73322 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
16149: LD_INT 104
16151: PPUSH
16152: LD_INT 108
16154: PPUSH
16155: LD_INT 1
16157: PPUSH
16158: LD_INT 36
16160: NEG
16161: PPUSH
16162: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
16166: LD_INT 104
16168: PPUSH
16169: LD_INT 108
16171: PPUSH
16172: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
16176: LD_ADDR_VAR 0 2
16180: PUSH
16181: LD_INT 22
16183: PUSH
16184: LD_INT 1
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 21
16193: PUSH
16194: LD_INT 1
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 3
16203: PUSH
16204: LD_INT 24
16206: PUSH
16207: LD_INT 249
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: PPUSH
16223: CALL_OW 69
16227: ST_TO_ADDR
// if tmp then
16228: LD_VAR 0 2
16232: IFFALSE 16263
// for i in tmp do
16234: LD_ADDR_VAR 0 1
16238: PUSH
16239: LD_VAR 0 2
16243: PUSH
16244: FOR_IN
16245: IFFALSE 16261
// SetLives ( i , 249 ) ;
16247: LD_VAR 0 1
16251: PPUSH
16252: LD_INT 249
16254: PPUSH
16255: CALL_OW 234
16259: GO 16244
16261: POP
16262: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16263: LD_ADDR_VAR 0 1
16267: PUSH
16268: LD_INT 22
16270: PUSH
16271: LD_INT 3
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PUSH
16278: LD_INT 21
16280: PUSH
16281: LD_INT 1
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PPUSH
16292: CALL_OW 69
16296: PUSH
16297: FOR_IN
16298: IFFALSE 16341
// begin ComExit ( i ) ;
16300: LD_VAR 0 1
16304: PPUSH
16305: CALL 73738 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
16309: LD_VAR 0 1
16313: PPUSH
16314: LD_INT 131
16316: PPUSH
16317: LD_INT 127
16319: PPUSH
16320: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
16324: LD_VAR 0 1
16328: PPUSH
16329: LD_INT 141
16331: PPUSH
16332: LD_INT 147
16334: PPUSH
16335: CALL_OW 171
// end ;
16339: GO 16297
16341: POP
16342: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
16343: LD_INT 81
16345: PUSH
16346: LD_INT 3
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 3
16355: PUSH
16356: LD_INT 21
16358: PUSH
16359: LD_INT 3
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PPUSH
16374: CALL_OW 69
16378: PPUSH
16379: LD_INT 131
16381: PPUSH
16382: LD_INT 127
16384: PPUSH
16385: CALL_OW 174
// wait ( 0 0$08 ) ;
16389: LD_INT 280
16391: PPUSH
16392: CALL_OW 67
// DialogueOn ;
16396: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
16400: LD_EXP 8
16404: PUSH
16405: LD_INT 1
16407: EQUAL
16408: PUSH
16409: LD_EXP 23
16413: PPUSH
16414: CALL_OW 302
16418: AND
16419: IFFALSE 16433
// Say ( Sikorski , D9-Sik-1 ) ;
16421: LD_EXP 23
16425: PPUSH
16426: LD_STRING D9-Sik-1
16428: PPUSH
16429: CALL_OW 88
// if IsDead ( Sikorski ) then
16433: LD_EXP 23
16437: PPUSH
16438: CALL_OW 301
16442: IFFALSE 16463
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
16444: LD_EXP 25
16448: PPUSH
16449: LD_STRING D8b-Pow-1
16451: PPUSH
16452: CALL_OW 94
// YouLost ( Dismissed ) ;
16456: LD_STRING Dismissed
16458: PPUSH
16459: CALL_OW 104
// end ; if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
16463: LD_INT 22
16465: PUSH
16466: LD_INT 4
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PPUSH
16473: CALL_OW 69
16477: PUSH
16478: LD_INT 0
16480: EQUAL
16481: PUSH
16482: LD_EXP 3
16486: AND
16487: IFFALSE 16496
// SetAchievement ( ACH_BLITZKRIEG ) ;
16489: LD_STRING ACH_BLITZKRIEG
16491: PPUSH
16492: CALL_OW 543
// if tick <= 25 25$08 then
16496: LD_OWVAR 1
16500: PUSH
16501: LD_INT 52780
16503: LESSEQUAL
16504: IFFALSE 16520
// begin wait ( 3 ) ;
16506: LD_INT 3
16508: PPUSH
16509: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
16513: LD_STRING ACH_ASPEED_8
16515: PPUSH
16516: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
16520: LD_STRING med1
16522: PPUSH
16523: LD_INT 1
16525: PPUSH
16526: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
16530: LD_STRING med2
16532: PPUSH
16533: LD_INT 1
16535: PPUSH
16536: CALL_OW 101
// if sikorskiStatus = 1 then
16540: LD_EXP 8
16544: PUSH
16545: LD_INT 1
16547: EQUAL
16548: IFFALSE 16562
// AddMedal ( perfect , 1 ) else
16550: LD_STRING perfect
16552: PPUSH
16553: LD_INT 1
16555: PPUSH
16556: CALL_OW 101
16560: GO 16573
// AddMedal ( perfect , - 1 ) ;
16562: LD_STRING perfect
16564: PPUSH
16565: LD_INT 1
16567: NEG
16568: PPUSH
16569: CALL_OW 101
// if Difficulty >= 3 then
16573: LD_OWVAR 67
16577: PUSH
16578: LD_INT 3
16580: GREATEREQUAL
16581: IFFALSE 16593
// SetAchievementEX ( ACH_AMER , 8 ) ;
16583: LD_STRING ACH_AMER
16585: PPUSH
16586: LD_INT 8
16588: PPUSH
16589: CALL_OW 564
// GiveMedals ( Main ) ;
16593: LD_STRING Main
16595: PPUSH
16596: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
16600: LD_INT 22
16602: PUSH
16603: LD_INT 1
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 23
16612: PUSH
16613: LD_INT 1
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 21
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: PPUSH
16635: CALL_OW 69
16639: PPUSH
16640: CALL_OW 43
// prefix := 08_ ;
16644: LD_ADDR_VAR 0 3
16648: PUSH
16649: LD_STRING 08_
16651: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
16652: LD_EXP 10
16656: PPUSH
16657: LD_VAR 0 3
16661: PUSH
16662: LD_STRING JMM
16664: STR
16665: PPUSH
16666: CALL_OW 38
// if IsLive ( Brown ) then
16670: LD_EXP 11
16674: PPUSH
16675: CALL_OW 300
16679: IFFALSE 16699
// SaveCharacters ( Brown , prefix & Brown ) ;
16681: LD_EXP 11
16685: PPUSH
16686: LD_VAR 0 3
16690: PUSH
16691: LD_STRING Brown
16693: STR
16694: PPUSH
16695: CALL_OW 38
// if IsLive ( Donaldson ) then
16699: LD_EXP 12
16703: PPUSH
16704: CALL_OW 300
16708: IFFALSE 16728
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
16710: LD_EXP 12
16714: PPUSH
16715: LD_VAR 0 3
16719: PUSH
16720: LD_STRING Donaldson
16722: STR
16723: PPUSH
16724: CALL_OW 38
// if IsLive ( Bobby ) then
16728: LD_EXP 13
16732: PPUSH
16733: CALL_OW 300
16737: IFFALSE 16757
// SaveCharacters ( Bobby , prefix & Bobby ) ;
16739: LD_EXP 13
16743: PPUSH
16744: LD_VAR 0 3
16748: PUSH
16749: LD_STRING Bobby
16751: STR
16752: PPUSH
16753: CALL_OW 38
// if IsLive ( Cyrus ) then
16757: LD_EXP 14
16761: PPUSH
16762: CALL_OW 300
16766: IFFALSE 16786
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
16768: LD_EXP 14
16772: PPUSH
16773: LD_VAR 0 3
16777: PUSH
16778: LD_STRING Cyrus
16780: STR
16781: PPUSH
16782: CALL_OW 38
// if IsLive ( Lisa ) then
16786: LD_EXP 15
16790: PPUSH
16791: CALL_OW 300
16795: IFFALSE 16815
// SaveCharacters ( Lisa , prefix & Lisa ) ;
16797: LD_EXP 15
16801: PPUSH
16802: LD_VAR 0 3
16806: PUSH
16807: LD_STRING Lisa
16809: STR
16810: PPUSH
16811: CALL_OW 38
// if IsLive ( Frank ) then
16815: LD_EXP 16
16819: PPUSH
16820: CALL_OW 300
16824: IFFALSE 16844
// SaveCharacters ( Frank , prefix & Frank ) ;
16826: LD_EXP 16
16830: PPUSH
16831: LD_VAR 0 3
16835: PUSH
16836: LD_STRING Frank
16838: STR
16839: PPUSH
16840: CALL_OW 38
// if IsLive ( Gladstone ) then
16844: LD_EXP 17
16848: PPUSH
16849: CALL_OW 300
16853: IFFALSE 16873
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
16855: LD_EXP 17
16859: PPUSH
16860: LD_VAR 0 3
16864: PUSH
16865: LD_STRING Gladstone
16867: STR
16868: PPUSH
16869: CALL_OW 38
// if IsLive ( Kikuchi ) then
16873: LD_EXP 18
16877: PPUSH
16878: CALL_OW 300
16882: IFFALSE 16902
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
16884: LD_EXP 18
16888: PPUSH
16889: LD_VAR 0 3
16893: PUSH
16894: LD_STRING Kikuchi
16896: STR
16897: PPUSH
16898: CALL_OW 38
// if IsLive ( Denis ) then
16902: LD_EXP 21
16906: PPUSH
16907: CALL_OW 300
16911: IFFALSE 16931
// SaveCharacters ( Denis , prefix & Denis ) ;
16913: LD_EXP 21
16917: PPUSH
16918: LD_VAR 0 3
16922: PUSH
16923: LD_STRING Denis
16925: STR
16926: PPUSH
16927: CALL_OW 38
// if IsLive ( Joan ) then
16931: LD_EXP 22
16935: PPUSH
16936: CALL_OW 300
16940: IFFALSE 16960
// SaveCharacters ( Joan , prefix & Joan ) ;
16942: LD_EXP 22
16946: PPUSH
16947: LD_VAR 0 3
16951: PUSH
16952: LD_STRING Joan
16954: STR
16955: PPUSH
16956: CALL_OW 38
// if IsLive ( Khatam ) then
16960: LD_EXP 19
16964: PPUSH
16965: CALL_OW 300
16969: IFFALSE 16989
// SaveCharacters ( Khatam , prefix & Khatam ) ;
16971: LD_EXP 19
16975: PPUSH
16976: LD_VAR 0 3
16980: PUSH
16981: LD_STRING Khatam
16983: STR
16984: PPUSH
16985: CALL_OW 38
// if IsLive ( Houten ) then
16989: LD_EXP 20
16993: PPUSH
16994: CALL_OW 300
16998: IFFALSE 17018
// SaveCharacters ( Houten , prefix & Houten ) ;
17000: LD_EXP 20
17004: PPUSH
17005: LD_VAR 0 3
17009: PUSH
17010: LD_STRING Houten
17012: STR
17013: PPUSH
17014: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
17018: LD_INT 22
17020: PUSH
17021: LD_INT 1
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 21
17030: PUSH
17031: LD_INT 1
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 23
17040: PUSH
17041: LD_INT 1
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 69
17057: PUSH
17058: LD_EXP 10
17062: PUSH
17063: LD_EXP 11
17067: PUSH
17068: LD_EXP 12
17072: PUSH
17073: LD_EXP 13
17077: PUSH
17078: LD_EXP 14
17082: PUSH
17083: LD_EXP 15
17087: PUSH
17088: LD_EXP 16
17092: PUSH
17093: LD_EXP 17
17097: PUSH
17098: LD_EXP 18
17102: PUSH
17103: LD_EXP 21
17107: PUSH
17108: LD_EXP 22
17112: PUSH
17113: LD_EXP 20
17117: PUSH
17118: LD_EXP 19
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: DIFF
17138: PPUSH
17139: LD_STRING 08_other_survivors
17141: PPUSH
17142: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
17146: LD_INT 15
17148: PPUSH
17149: CALL 6784 0 1
// YouWin ;
17153: CALL_OW 103
// end ; end_of_file
17157: PPOPN 3
17159: END
// export function SikorskiCounter ; begin
17160: LD_INT 0
17162: PPUSH
// repeat wait ( 0 0$1 ) ;
17163: LD_INT 35
17165: PPUSH
17166: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
17170: LD_ADDR_OWVAR 47
17174: PUSH
17175: LD_STRING #Am08-2
17177: PUSH
17178: LD_EXP 3
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
17187: LD_ADDR_EXP 3
17191: PUSH
17192: LD_EXP 3
17196: PUSH
17197: LD_INT 35
17199: MINUS
17200: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
17201: LD_EXP 3
17205: PUSH
17206: LD_INT 0
17208: EQUAL
17209: IFFALSE 17163
// display_strings := [ ] ;
17211: LD_ADDR_OWVAR 47
17215: PUSH
17216: EMPTY
17217: ST_TO_ADDR
// end ;
17218: LD_VAR 0 1
17222: RET
// export function SikorskiWaitCounter ; begin
17223: LD_INT 0
17225: PPUSH
// repeat wait ( 0 0$1 ) ;
17226: LD_INT 35
17228: PPUSH
17229: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
17233: LD_ADDR_OWVAR 47
17237: PUSH
17238: LD_STRING #Am08-1
17240: PUSH
17241: LD_EXP 4
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
17250: LD_ADDR_EXP 4
17254: PUSH
17255: LD_EXP 4
17259: PUSH
17260: LD_INT 35
17262: MINUS
17263: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
17264: LD_EXP 4
17268: PUSH
17269: LD_INT 0
17271: EQUAL
17272: IFFALSE 17226
// display_strings := [ ] ;
17274: LD_ADDR_OWVAR 47
17278: PUSH
17279: EMPTY
17280: ST_TO_ADDR
// end ; end_of_file
17281: LD_VAR 0 1
17285: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
17286: LD_EXP 3
17290: IFFALSE 17330
17292: GO 17294
17294: DISABLE
// begin enable ;
17295: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
17296: LD_INT 14
17298: PPUSH
17299: CALL_OW 435
17303: PUSH
17304: LD_INT 10
17306: LESS
17307: IFFALSE 17330
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
17309: LD_INT 1
17311: PPUSH
17312: LD_INT 5
17314: PPUSH
17315: CALL_OW 12
17319: PPUSH
17320: LD_INT 14
17322: PPUSH
17323: LD_INT 1
17325: PPUSH
17326: CALL_OW 55
// end ;
17330: END
// every 0 0$55 trigger sikorskiArriveCounter do
17331: LD_EXP 3
17335: IFFALSE 17375
17337: GO 17339
17339: DISABLE
// begin enable ;
17340: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
17341: LD_INT 13
17343: PPUSH
17344: CALL_OW 435
17348: PUSH
17349: LD_INT 10
17351: LESS
17352: IFFALSE 17375
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
17354: LD_INT 1
17356: PPUSH
17357: LD_INT 5
17359: PPUSH
17360: CALL_OW 12
17364: PPUSH
17365: LD_INT 13
17367: PPUSH
17368: LD_INT 1
17370: PPUSH
17371: CALL_OW 55
// end ; end_of_file
17375: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
17376: LD_INT 0
17378: PPUSH
17379: PPUSH
// if not units then
17380: LD_VAR 0 1
17384: NOT
17385: IFFALSE 17389
// exit ;
17387: GO 17514
// result := false ;
17389: LD_ADDR_VAR 0 4
17393: PUSH
17394: LD_INT 0
17396: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
17397: LD_ADDR_VAR 0 5
17401: PUSH
17402: LD_VAR 0 1
17406: PPUSH
17407: LD_INT 26
17409: PUSH
17410: LD_INT 1
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PPUSH
17417: CALL_OW 72
17421: ST_TO_ADDR
// if tmp then
17422: LD_VAR 0 5
17426: IFFALSE 17452
// result := Say ( tmp [ 1 ] , menDialog ) ;
17428: LD_ADDR_VAR 0 4
17432: PUSH
17433: LD_VAR 0 5
17437: PUSH
17438: LD_INT 1
17440: ARRAY
17441: PPUSH
17442: LD_VAR 0 2
17446: PPUSH
17447: CALL_OW 88
17451: ST_TO_ADDR
// if not result then
17452: LD_VAR 0 4
17456: NOT
17457: IFFALSE 17514
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
17459: LD_ADDR_VAR 0 5
17463: PUSH
17464: LD_VAR 0 1
17468: PPUSH
17469: LD_INT 26
17471: PUSH
17472: LD_INT 2
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PPUSH
17479: CALL_OW 72
17483: ST_TO_ADDR
// if tmp then
17484: LD_VAR 0 5
17488: IFFALSE 17514
// result := Say ( tmp [ 1 ] , womenDialog ) ;
17490: LD_ADDR_VAR 0 4
17494: PUSH
17495: LD_VAR 0 5
17499: PUSH
17500: LD_INT 1
17502: ARRAY
17503: PPUSH
17504: LD_VAR 0 3
17508: PPUSH
17509: CALL_OW 88
17513: ST_TO_ADDR
// end ; end ; end_of_file
17514: LD_VAR 0 4
17518: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
17519: LD_INT 0
17521: PPUSH
// ar_miner := 81 ;
17522: LD_ADDR_EXP 39
17526: PUSH
17527: LD_INT 81
17529: ST_TO_ADDR
// ar_crane := 88 ;
17530: LD_ADDR_EXP 38
17534: PUSH
17535: LD_INT 88
17537: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
17538: LD_ADDR_EXP 33
17542: PUSH
17543: LD_INT 89
17545: ST_TO_ADDR
// us_hack := 99 ;
17546: LD_ADDR_EXP 34
17550: PUSH
17551: LD_INT 99
17553: ST_TO_ADDR
// us_artillery := 97 ;
17554: LD_ADDR_EXP 35
17558: PUSH
17559: LD_INT 97
17561: ST_TO_ADDR
// ar_bio_bomb := 91 ;
17562: LD_ADDR_EXP 36
17566: PUSH
17567: LD_INT 91
17569: ST_TO_ADDR
// ar_mortar := 92 ;
17570: LD_ADDR_EXP 37
17574: PUSH
17575: LD_INT 92
17577: ST_TO_ADDR
// ru_flamethrower := 93 ;
17578: LD_ADDR_EXP 40
17582: PUSH
17583: LD_INT 93
17585: ST_TO_ADDR
// ru_radar := 98 ;
17586: LD_ADDR_EXP 32
17590: PUSH
17591: LD_INT 98
17593: ST_TO_ADDR
// tech_Artillery := 80 ;
17594: LD_ADDR_EXP 41
17598: PUSH
17599: LD_INT 80
17601: ST_TO_ADDR
// tech_RadMat := 81 ;
17602: LD_ADDR_EXP 42
17606: PUSH
17607: LD_INT 81
17609: ST_TO_ADDR
// tech_BasicTools := 82 ;
17610: LD_ADDR_EXP 43
17614: PUSH
17615: LD_INT 82
17617: ST_TO_ADDR
// tech_Cargo := 83 ;
17618: LD_ADDR_EXP 44
17622: PUSH
17623: LD_INT 83
17625: ST_TO_ADDR
// tech_Track := 84 ;
17626: LD_ADDR_EXP 45
17630: PUSH
17631: LD_INT 84
17633: ST_TO_ADDR
// tech_Crane := 85 ;
17634: LD_ADDR_EXP 46
17638: PUSH
17639: LD_INT 85
17641: ST_TO_ADDR
// tech_Bulldozer := 86 ;
17642: LD_ADDR_EXP 47
17646: PUSH
17647: LD_INT 86
17649: ST_TO_ADDR
// tech_Hovercraft := 87 ;
17650: LD_ADDR_EXP 48
17654: PUSH
17655: LD_INT 87
17657: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
17658: LD_ADDR_EXP 49
17662: PUSH
17663: LD_INT 88
17665: ST_TO_ADDR
// class_mastodont := 31 ;
17666: LD_ADDR_EXP 50
17670: PUSH
17671: LD_INT 31
17673: ST_TO_ADDR
// class_horse := 21 ;
17674: LD_ADDR_EXP 51
17678: PUSH
17679: LD_INT 21
17681: ST_TO_ADDR
// end ;
17682: LD_VAR 0 1
17686: RET
// every 1 do
17687: GO 17689
17689: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
17690: CALL 17519 0 0
17694: END
// every 0 0$1 do
17695: GO 17697
17697: DISABLE
// begin enable ;
17698: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17699: LD_STRING updateTimer(
17701: PUSH
17702: LD_OWVAR 1
17706: STR
17707: PUSH
17708: LD_STRING );
17710: STR
17711: PPUSH
17712: CALL_OW 559
// end ;
17716: END
// export function SOS_MapStart ( ) ; begin
17717: LD_INT 0
17719: PPUSH
// if streamModeActive then
17720: LD_EXP 52
17724: IFFALSE 17733
// DefineStreamItems ( true ) ;
17726: LD_INT 1
17728: PPUSH
17729: CALL 19383 0 1
// UpdateFactoryWaypoints ( ) ;
17733: CALL 32967 0 0
// end ;
17737: LD_VAR 0 1
17741: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17742: LD_INT 0
17744: PPUSH
// if p2 = 100 then
17745: LD_VAR 0 2
17749: PUSH
17750: LD_INT 100
17752: EQUAL
17753: IFFALSE 18756
// begin if not StreamModeActive then
17755: LD_EXP 52
17759: NOT
17760: IFFALSE 17770
// StreamModeActive := true ;
17762: LD_ADDR_EXP 52
17766: PUSH
17767: LD_INT 1
17769: ST_TO_ADDR
// if p3 = 0 then
17770: LD_VAR 0 3
17774: PUSH
17775: LD_INT 0
17777: EQUAL
17778: IFFALSE 17784
// InitStreamMode ;
17780: CALL 18919 0 0
// if p3 = 1 then
17784: LD_VAR 0 3
17788: PUSH
17789: LD_INT 1
17791: EQUAL
17792: IFFALSE 17802
// sRocket := true ;
17794: LD_ADDR_EXP 57
17798: PUSH
17799: LD_INT 1
17801: ST_TO_ADDR
// if p3 = 2 then
17802: LD_VAR 0 3
17806: PUSH
17807: LD_INT 2
17809: EQUAL
17810: IFFALSE 17820
// sSpeed := true ;
17812: LD_ADDR_EXP 56
17816: PUSH
17817: LD_INT 1
17819: ST_TO_ADDR
// if p3 = 3 then
17820: LD_VAR 0 3
17824: PUSH
17825: LD_INT 3
17827: EQUAL
17828: IFFALSE 17838
// sEngine := true ;
17830: LD_ADDR_EXP 58
17834: PUSH
17835: LD_INT 1
17837: ST_TO_ADDR
// if p3 = 4 then
17838: LD_VAR 0 3
17842: PUSH
17843: LD_INT 4
17845: EQUAL
17846: IFFALSE 17856
// sSpec := true ;
17848: LD_ADDR_EXP 55
17852: PUSH
17853: LD_INT 1
17855: ST_TO_ADDR
// if p3 = 5 then
17856: LD_VAR 0 3
17860: PUSH
17861: LD_INT 5
17863: EQUAL
17864: IFFALSE 17874
// sLevel := true ;
17866: LD_ADDR_EXP 59
17870: PUSH
17871: LD_INT 1
17873: ST_TO_ADDR
// if p3 = 6 then
17874: LD_VAR 0 3
17878: PUSH
17879: LD_INT 6
17881: EQUAL
17882: IFFALSE 17892
// sArmoury := true ;
17884: LD_ADDR_EXP 60
17888: PUSH
17889: LD_INT 1
17891: ST_TO_ADDR
// if p3 = 7 then
17892: LD_VAR 0 3
17896: PUSH
17897: LD_INT 7
17899: EQUAL
17900: IFFALSE 17910
// sRadar := true ;
17902: LD_ADDR_EXP 61
17906: PUSH
17907: LD_INT 1
17909: ST_TO_ADDR
// if p3 = 8 then
17910: LD_VAR 0 3
17914: PUSH
17915: LD_INT 8
17917: EQUAL
17918: IFFALSE 17928
// sBunker := true ;
17920: LD_ADDR_EXP 62
17924: PUSH
17925: LD_INT 1
17927: ST_TO_ADDR
// if p3 = 9 then
17928: LD_VAR 0 3
17932: PUSH
17933: LD_INT 9
17935: EQUAL
17936: IFFALSE 17946
// sHack := true ;
17938: LD_ADDR_EXP 63
17942: PUSH
17943: LD_INT 1
17945: ST_TO_ADDR
// if p3 = 10 then
17946: LD_VAR 0 3
17950: PUSH
17951: LD_INT 10
17953: EQUAL
17954: IFFALSE 17964
// sFire := true ;
17956: LD_ADDR_EXP 64
17960: PUSH
17961: LD_INT 1
17963: ST_TO_ADDR
// if p3 = 11 then
17964: LD_VAR 0 3
17968: PUSH
17969: LD_INT 11
17971: EQUAL
17972: IFFALSE 17982
// sRefresh := true ;
17974: LD_ADDR_EXP 65
17978: PUSH
17979: LD_INT 1
17981: ST_TO_ADDR
// if p3 = 12 then
17982: LD_VAR 0 3
17986: PUSH
17987: LD_INT 12
17989: EQUAL
17990: IFFALSE 18000
// sExp := true ;
17992: LD_ADDR_EXP 66
17996: PUSH
17997: LD_INT 1
17999: ST_TO_ADDR
// if p3 = 13 then
18000: LD_VAR 0 3
18004: PUSH
18005: LD_INT 13
18007: EQUAL
18008: IFFALSE 18018
// sDepot := true ;
18010: LD_ADDR_EXP 67
18014: PUSH
18015: LD_INT 1
18017: ST_TO_ADDR
// if p3 = 14 then
18018: LD_VAR 0 3
18022: PUSH
18023: LD_INT 14
18025: EQUAL
18026: IFFALSE 18036
// sFlag := true ;
18028: LD_ADDR_EXP 68
18032: PUSH
18033: LD_INT 1
18035: ST_TO_ADDR
// if p3 = 15 then
18036: LD_VAR 0 3
18040: PUSH
18041: LD_INT 15
18043: EQUAL
18044: IFFALSE 18054
// sKamikadze := true ;
18046: LD_ADDR_EXP 76
18050: PUSH
18051: LD_INT 1
18053: ST_TO_ADDR
// if p3 = 16 then
18054: LD_VAR 0 3
18058: PUSH
18059: LD_INT 16
18061: EQUAL
18062: IFFALSE 18072
// sTroll := true ;
18064: LD_ADDR_EXP 77
18068: PUSH
18069: LD_INT 1
18071: ST_TO_ADDR
// if p3 = 17 then
18072: LD_VAR 0 3
18076: PUSH
18077: LD_INT 17
18079: EQUAL
18080: IFFALSE 18090
// sSlow := true ;
18082: LD_ADDR_EXP 78
18086: PUSH
18087: LD_INT 1
18089: ST_TO_ADDR
// if p3 = 18 then
18090: LD_VAR 0 3
18094: PUSH
18095: LD_INT 18
18097: EQUAL
18098: IFFALSE 18108
// sLack := true ;
18100: LD_ADDR_EXP 79
18104: PUSH
18105: LD_INT 1
18107: ST_TO_ADDR
// if p3 = 19 then
18108: LD_VAR 0 3
18112: PUSH
18113: LD_INT 19
18115: EQUAL
18116: IFFALSE 18126
// sTank := true ;
18118: LD_ADDR_EXP 81
18122: PUSH
18123: LD_INT 1
18125: ST_TO_ADDR
// if p3 = 20 then
18126: LD_VAR 0 3
18130: PUSH
18131: LD_INT 20
18133: EQUAL
18134: IFFALSE 18144
// sRemote := true ;
18136: LD_ADDR_EXP 82
18140: PUSH
18141: LD_INT 1
18143: ST_TO_ADDR
// if p3 = 21 then
18144: LD_VAR 0 3
18148: PUSH
18149: LD_INT 21
18151: EQUAL
18152: IFFALSE 18162
// sPowell := true ;
18154: LD_ADDR_EXP 83
18158: PUSH
18159: LD_INT 1
18161: ST_TO_ADDR
// if p3 = 22 then
18162: LD_VAR 0 3
18166: PUSH
18167: LD_INT 22
18169: EQUAL
18170: IFFALSE 18180
// sTeleport := true ;
18172: LD_ADDR_EXP 86
18176: PUSH
18177: LD_INT 1
18179: ST_TO_ADDR
// if p3 = 23 then
18180: LD_VAR 0 3
18184: PUSH
18185: LD_INT 23
18187: EQUAL
18188: IFFALSE 18198
// sOilTower := true ;
18190: LD_ADDR_EXP 88
18194: PUSH
18195: LD_INT 1
18197: ST_TO_ADDR
// if p3 = 24 then
18198: LD_VAR 0 3
18202: PUSH
18203: LD_INT 24
18205: EQUAL
18206: IFFALSE 18216
// sShovel := true ;
18208: LD_ADDR_EXP 89
18212: PUSH
18213: LD_INT 1
18215: ST_TO_ADDR
// if p3 = 25 then
18216: LD_VAR 0 3
18220: PUSH
18221: LD_INT 25
18223: EQUAL
18224: IFFALSE 18234
// sSheik := true ;
18226: LD_ADDR_EXP 90
18230: PUSH
18231: LD_INT 1
18233: ST_TO_ADDR
// if p3 = 26 then
18234: LD_VAR 0 3
18238: PUSH
18239: LD_INT 26
18241: EQUAL
18242: IFFALSE 18252
// sEarthquake := true ;
18244: LD_ADDR_EXP 92
18248: PUSH
18249: LD_INT 1
18251: ST_TO_ADDR
// if p3 = 27 then
18252: LD_VAR 0 3
18256: PUSH
18257: LD_INT 27
18259: EQUAL
18260: IFFALSE 18270
// sAI := true ;
18262: LD_ADDR_EXP 93
18266: PUSH
18267: LD_INT 1
18269: ST_TO_ADDR
// if p3 = 28 then
18270: LD_VAR 0 3
18274: PUSH
18275: LD_INT 28
18277: EQUAL
18278: IFFALSE 18288
// sCargo := true ;
18280: LD_ADDR_EXP 96
18284: PUSH
18285: LD_INT 1
18287: ST_TO_ADDR
// if p3 = 29 then
18288: LD_VAR 0 3
18292: PUSH
18293: LD_INT 29
18295: EQUAL
18296: IFFALSE 18306
// sDLaser := true ;
18298: LD_ADDR_EXP 97
18302: PUSH
18303: LD_INT 1
18305: ST_TO_ADDR
// if p3 = 30 then
18306: LD_VAR 0 3
18310: PUSH
18311: LD_INT 30
18313: EQUAL
18314: IFFALSE 18324
// sExchange := true ;
18316: LD_ADDR_EXP 98
18320: PUSH
18321: LD_INT 1
18323: ST_TO_ADDR
// if p3 = 31 then
18324: LD_VAR 0 3
18328: PUSH
18329: LD_INT 31
18331: EQUAL
18332: IFFALSE 18342
// sFac := true ;
18334: LD_ADDR_EXP 99
18338: PUSH
18339: LD_INT 1
18341: ST_TO_ADDR
// if p3 = 32 then
18342: LD_VAR 0 3
18346: PUSH
18347: LD_INT 32
18349: EQUAL
18350: IFFALSE 18360
// sPower := true ;
18352: LD_ADDR_EXP 100
18356: PUSH
18357: LD_INT 1
18359: ST_TO_ADDR
// if p3 = 33 then
18360: LD_VAR 0 3
18364: PUSH
18365: LD_INT 33
18367: EQUAL
18368: IFFALSE 18378
// sRandom := true ;
18370: LD_ADDR_EXP 101
18374: PUSH
18375: LD_INT 1
18377: ST_TO_ADDR
// if p3 = 34 then
18378: LD_VAR 0 3
18382: PUSH
18383: LD_INT 34
18385: EQUAL
18386: IFFALSE 18396
// sShield := true ;
18388: LD_ADDR_EXP 102
18392: PUSH
18393: LD_INT 1
18395: ST_TO_ADDR
// if p3 = 35 then
18396: LD_VAR 0 3
18400: PUSH
18401: LD_INT 35
18403: EQUAL
18404: IFFALSE 18414
// sTime := true ;
18406: LD_ADDR_EXP 103
18410: PUSH
18411: LD_INT 1
18413: ST_TO_ADDR
// if p3 = 36 then
18414: LD_VAR 0 3
18418: PUSH
18419: LD_INT 36
18421: EQUAL
18422: IFFALSE 18432
// sTools := true ;
18424: LD_ADDR_EXP 104
18428: PUSH
18429: LD_INT 1
18431: ST_TO_ADDR
// if p3 = 101 then
18432: LD_VAR 0 3
18436: PUSH
18437: LD_INT 101
18439: EQUAL
18440: IFFALSE 18450
// sSold := true ;
18442: LD_ADDR_EXP 69
18446: PUSH
18447: LD_INT 1
18449: ST_TO_ADDR
// if p3 = 102 then
18450: LD_VAR 0 3
18454: PUSH
18455: LD_INT 102
18457: EQUAL
18458: IFFALSE 18468
// sDiff := true ;
18460: LD_ADDR_EXP 70
18464: PUSH
18465: LD_INT 1
18467: ST_TO_ADDR
// if p3 = 103 then
18468: LD_VAR 0 3
18472: PUSH
18473: LD_INT 103
18475: EQUAL
18476: IFFALSE 18486
// sFog := true ;
18478: LD_ADDR_EXP 73
18482: PUSH
18483: LD_INT 1
18485: ST_TO_ADDR
// if p3 = 104 then
18486: LD_VAR 0 3
18490: PUSH
18491: LD_INT 104
18493: EQUAL
18494: IFFALSE 18504
// sReset := true ;
18496: LD_ADDR_EXP 74
18500: PUSH
18501: LD_INT 1
18503: ST_TO_ADDR
// if p3 = 105 then
18504: LD_VAR 0 3
18508: PUSH
18509: LD_INT 105
18511: EQUAL
18512: IFFALSE 18522
// sSun := true ;
18514: LD_ADDR_EXP 75
18518: PUSH
18519: LD_INT 1
18521: ST_TO_ADDR
// if p3 = 106 then
18522: LD_VAR 0 3
18526: PUSH
18527: LD_INT 106
18529: EQUAL
18530: IFFALSE 18540
// sTiger := true ;
18532: LD_ADDR_EXP 71
18536: PUSH
18537: LD_INT 1
18539: ST_TO_ADDR
// if p3 = 107 then
18540: LD_VAR 0 3
18544: PUSH
18545: LD_INT 107
18547: EQUAL
18548: IFFALSE 18558
// sBomb := true ;
18550: LD_ADDR_EXP 72
18554: PUSH
18555: LD_INT 1
18557: ST_TO_ADDR
// if p3 = 108 then
18558: LD_VAR 0 3
18562: PUSH
18563: LD_INT 108
18565: EQUAL
18566: IFFALSE 18576
// sWound := true ;
18568: LD_ADDR_EXP 80
18572: PUSH
18573: LD_INT 1
18575: ST_TO_ADDR
// if p3 = 109 then
18576: LD_VAR 0 3
18580: PUSH
18581: LD_INT 109
18583: EQUAL
18584: IFFALSE 18594
// sBetray := true ;
18586: LD_ADDR_EXP 84
18590: PUSH
18591: LD_INT 1
18593: ST_TO_ADDR
// if p3 = 110 then
18594: LD_VAR 0 3
18598: PUSH
18599: LD_INT 110
18601: EQUAL
18602: IFFALSE 18612
// sContamin := true ;
18604: LD_ADDR_EXP 85
18608: PUSH
18609: LD_INT 1
18611: ST_TO_ADDR
// if p3 = 111 then
18612: LD_VAR 0 3
18616: PUSH
18617: LD_INT 111
18619: EQUAL
18620: IFFALSE 18630
// sOil := true ;
18622: LD_ADDR_EXP 87
18626: PUSH
18627: LD_INT 1
18629: ST_TO_ADDR
// if p3 = 112 then
18630: LD_VAR 0 3
18634: PUSH
18635: LD_INT 112
18637: EQUAL
18638: IFFALSE 18648
// sStu := true ;
18640: LD_ADDR_EXP 91
18644: PUSH
18645: LD_INT 1
18647: ST_TO_ADDR
// if p3 = 113 then
18648: LD_VAR 0 3
18652: PUSH
18653: LD_INT 113
18655: EQUAL
18656: IFFALSE 18666
// sBazooka := true ;
18658: LD_ADDR_EXP 94
18662: PUSH
18663: LD_INT 1
18665: ST_TO_ADDR
// if p3 = 114 then
18666: LD_VAR 0 3
18670: PUSH
18671: LD_INT 114
18673: EQUAL
18674: IFFALSE 18684
// sMortar := true ;
18676: LD_ADDR_EXP 95
18680: PUSH
18681: LD_INT 1
18683: ST_TO_ADDR
// if p3 = 115 then
18684: LD_VAR 0 3
18688: PUSH
18689: LD_INT 115
18691: EQUAL
18692: IFFALSE 18702
// sRanger := true ;
18694: LD_ADDR_EXP 105
18698: PUSH
18699: LD_INT 1
18701: ST_TO_ADDR
// if p3 = 116 then
18702: LD_VAR 0 3
18706: PUSH
18707: LD_INT 116
18709: EQUAL
18710: IFFALSE 18720
// sComputer := true ;
18712: LD_ADDR_EXP 106
18716: PUSH
18717: LD_INT 1
18719: ST_TO_ADDR
// if p3 = 117 then
18720: LD_VAR 0 3
18724: PUSH
18725: LD_INT 117
18727: EQUAL
18728: IFFALSE 18738
// s30 := true ;
18730: LD_ADDR_EXP 107
18734: PUSH
18735: LD_INT 1
18737: ST_TO_ADDR
// if p3 = 118 then
18738: LD_VAR 0 3
18742: PUSH
18743: LD_INT 118
18745: EQUAL
18746: IFFALSE 18756
// s60 := true ;
18748: LD_ADDR_EXP 108
18752: PUSH
18753: LD_INT 1
18755: ST_TO_ADDR
// end ; if p2 = 101 then
18756: LD_VAR 0 2
18760: PUSH
18761: LD_INT 101
18763: EQUAL
18764: IFFALSE 18892
// begin case p3 of 1 :
18766: LD_VAR 0 3
18770: PUSH
18771: LD_INT 1
18773: DOUBLE
18774: EQUAL
18775: IFTRUE 18779
18777: GO 18786
18779: POP
// hHackUnlimitedResources ; 2 :
18780: CALL 30990 0 0
18784: GO 18892
18786: LD_INT 2
18788: DOUBLE
18789: EQUAL
18790: IFTRUE 18794
18792: GO 18801
18794: POP
// hHackSetLevel10 ; 3 :
18795: CALL 31123 0 0
18799: GO 18892
18801: LD_INT 3
18803: DOUBLE
18804: EQUAL
18805: IFTRUE 18809
18807: GO 18816
18809: POP
// hHackSetLevel10YourUnits ; 4 :
18810: CALL 31208 0 0
18814: GO 18892
18816: LD_INT 4
18818: DOUBLE
18819: EQUAL
18820: IFTRUE 18824
18822: GO 18831
18824: POP
// hHackInvincible ; 5 :
18825: CALL 31656 0 0
18829: GO 18892
18831: LD_INT 5
18833: DOUBLE
18834: EQUAL
18835: IFTRUE 18839
18837: GO 18846
18839: POP
// hHackInvisible ; 6 :
18840: CALL 31767 0 0
18844: GO 18892
18846: LD_INT 6
18848: DOUBLE
18849: EQUAL
18850: IFTRUE 18854
18852: GO 18861
18854: POP
// hHackChangeYourSide ; 7 :
18855: CALL 31824 0 0
18859: GO 18892
18861: LD_INT 7
18863: DOUBLE
18864: EQUAL
18865: IFTRUE 18869
18867: GO 18876
18869: POP
// hHackChangeUnitSide ; 8 :
18870: CALL 31866 0 0
18874: GO 18892
18876: LD_INT 8
18878: DOUBLE
18879: EQUAL
18880: IFTRUE 18884
18882: GO 18891
18884: POP
// hHackFog ; end ;
18885: CALL 31967 0 0
18889: GO 18892
18891: POP
// end ; end ;
18892: LD_VAR 0 7
18896: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
18897: GO 18899
18899: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
18900: LD_STRING initStreamRollete();
18902: PPUSH
18903: CALL_OW 559
// InitStreamMode ;
18907: CALL 18919 0 0
// DefineStreamItems ( false ) ;
18911: LD_INT 0
18913: PPUSH
18914: CALL 19383 0 1
// end ;
18918: END
// function InitStreamMode ; begin
18919: LD_INT 0
18921: PPUSH
// streamModeActive := false ;
18922: LD_ADDR_EXP 52
18926: PUSH
18927: LD_INT 0
18929: ST_TO_ADDR
// normalCounter := 36 ;
18930: LD_ADDR_EXP 53
18934: PUSH
18935: LD_INT 36
18937: ST_TO_ADDR
// hardcoreCounter := 18 ;
18938: LD_ADDR_EXP 54
18942: PUSH
18943: LD_INT 18
18945: ST_TO_ADDR
// sRocket := false ;
18946: LD_ADDR_EXP 57
18950: PUSH
18951: LD_INT 0
18953: ST_TO_ADDR
// sSpeed := false ;
18954: LD_ADDR_EXP 56
18958: PUSH
18959: LD_INT 0
18961: ST_TO_ADDR
// sEngine := false ;
18962: LD_ADDR_EXP 58
18966: PUSH
18967: LD_INT 0
18969: ST_TO_ADDR
// sSpec := false ;
18970: LD_ADDR_EXP 55
18974: PUSH
18975: LD_INT 0
18977: ST_TO_ADDR
// sLevel := false ;
18978: LD_ADDR_EXP 59
18982: PUSH
18983: LD_INT 0
18985: ST_TO_ADDR
// sArmoury := false ;
18986: LD_ADDR_EXP 60
18990: PUSH
18991: LD_INT 0
18993: ST_TO_ADDR
// sRadar := false ;
18994: LD_ADDR_EXP 61
18998: PUSH
18999: LD_INT 0
19001: ST_TO_ADDR
// sBunker := false ;
19002: LD_ADDR_EXP 62
19006: PUSH
19007: LD_INT 0
19009: ST_TO_ADDR
// sHack := false ;
19010: LD_ADDR_EXP 63
19014: PUSH
19015: LD_INT 0
19017: ST_TO_ADDR
// sFire := false ;
19018: LD_ADDR_EXP 64
19022: PUSH
19023: LD_INT 0
19025: ST_TO_ADDR
// sRefresh := false ;
19026: LD_ADDR_EXP 65
19030: PUSH
19031: LD_INT 0
19033: ST_TO_ADDR
// sExp := false ;
19034: LD_ADDR_EXP 66
19038: PUSH
19039: LD_INT 0
19041: ST_TO_ADDR
// sDepot := false ;
19042: LD_ADDR_EXP 67
19046: PUSH
19047: LD_INT 0
19049: ST_TO_ADDR
// sFlag := false ;
19050: LD_ADDR_EXP 68
19054: PUSH
19055: LD_INT 0
19057: ST_TO_ADDR
// sKamikadze := false ;
19058: LD_ADDR_EXP 76
19062: PUSH
19063: LD_INT 0
19065: ST_TO_ADDR
// sTroll := false ;
19066: LD_ADDR_EXP 77
19070: PUSH
19071: LD_INT 0
19073: ST_TO_ADDR
// sSlow := false ;
19074: LD_ADDR_EXP 78
19078: PUSH
19079: LD_INT 0
19081: ST_TO_ADDR
// sLack := false ;
19082: LD_ADDR_EXP 79
19086: PUSH
19087: LD_INT 0
19089: ST_TO_ADDR
// sTank := false ;
19090: LD_ADDR_EXP 81
19094: PUSH
19095: LD_INT 0
19097: ST_TO_ADDR
// sRemote := false ;
19098: LD_ADDR_EXP 82
19102: PUSH
19103: LD_INT 0
19105: ST_TO_ADDR
// sPowell := false ;
19106: LD_ADDR_EXP 83
19110: PUSH
19111: LD_INT 0
19113: ST_TO_ADDR
// sTeleport := false ;
19114: LD_ADDR_EXP 86
19118: PUSH
19119: LD_INT 0
19121: ST_TO_ADDR
// sOilTower := false ;
19122: LD_ADDR_EXP 88
19126: PUSH
19127: LD_INT 0
19129: ST_TO_ADDR
// sShovel := false ;
19130: LD_ADDR_EXP 89
19134: PUSH
19135: LD_INT 0
19137: ST_TO_ADDR
// sSheik := false ;
19138: LD_ADDR_EXP 90
19142: PUSH
19143: LD_INT 0
19145: ST_TO_ADDR
// sEarthquake := false ;
19146: LD_ADDR_EXP 92
19150: PUSH
19151: LD_INT 0
19153: ST_TO_ADDR
// sAI := false ;
19154: LD_ADDR_EXP 93
19158: PUSH
19159: LD_INT 0
19161: ST_TO_ADDR
// sCargo := false ;
19162: LD_ADDR_EXP 96
19166: PUSH
19167: LD_INT 0
19169: ST_TO_ADDR
// sDLaser := false ;
19170: LD_ADDR_EXP 97
19174: PUSH
19175: LD_INT 0
19177: ST_TO_ADDR
// sExchange := false ;
19178: LD_ADDR_EXP 98
19182: PUSH
19183: LD_INT 0
19185: ST_TO_ADDR
// sFac := false ;
19186: LD_ADDR_EXP 99
19190: PUSH
19191: LD_INT 0
19193: ST_TO_ADDR
// sPower := false ;
19194: LD_ADDR_EXP 100
19198: PUSH
19199: LD_INT 0
19201: ST_TO_ADDR
// sRandom := false ;
19202: LD_ADDR_EXP 101
19206: PUSH
19207: LD_INT 0
19209: ST_TO_ADDR
// sShield := false ;
19210: LD_ADDR_EXP 102
19214: PUSH
19215: LD_INT 0
19217: ST_TO_ADDR
// sTime := false ;
19218: LD_ADDR_EXP 103
19222: PUSH
19223: LD_INT 0
19225: ST_TO_ADDR
// sTools := false ;
19226: LD_ADDR_EXP 104
19230: PUSH
19231: LD_INT 0
19233: ST_TO_ADDR
// sSold := false ;
19234: LD_ADDR_EXP 69
19238: PUSH
19239: LD_INT 0
19241: ST_TO_ADDR
// sDiff := false ;
19242: LD_ADDR_EXP 70
19246: PUSH
19247: LD_INT 0
19249: ST_TO_ADDR
// sFog := false ;
19250: LD_ADDR_EXP 73
19254: PUSH
19255: LD_INT 0
19257: ST_TO_ADDR
// sReset := false ;
19258: LD_ADDR_EXP 74
19262: PUSH
19263: LD_INT 0
19265: ST_TO_ADDR
// sSun := false ;
19266: LD_ADDR_EXP 75
19270: PUSH
19271: LD_INT 0
19273: ST_TO_ADDR
// sTiger := false ;
19274: LD_ADDR_EXP 71
19278: PUSH
19279: LD_INT 0
19281: ST_TO_ADDR
// sBomb := false ;
19282: LD_ADDR_EXP 72
19286: PUSH
19287: LD_INT 0
19289: ST_TO_ADDR
// sWound := false ;
19290: LD_ADDR_EXP 80
19294: PUSH
19295: LD_INT 0
19297: ST_TO_ADDR
// sBetray := false ;
19298: LD_ADDR_EXP 84
19302: PUSH
19303: LD_INT 0
19305: ST_TO_ADDR
// sContamin := false ;
19306: LD_ADDR_EXP 85
19310: PUSH
19311: LD_INT 0
19313: ST_TO_ADDR
// sOil := false ;
19314: LD_ADDR_EXP 87
19318: PUSH
19319: LD_INT 0
19321: ST_TO_ADDR
// sStu := false ;
19322: LD_ADDR_EXP 91
19326: PUSH
19327: LD_INT 0
19329: ST_TO_ADDR
// sBazooka := false ;
19330: LD_ADDR_EXP 94
19334: PUSH
19335: LD_INT 0
19337: ST_TO_ADDR
// sMortar := false ;
19338: LD_ADDR_EXP 95
19342: PUSH
19343: LD_INT 0
19345: ST_TO_ADDR
// sRanger := false ;
19346: LD_ADDR_EXP 105
19350: PUSH
19351: LD_INT 0
19353: ST_TO_ADDR
// sComputer := false ;
19354: LD_ADDR_EXP 106
19358: PUSH
19359: LD_INT 0
19361: ST_TO_ADDR
// s30 := false ;
19362: LD_ADDR_EXP 107
19366: PUSH
19367: LD_INT 0
19369: ST_TO_ADDR
// s60 := false ;
19370: LD_ADDR_EXP 108
19374: PUSH
19375: LD_INT 0
19377: ST_TO_ADDR
// end ;
19378: LD_VAR 0 1
19382: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19383: LD_INT 0
19385: PPUSH
19386: PPUSH
19387: PPUSH
19388: PPUSH
19389: PPUSH
19390: PPUSH
19391: PPUSH
// result := [ ] ;
19392: LD_ADDR_VAR 0 2
19396: PUSH
19397: EMPTY
19398: ST_TO_ADDR
// if campaign_id = 1 then
19399: LD_OWVAR 69
19403: PUSH
19404: LD_INT 1
19406: EQUAL
19407: IFFALSE 22573
// begin case mission_number of 1 :
19409: LD_OWVAR 70
19413: PUSH
19414: LD_INT 1
19416: DOUBLE
19417: EQUAL
19418: IFTRUE 19422
19420: GO 19498
19422: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19423: LD_ADDR_VAR 0 2
19427: PUSH
19428: LD_INT 2
19430: PUSH
19431: LD_INT 4
19433: PUSH
19434: LD_INT 11
19436: PUSH
19437: LD_INT 12
19439: PUSH
19440: LD_INT 15
19442: PUSH
19443: LD_INT 16
19445: PUSH
19446: LD_INT 22
19448: PUSH
19449: LD_INT 23
19451: PUSH
19452: LD_INT 26
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 101
19468: PUSH
19469: LD_INT 102
19471: PUSH
19472: LD_INT 106
19474: PUSH
19475: LD_INT 116
19477: PUSH
19478: LD_INT 117
19480: PUSH
19481: LD_INT 118
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: ST_TO_ADDR
19496: GO 22571
19498: LD_INT 2
19500: DOUBLE
19501: EQUAL
19502: IFTRUE 19506
19504: GO 19590
19506: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19507: LD_ADDR_VAR 0 2
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: LD_INT 4
19517: PUSH
19518: LD_INT 11
19520: PUSH
19521: LD_INT 12
19523: PUSH
19524: LD_INT 15
19526: PUSH
19527: LD_INT 16
19529: PUSH
19530: LD_INT 22
19532: PUSH
19533: LD_INT 23
19535: PUSH
19536: LD_INT 26
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 101
19552: PUSH
19553: LD_INT 102
19555: PUSH
19556: LD_INT 105
19558: PUSH
19559: LD_INT 106
19561: PUSH
19562: LD_INT 108
19564: PUSH
19565: LD_INT 116
19567: PUSH
19568: LD_INT 117
19570: PUSH
19571: LD_INT 118
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: ST_TO_ADDR
19588: GO 22571
19590: LD_INT 3
19592: DOUBLE
19593: EQUAL
19594: IFTRUE 19598
19596: GO 19686
19598: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19599: LD_ADDR_VAR 0 2
19603: PUSH
19604: LD_INT 2
19606: PUSH
19607: LD_INT 4
19609: PUSH
19610: LD_INT 5
19612: PUSH
19613: LD_INT 11
19615: PUSH
19616: LD_INT 12
19618: PUSH
19619: LD_INT 15
19621: PUSH
19622: LD_INT 16
19624: PUSH
19625: LD_INT 22
19627: PUSH
19628: LD_INT 26
19630: PUSH
19631: LD_INT 36
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 101
19648: PUSH
19649: LD_INT 102
19651: PUSH
19652: LD_INT 105
19654: PUSH
19655: LD_INT 106
19657: PUSH
19658: LD_INT 108
19660: PUSH
19661: LD_INT 116
19663: PUSH
19664: LD_INT 117
19666: PUSH
19667: LD_INT 118
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: ST_TO_ADDR
19684: GO 22571
19686: LD_INT 4
19688: DOUBLE
19689: EQUAL
19690: IFTRUE 19694
19692: GO 19790
19694: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19695: LD_ADDR_VAR 0 2
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: LD_INT 4
19705: PUSH
19706: LD_INT 5
19708: PUSH
19709: LD_INT 8
19711: PUSH
19712: LD_INT 11
19714: PUSH
19715: LD_INT 12
19717: PUSH
19718: LD_INT 15
19720: PUSH
19721: LD_INT 16
19723: PUSH
19724: LD_INT 22
19726: PUSH
19727: LD_INT 23
19729: PUSH
19730: LD_INT 26
19732: PUSH
19733: LD_INT 36
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 101
19752: PUSH
19753: LD_INT 102
19755: PUSH
19756: LD_INT 105
19758: PUSH
19759: LD_INT 106
19761: PUSH
19762: LD_INT 108
19764: PUSH
19765: LD_INT 116
19767: PUSH
19768: LD_INT 117
19770: PUSH
19771: LD_INT 118
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: ST_TO_ADDR
19788: GO 22571
19790: LD_INT 5
19792: DOUBLE
19793: EQUAL
19794: IFTRUE 19798
19796: GO 19910
19798: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19799: LD_ADDR_VAR 0 2
19803: PUSH
19804: LD_INT 2
19806: PUSH
19807: LD_INT 4
19809: PUSH
19810: LD_INT 5
19812: PUSH
19813: LD_INT 6
19815: PUSH
19816: LD_INT 8
19818: PUSH
19819: LD_INT 11
19821: PUSH
19822: LD_INT 12
19824: PUSH
19825: LD_INT 15
19827: PUSH
19828: LD_INT 16
19830: PUSH
19831: LD_INT 22
19833: PUSH
19834: LD_INT 23
19836: PUSH
19837: LD_INT 25
19839: PUSH
19840: LD_INT 26
19842: PUSH
19843: LD_INT 36
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 101
19864: PUSH
19865: LD_INT 102
19867: PUSH
19868: LD_INT 105
19870: PUSH
19871: LD_INT 106
19873: PUSH
19874: LD_INT 108
19876: PUSH
19877: LD_INT 109
19879: PUSH
19880: LD_INT 112
19882: PUSH
19883: LD_INT 116
19885: PUSH
19886: LD_INT 117
19888: PUSH
19889: LD_INT 118
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: ST_TO_ADDR
19908: GO 22571
19910: LD_INT 6
19912: DOUBLE
19913: EQUAL
19914: IFTRUE 19918
19916: GO 20050
19918: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19919: LD_ADDR_VAR 0 2
19923: PUSH
19924: LD_INT 2
19926: PUSH
19927: LD_INT 4
19929: PUSH
19930: LD_INT 5
19932: PUSH
19933: LD_INT 6
19935: PUSH
19936: LD_INT 8
19938: PUSH
19939: LD_INT 11
19941: PUSH
19942: LD_INT 12
19944: PUSH
19945: LD_INT 15
19947: PUSH
19948: LD_INT 16
19950: PUSH
19951: LD_INT 20
19953: PUSH
19954: LD_INT 21
19956: PUSH
19957: LD_INT 22
19959: PUSH
19960: LD_INT 23
19962: PUSH
19963: LD_INT 25
19965: PUSH
19966: LD_INT 26
19968: PUSH
19969: LD_INT 30
19971: PUSH
19972: LD_INT 31
19974: PUSH
19975: LD_INT 32
19977: PUSH
19978: LD_INT 36
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 101
20004: PUSH
20005: LD_INT 102
20007: PUSH
20008: LD_INT 105
20010: PUSH
20011: LD_INT 106
20013: PUSH
20014: LD_INT 108
20016: PUSH
20017: LD_INT 109
20019: PUSH
20020: LD_INT 112
20022: PUSH
20023: LD_INT 116
20025: PUSH
20026: LD_INT 117
20028: PUSH
20029: LD_INT 118
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: ST_TO_ADDR
20048: GO 22571
20050: LD_INT 7
20052: DOUBLE
20053: EQUAL
20054: IFTRUE 20058
20056: GO 20170
20058: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20059: LD_ADDR_VAR 0 2
20063: PUSH
20064: LD_INT 2
20066: PUSH
20067: LD_INT 4
20069: PUSH
20070: LD_INT 5
20072: PUSH
20073: LD_INT 7
20075: PUSH
20076: LD_INT 11
20078: PUSH
20079: LD_INT 12
20081: PUSH
20082: LD_INT 15
20084: PUSH
20085: LD_INT 16
20087: PUSH
20088: LD_INT 20
20090: PUSH
20091: LD_INT 21
20093: PUSH
20094: LD_INT 22
20096: PUSH
20097: LD_INT 23
20099: PUSH
20100: LD_INT 25
20102: PUSH
20103: LD_INT 26
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 101
20124: PUSH
20125: LD_INT 102
20127: PUSH
20128: LD_INT 103
20130: PUSH
20131: LD_INT 105
20133: PUSH
20134: LD_INT 106
20136: PUSH
20137: LD_INT 108
20139: PUSH
20140: LD_INT 112
20142: PUSH
20143: LD_INT 116
20145: PUSH
20146: LD_INT 117
20148: PUSH
20149: LD_INT 118
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: ST_TO_ADDR
20168: GO 22571
20170: LD_INT 8
20172: DOUBLE
20173: EQUAL
20174: IFTRUE 20178
20176: GO 20318
20178: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20179: LD_ADDR_VAR 0 2
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: LD_INT 4
20189: PUSH
20190: LD_INT 5
20192: PUSH
20193: LD_INT 6
20195: PUSH
20196: LD_INT 7
20198: PUSH
20199: LD_INT 8
20201: PUSH
20202: LD_INT 11
20204: PUSH
20205: LD_INT 12
20207: PUSH
20208: LD_INT 15
20210: PUSH
20211: LD_INT 16
20213: PUSH
20214: LD_INT 20
20216: PUSH
20217: LD_INT 21
20219: PUSH
20220: LD_INT 22
20222: PUSH
20223: LD_INT 23
20225: PUSH
20226: LD_INT 25
20228: PUSH
20229: LD_INT 26
20231: PUSH
20232: LD_INT 30
20234: PUSH
20235: LD_INT 31
20237: PUSH
20238: LD_INT 32
20240: PUSH
20241: LD_INT 36
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 101
20268: PUSH
20269: LD_INT 102
20271: PUSH
20272: LD_INT 103
20274: PUSH
20275: LD_INT 105
20277: PUSH
20278: LD_INT 106
20280: PUSH
20281: LD_INT 108
20283: PUSH
20284: LD_INT 109
20286: PUSH
20287: LD_INT 112
20289: PUSH
20290: LD_INT 116
20292: PUSH
20293: LD_INT 117
20295: PUSH
20296: LD_INT 118
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: ST_TO_ADDR
20316: GO 22571
20318: LD_INT 9
20320: DOUBLE
20321: EQUAL
20322: IFTRUE 20326
20324: GO 20474
20326: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20327: LD_ADDR_VAR 0 2
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: LD_INT 4
20337: PUSH
20338: LD_INT 5
20340: PUSH
20341: LD_INT 6
20343: PUSH
20344: LD_INT 7
20346: PUSH
20347: LD_INT 8
20349: PUSH
20350: LD_INT 11
20352: PUSH
20353: LD_INT 12
20355: PUSH
20356: LD_INT 15
20358: PUSH
20359: LD_INT 16
20361: PUSH
20362: LD_INT 20
20364: PUSH
20365: LD_INT 21
20367: PUSH
20368: LD_INT 22
20370: PUSH
20371: LD_INT 23
20373: PUSH
20374: LD_INT 25
20376: PUSH
20377: LD_INT 26
20379: PUSH
20380: LD_INT 28
20382: PUSH
20383: LD_INT 30
20385: PUSH
20386: LD_INT 31
20388: PUSH
20389: LD_INT 32
20391: PUSH
20392: LD_INT 36
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 101
20420: PUSH
20421: LD_INT 102
20423: PUSH
20424: LD_INT 103
20426: PUSH
20427: LD_INT 105
20429: PUSH
20430: LD_INT 106
20432: PUSH
20433: LD_INT 108
20435: PUSH
20436: LD_INT 109
20438: PUSH
20439: LD_INT 112
20441: PUSH
20442: LD_INT 114
20444: PUSH
20445: LD_INT 116
20447: PUSH
20448: LD_INT 117
20450: PUSH
20451: LD_INT 118
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: ST_TO_ADDR
20472: GO 22571
20474: LD_INT 10
20476: DOUBLE
20477: EQUAL
20478: IFTRUE 20482
20480: GO 20678
20482: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20483: LD_ADDR_VAR 0 2
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 4
20493: PUSH
20494: LD_INT 5
20496: PUSH
20497: LD_INT 6
20499: PUSH
20500: LD_INT 7
20502: PUSH
20503: LD_INT 8
20505: PUSH
20506: LD_INT 9
20508: PUSH
20509: LD_INT 10
20511: PUSH
20512: LD_INT 11
20514: PUSH
20515: LD_INT 12
20517: PUSH
20518: LD_INT 13
20520: PUSH
20521: LD_INT 14
20523: PUSH
20524: LD_INT 15
20526: PUSH
20527: LD_INT 16
20529: PUSH
20530: LD_INT 17
20532: PUSH
20533: LD_INT 18
20535: PUSH
20536: LD_INT 19
20538: PUSH
20539: LD_INT 20
20541: PUSH
20542: LD_INT 21
20544: PUSH
20545: LD_INT 22
20547: PUSH
20548: LD_INT 23
20550: PUSH
20551: LD_INT 24
20553: PUSH
20554: LD_INT 25
20556: PUSH
20557: LD_INT 26
20559: PUSH
20560: LD_INT 28
20562: PUSH
20563: LD_INT 30
20565: PUSH
20566: LD_INT 31
20568: PUSH
20569: LD_INT 32
20571: PUSH
20572: LD_INT 36
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 101
20608: PUSH
20609: LD_INT 102
20611: PUSH
20612: LD_INT 103
20614: PUSH
20615: LD_INT 104
20617: PUSH
20618: LD_INT 105
20620: PUSH
20621: LD_INT 106
20623: PUSH
20624: LD_INT 107
20626: PUSH
20627: LD_INT 108
20629: PUSH
20630: LD_INT 109
20632: PUSH
20633: LD_INT 110
20635: PUSH
20636: LD_INT 111
20638: PUSH
20639: LD_INT 112
20641: PUSH
20642: LD_INT 114
20644: PUSH
20645: LD_INT 116
20647: PUSH
20648: LD_INT 117
20650: PUSH
20651: LD_INT 118
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: ST_TO_ADDR
20676: GO 22571
20678: LD_INT 11
20680: DOUBLE
20681: EQUAL
20682: IFTRUE 20686
20684: GO 20890
20686: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20687: LD_ADDR_VAR 0 2
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: LD_INT 3
20697: PUSH
20698: LD_INT 4
20700: PUSH
20701: LD_INT 5
20703: PUSH
20704: LD_INT 6
20706: PUSH
20707: LD_INT 7
20709: PUSH
20710: LD_INT 8
20712: PUSH
20713: LD_INT 9
20715: PUSH
20716: LD_INT 10
20718: PUSH
20719: LD_INT 11
20721: PUSH
20722: LD_INT 12
20724: PUSH
20725: LD_INT 13
20727: PUSH
20728: LD_INT 14
20730: PUSH
20731: LD_INT 15
20733: PUSH
20734: LD_INT 16
20736: PUSH
20737: LD_INT 17
20739: PUSH
20740: LD_INT 18
20742: PUSH
20743: LD_INT 19
20745: PUSH
20746: LD_INT 20
20748: PUSH
20749: LD_INT 21
20751: PUSH
20752: LD_INT 22
20754: PUSH
20755: LD_INT 23
20757: PUSH
20758: LD_INT 24
20760: PUSH
20761: LD_INT 25
20763: PUSH
20764: LD_INT 26
20766: PUSH
20767: LD_INT 28
20769: PUSH
20770: LD_INT 30
20772: PUSH
20773: LD_INT 31
20775: PUSH
20776: LD_INT 32
20778: PUSH
20779: LD_INT 34
20781: PUSH
20782: LD_INT 36
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 101
20820: PUSH
20821: LD_INT 102
20823: PUSH
20824: LD_INT 103
20826: PUSH
20827: LD_INT 104
20829: PUSH
20830: LD_INT 105
20832: PUSH
20833: LD_INT 106
20835: PUSH
20836: LD_INT 107
20838: PUSH
20839: LD_INT 108
20841: PUSH
20842: LD_INT 109
20844: PUSH
20845: LD_INT 110
20847: PUSH
20848: LD_INT 111
20850: PUSH
20851: LD_INT 112
20853: PUSH
20854: LD_INT 114
20856: PUSH
20857: LD_INT 116
20859: PUSH
20860: LD_INT 117
20862: PUSH
20863: LD_INT 118
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: ST_TO_ADDR
20888: GO 22571
20890: LD_INT 12
20892: DOUBLE
20893: EQUAL
20894: IFTRUE 20898
20896: GO 21118
20898: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20899: LD_ADDR_VAR 0 2
20903: PUSH
20904: LD_INT 1
20906: PUSH
20907: LD_INT 2
20909: PUSH
20910: LD_INT 3
20912: PUSH
20913: LD_INT 4
20915: PUSH
20916: LD_INT 5
20918: PUSH
20919: LD_INT 6
20921: PUSH
20922: LD_INT 7
20924: PUSH
20925: LD_INT 8
20927: PUSH
20928: LD_INT 9
20930: PUSH
20931: LD_INT 10
20933: PUSH
20934: LD_INT 11
20936: PUSH
20937: LD_INT 12
20939: PUSH
20940: LD_INT 13
20942: PUSH
20943: LD_INT 14
20945: PUSH
20946: LD_INT 15
20948: PUSH
20949: LD_INT 16
20951: PUSH
20952: LD_INT 17
20954: PUSH
20955: LD_INT 18
20957: PUSH
20958: LD_INT 19
20960: PUSH
20961: LD_INT 20
20963: PUSH
20964: LD_INT 21
20966: PUSH
20967: LD_INT 22
20969: PUSH
20970: LD_INT 23
20972: PUSH
20973: LD_INT 24
20975: PUSH
20976: LD_INT 25
20978: PUSH
20979: LD_INT 26
20981: PUSH
20982: LD_INT 27
20984: PUSH
20985: LD_INT 28
20987: PUSH
20988: LD_INT 30
20990: PUSH
20991: LD_INT 31
20993: PUSH
20994: LD_INT 32
20996: PUSH
20997: LD_INT 33
20999: PUSH
21000: LD_INT 34
21002: PUSH
21003: LD_INT 36
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 101
21044: PUSH
21045: LD_INT 102
21047: PUSH
21048: LD_INT 103
21050: PUSH
21051: LD_INT 104
21053: PUSH
21054: LD_INT 105
21056: PUSH
21057: LD_INT 106
21059: PUSH
21060: LD_INT 107
21062: PUSH
21063: LD_INT 108
21065: PUSH
21066: LD_INT 109
21068: PUSH
21069: LD_INT 110
21071: PUSH
21072: LD_INT 111
21074: PUSH
21075: LD_INT 112
21077: PUSH
21078: LD_INT 113
21080: PUSH
21081: LD_INT 114
21083: PUSH
21084: LD_INT 116
21086: PUSH
21087: LD_INT 117
21089: PUSH
21090: LD_INT 118
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: ST_TO_ADDR
21116: GO 22571
21118: LD_INT 13
21120: DOUBLE
21121: EQUAL
21122: IFTRUE 21126
21124: GO 21334
21126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21127: LD_ADDR_VAR 0 2
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: LD_INT 2
21137: PUSH
21138: LD_INT 3
21140: PUSH
21141: LD_INT 4
21143: PUSH
21144: LD_INT 5
21146: PUSH
21147: LD_INT 8
21149: PUSH
21150: LD_INT 9
21152: PUSH
21153: LD_INT 10
21155: PUSH
21156: LD_INT 11
21158: PUSH
21159: LD_INT 12
21161: PUSH
21162: LD_INT 14
21164: PUSH
21165: LD_INT 15
21167: PUSH
21168: LD_INT 16
21170: PUSH
21171: LD_INT 17
21173: PUSH
21174: LD_INT 18
21176: PUSH
21177: LD_INT 19
21179: PUSH
21180: LD_INT 20
21182: PUSH
21183: LD_INT 21
21185: PUSH
21186: LD_INT 22
21188: PUSH
21189: LD_INT 23
21191: PUSH
21192: LD_INT 24
21194: PUSH
21195: LD_INT 25
21197: PUSH
21198: LD_INT 26
21200: PUSH
21201: LD_INT 27
21203: PUSH
21204: LD_INT 28
21206: PUSH
21207: LD_INT 30
21209: PUSH
21210: LD_INT 31
21212: PUSH
21213: LD_INT 32
21215: PUSH
21216: LD_INT 33
21218: PUSH
21219: LD_INT 34
21221: PUSH
21222: LD_INT 36
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 101
21260: PUSH
21261: LD_INT 102
21263: PUSH
21264: LD_INT 103
21266: PUSH
21267: LD_INT 104
21269: PUSH
21270: LD_INT 105
21272: PUSH
21273: LD_INT 106
21275: PUSH
21276: LD_INT 107
21278: PUSH
21279: LD_INT 108
21281: PUSH
21282: LD_INT 109
21284: PUSH
21285: LD_INT 110
21287: PUSH
21288: LD_INT 111
21290: PUSH
21291: LD_INT 112
21293: PUSH
21294: LD_INT 113
21296: PUSH
21297: LD_INT 114
21299: PUSH
21300: LD_INT 116
21302: PUSH
21303: LD_INT 117
21305: PUSH
21306: LD_INT 118
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: ST_TO_ADDR
21332: GO 22571
21334: LD_INT 14
21336: DOUBLE
21337: EQUAL
21338: IFTRUE 21342
21340: GO 21566
21342: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21343: LD_ADDR_VAR 0 2
21347: PUSH
21348: LD_INT 1
21350: PUSH
21351: LD_INT 2
21353: PUSH
21354: LD_INT 3
21356: PUSH
21357: LD_INT 4
21359: PUSH
21360: LD_INT 5
21362: PUSH
21363: LD_INT 6
21365: PUSH
21366: LD_INT 7
21368: PUSH
21369: LD_INT 8
21371: PUSH
21372: LD_INT 9
21374: PUSH
21375: LD_INT 10
21377: PUSH
21378: LD_INT 11
21380: PUSH
21381: LD_INT 12
21383: PUSH
21384: LD_INT 13
21386: PUSH
21387: LD_INT 14
21389: PUSH
21390: LD_INT 15
21392: PUSH
21393: LD_INT 16
21395: PUSH
21396: LD_INT 17
21398: PUSH
21399: LD_INT 18
21401: PUSH
21402: LD_INT 19
21404: PUSH
21405: LD_INT 20
21407: PUSH
21408: LD_INT 21
21410: PUSH
21411: LD_INT 22
21413: PUSH
21414: LD_INT 23
21416: PUSH
21417: LD_INT 24
21419: PUSH
21420: LD_INT 25
21422: PUSH
21423: LD_INT 26
21425: PUSH
21426: LD_INT 27
21428: PUSH
21429: LD_INT 28
21431: PUSH
21432: LD_INT 29
21434: PUSH
21435: LD_INT 30
21437: PUSH
21438: LD_INT 31
21440: PUSH
21441: LD_INT 32
21443: PUSH
21444: LD_INT 33
21446: PUSH
21447: LD_INT 34
21449: PUSH
21450: LD_INT 36
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 101
21492: PUSH
21493: LD_INT 102
21495: PUSH
21496: LD_INT 103
21498: PUSH
21499: LD_INT 104
21501: PUSH
21502: LD_INT 105
21504: PUSH
21505: LD_INT 106
21507: PUSH
21508: LD_INT 107
21510: PUSH
21511: LD_INT 108
21513: PUSH
21514: LD_INT 109
21516: PUSH
21517: LD_INT 110
21519: PUSH
21520: LD_INT 111
21522: PUSH
21523: LD_INT 112
21525: PUSH
21526: LD_INT 113
21528: PUSH
21529: LD_INT 114
21531: PUSH
21532: LD_INT 116
21534: PUSH
21535: LD_INT 117
21537: PUSH
21538: LD_INT 118
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: ST_TO_ADDR
21564: GO 22571
21566: LD_INT 15
21568: DOUBLE
21569: EQUAL
21570: IFTRUE 21574
21572: GO 21798
21574: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21575: LD_ADDR_VAR 0 2
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: LD_INT 2
21585: PUSH
21586: LD_INT 3
21588: PUSH
21589: LD_INT 4
21591: PUSH
21592: LD_INT 5
21594: PUSH
21595: LD_INT 6
21597: PUSH
21598: LD_INT 7
21600: PUSH
21601: LD_INT 8
21603: PUSH
21604: LD_INT 9
21606: PUSH
21607: LD_INT 10
21609: PUSH
21610: LD_INT 11
21612: PUSH
21613: LD_INT 12
21615: PUSH
21616: LD_INT 13
21618: PUSH
21619: LD_INT 14
21621: PUSH
21622: LD_INT 15
21624: PUSH
21625: LD_INT 16
21627: PUSH
21628: LD_INT 17
21630: PUSH
21631: LD_INT 18
21633: PUSH
21634: LD_INT 19
21636: PUSH
21637: LD_INT 20
21639: PUSH
21640: LD_INT 21
21642: PUSH
21643: LD_INT 22
21645: PUSH
21646: LD_INT 23
21648: PUSH
21649: LD_INT 24
21651: PUSH
21652: LD_INT 25
21654: PUSH
21655: LD_INT 26
21657: PUSH
21658: LD_INT 27
21660: PUSH
21661: LD_INT 28
21663: PUSH
21664: LD_INT 29
21666: PUSH
21667: LD_INT 30
21669: PUSH
21670: LD_INT 31
21672: PUSH
21673: LD_INT 32
21675: PUSH
21676: LD_INT 33
21678: PUSH
21679: LD_INT 34
21681: PUSH
21682: LD_INT 36
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 101
21724: PUSH
21725: LD_INT 102
21727: PUSH
21728: LD_INT 103
21730: PUSH
21731: LD_INT 104
21733: PUSH
21734: LD_INT 105
21736: PUSH
21737: LD_INT 106
21739: PUSH
21740: LD_INT 107
21742: PUSH
21743: LD_INT 108
21745: PUSH
21746: LD_INT 109
21748: PUSH
21749: LD_INT 110
21751: PUSH
21752: LD_INT 111
21754: PUSH
21755: LD_INT 112
21757: PUSH
21758: LD_INT 113
21760: PUSH
21761: LD_INT 114
21763: PUSH
21764: LD_INT 116
21766: PUSH
21767: LD_INT 117
21769: PUSH
21770: LD_INT 118
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: ST_TO_ADDR
21796: GO 22571
21798: LD_INT 16
21800: DOUBLE
21801: EQUAL
21802: IFTRUE 21806
21804: GO 21942
21806: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21807: LD_ADDR_VAR 0 2
21811: PUSH
21812: LD_INT 2
21814: PUSH
21815: LD_INT 4
21817: PUSH
21818: LD_INT 5
21820: PUSH
21821: LD_INT 7
21823: PUSH
21824: LD_INT 11
21826: PUSH
21827: LD_INT 12
21829: PUSH
21830: LD_INT 15
21832: PUSH
21833: LD_INT 16
21835: PUSH
21836: LD_INT 20
21838: PUSH
21839: LD_INT 21
21841: PUSH
21842: LD_INT 22
21844: PUSH
21845: LD_INT 23
21847: PUSH
21848: LD_INT 25
21850: PUSH
21851: LD_INT 26
21853: PUSH
21854: LD_INT 30
21856: PUSH
21857: LD_INT 31
21859: PUSH
21860: LD_INT 32
21862: PUSH
21863: LD_INT 33
21865: PUSH
21866: LD_INT 34
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 101
21892: PUSH
21893: LD_INT 102
21895: PUSH
21896: LD_INT 103
21898: PUSH
21899: LD_INT 106
21901: PUSH
21902: LD_INT 108
21904: PUSH
21905: LD_INT 112
21907: PUSH
21908: LD_INT 113
21910: PUSH
21911: LD_INT 114
21913: PUSH
21914: LD_INT 116
21916: PUSH
21917: LD_INT 117
21919: PUSH
21920: LD_INT 118
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: ST_TO_ADDR
21940: GO 22571
21942: LD_INT 17
21944: DOUBLE
21945: EQUAL
21946: IFTRUE 21950
21948: GO 22174
21950: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21951: LD_ADDR_VAR 0 2
21955: PUSH
21956: LD_INT 1
21958: PUSH
21959: LD_INT 2
21961: PUSH
21962: LD_INT 3
21964: PUSH
21965: LD_INT 4
21967: PUSH
21968: LD_INT 5
21970: PUSH
21971: LD_INT 6
21973: PUSH
21974: LD_INT 7
21976: PUSH
21977: LD_INT 8
21979: PUSH
21980: LD_INT 9
21982: PUSH
21983: LD_INT 10
21985: PUSH
21986: LD_INT 11
21988: PUSH
21989: LD_INT 12
21991: PUSH
21992: LD_INT 13
21994: PUSH
21995: LD_INT 14
21997: PUSH
21998: LD_INT 15
22000: PUSH
22001: LD_INT 16
22003: PUSH
22004: LD_INT 17
22006: PUSH
22007: LD_INT 18
22009: PUSH
22010: LD_INT 19
22012: PUSH
22013: LD_INT 20
22015: PUSH
22016: LD_INT 21
22018: PUSH
22019: LD_INT 22
22021: PUSH
22022: LD_INT 23
22024: PUSH
22025: LD_INT 24
22027: PUSH
22028: LD_INT 25
22030: PUSH
22031: LD_INT 26
22033: PUSH
22034: LD_INT 27
22036: PUSH
22037: LD_INT 28
22039: PUSH
22040: LD_INT 29
22042: PUSH
22043: LD_INT 30
22045: PUSH
22046: LD_INT 31
22048: PUSH
22049: LD_INT 32
22051: PUSH
22052: LD_INT 33
22054: PUSH
22055: LD_INT 34
22057: PUSH
22058: LD_INT 36
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 101
22100: PUSH
22101: LD_INT 102
22103: PUSH
22104: LD_INT 103
22106: PUSH
22107: LD_INT 104
22109: PUSH
22110: LD_INT 105
22112: PUSH
22113: LD_INT 106
22115: PUSH
22116: LD_INT 107
22118: PUSH
22119: LD_INT 108
22121: PUSH
22122: LD_INT 109
22124: PUSH
22125: LD_INT 110
22127: PUSH
22128: LD_INT 111
22130: PUSH
22131: LD_INT 112
22133: PUSH
22134: LD_INT 113
22136: PUSH
22137: LD_INT 114
22139: PUSH
22140: LD_INT 116
22142: PUSH
22143: LD_INT 117
22145: PUSH
22146: LD_INT 118
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: ST_TO_ADDR
22172: GO 22571
22174: LD_INT 18
22176: DOUBLE
22177: EQUAL
22178: IFTRUE 22182
22180: GO 22330
22182: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22183: LD_ADDR_VAR 0 2
22187: PUSH
22188: LD_INT 2
22190: PUSH
22191: LD_INT 4
22193: PUSH
22194: LD_INT 5
22196: PUSH
22197: LD_INT 7
22199: PUSH
22200: LD_INT 11
22202: PUSH
22203: LD_INT 12
22205: PUSH
22206: LD_INT 15
22208: PUSH
22209: LD_INT 16
22211: PUSH
22212: LD_INT 20
22214: PUSH
22215: LD_INT 21
22217: PUSH
22218: LD_INT 22
22220: PUSH
22221: LD_INT 23
22223: PUSH
22224: LD_INT 25
22226: PUSH
22227: LD_INT 26
22229: PUSH
22230: LD_INT 30
22232: PUSH
22233: LD_INT 31
22235: PUSH
22236: LD_INT 32
22238: PUSH
22239: LD_INT 33
22241: PUSH
22242: LD_INT 34
22244: PUSH
22245: LD_INT 35
22247: PUSH
22248: LD_INT 36
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 101
22276: PUSH
22277: LD_INT 102
22279: PUSH
22280: LD_INT 103
22282: PUSH
22283: LD_INT 106
22285: PUSH
22286: LD_INT 108
22288: PUSH
22289: LD_INT 112
22291: PUSH
22292: LD_INT 113
22294: PUSH
22295: LD_INT 114
22297: PUSH
22298: LD_INT 115
22300: PUSH
22301: LD_INT 116
22303: PUSH
22304: LD_INT 117
22306: PUSH
22307: LD_INT 118
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: ST_TO_ADDR
22328: GO 22571
22330: LD_INT 19
22332: DOUBLE
22333: EQUAL
22334: IFTRUE 22338
22336: GO 22570
22338: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22339: LD_ADDR_VAR 0 2
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: LD_INT 2
22349: PUSH
22350: LD_INT 3
22352: PUSH
22353: LD_INT 4
22355: PUSH
22356: LD_INT 5
22358: PUSH
22359: LD_INT 6
22361: PUSH
22362: LD_INT 7
22364: PUSH
22365: LD_INT 8
22367: PUSH
22368: LD_INT 9
22370: PUSH
22371: LD_INT 10
22373: PUSH
22374: LD_INT 11
22376: PUSH
22377: LD_INT 12
22379: PUSH
22380: LD_INT 13
22382: PUSH
22383: LD_INT 14
22385: PUSH
22386: LD_INT 15
22388: PUSH
22389: LD_INT 16
22391: PUSH
22392: LD_INT 17
22394: PUSH
22395: LD_INT 18
22397: PUSH
22398: LD_INT 19
22400: PUSH
22401: LD_INT 20
22403: PUSH
22404: LD_INT 21
22406: PUSH
22407: LD_INT 22
22409: PUSH
22410: LD_INT 23
22412: PUSH
22413: LD_INT 24
22415: PUSH
22416: LD_INT 25
22418: PUSH
22419: LD_INT 26
22421: PUSH
22422: LD_INT 27
22424: PUSH
22425: LD_INT 28
22427: PUSH
22428: LD_INT 29
22430: PUSH
22431: LD_INT 30
22433: PUSH
22434: LD_INT 31
22436: PUSH
22437: LD_INT 32
22439: PUSH
22440: LD_INT 33
22442: PUSH
22443: LD_INT 34
22445: PUSH
22446: LD_INT 35
22448: PUSH
22449: LD_INT 36
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 101
22492: PUSH
22493: LD_INT 102
22495: PUSH
22496: LD_INT 103
22498: PUSH
22499: LD_INT 104
22501: PUSH
22502: LD_INT 105
22504: PUSH
22505: LD_INT 106
22507: PUSH
22508: LD_INT 107
22510: PUSH
22511: LD_INT 108
22513: PUSH
22514: LD_INT 109
22516: PUSH
22517: LD_INT 110
22519: PUSH
22520: LD_INT 111
22522: PUSH
22523: LD_INT 112
22525: PUSH
22526: LD_INT 113
22528: PUSH
22529: LD_INT 114
22531: PUSH
22532: LD_INT 115
22534: PUSH
22535: LD_INT 116
22537: PUSH
22538: LD_INT 117
22540: PUSH
22541: LD_INT 118
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: ST_TO_ADDR
22568: GO 22571
22570: POP
// end else
22571: GO 22802
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22573: LD_ADDR_VAR 0 2
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: LD_INT 2
22583: PUSH
22584: LD_INT 3
22586: PUSH
22587: LD_INT 4
22589: PUSH
22590: LD_INT 5
22592: PUSH
22593: LD_INT 6
22595: PUSH
22596: LD_INT 7
22598: PUSH
22599: LD_INT 8
22601: PUSH
22602: LD_INT 9
22604: PUSH
22605: LD_INT 10
22607: PUSH
22608: LD_INT 11
22610: PUSH
22611: LD_INT 12
22613: PUSH
22614: LD_INT 13
22616: PUSH
22617: LD_INT 14
22619: PUSH
22620: LD_INT 15
22622: PUSH
22623: LD_INT 16
22625: PUSH
22626: LD_INT 17
22628: PUSH
22629: LD_INT 18
22631: PUSH
22632: LD_INT 19
22634: PUSH
22635: LD_INT 20
22637: PUSH
22638: LD_INT 21
22640: PUSH
22641: LD_INT 22
22643: PUSH
22644: LD_INT 23
22646: PUSH
22647: LD_INT 24
22649: PUSH
22650: LD_INT 25
22652: PUSH
22653: LD_INT 26
22655: PUSH
22656: LD_INT 27
22658: PUSH
22659: LD_INT 28
22661: PUSH
22662: LD_INT 29
22664: PUSH
22665: LD_INT 30
22667: PUSH
22668: LD_INT 31
22670: PUSH
22671: LD_INT 32
22673: PUSH
22674: LD_INT 33
22676: PUSH
22677: LD_INT 34
22679: PUSH
22680: LD_INT 35
22682: PUSH
22683: LD_INT 36
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 101
22726: PUSH
22727: LD_INT 102
22729: PUSH
22730: LD_INT 103
22732: PUSH
22733: LD_INT 104
22735: PUSH
22736: LD_INT 105
22738: PUSH
22739: LD_INT 106
22741: PUSH
22742: LD_INT 107
22744: PUSH
22745: LD_INT 108
22747: PUSH
22748: LD_INT 109
22750: PUSH
22751: LD_INT 110
22753: PUSH
22754: LD_INT 111
22756: PUSH
22757: LD_INT 112
22759: PUSH
22760: LD_INT 113
22762: PUSH
22763: LD_INT 114
22765: PUSH
22766: LD_INT 115
22768: PUSH
22769: LD_INT 116
22771: PUSH
22772: LD_INT 117
22774: PUSH
22775: LD_INT 118
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: ST_TO_ADDR
// if result then
22802: LD_VAR 0 2
22806: IFFALSE 23592
// begin normal :=  ;
22808: LD_ADDR_VAR 0 5
22812: PUSH
22813: LD_STRING 
22815: ST_TO_ADDR
// hardcore :=  ;
22816: LD_ADDR_VAR 0 6
22820: PUSH
22821: LD_STRING 
22823: ST_TO_ADDR
// active :=  ;
22824: LD_ADDR_VAR 0 7
22828: PUSH
22829: LD_STRING 
22831: ST_TO_ADDR
// for i = 1 to normalCounter do
22832: LD_ADDR_VAR 0 8
22836: PUSH
22837: DOUBLE
22838: LD_INT 1
22840: DEC
22841: ST_TO_ADDR
22842: LD_EXP 53
22846: PUSH
22847: FOR_TO
22848: IFFALSE 22949
// begin tmp := 0 ;
22850: LD_ADDR_VAR 0 3
22854: PUSH
22855: LD_STRING 0
22857: ST_TO_ADDR
// if result [ 1 ] then
22858: LD_VAR 0 2
22862: PUSH
22863: LD_INT 1
22865: ARRAY
22866: IFFALSE 22931
// if result [ 1 ] [ 1 ] = i then
22868: LD_VAR 0 2
22872: PUSH
22873: LD_INT 1
22875: ARRAY
22876: PUSH
22877: LD_INT 1
22879: ARRAY
22880: PUSH
22881: LD_VAR 0 8
22885: EQUAL
22886: IFFALSE 22931
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22888: LD_ADDR_VAR 0 2
22892: PUSH
22893: LD_VAR 0 2
22897: PPUSH
22898: LD_INT 1
22900: PPUSH
22901: LD_VAR 0 2
22905: PUSH
22906: LD_INT 1
22908: ARRAY
22909: PPUSH
22910: LD_INT 1
22912: PPUSH
22913: CALL_OW 3
22917: PPUSH
22918: CALL_OW 1
22922: ST_TO_ADDR
// tmp := 1 ;
22923: LD_ADDR_VAR 0 3
22927: PUSH
22928: LD_STRING 1
22930: ST_TO_ADDR
// end ; normal := normal & tmp ;
22931: LD_ADDR_VAR 0 5
22935: PUSH
22936: LD_VAR 0 5
22940: PUSH
22941: LD_VAR 0 3
22945: STR
22946: ST_TO_ADDR
// end ;
22947: GO 22847
22949: POP
22950: POP
// for i = 1 to hardcoreCounter do
22951: LD_ADDR_VAR 0 8
22955: PUSH
22956: DOUBLE
22957: LD_INT 1
22959: DEC
22960: ST_TO_ADDR
22961: LD_EXP 54
22965: PUSH
22966: FOR_TO
22967: IFFALSE 23072
// begin tmp := 0 ;
22969: LD_ADDR_VAR 0 3
22973: PUSH
22974: LD_STRING 0
22976: ST_TO_ADDR
// if result [ 2 ] then
22977: LD_VAR 0 2
22981: PUSH
22982: LD_INT 2
22984: ARRAY
22985: IFFALSE 23054
// if result [ 2 ] [ 1 ] = 100 + i then
22987: LD_VAR 0 2
22991: PUSH
22992: LD_INT 2
22994: ARRAY
22995: PUSH
22996: LD_INT 1
22998: ARRAY
22999: PUSH
23000: LD_INT 100
23002: PUSH
23003: LD_VAR 0 8
23007: PLUS
23008: EQUAL
23009: IFFALSE 23054
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23011: LD_ADDR_VAR 0 2
23015: PUSH
23016: LD_VAR 0 2
23020: PPUSH
23021: LD_INT 2
23023: PPUSH
23024: LD_VAR 0 2
23028: PUSH
23029: LD_INT 2
23031: ARRAY
23032: PPUSH
23033: LD_INT 1
23035: PPUSH
23036: CALL_OW 3
23040: PPUSH
23041: CALL_OW 1
23045: ST_TO_ADDR
// tmp := 1 ;
23046: LD_ADDR_VAR 0 3
23050: PUSH
23051: LD_STRING 1
23053: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23054: LD_ADDR_VAR 0 6
23058: PUSH
23059: LD_VAR 0 6
23063: PUSH
23064: LD_VAR 0 3
23068: STR
23069: ST_TO_ADDR
// end ;
23070: GO 22966
23072: POP
23073: POP
// if isGameLoad then
23074: LD_VAR 0 1
23078: IFFALSE 23553
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23080: LD_ADDR_VAR 0 4
23084: PUSH
23085: LD_EXP 57
23089: PUSH
23090: LD_EXP 56
23094: PUSH
23095: LD_EXP 58
23099: PUSH
23100: LD_EXP 55
23104: PUSH
23105: LD_EXP 59
23109: PUSH
23110: LD_EXP 60
23114: PUSH
23115: LD_EXP 61
23119: PUSH
23120: LD_EXP 62
23124: PUSH
23125: LD_EXP 63
23129: PUSH
23130: LD_EXP 64
23134: PUSH
23135: LD_EXP 65
23139: PUSH
23140: LD_EXP 66
23144: PUSH
23145: LD_EXP 67
23149: PUSH
23150: LD_EXP 68
23154: PUSH
23155: LD_EXP 76
23159: PUSH
23160: LD_EXP 77
23164: PUSH
23165: LD_EXP 78
23169: PUSH
23170: LD_EXP 79
23174: PUSH
23175: LD_EXP 81
23179: PUSH
23180: LD_EXP 82
23184: PUSH
23185: LD_EXP 83
23189: PUSH
23190: LD_EXP 86
23194: PUSH
23195: LD_EXP 88
23199: PUSH
23200: LD_EXP 89
23204: PUSH
23205: LD_EXP 90
23209: PUSH
23210: LD_EXP 92
23214: PUSH
23215: LD_EXP 93
23219: PUSH
23220: LD_EXP 96
23224: PUSH
23225: LD_EXP 97
23229: PUSH
23230: LD_EXP 98
23234: PUSH
23235: LD_EXP 99
23239: PUSH
23240: LD_EXP 100
23244: PUSH
23245: LD_EXP 101
23249: PUSH
23250: LD_EXP 102
23254: PUSH
23255: LD_EXP 103
23259: PUSH
23260: LD_EXP 104
23264: PUSH
23265: LD_EXP 69
23269: PUSH
23270: LD_EXP 70
23274: PUSH
23275: LD_EXP 73
23279: PUSH
23280: LD_EXP 74
23284: PUSH
23285: LD_EXP 75
23289: PUSH
23290: LD_EXP 71
23294: PUSH
23295: LD_EXP 72
23299: PUSH
23300: LD_EXP 80
23304: PUSH
23305: LD_EXP 84
23309: PUSH
23310: LD_EXP 85
23314: PUSH
23315: LD_EXP 87
23319: PUSH
23320: LD_EXP 91
23324: PUSH
23325: LD_EXP 94
23329: PUSH
23330: LD_EXP 95
23334: PUSH
23335: LD_EXP 105
23339: PUSH
23340: LD_EXP 106
23344: PUSH
23345: LD_EXP 107
23349: PUSH
23350: LD_EXP 108
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: ST_TO_ADDR
// tmp :=  ;
23411: LD_ADDR_VAR 0 3
23415: PUSH
23416: LD_STRING 
23418: ST_TO_ADDR
// for i = 1 to normalCounter do
23419: LD_ADDR_VAR 0 8
23423: PUSH
23424: DOUBLE
23425: LD_INT 1
23427: DEC
23428: ST_TO_ADDR
23429: LD_EXP 53
23433: PUSH
23434: FOR_TO
23435: IFFALSE 23471
// begin if flags [ i ] then
23437: LD_VAR 0 4
23441: PUSH
23442: LD_VAR 0 8
23446: ARRAY
23447: IFFALSE 23469
// tmp := tmp & i & ; ;
23449: LD_ADDR_VAR 0 3
23453: PUSH
23454: LD_VAR 0 3
23458: PUSH
23459: LD_VAR 0 8
23463: STR
23464: PUSH
23465: LD_STRING ;
23467: STR
23468: ST_TO_ADDR
// end ;
23469: GO 23434
23471: POP
23472: POP
// for i = 1 to hardcoreCounter do
23473: LD_ADDR_VAR 0 8
23477: PUSH
23478: DOUBLE
23479: LD_INT 1
23481: DEC
23482: ST_TO_ADDR
23483: LD_EXP 54
23487: PUSH
23488: FOR_TO
23489: IFFALSE 23535
// begin if flags [ normalCounter + i ] then
23491: LD_VAR 0 4
23495: PUSH
23496: LD_EXP 53
23500: PUSH
23501: LD_VAR 0 8
23505: PLUS
23506: ARRAY
23507: IFFALSE 23533
// tmp := tmp & ( 100 + i ) & ; ;
23509: LD_ADDR_VAR 0 3
23513: PUSH
23514: LD_VAR 0 3
23518: PUSH
23519: LD_INT 100
23521: PUSH
23522: LD_VAR 0 8
23526: PLUS
23527: STR
23528: PUSH
23529: LD_STRING ;
23531: STR
23532: ST_TO_ADDR
// end ;
23533: GO 23488
23535: POP
23536: POP
// if tmp then
23537: LD_VAR 0 3
23541: IFFALSE 23553
// active := tmp ;
23543: LD_ADDR_VAR 0 7
23547: PUSH
23548: LD_VAR 0 3
23552: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23553: LD_STRING getStreamItemsFromMission("
23555: PUSH
23556: LD_VAR 0 5
23560: STR
23561: PUSH
23562: LD_STRING ","
23564: STR
23565: PUSH
23566: LD_VAR 0 6
23570: STR
23571: PUSH
23572: LD_STRING ","
23574: STR
23575: PUSH
23576: LD_VAR 0 7
23580: STR
23581: PUSH
23582: LD_STRING ")
23584: STR
23585: PPUSH
23586: CALL_OW 559
// end else
23590: GO 23599
// ToLua ( getStreamItemsFromMission("","","") ) ;
23592: LD_STRING getStreamItemsFromMission("","","")
23594: PPUSH
23595: CALL_OW 559
// end ;
23599: LD_VAR 0 2
23603: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23604: LD_EXP 52
23608: PUSH
23609: LD_EXP 57
23613: AND
23614: IFFALSE 23738
23616: GO 23618
23618: DISABLE
23619: LD_INT 0
23621: PPUSH
23622: PPUSH
// begin enable ;
23623: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23624: LD_ADDR_VAR 0 2
23628: PUSH
23629: LD_INT 22
23631: PUSH
23632: LD_OWVAR 2
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 2
23643: PUSH
23644: LD_INT 34
23646: PUSH
23647: LD_INT 7
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 34
23656: PUSH
23657: LD_INT 45
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 34
23666: PUSH
23667: LD_INT 28
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 34
23676: PUSH
23677: LD_INT 47
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PPUSH
23695: CALL_OW 69
23699: ST_TO_ADDR
// if not tmp then
23700: LD_VAR 0 2
23704: NOT
23705: IFFALSE 23709
// exit ;
23707: GO 23738
// for i in tmp do
23709: LD_ADDR_VAR 0 1
23713: PUSH
23714: LD_VAR 0 2
23718: PUSH
23719: FOR_IN
23720: IFFALSE 23736
// begin SetLives ( i , 0 ) ;
23722: LD_VAR 0 1
23726: PPUSH
23727: LD_INT 0
23729: PPUSH
23730: CALL_OW 234
// end ;
23734: GO 23719
23736: POP
23737: POP
// end ;
23738: PPOPN 2
23740: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23741: LD_EXP 52
23745: PUSH
23746: LD_EXP 58
23750: AND
23751: IFFALSE 23835
23753: GO 23755
23755: DISABLE
23756: LD_INT 0
23758: PPUSH
23759: PPUSH
// begin enable ;
23760: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23761: LD_ADDR_VAR 0 2
23765: PUSH
23766: LD_INT 22
23768: PUSH
23769: LD_OWVAR 2
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 32
23780: PUSH
23781: LD_INT 3
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PPUSH
23792: CALL_OW 69
23796: ST_TO_ADDR
// if not tmp then
23797: LD_VAR 0 2
23801: NOT
23802: IFFALSE 23806
// exit ;
23804: GO 23835
// for i in tmp do
23806: LD_ADDR_VAR 0 1
23810: PUSH
23811: LD_VAR 0 2
23815: PUSH
23816: FOR_IN
23817: IFFALSE 23833
// begin SetLives ( i , 0 ) ;
23819: LD_VAR 0 1
23823: PPUSH
23824: LD_INT 0
23826: PPUSH
23827: CALL_OW 234
// end ;
23831: GO 23816
23833: POP
23834: POP
// end ;
23835: PPOPN 2
23837: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23838: LD_EXP 52
23842: PUSH
23843: LD_EXP 55
23847: AND
23848: IFFALSE 23941
23850: GO 23852
23852: DISABLE
23853: LD_INT 0
23855: PPUSH
// begin enable ;
23856: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23857: LD_ADDR_VAR 0 1
23861: PUSH
23862: LD_INT 22
23864: PUSH
23865: LD_OWVAR 2
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: LD_INT 25
23879: PUSH
23880: LD_INT 5
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 25
23889: PUSH
23890: LD_INT 9
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 25
23899: PUSH
23900: LD_INT 8
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PPUSH
23917: CALL_OW 69
23921: PUSH
23922: FOR_IN
23923: IFFALSE 23939
// begin SetClass ( i , 1 ) ;
23925: LD_VAR 0 1
23929: PPUSH
23930: LD_INT 1
23932: PPUSH
23933: CALL_OW 336
// end ;
23937: GO 23922
23939: POP
23940: POP
// end ;
23941: PPOPN 1
23943: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23944: LD_EXP 52
23948: PUSH
23949: LD_EXP 56
23953: AND
23954: PUSH
23955: LD_OWVAR 65
23959: PUSH
23960: LD_INT 7
23962: LESS
23963: AND
23964: IFFALSE 23978
23966: GO 23968
23968: DISABLE
// begin enable ;
23969: ENABLE
// game_speed := 7 ;
23970: LD_ADDR_OWVAR 65
23974: PUSH
23975: LD_INT 7
23977: ST_TO_ADDR
// end ;
23978: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23979: LD_EXP 52
23983: PUSH
23984: LD_EXP 59
23988: AND
23989: IFFALSE 24191
23991: GO 23993
23993: DISABLE
23994: LD_INT 0
23996: PPUSH
23997: PPUSH
23998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23999: LD_ADDR_VAR 0 3
24003: PUSH
24004: LD_INT 81
24006: PUSH
24007: LD_OWVAR 2
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 21
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PPUSH
24030: CALL_OW 69
24034: ST_TO_ADDR
// if not tmp then
24035: LD_VAR 0 3
24039: NOT
24040: IFFALSE 24044
// exit ;
24042: GO 24191
// if tmp > 5 then
24044: LD_VAR 0 3
24048: PUSH
24049: LD_INT 5
24051: GREATER
24052: IFFALSE 24064
// k := 5 else
24054: LD_ADDR_VAR 0 2
24058: PUSH
24059: LD_INT 5
24061: ST_TO_ADDR
24062: GO 24074
// k := tmp ;
24064: LD_ADDR_VAR 0 2
24068: PUSH
24069: LD_VAR 0 3
24073: ST_TO_ADDR
// for i := 1 to k do
24074: LD_ADDR_VAR 0 1
24078: PUSH
24079: DOUBLE
24080: LD_INT 1
24082: DEC
24083: ST_TO_ADDR
24084: LD_VAR 0 2
24088: PUSH
24089: FOR_TO
24090: IFFALSE 24189
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24092: LD_VAR 0 3
24096: PUSH
24097: LD_VAR 0 1
24101: ARRAY
24102: PPUSH
24103: LD_VAR 0 1
24107: PUSH
24108: LD_INT 4
24110: MOD
24111: PUSH
24112: LD_INT 1
24114: PLUS
24115: PPUSH
24116: CALL_OW 259
24120: PUSH
24121: LD_INT 10
24123: LESS
24124: IFFALSE 24187
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24126: LD_VAR 0 3
24130: PUSH
24131: LD_VAR 0 1
24135: ARRAY
24136: PPUSH
24137: LD_VAR 0 1
24141: PUSH
24142: LD_INT 4
24144: MOD
24145: PUSH
24146: LD_INT 1
24148: PLUS
24149: PPUSH
24150: LD_VAR 0 3
24154: PUSH
24155: LD_VAR 0 1
24159: ARRAY
24160: PPUSH
24161: LD_VAR 0 1
24165: PUSH
24166: LD_INT 4
24168: MOD
24169: PUSH
24170: LD_INT 1
24172: PLUS
24173: PPUSH
24174: CALL_OW 259
24178: PUSH
24179: LD_INT 1
24181: PLUS
24182: PPUSH
24183: CALL_OW 237
24187: GO 24089
24189: POP
24190: POP
// end ;
24191: PPOPN 3
24193: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24194: LD_EXP 52
24198: PUSH
24199: LD_EXP 60
24203: AND
24204: IFFALSE 24224
24206: GO 24208
24208: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24209: LD_INT 4
24211: PPUSH
24212: LD_OWVAR 2
24216: PPUSH
24217: LD_INT 0
24219: PPUSH
24220: CALL_OW 324
24224: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24225: LD_EXP 52
24229: PUSH
24230: LD_EXP 89
24234: AND
24235: IFFALSE 24255
24237: GO 24239
24239: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24240: LD_INT 19
24242: PPUSH
24243: LD_OWVAR 2
24247: PPUSH
24248: LD_INT 0
24250: PPUSH
24251: CALL_OW 324
24255: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24256: LD_EXP 52
24260: PUSH
24261: LD_EXP 61
24265: AND
24266: IFFALSE 24368
24268: GO 24270
24270: DISABLE
24271: LD_INT 0
24273: PPUSH
24274: PPUSH
// begin enable ;
24275: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24276: LD_ADDR_VAR 0 2
24280: PUSH
24281: LD_INT 22
24283: PUSH
24284: LD_OWVAR 2
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 2
24295: PUSH
24296: LD_INT 34
24298: PUSH
24299: LD_INT 11
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 34
24308: PUSH
24309: LD_INT 30
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: LIST
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PPUSH
24325: CALL_OW 69
24329: ST_TO_ADDR
// if not tmp then
24330: LD_VAR 0 2
24334: NOT
24335: IFFALSE 24339
// exit ;
24337: GO 24368
// for i in tmp do
24339: LD_ADDR_VAR 0 1
24343: PUSH
24344: LD_VAR 0 2
24348: PUSH
24349: FOR_IN
24350: IFFALSE 24366
// begin SetLives ( i , 0 ) ;
24352: LD_VAR 0 1
24356: PPUSH
24357: LD_INT 0
24359: PPUSH
24360: CALL_OW 234
// end ;
24364: GO 24349
24366: POP
24367: POP
// end ;
24368: PPOPN 2
24370: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24371: LD_EXP 52
24375: PUSH
24376: LD_EXP 62
24380: AND
24381: IFFALSE 24401
24383: GO 24385
24385: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24386: LD_INT 32
24388: PPUSH
24389: LD_OWVAR 2
24393: PPUSH
24394: LD_INT 0
24396: PPUSH
24397: CALL_OW 324
24401: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24402: LD_EXP 52
24406: PUSH
24407: LD_EXP 63
24411: AND
24412: IFFALSE 24593
24414: GO 24416
24416: DISABLE
24417: LD_INT 0
24419: PPUSH
24420: PPUSH
24421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24422: LD_ADDR_VAR 0 2
24426: PUSH
24427: LD_INT 22
24429: PUSH
24430: LD_OWVAR 2
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 33
24441: PUSH
24442: LD_INT 3
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PPUSH
24453: CALL_OW 69
24457: ST_TO_ADDR
// if not tmp then
24458: LD_VAR 0 2
24462: NOT
24463: IFFALSE 24467
// exit ;
24465: GO 24593
// side := 0 ;
24467: LD_ADDR_VAR 0 3
24471: PUSH
24472: LD_INT 0
24474: ST_TO_ADDR
// for i := 1 to 8 do
24475: LD_ADDR_VAR 0 1
24479: PUSH
24480: DOUBLE
24481: LD_INT 1
24483: DEC
24484: ST_TO_ADDR
24485: LD_INT 8
24487: PUSH
24488: FOR_TO
24489: IFFALSE 24537
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24491: LD_OWVAR 2
24495: PUSH
24496: LD_VAR 0 1
24500: NONEQUAL
24501: PUSH
24502: LD_OWVAR 2
24506: PPUSH
24507: LD_VAR 0 1
24511: PPUSH
24512: CALL_OW 81
24516: PUSH
24517: LD_INT 2
24519: EQUAL
24520: AND
24521: IFFALSE 24535
// begin side := i ;
24523: LD_ADDR_VAR 0 3
24527: PUSH
24528: LD_VAR 0 1
24532: ST_TO_ADDR
// break ;
24533: GO 24537
// end ;
24535: GO 24488
24537: POP
24538: POP
// if not side then
24539: LD_VAR 0 3
24543: NOT
24544: IFFALSE 24548
// exit ;
24546: GO 24593
// for i := 1 to tmp do
24548: LD_ADDR_VAR 0 1
24552: PUSH
24553: DOUBLE
24554: LD_INT 1
24556: DEC
24557: ST_TO_ADDR
24558: LD_VAR 0 2
24562: PUSH
24563: FOR_TO
24564: IFFALSE 24591
// if Prob ( 60 ) then
24566: LD_INT 60
24568: PPUSH
24569: CALL_OW 13
24573: IFFALSE 24589
// SetSide ( i , side ) ;
24575: LD_VAR 0 1
24579: PPUSH
24580: LD_VAR 0 3
24584: PPUSH
24585: CALL_OW 235
24589: GO 24563
24591: POP
24592: POP
// end ;
24593: PPOPN 3
24595: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24596: LD_EXP 52
24600: PUSH
24601: LD_EXP 65
24605: AND
24606: IFFALSE 24725
24608: GO 24610
24610: DISABLE
24611: LD_INT 0
24613: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24614: LD_ADDR_VAR 0 1
24618: PUSH
24619: LD_INT 22
24621: PUSH
24622: LD_OWVAR 2
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 21
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 3
24643: PUSH
24644: LD_INT 23
24646: PUSH
24647: LD_INT 0
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: LIST
24662: PPUSH
24663: CALL_OW 69
24667: PUSH
24668: FOR_IN
24669: IFFALSE 24723
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24671: LD_VAR 0 1
24675: PPUSH
24676: CALL_OW 257
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: LD_INT 2
24686: PUSH
24687: LD_INT 3
24689: PUSH
24690: LD_INT 4
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: IN
24699: IFFALSE 24721
// SetClass ( un , rand ( 1 , 4 ) ) ;
24701: LD_VAR 0 1
24705: PPUSH
24706: LD_INT 1
24708: PPUSH
24709: LD_INT 4
24711: PPUSH
24712: CALL_OW 12
24716: PPUSH
24717: CALL_OW 336
24721: GO 24668
24723: POP
24724: POP
// end ;
24725: PPOPN 1
24727: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24728: LD_EXP 52
24732: PUSH
24733: LD_EXP 64
24737: AND
24738: IFFALSE 24817
24740: GO 24742
24742: DISABLE
24743: LD_INT 0
24745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24746: LD_ADDR_VAR 0 1
24750: PUSH
24751: LD_INT 22
24753: PUSH
24754: LD_OWVAR 2
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 21
24765: PUSH
24766: LD_INT 3
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PPUSH
24777: CALL_OW 69
24781: ST_TO_ADDR
// if not tmp then
24782: LD_VAR 0 1
24786: NOT
24787: IFFALSE 24791
// exit ;
24789: GO 24817
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24791: LD_VAR 0 1
24795: PUSH
24796: LD_INT 1
24798: PPUSH
24799: LD_VAR 0 1
24803: PPUSH
24804: CALL_OW 12
24808: ARRAY
24809: PPUSH
24810: LD_INT 100
24812: PPUSH
24813: CALL_OW 234
// end ;
24817: PPOPN 1
24819: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24820: LD_EXP 52
24824: PUSH
24825: LD_EXP 66
24829: AND
24830: IFFALSE 24928
24832: GO 24834
24834: DISABLE
24835: LD_INT 0
24837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24838: LD_ADDR_VAR 0 1
24842: PUSH
24843: LD_INT 22
24845: PUSH
24846: LD_OWVAR 2
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 21
24857: PUSH
24858: LD_INT 1
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PPUSH
24869: CALL_OW 69
24873: ST_TO_ADDR
// if not tmp then
24874: LD_VAR 0 1
24878: NOT
24879: IFFALSE 24883
// exit ;
24881: GO 24928
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24883: LD_VAR 0 1
24887: PUSH
24888: LD_INT 1
24890: PPUSH
24891: LD_VAR 0 1
24895: PPUSH
24896: CALL_OW 12
24900: ARRAY
24901: PPUSH
24902: LD_INT 1
24904: PPUSH
24905: LD_INT 4
24907: PPUSH
24908: CALL_OW 12
24912: PPUSH
24913: LD_INT 3000
24915: PPUSH
24916: LD_INT 9000
24918: PPUSH
24919: CALL_OW 12
24923: PPUSH
24924: CALL_OW 492
// end ;
24928: PPOPN 1
24930: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24931: LD_EXP 52
24935: PUSH
24936: LD_EXP 67
24940: AND
24941: IFFALSE 24961
24943: GO 24945
24945: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24946: LD_INT 1
24948: PPUSH
24949: LD_OWVAR 2
24953: PPUSH
24954: LD_INT 0
24956: PPUSH
24957: CALL_OW 324
24961: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24962: LD_EXP 52
24966: PUSH
24967: LD_EXP 68
24971: AND
24972: IFFALSE 25055
24974: GO 24976
24976: DISABLE
24977: LD_INT 0
24979: PPUSH
24980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24981: LD_ADDR_VAR 0 2
24985: PUSH
24986: LD_INT 22
24988: PUSH
24989: LD_OWVAR 2
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 21
25000: PUSH
25001: LD_INT 3
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PPUSH
25012: CALL_OW 69
25016: ST_TO_ADDR
// if not tmp then
25017: LD_VAR 0 2
25021: NOT
25022: IFFALSE 25026
// exit ;
25024: GO 25055
// for i in tmp do
25026: LD_ADDR_VAR 0 1
25030: PUSH
25031: LD_VAR 0 2
25035: PUSH
25036: FOR_IN
25037: IFFALSE 25053
// SetBLevel ( i , 10 ) ;
25039: LD_VAR 0 1
25043: PPUSH
25044: LD_INT 10
25046: PPUSH
25047: CALL_OW 241
25051: GO 25036
25053: POP
25054: POP
// end ;
25055: PPOPN 2
25057: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25058: LD_EXP 52
25062: PUSH
25063: LD_EXP 69
25067: AND
25068: IFFALSE 25179
25070: GO 25072
25072: DISABLE
25073: LD_INT 0
25075: PPUSH
25076: PPUSH
25077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25078: LD_ADDR_VAR 0 3
25082: PUSH
25083: LD_INT 22
25085: PUSH
25086: LD_OWVAR 2
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 25
25097: PUSH
25098: LD_INT 1
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PPUSH
25109: CALL_OW 69
25113: ST_TO_ADDR
// if not tmp then
25114: LD_VAR 0 3
25118: NOT
25119: IFFALSE 25123
// exit ;
25121: GO 25179
// un := tmp [ rand ( 1 , tmp ) ] ;
25123: LD_ADDR_VAR 0 2
25127: PUSH
25128: LD_VAR 0 3
25132: PUSH
25133: LD_INT 1
25135: PPUSH
25136: LD_VAR 0 3
25140: PPUSH
25141: CALL_OW 12
25145: ARRAY
25146: ST_TO_ADDR
// if Crawls ( un ) then
25147: LD_VAR 0 2
25151: PPUSH
25152: CALL_OW 318
25156: IFFALSE 25167
// ComWalk ( un ) ;
25158: LD_VAR 0 2
25162: PPUSH
25163: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25167: LD_VAR 0 2
25171: PPUSH
25172: LD_INT 5
25174: PPUSH
25175: CALL_OW 336
// end ;
25179: PPOPN 3
25181: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25182: LD_EXP 52
25186: PUSH
25187: LD_EXP 70
25191: AND
25192: PUSH
25193: LD_OWVAR 67
25197: PUSH
25198: LD_INT 4
25200: LESS
25201: AND
25202: IFFALSE 25221
25204: GO 25206
25206: DISABLE
// begin Difficulty := Difficulty + 1 ;
25207: LD_ADDR_OWVAR 67
25211: PUSH
25212: LD_OWVAR 67
25216: PUSH
25217: LD_INT 1
25219: PLUS
25220: ST_TO_ADDR
// end ;
25221: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25222: LD_EXP 52
25226: PUSH
25227: LD_EXP 71
25231: AND
25232: IFFALSE 25335
25234: GO 25236
25236: DISABLE
25237: LD_INT 0
25239: PPUSH
// begin for i := 1 to 5 do
25240: LD_ADDR_VAR 0 1
25244: PUSH
25245: DOUBLE
25246: LD_INT 1
25248: DEC
25249: ST_TO_ADDR
25250: LD_INT 5
25252: PUSH
25253: FOR_TO
25254: IFFALSE 25333
// begin uc_nation := nation_nature ;
25256: LD_ADDR_OWVAR 21
25260: PUSH
25261: LD_INT 0
25263: ST_TO_ADDR
// uc_side := 0 ;
25264: LD_ADDR_OWVAR 20
25268: PUSH
25269: LD_INT 0
25271: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25272: LD_ADDR_OWVAR 29
25276: PUSH
25277: LD_INT 12
25279: PUSH
25280: LD_INT 12
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: ST_TO_ADDR
// hc_agressivity := 20 ;
25287: LD_ADDR_OWVAR 35
25291: PUSH
25292: LD_INT 20
25294: ST_TO_ADDR
// hc_class := class_tiger ;
25295: LD_ADDR_OWVAR 28
25299: PUSH
25300: LD_INT 14
25302: ST_TO_ADDR
// hc_gallery :=  ;
25303: LD_ADDR_OWVAR 33
25307: PUSH
25308: LD_STRING 
25310: ST_TO_ADDR
// hc_name :=  ;
25311: LD_ADDR_OWVAR 26
25315: PUSH
25316: LD_STRING 
25318: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25319: CALL_OW 44
25323: PPUSH
25324: LD_INT 0
25326: PPUSH
25327: CALL_OW 51
// end ;
25331: GO 25253
25333: POP
25334: POP
// end ;
25335: PPOPN 1
25337: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25338: LD_EXP 52
25342: PUSH
25343: LD_EXP 72
25347: AND
25348: IFFALSE 25357
25350: GO 25352
25352: DISABLE
// StreamSibBomb ;
25353: CALL 25358 0 0
25357: END
// export function StreamSibBomb ; var i , x , y ; begin
25358: LD_INT 0
25360: PPUSH
25361: PPUSH
25362: PPUSH
25363: PPUSH
// result := false ;
25364: LD_ADDR_VAR 0 1
25368: PUSH
25369: LD_INT 0
25371: ST_TO_ADDR
// for i := 1 to 16 do
25372: LD_ADDR_VAR 0 2
25376: PUSH
25377: DOUBLE
25378: LD_INT 1
25380: DEC
25381: ST_TO_ADDR
25382: LD_INT 16
25384: PUSH
25385: FOR_TO
25386: IFFALSE 25585
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25388: LD_ADDR_VAR 0 3
25392: PUSH
25393: LD_INT 10
25395: PUSH
25396: LD_INT 20
25398: PUSH
25399: LD_INT 30
25401: PUSH
25402: LD_INT 40
25404: PUSH
25405: LD_INT 50
25407: PUSH
25408: LD_INT 60
25410: PUSH
25411: LD_INT 70
25413: PUSH
25414: LD_INT 80
25416: PUSH
25417: LD_INT 90
25419: PUSH
25420: LD_INT 100
25422: PUSH
25423: LD_INT 110
25425: PUSH
25426: LD_INT 120
25428: PUSH
25429: LD_INT 130
25431: PUSH
25432: LD_INT 140
25434: PUSH
25435: LD_INT 150
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 1
25457: PPUSH
25458: LD_INT 15
25460: PPUSH
25461: CALL_OW 12
25465: ARRAY
25466: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25467: LD_ADDR_VAR 0 4
25471: PUSH
25472: LD_INT 10
25474: PUSH
25475: LD_INT 20
25477: PUSH
25478: LD_INT 30
25480: PUSH
25481: LD_INT 40
25483: PUSH
25484: LD_INT 50
25486: PUSH
25487: LD_INT 60
25489: PUSH
25490: LD_INT 70
25492: PUSH
25493: LD_INT 80
25495: PUSH
25496: LD_INT 90
25498: PUSH
25499: LD_INT 100
25501: PUSH
25502: LD_INT 110
25504: PUSH
25505: LD_INT 120
25507: PUSH
25508: LD_INT 130
25510: PUSH
25511: LD_INT 140
25513: PUSH
25514: LD_INT 150
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 1
25536: PPUSH
25537: LD_INT 15
25539: PPUSH
25540: CALL_OW 12
25544: ARRAY
25545: ST_TO_ADDR
// if ValidHex ( x , y ) then
25546: LD_VAR 0 3
25550: PPUSH
25551: LD_VAR 0 4
25555: PPUSH
25556: CALL_OW 488
25560: IFFALSE 25583
// begin result := [ x , y ] ;
25562: LD_ADDR_VAR 0 1
25566: PUSH
25567: LD_VAR 0 3
25571: PUSH
25572: LD_VAR 0 4
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: ST_TO_ADDR
// break ;
25581: GO 25585
// end ; end ;
25583: GO 25385
25585: POP
25586: POP
// if result then
25587: LD_VAR 0 1
25591: IFFALSE 25651
// begin ToLua ( playSibBomb() ) ;
25593: LD_STRING playSibBomb()
25595: PPUSH
25596: CALL_OW 559
// wait ( 0 0$14 ) ;
25600: LD_INT 490
25602: PPUSH
25603: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25607: LD_VAR 0 1
25611: PUSH
25612: LD_INT 1
25614: ARRAY
25615: PPUSH
25616: LD_VAR 0 1
25620: PUSH
25621: LD_INT 2
25623: ARRAY
25624: PPUSH
25625: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25629: LD_VAR 0 1
25633: PUSH
25634: LD_INT 1
25636: ARRAY
25637: PPUSH
25638: LD_VAR 0 1
25642: PUSH
25643: LD_INT 2
25645: ARRAY
25646: PPUSH
25647: CALL_OW 429
// end ; end ;
25651: LD_VAR 0 1
25655: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25656: LD_EXP 52
25660: PUSH
25661: LD_EXP 74
25665: AND
25666: IFFALSE 25678
25668: GO 25670
25670: DISABLE
// YouLost (  ) ;
25671: LD_STRING 
25673: PPUSH
25674: CALL_OW 104
25678: END
// every 0 0$1 trigger StreamModeActive and sFog do
25679: LD_EXP 52
25683: PUSH
25684: LD_EXP 73
25688: AND
25689: IFFALSE 25703
25691: GO 25693
25693: DISABLE
// FogOff ( your_side ) ;
25694: LD_OWVAR 2
25698: PPUSH
25699: CALL_OW 344
25703: END
// every 0 0$1 trigger StreamModeActive and sSun do
25704: LD_EXP 52
25708: PUSH
25709: LD_EXP 75
25713: AND
25714: IFFALSE 25742
25716: GO 25718
25718: DISABLE
// begin solar_recharge_percent := 0 ;
25719: LD_ADDR_OWVAR 79
25723: PUSH
25724: LD_INT 0
25726: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25727: LD_INT 10500
25729: PPUSH
25730: CALL_OW 67
// solar_recharge_percent := 100 ;
25734: LD_ADDR_OWVAR 79
25738: PUSH
25739: LD_INT 100
25741: ST_TO_ADDR
// end ;
25742: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25743: LD_EXP 52
25747: PUSH
25748: LD_EXP 76
25752: AND
25753: IFFALSE 25992
25755: GO 25757
25757: DISABLE
25758: LD_INT 0
25760: PPUSH
25761: PPUSH
25762: PPUSH
// begin tmp := [ ] ;
25763: LD_ADDR_VAR 0 3
25767: PUSH
25768: EMPTY
25769: ST_TO_ADDR
// for i := 1 to 6 do
25770: LD_ADDR_VAR 0 1
25774: PUSH
25775: DOUBLE
25776: LD_INT 1
25778: DEC
25779: ST_TO_ADDR
25780: LD_INT 6
25782: PUSH
25783: FOR_TO
25784: IFFALSE 25889
// begin uc_nation := nation_nature ;
25786: LD_ADDR_OWVAR 21
25790: PUSH
25791: LD_INT 0
25793: ST_TO_ADDR
// uc_side := 0 ;
25794: LD_ADDR_OWVAR 20
25798: PUSH
25799: LD_INT 0
25801: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25802: LD_ADDR_OWVAR 29
25806: PUSH
25807: LD_INT 12
25809: PUSH
25810: LD_INT 12
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: ST_TO_ADDR
// hc_agressivity := 20 ;
25817: LD_ADDR_OWVAR 35
25821: PUSH
25822: LD_INT 20
25824: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25825: LD_ADDR_OWVAR 28
25829: PUSH
25830: LD_INT 17
25832: ST_TO_ADDR
// hc_gallery :=  ;
25833: LD_ADDR_OWVAR 33
25837: PUSH
25838: LD_STRING 
25840: ST_TO_ADDR
// hc_name :=  ;
25841: LD_ADDR_OWVAR 26
25845: PUSH
25846: LD_STRING 
25848: ST_TO_ADDR
// un := CreateHuman ;
25849: LD_ADDR_VAR 0 2
25853: PUSH
25854: CALL_OW 44
25858: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25859: LD_VAR 0 2
25863: PPUSH
25864: LD_INT 1
25866: PPUSH
25867: CALL_OW 51
// tmp := tmp ^ un ;
25871: LD_ADDR_VAR 0 3
25875: PUSH
25876: LD_VAR 0 3
25880: PUSH
25881: LD_VAR 0 2
25885: ADD
25886: ST_TO_ADDR
// end ;
25887: GO 25783
25889: POP
25890: POP
// repeat wait ( 0 0$1 ) ;
25891: LD_INT 35
25893: PPUSH
25894: CALL_OW 67
// for un in tmp do
25898: LD_ADDR_VAR 0 2
25902: PUSH
25903: LD_VAR 0 3
25907: PUSH
25908: FOR_IN
25909: IFFALSE 25983
// begin if IsDead ( un ) then
25911: LD_VAR 0 2
25915: PPUSH
25916: CALL_OW 301
25920: IFFALSE 25940
// begin tmp := tmp diff un ;
25922: LD_ADDR_VAR 0 3
25926: PUSH
25927: LD_VAR 0 3
25931: PUSH
25932: LD_VAR 0 2
25936: DIFF
25937: ST_TO_ADDR
// continue ;
25938: GO 25908
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25940: LD_VAR 0 2
25944: PPUSH
25945: LD_INT 3
25947: PUSH
25948: LD_INT 22
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PPUSH
25962: CALL_OW 69
25966: PPUSH
25967: LD_VAR 0 2
25971: PPUSH
25972: CALL_OW 74
25976: PPUSH
25977: CALL_OW 115
// end ;
25981: GO 25908
25983: POP
25984: POP
// until not tmp ;
25985: LD_VAR 0 3
25989: NOT
25990: IFFALSE 25891
// end ;
25992: PPOPN 3
25994: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25995: LD_EXP 52
25999: PUSH
26000: LD_EXP 77
26004: AND
26005: IFFALSE 26059
26007: GO 26009
26009: DISABLE
// begin ToLua ( displayTroll(); ) ;
26010: LD_STRING displayTroll();
26012: PPUSH
26013: CALL_OW 559
// wait ( 3 3$00 ) ;
26017: LD_INT 6300
26019: PPUSH
26020: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26024: LD_STRING hideTroll();
26026: PPUSH
26027: CALL_OW 559
// wait ( 1 1$00 ) ;
26031: LD_INT 2100
26033: PPUSH
26034: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26038: LD_STRING displayTroll();
26040: PPUSH
26041: CALL_OW 559
// wait ( 1 1$00 ) ;
26045: LD_INT 2100
26047: PPUSH
26048: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26052: LD_STRING hideTroll();
26054: PPUSH
26055: CALL_OW 559
// end ;
26059: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26060: LD_EXP 52
26064: PUSH
26065: LD_EXP 78
26069: AND
26070: IFFALSE 26133
26072: GO 26074
26074: DISABLE
26075: LD_INT 0
26077: PPUSH
// begin p := 0 ;
26078: LD_ADDR_VAR 0 1
26082: PUSH
26083: LD_INT 0
26085: ST_TO_ADDR
// repeat game_speed := 1 ;
26086: LD_ADDR_OWVAR 65
26090: PUSH
26091: LD_INT 1
26093: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26094: LD_INT 35
26096: PPUSH
26097: CALL_OW 67
// p := p + 1 ;
26101: LD_ADDR_VAR 0 1
26105: PUSH
26106: LD_VAR 0 1
26110: PUSH
26111: LD_INT 1
26113: PLUS
26114: ST_TO_ADDR
// until p >= 60 ;
26115: LD_VAR 0 1
26119: PUSH
26120: LD_INT 60
26122: GREATEREQUAL
26123: IFFALSE 26086
// game_speed := 4 ;
26125: LD_ADDR_OWVAR 65
26129: PUSH
26130: LD_INT 4
26132: ST_TO_ADDR
// end ;
26133: PPOPN 1
26135: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26136: LD_EXP 52
26140: PUSH
26141: LD_EXP 79
26145: AND
26146: IFFALSE 26292
26148: GO 26150
26150: DISABLE
26151: LD_INT 0
26153: PPUSH
26154: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26155: LD_ADDR_VAR 0 1
26159: PUSH
26160: LD_INT 22
26162: PUSH
26163: LD_OWVAR 2
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 2
26174: PUSH
26175: LD_INT 30
26177: PUSH
26178: LD_INT 0
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 30
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: LIST
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PPUSH
26204: CALL_OW 69
26208: ST_TO_ADDR
// if not depot then
26209: LD_VAR 0 1
26213: NOT
26214: IFFALSE 26218
// exit ;
26216: GO 26292
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26218: LD_ADDR_VAR 0 2
26222: PUSH
26223: LD_VAR 0 1
26227: PUSH
26228: LD_INT 1
26230: PPUSH
26231: LD_VAR 0 1
26235: PPUSH
26236: CALL_OW 12
26240: ARRAY
26241: PPUSH
26242: CALL_OW 274
26246: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26247: LD_VAR 0 2
26251: PPUSH
26252: LD_INT 1
26254: PPUSH
26255: LD_INT 0
26257: PPUSH
26258: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26262: LD_VAR 0 2
26266: PPUSH
26267: LD_INT 2
26269: PPUSH
26270: LD_INT 0
26272: PPUSH
26273: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26277: LD_VAR 0 2
26281: PPUSH
26282: LD_INT 3
26284: PPUSH
26285: LD_INT 0
26287: PPUSH
26288: CALL_OW 277
// end ;
26292: PPOPN 2
26294: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26295: LD_EXP 52
26299: PUSH
26300: LD_EXP 80
26304: AND
26305: IFFALSE 26402
26307: GO 26309
26309: DISABLE
26310: LD_INT 0
26312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26313: LD_ADDR_VAR 0 1
26317: PUSH
26318: LD_INT 22
26320: PUSH
26321: LD_OWVAR 2
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 21
26332: PUSH
26333: LD_INT 1
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 3
26342: PUSH
26343: LD_INT 23
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: LIST
26361: PPUSH
26362: CALL_OW 69
26366: ST_TO_ADDR
// if not tmp then
26367: LD_VAR 0 1
26371: NOT
26372: IFFALSE 26376
// exit ;
26374: GO 26402
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26376: LD_VAR 0 1
26380: PUSH
26381: LD_INT 1
26383: PPUSH
26384: LD_VAR 0 1
26388: PPUSH
26389: CALL_OW 12
26393: ARRAY
26394: PPUSH
26395: LD_INT 200
26397: PPUSH
26398: CALL_OW 234
// end ;
26402: PPOPN 1
26404: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26405: LD_EXP 52
26409: PUSH
26410: LD_EXP 81
26414: AND
26415: IFFALSE 26494
26417: GO 26419
26419: DISABLE
26420: LD_INT 0
26422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26423: LD_ADDR_VAR 0 1
26427: PUSH
26428: LD_INT 22
26430: PUSH
26431: LD_OWVAR 2
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 21
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PPUSH
26454: CALL_OW 69
26458: ST_TO_ADDR
// if not tmp then
26459: LD_VAR 0 1
26463: NOT
26464: IFFALSE 26468
// exit ;
26466: GO 26494
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26468: LD_VAR 0 1
26472: PUSH
26473: LD_INT 1
26475: PPUSH
26476: LD_VAR 0 1
26480: PPUSH
26481: CALL_OW 12
26485: ARRAY
26486: PPUSH
26487: LD_INT 60
26489: PPUSH
26490: CALL_OW 234
// end ;
26494: PPOPN 1
26496: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26497: LD_EXP 52
26501: PUSH
26502: LD_EXP 82
26506: AND
26507: IFFALSE 26606
26509: GO 26511
26511: DISABLE
26512: LD_INT 0
26514: PPUSH
26515: PPUSH
// begin enable ;
26516: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26517: LD_ADDR_VAR 0 1
26521: PUSH
26522: LD_INT 22
26524: PUSH
26525: LD_OWVAR 2
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 61
26536: PUSH
26537: EMPTY
26538: LIST
26539: PUSH
26540: LD_INT 33
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: LIST
26554: PPUSH
26555: CALL_OW 69
26559: ST_TO_ADDR
// if not tmp then
26560: LD_VAR 0 1
26564: NOT
26565: IFFALSE 26569
// exit ;
26567: GO 26606
// for i in tmp do
26569: LD_ADDR_VAR 0 2
26573: PUSH
26574: LD_VAR 0 1
26578: PUSH
26579: FOR_IN
26580: IFFALSE 26604
// if IsControledBy ( i ) then
26582: LD_VAR 0 2
26586: PPUSH
26587: CALL_OW 312
26591: IFFALSE 26602
// ComUnlink ( i ) ;
26593: LD_VAR 0 2
26597: PPUSH
26598: CALL_OW 136
26602: GO 26579
26604: POP
26605: POP
// end ;
26606: PPOPN 2
26608: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26609: LD_EXP 52
26613: PUSH
26614: LD_EXP 83
26618: AND
26619: IFFALSE 26759
26621: GO 26623
26623: DISABLE
26624: LD_INT 0
26626: PPUSH
26627: PPUSH
// begin ToLua ( displayPowell(); ) ;
26628: LD_STRING displayPowell();
26630: PPUSH
26631: CALL_OW 559
// uc_side := 0 ;
26635: LD_ADDR_OWVAR 20
26639: PUSH
26640: LD_INT 0
26642: ST_TO_ADDR
// uc_nation := 2 ;
26643: LD_ADDR_OWVAR 21
26647: PUSH
26648: LD_INT 2
26650: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26651: LD_ADDR_OWVAR 37
26655: PUSH
26656: LD_INT 14
26658: ST_TO_ADDR
// vc_engine := engine_siberite ;
26659: LD_ADDR_OWVAR 39
26663: PUSH
26664: LD_INT 3
26666: ST_TO_ADDR
// vc_control := control_apeman ;
26667: LD_ADDR_OWVAR 38
26671: PUSH
26672: LD_INT 5
26674: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26675: LD_ADDR_OWVAR 40
26679: PUSH
26680: LD_INT 29
26682: ST_TO_ADDR
// un := CreateVehicle ;
26683: LD_ADDR_VAR 0 2
26687: PUSH
26688: CALL_OW 45
26692: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26693: LD_VAR 0 2
26697: PPUSH
26698: LD_INT 1
26700: PPUSH
26701: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26705: LD_INT 35
26707: PPUSH
26708: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26712: LD_VAR 0 2
26716: PPUSH
26717: LD_INT 22
26719: PUSH
26720: LD_OWVAR 2
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PPUSH
26729: CALL_OW 69
26733: PPUSH
26734: LD_VAR 0 2
26738: PPUSH
26739: CALL_OW 74
26743: PPUSH
26744: CALL_OW 115
// until IsDead ( un ) ;
26748: LD_VAR 0 2
26752: PPUSH
26753: CALL_OW 301
26757: IFFALSE 26705
// end ;
26759: PPOPN 2
26761: END
// every 0 0$1 trigger StreamModeActive and sStu do
26762: LD_EXP 52
26766: PUSH
26767: LD_EXP 91
26771: AND
26772: IFFALSE 26788
26774: GO 26776
26776: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26777: LD_STRING displayStucuk();
26779: PPUSH
26780: CALL_OW 559
// ResetFog ;
26784: CALL_OW 335
// end ;
26788: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26789: LD_EXP 52
26793: PUSH
26794: LD_EXP 84
26798: AND
26799: IFFALSE 26940
26801: GO 26803
26803: DISABLE
26804: LD_INT 0
26806: PPUSH
26807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26808: LD_ADDR_VAR 0 2
26812: PUSH
26813: LD_INT 22
26815: PUSH
26816: LD_OWVAR 2
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 21
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PPUSH
26839: CALL_OW 69
26843: ST_TO_ADDR
// if not tmp then
26844: LD_VAR 0 2
26848: NOT
26849: IFFALSE 26853
// exit ;
26851: GO 26940
// un := tmp [ rand ( 1 , tmp ) ] ;
26853: LD_ADDR_VAR 0 1
26857: PUSH
26858: LD_VAR 0 2
26862: PUSH
26863: LD_INT 1
26865: PPUSH
26866: LD_VAR 0 2
26870: PPUSH
26871: CALL_OW 12
26875: ARRAY
26876: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26877: LD_VAR 0 1
26881: PPUSH
26882: LD_INT 0
26884: PPUSH
26885: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26889: LD_VAR 0 1
26893: PPUSH
26894: LD_OWVAR 3
26898: PUSH
26899: LD_VAR 0 1
26903: DIFF
26904: PPUSH
26905: LD_VAR 0 1
26909: PPUSH
26910: CALL_OW 74
26914: PPUSH
26915: CALL_OW 115
// wait ( 0 0$20 ) ;
26919: LD_INT 700
26921: PPUSH
26922: CALL_OW 67
// SetSide ( un , your_side ) ;
26926: LD_VAR 0 1
26930: PPUSH
26931: LD_OWVAR 2
26935: PPUSH
26936: CALL_OW 235
// end ;
26940: PPOPN 2
26942: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26943: LD_EXP 52
26947: PUSH
26948: LD_EXP 85
26952: AND
26953: IFFALSE 27059
26955: GO 26957
26957: DISABLE
26958: LD_INT 0
26960: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26961: LD_ADDR_VAR 0 1
26965: PUSH
26966: LD_INT 22
26968: PUSH
26969: LD_OWVAR 2
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 2
26980: PUSH
26981: LD_INT 30
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 30
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: LIST
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PPUSH
27010: CALL_OW 69
27014: ST_TO_ADDR
// if not depot then
27015: LD_VAR 0 1
27019: NOT
27020: IFFALSE 27024
// exit ;
27022: GO 27059
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27024: LD_VAR 0 1
27028: PUSH
27029: LD_INT 1
27031: ARRAY
27032: PPUSH
27033: CALL_OW 250
27037: PPUSH
27038: LD_VAR 0 1
27042: PUSH
27043: LD_INT 1
27045: ARRAY
27046: PPUSH
27047: CALL_OW 251
27051: PPUSH
27052: LD_INT 70
27054: PPUSH
27055: CALL_OW 495
// end ;
27059: PPOPN 1
27061: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27062: LD_EXP 52
27066: PUSH
27067: LD_EXP 86
27071: AND
27072: IFFALSE 27283
27074: GO 27076
27076: DISABLE
27077: LD_INT 0
27079: PPUSH
27080: PPUSH
27081: PPUSH
27082: PPUSH
27083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27084: LD_ADDR_VAR 0 5
27088: PUSH
27089: LD_INT 22
27091: PUSH
27092: LD_OWVAR 2
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 21
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PPUSH
27115: CALL_OW 69
27119: ST_TO_ADDR
// if not tmp then
27120: LD_VAR 0 5
27124: NOT
27125: IFFALSE 27129
// exit ;
27127: GO 27283
// for i in tmp do
27129: LD_ADDR_VAR 0 1
27133: PUSH
27134: LD_VAR 0 5
27138: PUSH
27139: FOR_IN
27140: IFFALSE 27281
// begin d := rand ( 0 , 5 ) ;
27142: LD_ADDR_VAR 0 4
27146: PUSH
27147: LD_INT 0
27149: PPUSH
27150: LD_INT 5
27152: PPUSH
27153: CALL_OW 12
27157: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27158: LD_ADDR_VAR 0 2
27162: PUSH
27163: LD_VAR 0 1
27167: PPUSH
27168: CALL_OW 250
27172: PPUSH
27173: LD_VAR 0 4
27177: PPUSH
27178: LD_INT 3
27180: PPUSH
27181: LD_INT 12
27183: PPUSH
27184: CALL_OW 12
27188: PPUSH
27189: CALL_OW 272
27193: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27194: LD_ADDR_VAR 0 3
27198: PUSH
27199: LD_VAR 0 1
27203: PPUSH
27204: CALL_OW 251
27208: PPUSH
27209: LD_VAR 0 4
27213: PPUSH
27214: LD_INT 3
27216: PPUSH
27217: LD_INT 12
27219: PPUSH
27220: CALL_OW 12
27224: PPUSH
27225: CALL_OW 273
27229: ST_TO_ADDR
// if ValidHex ( x , y ) then
27230: LD_VAR 0 2
27234: PPUSH
27235: LD_VAR 0 3
27239: PPUSH
27240: CALL_OW 488
27244: IFFALSE 27279
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27246: LD_VAR 0 1
27250: PPUSH
27251: LD_VAR 0 2
27255: PPUSH
27256: LD_VAR 0 3
27260: PPUSH
27261: LD_INT 3
27263: PPUSH
27264: LD_INT 6
27266: PPUSH
27267: CALL_OW 12
27271: PPUSH
27272: LD_INT 1
27274: PPUSH
27275: CALL_OW 483
// end ;
27279: GO 27139
27281: POP
27282: POP
// end ;
27283: PPOPN 5
27285: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27286: LD_EXP 52
27290: PUSH
27291: LD_EXP 87
27295: AND
27296: IFFALSE 27390
27298: GO 27300
27300: DISABLE
27301: LD_INT 0
27303: PPUSH
27304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27305: LD_ADDR_VAR 0 2
27309: PUSH
27310: LD_INT 22
27312: PUSH
27313: LD_OWVAR 2
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 32
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 21
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: LIST
27346: PPUSH
27347: CALL_OW 69
27351: ST_TO_ADDR
// if not tmp then
27352: LD_VAR 0 2
27356: NOT
27357: IFFALSE 27361
// exit ;
27359: GO 27390
// for i in tmp do
27361: LD_ADDR_VAR 0 1
27365: PUSH
27366: LD_VAR 0 2
27370: PUSH
27371: FOR_IN
27372: IFFALSE 27388
// SetFuel ( i , 0 ) ;
27374: LD_VAR 0 1
27378: PPUSH
27379: LD_INT 0
27381: PPUSH
27382: CALL_OW 240
27386: GO 27371
27388: POP
27389: POP
// end ;
27390: PPOPN 2
27392: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27393: LD_EXP 52
27397: PUSH
27398: LD_EXP 88
27402: AND
27403: IFFALSE 27469
27405: GO 27407
27407: DISABLE
27408: LD_INT 0
27410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27411: LD_ADDR_VAR 0 1
27415: PUSH
27416: LD_INT 22
27418: PUSH
27419: LD_OWVAR 2
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 30
27430: PUSH
27431: LD_INT 29
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PPUSH
27442: CALL_OW 69
27446: ST_TO_ADDR
// if not tmp then
27447: LD_VAR 0 1
27451: NOT
27452: IFFALSE 27456
// exit ;
27454: GO 27469
// DestroyUnit ( tmp [ 1 ] ) ;
27456: LD_VAR 0 1
27460: PUSH
27461: LD_INT 1
27463: ARRAY
27464: PPUSH
27465: CALL_OW 65
// end ;
27469: PPOPN 1
27471: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27472: LD_EXP 52
27476: PUSH
27477: LD_EXP 90
27481: AND
27482: IFFALSE 27611
27484: GO 27486
27486: DISABLE
27487: LD_INT 0
27489: PPUSH
// begin uc_side := 0 ;
27490: LD_ADDR_OWVAR 20
27494: PUSH
27495: LD_INT 0
27497: ST_TO_ADDR
// uc_nation := nation_arabian ;
27498: LD_ADDR_OWVAR 21
27502: PUSH
27503: LD_INT 2
27505: ST_TO_ADDR
// hc_gallery :=  ;
27506: LD_ADDR_OWVAR 33
27510: PUSH
27511: LD_STRING 
27513: ST_TO_ADDR
// hc_name :=  ;
27514: LD_ADDR_OWVAR 26
27518: PUSH
27519: LD_STRING 
27521: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27522: LD_INT 1
27524: PPUSH
27525: LD_INT 11
27527: PPUSH
27528: LD_INT 10
27530: PPUSH
27531: CALL_OW 380
// un := CreateHuman ;
27535: LD_ADDR_VAR 0 1
27539: PUSH
27540: CALL_OW 44
27544: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27545: LD_VAR 0 1
27549: PPUSH
27550: LD_INT 1
27552: PPUSH
27553: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27557: LD_INT 35
27559: PPUSH
27560: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27564: LD_VAR 0 1
27568: PPUSH
27569: LD_INT 22
27571: PUSH
27572: LD_OWVAR 2
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PPUSH
27581: CALL_OW 69
27585: PPUSH
27586: LD_VAR 0 1
27590: PPUSH
27591: CALL_OW 74
27595: PPUSH
27596: CALL_OW 115
// until IsDead ( un ) ;
27600: LD_VAR 0 1
27604: PPUSH
27605: CALL_OW 301
27609: IFFALSE 27557
// end ;
27611: PPOPN 1
27613: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27614: LD_EXP 52
27618: PUSH
27619: LD_EXP 92
27623: AND
27624: IFFALSE 27636
27626: GO 27628
27628: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27629: LD_STRING earthquake(getX(game), 0, 32)
27631: PPUSH
27632: CALL_OW 559
27636: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27637: LD_EXP 52
27641: PUSH
27642: LD_EXP 93
27646: AND
27647: IFFALSE 27738
27649: GO 27651
27651: DISABLE
27652: LD_INT 0
27654: PPUSH
// begin enable ;
27655: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27656: LD_ADDR_VAR 0 1
27660: PUSH
27661: LD_INT 22
27663: PUSH
27664: LD_OWVAR 2
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 21
27675: PUSH
27676: LD_INT 2
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 33
27685: PUSH
27686: LD_INT 3
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: LIST
27697: PPUSH
27698: CALL_OW 69
27702: ST_TO_ADDR
// if not tmp then
27703: LD_VAR 0 1
27707: NOT
27708: IFFALSE 27712
// exit ;
27710: GO 27738
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27712: LD_VAR 0 1
27716: PUSH
27717: LD_INT 1
27719: PPUSH
27720: LD_VAR 0 1
27724: PPUSH
27725: CALL_OW 12
27729: ARRAY
27730: PPUSH
27731: LD_INT 1
27733: PPUSH
27734: CALL_OW 234
// end ;
27738: PPOPN 1
27740: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27741: LD_EXP 52
27745: PUSH
27746: LD_EXP 94
27750: AND
27751: IFFALSE 27892
27753: GO 27755
27755: DISABLE
27756: LD_INT 0
27758: PPUSH
27759: PPUSH
27760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27761: LD_ADDR_VAR 0 3
27765: PUSH
27766: LD_INT 22
27768: PUSH
27769: LD_OWVAR 2
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 25
27780: PUSH
27781: LD_INT 1
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PPUSH
27792: CALL_OW 69
27796: ST_TO_ADDR
// if not tmp then
27797: LD_VAR 0 3
27801: NOT
27802: IFFALSE 27806
// exit ;
27804: GO 27892
// un := tmp [ rand ( 1 , tmp ) ] ;
27806: LD_ADDR_VAR 0 2
27810: PUSH
27811: LD_VAR 0 3
27815: PUSH
27816: LD_INT 1
27818: PPUSH
27819: LD_VAR 0 3
27823: PPUSH
27824: CALL_OW 12
27828: ARRAY
27829: ST_TO_ADDR
// if Crawls ( un ) then
27830: LD_VAR 0 2
27834: PPUSH
27835: CALL_OW 318
27839: IFFALSE 27850
// ComWalk ( un ) ;
27841: LD_VAR 0 2
27845: PPUSH
27846: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27850: LD_VAR 0 2
27854: PPUSH
27855: LD_INT 9
27857: PPUSH
27858: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27862: LD_INT 28
27864: PPUSH
27865: LD_OWVAR 2
27869: PPUSH
27870: LD_INT 2
27872: PPUSH
27873: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27877: LD_INT 29
27879: PPUSH
27880: LD_OWVAR 2
27884: PPUSH
27885: LD_INT 2
27887: PPUSH
27888: CALL_OW 322
// end ;
27892: PPOPN 3
27894: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27895: LD_EXP 52
27899: PUSH
27900: LD_EXP 95
27904: AND
27905: IFFALSE 28016
27907: GO 27909
27909: DISABLE
27910: LD_INT 0
27912: PPUSH
27913: PPUSH
27914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27915: LD_ADDR_VAR 0 3
27919: PUSH
27920: LD_INT 22
27922: PUSH
27923: LD_OWVAR 2
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 25
27934: PUSH
27935: LD_INT 1
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PPUSH
27946: CALL_OW 69
27950: ST_TO_ADDR
// if not tmp then
27951: LD_VAR 0 3
27955: NOT
27956: IFFALSE 27960
// exit ;
27958: GO 28016
// un := tmp [ rand ( 1 , tmp ) ] ;
27960: LD_ADDR_VAR 0 2
27964: PUSH
27965: LD_VAR 0 3
27969: PUSH
27970: LD_INT 1
27972: PPUSH
27973: LD_VAR 0 3
27977: PPUSH
27978: CALL_OW 12
27982: ARRAY
27983: ST_TO_ADDR
// if Crawls ( un ) then
27984: LD_VAR 0 2
27988: PPUSH
27989: CALL_OW 318
27993: IFFALSE 28004
// ComWalk ( un ) ;
27995: LD_VAR 0 2
27999: PPUSH
28000: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28004: LD_VAR 0 2
28008: PPUSH
28009: LD_INT 8
28011: PPUSH
28012: CALL_OW 336
// end ;
28016: PPOPN 3
28018: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28019: LD_EXP 52
28023: PUSH
28024: LD_EXP 96
28028: AND
28029: IFFALSE 28173
28031: GO 28033
28033: DISABLE
28034: LD_INT 0
28036: PPUSH
28037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28038: LD_ADDR_VAR 0 2
28042: PUSH
28043: LD_INT 22
28045: PUSH
28046: LD_OWVAR 2
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 21
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: LD_INT 34
28070: PUSH
28071: LD_INT 12
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 34
28080: PUSH
28081: LD_INT 51
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 34
28090: PUSH
28091: LD_INT 32
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: LIST
28108: PPUSH
28109: CALL_OW 69
28113: ST_TO_ADDR
// if not tmp then
28114: LD_VAR 0 2
28118: NOT
28119: IFFALSE 28123
// exit ;
28121: GO 28173
// for i in tmp do
28123: LD_ADDR_VAR 0 1
28127: PUSH
28128: LD_VAR 0 2
28132: PUSH
28133: FOR_IN
28134: IFFALSE 28171
// if GetCargo ( i , mat_artifact ) = 0 then
28136: LD_VAR 0 1
28140: PPUSH
28141: LD_INT 4
28143: PPUSH
28144: CALL_OW 289
28148: PUSH
28149: LD_INT 0
28151: EQUAL
28152: IFFALSE 28169
// SetCargo ( i , mat_siberit , 100 ) ;
28154: LD_VAR 0 1
28158: PPUSH
28159: LD_INT 3
28161: PPUSH
28162: LD_INT 100
28164: PPUSH
28165: CALL_OW 290
28169: GO 28133
28171: POP
28172: POP
// end ;
28173: PPOPN 2
28175: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28176: LD_EXP 52
28180: PUSH
28181: LD_EXP 97
28185: AND
28186: IFFALSE 28369
28188: GO 28190
28190: DISABLE
28191: LD_INT 0
28193: PPUSH
28194: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28195: LD_ADDR_VAR 0 2
28199: PUSH
28200: LD_INT 22
28202: PUSH
28203: LD_OWVAR 2
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PPUSH
28212: CALL_OW 69
28216: ST_TO_ADDR
// if not tmp then
28217: LD_VAR 0 2
28221: NOT
28222: IFFALSE 28226
// exit ;
28224: GO 28369
// for i := 1 to 2 do
28226: LD_ADDR_VAR 0 1
28230: PUSH
28231: DOUBLE
28232: LD_INT 1
28234: DEC
28235: ST_TO_ADDR
28236: LD_INT 2
28238: PUSH
28239: FOR_TO
28240: IFFALSE 28367
// begin uc_side := your_side ;
28242: LD_ADDR_OWVAR 20
28246: PUSH
28247: LD_OWVAR 2
28251: ST_TO_ADDR
// uc_nation := nation_american ;
28252: LD_ADDR_OWVAR 21
28256: PUSH
28257: LD_INT 1
28259: ST_TO_ADDR
// vc_chassis := us_morphling ;
28260: LD_ADDR_OWVAR 37
28264: PUSH
28265: LD_INT 5
28267: ST_TO_ADDR
// vc_engine := engine_siberite ;
28268: LD_ADDR_OWVAR 39
28272: PUSH
28273: LD_INT 3
28275: ST_TO_ADDR
// vc_control := control_computer ;
28276: LD_ADDR_OWVAR 38
28280: PUSH
28281: LD_INT 3
28283: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28284: LD_ADDR_OWVAR 40
28288: PUSH
28289: LD_INT 10
28291: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28292: LD_VAR 0 2
28296: PUSH
28297: LD_INT 1
28299: ARRAY
28300: PPUSH
28301: CALL_OW 310
28305: NOT
28306: IFFALSE 28353
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28308: CALL_OW 45
28312: PPUSH
28313: LD_VAR 0 2
28317: PUSH
28318: LD_INT 1
28320: ARRAY
28321: PPUSH
28322: CALL_OW 250
28326: PPUSH
28327: LD_VAR 0 2
28331: PUSH
28332: LD_INT 1
28334: ARRAY
28335: PPUSH
28336: CALL_OW 251
28340: PPUSH
28341: LD_INT 12
28343: PPUSH
28344: LD_INT 1
28346: PPUSH
28347: CALL_OW 50
28351: GO 28365
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28353: CALL_OW 45
28357: PPUSH
28358: LD_INT 1
28360: PPUSH
28361: CALL_OW 51
// end ;
28365: GO 28239
28367: POP
28368: POP
// end ;
28369: PPOPN 2
28371: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28372: LD_EXP 52
28376: PUSH
28377: LD_EXP 98
28381: AND
28382: IFFALSE 28604
28384: GO 28386
28386: DISABLE
28387: LD_INT 0
28389: PPUSH
28390: PPUSH
28391: PPUSH
28392: PPUSH
28393: PPUSH
28394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28395: LD_ADDR_VAR 0 6
28399: PUSH
28400: LD_INT 22
28402: PUSH
28403: LD_OWVAR 2
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 21
28414: PUSH
28415: LD_INT 1
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 3
28424: PUSH
28425: LD_INT 23
28427: PUSH
28428: LD_INT 0
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: LIST
28443: PPUSH
28444: CALL_OW 69
28448: ST_TO_ADDR
// if not tmp then
28449: LD_VAR 0 6
28453: NOT
28454: IFFALSE 28458
// exit ;
28456: GO 28604
// s1 := rand ( 1 , 4 ) ;
28458: LD_ADDR_VAR 0 2
28462: PUSH
28463: LD_INT 1
28465: PPUSH
28466: LD_INT 4
28468: PPUSH
28469: CALL_OW 12
28473: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28474: LD_ADDR_VAR 0 4
28478: PUSH
28479: LD_VAR 0 6
28483: PUSH
28484: LD_INT 1
28486: ARRAY
28487: PPUSH
28488: LD_VAR 0 2
28492: PPUSH
28493: CALL_OW 259
28497: ST_TO_ADDR
// if s1 = 1 then
28498: LD_VAR 0 2
28502: PUSH
28503: LD_INT 1
28505: EQUAL
28506: IFFALSE 28526
// s2 := rand ( 2 , 4 ) else
28508: LD_ADDR_VAR 0 3
28512: PUSH
28513: LD_INT 2
28515: PPUSH
28516: LD_INT 4
28518: PPUSH
28519: CALL_OW 12
28523: ST_TO_ADDR
28524: GO 28534
// s2 := 1 ;
28526: LD_ADDR_VAR 0 3
28530: PUSH
28531: LD_INT 1
28533: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28534: LD_ADDR_VAR 0 5
28538: PUSH
28539: LD_VAR 0 6
28543: PUSH
28544: LD_INT 1
28546: ARRAY
28547: PPUSH
28548: LD_VAR 0 3
28552: PPUSH
28553: CALL_OW 259
28557: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28558: LD_VAR 0 6
28562: PUSH
28563: LD_INT 1
28565: ARRAY
28566: PPUSH
28567: LD_VAR 0 2
28571: PPUSH
28572: LD_VAR 0 5
28576: PPUSH
28577: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28581: LD_VAR 0 6
28585: PUSH
28586: LD_INT 1
28588: ARRAY
28589: PPUSH
28590: LD_VAR 0 3
28594: PPUSH
28595: LD_VAR 0 4
28599: PPUSH
28600: CALL_OW 237
// end ;
28604: PPOPN 6
28606: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28607: LD_EXP 52
28611: PUSH
28612: LD_EXP 99
28616: AND
28617: IFFALSE 28696
28619: GO 28621
28621: DISABLE
28622: LD_INT 0
28624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28625: LD_ADDR_VAR 0 1
28629: PUSH
28630: LD_INT 22
28632: PUSH
28633: LD_OWVAR 2
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 30
28644: PUSH
28645: LD_INT 3
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PPUSH
28656: CALL_OW 69
28660: ST_TO_ADDR
// if not tmp then
28661: LD_VAR 0 1
28665: NOT
28666: IFFALSE 28670
// exit ;
28668: GO 28696
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28670: LD_VAR 0 1
28674: PUSH
28675: LD_INT 1
28677: PPUSH
28678: LD_VAR 0 1
28682: PPUSH
28683: CALL_OW 12
28687: ARRAY
28688: PPUSH
28689: LD_INT 1
28691: PPUSH
28692: CALL_OW 234
// end ;
28696: PPOPN 1
28698: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28699: LD_EXP 52
28703: PUSH
28704: LD_EXP 100
28708: AND
28709: IFFALSE 28821
28711: GO 28713
28713: DISABLE
28714: LD_INT 0
28716: PPUSH
28717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28718: LD_ADDR_VAR 0 2
28722: PUSH
28723: LD_INT 22
28725: PUSH
28726: LD_OWVAR 2
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 2
28737: PUSH
28738: LD_INT 30
28740: PUSH
28741: LD_INT 27
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 30
28750: PUSH
28751: LD_INT 26
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 30
28760: PUSH
28761: LD_INT 28
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PPUSH
28778: CALL_OW 69
28782: ST_TO_ADDR
// if not tmp then
28783: LD_VAR 0 2
28787: NOT
28788: IFFALSE 28792
// exit ;
28790: GO 28821
// for i in tmp do
28792: LD_ADDR_VAR 0 1
28796: PUSH
28797: LD_VAR 0 2
28801: PUSH
28802: FOR_IN
28803: IFFALSE 28819
// SetLives ( i , 1 ) ;
28805: LD_VAR 0 1
28809: PPUSH
28810: LD_INT 1
28812: PPUSH
28813: CALL_OW 234
28817: GO 28802
28819: POP
28820: POP
// end ;
28821: PPOPN 2
28823: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28824: LD_EXP 52
28828: PUSH
28829: LD_EXP 101
28833: AND
28834: IFFALSE 29121
28836: GO 28838
28838: DISABLE
28839: LD_INT 0
28841: PPUSH
28842: PPUSH
28843: PPUSH
// begin i := rand ( 1 , 7 ) ;
28844: LD_ADDR_VAR 0 1
28848: PUSH
28849: LD_INT 1
28851: PPUSH
28852: LD_INT 7
28854: PPUSH
28855: CALL_OW 12
28859: ST_TO_ADDR
// case i of 1 :
28860: LD_VAR 0 1
28864: PUSH
28865: LD_INT 1
28867: DOUBLE
28868: EQUAL
28869: IFTRUE 28873
28871: GO 28883
28873: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28874: LD_STRING earthquake(getX(game), 0, 32)
28876: PPUSH
28877: CALL_OW 559
28881: GO 29121
28883: LD_INT 2
28885: DOUBLE
28886: EQUAL
28887: IFTRUE 28891
28889: GO 28905
28891: POP
// begin ToLua ( displayStucuk(); ) ;
28892: LD_STRING displayStucuk();
28894: PPUSH
28895: CALL_OW 559
// ResetFog ;
28899: CALL_OW 335
// end ; 3 :
28903: GO 29121
28905: LD_INT 3
28907: DOUBLE
28908: EQUAL
28909: IFTRUE 28913
28911: GO 29017
28913: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28914: LD_ADDR_VAR 0 2
28918: PUSH
28919: LD_INT 22
28921: PUSH
28922: LD_OWVAR 2
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 25
28933: PUSH
28934: LD_INT 1
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PPUSH
28945: CALL_OW 69
28949: ST_TO_ADDR
// if not tmp then
28950: LD_VAR 0 2
28954: NOT
28955: IFFALSE 28959
// exit ;
28957: GO 29121
// un := tmp [ rand ( 1 , tmp ) ] ;
28959: LD_ADDR_VAR 0 3
28963: PUSH
28964: LD_VAR 0 2
28968: PUSH
28969: LD_INT 1
28971: PPUSH
28972: LD_VAR 0 2
28976: PPUSH
28977: CALL_OW 12
28981: ARRAY
28982: ST_TO_ADDR
// if Crawls ( un ) then
28983: LD_VAR 0 3
28987: PPUSH
28988: CALL_OW 318
28992: IFFALSE 29003
// ComWalk ( un ) ;
28994: LD_VAR 0 3
28998: PPUSH
28999: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29003: LD_VAR 0 3
29007: PPUSH
29008: LD_INT 8
29010: PPUSH
29011: CALL_OW 336
// end ; 4 :
29015: GO 29121
29017: LD_INT 4
29019: DOUBLE
29020: EQUAL
29021: IFTRUE 29025
29023: GO 29099
29025: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29026: LD_ADDR_VAR 0 2
29030: PUSH
29031: LD_INT 22
29033: PUSH
29034: LD_OWVAR 2
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 30
29045: PUSH
29046: LD_INT 29
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PPUSH
29057: CALL_OW 69
29061: ST_TO_ADDR
// if not tmp then
29062: LD_VAR 0 2
29066: NOT
29067: IFFALSE 29071
// exit ;
29069: GO 29121
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29071: LD_VAR 0 2
29075: PUSH
29076: LD_INT 1
29078: ARRAY
29079: PPUSH
29080: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29084: LD_VAR 0 2
29088: PUSH
29089: LD_INT 1
29091: ARRAY
29092: PPUSH
29093: CALL_OW 65
// end ; 5 .. 7 :
29097: GO 29121
29099: LD_INT 5
29101: DOUBLE
29102: GREATEREQUAL
29103: IFFALSE 29111
29105: LD_INT 7
29107: DOUBLE
29108: LESSEQUAL
29109: IFTRUE 29113
29111: GO 29120
29113: POP
// StreamSibBomb ; end ;
29114: CALL 25358 0 0
29118: GO 29121
29120: POP
// end ;
29121: PPOPN 3
29123: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29124: LD_EXP 52
29128: PUSH
29129: LD_EXP 102
29133: AND
29134: IFFALSE 29290
29136: GO 29138
29138: DISABLE
29139: LD_INT 0
29141: PPUSH
29142: PPUSH
29143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29144: LD_ADDR_VAR 0 2
29148: PUSH
29149: LD_INT 81
29151: PUSH
29152: LD_OWVAR 2
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 2
29163: PUSH
29164: LD_INT 21
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 21
29176: PUSH
29177: LD_INT 2
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: LIST
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PPUSH
29193: CALL_OW 69
29197: ST_TO_ADDR
// if not tmp then
29198: LD_VAR 0 2
29202: NOT
29203: IFFALSE 29207
// exit ;
29205: GO 29290
// p := 0 ;
29207: LD_ADDR_VAR 0 3
29211: PUSH
29212: LD_INT 0
29214: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29215: LD_INT 35
29217: PPUSH
29218: CALL_OW 67
// p := p + 1 ;
29222: LD_ADDR_VAR 0 3
29226: PUSH
29227: LD_VAR 0 3
29231: PUSH
29232: LD_INT 1
29234: PLUS
29235: ST_TO_ADDR
// for i in tmp do
29236: LD_ADDR_VAR 0 1
29240: PUSH
29241: LD_VAR 0 2
29245: PUSH
29246: FOR_IN
29247: IFFALSE 29278
// if GetLives ( i ) < 1000 then
29249: LD_VAR 0 1
29253: PPUSH
29254: CALL_OW 256
29258: PUSH
29259: LD_INT 1000
29261: LESS
29262: IFFALSE 29276
// SetLives ( i , 1000 ) ;
29264: LD_VAR 0 1
29268: PPUSH
29269: LD_INT 1000
29271: PPUSH
29272: CALL_OW 234
29276: GO 29246
29278: POP
29279: POP
// until p > 20 ;
29280: LD_VAR 0 3
29284: PUSH
29285: LD_INT 20
29287: GREATER
29288: IFFALSE 29215
// end ;
29290: PPOPN 3
29292: END
// every 0 0$1 trigger StreamModeActive and sTime do
29293: LD_EXP 52
29297: PUSH
29298: LD_EXP 103
29302: AND
29303: IFFALSE 29338
29305: GO 29307
29307: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29308: LD_INT 28
29310: PPUSH
29311: LD_OWVAR 2
29315: PPUSH
29316: LD_INT 2
29318: PPUSH
29319: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29323: LD_INT 30
29325: PPUSH
29326: LD_OWVAR 2
29330: PPUSH
29331: LD_INT 2
29333: PPUSH
29334: CALL_OW 322
// end ;
29338: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29339: LD_EXP 52
29343: PUSH
29344: LD_EXP 104
29348: AND
29349: IFFALSE 29470
29351: GO 29353
29353: DISABLE
29354: LD_INT 0
29356: PPUSH
29357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29358: LD_ADDR_VAR 0 2
29362: PUSH
29363: LD_INT 22
29365: PUSH
29366: LD_OWVAR 2
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 21
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 3
29387: PUSH
29388: LD_INT 23
29390: PUSH
29391: LD_INT 0
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: LIST
29406: PPUSH
29407: CALL_OW 69
29411: ST_TO_ADDR
// if not tmp then
29412: LD_VAR 0 2
29416: NOT
29417: IFFALSE 29421
// exit ;
29419: GO 29470
// for i in tmp do
29421: LD_ADDR_VAR 0 1
29425: PUSH
29426: LD_VAR 0 2
29430: PUSH
29431: FOR_IN
29432: IFFALSE 29468
// begin if Crawls ( i ) then
29434: LD_VAR 0 1
29438: PPUSH
29439: CALL_OW 318
29443: IFFALSE 29454
// ComWalk ( i ) ;
29445: LD_VAR 0 1
29449: PPUSH
29450: CALL_OW 138
// SetClass ( i , 2 ) ;
29454: LD_VAR 0 1
29458: PPUSH
29459: LD_INT 2
29461: PPUSH
29462: CALL_OW 336
// end ;
29466: GO 29431
29468: POP
29469: POP
// end ;
29470: PPOPN 2
29472: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29473: LD_EXP 52
29477: PUSH
29478: LD_EXP 105
29482: AND
29483: IFFALSE 29771
29485: GO 29487
29487: DISABLE
29488: LD_INT 0
29490: PPUSH
29491: PPUSH
29492: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29493: LD_OWVAR 2
29497: PPUSH
29498: LD_INT 9
29500: PPUSH
29501: LD_INT 1
29503: PPUSH
29504: LD_INT 1
29506: PPUSH
29507: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29511: LD_INT 9
29513: PPUSH
29514: LD_OWVAR 2
29518: PPUSH
29519: CALL_OW 343
// uc_side := 9 ;
29523: LD_ADDR_OWVAR 20
29527: PUSH
29528: LD_INT 9
29530: ST_TO_ADDR
// uc_nation := 2 ;
29531: LD_ADDR_OWVAR 21
29535: PUSH
29536: LD_INT 2
29538: ST_TO_ADDR
// hc_name := Dark Warrior ;
29539: LD_ADDR_OWVAR 26
29543: PUSH
29544: LD_STRING Dark Warrior
29546: ST_TO_ADDR
// hc_gallery :=  ;
29547: LD_ADDR_OWVAR 33
29551: PUSH
29552: LD_STRING 
29554: ST_TO_ADDR
// hc_noskilllimit := true ;
29555: LD_ADDR_OWVAR 76
29559: PUSH
29560: LD_INT 1
29562: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29563: LD_ADDR_OWVAR 31
29567: PUSH
29568: LD_INT 30
29570: PUSH
29571: LD_INT 30
29573: PUSH
29574: LD_INT 30
29576: PUSH
29577: LD_INT 30
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: ST_TO_ADDR
// un := CreateHuman ;
29586: LD_ADDR_VAR 0 3
29590: PUSH
29591: CALL_OW 44
29595: ST_TO_ADDR
// hc_noskilllimit := false ;
29596: LD_ADDR_OWVAR 76
29600: PUSH
29601: LD_INT 0
29603: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29604: LD_VAR 0 3
29608: PPUSH
29609: LD_INT 1
29611: PPUSH
29612: CALL_OW 51
// ToLua ( playRanger() ) ;
29616: LD_STRING playRanger()
29618: PPUSH
29619: CALL_OW 559
// p := 0 ;
29623: LD_ADDR_VAR 0 2
29627: PUSH
29628: LD_INT 0
29630: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29631: LD_INT 35
29633: PPUSH
29634: CALL_OW 67
// p := p + 1 ;
29638: LD_ADDR_VAR 0 2
29642: PUSH
29643: LD_VAR 0 2
29647: PUSH
29648: LD_INT 1
29650: PLUS
29651: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29652: LD_VAR 0 3
29656: PPUSH
29657: CALL_OW 256
29661: PUSH
29662: LD_INT 1000
29664: LESS
29665: IFFALSE 29679
// SetLives ( un , 1000 ) ;
29667: LD_VAR 0 3
29671: PPUSH
29672: LD_INT 1000
29674: PPUSH
29675: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29679: LD_VAR 0 3
29683: PPUSH
29684: LD_INT 81
29686: PUSH
29687: LD_OWVAR 2
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 91
29698: PUSH
29699: LD_VAR 0 3
29703: PUSH
29704: LD_INT 30
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: LIST
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PPUSH
29716: CALL_OW 69
29720: PPUSH
29721: LD_VAR 0 3
29725: PPUSH
29726: CALL_OW 74
29730: PPUSH
29731: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29735: LD_VAR 0 2
29739: PUSH
29740: LD_INT 80
29742: GREATER
29743: PUSH
29744: LD_VAR 0 3
29748: PPUSH
29749: CALL_OW 301
29753: OR
29754: IFFALSE 29631
// if un then
29756: LD_VAR 0 3
29760: IFFALSE 29771
// RemoveUnit ( un ) ;
29762: LD_VAR 0 3
29766: PPUSH
29767: CALL_OW 64
// end ;
29771: PPOPN 3
29773: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29774: LD_EXP 106
29778: IFFALSE 29894
29780: GO 29782
29782: DISABLE
29783: LD_INT 0
29785: PPUSH
29786: PPUSH
29787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29788: LD_ADDR_VAR 0 2
29792: PUSH
29793: LD_INT 81
29795: PUSH
29796: LD_OWVAR 2
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 21
29807: PUSH
29808: LD_INT 1
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PPUSH
29819: CALL_OW 69
29823: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29824: LD_STRING playComputer()
29826: PPUSH
29827: CALL_OW 559
// if not tmp then
29831: LD_VAR 0 2
29835: NOT
29836: IFFALSE 29840
// exit ;
29838: GO 29894
// for i in tmp do
29840: LD_ADDR_VAR 0 1
29844: PUSH
29845: LD_VAR 0 2
29849: PUSH
29850: FOR_IN
29851: IFFALSE 29892
// for j := 1 to 4 do
29853: LD_ADDR_VAR 0 3
29857: PUSH
29858: DOUBLE
29859: LD_INT 1
29861: DEC
29862: ST_TO_ADDR
29863: LD_INT 4
29865: PUSH
29866: FOR_TO
29867: IFFALSE 29888
// SetSkill ( i , j , 10 ) ;
29869: LD_VAR 0 1
29873: PPUSH
29874: LD_VAR 0 3
29878: PPUSH
29879: LD_INT 10
29881: PPUSH
29882: CALL_OW 237
29886: GO 29866
29888: POP
29889: POP
29890: GO 29850
29892: POP
29893: POP
// end ;
29894: PPOPN 3
29896: END
// every 0 0$1 trigger s30 do var i , tmp ;
29897: LD_EXP 107
29901: IFFALSE 29970
29903: GO 29905
29905: DISABLE
29906: LD_INT 0
29908: PPUSH
29909: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29910: LD_ADDR_VAR 0 2
29914: PUSH
29915: LD_INT 22
29917: PUSH
29918: LD_OWVAR 2
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PPUSH
29927: CALL_OW 69
29931: ST_TO_ADDR
// if not tmp then
29932: LD_VAR 0 2
29936: NOT
29937: IFFALSE 29941
// exit ;
29939: GO 29970
// for i in tmp do
29941: LD_ADDR_VAR 0 1
29945: PUSH
29946: LD_VAR 0 2
29950: PUSH
29951: FOR_IN
29952: IFFALSE 29968
// SetLives ( i , 300 ) ;
29954: LD_VAR 0 1
29958: PPUSH
29959: LD_INT 300
29961: PPUSH
29962: CALL_OW 234
29966: GO 29951
29968: POP
29969: POP
// end ;
29970: PPOPN 2
29972: END
// every 0 0$1 trigger s60 do var i , tmp ;
29973: LD_EXP 108
29977: IFFALSE 30046
29979: GO 29981
29981: DISABLE
29982: LD_INT 0
29984: PPUSH
29985: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29986: LD_ADDR_VAR 0 2
29990: PUSH
29991: LD_INT 22
29993: PUSH
29994: LD_OWVAR 2
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PPUSH
30003: CALL_OW 69
30007: ST_TO_ADDR
// if not tmp then
30008: LD_VAR 0 2
30012: NOT
30013: IFFALSE 30017
// exit ;
30015: GO 30046
// for i in tmp do
30017: LD_ADDR_VAR 0 1
30021: PUSH
30022: LD_VAR 0 2
30026: PUSH
30027: FOR_IN
30028: IFFALSE 30044
// SetLives ( i , 600 ) ;
30030: LD_VAR 0 1
30034: PPUSH
30035: LD_INT 600
30037: PPUSH
30038: CALL_OW 234
30042: GO 30027
30044: POP
30045: POP
// end ;
30046: PPOPN 2
30048: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30049: LD_INT 0
30051: PPUSH
// case cmd of 301 :
30052: LD_VAR 0 1
30056: PUSH
30057: LD_INT 301
30059: DOUBLE
30060: EQUAL
30061: IFTRUE 30065
30063: GO 30097
30065: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30066: LD_VAR 0 6
30070: PPUSH
30071: LD_VAR 0 7
30075: PPUSH
30076: LD_VAR 0 8
30080: PPUSH
30081: LD_VAR 0 4
30085: PPUSH
30086: LD_VAR 0 5
30090: PPUSH
30091: CALL 31298 0 5
30095: GO 30218
30097: LD_INT 302
30099: DOUBLE
30100: EQUAL
30101: IFTRUE 30105
30103: GO 30142
30105: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30106: LD_VAR 0 6
30110: PPUSH
30111: LD_VAR 0 7
30115: PPUSH
30116: LD_VAR 0 8
30120: PPUSH
30121: LD_VAR 0 9
30125: PPUSH
30126: LD_VAR 0 4
30130: PPUSH
30131: LD_VAR 0 5
30135: PPUSH
30136: CALL 31389 0 6
30140: GO 30218
30142: LD_INT 303
30144: DOUBLE
30145: EQUAL
30146: IFTRUE 30150
30148: GO 30187
30150: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30151: LD_VAR 0 6
30155: PPUSH
30156: LD_VAR 0 7
30160: PPUSH
30161: LD_VAR 0 8
30165: PPUSH
30166: LD_VAR 0 9
30170: PPUSH
30171: LD_VAR 0 4
30175: PPUSH
30176: LD_VAR 0 5
30180: PPUSH
30181: CALL 30223 0 6
30185: GO 30218
30187: LD_INT 304
30189: DOUBLE
30190: EQUAL
30191: IFTRUE 30195
30193: GO 30217
30195: POP
// hHackTeleport ( unit , x , y ) ; end ;
30196: LD_VAR 0 2
30200: PPUSH
30201: LD_VAR 0 4
30205: PPUSH
30206: LD_VAR 0 5
30210: PPUSH
30211: CALL 31982 0 3
30215: GO 30218
30217: POP
// end ;
30218: LD_VAR 0 12
30222: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30223: LD_INT 0
30225: PPUSH
30226: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30227: LD_VAR 0 1
30231: PUSH
30232: LD_INT 1
30234: LESS
30235: PUSH
30236: LD_VAR 0 1
30240: PUSH
30241: LD_INT 3
30243: GREATER
30244: OR
30245: PUSH
30246: LD_VAR 0 5
30250: PPUSH
30251: LD_VAR 0 6
30255: PPUSH
30256: CALL_OW 428
30260: OR
30261: IFFALSE 30265
// exit ;
30263: GO 30985
// uc_side := your_side ;
30265: LD_ADDR_OWVAR 20
30269: PUSH
30270: LD_OWVAR 2
30274: ST_TO_ADDR
// uc_nation := nation ;
30275: LD_ADDR_OWVAR 21
30279: PUSH
30280: LD_VAR 0 1
30284: ST_TO_ADDR
// bc_level = 1 ;
30285: LD_ADDR_OWVAR 43
30289: PUSH
30290: LD_INT 1
30292: ST_TO_ADDR
// case btype of 1 :
30293: LD_VAR 0 2
30297: PUSH
30298: LD_INT 1
30300: DOUBLE
30301: EQUAL
30302: IFTRUE 30306
30304: GO 30317
30306: POP
// bc_type := b_depot ; 2 :
30307: LD_ADDR_OWVAR 42
30311: PUSH
30312: LD_INT 0
30314: ST_TO_ADDR
30315: GO 30929
30317: LD_INT 2
30319: DOUBLE
30320: EQUAL
30321: IFTRUE 30325
30323: GO 30336
30325: POP
// bc_type := b_warehouse ; 3 :
30326: LD_ADDR_OWVAR 42
30330: PUSH
30331: LD_INT 1
30333: ST_TO_ADDR
30334: GO 30929
30336: LD_INT 3
30338: DOUBLE
30339: EQUAL
30340: IFTRUE 30344
30342: GO 30355
30344: POP
// bc_type := b_lab ; 4 .. 9 :
30345: LD_ADDR_OWVAR 42
30349: PUSH
30350: LD_INT 6
30352: ST_TO_ADDR
30353: GO 30929
30355: LD_INT 4
30357: DOUBLE
30358: GREATEREQUAL
30359: IFFALSE 30367
30361: LD_INT 9
30363: DOUBLE
30364: LESSEQUAL
30365: IFTRUE 30369
30367: GO 30421
30369: POP
// begin bc_type := b_lab_half ;
30370: LD_ADDR_OWVAR 42
30374: PUSH
30375: LD_INT 7
30377: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30378: LD_ADDR_OWVAR 44
30382: PUSH
30383: LD_INT 10
30385: PUSH
30386: LD_INT 11
30388: PUSH
30389: LD_INT 12
30391: PUSH
30392: LD_INT 15
30394: PUSH
30395: LD_INT 14
30397: PUSH
30398: LD_INT 13
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: PUSH
30409: LD_VAR 0 2
30413: PUSH
30414: LD_INT 3
30416: MINUS
30417: ARRAY
30418: ST_TO_ADDR
// end ; 10 .. 13 :
30419: GO 30929
30421: LD_INT 10
30423: DOUBLE
30424: GREATEREQUAL
30425: IFFALSE 30433
30427: LD_INT 13
30429: DOUBLE
30430: LESSEQUAL
30431: IFTRUE 30435
30433: GO 30512
30435: POP
// begin bc_type := b_lab_full ;
30436: LD_ADDR_OWVAR 42
30440: PUSH
30441: LD_INT 8
30443: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30444: LD_ADDR_OWVAR 44
30448: PUSH
30449: LD_INT 10
30451: PUSH
30452: LD_INT 12
30454: PUSH
30455: LD_INT 14
30457: PUSH
30458: LD_INT 13
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: PUSH
30467: LD_VAR 0 2
30471: PUSH
30472: LD_INT 9
30474: MINUS
30475: ARRAY
30476: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30477: LD_ADDR_OWVAR 45
30481: PUSH
30482: LD_INT 11
30484: PUSH
30485: LD_INT 15
30487: PUSH
30488: LD_INT 12
30490: PUSH
30491: LD_INT 15
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: PUSH
30500: LD_VAR 0 2
30504: PUSH
30505: LD_INT 9
30507: MINUS
30508: ARRAY
30509: ST_TO_ADDR
// end ; 14 :
30510: GO 30929
30512: LD_INT 14
30514: DOUBLE
30515: EQUAL
30516: IFTRUE 30520
30518: GO 30531
30520: POP
// bc_type := b_workshop ; 15 :
30521: LD_ADDR_OWVAR 42
30525: PUSH
30526: LD_INT 2
30528: ST_TO_ADDR
30529: GO 30929
30531: LD_INT 15
30533: DOUBLE
30534: EQUAL
30535: IFTRUE 30539
30537: GO 30550
30539: POP
// bc_type := b_factory ; 16 :
30540: LD_ADDR_OWVAR 42
30544: PUSH
30545: LD_INT 3
30547: ST_TO_ADDR
30548: GO 30929
30550: LD_INT 16
30552: DOUBLE
30553: EQUAL
30554: IFTRUE 30558
30556: GO 30569
30558: POP
// bc_type := b_ext_gun ; 17 :
30559: LD_ADDR_OWVAR 42
30563: PUSH
30564: LD_INT 17
30566: ST_TO_ADDR
30567: GO 30929
30569: LD_INT 17
30571: DOUBLE
30572: EQUAL
30573: IFTRUE 30577
30575: GO 30605
30577: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30578: LD_ADDR_OWVAR 42
30582: PUSH
30583: LD_INT 19
30585: PUSH
30586: LD_INT 23
30588: PUSH
30589: LD_INT 19
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: LIST
30596: PUSH
30597: LD_VAR 0 1
30601: ARRAY
30602: ST_TO_ADDR
30603: GO 30929
30605: LD_INT 18
30607: DOUBLE
30608: EQUAL
30609: IFTRUE 30613
30611: GO 30624
30613: POP
// bc_type := b_ext_radar ; 19 :
30614: LD_ADDR_OWVAR 42
30618: PUSH
30619: LD_INT 20
30621: ST_TO_ADDR
30622: GO 30929
30624: LD_INT 19
30626: DOUBLE
30627: EQUAL
30628: IFTRUE 30632
30630: GO 30643
30632: POP
// bc_type := b_ext_radio ; 20 :
30633: LD_ADDR_OWVAR 42
30637: PUSH
30638: LD_INT 22
30640: ST_TO_ADDR
30641: GO 30929
30643: LD_INT 20
30645: DOUBLE
30646: EQUAL
30647: IFTRUE 30651
30649: GO 30662
30651: POP
// bc_type := b_ext_siberium ; 21 :
30652: LD_ADDR_OWVAR 42
30656: PUSH
30657: LD_INT 21
30659: ST_TO_ADDR
30660: GO 30929
30662: LD_INT 21
30664: DOUBLE
30665: EQUAL
30666: IFTRUE 30670
30668: GO 30681
30670: POP
// bc_type := b_ext_computer ; 22 :
30671: LD_ADDR_OWVAR 42
30675: PUSH
30676: LD_INT 24
30678: ST_TO_ADDR
30679: GO 30929
30681: LD_INT 22
30683: DOUBLE
30684: EQUAL
30685: IFTRUE 30689
30687: GO 30700
30689: POP
// bc_type := b_ext_track ; 23 :
30690: LD_ADDR_OWVAR 42
30694: PUSH
30695: LD_INT 16
30697: ST_TO_ADDR
30698: GO 30929
30700: LD_INT 23
30702: DOUBLE
30703: EQUAL
30704: IFTRUE 30708
30706: GO 30719
30708: POP
// bc_type := b_ext_laser ; 24 :
30709: LD_ADDR_OWVAR 42
30713: PUSH
30714: LD_INT 25
30716: ST_TO_ADDR
30717: GO 30929
30719: LD_INT 24
30721: DOUBLE
30722: EQUAL
30723: IFTRUE 30727
30725: GO 30738
30727: POP
// bc_type := b_control_tower ; 25 :
30728: LD_ADDR_OWVAR 42
30732: PUSH
30733: LD_INT 36
30735: ST_TO_ADDR
30736: GO 30929
30738: LD_INT 25
30740: DOUBLE
30741: EQUAL
30742: IFTRUE 30746
30744: GO 30757
30746: POP
// bc_type := b_breastwork ; 26 :
30747: LD_ADDR_OWVAR 42
30751: PUSH
30752: LD_INT 31
30754: ST_TO_ADDR
30755: GO 30929
30757: LD_INT 26
30759: DOUBLE
30760: EQUAL
30761: IFTRUE 30765
30763: GO 30776
30765: POP
// bc_type := b_bunker ; 27 :
30766: LD_ADDR_OWVAR 42
30770: PUSH
30771: LD_INT 32
30773: ST_TO_ADDR
30774: GO 30929
30776: LD_INT 27
30778: DOUBLE
30779: EQUAL
30780: IFTRUE 30784
30782: GO 30795
30784: POP
// bc_type := b_turret ; 28 :
30785: LD_ADDR_OWVAR 42
30789: PUSH
30790: LD_INT 33
30792: ST_TO_ADDR
30793: GO 30929
30795: LD_INT 28
30797: DOUBLE
30798: EQUAL
30799: IFTRUE 30803
30801: GO 30814
30803: POP
// bc_type := b_armoury ; 29 :
30804: LD_ADDR_OWVAR 42
30808: PUSH
30809: LD_INT 4
30811: ST_TO_ADDR
30812: GO 30929
30814: LD_INT 29
30816: DOUBLE
30817: EQUAL
30818: IFTRUE 30822
30820: GO 30833
30822: POP
// bc_type := b_barracks ; 30 :
30823: LD_ADDR_OWVAR 42
30827: PUSH
30828: LD_INT 5
30830: ST_TO_ADDR
30831: GO 30929
30833: LD_INT 30
30835: DOUBLE
30836: EQUAL
30837: IFTRUE 30841
30839: GO 30852
30841: POP
// bc_type := b_solar_power ; 31 :
30842: LD_ADDR_OWVAR 42
30846: PUSH
30847: LD_INT 27
30849: ST_TO_ADDR
30850: GO 30929
30852: LD_INT 31
30854: DOUBLE
30855: EQUAL
30856: IFTRUE 30860
30858: GO 30871
30860: POP
// bc_type := b_oil_power ; 32 :
30861: LD_ADDR_OWVAR 42
30865: PUSH
30866: LD_INT 26
30868: ST_TO_ADDR
30869: GO 30929
30871: LD_INT 32
30873: DOUBLE
30874: EQUAL
30875: IFTRUE 30879
30877: GO 30890
30879: POP
// bc_type := b_siberite_power ; 33 :
30880: LD_ADDR_OWVAR 42
30884: PUSH
30885: LD_INT 28
30887: ST_TO_ADDR
30888: GO 30929
30890: LD_INT 33
30892: DOUBLE
30893: EQUAL
30894: IFTRUE 30898
30896: GO 30909
30898: POP
// bc_type := b_oil_mine ; 34 :
30899: LD_ADDR_OWVAR 42
30903: PUSH
30904: LD_INT 29
30906: ST_TO_ADDR
30907: GO 30929
30909: LD_INT 34
30911: DOUBLE
30912: EQUAL
30913: IFTRUE 30917
30915: GO 30928
30917: POP
// bc_type := b_siberite_mine ; end ;
30918: LD_ADDR_OWVAR 42
30922: PUSH
30923: LD_INT 30
30925: ST_TO_ADDR
30926: GO 30929
30928: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30929: LD_ADDR_VAR 0 8
30933: PUSH
30934: LD_VAR 0 5
30938: PPUSH
30939: LD_VAR 0 6
30943: PPUSH
30944: LD_VAR 0 3
30948: PPUSH
30949: CALL_OW 47
30953: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30954: LD_OWVAR 42
30958: PUSH
30959: LD_INT 32
30961: PUSH
30962: LD_INT 33
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: IN
30969: IFFALSE 30985
// PlaceWeaponTurret ( b , weapon ) ;
30971: LD_VAR 0 8
30975: PPUSH
30976: LD_VAR 0 4
30980: PPUSH
30981: CALL_OW 431
// end ;
30985: LD_VAR 0 7
30989: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30990: LD_INT 0
30992: PPUSH
30993: PPUSH
30994: PPUSH
30995: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30996: LD_ADDR_VAR 0 4
31000: PUSH
31001: LD_INT 22
31003: PUSH
31004: LD_OWVAR 2
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: PUSH
31016: LD_INT 30
31018: PUSH
31019: LD_INT 0
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 30
31028: PUSH
31029: LD_INT 1
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: LIST
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PPUSH
31045: CALL_OW 69
31049: ST_TO_ADDR
// if not tmp then
31050: LD_VAR 0 4
31054: NOT
31055: IFFALSE 31059
// exit ;
31057: GO 31118
// for i in tmp do
31059: LD_ADDR_VAR 0 2
31063: PUSH
31064: LD_VAR 0 4
31068: PUSH
31069: FOR_IN
31070: IFFALSE 31116
// for j = 1 to 3 do
31072: LD_ADDR_VAR 0 3
31076: PUSH
31077: DOUBLE
31078: LD_INT 1
31080: DEC
31081: ST_TO_ADDR
31082: LD_INT 3
31084: PUSH
31085: FOR_TO
31086: IFFALSE 31112
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31088: LD_VAR 0 2
31092: PPUSH
31093: CALL_OW 274
31097: PPUSH
31098: LD_VAR 0 3
31102: PPUSH
31103: LD_INT 99999
31105: PPUSH
31106: CALL_OW 277
31110: GO 31085
31112: POP
31113: POP
31114: GO 31069
31116: POP
31117: POP
// end ;
31118: LD_VAR 0 1
31122: RET
// export function hHackSetLevel10 ; var i , j ; begin
31123: LD_INT 0
31125: PPUSH
31126: PPUSH
31127: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31128: LD_ADDR_VAR 0 2
31132: PUSH
31133: LD_INT 21
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PPUSH
31143: CALL_OW 69
31147: PUSH
31148: FOR_IN
31149: IFFALSE 31201
// if IsSelected ( i ) then
31151: LD_VAR 0 2
31155: PPUSH
31156: CALL_OW 306
31160: IFFALSE 31199
// begin for j := 1 to 4 do
31162: LD_ADDR_VAR 0 3
31166: PUSH
31167: DOUBLE
31168: LD_INT 1
31170: DEC
31171: ST_TO_ADDR
31172: LD_INT 4
31174: PUSH
31175: FOR_TO
31176: IFFALSE 31197
// SetSkill ( i , j , 10 ) ;
31178: LD_VAR 0 2
31182: PPUSH
31183: LD_VAR 0 3
31187: PPUSH
31188: LD_INT 10
31190: PPUSH
31191: CALL_OW 237
31195: GO 31175
31197: POP
31198: POP
// end ;
31199: GO 31148
31201: POP
31202: POP
// end ;
31203: LD_VAR 0 1
31207: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31208: LD_INT 0
31210: PPUSH
31211: PPUSH
31212: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31213: LD_ADDR_VAR 0 2
31217: PUSH
31218: LD_INT 22
31220: PUSH
31221: LD_OWVAR 2
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 21
31232: PUSH
31233: LD_INT 1
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PPUSH
31244: CALL_OW 69
31248: PUSH
31249: FOR_IN
31250: IFFALSE 31291
// begin for j := 1 to 4 do
31252: LD_ADDR_VAR 0 3
31256: PUSH
31257: DOUBLE
31258: LD_INT 1
31260: DEC
31261: ST_TO_ADDR
31262: LD_INT 4
31264: PUSH
31265: FOR_TO
31266: IFFALSE 31287
// SetSkill ( i , j , 10 ) ;
31268: LD_VAR 0 2
31272: PPUSH
31273: LD_VAR 0 3
31277: PPUSH
31278: LD_INT 10
31280: PPUSH
31281: CALL_OW 237
31285: GO 31265
31287: POP
31288: POP
// end ;
31289: GO 31249
31291: POP
31292: POP
// end ;
31293: LD_VAR 0 1
31297: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31298: LD_INT 0
31300: PPUSH
// uc_side := your_side ;
31301: LD_ADDR_OWVAR 20
31305: PUSH
31306: LD_OWVAR 2
31310: ST_TO_ADDR
// uc_nation := nation ;
31311: LD_ADDR_OWVAR 21
31315: PUSH
31316: LD_VAR 0 1
31320: ST_TO_ADDR
// InitHc ;
31321: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31325: LD_INT 0
31327: PPUSH
31328: LD_VAR 0 2
31332: PPUSH
31333: LD_VAR 0 3
31337: PPUSH
31338: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31342: LD_VAR 0 4
31346: PPUSH
31347: LD_VAR 0 5
31351: PPUSH
31352: CALL_OW 428
31356: PUSH
31357: LD_INT 0
31359: EQUAL
31360: IFFALSE 31384
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31362: CALL_OW 44
31366: PPUSH
31367: LD_VAR 0 4
31371: PPUSH
31372: LD_VAR 0 5
31376: PPUSH
31377: LD_INT 1
31379: PPUSH
31380: CALL_OW 48
// end ;
31384: LD_VAR 0 6
31388: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31389: LD_INT 0
31391: PPUSH
31392: PPUSH
// uc_side := your_side ;
31393: LD_ADDR_OWVAR 20
31397: PUSH
31398: LD_OWVAR 2
31402: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31403: LD_VAR 0 1
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: LD_INT 2
31413: PUSH
31414: LD_INT 3
31416: PUSH
31417: LD_INT 4
31419: PUSH
31420: LD_INT 5
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: IN
31430: IFFALSE 31442
// uc_nation := nation_american else
31432: LD_ADDR_OWVAR 21
31436: PUSH
31437: LD_INT 1
31439: ST_TO_ADDR
31440: GO 31485
// if chassis in [ 11 , 12 , 13 , 14 ] then
31442: LD_VAR 0 1
31446: PUSH
31447: LD_INT 11
31449: PUSH
31450: LD_INT 12
31452: PUSH
31453: LD_INT 13
31455: PUSH
31456: LD_INT 14
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: IN
31465: IFFALSE 31477
// uc_nation := nation_arabian else
31467: LD_ADDR_OWVAR 21
31471: PUSH
31472: LD_INT 2
31474: ST_TO_ADDR
31475: GO 31485
// uc_nation := nation_russian ;
31477: LD_ADDR_OWVAR 21
31481: PUSH
31482: LD_INT 3
31484: ST_TO_ADDR
// vc_chassis := chassis ;
31485: LD_ADDR_OWVAR 37
31489: PUSH
31490: LD_VAR 0 1
31494: ST_TO_ADDR
// vc_engine := engine ;
31495: LD_ADDR_OWVAR 39
31499: PUSH
31500: LD_VAR 0 2
31504: ST_TO_ADDR
// vc_control := control ;
31505: LD_ADDR_OWVAR 38
31509: PUSH
31510: LD_VAR 0 3
31514: ST_TO_ADDR
// vc_weapon := weapon ;
31515: LD_ADDR_OWVAR 40
31519: PUSH
31520: LD_VAR 0 4
31524: ST_TO_ADDR
// un := CreateVehicle ;
31525: LD_ADDR_VAR 0 8
31529: PUSH
31530: CALL_OW 45
31534: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31535: LD_VAR 0 8
31539: PPUSH
31540: LD_INT 0
31542: PPUSH
31543: LD_INT 5
31545: PPUSH
31546: CALL_OW 12
31550: PPUSH
31551: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31555: LD_VAR 0 8
31559: PPUSH
31560: LD_VAR 0 5
31564: PPUSH
31565: LD_VAR 0 6
31569: PPUSH
31570: LD_INT 1
31572: PPUSH
31573: CALL_OW 48
// end ;
31577: LD_VAR 0 7
31581: RET
// export hInvincible ; every 1 do
31582: GO 31584
31584: DISABLE
// hInvincible := [ ] ;
31585: LD_ADDR_EXP 109
31589: PUSH
31590: EMPTY
31591: ST_TO_ADDR
31592: END
// every 10 do var i ;
31593: GO 31595
31595: DISABLE
31596: LD_INT 0
31598: PPUSH
// begin enable ;
31599: ENABLE
// if not hInvincible then
31600: LD_EXP 109
31604: NOT
31605: IFFALSE 31609
// exit ;
31607: GO 31653
// for i in hInvincible do
31609: LD_ADDR_VAR 0 1
31613: PUSH
31614: LD_EXP 109
31618: PUSH
31619: FOR_IN
31620: IFFALSE 31651
// if GetLives ( i ) < 1000 then
31622: LD_VAR 0 1
31626: PPUSH
31627: CALL_OW 256
31631: PUSH
31632: LD_INT 1000
31634: LESS
31635: IFFALSE 31649
// SetLives ( i , 1000 ) ;
31637: LD_VAR 0 1
31641: PPUSH
31642: LD_INT 1000
31644: PPUSH
31645: CALL_OW 234
31649: GO 31619
31651: POP
31652: POP
// end ;
31653: PPOPN 1
31655: END
// export function hHackInvincible ; var i ; begin
31656: LD_INT 0
31658: PPUSH
31659: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31660: LD_ADDR_VAR 0 2
31664: PUSH
31665: LD_INT 2
31667: PUSH
31668: LD_INT 21
31670: PUSH
31671: LD_INT 1
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 21
31680: PUSH
31681: LD_INT 2
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: LIST
31692: PPUSH
31693: CALL_OW 69
31697: PUSH
31698: FOR_IN
31699: IFFALSE 31760
// if IsSelected ( i ) then
31701: LD_VAR 0 2
31705: PPUSH
31706: CALL_OW 306
31710: IFFALSE 31758
// begin if i in hInvincible then
31712: LD_VAR 0 2
31716: PUSH
31717: LD_EXP 109
31721: IN
31722: IFFALSE 31742
// hInvincible := hInvincible diff i else
31724: LD_ADDR_EXP 109
31728: PUSH
31729: LD_EXP 109
31733: PUSH
31734: LD_VAR 0 2
31738: DIFF
31739: ST_TO_ADDR
31740: GO 31758
// hInvincible := hInvincible union i ;
31742: LD_ADDR_EXP 109
31746: PUSH
31747: LD_EXP 109
31751: PUSH
31752: LD_VAR 0 2
31756: UNION
31757: ST_TO_ADDR
// end ;
31758: GO 31698
31760: POP
31761: POP
// end ;
31762: LD_VAR 0 1
31766: RET
// export function hHackInvisible ; var i , j ; begin
31767: LD_INT 0
31769: PPUSH
31770: PPUSH
31771: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31772: LD_ADDR_VAR 0 2
31776: PUSH
31777: LD_INT 21
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PPUSH
31787: CALL_OW 69
31791: PUSH
31792: FOR_IN
31793: IFFALSE 31817
// if IsSelected ( i ) then
31795: LD_VAR 0 2
31799: PPUSH
31800: CALL_OW 306
31804: IFFALSE 31815
// ComForceInvisible ( i ) ;
31806: LD_VAR 0 2
31810: PPUSH
31811: CALL_OW 496
31815: GO 31792
31817: POP
31818: POP
// end ;
31819: LD_VAR 0 1
31823: RET
// export function hHackChangeYourSide ; begin
31824: LD_INT 0
31826: PPUSH
// if your_side = 8 then
31827: LD_OWVAR 2
31831: PUSH
31832: LD_INT 8
31834: EQUAL
31835: IFFALSE 31847
// your_side := 0 else
31837: LD_ADDR_OWVAR 2
31841: PUSH
31842: LD_INT 0
31844: ST_TO_ADDR
31845: GO 31861
// your_side := your_side + 1 ;
31847: LD_ADDR_OWVAR 2
31851: PUSH
31852: LD_OWVAR 2
31856: PUSH
31857: LD_INT 1
31859: PLUS
31860: ST_TO_ADDR
// end ;
31861: LD_VAR 0 1
31865: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31866: LD_INT 0
31868: PPUSH
31869: PPUSH
31870: PPUSH
// for i in all_units do
31871: LD_ADDR_VAR 0 2
31875: PUSH
31876: LD_OWVAR 3
31880: PUSH
31881: FOR_IN
31882: IFFALSE 31960
// if IsSelected ( i ) then
31884: LD_VAR 0 2
31888: PPUSH
31889: CALL_OW 306
31893: IFFALSE 31958
// begin j := GetSide ( i ) ;
31895: LD_ADDR_VAR 0 3
31899: PUSH
31900: LD_VAR 0 2
31904: PPUSH
31905: CALL_OW 255
31909: ST_TO_ADDR
// if j = 8 then
31910: LD_VAR 0 3
31914: PUSH
31915: LD_INT 8
31917: EQUAL
31918: IFFALSE 31930
// j := 0 else
31920: LD_ADDR_VAR 0 3
31924: PUSH
31925: LD_INT 0
31927: ST_TO_ADDR
31928: GO 31944
// j := j + 1 ;
31930: LD_ADDR_VAR 0 3
31934: PUSH
31935: LD_VAR 0 3
31939: PUSH
31940: LD_INT 1
31942: PLUS
31943: ST_TO_ADDR
// SetSide ( i , j ) ;
31944: LD_VAR 0 2
31948: PPUSH
31949: LD_VAR 0 3
31953: PPUSH
31954: CALL_OW 235
// end ;
31958: GO 31881
31960: POP
31961: POP
// end ;
31962: LD_VAR 0 1
31966: RET
// export function hHackFog ; begin
31967: LD_INT 0
31969: PPUSH
// FogOff ( true ) ;
31970: LD_INT 1
31972: PPUSH
31973: CALL_OW 344
// end ;
31977: LD_VAR 0 1
31981: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31982: LD_INT 0
31984: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31985: LD_VAR 0 1
31989: PPUSH
31990: LD_VAR 0 2
31994: PPUSH
31995: LD_VAR 0 3
31999: PPUSH
32000: LD_INT 1
32002: PPUSH
32003: LD_INT 1
32005: PPUSH
32006: CALL_OW 483
// CenterOnXY ( x , y ) ;
32010: LD_VAR 0 2
32014: PPUSH
32015: LD_VAR 0 3
32019: PPUSH
32020: CALL_OW 84
// end ; end_of_file
32024: LD_VAR 0 4
32028: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32029: LD_INT 0
32031: PPUSH
32032: PPUSH
32033: PPUSH
32034: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32035: LD_VAR 0 1
32039: PPUSH
32040: CALL_OW 264
32044: PUSH
32045: LD_EXP 36
32049: EQUAL
32050: IFFALSE 32122
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32052: LD_INT 68
32054: PPUSH
32055: LD_VAR 0 1
32059: PPUSH
32060: CALL_OW 255
32064: PPUSH
32065: CALL_OW 321
32069: PUSH
32070: LD_INT 2
32072: EQUAL
32073: IFFALSE 32085
// eff := 70 else
32075: LD_ADDR_VAR 0 4
32079: PUSH
32080: LD_INT 70
32082: ST_TO_ADDR
32083: GO 32093
// eff := 30 ;
32085: LD_ADDR_VAR 0 4
32089: PUSH
32090: LD_INT 30
32092: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32093: LD_VAR 0 1
32097: PPUSH
32098: CALL_OW 250
32102: PPUSH
32103: LD_VAR 0 1
32107: PPUSH
32108: CALL_OW 251
32112: PPUSH
32113: LD_VAR 0 4
32117: PPUSH
32118: CALL_OW 495
// end ; end ;
32122: LD_VAR 0 2
32126: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32127: LD_INT 0
32129: PPUSH
// end ;
32130: LD_VAR 0 4
32134: RET
// export function SOS_Command ( cmd ) ; begin
32135: LD_INT 0
32137: PPUSH
// end ;
32138: LD_VAR 0 2
32142: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
32143: LD_INT 0
32145: PPUSH
// end ;
32146: LD_VAR 0 6
32150: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
32151: LD_INT 0
32153: PPUSH
32154: PPUSH
// if not vehicle or not factory then
32155: LD_VAR 0 1
32159: NOT
32160: PUSH
32161: LD_VAR 0 2
32165: NOT
32166: OR
32167: IFFALSE 32171
// exit ;
32169: GO 32402
// if factoryWaypoints >= factory then
32171: LD_EXP 110
32175: PUSH
32176: LD_VAR 0 2
32180: GREATEREQUAL
32181: IFFALSE 32402
// if factoryWaypoints [ factory ] then
32183: LD_EXP 110
32187: PUSH
32188: LD_VAR 0 2
32192: ARRAY
32193: IFFALSE 32402
// begin if GetControl ( vehicle ) = control_manual then
32195: LD_VAR 0 1
32199: PPUSH
32200: CALL_OW 263
32204: PUSH
32205: LD_INT 1
32207: EQUAL
32208: IFFALSE 32289
// begin driver := IsDrivenBy ( vehicle ) ;
32210: LD_ADDR_VAR 0 4
32214: PUSH
32215: LD_VAR 0 1
32219: PPUSH
32220: CALL_OW 311
32224: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32225: LD_VAR 0 4
32229: PPUSH
32230: LD_EXP 110
32234: PUSH
32235: LD_VAR 0 2
32239: ARRAY
32240: PUSH
32241: LD_INT 3
32243: ARRAY
32244: PPUSH
32245: LD_EXP 110
32249: PUSH
32250: LD_VAR 0 2
32254: ARRAY
32255: PUSH
32256: LD_INT 4
32258: ARRAY
32259: PPUSH
32260: CALL_OW 171
// AddComExitVehicle ( driver ) ;
32264: LD_VAR 0 4
32268: PPUSH
32269: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
32273: LD_VAR 0 4
32277: PPUSH
32278: LD_VAR 0 2
32282: PPUSH
32283: CALL_OW 180
// end else
32287: GO 32402
// if GetControl ( vehicle ) = control_remote then
32289: LD_VAR 0 1
32293: PPUSH
32294: CALL_OW 263
32298: PUSH
32299: LD_INT 2
32301: EQUAL
32302: IFFALSE 32363
// begin wait ( 0 0$2 ) ;
32304: LD_INT 70
32306: PPUSH
32307: CALL_OW 67
// if Connect ( vehicle ) then
32311: LD_VAR 0 1
32315: PPUSH
32316: CALL 44626 0 1
32320: IFFALSE 32361
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32322: LD_VAR 0 1
32326: PPUSH
32327: LD_EXP 110
32331: PUSH
32332: LD_VAR 0 2
32336: ARRAY
32337: PUSH
32338: LD_INT 3
32340: ARRAY
32341: PPUSH
32342: LD_EXP 110
32346: PUSH
32347: LD_VAR 0 2
32351: ARRAY
32352: PUSH
32353: LD_INT 4
32355: ARRAY
32356: PPUSH
32357: CALL_OW 171
// end else
32361: GO 32402
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
32363: LD_VAR 0 1
32367: PPUSH
32368: LD_EXP 110
32372: PUSH
32373: LD_VAR 0 2
32377: ARRAY
32378: PUSH
32379: LD_INT 3
32381: ARRAY
32382: PPUSH
32383: LD_EXP 110
32387: PUSH
32388: LD_VAR 0 2
32392: ARRAY
32393: PUSH
32394: LD_INT 4
32396: ARRAY
32397: PPUSH
32398: CALL_OW 171
// end ; end ;
32402: LD_VAR 0 3
32406: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32407: LD_INT 0
32409: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32410: LD_VAR 0 1
32414: PUSH
32415: LD_INT 250
32417: EQUAL
32418: PUSH
32419: LD_VAR 0 2
32423: PPUSH
32424: CALL_OW 264
32428: PUSH
32429: LD_EXP 39
32433: EQUAL
32434: AND
32435: IFFALSE 32456
// MinerPlaceMine ( unit , x , y ) ;
32437: LD_VAR 0 2
32441: PPUSH
32442: LD_VAR 0 4
32446: PPUSH
32447: LD_VAR 0 5
32451: PPUSH
32452: CALL 35184 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32456: LD_VAR 0 1
32460: PUSH
32461: LD_INT 251
32463: EQUAL
32464: PUSH
32465: LD_VAR 0 2
32469: PPUSH
32470: CALL_OW 264
32474: PUSH
32475: LD_EXP 39
32479: EQUAL
32480: AND
32481: IFFALSE 32502
// MinerDetonateMine ( unit , x , y ) ;
32483: LD_VAR 0 2
32487: PPUSH
32488: LD_VAR 0 4
32492: PPUSH
32493: LD_VAR 0 5
32497: PPUSH
32498: CALL 35461 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32502: LD_VAR 0 1
32506: PUSH
32507: LD_INT 252
32509: EQUAL
32510: PUSH
32511: LD_VAR 0 2
32515: PPUSH
32516: CALL_OW 264
32520: PUSH
32521: LD_EXP 39
32525: EQUAL
32526: AND
32527: IFFALSE 32548
// MinerCreateMinefield ( unit , x , y ) ;
32529: LD_VAR 0 2
32533: PPUSH
32534: LD_VAR 0 4
32538: PPUSH
32539: LD_VAR 0 5
32543: PPUSH
32544: CALL 35878 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32548: LD_VAR 0 1
32552: PUSH
32553: LD_INT 253
32555: EQUAL
32556: PUSH
32557: LD_VAR 0 2
32561: PPUSH
32562: CALL_OW 257
32566: PUSH
32567: LD_INT 5
32569: EQUAL
32570: AND
32571: IFFALSE 32592
// ComBinocular ( unit , x , y ) ;
32573: LD_VAR 0 2
32577: PPUSH
32578: LD_VAR 0 4
32582: PPUSH
32583: LD_VAR 0 5
32587: PPUSH
32588: CALL 36249 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32592: LD_VAR 0 1
32596: PUSH
32597: LD_INT 254
32599: EQUAL
32600: PUSH
32601: LD_VAR 0 2
32605: PPUSH
32606: CALL_OW 264
32610: PUSH
32611: LD_EXP 34
32615: EQUAL
32616: AND
32617: PUSH
32618: LD_VAR 0 3
32622: PPUSH
32623: CALL_OW 263
32627: PUSH
32628: LD_INT 3
32630: EQUAL
32631: AND
32632: IFFALSE 32648
// HackDestroyVehicle ( unit , selectedUnit ) ;
32634: LD_VAR 0 2
32638: PPUSH
32639: LD_VAR 0 3
32643: PPUSH
32644: CALL 34544 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32648: LD_VAR 0 1
32652: PUSH
32653: LD_INT 255
32655: EQUAL
32656: PUSH
32657: LD_VAR 0 2
32661: PPUSH
32662: CALL_OW 264
32666: PUSH
32667: LD_INT 14
32669: PUSH
32670: LD_INT 53
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: IN
32677: AND
32678: PUSH
32679: LD_VAR 0 4
32683: PPUSH
32684: LD_VAR 0 5
32688: PPUSH
32689: CALL_OW 488
32693: AND
32694: IFFALSE 32718
// CutTreeXYR ( unit , x , y , 12 ) ;
32696: LD_VAR 0 2
32700: PPUSH
32701: LD_VAR 0 4
32705: PPUSH
32706: LD_VAR 0 5
32710: PPUSH
32711: LD_INT 12
32713: PPUSH
32714: CALL 33110 0 4
// if cmd = 256 then
32718: LD_VAR 0 1
32722: PUSH
32723: LD_INT 256
32725: EQUAL
32726: IFFALSE 32747
// SetFactoryWaypoint ( unit , x , y ) ;
32728: LD_VAR 0 2
32732: PPUSH
32733: LD_VAR 0 4
32737: PPUSH
32738: LD_VAR 0 5
32742: PPUSH
32743: CALL 32752 0 3
// end ;
32747: LD_VAR 0 6
32751: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32752: LD_INT 0
32754: PPUSH
32755: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32756: LD_VAR 0 1
32760: NOT
32761: PUSH
32762: LD_VAR 0 2
32766: PPUSH
32767: LD_VAR 0 3
32771: PPUSH
32772: CALL_OW 488
32776: NOT
32777: OR
32778: PUSH
32779: LD_VAR 0 1
32783: PPUSH
32784: CALL_OW 266
32788: PUSH
32789: LD_INT 3
32791: NONEQUAL
32792: PUSH
32793: LD_VAR 0 1
32797: PPUSH
32798: CALL_OW 247
32802: PUSH
32803: LD_INT 1
32805: EQUAL
32806: NOT
32807: AND
32808: OR
32809: IFFALSE 32813
// exit ;
32811: GO 32962
// if GetType ( factory ) = unit_human then
32813: LD_VAR 0 1
32817: PPUSH
32818: CALL_OW 247
32822: PUSH
32823: LD_INT 1
32825: EQUAL
32826: IFFALSE 32843
// factory := IsInUnit ( factory ) ;
32828: LD_ADDR_VAR 0 1
32832: PUSH
32833: LD_VAR 0 1
32837: PPUSH
32838: CALL_OW 310
32842: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32843: LD_VAR 0 1
32847: PPUSH
32848: CALL_OW 266
32852: PUSH
32853: LD_INT 3
32855: NONEQUAL
32856: IFFALSE 32860
// exit ;
32858: GO 32962
// if HexInfo ( x , y ) = factory then
32860: LD_VAR 0 2
32864: PPUSH
32865: LD_VAR 0 3
32869: PPUSH
32870: CALL_OW 428
32874: PUSH
32875: LD_VAR 0 1
32879: EQUAL
32880: IFFALSE 32907
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32882: LD_ADDR_EXP 110
32886: PUSH
32887: LD_EXP 110
32891: PPUSH
32892: LD_VAR 0 1
32896: PPUSH
32897: LD_INT 0
32899: PPUSH
32900: CALL_OW 1
32904: ST_TO_ADDR
32905: GO 32958
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32907: LD_ADDR_EXP 110
32911: PUSH
32912: LD_EXP 110
32916: PPUSH
32917: LD_VAR 0 1
32921: PPUSH
32922: LD_VAR 0 1
32926: PPUSH
32927: CALL_OW 255
32931: PUSH
32932: LD_VAR 0 1
32936: PUSH
32937: LD_VAR 0 2
32941: PUSH
32942: LD_VAR 0 3
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: PPUSH
32953: CALL_OW 1
32957: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32958: CALL 32967 0 0
// end ;
32962: LD_VAR 0 4
32966: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
32967: LD_INT 0
32969: PPUSH
32970: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32971: LD_STRING resetFactoryWaypoint();
32973: PPUSH
32974: CALL_OW 559
// if factoryWaypoints then
32978: LD_EXP 110
32982: IFFALSE 33105
// begin for i := 1 to factoryWaypoints do
32984: LD_ADDR_VAR 0 2
32988: PUSH
32989: DOUBLE
32990: LD_INT 1
32992: DEC
32993: ST_TO_ADDR
32994: LD_EXP 110
32998: PUSH
32999: FOR_TO
33000: IFFALSE 33103
// if factoryWaypoints [ i ] then
33002: LD_EXP 110
33006: PUSH
33007: LD_VAR 0 2
33011: ARRAY
33012: IFFALSE 33101
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
33014: LD_STRING setFactoryWaypointXY(
33016: PUSH
33017: LD_EXP 110
33021: PUSH
33022: LD_VAR 0 2
33026: ARRAY
33027: PUSH
33028: LD_INT 1
33030: ARRAY
33031: STR
33032: PUSH
33033: LD_STRING ,
33035: STR
33036: PUSH
33037: LD_EXP 110
33041: PUSH
33042: LD_VAR 0 2
33046: ARRAY
33047: PUSH
33048: LD_INT 2
33050: ARRAY
33051: STR
33052: PUSH
33053: LD_STRING ,
33055: STR
33056: PUSH
33057: LD_EXP 110
33061: PUSH
33062: LD_VAR 0 2
33066: ARRAY
33067: PUSH
33068: LD_INT 3
33070: ARRAY
33071: STR
33072: PUSH
33073: LD_STRING ,
33075: STR
33076: PUSH
33077: LD_EXP 110
33081: PUSH
33082: LD_VAR 0 2
33086: ARRAY
33087: PUSH
33088: LD_INT 4
33090: ARRAY
33091: STR
33092: PUSH
33093: LD_STRING )
33095: STR
33096: PPUSH
33097: CALL_OW 559
33101: GO 32999
33103: POP
33104: POP
// end ; end ;
33105: LD_VAR 0 1
33109: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33110: LD_INT 0
33112: PPUSH
33113: PPUSH
33114: PPUSH
33115: PPUSH
33116: PPUSH
33117: PPUSH
33118: PPUSH
33119: PPUSH
33120: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33121: LD_VAR 0 1
33125: NOT
33126: PUSH
33127: LD_VAR 0 2
33131: PPUSH
33132: LD_VAR 0 3
33136: PPUSH
33137: CALL_OW 488
33141: NOT
33142: OR
33143: PUSH
33144: LD_VAR 0 4
33148: NOT
33149: OR
33150: IFFALSE 33154
// exit ;
33152: GO 33494
// list := [ ] ;
33154: LD_ADDR_VAR 0 13
33158: PUSH
33159: EMPTY
33160: ST_TO_ADDR
// if x - r < 0 then
33161: LD_VAR 0 2
33165: PUSH
33166: LD_VAR 0 4
33170: MINUS
33171: PUSH
33172: LD_INT 0
33174: LESS
33175: IFFALSE 33187
// min_x := 0 else
33177: LD_ADDR_VAR 0 7
33181: PUSH
33182: LD_INT 0
33184: ST_TO_ADDR
33185: GO 33203
// min_x := x - r ;
33187: LD_ADDR_VAR 0 7
33191: PUSH
33192: LD_VAR 0 2
33196: PUSH
33197: LD_VAR 0 4
33201: MINUS
33202: ST_TO_ADDR
// if y - r < 0 then
33203: LD_VAR 0 3
33207: PUSH
33208: LD_VAR 0 4
33212: MINUS
33213: PUSH
33214: LD_INT 0
33216: LESS
33217: IFFALSE 33229
// min_y := 0 else
33219: LD_ADDR_VAR 0 8
33223: PUSH
33224: LD_INT 0
33226: ST_TO_ADDR
33227: GO 33245
// min_y := y - r ;
33229: LD_ADDR_VAR 0 8
33233: PUSH
33234: LD_VAR 0 3
33238: PUSH
33239: LD_VAR 0 4
33243: MINUS
33244: ST_TO_ADDR
// max_x := x + r ;
33245: LD_ADDR_VAR 0 9
33249: PUSH
33250: LD_VAR 0 2
33254: PUSH
33255: LD_VAR 0 4
33259: PLUS
33260: ST_TO_ADDR
// max_y := y + r ;
33261: LD_ADDR_VAR 0 10
33265: PUSH
33266: LD_VAR 0 3
33270: PUSH
33271: LD_VAR 0 4
33275: PLUS
33276: ST_TO_ADDR
// for _x = min_x to max_x do
33277: LD_ADDR_VAR 0 11
33281: PUSH
33282: DOUBLE
33283: LD_VAR 0 7
33287: DEC
33288: ST_TO_ADDR
33289: LD_VAR 0 9
33293: PUSH
33294: FOR_TO
33295: IFFALSE 33412
// for _y = min_y to max_y do
33297: LD_ADDR_VAR 0 12
33301: PUSH
33302: DOUBLE
33303: LD_VAR 0 8
33307: DEC
33308: ST_TO_ADDR
33309: LD_VAR 0 10
33313: PUSH
33314: FOR_TO
33315: IFFALSE 33408
// begin if not ValidHex ( _x , _y ) then
33317: LD_VAR 0 11
33321: PPUSH
33322: LD_VAR 0 12
33326: PPUSH
33327: CALL_OW 488
33331: NOT
33332: IFFALSE 33336
// continue ;
33334: GO 33314
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33336: LD_VAR 0 11
33340: PPUSH
33341: LD_VAR 0 12
33345: PPUSH
33346: CALL_OW 351
33350: PUSH
33351: LD_VAR 0 11
33355: PPUSH
33356: LD_VAR 0 12
33360: PPUSH
33361: CALL_OW 554
33365: AND
33366: IFFALSE 33406
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33368: LD_ADDR_VAR 0 13
33372: PUSH
33373: LD_VAR 0 13
33377: PPUSH
33378: LD_VAR 0 13
33382: PUSH
33383: LD_INT 1
33385: PLUS
33386: PPUSH
33387: LD_VAR 0 11
33391: PUSH
33392: LD_VAR 0 12
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PPUSH
33401: CALL_OW 2
33405: ST_TO_ADDR
// end ;
33406: GO 33314
33408: POP
33409: POP
33410: GO 33294
33412: POP
33413: POP
// if not list then
33414: LD_VAR 0 13
33418: NOT
33419: IFFALSE 33423
// exit ;
33421: GO 33494
// for i in list do
33423: LD_ADDR_VAR 0 6
33427: PUSH
33428: LD_VAR 0 13
33432: PUSH
33433: FOR_IN
33434: IFFALSE 33492
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33436: LD_VAR 0 1
33440: PPUSH
33441: LD_STRING M
33443: PUSH
33444: LD_VAR 0 6
33448: PUSH
33449: LD_INT 1
33451: ARRAY
33452: PUSH
33453: LD_VAR 0 6
33457: PUSH
33458: LD_INT 2
33460: ARRAY
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 0
33467: PUSH
33468: LD_INT 0
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: PUSH
33483: EMPTY
33484: LIST
33485: PPUSH
33486: CALL_OW 447
33490: GO 33433
33492: POP
33493: POP
// end ;
33494: LD_VAR 0 5
33498: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33499: LD_EXP 111
33503: NOT
33504: IFFALSE 33554
33506: GO 33508
33508: DISABLE
// begin initHack := true ;
33509: LD_ADDR_EXP 111
33513: PUSH
33514: LD_INT 1
33516: ST_TO_ADDR
// hackTanks := [ ] ;
33517: LD_ADDR_EXP 112
33521: PUSH
33522: EMPTY
33523: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33524: LD_ADDR_EXP 113
33528: PUSH
33529: EMPTY
33530: ST_TO_ADDR
// hackLimit := 3 ;
33531: LD_ADDR_EXP 114
33535: PUSH
33536: LD_INT 3
33538: ST_TO_ADDR
// hackDist := 12 ;
33539: LD_ADDR_EXP 115
33543: PUSH
33544: LD_INT 12
33546: ST_TO_ADDR
// hackCounter := [ ] ;
33547: LD_ADDR_EXP 116
33551: PUSH
33552: EMPTY
33553: ST_TO_ADDR
// end ;
33554: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33555: LD_EXP 111
33559: PUSH
33560: LD_INT 34
33562: PUSH
33563: LD_EXP 34
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PPUSH
33572: CALL_OW 69
33576: AND
33577: IFFALSE 33832
33579: GO 33581
33581: DISABLE
33582: LD_INT 0
33584: PPUSH
33585: PPUSH
// begin enable ;
33586: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33587: LD_ADDR_VAR 0 1
33591: PUSH
33592: LD_INT 34
33594: PUSH
33595: LD_EXP 34
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PPUSH
33604: CALL_OW 69
33608: PUSH
33609: FOR_IN
33610: IFFALSE 33830
// begin if not i in hackTanks then
33612: LD_VAR 0 1
33616: PUSH
33617: LD_EXP 112
33621: IN
33622: NOT
33623: IFFALSE 33706
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33625: LD_ADDR_EXP 112
33629: PUSH
33630: LD_EXP 112
33634: PPUSH
33635: LD_EXP 112
33639: PUSH
33640: LD_INT 1
33642: PLUS
33643: PPUSH
33644: LD_VAR 0 1
33648: PPUSH
33649: CALL_OW 1
33653: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33654: LD_ADDR_EXP 113
33658: PUSH
33659: LD_EXP 113
33663: PPUSH
33664: LD_EXP 113
33668: PUSH
33669: LD_INT 1
33671: PLUS
33672: PPUSH
33673: EMPTY
33674: PPUSH
33675: CALL_OW 1
33679: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33680: LD_ADDR_EXP 116
33684: PUSH
33685: LD_EXP 116
33689: PPUSH
33690: LD_EXP 116
33694: PUSH
33695: LD_INT 1
33697: PLUS
33698: PPUSH
33699: EMPTY
33700: PPUSH
33701: CALL_OW 1
33705: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33706: LD_VAR 0 1
33710: PPUSH
33711: CALL_OW 302
33715: NOT
33716: IFFALSE 33729
// begin HackUnlinkAll ( i ) ;
33718: LD_VAR 0 1
33722: PPUSH
33723: CALL 33835 0 1
// continue ;
33727: GO 33609
// end ; HackCheckCapturedStatus ( i ) ;
33729: LD_VAR 0 1
33733: PPUSH
33734: CALL 34278 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33738: LD_ADDR_VAR 0 2
33742: PUSH
33743: LD_INT 81
33745: PUSH
33746: LD_VAR 0 1
33750: PPUSH
33751: CALL_OW 255
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 33
33762: PUSH
33763: LD_INT 3
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 91
33772: PUSH
33773: LD_VAR 0 1
33777: PUSH
33778: LD_EXP 115
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 50
33790: PUSH
33791: EMPTY
33792: LIST
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: PPUSH
33800: CALL_OW 69
33804: ST_TO_ADDR
// if not tmp then
33805: LD_VAR 0 2
33809: NOT
33810: IFFALSE 33814
// continue ;
33812: GO 33609
// HackLink ( i , tmp ) ;
33814: LD_VAR 0 1
33818: PPUSH
33819: LD_VAR 0 2
33823: PPUSH
33824: CALL 33971 0 2
// end ;
33828: GO 33609
33830: POP
33831: POP
// end ;
33832: PPOPN 2
33834: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33835: LD_INT 0
33837: PPUSH
33838: PPUSH
33839: PPUSH
// if not hack in hackTanks then
33840: LD_VAR 0 1
33844: PUSH
33845: LD_EXP 112
33849: IN
33850: NOT
33851: IFFALSE 33855
// exit ;
33853: GO 33966
// index := GetElementIndex ( hackTanks , hack ) ;
33855: LD_ADDR_VAR 0 4
33859: PUSH
33860: LD_EXP 112
33864: PPUSH
33865: LD_VAR 0 1
33869: PPUSH
33870: CALL 41440 0 2
33874: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
33875: LD_EXP 113
33879: PUSH
33880: LD_VAR 0 4
33884: ARRAY
33885: IFFALSE 33966
// begin for i in hackTanksCaptured [ index ] do
33887: LD_ADDR_VAR 0 3
33891: PUSH
33892: LD_EXP 113
33896: PUSH
33897: LD_VAR 0 4
33901: ARRAY
33902: PUSH
33903: FOR_IN
33904: IFFALSE 33930
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
33906: LD_VAR 0 3
33910: PUSH
33911: LD_INT 1
33913: ARRAY
33914: PPUSH
33915: LD_VAR 0 3
33919: PUSH
33920: LD_INT 2
33922: ARRAY
33923: PPUSH
33924: CALL_OW 235
33928: GO 33903
33930: POP
33931: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
33932: LD_ADDR_EXP 113
33936: PUSH
33937: LD_EXP 113
33941: PPUSH
33942: LD_VAR 0 4
33946: PPUSH
33947: EMPTY
33948: PPUSH
33949: CALL_OW 1
33953: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
33954: LD_VAR 0 1
33958: PPUSH
33959: LD_INT 0
33961: PPUSH
33962: CALL_OW 505
// end ; end ;
33966: LD_VAR 0 2
33970: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
33971: LD_INT 0
33973: PPUSH
33974: PPUSH
33975: PPUSH
// if not hack in hackTanks or not vehicles then
33976: LD_VAR 0 1
33980: PUSH
33981: LD_EXP 112
33985: IN
33986: NOT
33987: PUSH
33988: LD_VAR 0 2
33992: NOT
33993: OR
33994: IFFALSE 33998
// exit ;
33996: GO 34273
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
33998: LD_ADDR_VAR 0 2
34002: PUSH
34003: LD_VAR 0 1
34007: PPUSH
34008: LD_VAR 0 2
34012: PPUSH
34013: LD_INT 1
34015: PPUSH
34016: LD_INT 1
34018: PPUSH
34019: CALL 42090 0 4
34023: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34024: LD_ADDR_VAR 0 5
34028: PUSH
34029: LD_EXP 112
34033: PPUSH
34034: LD_VAR 0 1
34038: PPUSH
34039: CALL 41440 0 2
34043: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34044: LD_EXP 113
34048: PUSH
34049: LD_VAR 0 5
34053: ARRAY
34054: PUSH
34055: LD_EXP 114
34059: LESS
34060: IFFALSE 34249
// begin for i := 1 to vehicles do
34062: LD_ADDR_VAR 0 4
34066: PUSH
34067: DOUBLE
34068: LD_INT 1
34070: DEC
34071: ST_TO_ADDR
34072: LD_VAR 0 2
34076: PUSH
34077: FOR_TO
34078: IFFALSE 34247
// begin if hackTanksCaptured [ index ] = hackLimit then
34080: LD_EXP 113
34084: PUSH
34085: LD_VAR 0 5
34089: ARRAY
34090: PUSH
34091: LD_EXP 114
34095: EQUAL
34096: IFFALSE 34100
// break ;
34098: GO 34247
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34100: LD_ADDR_EXP 116
34104: PUSH
34105: LD_EXP 116
34109: PPUSH
34110: LD_VAR 0 5
34114: PPUSH
34115: LD_EXP 116
34119: PUSH
34120: LD_VAR 0 5
34124: ARRAY
34125: PUSH
34126: LD_INT 1
34128: PLUS
34129: PPUSH
34130: CALL_OW 1
34134: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34135: LD_ADDR_EXP 113
34139: PUSH
34140: LD_EXP 113
34144: PPUSH
34145: LD_VAR 0 5
34149: PUSH
34150: LD_EXP 113
34154: PUSH
34155: LD_VAR 0 5
34159: ARRAY
34160: PUSH
34161: LD_INT 1
34163: PLUS
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PPUSH
34169: LD_VAR 0 2
34173: PUSH
34174: LD_VAR 0 4
34178: ARRAY
34179: PUSH
34180: LD_VAR 0 2
34184: PUSH
34185: LD_VAR 0 4
34189: ARRAY
34190: PPUSH
34191: CALL_OW 255
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PPUSH
34200: CALL 41655 0 3
34204: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34205: LD_VAR 0 2
34209: PUSH
34210: LD_VAR 0 4
34214: ARRAY
34215: PPUSH
34216: LD_VAR 0 1
34220: PPUSH
34221: CALL_OW 255
34225: PPUSH
34226: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34230: LD_VAR 0 2
34234: PUSH
34235: LD_VAR 0 4
34239: ARRAY
34240: PPUSH
34241: CALL_OW 141
// end ;
34245: GO 34077
34247: POP
34248: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34249: LD_VAR 0 1
34253: PPUSH
34254: LD_EXP 113
34258: PUSH
34259: LD_VAR 0 5
34263: ARRAY
34264: PUSH
34265: LD_INT 0
34267: PLUS
34268: PPUSH
34269: CALL_OW 505
// end ;
34273: LD_VAR 0 3
34277: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34278: LD_INT 0
34280: PPUSH
34281: PPUSH
34282: PPUSH
34283: PPUSH
// if not hack in hackTanks then
34284: LD_VAR 0 1
34288: PUSH
34289: LD_EXP 112
34293: IN
34294: NOT
34295: IFFALSE 34299
// exit ;
34297: GO 34539
// index := GetElementIndex ( hackTanks , hack ) ;
34299: LD_ADDR_VAR 0 4
34303: PUSH
34304: LD_EXP 112
34308: PPUSH
34309: LD_VAR 0 1
34313: PPUSH
34314: CALL 41440 0 2
34318: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34319: LD_ADDR_VAR 0 3
34323: PUSH
34324: DOUBLE
34325: LD_EXP 113
34329: PUSH
34330: LD_VAR 0 4
34334: ARRAY
34335: INC
34336: ST_TO_ADDR
34337: LD_INT 1
34339: PUSH
34340: FOR_DOWNTO
34341: IFFALSE 34513
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34343: LD_ADDR_VAR 0 5
34347: PUSH
34348: LD_EXP 113
34352: PUSH
34353: LD_VAR 0 4
34357: ARRAY
34358: PUSH
34359: LD_VAR 0 3
34363: ARRAY
34364: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34365: LD_VAR 0 5
34369: PUSH
34370: LD_INT 1
34372: ARRAY
34373: PPUSH
34374: CALL_OW 302
34378: NOT
34379: PUSH
34380: LD_VAR 0 5
34384: PUSH
34385: LD_INT 1
34387: ARRAY
34388: PPUSH
34389: CALL_OW 255
34393: PUSH
34394: LD_VAR 0 1
34398: PPUSH
34399: CALL_OW 255
34403: NONEQUAL
34404: OR
34405: IFFALSE 34511
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34407: LD_VAR 0 5
34411: PUSH
34412: LD_INT 1
34414: ARRAY
34415: PPUSH
34416: CALL_OW 305
34420: PUSH
34421: LD_VAR 0 5
34425: PUSH
34426: LD_INT 1
34428: ARRAY
34429: PPUSH
34430: CALL_OW 255
34434: PUSH
34435: LD_VAR 0 1
34439: PPUSH
34440: CALL_OW 255
34444: EQUAL
34445: AND
34446: IFFALSE 34470
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34448: LD_VAR 0 5
34452: PUSH
34453: LD_INT 1
34455: ARRAY
34456: PPUSH
34457: LD_VAR 0 5
34461: PUSH
34462: LD_INT 2
34464: ARRAY
34465: PPUSH
34466: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34470: LD_ADDR_EXP 113
34474: PUSH
34475: LD_EXP 113
34479: PPUSH
34480: LD_VAR 0 4
34484: PPUSH
34485: LD_EXP 113
34489: PUSH
34490: LD_VAR 0 4
34494: ARRAY
34495: PPUSH
34496: LD_VAR 0 3
34500: PPUSH
34501: CALL_OW 3
34505: PPUSH
34506: CALL_OW 1
34510: ST_TO_ADDR
// end ; end ;
34511: GO 34340
34513: POP
34514: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34515: LD_VAR 0 1
34519: PPUSH
34520: LD_EXP 113
34524: PUSH
34525: LD_VAR 0 4
34529: ARRAY
34530: PUSH
34531: LD_INT 0
34533: PLUS
34534: PPUSH
34535: CALL_OW 505
// end ;
34539: LD_VAR 0 2
34543: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34544: LD_INT 0
34546: PPUSH
34547: PPUSH
34548: PPUSH
34549: PPUSH
// if not hack in hackTanks then
34550: LD_VAR 0 1
34554: PUSH
34555: LD_EXP 112
34559: IN
34560: NOT
34561: IFFALSE 34565
// exit ;
34563: GO 34650
// index := GetElementIndex ( hackTanks , hack ) ;
34565: LD_ADDR_VAR 0 5
34569: PUSH
34570: LD_EXP 112
34574: PPUSH
34575: LD_VAR 0 1
34579: PPUSH
34580: CALL 41440 0 2
34584: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34585: LD_ADDR_VAR 0 4
34589: PUSH
34590: DOUBLE
34591: LD_INT 1
34593: DEC
34594: ST_TO_ADDR
34595: LD_EXP 113
34599: PUSH
34600: LD_VAR 0 5
34604: ARRAY
34605: PUSH
34606: FOR_TO
34607: IFFALSE 34648
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34609: LD_EXP 113
34613: PUSH
34614: LD_VAR 0 5
34618: ARRAY
34619: PUSH
34620: LD_VAR 0 4
34624: ARRAY
34625: PUSH
34626: LD_INT 1
34628: ARRAY
34629: PUSH
34630: LD_VAR 0 2
34634: EQUAL
34635: IFFALSE 34646
// KillUnit ( vehicle ) ;
34637: LD_VAR 0 2
34641: PPUSH
34642: CALL_OW 66
34646: GO 34606
34648: POP
34649: POP
// end ;
34650: LD_VAR 0 3
34654: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34655: LD_EXP 117
34659: NOT
34660: IFFALSE 34695
34662: GO 34664
34664: DISABLE
// begin initMiner := true ;
34665: LD_ADDR_EXP 117
34669: PUSH
34670: LD_INT 1
34672: ST_TO_ADDR
// minersList := [ ] ;
34673: LD_ADDR_EXP 118
34677: PUSH
34678: EMPTY
34679: ST_TO_ADDR
// minerMinesList := [ ] ;
34680: LD_ADDR_EXP 119
34684: PUSH
34685: EMPTY
34686: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34687: LD_ADDR_EXP 120
34691: PUSH
34692: LD_INT 5
34694: ST_TO_ADDR
// end ;
34695: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34696: LD_EXP 117
34700: PUSH
34701: LD_INT 34
34703: PUSH
34704: LD_EXP 39
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PPUSH
34713: CALL_OW 69
34717: AND
34718: IFFALSE 35181
34720: GO 34722
34722: DISABLE
34723: LD_INT 0
34725: PPUSH
34726: PPUSH
34727: PPUSH
34728: PPUSH
// begin enable ;
34729: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34730: LD_ADDR_VAR 0 1
34734: PUSH
34735: LD_INT 34
34737: PUSH
34738: LD_EXP 39
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PPUSH
34747: CALL_OW 69
34751: PUSH
34752: FOR_IN
34753: IFFALSE 34825
// begin if not i in minersList then
34755: LD_VAR 0 1
34759: PUSH
34760: LD_EXP 118
34764: IN
34765: NOT
34766: IFFALSE 34823
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34768: LD_ADDR_EXP 118
34772: PUSH
34773: LD_EXP 118
34777: PPUSH
34778: LD_EXP 118
34782: PUSH
34783: LD_INT 1
34785: PLUS
34786: PPUSH
34787: LD_VAR 0 1
34791: PPUSH
34792: CALL_OW 1
34796: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34797: LD_ADDR_EXP 119
34801: PUSH
34802: LD_EXP 119
34806: PPUSH
34807: LD_EXP 119
34811: PUSH
34812: LD_INT 1
34814: PLUS
34815: PPUSH
34816: EMPTY
34817: PPUSH
34818: CALL_OW 1
34822: ST_TO_ADDR
// end end ;
34823: GO 34752
34825: POP
34826: POP
// for i := minerMinesList downto 1 do
34827: LD_ADDR_VAR 0 1
34831: PUSH
34832: DOUBLE
34833: LD_EXP 119
34837: INC
34838: ST_TO_ADDR
34839: LD_INT 1
34841: PUSH
34842: FOR_DOWNTO
34843: IFFALSE 35179
// begin if IsLive ( minersList [ i ] ) then
34845: LD_EXP 118
34849: PUSH
34850: LD_VAR 0 1
34854: ARRAY
34855: PPUSH
34856: CALL_OW 300
34860: IFFALSE 34888
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
34862: LD_EXP 118
34866: PUSH
34867: LD_VAR 0 1
34871: ARRAY
34872: PPUSH
34873: LD_EXP 119
34877: PUSH
34878: LD_VAR 0 1
34882: ARRAY
34883: PPUSH
34884: CALL_OW 505
// if not minerMinesList [ i ] then
34888: LD_EXP 119
34892: PUSH
34893: LD_VAR 0 1
34897: ARRAY
34898: NOT
34899: IFFALSE 34903
// continue ;
34901: GO 34842
// for j := minerMinesList [ i ] downto 1 do
34903: LD_ADDR_VAR 0 2
34907: PUSH
34908: DOUBLE
34909: LD_EXP 119
34913: PUSH
34914: LD_VAR 0 1
34918: ARRAY
34919: INC
34920: ST_TO_ADDR
34921: LD_INT 1
34923: PUSH
34924: FOR_DOWNTO
34925: IFFALSE 35175
// begin side := GetSide ( minersList [ i ] ) ;
34927: LD_ADDR_VAR 0 3
34931: PUSH
34932: LD_EXP 118
34936: PUSH
34937: LD_VAR 0 1
34941: ARRAY
34942: PPUSH
34943: CALL_OW 255
34947: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
34948: LD_ADDR_VAR 0 4
34952: PUSH
34953: LD_EXP 119
34957: PUSH
34958: LD_VAR 0 1
34962: ARRAY
34963: PUSH
34964: LD_VAR 0 2
34968: ARRAY
34969: PUSH
34970: LD_INT 1
34972: ARRAY
34973: PPUSH
34974: LD_EXP 119
34978: PUSH
34979: LD_VAR 0 1
34983: ARRAY
34984: PUSH
34985: LD_VAR 0 2
34989: ARRAY
34990: PUSH
34991: LD_INT 2
34993: ARRAY
34994: PPUSH
34995: CALL_OW 428
34999: ST_TO_ADDR
// if not tmp then
35000: LD_VAR 0 4
35004: NOT
35005: IFFALSE 35009
// continue ;
35007: GO 34924
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35009: LD_VAR 0 4
35013: PUSH
35014: LD_INT 81
35016: PUSH
35017: LD_VAR 0 3
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PPUSH
35026: CALL_OW 69
35030: IN
35031: PUSH
35032: LD_EXP 119
35036: PUSH
35037: LD_VAR 0 1
35041: ARRAY
35042: PUSH
35043: LD_VAR 0 2
35047: ARRAY
35048: PUSH
35049: LD_INT 1
35051: ARRAY
35052: PPUSH
35053: LD_EXP 119
35057: PUSH
35058: LD_VAR 0 1
35062: ARRAY
35063: PUSH
35064: LD_VAR 0 2
35068: ARRAY
35069: PUSH
35070: LD_INT 2
35072: ARRAY
35073: PPUSH
35074: CALL_OW 458
35078: AND
35079: IFFALSE 35173
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35081: LD_EXP 119
35085: PUSH
35086: LD_VAR 0 1
35090: ARRAY
35091: PUSH
35092: LD_VAR 0 2
35096: ARRAY
35097: PUSH
35098: LD_INT 1
35100: ARRAY
35101: PPUSH
35102: LD_EXP 119
35106: PUSH
35107: LD_VAR 0 1
35111: ARRAY
35112: PUSH
35113: LD_VAR 0 2
35117: ARRAY
35118: PUSH
35119: LD_INT 2
35121: ARRAY
35122: PPUSH
35123: LD_VAR 0 3
35127: PPUSH
35128: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35132: LD_ADDR_EXP 119
35136: PUSH
35137: LD_EXP 119
35141: PPUSH
35142: LD_VAR 0 1
35146: PPUSH
35147: LD_EXP 119
35151: PUSH
35152: LD_VAR 0 1
35156: ARRAY
35157: PPUSH
35158: LD_VAR 0 2
35162: PPUSH
35163: CALL_OW 3
35167: PPUSH
35168: CALL_OW 1
35172: ST_TO_ADDR
// end ; end ;
35173: GO 34924
35175: POP
35176: POP
// end ;
35177: GO 34842
35179: POP
35180: POP
// end ;
35181: PPOPN 4
35183: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35184: LD_INT 0
35186: PPUSH
35187: PPUSH
// result := false ;
35188: LD_ADDR_VAR 0 4
35192: PUSH
35193: LD_INT 0
35195: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35196: LD_VAR 0 1
35200: PPUSH
35201: CALL_OW 264
35205: PUSH
35206: LD_EXP 39
35210: EQUAL
35211: NOT
35212: IFFALSE 35216
// exit ;
35214: GO 35456
// index := GetElementIndex ( minersList , unit ) ;
35216: LD_ADDR_VAR 0 5
35220: PUSH
35221: LD_EXP 118
35225: PPUSH
35226: LD_VAR 0 1
35230: PPUSH
35231: CALL 41440 0 2
35235: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35236: LD_EXP 119
35240: PUSH
35241: LD_VAR 0 5
35245: ARRAY
35246: PUSH
35247: LD_EXP 120
35251: GREATEREQUAL
35252: IFFALSE 35256
// exit ;
35254: GO 35456
// ComMoveXY ( unit , x , y ) ;
35256: LD_VAR 0 1
35260: PPUSH
35261: LD_VAR 0 2
35265: PPUSH
35266: LD_VAR 0 3
35270: PPUSH
35271: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35275: LD_INT 35
35277: PPUSH
35278: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35282: LD_VAR 0 1
35286: PPUSH
35287: LD_VAR 0 2
35291: PPUSH
35292: LD_VAR 0 3
35296: PPUSH
35297: CALL 72159 0 3
35301: NOT
35302: PUSH
35303: LD_VAR 0 1
35307: PPUSH
35308: CALL_OW 314
35312: AND
35313: IFFALSE 35317
// exit ;
35315: GO 35456
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35317: LD_VAR 0 2
35321: PPUSH
35322: LD_VAR 0 3
35326: PPUSH
35327: CALL_OW 428
35331: PUSH
35332: LD_VAR 0 1
35336: EQUAL
35337: PUSH
35338: LD_VAR 0 1
35342: PPUSH
35343: CALL_OW 314
35347: NOT
35348: AND
35349: IFFALSE 35275
// PlaySoundXY ( x , y , PlantMine ) ;
35351: LD_VAR 0 2
35355: PPUSH
35356: LD_VAR 0 3
35360: PPUSH
35361: LD_STRING PlantMine
35363: PPUSH
35364: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35368: LD_VAR 0 2
35372: PPUSH
35373: LD_VAR 0 3
35377: PPUSH
35378: LD_VAR 0 1
35382: PPUSH
35383: CALL_OW 255
35387: PPUSH
35388: LD_INT 0
35390: PPUSH
35391: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35395: LD_ADDR_EXP 119
35399: PUSH
35400: LD_EXP 119
35404: PPUSH
35405: LD_VAR 0 5
35409: PUSH
35410: LD_EXP 119
35414: PUSH
35415: LD_VAR 0 5
35419: ARRAY
35420: PUSH
35421: LD_INT 1
35423: PLUS
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PPUSH
35429: LD_VAR 0 2
35433: PUSH
35434: LD_VAR 0 3
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PPUSH
35443: CALL 41655 0 3
35447: ST_TO_ADDR
// result := true ;
35448: LD_ADDR_VAR 0 4
35452: PUSH
35453: LD_INT 1
35455: ST_TO_ADDR
// end ;
35456: LD_VAR 0 4
35460: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35461: LD_INT 0
35463: PPUSH
35464: PPUSH
35465: PPUSH
// if not unit in minersList then
35466: LD_VAR 0 1
35470: PUSH
35471: LD_EXP 118
35475: IN
35476: NOT
35477: IFFALSE 35481
// exit ;
35479: GO 35873
// index := GetElementIndex ( minersList , unit ) ;
35481: LD_ADDR_VAR 0 6
35485: PUSH
35486: LD_EXP 118
35490: PPUSH
35491: LD_VAR 0 1
35495: PPUSH
35496: CALL 41440 0 2
35500: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35501: LD_ADDR_VAR 0 5
35505: PUSH
35506: DOUBLE
35507: LD_EXP 119
35511: PUSH
35512: LD_VAR 0 6
35516: ARRAY
35517: INC
35518: ST_TO_ADDR
35519: LD_INT 1
35521: PUSH
35522: FOR_DOWNTO
35523: IFFALSE 35684
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35525: LD_EXP 119
35529: PUSH
35530: LD_VAR 0 6
35534: ARRAY
35535: PUSH
35536: LD_VAR 0 5
35540: ARRAY
35541: PUSH
35542: LD_INT 1
35544: ARRAY
35545: PUSH
35546: LD_VAR 0 2
35550: EQUAL
35551: PUSH
35552: LD_EXP 119
35556: PUSH
35557: LD_VAR 0 6
35561: ARRAY
35562: PUSH
35563: LD_VAR 0 5
35567: ARRAY
35568: PUSH
35569: LD_INT 2
35571: ARRAY
35572: PUSH
35573: LD_VAR 0 3
35577: EQUAL
35578: AND
35579: IFFALSE 35682
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35581: LD_EXP 119
35585: PUSH
35586: LD_VAR 0 6
35590: ARRAY
35591: PUSH
35592: LD_VAR 0 5
35596: ARRAY
35597: PUSH
35598: LD_INT 1
35600: ARRAY
35601: PPUSH
35602: LD_EXP 119
35606: PUSH
35607: LD_VAR 0 6
35611: ARRAY
35612: PUSH
35613: LD_VAR 0 5
35617: ARRAY
35618: PUSH
35619: LD_INT 2
35621: ARRAY
35622: PPUSH
35623: LD_VAR 0 1
35627: PPUSH
35628: CALL_OW 255
35632: PPUSH
35633: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35637: LD_ADDR_EXP 119
35641: PUSH
35642: LD_EXP 119
35646: PPUSH
35647: LD_VAR 0 6
35651: PPUSH
35652: LD_EXP 119
35656: PUSH
35657: LD_VAR 0 6
35661: ARRAY
35662: PPUSH
35663: LD_VAR 0 5
35667: PPUSH
35668: CALL_OW 3
35672: PPUSH
35673: CALL_OW 1
35677: ST_TO_ADDR
// exit ;
35678: POP
35679: POP
35680: GO 35873
// end ; end ;
35682: GO 35522
35684: POP
35685: POP
// for i := minerMinesList [ index ] downto 1 do
35686: LD_ADDR_VAR 0 5
35690: PUSH
35691: DOUBLE
35692: LD_EXP 119
35696: PUSH
35697: LD_VAR 0 6
35701: ARRAY
35702: INC
35703: ST_TO_ADDR
35704: LD_INT 1
35706: PUSH
35707: FOR_DOWNTO
35708: IFFALSE 35871
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35710: LD_EXP 119
35714: PUSH
35715: LD_VAR 0 6
35719: ARRAY
35720: PUSH
35721: LD_VAR 0 5
35725: ARRAY
35726: PUSH
35727: LD_INT 1
35729: ARRAY
35730: PPUSH
35731: LD_EXP 119
35735: PUSH
35736: LD_VAR 0 6
35740: ARRAY
35741: PUSH
35742: LD_VAR 0 5
35746: ARRAY
35747: PUSH
35748: LD_INT 2
35750: ARRAY
35751: PPUSH
35752: LD_VAR 0 2
35756: PPUSH
35757: LD_VAR 0 3
35761: PPUSH
35762: CALL_OW 298
35766: PUSH
35767: LD_INT 6
35769: LESS
35770: IFFALSE 35869
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35772: LD_EXP 119
35776: PUSH
35777: LD_VAR 0 6
35781: ARRAY
35782: PUSH
35783: LD_VAR 0 5
35787: ARRAY
35788: PUSH
35789: LD_INT 1
35791: ARRAY
35792: PPUSH
35793: LD_EXP 119
35797: PUSH
35798: LD_VAR 0 6
35802: ARRAY
35803: PUSH
35804: LD_VAR 0 5
35808: ARRAY
35809: PUSH
35810: LD_INT 2
35812: ARRAY
35813: PPUSH
35814: LD_VAR 0 1
35818: PPUSH
35819: CALL_OW 255
35823: PPUSH
35824: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35828: LD_ADDR_EXP 119
35832: PUSH
35833: LD_EXP 119
35837: PPUSH
35838: LD_VAR 0 6
35842: PPUSH
35843: LD_EXP 119
35847: PUSH
35848: LD_VAR 0 6
35852: ARRAY
35853: PPUSH
35854: LD_VAR 0 5
35858: PPUSH
35859: CALL_OW 3
35863: PPUSH
35864: CALL_OW 1
35868: ST_TO_ADDR
// end ; end ;
35869: GO 35707
35871: POP
35872: POP
// end ;
35873: LD_VAR 0 4
35877: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
35878: LD_INT 0
35880: PPUSH
35881: PPUSH
35882: PPUSH
35883: PPUSH
35884: PPUSH
35885: PPUSH
35886: PPUSH
35887: PPUSH
35888: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
35889: LD_VAR 0 1
35893: PPUSH
35894: CALL_OW 264
35898: PUSH
35899: LD_EXP 39
35903: EQUAL
35904: NOT
35905: PUSH
35906: LD_VAR 0 1
35910: PUSH
35911: LD_EXP 118
35915: IN
35916: NOT
35917: OR
35918: IFFALSE 35922
// exit ;
35920: GO 36244
// index := GetElementIndex ( minersList , unit ) ;
35922: LD_ADDR_VAR 0 6
35926: PUSH
35927: LD_EXP 118
35931: PPUSH
35932: LD_VAR 0 1
35936: PPUSH
35937: CALL 41440 0 2
35941: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
35942: LD_ADDR_VAR 0 8
35946: PUSH
35947: LD_EXP 120
35951: PUSH
35952: LD_EXP 119
35956: PUSH
35957: LD_VAR 0 6
35961: ARRAY
35962: MINUS
35963: ST_TO_ADDR
// if not minesFreeAmount then
35964: LD_VAR 0 8
35968: NOT
35969: IFFALSE 35973
// exit ;
35971: GO 36244
// tmp := [ ] ;
35973: LD_ADDR_VAR 0 7
35977: PUSH
35978: EMPTY
35979: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
35980: LD_ADDR_VAR 0 5
35984: PUSH
35985: DOUBLE
35986: LD_INT 1
35988: DEC
35989: ST_TO_ADDR
35990: LD_VAR 0 8
35994: PUSH
35995: FOR_TO
35996: IFFALSE 36191
// begin _d := rand ( 0 , 5 ) ;
35998: LD_ADDR_VAR 0 11
36002: PUSH
36003: LD_INT 0
36005: PPUSH
36006: LD_INT 5
36008: PPUSH
36009: CALL_OW 12
36013: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36014: LD_ADDR_VAR 0 12
36018: PUSH
36019: LD_INT 2
36021: PPUSH
36022: LD_INT 6
36024: PPUSH
36025: CALL_OW 12
36029: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36030: LD_ADDR_VAR 0 9
36034: PUSH
36035: LD_VAR 0 2
36039: PPUSH
36040: LD_VAR 0 11
36044: PPUSH
36045: LD_VAR 0 12
36049: PPUSH
36050: CALL_OW 272
36054: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36055: LD_ADDR_VAR 0 10
36059: PUSH
36060: LD_VAR 0 3
36064: PPUSH
36065: LD_VAR 0 11
36069: PPUSH
36070: LD_VAR 0 12
36074: PPUSH
36075: CALL_OW 273
36079: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36080: LD_VAR 0 9
36084: PPUSH
36085: LD_VAR 0 10
36089: PPUSH
36090: CALL_OW 488
36094: PUSH
36095: LD_VAR 0 9
36099: PUSH
36100: LD_VAR 0 10
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_VAR 0 7
36113: IN
36114: NOT
36115: AND
36116: PUSH
36117: LD_VAR 0 9
36121: PPUSH
36122: LD_VAR 0 10
36126: PPUSH
36127: CALL_OW 458
36131: NOT
36132: AND
36133: IFFALSE 36175
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36135: LD_ADDR_VAR 0 7
36139: PUSH
36140: LD_VAR 0 7
36144: PPUSH
36145: LD_VAR 0 7
36149: PUSH
36150: LD_INT 1
36152: PLUS
36153: PPUSH
36154: LD_VAR 0 9
36158: PUSH
36159: LD_VAR 0 10
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PPUSH
36168: CALL_OW 1
36172: ST_TO_ADDR
36173: GO 36189
// i := i - 1 ;
36175: LD_ADDR_VAR 0 5
36179: PUSH
36180: LD_VAR 0 5
36184: PUSH
36185: LD_INT 1
36187: MINUS
36188: ST_TO_ADDR
// end ;
36189: GO 35995
36191: POP
36192: POP
// for i in tmp do
36193: LD_ADDR_VAR 0 5
36197: PUSH
36198: LD_VAR 0 7
36202: PUSH
36203: FOR_IN
36204: IFFALSE 36242
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36206: LD_VAR 0 1
36210: PPUSH
36211: LD_VAR 0 5
36215: PUSH
36216: LD_INT 1
36218: ARRAY
36219: PPUSH
36220: LD_VAR 0 5
36224: PUSH
36225: LD_INT 2
36227: ARRAY
36228: PPUSH
36229: CALL 35184 0 3
36233: NOT
36234: IFFALSE 36240
// exit ;
36236: POP
36237: POP
36238: GO 36244
36240: GO 36203
36242: POP
36243: POP
// end ;
36244: LD_VAR 0 4
36248: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36249: LD_INT 0
36251: PPUSH
36252: PPUSH
36253: PPUSH
36254: PPUSH
36255: PPUSH
36256: PPUSH
36257: PPUSH
// if not GetClass ( unit ) = class_sniper then
36258: LD_VAR 0 1
36262: PPUSH
36263: CALL_OW 257
36267: PUSH
36268: LD_INT 5
36270: EQUAL
36271: NOT
36272: IFFALSE 36276
// exit ;
36274: GO 36664
// dist := 8 ;
36276: LD_ADDR_VAR 0 5
36280: PUSH
36281: LD_INT 8
36283: ST_TO_ADDR
// viewRange := 12 ;
36284: LD_ADDR_VAR 0 7
36288: PUSH
36289: LD_INT 12
36291: ST_TO_ADDR
// side := GetSide ( unit ) ;
36292: LD_ADDR_VAR 0 6
36296: PUSH
36297: LD_VAR 0 1
36301: PPUSH
36302: CALL_OW 255
36306: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36307: LD_INT 61
36309: PPUSH
36310: LD_VAR 0 6
36314: PPUSH
36315: CALL_OW 321
36319: PUSH
36320: LD_INT 2
36322: EQUAL
36323: IFFALSE 36333
// viewRange := 16 ;
36325: LD_ADDR_VAR 0 7
36329: PUSH
36330: LD_INT 16
36332: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36333: LD_VAR 0 1
36337: PPUSH
36338: LD_VAR 0 2
36342: PPUSH
36343: LD_VAR 0 3
36347: PPUSH
36348: CALL_OW 297
36352: PUSH
36353: LD_VAR 0 5
36357: GREATER
36358: IFFALSE 36437
// begin ComMoveXY ( unit , x , y ) ;
36360: LD_VAR 0 1
36364: PPUSH
36365: LD_VAR 0 2
36369: PPUSH
36370: LD_VAR 0 3
36374: PPUSH
36375: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36379: LD_INT 35
36381: PPUSH
36382: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36386: LD_VAR 0 1
36390: PPUSH
36391: LD_VAR 0 2
36395: PPUSH
36396: LD_VAR 0 3
36400: PPUSH
36401: CALL 72159 0 3
36405: NOT
36406: IFFALSE 36410
// exit ;
36408: GO 36664
// until GetDistUnitXY ( unit , x , y ) < dist ;
36410: LD_VAR 0 1
36414: PPUSH
36415: LD_VAR 0 2
36419: PPUSH
36420: LD_VAR 0 3
36424: PPUSH
36425: CALL_OW 297
36429: PUSH
36430: LD_VAR 0 5
36434: LESS
36435: IFFALSE 36379
// end ; ComTurnXY ( unit , x , y ) ;
36437: LD_VAR 0 1
36441: PPUSH
36442: LD_VAR 0 2
36446: PPUSH
36447: LD_VAR 0 3
36451: PPUSH
36452: CALL_OW 118
// wait ( 5 ) ;
36456: LD_INT 5
36458: PPUSH
36459: CALL_OW 67
// _d := GetDir ( unit ) ;
36463: LD_ADDR_VAR 0 10
36467: PUSH
36468: LD_VAR 0 1
36472: PPUSH
36473: CALL_OW 254
36477: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36478: LD_ADDR_VAR 0 8
36482: PUSH
36483: LD_VAR 0 1
36487: PPUSH
36488: CALL_OW 250
36492: PPUSH
36493: LD_VAR 0 10
36497: PPUSH
36498: LD_VAR 0 5
36502: PPUSH
36503: CALL_OW 272
36507: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36508: LD_ADDR_VAR 0 9
36512: PUSH
36513: LD_VAR 0 1
36517: PPUSH
36518: CALL_OW 251
36522: PPUSH
36523: LD_VAR 0 10
36527: PPUSH
36528: LD_VAR 0 5
36532: PPUSH
36533: CALL_OW 273
36537: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36538: LD_VAR 0 8
36542: PPUSH
36543: LD_VAR 0 9
36547: PPUSH
36548: CALL_OW 488
36552: NOT
36553: IFFALSE 36557
// exit ;
36555: GO 36664
// ComAnimCustom ( unit , 1 ) ;
36557: LD_VAR 0 1
36561: PPUSH
36562: LD_INT 1
36564: PPUSH
36565: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36569: LD_VAR 0 8
36573: PPUSH
36574: LD_VAR 0 9
36578: PPUSH
36579: LD_VAR 0 6
36583: PPUSH
36584: LD_VAR 0 7
36588: PPUSH
36589: CALL_OW 330
// repeat wait ( 1 ) ;
36593: LD_INT 1
36595: PPUSH
36596: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36600: LD_VAR 0 1
36604: PPUSH
36605: CALL_OW 316
36609: PUSH
36610: LD_VAR 0 1
36614: PPUSH
36615: CALL_OW 314
36619: OR
36620: PUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: CALL_OW 302
36630: NOT
36631: OR
36632: PUSH
36633: LD_VAR 0 1
36637: PPUSH
36638: CALL_OW 301
36642: OR
36643: IFFALSE 36593
// RemoveSeeing ( _x , _y , side ) ;
36645: LD_VAR 0 8
36649: PPUSH
36650: LD_VAR 0 9
36654: PPUSH
36655: LD_VAR 0 6
36659: PPUSH
36660: CALL_OW 331
// end ; end_of_file
36664: LD_VAR 0 4
36668: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36669: LD_INT 0
36671: PPUSH
36672: PPUSH
// if exist_mode then
36673: LD_VAR 0 2
36677: IFFALSE 36702
// unit := CreateCharacter ( prefix & ident ) else
36679: LD_ADDR_VAR 0 5
36683: PUSH
36684: LD_VAR 0 3
36688: PUSH
36689: LD_VAR 0 1
36693: STR
36694: PPUSH
36695: CALL_OW 34
36699: ST_TO_ADDR
36700: GO 36717
// unit := NewCharacter ( ident ) ;
36702: LD_ADDR_VAR 0 5
36706: PUSH
36707: LD_VAR 0 1
36711: PPUSH
36712: CALL_OW 25
36716: ST_TO_ADDR
// result := unit ;
36717: LD_ADDR_VAR 0 4
36721: PUSH
36722: LD_VAR 0 5
36726: ST_TO_ADDR
// end ;
36727: LD_VAR 0 4
36731: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36732: LD_INT 0
36734: PPUSH
36735: PPUSH
// if not side or not nation then
36736: LD_VAR 0 1
36740: NOT
36741: PUSH
36742: LD_VAR 0 2
36746: NOT
36747: OR
36748: IFFALSE 36752
// exit ;
36750: GO 37520
// case nation of nation_american :
36752: LD_VAR 0 2
36756: PUSH
36757: LD_INT 1
36759: DOUBLE
36760: EQUAL
36761: IFTRUE 36765
36763: GO 36979
36765: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36766: LD_ADDR_VAR 0 4
36770: PUSH
36771: LD_INT 35
36773: PUSH
36774: LD_INT 45
36776: PUSH
36777: LD_INT 46
36779: PUSH
36780: LD_INT 47
36782: PUSH
36783: LD_INT 82
36785: PUSH
36786: LD_INT 83
36788: PUSH
36789: LD_INT 84
36791: PUSH
36792: LD_INT 85
36794: PUSH
36795: LD_INT 86
36797: PUSH
36798: LD_INT 1
36800: PUSH
36801: LD_INT 2
36803: PUSH
36804: LD_INT 6
36806: PUSH
36807: LD_INT 15
36809: PUSH
36810: LD_INT 16
36812: PUSH
36813: LD_INT 7
36815: PUSH
36816: LD_INT 12
36818: PUSH
36819: LD_INT 13
36821: PUSH
36822: LD_INT 10
36824: PUSH
36825: LD_INT 14
36827: PUSH
36828: LD_INT 20
36830: PUSH
36831: LD_INT 21
36833: PUSH
36834: LD_INT 22
36836: PUSH
36837: LD_INT 25
36839: PUSH
36840: LD_INT 32
36842: PUSH
36843: LD_INT 27
36845: PUSH
36846: LD_INT 36
36848: PUSH
36849: LD_INT 69
36851: PUSH
36852: LD_INT 39
36854: PUSH
36855: LD_INT 34
36857: PUSH
36858: LD_INT 40
36860: PUSH
36861: LD_INT 48
36863: PUSH
36864: LD_INT 49
36866: PUSH
36867: LD_INT 50
36869: PUSH
36870: LD_INT 51
36872: PUSH
36873: LD_INT 52
36875: PUSH
36876: LD_INT 53
36878: PUSH
36879: LD_INT 54
36881: PUSH
36882: LD_INT 55
36884: PUSH
36885: LD_INT 56
36887: PUSH
36888: LD_INT 57
36890: PUSH
36891: LD_INT 58
36893: PUSH
36894: LD_INT 59
36896: PUSH
36897: LD_INT 60
36899: PUSH
36900: LD_INT 61
36902: PUSH
36903: LD_INT 62
36905: PUSH
36906: LD_INT 80
36908: PUSH
36909: LD_INT 82
36911: PUSH
36912: LD_INT 83
36914: PUSH
36915: LD_INT 84
36917: PUSH
36918: LD_INT 85
36920: PUSH
36921: LD_INT 86
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: ST_TO_ADDR
36977: GO 37444
36979: LD_INT 2
36981: DOUBLE
36982: EQUAL
36983: IFTRUE 36987
36985: GO 37213
36987: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
36988: LD_ADDR_VAR 0 4
36992: PUSH
36993: LD_INT 35
36995: PUSH
36996: LD_INT 45
36998: PUSH
36999: LD_INT 46
37001: PUSH
37002: LD_INT 47
37004: PUSH
37005: LD_INT 82
37007: PUSH
37008: LD_INT 83
37010: PUSH
37011: LD_INT 84
37013: PUSH
37014: LD_INT 85
37016: PUSH
37017: LD_INT 87
37019: PUSH
37020: LD_INT 70
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: LD_INT 11
37028: PUSH
37029: LD_INT 3
37031: PUSH
37032: LD_INT 4
37034: PUSH
37035: LD_INT 5
37037: PUSH
37038: LD_INT 6
37040: PUSH
37041: LD_INT 15
37043: PUSH
37044: LD_INT 18
37046: PUSH
37047: LD_INT 7
37049: PUSH
37050: LD_INT 17
37052: PUSH
37053: LD_INT 8
37055: PUSH
37056: LD_INT 20
37058: PUSH
37059: LD_INT 21
37061: PUSH
37062: LD_INT 22
37064: PUSH
37065: LD_INT 72
37067: PUSH
37068: LD_INT 26
37070: PUSH
37071: LD_INT 69
37073: PUSH
37074: LD_INT 39
37076: PUSH
37077: LD_INT 40
37079: PUSH
37080: LD_INT 41
37082: PUSH
37083: LD_INT 42
37085: PUSH
37086: LD_INT 43
37088: PUSH
37089: LD_INT 48
37091: PUSH
37092: LD_INT 49
37094: PUSH
37095: LD_INT 50
37097: PUSH
37098: LD_INT 51
37100: PUSH
37101: LD_INT 52
37103: PUSH
37104: LD_INT 53
37106: PUSH
37107: LD_INT 54
37109: PUSH
37110: LD_INT 55
37112: PUSH
37113: LD_INT 56
37115: PUSH
37116: LD_INT 60
37118: PUSH
37119: LD_INT 61
37121: PUSH
37122: LD_INT 62
37124: PUSH
37125: LD_INT 66
37127: PUSH
37128: LD_INT 67
37130: PUSH
37131: LD_INT 68
37133: PUSH
37134: LD_INT 81
37136: PUSH
37137: LD_INT 82
37139: PUSH
37140: LD_INT 83
37142: PUSH
37143: LD_INT 84
37145: PUSH
37146: LD_INT 85
37148: PUSH
37149: LD_INT 87
37151: PUSH
37152: LD_INT 88
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: ST_TO_ADDR
37211: GO 37444
37213: LD_INT 3
37215: DOUBLE
37216: EQUAL
37217: IFTRUE 37221
37219: GO 37443
37221: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37222: LD_ADDR_VAR 0 4
37226: PUSH
37227: LD_INT 46
37229: PUSH
37230: LD_INT 47
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: LD_INT 2
37238: PUSH
37239: LD_INT 82
37241: PUSH
37242: LD_INT 83
37244: PUSH
37245: LD_INT 84
37247: PUSH
37248: LD_INT 85
37250: PUSH
37251: LD_INT 86
37253: PUSH
37254: LD_INT 11
37256: PUSH
37257: LD_INT 9
37259: PUSH
37260: LD_INT 20
37262: PUSH
37263: LD_INT 19
37265: PUSH
37266: LD_INT 21
37268: PUSH
37269: LD_INT 24
37271: PUSH
37272: LD_INT 22
37274: PUSH
37275: LD_INT 25
37277: PUSH
37278: LD_INT 28
37280: PUSH
37281: LD_INT 29
37283: PUSH
37284: LD_INT 30
37286: PUSH
37287: LD_INT 31
37289: PUSH
37290: LD_INT 37
37292: PUSH
37293: LD_INT 38
37295: PUSH
37296: LD_INT 32
37298: PUSH
37299: LD_INT 27
37301: PUSH
37302: LD_INT 33
37304: PUSH
37305: LD_INT 69
37307: PUSH
37308: LD_INT 39
37310: PUSH
37311: LD_INT 34
37313: PUSH
37314: LD_INT 40
37316: PUSH
37317: LD_INT 71
37319: PUSH
37320: LD_INT 23
37322: PUSH
37323: LD_INT 44
37325: PUSH
37326: LD_INT 48
37328: PUSH
37329: LD_INT 49
37331: PUSH
37332: LD_INT 50
37334: PUSH
37335: LD_INT 51
37337: PUSH
37338: LD_INT 52
37340: PUSH
37341: LD_INT 53
37343: PUSH
37344: LD_INT 54
37346: PUSH
37347: LD_INT 55
37349: PUSH
37350: LD_INT 56
37352: PUSH
37353: LD_INT 57
37355: PUSH
37356: LD_INT 58
37358: PUSH
37359: LD_INT 59
37361: PUSH
37362: LD_INT 63
37364: PUSH
37365: LD_INT 64
37367: PUSH
37368: LD_INT 65
37370: PUSH
37371: LD_INT 82
37373: PUSH
37374: LD_INT 83
37376: PUSH
37377: LD_INT 84
37379: PUSH
37380: LD_INT 85
37382: PUSH
37383: LD_INT 86
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: ST_TO_ADDR
37441: GO 37444
37443: POP
// if state > - 1 and state < 3 then
37444: LD_VAR 0 3
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: GREATER
37453: PUSH
37454: LD_VAR 0 3
37458: PUSH
37459: LD_INT 3
37461: LESS
37462: AND
37463: IFFALSE 37520
// for i in result do
37465: LD_ADDR_VAR 0 5
37469: PUSH
37470: LD_VAR 0 4
37474: PUSH
37475: FOR_IN
37476: IFFALSE 37518
// if GetTech ( i , side ) <> state then
37478: LD_VAR 0 5
37482: PPUSH
37483: LD_VAR 0 1
37487: PPUSH
37488: CALL_OW 321
37492: PUSH
37493: LD_VAR 0 3
37497: NONEQUAL
37498: IFFALSE 37516
// result := result diff i ;
37500: LD_ADDR_VAR 0 4
37504: PUSH
37505: LD_VAR 0 4
37509: PUSH
37510: LD_VAR 0 5
37514: DIFF
37515: ST_TO_ADDR
37516: GO 37475
37518: POP
37519: POP
// end ;
37520: LD_VAR 0 4
37524: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37525: LD_INT 0
37527: PPUSH
37528: PPUSH
37529: PPUSH
// result := true ;
37530: LD_ADDR_VAR 0 3
37534: PUSH
37535: LD_INT 1
37537: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37538: LD_ADDR_VAR 0 5
37542: PUSH
37543: LD_VAR 0 2
37547: PPUSH
37548: CALL_OW 480
37552: ST_TO_ADDR
// if not tmp then
37553: LD_VAR 0 5
37557: NOT
37558: IFFALSE 37562
// exit ;
37560: GO 37611
// for i in tmp do
37562: LD_ADDR_VAR 0 4
37566: PUSH
37567: LD_VAR 0 5
37571: PUSH
37572: FOR_IN
37573: IFFALSE 37609
// if GetTech ( i , side ) <> state_researched then
37575: LD_VAR 0 4
37579: PPUSH
37580: LD_VAR 0 1
37584: PPUSH
37585: CALL_OW 321
37589: PUSH
37590: LD_INT 2
37592: NONEQUAL
37593: IFFALSE 37607
// begin result := false ;
37595: LD_ADDR_VAR 0 3
37599: PUSH
37600: LD_INT 0
37602: ST_TO_ADDR
// exit ;
37603: POP
37604: POP
37605: GO 37611
// end ;
37607: GO 37572
37609: POP
37610: POP
// end ;
37611: LD_VAR 0 3
37615: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37616: LD_INT 0
37618: PPUSH
37619: PPUSH
37620: PPUSH
37621: PPUSH
37622: PPUSH
37623: PPUSH
37624: PPUSH
37625: PPUSH
37626: PPUSH
37627: PPUSH
37628: PPUSH
37629: PPUSH
37630: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37631: LD_VAR 0 1
37635: NOT
37636: PUSH
37637: LD_VAR 0 1
37641: PPUSH
37642: CALL_OW 257
37646: PUSH
37647: LD_INT 9
37649: NONEQUAL
37650: OR
37651: IFFALSE 37655
// exit ;
37653: GO 38228
// side := GetSide ( unit ) ;
37655: LD_ADDR_VAR 0 9
37659: PUSH
37660: LD_VAR 0 1
37664: PPUSH
37665: CALL_OW 255
37669: ST_TO_ADDR
// tech_space := tech_spacanom ;
37670: LD_ADDR_VAR 0 12
37674: PUSH
37675: LD_INT 29
37677: ST_TO_ADDR
// tech_time := tech_taurad ;
37678: LD_ADDR_VAR 0 13
37682: PUSH
37683: LD_INT 28
37685: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37686: LD_ADDR_VAR 0 11
37690: PUSH
37691: LD_VAR 0 1
37695: PPUSH
37696: CALL_OW 310
37700: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37701: LD_VAR 0 11
37705: PPUSH
37706: CALL_OW 247
37710: PUSH
37711: LD_INT 2
37713: EQUAL
37714: IFFALSE 37718
// exit ;
37716: GO 38228
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37718: LD_ADDR_VAR 0 8
37722: PUSH
37723: LD_INT 81
37725: PUSH
37726: LD_VAR 0 9
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 3
37737: PUSH
37738: LD_INT 21
37740: PUSH
37741: LD_INT 3
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PPUSH
37756: CALL_OW 69
37760: ST_TO_ADDR
// if not tmp then
37761: LD_VAR 0 8
37765: NOT
37766: IFFALSE 37770
// exit ;
37768: GO 38228
// if in_unit then
37770: LD_VAR 0 11
37774: IFFALSE 37798
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37776: LD_ADDR_VAR 0 10
37780: PUSH
37781: LD_VAR 0 8
37785: PPUSH
37786: LD_VAR 0 11
37790: PPUSH
37791: CALL_OW 74
37795: ST_TO_ADDR
37796: GO 37818
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37798: LD_ADDR_VAR 0 10
37802: PUSH
37803: LD_VAR 0 8
37807: PPUSH
37808: LD_VAR 0 1
37812: PPUSH
37813: CALL_OW 74
37817: ST_TO_ADDR
// if not enemy then
37818: LD_VAR 0 10
37822: NOT
37823: IFFALSE 37827
// exit ;
37825: GO 38228
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37827: LD_VAR 0 11
37831: PUSH
37832: LD_VAR 0 11
37836: PPUSH
37837: LD_VAR 0 10
37841: PPUSH
37842: CALL_OW 296
37846: PUSH
37847: LD_INT 13
37849: GREATER
37850: AND
37851: PUSH
37852: LD_VAR 0 1
37856: PPUSH
37857: LD_VAR 0 10
37861: PPUSH
37862: CALL_OW 296
37866: PUSH
37867: LD_INT 12
37869: GREATER
37870: OR
37871: IFFALSE 37875
// exit ;
37873: GO 38228
// missile := [ 1 ] ;
37875: LD_ADDR_VAR 0 14
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37886: LD_VAR 0 9
37890: PPUSH
37891: LD_VAR 0 12
37895: PPUSH
37896: CALL_OW 325
37900: IFFALSE 37929
// missile := Replace ( missile , missile + 1 , 2 ) ;
37902: LD_ADDR_VAR 0 14
37906: PUSH
37907: LD_VAR 0 14
37911: PPUSH
37912: LD_VAR 0 14
37916: PUSH
37917: LD_INT 1
37919: PLUS
37920: PPUSH
37921: LD_INT 2
37923: PPUSH
37924: CALL_OW 1
37928: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37929: LD_VAR 0 9
37933: PPUSH
37934: LD_VAR 0 13
37938: PPUSH
37939: CALL_OW 325
37943: PUSH
37944: LD_VAR 0 10
37948: PPUSH
37949: CALL_OW 255
37953: PPUSH
37954: LD_VAR 0 13
37958: PPUSH
37959: CALL_OW 325
37963: NOT
37964: AND
37965: IFFALSE 37994
// missile := Replace ( missile , missile + 1 , 3 ) ;
37967: LD_ADDR_VAR 0 14
37971: PUSH
37972: LD_VAR 0 14
37976: PPUSH
37977: LD_VAR 0 14
37981: PUSH
37982: LD_INT 1
37984: PLUS
37985: PPUSH
37986: LD_INT 3
37988: PPUSH
37989: CALL_OW 1
37993: ST_TO_ADDR
// if missile < 2 then
37994: LD_VAR 0 14
37998: PUSH
37999: LD_INT 2
38001: LESS
38002: IFFALSE 38006
// exit ;
38004: GO 38228
// x := GetX ( enemy ) ;
38006: LD_ADDR_VAR 0 4
38010: PUSH
38011: LD_VAR 0 10
38015: PPUSH
38016: CALL_OW 250
38020: ST_TO_ADDR
// y := GetY ( enemy ) ;
38021: LD_ADDR_VAR 0 5
38025: PUSH
38026: LD_VAR 0 10
38030: PPUSH
38031: CALL_OW 251
38035: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38036: LD_ADDR_VAR 0 6
38040: PUSH
38041: LD_VAR 0 4
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PPUSH
38050: LD_INT 1
38052: PPUSH
38053: CALL_OW 12
38057: PLUS
38058: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38059: LD_ADDR_VAR 0 7
38063: PUSH
38064: LD_VAR 0 5
38068: PUSH
38069: LD_INT 1
38071: NEG
38072: PPUSH
38073: LD_INT 1
38075: PPUSH
38076: CALL_OW 12
38080: PLUS
38081: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38082: LD_VAR 0 6
38086: PPUSH
38087: LD_VAR 0 7
38091: PPUSH
38092: CALL_OW 488
38096: NOT
38097: IFFALSE 38119
// begin _x := x ;
38099: LD_ADDR_VAR 0 6
38103: PUSH
38104: LD_VAR 0 4
38108: ST_TO_ADDR
// _y := y ;
38109: LD_ADDR_VAR 0 7
38113: PUSH
38114: LD_VAR 0 5
38118: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38119: LD_ADDR_VAR 0 3
38123: PUSH
38124: LD_INT 1
38126: PPUSH
38127: LD_VAR 0 14
38131: PPUSH
38132: CALL_OW 12
38136: ST_TO_ADDR
// case i of 1 :
38137: LD_VAR 0 3
38141: PUSH
38142: LD_INT 1
38144: DOUBLE
38145: EQUAL
38146: IFTRUE 38150
38148: GO 38167
38150: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38151: LD_VAR 0 1
38155: PPUSH
38156: LD_VAR 0 10
38160: PPUSH
38161: CALL_OW 115
38165: GO 38228
38167: LD_INT 2
38169: DOUBLE
38170: EQUAL
38171: IFTRUE 38175
38173: GO 38197
38175: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38176: LD_VAR 0 1
38180: PPUSH
38181: LD_VAR 0 6
38185: PPUSH
38186: LD_VAR 0 7
38190: PPUSH
38191: CALL_OW 153
38195: GO 38228
38197: LD_INT 3
38199: DOUBLE
38200: EQUAL
38201: IFTRUE 38205
38203: GO 38227
38205: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38206: LD_VAR 0 1
38210: PPUSH
38211: LD_VAR 0 6
38215: PPUSH
38216: LD_VAR 0 7
38220: PPUSH
38221: CALL_OW 154
38225: GO 38228
38227: POP
// end ;
38228: LD_VAR 0 2
38232: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38233: LD_INT 0
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
38240: PPUSH
// if not unit or not building then
38241: LD_VAR 0 1
38245: NOT
38246: PUSH
38247: LD_VAR 0 2
38251: NOT
38252: OR
38253: IFFALSE 38257
// exit ;
38255: GO 38415
// x := GetX ( building ) ;
38257: LD_ADDR_VAR 0 5
38261: PUSH
38262: LD_VAR 0 2
38266: PPUSH
38267: CALL_OW 250
38271: ST_TO_ADDR
// y := GetY ( building ) ;
38272: LD_ADDR_VAR 0 6
38276: PUSH
38277: LD_VAR 0 2
38281: PPUSH
38282: CALL_OW 251
38286: ST_TO_ADDR
// for i = 0 to 5 do
38287: LD_ADDR_VAR 0 4
38291: PUSH
38292: DOUBLE
38293: LD_INT 0
38295: DEC
38296: ST_TO_ADDR
38297: LD_INT 5
38299: PUSH
38300: FOR_TO
38301: IFFALSE 38413
// begin _x := ShiftX ( x , i , 3 ) ;
38303: LD_ADDR_VAR 0 7
38307: PUSH
38308: LD_VAR 0 5
38312: PPUSH
38313: LD_VAR 0 4
38317: PPUSH
38318: LD_INT 3
38320: PPUSH
38321: CALL_OW 272
38325: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38326: LD_ADDR_VAR 0 8
38330: PUSH
38331: LD_VAR 0 6
38335: PPUSH
38336: LD_VAR 0 4
38340: PPUSH
38341: LD_INT 3
38343: PPUSH
38344: CALL_OW 273
38348: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38349: LD_VAR 0 7
38353: PPUSH
38354: LD_VAR 0 8
38358: PPUSH
38359: CALL_OW 488
38363: NOT
38364: IFFALSE 38368
// continue ;
38366: GO 38300
// if HexInfo ( _x , _y ) = 0 then
38368: LD_VAR 0 7
38372: PPUSH
38373: LD_VAR 0 8
38377: PPUSH
38378: CALL_OW 428
38382: PUSH
38383: LD_INT 0
38385: EQUAL
38386: IFFALSE 38411
// begin ComMoveXY ( unit , _x , _y ) ;
38388: LD_VAR 0 1
38392: PPUSH
38393: LD_VAR 0 7
38397: PPUSH
38398: LD_VAR 0 8
38402: PPUSH
38403: CALL_OW 111
// exit ;
38407: POP
38408: POP
38409: GO 38415
// end ; end ;
38411: GO 38300
38413: POP
38414: POP
// end ;
38415: LD_VAR 0 3
38419: RET
// export function ScanBase ( side , base_area ) ; begin
38420: LD_INT 0
38422: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38423: LD_ADDR_VAR 0 3
38427: PUSH
38428: LD_VAR 0 2
38432: PPUSH
38433: LD_INT 81
38435: PUSH
38436: LD_VAR 0 1
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PPUSH
38445: CALL_OW 70
38449: ST_TO_ADDR
// end ;
38450: LD_VAR 0 3
38454: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38455: LD_INT 0
38457: PPUSH
38458: PPUSH
38459: PPUSH
38460: PPUSH
// result := false ;
38461: LD_ADDR_VAR 0 2
38465: PUSH
38466: LD_INT 0
38468: ST_TO_ADDR
// side := GetSide ( unit ) ;
38469: LD_ADDR_VAR 0 3
38473: PUSH
38474: LD_VAR 0 1
38478: PPUSH
38479: CALL_OW 255
38483: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38484: LD_ADDR_VAR 0 4
38488: PUSH
38489: LD_VAR 0 1
38493: PPUSH
38494: CALL_OW 248
38498: ST_TO_ADDR
// case nat of 1 :
38499: LD_VAR 0 4
38503: PUSH
38504: LD_INT 1
38506: DOUBLE
38507: EQUAL
38508: IFTRUE 38512
38510: GO 38523
38512: POP
// tech := tech_lassight ; 2 :
38513: LD_ADDR_VAR 0 5
38517: PUSH
38518: LD_INT 12
38520: ST_TO_ADDR
38521: GO 38562
38523: LD_INT 2
38525: DOUBLE
38526: EQUAL
38527: IFTRUE 38531
38529: GO 38542
38531: POP
// tech := tech_mortar ; 3 :
38532: LD_ADDR_VAR 0 5
38536: PUSH
38537: LD_INT 41
38539: ST_TO_ADDR
38540: GO 38562
38542: LD_INT 3
38544: DOUBLE
38545: EQUAL
38546: IFTRUE 38550
38548: GO 38561
38550: POP
// tech := tech_bazooka ; end ;
38551: LD_ADDR_VAR 0 5
38555: PUSH
38556: LD_INT 44
38558: ST_TO_ADDR
38559: GO 38562
38561: POP
// if Researched ( side , tech ) then
38562: LD_VAR 0 3
38566: PPUSH
38567: LD_VAR 0 5
38571: PPUSH
38572: CALL_OW 325
38576: IFFALSE 38603
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38578: LD_ADDR_VAR 0 2
38582: PUSH
38583: LD_INT 5
38585: PUSH
38586: LD_INT 8
38588: PUSH
38589: LD_INT 9
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: PUSH
38597: LD_VAR 0 4
38601: ARRAY
38602: ST_TO_ADDR
// end ;
38603: LD_VAR 0 2
38607: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38608: LD_INT 0
38610: PPUSH
38611: PPUSH
38612: PPUSH
// if not mines then
38613: LD_VAR 0 2
38617: NOT
38618: IFFALSE 38622
// exit ;
38620: GO 38766
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38622: LD_ADDR_VAR 0 5
38626: PUSH
38627: LD_INT 81
38629: PUSH
38630: LD_VAR 0 1
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 3
38641: PUSH
38642: LD_INT 21
38644: PUSH
38645: LD_INT 3
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PPUSH
38660: CALL_OW 69
38664: ST_TO_ADDR
// for i in mines do
38665: LD_ADDR_VAR 0 4
38669: PUSH
38670: LD_VAR 0 2
38674: PUSH
38675: FOR_IN
38676: IFFALSE 38764
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38678: LD_VAR 0 4
38682: PUSH
38683: LD_INT 1
38685: ARRAY
38686: PPUSH
38687: LD_VAR 0 4
38691: PUSH
38692: LD_INT 2
38694: ARRAY
38695: PPUSH
38696: CALL_OW 458
38700: NOT
38701: IFFALSE 38705
// continue ;
38703: GO 38675
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38705: LD_VAR 0 4
38709: PUSH
38710: LD_INT 1
38712: ARRAY
38713: PPUSH
38714: LD_VAR 0 4
38718: PUSH
38719: LD_INT 2
38721: ARRAY
38722: PPUSH
38723: CALL_OW 428
38727: PUSH
38728: LD_VAR 0 5
38732: IN
38733: IFFALSE 38762
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38735: LD_VAR 0 4
38739: PUSH
38740: LD_INT 1
38742: ARRAY
38743: PPUSH
38744: LD_VAR 0 4
38748: PUSH
38749: LD_INT 2
38751: ARRAY
38752: PPUSH
38753: LD_VAR 0 1
38757: PPUSH
38758: CALL_OW 456
// end ;
38762: GO 38675
38764: POP
38765: POP
// end ;
38766: LD_VAR 0 3
38770: RET
// export function Count ( array ) ; var i ; begin
38771: LD_INT 0
38773: PPUSH
38774: PPUSH
// result := 0 ;
38775: LD_ADDR_VAR 0 2
38779: PUSH
38780: LD_INT 0
38782: ST_TO_ADDR
// for i in array do
38783: LD_ADDR_VAR 0 3
38787: PUSH
38788: LD_VAR 0 1
38792: PUSH
38793: FOR_IN
38794: IFFALSE 38818
// if i then
38796: LD_VAR 0 3
38800: IFFALSE 38816
// result := result + 1 ;
38802: LD_ADDR_VAR 0 2
38806: PUSH
38807: LD_VAR 0 2
38811: PUSH
38812: LD_INT 1
38814: PLUS
38815: ST_TO_ADDR
38816: GO 38793
38818: POP
38819: POP
// end ;
38820: LD_VAR 0 2
38824: RET
// export function IsEmpty ( building ) ; begin
38825: LD_INT 0
38827: PPUSH
// if not building then
38828: LD_VAR 0 1
38832: NOT
38833: IFFALSE 38837
// exit ;
38835: GO 38880
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38837: LD_ADDR_VAR 0 2
38841: PUSH
38842: LD_VAR 0 1
38846: PUSH
38847: LD_INT 22
38849: PUSH
38850: LD_VAR 0 1
38854: PPUSH
38855: CALL_OW 255
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 58
38866: PUSH
38867: EMPTY
38868: LIST
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PPUSH
38874: CALL_OW 69
38878: IN
38879: ST_TO_ADDR
// end ;
38880: LD_VAR 0 2
38884: RET
// export function IsNotFull ( building ) ; begin
38885: LD_INT 0
38887: PPUSH
// if not building then
38888: LD_VAR 0 1
38892: NOT
38893: IFFALSE 38897
// exit ;
38895: GO 38916
// result := UnitsInside ( building ) < 6 ;
38897: LD_ADDR_VAR 0 2
38901: PUSH
38902: LD_VAR 0 1
38906: PPUSH
38907: CALL_OW 313
38911: PUSH
38912: LD_INT 6
38914: LESS
38915: ST_TO_ADDR
// end ;
38916: LD_VAR 0 2
38920: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38921: LD_INT 0
38923: PPUSH
38924: PPUSH
38925: PPUSH
38926: PPUSH
// tmp := [ ] ;
38927: LD_ADDR_VAR 0 3
38931: PUSH
38932: EMPTY
38933: ST_TO_ADDR
// list := [ ] ;
38934: LD_ADDR_VAR 0 5
38938: PUSH
38939: EMPTY
38940: ST_TO_ADDR
// for i = 16 to 25 do
38941: LD_ADDR_VAR 0 4
38945: PUSH
38946: DOUBLE
38947: LD_INT 16
38949: DEC
38950: ST_TO_ADDR
38951: LD_INT 25
38953: PUSH
38954: FOR_TO
38955: IFFALSE 39028
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38957: LD_ADDR_VAR 0 3
38961: PUSH
38962: LD_VAR 0 3
38966: PUSH
38967: LD_INT 22
38969: PUSH
38970: LD_VAR 0 1
38974: PPUSH
38975: CALL_OW 255
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 91
38986: PUSH
38987: LD_VAR 0 1
38991: PUSH
38992: LD_INT 6
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 30
39002: PUSH
39003: LD_VAR 0 4
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: LIST
39016: PUSH
39017: EMPTY
39018: LIST
39019: PPUSH
39020: CALL_OW 69
39024: ADD
39025: ST_TO_ADDR
39026: GO 38954
39028: POP
39029: POP
// for i = 1 to tmp do
39030: LD_ADDR_VAR 0 4
39034: PUSH
39035: DOUBLE
39036: LD_INT 1
39038: DEC
39039: ST_TO_ADDR
39040: LD_VAR 0 3
39044: PUSH
39045: FOR_TO
39046: IFFALSE 39134
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39048: LD_ADDR_VAR 0 5
39052: PUSH
39053: LD_VAR 0 5
39057: PUSH
39058: LD_VAR 0 3
39062: PUSH
39063: LD_VAR 0 4
39067: ARRAY
39068: PPUSH
39069: CALL_OW 266
39073: PUSH
39074: LD_VAR 0 3
39078: PUSH
39079: LD_VAR 0 4
39083: ARRAY
39084: PPUSH
39085: CALL_OW 250
39089: PUSH
39090: LD_VAR 0 3
39094: PUSH
39095: LD_VAR 0 4
39099: ARRAY
39100: PPUSH
39101: CALL_OW 251
39105: PUSH
39106: LD_VAR 0 3
39110: PUSH
39111: LD_VAR 0 4
39115: ARRAY
39116: PPUSH
39117: CALL_OW 254
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: PUSH
39128: EMPTY
39129: LIST
39130: ADD
39131: ST_TO_ADDR
39132: GO 39045
39134: POP
39135: POP
// result := list ;
39136: LD_ADDR_VAR 0 2
39140: PUSH
39141: LD_VAR 0 5
39145: ST_TO_ADDR
// end ;
39146: LD_VAR 0 2
39150: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39151: LD_INT 0
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
39158: PPUSH
39159: PPUSH
// if not factory then
39160: LD_VAR 0 1
39164: NOT
39165: IFFALSE 39169
// exit ;
39167: GO 39762
// if control = control_apeman then
39169: LD_VAR 0 4
39173: PUSH
39174: LD_INT 5
39176: EQUAL
39177: IFFALSE 39286
// begin tmp := UnitsInside ( factory ) ;
39179: LD_ADDR_VAR 0 8
39183: PUSH
39184: LD_VAR 0 1
39188: PPUSH
39189: CALL_OW 313
39193: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39194: LD_VAR 0 8
39198: PPUSH
39199: LD_INT 25
39201: PUSH
39202: LD_INT 12
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PPUSH
39209: CALL_OW 72
39213: NOT
39214: IFFALSE 39224
// control := control_manual ;
39216: LD_ADDR_VAR 0 4
39220: PUSH
39221: LD_INT 1
39223: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39224: LD_ADDR_VAR 0 8
39228: PUSH
39229: LD_VAR 0 1
39233: PPUSH
39234: CALL 38921 0 1
39238: ST_TO_ADDR
// if tmp then
39239: LD_VAR 0 8
39243: IFFALSE 39286
// begin for i in tmp do
39245: LD_ADDR_VAR 0 7
39249: PUSH
39250: LD_VAR 0 8
39254: PUSH
39255: FOR_IN
39256: IFFALSE 39284
// if i [ 1 ] = b_ext_radio then
39258: LD_VAR 0 7
39262: PUSH
39263: LD_INT 1
39265: ARRAY
39266: PUSH
39267: LD_INT 22
39269: EQUAL
39270: IFFALSE 39282
// begin control := control_remote ;
39272: LD_ADDR_VAR 0 4
39276: PUSH
39277: LD_INT 2
39279: ST_TO_ADDR
// break ;
39280: GO 39284
// end ;
39282: GO 39255
39284: POP
39285: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39286: LD_VAR 0 1
39290: PPUSH
39291: LD_VAR 0 2
39295: PPUSH
39296: LD_VAR 0 3
39300: PPUSH
39301: LD_VAR 0 4
39305: PPUSH
39306: LD_VAR 0 5
39310: PPUSH
39311: CALL_OW 448
39315: IFFALSE 39350
// begin result := [ chassis , engine , control , weapon ] ;
39317: LD_ADDR_VAR 0 6
39321: PUSH
39322: LD_VAR 0 2
39326: PUSH
39327: LD_VAR 0 3
39331: PUSH
39332: LD_VAR 0 4
39336: PUSH
39337: LD_VAR 0 5
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: ST_TO_ADDR
// exit ;
39348: GO 39762
// end ; _chassis := AvailableChassisList ( factory ) ;
39350: LD_ADDR_VAR 0 9
39354: PUSH
39355: LD_VAR 0 1
39359: PPUSH
39360: CALL_OW 475
39364: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39365: LD_ADDR_VAR 0 11
39369: PUSH
39370: LD_VAR 0 1
39374: PPUSH
39375: CALL_OW 476
39379: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39380: LD_ADDR_VAR 0 12
39384: PUSH
39385: LD_VAR 0 1
39389: PPUSH
39390: CALL_OW 477
39394: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39395: LD_ADDR_VAR 0 10
39399: PUSH
39400: LD_VAR 0 1
39404: PPUSH
39405: CALL_OW 478
39409: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39410: LD_VAR 0 9
39414: NOT
39415: PUSH
39416: LD_VAR 0 11
39420: NOT
39421: OR
39422: PUSH
39423: LD_VAR 0 12
39427: NOT
39428: OR
39429: PUSH
39430: LD_VAR 0 10
39434: NOT
39435: OR
39436: IFFALSE 39471
// begin result := [ chassis , engine , control , weapon ] ;
39438: LD_ADDR_VAR 0 6
39442: PUSH
39443: LD_VAR 0 2
39447: PUSH
39448: LD_VAR 0 3
39452: PUSH
39453: LD_VAR 0 4
39457: PUSH
39458: LD_VAR 0 5
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: ST_TO_ADDR
// exit ;
39469: GO 39762
// end ; if not chassis in _chassis then
39471: LD_VAR 0 2
39475: PUSH
39476: LD_VAR 0 9
39480: IN
39481: NOT
39482: IFFALSE 39508
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39484: LD_ADDR_VAR 0 2
39488: PUSH
39489: LD_VAR 0 9
39493: PUSH
39494: LD_INT 1
39496: PPUSH
39497: LD_VAR 0 9
39501: PPUSH
39502: CALL_OW 12
39506: ARRAY
39507: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39508: LD_VAR 0 2
39512: PPUSH
39513: LD_VAR 0 3
39517: PPUSH
39518: CALL 39767 0 2
39522: NOT
39523: IFFALSE 39582
// repeat engine := _engine [ 1 ] ;
39525: LD_ADDR_VAR 0 3
39529: PUSH
39530: LD_VAR 0 11
39534: PUSH
39535: LD_INT 1
39537: ARRAY
39538: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39539: LD_ADDR_VAR 0 11
39543: PUSH
39544: LD_VAR 0 11
39548: PPUSH
39549: LD_INT 1
39551: PPUSH
39552: CALL_OW 3
39556: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39557: LD_VAR 0 2
39561: PPUSH
39562: LD_VAR 0 3
39566: PPUSH
39567: CALL 39767 0 2
39571: PUSH
39572: LD_VAR 0 11
39576: PUSH
39577: EMPTY
39578: EQUAL
39579: OR
39580: IFFALSE 39525
// if not control in _control then
39582: LD_VAR 0 4
39586: PUSH
39587: LD_VAR 0 12
39591: IN
39592: NOT
39593: IFFALSE 39619
// control := _control [ rand ( 1 , _control ) ] ;
39595: LD_ADDR_VAR 0 4
39599: PUSH
39600: LD_VAR 0 12
39604: PUSH
39605: LD_INT 1
39607: PPUSH
39608: LD_VAR 0 12
39612: PPUSH
39613: CALL_OW 12
39617: ARRAY
39618: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39619: LD_VAR 0 2
39623: PPUSH
39624: LD_VAR 0 5
39628: PPUSH
39629: CALL 39987 0 2
39633: NOT
39634: IFFALSE 39693
// repeat weapon := _weapon [ 1 ] ;
39636: LD_ADDR_VAR 0 5
39640: PUSH
39641: LD_VAR 0 10
39645: PUSH
39646: LD_INT 1
39648: ARRAY
39649: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39650: LD_ADDR_VAR 0 10
39654: PUSH
39655: LD_VAR 0 10
39659: PPUSH
39660: LD_INT 1
39662: PPUSH
39663: CALL_OW 3
39667: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39668: LD_VAR 0 2
39672: PPUSH
39673: LD_VAR 0 5
39677: PPUSH
39678: CALL 39987 0 2
39682: PUSH
39683: LD_VAR 0 10
39687: PUSH
39688: EMPTY
39689: EQUAL
39690: OR
39691: IFFALSE 39636
// result := [ ] ;
39693: LD_ADDR_VAR 0 6
39697: PUSH
39698: EMPTY
39699: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39700: LD_VAR 0 1
39704: PPUSH
39705: LD_VAR 0 2
39709: PPUSH
39710: LD_VAR 0 3
39714: PPUSH
39715: LD_VAR 0 4
39719: PPUSH
39720: LD_VAR 0 5
39724: PPUSH
39725: CALL_OW 448
39729: IFFALSE 39762
// result := [ chassis , engine , control , weapon ] ;
39731: LD_ADDR_VAR 0 6
39735: PUSH
39736: LD_VAR 0 2
39740: PUSH
39741: LD_VAR 0 3
39745: PUSH
39746: LD_VAR 0 4
39750: PUSH
39751: LD_VAR 0 5
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: ST_TO_ADDR
// end ;
39762: LD_VAR 0 6
39766: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39767: LD_INT 0
39769: PPUSH
// if not chassis or not engine then
39770: LD_VAR 0 1
39774: NOT
39775: PUSH
39776: LD_VAR 0 2
39780: NOT
39781: OR
39782: IFFALSE 39786
// exit ;
39784: GO 39982
// case engine of engine_solar :
39786: LD_VAR 0 2
39790: PUSH
39791: LD_INT 2
39793: DOUBLE
39794: EQUAL
39795: IFTRUE 39799
39797: GO 39837
39799: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39800: LD_ADDR_VAR 0 3
39804: PUSH
39805: LD_INT 11
39807: PUSH
39808: LD_INT 12
39810: PUSH
39811: LD_INT 13
39813: PUSH
39814: LD_INT 14
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: LD_INT 2
39822: PUSH
39823: LD_INT 3
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: ST_TO_ADDR
39835: GO 39966
39837: LD_INT 1
39839: DOUBLE
39840: EQUAL
39841: IFTRUE 39845
39843: GO 39907
39845: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39846: LD_ADDR_VAR 0 3
39850: PUSH
39851: LD_INT 11
39853: PUSH
39854: LD_INT 12
39856: PUSH
39857: LD_INT 13
39859: PUSH
39860: LD_INT 14
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: LD_INT 3
39871: PUSH
39872: LD_INT 4
39874: PUSH
39875: LD_INT 5
39877: PUSH
39878: LD_INT 21
39880: PUSH
39881: LD_INT 23
39883: PUSH
39884: LD_INT 22
39886: PUSH
39887: LD_INT 24
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: ST_TO_ADDR
39905: GO 39966
39907: LD_INT 3
39909: DOUBLE
39910: EQUAL
39911: IFTRUE 39915
39913: GO 39965
39915: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39916: LD_ADDR_VAR 0 3
39920: PUSH
39921: LD_INT 13
39923: PUSH
39924: LD_INT 14
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: LD_INT 3
39932: PUSH
39933: LD_INT 4
39935: PUSH
39936: LD_INT 5
39938: PUSH
39939: LD_INT 21
39941: PUSH
39942: LD_INT 22
39944: PUSH
39945: LD_INT 23
39947: PUSH
39948: LD_INT 24
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: ST_TO_ADDR
39963: GO 39966
39965: POP
// result := ( chassis in result ) ;
39966: LD_ADDR_VAR 0 3
39970: PUSH
39971: LD_VAR 0 1
39975: PUSH
39976: LD_VAR 0 3
39980: IN
39981: ST_TO_ADDR
// end ;
39982: LD_VAR 0 3
39986: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39987: LD_INT 0
39989: PPUSH
// if not chassis or not weapon then
39990: LD_VAR 0 1
39994: NOT
39995: PUSH
39996: LD_VAR 0 2
40000: NOT
40001: OR
40002: IFFALSE 40006
// exit ;
40004: GO 41068
// case weapon of us_machine_gun :
40006: LD_VAR 0 2
40010: PUSH
40011: LD_INT 2
40013: DOUBLE
40014: EQUAL
40015: IFTRUE 40019
40017: GO 40049
40019: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40020: LD_ADDR_VAR 0 3
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: LD_INT 3
40033: PUSH
40034: LD_INT 4
40036: PUSH
40037: LD_INT 5
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: ST_TO_ADDR
40047: GO 41052
40049: LD_INT 3
40051: DOUBLE
40052: EQUAL
40053: IFTRUE 40057
40055: GO 40087
40057: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40058: LD_ADDR_VAR 0 3
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: LD_INT 3
40071: PUSH
40072: LD_INT 4
40074: PUSH
40075: LD_INT 5
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: ST_TO_ADDR
40085: GO 41052
40087: LD_INT 11
40089: DOUBLE
40090: EQUAL
40091: IFTRUE 40095
40093: GO 40125
40095: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40096: LD_ADDR_VAR 0 3
40100: PUSH
40101: LD_INT 1
40103: PUSH
40104: LD_INT 2
40106: PUSH
40107: LD_INT 3
40109: PUSH
40110: LD_INT 4
40112: PUSH
40113: LD_INT 5
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: ST_TO_ADDR
40123: GO 41052
40125: LD_INT 4
40127: DOUBLE
40128: EQUAL
40129: IFTRUE 40133
40131: GO 40159
40133: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40134: LD_ADDR_VAR 0 3
40138: PUSH
40139: LD_INT 2
40141: PUSH
40142: LD_INT 3
40144: PUSH
40145: LD_INT 4
40147: PUSH
40148: LD_INT 5
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: ST_TO_ADDR
40157: GO 41052
40159: LD_INT 5
40161: DOUBLE
40162: EQUAL
40163: IFTRUE 40167
40165: GO 40193
40167: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40168: LD_ADDR_VAR 0 3
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: LD_INT 3
40178: PUSH
40179: LD_INT 4
40181: PUSH
40182: LD_INT 5
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: ST_TO_ADDR
40191: GO 41052
40193: LD_INT 9
40195: DOUBLE
40196: EQUAL
40197: IFTRUE 40201
40199: GO 40227
40201: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40202: LD_ADDR_VAR 0 3
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: LD_INT 3
40212: PUSH
40213: LD_INT 4
40215: PUSH
40216: LD_INT 5
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: ST_TO_ADDR
40225: GO 41052
40227: LD_INT 7
40229: DOUBLE
40230: EQUAL
40231: IFTRUE 40235
40233: GO 40261
40235: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40236: LD_ADDR_VAR 0 3
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: LD_INT 3
40246: PUSH
40247: LD_INT 4
40249: PUSH
40250: LD_INT 5
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: ST_TO_ADDR
40259: GO 41052
40261: LD_INT 12
40263: DOUBLE
40264: EQUAL
40265: IFTRUE 40269
40267: GO 40295
40269: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40270: LD_ADDR_VAR 0 3
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: LD_INT 3
40280: PUSH
40281: LD_INT 4
40283: PUSH
40284: LD_INT 5
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: ST_TO_ADDR
40293: GO 41052
40295: LD_INT 13
40297: DOUBLE
40298: EQUAL
40299: IFTRUE 40303
40301: GO 40329
40303: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40304: LD_ADDR_VAR 0 3
40308: PUSH
40309: LD_INT 2
40311: PUSH
40312: LD_INT 3
40314: PUSH
40315: LD_INT 4
40317: PUSH
40318: LD_INT 5
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: ST_TO_ADDR
40327: GO 41052
40329: LD_INT 14
40331: DOUBLE
40332: EQUAL
40333: IFTRUE 40337
40335: GO 40355
40337: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40338: LD_ADDR_VAR 0 3
40342: PUSH
40343: LD_INT 4
40345: PUSH
40346: LD_INT 5
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: ST_TO_ADDR
40353: GO 41052
40355: LD_INT 6
40357: DOUBLE
40358: EQUAL
40359: IFTRUE 40363
40361: GO 40381
40363: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40364: LD_ADDR_VAR 0 3
40368: PUSH
40369: LD_INT 4
40371: PUSH
40372: LD_INT 5
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: ST_TO_ADDR
40379: GO 41052
40381: LD_INT 10
40383: DOUBLE
40384: EQUAL
40385: IFTRUE 40389
40387: GO 40407
40389: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40390: LD_ADDR_VAR 0 3
40394: PUSH
40395: LD_INT 4
40397: PUSH
40398: LD_INT 5
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: ST_TO_ADDR
40405: GO 41052
40407: LD_INT 22
40409: DOUBLE
40410: EQUAL
40411: IFTRUE 40415
40413: GO 40441
40415: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40416: LD_ADDR_VAR 0 3
40420: PUSH
40421: LD_INT 11
40423: PUSH
40424: LD_INT 12
40426: PUSH
40427: LD_INT 13
40429: PUSH
40430: LD_INT 14
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: ST_TO_ADDR
40439: GO 41052
40441: LD_INT 23
40443: DOUBLE
40444: EQUAL
40445: IFTRUE 40449
40447: GO 40475
40449: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40450: LD_ADDR_VAR 0 3
40454: PUSH
40455: LD_INT 11
40457: PUSH
40458: LD_INT 12
40460: PUSH
40461: LD_INT 13
40463: PUSH
40464: LD_INT 14
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: ST_TO_ADDR
40473: GO 41052
40475: LD_INT 24
40477: DOUBLE
40478: EQUAL
40479: IFTRUE 40483
40481: GO 40509
40483: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40484: LD_ADDR_VAR 0 3
40488: PUSH
40489: LD_INT 11
40491: PUSH
40492: LD_INT 12
40494: PUSH
40495: LD_INT 13
40497: PUSH
40498: LD_INT 14
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: ST_TO_ADDR
40507: GO 41052
40509: LD_INT 30
40511: DOUBLE
40512: EQUAL
40513: IFTRUE 40517
40515: GO 40543
40517: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40518: LD_ADDR_VAR 0 3
40522: PUSH
40523: LD_INT 11
40525: PUSH
40526: LD_INT 12
40528: PUSH
40529: LD_INT 13
40531: PUSH
40532: LD_INT 14
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: ST_TO_ADDR
40541: GO 41052
40543: LD_INT 25
40545: DOUBLE
40546: EQUAL
40547: IFTRUE 40551
40549: GO 40569
40551: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40552: LD_ADDR_VAR 0 3
40556: PUSH
40557: LD_INT 13
40559: PUSH
40560: LD_INT 14
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: ST_TO_ADDR
40567: GO 41052
40569: LD_INT 27
40571: DOUBLE
40572: EQUAL
40573: IFTRUE 40577
40575: GO 40595
40577: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40578: LD_ADDR_VAR 0 3
40582: PUSH
40583: LD_INT 13
40585: PUSH
40586: LD_INT 14
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: ST_TO_ADDR
40593: GO 41052
40595: LD_EXP 37
40599: DOUBLE
40600: EQUAL
40601: IFTRUE 40605
40603: GO 40631
40605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40606: LD_ADDR_VAR 0 3
40610: PUSH
40611: LD_INT 11
40613: PUSH
40614: LD_INT 12
40616: PUSH
40617: LD_INT 13
40619: PUSH
40620: LD_INT 14
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: ST_TO_ADDR
40629: GO 41052
40631: LD_INT 28
40633: DOUBLE
40634: EQUAL
40635: IFTRUE 40639
40637: GO 40657
40639: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40640: LD_ADDR_VAR 0 3
40644: PUSH
40645: LD_INT 13
40647: PUSH
40648: LD_INT 14
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: ST_TO_ADDR
40655: GO 41052
40657: LD_INT 29
40659: DOUBLE
40660: EQUAL
40661: IFTRUE 40665
40663: GO 40683
40665: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40666: LD_ADDR_VAR 0 3
40670: PUSH
40671: LD_INT 13
40673: PUSH
40674: LD_INT 14
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: ST_TO_ADDR
40681: GO 41052
40683: LD_INT 31
40685: DOUBLE
40686: EQUAL
40687: IFTRUE 40691
40689: GO 40709
40691: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40692: LD_ADDR_VAR 0 3
40696: PUSH
40697: LD_INT 13
40699: PUSH
40700: LD_INT 14
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: ST_TO_ADDR
40707: GO 41052
40709: LD_INT 26
40711: DOUBLE
40712: EQUAL
40713: IFTRUE 40717
40715: GO 40735
40717: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40718: LD_ADDR_VAR 0 3
40722: PUSH
40723: LD_INT 13
40725: PUSH
40726: LD_INT 14
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: ST_TO_ADDR
40733: GO 41052
40735: LD_INT 42
40737: DOUBLE
40738: EQUAL
40739: IFTRUE 40743
40741: GO 40769
40743: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40744: LD_ADDR_VAR 0 3
40748: PUSH
40749: LD_INT 21
40751: PUSH
40752: LD_INT 22
40754: PUSH
40755: LD_INT 23
40757: PUSH
40758: LD_INT 24
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: ST_TO_ADDR
40767: GO 41052
40769: LD_INT 43
40771: DOUBLE
40772: EQUAL
40773: IFTRUE 40777
40775: GO 40803
40777: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40778: LD_ADDR_VAR 0 3
40782: PUSH
40783: LD_INT 21
40785: PUSH
40786: LD_INT 22
40788: PUSH
40789: LD_INT 23
40791: PUSH
40792: LD_INT 24
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: ST_TO_ADDR
40801: GO 41052
40803: LD_INT 44
40805: DOUBLE
40806: EQUAL
40807: IFTRUE 40811
40809: GO 40837
40811: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40812: LD_ADDR_VAR 0 3
40816: PUSH
40817: LD_INT 21
40819: PUSH
40820: LD_INT 22
40822: PUSH
40823: LD_INT 23
40825: PUSH
40826: LD_INT 24
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: ST_TO_ADDR
40835: GO 41052
40837: LD_INT 45
40839: DOUBLE
40840: EQUAL
40841: IFTRUE 40845
40843: GO 40871
40845: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40846: LD_ADDR_VAR 0 3
40850: PUSH
40851: LD_INT 21
40853: PUSH
40854: LD_INT 22
40856: PUSH
40857: LD_INT 23
40859: PUSH
40860: LD_INT 24
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: ST_TO_ADDR
40869: GO 41052
40871: LD_INT 49
40873: DOUBLE
40874: EQUAL
40875: IFTRUE 40879
40877: GO 40905
40879: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40880: LD_ADDR_VAR 0 3
40884: PUSH
40885: LD_INT 21
40887: PUSH
40888: LD_INT 22
40890: PUSH
40891: LD_INT 23
40893: PUSH
40894: LD_INT 24
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: ST_TO_ADDR
40903: GO 41052
40905: LD_INT 51
40907: DOUBLE
40908: EQUAL
40909: IFTRUE 40913
40911: GO 40939
40913: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40914: LD_ADDR_VAR 0 3
40918: PUSH
40919: LD_INT 21
40921: PUSH
40922: LD_INT 22
40924: PUSH
40925: LD_INT 23
40927: PUSH
40928: LD_INT 24
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: ST_TO_ADDR
40937: GO 41052
40939: LD_INT 52
40941: DOUBLE
40942: EQUAL
40943: IFTRUE 40947
40945: GO 40973
40947: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40948: LD_ADDR_VAR 0 3
40952: PUSH
40953: LD_INT 21
40955: PUSH
40956: LD_INT 22
40958: PUSH
40959: LD_INT 23
40961: PUSH
40962: LD_INT 24
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: ST_TO_ADDR
40971: GO 41052
40973: LD_INT 53
40975: DOUBLE
40976: EQUAL
40977: IFTRUE 40981
40979: GO 40999
40981: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40982: LD_ADDR_VAR 0 3
40986: PUSH
40987: LD_INT 23
40989: PUSH
40990: LD_INT 24
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: ST_TO_ADDR
40997: GO 41052
40999: LD_INT 46
41001: DOUBLE
41002: EQUAL
41003: IFTRUE 41007
41005: GO 41025
41007: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41008: LD_ADDR_VAR 0 3
41012: PUSH
41013: LD_INT 23
41015: PUSH
41016: LD_INT 24
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: ST_TO_ADDR
41023: GO 41052
41025: LD_INT 47
41027: DOUBLE
41028: EQUAL
41029: IFTRUE 41033
41031: GO 41051
41033: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41034: LD_ADDR_VAR 0 3
41038: PUSH
41039: LD_INT 23
41041: PUSH
41042: LD_INT 24
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: ST_TO_ADDR
41049: GO 41052
41051: POP
// result := ( chassis in result ) ;
41052: LD_ADDR_VAR 0 3
41056: PUSH
41057: LD_VAR 0 1
41061: PUSH
41062: LD_VAR 0 3
41066: IN
41067: ST_TO_ADDR
// end ;
41068: LD_VAR 0 3
41072: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41073: LD_INT 0
41075: PPUSH
41076: PPUSH
41077: PPUSH
41078: PPUSH
41079: PPUSH
41080: PPUSH
41081: PPUSH
// result := array ;
41082: LD_ADDR_VAR 0 5
41086: PUSH
41087: LD_VAR 0 1
41091: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41092: LD_VAR 0 1
41096: NOT
41097: PUSH
41098: LD_VAR 0 2
41102: NOT
41103: OR
41104: PUSH
41105: LD_VAR 0 3
41109: NOT
41110: OR
41111: PUSH
41112: LD_VAR 0 2
41116: PUSH
41117: LD_VAR 0 1
41121: GREATER
41122: OR
41123: PUSH
41124: LD_VAR 0 3
41128: PUSH
41129: LD_VAR 0 1
41133: GREATER
41134: OR
41135: IFFALSE 41139
// exit ;
41137: GO 41435
// if direction then
41139: LD_VAR 0 4
41143: IFFALSE 41207
// begin d := 1 ;
41145: LD_ADDR_VAR 0 9
41149: PUSH
41150: LD_INT 1
41152: ST_TO_ADDR
// if i_from > i_to then
41153: LD_VAR 0 2
41157: PUSH
41158: LD_VAR 0 3
41162: GREATER
41163: IFFALSE 41189
// length := ( array - i_from ) + i_to else
41165: LD_ADDR_VAR 0 11
41169: PUSH
41170: LD_VAR 0 1
41174: PUSH
41175: LD_VAR 0 2
41179: MINUS
41180: PUSH
41181: LD_VAR 0 3
41185: PLUS
41186: ST_TO_ADDR
41187: GO 41205
// length := i_to - i_from ;
41189: LD_ADDR_VAR 0 11
41193: PUSH
41194: LD_VAR 0 3
41198: PUSH
41199: LD_VAR 0 2
41203: MINUS
41204: ST_TO_ADDR
// end else
41205: GO 41268
// begin d := - 1 ;
41207: LD_ADDR_VAR 0 9
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: ST_TO_ADDR
// if i_from > i_to then
41216: LD_VAR 0 2
41220: PUSH
41221: LD_VAR 0 3
41225: GREATER
41226: IFFALSE 41246
// length := i_from - i_to else
41228: LD_ADDR_VAR 0 11
41232: PUSH
41233: LD_VAR 0 2
41237: PUSH
41238: LD_VAR 0 3
41242: MINUS
41243: ST_TO_ADDR
41244: GO 41268
// length := ( array - i_to ) + i_from ;
41246: LD_ADDR_VAR 0 11
41250: PUSH
41251: LD_VAR 0 1
41255: PUSH
41256: LD_VAR 0 3
41260: MINUS
41261: PUSH
41262: LD_VAR 0 2
41266: PLUS
41267: ST_TO_ADDR
// end ; if not length then
41268: LD_VAR 0 11
41272: NOT
41273: IFFALSE 41277
// exit ;
41275: GO 41435
// tmp := array ;
41277: LD_ADDR_VAR 0 10
41281: PUSH
41282: LD_VAR 0 1
41286: ST_TO_ADDR
// for i = 1 to length do
41287: LD_ADDR_VAR 0 6
41291: PUSH
41292: DOUBLE
41293: LD_INT 1
41295: DEC
41296: ST_TO_ADDR
41297: LD_VAR 0 11
41301: PUSH
41302: FOR_TO
41303: IFFALSE 41423
// begin for j = 1 to array do
41305: LD_ADDR_VAR 0 7
41309: PUSH
41310: DOUBLE
41311: LD_INT 1
41313: DEC
41314: ST_TO_ADDR
41315: LD_VAR 0 1
41319: PUSH
41320: FOR_TO
41321: IFFALSE 41409
// begin k := j + d ;
41323: LD_ADDR_VAR 0 8
41327: PUSH
41328: LD_VAR 0 7
41332: PUSH
41333: LD_VAR 0 9
41337: PLUS
41338: ST_TO_ADDR
// if k > array then
41339: LD_VAR 0 8
41343: PUSH
41344: LD_VAR 0 1
41348: GREATER
41349: IFFALSE 41359
// k := 1 ;
41351: LD_ADDR_VAR 0 8
41355: PUSH
41356: LD_INT 1
41358: ST_TO_ADDR
// if not k then
41359: LD_VAR 0 8
41363: NOT
41364: IFFALSE 41376
// k := array ;
41366: LD_ADDR_VAR 0 8
41370: PUSH
41371: LD_VAR 0 1
41375: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41376: LD_ADDR_VAR 0 10
41380: PUSH
41381: LD_VAR 0 10
41385: PPUSH
41386: LD_VAR 0 8
41390: PPUSH
41391: LD_VAR 0 1
41395: PUSH
41396: LD_VAR 0 7
41400: ARRAY
41401: PPUSH
41402: CALL_OW 1
41406: ST_TO_ADDR
// end ;
41407: GO 41320
41409: POP
41410: POP
// array := tmp ;
41411: LD_ADDR_VAR 0 1
41415: PUSH
41416: LD_VAR 0 10
41420: ST_TO_ADDR
// end ;
41421: GO 41302
41423: POP
41424: POP
// result := array ;
41425: LD_ADDR_VAR 0 5
41429: PUSH
41430: LD_VAR 0 1
41434: ST_TO_ADDR
// end ;
41435: LD_VAR 0 5
41439: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41440: LD_INT 0
41442: PPUSH
41443: PPUSH
// result := 0 ;
41444: LD_ADDR_VAR 0 3
41448: PUSH
41449: LD_INT 0
41451: ST_TO_ADDR
// if not array or not value in array then
41452: LD_VAR 0 1
41456: NOT
41457: PUSH
41458: LD_VAR 0 2
41462: PUSH
41463: LD_VAR 0 1
41467: IN
41468: NOT
41469: OR
41470: IFFALSE 41474
// exit ;
41472: GO 41528
// for i = 1 to array do
41474: LD_ADDR_VAR 0 4
41478: PUSH
41479: DOUBLE
41480: LD_INT 1
41482: DEC
41483: ST_TO_ADDR
41484: LD_VAR 0 1
41488: PUSH
41489: FOR_TO
41490: IFFALSE 41526
// if value = array [ i ] then
41492: LD_VAR 0 2
41496: PUSH
41497: LD_VAR 0 1
41501: PUSH
41502: LD_VAR 0 4
41506: ARRAY
41507: EQUAL
41508: IFFALSE 41524
// begin result := i ;
41510: LD_ADDR_VAR 0 3
41514: PUSH
41515: LD_VAR 0 4
41519: ST_TO_ADDR
// exit ;
41520: POP
41521: POP
41522: GO 41528
// end ;
41524: GO 41489
41526: POP
41527: POP
// end ;
41528: LD_VAR 0 3
41532: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41533: LD_INT 0
41535: PPUSH
// vc_chassis := chassis ;
41536: LD_ADDR_OWVAR 37
41540: PUSH
41541: LD_VAR 0 1
41545: ST_TO_ADDR
// vc_engine := engine ;
41546: LD_ADDR_OWVAR 39
41550: PUSH
41551: LD_VAR 0 2
41555: ST_TO_ADDR
// vc_control := control ;
41556: LD_ADDR_OWVAR 38
41560: PUSH
41561: LD_VAR 0 3
41565: ST_TO_ADDR
// vc_weapon := weapon ;
41566: LD_ADDR_OWVAR 40
41570: PUSH
41571: LD_VAR 0 4
41575: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41576: LD_ADDR_OWVAR 41
41580: PUSH
41581: LD_VAR 0 5
41585: ST_TO_ADDR
// end ;
41586: LD_VAR 0 6
41590: RET
// export function WantPlant ( unit ) ; var task ; begin
41591: LD_INT 0
41593: PPUSH
41594: PPUSH
// result := false ;
41595: LD_ADDR_VAR 0 2
41599: PUSH
41600: LD_INT 0
41602: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41603: LD_ADDR_VAR 0 3
41607: PUSH
41608: LD_VAR 0 1
41612: PPUSH
41613: CALL_OW 437
41617: ST_TO_ADDR
// if task then
41618: LD_VAR 0 3
41622: IFFALSE 41650
// if task [ 1 ] [ 1 ] = p then
41624: LD_VAR 0 3
41628: PUSH
41629: LD_INT 1
41631: ARRAY
41632: PUSH
41633: LD_INT 1
41635: ARRAY
41636: PUSH
41637: LD_STRING p
41639: EQUAL
41640: IFFALSE 41650
// result := true ;
41642: LD_ADDR_VAR 0 2
41646: PUSH
41647: LD_INT 1
41649: ST_TO_ADDR
// end ;
41650: LD_VAR 0 2
41654: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41655: LD_INT 0
41657: PPUSH
41658: PPUSH
41659: PPUSH
41660: PPUSH
// if pos < 1 then
41661: LD_VAR 0 2
41665: PUSH
41666: LD_INT 1
41668: LESS
41669: IFFALSE 41673
// exit ;
41671: GO 41976
// if pos = 1 then
41673: LD_VAR 0 2
41677: PUSH
41678: LD_INT 1
41680: EQUAL
41681: IFFALSE 41714
// result := Replace ( arr , pos [ 1 ] , value ) else
41683: LD_ADDR_VAR 0 4
41687: PUSH
41688: LD_VAR 0 1
41692: PPUSH
41693: LD_VAR 0 2
41697: PUSH
41698: LD_INT 1
41700: ARRAY
41701: PPUSH
41702: LD_VAR 0 3
41706: PPUSH
41707: CALL_OW 1
41711: ST_TO_ADDR
41712: GO 41976
// begin tmp := arr ;
41714: LD_ADDR_VAR 0 6
41718: PUSH
41719: LD_VAR 0 1
41723: ST_TO_ADDR
// s_arr := [ tmp ] ;
41724: LD_ADDR_VAR 0 7
41728: PUSH
41729: LD_VAR 0 6
41733: PUSH
41734: EMPTY
41735: LIST
41736: ST_TO_ADDR
// for i = 1 to pos - 1 do
41737: LD_ADDR_VAR 0 5
41741: PUSH
41742: DOUBLE
41743: LD_INT 1
41745: DEC
41746: ST_TO_ADDR
41747: LD_VAR 0 2
41751: PUSH
41752: LD_INT 1
41754: MINUS
41755: PUSH
41756: FOR_TO
41757: IFFALSE 41802
// begin tmp := tmp [ pos [ i ] ] ;
41759: LD_ADDR_VAR 0 6
41763: PUSH
41764: LD_VAR 0 6
41768: PUSH
41769: LD_VAR 0 2
41773: PUSH
41774: LD_VAR 0 5
41778: ARRAY
41779: ARRAY
41780: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41781: LD_ADDR_VAR 0 7
41785: PUSH
41786: LD_VAR 0 7
41790: PUSH
41791: LD_VAR 0 6
41795: PUSH
41796: EMPTY
41797: LIST
41798: ADD
41799: ST_TO_ADDR
// end ;
41800: GO 41756
41802: POP
41803: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41804: LD_ADDR_VAR 0 6
41808: PUSH
41809: LD_VAR 0 6
41813: PPUSH
41814: LD_VAR 0 2
41818: PUSH
41819: LD_VAR 0 2
41823: ARRAY
41824: PPUSH
41825: LD_VAR 0 3
41829: PPUSH
41830: CALL_OW 1
41834: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41835: LD_ADDR_VAR 0 7
41839: PUSH
41840: LD_VAR 0 7
41844: PPUSH
41845: LD_VAR 0 7
41849: PPUSH
41850: LD_VAR 0 6
41854: PPUSH
41855: CALL_OW 1
41859: ST_TO_ADDR
// for i = s_arr downto 2 do
41860: LD_ADDR_VAR 0 5
41864: PUSH
41865: DOUBLE
41866: LD_VAR 0 7
41870: INC
41871: ST_TO_ADDR
41872: LD_INT 2
41874: PUSH
41875: FOR_DOWNTO
41876: IFFALSE 41960
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41878: LD_ADDR_VAR 0 6
41882: PUSH
41883: LD_VAR 0 7
41887: PUSH
41888: LD_VAR 0 5
41892: PUSH
41893: LD_INT 1
41895: MINUS
41896: ARRAY
41897: PPUSH
41898: LD_VAR 0 2
41902: PUSH
41903: LD_VAR 0 5
41907: PUSH
41908: LD_INT 1
41910: MINUS
41911: ARRAY
41912: PPUSH
41913: LD_VAR 0 7
41917: PUSH
41918: LD_VAR 0 5
41922: ARRAY
41923: PPUSH
41924: CALL_OW 1
41928: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41929: LD_ADDR_VAR 0 7
41933: PUSH
41934: LD_VAR 0 7
41938: PPUSH
41939: LD_VAR 0 5
41943: PUSH
41944: LD_INT 1
41946: MINUS
41947: PPUSH
41948: LD_VAR 0 6
41952: PPUSH
41953: CALL_OW 1
41957: ST_TO_ADDR
// end ;
41958: GO 41875
41960: POP
41961: POP
// result := s_arr [ 1 ] ;
41962: LD_ADDR_VAR 0 4
41966: PUSH
41967: LD_VAR 0 7
41971: PUSH
41972: LD_INT 1
41974: ARRAY
41975: ST_TO_ADDR
// end ; end ;
41976: LD_VAR 0 4
41980: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41981: LD_INT 0
41983: PPUSH
41984: PPUSH
// if not list then
41985: LD_VAR 0 1
41989: NOT
41990: IFFALSE 41994
// exit ;
41992: GO 42085
// i := list [ pos1 ] ;
41994: LD_ADDR_VAR 0 5
41998: PUSH
41999: LD_VAR 0 1
42003: PUSH
42004: LD_VAR 0 2
42008: ARRAY
42009: ST_TO_ADDR
// if not i then
42010: LD_VAR 0 5
42014: NOT
42015: IFFALSE 42019
// exit ;
42017: GO 42085
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42019: LD_ADDR_VAR 0 1
42023: PUSH
42024: LD_VAR 0 1
42028: PPUSH
42029: LD_VAR 0 2
42033: PPUSH
42034: LD_VAR 0 1
42038: PUSH
42039: LD_VAR 0 3
42043: ARRAY
42044: PPUSH
42045: CALL_OW 1
42049: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42050: LD_ADDR_VAR 0 1
42054: PUSH
42055: LD_VAR 0 1
42059: PPUSH
42060: LD_VAR 0 3
42064: PPUSH
42065: LD_VAR 0 5
42069: PPUSH
42070: CALL_OW 1
42074: ST_TO_ADDR
// result := list ;
42075: LD_ADDR_VAR 0 4
42079: PUSH
42080: LD_VAR 0 1
42084: ST_TO_ADDR
// end ;
42085: LD_VAR 0 4
42089: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42090: LD_INT 0
42092: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42093: LD_ADDR_VAR 0 5
42097: PUSH
42098: LD_VAR 0 1
42102: PPUSH
42103: CALL_OW 250
42107: PPUSH
42108: LD_VAR 0 1
42112: PPUSH
42113: CALL_OW 251
42117: PPUSH
42118: LD_VAR 0 2
42122: PPUSH
42123: LD_VAR 0 3
42127: PPUSH
42128: LD_VAR 0 4
42132: PPUSH
42133: CALL 42143 0 5
42137: ST_TO_ADDR
// end ;
42138: LD_VAR 0 5
42142: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42143: LD_INT 0
42145: PPUSH
42146: PPUSH
42147: PPUSH
42148: PPUSH
// if not list then
42149: LD_VAR 0 3
42153: NOT
42154: IFFALSE 42158
// exit ;
42156: GO 42546
// result := [ ] ;
42158: LD_ADDR_VAR 0 6
42162: PUSH
42163: EMPTY
42164: ST_TO_ADDR
// for i in list do
42165: LD_ADDR_VAR 0 7
42169: PUSH
42170: LD_VAR 0 3
42174: PUSH
42175: FOR_IN
42176: IFFALSE 42378
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42178: LD_ADDR_VAR 0 9
42182: PUSH
42183: LD_VAR 0 7
42187: PPUSH
42188: LD_VAR 0 1
42192: PPUSH
42193: LD_VAR 0 2
42197: PPUSH
42198: CALL_OW 297
42202: ST_TO_ADDR
// if not result then
42203: LD_VAR 0 6
42207: NOT
42208: IFFALSE 42234
// result := [ [ i , tmp ] ] else
42210: LD_ADDR_VAR 0 6
42214: PUSH
42215: LD_VAR 0 7
42219: PUSH
42220: LD_VAR 0 9
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: EMPTY
42230: LIST
42231: ST_TO_ADDR
42232: GO 42376
// begin if result [ result ] [ 2 ] < tmp then
42234: LD_VAR 0 6
42238: PUSH
42239: LD_VAR 0 6
42243: ARRAY
42244: PUSH
42245: LD_INT 2
42247: ARRAY
42248: PUSH
42249: LD_VAR 0 9
42253: LESS
42254: IFFALSE 42296
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42256: LD_ADDR_VAR 0 6
42260: PUSH
42261: LD_VAR 0 6
42265: PPUSH
42266: LD_VAR 0 6
42270: PUSH
42271: LD_INT 1
42273: PLUS
42274: PPUSH
42275: LD_VAR 0 7
42279: PUSH
42280: LD_VAR 0 9
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PPUSH
42289: CALL_OW 2
42293: ST_TO_ADDR
42294: GO 42376
// for j = 1 to result do
42296: LD_ADDR_VAR 0 8
42300: PUSH
42301: DOUBLE
42302: LD_INT 1
42304: DEC
42305: ST_TO_ADDR
42306: LD_VAR 0 6
42310: PUSH
42311: FOR_TO
42312: IFFALSE 42374
// begin if tmp < result [ j ] [ 2 ] then
42314: LD_VAR 0 9
42318: PUSH
42319: LD_VAR 0 6
42323: PUSH
42324: LD_VAR 0 8
42328: ARRAY
42329: PUSH
42330: LD_INT 2
42332: ARRAY
42333: LESS
42334: IFFALSE 42372
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42336: LD_ADDR_VAR 0 6
42340: PUSH
42341: LD_VAR 0 6
42345: PPUSH
42346: LD_VAR 0 8
42350: PPUSH
42351: LD_VAR 0 7
42355: PUSH
42356: LD_VAR 0 9
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PPUSH
42365: CALL_OW 2
42369: ST_TO_ADDR
// break ;
42370: GO 42374
// end ; end ;
42372: GO 42311
42374: POP
42375: POP
// end ; end ;
42376: GO 42175
42378: POP
42379: POP
// if result and not asc then
42380: LD_VAR 0 6
42384: PUSH
42385: LD_VAR 0 4
42389: NOT
42390: AND
42391: IFFALSE 42466
// begin tmp := result ;
42393: LD_ADDR_VAR 0 9
42397: PUSH
42398: LD_VAR 0 6
42402: ST_TO_ADDR
// for i = tmp downto 1 do
42403: LD_ADDR_VAR 0 7
42407: PUSH
42408: DOUBLE
42409: LD_VAR 0 9
42413: INC
42414: ST_TO_ADDR
42415: LD_INT 1
42417: PUSH
42418: FOR_DOWNTO
42419: IFFALSE 42464
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42421: LD_ADDR_VAR 0 6
42425: PUSH
42426: LD_VAR 0 6
42430: PPUSH
42431: LD_VAR 0 9
42435: PUSH
42436: LD_VAR 0 7
42440: MINUS
42441: PUSH
42442: LD_INT 1
42444: PLUS
42445: PPUSH
42446: LD_VAR 0 9
42450: PUSH
42451: LD_VAR 0 7
42455: ARRAY
42456: PPUSH
42457: CALL_OW 1
42461: ST_TO_ADDR
42462: GO 42418
42464: POP
42465: POP
// end ; tmp := [ ] ;
42466: LD_ADDR_VAR 0 9
42470: PUSH
42471: EMPTY
42472: ST_TO_ADDR
// if mode then
42473: LD_VAR 0 5
42477: IFFALSE 42546
// begin for i = 1 to result do
42479: LD_ADDR_VAR 0 7
42483: PUSH
42484: DOUBLE
42485: LD_INT 1
42487: DEC
42488: ST_TO_ADDR
42489: LD_VAR 0 6
42493: PUSH
42494: FOR_TO
42495: IFFALSE 42534
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42497: LD_ADDR_VAR 0 9
42501: PUSH
42502: LD_VAR 0 9
42506: PPUSH
42507: LD_VAR 0 7
42511: PPUSH
42512: LD_VAR 0 6
42516: PUSH
42517: LD_VAR 0 7
42521: ARRAY
42522: PUSH
42523: LD_INT 1
42525: ARRAY
42526: PPUSH
42527: CALL_OW 1
42531: ST_TO_ADDR
42532: GO 42494
42534: POP
42535: POP
// result := tmp ;
42536: LD_ADDR_VAR 0 6
42540: PUSH
42541: LD_VAR 0 9
42545: ST_TO_ADDR
// end ; end ;
42546: LD_VAR 0 6
42550: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42551: LD_INT 0
42553: PPUSH
42554: PPUSH
42555: PPUSH
42556: PPUSH
42557: PPUSH
42558: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42559: LD_ADDR_VAR 0 5
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: EMPTY
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: ST_TO_ADDR
// if not x or not y then
42581: LD_VAR 0 2
42585: NOT
42586: PUSH
42587: LD_VAR 0 3
42591: NOT
42592: OR
42593: IFFALSE 42597
// exit ;
42595: GO 44249
// if not range then
42597: LD_VAR 0 4
42601: NOT
42602: IFFALSE 42612
// range := 10 ;
42604: LD_ADDR_VAR 0 4
42608: PUSH
42609: LD_INT 10
42611: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42612: LD_ADDR_VAR 0 8
42616: PUSH
42617: LD_INT 81
42619: PUSH
42620: LD_VAR 0 1
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 92
42631: PUSH
42632: LD_VAR 0 2
42636: PUSH
42637: LD_VAR 0 3
42641: PUSH
42642: LD_VAR 0 4
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: LD_INT 21
42658: PUSH
42659: LD_INT 3
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: LIST
42674: PPUSH
42675: CALL_OW 69
42679: ST_TO_ADDR
// if not tmp then
42680: LD_VAR 0 8
42684: NOT
42685: IFFALSE 42689
// exit ;
42687: GO 44249
// for i in tmp do
42689: LD_ADDR_VAR 0 6
42693: PUSH
42694: LD_VAR 0 8
42698: PUSH
42699: FOR_IN
42700: IFFALSE 44224
// begin points := [ 0 , 0 , 0 ] ;
42702: LD_ADDR_VAR 0 9
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 0
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: LIST
42720: ST_TO_ADDR
// bpoints := 1 ;
42721: LD_ADDR_VAR 0 10
42725: PUSH
42726: LD_INT 1
42728: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42729: LD_VAR 0 6
42733: PPUSH
42734: CALL_OW 247
42738: PUSH
42739: LD_INT 1
42741: DOUBLE
42742: EQUAL
42743: IFTRUE 42747
42745: GO 43325
42747: POP
// begin if GetClass ( i ) = 1 then
42748: LD_VAR 0 6
42752: PPUSH
42753: CALL_OW 257
42757: PUSH
42758: LD_INT 1
42760: EQUAL
42761: IFFALSE 42782
// points := [ 10 , 5 , 3 ] ;
42763: LD_ADDR_VAR 0 9
42767: PUSH
42768: LD_INT 10
42770: PUSH
42771: LD_INT 5
42773: PUSH
42774: LD_INT 3
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: LIST
42781: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42782: LD_VAR 0 6
42786: PPUSH
42787: CALL_OW 257
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: LD_INT 3
42797: PUSH
42798: LD_INT 4
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: LIST
42805: IN
42806: IFFALSE 42827
// points := [ 3 , 2 , 1 ] ;
42808: LD_ADDR_VAR 0 9
42812: PUSH
42813: LD_INT 3
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42827: LD_VAR 0 6
42831: PPUSH
42832: CALL_OW 257
42836: PUSH
42837: LD_INT 5
42839: EQUAL
42840: IFFALSE 42861
// points := [ 130 , 5 , 2 ] ;
42842: LD_ADDR_VAR 0 9
42846: PUSH
42847: LD_INT 130
42849: PUSH
42850: LD_INT 5
42852: PUSH
42853: LD_INT 2
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: LIST
42860: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42861: LD_VAR 0 6
42865: PPUSH
42866: CALL_OW 257
42870: PUSH
42871: LD_INT 8
42873: EQUAL
42874: IFFALSE 42895
// points := [ 35 , 35 , 30 ] ;
42876: LD_ADDR_VAR 0 9
42880: PUSH
42881: LD_INT 35
42883: PUSH
42884: LD_INT 35
42886: PUSH
42887: LD_INT 30
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: LIST
42894: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42895: LD_VAR 0 6
42899: PPUSH
42900: CALL_OW 257
42904: PUSH
42905: LD_INT 9
42907: EQUAL
42908: IFFALSE 42929
// points := [ 20 , 55 , 40 ] ;
42910: LD_ADDR_VAR 0 9
42914: PUSH
42915: LD_INT 20
42917: PUSH
42918: LD_INT 55
42920: PUSH
42921: LD_INT 40
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: LIST
42928: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42929: LD_VAR 0 6
42933: PPUSH
42934: CALL_OW 257
42938: PUSH
42939: LD_INT 12
42941: PUSH
42942: LD_INT 16
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: IN
42949: IFFALSE 42970
// points := [ 5 , 3 , 2 ] ;
42951: LD_ADDR_VAR 0 9
42955: PUSH
42956: LD_INT 5
42958: PUSH
42959: LD_INT 3
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: LIST
42969: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42970: LD_VAR 0 6
42974: PPUSH
42975: CALL_OW 257
42979: PUSH
42980: LD_INT 17
42982: EQUAL
42983: IFFALSE 43004
// points := [ 100 , 50 , 75 ] ;
42985: LD_ADDR_VAR 0 9
42989: PUSH
42990: LD_INT 100
42992: PUSH
42993: LD_INT 50
42995: PUSH
42996: LD_INT 75
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: LIST
43003: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43004: LD_VAR 0 6
43008: PPUSH
43009: CALL_OW 257
43013: PUSH
43014: LD_INT 15
43016: EQUAL
43017: IFFALSE 43038
// points := [ 10 , 5 , 3 ] ;
43019: LD_ADDR_VAR 0 9
43023: PUSH
43024: LD_INT 10
43026: PUSH
43027: LD_INT 5
43029: PUSH
43030: LD_INT 3
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43038: LD_VAR 0 6
43042: PPUSH
43043: CALL_OW 257
43047: PUSH
43048: LD_INT 14
43050: EQUAL
43051: IFFALSE 43072
// points := [ 10 , 0 , 0 ] ;
43053: LD_ADDR_VAR 0 9
43057: PUSH
43058: LD_INT 10
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43072: LD_VAR 0 6
43076: PPUSH
43077: CALL_OW 257
43081: PUSH
43082: LD_INT 11
43084: EQUAL
43085: IFFALSE 43106
// points := [ 30 , 10 , 5 ] ;
43087: LD_ADDR_VAR 0 9
43091: PUSH
43092: LD_INT 30
43094: PUSH
43095: LD_INT 10
43097: PUSH
43098: LD_INT 5
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: LIST
43105: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43106: LD_VAR 0 1
43110: PPUSH
43111: LD_INT 5
43113: PPUSH
43114: CALL_OW 321
43118: PUSH
43119: LD_INT 2
43121: EQUAL
43122: IFFALSE 43139
// bpoints := bpoints * 1.8 ;
43124: LD_ADDR_VAR 0 10
43128: PUSH
43129: LD_VAR 0 10
43133: PUSH
43134: LD_REAL  1.80000000000000E+0000
43137: MUL
43138: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43139: LD_VAR 0 6
43143: PPUSH
43144: CALL_OW 257
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: LD_INT 3
43157: PUSH
43158: LD_INT 4
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: IN
43167: PUSH
43168: LD_VAR 0 1
43172: PPUSH
43173: LD_INT 51
43175: PPUSH
43176: CALL_OW 321
43180: PUSH
43181: LD_INT 2
43183: EQUAL
43184: AND
43185: IFFALSE 43202
// bpoints := bpoints * 1.2 ;
43187: LD_ADDR_VAR 0 10
43191: PUSH
43192: LD_VAR 0 10
43196: PUSH
43197: LD_REAL  1.20000000000000E+0000
43200: MUL
43201: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43202: LD_VAR 0 6
43206: PPUSH
43207: CALL_OW 257
43211: PUSH
43212: LD_INT 5
43214: PUSH
43215: LD_INT 7
43217: PUSH
43218: LD_INT 9
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: LIST
43225: IN
43226: PUSH
43227: LD_VAR 0 1
43231: PPUSH
43232: LD_INT 52
43234: PPUSH
43235: CALL_OW 321
43239: PUSH
43240: LD_INT 2
43242: EQUAL
43243: AND
43244: IFFALSE 43261
// bpoints := bpoints * 1.5 ;
43246: LD_ADDR_VAR 0 10
43250: PUSH
43251: LD_VAR 0 10
43255: PUSH
43256: LD_REAL  1.50000000000000E+0000
43259: MUL
43260: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43261: LD_VAR 0 1
43265: PPUSH
43266: LD_INT 66
43268: PPUSH
43269: CALL_OW 321
43273: PUSH
43274: LD_INT 2
43276: EQUAL
43277: IFFALSE 43294
// bpoints := bpoints * 1.1 ;
43279: LD_ADDR_VAR 0 10
43283: PUSH
43284: LD_VAR 0 10
43288: PUSH
43289: LD_REAL  1.10000000000000E+0000
43292: MUL
43293: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43294: LD_ADDR_VAR 0 10
43298: PUSH
43299: LD_VAR 0 10
43303: PUSH
43304: LD_VAR 0 6
43308: PPUSH
43309: LD_INT 1
43311: PPUSH
43312: CALL_OW 259
43316: PUSH
43317: LD_REAL  1.15000000000000E+0000
43320: MUL
43321: MUL
43322: ST_TO_ADDR
// end ; unit_vehicle :
43323: GO 44153
43325: LD_INT 2
43327: DOUBLE
43328: EQUAL
43329: IFTRUE 43333
43331: GO 44141
43333: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43334: LD_VAR 0 6
43338: PPUSH
43339: CALL_OW 264
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: LD_INT 42
43349: PUSH
43350: LD_INT 24
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: LIST
43357: IN
43358: IFFALSE 43379
// points := [ 25 , 5 , 3 ] ;
43360: LD_ADDR_VAR 0 9
43364: PUSH
43365: LD_INT 25
43367: PUSH
43368: LD_INT 5
43370: PUSH
43371: LD_INT 3
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: LIST
43378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43379: LD_VAR 0 6
43383: PPUSH
43384: CALL_OW 264
43388: PUSH
43389: LD_INT 4
43391: PUSH
43392: LD_INT 43
43394: PUSH
43395: LD_INT 25
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: LIST
43402: IN
43403: IFFALSE 43424
// points := [ 40 , 15 , 5 ] ;
43405: LD_ADDR_VAR 0 9
43409: PUSH
43410: LD_INT 40
43412: PUSH
43413: LD_INT 15
43415: PUSH
43416: LD_INT 5
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: LIST
43423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43424: LD_VAR 0 6
43428: PPUSH
43429: CALL_OW 264
43433: PUSH
43434: LD_INT 3
43436: PUSH
43437: LD_INT 23
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: IN
43444: IFFALSE 43465
// points := [ 7 , 25 , 8 ] ;
43446: LD_ADDR_VAR 0 9
43450: PUSH
43451: LD_INT 7
43453: PUSH
43454: LD_INT 25
43456: PUSH
43457: LD_INT 8
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: LIST
43464: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43465: LD_VAR 0 6
43469: PPUSH
43470: CALL_OW 264
43474: PUSH
43475: LD_INT 5
43477: PUSH
43478: LD_INT 27
43480: PUSH
43481: LD_INT 44
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: LIST
43488: IN
43489: IFFALSE 43510
// points := [ 14 , 50 , 16 ] ;
43491: LD_ADDR_VAR 0 9
43495: PUSH
43496: LD_INT 14
43498: PUSH
43499: LD_INT 50
43501: PUSH
43502: LD_INT 16
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: LIST
43509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43510: LD_VAR 0 6
43514: PPUSH
43515: CALL_OW 264
43519: PUSH
43520: LD_INT 6
43522: PUSH
43523: LD_INT 46
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: IN
43530: IFFALSE 43551
// points := [ 32 , 120 , 70 ] ;
43532: LD_ADDR_VAR 0 9
43536: PUSH
43537: LD_INT 32
43539: PUSH
43540: LD_INT 120
43542: PUSH
43543: LD_INT 70
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: LIST
43550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43551: LD_VAR 0 6
43555: PPUSH
43556: CALL_OW 264
43560: PUSH
43561: LD_INT 7
43563: PUSH
43564: LD_INT 28
43566: PUSH
43567: LD_INT 45
43569: PUSH
43570: LD_EXP 37
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: IN
43581: IFFALSE 43602
// points := [ 35 , 20 , 45 ] ;
43583: LD_ADDR_VAR 0 9
43587: PUSH
43588: LD_INT 35
43590: PUSH
43591: LD_INT 20
43593: PUSH
43594: LD_INT 45
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: LIST
43601: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43602: LD_VAR 0 6
43606: PPUSH
43607: CALL_OW 264
43611: PUSH
43612: LD_INT 47
43614: PUSH
43615: EMPTY
43616: LIST
43617: IN
43618: IFFALSE 43639
// points := [ 67 , 45 , 75 ] ;
43620: LD_ADDR_VAR 0 9
43624: PUSH
43625: LD_INT 67
43627: PUSH
43628: LD_INT 45
43630: PUSH
43631: LD_INT 75
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: LIST
43638: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43639: LD_VAR 0 6
43643: PPUSH
43644: CALL_OW 264
43648: PUSH
43649: LD_INT 26
43651: PUSH
43652: EMPTY
43653: LIST
43654: IN
43655: IFFALSE 43676
// points := [ 120 , 30 , 80 ] ;
43657: LD_ADDR_VAR 0 9
43661: PUSH
43662: LD_INT 120
43664: PUSH
43665: LD_INT 30
43667: PUSH
43668: LD_INT 80
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: LIST
43675: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43676: LD_VAR 0 6
43680: PPUSH
43681: CALL_OW 264
43685: PUSH
43686: LD_INT 22
43688: PUSH
43689: EMPTY
43690: LIST
43691: IN
43692: IFFALSE 43713
// points := [ 40 , 1 , 1 ] ;
43694: LD_ADDR_VAR 0 9
43698: PUSH
43699: LD_INT 40
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: LIST
43712: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43713: LD_VAR 0 6
43717: PPUSH
43718: CALL_OW 264
43722: PUSH
43723: LD_INT 29
43725: PUSH
43726: EMPTY
43727: LIST
43728: IN
43729: IFFALSE 43750
// points := [ 70 , 200 , 400 ] ;
43731: LD_ADDR_VAR 0 9
43735: PUSH
43736: LD_INT 70
43738: PUSH
43739: LD_INT 200
43741: PUSH
43742: LD_INT 400
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: LIST
43749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43750: LD_VAR 0 6
43754: PPUSH
43755: CALL_OW 264
43759: PUSH
43760: LD_INT 14
43762: PUSH
43763: LD_INT 53
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: IN
43770: IFFALSE 43791
// points := [ 40 , 10 , 20 ] ;
43772: LD_ADDR_VAR 0 9
43776: PUSH
43777: LD_INT 40
43779: PUSH
43780: LD_INT 10
43782: PUSH
43783: LD_INT 20
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: LIST
43790: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43791: LD_VAR 0 6
43795: PPUSH
43796: CALL_OW 264
43800: PUSH
43801: LD_INT 9
43803: PUSH
43804: EMPTY
43805: LIST
43806: IN
43807: IFFALSE 43828
// points := [ 5 , 70 , 20 ] ;
43809: LD_ADDR_VAR 0 9
43813: PUSH
43814: LD_INT 5
43816: PUSH
43817: LD_INT 70
43819: PUSH
43820: LD_INT 20
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43828: LD_VAR 0 6
43832: PPUSH
43833: CALL_OW 264
43837: PUSH
43838: LD_INT 10
43840: PUSH
43841: EMPTY
43842: LIST
43843: IN
43844: IFFALSE 43865
// points := [ 35 , 110 , 70 ] ;
43846: LD_ADDR_VAR 0 9
43850: PUSH
43851: LD_INT 35
43853: PUSH
43854: LD_INT 110
43856: PUSH
43857: LD_INT 70
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: LIST
43864: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43865: LD_VAR 0 6
43869: PPUSH
43870: CALL_OW 265
43874: PUSH
43875: LD_INT 25
43877: EQUAL
43878: IFFALSE 43899
// points := [ 80 , 65 , 100 ] ;
43880: LD_ADDR_VAR 0 9
43884: PUSH
43885: LD_INT 80
43887: PUSH
43888: LD_INT 65
43890: PUSH
43891: LD_INT 100
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: LIST
43898: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43899: LD_VAR 0 6
43903: PPUSH
43904: CALL_OW 263
43908: PUSH
43909: LD_INT 1
43911: EQUAL
43912: IFFALSE 43947
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43914: LD_ADDR_VAR 0 10
43918: PUSH
43919: LD_VAR 0 10
43923: PUSH
43924: LD_VAR 0 6
43928: PPUSH
43929: CALL_OW 311
43933: PPUSH
43934: LD_INT 3
43936: PPUSH
43937: CALL_OW 259
43941: PUSH
43942: LD_INT 4
43944: MUL
43945: MUL
43946: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43947: LD_VAR 0 6
43951: PPUSH
43952: CALL_OW 263
43956: PUSH
43957: LD_INT 2
43959: EQUAL
43960: IFFALSE 44011
// begin j := IsControledBy ( i ) ;
43962: LD_ADDR_VAR 0 7
43966: PUSH
43967: LD_VAR 0 6
43971: PPUSH
43972: CALL_OW 312
43976: ST_TO_ADDR
// if j then
43977: LD_VAR 0 7
43981: IFFALSE 44011
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43983: LD_ADDR_VAR 0 10
43987: PUSH
43988: LD_VAR 0 10
43992: PUSH
43993: LD_VAR 0 7
43997: PPUSH
43998: LD_INT 3
44000: PPUSH
44001: CALL_OW 259
44005: PUSH
44006: LD_INT 3
44008: MUL
44009: MUL
44010: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44011: LD_VAR 0 6
44015: PPUSH
44016: CALL_OW 264
44020: PUSH
44021: LD_INT 5
44023: PUSH
44024: LD_INT 6
44026: PUSH
44027: LD_INT 46
44029: PUSH
44030: LD_INT 44
44032: PUSH
44033: LD_INT 47
44035: PUSH
44036: LD_INT 45
44038: PUSH
44039: LD_INT 28
44041: PUSH
44042: LD_INT 7
44044: PUSH
44045: LD_INT 27
44047: PUSH
44048: LD_INT 29
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: IN
44063: PUSH
44064: LD_VAR 0 1
44068: PPUSH
44069: LD_INT 52
44071: PPUSH
44072: CALL_OW 321
44076: PUSH
44077: LD_INT 2
44079: EQUAL
44080: AND
44081: IFFALSE 44098
// bpoints := bpoints * 1.2 ;
44083: LD_ADDR_VAR 0 10
44087: PUSH
44088: LD_VAR 0 10
44092: PUSH
44093: LD_REAL  1.20000000000000E+0000
44096: MUL
44097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44098: LD_VAR 0 6
44102: PPUSH
44103: CALL_OW 264
44107: PUSH
44108: LD_INT 6
44110: PUSH
44111: LD_INT 46
44113: PUSH
44114: LD_INT 47
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: LIST
44121: IN
44122: IFFALSE 44139
// bpoints := bpoints * 1.2 ;
44124: LD_ADDR_VAR 0 10
44128: PUSH
44129: LD_VAR 0 10
44133: PUSH
44134: LD_REAL  1.20000000000000E+0000
44137: MUL
44138: ST_TO_ADDR
// end ; unit_building :
44139: GO 44153
44141: LD_INT 3
44143: DOUBLE
44144: EQUAL
44145: IFTRUE 44149
44147: GO 44152
44149: POP
// ; end ;
44150: GO 44153
44152: POP
// for j = 1 to 3 do
44153: LD_ADDR_VAR 0 7
44157: PUSH
44158: DOUBLE
44159: LD_INT 1
44161: DEC
44162: ST_TO_ADDR
44163: LD_INT 3
44165: PUSH
44166: FOR_TO
44167: IFFALSE 44220
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44169: LD_ADDR_VAR 0 5
44173: PUSH
44174: LD_VAR 0 5
44178: PPUSH
44179: LD_VAR 0 7
44183: PPUSH
44184: LD_VAR 0 5
44188: PUSH
44189: LD_VAR 0 7
44193: ARRAY
44194: PUSH
44195: LD_VAR 0 9
44199: PUSH
44200: LD_VAR 0 7
44204: ARRAY
44205: PUSH
44206: LD_VAR 0 10
44210: MUL
44211: PLUS
44212: PPUSH
44213: CALL_OW 1
44217: ST_TO_ADDR
44218: GO 44166
44220: POP
44221: POP
// end ;
44222: GO 42699
44224: POP
44225: POP
// result := Replace ( result , 4 , tmp ) ;
44226: LD_ADDR_VAR 0 5
44230: PUSH
44231: LD_VAR 0 5
44235: PPUSH
44236: LD_INT 4
44238: PPUSH
44239: LD_VAR 0 8
44243: PPUSH
44244: CALL_OW 1
44248: ST_TO_ADDR
// end ;
44249: LD_VAR 0 5
44253: RET
// export function DangerAtRange ( unit , range ) ; begin
44254: LD_INT 0
44256: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44257: LD_ADDR_VAR 0 3
44261: PUSH
44262: LD_VAR 0 1
44266: PPUSH
44267: CALL_OW 255
44271: PPUSH
44272: LD_VAR 0 1
44276: PPUSH
44277: CALL_OW 250
44281: PPUSH
44282: LD_VAR 0 1
44286: PPUSH
44287: CALL_OW 251
44291: PPUSH
44292: LD_VAR 0 2
44296: PPUSH
44297: CALL 42551 0 4
44301: ST_TO_ADDR
// end ;
44302: LD_VAR 0 3
44306: RET
// export function DangerInArea ( side , area ) ; begin
44307: LD_INT 0
44309: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44310: LD_ADDR_VAR 0 3
44314: PUSH
44315: LD_VAR 0 2
44319: PPUSH
44320: LD_INT 81
44322: PUSH
44323: LD_VAR 0 1
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PPUSH
44332: CALL_OW 70
44336: ST_TO_ADDR
// end ;
44337: LD_VAR 0 3
44341: RET
// export function IsExtension ( b ) ; begin
44342: LD_INT 0
44344: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44345: LD_ADDR_VAR 0 2
44349: PUSH
44350: LD_VAR 0 1
44354: PUSH
44355: LD_INT 23
44357: PUSH
44358: LD_INT 20
44360: PUSH
44361: LD_INT 22
44363: PUSH
44364: LD_INT 17
44366: PUSH
44367: LD_INT 24
44369: PUSH
44370: LD_INT 21
44372: PUSH
44373: LD_INT 19
44375: PUSH
44376: LD_INT 16
44378: PUSH
44379: LD_INT 25
44381: PUSH
44382: LD_INT 18
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: IN
44397: ST_TO_ADDR
// end ;
44398: LD_VAR 0 2
44402: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44403: LD_INT 0
44405: PPUSH
44406: PPUSH
44407: PPUSH
// result := [ ] ;
44408: LD_ADDR_VAR 0 4
44412: PUSH
44413: EMPTY
44414: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44415: LD_ADDR_VAR 0 5
44419: PUSH
44420: LD_VAR 0 2
44424: PPUSH
44425: LD_INT 21
44427: PUSH
44428: LD_INT 3
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PPUSH
44435: CALL_OW 70
44439: ST_TO_ADDR
// if not tmp then
44440: LD_VAR 0 5
44444: NOT
44445: IFFALSE 44449
// exit ;
44447: GO 44513
// if checkLink then
44449: LD_VAR 0 3
44453: IFFALSE 44503
// begin for i in tmp do
44455: LD_ADDR_VAR 0 6
44459: PUSH
44460: LD_VAR 0 5
44464: PUSH
44465: FOR_IN
44466: IFFALSE 44501
// if GetBase ( i ) <> base then
44468: LD_VAR 0 6
44472: PPUSH
44473: CALL_OW 274
44477: PUSH
44478: LD_VAR 0 1
44482: NONEQUAL
44483: IFFALSE 44499
// ComLinkToBase ( base , i ) ;
44485: LD_VAR 0 1
44489: PPUSH
44490: LD_VAR 0 6
44494: PPUSH
44495: CALL_OW 169
44499: GO 44465
44501: POP
44502: POP
// end ; result := tmp ;
44503: LD_ADDR_VAR 0 4
44507: PUSH
44508: LD_VAR 0 5
44512: ST_TO_ADDR
// end ;
44513: LD_VAR 0 4
44517: RET
// export function ComComplete ( units , b ) ; var i ; begin
44518: LD_INT 0
44520: PPUSH
44521: PPUSH
// if not units then
44522: LD_VAR 0 1
44526: NOT
44527: IFFALSE 44531
// exit ;
44529: GO 44621
// for i in units do
44531: LD_ADDR_VAR 0 4
44535: PUSH
44536: LD_VAR 0 1
44540: PUSH
44541: FOR_IN
44542: IFFALSE 44619
// if BuildingStatus ( b ) = bs_build then
44544: LD_VAR 0 2
44548: PPUSH
44549: CALL_OW 461
44553: PUSH
44554: LD_INT 1
44556: EQUAL
44557: IFFALSE 44617
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44559: LD_VAR 0 4
44563: PPUSH
44564: LD_STRING h
44566: PUSH
44567: LD_VAR 0 2
44571: PPUSH
44572: CALL_OW 250
44576: PUSH
44577: LD_VAR 0 2
44581: PPUSH
44582: CALL_OW 251
44586: PUSH
44587: LD_VAR 0 2
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: PPUSH
44613: CALL_OW 446
44617: GO 44541
44619: POP
44620: POP
// end ;
44621: LD_VAR 0 3
44625: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44626: LD_INT 0
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
44633: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
44634: LD_VAR 0 1
44638: NOT
44639: PUSH
44640: LD_VAR 0 1
44644: PPUSH
44645: CALL_OW 263
44649: PUSH
44650: LD_INT 2
44652: NONEQUAL
44653: OR
44654: IFFALSE 44658
// exit ;
44656: GO 44974
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44658: LD_ADDR_VAR 0 6
44662: PUSH
44663: LD_INT 22
44665: PUSH
44666: LD_VAR 0 1
44670: PPUSH
44671: CALL_OW 255
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 30
44685: PUSH
44686: LD_INT 36
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 34
44695: PUSH
44696: LD_INT 31
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: LIST
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PPUSH
44712: CALL_OW 69
44716: ST_TO_ADDR
// if not tmp then
44717: LD_VAR 0 6
44721: NOT
44722: IFFALSE 44726
// exit ;
44724: GO 44974
// result := [ ] ;
44726: LD_ADDR_VAR 0 2
44730: PUSH
44731: EMPTY
44732: ST_TO_ADDR
// for i in tmp do
44733: LD_ADDR_VAR 0 3
44737: PUSH
44738: LD_VAR 0 6
44742: PUSH
44743: FOR_IN
44744: IFFALSE 44815
// begin t := UnitsInside ( i ) ;
44746: LD_ADDR_VAR 0 4
44750: PUSH
44751: LD_VAR 0 3
44755: PPUSH
44756: CALL_OW 313
44760: ST_TO_ADDR
// if t then
44761: LD_VAR 0 4
44765: IFFALSE 44813
// for j in t do
44767: LD_ADDR_VAR 0 7
44771: PUSH
44772: LD_VAR 0 4
44776: PUSH
44777: FOR_IN
44778: IFFALSE 44811
// result := Replace ( result , result + 1 , j ) ;
44780: LD_ADDR_VAR 0 2
44784: PUSH
44785: LD_VAR 0 2
44789: PPUSH
44790: LD_VAR 0 2
44794: PUSH
44795: LD_INT 1
44797: PLUS
44798: PPUSH
44799: LD_VAR 0 7
44803: PPUSH
44804: CALL_OW 1
44808: ST_TO_ADDR
44809: GO 44777
44811: POP
44812: POP
// end ;
44813: GO 44743
44815: POP
44816: POP
// if not result then
44817: LD_VAR 0 2
44821: NOT
44822: IFFALSE 44826
// exit ;
44824: GO 44974
// mech := result [ 1 ] ;
44826: LD_ADDR_VAR 0 5
44830: PUSH
44831: LD_VAR 0 2
44835: PUSH
44836: LD_INT 1
44838: ARRAY
44839: ST_TO_ADDR
// if result > 1 then
44840: LD_VAR 0 2
44844: PUSH
44845: LD_INT 1
44847: GREATER
44848: IFFALSE 44960
// begin for i = 2 to result do
44850: LD_ADDR_VAR 0 3
44854: PUSH
44855: DOUBLE
44856: LD_INT 2
44858: DEC
44859: ST_TO_ADDR
44860: LD_VAR 0 2
44864: PUSH
44865: FOR_TO
44866: IFFALSE 44958
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44868: LD_ADDR_VAR 0 4
44872: PUSH
44873: LD_VAR 0 2
44877: PUSH
44878: LD_VAR 0 3
44882: ARRAY
44883: PPUSH
44884: LD_INT 3
44886: PPUSH
44887: CALL_OW 259
44891: PUSH
44892: LD_VAR 0 2
44896: PUSH
44897: LD_VAR 0 3
44901: ARRAY
44902: PPUSH
44903: CALL_OW 432
44907: MINUS
44908: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44909: LD_VAR 0 4
44913: PUSH
44914: LD_VAR 0 5
44918: PPUSH
44919: LD_INT 3
44921: PPUSH
44922: CALL_OW 259
44926: PUSH
44927: LD_VAR 0 5
44931: PPUSH
44932: CALL_OW 432
44936: MINUS
44937: GREATEREQUAL
44938: IFFALSE 44956
// mech := result [ i ] ;
44940: LD_ADDR_VAR 0 5
44944: PUSH
44945: LD_VAR 0 2
44949: PUSH
44950: LD_VAR 0 3
44954: ARRAY
44955: ST_TO_ADDR
// end ;
44956: GO 44865
44958: POP
44959: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44960: LD_VAR 0 1
44964: PPUSH
44965: LD_VAR 0 5
44969: PPUSH
44970: CALL_OW 135
// end ;
44974: LD_VAR 0 2
44978: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44979: LD_INT 0
44981: PPUSH
44982: PPUSH
44983: PPUSH
44984: PPUSH
44985: PPUSH
44986: PPUSH
44987: PPUSH
44988: PPUSH
44989: PPUSH
44990: PPUSH
44991: PPUSH
44992: PPUSH
44993: PPUSH
// result := [ ] ;
44994: LD_ADDR_VAR 0 7
44998: PUSH
44999: EMPTY
45000: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45001: LD_VAR 0 1
45005: PPUSH
45006: CALL_OW 266
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: IN
45021: NOT
45022: IFFALSE 45026
// exit ;
45024: GO 46660
// if name then
45026: LD_VAR 0 3
45030: IFFALSE 45046
// SetBName ( base_dep , name ) ;
45032: LD_VAR 0 1
45036: PPUSH
45037: LD_VAR 0 3
45041: PPUSH
45042: CALL_OW 500
// base := GetBase ( base_dep ) ;
45046: LD_ADDR_VAR 0 15
45050: PUSH
45051: LD_VAR 0 1
45055: PPUSH
45056: CALL_OW 274
45060: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45061: LD_ADDR_VAR 0 16
45065: PUSH
45066: LD_VAR 0 1
45070: PPUSH
45071: CALL_OW 255
45075: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45076: LD_ADDR_VAR 0 17
45080: PUSH
45081: LD_VAR 0 1
45085: PPUSH
45086: CALL_OW 248
45090: ST_TO_ADDR
// if sources then
45091: LD_VAR 0 5
45095: IFFALSE 45142
// for i = 1 to 3 do
45097: LD_ADDR_VAR 0 8
45101: PUSH
45102: DOUBLE
45103: LD_INT 1
45105: DEC
45106: ST_TO_ADDR
45107: LD_INT 3
45109: PUSH
45110: FOR_TO
45111: IFFALSE 45140
// AddResourceType ( base , i , sources [ i ] ) ;
45113: LD_VAR 0 15
45117: PPUSH
45118: LD_VAR 0 8
45122: PPUSH
45123: LD_VAR 0 5
45127: PUSH
45128: LD_VAR 0 8
45132: ARRAY
45133: PPUSH
45134: CALL_OW 276
45138: GO 45110
45140: POP
45141: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45142: LD_ADDR_VAR 0 18
45146: PUSH
45147: LD_VAR 0 15
45151: PPUSH
45152: LD_VAR 0 2
45156: PPUSH
45157: LD_INT 1
45159: PPUSH
45160: CALL 44403 0 3
45164: ST_TO_ADDR
// InitHc ;
45165: CALL_OW 19
// InitUc ;
45169: CALL_OW 18
// uc_side := side ;
45173: LD_ADDR_OWVAR 20
45177: PUSH
45178: LD_VAR 0 16
45182: ST_TO_ADDR
// uc_nation := nation ;
45183: LD_ADDR_OWVAR 21
45187: PUSH
45188: LD_VAR 0 17
45192: ST_TO_ADDR
// if buildings then
45193: LD_VAR 0 18
45197: IFFALSE 46519
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45199: LD_ADDR_VAR 0 19
45203: PUSH
45204: LD_VAR 0 18
45208: PPUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 30
45214: PUSH
45215: LD_INT 29
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 30
45224: PUSH
45225: LD_INT 30
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: LIST
45236: PPUSH
45237: CALL_OW 72
45241: ST_TO_ADDR
// if tmp then
45242: LD_VAR 0 19
45246: IFFALSE 45294
// for i in tmp do
45248: LD_ADDR_VAR 0 8
45252: PUSH
45253: LD_VAR 0 19
45257: PUSH
45258: FOR_IN
45259: IFFALSE 45292
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45261: LD_VAR 0 8
45265: PPUSH
45266: CALL_OW 250
45270: PPUSH
45271: LD_VAR 0 8
45275: PPUSH
45276: CALL_OW 251
45280: PPUSH
45281: LD_VAR 0 16
45285: PPUSH
45286: CALL_OW 441
45290: GO 45258
45292: POP
45293: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45294: LD_VAR 0 18
45298: PPUSH
45299: LD_INT 2
45301: PUSH
45302: LD_INT 30
45304: PUSH
45305: LD_INT 32
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 30
45314: PUSH
45315: LD_INT 33
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: LIST
45326: PPUSH
45327: CALL_OW 72
45331: IFFALSE 45419
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45333: LD_ADDR_VAR 0 8
45337: PUSH
45338: LD_VAR 0 18
45342: PPUSH
45343: LD_INT 2
45345: PUSH
45346: LD_INT 30
45348: PUSH
45349: LD_INT 32
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 30
45358: PUSH
45359: LD_INT 33
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: PPUSH
45371: CALL_OW 72
45375: PUSH
45376: FOR_IN
45377: IFFALSE 45417
// begin if not GetBWeapon ( i ) then
45379: LD_VAR 0 8
45383: PPUSH
45384: CALL_OW 269
45388: NOT
45389: IFFALSE 45415
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45391: LD_VAR 0 8
45395: PPUSH
45396: LD_VAR 0 8
45400: PPUSH
45401: LD_VAR 0 2
45405: PPUSH
45406: CALL 46665 0 2
45410: PPUSH
45411: CALL_OW 431
// end ;
45415: GO 45376
45417: POP
45418: POP
// end ; for i = 1 to personel do
45419: LD_ADDR_VAR 0 8
45423: PUSH
45424: DOUBLE
45425: LD_INT 1
45427: DEC
45428: ST_TO_ADDR
45429: LD_VAR 0 6
45433: PUSH
45434: FOR_TO
45435: IFFALSE 46499
// begin if i > 4 then
45437: LD_VAR 0 8
45441: PUSH
45442: LD_INT 4
45444: GREATER
45445: IFFALSE 45449
// break ;
45447: GO 46499
// case i of 1 :
45449: LD_VAR 0 8
45453: PUSH
45454: LD_INT 1
45456: DOUBLE
45457: EQUAL
45458: IFTRUE 45462
45460: GO 45542
45462: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45463: LD_ADDR_VAR 0 12
45467: PUSH
45468: LD_VAR 0 18
45472: PPUSH
45473: LD_INT 22
45475: PUSH
45476: LD_VAR 0 16
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 58
45487: PUSH
45488: EMPTY
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: LD_INT 30
45496: PUSH
45497: LD_INT 32
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 30
45506: PUSH
45507: LD_INT 4
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 30
45516: PUSH
45517: LD_INT 5
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: PPUSH
45535: CALL_OW 72
45539: ST_TO_ADDR
45540: GO 45764
45542: LD_INT 2
45544: DOUBLE
45545: EQUAL
45546: IFTRUE 45550
45548: GO 45612
45550: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45551: LD_ADDR_VAR 0 12
45555: PUSH
45556: LD_VAR 0 18
45560: PPUSH
45561: LD_INT 22
45563: PUSH
45564: LD_VAR 0 16
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: LD_INT 30
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 30
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PPUSH
45605: CALL_OW 72
45609: ST_TO_ADDR
45610: GO 45764
45612: LD_INT 3
45614: DOUBLE
45615: EQUAL
45616: IFTRUE 45620
45618: GO 45682
45620: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45621: LD_ADDR_VAR 0 12
45625: PUSH
45626: LD_VAR 0 18
45630: PPUSH
45631: LD_INT 22
45633: PUSH
45634: LD_VAR 0 16
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: LD_INT 30
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 30
45658: PUSH
45659: LD_INT 3
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: LIST
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PPUSH
45675: CALL_OW 72
45679: ST_TO_ADDR
45680: GO 45764
45682: LD_INT 4
45684: DOUBLE
45685: EQUAL
45686: IFTRUE 45690
45688: GO 45763
45690: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45691: LD_ADDR_VAR 0 12
45695: PUSH
45696: LD_VAR 0 18
45700: PPUSH
45701: LD_INT 22
45703: PUSH
45704: LD_VAR 0 16
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: LD_INT 30
45718: PUSH
45719: LD_INT 6
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 30
45728: PUSH
45729: LD_INT 7
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 30
45738: PUSH
45739: LD_INT 8
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PPUSH
45756: CALL_OW 72
45760: ST_TO_ADDR
45761: GO 45764
45763: POP
// if i = 1 then
45764: LD_VAR 0 8
45768: PUSH
45769: LD_INT 1
45771: EQUAL
45772: IFFALSE 45883
// begin tmp := [ ] ;
45774: LD_ADDR_VAR 0 19
45778: PUSH
45779: EMPTY
45780: ST_TO_ADDR
// for j in f do
45781: LD_ADDR_VAR 0 9
45785: PUSH
45786: LD_VAR 0 12
45790: PUSH
45791: FOR_IN
45792: IFFALSE 45865
// if GetBType ( j ) = b_bunker then
45794: LD_VAR 0 9
45798: PPUSH
45799: CALL_OW 266
45803: PUSH
45804: LD_INT 32
45806: EQUAL
45807: IFFALSE 45834
// tmp := Insert ( tmp , 1 , j ) else
45809: LD_ADDR_VAR 0 19
45813: PUSH
45814: LD_VAR 0 19
45818: PPUSH
45819: LD_INT 1
45821: PPUSH
45822: LD_VAR 0 9
45826: PPUSH
45827: CALL_OW 2
45831: ST_TO_ADDR
45832: GO 45863
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45834: LD_ADDR_VAR 0 19
45838: PUSH
45839: LD_VAR 0 19
45843: PPUSH
45844: LD_VAR 0 19
45848: PUSH
45849: LD_INT 1
45851: PLUS
45852: PPUSH
45853: LD_VAR 0 9
45857: PPUSH
45858: CALL_OW 2
45862: ST_TO_ADDR
45863: GO 45791
45865: POP
45866: POP
// if tmp then
45867: LD_VAR 0 19
45871: IFFALSE 45883
// f := tmp ;
45873: LD_ADDR_VAR 0 12
45877: PUSH
45878: LD_VAR 0 19
45882: ST_TO_ADDR
// end ; x := personel [ i ] ;
45883: LD_ADDR_VAR 0 13
45887: PUSH
45888: LD_VAR 0 6
45892: PUSH
45893: LD_VAR 0 8
45897: ARRAY
45898: ST_TO_ADDR
// if x = - 1 then
45899: LD_VAR 0 13
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: EQUAL
45908: IFFALSE 46117
// begin for j in f do
45910: LD_ADDR_VAR 0 9
45914: PUSH
45915: LD_VAR 0 12
45919: PUSH
45920: FOR_IN
45921: IFFALSE 46113
// repeat InitHc ;
45923: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45927: LD_VAR 0 9
45931: PPUSH
45932: CALL_OW 266
45936: PUSH
45937: LD_INT 5
45939: EQUAL
45940: IFFALSE 46010
// begin if UnitsInside ( j ) < 3 then
45942: LD_VAR 0 9
45946: PPUSH
45947: CALL_OW 313
45951: PUSH
45952: LD_INT 3
45954: LESS
45955: IFFALSE 45991
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45957: LD_INT 0
45959: PPUSH
45960: LD_INT 5
45962: PUSH
45963: LD_INT 8
45965: PUSH
45966: LD_INT 9
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: PUSH
45974: LD_VAR 0 17
45978: ARRAY
45979: PPUSH
45980: LD_VAR 0 4
45984: PPUSH
45985: CALL_OW 380
45989: GO 46008
// PrepareHuman ( false , i , skill ) ;
45991: LD_INT 0
45993: PPUSH
45994: LD_VAR 0 8
45998: PPUSH
45999: LD_VAR 0 4
46003: PPUSH
46004: CALL_OW 380
// end else
46008: GO 46027
// PrepareHuman ( false , i , skill ) ;
46010: LD_INT 0
46012: PPUSH
46013: LD_VAR 0 8
46017: PPUSH
46018: LD_VAR 0 4
46022: PPUSH
46023: CALL_OW 380
// un := CreateHuman ;
46027: LD_ADDR_VAR 0 14
46031: PUSH
46032: CALL_OW 44
46036: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46037: LD_ADDR_VAR 0 7
46041: PUSH
46042: LD_VAR 0 7
46046: PPUSH
46047: LD_INT 1
46049: PPUSH
46050: LD_VAR 0 14
46054: PPUSH
46055: CALL_OW 2
46059: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46060: LD_VAR 0 14
46064: PPUSH
46065: LD_VAR 0 9
46069: PPUSH
46070: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46074: LD_VAR 0 9
46078: PPUSH
46079: CALL_OW 313
46083: PUSH
46084: LD_INT 6
46086: EQUAL
46087: PUSH
46088: LD_VAR 0 9
46092: PPUSH
46093: CALL_OW 266
46097: PUSH
46098: LD_INT 32
46100: PUSH
46101: LD_INT 31
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: IN
46108: OR
46109: IFFALSE 45923
46111: GO 45920
46113: POP
46114: POP
// end else
46115: GO 46497
// for j = 1 to x do
46117: LD_ADDR_VAR 0 9
46121: PUSH
46122: DOUBLE
46123: LD_INT 1
46125: DEC
46126: ST_TO_ADDR
46127: LD_VAR 0 13
46131: PUSH
46132: FOR_TO
46133: IFFALSE 46495
// begin InitHc ;
46135: CALL_OW 19
// if not f then
46139: LD_VAR 0 12
46143: NOT
46144: IFFALSE 46233
// begin PrepareHuman ( false , i , skill ) ;
46146: LD_INT 0
46148: PPUSH
46149: LD_VAR 0 8
46153: PPUSH
46154: LD_VAR 0 4
46158: PPUSH
46159: CALL_OW 380
// un := CreateHuman ;
46163: LD_ADDR_VAR 0 14
46167: PUSH
46168: CALL_OW 44
46172: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46173: LD_ADDR_VAR 0 7
46177: PUSH
46178: LD_VAR 0 7
46182: PPUSH
46183: LD_INT 1
46185: PPUSH
46186: LD_VAR 0 14
46190: PPUSH
46191: CALL_OW 2
46195: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46196: LD_VAR 0 14
46200: PPUSH
46201: LD_VAR 0 1
46205: PPUSH
46206: CALL_OW 250
46210: PPUSH
46211: LD_VAR 0 1
46215: PPUSH
46216: CALL_OW 251
46220: PPUSH
46221: LD_INT 10
46223: PPUSH
46224: LD_INT 0
46226: PPUSH
46227: CALL_OW 50
// continue ;
46231: GO 46132
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46233: LD_VAR 0 12
46237: PUSH
46238: LD_INT 1
46240: ARRAY
46241: PPUSH
46242: CALL_OW 313
46246: PUSH
46247: LD_VAR 0 12
46251: PUSH
46252: LD_INT 1
46254: ARRAY
46255: PPUSH
46256: CALL_OW 266
46260: PUSH
46261: LD_INT 32
46263: PUSH
46264: LD_INT 31
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: IN
46271: AND
46272: PUSH
46273: LD_VAR 0 12
46277: PUSH
46278: LD_INT 1
46280: ARRAY
46281: PPUSH
46282: CALL_OW 313
46286: PUSH
46287: LD_INT 6
46289: EQUAL
46290: OR
46291: IFFALSE 46311
// f := Delete ( f , 1 ) ;
46293: LD_ADDR_VAR 0 12
46297: PUSH
46298: LD_VAR 0 12
46302: PPUSH
46303: LD_INT 1
46305: PPUSH
46306: CALL_OW 3
46310: ST_TO_ADDR
// if not f then
46311: LD_VAR 0 12
46315: NOT
46316: IFFALSE 46334
// begin x := x + 2 ;
46318: LD_ADDR_VAR 0 13
46322: PUSH
46323: LD_VAR 0 13
46327: PUSH
46328: LD_INT 2
46330: PLUS
46331: ST_TO_ADDR
// continue ;
46332: GO 46132
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46334: LD_VAR 0 12
46338: PUSH
46339: LD_INT 1
46341: ARRAY
46342: PPUSH
46343: CALL_OW 266
46347: PUSH
46348: LD_INT 5
46350: EQUAL
46351: IFFALSE 46425
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46353: LD_VAR 0 12
46357: PUSH
46358: LD_INT 1
46360: ARRAY
46361: PPUSH
46362: CALL_OW 313
46366: PUSH
46367: LD_INT 3
46369: LESS
46370: IFFALSE 46406
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46372: LD_INT 0
46374: PPUSH
46375: LD_INT 5
46377: PUSH
46378: LD_INT 8
46380: PUSH
46381: LD_INT 9
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: LIST
46388: PUSH
46389: LD_VAR 0 17
46393: ARRAY
46394: PPUSH
46395: LD_VAR 0 4
46399: PPUSH
46400: CALL_OW 380
46404: GO 46423
// PrepareHuman ( false , i , skill ) ;
46406: LD_INT 0
46408: PPUSH
46409: LD_VAR 0 8
46413: PPUSH
46414: LD_VAR 0 4
46418: PPUSH
46419: CALL_OW 380
// end else
46423: GO 46442
// PrepareHuman ( false , i , skill ) ;
46425: LD_INT 0
46427: PPUSH
46428: LD_VAR 0 8
46432: PPUSH
46433: LD_VAR 0 4
46437: PPUSH
46438: CALL_OW 380
// un := CreateHuman ;
46442: LD_ADDR_VAR 0 14
46446: PUSH
46447: CALL_OW 44
46451: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46452: LD_ADDR_VAR 0 7
46456: PUSH
46457: LD_VAR 0 7
46461: PPUSH
46462: LD_INT 1
46464: PPUSH
46465: LD_VAR 0 14
46469: PPUSH
46470: CALL_OW 2
46474: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46475: LD_VAR 0 14
46479: PPUSH
46480: LD_VAR 0 12
46484: PUSH
46485: LD_INT 1
46487: ARRAY
46488: PPUSH
46489: CALL_OW 52
// end ;
46493: GO 46132
46495: POP
46496: POP
// end ;
46497: GO 45434
46499: POP
46500: POP
// result := result ^ buildings ;
46501: LD_ADDR_VAR 0 7
46505: PUSH
46506: LD_VAR 0 7
46510: PUSH
46511: LD_VAR 0 18
46515: ADD
46516: ST_TO_ADDR
// end else
46517: GO 46660
// begin for i = 1 to personel do
46519: LD_ADDR_VAR 0 8
46523: PUSH
46524: DOUBLE
46525: LD_INT 1
46527: DEC
46528: ST_TO_ADDR
46529: LD_VAR 0 6
46533: PUSH
46534: FOR_TO
46535: IFFALSE 46658
// begin if i > 4 then
46537: LD_VAR 0 8
46541: PUSH
46542: LD_INT 4
46544: GREATER
46545: IFFALSE 46549
// break ;
46547: GO 46658
// x := personel [ i ] ;
46549: LD_ADDR_VAR 0 13
46553: PUSH
46554: LD_VAR 0 6
46558: PUSH
46559: LD_VAR 0 8
46563: ARRAY
46564: ST_TO_ADDR
// if x = - 1 then
46565: LD_VAR 0 13
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: EQUAL
46574: IFFALSE 46578
// continue ;
46576: GO 46534
// PrepareHuman ( false , i , skill ) ;
46578: LD_INT 0
46580: PPUSH
46581: LD_VAR 0 8
46585: PPUSH
46586: LD_VAR 0 4
46590: PPUSH
46591: CALL_OW 380
// un := CreateHuman ;
46595: LD_ADDR_VAR 0 14
46599: PUSH
46600: CALL_OW 44
46604: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46605: LD_VAR 0 14
46609: PPUSH
46610: LD_VAR 0 1
46614: PPUSH
46615: CALL_OW 250
46619: PPUSH
46620: LD_VAR 0 1
46624: PPUSH
46625: CALL_OW 251
46629: PPUSH
46630: LD_INT 10
46632: PPUSH
46633: LD_INT 0
46635: PPUSH
46636: CALL_OW 50
// result := result ^ un ;
46640: LD_ADDR_VAR 0 7
46644: PUSH
46645: LD_VAR 0 7
46649: PUSH
46650: LD_VAR 0 14
46654: ADD
46655: ST_TO_ADDR
// end ;
46656: GO 46534
46658: POP
46659: POP
// end ; end ;
46660: LD_VAR 0 7
46664: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46665: LD_INT 0
46667: PPUSH
46668: PPUSH
46669: PPUSH
46670: PPUSH
46671: PPUSH
46672: PPUSH
46673: PPUSH
46674: PPUSH
46675: PPUSH
46676: PPUSH
46677: PPUSH
46678: PPUSH
46679: PPUSH
46680: PPUSH
46681: PPUSH
46682: PPUSH
// result := false ;
46683: LD_ADDR_VAR 0 3
46687: PUSH
46688: LD_INT 0
46690: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46691: LD_VAR 0 1
46695: NOT
46696: PUSH
46697: LD_VAR 0 1
46701: PPUSH
46702: CALL_OW 266
46706: PUSH
46707: LD_INT 32
46709: PUSH
46710: LD_INT 33
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: IN
46717: NOT
46718: OR
46719: IFFALSE 46723
// exit ;
46721: GO 47832
// nat := GetNation ( tower ) ;
46723: LD_ADDR_VAR 0 12
46727: PUSH
46728: LD_VAR 0 1
46732: PPUSH
46733: CALL_OW 248
46737: ST_TO_ADDR
// side := GetSide ( tower ) ;
46738: LD_ADDR_VAR 0 16
46742: PUSH
46743: LD_VAR 0 1
46747: PPUSH
46748: CALL_OW 255
46752: ST_TO_ADDR
// x := GetX ( tower ) ;
46753: LD_ADDR_VAR 0 10
46757: PUSH
46758: LD_VAR 0 1
46762: PPUSH
46763: CALL_OW 250
46767: ST_TO_ADDR
// y := GetY ( tower ) ;
46768: LD_ADDR_VAR 0 11
46772: PUSH
46773: LD_VAR 0 1
46777: PPUSH
46778: CALL_OW 251
46782: ST_TO_ADDR
// if not x or not y then
46783: LD_VAR 0 10
46787: NOT
46788: PUSH
46789: LD_VAR 0 11
46793: NOT
46794: OR
46795: IFFALSE 46799
// exit ;
46797: GO 47832
// weapon := 0 ;
46799: LD_ADDR_VAR 0 18
46803: PUSH
46804: LD_INT 0
46806: ST_TO_ADDR
// fac_list := [ ] ;
46807: LD_ADDR_VAR 0 17
46811: PUSH
46812: EMPTY
46813: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46814: LD_ADDR_VAR 0 6
46818: PUSH
46819: LD_VAR 0 1
46823: PPUSH
46824: CALL_OW 274
46828: PPUSH
46829: LD_VAR 0 2
46833: PPUSH
46834: LD_INT 0
46836: PPUSH
46837: CALL 44403 0 3
46841: PPUSH
46842: LD_INT 30
46844: PUSH
46845: LD_INT 3
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PPUSH
46852: CALL_OW 72
46856: ST_TO_ADDR
// if not factories then
46857: LD_VAR 0 6
46861: NOT
46862: IFFALSE 46866
// exit ;
46864: GO 47832
// for i in factories do
46866: LD_ADDR_VAR 0 8
46870: PUSH
46871: LD_VAR 0 6
46875: PUSH
46876: FOR_IN
46877: IFFALSE 46902
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46879: LD_ADDR_VAR 0 17
46883: PUSH
46884: LD_VAR 0 17
46888: PUSH
46889: LD_VAR 0 8
46893: PPUSH
46894: CALL_OW 478
46898: UNION
46899: ST_TO_ADDR
46900: GO 46876
46902: POP
46903: POP
// if not fac_list then
46904: LD_VAR 0 17
46908: NOT
46909: IFFALSE 46913
// exit ;
46911: GO 47832
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46913: LD_ADDR_VAR 0 5
46917: PUSH
46918: LD_INT 4
46920: PUSH
46921: LD_INT 5
46923: PUSH
46924: LD_INT 9
46926: PUSH
46927: LD_INT 10
46929: PUSH
46930: LD_INT 6
46932: PUSH
46933: LD_INT 7
46935: PUSH
46936: LD_INT 11
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 27
46950: PUSH
46951: LD_INT 28
46953: PUSH
46954: LD_INT 26
46956: PUSH
46957: LD_INT 30
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 43
46968: PUSH
46969: LD_INT 44
46971: PUSH
46972: LD_INT 46
46974: PUSH
46975: LD_INT 45
46977: PUSH
46978: LD_INT 47
46980: PUSH
46981: LD_INT 49
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: LIST
46996: PUSH
46997: LD_VAR 0 12
47001: ARRAY
47002: ST_TO_ADDR
// list := list isect fac_list ;
47003: LD_ADDR_VAR 0 5
47007: PUSH
47008: LD_VAR 0 5
47012: PUSH
47013: LD_VAR 0 17
47017: ISECT
47018: ST_TO_ADDR
// if not list then
47019: LD_VAR 0 5
47023: NOT
47024: IFFALSE 47028
// exit ;
47026: GO 47832
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47028: LD_VAR 0 12
47032: PUSH
47033: LD_INT 3
47035: EQUAL
47036: PUSH
47037: LD_INT 49
47039: PUSH
47040: LD_VAR 0 5
47044: IN
47045: AND
47046: PUSH
47047: LD_INT 31
47049: PPUSH
47050: LD_VAR 0 16
47054: PPUSH
47055: CALL_OW 321
47059: PUSH
47060: LD_INT 2
47062: EQUAL
47063: AND
47064: IFFALSE 47124
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47066: LD_INT 22
47068: PUSH
47069: LD_VAR 0 16
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 35
47080: PUSH
47081: LD_INT 49
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 91
47090: PUSH
47091: LD_VAR 0 1
47095: PUSH
47096: LD_INT 10
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: LIST
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: PPUSH
47109: CALL_OW 69
47113: NOT
47114: IFFALSE 47124
// weapon := ru_time_lapser ;
47116: LD_ADDR_VAR 0 18
47120: PUSH
47121: LD_INT 49
47123: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47124: LD_VAR 0 12
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: IN
47139: PUSH
47140: LD_INT 11
47142: PUSH
47143: LD_VAR 0 5
47147: IN
47148: PUSH
47149: LD_INT 30
47151: PUSH
47152: LD_VAR 0 5
47156: IN
47157: OR
47158: AND
47159: PUSH
47160: LD_INT 6
47162: PPUSH
47163: LD_VAR 0 16
47167: PPUSH
47168: CALL_OW 321
47172: PUSH
47173: LD_INT 2
47175: EQUAL
47176: AND
47177: IFFALSE 47342
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47179: LD_INT 22
47181: PUSH
47182: LD_VAR 0 16
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: LD_INT 35
47196: PUSH
47197: LD_INT 11
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 35
47206: PUSH
47207: LD_INT 30
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 91
47221: PUSH
47222: LD_VAR 0 1
47226: PUSH
47227: LD_INT 18
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: LIST
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: LIST
47239: PPUSH
47240: CALL_OW 69
47244: NOT
47245: PUSH
47246: LD_INT 22
47248: PUSH
47249: LD_VAR 0 16
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: LD_INT 30
47263: PUSH
47264: LD_INT 32
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 30
47273: PUSH
47274: LD_INT 33
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 91
47288: PUSH
47289: LD_VAR 0 1
47293: PUSH
47294: LD_INT 12
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: PUSH
47307: EMPTY
47308: LIST
47309: PPUSH
47310: CALL_OW 69
47314: PUSH
47315: LD_INT 2
47317: GREATER
47318: AND
47319: IFFALSE 47342
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47321: LD_ADDR_VAR 0 18
47325: PUSH
47326: LD_INT 11
47328: PUSH
47329: LD_INT 30
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_VAR 0 12
47340: ARRAY
47341: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47342: LD_VAR 0 18
47346: NOT
47347: PUSH
47348: LD_INT 40
47350: PPUSH
47351: LD_VAR 0 16
47355: PPUSH
47356: CALL_OW 321
47360: PUSH
47361: LD_INT 2
47363: EQUAL
47364: AND
47365: PUSH
47366: LD_INT 7
47368: PUSH
47369: LD_VAR 0 5
47373: IN
47374: PUSH
47375: LD_INT 28
47377: PUSH
47378: LD_VAR 0 5
47382: IN
47383: OR
47384: PUSH
47385: LD_INT 45
47387: PUSH
47388: LD_VAR 0 5
47392: IN
47393: OR
47394: AND
47395: IFFALSE 47649
// begin hex := GetHexInfo ( x , y ) ;
47397: LD_ADDR_VAR 0 4
47401: PUSH
47402: LD_VAR 0 10
47406: PPUSH
47407: LD_VAR 0 11
47411: PPUSH
47412: CALL_OW 546
47416: ST_TO_ADDR
// if hex [ 1 ] then
47417: LD_VAR 0 4
47421: PUSH
47422: LD_INT 1
47424: ARRAY
47425: IFFALSE 47429
// exit ;
47427: GO 47832
// height := hex [ 2 ] ;
47429: LD_ADDR_VAR 0 15
47433: PUSH
47434: LD_VAR 0 4
47438: PUSH
47439: LD_INT 2
47441: ARRAY
47442: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47443: LD_ADDR_VAR 0 14
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 2
47453: PUSH
47454: LD_INT 3
47456: PUSH
47457: LD_INT 5
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: ST_TO_ADDR
// for i in tmp do
47466: LD_ADDR_VAR 0 8
47470: PUSH
47471: LD_VAR 0 14
47475: PUSH
47476: FOR_IN
47477: IFFALSE 47647
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47479: LD_ADDR_VAR 0 9
47483: PUSH
47484: LD_VAR 0 10
47488: PPUSH
47489: LD_VAR 0 8
47493: PPUSH
47494: LD_INT 5
47496: PPUSH
47497: CALL_OW 272
47501: PUSH
47502: LD_VAR 0 11
47506: PPUSH
47507: LD_VAR 0 8
47511: PPUSH
47512: LD_INT 5
47514: PPUSH
47515: CALL_OW 273
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47524: LD_VAR 0 9
47528: PUSH
47529: LD_INT 1
47531: ARRAY
47532: PPUSH
47533: LD_VAR 0 9
47537: PUSH
47538: LD_INT 2
47540: ARRAY
47541: PPUSH
47542: CALL_OW 488
47546: IFFALSE 47645
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47548: LD_ADDR_VAR 0 4
47552: PUSH
47553: LD_VAR 0 9
47557: PUSH
47558: LD_INT 1
47560: ARRAY
47561: PPUSH
47562: LD_VAR 0 9
47566: PUSH
47567: LD_INT 2
47569: ARRAY
47570: PPUSH
47571: CALL_OW 546
47575: ST_TO_ADDR
// if hex [ 1 ] then
47576: LD_VAR 0 4
47580: PUSH
47581: LD_INT 1
47583: ARRAY
47584: IFFALSE 47588
// continue ;
47586: GO 47476
// h := hex [ 2 ] ;
47588: LD_ADDR_VAR 0 13
47592: PUSH
47593: LD_VAR 0 4
47597: PUSH
47598: LD_INT 2
47600: ARRAY
47601: ST_TO_ADDR
// if h + 7 < height then
47602: LD_VAR 0 13
47606: PUSH
47607: LD_INT 7
47609: PLUS
47610: PUSH
47611: LD_VAR 0 15
47615: LESS
47616: IFFALSE 47645
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47618: LD_ADDR_VAR 0 18
47622: PUSH
47623: LD_INT 7
47625: PUSH
47626: LD_INT 28
47628: PUSH
47629: LD_INT 45
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: LIST
47636: PUSH
47637: LD_VAR 0 12
47641: ARRAY
47642: ST_TO_ADDR
// break ;
47643: GO 47647
// end ; end ; end ;
47645: GO 47476
47647: POP
47648: POP
// end ; if not weapon then
47649: LD_VAR 0 18
47653: NOT
47654: IFFALSE 47714
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47656: LD_ADDR_VAR 0 5
47660: PUSH
47661: LD_VAR 0 5
47665: PUSH
47666: LD_INT 11
47668: PUSH
47669: LD_INT 30
47671: PUSH
47672: LD_INT 49
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: LIST
47679: DIFF
47680: ST_TO_ADDR
// if not list then
47681: LD_VAR 0 5
47685: NOT
47686: IFFALSE 47690
// exit ;
47688: GO 47832
// weapon := list [ rand ( 1 , list ) ] ;
47690: LD_ADDR_VAR 0 18
47694: PUSH
47695: LD_VAR 0 5
47699: PUSH
47700: LD_INT 1
47702: PPUSH
47703: LD_VAR 0 5
47707: PPUSH
47708: CALL_OW 12
47712: ARRAY
47713: ST_TO_ADDR
// end ; if weapon then
47714: LD_VAR 0 18
47718: IFFALSE 47832
// begin tmp := CostOfWeapon ( weapon ) ;
47720: LD_ADDR_VAR 0 14
47724: PUSH
47725: LD_VAR 0 18
47729: PPUSH
47730: CALL_OW 451
47734: ST_TO_ADDR
// j := GetBase ( tower ) ;
47735: LD_ADDR_VAR 0 9
47739: PUSH
47740: LD_VAR 0 1
47744: PPUSH
47745: CALL_OW 274
47749: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47750: LD_VAR 0 9
47754: PPUSH
47755: LD_INT 1
47757: PPUSH
47758: CALL_OW 275
47762: PUSH
47763: LD_VAR 0 14
47767: PUSH
47768: LD_INT 1
47770: ARRAY
47771: GREATEREQUAL
47772: PUSH
47773: LD_VAR 0 9
47777: PPUSH
47778: LD_INT 2
47780: PPUSH
47781: CALL_OW 275
47785: PUSH
47786: LD_VAR 0 14
47790: PUSH
47791: LD_INT 2
47793: ARRAY
47794: GREATEREQUAL
47795: AND
47796: PUSH
47797: LD_VAR 0 9
47801: PPUSH
47802: LD_INT 3
47804: PPUSH
47805: CALL_OW 275
47809: PUSH
47810: LD_VAR 0 14
47814: PUSH
47815: LD_INT 3
47817: ARRAY
47818: GREATEREQUAL
47819: AND
47820: IFFALSE 47832
// result := weapon ;
47822: LD_ADDR_VAR 0 3
47826: PUSH
47827: LD_VAR 0 18
47831: ST_TO_ADDR
// end ; end ;
47832: LD_VAR 0 3
47836: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47837: LD_INT 0
47839: PPUSH
47840: PPUSH
// result := true ;
47841: LD_ADDR_VAR 0 3
47845: PUSH
47846: LD_INT 1
47848: ST_TO_ADDR
// if array1 = array2 then
47849: LD_VAR 0 1
47853: PUSH
47854: LD_VAR 0 2
47858: EQUAL
47859: IFFALSE 47919
// begin for i = 1 to array1 do
47861: LD_ADDR_VAR 0 4
47865: PUSH
47866: DOUBLE
47867: LD_INT 1
47869: DEC
47870: ST_TO_ADDR
47871: LD_VAR 0 1
47875: PUSH
47876: FOR_TO
47877: IFFALSE 47915
// if array1 [ i ] <> array2 [ i ] then
47879: LD_VAR 0 1
47883: PUSH
47884: LD_VAR 0 4
47888: ARRAY
47889: PUSH
47890: LD_VAR 0 2
47894: PUSH
47895: LD_VAR 0 4
47899: ARRAY
47900: NONEQUAL
47901: IFFALSE 47913
// begin result := false ;
47903: LD_ADDR_VAR 0 3
47907: PUSH
47908: LD_INT 0
47910: ST_TO_ADDR
// break ;
47911: GO 47915
// end ;
47913: GO 47876
47915: POP
47916: POP
// end else
47917: GO 47927
// result := false ;
47919: LD_ADDR_VAR 0 3
47923: PUSH
47924: LD_INT 0
47926: ST_TO_ADDR
// end ;
47927: LD_VAR 0 3
47931: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47932: LD_INT 0
47934: PPUSH
47935: PPUSH
// if not array1 or not array2 then
47936: LD_VAR 0 1
47940: NOT
47941: PUSH
47942: LD_VAR 0 2
47946: NOT
47947: OR
47948: IFFALSE 47952
// exit ;
47950: GO 48016
// result := true ;
47952: LD_ADDR_VAR 0 3
47956: PUSH
47957: LD_INT 1
47959: ST_TO_ADDR
// for i = 1 to array1 do
47960: LD_ADDR_VAR 0 4
47964: PUSH
47965: DOUBLE
47966: LD_INT 1
47968: DEC
47969: ST_TO_ADDR
47970: LD_VAR 0 1
47974: PUSH
47975: FOR_TO
47976: IFFALSE 48014
// if array1 [ i ] <> array2 [ i ] then
47978: LD_VAR 0 1
47982: PUSH
47983: LD_VAR 0 4
47987: ARRAY
47988: PUSH
47989: LD_VAR 0 2
47993: PUSH
47994: LD_VAR 0 4
47998: ARRAY
47999: NONEQUAL
48000: IFFALSE 48012
// begin result := false ;
48002: LD_ADDR_VAR 0 3
48006: PUSH
48007: LD_INT 0
48009: ST_TO_ADDR
// break ;
48010: GO 48014
// end ;
48012: GO 47975
48014: POP
48015: POP
// end ;
48016: LD_VAR 0 3
48020: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48021: LD_INT 0
48023: PPUSH
48024: PPUSH
48025: PPUSH
// pom := GetBase ( fac ) ;
48026: LD_ADDR_VAR 0 5
48030: PUSH
48031: LD_VAR 0 1
48035: PPUSH
48036: CALL_OW 274
48040: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48041: LD_ADDR_VAR 0 4
48045: PUSH
48046: LD_VAR 0 2
48050: PUSH
48051: LD_INT 1
48053: ARRAY
48054: PPUSH
48055: LD_VAR 0 2
48059: PUSH
48060: LD_INT 2
48062: ARRAY
48063: PPUSH
48064: LD_VAR 0 2
48068: PUSH
48069: LD_INT 3
48071: ARRAY
48072: PPUSH
48073: LD_VAR 0 2
48077: PUSH
48078: LD_INT 4
48080: ARRAY
48081: PPUSH
48082: CALL_OW 449
48086: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48087: LD_ADDR_VAR 0 3
48091: PUSH
48092: LD_VAR 0 5
48096: PPUSH
48097: LD_INT 1
48099: PPUSH
48100: CALL_OW 275
48104: PUSH
48105: LD_VAR 0 4
48109: PUSH
48110: LD_INT 1
48112: ARRAY
48113: GREATEREQUAL
48114: PUSH
48115: LD_VAR 0 5
48119: PPUSH
48120: LD_INT 2
48122: PPUSH
48123: CALL_OW 275
48127: PUSH
48128: LD_VAR 0 4
48132: PUSH
48133: LD_INT 2
48135: ARRAY
48136: GREATEREQUAL
48137: AND
48138: PUSH
48139: LD_VAR 0 5
48143: PPUSH
48144: LD_INT 3
48146: PPUSH
48147: CALL_OW 275
48151: PUSH
48152: LD_VAR 0 4
48156: PUSH
48157: LD_INT 3
48159: ARRAY
48160: GREATEREQUAL
48161: AND
48162: ST_TO_ADDR
// end ;
48163: LD_VAR 0 3
48167: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48168: LD_INT 0
48170: PPUSH
48171: PPUSH
48172: PPUSH
48173: PPUSH
// pom := GetBase ( building ) ;
48174: LD_ADDR_VAR 0 3
48178: PUSH
48179: LD_VAR 0 1
48183: PPUSH
48184: CALL_OW 274
48188: ST_TO_ADDR
// if not pom then
48189: LD_VAR 0 3
48193: NOT
48194: IFFALSE 48198
// exit ;
48196: GO 48368
// btype := GetBType ( building ) ;
48198: LD_ADDR_VAR 0 5
48202: PUSH
48203: LD_VAR 0 1
48207: PPUSH
48208: CALL_OW 266
48212: ST_TO_ADDR
// if btype = b_armoury then
48213: LD_VAR 0 5
48217: PUSH
48218: LD_INT 4
48220: EQUAL
48221: IFFALSE 48231
// btype := b_barracks ;
48223: LD_ADDR_VAR 0 5
48227: PUSH
48228: LD_INT 5
48230: ST_TO_ADDR
// if btype = b_depot then
48231: LD_VAR 0 5
48235: PUSH
48236: LD_INT 0
48238: EQUAL
48239: IFFALSE 48249
// btype := b_warehouse ;
48241: LD_ADDR_VAR 0 5
48245: PUSH
48246: LD_INT 1
48248: ST_TO_ADDR
// if btype = b_workshop then
48249: LD_VAR 0 5
48253: PUSH
48254: LD_INT 2
48256: EQUAL
48257: IFFALSE 48267
// btype := b_factory ;
48259: LD_ADDR_VAR 0 5
48263: PUSH
48264: LD_INT 3
48266: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48267: LD_ADDR_VAR 0 4
48271: PUSH
48272: LD_VAR 0 5
48276: PPUSH
48277: LD_VAR 0 1
48281: PPUSH
48282: CALL_OW 248
48286: PPUSH
48287: CALL_OW 450
48291: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48292: LD_ADDR_VAR 0 2
48296: PUSH
48297: LD_VAR 0 3
48301: PPUSH
48302: LD_INT 1
48304: PPUSH
48305: CALL_OW 275
48309: PUSH
48310: LD_VAR 0 4
48314: PUSH
48315: LD_INT 1
48317: ARRAY
48318: GREATEREQUAL
48319: PUSH
48320: LD_VAR 0 3
48324: PPUSH
48325: LD_INT 2
48327: PPUSH
48328: CALL_OW 275
48332: PUSH
48333: LD_VAR 0 4
48337: PUSH
48338: LD_INT 2
48340: ARRAY
48341: GREATEREQUAL
48342: AND
48343: PUSH
48344: LD_VAR 0 3
48348: PPUSH
48349: LD_INT 3
48351: PPUSH
48352: CALL_OW 275
48356: PUSH
48357: LD_VAR 0 4
48361: PUSH
48362: LD_INT 3
48364: ARRAY
48365: GREATEREQUAL
48366: AND
48367: ST_TO_ADDR
// end ;
48368: LD_VAR 0 2
48372: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48373: LD_INT 0
48375: PPUSH
48376: PPUSH
48377: PPUSH
// pom := GetBase ( building ) ;
48378: LD_ADDR_VAR 0 4
48382: PUSH
48383: LD_VAR 0 1
48387: PPUSH
48388: CALL_OW 274
48392: ST_TO_ADDR
// if not pom then
48393: LD_VAR 0 4
48397: NOT
48398: IFFALSE 48402
// exit ;
48400: GO 48503
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48402: LD_ADDR_VAR 0 5
48406: PUSH
48407: LD_VAR 0 2
48411: PPUSH
48412: LD_VAR 0 1
48416: PPUSH
48417: CALL_OW 248
48421: PPUSH
48422: CALL_OW 450
48426: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48427: LD_ADDR_VAR 0 3
48431: PUSH
48432: LD_VAR 0 4
48436: PPUSH
48437: LD_INT 1
48439: PPUSH
48440: CALL_OW 275
48444: PUSH
48445: LD_VAR 0 5
48449: PUSH
48450: LD_INT 1
48452: ARRAY
48453: GREATEREQUAL
48454: PUSH
48455: LD_VAR 0 4
48459: PPUSH
48460: LD_INT 2
48462: PPUSH
48463: CALL_OW 275
48467: PUSH
48468: LD_VAR 0 5
48472: PUSH
48473: LD_INT 2
48475: ARRAY
48476: GREATEREQUAL
48477: AND
48478: PUSH
48479: LD_VAR 0 4
48483: PPUSH
48484: LD_INT 3
48486: PPUSH
48487: CALL_OW 275
48491: PUSH
48492: LD_VAR 0 5
48496: PUSH
48497: LD_INT 3
48499: ARRAY
48500: GREATEREQUAL
48501: AND
48502: ST_TO_ADDR
// end ;
48503: LD_VAR 0 3
48507: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48508: LD_INT 0
48510: PPUSH
48511: PPUSH
48512: PPUSH
48513: PPUSH
48514: PPUSH
48515: PPUSH
48516: PPUSH
48517: PPUSH
48518: PPUSH
48519: PPUSH
48520: PPUSH
// result := false ;
48521: LD_ADDR_VAR 0 8
48525: PUSH
48526: LD_INT 0
48528: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48529: LD_VAR 0 5
48533: NOT
48534: PUSH
48535: LD_VAR 0 1
48539: NOT
48540: OR
48541: PUSH
48542: LD_VAR 0 2
48546: NOT
48547: OR
48548: PUSH
48549: LD_VAR 0 3
48553: NOT
48554: OR
48555: IFFALSE 48559
// exit ;
48557: GO 49373
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48559: LD_ADDR_VAR 0 14
48563: PUSH
48564: LD_VAR 0 1
48568: PPUSH
48569: LD_VAR 0 2
48573: PPUSH
48574: LD_VAR 0 3
48578: PPUSH
48579: LD_VAR 0 4
48583: PPUSH
48584: LD_VAR 0 5
48588: PUSH
48589: LD_INT 1
48591: ARRAY
48592: PPUSH
48593: CALL_OW 248
48597: PPUSH
48598: LD_INT 0
48600: PPUSH
48601: CALL 50610 0 6
48605: ST_TO_ADDR
// if not hexes then
48606: LD_VAR 0 14
48610: NOT
48611: IFFALSE 48615
// exit ;
48613: GO 49373
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48615: LD_ADDR_VAR 0 17
48619: PUSH
48620: LD_VAR 0 5
48624: PPUSH
48625: LD_INT 22
48627: PUSH
48628: LD_VAR 0 13
48632: PPUSH
48633: CALL_OW 255
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: LD_INT 30
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 30
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: LIST
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PPUSH
48674: CALL_OW 72
48678: ST_TO_ADDR
// for i = 1 to hexes do
48679: LD_ADDR_VAR 0 9
48683: PUSH
48684: DOUBLE
48685: LD_INT 1
48687: DEC
48688: ST_TO_ADDR
48689: LD_VAR 0 14
48693: PUSH
48694: FOR_TO
48695: IFFALSE 49371
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48697: LD_ADDR_VAR 0 13
48701: PUSH
48702: LD_VAR 0 14
48706: PUSH
48707: LD_VAR 0 9
48711: ARRAY
48712: PUSH
48713: LD_INT 1
48715: ARRAY
48716: PPUSH
48717: LD_VAR 0 14
48721: PUSH
48722: LD_VAR 0 9
48726: ARRAY
48727: PUSH
48728: LD_INT 2
48730: ARRAY
48731: PPUSH
48732: CALL_OW 428
48736: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48737: LD_VAR 0 14
48741: PUSH
48742: LD_VAR 0 9
48746: ARRAY
48747: PUSH
48748: LD_INT 1
48750: ARRAY
48751: PPUSH
48752: LD_VAR 0 14
48756: PUSH
48757: LD_VAR 0 9
48761: ARRAY
48762: PUSH
48763: LD_INT 2
48765: ARRAY
48766: PPUSH
48767: CALL_OW 351
48771: PUSH
48772: LD_VAR 0 14
48776: PUSH
48777: LD_VAR 0 9
48781: ARRAY
48782: PUSH
48783: LD_INT 1
48785: ARRAY
48786: PPUSH
48787: LD_VAR 0 14
48791: PUSH
48792: LD_VAR 0 9
48796: ARRAY
48797: PUSH
48798: LD_INT 2
48800: ARRAY
48801: PPUSH
48802: CALL_OW 488
48806: NOT
48807: OR
48808: PUSH
48809: LD_VAR 0 13
48813: PPUSH
48814: CALL_OW 247
48818: PUSH
48819: LD_INT 3
48821: EQUAL
48822: OR
48823: IFFALSE 48829
// exit ;
48825: POP
48826: POP
48827: GO 49373
// if not tmp then
48829: LD_VAR 0 13
48833: NOT
48834: IFFALSE 48838
// continue ;
48836: GO 48694
// result := true ;
48838: LD_ADDR_VAR 0 8
48842: PUSH
48843: LD_INT 1
48845: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48846: LD_VAR 0 6
48850: PUSH
48851: LD_VAR 0 13
48855: PPUSH
48856: CALL_OW 247
48860: PUSH
48861: LD_INT 2
48863: EQUAL
48864: AND
48865: PUSH
48866: LD_VAR 0 13
48870: PPUSH
48871: CALL_OW 263
48875: PUSH
48876: LD_INT 1
48878: EQUAL
48879: AND
48880: IFFALSE 49044
// begin if IsDrivenBy ( tmp ) then
48882: LD_VAR 0 13
48886: PPUSH
48887: CALL_OW 311
48891: IFFALSE 48895
// continue ;
48893: GO 48694
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48895: LD_VAR 0 6
48899: PPUSH
48900: LD_INT 3
48902: PUSH
48903: LD_INT 60
48905: PUSH
48906: EMPTY
48907: LIST
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 3
48915: PUSH
48916: LD_INT 55
48918: PUSH
48919: EMPTY
48920: LIST
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PPUSH
48930: CALL_OW 72
48934: IFFALSE 49042
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48936: LD_ADDR_VAR 0 18
48940: PUSH
48941: LD_VAR 0 6
48945: PPUSH
48946: LD_INT 3
48948: PUSH
48949: LD_INT 60
48951: PUSH
48952: EMPTY
48953: LIST
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 3
48961: PUSH
48962: LD_INT 55
48964: PUSH
48965: EMPTY
48966: LIST
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PPUSH
48976: CALL_OW 72
48980: PUSH
48981: LD_INT 1
48983: ARRAY
48984: ST_TO_ADDR
// if IsInUnit ( driver ) then
48985: LD_VAR 0 18
48989: PPUSH
48990: CALL_OW 310
48994: IFFALSE 49005
// ComExit ( driver ) ;
48996: LD_VAR 0 18
49000: PPUSH
49001: CALL 73738 0 1
// AddComEnterUnit ( driver , tmp ) ;
49005: LD_VAR 0 18
49009: PPUSH
49010: LD_VAR 0 13
49014: PPUSH
49015: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49019: LD_VAR 0 18
49023: PPUSH
49024: LD_VAR 0 7
49028: PPUSH
49029: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49033: LD_VAR 0 18
49037: PPUSH
49038: CALL_OW 181
// end ; continue ;
49042: GO 48694
// end ; if not cleaners or not tmp in cleaners then
49044: LD_VAR 0 6
49048: NOT
49049: PUSH
49050: LD_VAR 0 13
49054: PUSH
49055: LD_VAR 0 6
49059: IN
49060: NOT
49061: OR
49062: IFFALSE 49369
// begin if dep then
49064: LD_VAR 0 17
49068: IFFALSE 49204
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49070: LD_ADDR_VAR 0 16
49074: PUSH
49075: LD_VAR 0 17
49079: PUSH
49080: LD_INT 1
49082: ARRAY
49083: PPUSH
49084: CALL_OW 250
49088: PPUSH
49089: LD_VAR 0 17
49093: PUSH
49094: LD_INT 1
49096: ARRAY
49097: PPUSH
49098: CALL_OW 254
49102: PPUSH
49103: LD_INT 5
49105: PPUSH
49106: CALL_OW 272
49110: PUSH
49111: LD_VAR 0 17
49115: PUSH
49116: LD_INT 1
49118: ARRAY
49119: PPUSH
49120: CALL_OW 251
49124: PPUSH
49125: LD_VAR 0 17
49129: PUSH
49130: LD_INT 1
49132: ARRAY
49133: PPUSH
49134: CALL_OW 254
49138: PPUSH
49139: LD_INT 5
49141: PPUSH
49142: CALL_OW 273
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49151: LD_VAR 0 16
49155: PUSH
49156: LD_INT 1
49158: ARRAY
49159: PPUSH
49160: LD_VAR 0 16
49164: PUSH
49165: LD_INT 2
49167: ARRAY
49168: PPUSH
49169: CALL_OW 488
49173: IFFALSE 49204
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49175: LD_VAR 0 13
49179: PPUSH
49180: LD_VAR 0 16
49184: PUSH
49185: LD_INT 1
49187: ARRAY
49188: PPUSH
49189: LD_VAR 0 16
49193: PUSH
49194: LD_INT 2
49196: ARRAY
49197: PPUSH
49198: CALL_OW 111
// continue ;
49202: GO 48694
// end ; end ; r := GetDir ( tmp ) ;
49204: LD_ADDR_VAR 0 15
49208: PUSH
49209: LD_VAR 0 13
49213: PPUSH
49214: CALL_OW 254
49218: ST_TO_ADDR
// if r = 5 then
49219: LD_VAR 0 15
49223: PUSH
49224: LD_INT 5
49226: EQUAL
49227: IFFALSE 49237
// r := 0 ;
49229: LD_ADDR_VAR 0 15
49233: PUSH
49234: LD_INT 0
49236: ST_TO_ADDR
// for j = r to 5 do
49237: LD_ADDR_VAR 0 10
49241: PUSH
49242: DOUBLE
49243: LD_VAR 0 15
49247: DEC
49248: ST_TO_ADDR
49249: LD_INT 5
49251: PUSH
49252: FOR_TO
49253: IFFALSE 49367
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49255: LD_ADDR_VAR 0 11
49259: PUSH
49260: LD_VAR 0 13
49264: PPUSH
49265: CALL_OW 250
49269: PPUSH
49270: LD_VAR 0 10
49274: PPUSH
49275: LD_INT 2
49277: PPUSH
49278: CALL_OW 272
49282: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49283: LD_ADDR_VAR 0 12
49287: PUSH
49288: LD_VAR 0 13
49292: PPUSH
49293: CALL_OW 251
49297: PPUSH
49298: LD_VAR 0 10
49302: PPUSH
49303: LD_INT 2
49305: PPUSH
49306: CALL_OW 273
49310: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49311: LD_VAR 0 11
49315: PPUSH
49316: LD_VAR 0 12
49320: PPUSH
49321: CALL_OW 488
49325: PUSH
49326: LD_VAR 0 11
49330: PPUSH
49331: LD_VAR 0 12
49335: PPUSH
49336: CALL_OW 428
49340: NOT
49341: AND
49342: IFFALSE 49365
// begin ComMoveXY ( tmp , _x , _y ) ;
49344: LD_VAR 0 13
49348: PPUSH
49349: LD_VAR 0 11
49353: PPUSH
49354: LD_VAR 0 12
49358: PPUSH
49359: CALL_OW 111
// break ;
49363: GO 49367
// end ; end ;
49365: GO 49252
49367: POP
49368: POP
// end ; end ;
49369: GO 48694
49371: POP
49372: POP
// end ;
49373: LD_VAR 0 8
49377: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49378: LD_INT 0
49380: PPUSH
// result := true ;
49381: LD_ADDR_VAR 0 3
49385: PUSH
49386: LD_INT 1
49388: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49389: LD_VAR 0 2
49393: PUSH
49394: LD_INT 24
49396: DOUBLE
49397: EQUAL
49398: IFTRUE 49408
49400: LD_INT 33
49402: DOUBLE
49403: EQUAL
49404: IFTRUE 49408
49406: GO 49433
49408: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49409: LD_ADDR_VAR 0 3
49413: PUSH
49414: LD_INT 32
49416: PPUSH
49417: LD_VAR 0 1
49421: PPUSH
49422: CALL_OW 321
49426: PUSH
49427: LD_INT 2
49429: EQUAL
49430: ST_TO_ADDR
49431: GO 49753
49433: LD_INT 20
49435: DOUBLE
49436: EQUAL
49437: IFTRUE 49441
49439: GO 49466
49441: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49442: LD_ADDR_VAR 0 3
49446: PUSH
49447: LD_INT 6
49449: PPUSH
49450: LD_VAR 0 1
49454: PPUSH
49455: CALL_OW 321
49459: PUSH
49460: LD_INT 2
49462: EQUAL
49463: ST_TO_ADDR
49464: GO 49753
49466: LD_INT 22
49468: DOUBLE
49469: EQUAL
49470: IFTRUE 49480
49472: LD_INT 36
49474: DOUBLE
49475: EQUAL
49476: IFTRUE 49480
49478: GO 49505
49480: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49481: LD_ADDR_VAR 0 3
49485: PUSH
49486: LD_INT 15
49488: PPUSH
49489: LD_VAR 0 1
49493: PPUSH
49494: CALL_OW 321
49498: PUSH
49499: LD_INT 2
49501: EQUAL
49502: ST_TO_ADDR
49503: GO 49753
49505: LD_INT 30
49507: DOUBLE
49508: EQUAL
49509: IFTRUE 49513
49511: GO 49538
49513: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49514: LD_ADDR_VAR 0 3
49518: PUSH
49519: LD_INT 20
49521: PPUSH
49522: LD_VAR 0 1
49526: PPUSH
49527: CALL_OW 321
49531: PUSH
49532: LD_INT 2
49534: EQUAL
49535: ST_TO_ADDR
49536: GO 49753
49538: LD_INT 28
49540: DOUBLE
49541: EQUAL
49542: IFTRUE 49552
49544: LD_INT 21
49546: DOUBLE
49547: EQUAL
49548: IFTRUE 49552
49550: GO 49577
49552: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49553: LD_ADDR_VAR 0 3
49557: PUSH
49558: LD_INT 21
49560: PPUSH
49561: LD_VAR 0 1
49565: PPUSH
49566: CALL_OW 321
49570: PUSH
49571: LD_INT 2
49573: EQUAL
49574: ST_TO_ADDR
49575: GO 49753
49577: LD_INT 16
49579: DOUBLE
49580: EQUAL
49581: IFTRUE 49585
49583: GO 49612
49585: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49586: LD_ADDR_VAR 0 3
49590: PUSH
49591: LD_EXP 45
49595: PPUSH
49596: LD_VAR 0 1
49600: PPUSH
49601: CALL_OW 321
49605: PUSH
49606: LD_INT 2
49608: EQUAL
49609: ST_TO_ADDR
49610: GO 49753
49612: LD_INT 19
49614: DOUBLE
49615: EQUAL
49616: IFTRUE 49626
49618: LD_INT 23
49620: DOUBLE
49621: EQUAL
49622: IFTRUE 49626
49624: GO 49653
49626: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
49627: LD_ADDR_VAR 0 3
49631: PUSH
49632: LD_EXP 44
49636: PPUSH
49637: LD_VAR 0 1
49641: PPUSH
49642: CALL_OW 321
49646: PUSH
49647: LD_INT 2
49649: EQUAL
49650: ST_TO_ADDR
49651: GO 49753
49653: LD_INT 17
49655: DOUBLE
49656: EQUAL
49657: IFTRUE 49661
49659: GO 49686
49661: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49662: LD_ADDR_VAR 0 3
49666: PUSH
49667: LD_INT 39
49669: PPUSH
49670: LD_VAR 0 1
49674: PPUSH
49675: CALL_OW 321
49679: PUSH
49680: LD_INT 2
49682: EQUAL
49683: ST_TO_ADDR
49684: GO 49753
49686: LD_INT 18
49688: DOUBLE
49689: EQUAL
49690: IFTRUE 49694
49692: GO 49719
49694: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49695: LD_ADDR_VAR 0 3
49699: PUSH
49700: LD_INT 40
49702: PPUSH
49703: LD_VAR 0 1
49707: PPUSH
49708: CALL_OW 321
49712: PUSH
49713: LD_INT 2
49715: EQUAL
49716: ST_TO_ADDR
49717: GO 49753
49719: LD_INT 27
49721: DOUBLE
49722: EQUAL
49723: IFTRUE 49727
49725: GO 49752
49727: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49728: LD_ADDR_VAR 0 3
49732: PUSH
49733: LD_INT 35
49735: PPUSH
49736: LD_VAR 0 1
49740: PPUSH
49741: CALL_OW 321
49745: PUSH
49746: LD_INT 2
49748: EQUAL
49749: ST_TO_ADDR
49750: GO 49753
49752: POP
// end ;
49753: LD_VAR 0 3
49757: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49758: LD_INT 0
49760: PPUSH
49761: PPUSH
49762: PPUSH
49763: PPUSH
49764: PPUSH
49765: PPUSH
49766: PPUSH
49767: PPUSH
49768: PPUSH
49769: PPUSH
49770: PPUSH
// result := false ;
49771: LD_ADDR_VAR 0 6
49775: PUSH
49776: LD_INT 0
49778: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49779: LD_VAR 0 1
49783: NOT
49784: PUSH
49785: LD_VAR 0 1
49789: PPUSH
49790: CALL_OW 266
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: IN
49805: NOT
49806: OR
49807: PUSH
49808: LD_VAR 0 2
49812: NOT
49813: OR
49814: PUSH
49815: LD_VAR 0 5
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: LD_INT 4
49834: PUSH
49835: LD_INT 5
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: IN
49846: NOT
49847: OR
49848: PUSH
49849: LD_VAR 0 3
49853: PPUSH
49854: LD_VAR 0 4
49858: PPUSH
49859: CALL_OW 488
49863: NOT
49864: OR
49865: IFFALSE 49869
// exit ;
49867: GO 50605
// side := GetSide ( depot ) ;
49869: LD_ADDR_VAR 0 9
49873: PUSH
49874: LD_VAR 0 1
49878: PPUSH
49879: CALL_OW 255
49883: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49884: LD_VAR 0 9
49888: PPUSH
49889: LD_VAR 0 2
49893: PPUSH
49894: CALL 49378 0 2
49898: NOT
49899: IFFALSE 49903
// exit ;
49901: GO 50605
// pom := GetBase ( depot ) ;
49903: LD_ADDR_VAR 0 10
49907: PUSH
49908: LD_VAR 0 1
49912: PPUSH
49913: CALL_OW 274
49917: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49918: LD_ADDR_VAR 0 11
49922: PUSH
49923: LD_VAR 0 2
49927: PPUSH
49928: LD_VAR 0 1
49932: PPUSH
49933: CALL_OW 248
49937: PPUSH
49938: CALL_OW 450
49942: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49943: LD_VAR 0 10
49947: PPUSH
49948: LD_INT 1
49950: PPUSH
49951: CALL_OW 275
49955: PUSH
49956: LD_VAR 0 11
49960: PUSH
49961: LD_INT 1
49963: ARRAY
49964: GREATEREQUAL
49965: PUSH
49966: LD_VAR 0 10
49970: PPUSH
49971: LD_INT 2
49973: PPUSH
49974: CALL_OW 275
49978: PUSH
49979: LD_VAR 0 11
49983: PUSH
49984: LD_INT 2
49986: ARRAY
49987: GREATEREQUAL
49988: AND
49989: PUSH
49990: LD_VAR 0 10
49994: PPUSH
49995: LD_INT 3
49997: PPUSH
49998: CALL_OW 275
50002: PUSH
50003: LD_VAR 0 11
50007: PUSH
50008: LD_INT 3
50010: ARRAY
50011: GREATEREQUAL
50012: AND
50013: NOT
50014: IFFALSE 50018
// exit ;
50016: GO 50605
// if GetBType ( depot ) = b_depot then
50018: LD_VAR 0 1
50022: PPUSH
50023: CALL_OW 266
50027: PUSH
50028: LD_INT 0
50030: EQUAL
50031: IFFALSE 50043
// dist := 28 else
50033: LD_ADDR_VAR 0 14
50037: PUSH
50038: LD_INT 28
50040: ST_TO_ADDR
50041: GO 50051
// dist := 36 ;
50043: LD_ADDR_VAR 0 14
50047: PUSH
50048: LD_INT 36
50050: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50051: LD_VAR 0 1
50055: PPUSH
50056: LD_VAR 0 3
50060: PPUSH
50061: LD_VAR 0 4
50065: PPUSH
50066: CALL_OW 297
50070: PUSH
50071: LD_VAR 0 14
50075: GREATER
50076: IFFALSE 50080
// exit ;
50078: GO 50605
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50080: LD_ADDR_VAR 0 12
50084: PUSH
50085: LD_VAR 0 2
50089: PPUSH
50090: LD_VAR 0 3
50094: PPUSH
50095: LD_VAR 0 4
50099: PPUSH
50100: LD_VAR 0 5
50104: PPUSH
50105: LD_VAR 0 1
50109: PPUSH
50110: CALL_OW 248
50114: PPUSH
50115: LD_INT 0
50117: PPUSH
50118: CALL 50610 0 6
50122: ST_TO_ADDR
// if not hexes then
50123: LD_VAR 0 12
50127: NOT
50128: IFFALSE 50132
// exit ;
50130: GO 50605
// hex := GetHexInfo ( x , y ) ;
50132: LD_ADDR_VAR 0 15
50136: PUSH
50137: LD_VAR 0 3
50141: PPUSH
50142: LD_VAR 0 4
50146: PPUSH
50147: CALL_OW 546
50151: ST_TO_ADDR
// if hex [ 1 ] then
50152: LD_VAR 0 15
50156: PUSH
50157: LD_INT 1
50159: ARRAY
50160: IFFALSE 50164
// exit ;
50162: GO 50605
// height := hex [ 2 ] ;
50164: LD_ADDR_VAR 0 13
50168: PUSH
50169: LD_VAR 0 15
50173: PUSH
50174: LD_INT 2
50176: ARRAY
50177: ST_TO_ADDR
// for i = 1 to hexes do
50178: LD_ADDR_VAR 0 7
50182: PUSH
50183: DOUBLE
50184: LD_INT 1
50186: DEC
50187: ST_TO_ADDR
50188: LD_VAR 0 12
50192: PUSH
50193: FOR_TO
50194: IFFALSE 50524
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50196: LD_VAR 0 12
50200: PUSH
50201: LD_VAR 0 7
50205: ARRAY
50206: PUSH
50207: LD_INT 1
50209: ARRAY
50210: PPUSH
50211: LD_VAR 0 12
50215: PUSH
50216: LD_VAR 0 7
50220: ARRAY
50221: PUSH
50222: LD_INT 2
50224: ARRAY
50225: PPUSH
50226: CALL_OW 488
50230: NOT
50231: PUSH
50232: LD_VAR 0 12
50236: PUSH
50237: LD_VAR 0 7
50241: ARRAY
50242: PUSH
50243: LD_INT 1
50245: ARRAY
50246: PPUSH
50247: LD_VAR 0 12
50251: PUSH
50252: LD_VAR 0 7
50256: ARRAY
50257: PUSH
50258: LD_INT 2
50260: ARRAY
50261: PPUSH
50262: CALL_OW 428
50266: PUSH
50267: LD_INT 0
50269: GREATER
50270: OR
50271: PUSH
50272: LD_VAR 0 12
50276: PUSH
50277: LD_VAR 0 7
50281: ARRAY
50282: PUSH
50283: LD_INT 1
50285: ARRAY
50286: PPUSH
50287: LD_VAR 0 12
50291: PUSH
50292: LD_VAR 0 7
50296: ARRAY
50297: PUSH
50298: LD_INT 2
50300: ARRAY
50301: PPUSH
50302: CALL_OW 351
50306: OR
50307: IFFALSE 50313
// exit ;
50309: POP
50310: POP
50311: GO 50605
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50313: LD_ADDR_VAR 0 8
50317: PUSH
50318: LD_VAR 0 12
50322: PUSH
50323: LD_VAR 0 7
50327: ARRAY
50328: PUSH
50329: LD_INT 1
50331: ARRAY
50332: PPUSH
50333: LD_VAR 0 12
50337: PUSH
50338: LD_VAR 0 7
50342: ARRAY
50343: PUSH
50344: LD_INT 2
50346: ARRAY
50347: PPUSH
50348: CALL_OW 546
50352: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50353: LD_VAR 0 8
50357: PUSH
50358: LD_INT 1
50360: ARRAY
50361: PUSH
50362: LD_VAR 0 8
50366: PUSH
50367: LD_INT 2
50369: ARRAY
50370: PUSH
50371: LD_VAR 0 13
50375: PUSH
50376: LD_INT 2
50378: PLUS
50379: GREATER
50380: OR
50381: PUSH
50382: LD_VAR 0 8
50386: PUSH
50387: LD_INT 2
50389: ARRAY
50390: PUSH
50391: LD_VAR 0 13
50395: PUSH
50396: LD_INT 2
50398: MINUS
50399: LESS
50400: OR
50401: PUSH
50402: LD_VAR 0 8
50406: PUSH
50407: LD_INT 3
50409: ARRAY
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: LD_INT 8
50416: PUSH
50417: LD_INT 9
50419: PUSH
50420: LD_INT 10
50422: PUSH
50423: LD_INT 11
50425: PUSH
50426: LD_INT 12
50428: PUSH
50429: LD_INT 13
50431: PUSH
50432: LD_INT 16
50434: PUSH
50435: LD_INT 17
50437: PUSH
50438: LD_INT 18
50440: PUSH
50441: LD_INT 19
50443: PUSH
50444: LD_INT 20
50446: PUSH
50447: LD_INT 21
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: IN
50465: NOT
50466: OR
50467: PUSH
50468: LD_VAR 0 8
50472: PUSH
50473: LD_INT 5
50475: ARRAY
50476: NOT
50477: OR
50478: PUSH
50479: LD_VAR 0 8
50483: PUSH
50484: LD_INT 6
50486: ARRAY
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: LD_INT 7
50496: PUSH
50497: LD_INT 9
50499: PUSH
50500: LD_INT 10
50502: PUSH
50503: LD_INT 11
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: IN
50514: NOT
50515: OR
50516: IFFALSE 50522
// exit ;
50518: POP
50519: POP
50520: GO 50605
// end ;
50522: GO 50193
50524: POP
50525: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50526: LD_VAR 0 9
50530: PPUSH
50531: LD_VAR 0 3
50535: PPUSH
50536: LD_VAR 0 4
50540: PPUSH
50541: LD_INT 20
50543: PPUSH
50544: CALL 42551 0 4
50548: PUSH
50549: LD_INT 4
50551: ARRAY
50552: IFFALSE 50556
// exit ;
50554: GO 50605
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50556: LD_VAR 0 2
50560: PUSH
50561: LD_INT 29
50563: PUSH
50564: LD_INT 30
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: IN
50571: PUSH
50572: LD_VAR 0 3
50576: PPUSH
50577: LD_VAR 0 4
50581: PPUSH
50582: LD_VAR 0 9
50586: PPUSH
50587: CALL_OW 440
50591: NOT
50592: AND
50593: IFFALSE 50597
// exit ;
50595: GO 50605
// result := true ;
50597: LD_ADDR_VAR 0 6
50601: PUSH
50602: LD_INT 1
50604: ST_TO_ADDR
// end ;
50605: LD_VAR 0 6
50609: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50610: LD_INT 0
50612: PPUSH
50613: PPUSH
50614: PPUSH
50615: PPUSH
50616: PPUSH
50617: PPUSH
50618: PPUSH
50619: PPUSH
50620: PPUSH
50621: PPUSH
50622: PPUSH
50623: PPUSH
50624: PPUSH
50625: PPUSH
50626: PPUSH
50627: PPUSH
50628: PPUSH
50629: PPUSH
50630: PPUSH
50631: PPUSH
50632: PPUSH
50633: PPUSH
50634: PPUSH
50635: PPUSH
50636: PPUSH
50637: PPUSH
50638: PPUSH
50639: PPUSH
50640: PPUSH
50641: PPUSH
50642: PPUSH
50643: PPUSH
50644: PPUSH
50645: PPUSH
50646: PPUSH
50647: PPUSH
50648: PPUSH
50649: PPUSH
50650: PPUSH
50651: PPUSH
50652: PPUSH
50653: PPUSH
50654: PPUSH
50655: PPUSH
50656: PPUSH
50657: PPUSH
50658: PPUSH
50659: PPUSH
50660: PPUSH
50661: PPUSH
50662: PPUSH
50663: PPUSH
50664: PPUSH
50665: PPUSH
50666: PPUSH
50667: PPUSH
50668: PPUSH
50669: PPUSH
// result = [ ] ;
50670: LD_ADDR_VAR 0 7
50674: PUSH
50675: EMPTY
50676: ST_TO_ADDR
// temp_list = [ ] ;
50677: LD_ADDR_VAR 0 9
50681: PUSH
50682: EMPTY
50683: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50684: LD_VAR 0 4
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 2
50697: PUSH
50698: LD_INT 3
50700: PUSH
50701: LD_INT 4
50703: PUSH
50704: LD_INT 5
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: IN
50715: NOT
50716: PUSH
50717: LD_VAR 0 1
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: IN
50732: PUSH
50733: LD_VAR 0 5
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 3
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: LIST
50751: IN
50752: NOT
50753: AND
50754: OR
50755: IFFALSE 50759
// exit ;
50757: GO 69150
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50759: LD_VAR 0 1
50763: PUSH
50764: LD_INT 6
50766: PUSH
50767: LD_INT 7
50769: PUSH
50770: LD_INT 8
50772: PUSH
50773: LD_INT 13
50775: PUSH
50776: LD_INT 12
50778: PUSH
50779: LD_INT 15
50781: PUSH
50782: LD_INT 11
50784: PUSH
50785: LD_INT 14
50787: PUSH
50788: LD_INT 10
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: IN
50802: IFFALSE 50812
// btype = b_lab ;
50804: LD_ADDR_VAR 0 1
50808: PUSH
50809: LD_INT 6
50811: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50812: LD_VAR 0 6
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: LIST
50830: IN
50831: NOT
50832: PUSH
50833: LD_VAR 0 1
50837: PUSH
50838: LD_INT 0
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: LD_INT 3
50849: PUSH
50850: LD_INT 6
50852: PUSH
50853: LD_INT 36
50855: PUSH
50856: LD_INT 4
50858: PUSH
50859: LD_INT 5
50861: PUSH
50862: LD_INT 31
50864: PUSH
50865: LD_INT 32
50867: PUSH
50868: LD_INT 33
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: IN
50884: NOT
50885: PUSH
50886: LD_VAR 0 6
50890: PUSH
50891: LD_INT 1
50893: EQUAL
50894: AND
50895: OR
50896: PUSH
50897: LD_VAR 0 1
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: IN
50912: NOT
50913: PUSH
50914: LD_VAR 0 6
50918: PUSH
50919: LD_INT 2
50921: EQUAL
50922: AND
50923: OR
50924: IFFALSE 50934
// mode = 0 ;
50926: LD_ADDR_VAR 0 6
50930: PUSH
50931: LD_INT 0
50933: ST_TO_ADDR
// case mode of 0 :
50934: LD_VAR 0 6
50938: PUSH
50939: LD_INT 0
50941: DOUBLE
50942: EQUAL
50943: IFTRUE 50947
50945: GO 62400
50947: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50948: LD_ADDR_VAR 0 11
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: LD_INT 3
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: LD_INT 3
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51141: LD_ADDR_VAR 0 12
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 3
51298: NEG
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 3
51309: NEG
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51337: LD_ADDR_VAR 0 13
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: NEG
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 1
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 2
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 2
51460: NEG
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: LD_INT 3
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: NEG
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 3
51508: NEG
51509: PUSH
51510: LD_INT 3
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51536: LD_ADDR_VAR 0 14
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 2
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 2
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 1
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: NEG
51683: PUSH
51684: LD_INT 3
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 3
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51732: LD_ADDR_VAR 0 15
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 2
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: NEG
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: NEG
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 3
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 3
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51925: LD_ADDR_VAR 0 16
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 1
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 2
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 3
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: LD_INT 3
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52118: LD_ADDR_VAR 0 17
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 2
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: LD_INT 2
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: NEG
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: LD_INT 2
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52348: LD_ADDR_VAR 0 18
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: NEG
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 2
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 2
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 2
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: LD_INT 2
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: NEG
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: LD_INT 2
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52578: LD_ADDR_VAR 0 19
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52808: LD_ADDR_VAR 0 20
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 2
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: LD_INT 2
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 2
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 2
52995: NEG
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53038: LD_ADDR_VAR 0 21
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: NEG
53238: PUSH
53239: LD_INT 2
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53268: LD_ADDR_VAR 0 22
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: LD_INT 2
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: LD_INT 2
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: LD_INT 2
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: LD_INT 2
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 2
53467: NEG
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53498: LD_ADDR_VAR 0 23
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 2
53633: PUSH
53634: LD_INT 2
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: LD_INT 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: NEG
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: LD_INT 3
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 3
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 2
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53778: LD_ADDR_VAR 0 24
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 1
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 2
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 2
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: NEG
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 3
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 3
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54054: LD_ADDR_VAR 0 25
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 2
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 1
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: LD_INT 2
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 2
54241: NEG
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 3
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 3
54275: PUSH
54276: LD_INT 2
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: LD_INT 3
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: LD_INT 3
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54328: LD_ADDR_VAR 0 26
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 2
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: LD_INT 1
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: NEG
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 3
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54604: LD_ADDR_VAR 0 27
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: LD_INT 1
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: LD_INT 1
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: LD_INT 2
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 2
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 3
54837: NEG
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 3
54849: NEG
54850: PUSH
54851: LD_INT 2
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54884: LD_ADDR_VAR 0 28
54888: PUSH
54889: LD_INT 0
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: LD_INT 2
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 2
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: LD_INT 2
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: NEG
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: LD_INT 3
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 3
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55166: LD_ADDR_VAR 0 29
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 2
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 2
55356: NEG
55357: PUSH
55358: LD_INT 3
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 2
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 3
55410: NEG
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55445: LD_ADDR_VAR 0 30
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: NEG
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 2
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 2
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: LD_INT 2
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 3
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 3
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 3
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: NEG
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 3
55688: NEG
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55723: LD_ADDR_VAR 0 31
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: LD_INT 2
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: LD_INT 3
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 3
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: LD_INT 3
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 3
55966: NEG
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56001: LD_ADDR_VAR 0 32
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 3
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 3
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 2
56233: NEG
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 3
56244: NEG
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56279: LD_ADDR_VAR 0 33
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 2
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: NEG
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: LD_INT 3
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 3
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: PUSH
56503: LD_INT 3
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: LD_INT 2
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56558: LD_ADDR_VAR 0 34
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: NEG
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 2
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: LD_INT 2
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 2
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: LD_INT 2
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 2
56714: NEG
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: LD_INT 1
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 3
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 3
56772: PUSH
56773: LD_INT 2
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: LD_INT 3
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 3
56803: NEG
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56838: LD_ADDR_VAR 0 35
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 1
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 1
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 1
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56950: LD_ADDR_VAR 0 36
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: LD_INT 0
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: LD_INT 2
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57062: LD_ADDR_VAR 0 37
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57174: LD_ADDR_VAR 0 38
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 1
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: NEG
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57286: LD_ADDR_VAR 0 39
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 2
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57398: LD_ADDR_VAR 0 40
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 1
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 1
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57510: LD_ADDR_VAR 0 41
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 2
57676: NEG
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 2
57688: NEG
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 3
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: LD_INT 3
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 3
57795: NEG
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 3
57807: NEG
57808: PUSH
57809: LD_INT 2
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 3
57819: NEG
57820: PUSH
57821: LD_INT 3
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57860: LD_ADDR_VAR 0 42
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: LD_INT 2
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 2
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: LD_INT 2
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 2
58026: NEG
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: LD_INT 2
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: NEG
58051: PUSH
58052: LD_INT 3
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 3
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 3
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 2
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 3
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 3
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 3
58157: NEG
58158: PUSH
58159: LD_INT 2
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 3
58169: NEG
58170: PUSH
58171: LD_INT 3
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58210: LD_ADDR_VAR 0 43
58214: PUSH
58215: LD_INT 0
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 1
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: LD_INT 2
58295: NEG
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 2
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: NEG
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: LD_INT 3
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 3
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 2
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 3
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: LD_INT 3
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: LD_INT 3
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 2
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 3
58506: NEG
58507: PUSH
58508: LD_INT 0
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 3
58517: NEG
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58558: LD_ADDR_VAR 0 44
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 1
58627: NEG
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: LD_INT 2
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 2
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 2
58713: NEG
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 2
58724: NEG
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 2
58736: NEG
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: LD_INT 3
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 3
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: LD_INT 3
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 3
58843: NEG
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 3
58867: NEG
58868: PUSH
58869: LD_INT 3
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58908: LD_ADDR_VAR 0 45
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 0
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 2
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 2
59086: NEG
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: LD_INT 3
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: LD_INT 3
59125: NEG
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: LD_INT 2
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 3
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 3
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: LD_INT 2
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 3
59217: NEG
59218: PUSH
59219: LD_INT 3
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59258: LD_ADDR_VAR 0 46
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 1
59339: NEG
59340: PUSH
59341: LD_INT 2
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: LD_INT 2
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 2
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: NEG
59425: PUSH
59426: LD_INT 0
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 2
59435: NEG
59436: PUSH
59437: LD_INT 1
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 3
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 3
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 3
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: PUSH
59513: LD_INT 3
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: LD_INT 3
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: LD_INT 2
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: LD_INT 1
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 3
59554: NEG
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 3
59565: NEG
59566: PUSH
59567: LD_INT 1
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59606: LD_ADDR_VAR 0 47
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: LD_INT 2
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 2
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: LD_INT 1
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59757: LD_ADDR_VAR 0 48
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59904: LD_ADDR_VAR 0 49
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 1
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 2
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: LD_INT 2
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 2
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60048: LD_ADDR_VAR 0 50
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: LD_INT 0
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 1
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: LD_INT 1
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: LD_INT 0
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 2
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: LD_INT 2
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: LD_INT 2
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60192: LD_ADDR_VAR 0 51
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 1
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 1
60261: NEG
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60339: LD_ADDR_VAR 0 52
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 2
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60490: LD_ADDR_VAR 0 53
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: LD_INT 1
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: LD_INT 1
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: NEG
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: LD_INT 2
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: PUSH
60616: LD_INT 1
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: PUSH
60626: LD_INT 2
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: LD_INT 2
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: LD_INT 1
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: NEG
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: LD_INT 2
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60720: LD_ADDR_VAR 0 54
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 1
60801: NEG
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 2
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: LD_INT 2
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: LD_INT 2
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 2
60919: NEG
60920: PUSH
60921: LD_INT 2
60923: NEG
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60950: LD_ADDR_VAR 0 55
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 1
61019: NEG
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: LD_INT 2
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: LD_INT 2
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 2
61137: NEG
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 2
61149: NEG
61150: PUSH
61151: LD_INT 2
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61180: LD_ADDR_VAR 0 56
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: LD_INT 1
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: LD_INT 1
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: LD_INT 0
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 2
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 2
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 1
61325: PUSH
61326: LD_INT 2
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: LD_INT 2
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: LD_INT 1
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 2
61367: NEG
61368: PUSH
61369: LD_INT 1
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: LD_INT 2
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61410: LD_ADDR_VAR 0 57
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: LD_INT 1
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 1
61479: NEG
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: LD_INT 2
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 2
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: LD_INT 2
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 2
61597: NEG
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 2
61609: NEG
61610: PUSH
61611: LD_INT 2
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61640: LD_ADDR_VAR 0 58
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 1
61721: NEG
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: LD_INT 2
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 2
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 2
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: LD_INT 2
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: PUSH
61786: LD_INT 2
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: LD_INT 2
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 2
61816: NEG
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 2
61827: NEG
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 2
61839: NEG
61840: PUSH
61841: LD_INT 2
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61870: LD_ADDR_VAR 0 59
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 0
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: LD_INT 0
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 1
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61958: LD_ADDR_VAR 0 60
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 1
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62046: LD_ADDR_VAR 0 61
62050: PUSH
62051: LD_INT 0
62053: PUSH
62054: LD_INT 0
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: LD_INT 1
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 1
62115: NEG
62116: PUSH
62117: LD_INT 1
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62134: LD_ADDR_VAR 0 62
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: LD_INT 1
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 1
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: NEG
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 1
62203: NEG
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62222: LD_ADDR_VAR 0 63
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: NEG
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62310: LD_ADDR_VAR 0 64
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 0
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: NEG
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: NEG
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: ST_TO_ADDR
// end ; 1 :
62398: GO 68295
62400: LD_INT 1
62402: DOUBLE
62403: EQUAL
62404: IFTRUE 62408
62406: GO 65031
62408: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62409: LD_ADDR_VAR 0 11
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: LD_INT 3
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: LD_INT 3
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: LD_INT 2
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: LIST
62452: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62453: LD_ADDR_VAR 0 12
62457: PUSH
62458: LD_INT 2
62460: PUSH
62461: LD_INT 1
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 3
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 3
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: LIST
62493: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62494: LD_ADDR_VAR 0 13
62498: PUSH
62499: LD_INT 3
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: PUSH
62512: LD_INT 3
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 2
62521: PUSH
62522: LD_INT 3
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: LIST
62533: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62534: LD_ADDR_VAR 0 14
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: LD_INT 3
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: LD_INT 3
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: LIST
62574: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62575: LD_ADDR_VAR 0 15
62579: PUSH
62580: LD_INT 2
62582: NEG
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 3
62593: NEG
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 3
62604: NEG
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: LIST
62618: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62619: LD_ADDR_VAR 0 16
62623: PUSH
62624: LD_INT 2
62626: NEG
62627: PUSH
62628: LD_INT 3
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 3
62638: NEG
62639: PUSH
62640: LD_INT 2
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 3
62650: NEG
62651: PUSH
62652: LD_INT 3
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: LIST
62664: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62665: LD_ADDR_VAR 0 17
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: LD_INT 3
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 3
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: LD_INT 2
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: LIST
62708: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62709: LD_ADDR_VAR 0 18
62713: PUSH
62714: LD_INT 2
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 3
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 3
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: LIST
62749: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62750: LD_ADDR_VAR 0 19
62754: PUSH
62755: LD_INT 3
62757: PUSH
62758: LD_INT 2
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 3
62767: PUSH
62768: LD_INT 3
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: PUSH
62778: LD_INT 3
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: LIST
62789: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62790: LD_ADDR_VAR 0 20
62794: PUSH
62795: LD_INT 1
62797: PUSH
62798: LD_INT 3
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 0
62807: PUSH
62808: LD_INT 3
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 1
62817: NEG
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: LIST
62830: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62831: LD_ADDR_VAR 0 21
62835: PUSH
62836: LD_INT 2
62838: NEG
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 3
62849: NEG
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 3
62860: NEG
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: LIST
62874: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62875: LD_ADDR_VAR 0 22
62879: PUSH
62880: LD_INT 2
62882: NEG
62883: PUSH
62884: LD_INT 3
62886: NEG
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 3
62894: NEG
62895: PUSH
62896: LD_INT 2
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 3
62906: NEG
62907: PUSH
62908: LD_INT 3
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: LIST
62920: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62921: LD_ADDR_VAR 0 23
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: LD_INT 3
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 1
62939: NEG
62940: PUSH
62941: LD_INT 4
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 1
62951: PUSH
62952: LD_INT 3
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: LIST
62964: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62965: LD_ADDR_VAR 0 24
62969: PUSH
62970: LD_INT 3
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 3
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 4
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: LIST
63005: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63006: LD_ADDR_VAR 0 25
63010: PUSH
63011: LD_INT 3
63013: PUSH
63014: LD_INT 3
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 4
63023: PUSH
63024: LD_INT 3
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 3
63033: PUSH
63034: LD_INT 4
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: LIST
63045: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63046: LD_ADDR_VAR 0 26
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 3
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: LD_INT 4
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 1
63073: NEG
63074: PUSH
63075: LD_INT 3
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: LIST
63086: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63087: LD_ADDR_VAR 0 27
63091: PUSH
63092: LD_INT 3
63094: NEG
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 3
63105: NEG
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 4
63116: NEG
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: LIST
63130: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63131: LD_ADDR_VAR 0 28
63135: PUSH
63136: LD_INT 3
63138: NEG
63139: PUSH
63140: LD_INT 3
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 3
63150: NEG
63151: PUSH
63152: LD_INT 4
63154: NEG
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 4
63162: NEG
63163: PUSH
63164: LD_INT 3
63166: NEG
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: LIST
63176: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63177: LD_ADDR_VAR 0 29
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: LD_INT 3
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: LD_INT 3
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: LD_INT 2
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: LD_INT 4
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: LD_INT 4
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: LD_INT 3
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: LD_INT 5
63256: NEG
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: LD_INT 5
63267: NEG
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: LD_INT 4
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: LD_INT 6
63290: NEG
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: LD_INT 6
63301: NEG
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: LD_INT 5
63312: NEG
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63332: LD_ADDR_VAR 0 30
63336: PUSH
63337: LD_INT 2
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 3
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 3
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 3
63370: PUSH
63371: LD_INT 1
63373: NEG
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 4
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 4
63391: PUSH
63392: LD_INT 1
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 4
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 5
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 5
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 5
63432: PUSH
63433: LD_INT 1
63435: NEG
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 6
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 6
63453: PUSH
63454: LD_INT 1
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63475: LD_ADDR_VAR 0 31
63479: PUSH
63480: LD_INT 3
63482: PUSH
63483: LD_INT 2
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 3
63492: PUSH
63493: LD_INT 3
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 2
63502: PUSH
63503: LD_INT 3
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 4
63512: PUSH
63513: LD_INT 3
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 4
63522: PUSH
63523: LD_INT 4
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 3
63532: PUSH
63533: LD_INT 4
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 5
63542: PUSH
63543: LD_INT 4
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 5
63552: PUSH
63553: LD_INT 5
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 4
63562: PUSH
63563: LD_INT 5
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 6
63572: PUSH
63573: LD_INT 5
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 6
63582: PUSH
63583: LD_INT 6
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 5
63592: PUSH
63593: LD_INT 6
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63614: LD_ADDR_VAR 0 32
63618: PUSH
63619: LD_INT 1
63621: PUSH
63622: LD_INT 3
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: LD_INT 3
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: PUSH
63643: LD_INT 2
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: LD_INT 4
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 0
63662: PUSH
63663: LD_INT 4
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: NEG
63673: PUSH
63674: LD_INT 3
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: LD_INT 5
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: LD_INT 5
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: LD_INT 4
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: LD_INT 6
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: LD_INT 6
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: LD_INT 5
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63757: LD_ADDR_VAR 0 33
63761: PUSH
63762: LD_INT 2
63764: NEG
63765: PUSH
63766: LD_INT 1
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 3
63775: NEG
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 3
63786: NEG
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 3
63798: NEG
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 4
63809: NEG
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 4
63820: NEG
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 4
63832: NEG
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 5
63843: NEG
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 5
63854: NEG
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 5
63866: NEG
63867: PUSH
63868: LD_INT 1
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 6
63877: NEG
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 6
63888: NEG
63889: PUSH
63890: LD_INT 1
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63912: LD_ADDR_VAR 0 34
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: LD_INT 3
63923: NEG
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 3
63931: NEG
63932: PUSH
63933: LD_INT 2
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 3
63943: NEG
63944: PUSH
63945: LD_INT 3
63947: NEG
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 3
63955: NEG
63956: PUSH
63957: LD_INT 4
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 4
63967: NEG
63968: PUSH
63969: LD_INT 3
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 4
63979: NEG
63980: PUSH
63981: LD_INT 4
63983: NEG
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 4
63991: NEG
63992: PUSH
63993: LD_INT 5
63995: NEG
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 5
64003: NEG
64004: PUSH
64005: LD_INT 4
64007: NEG
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 5
64015: NEG
64016: PUSH
64017: LD_INT 5
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 5
64027: NEG
64028: PUSH
64029: LD_INT 6
64031: NEG
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 6
64039: NEG
64040: PUSH
64041: LD_INT 5
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 6
64051: NEG
64052: PUSH
64053: LD_INT 6
64055: NEG
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64075: LD_ADDR_VAR 0 41
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: LD_INT 2
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: LD_INT 3
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: LIST
64118: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64119: LD_ADDR_VAR 0 42
64123: PUSH
64124: LD_INT 2
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 2
64136: PUSH
64137: LD_INT 1
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 3
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: LIST
64159: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64160: LD_ADDR_VAR 0 43
64164: PUSH
64165: LD_INT 2
64167: PUSH
64168: LD_INT 2
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 3
64177: PUSH
64178: LD_INT 2
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 2
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: LIST
64199: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64200: LD_ADDR_VAR 0 44
64204: PUSH
64205: LD_INT 0
64207: PUSH
64208: LD_INT 2
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 1
64217: PUSH
64218: LD_INT 3
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: LD_INT 2
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: LIST
64240: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64241: LD_ADDR_VAR 0 45
64245: PUSH
64246: LD_INT 2
64248: NEG
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 2
64259: NEG
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 3
64270: NEG
64271: PUSH
64272: LD_INT 1
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: LIST
64284: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64285: LD_ADDR_VAR 0 46
64289: PUSH
64290: LD_INT 2
64292: NEG
64293: PUSH
64294: LD_INT 2
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 2
64304: NEG
64305: PUSH
64306: LD_INT 3
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 3
64316: NEG
64317: PUSH
64318: LD_INT 2
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: LIST
64330: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64331: LD_ADDR_VAR 0 47
64335: PUSH
64336: LD_INT 2
64338: NEG
64339: PUSH
64340: LD_INT 3
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 1
64350: NEG
64351: PUSH
64352: LD_INT 3
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64364: LD_ADDR_VAR 0 48
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: LD_INT 2
64374: NEG
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 2
64382: PUSH
64383: LD_INT 1
64385: NEG
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64395: LD_ADDR_VAR 0 49
64399: PUSH
64400: LD_INT 3
64402: PUSH
64403: LD_INT 1
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 3
64412: PUSH
64413: LD_INT 2
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64424: LD_ADDR_VAR 0 50
64428: PUSH
64429: LD_INT 2
64431: PUSH
64432: LD_INT 3
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: PUSH
64442: LD_INT 3
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64453: LD_ADDR_VAR 0 51
64457: PUSH
64458: LD_INT 1
64460: NEG
64461: PUSH
64462: LD_INT 2
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 2
64471: NEG
64472: PUSH
64473: LD_INT 1
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64484: LD_ADDR_VAR 0 52
64488: PUSH
64489: LD_INT 3
64491: NEG
64492: PUSH
64493: LD_INT 1
64495: NEG
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 3
64503: NEG
64504: PUSH
64505: LD_INT 2
64507: NEG
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64517: LD_ADDR_VAR 0 53
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: LD_INT 3
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: LD_INT 3
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: LD_INT 2
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: LIST
64560: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64561: LD_ADDR_VAR 0 54
64565: PUSH
64566: LD_INT 2
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 3
64579: PUSH
64580: LD_INT 0
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 3
64589: PUSH
64590: LD_INT 1
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: LIST
64601: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64602: LD_ADDR_VAR 0 55
64606: PUSH
64607: LD_INT 3
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 3
64619: PUSH
64620: LD_INT 3
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 2
64629: PUSH
64630: LD_INT 3
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: LIST
64641: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64642: LD_ADDR_VAR 0 56
64646: PUSH
64647: LD_INT 1
64649: PUSH
64650: LD_INT 3
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: LD_INT 3
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: NEG
64670: PUSH
64671: LD_INT 2
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: LIST
64682: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64683: LD_ADDR_VAR 0 57
64687: PUSH
64688: LD_INT 2
64690: NEG
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 3
64701: NEG
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 3
64712: NEG
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64727: LD_ADDR_VAR 0 58
64731: PUSH
64732: LD_INT 2
64734: NEG
64735: PUSH
64736: LD_INT 3
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 3
64746: NEG
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 3
64758: NEG
64759: PUSH
64760: LD_INT 3
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: LIST
64772: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64773: LD_ADDR_VAR 0 59
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: LD_INT 2
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 2
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 1
64803: PUSH
64804: LD_INT 1
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: LIST
64816: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64817: LD_ADDR_VAR 0 60
64821: PUSH
64822: LD_INT 1
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 2
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 2
64845: PUSH
64846: LD_INT 1
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: LIST
64857: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64858: LD_ADDR_VAR 0 61
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 2
64875: PUSH
64876: LD_INT 2
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: LD_INT 2
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: LIST
64897: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64898: LD_ADDR_VAR 0 62
64902: PUSH
64903: LD_INT 1
64905: PUSH
64906: LD_INT 2
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 0
64915: PUSH
64916: LD_INT 2
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 1
64925: NEG
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: LIST
64938: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64939: LD_ADDR_VAR 0 63
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: LD_INT 1
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 2
64957: NEG
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 2
64968: NEG
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: LIST
64982: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64983: LD_ADDR_VAR 0 64
64987: PUSH
64988: LD_INT 1
64990: NEG
64991: PUSH
64992: LD_INT 2
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 2
65002: NEG
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 2
65014: NEG
65015: PUSH
65016: LD_INT 2
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: LIST
65028: ST_TO_ADDR
// end ; 2 :
65029: GO 68295
65031: LD_INT 2
65033: DOUBLE
65034: EQUAL
65035: IFTRUE 65039
65037: GO 68294
65039: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65040: LD_ADDR_VAR 0 29
65044: PUSH
65045: LD_INT 4
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 4
65057: PUSH
65058: LD_INT 1
65060: NEG
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 5
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 5
65078: PUSH
65079: LD_INT 1
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 4
65088: PUSH
65089: LD_INT 1
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 3
65098: PUSH
65099: LD_INT 0
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 3
65108: PUSH
65109: LD_INT 1
65111: NEG
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 3
65119: PUSH
65120: LD_INT 2
65122: NEG
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 5
65130: PUSH
65131: LD_INT 2
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 3
65140: PUSH
65141: LD_INT 3
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 3
65150: PUSH
65151: LD_INT 2
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 4
65160: PUSH
65161: LD_INT 3
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 4
65170: PUSH
65171: LD_INT 4
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 3
65180: PUSH
65181: LD_INT 4
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: LD_INT 3
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 2
65200: PUSH
65201: LD_INT 2
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 4
65210: PUSH
65211: LD_INT 2
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 2
65220: PUSH
65221: LD_INT 4
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 4
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: LD_INT 3
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: LD_INT 4
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 1
65260: PUSH
65261: LD_INT 5
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 0
65270: PUSH
65271: LD_INT 5
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 1
65280: NEG
65281: PUSH
65282: LD_INT 4
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 1
65291: NEG
65292: PUSH
65293: LD_INT 3
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 2
65302: PUSH
65303: LD_INT 5
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 2
65312: NEG
65313: PUSH
65314: LD_INT 3
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 3
65323: NEG
65324: PUSH
65325: LD_INT 0
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 3
65334: NEG
65335: PUSH
65336: LD_INT 1
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 2
65346: NEG
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 2
65357: NEG
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 3
65368: NEG
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 4
65379: NEG
65380: PUSH
65381: LD_INT 0
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 4
65390: NEG
65391: PUSH
65392: LD_INT 1
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 4
65402: NEG
65403: PUSH
65404: LD_INT 2
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 2
65414: NEG
65415: PUSH
65416: LD_INT 2
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 4
65425: NEG
65426: PUSH
65427: LD_INT 4
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 4
65437: NEG
65438: PUSH
65439: LD_INT 5
65441: NEG
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 3
65449: NEG
65450: PUSH
65451: LD_INT 4
65453: NEG
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 3
65461: NEG
65462: PUSH
65463: LD_INT 3
65465: NEG
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 4
65473: NEG
65474: PUSH
65475: LD_INT 3
65477: NEG
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 5
65485: NEG
65486: PUSH
65487: LD_INT 4
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 5
65497: NEG
65498: PUSH
65499: LD_INT 5
65501: NEG
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 3
65509: NEG
65510: PUSH
65511: LD_INT 5
65513: NEG
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 5
65521: NEG
65522: PUSH
65523: LD_INT 3
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: LIST
65559: LIST
65560: LIST
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65578: LD_ADDR_VAR 0 30
65582: PUSH
65583: LD_INT 4
65585: PUSH
65586: LD_INT 4
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 4
65595: PUSH
65596: LD_INT 3
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 5
65605: PUSH
65606: LD_INT 4
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 5
65615: PUSH
65616: LD_INT 5
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 4
65625: PUSH
65626: LD_INT 5
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 3
65635: PUSH
65636: LD_INT 4
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 3
65645: PUSH
65646: LD_INT 3
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 5
65655: PUSH
65656: LD_INT 3
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 3
65665: PUSH
65666: LD_INT 5
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: LD_INT 3
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: LD_INT 2
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 1
65695: PUSH
65696: LD_INT 3
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: LD_INT 4
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 0
65715: PUSH
65716: LD_INT 4
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 1
65725: NEG
65726: PUSH
65727: LD_INT 3
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: NEG
65737: PUSH
65738: LD_INT 2
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 2
65747: PUSH
65748: LD_INT 4
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 2
65757: NEG
65758: PUSH
65759: LD_INT 2
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 4
65768: NEG
65769: PUSH
65770: LD_INT 0
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 4
65779: NEG
65780: PUSH
65781: LD_INT 1
65783: NEG
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 3
65791: NEG
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 3
65802: NEG
65803: PUSH
65804: LD_INT 1
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 4
65813: NEG
65814: PUSH
65815: LD_INT 1
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 5
65824: NEG
65825: PUSH
65826: LD_INT 0
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 5
65835: NEG
65836: PUSH
65837: LD_INT 1
65839: NEG
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 5
65847: NEG
65848: PUSH
65849: LD_INT 2
65851: NEG
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 3
65859: NEG
65860: PUSH
65861: LD_INT 2
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 3
65870: NEG
65871: PUSH
65872: LD_INT 3
65874: NEG
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 3
65882: NEG
65883: PUSH
65884: LD_INT 4
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 2
65894: NEG
65895: PUSH
65896: LD_INT 3
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 2
65906: NEG
65907: PUSH
65908: LD_INT 2
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 3
65918: NEG
65919: PUSH
65920: LD_INT 2
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 4
65930: NEG
65931: PUSH
65932: LD_INT 3
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 4
65942: NEG
65943: PUSH
65944: LD_INT 4
65946: NEG
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 2
65954: NEG
65955: PUSH
65956: LD_INT 4
65958: NEG
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 4
65966: NEG
65967: PUSH
65968: LD_INT 2
65970: NEG
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: LD_INT 4
65981: NEG
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: LD_INT 5
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 1
66000: PUSH
66001: LD_INT 4
66003: NEG
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 1
66011: PUSH
66012: LD_INT 3
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 0
66022: PUSH
66023: LD_INT 3
66025: NEG
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 1
66033: NEG
66034: PUSH
66035: LD_INT 4
66037: NEG
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: PUSH
66047: LD_INT 5
66049: NEG
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 2
66057: PUSH
66058: LD_INT 3
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 2
66068: NEG
66069: PUSH
66070: LD_INT 5
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66125: LD_ADDR_VAR 0 31
66129: PUSH
66130: LD_INT 0
66132: PUSH
66133: LD_INT 4
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: LD_INT 3
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 1
66152: PUSH
66153: LD_INT 4
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: LD_INT 5
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: LD_INT 5
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 1
66182: NEG
66183: PUSH
66184: LD_INT 4
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: NEG
66194: PUSH
66195: LD_INT 3
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 2
66204: PUSH
66205: LD_INT 5
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 2
66214: NEG
66215: PUSH
66216: LD_INT 3
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 3
66225: NEG
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 3
66236: NEG
66237: PUSH
66238: LD_INT 1
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 2
66248: NEG
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 2
66259: NEG
66260: PUSH
66261: LD_INT 1
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 3
66270: NEG
66271: PUSH
66272: LD_INT 1
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 4
66281: NEG
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 4
66292: NEG
66293: PUSH
66294: LD_INT 1
66296: NEG
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 4
66304: NEG
66305: PUSH
66306: LD_INT 2
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 2
66316: NEG
66317: PUSH
66318: LD_INT 2
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 4
66327: NEG
66328: PUSH
66329: LD_INT 4
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 4
66339: NEG
66340: PUSH
66341: LD_INT 5
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 3
66351: NEG
66352: PUSH
66353: LD_INT 4
66355: NEG
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 3
66363: NEG
66364: PUSH
66365: LD_INT 3
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 4
66375: NEG
66376: PUSH
66377: LD_INT 3
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 5
66387: NEG
66388: PUSH
66389: LD_INT 4
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 5
66399: NEG
66400: PUSH
66401: LD_INT 5
66403: NEG
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 3
66411: NEG
66412: PUSH
66413: LD_INT 5
66415: NEG
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 5
66423: NEG
66424: PUSH
66425: LD_INT 3
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 0
66435: PUSH
66436: LD_INT 3
66438: NEG
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 0
66446: PUSH
66447: LD_INT 4
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 1
66457: PUSH
66458: LD_INT 3
66460: NEG
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 1
66468: PUSH
66469: LD_INT 2
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 0
66479: PUSH
66480: LD_INT 2
66482: NEG
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: LD_INT 3
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 1
66502: NEG
66503: PUSH
66504: LD_INT 4
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 2
66514: PUSH
66515: LD_INT 2
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 2
66525: NEG
66526: PUSH
66527: LD_INT 4
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 4
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 4
66547: PUSH
66548: LD_INT 1
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: LD_INT 5
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 5
66568: PUSH
66569: LD_INT 1
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 4
66578: PUSH
66579: LD_INT 1
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 3
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 3
66598: PUSH
66599: LD_INT 1
66601: NEG
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 3
66609: PUSH
66610: LD_INT 2
66612: NEG
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 5
66620: PUSH
66621: LD_INT 2
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66675: LD_ADDR_VAR 0 32
66679: PUSH
66680: LD_INT 4
66682: NEG
66683: PUSH
66684: LD_INT 0
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 4
66693: NEG
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 3
66705: NEG
66706: PUSH
66707: LD_INT 0
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 3
66716: NEG
66717: PUSH
66718: LD_INT 1
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 4
66727: NEG
66728: PUSH
66729: LD_INT 1
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 5
66738: NEG
66739: PUSH
66740: LD_INT 0
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 5
66749: NEG
66750: PUSH
66751: LD_INT 1
66753: NEG
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 5
66761: NEG
66762: PUSH
66763: LD_INT 2
66765: NEG
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 3
66773: NEG
66774: PUSH
66775: LD_INT 2
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 3
66784: NEG
66785: PUSH
66786: LD_INT 3
66788: NEG
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 3
66796: NEG
66797: PUSH
66798: LD_INT 4
66800: NEG
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 2
66808: NEG
66809: PUSH
66810: LD_INT 3
66812: NEG
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 2
66820: NEG
66821: PUSH
66822: LD_INT 2
66824: NEG
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 3
66832: NEG
66833: PUSH
66834: LD_INT 2
66836: NEG
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 4
66844: NEG
66845: PUSH
66846: LD_INT 3
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 4
66856: NEG
66857: PUSH
66858: LD_INT 4
66860: NEG
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 2
66868: NEG
66869: PUSH
66870: LD_INT 4
66872: NEG
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 4
66880: NEG
66881: PUSH
66882: LD_INT 2
66884: NEG
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 0
66892: PUSH
66893: LD_INT 4
66895: NEG
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: LD_INT 0
66903: PUSH
66904: LD_INT 5
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 1
66914: PUSH
66915: LD_INT 4
66917: NEG
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: LD_INT 3
66928: NEG
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: LD_INT 3
66939: NEG
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 1
66947: NEG
66948: PUSH
66949: LD_INT 4
66951: NEG
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 1
66959: NEG
66960: PUSH
66961: LD_INT 5
66963: NEG
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 2
66971: PUSH
66972: LD_INT 3
66974: NEG
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 2
66982: NEG
66983: PUSH
66984: LD_INT 5
66986: NEG
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: LD_INT 1
67007: NEG
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 4
67015: PUSH
67016: LD_INT 0
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 4
67025: PUSH
67026: LD_INT 1
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 3
67035: PUSH
67036: LD_INT 1
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 2
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 2
67055: PUSH
67056: LD_INT 1
67058: NEG
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 2
67066: PUSH
67067: LD_INT 2
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 4
67077: PUSH
67078: LD_INT 2
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 4
67087: PUSH
67088: LD_INT 4
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 4
67097: PUSH
67098: LD_INT 3
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 5
67107: PUSH
67108: LD_INT 4
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 5
67117: PUSH
67118: LD_INT 5
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 4
67127: PUSH
67128: LD_INT 5
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 3
67137: PUSH
67138: LD_INT 4
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 3
67147: PUSH
67148: LD_INT 3
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 5
67157: PUSH
67158: LD_INT 3
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 3
67167: PUSH
67168: LD_INT 5
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67222: LD_ADDR_VAR 0 33
67226: PUSH
67227: LD_INT 4
67229: NEG
67230: PUSH
67231: LD_INT 4
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 4
67241: NEG
67242: PUSH
67243: LD_INT 5
67245: NEG
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 3
67253: NEG
67254: PUSH
67255: LD_INT 4
67257: NEG
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 3
67265: NEG
67266: PUSH
67267: LD_INT 3
67269: NEG
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 4
67277: NEG
67278: PUSH
67279: LD_INT 3
67281: NEG
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 5
67289: NEG
67290: PUSH
67291: LD_INT 4
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 5
67301: NEG
67302: PUSH
67303: LD_INT 5
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 3
67313: NEG
67314: PUSH
67315: LD_INT 5
67317: NEG
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 5
67325: NEG
67326: PUSH
67327: LD_INT 3
67329: NEG
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: LD_INT 3
67340: NEG
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 0
67348: PUSH
67349: LD_INT 4
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 1
67359: PUSH
67360: LD_INT 3
67362: NEG
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 1
67370: PUSH
67371: LD_INT 2
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 0
67381: PUSH
67382: LD_INT 2
67384: NEG
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 1
67392: NEG
67393: PUSH
67394: LD_INT 3
67396: NEG
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 1
67404: NEG
67405: PUSH
67406: LD_INT 4
67408: NEG
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 2
67416: PUSH
67417: LD_INT 2
67419: NEG
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 2
67427: NEG
67428: PUSH
67429: LD_INT 4
67431: NEG
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 4
67439: PUSH
67440: LD_INT 0
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 4
67449: PUSH
67450: LD_INT 1
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 5
67460: PUSH
67461: LD_INT 0
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 5
67470: PUSH
67471: LD_INT 1
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 4
67480: PUSH
67481: LD_INT 1
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 3
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 3
67500: PUSH
67501: LD_INT 1
67503: NEG
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 3
67511: PUSH
67512: LD_INT 2
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 5
67522: PUSH
67523: LD_INT 2
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 3
67532: PUSH
67533: LD_INT 3
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 3
67542: PUSH
67543: LD_INT 2
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 4
67552: PUSH
67553: LD_INT 3
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 4
67562: PUSH
67563: LD_INT 4
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 3
67572: PUSH
67573: LD_INT 4
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 2
67582: PUSH
67583: LD_INT 3
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 2
67592: PUSH
67593: LD_INT 2
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 4
67602: PUSH
67603: LD_INT 2
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 2
67612: PUSH
67613: LD_INT 4
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 0
67622: PUSH
67623: LD_INT 4
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 0
67632: PUSH
67633: LD_INT 3
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 1
67642: PUSH
67643: LD_INT 4
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 1
67652: PUSH
67653: LD_INT 5
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: LD_INT 5
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 1
67672: NEG
67673: PUSH
67674: LD_INT 4
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 1
67683: NEG
67684: PUSH
67685: LD_INT 3
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 2
67694: PUSH
67695: LD_INT 5
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 2
67704: NEG
67705: PUSH
67706: LD_INT 3
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67760: LD_ADDR_VAR 0 34
67764: PUSH
67765: LD_INT 0
67767: PUSH
67768: LD_INT 4
67770: NEG
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 0
67778: PUSH
67779: LD_INT 5
67781: NEG
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 1
67789: PUSH
67790: LD_INT 4
67792: NEG
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 1
67800: PUSH
67801: LD_INT 3
67803: NEG
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: LD_INT 3
67814: NEG
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 1
67822: NEG
67823: PUSH
67824: LD_INT 4
67826: NEG
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 1
67834: NEG
67835: PUSH
67836: LD_INT 5
67838: NEG
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 2
67846: PUSH
67847: LD_INT 3
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 2
67857: NEG
67858: PUSH
67859: LD_INT 5
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 3
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 3
67879: PUSH
67880: LD_INT 1
67882: NEG
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 4
67890: PUSH
67891: LD_INT 0
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 4
67900: PUSH
67901: LD_INT 1
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 3
67910: PUSH
67911: LD_INT 1
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 2
67920: PUSH
67921: LD_INT 0
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 2
67930: PUSH
67931: LD_INT 1
67933: NEG
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 2
67941: PUSH
67942: LD_INT 2
67944: NEG
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 4
67952: PUSH
67953: LD_INT 2
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 4
67962: PUSH
67963: LD_INT 4
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 4
67972: PUSH
67973: LD_INT 3
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 5
67982: PUSH
67983: LD_INT 4
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 5
67992: PUSH
67993: LD_INT 5
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 4
68002: PUSH
68003: LD_INT 5
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 3
68012: PUSH
68013: LD_INT 4
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 3
68022: PUSH
68023: LD_INT 3
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 5
68032: PUSH
68033: LD_INT 3
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 3
68042: PUSH
68043: LD_INT 5
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 0
68052: PUSH
68053: LD_INT 3
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 0
68062: PUSH
68063: LD_INT 2
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 1
68072: PUSH
68073: LD_INT 3
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 1
68082: PUSH
68083: LD_INT 4
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 0
68092: PUSH
68093: LD_INT 4
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 1
68102: NEG
68103: PUSH
68104: LD_INT 3
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 1
68113: NEG
68114: PUSH
68115: LD_INT 2
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 2
68124: PUSH
68125: LD_INT 4
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 2
68134: NEG
68135: PUSH
68136: LD_INT 2
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 4
68145: NEG
68146: PUSH
68147: LD_INT 0
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 4
68156: NEG
68157: PUSH
68158: LD_INT 1
68160: NEG
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 3
68168: NEG
68169: PUSH
68170: LD_INT 0
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 3
68179: NEG
68180: PUSH
68181: LD_INT 1
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 4
68190: NEG
68191: PUSH
68192: LD_INT 1
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 5
68201: NEG
68202: PUSH
68203: LD_INT 0
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 5
68212: NEG
68213: PUSH
68214: LD_INT 1
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 5
68224: NEG
68225: PUSH
68226: LD_INT 2
68228: NEG
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 3
68236: NEG
68237: PUSH
68238: LD_INT 2
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: ST_TO_ADDR
// end ; end ;
68292: GO 68295
68294: POP
// case btype of b_depot , b_warehouse :
68295: LD_VAR 0 1
68299: PUSH
68300: LD_INT 0
68302: DOUBLE
68303: EQUAL
68304: IFTRUE 68314
68306: LD_INT 1
68308: DOUBLE
68309: EQUAL
68310: IFTRUE 68314
68312: GO 68515
68314: POP
// case nation of nation_american :
68315: LD_VAR 0 5
68319: PUSH
68320: LD_INT 1
68322: DOUBLE
68323: EQUAL
68324: IFTRUE 68328
68326: GO 68384
68328: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68329: LD_ADDR_VAR 0 9
68333: PUSH
68334: LD_VAR 0 11
68338: PUSH
68339: LD_VAR 0 12
68343: PUSH
68344: LD_VAR 0 13
68348: PUSH
68349: LD_VAR 0 14
68353: PUSH
68354: LD_VAR 0 15
68358: PUSH
68359: LD_VAR 0 16
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: PUSH
68372: LD_VAR 0 4
68376: PUSH
68377: LD_INT 1
68379: PLUS
68380: ARRAY
68381: ST_TO_ADDR
68382: GO 68513
68384: LD_INT 2
68386: DOUBLE
68387: EQUAL
68388: IFTRUE 68392
68390: GO 68448
68392: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68393: LD_ADDR_VAR 0 9
68397: PUSH
68398: LD_VAR 0 17
68402: PUSH
68403: LD_VAR 0 18
68407: PUSH
68408: LD_VAR 0 19
68412: PUSH
68413: LD_VAR 0 20
68417: PUSH
68418: LD_VAR 0 21
68422: PUSH
68423: LD_VAR 0 22
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: PUSH
68436: LD_VAR 0 4
68440: PUSH
68441: LD_INT 1
68443: PLUS
68444: ARRAY
68445: ST_TO_ADDR
68446: GO 68513
68448: LD_INT 3
68450: DOUBLE
68451: EQUAL
68452: IFTRUE 68456
68454: GO 68512
68456: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68457: LD_ADDR_VAR 0 9
68461: PUSH
68462: LD_VAR 0 23
68466: PUSH
68467: LD_VAR 0 24
68471: PUSH
68472: LD_VAR 0 25
68476: PUSH
68477: LD_VAR 0 26
68481: PUSH
68482: LD_VAR 0 27
68486: PUSH
68487: LD_VAR 0 28
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: PUSH
68500: LD_VAR 0 4
68504: PUSH
68505: LD_INT 1
68507: PLUS
68508: ARRAY
68509: ST_TO_ADDR
68510: GO 68513
68512: POP
68513: GO 69068
68515: LD_INT 2
68517: DOUBLE
68518: EQUAL
68519: IFTRUE 68529
68521: LD_INT 3
68523: DOUBLE
68524: EQUAL
68525: IFTRUE 68529
68527: GO 68585
68529: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68530: LD_ADDR_VAR 0 9
68534: PUSH
68535: LD_VAR 0 29
68539: PUSH
68540: LD_VAR 0 30
68544: PUSH
68545: LD_VAR 0 31
68549: PUSH
68550: LD_VAR 0 32
68554: PUSH
68555: LD_VAR 0 33
68559: PUSH
68560: LD_VAR 0 34
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: PUSH
68573: LD_VAR 0 4
68577: PUSH
68578: LD_INT 1
68580: PLUS
68581: ARRAY
68582: ST_TO_ADDR
68583: GO 69068
68585: LD_INT 16
68587: DOUBLE
68588: EQUAL
68589: IFTRUE 68647
68591: LD_INT 17
68593: DOUBLE
68594: EQUAL
68595: IFTRUE 68647
68597: LD_INT 18
68599: DOUBLE
68600: EQUAL
68601: IFTRUE 68647
68603: LD_INT 19
68605: DOUBLE
68606: EQUAL
68607: IFTRUE 68647
68609: LD_INT 22
68611: DOUBLE
68612: EQUAL
68613: IFTRUE 68647
68615: LD_INT 20
68617: DOUBLE
68618: EQUAL
68619: IFTRUE 68647
68621: LD_INT 21
68623: DOUBLE
68624: EQUAL
68625: IFTRUE 68647
68627: LD_INT 23
68629: DOUBLE
68630: EQUAL
68631: IFTRUE 68647
68633: LD_INT 24
68635: DOUBLE
68636: EQUAL
68637: IFTRUE 68647
68639: LD_INT 25
68641: DOUBLE
68642: EQUAL
68643: IFTRUE 68647
68645: GO 68703
68647: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68648: LD_ADDR_VAR 0 9
68652: PUSH
68653: LD_VAR 0 35
68657: PUSH
68658: LD_VAR 0 36
68662: PUSH
68663: LD_VAR 0 37
68667: PUSH
68668: LD_VAR 0 38
68672: PUSH
68673: LD_VAR 0 39
68677: PUSH
68678: LD_VAR 0 40
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: PUSH
68691: LD_VAR 0 4
68695: PUSH
68696: LD_INT 1
68698: PLUS
68699: ARRAY
68700: ST_TO_ADDR
68701: GO 69068
68703: LD_INT 6
68705: DOUBLE
68706: EQUAL
68707: IFTRUE 68759
68709: LD_INT 7
68711: DOUBLE
68712: EQUAL
68713: IFTRUE 68759
68715: LD_INT 8
68717: DOUBLE
68718: EQUAL
68719: IFTRUE 68759
68721: LD_INT 13
68723: DOUBLE
68724: EQUAL
68725: IFTRUE 68759
68727: LD_INT 12
68729: DOUBLE
68730: EQUAL
68731: IFTRUE 68759
68733: LD_INT 15
68735: DOUBLE
68736: EQUAL
68737: IFTRUE 68759
68739: LD_INT 11
68741: DOUBLE
68742: EQUAL
68743: IFTRUE 68759
68745: LD_INT 14
68747: DOUBLE
68748: EQUAL
68749: IFTRUE 68759
68751: LD_INT 10
68753: DOUBLE
68754: EQUAL
68755: IFTRUE 68759
68757: GO 68815
68759: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68760: LD_ADDR_VAR 0 9
68764: PUSH
68765: LD_VAR 0 41
68769: PUSH
68770: LD_VAR 0 42
68774: PUSH
68775: LD_VAR 0 43
68779: PUSH
68780: LD_VAR 0 44
68784: PUSH
68785: LD_VAR 0 45
68789: PUSH
68790: LD_VAR 0 46
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: PUSH
68803: LD_VAR 0 4
68807: PUSH
68808: LD_INT 1
68810: PLUS
68811: ARRAY
68812: ST_TO_ADDR
68813: GO 69068
68815: LD_INT 36
68817: DOUBLE
68818: EQUAL
68819: IFTRUE 68823
68821: GO 68879
68823: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68824: LD_ADDR_VAR 0 9
68828: PUSH
68829: LD_VAR 0 47
68833: PUSH
68834: LD_VAR 0 48
68838: PUSH
68839: LD_VAR 0 49
68843: PUSH
68844: LD_VAR 0 50
68848: PUSH
68849: LD_VAR 0 51
68853: PUSH
68854: LD_VAR 0 52
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: PUSH
68867: LD_VAR 0 4
68871: PUSH
68872: LD_INT 1
68874: PLUS
68875: ARRAY
68876: ST_TO_ADDR
68877: GO 69068
68879: LD_INT 4
68881: DOUBLE
68882: EQUAL
68883: IFTRUE 68905
68885: LD_INT 5
68887: DOUBLE
68888: EQUAL
68889: IFTRUE 68905
68891: LD_INT 34
68893: DOUBLE
68894: EQUAL
68895: IFTRUE 68905
68897: LD_INT 37
68899: DOUBLE
68900: EQUAL
68901: IFTRUE 68905
68903: GO 68961
68905: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68906: LD_ADDR_VAR 0 9
68910: PUSH
68911: LD_VAR 0 53
68915: PUSH
68916: LD_VAR 0 54
68920: PUSH
68921: LD_VAR 0 55
68925: PUSH
68926: LD_VAR 0 56
68930: PUSH
68931: LD_VAR 0 57
68935: PUSH
68936: LD_VAR 0 58
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: PUSH
68949: LD_VAR 0 4
68953: PUSH
68954: LD_INT 1
68956: PLUS
68957: ARRAY
68958: ST_TO_ADDR
68959: GO 69068
68961: LD_INT 31
68963: DOUBLE
68964: EQUAL
68965: IFTRUE 69011
68967: LD_INT 32
68969: DOUBLE
68970: EQUAL
68971: IFTRUE 69011
68973: LD_INT 33
68975: DOUBLE
68976: EQUAL
68977: IFTRUE 69011
68979: LD_INT 27
68981: DOUBLE
68982: EQUAL
68983: IFTRUE 69011
68985: LD_INT 26
68987: DOUBLE
68988: EQUAL
68989: IFTRUE 69011
68991: LD_INT 28
68993: DOUBLE
68994: EQUAL
68995: IFTRUE 69011
68997: LD_INT 29
68999: DOUBLE
69000: EQUAL
69001: IFTRUE 69011
69003: LD_INT 30
69005: DOUBLE
69006: EQUAL
69007: IFTRUE 69011
69009: GO 69067
69011: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69012: LD_ADDR_VAR 0 9
69016: PUSH
69017: LD_VAR 0 59
69021: PUSH
69022: LD_VAR 0 60
69026: PUSH
69027: LD_VAR 0 61
69031: PUSH
69032: LD_VAR 0 62
69036: PUSH
69037: LD_VAR 0 63
69041: PUSH
69042: LD_VAR 0 64
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: PUSH
69055: LD_VAR 0 4
69059: PUSH
69060: LD_INT 1
69062: PLUS
69063: ARRAY
69064: ST_TO_ADDR
69065: GO 69068
69067: POP
// temp_list2 = [ ] ;
69068: LD_ADDR_VAR 0 10
69072: PUSH
69073: EMPTY
69074: ST_TO_ADDR
// for i in temp_list do
69075: LD_ADDR_VAR 0 8
69079: PUSH
69080: LD_VAR 0 9
69084: PUSH
69085: FOR_IN
69086: IFFALSE 69138
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69088: LD_ADDR_VAR 0 10
69092: PUSH
69093: LD_VAR 0 10
69097: PUSH
69098: LD_VAR 0 8
69102: PUSH
69103: LD_INT 1
69105: ARRAY
69106: PUSH
69107: LD_VAR 0 2
69111: PLUS
69112: PUSH
69113: LD_VAR 0 8
69117: PUSH
69118: LD_INT 2
69120: ARRAY
69121: PUSH
69122: LD_VAR 0 3
69126: PLUS
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: EMPTY
69133: LIST
69134: ADD
69135: ST_TO_ADDR
69136: GO 69085
69138: POP
69139: POP
// result = temp_list2 ;
69140: LD_ADDR_VAR 0 7
69144: PUSH
69145: LD_VAR 0 10
69149: ST_TO_ADDR
// end ;
69150: LD_VAR 0 7
69154: RET
// export function EnemyInRange ( unit , dist ) ; begin
69155: LD_INT 0
69157: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69158: LD_ADDR_VAR 0 3
69162: PUSH
69163: LD_VAR 0 1
69167: PPUSH
69168: CALL_OW 255
69172: PPUSH
69173: LD_VAR 0 1
69177: PPUSH
69178: CALL_OW 250
69182: PPUSH
69183: LD_VAR 0 1
69187: PPUSH
69188: CALL_OW 251
69192: PPUSH
69193: LD_VAR 0 2
69197: PPUSH
69198: CALL 42551 0 4
69202: PUSH
69203: LD_INT 4
69205: ARRAY
69206: ST_TO_ADDR
// end ;
69207: LD_VAR 0 3
69211: RET
// export function PlayerSeeMe ( unit ) ; begin
69212: LD_INT 0
69214: PPUSH
// result := See ( your_side , unit ) ;
69215: LD_ADDR_VAR 0 2
69219: PUSH
69220: LD_OWVAR 2
69224: PPUSH
69225: LD_VAR 0 1
69229: PPUSH
69230: CALL_OW 292
69234: ST_TO_ADDR
// end ;
69235: LD_VAR 0 2
69239: RET
// export function ReverseDir ( unit ) ; begin
69240: LD_INT 0
69242: PPUSH
// if not unit then
69243: LD_VAR 0 1
69247: NOT
69248: IFFALSE 69252
// exit ;
69250: GO 69275
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69252: LD_ADDR_VAR 0 2
69256: PUSH
69257: LD_VAR 0 1
69261: PPUSH
69262: CALL_OW 254
69266: PUSH
69267: LD_INT 3
69269: PLUS
69270: PUSH
69271: LD_INT 6
69273: MOD
69274: ST_TO_ADDR
// end ;
69275: LD_VAR 0 2
69279: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69280: LD_INT 0
69282: PPUSH
69283: PPUSH
69284: PPUSH
69285: PPUSH
69286: PPUSH
// if not hexes then
69287: LD_VAR 0 2
69291: NOT
69292: IFFALSE 69296
// exit ;
69294: GO 69444
// dist := 9999 ;
69296: LD_ADDR_VAR 0 5
69300: PUSH
69301: LD_INT 9999
69303: ST_TO_ADDR
// for i = 1 to hexes do
69304: LD_ADDR_VAR 0 4
69308: PUSH
69309: DOUBLE
69310: LD_INT 1
69312: DEC
69313: ST_TO_ADDR
69314: LD_VAR 0 2
69318: PUSH
69319: FOR_TO
69320: IFFALSE 69432
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69322: LD_VAR 0 1
69326: PPUSH
69327: LD_VAR 0 2
69331: PUSH
69332: LD_VAR 0 4
69336: ARRAY
69337: PUSH
69338: LD_INT 1
69340: ARRAY
69341: PPUSH
69342: LD_VAR 0 2
69346: PUSH
69347: LD_VAR 0 4
69351: ARRAY
69352: PUSH
69353: LD_INT 2
69355: ARRAY
69356: PPUSH
69357: CALL_OW 297
69361: PUSH
69362: LD_VAR 0 5
69366: LESS
69367: IFFALSE 69430
// begin hex := hexes [ i ] ;
69369: LD_ADDR_VAR 0 7
69373: PUSH
69374: LD_VAR 0 2
69378: PUSH
69379: LD_VAR 0 4
69383: ARRAY
69384: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69385: LD_ADDR_VAR 0 5
69389: PUSH
69390: LD_VAR 0 1
69394: PPUSH
69395: LD_VAR 0 2
69399: PUSH
69400: LD_VAR 0 4
69404: ARRAY
69405: PUSH
69406: LD_INT 1
69408: ARRAY
69409: PPUSH
69410: LD_VAR 0 2
69414: PUSH
69415: LD_VAR 0 4
69419: ARRAY
69420: PUSH
69421: LD_INT 2
69423: ARRAY
69424: PPUSH
69425: CALL_OW 297
69429: ST_TO_ADDR
// end ; end ;
69430: GO 69319
69432: POP
69433: POP
// result := hex ;
69434: LD_ADDR_VAR 0 3
69438: PUSH
69439: LD_VAR 0 7
69443: ST_TO_ADDR
// end ;
69444: LD_VAR 0 3
69448: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69449: LD_INT 0
69451: PPUSH
69452: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69453: LD_VAR 0 1
69457: NOT
69458: PUSH
69459: LD_VAR 0 1
69463: PUSH
69464: LD_INT 21
69466: PUSH
69467: LD_INT 2
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 23
69476: PUSH
69477: LD_INT 2
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PPUSH
69488: CALL_OW 69
69492: IN
69493: NOT
69494: OR
69495: IFFALSE 69499
// exit ;
69497: GO 69546
// for i = 1 to 3 do
69499: LD_ADDR_VAR 0 3
69503: PUSH
69504: DOUBLE
69505: LD_INT 1
69507: DEC
69508: ST_TO_ADDR
69509: LD_INT 3
69511: PUSH
69512: FOR_TO
69513: IFFALSE 69544
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69515: LD_VAR 0 1
69519: PPUSH
69520: CALL_OW 250
69524: PPUSH
69525: LD_VAR 0 1
69529: PPUSH
69530: CALL_OW 251
69534: PPUSH
69535: LD_INT 1
69537: PPUSH
69538: CALL_OW 453
69542: GO 69512
69544: POP
69545: POP
// end ;
69546: LD_VAR 0 2
69550: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69551: LD_INT 0
69553: PPUSH
69554: PPUSH
69555: PPUSH
69556: PPUSH
69557: PPUSH
69558: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69559: LD_VAR 0 1
69563: NOT
69564: PUSH
69565: LD_VAR 0 2
69569: NOT
69570: OR
69571: PUSH
69572: LD_VAR 0 1
69576: PPUSH
69577: CALL_OW 314
69581: OR
69582: IFFALSE 69586
// exit ;
69584: GO 70027
// x := GetX ( enemy_unit ) ;
69586: LD_ADDR_VAR 0 7
69590: PUSH
69591: LD_VAR 0 2
69595: PPUSH
69596: CALL_OW 250
69600: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69601: LD_ADDR_VAR 0 8
69605: PUSH
69606: LD_VAR 0 2
69610: PPUSH
69611: CALL_OW 251
69615: ST_TO_ADDR
// if not x or not y then
69616: LD_VAR 0 7
69620: NOT
69621: PUSH
69622: LD_VAR 0 8
69626: NOT
69627: OR
69628: IFFALSE 69632
// exit ;
69630: GO 70027
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69632: LD_ADDR_VAR 0 6
69636: PUSH
69637: LD_VAR 0 7
69641: PPUSH
69642: LD_INT 0
69644: PPUSH
69645: LD_INT 4
69647: PPUSH
69648: CALL_OW 272
69652: PUSH
69653: LD_VAR 0 8
69657: PPUSH
69658: LD_INT 0
69660: PPUSH
69661: LD_INT 4
69663: PPUSH
69664: CALL_OW 273
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_VAR 0 7
69677: PPUSH
69678: LD_INT 1
69680: PPUSH
69681: LD_INT 4
69683: PPUSH
69684: CALL_OW 272
69688: PUSH
69689: LD_VAR 0 8
69693: PPUSH
69694: LD_INT 1
69696: PPUSH
69697: LD_INT 4
69699: PPUSH
69700: CALL_OW 273
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_VAR 0 7
69713: PPUSH
69714: LD_INT 2
69716: PPUSH
69717: LD_INT 4
69719: PPUSH
69720: CALL_OW 272
69724: PUSH
69725: LD_VAR 0 8
69729: PPUSH
69730: LD_INT 2
69732: PPUSH
69733: LD_INT 4
69735: PPUSH
69736: CALL_OW 273
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_VAR 0 7
69749: PPUSH
69750: LD_INT 3
69752: PPUSH
69753: LD_INT 4
69755: PPUSH
69756: CALL_OW 272
69760: PUSH
69761: LD_VAR 0 8
69765: PPUSH
69766: LD_INT 3
69768: PPUSH
69769: LD_INT 4
69771: PPUSH
69772: CALL_OW 273
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_VAR 0 7
69785: PPUSH
69786: LD_INT 4
69788: PPUSH
69789: LD_INT 4
69791: PPUSH
69792: CALL_OW 272
69796: PUSH
69797: LD_VAR 0 8
69801: PPUSH
69802: LD_INT 4
69804: PPUSH
69805: LD_INT 4
69807: PPUSH
69808: CALL_OW 273
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_VAR 0 7
69821: PPUSH
69822: LD_INT 5
69824: PPUSH
69825: LD_INT 4
69827: PPUSH
69828: CALL_OW 272
69832: PUSH
69833: LD_VAR 0 8
69837: PPUSH
69838: LD_INT 5
69840: PPUSH
69841: LD_INT 4
69843: PPUSH
69844: CALL_OW 273
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: ST_TO_ADDR
// for i = tmp downto 1 do
69861: LD_ADDR_VAR 0 4
69865: PUSH
69866: DOUBLE
69867: LD_VAR 0 6
69871: INC
69872: ST_TO_ADDR
69873: LD_INT 1
69875: PUSH
69876: FOR_DOWNTO
69877: IFFALSE 69978
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69879: LD_VAR 0 6
69883: PUSH
69884: LD_VAR 0 4
69888: ARRAY
69889: PUSH
69890: LD_INT 1
69892: ARRAY
69893: PPUSH
69894: LD_VAR 0 6
69898: PUSH
69899: LD_VAR 0 4
69903: ARRAY
69904: PUSH
69905: LD_INT 2
69907: ARRAY
69908: PPUSH
69909: CALL_OW 488
69913: NOT
69914: PUSH
69915: LD_VAR 0 6
69919: PUSH
69920: LD_VAR 0 4
69924: ARRAY
69925: PUSH
69926: LD_INT 1
69928: ARRAY
69929: PPUSH
69930: LD_VAR 0 6
69934: PUSH
69935: LD_VAR 0 4
69939: ARRAY
69940: PUSH
69941: LD_INT 2
69943: ARRAY
69944: PPUSH
69945: CALL_OW 428
69949: PUSH
69950: LD_INT 0
69952: NONEQUAL
69953: OR
69954: IFFALSE 69976
// tmp := Delete ( tmp , i ) ;
69956: LD_ADDR_VAR 0 6
69960: PUSH
69961: LD_VAR 0 6
69965: PPUSH
69966: LD_VAR 0 4
69970: PPUSH
69971: CALL_OW 3
69975: ST_TO_ADDR
69976: GO 69876
69978: POP
69979: POP
// j := GetClosestHex ( unit , tmp ) ;
69980: LD_ADDR_VAR 0 5
69984: PUSH
69985: LD_VAR 0 1
69989: PPUSH
69990: LD_VAR 0 6
69994: PPUSH
69995: CALL 69280 0 2
69999: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70000: LD_VAR 0 1
70004: PPUSH
70005: LD_VAR 0 5
70009: PUSH
70010: LD_INT 1
70012: ARRAY
70013: PPUSH
70014: LD_VAR 0 5
70018: PUSH
70019: LD_INT 2
70021: ARRAY
70022: PPUSH
70023: CALL_OW 111
// end ;
70027: LD_VAR 0 3
70031: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70032: LD_INT 0
70034: PPUSH
70035: PPUSH
70036: PPUSH
// uc_side = 0 ;
70037: LD_ADDR_OWVAR 20
70041: PUSH
70042: LD_INT 0
70044: ST_TO_ADDR
// uc_nation = 0 ;
70045: LD_ADDR_OWVAR 21
70049: PUSH
70050: LD_INT 0
70052: ST_TO_ADDR
// InitHc_All ( ) ;
70053: CALL_OW 584
// InitVc ;
70057: CALL_OW 20
// if mastodonts then
70061: LD_VAR 0 6
70065: IFFALSE 70132
// for i = 1 to mastodonts do
70067: LD_ADDR_VAR 0 11
70071: PUSH
70072: DOUBLE
70073: LD_INT 1
70075: DEC
70076: ST_TO_ADDR
70077: LD_VAR 0 6
70081: PUSH
70082: FOR_TO
70083: IFFALSE 70130
// begin vc_chassis := 31 ;
70085: LD_ADDR_OWVAR 37
70089: PUSH
70090: LD_INT 31
70092: ST_TO_ADDR
// vc_control := control_rider ;
70093: LD_ADDR_OWVAR 38
70097: PUSH
70098: LD_INT 4
70100: ST_TO_ADDR
// animal := CreateVehicle ;
70101: LD_ADDR_VAR 0 12
70105: PUSH
70106: CALL_OW 45
70110: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70111: LD_VAR 0 12
70115: PPUSH
70116: LD_VAR 0 8
70120: PPUSH
70121: LD_INT 0
70123: PPUSH
70124: CALL 72267 0 3
// end ;
70128: GO 70082
70130: POP
70131: POP
// if horses then
70132: LD_VAR 0 5
70136: IFFALSE 70203
// for i = 1 to horses do
70138: LD_ADDR_VAR 0 11
70142: PUSH
70143: DOUBLE
70144: LD_INT 1
70146: DEC
70147: ST_TO_ADDR
70148: LD_VAR 0 5
70152: PUSH
70153: FOR_TO
70154: IFFALSE 70201
// begin hc_class := 21 ;
70156: LD_ADDR_OWVAR 28
70160: PUSH
70161: LD_INT 21
70163: ST_TO_ADDR
// hc_gallery :=  ;
70164: LD_ADDR_OWVAR 33
70168: PUSH
70169: LD_STRING 
70171: ST_TO_ADDR
// animal := CreateHuman ;
70172: LD_ADDR_VAR 0 12
70176: PUSH
70177: CALL_OW 44
70181: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70182: LD_VAR 0 12
70186: PPUSH
70187: LD_VAR 0 8
70191: PPUSH
70192: LD_INT 0
70194: PPUSH
70195: CALL 72267 0 3
// end ;
70199: GO 70153
70201: POP
70202: POP
// if birds then
70203: LD_VAR 0 1
70207: IFFALSE 70274
// for i = 1 to birds do
70209: LD_ADDR_VAR 0 11
70213: PUSH
70214: DOUBLE
70215: LD_INT 1
70217: DEC
70218: ST_TO_ADDR
70219: LD_VAR 0 1
70223: PUSH
70224: FOR_TO
70225: IFFALSE 70272
// begin hc_class = 18 ;
70227: LD_ADDR_OWVAR 28
70231: PUSH
70232: LD_INT 18
70234: ST_TO_ADDR
// hc_gallery =  ;
70235: LD_ADDR_OWVAR 33
70239: PUSH
70240: LD_STRING 
70242: ST_TO_ADDR
// animal := CreateHuman ;
70243: LD_ADDR_VAR 0 12
70247: PUSH
70248: CALL_OW 44
70252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70253: LD_VAR 0 12
70257: PPUSH
70258: LD_VAR 0 8
70262: PPUSH
70263: LD_INT 0
70265: PPUSH
70266: CALL 72267 0 3
// end ;
70270: GO 70224
70272: POP
70273: POP
// if tigers then
70274: LD_VAR 0 2
70278: IFFALSE 70362
// for i = 1 to tigers do
70280: LD_ADDR_VAR 0 11
70284: PUSH
70285: DOUBLE
70286: LD_INT 1
70288: DEC
70289: ST_TO_ADDR
70290: LD_VAR 0 2
70294: PUSH
70295: FOR_TO
70296: IFFALSE 70360
// begin hc_class = class_tiger ;
70298: LD_ADDR_OWVAR 28
70302: PUSH
70303: LD_INT 14
70305: ST_TO_ADDR
// hc_gallery =  ;
70306: LD_ADDR_OWVAR 33
70310: PUSH
70311: LD_STRING 
70313: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70314: LD_ADDR_OWVAR 35
70318: PUSH
70319: LD_INT 7
70321: NEG
70322: PPUSH
70323: LD_INT 7
70325: PPUSH
70326: CALL_OW 12
70330: ST_TO_ADDR
// animal := CreateHuman ;
70331: LD_ADDR_VAR 0 12
70335: PUSH
70336: CALL_OW 44
70340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70341: LD_VAR 0 12
70345: PPUSH
70346: LD_VAR 0 8
70350: PPUSH
70351: LD_INT 0
70353: PPUSH
70354: CALL 72267 0 3
// end ;
70358: GO 70295
70360: POP
70361: POP
// if apemans then
70362: LD_VAR 0 3
70366: IFFALSE 70489
// for i = 1 to apemans do
70368: LD_ADDR_VAR 0 11
70372: PUSH
70373: DOUBLE
70374: LD_INT 1
70376: DEC
70377: ST_TO_ADDR
70378: LD_VAR 0 3
70382: PUSH
70383: FOR_TO
70384: IFFALSE 70487
// begin hc_class = class_apeman ;
70386: LD_ADDR_OWVAR 28
70390: PUSH
70391: LD_INT 12
70393: ST_TO_ADDR
// hc_gallery =  ;
70394: LD_ADDR_OWVAR 33
70398: PUSH
70399: LD_STRING 
70401: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70402: LD_ADDR_OWVAR 35
70406: PUSH
70407: LD_INT 2
70409: NEG
70410: PPUSH
70411: LD_INT 2
70413: PPUSH
70414: CALL_OW 12
70418: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70419: LD_ADDR_OWVAR 31
70423: PUSH
70424: LD_INT 1
70426: PPUSH
70427: LD_INT 3
70429: PPUSH
70430: CALL_OW 12
70434: PUSH
70435: LD_INT 1
70437: PPUSH
70438: LD_INT 3
70440: PPUSH
70441: CALL_OW 12
70445: PUSH
70446: LD_INT 0
70448: PUSH
70449: LD_INT 0
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: ST_TO_ADDR
// animal := CreateHuman ;
70458: LD_ADDR_VAR 0 12
70462: PUSH
70463: CALL_OW 44
70467: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70468: LD_VAR 0 12
70472: PPUSH
70473: LD_VAR 0 8
70477: PPUSH
70478: LD_INT 0
70480: PPUSH
70481: CALL 72267 0 3
// end ;
70485: GO 70383
70487: POP
70488: POP
// if enchidnas then
70489: LD_VAR 0 4
70493: IFFALSE 70560
// for i = 1 to enchidnas do
70495: LD_ADDR_VAR 0 11
70499: PUSH
70500: DOUBLE
70501: LD_INT 1
70503: DEC
70504: ST_TO_ADDR
70505: LD_VAR 0 4
70509: PUSH
70510: FOR_TO
70511: IFFALSE 70558
// begin hc_class = 13 ;
70513: LD_ADDR_OWVAR 28
70517: PUSH
70518: LD_INT 13
70520: ST_TO_ADDR
// hc_gallery =  ;
70521: LD_ADDR_OWVAR 33
70525: PUSH
70526: LD_STRING 
70528: ST_TO_ADDR
// animal := CreateHuman ;
70529: LD_ADDR_VAR 0 12
70533: PUSH
70534: CALL_OW 44
70538: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70539: LD_VAR 0 12
70543: PPUSH
70544: LD_VAR 0 8
70548: PPUSH
70549: LD_INT 0
70551: PPUSH
70552: CALL 72267 0 3
// end ;
70556: GO 70510
70558: POP
70559: POP
// if fishes then
70560: LD_VAR 0 7
70564: IFFALSE 70631
// for i = 1 to fishes do
70566: LD_ADDR_VAR 0 11
70570: PUSH
70571: DOUBLE
70572: LD_INT 1
70574: DEC
70575: ST_TO_ADDR
70576: LD_VAR 0 7
70580: PUSH
70581: FOR_TO
70582: IFFALSE 70629
// begin hc_class = 20 ;
70584: LD_ADDR_OWVAR 28
70588: PUSH
70589: LD_INT 20
70591: ST_TO_ADDR
// hc_gallery =  ;
70592: LD_ADDR_OWVAR 33
70596: PUSH
70597: LD_STRING 
70599: ST_TO_ADDR
// animal := CreateHuman ;
70600: LD_ADDR_VAR 0 12
70604: PUSH
70605: CALL_OW 44
70609: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70610: LD_VAR 0 12
70614: PPUSH
70615: LD_VAR 0 9
70619: PPUSH
70620: LD_INT 0
70622: PPUSH
70623: CALL 72267 0 3
// end ;
70627: GO 70581
70629: POP
70630: POP
// end ;
70631: LD_VAR 0 10
70635: RET
// export function WantHeal ( sci , unit ) ; begin
70636: LD_INT 0
70638: PPUSH
// if GetTaskList ( sci ) > 0 then
70639: LD_VAR 0 1
70643: PPUSH
70644: CALL_OW 437
70648: PUSH
70649: LD_INT 0
70651: GREATER
70652: IFFALSE 70722
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70654: LD_VAR 0 1
70658: PPUSH
70659: CALL_OW 437
70663: PUSH
70664: LD_INT 1
70666: ARRAY
70667: PUSH
70668: LD_INT 1
70670: ARRAY
70671: PUSH
70672: LD_STRING l
70674: EQUAL
70675: PUSH
70676: LD_VAR 0 1
70680: PPUSH
70681: CALL_OW 437
70685: PUSH
70686: LD_INT 1
70688: ARRAY
70689: PUSH
70690: LD_INT 4
70692: ARRAY
70693: PUSH
70694: LD_VAR 0 2
70698: EQUAL
70699: AND
70700: IFFALSE 70712
// result := true else
70702: LD_ADDR_VAR 0 3
70706: PUSH
70707: LD_INT 1
70709: ST_TO_ADDR
70710: GO 70720
// result := false ;
70712: LD_ADDR_VAR 0 3
70716: PUSH
70717: LD_INT 0
70719: ST_TO_ADDR
// end else
70720: GO 70730
// result := false ;
70722: LD_ADDR_VAR 0 3
70726: PUSH
70727: LD_INT 0
70729: ST_TO_ADDR
// end ;
70730: LD_VAR 0 3
70734: RET
// export function HealTarget ( sci ) ; begin
70735: LD_INT 0
70737: PPUSH
// if not sci then
70738: LD_VAR 0 1
70742: NOT
70743: IFFALSE 70747
// exit ;
70745: GO 70812
// result := 0 ;
70747: LD_ADDR_VAR 0 2
70751: PUSH
70752: LD_INT 0
70754: ST_TO_ADDR
// if GetTaskList ( sci ) then
70755: LD_VAR 0 1
70759: PPUSH
70760: CALL_OW 437
70764: IFFALSE 70812
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70766: LD_VAR 0 1
70770: PPUSH
70771: CALL_OW 437
70775: PUSH
70776: LD_INT 1
70778: ARRAY
70779: PUSH
70780: LD_INT 1
70782: ARRAY
70783: PUSH
70784: LD_STRING l
70786: EQUAL
70787: IFFALSE 70812
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70789: LD_ADDR_VAR 0 2
70793: PUSH
70794: LD_VAR 0 1
70798: PPUSH
70799: CALL_OW 437
70803: PUSH
70804: LD_INT 1
70806: ARRAY
70807: PUSH
70808: LD_INT 4
70810: ARRAY
70811: ST_TO_ADDR
// end ;
70812: LD_VAR 0 2
70816: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70817: LD_INT 0
70819: PPUSH
70820: PPUSH
70821: PPUSH
70822: PPUSH
// if not base_units then
70823: LD_VAR 0 1
70827: NOT
70828: IFFALSE 70832
// exit ;
70830: GO 70919
// result := false ;
70832: LD_ADDR_VAR 0 2
70836: PUSH
70837: LD_INT 0
70839: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70840: LD_ADDR_VAR 0 5
70844: PUSH
70845: LD_VAR 0 1
70849: PPUSH
70850: LD_INT 21
70852: PUSH
70853: LD_INT 3
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PPUSH
70860: CALL_OW 72
70864: ST_TO_ADDR
// if not tmp then
70865: LD_VAR 0 5
70869: NOT
70870: IFFALSE 70874
// exit ;
70872: GO 70919
// for i in tmp do
70874: LD_ADDR_VAR 0 3
70878: PUSH
70879: LD_VAR 0 5
70883: PUSH
70884: FOR_IN
70885: IFFALSE 70917
// begin result := EnemyInRange ( i , 22 ) ;
70887: LD_ADDR_VAR 0 2
70891: PUSH
70892: LD_VAR 0 3
70896: PPUSH
70897: LD_INT 22
70899: PPUSH
70900: CALL 69155 0 2
70904: ST_TO_ADDR
// if result then
70905: LD_VAR 0 2
70909: IFFALSE 70915
// exit ;
70911: POP
70912: POP
70913: GO 70919
// end ;
70915: GO 70884
70917: POP
70918: POP
// end ;
70919: LD_VAR 0 2
70923: RET
// export function FilterByTag ( units , tag ) ; begin
70924: LD_INT 0
70926: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70927: LD_ADDR_VAR 0 3
70931: PUSH
70932: LD_VAR 0 1
70936: PPUSH
70937: LD_INT 120
70939: PUSH
70940: LD_VAR 0 2
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PPUSH
70949: CALL_OW 72
70953: ST_TO_ADDR
// end ;
70954: LD_VAR 0 3
70958: RET
// export function IsDriver ( un ) ; begin
70959: LD_INT 0
70961: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70962: LD_ADDR_VAR 0 2
70966: PUSH
70967: LD_VAR 0 1
70971: PUSH
70972: LD_INT 55
70974: PUSH
70975: EMPTY
70976: LIST
70977: PPUSH
70978: CALL_OW 69
70982: IN
70983: ST_TO_ADDR
// end ;
70984: LD_VAR 0 2
70988: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70989: LD_INT 0
70991: PPUSH
70992: PPUSH
// list := [ ] ;
70993: LD_ADDR_VAR 0 5
70997: PUSH
70998: EMPTY
70999: ST_TO_ADDR
// case d of 0 :
71000: LD_VAR 0 3
71004: PUSH
71005: LD_INT 0
71007: DOUBLE
71008: EQUAL
71009: IFTRUE 71013
71011: GO 71146
71013: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71014: LD_ADDR_VAR 0 5
71018: PUSH
71019: LD_VAR 0 1
71023: PUSH
71024: LD_INT 4
71026: MINUS
71027: PUSH
71028: LD_VAR 0 2
71032: PUSH
71033: LD_INT 4
71035: MINUS
71036: PUSH
71037: LD_INT 2
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: LIST
71044: PUSH
71045: LD_VAR 0 1
71049: PUSH
71050: LD_INT 3
71052: MINUS
71053: PUSH
71054: LD_VAR 0 2
71058: PUSH
71059: LD_INT 1
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: LIST
71066: PUSH
71067: LD_VAR 0 1
71071: PUSH
71072: LD_INT 4
71074: PLUS
71075: PUSH
71076: LD_VAR 0 2
71080: PUSH
71081: LD_INT 4
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: LIST
71088: PUSH
71089: LD_VAR 0 1
71093: PUSH
71094: LD_INT 3
71096: PLUS
71097: PUSH
71098: LD_VAR 0 2
71102: PUSH
71103: LD_INT 3
71105: PLUS
71106: PUSH
71107: LD_INT 5
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: LIST
71114: PUSH
71115: LD_VAR 0 1
71119: PUSH
71120: LD_VAR 0 2
71124: PUSH
71125: LD_INT 4
71127: PLUS
71128: PUSH
71129: LD_INT 0
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: LIST
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: LIST
71143: ST_TO_ADDR
// end ; 1 :
71144: GO 71844
71146: LD_INT 1
71148: DOUBLE
71149: EQUAL
71150: IFTRUE 71154
71152: GO 71287
71154: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71155: LD_ADDR_VAR 0 5
71159: PUSH
71160: LD_VAR 0 1
71164: PUSH
71165: LD_VAR 0 2
71169: PUSH
71170: LD_INT 4
71172: MINUS
71173: PUSH
71174: LD_INT 3
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: LIST
71181: PUSH
71182: LD_VAR 0 1
71186: PUSH
71187: LD_INT 3
71189: MINUS
71190: PUSH
71191: LD_VAR 0 2
71195: PUSH
71196: LD_INT 3
71198: MINUS
71199: PUSH
71200: LD_INT 2
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: LIST
71207: PUSH
71208: LD_VAR 0 1
71212: PUSH
71213: LD_INT 4
71215: MINUS
71216: PUSH
71217: LD_VAR 0 2
71221: PUSH
71222: LD_INT 1
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: LIST
71229: PUSH
71230: LD_VAR 0 1
71234: PUSH
71235: LD_VAR 0 2
71239: PUSH
71240: LD_INT 3
71242: PLUS
71243: PUSH
71244: LD_INT 0
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: LIST
71251: PUSH
71252: LD_VAR 0 1
71256: PUSH
71257: LD_INT 4
71259: PLUS
71260: PUSH
71261: LD_VAR 0 2
71265: PUSH
71266: LD_INT 4
71268: PLUS
71269: PUSH
71270: LD_INT 5
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: LIST
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: ST_TO_ADDR
// end ; 2 :
71285: GO 71844
71287: LD_INT 2
71289: DOUBLE
71290: EQUAL
71291: IFTRUE 71295
71293: GO 71424
71295: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71296: LD_ADDR_VAR 0 5
71300: PUSH
71301: LD_VAR 0 1
71305: PUSH
71306: LD_VAR 0 2
71310: PUSH
71311: LD_INT 3
71313: MINUS
71314: PUSH
71315: LD_INT 3
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: LIST
71322: PUSH
71323: LD_VAR 0 1
71327: PUSH
71328: LD_INT 4
71330: PLUS
71331: PUSH
71332: LD_VAR 0 2
71336: PUSH
71337: LD_INT 4
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: LIST
71344: PUSH
71345: LD_VAR 0 1
71349: PUSH
71350: LD_VAR 0 2
71354: PUSH
71355: LD_INT 4
71357: PLUS
71358: PUSH
71359: LD_INT 0
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: LIST
71366: PUSH
71367: LD_VAR 0 1
71371: PUSH
71372: LD_INT 3
71374: MINUS
71375: PUSH
71376: LD_VAR 0 2
71380: PUSH
71381: LD_INT 1
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: LIST
71388: PUSH
71389: LD_VAR 0 1
71393: PUSH
71394: LD_INT 4
71396: MINUS
71397: PUSH
71398: LD_VAR 0 2
71402: PUSH
71403: LD_INT 4
71405: MINUS
71406: PUSH
71407: LD_INT 2
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: LIST
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: ST_TO_ADDR
// end ; 3 :
71422: GO 71844
71424: LD_INT 3
71426: DOUBLE
71427: EQUAL
71428: IFTRUE 71432
71430: GO 71565
71432: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71433: LD_ADDR_VAR 0 5
71437: PUSH
71438: LD_VAR 0 1
71442: PUSH
71443: LD_INT 3
71445: PLUS
71446: PUSH
71447: LD_VAR 0 2
71451: PUSH
71452: LD_INT 4
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: LIST
71459: PUSH
71460: LD_VAR 0 1
71464: PUSH
71465: LD_INT 4
71467: PLUS
71468: PUSH
71469: LD_VAR 0 2
71473: PUSH
71474: LD_INT 4
71476: PLUS
71477: PUSH
71478: LD_INT 5
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: LIST
71485: PUSH
71486: LD_VAR 0 1
71490: PUSH
71491: LD_INT 4
71493: MINUS
71494: PUSH
71495: LD_VAR 0 2
71499: PUSH
71500: LD_INT 1
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: LIST
71507: PUSH
71508: LD_VAR 0 1
71512: PUSH
71513: LD_VAR 0 2
71517: PUSH
71518: LD_INT 4
71520: MINUS
71521: PUSH
71522: LD_INT 3
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: LIST
71529: PUSH
71530: LD_VAR 0 1
71534: PUSH
71535: LD_INT 3
71537: MINUS
71538: PUSH
71539: LD_VAR 0 2
71543: PUSH
71544: LD_INT 3
71546: MINUS
71547: PUSH
71548: LD_INT 2
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: LIST
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: ST_TO_ADDR
// end ; 4 :
71563: GO 71844
71565: LD_INT 4
71567: DOUBLE
71568: EQUAL
71569: IFTRUE 71573
71571: GO 71706
71573: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71574: LD_ADDR_VAR 0 5
71578: PUSH
71579: LD_VAR 0 1
71583: PUSH
71584: LD_VAR 0 2
71588: PUSH
71589: LD_INT 4
71591: PLUS
71592: PUSH
71593: LD_INT 0
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: LIST
71600: PUSH
71601: LD_VAR 0 1
71605: PUSH
71606: LD_INT 3
71608: PLUS
71609: PUSH
71610: LD_VAR 0 2
71614: PUSH
71615: LD_INT 3
71617: PLUS
71618: PUSH
71619: LD_INT 5
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: LIST
71626: PUSH
71627: LD_VAR 0 1
71631: PUSH
71632: LD_INT 4
71634: PLUS
71635: PUSH
71636: LD_VAR 0 2
71640: PUSH
71641: LD_INT 4
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: LIST
71648: PUSH
71649: LD_VAR 0 1
71653: PUSH
71654: LD_VAR 0 2
71658: PUSH
71659: LD_INT 3
71661: MINUS
71662: PUSH
71663: LD_INT 3
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: LIST
71670: PUSH
71671: LD_VAR 0 1
71675: PUSH
71676: LD_INT 4
71678: MINUS
71679: PUSH
71680: LD_VAR 0 2
71684: PUSH
71685: LD_INT 4
71687: MINUS
71688: PUSH
71689: LD_INT 2
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: LIST
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: ST_TO_ADDR
// end ; 5 :
71704: GO 71844
71706: LD_INT 5
71708: DOUBLE
71709: EQUAL
71710: IFTRUE 71714
71712: GO 71843
71714: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71715: LD_ADDR_VAR 0 5
71719: PUSH
71720: LD_VAR 0 1
71724: PUSH
71725: LD_INT 4
71727: MINUS
71728: PUSH
71729: LD_VAR 0 2
71733: PUSH
71734: LD_INT 1
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: LIST
71741: PUSH
71742: LD_VAR 0 1
71746: PUSH
71747: LD_VAR 0 2
71751: PUSH
71752: LD_INT 4
71754: MINUS
71755: PUSH
71756: LD_INT 3
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: LIST
71763: PUSH
71764: LD_VAR 0 1
71768: PUSH
71769: LD_INT 4
71771: PLUS
71772: PUSH
71773: LD_VAR 0 2
71777: PUSH
71778: LD_INT 4
71780: PLUS
71781: PUSH
71782: LD_INT 5
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: LIST
71789: PUSH
71790: LD_VAR 0 1
71794: PUSH
71795: LD_INT 3
71797: PLUS
71798: PUSH
71799: LD_VAR 0 2
71803: PUSH
71804: LD_INT 4
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: LIST
71811: PUSH
71812: LD_VAR 0 1
71816: PUSH
71817: LD_VAR 0 2
71821: PUSH
71822: LD_INT 3
71824: PLUS
71825: PUSH
71826: LD_INT 0
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: LIST
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: ST_TO_ADDR
// end ; end ;
71841: GO 71844
71843: POP
// result := list ;
71844: LD_ADDR_VAR 0 4
71848: PUSH
71849: LD_VAR 0 5
71853: ST_TO_ADDR
// end ;
71854: LD_VAR 0 4
71858: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71859: LD_INT 0
71861: PPUSH
71862: PPUSH
71863: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71864: LD_VAR 0 1
71868: NOT
71869: PUSH
71870: LD_VAR 0 2
71874: PUSH
71875: LD_INT 1
71877: PUSH
71878: LD_INT 2
71880: PUSH
71881: LD_INT 3
71883: PUSH
71884: LD_INT 4
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: IN
71893: NOT
71894: OR
71895: IFFALSE 71899
// exit ;
71897: GO 71991
// tmp := [ ] ;
71899: LD_ADDR_VAR 0 5
71903: PUSH
71904: EMPTY
71905: ST_TO_ADDR
// for i in units do
71906: LD_ADDR_VAR 0 4
71910: PUSH
71911: LD_VAR 0 1
71915: PUSH
71916: FOR_IN
71917: IFFALSE 71960
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71919: LD_ADDR_VAR 0 5
71923: PUSH
71924: LD_VAR 0 5
71928: PPUSH
71929: LD_VAR 0 5
71933: PUSH
71934: LD_INT 1
71936: PLUS
71937: PPUSH
71938: LD_VAR 0 4
71942: PPUSH
71943: LD_VAR 0 2
71947: PPUSH
71948: CALL_OW 259
71952: PPUSH
71953: CALL_OW 2
71957: ST_TO_ADDR
71958: GO 71916
71960: POP
71961: POP
// if not tmp then
71962: LD_VAR 0 5
71966: NOT
71967: IFFALSE 71971
// exit ;
71969: GO 71991
// result := SortListByListDesc ( units , tmp ) ;
71971: LD_ADDR_VAR 0 3
71975: PUSH
71976: LD_VAR 0 1
71980: PPUSH
71981: LD_VAR 0 5
71985: PPUSH
71986: CALL_OW 77
71990: ST_TO_ADDR
// end ;
71991: LD_VAR 0 3
71995: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71996: LD_INT 0
71998: PPUSH
71999: PPUSH
72000: PPUSH
// result := false ;
72001: LD_ADDR_VAR 0 3
72005: PUSH
72006: LD_INT 0
72008: ST_TO_ADDR
// x := GetX ( building ) ;
72009: LD_ADDR_VAR 0 4
72013: PUSH
72014: LD_VAR 0 2
72018: PPUSH
72019: CALL_OW 250
72023: ST_TO_ADDR
// y := GetY ( building ) ;
72024: LD_ADDR_VAR 0 5
72028: PUSH
72029: LD_VAR 0 2
72033: PPUSH
72034: CALL_OW 251
72038: ST_TO_ADDR
// if not building or not x or not y then
72039: LD_VAR 0 2
72043: NOT
72044: PUSH
72045: LD_VAR 0 4
72049: NOT
72050: OR
72051: PUSH
72052: LD_VAR 0 5
72056: NOT
72057: OR
72058: IFFALSE 72062
// exit ;
72060: GO 72154
// if GetTaskList ( unit ) then
72062: LD_VAR 0 1
72066: PPUSH
72067: CALL_OW 437
72071: IFFALSE 72154
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72073: LD_STRING e
72075: PUSH
72076: LD_VAR 0 1
72080: PPUSH
72081: CALL_OW 437
72085: PUSH
72086: LD_INT 1
72088: ARRAY
72089: PUSH
72090: LD_INT 1
72092: ARRAY
72093: EQUAL
72094: PUSH
72095: LD_VAR 0 4
72099: PUSH
72100: LD_VAR 0 1
72104: PPUSH
72105: CALL_OW 437
72109: PUSH
72110: LD_INT 1
72112: ARRAY
72113: PUSH
72114: LD_INT 2
72116: ARRAY
72117: EQUAL
72118: AND
72119: PUSH
72120: LD_VAR 0 5
72124: PUSH
72125: LD_VAR 0 1
72129: PPUSH
72130: CALL_OW 437
72134: PUSH
72135: LD_INT 1
72137: ARRAY
72138: PUSH
72139: LD_INT 3
72141: ARRAY
72142: EQUAL
72143: AND
72144: IFFALSE 72154
// result := true end ;
72146: LD_ADDR_VAR 0 3
72150: PUSH
72151: LD_INT 1
72153: ST_TO_ADDR
// end ;
72154: LD_VAR 0 3
72158: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72159: LD_INT 0
72161: PPUSH
// result := false ;
72162: LD_ADDR_VAR 0 4
72166: PUSH
72167: LD_INT 0
72169: ST_TO_ADDR
// if GetTaskList ( unit ) then
72170: LD_VAR 0 1
72174: PPUSH
72175: CALL_OW 437
72179: IFFALSE 72262
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72181: LD_STRING M
72183: PUSH
72184: LD_VAR 0 1
72188: PPUSH
72189: CALL_OW 437
72193: PUSH
72194: LD_INT 1
72196: ARRAY
72197: PUSH
72198: LD_INT 1
72200: ARRAY
72201: EQUAL
72202: PUSH
72203: LD_VAR 0 2
72207: PUSH
72208: LD_VAR 0 1
72212: PPUSH
72213: CALL_OW 437
72217: PUSH
72218: LD_INT 1
72220: ARRAY
72221: PUSH
72222: LD_INT 2
72224: ARRAY
72225: EQUAL
72226: AND
72227: PUSH
72228: LD_VAR 0 3
72232: PUSH
72233: LD_VAR 0 1
72237: PPUSH
72238: CALL_OW 437
72242: PUSH
72243: LD_INT 1
72245: ARRAY
72246: PUSH
72247: LD_INT 3
72249: ARRAY
72250: EQUAL
72251: AND
72252: IFFALSE 72262
// result := true ;
72254: LD_ADDR_VAR 0 4
72258: PUSH
72259: LD_INT 1
72261: ST_TO_ADDR
// end ; end ;
72262: LD_VAR 0 4
72266: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72267: LD_INT 0
72269: PPUSH
72270: PPUSH
72271: PPUSH
72272: PPUSH
// if not unit or not area then
72273: LD_VAR 0 1
72277: NOT
72278: PUSH
72279: LD_VAR 0 2
72283: NOT
72284: OR
72285: IFFALSE 72289
// exit ;
72287: GO 72453
// tmp := AreaToList ( area , i ) ;
72289: LD_ADDR_VAR 0 6
72293: PUSH
72294: LD_VAR 0 2
72298: PPUSH
72299: LD_VAR 0 5
72303: PPUSH
72304: CALL_OW 517
72308: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72309: LD_ADDR_VAR 0 5
72313: PUSH
72314: DOUBLE
72315: LD_INT 1
72317: DEC
72318: ST_TO_ADDR
72319: LD_VAR 0 6
72323: PUSH
72324: LD_INT 1
72326: ARRAY
72327: PUSH
72328: FOR_TO
72329: IFFALSE 72451
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72331: LD_ADDR_VAR 0 7
72335: PUSH
72336: LD_VAR 0 6
72340: PUSH
72341: LD_INT 1
72343: ARRAY
72344: PUSH
72345: LD_VAR 0 5
72349: ARRAY
72350: PUSH
72351: LD_VAR 0 6
72355: PUSH
72356: LD_INT 2
72358: ARRAY
72359: PUSH
72360: LD_VAR 0 5
72364: ARRAY
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72370: LD_VAR 0 7
72374: PUSH
72375: LD_INT 1
72377: ARRAY
72378: PPUSH
72379: LD_VAR 0 7
72383: PUSH
72384: LD_INT 2
72386: ARRAY
72387: PPUSH
72388: CALL_OW 428
72392: PUSH
72393: LD_INT 0
72395: EQUAL
72396: IFFALSE 72449
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72398: LD_VAR 0 1
72402: PPUSH
72403: LD_VAR 0 7
72407: PUSH
72408: LD_INT 1
72410: ARRAY
72411: PPUSH
72412: LD_VAR 0 7
72416: PUSH
72417: LD_INT 2
72419: ARRAY
72420: PPUSH
72421: LD_VAR 0 3
72425: PPUSH
72426: CALL_OW 48
// result := IsPlaced ( unit ) ;
72430: LD_ADDR_VAR 0 4
72434: PUSH
72435: LD_VAR 0 1
72439: PPUSH
72440: CALL_OW 305
72444: ST_TO_ADDR
// exit ;
72445: POP
72446: POP
72447: GO 72453
// end ; end ;
72449: GO 72328
72451: POP
72452: POP
// end ;
72453: LD_VAR 0 4
72457: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72458: LD_INT 0
72460: PPUSH
72461: PPUSH
72462: PPUSH
// if not side or side > 8 then
72463: LD_VAR 0 1
72467: NOT
72468: PUSH
72469: LD_VAR 0 1
72473: PUSH
72474: LD_INT 8
72476: GREATER
72477: OR
72478: IFFALSE 72482
// exit ;
72480: GO 72669
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72482: LD_ADDR_VAR 0 4
72486: PUSH
72487: LD_INT 22
72489: PUSH
72490: LD_VAR 0 1
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PUSH
72499: LD_INT 21
72501: PUSH
72502: LD_INT 3
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PPUSH
72513: CALL_OW 69
72517: ST_TO_ADDR
// if not tmp then
72518: LD_VAR 0 4
72522: NOT
72523: IFFALSE 72527
// exit ;
72525: GO 72669
// enable_addtolog := true ;
72527: LD_ADDR_OWVAR 81
72531: PUSH
72532: LD_INT 1
72534: ST_TO_ADDR
// AddToLog ( [ ) ;
72535: LD_STRING [
72537: PPUSH
72538: CALL_OW 561
// for i in tmp do
72542: LD_ADDR_VAR 0 3
72546: PUSH
72547: LD_VAR 0 4
72551: PUSH
72552: FOR_IN
72553: IFFALSE 72660
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72555: LD_STRING [
72557: PUSH
72558: LD_VAR 0 3
72562: PPUSH
72563: CALL_OW 266
72567: STR
72568: PUSH
72569: LD_STRING , 
72571: STR
72572: PUSH
72573: LD_VAR 0 3
72577: PPUSH
72578: CALL_OW 250
72582: STR
72583: PUSH
72584: LD_STRING , 
72586: STR
72587: PUSH
72588: LD_VAR 0 3
72592: PPUSH
72593: CALL_OW 251
72597: STR
72598: PUSH
72599: LD_STRING , 
72601: STR
72602: PUSH
72603: LD_VAR 0 3
72607: PPUSH
72608: CALL_OW 254
72612: STR
72613: PUSH
72614: LD_STRING , 
72616: STR
72617: PUSH
72618: LD_VAR 0 3
72622: PPUSH
72623: LD_INT 1
72625: PPUSH
72626: CALL_OW 268
72630: STR
72631: PUSH
72632: LD_STRING , 
72634: STR
72635: PUSH
72636: LD_VAR 0 3
72640: PPUSH
72641: LD_INT 2
72643: PPUSH
72644: CALL_OW 268
72648: STR
72649: PUSH
72650: LD_STRING ],
72652: STR
72653: PPUSH
72654: CALL_OW 561
// end ;
72658: GO 72552
72660: POP
72661: POP
// AddToLog ( ]; ) ;
72662: LD_STRING ];
72664: PPUSH
72665: CALL_OW 561
// end ;
72669: LD_VAR 0 2
72673: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72674: LD_INT 0
72676: PPUSH
72677: PPUSH
72678: PPUSH
72679: PPUSH
72680: PPUSH
// if not area or not rate or not max then
72681: LD_VAR 0 1
72685: NOT
72686: PUSH
72687: LD_VAR 0 2
72691: NOT
72692: OR
72693: PUSH
72694: LD_VAR 0 4
72698: NOT
72699: OR
72700: IFFALSE 72704
// exit ;
72702: GO 72893
// while 1 do
72704: LD_INT 1
72706: IFFALSE 72893
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72708: LD_ADDR_VAR 0 9
72712: PUSH
72713: LD_VAR 0 1
72717: PPUSH
72718: LD_INT 1
72720: PPUSH
72721: CALL_OW 287
72725: PUSH
72726: LD_INT 10
72728: MUL
72729: ST_TO_ADDR
// r := rate / 10 ;
72730: LD_ADDR_VAR 0 7
72734: PUSH
72735: LD_VAR 0 2
72739: PUSH
72740: LD_INT 10
72742: DIVREAL
72743: ST_TO_ADDR
// time := 1 1$00 ;
72744: LD_ADDR_VAR 0 8
72748: PUSH
72749: LD_INT 2100
72751: ST_TO_ADDR
// if amount < min then
72752: LD_VAR 0 9
72756: PUSH
72757: LD_VAR 0 3
72761: LESS
72762: IFFALSE 72780
// r := r * 2 else
72764: LD_ADDR_VAR 0 7
72768: PUSH
72769: LD_VAR 0 7
72773: PUSH
72774: LD_INT 2
72776: MUL
72777: ST_TO_ADDR
72778: GO 72806
// if amount > max then
72780: LD_VAR 0 9
72784: PUSH
72785: LD_VAR 0 4
72789: GREATER
72790: IFFALSE 72806
// r := r / 2 ;
72792: LD_ADDR_VAR 0 7
72796: PUSH
72797: LD_VAR 0 7
72801: PUSH
72802: LD_INT 2
72804: DIVREAL
72805: ST_TO_ADDR
// time := time / r ;
72806: LD_ADDR_VAR 0 8
72810: PUSH
72811: LD_VAR 0 8
72815: PUSH
72816: LD_VAR 0 7
72820: DIVREAL
72821: ST_TO_ADDR
// if time < 0 then
72822: LD_VAR 0 8
72826: PUSH
72827: LD_INT 0
72829: LESS
72830: IFFALSE 72847
// time := time * - 1 ;
72832: LD_ADDR_VAR 0 8
72836: PUSH
72837: LD_VAR 0 8
72841: PUSH
72842: LD_INT 1
72844: NEG
72845: MUL
72846: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72847: LD_VAR 0 8
72851: PUSH
72852: LD_INT 35
72854: PPUSH
72855: LD_INT 875
72857: PPUSH
72858: CALL_OW 12
72862: PLUS
72863: PPUSH
72864: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72868: LD_INT 1
72870: PPUSH
72871: LD_INT 5
72873: PPUSH
72874: CALL_OW 12
72878: PPUSH
72879: LD_VAR 0 1
72883: PPUSH
72884: LD_INT 1
72886: PPUSH
72887: CALL_OW 55
// end ;
72891: GO 72704
// end ;
72893: LD_VAR 0 5
72897: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72898: LD_INT 0
72900: PPUSH
72901: PPUSH
72902: PPUSH
72903: PPUSH
72904: PPUSH
72905: PPUSH
72906: PPUSH
72907: PPUSH
// if not turrets or not factories then
72908: LD_VAR 0 1
72912: NOT
72913: PUSH
72914: LD_VAR 0 2
72918: NOT
72919: OR
72920: IFFALSE 72924
// exit ;
72922: GO 73231
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72924: LD_ADDR_VAR 0 10
72928: PUSH
72929: LD_INT 5
72931: PUSH
72932: LD_INT 6
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: PUSH
72939: LD_INT 2
72941: PUSH
72942: LD_INT 4
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: PUSH
72949: LD_INT 3
72951: PUSH
72952: LD_INT 5
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: EMPTY
72960: LIST
72961: LIST
72962: LIST
72963: PUSH
72964: LD_INT 24
72966: PUSH
72967: LD_INT 25
72969: PUSH
72970: EMPTY
72971: LIST
72972: LIST
72973: PUSH
72974: LD_INT 23
72976: PUSH
72977: LD_INT 27
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 42
72990: PUSH
72991: LD_INT 43
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: LD_INT 44
73000: PUSH
73001: LD_INT 46
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 45
73010: PUSH
73011: LD_INT 47
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: LIST
73022: PUSH
73023: EMPTY
73024: LIST
73025: LIST
73026: LIST
73027: ST_TO_ADDR
// result := [ ] ;
73028: LD_ADDR_VAR 0 3
73032: PUSH
73033: EMPTY
73034: ST_TO_ADDR
// for i in turrets do
73035: LD_ADDR_VAR 0 4
73039: PUSH
73040: LD_VAR 0 1
73044: PUSH
73045: FOR_IN
73046: IFFALSE 73229
// begin nat := GetNation ( i ) ;
73048: LD_ADDR_VAR 0 7
73052: PUSH
73053: LD_VAR 0 4
73057: PPUSH
73058: CALL_OW 248
73062: ST_TO_ADDR
// weapon := 0 ;
73063: LD_ADDR_VAR 0 8
73067: PUSH
73068: LD_INT 0
73070: ST_TO_ADDR
// if not nat then
73071: LD_VAR 0 7
73075: NOT
73076: IFFALSE 73080
// continue ;
73078: GO 73045
// for j in list [ nat ] do
73080: LD_ADDR_VAR 0 5
73084: PUSH
73085: LD_VAR 0 10
73089: PUSH
73090: LD_VAR 0 7
73094: ARRAY
73095: PUSH
73096: FOR_IN
73097: IFFALSE 73138
// if GetBWeapon ( i ) = j [ 1 ] then
73099: LD_VAR 0 4
73103: PPUSH
73104: CALL_OW 269
73108: PUSH
73109: LD_VAR 0 5
73113: PUSH
73114: LD_INT 1
73116: ARRAY
73117: EQUAL
73118: IFFALSE 73136
// begin weapon := j [ 2 ] ;
73120: LD_ADDR_VAR 0 8
73124: PUSH
73125: LD_VAR 0 5
73129: PUSH
73130: LD_INT 2
73132: ARRAY
73133: ST_TO_ADDR
// break ;
73134: GO 73138
// end ;
73136: GO 73096
73138: POP
73139: POP
// if not weapon then
73140: LD_VAR 0 8
73144: NOT
73145: IFFALSE 73149
// continue ;
73147: GO 73045
// for k in factories do
73149: LD_ADDR_VAR 0 6
73153: PUSH
73154: LD_VAR 0 2
73158: PUSH
73159: FOR_IN
73160: IFFALSE 73225
// begin weapons := AvailableWeaponList ( k ) ;
73162: LD_ADDR_VAR 0 9
73166: PUSH
73167: LD_VAR 0 6
73171: PPUSH
73172: CALL_OW 478
73176: ST_TO_ADDR
// if not weapons then
73177: LD_VAR 0 9
73181: NOT
73182: IFFALSE 73186
// continue ;
73184: GO 73159
// if weapon in weapons then
73186: LD_VAR 0 8
73190: PUSH
73191: LD_VAR 0 9
73195: IN
73196: IFFALSE 73223
// begin result := [ i , weapon ] ;
73198: LD_ADDR_VAR 0 3
73202: PUSH
73203: LD_VAR 0 4
73207: PUSH
73208: LD_VAR 0 8
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: ST_TO_ADDR
// exit ;
73217: POP
73218: POP
73219: POP
73220: POP
73221: GO 73231
// end ; end ;
73223: GO 73159
73225: POP
73226: POP
// end ;
73227: GO 73045
73229: POP
73230: POP
// end ;
73231: LD_VAR 0 3
73235: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73236: LD_INT 0
73238: PPUSH
// if not side or side > 8 then
73239: LD_VAR 0 3
73243: NOT
73244: PUSH
73245: LD_VAR 0 3
73249: PUSH
73250: LD_INT 8
73252: GREATER
73253: OR
73254: IFFALSE 73258
// exit ;
73256: GO 73317
// if not range then
73258: LD_VAR 0 4
73262: NOT
73263: IFFALSE 73274
// range := - 12 ;
73265: LD_ADDR_VAR 0 4
73269: PUSH
73270: LD_INT 12
73272: NEG
73273: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73274: LD_VAR 0 1
73278: PPUSH
73279: LD_VAR 0 2
73283: PPUSH
73284: LD_VAR 0 3
73288: PPUSH
73289: LD_VAR 0 4
73293: PPUSH
73294: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73298: LD_VAR 0 1
73302: PPUSH
73303: LD_VAR 0 2
73307: PPUSH
73308: LD_VAR 0 3
73312: PPUSH
73313: CALL_OW 331
// end ;
73317: LD_VAR 0 5
73321: RET
// export function Video ( mode ) ; begin
73322: LD_INT 0
73324: PPUSH
// ingame_video = mode ;
73325: LD_ADDR_OWVAR 52
73329: PUSH
73330: LD_VAR 0 1
73334: ST_TO_ADDR
// interface_hidden = mode ;
73335: LD_ADDR_OWVAR 54
73339: PUSH
73340: LD_VAR 0 1
73344: ST_TO_ADDR
// end ;
73345: LD_VAR 0 2
73349: RET
// export function Join ( array , element ) ; begin
73350: LD_INT 0
73352: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73353: LD_ADDR_VAR 0 3
73357: PUSH
73358: LD_VAR 0 1
73362: PPUSH
73363: LD_VAR 0 1
73367: PUSH
73368: LD_INT 1
73370: PLUS
73371: PPUSH
73372: LD_VAR 0 2
73376: PPUSH
73377: CALL_OW 1
73381: ST_TO_ADDR
// end ;
73382: LD_VAR 0 3
73386: RET
// export function JoinUnion ( array , element ) ; begin
73387: LD_INT 0
73389: PPUSH
// result := array union element ;
73390: LD_ADDR_VAR 0 3
73394: PUSH
73395: LD_VAR 0 1
73399: PUSH
73400: LD_VAR 0 2
73404: UNION
73405: ST_TO_ADDR
// end ;
73406: LD_VAR 0 3
73410: RET
// export function GetBehemoths ( side ) ; begin
73411: LD_INT 0
73413: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73414: LD_ADDR_VAR 0 2
73418: PUSH
73419: LD_INT 22
73421: PUSH
73422: LD_VAR 0 1
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: LD_INT 31
73433: PUSH
73434: LD_INT 25
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: PPUSH
73445: CALL_OW 69
73449: ST_TO_ADDR
// end ;
73450: LD_VAR 0 2
73454: RET
// export function Shuffle ( array ) ; var i , index ; begin
73455: LD_INT 0
73457: PPUSH
73458: PPUSH
73459: PPUSH
// result := [ ] ;
73460: LD_ADDR_VAR 0 2
73464: PUSH
73465: EMPTY
73466: ST_TO_ADDR
// if not array then
73467: LD_VAR 0 1
73471: NOT
73472: IFFALSE 73476
// exit ;
73474: GO 73575
// Randomize ;
73476: CALL_OW 10
// for i = array downto 1 do
73480: LD_ADDR_VAR 0 3
73484: PUSH
73485: DOUBLE
73486: LD_VAR 0 1
73490: INC
73491: ST_TO_ADDR
73492: LD_INT 1
73494: PUSH
73495: FOR_DOWNTO
73496: IFFALSE 73573
// begin index := rand ( 1 , array ) ;
73498: LD_ADDR_VAR 0 4
73502: PUSH
73503: LD_INT 1
73505: PPUSH
73506: LD_VAR 0 1
73510: PPUSH
73511: CALL_OW 12
73515: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73516: LD_ADDR_VAR 0 2
73520: PUSH
73521: LD_VAR 0 2
73525: PPUSH
73526: LD_VAR 0 2
73530: PUSH
73531: LD_INT 1
73533: PLUS
73534: PPUSH
73535: LD_VAR 0 1
73539: PUSH
73540: LD_VAR 0 4
73544: ARRAY
73545: PPUSH
73546: CALL_OW 2
73550: ST_TO_ADDR
// array := Delete ( array , index ) ;
73551: LD_ADDR_VAR 0 1
73555: PUSH
73556: LD_VAR 0 1
73560: PPUSH
73561: LD_VAR 0 4
73565: PPUSH
73566: CALL_OW 3
73570: ST_TO_ADDR
// end ;
73571: GO 73495
73573: POP
73574: POP
// end ;
73575: LD_VAR 0 2
73579: RET
// export function GetBaseMaterials ( base ) ; begin
73580: LD_INT 0
73582: PPUSH
// result := [ 0 , 0 , 0 ] ;
73583: LD_ADDR_VAR 0 2
73587: PUSH
73588: LD_INT 0
73590: PUSH
73591: LD_INT 0
73593: PUSH
73594: LD_INT 0
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: LIST
73601: ST_TO_ADDR
// if not base then
73602: LD_VAR 0 1
73606: NOT
73607: IFFALSE 73611
// exit ;
73609: GO 73660
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73611: LD_ADDR_VAR 0 2
73615: PUSH
73616: LD_VAR 0 1
73620: PPUSH
73621: LD_INT 1
73623: PPUSH
73624: CALL_OW 275
73628: PUSH
73629: LD_VAR 0 1
73633: PPUSH
73634: LD_INT 2
73636: PPUSH
73637: CALL_OW 275
73641: PUSH
73642: LD_VAR 0 1
73646: PPUSH
73647: LD_INT 3
73649: PPUSH
73650: CALL_OW 275
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: LIST
73659: ST_TO_ADDR
// end ;
73660: LD_VAR 0 2
73664: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73665: LD_INT 0
73667: PPUSH
73668: PPUSH
// result := array ;
73669: LD_ADDR_VAR 0 3
73673: PUSH
73674: LD_VAR 0 1
73678: ST_TO_ADDR
// if size > 0 then
73679: LD_VAR 0 2
73683: PUSH
73684: LD_INT 0
73686: GREATER
73687: IFFALSE 73733
// for i := array downto size do
73689: LD_ADDR_VAR 0 4
73693: PUSH
73694: DOUBLE
73695: LD_VAR 0 1
73699: INC
73700: ST_TO_ADDR
73701: LD_VAR 0 2
73705: PUSH
73706: FOR_DOWNTO
73707: IFFALSE 73731
// result := Delete ( result , result ) ;
73709: LD_ADDR_VAR 0 3
73713: PUSH
73714: LD_VAR 0 3
73718: PPUSH
73719: LD_VAR 0 3
73723: PPUSH
73724: CALL_OW 3
73728: ST_TO_ADDR
73729: GO 73706
73731: POP
73732: POP
// end ;
73733: LD_VAR 0 3
73737: RET
// export function ComExit ( unit ) ; var tmp ; begin
73738: LD_INT 0
73740: PPUSH
73741: PPUSH
// if not IsInUnit ( unit ) then
73742: LD_VAR 0 1
73746: PPUSH
73747: CALL_OW 310
73751: NOT
73752: IFFALSE 73756
// exit ;
73754: GO 73816
// tmp := IsInUnit ( unit ) ;
73756: LD_ADDR_VAR 0 3
73760: PUSH
73761: LD_VAR 0 1
73765: PPUSH
73766: CALL_OW 310
73770: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73771: LD_VAR 0 3
73775: PPUSH
73776: CALL_OW 247
73780: PUSH
73781: LD_INT 2
73783: EQUAL
73784: IFFALSE 73797
// ComExitVehicle ( unit ) else
73786: LD_VAR 0 1
73790: PPUSH
73791: CALL_OW 121
73795: GO 73806
// ComExitBuilding ( unit ) ;
73797: LD_VAR 0 1
73801: PPUSH
73802: CALL_OW 122
// result := tmp ;
73806: LD_ADDR_VAR 0 2
73810: PUSH
73811: LD_VAR 0 3
73815: ST_TO_ADDR
// end ;
73816: LD_VAR 0 2
73820: RET
// export function ComExitAll ( units ) ; var i ; begin
73821: LD_INT 0
73823: PPUSH
73824: PPUSH
// if not units then
73825: LD_VAR 0 1
73829: NOT
73830: IFFALSE 73834
// exit ;
73832: GO 73860
// for i in units do
73834: LD_ADDR_VAR 0 3
73838: PUSH
73839: LD_VAR 0 1
73843: PUSH
73844: FOR_IN
73845: IFFALSE 73858
// ComExit ( i ) ;
73847: LD_VAR 0 3
73851: PPUSH
73852: CALL 73738 0 1
73856: GO 73844
73858: POP
73859: POP
// end ;
73860: LD_VAR 0 2
73864: RET
// export function ResetHc ; begin
73865: LD_INT 0
73867: PPUSH
// InitHc ;
73868: CALL_OW 19
// hc_importance := 0 ;
73872: LD_ADDR_OWVAR 32
73876: PUSH
73877: LD_INT 0
73879: ST_TO_ADDR
// end ;
73880: LD_VAR 0 1
73884: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73885: LD_INT 0
73887: PPUSH
73888: PPUSH
73889: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73890: LD_ADDR_VAR 0 6
73894: PUSH
73895: LD_VAR 0 1
73899: PUSH
73900: LD_VAR 0 3
73904: PLUS
73905: PUSH
73906: LD_INT 2
73908: DIV
73909: ST_TO_ADDR
// if _x < 0 then
73910: LD_VAR 0 6
73914: PUSH
73915: LD_INT 0
73917: LESS
73918: IFFALSE 73935
// _x := _x * - 1 ;
73920: LD_ADDR_VAR 0 6
73924: PUSH
73925: LD_VAR 0 6
73929: PUSH
73930: LD_INT 1
73932: NEG
73933: MUL
73934: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73935: LD_ADDR_VAR 0 7
73939: PUSH
73940: LD_VAR 0 2
73944: PUSH
73945: LD_VAR 0 4
73949: PLUS
73950: PUSH
73951: LD_INT 2
73953: DIV
73954: ST_TO_ADDR
// if _y < 0 then
73955: LD_VAR 0 7
73959: PUSH
73960: LD_INT 0
73962: LESS
73963: IFFALSE 73980
// _y := _y * - 1 ;
73965: LD_ADDR_VAR 0 7
73969: PUSH
73970: LD_VAR 0 7
73974: PUSH
73975: LD_INT 1
73977: NEG
73978: MUL
73979: ST_TO_ADDR
// result := [ _x , _y ] ;
73980: LD_ADDR_VAR 0 5
73984: PUSH
73985: LD_VAR 0 6
73989: PUSH
73990: LD_VAR 0 7
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: ST_TO_ADDR
// end ;
73999: LD_VAR 0 5
74003: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74004: LD_INT 0
74006: PPUSH
74007: PPUSH
74008: PPUSH
74009: PPUSH
// task := GetTaskList ( unit ) ;
74010: LD_ADDR_VAR 0 7
74014: PUSH
74015: LD_VAR 0 1
74019: PPUSH
74020: CALL_OW 437
74024: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74025: LD_VAR 0 7
74029: NOT
74030: PUSH
74031: LD_VAR 0 1
74035: PPUSH
74036: LD_VAR 0 2
74040: PPUSH
74041: CALL_OW 308
74045: NOT
74046: AND
74047: IFFALSE 74051
// exit ;
74049: GO 74169
// if IsInArea ( unit , area ) then
74051: LD_VAR 0 1
74055: PPUSH
74056: LD_VAR 0 2
74060: PPUSH
74061: CALL_OW 308
74065: IFFALSE 74083
// begin ComMoveToArea ( unit , goAway ) ;
74067: LD_VAR 0 1
74071: PPUSH
74072: LD_VAR 0 3
74076: PPUSH
74077: CALL_OW 113
// exit ;
74081: GO 74169
// end ; if task [ 1 ] [ 1 ] <> M then
74083: LD_VAR 0 7
74087: PUSH
74088: LD_INT 1
74090: ARRAY
74091: PUSH
74092: LD_INT 1
74094: ARRAY
74095: PUSH
74096: LD_STRING M
74098: NONEQUAL
74099: IFFALSE 74103
// exit ;
74101: GO 74169
// x := task [ 1 ] [ 2 ] ;
74103: LD_ADDR_VAR 0 5
74107: PUSH
74108: LD_VAR 0 7
74112: PUSH
74113: LD_INT 1
74115: ARRAY
74116: PUSH
74117: LD_INT 2
74119: ARRAY
74120: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74121: LD_ADDR_VAR 0 6
74125: PUSH
74126: LD_VAR 0 7
74130: PUSH
74131: LD_INT 1
74133: ARRAY
74134: PUSH
74135: LD_INT 3
74137: ARRAY
74138: ST_TO_ADDR
// if InArea ( x , y , area ) then
74139: LD_VAR 0 5
74143: PPUSH
74144: LD_VAR 0 6
74148: PPUSH
74149: LD_VAR 0 2
74153: PPUSH
74154: CALL_OW 309
74158: IFFALSE 74169
// ComStop ( unit ) ;
74160: LD_VAR 0 1
74164: PPUSH
74165: CALL_OW 141
// end ;
74169: LD_VAR 0 4
74173: RET
// export function Abs ( value ) ; begin
74174: LD_INT 0
74176: PPUSH
// result := value ;
74177: LD_ADDR_VAR 0 2
74181: PUSH
74182: LD_VAR 0 1
74186: ST_TO_ADDR
// if value < 0 then
74187: LD_VAR 0 1
74191: PUSH
74192: LD_INT 0
74194: LESS
74195: IFFALSE 74212
// result := value * - 1 ;
74197: LD_ADDR_VAR 0 2
74201: PUSH
74202: LD_VAR 0 1
74206: PUSH
74207: LD_INT 1
74209: NEG
74210: MUL
74211: ST_TO_ADDR
// end ;
74212: LD_VAR 0 2
74216: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74217: LD_INT 0
74219: PPUSH
74220: PPUSH
74221: PPUSH
74222: PPUSH
74223: PPUSH
74224: PPUSH
74225: PPUSH
74226: PPUSH
// if not unit or not building then
74227: LD_VAR 0 1
74231: NOT
74232: PUSH
74233: LD_VAR 0 2
74237: NOT
74238: OR
74239: IFFALSE 74243
// exit ;
74241: GO 74469
// x := GetX ( building ) ;
74243: LD_ADDR_VAR 0 4
74247: PUSH
74248: LD_VAR 0 2
74252: PPUSH
74253: CALL_OW 250
74257: ST_TO_ADDR
// y := GetY ( building ) ;
74258: LD_ADDR_VAR 0 6
74262: PUSH
74263: LD_VAR 0 2
74267: PPUSH
74268: CALL_OW 251
74272: ST_TO_ADDR
// d := GetDir ( building ) ;
74273: LD_ADDR_VAR 0 8
74277: PUSH
74278: LD_VAR 0 2
74282: PPUSH
74283: CALL_OW 254
74287: ST_TO_ADDR
// r := 4 ;
74288: LD_ADDR_VAR 0 9
74292: PUSH
74293: LD_INT 4
74295: ST_TO_ADDR
// for i := 1 to 5 do
74296: LD_ADDR_VAR 0 10
74300: PUSH
74301: DOUBLE
74302: LD_INT 1
74304: DEC
74305: ST_TO_ADDR
74306: LD_INT 5
74308: PUSH
74309: FOR_TO
74310: IFFALSE 74467
// begin _x := ShiftX ( x , d , r + i ) ;
74312: LD_ADDR_VAR 0 5
74316: PUSH
74317: LD_VAR 0 4
74321: PPUSH
74322: LD_VAR 0 8
74326: PPUSH
74327: LD_VAR 0 9
74331: PUSH
74332: LD_VAR 0 10
74336: PLUS
74337: PPUSH
74338: CALL_OW 272
74342: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74343: LD_ADDR_VAR 0 7
74347: PUSH
74348: LD_VAR 0 6
74352: PPUSH
74353: LD_VAR 0 8
74357: PPUSH
74358: LD_VAR 0 9
74362: PUSH
74363: LD_VAR 0 10
74367: PLUS
74368: PPUSH
74369: CALL_OW 273
74373: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74374: LD_VAR 0 5
74378: PPUSH
74379: LD_VAR 0 7
74383: PPUSH
74384: CALL_OW 488
74388: PUSH
74389: LD_VAR 0 5
74393: PPUSH
74394: LD_VAR 0 7
74398: PPUSH
74399: CALL_OW 428
74403: PPUSH
74404: CALL_OW 247
74408: PUSH
74409: LD_INT 3
74411: PUSH
74412: LD_INT 2
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: IN
74419: NOT
74420: AND
74421: IFFALSE 74465
// begin ComMoveXY ( unit , _x , _y ) ;
74423: LD_VAR 0 1
74427: PPUSH
74428: LD_VAR 0 5
74432: PPUSH
74433: LD_VAR 0 7
74437: PPUSH
74438: CALL_OW 111
// result := [ _x , _y ] ;
74442: LD_ADDR_VAR 0 3
74446: PUSH
74447: LD_VAR 0 5
74451: PUSH
74452: LD_VAR 0 7
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: ST_TO_ADDR
// exit ;
74461: POP
74462: POP
74463: GO 74469
// end ; end ;
74465: GO 74309
74467: POP
74468: POP
// end ;
74469: LD_VAR 0 3
74473: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74474: LD_INT 0
74476: PPUSH
74477: PPUSH
74478: PPUSH
// result := 0 ;
74479: LD_ADDR_VAR 0 3
74483: PUSH
74484: LD_INT 0
74486: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74487: LD_VAR 0 1
74491: PUSH
74492: LD_INT 0
74494: LESS
74495: PUSH
74496: LD_VAR 0 1
74500: PUSH
74501: LD_INT 8
74503: GREATER
74504: OR
74505: PUSH
74506: LD_VAR 0 2
74510: PUSH
74511: LD_INT 0
74513: LESS
74514: OR
74515: PUSH
74516: LD_VAR 0 2
74520: PUSH
74521: LD_INT 8
74523: GREATER
74524: OR
74525: IFFALSE 74529
// exit ;
74527: GO 74604
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74529: LD_ADDR_VAR 0 4
74533: PUSH
74534: LD_INT 22
74536: PUSH
74537: LD_VAR 0 2
74541: PUSH
74542: EMPTY
74543: LIST
74544: LIST
74545: PPUSH
74546: CALL_OW 69
74550: PUSH
74551: FOR_IN
74552: IFFALSE 74602
// begin un := UnitShoot ( i ) ;
74554: LD_ADDR_VAR 0 5
74558: PUSH
74559: LD_VAR 0 4
74563: PPUSH
74564: CALL_OW 504
74568: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74569: LD_VAR 0 5
74573: PPUSH
74574: CALL_OW 255
74578: PUSH
74579: LD_VAR 0 1
74583: EQUAL
74584: IFFALSE 74600
// begin result := un ;
74586: LD_ADDR_VAR 0 3
74590: PUSH
74591: LD_VAR 0 5
74595: ST_TO_ADDR
// exit ;
74596: POP
74597: POP
74598: GO 74604
// end ; end ;
74600: GO 74551
74602: POP
74603: POP
// end ;
74604: LD_VAR 0 3
74608: RET
// export function GetCargoBay ( units ) ; begin
74609: LD_INT 0
74611: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74612: LD_ADDR_VAR 0 2
74616: PUSH
74617: LD_VAR 0 1
74621: PPUSH
74622: LD_INT 2
74624: PUSH
74625: LD_INT 34
74627: PUSH
74628: LD_INT 12
74630: PUSH
74631: EMPTY
74632: LIST
74633: LIST
74634: PUSH
74635: LD_INT 34
74637: PUSH
74638: LD_INT 51
74640: PUSH
74641: EMPTY
74642: LIST
74643: LIST
74644: PUSH
74645: LD_INT 34
74647: PUSH
74648: LD_INT 32
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: PUSH
74655: LD_INT 34
74657: PUSH
74658: LD_EXP 33
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: PPUSH
74674: CALL_OW 72
74678: ST_TO_ADDR
// end ;
74679: LD_VAR 0 2
74683: RET
// export function Negate ( value ) ; begin
74684: LD_INT 0
74686: PPUSH
// result := not value ;
74687: LD_ADDR_VAR 0 2
74691: PUSH
74692: LD_VAR 0 1
74696: NOT
74697: ST_TO_ADDR
// end ;
74698: LD_VAR 0 2
74702: RET
// export function Inc ( value ) ; begin
74703: LD_INT 0
74705: PPUSH
// result := value + 1 ;
74706: LD_ADDR_VAR 0 2
74710: PUSH
74711: LD_VAR 0 1
74715: PUSH
74716: LD_INT 1
74718: PLUS
74719: ST_TO_ADDR
// end ;
74720: LD_VAR 0 2
74724: RET
// export function Dec ( value ) ; begin
74725: LD_INT 0
74727: PPUSH
// result := value - 1 ;
74728: LD_ADDR_VAR 0 2
74732: PUSH
74733: LD_VAR 0 1
74737: PUSH
74738: LD_INT 1
74740: MINUS
74741: ST_TO_ADDR
// end ;
74742: LD_VAR 0 2
74746: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74747: LD_INT 0
74749: PPUSH
74750: PPUSH
74751: PPUSH
74752: PPUSH
74753: PPUSH
74754: PPUSH
74755: PPUSH
74756: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74757: LD_VAR 0 1
74761: PPUSH
74762: LD_VAR 0 2
74766: PPUSH
74767: CALL_OW 488
74771: NOT
74772: PUSH
74773: LD_VAR 0 3
74777: PPUSH
74778: LD_VAR 0 4
74782: PPUSH
74783: CALL_OW 488
74787: NOT
74788: OR
74789: IFFALSE 74802
// begin result := - 1 ;
74791: LD_ADDR_VAR 0 5
74795: PUSH
74796: LD_INT 1
74798: NEG
74799: ST_TO_ADDR
// exit ;
74800: GO 75037
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74802: LD_ADDR_VAR 0 12
74806: PUSH
74807: LD_VAR 0 1
74811: PPUSH
74812: LD_VAR 0 2
74816: PPUSH
74817: LD_VAR 0 3
74821: PPUSH
74822: LD_VAR 0 4
74826: PPUSH
74827: CALL 73885 0 4
74831: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74832: LD_ADDR_VAR 0 11
74836: PUSH
74837: LD_VAR 0 1
74841: PPUSH
74842: LD_VAR 0 2
74846: PPUSH
74847: LD_VAR 0 12
74851: PUSH
74852: LD_INT 1
74854: ARRAY
74855: PPUSH
74856: LD_VAR 0 12
74860: PUSH
74861: LD_INT 2
74863: ARRAY
74864: PPUSH
74865: CALL_OW 298
74869: ST_TO_ADDR
// distance := 9999 ;
74870: LD_ADDR_VAR 0 10
74874: PUSH
74875: LD_INT 9999
74877: ST_TO_ADDR
// for i := 0 to 5 do
74878: LD_ADDR_VAR 0 6
74882: PUSH
74883: DOUBLE
74884: LD_INT 0
74886: DEC
74887: ST_TO_ADDR
74888: LD_INT 5
74890: PUSH
74891: FOR_TO
74892: IFFALSE 75035
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74894: LD_ADDR_VAR 0 7
74898: PUSH
74899: LD_VAR 0 1
74903: PPUSH
74904: LD_VAR 0 6
74908: PPUSH
74909: LD_VAR 0 11
74913: PPUSH
74914: CALL_OW 272
74918: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74919: LD_ADDR_VAR 0 8
74923: PUSH
74924: LD_VAR 0 2
74928: PPUSH
74929: LD_VAR 0 6
74933: PPUSH
74934: LD_VAR 0 11
74938: PPUSH
74939: CALL_OW 273
74943: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74944: LD_VAR 0 7
74948: PPUSH
74949: LD_VAR 0 8
74953: PPUSH
74954: CALL_OW 488
74958: NOT
74959: IFFALSE 74963
// continue ;
74961: GO 74891
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74963: LD_ADDR_VAR 0 9
74967: PUSH
74968: LD_VAR 0 12
74972: PUSH
74973: LD_INT 1
74975: ARRAY
74976: PPUSH
74977: LD_VAR 0 12
74981: PUSH
74982: LD_INT 2
74984: ARRAY
74985: PPUSH
74986: LD_VAR 0 7
74990: PPUSH
74991: LD_VAR 0 8
74995: PPUSH
74996: CALL_OW 298
75000: ST_TO_ADDR
// if tmp < distance then
75001: LD_VAR 0 9
75005: PUSH
75006: LD_VAR 0 10
75010: LESS
75011: IFFALSE 75033
// begin result := i ;
75013: LD_ADDR_VAR 0 5
75017: PUSH
75018: LD_VAR 0 6
75022: ST_TO_ADDR
// distance := tmp ;
75023: LD_ADDR_VAR 0 10
75027: PUSH
75028: LD_VAR 0 9
75032: ST_TO_ADDR
// end ; end ;
75033: GO 74891
75035: POP
75036: POP
// end ;
75037: LD_VAR 0 5
75041: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75042: LD_INT 0
75044: PPUSH
75045: PPUSH
// if not driver or not IsInUnit ( driver ) then
75046: LD_VAR 0 1
75050: NOT
75051: PUSH
75052: LD_VAR 0 1
75056: PPUSH
75057: CALL_OW 310
75061: NOT
75062: OR
75063: IFFALSE 75067
// exit ;
75065: GO 75157
// vehicle := IsInUnit ( driver ) ;
75067: LD_ADDR_VAR 0 3
75071: PUSH
75072: LD_VAR 0 1
75076: PPUSH
75077: CALL_OW 310
75081: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75082: LD_VAR 0 1
75086: PPUSH
75087: LD_STRING \
75089: PUSH
75090: LD_INT 0
75092: PUSH
75093: LD_INT 0
75095: PUSH
75096: LD_INT 0
75098: PUSH
75099: LD_INT 0
75101: PUSH
75102: LD_INT 0
75104: PUSH
75105: LD_INT 0
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: LIST
75112: LIST
75113: LIST
75114: LIST
75115: LIST
75116: PUSH
75117: LD_STRING E
75119: PUSH
75120: LD_INT 0
75122: PUSH
75123: LD_INT 0
75125: PUSH
75126: LD_VAR 0 3
75130: PUSH
75131: LD_INT 0
75133: PUSH
75134: LD_INT 0
75136: PUSH
75137: LD_INT 0
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: PUSH
75149: EMPTY
75150: LIST
75151: LIST
75152: PPUSH
75153: CALL_OW 446
// end ;
75157: LD_VAR 0 2
75161: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75162: LD_INT 0
75164: PPUSH
75165: PPUSH
// if not driver or not IsInUnit ( driver ) then
75166: LD_VAR 0 1
75170: NOT
75171: PUSH
75172: LD_VAR 0 1
75176: PPUSH
75177: CALL_OW 310
75181: NOT
75182: OR
75183: IFFALSE 75187
// exit ;
75185: GO 75277
// vehicle := IsInUnit ( driver ) ;
75187: LD_ADDR_VAR 0 3
75191: PUSH
75192: LD_VAR 0 1
75196: PPUSH
75197: CALL_OW 310
75201: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75202: LD_VAR 0 1
75206: PPUSH
75207: LD_STRING \
75209: PUSH
75210: LD_INT 0
75212: PUSH
75213: LD_INT 0
75215: PUSH
75216: LD_INT 0
75218: PUSH
75219: LD_INT 0
75221: PUSH
75222: LD_INT 0
75224: PUSH
75225: LD_INT 0
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: LIST
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: PUSH
75237: LD_STRING E
75239: PUSH
75240: LD_INT 0
75242: PUSH
75243: LD_INT 0
75245: PUSH
75246: LD_VAR 0 3
75250: PUSH
75251: LD_INT 0
75253: PUSH
75254: LD_INT 0
75256: PUSH
75257: LD_INT 0
75259: PUSH
75260: EMPTY
75261: LIST
75262: LIST
75263: LIST
75264: LIST
75265: LIST
75266: LIST
75267: LIST
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PPUSH
75273: CALL_OW 447
// end ;
75277: LD_VAR 0 2
75281: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75282: LD_INT 0
75284: PPUSH
75285: PPUSH
75286: PPUSH
// tmp := [ ] ;
75287: LD_ADDR_VAR 0 5
75291: PUSH
75292: EMPTY
75293: ST_TO_ADDR
// for i in units do
75294: LD_ADDR_VAR 0 4
75298: PUSH
75299: LD_VAR 0 1
75303: PUSH
75304: FOR_IN
75305: IFFALSE 75343
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75307: LD_ADDR_VAR 0 5
75311: PUSH
75312: LD_VAR 0 5
75316: PPUSH
75317: LD_VAR 0 5
75321: PUSH
75322: LD_INT 1
75324: PLUS
75325: PPUSH
75326: LD_VAR 0 4
75330: PPUSH
75331: CALL_OW 256
75335: PPUSH
75336: CALL_OW 2
75340: ST_TO_ADDR
75341: GO 75304
75343: POP
75344: POP
// if not tmp then
75345: LD_VAR 0 5
75349: NOT
75350: IFFALSE 75354
// exit ;
75352: GO 75402
// if asc then
75354: LD_VAR 0 2
75358: IFFALSE 75382
// result := SortListByListAsc ( units , tmp ) else
75360: LD_ADDR_VAR 0 3
75364: PUSH
75365: LD_VAR 0 1
75369: PPUSH
75370: LD_VAR 0 5
75374: PPUSH
75375: CALL_OW 76
75379: ST_TO_ADDR
75380: GO 75402
// result := SortListByListDesc ( units , tmp ) ;
75382: LD_ADDR_VAR 0 3
75386: PUSH
75387: LD_VAR 0 1
75391: PPUSH
75392: LD_VAR 0 5
75396: PPUSH
75397: CALL_OW 77
75401: ST_TO_ADDR
// end ;
75402: LD_VAR 0 3
75406: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75407: LD_INT 0
75409: PPUSH
75410: PPUSH
// task := GetTaskList ( mech ) ;
75411: LD_ADDR_VAR 0 4
75415: PUSH
75416: LD_VAR 0 1
75420: PPUSH
75421: CALL_OW 437
75425: ST_TO_ADDR
// if not task then
75426: LD_VAR 0 4
75430: NOT
75431: IFFALSE 75435
// exit ;
75433: GO 75477
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75435: LD_ADDR_VAR 0 3
75439: PUSH
75440: LD_VAR 0 4
75444: PUSH
75445: LD_INT 1
75447: ARRAY
75448: PUSH
75449: LD_INT 1
75451: ARRAY
75452: PUSH
75453: LD_STRING r
75455: EQUAL
75456: PUSH
75457: LD_VAR 0 4
75461: PUSH
75462: LD_INT 1
75464: ARRAY
75465: PUSH
75466: LD_INT 4
75468: ARRAY
75469: PUSH
75470: LD_VAR 0 2
75474: EQUAL
75475: AND
75476: ST_TO_ADDR
// end ;
75477: LD_VAR 0 3
75481: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75482: LD_INT 0
75484: PPUSH
// SetDir ( unit , d ) ;
75485: LD_VAR 0 1
75489: PPUSH
75490: LD_VAR 0 4
75494: PPUSH
75495: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75499: LD_VAR 0 1
75503: PPUSH
75504: LD_VAR 0 2
75508: PPUSH
75509: LD_VAR 0 3
75513: PPUSH
75514: LD_VAR 0 5
75518: PPUSH
75519: CALL_OW 48
// end ;
75523: LD_VAR 0 6
75527: RET
// export function ToNaturalNumber ( number ) ; begin
75528: LD_INT 0
75530: PPUSH
// result := number div 1 ;
75531: LD_ADDR_VAR 0 2
75535: PUSH
75536: LD_VAR 0 1
75540: PUSH
75541: LD_INT 1
75543: DIV
75544: ST_TO_ADDR
// if number < 0 then
75545: LD_VAR 0 1
75549: PUSH
75550: LD_INT 0
75552: LESS
75553: IFFALSE 75563
// result := 0 ;
75555: LD_ADDR_VAR 0 2
75559: PUSH
75560: LD_INT 0
75562: ST_TO_ADDR
// end ;
75563: LD_VAR 0 2
75567: RET
// export function SortByClass ( units , class ) ; var un ; begin
75568: LD_INT 0
75570: PPUSH
75571: PPUSH
// if not units or not class then
75572: LD_VAR 0 1
75576: NOT
75577: PUSH
75578: LD_VAR 0 2
75582: NOT
75583: OR
75584: IFFALSE 75588
// exit ;
75586: GO 75683
// result := [ ] ;
75588: LD_ADDR_VAR 0 3
75592: PUSH
75593: EMPTY
75594: ST_TO_ADDR
// for un in units do
75595: LD_ADDR_VAR 0 4
75599: PUSH
75600: LD_VAR 0 1
75604: PUSH
75605: FOR_IN
75606: IFFALSE 75681
// if GetClass ( un ) = class then
75608: LD_VAR 0 4
75612: PPUSH
75613: CALL_OW 257
75617: PUSH
75618: LD_VAR 0 2
75622: EQUAL
75623: IFFALSE 75650
// result := Insert ( result , 1 , un ) else
75625: LD_ADDR_VAR 0 3
75629: PUSH
75630: LD_VAR 0 3
75634: PPUSH
75635: LD_INT 1
75637: PPUSH
75638: LD_VAR 0 4
75642: PPUSH
75643: CALL_OW 2
75647: ST_TO_ADDR
75648: GO 75679
// result := Replace ( result , result + 1 , un ) ;
75650: LD_ADDR_VAR 0 3
75654: PUSH
75655: LD_VAR 0 3
75659: PPUSH
75660: LD_VAR 0 3
75664: PUSH
75665: LD_INT 1
75667: PLUS
75668: PPUSH
75669: LD_VAR 0 4
75673: PPUSH
75674: CALL_OW 1
75678: ST_TO_ADDR
75679: GO 75605
75681: POP
75682: POP
// end ;
75683: LD_VAR 0 3
75687: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75688: LD_INT 0
75690: PPUSH
75691: PPUSH
75692: PPUSH
75693: PPUSH
75694: PPUSH
75695: PPUSH
75696: PPUSH
// result := [ ] ;
75697: LD_ADDR_VAR 0 4
75701: PUSH
75702: EMPTY
75703: ST_TO_ADDR
// if x - r < 0 then
75704: LD_VAR 0 1
75708: PUSH
75709: LD_VAR 0 3
75713: MINUS
75714: PUSH
75715: LD_INT 0
75717: LESS
75718: IFFALSE 75730
// min_x := 0 else
75720: LD_ADDR_VAR 0 8
75724: PUSH
75725: LD_INT 0
75727: ST_TO_ADDR
75728: GO 75746
// min_x := x - r ;
75730: LD_ADDR_VAR 0 8
75734: PUSH
75735: LD_VAR 0 1
75739: PUSH
75740: LD_VAR 0 3
75744: MINUS
75745: ST_TO_ADDR
// if y - r < 0 then
75746: LD_VAR 0 2
75750: PUSH
75751: LD_VAR 0 3
75755: MINUS
75756: PUSH
75757: LD_INT 0
75759: LESS
75760: IFFALSE 75772
// min_y := 0 else
75762: LD_ADDR_VAR 0 7
75766: PUSH
75767: LD_INT 0
75769: ST_TO_ADDR
75770: GO 75788
// min_y := y - r ;
75772: LD_ADDR_VAR 0 7
75776: PUSH
75777: LD_VAR 0 2
75781: PUSH
75782: LD_VAR 0 3
75786: MINUS
75787: ST_TO_ADDR
// max_x := x + r ;
75788: LD_ADDR_VAR 0 9
75792: PUSH
75793: LD_VAR 0 1
75797: PUSH
75798: LD_VAR 0 3
75802: PLUS
75803: ST_TO_ADDR
// max_y := y + r ;
75804: LD_ADDR_VAR 0 10
75808: PUSH
75809: LD_VAR 0 2
75813: PUSH
75814: LD_VAR 0 3
75818: PLUS
75819: ST_TO_ADDR
// for _x = min_x to max_x do
75820: LD_ADDR_VAR 0 5
75824: PUSH
75825: DOUBLE
75826: LD_VAR 0 8
75830: DEC
75831: ST_TO_ADDR
75832: LD_VAR 0 9
75836: PUSH
75837: FOR_TO
75838: IFFALSE 75939
// for _y = min_y to max_y do
75840: LD_ADDR_VAR 0 6
75844: PUSH
75845: DOUBLE
75846: LD_VAR 0 7
75850: DEC
75851: ST_TO_ADDR
75852: LD_VAR 0 10
75856: PUSH
75857: FOR_TO
75858: IFFALSE 75935
// begin if not ValidHex ( _x , _y ) then
75860: LD_VAR 0 5
75864: PPUSH
75865: LD_VAR 0 6
75869: PPUSH
75870: CALL_OW 488
75874: NOT
75875: IFFALSE 75879
// continue ;
75877: GO 75857
// if GetResourceTypeXY ( _x , _y ) then
75879: LD_VAR 0 5
75883: PPUSH
75884: LD_VAR 0 6
75888: PPUSH
75889: CALL_OW 283
75893: IFFALSE 75933
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75895: LD_ADDR_VAR 0 4
75899: PUSH
75900: LD_VAR 0 4
75904: PPUSH
75905: LD_VAR 0 4
75909: PUSH
75910: LD_INT 1
75912: PLUS
75913: PPUSH
75914: LD_VAR 0 5
75918: PUSH
75919: LD_VAR 0 6
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PPUSH
75928: CALL_OW 1
75932: ST_TO_ADDR
// end ;
75933: GO 75857
75935: POP
75936: POP
75937: GO 75837
75939: POP
75940: POP
// end ;
75941: LD_VAR 0 4
75945: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75946: LD_INT 0
75948: PPUSH
75949: PPUSH
75950: PPUSH
75951: PPUSH
75952: PPUSH
75953: PPUSH
75954: PPUSH
75955: PPUSH
// if not units then
75956: LD_VAR 0 1
75960: NOT
75961: IFFALSE 75965
// exit ;
75963: GO 76476
// result := UnitFilter ( units , [ f_ok ] ) ;
75965: LD_ADDR_VAR 0 3
75969: PUSH
75970: LD_VAR 0 1
75974: PPUSH
75975: LD_INT 50
75977: PUSH
75978: EMPTY
75979: LIST
75980: PPUSH
75981: CALL_OW 72
75985: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75986: LD_ADDR_VAR 0 8
75990: PUSH
75991: LD_VAR 0 1
75995: PUSH
75996: LD_INT 1
75998: ARRAY
75999: PPUSH
76000: CALL_OW 255
76004: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76005: LD_ADDR_VAR 0 10
76009: PUSH
76010: LD_INT 29
76012: PUSH
76013: LD_EXP 36
76017: PUSH
76018: LD_INT 49
76020: PUSH
76021: EMPTY
76022: LIST
76023: LIST
76024: LIST
76025: ST_TO_ADDR
// if not result then
76026: LD_VAR 0 3
76030: NOT
76031: IFFALSE 76035
// exit ;
76033: GO 76476
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76035: LD_ADDR_VAR 0 5
76039: PUSH
76040: LD_INT 81
76042: PUSH
76043: LD_VAR 0 8
76047: PUSH
76048: EMPTY
76049: LIST
76050: LIST
76051: PPUSH
76052: CALL_OW 69
76056: ST_TO_ADDR
// for i in result do
76057: LD_ADDR_VAR 0 4
76061: PUSH
76062: LD_VAR 0 3
76066: PUSH
76067: FOR_IN
76068: IFFALSE 76474
// begin tag := GetTag ( i ) + 1 ;
76070: LD_ADDR_VAR 0 9
76074: PUSH
76075: LD_VAR 0 4
76079: PPUSH
76080: CALL_OW 110
76084: PUSH
76085: LD_INT 1
76087: PLUS
76088: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
76089: LD_ADDR_VAR 0 7
76093: PUSH
76094: LD_VAR 0 4
76098: PPUSH
76099: CALL_OW 250
76103: PPUSH
76104: LD_VAR 0 4
76108: PPUSH
76109: CALL_OW 251
76113: PPUSH
76114: LD_INT 6
76116: PPUSH
76117: CALL 75688 0 3
76121: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
76122: LD_VAR 0 7
76126: PUSH
76127: LD_VAR 0 4
76131: PPUSH
76132: CALL_OW 264
76136: PUSH
76137: LD_VAR 0 10
76141: IN
76142: NOT
76143: AND
76144: IFFALSE 76183
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76146: LD_VAR 0 4
76150: PPUSH
76151: LD_VAR 0 7
76155: PUSH
76156: LD_INT 1
76158: ARRAY
76159: PUSH
76160: LD_INT 1
76162: ARRAY
76163: PPUSH
76164: LD_VAR 0 7
76168: PUSH
76169: LD_INT 1
76171: ARRAY
76172: PUSH
76173: LD_INT 2
76175: ARRAY
76176: PPUSH
76177: CALL_OW 116
76181: GO 76472
// if path > tag then
76183: LD_VAR 0 2
76187: PUSH
76188: LD_VAR 0 9
76192: GREATER
76193: IFFALSE 76401
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
76195: LD_ADDR_VAR 0 6
76199: PUSH
76200: LD_VAR 0 5
76204: PPUSH
76205: LD_INT 91
76207: PUSH
76208: LD_VAR 0 4
76212: PUSH
76213: LD_INT 12
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: LIST
76220: PPUSH
76221: CALL_OW 72
76225: ST_TO_ADDR
// if nearEnemy then
76226: LD_VAR 0 6
76230: IFFALSE 76299
// begin if GetWeapon ( i ) = ru_time_lapser then
76232: LD_VAR 0 4
76236: PPUSH
76237: CALL_OW 264
76241: PUSH
76242: LD_INT 49
76244: EQUAL
76245: IFFALSE 76273
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76247: LD_VAR 0 4
76251: PPUSH
76252: LD_VAR 0 6
76256: PPUSH
76257: LD_VAR 0 4
76261: PPUSH
76262: CALL_OW 74
76266: PPUSH
76267: CALL_OW 112
76271: GO 76297
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76273: LD_VAR 0 4
76277: PPUSH
76278: LD_VAR 0 6
76282: PPUSH
76283: LD_VAR 0 4
76287: PPUSH
76288: CALL_OW 74
76292: PPUSH
76293: CALL_OW 115
// end else
76297: GO 76399
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76299: LD_VAR 0 4
76303: PPUSH
76304: LD_VAR 0 2
76308: PUSH
76309: LD_VAR 0 9
76313: ARRAY
76314: PUSH
76315: LD_INT 1
76317: ARRAY
76318: PPUSH
76319: LD_VAR 0 2
76323: PUSH
76324: LD_VAR 0 9
76328: ARRAY
76329: PUSH
76330: LD_INT 2
76332: ARRAY
76333: PPUSH
76334: CALL_OW 297
76338: PUSH
76339: LD_INT 6
76341: GREATER
76342: IFFALSE 76385
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76344: LD_VAR 0 4
76348: PPUSH
76349: LD_VAR 0 2
76353: PUSH
76354: LD_VAR 0 9
76358: ARRAY
76359: PUSH
76360: LD_INT 1
76362: ARRAY
76363: PPUSH
76364: LD_VAR 0 2
76368: PUSH
76369: LD_VAR 0 9
76373: ARRAY
76374: PUSH
76375: LD_INT 2
76377: ARRAY
76378: PPUSH
76379: CALL_OW 114
76383: GO 76399
// SetTag ( i , tag ) ;
76385: LD_VAR 0 4
76389: PPUSH
76390: LD_VAR 0 9
76394: PPUSH
76395: CALL_OW 109
// end else
76399: GO 76472
// if enemy then
76401: LD_VAR 0 5
76405: IFFALSE 76472
// begin if GetWeapon ( i ) = ru_time_lapser then
76407: LD_VAR 0 4
76411: PPUSH
76412: CALL_OW 264
76416: PUSH
76417: LD_INT 49
76419: EQUAL
76420: IFFALSE 76448
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76422: LD_VAR 0 4
76426: PPUSH
76427: LD_VAR 0 5
76431: PPUSH
76432: LD_VAR 0 4
76436: PPUSH
76437: CALL_OW 74
76441: PPUSH
76442: CALL_OW 112
76446: GO 76472
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76448: LD_VAR 0 4
76452: PPUSH
76453: LD_VAR 0 5
76457: PPUSH
76458: LD_VAR 0 4
76462: PPUSH
76463: CALL_OW 74
76467: PPUSH
76468: CALL_OW 115
// end ; end ;
76472: GO 76067
76474: POP
76475: POP
// end ;
76476: LD_VAR 0 3
76480: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76481: LD_INT 0
76483: PPUSH
76484: PPUSH
76485: PPUSH
// if not unit or IsInUnit ( unit ) then
76486: LD_VAR 0 1
76490: NOT
76491: PUSH
76492: LD_VAR 0 1
76496: PPUSH
76497: CALL_OW 310
76501: OR
76502: IFFALSE 76506
// exit ;
76504: GO 76597
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76506: LD_ADDR_VAR 0 4
76510: PUSH
76511: LD_VAR 0 1
76515: PPUSH
76516: CALL_OW 250
76520: PPUSH
76521: LD_VAR 0 2
76525: PPUSH
76526: LD_INT 1
76528: PPUSH
76529: CALL_OW 272
76533: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76534: LD_ADDR_VAR 0 5
76538: PUSH
76539: LD_VAR 0 1
76543: PPUSH
76544: CALL_OW 251
76548: PPUSH
76549: LD_VAR 0 2
76553: PPUSH
76554: LD_INT 1
76556: PPUSH
76557: CALL_OW 273
76561: ST_TO_ADDR
// if ValidHex ( x , y ) then
76562: LD_VAR 0 4
76566: PPUSH
76567: LD_VAR 0 5
76571: PPUSH
76572: CALL_OW 488
76576: IFFALSE 76597
// ComTurnXY ( unit , x , y ) ;
76578: LD_VAR 0 1
76582: PPUSH
76583: LD_VAR 0 4
76587: PPUSH
76588: LD_VAR 0 5
76592: PPUSH
76593: CALL_OW 118
// end ;
76597: LD_VAR 0 3
76601: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76602: LD_INT 0
76604: PPUSH
76605: PPUSH
// result := false ;
76606: LD_ADDR_VAR 0 3
76610: PUSH
76611: LD_INT 0
76613: ST_TO_ADDR
// if not units then
76614: LD_VAR 0 2
76618: NOT
76619: IFFALSE 76623
// exit ;
76621: GO 76668
// for i in units do
76623: LD_ADDR_VAR 0 4
76627: PUSH
76628: LD_VAR 0 2
76632: PUSH
76633: FOR_IN
76634: IFFALSE 76666
// if See ( side , i ) then
76636: LD_VAR 0 1
76640: PPUSH
76641: LD_VAR 0 4
76645: PPUSH
76646: CALL_OW 292
76650: IFFALSE 76664
// begin result := true ;
76652: LD_ADDR_VAR 0 3
76656: PUSH
76657: LD_INT 1
76659: ST_TO_ADDR
// exit ;
76660: POP
76661: POP
76662: GO 76668
// end ;
76664: GO 76633
76666: POP
76667: POP
// end ;
76668: LD_VAR 0 3
76672: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76673: LD_INT 0
76675: PPUSH
76676: PPUSH
76677: PPUSH
76678: PPUSH
// if not unit or not points then
76679: LD_VAR 0 1
76683: NOT
76684: PUSH
76685: LD_VAR 0 2
76689: NOT
76690: OR
76691: IFFALSE 76695
// exit ;
76693: GO 76785
// dist := 99999 ;
76695: LD_ADDR_VAR 0 5
76699: PUSH
76700: LD_INT 99999
76702: ST_TO_ADDR
// for i in points do
76703: LD_ADDR_VAR 0 4
76707: PUSH
76708: LD_VAR 0 2
76712: PUSH
76713: FOR_IN
76714: IFFALSE 76783
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76716: LD_ADDR_VAR 0 6
76720: PUSH
76721: LD_VAR 0 1
76725: PPUSH
76726: LD_VAR 0 4
76730: PUSH
76731: LD_INT 1
76733: ARRAY
76734: PPUSH
76735: LD_VAR 0 4
76739: PUSH
76740: LD_INT 2
76742: ARRAY
76743: PPUSH
76744: CALL_OW 297
76748: ST_TO_ADDR
// if tmpDist < dist then
76749: LD_VAR 0 6
76753: PUSH
76754: LD_VAR 0 5
76758: LESS
76759: IFFALSE 76781
// begin result := i ;
76761: LD_ADDR_VAR 0 3
76765: PUSH
76766: LD_VAR 0 4
76770: ST_TO_ADDR
// dist := tmpDist ;
76771: LD_ADDR_VAR 0 5
76775: PUSH
76776: LD_VAR 0 6
76780: ST_TO_ADDR
// end ; end ;
76781: GO 76713
76783: POP
76784: POP
// end ;
76785: LD_VAR 0 3
76789: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76790: LD_INT 0
76792: PPUSH
// uc_side := side ;
76793: LD_ADDR_OWVAR 20
76797: PUSH
76798: LD_VAR 0 1
76802: ST_TO_ADDR
// uc_nation := 3 ;
76803: LD_ADDR_OWVAR 21
76807: PUSH
76808: LD_INT 3
76810: ST_TO_ADDR
// vc_chassis := 25 ;
76811: LD_ADDR_OWVAR 37
76815: PUSH
76816: LD_INT 25
76818: ST_TO_ADDR
// vc_engine := engine_siberite ;
76819: LD_ADDR_OWVAR 39
76823: PUSH
76824: LD_INT 3
76826: ST_TO_ADDR
// vc_control := control_computer ;
76827: LD_ADDR_OWVAR 38
76831: PUSH
76832: LD_INT 3
76834: ST_TO_ADDR
// vc_weapon := 59 ;
76835: LD_ADDR_OWVAR 40
76839: PUSH
76840: LD_INT 59
76842: ST_TO_ADDR
// result := CreateVehicle ;
76843: LD_ADDR_VAR 0 5
76847: PUSH
76848: CALL_OW 45
76852: ST_TO_ADDR
// SetDir ( result , d ) ;
76853: LD_VAR 0 5
76857: PPUSH
76858: LD_VAR 0 4
76862: PPUSH
76863: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76867: LD_VAR 0 5
76871: PPUSH
76872: LD_VAR 0 2
76876: PPUSH
76877: LD_VAR 0 3
76881: PPUSH
76882: LD_INT 0
76884: PPUSH
76885: CALL_OW 48
// end ;
76889: LD_VAR 0 5
76893: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76894: LD_INT 0
76896: PPUSH
76897: PPUSH
76898: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76899: LD_ADDR_VAR 0 2
76903: PUSH
76904: LD_INT 0
76906: PUSH
76907: LD_INT 0
76909: PUSH
76910: LD_INT 0
76912: PUSH
76913: LD_INT 0
76915: PUSH
76916: EMPTY
76917: LIST
76918: LIST
76919: LIST
76920: LIST
76921: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76922: LD_VAR 0 1
76926: NOT
76927: PUSH
76928: LD_VAR 0 1
76932: PPUSH
76933: CALL_OW 264
76937: PUSH
76938: LD_INT 12
76940: PUSH
76941: LD_INT 51
76943: PUSH
76944: LD_INT 32
76946: PUSH
76947: LD_EXP 33
76951: PUSH
76952: EMPTY
76953: LIST
76954: LIST
76955: LIST
76956: LIST
76957: IN
76958: NOT
76959: OR
76960: IFFALSE 76964
// exit ;
76962: GO 77062
// for i := 1 to 3 do
76964: LD_ADDR_VAR 0 3
76968: PUSH
76969: DOUBLE
76970: LD_INT 1
76972: DEC
76973: ST_TO_ADDR
76974: LD_INT 3
76976: PUSH
76977: FOR_TO
76978: IFFALSE 77060
// begin tmp := GetCargo ( cargo , i ) ;
76980: LD_ADDR_VAR 0 4
76984: PUSH
76985: LD_VAR 0 1
76989: PPUSH
76990: LD_VAR 0 3
76994: PPUSH
76995: CALL_OW 289
76999: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77000: LD_ADDR_VAR 0 2
77004: PUSH
77005: LD_VAR 0 2
77009: PPUSH
77010: LD_VAR 0 3
77014: PPUSH
77015: LD_VAR 0 4
77019: PPUSH
77020: CALL_OW 1
77024: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77025: LD_ADDR_VAR 0 2
77029: PUSH
77030: LD_VAR 0 2
77034: PPUSH
77035: LD_INT 4
77037: PPUSH
77038: LD_VAR 0 2
77042: PUSH
77043: LD_INT 4
77045: ARRAY
77046: PUSH
77047: LD_VAR 0 4
77051: PLUS
77052: PPUSH
77053: CALL_OW 1
77057: ST_TO_ADDR
// end ;
77058: GO 76977
77060: POP
77061: POP
// end ; end_of_file
77062: LD_VAR 0 2
77066: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77067: LD_VAR 0 1
77071: PUSH
77072: LD_INT 200
77074: DOUBLE
77075: GREATEREQUAL
77076: IFFALSE 77084
77078: LD_INT 299
77080: DOUBLE
77081: LESSEQUAL
77082: IFTRUE 77086
77084: GO 77118
77086: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77087: LD_VAR 0 1
77091: PPUSH
77092: LD_VAR 0 2
77096: PPUSH
77097: LD_VAR 0 3
77101: PPUSH
77102: LD_VAR 0 4
77106: PPUSH
77107: LD_VAR 0 5
77111: PPUSH
77112: CALL 32407 0 5
77116: GO 77195
77118: LD_INT 300
77120: DOUBLE
77121: GREATEREQUAL
77122: IFFALSE 77130
77124: LD_INT 399
77126: DOUBLE
77127: LESSEQUAL
77128: IFTRUE 77132
77130: GO 77194
77132: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77133: LD_VAR 0 1
77137: PPUSH
77138: LD_VAR 0 2
77142: PPUSH
77143: LD_VAR 0 3
77147: PPUSH
77148: LD_VAR 0 4
77152: PPUSH
77153: LD_VAR 0 5
77157: PPUSH
77158: LD_VAR 0 6
77162: PPUSH
77163: LD_VAR 0 7
77167: PPUSH
77168: LD_VAR 0 8
77172: PPUSH
77173: LD_VAR 0 9
77177: PPUSH
77178: LD_VAR 0 10
77182: PPUSH
77183: LD_VAR 0 11
77187: PPUSH
77188: CALL 30049 0 11
77192: GO 77195
77194: POP
// end ;
77195: PPOPN 11
77197: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77198: LD_VAR 0 1
77202: PPUSH
77203: LD_VAR 0 2
77207: PPUSH
77208: LD_VAR 0 3
77212: PPUSH
77213: LD_VAR 0 4
77217: PPUSH
77218: LD_VAR 0 5
77222: PPUSH
77223: CALL 32143 0 5
// end ; end_of_file
77227: PPOPN 5
77229: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77230: LD_VAR 0 1
77234: PPUSH
77235: LD_VAR 0 2
77239: PPUSH
77240: LD_VAR 0 3
77244: PPUSH
77245: LD_VAR 0 4
77249: PPUSH
77250: LD_VAR 0 5
77254: PPUSH
77255: LD_VAR 0 6
77259: PPUSH
77260: CALL 17742 0 6
// end ;
77264: PPOPN 6
77266: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77267: LD_INT 0
77269: PPUSH
// begin if not units then
77270: LD_VAR 0 1
77274: NOT
77275: IFFALSE 77279
// exit ;
77277: GO 77367
// if p1 = 1 then
77279: LD_VAR 0 2
77283: PUSH
77284: LD_INT 1
77286: EQUAL
77287: IFFALSE 77367
// begin if p2 = 1 then
77289: LD_VAR 0 3
77293: PUSH
77294: LD_INT 1
77296: EQUAL
77297: IFFALSE 77328
// begin for i in units do
77299: LD_ADDR_VAR 0 7
77303: PUSH
77304: LD_VAR 0 1
77308: PUSH
77309: FOR_IN
77310: IFFALSE 77326
// begin SetUnitAttackType ( i , 3 ) ;
77312: LD_VAR 0 7
77316: PPUSH
77317: LD_INT 3
77319: PPUSH
77320: CALL_OW 603
// end ;
77324: GO 77309
77326: POP
77327: POP
// end ; if p2 = 2 then
77328: LD_VAR 0 3
77332: PUSH
77333: LD_INT 2
77335: EQUAL
77336: IFFALSE 77367
// begin for i in units do
77338: LD_ADDR_VAR 0 7
77342: PUSH
77343: LD_VAR 0 1
77347: PUSH
77348: FOR_IN
77349: IFFALSE 77365
// begin SetUnitAttackType ( i , 1 ) ;
77351: LD_VAR 0 7
77355: PPUSH
77356: LD_INT 1
77358: PPUSH
77359: CALL_OW 603
// end ;
77363: GO 77348
77365: POP
77366: POP
// end ; end ; end ;
77367: PPOPN 7
77369: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77370: CALL 17717 0 0
// end ;
77374: PPOPN 1
77376: END
