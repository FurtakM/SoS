// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 84 0 0
// PrepareAmerican ;
  19: CALL 225 0 0
// PrepareRussian ;
  23: CALL 8284 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 72609 0 9
// Action ;
  79: CALL 13843 0 0
// end ;
  83: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export gammaCommander ; function Init ; begin
  84: LD_INT 0
  86: PPUSH
// debug := false ;
  87: LD_ADDR_EXP 1
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
  95: LD_ADDR_EXP 10
  99: PUSH
 100: LD_STRING GammaCommander
 102: PPUSH
 103: LD_INT 3
 105: PPUSH
 106: CALL_OW 30
 110: ST_TO_ADDR
// waitingForSikorski := false ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// deltaSupport := false ;
 119: LD_ADDR_EXP 5
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seenComputer := false ;
 127: LD_ADDR_EXP 6
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// jmmArrival := false ;
 135: LD_ADDR_EXP 7
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 143: LD_ADDR_EXP 3
 147: PUSH
 148: LD_INT 21000
 150: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// sikorskiStatus := 1 ;
 159: LD_ADDR_EXP 8
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// sikorskiIsKilled := false ;
 167: LD_ADDR_EXP 9
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// end ;
 175: LD_VAR 0 1
 179: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 180: LD_INT 22
 182: PUSH
 183: LD_INT 1
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 34
 192: PUSH
 193: LD_INT 6
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: PPUSH
 204: CALL_OW 69
 208: PUSH
 209: LD_INT 6
 211: GREATEREQUAL
 212: IFFALSE 224
 214: GO 216
 216: DISABLE
// SetAchievement ( ACH_ARMOR ) ; end_of_file
 217: LD_STRING ACH_ARMOR
 219: PPUSH
 220: CALL_OW 543
 224: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 225: LD_INT 0
 227: PPUSH
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
// uc_side := 1 ;
 243: LD_ADDR_OWVAR 20
 247: PUSH
 248: LD_INT 1
 250: ST_TO_ADDR
// uc_nation := 1 ;
 251: LD_ADDR_OWVAR 21
 255: PUSH
 256: LD_INT 1
 258: ST_TO_ADDR
// PrepareGammaBase ;
 259: CALL 2420 0 0
// x := 52 ;
 263: LD_ADDR_VAR 0 13
 267: PUSH
 268: LD_INT 52
 270: ST_TO_ADDR
// y := 16 ;
 271: LD_ADDR_VAR 0 14
 275: PUSH
 276: LD_INT 16
 278: ST_TO_ADDR
// case gammaCommander of 1 :
 279: LD_EXP 10
 283: PUSH
 284: LD_INT 1
 286: DOUBLE
 287: EQUAL
 288: IFTRUE 292
 290: GO 377
 292: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 293: LD_ADDR_EXP 13
 297: PUSH
 298: LD_STRING Donaldson
 300: PPUSH
 301: LD_INT 1
 303: PPUSH
 304: LD_STRING 04_
 306: PPUSH
 307: CALL 38526 0 3
 311: ST_TO_ADDR
// if HexInfo ( x , y ) then
 312: LD_VAR 0 13
 316: PPUSH
 317: LD_VAR 0 14
 321: PPUSH
 322: CALL_OW 428
 326: IFFALSE 344
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 328: LD_EXP 13
 332: PPUSH
 333: LD_EXP 27
 337: PPUSH
 338: CALL_OW 52
 342: GO 366
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 344: LD_EXP 13
 348: PPUSH
 349: LD_VAR 0 13
 353: PPUSH
 354: LD_VAR 0 14
 358: PPUSH
 359: LD_INT 0
 361: PPUSH
 362: CALL_OW 48
// ComHold ( Donaldson ) ;
 366: LD_EXP 13
 370: PPUSH
 371: CALL_OW 140
// end ; 2 :
 375: GO 564
 377: LD_INT 2
 379: DOUBLE
 380: EQUAL
 381: IFTRUE 385
 383: GO 470
 385: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 386: LD_ADDR_EXP 12
 390: PUSH
 391: LD_STRING Brown
 393: PPUSH
 394: LD_INT 1
 396: PPUSH
 397: LD_STRING 04_
 399: PPUSH
 400: CALL 38526 0 3
 404: ST_TO_ADDR
// if HexInfo ( x , y ) then
 405: LD_VAR 0 13
 409: PPUSH
 410: LD_VAR 0 14
 414: PPUSH
 415: CALL_OW 428
 419: IFFALSE 437
// PlaceHumanInUnit ( Brown , amDepot ) else
 421: LD_EXP 12
 425: PPUSH
 426: LD_EXP 27
 430: PPUSH
 431: CALL_OW 52
 435: GO 459
// PlaceUnitXY ( Brown , x , y , false ) ;
 437: LD_EXP 12
 441: PPUSH
 442: LD_VAR 0 13
 446: PPUSH
 447: LD_VAR 0 14
 451: PPUSH
 452: LD_INT 0
 454: PPUSH
 455: CALL_OW 48
// ComHold ( Brown ) ;
 459: LD_EXP 12
 463: PPUSH
 464: CALL_OW 140
// end ; 3 :
 468: GO 564
 470: LD_INT 3
 472: DOUBLE
 473: EQUAL
 474: IFTRUE 478
 476: GO 563
 478: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 479: LD_ADDR_EXP 21
 483: PUSH
 484: LD_STRING VanHouten
 486: PPUSH
 487: LD_INT 0
 489: PPUSH
 490: LD_STRING 
 492: PPUSH
 493: CALL 38526 0 3
 497: ST_TO_ADDR
// if HexInfo ( x , y ) then
 498: LD_VAR 0 13
 502: PPUSH
 503: LD_VAR 0 14
 507: PPUSH
 508: CALL_OW 428
 512: IFFALSE 530
// PlaceHumanInUnit ( Houten , amDepot ) else
 514: LD_EXP 21
 518: PPUSH
 519: LD_EXP 27
 523: PPUSH
 524: CALL_OW 52
 528: GO 552
// PlaceUnitXY ( Houten , x , y , false ) ;
 530: LD_EXP 21
 534: PPUSH
 535: LD_VAR 0 13
 539: PPUSH
 540: LD_VAR 0 14
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL_OW 48
// ComHold ( Houten ) ;
 552: LD_EXP 21
 556: PPUSH
 557: CALL_OW 140
// end ; end ;
 561: GO 564
 563: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 564: LD_ADDR_EXP 25
 568: PUSH
 569: LD_STRING Harisson
 571: PPUSH
 572: LD_INT 0
 574: PPUSH
 575: LD_STRING 
 577: PPUSH
 578: CALL 38526 0 3
 582: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 583: LD_ADDR_EXP 26
 587: PUSH
 588: LD_STRING Powell
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: LD_STRING 
 596: PPUSH
 597: CALL 38526 0 3
 601: ST_TO_ADDR
// tmp := [ ] ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: EMPTY
 608: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 609: LD_STRING 04_Lisa
 611: PUSH
 612: EMPTY
 613: LIST
 614: PPUSH
 615: CALL_OW 28
 619: PUSH
 620: LD_STRING LisaInDelta
 622: PPUSH
 623: LD_INT 0
 625: PPUSH
 626: CALL_OW 30
 630: NOT
 631: AND
 632: PUSH
 633: LD_STRING 07_Lisa
 635: PUSH
 636: EMPTY
 637: LIST
 638: PPUSH
 639: CALL_OW 28
 643: NOT
 644: AND
 645: IFFALSE 688
// begin Lisa := PrepareUnit ( Lisa , true , 04_ ) ;
 647: LD_ADDR_EXP 16
 651: PUSH
 652: LD_STRING Lisa
 654: PPUSH
 655: LD_INT 1
 657: PPUSH
 658: LD_STRING 04_
 660: PPUSH
 661: CALL 38526 0 3
 665: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 666: LD_ADDR_VAR 0 5
 670: PUSH
 671: LD_VAR 0 5
 675: PPUSH
 676: LD_EXP 16
 680: PPUSH
 681: CALL 75927 0 2
 685: ST_TO_ADDR
// end else
 686: GO 747
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 688: LD_EXP 16
 692: NOT
 693: PUSH
 694: LD_STRING LisaIn07
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 30
 704: NOT
 705: AND
 706: IFFALSE 747
// begin Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 708: LD_ADDR_EXP 16
 712: PUSH
 713: LD_STRING Lisa
 715: PPUSH
 716: LD_INT 1
 718: PPUSH
 719: LD_STRING 07_
 721: PPUSH
 722: CALL 38526 0 3
 726: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Lisa ) ;
 727: LD_ADDR_VAR 0 5
 731: PUSH
 732: LD_VAR 0 5
 736: PPUSH
 737: LD_EXP 16
 741: PPUSH
 742: CALL 75927 0 2
 746: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 747: LD_STRING 04_Bobby
 749: PUSH
 750: EMPTY
 751: LIST
 752: PPUSH
 753: CALL_OW 28
 757: PUSH
 758: LD_STRING BobbyInDelta
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: NOT
 769: AND
 770: PUSH
 771: LD_STRING 07_Bobby
 773: PUSH
 774: EMPTY
 775: LIST
 776: PPUSH
 777: CALL_OW 28
 781: NOT
 782: AND
 783: IFFALSE 826
// begin Bobby := PrepareUnit ( Bobby , true , 04_ ) ;
 785: LD_ADDR_EXP 14
 789: PUSH
 790: LD_STRING Bobby
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: LD_STRING 04_
 798: PPUSH
 799: CALL 38526 0 3
 803: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 804: LD_ADDR_VAR 0 5
 808: PUSH
 809: LD_VAR 0 5
 813: PPUSH
 814: LD_EXP 14
 818: PPUSH
 819: CALL 75927 0 2
 823: ST_TO_ADDR
// end else
 824: GO 885
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 826: LD_EXP 14
 830: NOT
 831: PUSH
 832: LD_STRING BobbyIn07
 834: PPUSH
 835: LD_INT 0
 837: PPUSH
 838: CALL_OW 30
 842: NOT
 843: AND
 844: IFFALSE 885
// begin Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 846: LD_ADDR_EXP 14
 850: PUSH
 851: LD_STRING Bobby
 853: PPUSH
 854: LD_INT 1
 856: PPUSH
 857: LD_STRING 07_
 859: PPUSH
 860: CALL 38526 0 3
 864: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Bobby ) ;
 865: LD_ADDR_VAR 0 5
 869: PUSH
 870: LD_VAR 0 5
 874: PPUSH
 875: LD_EXP 14
 879: PPUSH
 880: CALL 75927 0 2
 884: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 885: LD_STRING 04_Cyrus
 887: PUSH
 888: EMPTY
 889: LIST
 890: PPUSH
 891: CALL_OW 28
 895: PUSH
 896: LD_STRING CyrusInDelta
 898: PPUSH
 899: LD_INT 0
 901: PPUSH
 902: CALL_OW 30
 906: NOT
 907: AND
 908: PUSH
 909: LD_STRING 07_Cyrus
 911: PUSH
 912: EMPTY
 913: LIST
 914: PPUSH
 915: CALL_OW 28
 919: NOT
 920: AND
 921: IFFALSE 964
// begin Cyrus := PrepareUnit ( Cyrus , true , 04_ ) ;
 923: LD_ADDR_EXP 15
 927: PUSH
 928: LD_STRING Cyrus
 930: PPUSH
 931: LD_INT 1
 933: PPUSH
 934: LD_STRING 04_
 936: PPUSH
 937: CALL 38526 0 3
 941: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
 942: LD_ADDR_VAR 0 5
 946: PUSH
 947: LD_VAR 0 5
 951: PPUSH
 952: LD_EXP 15
 956: PPUSH
 957: CALL 75927 0 2
 961: ST_TO_ADDR
// end else
 962: GO 1023
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
 964: LD_EXP 15
 968: NOT
 969: PUSH
 970: LD_STRING CyrusIn07
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: CALL_OW 30
 980: NOT
 981: AND
 982: IFFALSE 1023
// begin Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
 984: LD_ADDR_EXP 15
 988: PUSH
 989: LD_STRING Cyrus
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: LD_STRING 07_
 997: PPUSH
 998: CALL 38526 0 3
1002: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Cyrus ) ;
1003: LD_ADDR_VAR 0 5
1007: PUSH
1008: LD_VAR 0 5
1012: PPUSH
1013: LD_EXP 15
1017: PPUSH
1018: CALL 75927 0 2
1022: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1023: LD_STRING 04_Brown
1025: PUSH
1026: EMPTY
1027: LIST
1028: PPUSH
1029: CALL_OW 28
1033: PUSH
1034: LD_STRING BrownInDelta
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL_OW 30
1044: NOT
1045: AND
1046: PUSH
1047: LD_STRING 07_Brown
1049: PUSH
1050: EMPTY
1051: LIST
1052: PPUSH
1053: CALL_OW 28
1057: NOT
1058: AND
1059: PUSH
1060: LD_EXP 10
1064: PUSH
1065: LD_INT 2
1067: NONEQUAL
1068: AND
1069: IFFALSE 1112
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1071: LD_ADDR_EXP 12
1075: PUSH
1076: LD_STRING Brown
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: LD_STRING 04_
1084: PPUSH
1085: CALL 38526 0 3
1089: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1090: LD_ADDR_VAR 0 5
1094: PUSH
1095: LD_VAR 0 5
1099: PPUSH
1100: LD_EXP 12
1104: PPUSH
1105: CALL 75927 0 2
1109: ST_TO_ADDR
// end else
1110: GO 1181
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1112: LD_EXP 12
1116: NOT
1117: PUSH
1118: LD_STRING BrownIn07
1120: PPUSH
1121: LD_INT 0
1123: PPUSH
1124: CALL_OW 30
1128: NOT
1129: AND
1130: PUSH
1131: LD_EXP 10
1135: PUSH
1136: LD_INT 2
1138: NONEQUAL
1139: AND
1140: IFFALSE 1181
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1142: LD_ADDR_EXP 12
1146: PUSH
1147: LD_STRING Brown
1149: PPUSH
1150: LD_INT 1
1152: PPUSH
1153: LD_STRING 07_
1155: PPUSH
1156: CALL 38526 0 3
1160: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1161: LD_ADDR_VAR 0 5
1165: PUSH
1166: LD_VAR 0 5
1170: PPUSH
1171: LD_EXP 12
1175: PPUSH
1176: CALL 75927 0 2
1180: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1181: LD_STRING 04_Donaldson
1183: PUSH
1184: EMPTY
1185: LIST
1186: PPUSH
1187: CALL_OW 28
1191: PUSH
1192: LD_STRING DonaldsonInDelta
1194: PPUSH
1195: LD_INT 0
1197: PPUSH
1198: CALL_OW 30
1202: NOT
1203: AND
1204: PUSH
1205: LD_STRING 07_Donaldson
1207: PUSH
1208: EMPTY
1209: LIST
1210: PPUSH
1211: CALL_OW 28
1215: NOT
1216: AND
1217: PUSH
1218: LD_EXP 10
1222: PUSH
1223: LD_INT 1
1225: NONEQUAL
1226: AND
1227: IFFALSE 1270
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1229: LD_ADDR_EXP 13
1233: PUSH
1234: LD_STRING Donaldson
1236: PPUSH
1237: LD_INT 1
1239: PPUSH
1240: LD_STRING 04_
1242: PPUSH
1243: CALL 38526 0 3
1247: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1248: LD_ADDR_VAR 0 5
1252: PUSH
1253: LD_VAR 0 5
1257: PPUSH
1258: LD_EXP 13
1262: PPUSH
1263: CALL 75927 0 2
1267: ST_TO_ADDR
// end else
1268: GO 1339
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1270: LD_EXP 13
1274: NOT
1275: PUSH
1276: LD_STRING DonaldsonIn07
1278: PPUSH
1279: LD_INT 0
1281: PPUSH
1282: CALL_OW 30
1286: NOT
1287: AND
1288: PUSH
1289: LD_EXP 10
1293: PUSH
1294: LD_INT 1
1296: NONEQUAL
1297: AND
1298: IFFALSE 1339
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1300: LD_ADDR_EXP 13
1304: PUSH
1305: LD_STRING Donaldson
1307: PPUSH
1308: LD_INT 1
1310: PPUSH
1311: LD_STRING 07_
1313: PPUSH
1314: CALL 38526 0 3
1318: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1319: LD_ADDR_VAR 0 5
1323: PUSH
1324: LD_VAR 0 5
1328: PPUSH
1329: LD_EXP 13
1333: PPUSH
1334: CALL 75927 0 2
1338: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1339: LD_STRING KhatamIn07
1341: PPUSH
1342: LD_INT 0
1344: PPUSH
1345: CALL_OW 30
1349: NOT
1350: IFFALSE 1391
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1352: LD_ADDR_EXP 20
1356: PUSH
1357: LD_STRING Khatam
1359: PPUSH
1360: LD_INT 1
1362: PPUSH
1363: LD_STRING 07_
1365: PPUSH
1366: CALL 38526 0 3
1370: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1371: LD_ADDR_VAR 0 5
1375: PUSH
1376: LD_VAR 0 5
1380: PPUSH
1381: LD_EXP 20
1385: PPUSH
1386: CALL 75927 0 2
1390: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1391: LD_ADDR_VAR 0 6
1395: PUSH
1396: LD_STRING 07_othersGamma
1398: PPUSH
1399: CALL_OW 31
1403: ST_TO_ADDR
// tmp := 5 - others ;
1404: LD_ADDR_VAR 0 4
1408: PUSH
1409: LD_INT 5
1411: PUSH
1412: LD_VAR 0 6
1416: MINUS
1417: ST_TO_ADDR
// if tmp then
1418: LD_VAR 0 4
1422: IFFALSE 1479
// for i := tmp downto 1 do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: DOUBLE
1430: LD_VAR 0 4
1434: INC
1435: ST_TO_ADDR
1436: LD_INT 1
1438: PUSH
1439: FOR_DOWNTO
1440: IFFALSE 1477
// begin PrepareHuman ( false , 1 , 5 ) ;
1442: LD_INT 0
1444: PPUSH
1445: LD_INT 1
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1455: LD_ADDR_VAR 0 6
1459: PUSH
1460: LD_VAR 0 6
1464: PPUSH
1465: CALL_OW 44
1469: PPUSH
1470: CALL 75927 0 2
1474: ST_TO_ADDR
// end ;
1475: GO 1439
1477: POP
1478: POP
// for i in others do
1479: LD_ADDR_VAR 0 2
1483: PUSH
1484: LD_VAR 0 6
1488: PUSH
1489: FOR_IN
1490: IFFALSE 1506
// SetTag ( i , 106 ) ;
1492: LD_VAR 0 2
1496: PPUSH
1497: LD_INT 106
1499: PPUSH
1500: CALL_OW 109
1504: GO 1489
1506: POP
1507: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1508: LD_ADDR_VAR 0 8
1512: PUSH
1513: LD_INT 22
1515: PUSH
1516: LD_INT 1
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 30
1525: PUSH
1526: LD_INT 31
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PPUSH
1537: CALL_OW 69
1541: ST_TO_ADDR
// for i in bun do
1542: LD_ADDR_VAR 0 2
1546: PUSH
1547: LD_VAR 0 8
1551: PUSH
1552: FOR_IN
1553: IFFALSE 1685
// begin x := GetX ( i ) ;
1555: LD_ADDR_VAR 0 13
1559: PUSH
1560: LD_VAR 0 2
1564: PPUSH
1565: CALL_OW 250
1569: ST_TO_ADDR
// y := GetY ( i ) ;
1570: LD_ADDR_VAR 0 14
1574: PUSH
1575: LD_VAR 0 2
1579: PPUSH
1580: CALL_OW 251
1584: ST_TO_ADDR
// d := GetDir ( i ) ;
1585: LD_ADDR_VAR 0 15
1589: PUSH
1590: LD_VAR 0 2
1594: PPUSH
1595: CALL_OW 254
1599: ST_TO_ADDR
// RemoveUnit ( i ) ;
1600: LD_VAR 0 2
1604: PPUSH
1605: CALL_OW 64
// bc_type := b_bunker ;
1609: LD_ADDR_OWVAR 42
1613: PUSH
1614: LD_INT 32
1616: ST_TO_ADDR
// bc_level := 6 ;
1617: LD_ADDR_OWVAR 43
1621: PUSH
1622: LD_INT 6
1624: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1625: LD_ADDR_VAR 0 16
1629: PUSH
1630: LD_VAR 0 13
1634: PPUSH
1635: LD_VAR 0 14
1639: PPUSH
1640: LD_VAR 0 15
1644: PPUSH
1645: CALL_OW 47
1649: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1650: LD_VAR 0 16
1654: PPUSH
1655: LD_INT 5
1657: PUSH
1658: LD_INT 4
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: LD_VAR 0 2
1669: PUSH
1670: LD_INT 2
1672: MOD
1673: PUSH
1674: LD_INT 1
1676: PLUS
1677: ARRAY
1678: PPUSH
1679: CALL_OW 431
// end ;
1683: GO 1552
1685: POP
1686: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1687: LD_ADDR_VAR 0 7
1691: PUSH
1692: LD_INT 22
1694: PUSH
1695: LD_INT 1
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: LD_INT 30
1704: PUSH
1705: LD_INT 5
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PPUSH
1716: CALL_OW 69
1720: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1721: LD_ADDR_VAR 0 9
1725: PUSH
1726: LD_INT 22
1728: PUSH
1729: LD_INT 1
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 2
1738: PUSH
1739: LD_INT 30
1741: PUSH
1742: LD_INT 6
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 30
1751: PUSH
1752: LD_INT 7
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 30
1761: PUSH
1762: LD_INT 8
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PPUSH
1779: CALL_OW 69
1783: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1784: LD_ADDR_VAR 0 10
1788: PUSH
1789: LD_INT 22
1791: PUSH
1792: LD_INT 1
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 30
1801: PUSH
1802: LD_INT 3
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PPUSH
1813: CALL_OW 69
1817: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1818: LD_ADDR_VAR 0 11
1822: PUSH
1823: LD_INT 22
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: PUSH
1833: LD_INT 30
1835: PUSH
1836: LD_INT 36
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PPUSH
1847: CALL_OW 69
1851: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1852: LD_ADDR_VAR 0 8
1856: PUSH
1857: LD_INT 22
1859: PUSH
1860: LD_INT 1
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PUSH
1867: LD_INT 2
1869: PUSH
1870: LD_INT 30
1872: PUSH
1873: LD_INT 31
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 30
1882: PUSH
1883: LD_INT 32
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: PPUSH
1899: CALL_OW 69
1903: ST_TO_ADDR
// for i in others union tmp2 do
1904: LD_ADDR_VAR 0 2
1908: PUSH
1909: LD_VAR 0 6
1913: PUSH
1914: LD_VAR 0 5
1918: UNION
1919: PUSH
1920: FOR_IN
1921: IFFALSE 2413
// begin placed := false ;
1923: LD_ADDR_VAR 0 12
1927: PUSH
1928: LD_INT 0
1930: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1931: LD_VAR 0 2
1935: PPUSH
1936: CALL_OW 257
1940: PUSH
1941: LD_INT 1
1943: EQUAL
1944: IFFALSE 2069
// begin if UnitFilter ( bun , [ f_empty ] ) then
1946: LD_VAR 0 8
1950: PPUSH
1951: LD_INT 58
1953: PUSH
1954: EMPTY
1955: LIST
1956: PPUSH
1957: CALL_OW 72
1961: IFFALSE 2000
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
1963: LD_VAR 0 2
1967: PPUSH
1968: LD_VAR 0 8
1972: PPUSH
1973: LD_INT 58
1975: PUSH
1976: EMPTY
1977: LIST
1978: PPUSH
1979: CALL_OW 72
1983: PUSH
1984: LD_INT 1
1986: ARRAY
1987: PPUSH
1988: CALL_OW 52
// placed := true ;
1992: LD_ADDR_VAR 0 12
1996: PUSH
1997: LD_INT 1
1999: ST_TO_ADDR
// end ; if arm and not placed then
2000: LD_VAR 0 7
2004: PUSH
2005: LD_VAR 0 12
2009: NOT
2010: AND
2011: IFFALSE 2069
// begin for j in arm do
2013: LD_ADDR_VAR 0 3
2017: PUSH
2018: LD_VAR 0 7
2022: PUSH
2023: FOR_IN
2024: IFFALSE 2067
// if UnitsInside ( j ) < 6 then
2026: LD_VAR 0 3
2030: PPUSH
2031: CALL_OW 313
2035: PUSH
2036: LD_INT 6
2038: LESS
2039: IFFALSE 2065
// begin PlaceHumanInUnit ( i , j ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_VAR 0 3
2050: PPUSH
2051: CALL_OW 52
// placed := true ;
2055: LD_ADDR_VAR 0 12
2059: PUSH
2060: LD_INT 1
2062: ST_TO_ADDR
// break ;
2063: GO 2067
// end ;
2065: GO 2023
2067: POP
2068: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2069: LD_VAR 0 2
2073: PPUSH
2074: CALL_OW 257
2078: PUSH
2079: LD_INT 2
2081: EQUAL
2082: IFFALSE 2115
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2084: LD_VAR 0 2
2088: PPUSH
2089: LD_INT 52
2091: PPUSH
2092: LD_INT 20
2094: PPUSH
2095: LD_INT 6
2097: PPUSH
2098: LD_INT 0
2100: PPUSH
2101: CALL_OW 50
// placed := true ;
2105: LD_ADDR_VAR 0 12
2109: PUSH
2110: LD_INT 1
2112: ST_TO_ADDR
// continue ;
2113: GO 1920
// end ; if GetClass ( i ) = class_mechanic then
2115: LD_VAR 0 2
2119: PPUSH
2120: CALL_OW 257
2124: PUSH
2125: LD_INT 3
2127: EQUAL
2128: IFFALSE 2232
// begin if fac then
2130: LD_VAR 0 10
2134: IFFALSE 2232
// begin if ct then
2136: LD_VAR 0 11
2140: IFFALSE 2168
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2142: LD_VAR 0 2
2146: PPUSH
2147: LD_VAR 0 11
2151: PUSH
2152: LD_INT 1
2154: ARRAY
2155: PPUSH
2156: CALL_OW 52
// placed := true ;
2160: LD_ADDR_VAR 0 12
2164: PUSH
2165: LD_INT 1
2167: ST_TO_ADDR
// end ; if placed then
2168: LD_VAR 0 12
2172: IFFALSE 2176
// continue ;
2174: GO 1920
// for j in fac do
2176: LD_ADDR_VAR 0 3
2180: PUSH
2181: LD_VAR 0 10
2185: PUSH
2186: FOR_IN
2187: IFFALSE 2230
// if UnitsInside ( j ) < 6 then
2189: LD_VAR 0 3
2193: PPUSH
2194: CALL_OW 313
2198: PUSH
2199: LD_INT 6
2201: LESS
2202: IFFALSE 2228
// begin PlaceHumanInUnit ( i , j ) ;
2204: LD_VAR 0 2
2208: PPUSH
2209: LD_VAR 0 3
2213: PPUSH
2214: CALL_OW 52
// placed := true ;
2218: LD_ADDR_VAR 0 12
2222: PUSH
2223: LD_INT 1
2225: ST_TO_ADDR
// break ;
2226: GO 2230
// end ;
2228: GO 2186
2230: POP
2231: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2232: LD_VAR 0 2
2236: PPUSH
2237: CALL_OW 257
2241: PUSH
2242: LD_INT 4
2244: EQUAL
2245: IFFALSE 2340
// begin if lab then
2247: LD_VAR 0 9
2251: IFFALSE 2309
// begin for j in lab do
2253: LD_ADDR_VAR 0 3
2257: PUSH
2258: LD_VAR 0 9
2262: PUSH
2263: FOR_IN
2264: IFFALSE 2307
// if UnitsInside ( j ) < 6 then
2266: LD_VAR 0 3
2270: PPUSH
2271: CALL_OW 313
2275: PUSH
2276: LD_INT 6
2278: LESS
2279: IFFALSE 2305
// begin PlaceHumanInUnit ( i , j ) ;
2281: LD_VAR 0 2
2285: PPUSH
2286: LD_VAR 0 3
2290: PPUSH
2291: CALL_OW 52
// placed := true ;
2295: LD_ADDR_VAR 0 12
2299: PUSH
2300: LD_INT 1
2302: ST_TO_ADDR
// break ;
2303: GO 2307
// end ;
2305: GO 2263
2307: POP
2308: POP
// end ; if not placed then
2309: LD_VAR 0 12
2313: NOT
2314: IFFALSE 2340
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2316: LD_VAR 0 2
2320: PPUSH
2321: LD_INT 3
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: CALL_OW 49
// ComHold ( i ) ;
2331: LD_VAR 0 2
2335: PPUSH
2336: CALL_OW 140
// end ; end ; if ct then
2340: LD_VAR 0 11
2344: IFFALSE 2411
// if UnitsInside ( ct [ 1 ] ) then
2346: LD_VAR 0 11
2350: PUSH
2351: LD_INT 1
2353: ARRAY
2354: PPUSH
2355: CALL_OW 313
2359: IFFALSE 2411
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2361: LD_ADDR_VAR 0 2
2365: PUSH
2366: LD_INT 22
2368: PUSH
2369: LD_INT 1
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PUSH
2376: LD_INT 33
2378: PUSH
2379: LD_INT 2
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PPUSH
2390: CALL_OW 69
2394: PUSH
2395: FOR_IN
2396: IFFALSE 2409
// Connect ( i ) ;
2398: LD_VAR 0 2
2402: PPUSH
2403: CALL 46636 0 1
2407: GO 2395
2409: POP
2410: POP
// end ; end ;
2411: GO 1920
2413: POP
2414: POP
// end ;
2415: LD_VAR 0 1
2419: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2420: LD_INT 0
2422: PPUSH
2423: PPUSH
2424: PPUSH
2425: PPUSH
2426: PPUSH
2427: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2428: LD_INT 71
2430: PPUSH
2431: LD_INT 5
2433: PPUSH
2434: LD_INT 1
2436: PPUSH
2437: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2441: LD_ADDR_VAR 0 2
2445: PUSH
2446: LD_STRING GammaBase
2448: PPUSH
2449: EMPTY
2450: PPUSH
2451: CALL_OW 30
2455: ST_TO_ADDR
// if not blist then
2456: LD_VAR 0 2
2460: NOT
2461: IFFALSE 2501
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2463: LD_ADDR_VAR 0 2
2467: PUSH
2468: LD_INT 1
2470: PUSH
2471: LD_INT 52
2473: PUSH
2474: LD_INT 12
2476: PUSH
2477: LD_INT 3
2479: PUSH
2480: LD_INT 3
2482: PUSH
2483: LD_INT 0
2485: PUSH
2486: LD_INT 0
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: PUSH
2498: EMPTY
2499: LIST
2500: ST_TO_ADDR
// uc_side := 1 ;
2501: LD_ADDR_OWVAR 20
2505: PUSH
2506: LD_INT 1
2508: ST_TO_ADDR
// uc_nation := 1 ;
2509: LD_ADDR_OWVAR 21
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// bc_kind1 := - 1 ;
2517: LD_ADDR_OWVAR 44
2521: PUSH
2522: LD_INT 1
2524: NEG
2525: ST_TO_ADDR
// bc_kind2 := - 1 ;
2526: LD_ADDR_OWVAR 45
2530: PUSH
2531: LD_INT 1
2533: NEG
2534: ST_TO_ADDR
// for i in blist do
2535: LD_ADDR_VAR 0 3
2539: PUSH
2540: LD_VAR 0 2
2544: PUSH
2545: FOR_IN
2546: IFFALSE 2822
// begin bc_type := i [ 1 ] ;
2548: LD_ADDR_OWVAR 42
2552: PUSH
2553: LD_VAR 0 3
2557: PUSH
2558: LD_INT 1
2560: ARRAY
2561: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2562: LD_ADDR_OWVAR 43
2566: PUSH
2567: LD_VAR 0 3
2571: PUSH
2572: LD_INT 5
2574: ARRAY
2575: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2576: LD_OWVAR 42
2580: PUSH
2581: LD_INT 6
2583: PUSH
2584: LD_INT 7
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: IN
2591: IFFALSE 2657
// begin if not LoadVariable ( 06_remoteVehs_1 , 0 ) then
2593: LD_STRING 06_remoteVehs_1
2595: PPUSH
2596: LD_INT 0
2598: PPUSH
2599: CALL_OW 30
2603: NOT
2604: IFFALSE 2632
// begin bc_type := b_lab_full ;
2606: LD_ADDR_OWVAR 42
2610: PUSH
2611: LD_INT 8
2613: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2614: LD_ADDR_OWVAR 44
2618: PUSH
2619: LD_INT 10
2621: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2622: LD_ADDR_OWVAR 45
2626: PUSH
2627: LD_INT 15
2629: ST_TO_ADDR
// end else
2630: GO 2657
// begin bc_type := b_lab_half ;
2632: LD_ADDR_OWVAR 42
2636: PUSH
2637: LD_INT 7
2639: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2640: LD_ADDR_OWVAR 44
2644: PUSH
2645: LD_INT 10
2647: ST_TO_ADDR
// bc_kind2 := - 1 ;
2648: LD_ADDR_OWVAR 45
2652: PUSH
2653: LD_INT 1
2655: NEG
2656: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2657: LD_OWVAR 42
2661: PUSH
2662: LD_INT 2
2664: EQUAL
2665: IFFALSE 2675
// bc_type := b_factory ;
2667: LD_ADDR_OWVAR 42
2671: PUSH
2672: LD_INT 3
2674: ST_TO_ADDR
// if bc_type = b_depot then
2675: LD_OWVAR 42
2679: PUSH
2680: LD_INT 0
2682: EQUAL
2683: IFFALSE 2732
// begin bc_type := b_warehouse ;
2685: LD_ADDR_OWVAR 42
2689: PUSH
2690: LD_INT 1
2692: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2693: LD_ADDR_EXP 27
2697: PUSH
2698: LD_VAR 0 3
2702: PUSH
2703: LD_INT 2
2705: ARRAY
2706: PPUSH
2707: LD_VAR 0 3
2711: PUSH
2712: LD_INT 3
2714: ARRAY
2715: PPUSH
2716: LD_VAR 0 3
2720: PUSH
2721: LD_INT 4
2723: ARRAY
2724: PPUSH
2725: CALL_OW 47
2729: ST_TO_ADDR
// continue ;
2730: GO 2545
// end ; if bc_type = b_armoury then
2732: LD_OWVAR 42
2736: PUSH
2737: LD_INT 4
2739: EQUAL
2740: IFFALSE 2750
// bc_type = b_barracks ;
2742: LD_ADDR_OWVAR 42
2746: PUSH
2747: LD_INT 5
2749: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2750: LD_ADDR_VAR 0 4
2754: PUSH
2755: LD_VAR 0 3
2759: PUSH
2760: LD_INT 2
2762: ARRAY
2763: PPUSH
2764: LD_VAR 0 3
2768: PUSH
2769: LD_INT 3
2771: ARRAY
2772: PPUSH
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 4
2780: ARRAY
2781: PPUSH
2782: CALL_OW 47
2786: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2787: LD_VAR 0 4
2791: PPUSH
2792: CALL_OW 266
2796: PUSH
2797: LD_INT 32
2799: EQUAL
2800: IFFALSE 2820
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_VAR 0 3
2811: PUSH
2812: LD_INT 7
2814: ARRAY
2815: PPUSH
2816: CALL_OW 431
// end ;
2820: GO 2545
2822: POP
2823: POP
// if not amDepot then
2824: LD_EXP 27
2828: NOT
2829: IFFALSE 2866
// begin bc_type := b_warehouse ;
2831: LD_ADDR_OWVAR 42
2835: PUSH
2836: LD_INT 1
2838: ST_TO_ADDR
// bc_level := 6 ;
2839: LD_ADDR_OWVAR 43
2843: PUSH
2844: LD_INT 6
2846: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2847: LD_ADDR_EXP 27
2851: PUSH
2852: LD_INT 52
2854: PPUSH
2855: LD_INT 12
2857: PPUSH
2858: LD_INT 3
2860: PPUSH
2861: CALL_OW 47
2865: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2866: LD_ADDR_OWVAR 42
2870: PUSH
2871: LD_INT 5
2873: ST_TO_ADDR
// bc_level := 6 ;
2874: LD_ADDR_OWVAR 43
2878: PUSH
2879: LD_INT 6
2881: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2882: LD_INT 61
2884: PPUSH
2885: LD_INT 29
2887: PPUSH
2888: LD_INT 5
2890: PPUSH
2891: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2895: LD_EXP 27
2899: PPUSH
2900: LD_STRING gamma
2902: PPUSH
2903: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2907: LD_EXP 27
2911: PPUSH
2912: CALL_OW 274
2916: PPUSH
2917: LD_INT 1
2919: PPUSH
2920: LD_INT 400
2922: PUSH
2923: LD_INT 320
2925: PUSH
2926: LD_INT 270
2928: PUSH
2929: LD_INT 230
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: LIST
2936: LIST
2937: PUSH
2938: LD_OWVAR 67
2942: ARRAY
2943: PPUSH
2944: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2948: LD_EXP 27
2952: PPUSH
2953: CALL_OW 274
2957: PPUSH
2958: LD_INT 2
2960: PPUSH
2961: LD_INT 130
2963: PPUSH
2964: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
2968: LD_INT 22
2970: PUSH
2971: LD_INT 1
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: LD_INT 30
2980: PUSH
2981: LD_INT 3
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: PPUSH
2992: CALL_OW 69
2996: IFFALSE 3244
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
2998: LD_ADDR_VAR 0 4
3002: PUSH
3003: LD_INT 22
3005: PUSH
3006: LD_INT 1
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: PUSH
3013: LD_INT 30
3015: PUSH
3016: LD_INT 3
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PPUSH
3027: CALL_OW 69
3031: PUSH
3032: LD_INT 1
3034: ARRAY
3035: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3036: LD_ADDR_VAR 0 6
3040: PUSH
3041: LD_VAR 0 4
3045: PPUSH
3046: CALL_OW 250
3050: PPUSH
3051: LD_VAR 0 4
3055: PPUSH
3056: CALL_OW 251
3060: PPUSH
3061: LD_VAR 0 4
3065: PPUSH
3066: CALL_OW 254
3070: PPUSH
3071: CALL 73566 0 3
3075: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3076: LD_ADDR_VAR 0 2
3080: PUSH
3081: LD_INT 19
3083: PUSH
3084: LD_INT 17
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3091: LD_STRING 06_remoteVehs_1
3093: PPUSH
3094: LD_INT 0
3096: PPUSH
3097: CALL_OW 30
3101: IFFALSE 3124
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3103: LD_ADDR_VAR 0 2
3107: PUSH
3108: LD_VAR 0 2
3112: PPUSH
3113: LD_INT 1
3115: PPUSH
3116: LD_INT 22
3118: PPUSH
3119: CALL_OW 2
3123: ST_TO_ADDR
// for i in tmp do
3124: LD_ADDR_VAR 0 3
3128: PUSH
3129: LD_VAR 0 6
3133: PUSH
3134: FOR_IN
3135: IFFALSE 3242
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3137: LD_VAR 0 3
3141: PUSH
3142: LD_INT 1
3144: ARRAY
3145: PPUSH
3146: LD_VAR 0 3
3150: PUSH
3151: LD_INT 2
3153: ARRAY
3154: PPUSH
3155: CALL_OW 428
3159: PUSH
3160: LD_INT 0
3162: EQUAL
3163: IFFALSE 3240
// begin bc_type := blist [ 1 ] ;
3165: LD_ADDR_OWVAR 42
3169: PUSH
3170: LD_VAR 0 2
3174: PUSH
3175: LD_INT 1
3177: ARRAY
3178: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3179: LD_VAR 0 3
3183: PUSH
3184: LD_INT 1
3186: ARRAY
3187: PPUSH
3188: LD_VAR 0 3
3192: PUSH
3193: LD_INT 2
3195: ARRAY
3196: PPUSH
3197: LD_VAR 0 3
3201: PUSH
3202: LD_INT 3
3204: ARRAY
3205: PPUSH
3206: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: LD_VAR 0 2
3219: PPUSH
3220: LD_INT 1
3222: PPUSH
3223: CALL_OW 3
3227: ST_TO_ADDR
// if blist = 0 then
3228: LD_VAR 0 2
3232: PUSH
3233: LD_INT 0
3235: EQUAL
3236: IFFALSE 3240
// break ;
3238: GO 3242
// end ;
3240: GO 3134
3242: POP
3243: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3244: LD_STRING 06_remoteVehs_1
3246: PPUSH
3247: LD_INT 0
3249: PPUSH
3250: CALL_OW 30
3254: IFFALSE 3707
// begin bc_type := b_control_tower ;
3256: LD_ADDR_OWVAR 42
3260: PUSH
3261: LD_INT 36
3263: ST_TO_ADDR
// bc_level := 4 ;
3264: LD_ADDR_OWVAR 43
3268: PUSH
3269: LD_INT 4
3271: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3272: LD_EXP 27
3276: PPUSH
3277: LD_INT 36
3279: PPUSH
3280: LD_INT 62
3282: PPUSH
3283: LD_INT 12
3285: PPUSH
3286: LD_INT 3
3288: PPUSH
3289: CALL 51768 0 5
3293: PUSH
3294: LD_INT 92
3296: PUSH
3297: LD_INT 62
3299: PUSH
3300: LD_INT 12
3302: PUSH
3303: LD_INT 3
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: NOT
3317: AND
3318: IFFALSE 3335
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3320: LD_INT 62
3322: PPUSH
3323: LD_INT 12
3325: PPUSH
3326: LD_INT 3
3328: PPUSH
3329: CALL_OW 47
3333: GO 3497
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3335: LD_EXP 27
3339: PPUSH
3340: LD_INT 36
3342: PPUSH
3343: LD_INT 37
3345: PPUSH
3346: LD_INT 18
3348: PPUSH
3349: LD_INT 2
3351: PPUSH
3352: CALL 51768 0 5
3356: PUSH
3357: LD_INT 92
3359: PUSH
3360: LD_INT 37
3362: PUSH
3363: LD_INT 18
3365: PUSH
3366: LD_INT 3
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 69
3379: NOT
3380: AND
3381: IFFALSE 3398
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3383: LD_INT 37
3385: PPUSH
3386: LD_INT 18
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 47
3396: GO 3497
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3398: LD_EXP 27
3402: PPUSH
3403: LD_INT 36
3405: PPUSH
3406: LD_INT 66
3408: PPUSH
3409: LD_INT 14
3411: PPUSH
3412: LD_INT 4
3414: PPUSH
3415: CALL 51768 0 5
3419: PUSH
3420: LD_INT 92
3422: PUSH
3423: LD_INT 66
3425: PUSH
3426: LD_INT 14
3428: PUSH
3429: LD_INT 3
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: PPUSH
3438: CALL_OW 69
3442: NOT
3443: AND
3444: IFFALSE 3461
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3446: LD_INT 66
3448: PPUSH
3449: LD_INT 14
3451: PPUSH
3452: LD_INT 4
3454: PPUSH
3455: CALL_OW 47
3459: GO 3497
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3461: LD_EXP 27
3465: PPUSH
3466: LD_INT 36
3468: PPUSH
3469: LD_INT 74
3471: PPUSH
3472: LD_INT 26
3474: PPUSH
3475: LD_INT 4
3477: PPUSH
3478: CALL 51768 0 5
3482: IFFALSE 3497
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3484: LD_INT 74
3486: PPUSH
3487: LD_INT 26
3489: PPUSH
3490: LD_INT 4
3492: PPUSH
3493: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3497: LD_INT 22
3499: PUSH
3500: LD_INT 1
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: LD_INT 30
3509: PUSH
3510: LD_INT 36
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PPUSH
3521: CALL_OW 69
3525: NOT
3526: IFFALSE 3530
// exit ;
3528: GO 4055
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3530: LD_ADDR_VAR 0 3
3534: PUSH
3535: DOUBLE
3536: LD_INT 1
3538: DEC
3539: ST_TO_ADDR
3540: LD_INT 3
3542: PUSH
3543: LD_INT 2
3545: PUSH
3546: LD_INT 2
3548: PUSH
3549: LD_INT 2
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_OWVAR 67
3562: ARRAY
3563: PUSH
3564: FOR_TO
3565: IFFALSE 3705
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3567: LD_ADDR_OWVAR 37
3571: PUSH
3572: LD_INT 3
3574: PUSH
3575: LD_INT 2
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 1
3584: PPUSH
3585: LD_INT 2
3587: PPUSH
3588: CALL_OW 12
3592: ARRAY
3593: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3594: LD_ADDR_OWVAR 39
3598: PUSH
3599: LD_INT 1
3601: PUSH
3602: LD_INT 2
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PUSH
3609: LD_INT 1
3611: PPUSH
3612: LD_INT 2
3614: PPUSH
3615: CALL_OW 12
3619: ARRAY
3620: ST_TO_ADDR
// vc_control := control_remote ;
3621: LD_ADDR_OWVAR 38
3625: PUSH
3626: LD_INT 2
3628: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3629: LD_ADDR_OWVAR 40
3633: PUSH
3634: LD_INT 4
3636: PUSH
3637: LD_INT 3
3639: PUSH
3640: LD_INT 5
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: PUSH
3648: LD_INT 1
3650: PPUSH
3651: LD_INT 3
3653: PPUSH
3654: CALL_OW 12
3658: ARRAY
3659: ST_TO_ADDR
// veh := CreateVehicle ;
3660: LD_ADDR_VAR 0 5
3664: PUSH
3665: CALL_OW 45
3669: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3670: LD_VAR 0 5
3674: PPUSH
3675: LD_INT 3
3677: PPUSH
3678: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3682: LD_VAR 0 5
3686: PPUSH
3687: LD_INT 61
3689: PPUSH
3690: LD_INT 23
3692: PPUSH
3693: LD_INT 9
3695: PPUSH
3696: LD_INT 0
3698: PPUSH
3699: CALL_OW 50
// end ;
3703: GO 3564
3705: POP
3706: POP
// end ; if gammaCommander = 1 then
3707: LD_EXP 10
3711: PUSH
3712: LD_INT 1
3714: EQUAL
3715: IFFALSE 3892
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3717: LD_ADDR_VAR 0 3
3721: PUSH
3722: DOUBLE
3723: LD_INT 1
3725: DEC
3726: ST_TO_ADDR
3727: LD_INT 3
3729: PUSH
3730: LD_INT 3
3732: PUSH
3733: LD_INT 2
3735: PUSH
3736: LD_INT 2
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: PUSH
3745: LD_OWVAR 67
3749: ARRAY
3750: PUSH
3751: FOR_TO
3752: IFFALSE 3888
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3754: LD_ADDR_OWVAR 37
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 1
3771: PPUSH
3772: LD_INT 2
3774: PPUSH
3775: CALL_OW 12
3779: ARRAY
3780: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3781: LD_ADDR_OWVAR 39
3785: PUSH
3786: LD_INT 1
3788: PUSH
3789: LD_INT 2
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 1
3798: PPUSH
3799: LD_INT 2
3801: PPUSH
3802: CALL_OW 12
3806: ARRAY
3807: ST_TO_ADDR
// vc_control := control_manual ;
3808: LD_ADDR_OWVAR 38
3812: PUSH
3813: LD_INT 1
3815: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3816: LD_ADDR_OWVAR 40
3820: PUSH
3821: LD_INT 4
3823: PUSH
3824: LD_INT 5
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PUSH
3831: LD_INT 1
3833: PPUSH
3834: LD_INT 2
3836: PPUSH
3837: CALL_OW 12
3841: ARRAY
3842: ST_TO_ADDR
// veh := CreateVehicle ;
3843: LD_ADDR_VAR 0 5
3847: PUSH
3848: CALL_OW 45
3852: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3853: LD_VAR 0 5
3857: PPUSH
3858: LD_INT 3
3860: PPUSH
3861: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3865: LD_VAR 0 5
3869: PPUSH
3870: LD_INT 61
3872: PPUSH
3873: LD_INT 23
3875: PPUSH
3876: LD_INT 9
3878: PPUSH
3879: LD_INT 0
3881: PPUSH
3882: CALL_OW 50
// end ;
3886: GO 3751
3888: POP
3889: POP
// end else
3890: GO 4055
// if gammaCommander = 2 then
3892: LD_EXP 10
3896: PUSH
3897: LD_INT 2
3899: EQUAL
3900: IFFALSE 4055
// begin bc_type := b_bunker ;
3902: LD_ADDR_OWVAR 42
3906: PUSH
3907: LD_INT 32
3909: ST_TO_ADDR
// bc_level := 6 ;
3910: LD_ADDR_OWVAR 43
3914: PUSH
3915: LD_INT 6
3917: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3918: LD_ADDR_VAR 0 4
3922: PUSH
3923: LD_INT 67
3925: PPUSH
3926: LD_INT 36
3928: PPUSH
3929: LD_INT 5
3931: PPUSH
3932: CALL_OW 47
3936: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3937: LD_VAR 0 4
3941: PPUSH
3942: LD_INT 4
3944: PPUSH
3945: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
3949: LD_ADDR_VAR 0 4
3953: PUSH
3954: LD_INT 61
3956: PPUSH
3957: LD_INT 40
3959: PPUSH
3960: LD_INT 5
3962: PPUSH
3963: CALL_OW 47
3967: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
3968: LD_VAR 0 4
3972: PPUSH
3973: LD_INT 5
3975: PPUSH
3976: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
3980: LD_ADDR_OWVAR 37
3984: PUSH
3985: LD_INT 2
3987: ST_TO_ADDR
// vc_engine := engine_combustion ;
3988: LD_ADDR_OWVAR 39
3992: PUSH
3993: LD_INT 1
3995: ST_TO_ADDR
// vc_control := control_manual ;
3996: LD_ADDR_OWVAR 38
4000: PUSH
4001: LD_INT 1
4003: ST_TO_ADDR
// vc_weapon := us_crane ;
4004: LD_ADDR_OWVAR 40
4008: PUSH
4009: LD_INT 13
4011: ST_TO_ADDR
// veh := CreateVehicle ;
4012: LD_ADDR_VAR 0 5
4016: PUSH
4017: CALL_OW 45
4021: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4022: LD_VAR 0 5
4026: PPUSH
4027: LD_INT 3
4029: PPUSH
4030: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4034: LD_VAR 0 5
4038: PPUSH
4039: LD_INT 61
4041: PPUSH
4042: LD_INT 23
4044: PPUSH
4045: LD_INT 9
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 50
// end ; end ;
4055: LD_VAR 0 1
4059: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4060: LD_INT 0
4062: PPUSH
4063: PPUSH
4064: PPUSH
4065: PPUSH
// uc_side := 1 ;
4066: LD_ADDR_OWVAR 20
4070: PUSH
4071: LD_INT 1
4073: ST_TO_ADDR
// uc_nation := 1 ;
4074: LD_ADDR_OWVAR 21
4078: PUSH
4079: LD_INT 1
4081: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4082: LD_ADDR_EXP 22
4086: PUSH
4087: LD_STRING Denis
4089: PPUSH
4090: LD_EXP 1
4094: NOT
4095: PPUSH
4096: LD_STRING 06c_
4098: PPUSH
4099: CALL 38526 0 3
4103: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4104: LD_EXP 22
4108: PPUSH
4109: LD_INT 4
4111: PPUSH
4112: LD_INT 0
4114: PPUSH
4115: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4119: LD_ADDR_EXP 23
4123: PUSH
4124: LD_STRING Joan
4126: PPUSH
4127: LD_EXP 1
4131: NOT
4132: PPUSH
4133: LD_STRING 06c_
4135: PPUSH
4136: CALL 38526 0 3
4140: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4141: LD_EXP 23
4145: PPUSH
4146: LD_INT 4
4148: PPUSH
4149: LD_INT 0
4151: PPUSH
4152: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4156: LD_STRING GladstoneIn07
4158: PPUSH
4159: LD_INT 0
4161: PPUSH
4162: CALL_OW 30
4166: NOT
4167: IFFALSE 4247
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4169: LD_ADDR_EXP 18
4173: PUSH
4174: LD_STRING Gladstone
4176: PPUSH
4177: LD_EXP 1
4181: NOT
4182: PPUSH
4183: LD_STRING 06c_
4185: PPUSH
4186: CALL 38526 0 3
4190: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4191: LD_EXP 18
4195: NOT
4196: PUSH
4197: LD_STRING GladstoneStayInDelta
4199: PPUSH
4200: LD_INT 0
4202: PPUSH
4203: CALL_OW 30
4207: AND
4208: IFFALSE 4232
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4210: LD_ADDR_EXP 18
4214: PUSH
4215: LD_STRING Gladstone
4217: PPUSH
4218: LD_EXP 1
4222: NOT
4223: PPUSH
4224: LD_STRING 05_
4226: PPUSH
4227: CALL 38526 0 3
4231: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4232: LD_EXP 18
4236: PPUSH
4237: LD_INT 4
4239: PPUSH
4240: LD_INT 0
4242: PPUSH
4243: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4247: LD_STRING LisaStayInDelta
4249: PPUSH
4250: LD_INT 0
4252: PPUSH
4253: CALL_OW 30
4257: IFFALSE 4293
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4259: LD_ADDR_EXP 16
4263: PUSH
4264: LD_STRING Lisa
4266: PPUSH
4267: LD_INT 1
4269: PPUSH
4270: LD_STRING 05_
4272: PPUSH
4273: CALL 38526 0 3
4277: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4278: LD_EXP 16
4282: PPUSH
4283: LD_INT 4
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4293: LD_STRING BobbyStayInDelta
4295: PPUSH
4296: LD_INT 0
4298: PPUSH
4299: CALL_OW 30
4303: IFFALSE 4339
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4305: LD_ADDR_EXP 14
4309: PUSH
4310: LD_STRING Bobby
4312: PPUSH
4313: LD_INT 1
4315: PPUSH
4316: LD_STRING 05_
4318: PPUSH
4319: CALL 38526 0 3
4323: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4324: LD_EXP 14
4328: PPUSH
4329: LD_INT 4
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4339: LD_STRING CyrusStayInDelta
4341: PPUSH
4342: LD_INT 0
4344: PPUSH
4345: CALL_OW 30
4349: IFFALSE 4385
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4351: LD_ADDR_EXP 15
4355: PUSH
4356: LD_STRING Cyrus
4358: PPUSH
4359: LD_INT 1
4361: PPUSH
4362: LD_STRING 05_
4364: PPUSH
4365: CALL 38526 0 3
4369: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4370: LD_EXP 15
4374: PPUSH
4375: LD_INT 4
4377: PPUSH
4378: LD_INT 0
4380: PPUSH
4381: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4385: LD_STRING BrownStayInDelta
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 30
4395: IFFALSE 4431
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4397: LD_ADDR_EXP 12
4401: PUSH
4402: LD_STRING Brown
4404: PPUSH
4405: LD_INT 1
4407: PPUSH
4408: LD_STRING 05_
4410: PPUSH
4411: CALL 38526 0 3
4415: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4416: LD_EXP 12
4420: PPUSH
4421: LD_INT 4
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4431: LD_STRING DonaldsonStayInDelta
4433: PPUSH
4434: LD_INT 0
4436: PPUSH
4437: CALL_OW 30
4441: IFFALSE 4477
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4443: LD_ADDR_EXP 13
4447: PUSH
4448: LD_STRING Donaldson
4450: PPUSH
4451: LD_INT 1
4453: PPUSH
4454: LD_STRING 05_
4456: PPUSH
4457: CALL 38526 0 3
4461: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4462: LD_EXP 13
4466: PPUSH
4467: LD_INT 4
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4477: LD_ADDR_VAR 0 4
4481: PUSH
4482: LD_STRING OthersStayInDelta
4484: PPUSH
4485: CALL_OW 31
4489: ST_TO_ADDR
// if others > 2 then
4490: LD_VAR 0 4
4494: PUSH
4495: LD_INT 2
4497: GREATER
4498: IFFALSE 4561
// begin for j := 1 to 2 do
4500: LD_ADDR_VAR 0 3
4504: PUSH
4505: DOUBLE
4506: LD_INT 1
4508: DEC
4509: ST_TO_ADDR
4510: LD_INT 2
4512: PUSH
4513: FOR_TO
4514: IFFALSE 4557
// begin SetTag ( others [ j ] , 107 ) ;
4516: LD_VAR 0 4
4520: PUSH
4521: LD_VAR 0 3
4525: ARRAY
4526: PPUSH
4527: LD_INT 107
4529: PPUSH
4530: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4534: LD_VAR 0 4
4538: PUSH
4539: LD_VAR 0 3
4543: ARRAY
4544: PPUSH
4545: LD_INT 4
4547: PPUSH
4548: LD_INT 0
4550: PPUSH
4551: CALL_OW 49
// end ;
4555: GO 4513
4557: POP
4558: POP
// end else
4559: GO 4622
// begin for j := 1 to others do
4561: LD_ADDR_VAR 0 3
4565: PUSH
4566: DOUBLE
4567: LD_INT 1
4569: DEC
4570: ST_TO_ADDR
4571: LD_VAR 0 4
4575: PUSH
4576: FOR_TO
4577: IFFALSE 4620
// begin SetTag ( others [ i ] , 107 ) ;
4579: LD_VAR 0 4
4583: PUSH
4584: LD_VAR 0 2
4588: ARRAY
4589: PPUSH
4590: LD_INT 107
4592: PPUSH
4593: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4597: LD_VAR 0 4
4601: PUSH
4602: LD_VAR 0 3
4606: ARRAY
4607: PPUSH
4608: LD_INT 4
4610: PPUSH
4611: LD_INT 0
4613: PPUSH
4614: CALL_OW 49
// end ;
4618: GO 4576
4620: POP
4621: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4622: LD_ADDR_VAR 0 4
4626: PUSH
4627: LD_STRING 06_other_apemans
4629: PPUSH
4630: CALL_OW 31
4634: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4635: LD_VAR 0 4
4639: PUSH
4640: LD_INT 3
4642: PUSH
4643: LD_INT 2
4645: PUSH
4646: LD_INT 2
4648: PUSH
4649: LD_INT 1
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: PUSH
4658: LD_OWVAR 67
4662: ARRAY
4663: GREATEREQUAL
4664: IFFALSE 4697
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4666: LD_ADDR_VAR 0 3
4670: PUSH
4671: LD_INT 3
4673: PUSH
4674: LD_INT 2
4676: PUSH
4677: LD_INT 2
4679: PUSH
4680: LD_INT 1
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: PUSH
4689: LD_OWVAR 67
4693: ARRAY
4694: ST_TO_ADDR
4695: GO 4707
// j := others ;
4697: LD_ADDR_VAR 0 3
4701: PUSH
4702: LD_VAR 0 4
4706: ST_TO_ADDR
// for i := 1 to j do
4707: LD_ADDR_VAR 0 2
4711: PUSH
4712: DOUBLE
4713: LD_INT 1
4715: DEC
4716: ST_TO_ADDR
4717: LD_VAR 0 3
4721: PUSH
4722: FOR_TO
4723: IFFALSE 4748
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4725: LD_VAR 0 4
4729: PUSH
4730: LD_VAR 0 2
4734: ARRAY
4735: PPUSH
4736: LD_INT 4
4738: PPUSH
4739: LD_INT 0
4741: PPUSH
4742: CALL_OW 49
4746: GO 4722
4748: POP
4749: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4750: LD_INT 4
4752: PPUSH
4753: LD_INT 22
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 21
4765: PUSH
4766: LD_INT 1
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: PPUSH
4777: CALL_OW 70
4781: PPUSH
4782: LD_INT 53
4784: PPUSH
4785: LD_INT 19
4787: PPUSH
4788: CALL_OW 111
// end ;
4792: LD_VAR 0 1
4796: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4797: LD_INT 0
4799: PPUSH
4800: PPUSH
4801: PPUSH
4802: PPUSH
4803: PPUSH
4804: PPUSH
4805: PPUSH
4806: PPUSH
4807: PPUSH
4808: PPUSH
4809: PPUSH
4810: PPUSH
4811: PPUSH
4812: PPUSH
4813: PPUSH
// prefix := 07c_ ;
4814: LD_ADDR_VAR 0 11
4818: PUSH
4819: LD_STRING 07c_
4821: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4822: LD_ADDR_VAR 0 9
4826: PUSH
4827: LD_STRING 07_vehicles
4829: PPUSH
4830: EMPTY
4831: PPUSH
4832: CALL_OW 30
4836: ST_TO_ADDR
// if not vehicles and debug then
4837: LD_VAR 0 9
4841: NOT
4842: PUSH
4843: LD_EXP 1
4847: AND
4848: IFFALSE 4873
// vehicles := [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ;
4850: LD_ADDR_VAR 0 9
4854: PUSH
4855: LD_INT 2
4857: PUSH
4858: LD_INT 1
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: LD_INT 4
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: ST_TO_ADDR
// if not vehicles then
4873: LD_VAR 0 9
4877: NOT
4878: IFFALSE 4935
// begin area := westGammaSupportArea ;
4880: LD_ADDR_VAR 0 12
4884: PUSH
4885: LD_INT 16
4887: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4888: LD_ADDR_VAR 0 15
4892: PUSH
4893: LD_INT 37
4895: PUSH
4896: LD_INT 70
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4903: LD_ADDR_VAR 0 14
4907: PUSH
4908: LD_INT 43
4910: PUSH
4911: LD_INT 67
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: ST_TO_ADDR
// dir := 1 ;
4918: LD_ADDR_VAR 0 13
4922: PUSH
4923: LD_INT 1
4925: ST_TO_ADDR
// wait ( 2 2$00 ) ;
4926: LD_INT 4200
4928: PPUSH
4929: CALL_OW 67
// end else
4933: GO 4981
// begin area := southGammaSupportArea ;
4935: LD_ADDR_VAR 0 12
4939: PUSH
4940: LD_INT 5
4942: ST_TO_ADDR
// point := [ 87 , 147 ] ;
4943: LD_ADDR_VAR 0 15
4947: PUSH
4948: LD_INT 87
4950: PUSH
4951: LD_INT 147
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
4958: LD_ADDR_VAR 0 14
4962: PUSH
4963: LD_INT 74
4965: PUSH
4966: LD_INT 129
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: ST_TO_ADDR
// dir := 0 ;
4973: LD_ADDR_VAR 0 13
4977: PUSH
4978: LD_INT 0
4980: ST_TO_ADDR
// end ; squad := [ ] ;
4981: LD_ADDR_VAR 0 6
4985: PUSH
4986: EMPTY
4987: ST_TO_ADDR
// tmp := [ ] ;
4988: LD_ADDR_VAR 0 7
4992: PUSH
4993: EMPTY
4994: ST_TO_ADDR
// tmpVehs := [ ] ;
4995: LD_ADDR_VAR 0 8
4999: PUSH
5000: EMPTY
5001: ST_TO_ADDR
// uc_side := 1 ;
5002: LD_ADDR_OWVAR 20
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// uc_nation := 1 ;
5010: LD_ADDR_OWVAR 21
5014: PUSH
5015: LD_INT 1
5017: ST_TO_ADDR
// if vehicles then
5018: LD_VAR 0 9
5022: IFFALSE 5178
// begin k := 1 ;
5024: LD_ADDR_VAR 0 3
5028: PUSH
5029: LD_INT 1
5031: ST_TO_ADDR
// for i := 1 to vehicles div 4 do
5032: LD_ADDR_VAR 0 2
5036: PUSH
5037: DOUBLE
5038: LD_INT 1
5040: DEC
5041: ST_TO_ADDR
5042: LD_VAR 0 9
5046: PUSH
5047: LD_INT 4
5049: DIV
5050: PUSH
5051: FOR_TO
5052: IFFALSE 5176
// begin vc_chassis := vehicles [ k ] ;
5054: LD_ADDR_OWVAR 37
5058: PUSH
5059: LD_VAR 0 9
5063: PUSH
5064: LD_VAR 0 3
5068: ARRAY
5069: ST_TO_ADDR
// vc_engine := vehicles [ k + 1 ] ;
5070: LD_ADDR_OWVAR 39
5074: PUSH
5075: LD_VAR 0 9
5079: PUSH
5080: LD_VAR 0 3
5084: PUSH
5085: LD_INT 1
5087: PLUS
5088: ARRAY
5089: ST_TO_ADDR
// vc_control := vehicles [ k + 2 ] ;
5090: LD_ADDR_OWVAR 38
5094: PUSH
5095: LD_VAR 0 9
5099: PUSH
5100: LD_VAR 0 3
5104: PUSH
5105: LD_INT 2
5107: PLUS
5108: ARRAY
5109: ST_TO_ADDR
// vc_weapon := vehicles [ k + 3 ] ;
5110: LD_ADDR_OWVAR 40
5114: PUSH
5115: LD_VAR 0 9
5119: PUSH
5120: LD_VAR 0 3
5124: PUSH
5125: LD_INT 3
5127: PLUS
5128: ARRAY
5129: ST_TO_ADDR
// k := k + 4 ;
5130: LD_ADDR_VAR 0 3
5134: PUSH
5135: LD_VAR 0 3
5139: PUSH
5140: LD_INT 4
5142: PLUS
5143: ST_TO_ADDR
// veh := CreateVehicle ;
5144: LD_ADDR_VAR 0 10
5148: PUSH
5149: CALL_OW 45
5153: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5154: LD_ADDR_VAR 0 8
5158: PUSH
5159: LD_VAR 0 8
5163: PPUSH
5164: LD_VAR 0 10
5168: PPUSH
5169: CALL 75927 0 2
5173: ST_TO_ADDR
// end ;
5174: GO 5051
5176: POP
5177: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5178: LD_ADDR_EXP 11
5182: PUSH
5183: LD_STRING JMM
5185: PPUSH
5186: LD_EXP 1
5190: NOT
5191: PPUSH
5192: LD_VAR 0 11
5196: PPUSH
5197: CALL 38526 0 3
5201: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5202: LD_EXP 10
5206: PUSH
5207: LD_INT 1
5209: PUSH
5210: LD_INT 3
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: IN
5217: PUSH
5218: LD_EXP 12
5222: NOT
5223: AND
5224: IFFALSE 5285
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5226: LD_ADDR_EXP 12
5230: PUSH
5231: LD_STRING Brown
5233: PPUSH
5234: LD_EXP 1
5238: NOT
5239: PPUSH
5240: LD_VAR 0 11
5244: PPUSH
5245: CALL 38526 0 3
5249: ST_TO_ADDR
// if Brown then
5250: LD_EXP 12
5254: IFFALSE 5285
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5256: LD_ADDR_VAR 0 7
5260: PUSH
5261: LD_VAR 0 7
5265: PPUSH
5266: LD_VAR 0 7
5270: PUSH
5271: LD_INT 1
5273: PLUS
5274: PPUSH
5275: LD_EXP 12
5279: PPUSH
5280: CALL_OW 1
5284: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5285: LD_EXP 10
5289: PUSH
5290: LD_INT 2
5292: PUSH
5293: LD_INT 3
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: IN
5300: PUSH
5301: LD_EXP 13
5305: NOT
5306: AND
5307: IFFALSE 5368
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5309: LD_ADDR_EXP 13
5313: PUSH
5314: LD_STRING Donaldson
5316: PPUSH
5317: LD_EXP 1
5321: NOT
5322: PPUSH
5323: LD_VAR 0 11
5327: PPUSH
5328: CALL 38526 0 3
5332: ST_TO_ADDR
// if Donaldson then
5333: LD_EXP 13
5337: IFFALSE 5368
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5339: LD_ADDR_VAR 0 7
5343: PUSH
5344: LD_VAR 0 7
5348: PPUSH
5349: LD_VAR 0 7
5353: PUSH
5354: LD_INT 1
5356: PLUS
5357: PPUSH
5358: LD_EXP 13
5362: PPUSH
5363: CALL_OW 1
5367: ST_TO_ADDR
// end ; if not Bobby then
5368: LD_EXP 14
5372: NOT
5373: IFFALSE 5431
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5375: LD_ADDR_EXP 14
5379: PUSH
5380: LD_STRING Bobby
5382: PPUSH
5383: LD_INT 1
5385: PPUSH
5386: LD_VAR 0 11
5390: PPUSH
5391: CALL 38526 0 3
5395: ST_TO_ADDR
// if Bobby then
5396: LD_EXP 14
5400: IFFALSE 5431
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5402: LD_ADDR_VAR 0 7
5406: PUSH
5407: LD_VAR 0 7
5411: PPUSH
5412: LD_VAR 0 7
5416: PUSH
5417: LD_INT 1
5419: PLUS
5420: PPUSH
5421: LD_EXP 14
5425: PPUSH
5426: CALL_OW 1
5430: ST_TO_ADDR
// end ; if not Cyrus then
5431: LD_EXP 15
5435: NOT
5436: IFFALSE 5494
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5438: LD_ADDR_EXP 15
5442: PUSH
5443: LD_STRING Cyrus
5445: PPUSH
5446: LD_INT 1
5448: PPUSH
5449: LD_VAR 0 11
5453: PPUSH
5454: CALL 38526 0 3
5458: ST_TO_ADDR
// if Cyrus then
5459: LD_EXP 15
5463: IFFALSE 5494
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5465: LD_ADDR_VAR 0 7
5469: PUSH
5470: LD_VAR 0 7
5474: PPUSH
5475: LD_VAR 0 7
5479: PUSH
5480: LD_INT 1
5482: PLUS
5483: PPUSH
5484: LD_EXP 15
5488: PPUSH
5489: CALL_OW 1
5493: ST_TO_ADDR
// end ; if not Lisa then
5494: LD_EXP 16
5498: NOT
5499: IFFALSE 5560
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5501: LD_ADDR_EXP 16
5505: PUSH
5506: LD_STRING Lisa
5508: PPUSH
5509: LD_EXP 1
5513: NOT
5514: PPUSH
5515: LD_VAR 0 11
5519: PPUSH
5520: CALL 38526 0 3
5524: ST_TO_ADDR
// if Lisa then
5525: LD_EXP 16
5529: IFFALSE 5560
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5531: LD_ADDR_VAR 0 7
5535: PUSH
5536: LD_VAR 0 7
5540: PPUSH
5541: LD_VAR 0 7
5545: PUSH
5546: LD_INT 1
5548: PLUS
5549: PPUSH
5550: LD_EXP 16
5554: PPUSH
5555: CALL_OW 1
5559: ST_TO_ADDR
// end ; if not Frank then
5560: LD_EXP 17
5564: NOT
5565: IFFALSE 5626
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5567: LD_ADDR_EXP 17
5571: PUSH
5572: LD_STRING Frank
5574: PPUSH
5575: LD_EXP 1
5579: NOT
5580: PPUSH
5581: LD_VAR 0 11
5585: PPUSH
5586: CALL 38526 0 3
5590: ST_TO_ADDR
// if Frank then
5591: LD_EXP 17
5595: IFFALSE 5626
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5597: LD_ADDR_VAR 0 7
5601: PUSH
5602: LD_VAR 0 7
5606: PPUSH
5607: LD_VAR 0 7
5611: PUSH
5612: LD_INT 1
5614: PLUS
5615: PPUSH
5616: LD_EXP 17
5620: PPUSH
5621: CALL_OW 1
5625: ST_TO_ADDR
// end ; if not Kikuchi then
5626: LD_EXP 19
5630: NOT
5631: IFFALSE 5689
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5633: LD_ADDR_EXP 19
5637: PUSH
5638: LD_STRING Kikuchi
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: LD_VAR 0 11
5648: PPUSH
5649: CALL 38526 0 3
5653: ST_TO_ADDR
// if Kikuchi then
5654: LD_EXP 19
5658: IFFALSE 5689
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5660: LD_ADDR_VAR 0 7
5664: PUSH
5665: LD_VAR 0 7
5669: PPUSH
5670: LD_VAR 0 7
5674: PUSH
5675: LD_INT 1
5677: PLUS
5678: PPUSH
5679: LD_EXP 19
5683: PPUSH
5684: CALL_OW 1
5688: ST_TO_ADDR
// end ; if not Gladstone then
5689: LD_EXP 18
5693: NOT
5694: IFFALSE 5755
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5696: LD_ADDR_EXP 18
5700: PUSH
5701: LD_STRING Gladstone
5703: PPUSH
5704: LD_EXP 1
5708: NOT
5709: PPUSH
5710: LD_VAR 0 11
5714: PPUSH
5715: CALL 38526 0 3
5719: ST_TO_ADDR
// if Gladstone then
5720: LD_EXP 18
5724: IFFALSE 5755
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5726: LD_ADDR_VAR 0 7
5730: PUSH
5731: LD_VAR 0 7
5735: PPUSH
5736: LD_VAR 0 7
5740: PUSH
5741: LD_INT 1
5743: PLUS
5744: PPUSH
5745: LD_EXP 18
5749: PPUSH
5750: CALL_OW 1
5754: ST_TO_ADDR
// end ; if not Khatam then
5755: LD_EXP 20
5759: NOT
5760: IFFALSE 5818
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5762: LD_ADDR_EXP 20
5766: PUSH
5767: LD_STRING Khatam
5769: PPUSH
5770: LD_INT 1
5772: PPUSH
5773: LD_VAR 0 11
5777: PPUSH
5778: CALL 38526 0 3
5782: ST_TO_ADDR
// if Khatam then
5783: LD_EXP 20
5787: IFFALSE 5818
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5789: LD_ADDR_VAR 0 7
5793: PUSH
5794: LD_VAR 0 7
5798: PPUSH
5799: LD_VAR 0 7
5803: PUSH
5804: LD_INT 1
5806: PLUS
5807: PPUSH
5808: LD_EXP 20
5812: PPUSH
5813: CALL_OW 1
5817: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5818: LD_ADDR_VAR 0 5
5822: PUSH
5823: LD_STRING 07c_others
5825: PPUSH
5826: CALL_OW 31
5830: ST_TO_ADDR
// squad := others ;
5831: LD_ADDR_VAR 0 6
5835: PUSH
5836: LD_VAR 0 5
5840: ST_TO_ADDR
// if others then
5841: LD_VAR 0 5
5845: IFFALSE 5945
// for i in others do
5847: LD_ADDR_VAR 0 2
5851: PUSH
5852: LD_VAR 0 5
5856: PUSH
5857: FOR_IN
5858: IFFALSE 5943
// begin SetTag ( i , 108 ) ;
5860: LD_VAR 0 2
5864: PPUSH
5865: LD_INT 108
5867: PPUSH
5868: CALL_OW 109
// if GetClass ( i ) = class_mechanic then
5872: LD_VAR 0 2
5876: PPUSH
5877: CALL_OW 257
5881: PUSH
5882: LD_INT 3
5884: EQUAL
5885: IFFALSE 5912
// tmp := Insert ( tmp , 1 , i ) else
5887: LD_ADDR_VAR 0 7
5891: PUSH
5892: LD_VAR 0 7
5896: PPUSH
5897: LD_INT 1
5899: PPUSH
5900: LD_VAR 0 2
5904: PPUSH
5905: CALL_OW 2
5909: ST_TO_ADDR
5910: GO 5941
// tmp := Replace ( tmp , tmp + 1 , i ) ;
5912: LD_ADDR_VAR 0 7
5916: PUSH
5917: LD_VAR 0 7
5921: PPUSH
5922: LD_VAR 0 7
5926: PUSH
5927: LD_INT 1
5929: PLUS
5930: PPUSH
5931: LD_VAR 0 2
5935: PPUSH
5936: CALL_OW 1
5940: ST_TO_ADDR
// end ;
5941: GO 5857
5943: POP
5944: POP
// if tmp then
5945: LD_VAR 0 7
5949: IFFALSE 6149
// begin for i in tmp do
5951: LD_ADDR_VAR 0 2
5955: PUSH
5956: LD_VAR 0 7
5960: PUSH
5961: FOR_IN
5962: IFFALSE 6147
// begin SetDir ( i , dir ) ;
5964: LD_VAR 0 2
5968: PPUSH
5969: LD_VAR 0 13
5973: PPUSH
5974: CALL_OW 233
// if tmpVehs then
5978: LD_VAR 0 8
5982: IFFALSE 6072
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
5984: LD_VAR 0 8
5988: PUSH
5989: LD_INT 1
5991: ARRAY
5992: PPUSH
5993: LD_INT 0
5995: PPUSH
5996: CALL_OW 233
// PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
6000: LD_VAR 0 8
6004: PUSH
6005: LD_INT 1
6007: ARRAY
6008: PPUSH
6009: LD_VAR 0 15
6013: PUSH
6014: LD_INT 1
6016: ARRAY
6017: PPUSH
6018: LD_VAR 0 15
6022: PUSH
6023: LD_INT 2
6025: ARRAY
6026: PPUSH
6027: LD_INT 0
6029: PPUSH
6030: CALL_OW 48
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6034: LD_VAR 0 2
6038: PPUSH
6039: LD_VAR 0 8
6043: PUSH
6044: LD_INT 1
6046: ARRAY
6047: PPUSH
6048: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 8
6061: PPUSH
6062: LD_INT 1
6064: PPUSH
6065: CALL_OW 3
6069: ST_TO_ADDR
// end else
6070: GO 6089
// PlaceUnitArea ( i , area , false ) ;
6072: LD_VAR 0 2
6076: PPUSH
6077: LD_VAR 0 12
6081: PPUSH
6082: LD_INT 0
6084: PPUSH
6085: CALL_OW 49
// ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6089: LD_VAR 0 2
6093: PPUSH
6094: LD_VAR 0 14
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: LD_VAR 0 14
6107: PUSH
6108: LD_INT 2
6110: ARRAY
6111: PPUSH
6112: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6116: LD_INT 35
6118: PPUSH
6119: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6123: LD_VAR 0 12
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_INT 1
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 70
6142: NOT
6143: IFFALSE 6116
// end ;
6145: GO 5961
6147: POP
6148: POP
// end ; PlaceUnitXY ( JMM , point [ 1 ] , point [ 2 ] , false ) ;
6149: LD_EXP 11
6153: PPUSH
6154: LD_VAR 0 15
6158: PUSH
6159: LD_INT 1
6161: ARRAY
6162: PPUSH
6163: LD_VAR 0 15
6167: PUSH
6168: LD_INT 2
6170: ARRAY
6171: PPUSH
6172: LD_INT 0
6174: PPUSH
6175: CALL_OW 48
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6179: LD_EXP 11
6183: PPUSH
6184: LD_VAR 0 14
6188: PUSH
6189: LD_INT 1
6191: ARRAY
6192: PPUSH
6193: LD_VAR 0 14
6197: PUSH
6198: LD_INT 2
6200: ARRAY
6201: PPUSH
6202: CALL_OW 111
// jmmArrival := true ;
6206: LD_ADDR_EXP 7
6210: PUSH
6211: LD_INT 1
6213: ST_TO_ADDR
// end ;
6214: LD_VAR 0 1
6218: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6219: LD_INT 0
6221: PPUSH
6222: PPUSH
6223: PPUSH
6224: PPUSH
6225: PPUSH
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6226: LD_ADDR_VAR 0 5
6230: PUSH
6231: LD_INT 6
6233: PPUSH
6234: LD_INT 3
6236: PUSH
6237: LD_INT 21
6239: PUSH
6240: LD_INT 3
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PPUSH
6251: CALL_OW 70
6255: ST_TO_ADDR
// if tmp then
6256: LD_VAR 0 5
6260: IFFALSE 6284
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6262: LD_VAR 0 5
6266: PPUSH
6267: LD_INT 33
6269: PPUSH
6270: LD_INT 39
6272: PPUSH
6273: CALL_OW 111
// wait ( 0 0$3 ) ;
6277: LD_INT 105
6279: PPUSH
6280: CALL_OW 67
// end ; uc_side := 4 ;
6284: LD_ADDR_OWVAR 20
6288: PUSH
6289: LD_INT 4
6291: ST_TO_ADDR
// uc_nation := 1 ;
6292: LD_ADDR_OWVAR 21
6296: PUSH
6297: LD_INT 1
6299: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6300: LD_ADDR_EXP 24
6304: PUSH
6305: LD_STRING Sikorski
6307: PPUSH
6308: LD_INT 0
6310: PPUSH
6311: LD_STRING 
6313: PPUSH
6314: CALL 38526 0 3
6318: ST_TO_ADDR
// vc_engine := engine_combustion ;
6319: LD_ADDR_OWVAR 39
6323: PUSH
6324: LD_INT 1
6326: ST_TO_ADDR
// vc_control := control_manual ;
6327: LD_ADDR_OWVAR 38
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6335: LD_ADDR_OWVAR 40
6339: PUSH
6340: LD_INT 6
6342: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6343: LD_ADDR_OWVAR 37
6347: PUSH
6348: LD_INT 4
6350: ST_TO_ADDR
// veh := CreateVehicle ;
6351: LD_ADDR_VAR 0 4
6355: PUSH
6356: CALL_OW 45
6360: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6361: LD_VAR 0 4
6365: PPUSH
6366: LD_INT 3
6368: PPUSH
6369: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_INT 4
6380: NEG
6381: PPUSH
6382: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6386: LD_VAR 0 4
6390: PPUSH
6391: LD_INT 70
6393: PPUSH
6394: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6398: LD_VAR 0 4
6402: PPUSH
6403: LD_INT 6
6405: PPUSH
6406: LD_INT 0
6408: PPUSH
6409: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6413: LD_EXP 24
6417: PPUSH
6418: LD_VAR 0 4
6422: PPUSH
6423: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6427: LD_EXP 24
6431: PPUSH
6432: LD_INT 37
6434: PPUSH
6435: LD_INT 30
6437: PPUSH
6438: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6442: LD_INT 10
6444: PPUSH
6445: CALL_OW 67
// InitHc_All ( ) ;
6449: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6453: LD_ADDR_VAR 0 2
6457: PUSH
6458: DOUBLE
6459: LD_INT 1
6461: DEC
6462: ST_TO_ADDR
6463: LD_INT 3
6465: PUSH
6466: LD_INT 2
6468: PUSH
6469: LD_INT 2
6471: PUSH
6472: LD_INT 2
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: PUSH
6481: LD_OWVAR 67
6485: ARRAY
6486: PUSH
6487: FOR_TO
6488: IFFALSE 6600
// begin uc_side := 4 ;
6490: LD_ADDR_OWVAR 20
6494: PUSH
6495: LD_INT 4
6497: ST_TO_ADDR
// uc_nation := 1 ;
6498: LD_ADDR_OWVAR 21
6502: PUSH
6503: LD_INT 1
6505: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6506: LD_INT 0
6508: PPUSH
6509: LD_INT 1
6511: PPUSH
6512: LD_INT 4
6514: PPUSH
6515: LD_INT 7
6517: PPUSH
6518: CALL_OW 12
6522: PPUSH
6523: CALL_OW 380
// un := CreateHuman ;
6527: LD_ADDR_VAR 0 3
6531: PUSH
6532: CALL_OW 44
6536: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6537: LD_VAR 0 3
6541: PPUSH
6542: LD_INT 3
6544: PPUSH
6545: CALL_OW 233
// SetTag ( un , 101 ) ;
6549: LD_VAR 0 3
6553: PPUSH
6554: LD_INT 101
6556: PPUSH
6557: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6561: LD_VAR 0 3
6565: PPUSH
6566: LD_INT 6
6568: PPUSH
6569: LD_INT 0
6571: PPUSH
6572: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6576: LD_VAR 0 3
6580: PPUSH
6581: LD_INT 25
6583: PPUSH
6584: LD_INT 27
6586: PPUSH
6587: CALL_OW 111
// wait ( 0 0$1 ) ;
6591: LD_INT 35
6593: PPUSH
6594: CALL_OW 67
// end ;
6598: GO 6487
6600: POP
6601: POP
// for i := 1 to 2 do
6602: LD_ADDR_VAR 0 2
6606: PUSH
6607: DOUBLE
6608: LD_INT 1
6610: DEC
6611: ST_TO_ADDR
6612: LD_INT 2
6614: PUSH
6615: FOR_TO
6616: IFFALSE 6728
// begin uc_side := 4 ;
6618: LD_ADDR_OWVAR 20
6622: PUSH
6623: LD_INT 4
6625: ST_TO_ADDR
// uc_nation := 1 ;
6626: LD_ADDR_OWVAR 21
6630: PUSH
6631: LD_INT 1
6633: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
6634: LD_INT 0
6636: PPUSH
6637: LD_INT 4
6639: PPUSH
6640: LD_INT 3
6642: PPUSH
6643: LD_INT 5
6645: PPUSH
6646: CALL_OW 12
6650: PPUSH
6651: CALL_OW 380
// un := CreateHuman ;
6655: LD_ADDR_VAR 0 3
6659: PUSH
6660: CALL_OW 44
6664: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6665: LD_VAR 0 3
6669: PPUSH
6670: LD_INT 3
6672: PPUSH
6673: CALL_OW 233
// SetTag ( un , 101 ) ;
6677: LD_VAR 0 3
6681: PPUSH
6682: LD_INT 101
6684: PPUSH
6685: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6689: LD_VAR 0 3
6693: PPUSH
6694: LD_INT 6
6696: PPUSH
6697: LD_INT 0
6699: PPUSH
6700: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6704: LD_VAR 0 3
6708: PPUSH
6709: LD_INT 25
6711: PPUSH
6712: LD_INT 27
6714: PPUSH
6715: CALL_OW 111
// wait ( 0 0$1 ) ;
6719: LD_INT 35
6721: PPUSH
6722: CALL_OW 67
// end ;
6726: GO 6615
6728: POP
6729: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
6730: LD_ADDR_VAR 0 2
6734: PUSH
6735: DOUBLE
6736: LD_INT 1
6738: DEC
6739: ST_TO_ADDR
6740: LD_INT 5
6742: PUSH
6743: LD_INT 4
6745: PUSH
6746: LD_INT 3
6748: PUSH
6749: LD_INT 3
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: PUSH
6758: LD_OWVAR 67
6762: ARRAY
6763: PUSH
6764: FOR_TO
6765: IFFALSE 7007
// begin uc_side := 4 ;
6767: LD_ADDR_OWVAR 20
6771: PUSH
6772: LD_INT 4
6774: ST_TO_ADDR
// uc_nation := 1 ;
6775: LD_ADDR_OWVAR 21
6779: PUSH
6780: LD_INT 1
6782: ST_TO_ADDR
// vc_engine := engine_combustion ;
6783: LD_ADDR_OWVAR 39
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// vc_control := control_manual ;
6791: LD_ADDR_OWVAR 38
6795: PUSH
6796: LD_INT 1
6798: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
6799: LD_ADDR_OWVAR 40
6803: PUSH
6804: LD_INT 5
6806: PUSH
6807: LD_INT 7
6809: PUSH
6810: LD_INT 5
6812: PUSH
6813: LD_INT 4
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: PUSH
6822: LD_VAR 0 2
6826: PUSH
6827: LD_INT 4
6829: MOD
6830: PUSH
6831: LD_INT 1
6833: PLUS
6834: ARRAY
6835: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
6836: LD_ADDR_OWVAR 37
6840: PUSH
6841: LD_INT 3
6843: PUSH
6844: LD_INT 3
6846: PUSH
6847: LD_INT 4
6849: PUSH
6850: LD_INT 4
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: PUSH
6859: LD_VAR 0 2
6863: PUSH
6864: LD_INT 4
6866: MOD
6867: PUSH
6868: LD_INT 1
6870: PLUS
6871: ARRAY
6872: ST_TO_ADDR
// veh := CreateVehicle ;
6873: LD_ADDR_VAR 0 4
6877: PUSH
6878: CALL_OW 45
6882: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6883: LD_VAR 0 4
6887: PPUSH
6888: LD_INT 3
6890: PPUSH
6891: CALL_OW 233
// SetTag ( veh , 0 ) ;
6895: LD_VAR 0 4
6899: PPUSH
6900: LD_INT 0
6902: PPUSH
6903: CALL_OW 109
// SetFuel ( veh , 70 ) ;
6907: LD_VAR 0 4
6911: PPUSH
6912: LD_INT 70
6914: PPUSH
6915: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6919: LD_VAR 0 4
6923: PPUSH
6924: LD_INT 6
6926: PPUSH
6927: LD_INT 0
6929: PPUSH
6930: CALL_OW 49
// InitHc ;
6934: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
6938: LD_INT 0
6940: PPUSH
6941: LD_INT 3
6943: PPUSH
6944: LD_INT 4
6946: PPUSH
6947: LD_INT 7
6949: PPUSH
6950: CALL_OW 12
6954: PPUSH
6955: CALL_OW 380
// un := CreateHuman ;
6959: LD_ADDR_VAR 0 3
6963: PUSH
6964: CALL_OW 44
6968: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6969: LD_VAR 0 3
6973: PPUSH
6974: LD_VAR 0 4
6978: PPUSH
6979: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
6983: LD_VAR 0 3
6987: PPUSH
6988: LD_INT 30
6990: PPUSH
6991: LD_INT 22
6993: PPUSH
6994: CALL_OW 111
// wait ( 0 0$3 ) ;
6998: LD_INT 105
7000: PPUSH
7001: CALL_OW 67
// end ;
7005: GO 6764
7007: POP
7008: POP
// wait ( 0 0$10 ) ;
7009: LD_INT 350
7011: PPUSH
7012: CALL_OW 67
// end ;
7016: LD_VAR 0 1
7020: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7021: LD_INT 0
7023: PPUSH
7024: PPUSH
7025: PPUSH
7026: PPUSH
// gammaBase := [ ] ;
7027: LD_ADDR_VAR 0 4
7031: PUSH
7032: EMPTY
7033: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7034: LD_ADDR_VAR 0 5
7038: PUSH
7039: LD_VAR 0 1
7043: PPUSH
7044: LD_INT 22
7046: PUSH
7047: LD_INT 1
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 21
7056: PUSH
7057: LD_INT 3
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 50
7066: PUSH
7067: EMPTY
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 70
7079: ST_TO_ADDR
// for i in buildings do
7080: LD_ADDR_VAR 0 3
7084: PUSH
7085: LD_VAR 0 5
7089: PUSH
7090: FOR_IN
7091: IFFALSE 7528
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7093: LD_VAR 0 3
7097: PPUSH
7098: CALL_OW 266
7102: PUSH
7103: LD_INT 6
7105: PUSH
7106: LD_INT 7
7108: PUSH
7109: LD_INT 8
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: LIST
7116: IN
7117: IFFALSE 7231
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7119: LD_ADDR_VAR 0 4
7123: PUSH
7124: LD_VAR 0 4
7128: PUSH
7129: LD_VAR 0 3
7133: PPUSH
7134: CALL_OW 266
7138: PUSH
7139: LD_VAR 0 3
7143: PPUSH
7144: CALL_OW 250
7148: PUSH
7149: LD_VAR 0 3
7153: PPUSH
7154: CALL_OW 251
7158: PUSH
7159: LD_VAR 0 3
7163: PPUSH
7164: CALL_OW 254
7168: PUSH
7169: LD_VAR 0 3
7173: PPUSH
7174: CALL_OW 267
7178: PUSH
7179: LD_VAR 0 3
7183: PPUSH
7184: CALL_OW 248
7188: PUSH
7189: LD_VAR 0 3
7193: PPUSH
7194: LD_INT 1
7196: PPUSH
7197: CALL_OW 268
7201: PUSH
7202: LD_VAR 0 3
7206: PPUSH
7207: LD_INT 2
7209: PPUSH
7210: CALL_OW 268
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: PUSH
7225: EMPTY
7226: LIST
7227: ADD
7228: ST_TO_ADDR
7229: GO 7526
// if GetBType ( i ) = b_bunker then
7231: LD_VAR 0 3
7235: PPUSH
7236: CALL_OW 266
7240: PUSH
7241: LD_INT 32
7243: EQUAL
7244: IFFALSE 7341
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7246: LD_ADDR_VAR 0 4
7250: PUSH
7251: LD_VAR 0 4
7255: PUSH
7256: LD_VAR 0 3
7260: PPUSH
7261: CALL_OW 266
7265: PUSH
7266: LD_VAR 0 3
7270: PPUSH
7271: CALL_OW 250
7275: PUSH
7276: LD_VAR 0 3
7280: PPUSH
7281: CALL_OW 251
7285: PUSH
7286: LD_VAR 0 3
7290: PPUSH
7291: CALL_OW 254
7295: PUSH
7296: LD_VAR 0 3
7300: PPUSH
7301: CALL_OW 267
7305: PUSH
7306: LD_VAR 0 3
7310: PPUSH
7311: CALL_OW 248
7315: PUSH
7316: LD_VAR 0 3
7320: PPUSH
7321: CALL_OW 269
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: PUSH
7335: EMPTY
7336: LIST
7337: ADD
7338: ST_TO_ADDR
7339: GO 7526
// if GetBType ( i ) = b_factory then
7341: LD_VAR 0 3
7345: PPUSH
7346: CALL_OW 266
7350: PUSH
7351: LD_INT 3
7353: EQUAL
7354: IFFALSE 7444
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7356: LD_ADDR_VAR 0 4
7360: PUSH
7361: LD_VAR 0 4
7365: PPUSH
7366: LD_INT 1
7368: PPUSH
7369: LD_VAR 0 3
7373: PPUSH
7374: CALL_OW 266
7378: PUSH
7379: LD_VAR 0 3
7383: PPUSH
7384: CALL_OW 250
7388: PUSH
7389: LD_VAR 0 3
7393: PPUSH
7394: CALL_OW 251
7398: PUSH
7399: LD_VAR 0 3
7403: PPUSH
7404: CALL_OW 254
7408: PUSH
7409: LD_VAR 0 3
7413: PPUSH
7414: CALL_OW 267
7418: PUSH
7419: LD_VAR 0 3
7423: PPUSH
7424: CALL_OW 248
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: PPUSH
7437: CALL_OW 2
7441: ST_TO_ADDR
7442: GO 7526
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7444: LD_ADDR_VAR 0 4
7448: PUSH
7449: LD_VAR 0 4
7453: PUSH
7454: LD_VAR 0 3
7458: PPUSH
7459: CALL_OW 266
7463: PUSH
7464: LD_VAR 0 3
7468: PPUSH
7469: CALL_OW 250
7473: PUSH
7474: LD_VAR 0 3
7478: PPUSH
7479: CALL_OW 251
7483: PUSH
7484: LD_VAR 0 3
7488: PPUSH
7489: CALL_OW 254
7493: PUSH
7494: LD_VAR 0 3
7498: PPUSH
7499: CALL_OW 267
7503: PUSH
7504: LD_VAR 0 3
7508: PPUSH
7509: CALL_OW 248
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: ADD
7525: ST_TO_ADDR
// end ;
7526: GO 7090
7528: POP
7529: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7530: LD_VAR 0 4
7534: PPUSH
7535: LD_STRING 08_GammaBase
7537: PPUSH
7538: CALL_OW 39
// end ;
7542: LD_VAR 0 2
7546: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
7547: LD_INT 0
7549: PPUSH
7550: PPUSH
7551: PPUSH
7552: PPUSH
7553: PPUSH
7554: PPUSH
7555: PPUSH
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7556: LD_ADDR_VAR 0 3
7560: PUSH
7561: LD_INT 22
7563: PUSH
7564: LD_INT 4
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 69
7575: ST_TO_ADDR
// ComAgressiveMove ( tmp , 55 , 62 ) ;
7576: LD_VAR 0 3
7580: PPUSH
7581: LD_INT 55
7583: PPUSH
7584: LD_INT 62
7586: PPUSH
7587: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
7591: LD_VAR 0 3
7595: PPUSH
7596: LD_INT 175
7598: PPUSH
7599: CALL_OW 202
// AddComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 58 , 96 ) ;
7603: LD_VAR 0 3
7607: PPUSH
7608: LD_INT 120
7610: PUSH
7611: LD_INT 101
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PPUSH
7618: CALL_OW 72
7622: PPUSH
7623: LD_INT 58
7625: PPUSH
7626: LD_INT 96
7628: PPUSH
7629: CALL_OW 174
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
7633: LD_VAR 0 3
7637: PPUSH
7638: LD_INT 120
7640: PUSH
7641: LD_INT 101
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PPUSH
7648: CALL_OW 72
7652: PPUSH
7653: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 52 , 93 ) ;
7657: LD_VAR 0 3
7661: PPUSH
7662: LD_INT 120
7664: PUSH
7665: LD_INT 101
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 25
7674: PUSH
7675: LD_INT 4
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: PPUSH
7691: LD_INT 52
7693: PPUSH
7694: LD_INT 93
7696: PPUSH
7697: CALL_OW 174
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
7701: LD_VAR 0 3
7705: PPUSH
7706: LD_INT 120
7708: PUSH
7709: LD_INT 101
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PUSH
7716: LD_INT 25
7718: PUSH
7719: LD_INT 4
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PPUSH
7730: CALL_OW 72
7734: PPUSH
7735: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
7739: LD_ADDR_VAR 0 7
7743: PUSH
7744: LD_VAR 0 3
7748: PPUSH
7749: LD_INT 21
7751: PUSH
7752: LD_INT 2
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PPUSH
7759: CALL_OW 72
7763: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
7764: LD_ADDR_VAR 0 4
7768: PUSH
7769: LD_INT 81
7771: PUSH
7772: LD_INT 1
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PPUSH
7779: CALL_OW 69
7783: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
7784: LD_ADDR_VAR 0 5
7788: PUSH
7789: LD_INT 57
7791: PUSH
7792: LD_INT 66
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 62
7801: PUSH
7802: LD_INT 58
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7813: LD_INT 35
7815: PPUSH
7816: CALL_OW 67
// for i in filter do
7820: LD_ADDR_VAR 0 2
7824: PUSH
7825: LD_VAR 0 7
7829: PUSH
7830: FOR_IN
7831: IFFALSE 8270
// begin if IsDead ( i ) then
7833: LD_VAR 0 2
7837: PPUSH
7838: CALL_OW 301
7842: IFFALSE 7862
// begin filter := filter diff i ;
7844: LD_ADDR_VAR 0 7
7848: PUSH
7849: LD_VAR 0 7
7853: PUSH
7854: LD_VAR 0 2
7858: DIFF
7859: ST_TO_ADDR
// continue ;
7860: GO 7830
// end ; tmp := IsDrivenBy ( i ) ;
7862: LD_ADDR_VAR 0 3
7866: PUSH
7867: LD_VAR 0 2
7871: PPUSH
7872: CALL_OW 311
7876: ST_TO_ADDR
// if not tmp then
7877: LD_VAR 0 3
7881: NOT
7882: IFFALSE 7886
// continue ;
7884: GO 7830
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
7886: LD_VAR 0 2
7890: PPUSH
7891: CALL_OW 261
7895: PUSH
7896: LD_INT 30
7898: GREATER
7899: PUSH
7900: LD_VAR 0 2
7904: PPUSH
7905: CALL_OW 110
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: AND
7914: IFFALSE 7930
// SetTag ( i , 0 ) else
7916: LD_VAR 0 2
7920: PPUSH
7921: LD_INT 0
7923: PPUSH
7924: CALL_OW 109
7928: GO 7974
// if GetTag ( i ) = 2 then
7930: LD_VAR 0 2
7934: PPUSH
7935: CALL_OW 110
7939: PUSH
7940: LD_INT 2
7942: EQUAL
7943: IFFALSE 7974
// begin ComMoveXY ( i , 52 , 50 ) ;
7945: LD_VAR 0 2
7949: PPUSH
7950: LD_INT 52
7952: PPUSH
7953: LD_INT 50
7955: PPUSH
7956: CALL_OW 111
// AddComMoveUnit ( i , amDepot ) ;
7960: LD_VAR 0 2
7964: PPUSH
7965: LD_EXP 27
7969: PPUSH
7970: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
7974: LD_VAR 0 2
7978: PPUSH
7979: CALL_OW 256
7983: PUSH
7984: LD_INT 600
7986: GREATEREQUAL
7987: PUSH
7988: LD_VAR 0 2
7992: PPUSH
7993: CALL_OW 110
7997: NOT
7998: AND
7999: IFFALSE 8025
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8001: LD_VAR 0 2
8005: PPUSH
8006: LD_VAR 0 4
8010: PPUSH
8011: LD_VAR 0 2
8015: PPUSH
8016: CALL_OW 74
8020: PPUSH
8021: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8025: LD_VAR 0 2
8029: PPUSH
8030: CALL_OW 256
8034: PUSH
8035: LD_INT 600
8037: LESS
8038: PUSH
8039: LD_VAR 0 2
8043: PPUSH
8044: CALL_OW 110
8048: NOT
8049: AND
8050: IFFALSE 8126
// begin SetTag ( i , 1 ) ;
8052: LD_VAR 0 2
8056: PPUSH
8057: LD_INT 1
8059: PPUSH
8060: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8064: LD_ADDR_VAR 0 6
8068: PUSH
8069: LD_VAR 0 2
8073: PPUSH
8074: LD_VAR 0 5
8078: PPUSH
8079: CALL 79275 0 2
8083: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
8084: LD_VAR 0 2
8088: PPUSH
8089: LD_VAR 0 6
8093: PUSH
8094: LD_INT 1
8096: ARRAY
8097: PPUSH
8098: LD_VAR 0 6
8102: PUSH
8103: LD_INT 2
8105: ARRAY
8106: PPUSH
8107: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
8111: LD_VAR 0 2
8115: PPUSH
8116: LD_INT 40
8118: PPUSH
8119: LD_INT 49
8121: PPUSH
8122: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
8126: LD_VAR 0 2
8130: PPUSH
8131: CALL_OW 110
8135: PUSH
8136: LD_INT 1
8138: EQUAL
8139: PUSH
8140: LD_VAR 0 2
8144: PPUSH
8145: LD_INT 40
8147: PPUSH
8148: LD_INT 49
8150: PPUSH
8151: CALL_OW 297
8155: PUSH
8156: LD_INT 9
8158: LESS
8159: AND
8160: PUSH
8161: LD_VAR 0 3
8165: AND
8166: IFFALSE 8268
// begin ComExitVehicle ( tmp ) ;
8168: LD_VAR 0 3
8172: PPUSH
8173: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8177: LD_VAR 0 3
8181: PPUSH
8182: LD_VAR 0 2
8186: PPUSH
8187: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8191: LD_INT 35
8193: PPUSH
8194: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8198: LD_VAR 0 2
8202: PPUSH
8203: CALL_OW 256
8207: PUSH
8208: LD_INT 1000
8210: EQUAL
8211: IFFALSE 8191
// ComEnterUnit ( tmp , i ) ;
8213: LD_VAR 0 3
8217: PPUSH
8218: LD_VAR 0 2
8222: PPUSH
8223: CALL_OW 120
// if GetFuel ( i ) <= 40 then
8227: LD_VAR 0 2
8231: PPUSH
8232: CALL_OW 261
8236: PUSH
8237: LD_INT 40
8239: LESSEQUAL
8240: IFFALSE 8256
// SetTag ( i , 2 ) else
8242: LD_VAR 0 2
8246: PPUSH
8247: LD_INT 2
8249: PPUSH
8250: CALL_OW 109
8254: GO 8268
// SetTag ( i , 0 ) ;
8256: LD_VAR 0 2
8260: PPUSH
8261: LD_INT 0
8263: PPUSH
8264: CALL_OW 109
// end ; end ;
8268: GO 7830
8270: POP
8271: POP
// until not filter ;
8272: LD_VAR 0 7
8276: NOT
8277: IFFALSE 7813
// end ; end_of_file
8279: LD_VAR 0 1
8283: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
8284: LD_INT 0
8286: PPUSH
8287: PPUSH
8288: PPUSH
8289: PPUSH
8290: PPUSH
// uc_side := 3 ;
8291: LD_ADDR_OWVAR 20
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// uc_nation := 3 ;
8299: LD_ADDR_OWVAR 21
8303: PUSH
8304: LD_INT 3
8306: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
8307: LD_ADDR_EXP 29
8311: PUSH
8312: LD_INT 8
8314: PUSH
8315: LD_INT 11
8317: PUSH
8318: LD_INT 14
8320: PUSH
8321: LD_INT 17
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: PUSH
8330: LD_OWVAR 67
8334: ARRAY
8335: ST_TO_ADDR
// ruMobile := [ ] ;
8336: LD_ADDR_EXP 30
8340: PUSH
8341: EMPTY
8342: ST_TO_ADDR
// ruBuildList := [ ] ;
8343: LD_ADDR_EXP 31
8347: PUSH
8348: EMPTY
8349: ST_TO_ADDR
// russianAttackers := [ ] ;
8350: LD_ADDR_EXP 32
8354: PUSH
8355: EMPTY
8356: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
8357: LD_ADDR_VAR 0 5
8361: PUSH
8362: LD_INT 43
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 46
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: ST_TO_ADDR
// if Difficulty > 2 then
8376: LD_OWVAR 67
8380: PUSH
8381: LD_INT 2
8383: GREATER
8384: IFFALSE 8407
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
8386: LD_ADDR_VAR 0 5
8390: PUSH
8391: LD_VAR 0 5
8395: PUSH
8396: LD_INT 45
8398: PUSH
8399: LD_INT 46
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: ADD
8406: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
8407: LD_ADDR_EXP 28
8411: PUSH
8412: LD_STRING Borodin
8414: PPUSH
8415: CALL_OW 25
8419: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
8420: LD_EXP 28
8424: PPUSH
8425: LD_INT 28
8427: PPUSH
8428: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3000 , 4000 , 5000 , 6000 ] [ Difficulty ] ) ;
8432: LD_INT 28
8434: PPUSH
8435: CALL_OW 274
8439: PPUSH
8440: LD_INT 1
8442: PPUSH
8443: LD_INT 3000
8445: PUSH
8446: LD_INT 4000
8448: PUSH
8449: LD_INT 5000
8451: PUSH
8452: LD_INT 6000
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: PUSH
8461: LD_OWVAR 67
8465: ARRAY
8466: PPUSH
8467: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1000 ) ;
8471: LD_INT 28
8473: PPUSH
8474: CALL_OW 274
8478: PPUSH
8479: LD_INT 2
8481: PPUSH
8482: LD_INT 1000
8484: PPUSH
8485: CALL_OW 277
// if Difficulty > 2 then
8489: LD_OWVAR 67
8493: PUSH
8494: LD_INT 2
8496: GREATER
8497: IFFALSE 8621
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
8499: LD_ADDR_VAR 0 4
8503: PUSH
8504: LD_INT 99
8506: PUSH
8507: LD_INT 130
8509: PUSH
8510: LD_INT 2
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 121
8520: PUSH
8521: LD_INT 127
8523: PUSH
8524: LD_INT 4
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 117
8534: PUSH
8535: LD_INT 121
8537: PUSH
8538: LD_INT 4
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: LIST
8550: ST_TO_ADDR
// for i in tmp do
8551: LD_ADDR_VAR 0 2
8555: PUSH
8556: LD_VAR 0 4
8560: PUSH
8561: FOR_IN
8562: IFFALSE 8619
// begin bc_type := b_turret ;
8564: LD_ADDR_OWVAR 42
8568: PUSH
8569: LD_INT 33
8571: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
8572: LD_ADDR_OWVAR 43
8576: PUSH
8577: LD_INT 2
8579: PUSH
8580: LD_OWVAR 67
8584: PLUS
8585: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
8586: LD_VAR 0 2
8590: PUSH
8591: LD_INT 1
8593: ARRAY
8594: PPUSH
8595: LD_VAR 0 2
8599: PUSH
8600: LD_INT 2
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_INT 3
8611: ARRAY
8612: PPUSH
8613: CALL_OW 47
// end ;
8617: GO 8561
8619: POP
8620: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
8621: LD_ADDR_VAR 0 2
8625: PUSH
8626: LD_INT 22
8628: PUSH
8629: LD_INT 3
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 21
8638: PUSH
8639: LD_INT 3
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PPUSH
8650: CALL_OW 69
8654: PUSH
8655: FOR_IN
8656: IFFALSE 8678
// SetBLevel ( i , 2 + Difficulty ) ;
8658: LD_VAR 0 2
8662: PPUSH
8663: LD_INT 2
8665: PUSH
8666: LD_OWVAR 67
8670: PLUS
8671: PPUSH
8672: CALL_OW 241
8676: GO 8655
8678: POP
8679: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
8680: LD_ADDR_VAR 0 4
8684: PUSH
8685: LD_INT 22
8687: PUSH
8688: LD_INT 3
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PUSH
8695: LD_INT 2
8697: PUSH
8698: LD_INT 30
8700: PUSH
8701: LD_INT 32
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: LD_INT 30
8710: PUSH
8711: LD_INT 33
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: LIST
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PPUSH
8727: CALL_OW 69
8731: ST_TO_ADDR
// for i in tmp do
8732: LD_ADDR_VAR 0 2
8736: PUSH
8737: LD_VAR 0 4
8741: PUSH
8742: FOR_IN
8743: IFFALSE 8775
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
8745: LD_VAR 0 2
8749: PPUSH
8750: LD_VAR 0 5
8754: PUSH
8755: LD_INT 1
8757: PPUSH
8758: LD_VAR 0 5
8762: PPUSH
8763: CALL_OW 12
8767: ARRAY
8768: PPUSH
8769: CALL_OW 431
8773: GO 8742
8775: POP
8776: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
8777: LD_ADDR_VAR 0 2
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 3
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 30
8794: PUSH
8795: LD_INT 32
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: FOR_IN
8812: IFFALSE 8861
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8814: LD_INT 0
8816: PPUSH
8817: LD_INT 5
8819: PUSH
8820: LD_INT 6
8822: PUSH
8823: LD_INT 7
8825: PUSH
8826: LD_INT 8
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: PUSH
8835: LD_OWVAR 67
8839: ARRAY
8840: PPUSH
8841: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8845: CALL_OW 44
8849: PPUSH
8850: LD_VAR 0 2
8854: PPUSH
8855: CALL_OW 52
// end ;
8859: GO 8811
8861: POP
8862: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
8863: LD_ADDR_VAR 0 2
8867: PUSH
8868: LD_INT 22
8870: PUSH
8871: LD_INT 3
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 30
8880: PUSH
8881: LD_INT 5
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PPUSH
8892: CALL_OW 69
8896: PUSH
8897: FOR_IN
8898: IFFALSE 8988
// begin for j := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
8900: LD_ADDR_VAR 0 3
8904: PUSH
8905: DOUBLE
8906: LD_INT 1
8908: DEC
8909: ST_TO_ADDR
8910: LD_INT 2
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: LD_INT 3
8918: PUSH
8919: LD_INT 3
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: PUSH
8928: LD_OWVAR 67
8932: ARRAY
8933: PUSH
8934: FOR_TO
8935: IFFALSE 8984
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
8937: LD_INT 0
8939: PPUSH
8940: LD_INT 5
8942: PUSH
8943: LD_INT 6
8945: PUSH
8946: LD_INT 7
8948: PUSH
8949: LD_INT 8
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: PUSH
8958: LD_OWVAR 67
8962: ARRAY
8963: PPUSH
8964: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
8968: CALL_OW 44
8972: PPUSH
8973: LD_VAR 0 2
8977: PPUSH
8978: CALL_OW 52
// end ;
8982: GO 8934
8984: POP
8985: POP
// end ;
8986: GO 8897
8988: POP
8989: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
8990: LD_ADDR_VAR 0 2
8994: PUSH
8995: DOUBLE
8996: LD_INT 1
8998: DEC
8999: ST_TO_ADDR
9000: LD_INT 3
9002: PUSH
9003: LD_INT 4
9005: PUSH
9006: LD_INT 5
9008: PUSH
9009: LD_INT 5
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: PUSH
9018: LD_OWVAR 67
9022: ARRAY
9023: PUSH
9024: FOR_TO
9025: IFFALSE 9072
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9027: LD_INT 0
9029: PPUSH
9030: LD_INT 4
9032: PUSH
9033: LD_INT 5
9035: PUSH
9036: LD_INT 5
9038: PUSH
9039: LD_INT 6
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: PUSH
9048: LD_OWVAR 67
9052: ARRAY
9053: PPUSH
9054: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9058: CALL_OW 44
9062: PPUSH
9063: LD_INT 28
9065: PPUSH
9066: CALL_OW 52
// end ;
9070: GO 9024
9072: POP
9073: POP
// for i := 1 to 2 do
9074: LD_ADDR_VAR 0 2
9078: PUSH
9079: DOUBLE
9080: LD_INT 1
9082: DEC
9083: ST_TO_ADDR
9084: LD_INT 2
9086: PUSH
9087: FOR_TO
9088: IFFALSE 9122
// begin PrepareScientist ( false , 6 ) ;
9090: LD_INT 0
9092: PPUSH
9093: LD_INT 6
9095: PPUSH
9096: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
9100: CALL_OW 44
9104: PPUSH
9105: LD_INT 81
9107: PPUSH
9108: LD_INT 93
9110: PPUSH
9111: CALL_OW 428
9115: PPUSH
9116: CALL_OW 52
// end ;
9120: GO 9087
9122: POP
9123: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
9124: LD_INT 22
9126: PPUSH
9127: LD_INT 1
9129: PPUSH
9130: LD_INT 3
9132: PPUSH
9133: LD_INT 51
9135: PPUSH
9136: LD_INT 100
9138: PPUSH
9139: CALL 43543 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
9143: CALL_OW 45
9147: PPUSH
9148: LD_INT 91
9150: PPUSH
9151: LD_INT 94
9153: PPUSH
9154: LD_INT 3
9156: PPUSH
9157: LD_INT 0
9159: PPUSH
9160: CALL_OW 50
// for i := 1 to 2 do
9164: LD_ADDR_VAR 0 2
9168: PUSH
9169: DOUBLE
9170: LD_INT 1
9172: DEC
9173: ST_TO_ADDR
9174: LD_INT 2
9176: PUSH
9177: FOR_TO
9178: IFFALSE 9222
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
9180: LD_INT 22
9182: PPUSH
9183: LD_INT 1
9185: PPUSH
9186: LD_INT 3
9188: PPUSH
9189: LD_INT 52
9191: PPUSH
9192: LD_INT 100
9194: PPUSH
9195: CALL 43543 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
9199: CALL_OW 45
9203: PPUSH
9204: LD_INT 91
9206: PPUSH
9207: LD_INT 94
9209: PPUSH
9210: LD_INT 4
9212: PPUSH
9213: LD_INT 0
9215: PPUSH
9216: CALL_OW 50
// end ;
9220: GO 9177
9222: POP
9223: POP
// end ;
9224: LD_VAR 0 1
9228: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
9229: LD_INT 0
9231: PPUSH
9232: PPUSH
9233: PPUSH
9234: PPUSH
9235: PPUSH
// uc_side := 3 ;
9236: LD_ADDR_OWVAR 20
9240: PUSH
9241: LD_INT 3
9243: ST_TO_ADDR
// uc_nation := 3 ;
9244: LD_ADDR_OWVAR 21
9248: PUSH
9249: LD_INT 3
9251: ST_TO_ADDR
// for i := 1 to 4 do
9252: LD_ADDR_VAR 0 2
9256: PUSH
9257: DOUBLE
9258: LD_INT 1
9260: DEC
9261: ST_TO_ADDR
9262: LD_INT 4
9264: PUSH
9265: FOR_TO
9266: IFFALSE 9393
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9268: LD_INT 22
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: LD_INT 1
9276: PPUSH
9277: LD_INT 42
9279: PUSH
9280: LD_INT 43
9282: PUSH
9283: LD_INT 44
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: PUSH
9291: LD_INT 1
9293: PPUSH
9294: LD_INT 3
9296: PPUSH
9297: CALL_OW 12
9301: ARRAY
9302: PPUSH
9303: LD_INT 40
9305: PPUSH
9306: CALL 43543 0 5
// veh := CreateVehicle ;
9310: LD_ADDR_VAR 0 4
9314: PUSH
9315: CALL_OW 45
9319: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9320: LD_VAR 0 4
9324: PPUSH
9325: LD_INT 5
9327: PPUSH
9328: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
9332: LD_VAR 0 4
9336: PPUSH
9337: LD_INT 7
9339: PPUSH
9340: LD_INT 0
9342: PPUSH
9343: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9347: LD_INT 0
9349: PPUSH
9350: LD_INT 5
9352: PPUSH
9353: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9357: CALL_OW 44
9361: PPUSH
9362: LD_VAR 0 4
9366: PPUSH
9367: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9371: LD_ADDR_VAR 0 5
9375: PUSH
9376: LD_VAR 0 5
9380: PPUSH
9381: LD_VAR 0 4
9385: PPUSH
9386: CALL 75927 0 2
9390: ST_TO_ADDR
// end ;
9391: GO 9265
9393: POP
9394: POP
// for i := 1 to 3 do
9395: LD_ADDR_VAR 0 2
9399: PUSH
9400: DOUBLE
9401: LD_INT 1
9403: DEC
9404: ST_TO_ADDR
9405: LD_INT 3
9407: PUSH
9408: FOR_TO
9409: IFFALSE 9536
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
9411: LD_INT 22
9413: PPUSH
9414: LD_INT 1
9416: PPUSH
9417: LD_INT 1
9419: PPUSH
9420: LD_INT 42
9422: PUSH
9423: LD_INT 43
9425: PUSH
9426: LD_INT 44
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 1
9436: PPUSH
9437: LD_INT 3
9439: PPUSH
9440: CALL_OW 12
9444: ARRAY
9445: PPUSH
9446: LD_INT 40
9448: PPUSH
9449: CALL 43543 0 5
// veh := CreateVehicle ;
9453: LD_ADDR_VAR 0 4
9457: PUSH
9458: CALL_OW 45
9462: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9463: LD_VAR 0 4
9467: PPUSH
9468: LD_INT 5
9470: PPUSH
9471: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
9475: LD_VAR 0 4
9479: PPUSH
9480: LD_INT 8
9482: PPUSH
9483: LD_INT 0
9485: PPUSH
9486: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
9490: LD_INT 0
9492: PPUSH
9493: LD_INT 5
9495: PPUSH
9496: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
9500: CALL_OW 44
9504: PPUSH
9505: LD_VAR 0 4
9509: PPUSH
9510: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
9514: LD_ADDR_VAR 0 5
9518: PUSH
9519: LD_VAR 0 5
9523: PPUSH
9524: LD_VAR 0 4
9528: PPUSH
9529: CALL 75927 0 2
9533: ST_TO_ADDR
// end ;
9534: GO 9408
9536: POP
9537: POP
// for i := 1 to 2 do
9538: LD_ADDR_VAR 0 2
9542: PUSH
9543: DOUBLE
9544: LD_INT 1
9546: DEC
9547: ST_TO_ADDR
9548: LD_INT 2
9550: PUSH
9551: FOR_TO
9552: IFFALSE 9611
// begin PrepareSoldier ( false , 5 ) ;
9554: LD_INT 0
9556: PPUSH
9557: LD_INT 5
9559: PPUSH
9560: CALL_OW 381
// un := CreateHuman ;
9564: LD_ADDR_VAR 0 3
9568: PUSH
9569: CALL_OW 44
9573: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
9574: LD_VAR 0 3
9578: PPUSH
9579: LD_INT 8
9581: PPUSH
9582: LD_INT 0
9584: PPUSH
9585: CALL_OW 49
// tmp := Join ( tmp , un ) ;
9589: LD_ADDR_VAR 0 5
9593: PUSH
9594: LD_VAR 0 5
9598: PPUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: CALL 75927 0 2
9608: ST_TO_ADDR
// end ;
9609: GO 9551
9611: POP
9612: POP
// for i in tmp do
9613: LD_ADDR_VAR 0 2
9617: PUSH
9618: LD_VAR 0 5
9622: PUSH
9623: FOR_IN
9624: IFFALSE 9643
// ComAgressiveMove ( i , 51 , 16 ) ;
9626: LD_VAR 0 2
9630: PPUSH
9631: LD_INT 51
9633: PPUSH
9634: LD_INT 16
9636: PPUSH
9637: CALL_OW 114
9641: GO 9623
9643: POP
9644: POP
// end ;
9645: LD_VAR 0 1
9649: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
9650: LD_EXP 30
9654: IFFALSE 10229
9656: GO 9658
9658: DISABLE
9659: LD_INT 0
9661: PPUSH
9662: PPUSH
9663: PPUSH
// begin enable ;
9664: ENABLE
// if not ruMobile then
9665: LD_EXP 30
9669: NOT
9670: IFFALSE 9674
// exit ;
9672: GO 10229
// for i in ruMobile do
9674: LD_ADDR_VAR 0 1
9678: PUSH
9679: LD_EXP 30
9683: PUSH
9684: FOR_IN
9685: IFFALSE 10227
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
9687: LD_VAR 0 1
9691: PPUSH
9692: CALL_OW 302
9696: NOT
9697: PUSH
9698: LD_VAR 0 1
9702: PPUSH
9703: CALL_OW 255
9707: PUSH
9708: LD_INT 3
9710: NONEQUAL
9711: OR
9712: IFFALSE 9732
// begin ruMobile := ruMobile diff i ;
9714: LD_ADDR_EXP 30
9718: PUSH
9719: LD_EXP 30
9723: PUSH
9724: LD_VAR 0 1
9728: DIFF
9729: ST_TO_ADDR
// continue ;
9730: GO 9684
// end ; if GetTag ( i ) = 300 then
9732: LD_VAR 0 1
9736: PPUSH
9737: CALL_OW 110
9741: PUSH
9742: LD_INT 300
9744: EQUAL
9745: IFFALSE 9860
// begin if GetFuel ( i ) < 50 then
9747: LD_VAR 0 1
9751: PPUSH
9752: CALL_OW 261
9756: PUSH
9757: LD_INT 50
9759: LESS
9760: IFFALSE 9819
// begin ComMoveXY ( i , 93 , 100 ) ;
9762: LD_VAR 0 1
9766: PPUSH
9767: LD_INT 93
9769: PPUSH
9770: LD_INT 100
9772: PPUSH
9773: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9777: LD_INT 35
9779: PPUSH
9780: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
9784: LD_VAR 0 1
9788: PPUSH
9789: LD_INT 93
9791: PPUSH
9792: LD_INT 100
9794: PPUSH
9795: CALL_OW 297
9799: PUSH
9800: LD_INT 4
9802: LESS
9803: IFFALSE 9777
// SetFuel ( i , 100 ) ;
9805: LD_VAR 0 1
9809: PPUSH
9810: LD_INT 100
9812: PPUSH
9813: CALL_OW 240
// end else
9817: GO 9860
// if not IsInArea ( i , ruParkingArea ) then
9819: LD_VAR 0 1
9823: PPUSH
9824: LD_INT 10
9826: PPUSH
9827: CALL_OW 308
9831: NOT
9832: IFFALSE 9848
// ComMoveToArea ( i , ruParkingArea ) else
9834: LD_VAR 0 1
9838: PPUSH
9839: LD_INT 10
9841: PPUSH
9842: CALL_OW 113
9846: GO 9860
// SetTag ( i , 301 ) ;
9848: LD_VAR 0 1
9852: PPUSH
9853: LD_INT 301
9855: PPUSH
9856: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
9860: LD_VAR 0 1
9864: PPUSH
9865: CALL_OW 110
9869: PUSH
9870: LD_INT 301
9872: EQUAL
9873: IFFALSE 10003
// begin if GetLives ( i ) < 1000 then
9875: LD_VAR 0 1
9879: PPUSH
9880: CALL_OW 256
9884: PUSH
9885: LD_INT 1000
9887: LESS
9888: IFFALSE 9980
// begin if not IsDrivenBy ( i ) then
9890: LD_VAR 0 1
9894: PPUSH
9895: CALL_OW 311
9899: NOT
9900: IFFALSE 9904
// continue ;
9902: GO 9684
// mech := IsDrivenBy ( i ) ;
9904: LD_ADDR_VAR 0 2
9908: PUSH
9909: LD_VAR 0 1
9913: PPUSH
9914: CALL_OW 311
9918: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9919: LD_VAR 0 2
9923: PPUSH
9924: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9928: LD_VAR 0 2
9932: PPUSH
9933: LD_VAR 0 1
9937: PPUSH
9938: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9942: LD_INT 35
9944: PPUSH
9945: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9949: LD_VAR 0 1
9953: PPUSH
9954: CALL_OW 256
9958: PUSH
9959: LD_INT 1000
9961: EQUAL
9962: IFFALSE 9942
// ComEnterUnit ( mech , i ) ;
9964: LD_VAR 0 2
9968: PPUSH
9969: LD_VAR 0 1
9973: PPUSH
9974: CALL_OW 120
// end else
9978: GO 10003
// if IsDrivenBy ( i ) then
9980: LD_VAR 0 1
9984: PPUSH
9985: CALL_OW 311
9989: IFFALSE 10003
// SetTag ( i , 0 ) ;
9991: LD_VAR 0 1
9995: PPUSH
9996: LD_INT 0
9998: PPUSH
9999: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10003: LD_VAR 0 1
10007: PPUSH
10008: CALL_OW 110
10012: PUSH
10013: LD_INT 300
10015: LESS
10016: IFFALSE 10225
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10018: LD_ADDR_VAR 0 3
10022: PUSH
10023: LD_INT 11
10025: PPUSH
10026: LD_INT 81
10028: PUSH
10029: LD_INT 3
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PPUSH
10036: CALL_OW 70
10040: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10041: LD_VAR 0 1
10045: PPUSH
10046: CALL_OW 256
10050: PUSH
10051: LD_INT 650
10053: LESS
10054: IFFALSE 10079
// begin ComStop ( i ) ;
10056: LD_VAR 0 1
10060: PPUSH
10061: CALL_OW 141
// SetTag ( i , 300 ) ;
10065: LD_VAR 0 1
10069: PPUSH
10070: LD_INT 300
10072: PPUSH
10073: CALL_OW 109
// continue ;
10077: GO 9684
// end ; if enemy then
10079: LD_VAR 0 3
10083: IFFALSE 10123
// begin if not HasTask ( i ) then
10085: LD_VAR 0 1
10089: PPUSH
10090: CALL_OW 314
10094: NOT
10095: IFFALSE 10121
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10097: LD_VAR 0 1
10101: PPUSH
10102: LD_VAR 0 3
10106: PPUSH
10107: LD_VAR 0 1
10111: PPUSH
10112: CALL_OW 74
10116: PPUSH
10117: CALL_OW 115
// end else
10121: GO 10225
// if ruMobile > 2 then
10123: LD_EXP 30
10127: PUSH
10128: LD_INT 2
10130: GREATER
10131: IFFALSE 10225
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
10133: LD_ADDR_VAR 0 3
10137: PUSH
10138: LD_INT 81
10140: PUSH
10141: LD_INT 3
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PPUSH
10148: CALL_OW 69
10152: ST_TO_ADDR
// if enemy then
10153: LD_VAR 0 3
10157: IFFALSE 10225
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
10159: LD_VAR 0 1
10163: PPUSH
10164: LD_INT 116
10166: PUSH
10167: LD_INT 95
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: LD_INT 84
10176: PUSH
10177: LD_INT 68
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: LD_INT 58
10186: PUSH
10187: LD_INT 53
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 44
10196: PUSH
10197: LD_INT 35
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 45
10206: PUSH
10207: LD_INT 23
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: PPUSH
10221: CALL 78533 0 2
// end ; end ; end ;
10225: GO 9684
10227: POP
10228: POP
// end ;
10229: PPOPN 3
10231: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
10232: LD_INT 3
10234: PUSH
10235: LD_INT 22
10237: PUSH
10238: LD_INT 1
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 32
10251: PUSH
10252: LD_INT 1
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PPUSH
10263: CALL_OW 69
10267: IFFALSE 10351
10269: GO 10271
10271: DISABLE
10272: LD_INT 0
10274: PPUSH
// begin enable ;
10275: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
10276: LD_ADDR_VAR 0 1
10280: PUSH
10281: LD_INT 3
10283: PUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 1
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 32
10300: PUSH
10301: LD_INT 1
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: PUSH
10317: FOR_IN
10318: IFFALSE 10349
// if GetFuel ( i ) < 3 then
10320: LD_VAR 0 1
10324: PPUSH
10325: CALL_OW 261
10329: PUSH
10330: LD_INT 3
10332: LESS
10333: IFFALSE 10347
// SetFuel ( i , 3 ) ;
10335: LD_VAR 0 1
10339: PPUSH
10340: LD_INT 3
10342: PPUSH
10343: CALL_OW 240
10347: GO 10317
10349: POP
10350: POP
// end ;
10351: PPOPN 1
10353: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
10354: LD_INT 29
10356: PPUSH
10357: CALL_OW 302
10361: PUSH
10362: LD_INT 29
10364: PPUSH
10365: CALL_OW 461
10369: PUSH
10370: LD_INT 2
10372: EQUAL
10373: AND
10374: IFFALSE 10607
10376: GO 10378
10378: DISABLE
10379: LD_INT 0
10381: PPUSH
10382: PPUSH
// begin enable ;
10383: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
10384: LD_ADDR_VAR 0 1
10388: PUSH
10389: LD_INT 21
10391: PUSH
10392: LD_INT 22
10394: PUSH
10395: LD_INT 23
10397: PUSH
10398: LD_INT 24
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 1
10409: PPUSH
10410: LD_INT 4
10412: PPUSH
10413: CALL_OW 12
10417: ARRAY
10418: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
10419: LD_ADDR_VAR 0 2
10423: PUSH
10424: LD_INT 42
10426: PUSH
10427: LD_INT 44
10429: PUSH
10430: LD_INT 43
10432: PUSH
10433: LD_INT 46
10435: PUSH
10436: LD_INT 45
10438: PUSH
10439: LD_INT 46
10441: PUSH
10442: LD_INT 45
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: PUSH
10454: LD_OWVAR 67
10458: PUSH
10459: LD_INT 0
10461: PPUSH
10462: LD_INT 3
10464: PPUSH
10465: CALL_OW 12
10469: PLUS
10470: ARRAY
10471: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
10472: LD_VAR 0 1
10476: PUSH
10477: LD_INT 21
10479: PUSH
10480: LD_INT 22
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: IN
10487: PUSH
10488: LD_VAR 0 2
10492: PUSH
10493: LD_INT 46
10495: EQUAL
10496: AND
10497: IFFALSE 10526
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
10499: LD_ADDR_VAR 0 2
10503: PUSH
10504: LD_INT 44
10506: PUSH
10507: LD_INT 45
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 1
10516: PPUSH
10517: LD_INT 2
10519: PPUSH
10520: CALL_OW 12
10524: ARRAY
10525: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
10526: LD_OWVAR 1
10530: PUSH
10531: LD_INT 31500
10533: PUSH
10534: LD_INT 27300
10536: PUSH
10537: LD_INT 23100
10539: PUSH
10540: LD_INT 21000
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: PUSH
10549: LD_OWVAR 67
10553: ARRAY
10554: LESS
10555: IFFALSE 10584
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
10557: LD_ADDR_VAR 0 2
10561: PUSH
10562: LD_INT 44
10564: PUSH
10565: LD_INT 43
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: LD_INT 1
10574: PPUSH
10575: LD_INT 2
10577: PPUSH
10578: CALL_OW 12
10582: ARRAY
10583: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
10584: LD_INT 29
10586: PPUSH
10587: LD_VAR 0 1
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: LD_INT 1
10597: PPUSH
10598: LD_VAR 0 2
10602: PPUSH
10603: CALL_OW 185
// end ;
10607: PPOPN 2
10609: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , tmp , b , eng , crane , tag , sci , lab ;
10610: LD_INT 28
10612: PPUSH
10613: CALL_OW 302
10617: IFFALSE 11456
10619: GO 10621
10621: DISABLE
10622: LD_INT 0
10624: PPUSH
10625: PPUSH
10626: PPUSH
10627: PPUSH
10628: PPUSH
10629: PPUSH
10630: PPUSH
10631: PPUSH
// begin enable ;
10632: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
10633: LD_ADDR_VAR 0 3
10637: PUSH
10638: LD_INT 12
10640: PPUSH
10641: LD_INT 3
10643: PUSH
10644: LD_INT 24
10646: PUSH
10647: LD_INT 1000
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 21
10660: PUSH
10661: LD_INT 3
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 70
10676: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10677: LD_ADDR_VAR 0 4
10681: PUSH
10682: LD_INT 22
10684: PUSH
10685: LD_INT 3
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: LD_INT 25
10694: PUSH
10695: LD_INT 2
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 69
10710: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
10711: LD_ADDR_VAR 0 5
10715: PUSH
10716: LD_INT 22
10718: PUSH
10719: LD_INT 3
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: LD_INT 34
10728: PUSH
10729: LD_INT 52
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
10745: LD_ADDR_VAR 0 7
10749: PUSH
10750: LD_INT 22
10752: PUSH
10753: LD_INT 3
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 25
10762: PUSH
10763: LD_INT 4
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PPUSH
10774: CALL_OW 69
10778: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
10779: LD_ADDR_VAR 0 8
10783: PUSH
10784: LD_INT 81
10786: PPUSH
10787: LD_INT 93
10789: PPUSH
10790: CALL_OW 428
10794: ST_TO_ADDR
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
10795: LD_VAR 0 7
10799: PUSH
10800: LD_VAR 0 4
10804: PPUSH
10805: LD_INT 120
10807: PUSH
10808: LD_INT 2
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: PPUSH
10815: CALL_OW 72
10819: AND
10820: IFFALSE 10833
// ComExitAll ( sci ) else
10822: LD_VAR 0 7
10826: PPUSH
10827: CALL 76408 0 1
10831: GO 10906
// if sci then
10833: LD_VAR 0 7
10837: IFFALSE 10906
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
10839: LD_VAR 0 7
10843: PPUSH
10844: LD_INT 3
10846: PUSH
10847: LD_INT 54
10849: PUSH
10850: EMPTY
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 72
10861: PUSH
10862: LD_VAR 0 8
10866: PPUSH
10867: CALL_OW 302
10871: AND
10872: IFFALSE 10906
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
10874: LD_VAR 0 7
10878: PPUSH
10879: LD_INT 3
10881: PUSH
10882: LD_INT 54
10884: PUSH
10885: EMPTY
10886: LIST
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PPUSH
10892: CALL_OW 72
10896: PPUSH
10897: LD_VAR 0 8
10901: PPUSH
10902: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
10906: LD_VAR 0 5
10910: PPUSH
10911: LD_INT 50
10913: PUSH
10914: EMPTY
10915: LIST
10916: PPUSH
10917: CALL_OW 72
10921: PUSH
10922: LD_VAR 0 3
10926: AND
10927: IFFALSE 10958
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
10929: LD_VAR 0 5
10933: PPUSH
10934: LD_INT 50
10936: PUSH
10937: EMPTY
10938: LIST
10939: PPUSH
10940: CALL_OW 72
10944: PPUSH
10945: LD_VAR 0 3
10949: PUSH
10950: LD_INT 1
10952: ARRAY
10953: PPUSH
10954: CALL_OW 130
// if eng then
10958: LD_VAR 0 4
10962: IFFALSE 11456
// begin for i in eng do
10964: LD_ADDR_VAR 0 1
10968: PUSH
10969: LD_VAR 0 4
10973: PUSH
10974: FOR_IN
10975: IFFALSE 11454
// begin tag := GetTag ( i ) ;
10977: LD_ADDR_VAR 0 6
10981: PUSH
10982: LD_VAR 0 1
10986: PPUSH
10987: CALL_OW 110
10991: ST_TO_ADDR
// if not b and not ruBuildList and tag = 1 then
10992: LD_VAR 0 3
10996: NOT
10997: PUSH
10998: LD_EXP 31
11002: NOT
11003: AND
11004: PUSH
11005: LD_VAR 0 6
11009: PUSH
11010: LD_INT 1
11012: EQUAL
11013: AND
11014: IFFALSE 11040
// begin SetTag ( i , 0 ) ;
11016: LD_VAR 0 1
11020: PPUSH
11021: LD_INT 0
11023: PPUSH
11024: CALL_OW 109
// ComEnterUnit ( i , ruDep ) ;
11028: LD_VAR 0 1
11032: PPUSH
11033: LD_INT 28
11035: PPUSH
11036: CALL_OW 120
// end ; if ( b or ruBuildList ) and tag = 0 then
11040: LD_VAR 0 3
11044: PUSH
11045: LD_EXP 31
11049: OR
11050: PUSH
11051: LD_VAR 0 6
11055: PUSH
11056: LD_INT 0
11058: EQUAL
11059: AND
11060: IFFALSE 11074
// SetTag ( i , 1 ) ;
11062: LD_VAR 0 1
11066: PPUSH
11067: LD_INT 1
11069: PPUSH
11070: CALL_OW 109
// if IsInUnit ( i ) and tag = 1 then
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 310
11083: PUSH
11084: LD_VAR 0 6
11088: PUSH
11089: LD_INT 1
11091: EQUAL
11092: AND
11093: IFFALSE 11104
// ComExit ( i ) ;
11095: LD_VAR 0 1
11099: PPUSH
11100: CALL 76325 0 1
// if GetLives ( i ) < 500 and tag = 1 then
11104: LD_VAR 0 1
11108: PPUSH
11109: CALL_OW 256
11113: PUSH
11114: LD_INT 500
11116: LESS
11117: PUSH
11118: LD_VAR 0 6
11122: PUSH
11123: LD_INT 1
11125: EQUAL
11126: AND
11127: IFFALSE 11141
// SetTag ( i , 2 ) ;
11129: LD_VAR 0 1
11133: PPUSH
11134: LD_INT 2
11136: PPUSH
11137: CALL_OW 109
// if GetLives ( i ) = 1000 and tag = 2 then
11141: LD_VAR 0 1
11145: PPUSH
11146: CALL_OW 256
11150: PUSH
11151: LD_INT 1000
11153: EQUAL
11154: PUSH
11155: LD_VAR 0 6
11159: PUSH
11160: LD_INT 2
11162: EQUAL
11163: AND
11164: IFFALSE 11178
// SetTag ( i , 1 ) ;
11166: LD_VAR 0 1
11170: PPUSH
11171: LD_INT 1
11173: PPUSH
11174: CALL_OW 109
// if tag = 2 then
11178: LD_VAR 0 6
11182: PUSH
11183: LD_INT 2
11185: EQUAL
11186: IFFALSE 11233
// begin if GetDistUnitXY ( i , 84 , 93 ) > 6 then
11188: LD_VAR 0 1
11192: PPUSH
11193: LD_INT 84
11195: PPUSH
11196: LD_INT 93
11198: PPUSH
11199: CALL_OW 297
11203: PUSH
11204: LD_INT 6
11206: GREATER
11207: IFFALSE 11233
// begin ComMoveXY ( i , 84 , 93 ) ;
11209: LD_VAR 0 1
11213: PPUSH
11214: LD_INT 84
11216: PPUSH
11217: LD_INT 93
11219: PPUSH
11220: CALL_OW 111
// AddComHold ( i ) ;
11224: LD_VAR 0 1
11228: PPUSH
11229: CALL_OW 200
// end ; end ; if IsInArea ( i , ruDefendArea ) then
11233: LD_VAR 0 1
11237: PPUSH
11238: LD_INT 11
11240: PPUSH
11241: CALL_OW 308
11245: IFFALSE 11259
// ComMoveToArea ( i , ruBaseArea ) ;
11247: LD_VAR 0 1
11251: PPUSH
11252: LD_INT 12
11254: PPUSH
11255: CALL_OW 113
// if tag = 1 then
11259: LD_VAR 0 6
11263: PUSH
11264: LD_INT 1
11266: EQUAL
11267: IFFALSE 11452
// begin if b then
11269: LD_VAR 0 3
11273: IFFALSE 11301
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) else
11275: LD_VAR 0 1
11279: PPUSH
11280: LD_VAR 0 3
11284: PPUSH
11285: LD_VAR 0 1
11289: PPUSH
11290: CALL_OW 74
11294: PPUSH
11295: CALL_OW 130
11299: GO 11452
// if ruBuildList and FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
11301: LD_EXP 31
11305: PUSH
11306: LD_INT 11
11308: PPUSH
11309: LD_INT 81
11311: PUSH
11312: LD_INT 3
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PPUSH
11319: CALL_OW 70
11323: PUSH
11324: LD_INT 0
11326: EQUAL
11327: AND
11328: PUSH
11329: LD_INT 28
11331: PPUSH
11332: LD_EXP 31
11336: PUSH
11337: LD_INT 1
11339: ARRAY
11340: PUSH
11341: LD_INT 1
11343: ARRAY
11344: PPUSH
11345: LD_EXP 31
11349: PUSH
11350: LD_INT 1
11352: ARRAY
11353: PUSH
11354: LD_INT 2
11356: ARRAY
11357: PPUSH
11358: LD_EXP 31
11362: PUSH
11363: LD_INT 1
11365: ARRAY
11366: PUSH
11367: LD_INT 3
11369: ARRAY
11370: PPUSH
11371: LD_EXP 31
11375: PUSH
11376: LD_INT 1
11378: ARRAY
11379: PUSH
11380: LD_INT 4
11382: ARRAY
11383: PPUSH
11384: CALL 51768 0 5
11388: AND
11389: IFFALSE 11452
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
11391: LD_VAR 0 1
11395: PPUSH
11396: LD_EXP 31
11400: PUSH
11401: LD_INT 1
11403: ARRAY
11404: PUSH
11405: LD_INT 1
11407: ARRAY
11408: PPUSH
11409: LD_EXP 31
11413: PUSH
11414: LD_INT 1
11416: ARRAY
11417: PUSH
11418: LD_INT 2
11420: ARRAY
11421: PPUSH
11422: LD_EXP 31
11426: PUSH
11427: LD_INT 1
11429: ARRAY
11430: PUSH
11431: LD_INT 3
11433: ARRAY
11434: PPUSH
11435: LD_EXP 31
11439: PUSH
11440: LD_INT 1
11442: ARRAY
11443: PUSH
11444: LD_INT 4
11446: ARRAY
11447: PPUSH
11448: CALL_OW 145
// end ; end ;
11452: GO 10974
11454: POP
11455: POP
// end ; end ;
11456: PPOPN 8
11458: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
11459: LD_INT 0
11461: PPUSH
11462: PPUSH
11463: PPUSH
11464: PPUSH
11465: PPUSH
11466: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
11467: LD_ADDR_VAR 0 3
11471: PUSH
11472: DOUBLE
11473: LD_INT 1
11475: DEC
11476: ST_TO_ADDR
11477: LD_INT 3
11479: PUSH
11480: LD_INT 4
11482: PUSH
11483: LD_INT 5
11485: PUSH
11486: LD_INT 6
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: PUSH
11495: LD_OWVAR 67
11499: ARRAY
11500: PUSH
11501: LD_VAR 0 1
11505: PLUS
11506: PUSH
11507: FOR_TO
11508: IFFALSE 11825
// begin uc_side := 6 ;
11510: LD_ADDR_OWVAR 20
11514: PUSH
11515: LD_INT 6
11517: ST_TO_ADDR
// uc_nation := 3 ;
11518: LD_ADDR_OWVAR 21
11522: PUSH
11523: LD_INT 3
11525: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11526: LD_ADDR_VAR 0 6
11530: PUSH
11531: LD_INT 21
11533: PUSH
11534: LD_INT 22
11536: PUSH
11537: LD_INT 23
11539: PUSH
11540: LD_INT 24
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 1
11551: PPUSH
11552: LD_INT 4
11554: PPUSH
11555: CALL_OW 12
11559: ARRAY
11560: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11561: LD_ADDR_VAR 0 7
11565: PUSH
11566: LD_INT 42
11568: PUSH
11569: LD_INT 44
11571: PUSH
11572: LD_INT 43
11574: PUSH
11575: LD_INT 46
11577: PUSH
11578: LD_INT 45
11580: PUSH
11581: LD_INT 46
11583: PUSH
11584: LD_INT 45
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: PUSH
11596: LD_OWVAR 67
11600: PUSH
11601: LD_INT 0
11603: PPUSH
11604: LD_INT 3
11606: PPUSH
11607: CALL_OW 12
11611: PLUS
11612: ARRAY
11613: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11614: LD_VAR 0 6
11618: PUSH
11619: LD_INT 21
11621: PUSH
11622: LD_INT 22
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: IN
11629: PUSH
11630: LD_VAR 0 7
11634: PUSH
11635: LD_INT 46
11637: EQUAL
11638: AND
11639: IFFALSE 11668
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
11641: LD_ADDR_VAR 0 7
11645: PUSH
11646: LD_INT 44
11648: PUSH
11649: LD_INT 45
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: LD_INT 1
11658: PPUSH
11659: LD_INT 2
11661: PPUSH
11662: CALL_OW 12
11666: ARRAY
11667: ST_TO_ADDR
// if tick < [ 17 17$00 , 15 15$00 , 13 13$00 , 11 11$00 ] [ Difficulty ] then
11668: LD_OWVAR 1
11672: PUSH
11673: LD_INT 35700
11675: PUSH
11676: LD_INT 31500
11678: PUSH
11679: LD_INT 27300
11681: PUSH
11682: LD_INT 23100
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: PUSH
11691: LD_OWVAR 67
11695: ARRAY
11696: LESS
11697: IFFALSE 11730
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
11699: LD_ADDR_VAR 0 7
11703: PUSH
11704: LD_INT 44
11706: PUSH
11707: LD_INT 43
11709: PUSH
11710: LD_INT 42
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: LIST
11717: PUSH
11718: LD_INT 1
11720: PPUSH
11721: LD_INT 3
11723: PPUSH
11724: CALL_OW 12
11728: ARRAY
11729: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
11730: LD_VAR 0 6
11734: PPUSH
11735: LD_INT 1
11737: PPUSH
11738: LD_INT 3
11740: PPUSH
11741: LD_VAR 0 7
11745: PPUSH
11746: LD_INT 90
11748: PPUSH
11749: CALL 43543 0 5
// un := CreateVehicle ;
11753: LD_ADDR_VAR 0 4
11757: PUSH
11758: CALL_OW 45
11762: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
11763: LD_VAR 0 4
11767: PPUSH
11768: LD_INT 140
11770: PPUSH
11771: LD_INT 146
11773: PPUSH
11774: LD_INT 0
11776: PPUSH
11777: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
11781: LD_VAR 0 4
11785: PPUSH
11786: LD_INT 131
11788: PPUSH
11789: LD_INT 128
11791: PPUSH
11792: CALL_OW 111
// wait ( 0 0$3 ) ;
11796: LD_INT 105
11798: PPUSH
11799: CALL_OW 67
// tmp := Join ( tmp , un ) ;
11803: LD_ADDR_VAR 0 5
11807: PUSH
11808: LD_VAR 0 5
11812: PPUSH
11813: LD_VAR 0 4
11817: PPUSH
11818: CALL 75927 0 2
11822: ST_TO_ADDR
// end ;
11823: GO 11507
11825: POP
11826: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
11827: LD_ADDR_EXP 32
11831: PUSH
11832: LD_EXP 32
11836: PPUSH
11837: LD_VAR 0 5
11841: PPUSH
11842: CALL 75964 0 2
11846: ST_TO_ADDR
// end ;
11847: LD_VAR 0 2
11851: RET
// every 0 0$3 trigger russianAttackers do
11852: LD_EXP 32
11856: IFFALSE 11939
11858: GO 11860
11860: DISABLE
// begin enable ;
11861: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
11862: LD_EXP 32
11866: PPUSH
11867: LD_INT 126
11869: PUSH
11870: LD_INT 108
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 107
11879: PUSH
11880: LD_INT 85
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: LD_INT 82
11889: PUSH
11890: LD_INT 62
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: LD_INT 73
11899: PUSH
11900: LD_INT 46
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 62
11909: PUSH
11910: LD_INT 31
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 52
11919: PUSH
11920: LD_INT 17
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL 78533 0 2
// end ; end_of_file
11939: END
// on SailEvent ( event ) do begin if event = 1 then
11940: LD_VAR 0 1
11944: PUSH
11945: LD_INT 1
11947: EQUAL
11948: IFFALSE 11963
// PrepareRussianAttack ( Difficulty + 3 ) ;
11950: LD_OWVAR 67
11954: PUSH
11955: LD_INT 3
11957: PLUS
11958: PPUSH
11959: CALL 11459 0 1
// end ;
11963: PPOPN 1
11965: END
// on UnitDestroyed ( un ) do var tmp , chassis , weapon , btype ;
11966: LD_INT 0
11968: PPUSH
11969: PPUSH
11970: PPUSH
11971: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
11972: LD_VAR 0 1
11976: PPUSH
11977: CALL 34215 0 1
// if un = JMM then
11981: LD_VAR 0 1
11985: PUSH
11986: LD_EXP 11
11990: EQUAL
11991: IFFALSE 12000
// YouLost ( JMM ) ;
11993: LD_STRING JMM
11995: PPUSH
11996: CALL_OW 104
// if un = Sikorski then
12000: LD_VAR 0 1
12004: PUSH
12005: LD_EXP 24
12009: EQUAL
12010: IFFALSE 12036
// if sikorskiStatus = 0 then
12012: LD_EXP 8
12016: PUSH
12017: LD_INT 0
12019: EQUAL
12020: IFFALSE 12028
// SikorskiKilledInAction else
12022: CALL 16928 0 0
12026: GO 12036
// sikorskiIsKilled := true ;
12028: LD_ADDR_EXP 9
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
12036: LD_VAR 0 1
12040: PPUSH
12041: CALL_OW 255
12045: PUSH
12046: LD_INT 1
12048: EQUAL
12049: PUSH
12050: LD_VAR 0 1
12054: PPUSH
12055: CALL_OW 266
12059: PUSH
12060: LD_INT 0
12062: PUSH
12063: LD_INT 1
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: IN
12070: AND
12071: IFFALSE 12080
// YouLost ( Destroyed ) ;
12073: LD_STRING Destroyed
12075: PPUSH
12076: CALL_OW 104
// if un in ruMobile then
12080: LD_VAR 0 1
12084: PUSH
12085: LD_EXP 30
12089: IN
12090: IFFALSE 12108
// ruMobile := ruMobile diff un ;
12092: LD_ADDR_EXP 30
12096: PUSH
12097: LD_EXP 30
12101: PUSH
12102: LD_VAR 0 1
12106: DIFF
12107: ST_TO_ADDR
// if GetSide ( un ) = 3 then
12108: LD_VAR 0 1
12112: PPUSH
12113: CALL_OW 255
12117: PUSH
12118: LD_INT 3
12120: EQUAL
12121: IFFALSE 12699
// begin if GetType ( un ) = unit_building then
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 247
12132: PUSH
12133: LD_INT 3
12135: EQUAL
12136: IFFALSE 12272
// begin btype := GetBType ( un ) ;
12138: LD_ADDR_VAR 0 5
12142: PUSH
12143: LD_VAR 0 1
12147: PPUSH
12148: CALL_OW 266
12152: ST_TO_ADDR
// if btype = b_warehouse then
12153: LD_VAR 0 5
12157: PUSH
12158: LD_INT 1
12160: EQUAL
12161: IFFALSE 12171
// btype := b_depot ;
12163: LD_ADDR_VAR 0 5
12167: PUSH
12168: LD_INT 0
12170: ST_TO_ADDR
// if btype = b_barracks then
12171: LD_VAR 0 5
12175: PUSH
12176: LD_INT 5
12178: EQUAL
12179: IFFALSE 12189
// btype := b_armoury ;
12181: LD_ADDR_VAR 0 5
12185: PUSH
12186: LD_INT 4
12188: ST_TO_ADDR
// if btype = b_lab_full then
12189: LD_VAR 0 5
12193: PUSH
12194: LD_INT 8
12196: EQUAL
12197: IFFALSE 12207
// btype := b_lab ;
12199: LD_ADDR_VAR 0 5
12203: PUSH
12204: LD_INT 6
12206: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
12207: LD_ADDR_EXP 31
12211: PUSH
12212: LD_EXP 31
12216: PPUSH
12217: LD_EXP 31
12221: PUSH
12222: LD_INT 1
12224: PLUS
12225: PPUSH
12226: LD_VAR 0 5
12230: PUSH
12231: LD_VAR 0 1
12235: PPUSH
12236: CALL_OW 250
12240: PUSH
12241: LD_VAR 0 1
12245: PPUSH
12246: CALL_OW 251
12250: PUSH
12251: LD_VAR 0 1
12255: PPUSH
12256: CALL_OW 254
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: PPUSH
12267: CALL_OW 1
12271: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12272: LD_VAR 0 1
12276: PPUSH
12277: CALL_OW 247
12281: PUSH
12282: LD_INT 2
12284: EQUAL
12285: IFFALSE 12560
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
12287: LD_VAR 0 1
12291: PPUSH
12292: CALL_OW 264
12296: PUSH
12297: LD_INT 52
12299: PUSH
12300: LD_INT 51
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: IN
12307: IFFALSE 12337
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
12309: LD_INT 29
12311: PPUSH
12312: LD_INT 22
12314: PPUSH
12315: LD_INT 1
12317: PPUSH
12318: LD_INT 3
12320: PPUSH
12321: LD_VAR 0 1
12325: PPUSH
12326: CALL_OW 264
12330: PPUSH
12331: CALL_OW 185
// end else
12335: GO 12560
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
12337: LD_ADDR_VAR 0 3
12341: PUSH
12342: LD_INT 21
12344: PUSH
12345: LD_INT 22
12347: PUSH
12348: LD_INT 23
12350: PUSH
12351: LD_INT 24
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 1
12362: PPUSH
12363: LD_INT 4
12365: PPUSH
12366: CALL_OW 12
12370: ARRAY
12371: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
12372: LD_ADDR_VAR 0 4
12376: PUSH
12377: LD_INT 42
12379: PUSH
12380: LD_INT 44
12382: PUSH
12383: LD_INT 43
12385: PUSH
12386: LD_INT 46
12388: PUSH
12389: LD_INT 45
12391: PUSH
12392: LD_INT 46
12394: PUSH
12395: LD_INT 45
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: PUSH
12407: LD_OWVAR 67
12411: PUSH
12412: LD_INT 0
12414: PPUSH
12415: LD_INT 3
12417: PPUSH
12418: CALL_OW 12
12422: PLUS
12423: ARRAY
12424: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
12425: LD_VAR 0 3
12429: PUSH
12430: LD_INT 21
12432: PUSH
12433: LD_INT 22
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: IN
12440: PUSH
12441: LD_VAR 0 4
12445: PUSH
12446: LD_INT 46
12448: EQUAL
12449: AND
12450: IFFALSE 12479
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
12452: LD_ADDR_VAR 0 4
12456: PUSH
12457: LD_INT 44
12459: PUSH
12460: LD_INT 45
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 1
12469: PPUSH
12470: LD_INT 2
12472: PPUSH
12473: CALL_OW 12
12477: ARRAY
12478: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
12479: LD_OWVAR 1
12483: PUSH
12484: LD_INT 31500
12486: PUSH
12487: LD_INT 27300
12489: PUSH
12490: LD_INT 23100
12492: PUSH
12493: LD_INT 21000
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: PUSH
12502: LD_OWVAR 67
12506: ARRAY
12507: LESS
12508: IFFALSE 12537
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
12510: LD_ADDR_VAR 0 4
12514: PUSH
12515: LD_INT 44
12517: PUSH
12518: LD_INT 43
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PUSH
12525: LD_INT 1
12527: PPUSH
12528: LD_INT 2
12530: PPUSH
12531: CALL_OW 12
12535: ARRAY
12536: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
12537: LD_INT 29
12539: PPUSH
12540: LD_VAR 0 3
12544: PPUSH
12545: LD_INT 1
12547: PPUSH
12548: LD_INT 1
12550: PPUSH
12551: LD_VAR 0 4
12555: PPUSH
12556: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
12560: LD_VAR 0 1
12564: PPUSH
12565: CALL_OW 257
12569: PUSH
12570: LD_INT 3
12572: EQUAL
12573: IFFALSE 12699
// begin if ruMechCounter = 0 or not IsOk ( ruFac ) then
12575: LD_EXP 29
12579: PUSH
12580: LD_INT 0
12582: EQUAL
12583: PUSH
12584: LD_INT 29
12586: PPUSH
12587: CALL_OW 302
12591: NOT
12592: OR
12593: IFFALSE 12597
// exit ;
12595: GO 12699
// ruMechCounter := Dec ( ruMechCounter ) ;
12597: LD_ADDR_EXP 29
12601: PUSH
12602: LD_EXP 29
12606: PPUSH
12607: CALL 77312 0 1
12611: ST_TO_ADDR
// uc_side := 3 ;
12612: LD_ADDR_OWVAR 20
12616: PUSH
12617: LD_INT 3
12619: ST_TO_ADDR
// uc_nation := 3 ;
12620: LD_ADDR_OWVAR 21
12624: PUSH
12625: LD_INT 3
12627: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
12628: LD_INT 0
12630: PPUSH
12631: LD_INT 5
12633: PUSH
12634: LD_INT 6
12636: PUSH
12637: LD_INT 7
12639: PUSH
12640: LD_INT 8
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: PUSH
12649: LD_OWVAR 67
12653: ARRAY
12654: PPUSH
12655: CALL_OW 383
// tmp := CreateHuman ;
12659: LD_ADDR_VAR 0 2
12663: PUSH
12664: CALL_OW 44
12668: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
12669: LD_VAR 0 2
12673: PPUSH
12674: LD_INT 145
12676: PPUSH
12677: LD_INT 133
12679: PPUSH
12680: LD_INT 0
12682: PPUSH
12683: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
12687: LD_VAR 0 2
12691: PPUSH
12692: LD_INT 29
12694: PPUSH
12695: CALL_OW 120
// end ; end ; end ;
12699: PPOPN 5
12701: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
12702: LD_VAR 0 1
12706: PPUSH
12707: CALL_OW 255
12711: PUSH
12712: LD_INT 4
12714: EQUAL
12715: IFFALSE 12732
// ComMoveXY ( driver , 40 , 47 ) ;
12717: LD_VAR 0 1
12721: PPUSH
12722: LD_INT 40
12724: PPUSH
12725: LD_INT 47
12727: PPUSH
12728: CALL_OW 111
// if GetSide ( driver ) = 3 then
12732: LD_VAR 0 1
12736: PPUSH
12737: CALL_OW 255
12741: PUSH
12742: LD_INT 3
12744: EQUAL
12745: IFFALSE 12969
// begin ComMoveXY ( driver , 90 , 97 ) ;
12747: LD_VAR 0 1
12751: PPUSH
12752: LD_INT 90
12754: PPUSH
12755: LD_INT 97
12757: PPUSH
12758: CALL_OW 111
// if IsOk ( ruFac ) then
12762: LD_INT 29
12764: PPUSH
12765: CALL_OW 302
12769: IFFALSE 12893
// begin repeat wait ( 0 0$1 ) ;
12771: LD_INT 35
12773: PPUSH
12774: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
12778: LD_INT 29
12780: PPUSH
12781: CALL_OW 313
12785: PUSH
12786: LD_INT 6
12788: LESS
12789: PUSH
12790: LD_VAR 0 1
12794: PPUSH
12795: CALL_OW 301
12799: OR
12800: IFFALSE 12771
// if IsDead ( driver ) then
12802: LD_VAR 0 1
12806: PPUSH
12807: CALL_OW 301
12811: IFFALSE 12815
// exit ;
12813: GO 12969
// repeat wait ( 0 0$10 ) ;
12815: LD_INT 350
12817: PPUSH
12818: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
12822: LD_VAR 0 1
12826: PPUSH
12827: CALL_OW 314
12831: NOT
12832: PUSH
12833: LD_INT 29
12835: PPUSH
12836: CALL_OW 313
12840: PUSH
12841: LD_INT 6
12843: LESS
12844: AND
12845: IFFALSE 12859
// ComEnterUnit ( driver , ruFac ) ;
12847: LD_VAR 0 1
12851: PPUSH
12852: LD_INT 29
12854: PPUSH
12855: CALL_OW 120
// until not IsOk ( ruFac ) or IsDead ( driver ) or IsInUnit ( driver ) ;
12859: LD_INT 29
12861: PPUSH
12862: CALL_OW 302
12866: NOT
12867: PUSH
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 301
12877: OR
12878: PUSH
12879: LD_VAR 0 1
12883: PPUSH
12884: CALL_OW 310
12888: OR
12889: IFFALSE 12815
// end else
12891: GO 12969
// begin ComMoveXY ( driver , 142 , 148 ) ;
12893: LD_VAR 0 1
12897: PPUSH
12898: LD_INT 142
12900: PPUSH
12901: LD_INT 148
12903: PPUSH
12904: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12908: LD_INT 35
12910: PPUSH
12911: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
12915: LD_VAR 0 1
12919: PPUSH
12920: CALL_OW 301
12924: PUSH
12925: LD_VAR 0 1
12929: PPUSH
12930: LD_INT 142
12932: PPUSH
12933: LD_INT 148
12935: PPUSH
12936: CALL_OW 307
12940: OR
12941: IFFALSE 12908
// if IsAt ( driver , 142 , 148 ) then
12943: LD_VAR 0 1
12947: PPUSH
12948: LD_INT 142
12950: PPUSH
12951: LD_INT 148
12953: PPUSH
12954: CALL_OW 307
12958: IFFALSE 12969
// RemoveUnit ( driver ) ;
12960: LD_VAR 0 1
12964: PPUSH
12965: CALL_OW 64
// end ; end ; end ;
12969: PPOPN 4
12971: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
12972: LD_VAR 0 2
12976: PPUSH
12977: CALL_OW 257
12981: PUSH
12982: LD_INT 3
12984: EQUAL
12985: PUSH
12986: LD_VAR 0 1
12990: PPUSH
12991: CALL_OW 255
12995: PUSH
12996: LD_INT 3
12998: EQUAL
12999: AND
13000: PUSH
13001: LD_VAR 0 1
13005: PUSH
13006: LD_INT 29
13008: EQUAL
13009: AND
13010: IFFALSE 13024
// SetLives ( un , 1000 ) ;
13012: LD_VAR 0 2
13016: PPUSH
13017: LD_INT 1000
13019: PPUSH
13020: CALL_OW 234
// end ;
13024: PPOPN 2
13026: END
// on EvacuateBuilding ( b , un ) do var i , tmp ;
13027: LD_INT 0
13029: PPUSH
13030: PPUSH
// begin if GetSide ( b ) = 3 then
13031: LD_VAR 0 1
13035: PPUSH
13036: CALL_OW 255
13040: PUSH
13041: LD_INT 3
13043: EQUAL
13044: IFFALSE 13275
// begin if GetBType ( b ) in [ b_bunker , b_barracks ] then
13046: LD_VAR 0 1
13050: PPUSH
13051: CALL_OW 266
13055: PUSH
13056: LD_INT 32
13058: PUSH
13059: LD_INT 5
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: IN
13066: IFFALSE 13275
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
13068: LD_ADDR_VAR 0 4
13072: PUSH
13073: LD_INT 22
13075: PUSH
13076: LD_INT 3
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: LD_INT 50
13085: PUSH
13086: EMPTY
13087: LIST
13088: PUSH
13089: LD_INT 30
13091: PUSH
13092: LD_INT 32
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 58
13101: PUSH
13102: EMPTY
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: PPUSH
13111: CALL_OW 69
13115: ST_TO_ADDR
// if tmp then
13116: LD_VAR 0 4
13120: IFFALSE 13142
// begin ComEnterUnit ( un , tmp [ 1 ] ) ;
13122: LD_VAR 0 2
13126: PPUSH
13127: LD_VAR 0 4
13131: PUSH
13132: LD_INT 1
13134: ARRAY
13135: PPUSH
13136: CALL_OW 120
// exit ;
13140: GO 13275
// end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
13142: LD_ADDR_VAR 0 4
13146: PUSH
13147: LD_INT 22
13149: PUSH
13150: LD_INT 3
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 50
13159: PUSH
13160: EMPTY
13161: LIST
13162: PUSH
13163: LD_INT 2
13165: PUSH
13166: LD_INT 30
13168: PUSH
13169: LD_INT 4
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 30
13178: PUSH
13179: LD_INT 5
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: PPUSH
13196: CALL_OW 69
13200: ST_TO_ADDR
// if not tmp then
13201: LD_VAR 0 4
13205: NOT
13206: IFFALSE 13225
// begin ComMoveXY ( un , 92 , 99 ) ;
13208: LD_VAR 0 2
13212: PPUSH
13213: LD_INT 92
13215: PPUSH
13216: LD_INT 99
13218: PPUSH
13219: CALL_OW 111
// exit ;
13223: GO 13275
// end ; for i in tmp do
13225: LD_ADDR_VAR 0 3
13229: PUSH
13230: LD_VAR 0 4
13234: PUSH
13235: FOR_IN
13236: IFFALSE 13273
// if UnitsInside ( i ) < 6 then
13238: LD_VAR 0 3
13242: PPUSH
13243: CALL_OW 313
13247: PUSH
13248: LD_INT 6
13250: LESS
13251: IFFALSE 13271
// begin ComEnterUnit ( un , i ) ;
13253: LD_VAR 0 2
13257: PPUSH
13258: LD_VAR 0 3
13262: PPUSH
13263: CALL_OW 120
// exit ;
13267: POP
13268: POP
13269: GO 13275
// end ;
13271: GO 13235
13273: POP
13274: POP
// end ; end ; end ;
13275: PPOPN 4
13277: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
13278: LD_VAR 0 1
13282: PPUSH
13283: CALL_OW 255
13287: PUSH
13288: LD_INT 3
13290: PUSH
13291: LD_INT 6
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: IN
13298: PUSH
13299: LD_VAR 0 1
13303: PPUSH
13304: CALL_OW 263
13308: PUSH
13309: LD_INT 3
13311: EQUAL
13312: AND
13313: PUSH
13314: LD_EXP 6
13318: NOT
13319: AND
13320: IFFALSE 13339
// begin seenComputer := true ;
13322: LD_ADDR_EXP 6
13326: PUSH
13327: LD_INT 1
13329: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
13330: LD_VAR 0 1
13334: PPUSH
13335: CALL 16255 0 1
// end ; end ;
13339: PPOPN 1
13341: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
13342: LD_INT 0
13344: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
13345: LD_VAR 0 1
13349: PPUSH
13350: LD_VAR 0 2
13354: PPUSH
13355: CALL 34337 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
13359: LD_VAR 0 1
13363: PPUSH
13364: CALL_OW 255
13368: PUSH
13369: LD_INT 3
13371: EQUAL
13372: PUSH
13373: LD_VAR 0 1
13377: PPUSH
13378: CALL_OW 263
13382: PUSH
13383: LD_INT 1
13385: EQUAL
13386: AND
13387: PUSH
13388: LD_VAR 0 1
13392: PPUSH
13393: CALL_OW 264
13397: PUSH
13398: LD_INT 42
13400: PUSH
13401: LD_INT 43
13403: PUSH
13404: LD_INT 44
13406: PUSH
13407: LD_INT 46
13409: PUSH
13410: LD_INT 45
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: IN
13420: AND
13421: IFFALSE 13451
// begin SetTag ( vehicle , 300 ) ;
13423: LD_VAR 0 1
13427: PPUSH
13428: LD_INT 300
13430: PPUSH
13431: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
13435: LD_ADDR_EXP 30
13439: PUSH
13440: LD_EXP 30
13444: PUSH
13445: LD_VAR 0 1
13449: UNION
13450: ST_TO_ADDR
// end ; end ;
13451: PPOPN 3
13453: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
13454: LD_INT 0
13456: PPUSH
// begin if InArea ( x , y , ruCrates ) then
13457: LD_VAR 0 2
13461: PPUSH
13462: LD_VAR 0 3
13466: PPUSH
13467: LD_INT 13
13469: PPUSH
13470: CALL_OW 309
13474: IFFALSE 13605
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
13476: LD_ADDR_VAR 0 6
13480: PUSH
13481: LD_INT 22
13483: PUSH
13484: LD_INT 3
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 50
13493: PUSH
13494: EMPTY
13495: LIST
13496: PUSH
13497: LD_INT 34
13499: PUSH
13500: LD_INT 51
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: PPUSH
13512: CALL_OW 69
13516: ST_TO_ADDR
// if not cargo then
13517: LD_VAR 0 6
13521: NOT
13522: IFFALSE 13526
// exit ;
13524: GO 13605
// wait ( 0 0$5 ) ;
13526: LD_INT 175
13528: PPUSH
13529: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
13533: LD_VAR 0 6
13537: PUSH
13538: LD_INT 1
13540: ARRAY
13541: PPUSH
13542: LD_INT 28
13544: PPUSH
13545: CALL_OW 296
13549: PUSH
13550: LD_INT 6
13552: LESS
13553: PUSH
13554: LD_VAR 0 6
13558: PUSH
13559: LD_INT 1
13561: ARRAY
13562: PPUSH
13563: CALL_OW 261
13567: PUSH
13568: LD_INT 50
13570: LESS
13571: AND
13572: IFFALSE 13586
// ComMoveUnit ( cargo , ruDep ) ;
13574: LD_VAR 0 6
13578: PPUSH
13579: LD_INT 28
13581: PPUSH
13582: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
13586: LD_VAR 0 6
13590: PPUSH
13591: LD_VAR 0 2
13595: PPUSH
13596: LD_VAR 0 3
13600: PPUSH
13601: CALL_OW 177
// end ; end ;
13605: PPOPN 6
13607: END
// on BuildingComplete ( b ) do var i , tmp ;
13608: LD_INT 0
13610: PPUSH
13611: PPUSH
// begin if GetSide ( b ) = 3 then
13612: LD_VAR 0 1
13616: PPUSH
13617: CALL_OW 255
13621: PUSH
13622: LD_INT 3
13624: EQUAL
13625: IFFALSE 13840
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
13627: LD_ADDR_EXP 31
13631: PUSH
13632: LD_EXP 31
13636: PPUSH
13637: LD_INT 1
13639: PPUSH
13640: CALL_OW 3
13644: ST_TO_ADDR
// if GetBType ( b ) in [ b_bunker , b_turret ] then
13645: LD_VAR 0 1
13649: PPUSH
13650: CALL_OW 266
13654: PUSH
13655: LD_INT 32
13657: PUSH
13658: LD_INT 33
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: IN
13665: IFFALSE 13840
// begin AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
13667: LD_VAR 0 1
13671: PPUSH
13672: LD_INT 46
13674: PUSH
13675: LD_INT 45
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 1
13684: PPUSH
13685: LD_INT 2
13687: PPUSH
13688: CALL_OW 12
13692: ARRAY
13693: PPUSH
13694: CALL_OW 208
// if GetBType ( b ) = b_bunker then
13698: LD_VAR 0 1
13702: PPUSH
13703: CALL_OW 266
13707: PUSH
13708: LD_INT 32
13710: EQUAL
13711: IFFALSE 13840
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_tag , 0 ] ] ) ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_INT 22
13720: PUSH
13721: LD_INT 3
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 25
13730: PUSH
13731: LD_INT 1
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 120
13740: PUSH
13741: LD_INT 0
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: PPUSH
13753: CALL_OW 69
13757: ST_TO_ADDR
// if tmp then
13758: LD_VAR 0 3
13762: IFFALSE 13840
// for i in tmp do
13764: LD_ADDR_VAR 0 2
13768: PUSH
13769: LD_VAR 0 3
13773: PUSH
13774: FOR_IN
13775: IFFALSE 13838
// if not IsInUnit ( i ) or GetBType ( IsInUnit ( i ) ) <> b_bunker then
13777: LD_VAR 0 2
13781: PPUSH
13782: CALL_OW 310
13786: NOT
13787: PUSH
13788: LD_VAR 0 2
13792: PPUSH
13793: CALL_OW 310
13797: PPUSH
13798: CALL_OW 266
13802: PUSH
13803: LD_INT 32
13805: NONEQUAL
13806: OR
13807: IFFALSE 13836
// begin ComExit ( i ) ;
13809: LD_VAR 0 2
13813: PPUSH
13814: CALL 76325 0 1
// AddComEnterUnit ( i , b ) ;
13818: LD_VAR 0 2
13822: PPUSH
13823: LD_VAR 0 1
13827: PPUSH
13828: CALL_OW 180
// exit ;
13832: POP
13833: POP
13834: GO 13840
// end ;
13836: GO 13774
13838: POP
13839: POP
// end ; end ; end ; end ; end_of_file
13840: PPOPN 3
13842: END
// export function Action ; var i , tmp , un , inUnit ; begin
13843: LD_INT 0
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
// Video ( true ) ;
13850: LD_INT 1
13852: PPUSH
13853: CALL 75899 0 1
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
13857: LD_INT 50
13859: PPUSH
13860: LD_INT 12
13862: PPUSH
13863: LD_INT 1
13865: PPUSH
13866: LD_INT 56
13868: NEG
13869: PPUSH
13870: CALL 75813 0 4
// CenterOnXY ( 50 , 12 ) ;
13874: LD_INT 50
13876: PPUSH
13877: LD_INT 12
13879: PPUSH
13880: CALL_OW 84
// wait ( 0 0$3 ) ;
13884: LD_INT 105
13886: PPUSH
13887: CALL_OW 67
// PrepareStartRussianAttack ;
13891: CALL 9229 0 0
// CenterOnXY ( 66 , 47 ) ;
13895: LD_INT 66
13897: PPUSH
13898: LD_INT 47
13900: PPUSH
13901: CALL_OW 84
// wait ( 0 0$5 ) ;
13905: LD_INT 175
13907: PPUSH
13908: CALL_OW 67
// case gammaCommander of 1 :
13912: LD_EXP 10
13916: PUSH
13917: LD_INT 1
13919: DOUBLE
13920: EQUAL
13921: IFTRUE 13925
13923: GO 13940
13925: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
13926: LD_EXP 13
13930: PPUSH
13931: LD_STRING D1-Don-1
13933: PPUSH
13934: CALL_OW 88
13938: GO 13987
13940: LD_INT 2
13942: DOUBLE
13943: EQUAL
13944: IFTRUE 13948
13946: GO 13963
13948: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
13949: LD_EXP 12
13953: PPUSH
13954: LD_STRING D1-Brown-1
13956: PPUSH
13957: CALL_OW 88
13961: GO 13987
13963: LD_INT 3
13965: DOUBLE
13966: EQUAL
13967: IFTRUE 13971
13969: GO 13986
13971: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
13972: LD_EXP 21
13976: PPUSH
13977: LD_STRING D1-VanH-1
13979: PPUSH
13980: CALL_OW 88
13984: GO 13987
13986: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
13987: LD_ADDR_VAR 0 3
13991: PUSH
13992: LD_INT 22
13994: PUSH
13995: LD_INT 1
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 33
14004: PUSH
14005: LD_INT 2
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 61
14014: PUSH
14015: EMPTY
14016: LIST
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: LIST
14022: PPUSH
14023: CALL_OW 69
14027: ST_TO_ADDR
// if tmp then
14028: LD_VAR 0 3
14032: IFFALSE 14049
// ComAgressiveMove ( tmp , 74 , 44 ) ;
14034: LD_VAR 0 3
14038: PPUSH
14039: LD_INT 74
14041: PPUSH
14042: LD_INT 44
14044: PPUSH
14045: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
14049: LD_ADDR_VAR 0 3
14053: PUSH
14054: LD_INT 22
14056: PUSH
14057: LD_INT 1
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 25
14066: PUSH
14067: LD_INT 1
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PPUSH
14078: CALL_OW 69
14082: PUSH
14083: LD_EXP 13
14087: PUSH
14088: LD_EXP 12
14092: PUSH
14093: LD_EXP 21
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: DIFF
14103: ST_TO_ADDR
// if tmp then
14104: LD_VAR 0 3
14108: IFFALSE 14186
// for i in tmp do
14110: LD_ADDR_VAR 0 2
14114: PUSH
14115: LD_VAR 0 3
14119: PUSH
14120: FOR_IN
14121: IFFALSE 14184
// begin inUnit := IsInUnit ( i ) ;
14123: LD_ADDR_VAR 0 5
14127: PUSH
14128: LD_VAR 0 2
14132: PPUSH
14133: CALL_OW 310
14137: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
14138: LD_VAR 0 5
14142: PUSH
14143: LD_VAR 0 5
14147: PPUSH
14148: CALL_OW 266
14152: PUSH
14153: LD_INT 32
14155: PUSH
14156: LD_INT 31
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: IN
14163: AND
14164: IFFALSE 14182
// tmp := tmp diff i ;
14166: LD_ADDR_VAR 0 3
14170: PUSH
14171: LD_VAR 0 3
14175: PUSH
14176: LD_VAR 0 2
14180: DIFF
14181: ST_TO_ADDR
// end ;
14182: GO 14120
14184: POP
14185: POP
// if tmp then
14186: LD_VAR 0 3
14190: IFFALSE 14280
// begin ComExitAll ( tmp ) ;
14192: LD_VAR 0 3
14196: PPUSH
14197: CALL 76408 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
14201: LD_VAR 0 3
14205: PPUSH
14206: LD_INT 74
14208: PPUSH
14209: LD_INT 44
14211: PPUSH
14212: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
14216: LD_ADDR_VAR 0 3
14220: PUSH
14221: LD_INT 22
14223: PUSH
14224: LD_INT 1
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 25
14233: PUSH
14234: LD_INT 4
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PPUSH
14245: CALL_OW 69
14249: ST_TO_ADDR
// if tmp then
14250: LD_VAR 0 3
14254: IFFALSE 14280
// begin ComExitAll ( tmp ) ;
14256: LD_VAR 0 3
14260: PPUSH
14261: CALL 76408 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
14265: LD_VAR 0 3
14269: PPUSH
14270: LD_INT 66
14272: PPUSH
14273: LD_INT 28
14275: PPUSH
14276: CALL_OW 171
// end ; end ; game_speed := 4 ;
14280: LD_ADDR_OWVAR 65
14284: PUSH
14285: LD_INT 4
14287: ST_TO_ADDR
// wait ( 0 0$2 ) ;
14288: LD_INT 70
14290: PPUSH
14291: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
14295: LD_EXP 25
14299: PPUSH
14300: LD_STRING D1-Har-1
14302: PPUSH
14303: CALL_OW 94
// case gammaCommander of 1 :
14307: LD_EXP 10
14311: PUSH
14312: LD_INT 1
14314: DOUBLE
14315: EQUAL
14316: IFTRUE 14320
14318: GO 14335
14320: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
14321: LD_EXP 13
14325: PPUSH
14326: LD_STRING D1-Don-2
14328: PPUSH
14329: CALL_OW 88
14333: GO 14382
14335: LD_INT 2
14337: DOUBLE
14338: EQUAL
14339: IFTRUE 14343
14341: GO 14358
14343: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
14344: LD_EXP 12
14348: PPUSH
14349: LD_STRING D1-Brown-2
14351: PPUSH
14352: CALL_OW 88
14356: GO 14382
14358: LD_INT 3
14360: DOUBLE
14361: EQUAL
14362: IFTRUE 14366
14364: GO 14381
14366: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
14367: LD_EXP 21
14371: PPUSH
14372: LD_STRING D1-VanH-2
14374: PPUSH
14375: CALL_OW 88
14379: GO 14382
14381: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
14382: LD_EXP 25
14386: PPUSH
14387: LD_STRING D1-Har-2
14389: PPUSH
14390: CALL_OW 94
// Video ( false ) ;
14394: LD_INT 0
14396: PPUSH
14397: CALL 75899 0 1
// ChangeMissionObjectives ( M1 ) ;
14401: LD_STRING M1
14403: PPUSH
14404: CALL_OW 337
// SaveForQuickRestart ;
14408: CALL_OW 22
// wait ( 2 2$30 ) ;
14412: LD_INT 5250
14414: PPUSH
14415: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
14419: LD_INT 1
14421: PPUSH
14422: CALL 11459 0 1
// wait ( 4 4$30 ) ;
14426: LD_INT 9450
14428: PPUSH
14429: CALL_OW 67
// if Difficulty > 2 then
14433: LD_OWVAR 67
14437: PUSH
14438: LD_INT 2
14440: GREATER
14441: IFFALSE 14450
// PrepareRussianAttack ( 2 ) ;
14443: LD_INT 2
14445: PPUSH
14446: CALL 11459 0 1
// if Difficulty > 3 then
14450: LD_OWVAR 67
14454: PUSH
14455: LD_INT 3
14457: GREATER
14458: IFFALSE 14617
// begin for i := 1 to 4 do
14460: LD_ADDR_VAR 0 2
14464: PUSH
14465: DOUBLE
14466: LD_INT 1
14468: DEC
14469: ST_TO_ADDR
14470: LD_INT 4
14472: PUSH
14473: FOR_TO
14474: IFFALSE 14559
// begin uc_side := 6 ;
14476: LD_ADDR_OWVAR 20
14480: PUSH
14481: LD_INT 6
14483: ST_TO_ADDR
// uc_nation := 3 ;
14484: LD_ADDR_OWVAR 21
14488: PUSH
14489: LD_INT 3
14491: ST_TO_ADDR
// PrepareSoldier ( false , 6 ) ;
14492: LD_INT 0
14494: PPUSH
14495: LD_INT 6
14497: PPUSH
14498: CALL_OW 381
// un := CreateHuman ;
14502: LD_ADDR_VAR 0 4
14506: PUSH
14507: CALL_OW 44
14511: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
14512: LD_VAR 0 4
14516: PPUSH
14517: LD_INT 122
14519: PPUSH
14520: LD_INT 89
14522: PPUSH
14523: LD_INT 3
14525: PPUSH
14526: LD_INT 0
14528: PPUSH
14529: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
14533: LD_VAR 0 4
14537: PPUSH
14538: LD_INT 88
14540: PPUSH
14541: LD_INT 42
14543: PPUSH
14544: CALL_OW 114
// AddComHold ( un ) ;
14548: LD_VAR 0 4
14552: PPUSH
14553: CALL_OW 200
// end ;
14557: GO 14473
14559: POP
14560: POP
// PrepareScientist ( false , 6 ) ;
14561: LD_INT 0
14563: PPUSH
14564: LD_INT 6
14566: PPUSH
14567: CALL_OW 384
// un := CreateHuman ;
14571: LD_ADDR_VAR 0 4
14575: PUSH
14576: CALL_OW 44
14580: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
14581: LD_VAR 0 4
14585: PPUSH
14586: LD_INT 122
14588: PPUSH
14589: LD_INT 89
14591: PPUSH
14592: LD_INT 3
14594: PPUSH
14595: LD_INT 0
14597: PPUSH
14598: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
14602: LD_VAR 0 4
14606: PPUSH
14607: LD_INT 91
14609: PPUSH
14610: LD_INT 48
14612: PPUSH
14613: CALL_OW 111
// end ; end ;
14617: LD_VAR 0 1
14621: RET
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 3 ] ] ) = 0 and tick > 5 5$00 do var dialog , p ;
14622: LD_INT 22
14624: PUSH
14625: LD_INT 1
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 101
14634: PUSH
14635: LD_INT 3
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PPUSH
14646: CALL_OW 69
14650: PUSH
14651: LD_INT 0
14653: EQUAL
14654: PUSH
14655: LD_OWVAR 1
14659: PUSH
14660: LD_INT 10500
14662: GREATER
14663: AND
14664: IFFALSE 16252
14666: GO 14668
14668: DISABLE
14669: LD_INT 0
14671: PPUSH
14672: PPUSH
// begin PrepareSupportFromDelta ;
14673: CALL 4060 0 0
// deltaSupport := true ;
14677: LD_ADDR_EXP 5
14681: PUSH
14682: LD_INT 1
14684: ST_TO_ADDR
// dialog := false ;
14685: LD_ADDR_VAR 0 1
14689: PUSH
14690: LD_INT 0
14692: ST_TO_ADDR
// if IsOk ( Gladstone ) then
14693: LD_EXP 18
14697: PPUSH
14698: CALL_OW 302
14702: IFFALSE 14724
// dialog := Say ( Gladstone , D2-Glad-1 ) else
14704: LD_ADDR_VAR 0 1
14708: PUSH
14709: LD_EXP 18
14713: PPUSH
14714: LD_STRING D2-Glad-1
14716: PPUSH
14717: CALL_OW 88
14721: ST_TO_ADDR
14722: GO 14806
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
14724: LD_ADDR_VAR 0 1
14728: PUSH
14729: LD_INT 22
14731: PUSH
14732: LD_INT 1
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 120
14741: PUSH
14742: LD_INT 107
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 21
14751: PUSH
14752: LD_INT 1
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 23
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: PPUSH
14775: CALL_OW 69
14779: PUSH
14780: LD_EXP 23
14784: PUSH
14785: LD_EXP 22
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: DIFF
14794: PPUSH
14795: LD_STRING D2-Sol1-1
14797: PPUSH
14798: LD_STRING D2-FSol1-1
14800: PPUSH
14801: CALL 18261 0 3
14805: ST_TO_ADDR
// if dialog then
14806: LD_VAR 0 1
14810: IFFALSE 14911
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
14812: LD_EXP 13
14816: PPUSH
14817: CALL_OW 302
14821: PUSH
14822: LD_EXP 10
14826: PUSH
14827: LD_INT 1
14829: EQUAL
14830: AND
14831: IFFALSE 14845
// Say ( Donaldson , D2-Don-1 ) ;
14833: LD_EXP 13
14837: PPUSH
14838: LD_STRING D2-Don-1
14840: PPUSH
14841: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
14845: LD_EXP 12
14849: PPUSH
14850: CALL_OW 302
14854: PUSH
14855: LD_EXP 10
14859: PUSH
14860: LD_INT 2
14862: EQUAL
14863: AND
14864: IFFALSE 14878
// Say ( Brown , D2-Brown-1 ) ;
14866: LD_EXP 12
14870: PPUSH
14871: LD_STRING D2-Brown-1
14873: PPUSH
14874: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
14878: LD_EXP 21
14882: PPUSH
14883: CALL_OW 302
14887: PUSH
14888: LD_EXP 10
14892: PUSH
14893: LD_INT 3
14895: EQUAL
14896: AND
14897: IFFALSE 14911
// Say ( Houten , D2-VanH-1 ) ;
14899: LD_EXP 21
14903: PPUSH
14904: LD_STRING D2-VanH-1
14906: PPUSH
14907: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
14911: LD_INT 3
14913: PPUSH
14914: CALL 11459 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
14918: LD_STRING 07_time
14920: PPUSH
14921: LD_INT 18900
14923: PPUSH
14924: CALL_OW 30
14928: PUSH
14929: LD_INT 3
14931: DIV
14932: PPUSH
14933: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
14937: LD_INT 34
14939: PPUSH
14940: LD_INT 1
14942: PPUSH
14943: CALL_OW 321
14947: PUSH
14948: LD_INT 2
14950: EQUAL
14951: IFFALSE 14960
// SetAchievement ( ACH_HEAVYGUN ) ;
14953: LD_STRING ACH_HEAVYGUN
14955: PPUSH
14956: CALL_OW 543
// PrepareMacmillanSquad ;
14960: CALL 4797 0 0
// CenterNowOnUnits ( JMM ) ;
14964: LD_EXP 11
14968: PPUSH
14969: CALL_OW 87
// wait ( 0 0$10 ) ;
14973: LD_INT 350
14975: PPUSH
14976: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
14980: LD_INT 1
14982: PPUSH
14983: CALL_OW 427
// p := 0 ;
14987: LD_ADDR_VAR 0 2
14991: PUSH
14992: LD_INT 0
14994: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14995: LD_INT 35
14997: PPUSH
14998: CALL_OW 67
// p := Inc ( p ) ;
15002: LD_ADDR_VAR 0 2
15006: PUSH
15007: LD_VAR 0 2
15011: PPUSH
15012: CALL 77290 0 1
15016: ST_TO_ADDR
// if p > 100 then
15017: LD_VAR 0 2
15021: PUSH
15022: LD_INT 100
15024: GREATER
15025: IFFALSE 15029
// exit ;
15027: GO 16252
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
15029: LD_EXP 11
15033: PPUSH
15034: LD_INT 15
15036: PPUSH
15037: CALL_OW 308
15041: PUSH
15042: LD_EXP 11
15046: PPUSH
15047: CALL_OW 310
15051: PPUSH
15052: LD_INT 15
15054: PPUSH
15055: CALL_OW 308
15059: OR
15060: PUSH
15061: LD_EXP 11
15065: PPUSH
15066: LD_EXP 23
15070: PPUSH
15071: CALL_OW 296
15075: PUSH
15076: LD_INT 10
15078: LESS
15079: OR
15080: PUSH
15081: LD_INT 22
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 2
15093: PUSH
15094: LD_INT 120
15096: PUSH
15097: LD_INT 106
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 120
15106: PUSH
15107: LD_INT 107
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 91
15121: PUSH
15122: LD_EXP 11
15126: PUSH
15127: LD_INT 12
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: PPUSH
15140: CALL_OW 69
15144: OR
15145: IFFALSE 14995
// DialogueOn ;
15147: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
15151: LD_EXP 11
15155: PPUSH
15156: LD_STRING D3-JMM-1
15158: PPUSH
15159: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
15163: LD_EXP 13
15167: PPUSH
15168: CALL_OW 302
15172: PUSH
15173: LD_EXP 10
15177: PUSH
15178: LD_INT 1
15180: EQUAL
15181: AND
15182: IFFALSE 15198
// Say ( Donaldson , D3-Don-1 ) else
15184: LD_EXP 13
15188: PPUSH
15189: LD_STRING D3-Don-1
15191: PPUSH
15192: CALL_OW 88
15196: GO 15294
// begin if gammaCommander = 1 then
15198: LD_EXP 10
15202: PUSH
15203: LD_INT 1
15205: EQUAL
15206: IFFALSE 15294
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
15208: LD_INT 22
15210: PUSH
15211: LD_INT 1
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 21
15220: PUSH
15221: LD_INT 1
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 23
15230: PUSH
15231: LD_INT 1
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 120
15240: PUSH
15241: LD_INT 106
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 26
15250: PUSH
15251: LD_INT 1
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: PPUSH
15265: CALL_OW 69
15269: PPUSH
15270: LD_STRING D3-Sol1-1
15272: PPUSH
15273: LD_STRING 
15275: PPUSH
15276: CALL 18261 0 3
15280: IFFALSE 15294
// Say ( JMM , D3-JMM-2 ) ;
15282: LD_EXP 11
15286: PPUSH
15287: LD_STRING D3-JMM-2
15289: PPUSH
15290: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
15294: LD_EXP 12
15298: PPUSH
15299: CALL_OW 302
15303: PUSH
15304: LD_EXP 10
15308: PUSH
15309: LD_INT 2
15311: EQUAL
15312: AND
15313: IFFALSE 15329
// Say ( Brown , D3-Brown-1 ) else
15315: LD_EXP 12
15319: PPUSH
15320: LD_STRING D3-Brown-1
15322: PPUSH
15323: CALL_OW 88
15327: GO 15425
// begin if gammaCommander = 2 then
15329: LD_EXP 10
15333: PUSH
15334: LD_INT 2
15336: EQUAL
15337: IFFALSE 15425
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
15339: LD_INT 22
15341: PUSH
15342: LD_INT 1
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 21
15351: PUSH
15352: LD_INT 1
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: LD_INT 23
15361: PUSH
15362: LD_INT 1
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: LD_INT 120
15371: PUSH
15372: LD_INT 106
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: LD_INT 26
15381: PUSH
15382: LD_INT 1
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: PPUSH
15396: CALL_OW 69
15400: PPUSH
15401: LD_STRING D3-Sol1-1a
15403: PPUSH
15404: LD_STRING 
15406: PPUSH
15407: CALL 18261 0 3
15411: IFFALSE 15425
// Say ( JMM , D3-JMM-2 ) ;
15413: LD_EXP 11
15417: PPUSH
15418: LD_STRING D3-JMM-2
15420: PPUSH
15421: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
15425: LD_EXP 21
15429: PPUSH
15430: CALL_OW 302
15434: PUSH
15435: LD_EXP 10
15439: PUSH
15440: LD_INT 3
15442: EQUAL
15443: AND
15444: IFFALSE 15460
// Say ( Houten , D3-VanH-1 ) else
15446: LD_EXP 21
15450: PPUSH
15451: LD_STRING D3-VanH-1
15453: PPUSH
15454: CALL_OW 88
15458: GO 15556
// begin if gammaCommander = 3 then
15460: LD_EXP 10
15464: PUSH
15465: LD_INT 3
15467: EQUAL
15468: IFFALSE 15556
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
15470: LD_INT 22
15472: PUSH
15473: LD_INT 1
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: LD_INT 21
15482: PUSH
15483: LD_INT 1
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 23
15492: PUSH
15493: LD_INT 1
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 120
15502: PUSH
15503: LD_INT 106
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 26
15512: PUSH
15513: LD_INT 1
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: PPUSH
15527: CALL_OW 69
15531: PPUSH
15532: LD_STRING D3-Sol1-1b
15534: PPUSH
15535: LD_STRING 
15537: PPUSH
15538: CALL 18261 0 3
15542: IFFALSE 15556
// Say ( JMM , D3-JMM-2 ) ;
15544: LD_EXP 11
15548: PPUSH
15549: LD_STRING D3-JMM-2
15551: PPUSH
15552: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
15556: LD_EXP 23
15560: PPUSH
15561: CALL_OW 302
15565: IFFALSE 15593
// begin Say ( Joan , D3a-Joan-1 ) ;
15567: LD_EXP 23
15571: PPUSH
15572: LD_STRING D3a-Joan-1
15574: PPUSH
15575: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
15579: LD_EXP 11
15583: PPUSH
15584: LD_STRING D3a-JMM-1
15586: PPUSH
15587: CALL_OW 88
// end else
15591: GO 16027
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
15593: LD_STRING 06_JoanStatus_1
15595: PPUSH
15596: LD_INT 0
15598: PPUSH
15599: CALL_OW 30
15603: PUSH
15604: LD_INT 1
15606: EQUAL
15607: IFFALSE 16027
// begin Say ( JMM , D3b-JMM-1 ) ;
15609: LD_EXP 11
15613: PPUSH
15614: LD_STRING D3b-JMM-1
15616: PPUSH
15617: CALL_OW 88
// dialog := false ;
15621: LD_ADDR_VAR 0 1
15625: PUSH
15626: LD_INT 0
15628: ST_TO_ADDR
// if gammaCommander = 1 then
15629: LD_EXP 10
15633: PUSH
15634: LD_INT 1
15636: EQUAL
15637: IFFALSE 15748
// if IsOK ( Donaldson ) then
15639: LD_EXP 13
15643: PPUSH
15644: CALL_OW 302
15648: IFFALSE 15670
// dialog := Say ( Donaldson , D3b-Don-1 ) else
15650: LD_ADDR_VAR 0 1
15654: PUSH
15655: LD_EXP 13
15659: PPUSH
15660: LD_STRING D3b-Don-1
15662: PPUSH
15663: CALL_OW 88
15667: ST_TO_ADDR
15668: GO 15748
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15670: LD_ADDR_VAR 0 1
15674: PUSH
15675: LD_INT 22
15677: PUSH
15678: LD_INT 1
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 21
15687: PUSH
15688: LD_INT 1
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: LD_INT 23
15697: PUSH
15698: LD_INT 1
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 120
15707: PUSH
15708: LD_INT 106
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 26
15717: PUSH
15718: LD_INT 1
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: PPUSH
15732: CALL_OW 69
15736: PPUSH
15737: LD_STRING D3b-Sol1-1
15739: PPUSH
15740: LD_STRING 
15742: PPUSH
15743: CALL 18261 0 3
15747: ST_TO_ADDR
// if gammaCommander = 2 then
15748: LD_EXP 10
15752: PUSH
15753: LD_INT 2
15755: EQUAL
15756: IFFALSE 15867
// if IsOk ( Brown ) then
15758: LD_EXP 12
15762: PPUSH
15763: CALL_OW 302
15767: IFFALSE 15789
// dialog := Say ( Brown , D3b-Brown-1 ) else
15769: LD_ADDR_VAR 0 1
15773: PUSH
15774: LD_EXP 12
15778: PPUSH
15779: LD_STRING D3b-Brown-1
15781: PPUSH
15782: CALL_OW 88
15786: ST_TO_ADDR
15787: GO 15867
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15789: LD_ADDR_VAR 0 1
15793: PUSH
15794: LD_INT 22
15796: PUSH
15797: LD_INT 1
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 21
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 23
15816: PUSH
15817: LD_INT 1
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 120
15826: PUSH
15827: LD_INT 106
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 26
15836: PUSH
15837: LD_INT 1
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: PPUSH
15851: CALL_OW 69
15855: PPUSH
15856: LD_STRING D3b-Sol1-1
15858: PPUSH
15859: LD_STRING 
15861: PPUSH
15862: CALL 18261 0 3
15866: ST_TO_ADDR
// if gammaCommander = 3 then
15867: LD_EXP 10
15871: PUSH
15872: LD_INT 3
15874: EQUAL
15875: IFFALSE 15986
// if IsOk ( Houten ) then
15877: LD_EXP 21
15881: PPUSH
15882: CALL_OW 302
15886: IFFALSE 15908
// dialog := Say ( Houten , D3b-VanH-1 ) else
15888: LD_ADDR_VAR 0 1
15892: PUSH
15893: LD_EXP 21
15897: PPUSH
15898: LD_STRING D3b-VanH-1
15900: PPUSH
15901: CALL_OW 88
15905: ST_TO_ADDR
15906: GO 15986
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
15908: LD_ADDR_VAR 0 1
15912: PUSH
15913: LD_INT 22
15915: PUSH
15916: LD_INT 1
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 21
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 23
15935: PUSH
15936: LD_INT 1
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: LD_INT 120
15945: PUSH
15946: LD_INT 106
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 26
15955: PUSH
15956: LD_INT 1
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: PPUSH
15970: CALL_OW 69
15974: PPUSH
15975: LD_STRING D3b-Sol1-1
15977: PPUSH
15978: LD_STRING 
15980: PPUSH
15981: CALL 18261 0 3
15985: ST_TO_ADDR
// if dialog then
15986: LD_VAR 0 1
15990: IFFALSE 16027
// begin Say ( JMM , D3b-JMM-2 ) ;
15992: LD_EXP 11
15996: PPUSH
15997: LD_STRING D3b-JMM-2
15999: PPUSH
16000: CALL_OW 88
// if IsOK ( Lisa ) then
16004: LD_EXP 16
16008: PPUSH
16009: CALL_OW 302
16013: IFFALSE 16027
// Say ( Lisa , D3b-Lisa-2 ) ;
16015: LD_EXP 16
16019: PPUSH
16020: LD_STRING D3b-Lisa-2
16022: PPUSH
16023: CALL_OW 88
// end ; end ; end ; if not seenComputer then
16027: LD_EXP 6
16031: NOT
16032: IFFALSE 16040
// begin DialogueOff ;
16034: CALL_OW 7
// exit ;
16038: GO 16252
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
16040: LD_INT 22
16042: PUSH
16043: LD_INT 1
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 21
16052: PUSH
16053: LD_INT 1
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: LD_INT 23
16062: PUSH
16063: LD_INT 1
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: LD_INT 2
16072: PUSH
16073: LD_INT 120
16075: PUSH
16076: LD_INT 106
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: LD_INT 120
16085: PUSH
16086: LD_INT 107
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 26
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: PPUSH
16115: CALL_OW 69
16119: PPUSH
16120: LD_STRING DCa-Sol1-1
16122: PPUSH
16123: LD_STRING 
16125: PPUSH
16126: CALL 18261 0 3
16130: IFFALSE 16144
// Say ( JMM , DCb-JMM-1 ) ;
16132: LD_EXP 11
16136: PPUSH
16137: LD_STRING DCb-JMM-1
16139: PPUSH
16140: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
16144: LD_INT 22
16146: PUSH
16147: LD_INT 1
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 21
16156: PUSH
16157: LD_INT 1
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 23
16166: PUSH
16167: LD_INT 1
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: LD_INT 2
16176: PUSH
16177: LD_INT 120
16179: PUSH
16180: LD_INT 106
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 120
16189: PUSH
16190: LD_INT 107
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 26
16204: PUSH
16205: LD_INT 1
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: PPUSH
16219: CALL_OW 69
16223: PPUSH
16224: LD_STRING DCb-Sol1-1
16226: PPUSH
16227: LD_STRING 
16229: PPUSH
16230: CALL 18261 0 3
16234: IFFALSE 16248
// Say ( JMM , DCb-JMM-2 ) ;
16236: LD_EXP 11
16240: PPUSH
16241: LD_STRING DCb-JMM-2
16243: PPUSH
16244: CALL_OW 88
// DialogueOff ;
16248: CALL_OW 7
// end ;
16252: PPOPN 2
16254: END
// export function DialogSeenComputer ( un ) ; begin
16255: LD_INT 0
16257: PPUSH
// if jmmArrival then
16258: LD_EXP 7
16262: IFFALSE 16266
// exit ;
16264: GO 16332
// CenterOnUnits ( un ) ;
16266: LD_VAR 0 1
16270: PPUSH
16271: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
16275: LD_INT 22
16277: PUSH
16278: LD_INT 1
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 2
16287: PUSH
16288: LD_INT 120
16290: PUSH
16291: LD_INT 106
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 120
16300: PUSH
16301: LD_INT 107
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: LIST
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PPUSH
16317: CALL_OW 69
16321: PPUSH
16322: LD_STRING DC-Sol1-1
16324: PPUSH
16325: LD_STRING DC-FSol1-1
16327: PPUSH
16328: CALL 18261 0 3
// end ;
16332: LD_VAR 0 2
16336: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
16337: LD_EXP 7
16341: PUSH
16342: LD_OWVAR 1
16346: PUSH
16347: LD_INT 48300
16349: GREATEREQUAL
16350: AND
16351: PUSH
16352: LD_EXP 11
16356: PPUSH
16357: CALL_OW 302
16361: AND
16362: IFFALSE 16712
16364: GO 16366
16366: DISABLE
// begin wait ( 2 2$00 ) ;
16367: LD_INT 4200
16369: PPUSH
16370: CALL_OW 67
// DialogueOn ;
16374: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
16378: LD_EXP 26
16382: PPUSH
16383: LD_STRING D4-Pow-1
16385: PPUSH
16386: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
16390: LD_EXP 11
16394: PPUSH
16395: LD_STRING D4-JMM-1
16397: PPUSH
16398: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
16402: LD_EXP 26
16406: PPUSH
16407: LD_STRING D4-Pow-2
16409: PPUSH
16410: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
16414: LD_EXP 11
16418: PPUSH
16419: LD_STRING D4-JMM-2
16421: PPUSH
16422: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
16426: LD_EXP 26
16430: PPUSH
16431: LD_STRING D4-Pow-3
16433: PPUSH
16434: CALL_OW 94
// DialogueOff ;
16438: CALL_OW 7
// wait ( 1 1$00 ) ;
16442: LD_INT 2100
16444: PPUSH
16445: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16449: LD_INT 1
16451: PPUSH
16452: CALL_OW 427
// wait ( 7 7$30 ) ;
16456: LD_INT 15750
16458: PPUSH
16459: CALL_OW 67
// DialogueOn ;
16463: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
16467: LD_EXP 26
16471: PPUSH
16472: LD_STRING D4a-Pow-1
16474: PPUSH
16475: CALL_OW 94
// DialogueOff ;
16479: CALL_OW 7
// SikorskiCounter ;
16483: CALL 18045 0 0
// PrepareSikorsky ;
16487: CALL 6219 0 0
// CenterNowOnUnits ( Sikorski ) ;
16491: LD_EXP 24
16495: PPUSH
16496: CALL_OW 87
// DialogueOn ;
16500: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
16504: LD_EXP 24
16508: PPUSH
16509: LD_STRING D5-Sik-1
16511: PPUSH
16512: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
16516: LD_EXP 11
16520: PPUSH
16521: LD_STRING D5-JMM-1a
16523: PPUSH
16524: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
16528: LD_EXP 24
16532: PPUSH
16533: LD_STRING D5-Sik-2
16535: PPUSH
16536: CALL_OW 88
// case Query ( QSikorski ) of 1 :
16540: LD_STRING QSikorski
16542: PPUSH
16543: CALL_OW 97
16547: PUSH
16548: LD_INT 1
16550: DOUBLE
16551: EQUAL
16552: IFTRUE 16556
16554: GO 16579
16556: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
16557: LD_EXP 24
16561: PPUSH
16562: LD_STRING D5a-Sik-1
16564: PPUSH
16565: CALL_OW 88
// sikorskiWait := 1 1$00 ;
16569: LD_ADDR_EXP 4
16573: PUSH
16574: LD_INT 2100
16576: ST_TO_ADDR
// end ; 2 :
16577: GO 16666
16579: LD_INT 2
16581: DOUBLE
16582: EQUAL
16583: IFTRUE 16587
16585: GO 16610
16587: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
16588: LD_EXP 24
16592: PPUSH
16593: LD_STRING D5b-Sik-1
16595: PPUSH
16596: CALL_OW 88
// sikorskiWait := 5 5$00 ;
16600: LD_ADDR_EXP 4
16604: PUSH
16605: LD_INT 10500
16607: ST_TO_ADDR
// end ; 3 :
16608: GO 16666
16610: LD_INT 3
16612: DOUBLE
16613: EQUAL
16614: IFTRUE 16618
16616: GO 16665
16618: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
16619: LD_EXP 24
16623: PPUSH
16624: LD_STRING D5c-Sik-1
16626: PPUSH
16627: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
16631: LD_EXP 11
16635: PPUSH
16636: LD_STRING D5c-JMM-1
16638: PPUSH
16639: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
16643: LD_EXP 24
16647: PPUSH
16648: LD_STRING D5c-Sik-2
16650: PPUSH
16651: CALL_OW 88
// sikorskiWait := 5 5$00 ;
16655: LD_ADDR_EXP 4
16659: PUSH
16660: LD_INT 10500
16662: ST_TO_ADDR
// end ; end ;
16663: GO 16666
16665: POP
// DialogueOff ;
16666: CALL_OW 7
// SikorskiWaitCounter ;
16670: CALL 18108 0 0
// DialogueOn ;
16674: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
16678: LD_EXP 24
16682: PPUSH
16683: LD_STRING D6-Sik-1
16685: PPUSH
16686: CALL_OW 88
// DialogueOff ;
16690: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
16694: LD_STRING M2
16696: PPUSH
16697: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
16701: LD_INT 1
16703: PPUSH
16704: CALL_OW 427
// SikorskiAttack ;
16708: CALL 7547 0 0
// end ;
16712: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
16713: LD_INT 11
16715: PPUSH
16716: LD_INT 22
16718: PUSH
16719: LD_INT 4
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PPUSH
16726: CALL_OW 70
16730: PUSH
16731: LD_INT 2
16733: GREATER
16734: IFFALSE 16927
16736: GO 16738
16738: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
16739: LD_EXP 24
16743: PPUSH
16744: LD_STRING D7-Sik-1
16746: PPUSH
16747: CALL_OW 88
// wait ( 0 0$10 ) ;
16751: LD_INT 350
16753: PPUSH
16754: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
16758: LD_EXP 11
16762: PPUSH
16763: LD_INT 11
16765: PPUSH
16766: CALL_OW 308
16770: PUSH
16771: LD_EXP 11
16775: PPUSH
16776: CALL_OW 310
16780: PPUSH
16781: LD_INT 11
16783: PPUSH
16784: CALL_OW 308
16788: OR
16789: IFFALSE 16813
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16791: LD_EXP 24
16795: PPUSH
16796: LD_STRING D7a-Sik-1
16798: PPUSH
16799: CALL_OW 88
// sikorskiStatus := 1 ;
16803: LD_ADDR_EXP 8
16807: PUSH
16808: LD_INT 1
16810: ST_TO_ADDR
// end else
16811: GO 16833
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16813: LD_EXP 24
16817: PPUSH
16818: LD_STRING D7b-Sik-1
16820: PPUSH
16821: CALL_OW 88
// sikorskiStatus := 0 ;
16825: LD_ADDR_EXP 8
16829: PUSH
16830: LD_INT 0
16832: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
16833: LD_INT 1575
16835: PPUSH
16836: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
16840: LD_EXP 11
16844: PPUSH
16845: LD_INT 11
16847: PPUSH
16848: CALL_OW 308
16852: PUSH
16853: LD_EXP 11
16857: PPUSH
16858: CALL_OW 310
16862: PPUSH
16863: LD_INT 11
16865: PPUSH
16866: CALL_OW 308
16870: OR
16871: PUSH
16872: LD_EXP 11
16876: PPUSH
16877: CALL_OW 302
16881: NOT
16882: OR
16883: IFFALSE 16907
// begin Say ( Sikorski , D7a-Sik-1 ) ;
16885: LD_EXP 24
16889: PPUSH
16890: LD_STRING D7a-Sik-1
16892: PPUSH
16893: CALL_OW 88
// sikorskiStatus := 1 ;
16897: LD_ADDR_EXP 8
16901: PUSH
16902: LD_INT 1
16904: ST_TO_ADDR
// end else
16905: GO 16927
// begin Say ( Sikorski , D7b-Sik-1 ) ;
16907: LD_EXP 24
16911: PPUSH
16912: LD_STRING D7b-Sik-1
16914: PPUSH
16915: CALL_OW 88
// sikorskiStatus := 0 ;
16919: LD_ADDR_EXP 8
16923: PUSH
16924: LD_INT 0
16926: ST_TO_ADDR
// end ; end ;
16927: END
// export function SikorskiKilledInAction ; begin
16928: LD_INT 0
16930: PPUSH
// wait ( 0 0$2 ) ;
16931: LD_INT 70
16933: PPUSH
16934: CALL_OW 67
// DialogueOn ;
16938: CALL_OW 6
// dwait ( 0 0$1 ) ;
16942: LD_INT 35
16944: PPUSH
16945: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
16949: LD_EXP 26
16953: PPUSH
16954: LD_STRING D8b-Pow-1
16956: PPUSH
16957: CALL_OW 94
// YouLost ( Dismissed ) ;
16961: LD_STRING Dismissed
16963: PPUSH
16964: CALL_OW 104
// DialogueOff ;
16968: CALL_OW 7
// end ;
16972: LD_VAR 0 1
16976: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
16977: LD_EXP 7
16981: PUSH
16982: LD_INT 28
16984: PPUSH
16985: CALL_OW 301
16989: AND
16990: PUSH
16991: LD_EXP 28
16995: PPUSH
16996: CALL_OW 301
17000: AND
17001: PUSH
17002: LD_INT 22
17004: PUSH
17005: LD_INT 3
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: LD_INT 30
17014: PUSH
17015: LD_INT 5
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PPUSH
17026: CALL_OW 69
17030: PUSH
17031: LD_INT 0
17033: EQUAL
17034: AND
17035: IFFALSE 18042
17037: GO 17039
17039: DISABLE
17040: LD_INT 0
17042: PPUSH
17043: PPUSH
17044: PPUSH
// begin Video ( true ) ;
17045: LD_INT 1
17047: PPUSH
17048: CALL 75899 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
17052: LD_INT 104
17054: PPUSH
17055: LD_INT 108
17057: PPUSH
17058: LD_INT 1
17060: PPUSH
17061: LD_INT 36
17063: NEG
17064: PPUSH
17065: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
17069: LD_INT 104
17071: PPUSH
17072: LD_INT 108
17074: PPUSH
17075: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
17079: LD_ADDR_VAR 0 2
17083: PUSH
17084: LD_INT 22
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 21
17096: PUSH
17097: LD_INT 1
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 3
17106: PUSH
17107: LD_INT 24
17109: PUSH
17110: LD_INT 249
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: LIST
17125: PPUSH
17126: CALL_OW 69
17130: ST_TO_ADDR
// if tmp then
17131: LD_VAR 0 2
17135: IFFALSE 17166
// for i in tmp do
17137: LD_ADDR_VAR 0 1
17141: PUSH
17142: LD_VAR 0 2
17146: PUSH
17147: FOR_IN
17148: IFFALSE 17164
// SetLives ( i , 249 ) ;
17150: LD_VAR 0 1
17154: PPUSH
17155: LD_INT 249
17157: PPUSH
17158: CALL_OW 234
17162: GO 17147
17164: POP
17165: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
17166: LD_ADDR_VAR 0 1
17170: PUSH
17171: LD_INT 22
17173: PUSH
17174: LD_INT 3
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 21
17183: PUSH
17184: LD_INT 1
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PPUSH
17195: CALL_OW 69
17199: PUSH
17200: FOR_IN
17201: IFFALSE 17244
// begin ComExit ( i ) ;
17203: LD_VAR 0 1
17207: PPUSH
17208: CALL 76325 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
17212: LD_VAR 0 1
17216: PPUSH
17217: LD_INT 131
17219: PPUSH
17220: LD_INT 127
17222: PPUSH
17223: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
17227: LD_VAR 0 1
17231: PPUSH
17232: LD_INT 141
17234: PPUSH
17235: LD_INT 147
17237: PPUSH
17238: CALL_OW 171
// end ;
17242: GO 17200
17244: POP
17245: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
17246: LD_INT 81
17248: PUSH
17249: LD_INT 3
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 3
17258: PUSH
17259: LD_INT 21
17261: PUSH
17262: LD_INT 3
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PPUSH
17277: CALL_OW 69
17281: PPUSH
17282: LD_INT 131
17284: PPUSH
17285: LD_INT 127
17287: PPUSH
17288: CALL_OW 174
// wait ( 0 0$08 ) ;
17292: LD_INT 280
17294: PPUSH
17295: CALL_OW 67
// DialogueOn ;
17299: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
17303: LD_EXP 8
17307: PUSH
17308: LD_INT 1
17310: EQUAL
17311: PUSH
17312: LD_EXP 24
17316: PPUSH
17317: CALL_OW 302
17321: AND
17322: IFFALSE 17336
// Say ( Sikorski , D9-Sik-1 ) ;
17324: LD_EXP 24
17328: PPUSH
17329: LD_STRING D9-Sik-1
17331: PPUSH
17332: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
17336: LD_INT 22
17338: PUSH
17339: LD_INT 4
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PPUSH
17346: CALL_OW 69
17350: PUSH
17351: LD_INT 0
17353: EQUAL
17354: PUSH
17355: LD_EXP 3
17359: AND
17360: IFFALSE 17369
// SetAchievement ( ACH_BLITZKRIEG ) ;
17362: LD_STRING ACH_BLITZKRIEG
17364: PPUSH
17365: CALL_OW 543
// if tick <= 25 25$08 then
17369: LD_OWVAR 1
17373: PUSH
17374: LD_INT 52780
17376: LESSEQUAL
17377: IFFALSE 17393
// begin wait ( 3 ) ;
17379: LD_INT 3
17381: PPUSH
17382: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
17386: LD_STRING ACH_ASPEED_8
17388: PPUSH
17389: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
17393: LD_STRING med1
17395: PPUSH
17396: LD_INT 1
17398: PPUSH
17399: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
17403: LD_STRING med2
17405: PPUSH
17406: LD_INT 1
17408: PPUSH
17409: CALL_OW 101
// if sikorskiStatus = 1 then
17413: LD_EXP 8
17417: PUSH
17418: LD_INT 1
17420: EQUAL
17421: IFFALSE 17435
// AddMedal ( perfect , 1 ) else
17423: LD_STRING perfect
17425: PPUSH
17426: LD_INT 1
17428: PPUSH
17429: CALL_OW 101
17433: GO 17446
// AddMedal ( perfect , - 1 ) ;
17435: LD_STRING perfect
17437: PPUSH
17438: LD_INT 1
17440: NEG
17441: PPUSH
17442: CALL_OW 101
// if Difficulty >= 3 then
17446: LD_OWVAR 67
17450: PUSH
17451: LD_INT 3
17453: GREATEREQUAL
17454: IFFALSE 17466
// SetAchievementEX ( ACH_AMER , 8 ) ;
17456: LD_STRING ACH_AMER
17458: PPUSH
17459: LD_INT 8
17461: PPUSH
17462: CALL_OW 564
// GiveMedals ( Main ) ;
17466: LD_STRING Main
17468: PPUSH
17469: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
17473: LD_INT 22
17475: PUSH
17476: LD_INT 1
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 23
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 21
17495: PUSH
17496: LD_INT 1
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: LIST
17507: PPUSH
17508: CALL_OW 69
17512: PPUSH
17513: CALL_OW 43
// prefix := 08_ ;
17517: LD_ADDR_VAR 0 3
17521: PUSH
17522: LD_STRING 08_
17524: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
17525: LD_EXP 11
17529: PPUSH
17530: LD_VAR 0 3
17534: PUSH
17535: LD_STRING JMM
17537: STR
17538: PPUSH
17539: CALL_OW 38
// if IsLive ( Brown ) then
17543: LD_EXP 12
17547: PPUSH
17548: CALL_OW 300
17552: IFFALSE 17572
// SaveCharacters ( Brown , prefix & Brown ) ;
17554: LD_EXP 12
17558: PPUSH
17559: LD_VAR 0 3
17563: PUSH
17564: LD_STRING Brown
17566: STR
17567: PPUSH
17568: CALL_OW 38
// if IsLive ( Donaldson ) then
17572: LD_EXP 13
17576: PPUSH
17577: CALL_OW 300
17581: IFFALSE 17601
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
17583: LD_EXP 13
17587: PPUSH
17588: LD_VAR 0 3
17592: PUSH
17593: LD_STRING Donaldson
17595: STR
17596: PPUSH
17597: CALL_OW 38
// if IsLive ( Bobby ) then
17601: LD_EXP 14
17605: PPUSH
17606: CALL_OW 300
17610: IFFALSE 17630
// SaveCharacters ( Bobby , prefix & Bobby ) ;
17612: LD_EXP 14
17616: PPUSH
17617: LD_VAR 0 3
17621: PUSH
17622: LD_STRING Bobby
17624: STR
17625: PPUSH
17626: CALL_OW 38
// if IsLive ( Cyrus ) then
17630: LD_EXP 15
17634: PPUSH
17635: CALL_OW 300
17639: IFFALSE 17659
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
17641: LD_EXP 15
17645: PPUSH
17646: LD_VAR 0 3
17650: PUSH
17651: LD_STRING Cyrus
17653: STR
17654: PPUSH
17655: CALL_OW 38
// if IsLive ( Lisa ) then
17659: LD_EXP 16
17663: PPUSH
17664: CALL_OW 300
17668: IFFALSE 17688
// SaveCharacters ( Lisa , prefix & Lisa ) ;
17670: LD_EXP 16
17674: PPUSH
17675: LD_VAR 0 3
17679: PUSH
17680: LD_STRING Lisa
17682: STR
17683: PPUSH
17684: CALL_OW 38
// if IsLive ( Frank ) then
17688: LD_EXP 17
17692: PPUSH
17693: CALL_OW 300
17697: IFFALSE 17717
// SaveCharacters ( Frank , prefix & Frank ) ;
17699: LD_EXP 17
17703: PPUSH
17704: LD_VAR 0 3
17708: PUSH
17709: LD_STRING Frank
17711: STR
17712: PPUSH
17713: CALL_OW 38
// if IsLive ( Gladstone ) then
17717: LD_EXP 18
17721: PPUSH
17722: CALL_OW 300
17726: IFFALSE 17746
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
17728: LD_EXP 18
17732: PPUSH
17733: LD_VAR 0 3
17737: PUSH
17738: LD_STRING Gladstone
17740: STR
17741: PPUSH
17742: CALL_OW 38
// if IsLive ( Kikuchi ) then
17746: LD_EXP 19
17750: PPUSH
17751: CALL_OW 300
17755: IFFALSE 17775
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
17757: LD_EXP 19
17761: PPUSH
17762: LD_VAR 0 3
17766: PUSH
17767: LD_STRING Kikuchi
17769: STR
17770: PPUSH
17771: CALL_OW 38
// if IsLive ( Denis ) then
17775: LD_EXP 22
17779: PPUSH
17780: CALL_OW 300
17784: IFFALSE 17804
// SaveCharacters ( Denis , prefix & Denis ) ;
17786: LD_EXP 22
17790: PPUSH
17791: LD_VAR 0 3
17795: PUSH
17796: LD_STRING Denis
17798: STR
17799: PPUSH
17800: CALL_OW 38
// if IsLive ( Joan ) then
17804: LD_EXP 23
17808: PPUSH
17809: CALL_OW 300
17813: IFFALSE 17833
// SaveCharacters ( Joan , prefix & Joan ) ;
17815: LD_EXP 23
17819: PPUSH
17820: LD_VAR 0 3
17824: PUSH
17825: LD_STRING Joan
17827: STR
17828: PPUSH
17829: CALL_OW 38
// if IsLive ( Khatam ) then
17833: LD_EXP 20
17837: PPUSH
17838: CALL_OW 300
17842: IFFALSE 17862
// SaveCharacters ( Khatam , prefix & Khatam ) ;
17844: LD_EXP 20
17848: PPUSH
17849: LD_VAR 0 3
17853: PUSH
17854: LD_STRING Khatam
17856: STR
17857: PPUSH
17858: CALL_OW 38
// if IsLive ( Houten ) then
17862: LD_EXP 21
17866: PPUSH
17867: CALL_OW 300
17871: IFFALSE 17891
// SaveCharacters ( Houten , prefix & Houten ) ;
17873: LD_EXP 21
17877: PPUSH
17878: LD_VAR 0 3
17882: PUSH
17883: LD_STRING Houten
17885: STR
17886: PPUSH
17887: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
17891: LD_INT 22
17893: PUSH
17894: LD_INT 1
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PUSH
17901: LD_INT 21
17903: PUSH
17904: LD_INT 1
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 23
17913: PUSH
17914: LD_INT 1
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: LIST
17925: PPUSH
17926: CALL_OW 69
17930: PUSH
17931: LD_EXP 11
17935: PUSH
17936: LD_EXP 12
17940: PUSH
17941: LD_EXP 13
17945: PUSH
17946: LD_EXP 14
17950: PUSH
17951: LD_EXP 15
17955: PUSH
17956: LD_EXP 16
17960: PUSH
17961: LD_EXP 17
17965: PUSH
17966: LD_EXP 18
17970: PUSH
17971: LD_EXP 19
17975: PUSH
17976: LD_EXP 22
17980: PUSH
17981: LD_EXP 23
17985: PUSH
17986: LD_EXP 21
17990: PUSH
17991: LD_EXP 20
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: DIFF
18011: PPUSH
18012: LD_STRING 08_other_survivors
18014: PPUSH
18015: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
18019: LD_INT 15
18021: PPUSH
18022: CALL 7021 0 1
// SaveVariable ( sikorskiIsKilled , 08_SikorskiStatus ) ;
18026: LD_EXP 9
18030: PPUSH
18031: LD_STRING 08_SikorskiStatus
18033: PPUSH
18034: CALL_OW 39
// YouWin ;
18038: CALL_OW 103
// end ; end_of_file
18042: PPOPN 3
18044: END
// export function SikorskiCounter ; begin
18045: LD_INT 0
18047: PPUSH
// repeat wait ( 0 0$1 ) ;
18048: LD_INT 35
18050: PPUSH
18051: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
18055: LD_ADDR_OWVAR 47
18059: PUSH
18060: LD_STRING #Am08-2
18062: PUSH
18063: LD_EXP 3
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
18072: LD_ADDR_EXP 3
18076: PUSH
18077: LD_EXP 3
18081: PUSH
18082: LD_INT 35
18084: MINUS
18085: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
18086: LD_EXP 3
18090: PUSH
18091: LD_INT 0
18093: EQUAL
18094: IFFALSE 18048
// display_strings := [ ] ;
18096: LD_ADDR_OWVAR 47
18100: PUSH
18101: EMPTY
18102: ST_TO_ADDR
// end ;
18103: LD_VAR 0 1
18107: RET
// export function SikorskiWaitCounter ; begin
18108: LD_INT 0
18110: PPUSH
// repeat wait ( 0 0$1 ) ;
18111: LD_INT 35
18113: PPUSH
18114: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
18118: LD_ADDR_OWVAR 47
18122: PUSH
18123: LD_STRING #Am08-1
18125: PUSH
18126: LD_EXP 4
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
18135: LD_ADDR_EXP 4
18139: PUSH
18140: LD_EXP 4
18144: PUSH
18145: LD_INT 35
18147: MINUS
18148: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
18149: LD_EXP 4
18153: PUSH
18154: LD_INT 0
18156: EQUAL
18157: IFFALSE 18111
// display_strings := [ ] ;
18159: LD_ADDR_OWVAR 47
18163: PUSH
18164: EMPTY
18165: ST_TO_ADDR
// end ; end_of_file
18166: LD_VAR 0 1
18170: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
18171: LD_EXP 3
18175: IFFALSE 18215
18177: GO 18179
18179: DISABLE
// begin enable ;
18180: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
18181: LD_INT 14
18183: PPUSH
18184: CALL_OW 435
18188: PUSH
18189: LD_INT 10
18191: LESS
18192: IFFALSE 18215
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
18194: LD_INT 1
18196: PPUSH
18197: LD_INT 5
18199: PPUSH
18200: CALL_OW 12
18204: PPUSH
18205: LD_INT 14
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: CALL_OW 55
// end ;
18215: END
// every 0 0$55 trigger sikorskiArriveCounter do
18216: LD_EXP 3
18220: IFFALSE 18260
18222: GO 18224
18224: DISABLE
// begin enable ;
18225: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
18226: LD_INT 13
18228: PPUSH
18229: CALL_OW 435
18233: PUSH
18234: LD_INT 10
18236: LESS
18237: IFFALSE 18260
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
18239: LD_INT 1
18241: PPUSH
18242: LD_INT 5
18244: PPUSH
18245: CALL_OW 12
18249: PPUSH
18250: LD_INT 13
18252: PPUSH
18253: LD_INT 1
18255: PPUSH
18256: CALL_OW 55
// end ; end_of_file
18260: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
18261: LD_INT 0
18263: PPUSH
18264: PPUSH
// if not units then
18265: LD_VAR 0 1
18269: NOT
18270: IFFALSE 18274
// exit ;
18272: GO 18399
// result := false ;
18274: LD_ADDR_VAR 0 4
18278: PUSH
18279: LD_INT 0
18281: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
18282: LD_ADDR_VAR 0 5
18286: PUSH
18287: LD_VAR 0 1
18291: PPUSH
18292: LD_INT 26
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PPUSH
18302: CALL_OW 72
18306: ST_TO_ADDR
// if tmp then
18307: LD_VAR 0 5
18311: IFFALSE 18337
// result := Say ( tmp [ 1 ] , menDialog ) ;
18313: LD_ADDR_VAR 0 4
18317: PUSH
18318: LD_VAR 0 5
18322: PUSH
18323: LD_INT 1
18325: ARRAY
18326: PPUSH
18327: LD_VAR 0 2
18331: PPUSH
18332: CALL_OW 88
18336: ST_TO_ADDR
// if not result then
18337: LD_VAR 0 4
18341: NOT
18342: IFFALSE 18399
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
18344: LD_ADDR_VAR 0 5
18348: PUSH
18349: LD_VAR 0 1
18353: PPUSH
18354: LD_INT 26
18356: PUSH
18357: LD_INT 2
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PPUSH
18364: CALL_OW 72
18368: ST_TO_ADDR
// if tmp then
18369: LD_VAR 0 5
18373: IFFALSE 18399
// result := Say ( tmp [ 1 ] , womenDialog ) ;
18375: LD_ADDR_VAR 0 4
18379: PUSH
18380: LD_VAR 0 5
18384: PUSH
18385: LD_INT 1
18387: ARRAY
18388: PPUSH
18389: LD_VAR 0 3
18393: PPUSH
18394: CALL_OW 88
18398: ST_TO_ADDR
// end ; end ; end_of_file
18399: LD_VAR 0 4
18403: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
18404: LD_INT 0
18406: PPUSH
// ar_miner := 81 ;
18407: LD_ADDR_EXP 40
18411: PUSH
18412: LD_INT 81
18414: ST_TO_ADDR
// ar_crane := 88 ;
18415: LD_ADDR_EXP 39
18419: PUSH
18420: LD_INT 88
18422: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18423: LD_ADDR_EXP 34
18427: PUSH
18428: LD_INT 89
18430: ST_TO_ADDR
// us_hack := 99 ;
18431: LD_ADDR_EXP 35
18435: PUSH
18436: LD_INT 99
18438: ST_TO_ADDR
// us_artillery := 97 ;
18439: LD_ADDR_EXP 36
18443: PUSH
18444: LD_INT 97
18446: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18447: LD_ADDR_EXP 37
18451: PUSH
18452: LD_INT 91
18454: ST_TO_ADDR
// ar_mortar := 92 ;
18455: LD_ADDR_EXP 38
18459: PUSH
18460: LD_INT 92
18462: ST_TO_ADDR
// ru_flamethrower := 93 ;
18463: LD_ADDR_EXP 41
18467: PUSH
18468: LD_INT 93
18470: ST_TO_ADDR
// ru_radar := 98 ;
18471: LD_ADDR_EXP 33
18475: PUSH
18476: LD_INT 98
18478: ST_TO_ADDR
// tech_Artillery := 80 ;
18479: LD_ADDR_EXP 42
18483: PUSH
18484: LD_INT 80
18486: ST_TO_ADDR
// tech_RadMat := 81 ;
18487: LD_ADDR_EXP 43
18491: PUSH
18492: LD_INT 81
18494: ST_TO_ADDR
// tech_BasicTools := 82 ;
18495: LD_ADDR_EXP 44
18499: PUSH
18500: LD_INT 82
18502: ST_TO_ADDR
// tech_Cargo := 83 ;
18503: LD_ADDR_EXP 45
18507: PUSH
18508: LD_INT 83
18510: ST_TO_ADDR
// tech_Track := 84 ;
18511: LD_ADDR_EXP 46
18515: PUSH
18516: LD_INT 84
18518: ST_TO_ADDR
// tech_Crane := 85 ;
18519: LD_ADDR_EXP 47
18523: PUSH
18524: LD_INT 85
18526: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18527: LD_ADDR_EXP 48
18531: PUSH
18532: LD_INT 86
18534: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18535: LD_ADDR_EXP 49
18539: PUSH
18540: LD_INT 87
18542: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18543: LD_ADDR_EXP 50
18547: PUSH
18548: LD_INT 88
18550: ST_TO_ADDR
// end ;
18551: LD_VAR 0 1
18555: RET
// every 1 do
18556: GO 18558
18558: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18559: CALL 18404 0 0
18563: END
// every 0 0$1 do
18564: GO 18566
18566: DISABLE
// begin enable ;
18567: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18568: LD_STRING updateTimer(
18570: PUSH
18571: LD_OWVAR 1
18575: STR
18576: PUSH
18577: LD_STRING );
18579: STR
18580: PPUSH
18581: CALL_OW 559
// end ;
18585: END
// export function SOS_MapStart ( ) ; begin
18586: LD_INT 0
18588: PPUSH
// if streamModeActive then
18589: LD_EXP 51
18593: IFFALSE 18602
// DefineStreamItems ( true ) ;
18595: LD_INT 1
18597: PPUSH
18598: CALL 20256 0 1
// UpdateFactoryWaypoints ( ) ;
18602: CALL 33117 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18606: CALL 33374 0 0
// end ;
18610: LD_VAR 0 1
18614: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18615: LD_INT 0
18617: PPUSH
// if p2 = 100 then
18618: LD_VAR 0 2
18622: PUSH
18623: LD_INT 100
18625: EQUAL
18626: IFFALSE 19629
// begin if not StreamModeActive then
18628: LD_EXP 51
18632: NOT
18633: IFFALSE 18643
// StreamModeActive := true ;
18635: LD_ADDR_EXP 51
18639: PUSH
18640: LD_INT 1
18642: ST_TO_ADDR
// if p3 = 0 then
18643: LD_VAR 0 3
18647: PUSH
18648: LD_INT 0
18650: EQUAL
18651: IFFALSE 18657
// InitStreamMode ;
18653: CALL 19792 0 0
// if p3 = 1 then
18657: LD_VAR 0 3
18661: PUSH
18662: LD_INT 1
18664: EQUAL
18665: IFFALSE 18675
// sRocket := true ;
18667: LD_ADDR_EXP 56
18671: PUSH
18672: LD_INT 1
18674: ST_TO_ADDR
// if p3 = 2 then
18675: LD_VAR 0 3
18679: PUSH
18680: LD_INT 2
18682: EQUAL
18683: IFFALSE 18693
// sSpeed := true ;
18685: LD_ADDR_EXP 55
18689: PUSH
18690: LD_INT 1
18692: ST_TO_ADDR
// if p3 = 3 then
18693: LD_VAR 0 3
18697: PUSH
18698: LD_INT 3
18700: EQUAL
18701: IFFALSE 18711
// sEngine := true ;
18703: LD_ADDR_EXP 57
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// if p3 = 4 then
18711: LD_VAR 0 3
18715: PUSH
18716: LD_INT 4
18718: EQUAL
18719: IFFALSE 18729
// sSpec := true ;
18721: LD_ADDR_EXP 54
18725: PUSH
18726: LD_INT 1
18728: ST_TO_ADDR
// if p3 = 5 then
18729: LD_VAR 0 3
18733: PUSH
18734: LD_INT 5
18736: EQUAL
18737: IFFALSE 18747
// sLevel := true ;
18739: LD_ADDR_EXP 58
18743: PUSH
18744: LD_INT 1
18746: ST_TO_ADDR
// if p3 = 6 then
18747: LD_VAR 0 3
18751: PUSH
18752: LD_INT 6
18754: EQUAL
18755: IFFALSE 18765
// sArmoury := true ;
18757: LD_ADDR_EXP 59
18761: PUSH
18762: LD_INT 1
18764: ST_TO_ADDR
// if p3 = 7 then
18765: LD_VAR 0 3
18769: PUSH
18770: LD_INT 7
18772: EQUAL
18773: IFFALSE 18783
// sRadar := true ;
18775: LD_ADDR_EXP 60
18779: PUSH
18780: LD_INT 1
18782: ST_TO_ADDR
// if p3 = 8 then
18783: LD_VAR 0 3
18787: PUSH
18788: LD_INT 8
18790: EQUAL
18791: IFFALSE 18801
// sBunker := true ;
18793: LD_ADDR_EXP 61
18797: PUSH
18798: LD_INT 1
18800: ST_TO_ADDR
// if p3 = 9 then
18801: LD_VAR 0 3
18805: PUSH
18806: LD_INT 9
18808: EQUAL
18809: IFFALSE 18819
// sHack := true ;
18811: LD_ADDR_EXP 62
18815: PUSH
18816: LD_INT 1
18818: ST_TO_ADDR
// if p3 = 10 then
18819: LD_VAR 0 3
18823: PUSH
18824: LD_INT 10
18826: EQUAL
18827: IFFALSE 18837
// sFire := true ;
18829: LD_ADDR_EXP 63
18833: PUSH
18834: LD_INT 1
18836: ST_TO_ADDR
// if p3 = 11 then
18837: LD_VAR 0 3
18841: PUSH
18842: LD_INT 11
18844: EQUAL
18845: IFFALSE 18855
// sRefresh := true ;
18847: LD_ADDR_EXP 64
18851: PUSH
18852: LD_INT 1
18854: ST_TO_ADDR
// if p3 = 12 then
18855: LD_VAR 0 3
18859: PUSH
18860: LD_INT 12
18862: EQUAL
18863: IFFALSE 18873
// sExp := true ;
18865: LD_ADDR_EXP 65
18869: PUSH
18870: LD_INT 1
18872: ST_TO_ADDR
// if p3 = 13 then
18873: LD_VAR 0 3
18877: PUSH
18878: LD_INT 13
18880: EQUAL
18881: IFFALSE 18891
// sDepot := true ;
18883: LD_ADDR_EXP 66
18887: PUSH
18888: LD_INT 1
18890: ST_TO_ADDR
// if p3 = 14 then
18891: LD_VAR 0 3
18895: PUSH
18896: LD_INT 14
18898: EQUAL
18899: IFFALSE 18909
// sFlag := true ;
18901: LD_ADDR_EXP 67
18905: PUSH
18906: LD_INT 1
18908: ST_TO_ADDR
// if p3 = 15 then
18909: LD_VAR 0 3
18913: PUSH
18914: LD_INT 15
18916: EQUAL
18917: IFFALSE 18927
// sKamikadze := true ;
18919: LD_ADDR_EXP 75
18923: PUSH
18924: LD_INT 1
18926: ST_TO_ADDR
// if p3 = 16 then
18927: LD_VAR 0 3
18931: PUSH
18932: LD_INT 16
18934: EQUAL
18935: IFFALSE 18945
// sTroll := true ;
18937: LD_ADDR_EXP 76
18941: PUSH
18942: LD_INT 1
18944: ST_TO_ADDR
// if p3 = 17 then
18945: LD_VAR 0 3
18949: PUSH
18950: LD_INT 17
18952: EQUAL
18953: IFFALSE 18963
// sSlow := true ;
18955: LD_ADDR_EXP 77
18959: PUSH
18960: LD_INT 1
18962: ST_TO_ADDR
// if p3 = 18 then
18963: LD_VAR 0 3
18967: PUSH
18968: LD_INT 18
18970: EQUAL
18971: IFFALSE 18981
// sLack := true ;
18973: LD_ADDR_EXP 78
18977: PUSH
18978: LD_INT 1
18980: ST_TO_ADDR
// if p3 = 19 then
18981: LD_VAR 0 3
18985: PUSH
18986: LD_INT 19
18988: EQUAL
18989: IFFALSE 18999
// sTank := true ;
18991: LD_ADDR_EXP 80
18995: PUSH
18996: LD_INT 1
18998: ST_TO_ADDR
// if p3 = 20 then
18999: LD_VAR 0 3
19003: PUSH
19004: LD_INT 20
19006: EQUAL
19007: IFFALSE 19017
// sRemote := true ;
19009: LD_ADDR_EXP 81
19013: PUSH
19014: LD_INT 1
19016: ST_TO_ADDR
// if p3 = 21 then
19017: LD_VAR 0 3
19021: PUSH
19022: LD_INT 21
19024: EQUAL
19025: IFFALSE 19035
// sPowell := true ;
19027: LD_ADDR_EXP 82
19031: PUSH
19032: LD_INT 1
19034: ST_TO_ADDR
// if p3 = 22 then
19035: LD_VAR 0 3
19039: PUSH
19040: LD_INT 22
19042: EQUAL
19043: IFFALSE 19053
// sTeleport := true ;
19045: LD_ADDR_EXP 85
19049: PUSH
19050: LD_INT 1
19052: ST_TO_ADDR
// if p3 = 23 then
19053: LD_VAR 0 3
19057: PUSH
19058: LD_INT 23
19060: EQUAL
19061: IFFALSE 19071
// sOilTower := true ;
19063: LD_ADDR_EXP 87
19067: PUSH
19068: LD_INT 1
19070: ST_TO_ADDR
// if p3 = 24 then
19071: LD_VAR 0 3
19075: PUSH
19076: LD_INT 24
19078: EQUAL
19079: IFFALSE 19089
// sShovel := true ;
19081: LD_ADDR_EXP 88
19085: PUSH
19086: LD_INT 1
19088: ST_TO_ADDR
// if p3 = 25 then
19089: LD_VAR 0 3
19093: PUSH
19094: LD_INT 25
19096: EQUAL
19097: IFFALSE 19107
// sSheik := true ;
19099: LD_ADDR_EXP 89
19103: PUSH
19104: LD_INT 1
19106: ST_TO_ADDR
// if p3 = 26 then
19107: LD_VAR 0 3
19111: PUSH
19112: LD_INT 26
19114: EQUAL
19115: IFFALSE 19125
// sEarthquake := true ;
19117: LD_ADDR_EXP 91
19121: PUSH
19122: LD_INT 1
19124: ST_TO_ADDR
// if p3 = 27 then
19125: LD_VAR 0 3
19129: PUSH
19130: LD_INT 27
19132: EQUAL
19133: IFFALSE 19143
// sAI := true ;
19135: LD_ADDR_EXP 92
19139: PUSH
19140: LD_INT 1
19142: ST_TO_ADDR
// if p3 = 28 then
19143: LD_VAR 0 3
19147: PUSH
19148: LD_INT 28
19150: EQUAL
19151: IFFALSE 19161
// sCargo := true ;
19153: LD_ADDR_EXP 95
19157: PUSH
19158: LD_INT 1
19160: ST_TO_ADDR
// if p3 = 29 then
19161: LD_VAR 0 3
19165: PUSH
19166: LD_INT 29
19168: EQUAL
19169: IFFALSE 19179
// sDLaser := true ;
19171: LD_ADDR_EXP 96
19175: PUSH
19176: LD_INT 1
19178: ST_TO_ADDR
// if p3 = 30 then
19179: LD_VAR 0 3
19183: PUSH
19184: LD_INT 30
19186: EQUAL
19187: IFFALSE 19197
// sExchange := true ;
19189: LD_ADDR_EXP 97
19193: PUSH
19194: LD_INT 1
19196: ST_TO_ADDR
// if p3 = 31 then
19197: LD_VAR 0 3
19201: PUSH
19202: LD_INT 31
19204: EQUAL
19205: IFFALSE 19215
// sFac := true ;
19207: LD_ADDR_EXP 98
19211: PUSH
19212: LD_INT 1
19214: ST_TO_ADDR
// if p3 = 32 then
19215: LD_VAR 0 3
19219: PUSH
19220: LD_INT 32
19222: EQUAL
19223: IFFALSE 19233
// sPower := true ;
19225: LD_ADDR_EXP 99
19229: PUSH
19230: LD_INT 1
19232: ST_TO_ADDR
// if p3 = 33 then
19233: LD_VAR 0 3
19237: PUSH
19238: LD_INT 33
19240: EQUAL
19241: IFFALSE 19251
// sRandom := true ;
19243: LD_ADDR_EXP 100
19247: PUSH
19248: LD_INT 1
19250: ST_TO_ADDR
// if p3 = 34 then
19251: LD_VAR 0 3
19255: PUSH
19256: LD_INT 34
19258: EQUAL
19259: IFFALSE 19269
// sShield := true ;
19261: LD_ADDR_EXP 101
19265: PUSH
19266: LD_INT 1
19268: ST_TO_ADDR
// if p3 = 35 then
19269: LD_VAR 0 3
19273: PUSH
19274: LD_INT 35
19276: EQUAL
19277: IFFALSE 19287
// sTime := true ;
19279: LD_ADDR_EXP 102
19283: PUSH
19284: LD_INT 1
19286: ST_TO_ADDR
// if p3 = 36 then
19287: LD_VAR 0 3
19291: PUSH
19292: LD_INT 36
19294: EQUAL
19295: IFFALSE 19305
// sTools := true ;
19297: LD_ADDR_EXP 103
19301: PUSH
19302: LD_INT 1
19304: ST_TO_ADDR
// if p3 = 101 then
19305: LD_VAR 0 3
19309: PUSH
19310: LD_INT 101
19312: EQUAL
19313: IFFALSE 19323
// sSold := true ;
19315: LD_ADDR_EXP 68
19319: PUSH
19320: LD_INT 1
19322: ST_TO_ADDR
// if p3 = 102 then
19323: LD_VAR 0 3
19327: PUSH
19328: LD_INT 102
19330: EQUAL
19331: IFFALSE 19341
// sDiff := true ;
19333: LD_ADDR_EXP 69
19337: PUSH
19338: LD_INT 1
19340: ST_TO_ADDR
// if p3 = 103 then
19341: LD_VAR 0 3
19345: PUSH
19346: LD_INT 103
19348: EQUAL
19349: IFFALSE 19359
// sFog := true ;
19351: LD_ADDR_EXP 72
19355: PUSH
19356: LD_INT 1
19358: ST_TO_ADDR
// if p3 = 104 then
19359: LD_VAR 0 3
19363: PUSH
19364: LD_INT 104
19366: EQUAL
19367: IFFALSE 19377
// sReset := true ;
19369: LD_ADDR_EXP 73
19373: PUSH
19374: LD_INT 1
19376: ST_TO_ADDR
// if p3 = 105 then
19377: LD_VAR 0 3
19381: PUSH
19382: LD_INT 105
19384: EQUAL
19385: IFFALSE 19395
// sSun := true ;
19387: LD_ADDR_EXP 74
19391: PUSH
19392: LD_INT 1
19394: ST_TO_ADDR
// if p3 = 106 then
19395: LD_VAR 0 3
19399: PUSH
19400: LD_INT 106
19402: EQUAL
19403: IFFALSE 19413
// sTiger := true ;
19405: LD_ADDR_EXP 70
19409: PUSH
19410: LD_INT 1
19412: ST_TO_ADDR
// if p3 = 107 then
19413: LD_VAR 0 3
19417: PUSH
19418: LD_INT 107
19420: EQUAL
19421: IFFALSE 19431
// sBomb := true ;
19423: LD_ADDR_EXP 71
19427: PUSH
19428: LD_INT 1
19430: ST_TO_ADDR
// if p3 = 108 then
19431: LD_VAR 0 3
19435: PUSH
19436: LD_INT 108
19438: EQUAL
19439: IFFALSE 19449
// sWound := true ;
19441: LD_ADDR_EXP 79
19445: PUSH
19446: LD_INT 1
19448: ST_TO_ADDR
// if p3 = 109 then
19449: LD_VAR 0 3
19453: PUSH
19454: LD_INT 109
19456: EQUAL
19457: IFFALSE 19467
// sBetray := true ;
19459: LD_ADDR_EXP 83
19463: PUSH
19464: LD_INT 1
19466: ST_TO_ADDR
// if p3 = 110 then
19467: LD_VAR 0 3
19471: PUSH
19472: LD_INT 110
19474: EQUAL
19475: IFFALSE 19485
// sContamin := true ;
19477: LD_ADDR_EXP 84
19481: PUSH
19482: LD_INT 1
19484: ST_TO_ADDR
// if p3 = 111 then
19485: LD_VAR 0 3
19489: PUSH
19490: LD_INT 111
19492: EQUAL
19493: IFFALSE 19503
// sOil := true ;
19495: LD_ADDR_EXP 86
19499: PUSH
19500: LD_INT 1
19502: ST_TO_ADDR
// if p3 = 112 then
19503: LD_VAR 0 3
19507: PUSH
19508: LD_INT 112
19510: EQUAL
19511: IFFALSE 19521
// sStu := true ;
19513: LD_ADDR_EXP 90
19517: PUSH
19518: LD_INT 1
19520: ST_TO_ADDR
// if p3 = 113 then
19521: LD_VAR 0 3
19525: PUSH
19526: LD_INT 113
19528: EQUAL
19529: IFFALSE 19539
// sBazooka := true ;
19531: LD_ADDR_EXP 93
19535: PUSH
19536: LD_INT 1
19538: ST_TO_ADDR
// if p3 = 114 then
19539: LD_VAR 0 3
19543: PUSH
19544: LD_INT 114
19546: EQUAL
19547: IFFALSE 19557
// sMortar := true ;
19549: LD_ADDR_EXP 94
19553: PUSH
19554: LD_INT 1
19556: ST_TO_ADDR
// if p3 = 115 then
19557: LD_VAR 0 3
19561: PUSH
19562: LD_INT 115
19564: EQUAL
19565: IFFALSE 19575
// sRanger := true ;
19567: LD_ADDR_EXP 104
19571: PUSH
19572: LD_INT 1
19574: ST_TO_ADDR
// if p3 = 116 then
19575: LD_VAR 0 3
19579: PUSH
19580: LD_INT 116
19582: EQUAL
19583: IFFALSE 19593
// sComputer := true ;
19585: LD_ADDR_EXP 105
19589: PUSH
19590: LD_INT 1
19592: ST_TO_ADDR
// if p3 = 117 then
19593: LD_VAR 0 3
19597: PUSH
19598: LD_INT 117
19600: EQUAL
19601: IFFALSE 19611
// s30 := true ;
19603: LD_ADDR_EXP 106
19607: PUSH
19608: LD_INT 1
19610: ST_TO_ADDR
// if p3 = 118 then
19611: LD_VAR 0 3
19615: PUSH
19616: LD_INT 118
19618: EQUAL
19619: IFFALSE 19629
// s60 := true ;
19621: LD_ADDR_EXP 107
19625: PUSH
19626: LD_INT 1
19628: ST_TO_ADDR
// end ; if p2 = 101 then
19629: LD_VAR 0 2
19633: PUSH
19634: LD_INT 101
19636: EQUAL
19637: IFFALSE 19765
// begin case p3 of 1 :
19639: LD_VAR 0 3
19643: PUSH
19644: LD_INT 1
19646: DOUBLE
19647: EQUAL
19648: IFTRUE 19652
19650: GO 19659
19652: POP
// hHackUnlimitedResources ; 2 :
19653: CALL 31863 0 0
19657: GO 19765
19659: LD_INT 2
19661: DOUBLE
19662: EQUAL
19663: IFTRUE 19667
19665: GO 19674
19667: POP
// hHackSetLevel10 ; 3 :
19668: CALL 31996 0 0
19672: GO 19765
19674: LD_INT 3
19676: DOUBLE
19677: EQUAL
19678: IFTRUE 19682
19680: GO 19689
19682: POP
// hHackSetLevel10YourUnits ; 4 :
19683: CALL 32081 0 0
19687: GO 19765
19689: LD_INT 4
19691: DOUBLE
19692: EQUAL
19693: IFTRUE 19697
19695: GO 19704
19697: POP
// hHackInvincible ; 5 :
19698: CALL 32529 0 0
19702: GO 19765
19704: LD_INT 5
19706: DOUBLE
19707: EQUAL
19708: IFTRUE 19712
19710: GO 19719
19712: POP
// hHackInvisible ; 6 :
19713: CALL 32640 0 0
19717: GO 19765
19719: LD_INT 6
19721: DOUBLE
19722: EQUAL
19723: IFTRUE 19727
19725: GO 19734
19727: POP
// hHackChangeYourSide ; 7 :
19728: CALL 32697 0 0
19732: GO 19765
19734: LD_INT 7
19736: DOUBLE
19737: EQUAL
19738: IFTRUE 19742
19740: GO 19749
19742: POP
// hHackChangeUnitSide ; 8 :
19743: CALL 32739 0 0
19747: GO 19765
19749: LD_INT 8
19751: DOUBLE
19752: EQUAL
19753: IFTRUE 19757
19755: GO 19764
19757: POP
// hHackFog ; end ;
19758: CALL 32840 0 0
19762: GO 19765
19764: POP
// end ; end ;
19765: LD_VAR 0 7
19769: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
19770: GO 19772
19772: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19773: LD_STRING initStreamRollete();
19775: PPUSH
19776: CALL_OW 559
// InitStreamMode ;
19780: CALL 19792 0 0
// DefineStreamItems ( false ) ;
19784: LD_INT 0
19786: PPUSH
19787: CALL 20256 0 1
// end ;
19791: END
// function InitStreamMode ; begin
19792: LD_INT 0
19794: PPUSH
// streamModeActive := false ;
19795: LD_ADDR_EXP 51
19799: PUSH
19800: LD_INT 0
19802: ST_TO_ADDR
// normalCounter := 36 ;
19803: LD_ADDR_EXP 52
19807: PUSH
19808: LD_INT 36
19810: ST_TO_ADDR
// hardcoreCounter := 18 ;
19811: LD_ADDR_EXP 53
19815: PUSH
19816: LD_INT 18
19818: ST_TO_ADDR
// sRocket := false ;
19819: LD_ADDR_EXP 56
19823: PUSH
19824: LD_INT 0
19826: ST_TO_ADDR
// sSpeed := false ;
19827: LD_ADDR_EXP 55
19831: PUSH
19832: LD_INT 0
19834: ST_TO_ADDR
// sEngine := false ;
19835: LD_ADDR_EXP 57
19839: PUSH
19840: LD_INT 0
19842: ST_TO_ADDR
// sSpec := false ;
19843: LD_ADDR_EXP 54
19847: PUSH
19848: LD_INT 0
19850: ST_TO_ADDR
// sLevel := false ;
19851: LD_ADDR_EXP 58
19855: PUSH
19856: LD_INT 0
19858: ST_TO_ADDR
// sArmoury := false ;
19859: LD_ADDR_EXP 59
19863: PUSH
19864: LD_INT 0
19866: ST_TO_ADDR
// sRadar := false ;
19867: LD_ADDR_EXP 60
19871: PUSH
19872: LD_INT 0
19874: ST_TO_ADDR
// sBunker := false ;
19875: LD_ADDR_EXP 61
19879: PUSH
19880: LD_INT 0
19882: ST_TO_ADDR
// sHack := false ;
19883: LD_ADDR_EXP 62
19887: PUSH
19888: LD_INT 0
19890: ST_TO_ADDR
// sFire := false ;
19891: LD_ADDR_EXP 63
19895: PUSH
19896: LD_INT 0
19898: ST_TO_ADDR
// sRefresh := false ;
19899: LD_ADDR_EXP 64
19903: PUSH
19904: LD_INT 0
19906: ST_TO_ADDR
// sExp := false ;
19907: LD_ADDR_EXP 65
19911: PUSH
19912: LD_INT 0
19914: ST_TO_ADDR
// sDepot := false ;
19915: LD_ADDR_EXP 66
19919: PUSH
19920: LD_INT 0
19922: ST_TO_ADDR
// sFlag := false ;
19923: LD_ADDR_EXP 67
19927: PUSH
19928: LD_INT 0
19930: ST_TO_ADDR
// sKamikadze := false ;
19931: LD_ADDR_EXP 75
19935: PUSH
19936: LD_INT 0
19938: ST_TO_ADDR
// sTroll := false ;
19939: LD_ADDR_EXP 76
19943: PUSH
19944: LD_INT 0
19946: ST_TO_ADDR
// sSlow := false ;
19947: LD_ADDR_EXP 77
19951: PUSH
19952: LD_INT 0
19954: ST_TO_ADDR
// sLack := false ;
19955: LD_ADDR_EXP 78
19959: PUSH
19960: LD_INT 0
19962: ST_TO_ADDR
// sTank := false ;
19963: LD_ADDR_EXP 80
19967: PUSH
19968: LD_INT 0
19970: ST_TO_ADDR
// sRemote := false ;
19971: LD_ADDR_EXP 81
19975: PUSH
19976: LD_INT 0
19978: ST_TO_ADDR
// sPowell := false ;
19979: LD_ADDR_EXP 82
19983: PUSH
19984: LD_INT 0
19986: ST_TO_ADDR
// sTeleport := false ;
19987: LD_ADDR_EXP 85
19991: PUSH
19992: LD_INT 0
19994: ST_TO_ADDR
// sOilTower := false ;
19995: LD_ADDR_EXP 87
19999: PUSH
20000: LD_INT 0
20002: ST_TO_ADDR
// sShovel := false ;
20003: LD_ADDR_EXP 88
20007: PUSH
20008: LD_INT 0
20010: ST_TO_ADDR
// sSheik := false ;
20011: LD_ADDR_EXP 89
20015: PUSH
20016: LD_INT 0
20018: ST_TO_ADDR
// sEarthquake := false ;
20019: LD_ADDR_EXP 91
20023: PUSH
20024: LD_INT 0
20026: ST_TO_ADDR
// sAI := false ;
20027: LD_ADDR_EXP 92
20031: PUSH
20032: LD_INT 0
20034: ST_TO_ADDR
// sCargo := false ;
20035: LD_ADDR_EXP 95
20039: PUSH
20040: LD_INT 0
20042: ST_TO_ADDR
// sDLaser := false ;
20043: LD_ADDR_EXP 96
20047: PUSH
20048: LD_INT 0
20050: ST_TO_ADDR
// sExchange := false ;
20051: LD_ADDR_EXP 97
20055: PUSH
20056: LD_INT 0
20058: ST_TO_ADDR
// sFac := false ;
20059: LD_ADDR_EXP 98
20063: PUSH
20064: LD_INT 0
20066: ST_TO_ADDR
// sPower := false ;
20067: LD_ADDR_EXP 99
20071: PUSH
20072: LD_INT 0
20074: ST_TO_ADDR
// sRandom := false ;
20075: LD_ADDR_EXP 100
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
// sShield := false ;
20083: LD_ADDR_EXP 101
20087: PUSH
20088: LD_INT 0
20090: ST_TO_ADDR
// sTime := false ;
20091: LD_ADDR_EXP 102
20095: PUSH
20096: LD_INT 0
20098: ST_TO_ADDR
// sTools := false ;
20099: LD_ADDR_EXP 103
20103: PUSH
20104: LD_INT 0
20106: ST_TO_ADDR
// sSold := false ;
20107: LD_ADDR_EXP 68
20111: PUSH
20112: LD_INT 0
20114: ST_TO_ADDR
// sDiff := false ;
20115: LD_ADDR_EXP 69
20119: PUSH
20120: LD_INT 0
20122: ST_TO_ADDR
// sFog := false ;
20123: LD_ADDR_EXP 72
20127: PUSH
20128: LD_INT 0
20130: ST_TO_ADDR
// sReset := false ;
20131: LD_ADDR_EXP 73
20135: PUSH
20136: LD_INT 0
20138: ST_TO_ADDR
// sSun := false ;
20139: LD_ADDR_EXP 74
20143: PUSH
20144: LD_INT 0
20146: ST_TO_ADDR
// sTiger := false ;
20147: LD_ADDR_EXP 70
20151: PUSH
20152: LD_INT 0
20154: ST_TO_ADDR
// sBomb := false ;
20155: LD_ADDR_EXP 71
20159: PUSH
20160: LD_INT 0
20162: ST_TO_ADDR
// sWound := false ;
20163: LD_ADDR_EXP 79
20167: PUSH
20168: LD_INT 0
20170: ST_TO_ADDR
// sBetray := false ;
20171: LD_ADDR_EXP 83
20175: PUSH
20176: LD_INT 0
20178: ST_TO_ADDR
// sContamin := false ;
20179: LD_ADDR_EXP 84
20183: PUSH
20184: LD_INT 0
20186: ST_TO_ADDR
// sOil := false ;
20187: LD_ADDR_EXP 86
20191: PUSH
20192: LD_INT 0
20194: ST_TO_ADDR
// sStu := false ;
20195: LD_ADDR_EXP 90
20199: PUSH
20200: LD_INT 0
20202: ST_TO_ADDR
// sBazooka := false ;
20203: LD_ADDR_EXP 93
20207: PUSH
20208: LD_INT 0
20210: ST_TO_ADDR
// sMortar := false ;
20211: LD_ADDR_EXP 94
20215: PUSH
20216: LD_INT 0
20218: ST_TO_ADDR
// sRanger := false ;
20219: LD_ADDR_EXP 104
20223: PUSH
20224: LD_INT 0
20226: ST_TO_ADDR
// sComputer := false ;
20227: LD_ADDR_EXP 105
20231: PUSH
20232: LD_INT 0
20234: ST_TO_ADDR
// s30 := false ;
20235: LD_ADDR_EXP 106
20239: PUSH
20240: LD_INT 0
20242: ST_TO_ADDR
// s60 := false ;
20243: LD_ADDR_EXP 107
20247: PUSH
20248: LD_INT 0
20250: ST_TO_ADDR
// end ;
20251: LD_VAR 0 1
20255: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20256: LD_INT 0
20258: PPUSH
20259: PPUSH
20260: PPUSH
20261: PPUSH
20262: PPUSH
20263: PPUSH
20264: PPUSH
// result := [ ] ;
20265: LD_ADDR_VAR 0 2
20269: PUSH
20270: EMPTY
20271: ST_TO_ADDR
// if campaign_id = 1 then
20272: LD_OWVAR 69
20276: PUSH
20277: LD_INT 1
20279: EQUAL
20280: IFFALSE 23446
// begin case mission_number of 1 :
20282: LD_OWVAR 70
20286: PUSH
20287: LD_INT 1
20289: DOUBLE
20290: EQUAL
20291: IFTRUE 20295
20293: GO 20371
20295: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20296: LD_ADDR_VAR 0 2
20300: PUSH
20301: LD_INT 2
20303: PUSH
20304: LD_INT 4
20306: PUSH
20307: LD_INT 11
20309: PUSH
20310: LD_INT 12
20312: PUSH
20313: LD_INT 15
20315: PUSH
20316: LD_INT 16
20318: PUSH
20319: LD_INT 22
20321: PUSH
20322: LD_INT 23
20324: PUSH
20325: LD_INT 26
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 101
20341: PUSH
20342: LD_INT 102
20344: PUSH
20345: LD_INT 106
20347: PUSH
20348: LD_INT 116
20350: PUSH
20351: LD_INT 117
20353: PUSH
20354: LD_INT 118
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: ST_TO_ADDR
20369: GO 23444
20371: LD_INT 2
20373: DOUBLE
20374: EQUAL
20375: IFTRUE 20379
20377: GO 20463
20379: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20380: LD_ADDR_VAR 0 2
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: LD_INT 4
20390: PUSH
20391: LD_INT 11
20393: PUSH
20394: LD_INT 12
20396: PUSH
20397: LD_INT 15
20399: PUSH
20400: LD_INT 16
20402: PUSH
20403: LD_INT 22
20405: PUSH
20406: LD_INT 23
20408: PUSH
20409: LD_INT 26
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 101
20425: PUSH
20426: LD_INT 102
20428: PUSH
20429: LD_INT 105
20431: PUSH
20432: LD_INT 106
20434: PUSH
20435: LD_INT 108
20437: PUSH
20438: LD_INT 116
20440: PUSH
20441: LD_INT 117
20443: PUSH
20444: LD_INT 118
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: ST_TO_ADDR
20461: GO 23444
20463: LD_INT 3
20465: DOUBLE
20466: EQUAL
20467: IFTRUE 20471
20469: GO 20559
20471: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20472: LD_ADDR_VAR 0 2
20476: PUSH
20477: LD_INT 2
20479: PUSH
20480: LD_INT 4
20482: PUSH
20483: LD_INT 5
20485: PUSH
20486: LD_INT 11
20488: PUSH
20489: LD_INT 12
20491: PUSH
20492: LD_INT 15
20494: PUSH
20495: LD_INT 16
20497: PUSH
20498: LD_INT 22
20500: PUSH
20501: LD_INT 26
20503: PUSH
20504: LD_INT 36
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 101
20521: PUSH
20522: LD_INT 102
20524: PUSH
20525: LD_INT 105
20527: PUSH
20528: LD_INT 106
20530: PUSH
20531: LD_INT 108
20533: PUSH
20534: LD_INT 116
20536: PUSH
20537: LD_INT 117
20539: PUSH
20540: LD_INT 118
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: ST_TO_ADDR
20557: GO 23444
20559: LD_INT 4
20561: DOUBLE
20562: EQUAL
20563: IFTRUE 20567
20565: GO 20663
20567: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20568: LD_ADDR_VAR 0 2
20572: PUSH
20573: LD_INT 2
20575: PUSH
20576: LD_INT 4
20578: PUSH
20579: LD_INT 5
20581: PUSH
20582: LD_INT 8
20584: PUSH
20585: LD_INT 11
20587: PUSH
20588: LD_INT 12
20590: PUSH
20591: LD_INT 15
20593: PUSH
20594: LD_INT 16
20596: PUSH
20597: LD_INT 22
20599: PUSH
20600: LD_INT 23
20602: PUSH
20603: LD_INT 26
20605: PUSH
20606: LD_INT 36
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 101
20625: PUSH
20626: LD_INT 102
20628: PUSH
20629: LD_INT 105
20631: PUSH
20632: LD_INT 106
20634: PUSH
20635: LD_INT 108
20637: PUSH
20638: LD_INT 116
20640: PUSH
20641: LD_INT 117
20643: PUSH
20644: LD_INT 118
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: ST_TO_ADDR
20661: GO 23444
20663: LD_INT 5
20665: DOUBLE
20666: EQUAL
20667: IFTRUE 20671
20669: GO 20783
20671: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20672: LD_ADDR_VAR 0 2
20676: PUSH
20677: LD_INT 2
20679: PUSH
20680: LD_INT 4
20682: PUSH
20683: LD_INT 5
20685: PUSH
20686: LD_INT 6
20688: PUSH
20689: LD_INT 8
20691: PUSH
20692: LD_INT 11
20694: PUSH
20695: LD_INT 12
20697: PUSH
20698: LD_INT 15
20700: PUSH
20701: LD_INT 16
20703: PUSH
20704: LD_INT 22
20706: PUSH
20707: LD_INT 23
20709: PUSH
20710: LD_INT 25
20712: PUSH
20713: LD_INT 26
20715: PUSH
20716: LD_INT 36
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 101
20737: PUSH
20738: LD_INT 102
20740: PUSH
20741: LD_INT 105
20743: PUSH
20744: LD_INT 106
20746: PUSH
20747: LD_INT 108
20749: PUSH
20750: LD_INT 109
20752: PUSH
20753: LD_INT 112
20755: PUSH
20756: LD_INT 116
20758: PUSH
20759: LD_INT 117
20761: PUSH
20762: LD_INT 118
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: ST_TO_ADDR
20781: GO 23444
20783: LD_INT 6
20785: DOUBLE
20786: EQUAL
20787: IFTRUE 20791
20789: GO 20923
20791: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20792: LD_ADDR_VAR 0 2
20796: PUSH
20797: LD_INT 2
20799: PUSH
20800: LD_INT 4
20802: PUSH
20803: LD_INT 5
20805: PUSH
20806: LD_INT 6
20808: PUSH
20809: LD_INT 8
20811: PUSH
20812: LD_INT 11
20814: PUSH
20815: LD_INT 12
20817: PUSH
20818: LD_INT 15
20820: PUSH
20821: LD_INT 16
20823: PUSH
20824: LD_INT 20
20826: PUSH
20827: LD_INT 21
20829: PUSH
20830: LD_INT 22
20832: PUSH
20833: LD_INT 23
20835: PUSH
20836: LD_INT 25
20838: PUSH
20839: LD_INT 26
20841: PUSH
20842: LD_INT 30
20844: PUSH
20845: LD_INT 31
20847: PUSH
20848: LD_INT 32
20850: PUSH
20851: LD_INT 36
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 101
20877: PUSH
20878: LD_INT 102
20880: PUSH
20881: LD_INT 105
20883: PUSH
20884: LD_INT 106
20886: PUSH
20887: LD_INT 108
20889: PUSH
20890: LD_INT 109
20892: PUSH
20893: LD_INT 112
20895: PUSH
20896: LD_INT 116
20898: PUSH
20899: LD_INT 117
20901: PUSH
20902: LD_INT 118
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: ST_TO_ADDR
20921: GO 23444
20923: LD_INT 7
20925: DOUBLE
20926: EQUAL
20927: IFTRUE 20931
20929: GO 21043
20931: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20932: LD_ADDR_VAR 0 2
20936: PUSH
20937: LD_INT 2
20939: PUSH
20940: LD_INT 4
20942: PUSH
20943: LD_INT 5
20945: PUSH
20946: LD_INT 7
20948: PUSH
20949: LD_INT 11
20951: PUSH
20952: LD_INT 12
20954: PUSH
20955: LD_INT 15
20957: PUSH
20958: LD_INT 16
20960: PUSH
20961: LD_INT 20
20963: PUSH
20964: LD_INT 21
20966: PUSH
20967: LD_INT 22
20969: PUSH
20970: LD_INT 23
20972: PUSH
20973: LD_INT 25
20975: PUSH
20976: LD_INT 26
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 101
20997: PUSH
20998: LD_INT 102
21000: PUSH
21001: LD_INT 103
21003: PUSH
21004: LD_INT 105
21006: PUSH
21007: LD_INT 106
21009: PUSH
21010: LD_INT 108
21012: PUSH
21013: LD_INT 112
21015: PUSH
21016: LD_INT 116
21018: PUSH
21019: LD_INT 117
21021: PUSH
21022: LD_INT 118
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: ST_TO_ADDR
21041: GO 23444
21043: LD_INT 8
21045: DOUBLE
21046: EQUAL
21047: IFTRUE 21051
21049: GO 21191
21051: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21052: LD_ADDR_VAR 0 2
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: LD_INT 4
21062: PUSH
21063: LD_INT 5
21065: PUSH
21066: LD_INT 6
21068: PUSH
21069: LD_INT 7
21071: PUSH
21072: LD_INT 8
21074: PUSH
21075: LD_INT 11
21077: PUSH
21078: LD_INT 12
21080: PUSH
21081: LD_INT 15
21083: PUSH
21084: LD_INT 16
21086: PUSH
21087: LD_INT 20
21089: PUSH
21090: LD_INT 21
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_INT 23
21098: PUSH
21099: LD_INT 25
21101: PUSH
21102: LD_INT 26
21104: PUSH
21105: LD_INT 30
21107: PUSH
21108: LD_INT 31
21110: PUSH
21111: LD_INT 32
21113: PUSH
21114: LD_INT 36
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 101
21141: PUSH
21142: LD_INT 102
21144: PUSH
21145: LD_INT 103
21147: PUSH
21148: LD_INT 105
21150: PUSH
21151: LD_INT 106
21153: PUSH
21154: LD_INT 108
21156: PUSH
21157: LD_INT 109
21159: PUSH
21160: LD_INT 112
21162: PUSH
21163: LD_INT 116
21165: PUSH
21166: LD_INT 117
21168: PUSH
21169: LD_INT 118
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: ST_TO_ADDR
21189: GO 23444
21191: LD_INT 9
21193: DOUBLE
21194: EQUAL
21195: IFTRUE 21199
21197: GO 21347
21199: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21200: LD_ADDR_VAR 0 2
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: LD_INT 4
21210: PUSH
21211: LD_INT 5
21213: PUSH
21214: LD_INT 6
21216: PUSH
21217: LD_INT 7
21219: PUSH
21220: LD_INT 8
21222: PUSH
21223: LD_INT 11
21225: PUSH
21226: LD_INT 12
21228: PUSH
21229: LD_INT 15
21231: PUSH
21232: LD_INT 16
21234: PUSH
21235: LD_INT 20
21237: PUSH
21238: LD_INT 21
21240: PUSH
21241: LD_INT 22
21243: PUSH
21244: LD_INT 23
21246: PUSH
21247: LD_INT 25
21249: PUSH
21250: LD_INT 26
21252: PUSH
21253: LD_INT 28
21255: PUSH
21256: LD_INT 30
21258: PUSH
21259: LD_INT 31
21261: PUSH
21262: LD_INT 32
21264: PUSH
21265: LD_INT 36
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 101
21293: PUSH
21294: LD_INT 102
21296: PUSH
21297: LD_INT 103
21299: PUSH
21300: LD_INT 105
21302: PUSH
21303: LD_INT 106
21305: PUSH
21306: LD_INT 108
21308: PUSH
21309: LD_INT 109
21311: PUSH
21312: LD_INT 112
21314: PUSH
21315: LD_INT 114
21317: PUSH
21318: LD_INT 116
21320: PUSH
21321: LD_INT 117
21323: PUSH
21324: LD_INT 118
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: ST_TO_ADDR
21345: GO 23444
21347: LD_INT 10
21349: DOUBLE
21350: EQUAL
21351: IFTRUE 21355
21353: GO 21551
21355: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21356: LD_ADDR_VAR 0 2
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: LD_INT 4
21366: PUSH
21367: LD_INT 5
21369: PUSH
21370: LD_INT 6
21372: PUSH
21373: LD_INT 7
21375: PUSH
21376: LD_INT 8
21378: PUSH
21379: LD_INT 9
21381: PUSH
21382: LD_INT 10
21384: PUSH
21385: LD_INT 11
21387: PUSH
21388: LD_INT 12
21390: PUSH
21391: LD_INT 13
21393: PUSH
21394: LD_INT 14
21396: PUSH
21397: LD_INT 15
21399: PUSH
21400: LD_INT 16
21402: PUSH
21403: LD_INT 17
21405: PUSH
21406: LD_INT 18
21408: PUSH
21409: LD_INT 19
21411: PUSH
21412: LD_INT 20
21414: PUSH
21415: LD_INT 21
21417: PUSH
21418: LD_INT 22
21420: PUSH
21421: LD_INT 23
21423: PUSH
21424: LD_INT 24
21426: PUSH
21427: LD_INT 25
21429: PUSH
21430: LD_INT 26
21432: PUSH
21433: LD_INT 28
21435: PUSH
21436: LD_INT 30
21438: PUSH
21439: LD_INT 31
21441: PUSH
21442: LD_INT 32
21444: PUSH
21445: LD_INT 36
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 101
21481: PUSH
21482: LD_INT 102
21484: PUSH
21485: LD_INT 103
21487: PUSH
21488: LD_INT 104
21490: PUSH
21491: LD_INT 105
21493: PUSH
21494: LD_INT 106
21496: PUSH
21497: LD_INT 107
21499: PUSH
21500: LD_INT 108
21502: PUSH
21503: LD_INT 109
21505: PUSH
21506: LD_INT 110
21508: PUSH
21509: LD_INT 111
21511: PUSH
21512: LD_INT 112
21514: PUSH
21515: LD_INT 114
21517: PUSH
21518: LD_INT 116
21520: PUSH
21521: LD_INT 117
21523: PUSH
21524: LD_INT 118
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: ST_TO_ADDR
21549: GO 23444
21551: LD_INT 11
21553: DOUBLE
21554: EQUAL
21555: IFTRUE 21559
21557: GO 21763
21559: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21560: LD_ADDR_VAR 0 2
21564: PUSH
21565: LD_INT 2
21567: PUSH
21568: LD_INT 3
21570: PUSH
21571: LD_INT 4
21573: PUSH
21574: LD_INT 5
21576: PUSH
21577: LD_INT 6
21579: PUSH
21580: LD_INT 7
21582: PUSH
21583: LD_INT 8
21585: PUSH
21586: LD_INT 9
21588: PUSH
21589: LD_INT 10
21591: PUSH
21592: LD_INT 11
21594: PUSH
21595: LD_INT 12
21597: PUSH
21598: LD_INT 13
21600: PUSH
21601: LD_INT 14
21603: PUSH
21604: LD_INT 15
21606: PUSH
21607: LD_INT 16
21609: PUSH
21610: LD_INT 17
21612: PUSH
21613: LD_INT 18
21615: PUSH
21616: LD_INT 19
21618: PUSH
21619: LD_INT 20
21621: PUSH
21622: LD_INT 21
21624: PUSH
21625: LD_INT 22
21627: PUSH
21628: LD_INT 23
21630: PUSH
21631: LD_INT 24
21633: PUSH
21634: LD_INT 25
21636: PUSH
21637: LD_INT 26
21639: PUSH
21640: LD_INT 28
21642: PUSH
21643: LD_INT 30
21645: PUSH
21646: LD_INT 31
21648: PUSH
21649: LD_INT 32
21651: PUSH
21652: LD_INT 34
21654: PUSH
21655: LD_INT 36
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 101
21693: PUSH
21694: LD_INT 102
21696: PUSH
21697: LD_INT 103
21699: PUSH
21700: LD_INT 104
21702: PUSH
21703: LD_INT 105
21705: PUSH
21706: LD_INT 106
21708: PUSH
21709: LD_INT 107
21711: PUSH
21712: LD_INT 108
21714: PUSH
21715: LD_INT 109
21717: PUSH
21718: LD_INT 110
21720: PUSH
21721: LD_INT 111
21723: PUSH
21724: LD_INT 112
21726: PUSH
21727: LD_INT 114
21729: PUSH
21730: LD_INT 116
21732: PUSH
21733: LD_INT 117
21735: PUSH
21736: LD_INT 118
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: ST_TO_ADDR
21761: GO 23444
21763: LD_INT 12
21765: DOUBLE
21766: EQUAL
21767: IFTRUE 21771
21769: GO 21991
21771: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21772: LD_ADDR_VAR 0 2
21776: PUSH
21777: LD_INT 1
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: LD_INT 3
21785: PUSH
21786: LD_INT 4
21788: PUSH
21789: LD_INT 5
21791: PUSH
21792: LD_INT 6
21794: PUSH
21795: LD_INT 7
21797: PUSH
21798: LD_INT 8
21800: PUSH
21801: LD_INT 9
21803: PUSH
21804: LD_INT 10
21806: PUSH
21807: LD_INT 11
21809: PUSH
21810: LD_INT 12
21812: PUSH
21813: LD_INT 13
21815: PUSH
21816: LD_INT 14
21818: PUSH
21819: LD_INT 15
21821: PUSH
21822: LD_INT 16
21824: PUSH
21825: LD_INT 17
21827: PUSH
21828: LD_INT 18
21830: PUSH
21831: LD_INT 19
21833: PUSH
21834: LD_INT 20
21836: PUSH
21837: LD_INT 21
21839: PUSH
21840: LD_INT 22
21842: PUSH
21843: LD_INT 23
21845: PUSH
21846: LD_INT 24
21848: PUSH
21849: LD_INT 25
21851: PUSH
21852: LD_INT 26
21854: PUSH
21855: LD_INT 27
21857: PUSH
21858: LD_INT 28
21860: PUSH
21861: LD_INT 30
21863: PUSH
21864: LD_INT 31
21866: PUSH
21867: LD_INT 32
21869: PUSH
21870: LD_INT 33
21872: PUSH
21873: LD_INT 34
21875: PUSH
21876: LD_INT 36
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 101
21917: PUSH
21918: LD_INT 102
21920: PUSH
21921: LD_INT 103
21923: PUSH
21924: LD_INT 104
21926: PUSH
21927: LD_INT 105
21929: PUSH
21930: LD_INT 106
21932: PUSH
21933: LD_INT 107
21935: PUSH
21936: LD_INT 108
21938: PUSH
21939: LD_INT 109
21941: PUSH
21942: LD_INT 110
21944: PUSH
21945: LD_INT 111
21947: PUSH
21948: LD_INT 112
21950: PUSH
21951: LD_INT 113
21953: PUSH
21954: LD_INT 114
21956: PUSH
21957: LD_INT 116
21959: PUSH
21960: LD_INT 117
21962: PUSH
21963: LD_INT 118
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: ST_TO_ADDR
21989: GO 23444
21991: LD_INT 13
21993: DOUBLE
21994: EQUAL
21995: IFTRUE 21999
21997: GO 22207
21999: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22000: LD_ADDR_VAR 0 2
22004: PUSH
22005: LD_INT 1
22007: PUSH
22008: LD_INT 2
22010: PUSH
22011: LD_INT 3
22013: PUSH
22014: LD_INT 4
22016: PUSH
22017: LD_INT 5
22019: PUSH
22020: LD_INT 8
22022: PUSH
22023: LD_INT 9
22025: PUSH
22026: LD_INT 10
22028: PUSH
22029: LD_INT 11
22031: PUSH
22032: LD_INT 12
22034: PUSH
22035: LD_INT 14
22037: PUSH
22038: LD_INT 15
22040: PUSH
22041: LD_INT 16
22043: PUSH
22044: LD_INT 17
22046: PUSH
22047: LD_INT 18
22049: PUSH
22050: LD_INT 19
22052: PUSH
22053: LD_INT 20
22055: PUSH
22056: LD_INT 21
22058: PUSH
22059: LD_INT 22
22061: PUSH
22062: LD_INT 23
22064: PUSH
22065: LD_INT 24
22067: PUSH
22068: LD_INT 25
22070: PUSH
22071: LD_INT 26
22073: PUSH
22074: LD_INT 27
22076: PUSH
22077: LD_INT 28
22079: PUSH
22080: LD_INT 30
22082: PUSH
22083: LD_INT 31
22085: PUSH
22086: LD_INT 32
22088: PUSH
22089: LD_INT 33
22091: PUSH
22092: LD_INT 34
22094: PUSH
22095: LD_INT 36
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 101
22133: PUSH
22134: LD_INT 102
22136: PUSH
22137: LD_INT 103
22139: PUSH
22140: LD_INT 104
22142: PUSH
22143: LD_INT 105
22145: PUSH
22146: LD_INT 106
22148: PUSH
22149: LD_INT 107
22151: PUSH
22152: LD_INT 108
22154: PUSH
22155: LD_INT 109
22157: PUSH
22158: LD_INT 110
22160: PUSH
22161: LD_INT 111
22163: PUSH
22164: LD_INT 112
22166: PUSH
22167: LD_INT 113
22169: PUSH
22170: LD_INT 114
22172: PUSH
22173: LD_INT 116
22175: PUSH
22176: LD_INT 117
22178: PUSH
22179: LD_INT 118
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: ST_TO_ADDR
22205: GO 23444
22207: LD_INT 14
22209: DOUBLE
22210: EQUAL
22211: IFTRUE 22215
22213: GO 22439
22215: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22216: LD_ADDR_VAR 0 2
22220: PUSH
22221: LD_INT 1
22223: PUSH
22224: LD_INT 2
22226: PUSH
22227: LD_INT 3
22229: PUSH
22230: LD_INT 4
22232: PUSH
22233: LD_INT 5
22235: PUSH
22236: LD_INT 6
22238: PUSH
22239: LD_INT 7
22241: PUSH
22242: LD_INT 8
22244: PUSH
22245: LD_INT 9
22247: PUSH
22248: LD_INT 10
22250: PUSH
22251: LD_INT 11
22253: PUSH
22254: LD_INT 12
22256: PUSH
22257: LD_INT 13
22259: PUSH
22260: LD_INT 14
22262: PUSH
22263: LD_INT 15
22265: PUSH
22266: LD_INT 16
22268: PUSH
22269: LD_INT 17
22271: PUSH
22272: LD_INT 18
22274: PUSH
22275: LD_INT 19
22277: PUSH
22278: LD_INT 20
22280: PUSH
22281: LD_INT 21
22283: PUSH
22284: LD_INT 22
22286: PUSH
22287: LD_INT 23
22289: PUSH
22290: LD_INT 24
22292: PUSH
22293: LD_INT 25
22295: PUSH
22296: LD_INT 26
22298: PUSH
22299: LD_INT 27
22301: PUSH
22302: LD_INT 28
22304: PUSH
22305: LD_INT 29
22307: PUSH
22308: LD_INT 30
22310: PUSH
22311: LD_INT 31
22313: PUSH
22314: LD_INT 32
22316: PUSH
22317: LD_INT 33
22319: PUSH
22320: LD_INT 34
22322: PUSH
22323: LD_INT 36
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 101
22365: PUSH
22366: LD_INT 102
22368: PUSH
22369: LD_INT 103
22371: PUSH
22372: LD_INT 104
22374: PUSH
22375: LD_INT 105
22377: PUSH
22378: LD_INT 106
22380: PUSH
22381: LD_INT 107
22383: PUSH
22384: LD_INT 108
22386: PUSH
22387: LD_INT 109
22389: PUSH
22390: LD_INT 110
22392: PUSH
22393: LD_INT 111
22395: PUSH
22396: LD_INT 112
22398: PUSH
22399: LD_INT 113
22401: PUSH
22402: LD_INT 114
22404: PUSH
22405: LD_INT 116
22407: PUSH
22408: LD_INT 117
22410: PUSH
22411: LD_INT 118
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: ST_TO_ADDR
22437: GO 23444
22439: LD_INT 15
22441: DOUBLE
22442: EQUAL
22443: IFTRUE 22447
22445: GO 22671
22447: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22448: LD_ADDR_VAR 0 2
22452: PUSH
22453: LD_INT 1
22455: PUSH
22456: LD_INT 2
22458: PUSH
22459: LD_INT 3
22461: PUSH
22462: LD_INT 4
22464: PUSH
22465: LD_INT 5
22467: PUSH
22468: LD_INT 6
22470: PUSH
22471: LD_INT 7
22473: PUSH
22474: LD_INT 8
22476: PUSH
22477: LD_INT 9
22479: PUSH
22480: LD_INT 10
22482: PUSH
22483: LD_INT 11
22485: PUSH
22486: LD_INT 12
22488: PUSH
22489: LD_INT 13
22491: PUSH
22492: LD_INT 14
22494: PUSH
22495: LD_INT 15
22497: PUSH
22498: LD_INT 16
22500: PUSH
22501: LD_INT 17
22503: PUSH
22504: LD_INT 18
22506: PUSH
22507: LD_INT 19
22509: PUSH
22510: LD_INT 20
22512: PUSH
22513: LD_INT 21
22515: PUSH
22516: LD_INT 22
22518: PUSH
22519: LD_INT 23
22521: PUSH
22522: LD_INT 24
22524: PUSH
22525: LD_INT 25
22527: PUSH
22528: LD_INT 26
22530: PUSH
22531: LD_INT 27
22533: PUSH
22534: LD_INT 28
22536: PUSH
22537: LD_INT 29
22539: PUSH
22540: LD_INT 30
22542: PUSH
22543: LD_INT 31
22545: PUSH
22546: LD_INT 32
22548: PUSH
22549: LD_INT 33
22551: PUSH
22552: LD_INT 34
22554: PUSH
22555: LD_INT 36
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 101
22597: PUSH
22598: LD_INT 102
22600: PUSH
22601: LD_INT 103
22603: PUSH
22604: LD_INT 104
22606: PUSH
22607: LD_INT 105
22609: PUSH
22610: LD_INT 106
22612: PUSH
22613: LD_INT 107
22615: PUSH
22616: LD_INT 108
22618: PUSH
22619: LD_INT 109
22621: PUSH
22622: LD_INT 110
22624: PUSH
22625: LD_INT 111
22627: PUSH
22628: LD_INT 112
22630: PUSH
22631: LD_INT 113
22633: PUSH
22634: LD_INT 114
22636: PUSH
22637: LD_INT 116
22639: PUSH
22640: LD_INT 117
22642: PUSH
22643: LD_INT 118
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: ST_TO_ADDR
22669: GO 23444
22671: LD_INT 16
22673: DOUBLE
22674: EQUAL
22675: IFTRUE 22679
22677: GO 22815
22679: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22680: LD_ADDR_VAR 0 2
22684: PUSH
22685: LD_INT 2
22687: PUSH
22688: LD_INT 4
22690: PUSH
22691: LD_INT 5
22693: PUSH
22694: LD_INT 7
22696: PUSH
22697: LD_INT 11
22699: PUSH
22700: LD_INT 12
22702: PUSH
22703: LD_INT 15
22705: PUSH
22706: LD_INT 16
22708: PUSH
22709: LD_INT 20
22711: PUSH
22712: LD_INT 21
22714: PUSH
22715: LD_INT 22
22717: PUSH
22718: LD_INT 23
22720: PUSH
22721: LD_INT 25
22723: PUSH
22724: LD_INT 26
22726: PUSH
22727: LD_INT 30
22729: PUSH
22730: LD_INT 31
22732: PUSH
22733: LD_INT 32
22735: PUSH
22736: LD_INT 33
22738: PUSH
22739: LD_INT 34
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 101
22765: PUSH
22766: LD_INT 102
22768: PUSH
22769: LD_INT 103
22771: PUSH
22772: LD_INT 106
22774: PUSH
22775: LD_INT 108
22777: PUSH
22778: LD_INT 112
22780: PUSH
22781: LD_INT 113
22783: PUSH
22784: LD_INT 114
22786: PUSH
22787: LD_INT 116
22789: PUSH
22790: LD_INT 117
22792: PUSH
22793: LD_INT 118
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: ST_TO_ADDR
22813: GO 23444
22815: LD_INT 17
22817: DOUBLE
22818: EQUAL
22819: IFTRUE 22823
22821: GO 23047
22823: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22824: LD_ADDR_VAR 0 2
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: LD_INT 2
22834: PUSH
22835: LD_INT 3
22837: PUSH
22838: LD_INT 4
22840: PUSH
22841: LD_INT 5
22843: PUSH
22844: LD_INT 6
22846: PUSH
22847: LD_INT 7
22849: PUSH
22850: LD_INT 8
22852: PUSH
22853: LD_INT 9
22855: PUSH
22856: LD_INT 10
22858: PUSH
22859: LD_INT 11
22861: PUSH
22862: LD_INT 12
22864: PUSH
22865: LD_INT 13
22867: PUSH
22868: LD_INT 14
22870: PUSH
22871: LD_INT 15
22873: PUSH
22874: LD_INT 16
22876: PUSH
22877: LD_INT 17
22879: PUSH
22880: LD_INT 18
22882: PUSH
22883: LD_INT 19
22885: PUSH
22886: LD_INT 20
22888: PUSH
22889: LD_INT 21
22891: PUSH
22892: LD_INT 22
22894: PUSH
22895: LD_INT 23
22897: PUSH
22898: LD_INT 24
22900: PUSH
22901: LD_INT 25
22903: PUSH
22904: LD_INT 26
22906: PUSH
22907: LD_INT 27
22909: PUSH
22910: LD_INT 28
22912: PUSH
22913: LD_INT 29
22915: PUSH
22916: LD_INT 30
22918: PUSH
22919: LD_INT 31
22921: PUSH
22922: LD_INT 32
22924: PUSH
22925: LD_INT 33
22927: PUSH
22928: LD_INT 34
22930: PUSH
22931: LD_INT 36
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 101
22973: PUSH
22974: LD_INT 102
22976: PUSH
22977: LD_INT 103
22979: PUSH
22980: LD_INT 104
22982: PUSH
22983: LD_INT 105
22985: PUSH
22986: LD_INT 106
22988: PUSH
22989: LD_INT 107
22991: PUSH
22992: LD_INT 108
22994: PUSH
22995: LD_INT 109
22997: PUSH
22998: LD_INT 110
23000: PUSH
23001: LD_INT 111
23003: PUSH
23004: LD_INT 112
23006: PUSH
23007: LD_INT 113
23009: PUSH
23010: LD_INT 114
23012: PUSH
23013: LD_INT 116
23015: PUSH
23016: LD_INT 117
23018: PUSH
23019: LD_INT 118
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: ST_TO_ADDR
23045: GO 23444
23047: LD_INT 18
23049: DOUBLE
23050: EQUAL
23051: IFTRUE 23055
23053: GO 23203
23055: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23056: LD_ADDR_VAR 0 2
23060: PUSH
23061: LD_INT 2
23063: PUSH
23064: LD_INT 4
23066: PUSH
23067: LD_INT 5
23069: PUSH
23070: LD_INT 7
23072: PUSH
23073: LD_INT 11
23075: PUSH
23076: LD_INT 12
23078: PUSH
23079: LD_INT 15
23081: PUSH
23082: LD_INT 16
23084: PUSH
23085: LD_INT 20
23087: PUSH
23088: LD_INT 21
23090: PUSH
23091: LD_INT 22
23093: PUSH
23094: LD_INT 23
23096: PUSH
23097: LD_INT 25
23099: PUSH
23100: LD_INT 26
23102: PUSH
23103: LD_INT 30
23105: PUSH
23106: LD_INT 31
23108: PUSH
23109: LD_INT 32
23111: PUSH
23112: LD_INT 33
23114: PUSH
23115: LD_INT 34
23117: PUSH
23118: LD_INT 35
23120: PUSH
23121: LD_INT 36
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 101
23149: PUSH
23150: LD_INT 102
23152: PUSH
23153: LD_INT 103
23155: PUSH
23156: LD_INT 106
23158: PUSH
23159: LD_INT 108
23161: PUSH
23162: LD_INT 112
23164: PUSH
23165: LD_INT 113
23167: PUSH
23168: LD_INT 114
23170: PUSH
23171: LD_INT 115
23173: PUSH
23174: LD_INT 116
23176: PUSH
23177: LD_INT 117
23179: PUSH
23180: LD_INT 118
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: ST_TO_ADDR
23201: GO 23444
23203: LD_INT 19
23205: DOUBLE
23206: EQUAL
23207: IFTRUE 23211
23209: GO 23443
23211: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23212: LD_ADDR_VAR 0 2
23216: PUSH
23217: LD_INT 1
23219: PUSH
23220: LD_INT 2
23222: PUSH
23223: LD_INT 3
23225: PUSH
23226: LD_INT 4
23228: PUSH
23229: LD_INT 5
23231: PUSH
23232: LD_INT 6
23234: PUSH
23235: LD_INT 7
23237: PUSH
23238: LD_INT 8
23240: PUSH
23241: LD_INT 9
23243: PUSH
23244: LD_INT 10
23246: PUSH
23247: LD_INT 11
23249: PUSH
23250: LD_INT 12
23252: PUSH
23253: LD_INT 13
23255: PUSH
23256: LD_INT 14
23258: PUSH
23259: LD_INT 15
23261: PUSH
23262: LD_INT 16
23264: PUSH
23265: LD_INT 17
23267: PUSH
23268: LD_INT 18
23270: PUSH
23271: LD_INT 19
23273: PUSH
23274: LD_INT 20
23276: PUSH
23277: LD_INT 21
23279: PUSH
23280: LD_INT 22
23282: PUSH
23283: LD_INT 23
23285: PUSH
23286: LD_INT 24
23288: PUSH
23289: LD_INT 25
23291: PUSH
23292: LD_INT 26
23294: PUSH
23295: LD_INT 27
23297: PUSH
23298: LD_INT 28
23300: PUSH
23301: LD_INT 29
23303: PUSH
23304: LD_INT 30
23306: PUSH
23307: LD_INT 31
23309: PUSH
23310: LD_INT 32
23312: PUSH
23313: LD_INT 33
23315: PUSH
23316: LD_INT 34
23318: PUSH
23319: LD_INT 35
23321: PUSH
23322: LD_INT 36
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 101
23365: PUSH
23366: LD_INT 102
23368: PUSH
23369: LD_INT 103
23371: PUSH
23372: LD_INT 104
23374: PUSH
23375: LD_INT 105
23377: PUSH
23378: LD_INT 106
23380: PUSH
23381: LD_INT 107
23383: PUSH
23384: LD_INT 108
23386: PUSH
23387: LD_INT 109
23389: PUSH
23390: LD_INT 110
23392: PUSH
23393: LD_INT 111
23395: PUSH
23396: LD_INT 112
23398: PUSH
23399: LD_INT 113
23401: PUSH
23402: LD_INT 114
23404: PUSH
23405: LD_INT 115
23407: PUSH
23408: LD_INT 116
23410: PUSH
23411: LD_INT 117
23413: PUSH
23414: LD_INT 118
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: ST_TO_ADDR
23441: GO 23444
23443: POP
// end else
23444: GO 23675
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23446: LD_ADDR_VAR 0 2
23450: PUSH
23451: LD_INT 1
23453: PUSH
23454: LD_INT 2
23456: PUSH
23457: LD_INT 3
23459: PUSH
23460: LD_INT 4
23462: PUSH
23463: LD_INT 5
23465: PUSH
23466: LD_INT 6
23468: PUSH
23469: LD_INT 7
23471: PUSH
23472: LD_INT 8
23474: PUSH
23475: LD_INT 9
23477: PUSH
23478: LD_INT 10
23480: PUSH
23481: LD_INT 11
23483: PUSH
23484: LD_INT 12
23486: PUSH
23487: LD_INT 13
23489: PUSH
23490: LD_INT 14
23492: PUSH
23493: LD_INT 15
23495: PUSH
23496: LD_INT 16
23498: PUSH
23499: LD_INT 17
23501: PUSH
23502: LD_INT 18
23504: PUSH
23505: LD_INT 19
23507: PUSH
23508: LD_INT 20
23510: PUSH
23511: LD_INT 21
23513: PUSH
23514: LD_INT 22
23516: PUSH
23517: LD_INT 23
23519: PUSH
23520: LD_INT 24
23522: PUSH
23523: LD_INT 25
23525: PUSH
23526: LD_INT 26
23528: PUSH
23529: LD_INT 27
23531: PUSH
23532: LD_INT 28
23534: PUSH
23535: LD_INT 29
23537: PUSH
23538: LD_INT 30
23540: PUSH
23541: LD_INT 31
23543: PUSH
23544: LD_INT 32
23546: PUSH
23547: LD_INT 33
23549: PUSH
23550: LD_INT 34
23552: PUSH
23553: LD_INT 35
23555: PUSH
23556: LD_INT 36
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 101
23599: PUSH
23600: LD_INT 102
23602: PUSH
23603: LD_INT 103
23605: PUSH
23606: LD_INT 104
23608: PUSH
23609: LD_INT 105
23611: PUSH
23612: LD_INT 106
23614: PUSH
23615: LD_INT 107
23617: PUSH
23618: LD_INT 108
23620: PUSH
23621: LD_INT 109
23623: PUSH
23624: LD_INT 110
23626: PUSH
23627: LD_INT 111
23629: PUSH
23630: LD_INT 112
23632: PUSH
23633: LD_INT 113
23635: PUSH
23636: LD_INT 114
23638: PUSH
23639: LD_INT 115
23641: PUSH
23642: LD_INT 116
23644: PUSH
23645: LD_INT 117
23647: PUSH
23648: LD_INT 118
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: ST_TO_ADDR
// if result then
23675: LD_VAR 0 2
23679: IFFALSE 24465
// begin normal :=  ;
23681: LD_ADDR_VAR 0 5
23685: PUSH
23686: LD_STRING 
23688: ST_TO_ADDR
// hardcore :=  ;
23689: LD_ADDR_VAR 0 6
23693: PUSH
23694: LD_STRING 
23696: ST_TO_ADDR
// active :=  ;
23697: LD_ADDR_VAR 0 7
23701: PUSH
23702: LD_STRING 
23704: ST_TO_ADDR
// for i = 1 to normalCounter do
23705: LD_ADDR_VAR 0 8
23709: PUSH
23710: DOUBLE
23711: LD_INT 1
23713: DEC
23714: ST_TO_ADDR
23715: LD_EXP 52
23719: PUSH
23720: FOR_TO
23721: IFFALSE 23822
// begin tmp := 0 ;
23723: LD_ADDR_VAR 0 3
23727: PUSH
23728: LD_STRING 0
23730: ST_TO_ADDR
// if result [ 1 ] then
23731: LD_VAR 0 2
23735: PUSH
23736: LD_INT 1
23738: ARRAY
23739: IFFALSE 23804
// if result [ 1 ] [ 1 ] = i then
23741: LD_VAR 0 2
23745: PUSH
23746: LD_INT 1
23748: ARRAY
23749: PUSH
23750: LD_INT 1
23752: ARRAY
23753: PUSH
23754: LD_VAR 0 8
23758: EQUAL
23759: IFFALSE 23804
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23761: LD_ADDR_VAR 0 2
23765: PUSH
23766: LD_VAR 0 2
23770: PPUSH
23771: LD_INT 1
23773: PPUSH
23774: LD_VAR 0 2
23778: PUSH
23779: LD_INT 1
23781: ARRAY
23782: PPUSH
23783: LD_INT 1
23785: PPUSH
23786: CALL_OW 3
23790: PPUSH
23791: CALL_OW 1
23795: ST_TO_ADDR
// tmp := 1 ;
23796: LD_ADDR_VAR 0 3
23800: PUSH
23801: LD_STRING 1
23803: ST_TO_ADDR
// end ; normal := normal & tmp ;
23804: LD_ADDR_VAR 0 5
23808: PUSH
23809: LD_VAR 0 5
23813: PUSH
23814: LD_VAR 0 3
23818: STR
23819: ST_TO_ADDR
// end ;
23820: GO 23720
23822: POP
23823: POP
// for i = 1 to hardcoreCounter do
23824: LD_ADDR_VAR 0 8
23828: PUSH
23829: DOUBLE
23830: LD_INT 1
23832: DEC
23833: ST_TO_ADDR
23834: LD_EXP 53
23838: PUSH
23839: FOR_TO
23840: IFFALSE 23945
// begin tmp := 0 ;
23842: LD_ADDR_VAR 0 3
23846: PUSH
23847: LD_STRING 0
23849: ST_TO_ADDR
// if result [ 2 ] then
23850: LD_VAR 0 2
23854: PUSH
23855: LD_INT 2
23857: ARRAY
23858: IFFALSE 23927
// if result [ 2 ] [ 1 ] = 100 + i then
23860: LD_VAR 0 2
23864: PUSH
23865: LD_INT 2
23867: ARRAY
23868: PUSH
23869: LD_INT 1
23871: ARRAY
23872: PUSH
23873: LD_INT 100
23875: PUSH
23876: LD_VAR 0 8
23880: PLUS
23881: EQUAL
23882: IFFALSE 23927
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23884: LD_ADDR_VAR 0 2
23888: PUSH
23889: LD_VAR 0 2
23893: PPUSH
23894: LD_INT 2
23896: PPUSH
23897: LD_VAR 0 2
23901: PUSH
23902: LD_INT 2
23904: ARRAY
23905: PPUSH
23906: LD_INT 1
23908: PPUSH
23909: CALL_OW 3
23913: PPUSH
23914: CALL_OW 1
23918: ST_TO_ADDR
// tmp := 1 ;
23919: LD_ADDR_VAR 0 3
23923: PUSH
23924: LD_STRING 1
23926: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23927: LD_ADDR_VAR 0 6
23931: PUSH
23932: LD_VAR 0 6
23936: PUSH
23937: LD_VAR 0 3
23941: STR
23942: ST_TO_ADDR
// end ;
23943: GO 23839
23945: POP
23946: POP
// if isGameLoad then
23947: LD_VAR 0 1
23951: IFFALSE 24426
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23953: LD_ADDR_VAR 0 4
23957: PUSH
23958: LD_EXP 56
23962: PUSH
23963: LD_EXP 55
23967: PUSH
23968: LD_EXP 57
23972: PUSH
23973: LD_EXP 54
23977: PUSH
23978: LD_EXP 58
23982: PUSH
23983: LD_EXP 59
23987: PUSH
23988: LD_EXP 60
23992: PUSH
23993: LD_EXP 61
23997: PUSH
23998: LD_EXP 62
24002: PUSH
24003: LD_EXP 63
24007: PUSH
24008: LD_EXP 64
24012: PUSH
24013: LD_EXP 65
24017: PUSH
24018: LD_EXP 66
24022: PUSH
24023: LD_EXP 67
24027: PUSH
24028: LD_EXP 75
24032: PUSH
24033: LD_EXP 76
24037: PUSH
24038: LD_EXP 77
24042: PUSH
24043: LD_EXP 78
24047: PUSH
24048: LD_EXP 80
24052: PUSH
24053: LD_EXP 81
24057: PUSH
24058: LD_EXP 82
24062: PUSH
24063: LD_EXP 85
24067: PUSH
24068: LD_EXP 87
24072: PUSH
24073: LD_EXP 88
24077: PUSH
24078: LD_EXP 89
24082: PUSH
24083: LD_EXP 91
24087: PUSH
24088: LD_EXP 92
24092: PUSH
24093: LD_EXP 95
24097: PUSH
24098: LD_EXP 96
24102: PUSH
24103: LD_EXP 97
24107: PUSH
24108: LD_EXP 98
24112: PUSH
24113: LD_EXP 99
24117: PUSH
24118: LD_EXP 100
24122: PUSH
24123: LD_EXP 101
24127: PUSH
24128: LD_EXP 102
24132: PUSH
24133: LD_EXP 103
24137: PUSH
24138: LD_EXP 68
24142: PUSH
24143: LD_EXP 69
24147: PUSH
24148: LD_EXP 72
24152: PUSH
24153: LD_EXP 73
24157: PUSH
24158: LD_EXP 74
24162: PUSH
24163: LD_EXP 70
24167: PUSH
24168: LD_EXP 71
24172: PUSH
24173: LD_EXP 79
24177: PUSH
24178: LD_EXP 83
24182: PUSH
24183: LD_EXP 84
24187: PUSH
24188: LD_EXP 86
24192: PUSH
24193: LD_EXP 90
24197: PUSH
24198: LD_EXP 93
24202: PUSH
24203: LD_EXP 94
24207: PUSH
24208: LD_EXP 104
24212: PUSH
24213: LD_EXP 105
24217: PUSH
24218: LD_EXP 106
24222: PUSH
24223: LD_EXP 107
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: ST_TO_ADDR
// tmp :=  ;
24284: LD_ADDR_VAR 0 3
24288: PUSH
24289: LD_STRING 
24291: ST_TO_ADDR
// for i = 1 to normalCounter do
24292: LD_ADDR_VAR 0 8
24296: PUSH
24297: DOUBLE
24298: LD_INT 1
24300: DEC
24301: ST_TO_ADDR
24302: LD_EXP 52
24306: PUSH
24307: FOR_TO
24308: IFFALSE 24344
// begin if flags [ i ] then
24310: LD_VAR 0 4
24314: PUSH
24315: LD_VAR 0 8
24319: ARRAY
24320: IFFALSE 24342
// tmp := tmp & i & ; ;
24322: LD_ADDR_VAR 0 3
24326: PUSH
24327: LD_VAR 0 3
24331: PUSH
24332: LD_VAR 0 8
24336: STR
24337: PUSH
24338: LD_STRING ;
24340: STR
24341: ST_TO_ADDR
// end ;
24342: GO 24307
24344: POP
24345: POP
// for i = 1 to hardcoreCounter do
24346: LD_ADDR_VAR 0 8
24350: PUSH
24351: DOUBLE
24352: LD_INT 1
24354: DEC
24355: ST_TO_ADDR
24356: LD_EXP 53
24360: PUSH
24361: FOR_TO
24362: IFFALSE 24408
// begin if flags [ normalCounter + i ] then
24364: LD_VAR 0 4
24368: PUSH
24369: LD_EXP 52
24373: PUSH
24374: LD_VAR 0 8
24378: PLUS
24379: ARRAY
24380: IFFALSE 24406
// tmp := tmp & ( 100 + i ) & ; ;
24382: LD_ADDR_VAR 0 3
24386: PUSH
24387: LD_VAR 0 3
24391: PUSH
24392: LD_INT 100
24394: PUSH
24395: LD_VAR 0 8
24399: PLUS
24400: STR
24401: PUSH
24402: LD_STRING ;
24404: STR
24405: ST_TO_ADDR
// end ;
24406: GO 24361
24408: POP
24409: POP
// if tmp then
24410: LD_VAR 0 3
24414: IFFALSE 24426
// active := tmp ;
24416: LD_ADDR_VAR 0 7
24420: PUSH
24421: LD_VAR 0 3
24425: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24426: LD_STRING getStreamItemsFromMission("
24428: PUSH
24429: LD_VAR 0 5
24433: STR
24434: PUSH
24435: LD_STRING ","
24437: STR
24438: PUSH
24439: LD_VAR 0 6
24443: STR
24444: PUSH
24445: LD_STRING ","
24447: STR
24448: PUSH
24449: LD_VAR 0 7
24453: STR
24454: PUSH
24455: LD_STRING ")
24457: STR
24458: PPUSH
24459: CALL_OW 559
// end else
24463: GO 24472
// ToLua ( getStreamItemsFromMission("","","") ) ;
24465: LD_STRING getStreamItemsFromMission("","","")
24467: PPUSH
24468: CALL_OW 559
// end ;
24472: LD_VAR 0 2
24476: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24477: LD_EXP 51
24481: PUSH
24482: LD_EXP 56
24486: AND
24487: IFFALSE 24611
24489: GO 24491
24491: DISABLE
24492: LD_INT 0
24494: PPUSH
24495: PPUSH
// begin enable ;
24496: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24497: LD_ADDR_VAR 0 2
24501: PUSH
24502: LD_INT 22
24504: PUSH
24505: LD_OWVAR 2
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: LD_INT 34
24519: PUSH
24520: LD_INT 7
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 34
24529: PUSH
24530: LD_INT 45
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 34
24539: PUSH
24540: LD_INT 28
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 34
24549: PUSH
24550: LD_INT 47
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PPUSH
24568: CALL_OW 69
24572: ST_TO_ADDR
// if not tmp then
24573: LD_VAR 0 2
24577: NOT
24578: IFFALSE 24582
// exit ;
24580: GO 24611
// for i in tmp do
24582: LD_ADDR_VAR 0 1
24586: PUSH
24587: LD_VAR 0 2
24591: PUSH
24592: FOR_IN
24593: IFFALSE 24609
// begin SetLives ( i , 0 ) ;
24595: LD_VAR 0 1
24599: PPUSH
24600: LD_INT 0
24602: PPUSH
24603: CALL_OW 234
// end ;
24607: GO 24592
24609: POP
24610: POP
// end ;
24611: PPOPN 2
24613: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24614: LD_EXP 51
24618: PUSH
24619: LD_EXP 57
24623: AND
24624: IFFALSE 24708
24626: GO 24628
24628: DISABLE
24629: LD_INT 0
24631: PPUSH
24632: PPUSH
// begin enable ;
24633: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24634: LD_ADDR_VAR 0 2
24638: PUSH
24639: LD_INT 22
24641: PUSH
24642: LD_OWVAR 2
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 32
24653: PUSH
24654: LD_INT 3
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PPUSH
24665: CALL_OW 69
24669: ST_TO_ADDR
// if not tmp then
24670: LD_VAR 0 2
24674: NOT
24675: IFFALSE 24679
// exit ;
24677: GO 24708
// for i in tmp do
24679: LD_ADDR_VAR 0 1
24683: PUSH
24684: LD_VAR 0 2
24688: PUSH
24689: FOR_IN
24690: IFFALSE 24706
// begin SetLives ( i , 0 ) ;
24692: LD_VAR 0 1
24696: PPUSH
24697: LD_INT 0
24699: PPUSH
24700: CALL_OW 234
// end ;
24704: GO 24689
24706: POP
24707: POP
// end ;
24708: PPOPN 2
24710: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24711: LD_EXP 51
24715: PUSH
24716: LD_EXP 54
24720: AND
24721: IFFALSE 24814
24723: GO 24725
24725: DISABLE
24726: LD_INT 0
24728: PPUSH
// begin enable ;
24729: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24730: LD_ADDR_VAR 0 1
24734: PUSH
24735: LD_INT 22
24737: PUSH
24738: LD_OWVAR 2
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 2
24749: PUSH
24750: LD_INT 25
24752: PUSH
24753: LD_INT 5
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 25
24762: PUSH
24763: LD_INT 9
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 25
24772: PUSH
24773: LD_INT 8
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PPUSH
24790: CALL_OW 69
24794: PUSH
24795: FOR_IN
24796: IFFALSE 24812
// begin SetClass ( i , 1 ) ;
24798: LD_VAR 0 1
24802: PPUSH
24803: LD_INT 1
24805: PPUSH
24806: CALL_OW 336
// end ;
24810: GO 24795
24812: POP
24813: POP
// end ;
24814: PPOPN 1
24816: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24817: LD_EXP 51
24821: PUSH
24822: LD_EXP 55
24826: AND
24827: PUSH
24828: LD_OWVAR 65
24832: PUSH
24833: LD_INT 7
24835: LESS
24836: AND
24837: IFFALSE 24851
24839: GO 24841
24841: DISABLE
// begin enable ;
24842: ENABLE
// game_speed := 7 ;
24843: LD_ADDR_OWVAR 65
24847: PUSH
24848: LD_INT 7
24850: ST_TO_ADDR
// end ;
24851: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24852: LD_EXP 51
24856: PUSH
24857: LD_EXP 58
24861: AND
24862: IFFALSE 25064
24864: GO 24866
24866: DISABLE
24867: LD_INT 0
24869: PPUSH
24870: PPUSH
24871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24872: LD_ADDR_VAR 0 3
24876: PUSH
24877: LD_INT 81
24879: PUSH
24880: LD_OWVAR 2
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 21
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PPUSH
24903: CALL_OW 69
24907: ST_TO_ADDR
// if not tmp then
24908: LD_VAR 0 3
24912: NOT
24913: IFFALSE 24917
// exit ;
24915: GO 25064
// if tmp > 5 then
24917: LD_VAR 0 3
24921: PUSH
24922: LD_INT 5
24924: GREATER
24925: IFFALSE 24937
// k := 5 else
24927: LD_ADDR_VAR 0 2
24931: PUSH
24932: LD_INT 5
24934: ST_TO_ADDR
24935: GO 24947
// k := tmp ;
24937: LD_ADDR_VAR 0 2
24941: PUSH
24942: LD_VAR 0 3
24946: ST_TO_ADDR
// for i := 1 to k do
24947: LD_ADDR_VAR 0 1
24951: PUSH
24952: DOUBLE
24953: LD_INT 1
24955: DEC
24956: ST_TO_ADDR
24957: LD_VAR 0 2
24961: PUSH
24962: FOR_TO
24963: IFFALSE 25062
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24965: LD_VAR 0 3
24969: PUSH
24970: LD_VAR 0 1
24974: ARRAY
24975: PPUSH
24976: LD_VAR 0 1
24980: PUSH
24981: LD_INT 4
24983: MOD
24984: PUSH
24985: LD_INT 1
24987: PLUS
24988: PPUSH
24989: CALL_OW 259
24993: PUSH
24994: LD_INT 10
24996: LESS
24997: IFFALSE 25060
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24999: LD_VAR 0 3
25003: PUSH
25004: LD_VAR 0 1
25008: ARRAY
25009: PPUSH
25010: LD_VAR 0 1
25014: PUSH
25015: LD_INT 4
25017: MOD
25018: PUSH
25019: LD_INT 1
25021: PLUS
25022: PPUSH
25023: LD_VAR 0 3
25027: PUSH
25028: LD_VAR 0 1
25032: ARRAY
25033: PPUSH
25034: LD_VAR 0 1
25038: PUSH
25039: LD_INT 4
25041: MOD
25042: PUSH
25043: LD_INT 1
25045: PLUS
25046: PPUSH
25047: CALL_OW 259
25051: PUSH
25052: LD_INT 1
25054: PLUS
25055: PPUSH
25056: CALL_OW 237
25060: GO 24962
25062: POP
25063: POP
// end ;
25064: PPOPN 3
25066: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25067: LD_EXP 51
25071: PUSH
25072: LD_EXP 59
25076: AND
25077: IFFALSE 25097
25079: GO 25081
25081: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25082: LD_INT 4
25084: PPUSH
25085: LD_OWVAR 2
25089: PPUSH
25090: LD_INT 0
25092: PPUSH
25093: CALL_OW 324
25097: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25098: LD_EXP 51
25102: PUSH
25103: LD_EXP 88
25107: AND
25108: IFFALSE 25128
25110: GO 25112
25112: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25113: LD_INT 19
25115: PPUSH
25116: LD_OWVAR 2
25120: PPUSH
25121: LD_INT 0
25123: PPUSH
25124: CALL_OW 324
25128: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25129: LD_EXP 51
25133: PUSH
25134: LD_EXP 60
25138: AND
25139: IFFALSE 25241
25141: GO 25143
25143: DISABLE
25144: LD_INT 0
25146: PPUSH
25147: PPUSH
// begin enable ;
25148: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25149: LD_ADDR_VAR 0 2
25153: PUSH
25154: LD_INT 22
25156: PUSH
25157: LD_OWVAR 2
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: LD_INT 34
25171: PUSH
25172: LD_INT 11
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 34
25181: PUSH
25182: LD_INT 30
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: LIST
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PPUSH
25198: CALL_OW 69
25202: ST_TO_ADDR
// if not tmp then
25203: LD_VAR 0 2
25207: NOT
25208: IFFALSE 25212
// exit ;
25210: GO 25241
// for i in tmp do
25212: LD_ADDR_VAR 0 1
25216: PUSH
25217: LD_VAR 0 2
25221: PUSH
25222: FOR_IN
25223: IFFALSE 25239
// begin SetLives ( i , 0 ) ;
25225: LD_VAR 0 1
25229: PPUSH
25230: LD_INT 0
25232: PPUSH
25233: CALL_OW 234
// end ;
25237: GO 25222
25239: POP
25240: POP
// end ;
25241: PPOPN 2
25243: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25244: LD_EXP 51
25248: PUSH
25249: LD_EXP 61
25253: AND
25254: IFFALSE 25274
25256: GO 25258
25258: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25259: LD_INT 32
25261: PPUSH
25262: LD_OWVAR 2
25266: PPUSH
25267: LD_INT 0
25269: PPUSH
25270: CALL_OW 324
25274: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25275: LD_EXP 51
25279: PUSH
25280: LD_EXP 62
25284: AND
25285: IFFALSE 25466
25287: GO 25289
25289: DISABLE
25290: LD_INT 0
25292: PPUSH
25293: PPUSH
25294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25295: LD_ADDR_VAR 0 2
25299: PUSH
25300: LD_INT 22
25302: PUSH
25303: LD_OWVAR 2
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 33
25314: PUSH
25315: LD_INT 3
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PPUSH
25326: CALL_OW 69
25330: ST_TO_ADDR
// if not tmp then
25331: LD_VAR 0 2
25335: NOT
25336: IFFALSE 25340
// exit ;
25338: GO 25466
// side := 0 ;
25340: LD_ADDR_VAR 0 3
25344: PUSH
25345: LD_INT 0
25347: ST_TO_ADDR
// for i := 1 to 8 do
25348: LD_ADDR_VAR 0 1
25352: PUSH
25353: DOUBLE
25354: LD_INT 1
25356: DEC
25357: ST_TO_ADDR
25358: LD_INT 8
25360: PUSH
25361: FOR_TO
25362: IFFALSE 25410
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25364: LD_OWVAR 2
25368: PUSH
25369: LD_VAR 0 1
25373: NONEQUAL
25374: PUSH
25375: LD_OWVAR 2
25379: PPUSH
25380: LD_VAR 0 1
25384: PPUSH
25385: CALL_OW 81
25389: PUSH
25390: LD_INT 2
25392: EQUAL
25393: AND
25394: IFFALSE 25408
// begin side := i ;
25396: LD_ADDR_VAR 0 3
25400: PUSH
25401: LD_VAR 0 1
25405: ST_TO_ADDR
// break ;
25406: GO 25410
// end ;
25408: GO 25361
25410: POP
25411: POP
// if not side then
25412: LD_VAR 0 3
25416: NOT
25417: IFFALSE 25421
// exit ;
25419: GO 25466
// for i := 1 to tmp do
25421: LD_ADDR_VAR 0 1
25425: PUSH
25426: DOUBLE
25427: LD_INT 1
25429: DEC
25430: ST_TO_ADDR
25431: LD_VAR 0 2
25435: PUSH
25436: FOR_TO
25437: IFFALSE 25464
// if Prob ( 60 ) then
25439: LD_INT 60
25441: PPUSH
25442: CALL_OW 13
25446: IFFALSE 25462
// SetSide ( i , side ) ;
25448: LD_VAR 0 1
25452: PPUSH
25453: LD_VAR 0 3
25457: PPUSH
25458: CALL_OW 235
25462: GO 25436
25464: POP
25465: POP
// end ;
25466: PPOPN 3
25468: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25469: LD_EXP 51
25473: PUSH
25474: LD_EXP 64
25478: AND
25479: IFFALSE 25598
25481: GO 25483
25483: DISABLE
25484: LD_INT 0
25486: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25487: LD_ADDR_VAR 0 1
25491: PUSH
25492: LD_INT 22
25494: PUSH
25495: LD_OWVAR 2
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 21
25506: PUSH
25507: LD_INT 1
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 3
25516: PUSH
25517: LD_INT 23
25519: PUSH
25520: LD_INT 0
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: LIST
25535: PPUSH
25536: CALL_OW 69
25540: PUSH
25541: FOR_IN
25542: IFFALSE 25596
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25544: LD_VAR 0 1
25548: PPUSH
25549: CALL_OW 257
25553: PUSH
25554: LD_INT 1
25556: PUSH
25557: LD_INT 2
25559: PUSH
25560: LD_INT 3
25562: PUSH
25563: LD_INT 4
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: IN
25572: IFFALSE 25594
// SetClass ( un , rand ( 1 , 4 ) ) ;
25574: LD_VAR 0 1
25578: PPUSH
25579: LD_INT 1
25581: PPUSH
25582: LD_INT 4
25584: PPUSH
25585: CALL_OW 12
25589: PPUSH
25590: CALL_OW 336
25594: GO 25541
25596: POP
25597: POP
// end ;
25598: PPOPN 1
25600: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25601: LD_EXP 51
25605: PUSH
25606: LD_EXP 63
25610: AND
25611: IFFALSE 25690
25613: GO 25615
25615: DISABLE
25616: LD_INT 0
25618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25619: LD_ADDR_VAR 0 1
25623: PUSH
25624: LD_INT 22
25626: PUSH
25627: LD_OWVAR 2
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 21
25638: PUSH
25639: LD_INT 3
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PPUSH
25650: CALL_OW 69
25654: ST_TO_ADDR
// if not tmp then
25655: LD_VAR 0 1
25659: NOT
25660: IFFALSE 25664
// exit ;
25662: GO 25690
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25664: LD_VAR 0 1
25668: PUSH
25669: LD_INT 1
25671: PPUSH
25672: LD_VAR 0 1
25676: PPUSH
25677: CALL_OW 12
25681: ARRAY
25682: PPUSH
25683: LD_INT 100
25685: PPUSH
25686: CALL_OW 234
// end ;
25690: PPOPN 1
25692: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25693: LD_EXP 51
25697: PUSH
25698: LD_EXP 65
25702: AND
25703: IFFALSE 25801
25705: GO 25707
25707: DISABLE
25708: LD_INT 0
25710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25711: LD_ADDR_VAR 0 1
25715: PUSH
25716: LD_INT 22
25718: PUSH
25719: LD_OWVAR 2
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 21
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PPUSH
25742: CALL_OW 69
25746: ST_TO_ADDR
// if not tmp then
25747: LD_VAR 0 1
25751: NOT
25752: IFFALSE 25756
// exit ;
25754: GO 25801
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25756: LD_VAR 0 1
25760: PUSH
25761: LD_INT 1
25763: PPUSH
25764: LD_VAR 0 1
25768: PPUSH
25769: CALL_OW 12
25773: ARRAY
25774: PPUSH
25775: LD_INT 1
25777: PPUSH
25778: LD_INT 4
25780: PPUSH
25781: CALL_OW 12
25785: PPUSH
25786: LD_INT 3000
25788: PPUSH
25789: LD_INT 9000
25791: PPUSH
25792: CALL_OW 12
25796: PPUSH
25797: CALL_OW 492
// end ;
25801: PPOPN 1
25803: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25804: LD_EXP 51
25808: PUSH
25809: LD_EXP 66
25813: AND
25814: IFFALSE 25834
25816: GO 25818
25818: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25819: LD_INT 1
25821: PPUSH
25822: LD_OWVAR 2
25826: PPUSH
25827: LD_INT 0
25829: PPUSH
25830: CALL_OW 324
25834: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25835: LD_EXP 51
25839: PUSH
25840: LD_EXP 67
25844: AND
25845: IFFALSE 25928
25847: GO 25849
25849: DISABLE
25850: LD_INT 0
25852: PPUSH
25853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25854: LD_ADDR_VAR 0 2
25858: PUSH
25859: LD_INT 22
25861: PUSH
25862: LD_OWVAR 2
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 21
25873: PUSH
25874: LD_INT 3
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PPUSH
25885: CALL_OW 69
25889: ST_TO_ADDR
// if not tmp then
25890: LD_VAR 0 2
25894: NOT
25895: IFFALSE 25899
// exit ;
25897: GO 25928
// for i in tmp do
25899: LD_ADDR_VAR 0 1
25903: PUSH
25904: LD_VAR 0 2
25908: PUSH
25909: FOR_IN
25910: IFFALSE 25926
// SetBLevel ( i , 10 ) ;
25912: LD_VAR 0 1
25916: PPUSH
25917: LD_INT 10
25919: PPUSH
25920: CALL_OW 241
25924: GO 25909
25926: POP
25927: POP
// end ;
25928: PPOPN 2
25930: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25931: LD_EXP 51
25935: PUSH
25936: LD_EXP 68
25940: AND
25941: IFFALSE 26052
25943: GO 25945
25945: DISABLE
25946: LD_INT 0
25948: PPUSH
25949: PPUSH
25950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25951: LD_ADDR_VAR 0 3
25955: PUSH
25956: LD_INT 22
25958: PUSH
25959: LD_OWVAR 2
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 25
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PPUSH
25982: CALL_OW 69
25986: ST_TO_ADDR
// if not tmp then
25987: LD_VAR 0 3
25991: NOT
25992: IFFALSE 25996
// exit ;
25994: GO 26052
// un := tmp [ rand ( 1 , tmp ) ] ;
25996: LD_ADDR_VAR 0 2
26000: PUSH
26001: LD_VAR 0 3
26005: PUSH
26006: LD_INT 1
26008: PPUSH
26009: LD_VAR 0 3
26013: PPUSH
26014: CALL_OW 12
26018: ARRAY
26019: ST_TO_ADDR
// if Crawls ( un ) then
26020: LD_VAR 0 2
26024: PPUSH
26025: CALL_OW 318
26029: IFFALSE 26040
// ComWalk ( un ) ;
26031: LD_VAR 0 2
26035: PPUSH
26036: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26040: LD_VAR 0 2
26044: PPUSH
26045: LD_INT 5
26047: PPUSH
26048: CALL_OW 336
// end ;
26052: PPOPN 3
26054: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26055: LD_EXP 51
26059: PUSH
26060: LD_EXP 69
26064: AND
26065: PUSH
26066: LD_OWVAR 67
26070: PUSH
26071: LD_INT 4
26073: LESS
26074: AND
26075: IFFALSE 26094
26077: GO 26079
26079: DISABLE
// begin Difficulty := Difficulty + 1 ;
26080: LD_ADDR_OWVAR 67
26084: PUSH
26085: LD_OWVAR 67
26089: PUSH
26090: LD_INT 1
26092: PLUS
26093: ST_TO_ADDR
// end ;
26094: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26095: LD_EXP 51
26099: PUSH
26100: LD_EXP 70
26104: AND
26105: IFFALSE 26208
26107: GO 26109
26109: DISABLE
26110: LD_INT 0
26112: PPUSH
// begin for i := 1 to 5 do
26113: LD_ADDR_VAR 0 1
26117: PUSH
26118: DOUBLE
26119: LD_INT 1
26121: DEC
26122: ST_TO_ADDR
26123: LD_INT 5
26125: PUSH
26126: FOR_TO
26127: IFFALSE 26206
// begin uc_nation := nation_nature ;
26129: LD_ADDR_OWVAR 21
26133: PUSH
26134: LD_INT 0
26136: ST_TO_ADDR
// uc_side := 0 ;
26137: LD_ADDR_OWVAR 20
26141: PUSH
26142: LD_INT 0
26144: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26145: LD_ADDR_OWVAR 29
26149: PUSH
26150: LD_INT 12
26152: PUSH
26153: LD_INT 12
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: ST_TO_ADDR
// hc_agressivity := 20 ;
26160: LD_ADDR_OWVAR 35
26164: PUSH
26165: LD_INT 20
26167: ST_TO_ADDR
// hc_class := class_tiger ;
26168: LD_ADDR_OWVAR 28
26172: PUSH
26173: LD_INT 14
26175: ST_TO_ADDR
// hc_gallery :=  ;
26176: LD_ADDR_OWVAR 33
26180: PUSH
26181: LD_STRING 
26183: ST_TO_ADDR
// hc_name :=  ;
26184: LD_ADDR_OWVAR 26
26188: PUSH
26189: LD_STRING 
26191: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26192: CALL_OW 44
26196: PPUSH
26197: LD_INT 0
26199: PPUSH
26200: CALL_OW 51
// end ;
26204: GO 26126
26206: POP
26207: POP
// end ;
26208: PPOPN 1
26210: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26211: LD_EXP 51
26215: PUSH
26216: LD_EXP 71
26220: AND
26221: IFFALSE 26230
26223: GO 26225
26225: DISABLE
// StreamSibBomb ;
26226: CALL 26231 0 0
26230: END
// export function StreamSibBomb ; var i , x , y ; begin
26231: LD_INT 0
26233: PPUSH
26234: PPUSH
26235: PPUSH
26236: PPUSH
// result := false ;
26237: LD_ADDR_VAR 0 1
26241: PUSH
26242: LD_INT 0
26244: ST_TO_ADDR
// for i := 1 to 16 do
26245: LD_ADDR_VAR 0 2
26249: PUSH
26250: DOUBLE
26251: LD_INT 1
26253: DEC
26254: ST_TO_ADDR
26255: LD_INT 16
26257: PUSH
26258: FOR_TO
26259: IFFALSE 26458
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26261: LD_ADDR_VAR 0 3
26265: PUSH
26266: LD_INT 10
26268: PUSH
26269: LD_INT 20
26271: PUSH
26272: LD_INT 30
26274: PUSH
26275: LD_INT 40
26277: PUSH
26278: LD_INT 50
26280: PUSH
26281: LD_INT 60
26283: PUSH
26284: LD_INT 70
26286: PUSH
26287: LD_INT 80
26289: PUSH
26290: LD_INT 90
26292: PUSH
26293: LD_INT 100
26295: PUSH
26296: LD_INT 110
26298: PUSH
26299: LD_INT 120
26301: PUSH
26302: LD_INT 130
26304: PUSH
26305: LD_INT 140
26307: PUSH
26308: LD_INT 150
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: PPUSH
26331: LD_INT 15
26333: PPUSH
26334: CALL_OW 12
26338: ARRAY
26339: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26340: LD_ADDR_VAR 0 4
26344: PUSH
26345: LD_INT 10
26347: PUSH
26348: LD_INT 20
26350: PUSH
26351: LD_INT 30
26353: PUSH
26354: LD_INT 40
26356: PUSH
26357: LD_INT 50
26359: PUSH
26360: LD_INT 60
26362: PUSH
26363: LD_INT 70
26365: PUSH
26366: LD_INT 80
26368: PUSH
26369: LD_INT 90
26371: PUSH
26372: LD_INT 100
26374: PUSH
26375: LD_INT 110
26377: PUSH
26378: LD_INT 120
26380: PUSH
26381: LD_INT 130
26383: PUSH
26384: LD_INT 140
26386: PUSH
26387: LD_INT 150
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: PPUSH
26410: LD_INT 15
26412: PPUSH
26413: CALL_OW 12
26417: ARRAY
26418: ST_TO_ADDR
// if ValidHex ( x , y ) then
26419: LD_VAR 0 3
26423: PPUSH
26424: LD_VAR 0 4
26428: PPUSH
26429: CALL_OW 488
26433: IFFALSE 26456
// begin result := [ x , y ] ;
26435: LD_ADDR_VAR 0 1
26439: PUSH
26440: LD_VAR 0 3
26444: PUSH
26445: LD_VAR 0 4
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: ST_TO_ADDR
// break ;
26454: GO 26458
// end ; end ;
26456: GO 26258
26458: POP
26459: POP
// if result then
26460: LD_VAR 0 1
26464: IFFALSE 26524
// begin ToLua ( playSibBomb() ) ;
26466: LD_STRING playSibBomb()
26468: PPUSH
26469: CALL_OW 559
// wait ( 0 0$14 ) ;
26473: LD_INT 490
26475: PPUSH
26476: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26480: LD_VAR 0 1
26484: PUSH
26485: LD_INT 1
26487: ARRAY
26488: PPUSH
26489: LD_VAR 0 1
26493: PUSH
26494: LD_INT 2
26496: ARRAY
26497: PPUSH
26498: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26502: LD_VAR 0 1
26506: PUSH
26507: LD_INT 1
26509: ARRAY
26510: PPUSH
26511: LD_VAR 0 1
26515: PUSH
26516: LD_INT 2
26518: ARRAY
26519: PPUSH
26520: CALL_OW 429
// end ; end ;
26524: LD_VAR 0 1
26528: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26529: LD_EXP 51
26533: PUSH
26534: LD_EXP 73
26538: AND
26539: IFFALSE 26551
26541: GO 26543
26543: DISABLE
// YouLost (  ) ;
26544: LD_STRING 
26546: PPUSH
26547: CALL_OW 104
26551: END
// every 0 0$1 trigger StreamModeActive and sFog do
26552: LD_EXP 51
26556: PUSH
26557: LD_EXP 72
26561: AND
26562: IFFALSE 26576
26564: GO 26566
26566: DISABLE
// FogOff ( your_side ) ;
26567: LD_OWVAR 2
26571: PPUSH
26572: CALL_OW 344
26576: END
// every 0 0$1 trigger StreamModeActive and sSun do
26577: LD_EXP 51
26581: PUSH
26582: LD_EXP 74
26586: AND
26587: IFFALSE 26615
26589: GO 26591
26591: DISABLE
// begin solar_recharge_percent := 0 ;
26592: LD_ADDR_OWVAR 79
26596: PUSH
26597: LD_INT 0
26599: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26600: LD_INT 10500
26602: PPUSH
26603: CALL_OW 67
// solar_recharge_percent := 100 ;
26607: LD_ADDR_OWVAR 79
26611: PUSH
26612: LD_INT 100
26614: ST_TO_ADDR
// end ;
26615: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26616: LD_EXP 51
26620: PUSH
26621: LD_EXP 75
26625: AND
26626: IFFALSE 26865
26628: GO 26630
26630: DISABLE
26631: LD_INT 0
26633: PPUSH
26634: PPUSH
26635: PPUSH
// begin tmp := [ ] ;
26636: LD_ADDR_VAR 0 3
26640: PUSH
26641: EMPTY
26642: ST_TO_ADDR
// for i := 1 to 6 do
26643: LD_ADDR_VAR 0 1
26647: PUSH
26648: DOUBLE
26649: LD_INT 1
26651: DEC
26652: ST_TO_ADDR
26653: LD_INT 6
26655: PUSH
26656: FOR_TO
26657: IFFALSE 26762
// begin uc_nation := nation_nature ;
26659: LD_ADDR_OWVAR 21
26663: PUSH
26664: LD_INT 0
26666: ST_TO_ADDR
// uc_side := 0 ;
26667: LD_ADDR_OWVAR 20
26671: PUSH
26672: LD_INT 0
26674: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26675: LD_ADDR_OWVAR 29
26679: PUSH
26680: LD_INT 12
26682: PUSH
26683: LD_INT 12
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: ST_TO_ADDR
// hc_agressivity := 20 ;
26690: LD_ADDR_OWVAR 35
26694: PUSH
26695: LD_INT 20
26697: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26698: LD_ADDR_OWVAR 28
26702: PUSH
26703: LD_INT 17
26705: ST_TO_ADDR
// hc_gallery :=  ;
26706: LD_ADDR_OWVAR 33
26710: PUSH
26711: LD_STRING 
26713: ST_TO_ADDR
// hc_name :=  ;
26714: LD_ADDR_OWVAR 26
26718: PUSH
26719: LD_STRING 
26721: ST_TO_ADDR
// un := CreateHuman ;
26722: LD_ADDR_VAR 0 2
26726: PUSH
26727: CALL_OW 44
26731: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26732: LD_VAR 0 2
26736: PPUSH
26737: LD_INT 1
26739: PPUSH
26740: CALL_OW 51
// tmp := tmp ^ un ;
26744: LD_ADDR_VAR 0 3
26748: PUSH
26749: LD_VAR 0 3
26753: PUSH
26754: LD_VAR 0 2
26758: ADD
26759: ST_TO_ADDR
// end ;
26760: GO 26656
26762: POP
26763: POP
// repeat wait ( 0 0$1 ) ;
26764: LD_INT 35
26766: PPUSH
26767: CALL_OW 67
// for un in tmp do
26771: LD_ADDR_VAR 0 2
26775: PUSH
26776: LD_VAR 0 3
26780: PUSH
26781: FOR_IN
26782: IFFALSE 26856
// begin if IsDead ( un ) then
26784: LD_VAR 0 2
26788: PPUSH
26789: CALL_OW 301
26793: IFFALSE 26813
// begin tmp := tmp diff un ;
26795: LD_ADDR_VAR 0 3
26799: PUSH
26800: LD_VAR 0 3
26804: PUSH
26805: LD_VAR 0 2
26809: DIFF
26810: ST_TO_ADDR
// continue ;
26811: GO 26781
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26813: LD_VAR 0 2
26817: PPUSH
26818: LD_INT 3
26820: PUSH
26821: LD_INT 22
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PPUSH
26835: CALL_OW 69
26839: PPUSH
26840: LD_VAR 0 2
26844: PPUSH
26845: CALL_OW 74
26849: PPUSH
26850: CALL_OW 115
// end ;
26854: GO 26781
26856: POP
26857: POP
// until not tmp ;
26858: LD_VAR 0 3
26862: NOT
26863: IFFALSE 26764
// end ;
26865: PPOPN 3
26867: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26868: LD_EXP 51
26872: PUSH
26873: LD_EXP 76
26877: AND
26878: IFFALSE 26932
26880: GO 26882
26882: DISABLE
// begin ToLua ( displayTroll(); ) ;
26883: LD_STRING displayTroll();
26885: PPUSH
26886: CALL_OW 559
// wait ( 3 3$00 ) ;
26890: LD_INT 6300
26892: PPUSH
26893: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26897: LD_STRING hideTroll();
26899: PPUSH
26900: CALL_OW 559
// wait ( 1 1$00 ) ;
26904: LD_INT 2100
26906: PPUSH
26907: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26911: LD_STRING displayTroll();
26913: PPUSH
26914: CALL_OW 559
// wait ( 1 1$00 ) ;
26918: LD_INT 2100
26920: PPUSH
26921: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26925: LD_STRING hideTroll();
26927: PPUSH
26928: CALL_OW 559
// end ;
26932: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26933: LD_EXP 51
26937: PUSH
26938: LD_EXP 77
26942: AND
26943: IFFALSE 27006
26945: GO 26947
26947: DISABLE
26948: LD_INT 0
26950: PPUSH
// begin p := 0 ;
26951: LD_ADDR_VAR 0 1
26955: PUSH
26956: LD_INT 0
26958: ST_TO_ADDR
// repeat game_speed := 1 ;
26959: LD_ADDR_OWVAR 65
26963: PUSH
26964: LD_INT 1
26966: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26967: LD_INT 35
26969: PPUSH
26970: CALL_OW 67
// p := p + 1 ;
26974: LD_ADDR_VAR 0 1
26978: PUSH
26979: LD_VAR 0 1
26983: PUSH
26984: LD_INT 1
26986: PLUS
26987: ST_TO_ADDR
// until p >= 60 ;
26988: LD_VAR 0 1
26992: PUSH
26993: LD_INT 60
26995: GREATEREQUAL
26996: IFFALSE 26959
// game_speed := 4 ;
26998: LD_ADDR_OWVAR 65
27002: PUSH
27003: LD_INT 4
27005: ST_TO_ADDR
// end ;
27006: PPOPN 1
27008: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27009: LD_EXP 51
27013: PUSH
27014: LD_EXP 78
27018: AND
27019: IFFALSE 27165
27021: GO 27023
27023: DISABLE
27024: LD_INT 0
27026: PPUSH
27027: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27028: LD_ADDR_VAR 0 1
27032: PUSH
27033: LD_INT 22
27035: PUSH
27036: LD_OWVAR 2
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 2
27047: PUSH
27048: LD_INT 30
27050: PUSH
27051: LD_INT 0
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 30
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: LIST
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PPUSH
27077: CALL_OW 69
27081: ST_TO_ADDR
// if not depot then
27082: LD_VAR 0 1
27086: NOT
27087: IFFALSE 27091
// exit ;
27089: GO 27165
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27091: LD_ADDR_VAR 0 2
27095: PUSH
27096: LD_VAR 0 1
27100: PUSH
27101: LD_INT 1
27103: PPUSH
27104: LD_VAR 0 1
27108: PPUSH
27109: CALL_OW 12
27113: ARRAY
27114: PPUSH
27115: CALL_OW 274
27119: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27120: LD_VAR 0 2
27124: PPUSH
27125: LD_INT 1
27127: PPUSH
27128: LD_INT 0
27130: PPUSH
27131: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27135: LD_VAR 0 2
27139: PPUSH
27140: LD_INT 2
27142: PPUSH
27143: LD_INT 0
27145: PPUSH
27146: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27150: LD_VAR 0 2
27154: PPUSH
27155: LD_INT 3
27157: PPUSH
27158: LD_INT 0
27160: PPUSH
27161: CALL_OW 277
// end ;
27165: PPOPN 2
27167: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27168: LD_EXP 51
27172: PUSH
27173: LD_EXP 79
27177: AND
27178: IFFALSE 27275
27180: GO 27182
27182: DISABLE
27183: LD_INT 0
27185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27186: LD_ADDR_VAR 0 1
27190: PUSH
27191: LD_INT 22
27193: PUSH
27194: LD_OWVAR 2
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 21
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 3
27215: PUSH
27216: LD_INT 23
27218: PUSH
27219: LD_INT 0
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: PPUSH
27235: CALL_OW 69
27239: ST_TO_ADDR
// if not tmp then
27240: LD_VAR 0 1
27244: NOT
27245: IFFALSE 27249
// exit ;
27247: GO 27275
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27249: LD_VAR 0 1
27253: PUSH
27254: LD_INT 1
27256: PPUSH
27257: LD_VAR 0 1
27261: PPUSH
27262: CALL_OW 12
27266: ARRAY
27267: PPUSH
27268: LD_INT 200
27270: PPUSH
27271: CALL_OW 234
// end ;
27275: PPOPN 1
27277: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27278: LD_EXP 51
27282: PUSH
27283: LD_EXP 80
27287: AND
27288: IFFALSE 27367
27290: GO 27292
27292: DISABLE
27293: LD_INT 0
27295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27296: LD_ADDR_VAR 0 1
27300: PUSH
27301: LD_INT 22
27303: PUSH
27304: LD_OWVAR 2
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 21
27315: PUSH
27316: LD_INT 2
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PPUSH
27327: CALL_OW 69
27331: ST_TO_ADDR
// if not tmp then
27332: LD_VAR 0 1
27336: NOT
27337: IFFALSE 27341
// exit ;
27339: GO 27367
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27341: LD_VAR 0 1
27345: PUSH
27346: LD_INT 1
27348: PPUSH
27349: LD_VAR 0 1
27353: PPUSH
27354: CALL_OW 12
27358: ARRAY
27359: PPUSH
27360: LD_INT 60
27362: PPUSH
27363: CALL_OW 234
// end ;
27367: PPOPN 1
27369: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27370: LD_EXP 51
27374: PUSH
27375: LD_EXP 81
27379: AND
27380: IFFALSE 27479
27382: GO 27384
27384: DISABLE
27385: LD_INT 0
27387: PPUSH
27388: PPUSH
// begin enable ;
27389: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27390: LD_ADDR_VAR 0 1
27394: PUSH
27395: LD_INT 22
27397: PUSH
27398: LD_OWVAR 2
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 61
27409: PUSH
27410: EMPTY
27411: LIST
27412: PUSH
27413: LD_INT 33
27415: PUSH
27416: LD_INT 2
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: LIST
27427: PPUSH
27428: CALL_OW 69
27432: ST_TO_ADDR
// if not tmp then
27433: LD_VAR 0 1
27437: NOT
27438: IFFALSE 27442
// exit ;
27440: GO 27479
// for i in tmp do
27442: LD_ADDR_VAR 0 2
27446: PUSH
27447: LD_VAR 0 1
27451: PUSH
27452: FOR_IN
27453: IFFALSE 27477
// if IsControledBy ( i ) then
27455: LD_VAR 0 2
27459: PPUSH
27460: CALL_OW 312
27464: IFFALSE 27475
// ComUnlink ( i ) ;
27466: LD_VAR 0 2
27470: PPUSH
27471: CALL_OW 136
27475: GO 27452
27477: POP
27478: POP
// end ;
27479: PPOPN 2
27481: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27482: LD_EXP 51
27486: PUSH
27487: LD_EXP 82
27491: AND
27492: IFFALSE 27632
27494: GO 27496
27496: DISABLE
27497: LD_INT 0
27499: PPUSH
27500: PPUSH
// begin ToLua ( displayPowell(); ) ;
27501: LD_STRING displayPowell();
27503: PPUSH
27504: CALL_OW 559
// uc_side := 0 ;
27508: LD_ADDR_OWVAR 20
27512: PUSH
27513: LD_INT 0
27515: ST_TO_ADDR
// uc_nation := 2 ;
27516: LD_ADDR_OWVAR 21
27520: PUSH
27521: LD_INT 2
27523: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27524: LD_ADDR_OWVAR 37
27528: PUSH
27529: LD_INT 14
27531: ST_TO_ADDR
// vc_engine := engine_siberite ;
27532: LD_ADDR_OWVAR 39
27536: PUSH
27537: LD_INT 3
27539: ST_TO_ADDR
// vc_control := control_apeman ;
27540: LD_ADDR_OWVAR 38
27544: PUSH
27545: LD_INT 5
27547: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27548: LD_ADDR_OWVAR 40
27552: PUSH
27553: LD_INT 29
27555: ST_TO_ADDR
// un := CreateVehicle ;
27556: LD_ADDR_VAR 0 2
27560: PUSH
27561: CALL_OW 45
27565: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27566: LD_VAR 0 2
27570: PPUSH
27571: LD_INT 1
27573: PPUSH
27574: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27578: LD_INT 35
27580: PPUSH
27581: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27585: LD_VAR 0 2
27589: PPUSH
27590: LD_INT 22
27592: PUSH
27593: LD_OWVAR 2
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PPUSH
27602: CALL_OW 69
27606: PPUSH
27607: LD_VAR 0 2
27611: PPUSH
27612: CALL_OW 74
27616: PPUSH
27617: CALL_OW 115
// until IsDead ( un ) ;
27621: LD_VAR 0 2
27625: PPUSH
27626: CALL_OW 301
27630: IFFALSE 27578
// end ;
27632: PPOPN 2
27634: END
// every 0 0$1 trigger StreamModeActive and sStu do
27635: LD_EXP 51
27639: PUSH
27640: LD_EXP 90
27644: AND
27645: IFFALSE 27661
27647: GO 27649
27649: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27650: LD_STRING displayStucuk();
27652: PPUSH
27653: CALL_OW 559
// ResetFog ;
27657: CALL_OW 335
// end ;
27661: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27662: LD_EXP 51
27666: PUSH
27667: LD_EXP 83
27671: AND
27672: IFFALSE 27813
27674: GO 27676
27676: DISABLE
27677: LD_INT 0
27679: PPUSH
27680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27681: LD_ADDR_VAR 0 2
27685: PUSH
27686: LD_INT 22
27688: PUSH
27689: LD_OWVAR 2
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 21
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PPUSH
27712: CALL_OW 69
27716: ST_TO_ADDR
// if not tmp then
27717: LD_VAR 0 2
27721: NOT
27722: IFFALSE 27726
// exit ;
27724: GO 27813
// un := tmp [ rand ( 1 , tmp ) ] ;
27726: LD_ADDR_VAR 0 1
27730: PUSH
27731: LD_VAR 0 2
27735: PUSH
27736: LD_INT 1
27738: PPUSH
27739: LD_VAR 0 2
27743: PPUSH
27744: CALL_OW 12
27748: ARRAY
27749: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27750: LD_VAR 0 1
27754: PPUSH
27755: LD_INT 0
27757: PPUSH
27758: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27762: LD_VAR 0 1
27766: PPUSH
27767: LD_OWVAR 3
27771: PUSH
27772: LD_VAR 0 1
27776: DIFF
27777: PPUSH
27778: LD_VAR 0 1
27782: PPUSH
27783: CALL_OW 74
27787: PPUSH
27788: CALL_OW 115
// wait ( 0 0$20 ) ;
27792: LD_INT 700
27794: PPUSH
27795: CALL_OW 67
// SetSide ( un , your_side ) ;
27799: LD_VAR 0 1
27803: PPUSH
27804: LD_OWVAR 2
27808: PPUSH
27809: CALL_OW 235
// end ;
27813: PPOPN 2
27815: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27816: LD_EXP 51
27820: PUSH
27821: LD_EXP 84
27825: AND
27826: IFFALSE 27932
27828: GO 27830
27830: DISABLE
27831: LD_INT 0
27833: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27834: LD_ADDR_VAR 0 1
27838: PUSH
27839: LD_INT 22
27841: PUSH
27842: LD_OWVAR 2
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 30
27856: PUSH
27857: LD_INT 0
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 30
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: LIST
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PPUSH
27883: CALL_OW 69
27887: ST_TO_ADDR
// if not depot then
27888: LD_VAR 0 1
27892: NOT
27893: IFFALSE 27897
// exit ;
27895: GO 27932
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27897: LD_VAR 0 1
27901: PUSH
27902: LD_INT 1
27904: ARRAY
27905: PPUSH
27906: CALL_OW 250
27910: PPUSH
27911: LD_VAR 0 1
27915: PUSH
27916: LD_INT 1
27918: ARRAY
27919: PPUSH
27920: CALL_OW 251
27924: PPUSH
27925: LD_INT 70
27927: PPUSH
27928: CALL_OW 495
// end ;
27932: PPOPN 1
27934: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27935: LD_EXP 51
27939: PUSH
27940: LD_EXP 85
27944: AND
27945: IFFALSE 28156
27947: GO 27949
27949: DISABLE
27950: LD_INT 0
27952: PPUSH
27953: PPUSH
27954: PPUSH
27955: PPUSH
27956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27957: LD_ADDR_VAR 0 5
27961: PUSH
27962: LD_INT 22
27964: PUSH
27965: LD_OWVAR 2
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 21
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PPUSH
27988: CALL_OW 69
27992: ST_TO_ADDR
// if not tmp then
27993: LD_VAR 0 5
27997: NOT
27998: IFFALSE 28002
// exit ;
28000: GO 28156
// for i in tmp do
28002: LD_ADDR_VAR 0 1
28006: PUSH
28007: LD_VAR 0 5
28011: PUSH
28012: FOR_IN
28013: IFFALSE 28154
// begin d := rand ( 0 , 5 ) ;
28015: LD_ADDR_VAR 0 4
28019: PUSH
28020: LD_INT 0
28022: PPUSH
28023: LD_INT 5
28025: PPUSH
28026: CALL_OW 12
28030: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28031: LD_ADDR_VAR 0 2
28035: PUSH
28036: LD_VAR 0 1
28040: PPUSH
28041: CALL_OW 250
28045: PPUSH
28046: LD_VAR 0 4
28050: PPUSH
28051: LD_INT 3
28053: PPUSH
28054: LD_INT 12
28056: PPUSH
28057: CALL_OW 12
28061: PPUSH
28062: CALL_OW 272
28066: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28067: LD_ADDR_VAR 0 3
28071: PUSH
28072: LD_VAR 0 1
28076: PPUSH
28077: CALL_OW 251
28081: PPUSH
28082: LD_VAR 0 4
28086: PPUSH
28087: LD_INT 3
28089: PPUSH
28090: LD_INT 12
28092: PPUSH
28093: CALL_OW 12
28097: PPUSH
28098: CALL_OW 273
28102: ST_TO_ADDR
// if ValidHex ( x , y ) then
28103: LD_VAR 0 2
28107: PPUSH
28108: LD_VAR 0 3
28112: PPUSH
28113: CALL_OW 488
28117: IFFALSE 28152
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28119: LD_VAR 0 1
28123: PPUSH
28124: LD_VAR 0 2
28128: PPUSH
28129: LD_VAR 0 3
28133: PPUSH
28134: LD_INT 3
28136: PPUSH
28137: LD_INT 6
28139: PPUSH
28140: CALL_OW 12
28144: PPUSH
28145: LD_INT 1
28147: PPUSH
28148: CALL_OW 483
// end ;
28152: GO 28012
28154: POP
28155: POP
// end ;
28156: PPOPN 5
28158: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28159: LD_EXP 51
28163: PUSH
28164: LD_EXP 86
28168: AND
28169: IFFALSE 28263
28171: GO 28173
28173: DISABLE
28174: LD_INT 0
28176: PPUSH
28177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28178: LD_ADDR_VAR 0 2
28182: PUSH
28183: LD_INT 22
28185: PUSH
28186: LD_OWVAR 2
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 32
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 21
28207: PUSH
28208: LD_INT 2
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: PPUSH
28220: CALL_OW 69
28224: ST_TO_ADDR
// if not tmp then
28225: LD_VAR 0 2
28229: NOT
28230: IFFALSE 28234
// exit ;
28232: GO 28263
// for i in tmp do
28234: LD_ADDR_VAR 0 1
28238: PUSH
28239: LD_VAR 0 2
28243: PUSH
28244: FOR_IN
28245: IFFALSE 28261
// SetFuel ( i , 0 ) ;
28247: LD_VAR 0 1
28251: PPUSH
28252: LD_INT 0
28254: PPUSH
28255: CALL_OW 240
28259: GO 28244
28261: POP
28262: POP
// end ;
28263: PPOPN 2
28265: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28266: LD_EXP 51
28270: PUSH
28271: LD_EXP 87
28275: AND
28276: IFFALSE 28342
28278: GO 28280
28280: DISABLE
28281: LD_INT 0
28283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28284: LD_ADDR_VAR 0 1
28288: PUSH
28289: LD_INT 22
28291: PUSH
28292: LD_OWVAR 2
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 30
28303: PUSH
28304: LD_INT 29
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PPUSH
28315: CALL_OW 69
28319: ST_TO_ADDR
// if not tmp then
28320: LD_VAR 0 1
28324: NOT
28325: IFFALSE 28329
// exit ;
28327: GO 28342
// DestroyUnit ( tmp [ 1 ] ) ;
28329: LD_VAR 0 1
28333: PUSH
28334: LD_INT 1
28336: ARRAY
28337: PPUSH
28338: CALL_OW 65
// end ;
28342: PPOPN 1
28344: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28345: LD_EXP 51
28349: PUSH
28350: LD_EXP 89
28354: AND
28355: IFFALSE 28484
28357: GO 28359
28359: DISABLE
28360: LD_INT 0
28362: PPUSH
// begin uc_side := 0 ;
28363: LD_ADDR_OWVAR 20
28367: PUSH
28368: LD_INT 0
28370: ST_TO_ADDR
// uc_nation := nation_arabian ;
28371: LD_ADDR_OWVAR 21
28375: PUSH
28376: LD_INT 2
28378: ST_TO_ADDR
// hc_gallery :=  ;
28379: LD_ADDR_OWVAR 33
28383: PUSH
28384: LD_STRING 
28386: ST_TO_ADDR
// hc_name :=  ;
28387: LD_ADDR_OWVAR 26
28391: PUSH
28392: LD_STRING 
28394: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28395: LD_INT 1
28397: PPUSH
28398: LD_INT 11
28400: PPUSH
28401: LD_INT 10
28403: PPUSH
28404: CALL_OW 380
// un := CreateHuman ;
28408: LD_ADDR_VAR 0 1
28412: PUSH
28413: CALL_OW 44
28417: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28418: LD_VAR 0 1
28422: PPUSH
28423: LD_INT 1
28425: PPUSH
28426: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28430: LD_INT 35
28432: PPUSH
28433: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28437: LD_VAR 0 1
28441: PPUSH
28442: LD_INT 22
28444: PUSH
28445: LD_OWVAR 2
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PPUSH
28454: CALL_OW 69
28458: PPUSH
28459: LD_VAR 0 1
28463: PPUSH
28464: CALL_OW 74
28468: PPUSH
28469: CALL_OW 115
// until IsDead ( un ) ;
28473: LD_VAR 0 1
28477: PPUSH
28478: CALL_OW 301
28482: IFFALSE 28430
// end ;
28484: PPOPN 1
28486: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28487: LD_EXP 51
28491: PUSH
28492: LD_EXP 91
28496: AND
28497: IFFALSE 28509
28499: GO 28501
28501: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28502: LD_STRING earthquake(getX(game), 0, 32)
28504: PPUSH
28505: CALL_OW 559
28509: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28510: LD_EXP 51
28514: PUSH
28515: LD_EXP 92
28519: AND
28520: IFFALSE 28611
28522: GO 28524
28524: DISABLE
28525: LD_INT 0
28527: PPUSH
// begin enable ;
28528: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28529: LD_ADDR_VAR 0 1
28533: PUSH
28534: LD_INT 22
28536: PUSH
28537: LD_OWVAR 2
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 21
28548: PUSH
28549: LD_INT 2
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 33
28558: PUSH
28559: LD_INT 3
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: LIST
28570: PPUSH
28571: CALL_OW 69
28575: ST_TO_ADDR
// if not tmp then
28576: LD_VAR 0 1
28580: NOT
28581: IFFALSE 28585
// exit ;
28583: GO 28611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28585: LD_VAR 0 1
28589: PUSH
28590: LD_INT 1
28592: PPUSH
28593: LD_VAR 0 1
28597: PPUSH
28598: CALL_OW 12
28602: ARRAY
28603: PPUSH
28604: LD_INT 1
28606: PPUSH
28607: CALL_OW 234
// end ;
28611: PPOPN 1
28613: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28614: LD_EXP 51
28618: PUSH
28619: LD_EXP 93
28623: AND
28624: IFFALSE 28765
28626: GO 28628
28628: DISABLE
28629: LD_INT 0
28631: PPUSH
28632: PPUSH
28633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28634: LD_ADDR_VAR 0 3
28638: PUSH
28639: LD_INT 22
28641: PUSH
28642: LD_OWVAR 2
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 25
28653: PUSH
28654: LD_INT 1
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PPUSH
28665: CALL_OW 69
28669: ST_TO_ADDR
// if not tmp then
28670: LD_VAR 0 3
28674: NOT
28675: IFFALSE 28679
// exit ;
28677: GO 28765
// un := tmp [ rand ( 1 , tmp ) ] ;
28679: LD_ADDR_VAR 0 2
28683: PUSH
28684: LD_VAR 0 3
28688: PUSH
28689: LD_INT 1
28691: PPUSH
28692: LD_VAR 0 3
28696: PPUSH
28697: CALL_OW 12
28701: ARRAY
28702: ST_TO_ADDR
// if Crawls ( un ) then
28703: LD_VAR 0 2
28707: PPUSH
28708: CALL_OW 318
28712: IFFALSE 28723
// ComWalk ( un ) ;
28714: LD_VAR 0 2
28718: PPUSH
28719: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28723: LD_VAR 0 2
28727: PPUSH
28728: LD_INT 9
28730: PPUSH
28731: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28735: LD_INT 28
28737: PPUSH
28738: LD_OWVAR 2
28742: PPUSH
28743: LD_INT 2
28745: PPUSH
28746: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28750: LD_INT 29
28752: PPUSH
28753: LD_OWVAR 2
28757: PPUSH
28758: LD_INT 2
28760: PPUSH
28761: CALL_OW 322
// end ;
28765: PPOPN 3
28767: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28768: LD_EXP 51
28772: PUSH
28773: LD_EXP 94
28777: AND
28778: IFFALSE 28889
28780: GO 28782
28782: DISABLE
28783: LD_INT 0
28785: PPUSH
28786: PPUSH
28787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28788: LD_ADDR_VAR 0 3
28792: PUSH
28793: LD_INT 22
28795: PUSH
28796: LD_OWVAR 2
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 25
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PPUSH
28819: CALL_OW 69
28823: ST_TO_ADDR
// if not tmp then
28824: LD_VAR 0 3
28828: NOT
28829: IFFALSE 28833
// exit ;
28831: GO 28889
// un := tmp [ rand ( 1 , tmp ) ] ;
28833: LD_ADDR_VAR 0 2
28837: PUSH
28838: LD_VAR 0 3
28842: PUSH
28843: LD_INT 1
28845: PPUSH
28846: LD_VAR 0 3
28850: PPUSH
28851: CALL_OW 12
28855: ARRAY
28856: ST_TO_ADDR
// if Crawls ( un ) then
28857: LD_VAR 0 2
28861: PPUSH
28862: CALL_OW 318
28866: IFFALSE 28877
// ComWalk ( un ) ;
28868: LD_VAR 0 2
28872: PPUSH
28873: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28877: LD_VAR 0 2
28881: PPUSH
28882: LD_INT 8
28884: PPUSH
28885: CALL_OW 336
// end ;
28889: PPOPN 3
28891: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28892: LD_EXP 51
28896: PUSH
28897: LD_EXP 95
28901: AND
28902: IFFALSE 29046
28904: GO 28906
28906: DISABLE
28907: LD_INT 0
28909: PPUSH
28910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28911: LD_ADDR_VAR 0 2
28915: PUSH
28916: LD_INT 22
28918: PUSH
28919: LD_OWVAR 2
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 21
28930: PUSH
28931: LD_INT 2
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 2
28940: PUSH
28941: LD_INT 34
28943: PUSH
28944: LD_INT 12
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 34
28953: PUSH
28954: LD_INT 51
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 34
28963: PUSH
28964: LD_INT 32
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: LIST
28981: PPUSH
28982: CALL_OW 69
28986: ST_TO_ADDR
// if not tmp then
28987: LD_VAR 0 2
28991: NOT
28992: IFFALSE 28996
// exit ;
28994: GO 29046
// for i in tmp do
28996: LD_ADDR_VAR 0 1
29000: PUSH
29001: LD_VAR 0 2
29005: PUSH
29006: FOR_IN
29007: IFFALSE 29044
// if GetCargo ( i , mat_artifact ) = 0 then
29009: LD_VAR 0 1
29013: PPUSH
29014: LD_INT 4
29016: PPUSH
29017: CALL_OW 289
29021: PUSH
29022: LD_INT 0
29024: EQUAL
29025: IFFALSE 29042
// SetCargo ( i , mat_siberit , 100 ) ;
29027: LD_VAR 0 1
29031: PPUSH
29032: LD_INT 3
29034: PPUSH
29035: LD_INT 100
29037: PPUSH
29038: CALL_OW 290
29042: GO 29006
29044: POP
29045: POP
// end ;
29046: PPOPN 2
29048: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29049: LD_EXP 51
29053: PUSH
29054: LD_EXP 96
29058: AND
29059: IFFALSE 29242
29061: GO 29063
29063: DISABLE
29064: LD_INT 0
29066: PPUSH
29067: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29068: LD_ADDR_VAR 0 2
29072: PUSH
29073: LD_INT 22
29075: PUSH
29076: LD_OWVAR 2
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PPUSH
29085: CALL_OW 69
29089: ST_TO_ADDR
// if not tmp then
29090: LD_VAR 0 2
29094: NOT
29095: IFFALSE 29099
// exit ;
29097: GO 29242
// for i := 1 to 2 do
29099: LD_ADDR_VAR 0 1
29103: PUSH
29104: DOUBLE
29105: LD_INT 1
29107: DEC
29108: ST_TO_ADDR
29109: LD_INT 2
29111: PUSH
29112: FOR_TO
29113: IFFALSE 29240
// begin uc_side := your_side ;
29115: LD_ADDR_OWVAR 20
29119: PUSH
29120: LD_OWVAR 2
29124: ST_TO_ADDR
// uc_nation := nation_american ;
29125: LD_ADDR_OWVAR 21
29129: PUSH
29130: LD_INT 1
29132: ST_TO_ADDR
// vc_chassis := us_morphling ;
29133: LD_ADDR_OWVAR 37
29137: PUSH
29138: LD_INT 5
29140: ST_TO_ADDR
// vc_engine := engine_siberite ;
29141: LD_ADDR_OWVAR 39
29145: PUSH
29146: LD_INT 3
29148: ST_TO_ADDR
// vc_control := control_computer ;
29149: LD_ADDR_OWVAR 38
29153: PUSH
29154: LD_INT 3
29156: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29157: LD_ADDR_OWVAR 40
29161: PUSH
29162: LD_INT 10
29164: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29165: LD_VAR 0 2
29169: PUSH
29170: LD_INT 1
29172: ARRAY
29173: PPUSH
29174: CALL_OW 310
29178: NOT
29179: IFFALSE 29226
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29181: CALL_OW 45
29185: PPUSH
29186: LD_VAR 0 2
29190: PUSH
29191: LD_INT 1
29193: ARRAY
29194: PPUSH
29195: CALL_OW 250
29199: PPUSH
29200: LD_VAR 0 2
29204: PUSH
29205: LD_INT 1
29207: ARRAY
29208: PPUSH
29209: CALL_OW 251
29213: PPUSH
29214: LD_INT 12
29216: PPUSH
29217: LD_INT 1
29219: PPUSH
29220: CALL_OW 50
29224: GO 29238
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29226: CALL_OW 45
29230: PPUSH
29231: LD_INT 1
29233: PPUSH
29234: CALL_OW 51
// end ;
29238: GO 29112
29240: POP
29241: POP
// end ;
29242: PPOPN 2
29244: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29245: LD_EXP 51
29249: PUSH
29250: LD_EXP 97
29254: AND
29255: IFFALSE 29477
29257: GO 29259
29259: DISABLE
29260: LD_INT 0
29262: PPUSH
29263: PPUSH
29264: PPUSH
29265: PPUSH
29266: PPUSH
29267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29268: LD_ADDR_VAR 0 6
29272: PUSH
29273: LD_INT 22
29275: PUSH
29276: LD_OWVAR 2
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 21
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 3
29297: PUSH
29298: LD_INT 23
29300: PUSH
29301: LD_INT 0
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: LIST
29316: PPUSH
29317: CALL_OW 69
29321: ST_TO_ADDR
// if not tmp then
29322: LD_VAR 0 6
29326: NOT
29327: IFFALSE 29331
// exit ;
29329: GO 29477
// s1 := rand ( 1 , 4 ) ;
29331: LD_ADDR_VAR 0 2
29335: PUSH
29336: LD_INT 1
29338: PPUSH
29339: LD_INT 4
29341: PPUSH
29342: CALL_OW 12
29346: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29347: LD_ADDR_VAR 0 4
29351: PUSH
29352: LD_VAR 0 6
29356: PUSH
29357: LD_INT 1
29359: ARRAY
29360: PPUSH
29361: LD_VAR 0 2
29365: PPUSH
29366: CALL_OW 259
29370: ST_TO_ADDR
// if s1 = 1 then
29371: LD_VAR 0 2
29375: PUSH
29376: LD_INT 1
29378: EQUAL
29379: IFFALSE 29399
// s2 := rand ( 2 , 4 ) else
29381: LD_ADDR_VAR 0 3
29385: PUSH
29386: LD_INT 2
29388: PPUSH
29389: LD_INT 4
29391: PPUSH
29392: CALL_OW 12
29396: ST_TO_ADDR
29397: GO 29407
// s2 := 1 ;
29399: LD_ADDR_VAR 0 3
29403: PUSH
29404: LD_INT 1
29406: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29407: LD_ADDR_VAR 0 5
29411: PUSH
29412: LD_VAR 0 6
29416: PUSH
29417: LD_INT 1
29419: ARRAY
29420: PPUSH
29421: LD_VAR 0 3
29425: PPUSH
29426: CALL_OW 259
29430: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29431: LD_VAR 0 6
29435: PUSH
29436: LD_INT 1
29438: ARRAY
29439: PPUSH
29440: LD_VAR 0 2
29444: PPUSH
29445: LD_VAR 0 5
29449: PPUSH
29450: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29454: LD_VAR 0 6
29458: PUSH
29459: LD_INT 1
29461: ARRAY
29462: PPUSH
29463: LD_VAR 0 3
29467: PPUSH
29468: LD_VAR 0 4
29472: PPUSH
29473: CALL_OW 237
// end ;
29477: PPOPN 6
29479: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29480: LD_EXP 51
29484: PUSH
29485: LD_EXP 98
29489: AND
29490: IFFALSE 29569
29492: GO 29494
29494: DISABLE
29495: LD_INT 0
29497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29498: LD_ADDR_VAR 0 1
29502: PUSH
29503: LD_INT 22
29505: PUSH
29506: LD_OWVAR 2
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 30
29517: PUSH
29518: LD_INT 3
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PPUSH
29529: CALL_OW 69
29533: ST_TO_ADDR
// if not tmp then
29534: LD_VAR 0 1
29538: NOT
29539: IFFALSE 29543
// exit ;
29541: GO 29569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29543: LD_VAR 0 1
29547: PUSH
29548: LD_INT 1
29550: PPUSH
29551: LD_VAR 0 1
29555: PPUSH
29556: CALL_OW 12
29560: ARRAY
29561: PPUSH
29562: LD_INT 1
29564: PPUSH
29565: CALL_OW 234
// end ;
29569: PPOPN 1
29571: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29572: LD_EXP 51
29576: PUSH
29577: LD_EXP 99
29581: AND
29582: IFFALSE 29694
29584: GO 29586
29586: DISABLE
29587: LD_INT 0
29589: PPUSH
29590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29591: LD_ADDR_VAR 0 2
29595: PUSH
29596: LD_INT 22
29598: PUSH
29599: LD_OWVAR 2
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 2
29610: PUSH
29611: LD_INT 30
29613: PUSH
29614: LD_INT 27
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 30
29623: PUSH
29624: LD_INT 26
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 30
29633: PUSH
29634: LD_INT 28
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PPUSH
29651: CALL_OW 69
29655: ST_TO_ADDR
// if not tmp then
29656: LD_VAR 0 2
29660: NOT
29661: IFFALSE 29665
// exit ;
29663: GO 29694
// for i in tmp do
29665: LD_ADDR_VAR 0 1
29669: PUSH
29670: LD_VAR 0 2
29674: PUSH
29675: FOR_IN
29676: IFFALSE 29692
// SetLives ( i , 1 ) ;
29678: LD_VAR 0 1
29682: PPUSH
29683: LD_INT 1
29685: PPUSH
29686: CALL_OW 234
29690: GO 29675
29692: POP
29693: POP
// end ;
29694: PPOPN 2
29696: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29697: LD_EXP 51
29701: PUSH
29702: LD_EXP 100
29706: AND
29707: IFFALSE 29994
29709: GO 29711
29711: DISABLE
29712: LD_INT 0
29714: PPUSH
29715: PPUSH
29716: PPUSH
// begin i := rand ( 1 , 7 ) ;
29717: LD_ADDR_VAR 0 1
29721: PUSH
29722: LD_INT 1
29724: PPUSH
29725: LD_INT 7
29727: PPUSH
29728: CALL_OW 12
29732: ST_TO_ADDR
// case i of 1 :
29733: LD_VAR 0 1
29737: PUSH
29738: LD_INT 1
29740: DOUBLE
29741: EQUAL
29742: IFTRUE 29746
29744: GO 29756
29746: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29747: LD_STRING earthquake(getX(game), 0, 32)
29749: PPUSH
29750: CALL_OW 559
29754: GO 29994
29756: LD_INT 2
29758: DOUBLE
29759: EQUAL
29760: IFTRUE 29764
29762: GO 29778
29764: POP
// begin ToLua ( displayStucuk(); ) ;
29765: LD_STRING displayStucuk();
29767: PPUSH
29768: CALL_OW 559
// ResetFog ;
29772: CALL_OW 335
// end ; 3 :
29776: GO 29994
29778: LD_INT 3
29780: DOUBLE
29781: EQUAL
29782: IFTRUE 29786
29784: GO 29890
29786: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29787: LD_ADDR_VAR 0 2
29791: PUSH
29792: LD_INT 22
29794: PUSH
29795: LD_OWVAR 2
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 25
29806: PUSH
29807: LD_INT 1
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PPUSH
29818: CALL_OW 69
29822: ST_TO_ADDR
// if not tmp then
29823: LD_VAR 0 2
29827: NOT
29828: IFFALSE 29832
// exit ;
29830: GO 29994
// un := tmp [ rand ( 1 , tmp ) ] ;
29832: LD_ADDR_VAR 0 3
29836: PUSH
29837: LD_VAR 0 2
29841: PUSH
29842: LD_INT 1
29844: PPUSH
29845: LD_VAR 0 2
29849: PPUSH
29850: CALL_OW 12
29854: ARRAY
29855: ST_TO_ADDR
// if Crawls ( un ) then
29856: LD_VAR 0 3
29860: PPUSH
29861: CALL_OW 318
29865: IFFALSE 29876
// ComWalk ( un ) ;
29867: LD_VAR 0 3
29871: PPUSH
29872: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29876: LD_VAR 0 3
29880: PPUSH
29881: LD_INT 8
29883: PPUSH
29884: CALL_OW 336
// end ; 4 :
29888: GO 29994
29890: LD_INT 4
29892: DOUBLE
29893: EQUAL
29894: IFTRUE 29898
29896: GO 29972
29898: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29899: LD_ADDR_VAR 0 2
29903: PUSH
29904: LD_INT 22
29906: PUSH
29907: LD_OWVAR 2
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 30
29918: PUSH
29919: LD_INT 29
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PPUSH
29930: CALL_OW 69
29934: ST_TO_ADDR
// if not tmp then
29935: LD_VAR 0 2
29939: NOT
29940: IFFALSE 29944
// exit ;
29942: GO 29994
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29944: LD_VAR 0 2
29948: PUSH
29949: LD_INT 1
29951: ARRAY
29952: PPUSH
29953: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29957: LD_VAR 0 2
29961: PUSH
29962: LD_INT 1
29964: ARRAY
29965: PPUSH
29966: CALL_OW 65
// end ; 5 .. 7 :
29970: GO 29994
29972: LD_INT 5
29974: DOUBLE
29975: GREATEREQUAL
29976: IFFALSE 29984
29978: LD_INT 7
29980: DOUBLE
29981: LESSEQUAL
29982: IFTRUE 29986
29984: GO 29993
29986: POP
// StreamSibBomb ; end ;
29987: CALL 26231 0 0
29991: GO 29994
29993: POP
// end ;
29994: PPOPN 3
29996: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29997: LD_EXP 51
30001: PUSH
30002: LD_EXP 101
30006: AND
30007: IFFALSE 30163
30009: GO 30011
30011: DISABLE
30012: LD_INT 0
30014: PPUSH
30015: PPUSH
30016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30017: LD_ADDR_VAR 0 2
30021: PUSH
30022: LD_INT 81
30024: PUSH
30025: LD_OWVAR 2
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 2
30036: PUSH
30037: LD_INT 21
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 21
30049: PUSH
30050: LD_INT 2
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: LIST
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PPUSH
30066: CALL_OW 69
30070: ST_TO_ADDR
// if not tmp then
30071: LD_VAR 0 2
30075: NOT
30076: IFFALSE 30080
// exit ;
30078: GO 30163
// p := 0 ;
30080: LD_ADDR_VAR 0 3
30084: PUSH
30085: LD_INT 0
30087: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30088: LD_INT 35
30090: PPUSH
30091: CALL_OW 67
// p := p + 1 ;
30095: LD_ADDR_VAR 0 3
30099: PUSH
30100: LD_VAR 0 3
30104: PUSH
30105: LD_INT 1
30107: PLUS
30108: ST_TO_ADDR
// for i in tmp do
30109: LD_ADDR_VAR 0 1
30113: PUSH
30114: LD_VAR 0 2
30118: PUSH
30119: FOR_IN
30120: IFFALSE 30151
// if GetLives ( i ) < 1000 then
30122: LD_VAR 0 1
30126: PPUSH
30127: CALL_OW 256
30131: PUSH
30132: LD_INT 1000
30134: LESS
30135: IFFALSE 30149
// SetLives ( i , 1000 ) ;
30137: LD_VAR 0 1
30141: PPUSH
30142: LD_INT 1000
30144: PPUSH
30145: CALL_OW 234
30149: GO 30119
30151: POP
30152: POP
// until p > 20 ;
30153: LD_VAR 0 3
30157: PUSH
30158: LD_INT 20
30160: GREATER
30161: IFFALSE 30088
// end ;
30163: PPOPN 3
30165: END
// every 0 0$1 trigger StreamModeActive and sTime do
30166: LD_EXP 51
30170: PUSH
30171: LD_EXP 102
30175: AND
30176: IFFALSE 30211
30178: GO 30180
30180: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30181: LD_INT 28
30183: PPUSH
30184: LD_OWVAR 2
30188: PPUSH
30189: LD_INT 2
30191: PPUSH
30192: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30196: LD_INT 30
30198: PPUSH
30199: LD_OWVAR 2
30203: PPUSH
30204: LD_INT 2
30206: PPUSH
30207: CALL_OW 322
// end ;
30211: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30212: LD_EXP 51
30216: PUSH
30217: LD_EXP 103
30221: AND
30222: IFFALSE 30343
30224: GO 30226
30226: DISABLE
30227: LD_INT 0
30229: PPUSH
30230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30231: LD_ADDR_VAR 0 2
30235: PUSH
30236: LD_INT 22
30238: PUSH
30239: LD_OWVAR 2
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 21
30250: PUSH
30251: LD_INT 1
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 3
30260: PUSH
30261: LD_INT 23
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: LIST
30279: PPUSH
30280: CALL_OW 69
30284: ST_TO_ADDR
// if not tmp then
30285: LD_VAR 0 2
30289: NOT
30290: IFFALSE 30294
// exit ;
30292: GO 30343
// for i in tmp do
30294: LD_ADDR_VAR 0 1
30298: PUSH
30299: LD_VAR 0 2
30303: PUSH
30304: FOR_IN
30305: IFFALSE 30341
// begin if Crawls ( i ) then
30307: LD_VAR 0 1
30311: PPUSH
30312: CALL_OW 318
30316: IFFALSE 30327
// ComWalk ( i ) ;
30318: LD_VAR 0 1
30322: PPUSH
30323: CALL_OW 138
// SetClass ( i , 2 ) ;
30327: LD_VAR 0 1
30331: PPUSH
30332: LD_INT 2
30334: PPUSH
30335: CALL_OW 336
// end ;
30339: GO 30304
30341: POP
30342: POP
// end ;
30343: PPOPN 2
30345: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30346: LD_EXP 51
30350: PUSH
30351: LD_EXP 104
30355: AND
30356: IFFALSE 30644
30358: GO 30360
30360: DISABLE
30361: LD_INT 0
30363: PPUSH
30364: PPUSH
30365: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30366: LD_OWVAR 2
30370: PPUSH
30371: LD_INT 9
30373: PPUSH
30374: LD_INT 1
30376: PPUSH
30377: LD_INT 1
30379: PPUSH
30380: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30384: LD_INT 9
30386: PPUSH
30387: LD_OWVAR 2
30391: PPUSH
30392: CALL_OW 343
// uc_side := 9 ;
30396: LD_ADDR_OWVAR 20
30400: PUSH
30401: LD_INT 9
30403: ST_TO_ADDR
// uc_nation := 2 ;
30404: LD_ADDR_OWVAR 21
30408: PUSH
30409: LD_INT 2
30411: ST_TO_ADDR
// hc_name := Dark Warrior ;
30412: LD_ADDR_OWVAR 26
30416: PUSH
30417: LD_STRING Dark Warrior
30419: ST_TO_ADDR
// hc_gallery :=  ;
30420: LD_ADDR_OWVAR 33
30424: PUSH
30425: LD_STRING 
30427: ST_TO_ADDR
// hc_noskilllimit := true ;
30428: LD_ADDR_OWVAR 76
30432: PUSH
30433: LD_INT 1
30435: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30436: LD_ADDR_OWVAR 31
30440: PUSH
30441: LD_INT 30
30443: PUSH
30444: LD_INT 30
30446: PUSH
30447: LD_INT 30
30449: PUSH
30450: LD_INT 30
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: ST_TO_ADDR
// un := CreateHuman ;
30459: LD_ADDR_VAR 0 3
30463: PUSH
30464: CALL_OW 44
30468: ST_TO_ADDR
// hc_noskilllimit := false ;
30469: LD_ADDR_OWVAR 76
30473: PUSH
30474: LD_INT 0
30476: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30477: LD_VAR 0 3
30481: PPUSH
30482: LD_INT 1
30484: PPUSH
30485: CALL_OW 51
// ToLua ( playRanger() ) ;
30489: LD_STRING playRanger()
30491: PPUSH
30492: CALL_OW 559
// p := 0 ;
30496: LD_ADDR_VAR 0 2
30500: PUSH
30501: LD_INT 0
30503: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30504: LD_INT 35
30506: PPUSH
30507: CALL_OW 67
// p := p + 1 ;
30511: LD_ADDR_VAR 0 2
30515: PUSH
30516: LD_VAR 0 2
30520: PUSH
30521: LD_INT 1
30523: PLUS
30524: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30525: LD_VAR 0 3
30529: PPUSH
30530: CALL_OW 256
30534: PUSH
30535: LD_INT 1000
30537: LESS
30538: IFFALSE 30552
// SetLives ( un , 1000 ) ;
30540: LD_VAR 0 3
30544: PPUSH
30545: LD_INT 1000
30547: PPUSH
30548: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30552: LD_VAR 0 3
30556: PPUSH
30557: LD_INT 81
30559: PUSH
30560: LD_OWVAR 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 91
30571: PUSH
30572: LD_VAR 0 3
30576: PUSH
30577: LD_INT 30
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: LIST
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PPUSH
30589: CALL_OW 69
30593: PPUSH
30594: LD_VAR 0 3
30598: PPUSH
30599: CALL_OW 74
30603: PPUSH
30604: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
30608: LD_VAR 0 2
30612: PUSH
30613: LD_INT 80
30615: GREATER
30616: PUSH
30617: LD_VAR 0 3
30621: PPUSH
30622: CALL_OW 301
30626: OR
30627: IFFALSE 30504
// if un then
30629: LD_VAR 0 3
30633: IFFALSE 30644
// RemoveUnit ( un ) ;
30635: LD_VAR 0 3
30639: PPUSH
30640: CALL_OW 64
// end ;
30644: PPOPN 3
30646: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30647: LD_EXP 105
30651: IFFALSE 30767
30653: GO 30655
30655: DISABLE
30656: LD_INT 0
30658: PPUSH
30659: PPUSH
30660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30661: LD_ADDR_VAR 0 2
30665: PUSH
30666: LD_INT 81
30668: PUSH
30669: LD_OWVAR 2
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 21
30680: PUSH
30681: LD_INT 1
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PPUSH
30692: CALL_OW 69
30696: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30697: LD_STRING playComputer()
30699: PPUSH
30700: CALL_OW 559
// if not tmp then
30704: LD_VAR 0 2
30708: NOT
30709: IFFALSE 30713
// exit ;
30711: GO 30767
// for i in tmp do
30713: LD_ADDR_VAR 0 1
30717: PUSH
30718: LD_VAR 0 2
30722: PUSH
30723: FOR_IN
30724: IFFALSE 30765
// for j := 1 to 4 do
30726: LD_ADDR_VAR 0 3
30730: PUSH
30731: DOUBLE
30732: LD_INT 1
30734: DEC
30735: ST_TO_ADDR
30736: LD_INT 4
30738: PUSH
30739: FOR_TO
30740: IFFALSE 30761
// SetSkill ( i , j , 10 ) ;
30742: LD_VAR 0 1
30746: PPUSH
30747: LD_VAR 0 3
30751: PPUSH
30752: LD_INT 10
30754: PPUSH
30755: CALL_OW 237
30759: GO 30739
30761: POP
30762: POP
30763: GO 30723
30765: POP
30766: POP
// end ;
30767: PPOPN 3
30769: END
// every 0 0$1 trigger s30 do var i , tmp ;
30770: LD_EXP 106
30774: IFFALSE 30843
30776: GO 30778
30778: DISABLE
30779: LD_INT 0
30781: PPUSH
30782: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30783: LD_ADDR_VAR 0 2
30787: PUSH
30788: LD_INT 22
30790: PUSH
30791: LD_OWVAR 2
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PPUSH
30800: CALL_OW 69
30804: ST_TO_ADDR
// if not tmp then
30805: LD_VAR 0 2
30809: NOT
30810: IFFALSE 30814
// exit ;
30812: GO 30843
// for i in tmp do
30814: LD_ADDR_VAR 0 1
30818: PUSH
30819: LD_VAR 0 2
30823: PUSH
30824: FOR_IN
30825: IFFALSE 30841
// SetLives ( i , 300 ) ;
30827: LD_VAR 0 1
30831: PPUSH
30832: LD_INT 300
30834: PPUSH
30835: CALL_OW 234
30839: GO 30824
30841: POP
30842: POP
// end ;
30843: PPOPN 2
30845: END
// every 0 0$1 trigger s60 do var i , tmp ;
30846: LD_EXP 107
30850: IFFALSE 30919
30852: GO 30854
30854: DISABLE
30855: LD_INT 0
30857: PPUSH
30858: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30859: LD_ADDR_VAR 0 2
30863: PUSH
30864: LD_INT 22
30866: PUSH
30867: LD_OWVAR 2
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PPUSH
30876: CALL_OW 69
30880: ST_TO_ADDR
// if not tmp then
30881: LD_VAR 0 2
30885: NOT
30886: IFFALSE 30890
// exit ;
30888: GO 30919
// for i in tmp do
30890: LD_ADDR_VAR 0 1
30894: PUSH
30895: LD_VAR 0 2
30899: PUSH
30900: FOR_IN
30901: IFFALSE 30917
// SetLives ( i , 600 ) ;
30903: LD_VAR 0 1
30907: PPUSH
30908: LD_INT 600
30910: PPUSH
30911: CALL_OW 234
30915: GO 30900
30917: POP
30918: POP
// end ;
30919: PPOPN 2
30921: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30922: LD_INT 0
30924: PPUSH
// case cmd of 301 :
30925: LD_VAR 0 1
30929: PUSH
30930: LD_INT 301
30932: DOUBLE
30933: EQUAL
30934: IFTRUE 30938
30936: GO 30970
30938: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30939: LD_VAR 0 6
30943: PPUSH
30944: LD_VAR 0 7
30948: PPUSH
30949: LD_VAR 0 8
30953: PPUSH
30954: LD_VAR 0 4
30958: PPUSH
30959: LD_VAR 0 5
30963: PPUSH
30964: CALL 32171 0 5
30968: GO 31091
30970: LD_INT 302
30972: DOUBLE
30973: EQUAL
30974: IFTRUE 30978
30976: GO 31015
30978: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30979: LD_VAR 0 6
30983: PPUSH
30984: LD_VAR 0 7
30988: PPUSH
30989: LD_VAR 0 8
30993: PPUSH
30994: LD_VAR 0 9
30998: PPUSH
30999: LD_VAR 0 4
31003: PPUSH
31004: LD_VAR 0 5
31008: PPUSH
31009: CALL 32262 0 6
31013: GO 31091
31015: LD_INT 303
31017: DOUBLE
31018: EQUAL
31019: IFTRUE 31023
31021: GO 31060
31023: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31024: LD_VAR 0 6
31028: PPUSH
31029: LD_VAR 0 7
31033: PPUSH
31034: LD_VAR 0 8
31038: PPUSH
31039: LD_VAR 0 9
31043: PPUSH
31044: LD_VAR 0 4
31048: PPUSH
31049: LD_VAR 0 5
31053: PPUSH
31054: CALL 31096 0 6
31058: GO 31091
31060: LD_INT 304
31062: DOUBLE
31063: EQUAL
31064: IFTRUE 31068
31066: GO 31090
31068: POP
// hHackTeleport ( unit , x , y ) ; end ;
31069: LD_VAR 0 2
31073: PPUSH
31074: LD_VAR 0 4
31078: PPUSH
31079: LD_VAR 0 5
31083: PPUSH
31084: CALL 32855 0 3
31088: GO 31091
31090: POP
// end ;
31091: LD_VAR 0 12
31095: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31096: LD_INT 0
31098: PPUSH
31099: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31100: LD_VAR 0 1
31104: PUSH
31105: LD_INT 1
31107: LESS
31108: PUSH
31109: LD_VAR 0 1
31113: PUSH
31114: LD_INT 3
31116: GREATER
31117: OR
31118: PUSH
31119: LD_VAR 0 5
31123: PPUSH
31124: LD_VAR 0 6
31128: PPUSH
31129: CALL_OW 428
31133: OR
31134: IFFALSE 31138
// exit ;
31136: GO 31858
// uc_side := your_side ;
31138: LD_ADDR_OWVAR 20
31142: PUSH
31143: LD_OWVAR 2
31147: ST_TO_ADDR
// uc_nation := nation ;
31148: LD_ADDR_OWVAR 21
31152: PUSH
31153: LD_VAR 0 1
31157: ST_TO_ADDR
// bc_level = 1 ;
31158: LD_ADDR_OWVAR 43
31162: PUSH
31163: LD_INT 1
31165: ST_TO_ADDR
// case btype of 1 :
31166: LD_VAR 0 2
31170: PUSH
31171: LD_INT 1
31173: DOUBLE
31174: EQUAL
31175: IFTRUE 31179
31177: GO 31190
31179: POP
// bc_type := b_depot ; 2 :
31180: LD_ADDR_OWVAR 42
31184: PUSH
31185: LD_INT 0
31187: ST_TO_ADDR
31188: GO 31802
31190: LD_INT 2
31192: DOUBLE
31193: EQUAL
31194: IFTRUE 31198
31196: GO 31209
31198: POP
// bc_type := b_warehouse ; 3 :
31199: LD_ADDR_OWVAR 42
31203: PUSH
31204: LD_INT 1
31206: ST_TO_ADDR
31207: GO 31802
31209: LD_INT 3
31211: DOUBLE
31212: EQUAL
31213: IFTRUE 31217
31215: GO 31228
31217: POP
// bc_type := b_lab ; 4 .. 9 :
31218: LD_ADDR_OWVAR 42
31222: PUSH
31223: LD_INT 6
31225: ST_TO_ADDR
31226: GO 31802
31228: LD_INT 4
31230: DOUBLE
31231: GREATEREQUAL
31232: IFFALSE 31240
31234: LD_INT 9
31236: DOUBLE
31237: LESSEQUAL
31238: IFTRUE 31242
31240: GO 31294
31242: POP
// begin bc_type := b_lab_half ;
31243: LD_ADDR_OWVAR 42
31247: PUSH
31248: LD_INT 7
31250: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31251: LD_ADDR_OWVAR 44
31255: PUSH
31256: LD_INT 10
31258: PUSH
31259: LD_INT 11
31261: PUSH
31262: LD_INT 12
31264: PUSH
31265: LD_INT 15
31267: PUSH
31268: LD_INT 14
31270: PUSH
31271: LD_INT 13
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: PUSH
31282: LD_VAR 0 2
31286: PUSH
31287: LD_INT 3
31289: MINUS
31290: ARRAY
31291: ST_TO_ADDR
// end ; 10 .. 13 :
31292: GO 31802
31294: LD_INT 10
31296: DOUBLE
31297: GREATEREQUAL
31298: IFFALSE 31306
31300: LD_INT 13
31302: DOUBLE
31303: LESSEQUAL
31304: IFTRUE 31308
31306: GO 31385
31308: POP
// begin bc_type := b_lab_full ;
31309: LD_ADDR_OWVAR 42
31313: PUSH
31314: LD_INT 8
31316: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31317: LD_ADDR_OWVAR 44
31321: PUSH
31322: LD_INT 10
31324: PUSH
31325: LD_INT 12
31327: PUSH
31328: LD_INT 14
31330: PUSH
31331: LD_INT 13
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: PUSH
31340: LD_VAR 0 2
31344: PUSH
31345: LD_INT 9
31347: MINUS
31348: ARRAY
31349: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31350: LD_ADDR_OWVAR 45
31354: PUSH
31355: LD_INT 11
31357: PUSH
31358: LD_INT 15
31360: PUSH
31361: LD_INT 12
31363: PUSH
31364: LD_INT 15
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: PUSH
31373: LD_VAR 0 2
31377: PUSH
31378: LD_INT 9
31380: MINUS
31381: ARRAY
31382: ST_TO_ADDR
// end ; 14 :
31383: GO 31802
31385: LD_INT 14
31387: DOUBLE
31388: EQUAL
31389: IFTRUE 31393
31391: GO 31404
31393: POP
// bc_type := b_workshop ; 15 :
31394: LD_ADDR_OWVAR 42
31398: PUSH
31399: LD_INT 2
31401: ST_TO_ADDR
31402: GO 31802
31404: LD_INT 15
31406: DOUBLE
31407: EQUAL
31408: IFTRUE 31412
31410: GO 31423
31412: POP
// bc_type := b_factory ; 16 :
31413: LD_ADDR_OWVAR 42
31417: PUSH
31418: LD_INT 3
31420: ST_TO_ADDR
31421: GO 31802
31423: LD_INT 16
31425: DOUBLE
31426: EQUAL
31427: IFTRUE 31431
31429: GO 31442
31431: POP
// bc_type := b_ext_gun ; 17 :
31432: LD_ADDR_OWVAR 42
31436: PUSH
31437: LD_INT 17
31439: ST_TO_ADDR
31440: GO 31802
31442: LD_INT 17
31444: DOUBLE
31445: EQUAL
31446: IFTRUE 31450
31448: GO 31478
31450: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31451: LD_ADDR_OWVAR 42
31455: PUSH
31456: LD_INT 19
31458: PUSH
31459: LD_INT 23
31461: PUSH
31462: LD_INT 19
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: LIST
31469: PUSH
31470: LD_VAR 0 1
31474: ARRAY
31475: ST_TO_ADDR
31476: GO 31802
31478: LD_INT 18
31480: DOUBLE
31481: EQUAL
31482: IFTRUE 31486
31484: GO 31497
31486: POP
// bc_type := b_ext_radar ; 19 :
31487: LD_ADDR_OWVAR 42
31491: PUSH
31492: LD_INT 20
31494: ST_TO_ADDR
31495: GO 31802
31497: LD_INT 19
31499: DOUBLE
31500: EQUAL
31501: IFTRUE 31505
31503: GO 31516
31505: POP
// bc_type := b_ext_radio ; 20 :
31506: LD_ADDR_OWVAR 42
31510: PUSH
31511: LD_INT 22
31513: ST_TO_ADDR
31514: GO 31802
31516: LD_INT 20
31518: DOUBLE
31519: EQUAL
31520: IFTRUE 31524
31522: GO 31535
31524: POP
// bc_type := b_ext_siberium ; 21 :
31525: LD_ADDR_OWVAR 42
31529: PUSH
31530: LD_INT 21
31532: ST_TO_ADDR
31533: GO 31802
31535: LD_INT 21
31537: DOUBLE
31538: EQUAL
31539: IFTRUE 31543
31541: GO 31554
31543: POP
// bc_type := b_ext_computer ; 22 :
31544: LD_ADDR_OWVAR 42
31548: PUSH
31549: LD_INT 24
31551: ST_TO_ADDR
31552: GO 31802
31554: LD_INT 22
31556: DOUBLE
31557: EQUAL
31558: IFTRUE 31562
31560: GO 31573
31562: POP
// bc_type := b_ext_track ; 23 :
31563: LD_ADDR_OWVAR 42
31567: PUSH
31568: LD_INT 16
31570: ST_TO_ADDR
31571: GO 31802
31573: LD_INT 23
31575: DOUBLE
31576: EQUAL
31577: IFTRUE 31581
31579: GO 31592
31581: POP
// bc_type := b_ext_laser ; 24 :
31582: LD_ADDR_OWVAR 42
31586: PUSH
31587: LD_INT 25
31589: ST_TO_ADDR
31590: GO 31802
31592: LD_INT 24
31594: DOUBLE
31595: EQUAL
31596: IFTRUE 31600
31598: GO 31611
31600: POP
// bc_type := b_control_tower ; 25 :
31601: LD_ADDR_OWVAR 42
31605: PUSH
31606: LD_INT 36
31608: ST_TO_ADDR
31609: GO 31802
31611: LD_INT 25
31613: DOUBLE
31614: EQUAL
31615: IFTRUE 31619
31617: GO 31630
31619: POP
// bc_type := b_breastwork ; 26 :
31620: LD_ADDR_OWVAR 42
31624: PUSH
31625: LD_INT 31
31627: ST_TO_ADDR
31628: GO 31802
31630: LD_INT 26
31632: DOUBLE
31633: EQUAL
31634: IFTRUE 31638
31636: GO 31649
31638: POP
// bc_type := b_bunker ; 27 :
31639: LD_ADDR_OWVAR 42
31643: PUSH
31644: LD_INT 32
31646: ST_TO_ADDR
31647: GO 31802
31649: LD_INT 27
31651: DOUBLE
31652: EQUAL
31653: IFTRUE 31657
31655: GO 31668
31657: POP
// bc_type := b_turret ; 28 :
31658: LD_ADDR_OWVAR 42
31662: PUSH
31663: LD_INT 33
31665: ST_TO_ADDR
31666: GO 31802
31668: LD_INT 28
31670: DOUBLE
31671: EQUAL
31672: IFTRUE 31676
31674: GO 31687
31676: POP
// bc_type := b_armoury ; 29 :
31677: LD_ADDR_OWVAR 42
31681: PUSH
31682: LD_INT 4
31684: ST_TO_ADDR
31685: GO 31802
31687: LD_INT 29
31689: DOUBLE
31690: EQUAL
31691: IFTRUE 31695
31693: GO 31706
31695: POP
// bc_type := b_barracks ; 30 :
31696: LD_ADDR_OWVAR 42
31700: PUSH
31701: LD_INT 5
31703: ST_TO_ADDR
31704: GO 31802
31706: LD_INT 30
31708: DOUBLE
31709: EQUAL
31710: IFTRUE 31714
31712: GO 31725
31714: POP
// bc_type := b_solar_power ; 31 :
31715: LD_ADDR_OWVAR 42
31719: PUSH
31720: LD_INT 27
31722: ST_TO_ADDR
31723: GO 31802
31725: LD_INT 31
31727: DOUBLE
31728: EQUAL
31729: IFTRUE 31733
31731: GO 31744
31733: POP
// bc_type := b_oil_power ; 32 :
31734: LD_ADDR_OWVAR 42
31738: PUSH
31739: LD_INT 26
31741: ST_TO_ADDR
31742: GO 31802
31744: LD_INT 32
31746: DOUBLE
31747: EQUAL
31748: IFTRUE 31752
31750: GO 31763
31752: POP
// bc_type := b_siberite_power ; 33 :
31753: LD_ADDR_OWVAR 42
31757: PUSH
31758: LD_INT 28
31760: ST_TO_ADDR
31761: GO 31802
31763: LD_INT 33
31765: DOUBLE
31766: EQUAL
31767: IFTRUE 31771
31769: GO 31782
31771: POP
// bc_type := b_oil_mine ; 34 :
31772: LD_ADDR_OWVAR 42
31776: PUSH
31777: LD_INT 29
31779: ST_TO_ADDR
31780: GO 31802
31782: LD_INT 34
31784: DOUBLE
31785: EQUAL
31786: IFTRUE 31790
31788: GO 31801
31790: POP
// bc_type := b_siberite_mine ; end ;
31791: LD_ADDR_OWVAR 42
31795: PUSH
31796: LD_INT 30
31798: ST_TO_ADDR
31799: GO 31802
31801: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31802: LD_ADDR_VAR 0 8
31806: PUSH
31807: LD_VAR 0 5
31811: PPUSH
31812: LD_VAR 0 6
31816: PPUSH
31817: LD_VAR 0 3
31821: PPUSH
31822: CALL_OW 47
31826: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31827: LD_OWVAR 42
31831: PUSH
31832: LD_INT 32
31834: PUSH
31835: LD_INT 33
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: IN
31842: IFFALSE 31858
// PlaceWeaponTurret ( b , weapon ) ;
31844: LD_VAR 0 8
31848: PPUSH
31849: LD_VAR 0 4
31853: PPUSH
31854: CALL_OW 431
// end ;
31858: LD_VAR 0 7
31862: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31863: LD_INT 0
31865: PPUSH
31866: PPUSH
31867: PPUSH
31868: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31869: LD_ADDR_VAR 0 4
31873: PUSH
31874: LD_INT 22
31876: PUSH
31877: LD_OWVAR 2
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 2
31888: PUSH
31889: LD_INT 30
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 30
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: LIST
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PPUSH
31918: CALL_OW 69
31922: ST_TO_ADDR
// if not tmp then
31923: LD_VAR 0 4
31927: NOT
31928: IFFALSE 31932
// exit ;
31930: GO 31991
// for i in tmp do
31932: LD_ADDR_VAR 0 2
31936: PUSH
31937: LD_VAR 0 4
31941: PUSH
31942: FOR_IN
31943: IFFALSE 31989
// for j = 1 to 3 do
31945: LD_ADDR_VAR 0 3
31949: PUSH
31950: DOUBLE
31951: LD_INT 1
31953: DEC
31954: ST_TO_ADDR
31955: LD_INT 3
31957: PUSH
31958: FOR_TO
31959: IFFALSE 31985
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31961: LD_VAR 0 2
31965: PPUSH
31966: CALL_OW 274
31970: PPUSH
31971: LD_VAR 0 3
31975: PPUSH
31976: LD_INT 99999
31978: PPUSH
31979: CALL_OW 277
31983: GO 31958
31985: POP
31986: POP
31987: GO 31942
31989: POP
31990: POP
// end ;
31991: LD_VAR 0 1
31995: RET
// export function hHackSetLevel10 ; var i , j ; begin
31996: LD_INT 0
31998: PPUSH
31999: PPUSH
32000: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32001: LD_ADDR_VAR 0 2
32005: PUSH
32006: LD_INT 21
32008: PUSH
32009: LD_INT 1
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PPUSH
32016: CALL_OW 69
32020: PUSH
32021: FOR_IN
32022: IFFALSE 32074
// if IsSelected ( i ) then
32024: LD_VAR 0 2
32028: PPUSH
32029: CALL_OW 306
32033: IFFALSE 32072
// begin for j := 1 to 4 do
32035: LD_ADDR_VAR 0 3
32039: PUSH
32040: DOUBLE
32041: LD_INT 1
32043: DEC
32044: ST_TO_ADDR
32045: LD_INT 4
32047: PUSH
32048: FOR_TO
32049: IFFALSE 32070
// SetSkill ( i , j , 10 ) ;
32051: LD_VAR 0 2
32055: PPUSH
32056: LD_VAR 0 3
32060: PPUSH
32061: LD_INT 10
32063: PPUSH
32064: CALL_OW 237
32068: GO 32048
32070: POP
32071: POP
// end ;
32072: GO 32021
32074: POP
32075: POP
// end ;
32076: LD_VAR 0 1
32080: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32081: LD_INT 0
32083: PPUSH
32084: PPUSH
32085: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32086: LD_ADDR_VAR 0 2
32090: PUSH
32091: LD_INT 22
32093: PUSH
32094: LD_OWVAR 2
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 21
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PPUSH
32117: CALL_OW 69
32121: PUSH
32122: FOR_IN
32123: IFFALSE 32164
// begin for j := 1 to 4 do
32125: LD_ADDR_VAR 0 3
32129: PUSH
32130: DOUBLE
32131: LD_INT 1
32133: DEC
32134: ST_TO_ADDR
32135: LD_INT 4
32137: PUSH
32138: FOR_TO
32139: IFFALSE 32160
// SetSkill ( i , j , 10 ) ;
32141: LD_VAR 0 2
32145: PPUSH
32146: LD_VAR 0 3
32150: PPUSH
32151: LD_INT 10
32153: PPUSH
32154: CALL_OW 237
32158: GO 32138
32160: POP
32161: POP
// end ;
32162: GO 32122
32164: POP
32165: POP
// end ;
32166: LD_VAR 0 1
32170: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32171: LD_INT 0
32173: PPUSH
// uc_side := your_side ;
32174: LD_ADDR_OWVAR 20
32178: PUSH
32179: LD_OWVAR 2
32183: ST_TO_ADDR
// uc_nation := nation ;
32184: LD_ADDR_OWVAR 21
32188: PUSH
32189: LD_VAR 0 1
32193: ST_TO_ADDR
// InitHc ;
32194: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32198: LD_INT 0
32200: PPUSH
32201: LD_VAR 0 2
32205: PPUSH
32206: LD_VAR 0 3
32210: PPUSH
32211: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32215: LD_VAR 0 4
32219: PPUSH
32220: LD_VAR 0 5
32224: PPUSH
32225: CALL_OW 428
32229: PUSH
32230: LD_INT 0
32232: EQUAL
32233: IFFALSE 32257
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32235: CALL_OW 44
32239: PPUSH
32240: LD_VAR 0 4
32244: PPUSH
32245: LD_VAR 0 5
32249: PPUSH
32250: LD_INT 1
32252: PPUSH
32253: CALL_OW 48
// end ;
32257: LD_VAR 0 6
32261: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32262: LD_INT 0
32264: PPUSH
32265: PPUSH
// uc_side := your_side ;
32266: LD_ADDR_OWVAR 20
32270: PUSH
32271: LD_OWVAR 2
32275: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32276: LD_VAR 0 1
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: LD_INT 3
32289: PUSH
32290: LD_INT 4
32292: PUSH
32293: LD_INT 5
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: IN
32303: IFFALSE 32315
// uc_nation := nation_american else
32305: LD_ADDR_OWVAR 21
32309: PUSH
32310: LD_INT 1
32312: ST_TO_ADDR
32313: GO 32358
// if chassis in [ 11 , 12 , 13 , 14 ] then
32315: LD_VAR 0 1
32319: PUSH
32320: LD_INT 11
32322: PUSH
32323: LD_INT 12
32325: PUSH
32326: LD_INT 13
32328: PUSH
32329: LD_INT 14
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: IN
32338: IFFALSE 32350
// uc_nation := nation_arabian else
32340: LD_ADDR_OWVAR 21
32344: PUSH
32345: LD_INT 2
32347: ST_TO_ADDR
32348: GO 32358
// uc_nation := nation_russian ;
32350: LD_ADDR_OWVAR 21
32354: PUSH
32355: LD_INT 3
32357: ST_TO_ADDR
// vc_chassis := chassis ;
32358: LD_ADDR_OWVAR 37
32362: PUSH
32363: LD_VAR 0 1
32367: ST_TO_ADDR
// vc_engine := engine ;
32368: LD_ADDR_OWVAR 39
32372: PUSH
32373: LD_VAR 0 2
32377: ST_TO_ADDR
// vc_control := control ;
32378: LD_ADDR_OWVAR 38
32382: PUSH
32383: LD_VAR 0 3
32387: ST_TO_ADDR
// vc_weapon := weapon ;
32388: LD_ADDR_OWVAR 40
32392: PUSH
32393: LD_VAR 0 4
32397: ST_TO_ADDR
// un := CreateVehicle ;
32398: LD_ADDR_VAR 0 8
32402: PUSH
32403: CALL_OW 45
32407: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32408: LD_VAR 0 8
32412: PPUSH
32413: LD_INT 0
32415: PPUSH
32416: LD_INT 5
32418: PPUSH
32419: CALL_OW 12
32423: PPUSH
32424: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32428: LD_VAR 0 8
32432: PPUSH
32433: LD_VAR 0 5
32437: PPUSH
32438: LD_VAR 0 6
32442: PPUSH
32443: LD_INT 1
32445: PPUSH
32446: CALL_OW 48
// end ;
32450: LD_VAR 0 7
32454: RET
// export hInvincible ; every 1 do
32455: GO 32457
32457: DISABLE
// hInvincible := [ ] ;
32458: LD_ADDR_EXP 108
32462: PUSH
32463: EMPTY
32464: ST_TO_ADDR
32465: END
// every 10 do var i ;
32466: GO 32468
32468: DISABLE
32469: LD_INT 0
32471: PPUSH
// begin enable ;
32472: ENABLE
// if not hInvincible then
32473: LD_EXP 108
32477: NOT
32478: IFFALSE 32482
// exit ;
32480: GO 32526
// for i in hInvincible do
32482: LD_ADDR_VAR 0 1
32486: PUSH
32487: LD_EXP 108
32491: PUSH
32492: FOR_IN
32493: IFFALSE 32524
// if GetLives ( i ) < 1000 then
32495: LD_VAR 0 1
32499: PPUSH
32500: CALL_OW 256
32504: PUSH
32505: LD_INT 1000
32507: LESS
32508: IFFALSE 32522
// SetLives ( i , 1000 ) ;
32510: LD_VAR 0 1
32514: PPUSH
32515: LD_INT 1000
32517: PPUSH
32518: CALL_OW 234
32522: GO 32492
32524: POP
32525: POP
// end ;
32526: PPOPN 1
32528: END
// export function hHackInvincible ; var i ; begin
32529: LD_INT 0
32531: PPUSH
32532: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32533: LD_ADDR_VAR 0 2
32537: PUSH
32538: LD_INT 2
32540: PUSH
32541: LD_INT 21
32543: PUSH
32544: LD_INT 1
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 21
32553: PUSH
32554: LD_INT 2
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: LIST
32565: PPUSH
32566: CALL_OW 69
32570: PUSH
32571: FOR_IN
32572: IFFALSE 32633
// if IsSelected ( i ) then
32574: LD_VAR 0 2
32578: PPUSH
32579: CALL_OW 306
32583: IFFALSE 32631
// begin if i in hInvincible then
32585: LD_VAR 0 2
32589: PUSH
32590: LD_EXP 108
32594: IN
32595: IFFALSE 32615
// hInvincible := hInvincible diff i else
32597: LD_ADDR_EXP 108
32601: PUSH
32602: LD_EXP 108
32606: PUSH
32607: LD_VAR 0 2
32611: DIFF
32612: ST_TO_ADDR
32613: GO 32631
// hInvincible := hInvincible union i ;
32615: LD_ADDR_EXP 108
32619: PUSH
32620: LD_EXP 108
32624: PUSH
32625: LD_VAR 0 2
32629: UNION
32630: ST_TO_ADDR
// end ;
32631: GO 32571
32633: POP
32634: POP
// end ;
32635: LD_VAR 0 1
32639: RET
// export function hHackInvisible ; var i , j ; begin
32640: LD_INT 0
32642: PPUSH
32643: PPUSH
32644: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32645: LD_ADDR_VAR 0 2
32649: PUSH
32650: LD_INT 21
32652: PUSH
32653: LD_INT 1
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PPUSH
32660: CALL_OW 69
32664: PUSH
32665: FOR_IN
32666: IFFALSE 32690
// if IsSelected ( i ) then
32668: LD_VAR 0 2
32672: PPUSH
32673: CALL_OW 306
32677: IFFALSE 32688
// ComForceInvisible ( i ) ;
32679: LD_VAR 0 2
32683: PPUSH
32684: CALL_OW 496
32688: GO 32665
32690: POP
32691: POP
// end ;
32692: LD_VAR 0 1
32696: RET
// export function hHackChangeYourSide ; begin
32697: LD_INT 0
32699: PPUSH
// if your_side = 8 then
32700: LD_OWVAR 2
32704: PUSH
32705: LD_INT 8
32707: EQUAL
32708: IFFALSE 32720
// your_side := 0 else
32710: LD_ADDR_OWVAR 2
32714: PUSH
32715: LD_INT 0
32717: ST_TO_ADDR
32718: GO 32734
// your_side := your_side + 1 ;
32720: LD_ADDR_OWVAR 2
32724: PUSH
32725: LD_OWVAR 2
32729: PUSH
32730: LD_INT 1
32732: PLUS
32733: ST_TO_ADDR
// end ;
32734: LD_VAR 0 1
32738: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32739: LD_INT 0
32741: PPUSH
32742: PPUSH
32743: PPUSH
// for i in all_units do
32744: LD_ADDR_VAR 0 2
32748: PUSH
32749: LD_OWVAR 3
32753: PUSH
32754: FOR_IN
32755: IFFALSE 32833
// if IsSelected ( i ) then
32757: LD_VAR 0 2
32761: PPUSH
32762: CALL_OW 306
32766: IFFALSE 32831
// begin j := GetSide ( i ) ;
32768: LD_ADDR_VAR 0 3
32772: PUSH
32773: LD_VAR 0 2
32777: PPUSH
32778: CALL_OW 255
32782: ST_TO_ADDR
// if j = 8 then
32783: LD_VAR 0 3
32787: PUSH
32788: LD_INT 8
32790: EQUAL
32791: IFFALSE 32803
// j := 0 else
32793: LD_ADDR_VAR 0 3
32797: PUSH
32798: LD_INT 0
32800: ST_TO_ADDR
32801: GO 32817
// j := j + 1 ;
32803: LD_ADDR_VAR 0 3
32807: PUSH
32808: LD_VAR 0 3
32812: PUSH
32813: LD_INT 1
32815: PLUS
32816: ST_TO_ADDR
// SetSide ( i , j ) ;
32817: LD_VAR 0 2
32821: PPUSH
32822: LD_VAR 0 3
32826: PPUSH
32827: CALL_OW 235
// end ;
32831: GO 32754
32833: POP
32834: POP
// end ;
32835: LD_VAR 0 1
32839: RET
// export function hHackFog ; begin
32840: LD_INT 0
32842: PPUSH
// FogOff ( true ) ;
32843: LD_INT 1
32845: PPUSH
32846: CALL_OW 344
// end ;
32850: LD_VAR 0 1
32854: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32855: LD_INT 0
32857: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32858: LD_VAR 0 1
32862: PPUSH
32863: LD_VAR 0 2
32867: PPUSH
32868: LD_VAR 0 3
32872: PPUSH
32873: LD_INT 1
32875: PPUSH
32876: LD_INT 1
32878: PPUSH
32879: CALL_OW 483
// CenterOnXY ( x , y ) ;
32883: LD_VAR 0 2
32887: PPUSH
32888: LD_VAR 0 3
32892: PPUSH
32893: CALL_OW 84
// end ;
32897: LD_VAR 0 4
32901: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32902: LD_INT 0
32904: PPUSH
32905: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32906: LD_VAR 0 1
32910: NOT
32911: PUSH
32912: LD_VAR 0 2
32916: PPUSH
32917: LD_VAR 0 3
32921: PPUSH
32922: CALL_OW 488
32926: NOT
32927: OR
32928: PUSH
32929: LD_VAR 0 1
32933: PPUSH
32934: CALL_OW 266
32938: PUSH
32939: LD_INT 3
32941: NONEQUAL
32942: PUSH
32943: LD_VAR 0 1
32947: PPUSH
32948: CALL_OW 247
32952: PUSH
32953: LD_INT 1
32955: EQUAL
32956: NOT
32957: AND
32958: OR
32959: IFFALSE 32963
// exit ;
32961: GO 33112
// if GetType ( factory ) = unit_human then
32963: LD_VAR 0 1
32967: PPUSH
32968: CALL_OW 247
32972: PUSH
32973: LD_INT 1
32975: EQUAL
32976: IFFALSE 32993
// factory := IsInUnit ( factory ) ;
32978: LD_ADDR_VAR 0 1
32982: PUSH
32983: LD_VAR 0 1
32987: PPUSH
32988: CALL_OW 310
32992: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32993: LD_VAR 0 1
32997: PPUSH
32998: CALL_OW 266
33002: PUSH
33003: LD_INT 3
33005: NONEQUAL
33006: IFFALSE 33010
// exit ;
33008: GO 33112
// if HexInfo ( x , y ) = factory then
33010: LD_VAR 0 2
33014: PPUSH
33015: LD_VAR 0 3
33019: PPUSH
33020: CALL_OW 428
33024: PUSH
33025: LD_VAR 0 1
33029: EQUAL
33030: IFFALSE 33057
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33032: LD_ADDR_EXP 109
33036: PUSH
33037: LD_EXP 109
33041: PPUSH
33042: LD_VAR 0 1
33046: PPUSH
33047: LD_INT 0
33049: PPUSH
33050: CALL_OW 1
33054: ST_TO_ADDR
33055: GO 33108
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33057: LD_ADDR_EXP 109
33061: PUSH
33062: LD_EXP 109
33066: PPUSH
33067: LD_VAR 0 1
33071: PPUSH
33072: LD_VAR 0 1
33076: PPUSH
33077: CALL_OW 255
33081: PUSH
33082: LD_VAR 0 1
33086: PUSH
33087: LD_VAR 0 2
33091: PUSH
33092: LD_VAR 0 3
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: PPUSH
33103: CALL_OW 1
33107: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33108: CALL 33117 0 0
// end ;
33112: LD_VAR 0 4
33116: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33117: LD_INT 0
33119: PPUSH
33120: PPUSH
33121: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33122: LD_STRING resetFactoryWaypoint();
33124: PPUSH
33125: CALL_OW 559
// if factoryWaypoints then
33129: LD_EXP 109
33133: IFFALSE 33259
// begin list := PrepareArray ( factoryWaypoints ) ;
33135: LD_ADDR_VAR 0 3
33139: PUSH
33140: LD_EXP 109
33144: PPUSH
33145: CALL 79691 0 1
33149: ST_TO_ADDR
// for i := 1 to list do
33150: LD_ADDR_VAR 0 2
33154: PUSH
33155: DOUBLE
33156: LD_INT 1
33158: DEC
33159: ST_TO_ADDR
33160: LD_VAR 0 3
33164: PUSH
33165: FOR_TO
33166: IFFALSE 33257
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33168: LD_STRING setFactoryWaypointXY(
33170: PUSH
33171: LD_VAR 0 3
33175: PUSH
33176: LD_VAR 0 2
33180: ARRAY
33181: PUSH
33182: LD_INT 1
33184: ARRAY
33185: STR
33186: PUSH
33187: LD_STRING ,
33189: STR
33190: PUSH
33191: LD_VAR 0 3
33195: PUSH
33196: LD_VAR 0 2
33200: ARRAY
33201: PUSH
33202: LD_INT 2
33204: ARRAY
33205: STR
33206: PUSH
33207: LD_STRING ,
33209: STR
33210: PUSH
33211: LD_VAR 0 3
33215: PUSH
33216: LD_VAR 0 2
33220: ARRAY
33221: PUSH
33222: LD_INT 3
33224: ARRAY
33225: STR
33226: PUSH
33227: LD_STRING ,
33229: STR
33230: PUSH
33231: LD_VAR 0 3
33235: PUSH
33236: LD_VAR 0 2
33240: ARRAY
33241: PUSH
33242: LD_INT 4
33244: ARRAY
33245: STR
33246: PUSH
33247: LD_STRING )
33249: STR
33250: PPUSH
33251: CALL_OW 559
33255: GO 33165
33257: POP
33258: POP
// end ; end ;
33259: LD_VAR 0 1
33263: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33264: LD_INT 0
33266: PPUSH
// if HexInfo ( x , y ) = warehouse then
33267: LD_VAR 0 2
33271: PPUSH
33272: LD_VAR 0 3
33276: PPUSH
33277: CALL_OW 428
33281: PUSH
33282: LD_VAR 0 1
33286: EQUAL
33287: IFFALSE 33314
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33289: LD_ADDR_EXP 110
33293: PUSH
33294: LD_EXP 110
33298: PPUSH
33299: LD_VAR 0 1
33303: PPUSH
33304: LD_INT 0
33306: PPUSH
33307: CALL_OW 1
33311: ST_TO_ADDR
33312: GO 33365
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33314: LD_ADDR_EXP 110
33318: PUSH
33319: LD_EXP 110
33323: PPUSH
33324: LD_VAR 0 1
33328: PPUSH
33329: LD_VAR 0 1
33333: PPUSH
33334: CALL_OW 255
33338: PUSH
33339: LD_VAR 0 1
33343: PUSH
33344: LD_VAR 0 2
33348: PUSH
33349: LD_VAR 0 3
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: PPUSH
33360: CALL_OW 1
33364: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33365: CALL 33374 0 0
// end ;
33369: LD_VAR 0 4
33373: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33374: LD_INT 0
33376: PPUSH
33377: PPUSH
33378: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33379: LD_STRING resetWarehouseGatheringPoints();
33381: PPUSH
33382: CALL_OW 559
// if warehouseGatheringPoints then
33386: LD_EXP 110
33390: IFFALSE 33516
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33392: LD_ADDR_VAR 0 3
33396: PUSH
33397: LD_EXP 110
33401: PPUSH
33402: CALL 79691 0 1
33406: ST_TO_ADDR
// for i := 1 to list do
33407: LD_ADDR_VAR 0 2
33411: PUSH
33412: DOUBLE
33413: LD_INT 1
33415: DEC
33416: ST_TO_ADDR
33417: LD_VAR 0 3
33421: PUSH
33422: FOR_TO
33423: IFFALSE 33514
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33425: LD_STRING setWarehouseGatheringPointXY(
33427: PUSH
33428: LD_VAR 0 3
33432: PUSH
33433: LD_VAR 0 2
33437: ARRAY
33438: PUSH
33439: LD_INT 1
33441: ARRAY
33442: STR
33443: PUSH
33444: LD_STRING ,
33446: STR
33447: PUSH
33448: LD_VAR 0 3
33452: PUSH
33453: LD_VAR 0 2
33457: ARRAY
33458: PUSH
33459: LD_INT 2
33461: ARRAY
33462: STR
33463: PUSH
33464: LD_STRING ,
33466: STR
33467: PUSH
33468: LD_VAR 0 3
33472: PUSH
33473: LD_VAR 0 2
33477: ARRAY
33478: PUSH
33479: LD_INT 3
33481: ARRAY
33482: STR
33483: PUSH
33484: LD_STRING ,
33486: STR
33487: PUSH
33488: LD_VAR 0 3
33492: PUSH
33493: LD_VAR 0 2
33497: ARRAY
33498: PUSH
33499: LD_INT 4
33501: ARRAY
33502: STR
33503: PUSH
33504: LD_STRING )
33506: STR
33507: PPUSH
33508: CALL_OW 559
33512: GO 33422
33514: POP
33515: POP
// end ; end ;
33516: LD_VAR 0 1
33520: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33521: LD_EXP 110
33525: IFFALSE 34212
33527: GO 33529
33529: DISABLE
33530: LD_INT 0
33532: PPUSH
33533: PPUSH
33534: PPUSH
33535: PPUSH
33536: PPUSH
33537: PPUSH
33538: PPUSH
33539: PPUSH
33540: PPUSH
// begin enable ;
33541: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33542: LD_ADDR_VAR 0 3
33546: PUSH
33547: LD_EXP 110
33551: PPUSH
33552: CALL 79691 0 1
33556: ST_TO_ADDR
// if not list then
33557: LD_VAR 0 3
33561: NOT
33562: IFFALSE 33566
// exit ;
33564: GO 34212
// for i := 1 to list do
33566: LD_ADDR_VAR 0 1
33570: PUSH
33571: DOUBLE
33572: LD_INT 1
33574: DEC
33575: ST_TO_ADDR
33576: LD_VAR 0 3
33580: PUSH
33581: FOR_TO
33582: IFFALSE 34210
// begin depot := list [ i ] [ 2 ] ;
33584: LD_ADDR_VAR 0 8
33588: PUSH
33589: LD_VAR 0 3
33593: PUSH
33594: LD_VAR 0 1
33598: ARRAY
33599: PUSH
33600: LD_INT 2
33602: ARRAY
33603: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33604: LD_ADDR_VAR 0 5
33608: PUSH
33609: LD_VAR 0 3
33613: PUSH
33614: LD_VAR 0 1
33618: ARRAY
33619: PUSH
33620: LD_INT 1
33622: ARRAY
33623: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33624: LD_VAR 0 8
33628: PPUSH
33629: CALL_OW 301
33633: PUSH
33634: LD_VAR 0 5
33638: PUSH
33639: LD_VAR 0 8
33643: PPUSH
33644: CALL_OW 255
33648: NONEQUAL
33649: OR
33650: IFFALSE 33679
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33652: LD_ADDR_EXP 110
33656: PUSH
33657: LD_EXP 110
33661: PPUSH
33662: LD_VAR 0 8
33666: PPUSH
33667: LD_INT 0
33669: PPUSH
33670: CALL_OW 1
33674: ST_TO_ADDR
// exit ;
33675: POP
33676: POP
33677: GO 34212
// end ; x := list [ i ] [ 3 ] ;
33679: LD_ADDR_VAR 0 6
33683: PUSH
33684: LD_VAR 0 3
33688: PUSH
33689: LD_VAR 0 1
33693: ARRAY
33694: PUSH
33695: LD_INT 3
33697: ARRAY
33698: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33699: LD_ADDR_VAR 0 7
33703: PUSH
33704: LD_VAR 0 3
33708: PUSH
33709: LD_VAR 0 1
33713: ARRAY
33714: PUSH
33715: LD_INT 4
33717: ARRAY
33718: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33719: LD_ADDR_VAR 0 9
33723: PUSH
33724: LD_VAR 0 6
33728: PPUSH
33729: LD_VAR 0 7
33733: PPUSH
33734: LD_INT 16
33736: PPUSH
33737: CALL 78275 0 3
33741: ST_TO_ADDR
// if not cratesNearbyPoint then
33742: LD_VAR 0 9
33746: NOT
33747: IFFALSE 33753
// exit ;
33749: POP
33750: POP
33751: GO 34212
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33753: LD_ADDR_VAR 0 4
33757: PUSH
33758: LD_INT 22
33760: PUSH
33761: LD_VAR 0 5
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 3
33772: PUSH
33773: LD_INT 60
33775: PUSH
33776: EMPTY
33777: LIST
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 91
33785: PUSH
33786: LD_VAR 0 8
33790: PUSH
33791: LD_INT 6
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 2
33801: PUSH
33802: LD_INT 25
33804: PUSH
33805: LD_INT 2
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 25
33814: PUSH
33815: LD_INT 16
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: LIST
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: PPUSH
33833: CALL_OW 69
33837: PUSH
33838: LD_VAR 0 8
33842: PPUSH
33843: CALL_OW 313
33847: PPUSH
33848: LD_INT 3
33850: PUSH
33851: LD_INT 60
33853: PUSH
33854: EMPTY
33855: LIST
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 2
33863: PUSH
33864: LD_INT 25
33866: PUSH
33867: LD_INT 2
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 25
33876: PUSH
33877: LD_INT 16
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: LIST
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PPUSH
33893: CALL_OW 72
33897: UNION
33898: ST_TO_ADDR
// if tmp then
33899: LD_VAR 0 4
33903: IFFALSE 33983
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33905: LD_ADDR_VAR 0 4
33909: PUSH
33910: LD_VAR 0 4
33914: PPUSH
33915: LD_INT 3
33917: PPUSH
33918: CALL 76242 0 2
33922: ST_TO_ADDR
// for j in tmp do
33923: LD_ADDR_VAR 0 2
33927: PUSH
33928: LD_VAR 0 4
33932: PUSH
33933: FOR_IN
33934: IFFALSE 33977
// begin if IsInUnit ( j ) then
33936: LD_VAR 0 2
33940: PPUSH
33941: CALL_OW 310
33945: IFFALSE 33956
// ComExit ( j ) ;
33947: LD_VAR 0 2
33951: PPUSH
33952: CALL 76325 0 1
// AddComCollect ( j , x , y ) ;
33956: LD_VAR 0 2
33960: PPUSH
33961: LD_VAR 0 6
33965: PPUSH
33966: LD_VAR 0 7
33970: PPUSH
33971: CALL_OW 177
// end ;
33975: GO 33933
33977: POP
33978: POP
// exit ;
33979: POP
33980: POP
33981: GO 34212
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33983: LD_ADDR_VAR 0 4
33987: PUSH
33988: LD_INT 22
33990: PUSH
33991: LD_VAR 0 5
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 91
34002: PUSH
34003: LD_VAR 0 8
34007: PUSH
34008: LD_INT 8
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 2
34018: PUSH
34019: LD_INT 34
34021: PUSH
34022: LD_INT 12
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 34
34031: PUSH
34032: LD_INT 51
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 34
34041: PUSH
34042: LD_INT 32
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 34
34051: PUSH
34052: LD_EXP 34
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: LIST
34072: PPUSH
34073: CALL_OW 69
34077: ST_TO_ADDR
// if tmp then
34078: LD_VAR 0 4
34082: IFFALSE 34208
// begin for j in tmp do
34084: LD_ADDR_VAR 0 2
34088: PUSH
34089: LD_VAR 0 4
34093: PUSH
34094: FOR_IN
34095: IFFALSE 34206
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34097: LD_VAR 0 2
34101: PPUSH
34102: CALL_OW 262
34106: PUSH
34107: LD_INT 3
34109: EQUAL
34110: PUSH
34111: LD_VAR 0 2
34115: PPUSH
34116: CALL_OW 261
34120: PUSH
34121: LD_INT 20
34123: GREATER
34124: OR
34125: PUSH
34126: LD_VAR 0 2
34130: PPUSH
34131: CALL_OW 314
34135: NOT
34136: AND
34137: PUSH
34138: LD_VAR 0 2
34142: PPUSH
34143: CALL_OW 263
34147: PUSH
34148: LD_INT 1
34150: NONEQUAL
34151: PUSH
34152: LD_VAR 0 2
34156: PPUSH
34157: CALL_OW 311
34161: OR
34162: AND
34163: IFFALSE 34204
// begin ComCollect ( j , x , y ) ;
34165: LD_VAR 0 2
34169: PPUSH
34170: LD_VAR 0 6
34174: PPUSH
34175: LD_VAR 0 7
34179: PPUSH
34180: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34184: LD_VAR 0 2
34188: PPUSH
34189: LD_VAR 0 8
34193: PPUSH
34194: CALL_OW 172
// exit ;
34198: POP
34199: POP
34200: POP
34201: POP
34202: GO 34212
// end ;
34204: GO 34094
34206: POP
34207: POP
// end ; end ;
34208: GO 33581
34210: POP
34211: POP
// end ; end_of_file
34212: PPOPN 9
34214: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34215: LD_INT 0
34217: PPUSH
34218: PPUSH
34219: PPUSH
34220: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34221: LD_VAR 0 1
34225: PPUSH
34226: CALL_OW 264
34230: PUSH
34231: LD_EXP 37
34235: EQUAL
34236: IFFALSE 34308
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34238: LD_INT 68
34240: PPUSH
34241: LD_VAR 0 1
34245: PPUSH
34246: CALL_OW 255
34250: PPUSH
34251: CALL_OW 321
34255: PUSH
34256: LD_INT 2
34258: EQUAL
34259: IFFALSE 34271
// eff := 70 else
34261: LD_ADDR_VAR 0 4
34265: PUSH
34266: LD_INT 70
34268: ST_TO_ADDR
34269: GO 34279
// eff := 30 ;
34271: LD_ADDR_VAR 0 4
34275: PUSH
34276: LD_INT 30
34278: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34279: LD_VAR 0 1
34283: PPUSH
34284: CALL_OW 250
34288: PPUSH
34289: LD_VAR 0 1
34293: PPUSH
34294: CALL_OW 251
34298: PPUSH
34299: LD_VAR 0 4
34303: PPUSH
34304: CALL_OW 495
// end ; end ;
34308: LD_VAR 0 2
34312: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34313: LD_INT 0
34315: PPUSH
// end ;
34316: LD_VAR 0 4
34320: RET
// export function SOS_Command ( cmd ) ; begin
34321: LD_INT 0
34323: PPUSH
// end ;
34324: LD_VAR 0 2
34328: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34329: LD_INT 0
34331: PPUSH
// end ;
34332: LD_VAR 0 6
34336: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34337: LD_INT 0
34339: PPUSH
34340: PPUSH
// if not vehicle or not factory then
34341: LD_VAR 0 1
34345: NOT
34346: PUSH
34347: LD_VAR 0 2
34351: NOT
34352: OR
34353: IFFALSE 34357
// exit ;
34355: GO 34588
// if factoryWaypoints >= factory then
34357: LD_EXP 109
34361: PUSH
34362: LD_VAR 0 2
34366: GREATEREQUAL
34367: IFFALSE 34588
// if factoryWaypoints [ factory ] then
34369: LD_EXP 109
34373: PUSH
34374: LD_VAR 0 2
34378: ARRAY
34379: IFFALSE 34588
// begin if GetControl ( vehicle ) = control_manual then
34381: LD_VAR 0 1
34385: PPUSH
34386: CALL_OW 263
34390: PUSH
34391: LD_INT 1
34393: EQUAL
34394: IFFALSE 34475
// begin driver := IsDrivenBy ( vehicle ) ;
34396: LD_ADDR_VAR 0 4
34400: PUSH
34401: LD_VAR 0 1
34405: PPUSH
34406: CALL_OW 311
34410: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34411: LD_VAR 0 4
34415: PPUSH
34416: LD_EXP 109
34420: PUSH
34421: LD_VAR 0 2
34425: ARRAY
34426: PUSH
34427: LD_INT 3
34429: ARRAY
34430: PPUSH
34431: LD_EXP 109
34435: PUSH
34436: LD_VAR 0 2
34440: ARRAY
34441: PUSH
34442: LD_INT 4
34444: ARRAY
34445: PPUSH
34446: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34450: LD_VAR 0 4
34454: PPUSH
34455: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34459: LD_VAR 0 4
34463: PPUSH
34464: LD_VAR 0 2
34468: PPUSH
34469: CALL_OW 180
// end else
34473: GO 34588
// if GetControl ( vehicle ) = control_remote then
34475: LD_VAR 0 1
34479: PPUSH
34480: CALL_OW 263
34484: PUSH
34485: LD_INT 2
34487: EQUAL
34488: IFFALSE 34549
// begin wait ( 0 0$2 ) ;
34490: LD_INT 70
34492: PPUSH
34493: CALL_OW 67
// if Connect ( vehicle ) then
34497: LD_VAR 0 1
34501: PPUSH
34502: CALL 46636 0 1
34506: IFFALSE 34547
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34508: LD_VAR 0 1
34512: PPUSH
34513: LD_EXP 109
34517: PUSH
34518: LD_VAR 0 2
34522: ARRAY
34523: PUSH
34524: LD_INT 3
34526: ARRAY
34527: PPUSH
34528: LD_EXP 109
34532: PUSH
34533: LD_VAR 0 2
34537: ARRAY
34538: PUSH
34539: LD_INT 4
34541: ARRAY
34542: PPUSH
34543: CALL_OW 171
// end else
34547: GO 34588
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34549: LD_VAR 0 1
34553: PPUSH
34554: LD_EXP 109
34558: PUSH
34559: LD_VAR 0 2
34563: ARRAY
34564: PUSH
34565: LD_INT 3
34567: ARRAY
34568: PPUSH
34569: LD_EXP 109
34573: PUSH
34574: LD_VAR 0 2
34578: ARRAY
34579: PUSH
34580: LD_INT 4
34582: ARRAY
34583: PPUSH
34584: CALL_OW 171
// end ; end ;
34588: LD_VAR 0 3
34592: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34593: LD_INT 0
34595: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34596: LD_VAR 0 1
34600: PUSH
34601: LD_INT 250
34603: EQUAL
34604: PUSH
34605: LD_VAR 0 2
34609: PPUSH
34610: CALL_OW 264
34614: PUSH
34615: LD_EXP 40
34619: EQUAL
34620: AND
34621: IFFALSE 34642
// MinerPlaceMine ( unit , x , y ) ;
34623: LD_VAR 0 2
34627: PPUSH
34628: LD_VAR 0 4
34632: PPUSH
34633: LD_VAR 0 5
34637: PPUSH
34638: CALL 37041 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34642: LD_VAR 0 1
34646: PUSH
34647: LD_INT 251
34649: EQUAL
34650: PUSH
34651: LD_VAR 0 2
34655: PPUSH
34656: CALL_OW 264
34660: PUSH
34661: LD_EXP 40
34665: EQUAL
34666: AND
34667: IFFALSE 34688
// MinerDetonateMine ( unit , x , y ) ;
34669: LD_VAR 0 2
34673: PPUSH
34674: LD_VAR 0 4
34678: PPUSH
34679: LD_VAR 0 5
34683: PPUSH
34684: CALL 37318 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34688: LD_VAR 0 1
34692: PUSH
34693: LD_INT 252
34695: EQUAL
34696: PUSH
34697: LD_VAR 0 2
34701: PPUSH
34702: CALL_OW 264
34706: PUSH
34707: LD_EXP 40
34711: EQUAL
34712: AND
34713: IFFALSE 34734
// MinerCreateMinefield ( unit , x , y ) ;
34715: LD_VAR 0 2
34719: PPUSH
34720: LD_VAR 0 4
34724: PPUSH
34725: LD_VAR 0 5
34729: PPUSH
34730: CALL 37735 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34734: LD_VAR 0 1
34738: PUSH
34739: LD_INT 253
34741: EQUAL
34742: PUSH
34743: LD_VAR 0 2
34747: PPUSH
34748: CALL_OW 257
34752: PUSH
34753: LD_INT 5
34755: EQUAL
34756: AND
34757: IFFALSE 34778
// ComBinocular ( unit , x , y ) ;
34759: LD_VAR 0 2
34763: PPUSH
34764: LD_VAR 0 4
34768: PPUSH
34769: LD_VAR 0 5
34773: PPUSH
34774: CALL 38106 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34778: LD_VAR 0 1
34782: PUSH
34783: LD_INT 254
34785: EQUAL
34786: PUSH
34787: LD_VAR 0 2
34791: PPUSH
34792: CALL_OW 264
34796: PUSH
34797: LD_EXP 35
34801: EQUAL
34802: AND
34803: PUSH
34804: LD_VAR 0 3
34808: PPUSH
34809: CALL_OW 263
34813: PUSH
34814: LD_INT 3
34816: EQUAL
34817: AND
34818: IFFALSE 34834
// HackDestroyVehicle ( unit , selectedUnit ) ;
34820: LD_VAR 0 2
34824: PPUSH
34825: LD_VAR 0 3
34829: PPUSH
34830: CALL 36401 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34834: LD_VAR 0 1
34838: PUSH
34839: LD_INT 255
34841: EQUAL
34842: PUSH
34843: LD_VAR 0 2
34847: PPUSH
34848: CALL_OW 264
34852: PUSH
34853: LD_INT 14
34855: PUSH
34856: LD_INT 53
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: IN
34863: AND
34864: PUSH
34865: LD_VAR 0 4
34869: PPUSH
34870: LD_VAR 0 5
34874: PPUSH
34875: CALL_OW 488
34879: AND
34880: IFFALSE 34904
// CutTreeXYR ( unit , x , y , 12 ) ;
34882: LD_VAR 0 2
34886: PPUSH
34887: LD_VAR 0 4
34891: PPUSH
34892: LD_VAR 0 5
34896: PPUSH
34897: LD_INT 12
34899: PPUSH
34900: CALL 34967 0 4
// if cmd = 256 then
34904: LD_VAR 0 1
34908: PUSH
34909: LD_INT 256
34911: EQUAL
34912: IFFALSE 34933
// SetFactoryWaypoint ( unit , x , y ) ;
34914: LD_VAR 0 2
34918: PPUSH
34919: LD_VAR 0 4
34923: PPUSH
34924: LD_VAR 0 5
34928: PPUSH
34929: CALL 32902 0 3
// if cmd = 257 then
34933: LD_VAR 0 1
34937: PUSH
34938: LD_INT 257
34940: EQUAL
34941: IFFALSE 34962
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34943: LD_VAR 0 2
34947: PPUSH
34948: LD_VAR 0 4
34952: PPUSH
34953: LD_VAR 0 5
34957: PPUSH
34958: CALL 33264 0 3
// end ;
34962: LD_VAR 0 6
34966: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34967: LD_INT 0
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
34973: PPUSH
34974: PPUSH
34975: PPUSH
34976: PPUSH
34977: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34978: LD_VAR 0 1
34982: NOT
34983: PUSH
34984: LD_VAR 0 2
34988: PPUSH
34989: LD_VAR 0 3
34993: PPUSH
34994: CALL_OW 488
34998: NOT
34999: OR
35000: PUSH
35001: LD_VAR 0 4
35005: NOT
35006: OR
35007: IFFALSE 35011
// exit ;
35009: GO 35351
// list := [ ] ;
35011: LD_ADDR_VAR 0 13
35015: PUSH
35016: EMPTY
35017: ST_TO_ADDR
// if x - r < 0 then
35018: LD_VAR 0 2
35022: PUSH
35023: LD_VAR 0 4
35027: MINUS
35028: PUSH
35029: LD_INT 0
35031: LESS
35032: IFFALSE 35044
// min_x := 0 else
35034: LD_ADDR_VAR 0 7
35038: PUSH
35039: LD_INT 0
35041: ST_TO_ADDR
35042: GO 35060
// min_x := x - r ;
35044: LD_ADDR_VAR 0 7
35048: PUSH
35049: LD_VAR 0 2
35053: PUSH
35054: LD_VAR 0 4
35058: MINUS
35059: ST_TO_ADDR
// if y - r < 0 then
35060: LD_VAR 0 3
35064: PUSH
35065: LD_VAR 0 4
35069: MINUS
35070: PUSH
35071: LD_INT 0
35073: LESS
35074: IFFALSE 35086
// min_y := 0 else
35076: LD_ADDR_VAR 0 8
35080: PUSH
35081: LD_INT 0
35083: ST_TO_ADDR
35084: GO 35102
// min_y := y - r ;
35086: LD_ADDR_VAR 0 8
35090: PUSH
35091: LD_VAR 0 3
35095: PUSH
35096: LD_VAR 0 4
35100: MINUS
35101: ST_TO_ADDR
// max_x := x + r ;
35102: LD_ADDR_VAR 0 9
35106: PUSH
35107: LD_VAR 0 2
35111: PUSH
35112: LD_VAR 0 4
35116: PLUS
35117: ST_TO_ADDR
// max_y := y + r ;
35118: LD_ADDR_VAR 0 10
35122: PUSH
35123: LD_VAR 0 3
35127: PUSH
35128: LD_VAR 0 4
35132: PLUS
35133: ST_TO_ADDR
// for _x = min_x to max_x do
35134: LD_ADDR_VAR 0 11
35138: PUSH
35139: DOUBLE
35140: LD_VAR 0 7
35144: DEC
35145: ST_TO_ADDR
35146: LD_VAR 0 9
35150: PUSH
35151: FOR_TO
35152: IFFALSE 35269
// for _y = min_y to max_y do
35154: LD_ADDR_VAR 0 12
35158: PUSH
35159: DOUBLE
35160: LD_VAR 0 8
35164: DEC
35165: ST_TO_ADDR
35166: LD_VAR 0 10
35170: PUSH
35171: FOR_TO
35172: IFFALSE 35265
// begin if not ValidHex ( _x , _y ) then
35174: LD_VAR 0 11
35178: PPUSH
35179: LD_VAR 0 12
35183: PPUSH
35184: CALL_OW 488
35188: NOT
35189: IFFALSE 35193
// continue ;
35191: GO 35171
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35193: LD_VAR 0 11
35197: PPUSH
35198: LD_VAR 0 12
35202: PPUSH
35203: CALL_OW 351
35207: PUSH
35208: LD_VAR 0 11
35212: PPUSH
35213: LD_VAR 0 12
35217: PPUSH
35218: CALL_OW 554
35222: AND
35223: IFFALSE 35263
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35225: LD_ADDR_VAR 0 13
35229: PUSH
35230: LD_VAR 0 13
35234: PPUSH
35235: LD_VAR 0 13
35239: PUSH
35240: LD_INT 1
35242: PLUS
35243: PPUSH
35244: LD_VAR 0 11
35248: PUSH
35249: LD_VAR 0 12
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PPUSH
35258: CALL_OW 2
35262: ST_TO_ADDR
// end ;
35263: GO 35171
35265: POP
35266: POP
35267: GO 35151
35269: POP
35270: POP
// if not list then
35271: LD_VAR 0 13
35275: NOT
35276: IFFALSE 35280
// exit ;
35278: GO 35351
// for i in list do
35280: LD_ADDR_VAR 0 6
35284: PUSH
35285: LD_VAR 0 13
35289: PUSH
35290: FOR_IN
35291: IFFALSE 35349
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35293: LD_VAR 0 1
35297: PPUSH
35298: LD_STRING M
35300: PUSH
35301: LD_VAR 0 6
35305: PUSH
35306: LD_INT 1
35308: ARRAY
35309: PUSH
35310: LD_VAR 0 6
35314: PUSH
35315: LD_INT 2
35317: ARRAY
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: PUSH
35340: EMPTY
35341: LIST
35342: PPUSH
35343: CALL_OW 447
35347: GO 35290
35349: POP
35350: POP
// end ;
35351: LD_VAR 0 5
35355: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35356: LD_EXP 112
35360: NOT
35361: IFFALSE 35411
35363: GO 35365
35365: DISABLE
// begin initHack := true ;
35366: LD_ADDR_EXP 112
35370: PUSH
35371: LD_INT 1
35373: ST_TO_ADDR
// hackTanks := [ ] ;
35374: LD_ADDR_EXP 113
35378: PUSH
35379: EMPTY
35380: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35381: LD_ADDR_EXP 114
35385: PUSH
35386: EMPTY
35387: ST_TO_ADDR
// hackLimit := 3 ;
35388: LD_ADDR_EXP 115
35392: PUSH
35393: LD_INT 3
35395: ST_TO_ADDR
// hackDist := 12 ;
35396: LD_ADDR_EXP 116
35400: PUSH
35401: LD_INT 12
35403: ST_TO_ADDR
// hackCounter := [ ] ;
35404: LD_ADDR_EXP 117
35408: PUSH
35409: EMPTY
35410: ST_TO_ADDR
// end ;
35411: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35412: LD_EXP 112
35416: PUSH
35417: LD_INT 34
35419: PUSH
35420: LD_EXP 35
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PPUSH
35429: CALL_OW 69
35433: AND
35434: IFFALSE 35689
35436: GO 35438
35438: DISABLE
35439: LD_INT 0
35441: PPUSH
35442: PPUSH
// begin enable ;
35443: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35444: LD_ADDR_VAR 0 1
35448: PUSH
35449: LD_INT 34
35451: PUSH
35452: LD_EXP 35
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PPUSH
35461: CALL_OW 69
35465: PUSH
35466: FOR_IN
35467: IFFALSE 35687
// begin if not i in hackTanks then
35469: LD_VAR 0 1
35473: PUSH
35474: LD_EXP 113
35478: IN
35479: NOT
35480: IFFALSE 35563
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35482: LD_ADDR_EXP 113
35486: PUSH
35487: LD_EXP 113
35491: PPUSH
35492: LD_EXP 113
35496: PUSH
35497: LD_INT 1
35499: PLUS
35500: PPUSH
35501: LD_VAR 0 1
35505: PPUSH
35506: CALL_OW 1
35510: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35511: LD_ADDR_EXP 114
35515: PUSH
35516: LD_EXP 114
35520: PPUSH
35521: LD_EXP 114
35525: PUSH
35526: LD_INT 1
35528: PLUS
35529: PPUSH
35530: EMPTY
35531: PPUSH
35532: CALL_OW 1
35536: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35537: LD_ADDR_EXP 117
35541: PUSH
35542: LD_EXP 117
35546: PPUSH
35547: LD_EXP 117
35551: PUSH
35552: LD_INT 1
35554: PLUS
35555: PPUSH
35556: EMPTY
35557: PPUSH
35558: CALL_OW 1
35562: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35563: LD_VAR 0 1
35567: PPUSH
35568: CALL_OW 302
35572: NOT
35573: IFFALSE 35586
// begin HackUnlinkAll ( i ) ;
35575: LD_VAR 0 1
35579: PPUSH
35580: CALL 35692 0 1
// continue ;
35584: GO 35466
// end ; HackCheckCapturedStatus ( i ) ;
35586: LD_VAR 0 1
35590: PPUSH
35591: CALL 36135 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35595: LD_ADDR_VAR 0 2
35599: PUSH
35600: LD_INT 81
35602: PUSH
35603: LD_VAR 0 1
35607: PPUSH
35608: CALL_OW 255
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 33
35619: PUSH
35620: LD_INT 3
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 91
35629: PUSH
35630: LD_VAR 0 1
35634: PUSH
35635: LD_EXP 116
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 50
35647: PUSH
35648: EMPTY
35649: LIST
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: PPUSH
35657: CALL_OW 69
35661: ST_TO_ADDR
// if not tmp then
35662: LD_VAR 0 2
35666: NOT
35667: IFFALSE 35671
// continue ;
35669: GO 35466
// HackLink ( i , tmp ) ;
35671: LD_VAR 0 1
35675: PPUSH
35676: LD_VAR 0 2
35680: PPUSH
35681: CALL 35828 0 2
// end ;
35685: GO 35466
35687: POP
35688: POP
// end ;
35689: PPOPN 2
35691: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35692: LD_INT 0
35694: PPUSH
35695: PPUSH
35696: PPUSH
// if not hack in hackTanks then
35697: LD_VAR 0 1
35701: PUSH
35702: LD_EXP 113
35706: IN
35707: NOT
35708: IFFALSE 35712
// exit ;
35710: GO 35823
// index := GetElementIndex ( hackTanks , hack ) ;
35712: LD_ADDR_VAR 0 4
35716: PUSH
35717: LD_EXP 113
35721: PPUSH
35722: LD_VAR 0 1
35726: PPUSH
35727: CALL 43450 0 2
35731: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35732: LD_EXP 114
35736: PUSH
35737: LD_VAR 0 4
35741: ARRAY
35742: IFFALSE 35823
// begin for i in hackTanksCaptured [ index ] do
35744: LD_ADDR_VAR 0 3
35748: PUSH
35749: LD_EXP 114
35753: PUSH
35754: LD_VAR 0 4
35758: ARRAY
35759: PUSH
35760: FOR_IN
35761: IFFALSE 35787
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35763: LD_VAR 0 3
35767: PUSH
35768: LD_INT 1
35770: ARRAY
35771: PPUSH
35772: LD_VAR 0 3
35776: PUSH
35777: LD_INT 2
35779: ARRAY
35780: PPUSH
35781: CALL_OW 235
35785: GO 35760
35787: POP
35788: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35789: LD_ADDR_EXP 114
35793: PUSH
35794: LD_EXP 114
35798: PPUSH
35799: LD_VAR 0 4
35803: PPUSH
35804: EMPTY
35805: PPUSH
35806: CALL_OW 1
35810: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35811: LD_VAR 0 1
35815: PPUSH
35816: LD_INT 0
35818: PPUSH
35819: CALL_OW 505
// end ; end ;
35823: LD_VAR 0 2
35827: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35828: LD_INT 0
35830: PPUSH
35831: PPUSH
35832: PPUSH
// if not hack in hackTanks or not vehicles then
35833: LD_VAR 0 1
35837: PUSH
35838: LD_EXP 113
35842: IN
35843: NOT
35844: PUSH
35845: LD_VAR 0 2
35849: NOT
35850: OR
35851: IFFALSE 35855
// exit ;
35853: GO 36130
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35855: LD_ADDR_VAR 0 2
35859: PUSH
35860: LD_VAR 0 1
35864: PPUSH
35865: LD_VAR 0 2
35869: PPUSH
35870: LD_INT 1
35872: PPUSH
35873: LD_INT 1
35875: PPUSH
35876: CALL 44100 0 4
35880: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35881: LD_ADDR_VAR 0 5
35885: PUSH
35886: LD_EXP 113
35890: PPUSH
35891: LD_VAR 0 1
35895: PPUSH
35896: CALL 43450 0 2
35900: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35901: LD_EXP 114
35905: PUSH
35906: LD_VAR 0 5
35910: ARRAY
35911: PUSH
35912: LD_EXP 115
35916: LESS
35917: IFFALSE 36106
// begin for i := 1 to vehicles do
35919: LD_ADDR_VAR 0 4
35923: PUSH
35924: DOUBLE
35925: LD_INT 1
35927: DEC
35928: ST_TO_ADDR
35929: LD_VAR 0 2
35933: PUSH
35934: FOR_TO
35935: IFFALSE 36104
// begin if hackTanksCaptured [ index ] = hackLimit then
35937: LD_EXP 114
35941: PUSH
35942: LD_VAR 0 5
35946: ARRAY
35947: PUSH
35948: LD_EXP 115
35952: EQUAL
35953: IFFALSE 35957
// break ;
35955: GO 36104
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35957: LD_ADDR_EXP 117
35961: PUSH
35962: LD_EXP 117
35966: PPUSH
35967: LD_VAR 0 5
35971: PPUSH
35972: LD_EXP 117
35976: PUSH
35977: LD_VAR 0 5
35981: ARRAY
35982: PUSH
35983: LD_INT 1
35985: PLUS
35986: PPUSH
35987: CALL_OW 1
35991: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35992: LD_ADDR_EXP 114
35996: PUSH
35997: LD_EXP 114
36001: PPUSH
36002: LD_VAR 0 5
36006: PUSH
36007: LD_EXP 114
36011: PUSH
36012: LD_VAR 0 5
36016: ARRAY
36017: PUSH
36018: LD_INT 1
36020: PLUS
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PPUSH
36026: LD_VAR 0 2
36030: PUSH
36031: LD_VAR 0 4
36035: ARRAY
36036: PUSH
36037: LD_VAR 0 2
36041: PUSH
36042: LD_VAR 0 4
36046: ARRAY
36047: PPUSH
36048: CALL_OW 255
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PPUSH
36057: CALL 43665 0 3
36061: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36062: LD_VAR 0 2
36066: PUSH
36067: LD_VAR 0 4
36071: ARRAY
36072: PPUSH
36073: LD_VAR 0 1
36077: PPUSH
36078: CALL_OW 255
36082: PPUSH
36083: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36087: LD_VAR 0 2
36091: PUSH
36092: LD_VAR 0 4
36096: ARRAY
36097: PPUSH
36098: CALL_OW 141
// end ;
36102: GO 35934
36104: POP
36105: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36106: LD_VAR 0 1
36110: PPUSH
36111: LD_EXP 114
36115: PUSH
36116: LD_VAR 0 5
36120: ARRAY
36121: PUSH
36122: LD_INT 0
36124: PLUS
36125: PPUSH
36126: CALL_OW 505
// end ;
36130: LD_VAR 0 3
36134: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36135: LD_INT 0
36137: PPUSH
36138: PPUSH
36139: PPUSH
36140: PPUSH
// if not hack in hackTanks then
36141: LD_VAR 0 1
36145: PUSH
36146: LD_EXP 113
36150: IN
36151: NOT
36152: IFFALSE 36156
// exit ;
36154: GO 36396
// index := GetElementIndex ( hackTanks , hack ) ;
36156: LD_ADDR_VAR 0 4
36160: PUSH
36161: LD_EXP 113
36165: PPUSH
36166: LD_VAR 0 1
36170: PPUSH
36171: CALL 43450 0 2
36175: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36176: LD_ADDR_VAR 0 3
36180: PUSH
36181: DOUBLE
36182: LD_EXP 114
36186: PUSH
36187: LD_VAR 0 4
36191: ARRAY
36192: INC
36193: ST_TO_ADDR
36194: LD_INT 1
36196: PUSH
36197: FOR_DOWNTO
36198: IFFALSE 36370
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36200: LD_ADDR_VAR 0 5
36204: PUSH
36205: LD_EXP 114
36209: PUSH
36210: LD_VAR 0 4
36214: ARRAY
36215: PUSH
36216: LD_VAR 0 3
36220: ARRAY
36221: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36222: LD_VAR 0 5
36226: PUSH
36227: LD_INT 1
36229: ARRAY
36230: PPUSH
36231: CALL_OW 302
36235: NOT
36236: PUSH
36237: LD_VAR 0 5
36241: PUSH
36242: LD_INT 1
36244: ARRAY
36245: PPUSH
36246: CALL_OW 255
36250: PUSH
36251: LD_VAR 0 1
36255: PPUSH
36256: CALL_OW 255
36260: NONEQUAL
36261: OR
36262: IFFALSE 36368
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36264: LD_VAR 0 5
36268: PUSH
36269: LD_INT 1
36271: ARRAY
36272: PPUSH
36273: CALL_OW 305
36277: PUSH
36278: LD_VAR 0 5
36282: PUSH
36283: LD_INT 1
36285: ARRAY
36286: PPUSH
36287: CALL_OW 255
36291: PUSH
36292: LD_VAR 0 1
36296: PPUSH
36297: CALL_OW 255
36301: EQUAL
36302: AND
36303: IFFALSE 36327
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36305: LD_VAR 0 5
36309: PUSH
36310: LD_INT 1
36312: ARRAY
36313: PPUSH
36314: LD_VAR 0 5
36318: PUSH
36319: LD_INT 2
36321: ARRAY
36322: PPUSH
36323: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36327: LD_ADDR_EXP 114
36331: PUSH
36332: LD_EXP 114
36336: PPUSH
36337: LD_VAR 0 4
36341: PPUSH
36342: LD_EXP 114
36346: PUSH
36347: LD_VAR 0 4
36351: ARRAY
36352: PPUSH
36353: LD_VAR 0 3
36357: PPUSH
36358: CALL_OW 3
36362: PPUSH
36363: CALL_OW 1
36367: ST_TO_ADDR
// end ; end ;
36368: GO 36197
36370: POP
36371: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36372: LD_VAR 0 1
36376: PPUSH
36377: LD_EXP 114
36381: PUSH
36382: LD_VAR 0 4
36386: ARRAY
36387: PUSH
36388: LD_INT 0
36390: PLUS
36391: PPUSH
36392: CALL_OW 505
// end ;
36396: LD_VAR 0 2
36400: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36401: LD_INT 0
36403: PPUSH
36404: PPUSH
36405: PPUSH
36406: PPUSH
// if not hack in hackTanks then
36407: LD_VAR 0 1
36411: PUSH
36412: LD_EXP 113
36416: IN
36417: NOT
36418: IFFALSE 36422
// exit ;
36420: GO 36507
// index := GetElementIndex ( hackTanks , hack ) ;
36422: LD_ADDR_VAR 0 5
36426: PUSH
36427: LD_EXP 113
36431: PPUSH
36432: LD_VAR 0 1
36436: PPUSH
36437: CALL 43450 0 2
36441: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36442: LD_ADDR_VAR 0 4
36446: PUSH
36447: DOUBLE
36448: LD_INT 1
36450: DEC
36451: ST_TO_ADDR
36452: LD_EXP 114
36456: PUSH
36457: LD_VAR 0 5
36461: ARRAY
36462: PUSH
36463: FOR_TO
36464: IFFALSE 36505
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36466: LD_EXP 114
36470: PUSH
36471: LD_VAR 0 5
36475: ARRAY
36476: PUSH
36477: LD_VAR 0 4
36481: ARRAY
36482: PUSH
36483: LD_INT 1
36485: ARRAY
36486: PUSH
36487: LD_VAR 0 2
36491: EQUAL
36492: IFFALSE 36503
// KillUnit ( vehicle ) ;
36494: LD_VAR 0 2
36498: PPUSH
36499: CALL_OW 66
36503: GO 36463
36505: POP
36506: POP
// end ;
36507: LD_VAR 0 3
36511: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36512: LD_EXP 118
36516: NOT
36517: IFFALSE 36552
36519: GO 36521
36521: DISABLE
// begin initMiner := true ;
36522: LD_ADDR_EXP 118
36526: PUSH
36527: LD_INT 1
36529: ST_TO_ADDR
// minersList := [ ] ;
36530: LD_ADDR_EXP 119
36534: PUSH
36535: EMPTY
36536: ST_TO_ADDR
// minerMinesList := [ ] ;
36537: LD_ADDR_EXP 120
36541: PUSH
36542: EMPTY
36543: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36544: LD_ADDR_EXP 121
36548: PUSH
36549: LD_INT 5
36551: ST_TO_ADDR
// end ;
36552: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36553: LD_EXP 118
36557: PUSH
36558: LD_INT 34
36560: PUSH
36561: LD_EXP 40
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PPUSH
36570: CALL_OW 69
36574: AND
36575: IFFALSE 37038
36577: GO 36579
36579: DISABLE
36580: LD_INT 0
36582: PPUSH
36583: PPUSH
36584: PPUSH
36585: PPUSH
// begin enable ;
36586: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36587: LD_ADDR_VAR 0 1
36591: PUSH
36592: LD_INT 34
36594: PUSH
36595: LD_EXP 40
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PPUSH
36604: CALL_OW 69
36608: PUSH
36609: FOR_IN
36610: IFFALSE 36682
// begin if not i in minersList then
36612: LD_VAR 0 1
36616: PUSH
36617: LD_EXP 119
36621: IN
36622: NOT
36623: IFFALSE 36680
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36625: LD_ADDR_EXP 119
36629: PUSH
36630: LD_EXP 119
36634: PPUSH
36635: LD_EXP 119
36639: PUSH
36640: LD_INT 1
36642: PLUS
36643: PPUSH
36644: LD_VAR 0 1
36648: PPUSH
36649: CALL_OW 1
36653: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36654: LD_ADDR_EXP 120
36658: PUSH
36659: LD_EXP 120
36663: PPUSH
36664: LD_EXP 120
36668: PUSH
36669: LD_INT 1
36671: PLUS
36672: PPUSH
36673: EMPTY
36674: PPUSH
36675: CALL_OW 1
36679: ST_TO_ADDR
// end end ;
36680: GO 36609
36682: POP
36683: POP
// for i := minerMinesList downto 1 do
36684: LD_ADDR_VAR 0 1
36688: PUSH
36689: DOUBLE
36690: LD_EXP 120
36694: INC
36695: ST_TO_ADDR
36696: LD_INT 1
36698: PUSH
36699: FOR_DOWNTO
36700: IFFALSE 37036
// begin if IsLive ( minersList [ i ] ) then
36702: LD_EXP 119
36706: PUSH
36707: LD_VAR 0 1
36711: ARRAY
36712: PPUSH
36713: CALL_OW 300
36717: IFFALSE 36745
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36719: LD_EXP 119
36723: PUSH
36724: LD_VAR 0 1
36728: ARRAY
36729: PPUSH
36730: LD_EXP 120
36734: PUSH
36735: LD_VAR 0 1
36739: ARRAY
36740: PPUSH
36741: CALL_OW 505
// if not minerMinesList [ i ] then
36745: LD_EXP 120
36749: PUSH
36750: LD_VAR 0 1
36754: ARRAY
36755: NOT
36756: IFFALSE 36760
// continue ;
36758: GO 36699
// for j := minerMinesList [ i ] downto 1 do
36760: LD_ADDR_VAR 0 2
36764: PUSH
36765: DOUBLE
36766: LD_EXP 120
36770: PUSH
36771: LD_VAR 0 1
36775: ARRAY
36776: INC
36777: ST_TO_ADDR
36778: LD_INT 1
36780: PUSH
36781: FOR_DOWNTO
36782: IFFALSE 37032
// begin side := GetSide ( minersList [ i ] ) ;
36784: LD_ADDR_VAR 0 3
36788: PUSH
36789: LD_EXP 119
36793: PUSH
36794: LD_VAR 0 1
36798: ARRAY
36799: PPUSH
36800: CALL_OW 255
36804: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36805: LD_ADDR_VAR 0 4
36809: PUSH
36810: LD_EXP 120
36814: PUSH
36815: LD_VAR 0 1
36819: ARRAY
36820: PUSH
36821: LD_VAR 0 2
36825: ARRAY
36826: PUSH
36827: LD_INT 1
36829: ARRAY
36830: PPUSH
36831: LD_EXP 120
36835: PUSH
36836: LD_VAR 0 1
36840: ARRAY
36841: PUSH
36842: LD_VAR 0 2
36846: ARRAY
36847: PUSH
36848: LD_INT 2
36850: ARRAY
36851: PPUSH
36852: CALL_OW 428
36856: ST_TO_ADDR
// if not tmp then
36857: LD_VAR 0 4
36861: NOT
36862: IFFALSE 36866
// continue ;
36864: GO 36781
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36866: LD_VAR 0 4
36870: PUSH
36871: LD_INT 81
36873: PUSH
36874: LD_VAR 0 3
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PPUSH
36883: CALL_OW 69
36887: IN
36888: PUSH
36889: LD_EXP 120
36893: PUSH
36894: LD_VAR 0 1
36898: ARRAY
36899: PUSH
36900: LD_VAR 0 2
36904: ARRAY
36905: PUSH
36906: LD_INT 1
36908: ARRAY
36909: PPUSH
36910: LD_EXP 120
36914: PUSH
36915: LD_VAR 0 1
36919: ARRAY
36920: PUSH
36921: LD_VAR 0 2
36925: ARRAY
36926: PUSH
36927: LD_INT 2
36929: ARRAY
36930: PPUSH
36931: CALL_OW 458
36935: AND
36936: IFFALSE 37030
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36938: LD_EXP 120
36942: PUSH
36943: LD_VAR 0 1
36947: ARRAY
36948: PUSH
36949: LD_VAR 0 2
36953: ARRAY
36954: PUSH
36955: LD_INT 1
36957: ARRAY
36958: PPUSH
36959: LD_EXP 120
36963: PUSH
36964: LD_VAR 0 1
36968: ARRAY
36969: PUSH
36970: LD_VAR 0 2
36974: ARRAY
36975: PUSH
36976: LD_INT 2
36978: ARRAY
36979: PPUSH
36980: LD_VAR 0 3
36984: PPUSH
36985: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36989: LD_ADDR_EXP 120
36993: PUSH
36994: LD_EXP 120
36998: PPUSH
36999: LD_VAR 0 1
37003: PPUSH
37004: LD_EXP 120
37008: PUSH
37009: LD_VAR 0 1
37013: ARRAY
37014: PPUSH
37015: LD_VAR 0 2
37019: PPUSH
37020: CALL_OW 3
37024: PPUSH
37025: CALL_OW 1
37029: ST_TO_ADDR
// end ; end ;
37030: GO 36781
37032: POP
37033: POP
// end ;
37034: GO 36699
37036: POP
37037: POP
// end ;
37038: PPOPN 4
37040: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37041: LD_INT 0
37043: PPUSH
37044: PPUSH
// result := false ;
37045: LD_ADDR_VAR 0 4
37049: PUSH
37050: LD_INT 0
37052: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37053: LD_VAR 0 1
37057: PPUSH
37058: CALL_OW 264
37062: PUSH
37063: LD_EXP 40
37067: EQUAL
37068: NOT
37069: IFFALSE 37073
// exit ;
37071: GO 37313
// index := GetElementIndex ( minersList , unit ) ;
37073: LD_ADDR_VAR 0 5
37077: PUSH
37078: LD_EXP 119
37082: PPUSH
37083: LD_VAR 0 1
37087: PPUSH
37088: CALL 43450 0 2
37092: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37093: LD_EXP 120
37097: PUSH
37098: LD_VAR 0 5
37102: ARRAY
37103: PUSH
37104: LD_EXP 121
37108: GREATEREQUAL
37109: IFFALSE 37113
// exit ;
37111: GO 37313
// ComMoveXY ( unit , x , y ) ;
37113: LD_VAR 0 1
37117: PPUSH
37118: LD_VAR 0 2
37122: PPUSH
37123: LD_VAR 0 3
37127: PPUSH
37128: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37132: LD_INT 35
37134: PPUSH
37135: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37139: LD_VAR 0 1
37143: PPUSH
37144: LD_VAR 0 2
37148: PPUSH
37149: LD_VAR 0 3
37153: PPUSH
37154: CALL 74736 0 3
37158: NOT
37159: PUSH
37160: LD_VAR 0 1
37164: PPUSH
37165: CALL_OW 314
37169: AND
37170: IFFALSE 37174
// exit ;
37172: GO 37313
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37174: LD_VAR 0 2
37178: PPUSH
37179: LD_VAR 0 3
37183: PPUSH
37184: CALL_OW 428
37188: PUSH
37189: LD_VAR 0 1
37193: EQUAL
37194: PUSH
37195: LD_VAR 0 1
37199: PPUSH
37200: CALL_OW 314
37204: NOT
37205: AND
37206: IFFALSE 37132
// PlaySoundXY ( x , y , PlantMine ) ;
37208: LD_VAR 0 2
37212: PPUSH
37213: LD_VAR 0 3
37217: PPUSH
37218: LD_STRING PlantMine
37220: PPUSH
37221: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37225: LD_VAR 0 2
37229: PPUSH
37230: LD_VAR 0 3
37234: PPUSH
37235: LD_VAR 0 1
37239: PPUSH
37240: CALL_OW 255
37244: PPUSH
37245: LD_INT 0
37247: PPUSH
37248: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37252: LD_ADDR_EXP 120
37256: PUSH
37257: LD_EXP 120
37261: PPUSH
37262: LD_VAR 0 5
37266: PUSH
37267: LD_EXP 120
37271: PUSH
37272: LD_VAR 0 5
37276: ARRAY
37277: PUSH
37278: LD_INT 1
37280: PLUS
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PPUSH
37286: LD_VAR 0 2
37290: PUSH
37291: LD_VAR 0 3
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PPUSH
37300: CALL 43665 0 3
37304: ST_TO_ADDR
// result := true ;
37305: LD_ADDR_VAR 0 4
37309: PUSH
37310: LD_INT 1
37312: ST_TO_ADDR
// end ;
37313: LD_VAR 0 4
37317: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37318: LD_INT 0
37320: PPUSH
37321: PPUSH
37322: PPUSH
// if not unit in minersList then
37323: LD_VAR 0 1
37327: PUSH
37328: LD_EXP 119
37332: IN
37333: NOT
37334: IFFALSE 37338
// exit ;
37336: GO 37730
// index := GetElementIndex ( minersList , unit ) ;
37338: LD_ADDR_VAR 0 6
37342: PUSH
37343: LD_EXP 119
37347: PPUSH
37348: LD_VAR 0 1
37352: PPUSH
37353: CALL 43450 0 2
37357: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37358: LD_ADDR_VAR 0 5
37362: PUSH
37363: DOUBLE
37364: LD_EXP 120
37368: PUSH
37369: LD_VAR 0 6
37373: ARRAY
37374: INC
37375: ST_TO_ADDR
37376: LD_INT 1
37378: PUSH
37379: FOR_DOWNTO
37380: IFFALSE 37541
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37382: LD_EXP 120
37386: PUSH
37387: LD_VAR 0 6
37391: ARRAY
37392: PUSH
37393: LD_VAR 0 5
37397: ARRAY
37398: PUSH
37399: LD_INT 1
37401: ARRAY
37402: PUSH
37403: LD_VAR 0 2
37407: EQUAL
37408: PUSH
37409: LD_EXP 120
37413: PUSH
37414: LD_VAR 0 6
37418: ARRAY
37419: PUSH
37420: LD_VAR 0 5
37424: ARRAY
37425: PUSH
37426: LD_INT 2
37428: ARRAY
37429: PUSH
37430: LD_VAR 0 3
37434: EQUAL
37435: AND
37436: IFFALSE 37539
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37438: LD_EXP 120
37442: PUSH
37443: LD_VAR 0 6
37447: ARRAY
37448: PUSH
37449: LD_VAR 0 5
37453: ARRAY
37454: PUSH
37455: LD_INT 1
37457: ARRAY
37458: PPUSH
37459: LD_EXP 120
37463: PUSH
37464: LD_VAR 0 6
37468: ARRAY
37469: PUSH
37470: LD_VAR 0 5
37474: ARRAY
37475: PUSH
37476: LD_INT 2
37478: ARRAY
37479: PPUSH
37480: LD_VAR 0 1
37484: PPUSH
37485: CALL_OW 255
37489: PPUSH
37490: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37494: LD_ADDR_EXP 120
37498: PUSH
37499: LD_EXP 120
37503: PPUSH
37504: LD_VAR 0 6
37508: PPUSH
37509: LD_EXP 120
37513: PUSH
37514: LD_VAR 0 6
37518: ARRAY
37519: PPUSH
37520: LD_VAR 0 5
37524: PPUSH
37525: CALL_OW 3
37529: PPUSH
37530: CALL_OW 1
37534: ST_TO_ADDR
// exit ;
37535: POP
37536: POP
37537: GO 37730
// end ; end ;
37539: GO 37379
37541: POP
37542: POP
// for i := minerMinesList [ index ] downto 1 do
37543: LD_ADDR_VAR 0 5
37547: PUSH
37548: DOUBLE
37549: LD_EXP 120
37553: PUSH
37554: LD_VAR 0 6
37558: ARRAY
37559: INC
37560: ST_TO_ADDR
37561: LD_INT 1
37563: PUSH
37564: FOR_DOWNTO
37565: IFFALSE 37728
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37567: LD_EXP 120
37571: PUSH
37572: LD_VAR 0 6
37576: ARRAY
37577: PUSH
37578: LD_VAR 0 5
37582: ARRAY
37583: PUSH
37584: LD_INT 1
37586: ARRAY
37587: PPUSH
37588: LD_EXP 120
37592: PUSH
37593: LD_VAR 0 6
37597: ARRAY
37598: PUSH
37599: LD_VAR 0 5
37603: ARRAY
37604: PUSH
37605: LD_INT 2
37607: ARRAY
37608: PPUSH
37609: LD_VAR 0 2
37613: PPUSH
37614: LD_VAR 0 3
37618: PPUSH
37619: CALL_OW 298
37623: PUSH
37624: LD_INT 6
37626: LESS
37627: IFFALSE 37726
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37629: LD_EXP 120
37633: PUSH
37634: LD_VAR 0 6
37638: ARRAY
37639: PUSH
37640: LD_VAR 0 5
37644: ARRAY
37645: PUSH
37646: LD_INT 1
37648: ARRAY
37649: PPUSH
37650: LD_EXP 120
37654: PUSH
37655: LD_VAR 0 6
37659: ARRAY
37660: PUSH
37661: LD_VAR 0 5
37665: ARRAY
37666: PUSH
37667: LD_INT 2
37669: ARRAY
37670: PPUSH
37671: LD_VAR 0 1
37675: PPUSH
37676: CALL_OW 255
37680: PPUSH
37681: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37685: LD_ADDR_EXP 120
37689: PUSH
37690: LD_EXP 120
37694: PPUSH
37695: LD_VAR 0 6
37699: PPUSH
37700: LD_EXP 120
37704: PUSH
37705: LD_VAR 0 6
37709: ARRAY
37710: PPUSH
37711: LD_VAR 0 5
37715: PPUSH
37716: CALL_OW 3
37720: PPUSH
37721: CALL_OW 1
37725: ST_TO_ADDR
// end ; end ;
37726: GO 37564
37728: POP
37729: POP
// end ;
37730: LD_VAR 0 4
37734: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37735: LD_INT 0
37737: PPUSH
37738: PPUSH
37739: PPUSH
37740: PPUSH
37741: PPUSH
37742: PPUSH
37743: PPUSH
37744: PPUSH
37745: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37746: LD_VAR 0 1
37750: PPUSH
37751: CALL_OW 264
37755: PUSH
37756: LD_EXP 40
37760: EQUAL
37761: NOT
37762: PUSH
37763: LD_VAR 0 1
37767: PUSH
37768: LD_EXP 119
37772: IN
37773: NOT
37774: OR
37775: IFFALSE 37779
// exit ;
37777: GO 38101
// index := GetElementIndex ( minersList , unit ) ;
37779: LD_ADDR_VAR 0 6
37783: PUSH
37784: LD_EXP 119
37788: PPUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: CALL 43450 0 2
37798: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37799: LD_ADDR_VAR 0 8
37803: PUSH
37804: LD_EXP 121
37808: PUSH
37809: LD_EXP 120
37813: PUSH
37814: LD_VAR 0 6
37818: ARRAY
37819: MINUS
37820: ST_TO_ADDR
// if not minesFreeAmount then
37821: LD_VAR 0 8
37825: NOT
37826: IFFALSE 37830
// exit ;
37828: GO 38101
// tmp := [ ] ;
37830: LD_ADDR_VAR 0 7
37834: PUSH
37835: EMPTY
37836: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37837: LD_ADDR_VAR 0 5
37841: PUSH
37842: DOUBLE
37843: LD_INT 1
37845: DEC
37846: ST_TO_ADDR
37847: LD_VAR 0 8
37851: PUSH
37852: FOR_TO
37853: IFFALSE 38048
// begin _d := rand ( 0 , 5 ) ;
37855: LD_ADDR_VAR 0 11
37859: PUSH
37860: LD_INT 0
37862: PPUSH
37863: LD_INT 5
37865: PPUSH
37866: CALL_OW 12
37870: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37871: LD_ADDR_VAR 0 12
37875: PUSH
37876: LD_INT 2
37878: PPUSH
37879: LD_INT 6
37881: PPUSH
37882: CALL_OW 12
37886: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37887: LD_ADDR_VAR 0 9
37891: PUSH
37892: LD_VAR 0 2
37896: PPUSH
37897: LD_VAR 0 11
37901: PPUSH
37902: LD_VAR 0 12
37906: PPUSH
37907: CALL_OW 272
37911: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37912: LD_ADDR_VAR 0 10
37916: PUSH
37917: LD_VAR 0 3
37921: PPUSH
37922: LD_VAR 0 11
37926: PPUSH
37927: LD_VAR 0 12
37931: PPUSH
37932: CALL_OW 273
37936: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37937: LD_VAR 0 9
37941: PPUSH
37942: LD_VAR 0 10
37946: PPUSH
37947: CALL_OW 488
37951: PUSH
37952: LD_VAR 0 9
37956: PUSH
37957: LD_VAR 0 10
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_VAR 0 7
37970: IN
37971: NOT
37972: AND
37973: PUSH
37974: LD_VAR 0 9
37978: PPUSH
37979: LD_VAR 0 10
37983: PPUSH
37984: CALL_OW 458
37988: NOT
37989: AND
37990: IFFALSE 38032
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37992: LD_ADDR_VAR 0 7
37996: PUSH
37997: LD_VAR 0 7
38001: PPUSH
38002: LD_VAR 0 7
38006: PUSH
38007: LD_INT 1
38009: PLUS
38010: PPUSH
38011: LD_VAR 0 9
38015: PUSH
38016: LD_VAR 0 10
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PPUSH
38025: CALL_OW 1
38029: ST_TO_ADDR
38030: GO 38046
// i := i - 1 ;
38032: LD_ADDR_VAR 0 5
38036: PUSH
38037: LD_VAR 0 5
38041: PUSH
38042: LD_INT 1
38044: MINUS
38045: ST_TO_ADDR
// end ;
38046: GO 37852
38048: POP
38049: POP
// for i in tmp do
38050: LD_ADDR_VAR 0 5
38054: PUSH
38055: LD_VAR 0 7
38059: PUSH
38060: FOR_IN
38061: IFFALSE 38099
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38063: LD_VAR 0 1
38067: PPUSH
38068: LD_VAR 0 5
38072: PUSH
38073: LD_INT 1
38075: ARRAY
38076: PPUSH
38077: LD_VAR 0 5
38081: PUSH
38082: LD_INT 2
38084: ARRAY
38085: PPUSH
38086: CALL 37041 0 3
38090: NOT
38091: IFFALSE 38097
// exit ;
38093: POP
38094: POP
38095: GO 38101
38097: GO 38060
38099: POP
38100: POP
// end ;
38101: LD_VAR 0 4
38105: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38106: LD_INT 0
38108: PPUSH
38109: PPUSH
38110: PPUSH
38111: PPUSH
38112: PPUSH
38113: PPUSH
38114: PPUSH
// if not GetClass ( unit ) = class_sniper then
38115: LD_VAR 0 1
38119: PPUSH
38120: CALL_OW 257
38124: PUSH
38125: LD_INT 5
38127: EQUAL
38128: NOT
38129: IFFALSE 38133
// exit ;
38131: GO 38521
// dist := 8 ;
38133: LD_ADDR_VAR 0 5
38137: PUSH
38138: LD_INT 8
38140: ST_TO_ADDR
// viewRange := 12 ;
38141: LD_ADDR_VAR 0 7
38145: PUSH
38146: LD_INT 12
38148: ST_TO_ADDR
// side := GetSide ( unit ) ;
38149: LD_ADDR_VAR 0 6
38153: PUSH
38154: LD_VAR 0 1
38158: PPUSH
38159: CALL_OW 255
38163: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38164: LD_INT 61
38166: PPUSH
38167: LD_VAR 0 6
38171: PPUSH
38172: CALL_OW 321
38176: PUSH
38177: LD_INT 2
38179: EQUAL
38180: IFFALSE 38190
// viewRange := 16 ;
38182: LD_ADDR_VAR 0 7
38186: PUSH
38187: LD_INT 16
38189: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38190: LD_VAR 0 1
38194: PPUSH
38195: LD_VAR 0 2
38199: PPUSH
38200: LD_VAR 0 3
38204: PPUSH
38205: CALL_OW 297
38209: PUSH
38210: LD_VAR 0 5
38214: GREATER
38215: IFFALSE 38294
// begin ComMoveXY ( unit , x , y ) ;
38217: LD_VAR 0 1
38221: PPUSH
38222: LD_VAR 0 2
38226: PPUSH
38227: LD_VAR 0 3
38231: PPUSH
38232: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38236: LD_INT 35
38238: PPUSH
38239: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38243: LD_VAR 0 1
38247: PPUSH
38248: LD_VAR 0 2
38252: PPUSH
38253: LD_VAR 0 3
38257: PPUSH
38258: CALL 74736 0 3
38262: NOT
38263: IFFALSE 38267
// exit ;
38265: GO 38521
// until GetDistUnitXY ( unit , x , y ) < dist ;
38267: LD_VAR 0 1
38271: PPUSH
38272: LD_VAR 0 2
38276: PPUSH
38277: LD_VAR 0 3
38281: PPUSH
38282: CALL_OW 297
38286: PUSH
38287: LD_VAR 0 5
38291: LESS
38292: IFFALSE 38236
// end ; ComTurnXY ( unit , x , y ) ;
38294: LD_VAR 0 1
38298: PPUSH
38299: LD_VAR 0 2
38303: PPUSH
38304: LD_VAR 0 3
38308: PPUSH
38309: CALL_OW 118
// wait ( 5 ) ;
38313: LD_INT 5
38315: PPUSH
38316: CALL_OW 67
// _d := GetDir ( unit ) ;
38320: LD_ADDR_VAR 0 10
38324: PUSH
38325: LD_VAR 0 1
38329: PPUSH
38330: CALL_OW 254
38334: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38335: LD_ADDR_VAR 0 8
38339: PUSH
38340: LD_VAR 0 1
38344: PPUSH
38345: CALL_OW 250
38349: PPUSH
38350: LD_VAR 0 10
38354: PPUSH
38355: LD_VAR 0 5
38359: PPUSH
38360: CALL_OW 272
38364: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38365: LD_ADDR_VAR 0 9
38369: PUSH
38370: LD_VAR 0 1
38374: PPUSH
38375: CALL_OW 251
38379: PPUSH
38380: LD_VAR 0 10
38384: PPUSH
38385: LD_VAR 0 5
38389: PPUSH
38390: CALL_OW 273
38394: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38395: LD_VAR 0 8
38399: PPUSH
38400: LD_VAR 0 9
38404: PPUSH
38405: CALL_OW 488
38409: NOT
38410: IFFALSE 38414
// exit ;
38412: GO 38521
// ComAnimCustom ( unit , 1 ) ;
38414: LD_VAR 0 1
38418: PPUSH
38419: LD_INT 1
38421: PPUSH
38422: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38426: LD_VAR 0 8
38430: PPUSH
38431: LD_VAR 0 9
38435: PPUSH
38436: LD_VAR 0 6
38440: PPUSH
38441: LD_VAR 0 7
38445: PPUSH
38446: CALL_OW 330
// repeat wait ( 1 ) ;
38450: LD_INT 1
38452: PPUSH
38453: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38457: LD_VAR 0 1
38461: PPUSH
38462: CALL_OW 316
38466: PUSH
38467: LD_VAR 0 1
38471: PPUSH
38472: CALL_OW 314
38476: OR
38477: PUSH
38478: LD_VAR 0 1
38482: PPUSH
38483: CALL_OW 302
38487: NOT
38488: OR
38489: PUSH
38490: LD_VAR 0 1
38494: PPUSH
38495: CALL_OW 301
38499: OR
38500: IFFALSE 38450
// RemoveSeeing ( _x , _y , side ) ;
38502: LD_VAR 0 8
38506: PPUSH
38507: LD_VAR 0 9
38511: PPUSH
38512: LD_VAR 0 6
38516: PPUSH
38517: CALL_OW 331
// end ; end_of_file
38521: LD_VAR 0 4
38525: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38526: LD_INT 0
38528: PPUSH
38529: PPUSH
// if exist_mode then
38530: LD_VAR 0 2
38534: IFFALSE 38559
// unit := CreateCharacter ( prefix & ident ) else
38536: LD_ADDR_VAR 0 5
38540: PUSH
38541: LD_VAR 0 3
38545: PUSH
38546: LD_VAR 0 1
38550: STR
38551: PPUSH
38552: CALL_OW 34
38556: ST_TO_ADDR
38557: GO 38574
// unit := NewCharacter ( ident ) ;
38559: LD_ADDR_VAR 0 5
38563: PUSH
38564: LD_VAR 0 1
38568: PPUSH
38569: CALL_OW 25
38573: ST_TO_ADDR
// result := unit ;
38574: LD_ADDR_VAR 0 4
38578: PUSH
38579: LD_VAR 0 5
38583: ST_TO_ADDR
// end ;
38584: LD_VAR 0 4
38588: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38589: LD_INT 0
38591: PPUSH
38592: PPUSH
// if not side or not nation then
38593: LD_VAR 0 1
38597: NOT
38598: PUSH
38599: LD_VAR 0 2
38603: NOT
38604: OR
38605: IFFALSE 38609
// exit ;
38607: GO 39377
// case nation of nation_american :
38609: LD_VAR 0 2
38613: PUSH
38614: LD_INT 1
38616: DOUBLE
38617: EQUAL
38618: IFTRUE 38622
38620: GO 38836
38622: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38623: LD_ADDR_VAR 0 4
38627: PUSH
38628: LD_INT 35
38630: PUSH
38631: LD_INT 45
38633: PUSH
38634: LD_INT 46
38636: PUSH
38637: LD_INT 47
38639: PUSH
38640: LD_INT 82
38642: PUSH
38643: LD_INT 83
38645: PUSH
38646: LD_INT 84
38648: PUSH
38649: LD_INT 85
38651: PUSH
38652: LD_INT 86
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: LD_INT 2
38660: PUSH
38661: LD_INT 6
38663: PUSH
38664: LD_INT 15
38666: PUSH
38667: LD_INT 16
38669: PUSH
38670: LD_INT 7
38672: PUSH
38673: LD_INT 12
38675: PUSH
38676: LD_INT 13
38678: PUSH
38679: LD_INT 10
38681: PUSH
38682: LD_INT 14
38684: PUSH
38685: LD_INT 20
38687: PUSH
38688: LD_INT 21
38690: PUSH
38691: LD_INT 22
38693: PUSH
38694: LD_INT 25
38696: PUSH
38697: LD_INT 32
38699: PUSH
38700: LD_INT 27
38702: PUSH
38703: LD_INT 36
38705: PUSH
38706: LD_INT 69
38708: PUSH
38709: LD_INT 39
38711: PUSH
38712: LD_INT 34
38714: PUSH
38715: LD_INT 40
38717: PUSH
38718: LD_INT 48
38720: PUSH
38721: LD_INT 49
38723: PUSH
38724: LD_INT 50
38726: PUSH
38727: LD_INT 51
38729: PUSH
38730: LD_INT 52
38732: PUSH
38733: LD_INT 53
38735: PUSH
38736: LD_INT 54
38738: PUSH
38739: LD_INT 55
38741: PUSH
38742: LD_INT 56
38744: PUSH
38745: LD_INT 57
38747: PUSH
38748: LD_INT 58
38750: PUSH
38751: LD_INT 59
38753: PUSH
38754: LD_INT 60
38756: PUSH
38757: LD_INT 61
38759: PUSH
38760: LD_INT 62
38762: PUSH
38763: LD_INT 80
38765: PUSH
38766: LD_INT 82
38768: PUSH
38769: LD_INT 83
38771: PUSH
38772: LD_INT 84
38774: PUSH
38775: LD_INT 85
38777: PUSH
38778: LD_INT 86
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: ST_TO_ADDR
38834: GO 39301
38836: LD_INT 2
38838: DOUBLE
38839: EQUAL
38840: IFTRUE 38844
38842: GO 39070
38844: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38845: LD_ADDR_VAR 0 4
38849: PUSH
38850: LD_INT 35
38852: PUSH
38853: LD_INT 45
38855: PUSH
38856: LD_INT 46
38858: PUSH
38859: LD_INT 47
38861: PUSH
38862: LD_INT 82
38864: PUSH
38865: LD_INT 83
38867: PUSH
38868: LD_INT 84
38870: PUSH
38871: LD_INT 85
38873: PUSH
38874: LD_INT 87
38876: PUSH
38877: LD_INT 70
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: LD_INT 11
38885: PUSH
38886: LD_INT 3
38888: PUSH
38889: LD_INT 4
38891: PUSH
38892: LD_INT 5
38894: PUSH
38895: LD_INT 6
38897: PUSH
38898: LD_INT 15
38900: PUSH
38901: LD_INT 18
38903: PUSH
38904: LD_INT 7
38906: PUSH
38907: LD_INT 17
38909: PUSH
38910: LD_INT 8
38912: PUSH
38913: LD_INT 20
38915: PUSH
38916: LD_INT 21
38918: PUSH
38919: LD_INT 22
38921: PUSH
38922: LD_INT 72
38924: PUSH
38925: LD_INT 26
38927: PUSH
38928: LD_INT 69
38930: PUSH
38931: LD_INT 39
38933: PUSH
38934: LD_INT 40
38936: PUSH
38937: LD_INT 41
38939: PUSH
38940: LD_INT 42
38942: PUSH
38943: LD_INT 43
38945: PUSH
38946: LD_INT 48
38948: PUSH
38949: LD_INT 49
38951: PUSH
38952: LD_INT 50
38954: PUSH
38955: LD_INT 51
38957: PUSH
38958: LD_INT 52
38960: PUSH
38961: LD_INT 53
38963: PUSH
38964: LD_INT 54
38966: PUSH
38967: LD_INT 55
38969: PUSH
38970: LD_INT 56
38972: PUSH
38973: LD_INT 60
38975: PUSH
38976: LD_INT 61
38978: PUSH
38979: LD_INT 62
38981: PUSH
38982: LD_INT 66
38984: PUSH
38985: LD_INT 67
38987: PUSH
38988: LD_INT 68
38990: PUSH
38991: LD_INT 81
38993: PUSH
38994: LD_INT 82
38996: PUSH
38997: LD_INT 83
38999: PUSH
39000: LD_INT 84
39002: PUSH
39003: LD_INT 85
39005: PUSH
39006: LD_INT 87
39008: PUSH
39009: LD_INT 88
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: ST_TO_ADDR
39068: GO 39301
39070: LD_INT 3
39072: DOUBLE
39073: EQUAL
39074: IFTRUE 39078
39076: GO 39300
39078: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39079: LD_ADDR_VAR 0 4
39083: PUSH
39084: LD_INT 46
39086: PUSH
39087: LD_INT 47
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: LD_INT 82
39098: PUSH
39099: LD_INT 83
39101: PUSH
39102: LD_INT 84
39104: PUSH
39105: LD_INT 85
39107: PUSH
39108: LD_INT 86
39110: PUSH
39111: LD_INT 11
39113: PUSH
39114: LD_INT 9
39116: PUSH
39117: LD_INT 20
39119: PUSH
39120: LD_INT 19
39122: PUSH
39123: LD_INT 21
39125: PUSH
39126: LD_INT 24
39128: PUSH
39129: LD_INT 22
39131: PUSH
39132: LD_INT 25
39134: PUSH
39135: LD_INT 28
39137: PUSH
39138: LD_INT 29
39140: PUSH
39141: LD_INT 30
39143: PUSH
39144: LD_INT 31
39146: PUSH
39147: LD_INT 37
39149: PUSH
39150: LD_INT 38
39152: PUSH
39153: LD_INT 32
39155: PUSH
39156: LD_INT 27
39158: PUSH
39159: LD_INT 33
39161: PUSH
39162: LD_INT 69
39164: PUSH
39165: LD_INT 39
39167: PUSH
39168: LD_INT 34
39170: PUSH
39171: LD_INT 40
39173: PUSH
39174: LD_INT 71
39176: PUSH
39177: LD_INT 23
39179: PUSH
39180: LD_INT 44
39182: PUSH
39183: LD_INT 48
39185: PUSH
39186: LD_INT 49
39188: PUSH
39189: LD_INT 50
39191: PUSH
39192: LD_INT 51
39194: PUSH
39195: LD_INT 52
39197: PUSH
39198: LD_INT 53
39200: PUSH
39201: LD_INT 54
39203: PUSH
39204: LD_INT 55
39206: PUSH
39207: LD_INT 56
39209: PUSH
39210: LD_INT 57
39212: PUSH
39213: LD_INT 58
39215: PUSH
39216: LD_INT 59
39218: PUSH
39219: LD_INT 63
39221: PUSH
39222: LD_INT 64
39224: PUSH
39225: LD_INT 65
39227: PUSH
39228: LD_INT 82
39230: PUSH
39231: LD_INT 83
39233: PUSH
39234: LD_INT 84
39236: PUSH
39237: LD_INT 85
39239: PUSH
39240: LD_INT 86
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: ST_TO_ADDR
39298: GO 39301
39300: POP
// if state > - 1 and state < 3 then
39301: LD_VAR 0 3
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: GREATER
39310: PUSH
39311: LD_VAR 0 3
39315: PUSH
39316: LD_INT 3
39318: LESS
39319: AND
39320: IFFALSE 39377
// for i in result do
39322: LD_ADDR_VAR 0 5
39326: PUSH
39327: LD_VAR 0 4
39331: PUSH
39332: FOR_IN
39333: IFFALSE 39375
// if GetTech ( i , side ) <> state then
39335: LD_VAR 0 5
39339: PPUSH
39340: LD_VAR 0 1
39344: PPUSH
39345: CALL_OW 321
39349: PUSH
39350: LD_VAR 0 3
39354: NONEQUAL
39355: IFFALSE 39373
// result := result diff i ;
39357: LD_ADDR_VAR 0 4
39361: PUSH
39362: LD_VAR 0 4
39366: PUSH
39367: LD_VAR 0 5
39371: DIFF
39372: ST_TO_ADDR
39373: GO 39332
39375: POP
39376: POP
// end ;
39377: LD_VAR 0 4
39381: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39382: LD_INT 0
39384: PPUSH
39385: PPUSH
39386: PPUSH
// result := true ;
39387: LD_ADDR_VAR 0 3
39391: PUSH
39392: LD_INT 1
39394: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39395: LD_ADDR_VAR 0 5
39399: PUSH
39400: LD_VAR 0 2
39404: PPUSH
39405: CALL_OW 480
39409: ST_TO_ADDR
// if not tmp then
39410: LD_VAR 0 5
39414: NOT
39415: IFFALSE 39419
// exit ;
39417: GO 39468
// for i in tmp do
39419: LD_ADDR_VAR 0 4
39423: PUSH
39424: LD_VAR 0 5
39428: PUSH
39429: FOR_IN
39430: IFFALSE 39466
// if GetTech ( i , side ) <> state_researched then
39432: LD_VAR 0 4
39436: PPUSH
39437: LD_VAR 0 1
39441: PPUSH
39442: CALL_OW 321
39446: PUSH
39447: LD_INT 2
39449: NONEQUAL
39450: IFFALSE 39464
// begin result := false ;
39452: LD_ADDR_VAR 0 3
39456: PUSH
39457: LD_INT 0
39459: ST_TO_ADDR
// exit ;
39460: POP
39461: POP
39462: GO 39468
// end ;
39464: GO 39429
39466: POP
39467: POP
// end ;
39468: LD_VAR 0 3
39472: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39473: LD_INT 0
39475: PPUSH
39476: PPUSH
39477: PPUSH
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
39484: PPUSH
39485: PPUSH
39486: PPUSH
39487: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39488: LD_VAR 0 1
39492: NOT
39493: PUSH
39494: LD_VAR 0 1
39498: PPUSH
39499: CALL_OW 257
39503: PUSH
39504: LD_INT 9
39506: NONEQUAL
39507: OR
39508: IFFALSE 39512
// exit ;
39510: GO 40085
// side := GetSide ( unit ) ;
39512: LD_ADDR_VAR 0 9
39516: PUSH
39517: LD_VAR 0 1
39521: PPUSH
39522: CALL_OW 255
39526: ST_TO_ADDR
// tech_space := tech_spacanom ;
39527: LD_ADDR_VAR 0 12
39531: PUSH
39532: LD_INT 29
39534: ST_TO_ADDR
// tech_time := tech_taurad ;
39535: LD_ADDR_VAR 0 13
39539: PUSH
39540: LD_INT 28
39542: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39543: LD_ADDR_VAR 0 11
39547: PUSH
39548: LD_VAR 0 1
39552: PPUSH
39553: CALL_OW 310
39557: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39558: LD_VAR 0 11
39562: PPUSH
39563: CALL_OW 247
39567: PUSH
39568: LD_INT 2
39570: EQUAL
39571: IFFALSE 39575
// exit ;
39573: GO 40085
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39575: LD_ADDR_VAR 0 8
39579: PUSH
39580: LD_INT 81
39582: PUSH
39583: LD_VAR 0 9
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 3
39594: PUSH
39595: LD_INT 21
39597: PUSH
39598: LD_INT 3
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PPUSH
39613: CALL_OW 69
39617: ST_TO_ADDR
// if not tmp then
39618: LD_VAR 0 8
39622: NOT
39623: IFFALSE 39627
// exit ;
39625: GO 40085
// if in_unit then
39627: LD_VAR 0 11
39631: IFFALSE 39655
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39633: LD_ADDR_VAR 0 10
39637: PUSH
39638: LD_VAR 0 8
39642: PPUSH
39643: LD_VAR 0 11
39647: PPUSH
39648: CALL_OW 74
39652: ST_TO_ADDR
39653: GO 39675
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39655: LD_ADDR_VAR 0 10
39659: PUSH
39660: LD_VAR 0 8
39664: PPUSH
39665: LD_VAR 0 1
39669: PPUSH
39670: CALL_OW 74
39674: ST_TO_ADDR
// if not enemy then
39675: LD_VAR 0 10
39679: NOT
39680: IFFALSE 39684
// exit ;
39682: GO 40085
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39684: LD_VAR 0 11
39688: PUSH
39689: LD_VAR 0 11
39693: PPUSH
39694: LD_VAR 0 10
39698: PPUSH
39699: CALL_OW 296
39703: PUSH
39704: LD_INT 13
39706: GREATER
39707: AND
39708: PUSH
39709: LD_VAR 0 1
39713: PPUSH
39714: LD_VAR 0 10
39718: PPUSH
39719: CALL_OW 296
39723: PUSH
39724: LD_INT 12
39726: GREATER
39727: OR
39728: IFFALSE 39732
// exit ;
39730: GO 40085
// missile := [ 1 ] ;
39732: LD_ADDR_VAR 0 14
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: EMPTY
39741: LIST
39742: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39743: LD_VAR 0 9
39747: PPUSH
39748: LD_VAR 0 12
39752: PPUSH
39753: CALL_OW 325
39757: IFFALSE 39786
// missile := Replace ( missile , missile + 1 , 2 ) ;
39759: LD_ADDR_VAR 0 14
39763: PUSH
39764: LD_VAR 0 14
39768: PPUSH
39769: LD_VAR 0 14
39773: PUSH
39774: LD_INT 1
39776: PLUS
39777: PPUSH
39778: LD_INT 2
39780: PPUSH
39781: CALL_OW 1
39785: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39786: LD_VAR 0 9
39790: PPUSH
39791: LD_VAR 0 13
39795: PPUSH
39796: CALL_OW 325
39800: PUSH
39801: LD_VAR 0 10
39805: PPUSH
39806: CALL_OW 255
39810: PPUSH
39811: LD_VAR 0 13
39815: PPUSH
39816: CALL_OW 325
39820: NOT
39821: AND
39822: IFFALSE 39851
// missile := Replace ( missile , missile + 1 , 3 ) ;
39824: LD_ADDR_VAR 0 14
39828: PUSH
39829: LD_VAR 0 14
39833: PPUSH
39834: LD_VAR 0 14
39838: PUSH
39839: LD_INT 1
39841: PLUS
39842: PPUSH
39843: LD_INT 3
39845: PPUSH
39846: CALL_OW 1
39850: ST_TO_ADDR
// if missile < 2 then
39851: LD_VAR 0 14
39855: PUSH
39856: LD_INT 2
39858: LESS
39859: IFFALSE 39863
// exit ;
39861: GO 40085
// x := GetX ( enemy ) ;
39863: LD_ADDR_VAR 0 4
39867: PUSH
39868: LD_VAR 0 10
39872: PPUSH
39873: CALL_OW 250
39877: ST_TO_ADDR
// y := GetY ( enemy ) ;
39878: LD_ADDR_VAR 0 5
39882: PUSH
39883: LD_VAR 0 10
39887: PPUSH
39888: CALL_OW 251
39892: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39893: LD_ADDR_VAR 0 6
39897: PUSH
39898: LD_VAR 0 4
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PPUSH
39907: LD_INT 1
39909: PPUSH
39910: CALL_OW 12
39914: PLUS
39915: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39916: LD_ADDR_VAR 0 7
39920: PUSH
39921: LD_VAR 0 5
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PPUSH
39930: LD_INT 1
39932: PPUSH
39933: CALL_OW 12
39937: PLUS
39938: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39939: LD_VAR 0 6
39943: PPUSH
39944: LD_VAR 0 7
39948: PPUSH
39949: CALL_OW 488
39953: NOT
39954: IFFALSE 39976
// begin _x := x ;
39956: LD_ADDR_VAR 0 6
39960: PUSH
39961: LD_VAR 0 4
39965: ST_TO_ADDR
// _y := y ;
39966: LD_ADDR_VAR 0 7
39970: PUSH
39971: LD_VAR 0 5
39975: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39976: LD_ADDR_VAR 0 3
39980: PUSH
39981: LD_INT 1
39983: PPUSH
39984: LD_VAR 0 14
39988: PPUSH
39989: CALL_OW 12
39993: ST_TO_ADDR
// case i of 1 :
39994: LD_VAR 0 3
39998: PUSH
39999: LD_INT 1
40001: DOUBLE
40002: EQUAL
40003: IFTRUE 40007
40005: GO 40024
40007: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40008: LD_VAR 0 1
40012: PPUSH
40013: LD_VAR 0 10
40017: PPUSH
40018: CALL_OW 115
40022: GO 40085
40024: LD_INT 2
40026: DOUBLE
40027: EQUAL
40028: IFTRUE 40032
40030: GO 40054
40032: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40033: LD_VAR 0 1
40037: PPUSH
40038: LD_VAR 0 6
40042: PPUSH
40043: LD_VAR 0 7
40047: PPUSH
40048: CALL_OW 153
40052: GO 40085
40054: LD_INT 3
40056: DOUBLE
40057: EQUAL
40058: IFTRUE 40062
40060: GO 40084
40062: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40063: LD_VAR 0 1
40067: PPUSH
40068: LD_VAR 0 6
40072: PPUSH
40073: LD_VAR 0 7
40077: PPUSH
40078: CALL_OW 154
40082: GO 40085
40084: POP
// end ;
40085: LD_VAR 0 2
40089: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40090: LD_INT 0
40092: PPUSH
40093: PPUSH
40094: PPUSH
40095: PPUSH
40096: PPUSH
40097: PPUSH
// if not unit or not building then
40098: LD_VAR 0 1
40102: NOT
40103: PUSH
40104: LD_VAR 0 2
40108: NOT
40109: OR
40110: IFFALSE 40114
// exit ;
40112: GO 40272
// x := GetX ( building ) ;
40114: LD_ADDR_VAR 0 5
40118: PUSH
40119: LD_VAR 0 2
40123: PPUSH
40124: CALL_OW 250
40128: ST_TO_ADDR
// y := GetY ( building ) ;
40129: LD_ADDR_VAR 0 6
40133: PUSH
40134: LD_VAR 0 2
40138: PPUSH
40139: CALL_OW 251
40143: ST_TO_ADDR
// for i = 0 to 5 do
40144: LD_ADDR_VAR 0 4
40148: PUSH
40149: DOUBLE
40150: LD_INT 0
40152: DEC
40153: ST_TO_ADDR
40154: LD_INT 5
40156: PUSH
40157: FOR_TO
40158: IFFALSE 40270
// begin _x := ShiftX ( x , i , 3 ) ;
40160: LD_ADDR_VAR 0 7
40164: PUSH
40165: LD_VAR 0 5
40169: PPUSH
40170: LD_VAR 0 4
40174: PPUSH
40175: LD_INT 3
40177: PPUSH
40178: CALL_OW 272
40182: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40183: LD_ADDR_VAR 0 8
40187: PUSH
40188: LD_VAR 0 6
40192: PPUSH
40193: LD_VAR 0 4
40197: PPUSH
40198: LD_INT 3
40200: PPUSH
40201: CALL_OW 273
40205: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40206: LD_VAR 0 7
40210: PPUSH
40211: LD_VAR 0 8
40215: PPUSH
40216: CALL_OW 488
40220: NOT
40221: IFFALSE 40225
// continue ;
40223: GO 40157
// if HexInfo ( _x , _y ) = 0 then
40225: LD_VAR 0 7
40229: PPUSH
40230: LD_VAR 0 8
40234: PPUSH
40235: CALL_OW 428
40239: PUSH
40240: LD_INT 0
40242: EQUAL
40243: IFFALSE 40268
// begin ComMoveXY ( unit , _x , _y ) ;
40245: LD_VAR 0 1
40249: PPUSH
40250: LD_VAR 0 7
40254: PPUSH
40255: LD_VAR 0 8
40259: PPUSH
40260: CALL_OW 111
// exit ;
40264: POP
40265: POP
40266: GO 40272
// end ; end ;
40268: GO 40157
40270: POP
40271: POP
// end ;
40272: LD_VAR 0 3
40276: RET
// export function ScanBase ( side , base_area ) ; begin
40277: LD_INT 0
40279: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40280: LD_ADDR_VAR 0 3
40284: PUSH
40285: LD_VAR 0 2
40289: PPUSH
40290: LD_INT 81
40292: PUSH
40293: LD_VAR 0 1
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PPUSH
40302: CALL_OW 70
40306: ST_TO_ADDR
// end ;
40307: LD_VAR 0 3
40311: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40312: LD_INT 0
40314: PPUSH
40315: PPUSH
40316: PPUSH
40317: PPUSH
// result := false ;
40318: LD_ADDR_VAR 0 2
40322: PUSH
40323: LD_INT 0
40325: ST_TO_ADDR
// side := GetSide ( unit ) ;
40326: LD_ADDR_VAR 0 3
40330: PUSH
40331: LD_VAR 0 1
40335: PPUSH
40336: CALL_OW 255
40340: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40341: LD_ADDR_VAR 0 4
40345: PUSH
40346: LD_VAR 0 1
40350: PPUSH
40351: CALL_OW 248
40355: ST_TO_ADDR
// case nat of 1 :
40356: LD_VAR 0 4
40360: PUSH
40361: LD_INT 1
40363: DOUBLE
40364: EQUAL
40365: IFTRUE 40369
40367: GO 40380
40369: POP
// tech := tech_lassight ; 2 :
40370: LD_ADDR_VAR 0 5
40374: PUSH
40375: LD_INT 12
40377: ST_TO_ADDR
40378: GO 40419
40380: LD_INT 2
40382: DOUBLE
40383: EQUAL
40384: IFTRUE 40388
40386: GO 40399
40388: POP
// tech := tech_mortar ; 3 :
40389: LD_ADDR_VAR 0 5
40393: PUSH
40394: LD_INT 41
40396: ST_TO_ADDR
40397: GO 40419
40399: LD_INT 3
40401: DOUBLE
40402: EQUAL
40403: IFTRUE 40407
40405: GO 40418
40407: POP
// tech := tech_bazooka ; end ;
40408: LD_ADDR_VAR 0 5
40412: PUSH
40413: LD_INT 44
40415: ST_TO_ADDR
40416: GO 40419
40418: POP
// if Researched ( side , tech ) then
40419: LD_VAR 0 3
40423: PPUSH
40424: LD_VAR 0 5
40428: PPUSH
40429: CALL_OW 325
40433: IFFALSE 40460
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40435: LD_ADDR_VAR 0 2
40439: PUSH
40440: LD_INT 5
40442: PUSH
40443: LD_INT 8
40445: PUSH
40446: LD_INT 9
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: LIST
40453: PUSH
40454: LD_VAR 0 4
40458: ARRAY
40459: ST_TO_ADDR
// end ;
40460: LD_VAR 0 2
40464: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40465: LD_INT 0
40467: PPUSH
40468: PPUSH
40469: PPUSH
// if not mines then
40470: LD_VAR 0 2
40474: NOT
40475: IFFALSE 40479
// exit ;
40477: GO 40623
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40479: LD_ADDR_VAR 0 5
40483: PUSH
40484: LD_INT 81
40486: PUSH
40487: LD_VAR 0 1
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 3
40498: PUSH
40499: LD_INT 21
40501: PUSH
40502: LD_INT 3
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PPUSH
40517: CALL_OW 69
40521: ST_TO_ADDR
// for i in mines do
40522: LD_ADDR_VAR 0 4
40526: PUSH
40527: LD_VAR 0 2
40531: PUSH
40532: FOR_IN
40533: IFFALSE 40621
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40535: LD_VAR 0 4
40539: PUSH
40540: LD_INT 1
40542: ARRAY
40543: PPUSH
40544: LD_VAR 0 4
40548: PUSH
40549: LD_INT 2
40551: ARRAY
40552: PPUSH
40553: CALL_OW 458
40557: NOT
40558: IFFALSE 40562
// continue ;
40560: GO 40532
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40562: LD_VAR 0 4
40566: PUSH
40567: LD_INT 1
40569: ARRAY
40570: PPUSH
40571: LD_VAR 0 4
40575: PUSH
40576: LD_INT 2
40578: ARRAY
40579: PPUSH
40580: CALL_OW 428
40584: PUSH
40585: LD_VAR 0 5
40589: IN
40590: IFFALSE 40619
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40592: LD_VAR 0 4
40596: PUSH
40597: LD_INT 1
40599: ARRAY
40600: PPUSH
40601: LD_VAR 0 4
40605: PUSH
40606: LD_INT 2
40608: ARRAY
40609: PPUSH
40610: LD_VAR 0 1
40614: PPUSH
40615: CALL_OW 456
// end ;
40619: GO 40532
40621: POP
40622: POP
// end ;
40623: LD_VAR 0 3
40627: RET
// export function Count ( array ) ; var i ; begin
40628: LD_INT 0
40630: PPUSH
40631: PPUSH
// result := 0 ;
40632: LD_ADDR_VAR 0 2
40636: PUSH
40637: LD_INT 0
40639: ST_TO_ADDR
// for i in array do
40640: LD_ADDR_VAR 0 3
40644: PUSH
40645: LD_VAR 0 1
40649: PUSH
40650: FOR_IN
40651: IFFALSE 40675
// if i then
40653: LD_VAR 0 3
40657: IFFALSE 40673
// result := result + 1 ;
40659: LD_ADDR_VAR 0 2
40663: PUSH
40664: LD_VAR 0 2
40668: PUSH
40669: LD_INT 1
40671: PLUS
40672: ST_TO_ADDR
40673: GO 40650
40675: POP
40676: POP
// end ;
40677: LD_VAR 0 2
40681: RET
// export function IsEmpty ( building ) ; begin
40682: LD_INT 0
40684: PPUSH
// if not building then
40685: LD_VAR 0 1
40689: NOT
40690: IFFALSE 40694
// exit ;
40692: GO 40737
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40694: LD_ADDR_VAR 0 2
40698: PUSH
40699: LD_VAR 0 1
40703: PUSH
40704: LD_INT 22
40706: PUSH
40707: LD_VAR 0 1
40711: PPUSH
40712: CALL_OW 255
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 58
40723: PUSH
40724: EMPTY
40725: LIST
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PPUSH
40731: CALL_OW 69
40735: IN
40736: ST_TO_ADDR
// end ;
40737: LD_VAR 0 2
40741: RET
// export function IsNotFull ( building ) ; var places ; begin
40742: LD_INT 0
40744: PPUSH
40745: PPUSH
// if not building then
40746: LD_VAR 0 1
40750: NOT
40751: IFFALSE 40755
// exit ;
40753: GO 40926
// result := false ;
40755: LD_ADDR_VAR 0 2
40759: PUSH
40760: LD_INT 0
40762: ST_TO_ADDR
// places := 0 ;
40763: LD_ADDR_VAR 0 3
40767: PUSH
40768: LD_INT 0
40770: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
40771: LD_VAR 0 1
40775: PPUSH
40776: CALL_OW 266
40780: PUSH
40781: LD_INT 0
40783: DOUBLE
40784: EQUAL
40785: IFTRUE 40843
40787: LD_INT 1
40789: DOUBLE
40790: EQUAL
40791: IFTRUE 40843
40793: LD_INT 6
40795: DOUBLE
40796: EQUAL
40797: IFTRUE 40843
40799: LD_INT 7
40801: DOUBLE
40802: EQUAL
40803: IFTRUE 40843
40805: LD_INT 8
40807: DOUBLE
40808: EQUAL
40809: IFTRUE 40843
40811: LD_INT 4
40813: DOUBLE
40814: EQUAL
40815: IFTRUE 40843
40817: LD_INT 5
40819: DOUBLE
40820: EQUAL
40821: IFTRUE 40843
40823: LD_INT 2
40825: DOUBLE
40826: EQUAL
40827: IFTRUE 40843
40829: LD_INT 3
40831: DOUBLE
40832: EQUAL
40833: IFTRUE 40843
40835: LD_INT 35
40837: DOUBLE
40838: EQUAL
40839: IFTRUE 40843
40841: GO 40854
40843: POP
// places := 6 ; b_bunker , b_breastwork :
40844: LD_ADDR_VAR 0 3
40848: PUSH
40849: LD_INT 6
40851: ST_TO_ADDR
40852: GO 40899
40854: LD_INT 32
40856: DOUBLE
40857: EQUAL
40858: IFTRUE 40868
40860: LD_INT 31
40862: DOUBLE
40863: EQUAL
40864: IFTRUE 40868
40866: GO 40879
40868: POP
// places := 1 ; b_control_tower :
40869: LD_ADDR_VAR 0 3
40873: PUSH
40874: LD_INT 1
40876: ST_TO_ADDR
40877: GO 40899
40879: LD_INT 36
40881: DOUBLE
40882: EQUAL
40883: IFTRUE 40887
40885: GO 40898
40887: POP
// places := 3 ; end ;
40888: LD_ADDR_VAR 0 3
40892: PUSH
40893: LD_INT 3
40895: ST_TO_ADDR
40896: GO 40899
40898: POP
// if places then
40899: LD_VAR 0 3
40903: IFFALSE 40926
// result := UnitsInside ( building ) < places ;
40905: LD_ADDR_VAR 0 2
40909: PUSH
40910: LD_VAR 0 1
40914: PPUSH
40915: CALL_OW 313
40919: PUSH
40920: LD_VAR 0 3
40924: LESS
40925: ST_TO_ADDR
// end ;
40926: LD_VAR 0 2
40930: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40931: LD_INT 0
40933: PPUSH
40934: PPUSH
40935: PPUSH
40936: PPUSH
// tmp := [ ] ;
40937: LD_ADDR_VAR 0 3
40941: PUSH
40942: EMPTY
40943: ST_TO_ADDR
// list := [ ] ;
40944: LD_ADDR_VAR 0 5
40948: PUSH
40949: EMPTY
40950: ST_TO_ADDR
// for i = 16 to 25 do
40951: LD_ADDR_VAR 0 4
40955: PUSH
40956: DOUBLE
40957: LD_INT 16
40959: DEC
40960: ST_TO_ADDR
40961: LD_INT 25
40963: PUSH
40964: FOR_TO
40965: IFFALSE 41038
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40967: LD_ADDR_VAR 0 3
40971: PUSH
40972: LD_VAR 0 3
40976: PUSH
40977: LD_INT 22
40979: PUSH
40980: LD_VAR 0 1
40984: PPUSH
40985: CALL_OW 255
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 91
40996: PUSH
40997: LD_VAR 0 1
41001: PUSH
41002: LD_INT 6
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 30
41012: PUSH
41013: LD_VAR 0 4
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: LIST
41026: PUSH
41027: EMPTY
41028: LIST
41029: PPUSH
41030: CALL_OW 69
41034: ADD
41035: ST_TO_ADDR
41036: GO 40964
41038: POP
41039: POP
// for i = 1 to tmp do
41040: LD_ADDR_VAR 0 4
41044: PUSH
41045: DOUBLE
41046: LD_INT 1
41048: DEC
41049: ST_TO_ADDR
41050: LD_VAR 0 3
41054: PUSH
41055: FOR_TO
41056: IFFALSE 41144
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41058: LD_ADDR_VAR 0 5
41062: PUSH
41063: LD_VAR 0 5
41067: PUSH
41068: LD_VAR 0 3
41072: PUSH
41073: LD_VAR 0 4
41077: ARRAY
41078: PPUSH
41079: CALL_OW 266
41083: PUSH
41084: LD_VAR 0 3
41088: PUSH
41089: LD_VAR 0 4
41093: ARRAY
41094: PPUSH
41095: CALL_OW 250
41099: PUSH
41100: LD_VAR 0 3
41104: PUSH
41105: LD_VAR 0 4
41109: ARRAY
41110: PPUSH
41111: CALL_OW 251
41115: PUSH
41116: LD_VAR 0 3
41120: PUSH
41121: LD_VAR 0 4
41125: ARRAY
41126: PPUSH
41127: CALL_OW 254
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: PUSH
41138: EMPTY
41139: LIST
41140: ADD
41141: ST_TO_ADDR
41142: GO 41055
41144: POP
41145: POP
// result := list ;
41146: LD_ADDR_VAR 0 2
41150: PUSH
41151: LD_VAR 0 5
41155: ST_TO_ADDR
// end ;
41156: LD_VAR 0 2
41160: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41161: LD_INT 0
41163: PPUSH
41164: PPUSH
41165: PPUSH
41166: PPUSH
41167: PPUSH
41168: PPUSH
41169: PPUSH
// if not factory then
41170: LD_VAR 0 1
41174: NOT
41175: IFFALSE 41179
// exit ;
41177: GO 41772
// if control = control_apeman then
41179: LD_VAR 0 4
41183: PUSH
41184: LD_INT 5
41186: EQUAL
41187: IFFALSE 41296
// begin tmp := UnitsInside ( factory ) ;
41189: LD_ADDR_VAR 0 8
41193: PUSH
41194: LD_VAR 0 1
41198: PPUSH
41199: CALL_OW 313
41203: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41204: LD_VAR 0 8
41208: PPUSH
41209: LD_INT 25
41211: PUSH
41212: LD_INT 12
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PPUSH
41219: CALL_OW 72
41223: NOT
41224: IFFALSE 41234
// control := control_manual ;
41226: LD_ADDR_VAR 0 4
41230: PUSH
41231: LD_INT 1
41233: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41234: LD_ADDR_VAR 0 8
41238: PUSH
41239: LD_VAR 0 1
41243: PPUSH
41244: CALL 40931 0 1
41248: ST_TO_ADDR
// if tmp then
41249: LD_VAR 0 8
41253: IFFALSE 41296
// begin for i in tmp do
41255: LD_ADDR_VAR 0 7
41259: PUSH
41260: LD_VAR 0 8
41264: PUSH
41265: FOR_IN
41266: IFFALSE 41294
// if i [ 1 ] = b_ext_radio then
41268: LD_VAR 0 7
41272: PUSH
41273: LD_INT 1
41275: ARRAY
41276: PUSH
41277: LD_INT 22
41279: EQUAL
41280: IFFALSE 41292
// begin control := control_remote ;
41282: LD_ADDR_VAR 0 4
41286: PUSH
41287: LD_INT 2
41289: ST_TO_ADDR
// break ;
41290: GO 41294
// end ;
41292: GO 41265
41294: POP
41295: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41296: LD_VAR 0 1
41300: PPUSH
41301: LD_VAR 0 2
41305: PPUSH
41306: LD_VAR 0 3
41310: PPUSH
41311: LD_VAR 0 4
41315: PPUSH
41316: LD_VAR 0 5
41320: PPUSH
41321: CALL_OW 448
41325: IFFALSE 41360
// begin result := [ chassis , engine , control , weapon ] ;
41327: LD_ADDR_VAR 0 6
41331: PUSH
41332: LD_VAR 0 2
41336: PUSH
41337: LD_VAR 0 3
41341: PUSH
41342: LD_VAR 0 4
41346: PUSH
41347: LD_VAR 0 5
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: ST_TO_ADDR
// exit ;
41358: GO 41772
// end ; _chassis := AvailableChassisList ( factory ) ;
41360: LD_ADDR_VAR 0 9
41364: PUSH
41365: LD_VAR 0 1
41369: PPUSH
41370: CALL_OW 475
41374: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41375: LD_ADDR_VAR 0 11
41379: PUSH
41380: LD_VAR 0 1
41384: PPUSH
41385: CALL_OW 476
41389: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41390: LD_ADDR_VAR 0 12
41394: PUSH
41395: LD_VAR 0 1
41399: PPUSH
41400: CALL_OW 477
41404: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41405: LD_ADDR_VAR 0 10
41409: PUSH
41410: LD_VAR 0 1
41414: PPUSH
41415: CALL_OW 478
41419: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41420: LD_VAR 0 9
41424: NOT
41425: PUSH
41426: LD_VAR 0 11
41430: NOT
41431: OR
41432: PUSH
41433: LD_VAR 0 12
41437: NOT
41438: OR
41439: PUSH
41440: LD_VAR 0 10
41444: NOT
41445: OR
41446: IFFALSE 41481
// begin result := [ chassis , engine , control , weapon ] ;
41448: LD_ADDR_VAR 0 6
41452: PUSH
41453: LD_VAR 0 2
41457: PUSH
41458: LD_VAR 0 3
41462: PUSH
41463: LD_VAR 0 4
41467: PUSH
41468: LD_VAR 0 5
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: ST_TO_ADDR
// exit ;
41479: GO 41772
// end ; if not chassis in _chassis then
41481: LD_VAR 0 2
41485: PUSH
41486: LD_VAR 0 9
41490: IN
41491: NOT
41492: IFFALSE 41518
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41494: LD_ADDR_VAR 0 2
41498: PUSH
41499: LD_VAR 0 9
41503: PUSH
41504: LD_INT 1
41506: PPUSH
41507: LD_VAR 0 9
41511: PPUSH
41512: CALL_OW 12
41516: ARRAY
41517: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41518: LD_VAR 0 2
41522: PPUSH
41523: LD_VAR 0 3
41527: PPUSH
41528: CALL 41777 0 2
41532: NOT
41533: IFFALSE 41592
// repeat engine := _engine [ 1 ] ;
41535: LD_ADDR_VAR 0 3
41539: PUSH
41540: LD_VAR 0 11
41544: PUSH
41545: LD_INT 1
41547: ARRAY
41548: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41549: LD_ADDR_VAR 0 11
41553: PUSH
41554: LD_VAR 0 11
41558: PPUSH
41559: LD_INT 1
41561: PPUSH
41562: CALL_OW 3
41566: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41567: LD_VAR 0 2
41571: PPUSH
41572: LD_VAR 0 3
41576: PPUSH
41577: CALL 41777 0 2
41581: PUSH
41582: LD_VAR 0 11
41586: PUSH
41587: EMPTY
41588: EQUAL
41589: OR
41590: IFFALSE 41535
// if not control in _control then
41592: LD_VAR 0 4
41596: PUSH
41597: LD_VAR 0 12
41601: IN
41602: NOT
41603: IFFALSE 41629
// control := _control [ rand ( 1 , _control ) ] ;
41605: LD_ADDR_VAR 0 4
41609: PUSH
41610: LD_VAR 0 12
41614: PUSH
41615: LD_INT 1
41617: PPUSH
41618: LD_VAR 0 12
41622: PPUSH
41623: CALL_OW 12
41627: ARRAY
41628: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41629: LD_VAR 0 2
41633: PPUSH
41634: LD_VAR 0 5
41638: PPUSH
41639: CALL 41997 0 2
41643: NOT
41644: IFFALSE 41703
// repeat weapon := _weapon [ 1 ] ;
41646: LD_ADDR_VAR 0 5
41650: PUSH
41651: LD_VAR 0 10
41655: PUSH
41656: LD_INT 1
41658: ARRAY
41659: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41660: LD_ADDR_VAR 0 10
41664: PUSH
41665: LD_VAR 0 10
41669: PPUSH
41670: LD_INT 1
41672: PPUSH
41673: CALL_OW 3
41677: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41678: LD_VAR 0 2
41682: PPUSH
41683: LD_VAR 0 5
41687: PPUSH
41688: CALL 41997 0 2
41692: PUSH
41693: LD_VAR 0 10
41697: PUSH
41698: EMPTY
41699: EQUAL
41700: OR
41701: IFFALSE 41646
// result := [ ] ;
41703: LD_ADDR_VAR 0 6
41707: PUSH
41708: EMPTY
41709: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41710: LD_VAR 0 1
41714: PPUSH
41715: LD_VAR 0 2
41719: PPUSH
41720: LD_VAR 0 3
41724: PPUSH
41725: LD_VAR 0 4
41729: PPUSH
41730: LD_VAR 0 5
41734: PPUSH
41735: CALL_OW 448
41739: IFFALSE 41772
// result := [ chassis , engine , control , weapon ] ;
41741: LD_ADDR_VAR 0 6
41745: PUSH
41746: LD_VAR 0 2
41750: PUSH
41751: LD_VAR 0 3
41755: PUSH
41756: LD_VAR 0 4
41760: PUSH
41761: LD_VAR 0 5
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: ST_TO_ADDR
// end ;
41772: LD_VAR 0 6
41776: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41777: LD_INT 0
41779: PPUSH
// if not chassis or not engine then
41780: LD_VAR 0 1
41784: NOT
41785: PUSH
41786: LD_VAR 0 2
41790: NOT
41791: OR
41792: IFFALSE 41796
// exit ;
41794: GO 41992
// case engine of engine_solar :
41796: LD_VAR 0 2
41800: PUSH
41801: LD_INT 2
41803: DOUBLE
41804: EQUAL
41805: IFTRUE 41809
41807: GO 41847
41809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41810: LD_ADDR_VAR 0 3
41814: PUSH
41815: LD_INT 11
41817: PUSH
41818: LD_INT 12
41820: PUSH
41821: LD_INT 13
41823: PUSH
41824: LD_INT 14
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: LD_INT 3
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: ST_TO_ADDR
41845: GO 41976
41847: LD_INT 1
41849: DOUBLE
41850: EQUAL
41851: IFTRUE 41855
41853: GO 41917
41855: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41856: LD_ADDR_VAR 0 3
41860: PUSH
41861: LD_INT 11
41863: PUSH
41864: LD_INT 12
41866: PUSH
41867: LD_INT 13
41869: PUSH
41870: LD_INT 14
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 2
41878: PUSH
41879: LD_INT 3
41881: PUSH
41882: LD_INT 4
41884: PUSH
41885: LD_INT 5
41887: PUSH
41888: LD_INT 21
41890: PUSH
41891: LD_INT 23
41893: PUSH
41894: LD_INT 22
41896: PUSH
41897: LD_INT 24
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: ST_TO_ADDR
41915: GO 41976
41917: LD_INT 3
41919: DOUBLE
41920: EQUAL
41921: IFTRUE 41925
41923: GO 41975
41925: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41926: LD_ADDR_VAR 0 3
41930: PUSH
41931: LD_INT 13
41933: PUSH
41934: LD_INT 14
41936: PUSH
41937: LD_INT 2
41939: PUSH
41940: LD_INT 3
41942: PUSH
41943: LD_INT 4
41945: PUSH
41946: LD_INT 5
41948: PUSH
41949: LD_INT 21
41951: PUSH
41952: LD_INT 22
41954: PUSH
41955: LD_INT 23
41957: PUSH
41958: LD_INT 24
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: ST_TO_ADDR
41973: GO 41976
41975: POP
// result := ( chassis in result ) ;
41976: LD_ADDR_VAR 0 3
41980: PUSH
41981: LD_VAR 0 1
41985: PUSH
41986: LD_VAR 0 3
41990: IN
41991: ST_TO_ADDR
// end ;
41992: LD_VAR 0 3
41996: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41997: LD_INT 0
41999: PPUSH
// if not chassis or not weapon then
42000: LD_VAR 0 1
42004: NOT
42005: PUSH
42006: LD_VAR 0 2
42010: NOT
42011: OR
42012: IFFALSE 42016
// exit ;
42014: GO 43078
// case weapon of us_machine_gun :
42016: LD_VAR 0 2
42020: PUSH
42021: LD_INT 2
42023: DOUBLE
42024: EQUAL
42025: IFTRUE 42029
42027: GO 42059
42029: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42030: LD_ADDR_VAR 0 3
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: LD_INT 3
42043: PUSH
42044: LD_INT 4
42046: PUSH
42047: LD_INT 5
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: ST_TO_ADDR
42057: GO 43062
42059: LD_INT 3
42061: DOUBLE
42062: EQUAL
42063: IFTRUE 42067
42065: GO 42097
42067: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42068: LD_ADDR_VAR 0 3
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: LD_INT 2
42078: PUSH
42079: LD_INT 3
42081: PUSH
42082: LD_INT 4
42084: PUSH
42085: LD_INT 5
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: ST_TO_ADDR
42095: GO 43062
42097: LD_INT 11
42099: DOUBLE
42100: EQUAL
42101: IFTRUE 42105
42103: GO 42135
42105: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42106: LD_ADDR_VAR 0 3
42110: PUSH
42111: LD_INT 1
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: LD_INT 4
42122: PUSH
42123: LD_INT 5
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: ST_TO_ADDR
42133: GO 43062
42135: LD_INT 4
42137: DOUBLE
42138: EQUAL
42139: IFTRUE 42143
42141: GO 42169
42143: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42144: LD_ADDR_VAR 0 3
42148: PUSH
42149: LD_INT 2
42151: PUSH
42152: LD_INT 3
42154: PUSH
42155: LD_INT 4
42157: PUSH
42158: LD_INT 5
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: ST_TO_ADDR
42167: GO 43062
42169: LD_INT 5
42171: DOUBLE
42172: EQUAL
42173: IFTRUE 42177
42175: GO 42203
42177: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42178: LD_ADDR_VAR 0 3
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: LD_INT 3
42188: PUSH
42189: LD_INT 4
42191: PUSH
42192: LD_INT 5
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: ST_TO_ADDR
42201: GO 43062
42203: LD_INT 9
42205: DOUBLE
42206: EQUAL
42207: IFTRUE 42211
42209: GO 42237
42211: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42212: LD_ADDR_VAR 0 3
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: LD_INT 3
42222: PUSH
42223: LD_INT 4
42225: PUSH
42226: LD_INT 5
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: ST_TO_ADDR
42235: GO 43062
42237: LD_INT 7
42239: DOUBLE
42240: EQUAL
42241: IFTRUE 42245
42243: GO 42271
42245: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42246: LD_ADDR_VAR 0 3
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: LD_INT 3
42256: PUSH
42257: LD_INT 4
42259: PUSH
42260: LD_INT 5
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: ST_TO_ADDR
42269: GO 43062
42271: LD_INT 12
42273: DOUBLE
42274: EQUAL
42275: IFTRUE 42279
42277: GO 42305
42279: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42280: LD_ADDR_VAR 0 3
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: LD_INT 3
42290: PUSH
42291: LD_INT 4
42293: PUSH
42294: LD_INT 5
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: ST_TO_ADDR
42303: GO 43062
42305: LD_INT 13
42307: DOUBLE
42308: EQUAL
42309: IFTRUE 42313
42311: GO 42339
42313: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42314: LD_ADDR_VAR 0 3
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: LD_INT 3
42324: PUSH
42325: LD_INT 4
42327: PUSH
42328: LD_INT 5
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: ST_TO_ADDR
42337: GO 43062
42339: LD_INT 14
42341: DOUBLE
42342: EQUAL
42343: IFTRUE 42347
42345: GO 42365
42347: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42348: LD_ADDR_VAR 0 3
42352: PUSH
42353: LD_INT 4
42355: PUSH
42356: LD_INT 5
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: ST_TO_ADDR
42363: GO 43062
42365: LD_INT 6
42367: DOUBLE
42368: EQUAL
42369: IFTRUE 42373
42371: GO 42391
42373: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42374: LD_ADDR_VAR 0 3
42378: PUSH
42379: LD_INT 4
42381: PUSH
42382: LD_INT 5
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: ST_TO_ADDR
42389: GO 43062
42391: LD_INT 10
42393: DOUBLE
42394: EQUAL
42395: IFTRUE 42399
42397: GO 42417
42399: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42400: LD_ADDR_VAR 0 3
42404: PUSH
42405: LD_INT 4
42407: PUSH
42408: LD_INT 5
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: ST_TO_ADDR
42415: GO 43062
42417: LD_INT 22
42419: DOUBLE
42420: EQUAL
42421: IFTRUE 42425
42423: GO 42451
42425: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42426: LD_ADDR_VAR 0 3
42430: PUSH
42431: LD_INT 11
42433: PUSH
42434: LD_INT 12
42436: PUSH
42437: LD_INT 13
42439: PUSH
42440: LD_INT 14
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: ST_TO_ADDR
42449: GO 43062
42451: LD_INT 23
42453: DOUBLE
42454: EQUAL
42455: IFTRUE 42459
42457: GO 42485
42459: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42460: LD_ADDR_VAR 0 3
42464: PUSH
42465: LD_INT 11
42467: PUSH
42468: LD_INT 12
42470: PUSH
42471: LD_INT 13
42473: PUSH
42474: LD_INT 14
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: ST_TO_ADDR
42483: GO 43062
42485: LD_INT 24
42487: DOUBLE
42488: EQUAL
42489: IFTRUE 42493
42491: GO 42519
42493: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42494: LD_ADDR_VAR 0 3
42498: PUSH
42499: LD_INT 11
42501: PUSH
42502: LD_INT 12
42504: PUSH
42505: LD_INT 13
42507: PUSH
42508: LD_INT 14
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: ST_TO_ADDR
42517: GO 43062
42519: LD_INT 30
42521: DOUBLE
42522: EQUAL
42523: IFTRUE 42527
42525: GO 42553
42527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42528: LD_ADDR_VAR 0 3
42532: PUSH
42533: LD_INT 11
42535: PUSH
42536: LD_INT 12
42538: PUSH
42539: LD_INT 13
42541: PUSH
42542: LD_INT 14
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: ST_TO_ADDR
42551: GO 43062
42553: LD_INT 25
42555: DOUBLE
42556: EQUAL
42557: IFTRUE 42561
42559: GO 42579
42561: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42562: LD_ADDR_VAR 0 3
42566: PUSH
42567: LD_INT 13
42569: PUSH
42570: LD_INT 14
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: ST_TO_ADDR
42577: GO 43062
42579: LD_INT 27
42581: DOUBLE
42582: EQUAL
42583: IFTRUE 42587
42585: GO 42605
42587: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42588: LD_ADDR_VAR 0 3
42592: PUSH
42593: LD_INT 13
42595: PUSH
42596: LD_INT 14
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: ST_TO_ADDR
42603: GO 43062
42605: LD_EXP 38
42609: DOUBLE
42610: EQUAL
42611: IFTRUE 42615
42613: GO 42641
42615: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42616: LD_ADDR_VAR 0 3
42620: PUSH
42621: LD_INT 11
42623: PUSH
42624: LD_INT 12
42626: PUSH
42627: LD_INT 13
42629: PUSH
42630: LD_INT 14
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: ST_TO_ADDR
42639: GO 43062
42641: LD_INT 28
42643: DOUBLE
42644: EQUAL
42645: IFTRUE 42649
42647: GO 42667
42649: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42650: LD_ADDR_VAR 0 3
42654: PUSH
42655: LD_INT 13
42657: PUSH
42658: LD_INT 14
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: ST_TO_ADDR
42665: GO 43062
42667: LD_INT 29
42669: DOUBLE
42670: EQUAL
42671: IFTRUE 42675
42673: GO 42693
42675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42676: LD_ADDR_VAR 0 3
42680: PUSH
42681: LD_INT 13
42683: PUSH
42684: LD_INT 14
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: ST_TO_ADDR
42691: GO 43062
42693: LD_INT 31
42695: DOUBLE
42696: EQUAL
42697: IFTRUE 42701
42699: GO 42719
42701: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42702: LD_ADDR_VAR 0 3
42706: PUSH
42707: LD_INT 13
42709: PUSH
42710: LD_INT 14
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: ST_TO_ADDR
42717: GO 43062
42719: LD_INT 26
42721: DOUBLE
42722: EQUAL
42723: IFTRUE 42727
42725: GO 42745
42727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42728: LD_ADDR_VAR 0 3
42732: PUSH
42733: LD_INT 13
42735: PUSH
42736: LD_INT 14
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: ST_TO_ADDR
42743: GO 43062
42745: LD_INT 42
42747: DOUBLE
42748: EQUAL
42749: IFTRUE 42753
42751: GO 42779
42753: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42754: LD_ADDR_VAR 0 3
42758: PUSH
42759: LD_INT 21
42761: PUSH
42762: LD_INT 22
42764: PUSH
42765: LD_INT 23
42767: PUSH
42768: LD_INT 24
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: ST_TO_ADDR
42777: GO 43062
42779: LD_INT 43
42781: DOUBLE
42782: EQUAL
42783: IFTRUE 42787
42785: GO 42813
42787: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42788: LD_ADDR_VAR 0 3
42792: PUSH
42793: LD_INT 21
42795: PUSH
42796: LD_INT 22
42798: PUSH
42799: LD_INT 23
42801: PUSH
42802: LD_INT 24
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: ST_TO_ADDR
42811: GO 43062
42813: LD_INT 44
42815: DOUBLE
42816: EQUAL
42817: IFTRUE 42821
42819: GO 42847
42821: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42822: LD_ADDR_VAR 0 3
42826: PUSH
42827: LD_INT 21
42829: PUSH
42830: LD_INT 22
42832: PUSH
42833: LD_INT 23
42835: PUSH
42836: LD_INT 24
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: ST_TO_ADDR
42845: GO 43062
42847: LD_INT 45
42849: DOUBLE
42850: EQUAL
42851: IFTRUE 42855
42853: GO 42881
42855: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42856: LD_ADDR_VAR 0 3
42860: PUSH
42861: LD_INT 21
42863: PUSH
42864: LD_INT 22
42866: PUSH
42867: LD_INT 23
42869: PUSH
42870: LD_INT 24
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: ST_TO_ADDR
42879: GO 43062
42881: LD_INT 49
42883: DOUBLE
42884: EQUAL
42885: IFTRUE 42889
42887: GO 42915
42889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42890: LD_ADDR_VAR 0 3
42894: PUSH
42895: LD_INT 21
42897: PUSH
42898: LD_INT 22
42900: PUSH
42901: LD_INT 23
42903: PUSH
42904: LD_INT 24
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: ST_TO_ADDR
42913: GO 43062
42915: LD_INT 51
42917: DOUBLE
42918: EQUAL
42919: IFTRUE 42923
42921: GO 42949
42923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42924: LD_ADDR_VAR 0 3
42928: PUSH
42929: LD_INT 21
42931: PUSH
42932: LD_INT 22
42934: PUSH
42935: LD_INT 23
42937: PUSH
42938: LD_INT 24
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: ST_TO_ADDR
42947: GO 43062
42949: LD_INT 52
42951: DOUBLE
42952: EQUAL
42953: IFTRUE 42957
42955: GO 42983
42957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42958: LD_ADDR_VAR 0 3
42962: PUSH
42963: LD_INT 21
42965: PUSH
42966: LD_INT 22
42968: PUSH
42969: LD_INT 23
42971: PUSH
42972: LD_INT 24
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: ST_TO_ADDR
42981: GO 43062
42983: LD_INT 53
42985: DOUBLE
42986: EQUAL
42987: IFTRUE 42991
42989: GO 43009
42991: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42992: LD_ADDR_VAR 0 3
42996: PUSH
42997: LD_INT 23
42999: PUSH
43000: LD_INT 24
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: ST_TO_ADDR
43007: GO 43062
43009: LD_INT 46
43011: DOUBLE
43012: EQUAL
43013: IFTRUE 43017
43015: GO 43035
43017: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43018: LD_ADDR_VAR 0 3
43022: PUSH
43023: LD_INT 23
43025: PUSH
43026: LD_INT 24
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: ST_TO_ADDR
43033: GO 43062
43035: LD_INT 47
43037: DOUBLE
43038: EQUAL
43039: IFTRUE 43043
43041: GO 43061
43043: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43044: LD_ADDR_VAR 0 3
43048: PUSH
43049: LD_INT 23
43051: PUSH
43052: LD_INT 24
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: ST_TO_ADDR
43059: GO 43062
43061: POP
// result := ( chassis in result ) ;
43062: LD_ADDR_VAR 0 3
43066: PUSH
43067: LD_VAR 0 1
43071: PUSH
43072: LD_VAR 0 3
43076: IN
43077: ST_TO_ADDR
// end ;
43078: LD_VAR 0 3
43082: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43083: LD_INT 0
43085: PPUSH
43086: PPUSH
43087: PPUSH
43088: PPUSH
43089: PPUSH
43090: PPUSH
43091: PPUSH
// result := array ;
43092: LD_ADDR_VAR 0 5
43096: PUSH
43097: LD_VAR 0 1
43101: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43102: LD_VAR 0 1
43106: NOT
43107: PUSH
43108: LD_VAR 0 2
43112: NOT
43113: OR
43114: PUSH
43115: LD_VAR 0 3
43119: NOT
43120: OR
43121: PUSH
43122: LD_VAR 0 2
43126: PUSH
43127: LD_VAR 0 1
43131: GREATER
43132: OR
43133: PUSH
43134: LD_VAR 0 3
43138: PUSH
43139: LD_VAR 0 1
43143: GREATER
43144: OR
43145: IFFALSE 43149
// exit ;
43147: GO 43445
// if direction then
43149: LD_VAR 0 4
43153: IFFALSE 43217
// begin d := 1 ;
43155: LD_ADDR_VAR 0 9
43159: PUSH
43160: LD_INT 1
43162: ST_TO_ADDR
// if i_from > i_to then
43163: LD_VAR 0 2
43167: PUSH
43168: LD_VAR 0 3
43172: GREATER
43173: IFFALSE 43199
// length := ( array - i_from ) + i_to else
43175: LD_ADDR_VAR 0 11
43179: PUSH
43180: LD_VAR 0 1
43184: PUSH
43185: LD_VAR 0 2
43189: MINUS
43190: PUSH
43191: LD_VAR 0 3
43195: PLUS
43196: ST_TO_ADDR
43197: GO 43215
// length := i_to - i_from ;
43199: LD_ADDR_VAR 0 11
43203: PUSH
43204: LD_VAR 0 3
43208: PUSH
43209: LD_VAR 0 2
43213: MINUS
43214: ST_TO_ADDR
// end else
43215: GO 43278
// begin d := - 1 ;
43217: LD_ADDR_VAR 0 9
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: ST_TO_ADDR
// if i_from > i_to then
43226: LD_VAR 0 2
43230: PUSH
43231: LD_VAR 0 3
43235: GREATER
43236: IFFALSE 43256
// length := i_from - i_to else
43238: LD_ADDR_VAR 0 11
43242: PUSH
43243: LD_VAR 0 2
43247: PUSH
43248: LD_VAR 0 3
43252: MINUS
43253: ST_TO_ADDR
43254: GO 43278
// length := ( array - i_to ) + i_from ;
43256: LD_ADDR_VAR 0 11
43260: PUSH
43261: LD_VAR 0 1
43265: PUSH
43266: LD_VAR 0 3
43270: MINUS
43271: PUSH
43272: LD_VAR 0 2
43276: PLUS
43277: ST_TO_ADDR
// end ; if not length then
43278: LD_VAR 0 11
43282: NOT
43283: IFFALSE 43287
// exit ;
43285: GO 43445
// tmp := array ;
43287: LD_ADDR_VAR 0 10
43291: PUSH
43292: LD_VAR 0 1
43296: ST_TO_ADDR
// for i = 1 to length do
43297: LD_ADDR_VAR 0 6
43301: PUSH
43302: DOUBLE
43303: LD_INT 1
43305: DEC
43306: ST_TO_ADDR
43307: LD_VAR 0 11
43311: PUSH
43312: FOR_TO
43313: IFFALSE 43433
// begin for j = 1 to array do
43315: LD_ADDR_VAR 0 7
43319: PUSH
43320: DOUBLE
43321: LD_INT 1
43323: DEC
43324: ST_TO_ADDR
43325: LD_VAR 0 1
43329: PUSH
43330: FOR_TO
43331: IFFALSE 43419
// begin k := j + d ;
43333: LD_ADDR_VAR 0 8
43337: PUSH
43338: LD_VAR 0 7
43342: PUSH
43343: LD_VAR 0 9
43347: PLUS
43348: ST_TO_ADDR
// if k > array then
43349: LD_VAR 0 8
43353: PUSH
43354: LD_VAR 0 1
43358: GREATER
43359: IFFALSE 43369
// k := 1 ;
43361: LD_ADDR_VAR 0 8
43365: PUSH
43366: LD_INT 1
43368: ST_TO_ADDR
// if not k then
43369: LD_VAR 0 8
43373: NOT
43374: IFFALSE 43386
// k := array ;
43376: LD_ADDR_VAR 0 8
43380: PUSH
43381: LD_VAR 0 1
43385: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43386: LD_ADDR_VAR 0 10
43390: PUSH
43391: LD_VAR 0 10
43395: PPUSH
43396: LD_VAR 0 8
43400: PPUSH
43401: LD_VAR 0 1
43405: PUSH
43406: LD_VAR 0 7
43410: ARRAY
43411: PPUSH
43412: CALL_OW 1
43416: ST_TO_ADDR
// end ;
43417: GO 43330
43419: POP
43420: POP
// array := tmp ;
43421: LD_ADDR_VAR 0 1
43425: PUSH
43426: LD_VAR 0 10
43430: ST_TO_ADDR
// end ;
43431: GO 43312
43433: POP
43434: POP
// result := array ;
43435: LD_ADDR_VAR 0 5
43439: PUSH
43440: LD_VAR 0 1
43444: ST_TO_ADDR
// end ;
43445: LD_VAR 0 5
43449: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43450: LD_INT 0
43452: PPUSH
43453: PPUSH
// result := 0 ;
43454: LD_ADDR_VAR 0 3
43458: PUSH
43459: LD_INT 0
43461: ST_TO_ADDR
// if not array or not value in array then
43462: LD_VAR 0 1
43466: NOT
43467: PUSH
43468: LD_VAR 0 2
43472: PUSH
43473: LD_VAR 0 1
43477: IN
43478: NOT
43479: OR
43480: IFFALSE 43484
// exit ;
43482: GO 43538
// for i = 1 to array do
43484: LD_ADDR_VAR 0 4
43488: PUSH
43489: DOUBLE
43490: LD_INT 1
43492: DEC
43493: ST_TO_ADDR
43494: LD_VAR 0 1
43498: PUSH
43499: FOR_TO
43500: IFFALSE 43536
// if value = array [ i ] then
43502: LD_VAR 0 2
43506: PUSH
43507: LD_VAR 0 1
43511: PUSH
43512: LD_VAR 0 4
43516: ARRAY
43517: EQUAL
43518: IFFALSE 43534
// begin result := i ;
43520: LD_ADDR_VAR 0 3
43524: PUSH
43525: LD_VAR 0 4
43529: ST_TO_ADDR
// exit ;
43530: POP
43531: POP
43532: GO 43538
// end ;
43534: GO 43499
43536: POP
43537: POP
// end ;
43538: LD_VAR 0 3
43542: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43543: LD_INT 0
43545: PPUSH
// vc_chassis := chassis ;
43546: LD_ADDR_OWVAR 37
43550: PUSH
43551: LD_VAR 0 1
43555: ST_TO_ADDR
// vc_engine := engine ;
43556: LD_ADDR_OWVAR 39
43560: PUSH
43561: LD_VAR 0 2
43565: ST_TO_ADDR
// vc_control := control ;
43566: LD_ADDR_OWVAR 38
43570: PUSH
43571: LD_VAR 0 3
43575: ST_TO_ADDR
// vc_weapon := weapon ;
43576: LD_ADDR_OWVAR 40
43580: PUSH
43581: LD_VAR 0 4
43585: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43586: LD_ADDR_OWVAR 41
43590: PUSH
43591: LD_VAR 0 5
43595: ST_TO_ADDR
// end ;
43596: LD_VAR 0 6
43600: RET
// export function WantPlant ( unit ) ; var task ; begin
43601: LD_INT 0
43603: PPUSH
43604: PPUSH
// result := false ;
43605: LD_ADDR_VAR 0 2
43609: PUSH
43610: LD_INT 0
43612: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43613: LD_ADDR_VAR 0 3
43617: PUSH
43618: LD_VAR 0 1
43622: PPUSH
43623: CALL_OW 437
43627: ST_TO_ADDR
// if task then
43628: LD_VAR 0 3
43632: IFFALSE 43660
// if task [ 1 ] [ 1 ] = p then
43634: LD_VAR 0 3
43638: PUSH
43639: LD_INT 1
43641: ARRAY
43642: PUSH
43643: LD_INT 1
43645: ARRAY
43646: PUSH
43647: LD_STRING p
43649: EQUAL
43650: IFFALSE 43660
// result := true ;
43652: LD_ADDR_VAR 0 2
43656: PUSH
43657: LD_INT 1
43659: ST_TO_ADDR
// end ;
43660: LD_VAR 0 2
43664: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43665: LD_INT 0
43667: PPUSH
43668: PPUSH
43669: PPUSH
43670: PPUSH
// if pos < 1 then
43671: LD_VAR 0 2
43675: PUSH
43676: LD_INT 1
43678: LESS
43679: IFFALSE 43683
// exit ;
43681: GO 43986
// if pos = 1 then
43683: LD_VAR 0 2
43687: PUSH
43688: LD_INT 1
43690: EQUAL
43691: IFFALSE 43724
// result := Replace ( arr , pos [ 1 ] , value ) else
43693: LD_ADDR_VAR 0 4
43697: PUSH
43698: LD_VAR 0 1
43702: PPUSH
43703: LD_VAR 0 2
43707: PUSH
43708: LD_INT 1
43710: ARRAY
43711: PPUSH
43712: LD_VAR 0 3
43716: PPUSH
43717: CALL_OW 1
43721: ST_TO_ADDR
43722: GO 43986
// begin tmp := arr ;
43724: LD_ADDR_VAR 0 6
43728: PUSH
43729: LD_VAR 0 1
43733: ST_TO_ADDR
// s_arr := [ tmp ] ;
43734: LD_ADDR_VAR 0 7
43738: PUSH
43739: LD_VAR 0 6
43743: PUSH
43744: EMPTY
43745: LIST
43746: ST_TO_ADDR
// for i = 1 to pos - 1 do
43747: LD_ADDR_VAR 0 5
43751: PUSH
43752: DOUBLE
43753: LD_INT 1
43755: DEC
43756: ST_TO_ADDR
43757: LD_VAR 0 2
43761: PUSH
43762: LD_INT 1
43764: MINUS
43765: PUSH
43766: FOR_TO
43767: IFFALSE 43812
// begin tmp := tmp [ pos [ i ] ] ;
43769: LD_ADDR_VAR 0 6
43773: PUSH
43774: LD_VAR 0 6
43778: PUSH
43779: LD_VAR 0 2
43783: PUSH
43784: LD_VAR 0 5
43788: ARRAY
43789: ARRAY
43790: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43791: LD_ADDR_VAR 0 7
43795: PUSH
43796: LD_VAR 0 7
43800: PUSH
43801: LD_VAR 0 6
43805: PUSH
43806: EMPTY
43807: LIST
43808: ADD
43809: ST_TO_ADDR
// end ;
43810: GO 43766
43812: POP
43813: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43814: LD_ADDR_VAR 0 6
43818: PUSH
43819: LD_VAR 0 6
43823: PPUSH
43824: LD_VAR 0 2
43828: PUSH
43829: LD_VAR 0 2
43833: ARRAY
43834: PPUSH
43835: LD_VAR 0 3
43839: PPUSH
43840: CALL_OW 1
43844: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43845: LD_ADDR_VAR 0 7
43849: PUSH
43850: LD_VAR 0 7
43854: PPUSH
43855: LD_VAR 0 7
43859: PPUSH
43860: LD_VAR 0 6
43864: PPUSH
43865: CALL_OW 1
43869: ST_TO_ADDR
// for i = s_arr downto 2 do
43870: LD_ADDR_VAR 0 5
43874: PUSH
43875: DOUBLE
43876: LD_VAR 0 7
43880: INC
43881: ST_TO_ADDR
43882: LD_INT 2
43884: PUSH
43885: FOR_DOWNTO
43886: IFFALSE 43970
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43888: LD_ADDR_VAR 0 6
43892: PUSH
43893: LD_VAR 0 7
43897: PUSH
43898: LD_VAR 0 5
43902: PUSH
43903: LD_INT 1
43905: MINUS
43906: ARRAY
43907: PPUSH
43908: LD_VAR 0 2
43912: PUSH
43913: LD_VAR 0 5
43917: PUSH
43918: LD_INT 1
43920: MINUS
43921: ARRAY
43922: PPUSH
43923: LD_VAR 0 7
43927: PUSH
43928: LD_VAR 0 5
43932: ARRAY
43933: PPUSH
43934: CALL_OW 1
43938: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43939: LD_ADDR_VAR 0 7
43943: PUSH
43944: LD_VAR 0 7
43948: PPUSH
43949: LD_VAR 0 5
43953: PUSH
43954: LD_INT 1
43956: MINUS
43957: PPUSH
43958: LD_VAR 0 6
43962: PPUSH
43963: CALL_OW 1
43967: ST_TO_ADDR
// end ;
43968: GO 43885
43970: POP
43971: POP
// result := s_arr [ 1 ] ;
43972: LD_ADDR_VAR 0 4
43976: PUSH
43977: LD_VAR 0 7
43981: PUSH
43982: LD_INT 1
43984: ARRAY
43985: ST_TO_ADDR
// end ; end ;
43986: LD_VAR 0 4
43990: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43991: LD_INT 0
43993: PPUSH
43994: PPUSH
// if not list then
43995: LD_VAR 0 1
43999: NOT
44000: IFFALSE 44004
// exit ;
44002: GO 44095
// i := list [ pos1 ] ;
44004: LD_ADDR_VAR 0 5
44008: PUSH
44009: LD_VAR 0 1
44013: PUSH
44014: LD_VAR 0 2
44018: ARRAY
44019: ST_TO_ADDR
// if not i then
44020: LD_VAR 0 5
44024: NOT
44025: IFFALSE 44029
// exit ;
44027: GO 44095
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44029: LD_ADDR_VAR 0 1
44033: PUSH
44034: LD_VAR 0 1
44038: PPUSH
44039: LD_VAR 0 2
44043: PPUSH
44044: LD_VAR 0 1
44048: PUSH
44049: LD_VAR 0 3
44053: ARRAY
44054: PPUSH
44055: CALL_OW 1
44059: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44060: LD_ADDR_VAR 0 1
44064: PUSH
44065: LD_VAR 0 1
44069: PPUSH
44070: LD_VAR 0 3
44074: PPUSH
44075: LD_VAR 0 5
44079: PPUSH
44080: CALL_OW 1
44084: ST_TO_ADDR
// result := list ;
44085: LD_ADDR_VAR 0 4
44089: PUSH
44090: LD_VAR 0 1
44094: ST_TO_ADDR
// end ;
44095: LD_VAR 0 4
44099: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44100: LD_INT 0
44102: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44103: LD_ADDR_VAR 0 5
44107: PUSH
44108: LD_VAR 0 1
44112: PPUSH
44113: CALL_OW 250
44117: PPUSH
44118: LD_VAR 0 1
44122: PPUSH
44123: CALL_OW 251
44127: PPUSH
44128: LD_VAR 0 2
44132: PPUSH
44133: LD_VAR 0 3
44137: PPUSH
44138: LD_VAR 0 4
44142: PPUSH
44143: CALL 44153 0 5
44147: ST_TO_ADDR
// end ;
44148: LD_VAR 0 5
44152: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44153: LD_INT 0
44155: PPUSH
44156: PPUSH
44157: PPUSH
44158: PPUSH
// if not list then
44159: LD_VAR 0 3
44163: NOT
44164: IFFALSE 44168
// exit ;
44166: GO 44556
// result := [ ] ;
44168: LD_ADDR_VAR 0 6
44172: PUSH
44173: EMPTY
44174: ST_TO_ADDR
// for i in list do
44175: LD_ADDR_VAR 0 7
44179: PUSH
44180: LD_VAR 0 3
44184: PUSH
44185: FOR_IN
44186: IFFALSE 44388
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44188: LD_ADDR_VAR 0 9
44192: PUSH
44193: LD_VAR 0 7
44197: PPUSH
44198: LD_VAR 0 1
44202: PPUSH
44203: LD_VAR 0 2
44207: PPUSH
44208: CALL_OW 297
44212: ST_TO_ADDR
// if not result then
44213: LD_VAR 0 6
44217: NOT
44218: IFFALSE 44244
// result := [ [ i , tmp ] ] else
44220: LD_ADDR_VAR 0 6
44224: PUSH
44225: LD_VAR 0 7
44229: PUSH
44230: LD_VAR 0 9
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: EMPTY
44240: LIST
44241: ST_TO_ADDR
44242: GO 44386
// begin if result [ result ] [ 2 ] < tmp then
44244: LD_VAR 0 6
44248: PUSH
44249: LD_VAR 0 6
44253: ARRAY
44254: PUSH
44255: LD_INT 2
44257: ARRAY
44258: PUSH
44259: LD_VAR 0 9
44263: LESS
44264: IFFALSE 44306
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44266: LD_ADDR_VAR 0 6
44270: PUSH
44271: LD_VAR 0 6
44275: PPUSH
44276: LD_VAR 0 6
44280: PUSH
44281: LD_INT 1
44283: PLUS
44284: PPUSH
44285: LD_VAR 0 7
44289: PUSH
44290: LD_VAR 0 9
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PPUSH
44299: CALL_OW 2
44303: ST_TO_ADDR
44304: GO 44386
// for j = 1 to result do
44306: LD_ADDR_VAR 0 8
44310: PUSH
44311: DOUBLE
44312: LD_INT 1
44314: DEC
44315: ST_TO_ADDR
44316: LD_VAR 0 6
44320: PUSH
44321: FOR_TO
44322: IFFALSE 44384
// begin if tmp < result [ j ] [ 2 ] then
44324: LD_VAR 0 9
44328: PUSH
44329: LD_VAR 0 6
44333: PUSH
44334: LD_VAR 0 8
44338: ARRAY
44339: PUSH
44340: LD_INT 2
44342: ARRAY
44343: LESS
44344: IFFALSE 44382
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44346: LD_ADDR_VAR 0 6
44350: PUSH
44351: LD_VAR 0 6
44355: PPUSH
44356: LD_VAR 0 8
44360: PPUSH
44361: LD_VAR 0 7
44365: PUSH
44366: LD_VAR 0 9
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PPUSH
44375: CALL_OW 2
44379: ST_TO_ADDR
// break ;
44380: GO 44384
// end ; end ;
44382: GO 44321
44384: POP
44385: POP
// end ; end ;
44386: GO 44185
44388: POP
44389: POP
// if result and not asc then
44390: LD_VAR 0 6
44394: PUSH
44395: LD_VAR 0 4
44399: NOT
44400: AND
44401: IFFALSE 44476
// begin tmp := result ;
44403: LD_ADDR_VAR 0 9
44407: PUSH
44408: LD_VAR 0 6
44412: ST_TO_ADDR
// for i = tmp downto 1 do
44413: LD_ADDR_VAR 0 7
44417: PUSH
44418: DOUBLE
44419: LD_VAR 0 9
44423: INC
44424: ST_TO_ADDR
44425: LD_INT 1
44427: PUSH
44428: FOR_DOWNTO
44429: IFFALSE 44474
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44431: LD_ADDR_VAR 0 6
44435: PUSH
44436: LD_VAR 0 6
44440: PPUSH
44441: LD_VAR 0 9
44445: PUSH
44446: LD_VAR 0 7
44450: MINUS
44451: PUSH
44452: LD_INT 1
44454: PLUS
44455: PPUSH
44456: LD_VAR 0 9
44460: PUSH
44461: LD_VAR 0 7
44465: ARRAY
44466: PPUSH
44467: CALL_OW 1
44471: ST_TO_ADDR
44472: GO 44428
44474: POP
44475: POP
// end ; tmp := [ ] ;
44476: LD_ADDR_VAR 0 9
44480: PUSH
44481: EMPTY
44482: ST_TO_ADDR
// if mode then
44483: LD_VAR 0 5
44487: IFFALSE 44556
// begin for i = 1 to result do
44489: LD_ADDR_VAR 0 7
44493: PUSH
44494: DOUBLE
44495: LD_INT 1
44497: DEC
44498: ST_TO_ADDR
44499: LD_VAR 0 6
44503: PUSH
44504: FOR_TO
44505: IFFALSE 44544
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44507: LD_ADDR_VAR 0 9
44511: PUSH
44512: LD_VAR 0 9
44516: PPUSH
44517: LD_VAR 0 7
44521: PPUSH
44522: LD_VAR 0 6
44526: PUSH
44527: LD_VAR 0 7
44531: ARRAY
44532: PUSH
44533: LD_INT 1
44535: ARRAY
44536: PPUSH
44537: CALL_OW 1
44541: ST_TO_ADDR
44542: GO 44504
44544: POP
44545: POP
// result := tmp ;
44546: LD_ADDR_VAR 0 6
44550: PUSH
44551: LD_VAR 0 9
44555: ST_TO_ADDR
// end ; end ;
44556: LD_VAR 0 6
44560: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44561: LD_INT 0
44563: PPUSH
44564: PPUSH
44565: PPUSH
44566: PPUSH
44567: PPUSH
44568: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44569: LD_ADDR_VAR 0 5
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: ST_TO_ADDR
// if not x or not y then
44591: LD_VAR 0 2
44595: NOT
44596: PUSH
44597: LD_VAR 0 3
44601: NOT
44602: OR
44603: IFFALSE 44607
// exit ;
44605: GO 46259
// if not range then
44607: LD_VAR 0 4
44611: NOT
44612: IFFALSE 44622
// range := 10 ;
44614: LD_ADDR_VAR 0 4
44618: PUSH
44619: LD_INT 10
44621: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44622: LD_ADDR_VAR 0 8
44626: PUSH
44627: LD_INT 81
44629: PUSH
44630: LD_VAR 0 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 92
44641: PUSH
44642: LD_VAR 0 2
44646: PUSH
44647: LD_VAR 0 3
44651: PUSH
44652: LD_VAR 0 4
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 3
44665: PUSH
44666: LD_INT 21
44668: PUSH
44669: LD_INT 3
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: LIST
44684: PPUSH
44685: CALL_OW 69
44689: ST_TO_ADDR
// if not tmp then
44690: LD_VAR 0 8
44694: NOT
44695: IFFALSE 44699
// exit ;
44697: GO 46259
// for i in tmp do
44699: LD_ADDR_VAR 0 6
44703: PUSH
44704: LD_VAR 0 8
44708: PUSH
44709: FOR_IN
44710: IFFALSE 46234
// begin points := [ 0 , 0 , 0 ] ;
44712: LD_ADDR_VAR 0 9
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: LIST
44730: ST_TO_ADDR
// bpoints := 1 ;
44731: LD_ADDR_VAR 0 10
44735: PUSH
44736: LD_INT 1
44738: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44739: LD_VAR 0 6
44743: PPUSH
44744: CALL_OW 247
44748: PUSH
44749: LD_INT 1
44751: DOUBLE
44752: EQUAL
44753: IFTRUE 44757
44755: GO 45335
44757: POP
// begin if GetClass ( i ) = 1 then
44758: LD_VAR 0 6
44762: PPUSH
44763: CALL_OW 257
44767: PUSH
44768: LD_INT 1
44770: EQUAL
44771: IFFALSE 44792
// points := [ 10 , 5 , 3 ] ;
44773: LD_ADDR_VAR 0 9
44777: PUSH
44778: LD_INT 10
44780: PUSH
44781: LD_INT 5
44783: PUSH
44784: LD_INT 3
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: LIST
44791: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44792: LD_VAR 0 6
44796: PPUSH
44797: CALL_OW 257
44801: PUSH
44802: LD_INT 2
44804: PUSH
44805: LD_INT 3
44807: PUSH
44808: LD_INT 4
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: IN
44816: IFFALSE 44837
// points := [ 3 , 2 , 1 ] ;
44818: LD_ADDR_VAR 0 9
44822: PUSH
44823: LD_INT 3
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: LIST
44836: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44837: LD_VAR 0 6
44841: PPUSH
44842: CALL_OW 257
44846: PUSH
44847: LD_INT 5
44849: EQUAL
44850: IFFALSE 44871
// points := [ 130 , 5 , 2 ] ;
44852: LD_ADDR_VAR 0 9
44856: PUSH
44857: LD_INT 130
44859: PUSH
44860: LD_INT 5
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44871: LD_VAR 0 6
44875: PPUSH
44876: CALL_OW 257
44880: PUSH
44881: LD_INT 8
44883: EQUAL
44884: IFFALSE 44905
// points := [ 35 , 35 , 30 ] ;
44886: LD_ADDR_VAR 0 9
44890: PUSH
44891: LD_INT 35
44893: PUSH
44894: LD_INT 35
44896: PUSH
44897: LD_INT 30
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: LIST
44904: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44905: LD_VAR 0 6
44909: PPUSH
44910: CALL_OW 257
44914: PUSH
44915: LD_INT 9
44917: EQUAL
44918: IFFALSE 44939
// points := [ 20 , 55 , 40 ] ;
44920: LD_ADDR_VAR 0 9
44924: PUSH
44925: LD_INT 20
44927: PUSH
44928: LD_INT 55
44930: PUSH
44931: LD_INT 40
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: LIST
44938: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44939: LD_VAR 0 6
44943: PPUSH
44944: CALL_OW 257
44948: PUSH
44949: LD_INT 12
44951: PUSH
44952: LD_INT 16
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: IN
44959: IFFALSE 44980
// points := [ 5 , 3 , 2 ] ;
44961: LD_ADDR_VAR 0 9
44965: PUSH
44966: LD_INT 5
44968: PUSH
44969: LD_INT 3
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: LIST
44979: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44980: LD_VAR 0 6
44984: PPUSH
44985: CALL_OW 257
44989: PUSH
44990: LD_INT 17
44992: EQUAL
44993: IFFALSE 45014
// points := [ 100 , 50 , 75 ] ;
44995: LD_ADDR_VAR 0 9
44999: PUSH
45000: LD_INT 100
45002: PUSH
45003: LD_INT 50
45005: PUSH
45006: LD_INT 75
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: LIST
45013: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45014: LD_VAR 0 6
45018: PPUSH
45019: CALL_OW 257
45023: PUSH
45024: LD_INT 15
45026: EQUAL
45027: IFFALSE 45048
// points := [ 10 , 5 , 3 ] ;
45029: LD_ADDR_VAR 0 9
45033: PUSH
45034: LD_INT 10
45036: PUSH
45037: LD_INT 5
45039: PUSH
45040: LD_INT 3
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45048: LD_VAR 0 6
45052: PPUSH
45053: CALL_OW 257
45057: PUSH
45058: LD_INT 14
45060: EQUAL
45061: IFFALSE 45082
// points := [ 10 , 0 , 0 ] ;
45063: LD_ADDR_VAR 0 9
45067: PUSH
45068: LD_INT 10
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: LIST
45081: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45082: LD_VAR 0 6
45086: PPUSH
45087: CALL_OW 257
45091: PUSH
45092: LD_INT 11
45094: EQUAL
45095: IFFALSE 45116
// points := [ 30 , 10 , 5 ] ;
45097: LD_ADDR_VAR 0 9
45101: PUSH
45102: LD_INT 30
45104: PUSH
45105: LD_INT 10
45107: PUSH
45108: LD_INT 5
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: LIST
45115: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45116: LD_VAR 0 1
45120: PPUSH
45121: LD_INT 5
45123: PPUSH
45124: CALL_OW 321
45128: PUSH
45129: LD_INT 2
45131: EQUAL
45132: IFFALSE 45149
// bpoints := bpoints * 1.8 ;
45134: LD_ADDR_VAR 0 10
45138: PUSH
45139: LD_VAR 0 10
45143: PUSH
45144: LD_REAL  1.80000000000000E+0000
45147: MUL
45148: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45149: LD_VAR 0 6
45153: PPUSH
45154: CALL_OW 257
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 3
45167: PUSH
45168: LD_INT 4
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: IN
45177: PUSH
45178: LD_VAR 0 1
45182: PPUSH
45183: LD_INT 51
45185: PPUSH
45186: CALL_OW 321
45190: PUSH
45191: LD_INT 2
45193: EQUAL
45194: AND
45195: IFFALSE 45212
// bpoints := bpoints * 1.2 ;
45197: LD_ADDR_VAR 0 10
45201: PUSH
45202: LD_VAR 0 10
45206: PUSH
45207: LD_REAL  1.20000000000000E+0000
45210: MUL
45211: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45212: LD_VAR 0 6
45216: PPUSH
45217: CALL_OW 257
45221: PUSH
45222: LD_INT 5
45224: PUSH
45225: LD_INT 7
45227: PUSH
45228: LD_INT 9
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: LIST
45235: IN
45236: PUSH
45237: LD_VAR 0 1
45241: PPUSH
45242: LD_INT 52
45244: PPUSH
45245: CALL_OW 321
45249: PUSH
45250: LD_INT 2
45252: EQUAL
45253: AND
45254: IFFALSE 45271
// bpoints := bpoints * 1.5 ;
45256: LD_ADDR_VAR 0 10
45260: PUSH
45261: LD_VAR 0 10
45265: PUSH
45266: LD_REAL  1.50000000000000E+0000
45269: MUL
45270: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45271: LD_VAR 0 1
45275: PPUSH
45276: LD_INT 66
45278: PPUSH
45279: CALL_OW 321
45283: PUSH
45284: LD_INT 2
45286: EQUAL
45287: IFFALSE 45304
// bpoints := bpoints * 1.1 ;
45289: LD_ADDR_VAR 0 10
45293: PUSH
45294: LD_VAR 0 10
45298: PUSH
45299: LD_REAL  1.10000000000000E+0000
45302: MUL
45303: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45304: LD_ADDR_VAR 0 10
45308: PUSH
45309: LD_VAR 0 10
45313: PUSH
45314: LD_VAR 0 6
45318: PPUSH
45319: LD_INT 1
45321: PPUSH
45322: CALL_OW 259
45326: PUSH
45327: LD_REAL  1.15000000000000E+0000
45330: MUL
45331: MUL
45332: ST_TO_ADDR
// end ; unit_vehicle :
45333: GO 46163
45335: LD_INT 2
45337: DOUBLE
45338: EQUAL
45339: IFTRUE 45343
45341: GO 46151
45343: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45344: LD_VAR 0 6
45348: PPUSH
45349: CALL_OW 264
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 42
45359: PUSH
45360: LD_INT 24
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: LIST
45367: IN
45368: IFFALSE 45389
// points := [ 25 , 5 , 3 ] ;
45370: LD_ADDR_VAR 0 9
45374: PUSH
45375: LD_INT 25
45377: PUSH
45378: LD_INT 5
45380: PUSH
45381: LD_INT 3
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: LIST
45388: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45389: LD_VAR 0 6
45393: PPUSH
45394: CALL_OW 264
45398: PUSH
45399: LD_INT 4
45401: PUSH
45402: LD_INT 43
45404: PUSH
45405: LD_INT 25
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: LIST
45412: IN
45413: IFFALSE 45434
// points := [ 40 , 15 , 5 ] ;
45415: LD_ADDR_VAR 0 9
45419: PUSH
45420: LD_INT 40
45422: PUSH
45423: LD_INT 15
45425: PUSH
45426: LD_INT 5
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: LIST
45433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45434: LD_VAR 0 6
45438: PPUSH
45439: CALL_OW 264
45443: PUSH
45444: LD_INT 3
45446: PUSH
45447: LD_INT 23
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: IN
45454: IFFALSE 45475
// points := [ 7 , 25 , 8 ] ;
45456: LD_ADDR_VAR 0 9
45460: PUSH
45461: LD_INT 7
45463: PUSH
45464: LD_INT 25
45466: PUSH
45467: LD_INT 8
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: LIST
45474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45475: LD_VAR 0 6
45479: PPUSH
45480: CALL_OW 264
45484: PUSH
45485: LD_INT 5
45487: PUSH
45488: LD_INT 27
45490: PUSH
45491: LD_INT 44
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: LIST
45498: IN
45499: IFFALSE 45520
// points := [ 14 , 50 , 16 ] ;
45501: LD_ADDR_VAR 0 9
45505: PUSH
45506: LD_INT 14
45508: PUSH
45509: LD_INT 50
45511: PUSH
45512: LD_INT 16
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: LIST
45519: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45520: LD_VAR 0 6
45524: PPUSH
45525: CALL_OW 264
45529: PUSH
45530: LD_INT 6
45532: PUSH
45533: LD_INT 46
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: IN
45540: IFFALSE 45561
// points := [ 32 , 120 , 70 ] ;
45542: LD_ADDR_VAR 0 9
45546: PUSH
45547: LD_INT 32
45549: PUSH
45550: LD_INT 120
45552: PUSH
45553: LD_INT 70
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: LIST
45560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45561: LD_VAR 0 6
45565: PPUSH
45566: CALL_OW 264
45570: PUSH
45571: LD_INT 7
45573: PUSH
45574: LD_INT 28
45576: PUSH
45577: LD_INT 45
45579: PUSH
45580: LD_EXP 38
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: IN
45591: IFFALSE 45612
// points := [ 35 , 20 , 45 ] ;
45593: LD_ADDR_VAR 0 9
45597: PUSH
45598: LD_INT 35
45600: PUSH
45601: LD_INT 20
45603: PUSH
45604: LD_INT 45
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: LIST
45611: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45612: LD_VAR 0 6
45616: PPUSH
45617: CALL_OW 264
45621: PUSH
45622: LD_INT 47
45624: PUSH
45625: EMPTY
45626: LIST
45627: IN
45628: IFFALSE 45649
// points := [ 67 , 45 , 75 ] ;
45630: LD_ADDR_VAR 0 9
45634: PUSH
45635: LD_INT 67
45637: PUSH
45638: LD_INT 45
45640: PUSH
45641: LD_INT 75
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: LIST
45648: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45649: LD_VAR 0 6
45653: PPUSH
45654: CALL_OW 264
45658: PUSH
45659: LD_INT 26
45661: PUSH
45662: EMPTY
45663: LIST
45664: IN
45665: IFFALSE 45686
// points := [ 120 , 30 , 80 ] ;
45667: LD_ADDR_VAR 0 9
45671: PUSH
45672: LD_INT 120
45674: PUSH
45675: LD_INT 30
45677: PUSH
45678: LD_INT 80
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45686: LD_VAR 0 6
45690: PPUSH
45691: CALL_OW 264
45695: PUSH
45696: LD_INT 22
45698: PUSH
45699: EMPTY
45700: LIST
45701: IN
45702: IFFALSE 45723
// points := [ 40 , 1 , 1 ] ;
45704: LD_ADDR_VAR 0 9
45708: PUSH
45709: LD_INT 40
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: LIST
45722: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45723: LD_VAR 0 6
45727: PPUSH
45728: CALL_OW 264
45732: PUSH
45733: LD_INT 29
45735: PUSH
45736: EMPTY
45737: LIST
45738: IN
45739: IFFALSE 45760
// points := [ 70 , 200 , 400 ] ;
45741: LD_ADDR_VAR 0 9
45745: PUSH
45746: LD_INT 70
45748: PUSH
45749: LD_INT 200
45751: PUSH
45752: LD_INT 400
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: LIST
45759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45760: LD_VAR 0 6
45764: PPUSH
45765: CALL_OW 264
45769: PUSH
45770: LD_INT 14
45772: PUSH
45773: LD_INT 53
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: IN
45780: IFFALSE 45801
// points := [ 40 , 10 , 20 ] ;
45782: LD_ADDR_VAR 0 9
45786: PUSH
45787: LD_INT 40
45789: PUSH
45790: LD_INT 10
45792: PUSH
45793: LD_INT 20
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: LIST
45800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45801: LD_VAR 0 6
45805: PPUSH
45806: CALL_OW 264
45810: PUSH
45811: LD_INT 9
45813: PUSH
45814: EMPTY
45815: LIST
45816: IN
45817: IFFALSE 45838
// points := [ 5 , 70 , 20 ] ;
45819: LD_ADDR_VAR 0 9
45823: PUSH
45824: LD_INT 5
45826: PUSH
45827: LD_INT 70
45829: PUSH
45830: LD_INT 20
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: LIST
45837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45838: LD_VAR 0 6
45842: PPUSH
45843: CALL_OW 264
45847: PUSH
45848: LD_INT 10
45850: PUSH
45851: EMPTY
45852: LIST
45853: IN
45854: IFFALSE 45875
// points := [ 35 , 110 , 70 ] ;
45856: LD_ADDR_VAR 0 9
45860: PUSH
45861: LD_INT 35
45863: PUSH
45864: LD_INT 110
45866: PUSH
45867: LD_INT 70
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45875: LD_VAR 0 6
45879: PPUSH
45880: CALL_OW 265
45884: PUSH
45885: LD_INT 25
45887: EQUAL
45888: IFFALSE 45909
// points := [ 80 , 65 , 100 ] ;
45890: LD_ADDR_VAR 0 9
45894: PUSH
45895: LD_INT 80
45897: PUSH
45898: LD_INT 65
45900: PUSH
45901: LD_INT 100
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: LIST
45908: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45909: LD_VAR 0 6
45913: PPUSH
45914: CALL_OW 263
45918: PUSH
45919: LD_INT 1
45921: EQUAL
45922: IFFALSE 45957
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45924: LD_ADDR_VAR 0 10
45928: PUSH
45929: LD_VAR 0 10
45933: PUSH
45934: LD_VAR 0 6
45938: PPUSH
45939: CALL_OW 311
45943: PPUSH
45944: LD_INT 3
45946: PPUSH
45947: CALL_OW 259
45951: PUSH
45952: LD_INT 4
45954: MUL
45955: MUL
45956: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45957: LD_VAR 0 6
45961: PPUSH
45962: CALL_OW 263
45966: PUSH
45967: LD_INT 2
45969: EQUAL
45970: IFFALSE 46021
// begin j := IsControledBy ( i ) ;
45972: LD_ADDR_VAR 0 7
45976: PUSH
45977: LD_VAR 0 6
45981: PPUSH
45982: CALL_OW 312
45986: ST_TO_ADDR
// if j then
45987: LD_VAR 0 7
45991: IFFALSE 46021
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45993: LD_ADDR_VAR 0 10
45997: PUSH
45998: LD_VAR 0 10
46002: PUSH
46003: LD_VAR 0 7
46007: PPUSH
46008: LD_INT 3
46010: PPUSH
46011: CALL_OW 259
46015: PUSH
46016: LD_INT 3
46018: MUL
46019: MUL
46020: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46021: LD_VAR 0 6
46025: PPUSH
46026: CALL_OW 264
46030: PUSH
46031: LD_INT 5
46033: PUSH
46034: LD_INT 6
46036: PUSH
46037: LD_INT 46
46039: PUSH
46040: LD_INT 44
46042: PUSH
46043: LD_INT 47
46045: PUSH
46046: LD_INT 45
46048: PUSH
46049: LD_INT 28
46051: PUSH
46052: LD_INT 7
46054: PUSH
46055: LD_INT 27
46057: PUSH
46058: LD_INT 29
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: IN
46073: PUSH
46074: LD_VAR 0 1
46078: PPUSH
46079: LD_INT 52
46081: PPUSH
46082: CALL_OW 321
46086: PUSH
46087: LD_INT 2
46089: EQUAL
46090: AND
46091: IFFALSE 46108
// bpoints := bpoints * 1.2 ;
46093: LD_ADDR_VAR 0 10
46097: PUSH
46098: LD_VAR 0 10
46102: PUSH
46103: LD_REAL  1.20000000000000E+0000
46106: MUL
46107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46108: LD_VAR 0 6
46112: PPUSH
46113: CALL_OW 264
46117: PUSH
46118: LD_INT 6
46120: PUSH
46121: LD_INT 46
46123: PUSH
46124: LD_INT 47
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: IN
46132: IFFALSE 46149
// bpoints := bpoints * 1.2 ;
46134: LD_ADDR_VAR 0 10
46138: PUSH
46139: LD_VAR 0 10
46143: PUSH
46144: LD_REAL  1.20000000000000E+0000
46147: MUL
46148: ST_TO_ADDR
// end ; unit_building :
46149: GO 46163
46151: LD_INT 3
46153: DOUBLE
46154: EQUAL
46155: IFTRUE 46159
46157: GO 46162
46159: POP
// ; end ;
46160: GO 46163
46162: POP
// for j = 1 to 3 do
46163: LD_ADDR_VAR 0 7
46167: PUSH
46168: DOUBLE
46169: LD_INT 1
46171: DEC
46172: ST_TO_ADDR
46173: LD_INT 3
46175: PUSH
46176: FOR_TO
46177: IFFALSE 46230
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46179: LD_ADDR_VAR 0 5
46183: PUSH
46184: LD_VAR 0 5
46188: PPUSH
46189: LD_VAR 0 7
46193: PPUSH
46194: LD_VAR 0 5
46198: PUSH
46199: LD_VAR 0 7
46203: ARRAY
46204: PUSH
46205: LD_VAR 0 9
46209: PUSH
46210: LD_VAR 0 7
46214: ARRAY
46215: PUSH
46216: LD_VAR 0 10
46220: MUL
46221: PLUS
46222: PPUSH
46223: CALL_OW 1
46227: ST_TO_ADDR
46228: GO 46176
46230: POP
46231: POP
// end ;
46232: GO 44709
46234: POP
46235: POP
// result := Replace ( result , 4 , tmp ) ;
46236: LD_ADDR_VAR 0 5
46240: PUSH
46241: LD_VAR 0 5
46245: PPUSH
46246: LD_INT 4
46248: PPUSH
46249: LD_VAR 0 8
46253: PPUSH
46254: CALL_OW 1
46258: ST_TO_ADDR
// end ;
46259: LD_VAR 0 5
46263: RET
// export function DangerAtRange ( unit , range ) ; begin
46264: LD_INT 0
46266: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46267: LD_ADDR_VAR 0 3
46271: PUSH
46272: LD_VAR 0 1
46276: PPUSH
46277: CALL_OW 255
46281: PPUSH
46282: LD_VAR 0 1
46286: PPUSH
46287: CALL_OW 250
46291: PPUSH
46292: LD_VAR 0 1
46296: PPUSH
46297: CALL_OW 251
46301: PPUSH
46302: LD_VAR 0 2
46306: PPUSH
46307: CALL 44561 0 4
46311: ST_TO_ADDR
// end ;
46312: LD_VAR 0 3
46316: RET
// export function DangerInArea ( side , area ) ; begin
46317: LD_INT 0
46319: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46320: LD_ADDR_VAR 0 3
46324: PUSH
46325: LD_VAR 0 2
46329: PPUSH
46330: LD_INT 81
46332: PUSH
46333: LD_VAR 0 1
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PPUSH
46342: CALL_OW 70
46346: ST_TO_ADDR
// end ;
46347: LD_VAR 0 3
46351: RET
// export function IsExtension ( b ) ; begin
46352: LD_INT 0
46354: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46355: LD_ADDR_VAR 0 2
46359: PUSH
46360: LD_VAR 0 1
46364: PUSH
46365: LD_INT 23
46367: PUSH
46368: LD_INT 20
46370: PUSH
46371: LD_INT 22
46373: PUSH
46374: LD_INT 17
46376: PUSH
46377: LD_INT 24
46379: PUSH
46380: LD_INT 21
46382: PUSH
46383: LD_INT 19
46385: PUSH
46386: LD_INT 16
46388: PUSH
46389: LD_INT 25
46391: PUSH
46392: LD_INT 18
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: IN
46407: ST_TO_ADDR
// end ;
46408: LD_VAR 0 2
46412: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46413: LD_INT 0
46415: PPUSH
46416: PPUSH
46417: PPUSH
// result := [ ] ;
46418: LD_ADDR_VAR 0 4
46422: PUSH
46423: EMPTY
46424: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46425: LD_ADDR_VAR 0 5
46429: PUSH
46430: LD_VAR 0 2
46434: PPUSH
46435: LD_INT 21
46437: PUSH
46438: LD_INT 3
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PPUSH
46445: CALL_OW 70
46449: ST_TO_ADDR
// if not tmp then
46450: LD_VAR 0 5
46454: NOT
46455: IFFALSE 46459
// exit ;
46457: GO 46523
// if checkLink then
46459: LD_VAR 0 3
46463: IFFALSE 46513
// begin for i in tmp do
46465: LD_ADDR_VAR 0 6
46469: PUSH
46470: LD_VAR 0 5
46474: PUSH
46475: FOR_IN
46476: IFFALSE 46511
// if GetBase ( i ) <> base then
46478: LD_VAR 0 6
46482: PPUSH
46483: CALL_OW 274
46487: PUSH
46488: LD_VAR 0 1
46492: NONEQUAL
46493: IFFALSE 46509
// ComLinkToBase ( base , i ) ;
46495: LD_VAR 0 1
46499: PPUSH
46500: LD_VAR 0 6
46504: PPUSH
46505: CALL_OW 169
46509: GO 46475
46511: POP
46512: POP
// end ; result := tmp ;
46513: LD_ADDR_VAR 0 4
46517: PUSH
46518: LD_VAR 0 5
46522: ST_TO_ADDR
// end ;
46523: LD_VAR 0 4
46527: RET
// export function ComComplete ( units , b ) ; var i ; begin
46528: LD_INT 0
46530: PPUSH
46531: PPUSH
// if not units then
46532: LD_VAR 0 1
46536: NOT
46537: IFFALSE 46541
// exit ;
46539: GO 46631
// for i in units do
46541: LD_ADDR_VAR 0 4
46545: PUSH
46546: LD_VAR 0 1
46550: PUSH
46551: FOR_IN
46552: IFFALSE 46629
// if BuildingStatus ( b ) = bs_build then
46554: LD_VAR 0 2
46558: PPUSH
46559: CALL_OW 461
46563: PUSH
46564: LD_INT 1
46566: EQUAL
46567: IFFALSE 46627
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46569: LD_VAR 0 4
46573: PPUSH
46574: LD_STRING h
46576: PUSH
46577: LD_VAR 0 2
46581: PPUSH
46582: CALL_OW 250
46586: PUSH
46587: LD_VAR 0 2
46591: PPUSH
46592: CALL_OW 251
46596: PUSH
46597: LD_VAR 0 2
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: PUSH
46620: EMPTY
46621: LIST
46622: PPUSH
46623: CALL_OW 446
46627: GO 46551
46629: POP
46630: POP
// end ;
46631: LD_VAR 0 3
46635: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46636: LD_INT 0
46638: PPUSH
46639: PPUSH
46640: PPUSH
46641: PPUSH
46642: PPUSH
46643: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46644: LD_VAR 0 1
46648: NOT
46649: PUSH
46650: LD_VAR 0 1
46654: PPUSH
46655: CALL_OW 263
46659: PUSH
46660: LD_INT 2
46662: NONEQUAL
46663: OR
46664: IFFALSE 46668
// exit ;
46666: GO 46984
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46668: LD_ADDR_VAR 0 6
46672: PUSH
46673: LD_INT 22
46675: PUSH
46676: LD_VAR 0 1
46680: PPUSH
46681: CALL_OW 255
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: LD_INT 30
46695: PUSH
46696: LD_INT 36
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 34
46705: PUSH
46706: LD_INT 31
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: LIST
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PPUSH
46722: CALL_OW 69
46726: ST_TO_ADDR
// if not tmp then
46727: LD_VAR 0 6
46731: NOT
46732: IFFALSE 46736
// exit ;
46734: GO 46984
// result := [ ] ;
46736: LD_ADDR_VAR 0 2
46740: PUSH
46741: EMPTY
46742: ST_TO_ADDR
// for i in tmp do
46743: LD_ADDR_VAR 0 3
46747: PUSH
46748: LD_VAR 0 6
46752: PUSH
46753: FOR_IN
46754: IFFALSE 46825
// begin t := UnitsInside ( i ) ;
46756: LD_ADDR_VAR 0 4
46760: PUSH
46761: LD_VAR 0 3
46765: PPUSH
46766: CALL_OW 313
46770: ST_TO_ADDR
// if t then
46771: LD_VAR 0 4
46775: IFFALSE 46823
// for j in t do
46777: LD_ADDR_VAR 0 7
46781: PUSH
46782: LD_VAR 0 4
46786: PUSH
46787: FOR_IN
46788: IFFALSE 46821
// result := Replace ( result , result + 1 , j ) ;
46790: LD_ADDR_VAR 0 2
46794: PUSH
46795: LD_VAR 0 2
46799: PPUSH
46800: LD_VAR 0 2
46804: PUSH
46805: LD_INT 1
46807: PLUS
46808: PPUSH
46809: LD_VAR 0 7
46813: PPUSH
46814: CALL_OW 1
46818: ST_TO_ADDR
46819: GO 46787
46821: POP
46822: POP
// end ;
46823: GO 46753
46825: POP
46826: POP
// if not result then
46827: LD_VAR 0 2
46831: NOT
46832: IFFALSE 46836
// exit ;
46834: GO 46984
// mech := result [ 1 ] ;
46836: LD_ADDR_VAR 0 5
46840: PUSH
46841: LD_VAR 0 2
46845: PUSH
46846: LD_INT 1
46848: ARRAY
46849: ST_TO_ADDR
// if result > 1 then
46850: LD_VAR 0 2
46854: PUSH
46855: LD_INT 1
46857: GREATER
46858: IFFALSE 46970
// begin for i = 2 to result do
46860: LD_ADDR_VAR 0 3
46864: PUSH
46865: DOUBLE
46866: LD_INT 2
46868: DEC
46869: ST_TO_ADDR
46870: LD_VAR 0 2
46874: PUSH
46875: FOR_TO
46876: IFFALSE 46968
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46878: LD_ADDR_VAR 0 4
46882: PUSH
46883: LD_VAR 0 2
46887: PUSH
46888: LD_VAR 0 3
46892: ARRAY
46893: PPUSH
46894: LD_INT 3
46896: PPUSH
46897: CALL_OW 259
46901: PUSH
46902: LD_VAR 0 2
46906: PUSH
46907: LD_VAR 0 3
46911: ARRAY
46912: PPUSH
46913: CALL_OW 432
46917: MINUS
46918: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46919: LD_VAR 0 4
46923: PUSH
46924: LD_VAR 0 5
46928: PPUSH
46929: LD_INT 3
46931: PPUSH
46932: CALL_OW 259
46936: PUSH
46937: LD_VAR 0 5
46941: PPUSH
46942: CALL_OW 432
46946: MINUS
46947: GREATEREQUAL
46948: IFFALSE 46966
// mech := result [ i ] ;
46950: LD_ADDR_VAR 0 5
46954: PUSH
46955: LD_VAR 0 2
46959: PUSH
46960: LD_VAR 0 3
46964: ARRAY
46965: ST_TO_ADDR
// end ;
46966: GO 46875
46968: POP
46969: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46970: LD_VAR 0 1
46974: PPUSH
46975: LD_VAR 0 5
46979: PPUSH
46980: CALL_OW 135
// end ;
46984: LD_VAR 0 2
46988: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46989: LD_INT 0
46991: PPUSH
46992: PPUSH
46993: PPUSH
46994: PPUSH
46995: PPUSH
46996: PPUSH
46997: PPUSH
46998: PPUSH
46999: PPUSH
47000: PPUSH
47001: PPUSH
47002: PPUSH
47003: PPUSH
// result := [ ] ;
47004: LD_ADDR_VAR 0 7
47008: PUSH
47009: EMPTY
47010: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47011: LD_VAR 0 1
47015: PPUSH
47016: CALL_OW 266
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: IN
47031: NOT
47032: IFFALSE 47036
// exit ;
47034: GO 48670
// if name then
47036: LD_VAR 0 3
47040: IFFALSE 47056
// SetBName ( base_dep , name ) ;
47042: LD_VAR 0 1
47046: PPUSH
47047: LD_VAR 0 3
47051: PPUSH
47052: CALL_OW 500
// base := GetBase ( base_dep ) ;
47056: LD_ADDR_VAR 0 15
47060: PUSH
47061: LD_VAR 0 1
47065: PPUSH
47066: CALL_OW 274
47070: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47071: LD_ADDR_VAR 0 16
47075: PUSH
47076: LD_VAR 0 1
47080: PPUSH
47081: CALL_OW 255
47085: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47086: LD_ADDR_VAR 0 17
47090: PUSH
47091: LD_VAR 0 1
47095: PPUSH
47096: CALL_OW 248
47100: ST_TO_ADDR
// if sources then
47101: LD_VAR 0 5
47105: IFFALSE 47152
// for i = 1 to 3 do
47107: LD_ADDR_VAR 0 8
47111: PUSH
47112: DOUBLE
47113: LD_INT 1
47115: DEC
47116: ST_TO_ADDR
47117: LD_INT 3
47119: PUSH
47120: FOR_TO
47121: IFFALSE 47150
// AddResourceType ( base , i , sources [ i ] ) ;
47123: LD_VAR 0 15
47127: PPUSH
47128: LD_VAR 0 8
47132: PPUSH
47133: LD_VAR 0 5
47137: PUSH
47138: LD_VAR 0 8
47142: ARRAY
47143: PPUSH
47144: CALL_OW 276
47148: GO 47120
47150: POP
47151: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47152: LD_ADDR_VAR 0 18
47156: PUSH
47157: LD_VAR 0 15
47161: PPUSH
47162: LD_VAR 0 2
47166: PPUSH
47167: LD_INT 1
47169: PPUSH
47170: CALL 46413 0 3
47174: ST_TO_ADDR
// InitHc ;
47175: CALL_OW 19
// InitUc ;
47179: CALL_OW 18
// uc_side := side ;
47183: LD_ADDR_OWVAR 20
47187: PUSH
47188: LD_VAR 0 16
47192: ST_TO_ADDR
// uc_nation := nation ;
47193: LD_ADDR_OWVAR 21
47197: PUSH
47198: LD_VAR 0 17
47202: ST_TO_ADDR
// if buildings then
47203: LD_VAR 0 18
47207: IFFALSE 48529
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47209: LD_ADDR_VAR 0 19
47213: PUSH
47214: LD_VAR 0 18
47218: PPUSH
47219: LD_INT 2
47221: PUSH
47222: LD_INT 30
47224: PUSH
47225: LD_INT 29
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 30
47234: PUSH
47235: LD_INT 30
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: PPUSH
47247: CALL_OW 72
47251: ST_TO_ADDR
// if tmp then
47252: LD_VAR 0 19
47256: IFFALSE 47304
// for i in tmp do
47258: LD_ADDR_VAR 0 8
47262: PUSH
47263: LD_VAR 0 19
47267: PUSH
47268: FOR_IN
47269: IFFALSE 47302
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47271: LD_VAR 0 8
47275: PPUSH
47276: CALL_OW 250
47280: PPUSH
47281: LD_VAR 0 8
47285: PPUSH
47286: CALL_OW 251
47290: PPUSH
47291: LD_VAR 0 16
47295: PPUSH
47296: CALL_OW 441
47300: GO 47268
47302: POP
47303: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47304: LD_VAR 0 18
47308: PPUSH
47309: LD_INT 2
47311: PUSH
47312: LD_INT 30
47314: PUSH
47315: LD_INT 32
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 30
47324: PUSH
47325: LD_INT 33
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: LIST
47336: PPUSH
47337: CALL_OW 72
47341: IFFALSE 47429
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47343: LD_ADDR_VAR 0 8
47347: PUSH
47348: LD_VAR 0 18
47352: PPUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 30
47358: PUSH
47359: LD_INT 32
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 30
47368: PUSH
47369: LD_INT 33
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: PPUSH
47381: CALL_OW 72
47385: PUSH
47386: FOR_IN
47387: IFFALSE 47427
// begin if not GetBWeapon ( i ) then
47389: LD_VAR 0 8
47393: PPUSH
47394: CALL_OW 269
47398: NOT
47399: IFFALSE 47425
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47401: LD_VAR 0 8
47405: PPUSH
47406: LD_VAR 0 8
47410: PPUSH
47411: LD_VAR 0 2
47415: PPUSH
47416: CALL 48675 0 2
47420: PPUSH
47421: CALL_OW 431
// end ;
47425: GO 47386
47427: POP
47428: POP
// end ; for i = 1 to personel do
47429: LD_ADDR_VAR 0 8
47433: PUSH
47434: DOUBLE
47435: LD_INT 1
47437: DEC
47438: ST_TO_ADDR
47439: LD_VAR 0 6
47443: PUSH
47444: FOR_TO
47445: IFFALSE 48509
// begin if i > 4 then
47447: LD_VAR 0 8
47451: PUSH
47452: LD_INT 4
47454: GREATER
47455: IFFALSE 47459
// break ;
47457: GO 48509
// case i of 1 :
47459: LD_VAR 0 8
47463: PUSH
47464: LD_INT 1
47466: DOUBLE
47467: EQUAL
47468: IFTRUE 47472
47470: GO 47552
47472: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47473: LD_ADDR_VAR 0 12
47477: PUSH
47478: LD_VAR 0 18
47482: PPUSH
47483: LD_INT 22
47485: PUSH
47486: LD_VAR 0 16
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 58
47497: PUSH
47498: EMPTY
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: LD_INT 30
47506: PUSH
47507: LD_INT 32
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 30
47516: PUSH
47517: LD_INT 4
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 30
47526: PUSH
47527: LD_INT 5
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: PPUSH
47545: CALL_OW 72
47549: ST_TO_ADDR
47550: GO 47774
47552: LD_INT 2
47554: DOUBLE
47555: EQUAL
47556: IFTRUE 47560
47558: GO 47622
47560: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47561: LD_ADDR_VAR 0 12
47565: PUSH
47566: LD_VAR 0 18
47570: PPUSH
47571: LD_INT 22
47573: PUSH
47574: LD_VAR 0 16
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: LD_INT 30
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 30
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: LIST
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PPUSH
47615: CALL_OW 72
47619: ST_TO_ADDR
47620: GO 47774
47622: LD_INT 3
47624: DOUBLE
47625: EQUAL
47626: IFTRUE 47630
47628: GO 47692
47630: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47631: LD_ADDR_VAR 0 12
47635: PUSH
47636: LD_VAR 0 18
47640: PPUSH
47641: LD_INT 22
47643: PUSH
47644: LD_VAR 0 16
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: LD_INT 30
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 30
47668: PUSH
47669: LD_INT 3
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: LIST
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PPUSH
47685: CALL_OW 72
47689: ST_TO_ADDR
47690: GO 47774
47692: LD_INT 4
47694: DOUBLE
47695: EQUAL
47696: IFTRUE 47700
47698: GO 47773
47700: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47701: LD_ADDR_VAR 0 12
47705: PUSH
47706: LD_VAR 0 18
47710: PPUSH
47711: LD_INT 22
47713: PUSH
47714: LD_VAR 0 16
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: LD_INT 30
47728: PUSH
47729: LD_INT 6
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 30
47738: PUSH
47739: LD_INT 7
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 30
47748: PUSH
47749: LD_INT 8
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PPUSH
47766: CALL_OW 72
47770: ST_TO_ADDR
47771: GO 47774
47773: POP
// if i = 1 then
47774: LD_VAR 0 8
47778: PUSH
47779: LD_INT 1
47781: EQUAL
47782: IFFALSE 47893
// begin tmp := [ ] ;
47784: LD_ADDR_VAR 0 19
47788: PUSH
47789: EMPTY
47790: ST_TO_ADDR
// for j in f do
47791: LD_ADDR_VAR 0 9
47795: PUSH
47796: LD_VAR 0 12
47800: PUSH
47801: FOR_IN
47802: IFFALSE 47875
// if GetBType ( j ) = b_bunker then
47804: LD_VAR 0 9
47808: PPUSH
47809: CALL_OW 266
47813: PUSH
47814: LD_INT 32
47816: EQUAL
47817: IFFALSE 47844
// tmp := Insert ( tmp , 1 , j ) else
47819: LD_ADDR_VAR 0 19
47823: PUSH
47824: LD_VAR 0 19
47828: PPUSH
47829: LD_INT 1
47831: PPUSH
47832: LD_VAR 0 9
47836: PPUSH
47837: CALL_OW 2
47841: ST_TO_ADDR
47842: GO 47873
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47844: LD_ADDR_VAR 0 19
47848: PUSH
47849: LD_VAR 0 19
47853: PPUSH
47854: LD_VAR 0 19
47858: PUSH
47859: LD_INT 1
47861: PLUS
47862: PPUSH
47863: LD_VAR 0 9
47867: PPUSH
47868: CALL_OW 2
47872: ST_TO_ADDR
47873: GO 47801
47875: POP
47876: POP
// if tmp then
47877: LD_VAR 0 19
47881: IFFALSE 47893
// f := tmp ;
47883: LD_ADDR_VAR 0 12
47887: PUSH
47888: LD_VAR 0 19
47892: ST_TO_ADDR
// end ; x := personel [ i ] ;
47893: LD_ADDR_VAR 0 13
47897: PUSH
47898: LD_VAR 0 6
47902: PUSH
47903: LD_VAR 0 8
47907: ARRAY
47908: ST_TO_ADDR
// if x = - 1 then
47909: LD_VAR 0 13
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: EQUAL
47918: IFFALSE 48127
// begin for j in f do
47920: LD_ADDR_VAR 0 9
47924: PUSH
47925: LD_VAR 0 12
47929: PUSH
47930: FOR_IN
47931: IFFALSE 48123
// repeat InitHc ;
47933: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47937: LD_VAR 0 9
47941: PPUSH
47942: CALL_OW 266
47946: PUSH
47947: LD_INT 5
47949: EQUAL
47950: IFFALSE 48020
// begin if UnitsInside ( j ) < 3 then
47952: LD_VAR 0 9
47956: PPUSH
47957: CALL_OW 313
47961: PUSH
47962: LD_INT 3
47964: LESS
47965: IFFALSE 48001
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47967: LD_INT 0
47969: PPUSH
47970: LD_INT 5
47972: PUSH
47973: LD_INT 8
47975: PUSH
47976: LD_INT 9
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: PUSH
47984: LD_VAR 0 17
47988: ARRAY
47989: PPUSH
47990: LD_VAR 0 4
47994: PPUSH
47995: CALL_OW 380
47999: GO 48018
// PrepareHuman ( false , i , skill ) ;
48001: LD_INT 0
48003: PPUSH
48004: LD_VAR 0 8
48008: PPUSH
48009: LD_VAR 0 4
48013: PPUSH
48014: CALL_OW 380
// end else
48018: GO 48037
// PrepareHuman ( false , i , skill ) ;
48020: LD_INT 0
48022: PPUSH
48023: LD_VAR 0 8
48027: PPUSH
48028: LD_VAR 0 4
48032: PPUSH
48033: CALL_OW 380
// un := CreateHuman ;
48037: LD_ADDR_VAR 0 14
48041: PUSH
48042: CALL_OW 44
48046: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48047: LD_ADDR_VAR 0 7
48051: PUSH
48052: LD_VAR 0 7
48056: PPUSH
48057: LD_INT 1
48059: PPUSH
48060: LD_VAR 0 14
48064: PPUSH
48065: CALL_OW 2
48069: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48070: LD_VAR 0 14
48074: PPUSH
48075: LD_VAR 0 9
48079: PPUSH
48080: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48084: LD_VAR 0 9
48088: PPUSH
48089: CALL_OW 313
48093: PUSH
48094: LD_INT 6
48096: EQUAL
48097: PUSH
48098: LD_VAR 0 9
48102: PPUSH
48103: CALL_OW 266
48107: PUSH
48108: LD_INT 32
48110: PUSH
48111: LD_INT 31
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: IN
48118: OR
48119: IFFALSE 47933
48121: GO 47930
48123: POP
48124: POP
// end else
48125: GO 48507
// for j = 1 to x do
48127: LD_ADDR_VAR 0 9
48131: PUSH
48132: DOUBLE
48133: LD_INT 1
48135: DEC
48136: ST_TO_ADDR
48137: LD_VAR 0 13
48141: PUSH
48142: FOR_TO
48143: IFFALSE 48505
// begin InitHc ;
48145: CALL_OW 19
// if not f then
48149: LD_VAR 0 12
48153: NOT
48154: IFFALSE 48243
// begin PrepareHuman ( false , i , skill ) ;
48156: LD_INT 0
48158: PPUSH
48159: LD_VAR 0 8
48163: PPUSH
48164: LD_VAR 0 4
48168: PPUSH
48169: CALL_OW 380
// un := CreateHuman ;
48173: LD_ADDR_VAR 0 14
48177: PUSH
48178: CALL_OW 44
48182: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48183: LD_ADDR_VAR 0 7
48187: PUSH
48188: LD_VAR 0 7
48192: PPUSH
48193: LD_INT 1
48195: PPUSH
48196: LD_VAR 0 14
48200: PPUSH
48201: CALL_OW 2
48205: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48206: LD_VAR 0 14
48210: PPUSH
48211: LD_VAR 0 1
48215: PPUSH
48216: CALL_OW 250
48220: PPUSH
48221: LD_VAR 0 1
48225: PPUSH
48226: CALL_OW 251
48230: PPUSH
48231: LD_INT 10
48233: PPUSH
48234: LD_INT 0
48236: PPUSH
48237: CALL_OW 50
// continue ;
48241: GO 48142
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48243: LD_VAR 0 12
48247: PUSH
48248: LD_INT 1
48250: ARRAY
48251: PPUSH
48252: CALL_OW 313
48256: PUSH
48257: LD_VAR 0 12
48261: PUSH
48262: LD_INT 1
48264: ARRAY
48265: PPUSH
48266: CALL_OW 266
48270: PUSH
48271: LD_INT 32
48273: PUSH
48274: LD_INT 31
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: IN
48281: AND
48282: PUSH
48283: LD_VAR 0 12
48287: PUSH
48288: LD_INT 1
48290: ARRAY
48291: PPUSH
48292: CALL_OW 313
48296: PUSH
48297: LD_INT 6
48299: EQUAL
48300: OR
48301: IFFALSE 48321
// f := Delete ( f , 1 ) ;
48303: LD_ADDR_VAR 0 12
48307: PUSH
48308: LD_VAR 0 12
48312: PPUSH
48313: LD_INT 1
48315: PPUSH
48316: CALL_OW 3
48320: ST_TO_ADDR
// if not f then
48321: LD_VAR 0 12
48325: NOT
48326: IFFALSE 48344
// begin x := x + 2 ;
48328: LD_ADDR_VAR 0 13
48332: PUSH
48333: LD_VAR 0 13
48337: PUSH
48338: LD_INT 2
48340: PLUS
48341: ST_TO_ADDR
// continue ;
48342: GO 48142
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48344: LD_VAR 0 12
48348: PUSH
48349: LD_INT 1
48351: ARRAY
48352: PPUSH
48353: CALL_OW 266
48357: PUSH
48358: LD_INT 5
48360: EQUAL
48361: IFFALSE 48435
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48363: LD_VAR 0 12
48367: PUSH
48368: LD_INT 1
48370: ARRAY
48371: PPUSH
48372: CALL_OW 313
48376: PUSH
48377: LD_INT 3
48379: LESS
48380: IFFALSE 48416
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48382: LD_INT 0
48384: PPUSH
48385: LD_INT 5
48387: PUSH
48388: LD_INT 8
48390: PUSH
48391: LD_INT 9
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: LIST
48398: PUSH
48399: LD_VAR 0 17
48403: ARRAY
48404: PPUSH
48405: LD_VAR 0 4
48409: PPUSH
48410: CALL_OW 380
48414: GO 48433
// PrepareHuman ( false , i , skill ) ;
48416: LD_INT 0
48418: PPUSH
48419: LD_VAR 0 8
48423: PPUSH
48424: LD_VAR 0 4
48428: PPUSH
48429: CALL_OW 380
// end else
48433: GO 48452
// PrepareHuman ( false , i , skill ) ;
48435: LD_INT 0
48437: PPUSH
48438: LD_VAR 0 8
48442: PPUSH
48443: LD_VAR 0 4
48447: PPUSH
48448: CALL_OW 380
// un := CreateHuman ;
48452: LD_ADDR_VAR 0 14
48456: PUSH
48457: CALL_OW 44
48461: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48462: LD_ADDR_VAR 0 7
48466: PUSH
48467: LD_VAR 0 7
48471: PPUSH
48472: LD_INT 1
48474: PPUSH
48475: LD_VAR 0 14
48479: PPUSH
48480: CALL_OW 2
48484: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48485: LD_VAR 0 14
48489: PPUSH
48490: LD_VAR 0 12
48494: PUSH
48495: LD_INT 1
48497: ARRAY
48498: PPUSH
48499: CALL_OW 52
// end ;
48503: GO 48142
48505: POP
48506: POP
// end ;
48507: GO 47444
48509: POP
48510: POP
// result := result ^ buildings ;
48511: LD_ADDR_VAR 0 7
48515: PUSH
48516: LD_VAR 0 7
48520: PUSH
48521: LD_VAR 0 18
48525: ADD
48526: ST_TO_ADDR
// end else
48527: GO 48670
// begin for i = 1 to personel do
48529: LD_ADDR_VAR 0 8
48533: PUSH
48534: DOUBLE
48535: LD_INT 1
48537: DEC
48538: ST_TO_ADDR
48539: LD_VAR 0 6
48543: PUSH
48544: FOR_TO
48545: IFFALSE 48668
// begin if i > 4 then
48547: LD_VAR 0 8
48551: PUSH
48552: LD_INT 4
48554: GREATER
48555: IFFALSE 48559
// break ;
48557: GO 48668
// x := personel [ i ] ;
48559: LD_ADDR_VAR 0 13
48563: PUSH
48564: LD_VAR 0 6
48568: PUSH
48569: LD_VAR 0 8
48573: ARRAY
48574: ST_TO_ADDR
// if x = - 1 then
48575: LD_VAR 0 13
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: EQUAL
48584: IFFALSE 48588
// continue ;
48586: GO 48544
// PrepareHuman ( false , i , skill ) ;
48588: LD_INT 0
48590: PPUSH
48591: LD_VAR 0 8
48595: PPUSH
48596: LD_VAR 0 4
48600: PPUSH
48601: CALL_OW 380
// un := CreateHuman ;
48605: LD_ADDR_VAR 0 14
48609: PUSH
48610: CALL_OW 44
48614: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48615: LD_VAR 0 14
48619: PPUSH
48620: LD_VAR 0 1
48624: PPUSH
48625: CALL_OW 250
48629: PPUSH
48630: LD_VAR 0 1
48634: PPUSH
48635: CALL_OW 251
48639: PPUSH
48640: LD_INT 10
48642: PPUSH
48643: LD_INT 0
48645: PPUSH
48646: CALL_OW 50
// result := result ^ un ;
48650: LD_ADDR_VAR 0 7
48654: PUSH
48655: LD_VAR 0 7
48659: PUSH
48660: LD_VAR 0 14
48664: ADD
48665: ST_TO_ADDR
// end ;
48666: GO 48544
48668: POP
48669: POP
// end ; end ;
48670: LD_VAR 0 7
48674: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48675: LD_INT 0
48677: PPUSH
48678: PPUSH
48679: PPUSH
48680: PPUSH
48681: PPUSH
48682: PPUSH
48683: PPUSH
48684: PPUSH
48685: PPUSH
48686: PPUSH
48687: PPUSH
48688: PPUSH
48689: PPUSH
48690: PPUSH
48691: PPUSH
48692: PPUSH
// result := false ;
48693: LD_ADDR_VAR 0 3
48697: PUSH
48698: LD_INT 0
48700: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48701: LD_VAR 0 1
48705: NOT
48706: PUSH
48707: LD_VAR 0 1
48711: PPUSH
48712: CALL_OW 266
48716: PUSH
48717: LD_INT 32
48719: PUSH
48720: LD_INT 33
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: IN
48727: NOT
48728: OR
48729: IFFALSE 48733
// exit ;
48731: GO 49842
// nat := GetNation ( tower ) ;
48733: LD_ADDR_VAR 0 12
48737: PUSH
48738: LD_VAR 0 1
48742: PPUSH
48743: CALL_OW 248
48747: ST_TO_ADDR
// side := GetSide ( tower ) ;
48748: LD_ADDR_VAR 0 16
48752: PUSH
48753: LD_VAR 0 1
48757: PPUSH
48758: CALL_OW 255
48762: ST_TO_ADDR
// x := GetX ( tower ) ;
48763: LD_ADDR_VAR 0 10
48767: PUSH
48768: LD_VAR 0 1
48772: PPUSH
48773: CALL_OW 250
48777: ST_TO_ADDR
// y := GetY ( tower ) ;
48778: LD_ADDR_VAR 0 11
48782: PUSH
48783: LD_VAR 0 1
48787: PPUSH
48788: CALL_OW 251
48792: ST_TO_ADDR
// if not x or not y then
48793: LD_VAR 0 10
48797: NOT
48798: PUSH
48799: LD_VAR 0 11
48803: NOT
48804: OR
48805: IFFALSE 48809
// exit ;
48807: GO 49842
// weapon := 0 ;
48809: LD_ADDR_VAR 0 18
48813: PUSH
48814: LD_INT 0
48816: ST_TO_ADDR
// fac_list := [ ] ;
48817: LD_ADDR_VAR 0 17
48821: PUSH
48822: EMPTY
48823: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48824: LD_ADDR_VAR 0 6
48828: PUSH
48829: LD_VAR 0 1
48833: PPUSH
48834: CALL_OW 274
48838: PPUSH
48839: LD_VAR 0 2
48843: PPUSH
48844: LD_INT 0
48846: PPUSH
48847: CALL 46413 0 3
48851: PPUSH
48852: LD_INT 30
48854: PUSH
48855: LD_INT 3
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PPUSH
48862: CALL_OW 72
48866: ST_TO_ADDR
// if not factories then
48867: LD_VAR 0 6
48871: NOT
48872: IFFALSE 48876
// exit ;
48874: GO 49842
// for i in factories do
48876: LD_ADDR_VAR 0 8
48880: PUSH
48881: LD_VAR 0 6
48885: PUSH
48886: FOR_IN
48887: IFFALSE 48912
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48889: LD_ADDR_VAR 0 17
48893: PUSH
48894: LD_VAR 0 17
48898: PUSH
48899: LD_VAR 0 8
48903: PPUSH
48904: CALL_OW 478
48908: UNION
48909: ST_TO_ADDR
48910: GO 48886
48912: POP
48913: POP
// if not fac_list then
48914: LD_VAR 0 17
48918: NOT
48919: IFFALSE 48923
// exit ;
48921: GO 49842
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48923: LD_ADDR_VAR 0 5
48927: PUSH
48928: LD_INT 4
48930: PUSH
48931: LD_INT 5
48933: PUSH
48934: LD_INT 9
48936: PUSH
48937: LD_INT 10
48939: PUSH
48940: LD_INT 6
48942: PUSH
48943: LD_INT 7
48945: PUSH
48946: LD_INT 11
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 27
48960: PUSH
48961: LD_INT 28
48963: PUSH
48964: LD_INT 26
48966: PUSH
48967: LD_INT 30
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 43
48978: PUSH
48979: LD_INT 44
48981: PUSH
48982: LD_INT 46
48984: PUSH
48985: LD_INT 45
48987: PUSH
48988: LD_INT 47
48990: PUSH
48991: LD_INT 49
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: LIST
49006: PUSH
49007: LD_VAR 0 12
49011: ARRAY
49012: ST_TO_ADDR
// list := list isect fac_list ;
49013: LD_ADDR_VAR 0 5
49017: PUSH
49018: LD_VAR 0 5
49022: PUSH
49023: LD_VAR 0 17
49027: ISECT
49028: ST_TO_ADDR
// if not list then
49029: LD_VAR 0 5
49033: NOT
49034: IFFALSE 49038
// exit ;
49036: GO 49842
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49038: LD_VAR 0 12
49042: PUSH
49043: LD_INT 3
49045: EQUAL
49046: PUSH
49047: LD_INT 49
49049: PUSH
49050: LD_VAR 0 5
49054: IN
49055: AND
49056: PUSH
49057: LD_INT 31
49059: PPUSH
49060: LD_VAR 0 16
49064: PPUSH
49065: CALL_OW 321
49069: PUSH
49070: LD_INT 2
49072: EQUAL
49073: AND
49074: IFFALSE 49134
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49076: LD_INT 22
49078: PUSH
49079: LD_VAR 0 16
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 35
49090: PUSH
49091: LD_INT 49
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 91
49100: PUSH
49101: LD_VAR 0 1
49105: PUSH
49106: LD_INT 10
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: LIST
49118: PPUSH
49119: CALL_OW 69
49123: NOT
49124: IFFALSE 49134
// weapon := ru_time_lapser ;
49126: LD_ADDR_VAR 0 18
49130: PUSH
49131: LD_INT 49
49133: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49134: LD_VAR 0 12
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: IN
49149: PUSH
49150: LD_INT 11
49152: PUSH
49153: LD_VAR 0 5
49157: IN
49158: PUSH
49159: LD_INT 30
49161: PUSH
49162: LD_VAR 0 5
49166: IN
49167: OR
49168: AND
49169: PUSH
49170: LD_INT 6
49172: PPUSH
49173: LD_VAR 0 16
49177: PPUSH
49178: CALL_OW 321
49182: PUSH
49183: LD_INT 2
49185: EQUAL
49186: AND
49187: IFFALSE 49352
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49189: LD_INT 22
49191: PUSH
49192: LD_VAR 0 16
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: LD_INT 35
49206: PUSH
49207: LD_INT 11
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 35
49216: PUSH
49217: LD_INT 30
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 91
49231: PUSH
49232: LD_VAR 0 1
49236: PUSH
49237: LD_INT 18
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: LIST
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: LIST
49249: PPUSH
49250: CALL_OW 69
49254: NOT
49255: PUSH
49256: LD_INT 22
49258: PUSH
49259: LD_VAR 0 16
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 2
49270: PUSH
49271: LD_INT 30
49273: PUSH
49274: LD_INT 32
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 30
49283: PUSH
49284: LD_INT 33
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 91
49298: PUSH
49299: LD_VAR 0 1
49303: PUSH
49304: LD_INT 12
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: LIST
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: LIST
49316: PUSH
49317: EMPTY
49318: LIST
49319: PPUSH
49320: CALL_OW 69
49324: PUSH
49325: LD_INT 2
49327: GREATER
49328: AND
49329: IFFALSE 49352
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49331: LD_ADDR_VAR 0 18
49335: PUSH
49336: LD_INT 11
49338: PUSH
49339: LD_INT 30
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_VAR 0 12
49350: ARRAY
49351: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49352: LD_VAR 0 18
49356: NOT
49357: PUSH
49358: LD_INT 40
49360: PPUSH
49361: LD_VAR 0 16
49365: PPUSH
49366: CALL_OW 321
49370: PUSH
49371: LD_INT 2
49373: EQUAL
49374: AND
49375: PUSH
49376: LD_INT 7
49378: PUSH
49379: LD_VAR 0 5
49383: IN
49384: PUSH
49385: LD_INT 28
49387: PUSH
49388: LD_VAR 0 5
49392: IN
49393: OR
49394: PUSH
49395: LD_INT 45
49397: PUSH
49398: LD_VAR 0 5
49402: IN
49403: OR
49404: AND
49405: IFFALSE 49659
// begin hex := GetHexInfo ( x , y ) ;
49407: LD_ADDR_VAR 0 4
49411: PUSH
49412: LD_VAR 0 10
49416: PPUSH
49417: LD_VAR 0 11
49421: PPUSH
49422: CALL_OW 546
49426: ST_TO_ADDR
// if hex [ 1 ] then
49427: LD_VAR 0 4
49431: PUSH
49432: LD_INT 1
49434: ARRAY
49435: IFFALSE 49439
// exit ;
49437: GO 49842
// height := hex [ 2 ] ;
49439: LD_ADDR_VAR 0 15
49443: PUSH
49444: LD_VAR 0 4
49448: PUSH
49449: LD_INT 2
49451: ARRAY
49452: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49453: LD_ADDR_VAR 0 14
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: LD_INT 3
49466: PUSH
49467: LD_INT 5
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: ST_TO_ADDR
// for i in tmp do
49476: LD_ADDR_VAR 0 8
49480: PUSH
49481: LD_VAR 0 14
49485: PUSH
49486: FOR_IN
49487: IFFALSE 49657
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49489: LD_ADDR_VAR 0 9
49493: PUSH
49494: LD_VAR 0 10
49498: PPUSH
49499: LD_VAR 0 8
49503: PPUSH
49504: LD_INT 5
49506: PPUSH
49507: CALL_OW 272
49511: PUSH
49512: LD_VAR 0 11
49516: PPUSH
49517: LD_VAR 0 8
49521: PPUSH
49522: LD_INT 5
49524: PPUSH
49525: CALL_OW 273
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49534: LD_VAR 0 9
49538: PUSH
49539: LD_INT 1
49541: ARRAY
49542: PPUSH
49543: LD_VAR 0 9
49547: PUSH
49548: LD_INT 2
49550: ARRAY
49551: PPUSH
49552: CALL_OW 488
49556: IFFALSE 49655
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49558: LD_ADDR_VAR 0 4
49562: PUSH
49563: LD_VAR 0 9
49567: PUSH
49568: LD_INT 1
49570: ARRAY
49571: PPUSH
49572: LD_VAR 0 9
49576: PUSH
49577: LD_INT 2
49579: ARRAY
49580: PPUSH
49581: CALL_OW 546
49585: ST_TO_ADDR
// if hex [ 1 ] then
49586: LD_VAR 0 4
49590: PUSH
49591: LD_INT 1
49593: ARRAY
49594: IFFALSE 49598
// continue ;
49596: GO 49486
// h := hex [ 2 ] ;
49598: LD_ADDR_VAR 0 13
49602: PUSH
49603: LD_VAR 0 4
49607: PUSH
49608: LD_INT 2
49610: ARRAY
49611: ST_TO_ADDR
// if h + 7 < height then
49612: LD_VAR 0 13
49616: PUSH
49617: LD_INT 7
49619: PLUS
49620: PUSH
49621: LD_VAR 0 15
49625: LESS
49626: IFFALSE 49655
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49628: LD_ADDR_VAR 0 18
49632: PUSH
49633: LD_INT 7
49635: PUSH
49636: LD_INT 28
49638: PUSH
49639: LD_INT 45
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: LIST
49646: PUSH
49647: LD_VAR 0 12
49651: ARRAY
49652: ST_TO_ADDR
// break ;
49653: GO 49657
// end ; end ; end ;
49655: GO 49486
49657: POP
49658: POP
// end ; if not weapon then
49659: LD_VAR 0 18
49663: NOT
49664: IFFALSE 49724
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49666: LD_ADDR_VAR 0 5
49670: PUSH
49671: LD_VAR 0 5
49675: PUSH
49676: LD_INT 11
49678: PUSH
49679: LD_INT 30
49681: PUSH
49682: LD_INT 49
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: DIFF
49690: ST_TO_ADDR
// if not list then
49691: LD_VAR 0 5
49695: NOT
49696: IFFALSE 49700
// exit ;
49698: GO 49842
// weapon := list [ rand ( 1 , list ) ] ;
49700: LD_ADDR_VAR 0 18
49704: PUSH
49705: LD_VAR 0 5
49709: PUSH
49710: LD_INT 1
49712: PPUSH
49713: LD_VAR 0 5
49717: PPUSH
49718: CALL_OW 12
49722: ARRAY
49723: ST_TO_ADDR
// end ; if weapon then
49724: LD_VAR 0 18
49728: IFFALSE 49842
// begin tmp := CostOfWeapon ( weapon ) ;
49730: LD_ADDR_VAR 0 14
49734: PUSH
49735: LD_VAR 0 18
49739: PPUSH
49740: CALL_OW 451
49744: ST_TO_ADDR
// j := GetBase ( tower ) ;
49745: LD_ADDR_VAR 0 9
49749: PUSH
49750: LD_VAR 0 1
49754: PPUSH
49755: CALL_OW 274
49759: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49760: LD_VAR 0 9
49764: PPUSH
49765: LD_INT 1
49767: PPUSH
49768: CALL_OW 275
49772: PUSH
49773: LD_VAR 0 14
49777: PUSH
49778: LD_INT 1
49780: ARRAY
49781: GREATEREQUAL
49782: PUSH
49783: LD_VAR 0 9
49787: PPUSH
49788: LD_INT 2
49790: PPUSH
49791: CALL_OW 275
49795: PUSH
49796: LD_VAR 0 14
49800: PUSH
49801: LD_INT 2
49803: ARRAY
49804: GREATEREQUAL
49805: AND
49806: PUSH
49807: LD_VAR 0 9
49811: PPUSH
49812: LD_INT 3
49814: PPUSH
49815: CALL_OW 275
49819: PUSH
49820: LD_VAR 0 14
49824: PUSH
49825: LD_INT 3
49827: ARRAY
49828: GREATEREQUAL
49829: AND
49830: IFFALSE 49842
// result := weapon ;
49832: LD_ADDR_VAR 0 3
49836: PUSH
49837: LD_VAR 0 18
49841: ST_TO_ADDR
// end ; end ;
49842: LD_VAR 0 3
49846: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49847: LD_INT 0
49849: PPUSH
49850: PPUSH
// result := true ;
49851: LD_ADDR_VAR 0 3
49855: PUSH
49856: LD_INT 1
49858: ST_TO_ADDR
// if array1 = array2 then
49859: LD_VAR 0 1
49863: PUSH
49864: LD_VAR 0 2
49868: EQUAL
49869: IFFALSE 49929
// begin for i = 1 to array1 do
49871: LD_ADDR_VAR 0 4
49875: PUSH
49876: DOUBLE
49877: LD_INT 1
49879: DEC
49880: ST_TO_ADDR
49881: LD_VAR 0 1
49885: PUSH
49886: FOR_TO
49887: IFFALSE 49925
// if array1 [ i ] <> array2 [ i ] then
49889: LD_VAR 0 1
49893: PUSH
49894: LD_VAR 0 4
49898: ARRAY
49899: PUSH
49900: LD_VAR 0 2
49904: PUSH
49905: LD_VAR 0 4
49909: ARRAY
49910: NONEQUAL
49911: IFFALSE 49923
// begin result := false ;
49913: LD_ADDR_VAR 0 3
49917: PUSH
49918: LD_INT 0
49920: ST_TO_ADDR
// break ;
49921: GO 49925
// end ;
49923: GO 49886
49925: POP
49926: POP
// end else
49927: GO 49937
// result := false ;
49929: LD_ADDR_VAR 0 3
49933: PUSH
49934: LD_INT 0
49936: ST_TO_ADDR
// end ;
49937: LD_VAR 0 3
49941: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49942: LD_INT 0
49944: PPUSH
49945: PPUSH
// if not array1 or not array2 then
49946: LD_VAR 0 1
49950: NOT
49951: PUSH
49952: LD_VAR 0 2
49956: NOT
49957: OR
49958: IFFALSE 49962
// exit ;
49960: GO 50026
// result := true ;
49962: LD_ADDR_VAR 0 3
49966: PUSH
49967: LD_INT 1
49969: ST_TO_ADDR
// for i = 1 to array1 do
49970: LD_ADDR_VAR 0 4
49974: PUSH
49975: DOUBLE
49976: LD_INT 1
49978: DEC
49979: ST_TO_ADDR
49980: LD_VAR 0 1
49984: PUSH
49985: FOR_TO
49986: IFFALSE 50024
// if array1 [ i ] <> array2 [ i ] then
49988: LD_VAR 0 1
49992: PUSH
49993: LD_VAR 0 4
49997: ARRAY
49998: PUSH
49999: LD_VAR 0 2
50003: PUSH
50004: LD_VAR 0 4
50008: ARRAY
50009: NONEQUAL
50010: IFFALSE 50022
// begin result := false ;
50012: LD_ADDR_VAR 0 3
50016: PUSH
50017: LD_INT 0
50019: ST_TO_ADDR
// break ;
50020: GO 50024
// end ;
50022: GO 49985
50024: POP
50025: POP
// end ;
50026: LD_VAR 0 3
50030: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50031: LD_INT 0
50033: PPUSH
50034: PPUSH
50035: PPUSH
// pom := GetBase ( fac ) ;
50036: LD_ADDR_VAR 0 5
50040: PUSH
50041: LD_VAR 0 1
50045: PPUSH
50046: CALL_OW 274
50050: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50051: LD_ADDR_VAR 0 4
50055: PUSH
50056: LD_VAR 0 2
50060: PUSH
50061: LD_INT 1
50063: ARRAY
50064: PPUSH
50065: LD_VAR 0 2
50069: PUSH
50070: LD_INT 2
50072: ARRAY
50073: PPUSH
50074: LD_VAR 0 2
50078: PUSH
50079: LD_INT 3
50081: ARRAY
50082: PPUSH
50083: LD_VAR 0 2
50087: PUSH
50088: LD_INT 4
50090: ARRAY
50091: PPUSH
50092: CALL_OW 449
50096: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50097: LD_ADDR_VAR 0 3
50101: PUSH
50102: LD_VAR 0 5
50106: PPUSH
50107: LD_INT 1
50109: PPUSH
50110: CALL_OW 275
50114: PUSH
50115: LD_VAR 0 4
50119: PUSH
50120: LD_INT 1
50122: ARRAY
50123: GREATEREQUAL
50124: PUSH
50125: LD_VAR 0 5
50129: PPUSH
50130: LD_INT 2
50132: PPUSH
50133: CALL_OW 275
50137: PUSH
50138: LD_VAR 0 4
50142: PUSH
50143: LD_INT 2
50145: ARRAY
50146: GREATEREQUAL
50147: AND
50148: PUSH
50149: LD_VAR 0 5
50153: PPUSH
50154: LD_INT 3
50156: PPUSH
50157: CALL_OW 275
50161: PUSH
50162: LD_VAR 0 4
50166: PUSH
50167: LD_INT 3
50169: ARRAY
50170: GREATEREQUAL
50171: AND
50172: ST_TO_ADDR
// end ;
50173: LD_VAR 0 3
50177: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50178: LD_INT 0
50180: PPUSH
50181: PPUSH
50182: PPUSH
50183: PPUSH
// pom := GetBase ( building ) ;
50184: LD_ADDR_VAR 0 3
50188: PUSH
50189: LD_VAR 0 1
50193: PPUSH
50194: CALL_OW 274
50198: ST_TO_ADDR
// if not pom then
50199: LD_VAR 0 3
50203: NOT
50204: IFFALSE 50208
// exit ;
50206: GO 50378
// btype := GetBType ( building ) ;
50208: LD_ADDR_VAR 0 5
50212: PUSH
50213: LD_VAR 0 1
50217: PPUSH
50218: CALL_OW 266
50222: ST_TO_ADDR
// if btype = b_armoury then
50223: LD_VAR 0 5
50227: PUSH
50228: LD_INT 4
50230: EQUAL
50231: IFFALSE 50241
// btype := b_barracks ;
50233: LD_ADDR_VAR 0 5
50237: PUSH
50238: LD_INT 5
50240: ST_TO_ADDR
// if btype = b_depot then
50241: LD_VAR 0 5
50245: PUSH
50246: LD_INT 0
50248: EQUAL
50249: IFFALSE 50259
// btype := b_warehouse ;
50251: LD_ADDR_VAR 0 5
50255: PUSH
50256: LD_INT 1
50258: ST_TO_ADDR
// if btype = b_workshop then
50259: LD_VAR 0 5
50263: PUSH
50264: LD_INT 2
50266: EQUAL
50267: IFFALSE 50277
// btype := b_factory ;
50269: LD_ADDR_VAR 0 5
50273: PUSH
50274: LD_INT 3
50276: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50277: LD_ADDR_VAR 0 4
50281: PUSH
50282: LD_VAR 0 5
50286: PPUSH
50287: LD_VAR 0 1
50291: PPUSH
50292: CALL_OW 248
50296: PPUSH
50297: CALL_OW 450
50301: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50302: LD_ADDR_VAR 0 2
50306: PUSH
50307: LD_VAR 0 3
50311: PPUSH
50312: LD_INT 1
50314: PPUSH
50315: CALL_OW 275
50319: PUSH
50320: LD_VAR 0 4
50324: PUSH
50325: LD_INT 1
50327: ARRAY
50328: GREATEREQUAL
50329: PUSH
50330: LD_VAR 0 3
50334: PPUSH
50335: LD_INT 2
50337: PPUSH
50338: CALL_OW 275
50342: PUSH
50343: LD_VAR 0 4
50347: PUSH
50348: LD_INT 2
50350: ARRAY
50351: GREATEREQUAL
50352: AND
50353: PUSH
50354: LD_VAR 0 3
50358: PPUSH
50359: LD_INT 3
50361: PPUSH
50362: CALL_OW 275
50366: PUSH
50367: LD_VAR 0 4
50371: PUSH
50372: LD_INT 3
50374: ARRAY
50375: GREATEREQUAL
50376: AND
50377: ST_TO_ADDR
// end ;
50378: LD_VAR 0 2
50382: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50383: LD_INT 0
50385: PPUSH
50386: PPUSH
50387: PPUSH
// pom := GetBase ( building ) ;
50388: LD_ADDR_VAR 0 4
50392: PUSH
50393: LD_VAR 0 1
50397: PPUSH
50398: CALL_OW 274
50402: ST_TO_ADDR
// if not pom then
50403: LD_VAR 0 4
50407: NOT
50408: IFFALSE 50412
// exit ;
50410: GO 50513
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50412: LD_ADDR_VAR 0 5
50416: PUSH
50417: LD_VAR 0 2
50421: PPUSH
50422: LD_VAR 0 1
50426: PPUSH
50427: CALL_OW 248
50431: PPUSH
50432: CALL_OW 450
50436: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50437: LD_ADDR_VAR 0 3
50441: PUSH
50442: LD_VAR 0 4
50446: PPUSH
50447: LD_INT 1
50449: PPUSH
50450: CALL_OW 275
50454: PUSH
50455: LD_VAR 0 5
50459: PUSH
50460: LD_INT 1
50462: ARRAY
50463: GREATEREQUAL
50464: PUSH
50465: LD_VAR 0 4
50469: PPUSH
50470: LD_INT 2
50472: PPUSH
50473: CALL_OW 275
50477: PUSH
50478: LD_VAR 0 5
50482: PUSH
50483: LD_INT 2
50485: ARRAY
50486: GREATEREQUAL
50487: AND
50488: PUSH
50489: LD_VAR 0 4
50493: PPUSH
50494: LD_INT 3
50496: PPUSH
50497: CALL_OW 275
50501: PUSH
50502: LD_VAR 0 5
50506: PUSH
50507: LD_INT 3
50509: ARRAY
50510: GREATEREQUAL
50511: AND
50512: ST_TO_ADDR
// end ;
50513: LD_VAR 0 3
50517: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50518: LD_INT 0
50520: PPUSH
50521: PPUSH
50522: PPUSH
50523: PPUSH
50524: PPUSH
50525: PPUSH
50526: PPUSH
50527: PPUSH
50528: PPUSH
50529: PPUSH
50530: PPUSH
// result := false ;
50531: LD_ADDR_VAR 0 8
50535: PUSH
50536: LD_INT 0
50538: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50539: LD_VAR 0 5
50543: NOT
50544: PUSH
50545: LD_VAR 0 1
50549: NOT
50550: OR
50551: PUSH
50552: LD_VAR 0 2
50556: NOT
50557: OR
50558: PUSH
50559: LD_VAR 0 3
50563: NOT
50564: OR
50565: IFFALSE 50569
// exit ;
50567: GO 51383
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50569: LD_ADDR_VAR 0 14
50573: PUSH
50574: LD_VAR 0 1
50578: PPUSH
50579: LD_VAR 0 2
50583: PPUSH
50584: LD_VAR 0 3
50588: PPUSH
50589: LD_VAR 0 4
50593: PPUSH
50594: LD_VAR 0 5
50598: PUSH
50599: LD_INT 1
50601: ARRAY
50602: PPUSH
50603: CALL_OW 248
50607: PPUSH
50608: LD_INT 0
50610: PPUSH
50611: CALL 52620 0 6
50615: ST_TO_ADDR
// if not hexes then
50616: LD_VAR 0 14
50620: NOT
50621: IFFALSE 50625
// exit ;
50623: GO 51383
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50625: LD_ADDR_VAR 0 17
50629: PUSH
50630: LD_VAR 0 5
50634: PPUSH
50635: LD_INT 22
50637: PUSH
50638: LD_VAR 0 13
50642: PPUSH
50643: CALL_OW 255
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: LD_INT 30
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 30
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: LIST
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PPUSH
50684: CALL_OW 72
50688: ST_TO_ADDR
// for i = 1 to hexes do
50689: LD_ADDR_VAR 0 9
50693: PUSH
50694: DOUBLE
50695: LD_INT 1
50697: DEC
50698: ST_TO_ADDR
50699: LD_VAR 0 14
50703: PUSH
50704: FOR_TO
50705: IFFALSE 51381
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50707: LD_ADDR_VAR 0 13
50711: PUSH
50712: LD_VAR 0 14
50716: PUSH
50717: LD_VAR 0 9
50721: ARRAY
50722: PUSH
50723: LD_INT 1
50725: ARRAY
50726: PPUSH
50727: LD_VAR 0 14
50731: PUSH
50732: LD_VAR 0 9
50736: ARRAY
50737: PUSH
50738: LD_INT 2
50740: ARRAY
50741: PPUSH
50742: CALL_OW 428
50746: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50747: LD_VAR 0 14
50751: PUSH
50752: LD_VAR 0 9
50756: ARRAY
50757: PUSH
50758: LD_INT 1
50760: ARRAY
50761: PPUSH
50762: LD_VAR 0 14
50766: PUSH
50767: LD_VAR 0 9
50771: ARRAY
50772: PUSH
50773: LD_INT 2
50775: ARRAY
50776: PPUSH
50777: CALL_OW 351
50781: PUSH
50782: LD_VAR 0 14
50786: PUSH
50787: LD_VAR 0 9
50791: ARRAY
50792: PUSH
50793: LD_INT 1
50795: ARRAY
50796: PPUSH
50797: LD_VAR 0 14
50801: PUSH
50802: LD_VAR 0 9
50806: ARRAY
50807: PUSH
50808: LD_INT 2
50810: ARRAY
50811: PPUSH
50812: CALL_OW 488
50816: NOT
50817: OR
50818: PUSH
50819: LD_VAR 0 13
50823: PPUSH
50824: CALL_OW 247
50828: PUSH
50829: LD_INT 3
50831: EQUAL
50832: OR
50833: IFFALSE 50839
// exit ;
50835: POP
50836: POP
50837: GO 51383
// if not tmp then
50839: LD_VAR 0 13
50843: NOT
50844: IFFALSE 50848
// continue ;
50846: GO 50704
// result := true ;
50848: LD_ADDR_VAR 0 8
50852: PUSH
50853: LD_INT 1
50855: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50856: LD_VAR 0 6
50860: PUSH
50861: LD_VAR 0 13
50865: PPUSH
50866: CALL_OW 247
50870: PUSH
50871: LD_INT 2
50873: EQUAL
50874: AND
50875: PUSH
50876: LD_VAR 0 13
50880: PPUSH
50881: CALL_OW 263
50885: PUSH
50886: LD_INT 1
50888: EQUAL
50889: AND
50890: IFFALSE 51054
// begin if IsDrivenBy ( tmp ) then
50892: LD_VAR 0 13
50896: PPUSH
50897: CALL_OW 311
50901: IFFALSE 50905
// continue ;
50903: GO 50704
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50905: LD_VAR 0 6
50909: PPUSH
50910: LD_INT 3
50912: PUSH
50913: LD_INT 60
50915: PUSH
50916: EMPTY
50917: LIST
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 3
50925: PUSH
50926: LD_INT 55
50928: PUSH
50929: EMPTY
50930: LIST
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PPUSH
50940: CALL_OW 72
50944: IFFALSE 51052
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50946: LD_ADDR_VAR 0 18
50950: PUSH
50951: LD_VAR 0 6
50955: PPUSH
50956: LD_INT 3
50958: PUSH
50959: LD_INT 60
50961: PUSH
50962: EMPTY
50963: LIST
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 3
50971: PUSH
50972: LD_INT 55
50974: PUSH
50975: EMPTY
50976: LIST
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PPUSH
50986: CALL_OW 72
50990: PUSH
50991: LD_INT 1
50993: ARRAY
50994: ST_TO_ADDR
// if IsInUnit ( driver ) then
50995: LD_VAR 0 18
50999: PPUSH
51000: CALL_OW 310
51004: IFFALSE 51015
// ComExit ( driver ) ;
51006: LD_VAR 0 18
51010: PPUSH
51011: CALL 76325 0 1
// AddComEnterUnit ( driver , tmp ) ;
51015: LD_VAR 0 18
51019: PPUSH
51020: LD_VAR 0 13
51024: PPUSH
51025: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51029: LD_VAR 0 18
51033: PPUSH
51034: LD_VAR 0 7
51038: PPUSH
51039: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51043: LD_VAR 0 18
51047: PPUSH
51048: CALL_OW 181
// end ; continue ;
51052: GO 50704
// end ; if not cleaners or not tmp in cleaners then
51054: LD_VAR 0 6
51058: NOT
51059: PUSH
51060: LD_VAR 0 13
51064: PUSH
51065: LD_VAR 0 6
51069: IN
51070: NOT
51071: OR
51072: IFFALSE 51379
// begin if dep then
51074: LD_VAR 0 17
51078: IFFALSE 51214
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51080: LD_ADDR_VAR 0 16
51084: PUSH
51085: LD_VAR 0 17
51089: PUSH
51090: LD_INT 1
51092: ARRAY
51093: PPUSH
51094: CALL_OW 250
51098: PPUSH
51099: LD_VAR 0 17
51103: PUSH
51104: LD_INT 1
51106: ARRAY
51107: PPUSH
51108: CALL_OW 254
51112: PPUSH
51113: LD_INT 5
51115: PPUSH
51116: CALL_OW 272
51120: PUSH
51121: LD_VAR 0 17
51125: PUSH
51126: LD_INT 1
51128: ARRAY
51129: PPUSH
51130: CALL_OW 251
51134: PPUSH
51135: LD_VAR 0 17
51139: PUSH
51140: LD_INT 1
51142: ARRAY
51143: PPUSH
51144: CALL_OW 254
51148: PPUSH
51149: LD_INT 5
51151: PPUSH
51152: CALL_OW 273
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51161: LD_VAR 0 16
51165: PUSH
51166: LD_INT 1
51168: ARRAY
51169: PPUSH
51170: LD_VAR 0 16
51174: PUSH
51175: LD_INT 2
51177: ARRAY
51178: PPUSH
51179: CALL_OW 488
51183: IFFALSE 51214
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51185: LD_VAR 0 13
51189: PPUSH
51190: LD_VAR 0 16
51194: PUSH
51195: LD_INT 1
51197: ARRAY
51198: PPUSH
51199: LD_VAR 0 16
51203: PUSH
51204: LD_INT 2
51206: ARRAY
51207: PPUSH
51208: CALL_OW 111
// continue ;
51212: GO 50704
// end ; end ; r := GetDir ( tmp ) ;
51214: LD_ADDR_VAR 0 15
51218: PUSH
51219: LD_VAR 0 13
51223: PPUSH
51224: CALL_OW 254
51228: ST_TO_ADDR
// if r = 5 then
51229: LD_VAR 0 15
51233: PUSH
51234: LD_INT 5
51236: EQUAL
51237: IFFALSE 51247
// r := 0 ;
51239: LD_ADDR_VAR 0 15
51243: PUSH
51244: LD_INT 0
51246: ST_TO_ADDR
// for j = r to 5 do
51247: LD_ADDR_VAR 0 10
51251: PUSH
51252: DOUBLE
51253: LD_VAR 0 15
51257: DEC
51258: ST_TO_ADDR
51259: LD_INT 5
51261: PUSH
51262: FOR_TO
51263: IFFALSE 51377
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51265: LD_ADDR_VAR 0 11
51269: PUSH
51270: LD_VAR 0 13
51274: PPUSH
51275: CALL_OW 250
51279: PPUSH
51280: LD_VAR 0 10
51284: PPUSH
51285: LD_INT 2
51287: PPUSH
51288: CALL_OW 272
51292: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51293: LD_ADDR_VAR 0 12
51297: PUSH
51298: LD_VAR 0 13
51302: PPUSH
51303: CALL_OW 251
51307: PPUSH
51308: LD_VAR 0 10
51312: PPUSH
51313: LD_INT 2
51315: PPUSH
51316: CALL_OW 273
51320: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51321: LD_VAR 0 11
51325: PPUSH
51326: LD_VAR 0 12
51330: PPUSH
51331: CALL_OW 488
51335: PUSH
51336: LD_VAR 0 11
51340: PPUSH
51341: LD_VAR 0 12
51345: PPUSH
51346: CALL_OW 428
51350: NOT
51351: AND
51352: IFFALSE 51375
// begin ComMoveXY ( tmp , _x , _y ) ;
51354: LD_VAR 0 13
51358: PPUSH
51359: LD_VAR 0 11
51363: PPUSH
51364: LD_VAR 0 12
51368: PPUSH
51369: CALL_OW 111
// break ;
51373: GO 51377
// end ; end ;
51375: GO 51262
51377: POP
51378: POP
// end ; end ;
51379: GO 50704
51381: POP
51382: POP
// end ;
51383: LD_VAR 0 8
51387: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51388: LD_INT 0
51390: PPUSH
// result := true ;
51391: LD_ADDR_VAR 0 3
51395: PUSH
51396: LD_INT 1
51398: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51399: LD_VAR 0 2
51403: PUSH
51404: LD_INT 24
51406: DOUBLE
51407: EQUAL
51408: IFTRUE 51418
51410: LD_INT 33
51412: DOUBLE
51413: EQUAL
51414: IFTRUE 51418
51416: GO 51443
51418: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51419: LD_ADDR_VAR 0 3
51423: PUSH
51424: LD_INT 32
51426: PPUSH
51427: LD_VAR 0 1
51431: PPUSH
51432: CALL_OW 321
51436: PUSH
51437: LD_INT 2
51439: EQUAL
51440: ST_TO_ADDR
51441: GO 51763
51443: LD_INT 20
51445: DOUBLE
51446: EQUAL
51447: IFTRUE 51451
51449: GO 51476
51451: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51452: LD_ADDR_VAR 0 3
51456: PUSH
51457: LD_INT 6
51459: PPUSH
51460: LD_VAR 0 1
51464: PPUSH
51465: CALL_OW 321
51469: PUSH
51470: LD_INT 2
51472: EQUAL
51473: ST_TO_ADDR
51474: GO 51763
51476: LD_INT 22
51478: DOUBLE
51479: EQUAL
51480: IFTRUE 51490
51482: LD_INT 36
51484: DOUBLE
51485: EQUAL
51486: IFTRUE 51490
51488: GO 51515
51490: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51491: LD_ADDR_VAR 0 3
51495: PUSH
51496: LD_INT 15
51498: PPUSH
51499: LD_VAR 0 1
51503: PPUSH
51504: CALL_OW 321
51508: PUSH
51509: LD_INT 2
51511: EQUAL
51512: ST_TO_ADDR
51513: GO 51763
51515: LD_INT 30
51517: DOUBLE
51518: EQUAL
51519: IFTRUE 51523
51521: GO 51548
51523: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51524: LD_ADDR_VAR 0 3
51528: PUSH
51529: LD_INT 20
51531: PPUSH
51532: LD_VAR 0 1
51536: PPUSH
51537: CALL_OW 321
51541: PUSH
51542: LD_INT 2
51544: EQUAL
51545: ST_TO_ADDR
51546: GO 51763
51548: LD_INT 28
51550: DOUBLE
51551: EQUAL
51552: IFTRUE 51562
51554: LD_INT 21
51556: DOUBLE
51557: EQUAL
51558: IFTRUE 51562
51560: GO 51587
51562: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51563: LD_ADDR_VAR 0 3
51567: PUSH
51568: LD_INT 21
51570: PPUSH
51571: LD_VAR 0 1
51575: PPUSH
51576: CALL_OW 321
51580: PUSH
51581: LD_INT 2
51583: EQUAL
51584: ST_TO_ADDR
51585: GO 51763
51587: LD_INT 16
51589: DOUBLE
51590: EQUAL
51591: IFTRUE 51595
51593: GO 51622
51595: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51596: LD_ADDR_VAR 0 3
51600: PUSH
51601: LD_EXP 46
51605: PPUSH
51606: LD_VAR 0 1
51610: PPUSH
51611: CALL_OW 321
51615: PUSH
51616: LD_INT 2
51618: EQUAL
51619: ST_TO_ADDR
51620: GO 51763
51622: LD_INT 19
51624: DOUBLE
51625: EQUAL
51626: IFTRUE 51636
51628: LD_INT 23
51630: DOUBLE
51631: EQUAL
51632: IFTRUE 51636
51634: GO 51663
51636: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51637: LD_ADDR_VAR 0 3
51641: PUSH
51642: LD_EXP 45
51646: PPUSH
51647: LD_VAR 0 1
51651: PPUSH
51652: CALL_OW 321
51656: PUSH
51657: LD_INT 2
51659: EQUAL
51660: ST_TO_ADDR
51661: GO 51763
51663: LD_INT 17
51665: DOUBLE
51666: EQUAL
51667: IFTRUE 51671
51669: GO 51696
51671: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51672: LD_ADDR_VAR 0 3
51676: PUSH
51677: LD_INT 39
51679: PPUSH
51680: LD_VAR 0 1
51684: PPUSH
51685: CALL_OW 321
51689: PUSH
51690: LD_INT 2
51692: EQUAL
51693: ST_TO_ADDR
51694: GO 51763
51696: LD_INT 18
51698: DOUBLE
51699: EQUAL
51700: IFTRUE 51704
51702: GO 51729
51704: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51705: LD_ADDR_VAR 0 3
51709: PUSH
51710: LD_INT 40
51712: PPUSH
51713: LD_VAR 0 1
51717: PPUSH
51718: CALL_OW 321
51722: PUSH
51723: LD_INT 2
51725: EQUAL
51726: ST_TO_ADDR
51727: GO 51763
51729: LD_INT 27
51731: DOUBLE
51732: EQUAL
51733: IFTRUE 51737
51735: GO 51762
51737: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51738: LD_ADDR_VAR 0 3
51742: PUSH
51743: LD_INT 35
51745: PPUSH
51746: LD_VAR 0 1
51750: PPUSH
51751: CALL_OW 321
51755: PUSH
51756: LD_INT 2
51758: EQUAL
51759: ST_TO_ADDR
51760: GO 51763
51762: POP
// end ;
51763: LD_VAR 0 3
51767: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51768: LD_INT 0
51770: PPUSH
51771: PPUSH
51772: PPUSH
51773: PPUSH
51774: PPUSH
51775: PPUSH
51776: PPUSH
51777: PPUSH
51778: PPUSH
51779: PPUSH
51780: PPUSH
// result := false ;
51781: LD_ADDR_VAR 0 6
51785: PUSH
51786: LD_INT 0
51788: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51789: LD_VAR 0 1
51793: NOT
51794: PUSH
51795: LD_VAR 0 1
51799: PPUSH
51800: CALL_OW 266
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: IN
51815: NOT
51816: OR
51817: PUSH
51818: LD_VAR 0 2
51822: NOT
51823: OR
51824: PUSH
51825: LD_VAR 0 5
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: LD_INT 3
51841: PUSH
51842: LD_INT 4
51844: PUSH
51845: LD_INT 5
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: IN
51856: NOT
51857: OR
51858: PUSH
51859: LD_VAR 0 3
51863: PPUSH
51864: LD_VAR 0 4
51868: PPUSH
51869: CALL_OW 488
51873: NOT
51874: OR
51875: IFFALSE 51879
// exit ;
51877: GO 52615
// side := GetSide ( depot ) ;
51879: LD_ADDR_VAR 0 9
51883: PUSH
51884: LD_VAR 0 1
51888: PPUSH
51889: CALL_OW 255
51893: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51894: LD_VAR 0 9
51898: PPUSH
51899: LD_VAR 0 2
51903: PPUSH
51904: CALL 51388 0 2
51908: NOT
51909: IFFALSE 51913
// exit ;
51911: GO 52615
// pom := GetBase ( depot ) ;
51913: LD_ADDR_VAR 0 10
51917: PUSH
51918: LD_VAR 0 1
51922: PPUSH
51923: CALL_OW 274
51927: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51928: LD_ADDR_VAR 0 11
51932: PUSH
51933: LD_VAR 0 2
51937: PPUSH
51938: LD_VAR 0 1
51942: PPUSH
51943: CALL_OW 248
51947: PPUSH
51948: CALL_OW 450
51952: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51953: LD_VAR 0 10
51957: PPUSH
51958: LD_INT 1
51960: PPUSH
51961: CALL_OW 275
51965: PUSH
51966: LD_VAR 0 11
51970: PUSH
51971: LD_INT 1
51973: ARRAY
51974: GREATEREQUAL
51975: PUSH
51976: LD_VAR 0 10
51980: PPUSH
51981: LD_INT 2
51983: PPUSH
51984: CALL_OW 275
51988: PUSH
51989: LD_VAR 0 11
51993: PUSH
51994: LD_INT 2
51996: ARRAY
51997: GREATEREQUAL
51998: AND
51999: PUSH
52000: LD_VAR 0 10
52004: PPUSH
52005: LD_INT 3
52007: PPUSH
52008: CALL_OW 275
52012: PUSH
52013: LD_VAR 0 11
52017: PUSH
52018: LD_INT 3
52020: ARRAY
52021: GREATEREQUAL
52022: AND
52023: NOT
52024: IFFALSE 52028
// exit ;
52026: GO 52615
// if GetBType ( depot ) = b_depot then
52028: LD_VAR 0 1
52032: PPUSH
52033: CALL_OW 266
52037: PUSH
52038: LD_INT 0
52040: EQUAL
52041: IFFALSE 52053
// dist := 28 else
52043: LD_ADDR_VAR 0 14
52047: PUSH
52048: LD_INT 28
52050: ST_TO_ADDR
52051: GO 52061
// dist := 36 ;
52053: LD_ADDR_VAR 0 14
52057: PUSH
52058: LD_INT 36
52060: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52061: LD_VAR 0 1
52065: PPUSH
52066: LD_VAR 0 3
52070: PPUSH
52071: LD_VAR 0 4
52075: PPUSH
52076: CALL_OW 297
52080: PUSH
52081: LD_VAR 0 14
52085: GREATER
52086: IFFALSE 52090
// exit ;
52088: GO 52615
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52090: LD_ADDR_VAR 0 12
52094: PUSH
52095: LD_VAR 0 2
52099: PPUSH
52100: LD_VAR 0 3
52104: PPUSH
52105: LD_VAR 0 4
52109: PPUSH
52110: LD_VAR 0 5
52114: PPUSH
52115: LD_VAR 0 1
52119: PPUSH
52120: CALL_OW 248
52124: PPUSH
52125: LD_INT 0
52127: PPUSH
52128: CALL 52620 0 6
52132: ST_TO_ADDR
// if not hexes then
52133: LD_VAR 0 12
52137: NOT
52138: IFFALSE 52142
// exit ;
52140: GO 52615
// hex := GetHexInfo ( x , y ) ;
52142: LD_ADDR_VAR 0 15
52146: PUSH
52147: LD_VAR 0 3
52151: PPUSH
52152: LD_VAR 0 4
52156: PPUSH
52157: CALL_OW 546
52161: ST_TO_ADDR
// if hex [ 1 ] then
52162: LD_VAR 0 15
52166: PUSH
52167: LD_INT 1
52169: ARRAY
52170: IFFALSE 52174
// exit ;
52172: GO 52615
// height := hex [ 2 ] ;
52174: LD_ADDR_VAR 0 13
52178: PUSH
52179: LD_VAR 0 15
52183: PUSH
52184: LD_INT 2
52186: ARRAY
52187: ST_TO_ADDR
// for i = 1 to hexes do
52188: LD_ADDR_VAR 0 7
52192: PUSH
52193: DOUBLE
52194: LD_INT 1
52196: DEC
52197: ST_TO_ADDR
52198: LD_VAR 0 12
52202: PUSH
52203: FOR_TO
52204: IFFALSE 52534
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52206: LD_VAR 0 12
52210: PUSH
52211: LD_VAR 0 7
52215: ARRAY
52216: PUSH
52217: LD_INT 1
52219: ARRAY
52220: PPUSH
52221: LD_VAR 0 12
52225: PUSH
52226: LD_VAR 0 7
52230: ARRAY
52231: PUSH
52232: LD_INT 2
52234: ARRAY
52235: PPUSH
52236: CALL_OW 488
52240: NOT
52241: PUSH
52242: LD_VAR 0 12
52246: PUSH
52247: LD_VAR 0 7
52251: ARRAY
52252: PUSH
52253: LD_INT 1
52255: ARRAY
52256: PPUSH
52257: LD_VAR 0 12
52261: PUSH
52262: LD_VAR 0 7
52266: ARRAY
52267: PUSH
52268: LD_INT 2
52270: ARRAY
52271: PPUSH
52272: CALL_OW 428
52276: PUSH
52277: LD_INT 0
52279: GREATER
52280: OR
52281: PUSH
52282: LD_VAR 0 12
52286: PUSH
52287: LD_VAR 0 7
52291: ARRAY
52292: PUSH
52293: LD_INT 1
52295: ARRAY
52296: PPUSH
52297: LD_VAR 0 12
52301: PUSH
52302: LD_VAR 0 7
52306: ARRAY
52307: PUSH
52308: LD_INT 2
52310: ARRAY
52311: PPUSH
52312: CALL_OW 351
52316: OR
52317: IFFALSE 52323
// exit ;
52319: POP
52320: POP
52321: GO 52615
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52323: LD_ADDR_VAR 0 8
52327: PUSH
52328: LD_VAR 0 12
52332: PUSH
52333: LD_VAR 0 7
52337: ARRAY
52338: PUSH
52339: LD_INT 1
52341: ARRAY
52342: PPUSH
52343: LD_VAR 0 12
52347: PUSH
52348: LD_VAR 0 7
52352: ARRAY
52353: PUSH
52354: LD_INT 2
52356: ARRAY
52357: PPUSH
52358: CALL_OW 546
52362: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52363: LD_VAR 0 8
52367: PUSH
52368: LD_INT 1
52370: ARRAY
52371: PUSH
52372: LD_VAR 0 8
52376: PUSH
52377: LD_INT 2
52379: ARRAY
52380: PUSH
52381: LD_VAR 0 13
52385: PUSH
52386: LD_INT 2
52388: PLUS
52389: GREATER
52390: OR
52391: PUSH
52392: LD_VAR 0 8
52396: PUSH
52397: LD_INT 2
52399: ARRAY
52400: PUSH
52401: LD_VAR 0 13
52405: PUSH
52406: LD_INT 2
52408: MINUS
52409: LESS
52410: OR
52411: PUSH
52412: LD_VAR 0 8
52416: PUSH
52417: LD_INT 3
52419: ARRAY
52420: PUSH
52421: LD_INT 0
52423: PUSH
52424: LD_INT 8
52426: PUSH
52427: LD_INT 9
52429: PUSH
52430: LD_INT 10
52432: PUSH
52433: LD_INT 11
52435: PUSH
52436: LD_INT 12
52438: PUSH
52439: LD_INT 13
52441: PUSH
52442: LD_INT 16
52444: PUSH
52445: LD_INT 17
52447: PUSH
52448: LD_INT 18
52450: PUSH
52451: LD_INT 19
52453: PUSH
52454: LD_INT 20
52456: PUSH
52457: LD_INT 21
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: IN
52475: NOT
52476: OR
52477: PUSH
52478: LD_VAR 0 8
52482: PUSH
52483: LD_INT 5
52485: ARRAY
52486: NOT
52487: OR
52488: PUSH
52489: LD_VAR 0 8
52493: PUSH
52494: LD_INT 6
52496: ARRAY
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: LD_INT 7
52506: PUSH
52507: LD_INT 9
52509: PUSH
52510: LD_INT 10
52512: PUSH
52513: LD_INT 11
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: IN
52524: NOT
52525: OR
52526: IFFALSE 52532
// exit ;
52528: POP
52529: POP
52530: GO 52615
// end ;
52532: GO 52203
52534: POP
52535: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52536: LD_VAR 0 9
52540: PPUSH
52541: LD_VAR 0 3
52545: PPUSH
52546: LD_VAR 0 4
52550: PPUSH
52551: LD_INT 20
52553: PPUSH
52554: CALL 44561 0 4
52558: PUSH
52559: LD_INT 4
52561: ARRAY
52562: IFFALSE 52566
// exit ;
52564: GO 52615
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52566: LD_VAR 0 2
52570: PUSH
52571: LD_INT 29
52573: PUSH
52574: LD_INT 30
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: IN
52581: PUSH
52582: LD_VAR 0 3
52586: PPUSH
52587: LD_VAR 0 4
52591: PPUSH
52592: LD_VAR 0 9
52596: PPUSH
52597: CALL_OW 440
52601: NOT
52602: AND
52603: IFFALSE 52607
// exit ;
52605: GO 52615
// result := true ;
52607: LD_ADDR_VAR 0 6
52611: PUSH
52612: LD_INT 1
52614: ST_TO_ADDR
// end ;
52615: LD_VAR 0 6
52619: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52620: LD_INT 0
52622: PPUSH
52623: PPUSH
52624: PPUSH
52625: PPUSH
52626: PPUSH
52627: PPUSH
52628: PPUSH
52629: PPUSH
52630: PPUSH
52631: PPUSH
52632: PPUSH
52633: PPUSH
52634: PPUSH
52635: PPUSH
52636: PPUSH
52637: PPUSH
52638: PPUSH
52639: PPUSH
52640: PPUSH
52641: PPUSH
52642: PPUSH
52643: PPUSH
52644: PPUSH
52645: PPUSH
52646: PPUSH
52647: PPUSH
52648: PPUSH
52649: PPUSH
52650: PPUSH
52651: PPUSH
52652: PPUSH
52653: PPUSH
52654: PPUSH
52655: PPUSH
52656: PPUSH
52657: PPUSH
52658: PPUSH
52659: PPUSH
52660: PPUSH
52661: PPUSH
52662: PPUSH
52663: PPUSH
52664: PPUSH
52665: PPUSH
52666: PPUSH
52667: PPUSH
52668: PPUSH
52669: PPUSH
52670: PPUSH
52671: PPUSH
52672: PPUSH
52673: PPUSH
52674: PPUSH
52675: PPUSH
52676: PPUSH
52677: PPUSH
52678: PPUSH
52679: PPUSH
// result = [ ] ;
52680: LD_ADDR_VAR 0 7
52684: PUSH
52685: EMPTY
52686: ST_TO_ADDR
// temp_list = [ ] ;
52687: LD_ADDR_VAR 0 9
52691: PUSH
52692: EMPTY
52693: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52694: LD_VAR 0 4
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: LD_INT 4
52713: PUSH
52714: LD_INT 5
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: IN
52725: NOT
52726: PUSH
52727: LD_VAR 0 1
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 1
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: IN
52742: PUSH
52743: LD_VAR 0 5
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: LD_INT 3
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: LIST
52761: IN
52762: NOT
52763: AND
52764: OR
52765: IFFALSE 52769
// exit ;
52767: GO 71160
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52769: LD_VAR 0 1
52773: PUSH
52774: LD_INT 6
52776: PUSH
52777: LD_INT 7
52779: PUSH
52780: LD_INT 8
52782: PUSH
52783: LD_INT 13
52785: PUSH
52786: LD_INT 12
52788: PUSH
52789: LD_INT 15
52791: PUSH
52792: LD_INT 11
52794: PUSH
52795: LD_INT 14
52797: PUSH
52798: LD_INT 10
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: IN
52812: IFFALSE 52822
// btype = b_lab ;
52814: LD_ADDR_VAR 0 1
52818: PUSH
52819: LD_INT 6
52821: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52822: LD_VAR 0 6
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: LIST
52840: IN
52841: NOT
52842: PUSH
52843: LD_VAR 0 1
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: LD_INT 3
52859: PUSH
52860: LD_INT 6
52862: PUSH
52863: LD_INT 36
52865: PUSH
52866: LD_INT 4
52868: PUSH
52869: LD_INT 5
52871: PUSH
52872: LD_INT 31
52874: PUSH
52875: LD_INT 32
52877: PUSH
52878: LD_INT 33
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: IN
52894: NOT
52895: PUSH
52896: LD_VAR 0 6
52900: PUSH
52901: LD_INT 1
52903: EQUAL
52904: AND
52905: OR
52906: PUSH
52907: LD_VAR 0 1
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: LD_INT 3
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: IN
52922: NOT
52923: PUSH
52924: LD_VAR 0 6
52928: PUSH
52929: LD_INT 2
52931: EQUAL
52932: AND
52933: OR
52934: IFFALSE 52944
// mode = 0 ;
52936: LD_ADDR_VAR 0 6
52940: PUSH
52941: LD_INT 0
52943: ST_TO_ADDR
// case mode of 0 :
52944: LD_VAR 0 6
52948: PUSH
52949: LD_INT 0
52951: DOUBLE
52952: EQUAL
52953: IFTRUE 52957
52955: GO 64410
52957: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52958: LD_ADDR_VAR 0 11
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 1
53039: NEG
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 2
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 3
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 3
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53151: LD_ADDR_VAR 0 12
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 2
53285: NEG
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 3
53308: NEG
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 3
53319: NEG
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53347: LD_ADDR_VAR 0 13
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: LD_INT 0
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: LD_INT 1
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 2
53470: NEG
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: LD_INT 3
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 3
53506: NEG
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 3
53518: NEG
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53546: LD_ADDR_VAR 0 14
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: LD_INT 3
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: LD_INT 3
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 2
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53742: LD_ADDR_VAR 0 15
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 3
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 3
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53935: LD_ADDR_VAR 0 16
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: LD_INT 2
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 3
54092: PUSH
54093: LD_INT 3
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: LD_INT 3
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54128: LD_ADDR_VAR 0 17
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: NEG
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54358: LD_ADDR_VAR 0 18
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 2
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 2
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: LD_INT 2
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54588: LD_ADDR_VAR 0 19
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 2
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54818: LD_ADDR_VAR 0 20
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: NEG
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 2
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 2
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: LD_INT 1
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: NEG
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: LD_INT 1
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: NEG
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55048: LD_ADDR_VAR 0 21
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 2
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 2
55183: PUSH
55184: LD_INT 2
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: LD_INT 2
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: LD_INT 2
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 2
55224: NEG
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 2
55235: NEG
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55278: LD_ADDR_VAR 0 22
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 2
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 2
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 2
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: NEG
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55508: LD_ADDR_VAR 0 23
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 2
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 2
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 2
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 2
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: LD_INT 2
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: NEG
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: LD_INT 2
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: LD_INT 3
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: LD_INT 3
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: LD_INT 2
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55788: LD_ADDR_VAR 0 24
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: LD_INT 2
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: LD_INT 2
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 2
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 2
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 3
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56064: LD_ADDR_VAR 0 25
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 2
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 2
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: LD_INT 2
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 2
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 2
56240: NEG
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 3
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 3
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 2
56295: PUSH
56296: LD_INT 3
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: LD_INT 3
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56338: LD_ADDR_VAR 0 26
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: LD_INT 0
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56614: LD_ADDR_VAR 0 27
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: LD_INT 2
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: LD_INT 2
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 2
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: LD_INT 2
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: LD_INT 2
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: NEG
56848: PUSH
56849: LD_INT 1
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 3
56859: NEG
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56894: LD_ADDR_VAR 0 28
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 2
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 2
57093: NEG
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 2
57105: NEG
57106: PUSH
57107: LD_INT 3
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: LD_INT 3
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 3
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 3
57141: NEG
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57176: LD_ADDR_VAR 0 29
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 2
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: NEG
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: LD_INT 2
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: LD_INT 3
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 3
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: NEG
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57455: LD_ADDR_VAR 0 30
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: LD_INT 0
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: LD_INT 1
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: LD_INT 3
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 3
57667: PUSH
57668: LD_INT 2
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: LD_INT 3
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57733: LD_ADDR_VAR 0 31
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: LD_INT 2
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 2
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: LD_INT 2
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: LD_INT 2
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: NEG
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: NEG
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: LD_INT 3
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 3
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: LD_INT 3
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58011: LD_ADDR_VAR 0 32
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 1
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: LD_INT 2
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: LD_INT 2
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 2
58188: NEG
58189: PUSH
58190: LD_INT 1
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: LD_INT 3
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: LD_INT 2
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 3
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: PUSH
58234: LD_INT 3
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 3
58254: NEG
58255: PUSH
58256: LD_INT 1
58258: NEG
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58289: LD_ADDR_VAR 0 33
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 0
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: LD_INT 2
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: LD_INT 1
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 2
58479: NEG
58480: PUSH
58481: LD_INT 3
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 3
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: LD_INT 3
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 3
58533: NEG
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58568: LD_ADDR_VAR 0 34
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 2
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 2
58724: NEG
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 2
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: PUSH
58761: LD_INT 3
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 3
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: LD_INT 3
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 3
58813: NEG
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58848: LD_ADDR_VAR 0 35
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 0
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: NEG
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58960: LD_ADDR_VAR 0 36
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59072: LD_ADDR_VAR 0 37
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59184: LD_ADDR_VAR 0 38
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: LD_INT 0
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59296: LD_ADDR_VAR 0 39
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_INT 1
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: LD_INT 1
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: NEG
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59408: LD_ADDR_VAR 0 40
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: NEG
59478: PUSH
59479: LD_INT 1
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59520: LD_ADDR_VAR 0 41
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 1
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: LD_INT 0
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: LD_INT 2
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: LD_INT 1
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 2
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 2
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 2
59644: PUSH
59645: LD_INT 2
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 2
59675: NEG
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 2
59686: NEG
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: NEG
59699: PUSH
59700: LD_INT 2
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: NEG
59711: PUSH
59712: LD_INT 3
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 2
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 3
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 3
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 3
59753: PUSH
59754: LD_INT 2
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 3
59763: PUSH
59764: LD_INT 3
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: LD_INT 3
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: NEG
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 3
59794: NEG
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 3
59805: NEG
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 3
59817: NEG
59818: PUSH
59819: LD_INT 2
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 3
59829: NEG
59830: PUSH
59831: LD_INT 3
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59870: LD_ADDR_VAR 0 42
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: LD_INT 0
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: LD_INT 1
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: LD_INT 0
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: LD_INT 2
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: LD_INT 1
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 2
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: LD_INT 2
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: LD_INT 2
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 2
60060: NEG
60061: PUSH
60062: LD_INT 3
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: LD_INT 3
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: LD_INT 3
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 1
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: LD_INT 2
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: LD_INT 3
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 2
60126: PUSH
60127: LD_INT 3
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: LD_INT 3
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: LD_INT 2
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 3
60167: NEG
60168: PUSH
60169: LD_INT 2
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: LD_INT 3
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60220: LD_ADDR_VAR 0 43
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: LD_INT 2
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: LD_INT 2
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: LD_INT 1
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 2
60345: PUSH
60346: LD_INT 1
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: LD_INT 2
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_INT 2
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 1
60375: NEG
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: LD_INT 3
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: LD_INT 3
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 3
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 3
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: LD_INT 3
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: LD_INT 3
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 2
60505: NEG
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 3
60516: NEG
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: NEG
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60568: LD_ADDR_VAR 0 44
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: LD_INT 1
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: NEG
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: NEG
60650: PUSH
60651: LD_INT 2
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: LD_INT 2
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: NEG
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 2
60734: NEG
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: NEG
60747: PUSH
60748: LD_INT 2
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: LD_INT 3
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 2
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 3
60791: PUSH
60792: LD_INT 1
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 3
60801: PUSH
60802: LD_INT 2
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 3
60811: PUSH
60812: LD_INT 3
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 2
60821: PUSH
60822: LD_INT 3
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 2
60831: NEG
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 3
60842: NEG
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 3
60853: NEG
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 3
60865: NEG
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 3
60877: NEG
60878: PUSH
60879: LD_INT 3
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60918: LD_ADDR_VAR 0 45
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: LD_INT 1
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 1
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: LD_INT 2
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 2
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: LD_INT 2
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: NEG
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: NEG
61109: PUSH
61110: LD_INT 3
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 1
61120: NEG
61121: PUSH
61122: LD_INT 3
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: LD_INT 3
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: LD_INT 2
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 3
61154: PUSH
61155: LD_INT 2
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 3
61164: PUSH
61165: LD_INT 3
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: LD_INT 3
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: LD_INT 3
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: LD_INT 3
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: LD_INT 2
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: NEG
61216: PUSH
61217: LD_INT 2
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 3
61227: NEG
61228: PUSH
61229: LD_INT 3
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61268: LD_ADDR_VAR 0 46
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: LD_INT 0
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: LD_INT 1
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 1
61349: NEG
61350: PUSH
61351: LD_INT 2
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: LD_INT 2
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: PUSH
61373: LD_INT 1
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 2
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 0
61413: PUSH
61414: LD_INT 2
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 2
61434: NEG
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 2
61445: NEG
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: LD_INT 3
61461: NEG
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: LD_INT 3
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: LD_INT 2
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 3
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: LD_INT 3
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 3
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 2
61553: NEG
61554: PUSH
61555: LD_INT 1
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 3
61564: NEG
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 3
61575: NEG
61576: PUSH
61577: LD_INT 1
61579: NEG
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61616: LD_ADDR_VAR 0 47
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 0
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 1
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 1
61685: NEG
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: LD_INT 2
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: NEG
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 2
61743: NEG
61744: PUSH
61745: LD_INT 2
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61767: LD_ADDR_VAR 0 48
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: LD_INT 0
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: LD_INT 1
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 0
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: LD_INT 1
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 0
61860: PUSH
61861: LD_INT 2
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: PUSH
61872: LD_INT 1
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 2
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 2
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61914: LD_ADDR_VAR 0 49
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 2
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 2
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 2
62026: PUSH
62027: LD_INT 2
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 1
62036: PUSH
62037: LD_INT 2
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62058: LD_ADDR_VAR 0 50
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: LD_INT 1
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: LD_INT 0
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: LD_INT 1
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: LD_INT 1
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: LD_INT 2
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 0
62169: PUSH
62170: LD_INT 2
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62202: LD_ADDR_VAR 0 51
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 1
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: PUSH
62284: LD_INT 2
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: LD_INT 2
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 1
62303: NEG
62304: PUSH
62305: LD_INT 1
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 2
62314: NEG
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 2
62325: NEG
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62349: LD_ADDR_VAR 0 52
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: NEG
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: LD_INT 2
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 2
62453: NEG
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 2
62464: NEG
62465: PUSH
62466: LD_INT 1
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 2
62476: NEG
62477: PUSH
62478: LD_INT 2
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62500: LD_ADDR_VAR 0 53
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: LD_INT 1
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 1
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 2
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 2
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: LD_INT 1
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 2
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 2
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 2
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: NEG
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 2
62699: NEG
62700: PUSH
62701: LD_INT 2
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62730: LD_ADDR_VAR 0 54
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 1
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 1
62799: NEG
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: LD_INT 2
62815: NEG
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: LD_INT 2
62826: NEG
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: LD_INT 1
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 2
62855: PUSH
62856: LD_INT 1
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: LD_INT 2
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: LD_INT 2
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: LD_INT 2
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: LD_INT 1
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 2
62906: NEG
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 2
62917: NEG
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 2
62929: NEG
62930: PUSH
62931: LD_INT 2
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62960: LD_ADDR_VAR 0 55
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: LD_INT 0
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 1
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 1
63029: NEG
63030: PUSH
63031: LD_INT 1
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: LD_INT 1
63041: NEG
63042: PUSH
63043: LD_INT 2
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 0
63053: PUSH
63054: LD_INT 2
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: LD_INT 1
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 2
63095: PUSH
63096: LD_INT 2
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: LD_INT 1
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 2
63136: NEG
63137: PUSH
63138: LD_INT 0
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 2
63147: NEG
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 2
63159: NEG
63160: PUSH
63161: LD_INT 2
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63190: LD_ADDR_VAR 0 56
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 1
63228: PUSH
63229: LD_INT 1
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: LD_INT 2
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 2
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: PUSH
63295: LD_INT 1
63297: NEG
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 2
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 2
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: LD_INT 1
63335: PUSH
63336: LD_INT 2
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: LD_INT 2
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 1
63355: NEG
63356: PUSH
63357: LD_INT 1
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 2
63377: NEG
63378: PUSH
63379: LD_INT 1
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: NEG
63390: PUSH
63391: LD_INT 2
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63420: LD_ADDR_VAR 0 57
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 1
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: NEG
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: LD_INT 2
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: LD_INT 2
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 2
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 2
63545: PUSH
63546: LD_INT 1
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 2
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 2
63596: NEG
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 2
63607: NEG
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: LD_INT 2
63623: NEG
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63650: LD_ADDR_VAR 0 58
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: PUSH
63689: LD_INT 1
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 1
63731: NEG
63732: PUSH
63733: LD_INT 2
63735: NEG
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 0
63743: PUSH
63744: LD_INT 2
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: PUSH
63755: LD_INT 1
63757: NEG
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 2
63765: PUSH
63766: LD_INT 0
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 2
63775: PUSH
63776: LD_INT 1
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 2
63785: PUSH
63786: LD_INT 2
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: LD_INT 2
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 2
63826: NEG
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 2
63837: NEG
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 2
63849: NEG
63850: PUSH
63851: LD_INT 2
63853: NEG
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63880: LD_ADDR_VAR 0 59
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: LD_INT 0
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: LD_INT 1
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: PUSH
63909: LD_INT 0
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 1
63918: PUSH
63919: LD_INT 1
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: LD_INT 1
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 1
63938: NEG
63939: PUSH
63940: LD_INT 0
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: LD_INT 1
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63968: LD_ADDR_VAR 0 60
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: LD_INT 1
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: LD_INT 1
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 1
64026: NEG
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 1
64037: NEG
64038: PUSH
64039: LD_INT 1
64041: NEG
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64056: LD_ADDR_VAR 0 61
64060: PUSH
64061: LD_INT 0
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 0
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 1
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 1
64114: NEG
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: NEG
64126: PUSH
64127: LD_INT 1
64129: NEG
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64144: LD_ADDR_VAR 0 62
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: PUSH
64183: LD_INT 1
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: LD_INT 1
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: NEG
64214: PUSH
64215: LD_INT 1
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64232: LD_ADDR_VAR 0 63
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: LD_INT 1
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 1
64290: NEG
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 1
64301: NEG
64302: PUSH
64303: LD_INT 1
64305: NEG
64306: PUSH
64307: EMPTY
64308: LIST
64309: LIST
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64320: LD_ADDR_VAR 0 64
64324: PUSH
64325: LD_INT 0
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 0
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 1
64378: NEG
64379: PUSH
64380: LD_INT 0
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 1
64389: NEG
64390: PUSH
64391: LD_INT 1
64393: NEG
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: ST_TO_ADDR
// end ; 1 :
64408: GO 70305
64410: LD_INT 1
64412: DOUBLE
64413: EQUAL
64414: IFTRUE 64418
64416: GO 67041
64418: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64419: LD_ADDR_VAR 0 11
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: LD_INT 3
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 0
64438: PUSH
64439: LD_INT 3
64441: NEG
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 1
64449: PUSH
64450: LD_INT 2
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: LIST
64462: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64463: LD_ADDR_VAR 0 12
64467: PUSH
64468: LD_INT 2
64470: PUSH
64471: LD_INT 1
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 3
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 3
64491: PUSH
64492: LD_INT 1
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: LIST
64503: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64504: LD_ADDR_VAR 0 13
64508: PUSH
64509: LD_INT 3
64511: PUSH
64512: LD_INT 2
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 3
64521: PUSH
64522: LD_INT 3
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 2
64531: PUSH
64532: LD_INT 3
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: LIST
64543: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64544: LD_ADDR_VAR 0 14
64548: PUSH
64549: LD_INT 1
64551: PUSH
64552: LD_INT 3
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: LD_INT 3
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 1
64571: NEG
64572: PUSH
64573: LD_INT 2
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: LIST
64584: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64585: LD_ADDR_VAR 0 15
64589: PUSH
64590: LD_INT 2
64592: NEG
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 3
64603: NEG
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 3
64614: NEG
64615: PUSH
64616: LD_INT 1
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: LIST
64628: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64629: LD_ADDR_VAR 0 16
64633: PUSH
64634: LD_INT 2
64636: NEG
64637: PUSH
64638: LD_INT 3
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 3
64648: NEG
64649: PUSH
64650: LD_INT 2
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 3
64660: NEG
64661: PUSH
64662: LD_INT 3
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: LIST
64674: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64675: LD_ADDR_VAR 0 17
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: LD_INT 3
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 0
64694: PUSH
64695: LD_INT 3
64697: NEG
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: LD_INT 2
64708: NEG
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: LIST
64718: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64719: LD_ADDR_VAR 0 18
64723: PUSH
64724: LD_INT 2
64726: PUSH
64727: LD_INT 1
64729: NEG
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 3
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 3
64747: PUSH
64748: LD_INT 1
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: LIST
64759: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64760: LD_ADDR_VAR 0 19
64764: PUSH
64765: LD_INT 3
64767: PUSH
64768: LD_INT 2
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PUSH
64775: LD_INT 3
64777: PUSH
64778: LD_INT 3
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 2
64787: PUSH
64788: LD_INT 3
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: LIST
64799: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64800: LD_ADDR_VAR 0 20
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: LD_INT 3
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: LD_INT 3
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: LD_INT 2
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: LIST
64840: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64841: LD_ADDR_VAR 0 21
64845: PUSH
64846: LD_INT 2
64848: NEG
64849: PUSH
64850: LD_INT 1
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 3
64859: NEG
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 3
64870: NEG
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64885: LD_ADDR_VAR 0 22
64889: PUSH
64890: LD_INT 2
64892: NEG
64893: PUSH
64894: LD_INT 3
64896: NEG
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 3
64904: NEG
64905: PUSH
64906: LD_INT 2
64908: NEG
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 3
64916: NEG
64917: PUSH
64918: LD_INT 3
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: LIST
64930: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64931: LD_ADDR_VAR 0 23
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: LD_INT 3
64941: NEG
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 1
64949: NEG
64950: PUSH
64951: LD_INT 4
64953: NEG
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: LD_INT 3
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: LIST
64974: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64975: LD_ADDR_VAR 0 24
64979: PUSH
64980: LD_INT 3
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 3
64992: PUSH
64993: LD_INT 1
64995: NEG
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 4
65003: PUSH
65004: LD_INT 1
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: LIST
65015: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65016: LD_ADDR_VAR 0 25
65020: PUSH
65021: LD_INT 3
65023: PUSH
65024: LD_INT 3
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 4
65033: PUSH
65034: LD_INT 3
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 3
65043: PUSH
65044: LD_INT 4
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: LIST
65055: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65056: LD_ADDR_VAR 0 26
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: LD_INT 3
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: LD_INT 4
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: LD_INT 3
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: LIST
65096: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65097: LD_ADDR_VAR 0 27
65101: PUSH
65102: LD_INT 3
65104: NEG
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 3
65115: NEG
65116: PUSH
65117: LD_INT 1
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 4
65126: NEG
65127: PUSH
65128: LD_INT 1
65130: NEG
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65141: LD_ADDR_VAR 0 28
65145: PUSH
65146: LD_INT 3
65148: NEG
65149: PUSH
65150: LD_INT 3
65152: NEG
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 3
65160: NEG
65161: PUSH
65162: LD_INT 4
65164: NEG
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 4
65172: NEG
65173: PUSH
65174: LD_INT 3
65176: NEG
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: LIST
65186: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65187: LD_ADDR_VAR 0 29
65191: PUSH
65192: LD_INT 1
65194: NEG
65195: PUSH
65196: LD_INT 3
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 0
65206: PUSH
65207: LD_INT 3
65209: NEG
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 1
65217: PUSH
65218: LD_INT 2
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 1
65228: NEG
65229: PUSH
65230: LD_INT 4
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: LD_INT 4
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: PUSH
65252: LD_INT 3
65254: NEG
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: PUSH
65264: LD_INT 5
65266: NEG
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 0
65274: PUSH
65275: LD_INT 5
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: LD_INT 4
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: NEG
65297: PUSH
65298: LD_INT 6
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: LD_INT 6
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: LD_INT 5
65322: NEG
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65342: LD_ADDR_VAR 0 30
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 3
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 3
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 3
65380: PUSH
65381: LD_INT 1
65383: NEG
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 4
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 4
65401: PUSH
65402: LD_INT 1
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 4
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 5
65422: PUSH
65423: LD_INT 0
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 5
65432: PUSH
65433: LD_INT 1
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 5
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 6
65453: PUSH
65454: LD_INT 0
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 6
65463: PUSH
65464: LD_INT 1
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: LIST
65478: LIST
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65485: LD_ADDR_VAR 0 31
65489: PUSH
65490: LD_INT 3
65492: PUSH
65493: LD_INT 2
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 3
65502: PUSH
65503: LD_INT 3
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 2
65512: PUSH
65513: LD_INT 3
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 4
65522: PUSH
65523: LD_INT 3
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 4
65532: PUSH
65533: LD_INT 4
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 3
65542: PUSH
65543: LD_INT 4
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 5
65552: PUSH
65553: LD_INT 4
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 5
65562: PUSH
65563: LD_INT 5
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 4
65572: PUSH
65573: LD_INT 5
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 6
65582: PUSH
65583: LD_INT 5
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 6
65592: PUSH
65593: LD_INT 6
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 5
65602: PUSH
65603: LD_INT 6
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65624: LD_ADDR_VAR 0 32
65628: PUSH
65629: LD_INT 1
65631: PUSH
65632: LD_INT 3
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: LD_INT 3
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 1
65651: NEG
65652: PUSH
65653: LD_INT 2
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 1
65662: PUSH
65663: LD_INT 4
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 0
65672: PUSH
65673: LD_INT 4
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: LD_INT 3
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 1
65693: PUSH
65694: LD_INT 5
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: LD_INT 5
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 1
65713: NEG
65714: PUSH
65715: LD_INT 4
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 1
65724: PUSH
65725: LD_INT 6
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: LD_INT 6
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 1
65744: NEG
65745: PUSH
65746: LD_INT 5
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65767: LD_ADDR_VAR 0 33
65771: PUSH
65772: LD_INT 2
65774: NEG
65775: PUSH
65776: LD_INT 1
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 3
65785: NEG
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 3
65796: NEG
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 3
65808: NEG
65809: PUSH
65810: LD_INT 1
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 4
65819: NEG
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 4
65830: NEG
65831: PUSH
65832: LD_INT 1
65834: NEG
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 4
65842: NEG
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 5
65853: NEG
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 5
65864: NEG
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 5
65876: NEG
65877: PUSH
65878: LD_INT 1
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 6
65887: NEG
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 6
65898: NEG
65899: PUSH
65900: LD_INT 1
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65922: LD_ADDR_VAR 0 34
65926: PUSH
65927: LD_INT 2
65929: NEG
65930: PUSH
65931: LD_INT 3
65933: NEG
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 3
65941: NEG
65942: PUSH
65943: LD_INT 2
65945: NEG
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 3
65953: NEG
65954: PUSH
65955: LD_INT 3
65957: NEG
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 3
65965: NEG
65966: PUSH
65967: LD_INT 4
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 4
65977: NEG
65978: PUSH
65979: LD_INT 3
65981: NEG
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 4
65989: NEG
65990: PUSH
65991: LD_INT 4
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 4
66001: NEG
66002: PUSH
66003: LD_INT 5
66005: NEG
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 5
66013: NEG
66014: PUSH
66015: LD_INT 4
66017: NEG
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 5
66025: NEG
66026: PUSH
66027: LD_INT 5
66029: NEG
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 5
66037: NEG
66038: PUSH
66039: LD_INT 6
66041: NEG
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 6
66049: NEG
66050: PUSH
66051: LD_INT 5
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 6
66061: NEG
66062: PUSH
66063: LD_INT 6
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66085: LD_ADDR_VAR 0 41
66089: PUSH
66090: LD_INT 0
66092: PUSH
66093: LD_INT 2
66095: NEG
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 1
66103: NEG
66104: PUSH
66105: LD_INT 3
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: PUSH
66116: LD_INT 2
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: LIST
66128: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66129: LD_ADDR_VAR 0 42
66133: PUSH
66134: LD_INT 2
66136: PUSH
66137: LD_INT 0
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 2
66146: PUSH
66147: LD_INT 1
66149: NEG
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 3
66157: PUSH
66158: LD_INT 1
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: LIST
66169: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66170: LD_ADDR_VAR 0 43
66174: PUSH
66175: LD_INT 2
66177: PUSH
66178: LD_INT 2
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 3
66187: PUSH
66188: LD_INT 2
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 2
66197: PUSH
66198: LD_INT 3
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: LIST
66209: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66210: LD_ADDR_VAR 0 44
66214: PUSH
66215: LD_INT 0
66217: PUSH
66218: LD_INT 2
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 1
66227: PUSH
66228: LD_INT 3
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: PUSH
66239: LD_INT 2
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: LIST
66250: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66251: LD_ADDR_VAR 0 45
66255: PUSH
66256: LD_INT 2
66258: NEG
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 2
66269: NEG
66270: PUSH
66271: LD_INT 1
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 3
66280: NEG
66281: PUSH
66282: LD_INT 1
66284: NEG
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: LIST
66294: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66295: LD_ADDR_VAR 0 46
66299: PUSH
66300: LD_INT 2
66302: NEG
66303: PUSH
66304: LD_INT 2
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 2
66314: NEG
66315: PUSH
66316: LD_INT 3
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 3
66326: NEG
66327: PUSH
66328: LD_INT 2
66330: NEG
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: LIST
66340: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66341: LD_ADDR_VAR 0 47
66345: PUSH
66346: LD_INT 2
66348: NEG
66349: PUSH
66350: LD_INT 3
66352: NEG
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 1
66360: NEG
66361: PUSH
66362: LD_INT 3
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66374: LD_ADDR_VAR 0 48
66378: PUSH
66379: LD_INT 1
66381: PUSH
66382: LD_INT 2
66384: NEG
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 2
66392: PUSH
66393: LD_INT 1
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66405: LD_ADDR_VAR 0 49
66409: PUSH
66410: LD_INT 3
66412: PUSH
66413: LD_INT 1
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 3
66422: PUSH
66423: LD_INT 2
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66434: LD_ADDR_VAR 0 50
66438: PUSH
66439: LD_INT 2
66441: PUSH
66442: LD_INT 3
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 1
66451: PUSH
66452: LD_INT 3
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66463: LD_ADDR_VAR 0 51
66467: PUSH
66468: LD_INT 1
66470: NEG
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 2
66481: NEG
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66494: LD_ADDR_VAR 0 52
66498: PUSH
66499: LD_INT 3
66501: NEG
66502: PUSH
66503: LD_INT 1
66505: NEG
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 3
66513: NEG
66514: PUSH
66515: LD_INT 2
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66527: LD_ADDR_VAR 0 53
66531: PUSH
66532: LD_INT 1
66534: NEG
66535: PUSH
66536: LD_INT 3
66538: NEG
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: LD_INT 3
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 1
66557: PUSH
66558: LD_INT 2
66560: NEG
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: LIST
66570: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66571: LD_ADDR_VAR 0 54
66575: PUSH
66576: LD_INT 2
66578: PUSH
66579: LD_INT 1
66581: NEG
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 3
66589: PUSH
66590: LD_INT 0
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 3
66599: PUSH
66600: LD_INT 1
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: LIST
66611: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66612: LD_ADDR_VAR 0 55
66616: PUSH
66617: LD_INT 3
66619: PUSH
66620: LD_INT 2
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 3
66629: PUSH
66630: LD_INT 3
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 2
66639: PUSH
66640: LD_INT 3
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: LIST
66651: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66652: LD_ADDR_VAR 0 56
66656: PUSH
66657: LD_INT 1
66659: PUSH
66660: LD_INT 3
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: LD_INT 3
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 1
66679: NEG
66680: PUSH
66681: LD_INT 2
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: LIST
66692: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66693: LD_ADDR_VAR 0 57
66697: PUSH
66698: LD_INT 2
66700: NEG
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 3
66711: NEG
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 3
66722: NEG
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: LIST
66736: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66737: LD_ADDR_VAR 0 58
66741: PUSH
66742: LD_INT 2
66744: NEG
66745: PUSH
66746: LD_INT 3
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 3
66756: NEG
66757: PUSH
66758: LD_INT 2
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 3
66768: NEG
66769: PUSH
66770: LD_INT 3
66772: NEG
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: LIST
66782: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66783: LD_ADDR_VAR 0 59
66787: PUSH
66788: LD_INT 1
66790: NEG
66791: PUSH
66792: LD_INT 2
66794: NEG
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 0
66802: PUSH
66803: LD_INT 2
66805: NEG
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 1
66813: PUSH
66814: LD_INT 1
66816: NEG
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: LIST
66826: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66827: LD_ADDR_VAR 0 60
66831: PUSH
66832: LD_INT 1
66834: PUSH
66835: LD_INT 1
66837: NEG
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 2
66845: PUSH
66846: LD_INT 0
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: LD_INT 2
66855: PUSH
66856: LD_INT 1
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: LIST
66867: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66868: LD_ADDR_VAR 0 61
66872: PUSH
66873: LD_INT 2
66875: PUSH
66876: LD_INT 1
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 2
66885: PUSH
66886: LD_INT 2
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: LD_INT 2
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: LIST
66907: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66908: LD_ADDR_VAR 0 62
66912: PUSH
66913: LD_INT 1
66915: PUSH
66916: LD_INT 2
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: LD_INT 2
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: LD_INT 1
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: LIST
66948: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66949: LD_ADDR_VAR 0 63
66953: PUSH
66954: LD_INT 1
66956: NEG
66957: PUSH
66958: LD_INT 1
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 2
66967: NEG
66968: PUSH
66969: LD_INT 0
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 2
66978: NEG
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: LIST
66992: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66993: LD_ADDR_VAR 0 64
66997: PUSH
66998: LD_INT 1
67000: NEG
67001: PUSH
67002: LD_INT 2
67004: NEG
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 2
67012: NEG
67013: PUSH
67014: LD_INT 1
67016: NEG
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 2
67024: NEG
67025: PUSH
67026: LD_INT 2
67028: NEG
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: LIST
67038: ST_TO_ADDR
// end ; 2 :
67039: GO 70305
67041: LD_INT 2
67043: DOUBLE
67044: EQUAL
67045: IFTRUE 67049
67047: GO 70304
67049: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67050: LD_ADDR_VAR 0 29
67054: PUSH
67055: LD_INT 4
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 4
67067: PUSH
67068: LD_INT 1
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 5
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 5
67088: PUSH
67089: LD_INT 1
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 4
67098: PUSH
67099: LD_INT 1
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 3
67108: PUSH
67109: LD_INT 0
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 3
67118: PUSH
67119: LD_INT 1
67121: NEG
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 3
67129: PUSH
67130: LD_INT 2
67132: NEG
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 5
67140: PUSH
67141: LD_INT 2
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 3
67150: PUSH
67151: LD_INT 3
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 3
67160: PUSH
67161: LD_INT 2
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 4
67170: PUSH
67171: LD_INT 3
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 4
67180: PUSH
67181: LD_INT 4
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 3
67190: PUSH
67191: LD_INT 4
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 2
67200: PUSH
67201: LD_INT 3
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 2
67210: PUSH
67211: LD_INT 2
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 4
67220: PUSH
67221: LD_INT 2
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 2
67230: PUSH
67231: LD_INT 4
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: LD_INT 4
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 0
67250: PUSH
67251: LD_INT 3
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 1
67260: PUSH
67261: LD_INT 4
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 1
67270: PUSH
67271: LD_INT 5
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 0
67280: PUSH
67281: LD_INT 5
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 1
67290: NEG
67291: PUSH
67292: LD_INT 4
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 1
67301: NEG
67302: PUSH
67303: LD_INT 3
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 2
67312: PUSH
67313: LD_INT 5
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 2
67322: NEG
67323: PUSH
67324: LD_INT 3
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 3
67333: NEG
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 3
67344: NEG
67345: PUSH
67346: LD_INT 1
67348: NEG
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 2
67356: NEG
67357: PUSH
67358: LD_INT 0
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: PUSH
67365: LD_INT 2
67367: NEG
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 3
67378: NEG
67379: PUSH
67380: LD_INT 1
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 4
67389: NEG
67390: PUSH
67391: LD_INT 0
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 4
67400: NEG
67401: PUSH
67402: LD_INT 1
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 4
67412: NEG
67413: PUSH
67414: LD_INT 2
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 2
67424: NEG
67425: PUSH
67426: LD_INT 2
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 4
67435: NEG
67436: PUSH
67437: LD_INT 4
67439: NEG
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 4
67447: NEG
67448: PUSH
67449: LD_INT 5
67451: NEG
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 3
67459: NEG
67460: PUSH
67461: LD_INT 4
67463: NEG
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 3
67471: NEG
67472: PUSH
67473: LD_INT 3
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 4
67483: NEG
67484: PUSH
67485: LD_INT 3
67487: NEG
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 5
67495: NEG
67496: PUSH
67497: LD_INT 4
67499: NEG
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 5
67507: NEG
67508: PUSH
67509: LD_INT 5
67511: NEG
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 3
67519: NEG
67520: PUSH
67521: LD_INT 5
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 5
67531: NEG
67532: PUSH
67533: LD_INT 3
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67588: LD_ADDR_VAR 0 30
67592: PUSH
67593: LD_INT 4
67595: PUSH
67596: LD_INT 4
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 4
67605: PUSH
67606: LD_INT 3
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 5
67615: PUSH
67616: LD_INT 4
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 5
67625: PUSH
67626: LD_INT 5
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 4
67635: PUSH
67636: LD_INT 5
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 3
67645: PUSH
67646: LD_INT 4
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 3
67655: PUSH
67656: LD_INT 3
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 5
67665: PUSH
67666: LD_INT 3
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 3
67675: PUSH
67676: LD_INT 5
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 0
67685: PUSH
67686: LD_INT 3
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 0
67695: PUSH
67696: LD_INT 2
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 1
67705: PUSH
67706: LD_INT 3
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 1
67715: PUSH
67716: LD_INT 4
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 0
67725: PUSH
67726: LD_INT 4
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 1
67735: NEG
67736: PUSH
67737: LD_INT 3
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 1
67746: NEG
67747: PUSH
67748: LD_INT 2
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 2
67757: PUSH
67758: LD_INT 4
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PUSH
67765: LD_INT 2
67767: NEG
67768: PUSH
67769: LD_INT 2
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 4
67778: NEG
67779: PUSH
67780: LD_INT 0
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 4
67789: NEG
67790: PUSH
67791: LD_INT 1
67793: NEG
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 3
67801: NEG
67802: PUSH
67803: LD_INT 0
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 3
67812: NEG
67813: PUSH
67814: LD_INT 1
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 4
67823: NEG
67824: PUSH
67825: LD_INT 1
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 5
67834: NEG
67835: PUSH
67836: LD_INT 0
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 5
67845: NEG
67846: PUSH
67847: LD_INT 1
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 5
67857: NEG
67858: PUSH
67859: LD_INT 2
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 3
67869: NEG
67870: PUSH
67871: LD_INT 2
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 3
67880: NEG
67881: PUSH
67882: LD_INT 3
67884: NEG
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 3
67892: NEG
67893: PUSH
67894: LD_INT 4
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 2
67904: NEG
67905: PUSH
67906: LD_INT 3
67908: NEG
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 2
67916: NEG
67917: PUSH
67918: LD_INT 2
67920: NEG
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 3
67928: NEG
67929: PUSH
67930: LD_INT 2
67932: NEG
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 4
67940: NEG
67941: PUSH
67942: LD_INT 3
67944: NEG
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 4
67952: NEG
67953: PUSH
67954: LD_INT 4
67956: NEG
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 2
67964: NEG
67965: PUSH
67966: LD_INT 4
67968: NEG
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 4
67976: NEG
67977: PUSH
67978: LD_INT 2
67980: NEG
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 0
67988: PUSH
67989: LD_INT 4
67991: NEG
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 0
67999: PUSH
68000: LD_INT 5
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 1
68010: PUSH
68011: LD_INT 4
68013: NEG
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: LD_INT 3
68024: NEG
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 0
68032: PUSH
68033: LD_INT 3
68035: NEG
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 1
68043: NEG
68044: PUSH
68045: LD_INT 4
68047: NEG
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 1
68055: NEG
68056: PUSH
68057: LD_INT 5
68059: NEG
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 2
68067: PUSH
68068: LD_INT 3
68070: NEG
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 2
68078: NEG
68079: PUSH
68080: LD_INT 5
68082: NEG
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68135: LD_ADDR_VAR 0 31
68139: PUSH
68140: LD_INT 0
68142: PUSH
68143: LD_INT 4
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 0
68152: PUSH
68153: LD_INT 3
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 1
68162: PUSH
68163: LD_INT 4
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 1
68172: PUSH
68173: LD_INT 5
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 0
68182: PUSH
68183: LD_INT 5
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 1
68192: NEG
68193: PUSH
68194: LD_INT 4
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 1
68203: NEG
68204: PUSH
68205: LD_INT 3
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 2
68214: PUSH
68215: LD_INT 5
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 2
68224: NEG
68225: PUSH
68226: LD_INT 3
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 3
68235: NEG
68236: PUSH
68237: LD_INT 0
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 3
68246: NEG
68247: PUSH
68248: LD_INT 1
68250: NEG
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 2
68258: NEG
68259: PUSH
68260: LD_INT 0
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: LD_INT 2
68269: NEG
68270: PUSH
68271: LD_INT 1
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 3
68280: NEG
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 4
68291: NEG
68292: PUSH
68293: LD_INT 0
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 4
68302: NEG
68303: PUSH
68304: LD_INT 1
68306: NEG
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 4
68314: NEG
68315: PUSH
68316: LD_INT 2
68318: NEG
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 2
68326: NEG
68327: PUSH
68328: LD_INT 2
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 4
68337: NEG
68338: PUSH
68339: LD_INT 4
68341: NEG
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 4
68349: NEG
68350: PUSH
68351: LD_INT 5
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 3
68361: NEG
68362: PUSH
68363: LD_INT 4
68365: NEG
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 3
68373: NEG
68374: PUSH
68375: LD_INT 3
68377: NEG
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 4
68385: NEG
68386: PUSH
68387: LD_INT 3
68389: NEG
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 5
68397: NEG
68398: PUSH
68399: LD_INT 4
68401: NEG
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 5
68409: NEG
68410: PUSH
68411: LD_INT 5
68413: NEG
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 3
68421: NEG
68422: PUSH
68423: LD_INT 5
68425: NEG
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 5
68433: NEG
68434: PUSH
68435: LD_INT 3
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 0
68445: PUSH
68446: LD_INT 3
68448: NEG
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 0
68456: PUSH
68457: LD_INT 4
68459: NEG
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 1
68467: PUSH
68468: LD_INT 3
68470: NEG
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PUSH
68476: LD_INT 1
68478: PUSH
68479: LD_INT 2
68481: NEG
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 0
68489: PUSH
68490: LD_INT 2
68492: NEG
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 1
68500: NEG
68501: PUSH
68502: LD_INT 3
68504: NEG
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 1
68512: NEG
68513: PUSH
68514: LD_INT 4
68516: NEG
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 2
68524: PUSH
68525: LD_INT 2
68527: NEG
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 2
68535: NEG
68536: PUSH
68537: LD_INT 4
68539: NEG
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 4
68547: PUSH
68548: LD_INT 0
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 4
68557: PUSH
68558: LD_INT 1
68560: NEG
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 5
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 5
68578: PUSH
68579: LD_INT 1
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 4
68588: PUSH
68589: LD_INT 1
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 3
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 3
68608: PUSH
68609: LD_INT 1
68611: NEG
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 3
68619: PUSH
68620: LD_INT 2
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 5
68630: PUSH
68631: LD_INT 2
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68685: LD_ADDR_VAR 0 32
68689: PUSH
68690: LD_INT 4
68692: NEG
68693: PUSH
68694: LD_INT 0
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 4
68703: NEG
68704: PUSH
68705: LD_INT 1
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 3
68715: NEG
68716: PUSH
68717: LD_INT 0
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 3
68726: NEG
68727: PUSH
68728: LD_INT 1
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: LD_INT 4
68737: NEG
68738: PUSH
68739: LD_INT 1
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 5
68748: NEG
68749: PUSH
68750: LD_INT 0
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 5
68759: NEG
68760: PUSH
68761: LD_INT 1
68763: NEG
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 5
68771: NEG
68772: PUSH
68773: LD_INT 2
68775: NEG
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 3
68783: NEG
68784: PUSH
68785: LD_INT 2
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 3
68794: NEG
68795: PUSH
68796: LD_INT 3
68798: NEG
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 3
68806: NEG
68807: PUSH
68808: LD_INT 4
68810: NEG
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 2
68818: NEG
68819: PUSH
68820: LD_INT 3
68822: NEG
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 2
68830: NEG
68831: PUSH
68832: LD_INT 2
68834: NEG
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 3
68842: NEG
68843: PUSH
68844: LD_INT 2
68846: NEG
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 4
68854: NEG
68855: PUSH
68856: LD_INT 3
68858: NEG
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 4
68866: NEG
68867: PUSH
68868: LD_INT 4
68870: NEG
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 2
68878: NEG
68879: PUSH
68880: LD_INT 4
68882: NEG
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 4
68890: NEG
68891: PUSH
68892: LD_INT 2
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 0
68902: PUSH
68903: LD_INT 4
68905: NEG
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 0
68913: PUSH
68914: LD_INT 5
68916: NEG
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 1
68924: PUSH
68925: LD_INT 4
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 1
68935: PUSH
68936: LD_INT 3
68938: NEG
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 0
68946: PUSH
68947: LD_INT 3
68949: NEG
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 1
68957: NEG
68958: PUSH
68959: LD_INT 4
68961: NEG
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 1
68969: NEG
68970: PUSH
68971: LD_INT 5
68973: NEG
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 2
68981: PUSH
68982: LD_INT 3
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 2
68992: NEG
68993: PUSH
68994: LD_INT 5
68996: NEG
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 3
69004: PUSH
69005: LD_INT 0
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: LD_INT 3
69014: PUSH
69015: LD_INT 1
69017: NEG
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PUSH
69023: LD_INT 4
69025: PUSH
69026: LD_INT 0
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 4
69035: PUSH
69036: LD_INT 1
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 3
69045: PUSH
69046: LD_INT 1
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 2
69055: PUSH
69056: LD_INT 0
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 2
69065: PUSH
69066: LD_INT 1
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 2
69076: PUSH
69077: LD_INT 2
69079: NEG
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 4
69087: PUSH
69088: LD_INT 2
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 4
69097: PUSH
69098: LD_INT 4
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 4
69107: PUSH
69108: LD_INT 3
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 5
69117: PUSH
69118: LD_INT 4
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 5
69127: PUSH
69128: LD_INT 5
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 4
69137: PUSH
69138: LD_INT 5
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 3
69147: PUSH
69148: LD_INT 4
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 3
69157: PUSH
69158: LD_INT 3
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 5
69167: PUSH
69168: LD_INT 3
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 3
69177: PUSH
69178: LD_INT 5
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69232: LD_ADDR_VAR 0 33
69236: PUSH
69237: LD_INT 4
69239: NEG
69240: PUSH
69241: LD_INT 4
69243: NEG
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 4
69251: NEG
69252: PUSH
69253: LD_INT 5
69255: NEG
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 3
69263: NEG
69264: PUSH
69265: LD_INT 4
69267: NEG
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 3
69275: NEG
69276: PUSH
69277: LD_INT 3
69279: NEG
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 4
69287: NEG
69288: PUSH
69289: LD_INT 3
69291: NEG
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 5
69299: NEG
69300: PUSH
69301: LD_INT 4
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 5
69311: NEG
69312: PUSH
69313: LD_INT 5
69315: NEG
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 3
69323: NEG
69324: PUSH
69325: LD_INT 5
69327: NEG
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 5
69335: NEG
69336: PUSH
69337: LD_INT 3
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 0
69347: PUSH
69348: LD_INT 3
69350: NEG
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 0
69358: PUSH
69359: LD_INT 4
69361: NEG
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 1
69369: PUSH
69370: LD_INT 3
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 1
69380: PUSH
69381: LD_INT 2
69383: NEG
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 0
69391: PUSH
69392: LD_INT 2
69394: NEG
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 1
69402: NEG
69403: PUSH
69404: LD_INT 3
69406: NEG
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 1
69414: NEG
69415: PUSH
69416: LD_INT 4
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 2
69426: PUSH
69427: LD_INT 2
69429: NEG
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 2
69437: NEG
69438: PUSH
69439: LD_INT 4
69441: NEG
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 4
69449: PUSH
69450: LD_INT 0
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 4
69459: PUSH
69460: LD_INT 1
69462: NEG
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 5
69470: PUSH
69471: LD_INT 0
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 5
69480: PUSH
69481: LD_INT 1
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 4
69490: PUSH
69491: LD_INT 1
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 3
69500: PUSH
69501: LD_INT 0
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 3
69510: PUSH
69511: LD_INT 1
69513: NEG
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 3
69521: PUSH
69522: LD_INT 2
69524: NEG
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 5
69532: PUSH
69533: LD_INT 2
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 3
69542: PUSH
69543: LD_INT 3
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 3
69552: PUSH
69553: LD_INT 2
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 4
69562: PUSH
69563: LD_INT 3
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 4
69572: PUSH
69573: LD_INT 4
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 3
69582: PUSH
69583: LD_INT 4
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 2
69592: PUSH
69593: LD_INT 3
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 2
69602: PUSH
69603: LD_INT 2
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 4
69612: PUSH
69613: LD_INT 2
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 2
69622: PUSH
69623: LD_INT 4
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: LD_INT 4
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 0
69642: PUSH
69643: LD_INT 3
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 1
69652: PUSH
69653: LD_INT 4
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 1
69662: PUSH
69663: LD_INT 5
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 0
69672: PUSH
69673: LD_INT 5
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 1
69682: NEG
69683: PUSH
69684: LD_INT 4
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 1
69693: NEG
69694: PUSH
69695: LD_INT 3
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 2
69704: PUSH
69705: LD_INT 5
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 2
69714: NEG
69715: PUSH
69716: LD_INT 3
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69770: LD_ADDR_VAR 0 34
69774: PUSH
69775: LD_INT 0
69777: PUSH
69778: LD_INT 4
69780: NEG
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 0
69788: PUSH
69789: LD_INT 5
69791: NEG
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 1
69799: PUSH
69800: LD_INT 4
69802: NEG
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 1
69810: PUSH
69811: LD_INT 3
69813: NEG
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 0
69821: PUSH
69822: LD_INT 3
69824: NEG
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 1
69832: NEG
69833: PUSH
69834: LD_INT 4
69836: NEG
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 1
69844: NEG
69845: PUSH
69846: LD_INT 5
69848: NEG
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 2
69856: PUSH
69857: LD_INT 3
69859: NEG
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 2
69867: NEG
69868: PUSH
69869: LD_INT 5
69871: NEG
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 3
69879: PUSH
69880: LD_INT 0
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 3
69889: PUSH
69890: LD_INT 1
69892: NEG
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 4
69900: PUSH
69901: LD_INT 0
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 4
69910: PUSH
69911: LD_INT 1
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 3
69920: PUSH
69921: LD_INT 1
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 2
69930: PUSH
69931: LD_INT 0
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 2
69940: PUSH
69941: LD_INT 1
69943: NEG
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 2
69951: PUSH
69952: LD_INT 2
69954: NEG
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_INT 4
69962: PUSH
69963: LD_INT 2
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 4
69972: PUSH
69973: LD_INT 4
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 4
69982: PUSH
69983: LD_INT 3
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 5
69992: PUSH
69993: LD_INT 4
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 5
70002: PUSH
70003: LD_INT 5
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 4
70012: PUSH
70013: LD_INT 5
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 3
70022: PUSH
70023: LD_INT 4
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 3
70032: PUSH
70033: LD_INT 3
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 5
70042: PUSH
70043: LD_INT 3
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 3
70052: PUSH
70053: LD_INT 5
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 0
70062: PUSH
70063: LD_INT 3
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 0
70072: PUSH
70073: LD_INT 2
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 1
70082: PUSH
70083: LD_INT 3
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 1
70092: PUSH
70093: LD_INT 4
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 0
70102: PUSH
70103: LD_INT 4
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 1
70112: NEG
70113: PUSH
70114: LD_INT 3
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 1
70123: NEG
70124: PUSH
70125: LD_INT 2
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 2
70134: PUSH
70135: LD_INT 4
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 2
70144: NEG
70145: PUSH
70146: LD_INT 2
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 4
70155: NEG
70156: PUSH
70157: LD_INT 0
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 4
70166: NEG
70167: PUSH
70168: LD_INT 1
70170: NEG
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 3
70178: NEG
70179: PUSH
70180: LD_INT 0
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 3
70189: NEG
70190: PUSH
70191: LD_INT 1
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 4
70200: NEG
70201: PUSH
70202: LD_INT 1
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 5
70211: NEG
70212: PUSH
70213: LD_INT 0
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 5
70222: NEG
70223: PUSH
70224: LD_INT 1
70226: NEG
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 5
70234: NEG
70235: PUSH
70236: LD_INT 2
70238: NEG
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 3
70246: NEG
70247: PUSH
70248: LD_INT 2
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: ST_TO_ADDR
// end ; end ;
70302: GO 70305
70304: POP
// case btype of b_depot , b_warehouse :
70305: LD_VAR 0 1
70309: PUSH
70310: LD_INT 0
70312: DOUBLE
70313: EQUAL
70314: IFTRUE 70324
70316: LD_INT 1
70318: DOUBLE
70319: EQUAL
70320: IFTRUE 70324
70322: GO 70525
70324: POP
// case nation of nation_american :
70325: LD_VAR 0 5
70329: PUSH
70330: LD_INT 1
70332: DOUBLE
70333: EQUAL
70334: IFTRUE 70338
70336: GO 70394
70338: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70339: LD_ADDR_VAR 0 9
70343: PUSH
70344: LD_VAR 0 11
70348: PUSH
70349: LD_VAR 0 12
70353: PUSH
70354: LD_VAR 0 13
70358: PUSH
70359: LD_VAR 0 14
70363: PUSH
70364: LD_VAR 0 15
70368: PUSH
70369: LD_VAR 0 16
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: PUSH
70382: LD_VAR 0 4
70386: PUSH
70387: LD_INT 1
70389: PLUS
70390: ARRAY
70391: ST_TO_ADDR
70392: GO 70523
70394: LD_INT 2
70396: DOUBLE
70397: EQUAL
70398: IFTRUE 70402
70400: GO 70458
70402: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70403: LD_ADDR_VAR 0 9
70407: PUSH
70408: LD_VAR 0 17
70412: PUSH
70413: LD_VAR 0 18
70417: PUSH
70418: LD_VAR 0 19
70422: PUSH
70423: LD_VAR 0 20
70427: PUSH
70428: LD_VAR 0 21
70432: PUSH
70433: LD_VAR 0 22
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: PUSH
70446: LD_VAR 0 4
70450: PUSH
70451: LD_INT 1
70453: PLUS
70454: ARRAY
70455: ST_TO_ADDR
70456: GO 70523
70458: LD_INT 3
70460: DOUBLE
70461: EQUAL
70462: IFTRUE 70466
70464: GO 70522
70466: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70467: LD_ADDR_VAR 0 9
70471: PUSH
70472: LD_VAR 0 23
70476: PUSH
70477: LD_VAR 0 24
70481: PUSH
70482: LD_VAR 0 25
70486: PUSH
70487: LD_VAR 0 26
70491: PUSH
70492: LD_VAR 0 27
70496: PUSH
70497: LD_VAR 0 28
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: PUSH
70510: LD_VAR 0 4
70514: PUSH
70515: LD_INT 1
70517: PLUS
70518: ARRAY
70519: ST_TO_ADDR
70520: GO 70523
70522: POP
70523: GO 71078
70525: LD_INT 2
70527: DOUBLE
70528: EQUAL
70529: IFTRUE 70539
70531: LD_INT 3
70533: DOUBLE
70534: EQUAL
70535: IFTRUE 70539
70537: GO 70595
70539: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70540: LD_ADDR_VAR 0 9
70544: PUSH
70545: LD_VAR 0 29
70549: PUSH
70550: LD_VAR 0 30
70554: PUSH
70555: LD_VAR 0 31
70559: PUSH
70560: LD_VAR 0 32
70564: PUSH
70565: LD_VAR 0 33
70569: PUSH
70570: LD_VAR 0 34
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: PUSH
70583: LD_VAR 0 4
70587: PUSH
70588: LD_INT 1
70590: PLUS
70591: ARRAY
70592: ST_TO_ADDR
70593: GO 71078
70595: LD_INT 16
70597: DOUBLE
70598: EQUAL
70599: IFTRUE 70657
70601: LD_INT 17
70603: DOUBLE
70604: EQUAL
70605: IFTRUE 70657
70607: LD_INT 18
70609: DOUBLE
70610: EQUAL
70611: IFTRUE 70657
70613: LD_INT 19
70615: DOUBLE
70616: EQUAL
70617: IFTRUE 70657
70619: LD_INT 22
70621: DOUBLE
70622: EQUAL
70623: IFTRUE 70657
70625: LD_INT 20
70627: DOUBLE
70628: EQUAL
70629: IFTRUE 70657
70631: LD_INT 21
70633: DOUBLE
70634: EQUAL
70635: IFTRUE 70657
70637: LD_INT 23
70639: DOUBLE
70640: EQUAL
70641: IFTRUE 70657
70643: LD_INT 24
70645: DOUBLE
70646: EQUAL
70647: IFTRUE 70657
70649: LD_INT 25
70651: DOUBLE
70652: EQUAL
70653: IFTRUE 70657
70655: GO 70713
70657: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70658: LD_ADDR_VAR 0 9
70662: PUSH
70663: LD_VAR 0 35
70667: PUSH
70668: LD_VAR 0 36
70672: PUSH
70673: LD_VAR 0 37
70677: PUSH
70678: LD_VAR 0 38
70682: PUSH
70683: LD_VAR 0 39
70687: PUSH
70688: LD_VAR 0 40
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: PUSH
70701: LD_VAR 0 4
70705: PUSH
70706: LD_INT 1
70708: PLUS
70709: ARRAY
70710: ST_TO_ADDR
70711: GO 71078
70713: LD_INT 6
70715: DOUBLE
70716: EQUAL
70717: IFTRUE 70769
70719: LD_INT 7
70721: DOUBLE
70722: EQUAL
70723: IFTRUE 70769
70725: LD_INT 8
70727: DOUBLE
70728: EQUAL
70729: IFTRUE 70769
70731: LD_INT 13
70733: DOUBLE
70734: EQUAL
70735: IFTRUE 70769
70737: LD_INT 12
70739: DOUBLE
70740: EQUAL
70741: IFTRUE 70769
70743: LD_INT 15
70745: DOUBLE
70746: EQUAL
70747: IFTRUE 70769
70749: LD_INT 11
70751: DOUBLE
70752: EQUAL
70753: IFTRUE 70769
70755: LD_INT 14
70757: DOUBLE
70758: EQUAL
70759: IFTRUE 70769
70761: LD_INT 10
70763: DOUBLE
70764: EQUAL
70765: IFTRUE 70769
70767: GO 70825
70769: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70770: LD_ADDR_VAR 0 9
70774: PUSH
70775: LD_VAR 0 41
70779: PUSH
70780: LD_VAR 0 42
70784: PUSH
70785: LD_VAR 0 43
70789: PUSH
70790: LD_VAR 0 44
70794: PUSH
70795: LD_VAR 0 45
70799: PUSH
70800: LD_VAR 0 46
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: PUSH
70813: LD_VAR 0 4
70817: PUSH
70818: LD_INT 1
70820: PLUS
70821: ARRAY
70822: ST_TO_ADDR
70823: GO 71078
70825: LD_INT 36
70827: DOUBLE
70828: EQUAL
70829: IFTRUE 70833
70831: GO 70889
70833: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70834: LD_ADDR_VAR 0 9
70838: PUSH
70839: LD_VAR 0 47
70843: PUSH
70844: LD_VAR 0 48
70848: PUSH
70849: LD_VAR 0 49
70853: PUSH
70854: LD_VAR 0 50
70858: PUSH
70859: LD_VAR 0 51
70863: PUSH
70864: LD_VAR 0 52
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: PUSH
70877: LD_VAR 0 4
70881: PUSH
70882: LD_INT 1
70884: PLUS
70885: ARRAY
70886: ST_TO_ADDR
70887: GO 71078
70889: LD_INT 4
70891: DOUBLE
70892: EQUAL
70893: IFTRUE 70915
70895: LD_INT 5
70897: DOUBLE
70898: EQUAL
70899: IFTRUE 70915
70901: LD_INT 34
70903: DOUBLE
70904: EQUAL
70905: IFTRUE 70915
70907: LD_INT 37
70909: DOUBLE
70910: EQUAL
70911: IFTRUE 70915
70913: GO 70971
70915: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70916: LD_ADDR_VAR 0 9
70920: PUSH
70921: LD_VAR 0 53
70925: PUSH
70926: LD_VAR 0 54
70930: PUSH
70931: LD_VAR 0 55
70935: PUSH
70936: LD_VAR 0 56
70940: PUSH
70941: LD_VAR 0 57
70945: PUSH
70946: LD_VAR 0 58
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: PUSH
70959: LD_VAR 0 4
70963: PUSH
70964: LD_INT 1
70966: PLUS
70967: ARRAY
70968: ST_TO_ADDR
70969: GO 71078
70971: LD_INT 31
70973: DOUBLE
70974: EQUAL
70975: IFTRUE 71021
70977: LD_INT 32
70979: DOUBLE
70980: EQUAL
70981: IFTRUE 71021
70983: LD_INT 33
70985: DOUBLE
70986: EQUAL
70987: IFTRUE 71021
70989: LD_INT 27
70991: DOUBLE
70992: EQUAL
70993: IFTRUE 71021
70995: LD_INT 26
70997: DOUBLE
70998: EQUAL
70999: IFTRUE 71021
71001: LD_INT 28
71003: DOUBLE
71004: EQUAL
71005: IFTRUE 71021
71007: LD_INT 29
71009: DOUBLE
71010: EQUAL
71011: IFTRUE 71021
71013: LD_INT 30
71015: DOUBLE
71016: EQUAL
71017: IFTRUE 71021
71019: GO 71077
71021: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71022: LD_ADDR_VAR 0 9
71026: PUSH
71027: LD_VAR 0 59
71031: PUSH
71032: LD_VAR 0 60
71036: PUSH
71037: LD_VAR 0 61
71041: PUSH
71042: LD_VAR 0 62
71046: PUSH
71047: LD_VAR 0 63
71051: PUSH
71052: LD_VAR 0 64
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: LIST
71063: LIST
71064: PUSH
71065: LD_VAR 0 4
71069: PUSH
71070: LD_INT 1
71072: PLUS
71073: ARRAY
71074: ST_TO_ADDR
71075: GO 71078
71077: POP
// temp_list2 = [ ] ;
71078: LD_ADDR_VAR 0 10
71082: PUSH
71083: EMPTY
71084: ST_TO_ADDR
// for i in temp_list do
71085: LD_ADDR_VAR 0 8
71089: PUSH
71090: LD_VAR 0 9
71094: PUSH
71095: FOR_IN
71096: IFFALSE 71148
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71098: LD_ADDR_VAR 0 10
71102: PUSH
71103: LD_VAR 0 10
71107: PUSH
71108: LD_VAR 0 8
71112: PUSH
71113: LD_INT 1
71115: ARRAY
71116: PUSH
71117: LD_VAR 0 2
71121: PLUS
71122: PUSH
71123: LD_VAR 0 8
71127: PUSH
71128: LD_INT 2
71130: ARRAY
71131: PUSH
71132: LD_VAR 0 3
71136: PLUS
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: EMPTY
71143: LIST
71144: ADD
71145: ST_TO_ADDR
71146: GO 71095
71148: POP
71149: POP
// result = temp_list2 ;
71150: LD_ADDR_VAR 0 7
71154: PUSH
71155: LD_VAR 0 10
71159: ST_TO_ADDR
// end ;
71160: LD_VAR 0 7
71164: RET
// export function EnemyInRange ( unit , dist ) ; begin
71165: LD_INT 0
71167: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71168: LD_ADDR_VAR 0 3
71172: PUSH
71173: LD_VAR 0 1
71177: PPUSH
71178: CALL_OW 255
71182: PPUSH
71183: LD_VAR 0 1
71187: PPUSH
71188: CALL_OW 250
71192: PPUSH
71193: LD_VAR 0 1
71197: PPUSH
71198: CALL_OW 251
71202: PPUSH
71203: LD_VAR 0 2
71207: PPUSH
71208: CALL 44561 0 4
71212: PUSH
71213: LD_INT 4
71215: ARRAY
71216: ST_TO_ADDR
// end ;
71217: LD_VAR 0 3
71221: RET
// export function PlayerSeeMe ( unit ) ; begin
71222: LD_INT 0
71224: PPUSH
// result := See ( your_side , unit ) ;
71225: LD_ADDR_VAR 0 2
71229: PUSH
71230: LD_OWVAR 2
71234: PPUSH
71235: LD_VAR 0 1
71239: PPUSH
71240: CALL_OW 292
71244: ST_TO_ADDR
// end ;
71245: LD_VAR 0 2
71249: RET
// export function ReverseDir ( unit ) ; begin
71250: LD_INT 0
71252: PPUSH
// if not unit then
71253: LD_VAR 0 1
71257: NOT
71258: IFFALSE 71262
// exit ;
71260: GO 71285
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71262: LD_ADDR_VAR 0 2
71266: PUSH
71267: LD_VAR 0 1
71271: PPUSH
71272: CALL_OW 254
71276: PUSH
71277: LD_INT 3
71279: PLUS
71280: PUSH
71281: LD_INT 6
71283: MOD
71284: ST_TO_ADDR
// end ;
71285: LD_VAR 0 2
71289: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71290: LD_INT 0
71292: PPUSH
71293: PPUSH
71294: PPUSH
71295: PPUSH
71296: PPUSH
// if not hexes then
71297: LD_VAR 0 2
71301: NOT
71302: IFFALSE 71306
// exit ;
71304: GO 71454
// dist := 9999 ;
71306: LD_ADDR_VAR 0 5
71310: PUSH
71311: LD_INT 9999
71313: ST_TO_ADDR
// for i = 1 to hexes do
71314: LD_ADDR_VAR 0 4
71318: PUSH
71319: DOUBLE
71320: LD_INT 1
71322: DEC
71323: ST_TO_ADDR
71324: LD_VAR 0 2
71328: PUSH
71329: FOR_TO
71330: IFFALSE 71442
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71332: LD_VAR 0 1
71336: PPUSH
71337: LD_VAR 0 2
71341: PUSH
71342: LD_VAR 0 4
71346: ARRAY
71347: PUSH
71348: LD_INT 1
71350: ARRAY
71351: PPUSH
71352: LD_VAR 0 2
71356: PUSH
71357: LD_VAR 0 4
71361: ARRAY
71362: PUSH
71363: LD_INT 2
71365: ARRAY
71366: PPUSH
71367: CALL_OW 297
71371: PUSH
71372: LD_VAR 0 5
71376: LESS
71377: IFFALSE 71440
// begin hex := hexes [ i ] ;
71379: LD_ADDR_VAR 0 7
71383: PUSH
71384: LD_VAR 0 2
71388: PUSH
71389: LD_VAR 0 4
71393: ARRAY
71394: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71395: LD_ADDR_VAR 0 5
71399: PUSH
71400: LD_VAR 0 1
71404: PPUSH
71405: LD_VAR 0 2
71409: PUSH
71410: LD_VAR 0 4
71414: ARRAY
71415: PUSH
71416: LD_INT 1
71418: ARRAY
71419: PPUSH
71420: LD_VAR 0 2
71424: PUSH
71425: LD_VAR 0 4
71429: ARRAY
71430: PUSH
71431: LD_INT 2
71433: ARRAY
71434: PPUSH
71435: CALL_OW 297
71439: ST_TO_ADDR
// end ; end ;
71440: GO 71329
71442: POP
71443: POP
// result := hex ;
71444: LD_ADDR_VAR 0 3
71448: PUSH
71449: LD_VAR 0 7
71453: ST_TO_ADDR
// end ;
71454: LD_VAR 0 3
71458: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71459: LD_INT 0
71461: PPUSH
71462: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71463: LD_VAR 0 1
71467: NOT
71468: PUSH
71469: LD_VAR 0 1
71473: PUSH
71474: LD_INT 21
71476: PUSH
71477: LD_INT 2
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: PUSH
71484: LD_INT 23
71486: PUSH
71487: LD_INT 2
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PPUSH
71498: CALL_OW 69
71502: IN
71503: NOT
71504: OR
71505: IFFALSE 71509
// exit ;
71507: GO 71556
// for i = 1 to 3 do
71509: LD_ADDR_VAR 0 3
71513: PUSH
71514: DOUBLE
71515: LD_INT 1
71517: DEC
71518: ST_TO_ADDR
71519: LD_INT 3
71521: PUSH
71522: FOR_TO
71523: IFFALSE 71554
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71525: LD_VAR 0 1
71529: PPUSH
71530: CALL_OW 250
71534: PPUSH
71535: LD_VAR 0 1
71539: PPUSH
71540: CALL_OW 251
71544: PPUSH
71545: LD_INT 1
71547: PPUSH
71548: CALL_OW 453
71552: GO 71522
71554: POP
71555: POP
// end ;
71556: LD_VAR 0 2
71560: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71561: LD_INT 0
71563: PPUSH
71564: PPUSH
71565: PPUSH
71566: PPUSH
71567: PPUSH
71568: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71569: LD_VAR 0 1
71573: NOT
71574: PUSH
71575: LD_VAR 0 2
71579: NOT
71580: OR
71581: PUSH
71582: LD_VAR 0 1
71586: PPUSH
71587: CALL_OW 314
71591: OR
71592: IFFALSE 71596
// exit ;
71594: GO 72037
// x := GetX ( enemy_unit ) ;
71596: LD_ADDR_VAR 0 7
71600: PUSH
71601: LD_VAR 0 2
71605: PPUSH
71606: CALL_OW 250
71610: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71611: LD_ADDR_VAR 0 8
71615: PUSH
71616: LD_VAR 0 2
71620: PPUSH
71621: CALL_OW 251
71625: ST_TO_ADDR
// if not x or not y then
71626: LD_VAR 0 7
71630: NOT
71631: PUSH
71632: LD_VAR 0 8
71636: NOT
71637: OR
71638: IFFALSE 71642
// exit ;
71640: GO 72037
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71642: LD_ADDR_VAR 0 6
71646: PUSH
71647: LD_VAR 0 7
71651: PPUSH
71652: LD_INT 0
71654: PPUSH
71655: LD_INT 4
71657: PPUSH
71658: CALL_OW 272
71662: PUSH
71663: LD_VAR 0 8
71667: PPUSH
71668: LD_INT 0
71670: PPUSH
71671: LD_INT 4
71673: PPUSH
71674: CALL_OW 273
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_VAR 0 7
71687: PPUSH
71688: LD_INT 1
71690: PPUSH
71691: LD_INT 4
71693: PPUSH
71694: CALL_OW 272
71698: PUSH
71699: LD_VAR 0 8
71703: PPUSH
71704: LD_INT 1
71706: PPUSH
71707: LD_INT 4
71709: PPUSH
71710: CALL_OW 273
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_VAR 0 7
71723: PPUSH
71724: LD_INT 2
71726: PPUSH
71727: LD_INT 4
71729: PPUSH
71730: CALL_OW 272
71734: PUSH
71735: LD_VAR 0 8
71739: PPUSH
71740: LD_INT 2
71742: PPUSH
71743: LD_INT 4
71745: PPUSH
71746: CALL_OW 273
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_VAR 0 7
71759: PPUSH
71760: LD_INT 3
71762: PPUSH
71763: LD_INT 4
71765: PPUSH
71766: CALL_OW 272
71770: PUSH
71771: LD_VAR 0 8
71775: PPUSH
71776: LD_INT 3
71778: PPUSH
71779: LD_INT 4
71781: PPUSH
71782: CALL_OW 273
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_VAR 0 7
71795: PPUSH
71796: LD_INT 4
71798: PPUSH
71799: LD_INT 4
71801: PPUSH
71802: CALL_OW 272
71806: PUSH
71807: LD_VAR 0 8
71811: PPUSH
71812: LD_INT 4
71814: PPUSH
71815: LD_INT 4
71817: PPUSH
71818: CALL_OW 273
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_VAR 0 7
71831: PPUSH
71832: LD_INT 5
71834: PPUSH
71835: LD_INT 4
71837: PPUSH
71838: CALL_OW 272
71842: PUSH
71843: LD_VAR 0 8
71847: PPUSH
71848: LD_INT 5
71850: PPUSH
71851: LD_INT 4
71853: PPUSH
71854: CALL_OW 273
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: ST_TO_ADDR
// for i = tmp downto 1 do
71871: LD_ADDR_VAR 0 4
71875: PUSH
71876: DOUBLE
71877: LD_VAR 0 6
71881: INC
71882: ST_TO_ADDR
71883: LD_INT 1
71885: PUSH
71886: FOR_DOWNTO
71887: IFFALSE 71988
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71889: LD_VAR 0 6
71893: PUSH
71894: LD_VAR 0 4
71898: ARRAY
71899: PUSH
71900: LD_INT 1
71902: ARRAY
71903: PPUSH
71904: LD_VAR 0 6
71908: PUSH
71909: LD_VAR 0 4
71913: ARRAY
71914: PUSH
71915: LD_INT 2
71917: ARRAY
71918: PPUSH
71919: CALL_OW 488
71923: NOT
71924: PUSH
71925: LD_VAR 0 6
71929: PUSH
71930: LD_VAR 0 4
71934: ARRAY
71935: PUSH
71936: LD_INT 1
71938: ARRAY
71939: PPUSH
71940: LD_VAR 0 6
71944: PUSH
71945: LD_VAR 0 4
71949: ARRAY
71950: PUSH
71951: LD_INT 2
71953: ARRAY
71954: PPUSH
71955: CALL_OW 428
71959: PUSH
71960: LD_INT 0
71962: NONEQUAL
71963: OR
71964: IFFALSE 71986
// tmp := Delete ( tmp , i ) ;
71966: LD_ADDR_VAR 0 6
71970: PUSH
71971: LD_VAR 0 6
71975: PPUSH
71976: LD_VAR 0 4
71980: PPUSH
71981: CALL_OW 3
71985: ST_TO_ADDR
71986: GO 71886
71988: POP
71989: POP
// j := GetClosestHex ( unit , tmp ) ;
71990: LD_ADDR_VAR 0 5
71994: PUSH
71995: LD_VAR 0 1
71999: PPUSH
72000: LD_VAR 0 6
72004: PPUSH
72005: CALL 71290 0 2
72009: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72010: LD_VAR 0 1
72014: PPUSH
72015: LD_VAR 0 5
72019: PUSH
72020: LD_INT 1
72022: ARRAY
72023: PPUSH
72024: LD_VAR 0 5
72028: PUSH
72029: LD_INT 2
72031: ARRAY
72032: PPUSH
72033: CALL_OW 111
// end ;
72037: LD_VAR 0 3
72041: RET
// export function PrepareApemanSoldier ( ) ; begin
72042: LD_INT 0
72044: PPUSH
// uc_nation := 0 ;
72045: LD_ADDR_OWVAR 21
72049: PUSH
72050: LD_INT 0
72052: ST_TO_ADDR
// hc_sex := sex_male ;
72053: LD_ADDR_OWVAR 27
72057: PUSH
72058: LD_INT 1
72060: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72061: LD_ADDR_OWVAR 28
72065: PUSH
72066: LD_INT 15
72068: ST_TO_ADDR
// hc_gallery :=  ;
72069: LD_ADDR_OWVAR 33
72073: PUSH
72074: LD_STRING 
72076: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72077: LD_ADDR_OWVAR 31
72081: PUSH
72082: LD_INT 0
72084: PPUSH
72085: LD_INT 3
72087: PPUSH
72088: CALL_OW 12
72092: PUSH
72093: LD_INT 0
72095: PPUSH
72096: LD_INT 3
72098: PPUSH
72099: CALL_OW 12
72103: PUSH
72104: LD_INT 0
72106: PUSH
72107: LD_INT 0
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: ST_TO_ADDR
// end ;
72116: LD_VAR 0 1
72120: RET
// export function PrepareApemanEngineer ( ) ; begin
72121: LD_INT 0
72123: PPUSH
// uc_nation := 0 ;
72124: LD_ADDR_OWVAR 21
72128: PUSH
72129: LD_INT 0
72131: ST_TO_ADDR
// hc_sex := sex_male ;
72132: LD_ADDR_OWVAR 27
72136: PUSH
72137: LD_INT 1
72139: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72140: LD_ADDR_OWVAR 28
72144: PUSH
72145: LD_INT 16
72147: ST_TO_ADDR
// hc_gallery :=  ;
72148: LD_ADDR_OWVAR 33
72152: PUSH
72153: LD_STRING 
72155: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72156: LD_ADDR_OWVAR 31
72160: PUSH
72161: LD_INT 0
72163: PPUSH
72164: LD_INT 3
72166: PPUSH
72167: CALL_OW 12
72171: PUSH
72172: LD_INT 0
72174: PPUSH
72175: LD_INT 3
72177: PPUSH
72178: CALL_OW 12
72182: PUSH
72183: LD_INT 0
72185: PUSH
72186: LD_INT 0
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: ST_TO_ADDR
// end ;
72195: LD_VAR 0 1
72199: RET
// export function PrepareApeman ( agressivity ) ; begin
72200: LD_INT 0
72202: PPUSH
// uc_side := 0 ;
72203: LD_ADDR_OWVAR 20
72207: PUSH
72208: LD_INT 0
72210: ST_TO_ADDR
// uc_nation := 0 ;
72211: LD_ADDR_OWVAR 21
72215: PUSH
72216: LD_INT 0
72218: ST_TO_ADDR
// hc_sex := sex_male ;
72219: LD_ADDR_OWVAR 27
72223: PUSH
72224: LD_INT 1
72226: ST_TO_ADDR
// hc_class := class_apeman ;
72227: LD_ADDR_OWVAR 28
72231: PUSH
72232: LD_INT 12
72234: ST_TO_ADDR
// hc_gallery :=  ;
72235: LD_ADDR_OWVAR 33
72239: PUSH
72240: LD_STRING 
72242: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72243: LD_ADDR_OWVAR 35
72247: PUSH
72248: LD_VAR 0 1
72252: NEG
72253: PPUSH
72254: LD_VAR 0 1
72258: PPUSH
72259: CALL_OW 12
72263: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72264: LD_ADDR_OWVAR 31
72268: PUSH
72269: LD_INT 0
72271: PPUSH
72272: LD_INT 3
72274: PPUSH
72275: CALL_OW 12
72279: PUSH
72280: LD_INT 0
72282: PPUSH
72283: LD_INT 3
72285: PPUSH
72286: CALL_OW 12
72290: PUSH
72291: LD_INT 0
72293: PUSH
72294: LD_INT 0
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: ST_TO_ADDR
// end ;
72303: LD_VAR 0 2
72307: RET
// export function PrepareTiger ( agressivity ) ; begin
72308: LD_INT 0
72310: PPUSH
// uc_side := 0 ;
72311: LD_ADDR_OWVAR 20
72315: PUSH
72316: LD_INT 0
72318: ST_TO_ADDR
// uc_nation := 0 ;
72319: LD_ADDR_OWVAR 21
72323: PUSH
72324: LD_INT 0
72326: ST_TO_ADDR
// hc_class := class_tiger ;
72327: LD_ADDR_OWVAR 28
72331: PUSH
72332: LD_INT 14
72334: ST_TO_ADDR
// hc_gallery :=  ;
72335: LD_ADDR_OWVAR 33
72339: PUSH
72340: LD_STRING 
72342: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72343: LD_ADDR_OWVAR 35
72347: PUSH
72348: LD_VAR 0 1
72352: NEG
72353: PPUSH
72354: LD_VAR 0 1
72358: PPUSH
72359: CALL_OW 12
72363: ST_TO_ADDR
// end ;
72364: LD_VAR 0 2
72368: RET
// export function PrepareEnchidna ( ) ; begin
72369: LD_INT 0
72371: PPUSH
// uc_side := 0 ;
72372: LD_ADDR_OWVAR 20
72376: PUSH
72377: LD_INT 0
72379: ST_TO_ADDR
// uc_nation := 0 ;
72380: LD_ADDR_OWVAR 21
72384: PUSH
72385: LD_INT 0
72387: ST_TO_ADDR
// hc_class := class_baggie ;
72388: LD_ADDR_OWVAR 28
72392: PUSH
72393: LD_INT 13
72395: ST_TO_ADDR
// hc_gallery :=  ;
72396: LD_ADDR_OWVAR 33
72400: PUSH
72401: LD_STRING 
72403: ST_TO_ADDR
// end ;
72404: LD_VAR 0 1
72408: RET
// export function PrepareFrog ( ) ; begin
72409: LD_INT 0
72411: PPUSH
// uc_side := 0 ;
72412: LD_ADDR_OWVAR 20
72416: PUSH
72417: LD_INT 0
72419: ST_TO_ADDR
// uc_nation := 0 ;
72420: LD_ADDR_OWVAR 21
72424: PUSH
72425: LD_INT 0
72427: ST_TO_ADDR
// hc_class := class_frog ;
72428: LD_ADDR_OWVAR 28
72432: PUSH
72433: LD_INT 19
72435: ST_TO_ADDR
// hc_gallery :=  ;
72436: LD_ADDR_OWVAR 33
72440: PUSH
72441: LD_STRING 
72443: ST_TO_ADDR
// end ;
72444: LD_VAR 0 1
72448: RET
// export function PrepareFish ( ) ; begin
72449: LD_INT 0
72451: PPUSH
// uc_side := 0 ;
72452: LD_ADDR_OWVAR 20
72456: PUSH
72457: LD_INT 0
72459: ST_TO_ADDR
// uc_nation := 0 ;
72460: LD_ADDR_OWVAR 21
72464: PUSH
72465: LD_INT 0
72467: ST_TO_ADDR
// hc_class := class_fish ;
72468: LD_ADDR_OWVAR 28
72472: PUSH
72473: LD_INT 20
72475: ST_TO_ADDR
// hc_gallery :=  ;
72476: LD_ADDR_OWVAR 33
72480: PUSH
72481: LD_STRING 
72483: ST_TO_ADDR
// end ;
72484: LD_VAR 0 1
72488: RET
// export function PrepareBird ( ) ; begin
72489: LD_INT 0
72491: PPUSH
// uc_side := 0 ;
72492: LD_ADDR_OWVAR 20
72496: PUSH
72497: LD_INT 0
72499: ST_TO_ADDR
// uc_nation := 0 ;
72500: LD_ADDR_OWVAR 21
72504: PUSH
72505: LD_INT 0
72507: ST_TO_ADDR
// hc_class := class_phororhacos ;
72508: LD_ADDR_OWVAR 28
72512: PUSH
72513: LD_INT 18
72515: ST_TO_ADDR
// hc_gallery :=  ;
72516: LD_ADDR_OWVAR 33
72520: PUSH
72521: LD_STRING 
72523: ST_TO_ADDR
// end ;
72524: LD_VAR 0 1
72528: RET
// export function PrepareHorse ( ) ; begin
72529: LD_INT 0
72531: PPUSH
// uc_side := 0 ;
72532: LD_ADDR_OWVAR 20
72536: PUSH
72537: LD_INT 0
72539: ST_TO_ADDR
// uc_nation := 0 ;
72540: LD_ADDR_OWVAR 21
72544: PUSH
72545: LD_INT 0
72547: ST_TO_ADDR
// hc_class := class_horse ;
72548: LD_ADDR_OWVAR 28
72552: PUSH
72553: LD_INT 21
72555: ST_TO_ADDR
// hc_gallery :=  ;
72556: LD_ADDR_OWVAR 33
72560: PUSH
72561: LD_STRING 
72563: ST_TO_ADDR
// end ;
72564: LD_VAR 0 1
72568: RET
// export function PrepareMastodont ( ) ; begin
72569: LD_INT 0
72571: PPUSH
// uc_side := 0 ;
72572: LD_ADDR_OWVAR 20
72576: PUSH
72577: LD_INT 0
72579: ST_TO_ADDR
// uc_nation := 0 ;
72580: LD_ADDR_OWVAR 21
72584: PUSH
72585: LD_INT 0
72587: ST_TO_ADDR
// vc_chassis := class_mastodont ;
72588: LD_ADDR_OWVAR 37
72592: PUSH
72593: LD_INT 31
72595: ST_TO_ADDR
// vc_control := control_rider ;
72596: LD_ADDR_OWVAR 38
72600: PUSH
72601: LD_INT 4
72603: ST_TO_ADDR
// end ;
72604: LD_VAR 0 1
72608: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72609: LD_INT 0
72611: PPUSH
72612: PPUSH
72613: PPUSH
// uc_side = 0 ;
72614: LD_ADDR_OWVAR 20
72618: PUSH
72619: LD_INT 0
72621: ST_TO_ADDR
// uc_nation = 0 ;
72622: LD_ADDR_OWVAR 21
72626: PUSH
72627: LD_INT 0
72629: ST_TO_ADDR
// InitHc_All ( ) ;
72630: CALL_OW 584
// InitVc ;
72634: CALL_OW 20
// if mastodonts then
72638: LD_VAR 0 6
72642: IFFALSE 72709
// for i = 1 to mastodonts do
72644: LD_ADDR_VAR 0 11
72648: PUSH
72649: DOUBLE
72650: LD_INT 1
72652: DEC
72653: ST_TO_ADDR
72654: LD_VAR 0 6
72658: PUSH
72659: FOR_TO
72660: IFFALSE 72707
// begin vc_chassis := 31 ;
72662: LD_ADDR_OWVAR 37
72666: PUSH
72667: LD_INT 31
72669: ST_TO_ADDR
// vc_control := control_rider ;
72670: LD_ADDR_OWVAR 38
72674: PUSH
72675: LD_INT 4
72677: ST_TO_ADDR
// animal := CreateVehicle ;
72678: LD_ADDR_VAR 0 12
72682: PUSH
72683: CALL_OW 45
72687: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72688: LD_VAR 0 12
72692: PPUSH
72693: LD_VAR 0 8
72697: PPUSH
72698: LD_INT 0
72700: PPUSH
72701: CALL 74844 0 3
// end ;
72705: GO 72659
72707: POP
72708: POP
// if horses then
72709: LD_VAR 0 5
72713: IFFALSE 72780
// for i = 1 to horses do
72715: LD_ADDR_VAR 0 11
72719: PUSH
72720: DOUBLE
72721: LD_INT 1
72723: DEC
72724: ST_TO_ADDR
72725: LD_VAR 0 5
72729: PUSH
72730: FOR_TO
72731: IFFALSE 72778
// begin hc_class := 21 ;
72733: LD_ADDR_OWVAR 28
72737: PUSH
72738: LD_INT 21
72740: ST_TO_ADDR
// hc_gallery :=  ;
72741: LD_ADDR_OWVAR 33
72745: PUSH
72746: LD_STRING 
72748: ST_TO_ADDR
// animal := CreateHuman ;
72749: LD_ADDR_VAR 0 12
72753: PUSH
72754: CALL_OW 44
72758: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72759: LD_VAR 0 12
72763: PPUSH
72764: LD_VAR 0 8
72768: PPUSH
72769: LD_INT 0
72771: PPUSH
72772: CALL 74844 0 3
// end ;
72776: GO 72730
72778: POP
72779: POP
// if birds then
72780: LD_VAR 0 1
72784: IFFALSE 72851
// for i = 1 to birds do
72786: LD_ADDR_VAR 0 11
72790: PUSH
72791: DOUBLE
72792: LD_INT 1
72794: DEC
72795: ST_TO_ADDR
72796: LD_VAR 0 1
72800: PUSH
72801: FOR_TO
72802: IFFALSE 72849
// begin hc_class = 18 ;
72804: LD_ADDR_OWVAR 28
72808: PUSH
72809: LD_INT 18
72811: ST_TO_ADDR
// hc_gallery =  ;
72812: LD_ADDR_OWVAR 33
72816: PUSH
72817: LD_STRING 
72819: ST_TO_ADDR
// animal := CreateHuman ;
72820: LD_ADDR_VAR 0 12
72824: PUSH
72825: CALL_OW 44
72829: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72830: LD_VAR 0 12
72834: PPUSH
72835: LD_VAR 0 8
72839: PPUSH
72840: LD_INT 0
72842: PPUSH
72843: CALL 74844 0 3
// end ;
72847: GO 72801
72849: POP
72850: POP
// if tigers then
72851: LD_VAR 0 2
72855: IFFALSE 72939
// for i = 1 to tigers do
72857: LD_ADDR_VAR 0 11
72861: PUSH
72862: DOUBLE
72863: LD_INT 1
72865: DEC
72866: ST_TO_ADDR
72867: LD_VAR 0 2
72871: PUSH
72872: FOR_TO
72873: IFFALSE 72937
// begin hc_class = class_tiger ;
72875: LD_ADDR_OWVAR 28
72879: PUSH
72880: LD_INT 14
72882: ST_TO_ADDR
// hc_gallery =  ;
72883: LD_ADDR_OWVAR 33
72887: PUSH
72888: LD_STRING 
72890: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72891: LD_ADDR_OWVAR 35
72895: PUSH
72896: LD_INT 7
72898: NEG
72899: PPUSH
72900: LD_INT 7
72902: PPUSH
72903: CALL_OW 12
72907: ST_TO_ADDR
// animal := CreateHuman ;
72908: LD_ADDR_VAR 0 12
72912: PUSH
72913: CALL_OW 44
72917: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72918: LD_VAR 0 12
72922: PPUSH
72923: LD_VAR 0 8
72927: PPUSH
72928: LD_INT 0
72930: PPUSH
72931: CALL 74844 0 3
// end ;
72935: GO 72872
72937: POP
72938: POP
// if apemans then
72939: LD_VAR 0 3
72943: IFFALSE 73066
// for i = 1 to apemans do
72945: LD_ADDR_VAR 0 11
72949: PUSH
72950: DOUBLE
72951: LD_INT 1
72953: DEC
72954: ST_TO_ADDR
72955: LD_VAR 0 3
72959: PUSH
72960: FOR_TO
72961: IFFALSE 73064
// begin hc_class = class_apeman ;
72963: LD_ADDR_OWVAR 28
72967: PUSH
72968: LD_INT 12
72970: ST_TO_ADDR
// hc_gallery =  ;
72971: LD_ADDR_OWVAR 33
72975: PUSH
72976: LD_STRING 
72978: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72979: LD_ADDR_OWVAR 35
72983: PUSH
72984: LD_INT 2
72986: NEG
72987: PPUSH
72988: LD_INT 2
72990: PPUSH
72991: CALL_OW 12
72995: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72996: LD_ADDR_OWVAR 31
73000: PUSH
73001: LD_INT 1
73003: PPUSH
73004: LD_INT 3
73006: PPUSH
73007: CALL_OW 12
73011: PUSH
73012: LD_INT 1
73014: PPUSH
73015: LD_INT 3
73017: PPUSH
73018: CALL_OW 12
73022: PUSH
73023: LD_INT 0
73025: PUSH
73026: LD_INT 0
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: LIST
73033: LIST
73034: ST_TO_ADDR
// animal := CreateHuman ;
73035: LD_ADDR_VAR 0 12
73039: PUSH
73040: CALL_OW 44
73044: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73045: LD_VAR 0 12
73049: PPUSH
73050: LD_VAR 0 8
73054: PPUSH
73055: LD_INT 0
73057: PPUSH
73058: CALL 74844 0 3
// end ;
73062: GO 72960
73064: POP
73065: POP
// if enchidnas then
73066: LD_VAR 0 4
73070: IFFALSE 73137
// for i = 1 to enchidnas do
73072: LD_ADDR_VAR 0 11
73076: PUSH
73077: DOUBLE
73078: LD_INT 1
73080: DEC
73081: ST_TO_ADDR
73082: LD_VAR 0 4
73086: PUSH
73087: FOR_TO
73088: IFFALSE 73135
// begin hc_class = 13 ;
73090: LD_ADDR_OWVAR 28
73094: PUSH
73095: LD_INT 13
73097: ST_TO_ADDR
// hc_gallery =  ;
73098: LD_ADDR_OWVAR 33
73102: PUSH
73103: LD_STRING 
73105: ST_TO_ADDR
// animal := CreateHuman ;
73106: LD_ADDR_VAR 0 12
73110: PUSH
73111: CALL_OW 44
73115: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73116: LD_VAR 0 12
73120: PPUSH
73121: LD_VAR 0 8
73125: PPUSH
73126: LD_INT 0
73128: PPUSH
73129: CALL 74844 0 3
// end ;
73133: GO 73087
73135: POP
73136: POP
// if fishes then
73137: LD_VAR 0 7
73141: IFFALSE 73208
// for i = 1 to fishes do
73143: LD_ADDR_VAR 0 11
73147: PUSH
73148: DOUBLE
73149: LD_INT 1
73151: DEC
73152: ST_TO_ADDR
73153: LD_VAR 0 7
73157: PUSH
73158: FOR_TO
73159: IFFALSE 73206
// begin hc_class = 20 ;
73161: LD_ADDR_OWVAR 28
73165: PUSH
73166: LD_INT 20
73168: ST_TO_ADDR
// hc_gallery =  ;
73169: LD_ADDR_OWVAR 33
73173: PUSH
73174: LD_STRING 
73176: ST_TO_ADDR
// animal := CreateHuman ;
73177: LD_ADDR_VAR 0 12
73181: PUSH
73182: CALL_OW 44
73186: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73187: LD_VAR 0 12
73191: PPUSH
73192: LD_VAR 0 9
73196: PPUSH
73197: LD_INT 0
73199: PPUSH
73200: CALL 74844 0 3
// end ;
73204: GO 73158
73206: POP
73207: POP
// end ;
73208: LD_VAR 0 10
73212: RET
// export function WantHeal ( sci , unit ) ; begin
73213: LD_INT 0
73215: PPUSH
// if GetTaskList ( sci ) > 0 then
73216: LD_VAR 0 1
73220: PPUSH
73221: CALL_OW 437
73225: PUSH
73226: LD_INT 0
73228: GREATER
73229: IFFALSE 73299
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73231: LD_VAR 0 1
73235: PPUSH
73236: CALL_OW 437
73240: PUSH
73241: LD_INT 1
73243: ARRAY
73244: PUSH
73245: LD_INT 1
73247: ARRAY
73248: PUSH
73249: LD_STRING l
73251: EQUAL
73252: PUSH
73253: LD_VAR 0 1
73257: PPUSH
73258: CALL_OW 437
73262: PUSH
73263: LD_INT 1
73265: ARRAY
73266: PUSH
73267: LD_INT 4
73269: ARRAY
73270: PUSH
73271: LD_VAR 0 2
73275: EQUAL
73276: AND
73277: IFFALSE 73289
// result := true else
73279: LD_ADDR_VAR 0 3
73283: PUSH
73284: LD_INT 1
73286: ST_TO_ADDR
73287: GO 73297
// result := false ;
73289: LD_ADDR_VAR 0 3
73293: PUSH
73294: LD_INT 0
73296: ST_TO_ADDR
// end else
73297: GO 73307
// result := false ;
73299: LD_ADDR_VAR 0 3
73303: PUSH
73304: LD_INT 0
73306: ST_TO_ADDR
// end ;
73307: LD_VAR 0 3
73311: RET
// export function HealTarget ( sci ) ; begin
73312: LD_INT 0
73314: PPUSH
// if not sci then
73315: LD_VAR 0 1
73319: NOT
73320: IFFALSE 73324
// exit ;
73322: GO 73389
// result := 0 ;
73324: LD_ADDR_VAR 0 2
73328: PUSH
73329: LD_INT 0
73331: ST_TO_ADDR
// if GetTaskList ( sci ) then
73332: LD_VAR 0 1
73336: PPUSH
73337: CALL_OW 437
73341: IFFALSE 73389
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73343: LD_VAR 0 1
73347: PPUSH
73348: CALL_OW 437
73352: PUSH
73353: LD_INT 1
73355: ARRAY
73356: PUSH
73357: LD_INT 1
73359: ARRAY
73360: PUSH
73361: LD_STRING l
73363: EQUAL
73364: IFFALSE 73389
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73366: LD_ADDR_VAR 0 2
73370: PUSH
73371: LD_VAR 0 1
73375: PPUSH
73376: CALL_OW 437
73380: PUSH
73381: LD_INT 1
73383: ARRAY
73384: PUSH
73385: LD_INT 4
73387: ARRAY
73388: ST_TO_ADDR
// end ;
73389: LD_VAR 0 2
73393: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73394: LD_INT 0
73396: PPUSH
73397: PPUSH
73398: PPUSH
73399: PPUSH
// if not base_units then
73400: LD_VAR 0 1
73404: NOT
73405: IFFALSE 73409
// exit ;
73407: GO 73496
// result := false ;
73409: LD_ADDR_VAR 0 2
73413: PUSH
73414: LD_INT 0
73416: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73417: LD_ADDR_VAR 0 5
73421: PUSH
73422: LD_VAR 0 1
73426: PPUSH
73427: LD_INT 21
73429: PUSH
73430: LD_INT 3
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PPUSH
73437: CALL_OW 72
73441: ST_TO_ADDR
// if not tmp then
73442: LD_VAR 0 5
73446: NOT
73447: IFFALSE 73451
// exit ;
73449: GO 73496
// for i in tmp do
73451: LD_ADDR_VAR 0 3
73455: PUSH
73456: LD_VAR 0 5
73460: PUSH
73461: FOR_IN
73462: IFFALSE 73494
// begin result := EnemyInRange ( i , 22 ) ;
73464: LD_ADDR_VAR 0 2
73468: PUSH
73469: LD_VAR 0 3
73473: PPUSH
73474: LD_INT 22
73476: PPUSH
73477: CALL 71165 0 2
73481: ST_TO_ADDR
// if result then
73482: LD_VAR 0 2
73486: IFFALSE 73492
// exit ;
73488: POP
73489: POP
73490: GO 73496
// end ;
73492: GO 73461
73494: POP
73495: POP
// end ;
73496: LD_VAR 0 2
73500: RET
// export function FilterByTag ( units , tag ) ; begin
73501: LD_INT 0
73503: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73504: LD_ADDR_VAR 0 3
73508: PUSH
73509: LD_VAR 0 1
73513: PPUSH
73514: LD_INT 120
73516: PUSH
73517: LD_VAR 0 2
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: PPUSH
73526: CALL_OW 72
73530: ST_TO_ADDR
// end ;
73531: LD_VAR 0 3
73535: RET
// export function IsDriver ( un ) ; begin
73536: LD_INT 0
73538: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73539: LD_ADDR_VAR 0 2
73543: PUSH
73544: LD_VAR 0 1
73548: PUSH
73549: LD_INT 55
73551: PUSH
73552: EMPTY
73553: LIST
73554: PPUSH
73555: CALL_OW 69
73559: IN
73560: ST_TO_ADDR
// end ;
73561: LD_VAR 0 2
73565: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73566: LD_INT 0
73568: PPUSH
73569: PPUSH
// list := [ ] ;
73570: LD_ADDR_VAR 0 5
73574: PUSH
73575: EMPTY
73576: ST_TO_ADDR
// case d of 0 :
73577: LD_VAR 0 3
73581: PUSH
73582: LD_INT 0
73584: DOUBLE
73585: EQUAL
73586: IFTRUE 73590
73588: GO 73723
73590: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73591: LD_ADDR_VAR 0 5
73595: PUSH
73596: LD_VAR 0 1
73600: PUSH
73601: LD_INT 4
73603: MINUS
73604: PUSH
73605: LD_VAR 0 2
73609: PUSH
73610: LD_INT 4
73612: MINUS
73613: PUSH
73614: LD_INT 2
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: LIST
73621: PUSH
73622: LD_VAR 0 1
73626: PUSH
73627: LD_INT 3
73629: MINUS
73630: PUSH
73631: LD_VAR 0 2
73635: PUSH
73636: LD_INT 1
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: LIST
73643: PUSH
73644: LD_VAR 0 1
73648: PUSH
73649: LD_INT 4
73651: PLUS
73652: PUSH
73653: LD_VAR 0 2
73657: PUSH
73658: LD_INT 4
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: LIST
73665: PUSH
73666: LD_VAR 0 1
73670: PUSH
73671: LD_INT 3
73673: PLUS
73674: PUSH
73675: LD_VAR 0 2
73679: PUSH
73680: LD_INT 3
73682: PLUS
73683: PUSH
73684: LD_INT 5
73686: PUSH
73687: EMPTY
73688: LIST
73689: LIST
73690: LIST
73691: PUSH
73692: LD_VAR 0 1
73696: PUSH
73697: LD_VAR 0 2
73701: PUSH
73702: LD_INT 4
73704: PLUS
73705: PUSH
73706: LD_INT 0
73708: PUSH
73709: EMPTY
73710: LIST
73711: LIST
73712: LIST
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: LIST
73718: LIST
73719: LIST
73720: ST_TO_ADDR
// end ; 1 :
73721: GO 74421
73723: LD_INT 1
73725: DOUBLE
73726: EQUAL
73727: IFTRUE 73731
73729: GO 73864
73731: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73732: LD_ADDR_VAR 0 5
73736: PUSH
73737: LD_VAR 0 1
73741: PUSH
73742: LD_VAR 0 2
73746: PUSH
73747: LD_INT 4
73749: MINUS
73750: PUSH
73751: LD_INT 3
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: LIST
73758: PUSH
73759: LD_VAR 0 1
73763: PUSH
73764: LD_INT 3
73766: MINUS
73767: PUSH
73768: LD_VAR 0 2
73772: PUSH
73773: LD_INT 3
73775: MINUS
73776: PUSH
73777: LD_INT 2
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: LIST
73784: PUSH
73785: LD_VAR 0 1
73789: PUSH
73790: LD_INT 4
73792: MINUS
73793: PUSH
73794: LD_VAR 0 2
73798: PUSH
73799: LD_INT 1
73801: PUSH
73802: EMPTY
73803: LIST
73804: LIST
73805: LIST
73806: PUSH
73807: LD_VAR 0 1
73811: PUSH
73812: LD_VAR 0 2
73816: PUSH
73817: LD_INT 3
73819: PLUS
73820: PUSH
73821: LD_INT 0
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: LIST
73828: PUSH
73829: LD_VAR 0 1
73833: PUSH
73834: LD_INT 4
73836: PLUS
73837: PUSH
73838: LD_VAR 0 2
73842: PUSH
73843: LD_INT 4
73845: PLUS
73846: PUSH
73847: LD_INT 5
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: LIST
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: ST_TO_ADDR
// end ; 2 :
73862: GO 74421
73864: LD_INT 2
73866: DOUBLE
73867: EQUAL
73868: IFTRUE 73872
73870: GO 74001
73872: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73873: LD_ADDR_VAR 0 5
73877: PUSH
73878: LD_VAR 0 1
73882: PUSH
73883: LD_VAR 0 2
73887: PUSH
73888: LD_INT 3
73890: MINUS
73891: PUSH
73892: LD_INT 3
73894: PUSH
73895: EMPTY
73896: LIST
73897: LIST
73898: LIST
73899: PUSH
73900: LD_VAR 0 1
73904: PUSH
73905: LD_INT 4
73907: PLUS
73908: PUSH
73909: LD_VAR 0 2
73913: PUSH
73914: LD_INT 4
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: LIST
73921: PUSH
73922: LD_VAR 0 1
73926: PUSH
73927: LD_VAR 0 2
73931: PUSH
73932: LD_INT 4
73934: PLUS
73935: PUSH
73936: LD_INT 0
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: LIST
73943: PUSH
73944: LD_VAR 0 1
73948: PUSH
73949: LD_INT 3
73951: MINUS
73952: PUSH
73953: LD_VAR 0 2
73957: PUSH
73958: LD_INT 1
73960: PUSH
73961: EMPTY
73962: LIST
73963: LIST
73964: LIST
73965: PUSH
73966: LD_VAR 0 1
73970: PUSH
73971: LD_INT 4
73973: MINUS
73974: PUSH
73975: LD_VAR 0 2
73979: PUSH
73980: LD_INT 4
73982: MINUS
73983: PUSH
73984: LD_INT 2
73986: PUSH
73987: EMPTY
73988: LIST
73989: LIST
73990: LIST
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: ST_TO_ADDR
// end ; 3 :
73999: GO 74421
74001: LD_INT 3
74003: DOUBLE
74004: EQUAL
74005: IFTRUE 74009
74007: GO 74142
74009: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74010: LD_ADDR_VAR 0 5
74014: PUSH
74015: LD_VAR 0 1
74019: PUSH
74020: LD_INT 3
74022: PLUS
74023: PUSH
74024: LD_VAR 0 2
74028: PUSH
74029: LD_INT 4
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: LIST
74036: PUSH
74037: LD_VAR 0 1
74041: PUSH
74042: LD_INT 4
74044: PLUS
74045: PUSH
74046: LD_VAR 0 2
74050: PUSH
74051: LD_INT 4
74053: PLUS
74054: PUSH
74055: LD_INT 5
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: LIST
74062: PUSH
74063: LD_VAR 0 1
74067: PUSH
74068: LD_INT 4
74070: MINUS
74071: PUSH
74072: LD_VAR 0 2
74076: PUSH
74077: LD_INT 1
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: LIST
74084: PUSH
74085: LD_VAR 0 1
74089: PUSH
74090: LD_VAR 0 2
74094: PUSH
74095: LD_INT 4
74097: MINUS
74098: PUSH
74099: LD_INT 3
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: LIST
74106: PUSH
74107: LD_VAR 0 1
74111: PUSH
74112: LD_INT 3
74114: MINUS
74115: PUSH
74116: LD_VAR 0 2
74120: PUSH
74121: LD_INT 3
74123: MINUS
74124: PUSH
74125: LD_INT 2
74127: PUSH
74128: EMPTY
74129: LIST
74130: LIST
74131: LIST
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: ST_TO_ADDR
// end ; 4 :
74140: GO 74421
74142: LD_INT 4
74144: DOUBLE
74145: EQUAL
74146: IFTRUE 74150
74148: GO 74283
74150: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74151: LD_ADDR_VAR 0 5
74155: PUSH
74156: LD_VAR 0 1
74160: PUSH
74161: LD_VAR 0 2
74165: PUSH
74166: LD_INT 4
74168: PLUS
74169: PUSH
74170: LD_INT 0
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: LIST
74177: PUSH
74178: LD_VAR 0 1
74182: PUSH
74183: LD_INT 3
74185: PLUS
74186: PUSH
74187: LD_VAR 0 2
74191: PUSH
74192: LD_INT 3
74194: PLUS
74195: PUSH
74196: LD_INT 5
74198: PUSH
74199: EMPTY
74200: LIST
74201: LIST
74202: LIST
74203: PUSH
74204: LD_VAR 0 1
74208: PUSH
74209: LD_INT 4
74211: PLUS
74212: PUSH
74213: LD_VAR 0 2
74217: PUSH
74218: LD_INT 4
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: LIST
74225: PUSH
74226: LD_VAR 0 1
74230: PUSH
74231: LD_VAR 0 2
74235: PUSH
74236: LD_INT 3
74238: MINUS
74239: PUSH
74240: LD_INT 3
74242: PUSH
74243: EMPTY
74244: LIST
74245: LIST
74246: LIST
74247: PUSH
74248: LD_VAR 0 1
74252: PUSH
74253: LD_INT 4
74255: MINUS
74256: PUSH
74257: LD_VAR 0 2
74261: PUSH
74262: LD_INT 4
74264: MINUS
74265: PUSH
74266: LD_INT 2
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: LIST
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: ST_TO_ADDR
// end ; 5 :
74281: GO 74421
74283: LD_INT 5
74285: DOUBLE
74286: EQUAL
74287: IFTRUE 74291
74289: GO 74420
74291: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74292: LD_ADDR_VAR 0 5
74296: PUSH
74297: LD_VAR 0 1
74301: PUSH
74302: LD_INT 4
74304: MINUS
74305: PUSH
74306: LD_VAR 0 2
74310: PUSH
74311: LD_INT 1
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: LIST
74318: PUSH
74319: LD_VAR 0 1
74323: PUSH
74324: LD_VAR 0 2
74328: PUSH
74329: LD_INT 4
74331: MINUS
74332: PUSH
74333: LD_INT 3
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: LIST
74340: PUSH
74341: LD_VAR 0 1
74345: PUSH
74346: LD_INT 4
74348: PLUS
74349: PUSH
74350: LD_VAR 0 2
74354: PUSH
74355: LD_INT 4
74357: PLUS
74358: PUSH
74359: LD_INT 5
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: LIST
74366: PUSH
74367: LD_VAR 0 1
74371: PUSH
74372: LD_INT 3
74374: PLUS
74375: PUSH
74376: LD_VAR 0 2
74380: PUSH
74381: LD_INT 4
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: LIST
74388: PUSH
74389: LD_VAR 0 1
74393: PUSH
74394: LD_VAR 0 2
74398: PUSH
74399: LD_INT 3
74401: PLUS
74402: PUSH
74403: LD_INT 0
74405: PUSH
74406: EMPTY
74407: LIST
74408: LIST
74409: LIST
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: ST_TO_ADDR
// end ; end ;
74418: GO 74421
74420: POP
// result := list ;
74421: LD_ADDR_VAR 0 4
74425: PUSH
74426: LD_VAR 0 5
74430: ST_TO_ADDR
// end ;
74431: LD_VAR 0 4
74435: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74436: LD_INT 0
74438: PPUSH
74439: PPUSH
74440: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74441: LD_VAR 0 1
74445: NOT
74446: PUSH
74447: LD_VAR 0 2
74451: PUSH
74452: LD_INT 1
74454: PUSH
74455: LD_INT 2
74457: PUSH
74458: LD_INT 3
74460: PUSH
74461: LD_INT 4
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: IN
74470: NOT
74471: OR
74472: IFFALSE 74476
// exit ;
74474: GO 74568
// tmp := [ ] ;
74476: LD_ADDR_VAR 0 5
74480: PUSH
74481: EMPTY
74482: ST_TO_ADDR
// for i in units do
74483: LD_ADDR_VAR 0 4
74487: PUSH
74488: LD_VAR 0 1
74492: PUSH
74493: FOR_IN
74494: IFFALSE 74537
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74496: LD_ADDR_VAR 0 5
74500: PUSH
74501: LD_VAR 0 5
74505: PPUSH
74506: LD_VAR 0 5
74510: PUSH
74511: LD_INT 1
74513: PLUS
74514: PPUSH
74515: LD_VAR 0 4
74519: PPUSH
74520: LD_VAR 0 2
74524: PPUSH
74525: CALL_OW 259
74529: PPUSH
74530: CALL_OW 2
74534: ST_TO_ADDR
74535: GO 74493
74537: POP
74538: POP
// if not tmp then
74539: LD_VAR 0 5
74543: NOT
74544: IFFALSE 74548
// exit ;
74546: GO 74568
// result := SortListByListDesc ( units , tmp ) ;
74548: LD_ADDR_VAR 0 3
74552: PUSH
74553: LD_VAR 0 1
74557: PPUSH
74558: LD_VAR 0 5
74562: PPUSH
74563: CALL_OW 77
74567: ST_TO_ADDR
// end ;
74568: LD_VAR 0 3
74572: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74573: LD_INT 0
74575: PPUSH
74576: PPUSH
74577: PPUSH
// result := false ;
74578: LD_ADDR_VAR 0 3
74582: PUSH
74583: LD_INT 0
74585: ST_TO_ADDR
// x := GetX ( building ) ;
74586: LD_ADDR_VAR 0 4
74590: PUSH
74591: LD_VAR 0 2
74595: PPUSH
74596: CALL_OW 250
74600: ST_TO_ADDR
// y := GetY ( building ) ;
74601: LD_ADDR_VAR 0 5
74605: PUSH
74606: LD_VAR 0 2
74610: PPUSH
74611: CALL_OW 251
74615: ST_TO_ADDR
// if not building or not x or not y then
74616: LD_VAR 0 2
74620: NOT
74621: PUSH
74622: LD_VAR 0 4
74626: NOT
74627: OR
74628: PUSH
74629: LD_VAR 0 5
74633: NOT
74634: OR
74635: IFFALSE 74639
// exit ;
74637: GO 74731
// if GetTaskList ( unit ) then
74639: LD_VAR 0 1
74643: PPUSH
74644: CALL_OW 437
74648: IFFALSE 74731
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74650: LD_STRING e
74652: PUSH
74653: LD_VAR 0 1
74657: PPUSH
74658: CALL_OW 437
74662: PUSH
74663: LD_INT 1
74665: ARRAY
74666: PUSH
74667: LD_INT 1
74669: ARRAY
74670: EQUAL
74671: PUSH
74672: LD_VAR 0 4
74676: PUSH
74677: LD_VAR 0 1
74681: PPUSH
74682: CALL_OW 437
74686: PUSH
74687: LD_INT 1
74689: ARRAY
74690: PUSH
74691: LD_INT 2
74693: ARRAY
74694: EQUAL
74695: AND
74696: PUSH
74697: LD_VAR 0 5
74701: PUSH
74702: LD_VAR 0 1
74706: PPUSH
74707: CALL_OW 437
74711: PUSH
74712: LD_INT 1
74714: ARRAY
74715: PUSH
74716: LD_INT 3
74718: ARRAY
74719: EQUAL
74720: AND
74721: IFFALSE 74731
// result := true end ;
74723: LD_ADDR_VAR 0 3
74727: PUSH
74728: LD_INT 1
74730: ST_TO_ADDR
// end ;
74731: LD_VAR 0 3
74735: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74736: LD_INT 0
74738: PPUSH
// result := false ;
74739: LD_ADDR_VAR 0 4
74743: PUSH
74744: LD_INT 0
74746: ST_TO_ADDR
// if GetTaskList ( unit ) then
74747: LD_VAR 0 1
74751: PPUSH
74752: CALL_OW 437
74756: IFFALSE 74839
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74758: LD_STRING M
74760: PUSH
74761: LD_VAR 0 1
74765: PPUSH
74766: CALL_OW 437
74770: PUSH
74771: LD_INT 1
74773: ARRAY
74774: PUSH
74775: LD_INT 1
74777: ARRAY
74778: EQUAL
74779: PUSH
74780: LD_VAR 0 2
74784: PUSH
74785: LD_VAR 0 1
74789: PPUSH
74790: CALL_OW 437
74794: PUSH
74795: LD_INT 1
74797: ARRAY
74798: PUSH
74799: LD_INT 2
74801: ARRAY
74802: EQUAL
74803: AND
74804: PUSH
74805: LD_VAR 0 3
74809: PUSH
74810: LD_VAR 0 1
74814: PPUSH
74815: CALL_OW 437
74819: PUSH
74820: LD_INT 1
74822: ARRAY
74823: PUSH
74824: LD_INT 3
74826: ARRAY
74827: EQUAL
74828: AND
74829: IFFALSE 74839
// result := true ;
74831: LD_ADDR_VAR 0 4
74835: PUSH
74836: LD_INT 1
74838: ST_TO_ADDR
// end ; end ;
74839: LD_VAR 0 4
74843: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74844: LD_INT 0
74846: PPUSH
74847: PPUSH
74848: PPUSH
74849: PPUSH
// if not unit or not area then
74850: LD_VAR 0 1
74854: NOT
74855: PUSH
74856: LD_VAR 0 2
74860: NOT
74861: OR
74862: IFFALSE 74866
// exit ;
74864: GO 75030
// tmp := AreaToList ( area , i ) ;
74866: LD_ADDR_VAR 0 6
74870: PUSH
74871: LD_VAR 0 2
74875: PPUSH
74876: LD_VAR 0 5
74880: PPUSH
74881: CALL_OW 517
74885: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74886: LD_ADDR_VAR 0 5
74890: PUSH
74891: DOUBLE
74892: LD_INT 1
74894: DEC
74895: ST_TO_ADDR
74896: LD_VAR 0 6
74900: PUSH
74901: LD_INT 1
74903: ARRAY
74904: PUSH
74905: FOR_TO
74906: IFFALSE 75028
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74908: LD_ADDR_VAR 0 7
74912: PUSH
74913: LD_VAR 0 6
74917: PUSH
74918: LD_INT 1
74920: ARRAY
74921: PUSH
74922: LD_VAR 0 5
74926: ARRAY
74927: PUSH
74928: LD_VAR 0 6
74932: PUSH
74933: LD_INT 2
74935: ARRAY
74936: PUSH
74937: LD_VAR 0 5
74941: ARRAY
74942: PUSH
74943: EMPTY
74944: LIST
74945: LIST
74946: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74947: LD_VAR 0 7
74951: PUSH
74952: LD_INT 1
74954: ARRAY
74955: PPUSH
74956: LD_VAR 0 7
74960: PUSH
74961: LD_INT 2
74963: ARRAY
74964: PPUSH
74965: CALL_OW 428
74969: PUSH
74970: LD_INT 0
74972: EQUAL
74973: IFFALSE 75026
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74975: LD_VAR 0 1
74979: PPUSH
74980: LD_VAR 0 7
74984: PUSH
74985: LD_INT 1
74987: ARRAY
74988: PPUSH
74989: LD_VAR 0 7
74993: PUSH
74994: LD_INT 2
74996: ARRAY
74997: PPUSH
74998: LD_VAR 0 3
75002: PPUSH
75003: CALL_OW 48
// result := IsPlaced ( unit ) ;
75007: LD_ADDR_VAR 0 4
75011: PUSH
75012: LD_VAR 0 1
75016: PPUSH
75017: CALL_OW 305
75021: ST_TO_ADDR
// exit ;
75022: POP
75023: POP
75024: GO 75030
// end ; end ;
75026: GO 74905
75028: POP
75029: POP
// end ;
75030: LD_VAR 0 4
75034: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75035: LD_INT 0
75037: PPUSH
75038: PPUSH
75039: PPUSH
// if not side or side > 8 then
75040: LD_VAR 0 1
75044: NOT
75045: PUSH
75046: LD_VAR 0 1
75050: PUSH
75051: LD_INT 8
75053: GREATER
75054: OR
75055: IFFALSE 75059
// exit ;
75057: GO 75246
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75059: LD_ADDR_VAR 0 4
75063: PUSH
75064: LD_INT 22
75066: PUSH
75067: LD_VAR 0 1
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: PUSH
75076: LD_INT 21
75078: PUSH
75079: LD_INT 3
75081: PUSH
75082: EMPTY
75083: LIST
75084: LIST
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: PPUSH
75090: CALL_OW 69
75094: ST_TO_ADDR
// if not tmp then
75095: LD_VAR 0 4
75099: NOT
75100: IFFALSE 75104
// exit ;
75102: GO 75246
// enable_addtolog := true ;
75104: LD_ADDR_OWVAR 81
75108: PUSH
75109: LD_INT 1
75111: ST_TO_ADDR
// AddToLog ( [ ) ;
75112: LD_STRING [
75114: PPUSH
75115: CALL_OW 561
// for i in tmp do
75119: LD_ADDR_VAR 0 3
75123: PUSH
75124: LD_VAR 0 4
75128: PUSH
75129: FOR_IN
75130: IFFALSE 75237
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75132: LD_STRING [
75134: PUSH
75135: LD_VAR 0 3
75139: PPUSH
75140: CALL_OW 266
75144: STR
75145: PUSH
75146: LD_STRING , 
75148: STR
75149: PUSH
75150: LD_VAR 0 3
75154: PPUSH
75155: CALL_OW 250
75159: STR
75160: PUSH
75161: LD_STRING , 
75163: STR
75164: PUSH
75165: LD_VAR 0 3
75169: PPUSH
75170: CALL_OW 251
75174: STR
75175: PUSH
75176: LD_STRING , 
75178: STR
75179: PUSH
75180: LD_VAR 0 3
75184: PPUSH
75185: CALL_OW 254
75189: STR
75190: PUSH
75191: LD_STRING , 
75193: STR
75194: PUSH
75195: LD_VAR 0 3
75199: PPUSH
75200: LD_INT 1
75202: PPUSH
75203: CALL_OW 268
75207: STR
75208: PUSH
75209: LD_STRING , 
75211: STR
75212: PUSH
75213: LD_VAR 0 3
75217: PPUSH
75218: LD_INT 2
75220: PPUSH
75221: CALL_OW 268
75225: STR
75226: PUSH
75227: LD_STRING ],
75229: STR
75230: PPUSH
75231: CALL_OW 561
// end ;
75235: GO 75129
75237: POP
75238: POP
// AddToLog ( ]; ) ;
75239: LD_STRING ];
75241: PPUSH
75242: CALL_OW 561
// end ;
75246: LD_VAR 0 2
75250: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75251: LD_INT 0
75253: PPUSH
75254: PPUSH
75255: PPUSH
75256: PPUSH
75257: PPUSH
// if not area or not rate or not max then
75258: LD_VAR 0 1
75262: NOT
75263: PUSH
75264: LD_VAR 0 2
75268: NOT
75269: OR
75270: PUSH
75271: LD_VAR 0 4
75275: NOT
75276: OR
75277: IFFALSE 75281
// exit ;
75279: GO 75470
// while 1 do
75281: LD_INT 1
75283: IFFALSE 75470
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75285: LD_ADDR_VAR 0 9
75289: PUSH
75290: LD_VAR 0 1
75294: PPUSH
75295: LD_INT 1
75297: PPUSH
75298: CALL_OW 287
75302: PUSH
75303: LD_INT 10
75305: MUL
75306: ST_TO_ADDR
// r := rate / 10 ;
75307: LD_ADDR_VAR 0 7
75311: PUSH
75312: LD_VAR 0 2
75316: PUSH
75317: LD_INT 10
75319: DIVREAL
75320: ST_TO_ADDR
// time := 1 1$00 ;
75321: LD_ADDR_VAR 0 8
75325: PUSH
75326: LD_INT 2100
75328: ST_TO_ADDR
// if amount < min then
75329: LD_VAR 0 9
75333: PUSH
75334: LD_VAR 0 3
75338: LESS
75339: IFFALSE 75357
// r := r * 2 else
75341: LD_ADDR_VAR 0 7
75345: PUSH
75346: LD_VAR 0 7
75350: PUSH
75351: LD_INT 2
75353: MUL
75354: ST_TO_ADDR
75355: GO 75383
// if amount > max then
75357: LD_VAR 0 9
75361: PUSH
75362: LD_VAR 0 4
75366: GREATER
75367: IFFALSE 75383
// r := r / 2 ;
75369: LD_ADDR_VAR 0 7
75373: PUSH
75374: LD_VAR 0 7
75378: PUSH
75379: LD_INT 2
75381: DIVREAL
75382: ST_TO_ADDR
// time := time / r ;
75383: LD_ADDR_VAR 0 8
75387: PUSH
75388: LD_VAR 0 8
75392: PUSH
75393: LD_VAR 0 7
75397: DIVREAL
75398: ST_TO_ADDR
// if time < 0 then
75399: LD_VAR 0 8
75403: PUSH
75404: LD_INT 0
75406: LESS
75407: IFFALSE 75424
// time := time * - 1 ;
75409: LD_ADDR_VAR 0 8
75413: PUSH
75414: LD_VAR 0 8
75418: PUSH
75419: LD_INT 1
75421: NEG
75422: MUL
75423: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75424: LD_VAR 0 8
75428: PUSH
75429: LD_INT 35
75431: PPUSH
75432: LD_INT 875
75434: PPUSH
75435: CALL_OW 12
75439: PLUS
75440: PPUSH
75441: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75445: LD_INT 1
75447: PPUSH
75448: LD_INT 5
75450: PPUSH
75451: CALL_OW 12
75455: PPUSH
75456: LD_VAR 0 1
75460: PPUSH
75461: LD_INT 1
75463: PPUSH
75464: CALL_OW 55
// end ;
75468: GO 75281
// end ;
75470: LD_VAR 0 5
75474: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75475: LD_INT 0
75477: PPUSH
75478: PPUSH
75479: PPUSH
75480: PPUSH
75481: PPUSH
75482: PPUSH
75483: PPUSH
75484: PPUSH
// if not turrets or not factories then
75485: LD_VAR 0 1
75489: NOT
75490: PUSH
75491: LD_VAR 0 2
75495: NOT
75496: OR
75497: IFFALSE 75501
// exit ;
75499: GO 75808
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75501: LD_ADDR_VAR 0 10
75505: PUSH
75506: LD_INT 5
75508: PUSH
75509: LD_INT 6
75511: PUSH
75512: EMPTY
75513: LIST
75514: LIST
75515: PUSH
75516: LD_INT 2
75518: PUSH
75519: LD_INT 4
75521: PUSH
75522: EMPTY
75523: LIST
75524: LIST
75525: PUSH
75526: LD_INT 3
75528: PUSH
75529: LD_INT 5
75531: PUSH
75532: EMPTY
75533: LIST
75534: LIST
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: LIST
75540: PUSH
75541: LD_INT 24
75543: PUSH
75544: LD_INT 25
75546: PUSH
75547: EMPTY
75548: LIST
75549: LIST
75550: PUSH
75551: LD_INT 23
75553: PUSH
75554: LD_INT 27
75556: PUSH
75557: EMPTY
75558: LIST
75559: LIST
75560: PUSH
75561: EMPTY
75562: LIST
75563: LIST
75564: PUSH
75565: LD_INT 42
75567: PUSH
75568: LD_INT 43
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: PUSH
75575: LD_INT 44
75577: PUSH
75578: LD_INT 46
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: PUSH
75585: LD_INT 45
75587: PUSH
75588: LD_INT 47
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: LIST
75599: PUSH
75600: EMPTY
75601: LIST
75602: LIST
75603: LIST
75604: ST_TO_ADDR
// result := [ ] ;
75605: LD_ADDR_VAR 0 3
75609: PUSH
75610: EMPTY
75611: ST_TO_ADDR
// for i in turrets do
75612: LD_ADDR_VAR 0 4
75616: PUSH
75617: LD_VAR 0 1
75621: PUSH
75622: FOR_IN
75623: IFFALSE 75806
// begin nat := GetNation ( i ) ;
75625: LD_ADDR_VAR 0 7
75629: PUSH
75630: LD_VAR 0 4
75634: PPUSH
75635: CALL_OW 248
75639: ST_TO_ADDR
// weapon := 0 ;
75640: LD_ADDR_VAR 0 8
75644: PUSH
75645: LD_INT 0
75647: ST_TO_ADDR
// if not nat then
75648: LD_VAR 0 7
75652: NOT
75653: IFFALSE 75657
// continue ;
75655: GO 75622
// for j in list [ nat ] do
75657: LD_ADDR_VAR 0 5
75661: PUSH
75662: LD_VAR 0 10
75666: PUSH
75667: LD_VAR 0 7
75671: ARRAY
75672: PUSH
75673: FOR_IN
75674: IFFALSE 75715
// if GetBWeapon ( i ) = j [ 1 ] then
75676: LD_VAR 0 4
75680: PPUSH
75681: CALL_OW 269
75685: PUSH
75686: LD_VAR 0 5
75690: PUSH
75691: LD_INT 1
75693: ARRAY
75694: EQUAL
75695: IFFALSE 75713
// begin weapon := j [ 2 ] ;
75697: LD_ADDR_VAR 0 8
75701: PUSH
75702: LD_VAR 0 5
75706: PUSH
75707: LD_INT 2
75709: ARRAY
75710: ST_TO_ADDR
// break ;
75711: GO 75715
// end ;
75713: GO 75673
75715: POP
75716: POP
// if not weapon then
75717: LD_VAR 0 8
75721: NOT
75722: IFFALSE 75726
// continue ;
75724: GO 75622
// for k in factories do
75726: LD_ADDR_VAR 0 6
75730: PUSH
75731: LD_VAR 0 2
75735: PUSH
75736: FOR_IN
75737: IFFALSE 75802
// begin weapons := AvailableWeaponList ( k ) ;
75739: LD_ADDR_VAR 0 9
75743: PUSH
75744: LD_VAR 0 6
75748: PPUSH
75749: CALL_OW 478
75753: ST_TO_ADDR
// if not weapons then
75754: LD_VAR 0 9
75758: NOT
75759: IFFALSE 75763
// continue ;
75761: GO 75736
// if weapon in weapons then
75763: LD_VAR 0 8
75767: PUSH
75768: LD_VAR 0 9
75772: IN
75773: IFFALSE 75800
// begin result := [ i , weapon ] ;
75775: LD_ADDR_VAR 0 3
75779: PUSH
75780: LD_VAR 0 4
75784: PUSH
75785: LD_VAR 0 8
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: ST_TO_ADDR
// exit ;
75794: POP
75795: POP
75796: POP
75797: POP
75798: GO 75808
// end ; end ;
75800: GO 75736
75802: POP
75803: POP
// end ;
75804: GO 75622
75806: POP
75807: POP
// end ;
75808: LD_VAR 0 3
75812: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75813: LD_INT 0
75815: PPUSH
// if not side or side > 8 then
75816: LD_VAR 0 3
75820: NOT
75821: PUSH
75822: LD_VAR 0 3
75826: PUSH
75827: LD_INT 8
75829: GREATER
75830: OR
75831: IFFALSE 75835
// exit ;
75833: GO 75894
// if not range then
75835: LD_VAR 0 4
75839: NOT
75840: IFFALSE 75851
// range := - 12 ;
75842: LD_ADDR_VAR 0 4
75846: PUSH
75847: LD_INT 12
75849: NEG
75850: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75851: LD_VAR 0 1
75855: PPUSH
75856: LD_VAR 0 2
75860: PPUSH
75861: LD_VAR 0 3
75865: PPUSH
75866: LD_VAR 0 4
75870: PPUSH
75871: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75875: LD_VAR 0 1
75879: PPUSH
75880: LD_VAR 0 2
75884: PPUSH
75885: LD_VAR 0 3
75889: PPUSH
75890: CALL_OW 331
// end ;
75894: LD_VAR 0 5
75898: RET
// export function Video ( mode ) ; begin
75899: LD_INT 0
75901: PPUSH
// ingame_video = mode ;
75902: LD_ADDR_OWVAR 52
75906: PUSH
75907: LD_VAR 0 1
75911: ST_TO_ADDR
// interface_hidden = mode ;
75912: LD_ADDR_OWVAR 54
75916: PUSH
75917: LD_VAR 0 1
75921: ST_TO_ADDR
// end ;
75922: LD_VAR 0 2
75926: RET
// export function Join ( array , element ) ; begin
75927: LD_INT 0
75929: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75930: LD_ADDR_VAR 0 3
75934: PUSH
75935: LD_VAR 0 1
75939: PPUSH
75940: LD_VAR 0 1
75944: PUSH
75945: LD_INT 1
75947: PLUS
75948: PPUSH
75949: LD_VAR 0 2
75953: PPUSH
75954: CALL_OW 1
75958: ST_TO_ADDR
// end ;
75959: LD_VAR 0 3
75963: RET
// export function JoinUnion ( array , element ) ; begin
75964: LD_INT 0
75966: PPUSH
// result := array union element ;
75967: LD_ADDR_VAR 0 3
75971: PUSH
75972: LD_VAR 0 1
75976: PUSH
75977: LD_VAR 0 2
75981: UNION
75982: ST_TO_ADDR
// end ;
75983: LD_VAR 0 3
75987: RET
// export function GetBehemoths ( side ) ; begin
75988: LD_INT 0
75990: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
75991: LD_ADDR_VAR 0 2
75995: PUSH
75996: LD_INT 22
75998: PUSH
75999: LD_VAR 0 1
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: PUSH
76008: LD_INT 31
76010: PUSH
76011: LD_INT 25
76013: PUSH
76014: EMPTY
76015: LIST
76016: LIST
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: PPUSH
76022: CALL_OW 69
76026: ST_TO_ADDR
// end ;
76027: LD_VAR 0 2
76031: RET
// export function Shuffle ( array ) ; var i , index ; begin
76032: LD_INT 0
76034: PPUSH
76035: PPUSH
76036: PPUSH
// result := [ ] ;
76037: LD_ADDR_VAR 0 2
76041: PUSH
76042: EMPTY
76043: ST_TO_ADDR
// if not array then
76044: LD_VAR 0 1
76048: NOT
76049: IFFALSE 76053
// exit ;
76051: GO 76152
// Randomize ;
76053: CALL_OW 10
// for i = array downto 1 do
76057: LD_ADDR_VAR 0 3
76061: PUSH
76062: DOUBLE
76063: LD_VAR 0 1
76067: INC
76068: ST_TO_ADDR
76069: LD_INT 1
76071: PUSH
76072: FOR_DOWNTO
76073: IFFALSE 76150
// begin index := rand ( 1 , array ) ;
76075: LD_ADDR_VAR 0 4
76079: PUSH
76080: LD_INT 1
76082: PPUSH
76083: LD_VAR 0 1
76087: PPUSH
76088: CALL_OW 12
76092: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76093: LD_ADDR_VAR 0 2
76097: PUSH
76098: LD_VAR 0 2
76102: PPUSH
76103: LD_VAR 0 2
76107: PUSH
76108: LD_INT 1
76110: PLUS
76111: PPUSH
76112: LD_VAR 0 1
76116: PUSH
76117: LD_VAR 0 4
76121: ARRAY
76122: PPUSH
76123: CALL_OW 2
76127: ST_TO_ADDR
// array := Delete ( array , index ) ;
76128: LD_ADDR_VAR 0 1
76132: PUSH
76133: LD_VAR 0 1
76137: PPUSH
76138: LD_VAR 0 4
76142: PPUSH
76143: CALL_OW 3
76147: ST_TO_ADDR
// end ;
76148: GO 76072
76150: POP
76151: POP
// end ;
76152: LD_VAR 0 2
76156: RET
// export function GetBaseMaterials ( base ) ; begin
76157: LD_INT 0
76159: PPUSH
// result := [ 0 , 0 , 0 ] ;
76160: LD_ADDR_VAR 0 2
76164: PUSH
76165: LD_INT 0
76167: PUSH
76168: LD_INT 0
76170: PUSH
76171: LD_INT 0
76173: PUSH
76174: EMPTY
76175: LIST
76176: LIST
76177: LIST
76178: ST_TO_ADDR
// if not base then
76179: LD_VAR 0 1
76183: NOT
76184: IFFALSE 76188
// exit ;
76186: GO 76237
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76188: LD_ADDR_VAR 0 2
76192: PUSH
76193: LD_VAR 0 1
76197: PPUSH
76198: LD_INT 1
76200: PPUSH
76201: CALL_OW 275
76205: PUSH
76206: LD_VAR 0 1
76210: PPUSH
76211: LD_INT 2
76213: PPUSH
76214: CALL_OW 275
76218: PUSH
76219: LD_VAR 0 1
76223: PPUSH
76224: LD_INT 3
76226: PPUSH
76227: CALL_OW 275
76231: PUSH
76232: EMPTY
76233: LIST
76234: LIST
76235: LIST
76236: ST_TO_ADDR
// end ;
76237: LD_VAR 0 2
76241: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76242: LD_INT 0
76244: PPUSH
76245: PPUSH
// result := array ;
76246: LD_ADDR_VAR 0 3
76250: PUSH
76251: LD_VAR 0 1
76255: ST_TO_ADDR
// if size >= result then
76256: LD_VAR 0 2
76260: PUSH
76261: LD_VAR 0 3
76265: GREATEREQUAL
76266: IFFALSE 76270
// exit ;
76268: GO 76320
// if size then
76270: LD_VAR 0 2
76274: IFFALSE 76320
// for i := array downto size do
76276: LD_ADDR_VAR 0 4
76280: PUSH
76281: DOUBLE
76282: LD_VAR 0 1
76286: INC
76287: ST_TO_ADDR
76288: LD_VAR 0 2
76292: PUSH
76293: FOR_DOWNTO
76294: IFFALSE 76318
// result := Delete ( result , result ) ;
76296: LD_ADDR_VAR 0 3
76300: PUSH
76301: LD_VAR 0 3
76305: PPUSH
76306: LD_VAR 0 3
76310: PPUSH
76311: CALL_OW 3
76315: ST_TO_ADDR
76316: GO 76293
76318: POP
76319: POP
// end ;
76320: LD_VAR 0 3
76324: RET
// export function ComExit ( unit ) ; var tmp ; begin
76325: LD_INT 0
76327: PPUSH
76328: PPUSH
// if not IsInUnit ( unit ) then
76329: LD_VAR 0 1
76333: PPUSH
76334: CALL_OW 310
76338: NOT
76339: IFFALSE 76343
// exit ;
76341: GO 76403
// tmp := IsInUnit ( unit ) ;
76343: LD_ADDR_VAR 0 3
76347: PUSH
76348: LD_VAR 0 1
76352: PPUSH
76353: CALL_OW 310
76357: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76358: LD_VAR 0 3
76362: PPUSH
76363: CALL_OW 247
76367: PUSH
76368: LD_INT 2
76370: EQUAL
76371: IFFALSE 76384
// ComExitVehicle ( unit ) else
76373: LD_VAR 0 1
76377: PPUSH
76378: CALL_OW 121
76382: GO 76393
// ComExitBuilding ( unit ) ;
76384: LD_VAR 0 1
76388: PPUSH
76389: CALL_OW 122
// result := tmp ;
76393: LD_ADDR_VAR 0 2
76397: PUSH
76398: LD_VAR 0 3
76402: ST_TO_ADDR
// end ;
76403: LD_VAR 0 2
76407: RET
// export function ComExitAll ( units ) ; var i ; begin
76408: LD_INT 0
76410: PPUSH
76411: PPUSH
// if not units then
76412: LD_VAR 0 1
76416: NOT
76417: IFFALSE 76421
// exit ;
76419: GO 76447
// for i in units do
76421: LD_ADDR_VAR 0 3
76425: PUSH
76426: LD_VAR 0 1
76430: PUSH
76431: FOR_IN
76432: IFFALSE 76445
// ComExit ( i ) ;
76434: LD_VAR 0 3
76438: PPUSH
76439: CALL 76325 0 1
76443: GO 76431
76445: POP
76446: POP
// end ;
76447: LD_VAR 0 2
76451: RET
// export function ResetHc ; begin
76452: LD_INT 0
76454: PPUSH
// InitHc ;
76455: CALL_OW 19
// hc_importance := 0 ;
76459: LD_ADDR_OWVAR 32
76463: PUSH
76464: LD_INT 0
76466: ST_TO_ADDR
// end ;
76467: LD_VAR 0 1
76471: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76472: LD_INT 0
76474: PPUSH
76475: PPUSH
76476: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76477: LD_ADDR_VAR 0 6
76481: PUSH
76482: LD_VAR 0 1
76486: PUSH
76487: LD_VAR 0 3
76491: PLUS
76492: PUSH
76493: LD_INT 2
76495: DIV
76496: ST_TO_ADDR
// if _x < 0 then
76497: LD_VAR 0 6
76501: PUSH
76502: LD_INT 0
76504: LESS
76505: IFFALSE 76522
// _x := _x * - 1 ;
76507: LD_ADDR_VAR 0 6
76511: PUSH
76512: LD_VAR 0 6
76516: PUSH
76517: LD_INT 1
76519: NEG
76520: MUL
76521: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76522: LD_ADDR_VAR 0 7
76526: PUSH
76527: LD_VAR 0 2
76531: PUSH
76532: LD_VAR 0 4
76536: PLUS
76537: PUSH
76538: LD_INT 2
76540: DIV
76541: ST_TO_ADDR
// if _y < 0 then
76542: LD_VAR 0 7
76546: PUSH
76547: LD_INT 0
76549: LESS
76550: IFFALSE 76567
// _y := _y * - 1 ;
76552: LD_ADDR_VAR 0 7
76556: PUSH
76557: LD_VAR 0 7
76561: PUSH
76562: LD_INT 1
76564: NEG
76565: MUL
76566: ST_TO_ADDR
// result := [ _x , _y ] ;
76567: LD_ADDR_VAR 0 5
76571: PUSH
76572: LD_VAR 0 6
76576: PUSH
76577: LD_VAR 0 7
76581: PUSH
76582: EMPTY
76583: LIST
76584: LIST
76585: ST_TO_ADDR
// end ;
76586: LD_VAR 0 5
76590: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76591: LD_INT 0
76593: PPUSH
76594: PPUSH
76595: PPUSH
76596: PPUSH
// task := GetTaskList ( unit ) ;
76597: LD_ADDR_VAR 0 7
76601: PUSH
76602: LD_VAR 0 1
76606: PPUSH
76607: CALL_OW 437
76611: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76612: LD_VAR 0 7
76616: NOT
76617: PUSH
76618: LD_VAR 0 1
76622: PPUSH
76623: LD_VAR 0 2
76627: PPUSH
76628: CALL_OW 308
76632: NOT
76633: AND
76634: IFFALSE 76638
// exit ;
76636: GO 76756
// if IsInArea ( unit , area ) then
76638: LD_VAR 0 1
76642: PPUSH
76643: LD_VAR 0 2
76647: PPUSH
76648: CALL_OW 308
76652: IFFALSE 76670
// begin ComMoveToArea ( unit , goAway ) ;
76654: LD_VAR 0 1
76658: PPUSH
76659: LD_VAR 0 3
76663: PPUSH
76664: CALL_OW 113
// exit ;
76668: GO 76756
// end ; if task [ 1 ] [ 1 ] <> M then
76670: LD_VAR 0 7
76674: PUSH
76675: LD_INT 1
76677: ARRAY
76678: PUSH
76679: LD_INT 1
76681: ARRAY
76682: PUSH
76683: LD_STRING M
76685: NONEQUAL
76686: IFFALSE 76690
// exit ;
76688: GO 76756
// x := task [ 1 ] [ 2 ] ;
76690: LD_ADDR_VAR 0 5
76694: PUSH
76695: LD_VAR 0 7
76699: PUSH
76700: LD_INT 1
76702: ARRAY
76703: PUSH
76704: LD_INT 2
76706: ARRAY
76707: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76708: LD_ADDR_VAR 0 6
76712: PUSH
76713: LD_VAR 0 7
76717: PUSH
76718: LD_INT 1
76720: ARRAY
76721: PUSH
76722: LD_INT 3
76724: ARRAY
76725: ST_TO_ADDR
// if InArea ( x , y , area ) then
76726: LD_VAR 0 5
76730: PPUSH
76731: LD_VAR 0 6
76735: PPUSH
76736: LD_VAR 0 2
76740: PPUSH
76741: CALL_OW 309
76745: IFFALSE 76756
// ComStop ( unit ) ;
76747: LD_VAR 0 1
76751: PPUSH
76752: CALL_OW 141
// end ;
76756: LD_VAR 0 4
76760: RET
// export function Abs ( value ) ; begin
76761: LD_INT 0
76763: PPUSH
// result := value ;
76764: LD_ADDR_VAR 0 2
76768: PUSH
76769: LD_VAR 0 1
76773: ST_TO_ADDR
// if value < 0 then
76774: LD_VAR 0 1
76778: PUSH
76779: LD_INT 0
76781: LESS
76782: IFFALSE 76799
// result := value * - 1 ;
76784: LD_ADDR_VAR 0 2
76788: PUSH
76789: LD_VAR 0 1
76793: PUSH
76794: LD_INT 1
76796: NEG
76797: MUL
76798: ST_TO_ADDR
// end ;
76799: LD_VAR 0 2
76803: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76804: LD_INT 0
76806: PPUSH
76807: PPUSH
76808: PPUSH
76809: PPUSH
76810: PPUSH
76811: PPUSH
76812: PPUSH
76813: PPUSH
// if not unit or not building then
76814: LD_VAR 0 1
76818: NOT
76819: PUSH
76820: LD_VAR 0 2
76824: NOT
76825: OR
76826: IFFALSE 76830
// exit ;
76828: GO 77056
// x := GetX ( building ) ;
76830: LD_ADDR_VAR 0 4
76834: PUSH
76835: LD_VAR 0 2
76839: PPUSH
76840: CALL_OW 250
76844: ST_TO_ADDR
// y := GetY ( building ) ;
76845: LD_ADDR_VAR 0 6
76849: PUSH
76850: LD_VAR 0 2
76854: PPUSH
76855: CALL_OW 251
76859: ST_TO_ADDR
// d := GetDir ( building ) ;
76860: LD_ADDR_VAR 0 8
76864: PUSH
76865: LD_VAR 0 2
76869: PPUSH
76870: CALL_OW 254
76874: ST_TO_ADDR
// r := 4 ;
76875: LD_ADDR_VAR 0 9
76879: PUSH
76880: LD_INT 4
76882: ST_TO_ADDR
// for i := 1 to 5 do
76883: LD_ADDR_VAR 0 10
76887: PUSH
76888: DOUBLE
76889: LD_INT 1
76891: DEC
76892: ST_TO_ADDR
76893: LD_INT 5
76895: PUSH
76896: FOR_TO
76897: IFFALSE 77054
// begin _x := ShiftX ( x , d , r + i ) ;
76899: LD_ADDR_VAR 0 5
76903: PUSH
76904: LD_VAR 0 4
76908: PPUSH
76909: LD_VAR 0 8
76913: PPUSH
76914: LD_VAR 0 9
76918: PUSH
76919: LD_VAR 0 10
76923: PLUS
76924: PPUSH
76925: CALL_OW 272
76929: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76930: LD_ADDR_VAR 0 7
76934: PUSH
76935: LD_VAR 0 6
76939: PPUSH
76940: LD_VAR 0 8
76944: PPUSH
76945: LD_VAR 0 9
76949: PUSH
76950: LD_VAR 0 10
76954: PLUS
76955: PPUSH
76956: CALL_OW 273
76960: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76961: LD_VAR 0 5
76965: PPUSH
76966: LD_VAR 0 7
76970: PPUSH
76971: CALL_OW 488
76975: PUSH
76976: LD_VAR 0 5
76980: PPUSH
76981: LD_VAR 0 7
76985: PPUSH
76986: CALL_OW 428
76990: PPUSH
76991: CALL_OW 247
76995: PUSH
76996: LD_INT 3
76998: PUSH
76999: LD_INT 2
77001: PUSH
77002: EMPTY
77003: LIST
77004: LIST
77005: IN
77006: NOT
77007: AND
77008: IFFALSE 77052
// begin ComMoveXY ( unit , _x , _y ) ;
77010: LD_VAR 0 1
77014: PPUSH
77015: LD_VAR 0 5
77019: PPUSH
77020: LD_VAR 0 7
77024: PPUSH
77025: CALL_OW 111
// result := [ _x , _y ] ;
77029: LD_ADDR_VAR 0 3
77033: PUSH
77034: LD_VAR 0 5
77038: PUSH
77039: LD_VAR 0 7
77043: PUSH
77044: EMPTY
77045: LIST
77046: LIST
77047: ST_TO_ADDR
// exit ;
77048: POP
77049: POP
77050: GO 77056
// end ; end ;
77052: GO 76896
77054: POP
77055: POP
// end ;
77056: LD_VAR 0 3
77060: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77061: LD_INT 0
77063: PPUSH
77064: PPUSH
77065: PPUSH
// result := 0 ;
77066: LD_ADDR_VAR 0 3
77070: PUSH
77071: LD_INT 0
77073: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77074: LD_VAR 0 1
77078: PUSH
77079: LD_INT 0
77081: LESS
77082: PUSH
77083: LD_VAR 0 1
77087: PUSH
77088: LD_INT 8
77090: GREATER
77091: OR
77092: PUSH
77093: LD_VAR 0 2
77097: PUSH
77098: LD_INT 0
77100: LESS
77101: OR
77102: PUSH
77103: LD_VAR 0 2
77107: PUSH
77108: LD_INT 8
77110: GREATER
77111: OR
77112: IFFALSE 77116
// exit ;
77114: GO 77191
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77116: LD_ADDR_VAR 0 4
77120: PUSH
77121: LD_INT 22
77123: PUSH
77124: LD_VAR 0 2
77128: PUSH
77129: EMPTY
77130: LIST
77131: LIST
77132: PPUSH
77133: CALL_OW 69
77137: PUSH
77138: FOR_IN
77139: IFFALSE 77189
// begin un := UnitShoot ( i ) ;
77141: LD_ADDR_VAR 0 5
77145: PUSH
77146: LD_VAR 0 4
77150: PPUSH
77151: CALL_OW 504
77155: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77156: LD_VAR 0 5
77160: PPUSH
77161: CALL_OW 255
77165: PUSH
77166: LD_VAR 0 1
77170: EQUAL
77171: IFFALSE 77187
// begin result := un ;
77173: LD_ADDR_VAR 0 3
77177: PUSH
77178: LD_VAR 0 5
77182: ST_TO_ADDR
// exit ;
77183: POP
77184: POP
77185: GO 77191
// end ; end ;
77187: GO 77138
77189: POP
77190: POP
// end ;
77191: LD_VAR 0 3
77195: RET
// export function GetCargoBay ( units ) ; begin
77196: LD_INT 0
77198: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77199: LD_ADDR_VAR 0 2
77203: PUSH
77204: LD_VAR 0 1
77208: PPUSH
77209: LD_INT 2
77211: PUSH
77212: LD_INT 34
77214: PUSH
77215: LD_INT 12
77217: PUSH
77218: EMPTY
77219: LIST
77220: LIST
77221: PUSH
77222: LD_INT 34
77224: PUSH
77225: LD_INT 51
77227: PUSH
77228: EMPTY
77229: LIST
77230: LIST
77231: PUSH
77232: LD_INT 34
77234: PUSH
77235: LD_INT 32
77237: PUSH
77238: EMPTY
77239: LIST
77240: LIST
77241: PUSH
77242: LD_INT 34
77244: PUSH
77245: LD_EXP 34
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: PUSH
77254: EMPTY
77255: LIST
77256: LIST
77257: LIST
77258: LIST
77259: LIST
77260: PPUSH
77261: CALL_OW 72
77265: ST_TO_ADDR
// end ;
77266: LD_VAR 0 2
77270: RET
// export function Negate ( value ) ; begin
77271: LD_INT 0
77273: PPUSH
// result := not value ;
77274: LD_ADDR_VAR 0 2
77278: PUSH
77279: LD_VAR 0 1
77283: NOT
77284: ST_TO_ADDR
// end ;
77285: LD_VAR 0 2
77289: RET
// export function Inc ( value ) ; begin
77290: LD_INT 0
77292: PPUSH
// result := value + 1 ;
77293: LD_ADDR_VAR 0 2
77297: PUSH
77298: LD_VAR 0 1
77302: PUSH
77303: LD_INT 1
77305: PLUS
77306: ST_TO_ADDR
// end ;
77307: LD_VAR 0 2
77311: RET
// export function Dec ( value ) ; begin
77312: LD_INT 0
77314: PPUSH
// result := value - 1 ;
77315: LD_ADDR_VAR 0 2
77319: PUSH
77320: LD_VAR 0 1
77324: PUSH
77325: LD_INT 1
77327: MINUS
77328: ST_TO_ADDR
// end ;
77329: LD_VAR 0 2
77333: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77334: LD_INT 0
77336: PPUSH
77337: PPUSH
77338: PPUSH
77339: PPUSH
77340: PPUSH
77341: PPUSH
77342: PPUSH
77343: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77344: LD_VAR 0 1
77348: PPUSH
77349: LD_VAR 0 2
77353: PPUSH
77354: CALL_OW 488
77358: NOT
77359: PUSH
77360: LD_VAR 0 3
77364: PPUSH
77365: LD_VAR 0 4
77369: PPUSH
77370: CALL_OW 488
77374: NOT
77375: OR
77376: IFFALSE 77389
// begin result := - 1 ;
77378: LD_ADDR_VAR 0 5
77382: PUSH
77383: LD_INT 1
77385: NEG
77386: ST_TO_ADDR
// exit ;
77387: GO 77624
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77389: LD_ADDR_VAR 0 12
77393: PUSH
77394: LD_VAR 0 1
77398: PPUSH
77399: LD_VAR 0 2
77403: PPUSH
77404: LD_VAR 0 3
77408: PPUSH
77409: LD_VAR 0 4
77413: PPUSH
77414: CALL 76472 0 4
77418: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77419: LD_ADDR_VAR 0 11
77423: PUSH
77424: LD_VAR 0 1
77428: PPUSH
77429: LD_VAR 0 2
77433: PPUSH
77434: LD_VAR 0 12
77438: PUSH
77439: LD_INT 1
77441: ARRAY
77442: PPUSH
77443: LD_VAR 0 12
77447: PUSH
77448: LD_INT 2
77450: ARRAY
77451: PPUSH
77452: CALL_OW 298
77456: ST_TO_ADDR
// distance := 9999 ;
77457: LD_ADDR_VAR 0 10
77461: PUSH
77462: LD_INT 9999
77464: ST_TO_ADDR
// for i := 0 to 5 do
77465: LD_ADDR_VAR 0 6
77469: PUSH
77470: DOUBLE
77471: LD_INT 0
77473: DEC
77474: ST_TO_ADDR
77475: LD_INT 5
77477: PUSH
77478: FOR_TO
77479: IFFALSE 77622
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77481: LD_ADDR_VAR 0 7
77485: PUSH
77486: LD_VAR 0 1
77490: PPUSH
77491: LD_VAR 0 6
77495: PPUSH
77496: LD_VAR 0 11
77500: PPUSH
77501: CALL_OW 272
77505: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77506: LD_ADDR_VAR 0 8
77510: PUSH
77511: LD_VAR 0 2
77515: PPUSH
77516: LD_VAR 0 6
77520: PPUSH
77521: LD_VAR 0 11
77525: PPUSH
77526: CALL_OW 273
77530: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77531: LD_VAR 0 7
77535: PPUSH
77536: LD_VAR 0 8
77540: PPUSH
77541: CALL_OW 488
77545: NOT
77546: IFFALSE 77550
// continue ;
77548: GO 77478
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77550: LD_ADDR_VAR 0 9
77554: PUSH
77555: LD_VAR 0 12
77559: PUSH
77560: LD_INT 1
77562: ARRAY
77563: PPUSH
77564: LD_VAR 0 12
77568: PUSH
77569: LD_INT 2
77571: ARRAY
77572: PPUSH
77573: LD_VAR 0 7
77577: PPUSH
77578: LD_VAR 0 8
77582: PPUSH
77583: CALL_OW 298
77587: ST_TO_ADDR
// if tmp < distance then
77588: LD_VAR 0 9
77592: PUSH
77593: LD_VAR 0 10
77597: LESS
77598: IFFALSE 77620
// begin result := i ;
77600: LD_ADDR_VAR 0 5
77604: PUSH
77605: LD_VAR 0 6
77609: ST_TO_ADDR
// distance := tmp ;
77610: LD_ADDR_VAR 0 10
77614: PUSH
77615: LD_VAR 0 9
77619: ST_TO_ADDR
// end ; end ;
77620: GO 77478
77622: POP
77623: POP
// end ;
77624: LD_VAR 0 5
77628: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77629: LD_INT 0
77631: PPUSH
77632: PPUSH
// if not driver or not IsInUnit ( driver ) then
77633: LD_VAR 0 1
77637: NOT
77638: PUSH
77639: LD_VAR 0 1
77643: PPUSH
77644: CALL_OW 310
77648: NOT
77649: OR
77650: IFFALSE 77654
// exit ;
77652: GO 77744
// vehicle := IsInUnit ( driver ) ;
77654: LD_ADDR_VAR 0 3
77658: PUSH
77659: LD_VAR 0 1
77663: PPUSH
77664: CALL_OW 310
77668: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77669: LD_VAR 0 1
77673: PPUSH
77674: LD_STRING \
77676: PUSH
77677: LD_INT 0
77679: PUSH
77680: LD_INT 0
77682: PUSH
77683: LD_INT 0
77685: PUSH
77686: LD_INT 0
77688: PUSH
77689: LD_INT 0
77691: PUSH
77692: LD_INT 0
77694: PUSH
77695: EMPTY
77696: LIST
77697: LIST
77698: LIST
77699: LIST
77700: LIST
77701: LIST
77702: LIST
77703: PUSH
77704: LD_STRING E
77706: PUSH
77707: LD_INT 0
77709: PUSH
77710: LD_INT 0
77712: PUSH
77713: LD_VAR 0 3
77717: PUSH
77718: LD_INT 0
77720: PUSH
77721: LD_INT 0
77723: PUSH
77724: LD_INT 0
77726: PUSH
77727: EMPTY
77728: LIST
77729: LIST
77730: LIST
77731: LIST
77732: LIST
77733: LIST
77734: LIST
77735: PUSH
77736: EMPTY
77737: LIST
77738: LIST
77739: PPUSH
77740: CALL_OW 446
// end ;
77744: LD_VAR 0 2
77748: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77749: LD_INT 0
77751: PPUSH
77752: PPUSH
// if not driver or not IsInUnit ( driver ) then
77753: LD_VAR 0 1
77757: NOT
77758: PUSH
77759: LD_VAR 0 1
77763: PPUSH
77764: CALL_OW 310
77768: NOT
77769: OR
77770: IFFALSE 77774
// exit ;
77772: GO 77864
// vehicle := IsInUnit ( driver ) ;
77774: LD_ADDR_VAR 0 3
77778: PUSH
77779: LD_VAR 0 1
77783: PPUSH
77784: CALL_OW 310
77788: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77789: LD_VAR 0 1
77793: PPUSH
77794: LD_STRING \
77796: PUSH
77797: LD_INT 0
77799: PUSH
77800: LD_INT 0
77802: PUSH
77803: LD_INT 0
77805: PUSH
77806: LD_INT 0
77808: PUSH
77809: LD_INT 0
77811: PUSH
77812: LD_INT 0
77814: PUSH
77815: EMPTY
77816: LIST
77817: LIST
77818: LIST
77819: LIST
77820: LIST
77821: LIST
77822: LIST
77823: PUSH
77824: LD_STRING E
77826: PUSH
77827: LD_INT 0
77829: PUSH
77830: LD_INT 0
77832: PUSH
77833: LD_VAR 0 3
77837: PUSH
77838: LD_INT 0
77840: PUSH
77841: LD_INT 0
77843: PUSH
77844: LD_INT 0
77846: PUSH
77847: EMPTY
77848: LIST
77849: LIST
77850: LIST
77851: LIST
77852: LIST
77853: LIST
77854: LIST
77855: PUSH
77856: EMPTY
77857: LIST
77858: LIST
77859: PPUSH
77860: CALL_OW 447
// end ;
77864: LD_VAR 0 2
77868: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77869: LD_INT 0
77871: PPUSH
77872: PPUSH
77873: PPUSH
// tmp := [ ] ;
77874: LD_ADDR_VAR 0 5
77878: PUSH
77879: EMPTY
77880: ST_TO_ADDR
// for i in units do
77881: LD_ADDR_VAR 0 4
77885: PUSH
77886: LD_VAR 0 1
77890: PUSH
77891: FOR_IN
77892: IFFALSE 77930
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77894: LD_ADDR_VAR 0 5
77898: PUSH
77899: LD_VAR 0 5
77903: PPUSH
77904: LD_VAR 0 5
77908: PUSH
77909: LD_INT 1
77911: PLUS
77912: PPUSH
77913: LD_VAR 0 4
77917: PPUSH
77918: CALL_OW 256
77922: PPUSH
77923: CALL_OW 2
77927: ST_TO_ADDR
77928: GO 77891
77930: POP
77931: POP
// if not tmp then
77932: LD_VAR 0 5
77936: NOT
77937: IFFALSE 77941
// exit ;
77939: GO 77989
// if asc then
77941: LD_VAR 0 2
77945: IFFALSE 77969
// result := SortListByListAsc ( units , tmp ) else
77947: LD_ADDR_VAR 0 3
77951: PUSH
77952: LD_VAR 0 1
77956: PPUSH
77957: LD_VAR 0 5
77961: PPUSH
77962: CALL_OW 76
77966: ST_TO_ADDR
77967: GO 77989
// result := SortListByListDesc ( units , tmp ) ;
77969: LD_ADDR_VAR 0 3
77973: PUSH
77974: LD_VAR 0 1
77978: PPUSH
77979: LD_VAR 0 5
77983: PPUSH
77984: CALL_OW 77
77988: ST_TO_ADDR
// end ;
77989: LD_VAR 0 3
77993: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77994: LD_INT 0
77996: PPUSH
77997: PPUSH
// task := GetTaskList ( mech ) ;
77998: LD_ADDR_VAR 0 4
78002: PUSH
78003: LD_VAR 0 1
78007: PPUSH
78008: CALL_OW 437
78012: ST_TO_ADDR
// if not task then
78013: LD_VAR 0 4
78017: NOT
78018: IFFALSE 78022
// exit ;
78020: GO 78064
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78022: LD_ADDR_VAR 0 3
78026: PUSH
78027: LD_VAR 0 4
78031: PUSH
78032: LD_INT 1
78034: ARRAY
78035: PUSH
78036: LD_INT 1
78038: ARRAY
78039: PUSH
78040: LD_STRING r
78042: EQUAL
78043: PUSH
78044: LD_VAR 0 4
78048: PUSH
78049: LD_INT 1
78051: ARRAY
78052: PUSH
78053: LD_INT 4
78055: ARRAY
78056: PUSH
78057: LD_VAR 0 2
78061: EQUAL
78062: AND
78063: ST_TO_ADDR
// end ;
78064: LD_VAR 0 3
78068: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78069: LD_INT 0
78071: PPUSH
// SetDir ( unit , d ) ;
78072: LD_VAR 0 1
78076: PPUSH
78077: LD_VAR 0 4
78081: PPUSH
78082: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78086: LD_VAR 0 1
78090: PPUSH
78091: LD_VAR 0 2
78095: PPUSH
78096: LD_VAR 0 3
78100: PPUSH
78101: LD_VAR 0 5
78105: PPUSH
78106: CALL_OW 48
// end ;
78110: LD_VAR 0 6
78114: RET
// export function ToNaturalNumber ( number ) ; begin
78115: LD_INT 0
78117: PPUSH
// result := number div 1 ;
78118: LD_ADDR_VAR 0 2
78122: PUSH
78123: LD_VAR 0 1
78127: PUSH
78128: LD_INT 1
78130: DIV
78131: ST_TO_ADDR
// if number < 0 then
78132: LD_VAR 0 1
78136: PUSH
78137: LD_INT 0
78139: LESS
78140: IFFALSE 78150
// result := 0 ;
78142: LD_ADDR_VAR 0 2
78146: PUSH
78147: LD_INT 0
78149: ST_TO_ADDR
// end ;
78150: LD_VAR 0 2
78154: RET
// export function SortByClass ( units , class ) ; var un ; begin
78155: LD_INT 0
78157: PPUSH
78158: PPUSH
// if not units or not class then
78159: LD_VAR 0 1
78163: NOT
78164: PUSH
78165: LD_VAR 0 2
78169: NOT
78170: OR
78171: IFFALSE 78175
// exit ;
78173: GO 78270
// result := [ ] ;
78175: LD_ADDR_VAR 0 3
78179: PUSH
78180: EMPTY
78181: ST_TO_ADDR
// for un in units do
78182: LD_ADDR_VAR 0 4
78186: PUSH
78187: LD_VAR 0 1
78191: PUSH
78192: FOR_IN
78193: IFFALSE 78268
// if GetClass ( un ) = class then
78195: LD_VAR 0 4
78199: PPUSH
78200: CALL_OW 257
78204: PUSH
78205: LD_VAR 0 2
78209: EQUAL
78210: IFFALSE 78237
// result := Insert ( result , 1 , un ) else
78212: LD_ADDR_VAR 0 3
78216: PUSH
78217: LD_VAR 0 3
78221: PPUSH
78222: LD_INT 1
78224: PPUSH
78225: LD_VAR 0 4
78229: PPUSH
78230: CALL_OW 2
78234: ST_TO_ADDR
78235: GO 78266
// result := Replace ( result , result + 1 , un ) ;
78237: LD_ADDR_VAR 0 3
78241: PUSH
78242: LD_VAR 0 3
78246: PPUSH
78247: LD_VAR 0 3
78251: PUSH
78252: LD_INT 1
78254: PLUS
78255: PPUSH
78256: LD_VAR 0 4
78260: PPUSH
78261: CALL_OW 1
78265: ST_TO_ADDR
78266: GO 78192
78268: POP
78269: POP
// end ;
78270: LD_VAR 0 3
78274: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78275: LD_INT 0
78277: PPUSH
78278: PPUSH
78279: PPUSH
78280: PPUSH
78281: PPUSH
78282: PPUSH
78283: PPUSH
// result := [ ] ;
78284: LD_ADDR_VAR 0 4
78288: PUSH
78289: EMPTY
78290: ST_TO_ADDR
// if x - r < 0 then
78291: LD_VAR 0 1
78295: PUSH
78296: LD_VAR 0 3
78300: MINUS
78301: PUSH
78302: LD_INT 0
78304: LESS
78305: IFFALSE 78317
// min_x := 0 else
78307: LD_ADDR_VAR 0 8
78311: PUSH
78312: LD_INT 0
78314: ST_TO_ADDR
78315: GO 78333
// min_x := x - r ;
78317: LD_ADDR_VAR 0 8
78321: PUSH
78322: LD_VAR 0 1
78326: PUSH
78327: LD_VAR 0 3
78331: MINUS
78332: ST_TO_ADDR
// if y - r < 0 then
78333: LD_VAR 0 2
78337: PUSH
78338: LD_VAR 0 3
78342: MINUS
78343: PUSH
78344: LD_INT 0
78346: LESS
78347: IFFALSE 78359
// min_y := 0 else
78349: LD_ADDR_VAR 0 7
78353: PUSH
78354: LD_INT 0
78356: ST_TO_ADDR
78357: GO 78375
// min_y := y - r ;
78359: LD_ADDR_VAR 0 7
78363: PUSH
78364: LD_VAR 0 2
78368: PUSH
78369: LD_VAR 0 3
78373: MINUS
78374: ST_TO_ADDR
// max_x := x + r ;
78375: LD_ADDR_VAR 0 9
78379: PUSH
78380: LD_VAR 0 1
78384: PUSH
78385: LD_VAR 0 3
78389: PLUS
78390: ST_TO_ADDR
// max_y := y + r ;
78391: LD_ADDR_VAR 0 10
78395: PUSH
78396: LD_VAR 0 2
78400: PUSH
78401: LD_VAR 0 3
78405: PLUS
78406: ST_TO_ADDR
// for _x = min_x to max_x do
78407: LD_ADDR_VAR 0 5
78411: PUSH
78412: DOUBLE
78413: LD_VAR 0 8
78417: DEC
78418: ST_TO_ADDR
78419: LD_VAR 0 9
78423: PUSH
78424: FOR_TO
78425: IFFALSE 78526
// for _y = min_y to max_y do
78427: LD_ADDR_VAR 0 6
78431: PUSH
78432: DOUBLE
78433: LD_VAR 0 7
78437: DEC
78438: ST_TO_ADDR
78439: LD_VAR 0 10
78443: PUSH
78444: FOR_TO
78445: IFFALSE 78522
// begin if not ValidHex ( _x , _y ) then
78447: LD_VAR 0 5
78451: PPUSH
78452: LD_VAR 0 6
78456: PPUSH
78457: CALL_OW 488
78461: NOT
78462: IFFALSE 78466
// continue ;
78464: GO 78444
// if GetResourceTypeXY ( _x , _y ) then
78466: LD_VAR 0 5
78470: PPUSH
78471: LD_VAR 0 6
78475: PPUSH
78476: CALL_OW 283
78480: IFFALSE 78520
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78482: LD_ADDR_VAR 0 4
78486: PUSH
78487: LD_VAR 0 4
78491: PPUSH
78492: LD_VAR 0 4
78496: PUSH
78497: LD_INT 1
78499: PLUS
78500: PPUSH
78501: LD_VAR 0 5
78505: PUSH
78506: LD_VAR 0 6
78510: PUSH
78511: EMPTY
78512: LIST
78513: LIST
78514: PPUSH
78515: CALL_OW 1
78519: ST_TO_ADDR
// end ;
78520: GO 78444
78522: POP
78523: POP
78524: GO 78424
78526: POP
78527: POP
// end ;
78528: LD_VAR 0 4
78532: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78533: LD_INT 0
78535: PPUSH
78536: PPUSH
78537: PPUSH
78538: PPUSH
78539: PPUSH
78540: PPUSH
78541: PPUSH
78542: PPUSH
// if not units then
78543: LD_VAR 0 1
78547: NOT
78548: IFFALSE 78552
// exit ;
78550: GO 79078
// result := UnitFilter ( units , [ f_ok ] ) ;
78552: LD_ADDR_VAR 0 3
78556: PUSH
78557: LD_VAR 0 1
78561: PPUSH
78562: LD_INT 50
78564: PUSH
78565: EMPTY
78566: LIST
78567: PPUSH
78568: CALL_OW 72
78572: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78573: LD_ADDR_VAR 0 8
78577: PUSH
78578: LD_VAR 0 1
78582: PUSH
78583: LD_INT 1
78585: ARRAY
78586: PPUSH
78587: CALL_OW 255
78591: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78592: LD_ADDR_VAR 0 10
78596: PUSH
78597: LD_INT 29
78599: PUSH
78600: LD_EXP 37
78604: PUSH
78605: LD_INT 49
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: LIST
78612: ST_TO_ADDR
// if not result then
78613: LD_VAR 0 3
78617: NOT
78618: IFFALSE 78622
// exit ;
78620: GO 79078
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78622: LD_ADDR_VAR 0 5
78626: PUSH
78627: LD_INT 81
78629: PUSH
78630: LD_VAR 0 8
78634: PUSH
78635: EMPTY
78636: LIST
78637: LIST
78638: PPUSH
78639: CALL_OW 69
78643: ST_TO_ADDR
// for i in result do
78644: LD_ADDR_VAR 0 4
78648: PUSH
78649: LD_VAR 0 3
78653: PUSH
78654: FOR_IN
78655: IFFALSE 79076
// begin tag := GetTag ( i ) + 1 ;
78657: LD_ADDR_VAR 0 9
78661: PUSH
78662: LD_VAR 0 4
78666: PPUSH
78667: CALL_OW 110
78671: PUSH
78672: LD_INT 1
78674: PLUS
78675: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78676: LD_ADDR_VAR 0 7
78680: PUSH
78681: LD_VAR 0 4
78685: PPUSH
78686: CALL_OW 250
78690: PPUSH
78691: LD_VAR 0 4
78695: PPUSH
78696: CALL_OW 251
78700: PPUSH
78701: LD_INT 6
78703: PPUSH
78704: CALL 78275 0 3
78708: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78709: LD_VAR 0 4
78713: PPUSH
78714: CALL_OW 247
78718: PUSH
78719: LD_INT 2
78721: EQUAL
78722: PUSH
78723: LD_VAR 0 7
78727: AND
78728: PUSH
78729: LD_VAR 0 4
78733: PPUSH
78734: CALL_OW 264
78738: PUSH
78739: LD_VAR 0 10
78743: IN
78744: NOT
78745: AND
78746: IFFALSE 78785
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78748: LD_VAR 0 4
78752: PPUSH
78753: LD_VAR 0 7
78757: PUSH
78758: LD_INT 1
78760: ARRAY
78761: PUSH
78762: LD_INT 1
78764: ARRAY
78765: PPUSH
78766: LD_VAR 0 7
78770: PUSH
78771: LD_INT 1
78773: ARRAY
78774: PUSH
78775: LD_INT 2
78777: ARRAY
78778: PPUSH
78779: CALL_OW 116
78783: GO 79074
// if path > tag then
78785: LD_VAR 0 2
78789: PUSH
78790: LD_VAR 0 9
78794: GREATER
78795: IFFALSE 79003
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
78797: LD_ADDR_VAR 0 6
78801: PUSH
78802: LD_VAR 0 5
78806: PPUSH
78807: LD_INT 91
78809: PUSH
78810: LD_VAR 0 4
78814: PUSH
78815: LD_INT 8
78817: PUSH
78818: EMPTY
78819: LIST
78820: LIST
78821: LIST
78822: PPUSH
78823: CALL_OW 72
78827: ST_TO_ADDR
// if nearEnemy then
78828: LD_VAR 0 6
78832: IFFALSE 78901
// begin if GetWeapon ( i ) = ru_time_lapser then
78834: LD_VAR 0 4
78838: PPUSH
78839: CALL_OW 264
78843: PUSH
78844: LD_INT 49
78846: EQUAL
78847: IFFALSE 78875
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78849: LD_VAR 0 4
78853: PPUSH
78854: LD_VAR 0 6
78858: PPUSH
78859: LD_VAR 0 4
78863: PPUSH
78864: CALL_OW 74
78868: PPUSH
78869: CALL_OW 112
78873: GO 78899
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78875: LD_VAR 0 4
78879: PPUSH
78880: LD_VAR 0 6
78884: PPUSH
78885: LD_VAR 0 4
78889: PPUSH
78890: CALL_OW 74
78894: PPUSH
78895: CALL_OW 115
// end else
78899: GO 79001
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78901: LD_VAR 0 4
78905: PPUSH
78906: LD_VAR 0 2
78910: PUSH
78911: LD_VAR 0 9
78915: ARRAY
78916: PUSH
78917: LD_INT 1
78919: ARRAY
78920: PPUSH
78921: LD_VAR 0 2
78925: PUSH
78926: LD_VAR 0 9
78930: ARRAY
78931: PUSH
78932: LD_INT 2
78934: ARRAY
78935: PPUSH
78936: CALL_OW 297
78940: PUSH
78941: LD_INT 6
78943: GREATER
78944: IFFALSE 78987
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78946: LD_VAR 0 4
78950: PPUSH
78951: LD_VAR 0 2
78955: PUSH
78956: LD_VAR 0 9
78960: ARRAY
78961: PUSH
78962: LD_INT 1
78964: ARRAY
78965: PPUSH
78966: LD_VAR 0 2
78970: PUSH
78971: LD_VAR 0 9
78975: ARRAY
78976: PUSH
78977: LD_INT 2
78979: ARRAY
78980: PPUSH
78981: CALL_OW 114
78985: GO 79001
// SetTag ( i , tag ) ;
78987: LD_VAR 0 4
78991: PPUSH
78992: LD_VAR 0 9
78996: PPUSH
78997: CALL_OW 109
// end else
79001: GO 79074
// if enemy then
79003: LD_VAR 0 5
79007: IFFALSE 79074
// begin if GetWeapon ( i ) = ru_time_lapser then
79009: LD_VAR 0 4
79013: PPUSH
79014: CALL_OW 264
79018: PUSH
79019: LD_INT 49
79021: EQUAL
79022: IFFALSE 79050
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79024: LD_VAR 0 4
79028: PPUSH
79029: LD_VAR 0 5
79033: PPUSH
79034: LD_VAR 0 4
79038: PPUSH
79039: CALL_OW 74
79043: PPUSH
79044: CALL_OW 112
79048: GO 79074
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79050: LD_VAR 0 4
79054: PPUSH
79055: LD_VAR 0 5
79059: PPUSH
79060: LD_VAR 0 4
79064: PPUSH
79065: CALL_OW 74
79069: PPUSH
79070: CALL_OW 115
// end ; end ;
79074: GO 78654
79076: POP
79077: POP
// end ;
79078: LD_VAR 0 3
79082: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79083: LD_INT 0
79085: PPUSH
79086: PPUSH
79087: PPUSH
// if not unit or IsInUnit ( unit ) then
79088: LD_VAR 0 1
79092: NOT
79093: PUSH
79094: LD_VAR 0 1
79098: PPUSH
79099: CALL_OW 310
79103: OR
79104: IFFALSE 79108
// exit ;
79106: GO 79199
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79108: LD_ADDR_VAR 0 4
79112: PUSH
79113: LD_VAR 0 1
79117: PPUSH
79118: CALL_OW 250
79122: PPUSH
79123: LD_VAR 0 2
79127: PPUSH
79128: LD_INT 1
79130: PPUSH
79131: CALL_OW 272
79135: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79136: LD_ADDR_VAR 0 5
79140: PUSH
79141: LD_VAR 0 1
79145: PPUSH
79146: CALL_OW 251
79150: PPUSH
79151: LD_VAR 0 2
79155: PPUSH
79156: LD_INT 1
79158: PPUSH
79159: CALL_OW 273
79163: ST_TO_ADDR
// if ValidHex ( x , y ) then
79164: LD_VAR 0 4
79168: PPUSH
79169: LD_VAR 0 5
79173: PPUSH
79174: CALL_OW 488
79178: IFFALSE 79199
// ComTurnXY ( unit , x , y ) ;
79180: LD_VAR 0 1
79184: PPUSH
79185: LD_VAR 0 4
79189: PPUSH
79190: LD_VAR 0 5
79194: PPUSH
79195: CALL_OW 118
// end ;
79199: LD_VAR 0 3
79203: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79204: LD_INT 0
79206: PPUSH
79207: PPUSH
// result := false ;
79208: LD_ADDR_VAR 0 3
79212: PUSH
79213: LD_INT 0
79215: ST_TO_ADDR
// if not units then
79216: LD_VAR 0 2
79220: NOT
79221: IFFALSE 79225
// exit ;
79223: GO 79270
// for i in units do
79225: LD_ADDR_VAR 0 4
79229: PUSH
79230: LD_VAR 0 2
79234: PUSH
79235: FOR_IN
79236: IFFALSE 79268
// if See ( side , i ) then
79238: LD_VAR 0 1
79242: PPUSH
79243: LD_VAR 0 4
79247: PPUSH
79248: CALL_OW 292
79252: IFFALSE 79266
// begin result := true ;
79254: LD_ADDR_VAR 0 3
79258: PUSH
79259: LD_INT 1
79261: ST_TO_ADDR
// exit ;
79262: POP
79263: POP
79264: GO 79270
// end ;
79266: GO 79235
79268: POP
79269: POP
// end ;
79270: LD_VAR 0 3
79274: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79275: LD_INT 0
79277: PPUSH
79278: PPUSH
79279: PPUSH
79280: PPUSH
// if not unit or not points then
79281: LD_VAR 0 1
79285: NOT
79286: PUSH
79287: LD_VAR 0 2
79291: NOT
79292: OR
79293: IFFALSE 79297
// exit ;
79295: GO 79387
// dist := 99999 ;
79297: LD_ADDR_VAR 0 5
79301: PUSH
79302: LD_INT 99999
79304: ST_TO_ADDR
// for i in points do
79305: LD_ADDR_VAR 0 4
79309: PUSH
79310: LD_VAR 0 2
79314: PUSH
79315: FOR_IN
79316: IFFALSE 79385
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79318: LD_ADDR_VAR 0 6
79322: PUSH
79323: LD_VAR 0 1
79327: PPUSH
79328: LD_VAR 0 4
79332: PUSH
79333: LD_INT 1
79335: ARRAY
79336: PPUSH
79337: LD_VAR 0 4
79341: PUSH
79342: LD_INT 2
79344: ARRAY
79345: PPUSH
79346: CALL_OW 297
79350: ST_TO_ADDR
// if tmpDist < dist then
79351: LD_VAR 0 6
79355: PUSH
79356: LD_VAR 0 5
79360: LESS
79361: IFFALSE 79383
// begin result := i ;
79363: LD_ADDR_VAR 0 3
79367: PUSH
79368: LD_VAR 0 4
79372: ST_TO_ADDR
// dist := tmpDist ;
79373: LD_ADDR_VAR 0 5
79377: PUSH
79378: LD_VAR 0 6
79382: ST_TO_ADDR
// end ; end ;
79383: GO 79315
79385: POP
79386: POP
// end ;
79387: LD_VAR 0 3
79391: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79392: LD_INT 0
79394: PPUSH
// uc_side := side ;
79395: LD_ADDR_OWVAR 20
79399: PUSH
79400: LD_VAR 0 1
79404: ST_TO_ADDR
// uc_nation := 3 ;
79405: LD_ADDR_OWVAR 21
79409: PUSH
79410: LD_INT 3
79412: ST_TO_ADDR
// vc_chassis := 25 ;
79413: LD_ADDR_OWVAR 37
79417: PUSH
79418: LD_INT 25
79420: ST_TO_ADDR
// vc_engine := engine_siberite ;
79421: LD_ADDR_OWVAR 39
79425: PUSH
79426: LD_INT 3
79428: ST_TO_ADDR
// vc_control := control_computer ;
79429: LD_ADDR_OWVAR 38
79433: PUSH
79434: LD_INT 3
79436: ST_TO_ADDR
// vc_weapon := 59 ;
79437: LD_ADDR_OWVAR 40
79441: PUSH
79442: LD_INT 59
79444: ST_TO_ADDR
// result := CreateVehicle ;
79445: LD_ADDR_VAR 0 5
79449: PUSH
79450: CALL_OW 45
79454: ST_TO_ADDR
// SetDir ( result , d ) ;
79455: LD_VAR 0 5
79459: PPUSH
79460: LD_VAR 0 4
79464: PPUSH
79465: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79469: LD_VAR 0 5
79473: PPUSH
79474: LD_VAR 0 2
79478: PPUSH
79479: LD_VAR 0 3
79483: PPUSH
79484: LD_INT 0
79486: PPUSH
79487: CALL_OW 48
// end ;
79491: LD_VAR 0 5
79495: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79496: LD_INT 0
79498: PPUSH
79499: PPUSH
79500: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79501: LD_ADDR_VAR 0 2
79505: PUSH
79506: LD_INT 0
79508: PUSH
79509: LD_INT 0
79511: PUSH
79512: LD_INT 0
79514: PUSH
79515: LD_INT 0
79517: PUSH
79518: EMPTY
79519: LIST
79520: LIST
79521: LIST
79522: LIST
79523: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79524: LD_VAR 0 1
79528: NOT
79529: PUSH
79530: LD_VAR 0 1
79534: PPUSH
79535: CALL_OW 264
79539: PUSH
79540: LD_INT 12
79542: PUSH
79543: LD_INT 51
79545: PUSH
79546: LD_INT 32
79548: PUSH
79549: LD_EXP 34
79553: PUSH
79554: EMPTY
79555: LIST
79556: LIST
79557: LIST
79558: LIST
79559: IN
79560: NOT
79561: OR
79562: IFFALSE 79566
// exit ;
79564: GO 79664
// for i := 1 to 3 do
79566: LD_ADDR_VAR 0 3
79570: PUSH
79571: DOUBLE
79572: LD_INT 1
79574: DEC
79575: ST_TO_ADDR
79576: LD_INT 3
79578: PUSH
79579: FOR_TO
79580: IFFALSE 79662
// begin tmp := GetCargo ( cargo , i ) ;
79582: LD_ADDR_VAR 0 4
79586: PUSH
79587: LD_VAR 0 1
79591: PPUSH
79592: LD_VAR 0 3
79596: PPUSH
79597: CALL_OW 289
79601: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79602: LD_ADDR_VAR 0 2
79606: PUSH
79607: LD_VAR 0 2
79611: PPUSH
79612: LD_VAR 0 3
79616: PPUSH
79617: LD_VAR 0 4
79621: PPUSH
79622: CALL_OW 1
79626: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79627: LD_ADDR_VAR 0 2
79631: PUSH
79632: LD_VAR 0 2
79636: PPUSH
79637: LD_INT 4
79639: PPUSH
79640: LD_VAR 0 2
79644: PUSH
79645: LD_INT 4
79647: ARRAY
79648: PUSH
79649: LD_VAR 0 4
79653: PLUS
79654: PPUSH
79655: CALL_OW 1
79659: ST_TO_ADDR
// end ;
79660: GO 79579
79662: POP
79663: POP
// end ;
79664: LD_VAR 0 2
79668: RET
// export function Length ( array ) ; begin
79669: LD_INT 0
79671: PPUSH
// result := array + 0 ;
79672: LD_ADDR_VAR 0 2
79676: PUSH
79677: LD_VAR 0 1
79681: PUSH
79682: LD_INT 0
79684: PLUS
79685: ST_TO_ADDR
// end ;
79686: LD_VAR 0 2
79690: RET
// export function PrepareArray ( array ) ; begin
79691: LD_INT 0
79693: PPUSH
// result := array diff 0 ;
79694: LD_ADDR_VAR 0 2
79698: PUSH
79699: LD_VAR 0 1
79703: PUSH
79704: LD_INT 0
79706: DIFF
79707: ST_TO_ADDR
// if not result [ 1 ] then
79708: LD_VAR 0 2
79712: PUSH
79713: LD_INT 1
79715: ARRAY
79716: NOT
79717: IFFALSE 79737
// result := Delete ( result , 1 ) ;
79719: LD_ADDR_VAR 0 2
79723: PUSH
79724: LD_VAR 0 2
79728: PPUSH
79729: LD_INT 1
79731: PPUSH
79732: CALL_OW 3
79736: ST_TO_ADDR
// end ; end_of_file
79737: LD_VAR 0 2
79741: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79742: LD_VAR 0 1
79746: PUSH
79747: LD_INT 200
79749: DOUBLE
79750: GREATEREQUAL
79751: IFFALSE 79759
79753: LD_INT 299
79755: DOUBLE
79756: LESSEQUAL
79757: IFTRUE 79761
79759: GO 79793
79761: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79762: LD_VAR 0 1
79766: PPUSH
79767: LD_VAR 0 2
79771: PPUSH
79772: LD_VAR 0 3
79776: PPUSH
79777: LD_VAR 0 4
79781: PPUSH
79782: LD_VAR 0 5
79786: PPUSH
79787: CALL 34593 0 5
79791: GO 79870
79793: LD_INT 300
79795: DOUBLE
79796: GREATEREQUAL
79797: IFFALSE 79805
79799: LD_INT 399
79801: DOUBLE
79802: LESSEQUAL
79803: IFTRUE 79807
79805: GO 79869
79807: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79808: LD_VAR 0 1
79812: PPUSH
79813: LD_VAR 0 2
79817: PPUSH
79818: LD_VAR 0 3
79822: PPUSH
79823: LD_VAR 0 4
79827: PPUSH
79828: LD_VAR 0 5
79832: PPUSH
79833: LD_VAR 0 6
79837: PPUSH
79838: LD_VAR 0 7
79842: PPUSH
79843: LD_VAR 0 8
79847: PPUSH
79848: LD_VAR 0 9
79852: PPUSH
79853: LD_VAR 0 10
79857: PPUSH
79858: LD_VAR 0 11
79862: PPUSH
79863: CALL 30922 0 11
79867: GO 79870
79869: POP
// end ;
79870: PPOPN 11
79872: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79873: LD_VAR 0 1
79877: PPUSH
79878: LD_VAR 0 2
79882: PPUSH
79883: LD_VAR 0 3
79887: PPUSH
79888: LD_VAR 0 4
79892: PPUSH
79893: LD_VAR 0 5
79897: PPUSH
79898: CALL 34329 0 5
// end ; end_of_file
79902: PPOPN 5
79904: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79905: LD_VAR 0 1
79909: PPUSH
79910: LD_VAR 0 2
79914: PPUSH
79915: LD_VAR 0 3
79919: PPUSH
79920: LD_VAR 0 4
79924: PPUSH
79925: LD_VAR 0 5
79929: PPUSH
79930: LD_VAR 0 6
79934: PPUSH
79935: CALL 18615 0 6
// end ;
79939: PPOPN 6
79941: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79942: LD_INT 0
79944: PPUSH
// begin if not units then
79945: LD_VAR 0 1
79949: NOT
79950: IFFALSE 79954
// exit ;
79952: GO 79954
// end ;
79954: PPOPN 7
79956: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79957: CALL 18586 0 0
// end ;
79961: PPOPN 1
79963: END
