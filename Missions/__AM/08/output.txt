// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ; export others_gamma ; export gammaCommander , Houten ; export Denis , Joan ; export Sikorski , SikorskyTank , SikorskyArrive , SikorskyTimer , SikorskyAI , SikorskyStatus ; export Harisson , Powell ; export Borodin ; export RuSolMinLevel , RuSolMaxLevel ; export russianAI ; export ruDepot , ruLab , ruFab ; export ruDestroyedBuildings ; export defenders_list ; export firstAttack , secondAttack ; export timerStatus ; export escapeAvalaible ; export amDepot ; export startCutscene ; export JMMArrive ; export supply ; export varEvent1 , macmilan_squad ; export mission_prefix , mission_prefix_prev ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// mission_prefix := 08_ ;
   8: LD_ADDR_EXP 43
  12: PUSH
  13: LD_STRING 08_
  15: ST_TO_ADDR
// mission_prefix_prev := 07c_ ;
  16: LD_ADDR_EXP 44
  20: PUSH
  21: LD_STRING 07c_
  23: ST_TO_ADDR
// JMMArrive = 0 ;
  24: LD_ADDR_EXP 39
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// SikorskyArrive = 0 ;
  32: LD_ADDR_EXP 18
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// SikorskyTimer = 0 0$1 ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_INT 35
  47: ST_TO_ADDR
// SikorskyAI = 0 ;
  48: LD_ADDR_EXP 20
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// SikorskyStatus = 0 ;
  56: LD_ADDR_EXP 21
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// firstAttack = 0 ;
  64: LD_ADDR_EXP 33
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// secondAttack = 0 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// startCutscene = 1 ;
  80: LD_ADDR_EXP 38
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// gammaCommander = LoadVariable ( GammaCommander , 0 ) ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_STRING GammaCommander
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// russianAI = 0 ;
 104: LD_ADDR_EXP 27
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 112: LD_ADDR_EXP 31
 116: PUSH
 117: EMPTY
 118: ST_TO_ADDR
// escapeAvalaible = 0 ;
 119: LD_ADDR_EXP 36
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// defenders_list = [ ] ;
 127: LD_ADDR_EXP 32
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// varEvent1 = 0 ;
 134: LD_ADDR_EXP 41
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// timerStatus = 0 ;
 142: LD_ADDR_EXP 35
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// supply = [ 18 , 17 , 15 ] [ Difficulty ] ;
 150: LD_ADDR_EXP 40
 154: PUSH
 155: LD_INT 18
 157: PUSH
 158: LD_INT 17
 160: PUSH
 161: LD_INT 15
 163: PUSH
 164: EMPTY
 165: LIST
 166: LIST
 167: LIST
 168: PUSH
 169: LD_OWVAR 67
 173: ARRAY
 174: ST_TO_ADDR
// debugMode = 0 ;
 175: LD_ADDR_EXP 45
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// PrepareDifficulty ;
 183: CALL 7526 0 0
// PlaceSeeing ( 43 , 22 , 1 , - 333 ) ;
 187: LD_INT 43
 189: PPUSH
 190: LD_INT 22
 192: PPUSH
 193: LD_INT 1
 195: PPUSH
 196: LD_INT 333
 198: NEG
 199: PPUSH
 200: CALL_OW 330
// RemoveSeeing ( 43 , 22 , 1 ) ;
 204: LD_INT 43
 206: PPUSH
 207: LD_INT 22
 209: PPUSH
 210: LD_INT 1
 212: PPUSH
 213: CALL_OW 331
// PrepareBase ;
 217: CALL 2535 0 0
// PrepareHeroes ;
 221: CALL 519 0 0
// PrepareRussianCommander ;
 225: CALL 6297 0 0
// PrepareRussians ;
 229: CALL 6615 0 0
// AddComBuild ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) , b_depot , 90 , 86 , 3 ) ;
 233: LD_INT 22
 235: PUSH
 236: LD_INT 3
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: LD_INT 25
 245: PUSH
 246: LD_INT 2
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PPUSH
 262: LD_INT 0
 264: PPUSH
 265: LD_INT 90
 267: PPUSH
 268: LD_INT 86
 270: PPUSH
 271: LD_INT 3
 273: PPUSH
 274: CALL_OW 205
// BaseDefendersSpawn ( 3 , RussianBaseTerritory , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 6 , 4 ) ;
 278: LD_INT 3
 280: PPUSH
 281: LD_INT 24
 283: PPUSH
 284: LD_INT 3
 286: PPUSH
 287: LD_EXP 25
 291: PPUSH
 292: LD_EXP 26
 296: PPUSH
 297: CALL_OW 12
 301: PPUSH
 302: LD_INT 6
 304: PPUSH
 305: LD_INT 4
 307: PPUSH
 308: CALL 8936 0 6
// PrepareCutsceneAttack ;
 312: CALL 6349 0 0
// end ;
 316: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 317: LD_EXP 45
 321: PUSH
 322: LD_INT 1
 324: EQUAL
 325: IFFALSE 516
 327: GO 329
 329: DISABLE
 330: LD_INT 0
 332: PPUSH
// begin enable ;
 333: ENABLE
// fogoff ( true ) ;
 334: LD_INT 1
 336: PPUSH
 337: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 21
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 392
// SetLives ( i , 1000 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: LD_INT 1000
 385: PPUSH
 386: CALL_OW 234
 390: GO 375
 392: POP
 393: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 394: LD_ADDR_VAR 0 1
 398: PUSH
 399: LD_INT 22
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PPUSH
 423: CALL_OW 69
 427: PUSH
 428: FOR_IN
 429: IFFALSE 453
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 431: LD_VAR 0 1
 435: PPUSH
 436: CALL_OW 274
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_INT 9999
 446: PPUSH
 447: CALL_OW 277
 451: GO 428
 453: POP
 454: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 1 ] ] ) do
 455: LD_ADDR_VAR 0 1
 459: PUSH
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: FOR_IN
 490: IFFALSE 514
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 492: LD_VAR 0 1
 496: PPUSH
 497: CALL_OW 274
 501: PPUSH
 502: LD_INT 2
 504: PPUSH
 505: LD_INT 9999
 507: PPUSH
 508: CALL_OW 277
 512: GO 489
 514: POP
 515: POP
// end ; end_of_file
 516: PPOPN 1
 518: END
// export function PrepareHeroes ; var i , x , y , d , b , fac , lab , arm , j , placed , ct , bun , tmp , tmp2 ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
 528: PPUSH
 529: PPUSH
 530: PPUSH
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
// uc_side = 1 ;
 536: LD_ADDR_OWVAR 20
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// uc_nation = 1 ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// if gammaCommander = 1 then
 552: LD_EXP 12
 556: PUSH
 557: LD_INT 1
 559: EQUAL
 560: IFFALSE 608
// begin Donaldson = PrepareUnit ( 04_Donaldson , true ) ;
 562: LD_ADDR_EXP 3
 566: PUSH
 567: LD_STRING 04_Donaldson
 569: PPUSH
 570: LD_INT 1
 572: PPUSH
 573: CALL 7033 0 2
 577: ST_TO_ADDR
// PlaceUnitXYR ( Donaldson , 54 , 25 , 8 , false ) ;
 578: LD_EXP 3
 582: PPUSH
 583: LD_INT 54
 585: PPUSH
 586: LD_INT 25
 588: PPUSH
 589: LD_INT 8
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// ComHold ( Donaldson ) ;
 599: LD_EXP 3
 603: PPUSH
 604: CALL_OW 140
// end ; if gammaCommander = 2 then
 608: LD_EXP 12
 612: PUSH
 613: LD_INT 2
 615: EQUAL
 616: IFFALSE 664
// begin Brown = PrepareUnit ( 04_Brown , true ) ;
 618: LD_ADDR_EXP 2
 622: PUSH
 623: LD_STRING 04_Brown
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 7033 0 2
 633: ST_TO_ADDR
// PlaceUnitXYR ( Brown , 54 , 25 , 8 , false ) ;
 634: LD_EXP 2
 638: PPUSH
 639: LD_INT 54
 641: PPUSH
 642: LD_INT 25
 644: PPUSH
 645: LD_INT 8
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 50
// ComHold ( Brown ) ;
 655: LD_EXP 2
 659: PPUSH
 660: CALL_OW 140
// end ; if gammaCommander = 3 then
 664: LD_EXP 12
 668: PUSH
 669: LD_INT 3
 671: EQUAL
 672: IFFALSE 720
// begin Houten = PrepareUnit ( VanHouten , true ) ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_STRING VanHouten
 681: PPUSH
 682: LD_INT 1
 684: PPUSH
 685: CALL 7033 0 2
 689: ST_TO_ADDR
// PlaceUnitXYR ( Houten , 54 , 25 , 8 , false ) ;
 690: LD_EXP 13
 694: PPUSH
 695: LD_INT 54
 697: PPUSH
 698: LD_INT 25
 700: PPUSH
 701: LD_INT 8
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: CALL_OW 50
// ComHold ( Houten ) ;
 711: LD_EXP 13
 715: PPUSH
 716: CALL_OW 140
// end ; Harisson = PrepareUnit ( Harisson , false ) ;
 720: LD_ADDR_EXP 22
 724: PUSH
 725: LD_STRING Harisson
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL 7033 0 2
 735: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 736: LD_ADDR_EXP 23
 740: PUSH
 741: LD_STRING Powell
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 7033 0 2
 751: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) and not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 752: LD_STRING 04_Lisa
 754: PUSH
 755: EMPTY
 756: LIST
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_STRING LisaInDelta
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: AND
 775: PUSH
 776: LD_STRING 07_Lisa
 778: PUSH
 779: EMPTY
 780: LIST
 781: PPUSH
 782: CALL_OW 28
 786: NOT
 787: AND
 788: IFFALSE 824
// begin Lisa := PrepareUnit ( 04_Lisa , true ) ;
 790: LD_ADDR_EXP 6
 794: PUSH
 795: LD_STRING 04_Lisa
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 7033 0 2
 805: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 806: LD_ADDR_VAR 0 15
 810: PUSH
 811: LD_VAR 0 15
 815: PUSH
 816: LD_EXP 6
 820: ADD
 821: ST_TO_ADDR
// end else
 822: GO 876
// if not Lisa and not LoadVariable ( LisaIn07 , false ) then
 824: LD_EXP 6
 828: NOT
 829: PUSH
 830: LD_STRING LisaIn07
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 30
 840: NOT
 841: AND
 842: IFFALSE 876
// begin Lisa := PrepareUnit ( 07_Lisa , true ) ;
 844: LD_ADDR_EXP 6
 848: PUSH
 849: LD_STRING 07_Lisa
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL 7033 0 2
 859: ST_TO_ADDR
// tmp2 := tmp2 ^ Lisa ;
 860: LD_ADDR_VAR 0 15
 864: PUSH
 865: LD_VAR 0 15
 869: PUSH
 870: LD_EXP 6
 874: ADD
 875: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) and not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 876: LD_STRING 04_Bobby
 878: PUSH
 879: EMPTY
 880: LIST
 881: PPUSH
 882: CALL_OW 28
 886: PUSH
 887: LD_STRING BobbyInDelta
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: NOT
 898: AND
 899: PUSH
 900: LD_STRING 07_Bobby
 902: PUSH
 903: EMPTY
 904: LIST
 905: PPUSH
 906: CALL_OW 28
 910: NOT
 911: AND
 912: IFFALSE 948
// begin Bobby := PrepareUnit ( 04_Bobby , true ) ;
 914: LD_ADDR_EXP 4
 918: PUSH
 919: LD_STRING 04_Bobby
 921: PPUSH
 922: LD_INT 1
 924: PPUSH
 925: CALL 7033 0 2
 929: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 930: LD_ADDR_VAR 0 15
 934: PUSH
 935: LD_VAR 0 15
 939: PUSH
 940: LD_EXP 4
 944: ADD
 945: ST_TO_ADDR
// end else
 946: GO 1000
// if not Bobby and not LoadVariable ( BobbyIn07 , false ) then
 948: LD_EXP 4
 952: NOT
 953: PUSH
 954: LD_STRING BobbyIn07
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: CALL_OW 30
 964: NOT
 965: AND
 966: IFFALSE 1000
// begin Bobby := PrepareUnit ( 07_Bobby , true ) ;
 968: LD_ADDR_EXP 4
 972: PUSH
 973: LD_STRING 07_Bobby
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 7033 0 2
 983: ST_TO_ADDR
// tmp2 := tmp2 ^ Bobby ;
 984: LD_ADDR_VAR 0 15
 988: PUSH
 989: LD_VAR 0 15
 993: PUSH
 994: LD_EXP 4
 998: ADD
 999: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) and not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
1000: LD_STRING 04_Cyrus
1002: PUSH
1003: EMPTY
1004: LIST
1005: PPUSH
1006: CALL_OW 28
1010: PUSH
1011: LD_STRING CyrusInDelta
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 30
1021: NOT
1022: AND
1023: PUSH
1024: LD_STRING 07_Cyrus
1026: PUSH
1027: EMPTY
1028: LIST
1029: PPUSH
1030: CALL_OW 28
1034: NOT
1035: AND
1036: IFFALSE 1072
// begin Cyrus := PrepareUnit ( 04_Cyrus , true ) ;
1038: LD_ADDR_EXP 5
1042: PUSH
1043: LD_STRING 04_Cyrus
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 7033 0 2
1053: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1054: LD_ADDR_VAR 0 15
1058: PUSH
1059: LD_VAR 0 15
1063: PUSH
1064: LD_EXP 5
1068: ADD
1069: ST_TO_ADDR
// end else
1070: GO 1124
// if not Cyrus and not LoadVariable ( CyrusIn07 , false ) then
1072: LD_EXP 5
1076: NOT
1077: PUSH
1078: LD_STRING CyrusIn07
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: NOT
1089: AND
1090: IFFALSE 1124
// begin Cyrus := PrepareUnit ( 07_Cyrus , true ) ;
1092: LD_ADDR_EXP 5
1096: PUSH
1097: LD_STRING 07_Cyrus
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL 7033 0 2
1107: ST_TO_ADDR
// tmp2 := tmp2 ^ Cyrus ;
1108: LD_ADDR_VAR 0 15
1112: PUSH
1113: LD_VAR 0 15
1117: PUSH
1118: LD_EXP 5
1122: ADD
1123: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1124: LD_STRING 04_Brown
1126: PUSH
1127: EMPTY
1128: LIST
1129: PPUSH
1130: CALL_OW 28
1134: PUSH
1135: LD_STRING BrownInDelta
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL_OW 30
1145: NOT
1146: AND
1147: PUSH
1148: LD_STRING 07_Brown
1150: PUSH
1151: EMPTY
1152: LIST
1153: PPUSH
1154: CALL_OW 28
1158: NOT
1159: AND
1160: PUSH
1161: LD_EXP 12
1165: PUSH
1166: LD_INT 2
1168: NONEQUAL
1169: AND
1170: IFFALSE 1206
// begin Brown := PrepareUnit ( 04_Brown , true ) ;
1172: LD_ADDR_EXP 2
1176: PUSH
1177: LD_STRING 04_Brown
1179: PPUSH
1180: LD_INT 1
1182: PPUSH
1183: CALL 7033 0 2
1187: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1188: LD_ADDR_VAR 0 15
1192: PUSH
1193: LD_VAR 0 15
1197: PUSH
1198: LD_EXP 2
1202: ADD
1203: ST_TO_ADDR
// end else
1204: GO 1268
// if not Brown and not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1206: LD_EXP 2
1210: NOT
1211: PUSH
1212: LD_STRING BrownIn07
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 30
1222: NOT
1223: AND
1224: PUSH
1225: LD_EXP 12
1229: PUSH
1230: LD_INT 2
1232: NONEQUAL
1233: AND
1234: IFFALSE 1268
// begin Brown := PrepareUnit ( 07_Brown , true ) ;
1236: LD_ADDR_EXP 2
1240: PUSH
1241: LD_STRING 07_Brown
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 7033 0 2
1251: ST_TO_ADDR
// tmp2 := tmp2 ^ Brown ;
1252: LD_ADDR_VAR 0 15
1256: PUSH
1257: LD_VAR 0 15
1261: PUSH
1262: LD_EXP 2
1266: ADD
1267: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1268: LD_STRING 04_Donaldson
1270: PUSH
1271: EMPTY
1272: LIST
1273: PPUSH
1274: CALL_OW 28
1278: PUSH
1279: LD_STRING DonaldsonInDelta
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 30
1289: NOT
1290: AND
1291: PUSH
1292: LD_STRING 07_Donaldson
1294: PUSH
1295: EMPTY
1296: LIST
1297: PPUSH
1298: CALL_OW 28
1302: NOT
1303: AND
1304: PUSH
1305: LD_EXP 12
1309: PUSH
1310: LD_INT 1
1312: NONEQUAL
1313: AND
1314: IFFALSE 1350
// begin Donaldson := PrepareUnit ( 04_Donaldson , true ) ;
1316: LD_ADDR_EXP 3
1320: PUSH
1321: LD_STRING 04_Donaldson
1323: PPUSH
1324: LD_INT 1
1326: PPUSH
1327: CALL 7033 0 2
1331: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1332: LD_ADDR_VAR 0 15
1336: PUSH
1337: LD_VAR 0 15
1341: PUSH
1342: LD_EXP 3
1346: ADD
1347: ST_TO_ADDR
// end else
1348: GO 1412
// if not Donaldson and not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1350: LD_EXP 3
1354: NOT
1355: PUSH
1356: LD_STRING DonaldsonIn07
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: CALL_OW 30
1366: NOT
1367: AND
1368: PUSH
1369: LD_EXP 12
1373: PUSH
1374: LD_INT 1
1376: NONEQUAL
1377: AND
1378: IFFALSE 1412
// begin Donaldson := PrepareUnit ( 07_Donaldson , true ) ;
1380: LD_ADDR_EXP 3
1384: PUSH
1385: LD_STRING 07_Donaldson
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: CALL 7033 0 2
1395: ST_TO_ADDR
// tmp2 := tmp2 ^ Donaldson ;
1396: LD_ADDR_VAR 0 15
1400: PUSH
1401: LD_VAR 0 15
1405: PUSH
1406: LD_EXP 3
1410: ADD
1411: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1412: LD_STRING KhatamIn07
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 30
1422: NOT
1423: IFFALSE 1457
// begin Khatam := PrepareUnit ( 07_Khatam , true ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING 07_Khatam
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: CALL 7033 0 2
1440: ST_TO_ADDR
// tmp2 := tmp2 ^ Khatam ;
1441: LD_ADDR_VAR 0 15
1445: PUSH
1446: LD_VAR 0 15
1450: PUSH
1451: LD_EXP 10
1455: ADD
1456: ST_TO_ADDR
// end ; others_gamma = CreateCharacterSet ( 07_othersGamma ) ;
1457: LD_ADDR_EXP 11
1461: PUSH
1462: LD_STRING 07_othersGamma
1464: PPUSH
1465: CALL_OW 31
1469: ST_TO_ADDR
// tmp := 8 - others_gamma ;
1470: LD_ADDR_VAR 0 14
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_EXP 11
1482: MINUS
1483: ST_TO_ADDR
// if tmp then
1484: LD_VAR 0 14
1488: IFFALSE 1541
// for i = 1 to tmp do
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_VAR 0 14
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1539
// begin PrepareHuman ( false , 1 , 5 ) ;
1508: LD_INT 0
1510: PPUSH
1511: LD_INT 1
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 380
// others_gamma := others_gamma ^ CreateHuman ;
1521: LD_ADDR_EXP 11
1525: PUSH
1526: LD_EXP 11
1530: PUSH
1531: CALL_OW 44
1535: ADD
1536: ST_TO_ADDR
// end ;
1537: GO 1505
1539: POP
1540: POP
// if HexInfo ( 61 , 29 ) = 0 then
1541: LD_INT 61
1543: PPUSH
1544: LD_INT 29
1546: PPUSH
1547: CALL_OW 428
1551: PUSH
1552: LD_INT 0
1554: EQUAL
1555: IFFALSE 1586
// begin bc_type := b_barracks ;
1557: LD_ADDR_OWVAR 42
1561: PUSH
1562: LD_INT 5
1564: ST_TO_ADDR
// bc_level := 6 ;
1565: LD_ADDR_OWVAR 43
1569: PUSH
1570: LD_INT 6
1572: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
1573: LD_INT 61
1575: PPUSH
1576: LD_INT 29
1578: PPUSH
1579: LD_INT 5
1581: PPUSH
1582: CALL_OW 47
// end ; bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1586: LD_ADDR_VAR 0 13
1590: PUSH
1591: LD_INT 22
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 30
1603: PUSH
1604: LD_INT 31
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PPUSH
1615: CALL_OW 69
1619: ST_TO_ADDR
// for i in bun do
1620: LD_ADDR_VAR 0 2
1624: PUSH
1625: LD_VAR 0 13
1629: PUSH
1630: FOR_IN
1631: IFFALSE 1763
// begin x := GetX ( i ) ;
1633: LD_ADDR_VAR 0 3
1637: PUSH
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 250
1647: ST_TO_ADDR
// y := GetY ( i ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_VAR 0 2
1657: PPUSH
1658: CALL_OW 251
1662: ST_TO_ADDR
// d := GetDir ( i ) ;
1663: LD_ADDR_VAR 0 5
1667: PUSH
1668: LD_VAR 0 2
1672: PPUSH
1673: CALL_OW 254
1677: ST_TO_ADDR
// RemoveUnit ( i ) ;
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 64
// bc_type := b_bunker ;
1687: LD_ADDR_OWVAR 42
1691: PUSH
1692: LD_INT 32
1694: ST_TO_ADDR
// bc_level := 6 ;
1695: LD_ADDR_OWVAR 43
1699: PUSH
1700: LD_INT 6
1702: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1703: LD_ADDR_VAR 0 6
1707: PUSH
1708: LD_VAR 0 3
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: LD_VAR 0 5
1722: PPUSH
1723: CALL_OW 47
1727: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1728: LD_VAR 0 6
1732: PPUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 4
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_VAR 0 2
1747: PUSH
1748: LD_INT 2
1750: MOD
1751: PUSH
1752: LD_INT 1
1754: PLUS
1755: ARRAY
1756: PPUSH
1757: CALL_OW 431
// end ;
1761: GO 1630
1763: POP
1764: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1765: LD_ADDR_VAR 0 9
1769: PUSH
1770: LD_INT 22
1772: PUSH
1773: LD_INT 1
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 30
1782: PUSH
1783: LD_INT 5
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PPUSH
1794: CALL_OW 69
1798: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1799: LD_ADDR_VAR 0 8
1803: PUSH
1804: LD_INT 22
1806: PUSH
1807: LD_INT 1
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 2
1816: PUSH
1817: LD_INT 30
1819: PUSH
1820: LD_INT 6
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PUSH
1827: LD_INT 30
1829: PUSH
1830: LD_INT 7
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 8
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1862: LD_ADDR_VAR 0 7
1866: PUSH
1867: LD_INT 22
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 30
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PPUSH
1891: CALL_OW 69
1895: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 22
1903: PUSH
1904: LD_INT 1
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 30
1913: PUSH
1914: LD_INT 36
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PPUSH
1925: CALL_OW 69
1929: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1930: LD_ADDR_VAR 0 13
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 2
1947: PUSH
1948: LD_INT 30
1950: PUSH
1951: LD_INT 31
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 30
1960: PUSH
1961: LD_INT 32
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: ST_TO_ADDR
// for i in others_gamma ^ tmp2 do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_EXP 11
1991: PUSH
1992: LD_VAR 0 15
1996: ADD
1997: PUSH
1998: FOR_IN
1999: IFFALSE 2420
// begin placed := false ;
2001: LD_ADDR_VAR 0 11
2005: PUSH
2006: LD_INT 0
2008: ST_TO_ADDR
// if GetClass ( i ) = 1 then
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL_OW 257
2018: PUSH
2019: LD_INT 1
2021: EQUAL
2022: IFFALSE 2147
// begin if UnitFilter ( bun , [ f_empty ] ) then
2024: LD_VAR 0 13
2028: PPUSH
2029: LD_INT 58
2031: PUSH
2032: EMPTY
2033: LIST
2034: PPUSH
2035: CALL_OW 72
2039: IFFALSE 2078
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PPUSH
2046: LD_VAR 0 13
2050: PPUSH
2051: LD_INT 58
2053: PUSH
2054: EMPTY
2055: LIST
2056: PPUSH
2057: CALL_OW 72
2061: PUSH
2062: LD_INT 1
2064: ARRAY
2065: PPUSH
2066: CALL_OW 52
// placed := true ;
2070: LD_ADDR_VAR 0 11
2074: PUSH
2075: LD_INT 1
2077: ST_TO_ADDR
// end ; if arm and not placed then
2078: LD_VAR 0 9
2082: PUSH
2083: LD_VAR 0 11
2087: NOT
2088: AND
2089: IFFALSE 2147
// begin for j in arm do
2091: LD_ADDR_VAR 0 10
2095: PUSH
2096: LD_VAR 0 9
2100: PUSH
2101: FOR_IN
2102: IFFALSE 2145
// if UnitsInside ( j ) < 6 then
2104: LD_VAR 0 10
2108: PPUSH
2109: CALL_OW 313
2113: PUSH
2114: LD_INT 6
2116: LESS
2117: IFFALSE 2143
// begin PlaceHumanInUnit ( i , j ) ;
2119: LD_VAR 0 2
2123: PPUSH
2124: LD_VAR 0 10
2128: PPUSH
2129: CALL_OW 52
// placed := true ;
2133: LD_ADDR_VAR 0 11
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// break ;
2141: GO 2145
// end ;
2143: GO 2101
2145: POP
2146: POP
// end ; end ; if GetClass ( i ) = 2 then
2147: LD_VAR 0 2
2151: PPUSH
2152: CALL_OW 257
2156: PUSH
2157: LD_INT 2
2159: EQUAL
2160: IFFALSE 2193
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 52
2169: PPUSH
2170: LD_INT 20
2172: PPUSH
2173: LD_INT 6
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
// placed := true ;
2183: LD_ADDR_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ST_TO_ADDR
// continue ;
2191: GO 1998
// end ; if GetClass ( i ) = 3 then
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 257
2202: PUSH
2203: LD_INT 3
2205: EQUAL
2206: IFFALSE 2310
// if fac then
2208: LD_VAR 0 7
2212: IFFALSE 2310
// begin if ct then
2214: LD_VAR 0 12
2218: IFFALSE 2246
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 12
2229: PUSH
2230: LD_INT 1
2232: ARRAY
2233: PPUSH
2234: CALL_OW 52
// placed := true ;
2238: LD_ADDR_VAR 0 11
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// end ; if placed then
2246: LD_VAR 0 11
2250: IFFALSE 2254
// continue ;
2252: GO 1998
// for j in fac do
2254: LD_ADDR_VAR 0 10
2258: PUSH
2259: LD_VAR 0 7
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2308
// if UnitsInside ( j ) < 6 then
2267: LD_VAR 0 10
2271: PPUSH
2272: CALL_OW 313
2276: PUSH
2277: LD_INT 6
2279: LESS
2280: IFFALSE 2306
// begin PlaceHumanInUnit ( i , j ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 10
2291: PPUSH
2292: CALL_OW 52
// placed := true ;
2296: LD_ADDR_VAR 0 11
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// break ;
2304: GO 2308
// end ;
2306: GO 2264
2308: POP
2309: POP
// end ; if GetClass ( i ) = 4 then
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 257
2319: PUSH
2320: LD_INT 4
2322: EQUAL
2323: IFFALSE 2387
// if lab then
2325: LD_VAR 0 8
2329: IFFALSE 2387
// begin for j in lab do
2331: LD_ADDR_VAR 0 10
2335: PUSH
2336: LD_VAR 0 8
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2385
// if UnitsInside ( j ) < 6 then
2344: LD_VAR 0 10
2348: PPUSH
2349: CALL_OW 313
2353: PUSH
2354: LD_INT 6
2356: LESS
2357: IFFALSE 2383
// begin PlaceHumanInUnit ( i , j ) ;
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_VAR 0 10
2368: PPUSH
2369: CALL_OW 52
// placed := true ;
2373: LD_ADDR_VAR 0 11
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// break ;
2381: GO 2385
// end ;
2383: GO 2341
2385: POP
2386: POP
// end ; if not placed then
2387: LD_VAR 0 11
2391: NOT
2392: IFFALSE 2418
// begin PlaceUnitArea ( i , GammaSpawn , false ) ;
2394: LD_VAR 0 2
2398: PPUSH
2399: LD_INT 5
2401: PPUSH
2402: LD_INT 0
2404: PPUSH
2405: CALL_OW 49
// ComHold ( i ) ;
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL_OW 140
// end ; end ;
2418: GO 1998
2420: POP
2421: POP
// if ct then
2422: LD_VAR 0 12
2426: IFFALSE 2530
// if UnitsInside ( ct [ 1 ] ) then
2428: LD_VAR 0 12
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 313
2441: IFFALSE 2530
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: LD_INT 22
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 33
2460: PUSH
2461: LD_INT 2
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL_OW 69
2476: PUSH
2477: FOR_IN
2478: IFFALSE 2528
// ComLinkTo ( i , UnitsInside ( ct [ 1 ] ) [ rand ( 1 , UnitsInside ( ct [ 1 ] ) ) ] ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_VAR 0 12
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 313
2498: PUSH
2499: LD_INT 1
2501: PPUSH
2502: LD_VAR 0 12
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: PPUSH
2511: CALL_OW 313
2515: PPUSH
2516: CALL_OW 12
2520: ARRAY
2521: PPUSH
2522: CALL_OW 135
2526: GO 2477
2528: POP
2529: POP
// end ; end ;
2530: LD_VAR 0 1
2534: RET
// export function PrepareBase ; var blist , i , b , veh , tmp ; begin
2535: LD_INT 0
2537: PPUSH
2538: PPUSH
2539: PPUSH
2540: PPUSH
2541: PPUSH
2542: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2543: LD_INT 71
2545: PPUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2556: LD_ADDR_VAR 0 2
2560: PUSH
2561: LD_STRING GammaBase
2563: PPUSH
2564: EMPTY
2565: PPUSH
2566: CALL_OW 30
2570: ST_TO_ADDR
// if not blist then
2571: LD_VAR 0 2
2575: NOT
2576: IFFALSE 2616
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: LD_INT 52
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 3
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 0
2600: PUSH
2601: LD_INT 0
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: PUSH
2613: EMPTY
2614: LIST
2615: ST_TO_ADDR
// uc_side := 1 ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_INT 1
2623: ST_TO_ADDR
// uc_nation := 1 ;
2624: LD_ADDR_OWVAR 21
2628: PUSH
2629: LD_INT 1
2631: ST_TO_ADDR
// bc_kind1 := - 1 ;
2632: LD_ADDR_OWVAR 44
2636: PUSH
2637: LD_INT 1
2639: NEG
2640: ST_TO_ADDR
// bc_kind2 := - 1 ;
2641: LD_ADDR_OWVAR 45
2645: PUSH
2646: LD_INT 1
2648: NEG
2649: ST_TO_ADDR
// for i in blist do
2650: LD_ADDR_VAR 0 3
2654: PUSH
2655: LD_VAR 0 2
2659: PUSH
2660: FOR_IN
2661: IFFALSE 2941
// begin bc_type := i [ 1 ] ;
2663: LD_ADDR_OWVAR 42
2667: PUSH
2668: LD_VAR 0 3
2672: PUSH
2673: LD_INT 1
2675: ARRAY
2676: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2677: LD_ADDR_OWVAR 43
2681: PUSH
2682: LD_VAR 0 3
2686: PUSH
2687: LD_INT 5
2689: ARRAY
2690: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2691: LD_OWVAR 42
2695: PUSH
2696: LD_INT 6
2698: PUSH
2699: LD_INT 7
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: IN
2706: IFFALSE 2776
// begin bc_type := b_lab_half ;
2708: LD_ADDR_OWVAR 42
2712: PUSH
2713: LD_INT 7
2715: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2716: LD_STRING 06_remoteVehs_1
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 30
2726: IFFALSE 2776
// begin if i [ 7 ] > 9 then
2728: LD_VAR 0 3
2732: PUSH
2733: LD_INT 7
2735: ARRAY
2736: PUSH
2737: LD_INT 9
2739: GREATER
2740: IFFALSE 2768
// begin bc_type := b_lab_full ;
2742: LD_ADDR_OWVAR 42
2746: PUSH
2747: LD_INT 8
2749: ST_TO_ADDR
// bc_kind1 := 10 ;
2750: LD_ADDR_OWVAR 44
2754: PUSH
2755: LD_INT 10
2757: ST_TO_ADDR
// bc_kind2 := 15 ;
2758: LD_ADDR_OWVAR 45
2762: PUSH
2763: LD_INT 15
2765: ST_TO_ADDR
// end else
2766: GO 2776
// bc_kind1 := 15 ;
2768: LD_ADDR_OWVAR 44
2772: PUSH
2773: LD_INT 15
2775: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2776: LD_OWVAR 42
2780: PUSH
2781: LD_INT 2
2783: EQUAL
2784: IFFALSE 2794
// bc_type := b_factory ;
2786: LD_ADDR_OWVAR 42
2790: PUSH
2791: LD_INT 3
2793: ST_TO_ADDR
// if bc_type = b_depot then
2794: LD_OWVAR 42
2798: PUSH
2799: LD_INT 0
2801: EQUAL
2802: IFFALSE 2851
// begin bc_type := b_warehouse ;
2804: LD_ADDR_OWVAR 42
2808: PUSH
2809: LD_INT 1
2811: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2812: LD_ADDR_EXP 37
2816: PUSH
2817: LD_VAR 0 3
2821: PUSH
2822: LD_INT 2
2824: ARRAY
2825: PPUSH
2826: LD_VAR 0 3
2830: PUSH
2831: LD_INT 3
2833: ARRAY
2834: PPUSH
2835: LD_VAR 0 3
2839: PUSH
2840: LD_INT 4
2842: ARRAY
2843: PPUSH
2844: CALL_OW 47
2848: ST_TO_ADDR
// continue ;
2849: GO 2660
// end ; if bc_type = b_armoury then
2851: LD_OWVAR 42
2855: PUSH
2856: LD_INT 4
2858: EQUAL
2859: IFFALSE 2869
// bc_type = b_barracks ;
2861: LD_ADDR_OWVAR 42
2865: PUSH
2866: LD_INT 5
2868: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2869: LD_ADDR_VAR 0 4
2873: PUSH
2874: LD_VAR 0 3
2878: PUSH
2879: LD_INT 2
2881: ARRAY
2882: PPUSH
2883: LD_VAR 0 3
2887: PUSH
2888: LD_INT 3
2890: ARRAY
2891: PPUSH
2892: LD_VAR 0 3
2896: PUSH
2897: LD_INT 4
2899: ARRAY
2900: PPUSH
2901: CALL_OW 47
2905: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2906: LD_VAR 0 4
2910: PPUSH
2911: CALL_OW 266
2915: PUSH
2916: LD_INT 32
2918: EQUAL
2919: IFFALSE 2939
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2921: LD_VAR 0 4
2925: PPUSH
2926: LD_VAR 0 3
2930: PUSH
2931: LD_INT 7
2933: ARRAY
2934: PPUSH
2935: CALL_OW 431
// end ;
2939: GO 2660
2941: POP
2942: POP
// if not amDepot then
2943: LD_EXP 37
2947: NOT
2948: IFFALSE 2985
// begin bc_type := b_warehouse ;
2950: LD_ADDR_OWVAR 42
2954: PUSH
2955: LD_INT 1
2957: ST_TO_ADDR
// bc_level := 6 ;
2958: LD_ADDR_OWVAR 43
2962: PUSH
2963: LD_INT 6
2965: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2966: LD_ADDR_EXP 37
2970: PUSH
2971: LD_INT 52
2973: PPUSH
2974: LD_INT 12
2976: PPUSH
2977: LD_INT 3
2979: PPUSH
2980: CALL_OW 47
2984: ST_TO_ADDR
// end ; SetBName ( amDepot , gamma ) ;
2985: LD_EXP 37
2989: PPUSH
2990: LD_STRING gamma
2992: PPUSH
2993: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 500 , 420 , 350 ] [ Difficulty ] ) ;
2997: LD_EXP 37
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 1
3009: PPUSH
3010: LD_INT 500
3012: PUSH
3013: LD_INT 420
3015: PUSH
3016: LD_INT 350
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_OWVAR 67
3028: ARRAY
3029: PPUSH
3030: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 200 ) ;
3034: LD_EXP 37
3038: PPUSH
3039: CALL_OW 274
3043: PPUSH
3044: LD_INT 2
3046: PPUSH
3047: LD_INT 200
3049: PPUSH
3050: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3054: LD_INT 22
3056: PUSH
3057: LD_INT 1
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PUSH
3064: LD_INT 30
3066: PUSH
3067: LD_INT 3
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PPUSH
3078: CALL_OW 69
3082: IFFALSE 3330
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3084: LD_ADDR_VAR 0 4
3088: PUSH
3089: LD_INT 22
3091: PUSH
3092: LD_INT 1
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 30
3101: PUSH
3102: LD_INT 3
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: PUSH
3109: EMPTY
3110: LIST
3111: LIST
3112: PPUSH
3113: CALL_OW 69
3117: PUSH
3118: LD_INT 1
3120: ARRAY
3121: ST_TO_ADDR
// tmp := MCB_Extension ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3122: LD_ADDR_VAR 0 6
3126: PUSH
3127: LD_VAR 0 4
3131: PPUSH
3132: CALL_OW 250
3136: PPUSH
3137: LD_VAR 0 4
3141: PPUSH
3142: CALL_OW 251
3146: PPUSH
3147: LD_VAR 0 4
3151: PPUSH
3152: CALL_OW 254
3156: PPUSH
3157: CALL 16848 0 3
3161: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3162: LD_ADDR_VAR 0 2
3166: PUSH
3167: LD_INT 19
3169: PUSH
3170: LD_INT 17
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3177: LD_STRING 06_remoteVehs_1
3179: PPUSH
3180: LD_INT 0
3182: PPUSH
3183: CALL_OW 30
3187: IFFALSE 3210
// blist := Insert ( blist , 1 , b_ext_radar ) ;
3189: LD_ADDR_VAR 0 2
3193: PUSH
3194: LD_VAR 0 2
3198: PPUSH
3199: LD_INT 1
3201: PPUSH
3202: LD_INT 20
3204: PPUSH
3205: CALL_OW 2
3209: ST_TO_ADDR
// for i in tmp do
3210: LD_ADDR_VAR 0 3
3214: PUSH
3215: LD_VAR 0 6
3219: PUSH
3220: FOR_IN
3221: IFFALSE 3328
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3223: LD_VAR 0 3
3227: PUSH
3228: LD_INT 1
3230: ARRAY
3231: PPUSH
3232: LD_VAR 0 3
3236: PUSH
3237: LD_INT 2
3239: ARRAY
3240: PPUSH
3241: CALL_OW 428
3245: PUSH
3246: LD_INT 0
3248: EQUAL
3249: IFFALSE 3326
// begin bc_type := blist [ 1 ] ;
3251: LD_ADDR_OWVAR 42
3255: PUSH
3256: LD_VAR 0 2
3260: PUSH
3261: LD_INT 1
3263: ARRAY
3264: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3265: LD_VAR 0 3
3269: PUSH
3270: LD_INT 1
3272: ARRAY
3273: PPUSH
3274: LD_VAR 0 3
3278: PUSH
3279: LD_INT 2
3281: ARRAY
3282: PPUSH
3283: LD_VAR 0 3
3287: PUSH
3288: LD_INT 3
3290: ARRAY
3291: PPUSH
3292: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3296: LD_ADDR_VAR 0 2
3300: PUSH
3301: LD_VAR 0 2
3305: PPUSH
3306: LD_INT 1
3308: PPUSH
3309: CALL_OW 3
3313: ST_TO_ADDR
// if blist = 0 then
3314: LD_VAR 0 2
3318: PUSH
3319: LD_INT 0
3321: EQUAL
3322: IFFALSE 3326
// break ;
3324: GO 3328
// end ;
3326: GO 3220
3328: POP
3329: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3330: LD_STRING 06_remoteVehs_1
3332: PPUSH
3333: LD_INT 0
3335: PPUSH
3336: CALL_OW 30
3340: IFFALSE 3799
// begin bc_type = 36 ;
3342: LD_ADDR_OWVAR 42
3346: PUSH
3347: LD_INT 36
3349: ST_TO_ADDR
// bc_level = 4 ;
3350: LD_ADDR_OWVAR 43
3354: PUSH
3355: LD_INT 4
3357: ST_TO_ADDR
// if CanBeBuilded ( amDepot , b_control_tower , 62 , 12 , 3 , false ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3358: LD_EXP 37
3362: PPUSH
3363: LD_INT 36
3365: PPUSH
3366: LD_INT 62
3368: PPUSH
3369: LD_INT 12
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: LD_INT 0
3377: PPUSH
3378: CALL 17718 0 6
3382: PUSH
3383: LD_INT 92
3385: PUSH
3386: LD_INT 62
3388: PUSH
3389: LD_INT 12
3391: PUSH
3392: LD_INT 3
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: PPUSH
3401: CALL_OW 69
3405: NOT
3406: AND
3407: IFFALSE 3424
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3409: LD_INT 62
3411: PPUSH
3412: LD_INT 12
3414: PPUSH
3415: LD_INT 3
3417: PPUSH
3418: CALL_OW 47
3422: GO 3595
// if CanBeBuilded ( amDepot , b_control_tower , 37 , 18 , 2 , false ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3424: LD_EXP 37
3428: PPUSH
3429: LD_INT 36
3431: PPUSH
3432: LD_INT 37
3434: PPUSH
3435: LD_INT 18
3437: PPUSH
3438: LD_INT 2
3440: PPUSH
3441: LD_INT 0
3443: PPUSH
3444: CALL 17718 0 6
3448: PUSH
3449: LD_INT 92
3451: PUSH
3452: LD_INT 37
3454: PUSH
3455: LD_INT 18
3457: PUSH
3458: LD_INT 3
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: PPUSH
3467: CALL_OW 69
3471: NOT
3472: AND
3473: IFFALSE 3490
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3475: LD_INT 37
3477: PPUSH
3478: LD_INT 18
3480: PPUSH
3481: LD_INT 2
3483: PPUSH
3484: CALL_OW 47
3488: GO 3595
// if CanBeBuilded ( amDepot , b_control_tower , 66 , 14 , 4 , false ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3490: LD_EXP 37
3494: PPUSH
3495: LD_INT 36
3497: PPUSH
3498: LD_INT 66
3500: PPUSH
3501: LD_INT 14
3503: PPUSH
3504: LD_INT 4
3506: PPUSH
3507: LD_INT 0
3509: PPUSH
3510: CALL 17718 0 6
3514: PUSH
3515: LD_INT 92
3517: PUSH
3518: LD_INT 66
3520: PUSH
3521: LD_INT 14
3523: PUSH
3524: LD_INT 3
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: PPUSH
3533: CALL_OW 69
3537: NOT
3538: AND
3539: IFFALSE 3556
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3541: LD_INT 66
3543: PPUSH
3544: LD_INT 14
3546: PPUSH
3547: LD_INT 4
3549: PPUSH
3550: CALL_OW 47
3554: GO 3595
// if CanBeBuilded ( amDepot , b_control_tower , 74 , 26 , 4 , false ) then
3556: LD_EXP 37
3560: PPUSH
3561: LD_INT 36
3563: PPUSH
3564: LD_INT 74
3566: PPUSH
3567: LD_INT 26
3569: PPUSH
3570: LD_INT 4
3572: PPUSH
3573: LD_INT 0
3575: PPUSH
3576: CALL 17718 0 6
3580: IFFALSE 3595
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3582: LD_INT 74
3584: PPUSH
3585: LD_INT 26
3587: PPUSH
3588: LD_INT 4
3590: PPUSH
3591: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3595: LD_INT 22
3597: PUSH
3598: LD_INT 1
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: PUSH
3605: LD_INT 30
3607: PUSH
3608: LD_INT 36
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: PPUSH
3619: CALL_OW 69
3623: NOT
3624: IFFALSE 3628
// exit ;
3626: GO 3799
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3628: LD_ADDR_VAR 0 3
3632: PUSH
3633: DOUBLE
3634: LD_INT 1
3636: DEC
3637: ST_TO_ADDR
3638: LD_INT 3
3640: PUSH
3641: LD_INT 2
3643: PUSH
3644: LD_INT 2
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: LIST
3651: PUSH
3652: LD_OWVAR 67
3656: ARRAY
3657: PUSH
3658: FOR_TO
3659: IFFALSE 3797
// begin vc_chassis = [ 3 , [ 2 , 3 ] [ Rand ( 1 , 2 ) ] , 2 ] [ Difficulty ] ;
3661: LD_ADDR_OWVAR 37
3665: PUSH
3666: LD_INT 3
3668: PUSH
3669: LD_INT 2
3671: PUSH
3672: LD_INT 3
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: PUSH
3679: LD_INT 1
3681: PPUSH
3682: LD_INT 2
3684: PPUSH
3685: CALL_OW 12
3689: ARRAY
3690: PUSH
3691: LD_INT 2
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: LIST
3698: PUSH
3699: LD_OWVAR 67
3703: ARRAY
3704: ST_TO_ADDR
// vc_engine = 1 ;
3705: LD_ADDR_OWVAR 39
3709: PUSH
3710: LD_INT 1
3712: ST_TO_ADDR
// vc_control = 2 ;
3713: LD_ADDR_OWVAR 38
3717: PUSH
3718: LD_INT 2
3720: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
3721: LD_ADDR_OWVAR 40
3725: PUSH
3726: LD_INT 3
3728: PUSH
3729: LD_INT 4
3731: PUSH
3732: LD_INT 5
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: LIST
3739: PUSH
3740: LD_INT 1
3742: PPUSH
3743: LD_INT 3
3745: PPUSH
3746: CALL_OW 12
3750: ARRAY
3751: ST_TO_ADDR
// veh = CreateVehicle ;
3752: LD_ADDR_VAR 0 5
3756: PUSH
3757: CALL_OW 45
3761: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3762: LD_VAR 0 5
3766: PPUSH
3767: LD_INT 4
3769: PPUSH
3770: CALL_OW 233
// PlaceUnitXYR ( veh , 56 , 17 , 9 , false ) ;
3774: LD_VAR 0 5
3778: PPUSH
3779: LD_INT 56
3781: PPUSH
3782: LD_INT 17
3784: PPUSH
3785: LD_INT 9
3787: PPUSH
3788: LD_INT 0
3790: PPUSH
3791: CALL_OW 50
// end ;
3795: GO 3658
3797: POP
3798: POP
// end ; end ;
3799: LD_VAR 0 1
3803: RET
// export function PrepareSupportFromDelta ; var i , j , other ; begin
3804: LD_INT 0
3806: PPUSH
3807: PPUSH
3808: PPUSH
3809: PPUSH
// uc_side = 1 ;
3810: LD_ADDR_OWVAR 20
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// uc_nation = 1 ;
3818: LD_ADDR_OWVAR 21
3822: PUSH
3823: LD_INT 1
3825: ST_TO_ADDR
// Denis = PrepareUnit ( 06c_Denis , true ) ;
3826: LD_ADDR_EXP 14
3830: PUSH
3831: LD_STRING 06c_Denis
3833: PPUSH
3834: LD_INT 1
3836: PPUSH
3837: CALL 7033 0 2
3841: ST_TO_ADDR
// PlaceUnitArea ( Denis , GammaSupport , false ) ;
3842: LD_EXP 14
3846: PPUSH
3847: LD_INT 4
3849: PPUSH
3850: LD_INT 0
3852: PPUSH
3853: CALL_OW 49
// Joan = PrepareUnit ( 06c_Joan , true ) ;
3857: LD_ADDR_EXP 15
3861: PUSH
3862: LD_STRING 06c_Joan
3864: PPUSH
3865: LD_INT 1
3867: PPUSH
3868: CALL 7033 0 2
3872: ST_TO_ADDR
// PlaceUnitArea ( Joan , GammaSupport , false ) ;
3873: LD_EXP 15
3877: PPUSH
3878: LD_INT 4
3880: PPUSH
3881: LD_INT 0
3883: PPUSH
3884: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
3888: LD_STRING GladstoneIn07
3890: PPUSH
3891: LD_INT 0
3893: PPUSH
3894: CALL_OW 30
3898: NOT
3899: IFFALSE 3967
// begin Gladstone = PrepareUnit ( 06c_Gladstone , true ) ;
3901: LD_ADDR_EXP 8
3905: PUSH
3906: LD_STRING 06c_Gladstone
3908: PPUSH
3909: LD_INT 1
3911: PPUSH
3912: CALL 7033 0 2
3916: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
3917: LD_EXP 8
3921: NOT
3922: PUSH
3923: LD_STRING GladstoneStayInDelta
3925: PPUSH
3926: LD_INT 0
3928: PPUSH
3929: CALL_OW 30
3933: AND
3934: IFFALSE 3952
// Gladstone = PrepareUnit ( 05_Gladstone , true ) ;
3936: LD_ADDR_EXP 8
3940: PUSH
3941: LD_STRING 05_Gladstone
3943: PPUSH
3944: LD_INT 1
3946: PPUSH
3947: CALL 7033 0 2
3951: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , GammaSupport , false ) ;
3952: LD_EXP 8
3956: PPUSH
3957: LD_INT 4
3959: PPUSH
3960: LD_INT 0
3962: PPUSH
3963: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
3967: LD_STRING LisaStayInDelta
3969: PPUSH
3970: LD_INT 0
3972: PPUSH
3973: CALL_OW 30
3977: IFFALSE 4010
// begin Lisa = PrepareUnit ( 05_Lisa , true ) ;
3979: LD_ADDR_EXP 6
3983: PUSH
3984: LD_STRING 05_Lisa
3986: PPUSH
3987: LD_INT 1
3989: PPUSH
3990: CALL 7033 0 2
3994: ST_TO_ADDR
// PlaceUnitArea ( Lisa , GammaSupport , false ) ;
3995: LD_EXP 6
3999: PPUSH
4000: LD_INT 4
4002: PPUSH
4003: LD_INT 0
4005: PPUSH
4006: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4010: LD_STRING BobbyStayInDelta
4012: PPUSH
4013: LD_INT 0
4015: PPUSH
4016: CALL_OW 30
4020: IFFALSE 4053
// begin Bobby = PrepareUnit ( 05_Bobby , true ) ;
4022: LD_ADDR_EXP 4
4026: PUSH
4027: LD_STRING 05_Bobby
4029: PPUSH
4030: LD_INT 1
4032: PPUSH
4033: CALL 7033 0 2
4037: ST_TO_ADDR
// PlaceUnitArea ( Bobby , GammaSupport , false ) ;
4038: LD_EXP 4
4042: PPUSH
4043: LD_INT 4
4045: PPUSH
4046: LD_INT 0
4048: PPUSH
4049: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4053: LD_STRING CyrusStayInDelta
4055: PPUSH
4056: LD_INT 0
4058: PPUSH
4059: CALL_OW 30
4063: IFFALSE 4096
// begin Cyrus = PrepareUnit ( 05_Cyrus , true ) ;
4065: LD_ADDR_EXP 5
4069: PUSH
4070: LD_STRING 05_Cyrus
4072: PPUSH
4073: LD_INT 1
4075: PPUSH
4076: CALL 7033 0 2
4080: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , GammaSupport , false ) ;
4081: LD_EXP 5
4085: PPUSH
4086: LD_INT 4
4088: PPUSH
4089: LD_INT 0
4091: PPUSH
4092: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4096: LD_STRING BrownStayInDelta
4098: PPUSH
4099: LD_INT 0
4101: PPUSH
4102: CALL_OW 30
4106: IFFALSE 4139
// begin Brown = PrepareUnit ( 05_Brown , true ) ;
4108: LD_ADDR_EXP 2
4112: PUSH
4113: LD_STRING 05_Brown
4115: PPUSH
4116: LD_INT 1
4118: PPUSH
4119: CALL 7033 0 2
4123: ST_TO_ADDR
// PlaceUnitArea ( Brown , GammaSupport , false ) ;
4124: LD_EXP 2
4128: PPUSH
4129: LD_INT 4
4131: PPUSH
4132: LD_INT 0
4134: PPUSH
4135: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4139: LD_STRING DonaldsonStayInDelta
4141: PPUSH
4142: LD_INT 0
4144: PPUSH
4145: CALL_OW 30
4149: IFFALSE 4182
// begin Donaldson = PrepareUnit ( 05_Donaldson , true ) ;
4151: LD_ADDR_EXP 3
4155: PUSH
4156: LD_STRING 05_Donaldson
4158: PPUSH
4159: LD_INT 1
4161: PPUSH
4162: CALL 7033 0 2
4166: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , GammaSupport , false ) ;
4167: LD_EXP 3
4171: PPUSH
4172: LD_INT 4
4174: PPUSH
4175: LD_INT 0
4177: PPUSH
4178: CALL_OW 49
// end ; other = CreateCharacterSet ( OthersStayInDelta ) ;
4182: LD_ADDR_VAR 0 4
4186: PUSH
4187: LD_STRING OthersStayInDelta
4189: PPUSH
4190: CALL_OW 31
4194: ST_TO_ADDR
// if other > 2 then
4195: LD_VAR 0 4
4199: PUSH
4200: LD_INT 2
4202: GREATER
4203: IFFALSE 4248
// begin for j = 1 to 2 do
4205: LD_ADDR_VAR 0 3
4209: PUSH
4210: DOUBLE
4211: LD_INT 1
4213: DEC
4214: ST_TO_ADDR
4215: LD_INT 2
4217: PUSH
4218: FOR_TO
4219: IFFALSE 4244
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4221: LD_VAR 0 4
4225: PUSH
4226: LD_VAR 0 3
4230: ARRAY
4231: PPUSH
4232: LD_INT 4
4234: PPUSH
4235: LD_INT 0
4237: PPUSH
4238: CALL_OW 49
4242: GO 4218
4244: POP
4245: POP
// end else
4246: GO 4291
// begin for j = 1 to other do
4248: LD_ADDR_VAR 0 3
4252: PUSH
4253: DOUBLE
4254: LD_INT 1
4256: DEC
4257: ST_TO_ADDR
4258: LD_VAR 0 4
4262: PUSH
4263: FOR_TO
4264: IFFALSE 4289
// PlaceUnitArea ( other [ j ] , GammaSupport , false ) ;
4266: LD_VAR 0 4
4270: PUSH
4271: LD_VAR 0 3
4275: ARRAY
4276: PPUSH
4277: LD_INT 4
4279: PPUSH
4280: LD_INT 0
4282: PPUSH
4283: CALL_OW 49
4287: GO 4263
4289: POP
4290: POP
// end ; other = CreateCharacterSet ( 06_other_apemans ) ;
4291: LD_ADDR_VAR 0 4
4295: PUSH
4296: LD_STRING 06_other_apemans
4298: PPUSH
4299: CALL_OW 31
4303: ST_TO_ADDR
// if other >= [ 5 , 4 , 3 ] [ Difficulty ] then
4304: LD_VAR 0 4
4308: PUSH
4309: LD_INT 5
4311: PUSH
4312: LD_INT 4
4314: PUSH
4315: LD_INT 3
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: PUSH
4323: LD_OWVAR 67
4327: ARRAY
4328: GREATEREQUAL
4329: IFFALSE 4358
// j := [ 5 , 4 , 3 ] [ Difficulty ] else
4331: LD_ADDR_VAR 0 3
4335: PUSH
4336: LD_INT 5
4338: PUSH
4339: LD_INT 4
4341: PUSH
4342: LD_INT 3
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: PUSH
4350: LD_OWVAR 67
4354: ARRAY
4355: ST_TO_ADDR
4356: GO 4368
// j := other ;
4358: LD_ADDR_VAR 0 3
4362: PUSH
4363: LD_VAR 0 4
4367: ST_TO_ADDR
// for i = 1 to j do
4368: LD_ADDR_VAR 0 2
4372: PUSH
4373: DOUBLE
4374: LD_INT 1
4376: DEC
4377: ST_TO_ADDR
4378: LD_VAR 0 3
4382: PUSH
4383: FOR_TO
4384: IFFALSE 4409
// PlaceUnitArea ( other [ i ] , GammaSupport , false ) ;
4386: LD_VAR 0 4
4390: PUSH
4391: LD_VAR 0 2
4395: ARRAY
4396: PPUSH
4397: LD_INT 4
4399: PPUSH
4400: LD_INT 0
4402: PPUSH
4403: CALL_OW 49
4407: GO 4383
4409: POP
4410: POP
// ComMoveXY ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4411: LD_INT 4
4413: PPUSH
4414: LD_INT 22
4416: PUSH
4417: LD_INT 1
4419: PUSH
4420: EMPTY
4421: LIST
4422: LIST
4423: PUSH
4424: LD_INT 21
4426: PUSH
4427: LD_INT 1
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: PPUSH
4438: CALL_OW 70
4442: PPUSH
4443: LD_INT 53
4445: PPUSH
4446: LD_INT 19
4448: PPUSH
4449: CALL_OW 111
// firstAttack = 1 ;
4453: LD_ADDR_EXP 33
4457: PUSH
4458: LD_INT 1
4460: ST_TO_ADDR
// end ;
4461: LD_VAR 0 1
4465: RET
// export function PrepareMacmillanSquad ; var i , k , un , others , tmp , tmp_vehs , vehicles , veh ; begin
4466: LD_INT 0
4468: PPUSH
4469: PPUSH
4470: PPUSH
4471: PPUSH
4472: PPUSH
4473: PPUSH
4474: PPUSH
4475: PPUSH
4476: PPUSH
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4477: LD_ADDR_VAR 0 8
4481: PUSH
4482: LD_STRING 07_vehicles
4484: PPUSH
4485: EMPTY
4486: PPUSH
4487: CALL_OW 30
4491: ST_TO_ADDR
// macmilan_squad := [ ] ;
4492: LD_ADDR_EXP 42
4496: PUSH
4497: EMPTY
4498: ST_TO_ADDR
// tmp_vehs := [ ] ;
4499: LD_ADDR_VAR 0 7
4503: PUSH
4504: EMPTY
4505: ST_TO_ADDR
// uc_side := 1 ;
4506: LD_ADDR_OWVAR 20
4510: PUSH
4511: LD_INT 1
4513: ST_TO_ADDR
// uc_nation := 1 ;
4514: LD_ADDR_OWVAR 21
4518: PUSH
4519: LD_INT 1
4521: ST_TO_ADDR
// if vehicles then
4522: LD_VAR 0 8
4526: IFFALSE 4685
// begin k := 1 ;
4528: LD_ADDR_VAR 0 3
4532: PUSH
4533: LD_INT 1
4535: ST_TO_ADDR
// for i = 1 to vehicles div 4 do
4536: LD_ADDR_VAR 0 2
4540: PUSH
4541: DOUBLE
4542: LD_INT 1
4544: DEC
4545: ST_TO_ADDR
4546: LD_VAR 0 8
4550: PUSH
4551: LD_INT 4
4553: DIV
4554: PUSH
4555: FOR_TO
4556: IFFALSE 4683
// begin vc_chassis = vehicles [ k ] ;
4558: LD_ADDR_OWVAR 37
4562: PUSH
4563: LD_VAR 0 8
4567: PUSH
4568: LD_VAR 0 3
4572: ARRAY
4573: ST_TO_ADDR
// vc_engine = vehicles [ k + 1 ] ;
4574: LD_ADDR_OWVAR 39
4578: PUSH
4579: LD_VAR 0 8
4583: PUSH
4584: LD_VAR 0 3
4588: PUSH
4589: LD_INT 1
4591: PLUS
4592: ARRAY
4593: ST_TO_ADDR
// vc_control = vehicles [ k + 2 ] ;
4594: LD_ADDR_OWVAR 38
4598: PUSH
4599: LD_VAR 0 8
4603: PUSH
4604: LD_VAR 0 3
4608: PUSH
4609: LD_INT 2
4611: PLUS
4612: ARRAY
4613: ST_TO_ADDR
// vc_weapon = vehicles [ k + 3 ] ;
4614: LD_ADDR_OWVAR 40
4618: PUSH
4619: LD_VAR 0 8
4623: PUSH
4624: LD_VAR 0 3
4628: PUSH
4629: LD_INT 3
4631: PLUS
4632: ARRAY
4633: ST_TO_ADDR
// k := k + 4 ;
4634: LD_ADDR_VAR 0 3
4638: PUSH
4639: LD_VAR 0 3
4643: PUSH
4644: LD_INT 4
4646: PLUS
4647: ST_TO_ADDR
// veh := CreateVehicle ;
4648: LD_ADDR_VAR 0 9
4652: PUSH
4653: CALL_OW 45
4657: ST_TO_ADDR
// tmp_vehs := Insert ( tmp_vehs , 1 , veh ) ;
4658: LD_ADDR_VAR 0 7
4662: PUSH
4663: LD_VAR 0 7
4667: PPUSH
4668: LD_INT 1
4670: PPUSH
4671: LD_VAR 0 9
4675: PPUSH
4676: CALL_OW 2
4680: ST_TO_ADDR
// end ;
4681: GO 4555
4683: POP
4684: POP
// end ; JMM = PrepareUnit ( mission_prefix_prev & JMM , true ) ;
4685: LD_ADDR_EXP 1
4689: PUSH
4690: LD_EXP 44
4694: PUSH
4695: LD_STRING JMM
4697: STR
4698: PPUSH
4699: LD_INT 1
4701: PPUSH
4702: CALL 7033 0 2
4706: ST_TO_ADDR
// if ( gammaCommander = 1 or gammaCommander = 3 ) and not Brown then
4707: LD_EXP 12
4711: PUSH
4712: LD_INT 1
4714: EQUAL
4715: PUSH
4716: LD_EXP 12
4720: PUSH
4721: LD_INT 3
4723: EQUAL
4724: OR
4725: PUSH
4726: LD_EXP 2
4730: NOT
4731: AND
4732: IFFALSE 4785
// begin Brown = PrepareUnit ( mission_prefix_prev & Brown , true ) ;
4734: LD_ADDR_EXP 2
4738: PUSH
4739: LD_EXP 44
4743: PUSH
4744: LD_STRING Brown
4746: STR
4747: PPUSH
4748: LD_INT 1
4750: PPUSH
4751: CALL 7033 0 2
4755: ST_TO_ADDR
// if Brown then
4756: LD_EXP 2
4760: IFFALSE 4785
// tmp := Insert ( tmp , 1 , Brown ) ;
4762: LD_ADDR_VAR 0 6
4766: PUSH
4767: LD_VAR 0 6
4771: PPUSH
4772: LD_INT 1
4774: PPUSH
4775: LD_EXP 2
4779: PPUSH
4780: CALL_OW 2
4784: ST_TO_ADDR
// end ; if ( gammaCommander = 2 or gammaCommander = 3 ) and not Donaldson then
4785: LD_EXP 12
4789: PUSH
4790: LD_INT 2
4792: EQUAL
4793: PUSH
4794: LD_EXP 12
4798: PUSH
4799: LD_INT 3
4801: EQUAL
4802: OR
4803: PUSH
4804: LD_EXP 3
4808: NOT
4809: AND
4810: IFFALSE 4863
// begin Donaldson = PrepareUnit ( mission_prefix_prev & Donaldson , true ) ;
4812: LD_ADDR_EXP 3
4816: PUSH
4817: LD_EXP 44
4821: PUSH
4822: LD_STRING Donaldson
4824: STR
4825: PPUSH
4826: LD_INT 1
4828: PPUSH
4829: CALL 7033 0 2
4833: ST_TO_ADDR
// if Donaldson then
4834: LD_EXP 3
4838: IFFALSE 4863
// tmp := Insert ( tmp , 1 , Donaldson ) ;
4840: LD_ADDR_VAR 0 6
4844: PUSH
4845: LD_VAR 0 6
4849: PPUSH
4850: LD_INT 1
4852: PPUSH
4853: LD_EXP 3
4857: PPUSH
4858: CALL_OW 2
4862: ST_TO_ADDR
// end ; if not Bobby then
4863: LD_EXP 4
4867: NOT
4868: IFFALSE 4921
// begin Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
4870: LD_ADDR_EXP 4
4874: PUSH
4875: LD_EXP 44
4879: PUSH
4880: LD_STRING Bobby
4882: STR
4883: PPUSH
4884: LD_INT 1
4886: PPUSH
4887: CALL 7033 0 2
4891: ST_TO_ADDR
// if Bobby then
4892: LD_EXP 4
4896: IFFALSE 4921
// tmp := Insert ( tmp , 1 , Bobby ) ;
4898: LD_ADDR_VAR 0 6
4902: PUSH
4903: LD_VAR 0 6
4907: PPUSH
4908: LD_INT 1
4910: PPUSH
4911: LD_EXP 4
4915: PPUSH
4916: CALL_OW 2
4920: ST_TO_ADDR
// end ; if not Cyrus then
4921: LD_EXP 5
4925: NOT
4926: IFFALSE 4979
// begin Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
4928: LD_ADDR_EXP 5
4932: PUSH
4933: LD_EXP 44
4937: PUSH
4938: LD_STRING Cyrus
4940: STR
4941: PPUSH
4942: LD_INT 1
4944: PPUSH
4945: CALL 7033 0 2
4949: ST_TO_ADDR
// if Cyrus then
4950: LD_EXP 5
4954: IFFALSE 4979
// tmp := Insert ( tmp , 1 , Cyrus ) ;
4956: LD_ADDR_VAR 0 6
4960: PUSH
4961: LD_VAR 0 6
4965: PPUSH
4966: LD_INT 1
4968: PPUSH
4969: LD_EXP 5
4973: PPUSH
4974: CALL_OW 2
4978: ST_TO_ADDR
// end ; if not Lisa then
4979: LD_EXP 6
4983: NOT
4984: IFFALSE 5037
// begin Lisa = PrepareUnit ( mission_prefix_prev & Lisa , true ) ;
4986: LD_ADDR_EXP 6
4990: PUSH
4991: LD_EXP 44
4995: PUSH
4996: LD_STRING Lisa
4998: STR
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: CALL 7033 0 2
5007: ST_TO_ADDR
// if Lisa then
5008: LD_EXP 6
5012: IFFALSE 5037
// tmp := Insert ( tmp , 1 , Lisa ) ;
5014: LD_ADDR_VAR 0 6
5018: PUSH
5019: LD_VAR 0 6
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: LD_EXP 6
5031: PPUSH
5032: CALL_OW 2
5036: ST_TO_ADDR
// end ; if not Frank then
5037: LD_EXP 7
5041: NOT
5042: IFFALSE 5095
// begin Frank = PrepareUnit ( mission_prefix_prev & Frank , true ) ;
5044: LD_ADDR_EXP 7
5048: PUSH
5049: LD_EXP 44
5053: PUSH
5054: LD_STRING Frank
5056: STR
5057: PPUSH
5058: LD_INT 1
5060: PPUSH
5061: CALL 7033 0 2
5065: ST_TO_ADDR
// if Frank then
5066: LD_EXP 7
5070: IFFALSE 5095
// tmp := Insert ( tmp , 1 , Frank ) ;
5072: LD_ADDR_VAR 0 6
5076: PUSH
5077: LD_VAR 0 6
5081: PPUSH
5082: LD_INT 1
5084: PPUSH
5085: LD_EXP 7
5089: PPUSH
5090: CALL_OW 2
5094: ST_TO_ADDR
// end ; if not Kikuchi then
5095: LD_EXP 9
5099: NOT
5100: IFFALSE 5153
// begin Kikuchi = PrepareUnit ( mission_prefix_prev & Kikuchi , true ) ;
5102: LD_ADDR_EXP 9
5106: PUSH
5107: LD_EXP 44
5111: PUSH
5112: LD_STRING Kikuchi
5114: STR
5115: PPUSH
5116: LD_INT 1
5118: PPUSH
5119: CALL 7033 0 2
5123: ST_TO_ADDR
// if Kikuchi then
5124: LD_EXP 9
5128: IFFALSE 5153
// tmp := Insert ( tmp , 1 , Kikuchi ) ;
5130: LD_ADDR_VAR 0 6
5134: PUSH
5135: LD_VAR 0 6
5139: PPUSH
5140: LD_INT 1
5142: PPUSH
5143: LD_EXP 9
5147: PPUSH
5148: CALL_OW 2
5152: ST_TO_ADDR
// end ; if not Gladstone then
5153: LD_EXP 8
5157: NOT
5158: IFFALSE 5211
// begin Gladstone = PrepareUnit ( mission_prefix_prev & Gladstone , true ) ;
5160: LD_ADDR_EXP 8
5164: PUSH
5165: LD_EXP 44
5169: PUSH
5170: LD_STRING Gladstone
5172: STR
5173: PPUSH
5174: LD_INT 1
5176: PPUSH
5177: CALL 7033 0 2
5181: ST_TO_ADDR
// if Gladstone then
5182: LD_EXP 8
5186: IFFALSE 5211
// tmp := Insert ( tmp , 1 , Gladstone ) ;
5188: LD_ADDR_VAR 0 6
5192: PUSH
5193: LD_VAR 0 6
5197: PPUSH
5198: LD_INT 1
5200: PPUSH
5201: LD_EXP 8
5205: PPUSH
5206: CALL_OW 2
5210: ST_TO_ADDR
// end ; if not Khatam then
5211: LD_EXP 10
5215: NOT
5216: IFFALSE 5269
// begin Khatam = PrepareUnit ( mission_prefix_prev & Khatam , true ) ;
5218: LD_ADDR_EXP 10
5222: PUSH
5223: LD_EXP 44
5227: PUSH
5228: LD_STRING Khatam
5230: STR
5231: PPUSH
5232: LD_INT 1
5234: PPUSH
5235: CALL 7033 0 2
5239: ST_TO_ADDR
// if Khatam then
5240: LD_EXP 10
5244: IFFALSE 5269
// tmp := Insert ( tmp , 1 , Khatam ) ;
5246: LD_ADDR_VAR 0 6
5250: PUSH
5251: LD_VAR 0 6
5255: PPUSH
5256: LD_INT 1
5258: PPUSH
5259: LD_EXP 10
5263: PPUSH
5264: CALL_OW 2
5268: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5269: LD_ADDR_VAR 0 5
5273: PUSH
5274: LD_STRING 07c_others
5276: PPUSH
5277: CALL_OW 31
5281: ST_TO_ADDR
// macmilan_squad := others ;
5282: LD_ADDR_EXP 42
5286: PUSH
5287: LD_VAR 0 5
5291: ST_TO_ADDR
// if others then
5292: LD_VAR 0 5
5296: IFFALSE 5384
// for i in others do
5298: LD_ADDR_VAR 0 2
5302: PUSH
5303: LD_VAR 0 5
5307: PUSH
5308: FOR_IN
5309: IFFALSE 5382
// if GetClass ( i ) = 3 then
5311: LD_VAR 0 2
5315: PPUSH
5316: CALL_OW 257
5320: PUSH
5321: LD_INT 3
5323: EQUAL
5324: IFFALSE 5351
// tmp := Insert ( tmp , 1 , i ) else
5326: LD_ADDR_VAR 0 6
5330: PUSH
5331: LD_VAR 0 6
5335: PPUSH
5336: LD_INT 1
5338: PPUSH
5339: LD_VAR 0 2
5343: PPUSH
5344: CALL_OW 2
5348: ST_TO_ADDR
5349: GO 5380
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5351: LD_ADDR_VAR 0 6
5355: PUSH
5356: LD_VAR 0 6
5360: PPUSH
5361: LD_VAR 0 6
5365: PUSH
5366: LD_INT 1
5368: PLUS
5369: PPUSH
5370: LD_VAR 0 2
5374: PPUSH
5375: CALL_OW 2
5379: ST_TO_ADDR
5380: GO 5308
5382: POP
5383: POP
// wait ( 0 0$1 ) ;
5384: LD_INT 35
5386: PPUSH
5387: CALL_OW 67
// for i in tmp do
5391: LD_ADDR_VAR 0 2
5395: PUSH
5396: LD_VAR 0 6
5400: PUSH
5401: FOR_IN
5402: IFFALSE 5554
// begin SetDir ( i , 3 ) ;
5404: LD_VAR 0 2
5408: PPUSH
5409: LD_INT 3
5411: PPUSH
5412: CALL_OW 233
// if tmp_vehs then
5416: LD_VAR 0 7
5420: IFFALSE 5495
// begin SetDir ( tmp_vehs [ 1 ] , 3 ) ;
5422: LD_VAR 0 7
5426: PUSH
5427: LD_INT 1
5429: ARRAY
5430: PPUSH
5431: LD_INT 3
5433: PPUSH
5434: CALL_OW 233
// PlaceUnitArea ( tmp_vehs [ 1 ] , GammaSupport , false ) ;
5438: LD_VAR 0 7
5442: PUSH
5443: LD_INT 1
5445: ARRAY
5446: PPUSH
5447: LD_INT 4
5449: PPUSH
5450: LD_INT 0
5452: PPUSH
5453: CALL_OW 49
// PlaceHumanInUnit ( i , tmp_vehs [ 1 ] ) ;
5457: LD_VAR 0 2
5461: PPUSH
5462: LD_VAR 0 7
5466: PUSH
5467: LD_INT 1
5469: ARRAY
5470: PPUSH
5471: CALL_OW 52
// tmp_vehs := Delete ( tmp_vehs , 1 ) ;
5475: LD_ADDR_VAR 0 7
5479: PUSH
5480: LD_VAR 0 7
5484: PPUSH
5485: LD_INT 1
5487: PPUSH
5488: CALL_OW 3
5492: ST_TO_ADDR
// end else
5493: GO 5510
// PlaceUnitArea ( i , GammaSupport , false ) ;
5495: LD_VAR 0 2
5499: PPUSH
5500: LD_INT 4
5502: PPUSH
5503: LD_INT 0
5505: PPUSH
5506: CALL_OW 49
// ComMoveXY ( i , 77 , 16 ) ;
5510: LD_VAR 0 2
5514: PPUSH
5515: LD_INT 77
5517: PPUSH
5518: LD_INT 16
5520: PPUSH
5521: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5525: LD_INT 35
5527: PPUSH
5528: CALL_OW 67
// until not FilterUnitsInArea ( GammaSupport , [ f_side , 1 ] ) ;
5532: LD_INT 4
5534: PPUSH
5535: LD_INT 22
5537: PUSH
5538: LD_INT 1
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PPUSH
5545: CALL_OW 70
5549: NOT
5550: IFFALSE 5525
// end ;
5552: GO 5401
5554: POP
5555: POP
// PlaceUnitArea ( JMM , GammaSupport , false ) ;
5556: LD_EXP 1
5560: PPUSH
5561: LD_INT 4
5563: PPUSH
5564: LD_INT 0
5566: PPUSH
5567: CALL_OW 49
// ComMoveXY ( JMM , 77 , 16 ) ;
5571: LD_EXP 1
5575: PPUSH
5576: LD_INT 77
5578: PPUSH
5579: LD_INT 16
5581: PPUSH
5582: CALL_OW 111
// end ;
5586: LD_VAR 0 1
5590: RET
// export function PrepareSikorsky ; begin
5591: LD_INT 0
5593: PPUSH
// uc_side = 4 ;
5594: LD_ADDR_OWVAR 20
5598: PUSH
5599: LD_INT 4
5601: ST_TO_ADDR
// uc_nation = 1 ;
5602: LD_ADDR_OWVAR 21
5606: PUSH
5607: LD_INT 1
5609: ST_TO_ADDR
// Sikorski = PrepareUnit ( Sikorski , false ) ;
5610: LD_ADDR_EXP 16
5614: PUSH
5615: LD_STRING Sikorski
5617: PPUSH
5618: LD_INT 0
5620: PPUSH
5621: CALL 7033 0 2
5625: ST_TO_ADDR
// vc_engine = 1 ;
5626: LD_ADDR_OWVAR 39
5630: PUSH
5631: LD_INT 1
5633: ST_TO_ADDR
// vc_control = 1 ;
5634: LD_ADDR_OWVAR 38
5638: PUSH
5639: LD_INT 1
5641: ST_TO_ADDR
// vc_weapon = [ 5 , 3 , 4 ] [ Difficulty ] ;
5642: LD_ADDR_OWVAR 40
5646: PUSH
5647: LD_INT 5
5649: PUSH
5650: LD_INT 3
5652: PUSH
5653: LD_INT 4
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: PUSH
5661: LD_OWVAR 67
5665: ARRAY
5666: ST_TO_ADDR
// vc_chassis = 4 ;
5667: LD_ADDR_OWVAR 37
5671: PUSH
5672: LD_INT 4
5674: ST_TO_ADDR
// SikorskyTank = CreateVehicle ;
5675: LD_ADDR_EXP 17
5679: PUSH
5680: CALL_OW 45
5684: ST_TO_ADDR
// SetDir ( SikorskyTank , 3 ) ;
5685: LD_EXP 17
5689: PPUSH
5690: LD_INT 3
5692: PPUSH
5693: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
5697: LD_INT 35
5699: PPUSH
5700: CALL_OW 67
// PlaceUnitXY ( SikorskyTank , 18 , 5 , false ) ;
5704: LD_EXP 17
5708: PPUSH
5709: LD_INT 18
5711: PPUSH
5712: LD_INT 5
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 48
// until IsPlaced ( SikorskyTank ) ;
5722: LD_EXP 17
5726: PPUSH
5727: CALL_OW 305
5731: IFFALSE 5697
// PlaceHumanInUnit ( Sikorski , SikorskyTank ) ;
5733: LD_EXP 16
5737: PPUSH
5738: LD_EXP 17
5742: PPUSH
5743: CALL_OW 52
// ComMoveToArea ( SikorskyTank , GammaSpawn ) ;
5747: LD_EXP 17
5751: PPUSH
5752: LD_INT 5
5754: PPUSH
5755: CALL_OW 113
// end ;
5759: LD_VAR 0 1
5763: RET
// export function PrepareSikorskyArmy ; var i , un , veh ; begin
5764: LD_INT 0
5766: PPUSH
5767: PPUSH
5768: PPUSH
5769: PPUSH
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
5770: LD_ADDR_VAR 0 2
5774: PUSH
5775: DOUBLE
5776: LD_INT 1
5778: DEC
5779: ST_TO_ADDR
5780: LD_INT 8
5782: PUSH
5783: LD_INT 7
5785: PUSH
5786: LD_INT 7
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: LIST
5793: PUSH
5794: LD_OWVAR 67
5798: ARRAY
5799: PUSH
5800: FOR_TO
5801: IFFALSE 5917
// begin uc_side = 4 ;
5803: LD_ADDR_OWVAR 20
5807: PUSH
5808: LD_INT 4
5810: ST_TO_ADDR
// uc_nation = 1 ;
5811: LD_ADDR_OWVAR 21
5815: PUSH
5816: LD_INT 1
5818: ST_TO_ADDR
// hc_name =  ;
5819: LD_ADDR_OWVAR 26
5823: PUSH
5824: LD_STRING 
5826: ST_TO_ADDR
// hc_gallery =  ;
5827: LD_ADDR_OWVAR 33
5831: PUSH
5832: LD_STRING 
5834: ST_TO_ADDR
// PrepareHuman ( false , 1 , Rand ( 5 , 8 ) ) ;
5835: LD_INT 0
5837: PPUSH
5838: LD_INT 1
5840: PPUSH
5841: LD_INT 5
5843: PPUSH
5844: LD_INT 8
5846: PPUSH
5847: CALL_OW 12
5851: PPUSH
5852: CALL_OW 380
// un = CreateHuman ;
5856: LD_ADDR_VAR 0 3
5860: PUSH
5861: CALL_OW 44
5865: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5866: LD_VAR 0 3
5870: PPUSH
5871: LD_INT 3
5873: PPUSH
5874: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
5878: LD_VAR 0 3
5882: PPUSH
5883: LD_INT 9
5885: PPUSH
5886: LD_INT 0
5888: PPUSH
5889: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
5893: LD_VAR 0 3
5897: PPUSH
5898: LD_INT 53
5900: PPUSH
5901: LD_INT 23
5903: PPUSH
5904: CALL_OW 111
// wait ( 0 0$1 ) ;
5908: LD_INT 35
5910: PPUSH
5911: CALL_OW 67
// end ;
5915: GO 5800
5917: POP
5918: POP
// for i = 1 to 3 do
5919: LD_ADDR_VAR 0 2
5923: PUSH
5924: DOUBLE
5925: LD_INT 1
5927: DEC
5928: ST_TO_ADDR
5929: LD_INT 3
5931: PUSH
5932: FOR_TO
5933: IFFALSE 6049
// begin uc_side = 4 ;
5935: LD_ADDR_OWVAR 20
5939: PUSH
5940: LD_INT 4
5942: ST_TO_ADDR
// uc_nation = 1 ;
5943: LD_ADDR_OWVAR 21
5947: PUSH
5948: LD_INT 1
5950: ST_TO_ADDR
// hc_name =  ;
5951: LD_ADDR_OWVAR 26
5955: PUSH
5956: LD_STRING 
5958: ST_TO_ADDR
// hc_gallery =  ;
5959: LD_ADDR_OWVAR 33
5963: PUSH
5964: LD_STRING 
5966: ST_TO_ADDR
// PrepareHuman ( false , 4 , Rand ( 5 , 8 ) ) ;
5967: LD_INT 0
5969: PPUSH
5970: LD_INT 4
5972: PPUSH
5973: LD_INT 5
5975: PPUSH
5976: LD_INT 8
5978: PPUSH
5979: CALL_OW 12
5983: PPUSH
5984: CALL_OW 380
// un = CreateHuman ;
5988: LD_ADDR_VAR 0 3
5992: PUSH
5993: CALL_OW 44
5997: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5998: LD_VAR 0 3
6002: PPUSH
6003: LD_INT 3
6005: PPUSH
6006: CALL_OW 233
// PlaceUnitArea ( un , SikorskySpawn , false ) ;
6010: LD_VAR 0 3
6014: PPUSH
6015: LD_INT 9
6017: PPUSH
6018: LD_INT 0
6020: PPUSH
6021: CALL_OW 49
// ComMoveXY ( un , 53 , 23 ) ;
6025: LD_VAR 0 3
6029: PPUSH
6030: LD_INT 53
6032: PPUSH
6033: LD_INT 23
6035: PPUSH
6036: CALL_OW 111
// wait ( 0 0$1 ) ;
6040: LD_INT 35
6042: PPUSH
6043: CALL_OW 67
// end ;
6047: GO 5932
6049: POP
6050: POP
// for i = 1 to [ 9 , 8 , 7 ] [ Difficulty ] do
6051: LD_ADDR_VAR 0 2
6055: PUSH
6056: DOUBLE
6057: LD_INT 1
6059: DEC
6060: ST_TO_ADDR
6061: LD_INT 9
6063: PUSH
6064: LD_INT 8
6066: PUSH
6067: LD_INT 7
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: PUSH
6075: LD_OWVAR 67
6079: ARRAY
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6290
// begin uc_side = 4 ;
6084: LD_ADDR_OWVAR 20
6088: PUSH
6089: LD_INT 4
6091: ST_TO_ADDR
// uc_nation = 1 ;
6092: LD_ADDR_OWVAR 21
6096: PUSH
6097: LD_INT 1
6099: ST_TO_ADDR
// vc_engine = 1 ;
6100: LD_ADDR_OWVAR 39
6104: PUSH
6105: LD_INT 1
6107: ST_TO_ADDR
// vc_control = 1 ;
6108: LD_ADDR_OWVAR 38
6112: PUSH
6113: LD_INT 1
6115: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 6 ] [ Rand ( 1 , 4 ) ] ;
6116: LD_ADDR_OWVAR 40
6120: PUSH
6121: LD_INT 3
6123: PUSH
6124: LD_INT 4
6126: PUSH
6127: LD_INT 5
6129: PUSH
6130: LD_INT 6
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: PUSH
6139: LD_INT 1
6141: PPUSH
6142: LD_INT 4
6144: PPUSH
6145: CALL_OW 12
6149: ARRAY
6150: ST_TO_ADDR
// vc_chassis = 4 ;
6151: LD_ADDR_OWVAR 37
6155: PUSH
6156: LD_INT 4
6158: ST_TO_ADDR
// veh = CreateVehicle ;
6159: LD_ADDR_VAR 0 4
6163: PUSH
6164: CALL_OW 45
6168: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6169: LD_VAR 0 4
6173: PPUSH
6174: LD_INT 3
6176: PPUSH
6177: CALL_OW 233
// PlaceUnitArea ( veh , SikorskySpawn , false ) ;
6181: LD_VAR 0 4
6185: PPUSH
6186: LD_INT 9
6188: PPUSH
6189: LD_INT 0
6191: PPUSH
6192: CALL_OW 49
// hc_name =  ;
6196: LD_ADDR_OWVAR 26
6200: PUSH
6201: LD_STRING 
6203: ST_TO_ADDR
// hc_gallery =  ;
6204: LD_ADDR_OWVAR 33
6208: PUSH
6209: LD_STRING 
6211: ST_TO_ADDR
// PrepareHuman ( false , 3 , Rand ( 5 , 8 ) ) ;
6212: LD_INT 0
6214: PPUSH
6215: LD_INT 3
6217: PPUSH
6218: LD_INT 5
6220: PPUSH
6221: LD_INT 8
6223: PPUSH
6224: CALL_OW 12
6228: PPUSH
6229: CALL_OW 380
// un = CreateHuman ;
6233: LD_ADDR_VAR 0 3
6237: PUSH
6238: CALL_OW 44
6242: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6243: LD_VAR 0 3
6247: PPUSH
6248: LD_VAR 0 4
6252: PPUSH
6253: CALL_OW 52
// ComMoveXY ( [ veh , un ] , 53 , 23 ) ;
6257: LD_VAR 0 4
6261: PUSH
6262: LD_VAR 0 3
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PPUSH
6271: LD_INT 53
6273: PPUSH
6274: LD_INT 23
6276: PPUSH
6277: CALL_OW 111
// wait ( 0 0$5 ) ;
6281: LD_INT 175
6283: PPUSH
6284: CALL_OW 67
// end ;
6288: GO 6081
6290: POP
6291: POP
// end ; end_of_file
6292: LD_VAR 0 1
6296: RET
// export function PrepareRussianCommander ; begin
6297: LD_INT 0
6299: PPUSH
// uc_side = 3 ;
6300: LD_ADDR_OWVAR 20
6304: PUSH
6305: LD_INT 3
6307: ST_TO_ADDR
// uc_nation = 3 ;
6308: LD_ADDR_OWVAR 21
6312: PUSH
6313: LD_INT 3
6315: ST_TO_ADDR
// Borodin = NewCharacter ( Borodin ) ;
6316: LD_ADDR_EXP 24
6320: PUSH
6321: LD_STRING Borodin
6323: PPUSH
6324: CALL_OW 25
6328: ST_TO_ADDR
// PlaceUnitArea ( Borodin , BorodinSpawn , false ) ;
6329: LD_EXP 24
6333: PPUSH
6334: LD_INT 25
6336: PPUSH
6337: LD_INT 0
6339: PPUSH
6340: CALL_OW 49
// end ;
6344: LD_VAR 0 1
6348: RET
// export function PrepareCutsceneAttack ; var i , un , veh ; begin
6349: LD_INT 0
6351: PPUSH
6352: PPUSH
6353: PPUSH
6354: PPUSH
// for i = 1 to 10 do
6355: LD_ADDR_VAR 0 2
6359: PUSH
6360: DOUBLE
6361: LD_INT 1
6363: DEC
6364: ST_TO_ADDR
6365: LD_INT 10
6367: PUSH
6368: FOR_TO
6369: IFFALSE 6443
// begin uc_side = 6 ;
6371: LD_ADDR_OWVAR 20
6375: PUSH
6376: LD_INT 6
6378: ST_TO_ADDR
// uc_nation = 3 ;
6379: LD_ADDR_OWVAR 21
6383: PUSH
6384: LD_INT 3
6386: ST_TO_ADDR
// hc_gallery =  ;
6387: LD_ADDR_OWVAR 33
6391: PUSH
6392: LD_STRING 
6394: ST_TO_ADDR
// hc_name =  ;
6395: LD_ADDR_OWVAR 26
6399: PUSH
6400: LD_STRING 
6402: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
6403: LD_INT 0
6405: PPUSH
6406: LD_INT 1
6408: PPUSH
6409: LD_INT 3
6411: PPUSH
6412: CALL_OW 380
// un = CreateHuman ;
6416: LD_ADDR_VAR 0 3
6420: PUSH
6421: CALL_OW 44
6425: ST_TO_ADDR
// PlaceUnitArea ( un , BattleSceneTroops , false ) ;
6426: LD_VAR 0 3
6430: PPUSH
6431: LD_INT 1
6433: PPUSH
6434: LD_INT 0
6436: PPUSH
6437: CALL_OW 49
// end ;
6441: GO 6368
6443: POP
6444: POP
// for i = 1 to 3 do
6445: LD_ADDR_VAR 0 2
6449: PUSH
6450: DOUBLE
6451: LD_INT 1
6453: DEC
6454: ST_TO_ADDR
6455: LD_INT 3
6457: PUSH
6458: FOR_TO
6459: IFFALSE 6608
// begin uc_side = 6 ;
6461: LD_ADDR_OWVAR 20
6465: PUSH
6466: LD_INT 6
6468: ST_TO_ADDR
// uc_nation = 3 ;
6469: LD_ADDR_OWVAR 21
6473: PUSH
6474: LD_INT 3
6476: ST_TO_ADDR
// vc_engine = 1 ;
6477: LD_ADDR_OWVAR 39
6481: PUSH
6482: LD_INT 1
6484: ST_TO_ADDR
// vc_control = 1 ;
6485: LD_ADDR_OWVAR 38
6489: PUSH
6490: LD_INT 1
6492: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
6493: LD_ADDR_OWVAR 40
6497: PUSH
6498: LD_INT 43
6500: PUSH
6501: LD_INT 44
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PUSH
6508: LD_INT 1
6510: PPUSH
6511: LD_INT 2
6513: PPUSH
6514: CALL_OW 12
6518: ARRAY
6519: ST_TO_ADDR
// vc_chassis = 22 ;
6520: LD_ADDR_OWVAR 37
6524: PUSH
6525: LD_INT 22
6527: ST_TO_ADDR
// veh = CreateVehicle ;
6528: LD_ADDR_VAR 0 4
6532: PUSH
6533: CALL_OW 45
6537: ST_TO_ADDR
// PlaceUnitArea ( veh , BattleSceneTanks , false ) ;
6538: LD_VAR 0 4
6542: PPUSH
6543: LD_INT 2
6545: PPUSH
6546: LD_INT 0
6548: PPUSH
6549: CALL_OW 49
// hc_gallery =  ;
6553: LD_ADDR_OWVAR 33
6557: PUSH
6558: LD_STRING 
6560: ST_TO_ADDR
// hc_name =  ;
6561: LD_ADDR_OWVAR 26
6565: PUSH
6566: LD_STRING 
6568: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
6569: LD_INT 0
6571: PPUSH
6572: LD_INT 3
6574: PPUSH
6575: LD_INT 4
6577: PPUSH
6578: CALL_OW 380
// un = CreateHuman ;
6582: LD_ADDR_VAR 0 3
6586: PUSH
6587: CALL_OW 44
6591: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6592: LD_VAR 0 3
6596: PPUSH
6597: LD_VAR 0 4
6601: PPUSH
6602: CALL_OW 52
// end ;
6606: GO 6458
6608: POP
6609: POP
// end ;
6610: LD_VAR 0 1
6614: RET
// export function PrepareRussians ; var i , un ; begin
6615: LD_INT 0
6617: PPUSH
6618: PPUSH
6619: PPUSH
// for i = 1 to 8 do
6620: LD_ADDR_VAR 0 2
6624: PUSH
6625: DOUBLE
6626: LD_INT 1
6628: DEC
6629: ST_TO_ADDR
6630: LD_INT 8
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6720
// begin uc_side = 3 ;
6636: LD_ADDR_OWVAR 20
6640: PUSH
6641: LD_INT 3
6643: ST_TO_ADDR
// uc_nation = 3 ;
6644: LD_ADDR_OWVAR 21
6648: PUSH
6649: LD_INT 3
6651: ST_TO_ADDR
// hc_gallery =  ;
6652: LD_ADDR_OWVAR 33
6656: PUSH
6657: LD_STRING 
6659: ST_TO_ADDR
// hc_name =  ;
6660: LD_ADDR_OWVAR 26
6664: PUSH
6665: LD_STRING 
6667: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6668: LD_INT 0
6670: PPUSH
6671: LD_INT 1
6673: PPUSH
6674: LD_EXP 25
6678: PPUSH
6679: LD_EXP 26
6683: PPUSH
6684: CALL_OW 12
6688: PPUSH
6689: CALL_OW 380
// un = CreateHuman ;
6693: LD_ADDR_VAR 0 3
6697: PUSH
6698: CALL_OW 44
6702: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6703: LD_VAR 0 3
6707: PPUSH
6708: LD_INT 3
6710: PPUSH
6711: LD_INT 0
6713: PPUSH
6714: CALL_OW 49
// end ;
6718: GO 6633
6720: POP
6721: POP
// for i = 1 to 4 do
6722: LD_ADDR_VAR 0 2
6726: PUSH
6727: DOUBLE
6728: LD_INT 1
6730: DEC
6731: ST_TO_ADDR
6732: LD_INT 4
6734: PUSH
6735: FOR_TO
6736: IFFALSE 6822
// begin uc_side = 3 ;
6738: LD_ADDR_OWVAR 20
6742: PUSH
6743: LD_INT 3
6745: ST_TO_ADDR
// uc_nation = 3 ;
6746: LD_ADDR_OWVAR 21
6750: PUSH
6751: LD_INT 3
6753: ST_TO_ADDR
// hc_gallery =  ;
6754: LD_ADDR_OWVAR 33
6758: PUSH
6759: LD_STRING 
6761: ST_TO_ADDR
// hc_name =  ;
6762: LD_ADDR_OWVAR 26
6766: PUSH
6767: LD_STRING 
6769: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6770: LD_INT 0
6772: PPUSH
6773: LD_INT 2
6775: PPUSH
6776: LD_EXP 25
6780: PPUSH
6781: LD_EXP 26
6785: PPUSH
6786: CALL_OW 12
6790: PPUSH
6791: CALL_OW 380
// un = CreateHuman ;
6795: LD_ADDR_VAR 0 3
6799: PUSH
6800: CALL_OW 44
6804: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6805: LD_VAR 0 3
6809: PPUSH
6810: LD_INT 3
6812: PPUSH
6813: LD_INT 0
6815: PPUSH
6816: CALL_OW 49
// end ;
6820: GO 6735
6822: POP
6823: POP
// for i = 1 to 3 do
6824: LD_ADDR_VAR 0 2
6828: PUSH
6829: DOUBLE
6830: LD_INT 1
6832: DEC
6833: ST_TO_ADDR
6834: LD_INT 3
6836: PUSH
6837: FOR_TO
6838: IFFALSE 6924
// begin uc_side = 3 ;
6840: LD_ADDR_OWVAR 20
6844: PUSH
6845: LD_INT 3
6847: ST_TO_ADDR
// uc_nation = 3 ;
6848: LD_ADDR_OWVAR 21
6852: PUSH
6853: LD_INT 3
6855: ST_TO_ADDR
// hc_gallery =  ;
6856: LD_ADDR_OWVAR 33
6860: PUSH
6861: LD_STRING 
6863: ST_TO_ADDR
// hc_name =  ;
6864: LD_ADDR_OWVAR 26
6868: PUSH
6869: LD_STRING 
6871: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6872: LD_INT 0
6874: PPUSH
6875: LD_INT 3
6877: PPUSH
6878: LD_EXP 25
6882: PPUSH
6883: LD_EXP 26
6887: PPUSH
6888: CALL_OW 12
6892: PPUSH
6893: CALL_OW 380
// un = CreateHuman ;
6897: LD_ADDR_VAR 0 3
6901: PUSH
6902: CALL_OW 44
6906: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
6907: LD_VAR 0 3
6911: PPUSH
6912: LD_INT 3
6914: PPUSH
6915: LD_INT 0
6917: PPUSH
6918: CALL_OW 49
// end ;
6922: GO 6837
6924: POP
6925: POP
// for i = 1 to 2 do
6926: LD_ADDR_VAR 0 2
6930: PUSH
6931: DOUBLE
6932: LD_INT 1
6934: DEC
6935: ST_TO_ADDR
6936: LD_INT 2
6938: PUSH
6939: FOR_TO
6940: IFFALSE 7026
// begin uc_side = 3 ;
6942: LD_ADDR_OWVAR 20
6946: PUSH
6947: LD_INT 3
6949: ST_TO_ADDR
// uc_nation = 3 ;
6950: LD_ADDR_OWVAR 21
6954: PUSH
6955: LD_INT 3
6957: ST_TO_ADDR
// hc_gallery =  ;
6958: LD_ADDR_OWVAR 33
6962: PUSH
6963: LD_STRING 
6965: ST_TO_ADDR
// hc_name =  ;
6966: LD_ADDR_OWVAR 26
6970: PUSH
6971: LD_STRING 
6973: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
6974: LD_INT 0
6976: PPUSH
6977: LD_INT 4
6979: PPUSH
6980: LD_EXP 25
6984: PPUSH
6985: LD_EXP 26
6989: PPUSH
6990: CALL_OW 12
6994: PPUSH
6995: CALL_OW 380
// un = CreateHuman ;
6999: LD_ADDR_VAR 0 3
7003: PUSH
7004: CALL_OW 44
7008: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
7009: LD_VAR 0 3
7013: PPUSH
7014: LD_INT 3
7016: PPUSH
7017: LD_INT 0
7019: PPUSH
7020: CALL_OW 49
// end ;
7024: GO 6939
7026: POP
7027: POP
// end ; end_of_file
7028: LD_VAR 0 1
7032: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7033: LD_INT 0
7035: PPUSH
7036: PPUSH
// if exist_mode then
7037: LD_VAR 0 2
7041: IFFALSE 7060
// unit := CreateCharacter ( ident ) else
7043: LD_ADDR_VAR 0 4
7047: PUSH
7048: LD_VAR 0 1
7052: PPUSH
7053: CALL_OW 34
7057: ST_TO_ADDR
7058: GO 7075
// unit := NewCharacter ( ident ) ;
7060: LD_ADDR_VAR 0 4
7064: PUSH
7065: LD_VAR 0 1
7069: PPUSH
7070: CALL_OW 25
7074: ST_TO_ADDR
// result := unit ;
7075: LD_ADDR_VAR 0 3
7079: PUSH
7080: LD_VAR 0 4
7084: ST_TO_ADDR
// end ;
7085: LD_VAR 0 3
7089: RET
// export function Video ( mode ) ; begin
7090: LD_INT 0
7092: PPUSH
// ingame_video = mode ;
7093: LD_ADDR_OWVAR 52
7097: PUSH
7098: LD_VAR 0 1
7102: ST_TO_ADDR
// interface_hidden = mode ;
7103: LD_ADDR_OWVAR 54
7107: PUSH
7108: LD_VAR 0 1
7112: ST_TO_ADDR
// end ;
7113: LD_VAR 0 2
7117: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
7118: LD_INT 0
7120: PPUSH
7121: PPUSH
7122: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
7123: LD_ADDR_VAR 0 1
7127: PUSH
7128: LD_VAR 0 1
7132: PUSH
7133: LD_EXP 1
7137: PUSH
7138: LD_EXP 2
7142: PUSH
7143: LD_EXP 3
7147: PUSH
7148: LD_EXP 4
7152: PUSH
7153: LD_EXP 5
7157: PUSH
7158: LD_EXP 6
7162: PUSH
7163: LD_EXP 7
7167: PUSH
7168: LD_EXP 8
7172: PUSH
7173: LD_EXP 9
7177: PUSH
7178: LD_EXP 10
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: DIFF
7195: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7196: LD_ADDR_VAR 0 6
7200: PUSH
7201: LD_VAR 0 1
7205: PUSH
7206: LD_INT 1
7208: PPUSH
7209: LD_VAR 0 1
7213: PPUSH
7214: CALL_OW 12
7218: ARRAY
7219: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
7220: LD_VAR 0 6
7224: PPUSH
7225: CALL_OW 258
7229: PUSH
7230: LD_INT 1
7232: EQUAL
7233: IFFALSE 7251
// Say ( speaker , dialogMID ) else
7235: LD_VAR 0 6
7239: PPUSH
7240: LD_VAR 0 2
7244: PPUSH
7245: CALL_OW 88
7249: GO 7265
// Say ( speaker , dialogFID ) ;
7251: LD_VAR 0 6
7255: PPUSH
7256: LD_VAR 0 3
7260: PPUSH
7261: CALL_OW 88
// result := speaker ;
7265: LD_ADDR_VAR 0 4
7269: PUSH
7270: LD_VAR 0 6
7274: ST_TO_ADDR
// end ;
7275: LD_VAR 0 4
7279: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7280: LD_INT 0
7282: PPUSH
7283: PPUSH
7284: PPUSH
// uc_side := GetSide ( b ) ;
7285: LD_ADDR_OWVAR 20
7289: PUSH
7290: LD_VAR 0 2
7294: PPUSH
7295: CALL_OW 255
7299: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7300: LD_ADDR_OWVAR 21
7304: PUSH
7305: LD_VAR 0 2
7309: PPUSH
7310: CALL_OW 248
7314: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7315: LD_INT 0
7317: PPUSH
7318: LD_INT 1
7320: PPUSH
7321: LD_VAR 0 1
7325: PPUSH
7326: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
7330: LD_ADDR_VAR 0 5
7334: PUSH
7335: LD_VAR 0 2
7339: PPUSH
7340: CALL_OW 254
7344: PUSH
7345: LD_INT 3
7347: MINUS
7348: ST_TO_ADDR
// if dir < 0 then
7349: LD_VAR 0 5
7353: PUSH
7354: LD_INT 0
7356: LESS
7357: IFFALSE 7373
// dir := 6 + dir ;
7359: LD_ADDR_VAR 0 5
7363: PUSH
7364: LD_INT 6
7366: PUSH
7367: LD_VAR 0 5
7371: PLUS
7372: ST_TO_ADDR
// un := CreateHuman ;
7373: LD_ADDR_VAR 0 4
7377: PUSH
7378: CALL_OW 44
7382: ST_TO_ADDR
// SetDir ( un , dir ) ;
7383: LD_VAR 0 4
7387: PPUSH
7388: LD_VAR 0 5
7392: PPUSH
7393: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
7397: LD_VAR 0 4
7401: PPUSH
7402: LD_VAR 0 2
7406: PPUSH
7407: CALL_OW 52
// end ;
7411: LD_VAR 0 3
7415: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
7416: LD_INT 0
7418: PPUSH
7419: PPUSH
7420: PPUSH
7421: PPUSH
// for i = 1 to count do
7422: LD_ADDR_VAR 0 8
7426: PUSH
7427: DOUBLE
7428: LD_INT 1
7430: DEC
7431: ST_TO_ADDR
7432: LD_VAR 0 6
7436: PUSH
7437: FOR_TO
7438: IFFALSE 7519
// begin uc_side = side ;
7440: LD_ADDR_OWVAR 20
7444: PUSH
7445: LD_VAR 0 1
7449: ST_TO_ADDR
// uc_nation = nation ;
7450: LD_ADDR_OWVAR 21
7454: PUSH
7455: LD_VAR 0 2
7459: ST_TO_ADDR
// hc_gallery =  ;
7460: LD_ADDR_OWVAR 33
7464: PUSH
7465: LD_STRING 
7467: ST_TO_ADDR
// hc_name =  ;
7468: LD_ADDR_OWVAR 26
7472: PUSH
7473: LD_STRING 
7475: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
7476: LD_INT 0
7478: PPUSH
7479: LD_VAR 0 5
7483: PPUSH
7484: LD_VAR 0 4
7488: PPUSH
7489: CALL_OW 380
// un = CreateHuman ;
7493: LD_ADDR_VAR 0 10
7497: PUSH
7498: CALL_OW 44
7502: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
7503: LD_VAR 0 10
7507: PPUSH
7508: LD_VAR 0 3
7512: PPUSH
7513: CALL_OW 52
// end ;
7517: GO 7437
7519: POP
7520: POP
// end ;
7521: LD_VAR 0 7
7525: RET
// export function PrepareDifficulty ; begin
7526: LD_INT 0
7528: PPUSH
// if Difficulty = 1 then
7529: LD_OWVAR 67
7533: PUSH
7534: LD_INT 1
7536: EQUAL
7537: IFFALSE 7555
// begin RuSolMinLevel = 4 ;
7539: LD_ADDR_EXP 25
7543: PUSH
7544: LD_INT 4
7546: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7547: LD_ADDR_EXP 26
7551: PUSH
7552: LD_INT 6
7554: ST_TO_ADDR
// end ; if Difficulty = 2 then
7555: LD_OWVAR 67
7559: PUSH
7560: LD_INT 2
7562: EQUAL
7563: IFFALSE 7633
// begin RuSolMinLevel = 5 ;
7565: LD_ADDR_EXP 25
7569: PUSH
7570: LD_INT 5
7572: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7573: LD_ADDR_EXP 26
7577: PUSH
7578: LD_INT 6
7580: ST_TO_ADDR
// SetTech ( 51 , 3 , state_enabled ) ;
7581: LD_INT 51
7583: PPUSH
7584: LD_INT 3
7586: PPUSH
7587: LD_INT 1
7589: PPUSH
7590: CALL_OW 322
// SetTech ( 57 , 3 , state_enabled ) ;
7594: LD_INT 57
7596: PPUSH
7597: LD_INT 3
7599: PPUSH
7600: LD_INT 1
7602: PPUSH
7603: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7607: LD_INT 57
7609: PPUSH
7610: LD_INT 6
7612: PPUSH
7613: LD_INT 2
7615: PPUSH
7616: CALL_OW 322
// SetTech ( 51 , 6 , state_researched ) ;
7620: LD_INT 51
7622: PPUSH
7623: LD_INT 6
7625: PPUSH
7626: LD_INT 2
7628: PPUSH
7629: CALL_OW 322
// end ; if Difficulty = 3 then
7633: LD_OWVAR 67
7637: PUSH
7638: LD_INT 3
7640: EQUAL
7641: IFFALSE 7724
// begin RuSolMinLevel = 5 ;
7643: LD_ADDR_EXP 25
7647: PUSH
7648: LD_INT 5
7650: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
7651: LD_ADDR_EXP 26
7655: PUSH
7656: LD_INT 6
7658: ST_TO_ADDR
// SetTech ( 57 , 3 , state_enabled ) ;
7659: LD_INT 57
7661: PPUSH
7662: LD_INT 3
7664: PPUSH
7665: LD_INT 1
7667: PPUSH
7668: CALL_OW 322
// SetTech ( 51 , 3 , state_enabled ) ;
7672: LD_INT 51
7674: PPUSH
7675: LD_INT 3
7677: PPUSH
7678: LD_INT 1
7680: PPUSH
7681: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
7685: LD_INT 52
7687: PPUSH
7688: LD_INT 3
7690: PPUSH
7691: LD_INT 1
7693: PPUSH
7694: CALL_OW 322
// SetTech ( 57 , 6 , state_researched ) ;
7698: LD_INT 57
7700: PPUSH
7701: LD_INT 6
7703: PPUSH
7704: LD_INT 2
7706: PPUSH
7707: CALL_OW 322
// SetTech ( 52 , 6 , state_researched ) ;
7711: LD_INT 52
7713: PPUSH
7714: LD_INT 6
7716: PPUSH
7717: LD_INT 2
7719: PPUSH
7720: CALL_OW 322
// end ; end ;
7724: LD_VAR 0 1
7728: RET
// export function BuildRussianBase ; var i , engineers , buildingsTab ; begin
7729: LD_INT 0
7731: PPUSH
7732: PPUSH
7733: PPUSH
7734: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7735: LD_ADDR_VAR 0 3
7739: PUSH
7740: LD_INT 22
7742: PUSH
7743: LD_INT 3
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: LD_INT 25
7752: PUSH
7753: LD_INT 2
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PPUSH
7764: CALL_OW 69
7768: ST_TO_ADDR
// buildingsTab = [ [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
7769: LD_ADDR_VAR 0 4
7773: PUSH
7774: LD_INT 4
7776: PUSH
7777: LD_INT 75
7779: PUSH
7780: LD_INT 79
7782: PUSH
7783: LD_INT 2
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 4
7794: PUSH
7795: LD_INT 113
7797: PUSH
7798: LD_INT 94
7800: PUSH
7801: LD_INT 4
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: LD_INT 29
7812: PUSH
7813: LD_INT 106
7815: PUSH
7816: LD_INT 97
7818: PUSH
7819: LD_INT 3
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: PUSH
7828: LD_INT 26
7830: PUSH
7831: LD_INT 93
7833: PUSH
7834: LD_INT 97
7836: PUSH
7837: LD_INT 5
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: PUSH
7846: LD_INT 2
7848: PUSH
7849: LD_INT 100
7851: PUSH
7852: LD_INT 89
7854: PUSH
7855: LD_INT 3
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: PUSH
7864: LD_INT 17
7866: PUSH
7867: LD_INT 96
7869: PUSH
7870: LD_INT 89
7872: PUSH
7873: LD_INT 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 32
7884: PUSH
7885: LD_INT 78
7887: PUSH
7888: LD_INT 94
7890: PUSH
7891: LD_INT 1
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 32
7902: PUSH
7903: LD_INT 95
7905: PUSH
7906: LD_INT 82
7908: PUSH
7909: LD_INT 3
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 32
7920: PUSH
7921: LD_INT 104
7923: PUSH
7924: LD_INT 85
7926: PUSH
7927: LD_INT 2
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: PUSH
7936: LD_INT 32
7938: PUSH
7939: LD_INT 81
7941: PUSH
7942: LD_INT 78
7944: PUSH
7945: LD_INT 2
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: PUSH
7954: LD_INT 33
7956: PUSH
7957: LD_INT 109
7959: PUSH
7960: LD_INT 90
7962: PUSH
7963: LD_INT 3
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: PUSH
7972: LD_INT 33
7974: PUSH
7975: LD_INT 88
7977: PUSH
7978: LD_INT 79
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: PUSH
7990: LD_INT 33
7992: PUSH
7993: LD_INT 76
7995: PUSH
7996: LD_INT 87
7998: PUSH
7999: LD_INT 1
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 26
8010: PUSH
8011: LD_INT 96
8013: PUSH
8014: LD_INT 97
8016: PUSH
8017: LD_INT 5
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: PUSH
8026: LD_INT 26
8028: PUSH
8029: LD_INT 85
8031: PUSH
8032: LD_INT 84
8034: PUSH
8035: LD_INT 2
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: PUSH
8044: LD_INT 6
8046: PUSH
8047: LD_INT 88
8049: PUSH
8050: LD_INT 95
8052: PUSH
8053: LD_INT 0
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 19
8064: PUSH
8065: LD_INT 103
8067: PUSH
8068: LD_INT 89
8070: PUSH
8071: LD_INT 4
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 16
8082: PUSH
8083: LD_INT 97
8085: PUSH
8086: LD_INT 86
8088: PUSH
8089: LD_INT 2
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: PUSH
8098: LD_INT 24
8100: PUSH
8101: LD_INT 100
8103: PUSH
8104: LD_INT 85
8106: PUSH
8107: LD_INT 3
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: ST_TO_ADDR
// for i := 1 to buildingsTab do
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_VAR 0 4
8151: PUSH
8152: FOR_TO
8153: IFFALSE 8226
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8155: LD_VAR 0 3
8159: PPUSH
8160: LD_VAR 0 4
8164: PUSH
8165: LD_VAR 0 2
8169: ARRAY
8170: PUSH
8171: LD_INT 1
8173: ARRAY
8174: PPUSH
8175: LD_VAR 0 4
8179: PUSH
8180: LD_VAR 0 2
8184: ARRAY
8185: PUSH
8186: LD_INT 2
8188: ARRAY
8189: PPUSH
8190: LD_VAR 0 4
8194: PUSH
8195: LD_VAR 0 2
8199: ARRAY
8200: PUSH
8201: LD_INT 3
8203: ARRAY
8204: PPUSH
8205: LD_VAR 0 4
8209: PUSH
8210: LD_VAR 0 2
8214: ARRAY
8215: PUSH
8216: LD_INT 4
8218: ARRAY
8219: PPUSH
8220: CALL_OW 205
8224: GO 8152
8226: POP
8227: POP
// end ;
8228: LD_VAR 0 1
8232: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8233: LD_INT 0
8235: PPUSH
8236: PPUSH
// for i in charactersList do
8237: LD_ADDR_VAR 0 4
8241: PUSH
8242: LD_VAR 0 1
8246: PUSH
8247: FOR_IN
8248: IFFALSE 8266
// SaveCharacters ( i , ident ) ;
8250: LD_VAR 0 4
8254: PPUSH
8255: LD_VAR 0 2
8259: PPUSH
8260: CALL_OW 38
8264: GO 8247
8266: POP
8267: POP
// end ;
8268: LD_VAR 0 3
8272: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8273: LD_INT 0
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8280: LD_ADDR_VAR 0 8
8284: PUSH
8285: LD_INT 48
8287: PUSH
8288: LD_INT 49
8290: PUSH
8291: LD_INT 50
8293: PUSH
8294: LD_INT 20
8296: PUSH
8297: LD_INT 1
8299: PUSH
8300: LD_INT 51
8302: PUSH
8303: LD_INT 52
8305: PUSH
8306: LD_INT 69
8308: PUSH
8309: LD_INT 39
8311: PUSH
8312: LD_INT 34
8314: PUSH
8315: LD_INT 40
8317: PUSH
8318: LD_INT 53
8320: PUSH
8321: LD_INT 71
8323: PUSH
8324: LD_INT 57
8326: PUSH
8327: LD_INT 58
8329: PUSH
8330: LD_INT 44
8332: PUSH
8333: LD_INT 32
8335: PUSH
8336: LD_INT 27
8338: PUSH
8339: LD_INT 23
8341: PUSH
8342: LD_INT 33
8344: PUSH
8345: LD_INT 59
8347: PUSH
8348: LD_INT 54
8350: PUSH
8351: LD_INT 55
8353: PUSH
8354: LD_INT 56
8356: PUSH
8357: LD_INT 63
8359: PUSH
8360: LD_INT 64
8362: PUSH
8363: LD_INT 65
8365: PUSH
8366: LD_INT 30
8368: PUSH
8369: LD_INT 31
8371: PUSH
8372: LD_INT 21
8374: PUSH
8375: LD_INT 22
8377: PUSH
8378: LD_INT 25
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8415: LD_ADDR_VAR 0 5
8419: PUSH
8420: DOUBLE
8421: LD_INT 1
8423: DEC
8424: ST_TO_ADDR
8425: LD_VAR 0 8
8429: PUSH
8430: FOR_TO
8431: IFFALSE 8507
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8433: LD_VAR 0 8
8437: PUSH
8438: LD_VAR 0 5
8442: ARRAY
8443: PPUSH
8444: LD_VAR 0 1
8448: PPUSH
8449: CALL_OW 321
8453: PUSH
8454: LD_INT 1
8456: EQUAL
8457: PUSH
8458: LD_VAR 0 8
8462: PUSH
8463: LD_VAR 0 5
8467: ARRAY
8468: PPUSH
8469: LD_VAR 0 3
8473: PPUSH
8474: CALL_OW 482
8478: PUSH
8479: LD_INT 1
8481: EQUAL
8482: AND
8483: IFFALSE 8505
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8485: LD_VAR 0 2
8489: PPUSH
8490: LD_VAR 0 8
8494: PUSH
8495: LD_VAR 0 5
8499: ARRAY
8500: PPUSH
8501: CALL_OW 184
8505: GO 8430
8507: POP
8508: POP
// end ;
8509: LD_VAR 0 4
8513: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8514: LD_INT 0
8516: PPUSH
8517: PPUSH
8518: PPUSH
8519: PPUSH
8520: PPUSH
8521: PPUSH
8522: PPUSH
8523: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) diff [ Borodin ] ;
8524: LD_ADDR_VAR 0 6
8528: PUSH
8529: LD_VAR 0 2
8533: PPUSH
8534: LD_INT 22
8536: PUSH
8537: LD_VAR 0 1
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PUSH
8546: LD_INT 56
8548: PUSH
8549: EMPTY
8550: LIST
8551: PUSH
8552: LD_INT 24
8554: PUSH
8555: LD_INT 700
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 3
8564: PUSH
8565: LD_INT 60
8567: PUSH
8568: EMPTY
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PUSH
8575: LD_INT 2
8577: PUSH
8578: LD_INT 25
8580: PUSH
8581: LD_INT 1
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 25
8590: PUSH
8591: LD_INT 5
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 25
8600: PUSH
8601: LD_INT 8
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PUSH
8608: LD_INT 25
8610: PUSH
8611: LD_INT 9
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: PPUSH
8632: CALL_OW 70
8636: PUSH
8637: LD_EXP 24
8641: PUSH
8642: EMPTY
8643: LIST
8644: DIFF
8645: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8646: LD_ADDR_VAR 0 7
8650: PUSH
8651: LD_VAR 0 2
8655: PPUSH
8656: LD_INT 22
8658: PUSH
8659: LD_VAR 0 1
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 30
8670: PUSH
8671: LD_INT 32
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 58
8680: PUSH
8681: EMPTY
8682: LIST
8683: PUSH
8684: LD_INT 24
8686: PUSH
8687: LD_INT 251
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: PPUSH
8700: CALL_OW 70
8704: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8705: LD_ADDR_VAR 0 9
8709: PUSH
8710: LD_VAR 0 2
8714: PPUSH
8715: LD_INT 22
8717: PUSH
8718: LD_VAR 0 1
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 2
8729: PUSH
8730: LD_INT 30
8732: PUSH
8733: LD_INT 4
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PUSH
8740: LD_INT 30
8742: PUSH
8743: LD_INT 5
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 24
8757: PUSH
8758: LD_INT 251
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: LIST
8769: PPUSH
8770: CALL_OW 70
8774: ST_TO_ADDR
// if barrackList > 0 then
8775: LD_VAR 0 9
8779: PUSH
8780: LD_INT 0
8782: GREATER
8783: IFFALSE 8931
// begin if turretList = 0 then
8785: LD_VAR 0 7
8789: PUSH
8790: LD_INT 0
8792: EQUAL
8793: IFFALSE 8835
// begin if soldiers_list > 0 then
8795: LD_VAR 0 6
8799: PUSH
8800: LD_INT 0
8802: GREATER
8803: IFFALSE 8833
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8805: LD_VAR 0 6
8809: PPUSH
8810: LD_VAR 0 9
8814: PUSH
8815: LD_INT 1
8817: PPUSH
8818: LD_VAR 0 9
8822: PPUSH
8823: CALL_OW 12
8827: ARRAY
8828: PPUSH
8829: CALL_OW 120
// end else
8833: GO 8931
// begin for i in barrackList do
8835: LD_ADDR_VAR 0 4
8839: PUSH
8840: LD_VAR 0 9
8844: PUSH
8845: FOR_IN
8846: IFFALSE 8929
// begin insideUnits = UnitsInside ( i ) ;
8848: LD_ADDR_VAR 0 10
8852: PUSH
8853: LD_VAR 0 4
8857: PPUSH
8858: CALL_OW 313
8862: ST_TO_ADDR
// if insideUnits > 0 then
8863: LD_VAR 0 10
8867: PUSH
8868: LD_INT 0
8870: GREATER
8871: IFFALSE 8895
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8873: LD_VAR 0 10
8877: PUSH
8878: LD_INT 1
8880: ARRAY
8881: PPUSH
8882: LD_VAR 0 7
8886: PUSH
8887: LD_INT 1
8889: ARRAY
8890: PPUSH
8891: CALL_OW 120
// if soldiers_list > 0 then
8895: LD_VAR 0 6
8899: PUSH
8900: LD_INT 0
8902: GREATER
8903: IFFALSE 8927
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8905: LD_VAR 0 6
8909: PUSH
8910: LD_INT 1
8912: ARRAY
8913: PPUSH
8914: LD_VAR 0 7
8918: PUSH
8919: LD_INT 1
8921: ARRAY
8922: PPUSH
8923: CALL_OW 120
// end ;
8927: GO 8845
8929: POP
8930: POP
// end ; end ; end ;
8931: LD_VAR 0 3
8935: RET
// export function BaseDefendersSpawn ( side , areaSpawn , nation , skill , infantryCount , vehCount ) ; var i , j , un , target , veh ; begin
8936: LD_INT 0
8938: PPUSH
8939: PPUSH
8940: PPUSH
8941: PPUSH
8942: PPUSH
8943: PPUSH
// for i = 1 to vehCount do
8944: LD_ADDR_VAR 0 8
8948: PUSH
8949: DOUBLE
8950: LD_INT 1
8952: DEC
8953: ST_TO_ADDR
8954: LD_VAR 0 6
8958: PUSH
8959: FOR_TO
8960: IFFALSE 9167
// begin uc_side = side ;
8962: LD_ADDR_OWVAR 20
8966: PUSH
8967: LD_VAR 0 1
8971: ST_TO_ADDR
// uc_nation = nation ;
8972: LD_ADDR_OWVAR 21
8976: PUSH
8977: LD_VAR 0 3
8981: ST_TO_ADDR
// vc_Chassis = 22 ;
8982: LD_ADDR_OWVAR 37
8986: PUSH
8987: LD_INT 22
8989: ST_TO_ADDR
// vc_engine = 1 ;
8990: LD_ADDR_OWVAR 39
8994: PUSH
8995: LD_INT 1
8997: ST_TO_ADDR
// vc_control = 1 ;
8998: LD_ADDR_OWVAR 38
9002: PUSH
9003: LD_INT 1
9005: ST_TO_ADDR
// vc_weapon = [ 43 , 44 ] [ Rand ( 1 , 2 ) ] ;
9006: LD_ADDR_OWVAR 40
9010: PUSH
9011: LD_INT 43
9013: PUSH
9014: LD_INT 44
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: LD_INT 1
9023: PPUSH
9024: LD_INT 2
9026: PPUSH
9027: CALL_OW 12
9031: ARRAY
9032: ST_TO_ADDR
// veh = CreateVehicle ;
9033: LD_ADDR_VAR 0 12
9037: PUSH
9038: CALL_OW 45
9042: ST_TO_ADDR
// PlaceUnitArea ( veh , areaSpawn , false ) ;
9043: LD_VAR 0 12
9047: PPUSH
9048: LD_VAR 0 2
9052: PPUSH
9053: LD_INT 0
9055: PPUSH
9056: CALL_OW 49
// defenders_list = defenders_list ^ veh ;
9060: LD_ADDR_EXP 32
9064: PUSH
9065: LD_EXP 32
9069: PUSH
9070: LD_VAR 0 12
9074: ADD
9075: ST_TO_ADDR
// hc_class = 3 ;
9076: LD_ADDR_OWVAR 28
9080: PUSH
9081: LD_INT 3
9083: ST_TO_ADDR
// hc_name =  ;
9084: LD_ADDR_OWVAR 26
9088: PUSH
9089: LD_STRING 
9091: ST_TO_ADDR
// hc_gallery =  ;
9092: LD_ADDR_OWVAR 33
9096: PUSH
9097: LD_STRING 
9099: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
9100: LD_INT 0
9102: PPUSH
9103: LD_INT 3
9105: PPUSH
9106: LD_EXP 25
9110: PPUSH
9111: LD_EXP 26
9115: PPUSH
9116: CALL_OW 12
9120: PPUSH
9121: CALL_OW 380
// un = CreateHuman ;
9125: LD_ADDR_VAR 0 10
9129: PUSH
9130: CALL_OW 44
9134: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9135: LD_VAR 0 10
9139: PPUSH
9140: LD_VAR 0 12
9144: PPUSH
9145: CALL_OW 52
// defenders_list = defenders_list ^ un ;
9149: LD_ADDR_EXP 32
9153: PUSH
9154: LD_EXP 32
9158: PUSH
9159: LD_VAR 0 10
9163: ADD
9164: ST_TO_ADDR
// end ;
9165: GO 8959
9167: POP
9168: POP
// end ;
9169: LD_VAR 0 7
9173: RET
// export function DefenseBase ( targetSide , defenseArea ) ; var i , target , tmp , veh , mech ; begin
9174: LD_INT 0
9176: PPUSH
9177: PPUSH
9178: PPUSH
9179: PPUSH
9180: PPUSH
9181: PPUSH
// if FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) = 0 and defenders_list then
9182: LD_VAR 0 2
9186: PPUSH
9187: LD_INT 22
9189: PUSH
9190: LD_VAR 0 1
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: PPUSH
9202: CALL_OW 70
9206: PUSH
9207: LD_INT 0
9209: EQUAL
9210: PUSH
9211: LD_EXP 32
9215: AND
9216: IFFALSE 9503
// begin for i in defenders_list do
9218: LD_ADDR_VAR 0 4
9222: PUSH
9223: LD_EXP 32
9227: PUSH
9228: FOR_IN
9229: IFFALSE 9501
// begin if GetDistUnitXY ( i , 63 , 75 ) > 8 and not HasTask ( i ) then
9231: LD_VAR 0 4
9235: PPUSH
9236: LD_INT 63
9238: PPUSH
9239: LD_INT 75
9241: PPUSH
9242: CALL_OW 297
9246: PUSH
9247: LD_INT 8
9249: GREATER
9250: PUSH
9251: LD_VAR 0 4
9255: PPUSH
9256: CALL_OW 314
9260: NOT
9261: AND
9262: IFFALSE 9281
// ComMoveXY ( i , 63 , 75 ) else
9264: LD_VAR 0 4
9268: PPUSH
9269: LD_INT 63
9271: PPUSH
9272: LD_INT 75
9274: PPUSH
9275: CALL_OW 111
9279: GO 9499
// if GetClass ( i ) = 3 and not IsInUnit ( i ) and not HasTask ( i ) then
9281: LD_VAR 0 4
9285: PPUSH
9286: CALL_OW 257
9290: PUSH
9291: LD_INT 3
9293: EQUAL
9294: PUSH
9295: LD_VAR 0 4
9299: PPUSH
9300: CALL_OW 310
9304: NOT
9305: AND
9306: PUSH
9307: LD_VAR 0 4
9311: PPUSH
9312: CALL_OW 314
9316: NOT
9317: AND
9318: IFFALSE 9371
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ [ f_empty ] , [ f_lives , 1000 ] ] ) , i ) ) else
9320: LD_VAR 0 4
9324: PPUSH
9325: LD_EXP 32
9329: PPUSH
9330: LD_INT 58
9332: PUSH
9333: EMPTY
9334: LIST
9335: PUSH
9336: LD_INT 24
9338: PUSH
9339: LD_INT 1000
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PPUSH
9350: CALL_OW 72
9354: PPUSH
9355: LD_VAR 0 4
9359: PPUSH
9360: CALL_OW 74
9364: PPUSH
9365: CALL_OW 120
9369: GO 9499
// if GetFuel ( i ) < 100 then
9371: LD_VAR 0 4
9375: PPUSH
9376: CALL_OW 261
9380: PUSH
9381: LD_INT 100
9383: LESS
9384: IFFALSE 9400
// SetFuel ( defenders_list , 100 ) else
9386: LD_EXP 32
9390: PPUSH
9391: LD_INT 100
9393: PPUSH
9394: CALL_OW 240
9398: GO 9499
// if GetControl ( i ) = control_manual and GetLives ( i ) < 990 then
9400: LD_VAR 0 4
9404: PPUSH
9405: CALL_OW 263
9409: PUSH
9410: LD_INT 1
9412: EQUAL
9413: PUSH
9414: LD_VAR 0 4
9418: PPUSH
9419: CALL_OW 256
9423: PUSH
9424: LD_INT 990
9426: LESS
9427: AND
9428: IFFALSE 9499
// begin veh := i ;
9430: LD_ADDR_VAR 0 7
9434: PUSH
9435: LD_VAR 0 4
9439: ST_TO_ADDR
// mech := IsDrivenBy ( i ) ;
9440: LD_ADDR_VAR 0 8
9444: PUSH
9445: LD_VAR 0 4
9449: PPUSH
9450: CALL_OW 311
9454: ST_TO_ADDR
// if veh then
9455: LD_VAR 0 7
9459: IFFALSE 9499
// begin ComMoveXY ( i , 63 , 75 ) ;
9461: LD_VAR 0 4
9465: PPUSH
9466: LD_INT 63
9468: PPUSH
9469: LD_INT 75
9471: PPUSH
9472: CALL_OW 111
// AddComExitVehicle ( veh ) ;
9476: LD_VAR 0 7
9480: PPUSH
9481: CALL_OW 181
// AddComRepairVehicle ( mech , veh ) ;
9485: LD_VAR 0 8
9489: PPUSH
9490: LD_VAR 0 7
9494: PPUSH
9495: CALL_OW 189
// end ; end ; end ;
9499: GO 9228
9501: POP
9502: POP
// end ; tmp := FilterUnitsInArea ( defenseArea , [ [ f_side , targetSide ] ] ) ;
9503: LD_ADDR_VAR 0 6
9507: PUSH
9508: LD_VAR 0 2
9512: PPUSH
9513: LD_INT 22
9515: PUSH
9516: LD_VAR 0 1
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: EMPTY
9526: LIST
9527: PPUSH
9528: CALL_OW 70
9532: ST_TO_ADDR
// if tmp and defenders_list then
9533: LD_VAR 0 6
9537: PUSH
9538: LD_EXP 32
9542: AND
9543: IFFALSE 9712
// for i in defenders_list do
9545: LD_ADDR_VAR 0 4
9549: PUSH
9550: LD_EXP 32
9554: PUSH
9555: FOR_IN
9556: IFFALSE 9710
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) then
9558: LD_VAR 0 4
9562: PPUSH
9563: CALL_OW 257
9567: PUSH
9568: LD_INT 3
9570: EQUAL
9571: PUSH
9572: LD_VAR 0 4
9576: PPUSH
9577: CALL_OW 310
9581: NOT
9582: AND
9583: IFFALSE 9622
// ComEnterUnit ( i , NearestUnitToUnit ( UnitFilter ( defenders_list , [ f_empty ] ) , i ) ) else
9585: LD_VAR 0 4
9589: PPUSH
9590: LD_EXP 32
9594: PPUSH
9595: LD_INT 58
9597: PUSH
9598: EMPTY
9599: LIST
9600: PPUSH
9601: CALL_OW 72
9605: PPUSH
9606: LD_VAR 0 4
9610: PPUSH
9611: CALL_OW 74
9615: PPUSH
9616: CALL_OW 120
9620: GO 9708
// if not HasTask ( i ) and IsInArea ( i , defenseArea ) then
9622: LD_VAR 0 4
9626: PPUSH
9627: CALL_OW 314
9631: NOT
9632: PUSH
9633: LD_VAR 0 4
9637: PPUSH
9638: LD_VAR 0 2
9642: PPUSH
9643: CALL_OW 308
9647: AND
9648: IFFALSE 9676
// ComAttackUnit ( i , NearestUnitToUnit ( tmp , i ) ) else
9650: LD_VAR 0 4
9654: PPUSH
9655: LD_VAR 0 6
9659: PPUSH
9660: LD_VAR 0 4
9664: PPUSH
9665: CALL_OW 74
9669: PPUSH
9670: CALL_OW 115
9674: GO 9708
// if not IsInArea ( i , defenseArea ) then
9676: LD_VAR 0 4
9680: PPUSH
9681: LD_VAR 0 2
9685: PPUSH
9686: CALL_OW 308
9690: NOT
9691: IFFALSE 9708
// ComMoveXY ( i , 63 , 75 ) ;
9693: LD_VAR 0 4
9697: PPUSH
9698: LD_INT 63
9700: PPUSH
9701: LD_INT 75
9703: PPUSH
9704: CALL_OW 111
// end ;
9708: GO 9555
9710: POP
9711: POP
// end ;
9712: LD_VAR 0 3
9716: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
9717: LD_INT 0
9719: PPUSH
9720: PPUSH
9721: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
9722: LD_INT 22
9724: PUSH
9725: LD_VAR 0 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 21
9736: PUSH
9737: LD_INT 2
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PPUSH
9748: CALL_OW 69
9752: PUSH
9753: LD_VAR 0 3
9757: LESSEQUAL
9758: IFFALSE 9866
// begin for i = 1 to vehCount do
9760: LD_ADDR_VAR 0 9
9764: PUSH
9765: DOUBLE
9766: LD_INT 1
9768: DEC
9769: ST_TO_ADDR
9770: LD_VAR 0 3
9774: PUSH
9775: FOR_TO
9776: IFFALSE 9864
// begin weapon = weaponTab [ i ] ;
9778: LD_ADDR_VAR 0 10
9782: PUSH
9783: LD_VAR 0 4
9787: PUSH
9788: LD_VAR 0 9
9792: ARRAY
9793: ST_TO_ADDR
// if weapon = 46 then
9794: LD_VAR 0 10
9798: PUSH
9799: LD_INT 46
9801: EQUAL
9802: IFFALSE 9833
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
9804: LD_VAR 0 2
9808: PPUSH
9809: LD_INT 24
9811: PPUSH
9812: LD_VAR 0 5
9816: PPUSH
9817: LD_VAR 0 6
9821: PPUSH
9822: LD_VAR 0 10
9826: PPUSH
9827: CALL_OW 185
// end else
9831: GO 9862
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
9833: LD_VAR 0 2
9837: PPUSH
9838: LD_VAR 0 7
9842: PPUSH
9843: LD_VAR 0 5
9847: PPUSH
9848: LD_VAR 0 6
9852: PPUSH
9853: LD_VAR 0 10
9857: PPUSH
9858: CALL_OW 185
// end ; end ;
9862: GO 9775
9864: POP
9865: POP
// end ; end ;
9866: LD_VAR 0 8
9870: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
9871: LD_INT 0
9873: PPUSH
9874: PPUSH
9875: PPUSH
9876: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
9877: LD_ADDR_VAR 0 8
9881: PUSH
9882: LD_INT 22
9884: PUSH
9885: LD_VAR 0 1
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: LD_INT 21
9896: PUSH
9897: LD_INT 2
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: PUSH
9904: LD_INT 3
9906: PUSH
9907: LD_INT 24
9909: PUSH
9910: LD_INT 650
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: PPUSH
9926: CALL_OW 69
9930: ST_TO_ADDR
// if damageVehicles > 0 then
9931: LD_VAR 0 8
9935: PUSH
9936: LD_INT 0
9938: GREATER
9939: IFFALSE 9960
// ComMoveXY ( damageVehicles , repX , repY ) ;
9941: LD_VAR 0 8
9945: PPUSH
9946: LD_VAR 0 3
9950: PPUSH
9951: LD_VAR 0 4
9955: PPUSH
9956: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
9960: LD_VAR 0 8
9964: PPUSH
9965: LD_INT 95
9967: PUSH
9968: LD_VAR 0 2
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: LD_INT 3
9979: PUSH
9980: LD_INT 58
9982: PUSH
9983: EMPTY
9984: LIST
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PPUSH
9994: CALL_OW 72
9998: PUSH
9999: LD_INT 0
10001: GREATER
10002: IFFALSE 10069
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
10004: LD_ADDR_VAR 0 6
10008: PUSH
10009: LD_VAR 0 8
10013: PPUSH
10014: LD_INT 95
10016: PUSH
10017: LD_VAR 0 2
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: LD_INT 3
10028: PUSH
10029: LD_INT 58
10031: PUSH
10032: EMPTY
10033: LIST
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PPUSH
10043: CALL_OW 72
10047: PUSH
10048: FOR_IN
10049: IFFALSE 10067
// ComExitVehicle ( UnitsInside ( i ) ) ;
10051: LD_VAR 0 6
10055: PPUSH
10056: CALL_OW 313
10060: PPUSH
10061: CALL_OW 121
10065: GO 10048
10067: POP
10068: POP
// end ;
10069: LD_VAR 0 5
10073: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
10074: LD_INT 0
10076: PPUSH
10077: PPUSH
10078: PPUSH
10079: PPUSH
10080: PPUSH
10081: PPUSH
10082: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
10083: LD_ADDR_VAR 0 8
10087: PUSH
10088: LD_INT 22
10090: PUSH
10091: LD_VAR 0 1
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 21
10102: PUSH
10103: LD_INT 2
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 24
10112: PUSH
10113: LD_INT 250
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PUSH
10120: LD_INT 3
10122: PUSH
10123: LD_INT 58
10125: PUSH
10126: EMPTY
10127: LIST
10128: PUSH
10129: LD_INT 2
10131: PUSH
10132: LD_INT 34
10134: PUSH
10135: LD_INT 43
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: LD_INT 34
10144: PUSH
10145: LD_INT 44
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 34
10154: PUSH
10155: LD_INT 46
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: LIST
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: PPUSH
10179: CALL_OW 69
10183: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) >= [ 5 , 6 , 7 ] [ Difficulty ] then
10184: LD_INT 22
10186: PUSH
10187: LD_VAR 0 1
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: LD_INT 21
10198: PUSH
10199: LD_INT 2
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 24
10208: PUSH
10209: LD_INT 1000
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: LD_INT 3
10218: PUSH
10219: LD_INT 58
10221: PUSH
10222: EMPTY
10223: LIST
10224: PUSH
10225: LD_INT 2
10227: PUSH
10228: LD_INT 34
10230: PUSH
10231: LD_INT 43
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 34
10240: PUSH
10241: LD_INT 44
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PUSH
10248: LD_INT 34
10250: PUSH
10251: LD_INT 46
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: PPUSH
10275: CALL_OW 69
10279: PUSH
10280: LD_INT 5
10282: PUSH
10283: LD_INT 6
10285: PUSH
10286: LD_INT 7
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: LD_OWVAR 67
10298: ARRAY
10299: GREATEREQUAL
10300: IFFALSE 10865
// repeat wait ( 0 0$1 ) ;
10302: LD_INT 35
10304: PPUSH
10305: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) ;
10309: LD_ADDR_VAR 0 8
10313: PUSH
10314: LD_INT 22
10316: PUSH
10317: LD_VAR 0 1
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 21
10328: PUSH
10329: LD_INT 2
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 24
10338: PUSH
10339: LD_INT 250
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 2
10348: PUSH
10349: LD_INT 34
10351: PUSH
10352: LD_INT 43
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PUSH
10359: LD_INT 34
10361: PUSH
10362: LD_INT 44
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PUSH
10369: LD_INT 34
10371: PUSH
10372: LD_INT 46
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 3
10387: PUSH
10388: LD_INT 58
10390: PUSH
10391: EMPTY
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: PPUSH
10405: CALL_OW 69
10409: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
10410: LD_INT 22
10412: PUSH
10413: LD_VAR 0 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 95
10424: PUSH
10425: LD_VAR 0 2
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PPUSH
10438: CALL_OW 69
10442: NOT
10443: PUSH
10444: LD_VAR 0 11
10448: PUSH
10449: LD_INT 0
10451: EQUAL
10452: AND
10453: IFFALSE 10508
// for i := 1 to wayX do
10455: LD_ADDR_VAR 0 6
10459: PUSH
10460: DOUBLE
10461: LD_INT 1
10463: DEC
10464: ST_TO_ADDR
10465: LD_VAR 0 3
10469: PUSH
10470: FOR_TO
10471: IFFALSE 10506
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
10473: LD_VAR 0 8
10477: PPUSH
10478: LD_VAR 0 3
10482: PUSH
10483: LD_VAR 0 6
10487: ARRAY
10488: PPUSH
10489: LD_VAR 0 4
10493: PUSH
10494: LD_VAR 0 6
10498: ARRAY
10499: PPUSH
10500: CALL_OW 114
10504: GO 10470
10506: POP
10507: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
10508: LD_INT 22
10510: PUSH
10511: LD_VAR 0 1
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 95
10522: PUSH
10523: LD_VAR 0 2
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PPUSH
10536: CALL_OW 69
10540: IFFALSE 10764
// begin seeEnemy = 1 ;
10542: LD_ADDR_VAR 0 11
10546: PUSH
10547: LD_INT 1
10549: ST_TO_ADDR
// for j in vehiclesOK do
10550: LD_ADDR_VAR 0 7
10554: PUSH
10555: LD_VAR 0 8
10559: PUSH
10560: FOR_IN
10561: IFFALSE 10762
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10563: LD_ADDR_VAR 0 9
10567: PUSH
10568: LD_INT 81
10570: PUSH
10571: LD_VAR 0 1
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PUSH
10580: LD_INT 101
10582: PUSH
10583: LD_INT 1
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PPUSH
10594: CALL_OW 69
10598: PPUSH
10599: LD_VAR 0 7
10603: PPUSH
10604: CALL_OW 74
10608: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10609: LD_ADDR_VAR 0 10
10613: PUSH
10614: LD_INT 81
10616: PUSH
10617: LD_VAR 0 1
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 101
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 2
10638: PUSH
10639: LD_INT 59
10641: PUSH
10642: EMPTY
10643: LIST
10644: PUSH
10645: LD_INT 21
10647: PUSH
10648: LD_INT 1
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 21
10657: PUSH
10658: LD_INT 2
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: PPUSH
10679: CALL_OW 69
10683: PPUSH
10684: LD_VAR 0 7
10688: PPUSH
10689: CALL_OW 74
10693: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
10694: LD_VAR 0 7
10698: PPUSH
10699: LD_VAR 0 9
10703: PPUSH
10704: CALL_OW 296
10708: PUSH
10709: LD_INT 8
10711: PLUS
10712: PUSH
10713: LD_VAR 0 7
10717: PPUSH
10718: LD_VAR 0 10
10722: PPUSH
10723: CALL_OW 296
10727: LESS
10728: IFFALSE 10746
// ComAttackUnit ( j , target1 ) else
10730: LD_VAR 0 7
10734: PPUSH
10735: LD_VAR 0 9
10739: PPUSH
10740: CALL_OW 115
10744: GO 10760
// ComAttackUnit ( j , target2 ) ;
10746: LD_VAR 0 7
10750: PPUSH
10751: LD_VAR 0 10
10755: PPUSH
10756: CALL_OW 115
// end ;
10760: GO 10560
10762: POP
10763: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10764: LD_INT 22
10766: PUSH
10767: LD_VAR 0 1
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 21
10778: PUSH
10779: LD_INT 2
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 24
10788: PUSH
10789: LD_INT 250
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 2
10798: PUSH
10799: LD_INT 34
10801: PUSH
10802: LD_INT 43
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 34
10811: PUSH
10812: LD_INT 44
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: LD_INT 34
10821: PUSH
10822: LD_INT 46
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 3
10837: PUSH
10838: LD_INT 58
10840: PUSH
10841: EMPTY
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: PPUSH
10855: CALL_OW 69
10859: PUSH
10860: LD_INT 0
10862: EQUAL
10863: IFFALSE 10302
// seeEnemy = 0 ;
10865: LD_ADDR_VAR 0 11
10869: PUSH
10870: LD_INT 0
10872: ST_TO_ADDR
// end ;
10873: LD_VAR 0 5
10877: RET
// export function SikorskyVehiclesAttack ( side ) ; var i , j , target1 , target2 , vehiclesOk ; begin
10878: LD_INT 0
10880: PPUSH
10881: PPUSH
10882: PPUSH
10883: PPUSH
10884: PPUSH
10885: PPUSH
// repeat wait ( 0 0$1 ) ;
10886: LD_INT 35
10888: PPUSH
10889: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) ;
10893: LD_ADDR_VAR 0 7
10897: PUSH
10898: LD_INT 22
10900: PUSH
10901: LD_VAR 0 1
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: PUSH
10910: LD_INT 21
10912: PUSH
10913: LD_INT 2
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 24
10922: PUSH
10923: LD_INT 651
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: PPUSH
10935: CALL_OW 69
10939: ST_TO_ADDR
// for j in vehiclesOK do
10940: LD_ADDR_VAR 0 4
10944: PUSH
10945: LD_VAR 0 7
10949: PUSH
10950: FOR_IN
10951: IFFALSE 11152
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
10953: LD_ADDR_VAR 0 5
10957: PUSH
10958: LD_INT 81
10960: PUSH
10961: LD_VAR 0 1
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 101
10972: PUSH
10973: LD_INT 1
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PPUSH
10984: CALL_OW 69
10988: PPUSH
10989: LD_VAR 0 4
10993: PPUSH
10994: CALL_OW 74
10998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
10999: LD_ADDR_VAR 0 6
11003: PUSH
11004: LD_INT 81
11006: PUSH
11007: LD_VAR 0 1
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 101
11018: PUSH
11019: LD_INT 1
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 2
11028: PUSH
11029: LD_INT 59
11031: PUSH
11032: EMPTY
11033: LIST
11034: PUSH
11035: LD_INT 21
11037: PUSH
11038: LD_INT 1
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 21
11047: PUSH
11048: LD_INT 2
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: LIST
11065: PUSH
11066: EMPTY
11067: LIST
11068: PPUSH
11069: CALL_OW 69
11073: PPUSH
11074: LD_VAR 0 4
11078: PPUSH
11079: CALL_OW 74
11083: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
11084: LD_VAR 0 4
11088: PPUSH
11089: LD_VAR 0 5
11093: PPUSH
11094: CALL_OW 296
11098: PUSH
11099: LD_INT 8
11101: PLUS
11102: PUSH
11103: LD_VAR 0 4
11107: PPUSH
11108: LD_VAR 0 6
11112: PPUSH
11113: CALL_OW 296
11117: LESS
11118: IFFALSE 11136
// ComAttackUnit ( j , target1 ) else
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_VAR 0 5
11129: PPUSH
11130: CALL_OW 115
11134: GO 11150
// ComAttackUnit ( j , target2 ) ;
11136: LD_VAR 0 4
11140: PPUSH
11141: LD_VAR 0 6
11145: PPUSH
11146: CALL_OW 115
// end ;
11150: GO 10950
11152: POP
11153: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
11154: LD_INT 22
11156: PUSH
11157: LD_VAR 0 1
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 21
11168: PUSH
11169: LD_INT 2
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: LD_INT 24
11178: PUSH
11179: LD_INT 250
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: LIST
11190: PPUSH
11191: CALL_OW 69
11195: PUSH
11196: LD_INT 0
11198: EQUAL
11199: IFFALSE 10886
// end ;
11201: LD_VAR 0 2
11205: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11206: LD_INT 0
11208: PPUSH
11209: PPUSH
11210: PPUSH
11211: PPUSH
11212: PPUSH
11213: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11214: LD_ADDR_VAR 0 8
11218: PUSH
11219: LD_VAR 0 2
11223: PPUSH
11224: CALL_OW 313
11228: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
11229: LD_ADDR_VAR 0 9
11233: PUSH
11234: LD_VAR 0 3
11238: PPUSH
11239: LD_INT 22
11241: PUSH
11242: LD_VAR 0 1
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 25
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 24
11263: PUSH
11264: LD_INT 750
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 3
11273: PUSH
11274: LD_INT 54
11276: PUSH
11277: EMPTY
11278: LIST
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: PPUSH
11290: CALL_OW 70
11294: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11295: LD_ADDR_VAR 0 6
11299: PUSH
11300: LD_VAR 0 3
11304: PPUSH
11305: LD_INT 22
11307: PUSH
11308: LD_VAR 0 1
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 21
11319: PUSH
11320: LD_INT 3
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: LD_INT 3
11329: PUSH
11330: LD_INT 24
11332: PUSH
11333: LD_INT 1000
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: PPUSH
11352: CALL_OW 70
11356: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
11357: LD_VAR 0 6
11361: NOT
11362: PUSH
11363: LD_INT 22
11365: PUSH
11366: LD_VAR 0 1
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 25
11377: PUSH
11378: LD_INT 2
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 24
11387: PUSH
11388: LD_INT 250
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: PPUSH
11400: CALL_OW 69
11404: NOT
11405: AND
11406: IFFALSE 11410
// exit ;
11408: GO 11607
// if buildings_list > 0 and engineerOkInside then
11410: LD_VAR 0 6
11414: PUSH
11415: LD_INT 0
11417: GREATER
11418: PUSH
11419: LD_VAR 0 8
11423: AND
11424: IFFALSE 11450
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
11426: LD_VAR 0 8
11430: PPUSH
11431: LD_INT 25
11433: PUSH
11434: LD_INT 2
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: PPUSH
11441: CALL_OW 72
11445: PPUSH
11446: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
11450: LD_VAR 0 6
11454: PUSH
11455: LD_INT 0
11457: GREATER
11458: PUSH
11459: LD_VAR 0 9
11463: PUSH
11464: LD_INT 0
11466: GREATER
11467: AND
11468: IFFALSE 11488
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
11470: LD_VAR 0 9
11474: PPUSH
11475: LD_VAR 0 6
11479: PUSH
11480: LD_INT 1
11482: ARRAY
11483: PPUSH
11484: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
11488: LD_VAR 0 6
11492: PUSH
11493: LD_INT 0
11495: EQUAL
11496: PUSH
11497: LD_VAR 0 4
11501: PUSH
11502: LD_INT 0
11504: EQUAL
11505: AND
11506: PUSH
11507: LD_VAR 0 9
11511: PUSH
11512: LD_INT 0
11514: GREATER
11515: AND
11516: IFFALSE 11532
// ComEnterUnit ( engineerOkOutside , building ) ;
11518: LD_VAR 0 9
11522: PPUSH
11523: LD_VAR 0 2
11527: PPUSH
11528: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
11532: LD_VAR 0 9
11536: PUSH
11537: LD_INT 0
11539: GREATER
11540: PUSH
11541: LD_VAR 0 6
11545: PUSH
11546: LD_INT 0
11548: EQUAL
11549: AND
11550: PUSH
11551: LD_VAR 0 4
11555: PUSH
11556: LD_INT 0
11558: GREATER
11559: AND
11560: IFFALSE 11607
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11562: LD_VAR 0 9
11566: PPUSH
11567: LD_VAR 0 4
11571: PUSH
11572: LD_INT 1
11574: ARRAY
11575: PPUSH
11576: LD_VAR 0 4
11580: PUSH
11581: LD_INT 2
11583: ARRAY
11584: PPUSH
11585: LD_VAR 0 4
11589: PUSH
11590: LD_INT 3
11592: ARRAY
11593: PPUSH
11594: LD_VAR 0 4
11598: PUSH
11599: LD_INT 4
11601: ARRAY
11602: PPUSH
11603: CALL_OW 145
// end ;
11607: LD_VAR 0 5
11611: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
11612: LD_INT 0
11614: PPUSH
11615: PPUSH
11616: PPUSH
11617: PPUSH
11618: PPUSH
11619: PPUSH
11620: PPUSH
11621: PPUSH
11622: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
11623: LD_ADDR_VAR 0 6
11627: PUSH
11628: LD_INT 22
11630: PUSH
11631: LD_VAR 0 1
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 25
11642: PUSH
11643: LD_INT 4
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 23
11652: PUSH
11653: LD_INT 2
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: LD_INT 24
11662: PUSH
11663: LD_INT 251
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: PPUSH
11676: CALL_OW 69
11680: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
11681: LD_ADDR_VAR 0 7
11685: PUSH
11686: LD_VAR 0 3
11690: PPUSH
11691: LD_INT 22
11693: PUSH
11694: LD_VAR 0 1
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 23
11705: PUSH
11706: LD_INT 2
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 25
11715: PUSH
11716: LD_INT 4
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 50
11725: PUSH
11726: EMPTY
11727: LIST
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: PPUSH
11735: CALL_OW 70
11739: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11740: LD_ADDR_VAR 0 10
11744: PUSH
11745: LD_VAR 0 3
11749: PPUSH
11750: LD_INT 22
11752: PUSH
11753: LD_VAR 0 1
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 21
11764: PUSH
11765: LD_INT 1
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 3
11774: PUSH
11775: LD_INT 25
11777: PUSH
11778: LD_INT 3
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 3
11791: PUSH
11792: LD_INT 24
11794: PUSH
11795: LD_INT 750
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: PPUSH
11812: CALL_OW 70
11816: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11817: LD_ADDR_VAR 0 11
11821: PUSH
11822: LD_VAR 0 2
11826: PPUSH
11827: LD_INT 22
11829: PUSH
11830: LD_VAR 0 1
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 21
11841: PUSH
11842: LD_INT 1
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PUSH
11849: LD_INT 3
11851: PUSH
11852: LD_INT 25
11854: PUSH
11855: LD_INT 3
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 3
11868: PUSH
11869: LD_INT 24
11871: PUSH
11872: LD_INT 1000
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: PPUSH
11889: CALL_OW 70
11893: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
11894: LD_VAR 0 10
11898: NOT
11899: PUSH
11900: LD_VAR 0 11
11904: NOT
11905: AND
11906: PUSH
11907: LD_VAR 0 6
11911: NOT
11912: AND
11913: IFFALSE 11917
// exit ;
11915: GO 12151
// if damageUnits > 0 and sci_list > 0 then
11917: LD_VAR 0 10
11921: PUSH
11922: LD_INT 0
11924: GREATER
11925: PUSH
11926: LD_VAR 0 6
11930: PUSH
11931: LD_INT 0
11933: GREATER
11934: AND
11935: IFFALSE 11951
// ComMoveToArea ( damageUnits , healArea ) ;
11937: LD_VAR 0 10
11941: PPUSH
11942: LD_VAR 0 2
11946: PPUSH
11947: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
11951: LD_VAR 0 11
11955: PUSH
11956: LD_INT 0
11958: GREATER
11959: PUSH
11960: LD_VAR 0 6
11964: PUSH
11965: LD_INT 0
11967: GREATER
11968: AND
11969: IFFALSE 11980
// ComExitBuilding ( sci_list ) ;
11971: LD_VAR 0 6
11975: PPUSH
11976: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
11980: LD_VAR 0 11
11984: PUSH
11985: LD_INT 0
11987: GREATER
11988: PUSH
11989: LD_VAR 0 7
11993: PUSH
11994: LD_INT 0
11996: GREATER
11997: AND
11998: IFFALSE 12018
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
12000: LD_VAR 0 7
12004: PPUSH
12005: LD_VAR 0 11
12009: PUSH
12010: LD_INT 1
12012: ARRAY
12013: PPUSH
12014: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12018: LD_VAR 0 10
12022: PUSH
12023: LD_INT 0
12025: EQUAL
12026: PUSH
12027: LD_VAR 0 11
12031: PUSH
12032: LD_INT 0
12034: EQUAL
12035: AND
12036: PUSH
12037: LD_VAR 0 7
12041: PUSH
12042: LD_INT 0
12044: GREATER
12045: AND
12046: IFFALSE 12151
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12048: LD_ADDR_VAR 0 12
12052: PUSH
12053: LD_INT 22
12055: PUSH
12056: LD_VAR 0 1
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 21
12067: PUSH
12068: LD_INT 3
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 30
12077: PUSH
12078: LD_INT 8
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: LIST
12089: PPUSH
12090: CALL_OW 69
12094: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12095: LD_ADDR_VAR 0 13
12099: PUSH
12100: LD_INT 1
12102: PPUSH
12103: LD_VAR 0 12
12107: PPUSH
12108: CALL_OW 12
12112: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
12113: LD_VAR 0 7
12117: PPUSH
12118: LD_INT 3
12120: PUSH
12121: LD_INT 60
12123: PUSH
12124: EMPTY
12125: LIST
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PPUSH
12131: CALL_OW 72
12135: PPUSH
12136: LD_VAR 0 12
12140: PUSH
12141: LD_VAR 0 13
12145: ARRAY
12146: PPUSH
12147: CALL_OW 120
// end ; end ;
12151: LD_VAR 0 5
12155: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
12156: LD_INT 0
12158: PPUSH
12159: PPUSH
12160: PPUSH
12161: PPUSH
12162: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
12163: LD_ADDR_VAR 0 6
12167: PUSH
12168: LD_INT 22
12170: PUSH
12171: LD_VAR 0 1
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: LD_INT 2
12182: PUSH
12183: LD_INT 30
12185: PUSH
12186: LD_INT 31
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: LD_INT 30
12195: PUSH
12196: LD_INT 32
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: LD_INT 30
12205: PUSH
12206: LD_INT 33
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PUSH
12213: LD_INT 30
12215: PUSH
12216: LD_INT 4
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PUSH
12223: LD_INT 30
12225: PUSH
12226: LD_INT 5
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PPUSH
12245: CALL_OW 69
12249: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
12250: LD_ADDR_VAR 0 7
12254: PUSH
12255: LD_INT 22
12257: PUSH
12258: LD_VAR 0 2
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 21
12269: PUSH
12270: LD_INT 3
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 58
12279: PUSH
12280: EMPTY
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 69
12292: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
12293: LD_VAR 0 6
12297: PUSH
12298: LD_INT 0
12300: GREATER
12301: PUSH
12302: LD_VAR 0 7
12306: PUSH
12307: LD_INT 0
12309: GREATER
12310: AND
12311: IFFALSE 12381
// begin for i in turretsList do
12313: LD_ADDR_VAR 0 4
12317: PUSH
12318: LD_VAR 0 6
12322: PUSH
12323: FOR_IN
12324: IFFALSE 12379
// begin for j in enemyBuildings do
12326: LD_ADDR_VAR 0 5
12330: PUSH
12331: LD_VAR 0 7
12335: PUSH
12336: FOR_IN
12337: IFFALSE 12375
// begin if GetDistUnits ( i , j ) < 20 then
12339: LD_VAR 0 4
12343: PPUSH
12344: LD_VAR 0 5
12348: PPUSH
12349: CALL_OW 296
12353: PUSH
12354: LD_INT 20
12356: LESS
12357: IFFALSE 12373
// begin ComAttackUnit ( i , j ) ;
12359: LD_VAR 0 4
12363: PPUSH
12364: LD_VAR 0 5
12368: PPUSH
12369: CALL_OW 115
// end ; end ;
12373: GO 12336
12375: POP
12376: POP
// end ;
12377: GO 12323
12379: POP
12380: POP
// end ; end ;
12381: LD_VAR 0 3
12385: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12386: LD_INT 0
12388: PPUSH
12389: PPUSH
12390: PPUSH
12391: PPUSH
12392: PPUSH
12393: PPUSH
12394: PPUSH
12395: PPUSH
12396: PPUSH
12397: PPUSH
12398: PPUSH
// for i = 1 to medicCount do
12399: LD_ADDR_VAR 0 14
12403: PUSH
12404: DOUBLE
12405: LD_INT 1
12407: DEC
12408: ST_TO_ADDR
12409: LD_VAR 0 7
12413: PUSH
12414: FOR_TO
12415: IFFALSE 12497
// begin uc_side = side ;
12417: LD_ADDR_OWVAR 20
12421: PUSH
12422: LD_VAR 0 1
12426: ST_TO_ADDR
// uc_nation = nation ;
12427: LD_ADDR_OWVAR 21
12431: PUSH
12432: LD_VAR 0 2
12436: ST_TO_ADDR
// hc_name =  ;
12437: LD_ADDR_OWVAR 26
12441: PUSH
12442: LD_STRING 
12444: ST_TO_ADDR
// hc_gallery =  ;
12445: LD_ADDR_OWVAR 33
12449: PUSH
12450: LD_STRING 
12452: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12453: LD_INT 0
12455: PPUSH
12456: LD_INT 4
12458: PPUSH
12459: LD_VAR 0 8
12463: PPUSH
12464: CALL_OW 380
// un = CreateHuman ;
12468: LD_ADDR_VAR 0 16
12472: PUSH
12473: CALL_OW 44
12477: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12478: LD_VAR 0 16
12482: PPUSH
12483: LD_VAR 0 9
12487: PPUSH
12488: LD_INT 0
12490: PPUSH
12491: CALL_OW 49
// end ;
12495: GO 12414
12497: POP
12498: POP
// for i = 1 to soldierCount do
12499: LD_ADDR_VAR 0 14
12503: PUSH
12504: DOUBLE
12505: LD_INT 1
12507: DEC
12508: ST_TO_ADDR
12509: LD_VAR 0 3
12513: PUSH
12514: FOR_TO
12515: IFFALSE 12597
// begin uc_side = side ;
12517: LD_ADDR_OWVAR 20
12521: PUSH
12522: LD_VAR 0 1
12526: ST_TO_ADDR
// uc_nation = nation ;
12527: LD_ADDR_OWVAR 21
12531: PUSH
12532: LD_VAR 0 2
12536: ST_TO_ADDR
// hc_name =  ;
12537: LD_ADDR_OWVAR 26
12541: PUSH
12542: LD_STRING 
12544: ST_TO_ADDR
// hc_gallery =  ;
12545: LD_ADDR_OWVAR 33
12549: PUSH
12550: LD_STRING 
12552: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12553: LD_INT 0
12555: PPUSH
12556: LD_INT 1
12558: PPUSH
12559: LD_VAR 0 8
12563: PPUSH
12564: CALL_OW 380
// un = CreateHuman ;
12568: LD_ADDR_VAR 0 16
12572: PUSH
12573: CALL_OW 44
12577: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12578: LD_VAR 0 16
12582: PPUSH
12583: LD_VAR 0 9
12587: PPUSH
12588: LD_INT 0
12590: PPUSH
12591: CALL_OW 49
// end ;
12595: GO 12514
12597: POP
12598: POP
// for i = 1 to sniperCount do
12599: LD_ADDR_VAR 0 14
12603: PUSH
12604: DOUBLE
12605: LD_INT 1
12607: DEC
12608: ST_TO_ADDR
12609: LD_VAR 0 4
12613: PUSH
12614: FOR_TO
12615: IFFALSE 12697
// begin uc_side = side ;
12617: LD_ADDR_OWVAR 20
12621: PUSH
12622: LD_VAR 0 1
12626: ST_TO_ADDR
// uc_nation = nation ;
12627: LD_ADDR_OWVAR 21
12631: PUSH
12632: LD_VAR 0 2
12636: ST_TO_ADDR
// hc_name =  ;
12637: LD_ADDR_OWVAR 26
12641: PUSH
12642: LD_STRING 
12644: ST_TO_ADDR
// hc_gallery =  ;
12645: LD_ADDR_OWVAR 33
12649: PUSH
12650: LD_STRING 
12652: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12653: LD_INT 0
12655: PPUSH
12656: LD_INT 5
12658: PPUSH
12659: LD_VAR 0 8
12663: PPUSH
12664: CALL_OW 380
// un = CreateHuman ;
12668: LD_ADDR_VAR 0 16
12672: PUSH
12673: CALL_OW 44
12677: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12678: LD_VAR 0 16
12682: PPUSH
12683: LD_VAR 0 9
12687: PPUSH
12688: LD_INT 0
12690: PPUSH
12691: CALL_OW 49
// end ;
12695: GO 12614
12697: POP
12698: POP
// for i = 1 to bazookCount do
12699: LD_ADDR_VAR 0 14
12703: PUSH
12704: DOUBLE
12705: LD_INT 1
12707: DEC
12708: ST_TO_ADDR
12709: LD_VAR 0 5
12713: PUSH
12714: FOR_TO
12715: IFFALSE 12797
// begin uc_side = side ;
12717: LD_ADDR_OWVAR 20
12721: PUSH
12722: LD_VAR 0 1
12726: ST_TO_ADDR
// uc_nation = nation ;
12727: LD_ADDR_OWVAR 21
12731: PUSH
12732: LD_VAR 0 2
12736: ST_TO_ADDR
// hc_name =  ;
12737: LD_ADDR_OWVAR 26
12741: PUSH
12742: LD_STRING 
12744: ST_TO_ADDR
// hc_gallery =  ;
12745: LD_ADDR_OWVAR 33
12749: PUSH
12750: LD_STRING 
12752: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12753: LD_INT 0
12755: PPUSH
12756: LD_INT 9
12758: PPUSH
12759: LD_VAR 0 8
12763: PPUSH
12764: CALL_OW 380
// un = CreateHuman ;
12768: LD_ADDR_VAR 0 16
12772: PUSH
12773: CALL_OW 44
12777: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12778: LD_VAR 0 16
12782: PPUSH
12783: LD_VAR 0 9
12787: PPUSH
12788: LD_INT 0
12790: PPUSH
12791: CALL_OW 49
// end ;
12795: GO 12714
12797: POP
12798: POP
// for i = 1 to mortalCount do
12799: LD_ADDR_VAR 0 14
12803: PUSH
12804: DOUBLE
12805: LD_INT 1
12807: DEC
12808: ST_TO_ADDR
12809: LD_VAR 0 6
12813: PUSH
12814: FOR_TO
12815: IFFALSE 12897
// begin uc_side = side ;
12817: LD_ADDR_OWVAR 20
12821: PUSH
12822: LD_VAR 0 1
12826: ST_TO_ADDR
// uc_nation = nation ;
12827: LD_ADDR_OWVAR 21
12831: PUSH
12832: LD_VAR 0 2
12836: ST_TO_ADDR
// hc_name =  ;
12837: LD_ADDR_OWVAR 26
12841: PUSH
12842: LD_STRING 
12844: ST_TO_ADDR
// hc_gallery =  ;
12845: LD_ADDR_OWVAR 33
12849: PUSH
12850: LD_STRING 
12852: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12853: LD_INT 0
12855: PPUSH
12856: LD_INT 8
12858: PPUSH
12859: LD_VAR 0 8
12863: PPUSH
12864: CALL_OW 380
// un = CreateHuman ;
12868: LD_ADDR_VAR 0 16
12872: PUSH
12873: CALL_OW 44
12877: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12878: LD_VAR 0 16
12882: PPUSH
12883: LD_VAR 0 9
12887: PPUSH
12888: LD_INT 0
12890: PPUSH
12891: CALL_OW 49
// end ;
12895: GO 12814
12897: POP
12898: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12899: LD_ADDR_VAR 0 19
12903: PUSH
12904: LD_INT 22
12906: PUSH
12907: LD_VAR 0 1
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 2
12918: PUSH
12919: LD_INT 25
12921: PUSH
12922: LD_INT 1
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 25
12931: PUSH
12932: LD_INT 5
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 25
12941: PUSH
12942: LD_INT 8
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 25
12951: PUSH
12952: LD_INT 9
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PPUSH
12970: CALL_OW 69
12974: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12975: LD_ADDR_VAR 0 18
12979: PUSH
12980: LD_INT 22
12982: PUSH
12983: LD_VAR 0 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 25
12994: PUSH
12995: LD_INT 4
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: PPUSH
13006: CALL_OW 69
13010: ST_TO_ADDR
// for i in medic_list do
13011: LD_ADDR_VAR 0 14
13015: PUSH
13016: LD_VAR 0 18
13020: PUSH
13021: FOR_IN
13022: IFFALSE 13040
// ComMoveToArea ( i , healArea ) ;
13024: LD_VAR 0 14
13028: PPUSH
13029: LD_VAR 0 10
13033: PPUSH
13034: CALL_OW 113
13038: GO 13021
13040: POP
13041: POP
// if strategy = 1 then
13042: LD_VAR 0 12
13046: PUSH
13047: LD_INT 1
13049: EQUAL
13050: IFFALSE 13596
// begin repeat wait ( 0 0$3 ) ;
13052: LD_INT 105
13054: PPUSH
13055: CALL_OW 67
// for i in soldiersOK_list do
13059: LD_ADDR_VAR 0 14
13063: PUSH
13064: LD_VAR 0 19
13068: PUSH
13069: FOR_IN
13070: IFFALSE 13134
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13072: LD_VAR 0 14
13076: PPUSH
13077: LD_INT 91
13079: PPUSH
13080: LD_INT 63
13082: PPUSH
13083: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
13087: LD_VAR 0 14
13091: PPUSH
13092: LD_INT 101
13094: PPUSH
13095: LD_INT 53
13097: PPUSH
13098: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
13102: LD_VAR 0 14
13106: PPUSH
13107: LD_INT 75
13109: PPUSH
13110: LD_INT 23
13112: PPUSH
13113: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
13117: LD_VAR 0 14
13121: PPUSH
13122: LD_INT 78
13124: PPUSH
13125: LD_INT 8
13127: PPUSH
13128: CALL_OW 174
// end ;
13132: GO 13069
13134: POP
13135: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
13136: LD_INT 12
13138: PPUSH
13139: LD_INT 22
13141: PUSH
13142: LD_VAR 0 1
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 70
13155: PUSH
13156: LD_INT 2
13158: GREATER
13159: IFFALSE 13052
// repeat wait ( 0 0$1 ) ;
13161: LD_INT 35
13163: PPUSH
13164: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13168: LD_ADDR_VAR 0 17
13172: PUSH
13173: LD_INT 22
13175: PUSH
13176: LD_VAR 0 1
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PUSH
13185: LD_INT 1
13187: PUSH
13188: LD_INT 3
13190: PUSH
13191: LD_INT 24
13193: PUSH
13194: LD_INT 550
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 24
13207: PUSH
13208: LD_INT 250
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 69
13228: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13229: LD_ADDR_VAR 0 19
13233: PUSH
13234: LD_INT 22
13236: PUSH
13237: LD_VAR 0 1
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: LD_INT 2
13248: PUSH
13249: LD_INT 25
13251: PUSH
13252: LD_INT 1
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 25
13261: PUSH
13262: LD_INT 5
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: PUSH
13269: LD_INT 25
13271: PUSH
13272: LD_INT 8
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 25
13281: PUSH
13282: LD_INT 9
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: PUSH
13296: LD_INT 24
13298: PUSH
13299: LD_INT 1000
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: PPUSH
13311: CALL_OW 69
13315: ST_TO_ADDR
// if medicCount > 0 then
13316: LD_VAR 0 7
13320: PUSH
13321: LD_INT 0
13323: GREATER
13324: IFFALSE 13398
// begin if damageUnit_list > 0 then
13326: LD_VAR 0 17
13330: PUSH
13331: LD_INT 0
13333: GREATER
13334: IFFALSE 13398
// begin for i in damageUnit_list do
13336: LD_ADDR_VAR 0 14
13340: PUSH
13341: LD_VAR 0 17
13345: PUSH
13346: FOR_IN
13347: IFFALSE 13396
// begin ComMoveToArea ( i , healArea ) ;
13349: LD_VAR 0 14
13353: PPUSH
13354: LD_VAR 0 10
13358: PPUSH
13359: CALL_OW 113
// for j in medic_list do
13363: LD_ADDR_VAR 0 15
13367: PUSH
13368: LD_VAR 0 18
13372: PUSH
13373: FOR_IN
13374: IFFALSE 13392
// AddComHeal ( j , i ) ;
13376: LD_VAR 0 15
13380: PPUSH
13381: LD_VAR 0 14
13385: PPUSH
13386: CALL_OW 188
13390: GO 13373
13392: POP
13393: POP
// end ;
13394: GO 13346
13396: POP
13397: POP
// end ; end ; for i in soldiersOK_list do
13398: LD_ADDR_VAR 0 14
13402: PUSH
13403: LD_VAR 0 19
13407: PUSH
13408: FOR_IN
13409: IFFALSE 13585
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13411: LD_ADDR_VAR 0 22
13415: PUSH
13416: LD_INT 22
13418: PUSH
13419: LD_VAR 0 11
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PPUSH
13428: CALL_OW 69
13432: PPUSH
13433: LD_VAR 0 14
13437: PPUSH
13438: CALL_OW 74
13442: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13443: LD_ADDR_VAR 0 23
13447: PUSH
13448: LD_INT 22
13450: PUSH
13451: LD_VAR 0 11
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: LD_INT 2
13462: PUSH
13463: LD_INT 59
13465: PUSH
13466: EMPTY
13467: LIST
13468: PUSH
13469: LD_INT 21
13471: PUSH
13472: LD_INT 1
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: LD_INT 21
13481: PUSH
13482: LD_INT 2
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: PPUSH
13502: CALL_OW 69
13506: PPUSH
13507: LD_VAR 0 14
13511: PPUSH
13512: CALL_OW 74
13516: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
13517: LD_VAR 0 14
13521: PPUSH
13522: LD_VAR 0 22
13526: PPUSH
13527: CALL_OW 296
13531: PUSH
13532: LD_INT 6
13534: PLUS
13535: PUSH
13536: LD_VAR 0 14
13540: PPUSH
13541: LD_VAR 0 23
13545: PPUSH
13546: CALL_OW 296
13550: LESS
13551: IFFALSE 13569
// begin ComAttackUnit ( i , target1 ) ;
13553: LD_VAR 0 14
13557: PPUSH
13558: LD_VAR 0 22
13562: PPUSH
13563: CALL_OW 115
// end else
13567: GO 13583
// begin ComAttackUnit ( i , target2 ) ;
13569: LD_VAR 0 14
13573: PPUSH
13574: LD_VAR 0 23
13578: PPUSH
13579: CALL_OW 115
// end ; end ;
13583: GO 13408
13585: POP
13586: POP
// until soldiersOK_list = [ ] ;
13587: LD_VAR 0 19
13591: PUSH
13592: EMPTY
13593: EQUAL
13594: IFFALSE 13161
// end ; if strategy = 2 then
13596: LD_VAR 0 12
13600: PUSH
13601: LD_INT 2
13603: EQUAL
13604: IFFALSE 14120
// begin repeat wait ( 0 0$1 ) ;
13606: LD_INT 35
13608: PPUSH
13609: CALL_OW 67
// for i in soldiersOK_list do
13613: LD_ADDR_VAR 0 14
13617: PUSH
13618: LD_VAR 0 19
13622: PUSH
13623: FOR_IN
13624: IFFALSE 13658
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
13626: LD_VAR 0 14
13630: PPUSH
13631: LD_INT 91
13633: PPUSH
13634: LD_INT 63
13636: PPUSH
13637: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
13641: LD_VAR 0 14
13645: PPUSH
13646: LD_INT 75
13648: PPUSH
13649: LD_INT 33
13651: PPUSH
13652: CALL_OW 174
// end ;
13656: GO 13623
13658: POP
13659: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
13660: LD_INT 13
13662: PPUSH
13663: LD_INT 22
13665: PUSH
13666: LD_VAR 0 1
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PPUSH
13675: CALL_OW 70
13679: PUSH
13680: LD_INT 2
13682: GREATER
13683: IFFALSE 13606
// repeat wait ( 0 0$3 ) ;
13685: LD_INT 105
13687: PPUSH
13688: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
13692: LD_ADDR_VAR 0 17
13696: PUSH
13697: LD_INT 22
13699: PUSH
13700: LD_VAR 0 1
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 1
13711: PUSH
13712: LD_INT 3
13714: PUSH
13715: LD_INT 24
13717: PUSH
13718: LD_INT 550
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 24
13731: PUSH
13732: LD_INT 250
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PPUSH
13748: CALL_OW 69
13752: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
13753: LD_ADDR_VAR 0 19
13757: PUSH
13758: LD_INT 22
13760: PUSH
13761: LD_VAR 0 1
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 2
13772: PUSH
13773: LD_INT 25
13775: PUSH
13776: LD_INT 1
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 25
13785: PUSH
13786: LD_INT 5
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 25
13795: PUSH
13796: LD_INT 8
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 25
13805: PUSH
13806: LD_INT 9
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 24
13822: PUSH
13823: LD_INT 1000
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: PPUSH
13835: CALL_OW 69
13839: ST_TO_ADDR
// if medicCount > 0 then
13840: LD_VAR 0 7
13844: PUSH
13845: LD_INT 0
13847: GREATER
13848: IFFALSE 13922
// begin if damageUnit_list > 0 then
13850: LD_VAR 0 17
13854: PUSH
13855: LD_INT 0
13857: GREATER
13858: IFFALSE 13922
// begin for i in damageUnit_list do
13860: LD_ADDR_VAR 0 14
13864: PUSH
13865: LD_VAR 0 17
13869: PUSH
13870: FOR_IN
13871: IFFALSE 13920
// begin ComMoveToArea ( i , healArea ) ;
13873: LD_VAR 0 14
13877: PPUSH
13878: LD_VAR 0 10
13882: PPUSH
13883: CALL_OW 113
// for j in medic_list do
13887: LD_ADDR_VAR 0 15
13891: PUSH
13892: LD_VAR 0 18
13896: PUSH
13897: FOR_IN
13898: IFFALSE 13916
// AddComHeal ( j , i ) ;
13900: LD_VAR 0 15
13904: PPUSH
13905: LD_VAR 0 14
13909: PPUSH
13910: CALL_OW 188
13914: GO 13897
13916: POP
13917: POP
// end ;
13918: GO 13870
13920: POP
13921: POP
// end ; end ; for i in soldiersOK_list do
13922: LD_ADDR_VAR 0 14
13926: PUSH
13927: LD_VAR 0 19
13931: PUSH
13932: FOR_IN
13933: IFFALSE 14109
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13935: LD_ADDR_VAR 0 22
13939: PUSH
13940: LD_INT 22
13942: PUSH
13943: LD_VAR 0 11
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: PPUSH
13952: CALL_OW 69
13956: PPUSH
13957: LD_VAR 0 14
13961: PPUSH
13962: CALL_OW 74
13966: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13967: LD_ADDR_VAR 0 23
13971: PUSH
13972: LD_INT 22
13974: PUSH
13975: LD_VAR 0 11
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: LD_INT 2
13986: PUSH
13987: LD_INT 59
13989: PUSH
13990: EMPTY
13991: LIST
13992: PUSH
13993: LD_INT 21
13995: PUSH
13996: LD_INT 1
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 21
14005: PUSH
14006: LD_INT 2
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: EMPTY
14024: LIST
14025: PPUSH
14026: CALL_OW 69
14030: PPUSH
14031: LD_VAR 0 14
14035: PPUSH
14036: CALL_OW 74
14040: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14041: LD_VAR 0 14
14045: PPUSH
14046: LD_VAR 0 22
14050: PPUSH
14051: CALL_OW 296
14055: PUSH
14056: LD_INT 6
14058: PLUS
14059: PUSH
14060: LD_VAR 0 14
14064: PPUSH
14065: LD_VAR 0 23
14069: PPUSH
14070: CALL_OW 296
14074: LESS
14075: IFFALSE 14093
// begin ComAttackUnit ( i , target1 ) ;
14077: LD_VAR 0 14
14081: PPUSH
14082: LD_VAR 0 22
14086: PPUSH
14087: CALL_OW 115
// end else
14091: GO 14107
// begin ComAttackUnit ( i , target2 ) ;
14093: LD_VAR 0 14
14097: PPUSH
14098: LD_VAR 0 23
14102: PPUSH
14103: CALL_OW 115
// end ; end ;
14107: GO 13932
14109: POP
14110: POP
// until soldiersOK_list = [ ] ;
14111: LD_VAR 0 19
14115: PUSH
14116: EMPTY
14117: EQUAL
14118: IFFALSE 13685
// end ; if strategy = 3 then
14120: LD_VAR 0 12
14124: PUSH
14125: LD_INT 3
14127: EQUAL
14128: IFFALSE 14674
// begin repeat wait ( 0 0$3 ) ;
14130: LD_INT 105
14132: PPUSH
14133: CALL_OW 67
// for i in soldiersOK_list do
14137: LD_ADDR_VAR 0 14
14141: PUSH
14142: LD_VAR 0 19
14146: PUSH
14147: FOR_IN
14148: IFFALSE 14212
// begin AddComAgressiveMove ( i , 63 , 71 ) ;
14150: LD_VAR 0 14
14154: PPUSH
14155: LD_INT 63
14157: PPUSH
14158: LD_INT 71
14160: PPUSH
14161: CALL_OW 174
// AddComAgressiveMove ( i , 35 , 44 ) ;
14165: LD_VAR 0 14
14169: PPUSH
14170: LD_INT 35
14172: PPUSH
14173: LD_INT 44
14175: PPUSH
14176: CALL_OW 174
// AddComAgressiveMove ( i , 23 , 18 ) ;
14180: LD_VAR 0 14
14184: PPUSH
14185: LD_INT 23
14187: PPUSH
14188: LD_INT 18
14190: PPUSH
14191: CALL_OW 174
// AddComAgressiveMove ( i , 26 , 12 ) ;
14195: LD_VAR 0 14
14199: PPUSH
14200: LD_INT 26
14202: PPUSH
14203: LD_INT 12
14205: PPUSH
14206: CALL_OW 174
// end ;
14210: GO 14147
14212: POP
14213: POP
// until FilterUnitsInArea ( EnemyTargetArea3 , [ f_side , side ] ) > 2 ;
14214: LD_INT 14
14216: PPUSH
14217: LD_INT 22
14219: PUSH
14220: LD_VAR 0 1
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: PPUSH
14229: CALL_OW 70
14233: PUSH
14234: LD_INT 2
14236: GREATER
14237: IFFALSE 14130
// repeat wait ( 0 0$1 ) ;
14239: LD_INT 35
14241: PPUSH
14242: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14246: LD_ADDR_VAR 0 17
14250: PUSH
14251: LD_INT 22
14253: PUSH
14254: LD_VAR 0 1
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 1
14265: PUSH
14266: LD_INT 3
14268: PUSH
14269: LD_INT 24
14271: PUSH
14272: LD_INT 550
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 24
14285: PUSH
14286: LD_INT 250
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: LIST
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PPUSH
14302: CALL_OW 69
14306: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14307: LD_ADDR_VAR 0 19
14311: PUSH
14312: LD_INT 22
14314: PUSH
14315: LD_VAR 0 1
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: LD_INT 2
14326: PUSH
14327: LD_INT 25
14329: PUSH
14330: LD_INT 1
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 25
14339: PUSH
14340: LD_INT 5
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 25
14349: PUSH
14350: LD_INT 8
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 25
14359: PUSH
14360: LD_INT 9
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 24
14376: PUSH
14377: LD_INT 1000
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: LIST
14388: PPUSH
14389: CALL_OW 69
14393: ST_TO_ADDR
// if medicCount > 0 then
14394: LD_VAR 0 7
14398: PUSH
14399: LD_INT 0
14401: GREATER
14402: IFFALSE 14476
// begin if damageUnit_list > 0 then
14404: LD_VAR 0 17
14408: PUSH
14409: LD_INT 0
14411: GREATER
14412: IFFALSE 14476
// begin for i in damageUnit_list do
14414: LD_ADDR_VAR 0 14
14418: PUSH
14419: LD_VAR 0 17
14423: PUSH
14424: FOR_IN
14425: IFFALSE 14474
// begin ComMoveToArea ( i , healArea ) ;
14427: LD_VAR 0 14
14431: PPUSH
14432: LD_VAR 0 10
14436: PPUSH
14437: CALL_OW 113
// for j in medic_list do
14441: LD_ADDR_VAR 0 15
14445: PUSH
14446: LD_VAR 0 18
14450: PUSH
14451: FOR_IN
14452: IFFALSE 14470
// AddComHeal ( j , i ) ;
14454: LD_VAR 0 15
14458: PPUSH
14459: LD_VAR 0 14
14463: PPUSH
14464: CALL_OW 188
14468: GO 14451
14470: POP
14471: POP
// end ;
14472: GO 14424
14474: POP
14475: POP
// end ; end ; for i in soldiersOK_list do
14476: LD_ADDR_VAR 0 14
14480: PUSH
14481: LD_VAR 0 19
14485: PUSH
14486: FOR_IN
14487: IFFALSE 14663
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14489: LD_ADDR_VAR 0 22
14493: PUSH
14494: LD_INT 22
14496: PUSH
14497: LD_VAR 0 11
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PPUSH
14506: CALL_OW 69
14510: PPUSH
14511: LD_VAR 0 14
14515: PPUSH
14516: CALL_OW 74
14520: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14521: LD_ADDR_VAR 0 23
14525: PUSH
14526: LD_INT 22
14528: PUSH
14529: LD_VAR 0 11
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: LD_INT 2
14540: PUSH
14541: LD_INT 59
14543: PUSH
14544: EMPTY
14545: LIST
14546: PUSH
14547: LD_INT 21
14549: PUSH
14550: LD_INT 1
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 2
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: EMPTY
14578: LIST
14579: PPUSH
14580: CALL_OW 69
14584: PPUSH
14585: LD_VAR 0 14
14589: PPUSH
14590: CALL_OW 74
14594: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
14595: LD_VAR 0 14
14599: PPUSH
14600: LD_VAR 0 22
14604: PPUSH
14605: CALL_OW 296
14609: PUSH
14610: LD_INT 6
14612: PLUS
14613: PUSH
14614: LD_VAR 0 14
14618: PPUSH
14619: LD_VAR 0 23
14623: PPUSH
14624: CALL_OW 296
14628: LESS
14629: IFFALSE 14647
// begin ComAttackUnit ( i , target1 ) ;
14631: LD_VAR 0 14
14635: PPUSH
14636: LD_VAR 0 22
14640: PPUSH
14641: CALL_OW 115
// end else
14645: GO 14661
// begin ComAttackUnit ( i , target2 ) ;
14647: LD_VAR 0 14
14651: PPUSH
14652: LD_VAR 0 23
14656: PPUSH
14657: CALL_OW 115
// end ; end ;
14661: GO 14486
14663: POP
14664: POP
// until soldiersOK_list = [ ] ;
14665: LD_VAR 0 19
14669: PUSH
14670: EMPTY
14671: EQUAL
14672: IFFALSE 14239
// end ; end ;
14674: LD_VAR 0 13
14678: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14679: LD_INT 0
14681: PPUSH
14682: PPUSH
14683: PPUSH
14684: PPUSH
14685: PPUSH
14686: PPUSH
14687: PPUSH
14688: PPUSH
14689: PPUSH
14690: PPUSH
14691: PPUSH
// amChassisTab = [ ] ;
14692: LD_ADDR_VAR 0 19
14696: PUSH
14697: EMPTY
14698: ST_TO_ADDR
// arChassisTab = [ ] ;
14699: LD_ADDR_VAR 0 18
14703: PUSH
14704: EMPTY
14705: ST_TO_ADDR
// ruChassisTab = [ ] ;
14706: LD_ADDR_VAR 0 17
14710: PUSH
14711: EMPTY
14712: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14713: LD_INT 35
14715: PPUSH
14716: CALL_OW 67
// if nation = 1 then
14720: LD_VAR 0 5
14724: PUSH
14725: LD_INT 1
14727: EQUAL
14728: IFFALSE 15219
// begin uc_side = side ;
14730: LD_ADDR_OWVAR 20
14734: PUSH
14735: LD_VAR 0 2
14739: ST_TO_ADDR
// uc_nation = nation ;
14740: LD_ADDR_OWVAR 21
14744: PUSH
14745: LD_VAR 0 5
14749: ST_TO_ADDR
// vc_engine = vehengine ;
14750: LD_ADDR_OWVAR 39
14754: PUSH
14755: LD_VAR 0 6
14759: ST_TO_ADDR
// vc_control = vehcontrol ;
14760: LD_ADDR_OWVAR 38
14764: PUSH
14765: LD_VAR 0 7
14769: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14770: LD_ADDR_OWVAR 40
14774: PUSH
14775: LD_VAR 0 10
14779: PUSH
14780: LD_INT 1
14782: PPUSH
14783: LD_VAR 0 10
14787: PPUSH
14788: CALL_OW 12
14792: ARRAY
14793: ST_TO_ADDR
// for j = 1 to AMWeapon do
14794: LD_ADDR_VAR 0 14
14798: PUSH
14799: DOUBLE
14800: LD_INT 1
14802: DEC
14803: ST_TO_ADDR
14804: LD_VAR 0 10
14808: PUSH
14809: FOR_TO
14810: IFFALSE 15111
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14812: LD_VAR 0 10
14816: PUSH
14817: LD_VAR 0 14
14821: ARRAY
14822: PUSH
14823: LD_INT 2
14825: EQUAL
14826: PUSH
14827: LD_VAR 0 10
14831: PUSH
14832: LD_VAR 0 14
14836: ARRAY
14837: PUSH
14838: LD_INT 3
14840: EQUAL
14841: OR
14842: IFFALSE 14895
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14844: LD_ADDR_VAR 0 19
14848: PUSH
14849: LD_INT 1
14851: PUSH
14852: LD_INT 2
14854: PUSH
14855: LD_INT 3
14857: PUSH
14858: LD_INT 4
14860: PUSH
14861: LD_INT 5
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14871: LD_ADDR_OWVAR 37
14875: PUSH
14876: LD_VAR 0 19
14880: PUSH
14881: LD_INT 1
14883: PPUSH
14884: LD_VAR 0 19
14888: PPUSH
14889: CALL_OW 12
14893: ARRAY
14894: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14895: LD_VAR 0 10
14899: PUSH
14900: LD_VAR 0 14
14904: ARRAY
14905: PUSH
14906: LD_INT 4
14908: EQUAL
14909: PUSH
14910: LD_VAR 0 10
14914: PUSH
14915: LD_VAR 0 14
14919: ARRAY
14920: PUSH
14921: LD_INT 5
14923: EQUAL
14924: OR
14925: PUSH
14926: LD_VAR 0 10
14930: PUSH
14931: LD_VAR 0 14
14935: ARRAY
14936: PUSH
14937: LD_INT 9
14939: EQUAL
14940: OR
14941: PUSH
14942: LD_VAR 0 10
14946: PUSH
14947: LD_VAR 0 14
14951: ARRAY
14952: PUSH
14953: LD_INT 11
14955: EQUAL
14956: OR
14957: PUSH
14958: LD_VAR 0 10
14962: PUSH
14963: LD_VAR 0 14
14967: ARRAY
14968: PUSH
14969: LD_INT 7
14971: EQUAL
14972: OR
14973: IFFALSE 15022
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14975: LD_ADDR_VAR 0 19
14979: PUSH
14980: LD_INT 2
14982: PUSH
14983: LD_INT 3
14985: PUSH
14986: LD_INT 4
14988: PUSH
14989: LD_INT 5
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14998: LD_ADDR_OWVAR 37
15002: PUSH
15003: LD_VAR 0 19
15007: PUSH
15008: LD_INT 1
15010: PPUSH
15011: LD_VAR 0 19
15015: PPUSH
15016: CALL_OW 12
15020: ARRAY
15021: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15022: LD_VAR 0 10
15026: PUSH
15027: LD_VAR 0 14
15031: ARRAY
15032: PUSH
15033: LD_INT 8
15035: EQUAL
15036: PUSH
15037: LD_VAR 0 10
15041: PUSH
15042: LD_VAR 0 14
15046: ARRAY
15047: PUSH
15048: LD_INT 6
15050: EQUAL
15051: OR
15052: PUSH
15053: LD_VAR 0 10
15057: PUSH
15058: LD_VAR 0 14
15062: ARRAY
15063: PUSH
15064: LD_INT 10
15066: EQUAL
15067: OR
15068: IFFALSE 15109
// begin amChassisTab = [ 4 , 5 ] ;
15070: LD_ADDR_VAR 0 19
15074: PUSH
15075: LD_INT 4
15077: PUSH
15078: LD_INT 5
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15085: LD_ADDR_OWVAR 37
15089: PUSH
15090: LD_VAR 0 19
15094: PUSH
15095: LD_INT 1
15097: PPUSH
15098: LD_VAR 0 19
15102: PPUSH
15103: CALL_OW 12
15107: ARRAY
15108: ST_TO_ADDR
// end ; end ;
15109: GO 14809
15111: POP
15112: POP
// veh = CreateVehicle ;
15113: LD_ADDR_VAR 0 16
15117: PUSH
15118: CALL_OW 45
15122: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15123: LD_VAR 0 16
15127: PPUSH
15128: LD_VAR 0 1
15132: PPUSH
15133: LD_INT 0
15135: PPUSH
15136: CALL_OW 49
// if vehControl = 1 then
15140: LD_VAR 0 7
15144: PUSH
15145: LD_INT 1
15147: EQUAL
15148: IFFALSE 15205
// begin hc_gallery =  ;
15150: LD_ADDR_OWVAR 33
15154: PUSH
15155: LD_STRING 
15157: ST_TO_ADDR
// hc_name =  ;
15158: LD_ADDR_OWVAR 26
15162: PUSH
15163: LD_STRING 
15165: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15166: LD_INT 0
15168: PPUSH
15169: LD_INT 3
15171: PPUSH
15172: LD_VAR 0 4
15176: PPUSH
15177: CALL_OW 380
// un = CreateHuman ;
15181: LD_ADDR_VAR 0 15
15185: PUSH
15186: CALL_OW 44
15190: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15191: LD_VAR 0 15
15195: PPUSH
15196: LD_VAR 0 16
15200: PPUSH
15201: CALL_OW 52
// end ; i = i + 1 ;
15205: LD_ADDR_VAR 0 13
15209: PUSH
15210: LD_VAR 0 13
15214: PUSH
15215: LD_INT 1
15217: PLUS
15218: ST_TO_ADDR
// end ; if nation = 2 then
15219: LD_VAR 0 5
15223: PUSH
15224: LD_INT 2
15226: EQUAL
15227: IFFALSE 15651
// begin uc_side = side ;
15229: LD_ADDR_OWVAR 20
15233: PUSH
15234: LD_VAR 0 2
15238: ST_TO_ADDR
// uc_nation = nation ;
15239: LD_ADDR_OWVAR 21
15243: PUSH
15244: LD_VAR 0 5
15248: ST_TO_ADDR
// vc_engine = vehengine ;
15249: LD_ADDR_OWVAR 39
15253: PUSH
15254: LD_VAR 0 6
15258: ST_TO_ADDR
// vc_control = vehcontrol ;
15259: LD_ADDR_OWVAR 38
15263: PUSH
15264: LD_VAR 0 7
15268: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15269: LD_ADDR_OWVAR 40
15273: PUSH
15274: LD_VAR 0 9
15278: PUSH
15279: LD_INT 1
15281: PPUSH
15282: LD_VAR 0 9
15286: PPUSH
15287: CALL_OW 12
15291: ARRAY
15292: ST_TO_ADDR
// for j = 1 to ARWeapons do
15293: LD_ADDR_VAR 0 14
15297: PUSH
15298: DOUBLE
15299: LD_INT 1
15301: DEC
15302: ST_TO_ADDR
15303: LD_VAR 0 9
15307: PUSH
15308: FOR_TO
15309: IFFALSE 15543
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15311: LD_VAR 0 9
15315: PUSH
15316: LD_VAR 0 14
15320: ARRAY
15321: PUSH
15322: LD_INT 24
15324: EQUAL
15325: PUSH
15326: LD_VAR 0 9
15330: PUSH
15331: LD_VAR 0 14
15335: ARRAY
15336: PUSH
15337: LD_INT 22
15339: EQUAL
15340: OR
15341: PUSH
15342: LD_VAR 0 9
15346: PUSH
15347: LD_VAR 0 14
15351: ARRAY
15352: PUSH
15353: LD_INT 23
15355: EQUAL
15356: OR
15357: PUSH
15358: LD_VAR 0 9
15362: PUSH
15363: LD_VAR 0 14
15367: ARRAY
15368: PUSH
15369: LD_INT 30
15371: EQUAL
15372: OR
15373: IFFALSE 15422
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
15375: LD_ADDR_VAR 0 18
15379: PUSH
15380: LD_INT 11
15382: PUSH
15383: LD_INT 12
15385: PUSH
15386: LD_INT 13
15388: PUSH
15389: LD_INT 14
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15398: LD_ADDR_OWVAR 37
15402: PUSH
15403: LD_VAR 0 18
15407: PUSH
15408: LD_INT 1
15410: PPUSH
15411: LD_VAR 0 18
15415: PPUSH
15416: CALL_OW 12
15420: ARRAY
15421: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15422: LD_VAR 0 9
15426: PUSH
15427: LD_VAR 0 14
15431: ARRAY
15432: PUSH
15433: LD_INT 29
15435: EQUAL
15436: PUSH
15437: LD_VAR 0 9
15441: PUSH
15442: LD_VAR 0 14
15446: ARRAY
15447: PUSH
15448: LD_INT 28
15450: EQUAL
15451: OR
15452: PUSH
15453: LD_VAR 0 9
15457: PUSH
15458: LD_VAR 0 14
15462: ARRAY
15463: PUSH
15464: LD_INT 27
15466: EQUAL
15467: OR
15468: PUSH
15469: LD_VAR 0 9
15473: PUSH
15474: LD_VAR 0 14
15478: ARRAY
15479: PUSH
15480: LD_INT 26
15482: EQUAL
15483: OR
15484: PUSH
15485: LD_VAR 0 9
15489: PUSH
15490: LD_VAR 0 14
15494: ARRAY
15495: PUSH
15496: LD_INT 25
15498: EQUAL
15499: OR
15500: IFFALSE 15541
// begin arChassisTab = [ 13 , 14 ] ;
15502: LD_ADDR_VAR 0 18
15506: PUSH
15507: LD_INT 13
15509: PUSH
15510: LD_INT 14
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15517: LD_ADDR_OWVAR 37
15521: PUSH
15522: LD_VAR 0 18
15526: PUSH
15527: LD_INT 1
15529: PPUSH
15530: LD_VAR 0 18
15534: PPUSH
15535: CALL_OW 12
15539: ARRAY
15540: ST_TO_ADDR
// end ; end ;
15541: GO 15308
15543: POP
15544: POP
// veh = CreateVehicle ;
15545: LD_ADDR_VAR 0 16
15549: PUSH
15550: CALL_OW 45
15554: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15555: LD_VAR 0 16
15559: PPUSH
15560: LD_VAR 0 1
15564: PPUSH
15565: LD_INT 0
15567: PPUSH
15568: CALL_OW 49
// if vehcontrol = 1 then
15572: LD_VAR 0 7
15576: PUSH
15577: LD_INT 1
15579: EQUAL
15580: IFFALSE 15637
// begin hc_gallery =  ;
15582: LD_ADDR_OWVAR 33
15586: PUSH
15587: LD_STRING 
15589: ST_TO_ADDR
// hc_name =  ;
15590: LD_ADDR_OWVAR 26
15594: PUSH
15595: LD_STRING 
15597: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15598: LD_INT 0
15600: PPUSH
15601: LD_INT 3
15603: PPUSH
15604: LD_VAR 0 4
15608: PPUSH
15609: CALL_OW 380
// un = CreateHuman ;
15613: LD_ADDR_VAR 0 15
15617: PUSH
15618: CALL_OW 44
15622: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15623: LD_VAR 0 15
15627: PPUSH
15628: LD_VAR 0 16
15632: PPUSH
15633: CALL_OW 52
// end ; i = i + 1 ;
15637: LD_ADDR_VAR 0 13
15641: PUSH
15642: LD_VAR 0 13
15646: PUSH
15647: LD_INT 1
15649: PLUS
15650: ST_TO_ADDR
// end ; if nation = 3 then
15651: LD_VAR 0 5
15655: PUSH
15656: LD_INT 3
15658: EQUAL
15659: IFFALSE 16051
// begin uc_side = side ;
15661: LD_ADDR_OWVAR 20
15665: PUSH
15666: LD_VAR 0 2
15670: ST_TO_ADDR
// uc_nation = nation ;
15671: LD_ADDR_OWVAR 21
15675: PUSH
15676: LD_VAR 0 5
15680: ST_TO_ADDR
// vc_engine = vehengine ;
15681: LD_ADDR_OWVAR 39
15685: PUSH
15686: LD_VAR 0 6
15690: ST_TO_ADDR
// vc_control = vehcontrol ;
15691: LD_ADDR_OWVAR 38
15695: PUSH
15696: LD_VAR 0 7
15700: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15701: LD_ADDR_OWVAR 40
15705: PUSH
15706: LD_VAR 0 8
15710: PUSH
15711: LD_INT 1
15713: PPUSH
15714: LD_VAR 0 8
15718: PPUSH
15719: CALL_OW 12
15723: ARRAY
15724: ST_TO_ADDR
// for j = 1 to RuWeapons do
15725: LD_ADDR_VAR 0 14
15729: PUSH
15730: DOUBLE
15731: LD_INT 1
15733: DEC
15734: ST_TO_ADDR
15735: LD_VAR 0 8
15739: PUSH
15740: FOR_TO
15741: IFFALSE 15943
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15743: LD_VAR 0 8
15747: PUSH
15748: LD_VAR 0 14
15752: ARRAY
15753: PUSH
15754: LD_INT 42
15756: EQUAL
15757: PUSH
15758: LD_VAR 0 8
15762: PUSH
15763: LD_VAR 0 14
15767: ARRAY
15768: PUSH
15769: LD_INT 43
15771: EQUAL
15772: OR
15773: PUSH
15774: LD_VAR 0 8
15778: PUSH
15779: LD_VAR 0 14
15783: ARRAY
15784: PUSH
15785: LD_INT 44
15787: EQUAL
15788: OR
15789: PUSH
15790: LD_VAR 0 8
15794: PUSH
15795: LD_VAR 0 14
15799: ARRAY
15800: PUSH
15801: LD_INT 45
15803: EQUAL
15804: OR
15805: PUSH
15806: LD_VAR 0 8
15810: PUSH
15811: LD_VAR 0 14
15815: ARRAY
15816: PUSH
15817: LD_INT 49
15819: EQUAL
15820: OR
15821: IFFALSE 15870
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15823: LD_ADDR_VAR 0 17
15827: PUSH
15828: LD_INT 21
15830: PUSH
15831: LD_INT 22
15833: PUSH
15834: LD_INT 23
15836: PUSH
15837: LD_INT 24
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15846: LD_ADDR_OWVAR 37
15850: PUSH
15851: LD_VAR 0 17
15855: PUSH
15856: LD_INT 1
15858: PPUSH
15859: LD_VAR 0 17
15863: PPUSH
15864: CALL_OW 12
15868: ARRAY
15869: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15870: LD_VAR 0 8
15874: PUSH
15875: LD_VAR 0 14
15879: ARRAY
15880: PUSH
15881: LD_INT 46
15883: EQUAL
15884: PUSH
15885: LD_VAR 0 8
15889: PUSH
15890: LD_VAR 0 14
15894: ARRAY
15895: PUSH
15896: LD_INT 47
15898: EQUAL
15899: OR
15900: IFFALSE 15941
// begin ruChassisTab = [ 23 , 24 ] ;
15902: LD_ADDR_VAR 0 17
15906: PUSH
15907: LD_INT 23
15909: PUSH
15910: LD_INT 24
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15917: LD_ADDR_OWVAR 37
15921: PUSH
15922: LD_VAR 0 17
15926: PUSH
15927: LD_INT 1
15929: PPUSH
15930: LD_VAR 0 17
15934: PPUSH
15935: CALL_OW 12
15939: ARRAY
15940: ST_TO_ADDR
// end ; end ;
15941: GO 15740
15943: POP
15944: POP
// veh = CreateVehicle ;
15945: LD_ADDR_VAR 0 16
15949: PUSH
15950: CALL_OW 45
15954: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15955: LD_VAR 0 16
15959: PPUSH
15960: LD_VAR 0 1
15964: PPUSH
15965: LD_INT 0
15967: PPUSH
15968: CALL_OW 49
// if vehcontrol = 1 then
15972: LD_VAR 0 7
15976: PUSH
15977: LD_INT 1
15979: EQUAL
15980: IFFALSE 16037
// begin hc_gallery =  ;
15982: LD_ADDR_OWVAR 33
15986: PUSH
15987: LD_STRING 
15989: ST_TO_ADDR
// hc_name =  ;
15990: LD_ADDR_OWVAR 26
15994: PUSH
15995: LD_STRING 
15997: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15998: LD_INT 0
16000: PPUSH
16001: LD_INT 3
16003: PPUSH
16004: LD_VAR 0 4
16008: PPUSH
16009: CALL_OW 380
// un = CreateHuman ;
16013: LD_ADDR_VAR 0 15
16017: PUSH
16018: CALL_OW 44
16022: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16023: LD_VAR 0 15
16027: PPUSH
16028: LD_VAR 0 16
16032: PPUSH
16033: CALL_OW 52
// end ; i = i + 1 ;
16037: LD_ADDR_VAR 0 13
16041: PUSH
16042: LD_VAR 0 13
16046: PUSH
16047: LD_INT 1
16049: PLUS
16050: ST_TO_ADDR
// end ; until i = vehCount ;
16051: LD_VAR 0 13
16055: PUSH
16056: LD_VAR 0 3
16060: EQUAL
16061: IFFALSE 14713
// repeat wait ( 0 0$1 ) ;
16063: LD_INT 35
16065: PPUSH
16066: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) ;
16070: LD_ADDR_VAR 0 20
16074: PUSH
16075: LD_INT 22
16077: PUSH
16078: LD_VAR 0 2
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 21
16089: PUSH
16090: LD_INT 2
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: LD_INT 24
16099: PUSH
16100: LD_INT 250
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: LIST
16111: PPUSH
16112: CALL_OW 69
16116: ST_TO_ADDR
// if vehicleOK_list > 0 then
16117: LD_VAR 0 20
16121: PUSH
16122: LD_INT 0
16124: GREATER
16125: IFFALSE 16316
// begin for i in vehicleOK_list do
16127: LD_ADDR_VAR 0 13
16131: PUSH
16132: LD_VAR 0 20
16136: PUSH
16137: FOR_IN
16138: IFFALSE 16314
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16140: LD_ADDR_VAR 0 21
16144: PUSH
16145: LD_INT 22
16147: PUSH
16148: LD_VAR 0 11
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PPUSH
16157: CALL_OW 69
16161: PPUSH
16162: LD_VAR 0 13
16166: PPUSH
16167: CALL_OW 74
16171: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16172: LD_ADDR_VAR 0 22
16176: PUSH
16177: LD_INT 22
16179: PUSH
16180: LD_VAR 0 11
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 2
16191: PUSH
16192: LD_INT 59
16194: PUSH
16195: EMPTY
16196: LIST
16197: PUSH
16198: LD_INT 21
16200: PUSH
16201: LD_INT 1
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 21
16210: PUSH
16211: LD_INT 2
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: EMPTY
16229: LIST
16230: PPUSH
16231: CALL_OW 69
16235: PPUSH
16236: LD_VAR 0 13
16240: PPUSH
16241: CALL_OW 74
16245: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 6 < GetDistUnits ( i , target2 ) then
16246: LD_VAR 0 13
16250: PPUSH
16251: LD_VAR 0 21
16255: PPUSH
16256: CALL_OW 296
16260: PUSH
16261: LD_INT 6
16263: PLUS
16264: PUSH
16265: LD_VAR 0 13
16269: PPUSH
16270: LD_VAR 0 22
16274: PPUSH
16275: CALL_OW 296
16279: LESS
16280: IFFALSE 16298
// begin ComAttackUnit ( i , target1 ) ;
16282: LD_VAR 0 13
16286: PPUSH
16287: LD_VAR 0 21
16291: PPUSH
16292: CALL_OW 115
// end else
16296: GO 16312
// begin ComAttackUnit ( i , target2 ) ;
16298: LD_VAR 0 13
16302: PPUSH
16303: LD_VAR 0 22
16307: PPUSH
16308: CALL_OW 115
// end ; end ;
16312: GO 16137
16314: POP
16315: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 ;
16316: LD_INT 22
16318: PUSH
16319: LD_VAR 0 2
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: LD_INT 21
16330: PUSH
16331: LD_INT 2
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: LD_INT 24
16340: PUSH
16341: LD_INT 250
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: LIST
16352: PPUSH
16353: CALL_OW 69
16357: PUSH
16358: LD_INT 0
16360: EQUAL
16361: IFFALSE 16063
// end ;
16363: LD_VAR 0 12
16367: RET
// export function SikorskyHealUnits ( side , healArea , targetSide ) ; var i , j , damageUnit_list , soldiersOK_list , medicCount , target1 , target2 ; begin
16368: LD_INT 0
16370: PPUSH
16371: PPUSH
16372: PPUSH
16373: PPUSH
16374: PPUSH
16375: PPUSH
16376: PPUSH
16377: PPUSH
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16378: LD_ADDR_VAR 0 7
16382: PUSH
16383: LD_INT 22
16385: PUSH
16386: LD_VAR 0 1
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 1
16397: PUSH
16398: LD_INT 3
16400: PUSH
16401: LD_INT 24
16403: PUSH
16404: LD_INT 550
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 24
16417: PUSH
16418: LD_INT 250
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: LIST
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PPUSH
16434: CALL_OW 69
16438: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16439: LD_ADDR_VAR 0 8
16443: PUSH
16444: LD_INT 22
16446: PUSH
16447: LD_VAR 0 1
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 2
16458: PUSH
16459: LD_INT 25
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 25
16471: PUSH
16472: LD_INT 5
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 25
16481: PUSH
16482: LD_INT 8
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 25
16491: PUSH
16492: LD_INT 9
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 24
16508: PUSH
16509: LD_INT 1000
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: LIST
16520: PPUSH
16521: CALL_OW 69
16525: ST_TO_ADDR
// medicCount = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16526: LD_ADDR_VAR 0 9
16530: PUSH
16531: LD_INT 22
16533: PUSH
16534: LD_VAR 0 1
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 25
16545: PUSH
16546: LD_INT 4
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PPUSH
16557: CALL_OW 69
16561: ST_TO_ADDR
// if medicCount > 0 then
16562: LD_VAR 0 9
16566: PUSH
16567: LD_INT 0
16569: GREATER
16570: IFFALSE 16644
// begin if damageUnit_list > 0 then
16572: LD_VAR 0 7
16576: PUSH
16577: LD_INT 0
16579: GREATER
16580: IFFALSE 16644
// begin for i in damageUnit_list do
16582: LD_ADDR_VAR 0 5
16586: PUSH
16587: LD_VAR 0 7
16591: PUSH
16592: FOR_IN
16593: IFFALSE 16642
// begin ComMoveToArea ( i , healArea ) ;
16595: LD_VAR 0 5
16599: PPUSH
16600: LD_VAR 0 2
16604: PPUSH
16605: CALL_OW 113
// for j in medicCount do
16609: LD_ADDR_VAR 0 6
16613: PUSH
16614: LD_VAR 0 9
16618: PUSH
16619: FOR_IN
16620: IFFALSE 16638
// AddComHeal ( j , i ) ;
16622: LD_VAR 0 6
16626: PPUSH
16627: LD_VAR 0 5
16631: PPUSH
16632: CALL_OW 188
16636: GO 16619
16638: POP
16639: POP
// end ;
16640: GO 16592
16642: POP
16643: POP
// end ; end ; if soldiersOK_list > 0 then
16644: LD_VAR 0 8
16648: PUSH
16649: LD_INT 0
16651: GREATER
16652: IFFALSE 16843
// begin for i in soldiersOK_list do
16654: LD_ADDR_VAR 0 5
16658: PUSH
16659: LD_VAR 0 8
16663: PUSH
16664: FOR_IN
16665: IFFALSE 16841
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16667: LD_ADDR_VAR 0 10
16671: PUSH
16672: LD_INT 22
16674: PUSH
16675: LD_VAR 0 3
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PPUSH
16684: CALL_OW 69
16688: PPUSH
16689: LD_VAR 0 5
16693: PPUSH
16694: CALL_OW 74
16698: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16699: LD_ADDR_VAR 0 11
16703: PUSH
16704: LD_INT 22
16706: PUSH
16707: LD_VAR 0 3
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 2
16718: PUSH
16719: LD_INT 59
16721: PUSH
16722: EMPTY
16723: LIST
16724: PUSH
16725: LD_INT 21
16727: PUSH
16728: LD_INT 1
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 21
16737: PUSH
16738: LD_INT 2
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: EMPTY
16756: LIST
16757: PPUSH
16758: CALL_OW 69
16762: PPUSH
16763: LD_VAR 0 5
16767: PPUSH
16768: CALL_OW 74
16772: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16773: LD_VAR 0 5
16777: PPUSH
16778: LD_VAR 0 10
16782: PPUSH
16783: CALL_OW 296
16787: PUSH
16788: LD_INT 8
16790: PLUS
16791: PUSH
16792: LD_VAR 0 5
16796: PPUSH
16797: LD_VAR 0 11
16801: PPUSH
16802: CALL_OW 296
16806: LESS
16807: IFFALSE 16825
// begin ComAttackUnit ( i , target1 ) ;
16809: LD_VAR 0 5
16813: PPUSH
16814: LD_VAR 0 10
16818: PPUSH
16819: CALL_OW 115
// end else
16823: GO 16839
// begin ComAttackUnit ( i , target2 ) ;
16825: LD_VAR 0 5
16829: PPUSH
16830: LD_VAR 0 11
16834: PPUSH
16835: CALL_OW 115
// end ; end ;
16839: GO 16664
16841: POP
16842: POP
// end ; end ;
16843: LD_VAR 0 4
16847: RET
// export function MCB_Extension ( x , y , d ) ; var list ; begin
16848: LD_INT 0
16850: PPUSH
16851: PPUSH
// list := [ ] ;
16852: LD_ADDR_VAR 0 5
16856: PUSH
16857: EMPTY
16858: ST_TO_ADDR
// case d of 0 :
16859: LD_VAR 0 3
16863: PUSH
16864: LD_INT 0
16866: DOUBLE
16867: EQUAL
16868: IFTRUE 16872
16870: GO 17005
16872: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
16873: LD_ADDR_VAR 0 5
16877: PUSH
16878: LD_VAR 0 1
16882: PUSH
16883: LD_INT 4
16885: MINUS
16886: PUSH
16887: LD_VAR 0 2
16891: PUSH
16892: LD_INT 4
16894: MINUS
16895: PUSH
16896: LD_INT 2
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: PUSH
16904: LD_VAR 0 1
16908: PUSH
16909: LD_INT 3
16911: MINUS
16912: PUSH
16913: LD_VAR 0 2
16917: PUSH
16918: LD_INT 1
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: LIST
16925: PUSH
16926: LD_VAR 0 1
16930: PUSH
16931: LD_INT 4
16933: PLUS
16934: PUSH
16935: LD_VAR 0 2
16939: PUSH
16940: LD_INT 4
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: LIST
16947: PUSH
16948: LD_VAR 0 1
16952: PUSH
16953: LD_INT 3
16955: PLUS
16956: PUSH
16957: LD_VAR 0 2
16961: PUSH
16962: LD_INT 3
16964: PLUS
16965: PUSH
16966: LD_INT 5
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: LIST
16973: PUSH
16974: LD_VAR 0 1
16978: PUSH
16979: LD_VAR 0 2
16983: PUSH
16984: LD_INT 4
16986: PLUS
16987: PUSH
16988: LD_INT 0
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: LIST
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: ST_TO_ADDR
// end ; 1 :
17003: GO 17703
17005: LD_INT 1
17007: DOUBLE
17008: EQUAL
17009: IFTRUE 17013
17011: GO 17146
17013: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
17014: LD_ADDR_VAR 0 5
17018: PUSH
17019: LD_VAR 0 1
17023: PUSH
17024: LD_VAR 0 2
17028: PUSH
17029: LD_INT 4
17031: MINUS
17032: PUSH
17033: LD_INT 3
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: PUSH
17041: LD_VAR 0 1
17045: PUSH
17046: LD_INT 3
17048: MINUS
17049: PUSH
17050: LD_VAR 0 2
17054: PUSH
17055: LD_INT 3
17057: MINUS
17058: PUSH
17059: LD_INT 2
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: LIST
17066: PUSH
17067: LD_VAR 0 1
17071: PUSH
17072: LD_INT 4
17074: MINUS
17075: PUSH
17076: LD_VAR 0 2
17080: PUSH
17081: LD_INT 1
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: PUSH
17089: LD_VAR 0 1
17093: PUSH
17094: LD_VAR 0 2
17098: PUSH
17099: LD_INT 3
17101: PLUS
17102: PUSH
17103: LD_INT 0
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: LIST
17110: PUSH
17111: LD_VAR 0 1
17115: PUSH
17116: LD_INT 4
17118: PLUS
17119: PUSH
17120: LD_VAR 0 2
17124: PUSH
17125: LD_INT 4
17127: PLUS
17128: PUSH
17129: LD_INT 5
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: ST_TO_ADDR
// end ; 2 :
17144: GO 17703
17146: LD_INT 2
17148: DOUBLE
17149: EQUAL
17150: IFTRUE 17154
17152: GO 17283
17154: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
17155: LD_ADDR_VAR 0 5
17159: PUSH
17160: LD_VAR 0 1
17164: PUSH
17165: LD_VAR 0 2
17169: PUSH
17170: LD_INT 3
17172: MINUS
17173: PUSH
17174: LD_INT 3
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: LIST
17181: PUSH
17182: LD_VAR 0 1
17186: PUSH
17187: LD_INT 4
17189: PLUS
17190: PUSH
17191: LD_VAR 0 2
17195: PUSH
17196: LD_INT 4
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: LIST
17203: PUSH
17204: LD_VAR 0 1
17208: PUSH
17209: LD_VAR 0 2
17213: PUSH
17214: LD_INT 4
17216: PLUS
17217: PUSH
17218: LD_INT 0
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: LIST
17225: PUSH
17226: LD_VAR 0 1
17230: PUSH
17231: LD_INT 3
17233: MINUS
17234: PUSH
17235: LD_VAR 0 2
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: LIST
17247: PUSH
17248: LD_VAR 0 1
17252: PUSH
17253: LD_INT 4
17255: MINUS
17256: PUSH
17257: LD_VAR 0 2
17261: PUSH
17262: LD_INT 4
17264: MINUS
17265: PUSH
17266: LD_INT 2
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: LIST
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: ST_TO_ADDR
// end ; 3 :
17281: GO 17703
17283: LD_INT 3
17285: DOUBLE
17286: EQUAL
17287: IFTRUE 17291
17289: GO 17424
17291: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
17292: LD_ADDR_VAR 0 5
17296: PUSH
17297: LD_VAR 0 1
17301: PUSH
17302: LD_INT 3
17304: PLUS
17305: PUSH
17306: LD_VAR 0 2
17310: PUSH
17311: LD_INT 4
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: PUSH
17319: LD_VAR 0 1
17323: PUSH
17324: LD_INT 4
17326: PLUS
17327: PUSH
17328: LD_VAR 0 2
17332: PUSH
17333: LD_INT 4
17335: PLUS
17336: PUSH
17337: LD_INT 5
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: LIST
17344: PUSH
17345: LD_VAR 0 1
17349: PUSH
17350: LD_INT 4
17352: MINUS
17353: PUSH
17354: LD_VAR 0 2
17358: PUSH
17359: LD_INT 1
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: LIST
17366: PUSH
17367: LD_VAR 0 1
17371: PUSH
17372: LD_VAR 0 2
17376: PUSH
17377: LD_INT 4
17379: MINUS
17380: PUSH
17381: LD_INT 3
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: LIST
17388: PUSH
17389: LD_VAR 0 1
17393: PUSH
17394: LD_INT 3
17396: MINUS
17397: PUSH
17398: LD_VAR 0 2
17402: PUSH
17403: LD_INT 3
17405: MINUS
17406: PUSH
17407: LD_INT 2
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: ST_TO_ADDR
// end ; 4 :
17422: GO 17703
17424: LD_INT 4
17426: DOUBLE
17427: EQUAL
17428: IFTRUE 17432
17430: GO 17565
17432: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 3 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
17433: LD_ADDR_VAR 0 5
17437: PUSH
17438: LD_VAR 0 1
17442: PUSH
17443: LD_VAR 0 2
17447: PUSH
17448: LD_INT 4
17450: PLUS
17451: PUSH
17452: LD_INT 0
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: LIST
17459: PUSH
17460: LD_VAR 0 1
17464: PUSH
17465: LD_INT 3
17467: PLUS
17468: PUSH
17469: LD_VAR 0 2
17473: PUSH
17474: LD_INT 3
17476: PLUS
17477: PUSH
17478: LD_INT 5
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: PUSH
17486: LD_VAR 0 1
17490: PUSH
17491: LD_INT 3
17493: PLUS
17494: PUSH
17495: LD_VAR 0 2
17499: PUSH
17500: LD_INT 4
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: LIST
17507: PUSH
17508: LD_VAR 0 1
17512: PUSH
17513: LD_VAR 0 2
17517: PUSH
17518: LD_INT 3
17520: MINUS
17521: PUSH
17522: LD_INT 3
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: PUSH
17530: LD_VAR 0 1
17534: PUSH
17535: LD_INT 4
17537: MINUS
17538: PUSH
17539: LD_VAR 0 2
17543: PUSH
17544: LD_INT 4
17546: MINUS
17547: PUSH
17548: LD_INT 2
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: LIST
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: ST_TO_ADDR
// end ; 5 :
17563: GO 17703
17565: LD_INT 5
17567: DOUBLE
17568: EQUAL
17569: IFTRUE 17573
17571: GO 17702
17573: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
17574: LD_ADDR_VAR 0 5
17578: PUSH
17579: LD_VAR 0 1
17583: PUSH
17584: LD_INT 4
17586: MINUS
17587: PUSH
17588: LD_VAR 0 2
17592: PUSH
17593: LD_INT 1
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: LIST
17600: PUSH
17601: LD_VAR 0 1
17605: PUSH
17606: LD_VAR 0 2
17610: PUSH
17611: LD_INT 4
17613: MINUS
17614: PUSH
17615: LD_INT 3
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: LIST
17622: PUSH
17623: LD_VAR 0 1
17627: PUSH
17628: LD_INT 4
17630: PLUS
17631: PUSH
17632: LD_VAR 0 2
17636: PUSH
17637: LD_INT 4
17639: PLUS
17640: PUSH
17641: LD_INT 5
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: PUSH
17649: LD_VAR 0 1
17653: PUSH
17654: LD_INT 3
17656: PLUS
17657: PUSH
17658: LD_VAR 0 2
17662: PUSH
17663: LD_INT 4
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: LIST
17670: PUSH
17671: LD_VAR 0 1
17675: PUSH
17676: LD_VAR 0 2
17680: PUSH
17681: LD_INT 3
17683: PLUS
17684: PUSH
17685: LD_INT 0
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: LIST
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: ST_TO_ADDR
// end ; end ;
17700: GO 17703
17702: POP
// result := list ;
17703: LD_ADDR_VAR 0 4
17707: PUSH
17708: LD_VAR 0 5
17712: ST_TO_ADDR
// end ;
17713: LD_VAR 0 4
17717: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d , check_cost ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
17718: LD_INT 0
17720: PPUSH
17721: PPUSH
17722: PPUSH
17723: PPUSH
17724: PPUSH
17725: PPUSH
17726: PPUSH
17727: PPUSH
17728: PPUSH
// result := false ;
17729: LD_ADDR_VAR 0 7
17733: PUSH
17734: LD_INT 0
17736: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17737: LD_VAR 0 1
17741: NOT
17742: PUSH
17743: LD_VAR 0 1
17747: PPUSH
17748: CALL_OW 266
17752: PUSH
17753: LD_INT 0
17755: PUSH
17756: LD_INT 1
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: IN
17763: NOT
17764: OR
17765: PUSH
17766: LD_VAR 0 2
17770: NOT
17771: OR
17772: PUSH
17773: LD_VAR 0 5
17777: PUSH
17778: LD_INT 0
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: LD_INT 2
17786: PUSH
17787: LD_INT 3
17789: PUSH
17790: LD_INT 4
17792: PUSH
17793: LD_INT 5
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: IN
17804: NOT
17805: OR
17806: PUSH
17807: LD_VAR 0 3
17811: PPUSH
17812: LD_VAR 0 4
17816: PPUSH
17817: CALL_OW 488
17821: NOT
17822: OR
17823: IFFALSE 17827
// exit ;
17825: GO 18508
// pom := GetBase ( bdepot ) ;
17827: LD_ADDR_VAR 0 10
17831: PUSH
17832: LD_VAR 0 1
17836: PPUSH
17837: CALL_OW 274
17841: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
17842: LD_ADDR_VAR 0 11
17846: PUSH
17847: LD_VAR 0 2
17851: PPUSH
17852: LD_VAR 0 1
17856: PPUSH
17857: CALL_OW 248
17861: PPUSH
17862: CALL_OW 450
17866: ST_TO_ADDR
// if check_cost then
17867: LD_VAR 0 6
17871: IFFALSE 17948
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17873: LD_VAR 0 10
17877: PPUSH
17878: LD_INT 1
17880: PPUSH
17881: CALL_OW 275
17885: PUSH
17886: LD_VAR 0 11
17890: PUSH
17891: LD_INT 1
17893: ARRAY
17894: GREATEREQUAL
17895: PUSH
17896: LD_VAR 0 10
17900: PPUSH
17901: LD_INT 2
17903: PPUSH
17904: CALL_OW 275
17908: PUSH
17909: LD_VAR 0 11
17913: PUSH
17914: LD_INT 2
17916: ARRAY
17917: GREATEREQUAL
17918: AND
17919: PUSH
17920: LD_VAR 0 10
17924: PPUSH
17925: LD_INT 3
17927: PPUSH
17928: CALL_OW 275
17932: PUSH
17933: LD_VAR 0 11
17937: PUSH
17938: LD_INT 3
17940: ARRAY
17941: GREATEREQUAL
17942: AND
17943: NOT
17944: IFFALSE 17948
// exit ;
17946: GO 18508
// if GetBType ( bdepot ) = b_depot then
17948: LD_VAR 0 1
17952: PPUSH
17953: CALL_OW 266
17957: PUSH
17958: LD_INT 0
17960: EQUAL
17961: IFFALSE 17973
// dist := 28 else
17963: LD_ADDR_VAR 0 14
17967: PUSH
17968: LD_INT 28
17970: ST_TO_ADDR
17971: GO 17981
// dist := 36 ;
17973: LD_ADDR_VAR 0 14
17977: PUSH
17978: LD_INT 36
17980: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
17981: LD_VAR 0 1
17985: PPUSH
17986: LD_VAR 0 3
17990: PPUSH
17991: LD_VAR 0 4
17995: PPUSH
17996: CALL_OW 297
18000: PUSH
18001: LD_VAR 0 14
18005: GREATER
18006: IFFALSE 18010
// exit ;
18008: GO 18508
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
18010: LD_ADDR_VAR 0 12
18014: PUSH
18015: LD_VAR 0 2
18019: PPUSH
18020: LD_VAR 0 3
18024: PPUSH
18025: LD_VAR 0 4
18029: PPUSH
18030: LD_VAR 0 5
18034: PPUSH
18035: LD_VAR 0 1
18039: PPUSH
18040: CALL_OW 248
18044: PPUSH
18045: LD_INT 0
18047: PPUSH
18048: CALL 18513 0 6
18052: ST_TO_ADDR
// if not hexes then
18053: LD_VAR 0 12
18057: NOT
18058: IFFALSE 18062
// exit ;
18060: GO 18508
// hex := GetHexInfo ( x , y ) ;
18062: LD_ADDR_VAR 0 15
18066: PUSH
18067: LD_VAR 0 3
18071: PPUSH
18072: LD_VAR 0 4
18076: PPUSH
18077: CALL_OW 546
18081: ST_TO_ADDR
// if hex [ 1 ] then
18082: LD_VAR 0 15
18086: PUSH
18087: LD_INT 1
18089: ARRAY
18090: IFFALSE 18094
// exit ;
18092: GO 18508
// height := hex [ 2 ] ;
18094: LD_ADDR_VAR 0 13
18098: PUSH
18099: LD_VAR 0 15
18103: PUSH
18104: LD_INT 2
18106: ARRAY
18107: ST_TO_ADDR
// for i = 1 to hexes do
18108: LD_ADDR_VAR 0 8
18112: PUSH
18113: DOUBLE
18114: LD_INT 1
18116: DEC
18117: ST_TO_ADDR
18118: LD_VAR 0 12
18122: PUSH
18123: FOR_TO
18124: IFFALSE 18452
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18126: LD_VAR 0 12
18130: PUSH
18131: LD_VAR 0 8
18135: ARRAY
18136: PUSH
18137: LD_INT 1
18139: ARRAY
18140: PPUSH
18141: LD_VAR 0 12
18145: PUSH
18146: LD_VAR 0 8
18150: ARRAY
18151: PUSH
18152: LD_INT 2
18154: ARRAY
18155: PPUSH
18156: CALL_OW 488
18160: NOT
18161: IFFALSE 18165
// continue ;
18163: GO 18123
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18165: LD_ADDR_VAR 0 9
18169: PUSH
18170: LD_VAR 0 12
18174: PUSH
18175: LD_VAR 0 8
18179: ARRAY
18180: PUSH
18181: LD_INT 1
18183: ARRAY
18184: PPUSH
18185: LD_VAR 0 12
18189: PUSH
18190: LD_VAR 0 8
18194: ARRAY
18195: PUSH
18196: LD_INT 2
18198: ARRAY
18199: PPUSH
18200: CALL_OW 546
18204: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
18205: LD_VAR 0 9
18209: PUSH
18210: LD_INT 1
18212: ARRAY
18213: PUSH
18214: LD_VAR 0 9
18218: PUSH
18219: LD_INT 2
18221: ARRAY
18222: PUSH
18223: LD_VAR 0 13
18227: PUSH
18228: LD_INT 2
18230: PLUS
18231: GREATER
18232: OR
18233: PUSH
18234: LD_VAR 0 9
18238: PUSH
18239: LD_INT 2
18241: ARRAY
18242: PUSH
18243: LD_VAR 0 13
18247: PUSH
18248: LD_INT 2
18250: MINUS
18251: LESS
18252: OR
18253: PUSH
18254: LD_VAR 0 9
18258: PUSH
18259: LD_INT 3
18261: ARRAY
18262: PUSH
18263: LD_INT 0
18265: PUSH
18266: LD_INT 8
18268: PUSH
18269: LD_INT 9
18271: PUSH
18272: LD_INT 10
18274: PUSH
18275: LD_INT 11
18277: PUSH
18278: LD_INT 12
18280: PUSH
18281: LD_INT 13
18283: PUSH
18284: LD_INT 16
18286: PUSH
18287: LD_INT 17
18289: PUSH
18290: LD_INT 18
18292: PUSH
18293: LD_INT 19
18295: PUSH
18296: LD_INT 20
18298: PUSH
18299: LD_INT 21
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: IN
18317: NOT
18318: OR
18319: PUSH
18320: LD_VAR 0 9
18324: PUSH
18325: LD_INT 5
18327: ARRAY
18328: NOT
18329: OR
18330: PUSH
18331: LD_VAR 0 9
18335: PUSH
18336: LD_INT 6
18338: ARRAY
18339: PUSH
18340: LD_INT 1
18342: PUSH
18343: LD_INT 2
18345: PUSH
18346: LD_INT 7
18348: PUSH
18349: LD_INT 9
18351: PUSH
18352: LD_INT 10
18354: PUSH
18355: LD_INT 11
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: IN
18366: NOT
18367: OR
18368: PUSH
18369: LD_VAR 0 12
18373: PUSH
18374: LD_VAR 0 8
18378: ARRAY
18379: PUSH
18380: LD_INT 1
18382: ARRAY
18383: PPUSH
18384: LD_VAR 0 12
18388: PUSH
18389: LD_VAR 0 8
18393: ARRAY
18394: PUSH
18395: LD_INT 2
18397: ARRAY
18398: PPUSH
18399: CALL_OW 428
18403: PUSH
18404: LD_INT 0
18406: GREATER
18407: OR
18408: PUSH
18409: LD_VAR 0 12
18413: PUSH
18414: LD_VAR 0 8
18418: ARRAY
18419: PUSH
18420: LD_INT 1
18422: ARRAY
18423: PPUSH
18424: LD_VAR 0 12
18428: PUSH
18429: LD_VAR 0 8
18433: ARRAY
18434: PUSH
18435: LD_INT 2
18437: ARRAY
18438: PPUSH
18439: CALL_OW 351
18443: OR
18444: IFFALSE 18450
// exit ;
18446: POP
18447: POP
18448: GO 18508
// end ;
18450: GO 18123
18452: POP
18453: POP
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
18454: LD_VAR 0 2
18458: PUSH
18459: LD_INT 29
18461: PUSH
18462: LD_INT 30
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: IN
18469: PUSH
18470: LD_VAR 0 3
18474: PPUSH
18475: LD_VAR 0 4
18479: PPUSH
18480: LD_VAR 0 1
18484: PPUSH
18485: CALL_OW 255
18489: PPUSH
18490: CALL_OW 440
18494: NOT
18495: AND
18496: IFFALSE 18500
// exit ;
18498: GO 18508
// result := true ;
18500: LD_ADDR_VAR 0 7
18504: PUSH
18505: LD_INT 1
18507: ST_TO_ADDR
// end ;
18508: LD_VAR 0 7
18512: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
18513: LD_INT 0
18515: PPUSH
18516: PPUSH
18517: PPUSH
18518: PPUSH
18519: PPUSH
18520: PPUSH
18521: PPUSH
18522: PPUSH
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
18527: PPUSH
18528: PPUSH
18529: PPUSH
18530: PPUSH
18531: PPUSH
18532: PPUSH
18533: PPUSH
18534: PPUSH
18535: PPUSH
18536: PPUSH
18537: PPUSH
18538: PPUSH
18539: PPUSH
18540: PPUSH
18541: PPUSH
18542: PPUSH
18543: PPUSH
18544: PPUSH
18545: PPUSH
18546: PPUSH
18547: PPUSH
18548: PPUSH
18549: PPUSH
18550: PPUSH
18551: PPUSH
18552: PPUSH
18553: PPUSH
18554: PPUSH
18555: PPUSH
18556: PPUSH
18557: PPUSH
18558: PPUSH
18559: PPUSH
18560: PPUSH
18561: PPUSH
18562: PPUSH
18563: PPUSH
18564: PPUSH
18565: PPUSH
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
18570: PPUSH
18571: PPUSH
18572: PPUSH
// result = [ ] ;
18573: LD_ADDR_VAR 0 7
18577: PUSH
18578: EMPTY
18579: ST_TO_ADDR
// temp_list = [ ] ;
18580: LD_ADDR_VAR 0 9
18584: PUSH
18585: EMPTY
18586: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18587: LD_VAR 0 4
18591: PUSH
18592: LD_INT 0
18594: PUSH
18595: LD_INT 1
18597: PUSH
18598: LD_INT 2
18600: PUSH
18601: LD_INT 3
18603: PUSH
18604: LD_INT 4
18606: PUSH
18607: LD_INT 5
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: IN
18618: NOT
18619: PUSH
18620: LD_VAR 0 1
18624: PUSH
18625: LD_INT 0
18627: PUSH
18628: LD_INT 1
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: IN
18635: PUSH
18636: LD_VAR 0 5
18640: PUSH
18641: LD_INT 1
18643: PUSH
18644: LD_INT 2
18646: PUSH
18647: LD_INT 3
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: LIST
18654: IN
18655: NOT
18656: AND
18657: OR
18658: IFFALSE 18662
// exit ;
18660: GO 37047
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18662: LD_VAR 0 1
18666: PUSH
18667: LD_INT 6
18669: PUSH
18670: LD_INT 7
18672: PUSH
18673: LD_INT 8
18675: PUSH
18676: LD_INT 13
18678: PUSH
18679: LD_INT 12
18681: PUSH
18682: LD_INT 15
18684: PUSH
18685: LD_INT 11
18687: PUSH
18688: LD_INT 14
18690: PUSH
18691: LD_INT 10
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: IN
18705: IFFALSE 18715
// btype = b_lab ;
18707: LD_ADDR_VAR 0 1
18711: PUSH
18712: LD_INT 6
18714: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18715: LD_VAR 0 6
18719: PUSH
18720: LD_INT 0
18722: PUSH
18723: LD_INT 1
18725: PUSH
18726: LD_INT 2
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: LIST
18733: IN
18734: NOT
18735: PUSH
18736: LD_VAR 0 1
18740: PUSH
18741: LD_INT 0
18743: PUSH
18744: LD_INT 1
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: LD_INT 3
18752: PUSH
18753: LD_INT 6
18755: PUSH
18756: LD_INT 36
18758: PUSH
18759: LD_INT 4
18761: PUSH
18762: LD_INT 5
18764: PUSH
18765: LD_INT 31
18767: PUSH
18768: LD_INT 32
18770: PUSH
18771: LD_INT 33
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: IN
18787: NOT
18788: PUSH
18789: LD_VAR 0 6
18793: PUSH
18794: LD_INT 1
18796: EQUAL
18797: AND
18798: OR
18799: PUSH
18800: LD_VAR 0 1
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: LD_INT 3
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: IN
18815: NOT
18816: PUSH
18817: LD_VAR 0 6
18821: PUSH
18822: LD_INT 2
18824: EQUAL
18825: AND
18826: OR
18827: IFFALSE 18837
// mode = 0 ;
18829: LD_ADDR_VAR 0 6
18833: PUSH
18834: LD_INT 0
18836: ST_TO_ADDR
// case mode of 0 :
18837: LD_VAR 0 6
18841: PUSH
18842: LD_INT 0
18844: DOUBLE
18845: EQUAL
18846: IFTRUE 18850
18848: GO 30303
18850: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18851: LD_ADDR_VAR 0 11
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 0
18868: PUSH
18869: LD_INT 1
18871: NEG
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 0
18899: PUSH
18900: LD_INT 1
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 1
18909: NEG
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 1
18920: NEG
18921: PUSH
18922: LD_INT 1
18924: NEG
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 1
18932: NEG
18933: PUSH
18934: LD_INT 2
18936: NEG
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 0
18944: PUSH
18945: LD_INT 2
18947: NEG
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: LD_INT 1
18958: NEG
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 1
18966: PUSH
18967: LD_INT 2
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 0
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 1
18986: NEG
18987: PUSH
18988: LD_INT 1
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 1
18997: PUSH
18998: LD_INT 3
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 0
19007: PUSH
19008: LD_INT 3
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 1
19017: NEG
19018: PUSH
19019: LD_INT 2
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19044: LD_ADDR_VAR 0 12
19048: PUSH
19049: LD_INT 0
19051: PUSH
19052: LD_INT 0
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 0
19061: PUSH
19062: LD_INT 1
19064: NEG
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: LD_INT 0
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 0
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 1
19102: NEG
19103: PUSH
19104: LD_INT 0
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 1
19113: NEG
19114: PUSH
19115: LD_INT 1
19117: NEG
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: LD_INT 1
19128: NEG
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 2
19136: PUSH
19137: LD_INT 0
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 2
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 1
19156: NEG
19157: PUSH
19158: LD_INT 1
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 2
19167: NEG
19168: PUSH
19169: LD_INT 0
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 2
19178: NEG
19179: PUSH
19180: LD_INT 1
19182: NEG
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 2
19190: NEG
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 3
19201: NEG
19202: PUSH
19203: LD_INT 0
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 3
19212: NEG
19213: PUSH
19214: LD_INT 1
19216: NEG
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19240: LD_ADDR_VAR 0 13
19244: PUSH
19245: LD_INT 0
19247: PUSH
19248: LD_INT 0
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 0
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: LD_INT 0
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: LD_INT 1
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: LD_INT 0
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 1
19309: NEG
19310: PUSH
19311: LD_INT 1
19313: NEG
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 1
19321: NEG
19322: PUSH
19323: LD_INT 2
19325: NEG
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 2
19333: PUSH
19334: LD_INT 1
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: LD_INT 2
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: LD_INT 2
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 2
19363: NEG
19364: PUSH
19365: LD_INT 1
19367: NEG
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 2
19375: NEG
19376: PUSH
19377: LD_INT 2
19379: NEG
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 2
19387: NEG
19388: PUSH
19389: LD_INT 3
19391: NEG
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 3
19399: NEG
19400: PUSH
19401: LD_INT 2
19403: NEG
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 3
19411: NEG
19412: PUSH
19413: LD_INT 3
19415: NEG
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19439: LD_ADDR_VAR 0 14
19443: PUSH
19444: LD_INT 0
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: LD_INT 1
19459: NEG
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 1
19467: PUSH
19468: LD_INT 0
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 1
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 0
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 1
19497: NEG
19498: PUSH
19499: LD_INT 0
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 1
19508: NEG
19509: PUSH
19510: LD_INT 1
19512: NEG
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 1
19520: NEG
19521: PUSH
19522: LD_INT 2
19524: NEG
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 0
19532: PUSH
19533: LD_INT 2
19535: NEG
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 1
19543: PUSH
19544: LD_INT 1
19546: NEG
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 1
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 1
19574: NEG
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 1
19585: NEG
19586: PUSH
19587: LD_INT 3
19589: NEG
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 0
19597: PUSH
19598: LD_INT 3
19600: NEG
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 1
19608: PUSH
19609: LD_INT 2
19611: NEG
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19635: LD_ADDR_VAR 0 15
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: LD_INT 0
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: LD_INT 1
19655: NEG
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 1
19663: PUSH
19664: LD_INT 0
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 1
19673: PUSH
19674: LD_INT 1
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 0
19683: PUSH
19684: LD_INT 1
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 1
19693: NEG
19694: PUSH
19695: LD_INT 0
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 1
19704: NEG
19705: PUSH
19706: LD_INT 1
19708: NEG
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: LD_INT 1
19719: NEG
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 2
19727: PUSH
19728: LD_INT 0
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 2
19737: PUSH
19738: LD_INT 1
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 1
19747: NEG
19748: PUSH
19749: LD_INT 1
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 2
19758: NEG
19759: PUSH
19760: LD_INT 0
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 2
19769: NEG
19770: PUSH
19771: LD_INT 1
19773: NEG
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 2
19781: PUSH
19782: LD_INT 1
19784: NEG
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 3
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 3
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19828: LD_ADDR_VAR 0 16
19832: PUSH
19833: LD_INT 0
19835: PUSH
19836: LD_INT 0
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 0
19845: PUSH
19846: LD_INT 1
19848: NEG
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 1
19856: PUSH
19857: LD_INT 0
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 1
19866: PUSH
19867: LD_INT 1
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 0
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: NEG
19887: PUSH
19888: LD_INT 0
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 1
19897: NEG
19898: PUSH
19899: LD_INT 1
19901: NEG
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: LD_INT 2
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 2
19921: PUSH
19922: LD_INT 1
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 2
19931: PUSH
19932: LD_INT 2
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 1
19941: PUSH
19942: LD_INT 2
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 2
19951: NEG
19952: PUSH
19953: LD_INT 1
19955: NEG
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 2
19963: NEG
19964: PUSH
19965: LD_INT 2
19967: NEG
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 3
19975: PUSH
19976: LD_INT 2
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 3
19985: PUSH
19986: LD_INT 3
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: LD_INT 3
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20021: LD_ADDR_VAR 0 17
20025: PUSH
20026: LD_INT 0
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: LD_INT 1
20041: NEG
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 1
20049: PUSH
20050: LD_INT 0
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 1
20059: PUSH
20060: LD_INT 1
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 0
20069: PUSH
20070: LD_INT 1
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 1
20079: NEG
20080: PUSH
20081: LD_INT 0
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 1
20090: NEG
20091: PUSH
20092: LD_INT 1
20094: NEG
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 1
20102: NEG
20103: PUSH
20104: LD_INT 2
20106: NEG
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 0
20114: PUSH
20115: LD_INT 2
20117: NEG
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 1
20125: PUSH
20126: LD_INT 1
20128: NEG
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 2
20136: PUSH
20137: LD_INT 0
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 2
20146: PUSH
20147: LD_INT 1
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 2
20156: PUSH
20157: LD_INT 2
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: LD_INT 2
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: LD_INT 2
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 1
20186: NEG
20187: PUSH
20188: LD_INT 1
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 2
20197: NEG
20198: PUSH
20199: LD_INT 0
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 2
20208: NEG
20209: PUSH
20210: LD_INT 1
20212: NEG
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 2
20220: NEG
20221: PUSH
20222: LD_INT 2
20224: NEG
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20251: LD_ADDR_VAR 0 18
20255: PUSH
20256: LD_INT 0
20258: PUSH
20259: LD_INT 0
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 0
20268: PUSH
20269: LD_INT 1
20271: NEG
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PUSH
20277: LD_INT 1
20279: PUSH
20280: LD_INT 0
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 1
20289: PUSH
20290: LD_INT 1
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 0
20299: PUSH
20300: LD_INT 1
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 1
20309: NEG
20310: PUSH
20311: LD_INT 0
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 1
20320: NEG
20321: PUSH
20322: LD_INT 1
20324: NEG
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 1
20332: NEG
20333: PUSH
20334: LD_INT 2
20336: NEG
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: LD_INT 2
20347: NEG
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 1
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 2
20366: PUSH
20367: LD_INT 0
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: LD_INT 1
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 2
20386: PUSH
20387: LD_INT 2
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 1
20396: PUSH
20397: LD_INT 2
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 0
20406: PUSH
20407: LD_INT 2
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 1
20416: NEG
20417: PUSH
20418: LD_INT 1
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 2
20427: NEG
20428: PUSH
20429: LD_INT 0
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 2
20438: NEG
20439: PUSH
20440: LD_INT 1
20442: NEG
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 2
20450: NEG
20451: PUSH
20452: LD_INT 2
20454: NEG
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20481: LD_ADDR_VAR 0 19
20485: PUSH
20486: LD_INT 0
20488: PUSH
20489: LD_INT 0
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: LD_INT 1
20501: NEG
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 1
20509: PUSH
20510: LD_INT 0
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 1
20519: PUSH
20520: LD_INT 1
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 0
20529: PUSH
20530: LD_INT 1
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 1
20539: NEG
20540: PUSH
20541: LD_INT 0
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 1
20550: NEG
20551: PUSH
20552: LD_INT 1
20554: NEG
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 1
20562: NEG
20563: PUSH
20564: LD_INT 2
20566: NEG
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 0
20574: PUSH
20575: LD_INT 2
20577: NEG
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 1
20585: PUSH
20586: LD_INT 1
20588: NEG
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 2
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 2
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: LD_INT 2
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 1
20626: PUSH
20627: LD_INT 2
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 0
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 1
20646: NEG
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 2
20657: NEG
20658: PUSH
20659: LD_INT 0
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 2
20668: NEG
20669: PUSH
20670: LD_INT 1
20672: NEG
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: PUSH
20678: LD_INT 2
20680: NEG
20681: PUSH
20682: LD_INT 2
20684: NEG
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20711: LD_ADDR_VAR 0 20
20715: PUSH
20716: LD_INT 0
20718: PUSH
20719: LD_INT 0
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 0
20728: PUSH
20729: LD_INT 1
20731: NEG
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 1
20739: PUSH
20740: LD_INT 0
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 1
20749: PUSH
20750: LD_INT 1
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 0
20759: PUSH
20760: LD_INT 1
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 1
20769: NEG
20770: PUSH
20771: LD_INT 0
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 1
20780: NEG
20781: PUSH
20782: LD_INT 1
20784: NEG
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 1
20792: NEG
20793: PUSH
20794: LD_INT 2
20796: NEG
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 0
20804: PUSH
20805: LD_INT 2
20807: NEG
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: LD_INT 1
20818: NEG
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 2
20826: PUSH
20827: LD_INT 0
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 2
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 2
20846: PUSH
20847: LD_INT 2
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: LD_INT 2
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: LD_INT 2
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 1
20876: NEG
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 2
20887: NEG
20888: PUSH
20889: LD_INT 0
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 2
20898: NEG
20899: PUSH
20900: LD_INT 1
20902: NEG
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 2
20910: NEG
20911: PUSH
20912: LD_INT 2
20914: NEG
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20941: LD_ADDR_VAR 0 21
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 0
20958: PUSH
20959: LD_INT 1
20961: NEG
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: LD_INT 0
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: LD_INT 1
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 1
20999: NEG
21000: PUSH
21001: LD_INT 0
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 1
21010: NEG
21011: PUSH
21012: LD_INT 1
21014: NEG
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: NEG
21023: PUSH
21024: LD_INT 2
21026: NEG
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 0
21034: PUSH
21035: LD_INT 2
21037: NEG
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 1
21045: PUSH
21046: LD_INT 1
21048: NEG
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 2
21056: PUSH
21057: LD_INT 0
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 2
21066: PUSH
21067: LD_INT 1
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 2
21076: PUSH
21077: LD_INT 2
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 1
21086: PUSH
21087: LD_INT 2
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 0
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 1
21106: NEG
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 2
21117: NEG
21118: PUSH
21119: LD_INT 0
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 2
21128: NEG
21129: PUSH
21130: LD_INT 1
21132: NEG
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 2
21140: NEG
21141: PUSH
21142: LD_INT 2
21144: NEG
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21171: LD_ADDR_VAR 0 22
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: LD_INT 1
21191: NEG
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: LD_INT 0
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 1
21209: PUSH
21210: LD_INT 1
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: LD_INT 1
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 1
21229: NEG
21230: PUSH
21231: LD_INT 0
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: NEG
21241: PUSH
21242: LD_INT 1
21244: NEG
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PUSH
21250: LD_INT 1
21252: NEG
21253: PUSH
21254: LD_INT 2
21256: NEG
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 0
21264: PUSH
21265: LD_INT 2
21267: NEG
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: LD_INT 1
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 2
21286: PUSH
21287: LD_INT 0
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 2
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 2
21306: PUSH
21307: LD_INT 2
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: LD_INT 2
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 1
21336: NEG
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 2
21347: NEG
21348: PUSH
21349: LD_INT 0
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 2
21358: NEG
21359: PUSH
21360: LD_INT 1
21362: NEG
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 2
21370: NEG
21371: PUSH
21372: LD_INT 2
21374: NEG
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21401: LD_ADDR_VAR 0 23
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: LD_INT 0
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 0
21418: PUSH
21419: LD_INT 1
21421: NEG
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 1
21429: PUSH
21430: LD_INT 0
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 1
21439: PUSH
21440: LD_INT 1
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 0
21449: PUSH
21450: LD_INT 1
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: LD_INT 1
21459: NEG
21460: PUSH
21461: LD_INT 0
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: LD_INT 1
21474: NEG
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 1
21482: NEG
21483: PUSH
21484: LD_INT 2
21486: NEG
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 0
21494: PUSH
21495: LD_INT 2
21497: NEG
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: LD_INT 1
21508: NEG
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 2
21516: PUSH
21517: LD_INT 0
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 2
21526: PUSH
21527: LD_INT 1
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 2
21536: PUSH
21537: LD_INT 2
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 1
21546: PUSH
21547: LD_INT 2
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: LD_INT 2
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 1
21566: NEG
21567: PUSH
21568: LD_INT 1
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 2
21577: NEG
21578: PUSH
21579: LD_INT 0
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 2
21588: NEG
21589: PUSH
21590: LD_INT 1
21592: NEG
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 2
21600: NEG
21601: PUSH
21602: LD_INT 2
21604: NEG
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 2
21612: NEG
21613: PUSH
21614: LD_INT 3
21616: NEG
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: PUSH
21626: LD_INT 3
21628: NEG
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: LD_INT 2
21639: NEG
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 2
21647: PUSH
21648: LD_INT 1
21650: NEG
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21681: LD_ADDR_VAR 0 24
21685: PUSH
21686: LD_INT 0
21688: PUSH
21689: LD_INT 0
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: LD_INT 1
21701: NEG
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 1
21709: PUSH
21710: LD_INT 0
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: LD_INT 1
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 0
21729: PUSH
21730: LD_INT 1
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 1
21739: NEG
21740: PUSH
21741: LD_INT 0
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 1
21750: NEG
21751: PUSH
21752: LD_INT 1
21754: NEG
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 1
21762: NEG
21763: PUSH
21764: LD_INT 2
21766: NEG
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 0
21774: PUSH
21775: LD_INT 2
21777: NEG
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 1
21785: PUSH
21786: LD_INT 1
21788: NEG
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 2
21796: PUSH
21797: LD_INT 0
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 2
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 2
21816: PUSH
21817: LD_INT 2
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 1
21826: PUSH
21827: LD_INT 2
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 0
21836: PUSH
21837: LD_INT 2
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 1
21846: NEG
21847: PUSH
21848: LD_INT 1
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 2
21857: NEG
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 2
21868: NEG
21869: PUSH
21870: LD_INT 1
21872: NEG
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 2
21880: NEG
21881: PUSH
21882: LD_INT 2
21884: NEG
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: LD_INT 2
21895: NEG
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 2
21903: PUSH
21904: LD_INT 1
21906: NEG
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 3
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 3
21924: PUSH
21925: LD_INT 2
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21957: LD_ADDR_VAR 0 25
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: LD_INT 0
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 0
21974: PUSH
21975: LD_INT 1
21977: NEG
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 1
21985: PUSH
21986: LD_INT 0
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: LD_INT 1
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 0
22005: PUSH
22006: LD_INT 1
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 1
22015: NEG
22016: PUSH
22017: LD_INT 0
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 1
22026: NEG
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 1
22038: NEG
22039: PUSH
22040: LD_INT 2
22042: NEG
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 0
22050: PUSH
22051: LD_INT 2
22053: NEG
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 1
22061: PUSH
22062: LD_INT 1
22064: NEG
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 2
22072: PUSH
22073: LD_INT 0
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 2
22082: PUSH
22083: LD_INT 1
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 2
22092: PUSH
22093: LD_INT 2
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 1
22102: PUSH
22103: LD_INT 2
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 0
22112: PUSH
22113: LD_INT 2
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 1
22122: NEG
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 2
22133: NEG
22134: PUSH
22135: LD_INT 0
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 2
22144: NEG
22145: PUSH
22146: LD_INT 1
22148: NEG
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 2
22156: NEG
22157: PUSH
22158: LD_INT 2
22160: NEG
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 3
22168: PUSH
22169: LD_INT 1
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 3
22178: PUSH
22179: LD_INT 2
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 2
22188: PUSH
22189: LD_INT 3
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 1
22198: PUSH
22199: LD_INT 3
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22231: LD_ADDR_VAR 0 26
22235: PUSH
22236: LD_INT 0
22238: PUSH
22239: LD_INT 0
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 0
22248: PUSH
22249: LD_INT 1
22251: NEG
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 1
22259: PUSH
22260: LD_INT 0
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 1
22269: PUSH
22270: LD_INT 1
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 0
22279: PUSH
22280: LD_INT 1
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 1
22289: NEG
22290: PUSH
22291: LD_INT 0
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 1
22300: NEG
22301: PUSH
22302: LD_INT 1
22304: NEG
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 1
22312: NEG
22313: PUSH
22314: LD_INT 2
22316: NEG
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 0
22324: PUSH
22325: LD_INT 2
22327: NEG
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: LD_INT 1
22338: NEG
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 2
22346: PUSH
22347: LD_INT 0
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 2
22356: PUSH
22357: LD_INT 1
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 2
22366: PUSH
22367: LD_INT 2
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 0
22386: PUSH
22387: LD_INT 2
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: NEG
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 2
22407: NEG
22408: PUSH
22409: LD_INT 0
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 2
22418: NEG
22419: PUSH
22420: LD_INT 1
22422: NEG
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: NEG
22431: PUSH
22432: LD_INT 2
22434: NEG
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 2
22442: PUSH
22443: LD_INT 3
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 1
22452: PUSH
22453: LD_INT 3
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 1
22462: NEG
22463: PUSH
22464: LD_INT 2
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 2
22473: NEG
22474: PUSH
22475: LD_INT 1
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22507: LD_ADDR_VAR 0 27
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 1
22576: NEG
22577: PUSH
22578: LD_INT 1
22580: NEG
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 1
22588: NEG
22589: PUSH
22590: LD_INT 2
22592: NEG
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: LD_INT 2
22603: NEG
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: LD_INT 1
22614: NEG
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 2
22622: PUSH
22623: LD_INT 0
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 2
22632: PUSH
22633: LD_INT 1
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 2
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 1
22652: PUSH
22653: LD_INT 2
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 0
22662: PUSH
22663: LD_INT 2
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 1
22672: NEG
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 2
22683: NEG
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 2
22694: NEG
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 2
22706: NEG
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 1
22718: NEG
22719: PUSH
22720: LD_INT 2
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 2
22729: NEG
22730: PUSH
22731: LD_INT 1
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 3
22740: NEG
22741: PUSH
22742: LD_INT 1
22744: NEG
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 3
22752: NEG
22753: PUSH
22754: LD_INT 2
22756: NEG
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22787: LD_ADDR_VAR 0 28
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 0
22804: PUSH
22805: LD_INT 1
22807: NEG
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 1
22815: PUSH
22816: LD_INT 0
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 1
22825: PUSH
22826: LD_INT 1
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: LD_INT 1
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: NEG
22846: PUSH
22847: LD_INT 0
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 1
22856: NEG
22857: PUSH
22858: LD_INT 1
22860: NEG
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: LD_INT 2
22872: NEG
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 0
22880: PUSH
22881: LD_INT 2
22883: NEG
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 1
22891: PUSH
22892: LD_INT 1
22894: NEG
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 2
22902: PUSH
22903: LD_INT 0
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 2
22912: PUSH
22913: LD_INT 1
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 2
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 1
22932: PUSH
22933: LD_INT 2
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 0
22942: PUSH
22943: LD_INT 2
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 1
22952: NEG
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 2
22963: NEG
22964: PUSH
22965: LD_INT 0
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 2
22974: NEG
22975: PUSH
22976: LD_INT 1
22978: NEG
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 2
22986: NEG
22987: PUSH
22988: LD_INT 2
22990: NEG
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 2
22998: NEG
22999: PUSH
23000: LD_INT 3
23002: NEG
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 1
23010: NEG
23011: PUSH
23012: LD_INT 3
23014: NEG
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 3
23022: NEG
23023: PUSH
23024: LD_INT 1
23026: NEG
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 3
23034: NEG
23035: PUSH
23036: LD_INT 2
23038: NEG
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23069: LD_ADDR_VAR 0 29
23073: PUSH
23074: LD_INT 0
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 0
23086: PUSH
23087: LD_INT 1
23089: NEG
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 1
23097: PUSH
23098: LD_INT 0
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 0
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_INT 1
23127: NEG
23128: PUSH
23129: LD_INT 0
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 1
23138: NEG
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 1
23150: NEG
23151: PUSH
23152: LD_INT 2
23154: NEG
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: LD_INT 2
23165: NEG
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 2
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 2
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: LD_INT 2
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: LD_INT 2
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 1
23224: NEG
23225: PUSH
23226: LD_INT 1
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 2
23235: NEG
23236: PUSH
23237: LD_INT 1
23239: NEG
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 2
23247: NEG
23248: PUSH
23249: LD_INT 2
23251: NEG
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 2
23259: NEG
23260: PUSH
23261: LD_INT 3
23263: NEG
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 2
23271: PUSH
23272: LD_INT 1
23274: NEG
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 3
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 1
23292: PUSH
23293: LD_INT 3
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 1
23302: NEG
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 3
23313: NEG
23314: PUSH
23315: LD_INT 2
23317: NEG
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23348: LD_ADDR_VAR 0 30
23352: PUSH
23353: LD_INT 0
23355: PUSH
23356: LD_INT 0
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 0
23365: PUSH
23366: LD_INT 1
23368: NEG
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 1
23376: PUSH
23377: LD_INT 0
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: LD_INT 1
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 0
23396: PUSH
23397: LD_INT 1
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 1
23406: NEG
23407: PUSH
23408: LD_INT 0
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 1
23417: NEG
23418: PUSH
23419: LD_INT 1
23421: NEG
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: NEG
23430: PUSH
23431: LD_INT 2
23433: NEG
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 0
23441: PUSH
23442: LD_INT 2
23444: NEG
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 1
23452: PUSH
23453: LD_INT 1
23455: NEG
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 2
23463: PUSH
23464: LD_INT 0
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 2
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 2
23483: PUSH
23484: LD_INT 2
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: LD_INT 2
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: NEG
23504: PUSH
23505: LD_INT 1
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 2
23514: NEG
23515: PUSH
23516: LD_INT 0
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 2
23525: NEG
23526: PUSH
23527: LD_INT 1
23529: NEG
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 1
23537: NEG
23538: PUSH
23539: LD_INT 3
23541: NEG
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: LD_INT 2
23552: NEG
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 3
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: LD_INT 3
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 2
23580: NEG
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 3
23591: NEG
23592: PUSH
23593: LD_INT 1
23595: NEG
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23626: LD_ADDR_VAR 0 31
23630: PUSH
23631: LD_INT 0
23633: PUSH
23634: LD_INT 0
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 0
23643: PUSH
23644: LD_INT 1
23646: NEG
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: LD_INT 1
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 0
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 1
23684: NEG
23685: PUSH
23686: LD_INT 0
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 1
23695: NEG
23696: PUSH
23697: LD_INT 1
23699: NEG
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 1
23707: NEG
23708: PUSH
23709: LD_INT 2
23711: NEG
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: LD_INT 0
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 2
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 2
23750: PUSH
23751: LD_INT 2
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 1
23760: PUSH
23761: LD_INT 2
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 0
23770: PUSH
23771: LD_INT 2
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 1
23780: NEG
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 2
23791: NEG
23792: PUSH
23793: LD_INT 1
23795: NEG
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 2
23803: NEG
23804: PUSH
23805: LD_INT 2
23807: NEG
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: NEG
23816: PUSH
23817: LD_INT 3
23819: NEG
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 2
23827: PUSH
23828: LD_INT 1
23830: NEG
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 3
23838: PUSH
23839: LD_INT 1
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: LD_INT 3
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 1
23858: NEG
23859: PUSH
23860: LD_INT 2
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 3
23869: NEG
23870: PUSH
23871: LD_INT 2
23873: NEG
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23904: LD_ADDR_VAR 0 32
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: LD_INT 0
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 0
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: LD_INT 1
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: LD_INT 1
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 1
23985: NEG
23986: PUSH
23987: LD_INT 2
23989: NEG
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 0
23997: PUSH
23998: LD_INT 2
24000: NEG
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 1
24008: PUSH
24009: LD_INT 1
24011: NEG
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 2
24019: PUSH
24020: LD_INT 1
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 2
24029: PUSH
24030: LD_INT 2
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 1
24039: PUSH
24040: LD_INT 2
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: LD_INT 2
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 1
24059: NEG
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 2
24070: NEG
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 2
24081: NEG
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 1
24093: NEG
24094: PUSH
24095: LD_INT 3
24097: NEG
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 1
24105: PUSH
24106: LD_INT 2
24108: NEG
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 3
24116: PUSH
24117: LD_INT 2
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 2
24126: PUSH
24127: LD_INT 3
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 2
24136: NEG
24137: PUSH
24138: LD_INT 1
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 3
24147: NEG
24148: PUSH
24149: LD_INT 1
24151: NEG
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24182: LD_ADDR_VAR 0 33
24186: PUSH
24187: LD_INT 0
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 0
24199: PUSH
24200: LD_INT 1
24202: NEG
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: LD_INT 0
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 1
24220: PUSH
24221: LD_INT 1
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: LD_INT 1
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: NEG
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 1
24251: NEG
24252: PUSH
24253: LD_INT 1
24255: NEG
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 1
24263: NEG
24264: PUSH
24265: LD_INT 2
24267: NEG
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: PUSH
24276: LD_INT 1
24278: NEG
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 2
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 2
24296: PUSH
24297: LD_INT 1
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 1
24306: PUSH
24307: LD_INT 2
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: LD_INT 2
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: LD_INT 1
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: LD_INT 0
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 2
24348: NEG
24349: PUSH
24350: LD_INT 1
24352: NEG
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 2
24360: NEG
24361: PUSH
24362: LD_INT 2
24364: NEG
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 2
24372: NEG
24373: PUSH
24374: LD_INT 3
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 2
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 3
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: LD_INT 3
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 1
24415: NEG
24416: PUSH
24417: LD_INT 2
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 3
24426: NEG
24427: PUSH
24428: LD_INT 2
24430: NEG
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24461: LD_ADDR_VAR 0 34
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: LD_INT 0
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: LD_INT 1
24481: NEG
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: LD_INT 0
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: NEG
24520: PUSH
24521: LD_INT 0
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: LD_INT 2
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 0
24554: PUSH
24555: LD_INT 2
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 2
24576: PUSH
24577: LD_INT 1
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 2
24586: PUSH
24587: LD_INT 2
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 1
24606: NEG
24607: PUSH
24608: LD_INT 1
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 2
24617: NEG
24618: PUSH
24619: LD_INT 0
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 2
24628: NEG
24629: PUSH
24630: LD_INT 1
24632: NEG
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 2
24640: NEG
24641: PUSH
24642: LD_INT 2
24644: NEG
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 1
24652: NEG
24653: PUSH
24654: LD_INT 3
24656: NEG
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: LD_INT 2
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 3
24675: PUSH
24676: LD_INT 2
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: LD_INT 3
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 2
24695: NEG
24696: PUSH
24697: LD_INT 1
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 3
24706: NEG
24707: PUSH
24708: LD_INT 1
24710: NEG
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24741: LD_ADDR_VAR 0 35
24745: PUSH
24746: LD_INT 0
24748: PUSH
24749: LD_INT 0
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: NEG
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: LD_INT 1
24814: NEG
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 2
24822: PUSH
24823: LD_INT 1
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 2
24832: NEG
24833: PUSH
24834: LD_INT 1
24836: NEG
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24853: LD_ADDR_VAR 0 36
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: LD_INT 0
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 0
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 1
24922: NEG
24923: PUSH
24924: LD_INT 1
24926: NEG
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: LD_INT 2
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 2
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24965: LD_ADDR_VAR 0 37
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 0
24982: PUSH
24983: LD_INT 1
24985: NEG
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 0
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: LD_INT 1
25038: NEG
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 1
25057: NEG
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
25077: LD_ADDR_VAR 0 38
25081: PUSH
25082: LD_INT 0
25084: PUSH
25085: LD_INT 0
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: LD_INT 1
25150: NEG
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 2
25158: PUSH
25159: LD_INT 1
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 2
25168: NEG
25169: PUSH
25170: LD_INT 1
25172: NEG
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25189: LD_ADDR_VAR 0 39
25193: PUSH
25194: LD_INT 0
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 0
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 1
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 0
25237: PUSH
25238: LD_INT 1
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: NEG
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 1
25258: NEG
25259: PUSH
25260: LD_INT 1
25262: NEG
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 1
25270: NEG
25271: PUSH
25272: LD_INT 2
25274: NEG
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: LD_INT 2
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25301: LD_ADDR_VAR 0 40
25305: PUSH
25306: LD_INT 0
25308: PUSH
25309: LD_INT 0
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: LD_INT 1
25321: NEG
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: PUSH
25330: LD_INT 0
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 1
25339: PUSH
25340: LD_INT 1
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 0
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 1
25359: NEG
25360: PUSH
25361: LD_INT 0
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: LD_INT 1
25374: NEG
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 1
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: NEG
25394: PUSH
25395: LD_INT 1
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25413: LD_ADDR_VAR 0 41
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 0
25430: PUSH
25431: LD_INT 1
25433: NEG
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: LD_INT 0
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: LD_INT 1
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 0
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: LD_INT 0
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 1
25482: NEG
25483: PUSH
25484: LD_INT 1
25486: NEG
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: LD_INT 2
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: LD_INT 1
25509: NEG
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 2
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 2
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: LD_INT 2
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: LD_INT 2
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 2
25568: NEG
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 2
25579: NEG
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 2
25591: NEG
25592: PUSH
25593: LD_INT 2
25595: NEG
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 2
25603: NEG
25604: PUSH
25605: LD_INT 3
25607: NEG
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 2
25615: PUSH
25616: LD_INT 1
25618: NEG
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 3
25626: PUSH
25627: LD_INT 0
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 3
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 3
25646: PUSH
25647: LD_INT 2
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 3
25656: PUSH
25657: LD_INT 3
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 2
25666: PUSH
25667: LD_INT 3
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 2
25676: NEG
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 3
25687: NEG
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 3
25698: NEG
25699: PUSH
25700: LD_INT 1
25702: NEG
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 3
25710: NEG
25711: PUSH
25712: LD_INT 2
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 3
25722: NEG
25723: PUSH
25724: LD_INT 3
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25763: LD_ADDR_VAR 0 42
25767: PUSH
25768: LD_INT 0
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 0
25780: PUSH
25781: LD_INT 1
25783: NEG
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 1
25791: PUSH
25792: LD_INT 0
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 1
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 0
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: NEG
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: LD_INT 1
25836: NEG
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: LD_INT 2
25848: NEG
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: LD_INT 2
25859: NEG
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 1
25867: PUSH
25868: LD_INT 1
25870: NEG
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 2
25878: PUSH
25879: LD_INT 1
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 2
25888: PUSH
25889: LD_INT 2
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 1
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: LD_INT 2
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 2
25929: NEG
25930: PUSH
25931: LD_INT 1
25933: NEG
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 2
25941: NEG
25942: PUSH
25943: LD_INT 2
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 2
25953: NEG
25954: PUSH
25955: LD_INT 3
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: NEG
25966: PUSH
25967: LD_INT 3
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: LD_INT 3
25980: NEG
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: LD_INT 2
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 3
25999: PUSH
26000: LD_INT 2
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 3
26009: PUSH
26010: LD_INT 3
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 2
26019: PUSH
26020: LD_INT 3
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: LD_INT 3
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: LD_INT 3
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 1
26049: NEG
26050: PUSH
26051: LD_INT 2
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 3
26060: NEG
26061: PUSH
26062: LD_INT 2
26064: NEG
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 3
26072: NEG
26073: PUSH
26074: LD_INT 3
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26113: LD_ADDR_VAR 0 43
26117: PUSH
26118: LD_INT 0
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 0
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: NEG
26172: PUSH
26173: LD_INT 0
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: LD_INT 2
26198: NEG
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: LD_INT 2
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 2
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: LD_INT 2
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: LD_INT 2
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: NEG
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 2
26279: NEG
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 2
26290: NEG
26291: PUSH
26292: LD_INT 1
26294: NEG
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 1
26302: NEG
26303: PUSH
26304: LD_INT 3
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 0
26314: PUSH
26315: LD_INT 3
26317: NEG
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: LD_INT 2
26328: NEG
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 2
26336: PUSH
26337: LD_INT 1
26339: NEG
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 3
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 3
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 1
26367: PUSH
26368: LD_INT 3
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: LD_INT 3
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 1
26387: NEG
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 2
26398: NEG
26399: PUSH
26400: LD_INT 1
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 3
26409: NEG
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 3
26420: NEG
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26461: LD_ADDR_VAR 0 44
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: LD_INT 1
26481: NEG
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 1
26530: NEG
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: LD_INT 2
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 2
26565: PUSH
26566: LD_INT 0
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 2
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 2
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: LD_INT 2
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 1
26605: NEG
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 2
26616: NEG
26617: PUSH
26618: LD_INT 0
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 2
26627: NEG
26628: PUSH
26629: LD_INT 1
26631: NEG
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 2
26639: NEG
26640: PUSH
26641: LD_INT 2
26643: NEG
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 2
26651: NEG
26652: PUSH
26653: LD_INT 3
26655: NEG
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 2
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 3
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 3
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 3
26694: PUSH
26695: LD_INT 2
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 3
26704: PUSH
26705: LD_INT 3
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 2
26714: PUSH
26715: LD_INT 3
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 2
26724: NEG
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 3
26735: NEG
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 3
26746: NEG
26747: PUSH
26748: LD_INT 1
26750: NEG
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 3
26758: NEG
26759: PUSH
26760: LD_INT 2
26762: NEG
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 3
26770: NEG
26771: PUSH
26772: LD_INT 3
26774: NEG
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26811: LD_ADDR_VAR 0 45
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: LD_INT 1
26831: NEG
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 1
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 0
26859: PUSH
26860: LD_INT 1
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 1
26869: NEG
26870: PUSH
26871: LD_INT 0
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: LD_INT 1
26884: NEG
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 1
26892: NEG
26893: PUSH
26894: LD_INT 2
26896: NEG
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 0
26904: PUSH
26905: LD_INT 2
26907: NEG
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: LD_INT 1
26918: NEG
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 2
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 2
26936: PUSH
26937: LD_INT 2
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 1
26946: PUSH
26947: LD_INT 2
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: LD_INT 2
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 1
26966: NEG
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 2
26977: NEG
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 2
26989: NEG
26990: PUSH
26991: LD_INT 2
26993: NEG
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 2
27001: NEG
27002: PUSH
27003: LD_INT 3
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: LD_INT 3
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: LD_INT 3
27028: NEG
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 1
27036: PUSH
27037: LD_INT 2
27039: NEG
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 3
27047: PUSH
27048: LD_INT 2
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 3
27057: PUSH
27058: LD_INT 3
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 2
27067: PUSH
27068: LD_INT 3
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: LD_INT 3
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: LD_INT 3
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: NEG
27098: PUSH
27099: LD_INT 2
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 3
27108: NEG
27109: PUSH
27110: LD_INT 2
27112: NEG
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 3
27120: NEG
27121: PUSH
27122: LD_INT 3
27124: NEG
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27161: LD_ADDR_VAR 0 46
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: LD_INT 1
27181: NEG
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: LD_INT 1
27234: NEG
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 1
27242: NEG
27243: PUSH
27244: LD_INT 2
27246: NEG
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: LD_INT 2
27257: NEG
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: LD_INT 1
27268: NEG
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 2
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 2
27286: PUSH
27287: LD_INT 1
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: LD_INT 2
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 2
27327: NEG
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 2
27338: NEG
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 1
27350: NEG
27351: PUSH
27352: LD_INT 3
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: LD_INT 3
27365: NEG
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 1
27373: PUSH
27374: LD_INT 2
27376: NEG
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 2
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 3
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 3
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: LD_INT 3
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: LD_INT 3
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: LD_INT 2
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 2
27446: NEG
27447: PUSH
27448: LD_INT 1
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 3
27457: NEG
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 3
27468: NEG
27469: PUSH
27470: LD_INT 1
27472: NEG
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27509: LD_ADDR_VAR 0 47
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 0
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: LD_INT 1
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: NEG
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: LD_INT 1
27582: NEG
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 1
27590: NEG
27591: PUSH
27592: LD_INT 2
27594: NEG
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: LD_INT 2
27605: NEG
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: LD_INT 1
27616: NEG
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 2
27624: NEG
27625: PUSH
27626: LD_INT 1
27628: NEG
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: LD_INT 2
27640: NEG
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27660: LD_ADDR_VAR 0 48
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: LD_INT 0
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: LD_INT 1
27680: NEG
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: LD_INT 1
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 1
27718: NEG
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 1
27729: NEG
27730: PUSH
27731: LD_INT 1
27733: NEG
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 1
27741: NEG
27742: PUSH
27743: LD_INT 2
27745: NEG
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: LD_INT 2
27756: NEG
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 1
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 2
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 2
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27807: LD_ADDR_VAR 0 49
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 1
27835: PUSH
27836: LD_INT 0
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 1
27865: NEG
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: LD_INT 1
27880: NEG
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 2
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 2
27909: PUSH
27910: LD_INT 1
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 2
27919: PUSH
27920: LD_INT 2
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27951: LD_ADDR_VAR 0 50
27955: PUSH
27956: LD_INT 0
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: LD_INT 1
27971: NEG
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: LD_INT 0
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 2
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 2
28042: PUSH
28043: LD_INT 2
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: LD_INT 2
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: LD_INT 2
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 1
28072: NEG
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28095: LD_ADDR_VAR 0 51
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: LD_INT 1
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: LD_INT 1
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 1
28164: NEG
28165: PUSH
28166: LD_INT 1
28168: NEG
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 0
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 1
28196: NEG
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 2
28207: NEG
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 2
28218: NEG
28219: PUSH
28220: LD_INT 1
28222: NEG
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28242: LD_ADDR_VAR 0 52
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: LD_INT 1
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 0
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 1
28300: NEG
28301: PUSH
28302: LD_INT 0
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: LD_INT 1
28315: NEG
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 1
28323: NEG
28324: PUSH
28325: LD_INT 2
28327: NEG
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 1
28335: NEG
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 2
28346: NEG
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 2
28357: NEG
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 2
28369: NEG
28370: PUSH
28371: LD_INT 2
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28393: LD_ADDR_VAR 0 53
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 0
28410: PUSH
28411: LD_INT 1
28413: NEG
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 1
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 1
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 0
28441: PUSH
28442: LD_INT 1
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: NEG
28452: PUSH
28453: LD_INT 0
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: NEG
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: LD_INT 2
28478: NEG
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 0
28486: PUSH
28487: LD_INT 2
28489: NEG
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 1
28497: PUSH
28498: LD_INT 1
28500: NEG
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 2
28508: PUSH
28509: LD_INT 0
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 2
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 2
28528: PUSH
28529: LD_INT 2
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: LD_INT 2
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: LD_INT 2
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 2
28569: NEG
28570: PUSH
28571: LD_INT 0
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 2
28580: NEG
28581: PUSH
28582: LD_INT 1
28584: NEG
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 2
28592: NEG
28593: PUSH
28594: LD_INT 2
28596: NEG
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28623: LD_ADDR_VAR 0 54
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: LD_INT 1
28643: NEG
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 1
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 1
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: NEG
28682: PUSH
28683: LD_INT 0
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: LD_INT 2
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 0
28716: PUSH
28717: LD_INT 2
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 2
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 2
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 2
28758: PUSH
28759: LD_INT 2
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: LD_INT 2
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 0
28778: PUSH
28779: LD_INT 2
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 1
28788: NEG
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 2
28799: NEG
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 2
28810: NEG
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 2
28822: NEG
28823: PUSH
28824: LD_INT 2
28826: NEG
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28853: LD_ADDR_VAR 0 55
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 0
28870: PUSH
28871: LD_INT 1
28873: NEG
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 1
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: NEG
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: NEG
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: LD_INT 2
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: LD_INT 2
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 2
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 2
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 1
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: LD_INT 2
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 1
29018: NEG
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 2
29029: NEG
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 2
29040: NEG
29041: PUSH
29042: LD_INT 1
29044: NEG
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: NEG
29053: PUSH
29054: LD_INT 2
29056: NEG
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29083: LD_ADDR_VAR 0 56
29087: PUSH
29088: LD_INT 0
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: LD_INT 1
29103: NEG
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 1
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: LD_INT 1
29156: NEG
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: LD_INT 2
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 0
29176: PUSH
29177: LD_INT 2
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 1
29187: PUSH
29188: LD_INT 1
29190: NEG
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 2
29198: PUSH
29199: LD_INT 0
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 2
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 1
29228: PUSH
29229: LD_INT 2
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 1
29248: NEG
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 2
29259: NEG
29260: PUSH
29261: LD_INT 0
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 2
29270: NEG
29271: PUSH
29272: LD_INT 1
29274: NEG
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 2
29282: NEG
29283: PUSH
29284: LD_INT 2
29286: NEG
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29313: LD_ADDR_VAR 0 57
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: LD_INT 0
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 0
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: NEG
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: NEG
29383: PUSH
29384: LD_INT 1
29386: NEG
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 1
29394: NEG
29395: PUSH
29396: LD_INT 2
29398: NEG
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: LD_INT 2
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 1
29417: PUSH
29418: LD_INT 1
29420: NEG
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 2
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 2
29438: PUSH
29439: LD_INT 1
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 2
29448: PUSH
29449: LD_INT 2
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 0
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 1
29478: NEG
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 2
29489: NEG
29490: PUSH
29491: LD_INT 0
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 2
29500: NEG
29501: PUSH
29502: LD_INT 1
29504: NEG
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 2
29512: NEG
29513: PUSH
29514: LD_INT 2
29516: NEG
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29543: LD_ADDR_VAR 0 58
29547: PUSH
29548: LD_INT 0
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: LD_INT 1
29563: NEG
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 1
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 0
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 1
29601: NEG
29602: PUSH
29603: LD_INT 0
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 1
29612: NEG
29613: PUSH
29614: LD_INT 1
29616: NEG
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 1
29624: NEG
29625: PUSH
29626: LD_INT 2
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 0
29636: PUSH
29637: LD_INT 2
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 1
29647: PUSH
29648: LD_INT 1
29650: NEG
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 2
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 2
29668: PUSH
29669: LD_INT 1
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 2
29678: PUSH
29679: LD_INT 2
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 1
29688: PUSH
29689: LD_INT 2
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 1
29708: NEG
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 2
29719: NEG
29720: PUSH
29721: LD_INT 0
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 2
29730: NEG
29731: PUSH
29732: LD_INT 1
29734: NEG
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 2
29742: NEG
29743: PUSH
29744: LD_INT 2
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29773: LD_ADDR_VAR 0 59
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 1
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 0
29821: PUSH
29822: LD_INT 1
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 0
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29861: LD_ADDR_VAR 0 60
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: LD_INT 0
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 0
29878: PUSH
29879: LD_INT 1
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 0
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 0
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: NEG
29920: PUSH
29921: LD_INT 0
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: NEG
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29949: LD_ADDR_VAR 0 61
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: LD_INT 0
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: LD_INT 1
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: LD_INT 1
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30037: LD_ADDR_VAR 0 62
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: LD_INT 1
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 0
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 1
30095: NEG
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30125: LD_ADDR_VAR 0 63
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: LD_INT 0
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 0
30142: PUSH
30143: LD_INT 1
30145: NEG
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: LD_INT 0
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: PUSH
30185: LD_INT 0
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 1
30194: NEG
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30213: LD_ADDR_VAR 0 64
30217: PUSH
30218: LD_INT 0
30220: PUSH
30221: LD_INT 0
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 0
30230: PUSH
30231: LD_INT 1
30233: NEG
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 0
30261: PUSH
30262: LD_INT 1
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: PUSH
30273: LD_INT 0
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 1
30282: NEG
30283: PUSH
30284: LD_INT 1
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: ST_TO_ADDR
// end ; 1 :
30301: GO 36198
30303: LD_INT 1
30305: DOUBLE
30306: EQUAL
30307: IFTRUE 30311
30309: GO 32934
30311: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30312: LD_ADDR_VAR 0 11
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: LD_INT 3
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: LD_INT 3
30334: NEG
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 2
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30356: LD_ADDR_VAR 0 12
30360: PUSH
30361: LD_INT 2
30363: PUSH
30364: LD_INT 1
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 3
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: LIST
30396: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30397: LD_ADDR_VAR 0 13
30401: PUSH
30402: LD_INT 3
30404: PUSH
30405: LD_INT 2
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 3
30414: PUSH
30415: LD_INT 3
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 2
30424: PUSH
30425: LD_INT 3
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: LIST
30436: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30437: LD_ADDR_VAR 0 14
30441: PUSH
30442: LD_INT 1
30444: PUSH
30445: LD_INT 3
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 0
30454: PUSH
30455: LD_INT 3
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: NEG
30465: PUSH
30466: LD_INT 2
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: LIST
30477: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30478: LD_ADDR_VAR 0 15
30482: PUSH
30483: LD_INT 2
30485: NEG
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 3
30496: NEG
30497: PUSH
30498: LD_INT 0
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 3
30507: NEG
30508: PUSH
30509: LD_INT 1
30511: NEG
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30522: LD_ADDR_VAR 0 16
30526: PUSH
30527: LD_INT 2
30529: NEG
30530: PUSH
30531: LD_INT 3
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 3
30541: NEG
30542: PUSH
30543: LD_INT 2
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 3
30553: NEG
30554: PUSH
30555: LD_INT 3
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: LIST
30567: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30568: LD_ADDR_VAR 0 17
30572: PUSH
30573: LD_INT 1
30575: NEG
30576: PUSH
30577: LD_INT 3
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: LD_INT 3
30590: NEG
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: LD_INT 2
30601: NEG
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: LIST
30611: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30612: LD_ADDR_VAR 0 18
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: LD_INT 1
30622: NEG
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 3
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 3
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30653: LD_ADDR_VAR 0 19
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: LD_INT 2
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 3
30670: PUSH
30671: LD_INT 3
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 2
30680: PUSH
30681: LD_INT 3
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30693: LD_ADDR_VAR 0 20
30697: PUSH
30698: LD_INT 1
30700: PUSH
30701: LD_INT 3
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: LD_INT 3
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 1
30720: NEG
30721: PUSH
30722: LD_INT 2
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: LIST
30733: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30734: LD_ADDR_VAR 0 21
30738: PUSH
30739: LD_INT 2
30741: NEG
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 3
30752: NEG
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 3
30763: NEG
30764: PUSH
30765: LD_INT 1
30767: NEG
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30778: LD_ADDR_VAR 0 22
30782: PUSH
30783: LD_INT 2
30785: NEG
30786: PUSH
30787: LD_INT 3
30789: NEG
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 3
30797: NEG
30798: PUSH
30799: LD_INT 2
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 3
30809: NEG
30810: PUSH
30811: LD_INT 3
30813: NEG
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: LIST
30823: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30824: LD_ADDR_VAR 0 23
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: LD_INT 3
30834: NEG
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: NEG
30843: PUSH
30844: LD_INT 4
30846: NEG
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 1
30854: PUSH
30855: LD_INT 3
30857: NEG
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: LIST
30867: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30868: LD_ADDR_VAR 0 24
30872: PUSH
30873: LD_INT 3
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 3
30885: PUSH
30886: LD_INT 1
30888: NEG
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 4
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30909: LD_ADDR_VAR 0 25
30913: PUSH
30914: LD_INT 3
30916: PUSH
30917: LD_INT 3
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 4
30926: PUSH
30927: LD_INT 3
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 3
30936: PUSH
30937: LD_INT 4
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: LIST
30948: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30949: LD_ADDR_VAR 0 26
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: LD_INT 3
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: PUSH
30967: LD_INT 4
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: LD_INT 3
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: LIST
30989: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30990: LD_ADDR_VAR 0 27
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 3
31008: NEG
31009: PUSH
31010: LD_INT 1
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 4
31019: NEG
31020: PUSH
31021: LD_INT 1
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: LIST
31033: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
31034: LD_ADDR_VAR 0 28
31038: PUSH
31039: LD_INT 3
31041: NEG
31042: PUSH
31043: LD_INT 3
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 3
31053: NEG
31054: PUSH
31055: LD_INT 4
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 4
31065: NEG
31066: PUSH
31067: LD_INT 3
31069: NEG
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: LIST
31079: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
31080: LD_ADDR_VAR 0 29
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: LD_INT 3
31091: NEG
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 3
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: LD_INT 2
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 4
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 0
31133: PUSH
31134: LD_INT 4
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: LD_INT 3
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 1
31155: NEG
31156: PUSH
31157: LD_INT 5
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 0
31167: PUSH
31168: LD_INT 5
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: LD_INT 4
31181: NEG
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 1
31189: NEG
31190: PUSH
31191: LD_INT 6
31193: NEG
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: LD_INT 6
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 1
31212: PUSH
31213: LD_INT 5
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31235: LD_ADDR_VAR 0 30
31239: PUSH
31240: LD_INT 2
31242: PUSH
31243: LD_INT 1
31245: NEG
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 3
31253: PUSH
31254: LD_INT 0
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 3
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 3
31273: PUSH
31274: LD_INT 1
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 4
31284: PUSH
31285: LD_INT 0
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 4
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 4
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 5
31315: PUSH
31316: LD_INT 0
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 5
31325: PUSH
31326: LD_INT 1
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 5
31335: PUSH
31336: LD_INT 1
31338: NEG
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 6
31346: PUSH
31347: LD_INT 0
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 6
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31378: LD_ADDR_VAR 0 31
31382: PUSH
31383: LD_INT 3
31385: PUSH
31386: LD_INT 2
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 3
31395: PUSH
31396: LD_INT 3
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 2
31405: PUSH
31406: LD_INT 3
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 4
31415: PUSH
31416: LD_INT 3
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 4
31425: PUSH
31426: LD_INT 4
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 3
31435: PUSH
31436: LD_INT 4
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 5
31445: PUSH
31446: LD_INT 4
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 5
31455: PUSH
31456: LD_INT 5
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 4
31465: PUSH
31466: LD_INT 5
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 6
31475: PUSH
31476: LD_INT 5
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 6
31485: PUSH
31486: LD_INT 6
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 5
31495: PUSH
31496: LD_INT 6
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31517: LD_ADDR_VAR 0 32
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: LD_INT 3
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: LD_INT 3
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 1
31544: NEG
31545: PUSH
31546: LD_INT 2
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: LD_INT 4
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: LD_INT 4
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: LD_INT 3
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: PUSH
31587: LD_INT 5
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: LD_INT 5
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: NEG
31607: PUSH
31608: LD_INT 4
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 1
31617: PUSH
31618: LD_INT 6
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 0
31627: PUSH
31628: LD_INT 6
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 1
31637: NEG
31638: PUSH
31639: LD_INT 5
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31660: LD_ADDR_VAR 0 33
31664: PUSH
31665: LD_INT 2
31667: NEG
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 3
31678: NEG
31679: PUSH
31680: LD_INT 0
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 3
31689: NEG
31690: PUSH
31691: LD_INT 1
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 3
31701: NEG
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 4
31712: NEG
31713: PUSH
31714: LD_INT 0
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 4
31723: NEG
31724: PUSH
31725: LD_INT 1
31727: NEG
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 4
31735: NEG
31736: PUSH
31737: LD_INT 1
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 5
31746: NEG
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 5
31757: NEG
31758: PUSH
31759: LD_INT 1
31761: NEG
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 5
31769: NEG
31770: PUSH
31771: LD_INT 1
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 6
31780: NEG
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 6
31791: NEG
31792: PUSH
31793: LD_INT 1
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31815: LD_ADDR_VAR 0 34
31819: PUSH
31820: LD_INT 2
31822: NEG
31823: PUSH
31824: LD_INT 3
31826: NEG
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 3
31834: NEG
31835: PUSH
31836: LD_INT 2
31838: NEG
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 3
31846: NEG
31847: PUSH
31848: LD_INT 3
31850: NEG
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 3
31858: NEG
31859: PUSH
31860: LD_INT 4
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 4
31870: NEG
31871: PUSH
31872: LD_INT 3
31874: NEG
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 4
31882: NEG
31883: PUSH
31884: LD_INT 4
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 4
31894: NEG
31895: PUSH
31896: LD_INT 5
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 5
31906: NEG
31907: PUSH
31908: LD_INT 4
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 5
31918: NEG
31919: PUSH
31920: LD_INT 5
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 5
31930: NEG
31931: PUSH
31932: LD_INT 6
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 6
31942: NEG
31943: PUSH
31944: LD_INT 5
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 6
31954: NEG
31955: PUSH
31956: LD_INT 6
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31978: LD_ADDR_VAR 0 41
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: LD_INT 2
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 1
31996: NEG
31997: PUSH
31998: LD_INT 3
32000: NEG
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: PUSH
32009: LD_INT 2
32011: NEG
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: LIST
32021: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
32022: LD_ADDR_VAR 0 42
32026: PUSH
32027: LD_INT 2
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 2
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 3
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
32063: LD_ADDR_VAR 0 43
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: LD_INT 2
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 3
32080: PUSH
32081: LD_INT 2
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: LIST
32102: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
32103: LD_ADDR_VAR 0 44
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: LD_INT 3
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: LD_INT 2
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32144: LD_ADDR_VAR 0 45
32148: PUSH
32149: LD_INT 2
32151: NEG
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 2
32162: NEG
32163: PUSH
32164: LD_INT 1
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 3
32173: NEG
32174: PUSH
32175: LD_INT 1
32177: NEG
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: LIST
32187: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32188: LD_ADDR_VAR 0 46
32192: PUSH
32193: LD_INT 2
32195: NEG
32196: PUSH
32197: LD_INT 2
32199: NEG
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 2
32207: NEG
32208: PUSH
32209: LD_INT 3
32211: NEG
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 3
32219: NEG
32220: PUSH
32221: LD_INT 2
32223: NEG
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: LIST
32233: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32234: LD_ADDR_VAR 0 47
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: LD_INT 3
32245: NEG
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: LD_INT 3
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32267: LD_ADDR_VAR 0 48
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 2
32285: PUSH
32286: LD_INT 1
32288: NEG
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32298: LD_ADDR_VAR 0 49
32302: PUSH
32303: LD_INT 3
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 3
32315: PUSH
32316: LD_INT 2
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32327: LD_ADDR_VAR 0 50
32331: PUSH
32332: LD_INT 2
32334: PUSH
32335: LD_INT 3
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: LD_INT 3
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32356: LD_ADDR_VAR 0 51
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: LD_INT 2
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 2
32374: NEG
32375: PUSH
32376: LD_INT 1
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32387: LD_ADDR_VAR 0 52
32391: PUSH
32392: LD_INT 3
32394: NEG
32395: PUSH
32396: LD_INT 1
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 3
32406: NEG
32407: PUSH
32408: LD_INT 2
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32420: LD_ADDR_VAR 0 53
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PUSH
32429: LD_INT 3
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: LD_INT 3
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: LD_INT 2
32453: NEG
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: LIST
32463: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32464: LD_ADDR_VAR 0 54
32468: PUSH
32469: LD_INT 2
32471: PUSH
32472: LD_INT 1
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 3
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 3
32492: PUSH
32493: LD_INT 1
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: LIST
32504: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32505: LD_ADDR_VAR 0 55
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: LD_INT 2
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 3
32522: PUSH
32523: LD_INT 3
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 2
32532: PUSH
32533: LD_INT 3
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: LIST
32544: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32545: LD_ADDR_VAR 0 56
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: LD_INT 3
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: LD_INT 3
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: LIST
32585: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32586: LD_ADDR_VAR 0 57
32590: PUSH
32591: LD_INT 2
32593: NEG
32594: PUSH
32595: LD_INT 1
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 3
32604: NEG
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 3
32615: NEG
32616: PUSH
32617: LD_INT 1
32619: NEG
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32630: LD_ADDR_VAR 0 58
32634: PUSH
32635: LD_INT 2
32637: NEG
32638: PUSH
32639: LD_INT 3
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 3
32649: NEG
32650: PUSH
32651: LD_INT 2
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 3
32661: NEG
32662: PUSH
32663: LD_INT 3
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32676: LD_ADDR_VAR 0 59
32680: PUSH
32681: LD_INT 1
32683: NEG
32684: PUSH
32685: LD_INT 2
32687: NEG
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 1
32706: PUSH
32707: LD_INT 1
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: LIST
32719: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32720: LD_ADDR_VAR 0 60
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 2
32748: PUSH
32749: LD_INT 1
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: LIST
32760: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32761: LD_ADDR_VAR 0 61
32765: PUSH
32766: LD_INT 2
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 2
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: LD_INT 2
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: LIST
32800: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32801: LD_ADDR_VAR 0 62
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: LD_INT 1
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: LIST
32841: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32842: LD_ADDR_VAR 0 63
32846: PUSH
32847: LD_INT 1
32849: NEG
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 2
32860: NEG
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 2
32871: NEG
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: LIST
32885: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32886: LD_ADDR_VAR 0 64
32890: PUSH
32891: LD_INT 1
32893: NEG
32894: PUSH
32895: LD_INT 2
32897: NEG
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 2
32905: NEG
32906: PUSH
32907: LD_INT 1
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 2
32917: NEG
32918: PUSH
32919: LD_INT 2
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: LIST
32931: ST_TO_ADDR
// end ; 2 :
32932: GO 36198
32934: LD_INT 2
32936: DOUBLE
32937: EQUAL
32938: IFTRUE 32942
32940: GO 36197
32942: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32943: LD_ADDR_VAR 0 29
32947: PUSH
32948: LD_INT 4
32950: PUSH
32951: LD_INT 0
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 4
32960: PUSH
32961: LD_INT 1
32963: NEG
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 5
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 5
32981: PUSH
32982: LD_INT 1
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 4
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 3
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 3
33011: PUSH
33012: LD_INT 1
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 3
33022: PUSH
33023: LD_INT 2
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 5
33033: PUSH
33034: LD_INT 2
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 3
33043: PUSH
33044: LD_INT 3
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 3
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 4
33063: PUSH
33064: LD_INT 3
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 4
33073: PUSH
33074: LD_INT 4
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 3
33083: PUSH
33084: LD_INT 4
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: LD_INT 3
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: LD_INT 2
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 4
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: LD_INT 4
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: LD_INT 4
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: LD_INT 3
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 4
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 1
33163: PUSH
33164: LD_INT 5
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: LD_INT 5
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 1
33183: NEG
33184: PUSH
33185: LD_INT 4
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: LD_INT 3
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 2
33205: PUSH
33206: LD_INT 5
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 2
33215: NEG
33216: PUSH
33217: LD_INT 3
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 3
33226: NEG
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 3
33237: NEG
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 2
33249: NEG
33250: PUSH
33251: LD_INT 0
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 2
33260: NEG
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 3
33271: NEG
33272: PUSH
33273: LD_INT 1
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 4
33282: NEG
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 4
33293: NEG
33294: PUSH
33295: LD_INT 1
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 4
33305: NEG
33306: PUSH
33307: LD_INT 2
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 2
33317: NEG
33318: PUSH
33319: LD_INT 2
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 4
33328: NEG
33329: PUSH
33330: LD_INT 4
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 4
33340: NEG
33341: PUSH
33342: LD_INT 5
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 3
33352: NEG
33353: PUSH
33354: LD_INT 4
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 3
33364: NEG
33365: PUSH
33366: LD_INT 3
33368: NEG
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 4
33376: NEG
33377: PUSH
33378: LD_INT 3
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 5
33388: NEG
33389: PUSH
33390: LD_INT 4
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 5
33400: NEG
33401: PUSH
33402: LD_INT 5
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: LD_INT 5
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 5
33424: NEG
33425: PUSH
33426: LD_INT 3
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33481: LD_ADDR_VAR 0 30
33485: PUSH
33486: LD_INT 4
33488: PUSH
33489: LD_INT 4
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 4
33498: PUSH
33499: LD_INT 3
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 5
33508: PUSH
33509: LD_INT 4
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 5
33518: PUSH
33519: LD_INT 5
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 4
33528: PUSH
33529: LD_INT 5
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 3
33538: PUSH
33539: LD_INT 4
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 3
33548: PUSH
33549: LD_INT 3
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 5
33558: PUSH
33559: LD_INT 3
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 3
33568: PUSH
33569: LD_INT 5
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: LD_INT 3
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: LD_INT 2
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: LD_INT 3
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: LD_INT 4
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: LD_INT 4
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 1
33628: NEG
33629: PUSH
33630: LD_INT 3
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: LD_INT 2
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 2
33650: PUSH
33651: LD_INT 4
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 2
33660: NEG
33661: PUSH
33662: LD_INT 2
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 4
33671: NEG
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 4
33682: NEG
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 3
33694: NEG
33695: PUSH
33696: LD_INT 0
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 3
33705: NEG
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 4
33716: NEG
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 5
33727: NEG
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 5
33738: NEG
33739: PUSH
33740: LD_INT 1
33742: NEG
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 5
33750: NEG
33751: PUSH
33752: LD_INT 2
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 3
33762: NEG
33763: PUSH
33764: LD_INT 2
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 3
33773: NEG
33774: PUSH
33775: LD_INT 3
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 3
33785: NEG
33786: PUSH
33787: LD_INT 4
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 2
33797: NEG
33798: PUSH
33799: LD_INT 3
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: NEG
33810: PUSH
33811: LD_INT 2
33813: NEG
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 3
33821: NEG
33822: PUSH
33823: LD_INT 2
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 4
33833: NEG
33834: PUSH
33835: LD_INT 3
33837: NEG
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 4
33845: NEG
33846: PUSH
33847: LD_INT 4
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 2
33857: NEG
33858: PUSH
33859: LD_INT 4
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 4
33869: NEG
33870: PUSH
33871: LD_INT 2
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: LD_INT 4
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: LD_INT 5
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 1
33903: PUSH
33904: LD_INT 4
33906: NEG
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: LD_INT 3
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: LD_INT 3
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: LD_INT 4
33940: NEG
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 1
33948: NEG
33949: PUSH
33950: LD_INT 5
33952: NEG
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 2
33960: PUSH
33961: LD_INT 3
33963: NEG
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 2
33971: NEG
33972: PUSH
33973: LD_INT 5
33975: NEG
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
34028: LD_ADDR_VAR 0 31
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: LD_INT 4
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: LD_INT 3
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: LD_INT 4
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: LD_INT 5
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: LD_INT 5
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: LD_INT 4
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: NEG
34097: PUSH
34098: LD_INT 3
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: LD_INT 5
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 2
34117: NEG
34118: PUSH
34119: LD_INT 3
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 3
34128: NEG
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 3
34139: NEG
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: NEG
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 3
34173: NEG
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 4
34184: NEG
34185: PUSH
34186: LD_INT 0
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 4
34195: NEG
34196: PUSH
34197: LD_INT 1
34199: NEG
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 4
34207: NEG
34208: PUSH
34209: LD_INT 2
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 2
34219: NEG
34220: PUSH
34221: LD_INT 2
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 4
34230: NEG
34231: PUSH
34232: LD_INT 4
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 4
34242: NEG
34243: PUSH
34244: LD_INT 5
34246: NEG
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 3
34254: NEG
34255: PUSH
34256: LD_INT 4
34258: NEG
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 3
34266: NEG
34267: PUSH
34268: LD_INT 3
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 4
34278: NEG
34279: PUSH
34280: LD_INT 3
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 5
34290: NEG
34291: PUSH
34292: LD_INT 4
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 5
34302: NEG
34303: PUSH
34304: LD_INT 5
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 3
34314: NEG
34315: PUSH
34316: LD_INT 5
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 5
34326: NEG
34327: PUSH
34328: LD_INT 3
34330: NEG
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 0
34338: PUSH
34339: LD_INT 3
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: LD_INT 4
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: LD_INT 3
34363: NEG
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: LD_INT 2
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: LD_INT 2
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: LD_INT 3
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: NEG
34406: PUSH
34407: LD_INT 4
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: LD_INT 4
34432: NEG
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 4
34440: PUSH
34441: LD_INT 0
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 4
34450: PUSH
34451: LD_INT 1
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 5
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 5
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 4
34481: PUSH
34482: LD_INT 1
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 3
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 3
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 3
34512: PUSH
34513: LD_INT 2
34515: NEG
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 5
34523: PUSH
34524: LD_INT 2
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34578: LD_ADDR_VAR 0 32
34582: PUSH
34583: LD_INT 4
34585: NEG
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 4
34596: NEG
34597: PUSH
34598: LD_INT 1
34600: NEG
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 3
34608: NEG
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 3
34619: NEG
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 4
34630: NEG
34631: PUSH
34632: LD_INT 1
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 5
34641: NEG
34642: PUSH
34643: LD_INT 0
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 5
34652: NEG
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 5
34664: NEG
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 3
34676: NEG
34677: PUSH
34678: LD_INT 2
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 3
34687: NEG
34688: PUSH
34689: LD_INT 3
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 3
34699: NEG
34700: PUSH
34701: LD_INT 4
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 2
34711: NEG
34712: PUSH
34713: LD_INT 3
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 2
34723: NEG
34724: PUSH
34725: LD_INT 2
34727: NEG
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 3
34735: NEG
34736: PUSH
34737: LD_INT 2
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 4
34747: NEG
34748: PUSH
34749: LD_INT 3
34751: NEG
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 4
34759: NEG
34760: PUSH
34761: LD_INT 4
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 2
34771: NEG
34772: PUSH
34773: LD_INT 4
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 4
34783: NEG
34784: PUSH
34785: LD_INT 2
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: LD_INT 4
34798: NEG
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: LD_INT 5
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 1
34817: PUSH
34818: LD_INT 4
34820: NEG
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: LD_INT 3
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: LD_INT 3
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: NEG
34851: PUSH
34852: LD_INT 4
34854: NEG
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: LD_INT 5
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: LD_INT 3
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 2
34885: NEG
34886: PUSH
34887: LD_INT 5
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 3
34897: PUSH
34898: LD_INT 0
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 3
34907: PUSH
34908: LD_INT 1
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 4
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 4
34928: PUSH
34929: LD_INT 1
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 3
34938: PUSH
34939: LD_INT 1
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 2
34948: PUSH
34949: LD_INT 0
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 2
34958: PUSH
34959: LD_INT 1
34961: NEG
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 2
34969: PUSH
34970: LD_INT 2
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 4
34980: PUSH
34981: LD_INT 2
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 4
34990: PUSH
34991: LD_INT 4
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 4
35000: PUSH
35001: LD_INT 3
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 5
35010: PUSH
35011: LD_INT 4
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 5
35020: PUSH
35021: LD_INT 5
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 4
35030: PUSH
35031: LD_INT 5
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 3
35040: PUSH
35041: LD_INT 4
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 3
35050: PUSH
35051: LD_INT 3
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 5
35060: PUSH
35061: LD_INT 3
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 3
35070: PUSH
35071: LD_INT 5
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
35125: LD_ADDR_VAR 0 33
35129: PUSH
35130: LD_INT 4
35132: NEG
35133: PUSH
35134: LD_INT 4
35136: NEG
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 4
35144: NEG
35145: PUSH
35146: LD_INT 5
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 3
35156: NEG
35157: PUSH
35158: LD_INT 4
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 3
35168: NEG
35169: PUSH
35170: LD_INT 3
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 4
35180: NEG
35181: PUSH
35182: LD_INT 3
35184: NEG
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 5
35192: NEG
35193: PUSH
35194: LD_INT 4
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 5
35204: NEG
35205: PUSH
35206: LD_INT 5
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 3
35216: NEG
35217: PUSH
35218: LD_INT 5
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 5
35228: NEG
35229: PUSH
35230: LD_INT 3
35232: NEG
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: LD_INT 3
35243: NEG
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: LD_INT 4
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 3
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: LD_INT 2
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 0
35284: PUSH
35285: LD_INT 2
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 1
35295: NEG
35296: PUSH
35297: LD_INT 3
35299: NEG
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: LD_INT 4
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 2
35319: PUSH
35320: LD_INT 2
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: LD_INT 4
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 4
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 4
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 5
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 5
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 4
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 3
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 3
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 3
35414: PUSH
35415: LD_INT 2
35417: NEG
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 5
35425: PUSH
35426: LD_INT 2
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 3
35435: PUSH
35436: LD_INT 3
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 3
35445: PUSH
35446: LD_INT 2
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 4
35455: PUSH
35456: LD_INT 3
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 4
35465: PUSH
35466: LD_INT 4
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 3
35475: PUSH
35476: LD_INT 4
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: LD_INT 3
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 2
35495: PUSH
35496: LD_INT 2
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 4
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: LD_INT 4
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: LD_INT 4
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: LD_INT 3
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 1
35545: PUSH
35546: LD_INT 4
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 5
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 5
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: LD_INT 4
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: LD_INT 3
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: PUSH
35598: LD_INT 5
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 2
35607: NEG
35608: PUSH
35609: LD_INT 3
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35663: LD_ADDR_VAR 0 34
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 4
35673: NEG
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: LD_INT 5
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: LD_INT 4
35695: NEG
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: LD_INT 3
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: LD_INT 3
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 1
35725: NEG
35726: PUSH
35727: LD_INT 4
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: LD_INT 5
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 2
35749: PUSH
35750: LD_INT 3
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 2
35760: NEG
35761: PUSH
35762: LD_INT 5
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 3
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 3
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 4
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 4
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 3
35813: PUSH
35814: LD_INT 1
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 2
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 2
35844: PUSH
35845: LD_INT 2
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 4
35855: PUSH
35856: LD_INT 2
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 4
35865: PUSH
35866: LD_INT 4
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 4
35875: PUSH
35876: LD_INT 3
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 5
35885: PUSH
35886: LD_INT 4
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 5
35895: PUSH
35896: LD_INT 5
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 4
35905: PUSH
35906: LD_INT 5
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 3
35915: PUSH
35916: LD_INT 4
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 3
35925: PUSH
35926: LD_INT 3
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 5
35935: PUSH
35936: LD_INT 3
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 3
35945: PUSH
35946: LD_INT 5
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: LD_INT 3
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: LD_INT 2
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: LD_INT 3
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: LD_INT 4
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 4
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: LD_INT 3
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 1
36016: NEG
36017: PUSH
36018: LD_INT 2
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 2
36027: PUSH
36028: LD_INT 4
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 2
36037: NEG
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 4
36048: NEG
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 4
36059: NEG
36060: PUSH
36061: LD_INT 1
36063: NEG
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 3
36071: NEG
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 3
36082: NEG
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 4
36093: NEG
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 5
36104: NEG
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 5
36115: NEG
36116: PUSH
36117: LD_INT 1
36119: NEG
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 5
36127: NEG
36128: PUSH
36129: LD_INT 2
36131: NEG
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 3
36139: NEG
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: ST_TO_ADDR
// end ; end ;
36195: GO 36198
36197: POP
// case btype of b_depot , b_warehouse :
36198: LD_VAR 0 1
36202: PUSH
36203: LD_INT 0
36205: DOUBLE
36206: EQUAL
36207: IFTRUE 36217
36209: LD_INT 1
36211: DOUBLE
36212: EQUAL
36213: IFTRUE 36217
36215: GO 36418
36217: POP
// case nation of nation_american :
36218: LD_VAR 0 5
36222: PUSH
36223: LD_INT 1
36225: DOUBLE
36226: EQUAL
36227: IFTRUE 36231
36229: GO 36287
36231: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
36232: LD_ADDR_VAR 0 9
36236: PUSH
36237: LD_VAR 0 11
36241: PUSH
36242: LD_VAR 0 12
36246: PUSH
36247: LD_VAR 0 13
36251: PUSH
36252: LD_VAR 0 14
36256: PUSH
36257: LD_VAR 0 15
36261: PUSH
36262: LD_VAR 0 16
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: PUSH
36275: LD_VAR 0 4
36279: PUSH
36280: LD_INT 1
36282: PLUS
36283: ARRAY
36284: ST_TO_ADDR
36285: GO 36416
36287: LD_INT 2
36289: DOUBLE
36290: EQUAL
36291: IFTRUE 36295
36293: GO 36351
36295: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
36296: LD_ADDR_VAR 0 9
36300: PUSH
36301: LD_VAR 0 17
36305: PUSH
36306: LD_VAR 0 18
36310: PUSH
36311: LD_VAR 0 19
36315: PUSH
36316: LD_VAR 0 20
36320: PUSH
36321: LD_VAR 0 21
36325: PUSH
36326: LD_VAR 0 22
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: PUSH
36339: LD_VAR 0 4
36343: PUSH
36344: LD_INT 1
36346: PLUS
36347: ARRAY
36348: ST_TO_ADDR
36349: GO 36416
36351: LD_INT 3
36353: DOUBLE
36354: EQUAL
36355: IFTRUE 36359
36357: GO 36415
36359: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36360: LD_ADDR_VAR 0 9
36364: PUSH
36365: LD_VAR 0 23
36369: PUSH
36370: LD_VAR 0 24
36374: PUSH
36375: LD_VAR 0 25
36379: PUSH
36380: LD_VAR 0 26
36384: PUSH
36385: LD_VAR 0 27
36389: PUSH
36390: LD_VAR 0 28
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: PUSH
36403: LD_VAR 0 4
36407: PUSH
36408: LD_INT 1
36410: PLUS
36411: ARRAY
36412: ST_TO_ADDR
36413: GO 36416
36415: POP
36416: GO 36965
36418: LD_INT 2
36420: DOUBLE
36421: EQUAL
36422: IFTRUE 36432
36424: LD_INT 3
36426: DOUBLE
36427: EQUAL
36428: IFTRUE 36432
36430: GO 36488
36432: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36433: LD_ADDR_VAR 0 9
36437: PUSH
36438: LD_VAR 0 29
36442: PUSH
36443: LD_VAR 0 30
36447: PUSH
36448: LD_VAR 0 31
36452: PUSH
36453: LD_VAR 0 32
36457: PUSH
36458: LD_VAR 0 33
36462: PUSH
36463: LD_VAR 0 34
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: PUSH
36476: LD_VAR 0 4
36480: PUSH
36481: LD_INT 1
36483: PLUS
36484: ARRAY
36485: ST_TO_ADDR
36486: GO 36965
36488: LD_INT 16
36490: DOUBLE
36491: EQUAL
36492: IFTRUE 36544
36494: LD_INT 17
36496: DOUBLE
36497: EQUAL
36498: IFTRUE 36544
36500: LD_INT 18
36502: DOUBLE
36503: EQUAL
36504: IFTRUE 36544
36506: LD_INT 19
36508: DOUBLE
36509: EQUAL
36510: IFTRUE 36544
36512: LD_INT 20
36514: DOUBLE
36515: EQUAL
36516: IFTRUE 36544
36518: LD_INT 21
36520: DOUBLE
36521: EQUAL
36522: IFTRUE 36544
36524: LD_INT 23
36526: DOUBLE
36527: EQUAL
36528: IFTRUE 36544
36530: LD_INT 24
36532: DOUBLE
36533: EQUAL
36534: IFTRUE 36544
36536: LD_INT 25
36538: DOUBLE
36539: EQUAL
36540: IFTRUE 36544
36542: GO 36600
36544: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36545: LD_ADDR_VAR 0 9
36549: PUSH
36550: LD_VAR 0 35
36554: PUSH
36555: LD_VAR 0 36
36559: PUSH
36560: LD_VAR 0 37
36564: PUSH
36565: LD_VAR 0 38
36569: PUSH
36570: LD_VAR 0 39
36574: PUSH
36575: LD_VAR 0 40
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: PUSH
36588: LD_VAR 0 4
36592: PUSH
36593: LD_INT 1
36595: PLUS
36596: ARRAY
36597: ST_TO_ADDR
36598: GO 36965
36600: LD_INT 6
36602: DOUBLE
36603: EQUAL
36604: IFTRUE 36656
36606: LD_INT 7
36608: DOUBLE
36609: EQUAL
36610: IFTRUE 36656
36612: LD_INT 8
36614: DOUBLE
36615: EQUAL
36616: IFTRUE 36656
36618: LD_INT 13
36620: DOUBLE
36621: EQUAL
36622: IFTRUE 36656
36624: LD_INT 12
36626: DOUBLE
36627: EQUAL
36628: IFTRUE 36656
36630: LD_INT 15
36632: DOUBLE
36633: EQUAL
36634: IFTRUE 36656
36636: LD_INT 11
36638: DOUBLE
36639: EQUAL
36640: IFTRUE 36656
36642: LD_INT 14
36644: DOUBLE
36645: EQUAL
36646: IFTRUE 36656
36648: LD_INT 10
36650: DOUBLE
36651: EQUAL
36652: IFTRUE 36656
36654: GO 36712
36656: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
36657: LD_ADDR_VAR 0 9
36661: PUSH
36662: LD_VAR 0 41
36666: PUSH
36667: LD_VAR 0 42
36671: PUSH
36672: LD_VAR 0 43
36676: PUSH
36677: LD_VAR 0 44
36681: PUSH
36682: LD_VAR 0 45
36686: PUSH
36687: LD_VAR 0 46
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: PUSH
36700: LD_VAR 0 4
36704: PUSH
36705: LD_INT 1
36707: PLUS
36708: ARRAY
36709: ST_TO_ADDR
36710: GO 36965
36712: LD_INT 36
36714: DOUBLE
36715: EQUAL
36716: IFTRUE 36720
36718: GO 36776
36720: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36721: LD_ADDR_VAR 0 9
36725: PUSH
36726: LD_VAR 0 47
36730: PUSH
36731: LD_VAR 0 48
36735: PUSH
36736: LD_VAR 0 49
36740: PUSH
36741: LD_VAR 0 50
36745: PUSH
36746: LD_VAR 0 51
36750: PUSH
36751: LD_VAR 0 52
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: PUSH
36764: LD_VAR 0 4
36768: PUSH
36769: LD_INT 1
36771: PLUS
36772: ARRAY
36773: ST_TO_ADDR
36774: GO 36965
36776: LD_INT 4
36778: DOUBLE
36779: EQUAL
36780: IFTRUE 36802
36782: LD_INT 5
36784: DOUBLE
36785: EQUAL
36786: IFTRUE 36802
36788: LD_INT 34
36790: DOUBLE
36791: EQUAL
36792: IFTRUE 36802
36794: LD_INT 37
36796: DOUBLE
36797: EQUAL
36798: IFTRUE 36802
36800: GO 36858
36802: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36803: LD_ADDR_VAR 0 9
36807: PUSH
36808: LD_VAR 0 53
36812: PUSH
36813: LD_VAR 0 54
36817: PUSH
36818: LD_VAR 0 55
36822: PUSH
36823: LD_VAR 0 56
36827: PUSH
36828: LD_VAR 0 57
36832: PUSH
36833: LD_VAR 0 58
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: PUSH
36846: LD_VAR 0 4
36850: PUSH
36851: LD_INT 1
36853: PLUS
36854: ARRAY
36855: ST_TO_ADDR
36856: GO 36965
36858: LD_INT 31
36860: DOUBLE
36861: EQUAL
36862: IFTRUE 36908
36864: LD_INT 32
36866: DOUBLE
36867: EQUAL
36868: IFTRUE 36908
36870: LD_INT 33
36872: DOUBLE
36873: EQUAL
36874: IFTRUE 36908
36876: LD_INT 27
36878: DOUBLE
36879: EQUAL
36880: IFTRUE 36908
36882: LD_INT 26
36884: DOUBLE
36885: EQUAL
36886: IFTRUE 36908
36888: LD_INT 28
36890: DOUBLE
36891: EQUAL
36892: IFTRUE 36908
36894: LD_INT 29
36896: DOUBLE
36897: EQUAL
36898: IFTRUE 36908
36900: LD_INT 30
36902: DOUBLE
36903: EQUAL
36904: IFTRUE 36908
36906: GO 36964
36908: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
36909: LD_ADDR_VAR 0 9
36913: PUSH
36914: LD_VAR 0 59
36918: PUSH
36919: LD_VAR 0 60
36923: PUSH
36924: LD_VAR 0 61
36928: PUSH
36929: LD_VAR 0 62
36933: PUSH
36934: LD_VAR 0 63
36938: PUSH
36939: LD_VAR 0 64
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: PUSH
36952: LD_VAR 0 4
36956: PUSH
36957: LD_INT 1
36959: PLUS
36960: ARRAY
36961: ST_TO_ADDR
36962: GO 36965
36964: POP
// temp_list2 = [ ] ;
36965: LD_ADDR_VAR 0 10
36969: PUSH
36970: EMPTY
36971: ST_TO_ADDR
// for i in temp_list do
36972: LD_ADDR_VAR 0 8
36976: PUSH
36977: LD_VAR 0 9
36981: PUSH
36982: FOR_IN
36983: IFFALSE 37035
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36985: LD_ADDR_VAR 0 10
36989: PUSH
36990: LD_VAR 0 10
36994: PUSH
36995: LD_VAR 0 8
36999: PUSH
37000: LD_INT 1
37002: ARRAY
37003: PUSH
37004: LD_VAR 0 2
37008: PLUS
37009: PUSH
37010: LD_VAR 0 8
37014: PUSH
37015: LD_INT 2
37017: ARRAY
37018: PUSH
37019: LD_VAR 0 3
37023: PLUS
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: EMPTY
37030: LIST
37031: ADD
37032: ST_TO_ADDR
37033: GO 36982
37035: POP
37036: POP
// result = temp_list2 ;
37037: LD_ADDR_VAR 0 7
37041: PUSH
37042: LD_VAR 0 10
37046: ST_TO_ADDR
// end ;
37047: LD_VAR 0 7
37051: RET
// export function GetDriverVehicle ( unit ) ; begin
37052: LD_INT 0
37054: PPUSH
// if not unit then
37055: LD_VAR 0 1
37059: NOT
37060: IFFALSE 37064
// exit ;
37062: GO 37102
// result := IsInUnit ( unit ) ;
37064: LD_ADDR_VAR 0 2
37068: PUSH
37069: LD_VAR 0 1
37073: PPUSH
37074: CALL_OW 310
37078: ST_TO_ADDR
// if GetType ( result ) <> unit_vehicle then
37079: LD_VAR 0 2
37083: PPUSH
37084: CALL_OW 247
37088: PUSH
37089: LD_INT 2
37091: NONEQUAL
37092: IFFALSE 37102
// result := 0 ;
37094: LD_ADDR_VAR 0 2
37098: PUSH
37099: LD_INT 0
37101: ST_TO_ADDR
// end ; end_of_file
37102: LD_VAR 0 2
37106: RET
// every 1 do var i ;
37107: GO 37109
37109: DISABLE
37110: LD_INT 0
37112: PPUSH
// begin Video ( true ) ;
37113: LD_INT 1
37115: PPUSH
37116: CALL 7090 0 1
// CenterOnXY ( 53 , 40 ) ;
37120: LD_INT 53
37122: PPUSH
37123: LD_INT 40
37125: PPUSH
37126: CALL_OW 84
// wait ( 0 0$5 ) ;
37130: LD_INT 175
37132: PPUSH
37133: CALL_OW 67
// if gammaCommander = 1 then
37137: LD_EXP 12
37141: PUSH
37142: LD_INT 1
37144: EQUAL
37145: IFFALSE 37159
// Say ( Donaldson , D1-Don-1 ) ;
37147: LD_EXP 3
37151: PPUSH
37152: LD_STRING D1-Don-1
37154: PPUSH
37155: CALL_OW 88
// if gammaCommander = 2 then
37159: LD_EXP 12
37163: PUSH
37164: LD_INT 2
37166: EQUAL
37167: IFFALSE 37181
// Say ( Brown , D1-Brown-1 ) ;
37169: LD_EXP 2
37173: PPUSH
37174: LD_STRING D1-Brown-1
37176: PPUSH
37177: CALL_OW 88
// if gammaCommander = 3 then
37181: LD_EXP 12
37185: PUSH
37186: LD_INT 3
37188: EQUAL
37189: IFFALSE 37203
// Say ( Houten , D1-VanH-1 ) ;
37191: LD_EXP 13
37195: PPUSH
37196: LD_STRING D1-VanH-1
37198: PPUSH
37199: CALL_OW 88
// SayRadio ( Harisson , D1-Har-1 ) ;
37203: LD_EXP 22
37207: PPUSH
37208: LD_STRING D1-Har-1
37210: PPUSH
37211: CALL_OW 94
// if gammaCommander = 1 then
37215: LD_EXP 12
37219: PUSH
37220: LD_INT 1
37222: EQUAL
37223: IFFALSE 37237
// Say ( Donaldson , D1-Don-2 ) ;
37225: LD_EXP 3
37229: PPUSH
37230: LD_STRING D1-Don-2
37232: PPUSH
37233: CALL_OW 88
// if gammaCommander = 2 then
37237: LD_EXP 12
37241: PUSH
37242: LD_INT 2
37244: EQUAL
37245: IFFALSE 37259
// Say ( Brown , D1-Brown-2 ) ;
37247: LD_EXP 2
37251: PPUSH
37252: LD_STRING D1-Brown-2
37254: PPUSH
37255: CALL_OW 88
// if gammaCommander = 3 then
37259: LD_EXP 12
37263: PUSH
37264: LD_INT 3
37266: EQUAL
37267: IFFALSE 37281
// Say ( Houten , D1-VanH-2 ) ;
37269: LD_EXP 13
37273: PPUSH
37274: LD_STRING D1-VanH-2
37276: PPUSH
37277: CALL_OW 88
// SayRadio ( Harisson , D1-Har-2 ) ;
37281: LD_EXP 22
37285: PPUSH
37286: LD_STRING D1-Har-2
37288: PPUSH
37289: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) then
37293: LD_INT 22
37295: PUSH
37296: LD_INT 1
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 33
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 61
37315: PUSH
37316: EMPTY
37317: LIST
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: PPUSH
37324: CALL_OW 69
37328: IFFALSE 37393
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) do
37330: LD_ADDR_VAR 0 1
37334: PUSH
37335: LD_INT 22
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 33
37347: PUSH
37348: LD_INT 2
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 61
37357: PUSH
37358: EMPTY
37359: LIST
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: LIST
37365: PPUSH
37366: CALL_OW 69
37370: PUSH
37371: FOR_IN
37372: IFFALSE 37391
// ComAgressiveMove ( i , 70 , 41 ) ;
37374: LD_VAR 0 1
37378: PPUSH
37379: LD_INT 70
37381: PPUSH
37382: LD_INT 41
37384: PPUSH
37385: CALL_OW 114
37389: GO 37371
37391: POP
37392: POP
// repeat wait ( 0 0$1 ) ;
37393: LD_INT 35
37395: PPUSH
37396: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
37400: LD_ADDR_VAR 0 1
37404: PUSH
37405: LD_INT 22
37407: PUSH
37408: LD_INT 6
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: EMPTY
37416: LIST
37417: PPUSH
37418: CALL_OW 69
37422: PUSH
37423: FOR_IN
37424: IFFALSE 37443
// ComAgressiveMove ( i , 54 , 20 ) ;
37426: LD_VAR 0 1
37430: PPUSH
37431: LD_INT 54
37433: PPUSH
37434: LD_INT 20
37436: PPUSH
37437: CALL_OW 114
37441: GO 37423
37443: POP
37444: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
37445: LD_ADDR_VAR 0 1
37449: PUSH
37450: LD_INT 22
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 25
37462: PUSH
37463: LD_INT 1
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 3
37472: PUSH
37473: LD_INT 54
37475: PUSH
37476: EMPTY
37477: LIST
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: LIST
37487: PPUSH
37488: CALL_OW 69
37492: PUSH
37493: FOR_IN
37494: IFFALSE 37528
// begin AddComAgressiveMove ( i , 70 , 41 ) ;
37496: LD_VAR 0 1
37500: PPUSH
37501: LD_INT 70
37503: PPUSH
37504: LD_INT 41
37506: PPUSH
37507: CALL_OW 174
// AddComAgressiveMove ( i , 46 , 39 ) ;
37511: LD_VAR 0 1
37515: PPUSH
37516: LD_INT 46
37518: PPUSH
37519: LD_INT 39
37521: PPUSH
37522: CALL_OW 174
// end ;
37526: GO 37493
37528: POP
37529: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 500 ] ] ] ) do
37530: LD_ADDR_VAR 0 1
37534: PUSH
37535: LD_INT 22
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 21
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 3
37557: PUSH
37558: LD_INT 24
37560: PUSH
37561: LD_INT 500
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: PPUSH
37577: CALL_OW 69
37581: PUSH
37582: FOR_IN
37583: IFFALSE 37616
// ComMoveXY ( i , GetX ( amDepot ) , GetY ( amDepot ) ) ;
37585: LD_VAR 0 1
37589: PPUSH
37590: LD_EXP 37
37594: PPUSH
37595: CALL_OW 250
37599: PPUSH
37600: LD_EXP 37
37604: PPUSH
37605: CALL_OW 251
37609: PPUSH
37610: CALL_OW 111
37614: GO 37582
37616: POP
37617: POP
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) < 5 ;
37618: LD_INT 22
37620: PUSH
37621: LD_INT 6
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 21
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 24
37640: PUSH
37641: LD_INT 250
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: LIST
37652: PPUSH
37653: CALL_OW 69
37657: PUSH
37658: LD_INT 5
37660: LESS
37661: IFFALSE 37393
// Video ( false ) ;
37663: LD_INT 0
37665: PPUSH
37666: CALL 7090 0 1
// ChangeMissionObjectives ( M1 ) ;
37670: LD_STRING M1
37672: PPUSH
37673: CALL_OW 337
// SaveForQuickRestart ;
37677: CALL_OW 22
// startCutscene = 0 ;
37681: LD_ADDR_EXP 38
37685: PUSH
37686: LD_INT 0
37688: ST_TO_ADDR
// end ;
37689: PPOPN 1
37691: END
// every 0 0$1 trigger startCutscene do var tmp , i ;
37692: LD_EXP 38
37696: IFFALSE 37787
37698: GO 37700
37700: DISABLE
37701: LD_INT 0
37703: PPUSH
37704: PPUSH
// begin enable ;
37705: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 700 ] ] ] ) ;
37706: LD_ADDR_VAR 0 1
37710: PUSH
37711: LD_INT 22
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 21
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 3
37733: PUSH
37734: LD_INT 24
37736: PUSH
37737: LD_INT 700
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: LIST
37752: PPUSH
37753: CALL_OW 69
37757: ST_TO_ADDR
// for i in tmp do
37758: LD_ADDR_VAR 0 2
37762: PUSH
37763: LD_VAR 0 1
37767: PUSH
37768: FOR_IN
37769: IFFALSE 37785
// SetLives ( i , 700 ) ;
37771: LD_VAR 0 2
37775: PPUSH
37776: LD_INT 700
37778: PPUSH
37779: CALL_OW 234
37783: GO 37768
37785: POP
37786: POP
// end ;
37787: PPOPN 2
37789: END
// every 0 0$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 6 ] ] ) = 0 do
37790: LD_INT 22
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 101
37802: PUSH
37803: LD_INT 6
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PPUSH
37814: CALL_OW 69
37818: PUSH
37819: LD_INT 0
37821: EQUAL
37822: IFFALSE 38071
37824: GO 37826
37826: DISABLE
// begin PrepareSupportFromDelta ;
37827: CALL 3804 0 0
// firstAttack = 1 ;
37831: LD_ADDR_EXP 33
37835: PUSH
37836: LD_INT 1
37838: ST_TO_ADDR
// if IsOk ( Gladstone ) then
37839: LD_EXP 8
37843: PPUSH
37844: CALL_OW 302
37848: IFFALSE 37864
// Say ( Gladstone , D2-Glad-1 ) else
37850: LD_EXP 8
37854: PPUSH
37855: LD_STRING D2-Glad-1
37857: PPUSH
37858: CALL_OW 88
37862: GO 37972
// DialogRandom ( FilterUnitsInArea ( GammaSupport , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
37864: LD_INT 4
37866: PPUSH
37867: LD_INT 22
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 21
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: LD_INT 25
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 25
37902: PUSH
37903: LD_INT 2
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 25
37912: PUSH
37913: LD_INT 3
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 25
37922: PUSH
37923: LD_INT 4
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: LIST
37941: PPUSH
37942: CALL_OW 70
37946: PUSH
37947: LD_EXP 15
37951: PUSH
37952: LD_EXP 14
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: DIFF
37961: PPUSH
37962: LD_STRING D2-Sol1-1
37964: PPUSH
37965: LD_STRING D2-FSol1-1
37967: PPUSH
37968: CALL 7118 0 3
// if IsOK ( Donaldson ) and gammaCommander = 1 then
37972: LD_EXP 3
37976: PPUSH
37977: CALL_OW 302
37981: PUSH
37982: LD_EXP 12
37986: PUSH
37987: LD_INT 1
37989: EQUAL
37990: AND
37991: IFFALSE 38005
// Say ( Donaldson , D2-Don-1 ) ;
37993: LD_EXP 3
37997: PPUSH
37998: LD_STRING D2-Don-1
38000: PPUSH
38001: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
38005: LD_EXP 2
38009: PPUSH
38010: CALL_OW 302
38014: PUSH
38015: LD_EXP 12
38019: PUSH
38020: LD_INT 2
38022: EQUAL
38023: AND
38024: IFFALSE 38038
// Say ( Brown , D2-Brown-1 ) ;
38026: LD_EXP 2
38030: PPUSH
38031: LD_STRING D2-Brown-1
38033: PPUSH
38034: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
38038: LD_EXP 13
38042: PPUSH
38043: CALL_OW 302
38047: PUSH
38048: LD_EXP 12
38052: PUSH
38053: LD_INT 3
38055: EQUAL
38056: AND
38057: IFFALSE 38071
// Say ( Houten , D2-VanH-1 ) ;
38059: LD_EXP 13
38063: PPUSH
38064: LD_STRING D2-VanH-1
38066: PPUSH
38067: CALL_OW 88
// end ;
38071: END
// every 0 0$1 do var none ;
38072: GO 38074
38074: DISABLE
38075: LD_INT 0
38077: PPUSH
// begin wait ( LoadVariable ( 07_time , 6 6$00 ) div 3 ) ;
38078: LD_STRING 07_time
38080: PPUSH
38081: LD_INT 12600
38083: PPUSH
38084: CALL_OW 30
38088: PUSH
38089: LD_INT 3
38091: DIV
38092: PPUSH
38093: CALL_OW 67
// PrepareMacmillanSquad ;
38097: CALL 4466 0 0
// CenterNowOnUnits ( JMM ) ;
38101: LD_EXP 1
38105: PPUSH
38106: CALL_OW 87
// Say ( JMM , D3-JMM-1 ) ;
38110: LD_EXP 1
38114: PPUSH
38115: LD_STRING D3-JMM-1
38117: PPUSH
38118: CALL_OW 88
// JMMArrive = 1 ;
38122: LD_ADDR_EXP 39
38126: PUSH
38127: LD_INT 1
38129: ST_TO_ADDR
// if IsOK ( Donaldson ) and gammaCommander = 1 then
38130: LD_EXP 3
38134: PPUSH
38135: CALL_OW 302
38139: PUSH
38140: LD_EXP 12
38144: PUSH
38145: LD_INT 1
38147: EQUAL
38148: AND
38149: IFFALSE 38165
// begin Say ( Donaldson , D3-Don-1 ) ;
38151: LD_EXP 3
38155: PPUSH
38156: LD_STRING D3-Don-1
38158: PPUSH
38159: CALL_OW 88
// end else
38163: GO 38217
// begin if gammaCommander = 1 then
38165: LD_EXP 12
38169: PUSH
38170: LD_INT 1
38172: EQUAL
38173: IFFALSE 38217
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1 , D3-Sol1-1 ) ;
38175: LD_EXP 11
38179: PPUSH
38180: LD_INT 26
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PPUSH
38190: CALL_OW 72
38194: PPUSH
38195: LD_STRING D3-Sol1-1
38197: PPUSH
38198: LD_STRING D3-Sol1-1
38200: PPUSH
38201: CALL 7118 0 3
// Say ( JMM , D3-JMM-2 ) ;
38205: LD_EXP 1
38209: PPUSH
38210: LD_STRING D3-JMM-2
38212: PPUSH
38213: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
38217: LD_EXP 2
38221: PPUSH
38222: CALL_OW 302
38226: PUSH
38227: LD_EXP 12
38231: PUSH
38232: LD_INT 2
38234: EQUAL
38235: AND
38236: IFFALSE 38252
// begin Say ( Brown , D3-Brown-1 ) ;
38238: LD_EXP 2
38242: PPUSH
38243: LD_STRING D3-Brown-1
38245: PPUSH
38246: CALL_OW 88
// end else
38250: GO 38304
// begin if gammaCommander = 2 then
38252: LD_EXP 12
38256: PUSH
38257: LD_INT 2
38259: EQUAL
38260: IFFALSE 38304
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1a , D3-Sol1-1a ) ;
38262: LD_EXP 11
38266: PPUSH
38267: LD_INT 26
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PPUSH
38277: CALL_OW 72
38281: PPUSH
38282: LD_STRING D3-Sol1-1a
38284: PPUSH
38285: LD_STRING D3-Sol1-1a
38287: PPUSH
38288: CALL 7118 0 3
// Say ( JMM , D3-JMM-2 ) ;
38292: LD_EXP 1
38296: PPUSH
38297: LD_STRING D3-JMM-2
38299: PPUSH
38300: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
38304: LD_EXP 13
38308: PPUSH
38309: CALL_OW 302
38313: PUSH
38314: LD_EXP 12
38318: PUSH
38319: LD_INT 3
38321: EQUAL
38322: AND
38323: IFFALSE 38339
// begin Say ( Houten , D3-VanH-1 ) ;
38325: LD_EXP 13
38329: PPUSH
38330: LD_STRING D3-VanH-1
38332: PPUSH
38333: CALL_OW 88
// end else
38337: GO 38391
// begin if gammaCommander = 3 then
38339: LD_EXP 12
38343: PUSH
38344: LD_INT 3
38346: EQUAL
38347: IFFALSE 38391
// begin DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3-Sol1-1b , D3-Sol1-1b ) ;
38349: LD_EXP 11
38353: PPUSH
38354: LD_INT 26
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PPUSH
38364: CALL_OW 72
38368: PPUSH
38369: LD_STRING D3-Sol1-1b
38371: PPUSH
38372: LD_STRING D3-Sol1-1b
38374: PPUSH
38375: CALL 7118 0 3
// Say ( JMM , D3-JMM-2 ) ;
38379: LD_EXP 1
38383: PPUSH
38384: LD_STRING D3-JMM-2
38386: PPUSH
38387: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
38391: LD_EXP 15
38395: PPUSH
38396: CALL_OW 302
38400: IFFALSE 38428
// begin Say ( Joan , D3a-Joan-1 ) ;
38402: LD_EXP 15
38406: PPUSH
38407: LD_STRING D3a-Joan-1
38409: PPUSH
38410: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
38414: LD_EXP 1
38418: PPUSH
38419: LD_STRING D3a-JMM-1
38421: PPUSH
38422: CALL_OW 88
// end else
38426: GO 38770
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
38428: LD_STRING 06_JoanStatus_1
38430: PPUSH
38431: LD_INT 0
38433: PPUSH
38434: CALL_OW 30
38438: PUSH
38439: LD_INT 1
38441: EQUAL
38442: IFFALSE 38770
// begin Say ( JMM , D3b-JMM-1 ) ;
38444: LD_EXP 1
38448: PPUSH
38449: LD_STRING D3b-JMM-1
38451: PPUSH
38452: CALL_OW 88
// if gammaCommander = 1 then
38456: LD_EXP 12
38460: PUSH
38461: LD_INT 1
38463: EQUAL
38464: IFFALSE 38521
// if IsOK ( Donaldson ) then
38466: LD_EXP 3
38470: PPUSH
38471: CALL_OW 302
38475: IFFALSE 38491
// Say ( Donaldson , D3b-Don-1 ) else
38477: LD_EXP 3
38481: PPUSH
38482: LD_STRING D3b-Don-1
38484: PPUSH
38485: CALL_OW 88
38489: GO 38521
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38491: LD_EXP 11
38495: PPUSH
38496: LD_INT 26
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PPUSH
38506: CALL_OW 72
38510: PPUSH
38511: LD_STRING D3b-Sol1-1
38513: PPUSH
38514: LD_STRING D3b-Sol1-1
38516: PPUSH
38517: CALL 7118 0 3
// if gammaCommander = 2 then
38521: LD_EXP 12
38525: PUSH
38526: LD_INT 2
38528: EQUAL
38529: IFFALSE 38586
// if IsOk ( Brown ) then
38531: LD_EXP 2
38535: PPUSH
38536: CALL_OW 302
38540: IFFALSE 38556
// Say ( Brown , D3b-Brown-1 ) else
38542: LD_EXP 2
38546: PPUSH
38547: LD_STRING D3b-Brown-1
38549: PPUSH
38550: CALL_OW 88
38554: GO 38586
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38556: LD_EXP 11
38560: PPUSH
38561: LD_INT 26
38563: PUSH
38564: LD_INT 1
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PPUSH
38571: CALL_OW 72
38575: PPUSH
38576: LD_STRING D3b-Sol1-1
38578: PPUSH
38579: LD_STRING D3b-Sol1-1
38581: PPUSH
38582: CALL 7118 0 3
// if gammaCommander = 3 then
38586: LD_EXP 12
38590: PUSH
38591: LD_INT 3
38593: EQUAL
38594: IFFALSE 38651
// if IsOk ( Houten ) then
38596: LD_EXP 13
38600: PPUSH
38601: CALL_OW 302
38605: IFFALSE 38621
// Say ( Houten , D3b-VanH-1 ) else
38607: LD_EXP 13
38611: PPUSH
38612: LD_STRING D3b-VanH-1
38614: PPUSH
38615: CALL_OW 88
38619: GO 38651
// DialogRandom ( UnitFilter ( others_gamma , [ f_sex , 1 ] ) , D3b-Sol1-1 , D3b-Sol1-1 ) ;
38621: LD_EXP 11
38625: PPUSH
38626: LD_INT 26
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PPUSH
38636: CALL_OW 72
38640: PPUSH
38641: LD_STRING D3b-Sol1-1
38643: PPUSH
38644: LD_STRING D3b-Sol1-1
38646: PPUSH
38647: CALL 7118 0 3
// if UnitFilter ( others_gamma , [ f_sex , 1 ] ) or ( gammaCommander = 1 and IsOk ( Donaldson ) ) or ( gammaCommander = 2 and IsOk ( Brown ) ) or ( gammaCommander = 3 and IsOk ( Houten ) ) then
38651: LD_EXP 11
38655: PPUSH
38656: LD_INT 26
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PPUSH
38666: CALL_OW 72
38670: PUSH
38671: LD_EXP 12
38675: PUSH
38676: LD_INT 1
38678: EQUAL
38679: PUSH
38680: LD_EXP 3
38684: PPUSH
38685: CALL_OW 302
38689: AND
38690: OR
38691: PUSH
38692: LD_EXP 12
38696: PUSH
38697: LD_INT 2
38699: EQUAL
38700: PUSH
38701: LD_EXP 2
38705: PPUSH
38706: CALL_OW 302
38710: AND
38711: OR
38712: PUSH
38713: LD_EXP 12
38717: PUSH
38718: LD_INT 3
38720: EQUAL
38721: PUSH
38722: LD_EXP 13
38726: PPUSH
38727: CALL_OW 302
38731: AND
38732: OR
38733: IFFALSE 38747
// Say ( JMM , D3b-JMM-2 ) ;
38735: LD_EXP 1
38739: PPUSH
38740: LD_STRING D3b-JMM-2
38742: PPUSH
38743: CALL_OW 88
// if IsOK ( Lisa ) then
38747: LD_EXP 6
38751: PPUSH
38752: CALL_OW 302
38756: IFFALSE 38770
// Say ( Lisa , D3b-Lisa-2 ) ;
38758: LD_EXP 6
38762: PPUSH
38763: LD_STRING D3b-Lisa-2
38765: PPUSH
38766: CALL_OW 88
// end ; end ; none := [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Joan , Denis ] ^ macmilan_squad ;
38770: LD_ADDR_VAR 0 1
38774: PUSH
38775: LD_EXP 1
38779: PUSH
38780: LD_EXP 2
38784: PUSH
38785: LD_EXP 3
38789: PUSH
38790: LD_EXP 4
38794: PUSH
38795: LD_EXP 5
38799: PUSH
38800: LD_EXP 6
38804: PUSH
38805: LD_EXP 7
38809: PUSH
38810: LD_EXP 8
38814: PUSH
38815: LD_EXP 9
38819: PUSH
38820: LD_EXP 10
38824: PUSH
38825: LD_EXP 15
38829: PUSH
38830: LD_EXP 14
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: PUSH
38849: LD_EXP 42
38853: ADD
38854: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCa-Sol1-1 , DCa-Sol1-1 ) ;
38855: LD_INT 22
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 21
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 26
38877: PUSH
38878: LD_INT 1
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 2
38887: PUSH
38888: LD_INT 25
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 25
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 25
38910: PUSH
38911: LD_INT 3
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 25
38920: PUSH
38921: LD_INT 4
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: PPUSH
38941: CALL_OW 69
38945: PUSH
38946: LD_VAR 0 1
38950: DIFF
38951: PPUSH
38952: LD_STRING DCa-Sol1-1
38954: PPUSH
38955: LD_STRING DCa-Sol1-1
38957: PPUSH
38958: CALL 7118 0 3
// Say ( JMM , DCb-JMM-1 ) ;
38962: LD_EXP 1
38966: PPUSH
38967: LD_STRING DCb-JMM-1
38969: PPUSH
38970: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff none , DCb-Sol1-1 , DCb-Sol1-1 ) ;
38974: LD_INT 22
38976: PUSH
38977: LD_INT 1
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 21
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 26
38996: PUSH
38997: LD_INT 1
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: LD_INT 25
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 25
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 25
39029: PUSH
39030: LD_INT 3
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 25
39039: PUSH
39040: LD_INT 4
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: PPUSH
39060: CALL_OW 69
39064: PUSH
39065: LD_VAR 0 1
39069: DIFF
39070: PPUSH
39071: LD_STRING DCb-Sol1-1
39073: PPUSH
39074: LD_STRING DCb-Sol1-1
39076: PPUSH
39077: CALL 7118 0 3
// Say ( JMM , DCb-JMM-2 ) ;
39081: LD_EXP 1
39085: PPUSH
39086: LD_STRING DCb-JMM-2
39088: PPUSH
39089: CALL_OW 88
// secondAttack = 1 ;
39093: LD_ADDR_EXP 34
39097: PUSH
39098: LD_INT 1
39100: ST_TO_ADDR
// end ;
39101: PPOPN 1
39103: END
// every 0 0$01 trigger JMMArrive = 1 do
39104: LD_EXP 39
39108: PUSH
39109: LD_INT 1
39111: EQUAL
39112: IFFALSE 39192
39114: GO 39116
39116: DISABLE
// begin wait ( 3 3$0 ) ;
39117: LD_INT 6300
39119: PPUSH
39120: CALL_OW 67
// DialogueOn ;
39124: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
39128: LD_EXP 23
39132: PPUSH
39133: LD_STRING D4-Pow-1
39135: PPUSH
39136: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
39140: LD_EXP 1
39144: PPUSH
39145: LD_STRING D4-JMM-1
39147: PPUSH
39148: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
39152: LD_EXP 23
39156: PPUSH
39157: LD_STRING D4-Pow-2
39159: PPUSH
39160: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
39164: LD_EXP 1
39168: PPUSH
39169: LD_STRING D4-JMM-2
39171: PPUSH
39172: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
39176: LD_EXP 23
39180: PPUSH
39181: LD_STRING D4-Pow-3
39183: PPUSH
39184: CALL_OW 94
// DialogueOff ;
39188: CALL_OW 7
// end ;
39192: END
// every 0 0$01 trigger JMMArrive = 1 do
39193: LD_EXP 39
39197: PUSH
39198: LD_INT 1
39200: EQUAL
39201: IFFALSE 39233
39203: GO 39205
39205: DISABLE
// begin wait ( 8 8$0 ) ;
39206: LD_INT 16800
39208: PPUSH
39209: CALL_OW 67
// DialogueOn ;
39213: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
39217: LD_EXP 23
39221: PPUSH
39222: LD_STRING D4a-Pow-1
39224: PPUSH
39225: CALL_OW 94
// DialogueOff ;
39229: CALL_OW 7
// end ;
39233: END
// every 0 0$01 trigger JMMArrive = 1 do
39234: LD_EXP 39
39238: PUSH
39239: LD_INT 1
39241: EQUAL
39242: IFFALSE 39287
39244: GO 39246
39246: DISABLE
// begin wait ( [ 10 10$00 , 12 12$00 , 15 15$00 ] [ Difficulty ] ) ;
39247: LD_INT 21000
39249: PUSH
39250: LD_INT 25200
39252: PUSH
39253: LD_INT 31500
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: PUSH
39261: LD_OWVAR 67
39265: ARRAY
39266: PPUSH
39267: CALL_OW 67
// PrepareSikorsky ;
39271: CALL 5591 0 0
// SikorskyArrive = 1 ;
39275: LD_ADDR_EXP 18
39279: PUSH
39280: LD_INT 1
39282: ST_TO_ADDR
// PrepareSikorskyArmy ;
39283: CALL 5764 0 0
// end ;
39287: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , GammaSpawn ) do
39288: LD_EXP 17
39292: PPUSH
39293: LD_INT 5
39295: PPUSH
39296: CALL_OW 308
39300: IFFALSE 39492
39302: GO 39304
39304: DISABLE
// begin CenterNowOnUnits ( SikorskyTank ) ;
39305: LD_EXP 17
39309: PPUSH
39310: CALL_OW 87
// DialogueOn ;
39314: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
39318: LD_EXP 16
39322: PPUSH
39323: LD_STRING D5-Sik-1
39325: PPUSH
39326: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
39330: LD_EXP 1
39334: PPUSH
39335: LD_STRING D5-JMM-1a
39337: PPUSH
39338: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
39342: LD_EXP 16
39346: PPUSH
39347: LD_STRING D5-Sik-2
39349: PPUSH
39350: CALL_OW 88
// case query ( QSikorski ) of 1 :
39354: LD_STRING QSikorski
39356: PPUSH
39357: CALL_OW 97
39361: PUSH
39362: LD_INT 1
39364: DOUBLE
39365: EQUAL
39366: IFTRUE 39370
39368: GO 39393
39370: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
39371: LD_EXP 16
39375: PPUSH
39376: LD_STRING D5a-Sik-1
39378: PPUSH
39379: CALL_OW 88
// SikorskyTimer = 1 1$00 ;
39383: LD_ADDR_EXP 19
39387: PUSH
39388: LD_INT 2100
39390: ST_TO_ADDR
// end ; 2 :
39391: GO 39480
39393: LD_INT 2
39395: DOUBLE
39396: EQUAL
39397: IFTRUE 39401
39399: GO 39424
39401: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
39402: LD_EXP 16
39406: PPUSH
39407: LD_STRING D5b-Sik-1
39409: PPUSH
39410: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39414: LD_ADDR_EXP 19
39418: PUSH
39419: LD_INT 10500
39421: ST_TO_ADDR
// end ; 3 :
39422: GO 39480
39424: LD_INT 3
39426: DOUBLE
39427: EQUAL
39428: IFTRUE 39432
39430: GO 39479
39432: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
39433: LD_EXP 16
39437: PPUSH
39438: LD_STRING D5c-Sik-1
39440: PPUSH
39441: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
39445: LD_EXP 1
39449: PPUSH
39450: LD_STRING D5c-JMM-1
39452: PPUSH
39453: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
39457: LD_EXP 16
39461: PPUSH
39462: LD_STRING D5c-Sik-2
39464: PPUSH
39465: CALL_OW 88
// SikorskyTimer = 5 5$00 ;
39469: LD_ADDR_EXP 19
39473: PUSH
39474: LD_INT 10500
39476: ST_TO_ADDR
// end ; end ;
39477: GO 39480
39479: POP
// DialogueOff ;
39480: CALL_OW 7
// timerStatus = 1 ;
39484: LD_ADDR_EXP 35
39488: PUSH
39489: LD_INT 1
39491: ST_TO_ADDR
// end ;
39492: END
// every 0 0$1 trigger SikorskyTimer < 0 0$1 do
39493: LD_EXP 19
39497: PUSH
39498: LD_INT 35
39500: LESS
39501: IFFALSE 39549
39503: GO 39505
39505: DISABLE
// begin timerStatus = 0 ;
39506: LD_ADDR_EXP 35
39510: PUSH
39511: LD_INT 0
39513: ST_TO_ADDR
// DialogueOn ;
39514: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
39518: LD_EXP 16
39522: PPUSH
39523: LD_STRING D6-Sik-1
39525: PPUSH
39526: CALL_OW 88
// DialogueOff ;
39530: CALL_OW 7
// SikorskyAI = 1 ;
39534: LD_ADDR_EXP 20
39538: PUSH
39539: LD_INT 1
39541: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
39542: LD_STRING M2
39544: PPUSH
39545: CALL_OW 337
// end ;
39549: END
// every 0 0$1 trigger IsInArea ( SikorskyTank , PrepareToBattle ) do
39550: LD_EXP 17
39554: PPUSH
39555: LD_INT 18
39557: PPUSH
39558: CALL_OW 308
39562: IFFALSE 39672
39564: GO 39566
39566: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
39567: LD_EXP 16
39571: PPUSH
39572: LD_STRING D7-Sik-1
39574: PPUSH
39575: CALL_OW 88
// wait ( 0 0$10 ) ;
39579: LD_INT 350
39581: PPUSH
39582: CALL_OW 67
// if IsInArea ( JMM , RussianBaseTerritory ) or ( GetDriverVehicle ( JMM ) and IsInArea ( GetDriverVehicle ( JMM ) , RussianBaseTerritory ) ) then
39586: LD_EXP 1
39590: PPUSH
39591: LD_INT 24
39593: PPUSH
39594: CALL_OW 308
39598: PUSH
39599: LD_EXP 1
39603: PPUSH
39604: CALL 37052 0 1
39608: PUSH
39609: LD_EXP 1
39613: PPUSH
39614: CALL 37052 0 1
39618: PPUSH
39619: LD_INT 24
39621: PPUSH
39622: CALL_OW 308
39626: AND
39627: OR
39628: IFFALSE 39652
// begin Say ( Sikorski , D7a-Sik-1 ) ;
39630: LD_EXP 16
39634: PPUSH
39635: LD_STRING D7a-Sik-1
39637: PPUSH
39638: CALL_OW 88
// SikorskyStatus = 1 ;
39642: LD_ADDR_EXP 21
39646: PUSH
39647: LD_INT 1
39649: ST_TO_ADDR
// end else
39650: GO 39672
// begin Say ( Sikorski , D7b-Sik-1 ) ;
39652: LD_EXP 16
39656: PPUSH
39657: LD_STRING D7b-Sik-1
39659: PPUSH
39660: CALL_OW 88
// SikorskyStatus = 2 ;
39664: LD_ADDR_EXP 21
39668: PUSH
39669: LD_INT 2
39671: ST_TO_ADDR
// end ; end ;
39672: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
39673: LD_EXP 36
39677: PUSH
39678: LD_INT 1
39680: EQUAL
39681: IFFALSE 39790
39683: GO 39685
39685: DISABLE
39686: LD_INT 0
39688: PPUSH
// begin enable ;
39689: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
39690: LD_ADDR_VAR 0 1
39694: PUSH
39695: LD_INT 22
39697: PUSH
39698: LD_INT 3
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PPUSH
39705: CALL_OW 69
39709: PUSH
39710: FOR_IN
39711: IFFALSE 39738
// if IsInArea ( i , RussianEscape ) then
39713: LD_VAR 0 1
39717: PPUSH
39718: LD_INT 22
39720: PPUSH
39721: CALL_OW 308
39725: IFFALSE 39736
// RemoveUnit ( i ) ;
39727: LD_VAR 0 1
39731: PPUSH
39732: CALL_OW 64
39736: GO 39710
39738: POP
39739: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
39740: LD_ADDR_VAR 0 1
39744: PUSH
39745: LD_INT 22
39747: PUSH
39748: LD_INT 6
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PPUSH
39755: CALL_OW 69
39759: PUSH
39760: FOR_IN
39761: IFFALSE 39788
// if IsInArea ( i , RussianEscape ) then
39763: LD_VAR 0 1
39767: PPUSH
39768: LD_INT 22
39770: PPUSH
39771: CALL_OW 308
39775: IFFALSE 39786
// RemoveUnit ( i ) ;
39777: LD_VAR 0 1
39781: PPUSH
39782: CALL_OW 64
39786: GO 39760
39788: POP
39789: POP
// end ; end_of_file
39790: PPOPN 1
39792: END
// on BuildingComplete ( building ) do var tmp , un ;
39793: LD_INT 0
39795: PPUSH
39796: PPUSH
// begin if GetSide ( building ) = 3 then
39797: LD_VAR 0 1
39801: PPUSH
39802: CALL_OW 255
39806: PUSH
39807: LD_INT 3
39809: EQUAL
39810: IFFALSE 40347
// begin if GetBType ( building ) = b_depot then
39812: LD_VAR 0 1
39816: PPUSH
39817: CALL_OW 266
39821: PUSH
39822: LD_INT 0
39824: EQUAL
39825: IFFALSE 39893
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
39827: LD_VAR 0 1
39831: PPUSH
39832: CALL_OW 274
39836: PPUSH
39837: LD_INT 1
39839: PPUSH
39840: LD_INT 5000
39842: PPUSH
39843: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
39847: LD_VAR 0 1
39851: PPUSH
39852: CALL_OW 274
39856: PPUSH
39857: LD_INT 2
39859: PPUSH
39860: LD_INT 5000
39862: PPUSH
39863: CALL_OW 277
// SetBName ( building , konev ) ;
39867: LD_VAR 0 1
39871: PPUSH
39872: LD_STRING konev
39874: PPUSH
39875: CALL_OW 500
// ruDepot = building ;
39879: LD_ADDR_EXP 28
39883: PUSH
39884: LD_VAR 0 1
39888: ST_TO_ADDR
// BuildRussianBase ;
39889: CALL 7729 0 0
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
39893: LD_VAR 0 1
39897: PPUSH
39898: CALL_OW 266
39902: PUSH
39903: LD_INT 0
39905: EQUAL
39906: PUSH
39907: LD_VAR 0 1
39911: PPUSH
39912: CALL_OW 266
39916: PUSH
39917: LD_INT 2
39919: EQUAL
39920: OR
39921: PUSH
39922: LD_VAR 0 1
39926: PPUSH
39927: CALL_OW 266
39931: PUSH
39932: LD_INT 4
39934: EQUAL
39935: OR
39936: IFFALSE 39947
// ComUpgrade ( building ) ;
39938: LD_VAR 0 1
39942: PPUSH
39943: CALL_OW 146
// if GetBType ( building ) = b_lab then
39947: LD_VAR 0 1
39951: PPUSH
39952: CALL_OW 266
39956: PUSH
39957: LD_INT 6
39959: EQUAL
39960: IFFALSE 40011
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
39962: LD_VAR 0 1
39966: PPUSH
39967: LD_INT 10
39969: PPUSH
39970: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
39974: LD_VAR 0 1
39978: PPUSH
39979: LD_INT 12
39981: PPUSH
39982: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
39986: LD_INT 3
39988: PPUSH
39989: LD_VAR 0 1
39993: PPUSH
39994: LD_INT 3
39996: PPUSH
39997: CALL 8273 0 3
// ruLab = building ;
40001: LD_ADDR_EXP 29
40005: PUSH
40006: LD_VAR 0 1
40010: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker then
40011: LD_VAR 0 1
40015: PPUSH
40016: CALL_OW 266
40020: PUSH
40021: LD_INT 32
40023: EQUAL
40024: IFFALSE 40142
// begin uc_side = 3 ;
40026: LD_ADDR_OWVAR 20
40030: PUSH
40031: LD_INT 3
40033: ST_TO_ADDR
// uc_nation = 3 ;
40034: LD_ADDR_OWVAR 21
40038: PUSH
40039: LD_INT 3
40041: ST_TO_ADDR
// hc_gallery =  ;
40042: LD_ADDR_OWVAR 33
40046: PUSH
40047: LD_STRING 
40049: ST_TO_ADDR
// hc_name =  ;
40050: LD_ADDR_OWVAR 26
40054: PUSH
40055: LD_STRING 
40057: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
40058: LD_INT 0
40060: PPUSH
40061: LD_INT 1
40063: PPUSH
40064: LD_EXP 25
40068: PPUSH
40069: LD_EXP 26
40073: PPUSH
40074: CALL_OW 12
40078: PPUSH
40079: CALL_OW 380
// un = CreateHuman ;
40083: LD_ADDR_VAR 0 3
40087: PUSH
40088: CALL_OW 44
40092: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
40093: LD_VAR 0 3
40097: PPUSH
40098: LD_VAR 0 1
40102: PPUSH
40103: CALL_OW 52
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40107: LD_VAR 0 1
40111: PPUSH
40112: LD_INT 43
40114: PUSH
40115: LD_INT 44
40117: PUSH
40118: LD_INT 46
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: PPUSH
40129: LD_INT 3
40131: PPUSH
40132: CALL_OW 12
40136: ARRAY
40137: PPUSH
40138: CALL_OW 208
// end ; if GetBType ( building ) = b_turret then
40142: LD_VAR 0 1
40146: PPUSH
40147: CALL_OW 266
40151: PUSH
40152: LD_INT 33
40154: EQUAL
40155: IFFALSE 40192
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40157: LD_VAR 0 1
40161: PPUSH
40162: LD_INT 43
40164: PUSH
40165: LD_INT 44
40167: PUSH
40168: LD_INT 46
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: PPUSH
40179: LD_INT 3
40181: PPUSH
40182: CALL_OW 12
40186: ARRAY
40187: PPUSH
40188: CALL_OW 208
// if GetBType ( building ) = b_bunker then
40192: LD_VAR 0 1
40196: PPUSH
40197: CALL_OW 266
40201: PUSH
40202: LD_INT 32
40204: EQUAL
40205: IFFALSE 40242
// AddComPlaceWeapon ( building , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
40207: LD_VAR 0 1
40211: PPUSH
40212: LD_INT 43
40214: PUSH
40215: LD_INT 44
40217: PUSH
40218: LD_INT 46
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: PPUSH
40229: LD_INT 3
40231: PPUSH
40232: CALL_OW 12
40236: ARRAY
40237: PPUSH
40238: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
40242: LD_VAR 0 1
40246: PPUSH
40247: CALL_OW 266
40251: PUSH
40252: LD_INT 24
40254: EQUAL
40255: IFFALSE 40265
// russianAI = 1 ;
40257: LD_ADDR_EXP 27
40261: PUSH
40262: LD_INT 1
40264: ST_TO_ADDR
// if ruDestroyedBuildings > 0 then
40265: LD_EXP 31
40269: PUSH
40270: LD_INT 0
40272: GREATER
40273: IFFALSE 40347
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40275: LD_ADDR_EXP 31
40279: PUSH
40280: LD_EXP 31
40284: PPUSH
40285: LD_INT 1
40287: PPUSH
40288: CALL_OW 3
40292: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40293: LD_ADDR_EXP 31
40297: PUSH
40298: LD_EXP 31
40302: PPUSH
40303: LD_INT 1
40305: PPUSH
40306: CALL_OW 3
40310: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40311: LD_ADDR_EXP 31
40315: PUSH
40316: LD_EXP 31
40320: PPUSH
40321: LD_INT 1
40323: PPUSH
40324: CALL_OW 3
40328: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
40329: LD_ADDR_EXP 31
40333: PUSH
40334: LD_EXP 31
40338: PPUSH
40339: LD_INT 1
40341: PPUSH
40342: CALL_OW 3
40346: ST_TO_ADDR
// end ; end ; end ;
40347: PPOPN 3
40349: END
// on UpgradeComplete ( building ) do var i ;
40350: LD_INT 0
40352: PPUSH
// begin if GetSide ( building ) = 3 then
40353: LD_VAR 0 1
40357: PPUSH
40358: CALL_OW 255
40362: PUSH
40363: LD_INT 3
40365: EQUAL
40366: IFFALSE 40547
// begin if GetBType ( building ) = b_factory then
40368: LD_VAR 0 1
40372: PPUSH
40373: CALL_OW 266
40377: PUSH
40378: LD_INT 3
40380: EQUAL
40381: IFFALSE 40448
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
40383: LD_ADDR_VAR 0 2
40387: PUSH
40388: LD_INT 22
40390: PUSH
40391: LD_INT 3
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 25
40400: PUSH
40401: LD_INT 3
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PPUSH
40412: CALL_OW 69
40416: PUSH
40417: FOR_IN
40418: IFFALSE 40436
// ComEnterUnit ( i , building ) ;
40420: LD_VAR 0 2
40424: PPUSH
40425: LD_VAR 0 1
40429: PPUSH
40430: CALL_OW 120
40434: GO 40417
40436: POP
40437: POP
// ruFab = building ;
40438: LD_ADDR_EXP 30
40442: PUSH
40443: LD_VAR 0 1
40447: ST_TO_ADDR
// end ; if GetBType ( building ) = b_lab_full then
40448: LD_VAR 0 1
40452: PPUSH
40453: CALL_OW 266
40457: PUSH
40458: LD_INT 8
40460: EQUAL
40461: IFFALSE 40518
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
40463: LD_ADDR_VAR 0 2
40467: PUSH
40468: LD_INT 22
40470: PUSH
40471: LD_INT 3
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 25
40480: PUSH
40481: LD_INT 4
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PPUSH
40492: CALL_OW 69
40496: PUSH
40497: FOR_IN
40498: IFFALSE 40516
// ComEnterUnit ( i , building ) ;
40500: LD_VAR 0 2
40504: PPUSH
40505: LD_VAR 0 1
40509: PPUSH
40510: CALL_OW 120
40514: GO 40497
40516: POP
40517: POP
// if GetBType ( building ) = b_warehouse then
40518: LD_VAR 0 1
40522: PPUSH
40523: CALL_OW 266
40527: PUSH
40528: LD_INT 1
40530: EQUAL
40531: IFFALSE 40547
// begin ComEnterUnit ( Borodin , building ) ;
40533: LD_EXP 24
40537: PPUSH
40538: LD_VAR 0 1
40542: PPUSH
40543: CALL_OW 120
// end ; end ; end ;
40547: PPOPN 2
40549: END
// on UnitGoesToRed ( unit ) do begin if GetType ( unit ) = unit_vehicle and GetControl ( unit ) = control_computer and varEvent1 = 0 then
40550: LD_VAR 0 1
40554: PPUSH
40555: CALL_OW 247
40559: PUSH
40560: LD_INT 2
40562: EQUAL
40563: PUSH
40564: LD_VAR 0 1
40568: PPUSH
40569: CALL_OW 263
40573: PUSH
40574: LD_INT 3
40576: EQUAL
40577: AND
40578: PUSH
40579: LD_EXP 41
40583: PUSH
40584: LD_INT 0
40586: EQUAL
40587: AND
40588: IFFALSE 40706
// begin varEvent1 = 1 ;
40590: LD_ADDR_EXP 41
40594: PUSH
40595: LD_INT 1
40597: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
40598: LD_VAR 0 1
40602: PPUSH
40603: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM ] , DC-Sol1-1 , DC-FSol1-1 ) ;
40607: LD_INT 22
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 21
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 2
40629: PUSH
40630: LD_INT 25
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 25
40642: PUSH
40643: LD_INT 2
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 25
40652: PUSH
40653: LD_INT 3
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 25
40662: PUSH
40663: LD_INT 4
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: LIST
40681: PPUSH
40682: CALL_OW 69
40686: PUSH
40687: LD_EXP 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: DIFF
40695: PPUSH
40696: LD_STRING DC-Sol1-1
40698: PPUSH
40699: LD_STRING DC-FSol1-1
40701: PPUSH
40702: CALL 7118 0 3
// end ; end ;
40706: PPOPN 1
40708: END
// on UnitDestroyed ( unit ) do var i ;
40709: LD_INT 0
40711: PPUSH
// begin if unit = Joan then
40712: LD_VAR 0 1
40716: PUSH
40717: LD_EXP 15
40721: EQUAL
40722: IFFALSE 40731
// DeleteCharacters ( Joan ) ;
40724: LD_STRING Joan
40726: PPUSH
40727: CALL_OW 40
// if GetSide ( unit ) = 3 then
40731: LD_VAR 0 1
40735: PPUSH
40736: CALL_OW 255
40740: PUSH
40741: LD_INT 3
40743: EQUAL
40744: IFFALSE 41514
// begin if GetType ( unit ) = unit_building then
40746: LD_VAR 0 1
40750: PPUSH
40751: CALL_OW 247
40755: PUSH
40756: LD_INT 3
40758: EQUAL
40759: IFFALSE 41451
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
40761: LD_VAR 0 1
40765: PPUSH
40766: CALL_OW 266
40770: PUSH
40771: LD_INT 31
40773: EQUAL
40774: PUSH
40775: LD_VAR 0 1
40779: PPUSH
40780: CALL_OW 266
40784: PUSH
40785: LD_INT 32
40787: EQUAL
40788: OR
40789: PUSH
40790: LD_VAR 0 1
40794: PPUSH
40795: CALL_OW 266
40799: PUSH
40800: LD_INT 36
40802: EQUAL
40803: OR
40804: PUSH
40805: LD_VAR 0 1
40809: PPUSH
40810: CALL_OW 266
40814: PUSH
40815: LD_INT 0
40817: EQUAL
40818: OR
40819: PUSH
40820: LD_VAR 0 1
40824: PPUSH
40825: CALL_OW 266
40829: PUSH
40830: LD_INT 24
40832: EQUAL
40833: OR
40834: PUSH
40835: LD_VAR 0 1
40839: PPUSH
40840: CALL_OW 266
40844: PUSH
40845: LD_INT 17
40847: EQUAL
40848: OR
40849: PUSH
40850: LD_VAR 0 1
40854: PPUSH
40855: CALL_OW 266
40859: PUSH
40860: LD_INT 25
40862: EQUAL
40863: OR
40864: PUSH
40865: LD_VAR 0 1
40869: PPUSH
40870: CALL_OW 266
40874: PUSH
40875: LD_INT 19
40877: EQUAL
40878: OR
40879: PUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 266
40889: PUSH
40890: LD_INT 20
40892: EQUAL
40893: OR
40894: PUSH
40895: LD_VAR 0 1
40899: PPUSH
40900: CALL_OW 266
40904: PUSH
40905: LD_INT 18
40907: EQUAL
40908: OR
40909: PUSH
40910: LD_VAR 0 1
40914: PPUSH
40915: CALL_OW 266
40919: PUSH
40920: LD_INT 21
40922: EQUAL
40923: OR
40924: PUSH
40925: LD_VAR 0 1
40929: PPUSH
40930: CALL_OW 266
40934: PUSH
40935: LD_INT 23
40937: EQUAL
40938: OR
40939: PUSH
40940: LD_VAR 0 1
40944: PPUSH
40945: CALL_OW 266
40949: PUSH
40950: LD_INT 16
40952: EQUAL
40953: OR
40954: PUSH
40955: LD_VAR 0 1
40959: PPUSH
40960: CALL_OW 266
40964: PUSH
40965: LD_INT 6
40967: EQUAL
40968: OR
40969: PUSH
40970: LD_VAR 0 1
40974: PPUSH
40975: CALL_OW 266
40979: PUSH
40980: LD_INT 29
40982: EQUAL
40983: OR
40984: PUSH
40985: LD_VAR 0 1
40989: PPUSH
40990: CALL_OW 266
40994: PUSH
40995: LD_INT 26
40997: EQUAL
40998: OR
40999: PUSH
41000: LD_VAR 0 1
41004: PPUSH
41005: CALL_OW 266
41009: PUSH
41010: LD_INT 30
41012: EQUAL
41013: OR
41014: PUSH
41015: LD_VAR 0 1
41019: PPUSH
41020: CALL_OW 266
41024: PUSH
41025: LD_INT 28
41027: EQUAL
41028: OR
41029: PUSH
41030: LD_VAR 0 1
41034: PPUSH
41035: CALL_OW 266
41039: PUSH
41040: LD_INT 27
41042: EQUAL
41043: OR
41044: PUSH
41045: LD_VAR 0 1
41049: PPUSH
41050: CALL_OW 266
41054: PUSH
41055: LD_INT 33
41057: EQUAL
41058: OR
41059: PUSH
41060: LD_VAR 0 1
41064: PPUSH
41065: CALL_OW 266
41069: PUSH
41070: LD_INT 2
41072: EQUAL
41073: OR
41074: PUSH
41075: LD_VAR 0 1
41079: PPUSH
41080: CALL_OW 266
41084: PUSH
41085: LD_INT 4
41087: EQUAL
41088: OR
41089: IFFALSE 41175
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
41091: LD_ADDR_EXP 31
41095: PUSH
41096: LD_EXP 31
41100: PUSH
41101: LD_VAR 0 1
41105: PPUSH
41106: CALL_OW 266
41110: ADD
41111: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41112: LD_ADDR_EXP 31
41116: PUSH
41117: LD_EXP 31
41121: PUSH
41122: LD_VAR 0 1
41126: PPUSH
41127: CALL_OW 250
41131: ADD
41132: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41133: LD_ADDR_EXP 31
41137: PUSH
41138: LD_EXP 31
41142: PUSH
41143: LD_VAR 0 1
41147: PPUSH
41148: CALL_OW 251
41152: ADD
41153: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41154: LD_ADDR_EXP 31
41158: PUSH
41159: LD_EXP 31
41163: PUSH
41164: LD_VAR 0 1
41168: PPUSH
41169: CALL_OW 254
41173: ADD
41174: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
41175: LD_VAR 0 1
41179: PPUSH
41180: CALL_OW 266
41184: PUSH
41185: LD_INT 1
41187: EQUAL
41188: IFFALSE 41267
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
41190: LD_ADDR_EXP 31
41194: PUSH
41195: LD_EXP 31
41199: PUSH
41200: LD_INT 0
41202: ADD
41203: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41204: LD_ADDR_EXP 31
41208: PUSH
41209: LD_EXP 31
41213: PUSH
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 250
41223: ADD
41224: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41225: LD_ADDR_EXP 31
41229: PUSH
41230: LD_EXP 31
41234: PUSH
41235: LD_VAR 0 1
41239: PPUSH
41240: CALL_OW 251
41244: ADD
41245: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41246: LD_ADDR_EXP 31
41250: PUSH
41251: LD_EXP 31
41255: PUSH
41256: LD_VAR 0 1
41260: PPUSH
41261: CALL_OW 254
41265: ADD
41266: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
41267: LD_VAR 0 1
41271: PPUSH
41272: CALL_OW 266
41276: PUSH
41277: LD_INT 3
41279: EQUAL
41280: IFFALSE 41359
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
41282: LD_ADDR_EXP 31
41286: PUSH
41287: LD_EXP 31
41291: PUSH
41292: LD_INT 2
41294: ADD
41295: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41296: LD_ADDR_EXP 31
41300: PUSH
41301: LD_EXP 31
41305: PUSH
41306: LD_VAR 0 1
41310: PPUSH
41311: CALL_OW 250
41315: ADD
41316: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41317: LD_ADDR_EXP 31
41321: PUSH
41322: LD_EXP 31
41326: PUSH
41327: LD_VAR 0 1
41331: PPUSH
41332: CALL_OW 251
41336: ADD
41337: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41338: LD_ADDR_EXP 31
41342: PUSH
41343: LD_EXP 31
41347: PUSH
41348: LD_VAR 0 1
41352: PPUSH
41353: CALL_OW 254
41357: ADD
41358: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
41359: LD_VAR 0 1
41363: PPUSH
41364: CALL_OW 266
41368: PUSH
41369: LD_INT 5
41371: EQUAL
41372: IFFALSE 41451
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
41374: LD_ADDR_EXP 31
41378: PUSH
41379: LD_EXP 31
41383: PUSH
41384: LD_INT 4
41386: ADD
41387: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
41388: LD_ADDR_EXP 31
41392: PUSH
41393: LD_EXP 31
41397: PUSH
41398: LD_VAR 0 1
41402: PPUSH
41403: CALL_OW 250
41407: ADD
41408: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
41409: LD_ADDR_EXP 31
41413: PUSH
41414: LD_EXP 31
41418: PUSH
41419: LD_VAR 0 1
41423: PPUSH
41424: CALL_OW 251
41428: ADD
41429: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
41430: LD_ADDR_EXP 31
41434: PUSH
41435: LD_EXP 31
41439: PUSH
41440: LD_VAR 0 1
41444: PPUSH
41445: CALL_OW 254
41449: ADD
41450: ST_TO_ADDR
// end ; end ; if GetType ( unit ) = unit_human then
41451: LD_VAR 0 1
41455: PPUSH
41456: CALL_OW 247
41460: PUSH
41461: LD_INT 1
41463: EQUAL
41464: IFFALSE 41514
// begin for i in defenders_list do
41466: LD_ADDR_VAR 0 2
41470: PUSH
41471: LD_EXP 32
41475: PUSH
41476: FOR_IN
41477: IFFALSE 41512
// if i = unit then
41479: LD_VAR 0 2
41483: PUSH
41484: LD_VAR 0 1
41488: EQUAL
41489: IFFALSE 41510
// defenders_list = defenders_list diff [ unit ] ;
41491: LD_ADDR_EXP 32
41495: PUSH
41496: LD_EXP 32
41500: PUSH
41501: LD_VAR 0 1
41505: PUSH
41506: EMPTY
41507: LIST
41508: DIFF
41509: ST_TO_ADDR
41510: GO 41476
41512: POP
41513: POP
// end ; end ; end ; end_of_file
41514: PPOPN 2
41516: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
41517: GO 41519
41519: DISABLE
41520: LD_INT 0
41522: PPUSH
// begin enemyWayX = [ ] ;
41523: LD_ADDR_EXP 46
41527: PUSH
41528: EMPTY
41529: ST_TO_ADDR
// enemyWayY = [ ] ;
41530: LD_ADDR_EXP 47
41534: PUSH
41535: EMPTY
41536: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
41537: LD_ADDR_VAR 0 1
41541: PUSH
41542: LD_INT 1
41544: PPUSH
41545: LD_INT 3
41547: PPUSH
41548: CALL_OW 12
41552: ST_TO_ADDR
// if rnd = 1 then
41553: LD_VAR 0 1
41557: PUSH
41558: LD_INT 1
41560: EQUAL
41561: IFFALSE 41601
// begin enemyWayX = [ 73 , 46 , 29 ] ;
41563: LD_ADDR_EXP 46
41567: PUSH
41568: LD_INT 73
41570: PUSH
41571: LD_INT 46
41573: PUSH
41574: LD_INT 29
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: LIST
41581: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
41582: LD_ADDR_EXP 47
41586: PUSH
41587: LD_INT 71
41589: PUSH
41590: LD_INT 43
41592: PUSH
41593: LD_INT 29
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: ST_TO_ADDR
// end ; if rnd = 2 then
41601: LD_VAR 0 1
41605: PUSH
41606: LD_INT 2
41608: EQUAL
41609: IFFALSE 41633
// begin enemyWayX = [ 64 ] ;
41611: LD_ADDR_EXP 46
41615: PUSH
41616: LD_INT 64
41618: PUSH
41619: EMPTY
41620: LIST
41621: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
41622: LD_ADDR_EXP 47
41626: PUSH
41627: LD_INT 43
41629: PUSH
41630: EMPTY
41631: LIST
41632: ST_TO_ADDR
// end ; if rnd = 3 then
41633: LD_VAR 0 1
41637: PUSH
41638: LD_INT 3
41640: EQUAL
41641: IFFALSE 41665
// begin enemyWayX = [ 80 ] ;
41643: LD_ADDR_EXP 46
41647: PUSH
41648: LD_INT 80
41650: PUSH
41651: EMPTY
41652: LIST
41653: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
41654: LD_ADDR_EXP 47
41658: PUSH
41659: LD_INT 28
41661: PUSH
41662: EMPTY
41663: LIST
41664: ST_TO_ADDR
// end ; enable ;
41665: ENABLE
// end ;
41666: PPOPN 1
41668: END
// every 0 0$1 do
41669: GO 41671
41671: DISABLE
// begin enable ;
41672: ENABLE
// if escapeAvalaible = 0 then
41673: LD_EXP 36
41677: PUSH
41678: LD_INT 0
41680: EQUAL
41681: IFFALSE 41693
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
41683: LD_INT 3
41685: PPUSH
41686: LD_INT 6
41688: PPUSH
41689: CALL 8514 0 2
// if escapeAvalaible = 0 then
41693: LD_EXP 36
41697: PUSH
41698: LD_INT 0
41700: EQUAL
41701: IFFALSE 41713
// DefenseBase ( 1 , RussianBaseTerritory ) ;
41703: LD_INT 1
41705: PPUSH
41706: LD_INT 24
41708: PPUSH
41709: CALL 9174 0 2
// if russianAI = 1 then
41713: LD_EXP 27
41717: PUSH
41718: LD_INT 1
41720: EQUAL
41721: IFFALSE 41791
// begin ; HealUnitInBase ( 3 , RussianHealArea , RussianBase , ruLab ) ;
41723: LD_INT 3
41725: PPUSH
41726: LD_INT 7
41728: PPUSH
41729: LD_INT 6
41731: PPUSH
41732: LD_EXP 29
41736: PPUSH
41737: CALL 11612 0 4
// RepairAndRebuildBase ( 3 , ruDepot , RussianBase , ruDestroyedBuildings ) ;
41741: LD_INT 3
41743: PPUSH
41744: LD_EXP 28
41748: PPUSH
41749: LD_INT 6
41751: PPUSH
41752: LD_EXP 31
41756: PPUSH
41757: CALL 11206 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
41761: LD_INT 3
41763: PPUSH
41764: LD_INT 26
41766: PPUSH
41767: LD_EXP 46
41771: PPUSH
41772: LD_EXP 47
41776: PPUSH
41777: CALL 10074 0 4
// AttackNearBuildings ( 3 , 1 ) ;
41781: LD_INT 3
41783: PPUSH
41784: LD_INT 1
41786: PPUSH
41787: CALL 12156 0 2
// end ; if SikorskyArrive = 1 then
41791: LD_EXP 18
41795: PUSH
41796: LD_INT 1
41798: EQUAL
41799: IFFALSE 41817
// RepairVehicles ( 3 , SikorskyRepairArea , 53 , 59 ) ;
41801: LD_INT 3
41803: PPUSH
41804: LD_INT 10
41806: PPUSH
41807: LD_INT 53
41809: PPUSH
41810: LD_INT 59
41812: PPUSH
41813: CALL 9871 0 4
// end ;
41817: END
// every 0 0$1 trigger russianAI = 1 do var i ;
41818: LD_EXP 27
41822: PUSH
41823: LD_INT 1
41825: EQUAL
41826: IFFALSE 42102
41828: GO 41830
41830: DISABLE
41831: LD_INT 0
41833: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41834: LD_ADDR_VAR 0 1
41838: PUSH
41839: LD_INT 22
41841: PUSH
41842: LD_INT 3
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 21
41851: PUSH
41852: LD_INT 3
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 30
41861: PUSH
41862: LD_INT 32
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 3
41871: PUSH
41872: LD_INT 2
41874: PUSH
41875: LD_INT 35
41877: PUSH
41878: LD_INT 43
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 35
41887: PUSH
41888: LD_INT 44
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 35
41897: PUSH
41898: LD_INT 46
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: PPUSH
41921: CALL_OW 69
41925: PUSH
41926: FOR_IN
41927: IFFALSE 41966
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
41929: LD_VAR 0 1
41933: PPUSH
41934: LD_INT 43
41936: PUSH
41937: LD_INT 44
41939: PUSH
41940: LD_INT 46
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: PPUSH
41951: LD_INT 3
41953: PPUSH
41954: CALL_OW 12
41958: ARRAY
41959: PPUSH
41960: CALL_OW 431
41964: GO 41926
41966: POP
41967: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_turret ] , [ f_not , [ f_or , [ f_bweapon , 43 ] , [ f_bweapon , 44 ] , [ f_bweapon , 46 ] ] ] ] ) do
41968: LD_ADDR_VAR 0 1
41972: PUSH
41973: LD_INT 22
41975: PUSH
41976: LD_INT 3
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 21
41985: PUSH
41986: LD_INT 3
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 30
41995: PUSH
41996: LD_INT 33
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 3
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: LD_INT 35
42011: PUSH
42012: LD_INT 43
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 35
42021: PUSH
42022: LD_INT 44
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 35
42031: PUSH
42032: LD_INT 46
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: PPUSH
42055: CALL_OW 69
42059: PUSH
42060: FOR_IN
42061: IFFALSE 42100
// PlaceWeaponTurret ( i , [ 43 , 44 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
42063: LD_VAR 0 1
42067: PPUSH
42068: LD_INT 43
42070: PUSH
42071: LD_INT 44
42073: PUSH
42074: LD_INT 46
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: PPUSH
42085: LD_INT 3
42087: PPUSH
42088: CALL_OW 12
42092: ARRAY
42093: PPUSH
42094: CALL_OW 431
42098: GO 42060
42100: POP
42101: POP
// end ;
42102: PPOPN 1
42104: END
// every 1 trigger not IsInUnit ( Borodin ) and IsOk ( ruDepot ) and GetSide ( ruDepot ) = 3 do
42105: LD_EXP 24
42109: PPUSH
42110: CALL_OW 310
42114: NOT
42115: PUSH
42116: LD_EXP 28
42120: PPUSH
42121: CALL_OW 302
42125: AND
42126: PUSH
42127: LD_EXP 28
42131: PPUSH
42132: CALL_OW 255
42136: PUSH
42137: LD_INT 3
42139: EQUAL
42140: AND
42141: IFFALSE 42161
42143: GO 42145
42145: DISABLE
// begin enable ;
42146: ENABLE
// ComEnterUnit ( Borodin , ruDepot ) ;
42147: LD_EXP 24
42151: PPUSH
42152: LD_EXP 28
42156: PPUSH
42157: CALL_OW 120
// end ;
42161: END
// every 0 0$1 trigger SikorskyAI = 1 do
42162: LD_EXP 20
42166: PUSH
42167: LD_INT 1
42169: EQUAL
42170: IFFALSE 42205
42172: GO 42174
42174: DISABLE
// begin enable ;
42175: ENABLE
// RepairVehicles ( 4 , SikorskyRepairArea , 93 , 93 ) ;
42176: LD_INT 4
42178: PPUSH
42179: LD_INT 10
42181: PPUSH
42182: LD_INT 93
42184: PPUSH
42185: LD_INT 93
42187: PPUSH
42188: CALL 9871 0 4
// SikorskyHealUnits ( 4 , SikorskyHealArea , 3 ) ;
42192: LD_INT 4
42194: PPUSH
42195: LD_INT 11
42197: PPUSH
42198: LD_INT 3
42200: PPUSH
42201: CALL 16368 0 3
// end ;
42205: END
// every 0 0$1 trigger SikorskyAI = 1 do
42206: LD_EXP 20
42210: PUSH
42211: LD_INT 1
42213: EQUAL
42214: IFFALSE 42226
42216: GO 42218
42218: DISABLE
// SikorskyVehiclesAttack ( 4 ) ;
42219: LD_INT 4
42221: PPUSH
42222: CALL 10878 0 1
42226: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
42227: LD_EXP 27
42231: PUSH
42232: LD_INT 1
42234: EQUAL
42235: PUSH
42236: LD_EXP 30
42240: PPUSH
42241: CALL_OW 302
42245: AND
42246: PUSH
42247: LD_EXP 30
42251: PPUSH
42252: CALL_OW 255
42256: PUSH
42257: LD_INT 3
42259: EQUAL
42260: AND
42261: PUSH
42262: LD_INT 22
42264: PUSH
42265: LD_INT 3
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 21
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 33
42284: PUSH
42285: LD_INT 3
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: LIST
42296: PPUSH
42297: CALL_OW 69
42301: PUSH
42302: LD_INT 0
42304: EQUAL
42305: AND
42306: IFFALSE 42540
42308: GO 42310
42310: DISABLE
// begin enable ;
42311: ENABLE
// if Difficulty = 1 then
42312: LD_OWVAR 67
42316: PUSH
42317: LD_INT 1
42319: EQUAL
42320: IFFALSE 42388
// BuildingVehicle ( 3 , ruFab , rand ( 5 , 8 ) , [ 43 , 43 , 43 , 43 , 44 , 44 , 44 , 46 ] , 1 , 3 , 24 ) ;
42322: LD_INT 3
42324: PPUSH
42325: LD_EXP 30
42329: PPUSH
42330: LD_INT 5
42332: PPUSH
42333: LD_INT 8
42335: PPUSH
42336: CALL_OW 12
42340: PPUSH
42341: LD_INT 43
42343: PUSH
42344: LD_INT 43
42346: PUSH
42347: LD_INT 43
42349: PUSH
42350: LD_INT 43
42352: PUSH
42353: LD_INT 44
42355: PUSH
42356: LD_INT 44
42358: PUSH
42359: LD_INT 44
42361: PUSH
42362: LD_INT 46
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: PPUSH
42375: LD_INT 1
42377: PPUSH
42378: LD_INT 3
42380: PPUSH
42381: LD_INT 24
42383: PPUSH
42384: CALL 9717 0 7
// if Difficulty = 2 then
42388: LD_OWVAR 67
42392: PUSH
42393: LD_INT 2
42395: EQUAL
42396: IFFALSE 42464
// BuildingVehicle ( 3 , ruFab , rand ( 6 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 44 , 46 , 46 ] , 1 , 3 , 24 ) ;
42398: LD_INT 3
42400: PPUSH
42401: LD_EXP 30
42405: PPUSH
42406: LD_INT 6
42408: PPUSH
42409: LD_INT 8
42411: PPUSH
42412: CALL_OW 12
42416: PPUSH
42417: LD_INT 43
42419: PUSH
42420: LD_INT 43
42422: PUSH
42423: LD_INT 44
42425: PUSH
42426: LD_INT 44
42428: PUSH
42429: LD_INT 44
42431: PUSH
42432: LD_INT 44
42434: PUSH
42435: LD_INT 46
42437: PUSH
42438: LD_INT 46
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: PPUSH
42451: LD_INT 1
42453: PPUSH
42454: LD_INT 3
42456: PPUSH
42457: LD_INT 24
42459: PPUSH
42460: CALL 9717 0 7
// if Difficulty = 3 then
42464: LD_OWVAR 67
42468: PUSH
42469: LD_INT 3
42471: EQUAL
42472: IFFALSE 42540
// BuildingVehicle ( 3 , ruFab , rand ( 7 , 8 ) , [ 43 , 43 , 44 , 44 , 44 , 46 , 46 , 46 ] , 1 , 3 , 24 ) ;
42474: LD_INT 3
42476: PPUSH
42477: LD_EXP 30
42481: PPUSH
42482: LD_INT 7
42484: PPUSH
42485: LD_INT 8
42487: PPUSH
42488: CALL_OW 12
42492: PPUSH
42493: LD_INT 43
42495: PUSH
42496: LD_INT 43
42498: PUSH
42499: LD_INT 44
42501: PUSH
42502: LD_INT 44
42504: PUSH
42505: LD_INT 44
42507: PUSH
42508: LD_INT 46
42510: PUSH
42511: LD_INT 46
42513: PUSH
42514: LD_INT 46
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: PPUSH
42527: LD_INT 1
42529: PPUSH
42530: LD_INT 3
42532: PPUSH
42533: LD_INT 24
42535: PPUSH
42536: CALL 9717 0 7
// end ;
42540: END
// every 0 0$1 trigger startCutscene = 1 do var i ;
42541: LD_EXP 38
42545: PUSH
42546: LD_INT 1
42548: EQUAL
42549: IFFALSE 42631
42551: GO 42553
42553: DISABLE
42554: LD_INT 0
42556: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 650 ] ] ] ) do
42557: LD_ADDR_VAR 0 1
42561: PUSH
42562: LD_INT 22
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 21
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 3
42584: PUSH
42585: LD_INT 24
42587: PUSH
42588: LD_INT 650
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: LIST
42603: PPUSH
42604: CALL_OW 69
42608: PUSH
42609: FOR_IN
42610: IFFALSE 42629
// ComMoveXY ( i , 51 , 12 ) ;
42612: LD_VAR 0 1
42616: PPUSH
42617: LD_INT 51
42619: PPUSH
42620: LD_INT 12
42622: PPUSH
42623: CALL_OW 111
42627: GO 42609
42629: POP
42630: POP
// end ; end_of_file
42631: PPOPN 1
42633: END
// every 1 1$20 trigger firstAttack = 1 do
42634: LD_EXP 33
42638: PUSH
42639: LD_INT 1
42641: EQUAL
42642: IFFALSE 42748
42644: GO 42646
42646: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42647: LD_INT 6
42649: PPUSH
42650: LD_INT 3
42652: PPUSH
42653: LD_INT 5
42655: PPUSH
42656: LD_INT 6
42658: PPUSH
42659: CALL_OW 12
42663: PUSH
42664: LD_INT 5
42666: PPUSH
42667: LD_INT 6
42669: PPUSH
42670: CALL_OW 12
42674: PUSH
42675: LD_INT 5
42677: PPUSH
42678: LD_INT 6
42680: PPUSH
42681: CALL_OW 12
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: PUSH
42691: LD_OWVAR 67
42695: ARRAY
42696: PPUSH
42697: LD_INT 0
42699: PPUSH
42700: LD_INT 0
42702: PPUSH
42703: LD_INT 0
42705: PPUSH
42706: LD_INT 0
42708: PPUSH
42709: LD_EXP 25
42713: PPUSH
42714: LD_EXP 26
42718: PPUSH
42719: CALL_OW 12
42723: PPUSH
42724: LD_INT 16
42726: PPUSH
42727: LD_INT 7
42729: PPUSH
42730: LD_INT 1
42732: PPUSH
42733: LD_INT 1
42735: PPUSH
42736: LD_INT 3
42738: PPUSH
42739: CALL_OW 12
42743: PPUSH
42744: CALL 12386 0 12
42748: END
// every 1 1$40 trigger firstAttack = 1 do
42749: LD_EXP 33
42753: PUSH
42754: LD_INT 1
42756: EQUAL
42757: IFFALSE 42849
42759: GO 42761
42761: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , 5 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
42762: LD_INT 16
42764: PPUSH
42765: LD_INT 6
42767: PPUSH
42768: LD_INT 3
42770: PPUSH
42771: LD_INT 4
42773: PPUSH
42774: CALL_OW 12
42778: PUSH
42779: LD_INT 4
42781: PPUSH
42782: LD_INT 5
42784: PPUSH
42785: CALL_OW 12
42789: PUSH
42790: LD_INT 5
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: LIST
42797: PUSH
42798: LD_OWVAR 67
42802: ARRAY
42803: PPUSH
42804: LD_EXP 25
42808: PPUSH
42809: LD_EXP 26
42813: PPUSH
42814: CALL_OW 12
42818: PPUSH
42819: LD_INT 3
42821: PPUSH
42822: LD_INT 1
42824: PPUSH
42825: LD_INT 3
42827: PPUSH
42828: LD_INT 44
42830: PUSH
42831: LD_INT 46
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PPUSH
42838: EMPTY
42839: PPUSH
42840: EMPTY
42841: PPUSH
42842: LD_INT 1
42844: PPUSH
42845: CALL 14679 0 11
42849: END
// every 6 6$40 trigger firstAttack = 1 and JMMArrive = 0 do
42850: LD_EXP 33
42854: PUSH
42855: LD_INT 1
42857: EQUAL
42858: PUSH
42859: LD_EXP 39
42863: PUSH
42864: LD_INT 0
42866: EQUAL
42867: AND
42868: IFFALSE 42974
42870: GO 42872
42872: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 6 ) , rand ( 5 , 6 ) , rand ( 5 , 6 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
42873: LD_INT 6
42875: PPUSH
42876: LD_INT 3
42878: PPUSH
42879: LD_INT 5
42881: PPUSH
42882: LD_INT 6
42884: PPUSH
42885: CALL_OW 12
42889: PUSH
42890: LD_INT 5
42892: PPUSH
42893: LD_INT 6
42895: PPUSH
42896: CALL_OW 12
42900: PUSH
42901: LD_INT 5
42903: PPUSH
42904: LD_INT 6
42906: PPUSH
42907: CALL_OW 12
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: LIST
42916: PUSH
42917: LD_OWVAR 67
42921: ARRAY
42922: PPUSH
42923: LD_INT 0
42925: PPUSH
42926: LD_INT 0
42928: PPUSH
42929: LD_INT 0
42931: PPUSH
42932: LD_INT 0
42934: PPUSH
42935: LD_EXP 25
42939: PPUSH
42940: LD_EXP 26
42944: PPUSH
42945: CALL_OW 12
42949: PPUSH
42950: LD_INT 16
42952: PPUSH
42953: LD_INT 7
42955: PPUSH
42956: LD_INT 1
42958: PPUSH
42959: LD_INT 1
42961: PPUSH
42962: LD_INT 3
42964: PPUSH
42965: CALL_OW 12
42969: PPUSH
42970: CALL 12386 0 12
42974: END
// every 6 6$50 trigger firstAttack = 1 and JMMArrive = 0 do
42975: LD_EXP 33
42979: PUSH
42980: LD_INT 1
42982: EQUAL
42983: PUSH
42984: LD_EXP 39
42988: PUSH
42989: LD_INT 0
42991: EQUAL
42992: AND
42993: IFFALSE 43089
42995: GO 42997
42997: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
42998: LD_INT 16
43000: PPUSH
43001: LD_INT 6
43003: PPUSH
43004: LD_INT 5
43006: PPUSH
43007: LD_INT 6
43009: PPUSH
43010: CALL_OW 12
43014: PUSH
43015: LD_INT 6
43017: PPUSH
43018: LD_INT 7
43020: PPUSH
43021: CALL_OW 12
43025: PUSH
43026: LD_INT 7
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: PUSH
43034: LD_OWVAR 67
43038: ARRAY
43039: PPUSH
43040: LD_EXP 25
43044: PPUSH
43045: LD_EXP 26
43049: PPUSH
43050: CALL_OW 12
43054: PPUSH
43055: LD_INT 3
43057: PPUSH
43058: LD_INT 1
43060: PPUSH
43061: LD_INT 3
43063: PPUSH
43064: LD_INT 43
43066: PUSH
43067: LD_INT 44
43069: PUSH
43070: LD_INT 46
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: LIST
43077: PPUSH
43078: EMPTY
43079: PPUSH
43080: EMPTY
43081: PPUSH
43082: LD_INT 1
43084: PPUSH
43085: CALL 14679 0 11
43089: END
// every 9 9$50 trigger firstAttack = 1 and JMMArrive = 0 do
43090: LD_EXP 33
43094: PUSH
43095: LD_INT 1
43097: EQUAL
43098: PUSH
43099: LD_EXP 39
43103: PUSH
43104: LD_INT 0
43106: EQUAL
43107: AND
43108: IFFALSE 43204
43110: GO 43112
43112: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 6 ) , rand ( 6 , 7 ) , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43113: LD_INT 16
43115: PPUSH
43116: LD_INT 6
43118: PPUSH
43119: LD_INT 5
43121: PPUSH
43122: LD_INT 6
43124: PPUSH
43125: CALL_OW 12
43129: PUSH
43130: LD_INT 6
43132: PPUSH
43133: LD_INT 7
43135: PPUSH
43136: CALL_OW 12
43140: PUSH
43141: LD_INT 7
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: LIST
43148: PUSH
43149: LD_OWVAR 67
43153: ARRAY
43154: PPUSH
43155: LD_EXP 25
43159: PPUSH
43160: LD_EXP 26
43164: PPUSH
43165: CALL_OW 12
43169: PPUSH
43170: LD_INT 3
43172: PPUSH
43173: LD_INT 1
43175: PPUSH
43176: LD_INT 3
43178: PPUSH
43179: LD_INT 43
43181: PUSH
43182: LD_INT 44
43184: PUSH
43185: LD_INT 46
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: PPUSH
43193: EMPTY
43194: PPUSH
43195: EMPTY
43196: PPUSH
43197: LD_INT 1
43199: PPUSH
43200: CALL 14679 0 11
43204: END
// every 14 14$00 trigger firstAttack = 1 and JMMArrive = 0 do
43205: LD_EXP 33
43209: PUSH
43210: LD_INT 1
43212: EQUAL
43213: PUSH
43214: LD_EXP 39
43218: PUSH
43219: LD_INT 0
43221: EQUAL
43222: AND
43223: IFFALSE 43299
43225: GO 43227
43227: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ 5 , 6 , 7 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43228: LD_INT 16
43230: PPUSH
43231: LD_INT 6
43233: PPUSH
43234: LD_INT 5
43236: PUSH
43237: LD_INT 6
43239: PUSH
43240: LD_INT 7
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: PUSH
43248: LD_OWVAR 67
43252: ARRAY
43253: PPUSH
43254: LD_EXP 25
43258: PPUSH
43259: LD_EXP 26
43263: PPUSH
43264: CALL_OW 12
43268: PPUSH
43269: LD_INT 3
43271: PPUSH
43272: LD_INT 1
43274: PPUSH
43275: LD_INT 3
43277: PPUSH
43278: LD_INT 44
43280: PUSH
43281: LD_INT 46
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PPUSH
43288: EMPTY
43289: PPUSH
43290: EMPTY
43291: PPUSH
43292: LD_INT 1
43294: PPUSH
43295: CALL 14679 0 11
43299: END
// every 1 1$00 trigger secondAttack = 1 do
43300: LD_EXP 34
43304: PUSH
43305: LD_INT 1
43307: EQUAL
43308: IFFALSE 43390
43310: GO 43312
43312: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43313: LD_INT 6
43315: PPUSH
43316: LD_INT 3
43318: PPUSH
43319: LD_INT 3
43321: PUSH
43322: LD_INT 4
43324: PUSH
43325: LD_INT 5
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: LIST
43332: PUSH
43333: LD_OWVAR 67
43337: ARRAY
43338: PPUSH
43339: LD_INT 0
43341: PPUSH
43342: LD_INT 0
43344: PPUSH
43345: LD_INT 0
43347: PPUSH
43348: LD_INT 0
43350: PPUSH
43351: LD_EXP 25
43355: PPUSH
43356: LD_EXP 26
43360: PPUSH
43361: CALL_OW 12
43365: PPUSH
43366: LD_INT 16
43368: PPUSH
43369: LD_INT 7
43371: PPUSH
43372: LD_INT 1
43374: PPUSH
43375: LD_INT 1
43377: PPUSH
43378: LD_INT 3
43380: PPUSH
43381: CALL_OW 12
43385: PPUSH
43386: CALL 12386 0 12
43390: END
// every 1 1$00 trigger secondAttack = 1 do
43391: LD_EXP 34
43395: PUSH
43396: LD_INT 1
43398: EQUAL
43399: IFFALSE 43503
43401: GO 43403
43403: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 43 , 44 , 46 ] , [ ] , [ ] , 1 ) ;
43404: LD_INT 16
43406: PPUSH
43407: LD_INT 6
43409: PPUSH
43410: LD_INT 5
43412: PPUSH
43413: LD_INT 8
43415: PPUSH
43416: CALL_OW 12
43420: PUSH
43421: LD_INT 6
43423: PPUSH
43424: LD_INT 9
43426: PPUSH
43427: CALL_OW 12
43431: PUSH
43432: LD_INT 7
43434: PPUSH
43435: LD_INT 9
43437: PPUSH
43438: CALL_OW 12
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: LIST
43447: PUSH
43448: LD_OWVAR 67
43452: ARRAY
43453: PPUSH
43454: LD_EXP 25
43458: PPUSH
43459: LD_EXP 26
43463: PPUSH
43464: CALL_OW 12
43468: PPUSH
43469: LD_INT 3
43471: PPUSH
43472: LD_INT 1
43474: PPUSH
43475: LD_INT 3
43477: PPUSH
43478: LD_INT 43
43480: PUSH
43481: LD_INT 44
43483: PUSH
43484: LD_INT 46
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: LIST
43491: PPUSH
43492: EMPTY
43493: PPUSH
43494: EMPTY
43495: PPUSH
43496: LD_INT 1
43498: PPUSH
43499: CALL 14679 0 11
43503: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43504: LD_EXP 18
43508: PUSH
43509: LD_INT 0
43511: EQUAL
43512: IFFALSE 43594
43514: GO 43516
43516: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43517: LD_INT 6
43519: PPUSH
43520: LD_INT 3
43522: PPUSH
43523: LD_INT 3
43525: PUSH
43526: LD_INT 4
43528: PUSH
43529: LD_INT 5
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: LIST
43536: PUSH
43537: LD_OWVAR 67
43541: ARRAY
43542: PPUSH
43543: LD_INT 0
43545: PPUSH
43546: LD_INT 0
43548: PPUSH
43549: LD_INT 0
43551: PPUSH
43552: LD_INT 0
43554: PPUSH
43555: LD_EXP 25
43559: PPUSH
43560: LD_EXP 26
43564: PPUSH
43565: CALL_OW 12
43569: PPUSH
43570: LD_INT 16
43572: PPUSH
43573: LD_INT 7
43575: PPUSH
43576: LD_INT 1
43578: PPUSH
43579: LD_INT 1
43581: PPUSH
43582: LD_INT 3
43584: PPUSH
43585: CALL_OW 12
43589: PPUSH
43590: CALL 12386 0 12
43594: END
// every 22 22$0 trigger SikorskyArrive = 0 do
43595: LD_EXP 18
43599: PUSH
43600: LD_INT 0
43602: EQUAL
43603: IFFALSE 43703
43605: GO 43607
43607: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43608: LD_INT 16
43610: PPUSH
43611: LD_INT 6
43613: PPUSH
43614: LD_INT 5
43616: PPUSH
43617: LD_INT 8
43619: PPUSH
43620: CALL_OW 12
43624: PUSH
43625: LD_INT 6
43627: PPUSH
43628: LD_INT 9
43630: PPUSH
43631: CALL_OW 12
43635: PUSH
43636: LD_INT 7
43638: PPUSH
43639: LD_INT 9
43641: PPUSH
43642: CALL_OW 12
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: LIST
43651: PUSH
43652: LD_OWVAR 67
43656: ARRAY
43657: PPUSH
43658: LD_EXP 25
43662: PPUSH
43663: LD_EXP 26
43667: PPUSH
43668: CALL_OW 12
43672: PPUSH
43673: LD_INT 3
43675: PPUSH
43676: LD_INT 1
43678: PPUSH
43679: LD_INT 3
43681: PPUSH
43682: LD_INT 44
43684: PUSH
43685: LD_INT 46
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PPUSH
43692: EMPTY
43693: PPUSH
43694: EMPTY
43695: PPUSH
43696: LD_INT 1
43698: PPUSH
43699: CALL 14679 0 11
43703: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43704: LD_EXP 18
43708: PUSH
43709: LD_INT 0
43711: EQUAL
43712: IFFALSE 43794
43714: GO 43716
43716: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43717: LD_INT 6
43719: PPUSH
43720: LD_INT 3
43722: PPUSH
43723: LD_INT 3
43725: PUSH
43726: LD_INT 4
43728: PUSH
43729: LD_INT 5
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: LIST
43736: PUSH
43737: LD_OWVAR 67
43741: ARRAY
43742: PPUSH
43743: LD_INT 0
43745: PPUSH
43746: LD_INT 0
43748: PPUSH
43749: LD_INT 0
43751: PPUSH
43752: LD_INT 0
43754: PPUSH
43755: LD_EXP 25
43759: PPUSH
43760: LD_EXP 26
43764: PPUSH
43765: CALL_OW 12
43769: PPUSH
43770: LD_INT 16
43772: PPUSH
43773: LD_INT 7
43775: PPUSH
43776: LD_INT 1
43778: PPUSH
43779: LD_INT 1
43781: PPUSH
43782: LD_INT 3
43784: PPUSH
43785: CALL_OW 12
43789: PPUSH
43790: CALL 12386 0 12
43794: END
// every 27 27$0 trigger SikorskyArrive = 0 do
43795: LD_EXP 18
43799: PUSH
43800: LD_INT 0
43802: EQUAL
43803: IFFALSE 43903
43805: GO 43807
43807: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ;
43808: LD_INT 16
43810: PPUSH
43811: LD_INT 6
43813: PPUSH
43814: LD_INT 5
43816: PPUSH
43817: LD_INT 8
43819: PPUSH
43820: CALL_OW 12
43824: PUSH
43825: LD_INT 6
43827: PPUSH
43828: LD_INT 9
43830: PPUSH
43831: CALL_OW 12
43835: PUSH
43836: LD_INT 7
43838: PPUSH
43839: LD_INT 9
43841: PPUSH
43842: CALL_OW 12
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: LIST
43851: PUSH
43852: LD_OWVAR 67
43856: ARRAY
43857: PPUSH
43858: LD_EXP 25
43862: PPUSH
43863: LD_EXP 26
43867: PPUSH
43868: CALL_OW 12
43872: PPUSH
43873: LD_INT 3
43875: PPUSH
43876: LD_INT 1
43878: PPUSH
43879: LD_INT 3
43881: PPUSH
43882: LD_INT 44
43884: PUSH
43885: LD_INT 46
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PPUSH
43892: EMPTY
43893: PPUSH
43894: EMPTY
43895: PPUSH
43896: LD_INT 1
43898: PPUSH
43899: CALL 14679 0 11
43903: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43904: LD_EXP 18
43908: PUSH
43909: LD_INT 0
43911: EQUAL
43912: IFFALSE 43994
43914: GO 43916
43916: DISABLE
// RespawnAttackInfantry ( 6 , 3 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea , 1 , rand ( 1 , 3 ) ) ;
43917: LD_INT 6
43919: PPUSH
43920: LD_INT 3
43922: PPUSH
43923: LD_INT 3
43925: PUSH
43926: LD_INT 4
43928: PUSH
43929: LD_INT 5
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: PUSH
43937: LD_OWVAR 67
43941: ARRAY
43942: PPUSH
43943: LD_INT 0
43945: PPUSH
43946: LD_INT 0
43948: PPUSH
43949: LD_INT 0
43951: PPUSH
43952: LD_INT 0
43954: PPUSH
43955: LD_EXP 25
43959: PPUSH
43960: LD_EXP 26
43964: PPUSH
43965: CALL_OW 12
43969: PPUSH
43970: LD_INT 16
43972: PPUSH
43973: LD_INT 7
43975: PPUSH
43976: LD_INT 1
43978: PPUSH
43979: LD_INT 1
43981: PPUSH
43982: LD_INT 3
43984: PPUSH
43985: CALL_OW 12
43989: PPUSH
43990: CALL 12386 0 12
43994: END
// every 35 35$0 trigger SikorskyArrive = 0 do
43995: LD_EXP 18
43999: PUSH
44000: LD_INT 0
44002: EQUAL
44003: IFFALSE 44103
44005: GO 44007
44007: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , [ rand ( 5 , 8 ) , rand ( 6 , 9 ) , rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , 3 , [ 44 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
44008: LD_INT 16
44010: PPUSH
44011: LD_INT 6
44013: PPUSH
44014: LD_INT 5
44016: PPUSH
44017: LD_INT 8
44019: PPUSH
44020: CALL_OW 12
44024: PUSH
44025: LD_INT 6
44027: PPUSH
44028: LD_INT 9
44030: PPUSH
44031: CALL_OW 12
44035: PUSH
44036: LD_INT 7
44038: PPUSH
44039: LD_INT 9
44041: PPUSH
44042: CALL_OW 12
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: LIST
44051: PUSH
44052: LD_OWVAR 67
44056: ARRAY
44057: PPUSH
44058: LD_EXP 25
44062: PPUSH
44063: LD_EXP 26
44067: PPUSH
44068: CALL_OW 12
44072: PPUSH
44073: LD_INT 3
44075: PPUSH
44076: LD_INT 1
44078: PPUSH
44079: LD_INT 3
44081: PPUSH
44082: LD_INT 44
44084: PUSH
44085: LD_INT 46
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PPUSH
44092: EMPTY
44093: PPUSH
44094: EMPTY
44095: PPUSH
44096: LD_INT 1
44098: PPUSH
44099: CALL 14679 0 11
44103: END
// every 0 0$1 trigger timerStatus = 1 do
44104: LD_EXP 35
44108: PUSH
44109: LD_INT 1
44111: EQUAL
44112: IFFALSE 44172
44114: GO 44116
44116: DISABLE
// begin repeat wait ( 0 0$1 ) ;
44117: LD_INT 35
44119: PPUSH
44120: CALL_OW 67
// display_strings = [ #Am08-1 , SikorskyTimer ] ;
44124: LD_ADDR_OWVAR 47
44128: PUSH
44129: LD_STRING #Am08-1
44131: PUSH
44132: LD_EXP 19
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: ST_TO_ADDR
// SikorskyTimer = SikorskyTimer - 0 0$01 ;
44141: LD_ADDR_EXP 19
44145: PUSH
44146: LD_EXP 19
44150: PUSH
44151: LD_INT 35
44153: MINUS
44154: ST_TO_ADDR
// until SikorskyTimer = 0 0$00 ;
44155: LD_EXP 19
44159: PUSH
44160: LD_INT 0
44162: EQUAL
44163: IFFALSE 44117
// display_strings := [ ] ;
44165: LD_ADDR_OWVAR 47
44169: PUSH
44170: EMPTY
44171: ST_TO_ADDR
// end ; end_of_file
44172: END
// every 1 1$0 do
44173: GO 44175
44175: DISABLE
// begin if supply <= 13 and supply > 7 then
44176: LD_EXP 40
44180: PUSH
44181: LD_INT 13
44183: LESSEQUAL
44184: PUSH
44185: LD_EXP 40
44189: PUSH
44190: LD_INT 7
44192: GREATER
44193: AND
44194: IFFALSE 44217
// CreateCratesArea ( rand ( 3 , 5 ) , GammaSpawn , true ) ;
44196: LD_INT 3
44198: PPUSH
44199: LD_INT 5
44201: PPUSH
44202: CALL_OW 12
44206: PPUSH
44207: LD_INT 5
44209: PPUSH
44210: LD_INT 1
44212: PPUSH
44213: CALL_OW 55
// if supply <= 7 and supply > 4 then
44217: LD_EXP 40
44221: PUSH
44222: LD_INT 7
44224: LESSEQUAL
44225: PUSH
44226: LD_EXP 40
44230: PUSH
44231: LD_INT 4
44233: GREATER
44234: AND
44235: IFFALSE 44258
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn1 , true ) ;
44237: LD_INT 3
44239: PPUSH
44240: LD_INT 5
44242: PPUSH
44243: CALL_OW 12
44247: PPUSH
44248: LD_INT 20
44250: PPUSH
44251: LD_INT 1
44253: PPUSH
44254: CALL_OW 55
// if supply <= 4 and supply > 0 then
44258: LD_EXP 40
44262: PUSH
44263: LD_INT 4
44265: LESSEQUAL
44266: PUSH
44267: LD_EXP 40
44271: PUSH
44272: LD_INT 0
44274: GREATER
44275: AND
44276: IFFALSE 44299
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawn2 , true ) ;
44278: LD_INT 3
44280: PPUSH
44281: LD_INT 5
44283: PPUSH
44284: CALL_OW 12
44288: PPUSH
44289: LD_INT 21
44291: PPUSH
44292: LD_INT 1
44294: PPUSH
44295: CALL_OW 55
// if supply > 0 then
44299: LD_EXP 40
44303: PUSH
44304: LD_INT 0
44306: GREATER
44307: IFFALSE 44324
// begin supply = supply - 1 ;
44309: LD_ADDR_EXP 40
44313: PUSH
44314: LD_EXP 40
44318: PUSH
44319: LD_INT 1
44321: MINUS
44322: ST_TO_ADDR
// enable ;
44323: ENABLE
// end ; end ; end_of_file
44324: END
// every 0 0$1 trigger JMMArrive = 1 and IsDead ( JMM ) do
44325: LD_EXP 39
44329: PUSH
44330: LD_INT 1
44332: EQUAL
44333: PUSH
44334: LD_EXP 1
44338: PPUSH
44339: CALL_OW 301
44343: AND
44344: IFFALSE 44356
44346: GO 44348
44348: DISABLE
// YouLost ( JMM ) ;
44349: LD_STRING JMM
44351: PPUSH
44352: CALL_OW 104
44356: END
// every 0 0$1 trigger SikorskyArrive = 1 and IsDead ( Sikorski ) do
44357: LD_EXP 18
44361: PUSH
44362: LD_INT 1
44364: EQUAL
44365: PUSH
44366: LD_EXP 16
44370: PPUSH
44371: CALL_OW 301
44375: AND
44376: IFFALSE 44408
44378: GO 44380
44380: DISABLE
// begin DialogueOn ;
44381: CALL_OW 6
// SayRadio ( Powell , D8a-Pow-1 ) ;
44385: LD_EXP 23
44389: PPUSH
44390: LD_STRING D8a-Pow-1
44392: PPUSH
44393: CALL_OW 94
// DialogueOff ;
44397: CALL_OW 7
// YouLost ( Dismissed ) ;
44401: LD_STRING Dismissed
44403: PPUSH
44404: CALL_OW 104
// end ;
44408: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do
44409: LD_INT 22
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: LD_INT 30
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 30
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PPUSH
44451: CALL_OW 69
44455: PUSH
44456: LD_INT 0
44458: EQUAL
44459: IFFALSE 44471
44461: GO 44463
44463: DISABLE
// YouLost ( Destroyed ) ; end_of_file
44464: LD_STRING Destroyed
44466: PPUSH
44467: CALL_OW 104
44471: END
// every 0 0$1 trigger IsDead ( Borodin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 7 , 6 , 5 ] [ Difficulty ] and IsPlaced ( JMM ) do var i , p ;
44472: LD_EXP 24
44476: PPUSH
44477: CALL_OW 301
44481: PUSH
44482: LD_INT 22
44484: PUSH
44485: LD_INT 3
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 21
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PPUSH
44506: CALL_OW 69
44510: PUSH
44511: LD_INT 7
44513: PUSH
44514: LD_INT 6
44516: PUSH
44517: LD_INT 5
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: LIST
44524: PUSH
44525: LD_OWVAR 67
44529: ARRAY
44530: LESS
44531: AND
44532: PUSH
44533: LD_EXP 1
44537: PPUSH
44538: CALL_OW 305
44542: AND
44543: IFFALSE 44991
44545: GO 44547
44547: DISABLE
44548: LD_INT 0
44550: PPUSH
44551: PPUSH
// begin russianAI = 0 ;
44552: LD_ADDR_EXP 27
44556: PUSH
44557: LD_INT 0
44559: ST_TO_ADDR
// escapeAvalaible = 1 ;
44560: LD_ADDR_EXP 36
44564: PUSH
44565: LD_INT 1
44567: ST_TO_ADDR
// InGameOn ;
44568: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
44572: LD_INT 3
44574: PPUSH
44575: LD_INT 1
44577: PPUSH
44578: LD_INT 1
44580: PPUSH
44581: LD_INT 0
44583: PPUSH
44584: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
44588: LD_INT 6
44590: PPUSH
44591: LD_INT 1
44593: PPUSH
44594: LD_INT 1
44596: PPUSH
44597: LD_INT 0
44599: PPUSH
44600: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
44604: LD_INT 3
44606: PPUSH
44607: LD_INT 1
44609: PPUSH
44610: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
44614: LD_INT 97
44616: PPUSH
44617: LD_INT 91
44619: PPUSH
44620: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
44624: LD_INT 22
44626: PUSH
44627: LD_INT 3
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 21
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PPUSH
44648: CALL_OW 69
44652: PPUSH
44653: CALL_OW 121
// wait ( 0 0$01 ) ;
44657: LD_INT 35
44659: PPUSH
44660: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44664: LD_INT 22
44666: PUSH
44667: LD_INT 3
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 21
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PPUSH
44688: CALL_OW 69
44692: PPUSH
44693: LD_INT 124
44695: PPUSH
44696: LD_INT 98
44698: PPUSH
44699: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
44703: LD_INT 22
44705: PUSH
44706: LD_INT 6
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 21
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PPUSH
44727: CALL_OW 69
44731: PPUSH
44732: CALL_OW 121
// wait ( 0 0$01 ) ;
44736: LD_INT 35
44738: PPUSH
44739: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
44743: LD_INT 22
44745: PUSH
44746: LD_INT 6
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 21
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PPUSH
44767: CALL_OW 69
44771: PPUSH
44772: LD_INT 124
44774: PPUSH
44775: LD_INT 98
44777: PPUSH
44778: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , 124 , 98 ) ;
44782: LD_INT 22
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 21
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 3
44804: PUSH
44805: LD_INT 54
44807: PUSH
44808: EMPTY
44809: LIST
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: PPUSH
44820: CALL_OW 69
44824: PPUSH
44825: LD_INT 124
44827: PPUSH
44828: LD_INT 98
44830: PPUSH
44831: CALL_OW 114
// wait ( 0 0$4 ) ;
44835: LD_INT 140
44837: PPUSH
44838: CALL_OW 67
// CenterOnXY ( 124 , 98 ) ;
44842: LD_INT 124
44844: PPUSH
44845: LD_INT 98
44847: PPUSH
44848: CALL_OW 84
// if SikorskyStatus = 1 then
44852: LD_EXP 21
44856: PUSH
44857: LD_INT 1
44859: EQUAL
44860: IFFALSE 44874
// begin Say ( Sikorski , D9-Sik-1 ) ;
44862: LD_EXP 16
44866: PPUSH
44867: LD_STRING D9-Sik-1
44869: PPUSH
44870: CALL_OW 88
// end ; if SikorskyStatus = 2 then
44874: LD_EXP 21
44878: PUSH
44879: LD_INT 2
44881: EQUAL
44882: IFFALSE 44903
// begin SayRadio ( Powell , D8b-Pow-1 ) ;
44884: LD_EXP 23
44888: PPUSH
44889: LD_STRING D8b-Pow-1
44891: PPUSH
44892: CALL_OW 94
// YouLost ( Dismissed ) ;
44896: LD_STRING Dismissed
44898: PPUSH
44899: CALL_OW 104
// end ; p := 0 0$0 ;
44903: LD_ADDR_VAR 0 2
44907: PUSH
44908: LD_INT 0
44910: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44911: LD_INT 35
44913: PPUSH
44914: CALL_OW 67
// p := p + 0 0$1 ;
44918: LD_ADDR_VAR 0 2
44922: PUSH
44923: LD_VAR 0 2
44927: PUSH
44928: LD_INT 35
44930: PLUS
44931: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
44932: LD_INT 23
44934: PUSH
44935: LD_INT 3
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 21
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 24
44954: PUSH
44955: LD_INT 250
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: LIST
44966: PPUSH
44967: CALL_OW 69
44971: PUSH
44972: LD_INT 0
44974: EQUAL
44975: PUSH
44976: LD_VAR 0 2
44980: PUSH
44981: LD_INT 245
44983: GREATEREQUAL
44984: OR
44985: IFFALSE 44911
// FinishMission ;
44987: CALL 44994 0 0
// end ;
44991: PPOPN 2
44993: END
// export function FinishMission ; var tmp ; begin
44994: LD_INT 0
44996: PPUSH
44997: PPUSH
// AddMedal ( med1 , 1 ) ;
44998: LD_STRING med1
45000: PPUSH
45001: LD_INT 1
45003: PPUSH
45004: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
45008: LD_STRING med2
45010: PPUSH
45011: LD_INT 1
45013: PPUSH
45014: CALL_OW 101
// AddMedal ( perfect , 1 ) ;
45018: LD_STRING perfect
45020: PPUSH
45021: LD_INT 1
45023: PPUSH
45024: CALL_OW 101
// GiveMedals ( Main ) ;
45028: LD_STRING Main
45030: PPUSH
45031: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
45035: LD_INT 22
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 23
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 21
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: PUSH
45068: LD_INT 25
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 25
45080: PUSH
45081: LD_INT 2
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 25
45090: PUSH
45091: LD_INT 3
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 25
45100: PUSH
45101: LD_INT 4
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: PPUSH
45121: CALL_OW 69
45125: PPUSH
45126: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
45130: LD_EXP 1
45134: PPUSH
45135: LD_EXP 43
45139: PUSH
45140: LD_STRING JMM
45142: STR
45143: PPUSH
45144: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
45148: LD_EXP 2
45152: PPUSH
45153: LD_EXP 43
45157: PUSH
45158: LD_STRING Brown
45160: STR
45161: PPUSH
45162: CALL 8233 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
45166: LD_EXP 3
45170: PPUSH
45171: LD_EXP 43
45175: PUSH
45176: LD_STRING Donaldson
45178: STR
45179: PPUSH
45180: CALL 8233 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45184: LD_EXP 4
45188: PPUSH
45189: LD_EXP 43
45193: PUSH
45194: LD_STRING Bobby
45196: STR
45197: PPUSH
45198: CALL 8233 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45202: LD_EXP 5
45206: PPUSH
45207: LD_EXP 43
45211: PUSH
45212: LD_STRING Cyrus
45214: STR
45215: PPUSH
45216: CALL 8233 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45220: LD_EXP 6
45224: PPUSH
45225: LD_EXP 43
45229: PUSH
45230: LD_STRING Lisa
45232: STR
45233: PPUSH
45234: CALL 8233 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
45238: LD_EXP 7
45242: PPUSH
45243: LD_EXP 43
45247: PUSH
45248: LD_STRING Frank
45250: STR
45251: PPUSH
45252: CALL 8233 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45256: LD_EXP 8
45260: PPUSH
45261: LD_EXP 43
45265: PUSH
45266: LD_STRING Gladstone
45268: STR
45269: PPUSH
45270: CALL 8233 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
45274: LD_EXP 9
45278: PPUSH
45279: LD_EXP 43
45283: PUSH
45284: LD_STRING Kikuchi
45286: STR
45287: PPUSH
45288: CALL 8233 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
45292: LD_EXP 14
45296: PPUSH
45297: LD_EXP 43
45301: PUSH
45302: LD_STRING Denis
45304: STR
45305: PPUSH
45306: CALL 8233 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
45310: LD_EXP 15
45314: PPUSH
45315: LD_EXP 43
45319: PUSH
45320: LD_STRING Joan
45322: STR
45323: PPUSH
45324: CALL 8233 0 2
// EnchancedSaveCharacters ( Khatam , mission_prefix & Khatam ) ;
45328: LD_EXP 10
45332: PPUSH
45333: LD_EXP 43
45337: PUSH
45338: LD_STRING Khatam
45340: STR
45341: PPUSH
45342: CALL 8233 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
45346: LD_EXP 13
45350: PPUSH
45351: LD_EXP 43
45355: PUSH
45356: LD_STRING Houten
45358: STR
45359: PPUSH
45360: CALL 8233 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
45364: LD_INT 50
45366: PUSH
45367: EMPTY
45368: LIST
45369: PUSH
45370: LD_INT 22
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 21
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: LD_INT 25
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 25
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 25
45415: PUSH
45416: LD_INT 3
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 25
45425: PUSH
45426: LD_INT 4
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: PPUSH
45446: CALL_OW 69
45450: PUSH
45451: LD_EXP 1
45455: PUSH
45456: LD_EXP 2
45460: PUSH
45461: LD_EXP 3
45465: PUSH
45466: LD_EXP 4
45470: PUSH
45471: LD_EXP 5
45475: PUSH
45476: LD_EXP 6
45480: PUSH
45481: LD_EXP 7
45485: PUSH
45486: LD_EXP 8
45490: PUSH
45491: LD_EXP 9
45495: PUSH
45496: LD_EXP 14
45500: PUSH
45501: LD_EXP 15
45505: PUSH
45506: LD_EXP 13
45510: PUSH
45511: LD_EXP 10
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: DIFF
45531: PPUSH
45532: LD_STRING 08_other_survivors
45534: PPUSH
45535: CALL_OW 38
// SaveBase ( GammaBaseArea ) ;
45539: LD_INT 23
45541: PPUSH
45542: CALL 45555 0 1
// YouWin ;
45546: CALL_OW 103
// end ;
45550: LD_VAR 0 1
45554: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
45555: LD_INT 0
45557: PPUSH
45558: PPUSH
45559: PPUSH
45560: PPUSH
// gammaBase = [ ] ;
45561: LD_ADDR_VAR 0 4
45565: PUSH
45566: EMPTY
45567: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
45568: LD_ADDR_VAR 0 5
45572: PUSH
45573: LD_VAR 0 1
45577: PPUSH
45578: LD_INT 22
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 21
45590: PUSH
45591: LD_INT 3
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 50
45600: PUSH
45601: EMPTY
45602: LIST
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: LIST
45608: PPUSH
45609: CALL_OW 70
45613: ST_TO_ADDR
// for i in buildings do
45614: LD_ADDR_VAR 0 3
45618: PUSH
45619: LD_VAR 0 5
45623: PUSH
45624: FOR_IN
45625: IFFALSE 46062
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
45627: LD_VAR 0 3
45631: PPUSH
45632: CALL_OW 266
45636: PUSH
45637: LD_INT 6
45639: PUSH
45640: LD_INT 7
45642: PUSH
45643: LD_INT 8
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: IN
45651: IFFALSE 45765
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
45653: LD_ADDR_VAR 0 4
45657: PUSH
45658: LD_VAR 0 4
45662: PUSH
45663: LD_VAR 0 3
45667: PPUSH
45668: CALL_OW 266
45672: PUSH
45673: LD_VAR 0 3
45677: PPUSH
45678: CALL_OW 250
45682: PUSH
45683: LD_VAR 0 3
45687: PPUSH
45688: CALL_OW 251
45692: PUSH
45693: LD_VAR 0 3
45697: PPUSH
45698: CALL_OW 254
45702: PUSH
45703: LD_VAR 0 3
45707: PPUSH
45708: CALL_OW 267
45712: PUSH
45713: LD_VAR 0 3
45717: PPUSH
45718: CALL_OW 248
45722: PUSH
45723: LD_VAR 0 3
45727: PPUSH
45728: LD_INT 1
45730: PPUSH
45731: CALL_OW 268
45735: PUSH
45736: LD_VAR 0 3
45740: PPUSH
45741: LD_INT 2
45743: PPUSH
45744: CALL_OW 268
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: PUSH
45759: EMPTY
45760: LIST
45761: ADD
45762: ST_TO_ADDR
45763: GO 46060
// if GetBType ( i ) = b_bunker then
45765: LD_VAR 0 3
45769: PPUSH
45770: CALL_OW 266
45774: PUSH
45775: LD_INT 32
45777: EQUAL
45778: IFFALSE 45875
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
45780: LD_ADDR_VAR 0 4
45784: PUSH
45785: LD_VAR 0 4
45789: PUSH
45790: LD_VAR 0 3
45794: PPUSH
45795: CALL_OW 266
45799: PUSH
45800: LD_VAR 0 3
45804: PPUSH
45805: CALL_OW 250
45809: PUSH
45810: LD_VAR 0 3
45814: PPUSH
45815: CALL_OW 251
45819: PUSH
45820: LD_VAR 0 3
45824: PPUSH
45825: CALL_OW 254
45829: PUSH
45830: LD_VAR 0 3
45834: PPUSH
45835: CALL_OW 267
45839: PUSH
45840: LD_VAR 0 3
45844: PPUSH
45845: CALL_OW 248
45849: PUSH
45850: LD_VAR 0 3
45854: PPUSH
45855: CALL_OW 269
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: PUSH
45869: EMPTY
45870: LIST
45871: ADD
45872: ST_TO_ADDR
45873: GO 46060
// if GetBType ( i ) = b_factory then
45875: LD_VAR 0 3
45879: PPUSH
45880: CALL_OW 266
45884: PUSH
45885: LD_INT 3
45887: EQUAL
45888: IFFALSE 45978
// gammaBase = Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
45890: LD_ADDR_VAR 0 4
45894: PUSH
45895: LD_VAR 0 4
45899: PPUSH
45900: LD_INT 1
45902: PPUSH
45903: LD_VAR 0 3
45907: PPUSH
45908: CALL_OW 266
45912: PUSH
45913: LD_VAR 0 3
45917: PPUSH
45918: CALL_OW 250
45922: PUSH
45923: LD_VAR 0 3
45927: PPUSH
45928: CALL_OW 251
45932: PUSH
45933: LD_VAR 0 3
45937: PPUSH
45938: CALL_OW 254
45942: PUSH
45943: LD_VAR 0 3
45947: PPUSH
45948: CALL_OW 267
45952: PUSH
45953: LD_VAR 0 3
45957: PPUSH
45958: CALL_OW 248
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: PPUSH
45971: CALL_OW 2
45975: ST_TO_ADDR
45976: GO 46060
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
45978: LD_ADDR_VAR 0 4
45982: PUSH
45983: LD_VAR 0 4
45987: PUSH
45988: LD_VAR 0 3
45992: PPUSH
45993: CALL_OW 266
45997: PUSH
45998: LD_VAR 0 3
46002: PPUSH
46003: CALL_OW 250
46007: PUSH
46008: LD_VAR 0 3
46012: PPUSH
46013: CALL_OW 251
46017: PUSH
46018: LD_VAR 0 3
46022: PPUSH
46023: CALL_OW 254
46027: PUSH
46028: LD_VAR 0 3
46032: PPUSH
46033: CALL_OW 267
46037: PUSH
46038: LD_VAR 0 3
46042: PPUSH
46043: CALL_OW 248
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: PUSH
46056: EMPTY
46057: LIST
46058: ADD
46059: ST_TO_ADDR
// end ;
46060: GO 45624
46062: POP
46063: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
46064: LD_VAR 0 4
46068: PPUSH
46069: LD_STRING 08_GammaBase
46071: PPUSH
46072: CALL_OW 39
// end ;
46076: LD_VAR 0 2
46080: RET
