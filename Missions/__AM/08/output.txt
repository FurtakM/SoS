// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 97 0 0
// PrepareAmerican ;
  19: CALL 318 0 0
// PrepareRussian ;
  23: CALL 9204 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  27: LD_INT 4
  29: PPUSH
  30: LD_INT 3
  32: PPUSH
  33: LD_INT 4
  35: PUSH
  36: LD_INT 5
  38: PUSH
  39: LD_INT 5
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: LIST
  49: LIST
  50: PUSH
  51: LD_OWVAR 67
  55: ARRAY
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: LD_INT 1
  62: PPUSH
  63: LD_INT 0
  65: PPUSH
  66: LD_INT 2
  68: PPUSH
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 2
  74: PPUSH
  75: CALL 78020 0 9
// if debug then
  79: LD_EXP 1
  83: IFFALSE 92
// FogOff ( 1 ) ;
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 344
// Action ;
  92: CALL 15634 0 0
// end ;
  96: END
// export debug ; export waitingForSikorski , sikorskiArriveCounter , sikorskiWait , invincibleMode ; export deltaSupport , seenComputer , jmmArrival , sikorskiStatus , sikorskiIsKilled ; export captureRocketCounter , killMechCounter ; export gammaCommander ; function Init ; begin
  97: LD_INT 0
  99: PPUSH
// debug := false ;
 100: LD_ADDR_EXP 1
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// if debug then
 108: LD_EXP 1
 112: IFFALSE 122
// Difficulty := 4 ;
 114: LD_ADDR_OWVAR 67
 118: PUSH
 119: LD_INT 4
 121: ST_TO_ADDR
// gammaCommander := LoadVariable ( GammaCommander , 3 ) ;
 122: LD_ADDR_EXP 13
 126: PUSH
 127: LD_STRING GammaCommander
 129: PPUSH
 130: LD_INT 3
 132: PPUSH
 133: CALL_OW 30
 137: ST_TO_ADDR
// waitingForSikorski := false ;
 138: LD_ADDR_EXP 2
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// deltaSupport := false ;
 146: LD_ADDR_EXP 6
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// seenComputer := false ;
 154: LD_ADDR_EXP 7
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// jmmArrival := false ;
 162: LD_ADDR_EXP 8
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// sikorskiArriveCounter := 10 10$00 ;
 170: LD_ADDR_EXP 3
 174: PUSH
 175: LD_INT 21000
 177: ST_TO_ADDR
// sikorskiWait := 0 0$00 ;
 178: LD_ADDR_EXP 4
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// sikorskiStatus := 1 ;
 186: LD_ADDR_EXP 9
 190: PUSH
 191: LD_INT 1
 193: ST_TO_ADDR
// sikorskiIsKilled := false ;
 194: LD_ADDR_EXP 10
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// invincibleMode := false ;
 202: LD_ADDR_EXP 5
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// captureRocketCounter := 0 ;
 210: LD_ADDR_EXP 11
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// killMechCounter := 0 ;
 218: LD_ADDR_EXP 12
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// end ;
 226: LD_VAR 0 1
 230: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_heavy_gun ] ] ) >= 6 do
 231: LD_INT 22
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 34
 243: PUSH
 244: LD_INT 6
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: PPUSH
 255: CALL_OW 69
 259: PUSH
 260: LD_INT 6
 262: GREATEREQUAL
 263: IFFALSE 275
 265: GO 267
 267: DISABLE
// SetAchievement ( ACH_ARMOR ) ;
 268: LD_STRING ACH_ARMOR
 270: PPUSH
 271: CALL_OW 543
 275: END
// every 0 0$1 trigger captureRocketCounter >= 3 do
 276: LD_EXP 11
 280: PUSH
 281: LD_INT 3
 283: GREATEREQUAL
 284: IFFALSE 296
 286: GO 288
 288: DISABLE
// SetAchievement ( ACH_TOOL ) ;
 289: LD_STRING ACH_TOOL
 291: PPUSH
 292: CALL_OW 543
 296: END
// every 0 0$1 trigger killMechCounter >= 10 do
 297: LD_EXP 12
 301: PUSH
 302: LD_INT 10
 304: GREATEREQUAL
 305: IFFALSE 317
 307: GO 309
 309: DISABLE
// SetAchievement ( ACH_MECH ) ; end_of_file
 310: LD_STRING ACH_MECH
 312: PPUSH
 313: CALL_OW 543
 317: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam , Mike ; export Houten ; export Denis , Joan ; export Sikorski ; export Harisson , Powell ; export amDepot ; export function PrepareAmerican ; var i , j , tmp , tmp2 , others , arm , bun , lab , fac , ct , placed , x , y , d , b ; begin
 318: LD_INT 0
 320: PPUSH
 321: PPUSH
 322: PPUSH
 323: PPUSH
 324: PPUSH
 325: PPUSH
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
 330: PPUSH
 331: PPUSH
 332: PPUSH
 333: PPUSH
 334: PPUSH
 335: PPUSH
// uc_side := 1 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 1
 343: ST_TO_ADDR
// uc_nation := 1 ;
 344: LD_ADDR_OWVAR 21
 348: PUSH
 349: LD_INT 1
 351: ST_TO_ADDR
// PrepareGammaBase ;
 352: CALL 2481 0 0
// x := 52 ;
 356: LD_ADDR_VAR 0 13
 360: PUSH
 361: LD_INT 52
 363: ST_TO_ADDR
// y := 16 ;
 364: LD_ADDR_VAR 0 14
 368: PUSH
 369: LD_INT 16
 371: ST_TO_ADDR
// case gammaCommander of 1 :
 372: LD_EXP 13
 376: PUSH
 377: LD_INT 1
 379: DOUBLE
 380: EQUAL
 381: IFTRUE 385
 383: GO 470
 385: POP
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
 386: LD_ADDR_EXP 16
 390: PUSH
 391: LD_STRING Donaldson
 393: PPUSH
 394: LD_INT 1
 396: PPUSH
 397: LD_STRING 04_
 399: PPUSH
 400: CALL 43169 0 3
 404: ST_TO_ADDR
// if HexInfo ( x , y ) then
 405: LD_VAR 0 13
 409: PPUSH
 410: LD_VAR 0 14
 414: PPUSH
 415: CALL_OW 428
 419: IFFALSE 437
// PlaceHumanInUnit ( Donaldson , amDepot ) else
 421: LD_EXP 16
 425: PPUSH
 426: LD_EXP 31
 430: PPUSH
 431: CALL_OW 52
 435: GO 459
// PlaceUnitXY ( Donaldson , x , y , false ) ;
 437: LD_EXP 16
 441: PPUSH
 442: LD_VAR 0 13
 446: PPUSH
 447: LD_VAR 0 14
 451: PPUSH
 452: LD_INT 0
 454: PPUSH
 455: CALL_OW 48
// ComHold ( Donaldson ) ;
 459: LD_EXP 16
 463: PPUSH
 464: CALL_OW 140
// end ; 2 :
 468: GO 657
 470: LD_INT 2
 472: DOUBLE
 473: EQUAL
 474: IFTRUE 478
 476: GO 563
 478: POP
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
 479: LD_ADDR_EXP 15
 483: PUSH
 484: LD_STRING Brown
 486: PPUSH
 487: LD_INT 1
 489: PPUSH
 490: LD_STRING 04_
 492: PPUSH
 493: CALL 43169 0 3
 497: ST_TO_ADDR
// if HexInfo ( x , y ) then
 498: LD_VAR 0 13
 502: PPUSH
 503: LD_VAR 0 14
 507: PPUSH
 508: CALL_OW 428
 512: IFFALSE 530
// PlaceHumanInUnit ( Brown , amDepot ) else
 514: LD_EXP 15
 518: PPUSH
 519: LD_EXP 31
 523: PPUSH
 524: CALL_OW 52
 528: GO 552
// PlaceUnitXY ( Brown , x , y , false ) ;
 530: LD_EXP 15
 534: PPUSH
 535: LD_VAR 0 13
 539: PPUSH
 540: LD_VAR 0 14
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL_OW 48
// ComHold ( Brown ) ;
 552: LD_EXP 15
 556: PPUSH
 557: CALL_OW 140
// end ; 3 :
 561: GO 657
 563: LD_INT 3
 565: DOUBLE
 566: EQUAL
 567: IFTRUE 571
 569: GO 656
 571: POP
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 572: LD_ADDR_EXP 25
 576: PUSH
 577: LD_STRING VanHouten
 579: PPUSH
 580: LD_INT 0
 582: PPUSH
 583: LD_STRING 
 585: PPUSH
 586: CALL 43169 0 3
 590: ST_TO_ADDR
// if HexInfo ( x , y ) then
 591: LD_VAR 0 13
 595: PPUSH
 596: LD_VAR 0 14
 600: PPUSH
 601: CALL_OW 428
 605: IFFALSE 623
// PlaceHumanInUnit ( Houten , amDepot ) else
 607: LD_EXP 25
 611: PPUSH
 612: LD_EXP 31
 616: PPUSH
 617: CALL_OW 52
 621: GO 645
// PlaceUnitXY ( Houten , x , y , false ) ;
 623: LD_EXP 25
 627: PPUSH
 628: LD_VAR 0 13
 632: PPUSH
 633: LD_VAR 0 14
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 48
// ComHold ( Houten ) ;
 645: LD_EXP 25
 649: PPUSH
 650: CALL_OW 140
// end ; end ;
 654: GO 657
 656: POP
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
 657: LD_ADDR_EXP 29
 661: PUSH
 662: LD_STRING Harisson
 664: PPUSH
 665: LD_INT 0
 667: PPUSH
 668: LD_STRING 
 670: PPUSH
 671: CALL 43169 0 3
 675: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 676: LD_ADDR_EXP 30
 680: PUSH
 681: LD_STRING Powell
 683: PPUSH
 684: LD_INT 0
 686: PPUSH
 687: LD_STRING 
 689: PPUSH
 690: CALL 43169 0 3
 694: ST_TO_ADDR
// tmp := [ ] ;
 695: LD_ADDR_VAR 0 4
 699: PUSH
 700: EMPTY
 701: ST_TO_ADDR
// if TestCharacters ( [ 04_Lisa ] ) then
 702: LD_STRING 04_Lisa
 704: PUSH
 705: EMPTY
 706: LIST
 707: PPUSH
 708: CALL_OW 28
 712: IFFALSE 821
// begin if not LoadVariable ( LisaInDelta , 0 ) and not TestCharacters ( [ 07_Lisa ] ) then
 714: LD_STRING LisaInDelta
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL_OW 30
 724: NOT
 725: IFFALSE 740
 727: PUSH
 728: LD_STRING 07_Lisa
 730: PUSH
 731: EMPTY
 732: LIST
 733: PPUSH
 734: CALL_OW 28
 738: NOT
 739: AND
 740: IFFALSE 763
// Lisa := PrepareUnit ( Lisa , true , 04_ ) else
 742: LD_ADDR_EXP 19
 746: PUSH
 747: LD_STRING Lisa
 749: PPUSH
 750: LD_INT 1
 752: PPUSH
 753: LD_STRING 04_
 755: PPUSH
 756: CALL 43169 0 3
 760: ST_TO_ADDR
 761: GO 795
// if not LoadVariable ( LisaIn07 , false ) then
 763: LD_STRING LisaIn07
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 30
 773: NOT
 774: IFFALSE 795
// Lisa := PrepareUnit ( Lisa , true , 07_ ) ;
 776: LD_ADDR_EXP 19
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 07_
 789: PPUSH
 790: CALL 43169 0 3
 794: ST_TO_ADDR
// if Lisa then
 795: LD_EXP 19
 799: IFFALSE 821
// tmp2 := Join ( tmp2 , Lisa ) ;
 801: LD_ADDR_VAR 0 5
 805: PUSH
 806: LD_VAR 0 5
 810: PPUSH
 811: LD_EXP 19
 815: PPUSH
 816: CALL 81369 0 2
 820: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Bobby ] ) then
 821: LD_STRING 04_Bobby
 823: PUSH
 824: EMPTY
 825: LIST
 826: PPUSH
 827: CALL_OW 28
 831: IFFALSE 940
// begin if not LoadVariable ( BobbyInDelta , 0 ) and not TestCharacters ( [ 07_Bobby ] ) then
 833: LD_STRING BobbyInDelta
 835: PPUSH
 836: LD_INT 0
 838: PPUSH
 839: CALL_OW 30
 843: NOT
 844: IFFALSE 859
 846: PUSH
 847: LD_STRING 07_Bobby
 849: PUSH
 850: EMPTY
 851: LIST
 852: PPUSH
 853: CALL_OW 28
 857: NOT
 858: AND
 859: IFFALSE 882
// Bobby := PrepareUnit ( Bobby , true , 04_ ) else
 861: LD_ADDR_EXP 17
 865: PUSH
 866: LD_STRING Bobby
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: LD_STRING 04_
 874: PPUSH
 875: CALL 43169 0 3
 879: ST_TO_ADDR
 880: GO 914
// if not LoadVariable ( BobbyIn07 , false ) then
 882: LD_STRING BobbyIn07
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 30
 892: NOT
 893: IFFALSE 914
// Bobby := PrepareUnit ( Bobby , true , 07_ ) ;
 895: LD_ADDR_EXP 17
 899: PUSH
 900: LD_STRING Bobby
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_STRING 07_
 908: PPUSH
 909: CALL 43169 0 3
 913: ST_TO_ADDR
// if Bobby then
 914: LD_EXP 17
 918: IFFALSE 940
// tmp2 := Join ( tmp2 , Bobby ) ;
 920: LD_ADDR_VAR 0 5
 924: PUSH
 925: LD_VAR 0 5
 929: PPUSH
 930: LD_EXP 17
 934: PPUSH
 935: CALL 81369 0 2
 939: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Cyrus ] ) then
 940: LD_STRING 04_Cyrus
 942: PUSH
 943: EMPTY
 944: LIST
 945: PPUSH
 946: CALL_OW 28
 950: IFFALSE 1059
// begin if not LoadVariable ( CyrusInDelta , 0 ) and not TestCharacters ( [ 07_Cyrus ] ) then
 952: LD_STRING CyrusInDelta
 954: PPUSH
 955: LD_INT 0
 957: PPUSH
 958: CALL_OW 30
 962: NOT
 963: IFFALSE 978
 965: PUSH
 966: LD_STRING 07_Cyrus
 968: PUSH
 969: EMPTY
 970: LIST
 971: PPUSH
 972: CALL_OW 28
 976: NOT
 977: AND
 978: IFFALSE 1001
// Cyrus := PrepareUnit ( Cyrus , true , 04_ ) else
 980: LD_ADDR_EXP 18
 984: PUSH
 985: LD_STRING Cyrus
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: LD_STRING 04_
 993: PPUSH
 994: CALL 43169 0 3
 998: ST_TO_ADDR
 999: GO 1033
// if not LoadVariable ( CyrusIn07 , false ) then
1001: LD_STRING CyrusIn07
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: CALL_OW 30
1011: NOT
1012: IFFALSE 1033
// Cyrus := PrepareUnit ( Cyrus , true , 07_ ) ;
1014: LD_ADDR_EXP 18
1018: PUSH
1019: LD_STRING Cyrus
1021: PPUSH
1022: LD_INT 1
1024: PPUSH
1025: LD_STRING 07_
1027: PPUSH
1028: CALL 43169 0 3
1032: ST_TO_ADDR
// if Cyrus then
1033: LD_EXP 18
1037: IFFALSE 1059
// tmp2 := Join ( tmp2 , Cyrus ) ;
1039: LD_ADDR_VAR 0 5
1043: PUSH
1044: LD_VAR 0 5
1048: PPUSH
1049: LD_EXP 18
1053: PPUSH
1054: CALL 81369 0 2
1058: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Brown ] ) and not LoadVariable ( BrownInDelta , 0 ) and not TestCharacters ( [ 07_Brown ] ) and gammaCommander <> 2 then
1059: LD_STRING 04_Brown
1061: PUSH
1062: EMPTY
1063: LIST
1064: PPUSH
1065: CALL_OW 28
1069: IFFALSE 1084
1071: PUSH
1072: LD_STRING BrownInDelta
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 30
1082: NOT
1083: AND
1084: IFFALSE 1099
1086: PUSH
1087: LD_STRING 07_Brown
1089: PUSH
1090: EMPTY
1091: LIST
1092: PPUSH
1093: CALL_OW 28
1097: NOT
1098: AND
1099: IFFALSE 1111
1101: PUSH
1102: LD_EXP 13
1106: PUSH
1107: LD_INT 2
1109: NONEQUAL
1110: AND
1111: IFFALSE 1154
// begin Brown := PrepareUnit ( Brown , true , 04_ ) ;
1113: LD_ADDR_EXP 15
1117: PUSH
1118: LD_STRING Brown
1120: PPUSH
1121: LD_INT 1
1123: PPUSH
1124: LD_STRING 04_
1126: PPUSH
1127: CALL 43169 0 3
1131: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1132: LD_ADDR_VAR 0 5
1136: PUSH
1137: LD_VAR 0 5
1141: PPUSH
1142: LD_EXP 15
1146: PPUSH
1147: CALL 81369 0 2
1151: ST_TO_ADDR
// end else
1152: GO 1218
// if not LoadVariable ( BrownIn07 , false ) and gammaCommander <> 2 then
1154: LD_STRING BrownIn07
1156: PPUSH
1157: LD_INT 0
1159: PPUSH
1160: CALL_OW 30
1164: NOT
1165: IFFALSE 1177
1167: PUSH
1168: LD_EXP 13
1172: PUSH
1173: LD_INT 2
1175: NONEQUAL
1176: AND
1177: IFFALSE 1218
// begin Brown := PrepareUnit ( Brown , true , 07_ ) ;
1179: LD_ADDR_EXP 15
1183: PUSH
1184: LD_STRING Brown
1186: PPUSH
1187: LD_INT 1
1189: PPUSH
1190: LD_STRING 07_
1192: PPUSH
1193: CALL 43169 0 3
1197: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Brown ) ;
1198: LD_ADDR_VAR 0 5
1202: PUSH
1203: LD_VAR 0 5
1207: PPUSH
1208: LD_EXP 15
1212: PPUSH
1213: CALL 81369 0 2
1217: ST_TO_ADDR
// end ; if TestCharacters ( [ 04_Donaldson ] ) and not LoadVariable ( DonaldsonInDelta , 0 ) and not TestCharacters ( [ 07_Donaldson ] ) and gammaCommander <> 1 then
1218: LD_STRING 04_Donaldson
1220: PUSH
1221: EMPTY
1222: LIST
1223: PPUSH
1224: CALL_OW 28
1228: IFFALSE 1243
1230: PUSH
1231: LD_STRING DonaldsonInDelta
1233: PPUSH
1234: LD_INT 0
1236: PPUSH
1237: CALL_OW 30
1241: NOT
1242: AND
1243: IFFALSE 1258
1245: PUSH
1246: LD_STRING 07_Donaldson
1248: PUSH
1249: EMPTY
1250: LIST
1251: PPUSH
1252: CALL_OW 28
1256: NOT
1257: AND
1258: IFFALSE 1270
1260: PUSH
1261: LD_EXP 13
1265: PUSH
1266: LD_INT 1
1268: NONEQUAL
1269: AND
1270: IFFALSE 1313
// begin Donaldson := PrepareUnit ( Donaldson , true , 04_ ) ;
1272: LD_ADDR_EXP 16
1276: PUSH
1277: LD_STRING Donaldson
1279: PPUSH
1280: LD_INT 1
1282: PPUSH
1283: LD_STRING 04_
1285: PPUSH
1286: CALL 43169 0 3
1290: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1291: LD_ADDR_VAR 0 5
1295: PUSH
1296: LD_VAR 0 5
1300: PPUSH
1301: LD_EXP 16
1305: PPUSH
1306: CALL 81369 0 2
1310: ST_TO_ADDR
// end else
1311: GO 1377
// if not LoadVariable ( DonaldsonIn07 , false ) and gammaCommander <> 1 then
1313: LD_STRING DonaldsonIn07
1315: PPUSH
1316: LD_INT 0
1318: PPUSH
1319: CALL_OW 30
1323: NOT
1324: IFFALSE 1336
1326: PUSH
1327: LD_EXP 13
1331: PUSH
1332: LD_INT 1
1334: NONEQUAL
1335: AND
1336: IFFALSE 1377
// begin Donaldson := PrepareUnit ( Donaldson , true , 07_ ) ;
1338: LD_ADDR_EXP 16
1342: PUSH
1343: LD_STRING Donaldson
1345: PPUSH
1346: LD_INT 1
1348: PPUSH
1349: LD_STRING 07_
1351: PPUSH
1352: CALL 43169 0 3
1356: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Donaldson ) ;
1357: LD_ADDR_VAR 0 5
1361: PUSH
1362: LD_VAR 0 5
1366: PPUSH
1367: LD_EXP 16
1371: PPUSH
1372: CALL 81369 0 2
1376: ST_TO_ADDR
// end ; if not LoadVariable ( KhatamIn07 , false ) then
1377: LD_STRING KhatamIn07
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL_OW 30
1387: NOT
1388: IFFALSE 1429
// begin Khatam := PrepareUnit ( Khatam , true , 07_ ) ;
1390: LD_ADDR_EXP 23
1394: PUSH
1395: LD_STRING Khatam
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_STRING 07_
1403: PPUSH
1404: CALL 43169 0 3
1408: ST_TO_ADDR
// tmp2 := Join ( tmp2 , Khatam ) ;
1409: LD_ADDR_VAR 0 5
1413: PUSH
1414: LD_VAR 0 5
1418: PPUSH
1419: LD_EXP 23
1423: PPUSH
1424: CALL 81369 0 2
1428: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07_othersGamma ) ;
1429: LD_ADDR_VAR 0 6
1433: PUSH
1434: LD_STRING 07_othersGamma
1436: PPUSH
1437: CALL_OW 31
1441: ST_TO_ADDR
// tmp := 5 - others ;
1442: LD_ADDR_VAR 0 4
1446: PUSH
1447: LD_INT 5
1449: PUSH
1450: LD_VAR 0 6
1454: MINUS
1455: ST_TO_ADDR
// if tmp then
1456: LD_VAR 0 4
1460: IFFALSE 1517
// for i := tmp downto 1 do
1462: LD_ADDR_VAR 0 2
1466: PUSH
1467: DOUBLE
1468: LD_VAR 0 4
1472: INC
1473: ST_TO_ADDR
1474: LD_INT 1
1476: PUSH
1477: FOR_DOWNTO
1478: IFFALSE 1515
// begin PrepareHuman ( false , 1 , 5 ) ;
1480: LD_INT 0
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: LD_INT 5
1488: PPUSH
1489: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1493: LD_ADDR_VAR 0 6
1497: PUSH
1498: LD_VAR 0 6
1502: PPUSH
1503: CALL_OW 44
1507: PPUSH
1508: CALL 81369 0 2
1512: ST_TO_ADDR
// end ;
1513: GO 1477
1515: POP
1516: POP
// for i in others do
1517: LD_ADDR_VAR 0 2
1521: PUSH
1522: LD_VAR 0 6
1526: PUSH
1527: FOR_IN
1528: IFFALSE 1544
// SetTag ( i , 106 ) ;
1530: LD_VAR 0 2
1534: PPUSH
1535: LD_INT 106
1537: PPUSH
1538: CALL_OW 109
1542: GO 1527
1544: POP
1545: POP
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
1546: LD_ADDR_VAR 0 8
1550: PUSH
1551: LD_INT 22
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 30
1563: PUSH
1564: LD_INT 31
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 69
1579: ST_TO_ADDR
// for i in bun do
1580: LD_ADDR_VAR 0 2
1584: PUSH
1585: LD_VAR 0 8
1589: PUSH
1590: FOR_IN
1591: IFFALSE 1723
// begin x := GetX ( i ) ;
1593: LD_ADDR_VAR 0 13
1597: PUSH
1598: LD_VAR 0 2
1602: PPUSH
1603: CALL_OW 250
1607: ST_TO_ADDR
// y := GetY ( i ) ;
1608: LD_ADDR_VAR 0 14
1612: PUSH
1613: LD_VAR 0 2
1617: PPUSH
1618: CALL_OW 251
1622: ST_TO_ADDR
// d := GetDir ( i ) ;
1623: LD_ADDR_VAR 0 15
1627: PUSH
1628: LD_VAR 0 2
1632: PPUSH
1633: CALL_OW 254
1637: ST_TO_ADDR
// RemoveUnit ( i ) ;
1638: LD_VAR 0 2
1642: PPUSH
1643: CALL_OW 64
// bc_type := b_bunker ;
1647: LD_ADDR_OWVAR 42
1651: PUSH
1652: LD_INT 32
1654: ST_TO_ADDR
// bc_level := 6 ;
1655: LD_ADDR_OWVAR 43
1659: PUSH
1660: LD_INT 6
1662: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( x , y , d ) ;
1663: LD_ADDR_VAR 0 16
1667: PUSH
1668: LD_VAR 0 13
1672: PPUSH
1673: LD_VAR 0 14
1677: PPUSH
1678: LD_VAR 0 15
1682: PPUSH
1683: CALL_OW 47
1687: ST_TO_ADDR
// PlaceWeaponTurret ( b , [ us_double_gun , us_gatling_gun ] [ i mod 2 + 1 ] ) ;
1688: LD_VAR 0 16
1692: PPUSH
1693: LD_INT 5
1695: PUSH
1696: LD_INT 4
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_VAR 0 2
1707: PUSH
1708: LD_INT 2
1710: MOD
1711: PUSH
1712: LD_INT 1
1714: PLUS
1715: ARRAY
1716: PPUSH
1717: CALL_OW 431
// end ;
1721: GO 1590
1723: POP
1724: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
1725: LD_ADDR_VAR 0 7
1729: PUSH
1730: LD_INT 22
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PUSH
1740: LD_INT 30
1742: PUSH
1743: LD_INT 5
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PPUSH
1754: CALL_OW 69
1758: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1759: LD_ADDR_VAR 0 9
1763: PUSH
1764: LD_INT 22
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PUSH
1774: LD_INT 2
1776: PUSH
1777: LD_INT 30
1779: PUSH
1780: LD_INT 6
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 30
1789: PUSH
1790: LD_INT 7
1792: PUSH
1793: EMPTY
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 30
1799: PUSH
1800: LD_INT 8
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PPUSH
1817: CALL_OW 69
1821: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ;
1822: LD_ADDR_VAR 0 10
1826: PUSH
1827: LD_INT 22
1829: PUSH
1830: LD_INT 1
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 30
1839: PUSH
1840: LD_INT 3
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PPUSH
1851: CALL_OW 69
1855: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) ;
1856: LD_ADDR_VAR 0 11
1860: PUSH
1861: LD_INT 22
1863: PUSH
1864: LD_INT 1
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 30
1873: PUSH
1874: LD_INT 36
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: PPUSH
1885: CALL_OW 69
1889: ST_TO_ADDR
// bun := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
1890: LD_ADDR_VAR 0 8
1894: PUSH
1895: LD_INT 22
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 2
1907: PUSH
1908: LD_INT 30
1910: PUSH
1911: LD_INT 31
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 30
1920: PUSH
1921: LD_INT 32
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PPUSH
1937: CALL_OW 69
1941: ST_TO_ADDR
// for i in others union tmp2 do
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 6
1951: PUSH
1952: LD_VAR 0 5
1956: UNION
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2403
// begin placed := false ;
1961: LD_ADDR_VAR 0 12
1965: PUSH
1966: LD_INT 0
1968: ST_TO_ADDR
// if GetClass ( i ) = class_soldier then
1969: LD_VAR 0 2
1973: PPUSH
1974: CALL_OW 257
1978: PUSH
1979: LD_INT 1
1981: EQUAL
1982: IFFALSE 2109
// begin if UnitFilter ( bun , [ f_empty ] ) then
1984: LD_VAR 0 8
1988: PPUSH
1989: LD_INT 58
1991: PUSH
1992: EMPTY
1993: LIST
1994: PPUSH
1995: CALL_OW 72
1999: IFFALSE 2038
// begin PlaceHumanInUnit ( i , UnitFilter ( bun , [ f_empty ] ) [ 1 ] ) ;
2001: LD_VAR 0 2
2005: PPUSH
2006: LD_VAR 0 8
2010: PPUSH
2011: LD_INT 58
2013: PUSH
2014: EMPTY
2015: LIST
2016: PPUSH
2017: CALL_OW 72
2021: PUSH
2022: LD_INT 1
2024: ARRAY
2025: PPUSH
2026: CALL_OW 52
// placed := true ;
2030: LD_ADDR_VAR 0 12
2034: PUSH
2035: LD_INT 1
2037: ST_TO_ADDR
// end ; if arm and not placed then
2038: LD_VAR 0 7
2042: IFFALSE 2051
2044: PUSH
2045: LD_VAR 0 12
2049: NOT
2050: AND
2051: IFFALSE 2109
// begin for j in arm do
2053: LD_ADDR_VAR 0 3
2057: PUSH
2058: LD_VAR 0 7
2062: PUSH
2063: FOR_IN
2064: IFFALSE 2107
// if UnitsInside ( j ) < 6 then
2066: LD_VAR 0 3
2070: PPUSH
2071: CALL_OW 313
2075: PUSH
2076: LD_INT 6
2078: LESS
2079: IFFALSE 2105
// begin PlaceHumanInUnit ( i , j ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_VAR 0 3
2090: PPUSH
2091: CALL_OW 52
// placed := true ;
2095: LD_ADDR_VAR 0 12
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// break ;
2103: GO 2107
// end ;
2105: GO 2063
2107: POP
2108: POP
// end ; end ; if GetClass ( i ) = class_engineer then
2109: LD_VAR 0 2
2113: PPUSH
2114: CALL_OW 257
2118: PUSH
2119: LD_INT 2
2121: EQUAL
2122: IFFALSE 2155
// begin PlaceUnitXYR ( i , 52 , 20 , 6 , false ) ;
2124: LD_VAR 0 2
2128: PPUSH
2129: LD_INT 52
2131: PPUSH
2132: LD_INT 20
2134: PPUSH
2135: LD_INT 6
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL_OW 50
// placed := true ;
2145: LD_ADDR_VAR 0 12
2149: PUSH
2150: LD_INT 1
2152: ST_TO_ADDR
// continue ;
2153: GO 1958
// end ; if GetClass ( i ) = class_mechanic then
2155: LD_VAR 0 2
2159: PPUSH
2160: CALL_OW 257
2164: PUSH
2165: LD_INT 3
2167: EQUAL
2168: IFFALSE 2293
// begin if fac then
2170: LD_VAR 0 10
2174: IFFALSE 2293
// begin if ct and UnitsInside ( ct [ 1 ] ) < 3 then
2176: LD_VAR 0 11
2180: IFFALSE 2201
2182: PUSH
2183: LD_VAR 0 11
2187: PUSH
2188: LD_INT 1
2190: ARRAY
2191: PPUSH
2192: CALL_OW 313
2196: PUSH
2197: LD_INT 3
2199: LESS
2200: AND
2201: IFFALSE 2229
// begin PlaceHumanInUnit ( i , ct [ 1 ] ) ;
2203: LD_VAR 0 2
2207: PPUSH
2208: LD_VAR 0 11
2212: PUSH
2213: LD_INT 1
2215: ARRAY
2216: PPUSH
2217: CALL_OW 52
// placed := true ;
2221: LD_ADDR_VAR 0 12
2225: PUSH
2226: LD_INT 1
2228: ST_TO_ADDR
// end ; if placed then
2229: LD_VAR 0 12
2233: IFFALSE 2237
// continue ;
2235: GO 1958
// for j in fac do
2237: LD_ADDR_VAR 0 3
2241: PUSH
2242: LD_VAR 0 10
2246: PUSH
2247: FOR_IN
2248: IFFALSE 2291
// if UnitsInside ( j ) < 6 then
2250: LD_VAR 0 3
2254: PPUSH
2255: CALL_OW 313
2259: PUSH
2260: LD_INT 6
2262: LESS
2263: IFFALSE 2289
// begin PlaceHumanInUnit ( i , j ) ;
2265: LD_VAR 0 2
2269: PPUSH
2270: LD_VAR 0 3
2274: PPUSH
2275: CALL_OW 52
// placed := true ;
2279: LD_ADDR_VAR 0 12
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// break ;
2287: GO 2291
// end ;
2289: GO 2247
2291: POP
2292: POP
// end ; end ; if GetClass ( i ) = class_scientistic then
2293: LD_VAR 0 2
2297: PPUSH
2298: CALL_OW 257
2302: PUSH
2303: LD_INT 4
2305: EQUAL
2306: IFFALSE 2370
// begin if lab then
2308: LD_VAR 0 9
2312: IFFALSE 2370
// begin for j in lab do
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: LD_VAR 0 9
2323: PUSH
2324: FOR_IN
2325: IFFALSE 2368
// if UnitsInside ( j ) < 6 then
2327: LD_VAR 0 3
2331: PPUSH
2332: CALL_OW 313
2336: PUSH
2337: LD_INT 6
2339: LESS
2340: IFFALSE 2366
// begin PlaceHumanInUnit ( i , j ) ;
2342: LD_VAR 0 2
2346: PPUSH
2347: LD_VAR 0 3
2351: PPUSH
2352: CALL_OW 52
// placed := true ;
2356: LD_ADDR_VAR 0 12
2360: PUSH
2361: LD_INT 1
2363: ST_TO_ADDR
// break ;
2364: GO 2368
// end ;
2366: GO 2324
2368: POP
2369: POP
// end ; end ; if not placed then
2370: LD_VAR 0 12
2374: NOT
2375: IFFALSE 2401
// begin PlaceUnitArea ( i , gammaSpawnArea , false ) ;
2377: LD_VAR 0 2
2381: PPUSH
2382: LD_INT 3
2384: PPUSH
2385: LD_INT 0
2387: PPUSH
2388: CALL_OW 49
// ComHold ( i ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: CALL_OW 140
// end ; end ;
2401: GO 1958
2403: POP
2404: POP
// if ct then
2405: LD_VAR 0 11
2409: IFFALSE 2476
// if UnitsInside ( ct [ 1 ] ) then
2411: LD_VAR 0 11
2415: PUSH
2416: LD_INT 1
2418: ARRAY
2419: PPUSH
2420: CALL_OW 313
2424: IFFALSE 2476
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) do
2426: LD_ADDR_VAR 0 2
2430: PUSH
2431: LD_INT 22
2433: PUSH
2434: LD_INT 1
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 33
2443: PUSH
2444: LD_INT 2
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PPUSH
2455: CALL_OW 69
2459: PUSH
2460: FOR_IN
2461: IFFALSE 2474
// Connect ( i ) ;
2463: LD_VAR 0 2
2467: PPUSH
2468: CALL 51671 0 1
2472: GO 2460
2474: POP
2475: POP
// end ; end ;
2476: LD_VAR 0 1
2480: RET
// function PrepareGammaBase ; var blist , i , b , veh , tmp ; begin
2481: LD_INT 0
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
2488: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2489: LD_INT 71
2491: PPUSH
2492: LD_INT 5
2494: PPUSH
2495: LD_INT 1
2497: PPUSH
2498: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2502: LD_ADDR_VAR 0 2
2506: PUSH
2507: LD_STRING GammaBase
2509: PPUSH
2510: EMPTY
2511: PPUSH
2512: CALL_OW 30
2516: ST_TO_ADDR
// if not blist then
2517: LD_VAR 0 2
2521: NOT
2522: IFFALSE 2562
// blist := [ [ b_warehouse , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2524: LD_ADDR_VAR 0 2
2528: PUSH
2529: LD_INT 1
2531: PUSH
2532: LD_INT 52
2534: PUSH
2535: LD_INT 12
2537: PUSH
2538: LD_INT 3
2540: PUSH
2541: LD_INT 3
2543: PUSH
2544: LD_INT 0
2546: PUSH
2547: LD_INT 0
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: PUSH
2559: EMPTY
2560: LIST
2561: ST_TO_ADDR
// uc_side := 1 ;
2562: LD_ADDR_OWVAR 20
2566: PUSH
2567: LD_INT 1
2569: ST_TO_ADDR
// uc_nation := 1 ;
2570: LD_ADDR_OWVAR 21
2574: PUSH
2575: LD_INT 1
2577: ST_TO_ADDR
// for i in blist do
2578: LD_ADDR_VAR 0 3
2582: PUSH
2583: LD_VAR 0 2
2587: PUSH
2588: FOR_IN
2589: IFFALSE 2867
// begin InitBc ;
2591: CALL_OW 21
// bc_type := i [ 1 ] ;
2595: LD_ADDR_OWVAR 42
2599: PUSH
2600: LD_VAR 0 3
2604: PUSH
2605: LD_INT 1
2607: ARRAY
2608: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2609: LD_ADDR_OWVAR 43
2613: PUSH
2614: LD_VAR 0 3
2618: PUSH
2619: LD_INT 5
2621: ARRAY
2622: ST_TO_ADDR
// if bc_type in [ b_lab , b_lab_half ] then
2623: LD_OWVAR 42
2627: PUSH
2628: LD_INT 6
2630: PUSH
2631: LD_INT 7
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: IN
2638: IFFALSE 2702
// begin if LoadVariable ( 06_remoteVehs_1 , 0 ) then
2640: LD_STRING 06_remoteVehs_1
2642: PPUSH
2643: LD_INT 0
2645: PPUSH
2646: CALL_OW 30
2650: IFFALSE 2678
// begin bc_type := b_lab_full ;
2652: LD_ADDR_OWVAR 42
2656: PUSH
2657: LD_INT 8
2659: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2660: LD_ADDR_OWVAR 44
2664: PUSH
2665: LD_INT 10
2667: ST_TO_ADDR
// bc_kind2 := b_lab_opto ;
2668: LD_ADDR_OWVAR 45
2672: PUSH
2673: LD_INT 15
2675: ST_TO_ADDR
// end else
2676: GO 2702
// begin bc_type := b_lab_half ;
2678: LD_ADDR_OWVAR 42
2682: PUSH
2683: LD_INT 7
2685: ST_TO_ADDR
// bc_kind1 := b_lab_weapon ;
2686: LD_ADDR_OWVAR 44
2690: PUSH
2691: LD_INT 10
2693: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2694: LD_ADDR_OWVAR 45
2698: PUSH
2699: LD_INT 9
2701: ST_TO_ADDR
// end ; end ; if bc_type = b_workshop then
2702: LD_OWVAR 42
2706: PUSH
2707: LD_INT 2
2709: EQUAL
2710: IFFALSE 2720
// bc_type := b_factory ;
2712: LD_ADDR_OWVAR 42
2716: PUSH
2717: LD_INT 3
2719: ST_TO_ADDR
// if bc_type = b_depot then
2720: LD_OWVAR 42
2724: PUSH
2725: LD_INT 0
2727: EQUAL
2728: IFFALSE 2777
// begin bc_type := b_warehouse ;
2730: LD_ADDR_OWVAR 42
2734: PUSH
2735: LD_INT 1
2737: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2738: LD_ADDR_EXP 31
2742: PUSH
2743: LD_VAR 0 3
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 3
2756: PUSH
2757: LD_INT 3
2759: ARRAY
2760: PPUSH
2761: LD_VAR 0 3
2765: PUSH
2766: LD_INT 4
2768: ARRAY
2769: PPUSH
2770: CALL_OW 47
2774: ST_TO_ADDR
// continue ;
2775: GO 2588
// end ; if bc_type = b_armoury then
2777: LD_OWVAR 42
2781: PUSH
2782: LD_INT 4
2784: EQUAL
2785: IFFALSE 2795
// bc_type = b_barracks ;
2787: LD_ADDR_OWVAR 42
2791: PUSH
2792: LD_INT 5
2794: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2795: LD_ADDR_VAR 0 4
2799: PUSH
2800: LD_VAR 0 3
2804: PUSH
2805: LD_INT 2
2807: ARRAY
2808: PPUSH
2809: LD_VAR 0 3
2813: PUSH
2814: LD_INT 3
2816: ARRAY
2817: PPUSH
2818: LD_VAR 0 3
2822: PUSH
2823: LD_INT 4
2825: ARRAY
2826: PPUSH
2827: CALL_OW 47
2831: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2832: LD_VAR 0 4
2836: PPUSH
2837: CALL_OW 266
2841: PUSH
2842: LD_INT 32
2844: EQUAL
2845: IFFALSE 2865
// PlaceWeaponTurret ( b , i [ 7 ] ) ;
2847: LD_VAR 0 4
2851: PPUSH
2852: LD_VAR 0 3
2856: PUSH
2857: LD_INT 7
2859: ARRAY
2860: PPUSH
2861: CALL_OW 431
// end ;
2865: GO 2588
2867: POP
2868: POP
// if not amDepot then
2869: LD_EXP 31
2873: NOT
2874: IFFALSE 2911
// begin bc_type := b_warehouse ;
2876: LD_ADDR_OWVAR 42
2880: PUSH
2881: LD_INT 1
2883: ST_TO_ADDR
// bc_level := 6 ;
2884: LD_ADDR_OWVAR 43
2888: PUSH
2889: LD_INT 6
2891: ST_TO_ADDR
// amDepot := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2892: LD_ADDR_EXP 31
2896: PUSH
2897: LD_INT 52
2899: PPUSH
2900: LD_INT 12
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: CALL_OW 47
2910: ST_TO_ADDR
// end ; bc_type := b_barracks ;
2911: LD_ADDR_OWVAR 42
2915: PUSH
2916: LD_INT 5
2918: ST_TO_ADDR
// bc_level := 6 ;
2919: LD_ADDR_OWVAR 43
2923: PUSH
2924: LD_INT 6
2926: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 61 , 29 , 5 ) ;
2927: LD_INT 61
2929: PPUSH
2930: LD_INT 29
2932: PPUSH
2933: LD_INT 5
2935: PPUSH
2936: CALL_OW 47
// SetBName ( amDepot , gamma ) ;
2940: LD_EXP 31
2944: PPUSH
2945: LD_STRING gamma
2947: PPUSH
2948: CALL_OW 500
// SetResourceType ( GetBase ( amDepot ) , 1 , [ 400 , 320 , 270 , 230 ] [ Difficulty ] ) ;
2952: LD_EXP 31
2956: PPUSH
2957: CALL_OW 274
2961: PPUSH
2962: LD_INT 1
2964: PPUSH
2965: LD_INT 400
2967: PUSH
2968: LD_INT 320
2970: PUSH
2971: LD_INT 270
2973: PUSH
2974: LD_INT 230
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: PUSH
2983: LD_OWVAR 67
2987: ARRAY
2988: PPUSH
2989: CALL_OW 277
// SetResourceType ( GetBase ( amDepot ) , 2 , 130 ) ;
2993: LD_EXP 31
2997: PPUSH
2998: CALL_OW 274
3002: PPUSH
3003: LD_INT 2
3005: PPUSH
3006: LD_INT 130
3008: PPUSH
3009: CALL_OW 277
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) then
3013: LD_INT 22
3015: PUSH
3016: LD_INT 1
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 30
3025: PUSH
3026: LD_INT 3
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 69
3041: IFFALSE 3289
// begin b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3043: LD_ADDR_VAR 0 4
3047: PUSH
3048: LD_INT 22
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 30
3060: PUSH
3061: LD_INT 3
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: PUSH
3077: LD_INT 1
3079: ARRAY
3080: ST_TO_ADDR
// tmp := GetFacExtXYD ( GetX ( b ) , GetY ( b ) , GetDir ( b ) ) ;
3081: LD_ADDR_VAR 0 6
3085: PUSH
3086: LD_VAR 0 4
3090: PPUSH
3091: CALL_OW 250
3095: PPUSH
3096: LD_VAR 0 4
3100: PPUSH
3101: CALL_OW 251
3105: PPUSH
3106: LD_VAR 0 4
3110: PPUSH
3111: CALL_OW 254
3115: PPUSH
3116: CALL 78979 0 3
3120: ST_TO_ADDR
// blist := [ b_ext_noncombat , b_ext_gun ] ;
3121: LD_ADDR_VAR 0 2
3125: PUSH
3126: LD_INT 19
3128: PUSH
3129: LD_INT 17
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3136: LD_STRING 06_remoteVehs_1
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 30
3146: IFFALSE 3169
// blist := Insert ( blist , 1 , b_ext_radio ) ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 2
3157: PPUSH
3158: LD_INT 1
3160: PPUSH
3161: LD_INT 22
3163: PPUSH
3164: CALL_OW 2
3168: ST_TO_ADDR
// for i in tmp do
3169: LD_ADDR_VAR 0 3
3173: PUSH
3174: LD_VAR 0 6
3178: PUSH
3179: FOR_IN
3180: IFFALSE 3287
// if HexInfo ( i [ 1 ] , i [ 2 ] ) = 0 then
3182: LD_VAR 0 3
3186: PUSH
3187: LD_INT 1
3189: ARRAY
3190: PPUSH
3191: LD_VAR 0 3
3195: PUSH
3196: LD_INT 2
3198: ARRAY
3199: PPUSH
3200: CALL_OW 428
3204: PUSH
3205: LD_INT 0
3207: EQUAL
3208: IFFALSE 3285
// begin bc_type := blist [ 1 ] ;
3210: LD_ADDR_OWVAR 42
3214: PUSH
3215: LD_VAR 0 2
3219: PUSH
3220: LD_INT 1
3222: ARRAY
3223: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3224: LD_VAR 0 3
3228: PUSH
3229: LD_INT 1
3231: ARRAY
3232: PPUSH
3233: LD_VAR 0 3
3237: PUSH
3238: LD_INT 2
3240: ARRAY
3241: PPUSH
3242: LD_VAR 0 3
3246: PUSH
3247: LD_INT 3
3249: ARRAY
3250: PPUSH
3251: CALL_OW 47
// blist := Delete ( blist , 1 ) ;
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_VAR 0 2
3264: PPUSH
3265: LD_INT 1
3267: PPUSH
3268: CALL_OW 3
3272: ST_TO_ADDR
// if blist = 0 then
3273: LD_VAR 0 2
3277: PUSH
3278: LD_INT 0
3280: EQUAL
3281: IFFALSE 3285
// break ;
3283: GO 3287
// end ;
3285: GO 3179
3287: POP
3288: POP
// end ; if LoadVariable ( 06_remoteVehs_1 , 0 ) then
3289: LD_STRING 06_remoteVehs_1
3291: PPUSH
3292: LD_INT 0
3294: PPUSH
3295: CALL_OW 30
3299: IFFALSE 3758
// begin bc_type := b_control_tower ;
3301: LD_ADDR_OWVAR 42
3305: PUSH
3306: LD_INT 36
3308: ST_TO_ADDR
// bc_level := 4 ;
3309: LD_ADDR_OWVAR 43
3313: PUSH
3314: LD_INT 4
3316: ST_TO_ADDR
// if CanBeBuilt ( amDepot , b_control_tower , 62 , 12 , 3 ) and not FilterAllUnits ( [ f_distxy , 62 , 12 , 3 ] ) then
3317: LD_EXP 31
3321: PPUSH
3322: LD_INT 36
3324: PPUSH
3325: LD_INT 62
3327: PPUSH
3328: LD_INT 12
3330: PPUSH
3331: LD_INT 3
3333: PPUSH
3334: CALL 56867 0 5
3338: IFFALSE 3365
3340: PUSH
3341: LD_INT 92
3343: PUSH
3344: LD_INT 62
3346: PUSH
3347: LD_INT 12
3349: PUSH
3350: LD_INT 3
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 69
3363: NOT
3364: AND
3365: IFFALSE 3382
// CreateAndPlaceBuildingXYD ( 62 , 12 , 3 ) else
3367: LD_INT 62
3369: PPUSH
3370: LD_INT 12
3372: PPUSH
3373: LD_INT 3
3375: PPUSH
3376: CALL_OW 47
3380: GO 3548
// if CanBeBuilt ( amDepot , b_control_tower , 37 , 18 , 2 ) and not FilterAllUnits ( [ f_distxy , 37 , 18 , 3 ] ) then
3382: LD_EXP 31
3386: PPUSH
3387: LD_INT 36
3389: PPUSH
3390: LD_INT 37
3392: PPUSH
3393: LD_INT 18
3395: PPUSH
3396: LD_INT 2
3398: PPUSH
3399: CALL 56867 0 5
3403: IFFALSE 3430
3405: PUSH
3406: LD_INT 92
3408: PUSH
3409: LD_INT 37
3411: PUSH
3412: LD_INT 18
3414: PUSH
3415: LD_INT 3
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: PPUSH
3424: CALL_OW 69
3428: NOT
3429: AND
3430: IFFALSE 3447
// CreateAndPlaceBuildingXYD ( 37 , 18 , 2 ) else
3432: LD_INT 37
3434: PPUSH
3435: LD_INT 18
3437: PPUSH
3438: LD_INT 2
3440: PPUSH
3441: CALL_OW 47
3445: GO 3548
// if CanBeBuilt ( amDepot , b_control_tower , 66 , 14 , 4 ) and not FilterAllUnits ( [ f_distxy , 66 , 14 , 3 ] ) then
3447: LD_EXP 31
3451: PPUSH
3452: LD_INT 36
3454: PPUSH
3455: LD_INT 66
3457: PPUSH
3458: LD_INT 14
3460: PPUSH
3461: LD_INT 4
3463: PPUSH
3464: CALL 56867 0 5
3468: IFFALSE 3495
3470: PUSH
3471: LD_INT 92
3473: PUSH
3474: LD_INT 66
3476: PUSH
3477: LD_INT 14
3479: PUSH
3480: LD_INT 3
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: PPUSH
3489: CALL_OW 69
3493: NOT
3494: AND
3495: IFFALSE 3512
// CreateAndPlaceBuildingXYD ( 66 , 14 , 4 ) else
3497: LD_INT 66
3499: PPUSH
3500: LD_INT 14
3502: PPUSH
3503: LD_INT 4
3505: PPUSH
3506: CALL_OW 47
3510: GO 3548
// if CanBeBuilt ( amDepot , b_control_tower , 74 , 26 , 4 ) then
3512: LD_EXP 31
3516: PPUSH
3517: LD_INT 36
3519: PPUSH
3520: LD_INT 74
3522: PPUSH
3523: LD_INT 26
3525: PPUSH
3526: LD_INT 4
3528: PPUSH
3529: CALL 56867 0 5
3533: IFFALSE 3548
// CreateAndPlaceBuildingXYD ( 74 , 26 , 4 ) ;
3535: LD_INT 74
3537: PPUSH
3538: LD_INT 26
3540: PPUSH
3541: LD_INT 4
3543: PPUSH
3544: CALL_OW 47
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) then
3548: LD_INT 22
3550: PUSH
3551: LD_INT 1
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: PUSH
3558: LD_INT 30
3560: PUSH
3561: LD_INT 36
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PPUSH
3572: CALL_OW 69
3576: NOT
3577: IFFALSE 3581
// exit ;
3579: GO 4106
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
3581: LD_ADDR_VAR 0 3
3585: PUSH
3586: DOUBLE
3587: LD_INT 1
3589: DEC
3590: ST_TO_ADDR
3591: LD_INT 3
3593: PUSH
3594: LD_INT 2
3596: PUSH
3597: LD_INT 2
3599: PUSH
3600: LD_INT 2
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: PUSH
3609: LD_OWVAR 67
3613: ARRAY
3614: PUSH
3615: FOR_TO
3616: IFFALSE 3756
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3618: LD_ADDR_OWVAR 37
3622: PUSH
3623: LD_INT 3
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: PUSH
3633: LD_INT 1
3635: PPUSH
3636: LD_INT 2
3638: PPUSH
3639: CALL_OW 12
3643: ARRAY
3644: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3645: LD_ADDR_OWVAR 39
3649: PUSH
3650: LD_INT 1
3652: PUSH
3653: LD_INT 2
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 1
3662: PPUSH
3663: LD_INT 2
3665: PPUSH
3666: CALL_OW 12
3670: ARRAY
3671: ST_TO_ADDR
// vc_control := control_remote ;
3672: LD_ADDR_OWVAR 38
3676: PUSH
3677: LD_INT 2
3679: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_light_gun , us_double_gun ] [ rand ( 1 , 3 ) ] ;
3680: LD_ADDR_OWVAR 40
3684: PUSH
3685: LD_INT 4
3687: PUSH
3688: LD_INT 3
3690: PUSH
3691: LD_INT 5
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: LIST
3698: PUSH
3699: LD_INT 1
3701: PPUSH
3702: LD_INT 3
3704: PPUSH
3705: CALL_OW 12
3709: ARRAY
3710: ST_TO_ADDR
// veh := CreateVehicle ;
3711: LD_ADDR_VAR 0 5
3715: PUSH
3716: CALL_OW 45
3720: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3721: LD_VAR 0 5
3725: PPUSH
3726: LD_INT 3
3728: PPUSH
3729: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3733: LD_VAR 0 5
3737: PPUSH
3738: LD_INT 61
3740: PPUSH
3741: LD_INT 23
3743: PPUSH
3744: LD_INT 9
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: CALL_OW 50
// end ;
3754: GO 3615
3756: POP
3757: POP
// end ; if gammaCommander = 1 then
3758: LD_EXP 13
3762: PUSH
3763: LD_INT 1
3765: EQUAL
3766: IFFALSE 3943
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3768: LD_ADDR_VAR 0 3
3772: PUSH
3773: DOUBLE
3774: LD_INT 1
3776: DEC
3777: ST_TO_ADDR
3778: LD_INT 3
3780: PUSH
3781: LD_INT 3
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_OWVAR 67
3800: ARRAY
3801: PUSH
3802: FOR_TO
3803: IFFALSE 3939
// begin vc_chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
3805: LD_ADDR_OWVAR 37
3809: PUSH
3810: LD_INT 3
3812: PUSH
3813: LD_INT 2
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 1
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: CALL_OW 12
3830: ARRAY
3831: ST_TO_ADDR
// vc_engine := [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] ;
3832: LD_ADDR_OWVAR 39
3836: PUSH
3837: LD_INT 1
3839: PUSH
3840: LD_INT 2
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: LD_INT 1
3849: PPUSH
3850: LD_INT 2
3852: PPUSH
3853: CALL_OW 12
3857: ARRAY
3858: ST_TO_ADDR
// vc_control := control_manual ;
3859: LD_ADDR_OWVAR 38
3863: PUSH
3864: LD_INT 1
3866: ST_TO_ADDR
// vc_weapon := [ us_gatling_gun , us_double_gun ] [ rand ( 1 , 2 ) ] ;
3867: LD_ADDR_OWVAR 40
3871: PUSH
3872: LD_INT 4
3874: PUSH
3875: LD_INT 5
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 2
3887: PPUSH
3888: CALL_OW 12
3892: ARRAY
3893: ST_TO_ADDR
// veh := CreateVehicle ;
3894: LD_ADDR_VAR 0 5
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
3904: LD_VAR 0 5
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
3916: LD_VAR 0 5
3920: PPUSH
3921: LD_INT 61
3923: PPUSH
3924: LD_INT 23
3926: PPUSH
3927: LD_INT 9
3929: PPUSH
3930: LD_INT 0
3932: PPUSH
3933: CALL_OW 50
// end ;
3937: GO 3802
3939: POP
3940: POP
// end else
3941: GO 4106
// if gammaCommander = 2 then
3943: LD_EXP 13
3947: PUSH
3948: LD_INT 2
3950: EQUAL
3951: IFFALSE 4106
// begin bc_type := b_bunker ;
3953: LD_ADDR_OWVAR 42
3957: PUSH
3958: LD_INT 32
3960: ST_TO_ADDR
// bc_level := 6 ;
3961: LD_ADDR_OWVAR 43
3965: PUSH
3966: LD_INT 6
3968: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 67 , 36 , 5 ) ;
3969: LD_ADDR_VAR 0 4
3973: PUSH
3974: LD_INT 67
3976: PPUSH
3977: LD_INT 36
3979: PPUSH
3980: LD_INT 5
3982: PPUSH
3983: CALL_OW 47
3987: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_gatling_gun ) ;
3988: LD_VAR 0 4
3992: PPUSH
3993: LD_INT 4
3995: PPUSH
3996: CALL_OW 431
// b := CreateAndPlaceBuildingXYD ( 61 , 40 , 5 ) ;
4000: LD_ADDR_VAR 0 4
4004: PUSH
4005: LD_INT 61
4007: PPUSH
4008: LD_INT 40
4010: PPUSH
4011: LD_INT 5
4013: PPUSH
4014: CALL_OW 47
4018: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_double_gun ) ;
4019: LD_VAR 0 4
4023: PPUSH
4024: LD_INT 5
4026: PPUSH
4027: CALL_OW 431
// vc_chassis := us_medium_wheeled ;
4031: LD_ADDR_OWVAR 37
4035: PUSH
4036: LD_INT 2
4038: ST_TO_ADDR
// vc_engine := engine_combustion ;
4039: LD_ADDR_OWVAR 39
4043: PUSH
4044: LD_INT 1
4046: ST_TO_ADDR
// vc_control := control_manual ;
4047: LD_ADDR_OWVAR 38
4051: PUSH
4052: LD_INT 1
4054: ST_TO_ADDR
// vc_weapon := us_crane ;
4055: LD_ADDR_OWVAR 40
4059: PUSH
4060: LD_INT 13
4062: ST_TO_ADDR
// veh := CreateVehicle ;
4063: LD_ADDR_VAR 0 5
4067: PUSH
4068: CALL_OW 45
4072: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4073: LD_VAR 0 5
4077: PPUSH
4078: LD_INT 3
4080: PPUSH
4081: CALL_OW 233
// PlaceUnitXYR ( veh , 61 , 23 , 9 , false ) ;
4085: LD_VAR 0 5
4089: PPUSH
4090: LD_INT 61
4092: PPUSH
4093: LD_INT 23
4095: PPUSH
4096: LD_INT 9
4098: PPUSH
4099: LD_INT 0
4101: PPUSH
4102: CALL_OW 50
// end ; end ;
4106: LD_VAR 0 1
4110: RET
// export function PrepareSupportFromDelta ; var i , j , others ; begin
4111: LD_INT 0
4113: PPUSH
4114: PPUSH
4115: PPUSH
4116: PPUSH
// uc_side := 1 ;
4117: LD_ADDR_OWVAR 20
4121: PUSH
4122: LD_INT 1
4124: ST_TO_ADDR
// uc_nation := 1 ;
4125: LD_ADDR_OWVAR 21
4129: PUSH
4130: LD_INT 1
4132: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 06c_ ) ;
4133: LD_ADDR_EXP 26
4137: PUSH
4138: LD_STRING Denis
4140: PPUSH
4141: LD_EXP 1
4145: NOT
4146: PPUSH
4147: LD_STRING 06c_
4149: PPUSH
4150: CALL 43169 0 3
4154: ST_TO_ADDR
// PlaceUnitArea ( Denis , gammaSupportArea , false ) ;
4155: LD_EXP 26
4159: PPUSH
4160: LD_INT 4
4162: PPUSH
4163: LD_INT 0
4165: PPUSH
4166: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 06c_ ) ;
4170: LD_ADDR_EXP 27
4174: PUSH
4175: LD_STRING Joan
4177: PPUSH
4178: LD_EXP 1
4182: NOT
4183: PPUSH
4184: LD_STRING 06c_
4186: PPUSH
4187: CALL 43169 0 3
4191: ST_TO_ADDR
// PlaceUnitArea ( Joan , gammaSupportArea , false ) ;
4192: LD_EXP 27
4196: PPUSH
4197: LD_INT 4
4199: PPUSH
4200: LD_INT 0
4202: PPUSH
4203: CALL_OW 49
// Mike := PrepareUnit ( Mike , ( not debug ) , 06c_ ) ;
4207: LD_ADDR_EXP 24
4211: PUSH
4212: LD_STRING Mike
4214: PPUSH
4215: LD_EXP 1
4219: NOT
4220: PPUSH
4221: LD_STRING 06c_
4223: PPUSH
4224: CALL 43169 0 3
4228: ST_TO_ADDR
// PlaceUnitArea ( Mike , gammaSupportArea , false ) ;
4229: LD_EXP 24
4233: PPUSH
4234: LD_INT 4
4236: PPUSH
4237: LD_INT 0
4239: PPUSH
4240: CALL_OW 49
// if not LoadVariable ( GladstoneIn07 , 0 ) then
4244: LD_STRING GladstoneIn07
4246: PPUSH
4247: LD_INT 0
4249: PPUSH
4250: CALL_OW 30
4254: NOT
4255: IFFALSE 4337
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
4257: LD_ADDR_EXP 21
4261: PUSH
4262: LD_STRING Gladstone
4264: PPUSH
4265: LD_EXP 1
4269: NOT
4270: PPUSH
4271: LD_STRING 06c_
4273: PPUSH
4274: CALL 43169 0 3
4278: ST_TO_ADDR
// if not Gladstone and LoadVariable ( GladstoneStayInDelta , 0 ) then
4279: LD_EXP 21
4283: NOT
4284: IFFALSE 4298
4286: PUSH
4287: LD_STRING GladstoneStayInDelta
4289: PPUSH
4290: LD_INT 0
4292: PPUSH
4293: CALL_OW 30
4297: AND
4298: IFFALSE 4322
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 05_ ) ;
4300: LD_ADDR_EXP 21
4304: PUSH
4305: LD_STRING Gladstone
4307: PPUSH
4308: LD_EXP 1
4312: NOT
4313: PPUSH
4314: LD_STRING 05_
4316: PPUSH
4317: CALL 43169 0 3
4321: ST_TO_ADDR
// PlaceUnitArea ( Gladstone , gammaSupportArea , false ) ;
4322: LD_EXP 21
4326: PPUSH
4327: LD_INT 4
4329: PPUSH
4330: LD_INT 0
4332: PPUSH
4333: CALL_OW 49
// end ; if LoadVariable ( LisaStayInDelta , 0 ) then
4337: LD_STRING LisaStayInDelta
4339: PPUSH
4340: LD_INT 0
4342: PPUSH
4343: CALL_OW 30
4347: IFFALSE 4383
// begin Lisa := PrepareUnit ( Lisa , true , 05_ ) ;
4349: LD_ADDR_EXP 19
4353: PUSH
4354: LD_STRING Lisa
4356: PPUSH
4357: LD_INT 1
4359: PPUSH
4360: LD_STRING 05_
4362: PPUSH
4363: CALL 43169 0 3
4367: ST_TO_ADDR
// PlaceUnitArea ( Lisa , gammaSupportArea , false ) ;
4368: LD_EXP 19
4372: PPUSH
4373: LD_INT 4
4375: PPUSH
4376: LD_INT 0
4378: PPUSH
4379: CALL_OW 49
// end ; if LoadVariable ( BobbyStayInDelta , 0 ) then
4383: LD_STRING BobbyStayInDelta
4385: PPUSH
4386: LD_INT 0
4388: PPUSH
4389: CALL_OW 30
4393: IFFALSE 4429
// begin Bobby := PrepareUnit ( Bobby , true , 05_ ) ;
4395: LD_ADDR_EXP 17
4399: PUSH
4400: LD_STRING Bobby
4402: PPUSH
4403: LD_INT 1
4405: PPUSH
4406: LD_STRING 05_
4408: PPUSH
4409: CALL 43169 0 3
4413: ST_TO_ADDR
// PlaceUnitArea ( Bobby , gammaSupportArea , false ) ;
4414: LD_EXP 17
4418: PPUSH
4419: LD_INT 4
4421: PPUSH
4422: LD_INT 0
4424: PPUSH
4425: CALL_OW 49
// end ; if LoadVariable ( CyrusStayInDelta , 0 ) then
4429: LD_STRING CyrusStayInDelta
4431: PPUSH
4432: LD_INT 0
4434: PPUSH
4435: CALL_OW 30
4439: IFFALSE 4475
// begin Cyrus := PrepareUnit ( Cyrus , true , 05_ ) ;
4441: LD_ADDR_EXP 18
4445: PUSH
4446: LD_STRING Cyrus
4448: PPUSH
4449: LD_INT 1
4451: PPUSH
4452: LD_STRING 05_
4454: PPUSH
4455: CALL 43169 0 3
4459: ST_TO_ADDR
// PlaceUnitArea ( Cyrus , gammaSupportArea , false ) ;
4460: LD_EXP 18
4464: PPUSH
4465: LD_INT 4
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: CALL_OW 49
// end ; if LoadVariable ( BrownStayInDelta , 0 ) then
4475: LD_STRING BrownStayInDelta
4477: PPUSH
4478: LD_INT 0
4480: PPUSH
4481: CALL_OW 30
4485: IFFALSE 4521
// begin Brown := PrepareUnit ( Brown , true , 05_ ) ;
4487: LD_ADDR_EXP 15
4491: PUSH
4492: LD_STRING Brown
4494: PPUSH
4495: LD_INT 1
4497: PPUSH
4498: LD_STRING 05_
4500: PPUSH
4501: CALL 43169 0 3
4505: ST_TO_ADDR
// PlaceUnitArea ( Brown , gammaSupportArea , false ) ;
4506: LD_EXP 15
4510: PPUSH
4511: LD_INT 4
4513: PPUSH
4514: LD_INT 0
4516: PPUSH
4517: CALL_OW 49
// end ; if LoadVariable ( DonaldsonStayInDelta , 0 ) then
4521: LD_STRING DonaldsonStayInDelta
4523: PPUSH
4524: LD_INT 0
4526: PPUSH
4527: CALL_OW 30
4531: IFFALSE 4567
// begin Donaldson := PrepareUnit ( Donaldson , true , 05_ ) ;
4533: LD_ADDR_EXP 16
4537: PUSH
4538: LD_STRING Donaldson
4540: PPUSH
4541: LD_INT 1
4543: PPUSH
4544: LD_STRING 05_
4546: PPUSH
4547: CALL 43169 0 3
4551: ST_TO_ADDR
// PlaceUnitArea ( Donaldson , gammaSupportArea , false ) ;
4552: LD_EXP 16
4556: PPUSH
4557: LD_INT 4
4559: PPUSH
4560: LD_INT 0
4562: PPUSH
4563: CALL_OW 49
// end ; others := CreateCharacterSet ( OthersStayInDelta ) ;
4567: LD_ADDR_VAR 0 4
4571: PUSH
4572: LD_STRING OthersStayInDelta
4574: PPUSH
4575: CALL_OW 31
4579: ST_TO_ADDR
// if others > 2 then
4580: LD_VAR 0 4
4584: PUSH
4585: LD_INT 2
4587: GREATER
4588: IFFALSE 4651
// begin for j := 1 to 2 do
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: DOUBLE
4596: LD_INT 1
4598: DEC
4599: ST_TO_ADDR
4600: LD_INT 2
4602: PUSH
4603: FOR_TO
4604: IFFALSE 4647
// begin SetTag ( others [ j ] , 107 ) ;
4606: LD_VAR 0 4
4610: PUSH
4611: LD_VAR 0 3
4615: ARRAY
4616: PPUSH
4617: LD_INT 107
4619: PPUSH
4620: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4624: LD_VAR 0 4
4628: PUSH
4629: LD_VAR 0 3
4633: ARRAY
4634: PPUSH
4635: LD_INT 4
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL_OW 49
// end ;
4645: GO 4603
4647: POP
4648: POP
// end else
4649: GO 4712
// begin for j := 1 to others do
4651: LD_ADDR_VAR 0 3
4655: PUSH
4656: DOUBLE
4657: LD_INT 1
4659: DEC
4660: ST_TO_ADDR
4661: LD_VAR 0 4
4665: PUSH
4666: FOR_TO
4667: IFFALSE 4710
// begin SetTag ( others [ i ] , 107 ) ;
4669: LD_VAR 0 4
4673: PUSH
4674: LD_VAR 0 2
4678: ARRAY
4679: PPUSH
4680: LD_INT 107
4682: PPUSH
4683: CALL_OW 109
// PlaceUnitArea ( others [ j ] , gammaSupportArea , false ) ;
4687: LD_VAR 0 4
4691: PUSH
4692: LD_VAR 0 3
4696: ARRAY
4697: PPUSH
4698: LD_INT 4
4700: PPUSH
4701: LD_INT 0
4703: PPUSH
4704: CALL_OW 49
// end ;
4708: GO 4666
4710: POP
4711: POP
// end ; others := CreateCharacterSet ( 06_other_apemans ) ;
4712: LD_ADDR_VAR 0 4
4716: PUSH
4717: LD_STRING 06_other_apemans
4719: PPUSH
4720: CALL_OW 31
4724: ST_TO_ADDR
// if others >= [ 3 , 2 , 2 , 1 ] [ Difficulty ] then
4725: LD_VAR 0 4
4729: PUSH
4730: LD_INT 3
4732: PUSH
4733: LD_INT 2
4735: PUSH
4736: LD_INT 2
4738: PUSH
4739: LD_INT 1
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: LD_OWVAR 67
4752: ARRAY
4753: GREATEREQUAL
4754: IFFALSE 4787
// j := [ 3 , 2 , 2 , 1 ] [ Difficulty ] else
4756: LD_ADDR_VAR 0 3
4760: PUSH
4761: LD_INT 3
4763: PUSH
4764: LD_INT 2
4766: PUSH
4767: LD_INT 2
4769: PUSH
4770: LD_INT 1
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: PUSH
4779: LD_OWVAR 67
4783: ARRAY
4784: ST_TO_ADDR
4785: GO 4797
// j := others ;
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: LD_VAR 0 4
4796: ST_TO_ADDR
// for i := 1 to j do
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: DOUBLE
4803: LD_INT 1
4805: DEC
4806: ST_TO_ADDR
4807: LD_VAR 0 3
4811: PUSH
4812: FOR_TO
4813: IFFALSE 4838
// PlaceUnitArea ( others [ i ] , gammaSupportArea , false ) ;
4815: LD_VAR 0 4
4819: PUSH
4820: LD_VAR 0 2
4824: ARRAY
4825: PPUSH
4826: LD_INT 4
4828: PPUSH
4829: LD_INT 0
4831: PPUSH
4832: CALL_OW 49
4836: GO 4812
4838: POP
4839: POP
// ComMoveXY ( FilterUnitsInArea ( gammaSupportArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 53 , 19 ) ;
4840: LD_INT 4
4842: PPUSH
4843: LD_INT 22
4845: PUSH
4846: LD_INT 1
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 21
4855: PUSH
4856: LD_INT 1
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PPUSH
4867: CALL_OW 70
4871: PPUSH
4872: LD_INT 53
4874: PPUSH
4875: LD_INT 19
4877: PPUSH
4878: CALL_OW 111
// end ;
4882: LD_VAR 0 1
4886: RET
// export function PrepareMacmillanSquad ; var i , un , others , squad , tmp , tmpVehs , vehicles , veh , prefix , area , dir , point2 , point ; begin
4887: LD_INT 0
4889: PPUSH
4890: PPUSH
4891: PPUSH
4892: PPUSH
4893: PPUSH
4894: PPUSH
4895: PPUSH
4896: PPUSH
4897: PPUSH
4898: PPUSH
4899: PPUSH
4900: PPUSH
4901: PPUSH
4902: PPUSH
// prefix := 07c_ ;
4903: LD_ADDR_VAR 0 10
4907: PUSH
4908: LD_STRING 07c_
4910: ST_TO_ADDR
// vehicles := LoadVariable ( 07_vehicles , [ ] ) ;
4911: LD_ADDR_VAR 0 8
4915: PUSH
4916: LD_STRING 07_vehicles
4918: PPUSH
4919: EMPTY
4920: PPUSH
4921: CALL_OW 30
4925: ST_TO_ADDR
// if not vehicles and debug then
4926: LD_VAR 0 8
4930: NOT
4931: IFFALSE 4939
4933: PUSH
4934: LD_EXP 1
4938: AND
4939: IFFALSE 4967
// vehicles := [ [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] ] ;
4941: LD_ADDR_VAR 0 8
4945: PUSH
4946: LD_INT 2
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: LD_INT 1
4954: PUSH
4955: LD_INT 4
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: PUSH
4964: EMPTY
4965: LIST
4966: ST_TO_ADDR
// if not vehicles then
4967: LD_VAR 0 8
4971: NOT
4972: IFFALSE 5029
// begin area := westGammaSupportArea ;
4974: LD_ADDR_VAR 0 11
4978: PUSH
4979: LD_INT 16
4981: ST_TO_ADDR
// point := [ 37 , 70 ] ;
4982: LD_ADDR_VAR 0 14
4986: PUSH
4987: LD_INT 37
4989: PUSH
4990: LD_INT 70
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: ST_TO_ADDR
// point2 := [ 43 , 67 ] ;
4997: LD_ADDR_VAR 0 13
5001: PUSH
5002: LD_INT 43
5004: PUSH
5005: LD_INT 67
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: ST_TO_ADDR
// dir := 1 ;
5012: LD_ADDR_VAR 0 12
5016: PUSH
5017: LD_INT 1
5019: ST_TO_ADDR
// wait ( 2 2$00 ) ;
5020: LD_INT 4200
5022: PPUSH
5023: CALL_OW 67
// end else
5027: GO 5075
// begin area := southGammaSupportArea ;
5029: LD_ADDR_VAR 0 11
5033: PUSH
5034: LD_INT 5
5036: ST_TO_ADDR
// point := [ 87 , 147 ] ;
5037: LD_ADDR_VAR 0 14
5041: PUSH
5042: LD_INT 87
5044: PUSH
5045: LD_INT 147
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: ST_TO_ADDR
// point2 := [ 74 , 129 ] ;
5052: LD_ADDR_VAR 0 13
5056: PUSH
5057: LD_INT 74
5059: PUSH
5060: LD_INT 129
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: ST_TO_ADDR
// dir := 0 ;
5067: LD_ADDR_VAR 0 12
5071: PUSH
5072: LD_INT 0
5074: ST_TO_ADDR
// end ; EraseResourceArea ( mat_cans , area ) ;
5075: LD_INT 1
5077: PPUSH
5078: LD_VAR 0 11
5082: PPUSH
5083: CALL_OW 286
// squad := [ ] ;
5087: LD_ADDR_VAR 0 5
5091: PUSH
5092: EMPTY
5093: ST_TO_ADDR
// tmp := [ ] ;
5094: LD_ADDR_VAR 0 6
5098: PUSH
5099: EMPTY
5100: ST_TO_ADDR
// tmpVehs := [ ] ;
5101: LD_ADDR_VAR 0 7
5105: PUSH
5106: EMPTY
5107: ST_TO_ADDR
// uc_side := 1 ;
5108: LD_ADDR_OWVAR 20
5112: PUSH
5113: LD_INT 1
5115: ST_TO_ADDR
// uc_nation := 1 ;
5116: LD_ADDR_OWVAR 21
5120: PUSH
5121: LD_INT 1
5123: ST_TO_ADDR
// if vehicles then
5124: LD_VAR 0 8
5128: IFFALSE 5350
// begin for i := 1 to vehicles do
5130: LD_ADDR_VAR 0 2
5134: PUSH
5135: DOUBLE
5136: LD_INT 1
5138: DEC
5139: ST_TO_ADDR
5140: LD_VAR 0 8
5144: PUSH
5145: FOR_TO
5146: IFFALSE 5348
// begin if vehicles [ i ] then
5148: LD_VAR 0 8
5152: PUSH
5153: LD_VAR 0 2
5157: ARRAY
5158: IFFALSE 5346
// begin if not vehicles [ i ] [ 1 ] then
5160: LD_VAR 0 8
5164: PUSH
5165: LD_VAR 0 2
5169: ARRAY
5170: PUSH
5171: LD_INT 1
5173: ARRAY
5174: NOT
5175: IFFALSE 5179
// continue ;
5177: GO 5145
// if not vehicles [ i ] [ 2 ] then
5179: LD_VAR 0 8
5183: PUSH
5184: LD_VAR 0 2
5188: ARRAY
5189: PUSH
5190: LD_INT 2
5192: ARRAY
5193: NOT
5194: IFFALSE 5198
// continue ;
5196: GO 5145
// if not vehicles [ i ] [ 3 ] then
5198: LD_VAR 0 8
5202: PUSH
5203: LD_VAR 0 2
5207: ARRAY
5208: PUSH
5209: LD_INT 3
5211: ARRAY
5212: NOT
5213: IFFALSE 5217
// continue ;
5215: GO 5145
// if not vehicles [ i ] [ 4 ] then
5217: LD_VAR 0 8
5221: PUSH
5222: LD_VAR 0 2
5226: ARRAY
5227: PUSH
5228: LD_INT 4
5230: ARRAY
5231: NOT
5232: IFFALSE 5236
// continue ;
5234: GO 5145
// vc_chassis := vehicles [ i ] [ 1 ] ;
5236: LD_ADDR_OWVAR 37
5240: PUSH
5241: LD_VAR 0 8
5245: PUSH
5246: LD_VAR 0 2
5250: ARRAY
5251: PUSH
5252: LD_INT 1
5254: ARRAY
5255: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
5256: LD_ADDR_OWVAR 39
5260: PUSH
5261: LD_VAR 0 8
5265: PUSH
5266: LD_VAR 0 2
5270: ARRAY
5271: PUSH
5272: LD_INT 2
5274: ARRAY
5275: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
5276: LD_ADDR_OWVAR 38
5280: PUSH
5281: LD_VAR 0 8
5285: PUSH
5286: LD_VAR 0 2
5290: ARRAY
5291: PUSH
5292: LD_INT 3
5294: ARRAY
5295: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
5296: LD_ADDR_OWVAR 40
5300: PUSH
5301: LD_VAR 0 8
5305: PUSH
5306: LD_VAR 0 2
5310: ARRAY
5311: PUSH
5312: LD_INT 4
5314: ARRAY
5315: ST_TO_ADDR
// veh := CreateVehicle ;
5316: LD_ADDR_VAR 0 9
5320: PUSH
5321: CALL_OW 45
5325: ST_TO_ADDR
// tmpVehs := Join ( tmpVehs , veh ) ;
5326: LD_ADDR_VAR 0 7
5330: PUSH
5331: LD_VAR 0 7
5335: PPUSH
5336: LD_VAR 0 9
5340: PPUSH
5341: CALL 81369 0 2
5345: ST_TO_ADDR
// end ; end ;
5346: GO 5145
5348: POP
5349: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) , prefix ) ;
5350: LD_ADDR_EXP 14
5354: PUSH
5355: LD_STRING JMM
5357: PPUSH
5358: LD_EXP 1
5362: NOT
5363: PPUSH
5364: LD_VAR 0 10
5368: PPUSH
5369: CALL 43169 0 3
5373: ST_TO_ADDR
// if gammaCommander in [ 1 , 3 ] and not Brown then
5374: LD_EXP 13
5378: PUSH
5379: LD_INT 1
5381: PUSH
5382: LD_INT 3
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: IN
5389: IFFALSE 5398
5391: PUSH
5392: LD_EXP 15
5396: NOT
5397: AND
5398: IFFALSE 5459
// begin Brown := PrepareUnit ( Brown , ( not debug ) , prefix ) ;
5400: LD_ADDR_EXP 15
5404: PUSH
5405: LD_STRING Brown
5407: PPUSH
5408: LD_EXP 1
5412: NOT
5413: PPUSH
5414: LD_VAR 0 10
5418: PPUSH
5419: CALL 43169 0 3
5423: ST_TO_ADDR
// if Brown then
5424: LD_EXP 15
5428: IFFALSE 5459
// tmp := Replace ( tmp , tmp + 1 , Brown ) ;
5430: LD_ADDR_VAR 0 6
5434: PUSH
5435: LD_VAR 0 6
5439: PPUSH
5440: LD_VAR 0 6
5444: PUSH
5445: LD_INT 1
5447: PLUS
5448: PPUSH
5449: LD_EXP 15
5453: PPUSH
5454: CALL_OW 1
5458: ST_TO_ADDR
// end ; if gammaCommander in [ 2 , 3 ] and not Donaldson then
5459: LD_EXP 13
5463: PUSH
5464: LD_INT 2
5466: PUSH
5467: LD_INT 3
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: IN
5474: IFFALSE 5483
5476: PUSH
5477: LD_EXP 16
5481: NOT
5482: AND
5483: IFFALSE 5544
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , prefix ) ;
5485: LD_ADDR_EXP 16
5489: PUSH
5490: LD_STRING Donaldson
5492: PPUSH
5493: LD_EXP 1
5497: NOT
5498: PPUSH
5499: LD_VAR 0 10
5503: PPUSH
5504: CALL 43169 0 3
5508: ST_TO_ADDR
// if Donaldson then
5509: LD_EXP 16
5513: IFFALSE 5544
// tmp := Replace ( tmp , tmp + 1 , Donaldson ) ;
5515: LD_ADDR_VAR 0 6
5519: PUSH
5520: LD_VAR 0 6
5524: PPUSH
5525: LD_VAR 0 6
5529: PUSH
5530: LD_INT 1
5532: PLUS
5533: PPUSH
5534: LD_EXP 16
5538: PPUSH
5539: CALL_OW 1
5543: ST_TO_ADDR
// end ; if not Bobby then
5544: LD_EXP 17
5548: NOT
5549: IFFALSE 5607
// begin Bobby := PrepareUnit ( Bobby , true , prefix ) ;
5551: LD_ADDR_EXP 17
5555: PUSH
5556: LD_STRING Bobby
5558: PPUSH
5559: LD_INT 1
5561: PPUSH
5562: LD_VAR 0 10
5566: PPUSH
5567: CALL 43169 0 3
5571: ST_TO_ADDR
// if Bobby then
5572: LD_EXP 17
5576: IFFALSE 5607
// tmp := Replace ( tmp , tmp + 1 , Bobby ) ;
5578: LD_ADDR_VAR 0 6
5582: PUSH
5583: LD_VAR 0 6
5587: PPUSH
5588: LD_VAR 0 6
5592: PUSH
5593: LD_INT 1
5595: PLUS
5596: PPUSH
5597: LD_EXP 17
5601: PPUSH
5602: CALL_OW 1
5606: ST_TO_ADDR
// end ; if not Cyrus then
5607: LD_EXP 18
5611: NOT
5612: IFFALSE 5670
// begin Cyrus := PrepareUnit ( Cyrus , true , prefix ) ;
5614: LD_ADDR_EXP 18
5618: PUSH
5619: LD_STRING Cyrus
5621: PPUSH
5622: LD_INT 1
5624: PPUSH
5625: LD_VAR 0 10
5629: PPUSH
5630: CALL 43169 0 3
5634: ST_TO_ADDR
// if Cyrus then
5635: LD_EXP 18
5639: IFFALSE 5670
// tmp := Replace ( tmp , tmp + 1 , Cyrus ) ;
5641: LD_ADDR_VAR 0 6
5645: PUSH
5646: LD_VAR 0 6
5650: PPUSH
5651: LD_VAR 0 6
5655: PUSH
5656: LD_INT 1
5658: PLUS
5659: PPUSH
5660: LD_EXP 18
5664: PPUSH
5665: CALL_OW 1
5669: ST_TO_ADDR
// end ; if not Lisa then
5670: LD_EXP 19
5674: NOT
5675: IFFALSE 5736
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , prefix ) ;
5677: LD_ADDR_EXP 19
5681: PUSH
5682: LD_STRING Lisa
5684: PPUSH
5685: LD_EXP 1
5689: NOT
5690: PPUSH
5691: LD_VAR 0 10
5695: PPUSH
5696: CALL 43169 0 3
5700: ST_TO_ADDR
// if Lisa then
5701: LD_EXP 19
5705: IFFALSE 5736
// tmp := Replace ( tmp , tmp + 1 , Lisa ) ;
5707: LD_ADDR_VAR 0 6
5711: PUSH
5712: LD_VAR 0 6
5716: PPUSH
5717: LD_VAR 0 6
5721: PUSH
5722: LD_INT 1
5724: PLUS
5725: PPUSH
5726: LD_EXP 19
5730: PPUSH
5731: CALL_OW 1
5735: ST_TO_ADDR
// end ; if not Frank then
5736: LD_EXP 20
5740: NOT
5741: IFFALSE 5802
// begin Frank := PrepareUnit ( Frank , ( not debug ) , prefix ) ;
5743: LD_ADDR_EXP 20
5747: PUSH
5748: LD_STRING Frank
5750: PPUSH
5751: LD_EXP 1
5755: NOT
5756: PPUSH
5757: LD_VAR 0 10
5761: PPUSH
5762: CALL 43169 0 3
5766: ST_TO_ADDR
// if Frank then
5767: LD_EXP 20
5771: IFFALSE 5802
// tmp := Replace ( tmp , tmp + 1 , Frank ) ;
5773: LD_ADDR_VAR 0 6
5777: PUSH
5778: LD_VAR 0 6
5782: PPUSH
5783: LD_VAR 0 6
5787: PUSH
5788: LD_INT 1
5790: PLUS
5791: PPUSH
5792: LD_EXP 20
5796: PPUSH
5797: CALL_OW 1
5801: ST_TO_ADDR
// end ; if not Kikuchi then
5802: LD_EXP 22
5806: NOT
5807: IFFALSE 5865
// begin Kikuchi := PrepareUnit ( Kikuchi , true , prefix ) ;
5809: LD_ADDR_EXP 22
5813: PUSH
5814: LD_STRING Kikuchi
5816: PPUSH
5817: LD_INT 1
5819: PPUSH
5820: LD_VAR 0 10
5824: PPUSH
5825: CALL 43169 0 3
5829: ST_TO_ADDR
// if Kikuchi then
5830: LD_EXP 22
5834: IFFALSE 5865
// tmp := Replace ( tmp , tmp + 1 , Kikuchi ) ;
5836: LD_ADDR_VAR 0 6
5840: PUSH
5841: LD_VAR 0 6
5845: PPUSH
5846: LD_VAR 0 6
5850: PUSH
5851: LD_INT 1
5853: PLUS
5854: PPUSH
5855: LD_EXP 22
5859: PPUSH
5860: CALL_OW 1
5864: ST_TO_ADDR
// end ; if not Gladstone then
5865: LD_EXP 21
5869: NOT
5870: IFFALSE 5931
// begin Gladstone := PrepareUnit ( Gladstone , ( not debug ) , prefix ) ;
5872: LD_ADDR_EXP 21
5876: PUSH
5877: LD_STRING Gladstone
5879: PPUSH
5880: LD_EXP 1
5884: NOT
5885: PPUSH
5886: LD_VAR 0 10
5890: PPUSH
5891: CALL 43169 0 3
5895: ST_TO_ADDR
// if Gladstone then
5896: LD_EXP 21
5900: IFFALSE 5931
// tmp := Replace ( tmp , tmp + 1 , Gladstone ) ;
5902: LD_ADDR_VAR 0 6
5906: PUSH
5907: LD_VAR 0 6
5911: PPUSH
5912: LD_VAR 0 6
5916: PUSH
5917: LD_INT 1
5919: PLUS
5920: PPUSH
5921: LD_EXP 21
5925: PPUSH
5926: CALL_OW 1
5930: ST_TO_ADDR
// end ; if not Khatam then
5931: LD_EXP 23
5935: NOT
5936: IFFALSE 5994
// begin Khatam := PrepareUnit ( Khatam , true , prefix ) ;
5938: LD_ADDR_EXP 23
5942: PUSH
5943: LD_STRING Khatam
5945: PPUSH
5946: LD_INT 1
5948: PPUSH
5949: LD_VAR 0 10
5953: PPUSH
5954: CALL 43169 0 3
5958: ST_TO_ADDR
// if Khatam then
5959: LD_EXP 23
5963: IFFALSE 5994
// tmp := Replace ( tmp , tmp + 1 , Khatam ) ;
5965: LD_ADDR_VAR 0 6
5969: PUSH
5970: LD_VAR 0 6
5974: PPUSH
5975: LD_VAR 0 6
5979: PUSH
5980: LD_INT 1
5982: PLUS
5983: PPUSH
5984: LD_EXP 23
5988: PPUSH
5989: CALL_OW 1
5993: ST_TO_ADDR
// end ; others := CreateCharacterSet ( 07c_others ) ;
5994: LD_ADDR_VAR 0 4
5998: PUSH
5999: LD_STRING 07c_others
6001: PPUSH
6002: CALL_OW 31
6006: ST_TO_ADDR
// squad := others ;
6007: LD_ADDR_VAR 0 5
6011: PUSH
6012: LD_VAR 0 4
6016: ST_TO_ADDR
// if others then
6017: LD_VAR 0 4
6021: IFFALSE 6072
// for i in others do
6023: LD_ADDR_VAR 0 2
6027: PUSH
6028: LD_VAR 0 4
6032: PUSH
6033: FOR_IN
6034: IFFALSE 6070
// begin SetTag ( i , 108 ) ;
6036: LD_VAR 0 2
6040: PPUSH
6041: LD_INT 108
6043: PPUSH
6044: CALL_OW 109
// tmp := Join ( tmp , i ) ;
6048: LD_ADDR_VAR 0 6
6052: PUSH
6053: LD_VAR 0 6
6057: PPUSH
6058: LD_VAR 0 2
6062: PPUSH
6063: CALL 81369 0 2
6067: ST_TO_ADDR
// end ;
6068: GO 6033
6070: POP
6071: POP
// if tmp then
6072: LD_VAR 0 6
6076: IFFALSE 6331
// begin tmp := Join ( tmp , JMM ) ;
6078: LD_ADDR_VAR 0 6
6082: PUSH
6083: LD_VAR 0 6
6087: PPUSH
6088: LD_EXP 14
6092: PPUSH
6093: CALL 81369 0 2
6097: ST_TO_ADDR
// for i in tmp do
6098: LD_ADDR_VAR 0 2
6102: PUSH
6103: LD_VAR 0 6
6107: PUSH
6108: FOR_IN
6109: IFFALSE 6329
// begin SetDir ( i , dir ) ;
6111: LD_VAR 0 2
6115: PPUSH
6116: LD_VAR 0 12
6120: PPUSH
6121: CALL_OW 233
// if GetClass ( i ) = class_mechanic and tmpVehs then
6125: LD_VAR 0 2
6129: PPUSH
6130: CALL_OW 257
6134: PUSH
6135: LD_INT 3
6137: EQUAL
6138: IFFALSE 6146
6140: PUSH
6141: LD_VAR 0 7
6145: AND
6146: IFFALSE 6245
// begin SetDir ( tmpVehs [ 1 ] , 0 ) ;
6148: LD_VAR 0 7
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_INT 0
6159: PPUSH
6160: CALL_OW 233
// repeat wait ( 10 ) ;
6164: LD_INT 10
6166: PPUSH
6167: CALL_OW 67
// until PlaceUnitXY ( tmpVehs [ 1 ] , point [ 1 ] , point [ 2 ] , false ) ;
6171: LD_VAR 0 7
6175: PUSH
6176: LD_INT 1
6178: ARRAY
6179: PPUSH
6180: LD_VAR 0 14
6184: PUSH
6185: LD_INT 1
6187: ARRAY
6188: PPUSH
6189: LD_VAR 0 14
6193: PUSH
6194: LD_INT 2
6196: ARRAY
6197: PPUSH
6198: LD_INT 0
6200: PPUSH
6201: CALL_OW 48
6205: IFFALSE 6164
// PlaceHumanInUnit ( i , tmpVehs [ 1 ] ) ;
6207: LD_VAR 0 2
6211: PPUSH
6212: LD_VAR 0 7
6216: PUSH
6217: LD_INT 1
6219: ARRAY
6220: PPUSH
6221: CALL_OW 52
// tmpVehs := Delete ( tmpVehs , 1 ) ;
6225: LD_ADDR_VAR 0 7
6229: PUSH
6230: LD_VAR 0 7
6234: PPUSH
6235: LD_INT 1
6237: PPUSH
6238: CALL_OW 3
6242: ST_TO_ADDR
// end else
6243: GO 6271
// begin repeat wait ( 10 ) ;
6245: LD_INT 10
6247: PPUSH
6248: CALL_OW 67
// until PlaceUnitArea ( i , area , false ) ;
6252: LD_VAR 0 2
6256: PPUSH
6257: LD_VAR 0 11
6261: PPUSH
6262: LD_INT 0
6264: PPUSH
6265: CALL_OW 49
6269: IFFALSE 6245
// end ; ComMoveXY ( i , point2 [ 1 ] , point2 [ 2 ] ) ;
6271: LD_VAR 0 2
6275: PPUSH
6276: LD_VAR 0 13
6280: PUSH
6281: LD_INT 1
6283: ARRAY
6284: PPUSH
6285: LD_VAR 0 13
6289: PUSH
6290: LD_INT 2
6292: ARRAY
6293: PPUSH
6294: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6298: LD_INT 35
6300: PPUSH
6301: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
6305: LD_VAR 0 11
6309: PPUSH
6310: LD_INT 22
6312: PUSH
6313: LD_INT 1
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PPUSH
6320: CALL_OW 70
6324: NOT
6325: IFFALSE 6298
// end ;
6327: GO 6108
6329: POP
6330: POP
// end ; wait ( 0 0$2 ) ;
6331: LD_INT 70
6333: PPUSH
6334: CALL_OW 67
// ComMoveXY ( JMM , point2 [ 1 ] , point2 [ 2 ] ) ;
6338: LD_EXP 14
6342: PPUSH
6343: LD_VAR 0 13
6347: PUSH
6348: LD_INT 1
6350: ARRAY
6351: PPUSH
6352: LD_VAR 0 13
6356: PUSH
6357: LD_INT 2
6359: ARRAY
6360: PPUSH
6361: CALL_OW 111
// jmmArrival := true ;
6365: LD_ADDR_EXP 8
6369: PUSH
6370: LD_INT 1
6372: ST_TO_ADDR
// end ;
6373: LD_VAR 0 1
6377: RET
// export function PrepareSikorsky ; var i , un , veh , tmp ; begin
6378: LD_INT 0
6380: PPUSH
6381: PPUSH
6382: PPUSH
6383: PPUSH
6384: PPUSH
// EraseResourceArea ( mat_cans , sikorskiOuterArea ) ;
6385: LD_INT 1
6387: PPUSH
6388: LD_INT 17
6390: PPUSH
6391: CALL_OW 286
// EraseResourceArea ( mat_oil , sikorskiOuterArea ) ;
6395: LD_INT 2
6397: PPUSH
6398: LD_INT 17
6400: PPUSH
6401: CALL_OW 286
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_empty ] ) ;
6405: LD_ADDR_VAR 0 5
6409: PUSH
6410: LD_INT 6
6412: PPUSH
6413: LD_INT 58
6415: PUSH
6416: EMPTY
6417: LIST
6418: PPUSH
6419: CALL_OW 70
6423: ST_TO_ADDR
// if tmp then
6424: LD_VAR 0 5
6428: IFFALSE 6456
// for i in tmp do
6430: LD_ADDR_VAR 0 2
6434: PUSH
6435: LD_VAR 0 5
6439: PUSH
6440: FOR_IN
6441: IFFALSE 6454
// RemoveUnit ( i ) ;
6443: LD_VAR 0 2
6447: PPUSH
6448: CALL_OW 64
6452: GO 6440
6454: POP
6455: POP
// tmp := FilterUnitsInArea ( northGammaSupportArea , [ f_not , [ f_type , unit_building ] ] ) ;
6456: LD_ADDR_VAR 0 5
6460: PUSH
6461: LD_INT 6
6463: PPUSH
6464: LD_INT 3
6466: PUSH
6467: LD_INT 21
6469: PUSH
6470: LD_INT 3
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PPUSH
6481: CALL_OW 70
6485: ST_TO_ADDR
// if tmp then
6486: LD_VAR 0 5
6490: IFFALSE 6514
// begin ComMoveXY ( tmp , 33 , 39 ) ;
6492: LD_VAR 0 5
6496: PPUSH
6497: LD_INT 33
6499: PPUSH
6500: LD_INT 39
6502: PPUSH
6503: CALL_OW 111
// wait ( 0 0$3 ) ;
6507: LD_INT 105
6509: PPUSH
6510: CALL_OW 67
// end ; repeat wait ( 0 0$2 ) ;
6514: LD_INT 70
6516: PPUSH
6517: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6521: LD_INT 6
6523: PPUSH
6524: LD_INT 50
6526: PUSH
6527: EMPTY
6528: LIST
6529: PPUSH
6530: CALL_OW 70
6534: NOT
6535: IFFALSE 6514
// uc_side := 4 ;
6537: LD_ADDR_OWVAR 20
6541: PUSH
6542: LD_INT 4
6544: ST_TO_ADDR
// uc_nation := 1 ;
6545: LD_ADDR_OWVAR 21
6549: PUSH
6550: LD_INT 1
6552: ST_TO_ADDR
// Sikorski := PrepareUnit ( Sikorski , false ,  ) ;
6553: LD_ADDR_EXP 28
6557: PUSH
6558: LD_STRING Sikorski
6560: PPUSH
6561: LD_INT 0
6563: PPUSH
6564: LD_STRING 
6566: PPUSH
6567: CALL 43169 0 3
6571: ST_TO_ADDR
// vc_engine := engine_combustion ;
6572: LD_ADDR_OWVAR 39
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// vc_control := control_manual ;
6580: LD_ADDR_OWVAR 38
6584: PUSH
6585: LD_INT 1
6587: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
6588: LD_ADDR_OWVAR 40
6592: PUSH
6593: LD_INT 6
6595: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
6596: LD_ADDR_OWVAR 37
6600: PUSH
6601: LD_INT 4
6603: ST_TO_ADDR
// veh := CreateVehicle ;
6604: LD_ADDR_VAR 0 4
6608: PUSH
6609: CALL_OW 45
6613: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6614: LD_VAR 0 4
6618: PPUSH
6619: LD_INT 3
6621: PPUSH
6622: CALL_OW 233
// SetMark ( veh , - 4 ) ;
6626: LD_VAR 0 4
6630: PPUSH
6631: LD_INT 4
6633: NEG
6634: PPUSH
6635: CALL_OW 242
// SetFuel ( veh , 70 ) ;
6639: LD_VAR 0 4
6643: PPUSH
6644: LD_INT 70
6646: PPUSH
6647: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
6651: LD_VAR 0 4
6655: PPUSH
6656: LD_INT 6
6658: PPUSH
6659: LD_INT 0
6661: PPUSH
6662: CALL_OW 49
// PlaceHumanInUnit ( Sikorski , veh ) ;
6666: LD_EXP 28
6670: PPUSH
6671: LD_VAR 0 4
6675: PPUSH
6676: CALL_OW 52
// ComMoveXY ( Sikorski , 37 , 30 ) ;
6680: LD_EXP 28
6684: PPUSH
6685: LD_INT 37
6687: PPUSH
6688: LD_INT 30
6690: PPUSH
6691: CALL_OW 111
// wait ( 0 0$0.3 ) ;
6695: LD_INT 10
6697: PPUSH
6698: CALL_OW 67
// InitHc_All ( ) ;
6702: CALL_OW 584
// for i := 1 to [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
6706: LD_ADDR_VAR 0 2
6710: PUSH
6711: DOUBLE
6712: LD_INT 1
6714: DEC
6715: ST_TO_ADDR
6716: LD_INT 3
6718: PUSH
6719: LD_INT 2
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: LD_INT 2
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: PUSH
6734: LD_OWVAR 67
6738: ARRAY
6739: PUSH
6740: FOR_TO
6741: IFFALSE 6876
// begin repeat wait ( 0 0$2 ) ;
6743: LD_INT 70
6745: PPUSH
6746: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
6750: LD_INT 6
6752: PPUSH
6753: LD_INT 50
6755: PUSH
6756: EMPTY
6757: LIST
6758: PPUSH
6759: CALL_OW 70
6763: NOT
6764: IFFALSE 6743
// uc_side := 4 ;
6766: LD_ADDR_OWVAR 20
6770: PUSH
6771: LD_INT 4
6773: ST_TO_ADDR
// uc_nation := 1 ;
6774: LD_ADDR_OWVAR 21
6778: PUSH
6779: LD_INT 1
6781: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , rand ( 4 , 7 ) ) ;
6782: LD_INT 0
6784: PPUSH
6785: LD_INT 1
6787: PPUSH
6788: LD_INT 4
6790: PPUSH
6791: LD_INT 7
6793: PPUSH
6794: CALL_OW 12
6798: PPUSH
6799: CALL_OW 380
// un := CreateHuman ;
6803: LD_ADDR_VAR 0 3
6807: PUSH
6808: CALL_OW 44
6812: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6813: LD_VAR 0 3
6817: PPUSH
6818: LD_INT 3
6820: PPUSH
6821: CALL_OW 233
// SetTag ( un , 101 ) ;
6825: LD_VAR 0 3
6829: PPUSH
6830: LD_INT 101
6832: PPUSH
6833: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
6837: LD_VAR 0 3
6841: PPUSH
6842: LD_INT 6
6844: PPUSH
6845: LD_INT 0
6847: PPUSH
6848: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
6852: LD_VAR 0 3
6856: PPUSH
6857: LD_INT 25
6859: PPUSH
6860: LD_INT 27
6862: PPUSH
6863: CALL_OW 111
// wait ( 0 0$1 ) ;
6867: LD_INT 35
6869: PPUSH
6870: CALL_OW 67
// end ;
6874: GO 6740
6876: POP
6877: POP
// repeat wait ( 0 0$2 ) ;
6878: LD_INT 70
6880: PPUSH
6881: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , class_soldier ] ] ) do
6885: LD_ADDR_VAR 0 2
6889: PUSH
6890: LD_INT 22
6892: PUSH
6893: LD_INT 4
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 25
6902: PUSH
6903: LD_INT 1
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PPUSH
6914: CALL_OW 69
6918: PUSH
6919: FOR_IN
6920: IFFALSE 6983
// ComAttackUnit ( i , FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) [ 1 ] ) ;
6922: LD_VAR 0 2
6926: PPUSH
6927: LD_INT 17
6929: PPUSH
6930: LD_INT 22
6932: PUSH
6933: LD_INT 1
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: LD_INT 58
6945: PUSH
6946: EMPTY
6947: LIST
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: LD_INT 2
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PPUSH
6968: CALL_OW 70
6972: PUSH
6973: LD_INT 1
6975: ARRAY
6976: PPUSH
6977: CALL_OW 115
6981: GO 6919
6983: POP
6984: POP
// until not FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_empty ] , [ f_control , control_remote ] ] ] ) ;
6985: LD_INT 17
6987: PPUSH
6988: LD_INT 22
6990: PUSH
6991: LD_INT 1
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 2
7000: PUSH
7001: LD_INT 58
7003: PUSH
7004: EMPTY
7005: LIST
7006: PUSH
7007: LD_INT 33
7009: PUSH
7010: LD_INT 2
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PPUSH
7026: CALL_OW 70
7030: NOT
7031: IFFALSE 6878
// for i := 1 to 2 do
7033: LD_ADDR_VAR 0 2
7037: PUSH
7038: DOUBLE
7039: LD_INT 1
7041: DEC
7042: ST_TO_ADDR
7043: LD_INT 2
7045: PUSH
7046: FOR_TO
7047: IFFALSE 7159
// begin uc_side := 4 ;
7049: LD_ADDR_OWVAR 20
7053: PUSH
7054: LD_INT 4
7056: ST_TO_ADDR
// uc_nation := 1 ;
7057: LD_ADDR_OWVAR 21
7061: PUSH
7062: LD_INT 1
7064: ST_TO_ADDR
// PrepareHuman ( false , class_scientistic , rand ( 3 , 5 ) ) ;
7065: LD_INT 0
7067: PPUSH
7068: LD_INT 4
7070: PPUSH
7071: LD_INT 3
7073: PPUSH
7074: LD_INT 5
7076: PPUSH
7077: CALL_OW 12
7081: PPUSH
7082: CALL_OW 380
// un := CreateHuman ;
7086: LD_ADDR_VAR 0 3
7090: PUSH
7091: CALL_OW 44
7095: ST_TO_ADDR
// SetDir ( un , 3 ) ;
7096: LD_VAR 0 3
7100: PPUSH
7101: LD_INT 3
7103: PPUSH
7104: CALL_OW 233
// SetTag ( un , 101 ) ;
7108: LD_VAR 0 3
7112: PPUSH
7113: LD_INT 101
7115: PPUSH
7116: CALL_OW 109
// PlaceUnitArea ( un , northGammaSupportArea , false ) ;
7120: LD_VAR 0 3
7124: PPUSH
7125: LD_INT 6
7127: PPUSH
7128: LD_INT 0
7130: PPUSH
7131: CALL_OW 49
// ComMoveXY ( un , 25 , 27 ) ;
7135: LD_VAR 0 3
7139: PPUSH
7140: LD_INT 25
7142: PPUSH
7143: LD_INT 27
7145: PPUSH
7146: CALL_OW 111
// wait ( 0 0$1 ) ;
7150: LD_INT 35
7152: PPUSH
7153: CALL_OW 67
// end ;
7157: GO 7046
7159: POP
7160: POP
// for i := 1 to [ 5 , 4 , 3 , 3 ] [ Difficulty ] do
7161: LD_ADDR_VAR 0 2
7165: PUSH
7166: DOUBLE
7167: LD_INT 1
7169: DEC
7170: ST_TO_ADDR
7171: LD_INT 5
7173: PUSH
7174: LD_INT 4
7176: PUSH
7177: LD_INT 3
7179: PUSH
7180: LD_INT 3
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: PUSH
7189: LD_OWVAR 67
7193: ARRAY
7194: PUSH
7195: FOR_TO
7196: IFFALSE 7461
// begin repeat wait ( 0 0$2 ) ;
7198: LD_INT 70
7200: PPUSH
7201: CALL_OW 67
// until not FilterUnitsInArea ( northGammaSupportArea , [ f_ok ] ) ;
7205: LD_INT 6
7207: PPUSH
7208: LD_INT 50
7210: PUSH
7211: EMPTY
7212: LIST
7213: PPUSH
7214: CALL_OW 70
7218: NOT
7219: IFFALSE 7198
// uc_side := 4 ;
7221: LD_ADDR_OWVAR 20
7225: PUSH
7226: LD_INT 4
7228: ST_TO_ADDR
// uc_nation := 1 ;
7229: LD_ADDR_OWVAR 21
7233: PUSH
7234: LD_INT 1
7236: ST_TO_ADDR
// vc_engine := engine_combustion ;
7237: LD_ADDR_OWVAR 39
7241: PUSH
7242: LD_INT 1
7244: ST_TO_ADDR
// vc_control := control_manual ;
7245: LD_ADDR_OWVAR 38
7249: PUSH
7250: LD_INT 1
7252: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_rocket_launcher , us_double_gun , us_gatling_gun ] [ i mod 4 + 1 ] ;
7253: LD_ADDR_OWVAR 40
7257: PUSH
7258: LD_INT 5
7260: PUSH
7261: LD_INT 7
7263: PUSH
7264: LD_INT 5
7266: PUSH
7267: LD_INT 4
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: PUSH
7276: LD_VAR 0 2
7280: PUSH
7281: LD_INT 4
7283: MOD
7284: PUSH
7285: LD_INT 1
7287: PLUS
7288: ARRAY
7289: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ i mod 4 + 1 ] ;
7290: LD_ADDR_OWVAR 37
7294: PUSH
7295: LD_INT 3
7297: PUSH
7298: LD_INT 3
7300: PUSH
7301: LD_INT 4
7303: PUSH
7304: LD_INT 4
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: PUSH
7313: LD_VAR 0 2
7317: PUSH
7318: LD_INT 4
7320: MOD
7321: PUSH
7322: LD_INT 1
7324: PLUS
7325: ARRAY
7326: ST_TO_ADDR
// veh := CreateVehicle ;
7327: LD_ADDR_VAR 0 4
7331: PUSH
7332: CALL_OW 45
7336: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7337: LD_VAR 0 4
7341: PPUSH
7342: LD_INT 3
7344: PPUSH
7345: CALL_OW 233
// SetTag ( veh , 0 ) ;
7349: LD_VAR 0 4
7353: PPUSH
7354: LD_INT 0
7356: PPUSH
7357: CALL_OW 109
// SetFuel ( veh , 70 ) ;
7361: LD_VAR 0 4
7365: PPUSH
7366: LD_INT 70
7368: PPUSH
7369: CALL_OW 240
// PlaceUnitArea ( veh , northGammaSupportArea , false ) ;
7373: LD_VAR 0 4
7377: PPUSH
7378: LD_INT 6
7380: PPUSH
7381: LD_INT 0
7383: PPUSH
7384: CALL_OW 49
// InitHc ;
7388: CALL_OW 19
// PrepareHuman ( false , class_mechanic , rand ( 4 , 7 ) ) ;
7392: LD_INT 0
7394: PPUSH
7395: LD_INT 3
7397: PPUSH
7398: LD_INT 4
7400: PPUSH
7401: LD_INT 7
7403: PPUSH
7404: CALL_OW 12
7408: PPUSH
7409: CALL_OW 380
// un := CreateHuman ;
7413: LD_ADDR_VAR 0 3
7417: PUSH
7418: CALL_OW 44
7422: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7423: LD_VAR 0 3
7427: PPUSH
7428: LD_VAR 0 4
7432: PPUSH
7433: CALL_OW 52
// ComMoveXY ( un , 30 , 22 ) ;
7437: LD_VAR 0 3
7441: PPUSH
7442: LD_INT 30
7444: PPUSH
7445: LD_INT 22
7447: PPUSH
7448: CALL_OW 111
// wait ( 0 0$3 ) ;
7452: LD_INT 105
7454: PPUSH
7455: CALL_OW 67
// end ;
7459: GO 7195
7461: POP
7462: POP
// wait ( 0 0$10 ) ;
7463: LD_INT 350
7465: PPUSH
7466: CALL_OW 67
// end ;
7470: LD_VAR 0 1
7474: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
7475: LD_INT 0
7477: PPUSH
7478: PPUSH
7479: PPUSH
7480: PPUSH
// gammaBase := [ ] ;
7481: LD_ADDR_VAR 0 4
7485: PUSH
7486: EMPTY
7487: ST_TO_ADDR
// buildings := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
7488: LD_ADDR_VAR 0 5
7492: PUSH
7493: LD_VAR 0 1
7497: PPUSH
7498: LD_INT 22
7500: PUSH
7501: LD_INT 1
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 21
7510: PUSH
7511: LD_INT 3
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 50
7520: PUSH
7521: EMPTY
7522: LIST
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: PPUSH
7529: CALL_OW 70
7533: ST_TO_ADDR
// for i in buildings do
7534: LD_ADDR_VAR 0 3
7538: PUSH
7539: LD_VAR 0 5
7543: PUSH
7544: FOR_IN
7545: IFFALSE 7982
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
7547: LD_VAR 0 3
7551: PPUSH
7552: CALL_OW 266
7556: PUSH
7557: LD_INT 6
7559: PUSH
7560: LD_INT 7
7562: PUSH
7563: LD_INT 8
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: IN
7571: IFFALSE 7685
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
7573: LD_ADDR_VAR 0 4
7577: PUSH
7578: LD_VAR 0 4
7582: PUSH
7583: LD_VAR 0 3
7587: PPUSH
7588: CALL_OW 266
7592: PUSH
7593: LD_VAR 0 3
7597: PPUSH
7598: CALL_OW 250
7602: PUSH
7603: LD_VAR 0 3
7607: PPUSH
7608: CALL_OW 251
7612: PUSH
7613: LD_VAR 0 3
7617: PPUSH
7618: CALL_OW 254
7622: PUSH
7623: LD_VAR 0 3
7627: PPUSH
7628: CALL_OW 267
7632: PUSH
7633: LD_VAR 0 3
7637: PPUSH
7638: CALL_OW 248
7642: PUSH
7643: LD_VAR 0 3
7647: PPUSH
7648: LD_INT 1
7650: PPUSH
7651: CALL_OW 268
7655: PUSH
7656: LD_VAR 0 3
7660: PPUSH
7661: LD_INT 2
7663: PPUSH
7664: CALL_OW 268
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: PUSH
7679: EMPTY
7680: LIST
7681: ADD
7682: ST_TO_ADDR
7683: GO 7980
// if GetBType ( i ) = b_bunker then
7685: LD_VAR 0 3
7689: PPUSH
7690: CALL_OW 266
7694: PUSH
7695: LD_INT 32
7697: EQUAL
7698: IFFALSE 7795
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
7700: LD_ADDR_VAR 0 4
7704: PUSH
7705: LD_VAR 0 4
7709: PUSH
7710: LD_VAR 0 3
7714: PPUSH
7715: CALL_OW 266
7719: PUSH
7720: LD_VAR 0 3
7724: PPUSH
7725: CALL_OW 250
7729: PUSH
7730: LD_VAR 0 3
7734: PPUSH
7735: CALL_OW 251
7739: PUSH
7740: LD_VAR 0 3
7744: PPUSH
7745: CALL_OW 254
7749: PUSH
7750: LD_VAR 0 3
7754: PPUSH
7755: CALL_OW 267
7759: PUSH
7760: LD_VAR 0 3
7764: PPUSH
7765: CALL_OW 248
7769: PUSH
7770: LD_VAR 0 3
7774: PPUSH
7775: CALL_OW 269
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: PUSH
7789: EMPTY
7790: LIST
7791: ADD
7792: ST_TO_ADDR
7793: GO 7980
// if GetBType ( i ) = b_factory then
7795: LD_VAR 0 3
7799: PPUSH
7800: CALL_OW 266
7804: PUSH
7805: LD_INT 3
7807: EQUAL
7808: IFFALSE 7898
// gammaBase := Insert ( gammaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
7810: LD_ADDR_VAR 0 4
7814: PUSH
7815: LD_VAR 0 4
7819: PPUSH
7820: LD_INT 1
7822: PPUSH
7823: LD_VAR 0 3
7827: PPUSH
7828: CALL_OW 266
7832: PUSH
7833: LD_VAR 0 3
7837: PPUSH
7838: CALL_OW 250
7842: PUSH
7843: LD_VAR 0 3
7847: PPUSH
7848: CALL_OW 251
7852: PUSH
7853: LD_VAR 0 3
7857: PPUSH
7858: CALL_OW 254
7862: PUSH
7863: LD_VAR 0 3
7867: PPUSH
7868: CALL_OW 267
7872: PUSH
7873: LD_VAR 0 3
7877: PPUSH
7878: CALL_OW 248
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: PPUSH
7891: CALL_OW 2
7895: ST_TO_ADDR
7896: GO 7980
// gammaBase := gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
7898: LD_ADDR_VAR 0 4
7902: PUSH
7903: LD_VAR 0 4
7907: PUSH
7908: LD_VAR 0 3
7912: PPUSH
7913: CALL_OW 266
7917: PUSH
7918: LD_VAR 0 3
7922: PPUSH
7923: CALL_OW 250
7927: PUSH
7928: LD_VAR 0 3
7932: PPUSH
7933: CALL_OW 251
7937: PUSH
7938: LD_VAR 0 3
7942: PPUSH
7943: CALL_OW 254
7947: PUSH
7948: LD_VAR 0 3
7952: PPUSH
7953: CALL_OW 267
7957: PUSH
7958: LD_VAR 0 3
7962: PPUSH
7963: CALL_OW 248
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: PUSH
7976: EMPTY
7977: LIST
7978: ADD
7979: ST_TO_ADDR
// end ;
7980: GO 7544
7982: POP
7983: POP
// SaveVariable ( gammaBase , 08_GammaBase ) ;
7984: LD_VAR 0 4
7988: PPUSH
7989: LD_STRING 08_GammaBase
7991: PPUSH
7992: CALL_OW 39
// end ;
7996: LD_VAR 0 2
8000: RET
// export function SikorskiAttack ; var i , tmp , enemy , points , point , filter ; begin
8001: LD_INT 0
8003: PPUSH
8004: PPUSH
8005: PPUSH
8006: PPUSH
8007: PPUSH
8008: PPUSH
8009: PPUSH
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_not , [ f_type , unit_building ] ] , [ f_not , [ f_control , control_remote ] ] ] ) ;
8010: LD_ADDR_VAR 0 3
8014: PUSH
8015: LD_INT 17
8017: PPUSH
8018: LD_INT 22
8020: PUSH
8021: LD_INT 1
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: LD_INT 3
8030: PUSH
8031: LD_INT 21
8033: PUSH
8034: LD_INT 3
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: LD_INT 3
8047: PUSH
8048: LD_INT 33
8050: PUSH
8051: LD_INT 2
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: PPUSH
8067: CALL_OW 70
8071: ST_TO_ADDR
// if tmp then
8072: LD_VAR 0 3
8076: IFFALSE 8195
// begin for i in tmp do
8078: LD_ADDR_VAR 0 2
8082: PUSH
8083: LD_VAR 0 3
8087: PUSH
8088: FOR_IN
8089: IFFALSE 8120
// begin SetSide ( i , 4 ) ;
8091: LD_VAR 0 2
8095: PPUSH
8096: LD_INT 4
8098: PPUSH
8099: CALL_OW 235
// ComMoveXY ( i , 42 , 22 ) ;
8103: LD_VAR 0 2
8107: PPUSH
8108: LD_INT 42
8110: PPUSH
8111: LD_INT 22
8113: PPUSH
8114: CALL_OW 111
// end ;
8118: GO 8088
8120: POP
8121: POP
// repeat wait ( 0 0$3 ) ;
8122: LD_INT 105
8124: PPUSH
8125: CALL_OW 67
// ComMoveXY ( tmp , 51 , 16 ) ;
8129: LD_VAR 0 3
8133: PPUSH
8134: LD_INT 51
8136: PPUSH
8137: LD_INT 16
8139: PPUSH
8140: CALL_OW 111
// until not UnitFilter ( tmp , [ f_inarea , sikorskiOuterArea ] ) ;
8144: LD_VAR 0 3
8148: PPUSH
8149: LD_INT 95
8151: PUSH
8152: LD_INT 17
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: PPUSH
8159: CALL_OW 72
8163: NOT
8164: IFFALSE 8122
// for i in tmp do
8166: LD_ADDR_VAR 0 2
8170: PUSH
8171: LD_VAR 0 3
8175: PUSH
8176: FOR_IN
8177: IFFALSE 8193
// SetSide ( i , 1 ) ;
8179: LD_VAR 0 2
8183: PPUSH
8184: LD_INT 1
8186: PPUSH
8187: CALL_OW 235
8191: GO 8176
8193: POP
8194: POP
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
8195: LD_ADDR_VAR 0 3
8199: PUSH
8200: LD_INT 17
8202: PPUSH
8203: LD_INT 22
8205: PUSH
8206: LD_INT 1
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: PUSH
8213: LD_INT 33
8215: PUSH
8216: LD_INT 2
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PPUSH
8227: CALL_OW 70
8231: ST_TO_ADDR
// if tmp then
8232: LD_VAR 0 3
8236: IFFALSE 8260
// begin ComMoveXY ( tmp , 40 , 32 ) ;
8238: LD_VAR 0 3
8242: PPUSH
8243: LD_INT 40
8245: PPUSH
8246: LD_INT 32
8248: PPUSH
8249: CALL_OW 111
// wait ( 0 0$3 ) ;
8253: LD_INT 105
8255: PPUSH
8256: CALL_OW 67
// end ; tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8260: LD_ADDR_VAR 0 3
8264: PUSH
8265: LD_INT 17
8267: PPUSH
8268: LD_INT 22
8270: PUSH
8271: LD_INT 1
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PUSH
8278: LD_INT 2
8280: PUSH
8281: LD_INT 21
8283: PUSH
8284: LD_INT 2
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PUSH
8291: LD_INT 21
8293: PUSH
8294: LD_INT 3
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: LIST
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PPUSH
8310: CALL_OW 70
8314: ST_TO_ADDR
// if tmp then
8315: LD_VAR 0 3
8319: IFFALSE 8467
// begin repeat wait ( 0 0$1 ) ;
8321: LD_INT 35
8323: PPUSH
8324: CALL_OW 67
// tmp := FilterUnitsInArea ( sikorskiOuterArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8328: LD_ADDR_VAR 0 3
8332: PUSH
8333: LD_INT 17
8335: PPUSH
8336: LD_INT 22
8338: PUSH
8339: LD_INT 1
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: LD_INT 21
8351: PUSH
8352: LD_INT 2
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_INT 21
8361: PUSH
8362: LD_INT 3
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PPUSH
8378: CALL_OW 70
8382: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_class , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
8383: LD_ADDR_VAR 0 2
8387: PUSH
8388: LD_INT 22
8390: PUSH
8391: LD_INT 4
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: LD_INT 2
8400: PUSH
8401: LD_INT 25
8403: PUSH
8404: LD_INT 1
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PUSH
8411: LD_INT 21
8413: PUSH
8414: LD_INT 2
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: LIST
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PPUSH
8430: CALL_OW 69
8434: PUSH
8435: FOR_IN
8436: IFFALSE 8458
// ComAttackUnit ( i , tmp [ 1 ] ) ;
8438: LD_VAR 0 2
8442: PPUSH
8443: LD_VAR 0 3
8447: PUSH
8448: LD_INT 1
8450: ARRAY
8451: PPUSH
8452: CALL_OW 115
8456: GO 8435
8458: POP
8459: POP
// until not tmp ;
8460: LD_VAR 0 3
8464: NOT
8465: IFFALSE 8321
// end ; wait ( 0 0$2 ) ;
8467: LD_INT 70
8469: PPUSH
8470: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
8474: LD_ADDR_VAR 0 3
8478: PUSH
8479: LD_INT 22
8481: PUSH
8482: LD_INT 4
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PPUSH
8489: CALL_OW 69
8493: ST_TO_ADDR
// ComAgressiveMove ( tmp , 52 , 54 ) ;
8494: LD_VAR 0 3
8498: PPUSH
8499: LD_INT 52
8501: PPUSH
8502: LD_INT 54
8504: PPUSH
8505: CALL_OW 114
// AddComWait ( tmp , 0 0$05 ) ;
8509: LD_VAR 0 3
8513: PPUSH
8514: LD_INT 175
8516: PPUSH
8517: CALL_OW 202
// wait ( 0 0$5 ) ;
8521: LD_INT 175
8523: PPUSH
8524: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( tmp , [ f_tag , 101 ] ) , 42 , 52 ) ;
8528: LD_VAR 0 3
8532: PPUSH
8533: LD_INT 120
8535: PUSH
8536: LD_INT 101
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PPUSH
8543: CALL_OW 72
8547: PPUSH
8548: LD_INT 42
8550: PPUSH
8551: LD_INT 52
8553: PPUSH
8554: CALL_OW 114
// AddComHold ( UnitFilter ( tmp , [ f_tag , 101 ] ) ) ;
8558: LD_VAR 0 3
8562: PPUSH
8563: LD_INT 120
8565: PUSH
8566: LD_INT 101
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: PPUSH
8573: CALL_OW 72
8577: PPUSH
8578: CALL_OW 200
// ComAgressiveMove ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) , 34 , 47 ) ;
8582: LD_VAR 0 3
8586: PPUSH
8587: LD_INT 120
8589: PUSH
8590: LD_INT 101
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: LD_INT 25
8599: PUSH
8600: LD_INT 4
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PPUSH
8611: CALL_OW 72
8615: PPUSH
8616: LD_INT 34
8618: PPUSH
8619: LD_INT 47
8621: PPUSH
8622: CALL_OW 114
// AddComFree ( UnitFilter ( tmp , [ [ f_tag , 101 ] , [ f_class , 4 ] ] ) ) ;
8626: LD_VAR 0 3
8630: PPUSH
8631: LD_INT 120
8633: PUSH
8634: LD_INT 101
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 25
8643: PUSH
8644: LD_INT 4
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 72
8659: PPUSH
8660: CALL_OW 199
// filter := UnitFilter ( tmp , [ f_type , unit_vehicle ] ) ;
8664: LD_ADDR_VAR 0 7
8668: PUSH
8669: LD_VAR 0 3
8673: PPUSH
8674: LD_INT 21
8676: PUSH
8677: LD_INT 2
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PPUSH
8684: CALL_OW 72
8688: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
8689: LD_ADDR_VAR 0 4
8693: PUSH
8694: LD_INT 81
8696: PUSH
8697: LD_INT 1
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PPUSH
8704: CALL_OW 69
8708: ST_TO_ADDR
// points := [ [ 57 , 66 ] , [ 62 , 58 ] ] ;
8709: LD_ADDR_VAR 0 5
8713: PUSH
8714: LD_INT 57
8716: PUSH
8717: LD_INT 66
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PUSH
8724: LD_INT 62
8726: PUSH
8727: LD_INT 58
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8738: LD_INT 35
8740: PPUSH
8741: CALL_OW 67
// for i in filter do
8745: LD_ADDR_VAR 0 2
8749: PUSH
8750: LD_VAR 0 7
8754: PUSH
8755: FOR_IN
8756: IFFALSE 9190
// begin if IsDead ( i ) then
8758: LD_VAR 0 2
8762: PPUSH
8763: CALL_OW 301
8767: IFFALSE 8787
// begin filter := filter diff i ;
8769: LD_ADDR_VAR 0 7
8773: PUSH
8774: LD_VAR 0 7
8778: PUSH
8779: LD_VAR 0 2
8783: DIFF
8784: ST_TO_ADDR
// continue ;
8785: GO 8755
// end ; tmp := IsDrivenBy ( i ) ;
8787: LD_ADDR_VAR 0 3
8791: PUSH
8792: LD_VAR 0 2
8796: PPUSH
8797: CALL_OW 311
8801: ST_TO_ADDR
// if not tmp then
8802: LD_VAR 0 3
8806: NOT
8807: IFFALSE 8811
// continue ;
8809: GO 8755
// if GetFuel ( i ) > 30 and GetTag ( i ) = 2 then
8811: LD_VAR 0 2
8815: PPUSH
8816: CALL_OW 261
8820: PUSH
8821: LD_INT 30
8823: GREATER
8824: IFFALSE 8841
8826: PUSH
8827: LD_VAR 0 2
8831: PPUSH
8832: CALL_OW 110
8836: PUSH
8837: LD_INT 2
8839: EQUAL
8840: AND
8841: IFFALSE 8857
// SetTag ( i , 0 ) else
8843: LD_VAR 0 2
8847: PPUSH
8848: LD_INT 0
8850: PPUSH
8851: CALL_OW 109
8855: GO 8886
// if GetTag ( i ) = 2 then
8857: LD_VAR 0 2
8861: PPUSH
8862: CALL_OW 110
8866: PUSH
8867: LD_INT 2
8869: EQUAL
8870: IFFALSE 8886
// begin ComMoveUnit ( i , amDepot ) ;
8872: LD_VAR 0 2
8876: PPUSH
8877: LD_EXP 31
8881: PPUSH
8882: CALL_OW 112
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
8886: LD_VAR 0 2
8890: PPUSH
8891: CALL_OW 256
8895: PUSH
8896: LD_INT 600
8898: GREATEREQUAL
8899: IFFALSE 8913
8901: PUSH
8902: LD_VAR 0 2
8906: PPUSH
8907: CALL_OW 110
8911: NOT
8912: AND
8913: IFFALSE 8939
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8915: LD_VAR 0 2
8919: PPUSH
8920: LD_VAR 0 4
8924: PPUSH
8925: LD_VAR 0 2
8929: PPUSH
8930: CALL_OW 74
8934: PPUSH
8935: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
8939: LD_VAR 0 2
8943: PPUSH
8944: CALL_OW 256
8948: PUSH
8949: LD_INT 600
8951: LESS
8952: IFFALSE 8966
8954: PUSH
8955: LD_VAR 0 2
8959: PPUSH
8960: CALL_OW 110
8964: NOT
8965: AND
8966: IFFALSE 9042
// begin SetTag ( i , 1 ) ;
8968: LD_VAR 0 2
8972: PPUSH
8973: LD_INT 1
8975: PPUSH
8976: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
8980: LD_ADDR_VAR 0 6
8984: PUSH
8985: LD_VAR 0 2
8989: PPUSH
8990: LD_VAR 0 5
8994: PPUSH
8995: CALL 84885 0 2
8999: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
9000: LD_VAR 0 2
9004: PPUSH
9005: LD_VAR 0 6
9009: PUSH
9010: LD_INT 1
9012: ARRAY
9013: PPUSH
9014: LD_VAR 0 6
9018: PUSH
9019: LD_INT 2
9021: ARRAY
9022: PPUSH
9023: CALL_OW 111
// AddComMoveXY ( i , 40 , 49 ) ;
9027: LD_VAR 0 2
9031: PPUSH
9032: LD_INT 40
9034: PPUSH
9035: LD_INT 49
9037: PPUSH
9038: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 40 , 49 ) < 9 and tmp then
9042: LD_VAR 0 2
9046: PPUSH
9047: CALL_OW 110
9051: PUSH
9052: LD_INT 1
9054: EQUAL
9055: IFFALSE 9078
9057: PUSH
9058: LD_VAR 0 2
9062: PPUSH
9063: LD_INT 40
9065: PPUSH
9066: LD_INT 49
9068: PPUSH
9069: CALL_OW 297
9073: PUSH
9074: LD_INT 9
9076: LESS
9077: AND
9078: IFFALSE 9086
9080: PUSH
9081: LD_VAR 0 3
9085: AND
9086: IFFALSE 9188
// begin ComExitVehicle ( tmp ) ;
9088: LD_VAR 0 3
9092: PPUSH
9093: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
9097: LD_VAR 0 3
9101: PPUSH
9102: LD_VAR 0 2
9106: PPUSH
9107: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9111: LD_INT 35
9113: PPUSH
9114: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9118: LD_VAR 0 2
9122: PPUSH
9123: CALL_OW 256
9127: PUSH
9128: LD_INT 1000
9130: EQUAL
9131: IFFALSE 9111
// ComEnterUnit ( tmp , i ) ;
9133: LD_VAR 0 3
9137: PPUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: CALL_OW 120
// if GetFuel ( i ) <= 30 then
9147: LD_VAR 0 2
9151: PPUSH
9152: CALL_OW 261
9156: PUSH
9157: LD_INT 30
9159: LESSEQUAL
9160: IFFALSE 9176
// SetTag ( i , 2 ) else
9162: LD_VAR 0 2
9166: PPUSH
9167: LD_INT 2
9169: PPUSH
9170: CALL_OW 109
9174: GO 9188
// SetTag ( i , 0 ) ;
9176: LD_VAR 0 2
9180: PPUSH
9181: LD_INT 0
9183: PPUSH
9184: CALL_OW 109
// end ; end ;
9188: GO 8755
9190: POP
9191: POP
// until not filter ;
9192: LD_VAR 0 7
9196: NOT
9197: IFFALSE 8738
// end ; end_of_file
9199: LD_VAR 0 1
9203: RET
// export ruCommander ; export ruMechCounter , ruMobile , ruBuildList , russianAttackers ; export function PrepareRussian ; var i , j , tmp , weapons ; begin
9204: LD_INT 0
9206: PPUSH
9207: PPUSH
9208: PPUSH
9209: PPUSH
9210: PPUSH
// uc_side := 3 ;
9211: LD_ADDR_OWVAR 20
9215: PUSH
9216: LD_INT 3
9218: ST_TO_ADDR
// uc_nation := 3 ;
9219: LD_ADDR_OWVAR 21
9223: PUSH
9224: LD_INT 3
9226: ST_TO_ADDR
// ruMechCounter := [ 8 , 11 , 14 , 17 ] [ Difficulty ] ;
9227: LD_ADDR_EXP 33
9231: PUSH
9232: LD_INT 8
9234: PUSH
9235: LD_INT 11
9237: PUSH
9238: LD_INT 14
9240: PUSH
9241: LD_INT 17
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: PUSH
9250: LD_OWVAR 67
9254: ARRAY
9255: ST_TO_ADDR
// ruMobile := [ ] ;
9256: LD_ADDR_EXP 34
9260: PUSH
9261: EMPTY
9262: ST_TO_ADDR
// ruBuildList := [ ] ;
9263: LD_ADDR_EXP 35
9267: PUSH
9268: EMPTY
9269: ST_TO_ADDR
// russianAttackers := [ ] ;
9270: LD_ADDR_EXP 36
9274: PUSH
9275: EMPTY
9276: ST_TO_ADDR
// weapons := [ ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
9277: LD_ADDR_VAR 0 5
9281: PUSH
9282: LD_INT 43
9284: PUSH
9285: LD_INT 44
9287: PUSH
9288: LD_INT 46
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: LIST
9295: ST_TO_ADDR
// if Difficulty > 2 then
9296: LD_OWVAR 67
9300: PUSH
9301: LD_INT 2
9303: GREATER
9304: IFFALSE 9327
// weapons := weapons ^ [ ru_rocket_launcher , ru_heavy_gun ] ;
9306: LD_ADDR_VAR 0 5
9310: PUSH
9311: LD_VAR 0 5
9315: PUSH
9316: LD_INT 45
9318: PUSH
9319: LD_INT 46
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: ADD
9326: ST_TO_ADDR
// ruCommander := NewCharacter ( Borodin ) ;
9327: LD_ADDR_EXP 32
9331: PUSH
9332: LD_STRING Borodin
9334: PPUSH
9335: CALL_OW 25
9339: ST_TO_ADDR
// PlaceHumanInUnit ( ruCommander , ruDep ) ;
9340: LD_EXP 32
9344: PPUSH
9345: LD_INT 28
9347: PPUSH
9348: CALL_OW 52
// SetResourceType ( GetBase ( ruDep ) , 1 , [ 3500 , 4500 , 5500 , 6000 ] [ Difficulty ] ) ;
9352: LD_INT 28
9354: PPUSH
9355: CALL_OW 274
9359: PPUSH
9360: LD_INT 1
9362: PPUSH
9363: LD_INT 3500
9365: PUSH
9366: LD_INT 4500
9368: PUSH
9369: LD_INT 5500
9371: PUSH
9372: LD_INT 6000
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: PUSH
9381: LD_OWVAR 67
9385: ARRAY
9386: PPUSH
9387: CALL_OW 277
// SetResourceType ( GetBase ( ruDep ) , 2 , 1500 ) ;
9391: LD_INT 28
9393: PPUSH
9394: CALL_OW 274
9398: PPUSH
9399: LD_INT 2
9401: PPUSH
9402: LD_INT 1500
9404: PPUSH
9405: CALL_OW 277
// if Difficulty > 2 then
9409: LD_OWVAR 67
9413: PUSH
9414: LD_INT 2
9416: GREATER
9417: IFFALSE 9541
// begin tmp := [ [ 99 , 130 , 2 ] , [ 121 , 127 , 4 ] , [ 117 , 121 , 4 ] ] ;
9419: LD_ADDR_VAR 0 4
9423: PUSH
9424: LD_INT 99
9426: PUSH
9427: LD_INT 130
9429: PUSH
9430: LD_INT 2
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 121
9440: PUSH
9441: LD_INT 127
9443: PUSH
9444: LD_INT 4
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 117
9454: PUSH
9455: LD_INT 121
9457: PUSH
9458: LD_INT 4
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// for i in tmp do
9471: LD_ADDR_VAR 0 2
9475: PUSH
9476: LD_VAR 0 4
9480: PUSH
9481: FOR_IN
9482: IFFALSE 9539
// begin bc_type := b_turret ;
9484: LD_ADDR_OWVAR 42
9488: PUSH
9489: LD_INT 33
9491: ST_TO_ADDR
// bc_level := 2 + Difficulty ;
9492: LD_ADDR_OWVAR 43
9496: PUSH
9497: LD_INT 2
9499: PUSH
9500: LD_OWVAR 67
9504: PLUS
9505: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
9506: LD_VAR 0 2
9510: PUSH
9511: LD_INT 1
9513: ARRAY
9514: PPUSH
9515: LD_VAR 0 2
9519: PUSH
9520: LD_INT 2
9522: ARRAY
9523: PPUSH
9524: LD_VAR 0 2
9528: PUSH
9529: LD_INT 3
9531: ARRAY
9532: PPUSH
9533: CALL_OW 47
// end ;
9537: GO 9481
9539: POP
9540: POP
// end ; for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
9541: LD_ADDR_VAR 0 2
9545: PUSH
9546: LD_INT 22
9548: PUSH
9549: LD_INT 3
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: LD_INT 21
9558: PUSH
9559: LD_INT 3
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PPUSH
9570: CALL_OW 69
9574: PUSH
9575: FOR_IN
9576: IFFALSE 9598
// SetBLevel ( i , 2 + Difficulty ) ;
9578: LD_VAR 0 2
9582: PPUSH
9583: LD_INT 2
9585: PUSH
9586: LD_OWVAR 67
9590: PLUS
9591: PPUSH
9592: CALL_OW 241
9596: GO 9575
9598: POP
9599: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
9600: LD_ADDR_VAR 0 4
9604: PUSH
9605: LD_INT 22
9607: PUSH
9608: LD_INT 3
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 2
9617: PUSH
9618: LD_INT 30
9620: PUSH
9621: LD_INT 32
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 30
9630: PUSH
9631: LD_INT 33
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PPUSH
9647: CALL_OW 69
9651: ST_TO_ADDR
// for i in tmp do
9652: LD_ADDR_VAR 0 2
9656: PUSH
9657: LD_VAR 0 4
9661: PUSH
9662: FOR_IN
9663: IFFALSE 9695
// PlaceWeaponTurret ( i , weapons [ rand ( 1 , weapons ) ] ) ;
9665: LD_VAR 0 2
9669: PPUSH
9670: LD_VAR 0 5
9674: PUSH
9675: LD_INT 1
9677: PPUSH
9678: LD_VAR 0 5
9682: PPUSH
9683: CALL_OW 12
9687: ARRAY
9688: PPUSH
9689: CALL_OW 431
9693: GO 9662
9695: POP
9696: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
9697: LD_ADDR_VAR 0 2
9701: PUSH
9702: LD_INT 22
9704: PUSH
9705: LD_INT 3
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: LD_INT 30
9714: PUSH
9715: LD_INT 32
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PPUSH
9726: CALL_OW 69
9730: PUSH
9731: FOR_IN
9732: IFFALSE 9781
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9734: LD_INT 0
9736: PPUSH
9737: LD_INT 5
9739: PUSH
9740: LD_INT 6
9742: PUSH
9743: LD_INT 7
9745: PUSH
9746: LD_INT 8
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: PUSH
9755: LD_OWVAR 67
9759: ARRAY
9760: PPUSH
9761: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9765: CALL_OW 44
9769: PPUSH
9770: LD_VAR 0 2
9774: PPUSH
9775: CALL_OW 52
// end ;
9779: GO 9731
9781: POP
9782: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) do
9783: LD_ADDR_VAR 0 2
9787: PUSH
9788: LD_INT 22
9790: PUSH
9791: LD_INT 3
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 30
9800: PUSH
9801: LD_INT 5
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PPUSH
9812: CALL_OW 69
9816: PUSH
9817: FOR_IN
9818: IFFALSE 9908
// begin for j := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
9820: LD_ADDR_VAR 0 3
9824: PUSH
9825: DOUBLE
9826: LD_INT 1
9828: DEC
9829: ST_TO_ADDR
9830: LD_INT 2
9832: PUSH
9833: LD_INT 3
9835: PUSH
9836: LD_INT 4
9838: PUSH
9839: LD_INT 5
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: PUSH
9848: LD_OWVAR 67
9852: ARRAY
9853: PUSH
9854: FOR_TO
9855: IFFALSE 9904
// begin PrepareSoldier ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
9857: LD_INT 0
9859: PPUSH
9860: LD_INT 5
9862: PUSH
9863: LD_INT 6
9865: PUSH
9866: LD_INT 7
9868: PUSH
9869: LD_INT 8
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: LD_OWVAR 67
9882: ARRAY
9883: PPUSH
9884: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
9888: CALL_OW 44
9892: PPUSH
9893: LD_VAR 0 2
9897: PPUSH
9898: CALL_OW 52
// end ;
9902: GO 9854
9904: POP
9905: POP
// end ;
9906: GO 9817
9908: POP
9909: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
9910: LD_ADDR_VAR 0 2
9914: PUSH
9915: DOUBLE
9916: LD_INT 1
9918: DEC
9919: ST_TO_ADDR
9920: LD_INT 3
9922: PUSH
9923: LD_INT 4
9925: PUSH
9926: LD_INT 5
9928: PUSH
9929: LD_INT 5
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: PUSH
9938: LD_OWVAR 67
9942: ARRAY
9943: PUSH
9944: FOR_TO
9945: IFFALSE 9992
// begin PrepareEngineer ( false , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
9947: LD_INT 0
9949: PPUSH
9950: LD_INT 4
9952: PUSH
9953: LD_INT 5
9955: PUSH
9956: LD_INT 5
9958: PUSH
9959: LD_INT 6
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: PUSH
9968: LD_OWVAR 67
9972: ARRAY
9973: PPUSH
9974: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , ruDep ) ;
9978: CALL_OW 44
9982: PPUSH
9983: LD_INT 28
9985: PPUSH
9986: CALL_OW 52
// end ;
9990: GO 9944
9992: POP
9993: POP
// for i := 1 to 2 do
9994: LD_ADDR_VAR 0 2
9998: PUSH
9999: DOUBLE
10000: LD_INT 1
10002: DEC
10003: ST_TO_ADDR
10004: LD_INT 2
10006: PUSH
10007: FOR_TO
10008: IFFALSE 10042
// begin PrepareScientist ( false , 6 ) ;
10010: LD_INT 0
10012: PPUSH
10013: LD_INT 6
10015: PPUSH
10016: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 81 , 93 ) ) ;
10020: CALL_OW 44
10024: PPUSH
10025: LD_INT 81
10027: PPUSH
10028: LD_INT 93
10030: PPUSH
10031: CALL_OW 428
10035: PPUSH
10036: CALL_OW 52
// end ;
10040: GO 10007
10042: POP
10043: POP
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay , 100 ) ;
10044: LD_INT 22
10046: PPUSH
10047: LD_INT 1
10049: PPUSH
10050: LD_INT 3
10052: PPUSH
10053: LD_INT 51
10055: PPUSH
10056: LD_INT 100
10058: PPUSH
10059: CALL 48189 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 3 , false ) ;
10063: CALL_OW 45
10067: PPUSH
10068: LD_INT 91
10070: PPUSH
10071: LD_INT 94
10073: PPUSH
10074: LD_INT 3
10076: PPUSH
10077: LD_INT 0
10079: PPUSH
10080: CALL_OW 50
// for i := 1 to 2 do
10084: LD_ADDR_VAR 0 2
10088: PUSH
10089: DOUBLE
10090: LD_INT 1
10092: DEC
10093: ST_TO_ADDR
10094: LD_INT 2
10096: PUSH
10097: FOR_TO
10098: IFFALSE 10142
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_computer , ru_crane , 100 ) ;
10100: LD_INT 22
10102: PPUSH
10103: LD_INT 1
10105: PPUSH
10106: LD_INT 3
10108: PPUSH
10109: LD_INT 52
10111: PPUSH
10112: LD_INT 100
10114: PPUSH
10115: CALL 48189 0 5
// PlaceUnitXYR ( CreateVehicle , 91 , 94 , 4 , false ) ;
10119: CALL_OW 45
10123: PPUSH
10124: LD_INT 91
10126: PPUSH
10127: LD_INT 94
10129: PPUSH
10130: LD_INT 4
10132: PPUSH
10133: LD_INT 0
10135: PPUSH
10136: CALL_OW 50
// end ;
10140: GO 10097
10142: POP
10143: POP
// end ;
10144: LD_VAR 0 1
10148: RET
// export function PrepareStartRussianAttack ; var i , un , veh , tmp ; begin
10149: LD_INT 0
10151: PPUSH
10152: PPUSH
10153: PPUSH
10154: PPUSH
10155: PPUSH
// uc_side := 3 ;
10156: LD_ADDR_OWVAR 20
10160: PUSH
10161: LD_INT 3
10163: ST_TO_ADDR
// uc_nation := 3 ;
10164: LD_ADDR_OWVAR 21
10168: PUSH
10169: LD_INT 3
10171: ST_TO_ADDR
// for i := 1 to 4 do
10172: LD_ADDR_VAR 0 2
10176: PUSH
10177: DOUBLE
10178: LD_INT 1
10180: DEC
10181: ST_TO_ADDR
10182: LD_INT 4
10184: PUSH
10185: FOR_TO
10186: IFFALSE 10313
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10188: LD_INT 22
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: LD_INT 1
10196: PPUSH
10197: LD_INT 42
10199: PUSH
10200: LD_INT 43
10202: PUSH
10203: LD_INT 44
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: PUSH
10211: LD_INT 1
10213: PPUSH
10214: LD_INT 3
10216: PPUSH
10217: CALL_OW 12
10221: ARRAY
10222: PPUSH
10223: LD_INT 40
10225: PPUSH
10226: CALL 48189 0 5
// veh := CreateVehicle ;
10230: LD_ADDR_VAR 0 4
10234: PUSH
10235: CALL_OW 45
10239: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10240: LD_VAR 0 4
10244: PPUSH
10245: LD_INT 5
10247: PPUSH
10248: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea1 , false ) ;
10252: LD_VAR 0 4
10256: PPUSH
10257: LD_INT 7
10259: PPUSH
10260: LD_INT 0
10262: PPUSH
10263: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10267: LD_INT 0
10269: PPUSH
10270: LD_INT 5
10272: PPUSH
10273: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10277: CALL_OW 44
10281: PPUSH
10282: LD_VAR 0 4
10286: PPUSH
10287: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10291: LD_ADDR_VAR 0 5
10295: PUSH
10296: LD_VAR 0 5
10300: PPUSH
10301: LD_VAR 0 4
10305: PPUSH
10306: CALL 81369 0 2
10310: ST_TO_ADDR
// end ;
10311: GO 10185
10313: POP
10314: POP
// for i := 1 to 3 do
10315: LD_ADDR_VAR 0 2
10319: PUSH
10320: DOUBLE
10321: LD_INT 1
10323: DEC
10324: ST_TO_ADDR
10325: LD_INT 3
10327: PUSH
10328: FOR_TO
10329: IFFALSE 10456
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ rand ( 1 , 3 ) ] , 40 ) ;
10331: LD_INT 22
10333: PPUSH
10334: LD_INT 1
10336: PPUSH
10337: LD_INT 1
10339: PPUSH
10340: LD_INT 42
10342: PUSH
10343: LD_INT 43
10345: PUSH
10346: LD_INT 44
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 1
10356: PPUSH
10357: LD_INT 3
10359: PPUSH
10360: CALL_OW 12
10364: ARRAY
10365: PPUSH
10366: LD_INT 40
10368: PPUSH
10369: CALL 48189 0 5
// veh := CreateVehicle ;
10373: LD_ADDR_VAR 0 4
10377: PUSH
10378: CALL_OW 45
10382: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10383: LD_VAR 0 4
10387: PPUSH
10388: LD_INT 5
10390: PPUSH
10391: CALL_OW 233
// PlaceUnitArea ( veh , russianAttackArea2 , false ) ;
10395: LD_VAR 0 4
10399: PPUSH
10400: LD_INT 8
10402: PPUSH
10403: LD_INT 0
10405: PPUSH
10406: CALL_OW 49
// PrepareMechanic ( false , 5 ) ;
10410: LD_INT 0
10412: PPUSH
10413: LD_INT 5
10415: PPUSH
10416: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10420: CALL_OW 44
10424: PPUSH
10425: LD_VAR 0 4
10429: PPUSH
10430: CALL_OW 52
// tmp := Join ( tmp , veh ) ;
10434: LD_ADDR_VAR 0 5
10438: PUSH
10439: LD_VAR 0 5
10443: PPUSH
10444: LD_VAR 0 4
10448: PPUSH
10449: CALL 81369 0 2
10453: ST_TO_ADDR
// end ;
10454: GO 10328
10456: POP
10457: POP
// for i := 1 to 2 do
10458: LD_ADDR_VAR 0 2
10462: PUSH
10463: DOUBLE
10464: LD_INT 1
10466: DEC
10467: ST_TO_ADDR
10468: LD_INT 2
10470: PUSH
10471: FOR_TO
10472: IFFALSE 10531
// begin PrepareSoldier ( false , 5 ) ;
10474: LD_INT 0
10476: PPUSH
10477: LD_INT 5
10479: PPUSH
10480: CALL_OW 381
// un := CreateHuman ;
10484: LD_ADDR_VAR 0 3
10488: PUSH
10489: CALL_OW 44
10493: ST_TO_ADDR
// PlaceUnitArea ( un , russianAttackArea2 , false ) ;
10494: LD_VAR 0 3
10498: PPUSH
10499: LD_INT 8
10501: PPUSH
10502: LD_INT 0
10504: PPUSH
10505: CALL_OW 49
// tmp := Join ( tmp , un ) ;
10509: LD_ADDR_VAR 0 5
10513: PUSH
10514: LD_VAR 0 5
10518: PPUSH
10519: LD_VAR 0 3
10523: PPUSH
10524: CALL 81369 0 2
10528: ST_TO_ADDR
// end ;
10529: GO 10471
10531: POP
10532: POP
// for i in tmp do
10533: LD_ADDR_VAR 0 2
10537: PUSH
10538: LD_VAR 0 5
10542: PUSH
10543: FOR_IN
10544: IFFALSE 10563
// ComAgressiveMove ( i , 51 , 16 ) ;
10546: LD_VAR 0 2
10550: PPUSH
10551: LD_INT 51
10553: PPUSH
10554: LD_INT 16
10556: PPUSH
10557: CALL_OW 114
10561: GO 10543
10563: POP
10564: POP
// end ;
10565: LD_VAR 0 1
10569: RET
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
10570: LD_EXP 34
10574: IFFALSE 11151
10576: GO 10578
10578: DISABLE
10579: LD_INT 0
10581: PPUSH
10582: PPUSH
10583: PPUSH
// begin enable ;
10584: ENABLE
// if not ruMobile then
10585: LD_EXP 34
10589: NOT
10590: IFFALSE 10594
// exit ;
10592: GO 11151
// for i in ruMobile do
10594: LD_ADDR_VAR 0 1
10598: PUSH
10599: LD_EXP 34
10603: PUSH
10604: FOR_IN
10605: IFFALSE 11149
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
10607: LD_VAR 0 1
10611: PPUSH
10612: CALL_OW 302
10616: NOT
10617: IFTRUE 10634
10619: PUSH
10620: LD_VAR 0 1
10624: PPUSH
10625: CALL_OW 255
10629: PUSH
10630: LD_INT 3
10632: NONEQUAL
10633: OR
10634: IFFALSE 10654
// begin ruMobile := ruMobile diff i ;
10636: LD_ADDR_EXP 34
10640: PUSH
10641: LD_EXP 34
10645: PUSH
10646: LD_VAR 0 1
10650: DIFF
10651: ST_TO_ADDR
// continue ;
10652: GO 10604
// end ; if GetTag ( i ) = 300 then
10654: LD_VAR 0 1
10658: PPUSH
10659: CALL_OW 110
10663: PUSH
10664: LD_INT 300
10666: EQUAL
10667: IFFALSE 10782
// begin if GetFuel ( i ) < 50 then
10669: LD_VAR 0 1
10673: PPUSH
10674: CALL_OW 261
10678: PUSH
10679: LD_INT 50
10681: LESS
10682: IFFALSE 10741
// begin ComMoveXY ( i , 93 , 100 ) ;
10684: LD_VAR 0 1
10688: PPUSH
10689: LD_INT 93
10691: PPUSH
10692: LD_INT 100
10694: PPUSH
10695: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10699: LD_INT 35
10701: PPUSH
10702: CALL_OW 67
// until GetDistUnitXY ( i , 93 , 100 ) < 4 ;
10706: LD_VAR 0 1
10710: PPUSH
10711: LD_INT 93
10713: PPUSH
10714: LD_INT 100
10716: PPUSH
10717: CALL_OW 297
10721: PUSH
10722: LD_INT 4
10724: LESS
10725: IFFALSE 10699
// SetFuel ( i , 100 ) ;
10727: LD_VAR 0 1
10731: PPUSH
10732: LD_INT 100
10734: PPUSH
10735: CALL_OW 240
// end else
10739: GO 10782
// if not IsInArea ( i , ruParkingArea ) then
10741: LD_VAR 0 1
10745: PPUSH
10746: LD_INT 10
10748: PPUSH
10749: CALL_OW 308
10753: NOT
10754: IFFALSE 10770
// ComMoveToArea ( i , ruParkingArea ) else
10756: LD_VAR 0 1
10760: PPUSH
10761: LD_INT 10
10763: PPUSH
10764: CALL_OW 113
10768: GO 10782
// SetTag ( i , 301 ) ;
10770: LD_VAR 0 1
10774: PPUSH
10775: LD_INT 301
10777: PPUSH
10778: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10782: LD_VAR 0 1
10786: PPUSH
10787: CALL_OW 110
10791: PUSH
10792: LD_INT 301
10794: EQUAL
10795: IFFALSE 10925
// begin if GetLives ( i ) < 1000 then
10797: LD_VAR 0 1
10801: PPUSH
10802: CALL_OW 256
10806: PUSH
10807: LD_INT 1000
10809: LESS
10810: IFFALSE 10902
// begin if not IsDrivenBy ( i ) then
10812: LD_VAR 0 1
10816: PPUSH
10817: CALL_OW 311
10821: NOT
10822: IFFALSE 10826
// continue ;
10824: GO 10604
// mech := IsDrivenBy ( i ) ;
10826: LD_ADDR_VAR 0 2
10830: PUSH
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 311
10840: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10841: LD_VAR 0 2
10845: PPUSH
10846: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10850: LD_VAR 0 2
10854: PPUSH
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10864: LD_INT 35
10866: PPUSH
10867: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10871: LD_VAR 0 1
10875: PPUSH
10876: CALL_OW 256
10880: PUSH
10881: LD_INT 1000
10883: EQUAL
10884: IFFALSE 10864
// ComEnterUnit ( mech , i ) ;
10886: LD_VAR 0 2
10890: PPUSH
10891: LD_VAR 0 1
10895: PPUSH
10896: CALL_OW 120
// end else
10900: GO 10925
// if IsDrivenBy ( i ) then
10902: LD_VAR 0 1
10906: PPUSH
10907: CALL_OW 311
10911: IFFALSE 10925
// SetTag ( i , 0 ) ;
10913: LD_VAR 0 1
10917: PPUSH
10918: LD_INT 0
10920: PPUSH
10921: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10925: LD_VAR 0 1
10929: PPUSH
10930: CALL_OW 110
10934: PUSH
10935: LD_INT 300
10937: LESS
10938: IFFALSE 11147
// begin enemy := FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) ;
10940: LD_ADDR_VAR 0 3
10944: PUSH
10945: LD_INT 11
10947: PPUSH
10948: LD_INT 81
10950: PUSH
10951: LD_INT 3
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PPUSH
10958: CALL_OW 70
10962: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10963: LD_VAR 0 1
10967: PPUSH
10968: CALL_OW 256
10972: PUSH
10973: LD_INT 650
10975: LESS
10976: IFFALSE 11001
// begin ComStop ( i ) ;
10978: LD_VAR 0 1
10982: PPUSH
10983: CALL_OW 141
// SetTag ( i , 300 ) ;
10987: LD_VAR 0 1
10991: PPUSH
10992: LD_INT 300
10994: PPUSH
10995: CALL_OW 109
// continue ;
10999: GO 10604
// end ; if enemy then
11001: LD_VAR 0 3
11005: IFFALSE 11045
// begin if not HasTask ( i ) then
11007: LD_VAR 0 1
11011: PPUSH
11012: CALL_OW 314
11016: NOT
11017: IFFALSE 11043
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11019: LD_VAR 0 1
11023: PPUSH
11024: LD_VAR 0 3
11028: PPUSH
11029: LD_VAR 0 1
11033: PPUSH
11034: CALL_OW 74
11038: PPUSH
11039: CALL_OW 115
// end else
11043: GO 11147
// if ruMobile > 1 then
11045: LD_EXP 34
11049: PUSH
11050: LD_INT 1
11052: GREATER
11053: IFFALSE 11147
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
11055: LD_ADDR_VAR 0 3
11059: PUSH
11060: LD_INT 81
11062: PUSH
11063: LD_INT 3
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PPUSH
11070: CALL_OW 69
11074: ST_TO_ADDR
// if enemy then
11075: LD_VAR 0 3
11079: IFFALSE 11147
// AgressiveMove ( i , [ [ 116 , 95 ] , [ 84 , 68 ] , [ 58 , 53 ] , [ 44 , 35 ] , [ 45 , 23 ] ] ) ;
11081: LD_VAR 0 1
11085: PPUSH
11086: LD_INT 116
11088: PUSH
11089: LD_INT 95
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 84
11098: PUSH
11099: LD_INT 68
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 58
11108: PUSH
11109: LD_INT 53
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 44
11118: PUSH
11119: LD_INT 35
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 45
11128: PUSH
11129: LD_INT 23
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL 84135 0 2
// end ; end ; end ;
11147: GO 10604
11149: POP
11150: POP
// end ;
11151: PPOPN 3
11153: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
11154: LD_INT 3
11156: PUSH
11157: LD_INT 22
11159: PUSH
11160: LD_INT 1
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 32
11173: PUSH
11174: LD_INT 1
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PPUSH
11185: CALL_OW 69
11189: IFFALSE 11273
11191: GO 11193
11193: DISABLE
11194: LD_INT 0
11196: PPUSH
// begin enable ;
11197: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
11198: LD_ADDR_VAR 0 1
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: LD_INT 22
11208: PUSH
11209: LD_INT 1
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 32
11222: PUSH
11223: LD_INT 1
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PPUSH
11234: CALL_OW 69
11238: PUSH
11239: FOR_IN
11240: IFFALSE 11271
// if GetFuel ( i ) < 3 then
11242: LD_VAR 0 1
11246: PPUSH
11247: CALL_OW 261
11251: PUSH
11252: LD_INT 3
11254: LESS
11255: IFFALSE 11269
// SetFuel ( i , 3 ) ;
11257: LD_VAR 0 1
11261: PPUSH
11262: LD_INT 3
11264: PPUSH
11265: CALL_OW 240
11269: GO 11239
11271: POP
11272: POP
// end ;
11273: PPOPN 1
11275: END
// every 0 0$30 trigger IsOk ( ruFac ) and BuildingStatus ( ruFac ) = bs_idle do var chassis , weapon ;
11276: LD_INT 29
11278: PPUSH
11279: CALL_OW 302
11283: IFFALSE 11298
11285: PUSH
11286: LD_INT 29
11288: PPUSH
11289: CALL_OW 461
11293: PUSH
11294: LD_INT 2
11296: EQUAL
11297: AND
11298: IFFALSE 11537
11300: GO 11302
11302: DISABLE
11303: LD_INT 0
11305: PPUSH
11306: PPUSH
// begin enable ;
11307: ENABLE
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
11308: LD_ADDR_VAR 0 1
11312: PUSH
11313: LD_INT 21
11315: PUSH
11316: LD_INT 22
11318: PUSH
11319: LD_INT 23
11321: PUSH
11322: LD_INT 24
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 1
11333: PPUSH
11334: LD_INT 4
11336: PPUSH
11337: CALL_OW 12
11341: ARRAY
11342: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
11343: LD_ADDR_VAR 0 2
11347: PUSH
11348: LD_INT 42
11350: PUSH
11351: LD_INT 44
11353: PUSH
11354: LD_INT 43
11356: PUSH
11357: LD_INT 46
11359: PUSH
11360: LD_INT 45
11362: PUSH
11363: LD_INT 46
11365: PUSH
11366: LD_INT 45
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: PUSH
11378: LD_OWVAR 67
11382: PUSH
11383: LD_INT 0
11385: PPUSH
11386: LD_INT 3
11388: PPUSH
11389: CALL_OW 12
11393: PLUS
11394: ARRAY
11395: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
11396: LD_VAR 0 1
11400: PUSH
11401: LD_INT 21
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: IN
11411: IFFALSE 11423
11413: PUSH
11414: LD_VAR 0 2
11418: PUSH
11419: LD_INT 46
11421: EQUAL
11422: AND
11423: IFFALSE 11456
// weapon := [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
11425: LD_ADDR_VAR 0 2
11429: PUSH
11430: LD_INT 44
11432: PUSH
11433: LD_INT 45
11435: PUSH
11436: LD_INT 45
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: LD_INT 1
11446: PPUSH
11447: LD_INT 3
11449: PPUSH
11450: CALL_OW 12
11454: ARRAY
11455: ST_TO_ADDR
// if tick < [ 15 15$00 , 12 12$00 , 10 10$00 , 9 9$00 ] [ Difficulty ] then
11456: LD_OWVAR 1
11460: PUSH
11461: LD_INT 31500
11463: PUSH
11464: LD_INT 25200
11466: PUSH
11467: LD_INT 21000
11469: PUSH
11470: LD_INT 18900
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: PUSH
11479: LD_OWVAR 67
11483: ARRAY
11484: LESS
11485: IFFALSE 11514
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
11487: LD_ADDR_VAR 0 2
11491: PUSH
11492: LD_INT 44
11494: PUSH
11495: LD_INT 43
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 1
11504: PPUSH
11505: LD_INT 2
11507: PPUSH
11508: CALL_OW 12
11512: ARRAY
11513: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
11514: LD_INT 29
11516: PPUSH
11517: LD_VAR 0 1
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: LD_INT 1
11527: PPUSH
11528: LD_VAR 0 2
11532: PPUSH
11533: CALL_OW 185
// end ;
11537: PPOPN 2
11539: END
// every 0 0$1 trigger IsOk ( ruDep ) do var i , j , tmp , b , eng , crane , tag , sci , lab , emptyTowers , sol , barracks , e ;
11540: LD_INT 28
11542: PPUSH
11543: CALL_OW 302
11547: IFFALSE 13151
11549: GO 11551
11551: DISABLE
11552: LD_INT 0
11554: PPUSH
11555: PPUSH
11556: PPUSH
11557: PPUSH
11558: PPUSH
11559: PPUSH
11560: PPUSH
11561: PPUSH
11562: PPUSH
11563: PPUSH
11564: PPUSH
11565: PPUSH
11566: PPUSH
// begin enable ;
11567: ENABLE
// b := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
11568: LD_ADDR_VAR 0 4
11572: PUSH
11573: LD_INT 12
11575: PPUSH
11576: LD_INT 3
11578: PUSH
11579: LD_INT 24
11581: PUSH
11582: LD_INT 1000
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 21
11595: PUSH
11596: LD_INT 3
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PPUSH
11607: CALL_OW 70
11611: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11612: LD_ADDR_VAR 0 5
11616: PUSH
11617: LD_INT 22
11619: PUSH
11620: LD_INT 3
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: LD_INT 25
11629: PUSH
11630: LD_INT 2
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PPUSH
11641: CALL_OW 69
11645: ST_TO_ADDR
// crane := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
11646: LD_ADDR_VAR 0 6
11650: PUSH
11651: LD_INT 22
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 34
11663: PUSH
11664: LD_INT 52
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PPUSH
11675: CALL_OW 69
11679: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
11680: LD_ADDR_VAR 0 8
11684: PUSH
11685: LD_INT 22
11687: PUSH
11688: LD_INT 3
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: LD_INT 25
11697: PUSH
11698: LD_INT 4
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PPUSH
11709: CALL_OW 69
11713: ST_TO_ADDR
// lab := HexInfo ( 81 , 93 ) ;
11714: LD_ADDR_VAR 0 9
11718: PUSH
11719: LD_INT 81
11721: PPUSH
11722: LD_INT 93
11724: PPUSH
11725: CALL_OW 428
11729: ST_TO_ADDR
// emptyTowers := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11730: LD_ADDR_VAR 0 10
11734: PUSH
11735: LD_INT 22
11737: PUSH
11738: LD_INT 3
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PUSH
11745: LD_INT 30
11747: PUSH
11748: LD_INT 32
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PUSH
11755: LD_INT 50
11757: PUSH
11758: EMPTY
11759: LIST
11760: PUSH
11761: LD_INT 58
11763: PUSH
11764: EMPTY
11765: LIST
11766: PUSH
11767: LD_INT 3
11769: PUSH
11770: LD_INT 120
11772: PUSH
11773: LD_INT 701
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: PPUSH
11791: CALL_OW 69
11795: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_ok ] , [ f_not , [ f_full ] ] ] ) ;
11796: LD_ADDR_VAR 0 12
11800: PUSH
11801: LD_INT 22
11803: PUSH
11804: LD_INT 3
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 30
11813: PUSH
11814: LD_INT 5
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 50
11823: PUSH
11824: EMPTY
11825: LIST
11826: PUSH
11827: LD_INT 3
11829: PUSH
11830: LD_INT 62
11832: PUSH
11833: EMPTY
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: PPUSH
11846: CALL_OW 69
11850: ST_TO_ADDR
// if emptyTowers then
11851: LD_VAR 0 10
11855: IFFALSE 12118
// begin for i in emptyTowers do
11857: LD_ADDR_VAR 0 1
11861: PUSH
11862: LD_VAR 0 10
11866: PUSH
11867: FOR_IN
11868: IFFALSE 12114
// begin sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_inside ] , [ f_inarea , ruBaseArea ] ] , [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_tag , 701 ] ] ] ) ;
11870: LD_ADDR_VAR 0 11
11874: PUSH
11875: LD_INT 22
11877: PUSH
11878: LD_INT 3
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 2
11887: PUSH
11888: LD_INT 54
11890: PUSH
11891: EMPTY
11892: LIST
11893: PUSH
11894: LD_INT 95
11896: PUSH
11897: LD_INT 12
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 25
11911: PUSH
11912: LD_INT 1
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 50
11921: PUSH
11922: EMPTY
11923: LIST
11924: PUSH
11925: LD_INT 3
11927: PUSH
11928: LD_INT 120
11930: PUSH
11931: LD_INT 701
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: PPUSH
11949: CALL_OW 69
11953: ST_TO_ADDR
// if not sol then
11954: LD_VAR 0 11
11958: NOT
11959: IFFALSE 11963
// break ;
11961: GO 12114
// for j in sol do
11963: LD_ADDR_VAR 0 2
11967: PUSH
11968: LD_VAR 0 11
11972: PUSH
11973: FOR_IN
11974: IFFALSE 12027
// if IsInUnit ( j ) and GetBType ( IsInUnit ( j ) ) = b_bunker then
11976: LD_VAR 0 2
11980: PPUSH
11981: CALL_OW 310
11985: IFFALSE 12007
11987: PUSH
11988: LD_VAR 0 2
11992: PPUSH
11993: CALL_OW 310
11997: PPUSH
11998: CALL_OW 266
12002: PUSH
12003: LD_INT 32
12005: EQUAL
12006: AND
12007: IFFALSE 12025
// sol := sol diff j ;
12009: LD_ADDR_VAR 0 11
12013: PUSH
12014: LD_VAR 0 11
12018: PUSH
12019: LD_VAR 0 2
12023: DIFF
12024: ST_TO_ADDR
12025: GO 11973
12027: POP
12028: POP
// if not sol then
12029: LD_VAR 0 11
12033: NOT
12034: IFFALSE 12038
// break ;
12036: GO 12114
// if IsInUnit ( sol [ 1 ] ) then
12038: LD_VAR 0 11
12042: PUSH
12043: LD_INT 1
12045: ARRAY
12046: PPUSH
12047: CALL_OW 310
12051: IFFALSE 12066
// ComExit ( sol [ 1 ] ) ;
12053: LD_VAR 0 11
12057: PUSH
12058: LD_INT 1
12060: ARRAY
12061: PPUSH
12062: CALL 81767 0 1
// SetTag ( sol [ 1 ] , 701 ) ;
12066: LD_VAR 0 11
12070: PUSH
12071: LD_INT 1
12073: ARRAY
12074: PPUSH
12075: LD_INT 701
12077: PPUSH
12078: CALL_OW 109
// SetTag ( i , 701 ) ;
12082: LD_VAR 0 1
12086: PPUSH
12087: LD_INT 701
12089: PPUSH
12090: CALL_OW 109
// AddComEnterUnit ( sol [ 1 ] , i ) ;
12094: LD_VAR 0 11
12098: PUSH
12099: LD_INT 1
12101: ARRAY
12102: PPUSH
12103: LD_VAR 0 1
12107: PPUSH
12108: CALL_OW 180
// end ;
12112: GO 11867
12114: POP
12115: POP
// end else
12116: GO 12364
// if UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) then
12118: LD_VAR 0 11
12122: PPUSH
12123: LD_INT 3
12125: PUSH
12126: LD_INT 54
12128: PUSH
12129: EMPTY
12130: LIST
12131: PUSH
12132: LD_INT 95
12134: PUSH
12135: LD_INT 12
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 72
12151: IFFALSE 12364
// begin if barracks then
12153: LD_VAR 0 12
12157: IFFALSE 12225
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12159: LD_ADDR_VAR 0 1
12163: PUSH
12164: LD_VAR 0 11
12168: PPUSH
12169: LD_INT 3
12171: PUSH
12172: LD_INT 54
12174: PUSH
12175: EMPTY
12176: LIST
12177: PUSH
12178: LD_INT 95
12180: PUSH
12181: LD_INT 12
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: PPUSH
12193: CALL_OW 72
12197: PUSH
12198: FOR_IN
12199: IFFALSE 12221
// ComEnterUnit ( i , barracks [ 1 ] ) ;
12201: LD_VAR 0 1
12205: PPUSH
12206: LD_VAR 0 12
12210: PUSH
12211: LD_INT 1
12213: ARRAY
12214: PPUSH
12215: CALL_OW 120
12219: GO 12198
12221: POP
12222: POP
// end else
12223: GO 12364
// if FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) then
12225: LD_INT 12
12227: PPUSH
12228: LD_INT 81
12230: PUSH
12231: LD_INT 3
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PPUSH
12238: CALL_OW 70
12242: IFFALSE 12364
// begin for i in UnitFilter ( sol , [ f_not , [ f_inside ] , [ f_inarea , ruBaseArea ] ] ) do
12244: LD_ADDR_VAR 0 1
12248: PUSH
12249: LD_VAR 0 11
12253: PPUSH
12254: LD_INT 3
12256: PUSH
12257: LD_INT 54
12259: PUSH
12260: EMPTY
12261: LIST
12262: PUSH
12263: LD_INT 95
12265: PUSH
12266: LD_INT 12
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: PPUSH
12278: CALL_OW 72
12282: PUSH
12283: FOR_IN
12284: IFFALSE 12362
// begin SetTag ( i , 702 ) ;
12286: LD_VAR 0 1
12290: PPUSH
12291: LD_INT 702
12293: PPUSH
12294: CALL_OW 109
// e := NearestUnitToUnit ( FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) , i ) ;
12298: LD_ADDR_VAR 0 13
12302: PUSH
12303: LD_INT 12
12305: PPUSH
12306: LD_INT 81
12308: PUSH
12309: LD_INT 3
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PPUSH
12316: CALL_OW 70
12320: PPUSH
12321: LD_VAR 0 1
12325: PPUSH
12326: CALL_OW 74
12330: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
12331: LD_VAR 0 1
12335: PPUSH
12336: LD_VAR 0 13
12340: PPUSH
12341: CALL_OW 250
12345: PPUSH
12346: LD_VAR 0 13
12350: PPUSH
12351: CALL_OW 251
12355: PPUSH
12356: CALL_OW 114
// end ;
12360: GO 12283
12362: POP
12363: POP
// end ; end ; tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , ruDefendArea ] , [ f_ok ] , [ f_class , class_soldier ] , [ f_tag , 702 ] ] ) ;
12364: LD_ADDR_VAR 0 3
12368: PUSH
12369: LD_INT 22
12371: PUSH
12372: LD_INT 3
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: LD_INT 95
12381: PUSH
12382: LD_INT 11
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PUSH
12389: LD_INT 50
12391: PUSH
12392: EMPTY
12393: LIST
12394: PUSH
12395: LD_INT 25
12397: PUSH
12398: LD_INT 1
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 120
12407: PUSH
12408: LD_INT 702
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: PPUSH
12422: CALL_OW 69
12426: ST_TO_ADDR
// if tmp then
12427: LD_VAR 0 3
12431: IFFALSE 12477
// for i in tmp do
12433: LD_ADDR_VAR 0 1
12437: PUSH
12438: LD_VAR 0 3
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12475
// begin ComMoveXY ( i , 90 , 94 ) ;
12446: LD_VAR 0 1
12450: PPUSH
12451: LD_INT 90
12453: PPUSH
12454: LD_INT 94
12456: PPUSH
12457: CALL_OW 111
// SetTag ( i , 0 ) ;
12461: LD_VAR 0 1
12465: PPUSH
12466: LD_INT 0
12468: PPUSH
12469: CALL_OW 109
// end ;
12473: GO 12443
12475: POP
12476: POP
// if sci and UnitFilter ( eng , [ f_tag , 2 ] ) then
12477: LD_VAR 0 8
12481: IFFALSE 12504
12483: PUSH
12484: LD_VAR 0 5
12488: PPUSH
12489: LD_INT 120
12491: PUSH
12492: LD_INT 2
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PPUSH
12499: CALL_OW 72
12503: AND
12504: IFFALSE 12517
// ComExitAll ( sci ) else
12506: LD_VAR 0 8
12510: PPUSH
12511: CALL 81850 0 1
12515: GO 12592
// if sci then
12517: LD_VAR 0 8
12521: IFFALSE 12592
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and IsOk ( lab ) then
12523: LD_VAR 0 8
12527: PPUSH
12528: LD_INT 3
12530: PUSH
12531: LD_INT 54
12533: PUSH
12534: EMPTY
12535: LIST
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PPUSH
12541: CALL_OW 72
12545: IFFALSE 12558
12547: PUSH
12548: LD_VAR 0 9
12552: PPUSH
12553: CALL_OW 302
12557: AND
12558: IFFALSE 12592
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , lab ) ;
12560: LD_VAR 0 8
12564: PPUSH
12565: LD_INT 3
12567: PUSH
12568: LD_INT 54
12570: PUSH
12571: EMPTY
12572: LIST
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PPUSH
12578: CALL_OW 72
12582: PPUSH
12583: LD_VAR 0 9
12587: PPUSH
12588: CALL_OW 120
// if UnitFilter ( crane , [ f_ok ] ) and b then
12592: LD_VAR 0 6
12596: PPUSH
12597: LD_INT 50
12599: PUSH
12600: EMPTY
12601: LIST
12602: PPUSH
12603: CALL_OW 72
12607: IFFALSE 12615
12609: PUSH
12610: LD_VAR 0 4
12614: AND
12615: IFFALSE 12646
// ComRepairBuilding ( UnitFilter ( crane , [ f_ok ] ) , b [ 1 ] ) ;
12617: LD_VAR 0 6
12621: PPUSH
12622: LD_INT 50
12624: PUSH
12625: EMPTY
12626: LIST
12627: PPUSH
12628: CALL_OW 72
12632: PPUSH
12633: LD_VAR 0 4
12637: PUSH
12638: LD_INT 1
12640: ARRAY
12641: PPUSH
12642: CALL_OW 130
// if eng then
12646: LD_VAR 0 5
12650: IFFALSE 13151
// begin for i in eng do
12652: LD_ADDR_VAR 0 1
12656: PUSH
12657: LD_VAR 0 5
12661: PUSH
12662: FOR_IN
12663: IFFALSE 13149
// begin tag := GetTag ( i ) ;
12665: LD_ADDR_VAR 0 7
12669: PUSH
12670: LD_VAR 0 1
12674: PPUSH
12675: CALL_OW 110
12679: ST_TO_ADDR
// case tag of 0 :
12680: LD_VAR 0 7
12684: PUSH
12685: LD_INT 0
12687: DOUBLE
12688: EQUAL
12689: IFTRUE 12693
12691: GO 12906
12693: POP
// begin if b then
12694: LD_VAR 0 4
12698: IFFALSE 12714
// begin SetTag ( i , 1 ) ;
12700: LD_VAR 0 1
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: CALL_OW 109
// continue ;
12712: GO 12662
// end ; if not ruBuildList then
12714: LD_EXP 35
12718: NOT
12719: IFFALSE 12735
// ComEnterUnit ( i , ruDep ) else
12721: LD_VAR 0 1
12725: PPUSH
12726: LD_INT 28
12728: PPUSH
12729: CALL_OW 120
12733: GO 12904
// if FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) = 0 and CanBeBuilt ( ruDep , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) then
12735: LD_INT 11
12737: PPUSH
12738: LD_INT 81
12740: PUSH
12741: LD_INT 3
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: PPUSH
12748: CALL_OW 70
12752: PUSH
12753: LD_INT 0
12755: EQUAL
12756: IFFALSE 12819
12758: PUSH
12759: LD_INT 28
12761: PPUSH
12762: LD_EXP 35
12766: PUSH
12767: LD_INT 1
12769: ARRAY
12770: PUSH
12771: LD_INT 1
12773: ARRAY
12774: PPUSH
12775: LD_EXP 35
12779: PUSH
12780: LD_INT 1
12782: ARRAY
12783: PUSH
12784: LD_INT 2
12786: ARRAY
12787: PPUSH
12788: LD_EXP 35
12792: PUSH
12793: LD_INT 1
12795: ARRAY
12796: PUSH
12797: LD_INT 3
12799: ARRAY
12800: PPUSH
12801: LD_EXP 35
12805: PUSH
12806: LD_INT 1
12808: ARRAY
12809: PUSH
12810: LD_INT 4
12812: ARRAY
12813: PPUSH
12814: CALL 56867 0 5
12818: AND
12819: IFFALSE 12904
// begin if IsInUnit ( i ) then
12821: LD_VAR 0 1
12825: PPUSH
12826: CALL_OW 310
12830: IFFALSE 12843
// ComExitBuilding ( i ) else
12832: LD_VAR 0 1
12836: PPUSH
12837: CALL_OW 122
12841: GO 12904
// ComBuild ( i , ruBuildList [ 1 ] [ 1 ] , ruBuildList [ 1 ] [ 2 ] , ruBuildList [ 1 ] [ 3 ] , ruBuildList [ 1 ] [ 4 ] ) ;
12843: LD_VAR 0 1
12847: PPUSH
12848: LD_EXP 35
12852: PUSH
12853: LD_INT 1
12855: ARRAY
12856: PUSH
12857: LD_INT 1
12859: ARRAY
12860: PPUSH
12861: LD_EXP 35
12865: PUSH
12866: LD_INT 1
12868: ARRAY
12869: PUSH
12870: LD_INT 2
12872: ARRAY
12873: PPUSH
12874: LD_EXP 35
12878: PUSH
12879: LD_INT 1
12881: ARRAY
12882: PUSH
12883: LD_INT 3
12885: ARRAY
12886: PPUSH
12887: LD_EXP 35
12891: PUSH
12892: LD_INT 1
12894: ARRAY
12895: PUSH
12896: LD_INT 4
12898: ARRAY
12899: PPUSH
12900: CALL_OW 145
// end ; end ; 1 :
12904: GO 13103
12906: LD_INT 1
12908: DOUBLE
12909: EQUAL
12910: IFTRUE 12914
12912: GO 13017
12914: POP
// begin if not b then
12915: LD_VAR 0 4
12919: NOT
12920: IFFALSE 12936
// begin SetTag ( i , 0 ) ;
12922: LD_VAR 0 1
12926: PPUSH
12927: LD_INT 0
12929: PPUSH
12930: CALL_OW 109
// continue ;
12934: GO 12662
// end ; if IsInUnit ( i ) then
12936: LD_VAR 0 1
12940: PPUSH
12941: CALL_OW 310
12945: IFFALSE 12956
// ComExitBuilding ( i ) ;
12947: LD_VAR 0 1
12951: PPUSH
12952: CALL_OW 122
// if GetLives ( i ) < 650 then
12956: LD_VAR 0 1
12960: PPUSH
12961: CALL_OW 256
12965: PUSH
12966: LD_INT 650
12968: LESS
12969: IFFALSE 12985
// begin SetTag ( i , 2 ) ;
12971: LD_VAR 0 1
12975: PPUSH
12976: LD_INT 2
12978: PPUSH
12979: CALL_OW 109
// continue ;
12983: GO 12662
// end ; if b then
12985: LD_VAR 0 4
12989: IFFALSE 13015
// ComRepairBuilding ( i , NearestUnitToUnit ( b , i ) ) ;
12991: LD_VAR 0 1
12995: PPUSH
12996: LD_VAR 0 4
13000: PPUSH
13001: LD_VAR 0 1
13005: PPUSH
13006: CALL_OW 74
13010: PPUSH
13011: CALL_OW 130
// end ; 2 :
13015: GO 13103
13017: LD_INT 2
13019: DOUBLE
13020: EQUAL
13021: IFTRUE 13025
13023: GO 13102
13025: POP
// begin if GetLives ( i ) = 1000 then
13026: LD_VAR 0 1
13030: PPUSH
13031: CALL_OW 256
13035: PUSH
13036: LD_INT 1000
13038: EQUAL
13039: IFFALSE 13055
// begin SetTag ( i , 1 ) ;
13041: LD_VAR 0 1
13045: PPUSH
13046: LD_INT 1
13048: PPUSH
13049: CALL_OW 109
// continue ;
13053: GO 12662
// end ; if GetDistUnitXY ( i , 84 , 93 ) > 6 then
13055: LD_VAR 0 1
13059: PPUSH
13060: LD_INT 84
13062: PPUSH
13063: LD_INT 93
13065: PPUSH
13066: CALL_OW 297
13070: PUSH
13071: LD_INT 6
13073: GREATER
13074: IFFALSE 13100
// begin ComMoveXY ( i , 84 , 93 ) ;
13076: LD_VAR 0 1
13080: PPUSH
13081: LD_INT 84
13083: PPUSH
13084: LD_INT 93
13086: PPUSH
13087: CALL_OW 111
// AddComHold ( i ) ;
13091: LD_VAR 0 1
13095: PPUSH
13096: CALL_OW 200
// end ; end ; end ;
13100: GO 13103
13102: POP
// if not IsInArea ( i , ruBaseArea ) and not IsInUnit ( i ) then
13103: LD_VAR 0 1
13107: PPUSH
13108: LD_INT 12
13110: PPUSH
13111: CALL_OW 308
13115: NOT
13116: IFFALSE 13130
13118: PUSH
13119: LD_VAR 0 1
13123: PPUSH
13124: CALL_OW 310
13128: NOT
13129: AND
13130: IFFALSE 13147
// ComMoveXY ( i , 91 , 95 ) ;
13132: LD_VAR 0 1
13136: PPUSH
13137: LD_INT 91
13139: PPUSH
13140: LD_INT 95
13142: PPUSH
13143: CALL_OW 111
// end ;
13147: GO 12662
13149: POP
13150: POP
// end ; end ;
13151: PPOPN 13
13153: END
// export function PrepareRussianAttack ( strength ) ; var i , un , tmp , chassis , weapon ; begin
13154: LD_INT 0
13156: PPUSH
13157: PPUSH
13158: PPUSH
13159: PPUSH
13160: PPUSH
13161: PPUSH
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] + strength do
13162: LD_ADDR_VAR 0 3
13166: PUSH
13167: DOUBLE
13168: LD_INT 1
13170: DEC
13171: ST_TO_ADDR
13172: LD_INT 3
13174: PUSH
13175: LD_INT 4
13177: PUSH
13178: LD_INT 5
13180: PUSH
13181: LD_INT 6
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: PUSH
13190: LD_OWVAR 67
13194: ARRAY
13195: PUSH
13196: LD_VAR 0 1
13200: PLUS
13201: PUSH
13202: FOR_TO
13203: IFFALSE 13522
// begin uc_side := 6 ;
13205: LD_ADDR_OWVAR 20
13209: PUSH
13210: LD_INT 6
13212: ST_TO_ADDR
// uc_nation := 3 ;
13213: LD_ADDR_OWVAR 21
13217: PUSH
13218: LD_INT 3
13220: ST_TO_ADDR
// chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
13221: LD_ADDR_VAR 0 6
13225: PUSH
13226: LD_INT 21
13228: PUSH
13229: LD_INT 22
13231: PUSH
13232: LD_INT 23
13234: PUSH
13235: LD_INT 24
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: PUSH
13244: LD_INT 1
13246: PPUSH
13247: LD_INT 4
13249: PPUSH
13250: CALL_OW 12
13254: ARRAY
13255: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
13256: LD_ADDR_VAR 0 7
13260: PUSH
13261: LD_INT 42
13263: PUSH
13264: LD_INT 44
13266: PUSH
13267: LD_INT 43
13269: PUSH
13270: LD_INT 46
13272: PUSH
13273: LD_INT 45
13275: PUSH
13276: LD_INT 46
13278: PUSH
13279: LD_INT 45
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: PUSH
13291: LD_OWVAR 67
13295: PUSH
13296: LD_INT 0
13298: PPUSH
13299: LD_INT 3
13301: PPUSH
13302: CALL_OW 12
13306: PLUS
13307: ARRAY
13308: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
13309: LD_VAR 0 6
13313: PUSH
13314: LD_INT 21
13316: PUSH
13317: LD_INT 22
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: IN
13324: IFFALSE 13336
13326: PUSH
13327: LD_VAR 0 7
13331: PUSH
13332: LD_INT 46
13334: EQUAL
13335: AND
13336: IFFALSE 13365
// weapon := [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ;
13338: LD_ADDR_VAR 0 7
13342: PUSH
13343: LD_INT 44
13345: PUSH
13346: LD_INT 45
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 1
13355: PPUSH
13356: LD_INT 2
13358: PPUSH
13359: CALL_OW 12
13363: ARRAY
13364: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 9 9$00 ] [ Difficulty ] then
13365: LD_OWVAR 1
13369: PUSH
13370: LD_INT 31500
13372: PUSH
13373: LD_INT 27300
13375: PUSH
13376: LD_INT 23100
13378: PUSH
13379: LD_INT 18900
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: PUSH
13388: LD_OWVAR 67
13392: ARRAY
13393: LESS
13394: IFFALSE 13427
// weapon := [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 3 ) ] ;
13396: LD_ADDR_VAR 0 7
13400: PUSH
13401: LD_INT 44
13403: PUSH
13404: LD_INT 43
13406: PUSH
13407: LD_INT 42
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 1
13417: PPUSH
13418: LD_INT 3
13420: PPUSH
13421: CALL_OW 12
13425: ARRAY
13426: ST_TO_ADDR
// PrepareVehicle ( chassis , engine_combustion , control_computer , weapon , 90 ) ;
13427: LD_VAR 0 6
13431: PPUSH
13432: LD_INT 1
13434: PPUSH
13435: LD_INT 3
13437: PPUSH
13438: LD_VAR 0 7
13442: PPUSH
13443: LD_INT 90
13445: PPUSH
13446: CALL 48189 0 5
// un := CreateVehicle ;
13450: LD_ADDR_VAR 0 4
13454: PUSH
13455: CALL_OW 45
13459: ST_TO_ADDR
// PlaceUnitXY ( un , 140 , 146 , false ) ;
13460: LD_VAR 0 4
13464: PPUSH
13465: LD_INT 140
13467: PPUSH
13468: LD_INT 146
13470: PPUSH
13471: LD_INT 0
13473: PPUSH
13474: CALL_OW 48
// ComMoveXY ( un , 131 , 128 ) ;
13478: LD_VAR 0 4
13482: PPUSH
13483: LD_INT 131
13485: PPUSH
13486: LD_INT 128
13488: PPUSH
13489: CALL_OW 111
// wait ( 0 0$3 ) ;
13493: LD_INT 105
13495: PPUSH
13496: CALL_OW 67
// tmp := Join ( tmp , un ) ;
13500: LD_ADDR_VAR 0 5
13504: PUSH
13505: LD_VAR 0 5
13509: PPUSH
13510: LD_VAR 0 4
13514: PPUSH
13515: CALL 81369 0 2
13519: ST_TO_ADDR
// end ;
13520: GO 13202
13522: POP
13523: POP
// russianAttackers := JoinUnion ( russianAttackers , tmp ) ;
13524: LD_ADDR_EXP 36
13528: PUSH
13529: LD_EXP 36
13533: PPUSH
13534: LD_VAR 0 5
13538: PPUSH
13539: CALL 81406 0 2
13543: ST_TO_ADDR
// end ;
13544: LD_VAR 0 2
13548: RET
// every 0 0$3 trigger russianAttackers do
13549: LD_EXP 36
13553: IFFALSE 13636
13555: GO 13557
13557: DISABLE
// begin enable ;
13558: ENABLE
// AgressiveMove ( russianAttackers , [ [ 126 , 108 ] , [ 107 , 85 ] , [ 82 , 62 ] , [ 73 , 46 ] , [ 62 , 31 ] , [ 52 , 17 ] ] ) ;
13559: LD_EXP 36
13563: PPUSH
13564: LD_INT 126
13566: PUSH
13567: LD_INT 108
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 107
13576: PUSH
13577: LD_INT 85
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 82
13586: PUSH
13587: LD_INT 62
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 73
13596: PUSH
13597: LD_INT 46
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 62
13606: PUSH
13607: LD_INT 31
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 52
13616: PUSH
13617: LD_INT 17
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: PPUSH
13632: CALL 84135 0 2
// end ;
13636: END
// every 20 20$0 trigger Difficulty > 2 and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) = 0 do
13637: LD_OWVAR 67
13641: PUSH
13642: LD_INT 2
13644: GREATER
13645: IFFALSE 13688
13647: PUSH
13648: LD_INT 22
13650: PUSH
13651: LD_INT 6
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 21
13660: PUSH
13661: LD_INT 2
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 50
13670: PUSH
13671: EMPTY
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: PPUSH
13679: CALL_OW 69
13683: PUSH
13684: LD_INT 0
13686: EQUAL
13687: AND
13688: IFFALSE 13742
13690: GO 13692
13692: DISABLE
// begin SetTech ( tech_weap1 , 6 , state_researched ) ;
13693: LD_INT 51
13695: PPUSH
13696: LD_INT 6
13698: PPUSH
13699: LD_INT 2
13701: PPUSH
13702: CALL_OW 322
// SetTech ( tech_comp1 , 6 , state_researched ) ;
13706: LD_INT 57
13708: PPUSH
13709: LD_INT 6
13711: PPUSH
13712: LD_INT 2
13714: PPUSH
13715: CALL_OW 322
// if Difficulty > 3 then
13719: LD_OWVAR 67
13723: PUSH
13724: LD_INT 3
13726: GREATER
13727: IFFALSE 13742
// SetTech ( tech_weap2 , 6 , state_researched ) ;
13729: LD_INT 52
13731: PPUSH
13732: LD_INT 6
13734: PPUSH
13735: LD_INT 2
13737: PPUSH
13738: CALL_OW 322
// end ; end_of_file
13742: END
// on SailEvent ( event ) do begin if event = 1 then
13743: LD_VAR 0 1
13747: PUSH
13748: LD_INT 1
13750: EQUAL
13751: IFFALSE 13781
// PrepareRussianAttack ( [ 2 , 4 , 6 , 8 ] [ Difficulty ] ) ;
13753: LD_INT 2
13755: PUSH
13756: LD_INT 4
13758: PUSH
13759: LD_INT 6
13761: PUSH
13762: LD_INT 8
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: PUSH
13771: LD_OWVAR 67
13775: ARRAY
13776: PPUSH
13777: CALL 13154 0 1
// end ;
13781: PPOPN 1
13783: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Sikorski and killerSide = 1 then
13784: LD_VAR 0 1
13788: PUSH
13789: LD_EXP 28
13793: EQUAL
13794: IFFALSE 13806
13796: PUSH
13797: LD_VAR 0 2
13801: PUSH
13802: LD_INT 1
13804: EQUAL
13805: AND
13806: IFFALSE 13812
// SikorskiKilledInAction ;
13808: CALL 18997 0 0
// end ;
13812: PPOPN 3
13814: END
// on UnitDestroyed ( un ) do var i , tmp , chassis , weapon , btype ;
13815: LD_INT 0
13817: PPUSH
13818: PPUSH
13819: PPUSH
13820: PPUSH
13821: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
13822: LD_VAR 0 1
13826: PPUSH
13827: CALL 36695 0 1
// if un = JMM then
13831: LD_VAR 0 1
13835: PUSH
13836: LD_EXP 14
13840: EQUAL
13841: IFFALSE 13850
// YouLost ( JMM ) ;
13843: LD_STRING JMM
13845: PPUSH
13846: CALL_OW 104
// if un = Sikorski then
13850: LD_VAR 0 1
13854: PUSH
13855: LD_EXP 28
13859: EQUAL
13860: IFFALSE 13886
// if sikorskiStatus = 0 then
13862: LD_EXP 9
13866: PUSH
13867: LD_INT 0
13869: EQUAL
13870: IFFALSE 13878
// SikorskiKilledInAction else
13872: CALL 18997 0 0
13876: GO 13886
// sikorskiIsKilled := true ;
13878: LD_ADDR_EXP 10
13882: PUSH
13883: LD_INT 1
13885: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetNation ( un ) = 1 and GetBType ( un ) in [ b_depot , b_warehouse ] then
13886: LD_VAR 0 1
13890: PPUSH
13891: CALL_OW 255
13895: PUSH
13896: LD_INT 1
13898: EQUAL
13899: IFFALSE 13916
13901: PUSH
13902: LD_VAR 0 1
13906: PPUSH
13907: CALL_OW 248
13911: PUSH
13912: LD_INT 1
13914: EQUAL
13915: AND
13916: IFFALSE 13940
13918: PUSH
13919: LD_VAR 0 1
13923: PPUSH
13924: CALL_OW 266
13928: PUSH
13929: LD_INT 0
13931: PUSH
13932: LD_INT 1
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: IN
13939: AND
13940: IFFALSE 13949
// YouLost ( Destroyed ) ;
13942: LD_STRING Destroyed
13944: PPUSH
13945: CALL_OW 104
// if un = ruDep then
13949: LD_VAR 0 1
13953: PUSH
13954: LD_INT 28
13956: EQUAL
13957: IFFALSE 14091
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) do
13959: LD_ADDR_VAR 0 2
13963: PUSH
13964: LD_INT 22
13966: PUSH
13967: LD_INT 3
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 25
13976: PUSH
13977: LD_INT 1
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PPUSH
13988: CALL_OW 69
13992: PUSH
13993: FOR_IN
13994: IFFALSE 14089
// begin tmp := NearestUnitToUnit ( FilterUnitsInArea ( ruDefendArea , [ f_enemy , 3 ] ) , i ) ;
13996: LD_ADDR_VAR 0 3
14000: PUSH
14001: LD_INT 11
14003: PPUSH
14004: LD_INT 81
14006: PUSH
14007: LD_INT 3
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PPUSH
14014: CALL_OW 70
14018: PPUSH
14019: LD_VAR 0 2
14023: PPUSH
14024: CALL_OW 74
14028: ST_TO_ADDR
// if GetBType ( IsInUnit ( i ) ) = b_bunker then
14029: LD_VAR 0 2
14033: PPUSH
14034: CALL_OW 310
14038: PPUSH
14039: CALL_OW 266
14043: PUSH
14044: LD_INT 32
14046: EQUAL
14047: IFFALSE 14087
// begin ComExitBuilding ( i ) ;
14049: LD_VAR 0 2
14053: PPUSH
14054: CALL_OW 122
// AddComAgressiveMove ( i , GetX ( tmp ) , GetY ( tmp ) ) ;
14058: LD_VAR 0 2
14062: PPUSH
14063: LD_VAR 0 3
14067: PPUSH
14068: CALL_OW 250
14072: PPUSH
14073: LD_VAR 0 3
14077: PPUSH
14078: CALL_OW 251
14082: PPUSH
14083: CALL_OW 174
// end ; end ;
14087: GO 13993
14089: POP
14090: POP
// end ; if un in ruMobile then
14091: LD_VAR 0 1
14095: PUSH
14096: LD_EXP 34
14100: IN
14101: IFFALSE 14119
// ruMobile := ruMobile diff un ;
14103: LD_ADDR_EXP 34
14107: PUSH
14108: LD_EXP 34
14112: PUSH
14113: LD_VAR 0 1
14117: DIFF
14118: ST_TO_ADDR
// if GetSide ( un ) = 3 then
14119: LD_VAR 0 1
14123: PPUSH
14124: CALL_OW 255
14128: PUSH
14129: LD_INT 3
14131: EQUAL
14132: IFFALSE 14775
// begin if GetType ( un ) = unit_building then
14134: LD_VAR 0 1
14138: PPUSH
14139: CALL_OW 247
14143: PUSH
14144: LD_INT 3
14146: EQUAL
14147: IFFALSE 14283
// begin btype := GetBType ( un ) ;
14149: LD_ADDR_VAR 0 6
14153: PUSH
14154: LD_VAR 0 1
14158: PPUSH
14159: CALL_OW 266
14163: ST_TO_ADDR
// if btype = b_warehouse then
14164: LD_VAR 0 6
14168: PUSH
14169: LD_INT 1
14171: EQUAL
14172: IFFALSE 14182
// btype := b_depot ;
14174: LD_ADDR_VAR 0 6
14178: PUSH
14179: LD_INT 0
14181: ST_TO_ADDR
// if btype = b_barracks then
14182: LD_VAR 0 6
14186: PUSH
14187: LD_INT 5
14189: EQUAL
14190: IFFALSE 14200
// btype := b_armoury ;
14192: LD_ADDR_VAR 0 6
14196: PUSH
14197: LD_INT 4
14199: ST_TO_ADDR
// if btype = b_lab_full then
14200: LD_VAR 0 6
14204: PUSH
14205: LD_INT 8
14207: EQUAL
14208: IFFALSE 14218
// btype := b_lab ;
14210: LD_ADDR_VAR 0 6
14214: PUSH
14215: LD_INT 6
14217: ST_TO_ADDR
// ruBuildList := Replace ( ruBuildList , ruBuildList + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
14218: LD_ADDR_EXP 35
14222: PUSH
14223: LD_EXP 35
14227: PPUSH
14228: LD_EXP 35
14232: PUSH
14233: LD_INT 1
14235: PLUS
14236: PPUSH
14237: LD_VAR 0 6
14241: PUSH
14242: LD_VAR 0 1
14246: PPUSH
14247: CALL_OW 250
14251: PUSH
14252: LD_VAR 0 1
14256: PPUSH
14257: CALL_OW 251
14261: PUSH
14262: LD_VAR 0 1
14266: PPUSH
14267: CALL_OW 254
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: PPUSH
14278: CALL_OW 1
14282: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
14283: LD_VAR 0 1
14287: PPUSH
14288: CALL_OW 247
14292: PUSH
14293: LD_INT 2
14295: EQUAL
14296: IFFALSE 14577
// begin if GetWeapon ( un ) in [ ru_crane , ru_cargo_bay ] then
14298: LD_VAR 0 1
14302: PPUSH
14303: CALL_OW 264
14307: PUSH
14308: LD_INT 52
14310: PUSH
14311: LD_INT 51
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: IN
14318: IFFALSE 14348
// begin AddComConstruct ( ruFac , ru_medium_tracked , engine_combustion , control_computer , GetWeapon ( un ) ) ;
14320: LD_INT 29
14322: PPUSH
14323: LD_INT 22
14325: PPUSH
14326: LD_INT 1
14328: PPUSH
14329: LD_INT 3
14331: PPUSH
14332: LD_VAR 0 1
14336: PPUSH
14337: CALL_OW 264
14341: PPUSH
14342: CALL_OW 185
// end else
14346: GO 14577
// begin chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
14348: LD_ADDR_VAR 0 4
14352: PUSH
14353: LD_INT 21
14355: PUSH
14356: LD_INT 22
14358: PUSH
14359: LD_INT 23
14361: PUSH
14362: LD_INT 24
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 1
14373: PPUSH
14374: LD_INT 4
14376: PPUSH
14377: CALL_OW 12
14381: ARRAY
14382: ST_TO_ADDR
// weapon := [ ru_heavy_machine_gun , ru_gun , ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher , ru_heavy_gun , ru_rocket_launcher ] [ Difficulty + rand ( 0 , 3 ) ] ;
14383: LD_ADDR_VAR 0 5
14387: PUSH
14388: LD_INT 42
14390: PUSH
14391: LD_INT 44
14393: PUSH
14394: LD_INT 43
14396: PUSH
14397: LD_INT 46
14399: PUSH
14400: LD_INT 45
14402: PUSH
14403: LD_INT 46
14405: PUSH
14406: LD_INT 45
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: PUSH
14418: LD_OWVAR 67
14422: PUSH
14423: LD_INT 0
14425: PPUSH
14426: LD_INT 3
14428: PPUSH
14429: CALL_OW 12
14433: PLUS
14434: ARRAY
14435: ST_TO_ADDR
// if chassis in [ ru_medium_wheeled , ru_medium_tracked ] and weapon = ru_heavy_gun then
14436: LD_VAR 0 4
14440: PUSH
14441: LD_INT 21
14443: PUSH
14444: LD_INT 22
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: IN
14451: IFFALSE 14463
14453: PUSH
14454: LD_VAR 0 5
14458: PUSH
14459: LD_INT 46
14461: EQUAL
14462: AND
14463: IFFALSE 14496
// weapon := [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ;
14465: LD_ADDR_VAR 0 5
14469: PUSH
14470: LD_INT 44
14472: PUSH
14473: LD_INT 45
14475: PUSH
14476: LD_INT 45
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 1
14486: PPUSH
14487: LD_INT 3
14489: PPUSH
14490: CALL_OW 12
14494: ARRAY
14495: ST_TO_ADDR
// if tick < [ 15 15$00 , 13 13$00 , 11 11$00 , 10 10$00 ] [ Difficulty ] then
14496: LD_OWVAR 1
14500: PUSH
14501: LD_INT 31500
14503: PUSH
14504: LD_INT 27300
14506: PUSH
14507: LD_INT 23100
14509: PUSH
14510: LD_INT 21000
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: PUSH
14519: LD_OWVAR 67
14523: ARRAY
14524: LESS
14525: IFFALSE 14554
// weapon := [ ru_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ;
14527: LD_ADDR_VAR 0 5
14531: PUSH
14532: LD_INT 44
14534: PUSH
14535: LD_INT 43
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 1
14544: PPUSH
14545: LD_INT 2
14547: PPUSH
14548: CALL_OW 12
14552: ARRAY
14553: ST_TO_ADDR
// AddComConstruct ( ruFac , chassis , engine_combustion , control_manual , weapon ) ;
14554: LD_INT 29
14556: PPUSH
14557: LD_VAR 0 4
14561: PPUSH
14562: LD_INT 1
14564: PPUSH
14565: LD_INT 1
14567: PPUSH
14568: LD_VAR 0 5
14572: PPUSH
14573: CALL_OW 185
// end ; end ; if GetClass ( un ) = class_mechanic then
14577: LD_VAR 0 1
14581: PPUSH
14582: CALL_OW 257
14586: PUSH
14587: LD_INT 3
14589: EQUAL
14590: IFFALSE 14775
// begin killMechCounter := Inc ( killMechCounter ) ;
14592: LD_ADDR_EXP 12
14596: PUSH
14597: LD_EXP 12
14601: PPUSH
14602: CALL 82742 0 1
14606: ST_TO_ADDR
// if ruMechCounter = 0 or not IsOk ( ruFac ) then
14607: LD_EXP 33
14611: PUSH
14612: LD_INT 0
14614: EQUAL
14615: IFTRUE 14627
14617: PUSH
14618: LD_INT 29
14620: PPUSH
14621: CALL_OW 302
14625: NOT
14626: OR
14627: IFFALSE 14631
// exit ;
14629: GO 14775
// ruMechCounter := Dec ( ruMechCounter ) ;
14631: LD_ADDR_EXP 33
14635: PUSH
14636: LD_EXP 33
14640: PPUSH
14641: CALL 82764 0 1
14645: ST_TO_ADDR
// uc_side := 3 ;
14646: LD_ADDR_OWVAR 20
14650: PUSH
14651: LD_INT 3
14653: ST_TO_ADDR
// uc_nation := 3 ;
14654: LD_ADDR_OWVAR 21
14658: PUSH
14659: LD_INT 3
14661: ST_TO_ADDR
// PrepareMechanic ( false , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
14662: LD_INT 0
14664: PPUSH
14665: LD_INT 5
14667: PUSH
14668: LD_INT 6
14670: PUSH
14671: LD_INT 7
14673: PUSH
14674: LD_INT 8
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: PUSH
14683: LD_OWVAR 67
14687: ARRAY
14688: PPUSH
14689: CALL_OW 383
// tmp := CreateHuman ;
14693: LD_ADDR_VAR 0 3
14697: PUSH
14698: CALL_OW 44
14702: ST_TO_ADDR
// PlaceUnitXY ( tmp , 145 , 133 , false ) ;
14703: LD_VAR 0 3
14707: PPUSH
14708: LD_INT 145
14710: PPUSH
14711: LD_INT 133
14713: PPUSH
14714: LD_INT 0
14716: PPUSH
14717: CALL_OW 48
// ComEnterUnit ( tmp , ruFac ) ;
14721: LD_VAR 0 3
14725: PPUSH
14726: LD_INT 29
14728: PPUSH
14729: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14733: LD_INT 35
14735: PPUSH
14736: CALL_OW 67
// if not HasTask ( tmp ) then
14740: LD_VAR 0 3
14744: PPUSH
14745: CALL_OW 314
14749: NOT
14750: IFFALSE 14764
// ComEnterUnit ( tmp , ruFac ) ;
14752: LD_VAR 0 3
14756: PPUSH
14757: LD_INT 29
14759: PPUSH
14760: CALL_OW 120
// until IsInUnit ( tmp ) ;
14764: LD_VAR 0 3
14768: PPUSH
14769: CALL_OW 310
14773: IFFALSE 14733
// end ; end ; end ;
14775: PPOPN 6
14777: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 4 then
14778: LD_VAR 0 1
14782: PPUSH
14783: CALL_OW 255
14787: PUSH
14788: LD_INT 4
14790: EQUAL
14791: IFFALSE 14808
// ComMoveXY ( driver , 40 , 47 ) ;
14793: LD_VAR 0 1
14797: PPUSH
14798: LD_INT 40
14800: PPUSH
14801: LD_INT 47
14803: PPUSH
14804: CALL_OW 111
// if GetSide ( driver ) = 3 then
14808: LD_VAR 0 1
14812: PPUSH
14813: CALL_OW 255
14817: PUSH
14818: LD_INT 3
14820: EQUAL
14821: IFFALSE 15043
// begin ComMoveXY ( driver , 90 , 97 ) ;
14823: LD_VAR 0 1
14827: PPUSH
14828: LD_INT 90
14830: PPUSH
14831: LD_INT 97
14833: PPUSH
14834: CALL_OW 111
// if IsOk ( ruFac ) then
14838: LD_INT 29
14840: PPUSH
14841: CALL_OW 302
14845: IFFALSE 14965
// begin repeat wait ( 0 0$1 ) ;
14847: LD_INT 35
14849: PPUSH
14850: CALL_OW 67
// until UnitsInside ( ruFac ) < 6 or IsDead ( driver ) ;
14854: LD_INT 29
14856: PPUSH
14857: CALL_OW 313
14861: PUSH
14862: LD_INT 6
14864: LESS
14865: IFTRUE 14878
14867: PUSH
14868: LD_VAR 0 1
14872: PPUSH
14873: CALL_OW 301
14877: OR
14878: IFFALSE 14847
// if IsDead ( driver ) then
14880: LD_VAR 0 1
14884: PPUSH
14885: CALL_OW 301
14889: IFFALSE 14893
// exit ;
14891: GO 15043
// repeat wait ( 0 0$10 ) ;
14893: LD_INT 350
14895: PPUSH
14896: CALL_OW 67
// if not HasTask ( driver ) and UnitsInside ( ruFac ) < 6 then
14900: LD_VAR 0 1
14904: PPUSH
14905: CALL_OW 314
14909: NOT
14910: IFFALSE 14925
14912: PUSH
14913: LD_INT 29
14915: PPUSH
14916: CALL_OW 313
14920: PUSH
14921: LD_INT 6
14923: LESS
14924: AND
14925: IFFALSE 14939
// ComEnterUnit ( driver , ruFac ) ;
14927: LD_VAR 0 1
14931: PPUSH
14932: LD_INT 29
14934: PPUSH
14935: CALL_OW 120
// until IsDead ( driver ) or IsInUnit ( driver ) ;
14939: LD_VAR 0 1
14943: PPUSH
14944: CALL_OW 301
14948: IFTRUE 14961
14950: PUSH
14951: LD_VAR 0 1
14955: PPUSH
14956: CALL_OW 310
14960: OR
14961: IFFALSE 14893
// end else
14963: GO 15043
// begin ComMoveXY ( driver , 142 , 148 ) ;
14965: LD_VAR 0 1
14969: PPUSH
14970: LD_INT 142
14972: PPUSH
14973: LD_INT 148
14975: PPUSH
14976: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14980: LD_INT 35
14982: PPUSH
14983: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 142 , 148 ) ;
14987: LD_VAR 0 1
14991: PPUSH
14992: CALL_OW 301
14996: IFTRUE 15015
14998: PUSH
14999: LD_VAR 0 1
15003: PPUSH
15004: LD_INT 142
15006: PPUSH
15007: LD_INT 148
15009: PPUSH
15010: CALL_OW 307
15014: OR
15015: IFFALSE 14980
// if IsAt ( driver , 142 , 148 ) then
15017: LD_VAR 0 1
15021: PPUSH
15022: LD_INT 142
15024: PPUSH
15025: LD_INT 148
15027: PPUSH
15028: CALL_OW 307
15032: IFFALSE 15043
// RemoveUnit ( driver ) ;
15034: LD_VAR 0 1
15038: PPUSH
15039: CALL_OW 64
// end ; end ; end ;
15043: PPOPN 4
15045: END
// on EnterBuilding ( b , un ) do begin if GetClass ( un ) = class_mechanic and GetSide ( b ) = 3 and b = ruFac then
15046: LD_VAR 0 2
15050: PPUSH
15051: CALL_OW 257
15055: PUSH
15056: LD_INT 3
15058: EQUAL
15059: IFFALSE 15076
15061: PUSH
15062: LD_VAR 0 1
15066: PPUSH
15067: CALL_OW 255
15071: PUSH
15072: LD_INT 3
15074: EQUAL
15075: AND
15076: IFFALSE 15088
15078: PUSH
15079: LD_VAR 0 1
15083: PUSH
15084: LD_INT 29
15086: EQUAL
15087: AND
15088: IFFALSE 15102
// SetLives ( un , 1000 ) ;
15090: LD_VAR 0 2
15094: PPUSH
15095: LD_INT 1000
15097: PPUSH
15098: CALL_OW 234
// if GetTag ( b ) = 701 then
15102: LD_VAR 0 1
15106: PPUSH
15107: CALL_OW 110
15111: PUSH
15112: LD_INT 701
15114: EQUAL
15115: IFFALSE 15141
// begin SetTag ( b , 0 ) ;
15117: LD_VAR 0 1
15121: PPUSH
15122: LD_INT 0
15124: PPUSH
15125: CALL_OW 109
// SetTag ( un , 0 ) ;
15129: LD_VAR 0 2
15133: PPUSH
15134: LD_INT 0
15136: PPUSH
15137: CALL_OW 109
// end ; end ;
15141: PPOPN 2
15143: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) in [ 3 , 6 ] and GetControl ( un ) = control_computer and not seenComputer then
15144: LD_VAR 0 1
15148: PPUSH
15149: CALL_OW 255
15153: PUSH
15154: LD_INT 3
15156: PUSH
15157: LD_INT 6
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: IN
15164: IFFALSE 15181
15166: PUSH
15167: LD_VAR 0 1
15171: PPUSH
15172: CALL_OW 263
15176: PUSH
15177: LD_INT 3
15179: EQUAL
15180: AND
15181: IFFALSE 15190
15183: PUSH
15184: LD_EXP 7
15188: NOT
15189: AND
15190: IFFALSE 15209
// begin seenComputer := true ;
15192: LD_ADDR_EXP 7
15196: PUSH
15197: LD_INT 1
15199: ST_TO_ADDR
// DialogSeenComputer ( un ) ;
15200: LD_VAR 0 1
15204: PPUSH
15205: CALL 18174 0 1
// end ; end ;
15209: PPOPN 1
15211: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15212: LD_INT 0
15214: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15215: LD_VAR 0 1
15219: PPUSH
15220: LD_VAR 0 2
15224: PPUSH
15225: CALL 36753 0 2
// if GetSide ( vehicle ) = 3 and GetControl ( vehicle ) = control_manual and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher ] then
15229: LD_VAR 0 1
15233: PPUSH
15234: CALL_OW 255
15238: PUSH
15239: LD_INT 3
15241: EQUAL
15242: IFFALSE 15259
15244: PUSH
15245: LD_VAR 0 1
15249: PPUSH
15250: CALL_OW 263
15254: PUSH
15255: LD_INT 1
15257: EQUAL
15258: AND
15259: IFFALSE 15295
15261: PUSH
15262: LD_VAR 0 1
15266: PPUSH
15267: CALL_OW 264
15271: PUSH
15272: LD_INT 42
15274: PUSH
15275: LD_INT 43
15277: PUSH
15278: LD_INT 44
15280: PUSH
15281: LD_INT 46
15283: PUSH
15284: LD_INT 45
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: IN
15294: AND
15295: IFFALSE 15325
// begin SetTag ( vehicle , 300 ) ;
15297: LD_VAR 0 1
15301: PPUSH
15302: LD_INT 300
15304: PPUSH
15305: CALL_OW 109
// ruMobile := ruMobile union vehicle ;
15309: LD_ADDR_EXP 34
15313: PUSH
15314: LD_EXP 34
15318: PUSH
15319: LD_VAR 0 1
15323: UNION
15324: ST_TO_ADDR
// end ; end ;
15325: PPOPN 3
15327: END
// on CrateSpawn ( id , x , y , amount , mode ) do var cargo ;
15328: LD_INT 0
15330: PPUSH
// begin if InArea ( x , y , ruCrates ) then
15331: LD_VAR 0 2
15335: PPUSH
15336: LD_VAR 0 3
15340: PPUSH
15341: LD_INT 13
15343: PPUSH
15344: CALL_OW 309
15348: IFFALSE 15481
// begin cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_weapon , ru_cargo_bay ] ] ) ;
15350: LD_ADDR_VAR 0 6
15354: PUSH
15355: LD_INT 22
15357: PUSH
15358: LD_INT 3
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: LD_INT 50
15367: PUSH
15368: EMPTY
15369: LIST
15370: PUSH
15371: LD_INT 34
15373: PUSH
15374: LD_INT 51
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: PPUSH
15386: CALL_OW 69
15390: ST_TO_ADDR
// if not cargo then
15391: LD_VAR 0 6
15395: NOT
15396: IFFALSE 15400
// exit ;
15398: GO 15481
// wait ( 0 0$5 ) ;
15400: LD_INT 175
15402: PPUSH
15403: CALL_OW 67
// if GetDistUnits ( cargo [ 1 ] , ruDep ) < 6 and GetFuel ( cargo [ 1 ] ) < 50 then
15407: LD_VAR 0 6
15411: PUSH
15412: LD_INT 1
15414: ARRAY
15415: PPUSH
15416: LD_INT 28
15418: PPUSH
15419: CALL_OW 296
15423: PUSH
15424: LD_INT 6
15426: LESS
15427: IFFALSE 15448
15429: PUSH
15430: LD_VAR 0 6
15434: PUSH
15435: LD_INT 1
15437: ARRAY
15438: PPUSH
15439: CALL_OW 261
15443: PUSH
15444: LD_INT 50
15446: LESS
15447: AND
15448: IFFALSE 15462
// ComMoveUnit ( cargo , ruDep ) ;
15450: LD_VAR 0 6
15454: PPUSH
15455: LD_INT 28
15457: PPUSH
15458: CALL_OW 112
// AddComCollect ( cargo , x , y ) ;
15462: LD_VAR 0 6
15466: PPUSH
15467: LD_VAR 0 2
15471: PPUSH
15472: LD_VAR 0 3
15476: PPUSH
15477: CALL_OW 177
// end ; end ;
15481: PPOPN 6
15483: END
// on VehicleCaptured ( new , old , side , unit ) do begin if GetWeapon ( new ) = ru_rocket_launcher then
15484: LD_VAR 0 1
15488: PPUSH
15489: CALL_OW 264
15493: PUSH
15494: LD_INT 45
15496: EQUAL
15497: IFFALSE 15514
// captureRocketCounter := Inc ( captureRocketCounter ) ;
15499: LD_ADDR_EXP 11
15503: PUSH
15504: LD_EXP 11
15508: PPUSH
15509: CALL 82742 0 1
15513: ST_TO_ADDR
// end ;
15514: PPOPN 4
15516: END
// on BuildingComplete ( b ) do var i , tmp ;
15517: LD_INT 0
15519: PPUSH
15520: PPUSH
// begin if GetSide ( b ) = 3 then
15521: LD_VAR 0 1
15525: PPUSH
15526: CALL_OW 255
15530: PUSH
15531: LD_INT 3
15533: EQUAL
15534: IFFALSE 15631
// begin ruBuildList := Delete ( ruBuildList , 1 ) ;
15536: LD_ADDR_EXP 35
15540: PUSH
15541: LD_EXP 35
15545: PPUSH
15546: LD_INT 1
15548: PPUSH
15549: CALL_OW 3
15553: ST_TO_ADDR
// if GetBType ( b ) = b_armoury then
15554: LD_VAR 0 1
15558: PPUSH
15559: CALL_OW 266
15563: PUSH
15564: LD_INT 4
15566: EQUAL
15567: IFFALSE 15578
// ComUpgrade ( b ) ;
15569: LD_VAR 0 1
15573: PPUSH
15574: CALL_OW 146
// if GetBType ( b ) in [ b_bunker , b_turret ] then
15578: LD_VAR 0 1
15582: PPUSH
15583: CALL_OW 266
15587: PUSH
15588: LD_INT 32
15590: PUSH
15591: LD_INT 33
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: IN
15598: IFFALSE 15631
// AddComPlaceWeapon ( b , [ ru_heavy_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ) ;
15600: LD_VAR 0 1
15604: PPUSH
15605: LD_INT 46
15607: PUSH
15608: LD_INT 45
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: LD_INT 1
15617: PPUSH
15618: LD_INT 2
15620: PPUSH
15621: CALL_OW 12
15625: ARRAY
15626: PPUSH
15627: CALL_OW 208
// end ; end ; end_of_file
15631: PPOPN 3
15633: END
// export function Action ; var i , tmp , un , inUnit ; begin
15634: LD_INT 0
15636: PPUSH
15637: PPUSH
15638: PPUSH
15639: PPUSH
15640: PPUSH
// Video ( true ) ;
15641: LD_INT 1
15643: PPUSH
15644: CALL 81341 0 1
// invincibleMode := true ;
15648: LD_ADDR_EXP 5
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
// RevealMapOnXY ( 50 , 12 , 1 , - 56 ) ;
15656: LD_INT 50
15658: PPUSH
15659: LD_INT 12
15661: PPUSH
15662: LD_INT 1
15664: PPUSH
15665: LD_INT 56
15667: NEG
15668: PPUSH
15669: CALL 81253 0 4
// CenterOnXY ( 50 , 12 ) ;
15673: LD_INT 50
15675: PPUSH
15676: LD_INT 12
15678: PPUSH
15679: CALL_OW 84
// wait ( 0 0$3 ) ;
15683: LD_INT 105
15685: PPUSH
15686: CALL_OW 67
// PrepareStartRussianAttack ;
15690: CALL 10149 0 0
// CenterOnXY ( 66 , 47 ) ;
15694: LD_INT 66
15696: PPUSH
15697: LD_INT 47
15699: PPUSH
15700: CALL_OW 84
// wait ( 0 0$5 ) ;
15704: LD_INT 175
15706: PPUSH
15707: CALL_OW 67
// case gammaCommander of 1 :
15711: LD_EXP 13
15715: PUSH
15716: LD_INT 1
15718: DOUBLE
15719: EQUAL
15720: IFTRUE 15724
15722: GO 15739
15724: POP
// Say ( Donaldson , D1-Don-1 ) ; 2 :
15725: LD_EXP 16
15729: PPUSH
15730: LD_STRING D1-Don-1
15732: PPUSH
15733: CALL_OW 88
15737: GO 15786
15739: LD_INT 2
15741: DOUBLE
15742: EQUAL
15743: IFTRUE 15747
15745: GO 15762
15747: POP
// Say ( Brown , D1-Brown-1 ) ; 3 :
15748: LD_EXP 15
15752: PPUSH
15753: LD_STRING D1-Brown-1
15755: PPUSH
15756: CALL_OW 88
15760: GO 15786
15762: LD_INT 3
15764: DOUBLE
15765: EQUAL
15766: IFTRUE 15770
15768: GO 15785
15770: POP
// Say ( Houten , D1-VanH-1 ) ; end ;
15771: LD_EXP 25
15775: PPUSH
15776: LD_STRING D1-VanH-1
15778: PPUSH
15779: CALL_OW 88
15783: GO 15786
15785: POP
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] , [ f_linked ] ] ) ;
15786: LD_ADDR_VAR 0 3
15790: PUSH
15791: LD_INT 22
15793: PUSH
15794: LD_INT 1
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 33
15803: PUSH
15804: LD_INT 2
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: LD_INT 61
15813: PUSH
15814: EMPTY
15815: LIST
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: PPUSH
15822: CALL_OW 69
15826: ST_TO_ADDR
// if tmp then
15827: LD_VAR 0 3
15831: IFFALSE 15848
// ComAgressiveMove ( tmp , 74 , 44 ) ;
15833: LD_VAR 0 3
15837: PPUSH
15838: LD_INT 74
15840: PPUSH
15841: LD_INT 44
15843: PPUSH
15844: CALL_OW 114
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) diff [ Donaldson , Brown , Houten ] ;
15848: LD_ADDR_VAR 0 3
15852: PUSH
15853: LD_INT 22
15855: PUSH
15856: LD_INT 1
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: LD_INT 25
15865: PUSH
15866: LD_INT 1
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PPUSH
15877: CALL_OW 69
15881: PUSH
15882: LD_EXP 16
15886: PUSH
15887: LD_EXP 15
15891: PUSH
15892: LD_EXP 25
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: LIST
15901: DIFF
15902: ST_TO_ADDR
// if tmp then
15903: LD_VAR 0 3
15907: IFFALSE 15987
// for i in tmp do
15909: LD_ADDR_VAR 0 2
15913: PUSH
15914: LD_VAR 0 3
15918: PUSH
15919: FOR_IN
15920: IFFALSE 15985
// begin inUnit := IsInUnit ( i ) ;
15922: LD_ADDR_VAR 0 5
15926: PUSH
15927: LD_VAR 0 2
15931: PPUSH
15932: CALL_OW 310
15936: ST_TO_ADDR
// if inUnit and GetBType ( inUnit ) in [ b_bunker , b_breastwork ] then
15937: LD_VAR 0 5
15941: IFFALSE 15965
15943: PUSH
15944: LD_VAR 0 5
15948: PPUSH
15949: CALL_OW 266
15953: PUSH
15954: LD_INT 32
15956: PUSH
15957: LD_INT 31
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: IN
15964: AND
15965: IFFALSE 15983
// tmp := tmp diff i ;
15967: LD_ADDR_VAR 0 3
15971: PUSH
15972: LD_VAR 0 3
15976: PUSH
15977: LD_VAR 0 2
15981: DIFF
15982: ST_TO_ADDR
// end ;
15983: GO 15919
15985: POP
15986: POP
// if tmp then
15987: LD_VAR 0 3
15991: IFFALSE 16081
// begin ComExitAll ( tmp ) ;
15993: LD_VAR 0 3
15997: PPUSH
15998: CALL 81850 0 1
// AddComAgressiveMove ( tmp , 74 , 44 ) ;
16002: LD_VAR 0 3
16006: PPUSH
16007: LD_INT 74
16009: PPUSH
16010: LD_INT 44
16012: PPUSH
16013: CALL_OW 174
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_scientistic ] ] ) ;
16017: LD_ADDR_VAR 0 3
16021: PUSH
16022: LD_INT 22
16024: PUSH
16025: LD_INT 1
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 25
16034: PUSH
16035: LD_INT 4
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PPUSH
16046: CALL_OW 69
16050: ST_TO_ADDR
// if tmp then
16051: LD_VAR 0 3
16055: IFFALSE 16081
// begin ComExitAll ( tmp ) ;
16057: LD_VAR 0 3
16061: PPUSH
16062: CALL 81850 0 1
// AddComMoveXY ( tmp , 66 , 28 ) ;
16066: LD_VAR 0 3
16070: PPUSH
16071: LD_INT 66
16073: PPUSH
16074: LD_INT 28
16076: PPUSH
16077: CALL_OW 171
// end ; end ; game_speed := 4 ;
16081: LD_ADDR_OWVAR 65
16085: PUSH
16086: LD_INT 4
16088: ST_TO_ADDR
// wait ( 0 0$2 ) ;
16089: LD_INT 70
16091: PPUSH
16092: CALL_OW 67
// SayRadio ( Harisson , D1-Har-1 ) ;
16096: LD_EXP 29
16100: PPUSH
16101: LD_STRING D1-Har-1
16103: PPUSH
16104: CALL_OW 94
// case gammaCommander of 1 :
16108: LD_EXP 13
16112: PUSH
16113: LD_INT 1
16115: DOUBLE
16116: EQUAL
16117: IFTRUE 16121
16119: GO 16136
16121: POP
// Say ( Donaldson , D1-Don-2 ) ; 2 :
16122: LD_EXP 16
16126: PPUSH
16127: LD_STRING D1-Don-2
16129: PPUSH
16130: CALL_OW 88
16134: GO 16183
16136: LD_INT 2
16138: DOUBLE
16139: EQUAL
16140: IFTRUE 16144
16142: GO 16159
16144: POP
// Say ( Brown , D1-Brown-2 ) ; 3 :
16145: LD_EXP 15
16149: PPUSH
16150: LD_STRING D1-Brown-2
16152: PPUSH
16153: CALL_OW 88
16157: GO 16183
16159: LD_INT 3
16161: DOUBLE
16162: EQUAL
16163: IFTRUE 16167
16165: GO 16182
16167: POP
// Say ( Houten , D1-VanH-2 ) ; end ;
16168: LD_EXP 25
16172: PPUSH
16173: LD_STRING D1-VanH-2
16175: PPUSH
16176: CALL_OW 88
16180: GO 16183
16182: POP
// SayRadio ( Harisson , D1-Har-2 ) ;
16183: LD_EXP 29
16187: PPUSH
16188: LD_STRING D1-Har-2
16190: PPUSH
16191: CALL_OW 94
// invincibleMode := false ;
16195: LD_ADDR_EXP 5
16199: PUSH
16200: LD_INT 0
16202: ST_TO_ADDR
// Video ( false ) ;
16203: LD_INT 0
16205: PPUSH
16206: CALL 81341 0 1
// ChangeMissionObjectives ( M1 ) ;
16210: LD_STRING M1
16212: PPUSH
16213: CALL_OW 337
// SaveForQuickRestart ;
16217: CALL_OW 22
// wait ( 2 2$30 ) ;
16221: LD_INT 5250
16223: PPUSH
16224: CALL_OW 67
// PrepareRussianAttack ( 1 ) ;
16228: LD_INT 1
16230: PPUSH
16231: CALL 13154 0 1
// wait ( 4 4$30 ) ;
16235: LD_INT 9450
16237: PPUSH
16238: CALL_OW 67
// if Difficulty > 1 then
16242: LD_OWVAR 67
16246: PUSH
16247: LD_INT 1
16249: GREATER
16250: IFFALSE 16259
// PrepareRussianAttack ( 2 ) ;
16252: LD_INT 2
16254: PPUSH
16255: CALL 13154 0 1
// if Difficulty > 2 then
16259: LD_OWVAR 67
16263: PUSH
16264: LD_INT 2
16266: GREATER
16267: IFFALSE 16426
// begin for i := 1 to 4 do
16269: LD_ADDR_VAR 0 2
16273: PUSH
16274: DOUBLE
16275: LD_INT 1
16277: DEC
16278: ST_TO_ADDR
16279: LD_INT 4
16281: PUSH
16282: FOR_TO
16283: IFFALSE 16368
// begin uc_side := 6 ;
16285: LD_ADDR_OWVAR 20
16289: PUSH
16290: LD_INT 6
16292: ST_TO_ADDR
// uc_nation := 3 ;
16293: LD_ADDR_OWVAR 21
16297: PUSH
16298: LD_INT 3
16300: ST_TO_ADDR
// PrepareSoldier ( false , 7 ) ;
16301: LD_INT 0
16303: PPUSH
16304: LD_INT 7
16306: PPUSH
16307: CALL_OW 381
// un := CreateHuman ;
16311: LD_ADDR_VAR 0 4
16315: PUSH
16316: CALL_OW 44
16320: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16321: LD_VAR 0 4
16325: PPUSH
16326: LD_INT 122
16328: PPUSH
16329: LD_INT 89
16331: PPUSH
16332: LD_INT 3
16334: PPUSH
16335: LD_INT 0
16337: PPUSH
16338: CALL_OW 50
// ComAgressiveMove ( un , 88 , 42 ) ;
16342: LD_VAR 0 4
16346: PPUSH
16347: LD_INT 88
16349: PPUSH
16350: LD_INT 42
16352: PPUSH
16353: CALL_OW 114
// AddComHold ( un ) ;
16357: LD_VAR 0 4
16361: PPUSH
16362: CALL_OW 200
// end ;
16366: GO 16282
16368: POP
16369: POP
// PrepareScientist ( false , 6 ) ;
16370: LD_INT 0
16372: PPUSH
16373: LD_INT 6
16375: PPUSH
16376: CALL_OW 384
// un := CreateHuman ;
16380: LD_ADDR_VAR 0 4
16384: PUSH
16385: CALL_OW 44
16389: ST_TO_ADDR
// PlaceUnitXYR ( un , 122 , 89 , 3 , false ) ;
16390: LD_VAR 0 4
16394: PPUSH
16395: LD_INT 122
16397: PPUSH
16398: LD_INT 89
16400: PPUSH
16401: LD_INT 3
16403: PPUSH
16404: LD_INT 0
16406: PPUSH
16407: CALL_OW 50
// ComMoveXY ( un , 91 , 48 ) ;
16411: LD_VAR 0 4
16415: PPUSH
16416: LD_INT 91
16418: PPUSH
16419: LD_INT 48
16421: PPUSH
16422: CALL_OW 111
// end ; end ;
16426: LD_VAR 0 1
16430: RET
// every 0 0$1 trigger invincibleMode do var i ;
16431: LD_EXP 5
16435: IFFALSE 16532
16437: GO 16439
16439: DISABLE
16440: LD_INT 0
16442: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_building ] , [ f_type , unit_human ] ] , [ f_not , [ f_lives , 900 ] ] ] ) do
16443: LD_ADDR_VAR 0 1
16447: PUSH
16448: LD_INT 22
16450: PUSH
16451: LD_INT 1
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 2
16460: PUSH
16461: LD_INT 21
16463: PUSH
16464: LD_INT 3
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 21
16473: PUSH
16474: LD_INT 1
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 3
16488: PUSH
16489: LD_INT 24
16491: PUSH
16492: LD_INT 900
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: LIST
16507: PPUSH
16508: CALL_OW 69
16512: PUSH
16513: FOR_IN
16514: IFFALSE 16530
// SetLives ( i , 900 ) ;
16516: LD_VAR 0 1
16520: PPUSH
16521: LD_INT 900
16523: PPUSH
16524: CALL_OW 234
16528: GO 16513
16530: POP
16531: POP
// end ;
16532: PPOPN 1
16534: END
// every 0 0$25 trigger tick > 7 7$00 do var dialog , p ;
16535: LD_OWVAR 1
16539: PUSH
16540: LD_INT 14700
16542: GREATER
16543: IFFALSE 18171
16545: GO 16547
16547: DISABLE
16548: LD_INT 0
16550: PPUSH
16551: PPUSH
// begin PrepareSupportFromDelta ;
16552: CALL 4111 0 0
// deltaSupport := true ;
16556: LD_ADDR_EXP 6
16560: PUSH
16561: LD_INT 1
16563: ST_TO_ADDR
// dialog := false ;
16564: LD_ADDR_VAR 0 1
16568: PUSH
16569: LD_INT 0
16571: ST_TO_ADDR
// if IsOk ( Gladstone ) then
16572: LD_EXP 21
16576: PPUSH
16577: CALL_OW 302
16581: IFFALSE 16603
// dialog := Say ( Gladstone , D2-Glad-1 ) else
16583: LD_ADDR_VAR 0 1
16587: PUSH
16588: LD_EXP 21
16592: PPUSH
16593: LD_STRING D2-Glad-1
16595: PPUSH
16596: CALL_OW 88
16600: ST_TO_ADDR
16601: GO 16685
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_tag , 107 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ Joan , Denis ] , D2-Sol1-1 , D2-FSol1-1 ) ;
16603: LD_ADDR_VAR 0 1
16607: PUSH
16608: LD_INT 22
16610: PUSH
16611: LD_INT 1
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 120
16620: PUSH
16621: LD_INT 107
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 21
16630: PUSH
16631: LD_INT 1
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 23
16640: PUSH
16641: LD_INT 1
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: PPUSH
16654: CALL_OW 69
16658: PUSH
16659: LD_EXP 27
16663: PUSH
16664: LD_EXP 26
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: DIFF
16673: PPUSH
16674: LD_STRING D2-Sol1-1
16676: PPUSH
16677: LD_STRING D2-FSol1-1
16679: PPUSH
16680: CALL 20466 0 3
16684: ST_TO_ADDR
// if dialog then
16685: LD_VAR 0 1
16689: IFFALSE 16796
// begin if IsOK ( Donaldson ) and gammaCommander = 1 then
16691: LD_EXP 16
16695: PPUSH
16696: CALL_OW 302
16700: IFFALSE 16712
16702: PUSH
16703: LD_EXP 13
16707: PUSH
16708: LD_INT 1
16710: EQUAL
16711: AND
16712: IFFALSE 16726
// Say ( Donaldson , D2-Don-1 ) ;
16714: LD_EXP 16
16718: PPUSH
16719: LD_STRING D2-Don-1
16721: PPUSH
16722: CALL_OW 88
// if IsOK ( Brown ) and gammaCommander = 2 then
16726: LD_EXP 15
16730: PPUSH
16731: CALL_OW 302
16735: IFFALSE 16747
16737: PUSH
16738: LD_EXP 13
16742: PUSH
16743: LD_INT 2
16745: EQUAL
16746: AND
16747: IFFALSE 16761
// Say ( Brown , D2-Brown-1 ) ;
16749: LD_EXP 15
16753: PPUSH
16754: LD_STRING D2-Brown-1
16756: PPUSH
16757: CALL_OW 88
// if IsOK ( Houten ) and gammaCommander = 3 then
16761: LD_EXP 25
16765: PPUSH
16766: CALL_OW 302
16770: IFFALSE 16782
16772: PUSH
16773: LD_EXP 13
16777: PUSH
16778: LD_INT 3
16780: EQUAL
16781: AND
16782: IFFALSE 16796
// Say ( Houten , D2-VanH-1 ) ;
16784: LD_EXP 25
16788: PPUSH
16789: LD_STRING D2-VanH-1
16791: PPUSH
16792: CALL_OW 88
// end ; PrepareRussianAttack ( 3 ) ;
16796: LD_INT 3
16798: PPUSH
16799: CALL 13154 0 1
// wait ( LoadVariable ( 07_time , 9 9$00 ) div 3 ) ;
16803: LD_STRING 07_time
16805: PPUSH
16806: LD_INT 18900
16808: PPUSH
16809: CALL_OW 30
16813: PUSH
16814: LD_INT 3
16816: DIV
16817: PPUSH
16818: CALL_OW 67
// if GetTech ( tech_advmet , 1 ) = state_researched then
16822: LD_INT 34
16824: PPUSH
16825: LD_INT 1
16827: PPUSH
16828: CALL_OW 321
16832: PUSH
16833: LD_INT 2
16835: EQUAL
16836: IFFALSE 16845
// SetAchievement ( ACH_HEAVYGUN ) ;
16838: LD_STRING ACH_HEAVYGUN
16840: PPUSH
16841: CALL_OW 543
// PrepareMacmillanSquad ;
16845: CALL 4887 0 0
// wait ( 0 0$1 ) ;
16849: LD_INT 35
16851: PPUSH
16852: CALL_OW 67
// DialogueOn ;
16856: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
16860: LD_EXP 14
16864: PPUSH
16865: CALL_OW 87
// dwait ( 0 0$2 ) ;
16869: LD_INT 70
16871: PPUSH
16872: CALL_OW 68
// DialogueOff ;
16876: CALL_OW 7
// wait ( 0 0$10 ) ;
16880: LD_INT 350
16882: PPUSH
16883: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
16887: LD_INT 1
16889: PPUSH
16890: CALL_OW 427
// p := 0 ;
16894: LD_ADDR_VAR 0 2
16898: PUSH
16899: LD_INT 0
16901: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16902: LD_INT 35
16904: PPUSH
16905: CALL_OW 67
// p := Inc ( p ) ;
16909: LD_ADDR_VAR 0 2
16913: PUSH
16914: LD_VAR 0 2
16918: PPUSH
16919: CALL 82742 0 1
16923: ST_TO_ADDR
// if p > 300 then
16924: LD_VAR 0 2
16928: PUSH
16929: LD_INT 300
16931: GREATER
16932: IFFALSE 16936
// exit ;
16934: GO 18171
// until IsInArea ( JMM , gammaBaseArea ) or IsInArea ( IsInUnit ( JMM ) , gammaBaseArea ) or GetDistUnits ( JMM , Joan ) < 10 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_dist , JMM , 12 ] ] ) ;
16936: LD_EXP 14
16940: PPUSH
16941: LD_INT 15
16943: PPUSH
16944: CALL_OW 308
16948: IFTRUE 16969
16950: PUSH
16951: LD_EXP 14
16955: PPUSH
16956: CALL_OW 310
16960: PPUSH
16961: LD_INT 15
16963: PPUSH
16964: CALL_OW 308
16968: OR
16969: IFTRUE 16991
16971: PUSH
16972: LD_EXP 14
16976: PPUSH
16977: LD_EXP 27
16981: PPUSH
16982: CALL_OW 296
16986: PUSH
16987: LD_INT 10
16989: LESS
16990: OR
16991: IFTRUE 17058
16993: PUSH
16994: LD_INT 22
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 2
17006: PUSH
17007: LD_INT 120
17009: PUSH
17010: LD_INT 106
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 120
17019: PUSH
17020: LD_INT 107
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: PUSH
17032: LD_INT 91
17034: PUSH
17035: LD_EXP 14
17039: PUSH
17040: LD_INT 12
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 69
17057: OR
17058: IFFALSE 16902
// DialogueOn ;
17060: CALL_OW 6
// Say ( JMM , D3-JMM-1 ) ;
17064: LD_EXP 14
17068: PPUSH
17069: LD_STRING D3-JMM-1
17071: PPUSH
17072: CALL_OW 88
// if IsOK ( Donaldson ) and gammaCommander = 1 then
17076: LD_EXP 16
17080: PPUSH
17081: CALL_OW 302
17085: IFFALSE 17097
17087: PUSH
17088: LD_EXP 13
17092: PUSH
17093: LD_INT 1
17095: EQUAL
17096: AND
17097: IFFALSE 17113
// Say ( Donaldson , D3-Don-1 ) else
17099: LD_EXP 16
17103: PPUSH
17104: LD_STRING D3-Don-1
17106: PPUSH
17107: CALL_OW 88
17111: GO 17209
// begin if gammaCommander = 1 then
17113: LD_EXP 13
17117: PUSH
17118: LD_INT 1
17120: EQUAL
17121: IFFALSE 17209
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1 ,  ) then
17123: LD_INT 22
17125: PUSH
17126: LD_INT 1
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 21
17135: PUSH
17136: LD_INT 1
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 23
17145: PUSH
17146: LD_INT 1
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 120
17155: PUSH
17156: LD_INT 106
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 26
17165: PUSH
17166: LD_INT 1
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: PPUSH
17180: CALL_OW 69
17184: PPUSH
17185: LD_STRING D3-Sol1-1
17187: PPUSH
17188: LD_STRING 
17190: PPUSH
17191: CALL 20466 0 3
17195: IFFALSE 17209
// Say ( JMM , D3-JMM-2 ) ;
17197: LD_EXP 14
17201: PPUSH
17202: LD_STRING D3-JMM-2
17204: PPUSH
17205: CALL_OW 88
// end ; end ; if IsOK ( Brown ) and gammaCommander = 2 then
17209: LD_EXP 15
17213: PPUSH
17214: CALL_OW 302
17218: IFFALSE 17230
17220: PUSH
17221: LD_EXP 13
17225: PUSH
17226: LD_INT 2
17228: EQUAL
17229: AND
17230: IFFALSE 17246
// Say ( Brown , D3-Brown-1 ) else
17232: LD_EXP 15
17236: PPUSH
17237: LD_STRING D3-Brown-1
17239: PPUSH
17240: CALL_OW 88
17244: GO 17342
// begin if gammaCommander = 2 then
17246: LD_EXP 13
17250: PUSH
17251: LD_INT 2
17253: EQUAL
17254: IFFALSE 17342
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1a ,  ) then
17256: LD_INT 22
17258: PUSH
17259: LD_INT 1
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: LD_INT 21
17268: PUSH
17269: LD_INT 1
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: PUSH
17276: LD_INT 23
17278: PUSH
17279: LD_INT 1
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 120
17288: PUSH
17289: LD_INT 106
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 26
17298: PUSH
17299: LD_INT 1
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: PPUSH
17313: CALL_OW 69
17317: PPUSH
17318: LD_STRING D3-Sol1-1a
17320: PPUSH
17321: LD_STRING 
17323: PPUSH
17324: CALL 20466 0 3
17328: IFFALSE 17342
// Say ( JMM , D3-JMM-2 ) ;
17330: LD_EXP 14
17334: PPUSH
17335: LD_STRING D3-JMM-2
17337: PPUSH
17338: CALL_OW 88
// end ; end ; if IsOK ( Houten ) and gammaCommander = 3 then
17342: LD_EXP 25
17346: PPUSH
17347: CALL_OW 302
17351: IFFALSE 17363
17353: PUSH
17354: LD_EXP 13
17358: PUSH
17359: LD_INT 3
17361: EQUAL
17362: AND
17363: IFFALSE 17379
// Say ( Houten , D3-VanH-1 ) else
17365: LD_EXP 25
17369: PPUSH
17370: LD_STRING D3-VanH-1
17372: PPUSH
17373: CALL_OW 88
17377: GO 17475
// begin if gammaCommander = 3 then
17379: LD_EXP 13
17383: PUSH
17384: LD_INT 3
17386: EQUAL
17387: IFFALSE 17475
// begin if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3-Sol1-1b ,  ) then
17389: LD_INT 22
17391: PUSH
17392: LD_INT 1
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 21
17401: PUSH
17402: LD_INT 1
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 23
17411: PUSH
17412: LD_INT 1
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 120
17421: PUSH
17422: LD_INT 106
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 26
17431: PUSH
17432: LD_INT 1
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: PPUSH
17446: CALL_OW 69
17450: PPUSH
17451: LD_STRING D3-Sol1-1b
17453: PPUSH
17454: LD_STRING 
17456: PPUSH
17457: CALL 20466 0 3
17461: IFFALSE 17475
// Say ( JMM , D3-JMM-2 ) ;
17463: LD_EXP 14
17467: PPUSH
17468: LD_STRING D3-JMM-2
17470: PPUSH
17471: CALL_OW 88
// end ; end ; if IsOK ( Joan ) then
17475: LD_EXP 27
17479: PPUSH
17480: CALL_OW 302
17484: IFFALSE 17512
// begin Say ( Joan , D3a-Joan-1 ) ;
17486: LD_EXP 27
17490: PPUSH
17491: LD_STRING D3a-Joan-1
17493: PPUSH
17494: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
17498: LD_EXP 14
17502: PPUSH
17503: LD_STRING D3a-JMM-1
17505: PPUSH
17506: CALL_OW 88
// end else
17510: GO 17946
// begin if LoadVariable ( 06_JoanStatus_1 , 0 ) = 1 then
17512: LD_STRING 06_JoanStatus_1
17514: PPUSH
17515: LD_INT 0
17517: PPUSH
17518: CALL_OW 30
17522: PUSH
17523: LD_INT 1
17525: EQUAL
17526: IFFALSE 17946
// begin Say ( JMM , D3b-JMM-1 ) ;
17528: LD_EXP 14
17532: PPUSH
17533: LD_STRING D3b-JMM-1
17535: PPUSH
17536: CALL_OW 88
// dialog := false ;
17540: LD_ADDR_VAR 0 1
17544: PUSH
17545: LD_INT 0
17547: ST_TO_ADDR
// if gammaCommander = 1 then
17548: LD_EXP 13
17552: PUSH
17553: LD_INT 1
17555: EQUAL
17556: IFFALSE 17667
// if IsOK ( Donaldson ) then
17558: LD_EXP 16
17562: PPUSH
17563: CALL_OW 302
17567: IFFALSE 17589
// dialog := Say ( Donaldson , D3b-Don-1 ) else
17569: LD_ADDR_VAR 0 1
17573: PUSH
17574: LD_EXP 16
17578: PPUSH
17579: LD_STRING D3b-Don-1
17581: PPUSH
17582: CALL_OW 88
17586: ST_TO_ADDR
17587: GO 17667
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17589: LD_ADDR_VAR 0 1
17593: PUSH
17594: LD_INT 22
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 21
17606: PUSH
17607: LD_INT 1
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 23
17616: PUSH
17617: LD_INT 1
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 120
17626: PUSH
17627: LD_INT 106
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 26
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: PPUSH
17651: CALL_OW 69
17655: PPUSH
17656: LD_STRING D3b-Sol1-1
17658: PPUSH
17659: LD_STRING 
17661: PPUSH
17662: CALL 20466 0 3
17666: ST_TO_ADDR
// if gammaCommander = 2 then
17667: LD_EXP 13
17671: PUSH
17672: LD_INT 2
17674: EQUAL
17675: IFFALSE 17786
// if IsOk ( Brown ) then
17677: LD_EXP 15
17681: PPUSH
17682: CALL_OW 302
17686: IFFALSE 17708
// dialog := Say ( Brown , D3b-Brown-1 ) else
17688: LD_ADDR_VAR 0 1
17692: PUSH
17693: LD_EXP 15
17697: PPUSH
17698: LD_STRING D3b-Brown-1
17700: PPUSH
17701: CALL_OW 88
17705: ST_TO_ADDR
17706: GO 17786
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17708: LD_ADDR_VAR 0 1
17712: PUSH
17713: LD_INT 22
17715: PUSH
17716: LD_INT 1
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 21
17725: PUSH
17726: LD_INT 1
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 23
17735: PUSH
17736: LD_INT 1
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 120
17745: PUSH
17746: LD_INT 106
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 26
17755: PUSH
17756: LD_INT 1
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: PPUSH
17770: CALL_OW 69
17774: PPUSH
17775: LD_STRING D3b-Sol1-1
17777: PPUSH
17778: LD_STRING 
17780: PPUSH
17781: CALL 20466 0 3
17785: ST_TO_ADDR
// if gammaCommander = 3 then
17786: LD_EXP 13
17790: PUSH
17791: LD_INT 3
17793: EQUAL
17794: IFFALSE 17905
// if IsOk ( Houten ) then
17796: LD_EXP 25
17800: PPUSH
17801: CALL_OW 302
17805: IFFALSE 17827
// dialog := Say ( Houten , D3b-VanH-1 ) else
17807: LD_ADDR_VAR 0 1
17811: PUSH
17812: LD_EXP 25
17816: PPUSH
17817: LD_STRING D3b-VanH-1
17819: PPUSH
17820: CALL_OW 88
17824: ST_TO_ADDR
17825: GO 17905
// dialog := SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_tag , 106 ] , [ f_sex , sex_male ] ] ) , D3b-Sol1-1 ,  ) ;
17827: LD_ADDR_VAR 0 1
17831: PUSH
17832: LD_INT 22
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 21
17844: PUSH
17845: LD_INT 1
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 23
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 120
17864: PUSH
17865: LD_INT 106
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 26
17874: PUSH
17875: LD_INT 1
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: PPUSH
17889: CALL_OW 69
17893: PPUSH
17894: LD_STRING D3b-Sol1-1
17896: PPUSH
17897: LD_STRING 
17899: PPUSH
17900: CALL 20466 0 3
17904: ST_TO_ADDR
// if dialog then
17905: LD_VAR 0 1
17909: IFFALSE 17946
// begin Say ( JMM , D3b-JMM-2 ) ;
17911: LD_EXP 14
17915: PPUSH
17916: LD_STRING D3b-JMM-2
17918: PPUSH
17919: CALL_OW 88
// if IsOK ( Lisa ) then
17923: LD_EXP 19
17927: PPUSH
17928: CALL_OW 302
17932: IFFALSE 17946
// Say ( Lisa , D3b-Lisa-2 ) ;
17934: LD_EXP 19
17938: PPUSH
17939: LD_STRING D3b-Lisa-2
17941: PPUSH
17942: CALL_OW 88
// end ; end ; end ; if not seenComputer then
17946: LD_EXP 7
17950: NOT
17951: IFFALSE 17959
// begin DialogueOff ;
17953: CALL_OW 7
// exit ;
17957: GO 18171
// end ; if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCa-Sol1-1 ,  ) then
17959: LD_INT 22
17961: PUSH
17962: LD_INT 1
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 21
17971: PUSH
17972: LD_INT 1
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 23
17981: PUSH
17982: LD_INT 1
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 2
17991: PUSH
17992: LD_INT 120
17994: PUSH
17995: LD_INT 106
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 120
18004: PUSH
18005: LD_INT 107
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 26
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: PPUSH
18034: CALL_OW 69
18038: PPUSH
18039: LD_STRING DCa-Sol1-1
18041: PPUSH
18042: LD_STRING 
18044: PPUSH
18045: CALL 20466 0 3
18049: IFFALSE 18063
// Say ( JMM , DCb-JMM-1 ) ;
18051: LD_EXP 14
18055: PPUSH
18056: LD_STRING DCb-JMM-1
18058: PPUSH
18059: CALL_OW 88
// if SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] , [ f_sex , sex_male ] ] ) , DCb-Sol1-1 ,  ) then
18063: LD_INT 22
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 21
18075: PUSH
18076: LD_INT 1
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 23
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 2
18095: PUSH
18096: LD_INT 120
18098: PUSH
18099: LD_INT 106
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 120
18108: PUSH
18109: LD_INT 107
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 26
18123: PUSH
18124: LD_INT 1
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: PPUSH
18138: CALL_OW 69
18142: PPUSH
18143: LD_STRING DCb-Sol1-1
18145: PPUSH
18146: LD_STRING 
18148: PPUSH
18149: CALL 20466 0 3
18153: IFFALSE 18167
// Say ( JMM , DCb-JMM-2 ) ;
18155: LD_EXP 14
18159: PPUSH
18160: LD_STRING DCb-JMM-2
18162: PPUSH
18163: CALL_OW 88
// DialogueOff ;
18167: CALL_OW 7
// end ;
18171: PPOPN 2
18173: END
// export function DialogSeenComputer ( un ) ; begin
18174: LD_INT 0
18176: PPUSH
// if jmmArrival then
18177: LD_EXP 8
18181: IFFALSE 18185
// exit ;
18183: GO 18251
// CenterOnUnits ( un ) ;
18185: LD_VAR 0 1
18189: PPUSH
18190: CALL_OW 85
// SayRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_tag , 106 ] , [ f_tag , 107 ] ] ] ) , DC-Sol1-1 , DC-FSol1-1 ) ;
18194: LD_INT 22
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 2
18206: PUSH
18207: LD_INT 120
18209: PUSH
18210: LD_INT 106
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 120
18219: PUSH
18220: LD_INT 107
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: LIST
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PPUSH
18236: CALL_OW 69
18240: PPUSH
18241: LD_STRING DC-Sol1-1
18243: PPUSH
18244: LD_STRING DC-FSol1-1
18246: PPUSH
18247: CALL 20466 0 3
// end ;
18251: LD_VAR 0 2
18255: RET
// every 0 0$30 trigger jmmArrival and tick >= 23 23$00 and IsOk ( JMM ) do
18256: LD_EXP 8
18260: IFFALSE 18272
18262: PUSH
18263: LD_OWVAR 1
18267: PUSH
18268: LD_INT 48300
18270: GREATEREQUAL
18271: AND
18272: IFFALSE 18285
18274: PUSH
18275: LD_EXP 14
18279: PPUSH
18280: CALL_OW 302
18284: AND
18285: IFFALSE 18775
18287: GO 18289
18289: DISABLE
// begin wait ( 2 2$00 ) ;
18290: LD_INT 4200
18292: PPUSH
18293: CALL_OW 67
// DialogueOn ;
18297: CALL_OW 6
// SayRadio ( Powell , D4-Pow-1 ) ;
18301: LD_EXP 30
18305: PPUSH
18306: LD_STRING D4-Pow-1
18308: PPUSH
18309: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
18313: LD_EXP 14
18317: PPUSH
18318: LD_STRING D4-JMM-1
18320: PPUSH
18321: CALL_OW 88
// SayRadio ( Powell , D4-Pow-2 ) ;
18325: LD_EXP 30
18329: PPUSH
18330: LD_STRING D4-Pow-2
18332: PPUSH
18333: CALL_OW 94
// Say ( JMM , D4-JMM-2 ) ;
18337: LD_EXP 14
18341: PPUSH
18342: LD_STRING D4-JMM-2
18344: PPUSH
18345: CALL_OW 88
// SayRadio ( Powell , D4-Pow-3 ) ;
18349: LD_EXP 30
18353: PPUSH
18354: LD_STRING D4-Pow-3
18356: PPUSH
18357: CALL_OW 94
// DialogueOff ;
18361: CALL_OW 7
// wait ( 1 1$00 ) ;
18365: LD_INT 2100
18367: PPUSH
18368: CALL_OW 67
// RaiseSailEvent ( 1 ) ;
18372: LD_INT 1
18374: PPUSH
18375: CALL_OW 427
// wait ( 7 7$30 ) ;
18379: LD_INT 15750
18381: PPUSH
18382: CALL_OW 67
// DialogueOn ;
18386: CALL_OW 6
// SayRadio ( Powell , D4a-Pow-1 ) ;
18390: LD_EXP 30
18394: PPUSH
18395: LD_STRING D4a-Pow-1
18397: PPUSH
18398: CALL_OW 94
// DialogueOff ;
18402: CALL_OW 7
// RaiseSailEvent ( 1 ) ;
18406: LD_INT 1
18408: PPUSH
18409: CALL_OW 427
// SikorskiCounter ;
18413: CALL 20250 0 0
// PrepareSikorsky ;
18417: CALL 6378 0 0
// CenterNowOnUnits ( Sikorski ) ;
18421: LD_EXP 28
18425: PPUSH
18426: CALL_OW 87
// DialogueOn ;
18430: CALL_OW 6
// Say ( Sikorski , D5-Sik-1 ) ;
18434: LD_EXP 28
18438: PPUSH
18439: LD_STRING D5-Sik-1
18441: PPUSH
18442: CALL_OW 88
// if FilterUnitsInArea ( ruDefendArea , [ f_side , 1 ] ) > 1 or not IsOk ( ruDep ) or GetSide ( ruDep ) = 1 then
18446: LD_INT 11
18448: PPUSH
18449: LD_INT 22
18451: PUSH
18452: LD_INT 1
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PPUSH
18459: CALL_OW 70
18463: PUSH
18464: LD_INT 1
18466: GREATER
18467: IFTRUE 18479
18469: PUSH
18470: LD_INT 28
18472: PPUSH
18473: CALL_OW 302
18477: NOT
18478: OR
18479: IFTRUE 18494
18481: PUSH
18482: LD_INT 28
18484: PPUSH
18485: CALL_OW 255
18489: PUSH
18490: LD_INT 1
18492: EQUAL
18493: OR
18494: IFFALSE 18546
// begin Say ( JMM , D5-JMM-1 ) ;
18496: LD_EXP 14
18500: PPUSH
18501: LD_STRING D5-JMM-1
18503: PPUSH
18504: CALL_OW 88
// Say ( Sikorski , D7a-Sik-1 ) ;
18508: LD_EXP 28
18512: PPUSH
18513: LD_STRING D7a-Sik-1
18515: PPUSH
18516: CALL_OW 88
// DialogueOff ;
18520: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18524: LD_STRING M2
18526: PPUSH
18527: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18531: LD_INT 1
18533: PPUSH
18534: CALL_OW 427
// SikorskiAttack ;
18538: CALL 8001 0 0
// exit ;
18542: GO 18775
// end else
18544: GO 18591
// if FilterUnitsInArea ( gammaBaseArea , [ f_enemy , 1 ] ) then
18546: LD_INT 15
18548: PPUSH
18549: LD_INT 81
18551: PUSH
18552: LD_INT 1
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PPUSH
18559: CALL_OW 70
18563: IFFALSE 18579
// Say ( JMM , D5-JMM-1b ) else
18565: LD_EXP 14
18569: PPUSH
18570: LD_STRING D5-JMM-1b
18572: PPUSH
18573: CALL_OW 88
18577: GO 18591
// Say ( JMM , D5-JMM-1a ) ;
18579: LD_EXP 14
18583: PPUSH
18584: LD_STRING D5-JMM-1a
18586: PPUSH
18587: CALL_OW 88
// Say ( Sikorski , D5-Sik-2 ) ;
18591: LD_EXP 28
18595: PPUSH
18596: LD_STRING D5-Sik-2
18598: PPUSH
18599: CALL_OW 88
// case Query ( QSikorski ) of 1 :
18603: LD_STRING QSikorski
18605: PPUSH
18606: CALL_OW 97
18610: PUSH
18611: LD_INT 1
18613: DOUBLE
18614: EQUAL
18615: IFTRUE 18619
18617: GO 18642
18619: POP
// begin Say ( Sikorski , D5a-Sik-1 ) ;
18620: LD_EXP 28
18624: PPUSH
18625: LD_STRING D5a-Sik-1
18627: PPUSH
18628: CALL_OW 88
// sikorskiWait := 1 1$00 ;
18632: LD_ADDR_EXP 4
18636: PUSH
18637: LD_INT 2100
18639: ST_TO_ADDR
// end ; 2 :
18640: GO 18729
18642: LD_INT 2
18644: DOUBLE
18645: EQUAL
18646: IFTRUE 18650
18648: GO 18673
18650: POP
// begin Say ( Sikorski , D5b-Sik-1 ) ;
18651: LD_EXP 28
18655: PPUSH
18656: LD_STRING D5b-Sik-1
18658: PPUSH
18659: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18663: LD_ADDR_EXP 4
18667: PUSH
18668: LD_INT 10500
18670: ST_TO_ADDR
// end ; 3 :
18671: GO 18729
18673: LD_INT 3
18675: DOUBLE
18676: EQUAL
18677: IFTRUE 18681
18679: GO 18728
18681: POP
// begin Say ( Sikorski , D5c-Sik-1 ) ;
18682: LD_EXP 28
18686: PPUSH
18687: LD_STRING D5c-Sik-1
18689: PPUSH
18690: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
18694: LD_EXP 14
18698: PPUSH
18699: LD_STRING D5c-JMM-1
18701: PPUSH
18702: CALL_OW 88
// Say ( Sikorski , D5c-Sik-2 ) ;
18706: LD_EXP 28
18710: PPUSH
18711: LD_STRING D5c-Sik-2
18713: PPUSH
18714: CALL_OW 88
// sikorskiWait := 5 5$00 ;
18718: LD_ADDR_EXP 4
18722: PUSH
18723: LD_INT 10500
18725: ST_TO_ADDR
// end ; end ;
18726: GO 18729
18728: POP
// DialogueOff ;
18729: CALL_OW 7
// SikorskiWaitCounter ;
18733: CALL 20313 0 0
// DialogueOn ;
18737: CALL_OW 6
// Say ( Sikorski , D6-Sik-1 ) ;
18741: LD_EXP 28
18745: PPUSH
18746: LD_STRING D6-Sik-1
18748: PPUSH
18749: CALL_OW 88
// DialogueOff ;
18753: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
18757: LD_STRING M2
18759: PPUSH
18760: CALL_OW 337
// RaiseSailEvent ( 1 ) ;
18764: LD_INT 1
18766: PPUSH
18767: CALL_OW 427
// SikorskiAttack ;
18771: CALL 8001 0 0
// end ;
18775: END
// every 0 0$1 trigger FilterUnitsInArea ( ruDefendArea , [ f_side , 4 ] ) > 2 do
18776: LD_INT 11
18778: PPUSH
18779: LD_INT 22
18781: PUSH
18782: LD_INT 4
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PPUSH
18789: CALL_OW 70
18793: PUSH
18794: LD_INT 2
18796: GREATER
18797: IFFALSE 18996
18799: GO 18801
18801: DISABLE
// begin Say ( Sikorski , D7-Sik-1 ) ;
18802: LD_EXP 28
18806: PPUSH
18807: LD_STRING D7-Sik-1
18809: PPUSH
18810: CALL_OW 88
// wait ( 0 0$10 ) ;
18814: LD_INT 350
18816: PPUSH
18817: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) then
18821: LD_EXP 14
18825: PPUSH
18826: LD_INT 11
18828: PPUSH
18829: CALL_OW 308
18833: IFTRUE 18854
18835: PUSH
18836: LD_EXP 14
18840: PPUSH
18841: CALL_OW 310
18845: PPUSH
18846: LD_INT 11
18848: PPUSH
18849: CALL_OW 308
18853: OR
18854: IFFALSE 18878
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18856: LD_EXP 28
18860: PPUSH
18861: LD_STRING D7a-Sik-1
18863: PPUSH
18864: CALL_OW 88
// sikorskiStatus := 1 ;
18868: LD_ADDR_EXP 9
18872: PUSH
18873: LD_INT 1
18875: ST_TO_ADDR
// end else
18876: GO 18898
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18878: LD_EXP 28
18882: PPUSH
18883: LD_STRING D7b-Sik-1
18885: PPUSH
18886: CALL_OW 88
// sikorskiStatus := 0 ;
18890: LD_ADDR_EXP 9
18894: PUSH
18895: LD_INT 0
18897: ST_TO_ADDR
// end ; wait ( 0 0$45 ) ;
18898: LD_INT 1575
18900: PPUSH
18901: CALL_OW 67
// if IsInArea ( JMM , ruDefendArea ) or IsInArea ( IsInUnit ( JMM ) , ruDefendArea ) or not IsOk ( JMM ) then
18905: LD_EXP 14
18909: PPUSH
18910: LD_INT 11
18912: PPUSH
18913: CALL_OW 308
18917: IFTRUE 18938
18919: PUSH
18920: LD_EXP 14
18924: PPUSH
18925: CALL_OW 310
18929: PPUSH
18930: LD_INT 11
18932: PPUSH
18933: CALL_OW 308
18937: OR
18938: IFTRUE 18952
18940: PUSH
18941: LD_EXP 14
18945: PPUSH
18946: CALL_OW 302
18950: NOT
18951: OR
18952: IFFALSE 18976
// begin Say ( Sikorski , D7a-Sik-1 ) ;
18954: LD_EXP 28
18958: PPUSH
18959: LD_STRING D7a-Sik-1
18961: PPUSH
18962: CALL_OW 88
// sikorskiStatus := 1 ;
18966: LD_ADDR_EXP 9
18970: PUSH
18971: LD_INT 1
18973: ST_TO_ADDR
// end else
18974: GO 18996
// begin Say ( Sikorski , D7b-Sik-1 ) ;
18976: LD_EXP 28
18980: PPUSH
18981: LD_STRING D7b-Sik-1
18983: PPUSH
18984: CALL_OW 88
// sikorskiStatus := 0 ;
18988: LD_ADDR_EXP 9
18992: PUSH
18993: LD_INT 0
18995: ST_TO_ADDR
// end ; end ;
18996: END
// export function SikorskiKilledInAction ; begin
18997: LD_INT 0
18999: PPUSH
// wait ( 0 0$2 ) ;
19000: LD_INT 70
19002: PPUSH
19003: CALL_OW 67
// DialogueOn ;
19007: CALL_OW 6
// dwait ( 0 0$1 ) ;
19011: LD_INT 35
19013: PPUSH
19014: CALL_OW 68
// SayRadio ( Powell , D8b-Pow-1 ) ;
19018: LD_EXP 30
19022: PPUSH
19023: LD_STRING D8b-Pow-1
19025: PPUSH
19026: CALL_OW 94
// YouLost ( Dismissed ) ;
19030: LD_STRING Dismissed
19032: PPUSH
19033: CALL_OW 104
// DialogueOff ;
19037: CALL_OW 7
// end ;
19041: LD_VAR 0 1
19045: RET
// every 0 0$2 trigger jmmArrival and IsDead ( ruDep ) and IsDead ( ruCommander ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_btype , b_barracks ] ] ) = 0 do var i , tmp , prefix ;
19046: LD_EXP 8
19050: IFFALSE 19061
19052: PUSH
19053: LD_INT 28
19055: PPUSH
19056: CALL_OW 301
19060: AND
19061: IFFALSE 19074
19063: PUSH
19064: LD_EXP 32
19068: PPUSH
19069: CALL_OW 301
19073: AND
19074: IFFALSE 19117
19076: PUSH
19077: LD_INT 22
19079: PUSH
19080: LD_INT 3
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 50
19089: PUSH
19090: EMPTY
19091: LIST
19092: PUSH
19093: LD_INT 30
19095: PUSH
19096: LD_INT 5
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: PPUSH
19108: CALL_OW 69
19112: PUSH
19113: LD_INT 0
19115: EQUAL
19116: AND
19117: IFFALSE 20247
19119: GO 19121
19121: DISABLE
19122: LD_INT 0
19124: PPUSH
19125: PPUSH
19126: PPUSH
// begin Video ( true ) ;
19127: LD_INT 1
19129: PPUSH
19130: CALL 81341 0 1
// PlaceSeeing ( 104 , 108 , 1 , - 36 ) ;
19134: LD_INT 104
19136: PPUSH
19137: LD_INT 108
19139: PPUSH
19140: LD_INT 1
19142: PPUSH
19143: LD_INT 36
19145: NEG
19146: PPUSH
19147: CALL_OW 330
// CenterOnXY ( 104 , 108 ) ;
19151: LD_INT 104
19153: PPUSH
19154: LD_INT 108
19156: PPUSH
19157: CALL_OW 84
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 249 ] ] ] ) ;
19161: LD_ADDR_VAR 0 2
19165: PUSH
19166: LD_INT 22
19168: PUSH
19169: LD_INT 1
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 21
19178: PUSH
19179: LD_INT 1
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 3
19188: PUSH
19189: LD_INT 24
19191: PUSH
19192: LD_INT 249
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: LIST
19207: PPUSH
19208: CALL_OW 69
19212: ST_TO_ADDR
// if tmp then
19213: LD_VAR 0 2
19217: IFFALSE 19248
// for i in tmp do
19219: LD_ADDR_VAR 0 1
19223: PUSH
19224: LD_VAR 0 2
19228: PUSH
19229: FOR_IN
19230: IFFALSE 19246
// SetLives ( i , 249 ) ;
19232: LD_VAR 0 1
19236: PPUSH
19237: LD_INT 249
19239: PPUSH
19240: CALL_OW 234
19244: GO 19229
19246: POP
19247: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
19248: LD_ADDR_VAR 0 1
19252: PUSH
19253: LD_INT 22
19255: PUSH
19256: LD_INT 3
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 21
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PPUSH
19277: CALL_OW 69
19281: PUSH
19282: FOR_IN
19283: IFFALSE 19326
// begin ComExit ( i ) ;
19285: LD_VAR 0 1
19289: PPUSH
19290: CALL 81767 0 1
// AddComMoveXY ( i , 131 , 127 ) ;
19294: LD_VAR 0 1
19298: PPUSH
19299: LD_INT 131
19301: PPUSH
19302: LD_INT 127
19304: PPUSH
19305: CALL_OW 171
// AddComMoveXY ( i , 141 , 147 ) ;
19309: LD_VAR 0 1
19313: PPUSH
19314: LD_INT 141
19316: PPUSH
19317: LD_INT 147
19319: PPUSH
19320: CALL_OW 171
// end ;
19324: GO 19282
19326: POP
19327: POP
// AddComAgressiveMove ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , 131 , 127 ) ;
19328: LD_INT 81
19330: PUSH
19331: LD_INT 3
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 3
19340: PUSH
19341: LD_INT 21
19343: PUSH
19344: LD_INT 3
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PPUSH
19359: CALL_OW 69
19363: PPUSH
19364: LD_INT 131
19366: PPUSH
19367: LD_INT 127
19369: PPUSH
19370: CALL_OW 174
// wait ( 0 0$08 ) ;
19374: LD_INT 280
19376: PPUSH
19377: CALL_OW 67
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 7 then
19381: LD_INT 22
19383: PUSH
19384: LD_INT 1
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 21
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 23
19403: PUSH
19404: LD_INT 1
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 50
19413: PUSH
19414: EMPTY
19415: LIST
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: PPUSH
19423: CALL_OW 69
19427: PPUSH
19428: CALL 45393 0 1
19432: PUSH
19433: LD_INT 7
19435: LESS
19436: IFFALSE 19447
// begin YouLost ( LostVictory ) ;
19438: LD_STRING LostVictory
19440: PPUSH
19441: CALL_OW 104
// exit ;
19445: GO 20247
// end ; DialogueOn ;
19447: CALL_OW 6
// if sikorskiStatus = 1 and IsOk ( Sikorski ) then
19451: LD_EXP 9
19455: PUSH
19456: LD_INT 1
19458: EQUAL
19459: IFFALSE 19472
19461: PUSH
19462: LD_EXP 28
19466: PPUSH
19467: CALL_OW 302
19471: AND
19472: IFFALSE 19486
// Say ( Sikorski , D9-Sik-1 ) ;
19474: LD_EXP 28
19478: PPUSH
19479: LD_STRING D9-Sik-1
19481: PPUSH
19482: CALL_OW 88
// if FilterAllUnits ( [ f_side , 4 ] ) = 0 and sikorskiArriveCounter then
19486: LD_INT 22
19488: PUSH
19489: LD_INT 4
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PPUSH
19496: CALL_OW 69
19500: PUSH
19501: LD_INT 0
19503: EQUAL
19504: IFFALSE 19512
19506: PUSH
19507: LD_EXP 3
19511: AND
19512: IFFALSE 19521
// SetAchievement ( ACH_BLITZKRIEG ) ;
19514: LD_STRING ACH_BLITZKRIEG
19516: PPUSH
19517: CALL_OW 543
// if tick <= 45 45$10 then
19521: LD_OWVAR 1
19525: PUSH
19526: LD_INT 94850
19528: LESSEQUAL
19529: IFFALSE 19545
// begin wait ( 3 ) ;
19531: LD_INT 3
19533: PPUSH
19534: CALL_OW 67
// SetAchievement ( ACH_ASPEED_8 ) ;
19538: LD_STRING ACH_ASPEED_8
19540: PPUSH
19541: CALL_OW 543
// end ; AddMedal ( med1 , 1 ) ;
19545: LD_STRING med1
19547: PPUSH
19548: LD_INT 1
19550: PPUSH
19551: CALL_OW 101
// AddMedal ( med2 , 1 ) ;
19555: LD_STRING med2
19557: PPUSH
19558: LD_INT 1
19560: PPUSH
19561: CALL_OW 101
// if sikorskiStatus = 1 then
19565: LD_EXP 9
19569: PUSH
19570: LD_INT 1
19572: EQUAL
19573: IFFALSE 19587
// AddMedal ( perfect , 1 ) else
19575: LD_STRING perfect
19577: PPUSH
19578: LD_INT 1
19580: PPUSH
19581: CALL_OW 101
19585: GO 19598
// AddMedal ( perfect , - 1 ) ;
19587: LD_STRING perfect
19589: PPUSH
19590: LD_INT 1
19592: NEG
19593: PPUSH
19594: CALL_OW 101
// if Difficulty >= 3 then
19598: LD_OWVAR 67
19602: PUSH
19603: LD_INT 3
19605: GREATEREQUAL
19606: IFFALSE 19618
// SetAchievementEX ( ACH_AMER , 8 ) ;
19608: LD_STRING ACH_AMER
19610: PPUSH
19611: LD_INT 8
19613: PPUSH
19614: CALL_OW 564
// GiveMedals ( Main ) ;
19618: LD_STRING Main
19620: PPUSH
19621: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19625: LD_INT 22
19627: PUSH
19628: LD_INT 1
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 23
19637: PUSH
19638: LD_INT 1
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 21
19647: PUSH
19648: LD_INT 1
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: LIST
19659: PPUSH
19660: CALL_OW 69
19664: PPUSH
19665: CALL_OW 43
// prefix := 08_ ;
19669: LD_ADDR_VAR 0 3
19673: PUSH
19674: LD_STRING 08_
19676: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
19677: LD_EXP 14
19681: PPUSH
19682: LD_VAR 0 3
19686: PUSH
19687: LD_STRING JMM
19689: STR
19690: PPUSH
19691: CALL_OW 38
// if IsLive ( Brown ) then
19695: LD_EXP 15
19699: PPUSH
19700: CALL_OW 300
19704: IFFALSE 19724
// SaveCharacters ( Brown , prefix & Brown ) ;
19706: LD_EXP 15
19710: PPUSH
19711: LD_VAR 0 3
19715: PUSH
19716: LD_STRING Brown
19718: STR
19719: PPUSH
19720: CALL_OW 38
// if IsLive ( Donaldson ) then
19724: LD_EXP 16
19728: PPUSH
19729: CALL_OW 300
19733: IFFALSE 19753
// SaveCharacters ( Donaldson , prefix & Donaldson ) ;
19735: LD_EXP 16
19739: PPUSH
19740: LD_VAR 0 3
19744: PUSH
19745: LD_STRING Donaldson
19747: STR
19748: PPUSH
19749: CALL_OW 38
// if IsLive ( Bobby ) then
19753: LD_EXP 17
19757: PPUSH
19758: CALL_OW 300
19762: IFFALSE 19782
// SaveCharacters ( Bobby , prefix & Bobby ) ;
19764: LD_EXP 17
19768: PPUSH
19769: LD_VAR 0 3
19773: PUSH
19774: LD_STRING Bobby
19776: STR
19777: PPUSH
19778: CALL_OW 38
// if IsLive ( Cyrus ) then
19782: LD_EXP 18
19786: PPUSH
19787: CALL_OW 300
19791: IFFALSE 19811
// SaveCharacters ( Cyrus , prefix & Cyrus ) ;
19793: LD_EXP 18
19797: PPUSH
19798: LD_VAR 0 3
19802: PUSH
19803: LD_STRING Cyrus
19805: STR
19806: PPUSH
19807: CALL_OW 38
// if IsLive ( Lisa ) then
19811: LD_EXP 19
19815: PPUSH
19816: CALL_OW 300
19820: IFFALSE 19840
// SaveCharacters ( Lisa , prefix & Lisa ) ;
19822: LD_EXP 19
19826: PPUSH
19827: LD_VAR 0 3
19831: PUSH
19832: LD_STRING Lisa
19834: STR
19835: PPUSH
19836: CALL_OW 38
// if IsLive ( Frank ) then
19840: LD_EXP 20
19844: PPUSH
19845: CALL_OW 300
19849: IFFALSE 19869
// SaveCharacters ( Frank , prefix & Frank ) ;
19851: LD_EXP 20
19855: PPUSH
19856: LD_VAR 0 3
19860: PUSH
19861: LD_STRING Frank
19863: STR
19864: PPUSH
19865: CALL_OW 38
// if IsLive ( Gladstone ) then
19869: LD_EXP 21
19873: PPUSH
19874: CALL_OW 300
19878: IFFALSE 19898
// SaveCharacters ( Gladstone , prefix & Gladstone ) ;
19880: LD_EXP 21
19884: PPUSH
19885: LD_VAR 0 3
19889: PUSH
19890: LD_STRING Gladstone
19892: STR
19893: PPUSH
19894: CALL_OW 38
// if IsLive ( Kikuchi ) then
19898: LD_EXP 22
19902: PPUSH
19903: CALL_OW 300
19907: IFFALSE 19927
// SaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
19909: LD_EXP 22
19913: PPUSH
19914: LD_VAR 0 3
19918: PUSH
19919: LD_STRING Kikuchi
19921: STR
19922: PPUSH
19923: CALL_OW 38
// if IsLive ( Denis ) then
19927: LD_EXP 26
19931: PPUSH
19932: CALL_OW 300
19936: IFFALSE 19956
// SaveCharacters ( Denis , prefix & Denis ) ;
19938: LD_EXP 26
19942: PPUSH
19943: LD_VAR 0 3
19947: PUSH
19948: LD_STRING Denis
19950: STR
19951: PPUSH
19952: CALL_OW 38
// if IsLive ( Joan ) then
19956: LD_EXP 27
19960: PPUSH
19961: CALL_OW 300
19965: IFFALSE 19987
// SaveCharacters ( Joan , prefix & Joan ) else
19967: LD_EXP 27
19971: PPUSH
19972: LD_VAR 0 3
19976: PUSH
19977: LD_STRING Joan
19979: STR
19980: PPUSH
19981: CALL_OW 38
19985: GO 19994
// DeleteCharacters ( Joan ) ;
19987: LD_STRING Joan
19989: PPUSH
19990: CALL_OW 40
// if IsLive ( Khatam ) then
19994: LD_EXP 23
19998: PPUSH
19999: CALL_OW 300
20003: IFFALSE 20023
// SaveCharacters ( Khatam , prefix & Khatam ) ;
20005: LD_EXP 23
20009: PPUSH
20010: LD_VAR 0 3
20014: PUSH
20015: LD_STRING Khatam
20017: STR
20018: PPUSH
20019: CALL_OW 38
// if IsLive ( Houten ) then
20023: LD_EXP 25
20027: PPUSH
20028: CALL_OW 300
20032: IFFALSE 20059
// begin ToLua ( enableBioCharacter(BIO_HOUT) ) ;
20034: LD_STRING enableBioCharacter(BIO_HOUT)
20036: PPUSH
20037: CALL_OW 559
// SaveCharacters ( Houten , prefix & Houten ) ;
20041: LD_EXP 25
20045: PPUSH
20046: LD_VAR 0 3
20050: PUSH
20051: LD_STRING Houten
20053: STR
20054: PPUSH
20055: CALL_OW 38
// end ; if IsLive ( Mike ) then
20059: LD_EXP 24
20063: PPUSH
20064: CALL_OW 300
20068: IFFALSE 20088
// SaveCharacters ( Mike , prefix & Mike ) ;
20070: LD_EXP 24
20074: PPUSH
20075: LD_VAR 0 3
20079: PUSH
20080: LD_STRING Mike
20082: STR
20083: PPUSH
20084: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Khatam ] , 08_other_survivors ) ;
20088: LD_INT 22
20090: PUSH
20091: LD_INT 1
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 21
20100: PUSH
20101: LD_INT 1
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 23
20110: PUSH
20111: LD_INT 1
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: LIST
20122: PPUSH
20123: CALL_OW 69
20127: PUSH
20128: LD_EXP 14
20132: PUSH
20133: LD_EXP 15
20137: PUSH
20138: LD_EXP 16
20142: PUSH
20143: LD_EXP 17
20147: PUSH
20148: LD_EXP 18
20152: PUSH
20153: LD_EXP 19
20157: PUSH
20158: LD_EXP 20
20162: PUSH
20163: LD_EXP 21
20167: PUSH
20168: LD_EXP 22
20172: PUSH
20173: LD_EXP 26
20177: PUSH
20178: LD_EXP 27
20182: PUSH
20183: LD_EXP 25
20187: PUSH
20188: LD_EXP 23
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: DIFF
20208: PPUSH
20209: LD_STRING 08_other_survivors
20211: PPUSH
20212: CALL_OW 38
// SaveBase ( gammaBaseArea ) ;
20216: LD_INT 15
20218: PPUSH
20219: CALL 7475 0 1
// SaveVariable ( ( not sikorskiIsKilled ) , 08_SikorskiStatus ) ;
20223: LD_EXP 10
20227: NOT
20228: PPUSH
20229: LD_STRING 08_SikorskiStatus
20231: PPUSH
20232: CALL_OW 39
// ToLua ( enableBioCharacter(BIO_SIK) ) ;
20236: LD_STRING enableBioCharacter(BIO_SIK)
20238: PPUSH
20239: CALL_OW 559
// YouWin ;
20243: CALL_OW 103
// end ; end_of_file
20247: PPOPN 3
20249: END
// export function SikorskiCounter ; begin
20250: LD_INT 0
20252: PPUSH
// repeat wait ( 0 0$1 ) ;
20253: LD_INT 35
20255: PPUSH
20256: CALL_OW 67
// display_strings := [ #Am08-2 , sikorskiArriveCounter ] ;
20260: LD_ADDR_OWVAR 47
20264: PUSH
20265: LD_STRING #Am08-2
20267: PUSH
20268: LD_EXP 3
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: ST_TO_ADDR
// sikorskiArriveCounter := sikorskiArriveCounter - 0 0$01 ;
20277: LD_ADDR_EXP 3
20281: PUSH
20282: LD_EXP 3
20286: PUSH
20287: LD_INT 35
20289: MINUS
20290: ST_TO_ADDR
// until sikorskiArriveCounter = 0 0$00 ;
20291: LD_EXP 3
20295: PUSH
20296: LD_INT 0
20298: EQUAL
20299: IFFALSE 20253
// display_strings := [ ] ;
20301: LD_ADDR_OWVAR 47
20305: PUSH
20306: EMPTY
20307: ST_TO_ADDR
// end ;
20308: LD_VAR 0 1
20312: RET
// export function SikorskiWaitCounter ; begin
20313: LD_INT 0
20315: PPUSH
// repeat wait ( 0 0$1 ) ;
20316: LD_INT 35
20318: PPUSH
20319: CALL_OW 67
// display_strings := [ #Am08-1 , sikorskiWait ] ;
20323: LD_ADDR_OWVAR 47
20327: PUSH
20328: LD_STRING #Am08-1
20330: PUSH
20331: LD_EXP 4
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: ST_TO_ADDR
// sikorskiWait := sikorskiWait - 0 0$01 ;
20340: LD_ADDR_EXP 4
20344: PUSH
20345: LD_EXP 4
20349: PUSH
20350: LD_INT 35
20352: MINUS
20353: ST_TO_ADDR
// until sikorskiWait = 0 0$00 ;
20354: LD_EXP 4
20358: PUSH
20359: LD_INT 0
20361: EQUAL
20362: IFFALSE 20316
// display_strings := [ ] ;
20364: LD_ADDR_OWVAR 47
20368: PUSH
20369: EMPTY
20370: ST_TO_ADDR
// end ; end_of_file
20371: LD_VAR 0 1
20375: RET
// every 0 0$45 + 1 1$00 trigger sikorskiArriveCounter do
20376: LD_EXP 3
20380: IFFALSE 20420
20382: GO 20384
20384: DISABLE
// begin enable ;
20385: ENABLE
// if GetListOfCratesInArea ( amCrates ) < 10 then
20386: LD_INT 14
20388: PPUSH
20389: CALL_OW 435
20393: PUSH
20394: LD_INT 10
20396: LESS
20397: IFFALSE 20420
// CreateCratesArea ( rand ( 1 , 5 ) , amCrates , true ) ;
20399: LD_INT 1
20401: PPUSH
20402: LD_INT 5
20404: PPUSH
20405: CALL_OW 12
20409: PPUSH
20410: LD_INT 14
20412: PPUSH
20413: LD_INT 1
20415: PPUSH
20416: CALL_OW 55
// end ;
20420: END
// every 0 0$55 trigger sikorskiArriveCounter do
20421: LD_EXP 3
20425: IFFALSE 20465
20427: GO 20429
20429: DISABLE
// begin enable ;
20430: ENABLE
// if GetListOfCratesInArea ( ruCrates ) < 10 then
20431: LD_INT 13
20433: PPUSH
20434: CALL_OW 435
20438: PUSH
20439: LD_INT 10
20441: LESS
20442: IFFALSE 20465
// CreateCratesArea ( rand ( 1 , 5 ) , ruCrates , true ) ;
20444: LD_INT 1
20446: PPUSH
20447: LD_INT 5
20449: PPUSH
20450: CALL_OW 12
20454: PPUSH
20455: LD_INT 13
20457: PPUSH
20458: LD_INT 1
20460: PPUSH
20461: CALL_OW 55
// end ; end_of_file
20465: END
// export function SayRandom ( units , menDialog , womenDialog ) ; var tmp ; begin
20466: LD_INT 0
20468: PPUSH
20469: PPUSH
// if not units then
20470: LD_VAR 0 1
20474: NOT
20475: IFFALSE 20479
// exit ;
20477: GO 20604
// result := false ;
20479: LD_ADDR_VAR 0 4
20483: PUSH
20484: LD_INT 0
20486: ST_TO_ADDR
// tmp := UnitFilter ( units , [ f_sex , sex_male ] ) ;
20487: LD_ADDR_VAR 0 5
20491: PUSH
20492: LD_VAR 0 1
20496: PPUSH
20497: LD_INT 26
20499: PUSH
20500: LD_INT 1
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PPUSH
20507: CALL_OW 72
20511: ST_TO_ADDR
// if tmp then
20512: LD_VAR 0 5
20516: IFFALSE 20542
// result := Say ( tmp [ 1 ] , menDialog ) ;
20518: LD_ADDR_VAR 0 4
20522: PUSH
20523: LD_VAR 0 5
20527: PUSH
20528: LD_INT 1
20530: ARRAY
20531: PPUSH
20532: LD_VAR 0 2
20536: PPUSH
20537: CALL_OW 88
20541: ST_TO_ADDR
// if not result then
20542: LD_VAR 0 4
20546: NOT
20547: IFFALSE 20604
// begin tmp := UnitFilter ( units , [ f_sex , sex_female ] ) ;
20549: LD_ADDR_VAR 0 5
20553: PUSH
20554: LD_VAR 0 1
20558: PPUSH
20559: LD_INT 26
20561: PUSH
20562: LD_INT 2
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PPUSH
20569: CALL_OW 72
20573: ST_TO_ADDR
// if tmp then
20574: LD_VAR 0 5
20578: IFFALSE 20604
// result := Say ( tmp [ 1 ] , womenDialog ) ;
20580: LD_ADDR_VAR 0 4
20584: PUSH
20585: LD_VAR 0 5
20589: PUSH
20590: LD_INT 1
20592: ARRAY
20593: PPUSH
20594: LD_VAR 0 3
20598: PPUSH
20599: CALL_OW 88
20603: ST_TO_ADDR
// end ; end ; end_of_file end_of_file
20604: LD_VAR 0 4
20608: RET
// export globalGameSaveCounter ; every 0 0$1 do
20609: GO 20611
20611: DISABLE
// begin enable ;
20612: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20613: LD_STRING updateTimer(
20615: PUSH
20616: LD_OWVAR 1
20620: STR
20621: PUSH
20622: LD_STRING );
20624: STR
20625: PPUSH
20626: CALL_OW 559
// end ;
20630: END
// every 0 0$1 do
20631: GO 20633
20633: DISABLE
// begin globalGameSaveCounter := 0 ;
20634: LD_ADDR_EXP 37
20638: PUSH
20639: LD_INT 0
20641: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20642: LD_STRING setGameSaveCounter(0)
20644: PPUSH
20645: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20649: LD_STRING initStreamRollete();
20651: PPUSH
20652: CALL_OW 559
// InitStreamMode ;
20656: CALL 22008 0 0
// DefineStreamItems ( false ) ;
20660: LD_INT 0
20662: PPUSH
20663: CALL 22472 0 1
// end ;
20667: END
// export function SOS_MapStart ( ) ; begin
20668: LD_INT 0
20670: PPUSH
// if streamModeActive then
20671: LD_EXP 38
20675: IFFALSE 20684
// DefineStreamItems ( true ) ;
20677: LD_INT 1
20679: PPUSH
20680: CALL 22472 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
20684: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
20686: PPUSH
20687: CALL_OW 559
// UpdateLuaVariables ( ) ;
20691: CALL 20708 0 0
// UpdateFactoryWaypoints ( ) ;
20695: CALL 35594 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20699: CALL 35846 0 0
// end ;
20703: LD_VAR 0 1
20707: RET
// function UpdateLuaVariables ( ) ; begin
20708: LD_INT 0
20710: PPUSH
// if globalGameSaveCounter then
20711: LD_EXP 37
20715: IFFALSE 20749
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20717: LD_ADDR_EXP 37
20721: PUSH
20722: LD_EXP 37
20726: PPUSH
20727: CALL 82742 0 1
20731: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20732: LD_STRING setGameSaveCounter(
20734: PUSH
20735: LD_EXP 37
20739: STR
20740: PUSH
20741: LD_STRING )
20743: STR
20744: PPUSH
20745: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20749: LD_STRING setGameDifficulty(
20751: PUSH
20752: LD_OWVAR 67
20756: STR
20757: PUSH
20758: LD_STRING )
20760: STR
20761: PPUSH
20762: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
20766: LD_STRING displayDifficulty(
20768: PUSH
20769: LD_OWVAR 67
20773: STR
20774: PUSH
20775: LD_STRING )
20777: STR
20778: PPUSH
20779: CALL_OW 559
// end ;
20783: LD_VAR 0 1
20787: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20788: LD_INT 0
20790: PPUSH
// if p2 = stream_mode then
20791: LD_VAR 0 2
20795: PUSH
20796: LD_INT 100
20798: EQUAL
20799: IFFALSE 21802
// begin if not StreamModeActive then
20801: LD_EXP 38
20805: NOT
20806: IFFALSE 20816
// StreamModeActive := true ;
20808: LD_ADDR_EXP 38
20812: PUSH
20813: LD_INT 1
20815: ST_TO_ADDR
// if p3 = 0 then
20816: LD_VAR 0 3
20820: PUSH
20821: LD_INT 0
20823: EQUAL
20824: IFFALSE 20830
// InitStreamMode ;
20826: CALL 22008 0 0
// if p3 = 1 then
20830: LD_VAR 0 3
20834: PUSH
20835: LD_INT 1
20837: EQUAL
20838: IFFALSE 20848
// sRocket := true ;
20840: LD_ADDR_EXP 43
20844: PUSH
20845: LD_INT 1
20847: ST_TO_ADDR
// if p3 = 2 then
20848: LD_VAR 0 3
20852: PUSH
20853: LD_INT 2
20855: EQUAL
20856: IFFALSE 20866
// sSpeed := true ;
20858: LD_ADDR_EXP 42
20862: PUSH
20863: LD_INT 1
20865: ST_TO_ADDR
// if p3 = 3 then
20866: LD_VAR 0 3
20870: PUSH
20871: LD_INT 3
20873: EQUAL
20874: IFFALSE 20884
// sEngine := true ;
20876: LD_ADDR_EXP 44
20880: PUSH
20881: LD_INT 1
20883: ST_TO_ADDR
// if p3 = 4 then
20884: LD_VAR 0 3
20888: PUSH
20889: LD_INT 4
20891: EQUAL
20892: IFFALSE 20902
// sSpec := true ;
20894: LD_ADDR_EXP 41
20898: PUSH
20899: LD_INT 1
20901: ST_TO_ADDR
// if p3 = 5 then
20902: LD_VAR 0 3
20906: PUSH
20907: LD_INT 5
20909: EQUAL
20910: IFFALSE 20920
// sLevel := true ;
20912: LD_ADDR_EXP 45
20916: PUSH
20917: LD_INT 1
20919: ST_TO_ADDR
// if p3 = 6 then
20920: LD_VAR 0 3
20924: PUSH
20925: LD_INT 6
20927: EQUAL
20928: IFFALSE 20938
// sArmoury := true ;
20930: LD_ADDR_EXP 46
20934: PUSH
20935: LD_INT 1
20937: ST_TO_ADDR
// if p3 = 7 then
20938: LD_VAR 0 3
20942: PUSH
20943: LD_INT 7
20945: EQUAL
20946: IFFALSE 20956
// sRadar := true ;
20948: LD_ADDR_EXP 47
20952: PUSH
20953: LD_INT 1
20955: ST_TO_ADDR
// if p3 = 8 then
20956: LD_VAR 0 3
20960: PUSH
20961: LD_INT 8
20963: EQUAL
20964: IFFALSE 20974
// sBunker := true ;
20966: LD_ADDR_EXP 48
20970: PUSH
20971: LD_INT 1
20973: ST_TO_ADDR
// if p3 = 9 then
20974: LD_VAR 0 3
20978: PUSH
20979: LD_INT 9
20981: EQUAL
20982: IFFALSE 20992
// sHack := true ;
20984: LD_ADDR_EXP 49
20988: PUSH
20989: LD_INT 1
20991: ST_TO_ADDR
// if p3 = 10 then
20992: LD_VAR 0 3
20996: PUSH
20997: LD_INT 10
20999: EQUAL
21000: IFFALSE 21010
// sFire := true ;
21002: LD_ADDR_EXP 50
21006: PUSH
21007: LD_INT 1
21009: ST_TO_ADDR
// if p3 = 11 then
21010: LD_VAR 0 3
21014: PUSH
21015: LD_INT 11
21017: EQUAL
21018: IFFALSE 21028
// sRefresh := true ;
21020: LD_ADDR_EXP 51
21024: PUSH
21025: LD_INT 1
21027: ST_TO_ADDR
// if p3 = 12 then
21028: LD_VAR 0 3
21032: PUSH
21033: LD_INT 12
21035: EQUAL
21036: IFFALSE 21046
// sExp := true ;
21038: LD_ADDR_EXP 52
21042: PUSH
21043: LD_INT 1
21045: ST_TO_ADDR
// if p3 = 13 then
21046: LD_VAR 0 3
21050: PUSH
21051: LD_INT 13
21053: EQUAL
21054: IFFALSE 21064
// sDepot := true ;
21056: LD_ADDR_EXP 53
21060: PUSH
21061: LD_INT 1
21063: ST_TO_ADDR
// if p3 = 14 then
21064: LD_VAR 0 3
21068: PUSH
21069: LD_INT 14
21071: EQUAL
21072: IFFALSE 21082
// sFlag := true ;
21074: LD_ADDR_EXP 54
21078: PUSH
21079: LD_INT 1
21081: ST_TO_ADDR
// if p3 = 15 then
21082: LD_VAR 0 3
21086: PUSH
21087: LD_INT 15
21089: EQUAL
21090: IFFALSE 21100
// sKamikadze := true ;
21092: LD_ADDR_EXP 62
21096: PUSH
21097: LD_INT 1
21099: ST_TO_ADDR
// if p3 = 16 then
21100: LD_VAR 0 3
21104: PUSH
21105: LD_INT 16
21107: EQUAL
21108: IFFALSE 21118
// sTroll := true ;
21110: LD_ADDR_EXP 63
21114: PUSH
21115: LD_INT 1
21117: ST_TO_ADDR
// if p3 = 17 then
21118: LD_VAR 0 3
21122: PUSH
21123: LD_INT 17
21125: EQUAL
21126: IFFALSE 21136
// sSlow := true ;
21128: LD_ADDR_EXP 64
21132: PUSH
21133: LD_INT 1
21135: ST_TO_ADDR
// if p3 = 18 then
21136: LD_VAR 0 3
21140: PUSH
21141: LD_INT 18
21143: EQUAL
21144: IFFALSE 21154
// sLack := true ;
21146: LD_ADDR_EXP 65
21150: PUSH
21151: LD_INT 1
21153: ST_TO_ADDR
// if p3 = 19 then
21154: LD_VAR 0 3
21158: PUSH
21159: LD_INT 19
21161: EQUAL
21162: IFFALSE 21172
// sTank := true ;
21164: LD_ADDR_EXP 67
21168: PUSH
21169: LD_INT 1
21171: ST_TO_ADDR
// if p3 = 20 then
21172: LD_VAR 0 3
21176: PUSH
21177: LD_INT 20
21179: EQUAL
21180: IFFALSE 21190
// sRemote := true ;
21182: LD_ADDR_EXP 68
21186: PUSH
21187: LD_INT 1
21189: ST_TO_ADDR
// if p3 = 21 then
21190: LD_VAR 0 3
21194: PUSH
21195: LD_INT 21
21197: EQUAL
21198: IFFALSE 21208
// sPowell := true ;
21200: LD_ADDR_EXP 69
21204: PUSH
21205: LD_INT 1
21207: ST_TO_ADDR
// if p3 = 22 then
21208: LD_VAR 0 3
21212: PUSH
21213: LD_INT 22
21215: EQUAL
21216: IFFALSE 21226
// sTeleport := true ;
21218: LD_ADDR_EXP 72
21222: PUSH
21223: LD_INT 1
21225: ST_TO_ADDR
// if p3 = 23 then
21226: LD_VAR 0 3
21230: PUSH
21231: LD_INT 23
21233: EQUAL
21234: IFFALSE 21244
// sOilTower := true ;
21236: LD_ADDR_EXP 74
21240: PUSH
21241: LD_INT 1
21243: ST_TO_ADDR
// if p3 = 24 then
21244: LD_VAR 0 3
21248: PUSH
21249: LD_INT 24
21251: EQUAL
21252: IFFALSE 21262
// sShovel := true ;
21254: LD_ADDR_EXP 75
21258: PUSH
21259: LD_INT 1
21261: ST_TO_ADDR
// if p3 = 25 then
21262: LD_VAR 0 3
21266: PUSH
21267: LD_INT 25
21269: EQUAL
21270: IFFALSE 21280
// sSheik := true ;
21272: LD_ADDR_EXP 76
21276: PUSH
21277: LD_INT 1
21279: ST_TO_ADDR
// if p3 = 26 then
21280: LD_VAR 0 3
21284: PUSH
21285: LD_INT 26
21287: EQUAL
21288: IFFALSE 21298
// sEarthquake := true ;
21290: LD_ADDR_EXP 78
21294: PUSH
21295: LD_INT 1
21297: ST_TO_ADDR
// if p3 = 27 then
21298: LD_VAR 0 3
21302: PUSH
21303: LD_INT 27
21305: EQUAL
21306: IFFALSE 21316
// sAI := true ;
21308: LD_ADDR_EXP 79
21312: PUSH
21313: LD_INT 1
21315: ST_TO_ADDR
// if p3 = 28 then
21316: LD_VAR 0 3
21320: PUSH
21321: LD_INT 28
21323: EQUAL
21324: IFFALSE 21334
// sCargo := true ;
21326: LD_ADDR_EXP 82
21330: PUSH
21331: LD_INT 1
21333: ST_TO_ADDR
// if p3 = 29 then
21334: LD_VAR 0 3
21338: PUSH
21339: LD_INT 29
21341: EQUAL
21342: IFFALSE 21352
// sDLaser := true ;
21344: LD_ADDR_EXP 83
21348: PUSH
21349: LD_INT 1
21351: ST_TO_ADDR
// if p3 = 30 then
21352: LD_VAR 0 3
21356: PUSH
21357: LD_INT 30
21359: EQUAL
21360: IFFALSE 21370
// sExchange := true ;
21362: LD_ADDR_EXP 84
21366: PUSH
21367: LD_INT 1
21369: ST_TO_ADDR
// if p3 = 31 then
21370: LD_VAR 0 3
21374: PUSH
21375: LD_INT 31
21377: EQUAL
21378: IFFALSE 21388
// sFac := true ;
21380: LD_ADDR_EXP 85
21384: PUSH
21385: LD_INT 1
21387: ST_TO_ADDR
// if p3 = 32 then
21388: LD_VAR 0 3
21392: PUSH
21393: LD_INT 32
21395: EQUAL
21396: IFFALSE 21406
// sPower := true ;
21398: LD_ADDR_EXP 86
21402: PUSH
21403: LD_INT 1
21405: ST_TO_ADDR
// if p3 = 33 then
21406: LD_VAR 0 3
21410: PUSH
21411: LD_INT 33
21413: EQUAL
21414: IFFALSE 21424
// sRandom := true ;
21416: LD_ADDR_EXP 87
21420: PUSH
21421: LD_INT 1
21423: ST_TO_ADDR
// if p3 = 34 then
21424: LD_VAR 0 3
21428: PUSH
21429: LD_INT 34
21431: EQUAL
21432: IFFALSE 21442
// sShield := true ;
21434: LD_ADDR_EXP 88
21438: PUSH
21439: LD_INT 1
21441: ST_TO_ADDR
// if p3 = 35 then
21442: LD_VAR 0 3
21446: PUSH
21447: LD_INT 35
21449: EQUAL
21450: IFFALSE 21460
// sTime := true ;
21452: LD_ADDR_EXP 89
21456: PUSH
21457: LD_INT 1
21459: ST_TO_ADDR
// if p3 = 36 then
21460: LD_VAR 0 3
21464: PUSH
21465: LD_INT 36
21467: EQUAL
21468: IFFALSE 21478
// sTools := true ;
21470: LD_ADDR_EXP 90
21474: PUSH
21475: LD_INT 1
21477: ST_TO_ADDR
// if p3 = 101 then
21478: LD_VAR 0 3
21482: PUSH
21483: LD_INT 101
21485: EQUAL
21486: IFFALSE 21496
// sSold := true ;
21488: LD_ADDR_EXP 55
21492: PUSH
21493: LD_INT 1
21495: ST_TO_ADDR
// if p3 = 102 then
21496: LD_VAR 0 3
21500: PUSH
21501: LD_INT 102
21503: EQUAL
21504: IFFALSE 21514
// sDiff := true ;
21506: LD_ADDR_EXP 56
21510: PUSH
21511: LD_INT 1
21513: ST_TO_ADDR
// if p3 = 103 then
21514: LD_VAR 0 3
21518: PUSH
21519: LD_INT 103
21521: EQUAL
21522: IFFALSE 21532
// sFog := true ;
21524: LD_ADDR_EXP 59
21528: PUSH
21529: LD_INT 1
21531: ST_TO_ADDR
// if p3 = 104 then
21532: LD_VAR 0 3
21536: PUSH
21537: LD_INT 104
21539: EQUAL
21540: IFFALSE 21550
// sReset := true ;
21542: LD_ADDR_EXP 60
21546: PUSH
21547: LD_INT 1
21549: ST_TO_ADDR
// if p3 = 105 then
21550: LD_VAR 0 3
21554: PUSH
21555: LD_INT 105
21557: EQUAL
21558: IFFALSE 21568
// sSun := true ;
21560: LD_ADDR_EXP 61
21564: PUSH
21565: LD_INT 1
21567: ST_TO_ADDR
// if p3 = 106 then
21568: LD_VAR 0 3
21572: PUSH
21573: LD_INT 106
21575: EQUAL
21576: IFFALSE 21586
// sTiger := true ;
21578: LD_ADDR_EXP 57
21582: PUSH
21583: LD_INT 1
21585: ST_TO_ADDR
// if p3 = 107 then
21586: LD_VAR 0 3
21590: PUSH
21591: LD_INT 107
21593: EQUAL
21594: IFFALSE 21604
// sBomb := true ;
21596: LD_ADDR_EXP 58
21600: PUSH
21601: LD_INT 1
21603: ST_TO_ADDR
// if p3 = 108 then
21604: LD_VAR 0 3
21608: PUSH
21609: LD_INT 108
21611: EQUAL
21612: IFFALSE 21622
// sWound := true ;
21614: LD_ADDR_EXP 66
21618: PUSH
21619: LD_INT 1
21621: ST_TO_ADDR
// if p3 = 109 then
21622: LD_VAR 0 3
21626: PUSH
21627: LD_INT 109
21629: EQUAL
21630: IFFALSE 21640
// sBetray := true ;
21632: LD_ADDR_EXP 70
21636: PUSH
21637: LD_INT 1
21639: ST_TO_ADDR
// if p3 = 110 then
21640: LD_VAR 0 3
21644: PUSH
21645: LD_INT 110
21647: EQUAL
21648: IFFALSE 21658
// sContamin := true ;
21650: LD_ADDR_EXP 71
21654: PUSH
21655: LD_INT 1
21657: ST_TO_ADDR
// if p3 = 111 then
21658: LD_VAR 0 3
21662: PUSH
21663: LD_INT 111
21665: EQUAL
21666: IFFALSE 21676
// sOil := true ;
21668: LD_ADDR_EXP 73
21672: PUSH
21673: LD_INT 1
21675: ST_TO_ADDR
// if p3 = 112 then
21676: LD_VAR 0 3
21680: PUSH
21681: LD_INT 112
21683: EQUAL
21684: IFFALSE 21694
// sStu := true ;
21686: LD_ADDR_EXP 77
21690: PUSH
21691: LD_INT 1
21693: ST_TO_ADDR
// if p3 = 113 then
21694: LD_VAR 0 3
21698: PUSH
21699: LD_INT 113
21701: EQUAL
21702: IFFALSE 21712
// sBazooka := true ;
21704: LD_ADDR_EXP 80
21708: PUSH
21709: LD_INT 1
21711: ST_TO_ADDR
// if p3 = 114 then
21712: LD_VAR 0 3
21716: PUSH
21717: LD_INT 114
21719: EQUAL
21720: IFFALSE 21730
// sMortar := true ;
21722: LD_ADDR_EXP 81
21726: PUSH
21727: LD_INT 1
21729: ST_TO_ADDR
// if p3 = 115 then
21730: LD_VAR 0 3
21734: PUSH
21735: LD_INT 115
21737: EQUAL
21738: IFFALSE 21748
// sRanger := true ;
21740: LD_ADDR_EXP 91
21744: PUSH
21745: LD_INT 1
21747: ST_TO_ADDR
// if p3 = 116 then
21748: LD_VAR 0 3
21752: PUSH
21753: LD_INT 116
21755: EQUAL
21756: IFFALSE 21766
// sComputer := true ;
21758: LD_ADDR_EXP 92
21762: PUSH
21763: LD_INT 1
21765: ST_TO_ADDR
// if p3 = 117 then
21766: LD_VAR 0 3
21770: PUSH
21771: LD_INT 117
21773: EQUAL
21774: IFFALSE 21784
// s30 := true ;
21776: LD_ADDR_EXP 93
21780: PUSH
21781: LD_INT 1
21783: ST_TO_ADDR
// if p3 = 118 then
21784: LD_VAR 0 3
21788: PUSH
21789: LD_INT 118
21791: EQUAL
21792: IFFALSE 21802
// s60 := true ;
21794: LD_ADDR_EXP 94
21798: PUSH
21799: LD_INT 1
21801: ST_TO_ADDR
// end ; if p2 = hack_mode then
21802: LD_VAR 0 2
21806: PUSH
21807: LD_INT 101
21809: EQUAL
21810: IFFALSE 21938
// begin case p3 of 1 :
21812: LD_VAR 0 3
21816: PUSH
21817: LD_INT 1
21819: DOUBLE
21820: EQUAL
21821: IFTRUE 21825
21823: GO 21832
21825: POP
// hHackUnlimitedResources ; 2 :
21826: CALL 34201 0 0
21830: GO 21938
21832: LD_INT 2
21834: DOUBLE
21835: EQUAL
21836: IFTRUE 21840
21838: GO 21847
21840: POP
// hHackSetLevel10 ; 3 :
21841: CALL 34334 0 0
21845: GO 21938
21847: LD_INT 3
21849: DOUBLE
21850: EQUAL
21851: IFTRUE 21855
21853: GO 21862
21855: POP
// hHackSetLevel10YourUnits ; 4 :
21856: CALL 34419 0 0
21860: GO 21938
21862: LD_INT 4
21864: DOUBLE
21865: EQUAL
21866: IFTRUE 21870
21868: GO 21877
21870: POP
// hHackInvincible ; 5 :
21871: CALL 34867 0 0
21875: GO 21938
21877: LD_INT 5
21879: DOUBLE
21880: EQUAL
21881: IFTRUE 21885
21883: GO 21892
21885: POP
// hHackInvisible ; 6 :
21886: CALL 34978 0 0
21890: GO 21938
21892: LD_INT 6
21894: DOUBLE
21895: EQUAL
21896: IFTRUE 21900
21898: GO 21907
21900: POP
// hHackChangeYourSide ; 7 :
21901: CALL 35035 0 0
21905: GO 21938
21907: LD_INT 7
21909: DOUBLE
21910: EQUAL
21911: IFTRUE 21915
21913: GO 21922
21915: POP
// hHackChangeUnitSide ; 8 :
21916: CALL 35077 0 0
21920: GO 21938
21922: LD_INT 8
21924: DOUBLE
21925: EQUAL
21926: IFTRUE 21930
21928: GO 21937
21930: POP
// hHackFog ; end ;
21931: CALL 35178 0 0
21935: GO 21938
21937: POP
// end ; if p2 = game_save_mode then
21938: LD_VAR 0 2
21942: PUSH
21943: LD_INT 102
21945: EQUAL
21946: IFFALSE 22003
// begin if p3 = 1 then
21948: LD_VAR 0 3
21952: PUSH
21953: LD_INT 1
21955: EQUAL
21956: IFFALSE 21968
// globalGameSaveCounter := p4 ;
21958: LD_ADDR_EXP 37
21962: PUSH
21963: LD_VAR 0 4
21967: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21968: LD_VAR 0 3
21972: PUSH
21973: LD_INT 2
21975: EQUAL
21976: IFFALSE 21984
21978: PUSH
21979: LD_EXP 37
21983: AND
21984: IFFALSE 22003
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21986: LD_STRING setGameSaveCounter(
21988: PUSH
21989: LD_EXP 37
21993: STR
21994: PUSH
21995: LD_STRING )
21997: STR
21998: PPUSH
21999: CALL_OW 559
// end ; end ;
22003: LD_VAR 0 7
22007: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22008: LD_INT 0
22010: PPUSH
// streamModeActive := false ;
22011: LD_ADDR_EXP 38
22015: PUSH
22016: LD_INT 0
22018: ST_TO_ADDR
// normalCounter := 36 ;
22019: LD_ADDR_EXP 39
22023: PUSH
22024: LD_INT 36
22026: ST_TO_ADDR
// hardcoreCounter := 18 ;
22027: LD_ADDR_EXP 40
22031: PUSH
22032: LD_INT 18
22034: ST_TO_ADDR
// sRocket := false ;
22035: LD_ADDR_EXP 43
22039: PUSH
22040: LD_INT 0
22042: ST_TO_ADDR
// sSpeed := false ;
22043: LD_ADDR_EXP 42
22047: PUSH
22048: LD_INT 0
22050: ST_TO_ADDR
// sEngine := false ;
22051: LD_ADDR_EXP 44
22055: PUSH
22056: LD_INT 0
22058: ST_TO_ADDR
// sSpec := false ;
22059: LD_ADDR_EXP 41
22063: PUSH
22064: LD_INT 0
22066: ST_TO_ADDR
// sLevel := false ;
22067: LD_ADDR_EXP 45
22071: PUSH
22072: LD_INT 0
22074: ST_TO_ADDR
// sArmoury := false ;
22075: LD_ADDR_EXP 46
22079: PUSH
22080: LD_INT 0
22082: ST_TO_ADDR
// sRadar := false ;
22083: LD_ADDR_EXP 47
22087: PUSH
22088: LD_INT 0
22090: ST_TO_ADDR
// sBunker := false ;
22091: LD_ADDR_EXP 48
22095: PUSH
22096: LD_INT 0
22098: ST_TO_ADDR
// sHack := false ;
22099: LD_ADDR_EXP 49
22103: PUSH
22104: LD_INT 0
22106: ST_TO_ADDR
// sFire := false ;
22107: LD_ADDR_EXP 50
22111: PUSH
22112: LD_INT 0
22114: ST_TO_ADDR
// sRefresh := false ;
22115: LD_ADDR_EXP 51
22119: PUSH
22120: LD_INT 0
22122: ST_TO_ADDR
// sExp := false ;
22123: LD_ADDR_EXP 52
22127: PUSH
22128: LD_INT 0
22130: ST_TO_ADDR
// sDepot := false ;
22131: LD_ADDR_EXP 53
22135: PUSH
22136: LD_INT 0
22138: ST_TO_ADDR
// sFlag := false ;
22139: LD_ADDR_EXP 54
22143: PUSH
22144: LD_INT 0
22146: ST_TO_ADDR
// sKamikadze := false ;
22147: LD_ADDR_EXP 62
22151: PUSH
22152: LD_INT 0
22154: ST_TO_ADDR
// sTroll := false ;
22155: LD_ADDR_EXP 63
22159: PUSH
22160: LD_INT 0
22162: ST_TO_ADDR
// sSlow := false ;
22163: LD_ADDR_EXP 64
22167: PUSH
22168: LD_INT 0
22170: ST_TO_ADDR
// sLack := false ;
22171: LD_ADDR_EXP 65
22175: PUSH
22176: LD_INT 0
22178: ST_TO_ADDR
// sTank := false ;
22179: LD_ADDR_EXP 67
22183: PUSH
22184: LD_INT 0
22186: ST_TO_ADDR
// sRemote := false ;
22187: LD_ADDR_EXP 68
22191: PUSH
22192: LD_INT 0
22194: ST_TO_ADDR
// sPowell := false ;
22195: LD_ADDR_EXP 69
22199: PUSH
22200: LD_INT 0
22202: ST_TO_ADDR
// sTeleport := false ;
22203: LD_ADDR_EXP 72
22207: PUSH
22208: LD_INT 0
22210: ST_TO_ADDR
// sOilTower := false ;
22211: LD_ADDR_EXP 74
22215: PUSH
22216: LD_INT 0
22218: ST_TO_ADDR
// sShovel := false ;
22219: LD_ADDR_EXP 75
22223: PUSH
22224: LD_INT 0
22226: ST_TO_ADDR
// sSheik := false ;
22227: LD_ADDR_EXP 76
22231: PUSH
22232: LD_INT 0
22234: ST_TO_ADDR
// sEarthquake := false ;
22235: LD_ADDR_EXP 78
22239: PUSH
22240: LD_INT 0
22242: ST_TO_ADDR
// sAI := false ;
22243: LD_ADDR_EXP 79
22247: PUSH
22248: LD_INT 0
22250: ST_TO_ADDR
// sCargo := false ;
22251: LD_ADDR_EXP 82
22255: PUSH
22256: LD_INT 0
22258: ST_TO_ADDR
// sDLaser := false ;
22259: LD_ADDR_EXP 83
22263: PUSH
22264: LD_INT 0
22266: ST_TO_ADDR
// sExchange := false ;
22267: LD_ADDR_EXP 84
22271: PUSH
22272: LD_INT 0
22274: ST_TO_ADDR
// sFac := false ;
22275: LD_ADDR_EXP 85
22279: PUSH
22280: LD_INT 0
22282: ST_TO_ADDR
// sPower := false ;
22283: LD_ADDR_EXP 86
22287: PUSH
22288: LD_INT 0
22290: ST_TO_ADDR
// sRandom := false ;
22291: LD_ADDR_EXP 87
22295: PUSH
22296: LD_INT 0
22298: ST_TO_ADDR
// sShield := false ;
22299: LD_ADDR_EXP 88
22303: PUSH
22304: LD_INT 0
22306: ST_TO_ADDR
// sTime := false ;
22307: LD_ADDR_EXP 89
22311: PUSH
22312: LD_INT 0
22314: ST_TO_ADDR
// sTools := false ;
22315: LD_ADDR_EXP 90
22319: PUSH
22320: LD_INT 0
22322: ST_TO_ADDR
// sSold := false ;
22323: LD_ADDR_EXP 55
22327: PUSH
22328: LD_INT 0
22330: ST_TO_ADDR
// sDiff := false ;
22331: LD_ADDR_EXP 56
22335: PUSH
22336: LD_INT 0
22338: ST_TO_ADDR
// sFog := false ;
22339: LD_ADDR_EXP 59
22343: PUSH
22344: LD_INT 0
22346: ST_TO_ADDR
// sReset := false ;
22347: LD_ADDR_EXP 60
22351: PUSH
22352: LD_INT 0
22354: ST_TO_ADDR
// sSun := false ;
22355: LD_ADDR_EXP 61
22359: PUSH
22360: LD_INT 0
22362: ST_TO_ADDR
// sTiger := false ;
22363: LD_ADDR_EXP 57
22367: PUSH
22368: LD_INT 0
22370: ST_TO_ADDR
// sBomb := false ;
22371: LD_ADDR_EXP 58
22375: PUSH
22376: LD_INT 0
22378: ST_TO_ADDR
// sWound := false ;
22379: LD_ADDR_EXP 66
22383: PUSH
22384: LD_INT 0
22386: ST_TO_ADDR
// sBetray := false ;
22387: LD_ADDR_EXP 70
22391: PUSH
22392: LD_INT 0
22394: ST_TO_ADDR
// sContamin := false ;
22395: LD_ADDR_EXP 71
22399: PUSH
22400: LD_INT 0
22402: ST_TO_ADDR
// sOil := false ;
22403: LD_ADDR_EXP 73
22407: PUSH
22408: LD_INT 0
22410: ST_TO_ADDR
// sStu := false ;
22411: LD_ADDR_EXP 77
22415: PUSH
22416: LD_INT 0
22418: ST_TO_ADDR
// sBazooka := false ;
22419: LD_ADDR_EXP 80
22423: PUSH
22424: LD_INT 0
22426: ST_TO_ADDR
// sMortar := false ;
22427: LD_ADDR_EXP 81
22431: PUSH
22432: LD_INT 0
22434: ST_TO_ADDR
// sRanger := false ;
22435: LD_ADDR_EXP 91
22439: PUSH
22440: LD_INT 0
22442: ST_TO_ADDR
// sComputer := false ;
22443: LD_ADDR_EXP 92
22447: PUSH
22448: LD_INT 0
22450: ST_TO_ADDR
// s30 := false ;
22451: LD_ADDR_EXP 93
22455: PUSH
22456: LD_INT 0
22458: ST_TO_ADDR
// s60 := false ;
22459: LD_ADDR_EXP 94
22463: PUSH
22464: LD_INT 0
22466: ST_TO_ADDR
// end ;
22467: LD_VAR 0 1
22471: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22472: LD_INT 0
22474: PPUSH
22475: PPUSH
22476: PPUSH
22477: PPUSH
22478: PPUSH
22479: PPUSH
22480: PPUSH
// result := [ ] ;
22481: LD_ADDR_VAR 0 2
22485: PUSH
22486: EMPTY
22487: ST_TO_ADDR
// if campaign_id = 1 then
22488: LD_OWVAR 69
22492: PUSH
22493: LD_INT 1
22495: EQUAL
22496: IFFALSE 25662
// begin case mission_number of 1 :
22498: LD_OWVAR 70
22502: PUSH
22503: LD_INT 1
22505: DOUBLE
22506: EQUAL
22507: IFTRUE 22511
22509: GO 22587
22511: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22512: LD_ADDR_VAR 0 2
22516: PUSH
22517: LD_INT 2
22519: PUSH
22520: LD_INT 4
22522: PUSH
22523: LD_INT 11
22525: PUSH
22526: LD_INT 12
22528: PUSH
22529: LD_INT 15
22531: PUSH
22532: LD_INT 16
22534: PUSH
22535: LD_INT 22
22537: PUSH
22538: LD_INT 23
22540: PUSH
22541: LD_INT 26
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 101
22557: PUSH
22558: LD_INT 102
22560: PUSH
22561: LD_INT 106
22563: PUSH
22564: LD_INT 116
22566: PUSH
22567: LD_INT 117
22569: PUSH
22570: LD_INT 118
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: ST_TO_ADDR
22585: GO 25660
22587: LD_INT 2
22589: DOUBLE
22590: EQUAL
22591: IFTRUE 22595
22593: GO 22679
22595: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22596: LD_ADDR_VAR 0 2
22600: PUSH
22601: LD_INT 2
22603: PUSH
22604: LD_INT 4
22606: PUSH
22607: LD_INT 11
22609: PUSH
22610: LD_INT 12
22612: PUSH
22613: LD_INT 15
22615: PUSH
22616: LD_INT 16
22618: PUSH
22619: LD_INT 22
22621: PUSH
22622: LD_INT 23
22624: PUSH
22625: LD_INT 26
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 101
22641: PUSH
22642: LD_INT 102
22644: PUSH
22645: LD_INT 105
22647: PUSH
22648: LD_INT 106
22650: PUSH
22651: LD_INT 108
22653: PUSH
22654: LD_INT 116
22656: PUSH
22657: LD_INT 117
22659: PUSH
22660: LD_INT 118
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: ST_TO_ADDR
22677: GO 25660
22679: LD_INT 3
22681: DOUBLE
22682: EQUAL
22683: IFTRUE 22687
22685: GO 22775
22687: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22688: LD_ADDR_VAR 0 2
22692: PUSH
22693: LD_INT 2
22695: PUSH
22696: LD_INT 4
22698: PUSH
22699: LD_INT 5
22701: PUSH
22702: LD_INT 11
22704: PUSH
22705: LD_INT 12
22707: PUSH
22708: LD_INT 15
22710: PUSH
22711: LD_INT 16
22713: PUSH
22714: LD_INT 22
22716: PUSH
22717: LD_INT 26
22719: PUSH
22720: LD_INT 36
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 101
22737: PUSH
22738: LD_INT 102
22740: PUSH
22741: LD_INT 105
22743: PUSH
22744: LD_INT 106
22746: PUSH
22747: LD_INT 108
22749: PUSH
22750: LD_INT 116
22752: PUSH
22753: LD_INT 117
22755: PUSH
22756: LD_INT 118
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: ST_TO_ADDR
22773: GO 25660
22775: LD_INT 4
22777: DOUBLE
22778: EQUAL
22779: IFTRUE 22783
22781: GO 22879
22783: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22784: LD_ADDR_VAR 0 2
22788: PUSH
22789: LD_INT 2
22791: PUSH
22792: LD_INT 4
22794: PUSH
22795: LD_INT 5
22797: PUSH
22798: LD_INT 8
22800: PUSH
22801: LD_INT 11
22803: PUSH
22804: LD_INT 12
22806: PUSH
22807: LD_INT 15
22809: PUSH
22810: LD_INT 16
22812: PUSH
22813: LD_INT 22
22815: PUSH
22816: LD_INT 23
22818: PUSH
22819: LD_INT 26
22821: PUSH
22822: LD_INT 36
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 101
22841: PUSH
22842: LD_INT 102
22844: PUSH
22845: LD_INT 105
22847: PUSH
22848: LD_INT 106
22850: PUSH
22851: LD_INT 108
22853: PUSH
22854: LD_INT 116
22856: PUSH
22857: LD_INT 117
22859: PUSH
22860: LD_INT 118
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: ST_TO_ADDR
22877: GO 25660
22879: LD_INT 5
22881: DOUBLE
22882: EQUAL
22883: IFTRUE 22887
22885: GO 22999
22887: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22888: LD_ADDR_VAR 0 2
22892: PUSH
22893: LD_INT 2
22895: PUSH
22896: LD_INT 4
22898: PUSH
22899: LD_INT 5
22901: PUSH
22902: LD_INT 6
22904: PUSH
22905: LD_INT 8
22907: PUSH
22908: LD_INT 11
22910: PUSH
22911: LD_INT 12
22913: PUSH
22914: LD_INT 15
22916: PUSH
22917: LD_INT 16
22919: PUSH
22920: LD_INT 22
22922: PUSH
22923: LD_INT 23
22925: PUSH
22926: LD_INT 25
22928: PUSH
22929: LD_INT 26
22931: PUSH
22932: LD_INT 36
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 101
22953: PUSH
22954: LD_INT 102
22956: PUSH
22957: LD_INT 105
22959: PUSH
22960: LD_INT 106
22962: PUSH
22963: LD_INT 108
22965: PUSH
22966: LD_INT 109
22968: PUSH
22969: LD_INT 112
22971: PUSH
22972: LD_INT 116
22974: PUSH
22975: LD_INT 117
22977: PUSH
22978: LD_INT 118
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: ST_TO_ADDR
22997: GO 25660
22999: LD_INT 6
23001: DOUBLE
23002: EQUAL
23003: IFTRUE 23007
23005: GO 23139
23007: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23008: LD_ADDR_VAR 0 2
23012: PUSH
23013: LD_INT 2
23015: PUSH
23016: LD_INT 4
23018: PUSH
23019: LD_INT 5
23021: PUSH
23022: LD_INT 6
23024: PUSH
23025: LD_INT 8
23027: PUSH
23028: LD_INT 11
23030: PUSH
23031: LD_INT 12
23033: PUSH
23034: LD_INT 15
23036: PUSH
23037: LD_INT 16
23039: PUSH
23040: LD_INT 20
23042: PUSH
23043: LD_INT 21
23045: PUSH
23046: LD_INT 22
23048: PUSH
23049: LD_INT 23
23051: PUSH
23052: LD_INT 25
23054: PUSH
23055: LD_INT 26
23057: PUSH
23058: LD_INT 30
23060: PUSH
23061: LD_INT 31
23063: PUSH
23064: LD_INT 32
23066: PUSH
23067: LD_INT 36
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 101
23093: PUSH
23094: LD_INT 102
23096: PUSH
23097: LD_INT 105
23099: PUSH
23100: LD_INT 106
23102: PUSH
23103: LD_INT 108
23105: PUSH
23106: LD_INT 109
23108: PUSH
23109: LD_INT 112
23111: PUSH
23112: LD_INT 116
23114: PUSH
23115: LD_INT 117
23117: PUSH
23118: LD_INT 118
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: ST_TO_ADDR
23137: GO 25660
23139: LD_INT 7
23141: DOUBLE
23142: EQUAL
23143: IFTRUE 23147
23145: GO 23259
23147: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23148: LD_ADDR_VAR 0 2
23152: PUSH
23153: LD_INT 2
23155: PUSH
23156: LD_INT 4
23158: PUSH
23159: LD_INT 5
23161: PUSH
23162: LD_INT 7
23164: PUSH
23165: LD_INT 11
23167: PUSH
23168: LD_INT 12
23170: PUSH
23171: LD_INT 15
23173: PUSH
23174: LD_INT 16
23176: PUSH
23177: LD_INT 20
23179: PUSH
23180: LD_INT 21
23182: PUSH
23183: LD_INT 22
23185: PUSH
23186: LD_INT 23
23188: PUSH
23189: LD_INT 25
23191: PUSH
23192: LD_INT 26
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 101
23213: PUSH
23214: LD_INT 102
23216: PUSH
23217: LD_INT 103
23219: PUSH
23220: LD_INT 105
23222: PUSH
23223: LD_INT 106
23225: PUSH
23226: LD_INT 108
23228: PUSH
23229: LD_INT 112
23231: PUSH
23232: LD_INT 116
23234: PUSH
23235: LD_INT 117
23237: PUSH
23238: LD_INT 118
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: ST_TO_ADDR
23257: GO 25660
23259: LD_INT 8
23261: DOUBLE
23262: EQUAL
23263: IFTRUE 23267
23265: GO 23407
23267: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23268: LD_ADDR_VAR 0 2
23272: PUSH
23273: LD_INT 2
23275: PUSH
23276: LD_INT 4
23278: PUSH
23279: LD_INT 5
23281: PUSH
23282: LD_INT 6
23284: PUSH
23285: LD_INT 7
23287: PUSH
23288: LD_INT 8
23290: PUSH
23291: LD_INT 11
23293: PUSH
23294: LD_INT 12
23296: PUSH
23297: LD_INT 15
23299: PUSH
23300: LD_INT 16
23302: PUSH
23303: LD_INT 20
23305: PUSH
23306: LD_INT 21
23308: PUSH
23309: LD_INT 22
23311: PUSH
23312: LD_INT 23
23314: PUSH
23315: LD_INT 25
23317: PUSH
23318: LD_INT 26
23320: PUSH
23321: LD_INT 30
23323: PUSH
23324: LD_INT 31
23326: PUSH
23327: LD_INT 32
23329: PUSH
23330: LD_INT 36
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 101
23357: PUSH
23358: LD_INT 102
23360: PUSH
23361: LD_INT 103
23363: PUSH
23364: LD_INT 105
23366: PUSH
23367: LD_INT 106
23369: PUSH
23370: LD_INT 108
23372: PUSH
23373: LD_INT 109
23375: PUSH
23376: LD_INT 112
23378: PUSH
23379: LD_INT 116
23381: PUSH
23382: LD_INT 117
23384: PUSH
23385: LD_INT 118
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: ST_TO_ADDR
23405: GO 25660
23407: LD_INT 9
23409: DOUBLE
23410: EQUAL
23411: IFTRUE 23415
23413: GO 23563
23415: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23416: LD_ADDR_VAR 0 2
23420: PUSH
23421: LD_INT 2
23423: PUSH
23424: LD_INT 4
23426: PUSH
23427: LD_INT 5
23429: PUSH
23430: LD_INT 6
23432: PUSH
23433: LD_INT 7
23435: PUSH
23436: LD_INT 8
23438: PUSH
23439: LD_INT 11
23441: PUSH
23442: LD_INT 12
23444: PUSH
23445: LD_INT 15
23447: PUSH
23448: LD_INT 16
23450: PUSH
23451: LD_INT 20
23453: PUSH
23454: LD_INT 21
23456: PUSH
23457: LD_INT 22
23459: PUSH
23460: LD_INT 23
23462: PUSH
23463: LD_INT 25
23465: PUSH
23466: LD_INT 26
23468: PUSH
23469: LD_INT 28
23471: PUSH
23472: LD_INT 30
23474: PUSH
23475: LD_INT 31
23477: PUSH
23478: LD_INT 32
23480: PUSH
23481: LD_INT 36
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 101
23509: PUSH
23510: LD_INT 102
23512: PUSH
23513: LD_INT 103
23515: PUSH
23516: LD_INT 105
23518: PUSH
23519: LD_INT 106
23521: PUSH
23522: LD_INT 108
23524: PUSH
23525: LD_INT 109
23527: PUSH
23528: LD_INT 112
23530: PUSH
23531: LD_INT 114
23533: PUSH
23534: LD_INT 116
23536: PUSH
23537: LD_INT 117
23539: PUSH
23540: LD_INT 118
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: ST_TO_ADDR
23561: GO 25660
23563: LD_INT 10
23565: DOUBLE
23566: EQUAL
23567: IFTRUE 23571
23569: GO 23767
23571: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23572: LD_ADDR_VAR 0 2
23576: PUSH
23577: LD_INT 2
23579: PUSH
23580: LD_INT 4
23582: PUSH
23583: LD_INT 5
23585: PUSH
23586: LD_INT 6
23588: PUSH
23589: LD_INT 7
23591: PUSH
23592: LD_INT 8
23594: PUSH
23595: LD_INT 9
23597: PUSH
23598: LD_INT 10
23600: PUSH
23601: LD_INT 11
23603: PUSH
23604: LD_INT 12
23606: PUSH
23607: LD_INT 13
23609: PUSH
23610: LD_INT 14
23612: PUSH
23613: LD_INT 15
23615: PUSH
23616: LD_INT 16
23618: PUSH
23619: LD_INT 17
23621: PUSH
23622: LD_INT 18
23624: PUSH
23625: LD_INT 19
23627: PUSH
23628: LD_INT 20
23630: PUSH
23631: LD_INT 21
23633: PUSH
23634: LD_INT 22
23636: PUSH
23637: LD_INT 23
23639: PUSH
23640: LD_INT 24
23642: PUSH
23643: LD_INT 25
23645: PUSH
23646: LD_INT 26
23648: PUSH
23649: LD_INT 28
23651: PUSH
23652: LD_INT 30
23654: PUSH
23655: LD_INT 31
23657: PUSH
23658: LD_INT 32
23660: PUSH
23661: LD_INT 36
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 101
23697: PUSH
23698: LD_INT 102
23700: PUSH
23701: LD_INT 103
23703: PUSH
23704: LD_INT 104
23706: PUSH
23707: LD_INT 105
23709: PUSH
23710: LD_INT 106
23712: PUSH
23713: LD_INT 107
23715: PUSH
23716: LD_INT 108
23718: PUSH
23719: LD_INT 109
23721: PUSH
23722: LD_INT 110
23724: PUSH
23725: LD_INT 111
23727: PUSH
23728: LD_INT 112
23730: PUSH
23731: LD_INT 114
23733: PUSH
23734: LD_INT 116
23736: PUSH
23737: LD_INT 117
23739: PUSH
23740: LD_INT 118
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: ST_TO_ADDR
23765: GO 25660
23767: LD_INT 11
23769: DOUBLE
23770: EQUAL
23771: IFTRUE 23775
23773: GO 23979
23775: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23776: LD_ADDR_VAR 0 2
23780: PUSH
23781: LD_INT 2
23783: PUSH
23784: LD_INT 3
23786: PUSH
23787: LD_INT 4
23789: PUSH
23790: LD_INT 5
23792: PUSH
23793: LD_INT 6
23795: PUSH
23796: LD_INT 7
23798: PUSH
23799: LD_INT 8
23801: PUSH
23802: LD_INT 9
23804: PUSH
23805: LD_INT 10
23807: PUSH
23808: LD_INT 11
23810: PUSH
23811: LD_INT 12
23813: PUSH
23814: LD_INT 13
23816: PUSH
23817: LD_INT 14
23819: PUSH
23820: LD_INT 15
23822: PUSH
23823: LD_INT 16
23825: PUSH
23826: LD_INT 17
23828: PUSH
23829: LD_INT 18
23831: PUSH
23832: LD_INT 19
23834: PUSH
23835: LD_INT 20
23837: PUSH
23838: LD_INT 21
23840: PUSH
23841: LD_INT 22
23843: PUSH
23844: LD_INT 23
23846: PUSH
23847: LD_INT 24
23849: PUSH
23850: LD_INT 25
23852: PUSH
23853: LD_INT 26
23855: PUSH
23856: LD_INT 28
23858: PUSH
23859: LD_INT 30
23861: PUSH
23862: LD_INT 31
23864: PUSH
23865: LD_INT 32
23867: PUSH
23868: LD_INT 34
23870: PUSH
23871: LD_INT 36
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 101
23909: PUSH
23910: LD_INT 102
23912: PUSH
23913: LD_INT 103
23915: PUSH
23916: LD_INT 104
23918: PUSH
23919: LD_INT 105
23921: PUSH
23922: LD_INT 106
23924: PUSH
23925: LD_INT 107
23927: PUSH
23928: LD_INT 108
23930: PUSH
23931: LD_INT 109
23933: PUSH
23934: LD_INT 110
23936: PUSH
23937: LD_INT 111
23939: PUSH
23940: LD_INT 112
23942: PUSH
23943: LD_INT 114
23945: PUSH
23946: LD_INT 116
23948: PUSH
23949: LD_INT 117
23951: PUSH
23952: LD_INT 118
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: ST_TO_ADDR
23977: GO 25660
23979: LD_INT 12
23981: DOUBLE
23982: EQUAL
23983: IFTRUE 23987
23985: GO 24207
23987: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23988: LD_ADDR_VAR 0 2
23992: PUSH
23993: LD_INT 1
23995: PUSH
23996: LD_INT 2
23998: PUSH
23999: LD_INT 3
24001: PUSH
24002: LD_INT 4
24004: PUSH
24005: LD_INT 5
24007: PUSH
24008: LD_INT 6
24010: PUSH
24011: LD_INT 7
24013: PUSH
24014: LD_INT 8
24016: PUSH
24017: LD_INT 9
24019: PUSH
24020: LD_INT 10
24022: PUSH
24023: LD_INT 11
24025: PUSH
24026: LD_INT 12
24028: PUSH
24029: LD_INT 13
24031: PUSH
24032: LD_INT 14
24034: PUSH
24035: LD_INT 15
24037: PUSH
24038: LD_INT 16
24040: PUSH
24041: LD_INT 17
24043: PUSH
24044: LD_INT 18
24046: PUSH
24047: LD_INT 19
24049: PUSH
24050: LD_INT 20
24052: PUSH
24053: LD_INT 21
24055: PUSH
24056: LD_INT 22
24058: PUSH
24059: LD_INT 23
24061: PUSH
24062: LD_INT 24
24064: PUSH
24065: LD_INT 25
24067: PUSH
24068: LD_INT 26
24070: PUSH
24071: LD_INT 27
24073: PUSH
24074: LD_INT 28
24076: PUSH
24077: LD_INT 30
24079: PUSH
24080: LD_INT 31
24082: PUSH
24083: LD_INT 32
24085: PUSH
24086: LD_INT 33
24088: PUSH
24089: LD_INT 34
24091: PUSH
24092: LD_INT 36
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 101
24133: PUSH
24134: LD_INT 102
24136: PUSH
24137: LD_INT 103
24139: PUSH
24140: LD_INT 104
24142: PUSH
24143: LD_INT 105
24145: PUSH
24146: LD_INT 106
24148: PUSH
24149: LD_INT 107
24151: PUSH
24152: LD_INT 108
24154: PUSH
24155: LD_INT 109
24157: PUSH
24158: LD_INT 110
24160: PUSH
24161: LD_INT 111
24163: PUSH
24164: LD_INT 112
24166: PUSH
24167: LD_INT 113
24169: PUSH
24170: LD_INT 114
24172: PUSH
24173: LD_INT 116
24175: PUSH
24176: LD_INT 117
24178: PUSH
24179: LD_INT 118
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: ST_TO_ADDR
24205: GO 25660
24207: LD_INT 13
24209: DOUBLE
24210: EQUAL
24211: IFTRUE 24215
24213: GO 24423
24215: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24216: LD_ADDR_VAR 0 2
24220: PUSH
24221: LD_INT 1
24223: PUSH
24224: LD_INT 2
24226: PUSH
24227: LD_INT 3
24229: PUSH
24230: LD_INT 4
24232: PUSH
24233: LD_INT 5
24235: PUSH
24236: LD_INT 8
24238: PUSH
24239: LD_INT 9
24241: PUSH
24242: LD_INT 10
24244: PUSH
24245: LD_INT 11
24247: PUSH
24248: LD_INT 12
24250: PUSH
24251: LD_INT 14
24253: PUSH
24254: LD_INT 15
24256: PUSH
24257: LD_INT 16
24259: PUSH
24260: LD_INT 17
24262: PUSH
24263: LD_INT 18
24265: PUSH
24266: LD_INT 19
24268: PUSH
24269: LD_INT 20
24271: PUSH
24272: LD_INT 21
24274: PUSH
24275: LD_INT 22
24277: PUSH
24278: LD_INT 23
24280: PUSH
24281: LD_INT 24
24283: PUSH
24284: LD_INT 25
24286: PUSH
24287: LD_INT 26
24289: PUSH
24290: LD_INT 27
24292: PUSH
24293: LD_INT 28
24295: PUSH
24296: LD_INT 30
24298: PUSH
24299: LD_INT 31
24301: PUSH
24302: LD_INT 32
24304: PUSH
24305: LD_INT 33
24307: PUSH
24308: LD_INT 34
24310: PUSH
24311: LD_INT 36
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 101
24349: PUSH
24350: LD_INT 102
24352: PUSH
24353: LD_INT 103
24355: PUSH
24356: LD_INT 104
24358: PUSH
24359: LD_INT 105
24361: PUSH
24362: LD_INT 106
24364: PUSH
24365: LD_INT 107
24367: PUSH
24368: LD_INT 108
24370: PUSH
24371: LD_INT 109
24373: PUSH
24374: LD_INT 110
24376: PUSH
24377: LD_INT 111
24379: PUSH
24380: LD_INT 112
24382: PUSH
24383: LD_INT 113
24385: PUSH
24386: LD_INT 114
24388: PUSH
24389: LD_INT 116
24391: PUSH
24392: LD_INT 117
24394: PUSH
24395: LD_INT 118
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: ST_TO_ADDR
24421: GO 25660
24423: LD_INT 14
24425: DOUBLE
24426: EQUAL
24427: IFTRUE 24431
24429: GO 24655
24431: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24432: LD_ADDR_VAR 0 2
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: LD_INT 2
24442: PUSH
24443: LD_INT 3
24445: PUSH
24446: LD_INT 4
24448: PUSH
24449: LD_INT 5
24451: PUSH
24452: LD_INT 6
24454: PUSH
24455: LD_INT 7
24457: PUSH
24458: LD_INT 8
24460: PUSH
24461: LD_INT 9
24463: PUSH
24464: LD_INT 10
24466: PUSH
24467: LD_INT 11
24469: PUSH
24470: LD_INT 12
24472: PUSH
24473: LD_INT 13
24475: PUSH
24476: LD_INT 14
24478: PUSH
24479: LD_INT 15
24481: PUSH
24482: LD_INT 16
24484: PUSH
24485: LD_INT 17
24487: PUSH
24488: LD_INT 18
24490: PUSH
24491: LD_INT 19
24493: PUSH
24494: LD_INT 20
24496: PUSH
24497: LD_INT 21
24499: PUSH
24500: LD_INT 22
24502: PUSH
24503: LD_INT 23
24505: PUSH
24506: LD_INT 24
24508: PUSH
24509: LD_INT 25
24511: PUSH
24512: LD_INT 26
24514: PUSH
24515: LD_INT 27
24517: PUSH
24518: LD_INT 28
24520: PUSH
24521: LD_INT 29
24523: PUSH
24524: LD_INT 30
24526: PUSH
24527: LD_INT 31
24529: PUSH
24530: LD_INT 32
24532: PUSH
24533: LD_INT 33
24535: PUSH
24536: LD_INT 34
24538: PUSH
24539: LD_INT 36
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 101
24581: PUSH
24582: LD_INT 102
24584: PUSH
24585: LD_INT 103
24587: PUSH
24588: LD_INT 104
24590: PUSH
24591: LD_INT 105
24593: PUSH
24594: LD_INT 106
24596: PUSH
24597: LD_INT 107
24599: PUSH
24600: LD_INT 108
24602: PUSH
24603: LD_INT 109
24605: PUSH
24606: LD_INT 110
24608: PUSH
24609: LD_INT 111
24611: PUSH
24612: LD_INT 112
24614: PUSH
24615: LD_INT 113
24617: PUSH
24618: LD_INT 114
24620: PUSH
24621: LD_INT 116
24623: PUSH
24624: LD_INT 117
24626: PUSH
24627: LD_INT 118
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: ST_TO_ADDR
24653: GO 25660
24655: LD_INT 15
24657: DOUBLE
24658: EQUAL
24659: IFTRUE 24663
24661: GO 24887
24663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24664: LD_ADDR_VAR 0 2
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: LD_INT 2
24674: PUSH
24675: LD_INT 3
24677: PUSH
24678: LD_INT 4
24680: PUSH
24681: LD_INT 5
24683: PUSH
24684: LD_INT 6
24686: PUSH
24687: LD_INT 7
24689: PUSH
24690: LD_INT 8
24692: PUSH
24693: LD_INT 9
24695: PUSH
24696: LD_INT 10
24698: PUSH
24699: LD_INT 11
24701: PUSH
24702: LD_INT 12
24704: PUSH
24705: LD_INT 13
24707: PUSH
24708: LD_INT 14
24710: PUSH
24711: LD_INT 15
24713: PUSH
24714: LD_INT 16
24716: PUSH
24717: LD_INT 17
24719: PUSH
24720: LD_INT 18
24722: PUSH
24723: LD_INT 19
24725: PUSH
24726: LD_INT 20
24728: PUSH
24729: LD_INT 21
24731: PUSH
24732: LD_INT 22
24734: PUSH
24735: LD_INT 23
24737: PUSH
24738: LD_INT 24
24740: PUSH
24741: LD_INT 25
24743: PUSH
24744: LD_INT 26
24746: PUSH
24747: LD_INT 27
24749: PUSH
24750: LD_INT 28
24752: PUSH
24753: LD_INT 29
24755: PUSH
24756: LD_INT 30
24758: PUSH
24759: LD_INT 31
24761: PUSH
24762: LD_INT 32
24764: PUSH
24765: LD_INT 33
24767: PUSH
24768: LD_INT 34
24770: PUSH
24771: LD_INT 36
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 101
24813: PUSH
24814: LD_INT 102
24816: PUSH
24817: LD_INT 103
24819: PUSH
24820: LD_INT 104
24822: PUSH
24823: LD_INT 105
24825: PUSH
24826: LD_INT 106
24828: PUSH
24829: LD_INT 107
24831: PUSH
24832: LD_INT 108
24834: PUSH
24835: LD_INT 109
24837: PUSH
24838: LD_INT 110
24840: PUSH
24841: LD_INT 111
24843: PUSH
24844: LD_INT 112
24846: PUSH
24847: LD_INT 113
24849: PUSH
24850: LD_INT 114
24852: PUSH
24853: LD_INT 116
24855: PUSH
24856: LD_INT 117
24858: PUSH
24859: LD_INT 118
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: ST_TO_ADDR
24885: GO 25660
24887: LD_INT 16
24889: DOUBLE
24890: EQUAL
24891: IFTRUE 24895
24893: GO 25031
24895: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24896: LD_ADDR_VAR 0 2
24900: PUSH
24901: LD_INT 2
24903: PUSH
24904: LD_INT 4
24906: PUSH
24907: LD_INT 5
24909: PUSH
24910: LD_INT 7
24912: PUSH
24913: LD_INT 11
24915: PUSH
24916: LD_INT 12
24918: PUSH
24919: LD_INT 15
24921: PUSH
24922: LD_INT 16
24924: PUSH
24925: LD_INT 20
24927: PUSH
24928: LD_INT 21
24930: PUSH
24931: LD_INT 22
24933: PUSH
24934: LD_INT 23
24936: PUSH
24937: LD_INT 25
24939: PUSH
24940: LD_INT 26
24942: PUSH
24943: LD_INT 30
24945: PUSH
24946: LD_INT 31
24948: PUSH
24949: LD_INT 32
24951: PUSH
24952: LD_INT 33
24954: PUSH
24955: LD_INT 34
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 101
24981: PUSH
24982: LD_INT 102
24984: PUSH
24985: LD_INT 103
24987: PUSH
24988: LD_INT 106
24990: PUSH
24991: LD_INT 108
24993: PUSH
24994: LD_INT 112
24996: PUSH
24997: LD_INT 113
24999: PUSH
25000: LD_INT 114
25002: PUSH
25003: LD_INT 116
25005: PUSH
25006: LD_INT 117
25008: PUSH
25009: LD_INT 118
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: ST_TO_ADDR
25029: GO 25660
25031: LD_INT 17
25033: DOUBLE
25034: EQUAL
25035: IFTRUE 25039
25037: GO 25263
25039: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25040: LD_ADDR_VAR 0 2
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: LD_INT 2
25050: PUSH
25051: LD_INT 3
25053: PUSH
25054: LD_INT 4
25056: PUSH
25057: LD_INT 5
25059: PUSH
25060: LD_INT 6
25062: PUSH
25063: LD_INT 7
25065: PUSH
25066: LD_INT 8
25068: PUSH
25069: LD_INT 9
25071: PUSH
25072: LD_INT 10
25074: PUSH
25075: LD_INT 11
25077: PUSH
25078: LD_INT 12
25080: PUSH
25081: LD_INT 13
25083: PUSH
25084: LD_INT 14
25086: PUSH
25087: LD_INT 15
25089: PUSH
25090: LD_INT 16
25092: PUSH
25093: LD_INT 17
25095: PUSH
25096: LD_INT 18
25098: PUSH
25099: LD_INT 19
25101: PUSH
25102: LD_INT 20
25104: PUSH
25105: LD_INT 21
25107: PUSH
25108: LD_INT 22
25110: PUSH
25111: LD_INT 23
25113: PUSH
25114: LD_INT 24
25116: PUSH
25117: LD_INT 25
25119: PUSH
25120: LD_INT 26
25122: PUSH
25123: LD_INT 27
25125: PUSH
25126: LD_INT 28
25128: PUSH
25129: LD_INT 29
25131: PUSH
25132: LD_INT 30
25134: PUSH
25135: LD_INT 31
25137: PUSH
25138: LD_INT 32
25140: PUSH
25141: LD_INT 33
25143: PUSH
25144: LD_INT 34
25146: PUSH
25147: LD_INT 36
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 101
25189: PUSH
25190: LD_INT 102
25192: PUSH
25193: LD_INT 103
25195: PUSH
25196: LD_INT 104
25198: PUSH
25199: LD_INT 105
25201: PUSH
25202: LD_INT 106
25204: PUSH
25205: LD_INT 107
25207: PUSH
25208: LD_INT 108
25210: PUSH
25211: LD_INT 109
25213: PUSH
25214: LD_INT 110
25216: PUSH
25217: LD_INT 111
25219: PUSH
25220: LD_INT 112
25222: PUSH
25223: LD_INT 113
25225: PUSH
25226: LD_INT 114
25228: PUSH
25229: LD_INT 116
25231: PUSH
25232: LD_INT 117
25234: PUSH
25235: LD_INT 118
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: ST_TO_ADDR
25261: GO 25660
25263: LD_INT 18
25265: DOUBLE
25266: EQUAL
25267: IFTRUE 25271
25269: GO 25419
25271: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25272: LD_ADDR_VAR 0 2
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 4
25282: PUSH
25283: LD_INT 5
25285: PUSH
25286: LD_INT 7
25288: PUSH
25289: LD_INT 11
25291: PUSH
25292: LD_INT 12
25294: PUSH
25295: LD_INT 15
25297: PUSH
25298: LD_INT 16
25300: PUSH
25301: LD_INT 20
25303: PUSH
25304: LD_INT 21
25306: PUSH
25307: LD_INT 22
25309: PUSH
25310: LD_INT 23
25312: PUSH
25313: LD_INT 25
25315: PUSH
25316: LD_INT 26
25318: PUSH
25319: LD_INT 30
25321: PUSH
25322: LD_INT 31
25324: PUSH
25325: LD_INT 32
25327: PUSH
25328: LD_INT 33
25330: PUSH
25331: LD_INT 34
25333: PUSH
25334: LD_INT 35
25336: PUSH
25337: LD_INT 36
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 101
25365: PUSH
25366: LD_INT 102
25368: PUSH
25369: LD_INT 103
25371: PUSH
25372: LD_INT 106
25374: PUSH
25375: LD_INT 108
25377: PUSH
25378: LD_INT 112
25380: PUSH
25381: LD_INT 113
25383: PUSH
25384: LD_INT 114
25386: PUSH
25387: LD_INT 115
25389: PUSH
25390: LD_INT 116
25392: PUSH
25393: LD_INT 117
25395: PUSH
25396: LD_INT 118
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: ST_TO_ADDR
25417: GO 25660
25419: LD_INT 19
25421: DOUBLE
25422: EQUAL
25423: IFTRUE 25427
25425: GO 25659
25427: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25428: LD_ADDR_VAR 0 2
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: LD_INT 2
25438: PUSH
25439: LD_INT 3
25441: PUSH
25442: LD_INT 4
25444: PUSH
25445: LD_INT 5
25447: PUSH
25448: LD_INT 6
25450: PUSH
25451: LD_INT 7
25453: PUSH
25454: LD_INT 8
25456: PUSH
25457: LD_INT 9
25459: PUSH
25460: LD_INT 10
25462: PUSH
25463: LD_INT 11
25465: PUSH
25466: LD_INT 12
25468: PUSH
25469: LD_INT 13
25471: PUSH
25472: LD_INT 14
25474: PUSH
25475: LD_INT 15
25477: PUSH
25478: LD_INT 16
25480: PUSH
25481: LD_INT 17
25483: PUSH
25484: LD_INT 18
25486: PUSH
25487: LD_INT 19
25489: PUSH
25490: LD_INT 20
25492: PUSH
25493: LD_INT 21
25495: PUSH
25496: LD_INT 22
25498: PUSH
25499: LD_INT 23
25501: PUSH
25502: LD_INT 24
25504: PUSH
25505: LD_INT 25
25507: PUSH
25508: LD_INT 26
25510: PUSH
25511: LD_INT 27
25513: PUSH
25514: LD_INT 28
25516: PUSH
25517: LD_INT 29
25519: PUSH
25520: LD_INT 30
25522: PUSH
25523: LD_INT 31
25525: PUSH
25526: LD_INT 32
25528: PUSH
25529: LD_INT 33
25531: PUSH
25532: LD_INT 34
25534: PUSH
25535: LD_INT 35
25537: PUSH
25538: LD_INT 36
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 101
25581: PUSH
25582: LD_INT 102
25584: PUSH
25585: LD_INT 103
25587: PUSH
25588: LD_INT 104
25590: PUSH
25591: LD_INT 105
25593: PUSH
25594: LD_INT 106
25596: PUSH
25597: LD_INT 107
25599: PUSH
25600: LD_INT 108
25602: PUSH
25603: LD_INT 109
25605: PUSH
25606: LD_INT 110
25608: PUSH
25609: LD_INT 111
25611: PUSH
25612: LD_INT 112
25614: PUSH
25615: LD_INT 113
25617: PUSH
25618: LD_INT 114
25620: PUSH
25621: LD_INT 115
25623: PUSH
25624: LD_INT 116
25626: PUSH
25627: LD_INT 117
25629: PUSH
25630: LD_INT 118
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: ST_TO_ADDR
25657: GO 25660
25659: POP
// end else
25660: GO 25891
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25662: LD_ADDR_VAR 0 2
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: LD_INT 2
25672: PUSH
25673: LD_INT 3
25675: PUSH
25676: LD_INT 4
25678: PUSH
25679: LD_INT 5
25681: PUSH
25682: LD_INT 6
25684: PUSH
25685: LD_INT 7
25687: PUSH
25688: LD_INT 8
25690: PUSH
25691: LD_INT 9
25693: PUSH
25694: LD_INT 10
25696: PUSH
25697: LD_INT 11
25699: PUSH
25700: LD_INT 12
25702: PUSH
25703: LD_INT 13
25705: PUSH
25706: LD_INT 14
25708: PUSH
25709: LD_INT 15
25711: PUSH
25712: LD_INT 16
25714: PUSH
25715: LD_INT 17
25717: PUSH
25718: LD_INT 18
25720: PUSH
25721: LD_INT 19
25723: PUSH
25724: LD_INT 20
25726: PUSH
25727: LD_INT 21
25729: PUSH
25730: LD_INT 22
25732: PUSH
25733: LD_INT 23
25735: PUSH
25736: LD_INT 24
25738: PUSH
25739: LD_INT 25
25741: PUSH
25742: LD_INT 26
25744: PUSH
25745: LD_INT 27
25747: PUSH
25748: LD_INT 28
25750: PUSH
25751: LD_INT 29
25753: PUSH
25754: LD_INT 30
25756: PUSH
25757: LD_INT 31
25759: PUSH
25760: LD_INT 32
25762: PUSH
25763: LD_INT 33
25765: PUSH
25766: LD_INT 34
25768: PUSH
25769: LD_INT 35
25771: PUSH
25772: LD_INT 36
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 101
25815: PUSH
25816: LD_INT 102
25818: PUSH
25819: LD_INT 103
25821: PUSH
25822: LD_INT 104
25824: PUSH
25825: LD_INT 105
25827: PUSH
25828: LD_INT 106
25830: PUSH
25831: LD_INT 107
25833: PUSH
25834: LD_INT 108
25836: PUSH
25837: LD_INT 109
25839: PUSH
25840: LD_INT 110
25842: PUSH
25843: LD_INT 111
25845: PUSH
25846: LD_INT 112
25848: PUSH
25849: LD_INT 113
25851: PUSH
25852: LD_INT 114
25854: PUSH
25855: LD_INT 115
25857: PUSH
25858: LD_INT 116
25860: PUSH
25861: LD_INT 117
25863: PUSH
25864: LD_INT 118
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: ST_TO_ADDR
// if result then
25891: LD_VAR 0 2
25895: IFFALSE 26681
// begin normal :=  ;
25897: LD_ADDR_VAR 0 5
25901: PUSH
25902: LD_STRING 
25904: ST_TO_ADDR
// hardcore :=  ;
25905: LD_ADDR_VAR 0 6
25909: PUSH
25910: LD_STRING 
25912: ST_TO_ADDR
// active :=  ;
25913: LD_ADDR_VAR 0 7
25917: PUSH
25918: LD_STRING 
25920: ST_TO_ADDR
// for i = 1 to normalCounter do
25921: LD_ADDR_VAR 0 8
25925: PUSH
25926: DOUBLE
25927: LD_INT 1
25929: DEC
25930: ST_TO_ADDR
25931: LD_EXP 39
25935: PUSH
25936: FOR_TO
25937: IFFALSE 26038
// begin tmp := 0 ;
25939: LD_ADDR_VAR 0 3
25943: PUSH
25944: LD_STRING 0
25946: ST_TO_ADDR
// if result [ 1 ] then
25947: LD_VAR 0 2
25951: PUSH
25952: LD_INT 1
25954: ARRAY
25955: IFFALSE 26020
// if result [ 1 ] [ 1 ] = i then
25957: LD_VAR 0 2
25961: PUSH
25962: LD_INT 1
25964: ARRAY
25965: PUSH
25966: LD_INT 1
25968: ARRAY
25969: PUSH
25970: LD_VAR 0 8
25974: EQUAL
25975: IFFALSE 26020
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25977: LD_ADDR_VAR 0 2
25981: PUSH
25982: LD_VAR 0 2
25986: PPUSH
25987: LD_INT 1
25989: PPUSH
25990: LD_VAR 0 2
25994: PUSH
25995: LD_INT 1
25997: ARRAY
25998: PPUSH
25999: LD_INT 1
26001: PPUSH
26002: CALL_OW 3
26006: PPUSH
26007: CALL_OW 1
26011: ST_TO_ADDR
// tmp := 1 ;
26012: LD_ADDR_VAR 0 3
26016: PUSH
26017: LD_STRING 1
26019: ST_TO_ADDR
// end ; normal := normal & tmp ;
26020: LD_ADDR_VAR 0 5
26024: PUSH
26025: LD_VAR 0 5
26029: PUSH
26030: LD_VAR 0 3
26034: STR
26035: ST_TO_ADDR
// end ;
26036: GO 25936
26038: POP
26039: POP
// for i = 1 to hardcoreCounter do
26040: LD_ADDR_VAR 0 8
26044: PUSH
26045: DOUBLE
26046: LD_INT 1
26048: DEC
26049: ST_TO_ADDR
26050: LD_EXP 40
26054: PUSH
26055: FOR_TO
26056: IFFALSE 26161
// begin tmp := 0 ;
26058: LD_ADDR_VAR 0 3
26062: PUSH
26063: LD_STRING 0
26065: ST_TO_ADDR
// if result [ 2 ] then
26066: LD_VAR 0 2
26070: PUSH
26071: LD_INT 2
26073: ARRAY
26074: IFFALSE 26143
// if result [ 2 ] [ 1 ] = 100 + i then
26076: LD_VAR 0 2
26080: PUSH
26081: LD_INT 2
26083: ARRAY
26084: PUSH
26085: LD_INT 1
26087: ARRAY
26088: PUSH
26089: LD_INT 100
26091: PUSH
26092: LD_VAR 0 8
26096: PLUS
26097: EQUAL
26098: IFFALSE 26143
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26100: LD_ADDR_VAR 0 2
26104: PUSH
26105: LD_VAR 0 2
26109: PPUSH
26110: LD_INT 2
26112: PPUSH
26113: LD_VAR 0 2
26117: PUSH
26118: LD_INT 2
26120: ARRAY
26121: PPUSH
26122: LD_INT 1
26124: PPUSH
26125: CALL_OW 3
26129: PPUSH
26130: CALL_OW 1
26134: ST_TO_ADDR
// tmp := 1 ;
26135: LD_ADDR_VAR 0 3
26139: PUSH
26140: LD_STRING 1
26142: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26143: LD_ADDR_VAR 0 6
26147: PUSH
26148: LD_VAR 0 6
26152: PUSH
26153: LD_VAR 0 3
26157: STR
26158: ST_TO_ADDR
// end ;
26159: GO 26055
26161: POP
26162: POP
// if isGameLoad then
26163: LD_VAR 0 1
26167: IFFALSE 26642
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26169: LD_ADDR_VAR 0 4
26173: PUSH
26174: LD_EXP 43
26178: PUSH
26179: LD_EXP 42
26183: PUSH
26184: LD_EXP 44
26188: PUSH
26189: LD_EXP 41
26193: PUSH
26194: LD_EXP 45
26198: PUSH
26199: LD_EXP 46
26203: PUSH
26204: LD_EXP 47
26208: PUSH
26209: LD_EXP 48
26213: PUSH
26214: LD_EXP 49
26218: PUSH
26219: LD_EXP 50
26223: PUSH
26224: LD_EXP 51
26228: PUSH
26229: LD_EXP 52
26233: PUSH
26234: LD_EXP 53
26238: PUSH
26239: LD_EXP 54
26243: PUSH
26244: LD_EXP 62
26248: PUSH
26249: LD_EXP 63
26253: PUSH
26254: LD_EXP 64
26258: PUSH
26259: LD_EXP 65
26263: PUSH
26264: LD_EXP 67
26268: PUSH
26269: LD_EXP 68
26273: PUSH
26274: LD_EXP 69
26278: PUSH
26279: LD_EXP 72
26283: PUSH
26284: LD_EXP 74
26288: PUSH
26289: LD_EXP 75
26293: PUSH
26294: LD_EXP 76
26298: PUSH
26299: LD_EXP 78
26303: PUSH
26304: LD_EXP 79
26308: PUSH
26309: LD_EXP 82
26313: PUSH
26314: LD_EXP 83
26318: PUSH
26319: LD_EXP 84
26323: PUSH
26324: LD_EXP 85
26328: PUSH
26329: LD_EXP 86
26333: PUSH
26334: LD_EXP 87
26338: PUSH
26339: LD_EXP 88
26343: PUSH
26344: LD_EXP 89
26348: PUSH
26349: LD_EXP 90
26353: PUSH
26354: LD_EXP 55
26358: PUSH
26359: LD_EXP 56
26363: PUSH
26364: LD_EXP 59
26368: PUSH
26369: LD_EXP 60
26373: PUSH
26374: LD_EXP 61
26378: PUSH
26379: LD_EXP 57
26383: PUSH
26384: LD_EXP 58
26388: PUSH
26389: LD_EXP 66
26393: PUSH
26394: LD_EXP 70
26398: PUSH
26399: LD_EXP 71
26403: PUSH
26404: LD_EXP 73
26408: PUSH
26409: LD_EXP 77
26413: PUSH
26414: LD_EXP 80
26418: PUSH
26419: LD_EXP 81
26423: PUSH
26424: LD_EXP 91
26428: PUSH
26429: LD_EXP 92
26433: PUSH
26434: LD_EXP 93
26438: PUSH
26439: LD_EXP 94
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: ST_TO_ADDR
// tmp :=  ;
26500: LD_ADDR_VAR 0 3
26504: PUSH
26505: LD_STRING 
26507: ST_TO_ADDR
// for i = 1 to normalCounter do
26508: LD_ADDR_VAR 0 8
26512: PUSH
26513: DOUBLE
26514: LD_INT 1
26516: DEC
26517: ST_TO_ADDR
26518: LD_EXP 39
26522: PUSH
26523: FOR_TO
26524: IFFALSE 26560
// begin if flags [ i ] then
26526: LD_VAR 0 4
26530: PUSH
26531: LD_VAR 0 8
26535: ARRAY
26536: IFFALSE 26558
// tmp := tmp & i & ; ;
26538: LD_ADDR_VAR 0 3
26542: PUSH
26543: LD_VAR 0 3
26547: PUSH
26548: LD_VAR 0 8
26552: STR
26553: PUSH
26554: LD_STRING ;
26556: STR
26557: ST_TO_ADDR
// end ;
26558: GO 26523
26560: POP
26561: POP
// for i = 1 to hardcoreCounter do
26562: LD_ADDR_VAR 0 8
26566: PUSH
26567: DOUBLE
26568: LD_INT 1
26570: DEC
26571: ST_TO_ADDR
26572: LD_EXP 40
26576: PUSH
26577: FOR_TO
26578: IFFALSE 26624
// begin if flags [ normalCounter + i ] then
26580: LD_VAR 0 4
26584: PUSH
26585: LD_EXP 39
26589: PUSH
26590: LD_VAR 0 8
26594: PLUS
26595: ARRAY
26596: IFFALSE 26622
// tmp := tmp & ( 100 + i ) & ; ;
26598: LD_ADDR_VAR 0 3
26602: PUSH
26603: LD_VAR 0 3
26607: PUSH
26608: LD_INT 100
26610: PUSH
26611: LD_VAR 0 8
26615: PLUS
26616: STR
26617: PUSH
26618: LD_STRING ;
26620: STR
26621: ST_TO_ADDR
// end ;
26622: GO 26577
26624: POP
26625: POP
// if tmp then
26626: LD_VAR 0 3
26630: IFFALSE 26642
// active := tmp ;
26632: LD_ADDR_VAR 0 7
26636: PUSH
26637: LD_VAR 0 3
26641: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26642: LD_STRING getStreamItemsFromMission("
26644: PUSH
26645: LD_VAR 0 5
26649: STR
26650: PUSH
26651: LD_STRING ","
26653: STR
26654: PUSH
26655: LD_VAR 0 6
26659: STR
26660: PUSH
26661: LD_STRING ","
26663: STR
26664: PUSH
26665: LD_VAR 0 7
26669: STR
26670: PUSH
26671: LD_STRING ")
26673: STR
26674: PPUSH
26675: CALL_OW 559
// end else
26679: GO 26688
// ToLua ( getStreamItemsFromMission("","","") ) ;
26681: LD_STRING getStreamItemsFromMission("","","")
26683: PPUSH
26684: CALL_OW 559
// end ;
26688: LD_VAR 0 2
26692: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26693: LD_EXP 38
26697: IFFALSE 26705
26699: PUSH
26700: LD_EXP 43
26704: AND
26705: IFFALSE 26829
26707: GO 26709
26709: DISABLE
26710: LD_INT 0
26712: PPUSH
26713: PPUSH
// begin enable ;
26714: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26715: LD_ADDR_VAR 0 2
26719: PUSH
26720: LD_INT 22
26722: PUSH
26723: LD_OWVAR 2
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 2
26734: PUSH
26735: LD_INT 34
26737: PUSH
26738: LD_INT 7
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 34
26747: PUSH
26748: LD_INT 45
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 34
26757: PUSH
26758: LD_INT 28
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 34
26767: PUSH
26768: LD_INT 47
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PPUSH
26786: CALL_OW 69
26790: ST_TO_ADDR
// if not tmp then
26791: LD_VAR 0 2
26795: NOT
26796: IFFALSE 26800
// exit ;
26798: GO 26829
// for i in tmp do
26800: LD_ADDR_VAR 0 1
26804: PUSH
26805: LD_VAR 0 2
26809: PUSH
26810: FOR_IN
26811: IFFALSE 26827
// begin SetLives ( i , 0 ) ;
26813: LD_VAR 0 1
26817: PPUSH
26818: LD_INT 0
26820: PPUSH
26821: CALL_OW 234
// end ;
26825: GO 26810
26827: POP
26828: POP
// end ;
26829: PPOPN 2
26831: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26832: LD_EXP 38
26836: IFFALSE 26844
26838: PUSH
26839: LD_EXP 44
26843: AND
26844: IFFALSE 26928
26846: GO 26848
26848: DISABLE
26849: LD_INT 0
26851: PPUSH
26852: PPUSH
// begin enable ;
26853: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26854: LD_ADDR_VAR 0 2
26858: PUSH
26859: LD_INT 22
26861: PUSH
26862: LD_OWVAR 2
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 32
26873: PUSH
26874: LD_INT 3
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PPUSH
26885: CALL_OW 69
26889: ST_TO_ADDR
// if not tmp then
26890: LD_VAR 0 2
26894: NOT
26895: IFFALSE 26899
// exit ;
26897: GO 26928
// for i in tmp do
26899: LD_ADDR_VAR 0 1
26903: PUSH
26904: LD_VAR 0 2
26908: PUSH
26909: FOR_IN
26910: IFFALSE 26926
// begin SetLives ( i , 0 ) ;
26912: LD_VAR 0 1
26916: PPUSH
26917: LD_INT 0
26919: PPUSH
26920: CALL_OW 234
// end ;
26924: GO 26909
26926: POP
26927: POP
// end ;
26928: PPOPN 2
26930: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26931: LD_EXP 38
26935: IFFALSE 26943
26937: PUSH
26938: LD_EXP 41
26942: AND
26943: IFFALSE 27036
26945: GO 26947
26947: DISABLE
26948: LD_INT 0
26950: PPUSH
// begin enable ;
26951: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26952: LD_ADDR_VAR 0 1
26956: PUSH
26957: LD_INT 22
26959: PUSH
26960: LD_OWVAR 2
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 2
26971: PUSH
26972: LD_INT 25
26974: PUSH
26975: LD_INT 5
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 25
26984: PUSH
26985: LD_INT 9
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 25
26994: PUSH
26995: LD_INT 8
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PPUSH
27012: CALL_OW 69
27016: PUSH
27017: FOR_IN
27018: IFFALSE 27034
// begin SetClass ( i , 1 ) ;
27020: LD_VAR 0 1
27024: PPUSH
27025: LD_INT 1
27027: PPUSH
27028: CALL_OW 336
// end ;
27032: GO 27017
27034: POP
27035: POP
// end ;
27036: PPOPN 1
27038: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27039: LD_EXP 38
27043: IFFALSE 27051
27045: PUSH
27046: LD_EXP 42
27050: AND
27051: IFFALSE 27063
27053: PUSH
27054: LD_OWVAR 65
27058: PUSH
27059: LD_INT 7
27061: LESS
27062: AND
27063: IFFALSE 27077
27065: GO 27067
27067: DISABLE
// begin enable ;
27068: ENABLE
// game_speed := 7 ;
27069: LD_ADDR_OWVAR 65
27073: PUSH
27074: LD_INT 7
27076: ST_TO_ADDR
// end ;
27077: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27078: LD_EXP 38
27082: IFFALSE 27090
27084: PUSH
27085: LD_EXP 45
27089: AND
27090: IFFALSE 27292
27092: GO 27094
27094: DISABLE
27095: LD_INT 0
27097: PPUSH
27098: PPUSH
27099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27100: LD_ADDR_VAR 0 3
27104: PUSH
27105: LD_INT 81
27107: PUSH
27108: LD_OWVAR 2
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 21
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PPUSH
27131: CALL_OW 69
27135: ST_TO_ADDR
// if not tmp then
27136: LD_VAR 0 3
27140: NOT
27141: IFFALSE 27145
// exit ;
27143: GO 27292
// if tmp > 5 then
27145: LD_VAR 0 3
27149: PUSH
27150: LD_INT 5
27152: GREATER
27153: IFFALSE 27165
// k := 5 else
27155: LD_ADDR_VAR 0 2
27159: PUSH
27160: LD_INT 5
27162: ST_TO_ADDR
27163: GO 27175
// k := tmp ;
27165: LD_ADDR_VAR 0 2
27169: PUSH
27170: LD_VAR 0 3
27174: ST_TO_ADDR
// for i := 1 to k do
27175: LD_ADDR_VAR 0 1
27179: PUSH
27180: DOUBLE
27181: LD_INT 1
27183: DEC
27184: ST_TO_ADDR
27185: LD_VAR 0 2
27189: PUSH
27190: FOR_TO
27191: IFFALSE 27290
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27193: LD_VAR 0 3
27197: PUSH
27198: LD_VAR 0 1
27202: ARRAY
27203: PPUSH
27204: LD_VAR 0 1
27208: PUSH
27209: LD_INT 4
27211: MOD
27212: PUSH
27213: LD_INT 1
27215: PLUS
27216: PPUSH
27217: CALL_OW 259
27221: PUSH
27222: LD_INT 10
27224: LESS
27225: IFFALSE 27288
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27227: LD_VAR 0 3
27231: PUSH
27232: LD_VAR 0 1
27236: ARRAY
27237: PPUSH
27238: LD_VAR 0 1
27242: PUSH
27243: LD_INT 4
27245: MOD
27246: PUSH
27247: LD_INT 1
27249: PLUS
27250: PPUSH
27251: LD_VAR 0 3
27255: PUSH
27256: LD_VAR 0 1
27260: ARRAY
27261: PPUSH
27262: LD_VAR 0 1
27266: PUSH
27267: LD_INT 4
27269: MOD
27270: PUSH
27271: LD_INT 1
27273: PLUS
27274: PPUSH
27275: CALL_OW 259
27279: PUSH
27280: LD_INT 1
27282: PLUS
27283: PPUSH
27284: CALL_OW 237
27288: GO 27190
27290: POP
27291: POP
// end ;
27292: PPOPN 3
27294: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27295: LD_EXP 38
27299: IFFALSE 27307
27301: PUSH
27302: LD_EXP 46
27306: AND
27307: IFFALSE 27327
27309: GO 27311
27311: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27312: LD_INT 4
27314: PPUSH
27315: LD_OWVAR 2
27319: PPUSH
27320: LD_INT 0
27322: PPUSH
27323: CALL_OW 324
27327: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27328: LD_EXP 38
27332: IFFALSE 27340
27334: PUSH
27335: LD_EXP 75
27339: AND
27340: IFFALSE 27360
27342: GO 27344
27344: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27345: LD_INT 19
27347: PPUSH
27348: LD_OWVAR 2
27352: PPUSH
27353: LD_INT 0
27355: PPUSH
27356: CALL_OW 324
27360: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27361: LD_EXP 38
27365: IFFALSE 27373
27367: PUSH
27368: LD_EXP 47
27372: AND
27373: IFFALSE 27475
27375: GO 27377
27377: DISABLE
27378: LD_INT 0
27380: PPUSH
27381: PPUSH
// begin enable ;
27382: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27383: LD_ADDR_VAR 0 2
27387: PUSH
27388: LD_INT 22
27390: PUSH
27391: LD_OWVAR 2
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 2
27402: PUSH
27403: LD_INT 34
27405: PUSH
27406: LD_INT 11
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 34
27415: PUSH
27416: LD_INT 30
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: LIST
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PPUSH
27432: CALL_OW 69
27436: ST_TO_ADDR
// if not tmp then
27437: LD_VAR 0 2
27441: NOT
27442: IFFALSE 27446
// exit ;
27444: GO 27475
// for i in tmp do
27446: LD_ADDR_VAR 0 1
27450: PUSH
27451: LD_VAR 0 2
27455: PUSH
27456: FOR_IN
27457: IFFALSE 27473
// begin SetLives ( i , 0 ) ;
27459: LD_VAR 0 1
27463: PPUSH
27464: LD_INT 0
27466: PPUSH
27467: CALL_OW 234
// end ;
27471: GO 27456
27473: POP
27474: POP
// end ;
27475: PPOPN 2
27477: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27478: LD_EXP 38
27482: IFFALSE 27490
27484: PUSH
27485: LD_EXP 48
27489: AND
27490: IFFALSE 27510
27492: GO 27494
27494: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27495: LD_INT 32
27497: PPUSH
27498: LD_OWVAR 2
27502: PPUSH
27503: LD_INT 0
27505: PPUSH
27506: CALL_OW 324
27510: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27511: LD_EXP 38
27515: IFFALSE 27523
27517: PUSH
27518: LD_EXP 49
27522: AND
27523: IFFALSE 27706
27525: GO 27527
27527: DISABLE
27528: LD_INT 0
27530: PPUSH
27531: PPUSH
27532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27533: LD_ADDR_VAR 0 2
27537: PUSH
27538: LD_INT 22
27540: PUSH
27541: LD_OWVAR 2
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 33
27552: PUSH
27553: LD_INT 3
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PPUSH
27564: CALL_OW 69
27568: ST_TO_ADDR
// if not tmp then
27569: LD_VAR 0 2
27573: NOT
27574: IFFALSE 27578
// exit ;
27576: GO 27706
// side := 0 ;
27578: LD_ADDR_VAR 0 3
27582: PUSH
27583: LD_INT 0
27585: ST_TO_ADDR
// for i := 1 to 8 do
27586: LD_ADDR_VAR 0 1
27590: PUSH
27591: DOUBLE
27592: LD_INT 1
27594: DEC
27595: ST_TO_ADDR
27596: LD_INT 8
27598: PUSH
27599: FOR_TO
27600: IFFALSE 27650
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27602: LD_OWVAR 2
27606: PUSH
27607: LD_VAR 0 1
27611: NONEQUAL
27612: IFFALSE 27634
27614: PUSH
27615: LD_OWVAR 2
27619: PPUSH
27620: LD_VAR 0 1
27624: PPUSH
27625: CALL_OW 81
27629: PUSH
27630: LD_INT 2
27632: EQUAL
27633: AND
27634: IFFALSE 27648
// begin side := i ;
27636: LD_ADDR_VAR 0 3
27640: PUSH
27641: LD_VAR 0 1
27645: ST_TO_ADDR
// break ;
27646: GO 27650
// end ;
27648: GO 27599
27650: POP
27651: POP
// if not side then
27652: LD_VAR 0 3
27656: NOT
27657: IFFALSE 27661
// exit ;
27659: GO 27706
// for i := 1 to tmp do
27661: LD_ADDR_VAR 0 1
27665: PUSH
27666: DOUBLE
27667: LD_INT 1
27669: DEC
27670: ST_TO_ADDR
27671: LD_VAR 0 2
27675: PUSH
27676: FOR_TO
27677: IFFALSE 27704
// if Prob ( 60 ) then
27679: LD_INT 60
27681: PPUSH
27682: CALL_OW 13
27686: IFFALSE 27702
// SetSide ( i , side ) ;
27688: LD_VAR 0 1
27692: PPUSH
27693: LD_VAR 0 3
27697: PPUSH
27698: CALL_OW 235
27702: GO 27676
27704: POP
27705: POP
// end ;
27706: PPOPN 3
27708: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27709: LD_EXP 38
27713: IFFALSE 27721
27715: PUSH
27716: LD_EXP 51
27720: AND
27721: IFFALSE 27840
27723: GO 27725
27725: DISABLE
27726: LD_INT 0
27728: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27729: LD_ADDR_VAR 0 1
27733: PUSH
27734: LD_INT 22
27736: PUSH
27737: LD_OWVAR 2
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 21
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 3
27758: PUSH
27759: LD_INT 23
27761: PUSH
27762: LD_INT 0
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: LIST
27777: PPUSH
27778: CALL_OW 69
27782: PUSH
27783: FOR_IN
27784: IFFALSE 27838
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27786: LD_VAR 0 1
27790: PPUSH
27791: CALL_OW 257
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 2
27801: PUSH
27802: LD_INT 3
27804: PUSH
27805: LD_INT 4
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: IN
27814: IFFALSE 27836
// SetClass ( un , rand ( 1 , 4 ) ) ;
27816: LD_VAR 0 1
27820: PPUSH
27821: LD_INT 1
27823: PPUSH
27824: LD_INT 4
27826: PPUSH
27827: CALL_OW 12
27831: PPUSH
27832: CALL_OW 336
27836: GO 27783
27838: POP
27839: POP
// end ;
27840: PPOPN 1
27842: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27843: LD_EXP 38
27847: IFFALSE 27855
27849: PUSH
27850: LD_EXP 50
27854: AND
27855: IFFALSE 27934
27857: GO 27859
27859: DISABLE
27860: LD_INT 0
27862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27863: LD_ADDR_VAR 0 1
27867: PUSH
27868: LD_INT 22
27870: PUSH
27871: LD_OWVAR 2
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 21
27882: PUSH
27883: LD_INT 3
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PPUSH
27894: CALL_OW 69
27898: ST_TO_ADDR
// if not tmp then
27899: LD_VAR 0 1
27903: NOT
27904: IFFALSE 27908
// exit ;
27906: GO 27934
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27908: LD_VAR 0 1
27912: PUSH
27913: LD_INT 1
27915: PPUSH
27916: LD_VAR 0 1
27920: PPUSH
27921: CALL_OW 12
27925: ARRAY
27926: PPUSH
27927: LD_INT 100
27929: PPUSH
27930: CALL_OW 234
// end ;
27934: PPOPN 1
27936: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27937: LD_EXP 38
27941: IFFALSE 27949
27943: PUSH
27944: LD_EXP 52
27948: AND
27949: IFFALSE 28047
27951: GO 27953
27953: DISABLE
27954: LD_INT 0
27956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27957: LD_ADDR_VAR 0 1
27961: PUSH
27962: LD_INT 22
27964: PUSH
27965: LD_OWVAR 2
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 21
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PPUSH
27988: CALL_OW 69
27992: ST_TO_ADDR
// if not tmp then
27993: LD_VAR 0 1
27997: NOT
27998: IFFALSE 28002
// exit ;
28000: GO 28047
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28002: LD_VAR 0 1
28006: PUSH
28007: LD_INT 1
28009: PPUSH
28010: LD_VAR 0 1
28014: PPUSH
28015: CALL_OW 12
28019: ARRAY
28020: PPUSH
28021: LD_INT 1
28023: PPUSH
28024: LD_INT 4
28026: PPUSH
28027: CALL_OW 12
28031: PPUSH
28032: LD_INT 3000
28034: PPUSH
28035: LD_INT 9000
28037: PPUSH
28038: CALL_OW 12
28042: PPUSH
28043: CALL_OW 492
// end ;
28047: PPOPN 1
28049: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28050: LD_EXP 38
28054: IFFALSE 28062
28056: PUSH
28057: LD_EXP 53
28061: AND
28062: IFFALSE 28082
28064: GO 28066
28066: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28067: LD_INT 1
28069: PPUSH
28070: LD_OWVAR 2
28074: PPUSH
28075: LD_INT 0
28077: PPUSH
28078: CALL_OW 324
28082: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28083: LD_EXP 38
28087: IFFALSE 28095
28089: PUSH
28090: LD_EXP 54
28094: AND
28095: IFFALSE 28178
28097: GO 28099
28099: DISABLE
28100: LD_INT 0
28102: PPUSH
28103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28104: LD_ADDR_VAR 0 2
28108: PUSH
28109: LD_INT 22
28111: PUSH
28112: LD_OWVAR 2
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 21
28123: PUSH
28124: LD_INT 3
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PPUSH
28135: CALL_OW 69
28139: ST_TO_ADDR
// if not tmp then
28140: LD_VAR 0 2
28144: NOT
28145: IFFALSE 28149
// exit ;
28147: GO 28178
// for i in tmp do
28149: LD_ADDR_VAR 0 1
28153: PUSH
28154: LD_VAR 0 2
28158: PUSH
28159: FOR_IN
28160: IFFALSE 28176
// SetBLevel ( i , 10 ) ;
28162: LD_VAR 0 1
28166: PPUSH
28167: LD_INT 10
28169: PPUSH
28170: CALL_OW 241
28174: GO 28159
28176: POP
28177: POP
// end ;
28178: PPOPN 2
28180: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28181: LD_EXP 38
28185: IFFALSE 28193
28187: PUSH
28188: LD_EXP 55
28192: AND
28193: IFFALSE 28304
28195: GO 28197
28197: DISABLE
28198: LD_INT 0
28200: PPUSH
28201: PPUSH
28202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28203: LD_ADDR_VAR 0 3
28207: PUSH
28208: LD_INT 22
28210: PUSH
28211: LD_OWVAR 2
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 25
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PPUSH
28234: CALL_OW 69
28238: ST_TO_ADDR
// if not tmp then
28239: LD_VAR 0 3
28243: NOT
28244: IFFALSE 28248
// exit ;
28246: GO 28304
// un := tmp [ rand ( 1 , tmp ) ] ;
28248: LD_ADDR_VAR 0 2
28252: PUSH
28253: LD_VAR 0 3
28257: PUSH
28258: LD_INT 1
28260: PPUSH
28261: LD_VAR 0 3
28265: PPUSH
28266: CALL_OW 12
28270: ARRAY
28271: ST_TO_ADDR
// if Crawls ( un ) then
28272: LD_VAR 0 2
28276: PPUSH
28277: CALL_OW 318
28281: IFFALSE 28292
// ComWalk ( un ) ;
28283: LD_VAR 0 2
28287: PPUSH
28288: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28292: LD_VAR 0 2
28296: PPUSH
28297: LD_INT 5
28299: PPUSH
28300: CALL_OW 336
// end ;
28304: PPOPN 3
28306: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28307: LD_EXP 38
28311: IFFALSE 28319
28313: PUSH
28314: LD_EXP 56
28318: AND
28319: IFFALSE 28331
28321: PUSH
28322: LD_OWVAR 67
28326: PUSH
28327: LD_INT 4
28329: LESS
28330: AND
28331: IFFALSE 28350
28333: GO 28335
28335: DISABLE
// begin Difficulty := Difficulty + 1 ;
28336: LD_ADDR_OWVAR 67
28340: PUSH
28341: LD_OWVAR 67
28345: PUSH
28346: LD_INT 1
28348: PLUS
28349: ST_TO_ADDR
// end ;
28350: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28351: LD_EXP 38
28355: IFFALSE 28363
28357: PUSH
28358: LD_EXP 57
28362: AND
28363: IFFALSE 28466
28365: GO 28367
28367: DISABLE
28368: LD_INT 0
28370: PPUSH
// begin for i := 1 to 5 do
28371: LD_ADDR_VAR 0 1
28375: PUSH
28376: DOUBLE
28377: LD_INT 1
28379: DEC
28380: ST_TO_ADDR
28381: LD_INT 5
28383: PUSH
28384: FOR_TO
28385: IFFALSE 28464
// begin uc_nation := nation_nature ;
28387: LD_ADDR_OWVAR 21
28391: PUSH
28392: LD_INT 0
28394: ST_TO_ADDR
// uc_side := 0 ;
28395: LD_ADDR_OWVAR 20
28399: PUSH
28400: LD_INT 0
28402: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28403: LD_ADDR_OWVAR 29
28407: PUSH
28408: LD_INT 12
28410: PUSH
28411: LD_INT 12
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: ST_TO_ADDR
// hc_agressivity := 20 ;
28418: LD_ADDR_OWVAR 35
28422: PUSH
28423: LD_INT 20
28425: ST_TO_ADDR
// hc_class := class_tiger ;
28426: LD_ADDR_OWVAR 28
28430: PUSH
28431: LD_INT 14
28433: ST_TO_ADDR
// hc_gallery :=  ;
28434: LD_ADDR_OWVAR 33
28438: PUSH
28439: LD_STRING 
28441: ST_TO_ADDR
// hc_name :=  ;
28442: LD_ADDR_OWVAR 26
28446: PUSH
28447: LD_STRING 
28449: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28450: CALL_OW 44
28454: PPUSH
28455: LD_INT 0
28457: PPUSH
28458: CALL_OW 51
// end ;
28462: GO 28384
28464: POP
28465: POP
// end ;
28466: PPOPN 1
28468: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28469: LD_EXP 38
28473: IFFALSE 28481
28475: PUSH
28476: LD_EXP 58
28480: AND
28481: IFFALSE 28490
28483: GO 28485
28485: DISABLE
// StreamSibBomb ;
28486: CALL 28491 0 0
28490: END
// export function StreamSibBomb ; var i , x , y ; begin
28491: LD_INT 0
28493: PPUSH
28494: PPUSH
28495: PPUSH
28496: PPUSH
// result := false ;
28497: LD_ADDR_VAR 0 1
28501: PUSH
28502: LD_INT 0
28504: ST_TO_ADDR
// for i := 1 to 16 do
28505: LD_ADDR_VAR 0 2
28509: PUSH
28510: DOUBLE
28511: LD_INT 1
28513: DEC
28514: ST_TO_ADDR
28515: LD_INT 16
28517: PUSH
28518: FOR_TO
28519: IFFALSE 28718
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28521: LD_ADDR_VAR 0 3
28525: PUSH
28526: LD_INT 10
28528: PUSH
28529: LD_INT 20
28531: PUSH
28532: LD_INT 30
28534: PUSH
28535: LD_INT 40
28537: PUSH
28538: LD_INT 50
28540: PUSH
28541: LD_INT 60
28543: PUSH
28544: LD_INT 70
28546: PUSH
28547: LD_INT 80
28549: PUSH
28550: LD_INT 90
28552: PUSH
28553: LD_INT 100
28555: PUSH
28556: LD_INT 110
28558: PUSH
28559: LD_INT 120
28561: PUSH
28562: LD_INT 130
28564: PUSH
28565: LD_INT 140
28567: PUSH
28568: LD_INT 150
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 1
28590: PPUSH
28591: LD_INT 15
28593: PPUSH
28594: CALL_OW 12
28598: ARRAY
28599: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28600: LD_ADDR_VAR 0 4
28604: PUSH
28605: LD_INT 10
28607: PUSH
28608: LD_INT 20
28610: PUSH
28611: LD_INT 30
28613: PUSH
28614: LD_INT 40
28616: PUSH
28617: LD_INT 50
28619: PUSH
28620: LD_INT 60
28622: PUSH
28623: LD_INT 70
28625: PUSH
28626: LD_INT 80
28628: PUSH
28629: LD_INT 90
28631: PUSH
28632: LD_INT 100
28634: PUSH
28635: LD_INT 110
28637: PUSH
28638: LD_INT 120
28640: PUSH
28641: LD_INT 130
28643: PUSH
28644: LD_INT 140
28646: PUSH
28647: LD_INT 150
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: PPUSH
28670: LD_INT 15
28672: PPUSH
28673: CALL_OW 12
28677: ARRAY
28678: ST_TO_ADDR
// if ValidHex ( x , y ) then
28679: LD_VAR 0 3
28683: PPUSH
28684: LD_VAR 0 4
28688: PPUSH
28689: CALL_OW 488
28693: IFFALSE 28716
// begin result := [ x , y ] ;
28695: LD_ADDR_VAR 0 1
28699: PUSH
28700: LD_VAR 0 3
28704: PUSH
28705: LD_VAR 0 4
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: ST_TO_ADDR
// break ;
28714: GO 28718
// end ; end ;
28716: GO 28518
28718: POP
28719: POP
// if result then
28720: LD_VAR 0 1
28724: IFFALSE 28784
// begin ToLua ( playSibBomb() ) ;
28726: LD_STRING playSibBomb()
28728: PPUSH
28729: CALL_OW 559
// wait ( 0 0$14 ) ;
28733: LD_INT 490
28735: PPUSH
28736: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28740: LD_VAR 0 1
28744: PUSH
28745: LD_INT 1
28747: ARRAY
28748: PPUSH
28749: LD_VAR 0 1
28753: PUSH
28754: LD_INT 2
28756: ARRAY
28757: PPUSH
28758: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28762: LD_VAR 0 1
28766: PUSH
28767: LD_INT 1
28769: ARRAY
28770: PPUSH
28771: LD_VAR 0 1
28775: PUSH
28776: LD_INT 2
28778: ARRAY
28779: PPUSH
28780: CALL_OW 429
// end ; end ;
28784: LD_VAR 0 1
28788: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28789: LD_EXP 38
28793: IFFALSE 28801
28795: PUSH
28796: LD_EXP 60
28800: AND
28801: IFFALSE 28813
28803: GO 28805
28805: DISABLE
// YouLost (  ) ;
28806: LD_STRING 
28808: PPUSH
28809: CALL_OW 104
28813: END
// every 0 0$1 trigger StreamModeActive and sFog do
28814: LD_EXP 38
28818: IFFALSE 28826
28820: PUSH
28821: LD_EXP 59
28825: AND
28826: IFFALSE 28840
28828: GO 28830
28830: DISABLE
// FogOff ( your_side ) ;
28831: LD_OWVAR 2
28835: PPUSH
28836: CALL_OW 344
28840: END
// every 0 0$1 trigger StreamModeActive and sSun do
28841: LD_EXP 38
28845: IFFALSE 28853
28847: PUSH
28848: LD_EXP 61
28852: AND
28853: IFFALSE 28881
28855: GO 28857
28857: DISABLE
// begin solar_recharge_percent := 0 ;
28858: LD_ADDR_OWVAR 79
28862: PUSH
28863: LD_INT 0
28865: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28866: LD_INT 10500
28868: PPUSH
28869: CALL_OW 67
// solar_recharge_percent := 100 ;
28873: LD_ADDR_OWVAR 79
28877: PUSH
28878: LD_INT 100
28880: ST_TO_ADDR
// end ;
28881: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28882: LD_EXP 38
28886: IFFALSE 28894
28888: PUSH
28889: LD_EXP 62
28893: AND
28894: IFFALSE 29133
28896: GO 28898
28898: DISABLE
28899: LD_INT 0
28901: PPUSH
28902: PPUSH
28903: PPUSH
// begin tmp := [ ] ;
28904: LD_ADDR_VAR 0 3
28908: PUSH
28909: EMPTY
28910: ST_TO_ADDR
// for i := 1 to 6 do
28911: LD_ADDR_VAR 0 1
28915: PUSH
28916: DOUBLE
28917: LD_INT 1
28919: DEC
28920: ST_TO_ADDR
28921: LD_INT 6
28923: PUSH
28924: FOR_TO
28925: IFFALSE 29030
// begin uc_nation := nation_nature ;
28927: LD_ADDR_OWVAR 21
28931: PUSH
28932: LD_INT 0
28934: ST_TO_ADDR
// uc_side := 0 ;
28935: LD_ADDR_OWVAR 20
28939: PUSH
28940: LD_INT 0
28942: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28943: LD_ADDR_OWVAR 29
28947: PUSH
28948: LD_INT 12
28950: PUSH
28951: LD_INT 12
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: ST_TO_ADDR
// hc_agressivity := 20 ;
28958: LD_ADDR_OWVAR 35
28962: PUSH
28963: LD_INT 20
28965: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28966: LD_ADDR_OWVAR 28
28970: PUSH
28971: LD_INT 17
28973: ST_TO_ADDR
// hc_gallery :=  ;
28974: LD_ADDR_OWVAR 33
28978: PUSH
28979: LD_STRING 
28981: ST_TO_ADDR
// hc_name :=  ;
28982: LD_ADDR_OWVAR 26
28986: PUSH
28987: LD_STRING 
28989: ST_TO_ADDR
// un := CreateHuman ;
28990: LD_ADDR_VAR 0 2
28994: PUSH
28995: CALL_OW 44
28999: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29000: LD_VAR 0 2
29004: PPUSH
29005: LD_INT 1
29007: PPUSH
29008: CALL_OW 51
// tmp := tmp ^ un ;
29012: LD_ADDR_VAR 0 3
29016: PUSH
29017: LD_VAR 0 3
29021: PUSH
29022: LD_VAR 0 2
29026: ADD
29027: ST_TO_ADDR
// end ;
29028: GO 28924
29030: POP
29031: POP
// repeat wait ( 0 0$1 ) ;
29032: LD_INT 35
29034: PPUSH
29035: CALL_OW 67
// for un in tmp do
29039: LD_ADDR_VAR 0 2
29043: PUSH
29044: LD_VAR 0 3
29048: PUSH
29049: FOR_IN
29050: IFFALSE 29124
// begin if IsDead ( un ) then
29052: LD_VAR 0 2
29056: PPUSH
29057: CALL_OW 301
29061: IFFALSE 29081
// begin tmp := tmp diff un ;
29063: LD_ADDR_VAR 0 3
29067: PUSH
29068: LD_VAR 0 3
29072: PUSH
29073: LD_VAR 0 2
29077: DIFF
29078: ST_TO_ADDR
// continue ;
29079: GO 29049
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29081: LD_VAR 0 2
29085: PPUSH
29086: LD_INT 3
29088: PUSH
29089: LD_INT 22
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PPUSH
29103: CALL_OW 69
29107: PPUSH
29108: LD_VAR 0 2
29112: PPUSH
29113: CALL_OW 74
29117: PPUSH
29118: CALL_OW 115
// end ;
29122: GO 29049
29124: POP
29125: POP
// until not tmp ;
29126: LD_VAR 0 3
29130: NOT
29131: IFFALSE 29032
// end ;
29133: PPOPN 3
29135: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29136: LD_EXP 38
29140: IFFALSE 29148
29142: PUSH
29143: LD_EXP 63
29147: AND
29148: IFFALSE 29202
29150: GO 29152
29152: DISABLE
// begin ToLua ( displayTroll(); ) ;
29153: LD_STRING displayTroll();
29155: PPUSH
29156: CALL_OW 559
// wait ( 3 3$00 ) ;
29160: LD_INT 6300
29162: PPUSH
29163: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29167: LD_STRING hideTroll();
29169: PPUSH
29170: CALL_OW 559
// wait ( 1 1$00 ) ;
29174: LD_INT 2100
29176: PPUSH
29177: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29181: LD_STRING displayTroll();
29183: PPUSH
29184: CALL_OW 559
// wait ( 1 1$00 ) ;
29188: LD_INT 2100
29190: PPUSH
29191: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29195: LD_STRING hideTroll();
29197: PPUSH
29198: CALL_OW 559
// end ;
29202: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29203: LD_EXP 38
29207: IFFALSE 29215
29209: PUSH
29210: LD_EXP 64
29214: AND
29215: IFFALSE 29278
29217: GO 29219
29219: DISABLE
29220: LD_INT 0
29222: PPUSH
// begin p := 0 ;
29223: LD_ADDR_VAR 0 1
29227: PUSH
29228: LD_INT 0
29230: ST_TO_ADDR
// repeat game_speed := 1 ;
29231: LD_ADDR_OWVAR 65
29235: PUSH
29236: LD_INT 1
29238: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29239: LD_INT 35
29241: PPUSH
29242: CALL_OW 67
// p := p + 1 ;
29246: LD_ADDR_VAR 0 1
29250: PUSH
29251: LD_VAR 0 1
29255: PUSH
29256: LD_INT 1
29258: PLUS
29259: ST_TO_ADDR
// until p >= 60 ;
29260: LD_VAR 0 1
29264: PUSH
29265: LD_INT 60
29267: GREATEREQUAL
29268: IFFALSE 29231
// game_speed := 4 ;
29270: LD_ADDR_OWVAR 65
29274: PUSH
29275: LD_INT 4
29277: ST_TO_ADDR
// end ;
29278: PPOPN 1
29280: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29281: LD_EXP 38
29285: IFFALSE 29293
29287: PUSH
29288: LD_EXP 65
29292: AND
29293: IFFALSE 29439
29295: GO 29297
29297: DISABLE
29298: LD_INT 0
29300: PPUSH
29301: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29302: LD_ADDR_VAR 0 1
29306: PUSH
29307: LD_INT 22
29309: PUSH
29310: LD_OWVAR 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 2
29321: PUSH
29322: LD_INT 30
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 30
29334: PUSH
29335: LD_INT 1
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: LIST
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PPUSH
29351: CALL_OW 69
29355: ST_TO_ADDR
// if not depot then
29356: LD_VAR 0 1
29360: NOT
29361: IFFALSE 29365
// exit ;
29363: GO 29439
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29365: LD_ADDR_VAR 0 2
29369: PUSH
29370: LD_VAR 0 1
29374: PUSH
29375: LD_INT 1
29377: PPUSH
29378: LD_VAR 0 1
29382: PPUSH
29383: CALL_OW 12
29387: ARRAY
29388: PPUSH
29389: CALL_OW 274
29393: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29394: LD_VAR 0 2
29398: PPUSH
29399: LD_INT 1
29401: PPUSH
29402: LD_INT 0
29404: PPUSH
29405: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29409: LD_VAR 0 2
29413: PPUSH
29414: LD_INT 2
29416: PPUSH
29417: LD_INT 0
29419: PPUSH
29420: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29424: LD_VAR 0 2
29428: PPUSH
29429: LD_INT 3
29431: PPUSH
29432: LD_INT 0
29434: PPUSH
29435: CALL_OW 277
// end ;
29439: PPOPN 2
29441: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29442: LD_EXP 38
29446: IFFALSE 29454
29448: PUSH
29449: LD_EXP 66
29453: AND
29454: IFFALSE 29551
29456: GO 29458
29458: DISABLE
29459: LD_INT 0
29461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29462: LD_ADDR_VAR 0 1
29466: PUSH
29467: LD_INT 22
29469: PUSH
29470: LD_OWVAR 2
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 21
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 3
29491: PUSH
29492: LD_INT 23
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: LIST
29510: PPUSH
29511: CALL_OW 69
29515: ST_TO_ADDR
// if not tmp then
29516: LD_VAR 0 1
29520: NOT
29521: IFFALSE 29525
// exit ;
29523: GO 29551
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29525: LD_VAR 0 1
29529: PUSH
29530: LD_INT 1
29532: PPUSH
29533: LD_VAR 0 1
29537: PPUSH
29538: CALL_OW 12
29542: ARRAY
29543: PPUSH
29544: LD_INT 200
29546: PPUSH
29547: CALL_OW 234
// end ;
29551: PPOPN 1
29553: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29554: LD_EXP 38
29558: IFFALSE 29566
29560: PUSH
29561: LD_EXP 67
29565: AND
29566: IFFALSE 29645
29568: GO 29570
29570: DISABLE
29571: LD_INT 0
29573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29574: LD_ADDR_VAR 0 1
29578: PUSH
29579: LD_INT 22
29581: PUSH
29582: LD_OWVAR 2
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 21
29593: PUSH
29594: LD_INT 2
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PPUSH
29605: CALL_OW 69
29609: ST_TO_ADDR
// if not tmp then
29610: LD_VAR 0 1
29614: NOT
29615: IFFALSE 29619
// exit ;
29617: GO 29645
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29619: LD_VAR 0 1
29623: PUSH
29624: LD_INT 1
29626: PPUSH
29627: LD_VAR 0 1
29631: PPUSH
29632: CALL_OW 12
29636: ARRAY
29637: PPUSH
29638: LD_INT 60
29640: PPUSH
29641: CALL_OW 234
// end ;
29645: PPOPN 1
29647: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29648: LD_EXP 38
29652: IFFALSE 29660
29654: PUSH
29655: LD_EXP 68
29659: AND
29660: IFFALSE 29759
29662: GO 29664
29664: DISABLE
29665: LD_INT 0
29667: PPUSH
29668: PPUSH
// begin enable ;
29669: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29670: LD_ADDR_VAR 0 1
29674: PUSH
29675: LD_INT 22
29677: PUSH
29678: LD_OWVAR 2
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 61
29689: PUSH
29690: EMPTY
29691: LIST
29692: PUSH
29693: LD_INT 33
29695: PUSH
29696: LD_INT 2
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: PPUSH
29708: CALL_OW 69
29712: ST_TO_ADDR
// if not tmp then
29713: LD_VAR 0 1
29717: NOT
29718: IFFALSE 29722
// exit ;
29720: GO 29759
// for i in tmp do
29722: LD_ADDR_VAR 0 2
29726: PUSH
29727: LD_VAR 0 1
29731: PUSH
29732: FOR_IN
29733: IFFALSE 29757
// if IsControledBy ( i ) then
29735: LD_VAR 0 2
29739: PPUSH
29740: CALL_OW 312
29744: IFFALSE 29755
// ComUnlink ( i ) ;
29746: LD_VAR 0 2
29750: PPUSH
29751: CALL_OW 136
29755: GO 29732
29757: POP
29758: POP
// end ;
29759: PPOPN 2
29761: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29762: LD_EXP 38
29766: IFFALSE 29774
29768: PUSH
29769: LD_EXP 69
29773: AND
29774: IFFALSE 29914
29776: GO 29778
29778: DISABLE
29779: LD_INT 0
29781: PPUSH
29782: PPUSH
// begin ToLua ( displayPowell(); ) ;
29783: LD_STRING displayPowell();
29785: PPUSH
29786: CALL_OW 559
// uc_side := 0 ;
29790: LD_ADDR_OWVAR 20
29794: PUSH
29795: LD_INT 0
29797: ST_TO_ADDR
// uc_nation := 2 ;
29798: LD_ADDR_OWVAR 21
29802: PUSH
29803: LD_INT 2
29805: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29806: LD_ADDR_OWVAR 37
29810: PUSH
29811: LD_INT 14
29813: ST_TO_ADDR
// vc_engine := engine_siberite ;
29814: LD_ADDR_OWVAR 39
29818: PUSH
29819: LD_INT 3
29821: ST_TO_ADDR
// vc_control := control_apeman ;
29822: LD_ADDR_OWVAR 38
29826: PUSH
29827: LD_INT 5
29829: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29830: LD_ADDR_OWVAR 40
29834: PUSH
29835: LD_INT 29
29837: ST_TO_ADDR
// un := CreateVehicle ;
29838: LD_ADDR_VAR 0 2
29842: PUSH
29843: CALL_OW 45
29847: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29848: LD_VAR 0 2
29852: PPUSH
29853: LD_INT 1
29855: PPUSH
29856: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29860: LD_INT 35
29862: PPUSH
29863: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29867: LD_VAR 0 2
29871: PPUSH
29872: LD_INT 22
29874: PUSH
29875: LD_OWVAR 2
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PPUSH
29884: CALL_OW 69
29888: PPUSH
29889: LD_VAR 0 2
29893: PPUSH
29894: CALL_OW 74
29898: PPUSH
29899: CALL_OW 115
// until IsDead ( un ) ;
29903: LD_VAR 0 2
29907: PPUSH
29908: CALL_OW 301
29912: IFFALSE 29860
// end ;
29914: PPOPN 2
29916: END
// every 0 0$1 trigger StreamModeActive and sStu do
29917: LD_EXP 38
29921: IFFALSE 29929
29923: PUSH
29924: LD_EXP 77
29928: AND
29929: IFFALSE 29945
29931: GO 29933
29933: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29934: LD_STRING displayStucuk();
29936: PPUSH
29937: CALL_OW 559
// ResetFog ;
29941: CALL_OW 335
// end ;
29945: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29946: LD_EXP 38
29950: IFFALSE 29958
29952: PUSH
29953: LD_EXP 70
29957: AND
29958: IFFALSE 30099
29960: GO 29962
29962: DISABLE
29963: LD_INT 0
29965: PPUSH
29966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29967: LD_ADDR_VAR 0 2
29971: PUSH
29972: LD_INT 22
29974: PUSH
29975: LD_OWVAR 2
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 21
29986: PUSH
29987: LD_INT 1
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PPUSH
29998: CALL_OW 69
30002: ST_TO_ADDR
// if not tmp then
30003: LD_VAR 0 2
30007: NOT
30008: IFFALSE 30012
// exit ;
30010: GO 30099
// un := tmp [ rand ( 1 , tmp ) ] ;
30012: LD_ADDR_VAR 0 1
30016: PUSH
30017: LD_VAR 0 2
30021: PUSH
30022: LD_INT 1
30024: PPUSH
30025: LD_VAR 0 2
30029: PPUSH
30030: CALL_OW 12
30034: ARRAY
30035: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30036: LD_VAR 0 1
30040: PPUSH
30041: LD_INT 0
30043: PPUSH
30044: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30048: LD_VAR 0 1
30052: PPUSH
30053: LD_OWVAR 3
30057: PUSH
30058: LD_VAR 0 1
30062: DIFF
30063: PPUSH
30064: LD_VAR 0 1
30068: PPUSH
30069: CALL_OW 74
30073: PPUSH
30074: CALL_OW 115
// wait ( 0 0$20 ) ;
30078: LD_INT 700
30080: PPUSH
30081: CALL_OW 67
// SetSide ( un , your_side ) ;
30085: LD_VAR 0 1
30089: PPUSH
30090: LD_OWVAR 2
30094: PPUSH
30095: CALL_OW 235
// end ;
30099: PPOPN 2
30101: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30102: LD_EXP 38
30106: IFFALSE 30114
30108: PUSH
30109: LD_EXP 71
30113: AND
30114: IFFALSE 30220
30116: GO 30118
30118: DISABLE
30119: LD_INT 0
30121: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30122: LD_ADDR_VAR 0 1
30126: PUSH
30127: LD_INT 22
30129: PUSH
30130: LD_OWVAR 2
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 2
30141: PUSH
30142: LD_INT 30
30144: PUSH
30145: LD_INT 0
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 30
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: LIST
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PPUSH
30171: CALL_OW 69
30175: ST_TO_ADDR
// if not depot then
30176: LD_VAR 0 1
30180: NOT
30181: IFFALSE 30185
// exit ;
30183: GO 30220
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30185: LD_VAR 0 1
30189: PUSH
30190: LD_INT 1
30192: ARRAY
30193: PPUSH
30194: CALL_OW 250
30198: PPUSH
30199: LD_VAR 0 1
30203: PUSH
30204: LD_INT 1
30206: ARRAY
30207: PPUSH
30208: CALL_OW 251
30212: PPUSH
30213: LD_INT 70
30215: PPUSH
30216: CALL_OW 495
// end ;
30220: PPOPN 1
30222: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30223: LD_EXP 38
30227: IFFALSE 30235
30229: PUSH
30230: LD_EXP 72
30234: AND
30235: IFFALSE 30446
30237: GO 30239
30239: DISABLE
30240: LD_INT 0
30242: PPUSH
30243: PPUSH
30244: PPUSH
30245: PPUSH
30246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30247: LD_ADDR_VAR 0 5
30251: PUSH
30252: LD_INT 22
30254: PUSH
30255: LD_OWVAR 2
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 21
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PPUSH
30278: CALL_OW 69
30282: ST_TO_ADDR
// if not tmp then
30283: LD_VAR 0 5
30287: NOT
30288: IFFALSE 30292
// exit ;
30290: GO 30446
// for i in tmp do
30292: LD_ADDR_VAR 0 1
30296: PUSH
30297: LD_VAR 0 5
30301: PUSH
30302: FOR_IN
30303: IFFALSE 30444
// begin d := rand ( 0 , 5 ) ;
30305: LD_ADDR_VAR 0 4
30309: PUSH
30310: LD_INT 0
30312: PPUSH
30313: LD_INT 5
30315: PPUSH
30316: CALL_OW 12
30320: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30321: LD_ADDR_VAR 0 2
30325: PUSH
30326: LD_VAR 0 1
30330: PPUSH
30331: CALL_OW 250
30335: PPUSH
30336: LD_VAR 0 4
30340: PPUSH
30341: LD_INT 3
30343: PPUSH
30344: LD_INT 12
30346: PPUSH
30347: CALL_OW 12
30351: PPUSH
30352: CALL_OW 272
30356: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30357: LD_ADDR_VAR 0 3
30361: PUSH
30362: LD_VAR 0 1
30366: PPUSH
30367: CALL_OW 251
30371: PPUSH
30372: LD_VAR 0 4
30376: PPUSH
30377: LD_INT 3
30379: PPUSH
30380: LD_INT 12
30382: PPUSH
30383: CALL_OW 12
30387: PPUSH
30388: CALL_OW 273
30392: ST_TO_ADDR
// if ValidHex ( x , y ) then
30393: LD_VAR 0 2
30397: PPUSH
30398: LD_VAR 0 3
30402: PPUSH
30403: CALL_OW 488
30407: IFFALSE 30442
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30409: LD_VAR 0 1
30413: PPUSH
30414: LD_VAR 0 2
30418: PPUSH
30419: LD_VAR 0 3
30423: PPUSH
30424: LD_INT 3
30426: PPUSH
30427: LD_INT 6
30429: PPUSH
30430: CALL_OW 12
30434: PPUSH
30435: LD_INT 1
30437: PPUSH
30438: CALL_OW 483
// end ;
30442: GO 30302
30444: POP
30445: POP
// end ;
30446: PPOPN 5
30448: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30449: LD_EXP 38
30453: IFFALSE 30461
30455: PUSH
30456: LD_EXP 73
30460: AND
30461: IFFALSE 30555
30463: GO 30465
30465: DISABLE
30466: LD_INT 0
30468: PPUSH
30469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30470: LD_ADDR_VAR 0 2
30474: PUSH
30475: LD_INT 22
30477: PUSH
30478: LD_OWVAR 2
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 32
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 21
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: LIST
30511: PPUSH
30512: CALL_OW 69
30516: ST_TO_ADDR
// if not tmp then
30517: LD_VAR 0 2
30521: NOT
30522: IFFALSE 30526
// exit ;
30524: GO 30555
// for i in tmp do
30526: LD_ADDR_VAR 0 1
30530: PUSH
30531: LD_VAR 0 2
30535: PUSH
30536: FOR_IN
30537: IFFALSE 30553
// SetFuel ( i , 0 ) ;
30539: LD_VAR 0 1
30543: PPUSH
30544: LD_INT 0
30546: PPUSH
30547: CALL_OW 240
30551: GO 30536
30553: POP
30554: POP
// end ;
30555: PPOPN 2
30557: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30558: LD_EXP 38
30562: IFFALSE 30570
30564: PUSH
30565: LD_EXP 74
30569: AND
30570: IFFALSE 30636
30572: GO 30574
30574: DISABLE
30575: LD_INT 0
30577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30578: LD_ADDR_VAR 0 1
30582: PUSH
30583: LD_INT 22
30585: PUSH
30586: LD_OWVAR 2
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 30
30597: PUSH
30598: LD_INT 29
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PPUSH
30609: CALL_OW 69
30613: ST_TO_ADDR
// if not tmp then
30614: LD_VAR 0 1
30618: NOT
30619: IFFALSE 30623
// exit ;
30621: GO 30636
// DestroyUnit ( tmp [ 1 ] ) ;
30623: LD_VAR 0 1
30627: PUSH
30628: LD_INT 1
30630: ARRAY
30631: PPUSH
30632: CALL_OW 65
// end ;
30636: PPOPN 1
30638: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30639: LD_EXP 38
30643: IFFALSE 30651
30645: PUSH
30646: LD_EXP 76
30650: AND
30651: IFFALSE 30780
30653: GO 30655
30655: DISABLE
30656: LD_INT 0
30658: PPUSH
// begin uc_side := 0 ;
30659: LD_ADDR_OWVAR 20
30663: PUSH
30664: LD_INT 0
30666: ST_TO_ADDR
// uc_nation := nation_arabian ;
30667: LD_ADDR_OWVAR 21
30671: PUSH
30672: LD_INT 2
30674: ST_TO_ADDR
// hc_gallery :=  ;
30675: LD_ADDR_OWVAR 33
30679: PUSH
30680: LD_STRING 
30682: ST_TO_ADDR
// hc_name :=  ;
30683: LD_ADDR_OWVAR 26
30687: PUSH
30688: LD_STRING 
30690: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30691: LD_INT 1
30693: PPUSH
30694: LD_INT 11
30696: PPUSH
30697: LD_INT 10
30699: PPUSH
30700: CALL_OW 380
// un := CreateHuman ;
30704: LD_ADDR_VAR 0 1
30708: PUSH
30709: CALL_OW 44
30713: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30714: LD_VAR 0 1
30718: PPUSH
30719: LD_INT 1
30721: PPUSH
30722: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30726: LD_INT 35
30728: PPUSH
30729: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30733: LD_VAR 0 1
30737: PPUSH
30738: LD_INT 22
30740: PUSH
30741: LD_OWVAR 2
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PPUSH
30750: CALL_OW 69
30754: PPUSH
30755: LD_VAR 0 1
30759: PPUSH
30760: CALL_OW 74
30764: PPUSH
30765: CALL_OW 115
// until IsDead ( un ) ;
30769: LD_VAR 0 1
30773: PPUSH
30774: CALL_OW 301
30778: IFFALSE 30726
// end ;
30780: PPOPN 1
30782: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30783: LD_EXP 38
30787: IFFALSE 30795
30789: PUSH
30790: LD_EXP 78
30794: AND
30795: IFFALSE 30807
30797: GO 30799
30799: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30800: LD_STRING earthquake(getX(game), 0, 32)
30802: PPUSH
30803: CALL_OW 559
30807: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30808: LD_EXP 38
30812: IFFALSE 30820
30814: PUSH
30815: LD_EXP 79
30819: AND
30820: IFFALSE 30911
30822: GO 30824
30824: DISABLE
30825: LD_INT 0
30827: PPUSH
// begin enable ;
30828: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30829: LD_ADDR_VAR 0 1
30833: PUSH
30834: LD_INT 22
30836: PUSH
30837: LD_OWVAR 2
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 21
30848: PUSH
30849: LD_INT 2
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 33
30858: PUSH
30859: LD_INT 3
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: LIST
30870: PPUSH
30871: CALL_OW 69
30875: ST_TO_ADDR
// if not tmp then
30876: LD_VAR 0 1
30880: NOT
30881: IFFALSE 30885
// exit ;
30883: GO 30911
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30885: LD_VAR 0 1
30889: PUSH
30890: LD_INT 1
30892: PPUSH
30893: LD_VAR 0 1
30897: PPUSH
30898: CALL_OW 12
30902: ARRAY
30903: PPUSH
30904: LD_INT 1
30906: PPUSH
30907: CALL_OW 234
// end ;
30911: PPOPN 1
30913: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30914: LD_EXP 38
30918: IFFALSE 30926
30920: PUSH
30921: LD_EXP 80
30925: AND
30926: IFFALSE 31067
30928: GO 30930
30930: DISABLE
30931: LD_INT 0
30933: PPUSH
30934: PPUSH
30935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30936: LD_ADDR_VAR 0 3
30940: PUSH
30941: LD_INT 22
30943: PUSH
30944: LD_OWVAR 2
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 25
30955: PUSH
30956: LD_INT 1
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PPUSH
30967: CALL_OW 69
30971: ST_TO_ADDR
// if not tmp then
30972: LD_VAR 0 3
30976: NOT
30977: IFFALSE 30981
// exit ;
30979: GO 31067
// un := tmp [ rand ( 1 , tmp ) ] ;
30981: LD_ADDR_VAR 0 2
30985: PUSH
30986: LD_VAR 0 3
30990: PUSH
30991: LD_INT 1
30993: PPUSH
30994: LD_VAR 0 3
30998: PPUSH
30999: CALL_OW 12
31003: ARRAY
31004: ST_TO_ADDR
// if Crawls ( un ) then
31005: LD_VAR 0 2
31009: PPUSH
31010: CALL_OW 318
31014: IFFALSE 31025
// ComWalk ( un ) ;
31016: LD_VAR 0 2
31020: PPUSH
31021: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31025: LD_VAR 0 2
31029: PPUSH
31030: LD_INT 9
31032: PPUSH
31033: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31037: LD_INT 28
31039: PPUSH
31040: LD_OWVAR 2
31044: PPUSH
31045: LD_INT 2
31047: PPUSH
31048: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31052: LD_INT 29
31054: PPUSH
31055: LD_OWVAR 2
31059: PPUSH
31060: LD_INT 2
31062: PPUSH
31063: CALL_OW 322
// end ;
31067: PPOPN 3
31069: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31070: LD_EXP 38
31074: IFFALSE 31082
31076: PUSH
31077: LD_EXP 81
31081: AND
31082: IFFALSE 31193
31084: GO 31086
31086: DISABLE
31087: LD_INT 0
31089: PPUSH
31090: PPUSH
31091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31092: LD_ADDR_VAR 0 3
31096: PUSH
31097: LD_INT 22
31099: PUSH
31100: LD_OWVAR 2
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 25
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PPUSH
31123: CALL_OW 69
31127: ST_TO_ADDR
// if not tmp then
31128: LD_VAR 0 3
31132: NOT
31133: IFFALSE 31137
// exit ;
31135: GO 31193
// un := tmp [ rand ( 1 , tmp ) ] ;
31137: LD_ADDR_VAR 0 2
31141: PUSH
31142: LD_VAR 0 3
31146: PUSH
31147: LD_INT 1
31149: PPUSH
31150: LD_VAR 0 3
31154: PPUSH
31155: CALL_OW 12
31159: ARRAY
31160: ST_TO_ADDR
// if Crawls ( un ) then
31161: LD_VAR 0 2
31165: PPUSH
31166: CALL_OW 318
31170: IFFALSE 31181
// ComWalk ( un ) ;
31172: LD_VAR 0 2
31176: PPUSH
31177: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31181: LD_VAR 0 2
31185: PPUSH
31186: LD_INT 8
31188: PPUSH
31189: CALL_OW 336
// end ;
31193: PPOPN 3
31195: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31196: LD_EXP 38
31200: IFFALSE 31208
31202: PUSH
31203: LD_EXP 82
31207: AND
31208: IFFALSE 31352
31210: GO 31212
31212: DISABLE
31213: LD_INT 0
31215: PPUSH
31216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31217: LD_ADDR_VAR 0 2
31221: PUSH
31222: LD_INT 22
31224: PUSH
31225: LD_OWVAR 2
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 21
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 2
31246: PUSH
31247: LD_INT 34
31249: PUSH
31250: LD_INT 12
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 34
31259: PUSH
31260: LD_INT 51
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 34
31269: PUSH
31270: LD_INT 32
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: LIST
31287: PPUSH
31288: CALL_OW 69
31292: ST_TO_ADDR
// if not tmp then
31293: LD_VAR 0 2
31297: NOT
31298: IFFALSE 31302
// exit ;
31300: GO 31352
// for i in tmp do
31302: LD_ADDR_VAR 0 1
31306: PUSH
31307: LD_VAR 0 2
31311: PUSH
31312: FOR_IN
31313: IFFALSE 31350
// if GetCargo ( i , mat_artifact ) = 0 then
31315: LD_VAR 0 1
31319: PPUSH
31320: LD_INT 4
31322: PPUSH
31323: CALL_OW 289
31327: PUSH
31328: LD_INT 0
31330: EQUAL
31331: IFFALSE 31348
// SetCargo ( i , mat_siberit , 100 ) ;
31333: LD_VAR 0 1
31337: PPUSH
31338: LD_INT 3
31340: PPUSH
31341: LD_INT 100
31343: PPUSH
31344: CALL_OW 290
31348: GO 31312
31350: POP
31351: POP
// end ;
31352: PPOPN 2
31354: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31355: LD_EXP 38
31359: IFFALSE 31367
31361: PUSH
31362: LD_EXP 83
31366: AND
31367: IFFALSE 31550
31369: GO 31371
31371: DISABLE
31372: LD_INT 0
31374: PPUSH
31375: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31376: LD_ADDR_VAR 0 2
31380: PUSH
31381: LD_INT 22
31383: PUSH
31384: LD_OWVAR 2
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PPUSH
31393: CALL_OW 69
31397: ST_TO_ADDR
// if not tmp then
31398: LD_VAR 0 2
31402: NOT
31403: IFFALSE 31407
// exit ;
31405: GO 31550
// for i := 1 to 2 do
31407: LD_ADDR_VAR 0 1
31411: PUSH
31412: DOUBLE
31413: LD_INT 1
31415: DEC
31416: ST_TO_ADDR
31417: LD_INT 2
31419: PUSH
31420: FOR_TO
31421: IFFALSE 31548
// begin uc_side := your_side ;
31423: LD_ADDR_OWVAR 20
31427: PUSH
31428: LD_OWVAR 2
31432: ST_TO_ADDR
// uc_nation := nation_american ;
31433: LD_ADDR_OWVAR 21
31437: PUSH
31438: LD_INT 1
31440: ST_TO_ADDR
// vc_chassis := us_morphling ;
31441: LD_ADDR_OWVAR 37
31445: PUSH
31446: LD_INT 5
31448: ST_TO_ADDR
// vc_engine := engine_siberite ;
31449: LD_ADDR_OWVAR 39
31453: PUSH
31454: LD_INT 3
31456: ST_TO_ADDR
// vc_control := control_computer ;
31457: LD_ADDR_OWVAR 38
31461: PUSH
31462: LD_INT 3
31464: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31465: LD_ADDR_OWVAR 40
31469: PUSH
31470: LD_INT 10
31472: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31473: LD_VAR 0 2
31477: PUSH
31478: LD_INT 1
31480: ARRAY
31481: PPUSH
31482: CALL_OW 310
31486: NOT
31487: IFFALSE 31534
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31489: CALL_OW 45
31493: PPUSH
31494: LD_VAR 0 2
31498: PUSH
31499: LD_INT 1
31501: ARRAY
31502: PPUSH
31503: CALL_OW 250
31507: PPUSH
31508: LD_VAR 0 2
31512: PUSH
31513: LD_INT 1
31515: ARRAY
31516: PPUSH
31517: CALL_OW 251
31521: PPUSH
31522: LD_INT 12
31524: PPUSH
31525: LD_INT 1
31527: PPUSH
31528: CALL_OW 50
31532: GO 31546
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31534: CALL_OW 45
31538: PPUSH
31539: LD_INT 1
31541: PPUSH
31542: CALL_OW 51
// end ;
31546: GO 31420
31548: POP
31549: POP
// end ;
31550: PPOPN 2
31552: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31553: LD_EXP 38
31557: IFFALSE 31565
31559: PUSH
31560: LD_EXP 84
31564: AND
31565: IFFALSE 31787
31567: GO 31569
31569: DISABLE
31570: LD_INT 0
31572: PPUSH
31573: PPUSH
31574: PPUSH
31575: PPUSH
31576: PPUSH
31577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31578: LD_ADDR_VAR 0 6
31582: PUSH
31583: LD_INT 22
31585: PUSH
31586: LD_OWVAR 2
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 21
31597: PUSH
31598: LD_INT 1
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 3
31607: PUSH
31608: LD_INT 23
31610: PUSH
31611: LD_INT 0
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: LIST
31626: PPUSH
31627: CALL_OW 69
31631: ST_TO_ADDR
// if not tmp then
31632: LD_VAR 0 6
31636: NOT
31637: IFFALSE 31641
// exit ;
31639: GO 31787
// s1 := rand ( 1 , 4 ) ;
31641: LD_ADDR_VAR 0 2
31645: PUSH
31646: LD_INT 1
31648: PPUSH
31649: LD_INT 4
31651: PPUSH
31652: CALL_OW 12
31656: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31657: LD_ADDR_VAR 0 4
31661: PUSH
31662: LD_VAR 0 6
31666: PUSH
31667: LD_INT 1
31669: ARRAY
31670: PPUSH
31671: LD_VAR 0 2
31675: PPUSH
31676: CALL_OW 259
31680: ST_TO_ADDR
// if s1 = 1 then
31681: LD_VAR 0 2
31685: PUSH
31686: LD_INT 1
31688: EQUAL
31689: IFFALSE 31709
// s2 := rand ( 2 , 4 ) else
31691: LD_ADDR_VAR 0 3
31695: PUSH
31696: LD_INT 2
31698: PPUSH
31699: LD_INT 4
31701: PPUSH
31702: CALL_OW 12
31706: ST_TO_ADDR
31707: GO 31717
// s2 := 1 ;
31709: LD_ADDR_VAR 0 3
31713: PUSH
31714: LD_INT 1
31716: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31717: LD_ADDR_VAR 0 5
31721: PUSH
31722: LD_VAR 0 6
31726: PUSH
31727: LD_INT 1
31729: ARRAY
31730: PPUSH
31731: LD_VAR 0 3
31735: PPUSH
31736: CALL_OW 259
31740: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31741: LD_VAR 0 6
31745: PUSH
31746: LD_INT 1
31748: ARRAY
31749: PPUSH
31750: LD_VAR 0 2
31754: PPUSH
31755: LD_VAR 0 5
31759: PPUSH
31760: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31764: LD_VAR 0 6
31768: PUSH
31769: LD_INT 1
31771: ARRAY
31772: PPUSH
31773: LD_VAR 0 3
31777: PPUSH
31778: LD_VAR 0 4
31782: PPUSH
31783: CALL_OW 237
// end ;
31787: PPOPN 6
31789: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31790: LD_EXP 38
31794: IFFALSE 31802
31796: PUSH
31797: LD_EXP 85
31801: AND
31802: IFFALSE 31881
31804: GO 31806
31806: DISABLE
31807: LD_INT 0
31809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31810: LD_ADDR_VAR 0 1
31814: PUSH
31815: LD_INT 22
31817: PUSH
31818: LD_OWVAR 2
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 30
31829: PUSH
31830: LD_INT 3
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PPUSH
31841: CALL_OW 69
31845: ST_TO_ADDR
// if not tmp then
31846: LD_VAR 0 1
31850: NOT
31851: IFFALSE 31855
// exit ;
31853: GO 31881
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31855: LD_VAR 0 1
31859: PUSH
31860: LD_INT 1
31862: PPUSH
31863: LD_VAR 0 1
31867: PPUSH
31868: CALL_OW 12
31872: ARRAY
31873: PPUSH
31874: LD_INT 1
31876: PPUSH
31877: CALL_OW 234
// end ;
31881: PPOPN 1
31883: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31884: LD_EXP 38
31888: IFFALSE 31896
31890: PUSH
31891: LD_EXP 86
31895: AND
31896: IFFALSE 32008
31898: GO 31900
31900: DISABLE
31901: LD_INT 0
31903: PPUSH
31904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31905: LD_ADDR_VAR 0 2
31909: PUSH
31910: LD_INT 22
31912: PUSH
31913: LD_OWVAR 2
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 2
31924: PUSH
31925: LD_INT 30
31927: PUSH
31928: LD_INT 27
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 30
31937: PUSH
31938: LD_INT 26
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 30
31947: PUSH
31948: LD_INT 28
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PPUSH
31965: CALL_OW 69
31969: ST_TO_ADDR
// if not tmp then
31970: LD_VAR 0 2
31974: NOT
31975: IFFALSE 31979
// exit ;
31977: GO 32008
// for i in tmp do
31979: LD_ADDR_VAR 0 1
31983: PUSH
31984: LD_VAR 0 2
31988: PUSH
31989: FOR_IN
31990: IFFALSE 32006
// SetLives ( i , 1 ) ;
31992: LD_VAR 0 1
31996: PPUSH
31997: LD_INT 1
31999: PPUSH
32000: CALL_OW 234
32004: GO 31989
32006: POP
32007: POP
// end ;
32008: PPOPN 2
32010: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32011: LD_EXP 38
32015: IFFALSE 32023
32017: PUSH
32018: LD_EXP 87
32022: AND
32023: IFFALSE 32310
32025: GO 32027
32027: DISABLE
32028: LD_INT 0
32030: PPUSH
32031: PPUSH
32032: PPUSH
// begin i := rand ( 1 , 7 ) ;
32033: LD_ADDR_VAR 0 1
32037: PUSH
32038: LD_INT 1
32040: PPUSH
32041: LD_INT 7
32043: PPUSH
32044: CALL_OW 12
32048: ST_TO_ADDR
// case i of 1 :
32049: LD_VAR 0 1
32053: PUSH
32054: LD_INT 1
32056: DOUBLE
32057: EQUAL
32058: IFTRUE 32062
32060: GO 32072
32062: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32063: LD_STRING earthquake(getX(game), 0, 32)
32065: PPUSH
32066: CALL_OW 559
32070: GO 32310
32072: LD_INT 2
32074: DOUBLE
32075: EQUAL
32076: IFTRUE 32080
32078: GO 32094
32080: POP
// begin ToLua ( displayStucuk(); ) ;
32081: LD_STRING displayStucuk();
32083: PPUSH
32084: CALL_OW 559
// ResetFog ;
32088: CALL_OW 335
// end ; 3 :
32092: GO 32310
32094: LD_INT 3
32096: DOUBLE
32097: EQUAL
32098: IFTRUE 32102
32100: GO 32206
32102: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32103: LD_ADDR_VAR 0 2
32107: PUSH
32108: LD_INT 22
32110: PUSH
32111: LD_OWVAR 2
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 25
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PPUSH
32134: CALL_OW 69
32138: ST_TO_ADDR
// if not tmp then
32139: LD_VAR 0 2
32143: NOT
32144: IFFALSE 32148
// exit ;
32146: GO 32310
// un := tmp [ rand ( 1 , tmp ) ] ;
32148: LD_ADDR_VAR 0 3
32152: PUSH
32153: LD_VAR 0 2
32157: PUSH
32158: LD_INT 1
32160: PPUSH
32161: LD_VAR 0 2
32165: PPUSH
32166: CALL_OW 12
32170: ARRAY
32171: ST_TO_ADDR
// if Crawls ( un ) then
32172: LD_VAR 0 3
32176: PPUSH
32177: CALL_OW 318
32181: IFFALSE 32192
// ComWalk ( un ) ;
32183: LD_VAR 0 3
32187: PPUSH
32188: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32192: LD_VAR 0 3
32196: PPUSH
32197: LD_INT 8
32199: PPUSH
32200: CALL_OW 336
// end ; 4 :
32204: GO 32310
32206: LD_INT 4
32208: DOUBLE
32209: EQUAL
32210: IFTRUE 32214
32212: GO 32288
32214: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32215: LD_ADDR_VAR 0 2
32219: PUSH
32220: LD_INT 22
32222: PUSH
32223: LD_OWVAR 2
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 30
32234: PUSH
32235: LD_INT 29
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PPUSH
32246: CALL_OW 69
32250: ST_TO_ADDR
// if not tmp then
32251: LD_VAR 0 2
32255: NOT
32256: IFFALSE 32260
// exit ;
32258: GO 32310
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32260: LD_VAR 0 2
32264: PUSH
32265: LD_INT 1
32267: ARRAY
32268: PPUSH
32269: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32273: LD_VAR 0 2
32277: PUSH
32278: LD_INT 1
32280: ARRAY
32281: PPUSH
32282: CALL_OW 65
// end ; 5 .. 7 :
32286: GO 32310
32288: LD_INT 5
32290: DOUBLE
32291: GREATEREQUAL
32292: IFFALSE 32300
32294: LD_INT 7
32296: DOUBLE
32297: LESSEQUAL
32298: IFTRUE 32302
32300: GO 32309
32302: POP
// StreamSibBomb ; end ;
32303: CALL 28491 0 0
32307: GO 32310
32309: POP
// end ;
32310: PPOPN 3
32312: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32313: LD_EXP 38
32317: IFFALSE 32325
32319: PUSH
32320: LD_EXP 88
32324: AND
32325: IFFALSE 32481
32327: GO 32329
32329: DISABLE
32330: LD_INT 0
32332: PPUSH
32333: PPUSH
32334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32335: LD_ADDR_VAR 0 2
32339: PUSH
32340: LD_INT 81
32342: PUSH
32343: LD_OWVAR 2
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: PUSH
32355: LD_INT 21
32357: PUSH
32358: LD_INT 1
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 21
32367: PUSH
32368: LD_INT 2
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: LIST
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PPUSH
32384: CALL_OW 69
32388: ST_TO_ADDR
// if not tmp then
32389: LD_VAR 0 2
32393: NOT
32394: IFFALSE 32398
// exit ;
32396: GO 32481
// p := 0 ;
32398: LD_ADDR_VAR 0 3
32402: PUSH
32403: LD_INT 0
32405: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32406: LD_INT 35
32408: PPUSH
32409: CALL_OW 67
// p := p + 1 ;
32413: LD_ADDR_VAR 0 3
32417: PUSH
32418: LD_VAR 0 3
32422: PUSH
32423: LD_INT 1
32425: PLUS
32426: ST_TO_ADDR
// for i in tmp do
32427: LD_ADDR_VAR 0 1
32431: PUSH
32432: LD_VAR 0 2
32436: PUSH
32437: FOR_IN
32438: IFFALSE 32469
// if GetLives ( i ) < 1000 then
32440: LD_VAR 0 1
32444: PPUSH
32445: CALL_OW 256
32449: PUSH
32450: LD_INT 1000
32452: LESS
32453: IFFALSE 32467
// SetLives ( i , 1000 ) ;
32455: LD_VAR 0 1
32459: PPUSH
32460: LD_INT 1000
32462: PPUSH
32463: CALL_OW 234
32467: GO 32437
32469: POP
32470: POP
// until p > 20 ;
32471: LD_VAR 0 3
32475: PUSH
32476: LD_INT 20
32478: GREATER
32479: IFFALSE 32406
// end ;
32481: PPOPN 3
32483: END
// every 0 0$1 trigger StreamModeActive and sTime do
32484: LD_EXP 38
32488: IFFALSE 32496
32490: PUSH
32491: LD_EXP 89
32495: AND
32496: IFFALSE 32531
32498: GO 32500
32500: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32501: LD_INT 28
32503: PPUSH
32504: LD_OWVAR 2
32508: PPUSH
32509: LD_INT 2
32511: PPUSH
32512: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32516: LD_INT 30
32518: PPUSH
32519: LD_OWVAR 2
32523: PPUSH
32524: LD_INT 2
32526: PPUSH
32527: CALL_OW 322
// end ;
32531: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32532: LD_EXP 38
32536: IFFALSE 32544
32538: PUSH
32539: LD_EXP 90
32543: AND
32544: IFFALSE 32665
32546: GO 32548
32548: DISABLE
32549: LD_INT 0
32551: PPUSH
32552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32553: LD_ADDR_VAR 0 2
32557: PUSH
32558: LD_INT 22
32560: PUSH
32561: LD_OWVAR 2
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 21
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 3
32582: PUSH
32583: LD_INT 23
32585: PUSH
32586: LD_INT 0
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: LIST
32601: PPUSH
32602: CALL_OW 69
32606: ST_TO_ADDR
// if not tmp then
32607: LD_VAR 0 2
32611: NOT
32612: IFFALSE 32616
// exit ;
32614: GO 32665
// for i in tmp do
32616: LD_ADDR_VAR 0 1
32620: PUSH
32621: LD_VAR 0 2
32625: PUSH
32626: FOR_IN
32627: IFFALSE 32663
// begin if Crawls ( i ) then
32629: LD_VAR 0 1
32633: PPUSH
32634: CALL_OW 318
32638: IFFALSE 32649
// ComWalk ( i ) ;
32640: LD_VAR 0 1
32644: PPUSH
32645: CALL_OW 138
// SetClass ( i , 2 ) ;
32649: LD_VAR 0 1
32653: PPUSH
32654: LD_INT 2
32656: PPUSH
32657: CALL_OW 336
// end ;
32661: GO 32626
32663: POP
32664: POP
// end ;
32665: PPOPN 2
32667: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32668: LD_EXP 38
32672: IFFALSE 32680
32674: PUSH
32675: LD_EXP 91
32679: AND
32680: IFFALSE 32970
32682: GO 32684
32684: DISABLE
32685: LD_INT 0
32687: PPUSH
32688: PPUSH
32689: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32690: LD_OWVAR 2
32694: PPUSH
32695: LD_INT 9
32697: PPUSH
32698: LD_INT 1
32700: PPUSH
32701: LD_INT 1
32703: PPUSH
32704: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32708: LD_INT 9
32710: PPUSH
32711: LD_OWVAR 2
32715: PPUSH
32716: CALL_OW 343
// uc_side := 9 ;
32720: LD_ADDR_OWVAR 20
32724: PUSH
32725: LD_INT 9
32727: ST_TO_ADDR
// uc_nation := 2 ;
32728: LD_ADDR_OWVAR 21
32732: PUSH
32733: LD_INT 2
32735: ST_TO_ADDR
// hc_name := Dark Warrior ;
32736: LD_ADDR_OWVAR 26
32740: PUSH
32741: LD_STRING Dark Warrior
32743: ST_TO_ADDR
// hc_gallery :=  ;
32744: LD_ADDR_OWVAR 33
32748: PUSH
32749: LD_STRING 
32751: ST_TO_ADDR
// hc_noskilllimit := true ;
32752: LD_ADDR_OWVAR 76
32756: PUSH
32757: LD_INT 1
32759: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32760: LD_ADDR_OWVAR 31
32764: PUSH
32765: LD_INT 30
32767: PUSH
32768: LD_INT 30
32770: PUSH
32771: LD_INT 30
32773: PUSH
32774: LD_INT 30
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: ST_TO_ADDR
// un := CreateHuman ;
32783: LD_ADDR_VAR 0 3
32787: PUSH
32788: CALL_OW 44
32792: ST_TO_ADDR
// hc_noskilllimit := false ;
32793: LD_ADDR_OWVAR 76
32797: PUSH
32798: LD_INT 0
32800: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32801: LD_VAR 0 3
32805: PPUSH
32806: LD_INT 1
32808: PPUSH
32809: CALL_OW 51
// ToLua ( playRanger() ) ;
32813: LD_STRING playRanger()
32815: PPUSH
32816: CALL_OW 559
// p := 0 ;
32820: LD_ADDR_VAR 0 2
32824: PUSH
32825: LD_INT 0
32827: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32828: LD_INT 35
32830: PPUSH
32831: CALL_OW 67
// p := p + 1 ;
32835: LD_ADDR_VAR 0 2
32839: PUSH
32840: LD_VAR 0 2
32844: PUSH
32845: LD_INT 1
32847: PLUS
32848: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32849: LD_VAR 0 3
32853: PPUSH
32854: CALL_OW 256
32858: PUSH
32859: LD_INT 1000
32861: LESS
32862: IFFALSE 32876
// SetLives ( un , 1000 ) ;
32864: LD_VAR 0 3
32868: PPUSH
32869: LD_INT 1000
32871: PPUSH
32872: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32876: LD_VAR 0 3
32880: PPUSH
32881: LD_INT 81
32883: PUSH
32884: LD_OWVAR 2
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 91
32895: PUSH
32896: LD_VAR 0 3
32900: PUSH
32901: LD_INT 30
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PPUSH
32913: CALL_OW 69
32917: PPUSH
32918: LD_VAR 0 3
32922: PPUSH
32923: CALL_OW 74
32927: PPUSH
32928: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32932: LD_VAR 0 2
32936: PUSH
32937: LD_INT 80
32939: GREATER
32940: IFTRUE 32953
32942: PUSH
32943: LD_VAR 0 3
32947: PPUSH
32948: CALL_OW 301
32952: OR
32953: IFFALSE 32828
// if un then
32955: LD_VAR 0 3
32959: IFFALSE 32970
// RemoveUnit ( un ) ;
32961: LD_VAR 0 3
32965: PPUSH
32966: CALL_OW 64
// end ;
32970: PPOPN 3
32972: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32973: LD_EXP 92
32977: IFFALSE 33093
32979: GO 32981
32981: DISABLE
32982: LD_INT 0
32984: PPUSH
32985: PPUSH
32986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32987: LD_ADDR_VAR 0 2
32991: PUSH
32992: LD_INT 81
32994: PUSH
32995: LD_OWVAR 2
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 21
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PPUSH
33018: CALL_OW 69
33022: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33023: LD_STRING playComputer()
33025: PPUSH
33026: CALL_OW 559
// if not tmp then
33030: LD_VAR 0 2
33034: NOT
33035: IFFALSE 33039
// exit ;
33037: GO 33093
// for i in tmp do
33039: LD_ADDR_VAR 0 1
33043: PUSH
33044: LD_VAR 0 2
33048: PUSH
33049: FOR_IN
33050: IFFALSE 33091
// for j := 1 to 4 do
33052: LD_ADDR_VAR 0 3
33056: PUSH
33057: DOUBLE
33058: LD_INT 1
33060: DEC
33061: ST_TO_ADDR
33062: LD_INT 4
33064: PUSH
33065: FOR_TO
33066: IFFALSE 33087
// SetSkill ( i , j , 10 ) ;
33068: LD_VAR 0 1
33072: PPUSH
33073: LD_VAR 0 3
33077: PPUSH
33078: LD_INT 10
33080: PPUSH
33081: CALL_OW 237
33085: GO 33065
33087: POP
33088: POP
33089: GO 33049
33091: POP
33092: POP
// end ;
33093: PPOPN 3
33095: END
// every 0 0$1 trigger s30 do var i , tmp ;
33096: LD_EXP 93
33100: IFFALSE 33169
33102: GO 33104
33104: DISABLE
33105: LD_INT 0
33107: PPUSH
33108: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33109: LD_ADDR_VAR 0 2
33113: PUSH
33114: LD_INT 22
33116: PUSH
33117: LD_OWVAR 2
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PPUSH
33126: CALL_OW 69
33130: ST_TO_ADDR
// if not tmp then
33131: LD_VAR 0 2
33135: NOT
33136: IFFALSE 33140
// exit ;
33138: GO 33169
// for i in tmp do
33140: LD_ADDR_VAR 0 1
33144: PUSH
33145: LD_VAR 0 2
33149: PUSH
33150: FOR_IN
33151: IFFALSE 33167
// SetLives ( i , 300 ) ;
33153: LD_VAR 0 1
33157: PPUSH
33158: LD_INT 300
33160: PPUSH
33161: CALL_OW 234
33165: GO 33150
33167: POP
33168: POP
// end ;
33169: PPOPN 2
33171: END
// every 0 0$1 trigger s60 do var i , tmp ;
33172: LD_EXP 94
33176: IFFALSE 33245
33178: GO 33180
33180: DISABLE
33181: LD_INT 0
33183: PPUSH
33184: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33185: LD_ADDR_VAR 0 2
33189: PUSH
33190: LD_INT 22
33192: PUSH
33193: LD_OWVAR 2
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PPUSH
33202: CALL_OW 69
33206: ST_TO_ADDR
// if not tmp then
33207: LD_VAR 0 2
33211: NOT
33212: IFFALSE 33216
// exit ;
33214: GO 33245
// for i in tmp do
33216: LD_ADDR_VAR 0 1
33220: PUSH
33221: LD_VAR 0 2
33225: PUSH
33226: FOR_IN
33227: IFFALSE 33243
// SetLives ( i , 600 ) ;
33229: LD_VAR 0 1
33233: PPUSH
33234: LD_INT 600
33236: PPUSH
33237: CALL_OW 234
33241: GO 33226
33243: POP
33244: POP
// end ;
33245: PPOPN 2
33247: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33248: LD_INT 0
33250: PPUSH
// case cmd of 301 :
33251: LD_VAR 0 1
33255: PUSH
33256: LD_INT 301
33258: DOUBLE
33259: EQUAL
33260: IFTRUE 33264
33262: GO 33296
33264: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33265: LD_VAR 0 6
33269: PPUSH
33270: LD_VAR 0 7
33274: PPUSH
33275: LD_VAR 0 8
33279: PPUSH
33280: LD_VAR 0 4
33284: PPUSH
33285: LD_VAR 0 5
33289: PPUSH
33290: CALL 34509 0 5
33294: GO 33417
33296: LD_INT 302
33298: DOUBLE
33299: EQUAL
33300: IFTRUE 33304
33302: GO 33341
33304: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33305: LD_VAR 0 6
33309: PPUSH
33310: LD_VAR 0 7
33314: PPUSH
33315: LD_VAR 0 8
33319: PPUSH
33320: LD_VAR 0 9
33324: PPUSH
33325: LD_VAR 0 4
33329: PPUSH
33330: LD_VAR 0 5
33334: PPUSH
33335: CALL 34600 0 6
33339: GO 33417
33341: LD_INT 303
33343: DOUBLE
33344: EQUAL
33345: IFTRUE 33349
33347: GO 33386
33349: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33350: LD_VAR 0 6
33354: PPUSH
33355: LD_VAR 0 7
33359: PPUSH
33360: LD_VAR 0 8
33364: PPUSH
33365: LD_VAR 0 9
33369: PPUSH
33370: LD_VAR 0 4
33374: PPUSH
33375: LD_VAR 0 5
33379: PPUSH
33380: CALL 33422 0 6
33384: GO 33417
33386: LD_INT 304
33388: DOUBLE
33389: EQUAL
33390: IFTRUE 33394
33392: GO 33416
33394: POP
// hHackTeleport ( unit , x , y ) ; end ;
33395: LD_VAR 0 2
33399: PPUSH
33400: LD_VAR 0 4
33404: PPUSH
33405: LD_VAR 0 5
33409: PPUSH
33410: CALL 35193 0 3
33414: GO 33417
33416: POP
// end ;
33417: LD_VAR 0 12
33421: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33422: LD_INT 0
33424: PPUSH
33425: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33426: LD_VAR 0 1
33430: PUSH
33431: LD_INT 1
33433: LESS
33434: IFTRUE 33446
33436: PUSH
33437: LD_VAR 0 1
33441: PUSH
33442: LD_INT 3
33444: GREATER
33445: OR
33446: IFTRUE 33464
33448: PUSH
33449: LD_VAR 0 5
33453: PPUSH
33454: LD_VAR 0 6
33458: PPUSH
33459: CALL_OW 428
33463: OR
33464: IFFALSE 33468
// exit ;
33466: GO 34196
// uc_side := your_side ;
33468: LD_ADDR_OWVAR 20
33472: PUSH
33473: LD_OWVAR 2
33477: ST_TO_ADDR
// uc_nation := nation ;
33478: LD_ADDR_OWVAR 21
33482: PUSH
33483: LD_VAR 0 1
33487: ST_TO_ADDR
// bc_level = 1 ;
33488: LD_ADDR_OWVAR 43
33492: PUSH
33493: LD_INT 1
33495: ST_TO_ADDR
// case btype of 1 :
33496: LD_VAR 0 2
33500: PUSH
33501: LD_INT 1
33503: DOUBLE
33504: EQUAL
33505: IFTRUE 33509
33507: GO 33520
33509: POP
// bc_type := b_depot ; 2 :
33510: LD_ADDR_OWVAR 42
33514: PUSH
33515: LD_INT 0
33517: ST_TO_ADDR
33518: GO 34140
33520: LD_INT 2
33522: DOUBLE
33523: EQUAL
33524: IFTRUE 33528
33526: GO 33539
33528: POP
// bc_type := b_warehouse ; 3 :
33529: LD_ADDR_OWVAR 42
33533: PUSH
33534: LD_INT 1
33536: ST_TO_ADDR
33537: GO 34140
33539: LD_INT 3
33541: DOUBLE
33542: EQUAL
33543: IFTRUE 33547
33545: GO 33558
33547: POP
// bc_type := b_lab ; 4 .. 9 :
33548: LD_ADDR_OWVAR 42
33552: PUSH
33553: LD_INT 6
33555: ST_TO_ADDR
33556: GO 34140
33558: LD_INT 4
33560: DOUBLE
33561: GREATEREQUAL
33562: IFFALSE 33570
33564: LD_INT 9
33566: DOUBLE
33567: LESSEQUAL
33568: IFTRUE 33572
33570: GO 33632
33572: POP
// begin bc_type := b_lab_half ;
33573: LD_ADDR_OWVAR 42
33577: PUSH
33578: LD_INT 7
33580: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33581: LD_ADDR_OWVAR 44
33585: PUSH
33586: LD_INT 10
33588: PUSH
33589: LD_INT 11
33591: PUSH
33592: LD_INT 12
33594: PUSH
33595: LD_INT 15
33597: PUSH
33598: LD_INT 14
33600: PUSH
33601: LD_INT 13
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: PUSH
33612: LD_VAR 0 2
33616: PUSH
33617: LD_INT 3
33619: MINUS
33620: ARRAY
33621: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33622: LD_ADDR_OWVAR 45
33626: PUSH
33627: LD_INT 9
33629: ST_TO_ADDR
// end ; 10 .. 13 :
33630: GO 34140
33632: LD_INT 10
33634: DOUBLE
33635: GREATEREQUAL
33636: IFFALSE 33644
33638: LD_INT 13
33640: DOUBLE
33641: LESSEQUAL
33642: IFTRUE 33646
33644: GO 33723
33646: POP
// begin bc_type := b_lab_full ;
33647: LD_ADDR_OWVAR 42
33651: PUSH
33652: LD_INT 8
33654: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33655: LD_ADDR_OWVAR 44
33659: PUSH
33660: LD_INT 10
33662: PUSH
33663: LD_INT 12
33665: PUSH
33666: LD_INT 14
33668: PUSH
33669: LD_INT 13
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: PUSH
33678: LD_VAR 0 2
33682: PUSH
33683: LD_INT 9
33685: MINUS
33686: ARRAY
33687: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33688: LD_ADDR_OWVAR 45
33692: PUSH
33693: LD_INT 11
33695: PUSH
33696: LD_INT 15
33698: PUSH
33699: LD_INT 12
33701: PUSH
33702: LD_INT 15
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: PUSH
33711: LD_VAR 0 2
33715: PUSH
33716: LD_INT 9
33718: MINUS
33719: ARRAY
33720: ST_TO_ADDR
// end ; 14 :
33721: GO 34140
33723: LD_INT 14
33725: DOUBLE
33726: EQUAL
33727: IFTRUE 33731
33729: GO 33742
33731: POP
// bc_type := b_workshop ; 15 :
33732: LD_ADDR_OWVAR 42
33736: PUSH
33737: LD_INT 2
33739: ST_TO_ADDR
33740: GO 34140
33742: LD_INT 15
33744: DOUBLE
33745: EQUAL
33746: IFTRUE 33750
33748: GO 33761
33750: POP
// bc_type := b_factory ; 16 :
33751: LD_ADDR_OWVAR 42
33755: PUSH
33756: LD_INT 3
33758: ST_TO_ADDR
33759: GO 34140
33761: LD_INT 16
33763: DOUBLE
33764: EQUAL
33765: IFTRUE 33769
33767: GO 33780
33769: POP
// bc_type := b_ext_gun ; 17 :
33770: LD_ADDR_OWVAR 42
33774: PUSH
33775: LD_INT 17
33777: ST_TO_ADDR
33778: GO 34140
33780: LD_INT 17
33782: DOUBLE
33783: EQUAL
33784: IFTRUE 33788
33786: GO 33816
33788: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33789: LD_ADDR_OWVAR 42
33793: PUSH
33794: LD_INT 19
33796: PUSH
33797: LD_INT 23
33799: PUSH
33800: LD_INT 19
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: LIST
33807: PUSH
33808: LD_VAR 0 1
33812: ARRAY
33813: ST_TO_ADDR
33814: GO 34140
33816: LD_INT 18
33818: DOUBLE
33819: EQUAL
33820: IFTRUE 33824
33822: GO 33835
33824: POP
// bc_type := b_ext_radar ; 19 :
33825: LD_ADDR_OWVAR 42
33829: PUSH
33830: LD_INT 20
33832: ST_TO_ADDR
33833: GO 34140
33835: LD_INT 19
33837: DOUBLE
33838: EQUAL
33839: IFTRUE 33843
33841: GO 33854
33843: POP
// bc_type := b_ext_radio ; 20 :
33844: LD_ADDR_OWVAR 42
33848: PUSH
33849: LD_INT 22
33851: ST_TO_ADDR
33852: GO 34140
33854: LD_INT 20
33856: DOUBLE
33857: EQUAL
33858: IFTRUE 33862
33860: GO 33873
33862: POP
// bc_type := b_ext_siberium ; 21 :
33863: LD_ADDR_OWVAR 42
33867: PUSH
33868: LD_INT 21
33870: ST_TO_ADDR
33871: GO 34140
33873: LD_INT 21
33875: DOUBLE
33876: EQUAL
33877: IFTRUE 33881
33879: GO 33892
33881: POP
// bc_type := b_ext_computer ; 22 :
33882: LD_ADDR_OWVAR 42
33886: PUSH
33887: LD_INT 24
33889: ST_TO_ADDR
33890: GO 34140
33892: LD_INT 22
33894: DOUBLE
33895: EQUAL
33896: IFTRUE 33900
33898: GO 33911
33900: POP
// bc_type := b_ext_track ; 23 :
33901: LD_ADDR_OWVAR 42
33905: PUSH
33906: LD_INT 16
33908: ST_TO_ADDR
33909: GO 34140
33911: LD_INT 23
33913: DOUBLE
33914: EQUAL
33915: IFTRUE 33919
33917: GO 33930
33919: POP
// bc_type := b_ext_laser ; 24 :
33920: LD_ADDR_OWVAR 42
33924: PUSH
33925: LD_INT 25
33927: ST_TO_ADDR
33928: GO 34140
33930: LD_INT 24
33932: DOUBLE
33933: EQUAL
33934: IFTRUE 33938
33936: GO 33949
33938: POP
// bc_type := b_control_tower ; 25 :
33939: LD_ADDR_OWVAR 42
33943: PUSH
33944: LD_INT 36
33946: ST_TO_ADDR
33947: GO 34140
33949: LD_INT 25
33951: DOUBLE
33952: EQUAL
33953: IFTRUE 33957
33955: GO 33968
33957: POP
// bc_type := b_breastwork ; 26 :
33958: LD_ADDR_OWVAR 42
33962: PUSH
33963: LD_INT 31
33965: ST_TO_ADDR
33966: GO 34140
33968: LD_INT 26
33970: DOUBLE
33971: EQUAL
33972: IFTRUE 33976
33974: GO 33987
33976: POP
// bc_type := b_bunker ; 27 :
33977: LD_ADDR_OWVAR 42
33981: PUSH
33982: LD_INT 32
33984: ST_TO_ADDR
33985: GO 34140
33987: LD_INT 27
33989: DOUBLE
33990: EQUAL
33991: IFTRUE 33995
33993: GO 34006
33995: POP
// bc_type := b_turret ; 28 :
33996: LD_ADDR_OWVAR 42
34000: PUSH
34001: LD_INT 33
34003: ST_TO_ADDR
34004: GO 34140
34006: LD_INT 28
34008: DOUBLE
34009: EQUAL
34010: IFTRUE 34014
34012: GO 34025
34014: POP
// bc_type := b_armoury ; 29 :
34015: LD_ADDR_OWVAR 42
34019: PUSH
34020: LD_INT 4
34022: ST_TO_ADDR
34023: GO 34140
34025: LD_INT 29
34027: DOUBLE
34028: EQUAL
34029: IFTRUE 34033
34031: GO 34044
34033: POP
// bc_type := b_barracks ; 30 :
34034: LD_ADDR_OWVAR 42
34038: PUSH
34039: LD_INT 5
34041: ST_TO_ADDR
34042: GO 34140
34044: LD_INT 30
34046: DOUBLE
34047: EQUAL
34048: IFTRUE 34052
34050: GO 34063
34052: POP
// bc_type := b_solar_power ; 31 :
34053: LD_ADDR_OWVAR 42
34057: PUSH
34058: LD_INT 27
34060: ST_TO_ADDR
34061: GO 34140
34063: LD_INT 31
34065: DOUBLE
34066: EQUAL
34067: IFTRUE 34071
34069: GO 34082
34071: POP
// bc_type := b_oil_power ; 32 :
34072: LD_ADDR_OWVAR 42
34076: PUSH
34077: LD_INT 26
34079: ST_TO_ADDR
34080: GO 34140
34082: LD_INT 32
34084: DOUBLE
34085: EQUAL
34086: IFTRUE 34090
34088: GO 34101
34090: POP
// bc_type := b_siberite_power ; 33 :
34091: LD_ADDR_OWVAR 42
34095: PUSH
34096: LD_INT 28
34098: ST_TO_ADDR
34099: GO 34140
34101: LD_INT 33
34103: DOUBLE
34104: EQUAL
34105: IFTRUE 34109
34107: GO 34120
34109: POP
// bc_type := b_oil_mine ; 34 :
34110: LD_ADDR_OWVAR 42
34114: PUSH
34115: LD_INT 29
34117: ST_TO_ADDR
34118: GO 34140
34120: LD_INT 34
34122: DOUBLE
34123: EQUAL
34124: IFTRUE 34128
34126: GO 34139
34128: POP
// bc_type := b_siberite_mine ; end ;
34129: LD_ADDR_OWVAR 42
34133: PUSH
34134: LD_INT 30
34136: ST_TO_ADDR
34137: GO 34140
34139: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34140: LD_ADDR_VAR 0 8
34144: PUSH
34145: LD_VAR 0 5
34149: PPUSH
34150: LD_VAR 0 6
34154: PPUSH
34155: LD_VAR 0 3
34159: PPUSH
34160: CALL_OW 47
34164: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34165: LD_OWVAR 42
34169: PUSH
34170: LD_INT 32
34172: PUSH
34173: LD_INT 33
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: IN
34180: IFFALSE 34196
// PlaceWeaponTurret ( b , weapon ) ;
34182: LD_VAR 0 8
34186: PPUSH
34187: LD_VAR 0 4
34191: PPUSH
34192: CALL_OW 431
// end ;
34196: LD_VAR 0 7
34200: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34201: LD_INT 0
34203: PPUSH
34204: PPUSH
34205: PPUSH
34206: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34207: LD_ADDR_VAR 0 4
34211: PUSH
34212: LD_INT 22
34214: PUSH
34215: LD_OWVAR 2
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 2
34226: PUSH
34227: LD_INT 30
34229: PUSH
34230: LD_INT 0
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 30
34239: PUSH
34240: LD_INT 1
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: LIST
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PPUSH
34256: CALL_OW 69
34260: ST_TO_ADDR
// if not tmp then
34261: LD_VAR 0 4
34265: NOT
34266: IFFALSE 34270
// exit ;
34268: GO 34329
// for i in tmp do
34270: LD_ADDR_VAR 0 2
34274: PUSH
34275: LD_VAR 0 4
34279: PUSH
34280: FOR_IN
34281: IFFALSE 34327
// for j = 1 to 3 do
34283: LD_ADDR_VAR 0 3
34287: PUSH
34288: DOUBLE
34289: LD_INT 1
34291: DEC
34292: ST_TO_ADDR
34293: LD_INT 3
34295: PUSH
34296: FOR_TO
34297: IFFALSE 34323
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34299: LD_VAR 0 2
34303: PPUSH
34304: CALL_OW 274
34308: PPUSH
34309: LD_VAR 0 3
34313: PPUSH
34314: LD_INT 99999
34316: PPUSH
34317: CALL_OW 277
34321: GO 34296
34323: POP
34324: POP
34325: GO 34280
34327: POP
34328: POP
// end ;
34329: LD_VAR 0 1
34333: RET
// export function hHackSetLevel10 ; var i , j ; begin
34334: LD_INT 0
34336: PPUSH
34337: PPUSH
34338: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34339: LD_ADDR_VAR 0 2
34343: PUSH
34344: LD_INT 21
34346: PUSH
34347: LD_INT 1
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PPUSH
34354: CALL_OW 69
34358: PUSH
34359: FOR_IN
34360: IFFALSE 34412
// if IsSelected ( i ) then
34362: LD_VAR 0 2
34366: PPUSH
34367: CALL_OW 306
34371: IFFALSE 34410
// begin for j := 1 to 4 do
34373: LD_ADDR_VAR 0 3
34377: PUSH
34378: DOUBLE
34379: LD_INT 1
34381: DEC
34382: ST_TO_ADDR
34383: LD_INT 4
34385: PUSH
34386: FOR_TO
34387: IFFALSE 34408
// SetSkill ( i , j , 10 ) ;
34389: LD_VAR 0 2
34393: PPUSH
34394: LD_VAR 0 3
34398: PPUSH
34399: LD_INT 10
34401: PPUSH
34402: CALL_OW 237
34406: GO 34386
34408: POP
34409: POP
// end ;
34410: GO 34359
34412: POP
34413: POP
// end ;
34414: LD_VAR 0 1
34418: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34419: LD_INT 0
34421: PPUSH
34422: PPUSH
34423: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34424: LD_ADDR_VAR 0 2
34428: PUSH
34429: LD_INT 22
34431: PUSH
34432: LD_OWVAR 2
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 21
34443: PUSH
34444: LD_INT 1
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PPUSH
34455: CALL_OW 69
34459: PUSH
34460: FOR_IN
34461: IFFALSE 34502
// begin for j := 1 to 4 do
34463: LD_ADDR_VAR 0 3
34467: PUSH
34468: DOUBLE
34469: LD_INT 1
34471: DEC
34472: ST_TO_ADDR
34473: LD_INT 4
34475: PUSH
34476: FOR_TO
34477: IFFALSE 34498
// SetSkill ( i , j , 10 ) ;
34479: LD_VAR 0 2
34483: PPUSH
34484: LD_VAR 0 3
34488: PPUSH
34489: LD_INT 10
34491: PPUSH
34492: CALL_OW 237
34496: GO 34476
34498: POP
34499: POP
// end ;
34500: GO 34460
34502: POP
34503: POP
// end ;
34504: LD_VAR 0 1
34508: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34509: LD_INT 0
34511: PPUSH
// uc_side := your_side ;
34512: LD_ADDR_OWVAR 20
34516: PUSH
34517: LD_OWVAR 2
34521: ST_TO_ADDR
// uc_nation := nation ;
34522: LD_ADDR_OWVAR 21
34526: PUSH
34527: LD_VAR 0 1
34531: ST_TO_ADDR
// InitHc ;
34532: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34536: LD_INT 0
34538: PPUSH
34539: LD_VAR 0 2
34543: PPUSH
34544: LD_VAR 0 3
34548: PPUSH
34549: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34553: LD_VAR 0 4
34557: PPUSH
34558: LD_VAR 0 5
34562: PPUSH
34563: CALL_OW 428
34567: PUSH
34568: LD_INT 0
34570: EQUAL
34571: IFFALSE 34595
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34573: CALL_OW 44
34577: PPUSH
34578: LD_VAR 0 4
34582: PPUSH
34583: LD_VAR 0 5
34587: PPUSH
34588: LD_INT 1
34590: PPUSH
34591: CALL_OW 48
// end ;
34595: LD_VAR 0 6
34599: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34600: LD_INT 0
34602: PPUSH
34603: PPUSH
// uc_side := your_side ;
34604: LD_ADDR_OWVAR 20
34608: PUSH
34609: LD_OWVAR 2
34613: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34614: LD_VAR 0 1
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: LD_INT 2
34624: PUSH
34625: LD_INT 3
34627: PUSH
34628: LD_INT 4
34630: PUSH
34631: LD_INT 5
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: IN
34641: IFFALSE 34653
// uc_nation := nation_american else
34643: LD_ADDR_OWVAR 21
34647: PUSH
34648: LD_INT 1
34650: ST_TO_ADDR
34651: GO 34696
// if chassis in [ 11 , 12 , 13 , 14 ] then
34653: LD_VAR 0 1
34657: PUSH
34658: LD_INT 11
34660: PUSH
34661: LD_INT 12
34663: PUSH
34664: LD_INT 13
34666: PUSH
34667: LD_INT 14
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: IN
34676: IFFALSE 34688
// uc_nation := nation_arabian else
34678: LD_ADDR_OWVAR 21
34682: PUSH
34683: LD_INT 2
34685: ST_TO_ADDR
34686: GO 34696
// uc_nation := nation_russian ;
34688: LD_ADDR_OWVAR 21
34692: PUSH
34693: LD_INT 3
34695: ST_TO_ADDR
// vc_chassis := chassis ;
34696: LD_ADDR_OWVAR 37
34700: PUSH
34701: LD_VAR 0 1
34705: ST_TO_ADDR
// vc_engine := engine ;
34706: LD_ADDR_OWVAR 39
34710: PUSH
34711: LD_VAR 0 2
34715: ST_TO_ADDR
// vc_control := control ;
34716: LD_ADDR_OWVAR 38
34720: PUSH
34721: LD_VAR 0 3
34725: ST_TO_ADDR
// vc_weapon := weapon ;
34726: LD_ADDR_OWVAR 40
34730: PUSH
34731: LD_VAR 0 4
34735: ST_TO_ADDR
// un := CreateVehicle ;
34736: LD_ADDR_VAR 0 8
34740: PUSH
34741: CALL_OW 45
34745: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34746: LD_VAR 0 8
34750: PPUSH
34751: LD_INT 0
34753: PPUSH
34754: LD_INT 5
34756: PPUSH
34757: CALL_OW 12
34761: PPUSH
34762: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34766: LD_VAR 0 8
34770: PPUSH
34771: LD_VAR 0 5
34775: PPUSH
34776: LD_VAR 0 6
34780: PPUSH
34781: LD_INT 1
34783: PPUSH
34784: CALL_OW 48
// end ;
34788: LD_VAR 0 7
34792: RET
// export hInvincible ; every 1 do
34793: GO 34795
34795: DISABLE
// hInvincible := [ ] ;
34796: LD_ADDR_EXP 95
34800: PUSH
34801: EMPTY
34802: ST_TO_ADDR
34803: END
// every 10 do var i ;
34804: GO 34806
34806: DISABLE
34807: LD_INT 0
34809: PPUSH
// begin enable ;
34810: ENABLE
// if not hInvincible then
34811: LD_EXP 95
34815: NOT
34816: IFFALSE 34820
// exit ;
34818: GO 34864
// for i in hInvincible do
34820: LD_ADDR_VAR 0 1
34824: PUSH
34825: LD_EXP 95
34829: PUSH
34830: FOR_IN
34831: IFFALSE 34862
// if GetLives ( i ) < 1000 then
34833: LD_VAR 0 1
34837: PPUSH
34838: CALL_OW 256
34842: PUSH
34843: LD_INT 1000
34845: LESS
34846: IFFALSE 34860
// SetLives ( i , 1000 ) ;
34848: LD_VAR 0 1
34852: PPUSH
34853: LD_INT 1000
34855: PPUSH
34856: CALL_OW 234
34860: GO 34830
34862: POP
34863: POP
// end ;
34864: PPOPN 1
34866: END
// export function hHackInvincible ; var i ; begin
34867: LD_INT 0
34869: PPUSH
34870: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34871: LD_ADDR_VAR 0 2
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: LD_INT 21
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 21
34891: PUSH
34892: LD_INT 2
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: PPUSH
34904: CALL_OW 69
34908: PUSH
34909: FOR_IN
34910: IFFALSE 34971
// if IsSelected ( i ) then
34912: LD_VAR 0 2
34916: PPUSH
34917: CALL_OW 306
34921: IFFALSE 34969
// begin if i in hInvincible then
34923: LD_VAR 0 2
34927: PUSH
34928: LD_EXP 95
34932: IN
34933: IFFALSE 34953
// hInvincible := hInvincible diff i else
34935: LD_ADDR_EXP 95
34939: PUSH
34940: LD_EXP 95
34944: PUSH
34945: LD_VAR 0 2
34949: DIFF
34950: ST_TO_ADDR
34951: GO 34969
// hInvincible := hInvincible union i ;
34953: LD_ADDR_EXP 95
34957: PUSH
34958: LD_EXP 95
34962: PUSH
34963: LD_VAR 0 2
34967: UNION
34968: ST_TO_ADDR
// end ;
34969: GO 34909
34971: POP
34972: POP
// end ;
34973: LD_VAR 0 1
34977: RET
// export function hHackInvisible ; var i , j ; begin
34978: LD_INT 0
34980: PPUSH
34981: PPUSH
34982: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34983: LD_ADDR_VAR 0 2
34987: PUSH
34988: LD_INT 21
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PPUSH
34998: CALL_OW 69
35002: PUSH
35003: FOR_IN
35004: IFFALSE 35028
// if IsSelected ( i ) then
35006: LD_VAR 0 2
35010: PPUSH
35011: CALL_OW 306
35015: IFFALSE 35026
// ComForceInvisible ( i ) ;
35017: LD_VAR 0 2
35021: PPUSH
35022: CALL_OW 496
35026: GO 35003
35028: POP
35029: POP
// end ;
35030: LD_VAR 0 1
35034: RET
// export function hHackChangeYourSide ; begin
35035: LD_INT 0
35037: PPUSH
// if your_side = 8 then
35038: LD_OWVAR 2
35042: PUSH
35043: LD_INT 8
35045: EQUAL
35046: IFFALSE 35058
// your_side := 0 else
35048: LD_ADDR_OWVAR 2
35052: PUSH
35053: LD_INT 0
35055: ST_TO_ADDR
35056: GO 35072
// your_side := your_side + 1 ;
35058: LD_ADDR_OWVAR 2
35062: PUSH
35063: LD_OWVAR 2
35067: PUSH
35068: LD_INT 1
35070: PLUS
35071: ST_TO_ADDR
// end ;
35072: LD_VAR 0 1
35076: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35077: LD_INT 0
35079: PPUSH
35080: PPUSH
35081: PPUSH
// for i in all_units do
35082: LD_ADDR_VAR 0 2
35086: PUSH
35087: LD_OWVAR 3
35091: PUSH
35092: FOR_IN
35093: IFFALSE 35171
// if IsSelected ( i ) then
35095: LD_VAR 0 2
35099: PPUSH
35100: CALL_OW 306
35104: IFFALSE 35169
// begin j := GetSide ( i ) ;
35106: LD_ADDR_VAR 0 3
35110: PUSH
35111: LD_VAR 0 2
35115: PPUSH
35116: CALL_OW 255
35120: ST_TO_ADDR
// if j = 8 then
35121: LD_VAR 0 3
35125: PUSH
35126: LD_INT 8
35128: EQUAL
35129: IFFALSE 35141
// j := 0 else
35131: LD_ADDR_VAR 0 3
35135: PUSH
35136: LD_INT 0
35138: ST_TO_ADDR
35139: GO 35155
// j := j + 1 ;
35141: LD_ADDR_VAR 0 3
35145: PUSH
35146: LD_VAR 0 3
35150: PUSH
35151: LD_INT 1
35153: PLUS
35154: ST_TO_ADDR
// SetSide ( i , j ) ;
35155: LD_VAR 0 2
35159: PPUSH
35160: LD_VAR 0 3
35164: PPUSH
35165: CALL_OW 235
// end ;
35169: GO 35092
35171: POP
35172: POP
// end ;
35173: LD_VAR 0 1
35177: RET
// export function hHackFog ; begin
35178: LD_INT 0
35180: PPUSH
// FogOff ( true ) ;
35181: LD_INT 1
35183: PPUSH
35184: CALL_OW 344
// end ;
35188: LD_VAR 0 1
35192: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35193: LD_INT 0
35195: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35196: LD_VAR 0 1
35200: PPUSH
35201: LD_VAR 0 2
35205: PPUSH
35206: LD_VAR 0 3
35210: PPUSH
35211: LD_INT 1
35213: PPUSH
35214: LD_INT 1
35216: PPUSH
35217: CALL_OW 483
// CenterOnXY ( x , y ) ;
35221: LD_VAR 0 2
35225: PPUSH
35226: LD_VAR 0 3
35230: PPUSH
35231: CALL_OW 84
// end ;
35235: LD_VAR 0 4
35239: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35240: LD_INT 0
35242: PPUSH
35243: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35244: LD_VAR 0 1
35248: NOT
35249: IFTRUE 35268
35251: PUSH
35252: LD_VAR 0 2
35256: PPUSH
35257: LD_VAR 0 3
35261: PPUSH
35262: CALL_OW 488
35266: NOT
35267: OR
35268: IFTRUE 35303
35270: PUSH
35271: LD_VAR 0 1
35275: PPUSH
35276: CALL_OW 266
35280: PUSH
35281: LD_INT 3
35283: NONEQUAL
35284: IFFALSE 35302
35286: PUSH
35287: LD_VAR 0 1
35291: PPUSH
35292: CALL_OW 247
35296: PUSH
35297: LD_INT 1
35299: EQUAL
35300: NOT
35301: AND
35302: OR
35303: IFFALSE 35307
// exit ;
35305: GO 35589
// if GetType ( factory ) = unit_human then
35307: LD_VAR 0 1
35311: PPUSH
35312: CALL_OW 247
35316: PUSH
35317: LD_INT 1
35319: EQUAL
35320: IFFALSE 35337
// factory := IsInUnit ( factory ) ;
35322: LD_ADDR_VAR 0 1
35326: PUSH
35327: LD_VAR 0 1
35331: PPUSH
35332: CALL_OW 310
35336: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35337: LD_VAR 0 1
35341: PPUSH
35342: CALL_OW 266
35346: PUSH
35347: LD_INT 3
35349: NONEQUAL
35350: IFFALSE 35354
// exit ;
35352: GO 35589
// for i := 1 to Count ( factoryWaypoints ) do
35354: LD_ADDR_VAR 0 5
35358: PUSH
35359: DOUBLE
35360: LD_INT 1
35362: DEC
35363: ST_TO_ADDR
35364: LD_EXP 96
35368: PPUSH
35369: CALL 45393 0 1
35373: PUSH
35374: FOR_TO
35375: IFFALSE 35537
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
35377: LD_VAR 0 2
35381: PPUSH
35382: LD_VAR 0 3
35386: PPUSH
35387: CALL_OW 428
35391: PUSH
35392: LD_EXP 96
35396: PUSH
35397: LD_VAR 0 5
35401: ARRAY
35402: PUSH
35403: LD_INT 2
35405: ARRAY
35406: EQUAL
35407: IFFALSE 35439
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35409: LD_ADDR_EXP 96
35413: PUSH
35414: LD_EXP 96
35418: PPUSH
35419: LD_VAR 0 5
35423: PPUSH
35424: CALL_OW 3
35428: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35429: CALL 35594 0 0
// exit ;
35433: POP
35434: POP
35435: GO 35589
// end else
35437: GO 35535
// if factory = factoryWaypoints [ i ] [ 2 ] then
35439: LD_VAR 0 1
35443: PUSH
35444: LD_EXP 96
35448: PUSH
35449: LD_VAR 0 5
35453: ARRAY
35454: PUSH
35455: LD_INT 2
35457: ARRAY
35458: EQUAL
35459: IFFALSE 35535
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
35461: LD_ADDR_EXP 96
35465: PUSH
35466: LD_EXP 96
35470: PPUSH
35471: LD_VAR 0 5
35475: PPUSH
35476: CALL_OW 3
35480: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35481: LD_ADDR_EXP 96
35485: PUSH
35486: LD_EXP 96
35490: PPUSH
35491: LD_VAR 0 1
35495: PPUSH
35496: CALL_OW 255
35500: PUSH
35501: LD_VAR 0 1
35505: PUSH
35506: LD_VAR 0 2
35510: PUSH
35511: LD_VAR 0 3
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: PPUSH
35522: CALL 81369 0 2
35526: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35527: CALL 35594 0 0
// exit ;
35531: POP
35532: POP
35533: GO 35589
// end ; end ;
35535: GO 35374
35537: POP
35538: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
35539: LD_ADDR_EXP 96
35543: PUSH
35544: LD_EXP 96
35548: PPUSH
35549: LD_VAR 0 1
35553: PPUSH
35554: CALL_OW 255
35558: PUSH
35559: LD_VAR 0 1
35563: PUSH
35564: LD_VAR 0 2
35568: PUSH
35569: LD_VAR 0 3
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: PPUSH
35580: CALL 81369 0 2
35584: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35585: CALL 35594 0 0
// end ;
35589: LD_VAR 0 4
35593: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35594: LD_INT 0
35596: PPUSH
35597: PPUSH
35598: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35599: LD_STRING resetFactoryWaypoint();
35601: PPUSH
35602: CALL_OW 559
// if factoryWaypoints then
35606: LD_EXP 96
35610: IFFALSE 35731
// begin list := factoryWaypoints ;
35612: LD_ADDR_VAR 0 3
35616: PUSH
35617: LD_EXP 96
35621: ST_TO_ADDR
// for i := 1 to list do
35622: LD_ADDR_VAR 0 2
35626: PUSH
35627: DOUBLE
35628: LD_INT 1
35630: DEC
35631: ST_TO_ADDR
35632: LD_VAR 0 3
35636: PUSH
35637: FOR_TO
35638: IFFALSE 35729
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35640: LD_STRING setFactoryWaypointXY(
35642: PUSH
35643: LD_VAR 0 3
35647: PUSH
35648: LD_VAR 0 2
35652: ARRAY
35653: PUSH
35654: LD_INT 1
35656: ARRAY
35657: STR
35658: PUSH
35659: LD_STRING ,
35661: STR
35662: PUSH
35663: LD_VAR 0 3
35667: PUSH
35668: LD_VAR 0 2
35672: ARRAY
35673: PUSH
35674: LD_INT 2
35676: ARRAY
35677: STR
35678: PUSH
35679: LD_STRING ,
35681: STR
35682: PUSH
35683: LD_VAR 0 3
35687: PUSH
35688: LD_VAR 0 2
35692: ARRAY
35693: PUSH
35694: LD_INT 3
35696: ARRAY
35697: STR
35698: PUSH
35699: LD_STRING ,
35701: STR
35702: PUSH
35703: LD_VAR 0 3
35707: PUSH
35708: LD_VAR 0 2
35712: ARRAY
35713: PUSH
35714: LD_INT 4
35716: ARRAY
35717: STR
35718: PUSH
35719: LD_STRING )
35721: STR
35722: PPUSH
35723: CALL_OW 559
35727: GO 35637
35729: POP
35730: POP
// end ; end ;
35731: LD_VAR 0 1
35735: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35736: LD_INT 0
35738: PPUSH
// if HexInfo ( x , y ) = warehouse then
35739: LD_VAR 0 2
35743: PPUSH
35744: LD_VAR 0 3
35748: PPUSH
35749: CALL_OW 428
35753: PUSH
35754: LD_VAR 0 1
35758: EQUAL
35759: IFFALSE 35786
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35761: LD_ADDR_EXP 98
35765: PUSH
35766: LD_EXP 98
35770: PPUSH
35771: LD_VAR 0 1
35775: PPUSH
35776: LD_INT 0
35778: PPUSH
35779: CALL_OW 1
35783: ST_TO_ADDR
35784: GO 35837
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35786: LD_ADDR_EXP 98
35790: PUSH
35791: LD_EXP 98
35795: PPUSH
35796: LD_VAR 0 1
35800: PPUSH
35801: LD_VAR 0 1
35805: PPUSH
35806: CALL_OW 255
35810: PUSH
35811: LD_VAR 0 1
35815: PUSH
35816: LD_VAR 0 2
35820: PUSH
35821: LD_VAR 0 3
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: PPUSH
35832: CALL_OW 1
35836: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35837: CALL 35846 0 0
// end ;
35841: LD_VAR 0 4
35845: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35846: LD_INT 0
35848: PPUSH
35849: PPUSH
35850: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35851: LD_STRING resetWarehouseGatheringPoints();
35853: PPUSH
35854: CALL_OW 559
// if warehouseGatheringPoints then
35858: LD_EXP 98
35862: IFFALSE 35988
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35864: LD_ADDR_VAR 0 3
35868: PUSH
35869: LD_EXP 98
35873: PPUSH
35874: CALL 85303 0 1
35878: ST_TO_ADDR
// for i := 1 to list do
35879: LD_ADDR_VAR 0 2
35883: PUSH
35884: DOUBLE
35885: LD_INT 1
35887: DEC
35888: ST_TO_ADDR
35889: LD_VAR 0 3
35893: PUSH
35894: FOR_TO
35895: IFFALSE 35986
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35897: LD_STRING setWarehouseGatheringPointXY(
35899: PUSH
35900: LD_VAR 0 3
35904: PUSH
35905: LD_VAR 0 2
35909: ARRAY
35910: PUSH
35911: LD_INT 1
35913: ARRAY
35914: STR
35915: PUSH
35916: LD_STRING ,
35918: STR
35919: PUSH
35920: LD_VAR 0 3
35924: PUSH
35925: LD_VAR 0 2
35929: ARRAY
35930: PUSH
35931: LD_INT 2
35933: ARRAY
35934: STR
35935: PUSH
35936: LD_STRING ,
35938: STR
35939: PUSH
35940: LD_VAR 0 3
35944: PUSH
35945: LD_VAR 0 2
35949: ARRAY
35950: PUSH
35951: LD_INT 3
35953: ARRAY
35954: STR
35955: PUSH
35956: LD_STRING ,
35958: STR
35959: PUSH
35960: LD_VAR 0 3
35964: PUSH
35965: LD_VAR 0 2
35969: ARRAY
35970: PUSH
35971: LD_INT 4
35973: ARRAY
35974: STR
35975: PUSH
35976: LD_STRING )
35978: STR
35979: PPUSH
35980: CALL_OW 559
35984: GO 35894
35986: POP
35987: POP
// end ; end ;
35988: LD_VAR 0 1
35992: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35993: LD_EXP 98
35997: IFFALSE 36692
35999: GO 36001
36001: DISABLE
36002: LD_INT 0
36004: PPUSH
36005: PPUSH
36006: PPUSH
36007: PPUSH
36008: PPUSH
36009: PPUSH
36010: PPUSH
36011: PPUSH
36012: PPUSH
// begin enable ;
36013: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36014: LD_ADDR_VAR 0 3
36018: PUSH
36019: LD_EXP 98
36023: PPUSH
36024: CALL 85303 0 1
36028: ST_TO_ADDR
// if not list then
36029: LD_VAR 0 3
36033: NOT
36034: IFFALSE 36038
// exit ;
36036: GO 36692
// for i := 1 to list do
36038: LD_ADDR_VAR 0 1
36042: PUSH
36043: DOUBLE
36044: LD_INT 1
36046: DEC
36047: ST_TO_ADDR
36048: LD_VAR 0 3
36052: PUSH
36053: FOR_TO
36054: IFFALSE 36690
// begin depot := list [ i ] [ 2 ] ;
36056: LD_ADDR_VAR 0 8
36060: PUSH
36061: LD_VAR 0 3
36065: PUSH
36066: LD_VAR 0 1
36070: ARRAY
36071: PUSH
36072: LD_INT 2
36074: ARRAY
36075: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36076: LD_ADDR_VAR 0 5
36080: PUSH
36081: LD_VAR 0 3
36085: PUSH
36086: LD_VAR 0 1
36090: ARRAY
36091: PUSH
36092: LD_INT 1
36094: ARRAY
36095: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36096: LD_VAR 0 8
36100: PPUSH
36101: CALL_OW 301
36105: IFTRUE 36124
36107: PUSH
36108: LD_VAR 0 5
36112: PUSH
36113: LD_VAR 0 8
36117: PPUSH
36118: CALL_OW 255
36122: NONEQUAL
36123: OR
36124: IFFALSE 36153
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36126: LD_ADDR_EXP 98
36130: PUSH
36131: LD_EXP 98
36135: PPUSH
36136: LD_VAR 0 8
36140: PPUSH
36141: LD_INT 0
36143: PPUSH
36144: CALL_OW 1
36148: ST_TO_ADDR
// exit ;
36149: POP
36150: POP
36151: GO 36692
// end ; x := list [ i ] [ 3 ] ;
36153: LD_ADDR_VAR 0 6
36157: PUSH
36158: LD_VAR 0 3
36162: PUSH
36163: LD_VAR 0 1
36167: ARRAY
36168: PUSH
36169: LD_INT 3
36171: ARRAY
36172: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36173: LD_ADDR_VAR 0 7
36177: PUSH
36178: LD_VAR 0 3
36182: PUSH
36183: LD_VAR 0 1
36187: ARRAY
36188: PUSH
36189: LD_INT 4
36191: ARRAY
36192: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36193: LD_ADDR_VAR 0 9
36197: PUSH
36198: LD_VAR 0 6
36202: PPUSH
36203: LD_VAR 0 7
36207: PPUSH
36208: LD_INT 16
36210: PPUSH
36211: CALL 83877 0 3
36215: ST_TO_ADDR
// if not cratesNearbyPoint then
36216: LD_VAR 0 9
36220: NOT
36221: IFFALSE 36227
// exit ;
36223: POP
36224: POP
36225: GO 36692
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36227: LD_ADDR_VAR 0 4
36231: PUSH
36232: LD_INT 22
36234: PUSH
36235: LD_VAR 0 5
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 3
36246: PUSH
36247: LD_INT 60
36249: PUSH
36250: EMPTY
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 91
36259: PUSH
36260: LD_VAR 0 8
36264: PUSH
36265: LD_INT 6
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: LD_INT 25
36278: PUSH
36279: LD_INT 2
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 25
36288: PUSH
36289: LD_INT 16
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: PPUSH
36307: CALL_OW 69
36311: PUSH
36312: LD_VAR 0 8
36316: PPUSH
36317: CALL_OW 313
36321: PPUSH
36322: LD_INT 3
36324: PUSH
36325: LD_INT 60
36327: PUSH
36328: EMPTY
36329: LIST
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: LD_INT 25
36340: PUSH
36341: LD_INT 2
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 25
36350: PUSH
36351: LD_INT 16
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: LIST
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PPUSH
36367: CALL_OW 72
36371: UNION
36372: ST_TO_ADDR
// if tmp then
36373: LD_VAR 0 4
36377: IFFALSE 36457
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36379: LD_ADDR_VAR 0 4
36383: PUSH
36384: LD_VAR 0 4
36388: PPUSH
36389: LD_INT 3
36391: PPUSH
36392: CALL 81684 0 2
36396: ST_TO_ADDR
// for j in tmp do
36397: LD_ADDR_VAR 0 2
36401: PUSH
36402: LD_VAR 0 4
36406: PUSH
36407: FOR_IN
36408: IFFALSE 36451
// begin if IsInUnit ( j ) then
36410: LD_VAR 0 2
36414: PPUSH
36415: CALL_OW 310
36419: IFFALSE 36430
// ComExit ( j ) ;
36421: LD_VAR 0 2
36425: PPUSH
36426: CALL 81767 0 1
// AddComCollect ( j , x , y ) ;
36430: LD_VAR 0 2
36434: PPUSH
36435: LD_VAR 0 6
36439: PPUSH
36440: LD_VAR 0 7
36444: PPUSH
36445: CALL_OW 177
// end ;
36449: GO 36407
36451: POP
36452: POP
// exit ;
36453: POP
36454: POP
36455: GO 36692
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36457: LD_ADDR_VAR 0 4
36461: PUSH
36462: LD_INT 22
36464: PUSH
36465: LD_VAR 0 5
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 91
36476: PUSH
36477: LD_VAR 0 8
36481: PUSH
36482: LD_INT 8
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 2
36492: PUSH
36493: LD_INT 34
36495: PUSH
36496: LD_INT 12
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 34
36505: PUSH
36506: LD_INT 51
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 34
36515: PUSH
36516: LD_INT 32
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 34
36525: PUSH
36526: LD_INT 89
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: LIST
36544: PPUSH
36545: CALL_OW 69
36549: ST_TO_ADDR
// if tmp then
36550: LD_VAR 0 4
36554: IFFALSE 36688
// begin for j in tmp do
36556: LD_ADDR_VAR 0 2
36560: PUSH
36561: LD_VAR 0 4
36565: PUSH
36566: FOR_IN
36567: IFFALSE 36686
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36569: LD_VAR 0 2
36573: PPUSH
36574: CALL_OW 262
36578: PUSH
36579: LD_INT 3
36581: EQUAL
36582: IFTRUE 36599
36584: PUSH
36585: LD_VAR 0 2
36589: PPUSH
36590: CALL_OW 261
36594: PUSH
36595: LD_INT 20
36597: GREATER
36598: OR
36599: IFFALSE 36613
36601: PUSH
36602: LD_VAR 0 2
36606: PPUSH
36607: CALL_OW 314
36611: NOT
36612: AND
36613: IFFALSE 36643
36615: PUSH
36616: LD_VAR 0 2
36620: PPUSH
36621: CALL_OW 263
36625: PUSH
36626: LD_INT 1
36628: NONEQUAL
36629: IFTRUE 36642
36631: PUSH
36632: LD_VAR 0 2
36636: PPUSH
36637: CALL_OW 311
36641: OR
36642: AND
36643: IFFALSE 36684
// begin ComCollect ( j , x , y ) ;
36645: LD_VAR 0 2
36649: PPUSH
36650: LD_VAR 0 6
36654: PPUSH
36655: LD_VAR 0 7
36659: PPUSH
36660: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36664: LD_VAR 0 2
36668: PPUSH
36669: LD_VAR 0 8
36673: PPUSH
36674: CALL_OW 172
// exit ;
36678: POP
36679: POP
36680: POP
36681: POP
36682: GO 36692
// end ;
36684: GO 36566
36686: POP
36687: POP
// end ; end ;
36688: GO 36053
36690: POP
36691: POP
// end ; end_of_file
36692: PPOPN 9
36694: END
// export function SOS_UnitDestroyed ( un ) ; begin
36695: LD_INT 0
36697: PPUSH
// ComRadiation ( un ) ;
36698: LD_VAR 0 1
36702: PPUSH
36703: CALL 37865 0 1
// end ;
36707: LD_VAR 0 2
36711: RET
// export function SOS_UnitKamikazed ( un ) ; begin
36712: LD_INT 0
36714: PPUSH
// ComRadiation ( un ) ;
36715: LD_VAR 0 1
36719: PPUSH
36720: CALL 37865 0 1
// end ;
36724: LD_VAR 0 2
36728: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36729: LD_INT 0
36731: PPUSH
// end ;
36732: LD_VAR 0 4
36736: RET
// export function SOS_Command ( cmd ) ; begin
36737: LD_INT 0
36739: PPUSH
// end ;
36740: LD_VAR 0 2
36744: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36745: LD_INT 0
36747: PPUSH
// end ;
36748: LD_VAR 0 6
36752: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
36753: LD_INT 0
36755: PPUSH
36756: PPUSH
36757: PPUSH
36758: PPUSH
36759: PPUSH
// if not vehicle or not factory then
36760: LD_VAR 0 1
36764: NOT
36765: IFTRUE 36774
36767: PUSH
36768: LD_VAR 0 2
36772: NOT
36773: OR
36774: IFFALSE 36778
// exit ;
36776: GO 37440
// weapon := GetWeapon ( vehicle ) ;
36778: LD_ADDR_VAR 0 7
36782: PUSH
36783: LD_VAR 0 1
36787: PPUSH
36788: CALL_OW 264
36792: ST_TO_ADDR
// if weapon = ar_miner then
36793: LD_VAR 0 7
36797: PUSH
36798: LD_INT 81
36800: EQUAL
36801: IFFALSE 36858
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
36803: LD_ADDR_EXP 107
36807: PUSH
36808: LD_EXP 107
36812: PPUSH
36813: LD_EXP 107
36817: PUSH
36818: LD_INT 1
36820: PLUS
36821: PPUSH
36822: LD_VAR 0 1
36826: PPUSH
36827: CALL_OW 1
36831: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36832: LD_ADDR_EXP 108
36836: PUSH
36837: LD_EXP 108
36841: PPUSH
36842: LD_EXP 108
36846: PUSH
36847: LD_INT 1
36849: PLUS
36850: PPUSH
36851: EMPTY
36852: PPUSH
36853: CALL_OW 1
36857: ST_TO_ADDR
// end ; if not factoryWaypoints then
36858: LD_EXP 96
36862: NOT
36863: IFFALSE 36867
// exit ;
36865: GO 37440
// for i := 1 to Count ( factoryWaypoints ) do
36867: LD_ADDR_VAR 0 4
36871: PUSH
36872: DOUBLE
36873: LD_INT 1
36875: DEC
36876: ST_TO_ADDR
36877: LD_EXP 96
36881: PPUSH
36882: CALL 45393 0 1
36886: PUSH
36887: FOR_TO
36888: IFFALSE 37438
// if factoryWaypoints [ i ] [ 2 ] = factory then
36890: LD_EXP 96
36894: PUSH
36895: LD_VAR 0 4
36899: ARRAY
36900: PUSH
36901: LD_INT 2
36903: ARRAY
36904: PUSH
36905: LD_VAR 0 2
36909: EQUAL
36910: IFFALSE 37436
// begin if GetControl ( vehicle ) = control_manual then
36912: LD_VAR 0 1
36916: PPUSH
36917: CALL_OW 263
36921: PUSH
36922: LD_INT 1
36924: EQUAL
36925: IFFALSE 37289
// begin driver := IsDrivenBy ( vehicle ) ;
36927: LD_ADDR_VAR 0 5
36931: PUSH
36932: LD_VAR 0 1
36936: PPUSH
36937: CALL_OW 311
36941: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
36942: LD_VAR 0 5
36946: PUSH
36947: LD_EXP 97
36951: IN
36952: IFTRUE 36966
36954: PUSH
36955: LD_VAR 0 1
36959: PUSH
36960: LD_EXP 97
36964: IN
36965: OR
36966: IFFALSE 36972
// exit ;
36968: POP
36969: POP
36970: GO 37440
// if not HasTask ( driver ) then
36972: LD_VAR 0 5
36976: PPUSH
36977: CALL_OW 314
36981: NOT
36982: IFFALSE 37287
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
36984: LD_ADDR_EXP 97
36988: PUSH
36989: LD_EXP 97
36993: PPUSH
36994: LD_VAR 0 5
36998: PPUSH
36999: CALL 81369 0 2
37003: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
37004: LD_ADDR_EXP 97
37008: PUSH
37009: LD_EXP 97
37013: PPUSH
37014: LD_VAR 0 1
37018: PPUSH
37019: CALL 81369 0 2
37023: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37024: LD_ADDR_VAR 0 6
37028: PUSH
37029: LD_EXP 96
37033: PUSH
37034: LD_VAR 0 4
37038: ARRAY
37039: PUSH
37040: LD_INT 3
37042: ARRAY
37043: PPUSH
37044: LD_EXP 96
37048: PUSH
37049: LD_VAR 0 4
37053: ARRAY
37054: PUSH
37055: LD_INT 4
37057: ARRAY
37058: PPUSH
37059: CALL_OW 428
37063: ST_TO_ADDR
// if hex then
37064: LD_VAR 0 6
37068: IFFALSE 37086
// ComMoveUnit ( driver , hex ) else
37070: LD_VAR 0 5
37074: PPUSH
37075: LD_VAR 0 6
37079: PPUSH
37080: CALL_OW 112
37084: GO 37170
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
37086: LD_VAR 0 1
37090: PPUSH
37091: LD_EXP 96
37095: PUSH
37096: LD_VAR 0 4
37100: ARRAY
37101: PUSH
37102: LD_INT 3
37104: ARRAY
37105: PPUSH
37106: LD_EXP 96
37110: PUSH
37111: LD_VAR 0 4
37115: ARRAY
37116: PUSH
37117: LD_INT 4
37119: ARRAY
37120: PPUSH
37121: CALL_OW 297
37125: PUSH
37126: LD_INT 0
37128: GREATER
37129: IFFALSE 37170
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37131: LD_VAR 0 5
37135: PPUSH
37136: LD_EXP 96
37140: PUSH
37141: LD_VAR 0 4
37145: ARRAY
37146: PUSH
37147: LD_INT 3
37149: ARRAY
37150: PPUSH
37151: LD_EXP 96
37155: PUSH
37156: LD_VAR 0 4
37160: ARRAY
37161: PUSH
37162: LD_INT 4
37164: ARRAY
37165: PPUSH
37166: CALL_OW 111
// AddComExitVehicle ( driver ) ;
37170: LD_VAR 0 5
37174: PPUSH
37175: CALL_OW 181
// if Multiplayer then
37179: LD_OWVAR 4
37183: IFFALSE 37232
// begin repeat wait ( 10 ) ;
37185: LD_INT 10
37187: PPUSH
37188: CALL_OW 67
// until not IsInUnit ( driver ) ;
37192: LD_VAR 0 5
37196: PPUSH
37197: CALL_OW 310
37201: NOT
37202: IFFALSE 37185
// if not HasTask ( driver ) then
37204: LD_VAR 0 5
37208: PPUSH
37209: CALL_OW 314
37213: NOT
37214: IFFALSE 37230
// ComEnterUnit ( driver , factory ) ;
37216: LD_VAR 0 5
37220: PPUSH
37221: LD_VAR 0 2
37225: PPUSH
37226: CALL_OW 120
// end else
37230: GO 37246
// AddComEnterUnit ( driver , factory ) ;
37232: LD_VAR 0 5
37236: PPUSH
37237: LD_VAR 0 2
37241: PPUSH
37242: CALL_OW 180
// wait ( 0 0$1 ) ;
37246: LD_INT 35
37248: PPUSH
37249: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
37253: LD_ADDR_EXP 97
37257: PUSH
37258: LD_EXP 97
37262: PUSH
37263: LD_VAR 0 5
37267: DIFF
37268: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
37269: LD_ADDR_EXP 97
37273: PUSH
37274: LD_EXP 97
37278: PUSH
37279: LD_VAR 0 1
37283: DIFF
37284: ST_TO_ADDR
// break ;
37285: GO 37438
// end ; end else
37287: GO 37436
// if GetControl ( vehicle ) = control_remote then
37289: LD_VAR 0 1
37293: PPUSH
37294: CALL_OW 263
37298: PUSH
37299: LD_INT 2
37301: EQUAL
37302: IFFALSE 37388
// begin wait ( 0 0$2 ) ;
37304: LD_INT 70
37306: PPUSH
37307: CALL_OW 67
// repeat wait ( 10 ) ;
37311: LD_INT 10
37313: PPUSH
37314: CALL_OW 67
// Connect ( vehicle ) ;
37318: LD_VAR 0 1
37322: PPUSH
37323: CALL 51671 0 1
// until IsControledBy ( vehicle ) ;
37327: LD_VAR 0 1
37331: PPUSH
37332: CALL_OW 312
37336: IFFALSE 37311
// wait ( 10 ) ;
37338: LD_INT 10
37340: PPUSH
37341: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37345: LD_VAR 0 1
37349: PPUSH
37350: LD_EXP 96
37354: PUSH
37355: LD_VAR 0 4
37359: ARRAY
37360: PUSH
37361: LD_INT 3
37363: ARRAY
37364: PPUSH
37365: LD_EXP 96
37369: PUSH
37370: LD_VAR 0 4
37374: ARRAY
37375: PUSH
37376: LD_INT 4
37378: ARRAY
37379: PPUSH
37380: CALL_OW 111
// break ;
37384: GO 37438
// end else
37386: GO 37436
// begin wait ( 0 0$3 ) ;
37388: LD_INT 105
37390: PPUSH
37391: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
37395: LD_VAR 0 1
37399: PPUSH
37400: LD_EXP 96
37404: PUSH
37405: LD_VAR 0 4
37409: ARRAY
37410: PUSH
37411: LD_INT 3
37413: ARRAY
37414: PPUSH
37415: LD_EXP 96
37419: PUSH
37420: LD_VAR 0 4
37424: ARRAY
37425: PUSH
37426: LD_INT 4
37428: ARRAY
37429: PPUSH
37430: CALL_OW 111
// break ;
37434: GO 37438
// end ; end ;
37436: GO 36887
37438: POP
37439: POP
// end ;
37440: LD_VAR 0 3
37444: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37445: LD_INT 0
37447: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37448: LD_VAR 0 1
37452: PUSH
37453: LD_INT 250
37455: EQUAL
37456: IFFALSE 37473
37458: PUSH
37459: LD_VAR 0 2
37463: PPUSH
37464: CALL_OW 264
37468: PUSH
37469: LD_INT 81
37471: EQUAL
37472: AND
37473: IFFALSE 37494
// MinerPlaceMine ( unit , x , y ) ;
37475: LD_VAR 0 2
37479: PPUSH
37480: LD_VAR 0 4
37484: PPUSH
37485: LD_VAR 0 5
37489: PPUSH
37490: CALL 40840 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37494: LD_VAR 0 1
37498: PUSH
37499: LD_INT 251
37501: EQUAL
37502: IFFALSE 37519
37504: PUSH
37505: LD_VAR 0 2
37509: PPUSH
37510: CALL_OW 264
37514: PUSH
37515: LD_INT 81
37517: EQUAL
37518: AND
37519: IFFALSE 37540
// MinerDetonateMine ( unit , x , y ) ;
37521: LD_VAR 0 2
37525: PPUSH
37526: LD_VAR 0 4
37530: PPUSH
37531: LD_VAR 0 5
37535: PPUSH
37536: CALL 41247 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37540: LD_VAR 0 1
37544: PUSH
37545: LD_INT 252
37547: EQUAL
37548: IFFALSE 37565
37550: PUSH
37551: LD_VAR 0 2
37555: PPUSH
37556: CALL_OW 264
37560: PUSH
37561: LD_INT 81
37563: EQUAL
37564: AND
37565: IFFALSE 37586
// MinerCreateMinefield ( unit , x , y ) ;
37567: LD_VAR 0 2
37571: PPUSH
37572: LD_VAR 0 4
37576: PPUSH
37577: LD_VAR 0 5
37581: PPUSH
37582: CALL 41479 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37586: LD_VAR 0 1
37590: PUSH
37591: LD_INT 253
37593: EQUAL
37594: IFFALSE 37611
37596: PUSH
37597: LD_VAR 0 2
37601: PPUSH
37602: CALL_OW 257
37606: PUSH
37607: LD_INT 5
37609: EQUAL
37610: AND
37611: IFFALSE 37632
// ComBinocular ( unit , x , y ) ;
37613: LD_VAR 0 2
37617: PPUSH
37618: LD_VAR 0 4
37622: PPUSH
37623: LD_VAR 0 5
37627: PPUSH
37628: CALL 41854 0 3
// if selectedUnit then
37632: LD_VAR 0 3
37636: IFFALSE 37696
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37638: LD_VAR 0 1
37642: PUSH
37643: LD_INT 254
37645: EQUAL
37646: IFFALSE 37663
37648: PUSH
37649: LD_VAR 0 2
37653: PPUSH
37654: CALL_OW 264
37658: PUSH
37659: LD_INT 99
37661: EQUAL
37662: AND
37663: IFFALSE 37680
37665: PUSH
37666: LD_VAR 0 3
37670: PPUSH
37671: CALL_OW 263
37675: PUSH
37676: LD_INT 3
37678: EQUAL
37679: AND
37680: IFFALSE 37696
// HackDestroyVehicle ( unit , selectedUnit ) ;
37682: LD_VAR 0 2
37686: PPUSH
37687: LD_VAR 0 3
37691: PPUSH
37692: CALL 40030 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37696: LD_VAR 0 1
37700: PUSH
37701: LD_INT 255
37703: EQUAL
37704: IFFALSE 37728
37706: PUSH
37707: LD_VAR 0 2
37711: PPUSH
37712: CALL_OW 264
37716: PUSH
37717: LD_INT 14
37719: PUSH
37720: LD_INT 53
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: IN
37727: AND
37728: IFFALSE 37746
37730: PUSH
37731: LD_VAR 0 4
37735: PPUSH
37736: LD_VAR 0 5
37740: PPUSH
37741: CALL_OW 488
37745: AND
37746: IFFALSE 37770
// CutTreeXYR ( unit , x , y , 12 ) ;
37748: LD_VAR 0 2
37752: PPUSH
37753: LD_VAR 0 4
37757: PPUSH
37758: LD_VAR 0 5
37762: PPUSH
37763: LD_INT 12
37765: PPUSH
37766: CALL 37961 0 4
// if cmd = 256 then
37770: LD_VAR 0 1
37774: PUSH
37775: LD_INT 256
37777: EQUAL
37778: IFFALSE 37799
// SetFactoryWaypoint ( unit , x , y ) ;
37780: LD_VAR 0 2
37784: PPUSH
37785: LD_VAR 0 4
37789: PPUSH
37790: LD_VAR 0 5
37794: PPUSH
37795: CALL 35240 0 3
// if cmd = 257 then
37799: LD_VAR 0 1
37803: PUSH
37804: LD_INT 257
37806: EQUAL
37807: IFFALSE 37828
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37809: LD_VAR 0 2
37813: PPUSH
37814: LD_VAR 0 4
37818: PPUSH
37819: LD_VAR 0 5
37823: PPUSH
37824: CALL 35736 0 3
// if cmd = 258 then
37828: LD_VAR 0 1
37832: PUSH
37833: LD_INT 258
37835: EQUAL
37836: IFFALSE 37860
// BurnTreeXYR ( unit , x , y , 8 ) ;
37838: LD_VAR 0 2
37842: PPUSH
37843: LD_VAR 0 4
37847: PPUSH
37848: LD_VAR 0 5
37852: PPUSH
37853: LD_INT 8
37855: PPUSH
37856: CALL 38383 0 4
// end ;
37860: LD_VAR 0 6
37864: RET
// export function ComRadiation ( un ) ; var eff ; begin
37865: LD_INT 0
37867: PPUSH
37868: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
37869: LD_VAR 0 1
37873: PPUSH
37874: CALL_OW 264
37878: PUSH
37879: LD_INT 91
37881: NONEQUAL
37882: IFFALSE 37886
// exit ;
37884: GO 37956
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37886: LD_INT 68
37888: PPUSH
37889: LD_VAR 0 1
37893: PPUSH
37894: CALL_OW 255
37898: PPUSH
37899: CALL_OW 321
37903: PUSH
37904: LD_INT 2
37906: EQUAL
37907: IFFALSE 37919
// eff := 50 else
37909: LD_ADDR_VAR 0 3
37913: PUSH
37914: LD_INT 50
37916: ST_TO_ADDR
37917: GO 37927
// eff := 25 ;
37919: LD_ADDR_VAR 0 3
37923: PUSH
37924: LD_INT 25
37926: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37927: LD_VAR 0 1
37931: PPUSH
37932: CALL_OW 250
37936: PPUSH
37937: LD_VAR 0 1
37941: PPUSH
37942: CALL_OW 251
37946: PPUSH
37947: LD_VAR 0 3
37951: PPUSH
37952: CALL_OW 495
// end ;
37956: LD_VAR 0 2
37960: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37961: LD_INT 0
37963: PPUSH
37964: PPUSH
37965: PPUSH
37966: PPUSH
37967: PPUSH
37968: PPUSH
37969: PPUSH
37970: PPUSH
37971: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37972: LD_VAR 0 1
37976: PPUSH
37977: CALL_OW 302
37981: NOT
37982: IFTRUE 38001
37984: PUSH
37985: LD_VAR 0 2
37989: PPUSH
37990: LD_VAR 0 3
37994: PPUSH
37995: CALL_OW 488
37999: NOT
38000: OR
38001: IFTRUE 38010
38003: PUSH
38004: LD_VAR 0 4
38008: NOT
38009: OR
38010: IFFALSE 38014
// exit ;
38012: GO 38378
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
38014: LD_VAR 0 1
38018: PPUSH
38019: CALL_OW 437
38023: PPUSH
38024: CALL 45393 0 1
38028: PUSH
38029: LD_INT 10
38031: GREATER
38032: IFFALSE 38036
// exit ;
38034: GO 38378
// list := [ ] ;
38036: LD_ADDR_VAR 0 13
38040: PUSH
38041: EMPTY
38042: ST_TO_ADDR
// if x - r < 0 then
38043: LD_VAR 0 2
38047: PUSH
38048: LD_VAR 0 4
38052: MINUS
38053: PUSH
38054: LD_INT 0
38056: LESS
38057: IFFALSE 38069
// min_x := 0 else
38059: LD_ADDR_VAR 0 7
38063: PUSH
38064: LD_INT 0
38066: ST_TO_ADDR
38067: GO 38085
// min_x := x - r ;
38069: LD_ADDR_VAR 0 7
38073: PUSH
38074: LD_VAR 0 2
38078: PUSH
38079: LD_VAR 0 4
38083: MINUS
38084: ST_TO_ADDR
// if y - r < 0 then
38085: LD_VAR 0 3
38089: PUSH
38090: LD_VAR 0 4
38094: MINUS
38095: PUSH
38096: LD_INT 0
38098: LESS
38099: IFFALSE 38111
// min_y := 0 else
38101: LD_ADDR_VAR 0 8
38105: PUSH
38106: LD_INT 0
38108: ST_TO_ADDR
38109: GO 38127
// min_y := y - r ;
38111: LD_ADDR_VAR 0 8
38115: PUSH
38116: LD_VAR 0 3
38120: PUSH
38121: LD_VAR 0 4
38125: MINUS
38126: ST_TO_ADDR
// max_x := x + r ;
38127: LD_ADDR_VAR 0 9
38131: PUSH
38132: LD_VAR 0 2
38136: PUSH
38137: LD_VAR 0 4
38141: PLUS
38142: ST_TO_ADDR
// max_y := y + r ;
38143: LD_ADDR_VAR 0 10
38147: PUSH
38148: LD_VAR 0 3
38152: PUSH
38153: LD_VAR 0 4
38157: PLUS
38158: ST_TO_ADDR
// for _x = min_x to max_x do
38159: LD_ADDR_VAR 0 11
38163: PUSH
38164: DOUBLE
38165: LD_VAR 0 7
38169: DEC
38170: ST_TO_ADDR
38171: LD_VAR 0 9
38175: PUSH
38176: FOR_TO
38177: IFFALSE 38296
// for _y = min_y to max_y do
38179: LD_ADDR_VAR 0 12
38183: PUSH
38184: DOUBLE
38185: LD_VAR 0 8
38189: DEC
38190: ST_TO_ADDR
38191: LD_VAR 0 10
38195: PUSH
38196: FOR_TO
38197: IFFALSE 38292
// begin if not ValidHex ( _x , _y ) then
38199: LD_VAR 0 11
38203: PPUSH
38204: LD_VAR 0 12
38208: PPUSH
38209: CALL_OW 488
38213: NOT
38214: IFFALSE 38218
// continue ;
38216: GO 38196
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38218: LD_VAR 0 11
38222: PPUSH
38223: LD_VAR 0 12
38227: PPUSH
38228: CALL_OW 351
38232: IFFALSE 38250
38234: PUSH
38235: LD_VAR 0 11
38239: PPUSH
38240: LD_VAR 0 12
38244: PPUSH
38245: CALL_OW 554
38249: AND
38250: IFFALSE 38290
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38252: LD_ADDR_VAR 0 13
38256: PUSH
38257: LD_VAR 0 13
38261: PPUSH
38262: LD_VAR 0 13
38266: PUSH
38267: LD_INT 1
38269: PLUS
38270: PPUSH
38271: LD_VAR 0 11
38275: PUSH
38276: LD_VAR 0 12
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PPUSH
38285: CALL_OW 2
38289: ST_TO_ADDR
// end ;
38290: GO 38196
38292: POP
38293: POP
38294: GO 38176
38296: POP
38297: POP
// if not list then
38298: LD_VAR 0 13
38302: NOT
38303: IFFALSE 38307
// exit ;
38305: GO 38378
// for i in list do
38307: LD_ADDR_VAR 0 6
38311: PUSH
38312: LD_VAR 0 13
38316: PUSH
38317: FOR_IN
38318: IFFALSE 38376
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38320: LD_VAR 0 1
38324: PPUSH
38325: LD_STRING M
38327: PUSH
38328: LD_VAR 0 6
38332: PUSH
38333: LD_INT 1
38335: ARRAY
38336: PUSH
38337: LD_VAR 0 6
38341: PUSH
38342: LD_INT 2
38344: ARRAY
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: LD_INT 0
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: PUSH
38367: EMPTY
38368: LIST
38369: PPUSH
38370: CALL_OW 447
38374: GO 38317
38376: POP
38377: POP
// end ;
38378: LD_VAR 0 5
38382: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
38383: LD_INT 0
38385: PPUSH
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
38393: PPUSH
38394: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38395: LD_VAR 0 1
38399: PPUSH
38400: CALL_OW 302
38404: NOT
38405: IFTRUE 38424
38407: PUSH
38408: LD_VAR 0 2
38412: PPUSH
38413: LD_VAR 0 3
38417: PPUSH
38418: CALL_OW 488
38422: NOT
38423: OR
38424: IFTRUE 38433
38426: PUSH
38427: LD_VAR 0 4
38431: NOT
38432: OR
38433: IFFALSE 38437
// exit ;
38435: GO 38976
// if Count ( GetTaskList ( flame ) ) > 10 then
38437: LD_VAR 0 1
38441: PPUSH
38442: CALL_OW 437
38446: PPUSH
38447: CALL 45393 0 1
38451: PUSH
38452: LD_INT 10
38454: GREATER
38455: IFFALSE 38459
// exit ;
38457: GO 38976
// list := [ ] ;
38459: LD_ADDR_VAR 0 13
38463: PUSH
38464: EMPTY
38465: ST_TO_ADDR
// if x - r < 0 then
38466: LD_VAR 0 2
38470: PUSH
38471: LD_VAR 0 4
38475: MINUS
38476: PUSH
38477: LD_INT 0
38479: LESS
38480: IFFALSE 38492
// min_x := 0 else
38482: LD_ADDR_VAR 0 7
38486: PUSH
38487: LD_INT 0
38489: ST_TO_ADDR
38490: GO 38508
// min_x := x - r ;
38492: LD_ADDR_VAR 0 7
38496: PUSH
38497: LD_VAR 0 2
38501: PUSH
38502: LD_VAR 0 4
38506: MINUS
38507: ST_TO_ADDR
// if y - r < 0 then
38508: LD_VAR 0 3
38512: PUSH
38513: LD_VAR 0 4
38517: MINUS
38518: PUSH
38519: LD_INT 0
38521: LESS
38522: IFFALSE 38534
// min_y := 0 else
38524: LD_ADDR_VAR 0 8
38528: PUSH
38529: LD_INT 0
38531: ST_TO_ADDR
38532: GO 38550
// min_y := y - r ;
38534: LD_ADDR_VAR 0 8
38538: PUSH
38539: LD_VAR 0 3
38543: PUSH
38544: LD_VAR 0 4
38548: MINUS
38549: ST_TO_ADDR
// max_x := x + r ;
38550: LD_ADDR_VAR 0 9
38554: PUSH
38555: LD_VAR 0 2
38559: PUSH
38560: LD_VAR 0 4
38564: PLUS
38565: ST_TO_ADDR
// max_y := y + r ;
38566: LD_ADDR_VAR 0 10
38570: PUSH
38571: LD_VAR 0 3
38575: PUSH
38576: LD_VAR 0 4
38580: PLUS
38581: ST_TO_ADDR
// for _x = min_x to max_x do
38582: LD_ADDR_VAR 0 11
38586: PUSH
38587: DOUBLE
38588: LD_VAR 0 7
38592: DEC
38593: ST_TO_ADDR
38594: LD_VAR 0 9
38598: PUSH
38599: FOR_TO
38600: IFFALSE 38719
// for _y = min_y to max_y do
38602: LD_ADDR_VAR 0 12
38606: PUSH
38607: DOUBLE
38608: LD_VAR 0 8
38612: DEC
38613: ST_TO_ADDR
38614: LD_VAR 0 10
38618: PUSH
38619: FOR_TO
38620: IFFALSE 38715
// begin if not ValidHex ( _x , _y ) then
38622: LD_VAR 0 11
38626: PPUSH
38627: LD_VAR 0 12
38631: PPUSH
38632: CALL_OW 488
38636: NOT
38637: IFFALSE 38641
// continue ;
38639: GO 38619
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38641: LD_VAR 0 11
38645: PPUSH
38646: LD_VAR 0 12
38650: PPUSH
38651: CALL_OW 351
38655: IFFALSE 38673
38657: PUSH
38658: LD_VAR 0 11
38662: PPUSH
38663: LD_VAR 0 12
38667: PPUSH
38668: CALL_OW 554
38672: AND
38673: IFFALSE 38713
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38675: LD_ADDR_VAR 0 13
38679: PUSH
38680: LD_VAR 0 13
38684: PPUSH
38685: LD_VAR 0 13
38689: PUSH
38690: LD_INT 1
38692: PLUS
38693: PPUSH
38694: LD_VAR 0 11
38698: PUSH
38699: LD_VAR 0 12
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PPUSH
38708: CALL_OW 2
38712: ST_TO_ADDR
// end ;
38713: GO 38619
38715: POP
38716: POP
38717: GO 38599
38719: POP
38720: POP
// if not list then
38721: LD_VAR 0 13
38725: NOT
38726: IFFALSE 38730
// exit ;
38728: GO 38976
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38730: LD_ADDR_VAR 0 13
38734: PUSH
38735: LD_VAR 0 1
38739: PPUSH
38740: LD_VAR 0 13
38744: PPUSH
38745: LD_INT 1
38747: PPUSH
38748: LD_INT 1
38750: PPUSH
38751: CALL 48799 0 4
38755: ST_TO_ADDR
// ComStop ( flame ) ;
38756: LD_VAR 0 1
38760: PPUSH
38761: CALL_OW 141
// for i in list do
38765: LD_ADDR_VAR 0 6
38769: PUSH
38770: LD_VAR 0 13
38774: PUSH
38775: FOR_IN
38776: IFFALSE 38807
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38778: LD_VAR 0 1
38782: PPUSH
38783: LD_VAR 0 6
38787: PUSH
38788: LD_INT 1
38790: ARRAY
38791: PPUSH
38792: LD_VAR 0 6
38796: PUSH
38797: LD_INT 2
38799: ARRAY
38800: PPUSH
38801: CALL_OW 176
38805: GO 38775
38807: POP
38808: POP
// repeat wait ( 0 0$1 ) ;
38809: LD_INT 35
38811: PPUSH
38812: CALL_OW 67
// task := GetTaskList ( flame ) ;
38816: LD_ADDR_VAR 0 14
38820: PUSH
38821: LD_VAR 0 1
38825: PPUSH
38826: CALL_OW 437
38830: ST_TO_ADDR
// if not task then
38831: LD_VAR 0 14
38835: NOT
38836: IFFALSE 38840
// exit ;
38838: GO 38976
// if task [ 1 ] [ 1 ] <> | then
38840: LD_VAR 0 14
38844: PUSH
38845: LD_INT 1
38847: ARRAY
38848: PUSH
38849: LD_INT 1
38851: ARRAY
38852: PUSH
38853: LD_STRING |
38855: NONEQUAL
38856: IFFALSE 38860
// exit ;
38858: GO 38976
// _x := task [ 1 ] [ 2 ] ;
38860: LD_ADDR_VAR 0 11
38864: PUSH
38865: LD_VAR 0 14
38869: PUSH
38870: LD_INT 1
38872: ARRAY
38873: PUSH
38874: LD_INT 2
38876: ARRAY
38877: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38878: LD_ADDR_VAR 0 12
38882: PUSH
38883: LD_VAR 0 14
38887: PUSH
38888: LD_INT 1
38890: ARRAY
38891: PUSH
38892: LD_INT 3
38894: ARRAY
38895: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38896: LD_VAR 0 11
38900: PPUSH
38901: LD_VAR 0 12
38905: PPUSH
38906: CALL_OW 351
38910: NOT
38911: IFTRUE 38930
38913: PUSH
38914: LD_VAR 0 11
38918: PPUSH
38919: LD_VAR 0 12
38923: PPUSH
38924: CALL_OW 554
38928: NOT
38929: OR
38930: IFFALSE 38964
// begin task := Delete ( task , 1 ) ;
38932: LD_ADDR_VAR 0 14
38936: PUSH
38937: LD_VAR 0 14
38941: PPUSH
38942: LD_INT 1
38944: PPUSH
38945: CALL_OW 3
38949: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38950: LD_VAR 0 1
38954: PPUSH
38955: LD_VAR 0 14
38959: PPUSH
38960: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38964: LD_VAR 0 1
38968: PPUSH
38969: CALL_OW 314
38973: NOT
38974: IFFALSE 38809
// end ;
38976: LD_VAR 0 5
38980: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38981: LD_EXP 100
38985: NOT
38986: IFFALSE 39036
38988: GO 38990
38990: DISABLE
// begin initHack := true ;
38991: LD_ADDR_EXP 100
38995: PUSH
38996: LD_INT 1
38998: ST_TO_ADDR
// hackTanks := [ ] ;
38999: LD_ADDR_EXP 101
39003: PUSH
39004: EMPTY
39005: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
39006: LD_ADDR_EXP 102
39010: PUSH
39011: EMPTY
39012: ST_TO_ADDR
// hackLimit := 3 ;
39013: LD_ADDR_EXP 103
39017: PUSH
39018: LD_INT 3
39020: ST_TO_ADDR
// hackDist := 12 ;
39021: LD_ADDR_EXP 104
39025: PUSH
39026: LD_INT 12
39028: ST_TO_ADDR
// hackCounter := [ ] ;
39029: LD_ADDR_EXP 105
39033: PUSH
39034: EMPTY
39035: ST_TO_ADDR
// end ;
39036: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
39037: LD_EXP 100
39041: IFFALSE 39059
39043: PUSH
39044: LD_INT 34
39046: PUSH
39047: LD_INT 99
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PPUSH
39054: CALL_OW 69
39058: AND
39059: IFFALSE 39312
39061: GO 39063
39063: DISABLE
39064: LD_INT 0
39066: PPUSH
39067: PPUSH
// begin enable ;
39068: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
39069: LD_ADDR_VAR 0 1
39073: PUSH
39074: LD_INT 34
39076: PUSH
39077: LD_INT 99
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PPUSH
39084: CALL_OW 69
39088: PUSH
39089: FOR_IN
39090: IFFALSE 39310
// begin if not i in hackTanks then
39092: LD_VAR 0 1
39096: PUSH
39097: LD_EXP 101
39101: IN
39102: NOT
39103: IFFALSE 39186
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
39105: LD_ADDR_EXP 101
39109: PUSH
39110: LD_EXP 101
39114: PPUSH
39115: LD_EXP 101
39119: PUSH
39120: LD_INT 1
39122: PLUS
39123: PPUSH
39124: LD_VAR 0 1
39128: PPUSH
39129: CALL_OW 1
39133: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
39134: LD_ADDR_EXP 102
39138: PUSH
39139: LD_EXP 102
39143: PPUSH
39144: LD_EXP 102
39148: PUSH
39149: LD_INT 1
39151: PLUS
39152: PPUSH
39153: EMPTY
39154: PPUSH
39155: CALL_OW 1
39159: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39160: LD_ADDR_EXP 105
39164: PUSH
39165: LD_EXP 105
39169: PPUSH
39170: LD_EXP 105
39174: PUSH
39175: LD_INT 1
39177: PLUS
39178: PPUSH
39179: EMPTY
39180: PPUSH
39181: CALL_OW 1
39185: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39186: LD_VAR 0 1
39190: PPUSH
39191: CALL_OW 302
39195: NOT
39196: IFFALSE 39209
// begin HackUnlinkAll ( i ) ;
39198: LD_VAR 0 1
39202: PPUSH
39203: CALL 39315 0 1
// continue ;
39207: GO 39089
// end ; HackCheckCapturedStatus ( i ) ;
39209: LD_VAR 0 1
39213: PPUSH
39214: CALL 39760 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39218: LD_ADDR_VAR 0 2
39222: PUSH
39223: LD_INT 81
39225: PUSH
39226: LD_VAR 0 1
39230: PPUSH
39231: CALL_OW 255
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 33
39242: PUSH
39243: LD_INT 3
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 91
39252: PUSH
39253: LD_VAR 0 1
39257: PUSH
39258: LD_EXP 104
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 50
39270: PUSH
39271: EMPTY
39272: LIST
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: PPUSH
39280: CALL_OW 69
39284: ST_TO_ADDR
// if not tmp then
39285: LD_VAR 0 2
39289: NOT
39290: IFFALSE 39294
// continue ;
39292: GO 39089
// HackLink ( i , tmp ) ;
39294: LD_VAR 0 1
39298: PPUSH
39299: LD_VAR 0 2
39303: PPUSH
39304: CALL 39451 0 2
// end ;
39308: GO 39089
39310: POP
39311: POP
// end ;
39312: PPOPN 2
39314: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39315: LD_INT 0
39317: PPUSH
39318: PPUSH
39319: PPUSH
// if not hack in hackTanks then
39320: LD_VAR 0 1
39324: PUSH
39325: LD_EXP 101
39329: IN
39330: NOT
39331: IFFALSE 39335
// exit ;
39333: GO 39446
// index := GetElementIndex ( hackTanks , hack ) ;
39335: LD_ADDR_VAR 0 4
39339: PUSH
39340: LD_EXP 101
39344: PPUSH
39345: LD_VAR 0 1
39349: PPUSH
39350: CALL 48094 0 2
39354: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39355: LD_EXP 102
39359: PUSH
39360: LD_VAR 0 4
39364: ARRAY
39365: IFFALSE 39446
// begin for i in hackTanksCaptured [ index ] do
39367: LD_ADDR_VAR 0 3
39371: PUSH
39372: LD_EXP 102
39376: PUSH
39377: LD_VAR 0 4
39381: ARRAY
39382: PUSH
39383: FOR_IN
39384: IFFALSE 39410
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39386: LD_VAR 0 3
39390: PUSH
39391: LD_INT 1
39393: ARRAY
39394: PPUSH
39395: LD_VAR 0 3
39399: PUSH
39400: LD_INT 2
39402: ARRAY
39403: PPUSH
39404: CALL_OW 235
39408: GO 39383
39410: POP
39411: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39412: LD_ADDR_EXP 102
39416: PUSH
39417: LD_EXP 102
39421: PPUSH
39422: LD_VAR 0 4
39426: PPUSH
39427: EMPTY
39428: PPUSH
39429: CALL_OW 1
39433: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39434: LD_VAR 0 1
39438: PPUSH
39439: LD_INT 0
39441: PPUSH
39442: CALL_OW 505
// end ; end ;
39446: LD_VAR 0 2
39450: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39451: LD_INT 0
39453: PPUSH
39454: PPUSH
39455: PPUSH
// if not hack in hackTanks or not vehicles then
39456: LD_VAR 0 1
39460: PUSH
39461: LD_EXP 101
39465: IN
39466: NOT
39467: IFTRUE 39476
39469: PUSH
39470: LD_VAR 0 2
39474: NOT
39475: OR
39476: IFFALSE 39480
// exit ;
39478: GO 39755
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39480: LD_ADDR_VAR 0 2
39484: PUSH
39485: LD_VAR 0 1
39489: PPUSH
39490: LD_VAR 0 2
39494: PPUSH
39495: LD_INT 1
39497: PPUSH
39498: LD_INT 1
39500: PPUSH
39501: CALL 48746 0 4
39505: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39506: LD_ADDR_VAR 0 5
39510: PUSH
39511: LD_EXP 101
39515: PPUSH
39516: LD_VAR 0 1
39520: PPUSH
39521: CALL 48094 0 2
39525: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39526: LD_EXP 102
39530: PUSH
39531: LD_VAR 0 5
39535: ARRAY
39536: PUSH
39537: LD_EXP 103
39541: LESS
39542: IFFALSE 39731
// begin for i := 1 to vehicles do
39544: LD_ADDR_VAR 0 4
39548: PUSH
39549: DOUBLE
39550: LD_INT 1
39552: DEC
39553: ST_TO_ADDR
39554: LD_VAR 0 2
39558: PUSH
39559: FOR_TO
39560: IFFALSE 39729
// begin if hackTanksCaptured [ index ] = hackLimit then
39562: LD_EXP 102
39566: PUSH
39567: LD_VAR 0 5
39571: ARRAY
39572: PUSH
39573: LD_EXP 103
39577: EQUAL
39578: IFFALSE 39582
// break ;
39580: GO 39729
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39582: LD_ADDR_EXP 105
39586: PUSH
39587: LD_EXP 105
39591: PPUSH
39592: LD_VAR 0 5
39596: PPUSH
39597: LD_EXP 105
39601: PUSH
39602: LD_VAR 0 5
39606: ARRAY
39607: PUSH
39608: LD_INT 1
39610: PLUS
39611: PPUSH
39612: CALL_OW 1
39616: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39617: LD_ADDR_EXP 102
39621: PUSH
39622: LD_EXP 102
39626: PPUSH
39627: LD_VAR 0 5
39631: PUSH
39632: LD_EXP 102
39636: PUSH
39637: LD_VAR 0 5
39641: ARRAY
39642: PUSH
39643: LD_INT 1
39645: PLUS
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PPUSH
39651: LD_VAR 0 2
39655: PUSH
39656: LD_VAR 0 4
39660: ARRAY
39661: PUSH
39662: LD_VAR 0 2
39666: PUSH
39667: LD_VAR 0 4
39671: ARRAY
39672: PPUSH
39673: CALL_OW 255
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PPUSH
39682: CALL 48311 0 3
39686: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39687: LD_VAR 0 2
39691: PUSH
39692: LD_VAR 0 4
39696: ARRAY
39697: PPUSH
39698: LD_VAR 0 1
39702: PPUSH
39703: CALL_OW 255
39707: PPUSH
39708: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39712: LD_VAR 0 2
39716: PUSH
39717: LD_VAR 0 4
39721: ARRAY
39722: PPUSH
39723: CALL_OW 141
// end ;
39727: GO 39559
39729: POP
39730: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39731: LD_VAR 0 1
39735: PPUSH
39736: LD_EXP 102
39740: PUSH
39741: LD_VAR 0 5
39745: ARRAY
39746: PUSH
39747: LD_INT 0
39749: PLUS
39750: PPUSH
39751: CALL_OW 505
// end ;
39755: LD_VAR 0 3
39759: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39760: LD_INT 0
39762: PPUSH
39763: PPUSH
39764: PPUSH
39765: PPUSH
// if not hack in hackTanks then
39766: LD_VAR 0 1
39770: PUSH
39771: LD_EXP 101
39775: IN
39776: NOT
39777: IFFALSE 39781
// exit ;
39779: GO 40025
// index := GetElementIndex ( hackTanks , hack ) ;
39781: LD_ADDR_VAR 0 4
39785: PUSH
39786: LD_EXP 101
39790: PPUSH
39791: LD_VAR 0 1
39795: PPUSH
39796: CALL 48094 0 2
39800: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39801: LD_ADDR_VAR 0 3
39805: PUSH
39806: DOUBLE
39807: LD_EXP 102
39811: PUSH
39812: LD_VAR 0 4
39816: ARRAY
39817: INC
39818: ST_TO_ADDR
39819: LD_INT 1
39821: PUSH
39822: FOR_DOWNTO
39823: IFFALSE 39999
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39825: LD_ADDR_VAR 0 5
39829: PUSH
39830: LD_EXP 102
39834: PUSH
39835: LD_VAR 0 4
39839: ARRAY
39840: PUSH
39841: LD_VAR 0 3
39845: ARRAY
39846: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39847: LD_VAR 0 5
39851: PUSH
39852: LD_INT 1
39854: ARRAY
39855: PPUSH
39856: CALL_OW 302
39860: NOT
39861: IFTRUE 39889
39863: PUSH
39864: LD_VAR 0 5
39868: PUSH
39869: LD_INT 1
39871: ARRAY
39872: PPUSH
39873: CALL_OW 255
39877: PUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 255
39887: NONEQUAL
39888: OR
39889: IFFALSE 39997
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39891: LD_VAR 0 5
39895: PUSH
39896: LD_INT 1
39898: ARRAY
39899: PPUSH
39900: CALL_OW 305
39904: IFFALSE 39932
39906: PUSH
39907: LD_VAR 0 5
39911: PUSH
39912: LD_INT 1
39914: ARRAY
39915: PPUSH
39916: CALL_OW 255
39920: PUSH
39921: LD_VAR 0 1
39925: PPUSH
39926: CALL_OW 255
39930: EQUAL
39931: AND
39932: IFFALSE 39956
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39934: LD_VAR 0 5
39938: PUSH
39939: LD_INT 1
39941: ARRAY
39942: PPUSH
39943: LD_VAR 0 5
39947: PUSH
39948: LD_INT 2
39950: ARRAY
39951: PPUSH
39952: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39956: LD_ADDR_EXP 102
39960: PUSH
39961: LD_EXP 102
39965: PPUSH
39966: LD_VAR 0 4
39970: PPUSH
39971: LD_EXP 102
39975: PUSH
39976: LD_VAR 0 4
39980: ARRAY
39981: PPUSH
39982: LD_VAR 0 3
39986: PPUSH
39987: CALL_OW 3
39991: PPUSH
39992: CALL_OW 1
39996: ST_TO_ADDR
// end ; end ;
39997: GO 39822
39999: POP
40000: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40001: LD_VAR 0 1
40005: PPUSH
40006: LD_EXP 102
40010: PUSH
40011: LD_VAR 0 4
40015: ARRAY
40016: PUSH
40017: LD_INT 0
40019: PLUS
40020: PPUSH
40021: CALL_OW 505
// end ;
40025: LD_VAR 0 2
40029: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
40030: LD_INT 0
40032: PPUSH
40033: PPUSH
40034: PPUSH
40035: PPUSH
// if not hack in hackTanks then
40036: LD_VAR 0 1
40040: PUSH
40041: LD_EXP 101
40045: IN
40046: NOT
40047: IFFALSE 40051
// exit ;
40049: GO 40136
// index := GetElementIndex ( hackTanks , hack ) ;
40051: LD_ADDR_VAR 0 5
40055: PUSH
40056: LD_EXP 101
40060: PPUSH
40061: LD_VAR 0 1
40065: PPUSH
40066: CALL 48094 0 2
40070: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
40071: LD_ADDR_VAR 0 4
40075: PUSH
40076: DOUBLE
40077: LD_INT 1
40079: DEC
40080: ST_TO_ADDR
40081: LD_EXP 102
40085: PUSH
40086: LD_VAR 0 5
40090: ARRAY
40091: PUSH
40092: FOR_TO
40093: IFFALSE 40134
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
40095: LD_EXP 102
40099: PUSH
40100: LD_VAR 0 5
40104: ARRAY
40105: PUSH
40106: LD_VAR 0 4
40110: ARRAY
40111: PUSH
40112: LD_INT 1
40114: ARRAY
40115: PUSH
40116: LD_VAR 0 2
40120: EQUAL
40121: IFFALSE 40132
// KillUnit ( vehicle ) ;
40123: LD_VAR 0 2
40127: PPUSH
40128: CALL_OW 66
40132: GO 40092
40134: POP
40135: POP
// end ;
40136: LD_VAR 0 3
40140: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
40141: LD_EXP 106
40145: NOT
40146: IFFALSE 40279
40148: GO 40150
40150: DISABLE
40151: LD_INT 0
40153: PPUSH
// begin initMiner := true ;
40154: LD_ADDR_EXP 106
40158: PUSH
40159: LD_INT 1
40161: ST_TO_ADDR
// minersList := [ ] ;
40162: LD_ADDR_EXP 107
40166: PUSH
40167: EMPTY
40168: ST_TO_ADDR
// minerMinesList := [ ] ;
40169: LD_ADDR_EXP 108
40173: PUSH
40174: EMPTY
40175: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
40176: LD_ADDR_EXP 109
40180: PUSH
40181: LD_INT 10
40183: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
40184: LD_ADDR_VAR 0 1
40188: PUSH
40189: LD_INT 34
40191: PUSH
40192: LD_INT 81
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PPUSH
40199: CALL_OW 69
40203: PUSH
40204: FOR_IN
40205: IFFALSE 40277
// begin if not i in minersList then
40207: LD_VAR 0 1
40211: PUSH
40212: LD_EXP 107
40216: IN
40217: NOT
40218: IFFALSE 40275
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
40220: LD_ADDR_EXP 107
40224: PUSH
40225: LD_EXP 107
40229: PPUSH
40230: LD_EXP 107
40234: PUSH
40235: LD_INT 1
40237: PLUS
40238: PPUSH
40239: LD_VAR 0 1
40243: PPUSH
40244: CALL_OW 1
40248: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
40249: LD_ADDR_EXP 108
40253: PUSH
40254: LD_EXP 108
40258: PPUSH
40259: LD_EXP 108
40263: PUSH
40264: LD_INT 1
40266: PLUS
40267: PPUSH
40268: EMPTY
40269: PPUSH
40270: CALL_OW 1
40274: ST_TO_ADDR
// end end ;
40275: GO 40204
40277: POP
40278: POP
// end ;
40279: PPOPN 1
40281: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
40282: LD_EXP 106
40286: IFFALSE 40317
40288: PUSH
40289: LD_EXP 108
40293: PPUSH
40294: CALL 45393 0 1
40298: IFTRUE 40316
40300: PUSH
40301: LD_INT 34
40303: PUSH
40304: LD_INT 81
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PPUSH
40311: CALL_OW 69
40315: OR
40316: AND
40317: IFFALSE 40837
40319: GO 40321
40321: DISABLE
40322: LD_INT 0
40324: PPUSH
40325: PPUSH
40326: PPUSH
40327: PPUSH
// begin enable ;
40328: ENABLE
// for i := minerMinesList downto 1 do
40329: LD_ADDR_VAR 0 1
40333: PUSH
40334: DOUBLE
40335: LD_EXP 108
40339: INC
40340: ST_TO_ADDR
40341: LD_INT 1
40343: PUSH
40344: FOR_DOWNTO
40345: IFFALSE 40835
// begin side := GetSide ( minersList [ i ] ) ;
40347: LD_ADDR_VAR 0 3
40351: PUSH
40352: LD_EXP 107
40356: PUSH
40357: LD_VAR 0 1
40361: ARRAY
40362: PPUSH
40363: CALL_OW 255
40367: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
40368: LD_EXP 107
40372: PUSH
40373: LD_VAR 0 1
40377: ARRAY
40378: PPUSH
40379: CALL_OW 300
40383: IFFALSE 40404
40385: PUSH
40386: LD_VAR 0 3
40390: PUSH
40391: LD_OWVAR 2
40395: PUSH
40396: LD_INT 9
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: IN
40403: AND
40404: IFFALSE 40437
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
40406: LD_EXP 107
40410: PUSH
40411: LD_VAR 0 1
40415: ARRAY
40416: PPUSH
40417: LD_EXP 108
40421: PUSH
40422: LD_VAR 0 1
40426: ARRAY
40427: PPUSH
40428: CALL 45393 0 1
40432: PPUSH
40433: CALL_OW 505
// if not minerMinesList [ i ] then
40437: LD_EXP 108
40441: PUSH
40442: LD_VAR 0 1
40446: ARRAY
40447: NOT
40448: IFFALSE 40452
// continue ;
40450: GO 40344
// for j := minerMinesList [ i ] downto 1 do
40452: LD_ADDR_VAR 0 2
40456: PUSH
40457: DOUBLE
40458: LD_EXP 108
40462: PUSH
40463: LD_VAR 0 1
40467: ARRAY
40468: INC
40469: ST_TO_ADDR
40470: LD_INT 1
40472: PUSH
40473: FOR_DOWNTO
40474: IFFALSE 40831
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
40476: LD_EXP 107
40480: PUSH
40481: LD_VAR 0 1
40485: ARRAY
40486: PPUSH
40487: CALL_OW 301
40491: IFTRUE 40511
40493: PUSH
40494: LD_EXP 107
40498: PUSH
40499: LD_VAR 0 1
40503: ARRAY
40504: PPUSH
40505: CALL_OW 305
40509: NOT
40510: OR
40511: IFFALSE 40602
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40513: LD_EXP 108
40517: PUSH
40518: LD_VAR 0 1
40522: ARRAY
40523: PUSH
40524: LD_VAR 0 2
40528: ARRAY
40529: PUSH
40530: LD_INT 1
40532: ARRAY
40533: PPUSH
40534: LD_EXP 108
40538: PUSH
40539: LD_VAR 0 1
40543: ARRAY
40544: PUSH
40545: LD_VAR 0 2
40549: ARRAY
40550: PUSH
40551: LD_INT 2
40553: ARRAY
40554: PPUSH
40555: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40559: LD_ADDR_EXP 108
40563: PUSH
40564: LD_EXP 108
40568: PPUSH
40569: LD_VAR 0 1
40573: PPUSH
40574: LD_EXP 108
40578: PUSH
40579: LD_VAR 0 1
40583: ARRAY
40584: PPUSH
40585: LD_VAR 0 2
40589: PPUSH
40590: CALL_OW 3
40594: PPUSH
40595: CALL_OW 1
40599: ST_TO_ADDR
// continue ;
40600: GO 40473
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40602: LD_ADDR_VAR 0 4
40606: PUSH
40607: LD_EXP 108
40611: PUSH
40612: LD_VAR 0 1
40616: ARRAY
40617: PUSH
40618: LD_VAR 0 2
40622: ARRAY
40623: PUSH
40624: LD_INT 1
40626: ARRAY
40627: PPUSH
40628: LD_EXP 108
40632: PUSH
40633: LD_VAR 0 1
40637: ARRAY
40638: PUSH
40639: LD_VAR 0 2
40643: ARRAY
40644: PUSH
40645: LD_INT 2
40647: ARRAY
40648: PPUSH
40649: CALL_OW 428
40653: ST_TO_ADDR
// if not tmp then
40654: LD_VAR 0 4
40658: NOT
40659: IFFALSE 40663
// continue ;
40661: GO 40473
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40663: LD_VAR 0 4
40667: PUSH
40668: LD_INT 81
40670: PUSH
40671: LD_VAR 0 3
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PPUSH
40680: CALL_OW 69
40684: IN
40685: IFFALSE 40735
40687: PUSH
40688: LD_EXP 108
40692: PUSH
40693: LD_VAR 0 1
40697: ARRAY
40698: PUSH
40699: LD_VAR 0 2
40703: ARRAY
40704: PUSH
40705: LD_INT 1
40707: ARRAY
40708: PPUSH
40709: LD_EXP 108
40713: PUSH
40714: LD_VAR 0 1
40718: ARRAY
40719: PUSH
40720: LD_VAR 0 2
40724: ARRAY
40725: PUSH
40726: LD_INT 2
40728: ARRAY
40729: PPUSH
40730: CALL_OW 458
40734: AND
40735: IFFALSE 40829
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40737: LD_EXP 108
40741: PUSH
40742: LD_VAR 0 1
40746: ARRAY
40747: PUSH
40748: LD_VAR 0 2
40752: ARRAY
40753: PUSH
40754: LD_INT 1
40756: ARRAY
40757: PPUSH
40758: LD_EXP 108
40762: PUSH
40763: LD_VAR 0 1
40767: ARRAY
40768: PUSH
40769: LD_VAR 0 2
40773: ARRAY
40774: PUSH
40775: LD_INT 2
40777: ARRAY
40778: PPUSH
40779: LD_VAR 0 3
40783: PPUSH
40784: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40788: LD_ADDR_EXP 108
40792: PUSH
40793: LD_EXP 108
40797: PPUSH
40798: LD_VAR 0 1
40802: PPUSH
40803: LD_EXP 108
40807: PUSH
40808: LD_VAR 0 1
40812: ARRAY
40813: PPUSH
40814: LD_VAR 0 2
40818: PPUSH
40819: CALL_OW 3
40823: PPUSH
40824: CALL_OW 1
40828: ST_TO_ADDR
// end ; end ;
40829: GO 40473
40831: POP
40832: POP
// end ;
40833: GO 40344
40835: POP
40836: POP
// end ;
40837: PPOPN 4
40839: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
40840: LD_INT 0
40842: PPUSH
40843: PPUSH
40844: PPUSH
40845: PPUSH
// result := false ;
40846: LD_ADDR_VAR 0 4
40850: PUSH
40851: LD_INT 0
40853: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40854: LD_VAR 0 1
40858: PPUSH
40859: CALL_OW 264
40863: PUSH
40864: LD_INT 81
40866: EQUAL
40867: NOT
40868: IFFALSE 40872
// exit ;
40870: GO 41242
// side := GetSide ( unit ) ;
40872: LD_ADDR_VAR 0 6
40876: PUSH
40877: LD_VAR 0 1
40881: PPUSH
40882: CALL_OW 255
40886: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
40887: LD_ADDR_VAR 0 5
40891: PUSH
40892: LD_EXP 107
40896: PPUSH
40897: LD_VAR 0 1
40901: PPUSH
40902: CALL 48094 0 2
40906: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40907: LD_EXP 108
40911: PUSH
40912: LD_VAR 0 5
40916: ARRAY
40917: PUSH
40918: LD_EXP 109
40922: GREATEREQUAL
40923: IFFALSE 40927
// exit ;
40925: GO 41242
// ComMoveXY ( unit , x , y ) ;
40927: LD_VAR 0 1
40931: PPUSH
40932: LD_VAR 0 2
40936: PPUSH
40937: LD_VAR 0 3
40941: PPUSH
40942: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40946: LD_INT 35
40948: PPUSH
40949: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40953: LD_VAR 0 1
40957: PPUSH
40958: LD_VAR 0 2
40962: PPUSH
40963: LD_VAR 0 3
40967: PPUSH
40968: CALL 80150 0 3
40972: NOT
40973: IFFALSE 40986
40975: PUSH
40976: LD_VAR 0 1
40980: PPUSH
40981: CALL_OW 314
40985: AND
40986: IFFALSE 40990
// exit ;
40988: GO 41242
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40990: LD_VAR 0 2
40994: PPUSH
40995: LD_VAR 0 3
40999: PPUSH
41000: CALL_OW 428
41004: PUSH
41005: LD_VAR 0 1
41009: EQUAL
41010: IFFALSE 41024
41012: PUSH
41013: LD_VAR 0 1
41017: PPUSH
41018: CALL_OW 314
41022: NOT
41023: AND
41024: IFFALSE 40946
// if MineAtPos ( x , y ) then
41026: LD_VAR 0 2
41030: PPUSH
41031: LD_VAR 0 3
41035: PPUSH
41036: CALL_OW 458
41040: IFFALSE 41044
// exit ;
41042: GO 41242
// if your_side = side then
41044: LD_OWVAR 2
41048: PUSH
41049: LD_VAR 0 6
41053: EQUAL
41054: IFFALSE 41073
// PlaySoundXY ( x , y , PlantMine ) ;
41056: LD_VAR 0 2
41060: PPUSH
41061: LD_VAR 0 3
41065: PPUSH
41066: LD_STRING PlantMine
41068: PPUSH
41069: CALL_OW 366
// repeat wait ( 1 ) ;
41073: LD_INT 1
41075: PPUSH
41076: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
41080: LD_VAR 0 2
41084: PPUSH
41085: LD_VAR 0 3
41089: PPUSH
41090: LD_VAR 0 6
41094: PPUSH
41095: LD_INT 0
41097: PPUSH
41098: CALL_OW 454
41102: IFFALSE 41073
// if MineAtPos ( x , y ) then
41104: LD_VAR 0 2
41108: PPUSH
41109: LD_VAR 0 3
41113: PPUSH
41114: CALL_OW 458
41118: IFFALSE 41234
// begin for i in minerMinesList [ index ] do
41120: LD_ADDR_VAR 0 7
41124: PUSH
41125: LD_EXP 108
41129: PUSH
41130: LD_VAR 0 5
41134: ARRAY
41135: PUSH
41136: FOR_IN
41137: IFFALSE 41179
// if i [ 1 ] = x and i [ 2 ] = y then
41139: LD_VAR 0 7
41143: PUSH
41144: LD_INT 1
41146: ARRAY
41147: PUSH
41148: LD_VAR 0 2
41152: EQUAL
41153: IFFALSE 41171
41155: PUSH
41156: LD_VAR 0 7
41160: PUSH
41161: LD_INT 2
41163: ARRAY
41164: PUSH
41165: LD_VAR 0 3
41169: EQUAL
41170: AND
41171: IFFALSE 41177
// exit ;
41173: POP
41174: POP
41175: GO 41242
41177: GO 41136
41179: POP
41180: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
41181: LD_ADDR_EXP 108
41185: PUSH
41186: LD_EXP 108
41190: PPUSH
41191: LD_VAR 0 5
41195: PUSH
41196: LD_EXP 108
41200: PUSH
41201: LD_VAR 0 5
41205: ARRAY
41206: PUSH
41207: LD_INT 1
41209: PLUS
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PPUSH
41215: LD_VAR 0 2
41219: PUSH
41220: LD_VAR 0 3
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PPUSH
41229: CALL 48311 0 3
41233: ST_TO_ADDR
// end ; result := true ;
41234: LD_ADDR_VAR 0 4
41238: PUSH
41239: LD_INT 1
41241: ST_TO_ADDR
// end ;
41242: LD_VAR 0 4
41246: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
41247: LD_INT 0
41249: PPUSH
41250: PPUSH
41251: PPUSH
// if not unit in minersList then
41252: LD_VAR 0 1
41256: PUSH
41257: LD_EXP 107
41261: IN
41262: NOT
41263: IFFALSE 41267
// exit ;
41265: GO 41474
// index := GetElementIndex ( minersList , unit ) ;
41267: LD_ADDR_VAR 0 6
41271: PUSH
41272: LD_EXP 107
41276: PPUSH
41277: LD_VAR 0 1
41281: PPUSH
41282: CALL 48094 0 2
41286: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
41287: LD_ADDR_VAR 0 5
41291: PUSH
41292: DOUBLE
41293: LD_EXP 108
41297: PUSH
41298: LD_VAR 0 6
41302: ARRAY
41303: INC
41304: ST_TO_ADDR
41305: LD_INT 1
41307: PUSH
41308: FOR_DOWNTO
41309: IFFALSE 41472
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
41311: LD_EXP 108
41315: PUSH
41316: LD_VAR 0 6
41320: ARRAY
41321: PUSH
41322: LD_VAR 0 5
41326: ARRAY
41327: PUSH
41328: LD_INT 1
41330: ARRAY
41331: PPUSH
41332: LD_EXP 108
41336: PUSH
41337: LD_VAR 0 6
41341: ARRAY
41342: PUSH
41343: LD_VAR 0 5
41347: ARRAY
41348: PUSH
41349: LD_INT 2
41351: ARRAY
41352: PPUSH
41353: LD_VAR 0 2
41357: PPUSH
41358: LD_VAR 0 3
41362: PPUSH
41363: CALL_OW 298
41367: PUSH
41368: LD_INT 6
41370: LESS
41371: IFFALSE 41470
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41373: LD_EXP 108
41377: PUSH
41378: LD_VAR 0 6
41382: ARRAY
41383: PUSH
41384: LD_VAR 0 5
41388: ARRAY
41389: PUSH
41390: LD_INT 1
41392: ARRAY
41393: PPUSH
41394: LD_EXP 108
41398: PUSH
41399: LD_VAR 0 6
41403: ARRAY
41404: PUSH
41405: LD_VAR 0 5
41409: ARRAY
41410: PUSH
41411: LD_INT 2
41413: ARRAY
41414: PPUSH
41415: LD_VAR 0 1
41419: PPUSH
41420: CALL_OW 255
41424: PPUSH
41425: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41429: LD_ADDR_EXP 108
41433: PUSH
41434: LD_EXP 108
41438: PPUSH
41439: LD_VAR 0 6
41443: PPUSH
41444: LD_EXP 108
41448: PUSH
41449: LD_VAR 0 6
41453: ARRAY
41454: PPUSH
41455: LD_VAR 0 5
41459: PPUSH
41460: CALL_OW 3
41464: PPUSH
41465: CALL_OW 1
41469: ST_TO_ADDR
// end ; end ;
41470: GO 41308
41472: POP
41473: POP
// end ;
41474: LD_VAR 0 4
41478: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41479: LD_INT 0
41481: PPUSH
41482: PPUSH
41483: PPUSH
41484: PPUSH
41485: PPUSH
41486: PPUSH
41487: PPUSH
41488: PPUSH
41489: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41490: LD_VAR 0 1
41494: PPUSH
41495: CALL_OW 264
41499: PUSH
41500: LD_INT 81
41502: EQUAL
41503: NOT
41504: IFTRUE 41519
41506: PUSH
41507: LD_VAR 0 1
41511: PUSH
41512: LD_EXP 107
41516: IN
41517: NOT
41518: OR
41519: IFFALSE 41523
// exit ;
41521: GO 41849
// index := GetElementIndex ( minersList , unit ) ;
41523: LD_ADDR_VAR 0 6
41527: PUSH
41528: LD_EXP 107
41532: PPUSH
41533: LD_VAR 0 1
41537: PPUSH
41538: CALL 48094 0 2
41542: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41543: LD_ADDR_VAR 0 8
41547: PUSH
41548: LD_EXP 109
41552: PUSH
41553: LD_EXP 108
41557: PUSH
41558: LD_VAR 0 6
41562: ARRAY
41563: MINUS
41564: ST_TO_ADDR
// if not minesFreeAmount then
41565: LD_VAR 0 8
41569: NOT
41570: IFFALSE 41574
// exit ;
41572: GO 41849
// tmp := [ ] ;
41574: LD_ADDR_VAR 0 7
41578: PUSH
41579: EMPTY
41580: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41581: LD_ADDR_VAR 0 5
41585: PUSH
41586: DOUBLE
41587: LD_INT 1
41589: DEC
41590: ST_TO_ADDR
41591: LD_VAR 0 8
41595: PUSH
41596: FOR_TO
41597: IFFALSE 41796
// begin _d := rand ( 0 , 5 ) ;
41599: LD_ADDR_VAR 0 11
41603: PUSH
41604: LD_INT 0
41606: PPUSH
41607: LD_INT 5
41609: PPUSH
41610: CALL_OW 12
41614: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41615: LD_ADDR_VAR 0 12
41619: PUSH
41620: LD_INT 2
41622: PPUSH
41623: LD_INT 6
41625: PPUSH
41626: CALL_OW 12
41630: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41631: LD_ADDR_VAR 0 9
41635: PUSH
41636: LD_VAR 0 2
41640: PPUSH
41641: LD_VAR 0 11
41645: PPUSH
41646: LD_VAR 0 12
41650: PPUSH
41651: CALL_OW 272
41655: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41656: LD_ADDR_VAR 0 10
41660: PUSH
41661: LD_VAR 0 3
41665: PPUSH
41666: LD_VAR 0 11
41670: PPUSH
41671: LD_VAR 0 12
41675: PPUSH
41676: CALL_OW 273
41680: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41681: LD_VAR 0 9
41685: PPUSH
41686: LD_VAR 0 10
41690: PPUSH
41691: CALL_OW 488
41695: IFFALSE 41719
41697: PUSH
41698: LD_VAR 0 9
41702: PUSH
41703: LD_VAR 0 10
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_VAR 0 7
41716: IN
41717: NOT
41718: AND
41719: IFFALSE 41738
41721: PUSH
41722: LD_VAR 0 9
41726: PPUSH
41727: LD_VAR 0 10
41731: PPUSH
41732: CALL_OW 458
41736: NOT
41737: AND
41738: IFFALSE 41780
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41740: LD_ADDR_VAR 0 7
41744: PUSH
41745: LD_VAR 0 7
41749: PPUSH
41750: LD_VAR 0 7
41754: PUSH
41755: LD_INT 1
41757: PLUS
41758: PPUSH
41759: LD_VAR 0 9
41763: PUSH
41764: LD_VAR 0 10
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PPUSH
41773: CALL_OW 1
41777: ST_TO_ADDR
41778: GO 41794
// i := i - 1 ;
41780: LD_ADDR_VAR 0 5
41784: PUSH
41785: LD_VAR 0 5
41789: PUSH
41790: LD_INT 1
41792: MINUS
41793: ST_TO_ADDR
// end ;
41794: GO 41596
41796: POP
41797: POP
// for i in tmp do
41798: LD_ADDR_VAR 0 5
41802: PUSH
41803: LD_VAR 0 7
41807: PUSH
41808: FOR_IN
41809: IFFALSE 41847
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41811: LD_VAR 0 1
41815: PPUSH
41816: LD_VAR 0 5
41820: PUSH
41821: LD_INT 1
41823: ARRAY
41824: PPUSH
41825: LD_VAR 0 5
41829: PUSH
41830: LD_INT 2
41832: ARRAY
41833: PPUSH
41834: CALL 40840 0 3
41838: NOT
41839: IFFALSE 41845
// exit ;
41841: POP
41842: POP
41843: GO 41849
41845: GO 41808
41847: POP
41848: POP
// end ;
41849: LD_VAR 0 4
41853: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
41854: LD_INT 0
41856: PPUSH
41857: PPUSH
41858: PPUSH
41859: PPUSH
41860: PPUSH
41861: PPUSH
41862: PPUSH
41863: PPUSH
41864: PPUSH
// if GetClass ( unit ) <> class_sniper then
41865: LD_VAR 0 1
41869: PPUSH
41870: CALL_OW 257
41874: PUSH
41875: LD_INT 5
41877: NONEQUAL
41878: IFFALSE 41882
// exit ;
41880: GO 42352
// dist := 8 ;
41882: LD_ADDR_VAR 0 5
41886: PUSH
41887: LD_INT 8
41889: ST_TO_ADDR
// viewRange := 12 ;
41890: LD_ADDR_VAR 0 8
41894: PUSH
41895: LD_INT 12
41897: ST_TO_ADDR
// side := GetSide ( unit ) ;
41898: LD_ADDR_VAR 0 6
41902: PUSH
41903: LD_VAR 0 1
41907: PPUSH
41908: CALL_OW 255
41912: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41913: LD_INT 61
41915: PPUSH
41916: LD_VAR 0 6
41920: PPUSH
41921: CALL_OW 321
41925: PUSH
41926: LD_INT 2
41928: EQUAL
41929: IFFALSE 41939
// viewRange := 16 ;
41931: LD_ADDR_VAR 0 8
41935: PUSH
41936: LD_INT 16
41938: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41939: LD_VAR 0 1
41943: PPUSH
41944: LD_VAR 0 2
41948: PPUSH
41949: LD_VAR 0 3
41953: PPUSH
41954: CALL_OW 297
41958: PUSH
41959: LD_VAR 0 5
41963: GREATER
41964: IFFALSE 42043
// begin ComMoveXY ( unit , x , y ) ;
41966: LD_VAR 0 1
41970: PPUSH
41971: LD_VAR 0 2
41975: PPUSH
41976: LD_VAR 0 3
41980: PPUSH
41981: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41985: LD_INT 35
41987: PPUSH
41988: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41992: LD_VAR 0 1
41996: PPUSH
41997: LD_VAR 0 2
42001: PPUSH
42002: LD_VAR 0 3
42006: PPUSH
42007: CALL 80150 0 3
42011: NOT
42012: IFFALSE 42016
// exit ;
42014: GO 42352
// until GetDistUnitXY ( unit , x , y ) < dist ;
42016: LD_VAR 0 1
42020: PPUSH
42021: LD_VAR 0 2
42025: PPUSH
42026: LD_VAR 0 3
42030: PPUSH
42031: CALL_OW 297
42035: PUSH
42036: LD_VAR 0 5
42040: LESS
42041: IFFALSE 41985
// end ; ComTurnXY ( unit , x , y ) ;
42043: LD_VAR 0 1
42047: PPUSH
42048: LD_VAR 0 2
42052: PPUSH
42053: LD_VAR 0 3
42057: PPUSH
42058: CALL_OW 118
// repeat if Multiplayer then
42062: LD_OWVAR 4
42066: IFFALSE 42077
// wait ( 35 ) else
42068: LD_INT 35
42070: PPUSH
42071: CALL_OW 67
42075: GO 42084
// wait ( 5 ) ;
42077: LD_INT 5
42079: PPUSH
42080: CALL_OW 67
// _d := GetDir ( unit ) ;
42084: LD_ADDR_VAR 0 11
42088: PUSH
42089: LD_VAR 0 1
42093: PPUSH
42094: CALL_OW 254
42098: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
42099: LD_ADDR_VAR 0 7
42103: PUSH
42104: LD_VAR 0 1
42108: PPUSH
42109: CALL_OW 250
42113: PPUSH
42114: LD_VAR 0 1
42118: PPUSH
42119: CALL_OW 251
42123: PPUSH
42124: LD_VAR 0 2
42128: PPUSH
42129: LD_VAR 0 3
42133: PPUSH
42134: CALL 82786 0 4
42138: ST_TO_ADDR
// until dir = _d ;
42139: LD_VAR 0 7
42143: PUSH
42144: LD_VAR 0 11
42148: EQUAL
42149: IFFALSE 42062
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
42151: LD_ADDR_VAR 0 9
42155: PUSH
42156: LD_VAR 0 1
42160: PPUSH
42161: CALL_OW 250
42165: PPUSH
42166: LD_VAR 0 7
42170: PPUSH
42171: LD_VAR 0 5
42175: PPUSH
42176: CALL_OW 272
42180: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
42181: LD_ADDR_VAR 0 10
42185: PUSH
42186: LD_VAR 0 1
42190: PPUSH
42191: CALL_OW 251
42195: PPUSH
42196: LD_VAR 0 7
42200: PPUSH
42201: LD_VAR 0 5
42205: PPUSH
42206: CALL_OW 273
42210: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42211: LD_VAR 0 9
42215: PPUSH
42216: LD_VAR 0 10
42220: PPUSH
42221: CALL_OW 488
42225: NOT
42226: IFFALSE 42230
// exit ;
42228: GO 42352
// ComAnimCustom ( unit , 1 ) ;
42230: LD_VAR 0 1
42234: PPUSH
42235: LD_INT 1
42237: PPUSH
42238: CALL_OW 592
// p := 0 ;
42242: LD_ADDR_VAR 0 12
42246: PUSH
42247: LD_INT 0
42249: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
42250: LD_VAR 0 9
42254: PPUSH
42255: LD_VAR 0 10
42259: PPUSH
42260: LD_VAR 0 6
42264: PPUSH
42265: LD_VAR 0 8
42269: PPUSH
42270: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
42274: LD_INT 35
42276: PPUSH
42277: CALL_OW 67
// p := Inc ( p ) ;
42281: LD_ADDR_VAR 0 12
42285: PUSH
42286: LD_VAR 0 12
42290: PPUSH
42291: CALL 82742 0 1
42295: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
42296: LD_VAR 0 12
42300: PUSH
42301: LD_INT 3
42303: EQUAL
42304: IFTRUE 42318
42306: PUSH
42307: LD_VAR 0 1
42311: PPUSH
42312: CALL_OW 302
42316: NOT
42317: OR
42318: IFTRUE 42331
42320: PUSH
42321: LD_VAR 0 1
42325: PPUSH
42326: CALL_OW 301
42330: OR
42331: IFFALSE 42274
// RemoveSeeing ( _x , _y , side ) ;
42333: LD_VAR 0 9
42337: PPUSH
42338: LD_VAR 0 10
42342: PPUSH
42343: LD_VAR 0 6
42347: PPUSH
42348: CALL_OW 331
// end ;
42352: LD_VAR 0 4
42356: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
42357: LD_INT 0
42359: PPUSH
42360: PPUSH
42361: PPUSH
42362: PPUSH
42363: PPUSH
42364: PPUSH
42365: PPUSH
42366: PPUSH
42367: PPUSH
42368: PPUSH
42369: PPUSH
// if not unit then
42370: LD_VAR 0 1
42374: NOT
42375: IFFALSE 42379
// exit ;
42377: GO 42650
// side := GetSide ( unit ) ;
42379: LD_ADDR_VAR 0 3
42383: PUSH
42384: LD_VAR 0 1
42388: PPUSH
42389: CALL_OW 255
42393: ST_TO_ADDR
// x := GetX ( unit ) ;
42394: LD_ADDR_VAR 0 5
42398: PUSH
42399: LD_VAR 0 1
42403: PPUSH
42404: CALL_OW 250
42408: ST_TO_ADDR
// y := GetY ( unit ) ;
42409: LD_ADDR_VAR 0 6
42413: PUSH
42414: LD_VAR 0 1
42418: PPUSH
42419: CALL_OW 251
42423: ST_TO_ADDR
// r := 8 ;
42424: LD_ADDR_VAR 0 4
42428: PUSH
42429: LD_INT 8
42431: ST_TO_ADDR
// if x - r < 0 then
42432: LD_VAR 0 5
42436: PUSH
42437: LD_VAR 0 4
42441: MINUS
42442: PUSH
42443: LD_INT 0
42445: LESS
42446: IFFALSE 42458
// min_x := 0 else
42448: LD_ADDR_VAR 0 7
42452: PUSH
42453: LD_INT 0
42455: ST_TO_ADDR
42456: GO 42474
// min_x := x - r ;
42458: LD_ADDR_VAR 0 7
42462: PUSH
42463: LD_VAR 0 5
42467: PUSH
42468: LD_VAR 0 4
42472: MINUS
42473: ST_TO_ADDR
// if y - r < 0 then
42474: LD_VAR 0 6
42478: PUSH
42479: LD_VAR 0 4
42483: MINUS
42484: PUSH
42485: LD_INT 0
42487: LESS
42488: IFFALSE 42500
// min_y := 0 else
42490: LD_ADDR_VAR 0 8
42494: PUSH
42495: LD_INT 0
42497: ST_TO_ADDR
42498: GO 42516
// min_y := y - r ;
42500: LD_ADDR_VAR 0 8
42504: PUSH
42505: LD_VAR 0 6
42509: PUSH
42510: LD_VAR 0 4
42514: MINUS
42515: ST_TO_ADDR
// max_x := x + r ;
42516: LD_ADDR_VAR 0 9
42520: PUSH
42521: LD_VAR 0 5
42525: PUSH
42526: LD_VAR 0 4
42530: PLUS
42531: ST_TO_ADDR
// max_y := y + r ;
42532: LD_ADDR_VAR 0 10
42536: PUSH
42537: LD_VAR 0 6
42541: PUSH
42542: LD_VAR 0 4
42546: PLUS
42547: ST_TO_ADDR
// for _x = min_x to max_x do
42548: LD_ADDR_VAR 0 11
42552: PUSH
42553: DOUBLE
42554: LD_VAR 0 7
42558: DEC
42559: ST_TO_ADDR
42560: LD_VAR 0 9
42564: PUSH
42565: FOR_TO
42566: IFFALSE 42648
// for _y = min_y to max_y do
42568: LD_ADDR_VAR 0 12
42572: PUSH
42573: DOUBLE
42574: LD_VAR 0 8
42578: DEC
42579: ST_TO_ADDR
42580: LD_VAR 0 10
42584: PUSH
42585: FOR_TO
42586: IFFALSE 42644
// begin if not ValidHex ( _x , _y ) then
42588: LD_VAR 0 11
42592: PPUSH
42593: LD_VAR 0 12
42597: PPUSH
42598: CALL_OW 488
42602: NOT
42603: IFFALSE 42607
// continue ;
42605: GO 42585
// if MineAtPos ( _x , _y ) then
42607: LD_VAR 0 11
42611: PPUSH
42612: LD_VAR 0 12
42616: PPUSH
42617: CALL_OW 458
42621: IFFALSE 42642
// ViewMineAtPos ( _x , _y , side ) ;
42623: LD_VAR 0 11
42627: PPUSH
42628: LD_VAR 0 12
42632: PPUSH
42633: LD_VAR 0 3
42637: PPUSH
42638: CALL_OW 457
// end ;
42642: GO 42585
42644: POP
42645: POP
42646: GO 42565
42648: POP
42649: POP
// end ;
42650: LD_VAR 0 2
42654: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
42655: LD_INT 0
42657: PPUSH
42658: PPUSH
42659: PPUSH
42660: PPUSH
42661: PPUSH
42662: PPUSH
42663: PPUSH
// if not units then
42664: LD_VAR 0 1
42668: NOT
42669: IFFALSE 42673
// exit ;
42671: GO 43137
// scaners := [ ] ;
42673: LD_ADDR_VAR 0 6
42677: PUSH
42678: EMPTY
42679: ST_TO_ADDR
// for i in units do
42680: LD_ADDR_VAR 0 3
42684: PUSH
42685: LD_VAR 0 1
42689: PUSH
42690: FOR_IN
42691: IFFALSE 42848
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
42693: LD_VAR 0 3
42697: PPUSH
42698: CALL_OW 264
42702: PUSH
42703: LD_INT 11
42705: NONEQUAL
42706: IFTRUE 42720
42708: PUSH
42709: LD_VAR 0 3
42713: PPUSH
42714: CALL_OW 302
42718: NOT
42719: OR
42720: IFTRUE 42737
42722: PUSH
42723: LD_VAR 0 3
42727: PPUSH
42728: CALL_OW 110
42732: PUSH
42733: LD_INT 502
42735: EQUAL
42736: OR
42737: IFFALSE 42741
// continue ;
42739: GO 42690
// ComStop ( i ) ;
42741: LD_VAR 0 3
42745: PPUSH
42746: CALL_OW 141
// x := GetX ( i ) ;
42750: LD_ADDR_VAR 0 4
42754: PUSH
42755: LD_VAR 0 3
42759: PPUSH
42760: CALL_OW 250
42764: ST_TO_ADDR
// y := GetY ( i ) ;
42765: LD_ADDR_VAR 0 5
42769: PUSH
42770: LD_VAR 0 3
42774: PPUSH
42775: CALL_OW 251
42779: ST_TO_ADDR
// if GetSide ( i ) = your_side then
42780: LD_VAR 0 3
42784: PPUSH
42785: CALL_OW 255
42789: PUSH
42790: LD_OWVAR 2
42794: EQUAL
42795: IFFALSE 42814
// PlaySoundXY ( x , y , mineDetector ) ;
42797: LD_VAR 0 4
42801: PPUSH
42802: LD_VAR 0 5
42806: PPUSH
42807: LD_STRING mineDetector
42809: PPUSH
42810: CALL_OW 366
// scaners := Join ( scaners , i ) ;
42814: LD_ADDR_VAR 0 6
42818: PUSH
42819: LD_VAR 0 6
42823: PPUSH
42824: LD_VAR 0 3
42828: PPUSH
42829: CALL 81369 0 2
42833: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
42834: LD_VAR 0 3
42838: PPUSH
42839: LD_INT 502
42841: PPUSH
42842: CALL_OW 109
// end ;
42846: GO 42690
42848: POP
42849: POP
// if not scaners then
42850: LD_VAR 0 6
42854: NOT
42855: IFFALSE 42859
// exit ;
42857: GO 43137
// wait ( 3 ) ;
42859: LD_INT 3
42861: PPUSH
42862: CALL_OW 67
// timer := 6 ;
42866: LD_ADDR_VAR 0 7
42870: PUSH
42871: LD_INT 6
42873: ST_TO_ADDR
// repeat for i in scaners do
42874: LD_ADDR_VAR 0 3
42878: PUSH
42879: LD_VAR 0 6
42883: PUSH
42884: FOR_IN
42885: IFFALSE 43035
// begin side := GetSide ( i ) ;
42887: LD_ADDR_VAR 0 8
42891: PUSH
42892: LD_VAR 0 3
42896: PPUSH
42897: CALL_OW 255
42901: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
42902: LD_VAR 0 3
42906: PPUSH
42907: CALL_OW 302
42911: NOT
42912: IFTRUE 42925
42914: PUSH
42915: LD_VAR 0 3
42919: PPUSH
42920: CALL_OW 314
42924: OR
42925: IFTRUE 42956
42927: PUSH
42928: LD_VAR 0 3
42932: PPUSH
42933: CALL_OW 263
42937: PUSH
42938: LD_INT 1
42940: EQUAL
42941: IFFALSE 42955
42943: PUSH
42944: LD_VAR 0 3
42948: PPUSH
42949: CALL_OW 311
42953: NOT
42954: AND
42955: OR
42956: IFFALSE 43000
// begin SetUnitDisplayNumber ( i , 0 ) ;
42958: LD_VAR 0 3
42962: PPUSH
42963: LD_INT 0
42965: PPUSH
42966: CALL_OW 505
// SetTag ( i , 0 ) ;
42970: LD_VAR 0 3
42974: PPUSH
42975: LD_INT 0
42977: PPUSH
42978: CALL_OW 109
// scaners := scaners diff i ;
42982: LD_ADDR_VAR 0 6
42986: PUSH
42987: LD_VAR 0 6
42991: PUSH
42992: LD_VAR 0 3
42996: DIFF
42997: ST_TO_ADDR
// continue ;
42998: GO 42884
// end ; if side in [ your_side , 9 ] then
43000: LD_VAR 0 8
43004: PUSH
43005: LD_OWVAR 2
43009: PUSH
43010: LD_INT 9
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: IN
43017: IFFALSE 43033
// SetUnitDisplayNumber ( i , timer ) ;
43019: LD_VAR 0 3
43023: PPUSH
43024: LD_VAR 0 7
43028: PPUSH
43029: CALL_OW 505
// end ;
43033: GO 42884
43035: POP
43036: POP
// if not scaners then
43037: LD_VAR 0 6
43041: NOT
43042: IFFALSE 43046
// exit ;
43044: GO 43137
// timer := Dec ( timer ) ;
43046: LD_ADDR_VAR 0 7
43050: PUSH
43051: LD_VAR 0 7
43055: PPUSH
43056: CALL 82764 0 1
43060: ST_TO_ADDR
// wait ( 0 0$1 ) ;
43061: LD_INT 35
43063: PPUSH
43064: CALL_OW 67
// until timer = 0 ;
43068: LD_VAR 0 7
43072: PUSH
43073: LD_INT 0
43075: EQUAL
43076: IFFALSE 42874
// if not scaners then
43078: LD_VAR 0 6
43082: NOT
43083: IFFALSE 43087
// exit ;
43085: GO 43137
// for i in scaners do
43087: LD_ADDR_VAR 0 3
43091: PUSH
43092: LD_VAR 0 6
43096: PUSH
43097: FOR_IN
43098: IFFALSE 43135
// begin SetUnitDisplayNumber ( i , 0 ) ;
43100: LD_VAR 0 3
43104: PPUSH
43105: LD_INT 0
43107: PPUSH
43108: CALL_OW 505
// SetTag ( i , 0 ) ;
43112: LD_VAR 0 3
43116: PPUSH
43117: LD_INT 0
43119: PPUSH
43120: CALL_OW 109
// RevealDetectorMine ( i ) ;
43124: LD_VAR 0 3
43128: PPUSH
43129: CALL 42357 0 1
// end ;
43133: GO 43097
43135: POP
43136: POP
// end ;
43137: LD_VAR 0 2
43141: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
43142: LD_INT 0
43144: PPUSH
// if p1 = mine_detector_mode then
43145: LD_VAR 0 2
43149: PUSH
43150: LD_INT 103
43152: EQUAL
43153: IFFALSE 43164
// DetectMine ( units ) ;
43155: LD_VAR 0 1
43159: PPUSH
43160: CALL 42655 0 1
// end ; end_of_file
43164: LD_VAR 0 7
43168: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
43169: LD_INT 0
43171: PPUSH
43172: PPUSH
// if exist_mode then
43173: LD_VAR 0 2
43177: IFFALSE 43223
// begin unit := CreateCharacter ( prefix & ident ) ;
43179: LD_ADDR_VAR 0 5
43183: PUSH
43184: LD_VAR 0 3
43188: PUSH
43189: LD_VAR 0 1
43193: STR
43194: PPUSH
43195: CALL_OW 34
43199: ST_TO_ADDR
// if unit then
43200: LD_VAR 0 5
43204: IFFALSE 43221
// DeleteCharacters ( prefix & ident ) ;
43206: LD_VAR 0 3
43210: PUSH
43211: LD_VAR 0 1
43215: STR
43216: PPUSH
43217: CALL_OW 40
// end else
43221: GO 43238
// unit := NewCharacter ( ident ) ;
43223: LD_ADDR_VAR 0 5
43227: PUSH
43228: LD_VAR 0 1
43232: PPUSH
43233: CALL_OW 25
43237: ST_TO_ADDR
// result := unit ;
43238: LD_ADDR_VAR 0 4
43242: PUSH
43243: LD_VAR 0 5
43247: ST_TO_ADDR
// end ;
43248: LD_VAR 0 4
43252: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
43253: LD_INT 0
43255: PPUSH
43256: PPUSH
// if exist_mode then
43257: LD_VAR 0 2
43261: IFFALSE 43286
// unit := CreateCharacter ( prefix & ident ) else
43263: LD_ADDR_VAR 0 5
43267: PUSH
43268: LD_VAR 0 3
43272: PUSH
43273: LD_VAR 0 1
43277: STR
43278: PPUSH
43279: CALL_OW 34
43283: ST_TO_ADDR
43284: GO 43301
// unit := NewCharacter ( ident ) ;
43286: LD_ADDR_VAR 0 5
43290: PUSH
43291: LD_VAR 0 1
43295: PPUSH
43296: CALL_OW 25
43300: ST_TO_ADDR
// result := unit ;
43301: LD_ADDR_VAR 0 4
43305: PUSH
43306: LD_VAR 0 5
43310: ST_TO_ADDR
// end ;
43311: LD_VAR 0 4
43315: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
43316: LD_INT 0
43318: PPUSH
43319: PPUSH
// if not side or not nation then
43320: LD_VAR 0 1
43324: NOT
43325: IFTRUE 43334
43327: PUSH
43328: LD_VAR 0 2
43332: NOT
43333: OR
43334: IFFALSE 43338
// exit ;
43336: GO 44132
// case nation of nation_american :
43338: LD_VAR 0 2
43342: PUSH
43343: LD_INT 1
43345: DOUBLE
43346: EQUAL
43347: IFTRUE 43351
43349: GO 43573
43351: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
43352: LD_ADDR_VAR 0 4
43356: PUSH
43357: LD_INT 35
43359: PUSH
43360: LD_INT 45
43362: PUSH
43363: LD_INT 46
43365: PUSH
43366: LD_INT 47
43368: PUSH
43369: LD_INT 82
43371: PUSH
43372: LD_INT 83
43374: PUSH
43375: LD_INT 84
43377: PUSH
43378: LD_INT 85
43380: PUSH
43381: LD_INT 86
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: LD_INT 6
43392: PUSH
43393: LD_INT 15
43395: PUSH
43396: LD_INT 16
43398: PUSH
43399: LD_INT 7
43401: PUSH
43402: LD_INT 12
43404: PUSH
43405: LD_INT 13
43407: PUSH
43408: LD_INT 10
43410: PUSH
43411: LD_INT 14
43413: PUSH
43414: LD_INT 20
43416: PUSH
43417: LD_INT 21
43419: PUSH
43420: LD_INT 22
43422: PUSH
43423: LD_INT 25
43425: PUSH
43426: LD_INT 32
43428: PUSH
43429: LD_INT 27
43431: PUSH
43432: LD_INT 36
43434: PUSH
43435: LD_INT 69
43437: PUSH
43438: LD_INT 39
43440: PUSH
43441: LD_INT 34
43443: PUSH
43444: LD_INT 40
43446: PUSH
43447: LD_INT 48
43449: PUSH
43450: LD_INT 49
43452: PUSH
43453: LD_INT 50
43455: PUSH
43456: LD_INT 51
43458: PUSH
43459: LD_INT 52
43461: PUSH
43462: LD_INT 53
43464: PUSH
43465: LD_INT 54
43467: PUSH
43468: LD_INT 55
43470: PUSH
43471: LD_INT 56
43473: PUSH
43474: LD_INT 57
43476: PUSH
43477: LD_INT 58
43479: PUSH
43480: LD_INT 59
43482: PUSH
43483: LD_INT 60
43485: PUSH
43486: LD_INT 61
43488: PUSH
43489: LD_INT 62
43491: PUSH
43492: LD_INT 80
43494: PUSH
43495: LD_INT 82
43497: PUSH
43498: LD_INT 83
43500: PUSH
43501: LD_INT 84
43503: PUSH
43504: LD_INT 85
43506: PUSH
43507: LD_INT 86
43509: PUSH
43510: LD_INT 90
43512: PUSH
43513: LD_INT 93
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: ST_TO_ADDR
43571: GO 44054
43573: LD_INT 2
43575: DOUBLE
43576: EQUAL
43577: IFTRUE 43581
43579: GO 43815
43581: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
43582: LD_ADDR_VAR 0 4
43586: PUSH
43587: LD_INT 35
43589: PUSH
43590: LD_INT 45
43592: PUSH
43593: LD_INT 46
43595: PUSH
43596: LD_INT 47
43598: PUSH
43599: LD_INT 82
43601: PUSH
43602: LD_INT 83
43604: PUSH
43605: LD_INT 84
43607: PUSH
43608: LD_INT 85
43610: PUSH
43611: LD_INT 87
43613: PUSH
43614: LD_INT 70
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 11
43622: PUSH
43623: LD_INT 3
43625: PUSH
43626: LD_INT 4
43628: PUSH
43629: LD_INT 5
43631: PUSH
43632: LD_INT 6
43634: PUSH
43635: LD_INT 15
43637: PUSH
43638: LD_INT 18
43640: PUSH
43641: LD_INT 7
43643: PUSH
43644: LD_INT 17
43646: PUSH
43647: LD_INT 8
43649: PUSH
43650: LD_INT 20
43652: PUSH
43653: LD_INT 21
43655: PUSH
43656: LD_INT 22
43658: PUSH
43659: LD_INT 72
43661: PUSH
43662: LD_INT 26
43664: PUSH
43665: LD_INT 69
43667: PUSH
43668: LD_INT 39
43670: PUSH
43671: LD_INT 40
43673: PUSH
43674: LD_INT 41
43676: PUSH
43677: LD_INT 42
43679: PUSH
43680: LD_INT 43
43682: PUSH
43683: LD_INT 48
43685: PUSH
43686: LD_INT 49
43688: PUSH
43689: LD_INT 50
43691: PUSH
43692: LD_INT 51
43694: PUSH
43695: LD_INT 52
43697: PUSH
43698: LD_INT 53
43700: PUSH
43701: LD_INT 54
43703: PUSH
43704: LD_INT 55
43706: PUSH
43707: LD_INT 56
43709: PUSH
43710: LD_INT 60
43712: PUSH
43713: LD_INT 61
43715: PUSH
43716: LD_INT 62
43718: PUSH
43719: LD_INT 66
43721: PUSH
43722: LD_INT 67
43724: PUSH
43725: LD_INT 68
43727: PUSH
43728: LD_INT 81
43730: PUSH
43731: LD_INT 82
43733: PUSH
43734: LD_INT 83
43736: PUSH
43737: LD_INT 84
43739: PUSH
43740: LD_INT 85
43742: PUSH
43743: LD_INT 87
43745: PUSH
43746: LD_INT 88
43748: PUSH
43749: LD_INT 92
43751: PUSH
43752: LD_INT 94
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: ST_TO_ADDR
43813: GO 44054
43815: LD_INT 3
43817: DOUBLE
43818: EQUAL
43819: IFTRUE 43823
43821: GO 44053
43823: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
43824: LD_ADDR_VAR 0 4
43828: PUSH
43829: LD_INT 46
43831: PUSH
43832: LD_INT 47
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: LD_INT 82
43843: PUSH
43844: LD_INT 83
43846: PUSH
43847: LD_INT 84
43849: PUSH
43850: LD_INT 85
43852: PUSH
43853: LD_INT 86
43855: PUSH
43856: LD_INT 11
43858: PUSH
43859: LD_INT 9
43861: PUSH
43862: LD_INT 20
43864: PUSH
43865: LD_INT 19
43867: PUSH
43868: LD_INT 21
43870: PUSH
43871: LD_INT 24
43873: PUSH
43874: LD_INT 22
43876: PUSH
43877: LD_INT 25
43879: PUSH
43880: LD_INT 28
43882: PUSH
43883: LD_INT 29
43885: PUSH
43886: LD_INT 30
43888: PUSH
43889: LD_INT 31
43891: PUSH
43892: LD_INT 37
43894: PUSH
43895: LD_INT 38
43897: PUSH
43898: LD_INT 32
43900: PUSH
43901: LD_INT 27
43903: PUSH
43904: LD_INT 33
43906: PUSH
43907: LD_INT 69
43909: PUSH
43910: LD_INT 39
43912: PUSH
43913: LD_INT 34
43915: PUSH
43916: LD_INT 40
43918: PUSH
43919: LD_INT 71
43921: PUSH
43922: LD_INT 23
43924: PUSH
43925: LD_INT 44
43927: PUSH
43928: LD_INT 48
43930: PUSH
43931: LD_INT 49
43933: PUSH
43934: LD_INT 50
43936: PUSH
43937: LD_INT 51
43939: PUSH
43940: LD_INT 52
43942: PUSH
43943: LD_INT 53
43945: PUSH
43946: LD_INT 54
43948: PUSH
43949: LD_INT 55
43951: PUSH
43952: LD_INT 56
43954: PUSH
43955: LD_INT 57
43957: PUSH
43958: LD_INT 58
43960: PUSH
43961: LD_INT 59
43963: PUSH
43964: LD_INT 63
43966: PUSH
43967: LD_INT 64
43969: PUSH
43970: LD_INT 65
43972: PUSH
43973: LD_INT 82
43975: PUSH
43976: LD_INT 83
43978: PUSH
43979: LD_INT 84
43981: PUSH
43982: LD_INT 85
43984: PUSH
43985: LD_INT 86
43987: PUSH
43988: LD_INT 89
43990: PUSH
43991: LD_INT 91
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: ST_TO_ADDR
44051: GO 44054
44053: POP
// if state > - 1 and state < 3 then
44054: LD_VAR 0 3
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: GREATER
44063: IFFALSE 44075
44065: PUSH
44066: LD_VAR 0 3
44070: PUSH
44071: LD_INT 3
44073: LESS
44074: AND
44075: IFFALSE 44132
// for i in result do
44077: LD_ADDR_VAR 0 5
44081: PUSH
44082: LD_VAR 0 4
44086: PUSH
44087: FOR_IN
44088: IFFALSE 44130
// if GetTech ( i , side ) <> state then
44090: LD_VAR 0 5
44094: PPUSH
44095: LD_VAR 0 1
44099: PPUSH
44100: CALL_OW 321
44104: PUSH
44105: LD_VAR 0 3
44109: NONEQUAL
44110: IFFALSE 44128
// result := result diff i ;
44112: LD_ADDR_VAR 0 4
44116: PUSH
44117: LD_VAR 0 4
44121: PUSH
44122: LD_VAR 0 5
44126: DIFF
44127: ST_TO_ADDR
44128: GO 44087
44130: POP
44131: POP
// end ;
44132: LD_VAR 0 4
44136: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44137: LD_INT 0
44139: PPUSH
44140: PPUSH
44141: PPUSH
// result := true ;
44142: LD_ADDR_VAR 0 3
44146: PUSH
44147: LD_INT 1
44149: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44150: LD_ADDR_VAR 0 5
44154: PUSH
44155: LD_VAR 0 2
44159: PPUSH
44160: CALL_OW 480
44164: ST_TO_ADDR
// if not tmp then
44165: LD_VAR 0 5
44169: NOT
44170: IFFALSE 44174
// exit ;
44172: GO 44223
// for i in tmp do
44174: LD_ADDR_VAR 0 4
44178: PUSH
44179: LD_VAR 0 5
44183: PUSH
44184: FOR_IN
44185: IFFALSE 44221
// if GetTech ( i , side ) <> state_researched then
44187: LD_VAR 0 4
44191: PPUSH
44192: LD_VAR 0 1
44196: PPUSH
44197: CALL_OW 321
44201: PUSH
44202: LD_INT 2
44204: NONEQUAL
44205: IFFALSE 44219
// begin result := false ;
44207: LD_ADDR_VAR 0 3
44211: PUSH
44212: LD_INT 0
44214: ST_TO_ADDR
// exit ;
44215: POP
44216: POP
44217: GO 44223
// end ;
44219: GO 44184
44221: POP
44222: POP
// end ;
44223: LD_VAR 0 3
44227: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
44228: LD_INT 0
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
44243: LD_VAR 0 1
44247: NOT
44248: IFTRUE 44265
44250: PUSH
44251: LD_VAR 0 1
44255: PPUSH
44256: CALL_OW 257
44260: PUSH
44261: LD_INT 9
44263: NONEQUAL
44264: OR
44265: IFFALSE 44269
// exit ;
44267: GO 44848
// side := GetSide ( unit ) ;
44269: LD_ADDR_VAR 0 9
44273: PUSH
44274: LD_VAR 0 1
44278: PPUSH
44279: CALL_OW 255
44283: ST_TO_ADDR
// tech_space := tech_spacanom ;
44284: LD_ADDR_VAR 0 12
44288: PUSH
44289: LD_INT 29
44291: ST_TO_ADDR
// tech_time := tech_taurad ;
44292: LD_ADDR_VAR 0 13
44296: PUSH
44297: LD_INT 28
44299: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
44300: LD_ADDR_VAR 0 11
44304: PUSH
44305: LD_VAR 0 1
44309: PPUSH
44310: CALL_OW 310
44314: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
44315: LD_VAR 0 11
44319: PPUSH
44320: CALL_OW 247
44324: PUSH
44325: LD_INT 2
44327: EQUAL
44328: IFFALSE 44332
// exit ;
44330: GO 44848
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44332: LD_ADDR_VAR 0 8
44336: PUSH
44337: LD_INT 81
44339: PUSH
44340: LD_VAR 0 9
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 3
44351: PUSH
44352: LD_INT 21
44354: PUSH
44355: LD_INT 3
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PPUSH
44370: CALL_OW 69
44374: ST_TO_ADDR
// if not tmp then
44375: LD_VAR 0 8
44379: NOT
44380: IFFALSE 44384
// exit ;
44382: GO 44848
// if in_unit then
44384: LD_VAR 0 11
44388: IFFALSE 44412
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
44390: LD_ADDR_VAR 0 10
44394: PUSH
44395: LD_VAR 0 8
44399: PPUSH
44400: LD_VAR 0 11
44404: PPUSH
44405: CALL_OW 74
44409: ST_TO_ADDR
44410: GO 44432
// enemy := NearestUnitToUnit ( tmp , unit ) ;
44412: LD_ADDR_VAR 0 10
44416: PUSH
44417: LD_VAR 0 8
44421: PPUSH
44422: LD_VAR 0 1
44426: PPUSH
44427: CALL_OW 74
44431: ST_TO_ADDR
// if not enemy then
44432: LD_VAR 0 10
44436: NOT
44437: IFFALSE 44441
// exit ;
44439: GO 44848
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
44441: LD_VAR 0 11
44445: IFFALSE 44467
44447: PUSH
44448: LD_VAR 0 11
44452: PPUSH
44453: LD_VAR 0 10
44457: PPUSH
44458: CALL_OW 296
44462: PUSH
44463: LD_INT 13
44465: GREATER
44466: AND
44467: IFTRUE 44489
44469: PUSH
44470: LD_VAR 0 1
44474: PPUSH
44475: LD_VAR 0 10
44479: PPUSH
44480: CALL_OW 296
44484: PUSH
44485: LD_INT 12
44487: GREATER
44488: OR
44489: IFFALSE 44493
// exit ;
44491: GO 44848
// missile := [ 1 ] ;
44493: LD_ADDR_VAR 0 14
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: ST_TO_ADDR
// if Researched ( side , tech_space ) then
44504: LD_VAR 0 9
44508: PPUSH
44509: LD_VAR 0 12
44513: PPUSH
44514: CALL_OW 325
44518: IFFALSE 44547
// missile := Replace ( missile , missile + 1 , 2 ) ;
44520: LD_ADDR_VAR 0 14
44524: PUSH
44525: LD_VAR 0 14
44529: PPUSH
44530: LD_VAR 0 14
44534: PUSH
44535: LD_INT 1
44537: PLUS
44538: PPUSH
44539: LD_INT 2
44541: PPUSH
44542: CALL_OW 1
44546: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
44547: LD_VAR 0 9
44551: PPUSH
44552: LD_VAR 0 13
44556: PPUSH
44557: CALL_OW 325
44561: IFFALSE 44585
44563: PUSH
44564: LD_VAR 0 10
44568: PPUSH
44569: CALL_OW 255
44573: PPUSH
44574: LD_VAR 0 13
44578: PPUSH
44579: CALL_OW 325
44583: NOT
44584: AND
44585: IFFALSE 44614
// missile := Replace ( missile , missile + 1 , 3 ) ;
44587: LD_ADDR_VAR 0 14
44591: PUSH
44592: LD_VAR 0 14
44596: PPUSH
44597: LD_VAR 0 14
44601: PUSH
44602: LD_INT 1
44604: PLUS
44605: PPUSH
44606: LD_INT 3
44608: PPUSH
44609: CALL_OW 1
44613: ST_TO_ADDR
// if missile < 2 then
44614: LD_VAR 0 14
44618: PUSH
44619: LD_INT 2
44621: LESS
44622: IFFALSE 44626
// exit ;
44624: GO 44848
// x := GetX ( enemy ) ;
44626: LD_ADDR_VAR 0 4
44630: PUSH
44631: LD_VAR 0 10
44635: PPUSH
44636: CALL_OW 250
44640: ST_TO_ADDR
// y := GetY ( enemy ) ;
44641: LD_ADDR_VAR 0 5
44645: PUSH
44646: LD_VAR 0 10
44650: PPUSH
44651: CALL_OW 251
44655: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
44656: LD_ADDR_VAR 0 6
44660: PUSH
44661: LD_VAR 0 4
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PPUSH
44670: LD_INT 1
44672: PPUSH
44673: CALL_OW 12
44677: PLUS
44678: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
44679: LD_ADDR_VAR 0 7
44683: PUSH
44684: LD_VAR 0 5
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PPUSH
44693: LD_INT 1
44695: PPUSH
44696: CALL_OW 12
44700: PLUS
44701: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44702: LD_VAR 0 6
44706: PPUSH
44707: LD_VAR 0 7
44711: PPUSH
44712: CALL_OW 488
44716: NOT
44717: IFFALSE 44739
// begin _x := x ;
44719: LD_ADDR_VAR 0 6
44723: PUSH
44724: LD_VAR 0 4
44728: ST_TO_ADDR
// _y := y ;
44729: LD_ADDR_VAR 0 7
44733: PUSH
44734: LD_VAR 0 5
44738: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
44739: LD_ADDR_VAR 0 3
44743: PUSH
44744: LD_INT 1
44746: PPUSH
44747: LD_VAR 0 14
44751: PPUSH
44752: CALL_OW 12
44756: ST_TO_ADDR
// case i of 1 :
44757: LD_VAR 0 3
44761: PUSH
44762: LD_INT 1
44764: DOUBLE
44765: EQUAL
44766: IFTRUE 44770
44768: GO 44787
44770: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
44771: LD_VAR 0 1
44775: PPUSH
44776: LD_VAR 0 10
44780: PPUSH
44781: CALL_OW 115
44785: GO 44848
44787: LD_INT 2
44789: DOUBLE
44790: EQUAL
44791: IFTRUE 44795
44793: GO 44817
44795: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
44796: LD_VAR 0 1
44800: PPUSH
44801: LD_VAR 0 6
44805: PPUSH
44806: LD_VAR 0 7
44810: PPUSH
44811: CALL_OW 153
44815: GO 44848
44817: LD_INT 3
44819: DOUBLE
44820: EQUAL
44821: IFTRUE 44825
44823: GO 44847
44825: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
44826: LD_VAR 0 1
44830: PPUSH
44831: LD_VAR 0 6
44835: PPUSH
44836: LD_VAR 0 7
44840: PPUSH
44841: CALL_OW 154
44845: GO 44848
44847: POP
// end ;
44848: LD_VAR 0 2
44852: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
44853: LD_INT 0
44855: PPUSH
44856: PPUSH
44857: PPUSH
44858: PPUSH
44859: PPUSH
44860: PPUSH
// if not unit or not building then
44861: LD_VAR 0 1
44865: NOT
44866: IFTRUE 44875
44868: PUSH
44869: LD_VAR 0 2
44873: NOT
44874: OR
44875: IFFALSE 44879
// exit ;
44877: GO 45037
// x := GetX ( building ) ;
44879: LD_ADDR_VAR 0 5
44883: PUSH
44884: LD_VAR 0 2
44888: PPUSH
44889: CALL_OW 250
44893: ST_TO_ADDR
// y := GetY ( building ) ;
44894: LD_ADDR_VAR 0 6
44898: PUSH
44899: LD_VAR 0 2
44903: PPUSH
44904: CALL_OW 251
44908: ST_TO_ADDR
// for i := 0 to 5 do
44909: LD_ADDR_VAR 0 4
44913: PUSH
44914: DOUBLE
44915: LD_INT 0
44917: DEC
44918: ST_TO_ADDR
44919: LD_INT 5
44921: PUSH
44922: FOR_TO
44923: IFFALSE 45035
// begin _x := ShiftX ( x , i , 3 ) ;
44925: LD_ADDR_VAR 0 7
44929: PUSH
44930: LD_VAR 0 5
44934: PPUSH
44935: LD_VAR 0 4
44939: PPUSH
44940: LD_INT 3
44942: PPUSH
44943: CALL_OW 272
44947: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44948: LD_ADDR_VAR 0 8
44952: PUSH
44953: LD_VAR 0 6
44957: PPUSH
44958: LD_VAR 0 4
44962: PPUSH
44963: LD_INT 3
44965: PPUSH
44966: CALL_OW 273
44970: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44971: LD_VAR 0 7
44975: PPUSH
44976: LD_VAR 0 8
44980: PPUSH
44981: CALL_OW 488
44985: NOT
44986: IFFALSE 44990
// continue ;
44988: GO 44922
// if HexInfo ( _x , _y ) = 0 then
44990: LD_VAR 0 7
44994: PPUSH
44995: LD_VAR 0 8
44999: PPUSH
45000: CALL_OW 428
45004: PUSH
45005: LD_INT 0
45007: EQUAL
45008: IFFALSE 45033
// begin ComMoveXY ( unit , _x , _y ) ;
45010: LD_VAR 0 1
45014: PPUSH
45015: LD_VAR 0 7
45019: PPUSH
45020: LD_VAR 0 8
45024: PPUSH
45025: CALL_OW 111
// exit ;
45029: POP
45030: POP
45031: GO 45037
// end ; end ;
45033: GO 44922
45035: POP
45036: POP
// end ;
45037: LD_VAR 0 3
45041: RET
// export function ScanBase ( side , base_area ) ; begin
45042: LD_INT 0
45044: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45045: LD_ADDR_VAR 0 3
45049: PUSH
45050: LD_VAR 0 2
45054: PPUSH
45055: LD_INT 81
45057: PUSH
45058: LD_VAR 0 1
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PPUSH
45067: CALL_OW 70
45071: ST_TO_ADDR
// end ;
45072: LD_VAR 0 3
45076: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45077: LD_INT 0
45079: PPUSH
45080: PPUSH
45081: PPUSH
45082: PPUSH
// result := false ;
45083: LD_ADDR_VAR 0 2
45087: PUSH
45088: LD_INT 0
45090: ST_TO_ADDR
// side := GetSide ( unit ) ;
45091: LD_ADDR_VAR 0 3
45095: PUSH
45096: LD_VAR 0 1
45100: PPUSH
45101: CALL_OW 255
45105: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45106: LD_ADDR_VAR 0 4
45110: PUSH
45111: LD_VAR 0 1
45115: PPUSH
45116: CALL_OW 248
45120: ST_TO_ADDR
// case nat of 1 :
45121: LD_VAR 0 4
45125: PUSH
45126: LD_INT 1
45128: DOUBLE
45129: EQUAL
45130: IFTRUE 45134
45132: GO 45145
45134: POP
// tech := tech_lassight ; 2 :
45135: LD_ADDR_VAR 0 5
45139: PUSH
45140: LD_INT 12
45142: ST_TO_ADDR
45143: GO 45184
45145: LD_INT 2
45147: DOUBLE
45148: EQUAL
45149: IFTRUE 45153
45151: GO 45164
45153: POP
// tech := tech_mortar ; 3 :
45154: LD_ADDR_VAR 0 5
45158: PUSH
45159: LD_INT 41
45161: ST_TO_ADDR
45162: GO 45184
45164: LD_INT 3
45166: DOUBLE
45167: EQUAL
45168: IFTRUE 45172
45170: GO 45183
45172: POP
// tech := tech_bazooka ; end ;
45173: LD_ADDR_VAR 0 5
45177: PUSH
45178: LD_INT 44
45180: ST_TO_ADDR
45181: GO 45184
45183: POP
// if Researched ( side , tech ) then
45184: LD_VAR 0 3
45188: PPUSH
45189: LD_VAR 0 5
45193: PPUSH
45194: CALL_OW 325
45198: IFFALSE 45225
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
45200: LD_ADDR_VAR 0 2
45204: PUSH
45205: LD_INT 5
45207: PUSH
45208: LD_INT 8
45210: PUSH
45211: LD_INT 9
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: LIST
45218: PUSH
45219: LD_VAR 0 4
45223: ARRAY
45224: ST_TO_ADDR
// end ;
45225: LD_VAR 0 2
45229: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
45230: LD_INT 0
45232: PPUSH
45233: PPUSH
45234: PPUSH
// if not mines then
45235: LD_VAR 0 2
45239: NOT
45240: IFFALSE 45244
// exit ;
45242: GO 45388
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45244: LD_ADDR_VAR 0 5
45248: PUSH
45249: LD_INT 81
45251: PUSH
45252: LD_VAR 0 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 3
45263: PUSH
45264: LD_INT 21
45266: PUSH
45267: LD_INT 3
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PPUSH
45282: CALL_OW 69
45286: ST_TO_ADDR
// for i in mines do
45287: LD_ADDR_VAR 0 4
45291: PUSH
45292: LD_VAR 0 2
45296: PUSH
45297: FOR_IN
45298: IFFALSE 45386
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
45300: LD_VAR 0 4
45304: PUSH
45305: LD_INT 1
45307: ARRAY
45308: PPUSH
45309: LD_VAR 0 4
45313: PUSH
45314: LD_INT 2
45316: ARRAY
45317: PPUSH
45318: CALL_OW 458
45322: NOT
45323: IFFALSE 45327
// continue ;
45325: GO 45297
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
45327: LD_VAR 0 4
45331: PUSH
45332: LD_INT 1
45334: ARRAY
45335: PPUSH
45336: LD_VAR 0 4
45340: PUSH
45341: LD_INT 2
45343: ARRAY
45344: PPUSH
45345: CALL_OW 428
45349: PUSH
45350: LD_VAR 0 5
45354: IN
45355: IFFALSE 45384
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
45357: LD_VAR 0 4
45361: PUSH
45362: LD_INT 1
45364: ARRAY
45365: PPUSH
45366: LD_VAR 0 4
45370: PUSH
45371: LD_INT 2
45373: ARRAY
45374: PPUSH
45375: LD_VAR 0 1
45379: PPUSH
45380: CALL_OW 456
// end ;
45384: GO 45297
45386: POP
45387: POP
// end ;
45388: LD_VAR 0 3
45392: RET
// export function Count ( array ) ; begin
45393: LD_INT 0
45395: PPUSH
// result := array + 0 ;
45396: LD_ADDR_VAR 0 2
45400: PUSH
45401: LD_VAR 0 1
45405: PUSH
45406: LD_INT 0
45408: PLUS
45409: ST_TO_ADDR
// end ;
45410: LD_VAR 0 2
45414: RET
// export function IsEmpty ( building ) ; begin
45415: LD_INT 0
45417: PPUSH
// if not building then
45418: LD_VAR 0 1
45422: NOT
45423: IFFALSE 45427
// exit ;
45425: GO 45470
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
45427: LD_ADDR_VAR 0 2
45431: PUSH
45432: LD_VAR 0 1
45436: PUSH
45437: LD_INT 22
45439: PUSH
45440: LD_VAR 0 1
45444: PPUSH
45445: CALL_OW 255
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 58
45456: PUSH
45457: EMPTY
45458: LIST
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PPUSH
45464: CALL_OW 69
45468: IN
45469: ST_TO_ADDR
// end ;
45470: LD_VAR 0 2
45474: RET
// export function IsNotFull ( building ) ; var places ; begin
45475: LD_INT 0
45477: PPUSH
45478: PPUSH
// if not building then
45479: LD_VAR 0 1
45483: NOT
45484: IFFALSE 45488
// exit ;
45486: GO 45516
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
45488: LD_ADDR_VAR 0 2
45492: PUSH
45493: LD_VAR 0 1
45497: PPUSH
45498: LD_INT 3
45500: PUSH
45501: LD_INT 62
45503: PUSH
45504: EMPTY
45505: LIST
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PPUSH
45511: CALL_OW 72
45515: ST_TO_ADDR
// end ;
45516: LD_VAR 0 2
45520: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
45521: LD_INT 0
45523: PPUSH
45524: PPUSH
45525: PPUSH
45526: PPUSH
// tmp := [ ] ;
45527: LD_ADDR_VAR 0 3
45531: PUSH
45532: EMPTY
45533: ST_TO_ADDR
// list := [ ] ;
45534: LD_ADDR_VAR 0 5
45538: PUSH
45539: EMPTY
45540: ST_TO_ADDR
// for i = 16 to 25 do
45541: LD_ADDR_VAR 0 4
45545: PUSH
45546: DOUBLE
45547: LD_INT 16
45549: DEC
45550: ST_TO_ADDR
45551: LD_INT 25
45553: PUSH
45554: FOR_TO
45555: IFFALSE 45628
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
45557: LD_ADDR_VAR 0 3
45561: PUSH
45562: LD_VAR 0 3
45566: PUSH
45567: LD_INT 22
45569: PUSH
45570: LD_VAR 0 1
45574: PPUSH
45575: CALL_OW 255
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 91
45586: PUSH
45587: LD_VAR 0 1
45591: PUSH
45592: LD_INT 6
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 30
45602: PUSH
45603: LD_VAR 0 4
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: LIST
45616: PUSH
45617: EMPTY
45618: LIST
45619: PPUSH
45620: CALL_OW 69
45624: ADD
45625: ST_TO_ADDR
45626: GO 45554
45628: POP
45629: POP
// for i = 1 to tmp do
45630: LD_ADDR_VAR 0 4
45634: PUSH
45635: DOUBLE
45636: LD_INT 1
45638: DEC
45639: ST_TO_ADDR
45640: LD_VAR 0 3
45644: PUSH
45645: FOR_TO
45646: IFFALSE 45734
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
45648: LD_ADDR_VAR 0 5
45652: PUSH
45653: LD_VAR 0 5
45657: PUSH
45658: LD_VAR 0 3
45662: PUSH
45663: LD_VAR 0 4
45667: ARRAY
45668: PPUSH
45669: CALL_OW 266
45673: PUSH
45674: LD_VAR 0 3
45678: PUSH
45679: LD_VAR 0 4
45683: ARRAY
45684: PPUSH
45685: CALL_OW 250
45689: PUSH
45690: LD_VAR 0 3
45694: PUSH
45695: LD_VAR 0 4
45699: ARRAY
45700: PPUSH
45701: CALL_OW 251
45705: PUSH
45706: LD_VAR 0 3
45710: PUSH
45711: LD_VAR 0 4
45715: ARRAY
45716: PPUSH
45717: CALL_OW 254
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: PUSH
45728: EMPTY
45729: LIST
45730: ADD
45731: ST_TO_ADDR
45732: GO 45645
45734: POP
45735: POP
// result := list ;
45736: LD_ADDR_VAR 0 2
45740: PUSH
45741: LD_VAR 0 5
45745: ST_TO_ADDR
// end ;
45746: LD_VAR 0 2
45750: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
45751: LD_INT 0
45753: PPUSH
45754: PPUSH
45755: PPUSH
45756: PPUSH
45757: PPUSH
45758: PPUSH
45759: PPUSH
// if not factory then
45760: LD_VAR 0 1
45764: NOT
45765: IFFALSE 45769
// exit ;
45767: GO 46372
// if control = control_apeman then
45769: LD_VAR 0 4
45773: PUSH
45774: LD_INT 5
45776: EQUAL
45777: IFFALSE 45886
// begin tmp := UnitsInside ( factory ) ;
45779: LD_ADDR_VAR 0 8
45783: PUSH
45784: LD_VAR 0 1
45788: PPUSH
45789: CALL_OW 313
45793: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
45794: LD_VAR 0 8
45798: PPUSH
45799: LD_INT 25
45801: PUSH
45802: LD_INT 12
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PPUSH
45809: CALL_OW 72
45813: NOT
45814: IFFALSE 45824
// control := control_manual ;
45816: LD_ADDR_VAR 0 4
45820: PUSH
45821: LD_INT 1
45823: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
45824: LD_ADDR_VAR 0 8
45828: PUSH
45829: LD_VAR 0 1
45833: PPUSH
45834: CALL 45521 0 1
45838: ST_TO_ADDR
// if tmp then
45839: LD_VAR 0 8
45843: IFFALSE 45886
// begin for i in tmp do
45845: LD_ADDR_VAR 0 7
45849: PUSH
45850: LD_VAR 0 8
45854: PUSH
45855: FOR_IN
45856: IFFALSE 45884
// if i [ 1 ] = b_ext_radio then
45858: LD_VAR 0 7
45862: PUSH
45863: LD_INT 1
45865: ARRAY
45866: PUSH
45867: LD_INT 22
45869: EQUAL
45870: IFFALSE 45882
// begin control := control_remote ;
45872: LD_ADDR_VAR 0 4
45876: PUSH
45877: LD_INT 2
45879: ST_TO_ADDR
// break ;
45880: GO 45884
// end ;
45882: GO 45855
45884: POP
45885: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45886: LD_VAR 0 1
45890: PPUSH
45891: LD_VAR 0 2
45895: PPUSH
45896: LD_VAR 0 3
45900: PPUSH
45901: LD_VAR 0 4
45905: PPUSH
45906: LD_VAR 0 5
45910: PPUSH
45911: CALL_OW 448
45915: IFFALSE 45950
// begin result := [ chassis , engine , control , weapon ] ;
45917: LD_ADDR_VAR 0 6
45921: PUSH
45922: LD_VAR 0 2
45926: PUSH
45927: LD_VAR 0 3
45931: PUSH
45932: LD_VAR 0 4
45936: PUSH
45937: LD_VAR 0 5
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: ST_TO_ADDR
// exit ;
45948: GO 46372
// end ; _chassis := AvailableChassisList ( factory ) ;
45950: LD_ADDR_VAR 0 9
45954: PUSH
45955: LD_VAR 0 1
45959: PPUSH
45960: CALL_OW 475
45964: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45965: LD_ADDR_VAR 0 11
45969: PUSH
45970: LD_VAR 0 1
45974: PPUSH
45975: CALL_OW 476
45979: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45980: LD_ADDR_VAR 0 12
45984: PUSH
45985: LD_VAR 0 1
45989: PPUSH
45990: CALL_OW 477
45994: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45995: LD_ADDR_VAR 0 10
45999: PUSH
46000: LD_VAR 0 1
46004: PPUSH
46005: CALL_OW 478
46009: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
46010: LD_VAR 0 9
46014: NOT
46015: IFTRUE 46024
46017: PUSH
46018: LD_VAR 0 11
46022: NOT
46023: OR
46024: IFTRUE 46033
46026: PUSH
46027: LD_VAR 0 12
46031: NOT
46032: OR
46033: IFTRUE 46042
46035: PUSH
46036: LD_VAR 0 10
46040: NOT
46041: OR
46042: IFFALSE 46077
// begin result := [ chassis , engine , control , weapon ] ;
46044: LD_ADDR_VAR 0 6
46048: PUSH
46049: LD_VAR 0 2
46053: PUSH
46054: LD_VAR 0 3
46058: PUSH
46059: LD_VAR 0 4
46063: PUSH
46064: LD_VAR 0 5
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: ST_TO_ADDR
// exit ;
46075: GO 46372
// end ; if not chassis in _chassis then
46077: LD_VAR 0 2
46081: PUSH
46082: LD_VAR 0 9
46086: IN
46087: NOT
46088: IFFALSE 46114
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
46090: LD_ADDR_VAR 0 2
46094: PUSH
46095: LD_VAR 0 9
46099: PUSH
46100: LD_INT 1
46102: PPUSH
46103: LD_VAR 0 9
46107: PPUSH
46108: CALL_OW 12
46112: ARRAY
46113: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46114: LD_VAR 0 2
46118: PPUSH
46119: LD_VAR 0 3
46123: PPUSH
46124: CALL 46377 0 2
46128: NOT
46129: IFFALSE 46190
// repeat engine := _engine [ 1 ] ;
46131: LD_ADDR_VAR 0 3
46135: PUSH
46136: LD_VAR 0 11
46140: PUSH
46141: LD_INT 1
46143: ARRAY
46144: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46145: LD_ADDR_VAR 0 11
46149: PUSH
46150: LD_VAR 0 11
46154: PPUSH
46155: LD_INT 1
46157: PPUSH
46158: CALL_OW 3
46162: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
46163: LD_VAR 0 2
46167: PPUSH
46168: LD_VAR 0 3
46172: PPUSH
46173: CALL 46377 0 2
46177: IFTRUE 46188
46179: PUSH
46180: LD_VAR 0 11
46184: PUSH
46185: EMPTY
46186: EQUAL
46187: OR
46188: IFFALSE 46131
// if not control in _control then
46190: LD_VAR 0 4
46194: PUSH
46195: LD_VAR 0 12
46199: IN
46200: NOT
46201: IFFALSE 46227
// control := _control [ rand ( 1 , _control ) ] ;
46203: LD_ADDR_VAR 0 4
46207: PUSH
46208: LD_VAR 0 12
46212: PUSH
46213: LD_INT 1
46215: PPUSH
46216: LD_VAR 0 12
46220: PPUSH
46221: CALL_OW 12
46225: ARRAY
46226: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
46227: LD_VAR 0 2
46231: PPUSH
46232: LD_VAR 0 5
46236: PPUSH
46237: CALL 46599 0 2
46241: NOT
46242: IFFALSE 46303
// repeat weapon := _weapon [ 1 ] ;
46244: LD_ADDR_VAR 0 5
46248: PUSH
46249: LD_VAR 0 10
46253: PUSH
46254: LD_INT 1
46256: ARRAY
46257: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
46258: LD_ADDR_VAR 0 10
46262: PUSH
46263: LD_VAR 0 10
46267: PPUSH
46268: LD_INT 1
46270: PPUSH
46271: CALL_OW 3
46275: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
46276: LD_VAR 0 2
46280: PPUSH
46281: LD_VAR 0 5
46285: PPUSH
46286: CALL 46599 0 2
46290: IFTRUE 46301
46292: PUSH
46293: LD_VAR 0 10
46297: PUSH
46298: EMPTY
46299: EQUAL
46300: OR
46301: IFFALSE 46244
// result := [ ] ;
46303: LD_ADDR_VAR 0 6
46307: PUSH
46308: EMPTY
46309: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46310: LD_VAR 0 1
46314: PPUSH
46315: LD_VAR 0 2
46319: PPUSH
46320: LD_VAR 0 3
46324: PPUSH
46325: LD_VAR 0 4
46329: PPUSH
46330: LD_VAR 0 5
46334: PPUSH
46335: CALL_OW 448
46339: IFFALSE 46372
// result := [ chassis , engine , control , weapon ] ;
46341: LD_ADDR_VAR 0 6
46345: PUSH
46346: LD_VAR 0 2
46350: PUSH
46351: LD_VAR 0 3
46355: PUSH
46356: LD_VAR 0 4
46360: PUSH
46361: LD_VAR 0 5
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: ST_TO_ADDR
// end ;
46372: LD_VAR 0 6
46376: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
46377: LD_INT 0
46379: PPUSH
// if not chassis or not engine then
46380: LD_VAR 0 1
46384: NOT
46385: IFTRUE 46394
46387: PUSH
46388: LD_VAR 0 2
46392: NOT
46393: OR
46394: IFFALSE 46398
// exit ;
46396: GO 46594
// case engine of engine_solar :
46398: LD_VAR 0 2
46402: PUSH
46403: LD_INT 2
46405: DOUBLE
46406: EQUAL
46407: IFTRUE 46411
46409: GO 46449
46411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
46412: LD_ADDR_VAR 0 3
46416: PUSH
46417: LD_INT 11
46419: PUSH
46420: LD_INT 12
46422: PUSH
46423: LD_INT 13
46425: PUSH
46426: LD_INT 14
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: ST_TO_ADDR
46447: GO 46578
46449: LD_INT 1
46451: DOUBLE
46452: EQUAL
46453: IFTRUE 46457
46455: GO 46519
46457: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
46458: LD_ADDR_VAR 0 3
46462: PUSH
46463: LD_INT 11
46465: PUSH
46466: LD_INT 12
46468: PUSH
46469: LD_INT 13
46471: PUSH
46472: LD_INT 14
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: LD_INT 3
46483: PUSH
46484: LD_INT 4
46486: PUSH
46487: LD_INT 5
46489: PUSH
46490: LD_INT 21
46492: PUSH
46493: LD_INT 23
46495: PUSH
46496: LD_INT 22
46498: PUSH
46499: LD_INT 24
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: ST_TO_ADDR
46517: GO 46578
46519: LD_INT 3
46521: DOUBLE
46522: EQUAL
46523: IFTRUE 46527
46525: GO 46577
46527: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46528: LD_ADDR_VAR 0 3
46532: PUSH
46533: LD_INT 13
46535: PUSH
46536: LD_INT 14
46538: PUSH
46539: LD_INT 2
46541: PUSH
46542: LD_INT 3
46544: PUSH
46545: LD_INT 4
46547: PUSH
46548: LD_INT 5
46550: PUSH
46551: LD_INT 21
46553: PUSH
46554: LD_INT 22
46556: PUSH
46557: LD_INT 23
46559: PUSH
46560: LD_INT 24
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: ST_TO_ADDR
46575: GO 46578
46577: POP
// result := ( chassis in result ) ;
46578: LD_ADDR_VAR 0 3
46582: PUSH
46583: LD_VAR 0 1
46587: PUSH
46588: LD_VAR 0 3
46592: IN
46593: ST_TO_ADDR
// end ;
46594: LD_VAR 0 3
46598: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
46599: LD_INT 0
46601: PPUSH
// if not chassis or not weapon then
46602: LD_VAR 0 1
46606: NOT
46607: IFTRUE 46616
46609: PUSH
46610: LD_VAR 0 2
46614: NOT
46615: OR
46616: IFFALSE 46620
// exit ;
46618: GO 47714
// case weapon of us_machine_gun :
46620: LD_VAR 0 2
46624: PUSH
46625: LD_INT 2
46627: DOUBLE
46628: EQUAL
46629: IFTRUE 46633
46631: GO 46663
46633: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
46634: LD_ADDR_VAR 0 3
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: LD_INT 4
46650: PUSH
46651: LD_INT 5
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
46661: GO 47698
46663: LD_INT 3
46665: DOUBLE
46666: EQUAL
46667: IFTRUE 46671
46669: GO 46701
46671: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
46672: LD_ADDR_VAR 0 3
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: LD_INT 3
46685: PUSH
46686: LD_INT 4
46688: PUSH
46689: LD_INT 5
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: ST_TO_ADDR
46699: GO 47698
46701: LD_INT 11
46703: DOUBLE
46704: EQUAL
46705: IFTRUE 46709
46707: GO 46739
46709: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
46710: LD_ADDR_VAR 0 3
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: LD_INT 3
46723: PUSH
46724: LD_INT 4
46726: PUSH
46727: LD_INT 5
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: ST_TO_ADDR
46737: GO 47698
46739: LD_INT 4
46741: DOUBLE
46742: EQUAL
46743: IFTRUE 46747
46745: GO 46773
46747: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
46748: LD_ADDR_VAR 0 3
46752: PUSH
46753: LD_INT 2
46755: PUSH
46756: LD_INT 3
46758: PUSH
46759: LD_INT 4
46761: PUSH
46762: LD_INT 5
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: ST_TO_ADDR
46771: GO 47698
46773: LD_INT 5
46775: DOUBLE
46776: EQUAL
46777: IFTRUE 46781
46779: GO 46807
46781: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
46782: LD_ADDR_VAR 0 3
46786: PUSH
46787: LD_INT 2
46789: PUSH
46790: LD_INT 3
46792: PUSH
46793: LD_INT 4
46795: PUSH
46796: LD_INT 5
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: ST_TO_ADDR
46805: GO 47698
46807: LD_INT 9
46809: DOUBLE
46810: EQUAL
46811: IFTRUE 46815
46813: GO 46841
46815: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
46816: LD_ADDR_VAR 0 3
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 3
46826: PUSH
46827: LD_INT 4
46829: PUSH
46830: LD_INT 5
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: ST_TO_ADDR
46839: GO 47698
46841: LD_INT 7
46843: DOUBLE
46844: EQUAL
46845: IFTRUE 46849
46847: GO 46875
46849: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
46850: LD_ADDR_VAR 0 3
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: LD_INT 3
46860: PUSH
46861: LD_INT 4
46863: PUSH
46864: LD_INT 5
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: ST_TO_ADDR
46873: GO 47698
46875: LD_INT 12
46877: DOUBLE
46878: EQUAL
46879: IFTRUE 46883
46881: GO 46909
46883: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
46884: LD_ADDR_VAR 0 3
46888: PUSH
46889: LD_INT 2
46891: PUSH
46892: LD_INT 3
46894: PUSH
46895: LD_INT 4
46897: PUSH
46898: LD_INT 5
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: ST_TO_ADDR
46907: GO 47698
46909: LD_INT 13
46911: DOUBLE
46912: EQUAL
46913: IFTRUE 46917
46915: GO 46943
46917: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46918: LD_ADDR_VAR 0 3
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: LD_INT 3
46928: PUSH
46929: LD_INT 4
46931: PUSH
46932: LD_INT 5
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: ST_TO_ADDR
46941: GO 47698
46943: LD_INT 14
46945: DOUBLE
46946: EQUAL
46947: IFTRUE 46951
46949: GO 46969
46951: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46952: LD_ADDR_VAR 0 3
46956: PUSH
46957: LD_INT 4
46959: PUSH
46960: LD_INT 5
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: ST_TO_ADDR
46967: GO 47698
46969: LD_INT 6
46971: DOUBLE
46972: EQUAL
46973: IFTRUE 46977
46975: GO 46995
46977: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46978: LD_ADDR_VAR 0 3
46982: PUSH
46983: LD_INT 4
46985: PUSH
46986: LD_INT 5
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: ST_TO_ADDR
46993: GO 47698
46995: LD_INT 10
46997: DOUBLE
46998: EQUAL
46999: IFTRUE 47003
47001: GO 47021
47003: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
47004: LD_ADDR_VAR 0 3
47008: PUSH
47009: LD_INT 4
47011: PUSH
47012: LD_INT 5
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: ST_TO_ADDR
47019: GO 47698
47021: LD_INT 22
47023: DOUBLE
47024: EQUAL
47025: IFTRUE 47029
47027: GO 47055
47029: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
47030: LD_ADDR_VAR 0 3
47034: PUSH
47035: LD_INT 11
47037: PUSH
47038: LD_INT 12
47040: PUSH
47041: LD_INT 13
47043: PUSH
47044: LD_INT 14
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: ST_TO_ADDR
47053: GO 47698
47055: LD_INT 23
47057: DOUBLE
47058: EQUAL
47059: IFTRUE 47063
47061: GO 47089
47063: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
47064: LD_ADDR_VAR 0 3
47068: PUSH
47069: LD_INT 11
47071: PUSH
47072: LD_INT 12
47074: PUSH
47075: LD_INT 13
47077: PUSH
47078: LD_INT 14
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: ST_TO_ADDR
47087: GO 47698
47089: LD_INT 24
47091: DOUBLE
47092: EQUAL
47093: IFTRUE 47097
47095: GO 47123
47097: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
47098: LD_ADDR_VAR 0 3
47102: PUSH
47103: LD_INT 11
47105: PUSH
47106: LD_INT 12
47108: PUSH
47109: LD_INT 13
47111: PUSH
47112: LD_INT 14
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: ST_TO_ADDR
47121: GO 47698
47123: LD_INT 30
47125: DOUBLE
47126: EQUAL
47127: IFTRUE 47131
47129: GO 47157
47131: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47132: LD_ADDR_VAR 0 3
47136: PUSH
47137: LD_INT 11
47139: PUSH
47140: LD_INT 12
47142: PUSH
47143: LD_INT 13
47145: PUSH
47146: LD_INT 14
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: ST_TO_ADDR
47155: GO 47698
47157: LD_INT 25
47159: DOUBLE
47160: EQUAL
47161: IFTRUE 47165
47163: GO 47183
47165: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
47166: LD_ADDR_VAR 0 3
47170: PUSH
47171: LD_INT 13
47173: PUSH
47174: LD_INT 14
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: ST_TO_ADDR
47181: GO 47698
47183: LD_INT 27
47185: DOUBLE
47186: EQUAL
47187: IFTRUE 47191
47189: GO 47209
47191: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
47192: LD_ADDR_VAR 0 3
47196: PUSH
47197: LD_INT 13
47199: PUSH
47200: LD_INT 14
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: ST_TO_ADDR
47207: GO 47698
47209: LD_INT 92
47211: DOUBLE
47212: EQUAL
47213: IFTRUE 47217
47215: GO 47243
47217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
47218: LD_ADDR_VAR 0 3
47222: PUSH
47223: LD_INT 11
47225: PUSH
47226: LD_INT 12
47228: PUSH
47229: LD_INT 13
47231: PUSH
47232: LD_INT 14
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: ST_TO_ADDR
47241: GO 47698
47243: LD_INT 28
47245: DOUBLE
47246: EQUAL
47247: IFTRUE 47251
47249: GO 47269
47251: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
47252: LD_ADDR_VAR 0 3
47256: PUSH
47257: LD_INT 13
47259: PUSH
47260: LD_INT 14
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: ST_TO_ADDR
47267: GO 47698
47269: LD_INT 29
47271: DOUBLE
47272: EQUAL
47273: IFTRUE 47277
47275: GO 47295
47277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
47278: LD_ADDR_VAR 0 3
47282: PUSH
47283: LD_INT 13
47285: PUSH
47286: LD_INT 14
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: ST_TO_ADDR
47293: GO 47698
47295: LD_INT 31
47297: DOUBLE
47298: EQUAL
47299: IFTRUE 47303
47301: GO 47321
47303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
47304: LD_ADDR_VAR 0 3
47308: PUSH
47309: LD_INT 13
47311: PUSH
47312: LD_INT 14
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: ST_TO_ADDR
47319: GO 47698
47321: LD_INT 26
47323: DOUBLE
47324: EQUAL
47325: IFTRUE 47329
47327: GO 47347
47329: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
47330: LD_ADDR_VAR 0 3
47334: PUSH
47335: LD_INT 13
47337: PUSH
47338: LD_INT 14
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: ST_TO_ADDR
47345: GO 47698
47347: LD_INT 42
47349: DOUBLE
47350: EQUAL
47351: IFTRUE 47355
47353: GO 47381
47355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
47356: LD_ADDR_VAR 0 3
47360: PUSH
47361: LD_INT 21
47363: PUSH
47364: LD_INT 22
47366: PUSH
47367: LD_INT 23
47369: PUSH
47370: LD_INT 24
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: ST_TO_ADDR
47379: GO 47698
47381: LD_INT 43
47383: DOUBLE
47384: EQUAL
47385: IFTRUE 47389
47387: GO 47415
47389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
47390: LD_ADDR_VAR 0 3
47394: PUSH
47395: LD_INT 21
47397: PUSH
47398: LD_INT 22
47400: PUSH
47401: LD_INT 23
47403: PUSH
47404: LD_INT 24
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: ST_TO_ADDR
47413: GO 47698
47415: LD_INT 44
47417: DOUBLE
47418: EQUAL
47419: IFTRUE 47423
47421: GO 47449
47423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
47424: LD_ADDR_VAR 0 3
47428: PUSH
47429: LD_INT 21
47431: PUSH
47432: LD_INT 22
47434: PUSH
47435: LD_INT 23
47437: PUSH
47438: LD_INT 24
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: ST_TO_ADDR
47447: GO 47698
47449: LD_INT 45
47451: DOUBLE
47452: EQUAL
47453: IFTRUE 47457
47455: GO 47483
47457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
47458: LD_ADDR_VAR 0 3
47462: PUSH
47463: LD_INT 21
47465: PUSH
47466: LD_INT 22
47468: PUSH
47469: LD_INT 23
47471: PUSH
47472: LD_INT 24
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: ST_TO_ADDR
47481: GO 47698
47483: LD_INT 49
47485: DOUBLE
47486: EQUAL
47487: IFTRUE 47491
47489: GO 47517
47491: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
47492: LD_ADDR_VAR 0 3
47496: PUSH
47497: LD_INT 21
47499: PUSH
47500: LD_INT 22
47502: PUSH
47503: LD_INT 23
47505: PUSH
47506: LD_INT 24
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: ST_TO_ADDR
47515: GO 47698
47517: LD_INT 51
47519: DOUBLE
47520: EQUAL
47521: IFTRUE 47525
47523: GO 47551
47525: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
47526: LD_ADDR_VAR 0 3
47530: PUSH
47531: LD_INT 21
47533: PUSH
47534: LD_INT 22
47536: PUSH
47537: LD_INT 23
47539: PUSH
47540: LD_INT 24
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: ST_TO_ADDR
47549: GO 47698
47551: LD_INT 52
47553: DOUBLE
47554: EQUAL
47555: IFTRUE 47559
47557: GO 47585
47559: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
47560: LD_ADDR_VAR 0 3
47564: PUSH
47565: LD_INT 21
47567: PUSH
47568: LD_INT 22
47570: PUSH
47571: LD_INT 23
47573: PUSH
47574: LD_INT 24
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: ST_TO_ADDR
47583: GO 47698
47585: LD_INT 53
47587: DOUBLE
47588: EQUAL
47589: IFTRUE 47593
47591: GO 47611
47593: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
47594: LD_ADDR_VAR 0 3
47598: PUSH
47599: LD_INT 23
47601: PUSH
47602: LD_INT 24
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: ST_TO_ADDR
47609: GO 47698
47611: LD_INT 46
47613: DOUBLE
47614: EQUAL
47615: IFTRUE 47619
47617: GO 47637
47619: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
47620: LD_ADDR_VAR 0 3
47624: PUSH
47625: LD_INT 23
47627: PUSH
47628: LD_INT 24
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: ST_TO_ADDR
47635: GO 47698
47637: LD_INT 47
47639: DOUBLE
47640: EQUAL
47641: IFTRUE 47645
47643: GO 47663
47645: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
47646: LD_ADDR_VAR 0 3
47650: PUSH
47651: LD_INT 23
47653: PUSH
47654: LD_INT 24
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: ST_TO_ADDR
47661: GO 47698
47663: LD_INT 98
47665: DOUBLE
47666: EQUAL
47667: IFTRUE 47671
47669: GO 47697
47671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
47672: LD_ADDR_VAR 0 3
47676: PUSH
47677: LD_INT 21
47679: PUSH
47680: LD_INT 22
47682: PUSH
47683: LD_INT 23
47685: PUSH
47686: LD_INT 24
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: ST_TO_ADDR
47695: GO 47698
47697: POP
// result := ( chassis in result ) ;
47698: LD_ADDR_VAR 0 3
47702: PUSH
47703: LD_VAR 0 1
47707: PUSH
47708: LD_VAR 0 3
47712: IN
47713: ST_TO_ADDR
// end ;
47714: LD_VAR 0 3
47718: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
47719: LD_INT 0
47721: PPUSH
47722: PPUSH
47723: PPUSH
47724: PPUSH
47725: PPUSH
47726: PPUSH
47727: PPUSH
// result := array ;
47728: LD_ADDR_VAR 0 5
47732: PUSH
47733: LD_VAR 0 1
47737: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
47738: LD_VAR 0 1
47742: NOT
47743: IFTRUE 47752
47745: PUSH
47746: LD_VAR 0 2
47750: NOT
47751: OR
47752: IFTRUE 47761
47754: PUSH
47755: LD_VAR 0 3
47759: NOT
47760: OR
47761: IFTRUE 47775
47763: PUSH
47764: LD_VAR 0 2
47768: PUSH
47769: LD_VAR 0 1
47773: GREATER
47774: OR
47775: IFTRUE 47789
47777: PUSH
47778: LD_VAR 0 3
47782: PUSH
47783: LD_VAR 0 1
47787: GREATER
47788: OR
47789: IFFALSE 47793
// exit ;
47791: GO 48089
// if direction then
47793: LD_VAR 0 4
47797: IFFALSE 47861
// begin d := 1 ;
47799: LD_ADDR_VAR 0 9
47803: PUSH
47804: LD_INT 1
47806: ST_TO_ADDR
// if i_from > i_to then
47807: LD_VAR 0 2
47811: PUSH
47812: LD_VAR 0 3
47816: GREATER
47817: IFFALSE 47843
// length := ( array - i_from ) + i_to else
47819: LD_ADDR_VAR 0 11
47823: PUSH
47824: LD_VAR 0 1
47828: PUSH
47829: LD_VAR 0 2
47833: MINUS
47834: PUSH
47835: LD_VAR 0 3
47839: PLUS
47840: ST_TO_ADDR
47841: GO 47859
// length := i_to - i_from ;
47843: LD_ADDR_VAR 0 11
47847: PUSH
47848: LD_VAR 0 3
47852: PUSH
47853: LD_VAR 0 2
47857: MINUS
47858: ST_TO_ADDR
// end else
47859: GO 47922
// begin d := - 1 ;
47861: LD_ADDR_VAR 0 9
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: ST_TO_ADDR
// if i_from > i_to then
47870: LD_VAR 0 2
47874: PUSH
47875: LD_VAR 0 3
47879: GREATER
47880: IFFALSE 47900
// length := i_from - i_to else
47882: LD_ADDR_VAR 0 11
47886: PUSH
47887: LD_VAR 0 2
47891: PUSH
47892: LD_VAR 0 3
47896: MINUS
47897: ST_TO_ADDR
47898: GO 47922
// length := ( array - i_to ) + i_from ;
47900: LD_ADDR_VAR 0 11
47904: PUSH
47905: LD_VAR 0 1
47909: PUSH
47910: LD_VAR 0 3
47914: MINUS
47915: PUSH
47916: LD_VAR 0 2
47920: PLUS
47921: ST_TO_ADDR
// end ; if not length then
47922: LD_VAR 0 11
47926: NOT
47927: IFFALSE 47931
// exit ;
47929: GO 48089
// tmp := array ;
47931: LD_ADDR_VAR 0 10
47935: PUSH
47936: LD_VAR 0 1
47940: ST_TO_ADDR
// for i = 1 to length do
47941: LD_ADDR_VAR 0 6
47945: PUSH
47946: DOUBLE
47947: LD_INT 1
47949: DEC
47950: ST_TO_ADDR
47951: LD_VAR 0 11
47955: PUSH
47956: FOR_TO
47957: IFFALSE 48077
// begin for j = 1 to array do
47959: LD_ADDR_VAR 0 7
47963: PUSH
47964: DOUBLE
47965: LD_INT 1
47967: DEC
47968: ST_TO_ADDR
47969: LD_VAR 0 1
47973: PUSH
47974: FOR_TO
47975: IFFALSE 48063
// begin k := j + d ;
47977: LD_ADDR_VAR 0 8
47981: PUSH
47982: LD_VAR 0 7
47986: PUSH
47987: LD_VAR 0 9
47991: PLUS
47992: ST_TO_ADDR
// if k > array then
47993: LD_VAR 0 8
47997: PUSH
47998: LD_VAR 0 1
48002: GREATER
48003: IFFALSE 48013
// k := 1 ;
48005: LD_ADDR_VAR 0 8
48009: PUSH
48010: LD_INT 1
48012: ST_TO_ADDR
// if not k then
48013: LD_VAR 0 8
48017: NOT
48018: IFFALSE 48030
// k := array ;
48020: LD_ADDR_VAR 0 8
48024: PUSH
48025: LD_VAR 0 1
48029: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48030: LD_ADDR_VAR 0 10
48034: PUSH
48035: LD_VAR 0 10
48039: PPUSH
48040: LD_VAR 0 8
48044: PPUSH
48045: LD_VAR 0 1
48049: PUSH
48050: LD_VAR 0 7
48054: ARRAY
48055: PPUSH
48056: CALL_OW 1
48060: ST_TO_ADDR
// end ;
48061: GO 47974
48063: POP
48064: POP
// array := tmp ;
48065: LD_ADDR_VAR 0 1
48069: PUSH
48070: LD_VAR 0 10
48074: ST_TO_ADDR
// end ;
48075: GO 47956
48077: POP
48078: POP
// result := array ;
48079: LD_ADDR_VAR 0 5
48083: PUSH
48084: LD_VAR 0 1
48088: ST_TO_ADDR
// end ;
48089: LD_VAR 0 5
48093: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48094: LD_INT 0
48096: PPUSH
48097: PPUSH
// result := 0 ;
48098: LD_ADDR_VAR 0 3
48102: PUSH
48103: LD_INT 0
48105: ST_TO_ADDR
// if not array or not value in array then
48106: LD_VAR 0 1
48110: NOT
48111: IFTRUE 48126
48113: PUSH
48114: LD_VAR 0 2
48118: PUSH
48119: LD_VAR 0 1
48123: IN
48124: NOT
48125: OR
48126: IFFALSE 48130
// exit ;
48128: GO 48184
// for i = 1 to array do
48130: LD_ADDR_VAR 0 4
48134: PUSH
48135: DOUBLE
48136: LD_INT 1
48138: DEC
48139: ST_TO_ADDR
48140: LD_VAR 0 1
48144: PUSH
48145: FOR_TO
48146: IFFALSE 48182
// if value = array [ i ] then
48148: LD_VAR 0 2
48152: PUSH
48153: LD_VAR 0 1
48157: PUSH
48158: LD_VAR 0 4
48162: ARRAY
48163: EQUAL
48164: IFFALSE 48180
// begin result := i ;
48166: LD_ADDR_VAR 0 3
48170: PUSH
48171: LD_VAR 0 4
48175: ST_TO_ADDR
// exit ;
48176: POP
48177: POP
48178: GO 48184
// end ;
48180: GO 48145
48182: POP
48183: POP
// end ;
48184: LD_VAR 0 3
48188: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48189: LD_INT 0
48191: PPUSH
// vc_chassis := chassis ;
48192: LD_ADDR_OWVAR 37
48196: PUSH
48197: LD_VAR 0 1
48201: ST_TO_ADDR
// vc_engine := engine ;
48202: LD_ADDR_OWVAR 39
48206: PUSH
48207: LD_VAR 0 2
48211: ST_TO_ADDR
// vc_control := control ;
48212: LD_ADDR_OWVAR 38
48216: PUSH
48217: LD_VAR 0 3
48221: ST_TO_ADDR
// vc_weapon := weapon ;
48222: LD_ADDR_OWVAR 40
48226: PUSH
48227: LD_VAR 0 4
48231: ST_TO_ADDR
// vc_fuel_battery := fuel ;
48232: LD_ADDR_OWVAR 41
48236: PUSH
48237: LD_VAR 0 5
48241: ST_TO_ADDR
// end ;
48242: LD_VAR 0 6
48246: RET
// export function WantPlant ( unit ) ; var task ; begin
48247: LD_INT 0
48249: PPUSH
48250: PPUSH
// result := false ;
48251: LD_ADDR_VAR 0 2
48255: PUSH
48256: LD_INT 0
48258: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
48259: LD_ADDR_VAR 0 3
48263: PUSH
48264: LD_VAR 0 1
48268: PPUSH
48269: CALL_OW 437
48273: ST_TO_ADDR
// if task then
48274: LD_VAR 0 3
48278: IFFALSE 48306
// if task [ 1 ] [ 1 ] = p then
48280: LD_VAR 0 3
48284: PUSH
48285: LD_INT 1
48287: ARRAY
48288: PUSH
48289: LD_INT 1
48291: ARRAY
48292: PUSH
48293: LD_STRING p
48295: EQUAL
48296: IFFALSE 48306
// result := true ;
48298: LD_ADDR_VAR 0 2
48302: PUSH
48303: LD_INT 1
48305: ST_TO_ADDR
// end ;
48306: LD_VAR 0 2
48310: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
48311: LD_INT 0
48313: PPUSH
48314: PPUSH
48315: PPUSH
48316: PPUSH
// if pos < 1 then
48317: LD_VAR 0 2
48321: PUSH
48322: LD_INT 1
48324: LESS
48325: IFFALSE 48329
// exit ;
48327: GO 48632
// if pos = 1 then
48329: LD_VAR 0 2
48333: PUSH
48334: LD_INT 1
48336: EQUAL
48337: IFFALSE 48370
// result := Replace ( arr , pos [ 1 ] , value ) else
48339: LD_ADDR_VAR 0 4
48343: PUSH
48344: LD_VAR 0 1
48348: PPUSH
48349: LD_VAR 0 2
48353: PUSH
48354: LD_INT 1
48356: ARRAY
48357: PPUSH
48358: LD_VAR 0 3
48362: PPUSH
48363: CALL_OW 1
48367: ST_TO_ADDR
48368: GO 48632
// begin tmp := arr ;
48370: LD_ADDR_VAR 0 6
48374: PUSH
48375: LD_VAR 0 1
48379: ST_TO_ADDR
// s_arr := [ tmp ] ;
48380: LD_ADDR_VAR 0 7
48384: PUSH
48385: LD_VAR 0 6
48389: PUSH
48390: EMPTY
48391: LIST
48392: ST_TO_ADDR
// for i = 1 to pos - 1 do
48393: LD_ADDR_VAR 0 5
48397: PUSH
48398: DOUBLE
48399: LD_INT 1
48401: DEC
48402: ST_TO_ADDR
48403: LD_VAR 0 2
48407: PUSH
48408: LD_INT 1
48410: MINUS
48411: PUSH
48412: FOR_TO
48413: IFFALSE 48458
// begin tmp := tmp [ pos [ i ] ] ;
48415: LD_ADDR_VAR 0 6
48419: PUSH
48420: LD_VAR 0 6
48424: PUSH
48425: LD_VAR 0 2
48429: PUSH
48430: LD_VAR 0 5
48434: ARRAY
48435: ARRAY
48436: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
48437: LD_ADDR_VAR 0 7
48441: PUSH
48442: LD_VAR 0 7
48446: PUSH
48447: LD_VAR 0 6
48451: PUSH
48452: EMPTY
48453: LIST
48454: ADD
48455: ST_TO_ADDR
// end ;
48456: GO 48412
48458: POP
48459: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
48460: LD_ADDR_VAR 0 6
48464: PUSH
48465: LD_VAR 0 6
48469: PPUSH
48470: LD_VAR 0 2
48474: PUSH
48475: LD_VAR 0 2
48479: ARRAY
48480: PPUSH
48481: LD_VAR 0 3
48485: PPUSH
48486: CALL_OW 1
48490: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
48491: LD_ADDR_VAR 0 7
48495: PUSH
48496: LD_VAR 0 7
48500: PPUSH
48501: LD_VAR 0 7
48505: PPUSH
48506: LD_VAR 0 6
48510: PPUSH
48511: CALL_OW 1
48515: ST_TO_ADDR
// for i = s_arr downto 2 do
48516: LD_ADDR_VAR 0 5
48520: PUSH
48521: DOUBLE
48522: LD_VAR 0 7
48526: INC
48527: ST_TO_ADDR
48528: LD_INT 2
48530: PUSH
48531: FOR_DOWNTO
48532: IFFALSE 48616
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
48534: LD_ADDR_VAR 0 6
48538: PUSH
48539: LD_VAR 0 7
48543: PUSH
48544: LD_VAR 0 5
48548: PUSH
48549: LD_INT 1
48551: MINUS
48552: ARRAY
48553: PPUSH
48554: LD_VAR 0 2
48558: PUSH
48559: LD_VAR 0 5
48563: PUSH
48564: LD_INT 1
48566: MINUS
48567: ARRAY
48568: PPUSH
48569: LD_VAR 0 7
48573: PUSH
48574: LD_VAR 0 5
48578: ARRAY
48579: PPUSH
48580: CALL_OW 1
48584: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
48585: LD_ADDR_VAR 0 7
48589: PUSH
48590: LD_VAR 0 7
48594: PPUSH
48595: LD_VAR 0 5
48599: PUSH
48600: LD_INT 1
48602: MINUS
48603: PPUSH
48604: LD_VAR 0 6
48608: PPUSH
48609: CALL_OW 1
48613: ST_TO_ADDR
// end ;
48614: GO 48531
48616: POP
48617: POP
// result := s_arr [ 1 ] ;
48618: LD_ADDR_VAR 0 4
48622: PUSH
48623: LD_VAR 0 7
48627: PUSH
48628: LD_INT 1
48630: ARRAY
48631: ST_TO_ADDR
// end ; end ;
48632: LD_VAR 0 4
48636: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
48637: LD_INT 0
48639: PPUSH
48640: PPUSH
// if not list then
48641: LD_VAR 0 1
48645: NOT
48646: IFFALSE 48650
// exit ;
48648: GO 48741
// i := list [ pos1 ] ;
48650: LD_ADDR_VAR 0 5
48654: PUSH
48655: LD_VAR 0 1
48659: PUSH
48660: LD_VAR 0 2
48664: ARRAY
48665: ST_TO_ADDR
// if not i then
48666: LD_VAR 0 5
48670: NOT
48671: IFFALSE 48675
// exit ;
48673: GO 48741
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
48675: LD_ADDR_VAR 0 1
48679: PUSH
48680: LD_VAR 0 1
48684: PPUSH
48685: LD_VAR 0 2
48689: PPUSH
48690: LD_VAR 0 1
48694: PUSH
48695: LD_VAR 0 3
48699: ARRAY
48700: PPUSH
48701: CALL_OW 1
48705: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
48706: LD_ADDR_VAR 0 1
48710: PUSH
48711: LD_VAR 0 1
48715: PPUSH
48716: LD_VAR 0 3
48720: PPUSH
48721: LD_VAR 0 5
48725: PPUSH
48726: CALL_OW 1
48730: ST_TO_ADDR
// result := list ;
48731: LD_ADDR_VAR 0 4
48735: PUSH
48736: LD_VAR 0 1
48740: ST_TO_ADDR
// end ;
48741: LD_VAR 0 4
48745: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
48746: LD_INT 0
48748: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
48749: LD_ADDR_VAR 0 5
48753: PUSH
48754: LD_VAR 0 1
48758: PPUSH
48759: CALL_OW 250
48763: PPUSH
48764: LD_VAR 0 1
48768: PPUSH
48769: CALL_OW 251
48773: PPUSH
48774: LD_VAR 0 2
48778: PPUSH
48779: LD_VAR 0 3
48783: PPUSH
48784: LD_VAR 0 4
48788: PPUSH
48789: CALL 49171 0 5
48793: ST_TO_ADDR
// end ;
48794: LD_VAR 0 5
48798: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
48799: LD_INT 0
48801: PPUSH
48802: PPUSH
48803: PPUSH
48804: PPUSH
// if not list or not unit then
48805: LD_VAR 0 2
48809: NOT
48810: IFTRUE 48819
48812: PUSH
48813: LD_VAR 0 1
48817: NOT
48818: OR
48819: IFFALSE 48823
// exit ;
48821: GO 49166
// result := [ ] ;
48823: LD_ADDR_VAR 0 5
48827: PUSH
48828: EMPTY
48829: ST_TO_ADDR
// for i in list do
48830: LD_ADDR_VAR 0 6
48834: PUSH
48835: LD_VAR 0 2
48839: PUSH
48840: FOR_IN
48841: IFFALSE 49059
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48843: LD_ADDR_VAR 0 8
48847: PUSH
48848: LD_VAR 0 1
48852: PPUSH
48853: LD_VAR 0 6
48857: PUSH
48858: LD_INT 1
48860: ARRAY
48861: PPUSH
48862: LD_VAR 0 6
48866: PUSH
48867: LD_INT 2
48869: ARRAY
48870: PPUSH
48871: CALL_OW 297
48875: ST_TO_ADDR
// if not Count ( result ) then
48876: LD_VAR 0 5
48880: PPUSH
48881: CALL 45393 0 1
48885: NOT
48886: IFFALSE 48919
// begin result := Join ( result , [ i , tmp ] ) ;
48888: LD_ADDR_VAR 0 5
48892: PUSH
48893: LD_VAR 0 5
48897: PPUSH
48898: LD_VAR 0 6
48902: PUSH
48903: LD_VAR 0 8
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PPUSH
48912: CALL 81369 0 2
48916: ST_TO_ADDR
// continue ;
48917: GO 48840
// end ; if result [ result ] [ 2 ] <= tmp then
48919: LD_VAR 0 5
48923: PUSH
48924: LD_VAR 0 5
48928: ARRAY
48929: PUSH
48930: LD_INT 2
48932: ARRAY
48933: PUSH
48934: LD_VAR 0 8
48938: LESSEQUAL
48939: IFFALSE 48972
// result := Join ( result , [ i , tmp ] ) else
48941: LD_ADDR_VAR 0 5
48945: PUSH
48946: LD_VAR 0 5
48950: PPUSH
48951: LD_VAR 0 6
48955: PUSH
48956: LD_VAR 0 8
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PPUSH
48965: CALL 81369 0 2
48969: ST_TO_ADDR
48970: GO 49057
// begin for j := 1 to Count ( result ) do
48972: LD_ADDR_VAR 0 7
48976: PUSH
48977: DOUBLE
48978: LD_INT 1
48980: DEC
48981: ST_TO_ADDR
48982: LD_VAR 0 5
48986: PPUSH
48987: CALL 45393 0 1
48991: PUSH
48992: FOR_TO
48993: IFFALSE 49055
// begin if tmp < result [ j ] [ 2 ] then
48995: LD_VAR 0 8
48999: PUSH
49000: LD_VAR 0 5
49004: PUSH
49005: LD_VAR 0 7
49009: ARRAY
49010: PUSH
49011: LD_INT 2
49013: ARRAY
49014: LESS
49015: IFFALSE 49053
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49017: LD_ADDR_VAR 0 5
49021: PUSH
49022: LD_VAR 0 5
49026: PPUSH
49027: LD_VAR 0 7
49031: PPUSH
49032: LD_VAR 0 6
49036: PUSH
49037: LD_VAR 0 8
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PPUSH
49046: CALL_OW 2
49050: ST_TO_ADDR
// break ;
49051: GO 49055
// end ; end ;
49053: GO 48992
49055: POP
49056: POP
// end ; end ;
49057: GO 48840
49059: POP
49060: POP
// if result and not asc then
49061: LD_VAR 0 5
49065: IFFALSE 49074
49067: PUSH
49068: LD_VAR 0 3
49072: NOT
49073: AND
49074: IFFALSE 49091
// result := ReverseArray ( result ) ;
49076: LD_ADDR_VAR 0 5
49080: PUSH
49081: LD_VAR 0 5
49085: PPUSH
49086: CALL 76449 0 1
49090: ST_TO_ADDR
// tmp := [ ] ;
49091: LD_ADDR_VAR 0 8
49095: PUSH
49096: EMPTY
49097: ST_TO_ADDR
// if mode then
49098: LD_VAR 0 4
49102: IFFALSE 49166
// begin for i := 1 to result do
49104: LD_ADDR_VAR 0 6
49108: PUSH
49109: DOUBLE
49110: LD_INT 1
49112: DEC
49113: ST_TO_ADDR
49114: LD_VAR 0 5
49118: PUSH
49119: FOR_TO
49120: IFFALSE 49154
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
49122: LD_ADDR_VAR 0 8
49126: PUSH
49127: LD_VAR 0 8
49131: PPUSH
49132: LD_VAR 0 5
49136: PUSH
49137: LD_VAR 0 6
49141: ARRAY
49142: PUSH
49143: LD_INT 1
49145: ARRAY
49146: PPUSH
49147: CALL 81369 0 2
49151: ST_TO_ADDR
49152: GO 49119
49154: POP
49155: POP
// result := tmp ;
49156: LD_ADDR_VAR 0 5
49160: PUSH
49161: LD_VAR 0 8
49165: ST_TO_ADDR
// end ; end ;
49166: LD_VAR 0 5
49170: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49171: LD_INT 0
49173: PPUSH
49174: PPUSH
49175: PPUSH
49176: PPUSH
// if not list then
49177: LD_VAR 0 3
49181: NOT
49182: IFFALSE 49186
// exit ;
49184: GO 49576
// result := [ ] ;
49186: LD_ADDR_VAR 0 6
49190: PUSH
49191: EMPTY
49192: ST_TO_ADDR
// for i in list do
49193: LD_ADDR_VAR 0 7
49197: PUSH
49198: LD_VAR 0 3
49202: PUSH
49203: FOR_IN
49204: IFFALSE 49406
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49206: LD_ADDR_VAR 0 9
49210: PUSH
49211: LD_VAR 0 7
49215: PPUSH
49216: LD_VAR 0 1
49220: PPUSH
49221: LD_VAR 0 2
49225: PPUSH
49226: CALL_OW 297
49230: ST_TO_ADDR
// if not result then
49231: LD_VAR 0 6
49235: NOT
49236: IFFALSE 49262
// result := [ [ i , tmp ] ] else
49238: LD_ADDR_VAR 0 6
49242: PUSH
49243: LD_VAR 0 7
49247: PUSH
49248: LD_VAR 0 9
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: EMPTY
49258: LIST
49259: ST_TO_ADDR
49260: GO 49404
// begin if result [ result ] [ 2 ] <= tmp then
49262: LD_VAR 0 6
49266: PUSH
49267: LD_VAR 0 6
49271: ARRAY
49272: PUSH
49273: LD_INT 2
49275: ARRAY
49276: PUSH
49277: LD_VAR 0 9
49281: LESSEQUAL
49282: IFFALSE 49324
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49284: LD_ADDR_VAR 0 6
49288: PUSH
49289: LD_VAR 0 6
49293: PPUSH
49294: LD_VAR 0 6
49298: PUSH
49299: LD_INT 1
49301: PLUS
49302: PPUSH
49303: LD_VAR 0 7
49307: PUSH
49308: LD_VAR 0 9
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PPUSH
49317: CALL_OW 2
49321: ST_TO_ADDR
49322: GO 49404
// for j := 1 to result do
49324: LD_ADDR_VAR 0 8
49328: PUSH
49329: DOUBLE
49330: LD_INT 1
49332: DEC
49333: ST_TO_ADDR
49334: LD_VAR 0 6
49338: PUSH
49339: FOR_TO
49340: IFFALSE 49402
// begin if tmp < result [ j ] [ 2 ] then
49342: LD_VAR 0 9
49346: PUSH
49347: LD_VAR 0 6
49351: PUSH
49352: LD_VAR 0 8
49356: ARRAY
49357: PUSH
49358: LD_INT 2
49360: ARRAY
49361: LESS
49362: IFFALSE 49400
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49364: LD_ADDR_VAR 0 6
49368: PUSH
49369: LD_VAR 0 6
49373: PPUSH
49374: LD_VAR 0 8
49378: PPUSH
49379: LD_VAR 0 7
49383: PUSH
49384: LD_VAR 0 9
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PPUSH
49393: CALL_OW 2
49397: ST_TO_ADDR
// break ;
49398: GO 49402
// end ; end ;
49400: GO 49339
49402: POP
49403: POP
// end ; end ;
49404: GO 49203
49406: POP
49407: POP
// if result and not asc then
49408: LD_VAR 0 6
49412: IFFALSE 49421
49414: PUSH
49415: LD_VAR 0 4
49419: NOT
49420: AND
49421: IFFALSE 49496
// begin tmp := result ;
49423: LD_ADDR_VAR 0 9
49427: PUSH
49428: LD_VAR 0 6
49432: ST_TO_ADDR
// for i = tmp downto 1 do
49433: LD_ADDR_VAR 0 7
49437: PUSH
49438: DOUBLE
49439: LD_VAR 0 9
49443: INC
49444: ST_TO_ADDR
49445: LD_INT 1
49447: PUSH
49448: FOR_DOWNTO
49449: IFFALSE 49494
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49451: LD_ADDR_VAR 0 6
49455: PUSH
49456: LD_VAR 0 6
49460: PPUSH
49461: LD_VAR 0 9
49465: PUSH
49466: LD_VAR 0 7
49470: MINUS
49471: PUSH
49472: LD_INT 1
49474: PLUS
49475: PPUSH
49476: LD_VAR 0 9
49480: PUSH
49481: LD_VAR 0 7
49485: ARRAY
49486: PPUSH
49487: CALL_OW 1
49491: ST_TO_ADDR
49492: GO 49448
49494: POP
49495: POP
// end ; tmp := [ ] ;
49496: LD_ADDR_VAR 0 9
49500: PUSH
49501: EMPTY
49502: ST_TO_ADDR
// if mode then
49503: LD_VAR 0 5
49507: IFFALSE 49576
// begin for i = 1 to result do
49509: LD_ADDR_VAR 0 7
49513: PUSH
49514: DOUBLE
49515: LD_INT 1
49517: DEC
49518: ST_TO_ADDR
49519: LD_VAR 0 6
49523: PUSH
49524: FOR_TO
49525: IFFALSE 49564
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49527: LD_ADDR_VAR 0 9
49531: PUSH
49532: LD_VAR 0 9
49536: PPUSH
49537: LD_VAR 0 7
49541: PPUSH
49542: LD_VAR 0 6
49546: PUSH
49547: LD_VAR 0 7
49551: ARRAY
49552: PUSH
49553: LD_INT 1
49555: ARRAY
49556: PPUSH
49557: CALL_OW 1
49561: ST_TO_ADDR
49562: GO 49524
49564: POP
49565: POP
// result := tmp ;
49566: LD_ADDR_VAR 0 6
49570: PUSH
49571: LD_VAR 0 9
49575: ST_TO_ADDR
// end ; end ;
49576: LD_VAR 0 6
49580: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49581: LD_INT 0
49583: PPUSH
49584: PPUSH
49585: PPUSH
49586: PPUSH
49587: PPUSH
49588: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49589: LD_ADDR_VAR 0 5
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: EMPTY
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: ST_TO_ADDR
// if not x or not y then
49611: LD_VAR 0 2
49615: NOT
49616: IFTRUE 49625
49618: PUSH
49619: LD_VAR 0 3
49623: NOT
49624: OR
49625: IFFALSE 49629
// exit ;
49627: GO 51285
// if not range then
49629: LD_VAR 0 4
49633: NOT
49634: IFFALSE 49644
// range := 10 ;
49636: LD_ADDR_VAR 0 4
49640: PUSH
49641: LD_INT 10
49643: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49644: LD_ADDR_VAR 0 8
49648: PUSH
49649: LD_INT 81
49651: PUSH
49652: LD_VAR 0 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 92
49663: PUSH
49664: LD_VAR 0 2
49668: PUSH
49669: LD_VAR 0 3
49673: PUSH
49674: LD_VAR 0 4
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: PUSH
49688: LD_INT 21
49690: PUSH
49691: LD_INT 3
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: LIST
49706: PPUSH
49707: CALL_OW 69
49711: ST_TO_ADDR
// if not tmp then
49712: LD_VAR 0 8
49716: NOT
49717: IFFALSE 49721
// exit ;
49719: GO 51285
// for i in tmp do
49721: LD_ADDR_VAR 0 6
49725: PUSH
49726: LD_VAR 0 8
49730: PUSH
49731: FOR_IN
49732: IFFALSE 51260
// begin points := [ 0 , 0 , 0 ] ;
49734: LD_ADDR_VAR 0 9
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: LIST
49752: ST_TO_ADDR
// bpoints := 1 ;
49753: LD_ADDR_VAR 0 10
49757: PUSH
49758: LD_INT 1
49760: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49761: LD_VAR 0 6
49765: PPUSH
49766: CALL_OW 247
49770: PUSH
49771: LD_INT 1
49773: DOUBLE
49774: EQUAL
49775: IFTRUE 49779
49777: GO 50361
49779: POP
// begin if GetClass ( i ) = 1 then
49780: LD_VAR 0 6
49784: PPUSH
49785: CALL_OW 257
49789: PUSH
49790: LD_INT 1
49792: EQUAL
49793: IFFALSE 49814
// points := [ 10 , 5 , 3 ] ;
49795: LD_ADDR_VAR 0 9
49799: PUSH
49800: LD_INT 10
49802: PUSH
49803: LD_INT 5
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: LIST
49813: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49814: LD_VAR 0 6
49818: PPUSH
49819: CALL_OW 257
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: LD_INT 3
49829: PUSH
49830: LD_INT 4
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: LIST
49837: IN
49838: IFFALSE 49859
// points := [ 3 , 2 , 1 ] ;
49840: LD_ADDR_VAR 0 9
49844: PUSH
49845: LD_INT 3
49847: PUSH
49848: LD_INT 2
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: LIST
49858: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49859: LD_VAR 0 6
49863: PPUSH
49864: CALL_OW 257
49868: PUSH
49869: LD_INT 5
49871: EQUAL
49872: IFFALSE 49893
// points := [ 130 , 5 , 2 ] ;
49874: LD_ADDR_VAR 0 9
49878: PUSH
49879: LD_INT 130
49881: PUSH
49882: LD_INT 5
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: LIST
49892: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49893: LD_VAR 0 6
49897: PPUSH
49898: CALL_OW 257
49902: PUSH
49903: LD_INT 8
49905: EQUAL
49906: IFFALSE 49927
// points := [ 35 , 35 , 30 ] ;
49908: LD_ADDR_VAR 0 9
49912: PUSH
49913: LD_INT 35
49915: PUSH
49916: LD_INT 35
49918: PUSH
49919: LD_INT 30
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: LIST
49926: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49927: LD_VAR 0 6
49931: PPUSH
49932: CALL_OW 257
49936: PUSH
49937: LD_INT 9
49939: EQUAL
49940: IFFALSE 49961
// points := [ 20 , 55 , 40 ] ;
49942: LD_ADDR_VAR 0 9
49946: PUSH
49947: LD_INT 20
49949: PUSH
49950: LD_INT 55
49952: PUSH
49953: LD_INT 40
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: LIST
49960: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49961: LD_VAR 0 6
49965: PPUSH
49966: CALL_OW 257
49970: PUSH
49971: LD_INT 12
49973: PUSH
49974: LD_INT 16
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: IN
49981: IFFALSE 50002
// points := [ 5 , 3 , 2 ] ;
49983: LD_ADDR_VAR 0 9
49987: PUSH
49988: LD_INT 5
49990: PUSH
49991: LD_INT 3
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: LIST
50001: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50002: LD_VAR 0 6
50006: PPUSH
50007: CALL_OW 257
50011: PUSH
50012: LD_INT 17
50014: EQUAL
50015: IFFALSE 50036
// points := [ 100 , 50 , 75 ] ;
50017: LD_ADDR_VAR 0 9
50021: PUSH
50022: LD_INT 100
50024: PUSH
50025: LD_INT 50
50027: PUSH
50028: LD_INT 75
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: LIST
50035: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50036: LD_VAR 0 6
50040: PPUSH
50041: CALL_OW 257
50045: PUSH
50046: LD_INT 15
50048: EQUAL
50049: IFFALSE 50070
// points := [ 10 , 5 , 3 ] ;
50051: LD_ADDR_VAR 0 9
50055: PUSH
50056: LD_INT 10
50058: PUSH
50059: LD_INT 5
50061: PUSH
50062: LD_INT 3
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: LIST
50069: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50070: LD_VAR 0 6
50074: PPUSH
50075: CALL_OW 257
50079: PUSH
50080: LD_INT 14
50082: EQUAL
50083: IFFALSE 50104
// points := [ 10 , 0 , 0 ] ;
50085: LD_ADDR_VAR 0 9
50089: PUSH
50090: LD_INT 10
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: LIST
50103: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50104: LD_VAR 0 6
50108: PPUSH
50109: CALL_OW 257
50113: PUSH
50114: LD_INT 11
50116: EQUAL
50117: IFFALSE 50138
// points := [ 30 , 10 , 5 ] ;
50119: LD_ADDR_VAR 0 9
50123: PUSH
50124: LD_INT 30
50126: PUSH
50127: LD_INT 10
50129: PUSH
50130: LD_INT 5
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: LIST
50137: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50138: LD_VAR 0 1
50142: PPUSH
50143: LD_INT 5
50145: PPUSH
50146: CALL_OW 321
50150: PUSH
50151: LD_INT 2
50153: EQUAL
50154: IFFALSE 50171
// bpoints := bpoints * 1.8 ;
50156: LD_ADDR_VAR 0 10
50160: PUSH
50161: LD_VAR 0 10
50165: PUSH
50166: LD_REAL  1.80000000000000E+0000
50169: MUL
50170: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50171: LD_VAR 0 6
50175: PPUSH
50176: CALL_OW 257
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: LD_INT 3
50189: PUSH
50190: LD_INT 4
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: IN
50199: IFFALSE 50219
50201: PUSH
50202: LD_VAR 0 1
50206: PPUSH
50207: LD_INT 51
50209: PPUSH
50210: CALL_OW 321
50214: PUSH
50215: LD_INT 2
50217: EQUAL
50218: AND
50219: IFFALSE 50236
// bpoints := bpoints * 1.2 ;
50221: LD_ADDR_VAR 0 10
50225: PUSH
50226: LD_VAR 0 10
50230: PUSH
50231: LD_REAL  1.20000000000000E+0000
50234: MUL
50235: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50236: LD_VAR 0 6
50240: PPUSH
50241: CALL_OW 257
50245: PUSH
50246: LD_INT 5
50248: PUSH
50249: LD_INT 7
50251: PUSH
50252: LD_INT 9
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: IN
50260: IFFALSE 50280
50262: PUSH
50263: LD_VAR 0 1
50267: PPUSH
50268: LD_INT 52
50270: PPUSH
50271: CALL_OW 321
50275: PUSH
50276: LD_INT 2
50278: EQUAL
50279: AND
50280: IFFALSE 50297
// bpoints := bpoints * 1.5 ;
50282: LD_ADDR_VAR 0 10
50286: PUSH
50287: LD_VAR 0 10
50291: PUSH
50292: LD_REAL  1.50000000000000E+0000
50295: MUL
50296: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50297: LD_VAR 0 1
50301: PPUSH
50302: LD_INT 66
50304: PPUSH
50305: CALL_OW 321
50309: PUSH
50310: LD_INT 2
50312: EQUAL
50313: IFFALSE 50330
// bpoints := bpoints * 1.1 ;
50315: LD_ADDR_VAR 0 10
50319: PUSH
50320: LD_VAR 0 10
50324: PUSH
50325: LD_REAL  1.10000000000000E+0000
50328: MUL
50329: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50330: LD_ADDR_VAR 0 10
50334: PUSH
50335: LD_VAR 0 10
50339: PUSH
50340: LD_VAR 0 6
50344: PPUSH
50345: LD_INT 1
50347: PPUSH
50348: CALL_OW 259
50352: PUSH
50353: LD_REAL  1.15000000000000E+0000
50356: MUL
50357: MUL
50358: ST_TO_ADDR
// end ; unit_vehicle :
50359: GO 51189
50361: LD_INT 2
50363: DOUBLE
50364: EQUAL
50365: IFTRUE 50369
50367: GO 51177
50369: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50370: LD_VAR 0 6
50374: PPUSH
50375: CALL_OW 264
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 42
50385: PUSH
50386: LD_INT 24
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: LIST
50393: IN
50394: IFFALSE 50415
// points := [ 25 , 5 , 3 ] ;
50396: LD_ADDR_VAR 0 9
50400: PUSH
50401: LD_INT 25
50403: PUSH
50404: LD_INT 5
50406: PUSH
50407: LD_INT 3
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50415: LD_VAR 0 6
50419: PPUSH
50420: CALL_OW 264
50424: PUSH
50425: LD_INT 4
50427: PUSH
50428: LD_INT 43
50430: PUSH
50431: LD_INT 25
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: LIST
50438: IN
50439: IFFALSE 50460
// points := [ 40 , 15 , 5 ] ;
50441: LD_ADDR_VAR 0 9
50445: PUSH
50446: LD_INT 40
50448: PUSH
50449: LD_INT 15
50451: PUSH
50452: LD_INT 5
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50460: LD_VAR 0 6
50464: PPUSH
50465: CALL_OW 264
50469: PUSH
50470: LD_INT 3
50472: PUSH
50473: LD_INT 23
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: IN
50480: IFFALSE 50501
// points := [ 7 , 25 , 8 ] ;
50482: LD_ADDR_VAR 0 9
50486: PUSH
50487: LD_INT 7
50489: PUSH
50490: LD_INT 25
50492: PUSH
50493: LD_INT 8
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50501: LD_VAR 0 6
50505: PPUSH
50506: CALL_OW 264
50510: PUSH
50511: LD_INT 5
50513: PUSH
50514: LD_INT 27
50516: PUSH
50517: LD_INT 44
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: LIST
50524: IN
50525: IFFALSE 50546
// points := [ 14 , 50 , 16 ] ;
50527: LD_ADDR_VAR 0 9
50531: PUSH
50532: LD_INT 14
50534: PUSH
50535: LD_INT 50
50537: PUSH
50538: LD_INT 16
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50546: LD_VAR 0 6
50550: PPUSH
50551: CALL_OW 264
50555: PUSH
50556: LD_INT 6
50558: PUSH
50559: LD_INT 46
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: IN
50566: IFFALSE 50587
// points := [ 32 , 120 , 70 ] ;
50568: LD_ADDR_VAR 0 9
50572: PUSH
50573: LD_INT 32
50575: PUSH
50576: LD_INT 120
50578: PUSH
50579: LD_INT 70
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
50587: LD_VAR 0 6
50591: PPUSH
50592: CALL_OW 264
50596: PUSH
50597: LD_INT 7
50599: PUSH
50600: LD_INT 28
50602: PUSH
50603: LD_INT 45
50605: PUSH
50606: LD_INT 92
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: IN
50615: IFFALSE 50636
// points := [ 35 , 20 , 45 ] ;
50617: LD_ADDR_VAR 0 9
50621: PUSH
50622: LD_INT 35
50624: PUSH
50625: LD_INT 20
50627: PUSH
50628: LD_INT 45
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: LIST
50635: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50636: LD_VAR 0 6
50640: PPUSH
50641: CALL_OW 264
50645: PUSH
50646: LD_INT 47
50648: PUSH
50649: EMPTY
50650: LIST
50651: IN
50652: IFFALSE 50673
// points := [ 67 , 45 , 75 ] ;
50654: LD_ADDR_VAR 0 9
50658: PUSH
50659: LD_INT 67
50661: PUSH
50662: LD_INT 45
50664: PUSH
50665: LD_INT 75
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: LIST
50672: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50673: LD_VAR 0 6
50677: PPUSH
50678: CALL_OW 264
50682: PUSH
50683: LD_INT 26
50685: PUSH
50686: EMPTY
50687: LIST
50688: IN
50689: IFFALSE 50710
// points := [ 120 , 30 , 80 ] ;
50691: LD_ADDR_VAR 0 9
50695: PUSH
50696: LD_INT 120
50698: PUSH
50699: LD_INT 30
50701: PUSH
50702: LD_INT 80
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: LIST
50709: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50710: LD_VAR 0 6
50714: PPUSH
50715: CALL_OW 264
50719: PUSH
50720: LD_INT 22
50722: PUSH
50723: EMPTY
50724: LIST
50725: IN
50726: IFFALSE 50747
// points := [ 40 , 1 , 1 ] ;
50728: LD_ADDR_VAR 0 9
50732: PUSH
50733: LD_INT 40
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: LIST
50746: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50747: LD_VAR 0 6
50751: PPUSH
50752: CALL_OW 264
50756: PUSH
50757: LD_INT 29
50759: PUSH
50760: EMPTY
50761: LIST
50762: IN
50763: IFFALSE 50784
// points := [ 70 , 200 , 400 ] ;
50765: LD_ADDR_VAR 0 9
50769: PUSH
50770: LD_INT 70
50772: PUSH
50773: LD_INT 200
50775: PUSH
50776: LD_INT 400
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: LIST
50783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50784: LD_VAR 0 6
50788: PPUSH
50789: CALL_OW 264
50793: PUSH
50794: LD_INT 14
50796: PUSH
50797: LD_INT 53
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: IN
50804: IFFALSE 50825
// points := [ 40 , 10 , 20 ] ;
50806: LD_ADDR_VAR 0 9
50810: PUSH
50811: LD_INT 40
50813: PUSH
50814: LD_INT 10
50816: PUSH
50817: LD_INT 20
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: LIST
50824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50825: LD_VAR 0 6
50829: PPUSH
50830: CALL_OW 264
50834: PUSH
50835: LD_INT 9
50837: PUSH
50838: EMPTY
50839: LIST
50840: IN
50841: IFFALSE 50862
// points := [ 5 , 70 , 20 ] ;
50843: LD_ADDR_VAR 0 9
50847: PUSH
50848: LD_INT 5
50850: PUSH
50851: LD_INT 70
50853: PUSH
50854: LD_INT 20
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50862: LD_VAR 0 6
50866: PPUSH
50867: CALL_OW 264
50871: PUSH
50872: LD_INT 10
50874: PUSH
50875: EMPTY
50876: LIST
50877: IN
50878: IFFALSE 50899
// points := [ 35 , 110 , 70 ] ;
50880: LD_ADDR_VAR 0 9
50884: PUSH
50885: LD_INT 35
50887: PUSH
50888: LD_INT 110
50890: PUSH
50891: LD_INT 70
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50899: LD_VAR 0 6
50903: PPUSH
50904: CALL_OW 265
50908: PUSH
50909: LD_INT 25
50911: EQUAL
50912: IFFALSE 50933
// points := [ 80 , 65 , 100 ] ;
50914: LD_ADDR_VAR 0 9
50918: PUSH
50919: LD_INT 80
50921: PUSH
50922: LD_INT 65
50924: PUSH
50925: LD_INT 100
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: LIST
50932: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50933: LD_VAR 0 6
50937: PPUSH
50938: CALL_OW 263
50942: PUSH
50943: LD_INT 1
50945: EQUAL
50946: IFFALSE 50981
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50948: LD_ADDR_VAR 0 10
50952: PUSH
50953: LD_VAR 0 10
50957: PUSH
50958: LD_VAR 0 6
50962: PPUSH
50963: CALL_OW 311
50967: PPUSH
50968: LD_INT 3
50970: PPUSH
50971: CALL_OW 259
50975: PUSH
50976: LD_INT 4
50978: MUL
50979: MUL
50980: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50981: LD_VAR 0 6
50985: PPUSH
50986: CALL_OW 263
50990: PUSH
50991: LD_INT 2
50993: EQUAL
50994: IFFALSE 51045
// begin j := IsControledBy ( i ) ;
50996: LD_ADDR_VAR 0 7
51000: PUSH
51001: LD_VAR 0 6
51005: PPUSH
51006: CALL_OW 312
51010: ST_TO_ADDR
// if j then
51011: LD_VAR 0 7
51015: IFFALSE 51045
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51017: LD_ADDR_VAR 0 10
51021: PUSH
51022: LD_VAR 0 10
51026: PUSH
51027: LD_VAR 0 7
51031: PPUSH
51032: LD_INT 3
51034: PPUSH
51035: CALL_OW 259
51039: PUSH
51040: LD_INT 3
51042: MUL
51043: MUL
51044: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51045: LD_VAR 0 6
51049: PPUSH
51050: CALL_OW 264
51054: PUSH
51055: LD_INT 5
51057: PUSH
51058: LD_INT 6
51060: PUSH
51061: LD_INT 46
51063: PUSH
51064: LD_INT 44
51066: PUSH
51067: LD_INT 47
51069: PUSH
51070: LD_INT 45
51072: PUSH
51073: LD_INT 28
51075: PUSH
51076: LD_INT 7
51078: PUSH
51079: LD_INT 27
51081: PUSH
51082: LD_INT 29
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: IN
51097: IFFALSE 51117
51099: PUSH
51100: LD_VAR 0 1
51104: PPUSH
51105: LD_INT 52
51107: PPUSH
51108: CALL_OW 321
51112: PUSH
51113: LD_INT 2
51115: EQUAL
51116: AND
51117: IFFALSE 51134
// bpoints := bpoints * 1.2 ;
51119: LD_ADDR_VAR 0 10
51123: PUSH
51124: LD_VAR 0 10
51128: PUSH
51129: LD_REAL  1.20000000000000E+0000
51132: MUL
51133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51134: LD_VAR 0 6
51138: PPUSH
51139: CALL_OW 264
51143: PUSH
51144: LD_INT 6
51146: PUSH
51147: LD_INT 46
51149: PUSH
51150: LD_INT 47
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: LIST
51157: IN
51158: IFFALSE 51175
// bpoints := bpoints * 1.2 ;
51160: LD_ADDR_VAR 0 10
51164: PUSH
51165: LD_VAR 0 10
51169: PUSH
51170: LD_REAL  1.20000000000000E+0000
51173: MUL
51174: ST_TO_ADDR
// end ; unit_building :
51175: GO 51189
51177: LD_INT 3
51179: DOUBLE
51180: EQUAL
51181: IFTRUE 51185
51183: GO 51188
51185: POP
// ; end ;
51186: GO 51189
51188: POP
// for j = 1 to 3 do
51189: LD_ADDR_VAR 0 7
51193: PUSH
51194: DOUBLE
51195: LD_INT 1
51197: DEC
51198: ST_TO_ADDR
51199: LD_INT 3
51201: PUSH
51202: FOR_TO
51203: IFFALSE 51256
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51205: LD_ADDR_VAR 0 5
51209: PUSH
51210: LD_VAR 0 5
51214: PPUSH
51215: LD_VAR 0 7
51219: PPUSH
51220: LD_VAR 0 5
51224: PUSH
51225: LD_VAR 0 7
51229: ARRAY
51230: PUSH
51231: LD_VAR 0 9
51235: PUSH
51236: LD_VAR 0 7
51240: ARRAY
51241: PUSH
51242: LD_VAR 0 10
51246: MUL
51247: PLUS
51248: PPUSH
51249: CALL_OW 1
51253: ST_TO_ADDR
51254: GO 51202
51256: POP
51257: POP
// end ;
51258: GO 49731
51260: POP
51261: POP
// result := Replace ( result , 4 , tmp ) ;
51262: LD_ADDR_VAR 0 5
51266: PUSH
51267: LD_VAR 0 5
51271: PPUSH
51272: LD_INT 4
51274: PPUSH
51275: LD_VAR 0 8
51279: PPUSH
51280: CALL_OW 1
51284: ST_TO_ADDR
// end ;
51285: LD_VAR 0 5
51289: RET
// export function DangerAtRange ( unit , range ) ; begin
51290: LD_INT 0
51292: PPUSH
// if not unit then
51293: LD_VAR 0 1
51297: NOT
51298: IFFALSE 51302
// exit ;
51300: GO 51347
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51302: LD_ADDR_VAR 0 3
51306: PUSH
51307: LD_VAR 0 1
51311: PPUSH
51312: CALL_OW 255
51316: PPUSH
51317: LD_VAR 0 1
51321: PPUSH
51322: CALL_OW 250
51326: PPUSH
51327: LD_VAR 0 1
51331: PPUSH
51332: CALL_OW 251
51336: PPUSH
51337: LD_VAR 0 2
51341: PPUSH
51342: CALL 49581 0 4
51346: ST_TO_ADDR
// end ;
51347: LD_VAR 0 3
51351: RET
// export function DangerInArea ( side , area ) ; begin
51352: LD_INT 0
51354: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51355: LD_ADDR_VAR 0 3
51359: PUSH
51360: LD_VAR 0 2
51364: PPUSH
51365: LD_INT 81
51367: PUSH
51368: LD_VAR 0 1
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PPUSH
51377: CALL_OW 70
51381: ST_TO_ADDR
// end ;
51382: LD_VAR 0 3
51386: RET
// export function IsExtension ( b ) ; begin
51387: LD_INT 0
51389: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51390: LD_ADDR_VAR 0 2
51394: PUSH
51395: LD_VAR 0 1
51399: PUSH
51400: LD_INT 23
51402: PUSH
51403: LD_INT 20
51405: PUSH
51406: LD_INT 22
51408: PUSH
51409: LD_INT 17
51411: PUSH
51412: LD_INT 24
51414: PUSH
51415: LD_INT 21
51417: PUSH
51418: LD_INT 19
51420: PUSH
51421: LD_INT 16
51423: PUSH
51424: LD_INT 25
51426: PUSH
51427: LD_INT 18
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: IN
51442: ST_TO_ADDR
// end ;
51443: LD_VAR 0 2
51447: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
51448: LD_INT 0
51450: PPUSH
51451: PPUSH
51452: PPUSH
// result := [ ] ;
51453: LD_ADDR_VAR 0 4
51457: PUSH
51458: EMPTY
51459: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51460: LD_ADDR_VAR 0 5
51464: PUSH
51465: LD_VAR 0 2
51469: PPUSH
51470: LD_INT 21
51472: PUSH
51473: LD_INT 3
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PPUSH
51480: CALL_OW 70
51484: ST_TO_ADDR
// if not tmp then
51485: LD_VAR 0 5
51489: NOT
51490: IFFALSE 51494
// exit ;
51492: GO 51558
// if checkLink then
51494: LD_VAR 0 3
51498: IFFALSE 51548
// begin for i in tmp do
51500: LD_ADDR_VAR 0 6
51504: PUSH
51505: LD_VAR 0 5
51509: PUSH
51510: FOR_IN
51511: IFFALSE 51546
// if GetBase ( i ) <> base then
51513: LD_VAR 0 6
51517: PPUSH
51518: CALL_OW 274
51522: PUSH
51523: LD_VAR 0 1
51527: NONEQUAL
51528: IFFALSE 51544
// ComLinkToBase ( base , i ) ;
51530: LD_VAR 0 1
51534: PPUSH
51535: LD_VAR 0 6
51539: PPUSH
51540: CALL_OW 169
51544: GO 51510
51546: POP
51547: POP
// end ; result := tmp ;
51548: LD_ADDR_VAR 0 4
51552: PUSH
51553: LD_VAR 0 5
51557: ST_TO_ADDR
// end ;
51558: LD_VAR 0 4
51562: RET
// export function ComComplete ( units , b ) ; var i ; begin
51563: LD_INT 0
51565: PPUSH
51566: PPUSH
// if not units then
51567: LD_VAR 0 1
51571: NOT
51572: IFFALSE 51576
// exit ;
51574: GO 51666
// for i in units do
51576: LD_ADDR_VAR 0 4
51580: PUSH
51581: LD_VAR 0 1
51585: PUSH
51586: FOR_IN
51587: IFFALSE 51664
// if BuildingStatus ( b ) = bs_build then
51589: LD_VAR 0 2
51593: PPUSH
51594: CALL_OW 461
51598: PUSH
51599: LD_INT 1
51601: EQUAL
51602: IFFALSE 51662
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51604: LD_VAR 0 4
51608: PPUSH
51609: LD_STRING h
51611: PUSH
51612: LD_VAR 0 2
51616: PPUSH
51617: CALL_OW 250
51621: PUSH
51622: LD_VAR 0 2
51626: PPUSH
51627: CALL_OW 251
51631: PUSH
51632: LD_VAR 0 2
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: PPUSH
51658: CALL_OW 446
51662: GO 51586
51664: POP
51665: POP
// end ;
51666: LD_VAR 0 3
51670: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51671: LD_INT 0
51673: PPUSH
51674: PPUSH
51675: PPUSH
51676: PPUSH
51677: PPUSH
51678: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51679: LD_VAR 0 1
51683: NOT
51684: IFTRUE 51701
51686: PUSH
51687: LD_VAR 0 1
51691: PPUSH
51692: CALL_OW 263
51696: PUSH
51697: LD_INT 2
51699: NONEQUAL
51700: OR
51701: IFFALSE 51705
// exit ;
51703: GO 52021
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51705: LD_ADDR_VAR 0 6
51709: PUSH
51710: LD_INT 22
51712: PUSH
51713: LD_VAR 0 1
51717: PPUSH
51718: CALL_OW 255
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: LD_INT 30
51732: PUSH
51733: LD_INT 36
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 34
51742: PUSH
51743: LD_INT 31
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: LIST
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PPUSH
51759: CALL_OW 69
51763: ST_TO_ADDR
// if not tmp then
51764: LD_VAR 0 6
51768: NOT
51769: IFFALSE 51773
// exit ;
51771: GO 52021
// result := [ ] ;
51773: LD_ADDR_VAR 0 2
51777: PUSH
51778: EMPTY
51779: ST_TO_ADDR
// for i in tmp do
51780: LD_ADDR_VAR 0 3
51784: PUSH
51785: LD_VAR 0 6
51789: PUSH
51790: FOR_IN
51791: IFFALSE 51862
// begin t := UnitsInside ( i ) ;
51793: LD_ADDR_VAR 0 4
51797: PUSH
51798: LD_VAR 0 3
51802: PPUSH
51803: CALL_OW 313
51807: ST_TO_ADDR
// if t then
51808: LD_VAR 0 4
51812: IFFALSE 51860
// for j in t do
51814: LD_ADDR_VAR 0 7
51818: PUSH
51819: LD_VAR 0 4
51823: PUSH
51824: FOR_IN
51825: IFFALSE 51858
// result := Replace ( result , result + 1 , j ) ;
51827: LD_ADDR_VAR 0 2
51831: PUSH
51832: LD_VAR 0 2
51836: PPUSH
51837: LD_VAR 0 2
51841: PUSH
51842: LD_INT 1
51844: PLUS
51845: PPUSH
51846: LD_VAR 0 7
51850: PPUSH
51851: CALL_OW 1
51855: ST_TO_ADDR
51856: GO 51824
51858: POP
51859: POP
// end ;
51860: GO 51790
51862: POP
51863: POP
// if not result then
51864: LD_VAR 0 2
51868: NOT
51869: IFFALSE 51873
// exit ;
51871: GO 52021
// mech := result [ 1 ] ;
51873: LD_ADDR_VAR 0 5
51877: PUSH
51878: LD_VAR 0 2
51882: PUSH
51883: LD_INT 1
51885: ARRAY
51886: ST_TO_ADDR
// if result > 1 then
51887: LD_VAR 0 2
51891: PUSH
51892: LD_INT 1
51894: GREATER
51895: IFFALSE 52007
// begin for i = 2 to result do
51897: LD_ADDR_VAR 0 3
51901: PUSH
51902: DOUBLE
51903: LD_INT 2
51905: DEC
51906: ST_TO_ADDR
51907: LD_VAR 0 2
51911: PUSH
51912: FOR_TO
51913: IFFALSE 52005
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51915: LD_ADDR_VAR 0 4
51919: PUSH
51920: LD_VAR 0 2
51924: PUSH
51925: LD_VAR 0 3
51929: ARRAY
51930: PPUSH
51931: LD_INT 3
51933: PPUSH
51934: CALL_OW 259
51938: PUSH
51939: LD_VAR 0 2
51943: PUSH
51944: LD_VAR 0 3
51948: ARRAY
51949: PPUSH
51950: CALL_OW 432
51954: MINUS
51955: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51956: LD_VAR 0 4
51960: PUSH
51961: LD_VAR 0 5
51965: PPUSH
51966: LD_INT 3
51968: PPUSH
51969: CALL_OW 259
51973: PUSH
51974: LD_VAR 0 5
51978: PPUSH
51979: CALL_OW 432
51983: MINUS
51984: GREATEREQUAL
51985: IFFALSE 52003
// mech := result [ i ] ;
51987: LD_ADDR_VAR 0 5
51991: PUSH
51992: LD_VAR 0 2
51996: PUSH
51997: LD_VAR 0 3
52001: ARRAY
52002: ST_TO_ADDR
// end ;
52003: GO 51912
52005: POP
52006: POP
// end ; ComLinkTo ( vehicle , mech ) ;
52007: LD_VAR 0 1
52011: PPUSH
52012: LD_VAR 0 5
52016: PPUSH
52017: CALL_OW 135
// end ;
52021: LD_VAR 0 2
52025: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52026: LD_INT 0
52028: PPUSH
52029: PPUSH
52030: PPUSH
52031: PPUSH
52032: PPUSH
52033: PPUSH
52034: PPUSH
52035: PPUSH
52036: PPUSH
52037: PPUSH
52038: PPUSH
52039: PPUSH
52040: PPUSH
// result := [ ] ;
52041: LD_ADDR_VAR 0 7
52045: PUSH
52046: EMPTY
52047: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52048: LD_VAR 0 1
52052: PPUSH
52053: CALL_OW 266
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: IN
52068: NOT
52069: IFFALSE 52073
// exit ;
52071: GO 53713
// if name then
52073: LD_VAR 0 3
52077: IFFALSE 52093
// SetBName ( base_dep , name ) ;
52079: LD_VAR 0 1
52083: PPUSH
52084: LD_VAR 0 3
52088: PPUSH
52089: CALL_OW 500
// base := GetBase ( base_dep ) ;
52093: LD_ADDR_VAR 0 15
52097: PUSH
52098: LD_VAR 0 1
52102: PPUSH
52103: CALL_OW 274
52107: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52108: LD_ADDR_VAR 0 16
52112: PUSH
52113: LD_VAR 0 1
52117: PPUSH
52118: CALL_OW 255
52122: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52123: LD_ADDR_VAR 0 17
52127: PUSH
52128: LD_VAR 0 1
52132: PPUSH
52133: CALL_OW 248
52137: ST_TO_ADDR
// if sources then
52138: LD_VAR 0 5
52142: IFFALSE 52189
// for i = 1 to 3 do
52144: LD_ADDR_VAR 0 8
52148: PUSH
52149: DOUBLE
52150: LD_INT 1
52152: DEC
52153: ST_TO_ADDR
52154: LD_INT 3
52156: PUSH
52157: FOR_TO
52158: IFFALSE 52187
// AddResourceType ( base , i , sources [ i ] ) ;
52160: LD_VAR 0 15
52164: PPUSH
52165: LD_VAR 0 8
52169: PPUSH
52170: LD_VAR 0 5
52174: PUSH
52175: LD_VAR 0 8
52179: ARRAY
52180: PPUSH
52181: CALL_OW 276
52185: GO 52157
52187: POP
52188: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52189: LD_ADDR_VAR 0 18
52193: PUSH
52194: LD_VAR 0 15
52198: PPUSH
52199: LD_VAR 0 2
52203: PPUSH
52204: LD_INT 1
52206: PPUSH
52207: CALL 51448 0 3
52211: ST_TO_ADDR
// InitHc ;
52212: CALL_OW 19
// InitUc ;
52216: CALL_OW 18
// uc_side := side ;
52220: LD_ADDR_OWVAR 20
52224: PUSH
52225: LD_VAR 0 16
52229: ST_TO_ADDR
// uc_nation := nation ;
52230: LD_ADDR_OWVAR 21
52234: PUSH
52235: LD_VAR 0 17
52239: ST_TO_ADDR
// if buildings then
52240: LD_VAR 0 18
52244: IFFALSE 53572
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52246: LD_ADDR_VAR 0 19
52250: PUSH
52251: LD_VAR 0 18
52255: PPUSH
52256: LD_INT 2
52258: PUSH
52259: LD_INT 30
52261: PUSH
52262: LD_INT 29
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 30
52271: PUSH
52272: LD_INT 30
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: LIST
52283: PPUSH
52284: CALL_OW 72
52288: ST_TO_ADDR
// if tmp then
52289: LD_VAR 0 19
52293: IFFALSE 52341
// for i in tmp do
52295: LD_ADDR_VAR 0 8
52299: PUSH
52300: LD_VAR 0 19
52304: PUSH
52305: FOR_IN
52306: IFFALSE 52339
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52308: LD_VAR 0 8
52312: PPUSH
52313: CALL_OW 250
52317: PPUSH
52318: LD_VAR 0 8
52322: PPUSH
52323: CALL_OW 251
52327: PPUSH
52328: LD_VAR 0 16
52332: PPUSH
52333: CALL_OW 441
52337: GO 52305
52339: POP
52340: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52341: LD_VAR 0 18
52345: PPUSH
52346: LD_INT 2
52348: PUSH
52349: LD_INT 30
52351: PUSH
52352: LD_INT 32
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 30
52361: PUSH
52362: LD_INT 33
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: LIST
52373: PPUSH
52374: CALL_OW 72
52378: IFFALSE 52466
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52380: LD_ADDR_VAR 0 8
52384: PUSH
52385: LD_VAR 0 18
52389: PPUSH
52390: LD_INT 2
52392: PUSH
52393: LD_INT 30
52395: PUSH
52396: LD_INT 32
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 30
52405: PUSH
52406: LD_INT 33
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: LIST
52417: PPUSH
52418: CALL_OW 72
52422: PUSH
52423: FOR_IN
52424: IFFALSE 52464
// begin if not GetBWeapon ( i ) then
52426: LD_VAR 0 8
52430: PPUSH
52431: CALL_OW 269
52435: NOT
52436: IFFALSE 52462
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52438: LD_VAR 0 8
52442: PPUSH
52443: LD_VAR 0 8
52447: PPUSH
52448: LD_VAR 0 2
52452: PPUSH
52453: CALL 53718 0 2
52457: PPUSH
52458: CALL_OW 431
// end ;
52462: GO 52423
52464: POP
52465: POP
// end ; for i = 1 to personel do
52466: LD_ADDR_VAR 0 8
52470: PUSH
52471: DOUBLE
52472: LD_INT 1
52474: DEC
52475: ST_TO_ADDR
52476: LD_VAR 0 6
52480: PUSH
52481: FOR_TO
52482: IFFALSE 53552
// begin if i > 4 then
52484: LD_VAR 0 8
52488: PUSH
52489: LD_INT 4
52491: GREATER
52492: IFFALSE 52496
// break ;
52494: GO 53552
// case i of 1 :
52496: LD_VAR 0 8
52500: PUSH
52501: LD_INT 1
52503: DOUBLE
52504: EQUAL
52505: IFTRUE 52509
52507: GO 52589
52509: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52510: LD_ADDR_VAR 0 12
52514: PUSH
52515: LD_VAR 0 18
52519: PPUSH
52520: LD_INT 22
52522: PUSH
52523: LD_VAR 0 16
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 58
52534: PUSH
52535: EMPTY
52536: LIST
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: LD_INT 30
52543: PUSH
52544: LD_INT 32
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 30
52553: PUSH
52554: LD_INT 4
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 30
52563: PUSH
52564: LD_INT 5
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: LIST
52581: PPUSH
52582: CALL_OW 72
52586: ST_TO_ADDR
52587: GO 52811
52589: LD_INT 2
52591: DOUBLE
52592: EQUAL
52593: IFTRUE 52597
52595: GO 52659
52597: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52598: LD_ADDR_VAR 0 12
52602: PUSH
52603: LD_VAR 0 18
52607: PPUSH
52608: LD_INT 22
52610: PUSH
52611: LD_VAR 0 16
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: LD_INT 30
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 30
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: LIST
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PPUSH
52652: CALL_OW 72
52656: ST_TO_ADDR
52657: GO 52811
52659: LD_INT 3
52661: DOUBLE
52662: EQUAL
52663: IFTRUE 52667
52665: GO 52729
52667: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52668: LD_ADDR_VAR 0 12
52672: PUSH
52673: LD_VAR 0 18
52677: PPUSH
52678: LD_INT 22
52680: PUSH
52681: LD_VAR 0 16
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: LD_INT 30
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 30
52705: PUSH
52706: LD_INT 3
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PPUSH
52722: CALL_OW 72
52726: ST_TO_ADDR
52727: GO 52811
52729: LD_INT 4
52731: DOUBLE
52732: EQUAL
52733: IFTRUE 52737
52735: GO 52810
52737: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52738: LD_ADDR_VAR 0 12
52742: PUSH
52743: LD_VAR 0 18
52747: PPUSH
52748: LD_INT 22
52750: PUSH
52751: LD_VAR 0 16
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: LD_INT 30
52765: PUSH
52766: LD_INT 6
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 30
52775: PUSH
52776: LD_INT 7
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 30
52785: PUSH
52786: LD_INT 8
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PPUSH
52803: CALL_OW 72
52807: ST_TO_ADDR
52808: GO 52811
52810: POP
// if i = 1 then
52811: LD_VAR 0 8
52815: PUSH
52816: LD_INT 1
52818: EQUAL
52819: IFFALSE 52930
// begin tmp := [ ] ;
52821: LD_ADDR_VAR 0 19
52825: PUSH
52826: EMPTY
52827: ST_TO_ADDR
// for j in f do
52828: LD_ADDR_VAR 0 9
52832: PUSH
52833: LD_VAR 0 12
52837: PUSH
52838: FOR_IN
52839: IFFALSE 52912
// if GetBType ( j ) = b_bunker then
52841: LD_VAR 0 9
52845: PPUSH
52846: CALL_OW 266
52850: PUSH
52851: LD_INT 32
52853: EQUAL
52854: IFFALSE 52881
// tmp := Insert ( tmp , 1 , j ) else
52856: LD_ADDR_VAR 0 19
52860: PUSH
52861: LD_VAR 0 19
52865: PPUSH
52866: LD_INT 1
52868: PPUSH
52869: LD_VAR 0 9
52873: PPUSH
52874: CALL_OW 2
52878: ST_TO_ADDR
52879: GO 52910
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52881: LD_ADDR_VAR 0 19
52885: PUSH
52886: LD_VAR 0 19
52890: PPUSH
52891: LD_VAR 0 19
52895: PUSH
52896: LD_INT 1
52898: PLUS
52899: PPUSH
52900: LD_VAR 0 9
52904: PPUSH
52905: CALL_OW 2
52909: ST_TO_ADDR
52910: GO 52838
52912: POP
52913: POP
// if tmp then
52914: LD_VAR 0 19
52918: IFFALSE 52930
// f := tmp ;
52920: LD_ADDR_VAR 0 12
52924: PUSH
52925: LD_VAR 0 19
52929: ST_TO_ADDR
// end ; x := personel [ i ] ;
52930: LD_ADDR_VAR 0 13
52934: PUSH
52935: LD_VAR 0 6
52939: PUSH
52940: LD_VAR 0 8
52944: ARRAY
52945: ST_TO_ADDR
// if x = - 1 then
52946: LD_VAR 0 13
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: EQUAL
52955: IFFALSE 53166
// begin for j in f do
52957: LD_ADDR_VAR 0 9
52961: PUSH
52962: LD_VAR 0 12
52966: PUSH
52967: FOR_IN
52968: IFFALSE 53162
// repeat InitHc ;
52970: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52974: LD_VAR 0 9
52978: PPUSH
52979: CALL_OW 266
52983: PUSH
52984: LD_INT 5
52986: EQUAL
52987: IFFALSE 53057
// begin if UnitsInside ( j ) < 3 then
52989: LD_VAR 0 9
52993: PPUSH
52994: CALL_OW 313
52998: PUSH
52999: LD_INT 3
53001: LESS
53002: IFFALSE 53038
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53004: LD_INT 0
53006: PPUSH
53007: LD_INT 5
53009: PUSH
53010: LD_INT 8
53012: PUSH
53013: LD_INT 9
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: PUSH
53021: LD_VAR 0 17
53025: ARRAY
53026: PPUSH
53027: LD_VAR 0 4
53031: PPUSH
53032: CALL_OW 380
53036: GO 53055
// PrepareHuman ( false , i , skill ) ;
53038: LD_INT 0
53040: PPUSH
53041: LD_VAR 0 8
53045: PPUSH
53046: LD_VAR 0 4
53050: PPUSH
53051: CALL_OW 380
// end else
53055: GO 53074
// PrepareHuman ( false , i , skill ) ;
53057: LD_INT 0
53059: PPUSH
53060: LD_VAR 0 8
53064: PPUSH
53065: LD_VAR 0 4
53069: PPUSH
53070: CALL_OW 380
// un := CreateHuman ;
53074: LD_ADDR_VAR 0 14
53078: PUSH
53079: CALL_OW 44
53083: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53084: LD_ADDR_VAR 0 7
53088: PUSH
53089: LD_VAR 0 7
53093: PPUSH
53094: LD_INT 1
53096: PPUSH
53097: LD_VAR 0 14
53101: PPUSH
53102: CALL_OW 2
53106: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53107: LD_VAR 0 14
53111: PPUSH
53112: LD_VAR 0 9
53116: PPUSH
53117: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53121: LD_VAR 0 9
53125: PPUSH
53126: CALL_OW 313
53130: PUSH
53131: LD_INT 6
53133: EQUAL
53134: IFTRUE 53158
53136: PUSH
53137: LD_VAR 0 9
53141: PPUSH
53142: CALL_OW 266
53146: PUSH
53147: LD_INT 32
53149: PUSH
53150: LD_INT 31
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: IN
53157: OR
53158: IFFALSE 52970
53160: GO 52967
53162: POP
53163: POP
// end else
53164: GO 53550
// for j = 1 to x do
53166: LD_ADDR_VAR 0 9
53170: PUSH
53171: DOUBLE
53172: LD_INT 1
53174: DEC
53175: ST_TO_ADDR
53176: LD_VAR 0 13
53180: PUSH
53181: FOR_TO
53182: IFFALSE 53548
// begin InitHc ;
53184: CALL_OW 19
// if not f then
53188: LD_VAR 0 12
53192: NOT
53193: IFFALSE 53282
// begin PrepareHuman ( false , i , skill ) ;
53195: LD_INT 0
53197: PPUSH
53198: LD_VAR 0 8
53202: PPUSH
53203: LD_VAR 0 4
53207: PPUSH
53208: CALL_OW 380
// un := CreateHuman ;
53212: LD_ADDR_VAR 0 14
53216: PUSH
53217: CALL_OW 44
53221: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53222: LD_ADDR_VAR 0 7
53226: PUSH
53227: LD_VAR 0 7
53231: PPUSH
53232: LD_INT 1
53234: PPUSH
53235: LD_VAR 0 14
53239: PPUSH
53240: CALL_OW 2
53244: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53245: LD_VAR 0 14
53249: PPUSH
53250: LD_VAR 0 1
53254: PPUSH
53255: CALL_OW 250
53259: PPUSH
53260: LD_VAR 0 1
53264: PPUSH
53265: CALL_OW 251
53269: PPUSH
53270: LD_INT 10
53272: PPUSH
53273: LD_INT 0
53275: PPUSH
53276: CALL_OW 50
// continue ;
53280: GO 53181
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53282: LD_VAR 0 12
53286: PUSH
53287: LD_INT 1
53289: ARRAY
53290: PPUSH
53291: CALL_OW 313
53295: IFFALSE 53323
53297: PUSH
53298: LD_VAR 0 12
53302: PUSH
53303: LD_INT 1
53305: ARRAY
53306: PPUSH
53307: CALL_OW 266
53311: PUSH
53312: LD_INT 32
53314: PUSH
53315: LD_INT 31
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: IN
53322: AND
53323: IFTRUE 53344
53325: PUSH
53326: LD_VAR 0 12
53330: PUSH
53331: LD_INT 1
53333: ARRAY
53334: PPUSH
53335: CALL_OW 313
53339: PUSH
53340: LD_INT 6
53342: EQUAL
53343: OR
53344: IFFALSE 53364
// f := Delete ( f , 1 ) ;
53346: LD_ADDR_VAR 0 12
53350: PUSH
53351: LD_VAR 0 12
53355: PPUSH
53356: LD_INT 1
53358: PPUSH
53359: CALL_OW 3
53363: ST_TO_ADDR
// if not f then
53364: LD_VAR 0 12
53368: NOT
53369: IFFALSE 53387
// begin x := x + 2 ;
53371: LD_ADDR_VAR 0 13
53375: PUSH
53376: LD_VAR 0 13
53380: PUSH
53381: LD_INT 2
53383: PLUS
53384: ST_TO_ADDR
// continue ;
53385: GO 53181
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53387: LD_VAR 0 12
53391: PUSH
53392: LD_INT 1
53394: ARRAY
53395: PPUSH
53396: CALL_OW 266
53400: PUSH
53401: LD_INT 5
53403: EQUAL
53404: IFFALSE 53478
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53406: LD_VAR 0 12
53410: PUSH
53411: LD_INT 1
53413: ARRAY
53414: PPUSH
53415: CALL_OW 313
53419: PUSH
53420: LD_INT 3
53422: LESS
53423: IFFALSE 53459
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53425: LD_INT 0
53427: PPUSH
53428: LD_INT 5
53430: PUSH
53431: LD_INT 8
53433: PUSH
53434: LD_INT 9
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: LIST
53441: PUSH
53442: LD_VAR 0 17
53446: ARRAY
53447: PPUSH
53448: LD_VAR 0 4
53452: PPUSH
53453: CALL_OW 380
53457: GO 53476
// PrepareHuman ( false , i , skill ) ;
53459: LD_INT 0
53461: PPUSH
53462: LD_VAR 0 8
53466: PPUSH
53467: LD_VAR 0 4
53471: PPUSH
53472: CALL_OW 380
// end else
53476: GO 53495
// PrepareHuman ( false , i , skill ) ;
53478: LD_INT 0
53480: PPUSH
53481: LD_VAR 0 8
53485: PPUSH
53486: LD_VAR 0 4
53490: PPUSH
53491: CALL_OW 380
// un := CreateHuman ;
53495: LD_ADDR_VAR 0 14
53499: PUSH
53500: CALL_OW 44
53504: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53505: LD_ADDR_VAR 0 7
53509: PUSH
53510: LD_VAR 0 7
53514: PPUSH
53515: LD_INT 1
53517: PPUSH
53518: LD_VAR 0 14
53522: PPUSH
53523: CALL_OW 2
53527: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53528: LD_VAR 0 14
53532: PPUSH
53533: LD_VAR 0 12
53537: PUSH
53538: LD_INT 1
53540: ARRAY
53541: PPUSH
53542: CALL_OW 52
// end ;
53546: GO 53181
53548: POP
53549: POP
// end ;
53550: GO 52481
53552: POP
53553: POP
// result := result ^ buildings ;
53554: LD_ADDR_VAR 0 7
53558: PUSH
53559: LD_VAR 0 7
53563: PUSH
53564: LD_VAR 0 18
53568: ADD
53569: ST_TO_ADDR
// end else
53570: GO 53713
// begin for i = 1 to personel do
53572: LD_ADDR_VAR 0 8
53576: PUSH
53577: DOUBLE
53578: LD_INT 1
53580: DEC
53581: ST_TO_ADDR
53582: LD_VAR 0 6
53586: PUSH
53587: FOR_TO
53588: IFFALSE 53711
// begin if i > 4 then
53590: LD_VAR 0 8
53594: PUSH
53595: LD_INT 4
53597: GREATER
53598: IFFALSE 53602
// break ;
53600: GO 53711
// x := personel [ i ] ;
53602: LD_ADDR_VAR 0 13
53606: PUSH
53607: LD_VAR 0 6
53611: PUSH
53612: LD_VAR 0 8
53616: ARRAY
53617: ST_TO_ADDR
// if x = - 1 then
53618: LD_VAR 0 13
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: EQUAL
53627: IFFALSE 53631
// continue ;
53629: GO 53587
// PrepareHuman ( false , i , skill ) ;
53631: LD_INT 0
53633: PPUSH
53634: LD_VAR 0 8
53638: PPUSH
53639: LD_VAR 0 4
53643: PPUSH
53644: CALL_OW 380
// un := CreateHuman ;
53648: LD_ADDR_VAR 0 14
53652: PUSH
53653: CALL_OW 44
53657: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53658: LD_VAR 0 14
53662: PPUSH
53663: LD_VAR 0 1
53667: PPUSH
53668: CALL_OW 250
53672: PPUSH
53673: LD_VAR 0 1
53677: PPUSH
53678: CALL_OW 251
53682: PPUSH
53683: LD_INT 10
53685: PPUSH
53686: LD_INT 0
53688: PPUSH
53689: CALL_OW 50
// result := result ^ un ;
53693: LD_ADDR_VAR 0 7
53697: PUSH
53698: LD_VAR 0 7
53702: PUSH
53703: LD_VAR 0 14
53707: ADD
53708: ST_TO_ADDR
// end ;
53709: GO 53587
53711: POP
53712: POP
// end ; end ;
53713: LD_VAR 0 7
53717: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53718: LD_INT 0
53720: PPUSH
53721: PPUSH
53722: PPUSH
53723: PPUSH
53724: PPUSH
53725: PPUSH
53726: PPUSH
53727: PPUSH
53728: PPUSH
53729: PPUSH
53730: PPUSH
53731: PPUSH
53732: PPUSH
53733: PPUSH
53734: PPUSH
53735: PPUSH
// result := false ;
53736: LD_ADDR_VAR 0 3
53740: PUSH
53741: LD_INT 0
53743: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53744: LD_VAR 0 1
53748: NOT
53749: IFTRUE 53774
53751: PUSH
53752: LD_VAR 0 1
53756: PPUSH
53757: CALL_OW 266
53761: PUSH
53762: LD_INT 32
53764: PUSH
53765: LD_INT 33
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: IN
53772: NOT
53773: OR
53774: IFFALSE 53778
// exit ;
53776: GO 54913
// nat := GetNation ( tower ) ;
53778: LD_ADDR_VAR 0 12
53782: PUSH
53783: LD_VAR 0 1
53787: PPUSH
53788: CALL_OW 248
53792: ST_TO_ADDR
// side := GetSide ( tower ) ;
53793: LD_ADDR_VAR 0 16
53797: PUSH
53798: LD_VAR 0 1
53802: PPUSH
53803: CALL_OW 255
53807: ST_TO_ADDR
// x := GetX ( tower ) ;
53808: LD_ADDR_VAR 0 10
53812: PUSH
53813: LD_VAR 0 1
53817: PPUSH
53818: CALL_OW 250
53822: ST_TO_ADDR
// y := GetY ( tower ) ;
53823: LD_ADDR_VAR 0 11
53827: PUSH
53828: LD_VAR 0 1
53832: PPUSH
53833: CALL_OW 251
53837: ST_TO_ADDR
// if not x or not y then
53838: LD_VAR 0 10
53842: NOT
53843: IFTRUE 53852
53845: PUSH
53846: LD_VAR 0 11
53850: NOT
53851: OR
53852: IFFALSE 53856
// exit ;
53854: GO 54913
// weapon := 0 ;
53856: LD_ADDR_VAR 0 18
53860: PUSH
53861: LD_INT 0
53863: ST_TO_ADDR
// fac_list := [ ] ;
53864: LD_ADDR_VAR 0 17
53868: PUSH
53869: EMPTY
53870: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53871: LD_ADDR_VAR 0 6
53875: PUSH
53876: LD_VAR 0 1
53880: PPUSH
53881: CALL_OW 274
53885: PPUSH
53886: LD_VAR 0 2
53890: PPUSH
53891: LD_INT 0
53893: PPUSH
53894: CALL 51448 0 3
53898: PPUSH
53899: LD_INT 30
53901: PUSH
53902: LD_INT 3
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PPUSH
53909: CALL_OW 72
53913: ST_TO_ADDR
// if not factories then
53914: LD_VAR 0 6
53918: NOT
53919: IFFALSE 53923
// exit ;
53921: GO 54913
// for i in factories do
53923: LD_ADDR_VAR 0 8
53927: PUSH
53928: LD_VAR 0 6
53932: PUSH
53933: FOR_IN
53934: IFFALSE 53959
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53936: LD_ADDR_VAR 0 17
53940: PUSH
53941: LD_VAR 0 17
53945: PUSH
53946: LD_VAR 0 8
53950: PPUSH
53951: CALL_OW 478
53955: UNION
53956: ST_TO_ADDR
53957: GO 53933
53959: POP
53960: POP
// if not fac_list then
53961: LD_VAR 0 17
53965: NOT
53966: IFFALSE 53970
// exit ;
53968: GO 54913
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53970: LD_ADDR_VAR 0 5
53974: PUSH
53975: LD_INT 4
53977: PUSH
53978: LD_INT 5
53980: PUSH
53981: LD_INT 9
53983: PUSH
53984: LD_INT 10
53986: PUSH
53987: LD_INT 6
53989: PUSH
53990: LD_INT 7
53992: PUSH
53993: LD_INT 11
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 27
54007: PUSH
54008: LD_INT 28
54010: PUSH
54011: LD_INT 26
54013: PUSH
54014: LD_INT 30
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 43
54025: PUSH
54026: LD_INT 44
54028: PUSH
54029: LD_INT 46
54031: PUSH
54032: LD_INT 45
54034: PUSH
54035: LD_INT 47
54037: PUSH
54038: LD_INT 49
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: LIST
54053: PUSH
54054: LD_VAR 0 12
54058: ARRAY
54059: ST_TO_ADDR
// list := list isect fac_list ;
54060: LD_ADDR_VAR 0 5
54064: PUSH
54065: LD_VAR 0 5
54069: PUSH
54070: LD_VAR 0 17
54074: ISECT
54075: ST_TO_ADDR
// if not list then
54076: LD_VAR 0 5
54080: NOT
54081: IFFALSE 54085
// exit ;
54083: GO 54913
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54085: LD_VAR 0 12
54089: PUSH
54090: LD_INT 3
54092: EQUAL
54093: IFFALSE 54105
54095: PUSH
54096: LD_INT 49
54098: PUSH
54099: LD_VAR 0 5
54103: IN
54104: AND
54105: IFFALSE 54125
54107: PUSH
54108: LD_INT 31
54110: PPUSH
54111: LD_VAR 0 16
54115: PPUSH
54116: CALL_OW 321
54120: PUSH
54121: LD_INT 2
54123: EQUAL
54124: AND
54125: IFFALSE 54185
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54127: LD_INT 22
54129: PUSH
54130: LD_VAR 0 16
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 35
54141: PUSH
54142: LD_INT 49
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 91
54151: PUSH
54152: LD_VAR 0 1
54156: PUSH
54157: LD_INT 10
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: LIST
54169: PPUSH
54170: CALL_OW 69
54174: NOT
54175: IFFALSE 54185
// weapon := ru_time_lapser ;
54177: LD_ADDR_VAR 0 18
54181: PUSH
54182: LD_INT 49
54184: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54185: LD_VAR 0 12
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: IN
54200: IFFALSE 54224
54202: PUSH
54203: LD_INT 11
54205: PUSH
54206: LD_VAR 0 5
54210: IN
54211: IFTRUE 54223
54213: PUSH
54214: LD_INT 30
54216: PUSH
54217: LD_VAR 0 5
54221: IN
54222: OR
54223: AND
54224: IFFALSE 54244
54226: PUSH
54227: LD_INT 6
54229: PPUSH
54230: LD_VAR 0 16
54234: PPUSH
54235: CALL_OW 321
54239: PUSH
54240: LD_INT 2
54242: EQUAL
54243: AND
54244: IFFALSE 54411
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54246: LD_INT 22
54248: PUSH
54249: LD_VAR 0 16
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: LD_INT 35
54263: PUSH
54264: LD_INT 11
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 35
54273: PUSH
54274: LD_INT 30
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 91
54288: PUSH
54289: LD_VAR 0 1
54293: PUSH
54294: LD_INT 18
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: LIST
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: LIST
54306: PPUSH
54307: CALL_OW 69
54311: NOT
54312: IFFALSE 54388
54314: PUSH
54315: LD_INT 22
54317: PUSH
54318: LD_VAR 0 16
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 30
54332: PUSH
54333: LD_INT 32
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 30
54342: PUSH
54343: LD_INT 33
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 91
54357: PUSH
54358: LD_VAR 0 1
54362: PUSH
54363: LD_INT 12
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: LIST
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: LIST
54375: PUSH
54376: EMPTY
54377: LIST
54378: PPUSH
54379: CALL_OW 69
54383: PUSH
54384: LD_INT 2
54386: GREATER
54387: AND
54388: IFFALSE 54411
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54390: LD_ADDR_VAR 0 18
54394: PUSH
54395: LD_INT 11
54397: PUSH
54398: LD_INT 30
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_VAR 0 12
54409: ARRAY
54410: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54411: LD_VAR 0 18
54415: NOT
54416: IFFALSE 54436
54418: PUSH
54419: LD_INT 40
54421: PPUSH
54422: LD_VAR 0 16
54426: PPUSH
54427: CALL_OW 321
54431: PUSH
54432: LD_INT 2
54434: EQUAL
54435: AND
54436: IFFALSE 54472
54438: PUSH
54439: LD_INT 7
54441: PUSH
54442: LD_VAR 0 5
54446: IN
54447: IFTRUE 54459
54449: PUSH
54450: LD_INT 28
54452: PUSH
54453: LD_VAR 0 5
54457: IN
54458: OR
54459: IFTRUE 54471
54461: PUSH
54462: LD_INT 45
54464: PUSH
54465: LD_VAR 0 5
54469: IN
54470: OR
54471: AND
54472: IFFALSE 54726
// begin hex := GetHexInfo ( x , y ) ;
54474: LD_ADDR_VAR 0 4
54478: PUSH
54479: LD_VAR 0 10
54483: PPUSH
54484: LD_VAR 0 11
54488: PPUSH
54489: CALL_OW 546
54493: ST_TO_ADDR
// if hex [ 1 ] then
54494: LD_VAR 0 4
54498: PUSH
54499: LD_INT 1
54501: ARRAY
54502: IFFALSE 54506
// exit ;
54504: GO 54913
// height := hex [ 2 ] ;
54506: LD_ADDR_VAR 0 15
54510: PUSH
54511: LD_VAR 0 4
54515: PUSH
54516: LD_INT 2
54518: ARRAY
54519: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54520: LD_ADDR_VAR 0 14
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: LD_INT 5
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: ST_TO_ADDR
// for i in tmp do
54543: LD_ADDR_VAR 0 8
54547: PUSH
54548: LD_VAR 0 14
54552: PUSH
54553: FOR_IN
54554: IFFALSE 54724
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54556: LD_ADDR_VAR 0 9
54560: PUSH
54561: LD_VAR 0 10
54565: PPUSH
54566: LD_VAR 0 8
54570: PPUSH
54571: LD_INT 5
54573: PPUSH
54574: CALL_OW 272
54578: PUSH
54579: LD_VAR 0 11
54583: PPUSH
54584: LD_VAR 0 8
54588: PPUSH
54589: LD_INT 5
54591: PPUSH
54592: CALL_OW 273
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54601: LD_VAR 0 9
54605: PUSH
54606: LD_INT 1
54608: ARRAY
54609: PPUSH
54610: LD_VAR 0 9
54614: PUSH
54615: LD_INT 2
54617: ARRAY
54618: PPUSH
54619: CALL_OW 488
54623: IFFALSE 54722
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54625: LD_ADDR_VAR 0 4
54629: PUSH
54630: LD_VAR 0 9
54634: PUSH
54635: LD_INT 1
54637: ARRAY
54638: PPUSH
54639: LD_VAR 0 9
54643: PUSH
54644: LD_INT 2
54646: ARRAY
54647: PPUSH
54648: CALL_OW 546
54652: ST_TO_ADDR
// if hex [ 1 ] then
54653: LD_VAR 0 4
54657: PUSH
54658: LD_INT 1
54660: ARRAY
54661: IFFALSE 54665
// continue ;
54663: GO 54553
// h := hex [ 2 ] ;
54665: LD_ADDR_VAR 0 13
54669: PUSH
54670: LD_VAR 0 4
54674: PUSH
54675: LD_INT 2
54677: ARRAY
54678: ST_TO_ADDR
// if h + 7 < height then
54679: LD_VAR 0 13
54683: PUSH
54684: LD_INT 7
54686: PLUS
54687: PUSH
54688: LD_VAR 0 15
54692: LESS
54693: IFFALSE 54722
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54695: LD_ADDR_VAR 0 18
54699: PUSH
54700: LD_INT 7
54702: PUSH
54703: LD_INT 28
54705: PUSH
54706: LD_INT 45
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: LIST
54713: PUSH
54714: LD_VAR 0 12
54718: ARRAY
54719: ST_TO_ADDR
// break ;
54720: GO 54724
// end ; end ; end ;
54722: GO 54553
54724: POP
54725: POP
// end ; if not weapon then
54726: LD_VAR 0 18
54730: NOT
54731: IFFALSE 54791
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54733: LD_ADDR_VAR 0 5
54737: PUSH
54738: LD_VAR 0 5
54742: PUSH
54743: LD_INT 11
54745: PUSH
54746: LD_INT 30
54748: PUSH
54749: LD_INT 49
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: LIST
54756: DIFF
54757: ST_TO_ADDR
// if not list then
54758: LD_VAR 0 5
54762: NOT
54763: IFFALSE 54767
// exit ;
54765: GO 54913
// weapon := list [ rand ( 1 , list ) ] ;
54767: LD_ADDR_VAR 0 18
54771: PUSH
54772: LD_VAR 0 5
54776: PUSH
54777: LD_INT 1
54779: PPUSH
54780: LD_VAR 0 5
54784: PPUSH
54785: CALL_OW 12
54789: ARRAY
54790: ST_TO_ADDR
// end ; if weapon then
54791: LD_VAR 0 18
54795: IFFALSE 54913
// begin tmp := CostOfWeapon ( weapon ) ;
54797: LD_ADDR_VAR 0 14
54801: PUSH
54802: LD_VAR 0 18
54806: PPUSH
54807: CALL_OW 451
54811: ST_TO_ADDR
// j := GetBase ( tower ) ;
54812: LD_ADDR_VAR 0 9
54816: PUSH
54817: LD_VAR 0 1
54821: PPUSH
54822: CALL_OW 274
54826: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54827: LD_VAR 0 9
54831: PPUSH
54832: LD_INT 1
54834: PPUSH
54835: CALL_OW 275
54839: PUSH
54840: LD_VAR 0 14
54844: PUSH
54845: LD_INT 1
54847: ARRAY
54848: GREATEREQUAL
54849: IFFALSE 54875
54851: PUSH
54852: LD_VAR 0 9
54856: PPUSH
54857: LD_INT 2
54859: PPUSH
54860: CALL_OW 275
54864: PUSH
54865: LD_VAR 0 14
54869: PUSH
54870: LD_INT 2
54872: ARRAY
54873: GREATEREQUAL
54874: AND
54875: IFFALSE 54901
54877: PUSH
54878: LD_VAR 0 9
54882: PPUSH
54883: LD_INT 3
54885: PPUSH
54886: CALL_OW 275
54890: PUSH
54891: LD_VAR 0 14
54895: PUSH
54896: LD_INT 3
54898: ARRAY
54899: GREATEREQUAL
54900: AND
54901: IFFALSE 54913
// result := weapon ;
54903: LD_ADDR_VAR 0 3
54907: PUSH
54908: LD_VAR 0 18
54912: ST_TO_ADDR
// end ; end ;
54913: LD_VAR 0 3
54917: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54918: LD_INT 0
54920: PPUSH
54921: PPUSH
// result := true ;
54922: LD_ADDR_VAR 0 3
54926: PUSH
54927: LD_INT 1
54929: ST_TO_ADDR
// if array1 = array2 then
54930: LD_VAR 0 1
54934: PUSH
54935: LD_VAR 0 2
54939: EQUAL
54940: IFFALSE 55000
// begin for i = 1 to array1 do
54942: LD_ADDR_VAR 0 4
54946: PUSH
54947: DOUBLE
54948: LD_INT 1
54950: DEC
54951: ST_TO_ADDR
54952: LD_VAR 0 1
54956: PUSH
54957: FOR_TO
54958: IFFALSE 54996
// if array1 [ i ] <> array2 [ i ] then
54960: LD_VAR 0 1
54964: PUSH
54965: LD_VAR 0 4
54969: ARRAY
54970: PUSH
54971: LD_VAR 0 2
54975: PUSH
54976: LD_VAR 0 4
54980: ARRAY
54981: NONEQUAL
54982: IFFALSE 54994
// begin result := false ;
54984: LD_ADDR_VAR 0 3
54988: PUSH
54989: LD_INT 0
54991: ST_TO_ADDR
// break ;
54992: GO 54996
// end ;
54994: GO 54957
54996: POP
54997: POP
// end else
54998: GO 55008
// result := false ;
55000: LD_ADDR_VAR 0 3
55004: PUSH
55005: LD_INT 0
55007: ST_TO_ADDR
// end ;
55008: LD_VAR 0 3
55012: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
55013: LD_INT 0
55015: PPUSH
55016: PPUSH
// if not array1 or not array2 then
55017: LD_VAR 0 1
55021: NOT
55022: IFTRUE 55031
55024: PUSH
55025: LD_VAR 0 2
55029: NOT
55030: OR
55031: IFFALSE 55035
// exit ;
55033: GO 55099
// result := true ;
55035: LD_ADDR_VAR 0 3
55039: PUSH
55040: LD_INT 1
55042: ST_TO_ADDR
// for i = 1 to array1 do
55043: LD_ADDR_VAR 0 4
55047: PUSH
55048: DOUBLE
55049: LD_INT 1
55051: DEC
55052: ST_TO_ADDR
55053: LD_VAR 0 1
55057: PUSH
55058: FOR_TO
55059: IFFALSE 55097
// if array1 [ i ] <> array2 [ i ] then
55061: LD_VAR 0 1
55065: PUSH
55066: LD_VAR 0 4
55070: ARRAY
55071: PUSH
55072: LD_VAR 0 2
55076: PUSH
55077: LD_VAR 0 4
55081: ARRAY
55082: NONEQUAL
55083: IFFALSE 55095
// begin result := false ;
55085: LD_ADDR_VAR 0 3
55089: PUSH
55090: LD_INT 0
55092: ST_TO_ADDR
// break ;
55093: GO 55097
// end ;
55095: GO 55058
55097: POP
55098: POP
// end ;
55099: LD_VAR 0 3
55103: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55104: LD_INT 0
55106: PPUSH
55107: PPUSH
55108: PPUSH
// pom := GetBase ( fac ) ;
55109: LD_ADDR_VAR 0 5
55113: PUSH
55114: LD_VAR 0 1
55118: PPUSH
55119: CALL_OW 274
55123: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55124: LD_ADDR_VAR 0 4
55128: PUSH
55129: LD_VAR 0 2
55133: PUSH
55134: LD_INT 1
55136: ARRAY
55137: PPUSH
55138: LD_VAR 0 2
55142: PUSH
55143: LD_INT 2
55145: ARRAY
55146: PPUSH
55147: LD_VAR 0 2
55151: PUSH
55152: LD_INT 3
55154: ARRAY
55155: PPUSH
55156: LD_VAR 0 2
55160: PUSH
55161: LD_INT 4
55163: ARRAY
55164: PPUSH
55165: CALL_OW 449
55169: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55170: LD_ADDR_VAR 0 3
55174: PUSH
55175: LD_VAR 0 5
55179: PPUSH
55180: LD_INT 1
55182: PPUSH
55183: CALL_OW 275
55187: PUSH
55188: LD_VAR 0 4
55192: PUSH
55193: LD_INT 1
55195: ARRAY
55196: GREATEREQUAL
55197: IFFALSE 55223
55199: PUSH
55200: LD_VAR 0 5
55204: PPUSH
55205: LD_INT 2
55207: PPUSH
55208: CALL_OW 275
55212: PUSH
55213: LD_VAR 0 4
55217: PUSH
55218: LD_INT 2
55220: ARRAY
55221: GREATEREQUAL
55222: AND
55223: IFFALSE 55249
55225: PUSH
55226: LD_VAR 0 5
55230: PPUSH
55231: LD_INT 3
55233: PPUSH
55234: CALL_OW 275
55238: PUSH
55239: LD_VAR 0 4
55243: PUSH
55244: LD_INT 3
55246: ARRAY
55247: GREATEREQUAL
55248: AND
55249: ST_TO_ADDR
// end ;
55250: LD_VAR 0 3
55254: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55255: LD_INT 0
55257: PPUSH
55258: PPUSH
55259: PPUSH
55260: PPUSH
// pom := GetBase ( building ) ;
55261: LD_ADDR_VAR 0 3
55265: PUSH
55266: LD_VAR 0 1
55270: PPUSH
55271: CALL_OW 274
55275: ST_TO_ADDR
// if not pom then
55276: LD_VAR 0 3
55280: NOT
55281: IFFALSE 55285
// exit ;
55283: GO 55459
// btype := GetBType ( building ) ;
55285: LD_ADDR_VAR 0 5
55289: PUSH
55290: LD_VAR 0 1
55294: PPUSH
55295: CALL_OW 266
55299: ST_TO_ADDR
// if btype = b_armoury then
55300: LD_VAR 0 5
55304: PUSH
55305: LD_INT 4
55307: EQUAL
55308: IFFALSE 55318
// btype := b_barracks ;
55310: LD_ADDR_VAR 0 5
55314: PUSH
55315: LD_INT 5
55317: ST_TO_ADDR
// if btype = b_depot then
55318: LD_VAR 0 5
55322: PUSH
55323: LD_INT 0
55325: EQUAL
55326: IFFALSE 55336
// btype := b_warehouse ;
55328: LD_ADDR_VAR 0 5
55332: PUSH
55333: LD_INT 1
55335: ST_TO_ADDR
// if btype = b_workshop then
55336: LD_VAR 0 5
55340: PUSH
55341: LD_INT 2
55343: EQUAL
55344: IFFALSE 55354
// btype := b_factory ;
55346: LD_ADDR_VAR 0 5
55350: PUSH
55351: LD_INT 3
55353: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55354: LD_ADDR_VAR 0 4
55358: PUSH
55359: LD_VAR 0 5
55363: PPUSH
55364: LD_VAR 0 1
55368: PPUSH
55369: CALL_OW 248
55373: PPUSH
55374: CALL_OW 450
55378: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55379: LD_ADDR_VAR 0 2
55383: PUSH
55384: LD_VAR 0 3
55388: PPUSH
55389: LD_INT 1
55391: PPUSH
55392: CALL_OW 275
55396: PUSH
55397: LD_VAR 0 4
55401: PUSH
55402: LD_INT 1
55404: ARRAY
55405: GREATEREQUAL
55406: IFFALSE 55432
55408: PUSH
55409: LD_VAR 0 3
55413: PPUSH
55414: LD_INT 2
55416: PPUSH
55417: CALL_OW 275
55421: PUSH
55422: LD_VAR 0 4
55426: PUSH
55427: LD_INT 2
55429: ARRAY
55430: GREATEREQUAL
55431: AND
55432: IFFALSE 55458
55434: PUSH
55435: LD_VAR 0 3
55439: PPUSH
55440: LD_INT 3
55442: PPUSH
55443: CALL_OW 275
55447: PUSH
55448: LD_VAR 0 4
55452: PUSH
55453: LD_INT 3
55455: ARRAY
55456: GREATEREQUAL
55457: AND
55458: ST_TO_ADDR
// end ;
55459: LD_VAR 0 2
55463: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55464: LD_INT 0
55466: PPUSH
55467: PPUSH
55468: PPUSH
// pom := GetBase ( building ) ;
55469: LD_ADDR_VAR 0 4
55473: PUSH
55474: LD_VAR 0 1
55478: PPUSH
55479: CALL_OW 274
55483: ST_TO_ADDR
// if not pom then
55484: LD_VAR 0 4
55488: NOT
55489: IFFALSE 55493
// exit ;
55491: GO 55598
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55493: LD_ADDR_VAR 0 5
55497: PUSH
55498: LD_VAR 0 2
55502: PPUSH
55503: LD_VAR 0 1
55507: PPUSH
55508: CALL_OW 248
55512: PPUSH
55513: CALL_OW 450
55517: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55518: LD_ADDR_VAR 0 3
55522: PUSH
55523: LD_VAR 0 4
55527: PPUSH
55528: LD_INT 1
55530: PPUSH
55531: CALL_OW 275
55535: PUSH
55536: LD_VAR 0 5
55540: PUSH
55541: LD_INT 1
55543: ARRAY
55544: GREATEREQUAL
55545: IFFALSE 55571
55547: PUSH
55548: LD_VAR 0 4
55552: PPUSH
55553: LD_INT 2
55555: PPUSH
55556: CALL_OW 275
55560: PUSH
55561: LD_VAR 0 5
55565: PUSH
55566: LD_INT 2
55568: ARRAY
55569: GREATEREQUAL
55570: AND
55571: IFFALSE 55597
55573: PUSH
55574: LD_VAR 0 4
55578: PPUSH
55579: LD_INT 3
55581: PPUSH
55582: CALL_OW 275
55586: PUSH
55587: LD_VAR 0 5
55591: PUSH
55592: LD_INT 3
55594: ARRAY
55595: GREATEREQUAL
55596: AND
55597: ST_TO_ADDR
// end ;
55598: LD_VAR 0 3
55602: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
55603: LD_INT 0
55605: PPUSH
55606: PPUSH
55607: PPUSH
55608: PPUSH
55609: PPUSH
55610: PPUSH
55611: PPUSH
55612: PPUSH
55613: PPUSH
55614: PPUSH
55615: PPUSH
// result := false ;
55616: LD_ADDR_VAR 0 8
55620: PUSH
55621: LD_INT 0
55623: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
55624: LD_VAR 0 5
55628: NOT
55629: IFTRUE 55638
55631: PUSH
55632: LD_VAR 0 1
55636: NOT
55637: OR
55638: IFTRUE 55647
55640: PUSH
55641: LD_VAR 0 2
55645: NOT
55646: OR
55647: IFTRUE 55656
55649: PUSH
55650: LD_VAR 0 3
55654: NOT
55655: OR
55656: IFFALSE 55660
// exit ;
55658: GO 56486
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
55660: LD_ADDR_VAR 0 14
55664: PUSH
55665: LD_VAR 0 1
55669: PPUSH
55670: LD_VAR 0 2
55674: PPUSH
55675: LD_VAR 0 3
55679: PPUSH
55680: LD_VAR 0 4
55684: PPUSH
55685: LD_VAR 0 5
55689: PUSH
55690: LD_INT 1
55692: ARRAY
55693: PPUSH
55694: CALL_OW 248
55698: PPUSH
55699: LD_INT 0
55701: PPUSH
55702: CALL 57767 0 6
55706: ST_TO_ADDR
// if not hexes then
55707: LD_VAR 0 14
55711: NOT
55712: IFFALSE 55716
// exit ;
55714: GO 56486
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55716: LD_ADDR_VAR 0 17
55720: PUSH
55721: LD_VAR 0 5
55725: PPUSH
55726: LD_INT 22
55728: PUSH
55729: LD_VAR 0 13
55733: PPUSH
55734: CALL_OW 255
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: LD_INT 30
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 30
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: LIST
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PPUSH
55775: CALL_OW 72
55779: ST_TO_ADDR
// for i = 1 to hexes do
55780: LD_ADDR_VAR 0 9
55784: PUSH
55785: DOUBLE
55786: LD_INT 1
55788: DEC
55789: ST_TO_ADDR
55790: LD_VAR 0 14
55794: PUSH
55795: FOR_TO
55796: IFFALSE 56484
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55798: LD_ADDR_VAR 0 13
55802: PUSH
55803: LD_VAR 0 14
55807: PUSH
55808: LD_VAR 0 9
55812: ARRAY
55813: PUSH
55814: LD_INT 1
55816: ARRAY
55817: PPUSH
55818: LD_VAR 0 14
55822: PUSH
55823: LD_VAR 0 9
55827: ARRAY
55828: PUSH
55829: LD_INT 2
55831: ARRAY
55832: PPUSH
55833: CALL_OW 428
55837: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55838: LD_VAR 0 14
55842: PUSH
55843: LD_VAR 0 9
55847: ARRAY
55848: PUSH
55849: LD_INT 1
55851: ARRAY
55852: PPUSH
55853: LD_VAR 0 14
55857: PUSH
55858: LD_VAR 0 9
55862: ARRAY
55863: PUSH
55864: LD_INT 2
55866: ARRAY
55867: PPUSH
55868: CALL_OW 351
55872: IFTRUE 55911
55874: PUSH
55875: LD_VAR 0 14
55879: PUSH
55880: LD_VAR 0 9
55884: ARRAY
55885: PUSH
55886: LD_INT 1
55888: ARRAY
55889: PPUSH
55890: LD_VAR 0 14
55894: PUSH
55895: LD_VAR 0 9
55899: ARRAY
55900: PUSH
55901: LD_INT 2
55903: ARRAY
55904: PPUSH
55905: CALL_OW 488
55909: NOT
55910: OR
55911: IFTRUE 55928
55913: PUSH
55914: LD_VAR 0 13
55918: PPUSH
55919: CALL_OW 247
55923: PUSH
55924: LD_INT 3
55926: EQUAL
55927: OR
55928: IFFALSE 55934
// exit ;
55930: POP
55931: POP
55932: GO 56486
// if not tmp then
55934: LD_VAR 0 13
55938: NOT
55939: IFFALSE 55943
// continue ;
55941: GO 55795
// result := true ;
55943: LD_ADDR_VAR 0 8
55947: PUSH
55948: LD_INT 1
55950: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55951: LD_VAR 0 6
55955: IFFALSE 55972
55957: PUSH
55958: LD_VAR 0 13
55962: PPUSH
55963: CALL_OW 247
55967: PUSH
55968: LD_INT 2
55970: EQUAL
55971: AND
55972: IFFALSE 55989
55974: PUSH
55975: LD_VAR 0 13
55979: PPUSH
55980: CALL_OW 263
55984: PUSH
55985: LD_INT 1
55987: EQUAL
55988: AND
55989: IFFALSE 56153
// begin if IsDrivenBy ( tmp ) then
55991: LD_VAR 0 13
55995: PPUSH
55996: CALL_OW 311
56000: IFFALSE 56004
// continue ;
56002: GO 55795
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
56004: LD_VAR 0 6
56008: PPUSH
56009: LD_INT 3
56011: PUSH
56012: LD_INT 60
56014: PUSH
56015: EMPTY
56016: LIST
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 3
56024: PUSH
56025: LD_INT 55
56027: PUSH
56028: EMPTY
56029: LIST
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PPUSH
56039: CALL_OW 72
56043: IFFALSE 56151
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
56045: LD_ADDR_VAR 0 18
56049: PUSH
56050: LD_VAR 0 6
56054: PPUSH
56055: LD_INT 3
56057: PUSH
56058: LD_INT 60
56060: PUSH
56061: EMPTY
56062: LIST
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 3
56070: PUSH
56071: LD_INT 55
56073: PUSH
56074: EMPTY
56075: LIST
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PPUSH
56085: CALL_OW 72
56089: PUSH
56090: LD_INT 1
56092: ARRAY
56093: ST_TO_ADDR
// if IsInUnit ( driver ) then
56094: LD_VAR 0 18
56098: PPUSH
56099: CALL_OW 310
56103: IFFALSE 56114
// ComExit ( driver ) ;
56105: LD_VAR 0 18
56109: PPUSH
56110: CALL 81767 0 1
// AddComEnterUnit ( driver , tmp ) ;
56114: LD_VAR 0 18
56118: PPUSH
56119: LD_VAR 0 13
56123: PPUSH
56124: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56128: LD_VAR 0 18
56132: PPUSH
56133: LD_VAR 0 7
56137: PPUSH
56138: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56142: LD_VAR 0 18
56146: PPUSH
56147: CALL_OW 181
// end ; continue ;
56151: GO 55795
// end ; if not cleaners or not tmp in cleaners then
56153: LD_VAR 0 6
56157: NOT
56158: IFTRUE 56173
56160: PUSH
56161: LD_VAR 0 13
56165: PUSH
56166: LD_VAR 0 6
56170: IN
56171: NOT
56172: OR
56173: IFFALSE 56482
// begin if dep then
56175: LD_VAR 0 17
56179: IFFALSE 56315
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56181: LD_ADDR_VAR 0 16
56185: PUSH
56186: LD_VAR 0 17
56190: PUSH
56191: LD_INT 1
56193: ARRAY
56194: PPUSH
56195: CALL_OW 250
56199: PPUSH
56200: LD_VAR 0 17
56204: PUSH
56205: LD_INT 1
56207: ARRAY
56208: PPUSH
56209: CALL_OW 254
56213: PPUSH
56214: LD_INT 5
56216: PPUSH
56217: CALL_OW 272
56221: PUSH
56222: LD_VAR 0 17
56226: PUSH
56227: LD_INT 1
56229: ARRAY
56230: PPUSH
56231: CALL_OW 251
56235: PPUSH
56236: LD_VAR 0 17
56240: PUSH
56241: LD_INT 1
56243: ARRAY
56244: PPUSH
56245: CALL_OW 254
56249: PPUSH
56250: LD_INT 5
56252: PPUSH
56253: CALL_OW 273
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56262: LD_VAR 0 16
56266: PUSH
56267: LD_INT 1
56269: ARRAY
56270: PPUSH
56271: LD_VAR 0 16
56275: PUSH
56276: LD_INT 2
56278: ARRAY
56279: PPUSH
56280: CALL_OW 488
56284: IFFALSE 56315
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56286: LD_VAR 0 13
56290: PPUSH
56291: LD_VAR 0 16
56295: PUSH
56296: LD_INT 1
56298: ARRAY
56299: PPUSH
56300: LD_VAR 0 16
56304: PUSH
56305: LD_INT 2
56307: ARRAY
56308: PPUSH
56309: CALL_OW 111
// continue ;
56313: GO 55795
// end ; end ; r := GetDir ( tmp ) ;
56315: LD_ADDR_VAR 0 15
56319: PUSH
56320: LD_VAR 0 13
56324: PPUSH
56325: CALL_OW 254
56329: ST_TO_ADDR
// if r = 5 then
56330: LD_VAR 0 15
56334: PUSH
56335: LD_INT 5
56337: EQUAL
56338: IFFALSE 56348
// r := 0 ;
56340: LD_ADDR_VAR 0 15
56344: PUSH
56345: LD_INT 0
56347: ST_TO_ADDR
// for j = r to 5 do
56348: LD_ADDR_VAR 0 10
56352: PUSH
56353: DOUBLE
56354: LD_VAR 0 15
56358: DEC
56359: ST_TO_ADDR
56360: LD_INT 5
56362: PUSH
56363: FOR_TO
56364: IFFALSE 56480
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56366: LD_ADDR_VAR 0 11
56370: PUSH
56371: LD_VAR 0 13
56375: PPUSH
56376: CALL_OW 250
56380: PPUSH
56381: LD_VAR 0 10
56385: PPUSH
56386: LD_INT 2
56388: PPUSH
56389: CALL_OW 272
56393: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56394: LD_ADDR_VAR 0 12
56398: PUSH
56399: LD_VAR 0 13
56403: PPUSH
56404: CALL_OW 251
56408: PPUSH
56409: LD_VAR 0 10
56413: PPUSH
56414: LD_INT 2
56416: PPUSH
56417: CALL_OW 273
56421: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56422: LD_VAR 0 11
56426: PPUSH
56427: LD_VAR 0 12
56431: PPUSH
56432: CALL_OW 488
56436: IFFALSE 56455
56438: PUSH
56439: LD_VAR 0 11
56443: PPUSH
56444: LD_VAR 0 12
56448: PPUSH
56449: CALL_OW 428
56453: NOT
56454: AND
56455: IFFALSE 56478
// begin ComMoveXY ( tmp , _x , _y ) ;
56457: LD_VAR 0 13
56461: PPUSH
56462: LD_VAR 0 11
56466: PPUSH
56467: LD_VAR 0 12
56471: PPUSH
56472: CALL_OW 111
// break ;
56476: GO 56480
// end ; end ;
56478: GO 56363
56480: POP
56481: POP
// end ; end ;
56482: GO 55795
56484: POP
56485: POP
// end ;
56486: LD_VAR 0 8
56490: RET
// export function BuildingTechInvented ( side , btype ) ; begin
56491: LD_INT 0
56493: PPUSH
// result := true ;
56494: LD_ADDR_VAR 0 3
56498: PUSH
56499: LD_INT 1
56501: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
56502: LD_VAR 0 2
56506: PUSH
56507: LD_INT 24
56509: DOUBLE
56510: EQUAL
56511: IFTRUE 56521
56513: LD_INT 33
56515: DOUBLE
56516: EQUAL
56517: IFTRUE 56521
56519: GO 56546
56521: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
56522: LD_ADDR_VAR 0 3
56526: PUSH
56527: LD_INT 32
56529: PPUSH
56530: LD_VAR 0 1
56534: PPUSH
56535: CALL_OW 321
56539: PUSH
56540: LD_INT 2
56542: EQUAL
56543: ST_TO_ADDR
56544: GO 56862
56546: LD_INT 20
56548: DOUBLE
56549: EQUAL
56550: IFTRUE 56554
56552: GO 56579
56554: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
56555: LD_ADDR_VAR 0 3
56559: PUSH
56560: LD_INT 6
56562: PPUSH
56563: LD_VAR 0 1
56567: PPUSH
56568: CALL_OW 321
56572: PUSH
56573: LD_INT 2
56575: EQUAL
56576: ST_TO_ADDR
56577: GO 56862
56579: LD_INT 22
56581: DOUBLE
56582: EQUAL
56583: IFTRUE 56593
56585: LD_INT 36
56587: DOUBLE
56588: EQUAL
56589: IFTRUE 56593
56591: GO 56618
56593: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
56594: LD_ADDR_VAR 0 3
56598: PUSH
56599: LD_INT 15
56601: PPUSH
56602: LD_VAR 0 1
56606: PPUSH
56607: CALL_OW 321
56611: PUSH
56612: LD_INT 2
56614: EQUAL
56615: ST_TO_ADDR
56616: GO 56862
56618: LD_INT 30
56620: DOUBLE
56621: EQUAL
56622: IFTRUE 56626
56624: GO 56651
56626: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
56627: LD_ADDR_VAR 0 3
56631: PUSH
56632: LD_INT 20
56634: PPUSH
56635: LD_VAR 0 1
56639: PPUSH
56640: CALL_OW 321
56644: PUSH
56645: LD_INT 2
56647: EQUAL
56648: ST_TO_ADDR
56649: GO 56862
56651: LD_INT 28
56653: DOUBLE
56654: EQUAL
56655: IFTRUE 56665
56657: LD_INT 21
56659: DOUBLE
56660: EQUAL
56661: IFTRUE 56665
56663: GO 56690
56665: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
56666: LD_ADDR_VAR 0 3
56670: PUSH
56671: LD_INT 21
56673: PPUSH
56674: LD_VAR 0 1
56678: PPUSH
56679: CALL_OW 321
56683: PUSH
56684: LD_INT 2
56686: EQUAL
56687: ST_TO_ADDR
56688: GO 56862
56690: LD_INT 16
56692: DOUBLE
56693: EQUAL
56694: IFTRUE 56698
56696: GO 56723
56698: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
56699: LD_ADDR_VAR 0 3
56703: PUSH
56704: LD_INT 84
56706: PPUSH
56707: LD_VAR 0 1
56711: PPUSH
56712: CALL_OW 321
56716: PUSH
56717: LD_INT 2
56719: EQUAL
56720: ST_TO_ADDR
56721: GO 56862
56723: LD_INT 19
56725: DOUBLE
56726: EQUAL
56727: IFTRUE 56737
56729: LD_INT 23
56731: DOUBLE
56732: EQUAL
56733: IFTRUE 56737
56735: GO 56762
56737: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
56738: LD_ADDR_VAR 0 3
56742: PUSH
56743: LD_INT 83
56745: PPUSH
56746: LD_VAR 0 1
56750: PPUSH
56751: CALL_OW 321
56755: PUSH
56756: LD_INT 2
56758: EQUAL
56759: ST_TO_ADDR
56760: GO 56862
56762: LD_INT 17
56764: DOUBLE
56765: EQUAL
56766: IFTRUE 56770
56768: GO 56795
56770: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56771: LD_ADDR_VAR 0 3
56775: PUSH
56776: LD_INT 39
56778: PPUSH
56779: LD_VAR 0 1
56783: PPUSH
56784: CALL_OW 321
56788: PUSH
56789: LD_INT 2
56791: EQUAL
56792: ST_TO_ADDR
56793: GO 56862
56795: LD_INT 18
56797: DOUBLE
56798: EQUAL
56799: IFTRUE 56803
56801: GO 56828
56803: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56804: LD_ADDR_VAR 0 3
56808: PUSH
56809: LD_INT 40
56811: PPUSH
56812: LD_VAR 0 1
56816: PPUSH
56817: CALL_OW 321
56821: PUSH
56822: LD_INT 2
56824: EQUAL
56825: ST_TO_ADDR
56826: GO 56862
56828: LD_INT 27
56830: DOUBLE
56831: EQUAL
56832: IFTRUE 56836
56834: GO 56861
56836: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56837: LD_ADDR_VAR 0 3
56841: PUSH
56842: LD_INT 35
56844: PPUSH
56845: LD_VAR 0 1
56849: PPUSH
56850: CALL_OW 321
56854: PUSH
56855: LD_INT 2
56857: EQUAL
56858: ST_TO_ADDR
56859: GO 56862
56861: POP
// end ;
56862: LD_VAR 0 3
56866: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56867: LD_INT 0
56869: PPUSH
56870: PPUSH
56871: PPUSH
56872: PPUSH
56873: PPUSH
56874: PPUSH
56875: PPUSH
56876: PPUSH
56877: PPUSH
56878: PPUSH
56879: PPUSH
// result := false ;
56880: LD_ADDR_VAR 0 6
56884: PUSH
56885: LD_INT 0
56887: ST_TO_ADDR
// if btype = b_depot then
56888: LD_VAR 0 2
56892: PUSH
56893: LD_INT 0
56895: EQUAL
56896: IFFALSE 56908
// begin result := true ;
56898: LD_ADDR_VAR 0 6
56902: PUSH
56903: LD_INT 1
56905: ST_TO_ADDR
// exit ;
56906: GO 57762
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56908: LD_VAR 0 1
56912: NOT
56913: IFTRUE 56938
56915: PUSH
56916: LD_VAR 0 1
56920: PPUSH
56921: CALL_OW 266
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: IN
56936: NOT
56937: OR
56938: IFTRUE 56947
56940: PUSH
56941: LD_VAR 0 2
56945: NOT
56946: OR
56947: IFTRUE 56983
56949: PUSH
56950: LD_VAR 0 5
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: LD_INT 3
56966: PUSH
56967: LD_INT 4
56969: PUSH
56970: LD_INT 5
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: IN
56981: NOT
56982: OR
56983: IFTRUE 57002
56985: PUSH
56986: LD_VAR 0 3
56990: PPUSH
56991: LD_VAR 0 4
56995: PPUSH
56996: CALL_OW 488
57000: NOT
57001: OR
57002: IFFALSE 57006
// exit ;
57004: GO 57762
// side := GetSide ( depot ) ;
57006: LD_ADDR_VAR 0 9
57010: PUSH
57011: LD_VAR 0 1
57015: PPUSH
57016: CALL_OW 255
57020: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
57021: LD_VAR 0 9
57025: PPUSH
57026: LD_VAR 0 2
57030: PPUSH
57031: CALL 56491 0 2
57035: NOT
57036: IFFALSE 57040
// exit ;
57038: GO 57762
// pom := GetBase ( depot ) ;
57040: LD_ADDR_VAR 0 10
57044: PUSH
57045: LD_VAR 0 1
57049: PPUSH
57050: CALL_OW 274
57054: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57055: LD_ADDR_VAR 0 11
57059: PUSH
57060: LD_VAR 0 2
57064: PPUSH
57065: LD_VAR 0 1
57069: PPUSH
57070: CALL_OW 248
57074: PPUSH
57075: CALL_OW 450
57079: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57080: LD_VAR 0 10
57084: PPUSH
57085: LD_INT 1
57087: PPUSH
57088: CALL_OW 275
57092: PUSH
57093: LD_VAR 0 11
57097: PUSH
57098: LD_INT 1
57100: ARRAY
57101: GREATEREQUAL
57102: IFFALSE 57128
57104: PUSH
57105: LD_VAR 0 10
57109: PPUSH
57110: LD_INT 2
57112: PPUSH
57113: CALL_OW 275
57117: PUSH
57118: LD_VAR 0 11
57122: PUSH
57123: LD_INT 2
57125: ARRAY
57126: GREATEREQUAL
57127: AND
57128: IFFALSE 57154
57130: PUSH
57131: LD_VAR 0 10
57135: PPUSH
57136: LD_INT 3
57138: PPUSH
57139: CALL_OW 275
57143: PUSH
57144: LD_VAR 0 11
57148: PUSH
57149: LD_INT 3
57151: ARRAY
57152: GREATEREQUAL
57153: AND
57154: NOT
57155: IFFALSE 57159
// exit ;
57157: GO 57762
// if GetBType ( depot ) = b_depot then
57159: LD_VAR 0 1
57163: PPUSH
57164: CALL_OW 266
57168: PUSH
57169: LD_INT 0
57171: EQUAL
57172: IFFALSE 57184
// dist := 28 else
57174: LD_ADDR_VAR 0 14
57178: PUSH
57179: LD_INT 28
57181: ST_TO_ADDR
57182: GO 57192
// dist := 36 ;
57184: LD_ADDR_VAR 0 14
57188: PUSH
57189: LD_INT 36
57191: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57192: LD_VAR 0 1
57196: PPUSH
57197: LD_VAR 0 3
57201: PPUSH
57202: LD_VAR 0 4
57206: PPUSH
57207: CALL_OW 297
57211: PUSH
57212: LD_VAR 0 14
57216: GREATER
57217: IFFALSE 57221
// exit ;
57219: GO 57762
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57221: LD_ADDR_VAR 0 12
57225: PUSH
57226: LD_VAR 0 2
57230: PPUSH
57231: LD_VAR 0 3
57235: PPUSH
57236: LD_VAR 0 4
57240: PPUSH
57241: LD_VAR 0 5
57245: PPUSH
57246: LD_VAR 0 1
57250: PPUSH
57251: CALL_OW 248
57255: PPUSH
57256: LD_INT 0
57258: PPUSH
57259: CALL 57767 0 6
57263: ST_TO_ADDR
// if not hexes then
57264: LD_VAR 0 12
57268: NOT
57269: IFFALSE 57273
// exit ;
57271: GO 57762
// hex := GetHexInfo ( x , y ) ;
57273: LD_ADDR_VAR 0 15
57277: PUSH
57278: LD_VAR 0 3
57282: PPUSH
57283: LD_VAR 0 4
57287: PPUSH
57288: CALL_OW 546
57292: ST_TO_ADDR
// if hex [ 1 ] then
57293: LD_VAR 0 15
57297: PUSH
57298: LD_INT 1
57300: ARRAY
57301: IFFALSE 57305
// exit ;
57303: GO 57762
// height := hex [ 2 ] ;
57305: LD_ADDR_VAR 0 13
57309: PUSH
57310: LD_VAR 0 15
57314: PUSH
57315: LD_INT 2
57317: ARRAY
57318: ST_TO_ADDR
// for i = 1 to hexes do
57319: LD_ADDR_VAR 0 7
57323: PUSH
57324: DOUBLE
57325: LD_INT 1
57327: DEC
57328: ST_TO_ADDR
57329: LD_VAR 0 12
57333: PUSH
57334: FOR_TO
57335: IFFALSE 57679
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57337: LD_VAR 0 12
57341: PUSH
57342: LD_VAR 0 7
57346: ARRAY
57347: PUSH
57348: LD_INT 1
57350: ARRAY
57351: PPUSH
57352: LD_VAR 0 12
57356: PUSH
57357: LD_VAR 0 7
57361: ARRAY
57362: PUSH
57363: LD_INT 2
57365: ARRAY
57366: PPUSH
57367: CALL_OW 488
57371: NOT
57372: IFTRUE 57414
57374: PUSH
57375: LD_VAR 0 12
57379: PUSH
57380: LD_VAR 0 7
57384: ARRAY
57385: PUSH
57386: LD_INT 1
57388: ARRAY
57389: PPUSH
57390: LD_VAR 0 12
57394: PUSH
57395: LD_VAR 0 7
57399: ARRAY
57400: PUSH
57401: LD_INT 2
57403: ARRAY
57404: PPUSH
57405: CALL_OW 428
57409: PUSH
57410: LD_INT 0
57412: GREATER
57413: OR
57414: IFTRUE 57452
57416: PUSH
57417: LD_VAR 0 12
57421: PUSH
57422: LD_VAR 0 7
57426: ARRAY
57427: PUSH
57428: LD_INT 1
57430: ARRAY
57431: PPUSH
57432: LD_VAR 0 12
57436: PUSH
57437: LD_VAR 0 7
57441: ARRAY
57442: PUSH
57443: LD_INT 2
57445: ARRAY
57446: PPUSH
57447: CALL_OW 351
57451: OR
57452: IFFALSE 57458
// exit ;
57454: POP
57455: POP
57456: GO 57762
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57458: LD_ADDR_VAR 0 8
57462: PUSH
57463: LD_VAR 0 12
57467: PUSH
57468: LD_VAR 0 7
57472: ARRAY
57473: PUSH
57474: LD_INT 1
57476: ARRAY
57477: PPUSH
57478: LD_VAR 0 12
57482: PUSH
57483: LD_VAR 0 7
57487: ARRAY
57488: PUSH
57489: LD_INT 2
57491: ARRAY
57492: PPUSH
57493: CALL_OW 546
57497: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57498: LD_VAR 0 8
57502: PUSH
57503: LD_INT 1
57505: ARRAY
57506: IFTRUE 57528
57508: PUSH
57509: LD_VAR 0 8
57513: PUSH
57514: LD_INT 2
57516: ARRAY
57517: PUSH
57518: LD_VAR 0 13
57522: PUSH
57523: LD_INT 2
57525: PLUS
57526: GREATER
57527: OR
57528: IFTRUE 57550
57530: PUSH
57531: LD_VAR 0 8
57535: PUSH
57536: LD_INT 2
57538: ARRAY
57539: PUSH
57540: LD_VAR 0 13
57544: PUSH
57545: LD_INT 2
57547: MINUS
57548: LESS
57549: OR
57550: IFTRUE 57618
57552: PUSH
57553: LD_VAR 0 8
57557: PUSH
57558: LD_INT 3
57560: ARRAY
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 8
57567: PUSH
57568: LD_INT 9
57570: PUSH
57571: LD_INT 10
57573: PUSH
57574: LD_INT 11
57576: PUSH
57577: LD_INT 12
57579: PUSH
57580: LD_INT 13
57582: PUSH
57583: LD_INT 16
57585: PUSH
57586: LD_INT 17
57588: PUSH
57589: LD_INT 18
57591: PUSH
57592: LD_INT 19
57594: PUSH
57595: LD_INT 20
57597: PUSH
57598: LD_INT 21
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: IN
57616: NOT
57617: OR
57618: IFTRUE 57631
57620: PUSH
57621: LD_VAR 0 8
57625: PUSH
57626: LD_INT 5
57628: ARRAY
57629: NOT
57630: OR
57631: IFTRUE 57671
57633: PUSH
57634: LD_VAR 0 8
57638: PUSH
57639: LD_INT 6
57641: ARRAY
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: LD_INT 7
57651: PUSH
57652: LD_INT 9
57654: PUSH
57655: LD_INT 10
57657: PUSH
57658: LD_INT 11
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: IN
57669: NOT
57670: OR
57671: IFFALSE 57677
// exit ;
57673: POP
57674: POP
57675: GO 57762
// end ;
57677: GO 57334
57679: POP
57680: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57681: LD_VAR 0 9
57685: PPUSH
57686: LD_VAR 0 3
57690: PPUSH
57691: LD_VAR 0 4
57695: PPUSH
57696: LD_INT 20
57698: PPUSH
57699: CALL 49581 0 4
57703: PUSH
57704: LD_INT 4
57706: ARRAY
57707: IFFALSE 57711
// exit ;
57709: GO 57762
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57711: LD_VAR 0 2
57715: PUSH
57716: LD_INT 29
57718: PUSH
57719: LD_INT 30
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: IN
57726: IFFALSE 57750
57728: PUSH
57729: LD_VAR 0 3
57733: PPUSH
57734: LD_VAR 0 4
57738: PPUSH
57739: LD_VAR 0 9
57743: PPUSH
57744: CALL_OW 440
57748: NOT
57749: AND
57750: IFFALSE 57754
// exit ;
57752: GO 57762
// result := true ;
57754: LD_ADDR_VAR 0 6
57758: PUSH
57759: LD_INT 1
57761: ST_TO_ADDR
// end ;
57762: LD_VAR 0 6
57766: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57767: LD_INT 0
57769: PPUSH
57770: PPUSH
57771: PPUSH
57772: PPUSH
57773: PPUSH
57774: PPUSH
57775: PPUSH
57776: PPUSH
57777: PPUSH
57778: PPUSH
57779: PPUSH
57780: PPUSH
57781: PPUSH
57782: PPUSH
57783: PPUSH
57784: PPUSH
57785: PPUSH
57786: PPUSH
57787: PPUSH
57788: PPUSH
57789: PPUSH
57790: PPUSH
57791: PPUSH
57792: PPUSH
57793: PPUSH
57794: PPUSH
57795: PPUSH
57796: PPUSH
57797: PPUSH
57798: PPUSH
57799: PPUSH
57800: PPUSH
57801: PPUSH
57802: PPUSH
57803: PPUSH
57804: PPUSH
57805: PPUSH
57806: PPUSH
57807: PPUSH
57808: PPUSH
57809: PPUSH
57810: PPUSH
57811: PPUSH
57812: PPUSH
57813: PPUSH
57814: PPUSH
57815: PPUSH
57816: PPUSH
57817: PPUSH
57818: PPUSH
57819: PPUSH
57820: PPUSH
57821: PPUSH
57822: PPUSH
57823: PPUSH
57824: PPUSH
57825: PPUSH
57826: PPUSH
// result = [ ] ;
57827: LD_ADDR_VAR 0 7
57831: PUSH
57832: EMPTY
57833: ST_TO_ADDR
// temp_list = [ ] ;
57834: LD_ADDR_VAR 0 9
57838: PUSH
57839: EMPTY
57840: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57841: LD_VAR 0 4
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: LD_INT 3
57857: PUSH
57858: LD_INT 4
57860: PUSH
57861: LD_INT 5
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: IN
57872: NOT
57873: IFTRUE 57916
57875: PUSH
57876: LD_VAR 0 1
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: IN
57891: IFFALSE 57915
57893: PUSH
57894: LD_VAR 0 5
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: LIST
57912: IN
57913: NOT
57914: AND
57915: OR
57916: IFFALSE 57920
// exit ;
57918: GO 76319
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57920: LD_VAR 0 1
57924: PUSH
57925: LD_INT 6
57927: PUSH
57928: LD_INT 7
57930: PUSH
57931: LD_INT 8
57933: PUSH
57934: LD_INT 13
57936: PUSH
57937: LD_INT 12
57939: PUSH
57940: LD_INT 15
57942: PUSH
57943: LD_INT 11
57945: PUSH
57946: LD_INT 14
57948: PUSH
57949: LD_INT 10
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: IN
57963: IFFALSE 57973
// btype = b_lab ;
57965: LD_ADDR_VAR 0 1
57969: PUSH
57970: LD_INT 6
57972: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57973: LD_VAR 0 6
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: LD_INT 1
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: LIST
57991: IN
57992: NOT
57993: IFTRUE 58061
57995: PUSH
57996: LD_VAR 0 1
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: LD_INT 6
58015: PUSH
58016: LD_INT 36
58018: PUSH
58019: LD_INT 4
58021: PUSH
58022: LD_INT 5
58024: PUSH
58025: LD_INT 31
58027: PUSH
58028: LD_INT 32
58030: PUSH
58031: LD_INT 33
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: IN
58047: NOT
58048: IFFALSE 58060
58050: PUSH
58051: LD_VAR 0 6
58055: PUSH
58056: LD_INT 1
58058: EQUAL
58059: AND
58060: OR
58061: IFTRUE 58093
58063: PUSH
58064: LD_VAR 0 1
58068: PUSH
58069: LD_INT 2
58071: PUSH
58072: LD_INT 3
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: IN
58079: NOT
58080: IFFALSE 58092
58082: PUSH
58083: LD_VAR 0 6
58087: PUSH
58088: LD_INT 2
58090: EQUAL
58091: AND
58092: OR
58093: IFFALSE 58103
// mode = 0 ;
58095: LD_ADDR_VAR 0 6
58099: PUSH
58100: LD_INT 0
58102: ST_TO_ADDR
// case mode of 0 :
58103: LD_VAR 0 6
58107: PUSH
58108: LD_INT 0
58110: DOUBLE
58111: EQUAL
58112: IFTRUE 58116
58114: GO 69569
58116: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58117: LD_ADDR_VAR 0 11
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 0
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 2
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: LD_INT 2
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: LD_INT 2
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: LD_INT 3
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 3
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: LD_INT 2
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58310: LD_ADDR_VAR 0 12
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 2
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 2
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: LD_INT 1
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 2
58433: NEG
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: NEG
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 3
58467: NEG
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 3
58478: NEG
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58506: LD_ADDR_VAR 0 13
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: LD_INT 0
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 1
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 0
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: LD_INT 1
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: LD_INT 2
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 2
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 2
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: LD_INT 3
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: LD_INT 2
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 3
58677: NEG
58678: PUSH
58679: LD_INT 3
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58705: LD_ADDR_VAR 0 14
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: LD_INT 0
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: LD_INT 2
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58901: LD_ADDR_VAR 0 15
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 1
59013: NEG
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 3
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 3
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59094: LD_ADDR_VAR 0 16
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 1
59152: NEG
59153: PUSH
59154: LD_INT 0
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: LD_INT 2
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 2
59187: PUSH
59188: LD_INT 1
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: LD_INT 2
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: LD_INT 2
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: LD_INT 2
59233: NEG
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 3
59241: PUSH
59242: LD_INT 2
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 3
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: LD_INT 3
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59287: LD_ADDR_VAR 0 17
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 1
59315: PUSH
59316: LD_INT 0
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: LD_INT 1
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: LD_INT 2
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: NEG
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 2
59463: NEG
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: NEG
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: LD_INT 2
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59517: LD_ADDR_VAR 0 18
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 0
59534: PUSH
59535: LD_INT 1
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: LD_INT 1
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: LD_INT 2
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 2
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: LD_INT 2
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: LD_INT 2
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 2
59693: NEG
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: NEG
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59747: LD_ADDR_VAR 0 19
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 0
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: LD_INT 2
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: LD_INT 2
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 2
59946: NEG
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59977: LD_ADDR_VAR 0 20
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 0
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: LD_INT 2
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: LD_INT 2
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 2
60153: NEG
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: NEG
60165: PUSH
60166: LD_INT 1
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PUSH
60178: LD_INT 2
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60207: LD_ADDR_VAR 0 21
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: LD_INT 0
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: LD_INT 2
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: LD_INT 1
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 2
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 2
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 2
60342: PUSH
60343: LD_INT 2
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: LD_INT 2
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 1
60372: NEG
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: LD_INT 1
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 2
60406: NEG
60407: PUSH
60408: LD_INT 2
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60437: LD_ADDR_VAR 0 22
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 1
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: NEG
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: LD_INT 2
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: LD_INT 2
60533: NEG
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 2
60572: PUSH
60573: LD_INT 2
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: LD_INT 2
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: LD_INT 2
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 2
60613: NEG
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 2
60636: NEG
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60667: LD_ADDR_VAR 0 23
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: LD_INT 0
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 1
60736: NEG
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: LD_INT 2
60752: NEG
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: LD_INT 2
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 2
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 2
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 2
60802: PUSH
60803: LD_INT 2
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: LD_INT 2
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: LD_INT 2
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: NEG
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 2
60854: NEG
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 2
60866: NEG
60867: PUSH
60868: LD_INT 2
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 2
60878: NEG
60879: PUSH
60880: LD_INT 3
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: LD_INT 3
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: PUSH
60903: LD_INT 2
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60947: LD_ADDR_VAR 0 24
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: LD_INT 2
61043: NEG
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 2
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: PUSH
61073: LD_INT 1
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: LD_INT 2
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: LD_INT 2
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 2
61134: NEG
61135: PUSH
61136: LD_INT 1
61138: NEG
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 2
61146: NEG
61147: PUSH
61148: LD_INT 2
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 3
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 3
61190: PUSH
61191: LD_INT 2
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61223: LD_ADDR_VAR 0 25
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 0
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: NEG
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: NEG
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: NEG
61305: PUSH
61306: LD_INT 2
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: LD_INT 2
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: LD_INT 1
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 2
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 2
61348: PUSH
61349: LD_INT 1
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: LD_INT 2
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: LD_INT 2
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 2
61399: NEG
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 2
61410: NEG
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: NEG
61423: PUSH
61424: LD_INT 2
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 3
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 3
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 2
61454: PUSH
61455: LD_INT 3
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: LD_INT 3
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61497: LD_ADDR_VAR 0 26
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: LD_INT 0
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 1
61555: NEG
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 1
61566: NEG
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: LD_INT 2
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: LD_INT 2
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 1
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 2
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 2
61622: PUSH
61623: LD_INT 1
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: LD_INT 2
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: LD_INT 2
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: LD_INT 2
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 2
61673: NEG
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 2
61684: NEG
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 2
61696: NEG
61697: PUSH
61698: LD_INT 2
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 2
61708: PUSH
61709: LD_INT 3
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: LD_INT 3
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: LD_INT 2
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 2
61739: NEG
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61773: LD_ADDR_VAR 0 27
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: LD_INT 2
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: LD_INT 2
61869: NEG
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 2
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 2
61908: PUSH
61909: LD_INT 2
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: LD_INT 2
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 0
61928: PUSH
61929: LD_INT 2
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: NEG
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 2
61949: NEG
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 2
61960: NEG
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 2
61972: NEG
61973: PUSH
61974: LD_INT 2
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 1
61984: NEG
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 2
61995: NEG
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 3
62006: NEG
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: LD_INT 2
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62053: LD_ADDR_VAR 0 28
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: LD_INT 1
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: LD_INT 1
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: NEG
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: LD_INT 2
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: LD_INT 2
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 2
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 2
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 2
62188: PUSH
62189: LD_INT 2
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 1
62198: PUSH
62199: LD_INT 2
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: LD_INT 2
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: NEG
62219: PUSH
62220: LD_INT 1
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 2
62229: NEG
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 2
62240: NEG
62241: PUSH
62242: LD_INT 1
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 2
62252: NEG
62253: PUSH
62254: LD_INT 2
62256: NEG
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 2
62264: NEG
62265: PUSH
62266: LD_INT 3
62268: NEG
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: LD_INT 3
62280: NEG
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 3
62288: NEG
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 3
62300: NEG
62301: PUSH
62302: LD_INT 2
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62335: LD_ADDR_VAR 0 29
62339: PUSH
62340: LD_INT 0
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: LD_INT 2
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: LD_INT 2
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 2
62450: PUSH
62451: LD_INT 0
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 2
62460: PUSH
62461: LD_INT 1
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: PUSH
62471: LD_INT 2
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 2
62501: NEG
62502: PUSH
62503: LD_INT 1
62505: NEG
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 2
62513: NEG
62514: PUSH
62515: LD_INT 2
62517: NEG
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 2
62525: NEG
62526: PUSH
62527: LD_INT 3
62529: NEG
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 2
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 3
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 1
62558: PUSH
62559: LD_INT 3
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: NEG
62569: PUSH
62570: LD_INT 2
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 3
62579: NEG
62580: PUSH
62581: LD_INT 2
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62614: LD_ADDR_VAR 0 30
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: LD_INT 0
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: NEG
62684: PUSH
62685: LD_INT 1
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: LD_INT 2
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 0
62707: PUSH
62708: LD_INT 2
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 1
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 2
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 2
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 2
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 1
62759: PUSH
62760: LD_INT 2
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: LD_INT 1
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 2
62780: NEG
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 2
62791: NEG
62792: PUSH
62793: LD_INT 1
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: LD_INT 3
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 3
62826: PUSH
62827: LD_INT 2
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 2
62836: PUSH
62837: LD_INT 3
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 2
62846: NEG
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 3
62857: NEG
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62892: LD_ADDR_VAR 0 31
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 1
62920: PUSH
62921: LD_INT 0
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 1
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 1
62950: NEG
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: LD_INT 2
62977: NEG
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 1
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 2
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: LD_INT 1
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 2
63016: PUSH
63017: LD_INT 2
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: LD_INT 2
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: LD_INT 2
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: NEG
63047: PUSH
63048: LD_INT 1
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 2
63057: NEG
63058: PUSH
63059: LD_INT 1
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 2
63069: NEG
63070: PUSH
63071: LD_INT 2
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 2
63081: NEG
63082: PUSH
63083: LD_INT 3
63085: NEG
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 2
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 3
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: LD_INT 3
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 1
63124: NEG
63125: PUSH
63126: LD_INT 2
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 3
63135: NEG
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63170: LD_ADDR_VAR 0 32
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: LD_INT 1
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 1
63228: NEG
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 1
63239: NEG
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 1
63251: NEG
63252: PUSH
63253: LD_INT 2
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 0
63263: PUSH
63264: LD_INT 2
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 1
63274: PUSH
63275: LD_INT 1
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 2
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 2
63295: PUSH
63296: LD_INT 2
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 1
63305: PUSH
63306: LD_INT 2
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: LD_INT 2
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: NEG
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 2
63336: NEG
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 2
63347: NEG
63348: PUSH
63349: LD_INT 1
63351: NEG
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: LD_INT 3
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: LD_INT 2
63374: NEG
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 3
63382: PUSH
63383: LD_INT 2
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 2
63392: PUSH
63393: LD_INT 3
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 2
63402: NEG
63403: PUSH
63404: LD_INT 1
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 3
63413: NEG
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63448: LD_ADDR_VAR 0 33
63452: PUSH
63453: LD_INT 0
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: LD_INT 1
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 1
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: LD_INT 1
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: NEG
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: NEG
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 1
63529: NEG
63530: PUSH
63531: LD_INT 2
63533: NEG
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: LD_INT 1
63544: NEG
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 2
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 2
63562: PUSH
63563: LD_INT 1
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: LD_INT 2
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 0
63582: PUSH
63583: LD_INT 2
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 1
63592: NEG
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: NEG
63604: PUSH
63605: LD_INT 0
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 2
63614: NEG
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 2
63626: NEG
63627: PUSH
63628: LD_INT 2
63630: NEG
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 2
63638: NEG
63639: PUSH
63640: LD_INT 3
63642: NEG
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 2
63650: PUSH
63651: LD_INT 1
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 3
63661: PUSH
63662: LD_INT 1
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 1
63671: PUSH
63672: LD_INT 3
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: LD_INT 2
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 3
63692: NEG
63693: PUSH
63694: LD_INT 2
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63727: LD_ADDR_VAR 0 34
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: LD_INT 1
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 1
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 1
63765: PUSH
63766: LD_INT 1
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: LD_INT 1
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 1
63785: NEG
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 1
63796: NEG
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: NEG
63809: PUSH
63810: LD_INT 2
63812: NEG
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: LD_INT 2
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: PUSH
63832: LD_INT 1
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 2
63842: PUSH
63843: LD_INT 1
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 2
63852: PUSH
63853: LD_INT 2
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 1
63862: PUSH
63863: LD_INT 2
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 2
63894: NEG
63895: PUSH
63896: LD_INT 1
63898: NEG
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 2
63906: NEG
63907: PUSH
63908: LD_INT 2
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 1
63918: NEG
63919: PUSH
63920: LD_INT 3
63922: NEG
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 1
63930: PUSH
63931: LD_INT 2
63933: NEG
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 3
63941: PUSH
63942: LD_INT 2
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 2
63951: PUSH
63952: LD_INT 3
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 3
63972: NEG
63973: PUSH
63974: LD_INT 1
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64007: LD_ADDR_VAR 0 35
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: LD_INT 1
64027: NEG
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 1
64045: PUSH
64046: LD_INT 1
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 0
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 1
64065: NEG
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 2
64088: PUSH
64089: LD_INT 1
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 2
64098: NEG
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64119: LD_ADDR_VAR 0 36
64123: PUSH
64124: LD_INT 0
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: LD_INT 1
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 1
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 0
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: LD_INT 0
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: LD_INT 1
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: NEG
64201: PUSH
64202: LD_INT 2
64204: NEG
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 1
64212: PUSH
64213: LD_INT 2
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64231: LD_ADDR_VAR 0 37
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: LD_INT 1
64251: NEG
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: LD_INT 1
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: NEG
64301: PUSH
64302: LD_INT 1
64304: NEG
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 1
64312: PUSH
64313: LD_INT 1
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 1
64323: NEG
64324: PUSH
64325: LD_INT 1
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64343: LD_ADDR_VAR 0 38
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: LD_INT 1
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 1
64401: NEG
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: LD_INT 1
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 2
64424: PUSH
64425: LD_INT 1
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 2
64434: NEG
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64455: LD_ADDR_VAR 0 39
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: LD_INT 1
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 0
64503: PUSH
64504: LD_INT 1
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 1
64513: NEG
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: LD_INT 1
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: LD_INT 2
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 1
64548: PUSH
64549: LD_INT 2
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64567: LD_ADDR_VAR 0 40
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 1
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: LD_INT 1
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: LD_INT 0
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: LD_INT 1
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 1
64659: NEG
64660: PUSH
64661: LD_INT 1
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64679: LD_ADDR_VAR 0 41
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 0
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 1
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: LD_INT 1
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 1
64737: NEG
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: LD_INT 1
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 1
64760: NEG
64761: PUSH
64762: LD_INT 2
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: PUSH
64773: LD_INT 1
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 2
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 2
64793: PUSH
64794: LD_INT 1
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 2
64803: PUSH
64804: LD_INT 2
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 1
64813: PUSH
64814: LD_INT 2
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: NEG
64824: PUSH
64825: LD_INT 1
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 2
64834: NEG
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 2
64845: NEG
64846: PUSH
64847: LD_INT 1
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 2
64857: NEG
64858: PUSH
64859: LD_INT 2
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: LD_INT 3
64873: NEG
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 2
64881: PUSH
64882: LD_INT 1
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 3
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 3
64902: PUSH
64903: LD_INT 1
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 3
64912: PUSH
64913: LD_INT 2
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 3
64922: PUSH
64923: LD_INT 3
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 2
64932: PUSH
64933: LD_INT 3
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 2
64942: NEG
64943: PUSH
64944: LD_INT 1
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 3
64953: NEG
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 3
64964: NEG
64965: PUSH
64966: LD_INT 1
64968: NEG
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 3
64976: NEG
64977: PUSH
64978: LD_INT 2
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 3
64988: NEG
64989: PUSH
64990: LD_INT 3
64992: NEG
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65029: LD_ADDR_VAR 0 42
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: LD_INT 1
65049: NEG
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: LD_INT 0
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 1
65067: PUSH
65068: LD_INT 1
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 0
65077: PUSH
65078: LD_INT 1
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: LD_INT 0
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: LD_INT 1
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 1
65110: NEG
65111: PUSH
65112: LD_INT 2
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 0
65122: PUSH
65123: LD_INT 2
65125: NEG
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 1
65133: PUSH
65134: LD_INT 1
65136: NEG
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 2
65144: PUSH
65145: LD_INT 1
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 2
65154: PUSH
65155: LD_INT 2
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 1
65164: PUSH
65165: LD_INT 2
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: LD_INT 2
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 2
65195: NEG
65196: PUSH
65197: LD_INT 1
65199: NEG
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 2
65207: NEG
65208: PUSH
65209: LD_INT 2
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 2
65219: NEG
65220: PUSH
65221: LD_INT 3
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 1
65231: NEG
65232: PUSH
65233: LD_INT 3
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: LD_INT 3
65246: NEG
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 1
65254: PUSH
65255: LD_INT 2
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 3
65265: PUSH
65266: LD_INT 2
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 3
65275: PUSH
65276: LD_INT 3
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 2
65285: PUSH
65286: LD_INT 3
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 1
65295: PUSH
65296: LD_INT 3
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: LD_INT 3
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: NEG
65316: PUSH
65317: LD_INT 2
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 3
65326: NEG
65327: PUSH
65328: LD_INT 2
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 3
65338: NEG
65339: PUSH
65340: LD_INT 3
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65379: LD_ADDR_VAR 0 43
65383: PUSH
65384: LD_INT 0
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 1
65417: PUSH
65418: LD_INT 1
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: LD_INT 1
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 1
65437: NEG
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 1
65448: NEG
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 1
65460: NEG
65461: PUSH
65462: LD_INT 2
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: LD_INT 2
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 1
65483: PUSH
65484: LD_INT 1
65486: NEG
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: LD_INT 0
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 2
65504: PUSH
65505: LD_INT 1
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 1
65514: PUSH
65515: LD_INT 2
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: LD_INT 2
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: LD_INT 1
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 2
65545: NEG
65546: PUSH
65547: LD_INT 0
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 2
65556: NEG
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 1
65568: NEG
65569: PUSH
65570: LD_INT 3
65572: NEG
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: LD_INT 3
65583: NEG
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 1
65591: PUSH
65592: LD_INT 2
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 2
65602: PUSH
65603: LD_INT 1
65605: NEG
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 3
65613: PUSH
65614: LD_INT 0
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 3
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: PUSH
65634: LD_INT 3
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 0
65643: PUSH
65644: LD_INT 3
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 1
65653: NEG
65654: PUSH
65655: LD_INT 2
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 2
65664: NEG
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 3
65675: NEG
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 3
65686: NEG
65687: PUSH
65688: LD_INT 1
65690: NEG
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65727: LD_ADDR_VAR 0 44
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: LD_INT 0
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 0
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 1
65755: PUSH
65756: LD_INT 0
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 1
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 0
65775: PUSH
65776: LD_INT 1
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 1
65785: NEG
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 1
65796: NEG
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 1
65808: NEG
65809: PUSH
65810: LD_INT 2
65812: NEG
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: LD_INT 1
65823: NEG
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 2
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 2
65841: PUSH
65842: LD_INT 1
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 2
65851: PUSH
65852: LD_INT 2
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: LD_INT 2
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 1
65871: NEG
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 2
65882: NEG
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 2
65893: NEG
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 2
65905: NEG
65906: PUSH
65907: LD_INT 2
65909: NEG
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 2
65917: NEG
65918: PUSH
65919: LD_INT 3
65921: NEG
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 2
65929: PUSH
65930: LD_INT 1
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 3
65940: PUSH
65941: LD_INT 0
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 3
65950: PUSH
65951: LD_INT 1
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 3
65960: PUSH
65961: LD_INT 2
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 3
65970: PUSH
65971: LD_INT 3
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 2
65980: PUSH
65981: LD_INT 3
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 2
65990: NEG
65991: PUSH
65992: LD_INT 1
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 3
66001: NEG
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 3
66012: NEG
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 3
66024: NEG
66025: PUSH
66026: LD_INT 2
66028: NEG
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 3
66036: NEG
66037: PUSH
66038: LD_INT 3
66040: NEG
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66077: LD_ADDR_VAR 0 45
66081: PUSH
66082: LD_INT 0
66084: PUSH
66085: LD_INT 0
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: LD_INT 1
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 1
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: PUSH
66116: LD_INT 1
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: LD_INT 1
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 1
66135: NEG
66136: PUSH
66137: LD_INT 0
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 1
66146: NEG
66147: PUSH
66148: LD_INT 1
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 1
66158: NEG
66159: PUSH
66160: LD_INT 2
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: LD_INT 2
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 1
66181: PUSH
66182: LD_INT 1
66184: NEG
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 2
66192: PUSH
66193: LD_INT 1
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 2
66202: PUSH
66203: LD_INT 2
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 1
66212: PUSH
66213: LD_INT 2
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: LD_INT 2
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 1
66232: NEG
66233: PUSH
66234: LD_INT 1
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 2
66243: NEG
66244: PUSH
66245: LD_INT 1
66247: NEG
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 2
66255: NEG
66256: PUSH
66257: LD_INT 2
66259: NEG
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 2
66267: NEG
66268: PUSH
66269: LD_INT 3
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 1
66279: NEG
66280: PUSH
66281: LD_INT 3
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: LD_INT 3
66294: NEG
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: LD_INT 2
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 3
66313: PUSH
66314: LD_INT 2
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 3
66323: PUSH
66324: LD_INT 3
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 2
66333: PUSH
66334: LD_INT 3
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: PUSH
66344: LD_INT 3
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 0
66353: PUSH
66354: LD_INT 3
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 1
66363: NEG
66364: PUSH
66365: LD_INT 2
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 3
66374: NEG
66375: PUSH
66376: LD_INT 2
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 3
66386: NEG
66387: PUSH
66388: LD_INT 3
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66427: LD_ADDR_VAR 0 46
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 0
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 1
66455: PUSH
66456: LD_INT 0
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 1
66465: PUSH
66466: LD_INT 1
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 0
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 1
66496: NEG
66497: PUSH
66498: LD_INT 1
66500: NEG
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 1
66508: NEG
66509: PUSH
66510: LD_INT 2
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: LD_INT 2
66523: NEG
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 1
66531: PUSH
66532: LD_INT 1
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: LD_INT 0
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 2
66552: PUSH
66553: LD_INT 1
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: LD_INT 2
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: LD_INT 2
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: LD_INT 1
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 2
66593: NEG
66594: PUSH
66595: LD_INT 0
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 2
66604: NEG
66605: PUSH
66606: LD_INT 1
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 1
66616: NEG
66617: PUSH
66618: LD_INT 3
66620: NEG
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: LD_INT 3
66631: NEG
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 1
66639: PUSH
66640: LD_INT 2
66642: NEG
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 2
66650: PUSH
66651: LD_INT 1
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 3
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 3
66671: PUSH
66672: LD_INT 1
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 1
66681: PUSH
66682: LD_INT 3
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 0
66691: PUSH
66692: LD_INT 3
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: LD_INT 2
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 2
66712: NEG
66713: PUSH
66714: LD_INT 1
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 3
66723: NEG
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 3
66734: NEG
66735: PUSH
66736: LD_INT 1
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66775: LD_ADDR_VAR 0 47
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: LD_INT 0
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: LD_INT 1
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 1
66803: PUSH
66804: LD_INT 0
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 1
66813: PUSH
66814: LD_INT 1
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 0
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 1
66833: NEG
66834: PUSH
66835: LD_INT 0
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 1
66844: NEG
66845: PUSH
66846: LD_INT 1
66848: NEG
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 1
66856: NEG
66857: PUSH
66858: LD_INT 2
66860: NEG
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: LD_INT 2
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 1
66879: PUSH
66880: LD_INT 1
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 2
66890: NEG
66891: PUSH
66892: LD_INT 1
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 2
66902: NEG
66903: PUSH
66904: LD_INT 2
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66926: LD_ADDR_VAR 0 48
66930: PUSH
66931: LD_INT 0
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 0
66943: PUSH
66944: LD_INT 1
66946: NEG
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: PUSH
66955: LD_INT 0
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: LD_INT 1
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: LD_INT 1
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 1
66984: NEG
66985: PUSH
66986: LD_INT 0
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 1
66995: NEG
66996: PUSH
66997: LD_INT 1
66999: NEG
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 1
67007: NEG
67008: PUSH
67009: LD_INT 2
67011: NEG
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 0
67019: PUSH
67020: LD_INT 2
67022: NEG
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 1
67030: PUSH
67031: LD_INT 1
67033: NEG
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 2
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 2
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67073: LD_ADDR_VAR 0 49
67077: PUSH
67078: LD_INT 0
67080: PUSH
67081: LD_INT 0
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 0
67090: PUSH
67091: LD_INT 1
67093: NEG
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 1
67101: PUSH
67102: LD_INT 0
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 1
67111: PUSH
67112: LD_INT 1
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: LD_INT 1
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 1
67131: NEG
67132: PUSH
67133: LD_INT 0
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 1
67142: NEG
67143: PUSH
67144: LD_INT 1
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 1
67154: PUSH
67155: LD_INT 1
67157: NEG
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 2
67165: PUSH
67166: LD_INT 0
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PUSH
67173: LD_INT 2
67175: PUSH
67176: LD_INT 1
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 2
67185: PUSH
67186: LD_INT 2
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 1
67195: PUSH
67196: LD_INT 2
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67217: LD_ADDR_VAR 0 50
67221: PUSH
67222: LD_INT 0
67224: PUSH
67225: LD_INT 0
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 0
67234: PUSH
67235: LD_INT 1
67237: NEG
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 1
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 1
67255: PUSH
67256: LD_INT 1
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 0
67265: PUSH
67266: LD_INT 1
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 1
67275: NEG
67276: PUSH
67277: LD_INT 0
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 1
67286: NEG
67287: PUSH
67288: LD_INT 1
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 2
67298: PUSH
67299: LD_INT 1
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 2
67308: PUSH
67309: LD_INT 2
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 1
67318: PUSH
67319: LD_INT 2
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 0
67328: PUSH
67329: LD_INT 2
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: LD_INT 1
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67361: LD_ADDR_VAR 0 51
67365: PUSH
67366: LD_INT 0
67368: PUSH
67369: LD_INT 0
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 0
67378: PUSH
67379: LD_INT 1
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 1
67389: PUSH
67390: LD_INT 0
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 1
67399: PUSH
67400: LD_INT 1
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 0
67409: PUSH
67410: LD_INT 1
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 1
67419: NEG
67420: PUSH
67421: LD_INT 0
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: PUSH
67432: LD_INT 1
67434: NEG
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 1
67442: PUSH
67443: LD_INT 2
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 0
67452: PUSH
67453: LD_INT 2
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 1
67462: NEG
67463: PUSH
67464: LD_INT 1
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 2
67473: NEG
67474: PUSH
67475: LD_INT 0
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 2
67484: NEG
67485: PUSH
67486: LD_INT 1
67488: NEG
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67508: LD_ADDR_VAR 0 52
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 0
67525: PUSH
67526: LD_INT 1
67528: NEG
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 1
67536: PUSH
67537: LD_INT 0
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 1
67546: PUSH
67547: LD_INT 1
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 0
67556: PUSH
67557: LD_INT 1
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 1
67566: NEG
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 1
67577: NEG
67578: PUSH
67579: LD_INT 1
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 1
67589: NEG
67590: PUSH
67591: LD_INT 2
67593: NEG
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 1
67601: NEG
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 2
67612: NEG
67613: PUSH
67614: LD_INT 0
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 2
67623: NEG
67624: PUSH
67625: LD_INT 1
67627: NEG
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 2
67635: NEG
67636: PUSH
67637: LD_INT 2
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67659: LD_ADDR_VAR 0 53
67663: PUSH
67664: LD_INT 0
67666: PUSH
67667: LD_INT 0
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 0
67676: PUSH
67677: LD_INT 1
67679: NEG
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 1
67687: PUSH
67688: LD_INT 0
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 1
67697: PUSH
67698: LD_INT 1
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 0
67707: PUSH
67708: LD_INT 1
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 1
67717: NEG
67718: PUSH
67719: LD_INT 0
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 1
67728: NEG
67729: PUSH
67730: LD_INT 1
67732: NEG
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 1
67740: NEG
67741: PUSH
67742: LD_INT 2
67744: NEG
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 0
67752: PUSH
67753: LD_INT 2
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 1
67763: PUSH
67764: LD_INT 1
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 2
67774: PUSH
67775: LD_INT 0
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 2
67784: PUSH
67785: LD_INT 1
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 2
67794: PUSH
67795: LD_INT 2
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 1
67804: PUSH
67805: LD_INT 2
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 0
67814: PUSH
67815: LD_INT 2
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 1
67824: NEG
67825: PUSH
67826: LD_INT 1
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 2
67835: NEG
67836: PUSH
67837: LD_INT 0
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 2
67846: NEG
67847: PUSH
67848: LD_INT 1
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 2
67858: NEG
67859: PUSH
67860: LD_INT 2
67862: NEG
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67889: LD_ADDR_VAR 0 54
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: LD_INT 0
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: LD_INT 1
67909: NEG
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 1
67917: PUSH
67918: LD_INT 0
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 1
67927: PUSH
67928: LD_INT 1
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 0
67937: PUSH
67938: LD_INT 1
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 1
67947: NEG
67948: PUSH
67949: LD_INT 0
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 1
67958: NEG
67959: PUSH
67960: LD_INT 1
67962: NEG
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 1
67970: NEG
67971: PUSH
67972: LD_INT 2
67974: NEG
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: LD_INT 0
67982: PUSH
67983: LD_INT 2
67985: NEG
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 1
67993: PUSH
67994: LD_INT 1
67996: NEG
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 2
68004: PUSH
68005: LD_INT 0
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 2
68014: PUSH
68015: LD_INT 1
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 2
68024: PUSH
68025: LD_INT 2
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 1
68034: PUSH
68035: LD_INT 2
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 0
68044: PUSH
68045: LD_INT 2
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 1
68054: NEG
68055: PUSH
68056: LD_INT 1
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 2
68065: NEG
68066: PUSH
68067: LD_INT 0
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 2
68076: NEG
68077: PUSH
68078: LD_INT 1
68080: NEG
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 2
68088: NEG
68089: PUSH
68090: LD_INT 2
68092: NEG
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68119: LD_ADDR_VAR 0 55
68123: PUSH
68124: LD_INT 0
68126: PUSH
68127: LD_INT 0
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 0
68136: PUSH
68137: LD_INT 1
68139: NEG
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 1
68147: PUSH
68148: LD_INT 0
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 1
68157: PUSH
68158: LD_INT 1
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: LD_INT 1
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 1
68177: NEG
68178: PUSH
68179: LD_INT 0
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 1
68188: NEG
68189: PUSH
68190: LD_INT 1
68192: NEG
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 1
68200: NEG
68201: PUSH
68202: LD_INT 2
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 0
68212: PUSH
68213: LD_INT 2
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 1
68223: PUSH
68224: LD_INT 1
68226: NEG
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 2
68234: PUSH
68235: LD_INT 0
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 2
68244: PUSH
68245: LD_INT 1
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 2
68254: PUSH
68255: LD_INT 2
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 1
68264: PUSH
68265: LD_INT 2
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 0
68274: PUSH
68275: LD_INT 2
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 1
68284: NEG
68285: PUSH
68286: LD_INT 1
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 2
68295: NEG
68296: PUSH
68297: LD_INT 0
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 2
68306: NEG
68307: PUSH
68308: LD_INT 1
68310: NEG
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 2
68318: NEG
68319: PUSH
68320: LD_INT 2
68322: NEG
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68349: LD_ADDR_VAR 0 56
68353: PUSH
68354: LD_INT 0
68356: PUSH
68357: LD_INT 0
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 0
68366: PUSH
68367: LD_INT 1
68369: NEG
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 1
68377: PUSH
68378: LD_INT 0
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 1
68387: PUSH
68388: LD_INT 1
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 0
68397: PUSH
68398: LD_INT 1
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 1
68407: NEG
68408: PUSH
68409: LD_INT 0
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 1
68418: NEG
68419: PUSH
68420: LD_INT 1
68422: NEG
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 1
68430: NEG
68431: PUSH
68432: LD_INT 2
68434: NEG
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: LD_INT 2
68445: NEG
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 1
68453: PUSH
68454: LD_INT 1
68456: NEG
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 2
68464: PUSH
68465: LD_INT 0
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 2
68474: PUSH
68475: LD_INT 1
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 2
68484: PUSH
68485: LD_INT 2
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 1
68494: PUSH
68495: LD_INT 2
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 0
68504: PUSH
68505: LD_INT 2
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 1
68514: NEG
68515: PUSH
68516: LD_INT 1
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 2
68525: NEG
68526: PUSH
68527: LD_INT 0
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 2
68536: NEG
68537: PUSH
68538: LD_INT 1
68540: NEG
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 2
68548: NEG
68549: PUSH
68550: LD_INT 2
68552: NEG
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68579: LD_ADDR_VAR 0 57
68583: PUSH
68584: LD_INT 0
68586: PUSH
68587: LD_INT 0
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 0
68596: PUSH
68597: LD_INT 1
68599: NEG
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 1
68607: PUSH
68608: LD_INT 0
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 1
68617: PUSH
68618: LD_INT 1
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 0
68627: PUSH
68628: LD_INT 1
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 1
68637: NEG
68638: PUSH
68639: LD_INT 0
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: LD_INT 1
68648: NEG
68649: PUSH
68650: LD_INT 1
68652: NEG
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 1
68660: NEG
68661: PUSH
68662: LD_INT 2
68664: NEG
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 0
68672: PUSH
68673: LD_INT 2
68675: NEG
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 1
68683: PUSH
68684: LD_INT 1
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 2
68694: PUSH
68695: LD_INT 0
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 2
68704: PUSH
68705: LD_INT 1
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 2
68714: PUSH
68715: LD_INT 2
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 1
68724: PUSH
68725: LD_INT 2
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 0
68734: PUSH
68735: LD_INT 2
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 1
68744: NEG
68745: PUSH
68746: LD_INT 1
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 2
68755: NEG
68756: PUSH
68757: LD_INT 0
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 2
68766: NEG
68767: PUSH
68768: LD_INT 1
68770: NEG
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 2
68778: NEG
68779: PUSH
68780: LD_INT 2
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68809: LD_ADDR_VAR 0 58
68813: PUSH
68814: LD_INT 0
68816: PUSH
68817: LD_INT 0
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 0
68826: PUSH
68827: LD_INT 1
68829: NEG
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 1
68837: PUSH
68838: LD_INT 0
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 1
68847: PUSH
68848: LD_INT 1
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 0
68857: PUSH
68858: LD_INT 1
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 1
68867: NEG
68868: PUSH
68869: LD_INT 0
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 1
68878: NEG
68879: PUSH
68880: LD_INT 1
68882: NEG
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 1
68890: NEG
68891: PUSH
68892: LD_INT 2
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 0
68902: PUSH
68903: LD_INT 2
68905: NEG
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 1
68913: PUSH
68914: LD_INT 1
68916: NEG
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 2
68924: PUSH
68925: LD_INT 0
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 2
68934: PUSH
68935: LD_INT 1
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 2
68944: PUSH
68945: LD_INT 2
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 1
68954: PUSH
68955: LD_INT 2
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 0
68964: PUSH
68965: LD_INT 2
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 1
68974: NEG
68975: PUSH
68976: LD_INT 1
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 2
68985: NEG
68986: PUSH
68987: LD_INT 0
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 2
68996: NEG
68997: PUSH
68998: LD_INT 1
69000: NEG
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 2
69008: NEG
69009: PUSH
69010: LD_INT 2
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69039: LD_ADDR_VAR 0 59
69043: PUSH
69044: LD_INT 0
69046: PUSH
69047: LD_INT 0
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 0
69056: PUSH
69057: LD_INT 1
69059: NEG
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 1
69067: PUSH
69068: LD_INT 0
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 1
69077: PUSH
69078: LD_INT 1
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 0
69087: PUSH
69088: LD_INT 1
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 1
69097: NEG
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 1
69108: NEG
69109: PUSH
69110: LD_INT 1
69112: NEG
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69127: LD_ADDR_VAR 0 60
69131: PUSH
69132: LD_INT 0
69134: PUSH
69135: LD_INT 0
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 0
69144: PUSH
69145: LD_INT 1
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 1
69155: PUSH
69156: LD_INT 0
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 1
69165: PUSH
69166: LD_INT 1
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 0
69175: PUSH
69176: LD_INT 1
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 1
69185: NEG
69186: PUSH
69187: LD_INT 0
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 1
69196: NEG
69197: PUSH
69198: LD_INT 1
69200: NEG
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69215: LD_ADDR_VAR 0 61
69219: PUSH
69220: LD_INT 0
69222: PUSH
69223: LD_INT 0
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 0
69232: PUSH
69233: LD_INT 1
69235: NEG
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 1
69243: PUSH
69244: LD_INT 0
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 1
69253: PUSH
69254: LD_INT 1
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: LD_INT 1
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 1
69273: NEG
69274: PUSH
69275: LD_INT 0
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 1
69284: NEG
69285: PUSH
69286: LD_INT 1
69288: NEG
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69303: LD_ADDR_VAR 0 62
69307: PUSH
69308: LD_INT 0
69310: PUSH
69311: LD_INT 0
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 0
69320: PUSH
69321: LD_INT 1
69323: NEG
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 1
69331: PUSH
69332: LD_INT 0
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 1
69341: PUSH
69342: LD_INT 1
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: LD_INT 1
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 1
69361: NEG
69362: PUSH
69363: LD_INT 0
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 1
69372: NEG
69373: PUSH
69374: LD_INT 1
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69391: LD_ADDR_VAR 0 63
69395: PUSH
69396: LD_INT 0
69398: PUSH
69399: LD_INT 0
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: LD_INT 1
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 1
69419: PUSH
69420: LD_INT 0
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 1
69429: PUSH
69430: LD_INT 1
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 0
69439: PUSH
69440: LD_INT 1
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 1
69449: NEG
69450: PUSH
69451: LD_INT 0
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 1
69460: NEG
69461: PUSH
69462: LD_INT 1
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69479: LD_ADDR_VAR 0 64
69483: PUSH
69484: LD_INT 0
69486: PUSH
69487: LD_INT 0
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 0
69496: PUSH
69497: LD_INT 1
69499: NEG
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 1
69507: PUSH
69508: LD_INT 0
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 1
69517: PUSH
69518: LD_INT 1
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 0
69527: PUSH
69528: LD_INT 1
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 1
69537: NEG
69538: PUSH
69539: LD_INT 0
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 1
69548: NEG
69549: PUSH
69550: LD_INT 1
69552: NEG
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: ST_TO_ADDR
// end ; 1 :
69567: GO 75464
69569: LD_INT 1
69571: DOUBLE
69572: EQUAL
69573: IFTRUE 69577
69575: GO 72200
69577: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69578: LD_ADDR_VAR 0 11
69582: PUSH
69583: LD_INT 1
69585: NEG
69586: PUSH
69587: LD_INT 3
69589: NEG
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 0
69597: PUSH
69598: LD_INT 3
69600: NEG
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 1
69608: PUSH
69609: LD_INT 2
69611: NEG
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: LIST
69621: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69622: LD_ADDR_VAR 0 12
69626: PUSH
69627: LD_INT 2
69629: PUSH
69630: LD_INT 1
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 3
69640: PUSH
69641: LD_INT 0
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 3
69650: PUSH
69651: LD_INT 1
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: LIST
69662: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69663: LD_ADDR_VAR 0 13
69667: PUSH
69668: LD_INT 3
69670: PUSH
69671: LD_INT 2
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 3
69680: PUSH
69681: LD_INT 3
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 2
69690: PUSH
69691: LD_INT 3
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: LIST
69702: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69703: LD_ADDR_VAR 0 14
69707: PUSH
69708: LD_INT 1
69710: PUSH
69711: LD_INT 3
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 0
69720: PUSH
69721: LD_INT 3
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 1
69730: NEG
69731: PUSH
69732: LD_INT 2
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: LIST
69743: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69744: LD_ADDR_VAR 0 15
69748: PUSH
69749: LD_INT 2
69751: NEG
69752: PUSH
69753: LD_INT 1
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 3
69762: NEG
69763: PUSH
69764: LD_INT 0
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 3
69773: NEG
69774: PUSH
69775: LD_INT 1
69777: NEG
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: LIST
69787: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69788: LD_ADDR_VAR 0 16
69792: PUSH
69793: LD_INT 2
69795: NEG
69796: PUSH
69797: LD_INT 3
69799: NEG
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 3
69807: NEG
69808: PUSH
69809: LD_INT 2
69811: NEG
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 3
69819: NEG
69820: PUSH
69821: LD_INT 3
69823: NEG
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: LIST
69833: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69834: LD_ADDR_VAR 0 17
69838: PUSH
69839: LD_INT 1
69841: NEG
69842: PUSH
69843: LD_INT 3
69845: NEG
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 0
69853: PUSH
69854: LD_INT 3
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 1
69864: PUSH
69865: LD_INT 2
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: LIST
69877: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69878: LD_ADDR_VAR 0 18
69882: PUSH
69883: LD_INT 2
69885: PUSH
69886: LD_INT 1
69888: NEG
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 3
69896: PUSH
69897: LD_INT 0
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 3
69906: PUSH
69907: LD_INT 1
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: LIST
69918: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69919: LD_ADDR_VAR 0 19
69923: PUSH
69924: LD_INT 3
69926: PUSH
69927: LD_INT 2
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_INT 3
69936: PUSH
69937: LD_INT 3
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 2
69946: PUSH
69947: LD_INT 3
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: LIST
69958: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69959: LD_ADDR_VAR 0 20
69963: PUSH
69964: LD_INT 1
69966: PUSH
69967: LD_INT 3
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 0
69976: PUSH
69977: LD_INT 3
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 1
69986: NEG
69987: PUSH
69988: LD_INT 2
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: LIST
69999: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70000: LD_ADDR_VAR 0 21
70004: PUSH
70005: LD_INT 2
70007: NEG
70008: PUSH
70009: LD_INT 1
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 3
70018: NEG
70019: PUSH
70020: LD_INT 0
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 3
70029: NEG
70030: PUSH
70031: LD_INT 1
70033: NEG
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: LIST
70043: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70044: LD_ADDR_VAR 0 22
70048: PUSH
70049: LD_INT 2
70051: NEG
70052: PUSH
70053: LD_INT 3
70055: NEG
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 3
70063: NEG
70064: PUSH
70065: LD_INT 2
70067: NEG
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 3
70075: NEG
70076: PUSH
70077: LD_INT 3
70079: NEG
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: LIST
70089: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70090: LD_ADDR_VAR 0 23
70094: PUSH
70095: LD_INT 0
70097: PUSH
70098: LD_INT 3
70100: NEG
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 1
70108: NEG
70109: PUSH
70110: LD_INT 4
70112: NEG
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 1
70120: PUSH
70121: LD_INT 3
70123: NEG
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: LIST
70133: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70134: LD_ADDR_VAR 0 24
70138: PUSH
70139: LD_INT 3
70141: PUSH
70142: LD_INT 0
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 3
70151: PUSH
70152: LD_INT 1
70154: NEG
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 4
70162: PUSH
70163: LD_INT 1
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: LIST
70174: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70175: LD_ADDR_VAR 0 25
70179: PUSH
70180: LD_INT 3
70182: PUSH
70183: LD_INT 3
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: PUSH
70190: LD_INT 4
70192: PUSH
70193: LD_INT 3
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 3
70202: PUSH
70203: LD_INT 4
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: LIST
70214: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70215: LD_ADDR_VAR 0 26
70219: PUSH
70220: LD_INT 0
70222: PUSH
70223: LD_INT 3
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 1
70232: PUSH
70233: LD_INT 4
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 1
70242: NEG
70243: PUSH
70244: LD_INT 3
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: LIST
70255: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70256: LD_ADDR_VAR 0 27
70260: PUSH
70261: LD_INT 3
70263: NEG
70264: PUSH
70265: LD_INT 0
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 3
70274: NEG
70275: PUSH
70276: LD_INT 1
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 4
70285: NEG
70286: PUSH
70287: LD_INT 1
70289: NEG
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: LIST
70299: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70300: LD_ADDR_VAR 0 28
70304: PUSH
70305: LD_INT 3
70307: NEG
70308: PUSH
70309: LD_INT 3
70311: NEG
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 3
70319: NEG
70320: PUSH
70321: LD_INT 4
70323: NEG
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 4
70331: NEG
70332: PUSH
70333: LD_INT 3
70335: NEG
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: LIST
70345: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70346: LD_ADDR_VAR 0 29
70350: PUSH
70351: LD_INT 1
70353: NEG
70354: PUSH
70355: LD_INT 3
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 0
70365: PUSH
70366: LD_INT 3
70368: NEG
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 1
70376: PUSH
70377: LD_INT 2
70379: NEG
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 1
70387: NEG
70388: PUSH
70389: LD_INT 4
70391: NEG
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 0
70399: PUSH
70400: LD_INT 4
70402: NEG
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 1
70410: PUSH
70411: LD_INT 3
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 1
70421: NEG
70422: PUSH
70423: LD_INT 5
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 0
70433: PUSH
70434: LD_INT 5
70436: NEG
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 1
70444: PUSH
70445: LD_INT 4
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 1
70455: NEG
70456: PUSH
70457: LD_INT 6
70459: NEG
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 0
70467: PUSH
70468: LD_INT 6
70470: NEG
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 1
70478: PUSH
70479: LD_INT 5
70481: NEG
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70501: LD_ADDR_VAR 0 30
70505: PUSH
70506: LD_INT 2
70508: PUSH
70509: LD_INT 1
70511: NEG
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 3
70519: PUSH
70520: LD_INT 0
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 3
70529: PUSH
70530: LD_INT 1
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: LD_INT 3
70539: PUSH
70540: LD_INT 1
70542: NEG
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 4
70550: PUSH
70551: LD_INT 0
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 4
70560: PUSH
70561: LD_INT 1
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 4
70570: PUSH
70571: LD_INT 1
70573: NEG
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 5
70581: PUSH
70582: LD_INT 0
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 5
70591: PUSH
70592: LD_INT 1
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 5
70601: PUSH
70602: LD_INT 1
70604: NEG
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 6
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 6
70622: PUSH
70623: LD_INT 1
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70644: LD_ADDR_VAR 0 31
70648: PUSH
70649: LD_INT 3
70651: PUSH
70652: LD_INT 2
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 3
70661: PUSH
70662: LD_INT 3
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 2
70671: PUSH
70672: LD_INT 3
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 4
70681: PUSH
70682: LD_INT 3
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 4
70691: PUSH
70692: LD_INT 4
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 3
70701: PUSH
70702: LD_INT 4
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 5
70711: PUSH
70712: LD_INT 4
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 5
70721: PUSH
70722: LD_INT 5
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 4
70731: PUSH
70732: LD_INT 5
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 6
70741: PUSH
70742: LD_INT 5
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 6
70751: PUSH
70752: LD_INT 6
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 5
70761: PUSH
70762: LD_INT 6
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70783: LD_ADDR_VAR 0 32
70787: PUSH
70788: LD_INT 1
70790: PUSH
70791: LD_INT 3
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 0
70800: PUSH
70801: LD_INT 3
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 1
70810: NEG
70811: PUSH
70812: LD_INT 2
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 1
70821: PUSH
70822: LD_INT 4
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 0
70831: PUSH
70832: LD_INT 4
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 1
70841: NEG
70842: PUSH
70843: LD_INT 3
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 1
70852: PUSH
70853: LD_INT 5
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 0
70862: PUSH
70863: LD_INT 5
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 1
70872: NEG
70873: PUSH
70874: LD_INT 4
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 1
70883: PUSH
70884: LD_INT 6
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 0
70893: PUSH
70894: LD_INT 6
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 1
70903: NEG
70904: PUSH
70905: LD_INT 5
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70926: LD_ADDR_VAR 0 33
70930: PUSH
70931: LD_INT 2
70933: NEG
70934: PUSH
70935: LD_INT 1
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 3
70944: NEG
70945: PUSH
70946: LD_INT 0
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 3
70955: NEG
70956: PUSH
70957: LD_INT 1
70959: NEG
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 3
70967: NEG
70968: PUSH
70969: LD_INT 1
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 4
70978: NEG
70979: PUSH
70980: LD_INT 0
70982: PUSH
70983: EMPTY
70984: LIST
70985: LIST
70986: PUSH
70987: LD_INT 4
70989: NEG
70990: PUSH
70991: LD_INT 1
70993: NEG
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 4
71001: NEG
71002: PUSH
71003: LD_INT 1
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 5
71012: NEG
71013: PUSH
71014: LD_INT 0
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 5
71023: NEG
71024: PUSH
71025: LD_INT 1
71027: NEG
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 5
71035: NEG
71036: PUSH
71037: LD_INT 1
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 6
71046: NEG
71047: PUSH
71048: LD_INT 0
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 6
71057: NEG
71058: PUSH
71059: LD_INT 1
71061: NEG
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71081: LD_ADDR_VAR 0 34
71085: PUSH
71086: LD_INT 2
71088: NEG
71089: PUSH
71090: LD_INT 3
71092: NEG
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: LD_INT 3
71100: NEG
71101: PUSH
71102: LD_INT 2
71104: NEG
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: LD_INT 3
71112: NEG
71113: PUSH
71114: LD_INT 3
71116: NEG
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 3
71124: NEG
71125: PUSH
71126: LD_INT 4
71128: NEG
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 4
71136: NEG
71137: PUSH
71138: LD_INT 3
71140: NEG
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 4
71148: NEG
71149: PUSH
71150: LD_INT 4
71152: NEG
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 4
71160: NEG
71161: PUSH
71162: LD_INT 5
71164: NEG
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 5
71172: NEG
71173: PUSH
71174: LD_INT 4
71176: NEG
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 5
71184: NEG
71185: PUSH
71186: LD_INT 5
71188: NEG
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 5
71196: NEG
71197: PUSH
71198: LD_INT 6
71200: NEG
71201: PUSH
71202: EMPTY
71203: LIST
71204: LIST
71205: PUSH
71206: LD_INT 6
71208: NEG
71209: PUSH
71210: LD_INT 5
71212: NEG
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: LD_INT 6
71220: NEG
71221: PUSH
71222: LD_INT 6
71224: NEG
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71244: LD_ADDR_VAR 0 41
71248: PUSH
71249: LD_INT 0
71251: PUSH
71252: LD_INT 2
71254: NEG
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PUSH
71260: LD_INT 1
71262: NEG
71263: PUSH
71264: LD_INT 3
71266: NEG
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: LD_INT 1
71274: PUSH
71275: LD_INT 2
71277: NEG
71278: PUSH
71279: EMPTY
71280: LIST
71281: LIST
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: LIST
71287: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71288: LD_ADDR_VAR 0 42
71292: PUSH
71293: LD_INT 2
71295: PUSH
71296: LD_INT 0
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: LD_INT 2
71305: PUSH
71306: LD_INT 1
71308: NEG
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PUSH
71314: LD_INT 3
71316: PUSH
71317: LD_INT 1
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: LIST
71328: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71329: LD_ADDR_VAR 0 43
71333: PUSH
71334: LD_INT 2
71336: PUSH
71337: LD_INT 2
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 3
71346: PUSH
71347: LD_INT 2
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 2
71356: PUSH
71357: LD_INT 3
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: LIST
71368: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71369: LD_ADDR_VAR 0 44
71373: PUSH
71374: LD_INT 0
71376: PUSH
71377: LD_INT 2
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 1
71386: PUSH
71387: LD_INT 3
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: LD_INT 1
71396: NEG
71397: PUSH
71398: LD_INT 2
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: LIST
71409: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71410: LD_ADDR_VAR 0 45
71414: PUSH
71415: LD_INT 2
71417: NEG
71418: PUSH
71419: LD_INT 0
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: PUSH
71426: LD_INT 2
71428: NEG
71429: PUSH
71430: LD_INT 1
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 3
71439: NEG
71440: PUSH
71441: LD_INT 1
71443: NEG
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: LIST
71453: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71454: LD_ADDR_VAR 0 46
71458: PUSH
71459: LD_INT 2
71461: NEG
71462: PUSH
71463: LD_INT 2
71465: NEG
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 2
71473: NEG
71474: PUSH
71475: LD_INT 3
71477: NEG
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: PUSH
71483: LD_INT 3
71485: NEG
71486: PUSH
71487: LD_INT 2
71489: NEG
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: LIST
71499: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71500: LD_ADDR_VAR 0 47
71504: PUSH
71505: LD_INT 2
71507: NEG
71508: PUSH
71509: LD_INT 3
71511: NEG
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 1
71519: NEG
71520: PUSH
71521: LD_INT 3
71523: NEG
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71533: LD_ADDR_VAR 0 48
71537: PUSH
71538: LD_INT 1
71540: PUSH
71541: LD_INT 2
71543: NEG
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 2
71551: PUSH
71552: LD_INT 1
71554: NEG
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71564: LD_ADDR_VAR 0 49
71568: PUSH
71569: LD_INT 3
71571: PUSH
71572: LD_INT 1
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 3
71581: PUSH
71582: LD_INT 2
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71593: LD_ADDR_VAR 0 50
71597: PUSH
71598: LD_INT 2
71600: PUSH
71601: LD_INT 3
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: LD_INT 1
71610: PUSH
71611: LD_INT 3
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71622: LD_ADDR_VAR 0 51
71626: PUSH
71627: LD_INT 1
71629: NEG
71630: PUSH
71631: LD_INT 2
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 2
71640: NEG
71641: PUSH
71642: LD_INT 1
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71653: LD_ADDR_VAR 0 52
71657: PUSH
71658: LD_INT 3
71660: NEG
71661: PUSH
71662: LD_INT 1
71664: NEG
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 3
71672: NEG
71673: PUSH
71674: LD_INT 2
71676: NEG
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71686: LD_ADDR_VAR 0 53
71690: PUSH
71691: LD_INT 1
71693: NEG
71694: PUSH
71695: LD_INT 3
71697: NEG
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: LD_INT 0
71705: PUSH
71706: LD_INT 3
71708: NEG
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: PUSH
71714: LD_INT 1
71716: PUSH
71717: LD_INT 2
71719: NEG
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: LIST
71729: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71730: LD_ADDR_VAR 0 54
71734: PUSH
71735: LD_INT 2
71737: PUSH
71738: LD_INT 1
71740: NEG
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 3
71748: PUSH
71749: LD_INT 0
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: PUSH
71756: LD_INT 3
71758: PUSH
71759: LD_INT 1
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: LIST
71770: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71771: LD_ADDR_VAR 0 55
71775: PUSH
71776: LD_INT 3
71778: PUSH
71779: LD_INT 2
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 3
71788: PUSH
71789: LD_INT 3
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 2
71798: PUSH
71799: LD_INT 3
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: LIST
71810: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71811: LD_ADDR_VAR 0 56
71815: PUSH
71816: LD_INT 1
71818: PUSH
71819: LD_INT 3
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 0
71828: PUSH
71829: LD_INT 3
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 1
71838: NEG
71839: PUSH
71840: LD_INT 2
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: LIST
71851: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71852: LD_ADDR_VAR 0 57
71856: PUSH
71857: LD_INT 2
71859: NEG
71860: PUSH
71861: LD_INT 1
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_INT 3
71870: NEG
71871: PUSH
71872: LD_INT 0
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 3
71881: NEG
71882: PUSH
71883: LD_INT 1
71885: NEG
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: LIST
71895: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71896: LD_ADDR_VAR 0 58
71900: PUSH
71901: LD_INT 2
71903: NEG
71904: PUSH
71905: LD_INT 3
71907: NEG
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 3
71915: NEG
71916: PUSH
71917: LD_INT 2
71919: NEG
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 3
71927: NEG
71928: PUSH
71929: LD_INT 3
71931: NEG
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: LIST
71941: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71942: LD_ADDR_VAR 0 59
71946: PUSH
71947: LD_INT 1
71949: NEG
71950: PUSH
71951: LD_INT 2
71953: NEG
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 0
71961: PUSH
71962: LD_INT 2
71964: NEG
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 1
71972: PUSH
71973: LD_INT 1
71975: NEG
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: LIST
71985: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71986: LD_ADDR_VAR 0 60
71990: PUSH
71991: LD_INT 1
71993: PUSH
71994: LD_INT 1
71996: NEG
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PUSH
72002: LD_INT 2
72004: PUSH
72005: LD_INT 0
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: LD_INT 2
72014: PUSH
72015: LD_INT 1
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: LIST
72026: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72027: LD_ADDR_VAR 0 61
72031: PUSH
72032: LD_INT 2
72034: PUSH
72035: LD_INT 1
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 2
72044: PUSH
72045: LD_INT 2
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 1
72054: PUSH
72055: LD_INT 2
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: LIST
72066: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72067: LD_ADDR_VAR 0 62
72071: PUSH
72072: LD_INT 1
72074: PUSH
72075: LD_INT 2
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 0
72084: PUSH
72085: LD_INT 2
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: PUSH
72092: LD_INT 1
72094: NEG
72095: PUSH
72096: LD_INT 1
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: LIST
72107: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72108: LD_ADDR_VAR 0 63
72112: PUSH
72113: LD_INT 1
72115: NEG
72116: PUSH
72117: LD_INT 1
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 2
72126: NEG
72127: PUSH
72128: LD_INT 0
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_INT 2
72137: NEG
72138: PUSH
72139: LD_INT 1
72141: NEG
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: LIST
72151: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72152: LD_ADDR_VAR 0 64
72156: PUSH
72157: LD_INT 1
72159: NEG
72160: PUSH
72161: LD_INT 2
72163: NEG
72164: PUSH
72165: EMPTY
72166: LIST
72167: LIST
72168: PUSH
72169: LD_INT 2
72171: NEG
72172: PUSH
72173: LD_INT 1
72175: NEG
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PUSH
72181: LD_INT 2
72183: NEG
72184: PUSH
72185: LD_INT 2
72187: NEG
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: LIST
72197: ST_TO_ADDR
// end ; 2 :
72198: GO 75464
72200: LD_INT 2
72202: DOUBLE
72203: EQUAL
72204: IFTRUE 72208
72206: GO 75463
72208: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72209: LD_ADDR_VAR 0 29
72213: PUSH
72214: LD_INT 4
72216: PUSH
72217: LD_INT 0
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_INT 4
72226: PUSH
72227: LD_INT 1
72229: NEG
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 5
72237: PUSH
72238: LD_INT 0
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 5
72247: PUSH
72248: LD_INT 1
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 4
72257: PUSH
72258: LD_INT 1
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 3
72267: PUSH
72268: LD_INT 0
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 3
72277: PUSH
72278: LD_INT 1
72280: NEG
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: LD_INT 3
72288: PUSH
72289: LD_INT 2
72291: NEG
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 5
72299: PUSH
72300: LD_INT 2
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: LD_INT 3
72309: PUSH
72310: LD_INT 3
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 3
72319: PUSH
72320: LD_INT 2
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_INT 4
72329: PUSH
72330: LD_INT 3
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PUSH
72337: LD_INT 4
72339: PUSH
72340: LD_INT 4
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: PUSH
72347: LD_INT 3
72349: PUSH
72350: LD_INT 4
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_INT 2
72359: PUSH
72360: LD_INT 3
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: PUSH
72367: LD_INT 2
72369: PUSH
72370: LD_INT 2
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: PUSH
72377: LD_INT 4
72379: PUSH
72380: LD_INT 2
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 2
72389: PUSH
72390: LD_INT 4
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 0
72399: PUSH
72400: LD_INT 4
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 0
72409: PUSH
72410: LD_INT 3
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: LD_INT 1
72419: PUSH
72420: LD_INT 4
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 1
72429: PUSH
72430: LD_INT 5
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 0
72439: PUSH
72440: LD_INT 5
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 1
72449: NEG
72450: PUSH
72451: LD_INT 4
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: LD_INT 1
72460: NEG
72461: PUSH
72462: LD_INT 3
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: PUSH
72469: LD_INT 2
72471: PUSH
72472: LD_INT 5
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: PUSH
72479: LD_INT 2
72481: NEG
72482: PUSH
72483: LD_INT 3
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PUSH
72490: LD_INT 3
72492: NEG
72493: PUSH
72494: LD_INT 0
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: LD_INT 3
72503: NEG
72504: PUSH
72505: LD_INT 1
72507: NEG
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 2
72515: NEG
72516: PUSH
72517: LD_INT 0
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 2
72526: NEG
72527: PUSH
72528: LD_INT 1
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: PUSH
72535: LD_INT 3
72537: NEG
72538: PUSH
72539: LD_INT 1
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 4
72548: NEG
72549: PUSH
72550: LD_INT 0
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: LD_INT 4
72559: NEG
72560: PUSH
72561: LD_INT 1
72563: NEG
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 4
72571: NEG
72572: PUSH
72573: LD_INT 2
72575: NEG
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 2
72583: NEG
72584: PUSH
72585: LD_INT 2
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: PUSH
72592: LD_INT 4
72594: NEG
72595: PUSH
72596: LD_INT 4
72598: NEG
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 4
72606: NEG
72607: PUSH
72608: LD_INT 5
72610: NEG
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: LD_INT 3
72618: NEG
72619: PUSH
72620: LD_INT 4
72622: NEG
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 3
72630: NEG
72631: PUSH
72632: LD_INT 3
72634: NEG
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 4
72642: NEG
72643: PUSH
72644: LD_INT 3
72646: NEG
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: PUSH
72652: LD_INT 5
72654: NEG
72655: PUSH
72656: LD_INT 4
72658: NEG
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: PUSH
72664: LD_INT 5
72666: NEG
72667: PUSH
72668: LD_INT 5
72670: NEG
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: LD_INT 3
72678: NEG
72679: PUSH
72680: LD_INT 5
72682: NEG
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 5
72690: NEG
72691: PUSH
72692: LD_INT 3
72694: NEG
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: LIST
72704: LIST
72705: LIST
72706: LIST
72707: LIST
72708: LIST
72709: LIST
72710: LIST
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72747: LD_ADDR_VAR 0 30
72751: PUSH
72752: LD_INT 4
72754: PUSH
72755: LD_INT 4
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 4
72764: PUSH
72765: LD_INT 3
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: PUSH
72772: LD_INT 5
72774: PUSH
72775: LD_INT 4
72777: PUSH
72778: EMPTY
72779: LIST
72780: LIST
72781: PUSH
72782: LD_INT 5
72784: PUSH
72785: LD_INT 5
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: LD_INT 4
72794: PUSH
72795: LD_INT 5
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 3
72804: PUSH
72805: LD_INT 4
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: LD_INT 3
72814: PUSH
72815: LD_INT 3
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: PUSH
72822: LD_INT 5
72824: PUSH
72825: LD_INT 3
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: PUSH
72832: LD_INT 3
72834: PUSH
72835: LD_INT 5
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: LD_INT 0
72844: PUSH
72845: LD_INT 3
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 0
72854: PUSH
72855: LD_INT 2
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: PUSH
72862: LD_INT 1
72864: PUSH
72865: LD_INT 3
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: PUSH
72872: LD_INT 1
72874: PUSH
72875: LD_INT 4
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PUSH
72882: LD_INT 0
72884: PUSH
72885: LD_INT 4
72887: PUSH
72888: EMPTY
72889: LIST
72890: LIST
72891: PUSH
72892: LD_INT 1
72894: NEG
72895: PUSH
72896: LD_INT 3
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PUSH
72903: LD_INT 1
72905: NEG
72906: PUSH
72907: LD_INT 2
72909: PUSH
72910: EMPTY
72911: LIST
72912: LIST
72913: PUSH
72914: LD_INT 2
72916: PUSH
72917: LD_INT 4
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 2
72926: NEG
72927: PUSH
72928: LD_INT 2
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: PUSH
72935: LD_INT 4
72937: NEG
72938: PUSH
72939: LD_INT 0
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: LD_INT 4
72948: NEG
72949: PUSH
72950: LD_INT 1
72952: NEG
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 3
72960: NEG
72961: PUSH
72962: LD_INT 0
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: LD_INT 3
72971: NEG
72972: PUSH
72973: LD_INT 1
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: PUSH
72980: LD_INT 4
72982: NEG
72983: PUSH
72984: LD_INT 1
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PUSH
72991: LD_INT 5
72993: NEG
72994: PUSH
72995: LD_INT 0
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: PUSH
73002: LD_INT 5
73004: NEG
73005: PUSH
73006: LD_INT 1
73008: NEG
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PUSH
73014: LD_INT 5
73016: NEG
73017: PUSH
73018: LD_INT 2
73020: NEG
73021: PUSH
73022: EMPTY
73023: LIST
73024: LIST
73025: PUSH
73026: LD_INT 3
73028: NEG
73029: PUSH
73030: LD_INT 2
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: PUSH
73037: LD_INT 3
73039: NEG
73040: PUSH
73041: LD_INT 3
73043: NEG
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: PUSH
73049: LD_INT 3
73051: NEG
73052: PUSH
73053: LD_INT 4
73055: NEG
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 2
73063: NEG
73064: PUSH
73065: LD_INT 3
73067: NEG
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: LD_INT 2
73075: NEG
73076: PUSH
73077: LD_INT 2
73079: NEG
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 3
73087: NEG
73088: PUSH
73089: LD_INT 2
73091: NEG
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_INT 4
73099: NEG
73100: PUSH
73101: LD_INT 3
73103: NEG
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 4
73111: NEG
73112: PUSH
73113: LD_INT 4
73115: NEG
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: PUSH
73121: LD_INT 2
73123: NEG
73124: PUSH
73125: LD_INT 4
73127: NEG
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 4
73135: NEG
73136: PUSH
73137: LD_INT 2
73139: NEG
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 0
73147: PUSH
73148: LD_INT 4
73150: NEG
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: PUSH
73156: LD_INT 0
73158: PUSH
73159: LD_INT 5
73161: NEG
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: PUSH
73167: LD_INT 1
73169: PUSH
73170: LD_INT 4
73172: NEG
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: LD_INT 1
73180: PUSH
73181: LD_INT 3
73183: NEG
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: PUSH
73189: LD_INT 0
73191: PUSH
73192: LD_INT 3
73194: NEG
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: LD_INT 1
73202: NEG
73203: PUSH
73204: LD_INT 4
73206: NEG
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 1
73214: NEG
73215: PUSH
73216: LD_INT 5
73218: NEG
73219: PUSH
73220: EMPTY
73221: LIST
73222: LIST
73223: PUSH
73224: LD_INT 2
73226: PUSH
73227: LD_INT 3
73229: NEG
73230: PUSH
73231: EMPTY
73232: LIST
73233: LIST
73234: PUSH
73235: LD_INT 2
73237: NEG
73238: PUSH
73239: LD_INT 5
73241: NEG
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: LIST
73275: LIST
73276: LIST
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73294: LD_ADDR_VAR 0 31
73298: PUSH
73299: LD_INT 0
73301: PUSH
73302: LD_INT 4
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: PUSH
73309: LD_INT 0
73311: PUSH
73312: LD_INT 3
73314: PUSH
73315: EMPTY
73316: LIST
73317: LIST
73318: PUSH
73319: LD_INT 1
73321: PUSH
73322: LD_INT 4
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: PUSH
73329: LD_INT 1
73331: PUSH
73332: LD_INT 5
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: LD_INT 0
73341: PUSH
73342: LD_INT 5
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PUSH
73349: LD_INT 1
73351: NEG
73352: PUSH
73353: LD_INT 4
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: PUSH
73360: LD_INT 1
73362: NEG
73363: PUSH
73364: LD_INT 3
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: LD_INT 2
73373: PUSH
73374: LD_INT 5
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: LD_INT 2
73383: NEG
73384: PUSH
73385: LD_INT 3
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PUSH
73392: LD_INT 3
73394: NEG
73395: PUSH
73396: LD_INT 0
73398: PUSH
73399: EMPTY
73400: LIST
73401: LIST
73402: PUSH
73403: LD_INT 3
73405: NEG
73406: PUSH
73407: LD_INT 1
73409: NEG
73410: PUSH
73411: EMPTY
73412: LIST
73413: LIST
73414: PUSH
73415: LD_INT 2
73417: NEG
73418: PUSH
73419: LD_INT 0
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: PUSH
73426: LD_INT 2
73428: NEG
73429: PUSH
73430: LD_INT 1
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PUSH
73437: LD_INT 3
73439: NEG
73440: PUSH
73441: LD_INT 1
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PUSH
73448: LD_INT 4
73450: NEG
73451: PUSH
73452: LD_INT 0
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: PUSH
73459: LD_INT 4
73461: NEG
73462: PUSH
73463: LD_INT 1
73465: NEG
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 4
73473: NEG
73474: PUSH
73475: LD_INT 2
73477: NEG
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 2
73485: NEG
73486: PUSH
73487: LD_INT 2
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 4
73496: NEG
73497: PUSH
73498: LD_INT 4
73500: NEG
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PUSH
73506: LD_INT 4
73508: NEG
73509: PUSH
73510: LD_INT 5
73512: NEG
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: LD_INT 3
73520: NEG
73521: PUSH
73522: LD_INT 4
73524: NEG
73525: PUSH
73526: EMPTY
73527: LIST
73528: LIST
73529: PUSH
73530: LD_INT 3
73532: NEG
73533: PUSH
73534: LD_INT 3
73536: NEG
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 4
73544: NEG
73545: PUSH
73546: LD_INT 3
73548: NEG
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 5
73556: NEG
73557: PUSH
73558: LD_INT 4
73560: NEG
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: PUSH
73566: LD_INT 5
73568: NEG
73569: PUSH
73570: LD_INT 5
73572: NEG
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PUSH
73578: LD_INT 3
73580: NEG
73581: PUSH
73582: LD_INT 5
73584: NEG
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PUSH
73590: LD_INT 5
73592: NEG
73593: PUSH
73594: LD_INT 3
73596: NEG
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PUSH
73602: LD_INT 0
73604: PUSH
73605: LD_INT 3
73607: NEG
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: PUSH
73613: LD_INT 0
73615: PUSH
73616: LD_INT 4
73618: NEG
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: PUSH
73624: LD_INT 1
73626: PUSH
73627: LD_INT 3
73629: NEG
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 1
73637: PUSH
73638: LD_INT 2
73640: NEG
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: PUSH
73646: LD_INT 0
73648: PUSH
73649: LD_INT 2
73651: NEG
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: PUSH
73657: LD_INT 1
73659: NEG
73660: PUSH
73661: LD_INT 3
73663: NEG
73664: PUSH
73665: EMPTY
73666: LIST
73667: LIST
73668: PUSH
73669: LD_INT 1
73671: NEG
73672: PUSH
73673: LD_INT 4
73675: NEG
73676: PUSH
73677: EMPTY
73678: LIST
73679: LIST
73680: PUSH
73681: LD_INT 2
73683: PUSH
73684: LD_INT 2
73686: NEG
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: PUSH
73692: LD_INT 2
73694: NEG
73695: PUSH
73696: LD_INT 4
73698: NEG
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: LD_INT 4
73706: PUSH
73707: LD_INT 0
73709: PUSH
73710: EMPTY
73711: LIST
73712: LIST
73713: PUSH
73714: LD_INT 4
73716: PUSH
73717: LD_INT 1
73719: NEG
73720: PUSH
73721: EMPTY
73722: LIST
73723: LIST
73724: PUSH
73725: LD_INT 5
73727: PUSH
73728: LD_INT 0
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: PUSH
73735: LD_INT 5
73737: PUSH
73738: LD_INT 1
73740: PUSH
73741: EMPTY
73742: LIST
73743: LIST
73744: PUSH
73745: LD_INT 4
73747: PUSH
73748: LD_INT 1
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 3
73757: PUSH
73758: LD_INT 0
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PUSH
73765: LD_INT 3
73767: PUSH
73768: LD_INT 1
73770: NEG
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: PUSH
73776: LD_INT 3
73778: PUSH
73779: LD_INT 2
73781: NEG
73782: PUSH
73783: EMPTY
73784: LIST
73785: LIST
73786: PUSH
73787: LD_INT 5
73789: PUSH
73790: LD_INT 2
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: PUSH
73797: EMPTY
73798: LIST
73799: LIST
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: LIST
73830: LIST
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73844: LD_ADDR_VAR 0 32
73848: PUSH
73849: LD_INT 4
73851: NEG
73852: PUSH
73853: LD_INT 0
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: PUSH
73860: LD_INT 4
73862: NEG
73863: PUSH
73864: LD_INT 1
73866: NEG
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: LD_INT 3
73874: NEG
73875: PUSH
73876: LD_INT 0
73878: PUSH
73879: EMPTY
73880: LIST
73881: LIST
73882: PUSH
73883: LD_INT 3
73885: NEG
73886: PUSH
73887: LD_INT 1
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: LD_INT 4
73896: NEG
73897: PUSH
73898: LD_INT 1
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: PUSH
73905: LD_INT 5
73907: NEG
73908: PUSH
73909: LD_INT 0
73911: PUSH
73912: EMPTY
73913: LIST
73914: LIST
73915: PUSH
73916: LD_INT 5
73918: NEG
73919: PUSH
73920: LD_INT 1
73922: NEG
73923: PUSH
73924: EMPTY
73925: LIST
73926: LIST
73927: PUSH
73928: LD_INT 5
73930: NEG
73931: PUSH
73932: LD_INT 2
73934: NEG
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: PUSH
73940: LD_INT 3
73942: NEG
73943: PUSH
73944: LD_INT 2
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: PUSH
73951: LD_INT 3
73953: NEG
73954: PUSH
73955: LD_INT 3
73957: NEG
73958: PUSH
73959: EMPTY
73960: LIST
73961: LIST
73962: PUSH
73963: LD_INT 3
73965: NEG
73966: PUSH
73967: LD_INT 4
73969: NEG
73970: PUSH
73971: EMPTY
73972: LIST
73973: LIST
73974: PUSH
73975: LD_INT 2
73977: NEG
73978: PUSH
73979: LD_INT 3
73981: NEG
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: PUSH
73987: LD_INT 2
73989: NEG
73990: PUSH
73991: LD_INT 2
73993: NEG
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: LD_INT 3
74001: NEG
74002: PUSH
74003: LD_INT 2
74005: NEG
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: PUSH
74011: LD_INT 4
74013: NEG
74014: PUSH
74015: LD_INT 3
74017: NEG
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: PUSH
74023: LD_INT 4
74025: NEG
74026: PUSH
74027: LD_INT 4
74029: NEG
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: PUSH
74035: LD_INT 2
74037: NEG
74038: PUSH
74039: LD_INT 4
74041: NEG
74042: PUSH
74043: EMPTY
74044: LIST
74045: LIST
74046: PUSH
74047: LD_INT 4
74049: NEG
74050: PUSH
74051: LD_INT 2
74053: NEG
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: LD_INT 0
74061: PUSH
74062: LD_INT 4
74064: NEG
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: PUSH
74070: LD_INT 0
74072: PUSH
74073: LD_INT 5
74075: NEG
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: PUSH
74081: LD_INT 1
74083: PUSH
74084: LD_INT 4
74086: NEG
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: PUSH
74092: LD_INT 1
74094: PUSH
74095: LD_INT 3
74097: NEG
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PUSH
74103: LD_INT 0
74105: PUSH
74106: LD_INT 3
74108: NEG
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: PUSH
74114: LD_INT 1
74116: NEG
74117: PUSH
74118: LD_INT 4
74120: NEG
74121: PUSH
74122: EMPTY
74123: LIST
74124: LIST
74125: PUSH
74126: LD_INT 1
74128: NEG
74129: PUSH
74130: LD_INT 5
74132: NEG
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 2
74140: PUSH
74141: LD_INT 3
74143: NEG
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: LD_INT 2
74151: NEG
74152: PUSH
74153: LD_INT 5
74155: NEG
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: PUSH
74161: LD_INT 3
74163: PUSH
74164: LD_INT 0
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: PUSH
74171: LD_INT 3
74173: PUSH
74174: LD_INT 1
74176: NEG
74177: PUSH
74178: EMPTY
74179: LIST
74180: LIST
74181: PUSH
74182: LD_INT 4
74184: PUSH
74185: LD_INT 0
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: PUSH
74192: LD_INT 4
74194: PUSH
74195: LD_INT 1
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 3
74204: PUSH
74205: LD_INT 1
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PUSH
74212: LD_INT 2
74214: PUSH
74215: LD_INT 0
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: PUSH
74222: LD_INT 2
74224: PUSH
74225: LD_INT 1
74227: NEG
74228: PUSH
74229: EMPTY
74230: LIST
74231: LIST
74232: PUSH
74233: LD_INT 2
74235: PUSH
74236: LD_INT 2
74238: NEG
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: PUSH
74244: LD_INT 4
74246: PUSH
74247: LD_INT 2
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: PUSH
74254: LD_INT 4
74256: PUSH
74257: LD_INT 4
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: PUSH
74264: LD_INT 4
74266: PUSH
74267: LD_INT 3
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: PUSH
74274: LD_INT 5
74276: PUSH
74277: LD_INT 4
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: PUSH
74284: LD_INT 5
74286: PUSH
74287: LD_INT 5
74289: PUSH
74290: EMPTY
74291: LIST
74292: LIST
74293: PUSH
74294: LD_INT 4
74296: PUSH
74297: LD_INT 5
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: PUSH
74304: LD_INT 3
74306: PUSH
74307: LD_INT 4
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: PUSH
74314: LD_INT 3
74316: PUSH
74317: LD_INT 3
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PUSH
74324: LD_INT 5
74326: PUSH
74327: LD_INT 3
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: PUSH
74334: LD_INT 3
74336: PUSH
74337: LD_INT 5
74339: PUSH
74340: EMPTY
74341: LIST
74342: LIST
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: LIST
74377: LIST
74378: LIST
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: LIST
74390: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74391: LD_ADDR_VAR 0 33
74395: PUSH
74396: LD_INT 4
74398: NEG
74399: PUSH
74400: LD_INT 4
74402: NEG
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: PUSH
74408: LD_INT 4
74410: NEG
74411: PUSH
74412: LD_INT 5
74414: NEG
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: PUSH
74420: LD_INT 3
74422: NEG
74423: PUSH
74424: LD_INT 4
74426: NEG
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: PUSH
74432: LD_INT 3
74434: NEG
74435: PUSH
74436: LD_INT 3
74438: NEG
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PUSH
74444: LD_INT 4
74446: NEG
74447: PUSH
74448: LD_INT 3
74450: NEG
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PUSH
74456: LD_INT 5
74458: NEG
74459: PUSH
74460: LD_INT 4
74462: NEG
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: PUSH
74468: LD_INT 5
74470: NEG
74471: PUSH
74472: LD_INT 5
74474: NEG
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: PUSH
74480: LD_INT 3
74482: NEG
74483: PUSH
74484: LD_INT 5
74486: NEG
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: LD_INT 5
74494: NEG
74495: PUSH
74496: LD_INT 3
74498: NEG
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: PUSH
74504: LD_INT 0
74506: PUSH
74507: LD_INT 3
74509: NEG
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PUSH
74515: LD_INT 0
74517: PUSH
74518: LD_INT 4
74520: NEG
74521: PUSH
74522: EMPTY
74523: LIST
74524: LIST
74525: PUSH
74526: LD_INT 1
74528: PUSH
74529: LD_INT 3
74531: NEG
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: LD_INT 1
74539: PUSH
74540: LD_INT 2
74542: NEG
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: PUSH
74548: LD_INT 0
74550: PUSH
74551: LD_INT 2
74553: NEG
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: PUSH
74559: LD_INT 1
74561: NEG
74562: PUSH
74563: LD_INT 3
74565: NEG
74566: PUSH
74567: EMPTY
74568: LIST
74569: LIST
74570: PUSH
74571: LD_INT 1
74573: NEG
74574: PUSH
74575: LD_INT 4
74577: NEG
74578: PUSH
74579: EMPTY
74580: LIST
74581: LIST
74582: PUSH
74583: LD_INT 2
74585: PUSH
74586: LD_INT 2
74588: NEG
74589: PUSH
74590: EMPTY
74591: LIST
74592: LIST
74593: PUSH
74594: LD_INT 2
74596: NEG
74597: PUSH
74598: LD_INT 4
74600: NEG
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: PUSH
74606: LD_INT 4
74608: PUSH
74609: LD_INT 0
74611: PUSH
74612: EMPTY
74613: LIST
74614: LIST
74615: PUSH
74616: LD_INT 4
74618: PUSH
74619: LD_INT 1
74621: NEG
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: PUSH
74627: LD_INT 5
74629: PUSH
74630: LD_INT 0
74632: PUSH
74633: EMPTY
74634: LIST
74635: LIST
74636: PUSH
74637: LD_INT 5
74639: PUSH
74640: LD_INT 1
74642: PUSH
74643: EMPTY
74644: LIST
74645: LIST
74646: PUSH
74647: LD_INT 4
74649: PUSH
74650: LD_INT 1
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: PUSH
74657: LD_INT 3
74659: PUSH
74660: LD_INT 0
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: PUSH
74667: LD_INT 3
74669: PUSH
74670: LD_INT 1
74672: NEG
74673: PUSH
74674: EMPTY
74675: LIST
74676: LIST
74677: PUSH
74678: LD_INT 3
74680: PUSH
74681: LD_INT 2
74683: NEG
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: PUSH
74689: LD_INT 5
74691: PUSH
74692: LD_INT 2
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: PUSH
74699: LD_INT 3
74701: PUSH
74702: LD_INT 3
74704: PUSH
74705: EMPTY
74706: LIST
74707: LIST
74708: PUSH
74709: LD_INT 3
74711: PUSH
74712: LD_INT 2
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: PUSH
74719: LD_INT 4
74721: PUSH
74722: LD_INT 3
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: PUSH
74729: LD_INT 4
74731: PUSH
74732: LD_INT 4
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: PUSH
74739: LD_INT 3
74741: PUSH
74742: LD_INT 4
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: PUSH
74749: LD_INT 2
74751: PUSH
74752: LD_INT 3
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: PUSH
74759: LD_INT 2
74761: PUSH
74762: LD_INT 2
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: PUSH
74769: LD_INT 4
74771: PUSH
74772: LD_INT 2
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: PUSH
74779: LD_INT 2
74781: PUSH
74782: LD_INT 4
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: PUSH
74789: LD_INT 0
74791: PUSH
74792: LD_INT 4
74794: PUSH
74795: EMPTY
74796: LIST
74797: LIST
74798: PUSH
74799: LD_INT 0
74801: PUSH
74802: LD_INT 3
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: PUSH
74809: LD_INT 1
74811: PUSH
74812: LD_INT 4
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: PUSH
74819: LD_INT 1
74821: PUSH
74822: LD_INT 5
74824: PUSH
74825: EMPTY
74826: LIST
74827: LIST
74828: PUSH
74829: LD_INT 0
74831: PUSH
74832: LD_INT 5
74834: PUSH
74835: EMPTY
74836: LIST
74837: LIST
74838: PUSH
74839: LD_INT 1
74841: NEG
74842: PUSH
74843: LD_INT 4
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: PUSH
74850: LD_INT 1
74852: NEG
74853: PUSH
74854: LD_INT 3
74856: PUSH
74857: EMPTY
74858: LIST
74859: LIST
74860: PUSH
74861: LD_INT 2
74863: PUSH
74864: LD_INT 5
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PUSH
74871: LD_INT 2
74873: NEG
74874: PUSH
74875: LD_INT 3
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: LIST
74889: LIST
74890: LIST
74891: LIST
74892: LIST
74893: LIST
74894: LIST
74895: LIST
74896: LIST
74897: LIST
74898: LIST
74899: LIST
74900: LIST
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: LIST
74908: LIST
74909: LIST
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74929: LD_ADDR_VAR 0 34
74933: PUSH
74934: LD_INT 0
74936: PUSH
74937: LD_INT 4
74939: NEG
74940: PUSH
74941: EMPTY
74942: LIST
74943: LIST
74944: PUSH
74945: LD_INT 0
74947: PUSH
74948: LD_INT 5
74950: NEG
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PUSH
74956: LD_INT 1
74958: PUSH
74959: LD_INT 4
74961: NEG
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PUSH
74967: LD_INT 1
74969: PUSH
74970: LD_INT 3
74972: NEG
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: PUSH
74978: LD_INT 0
74980: PUSH
74981: LD_INT 3
74983: NEG
74984: PUSH
74985: EMPTY
74986: LIST
74987: LIST
74988: PUSH
74989: LD_INT 1
74991: NEG
74992: PUSH
74993: LD_INT 4
74995: NEG
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: PUSH
75001: LD_INT 1
75003: NEG
75004: PUSH
75005: LD_INT 5
75007: NEG
75008: PUSH
75009: EMPTY
75010: LIST
75011: LIST
75012: PUSH
75013: LD_INT 2
75015: PUSH
75016: LD_INT 3
75018: NEG
75019: PUSH
75020: EMPTY
75021: LIST
75022: LIST
75023: PUSH
75024: LD_INT 2
75026: NEG
75027: PUSH
75028: LD_INT 5
75030: NEG
75031: PUSH
75032: EMPTY
75033: LIST
75034: LIST
75035: PUSH
75036: LD_INT 3
75038: PUSH
75039: LD_INT 0
75041: PUSH
75042: EMPTY
75043: LIST
75044: LIST
75045: PUSH
75046: LD_INT 3
75048: PUSH
75049: LD_INT 1
75051: NEG
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PUSH
75057: LD_INT 4
75059: PUSH
75060: LD_INT 0
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: PUSH
75067: LD_INT 4
75069: PUSH
75070: LD_INT 1
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: PUSH
75077: LD_INT 3
75079: PUSH
75080: LD_INT 1
75082: PUSH
75083: EMPTY
75084: LIST
75085: LIST
75086: PUSH
75087: LD_INT 2
75089: PUSH
75090: LD_INT 0
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: PUSH
75097: LD_INT 2
75099: PUSH
75100: LD_INT 1
75102: NEG
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: PUSH
75108: LD_INT 2
75110: PUSH
75111: LD_INT 2
75113: NEG
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: PUSH
75119: LD_INT 4
75121: PUSH
75122: LD_INT 2
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: PUSH
75129: LD_INT 4
75131: PUSH
75132: LD_INT 4
75134: PUSH
75135: EMPTY
75136: LIST
75137: LIST
75138: PUSH
75139: LD_INT 4
75141: PUSH
75142: LD_INT 3
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: PUSH
75149: LD_INT 5
75151: PUSH
75152: LD_INT 4
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 5
75161: PUSH
75162: LD_INT 5
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: PUSH
75169: LD_INT 4
75171: PUSH
75172: LD_INT 5
75174: PUSH
75175: EMPTY
75176: LIST
75177: LIST
75178: PUSH
75179: LD_INT 3
75181: PUSH
75182: LD_INT 4
75184: PUSH
75185: EMPTY
75186: LIST
75187: LIST
75188: PUSH
75189: LD_INT 3
75191: PUSH
75192: LD_INT 3
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: PUSH
75199: LD_INT 5
75201: PUSH
75202: LD_INT 3
75204: PUSH
75205: EMPTY
75206: LIST
75207: LIST
75208: PUSH
75209: LD_INT 3
75211: PUSH
75212: LD_INT 5
75214: PUSH
75215: EMPTY
75216: LIST
75217: LIST
75218: PUSH
75219: LD_INT 0
75221: PUSH
75222: LD_INT 3
75224: PUSH
75225: EMPTY
75226: LIST
75227: LIST
75228: PUSH
75229: LD_INT 0
75231: PUSH
75232: LD_INT 2
75234: PUSH
75235: EMPTY
75236: LIST
75237: LIST
75238: PUSH
75239: LD_INT 1
75241: PUSH
75242: LD_INT 3
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: PUSH
75249: LD_INT 1
75251: PUSH
75252: LD_INT 4
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: PUSH
75259: LD_INT 0
75261: PUSH
75262: LD_INT 4
75264: PUSH
75265: EMPTY
75266: LIST
75267: LIST
75268: PUSH
75269: LD_INT 1
75271: NEG
75272: PUSH
75273: LD_INT 3
75275: PUSH
75276: EMPTY
75277: LIST
75278: LIST
75279: PUSH
75280: LD_INT 1
75282: NEG
75283: PUSH
75284: LD_INT 2
75286: PUSH
75287: EMPTY
75288: LIST
75289: LIST
75290: PUSH
75291: LD_INT 2
75293: PUSH
75294: LD_INT 4
75296: PUSH
75297: EMPTY
75298: LIST
75299: LIST
75300: PUSH
75301: LD_INT 2
75303: NEG
75304: PUSH
75305: LD_INT 2
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: LD_INT 4
75314: NEG
75315: PUSH
75316: LD_INT 0
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: PUSH
75323: LD_INT 4
75325: NEG
75326: PUSH
75327: LD_INT 1
75329: NEG
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: PUSH
75335: LD_INT 3
75337: NEG
75338: PUSH
75339: LD_INT 0
75341: PUSH
75342: EMPTY
75343: LIST
75344: LIST
75345: PUSH
75346: LD_INT 3
75348: NEG
75349: PUSH
75350: LD_INT 1
75352: PUSH
75353: EMPTY
75354: LIST
75355: LIST
75356: PUSH
75357: LD_INT 4
75359: NEG
75360: PUSH
75361: LD_INT 1
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: PUSH
75368: LD_INT 5
75370: NEG
75371: PUSH
75372: LD_INT 0
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: PUSH
75379: LD_INT 5
75381: NEG
75382: PUSH
75383: LD_INT 1
75385: NEG
75386: PUSH
75387: EMPTY
75388: LIST
75389: LIST
75390: PUSH
75391: LD_INT 5
75393: NEG
75394: PUSH
75395: LD_INT 2
75397: NEG
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: PUSH
75403: LD_INT 3
75405: NEG
75406: PUSH
75407: LD_INT 2
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: PUSH
75414: EMPTY
75415: LIST
75416: LIST
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: ST_TO_ADDR
// end ; end ;
75461: GO 75464
75463: POP
// case btype of b_depot , b_warehouse :
75464: LD_VAR 0 1
75468: PUSH
75469: LD_INT 0
75471: DOUBLE
75472: EQUAL
75473: IFTRUE 75483
75475: LD_INT 1
75477: DOUBLE
75478: EQUAL
75479: IFTRUE 75483
75481: GO 75684
75483: POP
// case nation of nation_american :
75484: LD_VAR 0 5
75488: PUSH
75489: LD_INT 1
75491: DOUBLE
75492: EQUAL
75493: IFTRUE 75497
75495: GO 75553
75497: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75498: LD_ADDR_VAR 0 9
75502: PUSH
75503: LD_VAR 0 11
75507: PUSH
75508: LD_VAR 0 12
75512: PUSH
75513: LD_VAR 0 13
75517: PUSH
75518: LD_VAR 0 14
75522: PUSH
75523: LD_VAR 0 15
75527: PUSH
75528: LD_VAR 0 16
75532: PUSH
75533: EMPTY
75534: LIST
75535: LIST
75536: LIST
75537: LIST
75538: LIST
75539: LIST
75540: PUSH
75541: LD_VAR 0 4
75545: PUSH
75546: LD_INT 1
75548: PLUS
75549: ARRAY
75550: ST_TO_ADDR
75551: GO 75682
75553: LD_INT 2
75555: DOUBLE
75556: EQUAL
75557: IFTRUE 75561
75559: GO 75617
75561: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75562: LD_ADDR_VAR 0 9
75566: PUSH
75567: LD_VAR 0 17
75571: PUSH
75572: LD_VAR 0 18
75576: PUSH
75577: LD_VAR 0 19
75581: PUSH
75582: LD_VAR 0 20
75586: PUSH
75587: LD_VAR 0 21
75591: PUSH
75592: LD_VAR 0 22
75596: PUSH
75597: EMPTY
75598: LIST
75599: LIST
75600: LIST
75601: LIST
75602: LIST
75603: LIST
75604: PUSH
75605: LD_VAR 0 4
75609: PUSH
75610: LD_INT 1
75612: PLUS
75613: ARRAY
75614: ST_TO_ADDR
75615: GO 75682
75617: LD_INT 3
75619: DOUBLE
75620: EQUAL
75621: IFTRUE 75625
75623: GO 75681
75625: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75626: LD_ADDR_VAR 0 9
75630: PUSH
75631: LD_VAR 0 23
75635: PUSH
75636: LD_VAR 0 24
75640: PUSH
75641: LD_VAR 0 25
75645: PUSH
75646: LD_VAR 0 26
75650: PUSH
75651: LD_VAR 0 27
75655: PUSH
75656: LD_VAR 0 28
75660: PUSH
75661: EMPTY
75662: LIST
75663: LIST
75664: LIST
75665: LIST
75666: LIST
75667: LIST
75668: PUSH
75669: LD_VAR 0 4
75673: PUSH
75674: LD_INT 1
75676: PLUS
75677: ARRAY
75678: ST_TO_ADDR
75679: GO 75682
75681: POP
75682: GO 76237
75684: LD_INT 2
75686: DOUBLE
75687: EQUAL
75688: IFTRUE 75698
75690: LD_INT 3
75692: DOUBLE
75693: EQUAL
75694: IFTRUE 75698
75696: GO 75754
75698: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75699: LD_ADDR_VAR 0 9
75703: PUSH
75704: LD_VAR 0 29
75708: PUSH
75709: LD_VAR 0 30
75713: PUSH
75714: LD_VAR 0 31
75718: PUSH
75719: LD_VAR 0 32
75723: PUSH
75724: LD_VAR 0 33
75728: PUSH
75729: LD_VAR 0 34
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: LIST
75740: LIST
75741: PUSH
75742: LD_VAR 0 4
75746: PUSH
75747: LD_INT 1
75749: PLUS
75750: ARRAY
75751: ST_TO_ADDR
75752: GO 76237
75754: LD_INT 16
75756: DOUBLE
75757: EQUAL
75758: IFTRUE 75816
75760: LD_INT 17
75762: DOUBLE
75763: EQUAL
75764: IFTRUE 75816
75766: LD_INT 18
75768: DOUBLE
75769: EQUAL
75770: IFTRUE 75816
75772: LD_INT 19
75774: DOUBLE
75775: EQUAL
75776: IFTRUE 75816
75778: LD_INT 22
75780: DOUBLE
75781: EQUAL
75782: IFTRUE 75816
75784: LD_INT 20
75786: DOUBLE
75787: EQUAL
75788: IFTRUE 75816
75790: LD_INT 21
75792: DOUBLE
75793: EQUAL
75794: IFTRUE 75816
75796: LD_INT 23
75798: DOUBLE
75799: EQUAL
75800: IFTRUE 75816
75802: LD_INT 24
75804: DOUBLE
75805: EQUAL
75806: IFTRUE 75816
75808: LD_INT 25
75810: DOUBLE
75811: EQUAL
75812: IFTRUE 75816
75814: GO 75872
75816: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75817: LD_ADDR_VAR 0 9
75821: PUSH
75822: LD_VAR 0 35
75826: PUSH
75827: LD_VAR 0 36
75831: PUSH
75832: LD_VAR 0 37
75836: PUSH
75837: LD_VAR 0 38
75841: PUSH
75842: LD_VAR 0 39
75846: PUSH
75847: LD_VAR 0 40
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: LIST
75856: LIST
75857: LIST
75858: LIST
75859: PUSH
75860: LD_VAR 0 4
75864: PUSH
75865: LD_INT 1
75867: PLUS
75868: ARRAY
75869: ST_TO_ADDR
75870: GO 76237
75872: LD_INT 6
75874: DOUBLE
75875: EQUAL
75876: IFTRUE 75928
75878: LD_INT 7
75880: DOUBLE
75881: EQUAL
75882: IFTRUE 75928
75884: LD_INT 8
75886: DOUBLE
75887: EQUAL
75888: IFTRUE 75928
75890: LD_INT 13
75892: DOUBLE
75893: EQUAL
75894: IFTRUE 75928
75896: LD_INT 12
75898: DOUBLE
75899: EQUAL
75900: IFTRUE 75928
75902: LD_INT 15
75904: DOUBLE
75905: EQUAL
75906: IFTRUE 75928
75908: LD_INT 11
75910: DOUBLE
75911: EQUAL
75912: IFTRUE 75928
75914: LD_INT 14
75916: DOUBLE
75917: EQUAL
75918: IFTRUE 75928
75920: LD_INT 10
75922: DOUBLE
75923: EQUAL
75924: IFTRUE 75928
75926: GO 75984
75928: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75929: LD_ADDR_VAR 0 9
75933: PUSH
75934: LD_VAR 0 41
75938: PUSH
75939: LD_VAR 0 42
75943: PUSH
75944: LD_VAR 0 43
75948: PUSH
75949: LD_VAR 0 44
75953: PUSH
75954: LD_VAR 0 45
75958: PUSH
75959: LD_VAR 0 46
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: PUSH
75972: LD_VAR 0 4
75976: PUSH
75977: LD_INT 1
75979: PLUS
75980: ARRAY
75981: ST_TO_ADDR
75982: GO 76237
75984: LD_INT 36
75986: DOUBLE
75987: EQUAL
75988: IFTRUE 75992
75990: GO 76048
75992: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75993: LD_ADDR_VAR 0 9
75997: PUSH
75998: LD_VAR 0 47
76002: PUSH
76003: LD_VAR 0 48
76007: PUSH
76008: LD_VAR 0 49
76012: PUSH
76013: LD_VAR 0 50
76017: PUSH
76018: LD_VAR 0 51
76022: PUSH
76023: LD_VAR 0 52
76027: PUSH
76028: EMPTY
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: LIST
76035: PUSH
76036: LD_VAR 0 4
76040: PUSH
76041: LD_INT 1
76043: PLUS
76044: ARRAY
76045: ST_TO_ADDR
76046: GO 76237
76048: LD_INT 4
76050: DOUBLE
76051: EQUAL
76052: IFTRUE 76074
76054: LD_INT 5
76056: DOUBLE
76057: EQUAL
76058: IFTRUE 76074
76060: LD_INT 34
76062: DOUBLE
76063: EQUAL
76064: IFTRUE 76074
76066: LD_INT 37
76068: DOUBLE
76069: EQUAL
76070: IFTRUE 76074
76072: GO 76130
76074: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
76075: LD_ADDR_VAR 0 9
76079: PUSH
76080: LD_VAR 0 53
76084: PUSH
76085: LD_VAR 0 54
76089: PUSH
76090: LD_VAR 0 55
76094: PUSH
76095: LD_VAR 0 56
76099: PUSH
76100: LD_VAR 0 57
76104: PUSH
76105: LD_VAR 0 58
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: LIST
76114: LIST
76115: LIST
76116: LIST
76117: PUSH
76118: LD_VAR 0 4
76122: PUSH
76123: LD_INT 1
76125: PLUS
76126: ARRAY
76127: ST_TO_ADDR
76128: GO 76237
76130: LD_INT 31
76132: DOUBLE
76133: EQUAL
76134: IFTRUE 76180
76136: LD_INT 32
76138: DOUBLE
76139: EQUAL
76140: IFTRUE 76180
76142: LD_INT 33
76144: DOUBLE
76145: EQUAL
76146: IFTRUE 76180
76148: LD_INT 27
76150: DOUBLE
76151: EQUAL
76152: IFTRUE 76180
76154: LD_INT 26
76156: DOUBLE
76157: EQUAL
76158: IFTRUE 76180
76160: LD_INT 28
76162: DOUBLE
76163: EQUAL
76164: IFTRUE 76180
76166: LD_INT 29
76168: DOUBLE
76169: EQUAL
76170: IFTRUE 76180
76172: LD_INT 30
76174: DOUBLE
76175: EQUAL
76176: IFTRUE 76180
76178: GO 76236
76180: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76181: LD_ADDR_VAR 0 9
76185: PUSH
76186: LD_VAR 0 59
76190: PUSH
76191: LD_VAR 0 60
76195: PUSH
76196: LD_VAR 0 61
76200: PUSH
76201: LD_VAR 0 62
76205: PUSH
76206: LD_VAR 0 63
76210: PUSH
76211: LD_VAR 0 64
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: PUSH
76224: LD_VAR 0 4
76228: PUSH
76229: LD_INT 1
76231: PLUS
76232: ARRAY
76233: ST_TO_ADDR
76234: GO 76237
76236: POP
// temp_list2 = [ ] ;
76237: LD_ADDR_VAR 0 10
76241: PUSH
76242: EMPTY
76243: ST_TO_ADDR
// for i in temp_list do
76244: LD_ADDR_VAR 0 8
76248: PUSH
76249: LD_VAR 0 9
76253: PUSH
76254: FOR_IN
76255: IFFALSE 76307
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76257: LD_ADDR_VAR 0 10
76261: PUSH
76262: LD_VAR 0 10
76266: PUSH
76267: LD_VAR 0 8
76271: PUSH
76272: LD_INT 1
76274: ARRAY
76275: PUSH
76276: LD_VAR 0 2
76280: PLUS
76281: PUSH
76282: LD_VAR 0 8
76286: PUSH
76287: LD_INT 2
76289: ARRAY
76290: PUSH
76291: LD_VAR 0 3
76295: PLUS
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: PUSH
76301: EMPTY
76302: LIST
76303: ADD
76304: ST_TO_ADDR
76305: GO 76254
76307: POP
76308: POP
// result = temp_list2 ;
76309: LD_ADDR_VAR 0 7
76313: PUSH
76314: LD_VAR 0 10
76318: ST_TO_ADDR
// end ;
76319: LD_VAR 0 7
76323: RET
// export function EnemyInRange ( unit , dist ) ; begin
76324: LD_INT 0
76326: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76327: LD_ADDR_VAR 0 3
76331: PUSH
76332: LD_VAR 0 1
76336: PPUSH
76337: CALL_OW 255
76341: PPUSH
76342: LD_VAR 0 1
76346: PPUSH
76347: CALL_OW 250
76351: PPUSH
76352: LD_VAR 0 1
76356: PPUSH
76357: CALL_OW 251
76361: PPUSH
76362: LD_VAR 0 2
76366: PPUSH
76367: CALL 49581 0 4
76371: PUSH
76372: LD_INT 4
76374: ARRAY
76375: ST_TO_ADDR
// end ;
76376: LD_VAR 0 3
76380: RET
// export function PlayerSeeMe ( unit ) ; begin
76381: LD_INT 0
76383: PPUSH
// result := See ( your_side , unit ) ;
76384: LD_ADDR_VAR 0 2
76388: PUSH
76389: LD_OWVAR 2
76393: PPUSH
76394: LD_VAR 0 1
76398: PPUSH
76399: CALL_OW 292
76403: ST_TO_ADDR
// end ;
76404: LD_VAR 0 2
76408: RET
// export function ReverseDir ( unit ) ; begin
76409: LD_INT 0
76411: PPUSH
// if not unit then
76412: LD_VAR 0 1
76416: NOT
76417: IFFALSE 76421
// exit ;
76419: GO 76444
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76421: LD_ADDR_VAR 0 2
76425: PUSH
76426: LD_VAR 0 1
76430: PPUSH
76431: CALL_OW 254
76435: PUSH
76436: LD_INT 3
76438: PLUS
76439: PUSH
76440: LD_INT 6
76442: MOD
76443: ST_TO_ADDR
// end ;
76444: LD_VAR 0 2
76448: RET
// export function ReverseArray ( array ) ; var i ; begin
76449: LD_INT 0
76451: PPUSH
76452: PPUSH
// if not array then
76453: LD_VAR 0 1
76457: NOT
76458: IFFALSE 76462
// exit ;
76460: GO 76517
// result := [ ] ;
76462: LD_ADDR_VAR 0 2
76466: PUSH
76467: EMPTY
76468: ST_TO_ADDR
// for i := array downto 1 do
76469: LD_ADDR_VAR 0 3
76473: PUSH
76474: DOUBLE
76475: LD_VAR 0 1
76479: INC
76480: ST_TO_ADDR
76481: LD_INT 1
76483: PUSH
76484: FOR_DOWNTO
76485: IFFALSE 76515
// result := Join ( result , array [ i ] ) ;
76487: LD_ADDR_VAR 0 2
76491: PUSH
76492: LD_VAR 0 2
76496: PPUSH
76497: LD_VAR 0 1
76501: PUSH
76502: LD_VAR 0 3
76506: ARRAY
76507: PPUSH
76508: CALL 81369 0 2
76512: ST_TO_ADDR
76513: GO 76484
76515: POP
76516: POP
// end ;
76517: LD_VAR 0 2
76521: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
76522: LD_INT 0
76524: PPUSH
76525: PPUSH
76526: PPUSH
76527: PPUSH
76528: PPUSH
76529: PPUSH
// if not unit or not hexes then
76530: LD_VAR 0 1
76534: NOT
76535: IFTRUE 76544
76537: PUSH
76538: LD_VAR 0 2
76542: NOT
76543: OR
76544: IFFALSE 76548
// exit ;
76546: GO 76671
// dist := 9999 ;
76548: LD_ADDR_VAR 0 5
76552: PUSH
76553: LD_INT 9999
76555: ST_TO_ADDR
// for i = 1 to hexes do
76556: LD_ADDR_VAR 0 4
76560: PUSH
76561: DOUBLE
76562: LD_INT 1
76564: DEC
76565: ST_TO_ADDR
76566: LD_VAR 0 2
76570: PUSH
76571: FOR_TO
76572: IFFALSE 76659
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76574: LD_ADDR_VAR 0 6
76578: PUSH
76579: LD_VAR 0 1
76583: PPUSH
76584: LD_VAR 0 2
76588: PUSH
76589: LD_VAR 0 4
76593: ARRAY
76594: PUSH
76595: LD_INT 1
76597: ARRAY
76598: PPUSH
76599: LD_VAR 0 2
76603: PUSH
76604: LD_VAR 0 4
76608: ARRAY
76609: PUSH
76610: LD_INT 2
76612: ARRAY
76613: PPUSH
76614: CALL_OW 297
76618: ST_TO_ADDR
// if tdist < dist then
76619: LD_VAR 0 6
76623: PUSH
76624: LD_VAR 0 5
76628: LESS
76629: IFFALSE 76657
// begin hex := hexes [ i ] ;
76631: LD_ADDR_VAR 0 8
76635: PUSH
76636: LD_VAR 0 2
76640: PUSH
76641: LD_VAR 0 4
76645: ARRAY
76646: ST_TO_ADDR
// dist := tdist ;
76647: LD_ADDR_VAR 0 5
76651: PUSH
76652: LD_VAR 0 6
76656: ST_TO_ADDR
// end ; end ;
76657: GO 76571
76659: POP
76660: POP
// result := hex ;
76661: LD_ADDR_VAR 0 3
76665: PUSH
76666: LD_VAR 0 8
76670: ST_TO_ADDR
// end ;
76671: LD_VAR 0 3
76675: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76676: LD_INT 0
76678: PPUSH
76679: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76680: LD_VAR 0 1
76684: NOT
76685: IFTRUE 76724
76687: PUSH
76688: LD_VAR 0 1
76692: PUSH
76693: LD_INT 21
76695: PUSH
76696: LD_INT 2
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: PUSH
76703: LD_INT 23
76705: PUSH
76706: LD_INT 2
76708: PUSH
76709: EMPTY
76710: LIST
76711: LIST
76712: PUSH
76713: EMPTY
76714: LIST
76715: LIST
76716: PPUSH
76717: CALL_OW 69
76721: IN
76722: NOT
76723: OR
76724: IFFALSE 76728
// exit ;
76726: GO 76775
// for i = 1 to 3 do
76728: LD_ADDR_VAR 0 3
76732: PUSH
76733: DOUBLE
76734: LD_INT 1
76736: DEC
76737: ST_TO_ADDR
76738: LD_INT 3
76740: PUSH
76741: FOR_TO
76742: IFFALSE 76773
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76744: LD_VAR 0 1
76748: PPUSH
76749: CALL_OW 250
76753: PPUSH
76754: LD_VAR 0 1
76758: PPUSH
76759: CALL_OW 251
76763: PPUSH
76764: LD_INT 1
76766: PPUSH
76767: CALL_OW 453
76771: GO 76741
76773: POP
76774: POP
// end ;
76775: LD_VAR 0 2
76779: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76780: LD_INT 0
76782: PPUSH
76783: PPUSH
76784: PPUSH
76785: PPUSH
76786: PPUSH
76787: PPUSH
// if not unit or not enemy_unit then
76788: LD_VAR 0 1
76792: NOT
76793: IFTRUE 76802
76795: PUSH
76796: LD_VAR 0 2
76800: NOT
76801: OR
76802: IFFALSE 76806
// exit ;
76804: GO 77287
// if GetLives ( i ) < 250 then
76806: LD_VAR 0 4
76810: PPUSH
76811: CALL_OW 256
76815: PUSH
76816: LD_INT 250
76818: LESS
76819: IFFALSE 76832
// begin ComAutodestruct ( i ) ;
76821: LD_VAR 0 4
76825: PPUSH
76826: CALL 76676 0 1
// exit ;
76830: GO 77287
// end ; x := GetX ( enemy_unit ) ;
76832: LD_ADDR_VAR 0 7
76836: PUSH
76837: LD_VAR 0 2
76841: PPUSH
76842: CALL_OW 250
76846: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76847: LD_ADDR_VAR 0 8
76851: PUSH
76852: LD_VAR 0 2
76856: PPUSH
76857: CALL_OW 251
76861: ST_TO_ADDR
// if not x or not y then
76862: LD_VAR 0 7
76866: NOT
76867: IFTRUE 76876
76869: PUSH
76870: LD_VAR 0 8
76874: NOT
76875: OR
76876: IFFALSE 76880
// exit ;
76878: GO 77287
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76880: LD_ADDR_VAR 0 6
76884: PUSH
76885: LD_VAR 0 7
76889: PPUSH
76890: LD_INT 0
76892: PPUSH
76893: LD_INT 4
76895: PPUSH
76896: CALL_OW 272
76900: PUSH
76901: LD_VAR 0 8
76905: PPUSH
76906: LD_INT 0
76908: PPUSH
76909: LD_INT 4
76911: PPUSH
76912: CALL_OW 273
76916: PUSH
76917: EMPTY
76918: LIST
76919: LIST
76920: PUSH
76921: LD_VAR 0 7
76925: PPUSH
76926: LD_INT 1
76928: PPUSH
76929: LD_INT 4
76931: PPUSH
76932: CALL_OW 272
76936: PUSH
76937: LD_VAR 0 8
76941: PPUSH
76942: LD_INT 1
76944: PPUSH
76945: LD_INT 4
76947: PPUSH
76948: CALL_OW 273
76952: PUSH
76953: EMPTY
76954: LIST
76955: LIST
76956: PUSH
76957: LD_VAR 0 7
76961: PPUSH
76962: LD_INT 2
76964: PPUSH
76965: LD_INT 4
76967: PPUSH
76968: CALL_OW 272
76972: PUSH
76973: LD_VAR 0 8
76977: PPUSH
76978: LD_INT 2
76980: PPUSH
76981: LD_INT 4
76983: PPUSH
76984: CALL_OW 273
76988: PUSH
76989: EMPTY
76990: LIST
76991: LIST
76992: PUSH
76993: LD_VAR 0 7
76997: PPUSH
76998: LD_INT 3
77000: PPUSH
77001: LD_INT 4
77003: PPUSH
77004: CALL_OW 272
77008: PUSH
77009: LD_VAR 0 8
77013: PPUSH
77014: LD_INT 3
77016: PPUSH
77017: LD_INT 4
77019: PPUSH
77020: CALL_OW 273
77024: PUSH
77025: EMPTY
77026: LIST
77027: LIST
77028: PUSH
77029: LD_VAR 0 7
77033: PPUSH
77034: LD_INT 4
77036: PPUSH
77037: LD_INT 4
77039: PPUSH
77040: CALL_OW 272
77044: PUSH
77045: LD_VAR 0 8
77049: PPUSH
77050: LD_INT 4
77052: PPUSH
77053: LD_INT 4
77055: PPUSH
77056: CALL_OW 273
77060: PUSH
77061: EMPTY
77062: LIST
77063: LIST
77064: PUSH
77065: LD_VAR 0 7
77069: PPUSH
77070: LD_INT 5
77072: PPUSH
77073: LD_INT 4
77075: PPUSH
77076: CALL_OW 272
77080: PUSH
77081: LD_VAR 0 8
77085: PPUSH
77086: LD_INT 5
77088: PPUSH
77089: LD_INT 4
77091: PPUSH
77092: CALL_OW 273
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: PUSH
77101: EMPTY
77102: LIST
77103: LIST
77104: LIST
77105: LIST
77106: LIST
77107: LIST
77108: ST_TO_ADDR
// for i = tmp downto 1 do
77109: LD_ADDR_VAR 0 4
77113: PUSH
77114: DOUBLE
77115: LD_VAR 0 6
77119: INC
77120: ST_TO_ADDR
77121: LD_INT 1
77123: PUSH
77124: FOR_DOWNTO
77125: IFFALSE 77228
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77127: LD_VAR 0 6
77131: PUSH
77132: LD_VAR 0 4
77136: ARRAY
77137: PUSH
77138: LD_INT 1
77140: ARRAY
77141: PPUSH
77142: LD_VAR 0 6
77146: PUSH
77147: LD_VAR 0 4
77151: ARRAY
77152: PUSH
77153: LD_INT 2
77155: ARRAY
77156: PPUSH
77157: CALL_OW 488
77161: NOT
77162: IFTRUE 77204
77164: PUSH
77165: LD_VAR 0 6
77169: PUSH
77170: LD_VAR 0 4
77174: ARRAY
77175: PUSH
77176: LD_INT 1
77178: ARRAY
77179: PPUSH
77180: LD_VAR 0 6
77184: PUSH
77185: LD_VAR 0 4
77189: ARRAY
77190: PUSH
77191: LD_INT 2
77193: ARRAY
77194: PPUSH
77195: CALL_OW 428
77199: PUSH
77200: LD_INT 0
77202: NONEQUAL
77203: OR
77204: IFFALSE 77226
// tmp := Delete ( tmp , i ) ;
77206: LD_ADDR_VAR 0 6
77210: PUSH
77211: LD_VAR 0 6
77215: PPUSH
77216: LD_VAR 0 4
77220: PPUSH
77221: CALL_OW 3
77225: ST_TO_ADDR
77226: GO 77124
77228: POP
77229: POP
// j := GetClosestHex ( unit , tmp ) ;
77230: LD_ADDR_VAR 0 5
77234: PUSH
77235: LD_VAR 0 1
77239: PPUSH
77240: LD_VAR 0 6
77244: PPUSH
77245: CALL 76522 0 2
77249: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77250: LD_VAR 0 1
77254: PPUSH
77255: LD_VAR 0 5
77259: PUSH
77260: LD_INT 1
77262: ARRAY
77263: PPUSH
77264: LD_VAR 0 5
77268: PUSH
77269: LD_INT 2
77271: ARRAY
77272: PPUSH
77273: CALL_OW 111
// result := j ;
77277: LD_ADDR_VAR 0 3
77281: PUSH
77282: LD_VAR 0 5
77286: ST_TO_ADDR
// end ;
77287: LD_VAR 0 3
77291: RET
// export function PrepareApemanSoldier ( ) ; begin
77292: LD_INT 0
77294: PPUSH
// uc_nation := 0 ;
77295: LD_ADDR_OWVAR 21
77299: PUSH
77300: LD_INT 0
77302: ST_TO_ADDR
// hc_sex := sex_male ;
77303: LD_ADDR_OWVAR 27
77307: PUSH
77308: LD_INT 1
77310: ST_TO_ADDR
// hc_name :=  ;
77311: LD_ADDR_OWVAR 26
77315: PUSH
77316: LD_STRING 
77318: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
77319: LD_ADDR_OWVAR 28
77323: PUSH
77324: LD_INT 15
77326: ST_TO_ADDR
// hc_gallery :=  ;
77327: LD_ADDR_OWVAR 33
77331: PUSH
77332: LD_STRING 
77334: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77335: LD_ADDR_OWVAR 31
77339: PUSH
77340: LD_INT 0
77342: PPUSH
77343: LD_INT 3
77345: PPUSH
77346: CALL_OW 12
77350: PUSH
77351: LD_INT 0
77353: PPUSH
77354: LD_INT 3
77356: PPUSH
77357: CALL_OW 12
77361: PUSH
77362: LD_INT 0
77364: PUSH
77365: LD_INT 0
77367: PUSH
77368: EMPTY
77369: LIST
77370: LIST
77371: LIST
77372: LIST
77373: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
77374: LD_ADDR_OWVAR 29
77378: PUSH
77379: LD_INT 10
77381: PUSH
77382: LD_INT 12
77384: PUSH
77385: EMPTY
77386: LIST
77387: LIST
77388: ST_TO_ADDR
// end ;
77389: LD_VAR 0 1
77393: RET
// export function PrepareApemanEngineer ( ) ; begin
77394: LD_INT 0
77396: PPUSH
// uc_nation := 0 ;
77397: LD_ADDR_OWVAR 21
77401: PUSH
77402: LD_INT 0
77404: ST_TO_ADDR
// hc_sex := sex_male ;
77405: LD_ADDR_OWVAR 27
77409: PUSH
77410: LD_INT 1
77412: ST_TO_ADDR
// hc_name :=  ;
77413: LD_ADDR_OWVAR 26
77417: PUSH
77418: LD_STRING 
77420: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
77421: LD_ADDR_OWVAR 28
77425: PUSH
77426: LD_INT 16
77428: ST_TO_ADDR
// hc_gallery :=  ;
77429: LD_ADDR_OWVAR 33
77433: PUSH
77434: LD_STRING 
77436: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77437: LD_ADDR_OWVAR 31
77441: PUSH
77442: LD_INT 0
77444: PPUSH
77445: LD_INT 3
77447: PPUSH
77448: CALL_OW 12
77452: PUSH
77453: LD_INT 0
77455: PPUSH
77456: LD_INT 3
77458: PPUSH
77459: CALL_OW 12
77463: PUSH
77464: LD_INT 0
77466: PUSH
77467: LD_INT 0
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: LIST
77474: LIST
77475: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
77476: LD_ADDR_OWVAR 29
77480: PUSH
77481: LD_INT 10
77483: PUSH
77484: LD_INT 12
77486: PUSH
77487: EMPTY
77488: LIST
77489: LIST
77490: ST_TO_ADDR
// end ;
77491: LD_VAR 0 1
77495: RET
// export function PrepareApeman ( agressivity ) ; begin
77496: LD_INT 0
77498: PPUSH
// uc_side := 0 ;
77499: LD_ADDR_OWVAR 20
77503: PUSH
77504: LD_INT 0
77506: ST_TO_ADDR
// uc_nation := 0 ;
77507: LD_ADDR_OWVAR 21
77511: PUSH
77512: LD_INT 0
77514: ST_TO_ADDR
// hc_sex := sex_male ;
77515: LD_ADDR_OWVAR 27
77519: PUSH
77520: LD_INT 1
77522: ST_TO_ADDR
// hc_class := class_apeman ;
77523: LD_ADDR_OWVAR 28
77527: PUSH
77528: LD_INT 12
77530: ST_TO_ADDR
// hc_gallery :=  ;
77531: LD_ADDR_OWVAR 33
77535: PUSH
77536: LD_STRING 
77538: ST_TO_ADDR
// hc_name :=  ;
77539: LD_ADDR_OWVAR 26
77543: PUSH
77544: LD_STRING 
77546: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
77547: LD_ADDR_OWVAR 29
77551: PUSH
77552: LD_INT 10
77554: PUSH
77555: LD_INT 12
77557: PUSH
77558: EMPTY
77559: LIST
77560: LIST
77561: ST_TO_ADDR
// if agressivity = 0 then
77562: LD_VAR 0 1
77566: PUSH
77567: LD_INT 0
77569: EQUAL
77570: IFFALSE 77582
// hc_agressivity := 0 else
77572: LD_ADDR_OWVAR 35
77576: PUSH
77577: LD_INT 0
77579: ST_TO_ADDR
77580: GO 77603
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77582: LD_ADDR_OWVAR 35
77586: PUSH
77587: LD_VAR 0 1
77591: NEG
77592: PPUSH
77593: LD_VAR 0 1
77597: PPUSH
77598: CALL_OW 12
77602: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77603: LD_ADDR_OWVAR 31
77607: PUSH
77608: LD_INT 0
77610: PPUSH
77611: LD_INT 3
77613: PPUSH
77614: CALL_OW 12
77618: PUSH
77619: LD_INT 0
77621: PPUSH
77622: LD_INT 3
77624: PPUSH
77625: CALL_OW 12
77629: PUSH
77630: LD_INT 0
77632: PUSH
77633: LD_INT 0
77635: PUSH
77636: EMPTY
77637: LIST
77638: LIST
77639: LIST
77640: LIST
77641: ST_TO_ADDR
// end ;
77642: LD_VAR 0 2
77646: RET
// export function PrepareTiger ( agressivity ) ; begin
77647: LD_INT 0
77649: PPUSH
// uc_side := 0 ;
77650: LD_ADDR_OWVAR 20
77654: PUSH
77655: LD_INT 0
77657: ST_TO_ADDR
// uc_nation := 0 ;
77658: LD_ADDR_OWVAR 21
77662: PUSH
77663: LD_INT 0
77665: ST_TO_ADDR
// InitHc ;
77666: CALL_OW 19
// hc_class := class_tiger ;
77670: LD_ADDR_OWVAR 28
77674: PUSH
77675: LD_INT 14
77677: ST_TO_ADDR
// hc_gallery :=  ;
77678: LD_ADDR_OWVAR 33
77682: PUSH
77683: LD_STRING 
77685: ST_TO_ADDR
// hc_name :=  ;
77686: LD_ADDR_OWVAR 26
77690: PUSH
77691: LD_STRING 
77693: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77694: LD_ADDR_OWVAR 35
77698: PUSH
77699: LD_VAR 0 1
77703: NEG
77704: PPUSH
77705: LD_VAR 0 1
77709: PPUSH
77710: CALL_OW 12
77714: ST_TO_ADDR
// end ;
77715: LD_VAR 0 2
77719: RET
// export function PrepareEnchidna ( ) ; begin
77720: LD_INT 0
77722: PPUSH
// uc_side := 0 ;
77723: LD_ADDR_OWVAR 20
77727: PUSH
77728: LD_INT 0
77730: ST_TO_ADDR
// uc_nation := 0 ;
77731: LD_ADDR_OWVAR 21
77735: PUSH
77736: LD_INT 0
77738: ST_TO_ADDR
// InitHc ;
77739: CALL_OW 19
// hc_class := class_baggie ;
77743: LD_ADDR_OWVAR 28
77747: PUSH
77748: LD_INT 13
77750: ST_TO_ADDR
// hc_gallery :=  ;
77751: LD_ADDR_OWVAR 33
77755: PUSH
77756: LD_STRING 
77758: ST_TO_ADDR
// hc_name :=  ;
77759: LD_ADDR_OWVAR 26
77763: PUSH
77764: LD_STRING 
77766: ST_TO_ADDR
// end ;
77767: LD_VAR 0 1
77771: RET
// export function PrepareFrog ( ) ; begin
77772: LD_INT 0
77774: PPUSH
// uc_side := 0 ;
77775: LD_ADDR_OWVAR 20
77779: PUSH
77780: LD_INT 0
77782: ST_TO_ADDR
// uc_nation := 0 ;
77783: LD_ADDR_OWVAR 21
77787: PUSH
77788: LD_INT 0
77790: ST_TO_ADDR
// InitHc ;
77791: CALL_OW 19
// hc_class := class_frog ;
77795: LD_ADDR_OWVAR 28
77799: PUSH
77800: LD_INT 19
77802: ST_TO_ADDR
// hc_gallery :=  ;
77803: LD_ADDR_OWVAR 33
77807: PUSH
77808: LD_STRING 
77810: ST_TO_ADDR
// hc_name :=  ;
77811: LD_ADDR_OWVAR 26
77815: PUSH
77816: LD_STRING 
77818: ST_TO_ADDR
// end ;
77819: LD_VAR 0 1
77823: RET
// export function PrepareFish ( ) ; begin
77824: LD_INT 0
77826: PPUSH
// uc_side := 0 ;
77827: LD_ADDR_OWVAR 20
77831: PUSH
77832: LD_INT 0
77834: ST_TO_ADDR
// uc_nation := 0 ;
77835: LD_ADDR_OWVAR 21
77839: PUSH
77840: LD_INT 0
77842: ST_TO_ADDR
// InitHc ;
77843: CALL_OW 19
// hc_class := class_fish ;
77847: LD_ADDR_OWVAR 28
77851: PUSH
77852: LD_INT 20
77854: ST_TO_ADDR
// hc_gallery :=  ;
77855: LD_ADDR_OWVAR 33
77859: PUSH
77860: LD_STRING 
77862: ST_TO_ADDR
// hc_name :=  ;
77863: LD_ADDR_OWVAR 26
77867: PUSH
77868: LD_STRING 
77870: ST_TO_ADDR
// end ;
77871: LD_VAR 0 1
77875: RET
// export function PrepareBird ( ) ; begin
77876: LD_INT 0
77878: PPUSH
// uc_side := 0 ;
77879: LD_ADDR_OWVAR 20
77883: PUSH
77884: LD_INT 0
77886: ST_TO_ADDR
// uc_nation := 0 ;
77887: LD_ADDR_OWVAR 21
77891: PUSH
77892: LD_INT 0
77894: ST_TO_ADDR
// InitHc ;
77895: CALL_OW 19
// hc_class := class_phororhacos ;
77899: LD_ADDR_OWVAR 28
77903: PUSH
77904: LD_INT 18
77906: ST_TO_ADDR
// hc_gallery :=  ;
77907: LD_ADDR_OWVAR 33
77911: PUSH
77912: LD_STRING 
77914: ST_TO_ADDR
// hc_name :=  ;
77915: LD_ADDR_OWVAR 26
77919: PUSH
77920: LD_STRING 
77922: ST_TO_ADDR
// end ;
77923: LD_VAR 0 1
77927: RET
// export function PrepareHorse ( ) ; begin
77928: LD_INT 0
77930: PPUSH
// uc_side := 0 ;
77931: LD_ADDR_OWVAR 20
77935: PUSH
77936: LD_INT 0
77938: ST_TO_ADDR
// uc_nation := 0 ;
77939: LD_ADDR_OWVAR 21
77943: PUSH
77944: LD_INT 0
77946: ST_TO_ADDR
// InitHc ;
77947: CALL_OW 19
// hc_class := class_horse ;
77951: LD_ADDR_OWVAR 28
77955: PUSH
77956: LD_INT 21
77958: ST_TO_ADDR
// hc_gallery :=  ;
77959: LD_ADDR_OWVAR 33
77963: PUSH
77964: LD_STRING 
77966: ST_TO_ADDR
// hc_name :=  ;
77967: LD_ADDR_OWVAR 26
77971: PUSH
77972: LD_STRING 
77974: ST_TO_ADDR
// end ;
77975: LD_VAR 0 1
77979: RET
// export function PrepareMastodont ( ) ; begin
77980: LD_INT 0
77982: PPUSH
// uc_side := 0 ;
77983: LD_ADDR_OWVAR 20
77987: PUSH
77988: LD_INT 0
77990: ST_TO_ADDR
// uc_nation := 0 ;
77991: LD_ADDR_OWVAR 21
77995: PUSH
77996: LD_INT 0
77998: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77999: LD_ADDR_OWVAR 37
78003: PUSH
78004: LD_INT 31
78006: ST_TO_ADDR
// vc_control := control_rider ;
78007: LD_ADDR_OWVAR 38
78011: PUSH
78012: LD_INT 4
78014: ST_TO_ADDR
// end ;
78015: LD_VAR 0 1
78019: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
78020: LD_INT 0
78022: PPUSH
78023: PPUSH
78024: PPUSH
// uc_side = 0 ;
78025: LD_ADDR_OWVAR 20
78029: PUSH
78030: LD_INT 0
78032: ST_TO_ADDR
// uc_nation = 0 ;
78033: LD_ADDR_OWVAR 21
78037: PUSH
78038: LD_INT 0
78040: ST_TO_ADDR
// InitHc_All ( ) ;
78041: CALL_OW 584
// InitVc ;
78045: CALL_OW 20
// if mastodonts then
78049: LD_VAR 0 6
78053: IFFALSE 78120
// for i = 1 to mastodonts do
78055: LD_ADDR_VAR 0 11
78059: PUSH
78060: DOUBLE
78061: LD_INT 1
78063: DEC
78064: ST_TO_ADDR
78065: LD_VAR 0 6
78069: PUSH
78070: FOR_TO
78071: IFFALSE 78118
// begin vc_chassis := 31 ;
78073: LD_ADDR_OWVAR 37
78077: PUSH
78078: LD_INT 31
78080: ST_TO_ADDR
// vc_control := control_rider ;
78081: LD_ADDR_OWVAR 38
78085: PUSH
78086: LD_INT 4
78088: ST_TO_ADDR
// animal := CreateVehicle ;
78089: LD_ADDR_VAR 0 12
78093: PUSH
78094: CALL_OW 45
78098: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78099: LD_VAR 0 12
78103: PPUSH
78104: LD_VAR 0 8
78108: PPUSH
78109: LD_INT 0
78111: PPUSH
78112: CALL 80262 0 3
// end ;
78116: GO 78070
78118: POP
78119: POP
// if horses then
78120: LD_VAR 0 5
78124: IFFALSE 78191
// for i = 1 to horses do
78126: LD_ADDR_VAR 0 11
78130: PUSH
78131: DOUBLE
78132: LD_INT 1
78134: DEC
78135: ST_TO_ADDR
78136: LD_VAR 0 5
78140: PUSH
78141: FOR_TO
78142: IFFALSE 78189
// begin hc_class := 21 ;
78144: LD_ADDR_OWVAR 28
78148: PUSH
78149: LD_INT 21
78151: ST_TO_ADDR
// hc_gallery :=  ;
78152: LD_ADDR_OWVAR 33
78156: PUSH
78157: LD_STRING 
78159: ST_TO_ADDR
// animal := CreateHuman ;
78160: LD_ADDR_VAR 0 12
78164: PUSH
78165: CALL_OW 44
78169: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78170: LD_VAR 0 12
78174: PPUSH
78175: LD_VAR 0 8
78179: PPUSH
78180: LD_INT 0
78182: PPUSH
78183: CALL 80262 0 3
// end ;
78187: GO 78141
78189: POP
78190: POP
// if birds then
78191: LD_VAR 0 1
78195: IFFALSE 78262
// for i = 1 to birds do
78197: LD_ADDR_VAR 0 11
78201: PUSH
78202: DOUBLE
78203: LD_INT 1
78205: DEC
78206: ST_TO_ADDR
78207: LD_VAR 0 1
78211: PUSH
78212: FOR_TO
78213: IFFALSE 78260
// begin hc_class := 18 ;
78215: LD_ADDR_OWVAR 28
78219: PUSH
78220: LD_INT 18
78222: ST_TO_ADDR
// hc_gallery =  ;
78223: LD_ADDR_OWVAR 33
78227: PUSH
78228: LD_STRING 
78230: ST_TO_ADDR
// animal := CreateHuman ;
78231: LD_ADDR_VAR 0 12
78235: PUSH
78236: CALL_OW 44
78240: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78241: LD_VAR 0 12
78245: PPUSH
78246: LD_VAR 0 8
78250: PPUSH
78251: LD_INT 0
78253: PPUSH
78254: CALL 80262 0 3
// end ;
78258: GO 78212
78260: POP
78261: POP
// if tigers then
78262: LD_VAR 0 2
78266: IFFALSE 78350
// for i = 1 to tigers do
78268: LD_ADDR_VAR 0 11
78272: PUSH
78273: DOUBLE
78274: LD_INT 1
78276: DEC
78277: ST_TO_ADDR
78278: LD_VAR 0 2
78282: PUSH
78283: FOR_TO
78284: IFFALSE 78348
// begin hc_class = class_tiger ;
78286: LD_ADDR_OWVAR 28
78290: PUSH
78291: LD_INT 14
78293: ST_TO_ADDR
// hc_gallery =  ;
78294: LD_ADDR_OWVAR 33
78298: PUSH
78299: LD_STRING 
78301: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78302: LD_ADDR_OWVAR 35
78306: PUSH
78307: LD_INT 7
78309: NEG
78310: PPUSH
78311: LD_INT 7
78313: PPUSH
78314: CALL_OW 12
78318: ST_TO_ADDR
// animal := CreateHuman ;
78319: LD_ADDR_VAR 0 12
78323: PUSH
78324: CALL_OW 44
78328: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78329: LD_VAR 0 12
78333: PPUSH
78334: LD_VAR 0 8
78338: PPUSH
78339: LD_INT 0
78341: PPUSH
78342: CALL 80262 0 3
// end ;
78346: GO 78283
78348: POP
78349: POP
// if apemans then
78350: LD_VAR 0 3
78354: IFFALSE 78477
// for i = 1 to apemans do
78356: LD_ADDR_VAR 0 11
78360: PUSH
78361: DOUBLE
78362: LD_INT 1
78364: DEC
78365: ST_TO_ADDR
78366: LD_VAR 0 3
78370: PUSH
78371: FOR_TO
78372: IFFALSE 78475
// begin hc_class = class_apeman ;
78374: LD_ADDR_OWVAR 28
78378: PUSH
78379: LD_INT 12
78381: ST_TO_ADDR
// hc_gallery =  ;
78382: LD_ADDR_OWVAR 33
78386: PUSH
78387: LD_STRING 
78389: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78390: LD_ADDR_OWVAR 35
78394: PUSH
78395: LD_INT 2
78397: NEG
78398: PPUSH
78399: LD_INT 2
78401: PPUSH
78402: CALL_OW 12
78406: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78407: LD_ADDR_OWVAR 31
78411: PUSH
78412: LD_INT 1
78414: PPUSH
78415: LD_INT 3
78417: PPUSH
78418: CALL_OW 12
78422: PUSH
78423: LD_INT 1
78425: PPUSH
78426: LD_INT 3
78428: PPUSH
78429: CALL_OW 12
78433: PUSH
78434: LD_INT 0
78436: PUSH
78437: LD_INT 0
78439: PUSH
78440: EMPTY
78441: LIST
78442: LIST
78443: LIST
78444: LIST
78445: ST_TO_ADDR
// animal := CreateHuman ;
78446: LD_ADDR_VAR 0 12
78450: PUSH
78451: CALL_OW 44
78455: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78456: LD_VAR 0 12
78460: PPUSH
78461: LD_VAR 0 8
78465: PPUSH
78466: LD_INT 0
78468: PPUSH
78469: CALL 80262 0 3
// end ;
78473: GO 78371
78475: POP
78476: POP
// if enchidnas then
78477: LD_VAR 0 4
78481: IFFALSE 78548
// for i = 1 to enchidnas do
78483: LD_ADDR_VAR 0 11
78487: PUSH
78488: DOUBLE
78489: LD_INT 1
78491: DEC
78492: ST_TO_ADDR
78493: LD_VAR 0 4
78497: PUSH
78498: FOR_TO
78499: IFFALSE 78546
// begin hc_class = 13 ;
78501: LD_ADDR_OWVAR 28
78505: PUSH
78506: LD_INT 13
78508: ST_TO_ADDR
// hc_gallery =  ;
78509: LD_ADDR_OWVAR 33
78513: PUSH
78514: LD_STRING 
78516: ST_TO_ADDR
// animal := CreateHuman ;
78517: LD_ADDR_VAR 0 12
78521: PUSH
78522: CALL_OW 44
78526: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78527: LD_VAR 0 12
78531: PPUSH
78532: LD_VAR 0 8
78536: PPUSH
78537: LD_INT 0
78539: PPUSH
78540: CALL 80262 0 3
// end ;
78544: GO 78498
78546: POP
78547: POP
// if fishes then
78548: LD_VAR 0 7
78552: IFFALSE 78619
// for i = 1 to fishes do
78554: LD_ADDR_VAR 0 11
78558: PUSH
78559: DOUBLE
78560: LD_INT 1
78562: DEC
78563: ST_TO_ADDR
78564: LD_VAR 0 7
78568: PUSH
78569: FOR_TO
78570: IFFALSE 78617
// begin hc_class = 20 ;
78572: LD_ADDR_OWVAR 28
78576: PUSH
78577: LD_INT 20
78579: ST_TO_ADDR
// hc_gallery =  ;
78580: LD_ADDR_OWVAR 33
78584: PUSH
78585: LD_STRING 
78587: ST_TO_ADDR
// animal := CreateHuman ;
78588: LD_ADDR_VAR 0 12
78592: PUSH
78593: CALL_OW 44
78597: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78598: LD_VAR 0 12
78602: PPUSH
78603: LD_VAR 0 9
78607: PPUSH
78608: LD_INT 0
78610: PPUSH
78611: CALL 80262 0 3
// end ;
78615: GO 78569
78617: POP
78618: POP
// end ;
78619: LD_VAR 0 10
78623: RET
// export function WantHeal ( sci , unit ) ; begin
78624: LD_INT 0
78626: PPUSH
// if GetTaskList ( sci ) > 0 then
78627: LD_VAR 0 1
78631: PPUSH
78632: CALL_OW 437
78636: PUSH
78637: LD_INT 0
78639: GREATER
78640: IFFALSE 78712
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78642: LD_VAR 0 1
78646: PPUSH
78647: CALL_OW 437
78651: PUSH
78652: LD_INT 1
78654: ARRAY
78655: PUSH
78656: LD_INT 1
78658: ARRAY
78659: PUSH
78660: LD_STRING l
78662: EQUAL
78663: IFFALSE 78690
78665: PUSH
78666: LD_VAR 0 1
78670: PPUSH
78671: CALL_OW 437
78675: PUSH
78676: LD_INT 1
78678: ARRAY
78679: PUSH
78680: LD_INT 4
78682: ARRAY
78683: PUSH
78684: LD_VAR 0 2
78688: EQUAL
78689: AND
78690: IFFALSE 78702
// result := true else
78692: LD_ADDR_VAR 0 3
78696: PUSH
78697: LD_INT 1
78699: ST_TO_ADDR
78700: GO 78710
// result := false ;
78702: LD_ADDR_VAR 0 3
78706: PUSH
78707: LD_INT 0
78709: ST_TO_ADDR
// end else
78710: GO 78720
// result := false ;
78712: LD_ADDR_VAR 0 3
78716: PUSH
78717: LD_INT 0
78719: ST_TO_ADDR
// end ;
78720: LD_VAR 0 3
78724: RET
// export function HealTarget ( sci ) ; begin
78725: LD_INT 0
78727: PPUSH
// if not sci then
78728: LD_VAR 0 1
78732: NOT
78733: IFFALSE 78737
// exit ;
78735: GO 78802
// result := 0 ;
78737: LD_ADDR_VAR 0 2
78741: PUSH
78742: LD_INT 0
78744: ST_TO_ADDR
// if GetTaskList ( sci ) then
78745: LD_VAR 0 1
78749: PPUSH
78750: CALL_OW 437
78754: IFFALSE 78802
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78756: LD_VAR 0 1
78760: PPUSH
78761: CALL_OW 437
78765: PUSH
78766: LD_INT 1
78768: ARRAY
78769: PUSH
78770: LD_INT 1
78772: ARRAY
78773: PUSH
78774: LD_STRING l
78776: EQUAL
78777: IFFALSE 78802
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78779: LD_ADDR_VAR 0 2
78783: PUSH
78784: LD_VAR 0 1
78788: PPUSH
78789: CALL_OW 437
78793: PUSH
78794: LD_INT 1
78796: ARRAY
78797: PUSH
78798: LD_INT 4
78800: ARRAY
78801: ST_TO_ADDR
// end ;
78802: LD_VAR 0 2
78806: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78807: LD_INT 0
78809: PPUSH
78810: PPUSH
78811: PPUSH
78812: PPUSH
// if not base_units then
78813: LD_VAR 0 1
78817: NOT
78818: IFFALSE 78822
// exit ;
78820: GO 78909
// result := false ;
78822: LD_ADDR_VAR 0 2
78826: PUSH
78827: LD_INT 0
78829: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78830: LD_ADDR_VAR 0 5
78834: PUSH
78835: LD_VAR 0 1
78839: PPUSH
78840: LD_INT 21
78842: PUSH
78843: LD_INT 3
78845: PUSH
78846: EMPTY
78847: LIST
78848: LIST
78849: PPUSH
78850: CALL_OW 72
78854: ST_TO_ADDR
// if not tmp then
78855: LD_VAR 0 5
78859: NOT
78860: IFFALSE 78864
// exit ;
78862: GO 78909
// for i in tmp do
78864: LD_ADDR_VAR 0 3
78868: PUSH
78869: LD_VAR 0 5
78873: PUSH
78874: FOR_IN
78875: IFFALSE 78907
// begin result := EnemyInRange ( i , 22 ) ;
78877: LD_ADDR_VAR 0 2
78881: PUSH
78882: LD_VAR 0 3
78886: PPUSH
78887: LD_INT 22
78889: PPUSH
78890: CALL 76324 0 2
78894: ST_TO_ADDR
// if result then
78895: LD_VAR 0 2
78899: IFFALSE 78905
// exit ;
78901: POP
78902: POP
78903: GO 78909
// end ;
78905: GO 78874
78907: POP
78908: POP
// end ;
78909: LD_VAR 0 2
78913: RET
// export function FilterByTag ( units , tag ) ; begin
78914: LD_INT 0
78916: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
78917: LD_ADDR_VAR 0 3
78921: PUSH
78922: LD_VAR 0 1
78926: PPUSH
78927: LD_INT 120
78929: PUSH
78930: LD_VAR 0 2
78934: PUSH
78935: EMPTY
78936: LIST
78937: LIST
78938: PPUSH
78939: CALL_OW 72
78943: ST_TO_ADDR
// end ;
78944: LD_VAR 0 3
78948: RET
// export function IsDriver ( un ) ; begin
78949: LD_INT 0
78951: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78952: LD_ADDR_VAR 0 2
78956: PUSH
78957: LD_VAR 0 1
78961: PUSH
78962: LD_INT 55
78964: PUSH
78965: EMPTY
78966: LIST
78967: PPUSH
78968: CALL_OW 69
78972: IN
78973: ST_TO_ADDR
// end ;
78974: LD_VAR 0 2
78978: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78979: LD_INT 0
78981: PPUSH
78982: PPUSH
// list := [ ] ;
78983: LD_ADDR_VAR 0 5
78987: PUSH
78988: EMPTY
78989: ST_TO_ADDR
// case d of 0 :
78990: LD_VAR 0 3
78994: PUSH
78995: LD_INT 0
78997: DOUBLE
78998: EQUAL
78999: IFTRUE 79003
79001: GO 79136
79003: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
79004: LD_ADDR_VAR 0 5
79008: PUSH
79009: LD_VAR 0 1
79013: PUSH
79014: LD_INT 4
79016: MINUS
79017: PUSH
79018: LD_VAR 0 2
79022: PUSH
79023: LD_INT 4
79025: MINUS
79026: PUSH
79027: LD_INT 2
79029: PUSH
79030: EMPTY
79031: LIST
79032: LIST
79033: LIST
79034: PUSH
79035: LD_VAR 0 1
79039: PUSH
79040: LD_INT 3
79042: MINUS
79043: PUSH
79044: LD_VAR 0 2
79048: PUSH
79049: LD_INT 1
79051: PUSH
79052: EMPTY
79053: LIST
79054: LIST
79055: LIST
79056: PUSH
79057: LD_VAR 0 1
79061: PUSH
79062: LD_INT 4
79064: PLUS
79065: PUSH
79066: LD_VAR 0 2
79070: PUSH
79071: LD_INT 4
79073: PUSH
79074: EMPTY
79075: LIST
79076: LIST
79077: LIST
79078: PUSH
79079: LD_VAR 0 1
79083: PUSH
79084: LD_INT 3
79086: PLUS
79087: PUSH
79088: LD_VAR 0 2
79092: PUSH
79093: LD_INT 3
79095: PLUS
79096: PUSH
79097: LD_INT 5
79099: PUSH
79100: EMPTY
79101: LIST
79102: LIST
79103: LIST
79104: PUSH
79105: LD_VAR 0 1
79109: PUSH
79110: LD_VAR 0 2
79114: PUSH
79115: LD_INT 4
79117: PLUS
79118: PUSH
79119: LD_INT 0
79121: PUSH
79122: EMPTY
79123: LIST
79124: LIST
79125: LIST
79126: PUSH
79127: EMPTY
79128: LIST
79129: LIST
79130: LIST
79131: LIST
79132: LIST
79133: ST_TO_ADDR
// end ; 1 :
79134: GO 79834
79136: LD_INT 1
79138: DOUBLE
79139: EQUAL
79140: IFTRUE 79144
79142: GO 79277
79144: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
79145: LD_ADDR_VAR 0 5
79149: PUSH
79150: LD_VAR 0 1
79154: PUSH
79155: LD_VAR 0 2
79159: PUSH
79160: LD_INT 4
79162: MINUS
79163: PUSH
79164: LD_INT 3
79166: PUSH
79167: EMPTY
79168: LIST
79169: LIST
79170: LIST
79171: PUSH
79172: LD_VAR 0 1
79176: PUSH
79177: LD_INT 3
79179: MINUS
79180: PUSH
79181: LD_VAR 0 2
79185: PUSH
79186: LD_INT 3
79188: MINUS
79189: PUSH
79190: LD_INT 2
79192: PUSH
79193: EMPTY
79194: LIST
79195: LIST
79196: LIST
79197: PUSH
79198: LD_VAR 0 1
79202: PUSH
79203: LD_INT 4
79205: MINUS
79206: PUSH
79207: LD_VAR 0 2
79211: PUSH
79212: LD_INT 1
79214: PUSH
79215: EMPTY
79216: LIST
79217: LIST
79218: LIST
79219: PUSH
79220: LD_VAR 0 1
79224: PUSH
79225: LD_VAR 0 2
79229: PUSH
79230: LD_INT 3
79232: PLUS
79233: PUSH
79234: LD_INT 0
79236: PUSH
79237: EMPTY
79238: LIST
79239: LIST
79240: LIST
79241: PUSH
79242: LD_VAR 0 1
79246: PUSH
79247: LD_INT 4
79249: PLUS
79250: PUSH
79251: LD_VAR 0 2
79255: PUSH
79256: LD_INT 4
79258: PLUS
79259: PUSH
79260: LD_INT 5
79262: PUSH
79263: EMPTY
79264: LIST
79265: LIST
79266: LIST
79267: PUSH
79268: EMPTY
79269: LIST
79270: LIST
79271: LIST
79272: LIST
79273: LIST
79274: ST_TO_ADDR
// end ; 2 :
79275: GO 79834
79277: LD_INT 2
79279: DOUBLE
79280: EQUAL
79281: IFTRUE 79285
79283: GO 79414
79285: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79286: LD_ADDR_VAR 0 5
79290: PUSH
79291: LD_VAR 0 1
79295: PUSH
79296: LD_VAR 0 2
79300: PUSH
79301: LD_INT 3
79303: MINUS
79304: PUSH
79305: LD_INT 3
79307: PUSH
79308: EMPTY
79309: LIST
79310: LIST
79311: LIST
79312: PUSH
79313: LD_VAR 0 1
79317: PUSH
79318: LD_INT 4
79320: PLUS
79321: PUSH
79322: LD_VAR 0 2
79326: PUSH
79327: LD_INT 4
79329: PUSH
79330: EMPTY
79331: LIST
79332: LIST
79333: LIST
79334: PUSH
79335: LD_VAR 0 1
79339: PUSH
79340: LD_VAR 0 2
79344: PUSH
79345: LD_INT 4
79347: PLUS
79348: PUSH
79349: LD_INT 0
79351: PUSH
79352: EMPTY
79353: LIST
79354: LIST
79355: LIST
79356: PUSH
79357: LD_VAR 0 1
79361: PUSH
79362: LD_INT 3
79364: MINUS
79365: PUSH
79366: LD_VAR 0 2
79370: PUSH
79371: LD_INT 1
79373: PUSH
79374: EMPTY
79375: LIST
79376: LIST
79377: LIST
79378: PUSH
79379: LD_VAR 0 1
79383: PUSH
79384: LD_INT 4
79386: MINUS
79387: PUSH
79388: LD_VAR 0 2
79392: PUSH
79393: LD_INT 4
79395: MINUS
79396: PUSH
79397: LD_INT 2
79399: PUSH
79400: EMPTY
79401: LIST
79402: LIST
79403: LIST
79404: PUSH
79405: EMPTY
79406: LIST
79407: LIST
79408: LIST
79409: LIST
79410: LIST
79411: ST_TO_ADDR
// end ; 3 :
79412: GO 79834
79414: LD_INT 3
79416: DOUBLE
79417: EQUAL
79418: IFTRUE 79422
79420: GO 79555
79422: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79423: LD_ADDR_VAR 0 5
79427: PUSH
79428: LD_VAR 0 1
79432: PUSH
79433: LD_INT 3
79435: PLUS
79436: PUSH
79437: LD_VAR 0 2
79441: PUSH
79442: LD_INT 4
79444: PUSH
79445: EMPTY
79446: LIST
79447: LIST
79448: LIST
79449: PUSH
79450: LD_VAR 0 1
79454: PUSH
79455: LD_INT 4
79457: PLUS
79458: PUSH
79459: LD_VAR 0 2
79463: PUSH
79464: LD_INT 4
79466: PLUS
79467: PUSH
79468: LD_INT 5
79470: PUSH
79471: EMPTY
79472: LIST
79473: LIST
79474: LIST
79475: PUSH
79476: LD_VAR 0 1
79480: PUSH
79481: LD_INT 4
79483: MINUS
79484: PUSH
79485: LD_VAR 0 2
79489: PUSH
79490: LD_INT 1
79492: PUSH
79493: EMPTY
79494: LIST
79495: LIST
79496: LIST
79497: PUSH
79498: LD_VAR 0 1
79502: PUSH
79503: LD_VAR 0 2
79507: PUSH
79508: LD_INT 4
79510: MINUS
79511: PUSH
79512: LD_INT 3
79514: PUSH
79515: EMPTY
79516: LIST
79517: LIST
79518: LIST
79519: PUSH
79520: LD_VAR 0 1
79524: PUSH
79525: LD_INT 3
79527: MINUS
79528: PUSH
79529: LD_VAR 0 2
79533: PUSH
79534: LD_INT 3
79536: MINUS
79537: PUSH
79538: LD_INT 2
79540: PUSH
79541: EMPTY
79542: LIST
79543: LIST
79544: LIST
79545: PUSH
79546: EMPTY
79547: LIST
79548: LIST
79549: LIST
79550: LIST
79551: LIST
79552: ST_TO_ADDR
// end ; 4 :
79553: GO 79834
79555: LD_INT 4
79557: DOUBLE
79558: EQUAL
79559: IFTRUE 79563
79561: GO 79696
79563: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79564: LD_ADDR_VAR 0 5
79568: PUSH
79569: LD_VAR 0 1
79573: PUSH
79574: LD_VAR 0 2
79578: PUSH
79579: LD_INT 4
79581: PLUS
79582: PUSH
79583: LD_INT 0
79585: PUSH
79586: EMPTY
79587: LIST
79588: LIST
79589: LIST
79590: PUSH
79591: LD_VAR 0 1
79595: PUSH
79596: LD_INT 3
79598: PLUS
79599: PUSH
79600: LD_VAR 0 2
79604: PUSH
79605: LD_INT 3
79607: PLUS
79608: PUSH
79609: LD_INT 5
79611: PUSH
79612: EMPTY
79613: LIST
79614: LIST
79615: LIST
79616: PUSH
79617: LD_VAR 0 1
79621: PUSH
79622: LD_INT 4
79624: PLUS
79625: PUSH
79626: LD_VAR 0 2
79630: PUSH
79631: LD_INT 4
79633: PUSH
79634: EMPTY
79635: LIST
79636: LIST
79637: LIST
79638: PUSH
79639: LD_VAR 0 1
79643: PUSH
79644: LD_VAR 0 2
79648: PUSH
79649: LD_INT 3
79651: MINUS
79652: PUSH
79653: LD_INT 3
79655: PUSH
79656: EMPTY
79657: LIST
79658: LIST
79659: LIST
79660: PUSH
79661: LD_VAR 0 1
79665: PUSH
79666: LD_INT 4
79668: MINUS
79669: PUSH
79670: LD_VAR 0 2
79674: PUSH
79675: LD_INT 4
79677: MINUS
79678: PUSH
79679: LD_INT 2
79681: PUSH
79682: EMPTY
79683: LIST
79684: LIST
79685: LIST
79686: PUSH
79687: EMPTY
79688: LIST
79689: LIST
79690: LIST
79691: LIST
79692: LIST
79693: ST_TO_ADDR
// end ; 5 :
79694: GO 79834
79696: LD_INT 5
79698: DOUBLE
79699: EQUAL
79700: IFTRUE 79704
79702: GO 79833
79704: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79705: LD_ADDR_VAR 0 5
79709: PUSH
79710: LD_VAR 0 1
79714: PUSH
79715: LD_INT 4
79717: MINUS
79718: PUSH
79719: LD_VAR 0 2
79723: PUSH
79724: LD_INT 1
79726: PUSH
79727: EMPTY
79728: LIST
79729: LIST
79730: LIST
79731: PUSH
79732: LD_VAR 0 1
79736: PUSH
79737: LD_VAR 0 2
79741: PUSH
79742: LD_INT 4
79744: MINUS
79745: PUSH
79746: LD_INT 3
79748: PUSH
79749: EMPTY
79750: LIST
79751: LIST
79752: LIST
79753: PUSH
79754: LD_VAR 0 1
79758: PUSH
79759: LD_INT 4
79761: PLUS
79762: PUSH
79763: LD_VAR 0 2
79767: PUSH
79768: LD_INT 4
79770: PLUS
79771: PUSH
79772: LD_INT 5
79774: PUSH
79775: EMPTY
79776: LIST
79777: LIST
79778: LIST
79779: PUSH
79780: LD_VAR 0 1
79784: PUSH
79785: LD_INT 3
79787: PLUS
79788: PUSH
79789: LD_VAR 0 2
79793: PUSH
79794: LD_INT 4
79796: PUSH
79797: EMPTY
79798: LIST
79799: LIST
79800: LIST
79801: PUSH
79802: LD_VAR 0 1
79806: PUSH
79807: LD_VAR 0 2
79811: PUSH
79812: LD_INT 3
79814: PLUS
79815: PUSH
79816: LD_INT 0
79818: PUSH
79819: EMPTY
79820: LIST
79821: LIST
79822: LIST
79823: PUSH
79824: EMPTY
79825: LIST
79826: LIST
79827: LIST
79828: LIST
79829: LIST
79830: ST_TO_ADDR
// end ; end ;
79831: GO 79834
79833: POP
// result := list ;
79834: LD_ADDR_VAR 0 4
79838: PUSH
79839: LD_VAR 0 5
79843: ST_TO_ADDR
// end ;
79844: LD_VAR 0 4
79848: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79849: LD_INT 0
79851: PPUSH
79852: PPUSH
79853: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79854: LD_VAR 0 1
79858: NOT
79859: IFTRUE 79887
79861: PUSH
79862: LD_VAR 0 2
79866: PUSH
79867: LD_INT 1
79869: PUSH
79870: LD_INT 2
79872: PUSH
79873: LD_INT 3
79875: PUSH
79876: LD_INT 4
79878: PUSH
79879: EMPTY
79880: LIST
79881: LIST
79882: LIST
79883: LIST
79884: IN
79885: NOT
79886: OR
79887: IFFALSE 79891
// exit ;
79889: GO 79974
// tmp := [ ] ;
79891: LD_ADDR_VAR 0 5
79895: PUSH
79896: EMPTY
79897: ST_TO_ADDR
// for i in units do
79898: LD_ADDR_VAR 0 4
79902: PUSH
79903: LD_VAR 0 1
79907: PUSH
79908: FOR_IN
79909: IFFALSE 79943
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
79911: LD_ADDR_VAR 0 5
79915: PUSH
79916: LD_VAR 0 5
79920: PPUSH
79921: LD_VAR 0 4
79925: PPUSH
79926: LD_VAR 0 2
79930: PPUSH
79931: CALL_OW 259
79935: PPUSH
79936: CALL 81369 0 2
79940: ST_TO_ADDR
79941: GO 79908
79943: POP
79944: POP
// if not tmp then
79945: LD_VAR 0 5
79949: NOT
79950: IFFALSE 79954
// exit ;
79952: GO 79974
// result := SortListByListDesc ( units , tmp ) ;
79954: LD_ADDR_VAR 0 3
79958: PUSH
79959: LD_VAR 0 1
79963: PPUSH
79964: LD_VAR 0 5
79968: PPUSH
79969: CALL_OW 77
79973: ST_TO_ADDR
// end ;
79974: LD_VAR 0 3
79978: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79979: LD_INT 0
79981: PPUSH
79982: PPUSH
79983: PPUSH
// result := false ;
79984: LD_ADDR_VAR 0 3
79988: PUSH
79989: LD_INT 0
79991: ST_TO_ADDR
// if not building then
79992: LD_VAR 0 2
79996: NOT
79997: IFFALSE 80001
// exit ;
79999: GO 80145
// x := GetX ( building ) ;
80001: LD_ADDR_VAR 0 4
80005: PUSH
80006: LD_VAR 0 2
80010: PPUSH
80011: CALL_OW 250
80015: ST_TO_ADDR
// y := GetY ( building ) ;
80016: LD_ADDR_VAR 0 5
80020: PUSH
80021: LD_VAR 0 2
80025: PPUSH
80026: CALL_OW 251
80030: ST_TO_ADDR
// if not x or not y then
80031: LD_VAR 0 4
80035: NOT
80036: IFTRUE 80045
80038: PUSH
80039: LD_VAR 0 5
80043: NOT
80044: OR
80045: IFFALSE 80049
// exit ;
80047: GO 80145
// if GetTaskList ( unit ) then
80049: LD_VAR 0 1
80053: PPUSH
80054: CALL_OW 437
80058: IFFALSE 80145
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80060: LD_STRING e
80062: PUSH
80063: LD_VAR 0 1
80067: PPUSH
80068: CALL_OW 437
80072: PUSH
80073: LD_INT 1
80075: ARRAY
80076: PUSH
80077: LD_INT 1
80079: ARRAY
80080: EQUAL
80081: IFFALSE 80108
80083: PUSH
80084: LD_VAR 0 4
80088: PUSH
80089: LD_VAR 0 1
80093: PPUSH
80094: CALL_OW 437
80098: PUSH
80099: LD_INT 1
80101: ARRAY
80102: PUSH
80103: LD_INT 2
80105: ARRAY
80106: EQUAL
80107: AND
80108: IFFALSE 80135
80110: PUSH
80111: LD_VAR 0 5
80115: PUSH
80116: LD_VAR 0 1
80120: PPUSH
80121: CALL_OW 437
80125: PUSH
80126: LD_INT 1
80128: ARRAY
80129: PUSH
80130: LD_INT 3
80132: ARRAY
80133: EQUAL
80134: AND
80135: IFFALSE 80145
// result := true end ;
80137: LD_ADDR_VAR 0 3
80141: PUSH
80142: LD_INT 1
80144: ST_TO_ADDR
// end ;
80145: LD_VAR 0 3
80149: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
80150: LD_INT 0
80152: PPUSH
// result := false ;
80153: LD_ADDR_VAR 0 4
80157: PUSH
80158: LD_INT 0
80160: ST_TO_ADDR
// if GetTaskList ( unit ) then
80161: LD_VAR 0 1
80165: PPUSH
80166: CALL_OW 437
80170: IFFALSE 80257
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
80172: LD_STRING M
80174: PUSH
80175: LD_VAR 0 1
80179: PPUSH
80180: CALL_OW 437
80184: PUSH
80185: LD_INT 1
80187: ARRAY
80188: PUSH
80189: LD_INT 1
80191: ARRAY
80192: EQUAL
80193: IFFALSE 80220
80195: PUSH
80196: LD_VAR 0 2
80200: PUSH
80201: LD_VAR 0 1
80205: PPUSH
80206: CALL_OW 437
80210: PUSH
80211: LD_INT 1
80213: ARRAY
80214: PUSH
80215: LD_INT 2
80217: ARRAY
80218: EQUAL
80219: AND
80220: IFFALSE 80247
80222: PUSH
80223: LD_VAR 0 3
80227: PUSH
80228: LD_VAR 0 1
80232: PPUSH
80233: CALL_OW 437
80237: PUSH
80238: LD_INT 1
80240: ARRAY
80241: PUSH
80242: LD_INT 3
80244: ARRAY
80245: EQUAL
80246: AND
80247: IFFALSE 80257
// result := true ;
80249: LD_ADDR_VAR 0 4
80253: PUSH
80254: LD_INT 1
80256: ST_TO_ADDR
// end ; end ;
80257: LD_VAR 0 4
80261: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
80262: LD_INT 0
80264: PPUSH
80265: PPUSH
80266: PPUSH
80267: PPUSH
// if not unit or not area then
80268: LD_VAR 0 1
80272: NOT
80273: IFTRUE 80282
80275: PUSH
80276: LD_VAR 0 2
80280: NOT
80281: OR
80282: IFFALSE 80286
// exit ;
80284: GO 80462
// tmp := AreaToList ( area , i ) ;
80286: LD_ADDR_VAR 0 6
80290: PUSH
80291: LD_VAR 0 2
80295: PPUSH
80296: LD_VAR 0 5
80300: PPUSH
80301: CALL_OW 517
80305: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80306: LD_ADDR_VAR 0 5
80310: PUSH
80311: DOUBLE
80312: LD_INT 1
80314: DEC
80315: ST_TO_ADDR
80316: LD_VAR 0 6
80320: PUSH
80321: LD_INT 1
80323: ARRAY
80324: PUSH
80325: FOR_TO
80326: IFFALSE 80460
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80328: LD_ADDR_VAR 0 7
80332: PUSH
80333: LD_VAR 0 6
80337: PUSH
80338: LD_INT 1
80340: ARRAY
80341: PUSH
80342: LD_VAR 0 5
80346: ARRAY
80347: PUSH
80348: LD_VAR 0 6
80352: PUSH
80353: LD_INT 2
80355: ARRAY
80356: PUSH
80357: LD_VAR 0 5
80361: ARRAY
80362: PUSH
80363: EMPTY
80364: LIST
80365: LIST
80366: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
80367: LD_INT 92
80369: PUSH
80370: LD_VAR 0 7
80374: PUSH
80375: LD_INT 1
80377: ARRAY
80378: PUSH
80379: LD_VAR 0 7
80383: PUSH
80384: LD_INT 2
80386: ARRAY
80387: PUSH
80388: LD_INT 2
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: LIST
80395: LIST
80396: PPUSH
80397: CALL_OW 69
80401: PUSH
80402: LD_INT 0
80404: EQUAL
80405: IFFALSE 80458
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80407: LD_VAR 0 1
80411: PPUSH
80412: LD_VAR 0 7
80416: PUSH
80417: LD_INT 1
80419: ARRAY
80420: PPUSH
80421: LD_VAR 0 7
80425: PUSH
80426: LD_INT 2
80428: ARRAY
80429: PPUSH
80430: LD_VAR 0 3
80434: PPUSH
80435: CALL_OW 48
// result := IsPlaced ( unit ) ;
80439: LD_ADDR_VAR 0 4
80443: PUSH
80444: LD_VAR 0 1
80448: PPUSH
80449: CALL_OW 305
80453: ST_TO_ADDR
// exit ;
80454: POP
80455: POP
80456: GO 80462
// end ; end ;
80458: GO 80325
80460: POP
80461: POP
// end ;
80462: LD_VAR 0 4
80466: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80467: LD_INT 0
80469: PPUSH
80470: PPUSH
80471: PPUSH
// if not side or side > 8 then
80472: LD_VAR 0 1
80476: NOT
80477: IFTRUE 80489
80479: PUSH
80480: LD_VAR 0 1
80484: PUSH
80485: LD_INT 8
80487: GREATER
80488: OR
80489: IFFALSE 80493
// exit ;
80491: GO 80680
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80493: LD_ADDR_VAR 0 4
80497: PUSH
80498: LD_INT 22
80500: PUSH
80501: LD_VAR 0 1
80505: PUSH
80506: EMPTY
80507: LIST
80508: LIST
80509: PUSH
80510: LD_INT 21
80512: PUSH
80513: LD_INT 3
80515: PUSH
80516: EMPTY
80517: LIST
80518: LIST
80519: PUSH
80520: EMPTY
80521: LIST
80522: LIST
80523: PPUSH
80524: CALL_OW 69
80528: ST_TO_ADDR
// if not tmp then
80529: LD_VAR 0 4
80533: NOT
80534: IFFALSE 80538
// exit ;
80536: GO 80680
// enable_addtolog := true ;
80538: LD_ADDR_OWVAR 81
80542: PUSH
80543: LD_INT 1
80545: ST_TO_ADDR
// AddToLog ( [ ) ;
80546: LD_STRING [
80548: PPUSH
80549: CALL_OW 561
// for i in tmp do
80553: LD_ADDR_VAR 0 3
80557: PUSH
80558: LD_VAR 0 4
80562: PUSH
80563: FOR_IN
80564: IFFALSE 80671
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80566: LD_STRING [
80568: PUSH
80569: LD_VAR 0 3
80573: PPUSH
80574: CALL_OW 266
80578: STR
80579: PUSH
80580: LD_STRING , 
80582: STR
80583: PUSH
80584: LD_VAR 0 3
80588: PPUSH
80589: CALL_OW 250
80593: STR
80594: PUSH
80595: LD_STRING , 
80597: STR
80598: PUSH
80599: LD_VAR 0 3
80603: PPUSH
80604: CALL_OW 251
80608: STR
80609: PUSH
80610: LD_STRING , 
80612: STR
80613: PUSH
80614: LD_VAR 0 3
80618: PPUSH
80619: CALL_OW 254
80623: STR
80624: PUSH
80625: LD_STRING , 
80627: STR
80628: PUSH
80629: LD_VAR 0 3
80633: PPUSH
80634: LD_INT 1
80636: PPUSH
80637: CALL_OW 268
80641: STR
80642: PUSH
80643: LD_STRING , 
80645: STR
80646: PUSH
80647: LD_VAR 0 3
80651: PPUSH
80652: LD_INT 2
80654: PPUSH
80655: CALL_OW 268
80659: STR
80660: PUSH
80661: LD_STRING ],
80663: STR
80664: PPUSH
80665: CALL_OW 561
// end ;
80669: GO 80563
80671: POP
80672: POP
// AddToLog ( ]; ) ;
80673: LD_STRING ];
80675: PPUSH
80676: CALL_OW 561
// end ;
80680: LD_VAR 0 2
80684: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80685: LD_INT 0
80687: PPUSH
80688: PPUSH
80689: PPUSH
80690: PPUSH
80691: PPUSH
// if not area or not rate or not max then
80692: LD_VAR 0 1
80696: NOT
80697: IFTRUE 80706
80699: PUSH
80700: LD_VAR 0 2
80704: NOT
80705: OR
80706: IFTRUE 80715
80708: PUSH
80709: LD_VAR 0 4
80713: NOT
80714: OR
80715: IFFALSE 80719
// exit ;
80717: GO 80908
// while 1 do
80719: LD_INT 1
80721: IFFALSE 80908
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80723: LD_ADDR_VAR 0 9
80727: PUSH
80728: LD_VAR 0 1
80732: PPUSH
80733: LD_INT 1
80735: PPUSH
80736: CALL_OW 287
80740: PUSH
80741: LD_INT 10
80743: MUL
80744: ST_TO_ADDR
// r := rate / 10 ;
80745: LD_ADDR_VAR 0 7
80749: PUSH
80750: LD_VAR 0 2
80754: PUSH
80755: LD_INT 10
80757: DIVREAL
80758: ST_TO_ADDR
// time := 1 1$00 ;
80759: LD_ADDR_VAR 0 8
80763: PUSH
80764: LD_INT 2100
80766: ST_TO_ADDR
// if amount < min then
80767: LD_VAR 0 9
80771: PUSH
80772: LD_VAR 0 3
80776: LESS
80777: IFFALSE 80795
// r := r * 2 else
80779: LD_ADDR_VAR 0 7
80783: PUSH
80784: LD_VAR 0 7
80788: PUSH
80789: LD_INT 2
80791: MUL
80792: ST_TO_ADDR
80793: GO 80821
// if amount > max then
80795: LD_VAR 0 9
80799: PUSH
80800: LD_VAR 0 4
80804: GREATER
80805: IFFALSE 80821
// r := r / 2 ;
80807: LD_ADDR_VAR 0 7
80811: PUSH
80812: LD_VAR 0 7
80816: PUSH
80817: LD_INT 2
80819: DIVREAL
80820: ST_TO_ADDR
// time := time / r ;
80821: LD_ADDR_VAR 0 8
80825: PUSH
80826: LD_VAR 0 8
80830: PUSH
80831: LD_VAR 0 7
80835: DIVREAL
80836: ST_TO_ADDR
// if time < 0 then
80837: LD_VAR 0 8
80841: PUSH
80842: LD_INT 0
80844: LESS
80845: IFFALSE 80862
// time := time * - 1 ;
80847: LD_ADDR_VAR 0 8
80851: PUSH
80852: LD_VAR 0 8
80856: PUSH
80857: LD_INT 1
80859: NEG
80860: MUL
80861: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
80862: LD_VAR 0 8
80866: PUSH
80867: LD_INT 35
80869: PPUSH
80870: LD_INT 875
80872: PPUSH
80873: CALL_OW 12
80877: PLUS
80878: PPUSH
80879: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80883: LD_INT 1
80885: PPUSH
80886: LD_INT 5
80888: PPUSH
80889: CALL_OW 12
80893: PPUSH
80894: LD_VAR 0 1
80898: PPUSH
80899: LD_INT 1
80901: PPUSH
80902: CALL_OW 55
// end ;
80906: GO 80719
// end ;
80908: LD_VAR 0 5
80912: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80913: LD_INT 0
80915: PPUSH
80916: PPUSH
80917: PPUSH
80918: PPUSH
80919: PPUSH
80920: PPUSH
80921: PPUSH
80922: PPUSH
// if not turrets or not factories then
80923: LD_VAR 0 1
80927: NOT
80928: IFTRUE 80937
80930: PUSH
80931: LD_VAR 0 2
80935: NOT
80936: OR
80937: IFFALSE 80941
// exit ;
80939: GO 81248
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80941: LD_ADDR_VAR 0 10
80945: PUSH
80946: LD_INT 5
80948: PUSH
80949: LD_INT 6
80951: PUSH
80952: EMPTY
80953: LIST
80954: LIST
80955: PUSH
80956: LD_INT 2
80958: PUSH
80959: LD_INT 4
80961: PUSH
80962: EMPTY
80963: LIST
80964: LIST
80965: PUSH
80966: LD_INT 3
80968: PUSH
80969: LD_INT 5
80971: PUSH
80972: EMPTY
80973: LIST
80974: LIST
80975: PUSH
80976: EMPTY
80977: LIST
80978: LIST
80979: LIST
80980: PUSH
80981: LD_INT 24
80983: PUSH
80984: LD_INT 25
80986: PUSH
80987: EMPTY
80988: LIST
80989: LIST
80990: PUSH
80991: LD_INT 23
80993: PUSH
80994: LD_INT 27
80996: PUSH
80997: EMPTY
80998: LIST
80999: LIST
81000: PUSH
81001: EMPTY
81002: LIST
81003: LIST
81004: PUSH
81005: LD_INT 42
81007: PUSH
81008: LD_INT 43
81010: PUSH
81011: EMPTY
81012: LIST
81013: LIST
81014: PUSH
81015: LD_INT 44
81017: PUSH
81018: LD_INT 46
81020: PUSH
81021: EMPTY
81022: LIST
81023: LIST
81024: PUSH
81025: LD_INT 45
81027: PUSH
81028: LD_INT 47
81030: PUSH
81031: EMPTY
81032: LIST
81033: LIST
81034: PUSH
81035: EMPTY
81036: LIST
81037: LIST
81038: LIST
81039: PUSH
81040: EMPTY
81041: LIST
81042: LIST
81043: LIST
81044: ST_TO_ADDR
// result := [ ] ;
81045: LD_ADDR_VAR 0 3
81049: PUSH
81050: EMPTY
81051: ST_TO_ADDR
// for i in turrets do
81052: LD_ADDR_VAR 0 4
81056: PUSH
81057: LD_VAR 0 1
81061: PUSH
81062: FOR_IN
81063: IFFALSE 81246
// begin nat := GetNation ( i ) ;
81065: LD_ADDR_VAR 0 7
81069: PUSH
81070: LD_VAR 0 4
81074: PPUSH
81075: CALL_OW 248
81079: ST_TO_ADDR
// weapon := 0 ;
81080: LD_ADDR_VAR 0 8
81084: PUSH
81085: LD_INT 0
81087: ST_TO_ADDR
// if not nat then
81088: LD_VAR 0 7
81092: NOT
81093: IFFALSE 81097
// continue ;
81095: GO 81062
// for j in list [ nat ] do
81097: LD_ADDR_VAR 0 5
81101: PUSH
81102: LD_VAR 0 10
81106: PUSH
81107: LD_VAR 0 7
81111: ARRAY
81112: PUSH
81113: FOR_IN
81114: IFFALSE 81155
// if GetBWeapon ( i ) = j [ 1 ] then
81116: LD_VAR 0 4
81120: PPUSH
81121: CALL_OW 269
81125: PUSH
81126: LD_VAR 0 5
81130: PUSH
81131: LD_INT 1
81133: ARRAY
81134: EQUAL
81135: IFFALSE 81153
// begin weapon := j [ 2 ] ;
81137: LD_ADDR_VAR 0 8
81141: PUSH
81142: LD_VAR 0 5
81146: PUSH
81147: LD_INT 2
81149: ARRAY
81150: ST_TO_ADDR
// break ;
81151: GO 81155
// end ;
81153: GO 81113
81155: POP
81156: POP
// if not weapon then
81157: LD_VAR 0 8
81161: NOT
81162: IFFALSE 81166
// continue ;
81164: GO 81062
// for k in factories do
81166: LD_ADDR_VAR 0 6
81170: PUSH
81171: LD_VAR 0 2
81175: PUSH
81176: FOR_IN
81177: IFFALSE 81242
// begin weapons := AvailableWeaponList ( k ) ;
81179: LD_ADDR_VAR 0 9
81183: PUSH
81184: LD_VAR 0 6
81188: PPUSH
81189: CALL_OW 478
81193: ST_TO_ADDR
// if not weapons then
81194: LD_VAR 0 9
81198: NOT
81199: IFFALSE 81203
// continue ;
81201: GO 81176
// if weapon in weapons then
81203: LD_VAR 0 8
81207: PUSH
81208: LD_VAR 0 9
81212: IN
81213: IFFALSE 81240
// begin result := [ i , weapon ] ;
81215: LD_ADDR_VAR 0 3
81219: PUSH
81220: LD_VAR 0 4
81224: PUSH
81225: LD_VAR 0 8
81229: PUSH
81230: EMPTY
81231: LIST
81232: LIST
81233: ST_TO_ADDR
// exit ;
81234: POP
81235: POP
81236: POP
81237: POP
81238: GO 81248
// end ; end ;
81240: GO 81176
81242: POP
81243: POP
// end ;
81244: GO 81062
81246: POP
81247: POP
// end ;
81248: LD_VAR 0 3
81252: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
81253: LD_INT 0
81255: PPUSH
// if not side or side > 8 then
81256: LD_VAR 0 3
81260: NOT
81261: IFTRUE 81273
81263: PUSH
81264: LD_VAR 0 3
81268: PUSH
81269: LD_INT 8
81271: GREATER
81272: OR
81273: IFFALSE 81277
// exit ;
81275: GO 81336
// if not range then
81277: LD_VAR 0 4
81281: NOT
81282: IFFALSE 81293
// range := - 12 ;
81284: LD_ADDR_VAR 0 4
81288: PUSH
81289: LD_INT 12
81291: NEG
81292: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
81293: LD_VAR 0 1
81297: PPUSH
81298: LD_VAR 0 2
81302: PPUSH
81303: LD_VAR 0 3
81307: PPUSH
81308: LD_VAR 0 4
81312: PPUSH
81313: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81317: LD_VAR 0 1
81321: PPUSH
81322: LD_VAR 0 2
81326: PPUSH
81327: LD_VAR 0 3
81331: PPUSH
81332: CALL_OW 331
// end ;
81336: LD_VAR 0 5
81340: RET
// export function Video ( mode ) ; begin
81341: LD_INT 0
81343: PPUSH
// ingame_video = mode ;
81344: LD_ADDR_OWVAR 52
81348: PUSH
81349: LD_VAR 0 1
81353: ST_TO_ADDR
// interface_hidden = mode ;
81354: LD_ADDR_OWVAR 54
81358: PUSH
81359: LD_VAR 0 1
81363: ST_TO_ADDR
// end ;
81364: LD_VAR 0 2
81368: RET
// export function Join ( array , element ) ; begin
81369: LD_INT 0
81371: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81372: LD_ADDR_VAR 0 3
81376: PUSH
81377: LD_VAR 0 1
81381: PPUSH
81382: LD_VAR 0 1
81386: PUSH
81387: LD_INT 1
81389: PLUS
81390: PPUSH
81391: LD_VAR 0 2
81395: PPUSH
81396: CALL_OW 1
81400: ST_TO_ADDR
// end ;
81401: LD_VAR 0 3
81405: RET
// export function JoinUnion ( array , element ) ; begin
81406: LD_INT 0
81408: PPUSH
// result := array union element ;
81409: LD_ADDR_VAR 0 3
81413: PUSH
81414: LD_VAR 0 1
81418: PUSH
81419: LD_VAR 0 2
81423: UNION
81424: ST_TO_ADDR
// end ;
81425: LD_VAR 0 3
81429: RET
// export function GetBehemoths ( side ) ; begin
81430: LD_INT 0
81432: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
81433: LD_ADDR_VAR 0 2
81437: PUSH
81438: LD_INT 22
81440: PUSH
81441: LD_VAR 0 1
81445: PUSH
81446: EMPTY
81447: LIST
81448: LIST
81449: PUSH
81450: LD_INT 31
81452: PUSH
81453: LD_INT 25
81455: PUSH
81456: EMPTY
81457: LIST
81458: LIST
81459: PUSH
81460: EMPTY
81461: LIST
81462: LIST
81463: PPUSH
81464: CALL_OW 69
81468: ST_TO_ADDR
// end ;
81469: LD_VAR 0 2
81473: RET
// export function Shuffle ( array ) ; var i , index ; begin
81474: LD_INT 0
81476: PPUSH
81477: PPUSH
81478: PPUSH
// result := [ ] ;
81479: LD_ADDR_VAR 0 2
81483: PUSH
81484: EMPTY
81485: ST_TO_ADDR
// if not array then
81486: LD_VAR 0 1
81490: NOT
81491: IFFALSE 81495
// exit ;
81493: GO 81594
// Randomize ;
81495: CALL_OW 10
// for i = array downto 1 do
81499: LD_ADDR_VAR 0 3
81503: PUSH
81504: DOUBLE
81505: LD_VAR 0 1
81509: INC
81510: ST_TO_ADDR
81511: LD_INT 1
81513: PUSH
81514: FOR_DOWNTO
81515: IFFALSE 81592
// begin index := rand ( 1 , array ) ;
81517: LD_ADDR_VAR 0 4
81521: PUSH
81522: LD_INT 1
81524: PPUSH
81525: LD_VAR 0 1
81529: PPUSH
81530: CALL_OW 12
81534: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81535: LD_ADDR_VAR 0 2
81539: PUSH
81540: LD_VAR 0 2
81544: PPUSH
81545: LD_VAR 0 2
81549: PUSH
81550: LD_INT 1
81552: PLUS
81553: PPUSH
81554: LD_VAR 0 1
81558: PUSH
81559: LD_VAR 0 4
81563: ARRAY
81564: PPUSH
81565: CALL_OW 2
81569: ST_TO_ADDR
// array := Delete ( array , index ) ;
81570: LD_ADDR_VAR 0 1
81574: PUSH
81575: LD_VAR 0 1
81579: PPUSH
81580: LD_VAR 0 4
81584: PPUSH
81585: CALL_OW 3
81589: ST_TO_ADDR
// end ;
81590: GO 81514
81592: POP
81593: POP
// end ;
81594: LD_VAR 0 2
81598: RET
// export function GetBaseMaterials ( base ) ; begin
81599: LD_INT 0
81601: PPUSH
// result := [ 0 , 0 , 0 ] ;
81602: LD_ADDR_VAR 0 2
81606: PUSH
81607: LD_INT 0
81609: PUSH
81610: LD_INT 0
81612: PUSH
81613: LD_INT 0
81615: PUSH
81616: EMPTY
81617: LIST
81618: LIST
81619: LIST
81620: ST_TO_ADDR
// if not base then
81621: LD_VAR 0 1
81625: NOT
81626: IFFALSE 81630
// exit ;
81628: GO 81679
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81630: LD_ADDR_VAR 0 2
81634: PUSH
81635: LD_VAR 0 1
81639: PPUSH
81640: LD_INT 1
81642: PPUSH
81643: CALL_OW 275
81647: PUSH
81648: LD_VAR 0 1
81652: PPUSH
81653: LD_INT 2
81655: PPUSH
81656: CALL_OW 275
81660: PUSH
81661: LD_VAR 0 1
81665: PPUSH
81666: LD_INT 3
81668: PPUSH
81669: CALL_OW 275
81673: PUSH
81674: EMPTY
81675: LIST
81676: LIST
81677: LIST
81678: ST_TO_ADDR
// end ;
81679: LD_VAR 0 2
81683: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81684: LD_INT 0
81686: PPUSH
81687: PPUSH
// result := array ;
81688: LD_ADDR_VAR 0 3
81692: PUSH
81693: LD_VAR 0 1
81697: ST_TO_ADDR
// if size >= result then
81698: LD_VAR 0 2
81702: PUSH
81703: LD_VAR 0 3
81707: GREATEREQUAL
81708: IFFALSE 81712
// exit ;
81710: GO 81762
// if size then
81712: LD_VAR 0 2
81716: IFFALSE 81762
// for i := array downto size do
81718: LD_ADDR_VAR 0 4
81722: PUSH
81723: DOUBLE
81724: LD_VAR 0 1
81728: INC
81729: ST_TO_ADDR
81730: LD_VAR 0 2
81734: PUSH
81735: FOR_DOWNTO
81736: IFFALSE 81760
// result := Delete ( result , result ) ;
81738: LD_ADDR_VAR 0 3
81742: PUSH
81743: LD_VAR 0 3
81747: PPUSH
81748: LD_VAR 0 3
81752: PPUSH
81753: CALL_OW 3
81757: ST_TO_ADDR
81758: GO 81735
81760: POP
81761: POP
// end ;
81762: LD_VAR 0 3
81766: RET
// export function ComExit ( unit ) ; var tmp ; begin
81767: LD_INT 0
81769: PPUSH
81770: PPUSH
// if not IsInUnit ( unit ) then
81771: LD_VAR 0 1
81775: PPUSH
81776: CALL_OW 310
81780: NOT
81781: IFFALSE 81785
// exit ;
81783: GO 81845
// tmp := IsInUnit ( unit ) ;
81785: LD_ADDR_VAR 0 3
81789: PUSH
81790: LD_VAR 0 1
81794: PPUSH
81795: CALL_OW 310
81799: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81800: LD_VAR 0 3
81804: PPUSH
81805: CALL_OW 247
81809: PUSH
81810: LD_INT 2
81812: EQUAL
81813: IFFALSE 81826
// ComExitVehicle ( unit ) else
81815: LD_VAR 0 1
81819: PPUSH
81820: CALL_OW 121
81824: GO 81835
// ComExitBuilding ( unit ) ;
81826: LD_VAR 0 1
81830: PPUSH
81831: CALL_OW 122
// result := tmp ;
81835: LD_ADDR_VAR 0 2
81839: PUSH
81840: LD_VAR 0 3
81844: ST_TO_ADDR
// end ;
81845: LD_VAR 0 2
81849: RET
// export function ComExitAll ( units ) ; var i ; begin
81850: LD_INT 0
81852: PPUSH
81853: PPUSH
// if not units then
81854: LD_VAR 0 1
81858: NOT
81859: IFFALSE 81863
// exit ;
81861: GO 81889
// for i in units do
81863: LD_ADDR_VAR 0 3
81867: PUSH
81868: LD_VAR 0 1
81872: PUSH
81873: FOR_IN
81874: IFFALSE 81887
// ComExit ( i ) ;
81876: LD_VAR 0 3
81880: PPUSH
81881: CALL 81767 0 1
81885: GO 81873
81887: POP
81888: POP
// end ;
81889: LD_VAR 0 2
81893: RET
// export function ResetHc ; begin
81894: LD_INT 0
81896: PPUSH
// InitHc ;
81897: CALL_OW 19
// hc_importance := 0 ;
81901: LD_ADDR_OWVAR 32
81905: PUSH
81906: LD_INT 0
81908: ST_TO_ADDR
// end ;
81909: LD_VAR 0 1
81913: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81914: LD_INT 0
81916: PPUSH
81917: PPUSH
81918: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81919: LD_ADDR_VAR 0 6
81923: PUSH
81924: LD_VAR 0 1
81928: PUSH
81929: LD_VAR 0 3
81933: PLUS
81934: PUSH
81935: LD_INT 2
81937: DIV
81938: ST_TO_ADDR
// if _x < 0 then
81939: LD_VAR 0 6
81943: PUSH
81944: LD_INT 0
81946: LESS
81947: IFFALSE 81964
// _x := _x * - 1 ;
81949: LD_ADDR_VAR 0 6
81953: PUSH
81954: LD_VAR 0 6
81958: PUSH
81959: LD_INT 1
81961: NEG
81962: MUL
81963: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81964: LD_ADDR_VAR 0 7
81968: PUSH
81969: LD_VAR 0 2
81973: PUSH
81974: LD_VAR 0 4
81978: PLUS
81979: PUSH
81980: LD_INT 2
81982: DIV
81983: ST_TO_ADDR
// if _y < 0 then
81984: LD_VAR 0 7
81988: PUSH
81989: LD_INT 0
81991: LESS
81992: IFFALSE 82009
// _y := _y * - 1 ;
81994: LD_ADDR_VAR 0 7
81998: PUSH
81999: LD_VAR 0 7
82003: PUSH
82004: LD_INT 1
82006: NEG
82007: MUL
82008: ST_TO_ADDR
// result := [ _x , _y ] ;
82009: LD_ADDR_VAR 0 5
82013: PUSH
82014: LD_VAR 0 6
82018: PUSH
82019: LD_VAR 0 7
82023: PUSH
82024: EMPTY
82025: LIST
82026: LIST
82027: ST_TO_ADDR
// end ;
82028: LD_VAR 0 5
82032: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
82033: LD_INT 0
82035: PPUSH
82036: PPUSH
82037: PPUSH
82038: PPUSH
// task := GetTaskList ( unit ) ;
82039: LD_ADDR_VAR 0 7
82043: PUSH
82044: LD_VAR 0 1
82048: PPUSH
82049: CALL_OW 437
82053: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
82054: LD_VAR 0 7
82058: NOT
82059: IFFALSE 82078
82061: PUSH
82062: LD_VAR 0 1
82066: PPUSH
82067: LD_VAR 0 2
82071: PPUSH
82072: CALL_OW 308
82076: NOT
82077: AND
82078: IFFALSE 82082
// exit ;
82080: GO 82200
// if IsInArea ( unit , area ) then
82082: LD_VAR 0 1
82086: PPUSH
82087: LD_VAR 0 2
82091: PPUSH
82092: CALL_OW 308
82096: IFFALSE 82114
// begin ComMoveToArea ( unit , goAway ) ;
82098: LD_VAR 0 1
82102: PPUSH
82103: LD_VAR 0 3
82107: PPUSH
82108: CALL_OW 113
// exit ;
82112: GO 82200
// end ; if task [ 1 ] [ 1 ] <> M then
82114: LD_VAR 0 7
82118: PUSH
82119: LD_INT 1
82121: ARRAY
82122: PUSH
82123: LD_INT 1
82125: ARRAY
82126: PUSH
82127: LD_STRING M
82129: NONEQUAL
82130: IFFALSE 82134
// exit ;
82132: GO 82200
// x := task [ 1 ] [ 2 ] ;
82134: LD_ADDR_VAR 0 5
82138: PUSH
82139: LD_VAR 0 7
82143: PUSH
82144: LD_INT 1
82146: ARRAY
82147: PUSH
82148: LD_INT 2
82150: ARRAY
82151: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
82152: LD_ADDR_VAR 0 6
82156: PUSH
82157: LD_VAR 0 7
82161: PUSH
82162: LD_INT 1
82164: ARRAY
82165: PUSH
82166: LD_INT 3
82168: ARRAY
82169: ST_TO_ADDR
// if InArea ( x , y , area ) then
82170: LD_VAR 0 5
82174: PPUSH
82175: LD_VAR 0 6
82179: PPUSH
82180: LD_VAR 0 2
82184: PPUSH
82185: CALL_OW 309
82189: IFFALSE 82200
// ComStop ( unit ) ;
82191: LD_VAR 0 1
82195: PPUSH
82196: CALL_OW 141
// end ;
82200: LD_VAR 0 4
82204: RET
// export function Abs ( value ) ; begin
82205: LD_INT 0
82207: PPUSH
// result := value ;
82208: LD_ADDR_VAR 0 2
82212: PUSH
82213: LD_VAR 0 1
82217: ST_TO_ADDR
// if value < 0 then
82218: LD_VAR 0 1
82222: PUSH
82223: LD_INT 0
82225: LESS
82226: IFFALSE 82243
// result := value * - 1 ;
82228: LD_ADDR_VAR 0 2
82232: PUSH
82233: LD_VAR 0 1
82237: PUSH
82238: LD_INT 1
82240: NEG
82241: MUL
82242: ST_TO_ADDR
// end ;
82243: LD_VAR 0 2
82247: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
82248: LD_INT 0
82250: PPUSH
82251: PPUSH
82252: PPUSH
82253: PPUSH
82254: PPUSH
82255: PPUSH
82256: PPUSH
82257: PPUSH
// if not unit or not building then
82258: LD_VAR 0 1
82262: NOT
82263: IFTRUE 82272
82265: PUSH
82266: LD_VAR 0 2
82270: NOT
82271: OR
82272: IFFALSE 82276
// exit ;
82274: GO 82504
// x := GetX ( building ) ;
82276: LD_ADDR_VAR 0 4
82280: PUSH
82281: LD_VAR 0 2
82285: PPUSH
82286: CALL_OW 250
82290: ST_TO_ADDR
// y := GetY ( building ) ;
82291: LD_ADDR_VAR 0 6
82295: PUSH
82296: LD_VAR 0 2
82300: PPUSH
82301: CALL_OW 251
82305: ST_TO_ADDR
// d := GetDir ( building ) ;
82306: LD_ADDR_VAR 0 8
82310: PUSH
82311: LD_VAR 0 2
82315: PPUSH
82316: CALL_OW 254
82320: ST_TO_ADDR
// r := 4 ;
82321: LD_ADDR_VAR 0 9
82325: PUSH
82326: LD_INT 4
82328: ST_TO_ADDR
// for i := 1 to 5 do
82329: LD_ADDR_VAR 0 10
82333: PUSH
82334: DOUBLE
82335: LD_INT 1
82337: DEC
82338: ST_TO_ADDR
82339: LD_INT 5
82341: PUSH
82342: FOR_TO
82343: IFFALSE 82502
// begin _x := ShiftX ( x , d , r + i ) ;
82345: LD_ADDR_VAR 0 5
82349: PUSH
82350: LD_VAR 0 4
82354: PPUSH
82355: LD_VAR 0 8
82359: PPUSH
82360: LD_VAR 0 9
82364: PUSH
82365: LD_VAR 0 10
82369: PLUS
82370: PPUSH
82371: CALL_OW 272
82375: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82376: LD_ADDR_VAR 0 7
82380: PUSH
82381: LD_VAR 0 6
82385: PPUSH
82386: LD_VAR 0 8
82390: PPUSH
82391: LD_VAR 0 9
82395: PUSH
82396: LD_VAR 0 10
82400: PLUS
82401: PPUSH
82402: CALL_OW 273
82406: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82407: LD_VAR 0 5
82411: PPUSH
82412: LD_VAR 0 7
82416: PPUSH
82417: CALL_OW 488
82421: IFFALSE 82456
82423: PUSH
82424: LD_VAR 0 5
82428: PPUSH
82429: LD_VAR 0 7
82433: PPUSH
82434: CALL_OW 428
82438: PPUSH
82439: CALL_OW 247
82443: PUSH
82444: LD_INT 3
82446: PUSH
82447: LD_INT 2
82449: PUSH
82450: EMPTY
82451: LIST
82452: LIST
82453: IN
82454: NOT
82455: AND
82456: IFFALSE 82500
// begin ComMoveXY ( unit , _x , _y ) ;
82458: LD_VAR 0 1
82462: PPUSH
82463: LD_VAR 0 5
82467: PPUSH
82468: LD_VAR 0 7
82472: PPUSH
82473: CALL_OW 111
// result := [ _x , _y ] ;
82477: LD_ADDR_VAR 0 3
82481: PUSH
82482: LD_VAR 0 5
82486: PUSH
82487: LD_VAR 0 7
82491: PUSH
82492: EMPTY
82493: LIST
82494: LIST
82495: ST_TO_ADDR
// exit ;
82496: POP
82497: POP
82498: GO 82504
// end ; end ;
82500: GO 82342
82502: POP
82503: POP
// end ;
82504: LD_VAR 0 3
82508: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82509: LD_INT 0
82511: PPUSH
82512: PPUSH
82513: PPUSH
// result := 0 ;
82514: LD_ADDR_VAR 0 3
82518: PUSH
82519: LD_INT 0
82521: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82522: LD_VAR 0 1
82526: PUSH
82527: LD_INT 0
82529: LESS
82530: IFTRUE 82542
82532: PUSH
82533: LD_VAR 0 1
82537: PUSH
82538: LD_INT 8
82540: GREATER
82541: OR
82542: IFTRUE 82554
82544: PUSH
82545: LD_VAR 0 2
82549: PUSH
82550: LD_INT 0
82552: LESS
82553: OR
82554: IFTRUE 82566
82556: PUSH
82557: LD_VAR 0 2
82561: PUSH
82562: LD_INT 8
82564: GREATER
82565: OR
82566: IFFALSE 82570
// exit ;
82568: GO 82645
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82570: LD_ADDR_VAR 0 4
82574: PUSH
82575: LD_INT 22
82577: PUSH
82578: LD_VAR 0 2
82582: PUSH
82583: EMPTY
82584: LIST
82585: LIST
82586: PPUSH
82587: CALL_OW 69
82591: PUSH
82592: FOR_IN
82593: IFFALSE 82643
// begin un := UnitShoot ( i ) ;
82595: LD_ADDR_VAR 0 5
82599: PUSH
82600: LD_VAR 0 4
82604: PPUSH
82605: CALL_OW 504
82609: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82610: LD_VAR 0 5
82614: PPUSH
82615: CALL_OW 255
82619: PUSH
82620: LD_VAR 0 1
82624: EQUAL
82625: IFFALSE 82641
// begin result := un ;
82627: LD_ADDR_VAR 0 3
82631: PUSH
82632: LD_VAR 0 5
82636: ST_TO_ADDR
// exit ;
82637: POP
82638: POP
82639: GO 82645
// end ; end ;
82641: GO 82592
82643: POP
82644: POP
// end ;
82645: LD_VAR 0 3
82649: RET
// export function GetCargoBay ( units ) ; begin
82650: LD_INT 0
82652: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82653: LD_ADDR_VAR 0 2
82657: PUSH
82658: LD_VAR 0 1
82662: PPUSH
82663: LD_INT 2
82665: PUSH
82666: LD_INT 34
82668: PUSH
82669: LD_INT 12
82671: PUSH
82672: EMPTY
82673: LIST
82674: LIST
82675: PUSH
82676: LD_INT 34
82678: PUSH
82679: LD_INT 51
82681: PUSH
82682: EMPTY
82683: LIST
82684: LIST
82685: PUSH
82686: LD_INT 34
82688: PUSH
82689: LD_INT 32
82691: PUSH
82692: EMPTY
82693: LIST
82694: LIST
82695: PUSH
82696: LD_INT 34
82698: PUSH
82699: LD_INT 89
82701: PUSH
82702: EMPTY
82703: LIST
82704: LIST
82705: PUSH
82706: EMPTY
82707: LIST
82708: LIST
82709: LIST
82710: LIST
82711: LIST
82712: PPUSH
82713: CALL_OW 72
82717: ST_TO_ADDR
// end ;
82718: LD_VAR 0 2
82722: RET
// export function Negate ( value ) ; begin
82723: LD_INT 0
82725: PPUSH
// result := not value ;
82726: LD_ADDR_VAR 0 2
82730: PUSH
82731: LD_VAR 0 1
82735: NOT
82736: ST_TO_ADDR
// end ;
82737: LD_VAR 0 2
82741: RET
// export function Inc ( value ) ; begin
82742: LD_INT 0
82744: PPUSH
// result := value + 1 ;
82745: LD_ADDR_VAR 0 2
82749: PUSH
82750: LD_VAR 0 1
82754: PUSH
82755: LD_INT 1
82757: PLUS
82758: ST_TO_ADDR
// end ;
82759: LD_VAR 0 2
82763: RET
// export function Dec ( value ) ; begin
82764: LD_INT 0
82766: PPUSH
// result := value - 1 ;
82767: LD_ADDR_VAR 0 2
82771: PUSH
82772: LD_VAR 0 1
82776: PUSH
82777: LD_INT 1
82779: MINUS
82780: ST_TO_ADDR
// end ;
82781: LD_VAR 0 2
82785: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82786: LD_INT 0
82788: PPUSH
82789: PPUSH
82790: PPUSH
82791: PPUSH
82792: PPUSH
82793: PPUSH
82794: PPUSH
82795: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
82796: LD_VAR 0 1
82800: PPUSH
82801: LD_VAR 0 2
82805: PPUSH
82806: CALL_OW 488
82810: NOT
82811: IFTRUE 82830
82813: PUSH
82814: LD_VAR 0 3
82818: PPUSH
82819: LD_VAR 0 4
82823: PPUSH
82824: CALL_OW 488
82828: NOT
82829: OR
82830: IFFALSE 82843
// begin result := - 1 ;
82832: LD_ADDR_VAR 0 5
82836: PUSH
82837: LD_INT 1
82839: NEG
82840: ST_TO_ADDR
// exit ;
82841: GO 83078
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
82843: LD_ADDR_VAR 0 12
82847: PUSH
82848: LD_VAR 0 1
82852: PPUSH
82853: LD_VAR 0 2
82857: PPUSH
82858: LD_VAR 0 3
82862: PPUSH
82863: LD_VAR 0 4
82867: PPUSH
82868: CALL 81914 0 4
82872: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
82873: LD_ADDR_VAR 0 11
82877: PUSH
82878: LD_VAR 0 1
82882: PPUSH
82883: LD_VAR 0 2
82887: PPUSH
82888: LD_VAR 0 12
82892: PUSH
82893: LD_INT 1
82895: ARRAY
82896: PPUSH
82897: LD_VAR 0 12
82901: PUSH
82902: LD_INT 2
82904: ARRAY
82905: PPUSH
82906: CALL_OW 298
82910: ST_TO_ADDR
// distance := 9999 ;
82911: LD_ADDR_VAR 0 10
82915: PUSH
82916: LD_INT 9999
82918: ST_TO_ADDR
// for i := 0 to 5 do
82919: LD_ADDR_VAR 0 6
82923: PUSH
82924: DOUBLE
82925: LD_INT 0
82927: DEC
82928: ST_TO_ADDR
82929: LD_INT 5
82931: PUSH
82932: FOR_TO
82933: IFFALSE 83076
// begin _x := ShiftX ( x1 , i , centerDist ) ;
82935: LD_ADDR_VAR 0 7
82939: PUSH
82940: LD_VAR 0 1
82944: PPUSH
82945: LD_VAR 0 6
82949: PPUSH
82950: LD_VAR 0 11
82954: PPUSH
82955: CALL_OW 272
82959: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
82960: LD_ADDR_VAR 0 8
82964: PUSH
82965: LD_VAR 0 2
82969: PPUSH
82970: LD_VAR 0 6
82974: PPUSH
82975: LD_VAR 0 11
82979: PPUSH
82980: CALL_OW 273
82984: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82985: LD_VAR 0 7
82989: PPUSH
82990: LD_VAR 0 8
82994: PPUSH
82995: CALL_OW 488
82999: NOT
83000: IFFALSE 83004
// continue ;
83002: GO 82932
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
83004: LD_ADDR_VAR 0 9
83008: PUSH
83009: LD_VAR 0 12
83013: PUSH
83014: LD_INT 1
83016: ARRAY
83017: PPUSH
83018: LD_VAR 0 12
83022: PUSH
83023: LD_INT 2
83025: ARRAY
83026: PPUSH
83027: LD_VAR 0 7
83031: PPUSH
83032: LD_VAR 0 8
83036: PPUSH
83037: CALL_OW 298
83041: ST_TO_ADDR
// if tmp < distance then
83042: LD_VAR 0 9
83046: PUSH
83047: LD_VAR 0 10
83051: LESS
83052: IFFALSE 83074
// begin result := i ;
83054: LD_ADDR_VAR 0 5
83058: PUSH
83059: LD_VAR 0 6
83063: ST_TO_ADDR
// distance := tmp ;
83064: LD_ADDR_VAR 0 10
83068: PUSH
83069: LD_VAR 0 9
83073: ST_TO_ADDR
// end ; end ;
83074: GO 82932
83076: POP
83077: POP
// end ;
83078: LD_VAR 0 5
83082: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83083: LD_INT 0
83085: PPUSH
83086: PPUSH
// if not driver or not IsInUnit ( driver ) then
83087: LD_VAR 0 1
83091: NOT
83092: IFTRUE 83106
83094: PUSH
83095: LD_VAR 0 1
83099: PPUSH
83100: CALL_OW 310
83104: NOT
83105: OR
83106: IFFALSE 83110
// exit ;
83108: GO 83200
// vehicle := IsInUnit ( driver ) ;
83110: LD_ADDR_VAR 0 3
83114: PUSH
83115: LD_VAR 0 1
83119: PPUSH
83120: CALL_OW 310
83124: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83125: LD_VAR 0 1
83129: PPUSH
83130: LD_STRING \
83132: PUSH
83133: LD_INT 0
83135: PUSH
83136: LD_INT 0
83138: PUSH
83139: LD_INT 0
83141: PUSH
83142: LD_INT 0
83144: PUSH
83145: LD_INT 0
83147: PUSH
83148: LD_INT 0
83150: PUSH
83151: EMPTY
83152: LIST
83153: LIST
83154: LIST
83155: LIST
83156: LIST
83157: LIST
83158: LIST
83159: PUSH
83160: LD_STRING E
83162: PUSH
83163: LD_INT 0
83165: PUSH
83166: LD_INT 0
83168: PUSH
83169: LD_VAR 0 3
83173: PUSH
83174: LD_INT 0
83176: PUSH
83177: LD_INT 0
83179: PUSH
83180: LD_INT 0
83182: PUSH
83183: EMPTY
83184: LIST
83185: LIST
83186: LIST
83187: LIST
83188: LIST
83189: LIST
83190: LIST
83191: PUSH
83192: EMPTY
83193: LIST
83194: LIST
83195: PPUSH
83196: CALL_OW 446
// end ;
83200: LD_VAR 0 2
83204: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
83205: LD_INT 0
83207: PPUSH
83208: PPUSH
// if not driver or not IsInUnit ( driver ) then
83209: LD_VAR 0 1
83213: NOT
83214: IFTRUE 83228
83216: PUSH
83217: LD_VAR 0 1
83221: PPUSH
83222: CALL_OW 310
83226: NOT
83227: OR
83228: IFFALSE 83232
// exit ;
83230: GO 83322
// vehicle := IsInUnit ( driver ) ;
83232: LD_ADDR_VAR 0 3
83236: PUSH
83237: LD_VAR 0 1
83241: PPUSH
83242: CALL_OW 310
83246: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
83247: LD_VAR 0 1
83251: PPUSH
83252: LD_STRING \
83254: PUSH
83255: LD_INT 0
83257: PUSH
83258: LD_INT 0
83260: PUSH
83261: LD_INT 0
83263: PUSH
83264: LD_INT 0
83266: PUSH
83267: LD_INT 0
83269: PUSH
83270: LD_INT 0
83272: PUSH
83273: EMPTY
83274: LIST
83275: LIST
83276: LIST
83277: LIST
83278: LIST
83279: LIST
83280: LIST
83281: PUSH
83282: LD_STRING E
83284: PUSH
83285: LD_INT 0
83287: PUSH
83288: LD_INT 0
83290: PUSH
83291: LD_VAR 0 3
83295: PUSH
83296: LD_INT 0
83298: PUSH
83299: LD_INT 0
83301: PUSH
83302: LD_INT 0
83304: PUSH
83305: EMPTY
83306: LIST
83307: LIST
83308: LIST
83309: LIST
83310: LIST
83311: LIST
83312: LIST
83313: PUSH
83314: EMPTY
83315: LIST
83316: LIST
83317: PPUSH
83318: CALL_OW 447
// end ;
83322: LD_VAR 0 2
83326: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
83327: LD_INT 0
83329: PPUSH
83330: PPUSH
83331: PPUSH
// tmp := [ ] ;
83332: LD_ADDR_VAR 0 5
83336: PUSH
83337: EMPTY
83338: ST_TO_ADDR
// for i in units do
83339: LD_ADDR_VAR 0 4
83343: PUSH
83344: LD_VAR 0 1
83348: PUSH
83349: FOR_IN
83350: IFFALSE 83388
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
83352: LD_ADDR_VAR 0 5
83356: PUSH
83357: LD_VAR 0 5
83361: PPUSH
83362: LD_VAR 0 5
83366: PUSH
83367: LD_INT 1
83369: PLUS
83370: PPUSH
83371: LD_VAR 0 4
83375: PPUSH
83376: CALL_OW 256
83380: PPUSH
83381: CALL_OW 2
83385: ST_TO_ADDR
83386: GO 83349
83388: POP
83389: POP
// if not tmp then
83390: LD_VAR 0 5
83394: NOT
83395: IFFALSE 83399
// exit ;
83397: GO 83447
// if asc then
83399: LD_VAR 0 2
83403: IFFALSE 83427
// result := SortListByListAsc ( units , tmp ) else
83405: LD_ADDR_VAR 0 3
83409: PUSH
83410: LD_VAR 0 1
83414: PPUSH
83415: LD_VAR 0 5
83419: PPUSH
83420: CALL_OW 76
83424: ST_TO_ADDR
83425: GO 83447
// result := SortListByListDesc ( units , tmp ) ;
83427: LD_ADDR_VAR 0 3
83431: PUSH
83432: LD_VAR 0 1
83436: PPUSH
83437: LD_VAR 0 5
83441: PPUSH
83442: CALL_OW 77
83446: ST_TO_ADDR
// end ;
83447: LD_VAR 0 3
83451: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83452: LD_INT 0
83454: PPUSH
83455: PPUSH
// task := GetTaskList ( mech ) ;
83456: LD_ADDR_VAR 0 4
83460: PUSH
83461: LD_VAR 0 1
83465: PPUSH
83466: CALL_OW 437
83470: ST_TO_ADDR
// if not task then
83471: LD_VAR 0 4
83475: NOT
83476: IFFALSE 83480
// exit ;
83478: GO 83524
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83480: LD_ADDR_VAR 0 3
83484: PUSH
83485: LD_VAR 0 4
83489: PUSH
83490: LD_INT 1
83492: ARRAY
83493: PUSH
83494: LD_INT 1
83496: ARRAY
83497: PUSH
83498: LD_STRING r
83500: EQUAL
83501: IFFALSE 83523
83503: PUSH
83504: LD_VAR 0 4
83508: PUSH
83509: LD_INT 1
83511: ARRAY
83512: PUSH
83513: LD_INT 4
83515: ARRAY
83516: PUSH
83517: LD_VAR 0 2
83521: EQUAL
83522: AND
83523: ST_TO_ADDR
// end ;
83524: LD_VAR 0 3
83528: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83529: LD_INT 0
83531: PPUSH
// SetDir ( unit , d ) ;
83532: LD_VAR 0 1
83536: PPUSH
83537: LD_VAR 0 4
83541: PPUSH
83542: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
83546: LD_ADDR_VAR 0 6
83550: PUSH
83551: LD_VAR 0 1
83555: PPUSH
83556: LD_VAR 0 2
83560: PPUSH
83561: LD_VAR 0 3
83565: PPUSH
83566: LD_VAR 0 5
83570: PPUSH
83571: CALL_OW 48
83575: ST_TO_ADDR
// end ;
83576: LD_VAR 0 6
83580: RET
// export function ToNaturalNumber ( number ) ; begin
83581: LD_INT 0
83583: PPUSH
// result := number div 1 ;
83584: LD_ADDR_VAR 0 2
83588: PUSH
83589: LD_VAR 0 1
83593: PUSH
83594: LD_INT 1
83596: DIV
83597: ST_TO_ADDR
// if number < 0 then
83598: LD_VAR 0 1
83602: PUSH
83603: LD_INT 0
83605: LESS
83606: IFFALSE 83616
// result := 0 ;
83608: LD_ADDR_VAR 0 2
83612: PUSH
83613: LD_INT 0
83615: ST_TO_ADDR
// end ;
83616: LD_VAR 0 2
83620: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
83621: LD_INT 0
83623: PPUSH
83624: PPUSH
83625: PPUSH
// if not buildings then
83626: LD_VAR 0 1
83630: NOT
83631: IFFALSE 83635
// exit ;
83633: GO 83750
// tmp := [ ] ;
83635: LD_ADDR_VAR 0 5
83639: PUSH
83640: EMPTY
83641: ST_TO_ADDR
// for b in buildings do
83642: LD_ADDR_VAR 0 4
83646: PUSH
83647: LD_VAR 0 1
83651: PUSH
83652: FOR_IN
83653: IFFALSE 83691
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
83655: LD_ADDR_VAR 0 5
83659: PUSH
83660: LD_VAR 0 5
83664: PPUSH
83665: LD_VAR 0 5
83669: PUSH
83670: LD_INT 1
83672: PLUS
83673: PPUSH
83674: LD_VAR 0 4
83678: PPUSH
83679: CALL_OW 266
83683: PPUSH
83684: CALL_OW 1
83688: ST_TO_ADDR
83689: GO 83652
83691: POP
83692: POP
// if not tmp then
83693: LD_VAR 0 5
83697: NOT
83698: IFFALSE 83702
// exit ;
83700: GO 83750
// if asc then
83702: LD_VAR 0 2
83706: IFFALSE 83730
// result := SortListByListAsc ( buildings , tmp ) else
83708: LD_ADDR_VAR 0 3
83712: PUSH
83713: LD_VAR 0 1
83717: PPUSH
83718: LD_VAR 0 5
83722: PPUSH
83723: CALL_OW 76
83727: ST_TO_ADDR
83728: GO 83750
// result := SortListByListDesc ( buildings , tmp ) ;
83730: LD_ADDR_VAR 0 3
83734: PUSH
83735: LD_VAR 0 1
83739: PPUSH
83740: LD_VAR 0 5
83744: PPUSH
83745: CALL_OW 77
83749: ST_TO_ADDR
// end ;
83750: LD_VAR 0 3
83754: RET
// export function SortByClass ( units , class ) ; var un ; begin
83755: LD_INT 0
83757: PPUSH
83758: PPUSH
// if not units or not class then
83759: LD_VAR 0 1
83763: NOT
83764: IFTRUE 83773
83766: PUSH
83767: LD_VAR 0 2
83771: NOT
83772: OR
83773: IFFALSE 83777
// exit ;
83775: GO 83872
// result := [ ] ;
83777: LD_ADDR_VAR 0 3
83781: PUSH
83782: EMPTY
83783: ST_TO_ADDR
// for un in units do
83784: LD_ADDR_VAR 0 4
83788: PUSH
83789: LD_VAR 0 1
83793: PUSH
83794: FOR_IN
83795: IFFALSE 83870
// if GetClass ( un ) = class then
83797: LD_VAR 0 4
83801: PPUSH
83802: CALL_OW 257
83806: PUSH
83807: LD_VAR 0 2
83811: EQUAL
83812: IFFALSE 83839
// result := Insert ( result , 1 , un ) else
83814: LD_ADDR_VAR 0 3
83818: PUSH
83819: LD_VAR 0 3
83823: PPUSH
83824: LD_INT 1
83826: PPUSH
83827: LD_VAR 0 4
83831: PPUSH
83832: CALL_OW 2
83836: ST_TO_ADDR
83837: GO 83868
// result := Replace ( result , result + 1 , un ) ;
83839: LD_ADDR_VAR 0 3
83843: PUSH
83844: LD_VAR 0 3
83848: PPUSH
83849: LD_VAR 0 3
83853: PUSH
83854: LD_INT 1
83856: PLUS
83857: PPUSH
83858: LD_VAR 0 4
83862: PPUSH
83863: CALL_OW 1
83867: ST_TO_ADDR
83868: GO 83794
83870: POP
83871: POP
// end ;
83872: LD_VAR 0 3
83876: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83877: LD_INT 0
83879: PPUSH
83880: PPUSH
83881: PPUSH
83882: PPUSH
83883: PPUSH
83884: PPUSH
83885: PPUSH
// result := [ ] ;
83886: LD_ADDR_VAR 0 4
83890: PUSH
83891: EMPTY
83892: ST_TO_ADDR
// if x - r < 0 then
83893: LD_VAR 0 1
83897: PUSH
83898: LD_VAR 0 3
83902: MINUS
83903: PUSH
83904: LD_INT 0
83906: LESS
83907: IFFALSE 83919
// min_x := 0 else
83909: LD_ADDR_VAR 0 8
83913: PUSH
83914: LD_INT 0
83916: ST_TO_ADDR
83917: GO 83935
// min_x := x - r ;
83919: LD_ADDR_VAR 0 8
83923: PUSH
83924: LD_VAR 0 1
83928: PUSH
83929: LD_VAR 0 3
83933: MINUS
83934: ST_TO_ADDR
// if y - r < 0 then
83935: LD_VAR 0 2
83939: PUSH
83940: LD_VAR 0 3
83944: MINUS
83945: PUSH
83946: LD_INT 0
83948: LESS
83949: IFFALSE 83961
// min_y := 0 else
83951: LD_ADDR_VAR 0 7
83955: PUSH
83956: LD_INT 0
83958: ST_TO_ADDR
83959: GO 83977
// min_y := y - r ;
83961: LD_ADDR_VAR 0 7
83965: PUSH
83966: LD_VAR 0 2
83970: PUSH
83971: LD_VAR 0 3
83975: MINUS
83976: ST_TO_ADDR
// max_x := x + r ;
83977: LD_ADDR_VAR 0 9
83981: PUSH
83982: LD_VAR 0 1
83986: PUSH
83987: LD_VAR 0 3
83991: PLUS
83992: ST_TO_ADDR
// max_y := y + r ;
83993: LD_ADDR_VAR 0 10
83997: PUSH
83998: LD_VAR 0 2
84002: PUSH
84003: LD_VAR 0 3
84007: PLUS
84008: ST_TO_ADDR
// for _x = min_x to max_x do
84009: LD_ADDR_VAR 0 5
84013: PUSH
84014: DOUBLE
84015: LD_VAR 0 8
84019: DEC
84020: ST_TO_ADDR
84021: LD_VAR 0 9
84025: PUSH
84026: FOR_TO
84027: IFFALSE 84128
// for _y = min_y to max_y do
84029: LD_ADDR_VAR 0 6
84033: PUSH
84034: DOUBLE
84035: LD_VAR 0 7
84039: DEC
84040: ST_TO_ADDR
84041: LD_VAR 0 10
84045: PUSH
84046: FOR_TO
84047: IFFALSE 84124
// begin if not ValidHex ( _x , _y ) then
84049: LD_VAR 0 5
84053: PPUSH
84054: LD_VAR 0 6
84058: PPUSH
84059: CALL_OW 488
84063: NOT
84064: IFFALSE 84068
// continue ;
84066: GO 84046
// if GetResourceTypeXY ( _x , _y ) then
84068: LD_VAR 0 5
84072: PPUSH
84073: LD_VAR 0 6
84077: PPUSH
84078: CALL_OW 283
84082: IFFALSE 84122
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
84084: LD_ADDR_VAR 0 4
84088: PUSH
84089: LD_VAR 0 4
84093: PPUSH
84094: LD_VAR 0 4
84098: PUSH
84099: LD_INT 1
84101: PLUS
84102: PPUSH
84103: LD_VAR 0 5
84107: PUSH
84108: LD_VAR 0 6
84112: PUSH
84113: EMPTY
84114: LIST
84115: LIST
84116: PPUSH
84117: CALL_OW 1
84121: ST_TO_ADDR
// end ;
84122: GO 84046
84124: POP
84125: POP
84126: GO 84026
84128: POP
84129: POP
// end ;
84130: LD_VAR 0 4
84134: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
84135: LD_INT 0
84137: PPUSH
84138: PPUSH
84139: PPUSH
84140: PPUSH
84141: PPUSH
84142: PPUSH
84143: PPUSH
84144: PPUSH
// if not units then
84145: LD_VAR 0 1
84149: NOT
84150: IFFALSE 84154
// exit ;
84152: GO 84686
// result := UnitFilter ( units , [ f_ok ] ) ;
84154: LD_ADDR_VAR 0 3
84158: PUSH
84159: LD_VAR 0 1
84163: PPUSH
84164: LD_INT 50
84166: PUSH
84167: EMPTY
84168: LIST
84169: PPUSH
84170: CALL_OW 72
84174: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
84175: LD_ADDR_VAR 0 8
84179: PUSH
84180: LD_VAR 0 1
84184: PUSH
84185: LD_INT 1
84187: ARRAY
84188: PPUSH
84189: CALL_OW 255
84193: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
84194: LD_ADDR_VAR 0 10
84198: PUSH
84199: LD_INT 29
84201: PUSH
84202: LD_INT 91
84204: PUSH
84205: LD_INT 49
84207: PUSH
84208: EMPTY
84209: LIST
84210: LIST
84211: LIST
84212: ST_TO_ADDR
// if not result then
84213: LD_VAR 0 3
84217: NOT
84218: IFFALSE 84222
// exit ;
84220: GO 84686
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
84222: LD_ADDR_VAR 0 5
84226: PUSH
84227: LD_INT 81
84229: PUSH
84230: LD_VAR 0 8
84234: PUSH
84235: EMPTY
84236: LIST
84237: LIST
84238: PPUSH
84239: CALL_OW 69
84243: ST_TO_ADDR
// for i in result do
84244: LD_ADDR_VAR 0 4
84248: PUSH
84249: LD_VAR 0 3
84253: PUSH
84254: FOR_IN
84255: IFFALSE 84684
// begin tag := GetTag ( i ) + 1 ;
84257: LD_ADDR_VAR 0 9
84261: PUSH
84262: LD_VAR 0 4
84266: PPUSH
84267: CALL_OW 110
84271: PUSH
84272: LD_INT 1
84274: PLUS
84275: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
84276: LD_ADDR_VAR 0 7
84280: PUSH
84281: LD_VAR 0 4
84285: PPUSH
84286: CALL_OW 250
84290: PPUSH
84291: LD_VAR 0 4
84295: PPUSH
84296: CALL_OW 251
84300: PPUSH
84301: LD_INT 4
84303: PPUSH
84304: CALL 83877 0 3
84308: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
84309: LD_VAR 0 4
84313: PPUSH
84314: CALL_OW 247
84318: PUSH
84319: LD_INT 2
84321: EQUAL
84322: IFFALSE 84334
84324: PUSH
84325: LD_VAR 0 7
84329: PUSH
84330: LD_INT 2
84332: GREATER
84333: AND
84334: IFFALSE 84354
84336: PUSH
84337: LD_VAR 0 4
84341: PPUSH
84342: CALL_OW 264
84346: PUSH
84347: LD_VAR 0 10
84351: IN
84352: NOT
84353: AND
84354: IFFALSE 84393
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
84356: LD_VAR 0 4
84360: PPUSH
84361: LD_VAR 0 7
84365: PUSH
84366: LD_INT 1
84368: ARRAY
84369: PUSH
84370: LD_INT 1
84372: ARRAY
84373: PPUSH
84374: LD_VAR 0 7
84378: PUSH
84379: LD_INT 1
84381: ARRAY
84382: PUSH
84383: LD_INT 2
84385: ARRAY
84386: PPUSH
84387: CALL_OW 116
84391: GO 84682
// if path > tag then
84393: LD_VAR 0 2
84397: PUSH
84398: LD_VAR 0 9
84402: GREATER
84403: IFFALSE 84611
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
84405: LD_ADDR_VAR 0 6
84409: PUSH
84410: LD_VAR 0 5
84414: PPUSH
84415: LD_INT 91
84417: PUSH
84418: LD_VAR 0 4
84422: PUSH
84423: LD_INT 8
84425: PUSH
84426: EMPTY
84427: LIST
84428: LIST
84429: LIST
84430: PPUSH
84431: CALL_OW 72
84435: ST_TO_ADDR
// if nearEnemy then
84436: LD_VAR 0 6
84440: IFFALSE 84509
// begin if GetWeapon ( i ) = ru_time_lapser then
84442: LD_VAR 0 4
84446: PPUSH
84447: CALL_OW 264
84451: PUSH
84452: LD_INT 49
84454: EQUAL
84455: IFFALSE 84483
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
84457: LD_VAR 0 4
84461: PPUSH
84462: LD_VAR 0 6
84466: PPUSH
84467: LD_VAR 0 4
84471: PPUSH
84472: CALL_OW 74
84476: PPUSH
84477: CALL_OW 112
84481: GO 84507
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
84483: LD_VAR 0 4
84487: PPUSH
84488: LD_VAR 0 6
84492: PPUSH
84493: LD_VAR 0 4
84497: PPUSH
84498: CALL_OW 74
84502: PPUSH
84503: CALL 85767 0 2
// end else
84507: GO 84609
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
84509: LD_VAR 0 4
84513: PPUSH
84514: LD_VAR 0 2
84518: PUSH
84519: LD_VAR 0 9
84523: ARRAY
84524: PUSH
84525: LD_INT 1
84527: ARRAY
84528: PPUSH
84529: LD_VAR 0 2
84533: PUSH
84534: LD_VAR 0 9
84538: ARRAY
84539: PUSH
84540: LD_INT 2
84542: ARRAY
84543: PPUSH
84544: CALL_OW 297
84548: PUSH
84549: LD_INT 6
84551: GREATER
84552: IFFALSE 84595
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
84554: LD_VAR 0 4
84558: PPUSH
84559: LD_VAR 0 2
84563: PUSH
84564: LD_VAR 0 9
84568: ARRAY
84569: PUSH
84570: LD_INT 1
84572: ARRAY
84573: PPUSH
84574: LD_VAR 0 2
84578: PUSH
84579: LD_VAR 0 9
84583: ARRAY
84584: PUSH
84585: LD_INT 2
84587: ARRAY
84588: PPUSH
84589: CALL_OW 114
84593: GO 84609
// SetTag ( i , tag ) ;
84595: LD_VAR 0 4
84599: PPUSH
84600: LD_VAR 0 9
84604: PPUSH
84605: CALL_OW 109
// end else
84609: GO 84682
// if enemy then
84611: LD_VAR 0 5
84615: IFFALSE 84682
// begin if GetWeapon ( i ) = ru_time_lapser then
84617: LD_VAR 0 4
84621: PPUSH
84622: CALL_OW 264
84626: PUSH
84627: LD_INT 49
84629: EQUAL
84630: IFFALSE 84658
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84632: LD_VAR 0 4
84636: PPUSH
84637: LD_VAR 0 5
84641: PPUSH
84642: LD_VAR 0 4
84646: PPUSH
84647: CALL_OW 74
84651: PPUSH
84652: CALL_OW 112
84656: GO 84682
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84658: LD_VAR 0 4
84662: PPUSH
84663: LD_VAR 0 5
84667: PPUSH
84668: LD_VAR 0 4
84672: PPUSH
84673: CALL_OW 74
84677: PPUSH
84678: CALL 85767 0 2
// end ; end ;
84682: GO 84254
84684: POP
84685: POP
// end ;
84686: LD_VAR 0 3
84690: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84691: LD_INT 0
84693: PPUSH
84694: PPUSH
84695: PPUSH
// if not unit or IsInUnit ( unit ) then
84696: LD_VAR 0 1
84700: NOT
84701: IFTRUE 84714
84703: PUSH
84704: LD_VAR 0 1
84708: PPUSH
84709: CALL_OW 310
84713: OR
84714: IFFALSE 84718
// exit ;
84716: GO 84809
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84718: LD_ADDR_VAR 0 4
84722: PUSH
84723: LD_VAR 0 1
84727: PPUSH
84728: CALL_OW 250
84732: PPUSH
84733: LD_VAR 0 2
84737: PPUSH
84738: LD_INT 1
84740: PPUSH
84741: CALL_OW 272
84745: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84746: LD_ADDR_VAR 0 5
84750: PUSH
84751: LD_VAR 0 1
84755: PPUSH
84756: CALL_OW 251
84760: PPUSH
84761: LD_VAR 0 2
84765: PPUSH
84766: LD_INT 1
84768: PPUSH
84769: CALL_OW 273
84773: ST_TO_ADDR
// if ValidHex ( x , y ) then
84774: LD_VAR 0 4
84778: PPUSH
84779: LD_VAR 0 5
84783: PPUSH
84784: CALL_OW 488
84788: IFFALSE 84809
// ComTurnXY ( unit , x , y ) ;
84790: LD_VAR 0 1
84794: PPUSH
84795: LD_VAR 0 4
84799: PPUSH
84800: LD_VAR 0 5
84804: PPUSH
84805: CALL_OW 118
// end ;
84809: LD_VAR 0 3
84813: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84814: LD_INT 0
84816: PPUSH
84817: PPUSH
// result := false ;
84818: LD_ADDR_VAR 0 3
84822: PUSH
84823: LD_INT 0
84825: ST_TO_ADDR
// if not units then
84826: LD_VAR 0 2
84830: NOT
84831: IFFALSE 84835
// exit ;
84833: GO 84880
// for i in units do
84835: LD_ADDR_VAR 0 4
84839: PUSH
84840: LD_VAR 0 2
84844: PUSH
84845: FOR_IN
84846: IFFALSE 84878
// if See ( side , i ) then
84848: LD_VAR 0 1
84852: PPUSH
84853: LD_VAR 0 4
84857: PPUSH
84858: CALL_OW 292
84862: IFFALSE 84876
// begin result := true ;
84864: LD_ADDR_VAR 0 3
84868: PUSH
84869: LD_INT 1
84871: ST_TO_ADDR
// exit ;
84872: POP
84873: POP
84874: GO 84880
// end ;
84876: GO 84845
84878: POP
84879: POP
// end ;
84880: LD_VAR 0 3
84884: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84885: LD_INT 0
84887: PPUSH
84888: PPUSH
84889: PPUSH
84890: PPUSH
// if not unit or not points then
84891: LD_VAR 0 1
84895: NOT
84896: IFTRUE 84905
84898: PUSH
84899: LD_VAR 0 2
84903: NOT
84904: OR
84905: IFFALSE 84909
// exit ;
84907: GO 84999
// dist := 99999 ;
84909: LD_ADDR_VAR 0 5
84913: PUSH
84914: LD_INT 99999
84916: ST_TO_ADDR
// for i in points do
84917: LD_ADDR_VAR 0 4
84921: PUSH
84922: LD_VAR 0 2
84926: PUSH
84927: FOR_IN
84928: IFFALSE 84997
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84930: LD_ADDR_VAR 0 6
84934: PUSH
84935: LD_VAR 0 1
84939: PPUSH
84940: LD_VAR 0 4
84944: PUSH
84945: LD_INT 1
84947: ARRAY
84948: PPUSH
84949: LD_VAR 0 4
84953: PUSH
84954: LD_INT 2
84956: ARRAY
84957: PPUSH
84958: CALL_OW 297
84962: ST_TO_ADDR
// if tmpDist < dist then
84963: LD_VAR 0 6
84967: PUSH
84968: LD_VAR 0 5
84972: LESS
84973: IFFALSE 84995
// begin result := i ;
84975: LD_ADDR_VAR 0 3
84979: PUSH
84980: LD_VAR 0 4
84984: ST_TO_ADDR
// dist := tmpDist ;
84985: LD_ADDR_VAR 0 5
84989: PUSH
84990: LD_VAR 0 6
84994: ST_TO_ADDR
// end ; end ;
84995: GO 84927
84997: POP
84998: POP
// end ;
84999: LD_VAR 0 3
85003: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
85004: LD_INT 0
85006: PPUSH
// uc_side := side ;
85007: LD_ADDR_OWVAR 20
85011: PUSH
85012: LD_VAR 0 1
85016: ST_TO_ADDR
// uc_nation := 3 ;
85017: LD_ADDR_OWVAR 21
85021: PUSH
85022: LD_INT 3
85024: ST_TO_ADDR
// vc_chassis := 25 ;
85025: LD_ADDR_OWVAR 37
85029: PUSH
85030: LD_INT 25
85032: ST_TO_ADDR
// vc_engine := engine_siberite ;
85033: LD_ADDR_OWVAR 39
85037: PUSH
85038: LD_INT 3
85040: ST_TO_ADDR
// vc_control := control_computer ;
85041: LD_ADDR_OWVAR 38
85045: PUSH
85046: LD_INT 3
85048: ST_TO_ADDR
// vc_weapon := 59 ;
85049: LD_ADDR_OWVAR 40
85053: PUSH
85054: LD_INT 59
85056: ST_TO_ADDR
// result := CreateVehicle ;
85057: LD_ADDR_VAR 0 5
85061: PUSH
85062: CALL_OW 45
85066: ST_TO_ADDR
// SetDir ( result , d ) ;
85067: LD_VAR 0 5
85071: PPUSH
85072: LD_VAR 0 4
85076: PPUSH
85077: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
85081: LD_VAR 0 5
85085: PPUSH
85086: LD_VAR 0 2
85090: PPUSH
85091: LD_VAR 0 3
85095: PPUSH
85096: LD_INT 0
85098: PPUSH
85099: CALL_OW 48
// end ;
85103: LD_VAR 0 5
85107: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
85108: LD_INT 0
85110: PPUSH
85111: PPUSH
85112: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
85113: LD_ADDR_VAR 0 2
85117: PUSH
85118: LD_INT 0
85120: PUSH
85121: LD_INT 0
85123: PUSH
85124: LD_INT 0
85126: PUSH
85127: LD_INT 0
85129: PUSH
85130: EMPTY
85131: LIST
85132: LIST
85133: LIST
85134: LIST
85135: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
85136: LD_VAR 0 1
85140: NOT
85141: IFTRUE 85174
85143: PUSH
85144: LD_VAR 0 1
85148: PPUSH
85149: CALL_OW 264
85153: PUSH
85154: LD_INT 12
85156: PUSH
85157: LD_INT 51
85159: PUSH
85160: LD_INT 32
85162: PUSH
85163: LD_INT 89
85165: PUSH
85166: EMPTY
85167: LIST
85168: LIST
85169: LIST
85170: LIST
85171: IN
85172: NOT
85173: OR
85174: IFFALSE 85178
// exit ;
85176: GO 85276
// for i := 1 to 3 do
85178: LD_ADDR_VAR 0 3
85182: PUSH
85183: DOUBLE
85184: LD_INT 1
85186: DEC
85187: ST_TO_ADDR
85188: LD_INT 3
85190: PUSH
85191: FOR_TO
85192: IFFALSE 85274
// begin tmp := GetCargo ( cargo , i ) ;
85194: LD_ADDR_VAR 0 4
85198: PUSH
85199: LD_VAR 0 1
85203: PPUSH
85204: LD_VAR 0 3
85208: PPUSH
85209: CALL_OW 289
85213: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
85214: LD_ADDR_VAR 0 2
85218: PUSH
85219: LD_VAR 0 2
85223: PPUSH
85224: LD_VAR 0 3
85228: PPUSH
85229: LD_VAR 0 4
85233: PPUSH
85234: CALL_OW 1
85238: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
85239: LD_ADDR_VAR 0 2
85243: PUSH
85244: LD_VAR 0 2
85248: PPUSH
85249: LD_INT 4
85251: PPUSH
85252: LD_VAR 0 2
85256: PUSH
85257: LD_INT 4
85259: ARRAY
85260: PUSH
85261: LD_VAR 0 4
85265: PLUS
85266: PPUSH
85267: CALL_OW 1
85271: ST_TO_ADDR
// end ;
85272: GO 85191
85274: POP
85275: POP
// end ;
85276: LD_VAR 0 2
85280: RET
// export function Length ( array ) ; begin
85281: LD_INT 0
85283: PPUSH
// result := array + 0 ;
85284: LD_ADDR_VAR 0 2
85288: PUSH
85289: LD_VAR 0 1
85293: PUSH
85294: LD_INT 0
85296: PLUS
85297: ST_TO_ADDR
// end ;
85298: LD_VAR 0 2
85302: RET
// export function PrepareArray ( array ) ; begin
85303: LD_INT 0
85305: PPUSH
// result := array diff 0 ;
85306: LD_ADDR_VAR 0 2
85310: PUSH
85311: LD_VAR 0 1
85315: PUSH
85316: LD_INT 0
85318: DIFF
85319: ST_TO_ADDR
// if not result [ 1 ] then
85320: LD_VAR 0 2
85324: PUSH
85325: LD_INT 1
85327: ARRAY
85328: NOT
85329: IFFALSE 85349
// result := Delete ( result , 1 ) ;
85331: LD_ADDR_VAR 0 2
85335: PUSH
85336: LD_VAR 0 2
85340: PPUSH
85341: LD_INT 1
85343: PPUSH
85344: CALL_OW 3
85348: ST_TO_ADDR
// end ;
85349: LD_VAR 0 2
85353: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
85354: LD_INT 0
85356: PPUSH
85357: PPUSH
85358: PPUSH
85359: PPUSH
// sibRocketRange := 25 ;
85360: LD_ADDR_VAR 0 6
85364: PUSH
85365: LD_INT 25
85367: ST_TO_ADDR
// result := false ;
85368: LD_ADDR_VAR 0 4
85372: PUSH
85373: LD_INT 0
85375: ST_TO_ADDR
// for i := 0 to 5 do
85376: LD_ADDR_VAR 0 5
85380: PUSH
85381: DOUBLE
85382: LD_INT 0
85384: DEC
85385: ST_TO_ADDR
85386: LD_INT 5
85388: PUSH
85389: FOR_TO
85390: IFFALSE 85457
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
85392: LD_VAR 0 1
85396: PPUSH
85397: LD_VAR 0 5
85401: PPUSH
85402: LD_VAR 0 6
85406: PPUSH
85407: CALL_OW 272
85411: PPUSH
85412: LD_VAR 0 2
85416: PPUSH
85417: LD_VAR 0 5
85421: PPUSH
85422: LD_VAR 0 6
85426: PPUSH
85427: CALL_OW 273
85431: PPUSH
85432: LD_VAR 0 3
85436: PPUSH
85437: CALL_OW 309
85441: IFFALSE 85455
// begin result := true ;
85443: LD_ADDR_VAR 0 4
85447: PUSH
85448: LD_INT 1
85450: ST_TO_ADDR
// exit ;
85451: POP
85452: POP
85453: GO 85459
// end ;
85455: GO 85389
85457: POP
85458: POP
// end ;
85459: LD_VAR 0 4
85463: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
85464: LD_INT 0
85466: PPUSH
85467: PPUSH
85468: PPUSH
// if btype = b_depot then
85469: LD_VAR 0 2
85473: PUSH
85474: LD_INT 0
85476: EQUAL
85477: IFFALSE 85489
// begin result := true ;
85479: LD_ADDR_VAR 0 3
85483: PUSH
85484: LD_INT 1
85486: ST_TO_ADDR
// exit ;
85487: GO 85609
// end ; pom := GetBase ( depot ) ;
85489: LD_ADDR_VAR 0 4
85493: PUSH
85494: LD_VAR 0 1
85498: PPUSH
85499: CALL_OW 274
85503: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
85504: LD_ADDR_VAR 0 5
85508: PUSH
85509: LD_VAR 0 2
85513: PPUSH
85514: LD_VAR 0 1
85518: PPUSH
85519: CALL_OW 248
85523: PPUSH
85524: CALL_OW 450
85528: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
85529: LD_ADDR_VAR 0 3
85533: PUSH
85534: LD_VAR 0 4
85538: PPUSH
85539: LD_INT 1
85541: PPUSH
85542: CALL_OW 275
85546: PUSH
85547: LD_VAR 0 5
85551: PUSH
85552: LD_INT 1
85554: ARRAY
85555: GREATEREQUAL
85556: IFFALSE 85582
85558: PUSH
85559: LD_VAR 0 4
85563: PPUSH
85564: LD_INT 2
85566: PPUSH
85567: CALL_OW 275
85571: PUSH
85572: LD_VAR 0 5
85576: PUSH
85577: LD_INT 2
85579: ARRAY
85580: GREATEREQUAL
85581: AND
85582: IFFALSE 85608
85584: PUSH
85585: LD_VAR 0 4
85589: PPUSH
85590: LD_INT 3
85592: PPUSH
85593: CALL_OW 275
85597: PUSH
85598: LD_VAR 0 5
85602: PUSH
85603: LD_INT 3
85605: ARRAY
85606: GREATEREQUAL
85607: AND
85608: ST_TO_ADDR
// end ;
85609: LD_VAR 0 3
85613: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
85614: LD_INT 0
85616: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
85617: LD_VAR 0 1
85621: PPUSH
85622: LD_VAR 0 2
85626: PPUSH
85627: LD_INT 0
85629: PPUSH
85630: LD_INT 0
85632: PPUSH
85633: LD_INT 1
85635: PPUSH
85636: LD_INT 0
85638: PPUSH
85639: CALL_OW 587
// end ;
85643: LD_VAR 0 3
85647: RET
// export function CenterOnNow ( unit ) ; begin
85648: LD_INT 0
85650: PPUSH
// result := IsInUnit ( unit ) ;
85651: LD_ADDR_VAR 0 2
85655: PUSH
85656: LD_VAR 0 1
85660: PPUSH
85661: CALL_OW 310
85665: ST_TO_ADDR
// if not result then
85666: LD_VAR 0 2
85670: NOT
85671: IFFALSE 85683
// result := unit ;
85673: LD_ADDR_VAR 0 2
85677: PUSH
85678: LD_VAR 0 1
85682: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
85683: LD_VAR 0 1
85687: PPUSH
85688: CALL_OW 87
// end ;
85692: LD_VAR 0 2
85696: RET
// export function ComMoveHex ( unit , hex ) ; begin
85697: LD_INT 0
85699: PPUSH
// if not hex then
85700: LD_VAR 0 2
85704: NOT
85705: IFFALSE 85709
// exit ;
85707: GO 85762
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
85709: LD_VAR 0 2
85713: PUSH
85714: LD_INT 1
85716: ARRAY
85717: PPUSH
85718: LD_VAR 0 2
85722: PUSH
85723: LD_INT 2
85725: ARRAY
85726: PPUSH
85727: CALL_OW 428
85731: IFFALSE 85735
// exit ;
85733: GO 85762
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
85735: LD_VAR 0 1
85739: PPUSH
85740: LD_VAR 0 2
85744: PUSH
85745: LD_INT 1
85747: ARRAY
85748: PPUSH
85749: LD_VAR 0 2
85753: PUSH
85754: LD_INT 2
85756: ARRAY
85757: PPUSH
85758: CALL_OW 111
// end ;
85762: LD_VAR 0 3
85766: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
85767: LD_INT 0
85769: PPUSH
85770: PPUSH
85771: PPUSH
// if not unit or not enemy then
85772: LD_VAR 0 1
85776: NOT
85777: IFTRUE 85786
85779: PUSH
85780: LD_VAR 0 2
85784: NOT
85785: OR
85786: IFFALSE 85790
// exit ;
85788: GO 85916
// x := GetX ( enemy ) ;
85790: LD_ADDR_VAR 0 4
85794: PUSH
85795: LD_VAR 0 2
85799: PPUSH
85800: CALL_OW 250
85804: ST_TO_ADDR
// y := GetY ( enemy ) ;
85805: LD_ADDR_VAR 0 5
85809: PUSH
85810: LD_VAR 0 2
85814: PPUSH
85815: CALL_OW 251
85819: ST_TO_ADDR
// if ValidHex ( x , y ) then
85820: LD_VAR 0 4
85824: PPUSH
85825: LD_VAR 0 5
85829: PPUSH
85830: CALL_OW 488
85834: IFFALSE 85916
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
85836: LD_VAR 0 2
85840: PPUSH
85841: CALL_OW 247
85845: PUSH
85846: LD_INT 3
85848: PUSH
85849: LD_INT 2
85851: PUSH
85852: EMPTY
85853: LIST
85854: LIST
85855: IN
85856: IFTRUE 85879
85858: PUSH
85859: LD_VAR 0 1
85863: PPUSH
85864: CALL_OW 255
85868: PPUSH
85869: LD_VAR 0 2
85873: PPUSH
85874: CALL_OW 292
85878: OR
85879: IFFALSE 85897
// ComAttackUnit ( unit , enemy ) else
85881: LD_VAR 0 1
85885: PPUSH
85886: LD_VAR 0 2
85890: PPUSH
85891: CALL_OW 115
85895: GO 85916
// ComAgressiveMove ( unit , x , y ) ;
85897: LD_VAR 0 1
85901: PPUSH
85902: LD_VAR 0 4
85906: PPUSH
85907: LD_VAR 0 5
85911: PPUSH
85912: CALL_OW 114
// end ;
85916: LD_VAR 0 3
85920: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
85921: LD_INT 0
85923: PPUSH
85924: PPUSH
85925: PPUSH
// list := AreaToList ( area , 0 ) ;
85926: LD_ADDR_VAR 0 5
85930: PUSH
85931: LD_VAR 0 1
85935: PPUSH
85936: LD_INT 0
85938: PPUSH
85939: CALL_OW 517
85943: ST_TO_ADDR
// if not list then
85944: LD_VAR 0 5
85948: NOT
85949: IFFALSE 85953
// exit ;
85951: GO 86083
// if all then
85953: LD_VAR 0 2
85957: IFFALSE 86045
// begin for i := 1 to list [ 1 ] do
85959: LD_ADDR_VAR 0 4
85963: PUSH
85964: DOUBLE
85965: LD_INT 1
85967: DEC
85968: ST_TO_ADDR
85969: LD_VAR 0 5
85973: PUSH
85974: LD_INT 1
85976: ARRAY
85977: PUSH
85978: FOR_TO
85979: IFFALSE 86041
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
85981: LD_ADDR_VAR 0 3
85985: PUSH
85986: LD_VAR 0 3
85990: PPUSH
85991: LD_VAR 0 3
85995: PUSH
85996: LD_INT 1
85998: PLUS
85999: PPUSH
86000: LD_VAR 0 5
86004: PUSH
86005: LD_INT 1
86007: ARRAY
86008: PUSH
86009: LD_VAR 0 4
86013: ARRAY
86014: PUSH
86015: LD_VAR 0 5
86019: PUSH
86020: LD_INT 2
86022: ARRAY
86023: PUSH
86024: LD_VAR 0 4
86028: ARRAY
86029: PUSH
86030: EMPTY
86031: LIST
86032: LIST
86033: PPUSH
86034: CALL_OW 1
86038: ST_TO_ADDR
86039: GO 85978
86041: POP
86042: POP
// exit ;
86043: GO 86083
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
86045: LD_ADDR_VAR 0 3
86049: PUSH
86050: LD_VAR 0 5
86054: PUSH
86055: LD_INT 1
86057: ARRAY
86058: PUSH
86059: LD_INT 1
86061: ARRAY
86062: PUSH
86063: LD_VAR 0 5
86067: PUSH
86068: LD_INT 2
86070: ARRAY
86071: PUSH
86072: LD_INT 1
86074: ARRAY
86075: PUSH
86076: EMPTY
86077: LIST
86078: LIST
86079: PUSH
86080: EMPTY
86081: LIST
86082: ST_TO_ADDR
// end ;
86083: LD_VAR 0 3
86087: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
86088: LD_INT 0
86090: PPUSH
86091: PPUSH
// list := AreaToList ( area , 0 ) ;
86092: LD_ADDR_VAR 0 4
86096: PUSH
86097: LD_VAR 0 1
86101: PPUSH
86102: LD_INT 0
86104: PPUSH
86105: CALL_OW 517
86109: ST_TO_ADDR
// if not list then
86110: LD_VAR 0 4
86114: NOT
86115: IFFALSE 86119
// exit ;
86117: GO 86160
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
86119: LD_ADDR_VAR 0 3
86123: PUSH
86124: LD_VAR 0 4
86128: PUSH
86129: LD_INT 1
86131: ARRAY
86132: PUSH
86133: LD_INT 1
86135: ARRAY
86136: PUSH
86137: LD_VAR 0 4
86141: PUSH
86142: LD_INT 2
86144: ARRAY
86145: PUSH
86146: LD_INT 1
86148: ARRAY
86149: PUSH
86150: LD_VAR 0 2
86154: PUSH
86155: EMPTY
86156: LIST
86157: LIST
86158: LIST
86159: ST_TO_ADDR
// end ;
86160: LD_VAR 0 3
86164: RET
// export function First ( array ) ; begin
86165: LD_INT 0
86167: PPUSH
// if not array then
86168: LD_VAR 0 1
86172: NOT
86173: IFFALSE 86177
// exit ;
86175: GO 86191
// result := array [ 1 ] ;
86177: LD_ADDR_VAR 0 2
86181: PUSH
86182: LD_VAR 0 1
86186: PUSH
86187: LD_INT 1
86189: ARRAY
86190: ST_TO_ADDR
// end ;
86191: LD_VAR 0 2
86195: RET
// export function Last ( array ) ; begin
86196: LD_INT 0
86198: PPUSH
// if not array then
86199: LD_VAR 0 1
86203: NOT
86204: IFFALSE 86208
// exit ;
86206: GO 86224
// result := array [ array ] ;
86208: LD_ADDR_VAR 0 2
86212: PUSH
86213: LD_VAR 0 1
86217: PUSH
86218: LD_VAR 0 1
86222: ARRAY
86223: ST_TO_ADDR
// end ;
86224: LD_VAR 0 2
86228: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
86229: LD_INT 0
86231: PPUSH
86232: PPUSH
// result := [ ] ;
86233: LD_ADDR_VAR 0 5
86237: PUSH
86238: EMPTY
86239: ST_TO_ADDR
// if not array then
86240: LD_VAR 0 1
86244: NOT
86245: IFFALSE 86249
// exit ;
86247: GO 86361
// for i := 1 to array do
86249: LD_ADDR_VAR 0 6
86253: PUSH
86254: DOUBLE
86255: LD_INT 1
86257: DEC
86258: ST_TO_ADDR
86259: LD_VAR 0 1
86263: PUSH
86264: FOR_TO
86265: IFFALSE 86359
// if array [ i ] [ index ] = value then
86267: LD_VAR 0 1
86271: PUSH
86272: LD_VAR 0 6
86276: ARRAY
86277: PUSH
86278: LD_VAR 0 2
86282: ARRAY
86283: PUSH
86284: LD_VAR 0 3
86288: EQUAL
86289: IFFALSE 86357
// begin if indexColumn then
86291: LD_VAR 0 4
86295: IFFALSE 86331
// result := Join ( result , array [ i ] [ indexColumn ] ) else
86297: LD_ADDR_VAR 0 5
86301: PUSH
86302: LD_VAR 0 5
86306: PPUSH
86307: LD_VAR 0 1
86311: PUSH
86312: LD_VAR 0 6
86316: ARRAY
86317: PUSH
86318: LD_VAR 0 4
86322: ARRAY
86323: PPUSH
86324: CALL 81369 0 2
86328: ST_TO_ADDR
86329: GO 86357
// result := Join ( result , array [ i ] ) ;
86331: LD_ADDR_VAR 0 5
86335: PUSH
86336: LD_VAR 0 5
86340: PPUSH
86341: LD_VAR 0 1
86345: PUSH
86346: LD_VAR 0 6
86350: ARRAY
86351: PPUSH
86352: CALL 81369 0 2
86356: ST_TO_ADDR
// end ;
86357: GO 86264
86359: POP
86360: POP
// end ;
86361: LD_VAR 0 5
86365: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
86366: LD_INT 0
86368: PPUSH
// if not vehicles or not parkingPoint then
86369: LD_VAR 0 1
86373: NOT
86374: IFTRUE 86383
86376: PUSH
86377: LD_VAR 0 2
86381: NOT
86382: OR
86383: IFFALSE 86387
// exit ;
86385: GO 86485
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
86387: LD_ADDR_VAR 0 1
86391: PUSH
86392: LD_VAR 0 1
86396: PPUSH
86397: LD_INT 50
86399: PUSH
86400: EMPTY
86401: LIST
86402: PUSH
86403: LD_INT 3
86405: PUSH
86406: LD_INT 92
86408: PUSH
86409: LD_VAR 0 2
86413: PUSH
86414: LD_INT 1
86416: ARRAY
86417: PUSH
86418: LD_VAR 0 2
86422: PUSH
86423: LD_INT 2
86425: ARRAY
86426: PUSH
86427: LD_INT 8
86429: PUSH
86430: EMPTY
86431: LIST
86432: LIST
86433: LIST
86434: LIST
86435: PUSH
86436: EMPTY
86437: LIST
86438: LIST
86439: PUSH
86440: EMPTY
86441: LIST
86442: LIST
86443: PPUSH
86444: CALL_OW 72
86448: ST_TO_ADDR
// if not vehicles then
86449: LD_VAR 0 1
86453: NOT
86454: IFFALSE 86458
// exit ;
86456: GO 86485
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
86458: LD_VAR 0 1
86462: PPUSH
86463: LD_VAR 0 2
86467: PUSH
86468: LD_INT 1
86470: ARRAY
86471: PPUSH
86472: LD_VAR 0 2
86476: PUSH
86477: LD_INT 2
86479: ARRAY
86480: PPUSH
86481: CALL_OW 111
// end ;
86485: LD_VAR 0 3
86489: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
86490: LD_INT 0
86492: PPUSH
86493: PPUSH
86494: PPUSH
// if not side or not area then
86495: LD_VAR 0 1
86499: NOT
86500: IFTRUE 86509
86502: PUSH
86503: LD_VAR 0 2
86507: NOT
86508: OR
86509: IFFALSE 86513
// exit ;
86511: GO 86632
// tmp := AreaToList ( area , 0 ) ;
86513: LD_ADDR_VAR 0 5
86517: PUSH
86518: LD_VAR 0 2
86522: PPUSH
86523: LD_INT 0
86525: PPUSH
86526: CALL_OW 517
86530: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
86531: LD_ADDR_VAR 0 4
86535: PUSH
86536: DOUBLE
86537: LD_INT 1
86539: DEC
86540: ST_TO_ADDR
86541: LD_VAR 0 5
86545: PUSH
86546: LD_INT 1
86548: ARRAY
86549: PUSH
86550: FOR_TO
86551: IFFALSE 86630
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
86553: LD_VAR 0 5
86557: PUSH
86558: LD_INT 1
86560: ARRAY
86561: PUSH
86562: LD_VAR 0 4
86566: ARRAY
86567: PPUSH
86568: LD_VAR 0 5
86572: PUSH
86573: LD_INT 2
86575: ARRAY
86576: PUSH
86577: LD_VAR 0 4
86581: ARRAY
86582: PPUSH
86583: CALL_OW 351
86587: IFFALSE 86628
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
86589: LD_VAR 0 5
86593: PUSH
86594: LD_INT 1
86596: ARRAY
86597: PUSH
86598: LD_VAR 0 4
86602: ARRAY
86603: PPUSH
86604: LD_VAR 0 5
86608: PUSH
86609: LD_INT 2
86611: ARRAY
86612: PUSH
86613: LD_VAR 0 4
86617: ARRAY
86618: PPUSH
86619: LD_VAR 0 1
86623: PPUSH
86624: CALL_OW 244
// end ;
86628: GO 86550
86630: POP
86631: POP
// end ;
86632: LD_VAR 0 3
86636: RET
// export function UniqueArray ( array ) ; var i ; begin
86637: LD_INT 0
86639: PPUSH
86640: PPUSH
// result := [ ] ;
86641: LD_ADDR_VAR 0 2
86645: PUSH
86646: EMPTY
86647: ST_TO_ADDR
// if not array then
86648: LD_VAR 0 1
86652: NOT
86653: IFFALSE 86657
// exit ;
86655: GO 86718
// for i := 1 to array do
86657: LD_ADDR_VAR 0 3
86661: PUSH
86662: DOUBLE
86663: LD_INT 1
86665: DEC
86666: ST_TO_ADDR
86667: LD_VAR 0 1
86671: PUSH
86672: FOR_TO
86673: IFFALSE 86716
// if not array [ i ] in result then
86675: LD_VAR 0 1
86679: PUSH
86680: LD_VAR 0 3
86684: ARRAY
86685: PUSH
86686: LD_VAR 0 2
86690: IN
86691: NOT
86692: IFFALSE 86714
// result := Join ( result , i ) ;
86694: LD_ADDR_VAR 0 2
86698: PUSH
86699: LD_VAR 0 2
86703: PPUSH
86704: LD_VAR 0 3
86708: PPUSH
86709: CALL 81369 0 2
86713: ST_TO_ADDR
86714: GO 86672
86716: POP
86717: POP
// end ; end_of_file
86718: LD_VAR 0 2
86722: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86723: LD_VAR 0 1
86727: PUSH
86728: LD_INT 200
86730: DOUBLE
86731: GREATEREQUAL
86732: IFFALSE 86740
86734: LD_INT 299
86736: DOUBLE
86737: LESSEQUAL
86738: IFTRUE 86742
86740: GO 86774
86742: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86743: LD_VAR 0 1
86747: PPUSH
86748: LD_VAR 0 2
86752: PPUSH
86753: LD_VAR 0 3
86757: PPUSH
86758: LD_VAR 0 4
86762: PPUSH
86763: LD_VAR 0 5
86767: PPUSH
86768: CALL 37445 0 5
86772: GO 86851
86774: LD_INT 300
86776: DOUBLE
86777: GREATEREQUAL
86778: IFFALSE 86786
86780: LD_INT 399
86782: DOUBLE
86783: LESSEQUAL
86784: IFTRUE 86788
86786: GO 86850
86788: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86789: LD_VAR 0 1
86793: PPUSH
86794: LD_VAR 0 2
86798: PPUSH
86799: LD_VAR 0 3
86803: PPUSH
86804: LD_VAR 0 4
86808: PPUSH
86809: LD_VAR 0 5
86813: PPUSH
86814: LD_VAR 0 6
86818: PPUSH
86819: LD_VAR 0 7
86823: PPUSH
86824: LD_VAR 0 8
86828: PPUSH
86829: LD_VAR 0 9
86833: PPUSH
86834: LD_VAR 0 10
86838: PPUSH
86839: LD_VAR 0 11
86843: PPUSH
86844: CALL 33248 0 11
86848: GO 86851
86850: POP
// end ;
86851: PPOPN 11
86853: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86854: LD_VAR 0 1
86858: PPUSH
86859: LD_VAR 0 2
86863: PPUSH
86864: LD_VAR 0 3
86868: PPUSH
86869: LD_VAR 0 4
86873: PPUSH
86874: LD_VAR 0 5
86878: PPUSH
86879: CALL 36745 0 5
// end ; end_of_file
86883: PPOPN 5
86885: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86886: LD_VAR 0 1
86890: PPUSH
86891: LD_VAR 0 2
86895: PPUSH
86896: LD_VAR 0 3
86900: PPUSH
86901: LD_VAR 0 4
86905: PPUSH
86906: LD_VAR 0 5
86910: PPUSH
86911: LD_VAR 0 6
86915: PPUSH
86916: CALL 20788 0 6
// end ;
86920: PPOPN 6
86922: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
86923: LD_INT 0
86925: PPUSH
// begin if not units then
86926: LD_VAR 0 1
86930: NOT
86931: IFFALSE 86935
// exit ;
86933: GO 86969
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
86935: LD_VAR 0 1
86939: PPUSH
86940: LD_VAR 0 2
86944: PPUSH
86945: LD_VAR 0 3
86949: PPUSH
86950: LD_VAR 0 4
86954: PPUSH
86955: LD_VAR 0 5
86959: PPUSH
86960: LD_VAR 0 6
86964: PPUSH
86965: CALL 43142 0 6
// end ;
86969: PPOPN 7
86971: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
86972: CALL 20668 0 0
// end ;
86976: PPOPN 1
86978: END
